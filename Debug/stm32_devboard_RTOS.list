
stm32_devboard_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000144b0  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000bf4  08014670  08014670  00024670  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015264  08015264  00030234  2**0
                  CONTENTS
  4 .ARM          00000008  08015264  08015264  00025264  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801526c  0801526c  00030234  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801526c  0801526c  0002526c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015270  08015270  00025270  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000234  20000000  08015274  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000062c4  20000234  080154a8  00030234  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200064f8  080154a8  000364f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030234  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030264  2**0
                  CONTENTS, READONLY
 13 .debug_info   000288b2  00000000  00000000  000302a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000602a  00000000  00000000  00058b59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000022f8  00000000  00000000  0005eb88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001b2f  00000000  00000000  00060e80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00031bb1  00000000  00000000  000629af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002be3e  00000000  00000000  00094560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0011e43d  00000000  00000000  000c039e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000a8c4  00000000  00000000  001de7dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  001e90a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000234 	.word	0x20000234
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08014658 	.word	0x08014658

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000238 	.word	0x20000238
 80001fc:	08014658 	.word	0x08014658

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2f>:
 8000bd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bdc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000be0:	bf24      	itt	cs
 8000be2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000be6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bea:	d90d      	bls.n	8000c08 <__aeabi_d2f+0x30>
 8000bec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bf0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bf4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bf8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bfc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c00:	bf08      	it	eq
 8000c02:	f020 0001 	biceq.w	r0, r0, #1
 8000c06:	4770      	bx	lr
 8000c08:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c0c:	d121      	bne.n	8000c52 <__aeabi_d2f+0x7a>
 8000c0e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c12:	bfbc      	itt	lt
 8000c14:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c18:	4770      	bxlt	lr
 8000c1a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c22:	f1c2 0218 	rsb	r2, r2, #24
 8000c26:	f1c2 0c20 	rsb	ip, r2, #32
 8000c2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c32:	bf18      	it	ne
 8000c34:	f040 0001 	orrne.w	r0, r0, #1
 8000c38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c44:	ea40 000c 	orr.w	r0, r0, ip
 8000c48:	fa23 f302 	lsr.w	r3, r3, r2
 8000c4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c50:	e7cc      	b.n	8000bec <__aeabi_d2f+0x14>
 8000c52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c56:	d107      	bne.n	8000c68 <__aeabi_d2f+0x90>
 8000c58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c5c:	bf1e      	ittt	ne
 8000c5e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c62:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c66:	4770      	bxne	lr
 8000c68:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <__aeabi_uldivmod>:
 8000c78:	b953      	cbnz	r3, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7a:	b94a      	cbnz	r2, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7c:	2900      	cmp	r1, #0
 8000c7e:	bf08      	it	eq
 8000c80:	2800      	cmpeq	r0, #0
 8000c82:	bf1c      	itt	ne
 8000c84:	f04f 31ff 	movne.w	r1, #4294967295
 8000c88:	f04f 30ff 	movne.w	r0, #4294967295
 8000c8c:	f000 b970 	b.w	8000f70 <__aeabi_idiv0>
 8000c90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c98:	f000 f806 	bl	8000ca8 <__udivmoddi4>
 8000c9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca4:	b004      	add	sp, #16
 8000ca6:	4770      	bx	lr

08000ca8 <__udivmoddi4>:
 8000ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cac:	9e08      	ldr	r6, [sp, #32]
 8000cae:	460d      	mov	r5, r1
 8000cb0:	4604      	mov	r4, r0
 8000cb2:	460f      	mov	r7, r1
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d14a      	bne.n	8000d4e <__udivmoddi4+0xa6>
 8000cb8:	428a      	cmp	r2, r1
 8000cba:	4694      	mov	ip, r2
 8000cbc:	d965      	bls.n	8000d8a <__udivmoddi4+0xe2>
 8000cbe:	fab2 f382 	clz	r3, r2
 8000cc2:	b143      	cbz	r3, 8000cd6 <__udivmoddi4+0x2e>
 8000cc4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cc8:	f1c3 0220 	rsb	r2, r3, #32
 8000ccc:	409f      	lsls	r7, r3
 8000cce:	fa20 f202 	lsr.w	r2, r0, r2
 8000cd2:	4317      	orrs	r7, r2
 8000cd4:	409c      	lsls	r4, r3
 8000cd6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cda:	fa1f f58c 	uxth.w	r5, ip
 8000cde:	fbb7 f1fe 	udiv	r1, r7, lr
 8000ce2:	0c22      	lsrs	r2, r4, #16
 8000ce4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000ce8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cec:	fb01 f005 	mul.w	r0, r1, r5
 8000cf0:	4290      	cmp	r0, r2
 8000cf2:	d90a      	bls.n	8000d0a <__udivmoddi4+0x62>
 8000cf4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cf8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000cfc:	f080 811c 	bcs.w	8000f38 <__udivmoddi4+0x290>
 8000d00:	4290      	cmp	r0, r2
 8000d02:	f240 8119 	bls.w	8000f38 <__udivmoddi4+0x290>
 8000d06:	3902      	subs	r1, #2
 8000d08:	4462      	add	r2, ip
 8000d0a:	1a12      	subs	r2, r2, r0
 8000d0c:	b2a4      	uxth	r4, r4
 8000d0e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d12:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d16:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d1a:	fb00 f505 	mul.w	r5, r0, r5
 8000d1e:	42a5      	cmp	r5, r4
 8000d20:	d90a      	bls.n	8000d38 <__udivmoddi4+0x90>
 8000d22:	eb1c 0404 	adds.w	r4, ip, r4
 8000d26:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d2a:	f080 8107 	bcs.w	8000f3c <__udivmoddi4+0x294>
 8000d2e:	42a5      	cmp	r5, r4
 8000d30:	f240 8104 	bls.w	8000f3c <__udivmoddi4+0x294>
 8000d34:	4464      	add	r4, ip
 8000d36:	3802      	subs	r0, #2
 8000d38:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d3c:	1b64      	subs	r4, r4, r5
 8000d3e:	2100      	movs	r1, #0
 8000d40:	b11e      	cbz	r6, 8000d4a <__udivmoddi4+0xa2>
 8000d42:	40dc      	lsrs	r4, r3
 8000d44:	2300      	movs	r3, #0
 8000d46:	e9c6 4300 	strd	r4, r3, [r6]
 8000d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d908      	bls.n	8000d64 <__udivmoddi4+0xbc>
 8000d52:	2e00      	cmp	r6, #0
 8000d54:	f000 80ed 	beq.w	8000f32 <__udivmoddi4+0x28a>
 8000d58:	2100      	movs	r1, #0
 8000d5a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d5e:	4608      	mov	r0, r1
 8000d60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d64:	fab3 f183 	clz	r1, r3
 8000d68:	2900      	cmp	r1, #0
 8000d6a:	d149      	bne.n	8000e00 <__udivmoddi4+0x158>
 8000d6c:	42ab      	cmp	r3, r5
 8000d6e:	d302      	bcc.n	8000d76 <__udivmoddi4+0xce>
 8000d70:	4282      	cmp	r2, r0
 8000d72:	f200 80f8 	bhi.w	8000f66 <__udivmoddi4+0x2be>
 8000d76:	1a84      	subs	r4, r0, r2
 8000d78:	eb65 0203 	sbc.w	r2, r5, r3
 8000d7c:	2001      	movs	r0, #1
 8000d7e:	4617      	mov	r7, r2
 8000d80:	2e00      	cmp	r6, #0
 8000d82:	d0e2      	beq.n	8000d4a <__udivmoddi4+0xa2>
 8000d84:	e9c6 4700 	strd	r4, r7, [r6]
 8000d88:	e7df      	b.n	8000d4a <__udivmoddi4+0xa2>
 8000d8a:	b902      	cbnz	r2, 8000d8e <__udivmoddi4+0xe6>
 8000d8c:	deff      	udf	#255	; 0xff
 8000d8e:	fab2 f382 	clz	r3, r2
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	f040 8090 	bne.w	8000eb8 <__udivmoddi4+0x210>
 8000d98:	1a8a      	subs	r2, r1, r2
 8000d9a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d9e:	fa1f fe8c 	uxth.w	lr, ip
 8000da2:	2101      	movs	r1, #1
 8000da4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000da8:	fb07 2015 	mls	r0, r7, r5, r2
 8000dac:	0c22      	lsrs	r2, r4, #16
 8000dae:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000db2:	fb0e f005 	mul.w	r0, lr, r5
 8000db6:	4290      	cmp	r0, r2
 8000db8:	d908      	bls.n	8000dcc <__udivmoddi4+0x124>
 8000dba:	eb1c 0202 	adds.w	r2, ip, r2
 8000dbe:	f105 38ff 	add.w	r8, r5, #4294967295
 8000dc2:	d202      	bcs.n	8000dca <__udivmoddi4+0x122>
 8000dc4:	4290      	cmp	r0, r2
 8000dc6:	f200 80cb 	bhi.w	8000f60 <__udivmoddi4+0x2b8>
 8000dca:	4645      	mov	r5, r8
 8000dcc:	1a12      	subs	r2, r2, r0
 8000dce:	b2a4      	uxth	r4, r4
 8000dd0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000dd4:	fb07 2210 	mls	r2, r7, r0, r2
 8000dd8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ddc:	fb0e fe00 	mul.w	lr, lr, r0
 8000de0:	45a6      	cmp	lr, r4
 8000de2:	d908      	bls.n	8000df6 <__udivmoddi4+0x14e>
 8000de4:	eb1c 0404 	adds.w	r4, ip, r4
 8000de8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dec:	d202      	bcs.n	8000df4 <__udivmoddi4+0x14c>
 8000dee:	45a6      	cmp	lr, r4
 8000df0:	f200 80bb 	bhi.w	8000f6a <__udivmoddi4+0x2c2>
 8000df4:	4610      	mov	r0, r2
 8000df6:	eba4 040e 	sub.w	r4, r4, lr
 8000dfa:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dfe:	e79f      	b.n	8000d40 <__udivmoddi4+0x98>
 8000e00:	f1c1 0720 	rsb	r7, r1, #32
 8000e04:	408b      	lsls	r3, r1
 8000e06:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e0a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e0e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e12:	fa20 f307 	lsr.w	r3, r0, r7
 8000e16:	40fd      	lsrs	r5, r7
 8000e18:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e1c:	4323      	orrs	r3, r4
 8000e1e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	fb09 5518 	mls	r5, r9, r8, r5
 8000e2a:	0c1c      	lsrs	r4, r3, #16
 8000e2c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e30:	fb08 f50e 	mul.w	r5, r8, lr
 8000e34:	42a5      	cmp	r5, r4
 8000e36:	fa02 f201 	lsl.w	r2, r2, r1
 8000e3a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e3e:	d90b      	bls.n	8000e58 <__udivmoddi4+0x1b0>
 8000e40:	eb1c 0404 	adds.w	r4, ip, r4
 8000e44:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e48:	f080 8088 	bcs.w	8000f5c <__udivmoddi4+0x2b4>
 8000e4c:	42a5      	cmp	r5, r4
 8000e4e:	f240 8085 	bls.w	8000f5c <__udivmoddi4+0x2b4>
 8000e52:	f1a8 0802 	sub.w	r8, r8, #2
 8000e56:	4464      	add	r4, ip
 8000e58:	1b64      	subs	r4, r4, r5
 8000e5a:	b29d      	uxth	r5, r3
 8000e5c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e60:	fb09 4413 	mls	r4, r9, r3, r4
 8000e64:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e68:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e6c:	45a6      	cmp	lr, r4
 8000e6e:	d908      	bls.n	8000e82 <__udivmoddi4+0x1da>
 8000e70:	eb1c 0404 	adds.w	r4, ip, r4
 8000e74:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e78:	d26c      	bcs.n	8000f54 <__udivmoddi4+0x2ac>
 8000e7a:	45a6      	cmp	lr, r4
 8000e7c:	d96a      	bls.n	8000f54 <__udivmoddi4+0x2ac>
 8000e7e:	3b02      	subs	r3, #2
 8000e80:	4464      	add	r4, ip
 8000e82:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e86:	fba3 9502 	umull	r9, r5, r3, r2
 8000e8a:	eba4 040e 	sub.w	r4, r4, lr
 8000e8e:	42ac      	cmp	r4, r5
 8000e90:	46c8      	mov	r8, r9
 8000e92:	46ae      	mov	lr, r5
 8000e94:	d356      	bcc.n	8000f44 <__udivmoddi4+0x29c>
 8000e96:	d053      	beq.n	8000f40 <__udivmoddi4+0x298>
 8000e98:	b156      	cbz	r6, 8000eb0 <__udivmoddi4+0x208>
 8000e9a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e9e:	eb64 040e 	sbc.w	r4, r4, lr
 8000ea2:	fa04 f707 	lsl.w	r7, r4, r7
 8000ea6:	40ca      	lsrs	r2, r1
 8000ea8:	40cc      	lsrs	r4, r1
 8000eaa:	4317      	orrs	r7, r2
 8000eac:	e9c6 7400 	strd	r7, r4, [r6]
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eb8:	f1c3 0120 	rsb	r1, r3, #32
 8000ebc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ec0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ec4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ec8:	409d      	lsls	r5, r3
 8000eca:	432a      	orrs	r2, r5
 8000ecc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ed0:	fa1f fe8c 	uxth.w	lr, ip
 8000ed4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ed8:	fb07 1510 	mls	r5, r7, r0, r1
 8000edc:	0c11      	lsrs	r1, r2, #16
 8000ede:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ee2:	fb00 f50e 	mul.w	r5, r0, lr
 8000ee6:	428d      	cmp	r5, r1
 8000ee8:	fa04 f403 	lsl.w	r4, r4, r3
 8000eec:	d908      	bls.n	8000f00 <__udivmoddi4+0x258>
 8000eee:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ef6:	d22f      	bcs.n	8000f58 <__udivmoddi4+0x2b0>
 8000ef8:	428d      	cmp	r5, r1
 8000efa:	d92d      	bls.n	8000f58 <__udivmoddi4+0x2b0>
 8000efc:	3802      	subs	r0, #2
 8000efe:	4461      	add	r1, ip
 8000f00:	1b49      	subs	r1, r1, r5
 8000f02:	b292      	uxth	r2, r2
 8000f04:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f08:	fb07 1115 	mls	r1, r7, r5, r1
 8000f0c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f10:	fb05 f10e 	mul.w	r1, r5, lr
 8000f14:	4291      	cmp	r1, r2
 8000f16:	d908      	bls.n	8000f2a <__udivmoddi4+0x282>
 8000f18:	eb1c 0202 	adds.w	r2, ip, r2
 8000f1c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f20:	d216      	bcs.n	8000f50 <__udivmoddi4+0x2a8>
 8000f22:	4291      	cmp	r1, r2
 8000f24:	d914      	bls.n	8000f50 <__udivmoddi4+0x2a8>
 8000f26:	3d02      	subs	r5, #2
 8000f28:	4462      	add	r2, ip
 8000f2a:	1a52      	subs	r2, r2, r1
 8000f2c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f30:	e738      	b.n	8000da4 <__udivmoddi4+0xfc>
 8000f32:	4631      	mov	r1, r6
 8000f34:	4630      	mov	r0, r6
 8000f36:	e708      	b.n	8000d4a <__udivmoddi4+0xa2>
 8000f38:	4639      	mov	r1, r7
 8000f3a:	e6e6      	b.n	8000d0a <__udivmoddi4+0x62>
 8000f3c:	4610      	mov	r0, r2
 8000f3e:	e6fb      	b.n	8000d38 <__udivmoddi4+0x90>
 8000f40:	4548      	cmp	r0, r9
 8000f42:	d2a9      	bcs.n	8000e98 <__udivmoddi4+0x1f0>
 8000f44:	ebb9 0802 	subs.w	r8, r9, r2
 8000f48:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f4c:	3b01      	subs	r3, #1
 8000f4e:	e7a3      	b.n	8000e98 <__udivmoddi4+0x1f0>
 8000f50:	4645      	mov	r5, r8
 8000f52:	e7ea      	b.n	8000f2a <__udivmoddi4+0x282>
 8000f54:	462b      	mov	r3, r5
 8000f56:	e794      	b.n	8000e82 <__udivmoddi4+0x1da>
 8000f58:	4640      	mov	r0, r8
 8000f5a:	e7d1      	b.n	8000f00 <__udivmoddi4+0x258>
 8000f5c:	46d0      	mov	r8, sl
 8000f5e:	e77b      	b.n	8000e58 <__udivmoddi4+0x1b0>
 8000f60:	3d02      	subs	r5, #2
 8000f62:	4462      	add	r2, ip
 8000f64:	e732      	b.n	8000dcc <__udivmoddi4+0x124>
 8000f66:	4608      	mov	r0, r1
 8000f68:	e70a      	b.n	8000d80 <__udivmoddi4+0xd8>
 8000f6a:	4464      	add	r4, ip
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	e742      	b.n	8000df6 <__udivmoddi4+0x14e>

08000f70 <__aeabi_idiv0>:
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop

08000f74 <FusionRadiansToDegrees>:
/**
 * @brief Converts radians to degrees.
 * @param radians Radians.
 * @return Degrees.
 */
static inline float FusionRadiansToDegrees(const float radians) {
 8000f74:	b480      	push	{r7}
 8000f76:	b083      	sub	sp, #12
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	ed87 0a01 	vstr	s0, [r7, #4]
    return radians * (180.0f / (float) M_PI);
 8000f7e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f82:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8000f98 <FusionRadiansToDegrees+0x24>
 8000f86:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8000f8a:	eeb0 0a67 	vmov.f32	s0, s15
 8000f8e:	370c      	adds	r7, #12
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr
 8000f98:	42652ee0 	.word	0x42652ee0

08000f9c <FusionAsin>:
/**
 * @brief Returns the arc sine of the value.
 * @param value Value.
 * @return Arc sine of the value.
 */
static inline float FusionAsin(const float value) {
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	ed87 0a01 	vstr	s0, [r7, #4]
    if (value <= -1.0f) {
 8000fa6:	edd7 7a01 	vldr	s15, [r7, #4]
 8000faa:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8000fae:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000fb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fb6:	d802      	bhi.n	8000fbe <FusionAsin+0x22>
        return (float) M_PI / -2.0f;
 8000fb8:	eddf 7a0c 	vldr	s15, [pc, #48]	; 8000fec <FusionAsin+0x50>
 8000fbc:	e011      	b.n	8000fe2 <FusionAsin+0x46>
    }
    if (value >= 1.0f) {
 8000fbe:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fc2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000fc6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000fca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fce:	db02      	blt.n	8000fd6 <FusionAsin+0x3a>
        return (float) M_PI / 2.0f;
 8000fd0:	eddf 7a07 	vldr	s15, [pc, #28]	; 8000ff0 <FusionAsin+0x54>
 8000fd4:	e005      	b.n	8000fe2 <FusionAsin+0x46>
    }
    return asinf(value);
 8000fd6:	ed97 0a01 	vldr	s0, [r7, #4]
 8000fda:	f011 ffdb 	bl	8012f94 <asinf>
 8000fde:	eef0 7a40 	vmov.f32	s15, s0
}
 8000fe2:	eeb0 0a67 	vmov.f32	s0, s15
 8000fe6:	3708      	adds	r7, #8
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	bfc90fdb 	.word	0xbfc90fdb
 8000ff0:	3fc90fdb 	.word	0x3fc90fdb

08000ff4 <FusionVectorSubtract>:
 * @brief Returns vector B subtracted from vector A.
 * @param vectorA Vector A.
 * @param vectorB Vector B.
 * @return Vector B subtracted from vector A.
 */
static inline FusionVector FusionVectorSubtract(const FusionVector vectorA, const FusionVector vectorB) {
 8000ff4:	b480      	push	{r7}
 8000ff6:	b091      	sub	sp, #68	; 0x44
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	eeb0 5a40 	vmov.f32	s10, s0
 8000ffe:	eef0 5a60 	vmov.f32	s11, s1
 8001002:	eeb0 6a41 	vmov.f32	s12, s2
 8001006:	eef0 6a61 	vmov.f32	s13, s3
 800100a:	eeb0 7a42 	vmov.f32	s14, s4
 800100e:	eef0 7a62 	vmov.f32	s15, s5
 8001012:	ed87 5a07 	vstr	s10, [r7, #28]
 8001016:	edc7 5a08 	vstr	s11, [r7, #32]
 800101a:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 800101e:	edc7 6a04 	vstr	s13, [r7, #16]
 8001022:	ed87 7a05 	vstr	s14, [r7, #20]
 8001026:	edc7 7a06 	vstr	s15, [r7, #24]
    const FusionVector result = {.axis = {
            .x = vectorA.axis.x - vectorB.axis.x,
 800102a:	ed97 7a07 	vldr	s14, [r7, #28]
 800102e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001032:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8001036:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = vectorA.axis.y - vectorB.axis.y,
 800103a:	ed97 7a08 	vldr	s14, [r7, #32]
 800103e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001042:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8001046:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = vectorA.axis.z - vectorB.axis.z,
 800104a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800104e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001052:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8001056:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    }};
    return result;
 800105a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800105e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001062:	ca07      	ldmia	r2, {r0, r1, r2}
 8001064:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001068:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800106a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800106c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800106e:	ee06 1a90 	vmov	s13, r1
 8001072:	ee07 2a10 	vmov	s14, r2
 8001076:	ee07 3a90 	vmov	s15, r3
}
 800107a:	eeb0 0a66 	vmov.f32	s0, s13
 800107e:	eef0 0a47 	vmov.f32	s1, s14
 8001082:	eeb0 1a67 	vmov.f32	s2, s15
 8001086:	3744      	adds	r7, #68	; 0x44
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr

08001090 <FusionQuaternionToEuler>:
/**
 * @brief Converts a quaternion to ZYX Euler angles in degrees.
 * @param quaternion Quaternion.
 * @return Euler angles in degrees.
 */
static inline FusionEuler FusionQuaternionToEuler(const FusionQuaternion quaternion) {
 8001090:	b580      	push	{r7, lr}
 8001092:	b090      	sub	sp, #64	; 0x40
 8001094:	af00      	add	r7, sp, #0
 8001096:	eeb0 6a40 	vmov.f32	s12, s0
 800109a:	eef0 6a60 	vmov.f32	s13, s1
 800109e:	eeb0 7a41 	vmov.f32	s14, s2
 80010a2:	eef0 7a61 	vmov.f32	s15, s3
 80010a6:	ed87 6a04 	vstr	s12, [r7, #16]
 80010aa:	edc7 6a05 	vstr	s13, [r7, #20]
 80010ae:	ed87 7a06 	vstr	s14, [r7, #24]
 80010b2:	edc7 7a07 	vstr	s15, [r7, #28]
#define Q quaternion.element
    const float halfMinusQySquared = 0.5f - Q.y * Q.y; // calculate common terms to avoid repeated operations
 80010b6:	ed97 7a06 	vldr	s14, [r7, #24]
 80010ba:	edd7 7a06 	vldr	s15, [r7, #24]
 80010be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010c2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80010c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010ca:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    const FusionEuler euler = {.angle = {
            .roll = FusionRadiansToDegrees(atan2f(Q.w * Q.x + Q.y * Q.z, halfMinusQySquared - Q.x * Q.x)),
 80010ce:	ed97 7a04 	vldr	s14, [r7, #16]
 80010d2:	edd7 7a05 	vldr	s15, [r7, #20]
 80010d6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010da:	edd7 6a06 	vldr	s13, [r7, #24]
 80010de:	edd7 7a07 	vldr	s15, [r7, #28]
 80010e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010e6:	ee77 6a27 	vadd.f32	s13, s14, s15
 80010ea:	ed97 7a05 	vldr	s14, [r7, #20]
 80010ee:	edd7 7a05 	vldr	s15, [r7, #20]
 80010f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010f6:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80010fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010fe:	eef0 0a67 	vmov.f32	s1, s15
 8001102:	eeb0 0a66 	vmov.f32	s0, s13
 8001106:	f011 ff71 	bl	8012fec <atan2f>
 800110a:	eef0 7a40 	vmov.f32	s15, s0
 800110e:	eeb0 0a67 	vmov.f32	s0, s15
 8001112:	f7ff ff2f 	bl	8000f74 <FusionRadiansToDegrees>
 8001116:	eef0 7a40 	vmov.f32	s15, s0
    const FusionEuler euler = {.angle = {
 800111a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            .pitch = FusionRadiansToDegrees(FusionAsin(2.0f * (Q.w * Q.y - Q.z * Q.x))),
 800111e:	ed97 7a04 	vldr	s14, [r7, #16]
 8001122:	edd7 7a06 	vldr	s15, [r7, #24]
 8001126:	ee27 7a27 	vmul.f32	s14, s14, s15
 800112a:	edd7 6a07 	vldr	s13, [r7, #28]
 800112e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001132:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001136:	ee77 7a67 	vsub.f32	s15, s14, s15
 800113a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800113e:	eeb0 0a67 	vmov.f32	s0, s15
 8001142:	f7ff ff2b 	bl	8000f9c <FusionAsin>
 8001146:	eef0 7a40 	vmov.f32	s15, s0
 800114a:	eeb0 0a67 	vmov.f32	s0, s15
 800114e:	f7ff ff11 	bl	8000f74 <FusionRadiansToDegrees>
 8001152:	eef0 7a40 	vmov.f32	s15, s0
    const FusionEuler euler = {.angle = {
 8001156:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .yaw = FusionRadiansToDegrees(atan2f(Q.w * Q.z + Q.x * Q.y, halfMinusQySquared - Q.z * Q.z)),
 800115a:	ed97 7a04 	vldr	s14, [r7, #16]
 800115e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001162:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001166:	edd7 6a05 	vldr	s13, [r7, #20]
 800116a:	edd7 7a06 	vldr	s15, [r7, #24]
 800116e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001172:	ee77 6a27 	vadd.f32	s13, s14, s15
 8001176:	ed97 7a07 	vldr	s14, [r7, #28]
 800117a:	edd7 7a07 	vldr	s15, [r7, #28]
 800117e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001182:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8001186:	ee77 7a67 	vsub.f32	s15, s14, s15
 800118a:	eef0 0a67 	vmov.f32	s1, s15
 800118e:	eeb0 0a66 	vmov.f32	s0, s13
 8001192:	f011 ff2b 	bl	8012fec <atan2f>
 8001196:	eef0 7a40 	vmov.f32	s15, s0
 800119a:	eeb0 0a67 	vmov.f32	s0, s15
 800119e:	f7ff fee9 	bl	8000f74 <FusionRadiansToDegrees>
 80011a2:	eef0 7a40 	vmov.f32	s15, s0
    const FusionEuler euler = {.angle = {
 80011a6:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    }};
    return euler;
 80011aa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80011ae:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80011b2:	ca07      	ldmia	r2, {r0, r1, r2}
 80011b4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80011b8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80011ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80011bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80011be:	ee06 1a90 	vmov	s13, r1
 80011c2:	ee07 2a10 	vmov	s14, r2
 80011c6:	ee07 3a90 	vmov	s15, r3
#undef Q
}
 80011ca:	eeb0 0a66 	vmov.f32	s0, s13
 80011ce:	eef0 0a47 	vmov.f32	s1, s14
 80011d2:	eeb0 1a67 	vmov.f32	s2, s15
 80011d6:	3740      	adds	r7, #64	; 0x40
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}

080011dc <setGyroOffset>:


FusionAhrs ahrs;
FusionOffset offset;

void setGyroOffset(gyro_data_t values){
 80011dc:	b480      	push	{r7}
 80011de:	b085      	sub	sp, #20
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	eef0 6a40 	vmov.f32	s13, s0
 80011e6:	eeb0 7a60 	vmov.f32	s14, s1
 80011ea:	eef0 7a41 	vmov.f32	s15, s2
 80011ee:	edc7 6a01 	vstr	s13, [r7, #4]
 80011f2:	ed87 7a02 	vstr	s14, [r7, #8]
 80011f6:	edc7 7a03 	vstr	s15, [r7, #12]
	gyroscopeOffset.array[0] = values.gyro_x;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	4a06      	ldr	r2, [pc, #24]	; (8001218 <setGyroOffset+0x3c>)
 80011fe:	6013      	str	r3, [r2, #0]
	gyroscopeOffset.array[1] = values.gyro_y;
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	4a05      	ldr	r2, [pc, #20]	; (8001218 <setGyroOffset+0x3c>)
 8001204:	6053      	str	r3, [r2, #4]
	gyroscopeOffset.array[2] = values.gyro_z;
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	4a03      	ldr	r2, [pc, #12]	; (8001218 <setGyroOffset+0x3c>)
 800120a:	6093      	str	r3, [r2, #8]
}
 800120c:	bf00      	nop
 800120e:	3714      	adds	r7, #20
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr
 8001218:	20000250 	.word	0x20000250

0800121c <FusionInit>:

/* Initialize Fusion algorithm. */
void FusionInit(void){
 800121c:	b5b0      	push	{r4, r5, r7, lr}
 800121e:	b088      	sub	sp, #32
 8001220:	af00      	add	r7, sp, #0
	gyro_data_t values = {0};
 8001222:	f107 0314 	add.w	r3, r7, #20
 8001226:	2200      	movs	r2, #0
 8001228:	601a      	str	r2, [r3, #0]
 800122a:	605a      	str	r2, [r3, #4]
 800122c:	609a      	str	r2, [r3, #8]
	FusionOffsetInitialise(&offset, SAMPLE_RATE);
 800122e:	2164      	movs	r1, #100	; 0x64
 8001230:	4814      	ldr	r0, [pc, #80]	; (8001284 <FusionInit+0x68>)
 8001232:	f002 f969 	bl	8003508 <FusionOffsetInitialise>
	FusionAhrsInitialise(&ahrs);
 8001236:	4814      	ldr	r0, [pc, #80]	; (8001288 <FusionInit+0x6c>)
 8001238:	f000 fdfc 	bl	8001e34 <FusionAhrsInitialise>
	const FusionAhrsSettings settings = {
 800123c:	4b13      	ldr	r3, [pc, #76]	; (800128c <FusionInit+0x70>)
 800123e:	463c      	mov	r4, r7
 8001240:	461d      	mov	r5, r3
 8001242:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001244:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001246:	682b      	ldr	r3, [r5, #0]
 8001248:	6023      	str	r3, [r4, #0]
			.gain = 0.5f,
			.accelerationRejection = 10.0f,
			.magneticRejection = 20.0f,
			.rejectionTimeout = 5 * SAMPLE_RATE, /* 5 seconds */
	};
	FusionAhrsSetSettings(&ahrs, &settings);
 800124a:	463b      	mov	r3, r7
 800124c:	4619      	mov	r1, r3
 800124e:	480e      	ldr	r0, [pc, #56]	; (8001288 <FusionInit+0x6c>)
 8001250:	f000 fe6a 	bl	8001f28 <FusionAhrsSetSettings>
	Flash_Read_CalTable(GYRO_OFFSET_ADDR, &values);
 8001254:	f107 0314 	add.w	r3, r7, #20
 8001258:	4619      	mov	r1, r3
 800125a:	480d      	ldr	r0, [pc, #52]	; (8001290 <FusionInit+0x74>)
 800125c:	f002 fa9b 	bl	8003796 <Flash_Read_CalTable>
	setGyroOffset(values);
 8001260:	edd7 6a05 	vldr	s13, [r7, #20]
 8001264:	ed97 7a06 	vldr	s14, [r7, #24]
 8001268:	edd7 7a07 	vldr	s15, [r7, #28]
 800126c:	eeb0 0a66 	vmov.f32	s0, s13
 8001270:	eef0 0a47 	vmov.f32	s1, s14
 8001274:	eeb0 1a67 	vmov.f32	s2, s15
 8001278:	f7ff ffb0 	bl	80011dc <setGyroOffset>
}
 800127c:	bf00      	nop
 800127e:	3720      	adds	r7, #32
 8001280:	46bd      	mov	sp, r7
 8001282:	bdb0      	pop	{r4, r5, r7, pc}
 8001284:	200002c8 	.word	0x200002c8
 8001288:	20000260 	.word	0x20000260
 800128c:	08014670 	.word	0x08014670
 8001290:	080fd000 	.word	0x080fd000
 8001294:	00000000 	.word	0x00000000

08001298 <FusionCalcAngle>:

/* Calculate angle based only on Accelerometer and gyroscope.*/
void FusionCalcAngle(mems_data_t *memsData, FusionEuler *output_angles){
 8001298:	b580      	push	{r7, lr}
 800129a:	b08e      	sub	sp, #56	; 0x38
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
 80012a0:	6039      	str	r1, [r7, #0]
	FusionVector gyroscope = {memsData->gyro.gyro_x, memsData->gyro.gyro_y, memsData->gyro.gyro_z};
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	61bb      	str	r3, [r7, #24]
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	61fb      	str	r3, [r7, #28]
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	689b      	ldr	r3, [r3, #8]
 80012b2:	623b      	str	r3, [r7, #32]
	const FusionVector accelerometer = {memsData->acc.acc_x, memsData->acc.acc_y, memsData->acc.acc_z};
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	68db      	ldr	r3, [r3, #12]
 80012b8:	60fb      	str	r3, [r7, #12]
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	691b      	ldr	r3, [r3, #16]
 80012be:	613b      	str	r3, [r7, #16]
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	695b      	ldr	r3, [r3, #20]
 80012c4:	617b      	str	r3, [r7, #20]
	gyroscope = FusionVectorSubtract(gyroscope, gyroscopeOffset);
 80012c6:	4b7e      	ldr	r3, [pc, #504]	; (80014c0 <FusionCalcAngle+0x228>)
 80012c8:	ed93 5a00 	vldr	s10, [r3]
 80012cc:	edd3 5a01 	vldr	s11, [r3, #4]
 80012d0:	ed93 6a02 	vldr	s12, [r3, #8]
 80012d4:	edd7 6a06 	vldr	s13, [r7, #24]
 80012d8:	ed97 7a07 	vldr	s14, [r7, #28]
 80012dc:	edd7 7a08 	vldr	s15, [r7, #32]
 80012e0:	eef0 1a45 	vmov.f32	s3, s10
 80012e4:	eeb0 2a65 	vmov.f32	s4, s11
 80012e8:	eef0 2a46 	vmov.f32	s5, s12
 80012ec:	eeb0 0a66 	vmov.f32	s0, s13
 80012f0:	eef0 0a47 	vmov.f32	s1, s14
 80012f4:	eeb0 1a67 	vmov.f32	s2, s15
 80012f8:	f7ff fe7c 	bl	8000ff4 <FusionVectorSubtract>
 80012fc:	eef0 6a40 	vmov.f32	s13, s0
 8001300:	eeb0 7a60 	vmov.f32	s14, s1
 8001304:	eef0 7a41 	vmov.f32	s15, s2
 8001308:	edc7 6a06 	vstr	s13, [r7, #24]
 800130c:	ed87 7a07 	vstr	s14, [r7, #28]
 8001310:	edc7 7a08 	vstr	s15, [r7, #32]
#ifndef GYRO_TS
	float delta = (float)(osKernelGetTickCount() - prv_tick) / 1000.0f;
	prv_tick = osKernelGetTickCount();
#else
	float delta = (float) ( memsData->timestamp - previousTimestamp) * (float) GYRO_TIMESTAMP_LSB_USEC / (float) 1000000;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001318:	461a      	mov	r2, r3
 800131a:	4b6a      	ldr	r3, [pc, #424]	; (80014c4 <FusionCalcAngle+0x22c>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	1ad3      	subs	r3, r2, r3
 8001320:	ee07 3a90 	vmov	s15, r3
 8001324:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001328:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 800132c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001330:	eddf 6a65 	vldr	s13, [pc, #404]	; 80014c8 <FusionCalcAngle+0x230>
 8001334:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001338:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	previousTimestamp = memsData->timestamp;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001340:	461a      	mov	r2, r3
 8001342:	4b60      	ldr	r3, [pc, #384]	; (80014c4 <FusionCalcAngle+0x22c>)
 8001344:	601a      	str	r2, [r3, #0]
#endif
	delta += 0.002; //Add a const offset.
 8001346:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001348:	f7ff f916 	bl	8000578 <__aeabi_f2d>
 800134c:	a356      	add	r3, pc, #344	; (adr r3, 80014a8 <FusionCalcAngle+0x210>)
 800134e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001352:	f7fe ffb3 	bl	80002bc <__adddf3>
 8001356:	4602      	mov	r2, r0
 8001358:	460b      	mov	r3, r1
 800135a:	4610      	mov	r0, r2
 800135c:	4619      	mov	r1, r3
 800135e:	f7ff fc3b 	bl	8000bd8 <__aeabi_d2f>
 8001362:	4603      	mov	r3, r0
 8001364:	637b      	str	r3, [r7, #52]	; 0x34
	if ((delta >= 0.010) && (delta <= 0.016)){
 8001366:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001368:	f7ff f906 	bl	8000578 <__aeabi_f2d>
 800136c:	a350      	add	r3, pc, #320	; (adr r3, 80014b0 <FusionCalcAngle+0x218>)
 800136e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001372:	f7ff fbdf 	bl	8000b34 <__aeabi_dcmpge>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d027      	beq.n	80013cc <FusionCalcAngle+0x134>
 800137c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800137e:	f7ff f8fb 	bl	8000578 <__aeabi_f2d>
 8001382:	a34d      	add	r3, pc, #308	; (adr r3, 80014b8 <FusionCalcAngle+0x220>)
 8001384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001388:	f7ff fbca 	bl	8000b20 <__aeabi_dcmple>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d01c      	beq.n	80013cc <FusionCalcAngle+0x134>
	FusionAhrsUpdateNoMagnetometer(&ahrs, gyroscope, accelerometer, delta);
 8001392:	ed97 5a03 	vldr	s10, [r7, #12]
 8001396:	edd7 5a04 	vldr	s11, [r7, #16]
 800139a:	ed97 6a05 	vldr	s12, [r7, #20]
 800139e:	edd7 6a06 	vldr	s13, [r7, #24]
 80013a2:	ed97 7a07 	vldr	s14, [r7, #28]
 80013a6:	edd7 7a08 	vldr	s15, [r7, #32]
 80013aa:	ed97 3a0d 	vldr	s6, [r7, #52]	; 0x34
 80013ae:	eef0 1a45 	vmov.f32	s3, s10
 80013b2:	eeb0 2a65 	vmov.f32	s4, s11
 80013b6:	eef0 2a46 	vmov.f32	s5, s12
 80013ba:	eeb0 0a66 	vmov.f32	s0, s13
 80013be:	eef0 0a47 	vmov.f32	s1, s14
 80013c2:	eeb0 1a67 	vmov.f32	s2, s15
 80013c6:	4841      	ldr	r0, [pc, #260]	; (80014cc <FusionCalcAngle+0x234>)
 80013c8:	f001 fb64 	bl	8002a94 <FusionAhrsUpdateNoMagnetometer>

//	uint8_t text[20] = {0};
//	sprintf(text, "%f\r\n,", delta);
//	uart_write_debug(text, 20);

	*output_angles = FusionQuaternionToEuler(FusionAhrsGetQuaternion(&ahrs));
 80013cc:	483f      	ldr	r0, [pc, #252]	; (80014cc <FusionCalcAngle+0x234>)
 80013ce:	f001 fbc3 	bl	8002b58 <FusionAhrsGetQuaternion>
 80013d2:	eeb0 6a40 	vmov.f32	s12, s0
 80013d6:	eef0 6a60 	vmov.f32	s13, s1
 80013da:	eeb0 7a41 	vmov.f32	s14, s2
 80013de:	eef0 7a61 	vmov.f32	s15, s3
 80013e2:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 80013e6:	edc7 6a0a 	vstr	s13, [r7, #40]	; 0x28
 80013ea:	ed87 7a0b 	vstr	s14, [r7, #44]	; 0x2c
 80013ee:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 80013f2:	ed97 6a09 	vldr	s12, [r7, #36]	; 0x24
 80013f6:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 80013fa:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80013fe:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001402:	eeb0 0a46 	vmov.f32	s0, s12
 8001406:	eef0 0a66 	vmov.f32	s1, s13
 800140a:	eeb0 1a47 	vmov.f32	s2, s14
 800140e:	eef0 1a67 	vmov.f32	s3, s15
 8001412:	f7ff fe3d 	bl	8001090 <FusionQuaternionToEuler>
 8001416:	eef0 6a40 	vmov.f32	s13, s0
 800141a:	eeb0 7a60 	vmov.f32	s14, s1
 800141e:	eef0 7a41 	vmov.f32	s15, s2
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	edc3 6a00 	vstr	s13, [r3]
 8001428:	ed83 7a01 	vstr	s14, [r3, #4]
 800142c:	edc3 7a02 	vstr	s15, [r3, #8]
	if (output_angles->angle.yaw < 0){
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	edd3 7a02 	vldr	s15, [r3, #8]
 8001436:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800143a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800143e:	d509      	bpl.n	8001454 <FusionCalcAngle+0x1bc>
		output_angles->angle.yaw += 360;
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	edd3 7a02 	vldr	s15, [r3, #8]
 8001446:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80014d0 <FusionCalcAngle+0x238>
 800144a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	edc3 7a02 	vstr	s15, [r3, #8]
	}
	if (output_angles->angle.roll < 0){
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	edd3 7a00 	vldr	s15, [r3]
 800145a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800145e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001462:	d509      	bpl.n	8001478 <FusionCalcAngle+0x1e0>
		output_angles->angle.roll += 360;
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	edd3 7a00 	vldr	s15, [r3]
 800146a:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80014d0 <FusionCalcAngle+0x238>
 800146e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	edc3 7a00 	vstr	s15, [r3]
	}
	if (output_angles->angle.pitch < 0){
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	edd3 7a01 	vldr	s15, [r3, #4]
 800147e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001482:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001486:	d400      	bmi.n	800148a <FusionCalcAngle+0x1f2>
		output_angles->angle.pitch += 360;
	}
	//	const FusionVect = FusionQuaternionToEuler(FusionAhrsGetQuaternion(&ahrs));
}
 8001488:	e009      	b.n	800149e <FusionCalcAngle+0x206>
		output_angles->angle.pitch += 360;
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001490:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80014d0 <FusionCalcAngle+0x238>
 8001494:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	edc3 7a01 	vstr	s15, [r3, #4]
}
 800149e:	bf00      	nop
 80014a0:	3738      	adds	r7, #56	; 0x38
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	d2f1a9fc 	.word	0xd2f1a9fc
 80014ac:	3f60624d 	.word	0x3f60624d
 80014b0:	47ae147b 	.word	0x47ae147b
 80014b4:	3f847ae1 	.word	0x3f847ae1
 80014b8:	d2f1a9fc 	.word	0xd2f1a9fc
 80014bc:	3f90624d 	.word	0x3f90624d
 80014c0:	20000250 	.word	0x20000250
 80014c4:	2000025c 	.word	0x2000025c
 80014c8:	49742400 	.word	0x49742400
 80014cc:	20000260 	.word	0x20000260
 80014d0:	43b40000 	.word	0x43b40000

080014d4 <FusionDegreesToRadians>:
static inline float FusionDegreesToRadians(const float degrees) {
 80014d4:	b480      	push	{r7}
 80014d6:	b083      	sub	sp, #12
 80014d8:	af00      	add	r7, sp, #0
 80014da:	ed87 0a01 	vstr	s0, [r7, #4]
    return degrees * ((float) M_PI / 180.0f);
 80014de:	edd7 7a01 	vldr	s15, [r7, #4]
 80014e2:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80014f8 <FusionDegreesToRadians+0x24>
 80014e6:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80014ea:	eeb0 0a67 	vmov.f32	s0, s15
 80014ee:	370c      	adds	r7, #12
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr
 80014f8:	3c8efa35 	.word	0x3c8efa35

080014fc <FusionFastInverseSqrt>:
static inline float FusionFastInverseSqrt(const float x) {
 80014fc:	b480      	push	{r7}
 80014fe:	b085      	sub	sp, #20
 8001500:	af00      	add	r7, sp, #0
 8001502:	ed87 0a01 	vstr	s0, [r7, #4]
    Union32 union32 = {.f = x};
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	60fb      	str	r3, [r7, #12]
    union32.i = 0x5F1F1412 - (union32.i >> 1);
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	105a      	asrs	r2, r3, #1
 800150e:	4b10      	ldr	r3, [pc, #64]	; (8001550 <FusionFastInverseSqrt+0x54>)
 8001510:	1a9b      	subs	r3, r3, r2
 8001512:	60fb      	str	r3, [r7, #12]
    return union32.f * (1.69000231f - 0.714158168f * x * union32.f * union32.f);
 8001514:	ed97 7a03 	vldr	s14, [r7, #12]
 8001518:	edd7 7a01 	vldr	s15, [r7, #4]
 800151c:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8001554 <FusionFastInverseSqrt+0x58>
 8001520:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001524:	edd7 7a03 	vldr	s15, [r7, #12]
 8001528:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800152c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001530:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001534:	eddf 6a08 	vldr	s13, [pc, #32]	; 8001558 <FusionFastInverseSqrt+0x5c>
 8001538:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800153c:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8001540:	eeb0 0a67 	vmov.f32	s0, s15
 8001544:	3714      	adds	r7, #20
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr
 800154e:	bf00      	nop
 8001550:	5f1f1412 	.word	0x5f1f1412
 8001554:	3f36d312 	.word	0x3f36d312
 8001558:	3fd851ff 	.word	0x3fd851ff

0800155c <FusionVectorIsZero>:
static inline bool FusionVectorIsZero(const FusionVector vector) {
 800155c:	b480      	push	{r7}
 800155e:	b085      	sub	sp, #20
 8001560:	af00      	add	r7, sp, #0
 8001562:	eef0 6a40 	vmov.f32	s13, s0
 8001566:	eeb0 7a60 	vmov.f32	s14, s1
 800156a:	eef0 7a41 	vmov.f32	s15, s2
 800156e:	edc7 6a01 	vstr	s13, [r7, #4]
 8001572:	ed87 7a02 	vstr	s14, [r7, #8]
 8001576:	edc7 7a03 	vstr	s15, [r7, #12]
    return (vector.axis.x == 0.0f) && (vector.axis.y == 0.0f) && (vector.axis.z == 0.0f);
 800157a:	edd7 7a01 	vldr	s15, [r7, #4]
 800157e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001582:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001586:	d10f      	bne.n	80015a8 <FusionVectorIsZero+0x4c>
 8001588:	edd7 7a02 	vldr	s15, [r7, #8]
 800158c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001590:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001594:	d108      	bne.n	80015a8 <FusionVectorIsZero+0x4c>
 8001596:	edd7 7a03 	vldr	s15, [r7, #12]
 800159a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800159e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015a2:	d101      	bne.n	80015a8 <FusionVectorIsZero+0x4c>
 80015a4:	2301      	movs	r3, #1
 80015a6:	e000      	b.n	80015aa <FusionVectorIsZero+0x4e>
 80015a8:	2300      	movs	r3, #0
 80015aa:	f003 0301 	and.w	r3, r3, #1
 80015ae:	b2db      	uxtb	r3, r3
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	3714      	adds	r7, #20
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr

080015bc <FusionVectorAdd>:
static inline FusionVector FusionVectorAdd(const FusionVector vectorA, const FusionVector vectorB) {
 80015bc:	b480      	push	{r7}
 80015be:	b091      	sub	sp, #68	; 0x44
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	eeb0 5a40 	vmov.f32	s10, s0
 80015c6:	eef0 5a60 	vmov.f32	s11, s1
 80015ca:	eeb0 6a41 	vmov.f32	s12, s2
 80015ce:	eef0 6a61 	vmov.f32	s13, s3
 80015d2:	eeb0 7a42 	vmov.f32	s14, s4
 80015d6:	eef0 7a62 	vmov.f32	s15, s5
 80015da:	ed87 5a07 	vstr	s10, [r7, #28]
 80015de:	edc7 5a08 	vstr	s11, [r7, #32]
 80015e2:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 80015e6:	edc7 6a04 	vstr	s13, [r7, #16]
 80015ea:	ed87 7a05 	vstr	s14, [r7, #20]
 80015ee:	edc7 7a06 	vstr	s15, [r7, #24]
            .x = vectorA.axis.x + vectorB.axis.x,
 80015f2:	ed97 7a07 	vldr	s14, [r7, #28]
 80015f6:	edd7 7a04 	vldr	s15, [r7, #16]
 80015fa:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80015fe:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = vectorA.axis.y + vectorB.axis.y,
 8001602:	ed97 7a08 	vldr	s14, [r7, #32]
 8001606:	edd7 7a05 	vldr	s15, [r7, #20]
 800160a:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800160e:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = vectorA.axis.z + vectorB.axis.z,
 8001612:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001616:	edd7 7a06 	vldr	s15, [r7, #24]
 800161a:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800161e:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    return result;
 8001622:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001626:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800162a:	ca07      	ldmia	r2, {r0, r1, r2}
 800162c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001630:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001632:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001634:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001636:	ee06 1a90 	vmov	s13, r1
 800163a:	ee07 2a10 	vmov	s14, r2
 800163e:	ee07 3a90 	vmov	s15, r3
}
 8001642:	eeb0 0a66 	vmov.f32	s0, s13
 8001646:	eef0 0a47 	vmov.f32	s1, s14
 800164a:	eeb0 1a67 	vmov.f32	s2, s15
 800164e:	3744      	adds	r7, #68	; 0x44
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr

08001658 <FusionVectorSum>:
static inline float FusionVectorSum(const FusionVector vector) {
 8001658:	b480      	push	{r7}
 800165a:	b085      	sub	sp, #20
 800165c:	af00      	add	r7, sp, #0
 800165e:	eef0 6a40 	vmov.f32	s13, s0
 8001662:	eeb0 7a60 	vmov.f32	s14, s1
 8001666:	eef0 7a41 	vmov.f32	s15, s2
 800166a:	edc7 6a01 	vstr	s13, [r7, #4]
 800166e:	ed87 7a02 	vstr	s14, [r7, #8]
 8001672:	edc7 7a03 	vstr	s15, [r7, #12]
    return vector.axis.x + vector.axis.y + vector.axis.z;
 8001676:	ed97 7a01 	vldr	s14, [r7, #4]
 800167a:	edd7 7a02 	vldr	s15, [r7, #8]
 800167e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001682:	edd7 7a03 	vldr	s15, [r7, #12]
 8001686:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 800168a:	eeb0 0a67 	vmov.f32	s0, s15
 800168e:	3714      	adds	r7, #20
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr

08001698 <FusionVectorMultiplyScalar>:
static inline FusionVector FusionVectorMultiplyScalar(const FusionVector vector, const float scalar) {
 8001698:	b480      	push	{r7}
 800169a:	b08f      	sub	sp, #60	; 0x3c
 800169c:	af00      	add	r7, sp, #0
 800169e:	eef0 6a40 	vmov.f32	s13, s0
 80016a2:	eeb0 7a60 	vmov.f32	s14, s1
 80016a6:	eef0 7a41 	vmov.f32	s15, s2
 80016aa:	edc7 1a04 	vstr	s3, [r7, #16]
 80016ae:	edc7 6a05 	vstr	s13, [r7, #20]
 80016b2:	ed87 7a06 	vstr	s14, [r7, #24]
 80016b6:	edc7 7a07 	vstr	s15, [r7, #28]
            .x = vector.axis.x * scalar,
 80016ba:	ed97 7a05 	vldr	s14, [r7, #20]
 80016be:	edd7 7a04 	vldr	s15, [r7, #16]
 80016c2:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80016c6:	edc7 7a08 	vstr	s15, [r7, #32]
            .y = vector.axis.y * scalar,
 80016ca:	ed97 7a06 	vldr	s14, [r7, #24]
 80016ce:	edd7 7a04 	vldr	s15, [r7, #16]
 80016d2:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80016d6:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            .z = vector.axis.z * scalar,
 80016da:	ed97 7a07 	vldr	s14, [r7, #28]
 80016de:	edd7 7a04 	vldr	s15, [r7, #16]
 80016e2:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80016e6:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    return result;
 80016ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016ee:	f107 0220 	add.w	r2, r7, #32
 80016f2:	ca07      	ldmia	r2, {r0, r1, r2}
 80016f4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80016f8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80016fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80016fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016fe:	ee06 1a90 	vmov	s13, r1
 8001702:	ee07 2a10 	vmov	s14, r2
 8001706:	ee07 3a90 	vmov	s15, r3
}
 800170a:	eeb0 0a66 	vmov.f32	s0, s13
 800170e:	eef0 0a47 	vmov.f32	s1, s14
 8001712:	eeb0 1a67 	vmov.f32	s2, s15
 8001716:	373c      	adds	r7, #60	; 0x3c
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr

08001720 <FusionVectorHadamardProduct>:
static inline FusionVector FusionVectorHadamardProduct(const FusionVector vectorA, const FusionVector vectorB) {
 8001720:	b480      	push	{r7}
 8001722:	b091      	sub	sp, #68	; 0x44
 8001724:	af00      	add	r7, sp, #0
 8001726:	eeb0 5a40 	vmov.f32	s10, s0
 800172a:	eef0 5a60 	vmov.f32	s11, s1
 800172e:	eeb0 6a41 	vmov.f32	s12, s2
 8001732:	eef0 6a61 	vmov.f32	s13, s3
 8001736:	eeb0 7a42 	vmov.f32	s14, s4
 800173a:	eef0 7a62 	vmov.f32	s15, s5
 800173e:	ed87 5a07 	vstr	s10, [r7, #28]
 8001742:	edc7 5a08 	vstr	s11, [r7, #32]
 8001746:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 800174a:	edc7 6a04 	vstr	s13, [r7, #16]
 800174e:	ed87 7a05 	vstr	s14, [r7, #20]
 8001752:	edc7 7a06 	vstr	s15, [r7, #24]
            .x = vectorA.axis.x * vectorB.axis.x,
 8001756:	ed97 7a07 	vldr	s14, [r7, #28]
 800175a:	edd7 7a04 	vldr	s15, [r7, #16]
 800175e:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8001762:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = vectorA.axis.y * vectorB.axis.y,
 8001766:	ed97 7a08 	vldr	s14, [r7, #32]
 800176a:	edd7 7a05 	vldr	s15, [r7, #20]
 800176e:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8001772:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = vectorA.axis.z * vectorB.axis.z,
 8001776:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800177a:	edd7 7a06 	vldr	s15, [r7, #24]
 800177e:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8001782:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    return result;
 8001786:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800178a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800178e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001790:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001794:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001796:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001798:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800179a:	ee06 1a90 	vmov	s13, r1
 800179e:	ee07 2a10 	vmov	s14, r2
 80017a2:	ee07 3a90 	vmov	s15, r3
}
 80017a6:	eeb0 0a66 	vmov.f32	s0, s13
 80017aa:	eef0 0a47 	vmov.f32	s1, s14
 80017ae:	eeb0 1a67 	vmov.f32	s2, s15
 80017b2:	3744      	adds	r7, #68	; 0x44
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr

080017bc <FusionVectorCrossProduct>:
static inline FusionVector FusionVectorCrossProduct(const FusionVector vectorA, const FusionVector vectorB) {
 80017bc:	b480      	push	{r7}
 80017be:	b091      	sub	sp, #68	; 0x44
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	eeb0 5a40 	vmov.f32	s10, s0
 80017c6:	eef0 5a60 	vmov.f32	s11, s1
 80017ca:	eeb0 6a41 	vmov.f32	s12, s2
 80017ce:	eef0 6a61 	vmov.f32	s13, s3
 80017d2:	eeb0 7a42 	vmov.f32	s14, s4
 80017d6:	eef0 7a62 	vmov.f32	s15, s5
 80017da:	ed87 5a07 	vstr	s10, [r7, #28]
 80017de:	edc7 5a08 	vstr	s11, [r7, #32]
 80017e2:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 80017e6:	edc7 6a04 	vstr	s13, [r7, #16]
 80017ea:	ed87 7a05 	vstr	s14, [r7, #20]
 80017ee:	edc7 7a06 	vstr	s15, [r7, #24]
            .x = A.y * B.z - A.z * B.y,
 80017f2:	ed97 7a08 	vldr	s14, [r7, #32]
 80017f6:	edd7 7a06 	vldr	s15, [r7, #24]
 80017fa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017fe:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8001802:	edd7 7a05 	vldr	s15, [r7, #20]
 8001806:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800180a:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800180e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = A.z * B.x - A.x * B.z,
 8001812:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001816:	edd7 7a04 	vldr	s15, [r7, #16]
 800181a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800181e:	edd7 6a07 	vldr	s13, [r7, #28]
 8001822:	edd7 7a06 	vldr	s15, [r7, #24]
 8001826:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800182a:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800182e:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = A.x * B.y - A.y * B.x,
 8001832:	ed97 7a07 	vldr	s14, [r7, #28]
 8001836:	edd7 7a05 	vldr	s15, [r7, #20]
 800183a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800183e:	edd7 6a08 	vldr	s13, [r7, #32]
 8001842:	edd7 7a04 	vldr	s15, [r7, #16]
 8001846:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800184a:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800184e:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    return result;
 8001852:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001856:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800185a:	ca07      	ldmia	r2, {r0, r1, r2}
 800185c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001860:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001862:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001864:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001866:	ee06 1a90 	vmov	s13, r1
 800186a:	ee07 2a10 	vmov	s14, r2
 800186e:	ee07 3a90 	vmov	s15, r3
}
 8001872:	eeb0 0a66 	vmov.f32	s0, s13
 8001876:	eef0 0a47 	vmov.f32	s1, s14
 800187a:	eeb0 1a67 	vmov.f32	s2, s15
 800187e:	3744      	adds	r7, #68	; 0x44
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr

08001888 <FusionVectorMagnitudeSquared>:
static inline float FusionVectorMagnitudeSquared(const FusionVector vector) {
 8001888:	b580      	push	{r7, lr}
 800188a:	b088      	sub	sp, #32
 800188c:	af00      	add	r7, sp, #0
 800188e:	eef0 6a40 	vmov.f32	s13, s0
 8001892:	eeb0 7a60 	vmov.f32	s14, s1
 8001896:	eef0 7a41 	vmov.f32	s15, s2
 800189a:	edc7 6a01 	vstr	s13, [r7, #4]
 800189e:	ed87 7a02 	vstr	s14, [r7, #8]
 80018a2:	edc7 7a03 	vstr	s15, [r7, #12]
    return FusionVectorSum(FusionVectorHadamardProduct(vector, vector));
 80018a6:	ed97 5a01 	vldr	s10, [r7, #4]
 80018aa:	edd7 5a02 	vldr	s11, [r7, #8]
 80018ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80018b2:	edd7 6a01 	vldr	s13, [r7, #4]
 80018b6:	ed97 7a02 	vldr	s14, [r7, #8]
 80018ba:	edd7 7a03 	vldr	s15, [r7, #12]
 80018be:	eef0 1a45 	vmov.f32	s3, s10
 80018c2:	eeb0 2a65 	vmov.f32	s4, s11
 80018c6:	eef0 2a46 	vmov.f32	s5, s12
 80018ca:	eeb0 0a66 	vmov.f32	s0, s13
 80018ce:	eef0 0a47 	vmov.f32	s1, s14
 80018d2:	eeb0 1a67 	vmov.f32	s2, s15
 80018d6:	f7ff ff23 	bl	8001720 <FusionVectorHadamardProduct>
 80018da:	eef0 6a40 	vmov.f32	s13, s0
 80018de:	eeb0 7a60 	vmov.f32	s14, s1
 80018e2:	eef0 7a41 	vmov.f32	s15, s2
 80018e6:	edc7 6a05 	vstr	s13, [r7, #20]
 80018ea:	ed87 7a06 	vstr	s14, [r7, #24]
 80018ee:	edc7 7a07 	vstr	s15, [r7, #28]
 80018f2:	edd7 6a05 	vldr	s13, [r7, #20]
 80018f6:	ed97 7a06 	vldr	s14, [r7, #24]
 80018fa:	edd7 7a07 	vldr	s15, [r7, #28]
 80018fe:	eeb0 0a66 	vmov.f32	s0, s13
 8001902:	eef0 0a47 	vmov.f32	s1, s14
 8001906:	eeb0 1a67 	vmov.f32	s2, s15
 800190a:	f7ff fea5 	bl	8001658 <FusionVectorSum>
 800190e:	eef0 7a40 	vmov.f32	s15, s0
}
 8001912:	eeb0 0a67 	vmov.f32	s0, s15
 8001916:	3720      	adds	r7, #32
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}

0800191c <FusionVectorNormalise>:
static inline FusionVector FusionVectorNormalise(const FusionVector vector) {
 800191c:	b580      	push	{r7, lr}
 800191e:	b08c      	sub	sp, #48	; 0x30
 8001920:	af00      	add	r7, sp, #0
 8001922:	eef0 6a40 	vmov.f32	s13, s0
 8001926:	eeb0 7a60 	vmov.f32	s14, s1
 800192a:	eef0 7a41 	vmov.f32	s15, s2
 800192e:	edc7 6a05 	vstr	s13, [r7, #20]
 8001932:	ed87 7a06 	vstr	s14, [r7, #24]
 8001936:	edc7 7a07 	vstr	s15, [r7, #28]
    const float magnitudeReciprocal = FusionFastInverseSqrt(FusionVectorMagnitudeSquared(vector));
 800193a:	edd7 6a05 	vldr	s13, [r7, #20]
 800193e:	ed97 7a06 	vldr	s14, [r7, #24]
 8001942:	edd7 7a07 	vldr	s15, [r7, #28]
 8001946:	eeb0 0a66 	vmov.f32	s0, s13
 800194a:	eef0 0a47 	vmov.f32	s1, s14
 800194e:	eeb0 1a67 	vmov.f32	s2, s15
 8001952:	f7ff ff99 	bl	8001888 <FusionVectorMagnitudeSquared>
 8001956:	eef0 7a40 	vmov.f32	s15, s0
 800195a:	eeb0 0a67 	vmov.f32	s0, s15
 800195e:	f7ff fdcd 	bl	80014fc <FusionFastInverseSqrt>
 8001962:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
    return FusionVectorMultiplyScalar(vector, magnitudeReciprocal);
 8001966:	edd7 6a05 	vldr	s13, [r7, #20]
 800196a:	ed97 7a06 	vldr	s14, [r7, #24]
 800196e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001972:	edd7 1a0b 	vldr	s3, [r7, #44]	; 0x2c
 8001976:	eeb0 0a66 	vmov.f32	s0, s13
 800197a:	eef0 0a47 	vmov.f32	s1, s14
 800197e:	eeb0 1a67 	vmov.f32	s2, s15
 8001982:	f7ff fe89 	bl	8001698 <FusionVectorMultiplyScalar>
 8001986:	eef0 6a40 	vmov.f32	s13, s0
 800198a:	eeb0 7a60 	vmov.f32	s14, s1
 800198e:	eef0 7a41 	vmov.f32	s15, s2
 8001992:	edc7 6a08 	vstr	s13, [r7, #32]
 8001996:	ed87 7a09 	vstr	s14, [r7, #36]	; 0x24
 800199a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 800199e:	6a39      	ldr	r1, [r7, #32]
 80019a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019a4:	ee06 1a90 	vmov	s13, r1
 80019a8:	ee07 2a10 	vmov	s14, r2
 80019ac:	ee07 3a90 	vmov	s15, r3
}
 80019b0:	eeb0 0a66 	vmov.f32	s0, s13
 80019b4:	eef0 0a47 	vmov.f32	s1, s14
 80019b8:	eeb0 1a67 	vmov.f32	s2, s15
 80019bc:	3730      	adds	r7, #48	; 0x30
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}

080019c2 <FusionQuaternionAdd>:
static inline FusionQuaternion FusionQuaternionAdd(const FusionQuaternion quaternionA, const FusionQuaternion quaternionB) {
 80019c2:	b490      	push	{r4, r7}
 80019c4:	b094      	sub	sp, #80	; 0x50
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	eeb0 4a40 	vmov.f32	s8, s0
 80019cc:	eef0 4a60 	vmov.f32	s9, s1
 80019d0:	eeb0 5a41 	vmov.f32	s10, s2
 80019d4:	eef0 5a61 	vmov.f32	s11, s3
 80019d8:	eeb0 6a42 	vmov.f32	s12, s4
 80019dc:	eef0 6a62 	vmov.f32	s13, s5
 80019e0:	eeb0 7a43 	vmov.f32	s14, s6
 80019e4:	eef0 7a63 	vmov.f32	s15, s7
 80019e8:	ed87 4a08 	vstr	s8, [r7, #32]
 80019ec:	edc7 4a09 	vstr	s9, [r7, #36]	; 0x24
 80019f0:	ed87 5a0a 	vstr	s10, [r7, #40]	; 0x28
 80019f4:	edc7 5a0b 	vstr	s11, [r7, #44]	; 0x2c
 80019f8:	ed87 6a04 	vstr	s12, [r7, #16]
 80019fc:	edc7 6a05 	vstr	s13, [r7, #20]
 8001a00:	ed87 7a06 	vstr	s14, [r7, #24]
 8001a04:	edc7 7a07 	vstr	s15, [r7, #28]
            .w = quaternionA.element.w + quaternionB.element.w,
 8001a08:	ed97 7a08 	vldr	s14, [r7, #32]
 8001a0c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a10:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8001a14:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
            .x = quaternionA.element.x + quaternionB.element.x,
 8001a18:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001a1c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001a20:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8001a24:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
            .y = quaternionA.element.y + quaternionB.element.y,
 8001a28:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001a2c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001a30:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8001a34:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
            .z = quaternionA.element.z + quaternionB.element.z,
 8001a38:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8001a3c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001a40:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8001a44:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    return result;
 8001a48:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8001a4c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a50:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a52:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001a56:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001a58:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001a5a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001a5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a5e:	ee06 0a10 	vmov	s12, r0
 8001a62:	ee06 1a90 	vmov	s13, r1
 8001a66:	ee07 2a10 	vmov	s14, r2
 8001a6a:	ee07 3a90 	vmov	s15, r3
}
 8001a6e:	eeb0 0a46 	vmov.f32	s0, s12
 8001a72:	eef0 0a66 	vmov.f32	s1, s13
 8001a76:	eeb0 1a47 	vmov.f32	s2, s14
 8001a7a:	eef0 1a67 	vmov.f32	s3, s15
 8001a7e:	3750      	adds	r7, #80	; 0x50
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bc90      	pop	{r4, r7}
 8001a84:	4770      	bx	lr

08001a86 <FusionQuaternionMultiply>:
static inline FusionQuaternion FusionQuaternionMultiply(const FusionQuaternion quaternionA, const FusionQuaternion quaternionB) {
 8001a86:	b490      	push	{r4, r7}
 8001a88:	b094      	sub	sp, #80	; 0x50
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	eeb0 4a40 	vmov.f32	s8, s0
 8001a90:	eef0 4a60 	vmov.f32	s9, s1
 8001a94:	eeb0 5a41 	vmov.f32	s10, s2
 8001a98:	eef0 5a61 	vmov.f32	s11, s3
 8001a9c:	eeb0 6a42 	vmov.f32	s12, s4
 8001aa0:	eef0 6a62 	vmov.f32	s13, s5
 8001aa4:	eeb0 7a43 	vmov.f32	s14, s6
 8001aa8:	eef0 7a63 	vmov.f32	s15, s7
 8001aac:	ed87 4a08 	vstr	s8, [r7, #32]
 8001ab0:	edc7 4a09 	vstr	s9, [r7, #36]	; 0x24
 8001ab4:	ed87 5a0a 	vstr	s10, [r7, #40]	; 0x28
 8001ab8:	edc7 5a0b 	vstr	s11, [r7, #44]	; 0x2c
 8001abc:	ed87 6a04 	vstr	s12, [r7, #16]
 8001ac0:	edc7 6a05 	vstr	s13, [r7, #20]
 8001ac4:	ed87 7a06 	vstr	s14, [r7, #24]
 8001ac8:	edc7 7a07 	vstr	s15, [r7, #28]
            .w = A.w * B.w - A.x * B.x - A.y * B.y - A.z * B.z,
 8001acc:	ed97 7a08 	vldr	s14, [r7, #32]
 8001ad0:	edd7 7a04 	vldr	s15, [r7, #16]
 8001ad4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ad8:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8001adc:	edd7 7a05 	vldr	s15, [r7, #20]
 8001ae0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ae4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001ae8:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8001aec:	edd7 7a06 	vldr	s15, [r7, #24]
 8001af0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001af4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001af8:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8001afc:	edd7 7a07 	vldr	s15, [r7, #28]
 8001b00:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b04:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8001b08:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
            .x = A.w * B.x + A.x * B.w + A.y * B.z - A.z * B.y,
 8001b0c:	ed97 7a08 	vldr	s14, [r7, #32]
 8001b10:	edd7 7a05 	vldr	s15, [r7, #20]
 8001b14:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b18:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8001b1c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001b20:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b24:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b28:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8001b2c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001b30:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b34:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b38:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8001b3c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001b40:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b44:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8001b48:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
            .y = A.w * B.y - A.x * B.z + A.y * B.w + A.z * B.x,
 8001b4c:	ed97 7a08 	vldr	s14, [r7, #32]
 8001b50:	edd7 7a06 	vldr	s15, [r7, #24]
 8001b54:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b58:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8001b5c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001b60:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b64:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001b68:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8001b6c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001b70:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b74:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b78:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8001b7c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001b80:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b84:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8001b88:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
            .z = A.w * B.z + A.x * B.y - A.y * B.x + A.z * B.w,
 8001b8c:	ed97 7a08 	vldr	s14, [r7, #32]
 8001b90:	edd7 7a07 	vldr	s15, [r7, #28]
 8001b94:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b98:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8001b9c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001ba0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ba4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ba8:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8001bac:	edd7 7a05 	vldr	s15, [r7, #20]
 8001bb0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bb4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001bb8:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8001bbc:	edd7 7a04 	vldr	s15, [r7, #16]
 8001bc0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bc4:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8001bc8:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    return result;
 8001bcc:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8001bd0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001bd4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001bd6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001bda:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001bdc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001bde:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001be0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001be2:	ee06 0a10 	vmov	s12, r0
 8001be6:	ee06 1a90 	vmov	s13, r1
 8001bea:	ee07 2a10 	vmov	s14, r2
 8001bee:	ee07 3a90 	vmov	s15, r3
}
 8001bf2:	eeb0 0a46 	vmov.f32	s0, s12
 8001bf6:	eef0 0a66 	vmov.f32	s1, s13
 8001bfa:	eeb0 1a47 	vmov.f32	s2, s14
 8001bfe:	eef0 1a67 	vmov.f32	s3, s15
 8001c02:	3750      	adds	r7, #80	; 0x50
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bc90      	pop	{r4, r7}
 8001c08:	4770      	bx	lr

08001c0a <FusionQuaternionMultiplyVector>:
static inline FusionQuaternion FusionQuaternionMultiplyVector(const FusionQuaternion quaternion, const FusionVector vector) {
 8001c0a:	b490      	push	{r4, r7}
 8001c0c:	b094      	sub	sp, #80	; 0x50
 8001c0e:	af00      	add	r7, sp, #0
 8001c10:	eef0 4a40 	vmov.f32	s9, s0
 8001c14:	eeb0 5a60 	vmov.f32	s10, s1
 8001c18:	eef0 5a41 	vmov.f32	s11, s2
 8001c1c:	eeb0 6a61 	vmov.f32	s12, s3
 8001c20:	eef0 6a42 	vmov.f32	s13, s4
 8001c24:	eeb0 7a62 	vmov.f32	s14, s5
 8001c28:	eef0 7a43 	vmov.f32	s15, s6
 8001c2c:	edc7 4a08 	vstr	s9, [r7, #32]
 8001c30:	ed87 5a09 	vstr	s10, [r7, #36]	; 0x24
 8001c34:	edc7 5a0a 	vstr	s11, [r7, #40]	; 0x28
 8001c38:	ed87 6a0b 	vstr	s12, [r7, #44]	; 0x2c
 8001c3c:	edc7 6a05 	vstr	s13, [r7, #20]
 8001c40:	ed87 7a06 	vstr	s14, [r7, #24]
 8001c44:	edc7 7a07 	vstr	s15, [r7, #28]
            .w = -Q.x * V.x - Q.y * V.y - Q.z * V.z,
 8001c48:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001c4c:	eeb1 7a67 	vneg.f32	s14, s15
 8001c50:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c54:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c58:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8001c5c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001c60:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c64:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001c68:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8001c6c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001c70:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c74:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8001c78:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
            .x = Q.w * V.x + Q.y * V.z - Q.z * V.y,
 8001c7c:	ed97 7a08 	vldr	s14, [r7, #32]
 8001c80:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c84:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c88:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8001c8c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001c90:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c94:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c98:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8001c9c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001ca0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ca4:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8001ca8:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
            .y = Q.w * V.y - Q.x * V.z + Q.z * V.x,
 8001cac:	ed97 7a08 	vldr	s14, [r7, #32]
 8001cb0:	edd7 7a06 	vldr	s15, [r7, #24]
 8001cb4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001cb8:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8001cbc:	edd7 7a07 	vldr	s15, [r7, #28]
 8001cc0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001cc4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001cc8:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8001ccc:	edd7 7a05 	vldr	s15, [r7, #20]
 8001cd0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001cd4:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8001cd8:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
            .z = Q.w * V.z + Q.x * V.y - Q.y * V.x,
 8001cdc:	ed97 7a08 	vldr	s14, [r7, #32]
 8001ce0:	edd7 7a07 	vldr	s15, [r7, #28]
 8001ce4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ce8:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8001cec:	edd7 7a06 	vldr	s15, [r7, #24]
 8001cf0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001cf4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001cf8:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8001cfc:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d00:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d04:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8001d08:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    return result;
 8001d0c:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8001d10:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001d14:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d16:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001d1a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001d1c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001d1e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001d20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d22:	ee06 0a10 	vmov	s12, r0
 8001d26:	ee06 1a90 	vmov	s13, r1
 8001d2a:	ee07 2a10 	vmov	s14, r2
 8001d2e:	ee07 3a90 	vmov	s15, r3
}
 8001d32:	eeb0 0a46 	vmov.f32	s0, s12
 8001d36:	eef0 0a66 	vmov.f32	s1, s13
 8001d3a:	eeb0 1a47 	vmov.f32	s2, s14
 8001d3e:	eef0 1a67 	vmov.f32	s3, s15
 8001d42:	3750      	adds	r7, #80	; 0x50
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bc90      	pop	{r4, r7}
 8001d48:	4770      	bx	lr

08001d4a <FusionQuaternionNormalise>:
static inline FusionQuaternion FusionQuaternionNormalise(const FusionQuaternion quaternion) {
 8001d4a:	b590      	push	{r4, r7, lr}
 8001d4c:	b093      	sub	sp, #76	; 0x4c
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	eeb0 6a40 	vmov.f32	s12, s0
 8001d54:	eef0 6a60 	vmov.f32	s13, s1
 8001d58:	eeb0 7a41 	vmov.f32	s14, s2
 8001d5c:	eef0 7a61 	vmov.f32	s15, s3
 8001d60:	ed87 6a04 	vstr	s12, [r7, #16]
 8001d64:	edc7 6a05 	vstr	s13, [r7, #20]
 8001d68:	ed87 7a06 	vstr	s14, [r7, #24]
 8001d6c:	edc7 7a07 	vstr	s15, [r7, #28]
    const float magnitudeReciprocal = FusionFastInverseSqrt(Q.w * Q.w + Q.x * Q.x + Q.y * Q.y + Q.z * Q.z);
 8001d70:	ed97 7a04 	vldr	s14, [r7, #16]
 8001d74:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d78:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d7c:	edd7 6a05 	vldr	s13, [r7, #20]
 8001d80:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d84:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d88:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d8c:	edd7 6a06 	vldr	s13, [r7, #24]
 8001d90:	edd7 7a06 	vldr	s15, [r7, #24]
 8001d94:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d98:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d9c:	edd7 6a07 	vldr	s13, [r7, #28]
 8001da0:	edd7 7a07 	vldr	s15, [r7, #28]
 8001da4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001da8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dac:	eeb0 0a67 	vmov.f32	s0, s15
 8001db0:	f7ff fba4 	bl	80014fc <FusionFastInverseSqrt>
 8001db4:	ed87 0a11 	vstr	s0, [r7, #68]	; 0x44
            .w = Q.w * magnitudeReciprocal,
 8001db8:	ed97 7a04 	vldr	s14, [r7, #16]
 8001dbc:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001dc0:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8001dc4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            .x = Q.x * magnitudeReciprocal,
 8001dc8:	ed97 7a05 	vldr	s14, [r7, #20]
 8001dcc:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001dd0:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8001dd4:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = Q.y * magnitudeReciprocal,
 8001dd8:	ed97 7a06 	vldr	s14, [r7, #24]
 8001ddc:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001de0:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8001de4:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = Q.z * magnitudeReciprocal,
 8001de8:	ed97 7a07 	vldr	s14, [r7, #28]
 8001dec:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001df0:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8001df4:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    return result;
 8001df8:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8001dfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e00:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e02:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001e06:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001e08:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001e0a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001e0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e0e:	ee06 0a10 	vmov	s12, r0
 8001e12:	ee06 1a90 	vmov	s13, r1
 8001e16:	ee07 2a10 	vmov	s14, r2
 8001e1a:	ee07 3a90 	vmov	s15, r3
}
 8001e1e:	eeb0 0a46 	vmov.f32	s0, s12
 8001e22:	eef0 0a66 	vmov.f32	s1, s13
 8001e26:	eeb0 1a47 	vmov.f32	s2, s14
 8001e2a:	eef0 1a67 	vmov.f32	s3, s15
 8001e2e:	374c      	adds	r7, #76	; 0x4c
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd90      	pop	{r4, r7, pc}

08001e34 <FusionAhrsInitialise>:

/**
 * @brief Initialises the AHRS algorithm structure.
 * @param ahrs AHRS algorithm structure.
 */
void FusionAhrsInitialise(FusionAhrs *const ahrs) {
 8001e34:	b5b0      	push	{r4, r5, r7, lr}
 8001e36:	b088      	sub	sp, #32
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
    const FusionAhrsSettings settings = {
 8001e3c:	4b0a      	ldr	r3, [pc, #40]	; (8001e68 <FusionAhrsInitialise+0x34>)
 8001e3e:	f107 040c 	add.w	r4, r7, #12
 8001e42:	461d      	mov	r5, r3
 8001e44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e48:	682b      	ldr	r3, [r5, #0]
 8001e4a:	6023      	str	r3, [r4, #0]
            .gain = 0.5f,
            .accelerationRejection = 90.0f,
            .magneticRejection = 90.0f,
            .rejectionTimeout = 0,
    };
    FusionAhrsSetSettings(ahrs, &settings);
 8001e4c:	f107 030c 	add.w	r3, r7, #12
 8001e50:	4619      	mov	r1, r3
 8001e52:	6878      	ldr	r0, [r7, #4]
 8001e54:	f000 f868 	bl	8001f28 <FusionAhrsSetSettings>
    FusionAhrsReset(ahrs);
 8001e58:	6878      	ldr	r0, [r7, #4]
 8001e5a:	f000 f807 	bl	8001e6c <FusionAhrsReset>
}
 8001e5e:	bf00      	nop
 8001e60:	3720      	adds	r7, #32
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bdb0      	pop	{r4, r5, r7, pc}
 8001e66:	bf00      	nop
 8001e68:	08014684 	.word	0x08014684

08001e6c <FusionAhrsReset>:
/**
 * @brief Resets the AHRS algorithm.  This is equivalent to reinitialising the
 * algorithm while maintaining the current settings.
 * @param ahrs AHRS algorithm structure.
 */
void FusionAhrsReset(FusionAhrs *const ahrs) {
 8001e6c:	b480      	push	{r7}
 8001e6e:	b091      	sub	sp, #68	; 0x44
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
    ahrs->quaternion = FUSION_IDENTITY_QUATERNION;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001e7a:	615a      	str	r2, [r3, #20]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	f04f 0200 	mov.w	r2, #0
 8001e82:	619a      	str	r2, [r3, #24]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	f04f 0200 	mov.w	r2, #0
 8001e8a:	61da      	str	r2, [r3, #28]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	f04f 0200 	mov.w	r2, #0
 8001e92:	621a      	str	r2, [r3, #32]
    ahrs->accelerometer = FUSION_VECTOR_ZERO;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	f04f 0200 	mov.w	r2, #0
 8001e9a:	625a      	str	r2, [r3, #36]	; 0x24
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	f04f 0200 	mov.w	r2, #0
 8001ea2:	629a      	str	r2, [r3, #40]	; 0x28
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	f04f 0200 	mov.w	r2, #0
 8001eaa:	62da      	str	r2, [r3, #44]	; 0x2c
    ahrs->initialising = true;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2201      	movs	r2, #1
 8001eb0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    ahrs->rampedGain = INITIAL_GAIN;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	4a1b      	ldr	r2, [pc, #108]	; (8001f24 <FusionAhrsReset+0xb8>)
 8001eb8:	635a      	str	r2, [r3, #52]	; 0x34
    ahrs->halfAccelerometerFeedback = FUSION_VECTOR_ZERO;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	f04f 0200 	mov.w	r2, #0
 8001ec0:	63da      	str	r2, [r3, #60]	; 0x3c
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	f04f 0200 	mov.w	r2, #0
 8001ec8:	641a      	str	r2, [r3, #64]	; 0x40
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	f04f 0200 	mov.w	r2, #0
 8001ed0:	645a      	str	r2, [r3, #68]	; 0x44
    ahrs->halfMagnetometerFeedback = FUSION_VECTOR_ZERO;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	f04f 0200 	mov.w	r2, #0
 8001ed8:	649a      	str	r2, [r3, #72]	; 0x48
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	f04f 0200 	mov.w	r2, #0
 8001ee0:	64da      	str	r2, [r3, #76]	; 0x4c
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	f04f 0200 	mov.w	r2, #0
 8001ee8:	651a      	str	r2, [r3, #80]	; 0x50
    ahrs->accelerometerIgnored = false;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2200      	movs	r2, #0
 8001eee:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
    ahrs->accelerationRejectionTimer = 0;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	659a      	str	r2, [r3, #88]	; 0x58
    ahrs->accelerationRejectionTimeout = false;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2200      	movs	r2, #0
 8001efc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
    ahrs->magnetometerIgnored = false;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2200      	movs	r2, #0
 8001f04:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    ahrs->magneticRejectionTimer = 0;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	661a      	str	r2, [r3, #96]	; 0x60
    ahrs->magneticRejectionTimeout = false;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2200      	movs	r2, #0
 8001f12:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
}
 8001f16:	bf00      	nop
 8001f18:	3744      	adds	r7, #68	; 0x44
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr
 8001f22:	bf00      	nop
 8001f24:	41200000 	.word	0x41200000

08001f28 <FusionAhrsSetSettings>:
/**
 * @brief Sets the AHRS algorithm settings.
 * @param ahrs AHRS algorithm structure.
 * @param settings Settings.
 */
void FusionAhrsSetSettings(FusionAhrs *const ahrs, const FusionAhrsSettings *const settings) {
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b082      	sub	sp, #8
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
 8001f30:	6039      	str	r1, [r7, #0]
    ahrs->settings.convention = settings->convention;
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	781a      	ldrb	r2, [r3, #0]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	701a      	strb	r2, [r3, #0]
    ahrs->settings.gain = settings->gain;
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	685a      	ldr	r2, [r3, #4]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	605a      	str	r2, [r3, #4]
    if ((settings->accelerationRejection == 0.0f) || (settings->rejectionTimeout == 0)) {
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	edd3 7a02 	vldr	s15, [r3, #8]
 8001f48:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001f4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f50:	d003      	beq.n	8001f5a <FusionAhrsSetSettings+0x32>
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	691b      	ldr	r3, [r3, #16]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d103      	bne.n	8001f62 <FusionAhrsSetSettings+0x3a>
        ahrs->settings.accelerationRejection = FLT_MAX;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	4a38      	ldr	r2, [pc, #224]	; (8002040 <FusionAhrsSetSettings+0x118>)
 8001f5e:	609a      	str	r2, [r3, #8]
 8001f60:	e01d      	b.n	8001f9e <FusionAhrsSetSettings+0x76>
    } else {
        ahrs->settings.accelerationRejection = powf(0.5f * sinf(FusionDegreesToRadians(settings->accelerationRejection)), 2);
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	edd3 7a02 	vldr	s15, [r3, #8]
 8001f68:	eeb0 0a67 	vmov.f32	s0, s15
 8001f6c:	f7ff fab2 	bl	80014d4 <FusionDegreesToRadians>
 8001f70:	eef0 7a40 	vmov.f32	s15, s0
 8001f74:	eeb0 0a67 	vmov.f32	s0, s15
 8001f78:	f011 f8de 	bl	8013138 <sinf>
 8001f7c:	eef0 7a40 	vmov.f32	s15, s0
 8001f80:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001f84:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f88:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8001f8c:	eeb0 0a67 	vmov.f32	s0, s15
 8001f90:	f011 f82e 	bl	8012ff0 <powf>
 8001f94:	eef0 7a40 	vmov.f32	s15, s0
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	edc3 7a02 	vstr	s15, [r3, #8]
    }
    if ((settings->magneticRejection == 0.0f) || (settings->rejectionTimeout == 0)) {
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	edd3 7a03 	vldr	s15, [r3, #12]
 8001fa4:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001fa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fac:	d003      	beq.n	8001fb6 <FusionAhrsSetSettings+0x8e>
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	691b      	ldr	r3, [r3, #16]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d103      	bne.n	8001fbe <FusionAhrsSetSettings+0x96>
        ahrs->settings.magneticRejection = FLT_MAX;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	4a21      	ldr	r2, [pc, #132]	; (8002040 <FusionAhrsSetSettings+0x118>)
 8001fba:	60da      	str	r2, [r3, #12]
 8001fbc:	e01d      	b.n	8001ffa <FusionAhrsSetSettings+0xd2>
    } else {
        ahrs->settings.magneticRejection = powf(0.5f * sinf(FusionDegreesToRadians(settings->magneticRejection)), 2);
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	edd3 7a03 	vldr	s15, [r3, #12]
 8001fc4:	eeb0 0a67 	vmov.f32	s0, s15
 8001fc8:	f7ff fa84 	bl	80014d4 <FusionDegreesToRadians>
 8001fcc:	eef0 7a40 	vmov.f32	s15, s0
 8001fd0:	eeb0 0a67 	vmov.f32	s0, s15
 8001fd4:	f011 f8b0 	bl	8013138 <sinf>
 8001fd8:	eef0 7a40 	vmov.f32	s15, s0
 8001fdc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001fe0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001fe4:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8001fe8:	eeb0 0a67 	vmov.f32	s0, s15
 8001fec:	f011 f800 	bl	8012ff0 <powf>
 8001ff0:	eef0 7a40 	vmov.f32	s15, s0
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	edc3 7a03 	vstr	s15, [r3, #12]
    }
    ahrs->settings.rejectionTimeout = settings->rejectionTimeout;
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	691a      	ldr	r2, [r3, #16]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	611a      	str	r2, [r3, #16]
    if (ahrs->initialising == false) {
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002008:	f083 0301 	eor.w	r3, r3, #1
 800200c:	b2db      	uxtb	r3, r3
 800200e:	2b00      	cmp	r3, #0
 8002010:	d003      	beq.n	800201a <FusionAhrsSetSettings+0xf2>
        ahrs->rampedGain = ahrs->settings.gain;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	685a      	ldr	r2, [r3, #4]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	635a      	str	r2, [r3, #52]	; 0x34
    }
    ahrs->rampedGainStep = (INITIAL_GAIN - ahrs->settings.gain) / INITIALISATION_PERIOD;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	edd3 7a01 	vldr	s15, [r3, #4]
 8002020:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002024:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002028:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800202c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
}
 8002036:	bf00      	nop
 8002038:	3708      	adds	r7, #8
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	7f7fffff 	.word	0x7f7fffff

08002044 <FusionAhrsUpdate>:
 * @param gyroscope Gyroscope measurement in degrees per second.
 * @param accelerometer Accelerometer measurement in g.
 * @param magnetometer Magnetometer measurement in arbitrary units.
 * @param deltaTime Delta time in seconds.
 */
void FusionAhrsUpdate(FusionAhrs *const ahrs, const FusionVector gyroscope, const FusionVector accelerometer, const FusionVector magnetometer, const float deltaTime) {
 8002044:	b590      	push	{r4, r7, lr}
 8002046:	b0bf      	sub	sp, #252	; 0xfc
 8002048:	af00      	add	r7, sp, #0
 800204a:	62f8      	str	r0, [r7, #44]	; 0x2c
 800204c:	eeb0 5a61 	vmov.f32	s10, s3
 8002050:	eef0 5a42 	vmov.f32	s11, s4
 8002054:	eeb0 6a62 	vmov.f32	s12, s5
 8002058:	eef0 6a43 	vmov.f32	s13, s6
 800205c:	eeb0 7a63 	vmov.f32	s14, s7
 8002060:	eef0 7a44 	vmov.f32	s15, s8
 8002064:	edc7 4a01 	vstr	s9, [r7, #4]
 8002068:	ed87 0a08 	vstr	s0, [r7, #32]
 800206c:	edc7 0a09 	vstr	s1, [r7, #36]	; 0x24
 8002070:	ed87 1a0a 	vstr	s2, [r7, #40]	; 0x28
 8002074:	ed87 5a05 	vstr	s10, [r7, #20]
 8002078:	edc7 5a06 	vstr	s11, [r7, #24]
 800207c:	ed87 6a07 	vstr	s12, [r7, #28]
 8002080:	edc7 6a02 	vstr	s13, [r7, #8]
 8002084:	ed87 7a03 	vstr	s14, [r7, #12]
 8002088:	edc7 7a04 	vstr	s15, [r7, #16]
#define Q ahrs->quaternion.element

    // Store accelerometer
    ahrs->accelerometer = accelerometer;
 800208c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800208e:	3324      	adds	r3, #36	; 0x24
 8002090:	f107 0214 	add.w	r2, r7, #20
 8002094:	ca07      	ldmia	r2, {r0, r1, r2}
 8002096:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    // Ramp down gain during initialisation
    if (ahrs->initialising == true) {
 800209a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800209c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d025      	beq.n	80020f0 <FusionAhrsUpdate+0xac>
        ahrs->rampedGain -= ahrs->rampedGainStep * deltaTime;
 80020a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020a6:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 80020aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020ac:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 80020b0:	edd7 7a01 	vldr	s15, [r7, #4]
 80020b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020be:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
        if (ahrs->rampedGain < ahrs->settings.gain) {
 80020c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020c4:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 80020c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020ca:	edd3 7a01 	vldr	s15, [r3, #4]
 80020ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80020d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020d6:	d50b      	bpl.n	80020f0 <FusionAhrsUpdate+0xac>
            ahrs->rampedGain = ahrs->settings.gain;
 80020d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020da:	685a      	ldr	r2, [r3, #4]
 80020dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020de:	635a      	str	r2, [r3, #52]	; 0x34
            ahrs->initialising = false;
 80020e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020e2:	2200      	movs	r2, #0
 80020e4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
            ahrs->accelerationRejectionTimeout = false;
 80020e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020ea:	2200      	movs	r2, #0
 80020ec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
        }
    }

    // Calculate direction of gravity indicated by algorithm
    const FusionVector halfGravity = HalfGravity(ahrs);
 80020f0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80020f2:	f000 fb08 	bl	8002706 <HalfGravity>
 80020f6:	eef0 6a40 	vmov.f32	s13, s0
 80020fa:	eeb0 7a60 	vmov.f32	s14, s1
 80020fe:	eef0 7a41 	vmov.f32	s15, s2
 8002102:	edc7 6a25 	vstr	s13, [r7, #148]	; 0x94
 8002106:	ed87 7a26 	vstr	s14, [r7, #152]	; 0x98
 800210a:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c

    // Calculate accelerometer feedback
    FusionVector halfAccelerometerFeedback = FUSION_VECTOR_ZERO;
 800210e:	f04f 0300 	mov.w	r3, #0
 8002112:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002116:	f04f 0300 	mov.w	r3, #0
 800211a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800211e:	f04f 0300 	mov.w	r3, #0
 8002122:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    ahrs->accelerometerIgnored = true;
 8002126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002128:	2201      	movs	r2, #1
 800212a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
    if (FusionVectorIsZero(accelerometer) == false) {
 800212e:	edd7 6a05 	vldr	s13, [r7, #20]
 8002132:	ed97 7a06 	vldr	s14, [r7, #24]
 8002136:	edd7 7a07 	vldr	s15, [r7, #28]
 800213a:	eeb0 0a66 	vmov.f32	s0, s13
 800213e:	eef0 0a47 	vmov.f32	s1, s14
 8002142:	eeb0 1a67 	vmov.f32	s2, s15
 8002146:	f7ff fa09 	bl	800155c <FusionVectorIsZero>
 800214a:	4603      	mov	r3, r0
 800214c:	f083 0301 	eor.w	r3, r3, #1
 8002150:	b2db      	uxtb	r3, r3
 8002152:	2b00      	cmp	r3, #0
 8002154:	f000 809b 	beq.w	800228e <FusionAhrsUpdate+0x24a>

        // Enter acceleration recovery state if acceleration rejection times out
        if (ahrs->accelerationRejectionTimer > ahrs->settings.rejectionTimeout) {
 8002158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800215a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800215c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800215e:	691b      	ldr	r3, [r3, #16]
 8002160:	429a      	cmp	r2, r3
 8002162:	d918      	bls.n	8002196 <FusionAhrsUpdate+0x152>
            const FusionQuaternion quaternion = ahrs->quaternion;
 8002164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002166:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 800216a:	3314      	adds	r3, #20
 800216c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800216e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            FusionAhrsReset(ahrs);
 8002172:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002174:	f7ff fe7a 	bl	8001e6c <FusionAhrsReset>
            ahrs->quaternion = quaternion;
 8002178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800217a:	f103 0414 	add.w	r4, r3, #20
 800217e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002182:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002184:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            ahrs->accelerationRejectionTimer = 0;
 8002188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800218a:	2200      	movs	r2, #0
 800218c:	659a      	str	r2, [r3, #88]	; 0x58
            ahrs->accelerationRejectionTimeout = true;
 800218e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002190:	2201      	movs	r2, #1
 8002192:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
        }

        // Calculate accelerometer feedback scaled by 0.5
        ahrs->halfAccelerometerFeedback = FusionVectorCrossProduct(FusionVectorNormalise(accelerometer), halfGravity);
 8002196:	edd7 6a05 	vldr	s13, [r7, #20]
 800219a:	ed97 7a06 	vldr	s14, [r7, #24]
 800219e:	edd7 7a07 	vldr	s15, [r7, #28]
 80021a2:	eeb0 0a66 	vmov.f32	s0, s13
 80021a6:	eef0 0a47 	vmov.f32	s1, s14
 80021aa:	eeb0 1a67 	vmov.f32	s2, s15
 80021ae:	f7ff fbb5 	bl	800191c <FusionVectorNormalise>
 80021b2:	eef0 6a40 	vmov.f32	s13, s0
 80021b6:	eeb0 7a60 	vmov.f32	s14, s1
 80021ba:	eef0 7a41 	vmov.f32	s15, s2
 80021be:	edc7 6a28 	vstr	s13, [r7, #160]	; 0xa0
 80021c2:	ed87 7a29 	vstr	s14, [r7, #164]	; 0xa4
 80021c6:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
 80021ca:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 80021cc:	ed97 5a25 	vldr	s10, [r7, #148]	; 0x94
 80021d0:	edd7 5a26 	vldr	s11, [r7, #152]	; 0x98
 80021d4:	ed97 6a27 	vldr	s12, [r7, #156]	; 0x9c
 80021d8:	edd7 6a28 	vldr	s13, [r7, #160]	; 0xa0
 80021dc:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 80021e0:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80021e4:	eef0 1a45 	vmov.f32	s3, s10
 80021e8:	eeb0 2a65 	vmov.f32	s4, s11
 80021ec:	eef0 2a46 	vmov.f32	s5, s12
 80021f0:	eeb0 0a66 	vmov.f32	s0, s13
 80021f4:	eef0 0a47 	vmov.f32	s1, s14
 80021f8:	eeb0 1a67 	vmov.f32	s2, s15
 80021fc:	f7ff fade 	bl	80017bc <FusionVectorCrossProduct>
 8002200:	eef0 6a40 	vmov.f32	s13, s0
 8002204:	eeb0 7a60 	vmov.f32	s14, s1
 8002208:	eef0 7a41 	vmov.f32	s15, s2
 800220c:	edc4 6a0f 	vstr	s13, [r4, #60]	; 0x3c
 8002210:	ed84 7a10 	vstr	s14, [r4, #64]	; 0x40
 8002214:	edc4 7a11 	vstr	s15, [r4, #68]	; 0x44

        // Ignore accelerometer if acceleration distortion detected
        if ((ahrs->initialising == true) || (FusionVectorMagnitudeSquared(ahrs->halfAccelerometerFeedback) <= ahrs->settings.accelerationRejection)) {
 8002218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800221a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800221e:	2b00      	cmp	r3, #0
 8002220:	d118      	bne.n	8002254 <FusionAhrsUpdate+0x210>
 8002222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002224:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 8002228:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 800222c:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8002230:	eeb0 0a66 	vmov.f32	s0, s13
 8002234:	eef0 0a47 	vmov.f32	s1, s14
 8002238:	eeb0 1a67 	vmov.f32	s2, s15
 800223c:	f7ff fb24 	bl	8001888 <FusionVectorMagnitudeSquared>
 8002240:	eeb0 7a40 	vmov.f32	s14, s0
 8002244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002246:	edd3 7a02 	vldr	s15, [r3, #8]
 800224a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800224e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002252:	d817      	bhi.n	8002284 <FusionAhrsUpdate+0x240>
            halfAccelerometerFeedback = ahrs->halfAccelerometerFeedback;
 8002254:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002256:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800225a:	323c      	adds	r2, #60	; 0x3c
 800225c:	ca07      	ldmia	r2, {r0, r1, r2}
 800225e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            ahrs->accelerometerIgnored = false;
 8002262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002264:	2200      	movs	r2, #0
 8002266:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
            ahrs->accelerationRejectionTimer -= ahrs->accelerationRejectionTimer >= 10 ? 10 : 0;
 800226a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800226c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800226e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002270:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002272:	2b09      	cmp	r3, #9
 8002274:	d901      	bls.n	800227a <FusionAhrsUpdate+0x236>
 8002276:	230a      	movs	r3, #10
 8002278:	e000      	b.n	800227c <FusionAhrsUpdate+0x238>
 800227a:	2300      	movs	r3, #0
 800227c:	1ad2      	subs	r2, r2, r3
 800227e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002280:	659a      	str	r2, [r3, #88]	; 0x58
 8002282:	e004      	b.n	800228e <FusionAhrsUpdate+0x24a>
        } else {
            ahrs->accelerationRejectionTimer++;
 8002284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002286:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002288:	1c5a      	adds	r2, r3, #1
 800228a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800228c:	659a      	str	r2, [r3, #88]	; 0x58
        }
    }

    // Calculate magnetometer feedback
    FusionVector halfMagnetometerFeedback = FUSION_VECTOR_ZERO;
 800228e:	f04f 0300 	mov.w	r3, #0
 8002292:	673b      	str	r3, [r7, #112]	; 0x70
 8002294:	f04f 0300 	mov.w	r3, #0
 8002298:	677b      	str	r3, [r7, #116]	; 0x74
 800229a:	f04f 0300 	mov.w	r3, #0
 800229e:	67bb      	str	r3, [r7, #120]	; 0x78
    ahrs->magnetometerIgnored = true;
 80022a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022a2:	2201      	movs	r2, #1
 80022a4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    if (FusionVectorIsZero(magnetometer) == false) {
 80022a8:	edd7 6a02 	vldr	s13, [r7, #8]
 80022ac:	ed97 7a03 	vldr	s14, [r7, #12]
 80022b0:	edd7 7a04 	vldr	s15, [r7, #16]
 80022b4:	eeb0 0a66 	vmov.f32	s0, s13
 80022b8:	eef0 0a47 	vmov.f32	s1, s14
 80022bc:	eeb0 1a67 	vmov.f32	s2, s15
 80022c0:	f7ff f94c 	bl	800155c <FusionVectorIsZero>
 80022c4:	4603      	mov	r3, r0
 80022c6:	f083 0301 	eor.w	r3, r3, #1
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	f000 80e6 	beq.w	800249e <FusionAhrsUpdate+0x45a>

        // Set to compass heading if magnetic rejection times out
        ahrs->magneticRejectionTimeout = false;
 80022d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022d4:	2200      	movs	r2, #0
 80022d6:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
        if (ahrs->magneticRejectionTimer > ahrs->settings.rejectionTimeout) {
 80022da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022dc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80022de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022e0:	691b      	ldr	r3, [r3, #16]
 80022e2:	429a      	cmp	r2, r3
 80022e4:	d92a      	bls.n	800233c <FusionAhrsUpdate+0x2f8>
            FusionAhrsSetHeading(ahrs, FusionCompassCalculateHeading(ahrs->settings.convention, halfGravity, magnetometer));
 80022e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022e8:	781b      	ldrb	r3, [r3, #0]
 80022ea:	ed97 5a02 	vldr	s10, [r7, #8]
 80022ee:	edd7 5a03 	vldr	s11, [r7, #12]
 80022f2:	ed97 6a04 	vldr	s12, [r7, #16]
 80022f6:	edd7 6a25 	vldr	s13, [r7, #148]	; 0x94
 80022fa:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 80022fe:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8002302:	eef0 1a45 	vmov.f32	s3, s10
 8002306:	eeb0 2a65 	vmov.f32	s4, s11
 800230a:	eef0 2a46 	vmov.f32	s5, s12
 800230e:	eeb0 0a66 	vmov.f32	s0, s13
 8002312:	eef0 0a47 	vmov.f32	s1, s14
 8002316:	eeb0 1a67 	vmov.f32	s2, s15
 800231a:	4618      	mov	r0, r3
 800231c:	f000 fed0 	bl	80030c0 <FusionCompassCalculateHeading>
 8002320:	eef0 7a40 	vmov.f32	s15, s0
 8002324:	eeb0 0a67 	vmov.f32	s0, s15
 8002328:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800232a:	f000 fc38 	bl	8002b9e <FusionAhrsSetHeading>
            ahrs->magneticRejectionTimer = 0;
 800232e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002330:	2200      	movs	r2, #0
 8002332:	661a      	str	r2, [r3, #96]	; 0x60
            ahrs->magneticRejectionTimeout = true;
 8002334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002336:	2201      	movs	r2, #1
 8002338:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
        }

        // Calculate direction of magnetic field indicated by algorithm
        const FusionVector halfMagnetic = HalfMagnetic(ahrs);
 800233c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800233e:	f000 fa9f 	bl	8002880 <HalfMagnetic>
 8002342:	eef0 6a40 	vmov.f32	s13, s0
 8002346:	eeb0 7a60 	vmov.f32	s14, s1
 800234a:	eef0 7a41 	vmov.f32	s15, s2
 800234e:	edc7 6a0c 	vstr	s13, [r7, #48]	; 0x30
 8002352:	ed87 7a0d 	vstr	s14, [r7, #52]	; 0x34
 8002356:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38

        // Calculate magnetometer feedback scaled by 0.5
        ahrs->halfMagnetometerFeedback = FusionVectorCrossProduct(FusionVectorNormalise(FusionVectorCrossProduct(halfGravity, magnetometer)), halfMagnetic);
 800235a:	ed97 5a02 	vldr	s10, [r7, #8]
 800235e:	edd7 5a03 	vldr	s11, [r7, #12]
 8002362:	ed97 6a04 	vldr	s12, [r7, #16]
 8002366:	edd7 6a25 	vldr	s13, [r7, #148]	; 0x94
 800236a:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800236e:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8002372:	eef0 1a45 	vmov.f32	s3, s10
 8002376:	eeb0 2a65 	vmov.f32	s4, s11
 800237a:	eef0 2a46 	vmov.f32	s5, s12
 800237e:	eeb0 0a66 	vmov.f32	s0, s13
 8002382:	eef0 0a47 	vmov.f32	s1, s14
 8002386:	eeb0 1a67 	vmov.f32	s2, s15
 800238a:	f7ff fa17 	bl	80017bc <FusionVectorCrossProduct>
 800238e:	eef0 6a40 	vmov.f32	s13, s0
 8002392:	eeb0 7a60 	vmov.f32	s14, s1
 8002396:	eef0 7a41 	vmov.f32	s15, s2
 800239a:	edc7 6a2b 	vstr	s13, [r7, #172]	; 0xac
 800239e:	ed87 7a2c 	vstr	s14, [r7, #176]	; 0xb0
 80023a2:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
 80023a6:	edd7 6a2b 	vldr	s13, [r7, #172]	; 0xac
 80023aa:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 80023ae:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 80023b2:	eeb0 0a66 	vmov.f32	s0, s13
 80023b6:	eef0 0a47 	vmov.f32	s1, s14
 80023ba:	eeb0 1a67 	vmov.f32	s2, s15
 80023be:	f7ff faad 	bl	800191c <FusionVectorNormalise>
 80023c2:	eef0 6a40 	vmov.f32	s13, s0
 80023c6:	eeb0 7a60 	vmov.f32	s14, s1
 80023ca:	eef0 7a41 	vmov.f32	s15, s2
 80023ce:	edc7 6a2e 	vstr	s13, [r7, #184]	; 0xb8
 80023d2:	ed87 7a2f 	vstr	s14, [r7, #188]	; 0xbc
 80023d6:	edc7 7a30 	vstr	s15, [r7, #192]	; 0xc0
 80023da:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 80023dc:	ed97 5a0c 	vldr	s10, [r7, #48]	; 0x30
 80023e0:	edd7 5a0d 	vldr	s11, [r7, #52]	; 0x34
 80023e4:	ed97 6a0e 	vldr	s12, [r7, #56]	; 0x38
 80023e8:	edd7 6a2e 	vldr	s13, [r7, #184]	; 0xb8
 80023ec:	ed97 7a2f 	vldr	s14, [r7, #188]	; 0xbc
 80023f0:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 80023f4:	eef0 1a45 	vmov.f32	s3, s10
 80023f8:	eeb0 2a65 	vmov.f32	s4, s11
 80023fc:	eef0 2a46 	vmov.f32	s5, s12
 8002400:	eeb0 0a66 	vmov.f32	s0, s13
 8002404:	eef0 0a47 	vmov.f32	s1, s14
 8002408:	eeb0 1a67 	vmov.f32	s2, s15
 800240c:	f7ff f9d6 	bl	80017bc <FusionVectorCrossProduct>
 8002410:	eef0 6a40 	vmov.f32	s13, s0
 8002414:	eeb0 7a60 	vmov.f32	s14, s1
 8002418:	eef0 7a41 	vmov.f32	s15, s2
 800241c:	edc4 6a12 	vstr	s13, [r4, #72]	; 0x48
 8002420:	ed84 7a13 	vstr	s14, [r4, #76]	; 0x4c
 8002424:	edc4 7a14 	vstr	s15, [r4, #80]	; 0x50

        // Ignore magnetometer if magnetic distortion detected
        if ((ahrs->initialising == true) || (FusionVectorMagnitudeSquared(ahrs->halfMagnetometerFeedback) <= ahrs->settings.magneticRejection)) {
 8002428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800242a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800242e:	2b00      	cmp	r3, #0
 8002430:	d118      	bne.n	8002464 <FusionAhrsUpdate+0x420>
 8002432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002434:	edd3 6a12 	vldr	s13, [r3, #72]	; 0x48
 8002438:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 800243c:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8002440:	eeb0 0a66 	vmov.f32	s0, s13
 8002444:	eef0 0a47 	vmov.f32	s1, s14
 8002448:	eeb0 1a67 	vmov.f32	s2, s15
 800244c:	f7ff fa1c 	bl	8001888 <FusionVectorMagnitudeSquared>
 8002450:	eeb0 7a40 	vmov.f32	s14, s0
 8002454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002456:	edd3 7a03 	vldr	s15, [r3, #12]
 800245a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800245e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002462:	d817      	bhi.n	8002494 <FusionAhrsUpdate+0x450>
            halfMagnetometerFeedback = ahrs->halfMagnetometerFeedback;
 8002464:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002466:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800246a:	3248      	adds	r2, #72	; 0x48
 800246c:	ca07      	ldmia	r2, {r0, r1, r2}
 800246e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            ahrs->magnetometerIgnored = false;
 8002472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002474:	2200      	movs	r2, #0
 8002476:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
            ahrs->magneticRejectionTimer -= ahrs->magneticRejectionTimer >= 10 ? 10 : 0;
 800247a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800247c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800247e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002480:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002482:	2b09      	cmp	r3, #9
 8002484:	d901      	bls.n	800248a <FusionAhrsUpdate+0x446>
 8002486:	230a      	movs	r3, #10
 8002488:	e000      	b.n	800248c <FusionAhrsUpdate+0x448>
 800248a:	2300      	movs	r3, #0
 800248c:	1ad2      	subs	r2, r2, r3
 800248e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002490:	661a      	str	r2, [r3, #96]	; 0x60
 8002492:	e004      	b.n	800249e <FusionAhrsUpdate+0x45a>
        } else {
            ahrs->magneticRejectionTimer++;
 8002494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002496:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002498:	1c5a      	adds	r2, r3, #1
 800249a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800249c:	661a      	str	r2, [r3, #96]	; 0x60
        }
    }

    // Convert gyroscope to radians per second scaled by 0.5
    const FusionVector halfGyroscope = FusionVectorMultiplyScalar(gyroscope, FusionDegreesToRadians(0.5f));
 800249e:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 80024a2:	f7ff f817 	bl	80014d4 <FusionDegreesToRadians>
 80024a6:	eeb0 6a40 	vmov.f32	s12, s0
 80024aa:	edd7 6a08 	vldr	s13, [r7, #32]
 80024ae:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80024b2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80024b6:	eef0 1a46 	vmov.f32	s3, s12
 80024ba:	eeb0 0a66 	vmov.f32	s0, s13
 80024be:	eef0 0a47 	vmov.f32	s1, s14
 80024c2:	eeb0 1a67 	vmov.f32	s2, s15
 80024c6:	f7ff f8e7 	bl	8001698 <FusionVectorMultiplyScalar>
 80024ca:	eef0 6a40 	vmov.f32	s13, s0
 80024ce:	eeb0 7a60 	vmov.f32	s14, s1
 80024d2:	eef0 7a41 	vmov.f32	s15, s2
 80024d6:	edc7 6a16 	vstr	s13, [r7, #88]	; 0x58
 80024da:	ed87 7a17 	vstr	s14, [r7, #92]	; 0x5c
 80024de:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60

    // Apply feedback to gyroscope
    const FusionVector adjustedHalfGyroscope = FusionVectorAdd(halfGyroscope, FusionVectorMultiplyScalar(FusionVectorAdd(halfAccelerometerFeedback, halfMagnetometerFeedback), ahrs->rampedGain));
 80024e2:	ed97 5a1c 	vldr	s10, [r7, #112]	; 0x70
 80024e6:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 80024ea:	ed97 6a1e 	vldr	s12, [r7, #120]	; 0x78
 80024ee:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 80024f2:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 80024f6:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 80024fa:	eef0 1a45 	vmov.f32	s3, s10
 80024fe:	eeb0 2a65 	vmov.f32	s4, s11
 8002502:	eef0 2a46 	vmov.f32	s5, s12
 8002506:	eeb0 0a66 	vmov.f32	s0, s13
 800250a:	eef0 0a47 	vmov.f32	s1, s14
 800250e:	eeb0 1a67 	vmov.f32	s2, s15
 8002512:	f7ff f853 	bl	80015bc <FusionVectorAdd>
 8002516:	eef0 6a40 	vmov.f32	s13, s0
 800251a:	eeb0 7a60 	vmov.f32	s14, s1
 800251e:	eef0 7a41 	vmov.f32	s15, s2
 8002522:	edc7 6a31 	vstr	s13, [r7, #196]	; 0xc4
 8002526:	ed87 7a32 	vstr	s14, [r7, #200]	; 0xc8
 800252a:	edc7 7a33 	vstr	s15, [r7, #204]	; 0xcc
 800252e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002530:	ed93 6a0d 	vldr	s12, [r3, #52]	; 0x34
 8002534:	edd7 6a31 	vldr	s13, [r7, #196]	; 0xc4
 8002538:	ed97 7a32 	vldr	s14, [r7, #200]	; 0xc8
 800253c:	edd7 7a33 	vldr	s15, [r7, #204]	; 0xcc
 8002540:	eef0 1a46 	vmov.f32	s3, s12
 8002544:	eeb0 0a66 	vmov.f32	s0, s13
 8002548:	eef0 0a47 	vmov.f32	s1, s14
 800254c:	eeb0 1a67 	vmov.f32	s2, s15
 8002550:	f7ff f8a2 	bl	8001698 <FusionVectorMultiplyScalar>
 8002554:	eef0 6a40 	vmov.f32	s13, s0
 8002558:	eeb0 7a60 	vmov.f32	s14, s1
 800255c:	eef0 7a41 	vmov.f32	s15, s2
 8002560:	edc7 6a34 	vstr	s13, [r7, #208]	; 0xd0
 8002564:	ed87 7a35 	vstr	s14, [r7, #212]	; 0xd4
 8002568:	edc7 7a36 	vstr	s15, [r7, #216]	; 0xd8
 800256c:	ed97 5a34 	vldr	s10, [r7, #208]	; 0xd0
 8002570:	edd7 5a35 	vldr	s11, [r7, #212]	; 0xd4
 8002574:	ed97 6a36 	vldr	s12, [r7, #216]	; 0xd8
 8002578:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 800257c:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8002580:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8002584:	eef0 1a45 	vmov.f32	s3, s10
 8002588:	eeb0 2a65 	vmov.f32	s4, s11
 800258c:	eef0 2a46 	vmov.f32	s5, s12
 8002590:	eeb0 0a66 	vmov.f32	s0, s13
 8002594:	eef0 0a47 	vmov.f32	s1, s14
 8002598:	eeb0 1a67 	vmov.f32	s2, s15
 800259c:	f7ff f80e 	bl	80015bc <FusionVectorAdd>
 80025a0:	eef0 6a40 	vmov.f32	s13, s0
 80025a4:	eeb0 7a60 	vmov.f32	s14, s1
 80025a8:	eef0 7a41 	vmov.f32	s15, s2
 80025ac:	edc7 6a13 	vstr	s13, [r7, #76]	; 0x4c
 80025b0:	ed87 7a14 	vstr	s14, [r7, #80]	; 0x50
 80025b4:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    // Integrate rate of change of quaternion
    ahrs->quaternion = FusionQuaternionAdd(ahrs->quaternion, FusionQuaternionMultiplyVector(ahrs->quaternion, FusionVectorMultiplyScalar(adjustedHalfGyroscope, deltaTime)));
 80025b8:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 80025bc:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80025c0:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80025c4:	edd7 1a01 	vldr	s3, [r7, #4]
 80025c8:	eeb0 0a66 	vmov.f32	s0, s13
 80025cc:	eef0 0a47 	vmov.f32	s1, s14
 80025d0:	eeb0 1a67 	vmov.f32	s2, s15
 80025d4:	f7ff f860 	bl	8001698 <FusionVectorMultiplyScalar>
 80025d8:	eef0 6a40 	vmov.f32	s13, s0
 80025dc:	eeb0 7a60 	vmov.f32	s14, s1
 80025e0:	eef0 7a41 	vmov.f32	s15, s2
 80025e4:	edc7 6a37 	vstr	s13, [r7, #220]	; 0xdc
 80025e8:	ed87 7a38 	vstr	s14, [r7, #224]	; 0xe0
 80025ec:	edc7 7a39 	vstr	s15, [r7, #228]	; 0xe4
 80025f0:	edd7 4a37 	vldr	s9, [r7, #220]	; 0xdc
 80025f4:	ed97 5a38 	vldr	s10, [r7, #224]	; 0xe0
 80025f8:	edd7 5a39 	vldr	s11, [r7, #228]	; 0xe4
 80025fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025fe:	ed93 6a05 	vldr	s12, [r3, #20]
 8002602:	edd3 6a06 	vldr	s13, [r3, #24]
 8002606:	ed93 7a07 	vldr	s14, [r3, #28]
 800260a:	edd3 7a08 	vldr	s15, [r3, #32]
 800260e:	eeb0 2a64 	vmov.f32	s4, s9
 8002612:	eef0 2a45 	vmov.f32	s5, s10
 8002616:	eeb0 3a65 	vmov.f32	s6, s11
 800261a:	eeb0 0a46 	vmov.f32	s0, s12
 800261e:	eef0 0a66 	vmov.f32	s1, s13
 8002622:	eeb0 1a47 	vmov.f32	s2, s14
 8002626:	eef0 1a67 	vmov.f32	s3, s15
 800262a:	f7ff faee 	bl	8001c0a <FusionQuaternionMultiplyVector>
 800262e:	eeb0 6a40 	vmov.f32	s12, s0
 8002632:	eef0 6a60 	vmov.f32	s13, s1
 8002636:	eeb0 7a41 	vmov.f32	s14, s2
 800263a:	eef0 7a61 	vmov.f32	s15, s3
 800263e:	ed87 6a3a 	vstr	s12, [r7, #232]	; 0xe8
 8002642:	edc7 6a3b 	vstr	s13, [r7, #236]	; 0xec
 8002646:	ed87 7a3c 	vstr	s14, [r7, #240]	; 0xf0
 800264a:	edc7 7a3d 	vstr	s15, [r7, #244]	; 0xf4
 800264e:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 8002650:	ed97 4a3a 	vldr	s8, [r7, #232]	; 0xe8
 8002654:	edd7 4a3b 	vldr	s9, [r7, #236]	; 0xec
 8002658:	ed97 5a3c 	vldr	s10, [r7, #240]	; 0xf0
 800265c:	edd7 5a3d 	vldr	s11, [r7, #244]	; 0xf4
 8002660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002662:	ed93 6a05 	vldr	s12, [r3, #20]
 8002666:	edd3 6a06 	vldr	s13, [r3, #24]
 800266a:	ed93 7a07 	vldr	s14, [r3, #28]
 800266e:	edd3 7a08 	vldr	s15, [r3, #32]
 8002672:	eeb0 2a44 	vmov.f32	s4, s8
 8002676:	eef0 2a64 	vmov.f32	s5, s9
 800267a:	eeb0 3a45 	vmov.f32	s6, s10
 800267e:	eef0 3a65 	vmov.f32	s7, s11
 8002682:	eeb0 0a46 	vmov.f32	s0, s12
 8002686:	eef0 0a66 	vmov.f32	s1, s13
 800268a:	eeb0 1a47 	vmov.f32	s2, s14
 800268e:	eef0 1a67 	vmov.f32	s3, s15
 8002692:	f7ff f996 	bl	80019c2 <FusionQuaternionAdd>
 8002696:	eeb0 6a40 	vmov.f32	s12, s0
 800269a:	eef0 6a60 	vmov.f32	s13, s1
 800269e:	eeb0 7a41 	vmov.f32	s14, s2
 80026a2:	eef0 7a61 	vmov.f32	s15, s3
 80026a6:	ed84 6a05 	vstr	s12, [r4, #20]
 80026aa:	edc4 6a06 	vstr	s13, [r4, #24]
 80026ae:	ed84 7a07 	vstr	s14, [r4, #28]
 80026b2:	edc4 7a08 	vstr	s15, [r4, #32]

    // Normalise quaternion
    ahrs->quaternion = FusionQuaternionNormalise(ahrs->quaternion);
 80026b6:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 80026b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026ba:	ed93 6a05 	vldr	s12, [r3, #20]
 80026be:	edd3 6a06 	vldr	s13, [r3, #24]
 80026c2:	ed93 7a07 	vldr	s14, [r3, #28]
 80026c6:	edd3 7a08 	vldr	s15, [r3, #32]
 80026ca:	eeb0 0a46 	vmov.f32	s0, s12
 80026ce:	eef0 0a66 	vmov.f32	s1, s13
 80026d2:	eeb0 1a47 	vmov.f32	s2, s14
 80026d6:	eef0 1a67 	vmov.f32	s3, s15
 80026da:	f7ff fb36 	bl	8001d4a <FusionQuaternionNormalise>
 80026de:	eeb0 6a40 	vmov.f32	s12, s0
 80026e2:	eef0 6a60 	vmov.f32	s13, s1
 80026e6:	eeb0 7a41 	vmov.f32	s14, s2
 80026ea:	eef0 7a61 	vmov.f32	s15, s3
 80026ee:	ed84 6a05 	vstr	s12, [r4, #20]
 80026f2:	edc4 6a06 	vstr	s13, [r4, #24]
 80026f6:	ed84 7a07 	vstr	s14, [r4, #28]
 80026fa:	edc4 7a08 	vstr	s15, [r4, #32]
#undef Q
}
 80026fe:	bf00      	nop
 8002700:	37fc      	adds	r7, #252	; 0xfc
 8002702:	46bd      	mov	sp, r7
 8002704:	bd90      	pop	{r4, r7, pc}

08002706 <HalfGravity>:
/**
 * @brief Returns the direction of gravity scaled by 0.5.
 * @param ahrs AHRS algorithm structure.
 * @return Direction of gravity scaled by 0.5.
 */
static FusionVector HalfGravity(const FusionAhrs *const ahrs) {
 8002706:	b480      	push	{r7}
 8002708:	b093      	sub	sp, #76	; 0x4c
 800270a:	af00      	add	r7, sp, #0
 800270c:	6178      	str	r0, [r7, #20]
#define Q ahrs->quaternion.element
    switch (ahrs->settings.convention) {
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	781b      	ldrb	r3, [r3, #0]
 8002712:	2b01      	cmp	r3, #1
 8002714:	dc02      	bgt.n	800271c <HalfGravity+0x16>
 8002716:	2b00      	cmp	r3, #0
 8002718:	da03      	bge.n	8002722 <HalfGravity+0x1c>
 800271a:	e094      	b.n	8002846 <HalfGravity+0x140>
 800271c:	2b02      	cmp	r3, #2
 800271e:	d048      	beq.n	80027b2 <HalfGravity+0xac>
 8002720:	e091      	b.n	8002846 <HalfGravity+0x140>
        case FusionConventionNwu:
        case FusionConventionEnu: {
            const FusionVector halfGravity = {.axis = {
                    .x = Q.x * Q.z - Q.w * Q.y,
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	ed93 7a06 	vldr	s14, [r3, #24]
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	edd3 7a08 	vldr	s15, [r3, #32]
 800272e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	edd3 6a05 	vldr	s13, [r3, #20]
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	edd3 7a07 	vldr	s15, [r3, #28]
 800273e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002742:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfGravity = {.axis = {
 8002746:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                    .y = Q.y * Q.z + Q.w * Q.x,
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	ed93 7a07 	vldr	s14, [r3, #28]
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	edd3 7a08 	vldr	s15, [r3, #32]
 8002756:	ee27 7a27 	vmul.f32	s14, s14, s15
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	edd3 6a05 	vldr	s13, [r3, #20]
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	edd3 7a06 	vldr	s15, [r3, #24]
 8002766:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800276a:	ee77 7a27 	vadd.f32	s15, s14, s15
            const FusionVector halfGravity = {.axis = {
 800276e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
                    .z = Q.w * Q.w - 0.5f + Q.z * Q.z,
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	ed93 7a05 	vldr	s14, [r3, #20]
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	edd3 7a05 	vldr	s15, [r3, #20]
 800277e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002782:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002786:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	edd3 6a08 	vldr	s13, [r3, #32]
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	edd3 7a08 	vldr	s15, [r3, #32]
 8002796:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800279a:	ee77 7a27 	vadd.f32	s15, s14, s15
            const FusionVector halfGravity = {.axis = {
 800279e:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            }}; // third column of transposed rotation matrix scaled by 0.5
            return halfGravity;
 80027a2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80027a6:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80027aa:	ca07      	ldmia	r2, {r0, r1, r2}
 80027ac:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80027b0:	e052      	b.n	8002858 <HalfGravity+0x152>
        }
        case FusionConventionNed: {
            const FusionVector halfGravity = {.axis = {
                    .x = Q.w * Q.y - Q.x * Q.z,
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	ed93 7a05 	vldr	s14, [r3, #20]
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	edd3 7a07 	vldr	s15, [r3, #28]
 80027be:	ee27 7a27 	vmul.f32	s14, s14, s15
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	edd3 6a06 	vldr	s13, [r3, #24]
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	edd3 7a08 	vldr	s15, [r3, #32]
 80027ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027d2:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfGravity = {.axis = {
 80027d6:	edc7 7a06 	vstr	s15, [r7, #24]
                    .y = -1.0f * (Q.y * Q.z + Q.w * Q.x),
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	ed93 7a07 	vldr	s14, [r3, #28]
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	edd3 7a08 	vldr	s15, [r3, #32]
 80027e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	edd3 6a05 	vldr	s13, [r3, #20]
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	edd3 7a06 	vldr	s15, [r3, #24]
 80027f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027fe:	eef1 7a67 	vneg.f32	s15, s15
            const FusionVector halfGravity = {.axis = {
 8002802:	edc7 7a07 	vstr	s15, [r7, #28]
                    .z = 0.5f - Q.w * Q.w - Q.z * Q.z,
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	ed93 7a05 	vldr	s14, [r3, #20]
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	edd3 7a05 	vldr	s15, [r3, #20]
 8002812:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002816:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800281a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	edd3 6a08 	vldr	s13, [r3, #32]
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	edd3 7a08 	vldr	s15, [r3, #32]
 800282a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800282e:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfGravity = {.axis = {
 8002832:	edc7 7a08 	vstr	s15, [r7, #32]
            }}; // third column of transposed rotation matrix scaled by -0.5
            return halfGravity;
 8002836:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800283a:	f107 0218 	add.w	r2, r7, #24
 800283e:	ca07      	ldmia	r2, {r0, r1, r2}
 8002840:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002844:	e008      	b.n	8002858 <HalfGravity+0x152>
        }
    }
    return FUSION_VECTOR_ZERO; // avoid compiler warning
 8002846:	f04f 0300 	mov.w	r3, #0
 800284a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800284c:	f04f 0300 	mov.w	r3, #0
 8002850:	643b      	str	r3, [r7, #64]	; 0x40
 8002852:	f04f 0300 	mov.w	r3, #0
 8002856:	647b      	str	r3, [r7, #68]	; 0x44
#undef Q
}
 8002858:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800285a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800285c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800285e:	ee06 1a90 	vmov	s13, r1
 8002862:	ee07 2a10 	vmov	s14, r2
 8002866:	ee07 3a90 	vmov	s15, r3
 800286a:	eeb0 0a66 	vmov.f32	s0, s13
 800286e:	eef0 0a47 	vmov.f32	s1, s14
 8002872:	eeb0 1a67 	vmov.f32	s2, s15
 8002876:	374c      	adds	r7, #76	; 0x4c
 8002878:	46bd      	mov	sp, r7
 800287a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287e:	4770      	bx	lr

08002880 <HalfMagnetic>:
/**
 * @brief Returns the direction of the magnetic field scaled by 0.5.
 * @param ahrs AHRS algorithm structure.
 * @return Direction of the magnetic field scaled by 0.5.
 */
static FusionVector HalfMagnetic(const FusionAhrs *const ahrs) {
 8002880:	b480      	push	{r7}
 8002882:	b097      	sub	sp, #92	; 0x5c
 8002884:	af00      	add	r7, sp, #0
 8002886:	6178      	str	r0, [r7, #20]
#define Q ahrs->quaternion.element
    switch (ahrs->settings.convention) {
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	781b      	ldrb	r3, [r3, #0]
 800288c:	2b02      	cmp	r3, #2
 800288e:	f000 809a 	beq.w	80029c6 <HalfMagnetic+0x146>
 8002892:	2b02      	cmp	r3, #2
 8002894:	f300 80e1 	bgt.w	8002a5a <HalfMagnetic+0x1da>
 8002898:	2b00      	cmp	r3, #0
 800289a:	d002      	beq.n	80028a2 <HalfMagnetic+0x22>
 800289c:	2b01      	cmp	r3, #1
 800289e:	d048      	beq.n	8002932 <HalfMagnetic+0xb2>
 80028a0:	e0db      	b.n	8002a5a <HalfMagnetic+0x1da>
        case FusionConventionNwu: {
            const FusionVector halfMagnetic = {.axis = {
                    .x = Q.x * Q.y + Q.w * Q.z,
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	ed93 7a06 	vldr	s14, [r3, #24]
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	edd3 7a07 	vldr	s15, [r3, #28]
 80028ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	edd3 6a05 	vldr	s13, [r3, #20]
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	edd3 7a08 	vldr	s15, [r3, #32]
 80028be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80028c2:	ee77 7a27 	vadd.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 80028c6:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
                    .y = Q.w * Q.w - 0.5f + Q.y * Q.y,
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	ed93 7a05 	vldr	s14, [r3, #20]
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	edd3 7a05 	vldr	s15, [r3, #20]
 80028d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028da:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80028de:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	edd3 6a07 	vldr	s13, [r3, #28]
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	edd3 7a07 	vldr	s15, [r3, #28]
 80028ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80028f2:	ee77 7a27 	vadd.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 80028f6:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
                    .z = Q.y * Q.z - Q.w * Q.x,
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	ed93 7a07 	vldr	s14, [r3, #28]
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	edd3 7a08 	vldr	s15, [r3, #32]
 8002906:	ee27 7a27 	vmul.f32	s14, s14, s15
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	edd3 6a05 	vldr	s13, [r3, #20]
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	edd3 7a06 	vldr	s15, [r3, #24]
 8002916:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800291a:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 800291e:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
            }}; // second column of transposed rotation matrix scaled by 0.5
            return halfMagnetic;
 8002922:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002926:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800292a:	ca07      	ldmia	r2, {r0, r1, r2}
 800292c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002930:	e09c      	b.n	8002a6c <HalfMagnetic+0x1ec>
        }
        case FusionConventionEnu: {
            const FusionVector halfMagnetic = {.axis = {
                    .x = 0.5f - Q.w * Q.w - Q.x * Q.x,
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	ed93 7a05 	vldr	s14, [r3, #20]
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	edd3 7a05 	vldr	s15, [r3, #20]
 800293e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002942:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002946:	ee37 7a67 	vsub.f32	s14, s14, s15
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	edd3 6a06 	vldr	s13, [r3, #24]
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	edd3 7a06 	vldr	s15, [r3, #24]
 8002956:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800295a:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 800295e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
                    .y = Q.w * Q.z - Q.x * Q.y,
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	ed93 7a05 	vldr	s14, [r3, #20]
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	edd3 7a08 	vldr	s15, [r3, #32]
 800296e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	edd3 6a06 	vldr	s13, [r3, #24]
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	edd3 7a07 	vldr	s15, [r3, #28]
 800297e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002982:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 8002986:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
                    .z = -1.0f * (Q.x * Q.z + Q.w * Q.y),
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	ed93 7a06 	vldr	s14, [r3, #24]
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	edd3 7a08 	vldr	s15, [r3, #32]
 8002996:	ee27 7a27 	vmul.f32	s14, s14, s15
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	edd3 6a05 	vldr	s13, [r3, #20]
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	edd3 7a07 	vldr	s15, [r3, #28]
 80029a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029ae:	eef1 7a67 	vneg.f32	s15, s15
            const FusionVector halfMagnetic = {.axis = {
 80029b2:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
            }}; // first column of transposed rotation matrix scaled by -0.5
            return halfMagnetic;
 80029b6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80029ba:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80029be:	ca07      	ldmia	r2, {r0, r1, r2}
 80029c0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80029c4:	e052      	b.n	8002a6c <HalfMagnetic+0x1ec>
        }
        case FusionConventionNed: {
            const FusionVector halfMagnetic = {.axis = {
                    .x = -1.0f * (Q.x * Q.y + Q.w * Q.z),
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	ed93 7a06 	vldr	s14, [r3, #24]
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	edd3 7a07 	vldr	s15, [r3, #28]
 80029d2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	edd3 6a05 	vldr	s13, [r3, #20]
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	edd3 7a08 	vldr	s15, [r3, #32]
 80029e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029ea:	eef1 7a67 	vneg.f32	s15, s15
            const FusionVector halfMagnetic = {.axis = {
 80029ee:	edc7 7a07 	vstr	s15, [r7, #28]
                    .y = 0.5f - Q.w * Q.w - Q.y * Q.y,
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	ed93 7a05 	vldr	s14, [r3, #20]
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	edd3 7a05 	vldr	s15, [r3, #20]
 80029fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a02:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002a06:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	edd3 6a07 	vldr	s13, [r3, #28]
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	edd3 7a07 	vldr	s15, [r3, #28]
 8002a16:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a1a:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 8002a1e:	edc7 7a08 	vstr	s15, [r7, #32]
                    .z = Q.w * Q.x - Q.y * Q.z,
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	ed93 7a05 	vldr	s14, [r3, #20]
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	edd3 7a06 	vldr	s15, [r3, #24]
 8002a2e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	edd3 6a07 	vldr	s13, [r3, #28]
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	edd3 7a08 	vldr	s15, [r3, #32]
 8002a3e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a42:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 8002a46:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            }}; // second column of transposed rotation matrix scaled by -0.5
            return halfMagnetic;
 8002a4a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002a4e:	f107 021c 	add.w	r2, r7, #28
 8002a52:	ca07      	ldmia	r2, {r0, r1, r2}
 8002a54:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002a58:	e008      	b.n	8002a6c <HalfMagnetic+0x1ec>
        }
    }
    return FUSION_VECTOR_ZERO; // avoid compiler warning
 8002a5a:	f04f 0300 	mov.w	r3, #0
 8002a5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a60:	f04f 0300 	mov.w	r3, #0
 8002a64:	653b      	str	r3, [r7, #80]	; 0x50
 8002a66:	f04f 0300 	mov.w	r3, #0
 8002a6a:	657b      	str	r3, [r7, #84]	; 0x54
#undef Q
}
 8002a6c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002a6e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002a70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a72:	ee06 1a90 	vmov	s13, r1
 8002a76:	ee07 2a10 	vmov	s14, r2
 8002a7a:	ee07 3a90 	vmov	s15, r3
 8002a7e:	eeb0 0a66 	vmov.f32	s0, s13
 8002a82:	eef0 0a47 	vmov.f32	s1, s14
 8002a86:	eeb0 1a67 	vmov.f32	s2, s15
 8002a8a:	375c      	adds	r7, #92	; 0x5c
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a92:	4770      	bx	lr

08002a94 <FusionAhrsUpdateNoMagnetometer>:
 * @param ahrs AHRS algorithm structure.
 * @param gyroscope Gyroscope measurement in degrees per second.
 * @param accelerometer Accelerometer measurement in g.
 * @param deltaTime Delta time in seconds.
 */
void FusionAhrsUpdateNoMagnetometer(FusionAhrs *const ahrs, const FusionVector gyroscope, const FusionVector accelerometer, const float deltaTime) {
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b08c      	sub	sp, #48	; 0x30
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	61f8      	str	r0, [r7, #28]
 8002a9c:	eeb0 5a40 	vmov.f32	s10, s0
 8002aa0:	eef0 5a60 	vmov.f32	s11, s1
 8002aa4:	eeb0 6a41 	vmov.f32	s12, s2
 8002aa8:	eef0 6a61 	vmov.f32	s13, s3
 8002aac:	eeb0 7a42 	vmov.f32	s14, s4
 8002ab0:	eef0 7a62 	vmov.f32	s15, s5
 8002ab4:	ed87 3a00 	vstr	s6, [r7]
 8002ab8:	ed87 5a04 	vstr	s10, [r7, #16]
 8002abc:	edc7 5a05 	vstr	s11, [r7, #20]
 8002ac0:	ed87 6a06 	vstr	s12, [r7, #24]
 8002ac4:	edc7 6a01 	vstr	s13, [r7, #4]
 8002ac8:	ed87 7a02 	vstr	s14, [r7, #8]
 8002acc:	edc7 7a03 	vstr	s15, [r7, #12]

    // Update AHRS algorithm
    FusionAhrsUpdate(ahrs, gyroscope, accelerometer, FUSION_VECTOR_ZERO, deltaTime);
 8002ad0:	f04f 0300 	mov.w	r3, #0
 8002ad4:	627b      	str	r3, [r7, #36]	; 0x24
 8002ad6:	f04f 0300 	mov.w	r3, #0
 8002ada:	62bb      	str	r3, [r7, #40]	; 0x28
 8002adc:	f04f 0300 	mov.w	r3, #0
 8002ae0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ae2:	ed97 3a09 	vldr	s6, [r7, #36]	; 0x24
 8002ae6:	edd7 3a0a 	vldr	s7, [r7, #40]	; 0x28
 8002aea:	ed97 4a0b 	vldr	s8, [r7, #44]	; 0x2c
 8002aee:	ed97 5a01 	vldr	s10, [r7, #4]
 8002af2:	edd7 5a02 	vldr	s11, [r7, #8]
 8002af6:	ed97 6a03 	vldr	s12, [r7, #12]
 8002afa:	edd7 6a04 	vldr	s13, [r7, #16]
 8002afe:	ed97 7a05 	vldr	s14, [r7, #20]
 8002b02:	edd7 7a06 	vldr	s15, [r7, #24]
 8002b06:	edd7 4a00 	vldr	s9, [r7]
 8002b0a:	eef0 1a45 	vmov.f32	s3, s10
 8002b0e:	eeb0 2a65 	vmov.f32	s4, s11
 8002b12:	eef0 2a46 	vmov.f32	s5, s12
 8002b16:	eeb0 0a66 	vmov.f32	s0, s13
 8002b1a:	eef0 0a47 	vmov.f32	s1, s14
 8002b1e:	eeb0 1a67 	vmov.f32	s2, s15
 8002b22:	69f8      	ldr	r0, [r7, #28]
 8002b24:	f7ff fa8e 	bl	8002044 <FusionAhrsUpdate>

    // Zero heading during initialisation
    if ((ahrs->initialising == true) && (ahrs->accelerationRejectionTimeout == false)) {
 8002b28:	69fb      	ldr	r3, [r7, #28]
 8002b2a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d00c      	beq.n	8002b4c <FusionAhrsUpdateNoMagnetometer+0xb8>
 8002b32:	69fb      	ldr	r3, [r7, #28]
 8002b34:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002b38:	f083 0301 	eor.w	r3, r3, #1
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d004      	beq.n	8002b4c <FusionAhrsUpdateNoMagnetometer+0xb8>
        FusionAhrsSetHeading(ahrs, 0.0f);
 8002b42:	ed9f 0a04 	vldr	s0, [pc, #16]	; 8002b54 <FusionAhrsUpdateNoMagnetometer+0xc0>
 8002b46:	69f8      	ldr	r0, [r7, #28]
 8002b48:	f000 f829 	bl	8002b9e <FusionAhrsSetHeading>
    }
}
 8002b4c:	bf00      	nop
 8002b4e:	3730      	adds	r7, #48	; 0x30
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}
 8002b54:	00000000 	.word	0x00000000

08002b58 <FusionAhrsGetQuaternion>:
/**
 * @brief Returns the quaternion describing the sensor relative to the Earth.
 * @param ahrs AHRS algorithm structure.
 * @return Quaternion describing the sensor relative to the Earth.
 */
FusionQuaternion FusionAhrsGetQuaternion(const FusionAhrs *const ahrs) {
 8002b58:	b490      	push	{r4, r7}
 8002b5a:	b08a      	sub	sp, #40	; 0x28
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6178      	str	r0, [r7, #20]
    return ahrs->quaternion;
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	f107 0418 	add.w	r4, r7, #24
 8002b66:	3314      	adds	r3, #20
 8002b68:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002b6a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002b6e:	69b8      	ldr	r0, [r7, #24]
 8002b70:	69f9      	ldr	r1, [r7, #28]
 8002b72:	6a3a      	ldr	r2, [r7, #32]
 8002b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b76:	ee06 0a10 	vmov	s12, r0
 8002b7a:	ee06 1a90 	vmov	s13, r1
 8002b7e:	ee07 2a10 	vmov	s14, r2
 8002b82:	ee07 3a90 	vmov	s15, r3
}
 8002b86:	eeb0 0a46 	vmov.f32	s0, s12
 8002b8a:	eef0 0a66 	vmov.f32	s1, s13
 8002b8e:	eeb0 1a47 	vmov.f32	s2, s14
 8002b92:	eef0 1a67 	vmov.f32	s3, s15
 8002b96:	3728      	adds	r7, #40	; 0x28
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bc90      	pop	{r4, r7}
 8002b9c:	4770      	bx	lr

08002b9e <FusionAhrsSetHeading>:
 * algorithm.  This function can be used to reset drift in heading when the AHRS
 * algorithm is being used without a magnetometer.
 * @param ahrs AHRS algorithm structure.
 * @param heading Heading angle in degrees.
 */
void FusionAhrsSetHeading(FusionAhrs *const ahrs, const float heading) {
 8002b9e:	b590      	push	{r4, r7, lr}
 8002ba0:	b089      	sub	sp, #36	; 0x24
 8002ba2:	af00      	add	r7, sp, #0
 8002ba4:	6078      	str	r0, [r7, #4]
 8002ba6:	ed87 0a00 	vstr	s0, [r7]
#define Q ahrs->quaternion.element
    const float yaw = atan2f(Q.w * Q.z + Q.x * Q.y, 0.5f - Q.y * Q.y - Q.z * Q.z);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	ed93 7a05 	vldr	s14, [r3, #20]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	edd3 7a08 	vldr	s15, [r3, #32]
 8002bb6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	edd3 6a06 	vldr	s13, [r3, #24]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	edd3 7a07 	vldr	s15, [r3, #28]
 8002bc6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002bca:	ee37 6a27 	vadd.f32	s12, s14, s15
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	ed93 7a07 	vldr	s14, [r3, #28]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	edd3 7a07 	vldr	s15, [r3, #28]
 8002bda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bde:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002be2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	edd3 6a08 	vldr	s13, [r3, #32]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	edd3 7a08 	vldr	s15, [r3, #32]
 8002bf2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002bf6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002bfa:	eef0 0a67 	vmov.f32	s1, s15
 8002bfe:	eeb0 0a46 	vmov.f32	s0, s12
 8002c02:	f010 f9f3 	bl	8012fec <atan2f>
 8002c06:	ed87 0a07 	vstr	s0, [r7, #28]
    const float halfYawMinusHeading = 0.5f * (yaw - FusionDegreesToRadians(heading));
 8002c0a:	ed97 0a00 	vldr	s0, [r7]
 8002c0e:	f7fe fc61 	bl	80014d4 <FusionDegreesToRadians>
 8002c12:	eeb0 7a40 	vmov.f32	s14, s0
 8002c16:	edd7 7a07 	vldr	s15, [r7, #28]
 8002c1a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002c1e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002c22:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c26:	edc7 7a06 	vstr	s15, [r7, #24]
    const FusionQuaternion rotation = {.element = {
            .w = cosf(halfYawMinusHeading),
 8002c2a:	ed97 0a06 	vldr	s0, [r7, #24]
 8002c2e:	f010 fa37 	bl	80130a0 <cosf>
 8002c32:	eef0 7a40 	vmov.f32	s15, s0
    const FusionQuaternion rotation = {.element = {
 8002c36:	edc7 7a02 	vstr	s15, [r7, #8]
 8002c3a:	f04f 0300 	mov.w	r3, #0
 8002c3e:	60fb      	str	r3, [r7, #12]
 8002c40:	f04f 0300 	mov.w	r3, #0
 8002c44:	613b      	str	r3, [r7, #16]
            .x = 0.0f,
            .y = 0.0f,
            .z = -1.0f * sinf(halfYawMinusHeading),
 8002c46:	ed97 0a06 	vldr	s0, [r7, #24]
 8002c4a:	f010 fa75 	bl	8013138 <sinf>
 8002c4e:	eef0 7a40 	vmov.f32	s15, s0
 8002c52:	eef1 7a67 	vneg.f32	s15, s15
    const FusionQuaternion rotation = {.element = {
 8002c56:	edc7 7a05 	vstr	s15, [r7, #20]
    }};
    ahrs->quaternion = FusionQuaternionMultiply(rotation, ahrs->quaternion);
 8002c5a:	687c      	ldr	r4, [r7, #4]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	ed93 4a05 	vldr	s8, [r3, #20]
 8002c62:	edd3 4a06 	vldr	s9, [r3, #24]
 8002c66:	ed93 5a07 	vldr	s10, [r3, #28]
 8002c6a:	edd3 5a08 	vldr	s11, [r3, #32]
 8002c6e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002c72:	edd7 6a03 	vldr	s13, [r7, #12]
 8002c76:	ed97 7a04 	vldr	s14, [r7, #16]
 8002c7a:	edd7 7a05 	vldr	s15, [r7, #20]
 8002c7e:	eeb0 2a44 	vmov.f32	s4, s8
 8002c82:	eef0 2a64 	vmov.f32	s5, s9
 8002c86:	eeb0 3a45 	vmov.f32	s6, s10
 8002c8a:	eef0 3a65 	vmov.f32	s7, s11
 8002c8e:	eeb0 0a46 	vmov.f32	s0, s12
 8002c92:	eef0 0a66 	vmov.f32	s1, s13
 8002c96:	eeb0 1a47 	vmov.f32	s2, s14
 8002c9a:	eef0 1a67 	vmov.f32	s3, s15
 8002c9e:	f7fe fef2 	bl	8001a86 <FusionQuaternionMultiply>
 8002ca2:	eeb0 6a40 	vmov.f32	s12, s0
 8002ca6:	eef0 6a60 	vmov.f32	s13, s1
 8002caa:	eeb0 7a41 	vmov.f32	s14, s2
 8002cae:	eef0 7a61 	vmov.f32	s15, s3
 8002cb2:	ed84 6a05 	vstr	s12, [r4, #20]
 8002cb6:	edc4 6a06 	vstr	s13, [r4, #24]
 8002cba:	ed84 7a07 	vstr	s14, [r4, #28]
 8002cbe:	edc4 7a08 	vstr	s15, [r4, #32]
#undef Q
}
 8002cc2:	bf00      	nop
 8002cc4:	3724      	adds	r7, #36	; 0x24
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd90      	pop	{r4, r7, pc}
	...

08002ccc <FusionRadiansToDegrees>:
static inline float FusionRadiansToDegrees(const float radians) {
 8002ccc:	b480      	push	{r7}
 8002cce:	b083      	sub	sp, #12
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	ed87 0a01 	vstr	s0, [r7, #4]
    return radians * (180.0f / (float) M_PI);
 8002cd6:	edd7 7a01 	vldr	s15, [r7, #4]
 8002cda:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8002cf0 <FusionRadiansToDegrees+0x24>
 8002cde:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8002ce2:	eeb0 0a67 	vmov.f32	s0, s15
 8002ce6:	370c      	adds	r7, #12
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cee:	4770      	bx	lr
 8002cf0:	42652ee0 	.word	0x42652ee0

08002cf4 <FusionFastInverseSqrt>:
static inline float FusionFastInverseSqrt(const float x) {
 8002cf4:	b480      	push	{r7}
 8002cf6:	b085      	sub	sp, #20
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	ed87 0a01 	vstr	s0, [r7, #4]
    Union32 union32 = {.f = x};
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	60fb      	str	r3, [r7, #12]
    union32.i = 0x5F1F1412 - (union32.i >> 1);
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	105a      	asrs	r2, r3, #1
 8002d06:	4b10      	ldr	r3, [pc, #64]	; (8002d48 <FusionFastInverseSqrt+0x54>)
 8002d08:	1a9b      	subs	r3, r3, r2
 8002d0a:	60fb      	str	r3, [r7, #12]
    return union32.f * (1.69000231f - 0.714158168f * x * union32.f * union32.f);
 8002d0c:	ed97 7a03 	vldr	s14, [r7, #12]
 8002d10:	edd7 7a01 	vldr	s15, [r7, #4]
 8002d14:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8002d4c <FusionFastInverseSqrt+0x58>
 8002d18:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002d1c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002d20:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002d24:	edd7 7a03 	vldr	s15, [r7, #12]
 8002d28:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d2c:	eddf 6a08 	vldr	s13, [pc, #32]	; 8002d50 <FusionFastInverseSqrt+0x5c>
 8002d30:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002d34:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8002d38:	eeb0 0a67 	vmov.f32	s0, s15
 8002d3c:	3714      	adds	r7, #20
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d44:	4770      	bx	lr
 8002d46:	bf00      	nop
 8002d48:	5f1f1412 	.word	0x5f1f1412
 8002d4c:	3f36d312 	.word	0x3f36d312
 8002d50:	3fd851ff 	.word	0x3fd851ff

08002d54 <FusionVectorSum>:
static inline float FusionVectorSum(const FusionVector vector) {
 8002d54:	b480      	push	{r7}
 8002d56:	b085      	sub	sp, #20
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	eef0 6a40 	vmov.f32	s13, s0
 8002d5e:	eeb0 7a60 	vmov.f32	s14, s1
 8002d62:	eef0 7a41 	vmov.f32	s15, s2
 8002d66:	edc7 6a01 	vstr	s13, [r7, #4]
 8002d6a:	ed87 7a02 	vstr	s14, [r7, #8]
 8002d6e:	edc7 7a03 	vstr	s15, [r7, #12]
    return vector.axis.x + vector.axis.y + vector.axis.z;
 8002d72:	ed97 7a01 	vldr	s14, [r7, #4]
 8002d76:	edd7 7a02 	vldr	s15, [r7, #8]
 8002d7a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d7e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002d82:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8002d86:	eeb0 0a67 	vmov.f32	s0, s15
 8002d8a:	3714      	adds	r7, #20
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr

08002d94 <FusionVectorMultiplyScalar>:
static inline FusionVector FusionVectorMultiplyScalar(const FusionVector vector, const float scalar) {
 8002d94:	b480      	push	{r7}
 8002d96:	b08f      	sub	sp, #60	; 0x3c
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	eef0 6a40 	vmov.f32	s13, s0
 8002d9e:	eeb0 7a60 	vmov.f32	s14, s1
 8002da2:	eef0 7a41 	vmov.f32	s15, s2
 8002da6:	edc7 1a04 	vstr	s3, [r7, #16]
 8002daa:	edc7 6a05 	vstr	s13, [r7, #20]
 8002dae:	ed87 7a06 	vstr	s14, [r7, #24]
 8002db2:	edc7 7a07 	vstr	s15, [r7, #28]
            .x = vector.axis.x * scalar,
 8002db6:	ed97 7a05 	vldr	s14, [r7, #20]
 8002dba:	edd7 7a04 	vldr	s15, [r7, #16]
 8002dbe:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8002dc2:	edc7 7a08 	vstr	s15, [r7, #32]
            .y = vector.axis.y * scalar,
 8002dc6:	ed97 7a06 	vldr	s14, [r7, #24]
 8002dca:	edd7 7a04 	vldr	s15, [r7, #16]
 8002dce:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8002dd2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            .z = vector.axis.z * scalar,
 8002dd6:	ed97 7a07 	vldr	s14, [r7, #28]
 8002dda:	edd7 7a04 	vldr	s15, [r7, #16]
 8002dde:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8002de2:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    return result;
 8002de6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002dea:	f107 0220 	add.w	r2, r7, #32
 8002dee:	ca07      	ldmia	r2, {r0, r1, r2}
 8002df0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002df4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002df6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002df8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dfa:	ee06 1a90 	vmov	s13, r1
 8002dfe:	ee07 2a10 	vmov	s14, r2
 8002e02:	ee07 3a90 	vmov	s15, r3
}
 8002e06:	eeb0 0a66 	vmov.f32	s0, s13
 8002e0a:	eef0 0a47 	vmov.f32	s1, s14
 8002e0e:	eeb0 1a67 	vmov.f32	s2, s15
 8002e12:	373c      	adds	r7, #60	; 0x3c
 8002e14:	46bd      	mov	sp, r7
 8002e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1a:	4770      	bx	lr

08002e1c <FusionVectorHadamardProduct>:
static inline FusionVector FusionVectorHadamardProduct(const FusionVector vectorA, const FusionVector vectorB) {
 8002e1c:	b480      	push	{r7}
 8002e1e:	b091      	sub	sp, #68	; 0x44
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	eeb0 5a40 	vmov.f32	s10, s0
 8002e26:	eef0 5a60 	vmov.f32	s11, s1
 8002e2a:	eeb0 6a41 	vmov.f32	s12, s2
 8002e2e:	eef0 6a61 	vmov.f32	s13, s3
 8002e32:	eeb0 7a42 	vmov.f32	s14, s4
 8002e36:	eef0 7a62 	vmov.f32	s15, s5
 8002e3a:	ed87 5a07 	vstr	s10, [r7, #28]
 8002e3e:	edc7 5a08 	vstr	s11, [r7, #32]
 8002e42:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 8002e46:	edc7 6a04 	vstr	s13, [r7, #16]
 8002e4a:	ed87 7a05 	vstr	s14, [r7, #20]
 8002e4e:	edc7 7a06 	vstr	s15, [r7, #24]
            .x = vectorA.axis.x * vectorB.axis.x,
 8002e52:	ed97 7a07 	vldr	s14, [r7, #28]
 8002e56:	edd7 7a04 	vldr	s15, [r7, #16]
 8002e5a:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8002e5e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = vectorA.axis.y * vectorB.axis.y,
 8002e62:	ed97 7a08 	vldr	s14, [r7, #32]
 8002e66:	edd7 7a05 	vldr	s15, [r7, #20]
 8002e6a:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8002e6e:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = vectorA.axis.z * vectorB.axis.z,
 8002e72:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002e76:	edd7 7a06 	vldr	s15, [r7, #24]
 8002e7a:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8002e7e:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    return result;
 8002e82:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002e86:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002e8a:	ca07      	ldmia	r2, {r0, r1, r2}
 8002e8c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002e90:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002e92:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002e94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e96:	ee06 1a90 	vmov	s13, r1
 8002e9a:	ee07 2a10 	vmov	s14, r2
 8002e9e:	ee07 3a90 	vmov	s15, r3
}
 8002ea2:	eeb0 0a66 	vmov.f32	s0, s13
 8002ea6:	eef0 0a47 	vmov.f32	s1, s14
 8002eaa:	eeb0 1a67 	vmov.f32	s2, s15
 8002eae:	3744      	adds	r7, #68	; 0x44
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb6:	4770      	bx	lr

08002eb8 <FusionVectorCrossProduct>:
static inline FusionVector FusionVectorCrossProduct(const FusionVector vectorA, const FusionVector vectorB) {
 8002eb8:	b480      	push	{r7}
 8002eba:	b091      	sub	sp, #68	; 0x44
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	eeb0 5a40 	vmov.f32	s10, s0
 8002ec2:	eef0 5a60 	vmov.f32	s11, s1
 8002ec6:	eeb0 6a41 	vmov.f32	s12, s2
 8002eca:	eef0 6a61 	vmov.f32	s13, s3
 8002ece:	eeb0 7a42 	vmov.f32	s14, s4
 8002ed2:	eef0 7a62 	vmov.f32	s15, s5
 8002ed6:	ed87 5a07 	vstr	s10, [r7, #28]
 8002eda:	edc7 5a08 	vstr	s11, [r7, #32]
 8002ede:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 8002ee2:	edc7 6a04 	vstr	s13, [r7, #16]
 8002ee6:	ed87 7a05 	vstr	s14, [r7, #20]
 8002eea:	edc7 7a06 	vstr	s15, [r7, #24]
            .x = A.y * B.z - A.z * B.y,
 8002eee:	ed97 7a08 	vldr	s14, [r7, #32]
 8002ef2:	edd7 7a06 	vldr	s15, [r7, #24]
 8002ef6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002efa:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8002efe:	edd7 7a05 	vldr	s15, [r7, #20]
 8002f02:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f06:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8002f0a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = A.z * B.x - A.x * B.z,
 8002f0e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002f12:	edd7 7a04 	vldr	s15, [r7, #16]
 8002f16:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f1a:	edd7 6a07 	vldr	s13, [r7, #28]
 8002f1e:	edd7 7a06 	vldr	s15, [r7, #24]
 8002f22:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f26:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8002f2a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = A.x * B.y - A.y * B.x,
 8002f2e:	ed97 7a07 	vldr	s14, [r7, #28]
 8002f32:	edd7 7a05 	vldr	s15, [r7, #20]
 8002f36:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f3a:	edd7 6a08 	vldr	s13, [r7, #32]
 8002f3e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002f42:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f46:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8002f4a:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    return result;
 8002f4e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002f52:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002f56:	ca07      	ldmia	r2, {r0, r1, r2}
 8002f58:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002f5c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002f5e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002f60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f62:	ee06 1a90 	vmov	s13, r1
 8002f66:	ee07 2a10 	vmov	s14, r2
 8002f6a:	ee07 3a90 	vmov	s15, r3
}
 8002f6e:	eeb0 0a66 	vmov.f32	s0, s13
 8002f72:	eef0 0a47 	vmov.f32	s1, s14
 8002f76:	eeb0 1a67 	vmov.f32	s2, s15
 8002f7a:	3744      	adds	r7, #68	; 0x44
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f82:	4770      	bx	lr

08002f84 <FusionVectorMagnitudeSquared>:
static inline float FusionVectorMagnitudeSquared(const FusionVector vector) {
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b088      	sub	sp, #32
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	eef0 6a40 	vmov.f32	s13, s0
 8002f8e:	eeb0 7a60 	vmov.f32	s14, s1
 8002f92:	eef0 7a41 	vmov.f32	s15, s2
 8002f96:	edc7 6a01 	vstr	s13, [r7, #4]
 8002f9a:	ed87 7a02 	vstr	s14, [r7, #8]
 8002f9e:	edc7 7a03 	vstr	s15, [r7, #12]
    return FusionVectorSum(FusionVectorHadamardProduct(vector, vector));
 8002fa2:	ed97 5a01 	vldr	s10, [r7, #4]
 8002fa6:	edd7 5a02 	vldr	s11, [r7, #8]
 8002faa:	ed97 6a03 	vldr	s12, [r7, #12]
 8002fae:	edd7 6a01 	vldr	s13, [r7, #4]
 8002fb2:	ed97 7a02 	vldr	s14, [r7, #8]
 8002fb6:	edd7 7a03 	vldr	s15, [r7, #12]
 8002fba:	eef0 1a45 	vmov.f32	s3, s10
 8002fbe:	eeb0 2a65 	vmov.f32	s4, s11
 8002fc2:	eef0 2a46 	vmov.f32	s5, s12
 8002fc6:	eeb0 0a66 	vmov.f32	s0, s13
 8002fca:	eef0 0a47 	vmov.f32	s1, s14
 8002fce:	eeb0 1a67 	vmov.f32	s2, s15
 8002fd2:	f7ff ff23 	bl	8002e1c <FusionVectorHadamardProduct>
 8002fd6:	eef0 6a40 	vmov.f32	s13, s0
 8002fda:	eeb0 7a60 	vmov.f32	s14, s1
 8002fde:	eef0 7a41 	vmov.f32	s15, s2
 8002fe2:	edc7 6a05 	vstr	s13, [r7, #20]
 8002fe6:	ed87 7a06 	vstr	s14, [r7, #24]
 8002fea:	edc7 7a07 	vstr	s15, [r7, #28]
 8002fee:	edd7 6a05 	vldr	s13, [r7, #20]
 8002ff2:	ed97 7a06 	vldr	s14, [r7, #24]
 8002ff6:	edd7 7a07 	vldr	s15, [r7, #28]
 8002ffa:	eeb0 0a66 	vmov.f32	s0, s13
 8002ffe:	eef0 0a47 	vmov.f32	s1, s14
 8003002:	eeb0 1a67 	vmov.f32	s2, s15
 8003006:	f7ff fea5 	bl	8002d54 <FusionVectorSum>
 800300a:	eef0 7a40 	vmov.f32	s15, s0
}
 800300e:	eeb0 0a67 	vmov.f32	s0, s15
 8003012:	3720      	adds	r7, #32
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}

08003018 <FusionVectorNormalise>:
static inline FusionVector FusionVectorNormalise(const FusionVector vector) {
 8003018:	b580      	push	{r7, lr}
 800301a:	b08c      	sub	sp, #48	; 0x30
 800301c:	af00      	add	r7, sp, #0
 800301e:	eef0 6a40 	vmov.f32	s13, s0
 8003022:	eeb0 7a60 	vmov.f32	s14, s1
 8003026:	eef0 7a41 	vmov.f32	s15, s2
 800302a:	edc7 6a05 	vstr	s13, [r7, #20]
 800302e:	ed87 7a06 	vstr	s14, [r7, #24]
 8003032:	edc7 7a07 	vstr	s15, [r7, #28]
    const float magnitudeReciprocal = FusionFastInverseSqrt(FusionVectorMagnitudeSquared(vector));
 8003036:	edd7 6a05 	vldr	s13, [r7, #20]
 800303a:	ed97 7a06 	vldr	s14, [r7, #24]
 800303e:	edd7 7a07 	vldr	s15, [r7, #28]
 8003042:	eeb0 0a66 	vmov.f32	s0, s13
 8003046:	eef0 0a47 	vmov.f32	s1, s14
 800304a:	eeb0 1a67 	vmov.f32	s2, s15
 800304e:	f7ff ff99 	bl	8002f84 <FusionVectorMagnitudeSquared>
 8003052:	eef0 7a40 	vmov.f32	s15, s0
 8003056:	eeb0 0a67 	vmov.f32	s0, s15
 800305a:	f7ff fe4b 	bl	8002cf4 <FusionFastInverseSqrt>
 800305e:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
    return FusionVectorMultiplyScalar(vector, magnitudeReciprocal);
 8003062:	edd7 6a05 	vldr	s13, [r7, #20]
 8003066:	ed97 7a06 	vldr	s14, [r7, #24]
 800306a:	edd7 7a07 	vldr	s15, [r7, #28]
 800306e:	edd7 1a0b 	vldr	s3, [r7, #44]	; 0x2c
 8003072:	eeb0 0a66 	vmov.f32	s0, s13
 8003076:	eef0 0a47 	vmov.f32	s1, s14
 800307a:	eeb0 1a67 	vmov.f32	s2, s15
 800307e:	f7ff fe89 	bl	8002d94 <FusionVectorMultiplyScalar>
 8003082:	eef0 6a40 	vmov.f32	s13, s0
 8003086:	eeb0 7a60 	vmov.f32	s14, s1
 800308a:	eef0 7a41 	vmov.f32	s15, s2
 800308e:	edc7 6a08 	vstr	s13, [r7, #32]
 8003092:	ed87 7a09 	vstr	s14, [r7, #36]	; 0x24
 8003096:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 800309a:	6a39      	ldr	r1, [r7, #32]
 800309c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800309e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030a0:	ee06 1a90 	vmov	s13, r1
 80030a4:	ee07 2a10 	vmov	s14, r2
 80030a8:	ee07 3a90 	vmov	s15, r3
}
 80030ac:	eeb0 0a66 	vmov.f32	s0, s13
 80030b0:	eef0 0a47 	vmov.f32	s1, s14
 80030b4:	eeb0 1a67 	vmov.f32	s2, s15
 80030b8:	3730      	adds	r7, #48	; 0x30
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}
	...

080030c0 <FusionCompassCalculateHeading>:
 * @param convention Earth axes convention.
 * @param accelerometer Accelerometer measurement in any calibrated units.
 * @param magnetometer Magnetometer measurement in any calibrated units.
 * @return Heading angle in degrees.
 */
float FusionCompassCalculateHeading(const FusionConvention convention, const FusionVector accelerometer, const FusionVector magnetometer) {
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b0b2      	sub	sp, #200	; 0xc8
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	4603      	mov	r3, r0
 80030c8:	eeb0 5a40 	vmov.f32	s10, s0
 80030cc:	eef0 5a60 	vmov.f32	s11, s1
 80030d0:	eeb0 6a41 	vmov.f32	s12, s2
 80030d4:	eef0 6a61 	vmov.f32	s13, s3
 80030d8:	eeb0 7a42 	vmov.f32	s14, s4
 80030dc:	eef0 7a62 	vmov.f32	s15, s5
 80030e0:	77fb      	strb	r3, [r7, #31]
 80030e2:	ed87 5a04 	vstr	s10, [r7, #16]
 80030e6:	edc7 5a05 	vstr	s11, [r7, #20]
 80030ea:	ed87 6a06 	vstr	s12, [r7, #24]
 80030ee:	edc7 6a01 	vstr	s13, [r7, #4]
 80030f2:	ed87 7a02 	vstr	s14, [r7, #8]
 80030f6:	edc7 7a03 	vstr	s15, [r7, #12]
    switch (convention) {
 80030fa:	7ffb      	ldrb	r3, [r7, #31]
 80030fc:	2b02      	cmp	r3, #2
 80030fe:	f000 814b 	beq.w	8003398 <FusionCompassCalculateHeading+0x2d8>
 8003102:	2b02      	cmp	r3, #2
 8003104:	f300 81f7 	bgt.w	80034f6 <FusionCompassCalculateHeading+0x436>
 8003108:	2b00      	cmp	r3, #0
 800310a:	d003      	beq.n	8003114 <FusionCompassCalculateHeading+0x54>
 800310c:	2b01      	cmp	r3, #1
 800310e:	f000 8094 	beq.w	800323a <FusionCompassCalculateHeading+0x17a>
 8003112:	e1f0      	b.n	80034f6 <FusionCompassCalculateHeading+0x436>
        case FusionConventionNwu: {
            const FusionVector west = FusionVectorNormalise(FusionVectorCrossProduct(accelerometer, magnetometer));
 8003114:	ed97 5a01 	vldr	s10, [r7, #4]
 8003118:	edd7 5a02 	vldr	s11, [r7, #8]
 800311c:	ed97 6a03 	vldr	s12, [r7, #12]
 8003120:	edd7 6a04 	vldr	s13, [r7, #16]
 8003124:	ed97 7a05 	vldr	s14, [r7, #20]
 8003128:	edd7 7a06 	vldr	s15, [r7, #24]
 800312c:	eef0 1a45 	vmov.f32	s3, s10
 8003130:	eeb0 2a65 	vmov.f32	s4, s11
 8003134:	eef0 2a46 	vmov.f32	s5, s12
 8003138:	eeb0 0a66 	vmov.f32	s0, s13
 800313c:	eef0 0a47 	vmov.f32	s1, s14
 8003140:	eeb0 1a67 	vmov.f32	s2, s15
 8003144:	f7ff feb8 	bl	8002eb8 <FusionVectorCrossProduct>
 8003148:	eef0 6a40 	vmov.f32	s13, s0
 800314c:	eeb0 7a60 	vmov.f32	s14, s1
 8003150:	eef0 7a41 	vmov.f32	s15, s2
 8003154:	edc7 6a20 	vstr	s13, [r7, #128]	; 0x80
 8003158:	ed87 7a21 	vstr	s14, [r7, #132]	; 0x84
 800315c:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
 8003160:	edd7 6a20 	vldr	s13, [r7, #128]	; 0x80
 8003164:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 8003168:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 800316c:	eeb0 0a66 	vmov.f32	s0, s13
 8003170:	eef0 0a47 	vmov.f32	s1, s14
 8003174:	eeb0 1a67 	vmov.f32	s2, s15
 8003178:	f7ff ff4e 	bl	8003018 <FusionVectorNormalise>
 800317c:	eef0 6a40 	vmov.f32	s13, s0
 8003180:	eeb0 7a60 	vmov.f32	s14, s1
 8003184:	eef0 7a41 	vmov.f32	s15, s2
 8003188:	edc7 6a1d 	vstr	s13, [r7, #116]	; 0x74
 800318c:	ed87 7a1e 	vstr	s14, [r7, #120]	; 0x78
 8003190:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
            const FusionVector north = FusionVectorNormalise(FusionVectorCrossProduct(west, accelerometer));
 8003194:	ed97 5a04 	vldr	s10, [r7, #16]
 8003198:	edd7 5a05 	vldr	s11, [r7, #20]
 800319c:	ed97 6a06 	vldr	s12, [r7, #24]
 80031a0:	edd7 6a1d 	vldr	s13, [r7, #116]	; 0x74
 80031a4:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 80031a8:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 80031ac:	eef0 1a45 	vmov.f32	s3, s10
 80031b0:	eeb0 2a65 	vmov.f32	s4, s11
 80031b4:	eef0 2a46 	vmov.f32	s5, s12
 80031b8:	eeb0 0a66 	vmov.f32	s0, s13
 80031bc:	eef0 0a47 	vmov.f32	s1, s14
 80031c0:	eeb0 1a67 	vmov.f32	s2, s15
 80031c4:	f7ff fe78 	bl	8002eb8 <FusionVectorCrossProduct>
 80031c8:	eef0 6a40 	vmov.f32	s13, s0
 80031cc:	eeb0 7a60 	vmov.f32	s14, s1
 80031d0:	eef0 7a41 	vmov.f32	s15, s2
 80031d4:	edc7 6a23 	vstr	s13, [r7, #140]	; 0x8c
 80031d8:	ed87 7a24 	vstr	s14, [r7, #144]	; 0x90
 80031dc:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
 80031e0:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 80031e4:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 80031e8:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 80031ec:	eeb0 0a66 	vmov.f32	s0, s13
 80031f0:	eef0 0a47 	vmov.f32	s1, s14
 80031f4:	eeb0 1a67 	vmov.f32	s2, s15
 80031f8:	f7ff ff0e 	bl	8003018 <FusionVectorNormalise>
 80031fc:	eef0 6a40 	vmov.f32	s13, s0
 8003200:	eeb0 7a60 	vmov.f32	s14, s1
 8003204:	eef0 7a41 	vmov.f32	s15, s2
 8003208:	edc7 6a1a 	vstr	s13, [r7, #104]	; 0x68
 800320c:	ed87 7a1b 	vstr	s14, [r7, #108]	; 0x6c
 8003210:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
            return FusionRadiansToDegrees(atan2f(west.axis.x, north.axis.x));
 8003214:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8003218:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 800321c:	eef0 0a47 	vmov.f32	s1, s14
 8003220:	eeb0 0a67 	vmov.f32	s0, s15
 8003224:	f00f fee2 	bl	8012fec <atan2f>
 8003228:	eef0 7a40 	vmov.f32	s15, s0
 800322c:	eeb0 0a67 	vmov.f32	s0, s15
 8003230:	f7ff fd4c 	bl	8002ccc <FusionRadiansToDegrees>
 8003234:	eef0 7a40 	vmov.f32	s15, s0
 8003238:	e15f      	b.n	80034fa <FusionCompassCalculateHeading+0x43a>
        }
        case FusionConventionEnu: {
            const FusionVector west = FusionVectorNormalise(FusionVectorCrossProduct(accelerometer, magnetometer));
 800323a:	ed97 5a01 	vldr	s10, [r7, #4]
 800323e:	edd7 5a02 	vldr	s11, [r7, #8]
 8003242:	ed97 6a03 	vldr	s12, [r7, #12]
 8003246:	edd7 6a04 	vldr	s13, [r7, #16]
 800324a:	ed97 7a05 	vldr	s14, [r7, #20]
 800324e:	edd7 7a06 	vldr	s15, [r7, #24]
 8003252:	eef0 1a45 	vmov.f32	s3, s10
 8003256:	eeb0 2a65 	vmov.f32	s4, s11
 800325a:	eef0 2a46 	vmov.f32	s5, s12
 800325e:	eeb0 0a66 	vmov.f32	s0, s13
 8003262:	eef0 0a47 	vmov.f32	s1, s14
 8003266:	eeb0 1a67 	vmov.f32	s2, s15
 800326a:	f7ff fe25 	bl	8002eb8 <FusionVectorCrossProduct>
 800326e:	eef0 6a40 	vmov.f32	s13, s0
 8003272:	eeb0 7a60 	vmov.f32	s14, s1
 8003276:	eef0 7a41 	vmov.f32	s15, s2
 800327a:	edc7 6a26 	vstr	s13, [r7, #152]	; 0x98
 800327e:	ed87 7a27 	vstr	s14, [r7, #156]	; 0x9c
 8003282:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
 8003286:	edd7 6a26 	vldr	s13, [r7, #152]	; 0x98
 800328a:	ed97 7a27 	vldr	s14, [r7, #156]	; 0x9c
 800328e:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8003292:	eeb0 0a66 	vmov.f32	s0, s13
 8003296:	eef0 0a47 	vmov.f32	s1, s14
 800329a:	eeb0 1a67 	vmov.f32	s2, s15
 800329e:	f7ff febb 	bl	8003018 <FusionVectorNormalise>
 80032a2:	eef0 6a40 	vmov.f32	s13, s0
 80032a6:	eeb0 7a60 	vmov.f32	s14, s1
 80032aa:	eef0 7a41 	vmov.f32	s15, s2
 80032ae:	edc7 6a17 	vstr	s13, [r7, #92]	; 0x5c
 80032b2:	ed87 7a18 	vstr	s14, [r7, #96]	; 0x60
 80032b6:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
            const FusionVector north = FusionVectorNormalise(FusionVectorCrossProduct(west, accelerometer));
 80032ba:	ed97 5a04 	vldr	s10, [r7, #16]
 80032be:	edd7 5a05 	vldr	s11, [r7, #20]
 80032c2:	ed97 6a06 	vldr	s12, [r7, #24]
 80032c6:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 80032ca:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80032ce:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80032d2:	eef0 1a45 	vmov.f32	s3, s10
 80032d6:	eeb0 2a65 	vmov.f32	s4, s11
 80032da:	eef0 2a46 	vmov.f32	s5, s12
 80032de:	eeb0 0a66 	vmov.f32	s0, s13
 80032e2:	eef0 0a47 	vmov.f32	s1, s14
 80032e6:	eeb0 1a67 	vmov.f32	s2, s15
 80032ea:	f7ff fde5 	bl	8002eb8 <FusionVectorCrossProduct>
 80032ee:	eef0 6a40 	vmov.f32	s13, s0
 80032f2:	eeb0 7a60 	vmov.f32	s14, s1
 80032f6:	eef0 7a41 	vmov.f32	s15, s2
 80032fa:	edc7 6a29 	vstr	s13, [r7, #164]	; 0xa4
 80032fe:	ed87 7a2a 	vstr	s14, [r7, #168]	; 0xa8
 8003302:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
 8003306:	edd7 6a29 	vldr	s13, [r7, #164]	; 0xa4
 800330a:	ed97 7a2a 	vldr	s14, [r7, #168]	; 0xa8
 800330e:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8003312:	eeb0 0a66 	vmov.f32	s0, s13
 8003316:	eef0 0a47 	vmov.f32	s1, s14
 800331a:	eeb0 1a67 	vmov.f32	s2, s15
 800331e:	f7ff fe7b 	bl	8003018 <FusionVectorNormalise>
 8003322:	eef0 6a40 	vmov.f32	s13, s0
 8003326:	eeb0 7a60 	vmov.f32	s14, s1
 800332a:	eef0 7a41 	vmov.f32	s15, s2
 800332e:	edc7 6a14 	vstr	s13, [r7, #80]	; 0x50
 8003332:	ed87 7a15 	vstr	s14, [r7, #84]	; 0x54
 8003336:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
            const FusionVector east = FusionVectorMultiplyScalar(west, -1.0f);
 800333a:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 800333e:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8003342:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8003346:	eeff 1a00 	vmov.f32	s3, #240	; 0xbf800000 -1.0
 800334a:	eeb0 0a66 	vmov.f32	s0, s13
 800334e:	eef0 0a47 	vmov.f32	s1, s14
 8003352:	eeb0 1a67 	vmov.f32	s2, s15
 8003356:	f7ff fd1d 	bl	8002d94 <FusionVectorMultiplyScalar>
 800335a:	eef0 6a40 	vmov.f32	s13, s0
 800335e:	eeb0 7a60 	vmov.f32	s14, s1
 8003362:	eef0 7a41 	vmov.f32	s15, s2
 8003366:	edc7 6a11 	vstr	s13, [r7, #68]	; 0x44
 800336a:	ed87 7a12 	vstr	s14, [r7, #72]	; 0x48
 800336e:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
            return FusionRadiansToDegrees(atan2f(north.axis.x, east.axis.x));
 8003372:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8003376:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800337a:	eef0 0a47 	vmov.f32	s1, s14
 800337e:	eeb0 0a67 	vmov.f32	s0, s15
 8003382:	f00f fe33 	bl	8012fec <atan2f>
 8003386:	eef0 7a40 	vmov.f32	s15, s0
 800338a:	eeb0 0a67 	vmov.f32	s0, s15
 800338e:	f7ff fc9d 	bl	8002ccc <FusionRadiansToDegrees>
 8003392:	eef0 7a40 	vmov.f32	s15, s0
 8003396:	e0b0      	b.n	80034fa <FusionCompassCalculateHeading+0x43a>
        }
        case FusionConventionNed: {
            const FusionVector up = FusionVectorMultiplyScalar(accelerometer, -1.0f);
 8003398:	edd7 6a04 	vldr	s13, [r7, #16]
 800339c:	ed97 7a05 	vldr	s14, [r7, #20]
 80033a0:	edd7 7a06 	vldr	s15, [r7, #24]
 80033a4:	eeff 1a00 	vmov.f32	s3, #240	; 0xbf800000 -1.0
 80033a8:	eeb0 0a66 	vmov.f32	s0, s13
 80033ac:	eef0 0a47 	vmov.f32	s1, s14
 80033b0:	eeb0 1a67 	vmov.f32	s2, s15
 80033b4:	f7ff fcee 	bl	8002d94 <FusionVectorMultiplyScalar>
 80033b8:	eef0 6a40 	vmov.f32	s13, s0
 80033bc:	eeb0 7a60 	vmov.f32	s14, s1
 80033c0:	eef0 7a41 	vmov.f32	s15, s2
 80033c4:	edc7 6a0e 	vstr	s13, [r7, #56]	; 0x38
 80033c8:	ed87 7a0f 	vstr	s14, [r7, #60]	; 0x3c
 80033cc:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
            const FusionVector west = FusionVectorNormalise(FusionVectorCrossProduct(up, magnetometer));
 80033d0:	ed97 5a01 	vldr	s10, [r7, #4]
 80033d4:	edd7 5a02 	vldr	s11, [r7, #8]
 80033d8:	ed97 6a03 	vldr	s12, [r7, #12]
 80033dc:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 80033e0:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80033e4:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80033e8:	eef0 1a45 	vmov.f32	s3, s10
 80033ec:	eeb0 2a65 	vmov.f32	s4, s11
 80033f0:	eef0 2a46 	vmov.f32	s5, s12
 80033f4:	eeb0 0a66 	vmov.f32	s0, s13
 80033f8:	eef0 0a47 	vmov.f32	s1, s14
 80033fc:	eeb0 1a67 	vmov.f32	s2, s15
 8003400:	f7ff fd5a 	bl	8002eb8 <FusionVectorCrossProduct>
 8003404:	eef0 6a40 	vmov.f32	s13, s0
 8003408:	eeb0 7a60 	vmov.f32	s14, s1
 800340c:	eef0 7a41 	vmov.f32	s15, s2
 8003410:	edc7 6a2c 	vstr	s13, [r7, #176]	; 0xb0
 8003414:	ed87 7a2d 	vstr	s14, [r7, #180]	; 0xb4
 8003418:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
 800341c:	edd7 6a2c 	vldr	s13, [r7, #176]	; 0xb0
 8003420:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8003424:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8003428:	eeb0 0a66 	vmov.f32	s0, s13
 800342c:	eef0 0a47 	vmov.f32	s1, s14
 8003430:	eeb0 1a67 	vmov.f32	s2, s15
 8003434:	f7ff fdf0 	bl	8003018 <FusionVectorNormalise>
 8003438:	eef0 6a40 	vmov.f32	s13, s0
 800343c:	eeb0 7a60 	vmov.f32	s14, s1
 8003440:	eef0 7a41 	vmov.f32	s15, s2
 8003444:	edc7 6a0b 	vstr	s13, [r7, #44]	; 0x2c
 8003448:	ed87 7a0c 	vstr	s14, [r7, #48]	; 0x30
 800344c:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
            const FusionVector north = FusionVectorNormalise(FusionVectorCrossProduct(west, up));
 8003450:	ed97 5a0e 	vldr	s10, [r7, #56]	; 0x38
 8003454:	edd7 5a0f 	vldr	s11, [r7, #60]	; 0x3c
 8003458:	ed97 6a10 	vldr	s12, [r7, #64]	; 0x40
 800345c:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8003460:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8003464:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8003468:	eef0 1a45 	vmov.f32	s3, s10
 800346c:	eeb0 2a65 	vmov.f32	s4, s11
 8003470:	eef0 2a46 	vmov.f32	s5, s12
 8003474:	eeb0 0a66 	vmov.f32	s0, s13
 8003478:	eef0 0a47 	vmov.f32	s1, s14
 800347c:	eeb0 1a67 	vmov.f32	s2, s15
 8003480:	f7ff fd1a 	bl	8002eb8 <FusionVectorCrossProduct>
 8003484:	eef0 6a40 	vmov.f32	s13, s0
 8003488:	eeb0 7a60 	vmov.f32	s14, s1
 800348c:	eef0 7a41 	vmov.f32	s15, s2
 8003490:	edc7 6a2f 	vstr	s13, [r7, #188]	; 0xbc
 8003494:	ed87 7a30 	vstr	s14, [r7, #192]	; 0xc0
 8003498:	edc7 7a31 	vstr	s15, [r7, #196]	; 0xc4
 800349c:	edd7 6a2f 	vldr	s13, [r7, #188]	; 0xbc
 80034a0:	ed97 7a30 	vldr	s14, [r7, #192]	; 0xc0
 80034a4:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 80034a8:	eeb0 0a66 	vmov.f32	s0, s13
 80034ac:	eef0 0a47 	vmov.f32	s1, s14
 80034b0:	eeb0 1a67 	vmov.f32	s2, s15
 80034b4:	f7ff fdb0 	bl	8003018 <FusionVectorNormalise>
 80034b8:	eef0 6a40 	vmov.f32	s13, s0
 80034bc:	eeb0 7a60 	vmov.f32	s14, s1
 80034c0:	eef0 7a41 	vmov.f32	s15, s2
 80034c4:	edc7 6a08 	vstr	s13, [r7, #32]
 80034c8:	ed87 7a09 	vstr	s14, [r7, #36]	; 0x24
 80034cc:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            return FusionRadiansToDegrees(atan2f(west.axis.x, north.axis.x));
 80034d0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80034d4:	ed97 7a08 	vldr	s14, [r7, #32]
 80034d8:	eef0 0a47 	vmov.f32	s1, s14
 80034dc:	eeb0 0a67 	vmov.f32	s0, s15
 80034e0:	f00f fd84 	bl	8012fec <atan2f>
 80034e4:	eef0 7a40 	vmov.f32	s15, s0
 80034e8:	eeb0 0a67 	vmov.f32	s0, s15
 80034ec:	f7ff fbee 	bl	8002ccc <FusionRadiansToDegrees>
 80034f0:	eef0 7a40 	vmov.f32	s15, s0
 80034f4:	e001      	b.n	80034fa <FusionCompassCalculateHeading+0x43a>
        }
    }
    return 0; // avoid compiler warning
 80034f6:	eddf 7a03 	vldr	s15, [pc, #12]	; 8003504 <FusionCompassCalculateHeading+0x444>
}
 80034fa:	eeb0 0a67 	vmov.f32	s0, s15
 80034fe:	37c8      	adds	r7, #200	; 0xc8
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}
 8003504:	00000000 	.word	0x00000000

08003508 <FusionOffsetInitialise>:
/**
 * @brief Initialises the gyroscope offset algorithm.
 * @param offset Gyroscope offset algorithm structure.
 * @param sampleRate Sample rate in Hz.
 */
void FusionOffsetInitialise(FusionOffset *const offset, const unsigned int sampleRate) {
 8003508:	b480      	push	{r7}
 800350a:	b087      	sub	sp, #28
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
 8003510:	6039      	str	r1, [r7, #0]
    offset->filterCoefficient = 2.0f * (float) M_PI * CUTOFF_FREQUENCY * (1.0f / (float) sampleRate);
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	ee07 3a90 	vmov	s15, r3
 8003518:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800351c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003520:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003524:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8003568 <FusionOffsetInitialise+0x60>
 8003528:	ee67 7a87 	vmul.f32	s15, s15, s14
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	edc3 7a00 	vstr	s15, [r3]
    offset->timeout = TIMEOUT * sampleRate;
 8003532:	683a      	ldr	r2, [r7, #0]
 8003534:	4613      	mov	r3, r2
 8003536:	009b      	lsls	r3, r3, #2
 8003538:	441a      	add	r2, r3
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	605a      	str	r2, [r3, #4]
    offset->timer = 0;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2200      	movs	r2, #0
 8003542:	609a      	str	r2, [r3, #8]
    offset->gyroscopeOffset = FUSION_VECTOR_ZERO;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	f04f 0200 	mov.w	r2, #0
 800354a:	60da      	str	r2, [r3, #12]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	f04f 0200 	mov.w	r2, #0
 8003552:	611a      	str	r2, [r3, #16]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	f04f 0200 	mov.w	r2, #0
 800355a:	615a      	str	r2, [r3, #20]
}
 800355c:	bf00      	nop
 800355e:	371c      	adds	r7, #28
 8003560:	46bd      	mov	sp, r7
 8003562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003566:	4770      	bx	lr
 8003568:	3e00adfd 	.word	0x3e00adfd

0800356c <GetPage>:




static uint32_t GetPage(uint32_t Address)
{
 800356c:	b480      	push	{r7}
 800356e:	b085      	sub	sp, #20
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  for (int indx=0; indx<256; indx++)
 8003574:	2300      	movs	r3, #0
 8003576:	60fb      	str	r3, [r7, #12]
 8003578:	e016      	b.n	80035a8 <GetPage+0x3c>
  {
	  if((Address < (FLASH_BASE + (FLASH_PAGE_SIZE *(indx+1))) ) && (Address >= (FLASH_BASE + FLASH_PAGE_SIZE*indx)))
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8003580:	3301      	adds	r3, #1
 8003582:	031b      	lsls	r3, r3, #12
 8003584:	687a      	ldr	r2, [r7, #4]
 8003586:	429a      	cmp	r2, r3
 8003588:	d20b      	bcs.n	80035a2 <GetPage+0x36>
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8003590:	031b      	lsls	r3, r3, #12
 8003592:	687a      	ldr	r2, [r7, #4]
 8003594:	429a      	cmp	r2, r3
 8003596:	d304      	bcc.n	80035a2 <GetPage+0x36>
	  {
		  return (FLASH_BASE + FLASH_PAGE_SIZE*indx);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800359e:	031b      	lsls	r3, r3, #12
 80035a0:	e006      	b.n	80035b0 <GetPage+0x44>
  for (int indx=0; indx<256; indx++)
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	3301      	adds	r3, #1
 80035a6:	60fb      	str	r3, [r7, #12]
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	2bff      	cmp	r3, #255	; 0xff
 80035ac:	dde5      	ble.n	800357a <GetPage+0xe>
	  }
  }
  return 0;
 80035ae:	2300      	movs	r3, #0
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	3714      	adds	r7, #20
 80035b4:	46bd      	mov	sp, r7
 80035b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ba:	4770      	bx	lr

080035bc <FlashReadData>:
}



void FlashReadData (uint32_t StartPageAddress, uint64_t *RxBuf, uint16_t numberofwords)
{
 80035bc:	b480      	push	{r7}
 80035be:	b085      	sub	sp, #20
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	60f8      	str	r0, [r7, #12]
 80035c4:	60b9      	str	r1, [r7, #8]
 80035c6:	4613      	mov	r3, r2
 80035c8:	80fb      	strh	r3, [r7, #6]
	while (1)
	{

		*RxBuf = *(__IO uint64_t *)StartPageAddress;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035d0:	68b9      	ldr	r1, [r7, #8]
 80035d2:	e9c1 2300 	strd	r2, r3, [r1]
		StartPageAddress += 8;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	3308      	adds	r3, #8
 80035da:	60fb      	str	r3, [r7, #12]
		RxBuf++;
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	3308      	adds	r3, #8
 80035e0:	60bb      	str	r3, [r7, #8]
		if (!(numberofwords--)){
 80035e2:	88fb      	ldrh	r3, [r7, #6]
 80035e4:	1e5a      	subs	r2, r3, #1
 80035e6:	80fa      	strh	r2, [r7, #6]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d000      	beq.n	80035ee <FlashReadData+0x32>
		*RxBuf = *(__IO uint64_t *)StartPageAddress;
 80035ec:	e7ed      	b.n	80035ca <FlashReadData+0xe>
			break;
 80035ee:	bf00      	nop
		}
	}
}
 80035f0:	bf00      	nop
 80035f2:	3714      	adds	r7, #20
 80035f4:	46bd      	mov	sp, r7
 80035f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fa:	4770      	bx	lr

080035fc <FlashWriteData>:


uint32_t FlashWriteData (uint32_t StartPageAddress, uint64_t *Data, uint16_t numberofwords)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b08a      	sub	sp, #40	; 0x28
 8003600:	af00      	add	r7, sp, #0
 8003602:	60f8      	str	r0, [r7, #12]
 8003604:	60b9      	str	r1, [r7, #8]
 8003606:	4613      	mov	r3, r2
 8003608:	80fb      	strh	r3, [r7, #6]
	static FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t PAGEError;
	int sofar=0;
 800360a:	2300      	movs	r3, #0
 800360c:	627b      	str	r3, [r7, #36]	; 0x24

	  /* Unlock the Flash to enable the flash control register access *************/
	   HAL_FLASH_Unlock();
 800360e:	f003 f8e3 	bl	80067d8 <HAL_FLASH_Unlock>

	   /* Erase the user Flash area*/

	  uint32_t StartPage = GetPage(StartPageAddress);
 8003612:	68f8      	ldr	r0, [r7, #12]
 8003614:	f7ff ffaa 	bl	800356c <GetPage>
 8003618:	6238      	str	r0, [r7, #32]
	  uint32_t EndPageAdress = StartPageAddress + numberofwords * 8;
 800361a:	88fb      	ldrh	r3, [r7, #6]
 800361c:	00db      	lsls	r3, r3, #3
 800361e:	461a      	mov	r2, r3
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	4413      	add	r3, r2
 8003624:	61fb      	str	r3, [r7, #28]
	  uint32_t EndPage = GetPage(EndPageAdress);
 8003626:	69f8      	ldr	r0, [r7, #28]
 8003628:	f7ff ffa0 	bl	800356c <GetPage>
 800362c:	61b8      	str	r0, [r7, #24]

	   /* Fill EraseInit structure*/
	   EraseInitStruct.Banks = FLASH_BANK_2;
 800362e:	4b26      	ldr	r3, [pc, #152]	; (80036c8 <FlashWriteData+0xcc>)
 8003630:	2202      	movs	r2, #2
 8003632:	605a      	str	r2, [r3, #4]
	   EraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;
 8003634:	4b24      	ldr	r3, [pc, #144]	; (80036c8 <FlashWriteData+0xcc>)
 8003636:	2200      	movs	r2, #0
 8003638:	601a      	str	r2, [r3, #0]
	   EraseInitStruct.Page = ((StartPage - FLASH_BASE) / FLASH_PAGE_SIZE) + 1;
 800363a:	6a3b      	ldr	r3, [r7, #32]
 800363c:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8003640:	0b1b      	lsrs	r3, r3, #12
 8003642:	3301      	adds	r3, #1
 8003644:	4a20      	ldr	r2, [pc, #128]	; (80036c8 <FlashWriteData+0xcc>)
 8003646:	6093      	str	r3, [r2, #8]
	   EraseInitStruct.NbPages = ((EndPage - StartPage)/FLASH_PAGE_SIZE) + 1;
 8003648:	69ba      	ldr	r2, [r7, #24]
 800364a:	6a3b      	ldr	r3, [r7, #32]
 800364c:	1ad3      	subs	r3, r2, r3
 800364e:	0b1b      	lsrs	r3, r3, #12
 8003650:	3301      	adds	r3, #1
 8003652:	4a1d      	ldr	r2, [pc, #116]	; (80036c8 <FlashWriteData+0xcc>)
 8003654:	60d3      	str	r3, [r2, #12]

	   if (HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) != HAL_OK)
 8003656:	f107 0314 	add.w	r3, r7, #20
 800365a:	4619      	mov	r1, r3
 800365c:	481a      	ldr	r0, [pc, #104]	; (80036c8 <FlashWriteData+0xcc>)
 800365e:	f003 f9ad 	bl	80069bc <HAL_FLASHEx_Erase>
 8003662:	4603      	mov	r3, r0
 8003664:	2b00      	cmp	r3, #0
 8003666:	d023      	beq.n	80036b0 <FlashWriteData+0xb4>
	   {
	     /*Error occurred while page erase.*/
		   uart_write_debug("Failed to erase flash\r\n",UART_NYX);
 8003668:	2101      	movs	r1, #1
 800366a:	4818      	ldr	r0, [pc, #96]	; (80036cc <FlashWriteData+0xd0>)
 800366c:	f002 fcbc 	bl	8005fe8 <uart_write_debug>
		  return HAL_FLASH_GetError ();
 8003670:	f003 f8e4 	bl	800683c <HAL_FLASH_GetError>
 8003674:	4603      	mov	r3, r0
 8003676:	e022      	b.n	80036be <FlashWriteData+0xc2>

	   /* Program the user Flash area word by word*/

	   while (sofar<numberofwords)
	   {
	     if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, StartPageAddress, Data[sofar]) == HAL_OK)
 8003678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800367a:	00db      	lsls	r3, r3, #3
 800367c:	68ba      	ldr	r2, [r7, #8]
 800367e:	4413      	add	r3, r2
 8003680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003684:	68f9      	ldr	r1, [r7, #12]
 8003686:	2000      	movs	r0, #0
 8003688:	f003 f83a 	bl	8006700 <HAL_FLASH_Program>
 800368c:	4603      	mov	r3, r0
 800368e:	2b00      	cmp	r3, #0
 8003690:	d106      	bne.n	80036a0 <FlashWriteData+0xa4>
	     {
	    	 StartPageAddress += 8;  // use StartPageAddress += 2 for half word and 8 for double word
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	3308      	adds	r3, #8
 8003696:	60fb      	str	r3, [r7, #12]
	    	 sofar++;
 8003698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800369a:	3301      	adds	r3, #1
 800369c:	627b      	str	r3, [r7, #36]	; 0x24
 800369e:	e007      	b.n	80036b0 <FlashWriteData+0xb4>
	     }
	     else
	     {
	       /* Error occurred while writing data in Flash memory*/
	    	 uart_write_debug("Failed to write flash\r\n",UART_NYX);
 80036a0:	2101      	movs	r1, #1
 80036a2:	480b      	ldr	r0, [pc, #44]	; (80036d0 <FlashWriteData+0xd4>)
 80036a4:	f002 fca0 	bl	8005fe8 <uart_write_debug>
	    	 return HAL_FLASH_GetError ();
 80036a8:	f003 f8c8 	bl	800683c <HAL_FLASH_GetError>
 80036ac:	4603      	mov	r3, r0
 80036ae:	e006      	b.n	80036be <FlashWriteData+0xc2>
	   while (sofar<numberofwords)
 80036b0:	88fb      	ldrh	r3, [r7, #6]
 80036b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036b4:	429a      	cmp	r2, r3
 80036b6:	dbdf      	blt.n	8003678 <FlashWriteData+0x7c>
	     }
	   }

	   /* Lock the Flash to disable the flash control register access (recommended
	      to protect the FLASH memory against possible unwanted operation) *********/
	   HAL_FLASH_Lock();
 80036b8:	f003 f8b0 	bl	800681c <HAL_FLASH_Lock>
	   return 0;
 80036bc:	2300      	movs	r3, #0
}
 80036be:	4618      	mov	r0, r3
 80036c0:	3728      	adds	r7, #40	; 0x28
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}
 80036c6:	bf00      	nop
 80036c8:	200002e0 	.word	0x200002e0
 80036cc:	08014698 	.word	0x08014698
 80036d0:	080146b0 	.word	0x080146b0

080036d4 <Flash_Write_CalTable>:
	return value;
}


uint32_t Flash_Write_CalTable (uint32_t StartSectorAddress, gyro_data_t *data)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b08c      	sub	sp, #48	; 0x30
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
 80036dc:	6039      	str	r1, [r7, #0]
	uint32_t res;
	float temp[3] = {0.0f};
 80036de:	f107 031c 	add.w	r3, r7, #28
 80036e2:	2200      	movs	r2, #0
 80036e4:	601a      	str	r2, [r3, #0]
 80036e6:	605a      	str	r2, [r3, #4]
 80036e8:	609a      	str	r2, [r3, #8]
	temp[0] = data->gyro_x;
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	61fb      	str	r3, [r7, #28]
	temp[1] = data->gyro_y;
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	623b      	str	r3, [r7, #32]
	temp[2] = data->gyro_z;
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t bytes_temp[12] = {0};
 80036fc:	2300      	movs	r3, #0
 80036fe:	613b      	str	r3, [r7, #16]
 8003700:	f107 0314 	add.w	r3, r7, #20
 8003704:	2200      	movs	r2, #0
 8003706:	601a      	str	r2, [r3, #0]
 8003708:	605a      	str	r2, [r3, #4]
	union {
	  float a;
	  uint8_t bytes[4];
	} thing;

	uint8_t j,v=0;
 800370a:	2300      	movs	r3, #0
 800370c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	for (uint8_t i = 0; i < 3; i++){
 8003710:	2300      	movs	r3, #0
 8003712:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8003716:	e02d      	b.n	8003774 <Flash_Write_CalTable+0xa0>
		thing.a = temp[i];
 8003718:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800371c:	009b      	lsls	r3, r3, #2
 800371e:	3330      	adds	r3, #48	; 0x30
 8003720:	443b      	add	r3, r7
 8003722:	3b14      	subs	r3, #20
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	60fb      	str	r3, [r7, #12]

		for (j = 0; j < 4; j++) {
 8003728:	2300      	movs	r3, #0
 800372a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800372e:	e013      	b.n	8003758 <Flash_Write_CalTable+0x84>
		  bytes_temp[v+j] = thing.bytes[j];
 8003730:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8003734:	f897 102e 	ldrb.w	r1, [r7, #46]	; 0x2e
 8003738:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800373c:	440b      	add	r3, r1
 800373e:	3230      	adds	r2, #48	; 0x30
 8003740:	443a      	add	r2, r7
 8003742:	f812 2c24 	ldrb.w	r2, [r2, #-36]
 8003746:	3330      	adds	r3, #48	; 0x30
 8003748:	443b      	add	r3, r7
 800374a:	f803 2c20 	strb.w	r2, [r3, #-32]
		for (j = 0; j < 4; j++) {
 800374e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003752:	3301      	adds	r3, #1
 8003754:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8003758:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800375c:	2b03      	cmp	r3, #3
 800375e:	d9e7      	bls.n	8003730 <Flash_Write_CalTable+0x5c>
		}
		v+=4;
 8003760:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003764:	3304      	adds	r3, #4
 8003766:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	for (uint8_t i = 0; i < 3; i++){
 800376a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800376e:	3301      	adds	r3, #1
 8003770:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8003774:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003778:	2b02      	cmp	r3, #2
 800377a:	d9cd      	bls.n	8003718 <Flash_Write_CalTable+0x44>
	}
	res = FlashWriteData (StartSectorAddress, (uint64_t *)bytes_temp, 3);
 800377c:	f107 0310 	add.w	r3, r7, #16
 8003780:	2203      	movs	r2, #3
 8003782:	4619      	mov	r1, r3
 8003784:	6878      	ldr	r0, [r7, #4]
 8003786:	f7ff ff39 	bl	80035fc <FlashWriteData>
 800378a:	62b8      	str	r0, [r7, #40]	; 0x28
	return res;
 800378c:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800378e:	4618      	mov	r0, r3
 8003790:	3730      	adds	r7, #48	; 0x30
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}

08003796 <Flash_Read_CalTable>:

void Flash_Read_CalTable (uint32_t StartSectorAddress, gyro_data_t *data)
{
 8003796:	b580      	push	{r7, lr}
 8003798:	b08c      	sub	sp, #48	; 0x30
 800379a:	af00      	add	r7, sp, #0
 800379c:	6078      	str	r0, [r7, #4]
 800379e:	6039      	str	r1, [r7, #0]
	uint8_t buffer[20] = {0};
 80037a0:	2300      	movs	r3, #0
 80037a2:	61bb      	str	r3, [r7, #24]
 80037a4:	f107 031c 	add.w	r3, r7, #28
 80037a8:	2200      	movs	r2, #0
 80037aa:	601a      	str	r2, [r3, #0]
 80037ac:	605a      	str	r2, [r3, #4]
 80037ae:	609a      	str	r2, [r3, #8]
 80037b0:	60da      	str	r2, [r3, #12]
	float temp[3] = {0.0f};
 80037b2:	f107 030c 	add.w	r3, r7, #12
 80037b6:	2200      	movs	r2, #0
 80037b8:	601a      	str	r2, [r3, #0]
 80037ba:	605a      	str	r2, [r3, #4]
 80037bc:	609a      	str	r2, [r3, #8]

	FlashReadData(StartSectorAddress, (uint64_t *)buffer, 2);
 80037be:	f107 0318 	add.w	r3, r7, #24
 80037c2:	2202      	movs	r2, #2
 80037c4:	4619      	mov	r1, r3
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	f7ff fef8 	bl	80035bc <FlashReadData>
	union {
	  float a;
	  uint8_t bytes[4];
	} thing;

	uint8_t v=0;
 80037cc:	2300      	movs	r3, #0
 80037ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	for (uint8_t j = 0; j < 3; j++){
 80037d2:	2300      	movs	r3, #0
 80037d4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80037d8:	e02d      	b.n	8003836 <Flash_Read_CalTable+0xa0>
		for (uint8_t i = 0; i < 4; i++) {
 80037da:	2300      	movs	r3, #0
 80037dc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 80037e0:	e013      	b.n	800380a <Flash_Read_CalTable+0x74>
			thing.bytes[i] = buffer[v+i];
 80037e2:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80037e6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80037ea:	441a      	add	r2, r3
 80037ec:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80037f0:	3230      	adds	r2, #48	; 0x30
 80037f2:	443a      	add	r2, r7
 80037f4:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 80037f8:	3330      	adds	r3, #48	; 0x30
 80037fa:	443b      	add	r3, r7
 80037fc:	f803 2c28 	strb.w	r2, [r3, #-40]
		for (uint8_t i = 0; i < 4; i++) {
 8003800:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003804:	3301      	adds	r3, #1
 8003806:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 800380a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800380e:	2b03      	cmp	r3, #3
 8003810:	d9e7      	bls.n	80037e2 <Flash_Read_CalTable+0x4c>
		}
		v+=4;
 8003812:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003816:	3304      	adds	r3, #4
 8003818:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		temp[j] =  thing.a;
 800381c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003820:	68ba      	ldr	r2, [r7, #8]
 8003822:	009b      	lsls	r3, r3, #2
 8003824:	3330      	adds	r3, #48	; 0x30
 8003826:	443b      	add	r3, r7
 8003828:	3b24      	subs	r3, #36	; 0x24
 800382a:	601a      	str	r2, [r3, #0]
	for (uint8_t j = 0; j < 3; j++){
 800382c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003830:	3301      	adds	r3, #1
 8003832:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8003836:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800383a:	2b02      	cmp	r3, #2
 800383c:	d9cd      	bls.n	80037da <Flash_Read_CalTable+0x44>
	}
	data->gyro_x = temp[0];
 800383e:	68fa      	ldr	r2, [r7, #12]
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	601a      	str	r2, [r3, #0]
	data->gyro_y = temp[1];
 8003844:	693a      	ldr	r2, [r7, #16]
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	605a      	str	r2, [r3, #4]
	data->gyro_z = temp[2];
 800384a:	697a      	ldr	r2, [r7, #20]
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	609a      	str	r2, [r3, #8]
}
 8003850:	bf00      	nop
 8003852:	3730      	adds	r7, #48	; 0x30
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}

08003858 <ublox_i2c_bus_init>:
static uint8_t gps_loss_count = 0;

uint8_t gps_data_backup_flag = 0;   //Flag to enable gps data backup only on boot.


uint8_t ublox_i2c_bus_init(void){
 8003858:	b580      	push	{r7, lr}
 800385a:	af00      	add	r7, sp, #0
	hi2c1.Instance = I2C1;
 800385c:	4b1b      	ldr	r3, [pc, #108]	; (80038cc <ublox_i2c_bus_init+0x74>)
 800385e:	4a1c      	ldr	r2, [pc, #112]	; (80038d0 <ublox_i2c_bus_init+0x78>)
 8003860:	601a      	str	r2, [r3, #0]
//	hi2c1.Init.Timing = 0x00B03FDB; 400KB i2c speed
	hi2c1.Init.Timing = 0x307075B1;	//100KB i2c speed
 8003862:	4b1a      	ldr	r3, [pc, #104]	; (80038cc <ublox_i2c_bus_init+0x74>)
 8003864:	4a1b      	ldr	r2, [pc, #108]	; (80038d4 <ublox_i2c_bus_init+0x7c>)
 8003866:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 8003868:	4b18      	ldr	r3, [pc, #96]	; (80038cc <ublox_i2c_bus_init+0x74>)
 800386a:	2200      	movs	r2, #0
 800386c:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800386e:	4b17      	ldr	r3, [pc, #92]	; (80038cc <ublox_i2c_bus_init+0x74>)
 8003870:	2201      	movs	r2, #1
 8003872:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003874:	4b15      	ldr	r3, [pc, #84]	; (80038cc <ublox_i2c_bus_init+0x74>)
 8003876:	2200      	movs	r2, #0
 8003878:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 800387a:	4b14      	ldr	r3, [pc, #80]	; (80038cc <ublox_i2c_bus_init+0x74>)
 800387c:	2200      	movs	r2, #0
 800387e:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003880:	4b12      	ldr	r3, [pc, #72]	; (80038cc <ublox_i2c_bus_init+0x74>)
 8003882:	2200      	movs	r2, #0
 8003884:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003886:	4b11      	ldr	r3, [pc, #68]	; (80038cc <ublox_i2c_bus_init+0x74>)
 8003888:	2200      	movs	r2, #0
 800388a:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800388c:	4b0f      	ldr	r3, [pc, #60]	; (80038cc <ublox_i2c_bus_init+0x74>)
 800388e:	2200      	movs	r2, #0
 8003890:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003892:	480e      	ldr	r0, [pc, #56]	; (80038cc <ublox_i2c_bus_init+0x74>)
 8003894:	f003 fbdb 	bl	800704e <HAL_I2C_Init>
 8003898:	4603      	mov	r3, r0
 800389a:	2b00      	cmp	r3, #0
 800389c:	d001      	beq.n	80038a2 <ublox_i2c_bus_init+0x4a>
	{
	return 1;
 800389e:	2301      	movs	r3, #1
 80038a0:	e012      	b.n	80038c8 <ublox_i2c_bus_init+0x70>
	}

	/** Configure Analogue filter
	*/
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80038a2:	2100      	movs	r1, #0
 80038a4:	4809      	ldr	r0, [pc, #36]	; (80038cc <ublox_i2c_bus_init+0x74>)
 80038a6:	f004 fbb3 	bl	8008010 <HAL_I2CEx_ConfigAnalogFilter>
 80038aa:	4603      	mov	r3, r0
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d001      	beq.n	80038b4 <ublox_i2c_bus_init+0x5c>
	{
	return 2;
 80038b0:	2302      	movs	r3, #2
 80038b2:	e009      	b.n	80038c8 <ublox_i2c_bus_init+0x70>
	}

	/** Configure Digital filter
	*/
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80038b4:	2100      	movs	r1, #0
 80038b6:	4805      	ldr	r0, [pc, #20]	; (80038cc <ublox_i2c_bus_init+0x74>)
 80038b8:	f004 fbf5 	bl	80080a6 <HAL_I2CEx_ConfigDigitalFilter>
 80038bc:	4603      	mov	r3, r0
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d001      	beq.n	80038c6 <ublox_i2c_bus_init+0x6e>
	{
	return 3;
 80038c2:	2303      	movs	r3, #3
 80038c4:	e000      	b.n	80038c8 <ublox_i2c_bus_init+0x70>
	}
	return 0;
 80038c6:	2300      	movs	r3, #0
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	bd80      	pop	{r7, pc}
 80038cc:	200002f0 	.word	0x200002f0
 80038d0:	40005400 	.word	0x40005400
 80038d4:	307075b1 	.word	0x307075b1

080038d8 <ublox_transmit_rtc>:
    else{
        parseNMEA();
    }
}

void ublox_transmit_rtc(uint8_t cmd, UART_select device){
 80038d8:	b580      	push	{r7, lr}
 80038da:	b082      	sub	sp, #8
 80038dc:	af00      	add	r7, sp, #0
 80038de:	4603      	mov	r3, r0
 80038e0:	460a      	mov	r2, r1
 80038e2:	71fb      	strb	r3, [r7, #7]
 80038e4:	4613      	mov	r3, r2
 80038e6:	71bb      	strb	r3, [r7, #6]
    transmitMessage(gps_data.timestamp, 9, cmd, device);
 80038e8:	79fa      	ldrb	r2, [r7, #7]
 80038ea:	79bb      	ldrb	r3, [r7, #6]
 80038ec:	2109      	movs	r1, #9
 80038ee:	4803      	ldr	r0, [pc, #12]	; (80038fc <ublox_transmit_rtc+0x24>)
 80038f0:	f001 fac0 	bl	8004e74 <transmitMessage>
}
 80038f4:	bf00      	nop
 80038f6:	3708      	adds	r7, #8
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}
 80038fc:	2000038f 	.word	0x2000038f

08003900 <ublox_transmit_message>:

void ublox_transmit_message(uint8_t cmd, UART_select device){
 8003900:	b580      	push	{r7, lr}
 8003902:	b086      	sub	sp, #24
 8003904:	af00      	add	r7, sp, #0
 8003906:	4603      	mov	r3, r0
 8003908:	460a      	mov	r2, r1
 800390a:	71fb      	strb	r3, [r7, #7]
 800390c:	4613      	mov	r3, r2
 800390e:	71bb      	strb	r3, [r7, #6]
    uint8_t message[12] = {0};
 8003910:	2300      	movs	r3, #0
 8003912:	60fb      	str	r3, [r7, #12]
 8003914:	f107 0310 	add.w	r3, r7, #16
 8003918:	2200      	movs	r2, #0
 800391a:	601a      	str	r2, [r3, #0]
 800391c:	605a      	str	r2, [r3, #4]
    message[0] = (gps_data.latitude & 0xFF000000) >> 24;
 800391e:	4b22      	ldr	r3, [pc, #136]	; (80039a8 <ublox_transmit_message+0xa8>)
 8003920:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003922:	0e1b      	lsrs	r3, r3, #24
 8003924:	b2db      	uxtb	r3, r3
 8003926:	733b      	strb	r3, [r7, #12]
    message[1] = (gps_data.latitude & 0x00FF0000) >> 16;
 8003928:	4b1f      	ldr	r3, [pc, #124]	; (80039a8 <ublox_transmit_message+0xa8>)
 800392a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800392c:	141b      	asrs	r3, r3, #16
 800392e:	b2db      	uxtb	r3, r3
 8003930:	737b      	strb	r3, [r7, #13]
    message[2] = (gps_data.latitude & 0x0000FF00) >> 8;
 8003932:	4b1d      	ldr	r3, [pc, #116]	; (80039a8 <ublox_transmit_message+0xa8>)
 8003934:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003936:	121b      	asrs	r3, r3, #8
 8003938:	b2db      	uxtb	r3, r3
 800393a:	73bb      	strb	r3, [r7, #14]
    message[3] = (gps_data.latitude & 0x000000FF);
 800393c:	4b1a      	ldr	r3, [pc, #104]	; (80039a8 <ublox_transmit_message+0xa8>)
 800393e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003940:	b2db      	uxtb	r3, r3
 8003942:	73fb      	strb	r3, [r7, #15]
    message[4] = (gps_data.longtitude & 0xFF000000) >> 24;
 8003944:	4b18      	ldr	r3, [pc, #96]	; (80039a8 <ublox_transmit_message+0xa8>)
 8003946:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003948:	0e1b      	lsrs	r3, r3, #24
 800394a:	b2db      	uxtb	r3, r3
 800394c:	743b      	strb	r3, [r7, #16]
    message[5] = (gps_data.longtitude & 0x00FF0000) >> 16;
 800394e:	4b16      	ldr	r3, [pc, #88]	; (80039a8 <ublox_transmit_message+0xa8>)
 8003950:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003952:	141b      	asrs	r3, r3, #16
 8003954:	b2db      	uxtb	r3, r3
 8003956:	747b      	strb	r3, [r7, #17]
    message[6] = (gps_data.longtitude & 0x0000FF00) >> 8;
 8003958:	4b13      	ldr	r3, [pc, #76]	; (80039a8 <ublox_transmit_message+0xa8>)
 800395a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800395c:	121b      	asrs	r3, r3, #8
 800395e:	b2db      	uxtb	r3, r3
 8003960:	74bb      	strb	r3, [r7, #18]
    message[7] = (gps_data.longtitude & 0x000000FF);
 8003962:	4b11      	ldr	r3, [pc, #68]	; (80039a8 <ublox_transmit_message+0xa8>)
 8003964:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003966:	b2db      	uxtb	r3, r3
 8003968:	74fb      	strb	r3, [r7, #19]
    message[8] = (gps_data.altitude & 0xFF000000) >> 24;
 800396a:	4b0f      	ldr	r3, [pc, #60]	; (80039a8 <ublox_transmit_message+0xa8>)
 800396c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800396e:	0e1b      	lsrs	r3, r3, #24
 8003970:	b2db      	uxtb	r3, r3
 8003972:	753b      	strb	r3, [r7, #20]
    message[9] = (gps_data.altitude & 0x00FF0000) >> 16;
 8003974:	4b0c      	ldr	r3, [pc, #48]	; (80039a8 <ublox_transmit_message+0xa8>)
 8003976:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003978:	141b      	asrs	r3, r3, #16
 800397a:	b2db      	uxtb	r3, r3
 800397c:	757b      	strb	r3, [r7, #21]
    message[10] = (gps_data.altitude & 0x0000FF00) >> 8;
 800397e:	4b0a      	ldr	r3, [pc, #40]	; (80039a8 <ublox_transmit_message+0xa8>)
 8003980:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003982:	121b      	asrs	r3, r3, #8
 8003984:	b2db      	uxtb	r3, r3
 8003986:	75bb      	strb	r3, [r7, #22]
    message[11] = (gps_data.altitude & 0x000000FF);
 8003988:	4b07      	ldr	r3, [pc, #28]	; (80039a8 <ublox_transmit_message+0xa8>)
 800398a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800398c:	b2db      	uxtb	r3, r3
 800398e:	75fb      	strb	r3, [r7, #23]
    transmitMessage(message, 12, cmd, device);
 8003990:	79fa      	ldrb	r2, [r7, #7]
 8003992:	79bb      	ldrb	r3, [r7, #6]
 8003994:	f107 000c 	add.w	r0, r7, #12
 8003998:	210c      	movs	r1, #12
 800399a:	f001 fa6b 	bl	8004e74 <transmitMessage>
}
 800399e:	bf00      	nop
 80039a0:	3718      	adds	r7, #24
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}
 80039a6:	bf00      	nop
 80039a8:	20000344 	.word	0x20000344

080039ac <ubloxInit>:

UBLOX_transResult ubloxInit(void){
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b084      	sub	sp, #16
 80039b0:	af00      	add	r7, sp, #0
	UBLOX_transResult ret;
	uint8_t res[10] = {0};
 80039b2:	2300      	movs	r3, #0
 80039b4:	607b      	str	r3, [r7, #4]
 80039b6:	f107 0308 	add.w	r3, r7, #8
 80039ba:	2200      	movs	r2, #0
 80039bc:	601a      	str	r2, [r3, #0]
 80039be:	809a      	strh	r2, [r3, #4]
    ret = setPortOutput(COM_PORT_I2C, COM_TYPE_NMEA);
 80039c0:	2102      	movs	r1, #2
 80039c2:	2000      	movs	r0, #0
 80039c4:	f000 f9e0 	bl	8003d88 <setPortOutput>
 80039c8:	4603      	mov	r3, r0
 80039ca:	73fb      	strb	r3, [r7, #15]
    if (ret != ACK){
 80039cc:	7bfb      	ldrb	r3, [r7, #15]
 80039ce:	2b01      	cmp	r3, #1
 80039d0:	d00a      	beq.n	80039e8 <ubloxInit+0x3c>
    	sprintf(res, " POUT:%d\r\n,", ret);
 80039d2:	7bfa      	ldrb	r2, [r7, #15]
 80039d4:	1d3b      	adds	r3, r7, #4
 80039d6:	495d      	ldr	r1, [pc, #372]	; (8003b4c <ubloxInit+0x1a0>)
 80039d8:	4618      	mov	r0, r3
 80039da:	f00d fa33 	bl	8010e44 <siprintf>
		uart_write_debug(res, 50);
 80039de:	1d3b      	adds	r3, r7, #4
 80039e0:	2132      	movs	r1, #50	; 0x32
 80039e2:	4618      	mov	r0, r3
 80039e4:	f002 fb00 	bl	8005fe8 <uart_write_debug>
    }
    HAL_Delay(10);
 80039e8:	200a      	movs	r0, #10
 80039ea:	f002 fcc7 	bl	800637c <HAL_Delay>
    ret = configureNMEA(UBX_CLASS_NMEA, UBX_NMEA_GLL, NMEA_GGL_RATE, COM_PORT_I2C);
 80039ee:	2300      	movs	r3, #0
 80039f0:	2200      	movs	r2, #0
 80039f2:	2101      	movs	r1, #1
 80039f4:	20f0      	movs	r0, #240	; 0xf0
 80039f6:	f000 f9f7 	bl	8003de8 <configureNMEA>
 80039fa:	4603      	mov	r3, r0
 80039fc:	73fb      	strb	r3, [r7, #15]
    if (ret != ACK){
 80039fe:	7bfb      	ldrb	r3, [r7, #15]
 8003a00:	2b01      	cmp	r3, #1
 8003a02:	d00a      	beq.n	8003a1a <ubloxInit+0x6e>
    	sprintf(res, " GGL:%d\r\n,", ret);
 8003a04:	7bfa      	ldrb	r2, [r7, #15]
 8003a06:	1d3b      	adds	r3, r7, #4
 8003a08:	4951      	ldr	r1, [pc, #324]	; (8003b50 <ubloxInit+0x1a4>)
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f00d fa1a 	bl	8010e44 <siprintf>
    	uart_write_debug(res, 50);
 8003a10:	1d3b      	adds	r3, r7, #4
 8003a12:	2132      	movs	r1, #50	; 0x32
 8003a14:	4618      	mov	r0, r3
 8003a16:	f002 fae7 	bl	8005fe8 <uart_write_debug>
    }
    HAL_Delay(10);
 8003a1a:	200a      	movs	r0, #10
 8003a1c:	f002 fcae 	bl	800637c <HAL_Delay>
    ret = configureNMEA(UBX_CLASS_NMEA, UBX_NMEA_GSA, NMEA_GSA_RATE, COM_PORT_I2C);
 8003a20:	2300      	movs	r3, #0
 8003a22:	2200      	movs	r2, #0
 8003a24:	2102      	movs	r1, #2
 8003a26:	20f0      	movs	r0, #240	; 0xf0
 8003a28:	f000 f9de 	bl	8003de8 <configureNMEA>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	73fb      	strb	r3, [r7, #15]
    if (ret != ACK){
 8003a30:	7bfb      	ldrb	r3, [r7, #15]
 8003a32:	2b01      	cmp	r3, #1
 8003a34:	d00a      	beq.n	8003a4c <ubloxInit+0xa0>
    	sprintf(res, " GSA:%d\r\n,", ret);
 8003a36:	7bfa      	ldrb	r2, [r7, #15]
 8003a38:	1d3b      	adds	r3, r7, #4
 8003a3a:	4946      	ldr	r1, [pc, #280]	; (8003b54 <ubloxInit+0x1a8>)
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	f00d fa01 	bl	8010e44 <siprintf>
		uart_write_debug(res, 50);
 8003a42:	1d3b      	adds	r3, r7, #4
 8003a44:	2132      	movs	r1, #50	; 0x32
 8003a46:	4618      	mov	r0, r3
 8003a48:	f002 face 	bl	8005fe8 <uart_write_debug>
    }
    HAL_Delay(10);
 8003a4c:	200a      	movs	r0, #10
 8003a4e:	f002 fc95 	bl	800637c <HAL_Delay>
    ret = configureNMEA(UBX_CLASS_NMEA, UBX_NMEA_GSV, NMEA_GSV_RATE, COM_PORT_I2C);
 8003a52:	2300      	movs	r3, #0
 8003a54:	2200      	movs	r2, #0
 8003a56:	2103      	movs	r1, #3
 8003a58:	20f0      	movs	r0, #240	; 0xf0
 8003a5a:	f000 f9c5 	bl	8003de8 <configureNMEA>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	73fb      	strb	r3, [r7, #15]
    if (ret != ACK){
 8003a62:	7bfb      	ldrb	r3, [r7, #15]
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	d00a      	beq.n	8003a7e <ubloxInit+0xd2>
    	sprintf(res, " GSV:%d\r\n,", ret);
 8003a68:	7bfa      	ldrb	r2, [r7, #15]
 8003a6a:	1d3b      	adds	r3, r7, #4
 8003a6c:	493a      	ldr	r1, [pc, #232]	; (8003b58 <ubloxInit+0x1ac>)
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f00d f9e8 	bl	8010e44 <siprintf>
		uart_write_debug(res, 50);
 8003a74:	1d3b      	adds	r3, r7, #4
 8003a76:	2132      	movs	r1, #50	; 0x32
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f002 fab5 	bl	8005fe8 <uart_write_debug>
    }
    HAL_Delay(10);
 8003a7e:	200a      	movs	r0, #10
 8003a80:	f002 fc7c 	bl	800637c <HAL_Delay>
    ret = configureNMEA(UBX_CLASS_NMEA, UBX_NMEA_RMC, NMEA_RMC_RATE, COM_PORT_I2C);
 8003a84:	2300      	movs	r3, #0
 8003a86:	2200      	movs	r2, #0
 8003a88:	2104      	movs	r1, #4
 8003a8a:	20f0      	movs	r0, #240	; 0xf0
 8003a8c:	f000 f9ac 	bl	8003de8 <configureNMEA>
 8003a90:	4603      	mov	r3, r0
 8003a92:	73fb      	strb	r3, [r7, #15]
    if (ret != ACK){
 8003a94:	7bfb      	ldrb	r3, [r7, #15]
 8003a96:	2b01      	cmp	r3, #1
 8003a98:	d00a      	beq.n	8003ab0 <ubloxInit+0x104>
    	sprintf(res, " RMC:%d\r\n,", ret);
 8003a9a:	7bfa      	ldrb	r2, [r7, #15]
 8003a9c:	1d3b      	adds	r3, r7, #4
 8003a9e:	492f      	ldr	r1, [pc, #188]	; (8003b5c <ubloxInit+0x1b0>)
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	f00d f9cf 	bl	8010e44 <siprintf>
		uart_write_debug(res, 50);
 8003aa6:	1d3b      	adds	r3, r7, #4
 8003aa8:	2132      	movs	r1, #50	; 0x32
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f002 fa9c 	bl	8005fe8 <uart_write_debug>
    }
    HAL_Delay(10);
 8003ab0:	200a      	movs	r0, #10
 8003ab2:	f002 fc63 	bl	800637c <HAL_Delay>
    ret = configureNMEA(UBX_CLASS_NMEA, UBX_NMEA_VTG, NMEA_VTG_RATE, COM_PORT_I2C);
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	2200      	movs	r2, #0
 8003aba:	2105      	movs	r1, #5
 8003abc:	20f0      	movs	r0, #240	; 0xf0
 8003abe:	f000 f993 	bl	8003de8 <configureNMEA>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	73fb      	strb	r3, [r7, #15]
    if (ret != ACK){
 8003ac6:	7bfb      	ldrb	r3, [r7, #15]
 8003ac8:	2b01      	cmp	r3, #1
 8003aca:	d00a      	beq.n	8003ae2 <ubloxInit+0x136>
    	sprintf(res, " VTG:%d\r\n,", ret);
 8003acc:	7bfa      	ldrb	r2, [r7, #15]
 8003ace:	1d3b      	adds	r3, r7, #4
 8003ad0:	4923      	ldr	r1, [pc, #140]	; (8003b60 <ubloxInit+0x1b4>)
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f00d f9b6 	bl	8010e44 <siprintf>
		uart_write_debug(res, 50);
 8003ad8:	1d3b      	adds	r3, r7, #4
 8003ada:	2132      	movs	r1, #50	; 0x32
 8003adc:	4618      	mov	r0, r3
 8003ade:	f002 fa83 	bl	8005fe8 <uart_write_debug>
    }
    HAL_Delay(10);
 8003ae2:	200a      	movs	r0, #10
 8003ae4:	f002 fc4a 	bl	800637c <HAL_Delay>
    ret = configureNMEA(UBX_CLASS_NMEA, UBX_NMEA_GGA, NMEA_GGA_RATE, COM_PORT_I2C);
 8003ae8:	2300      	movs	r3, #0
 8003aea:	2202      	movs	r2, #2
 8003aec:	2100      	movs	r1, #0
 8003aee:	20f0      	movs	r0, #240	; 0xf0
 8003af0:	f000 f97a 	bl	8003de8 <configureNMEA>
 8003af4:	4603      	mov	r3, r0
 8003af6:	73fb      	strb	r3, [r7, #15]
    if (ret != ACK){
 8003af8:	7bfb      	ldrb	r3, [r7, #15]
 8003afa:	2b01      	cmp	r3, #1
 8003afc:	d00a      	beq.n	8003b14 <ubloxInit+0x168>
    	sprintf(res, " GGA:%d\r\n,", ret);
 8003afe:	7bfa      	ldrb	r2, [r7, #15]
 8003b00:	1d3b      	adds	r3, r7, #4
 8003b02:	4918      	ldr	r1, [pc, #96]	; (8003b64 <ubloxInit+0x1b8>)
 8003b04:	4618      	mov	r0, r3
 8003b06:	f00d f99d 	bl	8010e44 <siprintf>
		uart_write_debug(res, 50);
 8003b0a:	1d3b      	adds	r3, r7, #4
 8003b0c:	2132      	movs	r1, #50	; 0x32
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f002 fa6a 	bl	8005fe8 <uart_write_debug>
    }
    HAL_Delay(10);
 8003b14:	200a      	movs	r0, #10
 8003b16:	f002 fc31 	bl	800637c <HAL_Delay>
    ret = powerManageCfgSet(120);
 8003b1a:	2078      	movs	r0, #120	; 0x78
 8003b1c:	f000 f996 	bl	8003e4c <powerManageCfgSet>
 8003b20:	4603      	mov	r3, r0
 8003b22:	73fb      	strb	r3, [r7, #15]
    if (ret != ACK){
 8003b24:	7bfb      	ldrb	r3, [r7, #15]
 8003b26:	2b01      	cmp	r3, #1
 8003b28:	d00a      	beq.n	8003b40 <ubloxInit+0x194>
		sprintf(res, " PM2:%d\r\n,", ret);
 8003b2a:	7bfa      	ldrb	r2, [r7, #15]
 8003b2c:	1d3b      	adds	r3, r7, #4
 8003b2e:	490e      	ldr	r1, [pc, #56]	; (8003b68 <ubloxInit+0x1bc>)
 8003b30:	4618      	mov	r0, r3
 8003b32:	f00d f987 	bl	8010e44 <siprintf>
		uart_write_debug(res, 50);
 8003b36:	1d3b      	adds	r3, r7, #4
 8003b38:	2132      	movs	r1, #50	; 0x32
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f002 fa54 	bl	8005fe8 <uart_write_debug>
    }
	return ret;
 8003b40:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3710      	adds	r7, #16
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}
 8003b4a:	bf00      	nop
 8003b4c:	080146c8 	.word	0x080146c8
 8003b50:	080146d4 	.word	0x080146d4
 8003b54:	080146e0 	.word	0x080146e0
 8003b58:	080146ec 	.word	0x080146ec
 8003b5c:	080146f8 	.word	0x080146f8
 8003b60:	08014704 	.word	0x08014704
 8003b64:	08014710 	.word	0x08014710
 8003b68:	0801471c 	.word	0x0801471c

08003b6c <calcChecksum>:
    memset(gps_data.sentence, 0, 75);
    return 0;
}


static void calcChecksum(messageCFG_t *msg){
 8003b6c:	b480      	push	{r7}
 8003b6e:	b085      	sub	sp, #20
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
    msg->checksumA = 0;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2200      	movs	r2, #0
 8003b78:	731a      	strb	r2, [r3, #12]
    msg->checksumB = 0;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	735a      	strb	r2, [r3, #13]

    msg->checksumA += msg->cls;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	7b1a      	ldrb	r2, [r3, #12]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	781b      	ldrb	r3, [r3, #0]
 8003b88:	4413      	add	r3, r2
 8003b8a:	b2da      	uxtb	r2, r3
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	731a      	strb	r2, [r3, #12]
    msg->checksumB += msg->checksumA;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	7b5a      	ldrb	r2, [r3, #13]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	7b1b      	ldrb	r3, [r3, #12]
 8003b98:	4413      	add	r3, r2
 8003b9a:	b2da      	uxtb	r2, r3
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	735a      	strb	r2, [r3, #13]

    msg->checksumA += msg->id;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	7b1a      	ldrb	r2, [r3, #12]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	785b      	ldrb	r3, [r3, #1]
 8003ba8:	4413      	add	r3, r2
 8003baa:	b2da      	uxtb	r2, r3
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	731a      	strb	r2, [r3, #12]
    msg->checksumB += msg->checksumA;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	7b5a      	ldrb	r2, [r3, #13]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	7b1b      	ldrb	r3, [r3, #12]
 8003bb8:	4413      	add	r3, r2
 8003bba:	b2da      	uxtb	r2, r3
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	735a      	strb	r2, [r3, #13]

    msg->checksumA += (msg->len & 0xFF);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	7b1a      	ldrb	r2, [r3, #12]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	885b      	ldrh	r3, [r3, #2]
 8003bc8:	b2db      	uxtb	r3, r3
 8003bca:	4413      	add	r3, r2
 8003bcc:	b2da      	uxtb	r2, r3
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	731a      	strb	r2, [r3, #12]
    msg->checksumB += msg->checksumA;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	7b5a      	ldrb	r2, [r3, #13]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	7b1b      	ldrb	r3, [r3, #12]
 8003bda:	4413      	add	r3, r2
 8003bdc:	b2da      	uxtb	r2, r3
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	735a      	strb	r2, [r3, #13]

    msg->checksumA += (msg->len >> 8);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	7b1a      	ldrb	r2, [r3, #12]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	885b      	ldrh	r3, [r3, #2]
 8003bea:	0a1b      	lsrs	r3, r3, #8
 8003bec:	b29b      	uxth	r3, r3
 8003bee:	b2db      	uxtb	r3, r3
 8003bf0:	4413      	add	r3, r2
 8003bf2:	b2da      	uxtb	r2, r3
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	731a      	strb	r2, [r3, #12]
    msg->checksumB += msg->checksumA;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	7b5a      	ldrb	r2, [r3, #13]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	7b1b      	ldrb	r3, [r3, #12]
 8003c00:	4413      	add	r3, r2
 8003c02:	b2da      	uxtb	r2, r3
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	735a      	strb	r2, [r3, #13]

    uint8_t i;
    for (i=0; i < msg->len; i++)
 8003c08:	2300      	movs	r3, #0
 8003c0a:	73fb      	strb	r3, [r7, #15]
 8003c0c:	e015      	b.n	8003c3a <calcChecksum+0xce>
    {
        msg->checksumA += msg->payload[i];
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	7b1a      	ldrb	r2, [r3, #12]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6899      	ldr	r1, [r3, #8]
 8003c16:	7bfb      	ldrb	r3, [r7, #15]
 8003c18:	440b      	add	r3, r1
 8003c1a:	781b      	ldrb	r3, [r3, #0]
 8003c1c:	4413      	add	r3, r2
 8003c1e:	b2da      	uxtb	r2, r3
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	731a      	strb	r2, [r3, #12]
        msg->checksumB += msg->checksumA;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	7b5a      	ldrb	r2, [r3, #13]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	7b1b      	ldrb	r3, [r3, #12]
 8003c2c:	4413      	add	r3, r2
 8003c2e:	b2da      	uxtb	r2, r3
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	735a      	strb	r2, [r3, #13]
    for (i=0; i < msg->len; i++)
 8003c34:	7bfb      	ldrb	r3, [r7, #15]
 8003c36:	3301      	adds	r3, #1
 8003c38:	73fb      	strb	r3, [r7, #15]
 8003c3a:	7bfb      	ldrb	r3, [r7, #15]
 8003c3c:	b29a      	uxth	r2, r3
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	885b      	ldrh	r3, [r3, #2]
 8003c42:	429a      	cmp	r2, r3
 8003c44:	d3e3      	bcc.n	8003c0e <calcChecksum+0xa2>
    }
}
 8003c46:	bf00      	nop
 8003c48:	bf00      	nop
 8003c4a:	3714      	adds	r7, #20
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c52:	4770      	bx	lr

08003c54 <sendI2Cmessage>:

UBLOX_transResult sendI2Cmessage(void){
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b098      	sub	sp, #96	; 0x60
 8003c58:	af02      	add	r7, sp, #8
	UBLOX_transResult res;
    uint8_t message[60] = {0};
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	61bb      	str	r3, [r7, #24]
 8003c5e:	f107 031c 	add.w	r3, r7, #28
 8003c62:	2238      	movs	r2, #56	; 0x38
 8003c64:	2100      	movs	r1, #0
 8003c66:	4618      	mov	r0, r3
 8003c68:	f00d f94f 	bl	8010f0a <memset>
    uint8_t rx_message[20] = {0};
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	607b      	str	r3, [r7, #4]
 8003c70:	f107 0308 	add.w	r3, r7, #8
 8003c74:	2200      	movs	r2, #0
 8003c76:	601a      	str	r2, [r3, #0]
 8003c78:	605a      	str	r2, [r3, #4]
 8003c7a:	609a      	str	r2, [r3, #8]
 8003c7c:	60da      	str	r2, [r3, #12]
    uint8_t len = config_message.len + 8;
 8003c7e:	4b41      	ldr	r3, [pc, #260]	; (8003d84 <sendI2Cmessage+0x130>)
 8003c80:	885b      	ldrh	r3, [r3, #2]
 8003c82:	b2db      	uxtb	r3, r3
 8003c84:	3308      	adds	r3, #8
 8003c86:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
    message[0] = UBX_SYNCH_1;
 8003c8a:	23b5      	movs	r3, #181	; 0xb5
 8003c8c:	763b      	strb	r3, [r7, #24]
    message[1] = UBX_SYNCH_2;
 8003c8e:	2362      	movs	r3, #98	; 0x62
 8003c90:	767b      	strb	r3, [r7, #25]
    message[2] = config_message.cls;
 8003c92:	4b3c      	ldr	r3, [pc, #240]	; (8003d84 <sendI2Cmessage+0x130>)
 8003c94:	781b      	ldrb	r3, [r3, #0]
 8003c96:	76bb      	strb	r3, [r7, #26]
    message[3] = config_message.id;
 8003c98:	4b3a      	ldr	r3, [pc, #232]	; (8003d84 <sendI2Cmessage+0x130>)
 8003c9a:	785b      	ldrb	r3, [r3, #1]
 8003c9c:	76fb      	strb	r3, [r7, #27]
    message[4] = (config_message.len & 0xFF);
 8003c9e:	4b39      	ldr	r3, [pc, #228]	; (8003d84 <sendI2Cmessage+0x130>)
 8003ca0:	885b      	ldrh	r3, [r3, #2]
 8003ca2:	b2db      	uxtb	r3, r3
 8003ca4:	773b      	strb	r3, [r7, #28]
    message[5] = (config_message.len >> 8);
 8003ca6:	4b37      	ldr	r3, [pc, #220]	; (8003d84 <sendI2Cmessage+0x130>)
 8003ca8:	885b      	ldrh	r3, [r3, #2]
 8003caa:	0a1b      	lsrs	r3, r3, #8
 8003cac:	b29b      	uxth	r3, r3
 8003cae:	b2db      	uxtb	r3, r3
 8003cb0:	777b      	strb	r3, [r7, #29]
    uint8_t i;
    for ( i=0 ; i < config_message.len ; i++){
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8003cb8:	e011      	b.n	8003cde <sendI2Cmessage+0x8a>
        message[6+i] = config_message.payload[i];
 8003cba:	4b32      	ldr	r3, [pc, #200]	; (8003d84 <sendI2Cmessage+0x130>)
 8003cbc:	689a      	ldr	r2, [r3, #8]
 8003cbe:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003cc2:	441a      	add	r2, r3
 8003cc4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003cc8:	3306      	adds	r3, #6
 8003cca:	7812      	ldrb	r2, [r2, #0]
 8003ccc:	3358      	adds	r3, #88	; 0x58
 8003cce:	443b      	add	r3, r7
 8003cd0:	f803 2c40 	strb.w	r2, [r3, #-64]
    for ( i=0 ; i < config_message.len ; i++){
 8003cd4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003cd8:	3301      	adds	r3, #1
 8003cda:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8003cde:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003ce2:	b29a      	uxth	r2, r3
 8003ce4:	4b27      	ldr	r3, [pc, #156]	; (8003d84 <sendI2Cmessage+0x130>)
 8003ce6:	885b      	ldrh	r3, [r3, #2]
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	d3e6      	bcc.n	8003cba <sendI2Cmessage+0x66>
    }
    message[6+i] = config_message.checksumA;
 8003cec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003cf0:	3306      	adds	r3, #6
 8003cf2:	4a24      	ldr	r2, [pc, #144]	; (8003d84 <sendI2Cmessage+0x130>)
 8003cf4:	7b12      	ldrb	r2, [r2, #12]
 8003cf6:	3358      	adds	r3, #88	; 0x58
 8003cf8:	443b      	add	r3, r7
 8003cfa:	f803 2c40 	strb.w	r2, [r3, #-64]
    message[7+i] = config_message.checksumB;
 8003cfe:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003d02:	3307      	adds	r3, #7
 8003d04:	4a1f      	ldr	r2, [pc, #124]	; (8003d84 <sendI2Cmessage+0x130>)
 8003d06:	7b52      	ldrb	r2, [r2, #13]
 8003d08:	3358      	adds	r3, #88	; 0x58
 8003d0a:	443b      	add	r3, r7
 8003d0c:	f803 2c40 	strb.w	r2, [r3, #-64]
    res = UbloxI2CWriteReadPolling(UBLOX_M9N, message, len, rx_message, 20, 50);
 8003d10:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8003d14:	b29a      	uxth	r2, r3
 8003d16:	1d3b      	adds	r3, r7, #4
 8003d18:	f107 0118 	add.w	r1, r7, #24
 8003d1c:	2032      	movs	r0, #50	; 0x32
 8003d1e:	9001      	str	r0, [sp, #4]
 8003d20:	2014      	movs	r0, #20
 8003d22:	9000      	str	r0, [sp, #0]
 8003d24:	2084      	movs	r0, #132	; 0x84
 8003d26:	f000 f8b1 	bl	8003e8c <UbloxI2CWriteReadPolling>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
    if (res == TRANS_OK){
 8003d30:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8003d34:	2b04      	cmp	r3, #4
 8003d36:	d11e      	bne.n	8003d76 <sendI2Cmessage+0x122>
    	for(i=0; i<20;i++){
 8003d38:	2300      	movs	r3, #0
 8003d3a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8003d3e:	e00c      	b.n	8003d5a <sendI2Cmessage+0x106>
    		if(rx_message[i] == UBX_SYNCH_1){
 8003d40:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003d44:	3358      	adds	r3, #88	; 0x58
 8003d46:	443b      	add	r3, r7
 8003d48:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 8003d4c:	2bb5      	cmp	r3, #181	; 0xb5
 8003d4e:	d009      	beq.n	8003d64 <sendI2Cmessage+0x110>
    	for(i=0; i<20;i++){
 8003d50:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003d54:	3301      	adds	r3, #1
 8003d56:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8003d5a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003d5e:	2b13      	cmp	r3, #19
 8003d60:	d9ee      	bls.n	8003d40 <sendI2Cmessage+0xec>
 8003d62:	e000      	b.n	8003d66 <sendI2Cmessage+0x112>
    			break;
 8003d64:	bf00      	nop
    		}
    	}
    	return rx_message[i+3];  //UBLOX returns 1 for ACK and 0 for NACK
 8003d66:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003d6a:	3303      	adds	r3, #3
 8003d6c:	3358      	adds	r3, #88	; 0x58
 8003d6e:	443b      	add	r3, r7
 8003d70:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 8003d74:	e001      	b.n	8003d7a <sendI2Cmessage+0x126>
    }
    return res;
 8003d76:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
}
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	3758      	adds	r7, #88	; 0x58
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}
 8003d82:	bf00      	nop
 8003d84:	2000002c 	.word	0x2000002c

08003d88 <setPortOutput>:

UBLOX_transResult setPortOutput(uint8_t portSelect, uint8_t streamSettings){
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b088      	sub	sp, #32
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	4603      	mov	r3, r0
 8003d90:	460a      	mov	r2, r1
 8003d92:	71fb      	strb	r3, [r7, #7]
 8003d94:	4613      	mov	r3, r2
 8003d96:	71bb      	strb	r3, [r7, #6]
    config_message.cls = UBX_CLASS_CFG;
 8003d98:	4b12      	ldr	r3, [pc, #72]	; (8003de4 <setPortOutput+0x5c>)
 8003d9a:	2206      	movs	r2, #6
 8003d9c:	701a      	strb	r2, [r3, #0]
    config_message.id =  UBX_CFG_PRT;
 8003d9e:	4b11      	ldr	r3, [pc, #68]	; (8003de4 <setPortOutput+0x5c>)
 8003da0:	2200      	movs	r2, #0
 8003da2:	705a      	strb	r2, [r3, #1]
    config_message.len = 20;
 8003da4:	4b0f      	ldr	r3, [pc, #60]	; (8003de4 <setPortOutput+0x5c>)
 8003da6:	2214      	movs	r2, #20
 8003da8:	805a      	strh	r2, [r3, #2]
    uint8_t payloadCfg[20] = {0};
 8003daa:	2300      	movs	r3, #0
 8003dac:	60fb      	str	r3, [r7, #12]
 8003dae:	f107 0310 	add.w	r3, r7, #16
 8003db2:	2200      	movs	r2, #0
 8003db4:	601a      	str	r2, [r3, #0]
 8003db6:	605a      	str	r2, [r3, #4]
 8003db8:	609a      	str	r2, [r3, #8]
 8003dba:	60da      	str	r2, [r3, #12]
    payloadCfg[4] = 0x84;
 8003dbc:	2384      	movs	r3, #132	; 0x84
 8003dbe:	743b      	strb	r3, [r7, #16]
    payloadCfg[12] = 0x23;
 8003dc0:	2323      	movs	r3, #35	; 0x23
 8003dc2:	763b      	strb	r3, [r7, #24]
    payloadCfg[14] = streamSettings;
 8003dc4:	79bb      	ldrb	r3, [r7, #6]
 8003dc6:	76bb      	strb	r3, [r7, #26]
    config_message.payload = payloadCfg;
 8003dc8:	4a06      	ldr	r2, [pc, #24]	; (8003de4 <setPortOutput+0x5c>)
 8003dca:	f107 030c 	add.w	r3, r7, #12
 8003dce:	6093      	str	r3, [r2, #8]
    calcChecksum(&config_message);
 8003dd0:	4804      	ldr	r0, [pc, #16]	; (8003de4 <setPortOutput+0x5c>)
 8003dd2:	f7ff fecb 	bl	8003b6c <calcChecksum>
    return sendI2Cmessage();
 8003dd6:	f7ff ff3d 	bl	8003c54 <sendI2Cmessage>
 8003dda:	4603      	mov	r3, r0
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	3720      	adds	r7, #32
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bd80      	pop	{r7, pc}
 8003de4:	2000002c 	.word	0x2000002c

08003de8 <configureNMEA>:
    message[8] = config_message.checksumA;
    message[9] = config_message.checksumB;
    return UbloxI2CWriteReadPolling(UBLOX_M9N, message, 10, rx_mes, 11, 100);
}

UBLOX_transResult configureNMEA(uint8_t msgClass, uint8_t msgID, uint8_t rate, uint8_t portID){
 8003de8:	b590      	push	{r4, r7, lr}
 8003dea:	b085      	sub	sp, #20
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	4604      	mov	r4, r0
 8003df0:	4608      	mov	r0, r1
 8003df2:	4611      	mov	r1, r2
 8003df4:	461a      	mov	r2, r3
 8003df6:	4623      	mov	r3, r4
 8003df8:	71fb      	strb	r3, [r7, #7]
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	71bb      	strb	r3, [r7, #6]
 8003dfe:	460b      	mov	r3, r1
 8003e00:	717b      	strb	r3, [r7, #5]
 8003e02:	4613      	mov	r3, r2
 8003e04:	713b      	strb	r3, [r7, #4]
    config_message.cls = UBX_CLASS_CFG;
 8003e06:	4b10      	ldr	r3, [pc, #64]	; (8003e48 <configureNMEA+0x60>)
 8003e08:	2206      	movs	r2, #6
 8003e0a:	701a      	strb	r2, [r3, #0]
    config_message.id = UBX_CFG_MSG;
 8003e0c:	4b0e      	ldr	r3, [pc, #56]	; (8003e48 <configureNMEA+0x60>)
 8003e0e:	2201      	movs	r2, #1
 8003e10:	705a      	strb	r2, [r3, #1]
    config_message.len = 8;
 8003e12:	4b0d      	ldr	r3, [pc, #52]	; (8003e48 <configureNMEA+0x60>)
 8003e14:	2208      	movs	r2, #8
 8003e16:	805a      	strh	r2, [r3, #2]
    uint8_t payloadCfg[8] = {0};
 8003e18:	2300      	movs	r3, #0
 8003e1a:	60bb      	str	r3, [r7, #8]
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	60fb      	str	r3, [r7, #12]
    payloadCfg[0] = msgClass;
 8003e20:	79fb      	ldrb	r3, [r7, #7]
 8003e22:	723b      	strb	r3, [r7, #8]
    payloadCfg[1] = msgID;
 8003e24:	79bb      	ldrb	r3, [r7, #6]
 8003e26:	727b      	strb	r3, [r7, #9]
    payloadCfg[2] = rate;
 8003e28:	797b      	ldrb	r3, [r7, #5]
 8003e2a:	72bb      	strb	r3, [r7, #10]
    config_message.payload = payloadCfg;
 8003e2c:	4a06      	ldr	r2, [pc, #24]	; (8003e48 <configureNMEA+0x60>)
 8003e2e:	f107 0308 	add.w	r3, r7, #8
 8003e32:	6093      	str	r3, [r2, #8]
    calcChecksum(&config_message);
 8003e34:	4804      	ldr	r0, [pc, #16]	; (8003e48 <configureNMEA+0x60>)
 8003e36:	f7ff fe99 	bl	8003b6c <calcChecksum>
    return sendI2Cmessage();
 8003e3a:	f7ff ff0b 	bl	8003c54 <sendI2Cmessage>
 8003e3e:	4603      	mov	r3, r0
}
 8003e40:	4618      	mov	r0, r3
 8003e42:	3714      	adds	r7, #20
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bd90      	pop	{r4, r7, pc}
 8003e48:	2000002c 	.word	0x2000002c

08003e4c <powerManageCfgSet>:
    message[7] = config_message.checksumB;
    return UbloxI2CWriteReadPolling(UBLOX_M9N, message, 8, payload, 56, 200);
}


UBLOX_transResult powerManageCfgSet(uint8_t maxAckTime){
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b082      	sub	sp, #8
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	4603      	mov	r3, r0
 8003e54:	71fb      	strb	r3, [r7, #7]
    config_message.cls = UBX_CLASS_CFG;
 8003e56:	4b0b      	ldr	r3, [pc, #44]	; (8003e84 <powerManageCfgSet+0x38>)
 8003e58:	2206      	movs	r2, #6
 8003e5a:	701a      	strb	r2, [r3, #0]
    config_message.id =  UBX_CFG_PM2;
 8003e5c:	4b09      	ldr	r3, [pc, #36]	; (8003e84 <powerManageCfgSet+0x38>)
 8003e5e:	223b      	movs	r2, #59	; 0x3b
 8003e60:	705a      	strb	r2, [r3, #1]
    config_message.len = 44;
 8003e62:	4b08      	ldr	r3, [pc, #32]	; (8003e84 <powerManageCfgSet+0x38>)
 8003e64:	222c      	movs	r2, #44	; 0x2c
 8003e66:	805a      	strh	r2, [r3, #2]
    config_message.payload = powerModesetPld;
 8003e68:	4b06      	ldr	r3, [pc, #24]	; (8003e84 <powerManageCfgSet+0x38>)
 8003e6a:	4a07      	ldr	r2, [pc, #28]	; (8003e88 <powerManageCfgSet+0x3c>)
 8003e6c:	609a      	str	r2, [r3, #8]
    calcChecksum(&config_message);
 8003e6e:	4805      	ldr	r0, [pc, #20]	; (8003e84 <powerManageCfgSet+0x38>)
 8003e70:	f7ff fe7c 	bl	8003b6c <calcChecksum>
    return sendI2Cmessage();
 8003e74:	f7ff feee 	bl	8003c54 <sendI2Cmessage>
 8003e78:	4603      	mov	r3, r0
}
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	3708      	adds	r7, #8
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}
 8003e82:	bf00      	nop
 8003e84:	2000002c 	.word	0x2000002c
 8003e88:	20000000 	.word	0x20000000

08003e8c <UbloxI2CWriteReadPolling>:
}


UBLOX_transResult UbloxI2CWriteReadPolling(uint16_t DevAddress, uint8_t *TData, uint16_t TDataLen,
										uint8_t *RData, uint16_t RDataLen, uint32_t Timeout)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b088      	sub	sp, #32
 8003e90:	af02      	add	r7, sp, #8
 8003e92:	60b9      	str	r1, [r7, #8]
 8003e94:	607b      	str	r3, [r7, #4]
 8003e96:	4603      	mov	r3, r0
 8003e98:	81fb      	strh	r3, [r7, #14]
 8003e9a:	4613      	mov	r3, r2
 8003e9c:	81bb      	strh	r3, [r7, #12]
	HAL_StatusTypeDef ret = 0x00;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	75fb      	strb	r3, [r7, #23]

	if (HAL_I2C_Master_Transmit(&hi2c1, DevAddress, TData, TDataLen, Timeout)!= HAL_OK ){
 8003ea2:	89ba      	ldrh	r2, [r7, #12]
 8003ea4:	89f9      	ldrh	r1, [r7, #14]
 8003ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea8:	9300      	str	r3, [sp, #0]
 8003eaa:	4613      	mov	r3, r2
 8003eac:	68ba      	ldr	r2, [r7, #8]
 8003eae:	480d      	ldr	r0, [pc, #52]	; (8003ee4 <UbloxI2CWriteReadPolling+0x58>)
 8003eb0:	f003 f95c 	bl	800716c <HAL_I2C_Master_Transmit>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d001      	beq.n	8003ebe <UbloxI2CWriteReadPolling+0x32>
		return TRANS_ERROR;
 8003eba:	2302      	movs	r3, #2
 8003ebc:	e00e      	b.n	8003edc <UbloxI2CWriteReadPolling+0x50>
	}
	// Read Response
	if (HAL_I2C_Master_Receive(&hi2c1, DevAddress, RData, RDataLen, Timeout) != HAL_OK){
 8003ebe:	8c3a      	ldrh	r2, [r7, #32]
 8003ec0:	89f9      	ldrh	r1, [r7, #14]
 8003ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec4:	9300      	str	r3, [sp, #0]
 8003ec6:	4613      	mov	r3, r2
 8003ec8:	687a      	ldr	r2, [r7, #4]
 8003eca:	4806      	ldr	r0, [pc, #24]	; (8003ee4 <UbloxI2CWriteReadPolling+0x58>)
 8003ecc:	f003 fa42 	bl	8007354 <HAL_I2C_Master_Receive>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d001      	beq.n	8003eda <UbloxI2CWriteReadPolling+0x4e>
		return RECEIVE_ERROR;
 8003ed6:	2303      	movs	r3, #3
 8003ed8:	e000      	b.n	8003edc <UbloxI2CWriteReadPolling+0x50>
	}
	return TRANS_OK;
 8003eda:	2304      	movs	r3, #4
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	3718      	adds	r7, #24
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}
 8003ee4:	200002f0 	.word	0x200002f0

08003ee8 <tick_gyro>:

uint16_t gyro_offset_counter = 0;
gyro_data_t gyro_sum;
gyro_data_t gyro_mean;

void tick_gyro(mems_data_t * mems_data){
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b082      	sub	sp, #8
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]

    lsm6_acc_read(mems_data);
 8003ef0:	6878      	ldr	r0, [r7, #4]
 8003ef2:	f000 f991 	bl	8004218 <lsm6_acc_read>
    lis3_magn_read(mems_data);
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	f000 f9f6 	bl	80042e8 <lis3_magn_read>
    gyro_read(mems_data);
 8003efc:	6878      	ldr	r0, [r7, #4]
 8003efe:	f000 f909 	bl	8004114 <gyro_read>
//    debugPrintMEMS(mems_data);
}
 8003f02:	bf00      	nop
 8003f04:	3708      	adds	r7, #8
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}
	...

08003f0c <lsm6_bus_init>:


uint8_t lsm6_bus_init(void)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 8003f10:	4b1b      	ldr	r3, [pc, #108]	; (8003f80 <lsm6_bus_init+0x74>)
 8003f12:	4a1c      	ldr	r2, [pc, #112]	; (8003f84 <lsm6_bus_init+0x78>)
 8003f14:	601a      	str	r2, [r3, #0]
//hi2c2.Init.Timing = 0x00B03FDB;
  hi2c2.Init.Timing = 0x307075B1;
 8003f16:	4b1a      	ldr	r3, [pc, #104]	; (8003f80 <lsm6_bus_init+0x74>)
 8003f18:	4a1b      	ldr	r2, [pc, #108]	; (8003f88 <lsm6_bus_init+0x7c>)
 8003f1a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8003f1c:	4b18      	ldr	r3, [pc, #96]	; (8003f80 <lsm6_bus_init+0x74>)
 8003f1e:	2200      	movs	r2, #0
 8003f20:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003f22:	4b17      	ldr	r3, [pc, #92]	; (8003f80 <lsm6_bus_init+0x74>)
 8003f24:	2201      	movs	r2, #1
 8003f26:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003f28:	4b15      	ldr	r3, [pc, #84]	; (8003f80 <lsm6_bus_init+0x74>)
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8003f2e:	4b14      	ldr	r3, [pc, #80]	; (8003f80 <lsm6_bus_init+0x74>)
 8003f30:	2200      	movs	r2, #0
 8003f32:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003f34:	4b12      	ldr	r3, [pc, #72]	; (8003f80 <lsm6_bus_init+0x74>)
 8003f36:	2200      	movs	r2, #0
 8003f38:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003f3a:	4b11      	ldr	r3, [pc, #68]	; (8003f80 <lsm6_bus_init+0x74>)
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003f40:	4b0f      	ldr	r3, [pc, #60]	; (8003f80 <lsm6_bus_init+0x74>)
 8003f42:	2200      	movs	r2, #0
 8003f44:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8003f46:	480e      	ldr	r0, [pc, #56]	; (8003f80 <lsm6_bus_init+0x74>)
 8003f48:	f003 f881 	bl	800704e <HAL_I2C_Init>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d001      	beq.n	8003f56 <lsm6_bus_init+0x4a>
  {
    return 1;
 8003f52:	2301      	movs	r3, #1
 8003f54:	e012      	b.n	8003f7c <lsm6_bus_init+0x70>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003f56:	2100      	movs	r1, #0
 8003f58:	4809      	ldr	r0, [pc, #36]	; (8003f80 <lsm6_bus_init+0x74>)
 8003f5a:	f004 f859 	bl	8008010 <HAL_I2CEx_ConfigAnalogFilter>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d001      	beq.n	8003f68 <lsm6_bus_init+0x5c>
  {
    return 2;
 8003f64:	2302      	movs	r3, #2
 8003f66:	e009      	b.n	8003f7c <lsm6_bus_init+0x70>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8003f68:	2100      	movs	r1, #0
 8003f6a:	4805      	ldr	r0, [pc, #20]	; (8003f80 <lsm6_bus_init+0x74>)
 8003f6c:	f004 f89b 	bl	80080a6 <HAL_I2CEx_ConfigDigitalFilter>
 8003f70:	4603      	mov	r3, r0
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d001      	beq.n	8003f7a <lsm6_bus_init+0x6e>
  {
    return 3;
 8003f76:	2303      	movs	r3, #3
 8003f78:	e000      	b.n	8003f7c <lsm6_bus_init+0x70>
  }
  return 0;
 8003f7a:	2300      	movs	r3, #0

}
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	bd80      	pop	{r7, pc}
 8003f80:	200003bc 	.word	0x200003bc
 8003f84:	40005800 	.word	0x40005800
 8003f88:	307075b1 	.word	0x307075b1

08003f8c <gyro_init>:
		return res;
	}
	return addr;
}

HAL_StatusTypeDef gyro_init(void){
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b086      	sub	sp, #24
 8003f90:	af04      	add	r7, sp, #16
    uint8_t ctrl2_val = 0x50;   //gyro 208Hz-250dps
 8003f92:	2350      	movs	r3, #80	; 0x50
 8003f94:	71fb      	strb	r3, [r7, #7]
    uint8_t ctrl3_val = 0x04;   // block data update - reg addr auto incr
 8003f96:	2304      	movs	r3, #4
 8003f98:	71bb      	strb	r3, [r7, #6]
    uint8_t wakeUp = 0x10;
 8003f9a:	2310      	movs	r3, #16
 8003f9c:	717b      	strb	r3, [r7, #5]
    uint8_t ctrl7_val = 0xD0;
 8003f9e:	23d0      	movs	r3, #208	; 0xd0
 8003fa0:	713b      	strb	r3, [r7, #4]
    HAL_I2C_Mem_Write(&hi2c2, LSM6, WAKE_UP_DUR, I2C_MEMADD_SIZE_8BIT, &wakeUp, 1, 20);
 8003fa2:	2314      	movs	r3, #20
 8003fa4:	9302      	str	r3, [sp, #8]
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	9301      	str	r3, [sp, #4]
 8003faa:	1d7b      	adds	r3, r7, #5
 8003fac:	9300      	str	r3, [sp, #0]
 8003fae:	2301      	movs	r3, #1
 8003fb0:	225c      	movs	r2, #92	; 0x5c
 8003fb2:	21d4      	movs	r1, #212	; 0xd4
 8003fb4:	4815      	ldr	r0, [pc, #84]	; (800400c <gyro_init+0x80>)
 8003fb6:	f003 fac3 	bl	8007540 <HAL_I2C_Mem_Write>
    HAL_I2C_Mem_Write(&hi2c2, LSM6, CTRL2_G, I2C_MEMADD_SIZE_8BIT, &ctrl2_val, 1, 20);
 8003fba:	2314      	movs	r3, #20
 8003fbc:	9302      	str	r3, [sp, #8]
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	9301      	str	r3, [sp, #4]
 8003fc2:	1dfb      	adds	r3, r7, #7
 8003fc4:	9300      	str	r3, [sp, #0]
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	2211      	movs	r2, #17
 8003fca:	21d4      	movs	r1, #212	; 0xd4
 8003fcc:	480f      	ldr	r0, [pc, #60]	; (800400c <gyro_init+0x80>)
 8003fce:	f003 fab7 	bl	8007540 <HAL_I2C_Mem_Write>
    HAL_I2C_Mem_Write(&hi2c2 , LSM6, CTRL7_G, I2C_MEMADD_SIZE_8BIT, &ctrl7_val, 1, 20);
 8003fd2:	2314      	movs	r3, #20
 8003fd4:	9302      	str	r3, [sp, #8]
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	9301      	str	r3, [sp, #4]
 8003fda:	1d3b      	adds	r3, r7, #4
 8003fdc:	9300      	str	r3, [sp, #0]
 8003fde:	2301      	movs	r3, #1
 8003fe0:	2216      	movs	r2, #22
 8003fe2:	21d4      	movs	r1, #212	; 0xd4
 8003fe4:	4809      	ldr	r0, [pc, #36]	; (800400c <gyro_init+0x80>)
 8003fe6:	f003 faab 	bl	8007540 <HAL_I2C_Mem_Write>
    return HAL_I2C_Mem_Write(&hi2c2, LSM6, CTRL3_C, I2C_MEMADD_SIZE_8BIT, &ctrl3_val, 1, 20);
 8003fea:	2314      	movs	r3, #20
 8003fec:	9302      	str	r3, [sp, #8]
 8003fee:	2301      	movs	r3, #1
 8003ff0:	9301      	str	r3, [sp, #4]
 8003ff2:	1dbb      	adds	r3, r7, #6
 8003ff4:	9300      	str	r3, [sp, #0]
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	2212      	movs	r2, #18
 8003ffa:	21d4      	movs	r1, #212	; 0xd4
 8003ffc:	4803      	ldr	r0, [pc, #12]	; (800400c <gyro_init+0x80>)
 8003ffe:	f003 fa9f 	bl	8007540 <HAL_I2C_Mem_Write>
 8004002:	4603      	mov	r3, r0
}
 8004004:	4618      	mov	r0, r3
 8004006:	3708      	adds	r7, #8
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}
 800400c:	200003bc 	.word	0x200003bc

08004010 <lsm6_acc_init>:

HAL_StatusTypeDef lsm6_acc_init(void){
 8004010:	b580      	push	{r7, lr}
 8004012:	b086      	sub	sp, #24
 8004014:	af04      	add	r7, sp, #16
    uint8_t ctrl1_val = 0x50;   //acc off
 8004016:	2350      	movs	r3, #80	; 0x50
 8004018:	71fb      	strb	r3, [r7, #7]
    uint8_t ctrl10_val = 0x20; //Enable timestamp
 800401a:	2320      	movs	r3, #32
 800401c:	71bb      	strb	r3, [r7, #6]
    HAL_I2C_Mem_Write(&hi2c2, LSM6, CTRL1_XL, I2C_MEMADD_SIZE_8BIT, &ctrl1_val, 1, 20);
 800401e:	2314      	movs	r3, #20
 8004020:	9302      	str	r3, [sp, #8]
 8004022:	2301      	movs	r3, #1
 8004024:	9301      	str	r3, [sp, #4]
 8004026:	1dfb      	adds	r3, r7, #7
 8004028:	9300      	str	r3, [sp, #0]
 800402a:	2301      	movs	r3, #1
 800402c:	2210      	movs	r2, #16
 800402e:	21d4      	movs	r1, #212	; 0xd4
 8004030:	4809      	ldr	r0, [pc, #36]	; (8004058 <lsm6_acc_init+0x48>)
 8004032:	f003 fa85 	bl	8007540 <HAL_I2C_Mem_Write>
    return HAL_I2C_Mem_Write(&hi2c2, LSM6, CTRL10_C, I2C_MEMADD_SIZE_8BIT, &ctrl10_val, 1, 20);
 8004036:	2314      	movs	r3, #20
 8004038:	9302      	str	r3, [sp, #8]
 800403a:	2301      	movs	r3, #1
 800403c:	9301      	str	r3, [sp, #4]
 800403e:	1dbb      	adds	r3, r7, #6
 8004040:	9300      	str	r3, [sp, #0]
 8004042:	2301      	movs	r3, #1
 8004044:	2219      	movs	r2, #25
 8004046:	21d4      	movs	r1, #212	; 0xd4
 8004048:	4803      	ldr	r0, [pc, #12]	; (8004058 <lsm6_acc_init+0x48>)
 800404a:	f003 fa79 	bl	8007540 <HAL_I2C_Mem_Write>
 800404e:	4603      	mov	r3, r0
}
 8004050:	4618      	mov	r0, r3
 8004052:	3708      	adds	r7, #8
 8004054:	46bd      	mov	sp, r7
 8004056:	bd80      	pop	{r7, pc}
 8004058:	200003bc 	.word	0x200003bc

0800405c <magn_init>:

HAL_StatusTypeDef magn_init(void){
 800405c:	b580      	push	{r7, lr}
 800405e:	b086      	sub	sp, #24
 8004060:	af04      	add	r7, sp, #16
	HAL_StatusTypeDef res = HAL_OK;
 8004062:	2300      	movs	r3, #0
 8004064:	71fb      	strb	r3, [r7, #7]
	uint8_t ctrl1_val = 0x42;
 8004066:	2342      	movs	r3, #66	; 0x42
 8004068:	71bb      	strb	r3, [r7, #6]
    uint8_t ctrl3_val = 0x00;
 800406a:	2300      	movs	r3, #0
 800406c:	717b      	strb	r3, [r7, #5]
    uint8_t ctrl4_val = 0x08;
 800406e:	2308      	movs	r3, #8
 8004070:	713b      	strb	r3, [r7, #4]
    uint8_t ctrl5_val = 0x40;
 8004072:	2340      	movs	r3, #64	; 0x40
 8004074:	70fb      	strb	r3, [r7, #3]
    res = HAL_I2C_Mem_Write(&hi2c2, LIS3_MAGN, CTRL_REG1_MG, I2C_MEMADD_SIZE_8BIT, &ctrl1_val, 1, 50);
 8004076:	2332      	movs	r3, #50	; 0x32
 8004078:	9302      	str	r3, [sp, #8]
 800407a:	2301      	movs	r3, #1
 800407c:	9301      	str	r3, [sp, #4]
 800407e:	1dbb      	adds	r3, r7, #6
 8004080:	9300      	str	r3, [sp, #0]
 8004082:	2301      	movs	r3, #1
 8004084:	2220      	movs	r2, #32
 8004086:	213c      	movs	r1, #60	; 0x3c
 8004088:	4821      	ldr	r0, [pc, #132]	; (8004110 <magn_init+0xb4>)
 800408a:	f003 fa59 	bl	8007540 <HAL_I2C_Mem_Write>
 800408e:	4603      	mov	r3, r0
 8004090:	71fb      	strb	r3, [r7, #7]
    if (res != HAL_OK)return res;
 8004092:	79fb      	ldrb	r3, [r7, #7]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d001      	beq.n	800409c <magn_init+0x40>
 8004098:	79fb      	ldrb	r3, [r7, #7]
 800409a:	e034      	b.n	8004106 <magn_init+0xaa>
    res = HAL_I2C_Mem_Write(&hi2c2, LIS3_MAGN, CTRL_REG3_MG, I2C_MEMADD_SIZE_8BIT, &ctrl3_val, 1, 50);
 800409c:	2332      	movs	r3, #50	; 0x32
 800409e:	9302      	str	r3, [sp, #8]
 80040a0:	2301      	movs	r3, #1
 80040a2:	9301      	str	r3, [sp, #4]
 80040a4:	1d7b      	adds	r3, r7, #5
 80040a6:	9300      	str	r3, [sp, #0]
 80040a8:	2301      	movs	r3, #1
 80040aa:	2222      	movs	r2, #34	; 0x22
 80040ac:	213c      	movs	r1, #60	; 0x3c
 80040ae:	4818      	ldr	r0, [pc, #96]	; (8004110 <magn_init+0xb4>)
 80040b0:	f003 fa46 	bl	8007540 <HAL_I2C_Mem_Write>
 80040b4:	4603      	mov	r3, r0
 80040b6:	71fb      	strb	r3, [r7, #7]
    if (res != HAL_OK)return res;
 80040b8:	79fb      	ldrb	r3, [r7, #7]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d001      	beq.n	80040c2 <magn_init+0x66>
 80040be:	79fb      	ldrb	r3, [r7, #7]
 80040c0:	e021      	b.n	8004106 <magn_init+0xaa>
    res = HAL_I2C_Mem_Write(&hi2c2, LIS3_MAGN, CTRL_REG4_MG, I2C_MEMADD_SIZE_8BIT, &ctrl4_val, 1, 50);
 80040c2:	2332      	movs	r3, #50	; 0x32
 80040c4:	9302      	str	r3, [sp, #8]
 80040c6:	2301      	movs	r3, #1
 80040c8:	9301      	str	r3, [sp, #4]
 80040ca:	1d3b      	adds	r3, r7, #4
 80040cc:	9300      	str	r3, [sp, #0]
 80040ce:	2301      	movs	r3, #1
 80040d0:	2223      	movs	r2, #35	; 0x23
 80040d2:	213c      	movs	r1, #60	; 0x3c
 80040d4:	480e      	ldr	r0, [pc, #56]	; (8004110 <magn_init+0xb4>)
 80040d6:	f003 fa33 	bl	8007540 <HAL_I2C_Mem_Write>
 80040da:	4603      	mov	r3, r0
 80040dc:	71fb      	strb	r3, [r7, #7]
    if (res != HAL_OK)return res;
 80040de:	79fb      	ldrb	r3, [r7, #7]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d001      	beq.n	80040e8 <magn_init+0x8c>
 80040e4:	79fb      	ldrb	r3, [r7, #7]
 80040e6:	e00e      	b.n	8004106 <magn_init+0xaa>
    res = HAL_I2C_Mem_Write(&hi2c2, LIS3_MAGN, CTRL_REG5_MG, I2C_MEMADD_SIZE_8BIT, &ctrl5_val, 1, 50);
 80040e8:	2332      	movs	r3, #50	; 0x32
 80040ea:	9302      	str	r3, [sp, #8]
 80040ec:	2301      	movs	r3, #1
 80040ee:	9301      	str	r3, [sp, #4]
 80040f0:	1cfb      	adds	r3, r7, #3
 80040f2:	9300      	str	r3, [sp, #0]
 80040f4:	2301      	movs	r3, #1
 80040f6:	2224      	movs	r2, #36	; 0x24
 80040f8:	213c      	movs	r1, #60	; 0x3c
 80040fa:	4805      	ldr	r0, [pc, #20]	; (8004110 <magn_init+0xb4>)
 80040fc:	f003 fa20 	bl	8007540 <HAL_I2C_Mem_Write>
 8004100:	4603      	mov	r3, r0
 8004102:	71fb      	strb	r3, [r7, #7]
    return res;
 8004104:	79fb      	ldrb	r3, [r7, #7]
}
 8004106:	4618      	mov	r0, r3
 8004108:	3708      	adds	r7, #8
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}
 800410e:	bf00      	nop
 8004110:	200003bc 	.word	0x200003bc

08004114 <gyro_read>:

HAL_StatusTypeDef gyro_read(mems_data_t *mems_data){
 8004114:	b580      	push	{r7, lr}
 8004116:	b08c      	sub	sp, #48	; 0x30
 8004118:	af04      	add	r7, sp, #16
 800411a:	6078      	str	r0, [r7, #4]
	uint8_t data[6]={0};
 800411c:	2300      	movs	r3, #0
 800411e:	613b      	str	r3, [r7, #16]
 8004120:	2300      	movs	r3, #0
 8004122:	82bb      	strh	r3, [r7, #20]
	uint8_t ts_data[4]={0};
 8004124:	2300      	movs	r3, #0
 8004126:	60fb      	str	r3, [r7, #12]
	int16_t gyro_x, gyro_y, gyro_z;
	HAL_StatusTypeDef res = HAL_OK;
 8004128:	2300      	movs	r3, #0
 800412a:	77fb      	strb	r3, [r7, #31]
    HAL_I2C_Mem_Read(&hi2c2, LSM6, OUTX_L_G, I2C_MEMADD_SIZE_8BIT, data, 6, 50);
 800412c:	2332      	movs	r3, #50	; 0x32
 800412e:	9302      	str	r3, [sp, #8]
 8004130:	2306      	movs	r3, #6
 8004132:	9301      	str	r3, [sp, #4]
 8004134:	f107 0310 	add.w	r3, r7, #16
 8004138:	9300      	str	r3, [sp, #0]
 800413a:	2301      	movs	r3, #1
 800413c:	2222      	movs	r2, #34	; 0x22
 800413e:	21d4      	movs	r1, #212	; 0xd4
 8004140:	4833      	ldr	r0, [pc, #204]	; (8004210 <gyro_read+0xfc>)
 8004142:	f003 fb11 	bl	8007768 <HAL_I2C_Mem_Read>
    if (res != HAL_OK){
 8004146:	7ffb      	ldrb	r3, [r7, #31]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d001      	beq.n	8004150 <gyro_read+0x3c>
		return res;
 800414c:	7ffb      	ldrb	r3, [r7, #31]
 800414e:	e05b      	b.n	8004208 <gyro_read+0xf4>
	}
    HAL_I2C_Mem_Read(&hi2c2, LSM6, TIMESTAMP0, I2C_MEMADD_SIZE_8BIT, ts_data, 3, 50);
 8004150:	2332      	movs	r3, #50	; 0x32
 8004152:	9302      	str	r3, [sp, #8]
 8004154:	2303      	movs	r3, #3
 8004156:	9301      	str	r3, [sp, #4]
 8004158:	f107 030c 	add.w	r3, r7, #12
 800415c:	9300      	str	r3, [sp, #0]
 800415e:	2301      	movs	r3, #1
 8004160:	2240      	movs	r2, #64	; 0x40
 8004162:	21d4      	movs	r1, #212	; 0xd4
 8004164:	482a      	ldr	r0, [pc, #168]	; (8004210 <gyro_read+0xfc>)
 8004166:	f003 faff 	bl	8007768 <HAL_I2C_Mem_Read>
    if (res != HAL_OK){
 800416a:	7ffb      	ldrb	r3, [r7, #31]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d001      	beq.n	8004174 <gyro_read+0x60>
		return res;
 8004170:	7ffb      	ldrb	r3, [r7, #31]
 8004172:	e049      	b.n	8004208 <gyro_read+0xf4>
	}
    gyro_x = ((int16_t)((data[1] << 8) | data[0]));
 8004174:	7c7b      	ldrb	r3, [r7, #17]
 8004176:	021b      	lsls	r3, r3, #8
 8004178:	b21a      	sxth	r2, r3
 800417a:	7c3b      	ldrb	r3, [r7, #16]
 800417c:	b21b      	sxth	r3, r3
 800417e:	4313      	orrs	r3, r2
 8004180:	83bb      	strh	r3, [r7, #28]
    gyro_y = ((int16_t)((data[3] << 8) | data[2]));
 8004182:	7cfb      	ldrb	r3, [r7, #19]
 8004184:	021b      	lsls	r3, r3, #8
 8004186:	b21a      	sxth	r2, r3
 8004188:	7cbb      	ldrb	r3, [r7, #18]
 800418a:	b21b      	sxth	r3, r3
 800418c:	4313      	orrs	r3, r2
 800418e:	837b      	strh	r3, [r7, #26]
    gyro_z = ((int16_t)((data[5] << 8) | data[4]));
 8004190:	7d7b      	ldrb	r3, [r7, #21]
 8004192:	021b      	lsls	r3, r3, #8
 8004194:	b21a      	sxth	r2, r3
 8004196:	7d3b      	ldrb	r3, [r7, #20]
 8004198:	b21b      	sxth	r3, r3
 800419a:	4313      	orrs	r3, r2
 800419c:	833b      	strh	r3, [r7, #24]
    mems_data->gyro.gyro_x = - (float)(gyro_x / 131.1f);// * -1.0f;
 800419e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80041a2:	ee07 3a90 	vmov	s15, r3
 80041a6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80041aa:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8004214 <gyro_read+0x100>
 80041ae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80041b2:	eef1 7a67 	vneg.f32	s15, s15
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	edc3 7a00 	vstr	s15, [r3]
    mems_data->gyro.gyro_y = - (float)(gyro_y / 131.1f);// * -1.0f;
 80041bc:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80041c0:	ee07 3a90 	vmov	s15, r3
 80041c4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80041c8:	eddf 6a12 	vldr	s13, [pc, #72]	; 8004214 <gyro_read+0x100>
 80041cc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80041d0:	eef1 7a67 	vneg.f32	s15, s15
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	edc3 7a01 	vstr	s15, [r3, #4]
    mems_data->gyro.gyro_z =   (float)(gyro_z / 131.1f);// * -1.0f;
 80041da:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80041de:	ee07 3a90 	vmov	s15, r3
 80041e2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80041e6:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8004214 <gyro_read+0x100>
 80041ea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	edc3 7a02 	vstr	s15, [r3, #8]
    mems_data->timestamp = (int) ((ts_data[2]<<16)|(ts_data[1]<<8)|(ts_data[0]));
 80041f4:	7bbb      	ldrb	r3, [r7, #14]
 80041f6:	041a      	lsls	r2, r3, #16
 80041f8:	7b7b      	ldrb	r3, [r7, #13]
 80041fa:	021b      	lsls	r3, r3, #8
 80041fc:	4313      	orrs	r3, r2
 80041fe:	7b3a      	ldrb	r2, [r7, #12]
 8004200:	431a      	orrs	r2, r3
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	625a      	str	r2, [r3, #36]	; 0x24
    return res;
 8004206:	7ffb      	ldrb	r3, [r7, #31]
}
 8004208:	4618      	mov	r0, r3
 800420a:	3720      	adds	r7, #32
 800420c:	46bd      	mov	sp, r7
 800420e:	bd80      	pop	{r7, pc}
 8004210:	200003bc 	.word	0x200003bc
 8004214:	4303199a 	.word	0x4303199a

08004218 <lsm6_acc_read>:

//HAL_StatusTypeDef gyroReadTS(mems_data_t){
//
//}

HAL_StatusTypeDef lsm6_acc_read(mems_data_t *mems_data){
 8004218:	b580      	push	{r7, lr}
 800421a:	b08a      	sub	sp, #40	; 0x28
 800421c:	af04      	add	r7, sp, #16
 800421e:	6078      	str	r0, [r7, #4]
	uint8_t data[6] = {0};
 8004220:	2300      	movs	r3, #0
 8004222:	60bb      	str	r3, [r7, #8]
 8004224:	2300      	movs	r3, #0
 8004226:	81bb      	strh	r3, [r7, #12]
	int16_t acc_x, acc_y, acc_z;
	HAL_StatusTypeDef res = HAL_OK;
 8004228:	2300      	movs	r3, #0
 800422a:	75fb      	strb	r3, [r7, #23]
	res = HAL_I2C_Mem_Read(&hi2c2, LSM6, OUTX_L_A, I2C_MEMADD_SIZE_8BIT, data, 6, 50);
 800422c:	2332      	movs	r3, #50	; 0x32
 800422e:	9302      	str	r3, [sp, #8]
 8004230:	2306      	movs	r3, #6
 8004232:	9301      	str	r3, [sp, #4]
 8004234:	f107 0308 	add.w	r3, r7, #8
 8004238:	9300      	str	r3, [sp, #0]
 800423a:	2301      	movs	r3, #1
 800423c:	2228      	movs	r2, #40	; 0x28
 800423e:	21d4      	movs	r1, #212	; 0xd4
 8004240:	4827      	ldr	r0, [pc, #156]	; (80042e0 <lsm6_acc_read+0xc8>)
 8004242:	f003 fa91 	bl	8007768 <HAL_I2C_Mem_Read>
 8004246:	4603      	mov	r3, r0
 8004248:	75fb      	strb	r3, [r7, #23]
	if (res != HAL_OK){
 800424a:	7dfb      	ldrb	r3, [r7, #23]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d001      	beq.n	8004254 <lsm6_acc_read+0x3c>
		return res;
 8004250:	7dfb      	ldrb	r3, [r7, #23]
 8004252:	e040      	b.n	80042d6 <lsm6_acc_read+0xbe>
	}
    acc_x = ((int16_t)((data[1] << 8) | data[0]));
 8004254:	7a7b      	ldrb	r3, [r7, #9]
 8004256:	021b      	lsls	r3, r3, #8
 8004258:	b21a      	sxth	r2, r3
 800425a:	7a3b      	ldrb	r3, [r7, #8]
 800425c:	b21b      	sxth	r3, r3
 800425e:	4313      	orrs	r3, r2
 8004260:	82bb      	strh	r3, [r7, #20]
    acc_y = ((int16_t)((data[3] << 8) | data[2]));
 8004262:	7afb      	ldrb	r3, [r7, #11]
 8004264:	021b      	lsls	r3, r3, #8
 8004266:	b21a      	sxth	r2, r3
 8004268:	7abb      	ldrb	r3, [r7, #10]
 800426a:	b21b      	sxth	r3, r3
 800426c:	4313      	orrs	r3, r2
 800426e:	827b      	strh	r3, [r7, #18]
    acc_z = ((int16_t)((data[5] << 8) | data[4]));
 8004270:	7b7b      	ldrb	r3, [r7, #13]
 8004272:	021b      	lsls	r3, r3, #8
 8004274:	b21a      	sxth	r2, r3
 8004276:	7b3b      	ldrb	r3, [r7, #12]
 8004278:	b21b      	sxth	r3, r3
 800427a:	4313      	orrs	r3, r2
 800427c:	823b      	strh	r3, [r7, #16]
    mems_data->acc.acc_x = - (float)(acc_x / 16384.0f);//  * -1.0f;
 800427e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004282:	ee07 3a90 	vmov	s15, r3
 8004286:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800428a:	eddf 6a16 	vldr	s13, [pc, #88]	; 80042e4 <lsm6_acc_read+0xcc>
 800428e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004292:	eef1 7a67 	vneg.f32	s15, s15
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	edc3 7a03 	vstr	s15, [r3, #12]
    mems_data->acc.acc_y = - (float)(acc_y / 16384.0f);// * -1.0f;
 800429c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80042a0:	ee07 3a90 	vmov	s15, r3
 80042a4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80042a8:	eddf 6a0e 	vldr	s13, [pc, #56]	; 80042e4 <lsm6_acc_read+0xcc>
 80042ac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80042b0:	eef1 7a67 	vneg.f32	s15, s15
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	edc3 7a04 	vstr	s15, [r3, #16]
    mems_data->acc.acc_z =	(float)(acc_z / 16384.0f);// * -1.0f;
 80042ba:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80042be:	ee07 3a90 	vmov	s15, r3
 80042c2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80042c6:	eddf 6a07 	vldr	s13, [pc, #28]	; 80042e4 <lsm6_acc_read+0xcc>
 80042ca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	edc3 7a05 	vstr	s15, [r3, #20]
    return res;
 80042d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	3718      	adds	r7, #24
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}
 80042de:	bf00      	nop
 80042e0:	200003bc 	.word	0x200003bc
 80042e4:	46800000 	.word	0x46800000

080042e8 <lis3_magn_read>:

HAL_StatusTypeDef lis3_magn_read(mems_data_t *mems_data){
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b08a      	sub	sp, #40	; 0x28
 80042ec:	af04      	add	r7, sp, #16
 80042ee:	6078      	str	r0, [r7, #4]
	uint8_t data[6] = {0};
 80042f0:	2300      	movs	r3, #0
 80042f2:	60bb      	str	r3, [r7, #8]
 80042f4:	2300      	movs	r3, #0
 80042f6:	81bb      	strh	r3, [r7, #12]
    int16_t magn_x, magn_y, magn_z;
    HAL_StatusTypeDef res = HAL_OK;
 80042f8:	2300      	movs	r3, #0
 80042fa:	75fb      	strb	r3, [r7, #23]

    HAL_I2C_Mem_Read(&hi2c2, LIS3_MAGN, OUT_X_L_MG, I2C_MEMADD_SIZE_8BIT, data, 6, 50);
 80042fc:	2332      	movs	r3, #50	; 0x32
 80042fe:	9302      	str	r3, [sp, #8]
 8004300:	2306      	movs	r3, #6
 8004302:	9301      	str	r3, [sp, #4]
 8004304:	f107 0308 	add.w	r3, r7, #8
 8004308:	9300      	str	r3, [sp, #0]
 800430a:	2301      	movs	r3, #1
 800430c:	2228      	movs	r2, #40	; 0x28
 800430e:	213c      	movs	r1, #60	; 0x3c
 8004310:	4824      	ldr	r0, [pc, #144]	; (80043a4 <lis3_magn_read+0xbc>)
 8004312:	f003 fa29 	bl	8007768 <HAL_I2C_Mem_Read>
    if (res != HAL_OK){
 8004316:	7dfb      	ldrb	r3, [r7, #23]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d001      	beq.n	8004320 <lis3_magn_read+0x38>
    	return res;
 800431c:	7dfb      	ldrb	r3, [r7, #23]
 800431e:	e03c      	b.n	800439a <lis3_magn_read+0xb2>
	}
    magn_x = ((int16_t)((data[1] << 8) | data[0]));
 8004320:	7a7b      	ldrb	r3, [r7, #9]
 8004322:	021b      	lsls	r3, r3, #8
 8004324:	b21a      	sxth	r2, r3
 8004326:	7a3b      	ldrb	r3, [r7, #8]
 8004328:	b21b      	sxth	r3, r3
 800432a:	4313      	orrs	r3, r2
 800432c:	82bb      	strh	r3, [r7, #20]
    magn_y = ((int16_t)((data[3] << 8) | data[2]));
 800432e:	7afb      	ldrb	r3, [r7, #11]
 8004330:	021b      	lsls	r3, r3, #8
 8004332:	b21a      	sxth	r2, r3
 8004334:	7abb      	ldrb	r3, [r7, #10]
 8004336:	b21b      	sxth	r3, r3
 8004338:	4313      	orrs	r3, r2
 800433a:	827b      	strh	r3, [r7, #18]
    magn_z = ((int16_t)((data[5] << 8) | data[4]));
 800433c:	7b7b      	ldrb	r3, [r7, #13]
 800433e:	021b      	lsls	r3, r3, #8
 8004340:	b21a      	sxth	r2, r3
 8004342:	7b3b      	ldrb	r3, [r7, #12]
 8004344:	b21b      	sxth	r3, r3
 8004346:	4313      	orrs	r3, r2
 8004348:	823b      	strh	r3, [r7, #16]
    mems_data->magn.magn_x = (float)(magn_x / 10.0f);
 800434a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800434e:	ee07 3a90 	vmov	s15, r3
 8004352:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004356:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800435a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	edc3 7a06 	vstr	s15, [r3, #24]
    mems_data->magn.magn_y = (float)(magn_y / 10.0f);
 8004364:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004368:	ee07 3a90 	vmov	s15, r3
 800436c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004370:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8004374:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	edc3 7a07 	vstr	s15, [r3, #28]
    mems_data->magn.magn_z = (float)(magn_z / 10.0f);
 800437e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004382:	ee07 3a90 	vmov	s15, r3
 8004386:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800438a:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800438e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	edc3 7a08 	vstr	s15, [r3, #32]
    return res;
 8004398:	7dfb      	ldrb	r3, [r7, #23]
}
 800439a:	4618      	mov	r0, r3
 800439c:	3718      	adds	r7, #24
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}
 80043a2:	bf00      	nop
 80043a4:	200003bc 	.word	0x200003bc

080043a8 <gyro_offset_calculation>:


uint8_t gyro_offset_calculation(mems_data_t *mems_data){
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b082      	sub	sp, #8
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
	gyro_read(mems_data);
 80043b0:	6878      	ldr	r0, [r7, #4]
 80043b2:	f7ff feaf 	bl	8004114 <gyro_read>
	gyro_sum.gyro_x += mems_data->gyro.gyro_x;
 80043b6:	4b39      	ldr	r3, [pc, #228]	; (800449c <gyro_offset_calculation+0xf4>)
 80043b8:	ed93 7a00 	vldr	s14, [r3]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	edd3 7a00 	vldr	s15, [r3]
 80043c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80043c6:	4b35      	ldr	r3, [pc, #212]	; (800449c <gyro_offset_calculation+0xf4>)
 80043c8:	edc3 7a00 	vstr	s15, [r3]
	gyro_sum.gyro_y += mems_data->gyro.gyro_y;
 80043cc:	4b33      	ldr	r3, [pc, #204]	; (800449c <gyro_offset_calculation+0xf4>)
 80043ce:	ed93 7a01 	vldr	s14, [r3, #4]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	edd3 7a01 	vldr	s15, [r3, #4]
 80043d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80043dc:	4b2f      	ldr	r3, [pc, #188]	; (800449c <gyro_offset_calculation+0xf4>)
 80043de:	edc3 7a01 	vstr	s15, [r3, #4]
	gyro_sum.gyro_z += mems_data->gyro.gyro_z;
 80043e2:	4b2e      	ldr	r3, [pc, #184]	; (800449c <gyro_offset_calculation+0xf4>)
 80043e4:	ed93 7a02 	vldr	s14, [r3, #8]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	edd3 7a02 	vldr	s15, [r3, #8]
 80043ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80043f2:	4b2a      	ldr	r3, [pc, #168]	; (800449c <gyro_offset_calculation+0xf4>)
 80043f4:	edc3 7a02 	vstr	s15, [r3, #8]
	gyro_offset_counter++;
 80043f8:	4b29      	ldr	r3, [pc, #164]	; (80044a0 <gyro_offset_calculation+0xf8>)
 80043fa:	881b      	ldrh	r3, [r3, #0]
 80043fc:	3301      	adds	r3, #1
 80043fe:	b29a      	uxth	r2, r3
 8004400:	4b27      	ldr	r3, [pc, #156]	; (80044a0 <gyro_offset_calculation+0xf8>)
 8004402:	801a      	strh	r2, [r3, #0]
	if (gyro_offset_counter >= 1400){
 8004404:	4b26      	ldr	r3, [pc, #152]	; (80044a0 <gyro_offset_calculation+0xf8>)
 8004406:	881b      	ldrh	r3, [r3, #0]
 8004408:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 800440c:	d341      	bcc.n	8004492 <gyro_offset_calculation+0xea>
		gyro_mean.gyro_x = gyro_sum.gyro_x / gyro_offset_counter;
 800440e:	4b23      	ldr	r3, [pc, #140]	; (800449c <gyro_offset_calculation+0xf4>)
 8004410:	edd3 6a00 	vldr	s13, [r3]
 8004414:	4b22      	ldr	r3, [pc, #136]	; (80044a0 <gyro_offset_calculation+0xf8>)
 8004416:	881b      	ldrh	r3, [r3, #0]
 8004418:	ee07 3a90 	vmov	s15, r3
 800441c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004420:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004424:	4b1f      	ldr	r3, [pc, #124]	; (80044a4 <gyro_offset_calculation+0xfc>)
 8004426:	edc3 7a00 	vstr	s15, [r3]
		gyro_mean.gyro_y = gyro_sum.gyro_y / gyro_offset_counter;
 800442a:	4b1c      	ldr	r3, [pc, #112]	; (800449c <gyro_offset_calculation+0xf4>)
 800442c:	edd3 6a01 	vldr	s13, [r3, #4]
 8004430:	4b1b      	ldr	r3, [pc, #108]	; (80044a0 <gyro_offset_calculation+0xf8>)
 8004432:	881b      	ldrh	r3, [r3, #0]
 8004434:	ee07 3a90 	vmov	s15, r3
 8004438:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800443c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004440:	4b18      	ldr	r3, [pc, #96]	; (80044a4 <gyro_offset_calculation+0xfc>)
 8004442:	edc3 7a01 	vstr	s15, [r3, #4]
		gyro_mean.gyro_z = gyro_sum.gyro_z / gyro_offset_counter;
 8004446:	4b15      	ldr	r3, [pc, #84]	; (800449c <gyro_offset_calculation+0xf4>)
 8004448:	edd3 6a02 	vldr	s13, [r3, #8]
 800444c:	4b14      	ldr	r3, [pc, #80]	; (80044a0 <gyro_offset_calculation+0xf8>)
 800444e:	881b      	ldrh	r3, [r3, #0]
 8004450:	ee07 3a90 	vmov	s15, r3
 8004454:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004458:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800445c:	4b11      	ldr	r3, [pc, #68]	; (80044a4 <gyro_offset_calculation+0xfc>)
 800445e:	edc3 7a02 	vstr	s15, [r3, #8]
		setGyroOffset(gyro_mean);
 8004462:	4b10      	ldr	r3, [pc, #64]	; (80044a4 <gyro_offset_calculation+0xfc>)
 8004464:	edd3 6a00 	vldr	s13, [r3]
 8004468:	ed93 7a01 	vldr	s14, [r3, #4]
 800446c:	edd3 7a02 	vldr	s15, [r3, #8]
 8004470:	eeb0 0a66 	vmov.f32	s0, s13
 8004474:	eef0 0a47 	vmov.f32	s1, s14
 8004478:	eeb0 1a67 	vmov.f32	s2, s15
 800447c:	f7fc feae 	bl	80011dc <setGyroOffset>
		gyro_offset_counter = 0;
 8004480:	4b07      	ldr	r3, [pc, #28]	; (80044a0 <gyro_offset_calculation+0xf8>)
 8004482:	2200      	movs	r2, #0
 8004484:	801a      	strh	r2, [r3, #0]
		Flash_Write_CalTable(GYRO_OFFSET_ADDR, &gyro_mean);
 8004486:	4907      	ldr	r1, [pc, #28]	; (80044a4 <gyro_offset_calculation+0xfc>)
 8004488:	4807      	ldr	r0, [pc, #28]	; (80044a8 <gyro_offset_calculation+0x100>)
 800448a:	f7ff f923 	bl	80036d4 <Flash_Write_CalTable>
		return 0;
 800448e:	2300      	movs	r3, #0
 8004490:	e000      	b.n	8004494 <gyro_offset_calculation+0xec>
	}
	return 1;
 8004492:	2301      	movs	r3, #1
}
 8004494:	4618      	mov	r0, r3
 8004496:	3708      	adds	r7, #8
 8004498:	46bd      	mov	sp, r7
 800449a:	bd80      	pop	{r7, pc}
 800449c:	20000414 	.word	0x20000414
 80044a0:	20000410 	.word	0x20000410
 80044a4:	20000420 	.word	0x20000420
 80044a8:	080fd000 	.word	0x080fd000

080044ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80044ac:	b5b0      	push	{r4, r5, r7, lr}
 80044ae:	b09c      	sub	sp, #112	; 0x70
 80044b0:	af00      	add	r7, sp, #0

  HAL_Init();
 80044b2:	f001 ff2a 	bl	800630a <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 80044b6:	f000 fa0b 	bl	80048d0 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80044ba:	f000 fa5b 	bl	8004974 <MX_GPIO_Init>

  FusionInit();
 80044be:	f7fc fead 	bl	800121c <FusionInit>

  MX_USART1_UART_Init();
 80044c2:	f001 fcb5 	bl	8005e30 <MX_USART1_UART_Init>

  MX_UART4_Init();
 80044c6:	f001 fd05 	bl	8005ed4 <MX_UART4_Init>


  if (lsm6_bus_init() != 0){
 80044ca:	f7ff fd1f 	bl	8003f0c <lsm6_bus_init>
 80044ce:	4603      	mov	r3, r0
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d010      	beq.n	80044f6 <main+0x4a>
	  uint8_t Test[] = "Failed to init I2C bus\r\n";
 80044d4:	4b65      	ldr	r3, [pc, #404]	; (800466c <main+0x1c0>)
 80044d6:	f107 0454 	add.w	r4, r7, #84	; 0x54
 80044da:	461d      	mov	r5, r3
 80044dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80044de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80044e0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80044e4:	c403      	stmia	r4!, {r0, r1}
 80044e6:	7022      	strb	r2, [r4, #0]
	  uart_write_debug(Test, 10);
 80044e8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80044ec:	210a      	movs	r1, #10
 80044ee:	4618      	mov	r0, r3
 80044f0:	f001 fd7a 	bl	8005fe8 <uart_write_debug>
 80044f4:	e042      	b.n	800457c <main+0xd0>
  }
  else{
		  if (lsm6_acc_init() != HAL_OK){
 80044f6:	f7ff fd8b 	bl	8004010 <lsm6_acc_init>
 80044fa:	4603      	mov	r3, r0
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d00f      	beq.n	8004520 <main+0x74>
			  uint8_t Test[] = "Failed to init LSM6 acc\r\n";
 8004500:	4b5b      	ldr	r3, [pc, #364]	; (8004670 <main+0x1c4>)
 8004502:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8004506:	461d      	mov	r5, r3
 8004508:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800450a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800450c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004510:	c403      	stmia	r4!, {r0, r1}
 8004512:	8022      	strh	r2, [r4, #0]
			  uart_write_debug(Test, 10);
 8004514:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004518:	210a      	movs	r1, #10
 800451a:	4618      	mov	r0, r3
 800451c:	f001 fd64 	bl	8005fe8 <uart_write_debug>
		  }
		  if (gyro_init() != HAL_OK){
 8004520:	f7ff fd34 	bl	8003f8c <gyro_init>
 8004524:	4603      	mov	r3, r0
 8004526:	2b00      	cmp	r3, #0
 8004528:	d012      	beq.n	8004550 <main+0xa4>
			  uint8_t Test[] = "Failed to init LSM6 gyro\r\n";
 800452a:	4b52      	ldr	r3, [pc, #328]	; (8004674 <main+0x1c8>)
 800452c:	f107 041c 	add.w	r4, r7, #28
 8004530:	461d      	mov	r5, r3
 8004532:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004534:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004536:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800453a:	c403      	stmia	r4!, {r0, r1}
 800453c:	8022      	strh	r2, [r4, #0]
 800453e:	3402      	adds	r4, #2
 8004540:	0c13      	lsrs	r3, r2, #16
 8004542:	7023      	strb	r3, [r4, #0]
			  uart_write_debug(Test, 10);
 8004544:	f107 031c 	add.w	r3, r7, #28
 8004548:	210a      	movs	r1, #10
 800454a:	4618      	mov	r0, r3
 800454c:	f001 fd4c 	bl	8005fe8 <uart_write_debug>
		  }
		  if (magn_init() != HAL_OK){
 8004550:	f7ff fd84 	bl	800405c <magn_init>
 8004554:	4603      	mov	r3, r0
 8004556:	2b00      	cmp	r3, #0
 8004558:	d010      	beq.n	800457c <main+0xd0>
			  uint8_t Test[] = "Failed to init LIS3 magn\r\n";
 800455a:	4b47      	ldr	r3, [pc, #284]	; (8004678 <main+0x1cc>)
 800455c:	463c      	mov	r4, r7
 800455e:	461d      	mov	r5, r3
 8004560:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004562:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004564:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004568:	c403      	stmia	r4!, {r0, r1}
 800456a:	8022      	strh	r2, [r4, #0]
 800456c:	3402      	adds	r4, #2
 800456e:	0c13      	lsrs	r3, r2, #16
 8004570:	7023      	strb	r3, [r4, #0]
			  uart_write_debug(Test, 10);
 8004572:	463b      	mov	r3, r7
 8004574:	210a      	movs	r1, #10
 8004576:	4618      	mov	r0, r3
 8004578:	f001 fd36 	bl	8005fe8 <uart_write_debug>
		  }
  }
  if (ublox_i2c_bus_init() != HAL_OK){
 800457c:	f7ff f96c 	bl	8003858 <ublox_i2c_bus_init>
 8004580:	4603      	mov	r3, r0
 8004582:	2b00      	cmp	r3, #0
 8004584:	d004      	beq.n	8004590 <main+0xe4>
	  uart_write_debug("Failed to Initialize ublox bus\r\n", 10);
 8004586:	210a      	movs	r1, #10
 8004588:	483c      	ldr	r0, [pc, #240]	; (800467c <main+0x1d0>)
 800458a:	f001 fd2d 	bl	8005fe8 <uart_write_debug>
 800458e:	e011      	b.n	80045b4 <main+0x108>
  }
  else{
	  HAL_StatusTypeDef res;
	  res = ubloxInit();
 8004590:	f7ff fa0c 	bl	80039ac <ubloxInit>
 8004594:	4603      	mov	r3, r0
 8004596:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	  if (res != HAL_OK){
 800459a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d004      	beq.n	80045ac <main+0x100>
		  uart_write_debug("Failed to Initialize UBLOX\r\n", 10);
 80045a2:	210a      	movs	r1, #10
 80045a4:	4836      	ldr	r0, [pc, #216]	; (8004680 <main+0x1d4>)
 80045a6:	f001 fd1f 	bl	8005fe8 <uart_write_debug>
 80045aa:	e003      	b.n	80045b4 <main+0x108>
	  }
	  else{
		  uart_write_debug("Ublox Initialized!\r\n", 10);
 80045ac:	210a      	movs	r1, #10
 80045ae:	4835      	ldr	r0, [pc, #212]	; (8004684 <main+0x1d8>)
 80045b0:	f001 fd1a 	bl	8005fe8 <uart_write_debug>
	  }
  }

  /* Init scheduler */
  osKernelInitialize();
 80045b4:	f007 fe40 	bl	800c238 <osKernelInitialize>
  /* USER CODE BEGIN RTOS_MUTEX */
  debugUartMutex = osMutexNew(&uartMutex_attributes);
 80045b8:	4833      	ldr	r0, [pc, #204]	; (8004688 <main+0x1dc>)
 80045ba:	f008 f85f 	bl	800c67c <osMutexNew>
 80045be:	4603      	mov	r3, r0
 80045c0:	4a32      	ldr	r2, [pc, #200]	; (800468c <main+0x1e0>)
 80045c2:	6013      	str	r3, [r2, #0]
  i2cMutex = osMutexNew(&i2cMutex_attributes);
 80045c4:	4832      	ldr	r0, [pc, #200]	; (8004690 <main+0x1e4>)
 80045c6:	f008 f859 	bl	800c67c <osMutexNew>
 80045ca:	4603      	mov	r3, r0
 80045cc:	4a31      	ldr	r2, [pc, #196]	; (8004694 <main+0x1e8>)
 80045ce:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_MUTEX */
  memsQueueHandle = osMessageQueueNew (8, sizeof(mems_data_t), &memsQueue_attributes);
 80045d0:	4a31      	ldr	r2, [pc, #196]	; (8004698 <main+0x1ec>)
 80045d2:	2128      	movs	r1, #40	; 0x28
 80045d4:	2008      	movs	r0, #8
 80045d6:	f008 f95f 	bl	800c898 <osMessageQueueNew>
 80045da:	4603      	mov	r3, r0
 80045dc:	4a2f      	ldr	r2, [pc, #188]	; (800469c <main+0x1f0>)
 80045de:	6013      	str	r3, [r2, #0]
  outputQueueHandle = osMessageQueueNew (4, sizeof(FusionEuler), &outputQueue_attributes);
 80045e0:	4a2f      	ldr	r2, [pc, #188]	; (80046a0 <main+0x1f4>)
 80045e2:	210c      	movs	r1, #12
 80045e4:	2004      	movs	r0, #4
 80045e6:	f008 f957 	bl	800c898 <osMessageQueueNew>
 80045ea:	4603      	mov	r3, r0
 80045ec:	4a2d      	ldr	r2, [pc, #180]	; (80046a4 <main+0x1f8>)
 80045ee:	6013      	str	r3, [r2, #0]
  messageQueueHandle = osMessageQueueNew (8, RB_SIZE, &messageQueue_attributes);
 80045f0:	4a2d      	ldr	r2, [pc, #180]	; (80046a8 <main+0x1fc>)
 80045f2:	2128      	movs	r1, #40	; 0x28
 80045f4:	2008      	movs	r0, #8
 80045f6:	f008 f94f 	bl	800c898 <osMessageQueueNew>
 80045fa:	4603      	mov	r3, r0
 80045fc:	4a2b      	ldr	r2, [pc, #172]	; (80046ac <main+0x200>)
 80045fe:	6013      	str	r3, [r2, #0]
  /* EVENT FLAG FOR ACK RECEIVE */
  ack_rcvd = osEventFlagsNew(NULL);
 8004600:	2000      	movs	r0, #0
 8004602:	f007 ff52 	bl	800c4aa <osEventFlagsNew>
 8004606:	4603      	mov	r3, r0
 8004608:	4a29      	ldr	r2, [pc, #164]	; (80046b0 <main+0x204>)
 800460a:	6013      	str	r3, [r2, #0]
  //							//

  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800460c:	4a29      	ldr	r2, [pc, #164]	; (80046b4 <main+0x208>)
 800460e:	2100      	movs	r1, #0
 8004610:	4829      	ldr	r0, [pc, #164]	; (80046b8 <main+0x20c>)
 8004612:	f007 fe5b 	bl	800c2cc <osThreadNew>
 8004616:	4603      	mov	r3, r0
 8004618:	4a28      	ldr	r2, [pc, #160]	; (80046bc <main+0x210>)
 800461a:	6013      	str	r3, [r2, #0]

  readMemsTaskHandle = osThreadNew(readMemsTask, NULL, &readMemsTask_attributes);
 800461c:	4a28      	ldr	r2, [pc, #160]	; (80046c0 <main+0x214>)
 800461e:	2100      	movs	r1, #0
 8004620:	4828      	ldr	r0, [pc, #160]	; (80046c4 <main+0x218>)
 8004622:	f007 fe53 	bl	800c2cc <osThreadNew>
 8004626:	4603      	mov	r3, r0
 8004628:	4a27      	ldr	r2, [pc, #156]	; (80046c8 <main+0x21c>)
 800462a:	6013      	str	r3, [r2, #0]

//  calcHeadingTaskHandle = osThreadNew(calcHeadingTask, NULL, &calcHeadingTask_attributes);

  printOutTaskHandle = osThreadNew(printOutTask, NULL, &printOutTask_attributes);
 800462c:	4a27      	ldr	r2, [pc, #156]	; (80046cc <main+0x220>)
 800462e:	2100      	movs	r1, #0
 8004630:	4827      	ldr	r0, [pc, #156]	; (80046d0 <main+0x224>)
 8004632:	f007 fe4b 	bl	800c2cc <osThreadNew>
 8004636:	4603      	mov	r3, r0
 8004638:	4a26      	ldr	r2, [pc, #152]	; (80046d4 <main+0x228>)
 800463a:	6013      	str	r3, [r2, #0]

//  getCoorsTaskHandle = osThreadNew(getCoorsTask, NULL, &getCoorsTask_attributes);

//  sendMessageTaskHandle = osThreadNew(sendMessageTask, NULL, &sendMessageTaskHandle_attributes);

  readMessageTaskHandle = osThreadNew(readMessageTask, NULL, &readMessageTaskHandle_attributes);
 800463c:	4a26      	ldr	r2, [pc, #152]	; (80046d8 <main+0x22c>)
 800463e:	2100      	movs	r1, #0
 8004640:	4826      	ldr	r0, [pc, #152]	; (80046dc <main+0x230>)
 8004642:	f007 fe43 	bl	800c2cc <osThreadNew>
 8004646:	4603      	mov	r3, r0
 8004648:	4a25      	ldr	r2, [pc, #148]	; (80046e0 <main+0x234>)
 800464a:	6013      	str	r3, [r2, #0]

  gyroCalibrationTaskHandle = osThreadNew(gyroCalibrationTask, NULL, &gyroCalibrationTaskHandle_attributes);
 800464c:	4a25      	ldr	r2, [pc, #148]	; (80046e4 <main+0x238>)
 800464e:	2100      	movs	r1, #0
 8004650:	4825      	ldr	r0, [pc, #148]	; (80046e8 <main+0x23c>)
 8004652:	f007 fe3b 	bl	800c2cc <osThreadNew>
 8004656:	4603      	mov	r3, r0
 8004658:	4a24      	ldr	r2, [pc, #144]	; (80046ec <main+0x240>)
 800465a:	6013      	str	r3, [r2, #0]

  /*Suspend the gyro-calibration task*/
  osThreadSuspend(gyroCalibrationTaskHandle);
 800465c:	4b23      	ldr	r3, [pc, #140]	; (80046ec <main+0x240>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4618      	mov	r0, r3
 8004662:	f007 fec5 	bl	800c3f0 <osThreadSuspend>

  /* Start scheduler */
  osKernelStart();
 8004666:	f007 fe0b 	bl	800c280 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800466a:	e7fe      	b.n	800466a <main+0x1be>
 800466c:	08014840 	.word	0x08014840
 8004670:	0801485c 	.word	0x0801485c
 8004674:	08014878 	.word	0x08014878
 8004678:	08014894 	.word	0x08014894
 800467c:	080147e4 	.word	0x080147e4
 8004680:	08014808 	.word	0x08014808
 8004684:	08014828 	.word	0x08014828
 8004688:	080149fc 	.word	0x080149fc
 800468c:	20000440 	.word	0x20000440
 8004690:	08014a0c 	.word	0x08014a0c
 8004694:	20000444 	.word	0x20000444
 8004698:	08014a1c 	.word	0x08014a1c
 800469c:	20000448 	.word	0x20000448
 80046a0:	08014a34 	.word	0x08014a34
 80046a4:	2000044c 	.word	0x2000044c
 80046a8:	08014a4c 	.word	0x08014a4c
 80046ac:	20000450 	.word	0x20000450
 80046b0:	20000454 	.word	0x20000454
 80046b4:	08014948 	.word	0x08014948
 80046b8:	080046f1 	.word	0x080046f1
 80046bc:	2000042c 	.word	0x2000042c
 80046c0:	08014990 	.word	0x08014990
 80046c4:	08004719 	.word	0x08004719
 80046c8:	20000430 	.word	0x20000430
 80046cc:	0801496c 	.word	0x0801496c
 80046d0:	08004759 	.word	0x08004759
 80046d4:	20000434 	.word	0x20000434
 80046d8:	080149b4 	.word	0x080149b4
 80046dc:	080047e5 	.word	0x080047e5
 80046e0:	20000438 	.word	0x20000438
 80046e4:	080149d8 	.word	0x080149d8
 80046e8:	08004855 	.word	0x08004855
 80046ec:	2000043c 	.word	0x2000043c

080046f0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b082      	sub	sp, #8
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOB,LED2_Pin);
 80046f8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80046fc:	4805      	ldr	r0, [pc, #20]	; (8004714 <StartDefaultTask+0x24>)
 80046fe:	f002 fc69 	bl	8006fd4 <HAL_GPIO_TogglePin>
	uart_receive_it(UART_NYX);
 8004702:	2001      	movs	r0, #1
 8004704:	f001 fc48 	bl	8005f98 <uart_receive_it>
    osDelay(500);
 8004708:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800470c:	f007 feb2 	bl	800c474 <osDelay>
  {
 8004710:	e7f2      	b.n	80046f8 <StartDefaultTask+0x8>
 8004712:	bf00      	nop
 8004714:	48000400 	.word	0x48000400

08004718 <readMemsTask>:
		osDelay(30);
	}
}

void readMemsTask(void *argument)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b090      	sub	sp, #64	; 0x40
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
	mems_data_t mems_data;
	FusionEuler euler;
	for(;;)
	{
//		osMutexAcquire(i2cMutex, osWaitForever);
		tick_gyro(&mems_data);
 8004720:	f107 0318 	add.w	r3, r7, #24
 8004724:	4618      	mov	r0, r3
 8004726:	f7ff fbdf 	bl	8003ee8 <tick_gyro>
		FusionCalcAngle(&mems_data, &euler);
 800472a:	f107 020c 	add.w	r2, r7, #12
 800472e:	f107 0318 	add.w	r3, r7, #24
 8004732:	4611      	mov	r1, r2
 8004734:	4618      	mov	r0, r3
 8004736:	f7fc fdaf 	bl	8001298 <FusionCalcAngle>
//		osMutexRelease(i2cMutex);
		osMessageQueuePut(outputQueueHandle, &euler, 0U, 0U);
 800473a:	4b06      	ldr	r3, [pc, #24]	; (8004754 <readMemsTask+0x3c>)
 800473c:	6818      	ldr	r0, [r3, #0]
 800473e:	f107 010c 	add.w	r1, r7, #12
 8004742:	2300      	movs	r3, #0
 8004744:	2200      	movs	r2, #0
 8004746:	f008 f91b 	bl	800c980 <osMessageQueuePut>
		osDelay(MEMS_SR);
 800474a:	200a      	movs	r0, #10
 800474c:	f007 fe92 	bl	800c474 <osDelay>
		tick_gyro(&mems_data);
 8004750:	e7e6      	b.n	8004720 <readMemsTask+0x8>
 8004752:	bf00      	nop
 8004754:	2000044c 	.word	0x2000044c

08004758 <printOutTask>:
	}
}


void printOutTask(void *argument)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b094      	sub	sp, #80	; 0x50
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
	mems_data_t mems_data;
	FusionEuler euler;
	uint8_t text[10] = "";
 8004760:	2300      	movs	r3, #0
 8004762:	60fb      	str	r3, [r7, #12]
 8004764:	f107 0310 	add.w	r3, r7, #16
 8004768:	2200      	movs	r2, #0
 800476a:	601a      	str	r2, [r3, #0]
 800476c:	809a      	strh	r2, [r3, #4]
	osStatus_t status;

	for(;;)
	{
		status = osMessageQueueGet(outputQueueHandle, &euler, NULL, 5U);   // wait for message
 800476e:	4b1a      	ldr	r3, [pc, #104]	; (80047d8 <printOutTask+0x80>)
 8004770:	6818      	ldr	r0, [r3, #0]
 8004772:	f107 0118 	add.w	r1, r7, #24
 8004776:	2305      	movs	r3, #5
 8004778:	2200      	movs	r2, #0
 800477a:	f008 f961 	bl	800ca40 <osMessageQueueGet>
 800477e:	64f8      	str	r0, [r7, #76]	; 0x4c
		if (status == osOK) {
 8004780:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004782:	2b00      	cmp	r3, #0
 8004784:	d123      	bne.n	80047ce <printOutTask+0x76>
			sprintf(text, "\n%f\r", euler.angle.yaw);
 8004786:	6a3b      	ldr	r3, [r7, #32]
 8004788:	4618      	mov	r0, r3
 800478a:	f7fb fef5 	bl	8000578 <__aeabi_f2d>
 800478e:	4602      	mov	r2, r0
 8004790:	460b      	mov	r3, r1
 8004792:	f107 000c 	add.w	r0, r7, #12
 8004796:	4911      	ldr	r1, [pc, #68]	; (80047dc <printOutTask+0x84>)
 8004798:	f00c fb54 	bl	8010e44 <siprintf>
			osMutexAcquire(debugUartMutex, osWaitForever);
 800479c:	4b10      	ldr	r3, [pc, #64]	; (80047e0 <printOutTask+0x88>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f04f 31ff 	mov.w	r1, #4294967295
 80047a4:	4618      	mov	r0, r3
 80047a6:	f007 ffef 	bl	800c788 <osMutexAcquire>
			uart_write_debug(text,50);
 80047aa:	f107 030c 	add.w	r3, r7, #12
 80047ae:	2132      	movs	r1, #50	; 0x32
 80047b0:	4618      	mov	r0, r3
 80047b2:	f001 fc19 	bl	8005fe8 <uart_write_debug>
			osMutexRelease(debugUartMutex);
 80047b6:	4b0a      	ldr	r3, [pc, #40]	; (80047e0 <printOutTask+0x88>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4618      	mov	r0, r3
 80047bc:	f008 f82f 	bl	800c81e <osMutexRelease>
			memset(text,0,sizeof(text));
 80047c0:	f107 030c 	add.w	r3, r7, #12
 80047c4:	220a      	movs	r2, #10
 80047c6:	2100      	movs	r1, #0
 80047c8:	4618      	mov	r0, r3
 80047ca:	f00c fb9e 	bl	8010f0a <memset>
		}
		osDelay(70);
 80047ce:	2046      	movs	r0, #70	; 0x46
 80047d0:	f007 fe50 	bl	800c474 <osDelay>
		status = osMessageQueueGet(outputQueueHandle, &euler, NULL, 5U);   // wait for message
 80047d4:	e7cb      	b.n	800476e <printOutTask+0x16>
 80047d6:	bf00      	nop
 80047d8:	2000044c 	.word	0x2000044c
 80047dc:	080148b0 	.word	0x080148b0
 80047e0:	20000440 	.word	0x20000440

080047e4 <readMessageTask>:
//		osMutexRelease(debugUartMutex);
		osDelay(1700);
	}
}

void readMessageTask(void *argument){
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b08e      	sub	sp, #56	; 0x38
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
	osStatus_t status;
	uint32_t ack_flag;
	uint8_t message_buffer[RB_SIZE] = {0};
 80047ec:	2300      	movs	r3, #0
 80047ee:	60bb      	str	r3, [r7, #8]
 80047f0:	f107 030c 	add.w	r3, r7, #12
 80047f4:	2224      	movs	r2, #36	; 0x24
 80047f6:	2100      	movs	r1, #0
 80047f8:	4618      	mov	r0, r3
 80047fa:	f00c fb86 	bl	8010f0a <memset>
	for(;;){
		status = osMessageQueueGet(messageQueueHandle, message_buffer, NULL, osWaitForever);   // wait for message
 80047fe:	4b13      	ldr	r3, [pc, #76]	; (800484c <readMessageTask+0x68>)
 8004800:	6818      	ldr	r0, [r3, #0]
 8004802:	f107 0108 	add.w	r1, r7, #8
 8004806:	f04f 33ff 	mov.w	r3, #4294967295
 800480a:	2200      	movs	r2, #0
 800480c:	f008 f918 	bl	800ca40 <osMessageQueueGet>
 8004810:	6378      	str	r0, [r7, #52]	; 0x34
		if (status == osOK) {
 8004812:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004814:	2b00      	cmp	r3, #0
 8004816:	d114      	bne.n	8004842 <readMessageTask+0x5e>
			tick_Handler(message_buffer);
 8004818:	f107 0308 	add.w	r3, r7, #8
 800481c:	4618      	mov	r0, r3
 800481e:	f000 fa75 	bl	8004d0c <tick_Handler>
			ack_flag = osEventFlagsWait(ack_rcvd, ACK_FLAG, osFlagsWaitAny, 150);
 8004822:	4b0b      	ldr	r3, [pc, #44]	; (8004850 <readMessageTask+0x6c>)
 8004824:	6818      	ldr	r0, [r3, #0]
 8004826:	2396      	movs	r3, #150	; 0x96
 8004828:	2200      	movs	r2, #0
 800482a:	2101      	movs	r1, #1
 800482c:	f007 fec0 	bl	800c5b0 <osEventFlagsWait>
 8004830:	6338      	str	r0, [r7, #48]	; 0x30
			if (ack_flag != 1){
 8004832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004834:	2b01      	cmp	r3, #1
 8004836:	d004      	beq.n	8004842 <readMessageTask+0x5e>
				tick_Handler(message_buffer);
 8004838:	f107 0308 	add.w	r3, r7, #8
 800483c:	4618      	mov	r0, r3
 800483e:	f000 fa65 	bl	8004d0c <tick_Handler>
			}
		}
		osDelay(200);
 8004842:	20c8      	movs	r0, #200	; 0xc8
 8004844:	f007 fe16 	bl	800c474 <osDelay>
		status = osMessageQueueGet(messageQueueHandle, message_buffer, NULL, osWaitForever);   // wait for message
 8004848:	e7d9      	b.n	80047fe <readMessageTask+0x1a>
 800484a:	bf00      	nop
 800484c:	20000450 	.word	0x20000450
 8004850:	20000454 	.word	0x20000454

08004854 <gyroCalibrationTask>:
	}
}

void gyroCalibrationTask(void *argument){
 8004854:	b580      	push	{r7, lr}
 8004856:	b08c      	sub	sp, #48	; 0x30
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
	mems_data_t mems_data;
	osThreadSuspend(readMemsTaskHandle);
 800485c:	4b17      	ldr	r3, [pc, #92]	; (80048bc <gyroCalibrationTask+0x68>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4618      	mov	r0, r3
 8004862:	f007 fdc5 	bl	800c3f0 <osThreadSuspend>
	osThreadSuspend(printOutTaskHandle);
 8004866:	4b16      	ldr	r3, [pc, #88]	; (80048c0 <gyroCalibrationTask+0x6c>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4618      	mov	r0, r3
 800486c:	f007 fdc0 	bl	800c3f0 <osThreadSuspend>
	osDelay(100);
 8004870:	2064      	movs	r0, #100	; 0x64
 8004872:	f007 fdff 	bl	800c474 <osDelay>
	uart_write_debug("Gyro Calibration: Hold the device still\r\n", 50);
 8004876:	2132      	movs	r1, #50	; 0x32
 8004878:	4812      	ldr	r0, [pc, #72]	; (80048c4 <gyroCalibrationTask+0x70>)
 800487a:	f001 fbb5 	bl	8005fe8 <uart_write_debug>
	for(;;){
		if (gyro_offset_calculation(&mems_data) == 0){
 800487e:	f107 0308 	add.w	r3, r7, #8
 8004882:	4618      	mov	r0, r3
 8004884:	f7ff fd90 	bl	80043a8 <gyro_offset_calculation>
 8004888:	4603      	mov	r3, r0
 800488a:	2b00      	cmp	r3, #0
 800488c:	d112      	bne.n	80048b4 <gyroCalibrationTask+0x60>
			uart_write_debug("Gyro Calibration: Finished!\r\n", 50);
 800488e:	2132      	movs	r1, #50	; 0x32
 8004890:	480d      	ldr	r0, [pc, #52]	; (80048c8 <gyroCalibrationTask+0x74>)
 8004892:	f001 fba9 	bl	8005fe8 <uart_write_debug>
			osThreadResume(readMemsTaskHandle);
 8004896:	4b09      	ldr	r3, [pc, #36]	; (80048bc <gyroCalibrationTask+0x68>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4618      	mov	r0, r3
 800489c:	f007 fdc9 	bl	800c432 <osThreadResume>
			osThreadResume(printOutTaskHandle);
 80048a0:	4b07      	ldr	r3, [pc, #28]	; (80048c0 <gyroCalibrationTask+0x6c>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4618      	mov	r0, r3
 80048a6:	f007 fdc4 	bl	800c432 <osThreadResume>
			osThreadSuspend(gyroCalibrationTaskHandle);
 80048aa:	4b08      	ldr	r3, [pc, #32]	; (80048cc <gyroCalibrationTask+0x78>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4618      	mov	r0, r3
 80048b0:	f007 fd9e 	bl	800c3f0 <osThreadSuspend>
		}
		osDelay(10);
 80048b4:	200a      	movs	r0, #10
 80048b6:	f007 fddd 	bl	800c474 <osDelay>
		if (gyro_offset_calculation(&mems_data) == 0){
 80048ba:	e7e0      	b.n	800487e <gyroCalibrationTask+0x2a>
 80048bc:	20000430 	.word	0x20000430
 80048c0:	20000434 	.word	0x20000434
 80048c4:	080148b8 	.word	0x080148b8
 80048c8:	080148e4 	.word	0x080148e4
 80048cc:	2000043c 	.word	0x2000043c

080048d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b096      	sub	sp, #88	; 0x58
 80048d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80048d6:	f107 0314 	add.w	r3, r7, #20
 80048da:	2244      	movs	r2, #68	; 0x44
 80048dc:	2100      	movs	r1, #0
 80048de:	4618      	mov	r0, r3
 80048e0:	f00c fb13 	bl	8010f0a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80048e4:	463b      	mov	r3, r7
 80048e6:	2200      	movs	r2, #0
 80048e8:	601a      	str	r2, [r3, #0]
 80048ea:	605a      	str	r2, [r3, #4]
 80048ec:	609a      	str	r2, [r3, #8]
 80048ee:	60da      	str	r2, [r3, #12]
 80048f0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 80048f2:	2000      	movs	r0, #0
 80048f4:	f003 fc44 	bl	8008180 <HAL_PWREx_ControlVoltageScaling>
 80048f8:	4603      	mov	r3, r0
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d001      	beq.n	8004902 <SystemClock_Config+0x32>
  {
    Error_Handler();
 80048fe:	f000 f9f5 	bl	8004cec <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8004902:	2310      	movs	r3, #16
 8004904:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8004906:	2301      	movs	r3, #1
 8004908:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800490a:	2300      	movs	r3, #0
 800490c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800490e:	2360      	movs	r3, #96	; 0x60
 8004910:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004912:	2302      	movs	r3, #2
 8004914:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8004916:	2301      	movs	r3, #1
 8004918:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800491a:	2301      	movs	r3, #1
 800491c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 800491e:	233c      	movs	r3, #60	; 0x3c
 8004920:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004922:	2302      	movs	r3, #2
 8004924:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8004926:	2302      	movs	r3, #2
 8004928:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800492a:	2302      	movs	r3, #2
 800492c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800492e:	f107 0314 	add.w	r3, r7, #20
 8004932:	4618      	mov	r0, r3
 8004934:	f003 fcc8 	bl	80082c8 <HAL_RCC_OscConfig>
 8004938:	4603      	mov	r3, r0
 800493a:	2b00      	cmp	r3, #0
 800493c:	d001      	beq.n	8004942 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800493e:	f000 f9d5 	bl	8004cec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004942:	230f      	movs	r3, #15
 8004944:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004946:	2303      	movs	r3, #3
 8004948:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800494a:	2300      	movs	r3, #0
 800494c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800494e:	2300      	movs	r3, #0
 8004950:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004952:	2300      	movs	r3, #0
 8004954:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8004956:	463b      	mov	r3, r7
 8004958:	2105      	movs	r1, #5
 800495a:	4618      	mov	r0, r3
 800495c:	f004 f8ce 	bl	8008afc <HAL_RCC_ClockConfig>
 8004960:	4603      	mov	r3, r0
 8004962:	2b00      	cmp	r3, #0
 8004964:	d001      	beq.n	800496a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8004966:	f000 f9c1 	bl	8004cec <Error_Handler>
  }
}
 800496a:	bf00      	nop
 800496c:	3758      	adds	r7, #88	; 0x58
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}
	...

08004974 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b08a      	sub	sp, #40	; 0x28
 8004978:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800497a:	f107 0314 	add.w	r3, r7, #20
 800497e:	2200      	movs	r2, #0
 8004980:	601a      	str	r2, [r3, #0]
 8004982:	605a      	str	r2, [r3, #4]
 8004984:	609a      	str	r2, [r3, #8]
 8004986:	60da      	str	r2, [r3, #12]
 8004988:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800498a:	4bbb      	ldr	r3, [pc, #748]	; (8004c78 <MX_GPIO_Init+0x304>)
 800498c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800498e:	4aba      	ldr	r2, [pc, #744]	; (8004c78 <MX_GPIO_Init+0x304>)
 8004990:	f043 0310 	orr.w	r3, r3, #16
 8004994:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004996:	4bb8      	ldr	r3, [pc, #736]	; (8004c78 <MX_GPIO_Init+0x304>)
 8004998:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800499a:	f003 0310 	and.w	r3, r3, #16
 800499e:	613b      	str	r3, [r7, #16]
 80049a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80049a2:	4bb5      	ldr	r3, [pc, #724]	; (8004c78 <MX_GPIO_Init+0x304>)
 80049a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049a6:	4ab4      	ldr	r2, [pc, #720]	; (8004c78 <MX_GPIO_Init+0x304>)
 80049a8:	f043 0304 	orr.w	r3, r3, #4
 80049ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80049ae:	4bb2      	ldr	r3, [pc, #712]	; (8004c78 <MX_GPIO_Init+0x304>)
 80049b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049b2:	f003 0304 	and.w	r3, r3, #4
 80049b6:	60fb      	str	r3, [r7, #12]
 80049b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80049ba:	4baf      	ldr	r3, [pc, #700]	; (8004c78 <MX_GPIO_Init+0x304>)
 80049bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049be:	4aae      	ldr	r2, [pc, #696]	; (8004c78 <MX_GPIO_Init+0x304>)
 80049c0:	f043 0301 	orr.w	r3, r3, #1
 80049c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80049c6:	4bac      	ldr	r3, [pc, #688]	; (8004c78 <MX_GPIO_Init+0x304>)
 80049c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049ca:	f003 0301 	and.w	r3, r3, #1
 80049ce:	60bb      	str	r3, [r7, #8]
 80049d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80049d2:	4ba9      	ldr	r3, [pc, #676]	; (8004c78 <MX_GPIO_Init+0x304>)
 80049d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049d6:	4aa8      	ldr	r2, [pc, #672]	; (8004c78 <MX_GPIO_Init+0x304>)
 80049d8:	f043 0302 	orr.w	r3, r3, #2
 80049dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80049de:	4ba6      	ldr	r3, [pc, #664]	; (8004c78 <MX_GPIO_Init+0x304>)
 80049e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049e2:	f003 0302 	and.w	r3, r3, #2
 80049e6:	607b      	str	r3, [r7, #4]
 80049e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80049ea:	4ba3      	ldr	r3, [pc, #652]	; (8004c78 <MX_GPIO_Init+0x304>)
 80049ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049ee:	4aa2      	ldr	r2, [pc, #648]	; (8004c78 <MX_GPIO_Init+0x304>)
 80049f0:	f043 0308 	orr.w	r3, r3, #8
 80049f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80049f6:	4ba0      	ldr	r3, [pc, #640]	; (8004c78 <MX_GPIO_Init+0x304>)
 80049f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049fa:	f003 0308 	and.w	r3, r3, #8
 80049fe:	603b      	str	r3, [r7, #0]
 8004a00:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ST25DV04K_RF_DISABLE_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin, GPIO_PIN_RESET);
 8004a02:	2200      	movs	r2, #0
 8004a04:	f240 1105 	movw	r1, #261	; 0x105
 8004a08:	489c      	ldr	r0, [pc, #624]	; (8004c7c <MX_GPIO_Init+0x308>)
 8004a0a:	f002 facb 	bl	8006fa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|ARD_D4_Pin|ARD_D7_Pin|SPBTLE_RF_RST_Pin
 8004a0e:	2200      	movs	r2, #0
 8004a10:	f248 111c 	movw	r1, #33052	; 0x811c
 8004a14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004a18:	f002 fac4 	bl	8006fa4 <HAL_GPIO_WritePin>
                          |ARD_D9_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	f24f 0134 	movw	r1, #61492	; 0xf034
 8004a22:	4897      	ldr	r0, [pc, #604]	; (8004c80 <MX_GPIO_Init+0x30c>)
 8004a24:	f002 fabe 	bl	8006fa4 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|PMOD_SPI2_SCK_Pin|STSAFE_A110_RESET_Pin, GPIO_PIN_RESET);
 8004a28:	2200      	movs	r2, #0
 8004a2a:	f242 0183 	movw	r1, #8323	; 0x2083
 8004a2e:	4895      	ldr	r0, [pc, #596]	; (8004c84 <MX_GPIO_Init+0x310>)
 8004a30:	f002 fab8 	bl	8006fa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8004a34:	2200      	movs	r2, #0
 8004a36:	f44f 7110 	mov.w	r1, #576	; 0x240
 8004a3a:	4893      	ldr	r0, [pc, #588]	; (8004c88 <MX_GPIO_Init+0x314>)
 8004a3c:	f002 fab2 	bl	8006fa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ST25DV04K_RF_DISABLE_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ST25DV04K_RF_DISABLE_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8004a40:	f240 1305 	movw	r3, #261	; 0x105
 8004a44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004a46:	2301      	movs	r3, #1
 8004a48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a4e:	2300      	movs	r3, #0
 8004a50:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004a52:	f107 0314 	add.w	r3, r7, #20
 8004a56:	4619      	mov	r1, r3
 8004a58:	4888      	ldr	r0, [pc, #544]	; (8004c7c <MX_GPIO_Init+0x308>)
 8004a5a:	f002 f911 	bl	8006c80 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin ST25DV04K_GPO_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin
                           ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|ST25DV04K_GPO_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin
 8004a5e:	237a      	movs	r3, #122	; 0x7a
 8004a60:	617b      	str	r3, [r7, #20]
                          |ISM43362_DRDY_EXTI1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004a62:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8004a66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a68:	2300      	movs	r3, #0
 8004a6a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004a6c:	f107 0314 	add.w	r3, r7, #20
 8004a70:	4619      	mov	r1, r3
 8004a72:	4882      	ldr	r0, [pc, #520]	; (8004c7c <MX_GPIO_Init+0x308>)
 8004a74:	f002 f904 	bl	8006c80 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_EXTI13_Pin VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin|VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8004a78:	f44f 5306 	mov.w	r3, #8576	; 0x2180
 8004a7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004a7e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8004a82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a84:	2300      	movs	r3, #0
 8004a86:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004a88:	f107 0314 	add.w	r3, r7, #20
 8004a8c:	4619      	mov	r1, r3
 8004a8e:	487e      	ldr	r0, [pc, #504]	; (8004c88 <MX_GPIO_Init+0x314>)
 8004a90:	f002 f8f6 	bl	8006c80 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8004a94:	233f      	movs	r3, #63	; 0x3f
 8004a96:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8004a98:	230b      	movs	r3, #11
 8004a9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004aa0:	f107 0314 	add.w	r3, r7, #20
 8004aa4:	4619      	mov	r1, r3
 8004aa6:	4878      	ldr	r0, [pc, #480]	; (8004c88 <MX_GPIO_Init+0x314>)
 8004aa8:	f002 f8ea 	bl	8006c80 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8004aac:	2303      	movs	r3, #3
 8004aae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ab0:	2302      	movs	r3, #2
 8004ab2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ab8:	2303      	movs	r3, #3
 8004aba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8004abc:	2308      	movs	r3, #8
 8004abe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ac0:	f107 0314 	add.w	r3, r7, #20
 8004ac4:	4619      	mov	r1, r3
 8004ac6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004aca:	f002 f8d9 	bl	8006c80 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin ARD_D4_Pin ARD_D7_Pin SPBTLE_RF_RST_Pin
                           ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|ARD_D4_Pin|ARD_D7_Pin|SPBTLE_RF_RST_Pin
 8004ace:	f248 131c 	movw	r3, #33052	; 0x811c
 8004ad2:	617b      	str	r3, [r7, #20]
                          |ARD_D9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ad8:	2300      	movs	r3, #0
 8004ada:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004adc:	2300      	movs	r3, #0
 8004ade:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ae0:	f107 0314 	add.w	r3, r7, #20
 8004ae4:	4619      	mov	r1, r3
 8004ae6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004aea:	f002 f8c9 	bl	8006c80 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8004aee:	23e0      	movs	r3, #224	; 0xe0
 8004af0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004af2:	2302      	movs	r3, #2
 8004af4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004af6:	2300      	movs	r3, #0
 8004af8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004afa:	2303      	movs	r3, #3
 8004afc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004afe:	2305      	movs	r3, #5
 8004b00:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b02:	f107 0314 	add.w	r3, r7, #20
 8004b06:	4619      	mov	r1, r3
 8004b08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004b0c:	f002 f8b8 	bl	8006c80 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8004b10:	2301      	movs	r3, #1
 8004b12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004b14:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8004b18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8004b1e:	f107 0314 	add.w	r3, r7, #20
 8004b22:	4619      	mov	r1, r3
 8004b24:	4856      	ldr	r0, [pc, #344]	; (8004c80 <MX_GPIO_Init+0x30c>)
 8004b26:	f002 f8ab 	bl	8006c80 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8004b2a:	2302      	movs	r3, #2
 8004b2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b2e:	2302      	movs	r3, #2
 8004b30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b32:	2300      	movs	r3, #0
 8004b34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b36:	2300      	movs	r3, #0
 8004b38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004b3a:	2302      	movs	r3, #2
 8004b3c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8004b3e:	f107 0314 	add.w	r3, r7, #20
 8004b42:	4619      	mov	r1, r3
 8004b44:	484e      	ldr	r0, [pc, #312]	; (8004c80 <MX_GPIO_Init+0x30c>)
 8004b46:	f002 f89b 	bl	8006c80 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8004b4a:	f24f 0334 	movw	r3, #61492	; 0xf034
 8004b4e:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004b50:	2301      	movs	r3, #1
 8004b52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b54:	2300      	movs	r3, #0
 8004b56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b58:	2300      	movs	r3, #0
 8004b5a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b5c:	f107 0314 	add.w	r3, r7, #20
 8004b60:	4619      	mov	r1, r3
 8004b62:	4847      	ldr	r0, [pc, #284]	; (8004c80 <MX_GPIO_Init+0x30c>)
 8004b64:	f002 f88c 	bl	8006c80 <HAL_GPIO_Init>

  /*Configure GPIO pins : DFSDM1_DATIN2_Pin DFSDM1_CKOUT_Pin */
  GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8004b68:	f44f 7320 	mov.w	r3, #640	; 0x280
 8004b6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b6e:	2302      	movs	r3, #2
 8004b70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b72:	2300      	movs	r3, #0
 8004b74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b76:	2300      	movs	r3, #0
 8004b78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8004b7a:	2306      	movs	r3, #6
 8004b7c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004b7e:	f107 0314 	add.w	r3, r7, #20
 8004b82:	4619      	mov	r1, r3
 8004b84:	483d      	ldr	r0, [pc, #244]	; (8004c7c <MX_GPIO_Init+0x308>)
 8004b86:	f002 f87b 	bl	8006c80 <HAL_GPIO_Init>

  /*Configure GPIO pins : QUADSPI_CLK_Pin QUADSPI_NCS_Pin OQUADSPI_BK1_IO0_Pin QUADSPI_BK1_IO1_Pin
                           QUAD_SPI_BK1_IO2_Pin QUAD_SPI_BK1_IO3_Pin */
  GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8004b8a:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8004b8e:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b90:	2302      	movs	r3, #2
 8004b92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b94:	2300      	movs	r3, #0
 8004b96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b98:	2303      	movs	r3, #3
 8004b9a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8004b9c:	230a      	movs	r3, #10
 8004b9e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004ba0:	f107 0314 	add.w	r3, r7, #20
 8004ba4:	4619      	mov	r1, r3
 8004ba6:	4835      	ldr	r0, [pc, #212]	; (8004c7c <MX_GPIO_Init+0x308>)
 8004ba8:	f002 f86a 	bl	8006c80 <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_UART3_TX_Pin INTERNAL_UART3_RX_Pin */
  GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8004bac:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004bb0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004bb2:	2302      	movs	r3, #2
 8004bb4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004bba:	2303      	movs	r3, #3
 8004bbc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004bbe:	2307      	movs	r3, #7
 8004bc0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004bc2:	f107 0314 	add.w	r3, r7, #20
 8004bc6:	4619      	mov	r1, r3
 8004bc8:	482e      	ldr	r0, [pc, #184]	; (8004c84 <MX_GPIO_Init+0x310>)
 8004bca:	f002 f859 	bl	8006c80 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI10_Pin LSM6DSL_INT1_EXTI11_Pin USB_OTG_FS_PWR_EN_Pin ARD_D2_Pin
                           HTS221_DRDY_EXTI15_Pin PMOD_IRQ_EXTI2_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI10_Pin|LSM6DSL_INT1_EXTI11_Pin|USB_OTG_FS_PWR_EN_Pin|ARD_D2_Pin
 8004bce:	f64d 4304 	movw	r3, #56324	; 0xdc04
 8004bd2:	617b      	str	r3, [r7, #20]
                          |HTS221_DRDY_EXTI15_Pin|PMOD_IRQ_EXTI2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004bd4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8004bd8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bda:	2300      	movs	r3, #0
 8004bdc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004bde:	f107 0314 	add.w	r3, r7, #20
 8004be2:	4619      	mov	r1, r3
 8004be4:	4827      	ldr	r0, [pc, #156]	; (8004c84 <MX_GPIO_Init+0x310>)
 8004be6:	f002 f84b 	bl	8006c80 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin PMOD_SPI2_SCK_Pin STSAFE_A110_RESET_Pin */
  GPIO_InitStruct.Pin = SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|PMOD_SPI2_SCK_Pin|STSAFE_A110_RESET_Pin;
 8004bea:	f242 0383 	movw	r3, #8323	; 0x2083
 8004bee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004bfc:	f107 0314 	add.w	r3, r7, #20
 8004c00:	4619      	mov	r1, r3
 8004c02:	4820      	ldr	r0, [pc, #128]	; (8004c84 <MX_GPIO_Init+0x310>)
 8004c04:	f002 f83c 	bl	8006c80 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8004c08:	f44f 7310 	mov.w	r3, #576	; 0x240
 8004c0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c12:	2300      	movs	r3, #0
 8004c14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c16:	2300      	movs	r3, #0
 8004c18:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004c1a:	f107 0314 	add.w	r3, r7, #20
 8004c1e:	4619      	mov	r1, r3
 8004c20:	4819      	ldr	r0, [pc, #100]	; (8004c88 <MX_GPIO_Init+0x314>)
 8004c22:	f002 f82d 	bl	8006c80 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8004c26:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004c2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c30:	2300      	movs	r3, #0
 8004c32:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8004c34:	f107 0314 	add.w	r3, r7, #20
 8004c38:	4619      	mov	r1, r3
 8004c3a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004c3e:	f002 f81f 	bl	8006c80 <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_SPI3_SCK_Pin INTERNAL_SPI3_MISO_Pin INTERNAL_SPI3_MOSI_Pin */
  GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8004c42:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8004c46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c48:	2302      	movs	r3, #2
 8004c4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c50:	2303      	movs	r3, #3
 8004c52:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8004c54:	2306      	movs	r3, #6
 8004c56:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004c58:	f107 0314 	add.w	r3, r7, #20
 8004c5c:	4619      	mov	r1, r3
 8004c5e:	480a      	ldr	r0, [pc, #40]	; (8004c88 <MX_GPIO_Init+0x314>)
 8004c60:	f002 f80e 	bl	8006c80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8004c64:	2378      	movs	r3, #120	; 0x78
 8004c66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c68:	2302      	movs	r3, #2
 8004c6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c70:	2303      	movs	r3, #3
 8004c72:	623b      	str	r3, [r7, #32]
 8004c74:	e00a      	b.n	8004c8c <MX_GPIO_Init+0x318>
 8004c76:	bf00      	nop
 8004c78:	40021000 	.word	0x40021000
 8004c7c:	48001000 	.word	0x48001000
 8004c80:	48000400 	.word	0x48000400
 8004c84:	48000c00 	.word	0x48000c00
 8004c88:	48000800 	.word	0x48000800
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004c8c:	2307      	movs	r3, #7
 8004c8e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004c90:	f107 0314 	add.w	r3, r7, #20
 8004c94:	4619      	mov	r1, r3
 8004c96:	480b      	ldr	r0, [pc, #44]	; (8004cc4 <MX_GPIO_Init+0x350>)
 8004c98:	f001 fff2 	bl	8006c80 <HAL_GPIO_Init>
//  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
//  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
//  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	2105      	movs	r1, #5
 8004ca0:	2017      	movs	r0, #23
 8004ca2:	f001 fc47 	bl	8006534 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8004ca6:	2017      	movs	r0, #23
 8004ca8:	f001 fc60 	bl	800656c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8004cac:	2200      	movs	r2, #0
 8004cae:	2105      	movs	r1, #5
 8004cb0:	2028      	movs	r0, #40	; 0x28
 8004cb2:	f001 fc3f 	bl	8006534 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004cb6:	2028      	movs	r0, #40	; 0x28
 8004cb8:	f001 fc58 	bl	800656c <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8004cbc:	bf00      	nop
 8004cbe:	3728      	adds	r7, #40	; 0x28
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bd80      	pop	{r7, pc}
 8004cc4:	48000c00 	.word	0x48000c00

08004cc8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b082      	sub	sp, #8
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a04      	ldr	r2, [pc, #16]	; (8004ce8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d101      	bne.n	8004cde <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8004cda:	f001 fb2f 	bl	800633c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8004cde:	bf00      	nop
 8004ce0:	3708      	adds	r7, #8
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}
 8004ce6:	bf00      	nop
 8004ce8:	40012c00 	.word	0x40012c00

08004cec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004cf0:	b672      	cpsid	i
}
 8004cf2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOB,LED2_Pin);
 8004cf4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004cf8:	4803      	ldr	r0, [pc, #12]	; (8004d08 <Error_Handler+0x1c>)
 8004cfa:	f002 f96b 	bl	8006fd4 <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 8004cfe:	2064      	movs	r0, #100	; 0x64
 8004d00:	f001 fb3c 	bl	800637c <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOB,LED2_Pin);
 8004d04:	e7f6      	b.n	8004cf4 <Error_Handler+0x8>
 8004d06:	bf00      	nop
 8004d08:	48000400 	.word	0x48000400

08004d0c <tick_Handler>:
uint8_t flag_connected_toIris = 0;

static uint8_t message_d[25]={0};
static message_t msg;

void tick_Handler(uint8_t *data){
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b084      	sub	sp, #16
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
	uint8_t mess_len = 0;
 8004d14:	2300      	movs	r3, #0
 8004d16:	73fb      	strb	r3, [r7, #15]
    init_message_t();
 8004d18:	f000 fbac 	bl	8005474 <init_message_t>

	if (!parseMessage(data, UART_NYX)){
 8004d1c:	2101      	movs	r1, #1
 8004d1e:	6878      	ldr	r0, [r7, #4]
 8004d20:	f000 fa9a 	bl	8005258 <parseMessage>
 8004d24:	4603      	mov	r3, r0
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d102      	bne.n	8004d30 <tick_Handler+0x24>
		handler(UART_NYX);
 8004d2a:	2001      	movs	r0, #1
 8004d2c:	f000 fb1e 	bl	800536c <handler>
	}
}
 8004d30:	bf00      	nop
 8004d32:	3710      	adds	r7, #16
 8004d34:	46bd      	mov	sp, r7
 8004d36:	bd80      	pop	{r7, pc}

08004d38 <sendNack>:
uint8_t send_heartbeat(UART_select device){
    uint8_t data[1] = {0};
    return transmitMessage(data, 1, SBP_CMD_HEARTBEAT, device);
}

uint8_t sendNack(UART_select device){
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b084      	sub	sp, #16
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	4603      	mov	r3, r0
 8004d40:	71fb      	strb	r3, [r7, #7]
    if ((TOKEN == ESC) || (TOKEN == ETX) || (TOKEN == STX)){
 8004d42:	4b16      	ldr	r3, [pc, #88]	; (8004d9c <sendNack+0x64>)
 8004d44:	781b      	ldrb	r3, [r3, #0]
 8004d46:	2b1b      	cmp	r3, #27
 8004d48:	d007      	beq.n	8004d5a <sendNack+0x22>
 8004d4a:	4b14      	ldr	r3, [pc, #80]	; (8004d9c <sendNack+0x64>)
 8004d4c:	781b      	ldrb	r3, [r3, #0]
 8004d4e:	2b03      	cmp	r3, #3
 8004d50:	d003      	beq.n	8004d5a <sendNack+0x22>
 8004d52:	4b12      	ldr	r3, [pc, #72]	; (8004d9c <sendNack+0x64>)
 8004d54:	781b      	ldrb	r3, [r3, #0]
 8004d56:	2b02      	cmp	r3, #2
 8004d58:	d10f      	bne.n	8004d7a <sendNack+0x42>
        uint8_t msg[3] = {NACK,ESC,TOKEN};
 8004d5a:	2315      	movs	r3, #21
 8004d5c:	733b      	strb	r3, [r7, #12]
 8004d5e:	231b      	movs	r3, #27
 8004d60:	737b      	strb	r3, [r7, #13]
 8004d62:	4b0e      	ldr	r3, [pc, #56]	; (8004d9c <sendNack+0x64>)
 8004d64:	781b      	ldrb	r3, [r3, #0]
 8004d66:	73bb      	strb	r3, [r7, #14]
        return uart_write(msg, 3, device, 5);
 8004d68:	79fa      	ldrb	r2, [r7, #7]
 8004d6a:	f107 000c 	add.w	r0, r7, #12
 8004d6e:	2305      	movs	r3, #5
 8004d70:	2103      	movs	r1, #3
 8004d72:	f001 f94f 	bl	8006014 <uart_write>
 8004d76:	4603      	mov	r3, r0
 8004d78:	e00c      	b.n	8004d94 <sendNack+0x5c>
    }
    else{
        uint8_t msg[2] = {NACK,TOKEN};
 8004d7a:	2315      	movs	r3, #21
 8004d7c:	723b      	strb	r3, [r7, #8]
 8004d7e:	4b07      	ldr	r3, [pc, #28]	; (8004d9c <sendNack+0x64>)
 8004d80:	781b      	ldrb	r3, [r3, #0]
 8004d82:	727b      	strb	r3, [r7, #9]
        return uart_write(msg, 2, device, 5);
 8004d84:	79fa      	ldrb	r2, [r7, #7]
 8004d86:	f107 0008 	add.w	r0, r7, #8
 8004d8a:	2305      	movs	r3, #5
 8004d8c:	2102      	movs	r1, #2
 8004d8e:	f001 f941 	bl	8006014 <uart_write>
 8004d92:	4603      	mov	r3, r0
    }
}
 8004d94:	4618      	mov	r0, r3
 8004d96:	3710      	adds	r7, #16
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bd80      	pop	{r7, pc}
 8004d9c:	20000458 	.word	0x20000458

08004da0 <sendAck>:

uint8_t sendAck(UART_select device){
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b084      	sub	sp, #16
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	4603      	mov	r3, r0
 8004da8:	71fb      	strb	r3, [r7, #7]
    if ((TOKEN == ESC) || (TOKEN == ETX) || (TOKEN == STX)){
 8004daa:	4b16      	ldr	r3, [pc, #88]	; (8004e04 <sendAck+0x64>)
 8004dac:	781b      	ldrb	r3, [r3, #0]
 8004dae:	2b1b      	cmp	r3, #27
 8004db0:	d007      	beq.n	8004dc2 <sendAck+0x22>
 8004db2:	4b14      	ldr	r3, [pc, #80]	; (8004e04 <sendAck+0x64>)
 8004db4:	781b      	ldrb	r3, [r3, #0]
 8004db6:	2b03      	cmp	r3, #3
 8004db8:	d003      	beq.n	8004dc2 <sendAck+0x22>
 8004dba:	4b12      	ldr	r3, [pc, #72]	; (8004e04 <sendAck+0x64>)
 8004dbc:	781b      	ldrb	r3, [r3, #0]
 8004dbe:	2b02      	cmp	r3, #2
 8004dc0:	d10f      	bne.n	8004de2 <sendAck+0x42>
        uint8_t msg[3] = {ACK,ESC,TOKEN};
 8004dc2:	2306      	movs	r3, #6
 8004dc4:	733b      	strb	r3, [r7, #12]
 8004dc6:	231b      	movs	r3, #27
 8004dc8:	737b      	strb	r3, [r7, #13]
 8004dca:	4b0e      	ldr	r3, [pc, #56]	; (8004e04 <sendAck+0x64>)
 8004dcc:	781b      	ldrb	r3, [r3, #0]
 8004dce:	73bb      	strb	r3, [r7, #14]
        return uart_write(msg, 3, device, 5);
 8004dd0:	79fa      	ldrb	r2, [r7, #7]
 8004dd2:	f107 000c 	add.w	r0, r7, #12
 8004dd6:	2305      	movs	r3, #5
 8004dd8:	2103      	movs	r1, #3
 8004dda:	f001 f91b 	bl	8006014 <uart_write>
 8004dde:	4603      	mov	r3, r0
 8004de0:	e00c      	b.n	8004dfc <sendAck+0x5c>
    }
    else{
        uint8_t msg[2] = {ACK,TOKEN};
 8004de2:	2306      	movs	r3, #6
 8004de4:	723b      	strb	r3, [r7, #8]
 8004de6:	4b07      	ldr	r3, [pc, #28]	; (8004e04 <sendAck+0x64>)
 8004de8:	781b      	ldrb	r3, [r3, #0]
 8004dea:	727b      	strb	r3, [r7, #9]
        return uart_write(msg, 2, device, 5);
 8004dec:	79fa      	ldrb	r2, [r7, #7]
 8004dee:	f107 0008 	add.w	r0, r7, #8
 8004df2:	2305      	movs	r3, #5
 8004df4:	2102      	movs	r1, #2
 8004df6:	f001 f90d 	bl	8006014 <uart_write>
 8004dfa:	4603      	mov	r3, r0
    }
}
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	3710      	adds	r7, #16
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bd80      	pop	{r7, pc}
 8004e04:	20000458 	.word	0x20000458

08004e08 <calcDataSize>:

static uint8_t calcDataSize(uint8_t *data, uint8_t len){
 8004e08:	b480      	push	{r7}
 8004e0a:	b085      	sub	sp, #20
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
 8004e10:	460b      	mov	r3, r1
 8004e12:	70fb      	strb	r3, [r7, #3]
    uint8_t j,i;
    j=0;
 8004e14:	2300      	movs	r3, #0
 8004e16:	73fb      	strb	r3, [r7, #15]
    for (i=0;i<len;i++){
 8004e18:	2300      	movs	r3, #0
 8004e1a:	73bb      	strb	r3, [r7, #14]
 8004e1c:	e01e      	b.n	8004e5c <calcDataSize+0x54>
       if ((data[i] == STX) || (data[i] == ETX) || (data[i] == ESC)){
 8004e1e:	7bbb      	ldrb	r3, [r7, #14]
 8004e20:	687a      	ldr	r2, [r7, #4]
 8004e22:	4413      	add	r3, r2
 8004e24:	781b      	ldrb	r3, [r3, #0]
 8004e26:	2b02      	cmp	r3, #2
 8004e28:	d00b      	beq.n	8004e42 <calcDataSize+0x3a>
 8004e2a:	7bbb      	ldrb	r3, [r7, #14]
 8004e2c:	687a      	ldr	r2, [r7, #4]
 8004e2e:	4413      	add	r3, r2
 8004e30:	781b      	ldrb	r3, [r3, #0]
 8004e32:	2b03      	cmp	r3, #3
 8004e34:	d005      	beq.n	8004e42 <calcDataSize+0x3a>
 8004e36:	7bbb      	ldrb	r3, [r7, #14]
 8004e38:	687a      	ldr	r2, [r7, #4]
 8004e3a:	4413      	add	r3, r2
 8004e3c:	781b      	ldrb	r3, [r3, #0]
 8004e3e:	2b1b      	cmp	r3, #27
 8004e40:	d106      	bne.n	8004e50 <calcDataSize+0x48>
           j++;
 8004e42:	7bfb      	ldrb	r3, [r7, #15]
 8004e44:	3301      	adds	r3, #1
 8004e46:	73fb      	strb	r3, [r7, #15]
           j++;
 8004e48:	7bfb      	ldrb	r3, [r7, #15]
 8004e4a:	3301      	adds	r3, #1
 8004e4c:	73fb      	strb	r3, [r7, #15]
 8004e4e:	e002      	b.n	8004e56 <calcDataSize+0x4e>
       }
       else j++;
 8004e50:	7bfb      	ldrb	r3, [r7, #15]
 8004e52:	3301      	adds	r3, #1
 8004e54:	73fb      	strb	r3, [r7, #15]
    for (i=0;i<len;i++){
 8004e56:	7bbb      	ldrb	r3, [r7, #14]
 8004e58:	3301      	adds	r3, #1
 8004e5a:	73bb      	strb	r3, [r7, #14]
 8004e5c:	7bba      	ldrb	r2, [r7, #14]
 8004e5e:	78fb      	ldrb	r3, [r7, #3]
 8004e60:	429a      	cmp	r2, r3
 8004e62:	d3dc      	bcc.n	8004e1e <calcDataSize+0x16>
    }
    return j;
 8004e64:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e66:	4618      	mov	r0, r3
 8004e68:	3714      	adds	r7, #20
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e70:	4770      	bx	lr
	...

08004e74 <transmitMessage>:

uint8_t transmitMessage(uint8_t *data, uint8_t data_len, uint8_t cmd, UART_select device){
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b08c      	sub	sp, #48	; 0x30
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
 8004e7c:	4608      	mov	r0, r1
 8004e7e:	4611      	mov	r1, r2
 8004e80:	461a      	mov	r2, r3
 8004e82:	4603      	mov	r3, r0
 8004e84:	70fb      	strb	r3, [r7, #3]
 8004e86:	460b      	mov	r3, r1
 8004e88:	70bb      	strb	r3, [r7, #2]
 8004e8a:	4613      	mov	r3, r2
 8004e8c:	707b      	strb	r3, [r7, #1]
    uint8_t message[34];
    uint8_t i,j,index;
    uint8_t tmp_len = 0;
 8004e8e:	2300      	movs	r3, #0
 8004e90:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    tmp_len = calcDataSize(data, data_len);
 8004e94:	78fb      	ldrb	r3, [r7, #3]
 8004e96:	4619      	mov	r1, r3
 8004e98:	6878      	ldr	r0, [r7, #4]
 8004e9a:	f7ff ffb5 	bl	8004e08 <calcDataSize>
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    msg.len = data_len;
 8004ea4:	78fb      	ldrb	r3, [r7, #3]
 8004ea6:	b29a      	uxth	r2, r3
 8004ea8:	4bc1      	ldr	r3, [pc, #772]	; (80051b0 <transmitMessage+0x33c>)
 8004eaa:	80da      	strh	r2, [r3, #6]
    memcpy(msg.data, data, msg.len);
 8004eac:	4bc0      	ldr	r3, [pc, #768]	; (80051b0 <transmitMessage+0x33c>)
 8004eae:	88db      	ldrh	r3, [r3, #6]
 8004eb0:	461a      	mov	r2, r3
 8004eb2:	6879      	ldr	r1, [r7, #4]
 8004eb4:	48bf      	ldr	r0, [pc, #764]	; (80051b4 <transmitMessage+0x340>)
 8004eb6:	f00c f8b8 	bl	801102a <memcpy>
    msg.protocol_rev[0] = PROTOCOL_VER;
 8004eba:	4bbd      	ldr	r3, [pc, #756]	; (80051b0 <transmitMessage+0x33c>)
 8004ebc:	22fe      	movs	r2, #254	; 0xfe
 8004ebe:	701a      	strb	r2, [r3, #0]
    msg.protocol_rev[1] = COMM_PROTOCOL_REV;
 8004ec0:	4bbb      	ldr	r3, [pc, #748]	; (80051b0 <transmitMessage+0x33c>)
 8004ec2:	2201      	movs	r2, #1
 8004ec4:	705a      	strb	r2, [r3, #1]
    if (TOKEN == 255){
 8004ec6:	4bbc      	ldr	r3, [pc, #752]	; (80051b8 <transmitMessage+0x344>)
 8004ec8:	781b      	ldrb	r3, [r3, #0]
 8004eca:	2bff      	cmp	r3, #255	; 0xff
 8004ecc:	d103      	bne.n	8004ed6 <transmitMessage+0x62>
        TOKEN=0;
 8004ece:	4bba      	ldr	r3, [pc, #744]	; (80051b8 <transmitMessage+0x344>)
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	701a      	strb	r2, [r3, #0]
 8004ed4:	e005      	b.n	8004ee2 <transmitMessage+0x6e>
    }
    else{
        TOKEN++;
 8004ed6:	4bb8      	ldr	r3, [pc, #736]	; (80051b8 <transmitMessage+0x344>)
 8004ed8:	781b      	ldrb	r3, [r3, #0]
 8004eda:	3301      	adds	r3, #1
 8004edc:	b2da      	uxtb	r2, r3
 8004ede:	4bb6      	ldr	r3, [pc, #728]	; (80051b8 <transmitMessage+0x344>)
 8004ee0:	701a      	strb	r2, [r3, #0]
    }
    msg.token = TOKEN;
 8004ee2:	4bb5      	ldr	r3, [pc, #724]	; (80051b8 <transmitMessage+0x344>)
 8004ee4:	781a      	ldrb	r2, [r3, #0]
 8004ee6:	4bb2      	ldr	r3, [pc, #712]	; (80051b0 <transmitMessage+0x33c>)
 8004ee8:	709a      	strb	r2, [r3, #2]

    msg.cmd = cmd;
 8004eea:	4ab1      	ldr	r2, [pc, #708]	; (80051b0 <transmitMessage+0x33c>)
 8004eec:	78bb      	ldrb	r3, [r7, #2]
 8004eee:	7153      	strb	r3, [r2, #5]
    msg.senderID[0] = ESC;
 8004ef0:	4baf      	ldr	r3, [pc, #700]	; (80051b0 <transmitMessage+0x33c>)
 8004ef2:	221b      	movs	r2, #27
 8004ef4:	70da      	strb	r2, [r3, #3]
    msg.senderID[1] = SBP_S_ID;
 8004ef6:	4bae      	ldr	r3, [pc, #696]	; (80051b0 <transmitMessage+0x33c>)
 8004ef8:	2232      	movs	r2, #50	; 0x32
 8004efa:	711a      	strb	r2, [r3, #4]
    calcChecksum();
 8004efc:	f000 f95e 	bl	80051bc <calcChecksum>
    //CREATE MESSAGE
    index = 0;
 8004f00:	2300      	movs	r3, #0
 8004f02:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    message[index] = STX;
 8004f06:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004f0a:	3330      	adds	r3, #48	; 0x30
 8004f0c:	443b      	add	r3, r7
 8004f0e:	2202      	movs	r2, #2
 8004f10:	f803 2c28 	strb.w	r2, [r3, #-40]
    index++;
 8004f14:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004f18:	3301      	adds	r3, #1
 8004f1a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    message[index] = msg.protocol_rev[0];
 8004f1e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004f22:	4aa3      	ldr	r2, [pc, #652]	; (80051b0 <transmitMessage+0x33c>)
 8004f24:	7812      	ldrb	r2, [r2, #0]
 8004f26:	3330      	adds	r3, #48	; 0x30
 8004f28:	443b      	add	r3, r7
 8004f2a:	f803 2c28 	strb.w	r2, [r3, #-40]
    index++;
 8004f2e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004f32:	3301      	adds	r3, #1
 8004f34:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    message[index] = msg.protocol_rev[1];
 8004f38:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004f3c:	4a9c      	ldr	r2, [pc, #624]	; (80051b0 <transmitMessage+0x33c>)
 8004f3e:	7852      	ldrb	r2, [r2, #1]
 8004f40:	3330      	adds	r3, #48	; 0x30
 8004f42:	443b      	add	r3, r7
 8004f44:	f803 2c28 	strb.w	r2, [r3, #-40]
    index++;
 8004f48:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004f4c:	3301      	adds	r3, #1
 8004f4e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    if ((msg.token == STX) || (msg.token == ETX) || (msg.token == ESC)){
 8004f52:	4b97      	ldr	r3, [pc, #604]	; (80051b0 <transmitMessage+0x33c>)
 8004f54:	789b      	ldrb	r3, [r3, #2]
 8004f56:	2b02      	cmp	r3, #2
 8004f58:	d007      	beq.n	8004f6a <transmitMessage+0xf6>
 8004f5a:	4b95      	ldr	r3, [pc, #596]	; (80051b0 <transmitMessage+0x33c>)
 8004f5c:	789b      	ldrb	r3, [r3, #2]
 8004f5e:	2b03      	cmp	r3, #3
 8004f60:	d003      	beq.n	8004f6a <transmitMessage+0xf6>
 8004f62:	4b93      	ldr	r3, [pc, #588]	; (80051b0 <transmitMessage+0x33c>)
 8004f64:	789b      	ldrb	r3, [r3, #2]
 8004f66:	2b1b      	cmp	r3, #27
 8004f68:	d119      	bne.n	8004f9e <transmitMessage+0x12a>
        message[index] = ESC;
 8004f6a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004f6e:	3330      	adds	r3, #48	; 0x30
 8004f70:	443b      	add	r3, r7
 8004f72:	221b      	movs	r2, #27
 8004f74:	f803 2c28 	strb.w	r2, [r3, #-40]
        index++;
 8004f78:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004f7c:	3301      	adds	r3, #1
 8004f7e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        message[index] = msg.token;
 8004f82:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004f86:	4a8a      	ldr	r2, [pc, #552]	; (80051b0 <transmitMessage+0x33c>)
 8004f88:	7892      	ldrb	r2, [r2, #2]
 8004f8a:	3330      	adds	r3, #48	; 0x30
 8004f8c:	443b      	add	r3, r7
 8004f8e:	f803 2c28 	strb.w	r2, [r3, #-40]
        index++;
 8004f92:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004f96:	3301      	adds	r3, #1
 8004f98:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8004f9c:	e00c      	b.n	8004fb8 <transmitMessage+0x144>
    }
    else{
        message[index] = msg.token;
 8004f9e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004fa2:	4a83      	ldr	r2, [pc, #524]	; (80051b0 <transmitMessage+0x33c>)
 8004fa4:	7892      	ldrb	r2, [r2, #2]
 8004fa6:	3330      	adds	r3, #48	; 0x30
 8004fa8:	443b      	add	r3, r7
 8004faa:	f803 2c28 	strb.w	r2, [r3, #-40]
        index++;
 8004fae:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004fb2:	3301      	adds	r3, #1
 8004fb4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    }
    message[index] = msg.senderID[0];
 8004fb8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004fbc:	4a7c      	ldr	r2, [pc, #496]	; (80051b0 <transmitMessage+0x33c>)
 8004fbe:	78d2      	ldrb	r2, [r2, #3]
 8004fc0:	3330      	adds	r3, #48	; 0x30
 8004fc2:	443b      	add	r3, r7
 8004fc4:	f803 2c28 	strb.w	r2, [r3, #-40]
    index++;
 8004fc8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004fcc:	3301      	adds	r3, #1
 8004fce:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    message[index] = msg.senderID[1];
 8004fd2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004fd6:	4a76      	ldr	r2, [pc, #472]	; (80051b0 <transmitMessage+0x33c>)
 8004fd8:	7912      	ldrb	r2, [r2, #4]
 8004fda:	3330      	adds	r3, #48	; 0x30
 8004fdc:	443b      	add	r3, r7
 8004fde:	f803 2c28 	strb.w	r2, [r3, #-40]
    index++;
 8004fe2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004fe6:	3301      	adds	r3, #1
 8004fe8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    message[index] = msg.cmd;
 8004fec:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004ff0:	4a6f      	ldr	r2, [pc, #444]	; (80051b0 <transmitMessage+0x33c>)
 8004ff2:	7952      	ldrb	r2, [r2, #5]
 8004ff4:	3330      	adds	r3, #48	; 0x30
 8004ff6:	443b      	add	r3, r7
 8004ff8:	f803 2c28 	strb.w	r2, [r3, #-40]
    index++;
 8004ffc:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005000:	3301      	adds	r3, #1
 8005002:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    for(i=0; i<msg.len;i++){
 8005006:	2300      	movs	r3, #0
 8005008:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800500c:	e046      	b.n	800509c <transmitMessage+0x228>
        if ((msg.data[i] == STX) || (msg.data[i] == ETX) || (msg.data[i] == ESC)){
 800500e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005012:	4a67      	ldr	r2, [pc, #412]	; (80051b0 <transmitMessage+0x33c>)
 8005014:	4413      	add	r3, r2
 8005016:	7a1b      	ldrb	r3, [r3, #8]
 8005018:	2b02      	cmp	r3, #2
 800501a:	d00d      	beq.n	8005038 <transmitMessage+0x1c4>
 800501c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005020:	4a63      	ldr	r2, [pc, #396]	; (80051b0 <transmitMessage+0x33c>)
 8005022:	4413      	add	r3, r2
 8005024:	7a1b      	ldrb	r3, [r3, #8]
 8005026:	2b03      	cmp	r3, #3
 8005028:	d006      	beq.n	8005038 <transmitMessage+0x1c4>
 800502a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800502e:	4a60      	ldr	r2, [pc, #384]	; (80051b0 <transmitMessage+0x33c>)
 8005030:	4413      	add	r3, r2
 8005032:	7a1b      	ldrb	r3, [r3, #8]
 8005034:	2b1b      	cmp	r3, #27
 8005036:	d11c      	bne.n	8005072 <transmitMessage+0x1fe>
            message[index] = ESC;
 8005038:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800503c:	3330      	adds	r3, #48	; 0x30
 800503e:	443b      	add	r3, r7
 8005040:	221b      	movs	r2, #27
 8005042:	f803 2c28 	strb.w	r2, [r3, #-40]
            index++;
 8005046:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800504a:	3301      	adds	r3, #1
 800504c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
            message[index] = msg.data[i];
 8005050:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8005054:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005058:	4955      	ldr	r1, [pc, #340]	; (80051b0 <transmitMessage+0x33c>)
 800505a:	440a      	add	r2, r1
 800505c:	7a12      	ldrb	r2, [r2, #8]
 800505e:	3330      	adds	r3, #48	; 0x30
 8005060:	443b      	add	r3, r7
 8005062:	f803 2c28 	strb.w	r2, [r3, #-40]
            index++;
 8005066:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800506a:	3301      	adds	r3, #1
 800506c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8005070:	e00f      	b.n	8005092 <transmitMessage+0x21e>
        }
        else{
            message[index] = msg.data[i];
 8005072:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8005076:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800507a:	494d      	ldr	r1, [pc, #308]	; (80051b0 <transmitMessage+0x33c>)
 800507c:	440a      	add	r2, r1
 800507e:	7a12      	ldrb	r2, [r2, #8]
 8005080:	3330      	adds	r3, #48	; 0x30
 8005082:	443b      	add	r3, r7
 8005084:	f803 2c28 	strb.w	r2, [r3, #-40]
            index++;
 8005088:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800508c:	3301      	adds	r3, #1
 800508e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    for(i=0; i<msg.len;i++){
 8005092:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005096:	3301      	adds	r3, #1
 8005098:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800509c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80050a0:	b29a      	uxth	r2, r3
 80050a2:	4b43      	ldr	r3, [pc, #268]	; (80051b0 <transmitMessage+0x33c>)
 80050a4:	88db      	ldrh	r3, [r3, #6]
 80050a6:	429a      	cmp	r2, r3
 80050a8:	d3b1      	bcc.n	800500e <transmitMessage+0x19a>
        }
    }
    message[index] = msg.checksum[3];
 80050aa:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80050ae:	4a40      	ldr	r2, [pc, #256]	; (80051b0 <transmitMessage+0x33c>)
 80050b0:	7fd2      	ldrb	r2, [r2, #31]
 80050b2:	3330      	adds	r3, #48	; 0x30
 80050b4:	443b      	add	r3, r7
 80050b6:	f803 2c28 	strb.w	r2, [r3, #-40]
    index++;
 80050ba:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80050be:	3301      	adds	r3, #1
 80050c0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    message[index] = msg.checksum[2];
 80050c4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80050c8:	4a39      	ldr	r2, [pc, #228]	; (80051b0 <transmitMessage+0x33c>)
 80050ca:	7f92      	ldrb	r2, [r2, #30]
 80050cc:	3330      	adds	r3, #48	; 0x30
 80050ce:	443b      	add	r3, r7
 80050d0:	f803 2c28 	strb.w	r2, [r3, #-40]
    index++;
 80050d4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80050d8:	3301      	adds	r3, #1
 80050da:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    message[index] = msg.checksum[1];
 80050de:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80050e2:	4a33      	ldr	r2, [pc, #204]	; (80051b0 <transmitMessage+0x33c>)
 80050e4:	7f52      	ldrb	r2, [r2, #29]
 80050e6:	3330      	adds	r3, #48	; 0x30
 80050e8:	443b      	add	r3, r7
 80050ea:	f803 2c28 	strb.w	r2, [r3, #-40]
    index++;
 80050ee:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80050f2:	3301      	adds	r3, #1
 80050f4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    if (msg.checksum[0] == ESC){
 80050f8:	4b2d      	ldr	r3, [pc, #180]	; (80051b0 <transmitMessage+0x33c>)
 80050fa:	7f1b      	ldrb	r3, [r3, #28]
 80050fc:	2b1b      	cmp	r3, #27
 80050fe:	d12a      	bne.n	8005156 <transmitMessage+0x2e2>
        message[index] = ESC;
 8005100:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005104:	3330      	adds	r3, #48	; 0x30
 8005106:	443b      	add	r3, r7
 8005108:	221b      	movs	r2, #27
 800510a:	f803 2c28 	strb.w	r2, [r3, #-40]
        index++;
 800510e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005112:	3301      	adds	r3, #1
 8005114:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        message[index] = msg.checksum[0];
 8005118:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800511c:	4a24      	ldr	r2, [pc, #144]	; (80051b0 <transmitMessage+0x33c>)
 800511e:	7f12      	ldrb	r2, [r2, #28]
 8005120:	3330      	adds	r3, #48	; 0x30
 8005122:	443b      	add	r3, r7
 8005124:	f803 2c28 	strb.w	r2, [r3, #-40]
        index++;
 8005128:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800512c:	3301      	adds	r3, #1
 800512e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        message[index] = ETX;
 8005132:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005136:	3330      	adds	r3, #48	; 0x30
 8005138:	443b      	add	r3, r7
 800513a:	2203      	movs	r2, #3
 800513c:	f803 2c28 	strb.w	r2, [r3, #-40]
        index++;
 8005140:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005144:	3301      	adds	r3, #1
 8005146:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        msg.len = index;
 800514a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800514e:	b29a      	uxth	r2, r3
 8005150:	4b17      	ldr	r3, [pc, #92]	; (80051b0 <transmitMessage+0x33c>)
 8005152:	80da      	strh	r2, [r3, #6]
 8005154:	e01d      	b.n	8005192 <transmitMessage+0x31e>
    }
    else{
        message[index] = msg.checksum[0];
 8005156:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800515a:	4a15      	ldr	r2, [pc, #84]	; (80051b0 <transmitMessage+0x33c>)
 800515c:	7f12      	ldrb	r2, [r2, #28]
 800515e:	3330      	adds	r3, #48	; 0x30
 8005160:	443b      	add	r3, r7
 8005162:	f803 2c28 	strb.w	r2, [r3, #-40]
        index++;
 8005166:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800516a:	3301      	adds	r3, #1
 800516c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        message[index] = ETX;
 8005170:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005174:	3330      	adds	r3, #48	; 0x30
 8005176:	443b      	add	r3, r7
 8005178:	2203      	movs	r2, #3
 800517a:	f803 2c28 	strb.w	r2, [r3, #-40]
        index++;
 800517e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005182:	3301      	adds	r3, #1
 8005184:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        msg.len = index;
 8005188:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800518c:	b29a      	uxth	r2, r3
 800518e:	4b08      	ldr	r3, [pc, #32]	; (80051b0 <transmitMessage+0x33c>)
 8005190:	80da      	strh	r2, [r3, #6]
    }

    uart_write(message, msg.len, device, 10);
 8005192:	4b07      	ldr	r3, [pc, #28]	; (80051b0 <transmitMessage+0x33c>)
 8005194:	88db      	ldrh	r3, [r3, #6]
 8005196:	b2d9      	uxtb	r1, r3
 8005198:	787a      	ldrb	r2, [r7, #1]
 800519a:	f107 0008 	add.w	r0, r7, #8
 800519e:	230a      	movs	r3, #10
 80051a0:	f000 ff38 	bl	8006014 <uart_write>
    return 1;
 80051a4:	2301      	movs	r3, #1
}
 80051a6:	4618      	mov	r0, r3
 80051a8:	3730      	adds	r7, #48	; 0x30
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bd80      	pop	{r7, pc}
 80051ae:	bf00      	nop
 80051b0:	2000045c 	.word	0x2000045c
 80051b4:	20000464 	.word	0x20000464
 80051b8:	20000458 	.word	0x20000458

080051bc <calcChecksum>:

static void calcChecksum(void){
 80051bc:	b480      	push	{r7}
 80051be:	b083      	sub	sp, #12
 80051c0:	af00      	add	r7, sp, #0
    msg.checksum[0] = msg.protocol_rev[0];
 80051c2:	4b24      	ldr	r3, [pc, #144]	; (8005254 <calcChecksum+0x98>)
 80051c4:	781a      	ldrb	r2, [r3, #0]
 80051c6:	4b23      	ldr	r3, [pc, #140]	; (8005254 <calcChecksum+0x98>)
 80051c8:	771a      	strb	r2, [r3, #28]
    msg.checksum[0] ^= msg.protocol_rev[1];
 80051ca:	4b22      	ldr	r3, [pc, #136]	; (8005254 <calcChecksum+0x98>)
 80051cc:	7f1a      	ldrb	r2, [r3, #28]
 80051ce:	4b21      	ldr	r3, [pc, #132]	; (8005254 <calcChecksum+0x98>)
 80051d0:	785b      	ldrb	r3, [r3, #1]
 80051d2:	4053      	eors	r3, r2
 80051d4:	b2da      	uxtb	r2, r3
 80051d6:	4b1f      	ldr	r3, [pc, #124]	; (8005254 <calcChecksum+0x98>)
 80051d8:	771a      	strb	r2, [r3, #28]

    msg.checksum[0] ^= msg.token;
 80051da:	4b1e      	ldr	r3, [pc, #120]	; (8005254 <calcChecksum+0x98>)
 80051dc:	7f1a      	ldrb	r2, [r3, #28]
 80051de:	4b1d      	ldr	r3, [pc, #116]	; (8005254 <calcChecksum+0x98>)
 80051e0:	789b      	ldrb	r3, [r3, #2]
 80051e2:	4053      	eors	r3, r2
 80051e4:	b2da      	uxtb	r2, r3
 80051e6:	4b1b      	ldr	r3, [pc, #108]	; (8005254 <calcChecksum+0x98>)
 80051e8:	771a      	strb	r2, [r3, #28]

    msg.checksum[0] ^= msg.senderID[0];
 80051ea:	4b1a      	ldr	r3, [pc, #104]	; (8005254 <calcChecksum+0x98>)
 80051ec:	7f1a      	ldrb	r2, [r3, #28]
 80051ee:	4b19      	ldr	r3, [pc, #100]	; (8005254 <calcChecksum+0x98>)
 80051f0:	78db      	ldrb	r3, [r3, #3]
 80051f2:	4053      	eors	r3, r2
 80051f4:	b2da      	uxtb	r2, r3
 80051f6:	4b17      	ldr	r3, [pc, #92]	; (8005254 <calcChecksum+0x98>)
 80051f8:	771a      	strb	r2, [r3, #28]
    msg.checksum[0] ^= msg.senderID[1];
 80051fa:	4b16      	ldr	r3, [pc, #88]	; (8005254 <calcChecksum+0x98>)
 80051fc:	7f1a      	ldrb	r2, [r3, #28]
 80051fe:	4b15      	ldr	r3, [pc, #84]	; (8005254 <calcChecksum+0x98>)
 8005200:	791b      	ldrb	r3, [r3, #4]
 8005202:	4053      	eors	r3, r2
 8005204:	b2da      	uxtb	r2, r3
 8005206:	4b13      	ldr	r3, [pc, #76]	; (8005254 <calcChecksum+0x98>)
 8005208:	771a      	strb	r2, [r3, #28]

    msg.checksum[0] ^= msg.cmd;
 800520a:	4b12      	ldr	r3, [pc, #72]	; (8005254 <calcChecksum+0x98>)
 800520c:	7f1a      	ldrb	r2, [r3, #28]
 800520e:	4b11      	ldr	r3, [pc, #68]	; (8005254 <calcChecksum+0x98>)
 8005210:	795b      	ldrb	r3, [r3, #5]
 8005212:	4053      	eors	r3, r2
 8005214:	b2da      	uxtb	r2, r3
 8005216:	4b0f      	ldr	r3, [pc, #60]	; (8005254 <calcChecksum+0x98>)
 8005218:	771a      	strb	r2, [r3, #28]
    uint8_t i;

    for (i=0; i < msg.len; i++)
 800521a:	2300      	movs	r3, #0
 800521c:	71fb      	strb	r3, [r7, #7]
 800521e:	e00c      	b.n	800523a <calcChecksum+0x7e>
    {
       msg.checksum[0] ^= msg.data[i];
 8005220:	4b0c      	ldr	r3, [pc, #48]	; (8005254 <calcChecksum+0x98>)
 8005222:	7f1a      	ldrb	r2, [r3, #28]
 8005224:	79fb      	ldrb	r3, [r7, #7]
 8005226:	490b      	ldr	r1, [pc, #44]	; (8005254 <calcChecksum+0x98>)
 8005228:	440b      	add	r3, r1
 800522a:	7a1b      	ldrb	r3, [r3, #8]
 800522c:	4053      	eors	r3, r2
 800522e:	b2da      	uxtb	r2, r3
 8005230:	4b08      	ldr	r3, [pc, #32]	; (8005254 <calcChecksum+0x98>)
 8005232:	771a      	strb	r2, [r3, #28]
    for (i=0; i < msg.len; i++)
 8005234:	79fb      	ldrb	r3, [r7, #7]
 8005236:	3301      	adds	r3, #1
 8005238:	71fb      	strb	r3, [r7, #7]
 800523a:	79fb      	ldrb	r3, [r7, #7]
 800523c:	b29a      	uxth	r2, r3
 800523e:	4b05      	ldr	r3, [pc, #20]	; (8005254 <calcChecksum+0x98>)
 8005240:	88db      	ldrh	r3, [r3, #6]
 8005242:	429a      	cmp	r2, r3
 8005244:	d3ec      	bcc.n	8005220 <calcChecksum+0x64>
    }
}
 8005246:	bf00      	nop
 8005248:	bf00      	nop
 800524a:	370c      	adds	r7, #12
 800524c:	46bd      	mov	sp, r7
 800524e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005252:	4770      	bx	lr
 8005254:	2000045c 	.word	0x2000045c

08005258 <parseMessage>:


uint8_t parseMessage(uint8_t *data, UART_select device){
 8005258:	b580      	push	{r7, lr}
 800525a:	b084      	sub	sp, #16
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
 8005260:	460b      	mov	r3, r1
 8005262:	70fb      	strb	r3, [r7, #3]
    uint8_t chsum = 0;
 8005264:	2300      	movs	r3, #0
 8005266:	73bb      	strb	r3, [r7, #14]
    uint8_t len = data[0];
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	781b      	ldrb	r3, [r3, #0]
 800526c:	737b      	strb	r3, [r7, #13]
    if (len < 11){
 800526e:	7b7b      	ldrb	r3, [r7, #13]
 8005270:	2b0a      	cmp	r3, #10
 8005272:	d805      	bhi.n	8005280 <parseMessage+0x28>
        sendNack(device);
 8005274:	78fb      	ldrb	r3, [r7, #3]
 8005276:	4618      	mov	r0, r3
 8005278:	f7ff fd5e 	bl	8004d38 <sendNack>
        return 1;
 800527c:	2301      	movs	r3, #1
 800527e:	e06d      	b.n	800535c <parseMessage+0x104>
    }
    msg.len = len-10;
 8005280:	7b7b      	ldrb	r3, [r7, #13]
 8005282:	b29b      	uxth	r3, r3
 8005284:	3b0a      	subs	r3, #10
 8005286:	b29a      	uxth	r2, r3
 8005288:	4b36      	ldr	r3, [pc, #216]	; (8005364 <parseMessage+0x10c>)
 800528a:	80da      	strh	r2, [r3, #6]
    if (!msg.data)return 2;
    msg.protocol_rev[0] = data[1];
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	785a      	ldrb	r2, [r3, #1]
 8005290:	4b34      	ldr	r3, [pc, #208]	; (8005364 <parseMessage+0x10c>)
 8005292:	701a      	strb	r2, [r3, #0]
    msg.protocol_rev[1] = data[2];
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	789a      	ldrb	r2, [r3, #2]
 8005298:	4b32      	ldr	r3, [pc, #200]	; (8005364 <parseMessage+0x10c>)
 800529a:	705a      	strb	r2, [r3, #1]
    msg.token = data[3];
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	78da      	ldrb	r2, [r3, #3]
 80052a0:	4b30      	ldr	r3, [pc, #192]	; (8005364 <parseMessage+0x10c>)
 80052a2:	709a      	strb	r2, [r3, #2]
    TOKEN = msg.token;
 80052a4:	4b2f      	ldr	r3, [pc, #188]	; (8005364 <parseMessage+0x10c>)
 80052a6:	789a      	ldrb	r2, [r3, #2]
 80052a8:	4b2f      	ldr	r3, [pc, #188]	; (8005368 <parseMessage+0x110>)
 80052aa:	701a      	strb	r2, [r3, #0]
    msg.senderID[0] = data[4];
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	791a      	ldrb	r2, [r3, #4]
 80052b0:	4b2c      	ldr	r3, [pc, #176]	; (8005364 <parseMessage+0x10c>)
 80052b2:	70da      	strb	r2, [r3, #3]
    msg.senderID[1] = data[5];
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	795a      	ldrb	r2, [r3, #5]
 80052b8:	4b2a      	ldr	r3, [pc, #168]	; (8005364 <parseMessage+0x10c>)
 80052ba:	711a      	strb	r2, [r3, #4]
    msg.cmd = data[6];
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	799a      	ldrb	r2, [r3, #6]
 80052c0:	4b28      	ldr	r3, [pc, #160]	; (8005364 <parseMessage+0x10c>)
 80052c2:	715a      	strb	r2, [r3, #5]
    uint8_t i;
    for (i=0; i<msg.len; i++){
 80052c4:	2300      	movs	r3, #0
 80052c6:	73fb      	strb	r3, [r7, #15]
 80052c8:	e00d      	b.n	80052e6 <parseMessage+0x8e>
//        if (data[6+i] == ESC) i++;
        msg.data[i] = data[7+i];
 80052ca:	7bfb      	ldrb	r3, [r7, #15]
 80052cc:	3307      	adds	r3, #7
 80052ce:	461a      	mov	r2, r3
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	441a      	add	r2, r3
 80052d4:	7bfb      	ldrb	r3, [r7, #15]
 80052d6:	7811      	ldrb	r1, [r2, #0]
 80052d8:	4a22      	ldr	r2, [pc, #136]	; (8005364 <parseMessage+0x10c>)
 80052da:	4413      	add	r3, r2
 80052dc:	460a      	mov	r2, r1
 80052de:	721a      	strb	r2, [r3, #8]
    for (i=0; i<msg.len; i++){
 80052e0:	7bfb      	ldrb	r3, [r7, #15]
 80052e2:	3301      	adds	r3, #1
 80052e4:	73fb      	strb	r3, [r7, #15]
 80052e6:	7bfb      	ldrb	r3, [r7, #15]
 80052e8:	b29a      	uxth	r2, r3
 80052ea:	4b1e      	ldr	r3, [pc, #120]	; (8005364 <parseMessage+0x10c>)
 80052ec:	88db      	ldrh	r3, [r3, #6]
 80052ee:	429a      	cmp	r2, r3
 80052f0:	d3eb      	bcc.n	80052ca <parseMessage+0x72>
    }
    msg.checksum[3] = data[7+i];
 80052f2:	7bfb      	ldrb	r3, [r7, #15]
 80052f4:	3307      	adds	r3, #7
 80052f6:	461a      	mov	r2, r3
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	4413      	add	r3, r2
 80052fc:	781a      	ldrb	r2, [r3, #0]
 80052fe:	4b19      	ldr	r3, [pc, #100]	; (8005364 <parseMessage+0x10c>)
 8005300:	77da      	strb	r2, [r3, #31]
    msg.checksum[2] = data[8+i];
 8005302:	7bfb      	ldrb	r3, [r7, #15]
 8005304:	3308      	adds	r3, #8
 8005306:	461a      	mov	r2, r3
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	4413      	add	r3, r2
 800530c:	781a      	ldrb	r2, [r3, #0]
 800530e:	4b15      	ldr	r3, [pc, #84]	; (8005364 <parseMessage+0x10c>)
 8005310:	779a      	strb	r2, [r3, #30]
    msg.checksum[1] = data[9+i];
 8005312:	7bfb      	ldrb	r3, [r7, #15]
 8005314:	3309      	adds	r3, #9
 8005316:	461a      	mov	r2, r3
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	4413      	add	r3, r2
 800531c:	781a      	ldrb	r2, [r3, #0]
 800531e:	4b11      	ldr	r3, [pc, #68]	; (8005364 <parseMessage+0x10c>)
 8005320:	775a      	strb	r2, [r3, #29]
    msg.checksum[0] = data[10+i];
 8005322:	7bfb      	ldrb	r3, [r7, #15]
 8005324:	330a      	adds	r3, #10
 8005326:	461a      	mov	r2, r3
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	4413      	add	r3, r2
 800532c:	781a      	ldrb	r2, [r3, #0]
 800532e:	4b0d      	ldr	r3, [pc, #52]	; (8005364 <parseMessage+0x10c>)
 8005330:	771a      	strb	r2, [r3, #28]
    chsum = msg.checksum[0];
 8005332:	4b0c      	ldr	r3, [pc, #48]	; (8005364 <parseMessage+0x10c>)
 8005334:	7f1b      	ldrb	r3, [r3, #28]
 8005336:	73bb      	strb	r3, [r7, #14]
    calcChecksum();
 8005338:	f7ff ff40 	bl	80051bc <calcChecksum>
    if (chsum != msg.checksum[0]){
 800533c:	4b09      	ldr	r3, [pc, #36]	; (8005364 <parseMessage+0x10c>)
 800533e:	7f1b      	ldrb	r3, [r3, #28]
 8005340:	7bba      	ldrb	r2, [r7, #14]
 8005342:	429a      	cmp	r2, r3
 8005344:	d005      	beq.n	8005352 <parseMessage+0xfa>
        sendNack(device);
 8005346:	78fb      	ldrb	r3, [r7, #3]
 8005348:	4618      	mov	r0, r3
 800534a:	f7ff fcf5 	bl	8004d38 <sendNack>
        return 1;
 800534e:	2301      	movs	r3, #1
 8005350:	e004      	b.n	800535c <parseMessage+0x104>
    }
    sendAck(device);
 8005352:	78fb      	ldrb	r3, [r7, #3]
 8005354:	4618      	mov	r0, r3
 8005356:	f7ff fd23 	bl	8004da0 <sendAck>
//    HAL_Delay(22);
    return 0;                  //Note that after the parsing the escape chars remains in payload.
 800535a:	2300      	movs	r3, #0
}
 800535c:	4618      	mov	r0, r3
 800535e:	3710      	adds	r7, #16
 8005360:	46bd      	mov	sp, r7
 8005362:	bd80      	pop	{r7, pc}
 8005364:	2000045c 	.word	0x2000045c
 8005368:	20000458 	.word	0x20000458

0800536c <handler>:



void handler(UART_select device){
 800536c:	b580      	push	{r7, lr}
 800536e:	b082      	sub	sp, #8
 8005370:	af00      	add	r7, sp, #0
 8005372:	4603      	mov	r3, r0
 8005374:	71fb      	strb	r3, [r7, #7]
    switch (msg.cmd){
 8005376:	4b3c      	ldr	r3, [pc, #240]	; (8005468 <handler+0xfc>)
 8005378:	795b      	ldrb	r3, [r3, #5]
 800537a:	2bc0      	cmp	r3, #192	; 0xc0
 800537c:	d068      	beq.n	8005450 <handler+0xe4>
 800537e:	2bc0      	cmp	r3, #192	; 0xc0
 8005380:	dc6c      	bgt.n	800545c <handler+0xf0>
 8005382:	2ba0      	cmp	r3, #160	; 0xa0
 8005384:	d05f      	beq.n	8005446 <handler+0xda>
 8005386:	2ba0      	cmp	r3, #160	; 0xa0
 8005388:	dc68      	bgt.n	800545c <handler+0xf0>
 800538a:	2b80      	cmp	r3, #128	; 0x80
 800538c:	d053      	beq.n	8005436 <handler+0xca>
 800538e:	2b80      	cmp	r3, #128	; 0x80
 8005390:	dc64      	bgt.n	800545c <handler+0xf0>
 8005392:	2b65      	cmp	r3, #101	; 0x65
 8005394:	dc34      	bgt.n	8005400 <handler+0x94>
 8005396:	2b50      	cmp	r3, #80	; 0x50
 8005398:	db60      	blt.n	800545c <handler+0xf0>
 800539a:	3b50      	subs	r3, #80	; 0x50
 800539c:	2b15      	cmp	r3, #21
 800539e:	d85d      	bhi.n	800545c <handler+0xf0>
 80053a0:	a201      	add	r2, pc, #4	; (adr r2, 80053a8 <handler+0x3c>)
 80053a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053a6:	bf00      	nop
 80053a8:	08005407 	.word	0x08005407
 80053ac:	0800545d 	.word	0x0800545d
 80053b0:	0800545d 	.word	0x0800545d
 80053b4:	0800545d 	.word	0x0800545d
 80053b8:	0800545d 	.word	0x0800545d
 80053bc:	0800545d 	.word	0x0800545d
 80053c0:	0800540f 	.word	0x0800540f
 80053c4:	0800545d 	.word	0x0800545d
 80053c8:	0800545d 	.word	0x0800545d
 80053cc:	0800545d 	.word	0x0800545d
 80053d0:	0800545d 	.word	0x0800545d
 80053d4:	0800545d 	.word	0x0800545d
 80053d8:	0800545d 	.word	0x0800545d
 80053dc:	0800545d 	.word	0x0800545d
 80053e0:	0800545d 	.word	0x0800545d
 80053e4:	0800545d 	.word	0x0800545d
 80053e8:	0800545d 	.word	0x0800545d
 80053ec:	0800545d 	.word	0x0800545d
 80053f0:	0800545d 	.word	0x0800545d
 80053f4:	0800545d 	.word	0x0800545d
 80053f8:	0800545d 	.word	0x0800545d
 80053fc:	0800541f 	.word	0x0800541f
 8005400:	2b78      	cmp	r3, #120	; 0x78
 8005402:	d014      	beq.n	800542e <handler+0xc2>
        break;
    case 0xC0:
    	osThreadResume(gyroCalibrationTaskHandle);
    	break;
    default:
        break;
 8005404:	e02a      	b.n	800545c <handler+0xf0>
        flag_connected_toIris = 1;
 8005406:	4b19      	ldr	r3, [pc, #100]	; (800546c <handler+0x100>)
 8005408:	2201      	movs	r2, #1
 800540a:	701a      	strb	r2, [r3, #0]
        break;
 800540c:	e027      	b.n	800545e <handler+0xf2>
        ublox_transmit_message(msg.cmd, device);
 800540e:	4b16      	ldr	r3, [pc, #88]	; (8005468 <handler+0xfc>)
 8005410:	795b      	ldrb	r3, [r3, #5]
 8005412:	79fa      	ldrb	r2, [r7, #7]
 8005414:	4611      	mov	r1, r2
 8005416:	4618      	mov	r0, r3
 8005418:	f7fe fa72 	bl	8003900 <ublox_transmit_message>
        break;
 800541c:	e01f      	b.n	800545e <handler+0xf2>
        reportFW(msg.cmd, device);
 800541e:	4b12      	ldr	r3, [pc, #72]	; (8005468 <handler+0xfc>)
 8005420:	795b      	ldrb	r3, [r3, #5]
 8005422:	79fa      	ldrb	r2, [r7, #7]
 8005424:	4611      	mov	r1, r2
 8005426:	4618      	mov	r0, r3
 8005428:	f000 f850 	bl	80054cc <reportFW>
        break;
 800542c:	e017      	b.n	800545e <handler+0xf2>
    	powerManageCfgSet(0x78);
 800542e:	2078      	movs	r0, #120	; 0x78
 8005430:	f7fe fd0c 	bl	8003e4c <powerManageCfgSet>
        break;
 8005434:	e013      	b.n	800545e <handler+0xf2>
        ublox_transmit_rtc(msg.cmd, device);
 8005436:	4b0c      	ldr	r3, [pc, #48]	; (8005468 <handler+0xfc>)
 8005438:	795b      	ldrb	r3, [r3, #5]
 800543a:	79fa      	ldrb	r2, [r7, #7]
 800543c:	4611      	mov	r1, r2
 800543e:	4618      	mov	r0, r3
 8005440:	f7fe fa4a 	bl	80038d8 <ublox_transmit_rtc>
        break;
 8005444:	e00b      	b.n	800545e <handler+0xf2>
        HAL_Delay(500);
 8005446:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800544a:	f000 ff97 	bl	800637c <HAL_Delay>
        break;
 800544e:	e006      	b.n	800545e <handler+0xf2>
    	osThreadResume(gyroCalibrationTaskHandle);
 8005450:	4b07      	ldr	r3, [pc, #28]	; (8005470 <handler+0x104>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4618      	mov	r0, r3
 8005456:	f006 ffec 	bl	800c432 <osThreadResume>
    	break;
 800545a:	e000      	b.n	800545e <handler+0xf2>
        break;
 800545c:	bf00      	nop
    }
}
 800545e:	bf00      	nop
 8005460:	3708      	adds	r7, #8
 8005462:	46bd      	mov	sp, r7
 8005464:	bd80      	pop	{r7, pc}
 8005466:	bf00      	nop
 8005468:	2000045c 	.word	0x2000045c
 800546c:	20000459 	.word	0x20000459
 8005470:	2000043c 	.word	0x2000043c

08005474 <init_message_t>:

void init_message_t(void){
 8005474:	b580      	push	{r7, lr}
 8005476:	af00      	add	r7, sp, #0
    msg.protocol_rev[0] = 0;
 8005478:	4b12      	ldr	r3, [pc, #72]	; (80054c4 <init_message_t+0x50>)
 800547a:	2200      	movs	r2, #0
 800547c:	701a      	strb	r2, [r3, #0]
    msg.protocol_rev[1] = 0;
 800547e:	4b11      	ldr	r3, [pc, #68]	; (80054c4 <init_message_t+0x50>)
 8005480:	2200      	movs	r2, #0
 8005482:	705a      	strb	r2, [r3, #1]
    msg.token = 0;
 8005484:	4b0f      	ldr	r3, [pc, #60]	; (80054c4 <init_message_t+0x50>)
 8005486:	2200      	movs	r2, #0
 8005488:	709a      	strb	r2, [r3, #2]
    msg.senderID[0] = 0;
 800548a:	4b0e      	ldr	r3, [pc, #56]	; (80054c4 <init_message_t+0x50>)
 800548c:	2200      	movs	r2, #0
 800548e:	70da      	strb	r2, [r3, #3]
    msg.senderID[1] = 0;
 8005490:	4b0c      	ldr	r3, [pc, #48]	; (80054c4 <init_message_t+0x50>)
 8005492:	2200      	movs	r2, #0
 8005494:	711a      	strb	r2, [r3, #4]
    msg.cmd = 0;
 8005496:	4b0b      	ldr	r3, [pc, #44]	; (80054c4 <init_message_t+0x50>)
 8005498:	2200      	movs	r2, #0
 800549a:	715a      	strb	r2, [r3, #5]
    memset(msg.data, 0, 20);
 800549c:	2214      	movs	r2, #20
 800549e:	2100      	movs	r1, #0
 80054a0:	4809      	ldr	r0, [pc, #36]	; (80054c8 <init_message_t+0x54>)
 80054a2:	f00b fd32 	bl	8010f0a <memset>
    msg.checksum[0] = 0;
 80054a6:	4b07      	ldr	r3, [pc, #28]	; (80054c4 <init_message_t+0x50>)
 80054a8:	2200      	movs	r2, #0
 80054aa:	771a      	strb	r2, [r3, #28]
    msg.checksum[1] = 0;
 80054ac:	4b05      	ldr	r3, [pc, #20]	; (80054c4 <init_message_t+0x50>)
 80054ae:	2200      	movs	r2, #0
 80054b0:	775a      	strb	r2, [r3, #29]
    msg.checksum[2] = 0;
 80054b2:	4b04      	ldr	r3, [pc, #16]	; (80054c4 <init_message_t+0x50>)
 80054b4:	2200      	movs	r2, #0
 80054b6:	779a      	strb	r2, [r3, #30]
    msg.checksum[3] = 0;
 80054b8:	4b02      	ldr	r3, [pc, #8]	; (80054c4 <init_message_t+0x50>)
 80054ba:	2200      	movs	r2, #0
 80054bc:	77da      	strb	r2, [r3, #31]
}
 80054be:	bf00      	nop
 80054c0:	bd80      	pop	{r7, pc}
 80054c2:	bf00      	nop
 80054c4:	2000045c 	.word	0x2000045c
 80054c8:	20000464 	.word	0x20000464

080054cc <reportFW>:

void reportFW(uint8_t cmd, UART_select device){
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b084      	sub	sp, #16
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	4603      	mov	r3, r0
 80054d4:	460a      	mov	r2, r1
 80054d6:	71fb      	strb	r3, [r7, #7]
 80054d8:	4613      	mov	r3, r2
 80054da:	71bb      	strb	r3, [r7, #6]
    uint8_t fwv[1] = {FW_VERSION};
 80054dc:	236e      	movs	r3, #110	; 0x6e
 80054de:	733b      	strb	r3, [r7, #12]
    transmitMessage(fwv, 1, cmd, device);
 80054e0:	79bb      	ldrb	r3, [r7, #6]
 80054e2:	79fa      	ldrb	r2, [r7, #7]
 80054e4:	f107 000c 	add.w	r0, r7, #12
 80054e8:	2101      	movs	r1, #1
 80054ea:	f7ff fcc3 	bl	8004e74 <transmitMessage>
}
 80054ee:	bf00      	nop
 80054f0:	3710      	adds	r7, #16
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bd80      	pop	{r7, pc}

080054f6 <RB_init>:

#include "ring_buffer.h"
#include <string.h>
#include "assert.h"

uint8_t RB_init(RB_t* rb, uint8_t size) {
 80054f6:	b580      	push	{r7, lr}
 80054f8:	b082      	sub	sp, #8
 80054fa:	af00      	add	r7, sp, #0
 80054fc:	6078      	str	r0, [r7, #4]
 80054fe:	460b      	mov	r3, r1
 8005500:	70fb      	strb	r3, [r7, #3]
  memset(rb->buffer, 0, sizeof(uint8_t)*size);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	78fa      	ldrb	r2, [r7, #3]
 8005506:	2100      	movs	r1, #0
 8005508:	4618      	mov	r0, r3
 800550a:	f00b fcfe 	bl	8010f0a <memset>
//  rb->buffer = malloc(size * sizeof(char));
//
  if (!rb->buffer) {
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d101      	bne.n	8005518 <RB_init+0x22>
    return 0;
 8005514:	2300      	movs	r3, #0
 8005516:	e00a      	b.n	800552e <RB_init+0x38>
  }
  rb->rdpos = 0;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2200      	movs	r2, #0
 800551c:	629a      	str	r2, [r3, #40]	; 0x28
  rb->wrpos = 0;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2200      	movs	r2, #0
 8005522:	62da      	str	r2, [r3, #44]	; 0x2c
  rb->size = size;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	78fa      	ldrb	r2, [r7, #3]
 8005528:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return 1;
 800552c:	2301      	movs	r3, #1
}
 800552e:	4618      	mov	r0, r3
 8005530:	3708      	adds	r7, #8
 8005532:	46bd      	mov	sp, r7
 8005534:	bd80      	pop	{r7, pc}

08005536 <RB_push>:
  rb->rdpos = 0;
  rb->wrpos = 0;
  memset(rb->buffer, 0, sizeof(rb->buffer));
}

void RB_push(RB_t* rb, uint8_t byte) {
 8005536:	b480      	push	{r7}
 8005538:	b083      	sub	sp, #12
 800553a:	af00      	add	r7, sp, #0
 800553c:	6078      	str	r0, [r7, #4]
 800553e:	460b      	mov	r3, r1
 8005540:	70fb      	strb	r3, [r7, #3]
  if ((rb->wrpos + 1) % rb->size == rb->rdpos) {
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005546:	3301      	adds	r3, #1
 8005548:	687a      	ldr	r2, [r7, #4]
 800554a:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 800554e:	fb93 f1f2 	sdiv	r1, r3, r2
 8005552:	fb01 f202 	mul.w	r2, r1, r2
 8005556:	1a9a      	subs	r2, r3, r2
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800555c:	429a      	cmp	r2, r3
 800555e:	d012      	beq.n	8005586 <RB_push+0x50>
    return;
  }

  rb->buffer[rb->wrpos] = byte;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005564:	687a      	ldr	r2, [r7, #4]
 8005566:	78f9      	ldrb	r1, [r7, #3]
 8005568:	54d1      	strb	r1, [r2, r3]
  rb->wrpos = (rb->wrpos + 1) % rb->size;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800556e:	3301      	adds	r3, #1
 8005570:	687a      	ldr	r2, [r7, #4]
 8005572:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 8005576:	fb93 f1f2 	sdiv	r1, r3, r2
 800557a:	fb01 f202 	mul.w	r2, r1, r2
 800557e:	1a9a      	subs	r2, r3, r2
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	62da      	str	r2, [r3, #44]	; 0x2c
 8005584:	e000      	b.n	8005588 <RB_push+0x52>
    return;
 8005586:	bf00      	nop
}
 8005588:	370c      	adds	r7, #12
 800558a:	46bd      	mov	sp, r7
 800558c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005590:	4770      	bx	lr

08005592 <RB_pop>:

uint8_t RB_pop(RB_t* rb) {
 8005592:	b480      	push	{r7}
 8005594:	b085      	sub	sp, #20
 8005596:	af00      	add	r7, sp, #0
 8005598:	6078      	str	r0, [r7, #4]
  if (rb->rdpos == rb->wrpos) return EOF;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055a2:	429a      	cmp	r2, r3
 80055a4:	d101      	bne.n	80055aa <RB_pop+0x18>
 80055a6:	23ff      	movs	r3, #255	; 0xff
 80055a8:	e012      	b.n	80055d0 <RB_pop+0x3e>

  uint8_t byte = rb->buffer[rb->rdpos];
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055ae:	687a      	ldr	r2, [r7, #4]
 80055b0:	5cd3      	ldrb	r3, [r2, r3]
 80055b2:	73fb      	strb	r3, [r7, #15]
  rb->rdpos = (rb->rdpos + 1) % rb->size;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055b8:	3301      	adds	r3, #1
 80055ba:	687a      	ldr	r2, [r7, #4]
 80055bc:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 80055c0:	fb93 f1f2 	sdiv	r1, r3, r2
 80055c4:	fb01 f202 	mul.w	r2, r1, r2
 80055c8:	1a9a      	subs	r2, r3, r2
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	629a      	str	r2, [r3, #40]	; 0x28

  return byte;
 80055ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80055d0:	4618      	mov	r0, r3
 80055d2:	3714      	adds	r7, #20
 80055d4:	46bd      	mov	sp, r7
 80055d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055da:	4770      	bx	lr

080055dc <RB_pushFront>:

void RB_pushFront(RB_t* rb, uint8_t byte) {
 80055dc:	b480      	push	{r7}
 80055de:	b085      	sub	sp, #20
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
 80055e4:	460b      	mov	r3, r1
 80055e6:	70fb      	strb	r3, [r7, #3]
  uint8_t newrpos = (rb->rdpos - 1) < 0 ? (rb->size - 1) : rb->rdpos - 1;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	dc05      	bgt.n	80055fc <RB_pushFront+0x20>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80055f6:	3b01      	subs	r3, #1
 80055f8:	b2db      	uxtb	r3, r3
 80055fa:	e004      	b.n	8005606 <RB_pushFront+0x2a>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005600:	b2db      	uxtb	r3, r3
 8005602:	3b01      	subs	r3, #1
 8005604:	b2db      	uxtb	r3, r3
 8005606:	73fb      	strb	r3, [r7, #15]

  if (newrpos == rb->wrpos) {
 8005608:	7bfa      	ldrb	r2, [r7, #15]
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800560e:	429a      	cmp	r2, r3
 8005610:	d008      	beq.n	8005624 <RB_pushFront+0x48>
    return;
  }

  rb->rdpos = newrpos;
 8005612:	7bfa      	ldrb	r2, [r7, #15]
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	629a      	str	r2, [r3, #40]	; 0x28
  rb->buffer[rb->rdpos] = byte;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800561c:	687a      	ldr	r2, [r7, #4]
 800561e:	78f9      	ldrb	r1, [r7, #3]
 8005620:	54d1      	strb	r1, [r2, r3]
 8005622:	e000      	b.n	8005626 <RB_pushFront+0x4a>
    return;
 8005624:	bf00      	nop
}
 8005626:	3714      	adds	r7, #20
 8005628:	46bd      	mov	sp, r7
 800562a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562e:	4770      	bx	lr

08005630 <RB_size>:
  return rb->buffer[rb->wrpos];
}

uint8_t RB_capacity(RB_t* rb) { return rb->size; }

uint8_t RB_size(RB_t* rb) {
 8005630:	b480      	push	{r7}
 8005632:	b083      	sub	sp, #12
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
  return (rb->wrpos + rb->size - rb->rdpos) % rb->size;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800563c:	687a      	ldr	r2, [r7, #4]
 800563e:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 8005642:	441a      	add	r2, r3
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005648:	1ad3      	subs	r3, r2, r3
 800564a:	687a      	ldr	r2, [r7, #4]
 800564c:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 8005650:	fb93 f1f2 	sdiv	r1, r3, r2
 8005654:	fb01 f202 	mul.w	r2, r1, r2
 8005658:	1a9b      	subs	r3, r3, r2
 800565a:	b2db      	uxtb	r3, r3
}
 800565c:	4618      	mov	r0, r3
 800565e:	370c      	adds	r7, #12
 8005660:	46bd      	mov	sp, r7
 8005662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005666:	4770      	bx	lr

08005668 <RB_clear>:

uint8_t RB_isFull(RB_t* rb) {
  return ((rb->wrpos + 1) % rb->size == rb->rdpos);
}

void RB_clear(RB_t* rb) {
 8005668:	b580      	push	{r7, lr}
 800566a:	b082      	sub	sp, #8
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
  memset(rb->buffer, 0, sizeof(rb->buffer));
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2228      	movs	r2, #40	; 0x28
 8005674:	2100      	movs	r1, #0
 8005676:	4618      	mov	r0, r3
 8005678:	f00b fc47 	bl	8010f0a <memset>
  rb->rdpos = 0;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2200      	movs	r2, #0
 8005680:	629a      	str	r2, [r3, #40]	; 0x28
  rb->wrpos = 0;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2200      	movs	r2, #0
 8005686:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005688:	bf00      	nop
 800568a:	3708      	adds	r7, #8
 800568c:	46bd      	mov	sp, r7
 800568e:	bd80      	pop	{r7, pc}

08005690 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b082      	sub	sp, #8
 8005694:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005696:	4b11      	ldr	r3, [pc, #68]	; (80056dc <HAL_MspInit+0x4c>)
 8005698:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800569a:	4a10      	ldr	r2, [pc, #64]	; (80056dc <HAL_MspInit+0x4c>)
 800569c:	f043 0301 	orr.w	r3, r3, #1
 80056a0:	6613      	str	r3, [r2, #96]	; 0x60
 80056a2:	4b0e      	ldr	r3, [pc, #56]	; (80056dc <HAL_MspInit+0x4c>)
 80056a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056a6:	f003 0301 	and.w	r3, r3, #1
 80056aa:	607b      	str	r3, [r7, #4]
 80056ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80056ae:	4b0b      	ldr	r3, [pc, #44]	; (80056dc <HAL_MspInit+0x4c>)
 80056b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056b2:	4a0a      	ldr	r2, [pc, #40]	; (80056dc <HAL_MspInit+0x4c>)
 80056b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056b8:	6593      	str	r3, [r2, #88]	; 0x58
 80056ba:	4b08      	ldr	r3, [pc, #32]	; (80056dc <HAL_MspInit+0x4c>)
 80056bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056c2:	603b      	str	r3, [r7, #0]
 80056c4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80056c6:	2200      	movs	r2, #0
 80056c8:	210f      	movs	r1, #15
 80056ca:	f06f 0001 	mvn.w	r0, #1
 80056ce:	f000 ff31 	bl	8006534 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80056d2:	bf00      	nop
 80056d4:	3708      	adds	r7, #8
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bd80      	pop	{r7, pc}
 80056da:	bf00      	nop
 80056dc:	40021000 	.word	0x40021000

080056e0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b0b0      	sub	sp, #192	; 0xc0
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80056e8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80056ec:	2200      	movs	r2, #0
 80056ee:	601a      	str	r2, [r3, #0]
 80056f0:	605a      	str	r2, [r3, #4]
 80056f2:	609a      	str	r2, [r3, #8]
 80056f4:	60da      	str	r2, [r3, #12]
 80056f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80056f8:	f107 0318 	add.w	r3, r7, #24
 80056fc:	2294      	movs	r2, #148	; 0x94
 80056fe:	2100      	movs	r1, #0
 8005700:	4618      	mov	r0, r3
 8005702:	f00b fc02 	bl	8010f0a <memset>
  if(hi2c->Instance==I2C2)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4a4a      	ldr	r2, [pc, #296]	; (8005834 <HAL_I2C_MspInit+0x154>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d144      	bne.n	800579a <HAL_I2C_MspInit+0xba>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8005710:	2380      	movs	r3, #128	; 0x80
 8005712:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8005714:	2300      	movs	r3, #0
 8005716:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005718:	f107 0318 	add.w	r3, r7, #24
 800571c:	4618      	mov	r0, r3
 800571e:	f003 fcdd 	bl	80090dc <HAL_RCCEx_PeriphCLKConfig>
 8005722:	4603      	mov	r3, r0
 8005724:	2b00      	cmp	r3, #0
 8005726:	d001      	beq.n	800572c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8005728:	f7ff fae0 	bl	8004cec <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800572c:	4b42      	ldr	r3, [pc, #264]	; (8005838 <HAL_I2C_MspInit+0x158>)
 800572e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005730:	4a41      	ldr	r2, [pc, #260]	; (8005838 <HAL_I2C_MspInit+0x158>)
 8005732:	f043 0302 	orr.w	r3, r3, #2
 8005736:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005738:	4b3f      	ldr	r3, [pc, #252]	; (8005838 <HAL_I2C_MspInit+0x158>)
 800573a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800573c:	f003 0302 	and.w	r3, r3, #2
 8005740:	617b      	str	r3, [r7, #20]
 8005742:	697b      	ldr	r3, [r7, #20]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8005744:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005748:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800574c:	2312      	movs	r3, #18
 800574e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005752:	2300      	movs	r3, #0
 8005754:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005758:	2303      	movs	r3, #3
 800575a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800575e:	2304      	movs	r3, #4
 8005760:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005764:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8005768:	4619      	mov	r1, r3
 800576a:	4834      	ldr	r0, [pc, #208]	; (800583c <HAL_I2C_MspInit+0x15c>)
 800576c:	f001 fa88 	bl	8006c80 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8005770:	4b31      	ldr	r3, [pc, #196]	; (8005838 <HAL_I2C_MspInit+0x158>)
 8005772:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005774:	4a30      	ldr	r2, [pc, #192]	; (8005838 <HAL_I2C_MspInit+0x158>)
 8005776:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800577a:	6593      	str	r3, [r2, #88]	; 0x58
 800577c:	4b2e      	ldr	r3, [pc, #184]	; (8005838 <HAL_I2C_MspInit+0x158>)
 800577e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005780:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005784:	613b      	str	r3, [r7, #16]
 8005786:	693b      	ldr	r3, [r7, #16]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 5, 0);
 8005788:	2200      	movs	r2, #0
 800578a:	2105      	movs	r1, #5
 800578c:	2021      	movs	r0, #33	; 0x21
 800578e:	f000 fed1 	bl	8006534 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8005792:	2021      	movs	r0, #33	; 0x21
 8005794:	f000 feea 	bl	800656c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8005798:	e048      	b.n	800582c <HAL_I2C_MspInit+0x14c>
  else if(hi2c->Instance==I2C1)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4a28      	ldr	r2, [pc, #160]	; (8005840 <HAL_I2C_MspInit+0x160>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d143      	bne.n	800582c <HAL_I2C_MspInit+0x14c>
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80057a4:	2340      	movs	r3, #64	; 0x40
 80057a6:	61bb      	str	r3, [r7, #24]
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80057a8:	2300      	movs	r3, #0
 80057aa:	66fb      	str	r3, [r7, #108]	; 0x6c
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80057ac:	f107 0318 	add.w	r3, r7, #24
 80057b0:	4618      	mov	r0, r3
 80057b2:	f003 fc93 	bl	80090dc <HAL_RCCEx_PeriphCLKConfig>
 80057b6:	4603      	mov	r3, r0
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d001      	beq.n	80057c0 <HAL_I2C_MspInit+0xe0>
	  Error_Handler();
 80057bc:	f7ff fa96 	bl	8004cec <Error_Handler>
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80057c0:	4b1d      	ldr	r3, [pc, #116]	; (8005838 <HAL_I2C_MspInit+0x158>)
 80057c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057c4:	4a1c      	ldr	r2, [pc, #112]	; (8005838 <HAL_I2C_MspInit+0x158>)
 80057c6:	f043 0302 	orr.w	r3, r3, #2
 80057ca:	64d3      	str	r3, [r2, #76]	; 0x4c
 80057cc:	4b1a      	ldr	r3, [pc, #104]	; (8005838 <HAL_I2C_MspInit+0x158>)
 80057ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057d0:	f003 0302 	and.w	r3, r3, #2
 80057d4:	60fb      	str	r3, [r7, #12]
 80057d6:	68fb      	ldr	r3, [r7, #12]
	GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 80057d8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80057dc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80057e0:	2312      	movs	r3, #18
 80057e2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80057e6:	2301      	movs	r3, #1
 80057e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80057ec:	2303      	movs	r3, #3
 80057ee:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80057f2:	2304      	movs	r3, #4
 80057f4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80057f8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80057fc:	4619      	mov	r1, r3
 80057fe:	480f      	ldr	r0, [pc, #60]	; (800583c <HAL_I2C_MspInit+0x15c>)
 8005800:	f001 fa3e 	bl	8006c80 <HAL_GPIO_Init>
	__HAL_RCC_I2C1_CLK_ENABLE();
 8005804:	4b0c      	ldr	r3, [pc, #48]	; (8005838 <HAL_I2C_MspInit+0x158>)
 8005806:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005808:	4a0b      	ldr	r2, [pc, #44]	; (8005838 <HAL_I2C_MspInit+0x158>)
 800580a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800580e:	6593      	str	r3, [r2, #88]	; 0x58
 8005810:	4b09      	ldr	r3, [pc, #36]	; (8005838 <HAL_I2C_MspInit+0x158>)
 8005812:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005814:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005818:	60bb      	str	r3, [r7, #8]
 800581a:	68bb      	ldr	r3, [r7, #8]
	HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 800581c:	2200      	movs	r2, #0
 800581e:	2105      	movs	r1, #5
 8005820:	201f      	movs	r0, #31
 8005822:	f000 fe87 	bl	8006534 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8005826:	201f      	movs	r0, #31
 8005828:	f000 fea0 	bl	800656c <HAL_NVIC_EnableIRQ>
}
 800582c:	bf00      	nop
 800582e:	37c0      	adds	r7, #192	; 0xc0
 8005830:	46bd      	mov	sp, r7
 8005832:	bd80      	pop	{r7, pc}
 8005834:	40005800 	.word	0x40005800
 8005838:	40021000 	.word	0x40021000
 800583c:	48000400 	.word	0x48000400
 8005840:	40005400 	.word	0x40005400

08005844 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b0b4      	sub	sp, #208	; 0xd0
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800584c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8005850:	2200      	movs	r2, #0
 8005852:	601a      	str	r2, [r3, #0]
 8005854:	605a      	str	r2, [r3, #4]
 8005856:	609a      	str	r2, [r3, #8]
 8005858:	60da      	str	r2, [r3, #12]
 800585a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800585c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005860:	2294      	movs	r2, #148	; 0x94
 8005862:	2100      	movs	r1, #0
 8005864:	4618      	mov	r0, r3
 8005866:	f00b fb50 	bl	8010f0a <memset>
  if(huart->Instance==UART4)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4a8b      	ldr	r2, [pc, #556]	; (8005a9c <HAL_UART_MspInit+0x258>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d144      	bne.n	80058fe <HAL_UART_MspInit+0xba>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8005874:	2308      	movs	r3, #8
 8005876:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8005878:	2300      	movs	r3, #0
 800587a:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800587c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005880:	4618      	mov	r0, r3
 8005882:	f003 fc2b 	bl	80090dc <HAL_RCCEx_PeriphCLKConfig>
 8005886:	4603      	mov	r3, r0
 8005888:	2b00      	cmp	r3, #0
 800588a:	d001      	beq.n	8005890 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800588c:	f7ff fa2e 	bl	8004cec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8005890:	4b83      	ldr	r3, [pc, #524]	; (8005aa0 <HAL_UART_MspInit+0x25c>)
 8005892:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005894:	4a82      	ldr	r2, [pc, #520]	; (8005aa0 <HAL_UART_MspInit+0x25c>)
 8005896:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800589a:	6593      	str	r3, [r2, #88]	; 0x58
 800589c:	4b80      	ldr	r3, [pc, #512]	; (8005aa0 <HAL_UART_MspInit+0x25c>)
 800589e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058a0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80058a4:	627b      	str	r3, [r7, #36]	; 0x24
 80058a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80058a8:	4b7d      	ldr	r3, [pc, #500]	; (8005aa0 <HAL_UART_MspInit+0x25c>)
 80058aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058ac:	4a7c      	ldr	r2, [pc, #496]	; (8005aa0 <HAL_UART_MspInit+0x25c>)
 80058ae:	f043 0301 	orr.w	r3, r3, #1
 80058b2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80058b4:	4b7a      	ldr	r3, [pc, #488]	; (8005aa0 <HAL_UART_MspInit+0x25c>)
 80058b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058b8:	f003 0301 	and.w	r3, r3, #1
 80058bc:	623b      	str	r3, [r7, #32]
 80058be:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 80058c0:	2303      	movs	r3, #3
 80058c2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80058c6:	2302      	movs	r3, #2
 80058c8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058cc:	2300      	movs	r3, #0
 80058ce:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80058d2:	2303      	movs	r3, #3
 80058d4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80058d8:	2308      	movs	r3, #8
 80058da:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80058de:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80058e2:	4619      	mov	r1, r3
 80058e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80058e8:	f001 f9ca 	bl	8006c80 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 80058ec:	2200      	movs	r2, #0
 80058ee:	2105      	movs	r1, #5
 80058f0:	2034      	movs	r0, #52	; 0x34
 80058f2:	f000 fe1f 	bl	8006534 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80058f6:	2034      	movs	r0, #52	; 0x34
 80058f8:	f000 fe38 	bl	800656c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80058fc:	e0ca      	b.n	8005a94 <HAL_UART_MspInit+0x250>
  else if(huart->Instance==USART1)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4a68      	ldr	r2, [pc, #416]	; (8005aa4 <HAL_UART_MspInit+0x260>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d143      	bne.n	8005990 <HAL_UART_MspInit+0x14c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8005908:	2301      	movs	r3, #1
 800590a:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800590c:	2300      	movs	r3, #0
 800590e:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005910:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005914:	4618      	mov	r0, r3
 8005916:	f003 fbe1 	bl	80090dc <HAL_RCCEx_PeriphCLKConfig>
 800591a:	4603      	mov	r3, r0
 800591c:	2b00      	cmp	r3, #0
 800591e:	d001      	beq.n	8005924 <HAL_UART_MspInit+0xe0>
      Error_Handler();
 8005920:	f7ff f9e4 	bl	8004cec <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8005924:	4b5e      	ldr	r3, [pc, #376]	; (8005aa0 <HAL_UART_MspInit+0x25c>)
 8005926:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005928:	4a5d      	ldr	r2, [pc, #372]	; (8005aa0 <HAL_UART_MspInit+0x25c>)
 800592a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800592e:	6613      	str	r3, [r2, #96]	; 0x60
 8005930:	4b5b      	ldr	r3, [pc, #364]	; (8005aa0 <HAL_UART_MspInit+0x25c>)
 8005932:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005934:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005938:	61fb      	str	r3, [r7, #28]
 800593a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800593c:	4b58      	ldr	r3, [pc, #352]	; (8005aa0 <HAL_UART_MspInit+0x25c>)
 800593e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005940:	4a57      	ldr	r2, [pc, #348]	; (8005aa0 <HAL_UART_MspInit+0x25c>)
 8005942:	f043 0302 	orr.w	r3, r3, #2
 8005946:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005948:	4b55      	ldr	r3, [pc, #340]	; (8005aa0 <HAL_UART_MspInit+0x25c>)
 800594a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800594c:	f003 0302 	and.w	r3, r3, #2
 8005950:	61bb      	str	r3, [r7, #24]
 8005952:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8005954:	23c0      	movs	r3, #192	; 0xc0
 8005956:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800595a:	2302      	movs	r3, #2
 800595c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005960:	2300      	movs	r3, #0
 8005962:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005966:	2303      	movs	r3, #3
 8005968:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800596c:	2307      	movs	r3, #7
 800596e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005972:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8005976:	4619      	mov	r1, r3
 8005978:	484b      	ldr	r0, [pc, #300]	; (8005aa8 <HAL_UART_MspInit+0x264>)
 800597a:	f001 f981 	bl	8006c80 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800597e:	2200      	movs	r2, #0
 8005980:	2105      	movs	r1, #5
 8005982:	2025      	movs	r0, #37	; 0x25
 8005984:	f000 fdd6 	bl	8006534 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005988:	2025      	movs	r0, #37	; 0x25
 800598a:	f000 fdef 	bl	800656c <HAL_NVIC_EnableIRQ>
}
 800598e:	e081      	b.n	8005a94 <HAL_UART_MspInit+0x250>
  else if(huart->Instance==USART2)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4a45      	ldr	r2, [pc, #276]	; (8005aac <HAL_UART_MspInit+0x268>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d13b      	bne.n	8005a12 <HAL_UART_MspInit+0x1ce>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800599a:	2302      	movs	r3, #2
 800599c:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800599e:	2300      	movs	r3, #0
 80059a0:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80059a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80059a6:	4618      	mov	r0, r3
 80059a8:	f003 fb98 	bl	80090dc <HAL_RCCEx_PeriphCLKConfig>
 80059ac:	4603      	mov	r3, r0
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d001      	beq.n	80059b6 <HAL_UART_MspInit+0x172>
      Error_Handler();
 80059b2:	f7ff f99b 	bl	8004cec <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80059b6:	4b3a      	ldr	r3, [pc, #232]	; (8005aa0 <HAL_UART_MspInit+0x25c>)
 80059b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059ba:	4a39      	ldr	r2, [pc, #228]	; (8005aa0 <HAL_UART_MspInit+0x25c>)
 80059bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80059c0:	6593      	str	r3, [r2, #88]	; 0x58
 80059c2:	4b37      	ldr	r3, [pc, #220]	; (8005aa0 <HAL_UART_MspInit+0x25c>)
 80059c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059ca:	617b      	str	r3, [r7, #20]
 80059cc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80059ce:	4b34      	ldr	r3, [pc, #208]	; (8005aa0 <HAL_UART_MspInit+0x25c>)
 80059d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059d2:	4a33      	ldr	r2, [pc, #204]	; (8005aa0 <HAL_UART_MspInit+0x25c>)
 80059d4:	f043 0308 	orr.w	r3, r3, #8
 80059d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80059da:	4b31      	ldr	r3, [pc, #196]	; (8005aa0 <HAL_UART_MspInit+0x25c>)
 80059dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059de:	f003 0308 	and.w	r3, r3, #8
 80059e2:	613b      	str	r3, [r7, #16]
 80059e4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 80059e6:	2378      	movs	r3, #120	; 0x78
 80059e8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80059ec:	2302      	movs	r3, #2
 80059ee:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059f2:	2300      	movs	r3, #0
 80059f4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80059f8:	2303      	movs	r3, #3
 80059fa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80059fe:	2307      	movs	r3, #7
 8005a00:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005a04:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8005a08:	4619      	mov	r1, r3
 8005a0a:	4829      	ldr	r0, [pc, #164]	; (8005ab0 <HAL_UART_MspInit+0x26c>)
 8005a0c:	f001 f938 	bl	8006c80 <HAL_GPIO_Init>
}
 8005a10:	e040      	b.n	8005a94 <HAL_UART_MspInit+0x250>
  else if(huart->Instance==USART3)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4a27      	ldr	r2, [pc, #156]	; (8005ab4 <HAL_UART_MspInit+0x270>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d13b      	bne.n	8005a94 <HAL_UART_MspInit+0x250>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8005a1c:	2304      	movs	r3, #4
 8005a1e:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8005a20:	2300      	movs	r3, #0
 8005a22:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005a24:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005a28:	4618      	mov	r0, r3
 8005a2a:	f003 fb57 	bl	80090dc <HAL_RCCEx_PeriphCLKConfig>
 8005a2e:	4603      	mov	r3, r0
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d001      	beq.n	8005a38 <HAL_UART_MspInit+0x1f4>
      Error_Handler();
 8005a34:	f7ff f95a 	bl	8004cec <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8005a38:	4b19      	ldr	r3, [pc, #100]	; (8005aa0 <HAL_UART_MspInit+0x25c>)
 8005a3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a3c:	4a18      	ldr	r2, [pc, #96]	; (8005aa0 <HAL_UART_MspInit+0x25c>)
 8005a3e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005a42:	6593      	str	r3, [r2, #88]	; 0x58
 8005a44:	4b16      	ldr	r3, [pc, #88]	; (8005aa0 <HAL_UART_MspInit+0x25c>)
 8005a46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a48:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005a4c:	60fb      	str	r3, [r7, #12]
 8005a4e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005a50:	4b13      	ldr	r3, [pc, #76]	; (8005aa0 <HAL_UART_MspInit+0x25c>)
 8005a52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a54:	4a12      	ldr	r2, [pc, #72]	; (8005aa0 <HAL_UART_MspInit+0x25c>)
 8005a56:	f043 0308 	orr.w	r3, r3, #8
 8005a5a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005a5c:	4b10      	ldr	r3, [pc, #64]	; (8005aa0 <HAL_UART_MspInit+0x25c>)
 8005a5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a60:	f003 0308 	and.w	r3, r3, #8
 8005a64:	60bb      	str	r3, [r7, #8]
 8005a66:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8005a68:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005a6c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a70:	2302      	movs	r3, #2
 8005a72:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a76:	2300      	movs	r3, #0
 8005a78:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005a7c:	2303      	movs	r3, #3
 8005a7e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005a82:	2307      	movs	r3, #7
 8005a84:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005a88:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8005a8c:	4619      	mov	r1, r3
 8005a8e:	4808      	ldr	r0, [pc, #32]	; (8005ab0 <HAL_UART_MspInit+0x26c>)
 8005a90:	f001 f8f6 	bl	8006c80 <HAL_GPIO_Init>
}
 8005a94:	bf00      	nop
 8005a96:	37d0      	adds	r7, #208	; 0xd0
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	bd80      	pop	{r7, pc}
 8005a9c:	40004c00 	.word	0x40004c00
 8005aa0:	40021000 	.word	0x40021000
 8005aa4:	40013800 	.word	0x40013800
 8005aa8:	48000400 	.word	0x48000400
 8005aac:	40004400 	.word	0x40004400
 8005ab0:	48000c00 	.word	0x48000c00
 8005ab4:	40004800 	.word	0x40004800

08005ab8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b08c      	sub	sp, #48	; 0x30
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8005ac6:	4b2e      	ldr	r3, [pc, #184]	; (8005b80 <HAL_InitTick+0xc8>)
 8005ac8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005aca:	4a2d      	ldr	r2, [pc, #180]	; (8005b80 <HAL_InitTick+0xc8>)
 8005acc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005ad0:	6613      	str	r3, [r2, #96]	; 0x60
 8005ad2:	4b2b      	ldr	r3, [pc, #172]	; (8005b80 <HAL_InitTick+0xc8>)
 8005ad4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ad6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ada:	60bb      	str	r3, [r7, #8]
 8005adc:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005ade:	f107 020c 	add.w	r2, r7, #12
 8005ae2:	f107 0310 	add.w	r3, r7, #16
 8005ae6:	4611      	mov	r1, r2
 8005ae8:	4618      	mov	r0, r3
 8005aea:	f003 fa05 	bl	8008ef8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8005aee:	f003 f9ed 	bl	8008ecc <HAL_RCC_GetPCLK2Freq>
 8005af2:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8005af4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005af6:	4a23      	ldr	r2, [pc, #140]	; (8005b84 <HAL_InitTick+0xcc>)
 8005af8:	fba2 2303 	umull	r2, r3, r2, r3
 8005afc:	0c9b      	lsrs	r3, r3, #18
 8005afe:	3b01      	subs	r3, #1
 8005b00:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8005b02:	4b21      	ldr	r3, [pc, #132]	; (8005b88 <HAL_InitTick+0xd0>)
 8005b04:	4a21      	ldr	r2, [pc, #132]	; (8005b8c <HAL_InitTick+0xd4>)
 8005b06:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8005b08:	4b1f      	ldr	r3, [pc, #124]	; (8005b88 <HAL_InitTick+0xd0>)
 8005b0a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005b0e:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8005b10:	4a1d      	ldr	r2, [pc, #116]	; (8005b88 <HAL_InitTick+0xd0>)
 8005b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b14:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8005b16:	4b1c      	ldr	r3, [pc, #112]	; (8005b88 <HAL_InitTick+0xd0>)
 8005b18:	2200      	movs	r2, #0
 8005b1a:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005b1c:	4b1a      	ldr	r3, [pc, #104]	; (8005b88 <HAL_InitTick+0xd0>)
 8005b1e:	2200      	movs	r2, #0
 8005b20:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005b22:	4b19      	ldr	r3, [pc, #100]	; (8005b88 <HAL_InitTick+0xd0>)
 8005b24:	2200      	movs	r2, #0
 8005b26:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8005b28:	4817      	ldr	r0, [pc, #92]	; (8005b88 <HAL_InitTick+0xd0>)
 8005b2a:	f003 ffef 	bl	8009b0c <HAL_TIM_Base_Init>
 8005b2e:	4603      	mov	r3, r0
 8005b30:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8005b34:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d11b      	bne.n	8005b74 <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8005b3c:	4812      	ldr	r0, [pc, #72]	; (8005b88 <HAL_InitTick+0xd0>)
 8005b3e:	f004 f847 	bl	8009bd0 <HAL_TIM_Base_Start_IT>
 8005b42:	4603      	mov	r3, r0
 8005b44:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8005b48:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d111      	bne.n	8005b74 <HAL_InitTick+0xbc>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8005b50:	2019      	movs	r0, #25
 8005b52:	f000 fd0b 	bl	800656c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2b0f      	cmp	r3, #15
 8005b5a:	d808      	bhi.n	8005b6e <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	6879      	ldr	r1, [r7, #4]
 8005b60:	2019      	movs	r0, #25
 8005b62:	f000 fce7 	bl	8006534 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005b66:	4a0a      	ldr	r2, [pc, #40]	; (8005b90 <HAL_InitTick+0xd8>)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6013      	str	r3, [r2, #0]
 8005b6c:	e002      	b.n	8005b74 <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 8005b6e:	2301      	movs	r3, #1
 8005b70:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8005b74:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8005b78:	4618      	mov	r0, r3
 8005b7a:	3730      	adds	r7, #48	; 0x30
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	bd80      	pop	{r7, pc}
 8005b80:	40021000 	.word	0x40021000
 8005b84:	431bde83 	.word	0x431bde83
 8005b88:	2000047c 	.word	0x2000047c
 8005b8c:	40012c00 	.word	0x40012c00
 8005b90:	20000040 	.word	0x20000040

08005b94 <NMI_Handler>:

/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005b94:	b480      	push	{r7}
 8005b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005b98:	e7fe      	b.n	8005b98 <NMI_Handler+0x4>

08005b9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005b9a:	b480      	push	{r7}
 8005b9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005b9e:	e7fe      	b.n	8005b9e <HardFault_Handler+0x4>

08005ba0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005ba4:	e7fe      	b.n	8005ba4 <MemManage_Handler+0x4>

08005ba6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005ba6:	b480      	push	{r7}
 8005ba8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005baa:	e7fe      	b.n	8005baa <BusFault_Handler+0x4>

08005bac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005bac:	b480      	push	{r7}
 8005bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005bb0:	e7fe      	b.n	8005bb0 <UsageFault_Handler+0x4>

08005bb2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005bb2:	b480      	push	{r7}
 8005bb4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005bb6:	bf00      	nop
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbe:	4770      	bx	lr

08005bc0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 8005bc4:	2020      	movs	r0, #32
 8005bc6:	f001 fa1f 	bl	8007008 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 8005bca:	2040      	movs	r0, #64	; 0x40
 8005bcc:	f001 fa1c 	bl	8007008 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8005bd0:	2080      	movs	r0, #128	; 0x80
 8005bd2:	f001 fa19 	bl	8007008 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 8005bd6:	f44f 7080 	mov.w	r0, #256	; 0x100
 8005bda:	f001 fa15 	bl	8007008 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8005bde:	bf00      	nop
 8005be0:	bd80      	pop	{r7, pc}
	...

08005be4 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005be8:	4802      	ldr	r0, [pc, #8]	; (8005bf4 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8005bea:	f004 f861 	bl	8009cb0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8005bee:	bf00      	nop
 8005bf0:	bd80      	pop	{r7, pc}
 8005bf2:	bf00      	nop
 8005bf4:	2000047c 	.word	0x2000047c

08005bf8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8005bfc:	4802      	ldr	r0, [pc, #8]	; (8005c08 <I2C1_EV_IRQHandler+0x10>)
 8005bfe:	f001 fecd 	bl	800799c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8005c02:	bf00      	nop
 8005c04:	bd80      	pop	{r7, pc}
 8005c06:	bf00      	nop
 8005c08:	200002f0 	.word	0x200002f0

08005c0c <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8005c10:	4802      	ldr	r0, [pc, #8]	; (8005c1c <I2C2_EV_IRQHandler+0x10>)
 8005c12:	f001 fec3 	bl	800799c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8005c16:	bf00      	nop
 8005c18:	bd80      	pop	{r7, pc}
 8005c1a:	bf00      	nop
 8005c1c:	200003bc 	.word	0x200003bc

08005c20 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8005c24:	4802      	ldr	r0, [pc, #8]	; (8005c30 <USART1_IRQHandler+0x10>)
 8005c26:	f004 fb81 	bl	800a32c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8005c2a:	bf00      	nop
 8005c2c:	bd80      	pop	{r7, pc}
 8005c2e:	bf00      	nop
 8005c30:	200004cc 	.word	0x200004cc

08005c34 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8005c38:	4802      	ldr	r0, [pc, #8]	; (8005c44 <UART4_IRQHandler+0x10>)
 8005c3a:	f004 fb77 	bl	800a32c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8005c3e:	bf00      	nop
 8005c40:	bd80      	pop	{r7, pc}
 8005c42:	bf00      	nop
 8005c44:	2000055c 	.word	0x2000055c

08005c48 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI10_Pin);
 8005c4c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8005c50:	f001 f9da 	bl	8007008 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8005c54:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005c58:	f001 f9d6 	bl	8007008 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(USB_OTG_FS_PWR_EN_Pin);
 8005c5c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8005c60:	f001 f9d2 	bl	8007008 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 8005c64:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8005c68:	f001 f9ce 	bl	8007008 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 8005c6c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8005c70:	f001 f9ca 	bl	8007008 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 8005c74:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8005c78:	f001 f9c6 	bl	8007008 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8005c7c:	bf00      	nop
 8005c7e:	bd80      	pop	{r7, pc}

08005c80 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005c80:	b480      	push	{r7}
 8005c82:	af00      	add	r7, sp, #0
  return 1;
 8005c84:	2301      	movs	r3, #1
}
 8005c86:	4618      	mov	r0, r3
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8e:	4770      	bx	lr

08005c90 <_kill>:

int _kill(int pid, int sig)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b082      	sub	sp, #8
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
 8005c98:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8005c9a:	f00b f999 	bl	8010fd0 <__errno>
 8005c9e:	4603      	mov	r3, r0
 8005ca0:	2216      	movs	r2, #22
 8005ca2:	601a      	str	r2, [r3, #0]
  return -1;
 8005ca4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005ca8:	4618      	mov	r0, r3
 8005caa:	3708      	adds	r7, #8
 8005cac:	46bd      	mov	sp, r7
 8005cae:	bd80      	pop	{r7, pc}

08005cb0 <_exit>:

void _exit (int status)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b082      	sub	sp, #8
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8005cb8:	f04f 31ff 	mov.w	r1, #4294967295
 8005cbc:	6878      	ldr	r0, [r7, #4]
 8005cbe:	f7ff ffe7 	bl	8005c90 <_kill>
  while (1) {}    /* Make sure we hang here */
 8005cc2:	e7fe      	b.n	8005cc2 <_exit+0x12>

08005cc4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b086      	sub	sp, #24
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	60f8      	str	r0, [r7, #12]
 8005ccc:	60b9      	str	r1, [r7, #8]
 8005cce:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	617b      	str	r3, [r7, #20]
 8005cd4:	e00a      	b.n	8005cec <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8005cd6:	f3af 8000 	nop.w
 8005cda:	4601      	mov	r1, r0
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	1c5a      	adds	r2, r3, #1
 8005ce0:	60ba      	str	r2, [r7, #8]
 8005ce2:	b2ca      	uxtb	r2, r1
 8005ce4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005ce6:	697b      	ldr	r3, [r7, #20]
 8005ce8:	3301      	adds	r3, #1
 8005cea:	617b      	str	r3, [r7, #20]
 8005cec:	697a      	ldr	r2, [r7, #20]
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	429a      	cmp	r2, r3
 8005cf2:	dbf0      	blt.n	8005cd6 <_read+0x12>
  }

  return len;
 8005cf4:	687b      	ldr	r3, [r7, #4]
}
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	3718      	adds	r7, #24
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	bd80      	pop	{r7, pc}

08005cfe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005cfe:	b580      	push	{r7, lr}
 8005d00:	b086      	sub	sp, #24
 8005d02:	af00      	add	r7, sp, #0
 8005d04:	60f8      	str	r0, [r7, #12]
 8005d06:	60b9      	str	r1, [r7, #8]
 8005d08:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	617b      	str	r3, [r7, #20]
 8005d0e:	e009      	b.n	8005d24 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8005d10:	68bb      	ldr	r3, [r7, #8]
 8005d12:	1c5a      	adds	r2, r3, #1
 8005d14:	60ba      	str	r2, [r7, #8]
 8005d16:	781b      	ldrb	r3, [r3, #0]
 8005d18:	4618      	mov	r0, r3
 8005d1a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005d1e:	697b      	ldr	r3, [r7, #20]
 8005d20:	3301      	adds	r3, #1
 8005d22:	617b      	str	r3, [r7, #20]
 8005d24:	697a      	ldr	r2, [r7, #20]
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	429a      	cmp	r2, r3
 8005d2a:	dbf1      	blt.n	8005d10 <_write+0x12>
  }
  return len;
 8005d2c:	687b      	ldr	r3, [r7, #4]
}
 8005d2e:	4618      	mov	r0, r3
 8005d30:	3718      	adds	r7, #24
 8005d32:	46bd      	mov	sp, r7
 8005d34:	bd80      	pop	{r7, pc}

08005d36 <_close>:

int _close(int file)
{
 8005d36:	b480      	push	{r7}
 8005d38:	b083      	sub	sp, #12
 8005d3a:	af00      	add	r7, sp, #0
 8005d3c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8005d3e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005d42:	4618      	mov	r0, r3
 8005d44:	370c      	adds	r7, #12
 8005d46:	46bd      	mov	sp, r7
 8005d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4c:	4770      	bx	lr

08005d4e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005d4e:	b480      	push	{r7}
 8005d50:	b083      	sub	sp, #12
 8005d52:	af00      	add	r7, sp, #0
 8005d54:	6078      	str	r0, [r7, #4]
 8005d56:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005d5e:	605a      	str	r2, [r3, #4]
  return 0;
 8005d60:	2300      	movs	r3, #0
}
 8005d62:	4618      	mov	r0, r3
 8005d64:	370c      	adds	r7, #12
 8005d66:	46bd      	mov	sp, r7
 8005d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6c:	4770      	bx	lr

08005d6e <_isatty>:

int _isatty(int file)
{
 8005d6e:	b480      	push	{r7}
 8005d70:	b083      	sub	sp, #12
 8005d72:	af00      	add	r7, sp, #0
 8005d74:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8005d76:	2301      	movs	r3, #1
}
 8005d78:	4618      	mov	r0, r3
 8005d7a:	370c      	adds	r7, #12
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d82:	4770      	bx	lr

08005d84 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005d84:	b480      	push	{r7}
 8005d86:	b085      	sub	sp, #20
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	60f8      	str	r0, [r7, #12]
 8005d8c:	60b9      	str	r1, [r7, #8]
 8005d8e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8005d90:	2300      	movs	r3, #0
}
 8005d92:	4618      	mov	r0, r3
 8005d94:	3714      	adds	r7, #20
 8005d96:	46bd      	mov	sp, r7
 8005d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9c:	4770      	bx	lr
	...

08005da0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b086      	sub	sp, #24
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005da8:	4a14      	ldr	r2, [pc, #80]	; (8005dfc <_sbrk+0x5c>)
 8005daa:	4b15      	ldr	r3, [pc, #84]	; (8005e00 <_sbrk+0x60>)
 8005dac:	1ad3      	subs	r3, r2, r3
 8005dae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005db0:	697b      	ldr	r3, [r7, #20]
 8005db2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005db4:	4b13      	ldr	r3, [pc, #76]	; (8005e04 <_sbrk+0x64>)
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d102      	bne.n	8005dc2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005dbc:	4b11      	ldr	r3, [pc, #68]	; (8005e04 <_sbrk+0x64>)
 8005dbe:	4a12      	ldr	r2, [pc, #72]	; (8005e08 <_sbrk+0x68>)
 8005dc0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005dc2:	4b10      	ldr	r3, [pc, #64]	; (8005e04 <_sbrk+0x64>)
 8005dc4:	681a      	ldr	r2, [r3, #0]
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	4413      	add	r3, r2
 8005dca:	693a      	ldr	r2, [r7, #16]
 8005dcc:	429a      	cmp	r2, r3
 8005dce:	d207      	bcs.n	8005de0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005dd0:	f00b f8fe 	bl	8010fd0 <__errno>
 8005dd4:	4603      	mov	r3, r0
 8005dd6:	220c      	movs	r2, #12
 8005dd8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005dda:	f04f 33ff 	mov.w	r3, #4294967295
 8005dde:	e009      	b.n	8005df4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005de0:	4b08      	ldr	r3, [pc, #32]	; (8005e04 <_sbrk+0x64>)
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005de6:	4b07      	ldr	r3, [pc, #28]	; (8005e04 <_sbrk+0x64>)
 8005de8:	681a      	ldr	r2, [r3, #0]
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	4413      	add	r3, r2
 8005dee:	4a05      	ldr	r2, [pc, #20]	; (8005e04 <_sbrk+0x64>)
 8005df0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005df2:	68fb      	ldr	r3, [r7, #12]
}
 8005df4:	4618      	mov	r0, r3
 8005df6:	3718      	adds	r7, #24
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	bd80      	pop	{r7, pc}
 8005dfc:	200a0000 	.word	0x200a0000
 8005e00:	00000400 	.word	0x00000400
 8005e04:	200004c8 	.word	0x200004c8
 8005e08:	200064f8 	.word	0x200064f8

08005e0c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8005e10:	4b06      	ldr	r3, [pc, #24]	; (8005e2c <SystemInit+0x20>)
 8005e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e16:	4a05      	ldr	r2, [pc, #20]	; (8005e2c <SystemInit+0x20>)
 8005e18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005e1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8005e20:	bf00      	nop
 8005e22:	46bd      	mov	sp, r7
 8005e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e28:	4770      	bx	lr
 8005e2a:	bf00      	nop
 8005e2c:	e000ed00 	.word	0xe000ed00

08005e30 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	af00      	add	r7, sp, #0
  huart1.Instance = USART1;
 8005e34:	4b24      	ldr	r3, [pc, #144]	; (8005ec8 <MX_USART1_UART_Init+0x98>)
 8005e36:	4a25      	ldr	r2, [pc, #148]	; (8005ecc <MX_USART1_UART_Init+0x9c>)
 8005e38:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 921600;
 8005e3a:	4b23      	ldr	r3, [pc, #140]	; (8005ec8 <MX_USART1_UART_Init+0x98>)
 8005e3c:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8005e40:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005e42:	4b21      	ldr	r3, [pc, #132]	; (8005ec8 <MX_USART1_UART_Init+0x98>)
 8005e44:	2200      	movs	r2, #0
 8005e46:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005e48:	4b1f      	ldr	r3, [pc, #124]	; (8005ec8 <MX_USART1_UART_Init+0x98>)
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005e4e:	4b1e      	ldr	r3, [pc, #120]	; (8005ec8 <MX_USART1_UART_Init+0x98>)
 8005e50:	2200      	movs	r2, #0
 8005e52:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005e54:	4b1c      	ldr	r3, [pc, #112]	; (8005ec8 <MX_USART1_UART_Init+0x98>)
 8005e56:	220c      	movs	r2, #12
 8005e58:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005e5a:	4b1b      	ldr	r3, [pc, #108]	; (8005ec8 <MX_USART1_UART_Init+0x98>)
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005e60:	4b19      	ldr	r3, [pc, #100]	; (8005ec8 <MX_USART1_UART_Init+0x98>)
 8005e62:	2200      	movs	r2, #0
 8005e64:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005e66:	4b18      	ldr	r3, [pc, #96]	; (8005ec8 <MX_USART1_UART_Init+0x98>)
 8005e68:	2200      	movs	r2, #0
 8005e6a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005e6c:	4b16      	ldr	r3, [pc, #88]	; (8005ec8 <MX_USART1_UART_Init+0x98>)
 8005e6e:	2200      	movs	r2, #0
 8005e70:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005e72:	4b15      	ldr	r3, [pc, #84]	; (8005ec8 <MX_USART1_UART_Init+0x98>)
 8005e74:	2200      	movs	r2, #0
 8005e76:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005e78:	4813      	ldr	r0, [pc, #76]	; (8005ec8 <MX_USART1_UART_Init+0x98>)
 8005e7a:	f004 f919 	bl	800a0b0 <HAL_UART_Init>
 8005e7e:	4603      	mov	r3, r0
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d001      	beq.n	8005e88 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8005e84:	f7fe ff32 	bl	8004cec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005e88:	2100      	movs	r1, #0
 8005e8a:	480f      	ldr	r0, [pc, #60]	; (8005ec8 <MX_USART1_UART_Init+0x98>)
 8005e8c:	f006 f8c5 	bl	800c01a <HAL_UARTEx_SetTxFifoThreshold>
 8005e90:	4603      	mov	r3, r0
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d001      	beq.n	8005e9a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8005e96:	f7fe ff29 	bl	8004cec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005e9a:	2100      	movs	r1, #0
 8005e9c:	480a      	ldr	r0, [pc, #40]	; (8005ec8 <MX_USART1_UART_Init+0x98>)
 8005e9e:	f006 f8fa 	bl	800c096 <HAL_UARTEx_SetRxFifoThreshold>
 8005ea2:	4603      	mov	r3, r0
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d001      	beq.n	8005eac <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8005ea8:	f7fe ff20 	bl	8004cec <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8005eac:	4806      	ldr	r0, [pc, #24]	; (8005ec8 <MX_USART1_UART_Init+0x98>)
 8005eae:	f006 f87b 	bl	800bfa8 <HAL_UARTEx_DisableFifoMode>
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d001      	beq.n	8005ebc <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8005eb8:	f7fe ff18 	bl	8004cec <Error_Handler>
  }
  RB_init(&uart1RXrb, RB_SIZE);
 8005ebc:	2128      	movs	r1, #40	; 0x28
 8005ebe:	4804      	ldr	r0, [pc, #16]	; (8005ed0 <MX_USART1_UART_Init+0xa0>)
 8005ec0:	f7ff fb19 	bl	80054f6 <RB_init>

}
 8005ec4:	bf00      	nop
 8005ec6:	bd80      	pop	{r7, pc}
 8005ec8:	200004cc 	.word	0x200004cc
 8005ecc:	40013800 	.word	0x40013800
 8005ed0:	20000620 	.word	0x20000620

08005ed4 <MX_UART4_Init>:

void MX_UART4_Init(void)
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	af00      	add	r7, sp, #0

  huart4.Instance = UART4;
 8005ed8:	4b26      	ldr	r3, [pc, #152]	; (8005f74 <MX_UART4_Init+0xa0>)
 8005eda:	4a27      	ldr	r2, [pc, #156]	; (8005f78 <MX_UART4_Init+0xa4>)
 8005edc:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 921600;
 8005ede:	4b25      	ldr	r3, [pc, #148]	; (8005f74 <MX_UART4_Init+0xa0>)
 8005ee0:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8005ee4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8005ee6:	4b23      	ldr	r3, [pc, #140]	; (8005f74 <MX_UART4_Init+0xa0>)
 8005ee8:	2200      	movs	r2, #0
 8005eea:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8005eec:	4b21      	ldr	r3, [pc, #132]	; (8005f74 <MX_UART4_Init+0xa0>)
 8005eee:	2200      	movs	r2, #0
 8005ef0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8005ef2:	4b20      	ldr	r3, [pc, #128]	; (8005f74 <MX_UART4_Init+0xa0>)
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8005ef8:	4b1e      	ldr	r3, [pc, #120]	; (8005f74 <MX_UART4_Init+0xa0>)
 8005efa:	220c      	movs	r2, #12
 8005efc:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005efe:	4b1d      	ldr	r3, [pc, #116]	; (8005f74 <MX_UART4_Init+0xa0>)
 8005f00:	2200      	movs	r2, #0
 8005f02:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8005f04:	4b1b      	ldr	r3, [pc, #108]	; (8005f74 <MX_UART4_Init+0xa0>)
 8005f06:	2200      	movs	r2, #0
 8005f08:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005f0a:	4b1a      	ldr	r3, [pc, #104]	; (8005f74 <MX_UART4_Init+0xa0>)
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005f10:	4b18      	ldr	r3, [pc, #96]	; (8005f74 <MX_UART4_Init+0xa0>)
 8005f12:	2200      	movs	r2, #0
 8005f14:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005f16:	4b17      	ldr	r3, [pc, #92]	; (8005f74 <MX_UART4_Init+0xa0>)
 8005f18:	2200      	movs	r2, #0
 8005f1a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8005f1c:	4815      	ldr	r0, [pc, #84]	; (8005f74 <MX_UART4_Init+0xa0>)
 8005f1e:	f004 f8c7 	bl	800a0b0 <HAL_UART_Init>
 8005f22:	4603      	mov	r3, r0
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d001      	beq.n	8005f2c <MX_UART4_Init+0x58>
  {
    error_Handler();
 8005f28:	f000 f82c 	bl	8005f84 <error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005f2c:	2100      	movs	r1, #0
 8005f2e:	4811      	ldr	r0, [pc, #68]	; (8005f74 <MX_UART4_Init+0xa0>)
 8005f30:	f006 f873 	bl	800c01a <HAL_UARTEx_SetTxFifoThreshold>
 8005f34:	4603      	mov	r3, r0
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d001      	beq.n	8005f3e <MX_UART4_Init+0x6a>
  {
    error_Handler();
 8005f3a:	f000 f823 	bl	8005f84 <error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005f3e:	2100      	movs	r1, #0
 8005f40:	480c      	ldr	r0, [pc, #48]	; (8005f74 <MX_UART4_Init+0xa0>)
 8005f42:	f006 f8a8 	bl	800c096 <HAL_UARTEx_SetRxFifoThreshold>
 8005f46:	4603      	mov	r3, r0
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d001      	beq.n	8005f50 <MX_UART4_Init+0x7c>
  {
    error_Handler();
 8005f4c:	f000 f81a 	bl	8005f84 <error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8005f50:	4808      	ldr	r0, [pc, #32]	; (8005f74 <MX_UART4_Init+0xa0>)
 8005f52:	f006 f829 	bl	800bfa8 <HAL_UARTEx_DisableFifoMode>
 8005f56:	4603      	mov	r3, r0
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d001      	beq.n	8005f60 <MX_UART4_Init+0x8c>
  {
    error_Handler();
 8005f5c:	f000 f812 	bl	8005f84 <error_Handler>
  }
  RB_init(&uart4RXrb, RB_SIZE);
 8005f60:	2128      	movs	r1, #40	; 0x28
 8005f62:	4806      	ldr	r0, [pc, #24]	; (8005f7c <MX_UART4_Init+0xa8>)
 8005f64:	f7ff fac7 	bl	80054f6 <RB_init>
  uart_write_debug("UART4 initialized\r\n", 10);
 8005f68:	210a      	movs	r1, #10
 8005f6a:	4805      	ldr	r0, [pc, #20]	; (8005f80 <MX_UART4_Init+0xac>)
 8005f6c:	f000 f83c 	bl	8005fe8 <uart_write_debug>

}
 8005f70:	bf00      	nop
 8005f72:	bd80      	pop	{r7, pc}
 8005f74:	2000055c 	.word	0x2000055c
 8005f78:	40004c00 	.word	0x40004c00
 8005f7c:	200005ec 	.word	0x200005ec
 8005f80:	08014904 	.word	0x08014904

08005f84 <error_Handler>:

void error_Handler(void){
 8005f84:	b580      	push	{r7, lr}
 8005f86:	af00      	add	r7, sp, #0
	uart_write_debug("Failed to Init UART4\r\n", 10);
 8005f88:	210a      	movs	r1, #10
 8005f8a:	4802      	ldr	r0, [pc, #8]	; (8005f94 <error_Handler+0x10>)
 8005f8c:	f000 f82c 	bl	8005fe8 <uart_write_debug>
}
 8005f90:	bf00      	nop
 8005f92:	bd80      	pop	{r7, pc}
 8005f94:	08014918 	.word	0x08014918

08005f98 <uart_receive_it>:


HAL_StatusTypeDef uart_receive_it(UART_select device){
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b084      	sub	sp, #16
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	4603      	mov	r3, r0
 8005fa0:	71fb      	strb	r3, [r7, #7]
	UART_HandleTypeDef *huart;

	switch (device){
 8005fa2:	79fb      	ldrb	r3, [r7, #7]
 8005fa4:	2b02      	cmp	r3, #2
 8005fa6:	d00c      	beq.n	8005fc2 <uart_receive_it+0x2a>
 8005fa8:	2b02      	cmp	r3, #2
 8005faa:	dc0d      	bgt.n	8005fc8 <uart_receive_it+0x30>
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d002      	beq.n	8005fb6 <uart_receive_it+0x1e>
 8005fb0:	2b01      	cmp	r3, #1
 8005fb2:	d003      	beq.n	8005fbc <uart_receive_it+0x24>
 8005fb4:	e008      	b.n	8005fc8 <uart_receive_it+0x30>
	case UART_DEBUG:
		huart = &huart1;
 8005fb6:	4b09      	ldr	r3, [pc, #36]	; (8005fdc <uart_receive_it+0x44>)
 8005fb8:	60fb      	str	r3, [r7, #12]
		break;
 8005fba:	e005      	b.n	8005fc8 <uart_receive_it+0x30>
	case UART_NYX:
		huart = &huart4;
 8005fbc:	4b08      	ldr	r3, [pc, #32]	; (8005fe0 <uart_receive_it+0x48>)
 8005fbe:	60fb      	str	r3, [r7, #12]
		break;
 8005fc0:	e002      	b.n	8005fc8 <uart_receive_it+0x30>
	case UART_IRIS:
		huart = &huart1;
 8005fc2:	4b06      	ldr	r3, [pc, #24]	; (8005fdc <uart_receive_it+0x44>)
 8005fc4:	60fb      	str	r3, [r7, #12]
		break;
 8005fc6:	bf00      	nop
	}
	return HAL_UART_Receive_IT(huart, &rxChar, 1);
 8005fc8:	2201      	movs	r2, #1
 8005fca:	4906      	ldr	r1, [pc, #24]	; (8005fe4 <uart_receive_it+0x4c>)
 8005fcc:	68f8      	ldr	r0, [r7, #12]
 8005fce:	f004 f957 	bl	800a280 <HAL_UART_Receive_IT>
 8005fd2:	4603      	mov	r3, r0
}
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	3710      	adds	r7, #16
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	bd80      	pop	{r7, pc}
 8005fdc:	200004cc 	.word	0x200004cc
 8005fe0:	2000055c 	.word	0x2000055c
 8005fe4:	20000654 	.word	0x20000654

08005fe8 <uart_write_debug>:




HAL_StatusTypeDef uart_write_debug(uint8_t *pData, uint32_t Timeout){
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b082      	sub	sp, #8
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
 8005ff0:	6039      	str	r1, [r7, #0]
	return HAL_UART_Transmit(&huart1,pData,strlen(pData),Timeout);// Sending in normal mode
 8005ff2:	6878      	ldr	r0, [r7, #4]
 8005ff4:	f7fa f954 	bl	80002a0 <strlen>
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	b29a      	uxth	r2, r3
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	6879      	ldr	r1, [r7, #4]
 8006000:	4803      	ldr	r0, [pc, #12]	; (8006010 <uart_write_debug+0x28>)
 8006002:	f004 f8a5 	bl	800a150 <HAL_UART_Transmit>
 8006006:	4603      	mov	r3, r0
}
 8006008:	4618      	mov	r0, r3
 800600a:	3708      	adds	r7, #8
 800600c:	46bd      	mov	sp, r7
 800600e:	bd80      	pop	{r7, pc}
 8006010:	200004cc 	.word	0x200004cc

08006014 <uart_write>:

HAL_StatusTypeDef uart_write(uint8_t *pData, uint8_t len, UART_select device, uint32_t Timeout){
 8006014:	b580      	push	{r7, lr}
 8006016:	b086      	sub	sp, #24
 8006018:	af00      	add	r7, sp, #0
 800601a:	60f8      	str	r0, [r7, #12]
 800601c:	607b      	str	r3, [r7, #4]
 800601e:	460b      	mov	r3, r1
 8006020:	72fb      	strb	r3, [r7, #11]
 8006022:	4613      	mov	r3, r2
 8006024:	72bb      	strb	r3, [r7, #10]
	UART_HandleTypeDef *huart;
	switch (device){
 8006026:	7abb      	ldrb	r3, [r7, #10]
 8006028:	2b02      	cmp	r3, #2
 800602a:	d00c      	beq.n	8006046 <uart_write+0x32>
 800602c:	2b02      	cmp	r3, #2
 800602e:	dc0d      	bgt.n	800604c <uart_write+0x38>
 8006030:	2b00      	cmp	r3, #0
 8006032:	d002      	beq.n	800603a <uart_write+0x26>
 8006034:	2b01      	cmp	r3, #1
 8006036:	d003      	beq.n	8006040 <uart_write+0x2c>
 8006038:	e008      	b.n	800604c <uart_write+0x38>
	case UART_DEBUG:
		huart = &huart1;
 800603a:	4b12      	ldr	r3, [pc, #72]	; (8006084 <uart_write+0x70>)
 800603c:	617b      	str	r3, [r7, #20]
		break;
 800603e:	e005      	b.n	800604c <uart_write+0x38>
	case UART_NYX:
		huart = &huart4;
 8006040:	4b11      	ldr	r3, [pc, #68]	; (8006088 <uart_write+0x74>)
 8006042:	617b      	str	r3, [r7, #20]
		break;
 8006044:	e002      	b.n	800604c <uart_write+0x38>
	case UART_IRIS:
		huart = &huart1;
 8006046:	4b0f      	ldr	r3, [pc, #60]	; (8006084 <uart_write+0x70>)
 8006048:	617b      	str	r3, [r7, #20]
		break;
 800604a:	bf00      	nop
	}
	if (len == 0){
 800604c:	7afb      	ldrb	r3, [r7, #11]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d10b      	bne.n	800606a <uart_write+0x56>
		return HAL_UART_Transmit(huart,pData,strlen(pData),Timeout);// Sending in normal mode
 8006052:	68f8      	ldr	r0, [r7, #12]
 8006054:	f7fa f924 	bl	80002a0 <strlen>
 8006058:	4603      	mov	r3, r0
 800605a:	b29a      	uxth	r2, r3
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	68f9      	ldr	r1, [r7, #12]
 8006060:	6978      	ldr	r0, [r7, #20]
 8006062:	f004 f875 	bl	800a150 <HAL_UART_Transmit>
 8006066:	4603      	mov	r3, r0
 8006068:	e007      	b.n	800607a <uart_write+0x66>
	}
	return HAL_UART_Transmit(huart,pData,len,Timeout);// Sending in normal mode
 800606a:	7afb      	ldrb	r3, [r7, #11]
 800606c:	b29a      	uxth	r2, r3
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	68f9      	ldr	r1, [r7, #12]
 8006072:	6978      	ldr	r0, [r7, #20]
 8006074:	f004 f86c 	bl	800a150 <HAL_UART_Transmit>
 8006078:	4603      	mov	r3, r0
}
 800607a:	4618      	mov	r0, r3
 800607c:	3718      	adds	r7, #24
 800607e:	46bd      	mov	sp, r7
 8006080:	bd80      	pop	{r7, pc}
 8006082:	bf00      	nop
 8006084:	200004cc 	.word	0x200004cc
 8006088:	2000055c 	.word	0x2000055c

0800608c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b084      	sub	sp, #16
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
	if (UartHandle->Instance == UART4)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	4a7c      	ldr	r2, [pc, #496]	; (800628c <HAL_UART_RxCpltCallback+0x200>)
 800609a:	4293      	cmp	r3, r2
 800609c:	f040 80a2 	bne.w	80061e4 <HAL_UART_RxCpltCallback+0x158>
	{
		if (ack_rcv_flag == 1){
 80060a0:	4b7b      	ldr	r3, [pc, #492]	; (8006290 <HAL_UART_RxCpltCallback+0x204>)
 80060a2:	781b      	ldrb	r3, [r3, #0]
 80060a4:	2b01      	cmp	r3, #1
 80060a6:	d129      	bne.n	80060fc <HAL_UART_RxCpltCallback+0x70>
			if ((rxChar != ESC) && (prvRxChar == ACK)){
 80060a8:	4b7a      	ldr	r3, [pc, #488]	; (8006294 <HAL_UART_RxCpltCallback+0x208>)
 80060aa:	781b      	ldrb	r3, [r3, #0]
 80060ac:	2b1b      	cmp	r3, #27
 80060ae:	d010      	beq.n	80060d2 <HAL_UART_RxCpltCallback+0x46>
 80060b0:	4b79      	ldr	r3, [pc, #484]	; (8006298 <HAL_UART_RxCpltCallback+0x20c>)
 80060b2:	781b      	ldrb	r3, [r3, #0]
 80060b4:	2b06      	cmp	r3, #6
 80060b6:	d10c      	bne.n	80060d2 <HAL_UART_RxCpltCallback+0x46>
				osEventFlagsSet(ack_rcvd, ACK_FLAG);
 80060b8:	4b78      	ldr	r3, [pc, #480]	; (800629c <HAL_UART_RxCpltCallback+0x210>)
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	2101      	movs	r1, #1
 80060be:	4618      	mov	r0, r3
 80060c0:	f006 fa32 	bl	800c528 <osEventFlagsSet>
				prvRxChar = 0x00;
 80060c4:	4b74      	ldr	r3, [pc, #464]	; (8006298 <HAL_UART_RxCpltCallback+0x20c>)
 80060c6:	2200      	movs	r2, #0
 80060c8:	701a      	strb	r2, [r3, #0]
				ack_rcv_flag = 0;
 80060ca:	4b71      	ldr	r3, [pc, #452]	; (8006290 <HAL_UART_RxCpltCallback+0x204>)
 80060cc:	2200      	movs	r2, #0
 80060ce:	701a      	strb	r2, [r3, #0]
 80060d0:	e082      	b.n	80061d8 <HAL_UART_RxCpltCallback+0x14c>
			}
			else if ((rxChar != ESC) && (prvRxChar == NACK)){
 80060d2:	4b70      	ldr	r3, [pc, #448]	; (8006294 <HAL_UART_RxCpltCallback+0x208>)
 80060d4:	781b      	ldrb	r3, [r3, #0]
 80060d6:	2b1b      	cmp	r3, #27
 80060d8:	d07e      	beq.n	80061d8 <HAL_UART_RxCpltCallback+0x14c>
 80060da:	4b6f      	ldr	r3, [pc, #444]	; (8006298 <HAL_UART_RxCpltCallback+0x20c>)
 80060dc:	781b      	ldrb	r3, [r3, #0]
 80060de:	2b15      	cmp	r3, #21
 80060e0:	d17a      	bne.n	80061d8 <HAL_UART_RxCpltCallback+0x14c>
				osEventFlagsSet(ack_rcvd, NACK_FLAG);
 80060e2:	4b6e      	ldr	r3, [pc, #440]	; (800629c <HAL_UART_RxCpltCallback+0x210>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	2100      	movs	r1, #0
 80060e8:	4618      	mov	r0, r3
 80060ea:	f006 fa1d 	bl	800c528 <osEventFlagsSet>
				prvRxChar = 0x00;
 80060ee:	4b6a      	ldr	r3, [pc, #424]	; (8006298 <HAL_UART_RxCpltCallback+0x20c>)
 80060f0:	2200      	movs	r2, #0
 80060f2:	701a      	strb	r2, [r3, #0]
				ack_rcv_flag = 0;
 80060f4:	4b66      	ldr	r3, [pc, #408]	; (8006290 <HAL_UART_RxCpltCallback+0x204>)
 80060f6:	2200      	movs	r2, #0
 80060f8:	701a      	strb	r2, [r3, #0]
 80060fa:	e06d      	b.n	80061d8 <HAL_UART_RxCpltCallback+0x14c>
			}
		}
		else{
			if (((rxChar == ACK) || (rxChar == NACK)) && (prvRxChar == 0xFF)){
 80060fc:	4b65      	ldr	r3, [pc, #404]	; (8006294 <HAL_UART_RxCpltCallback+0x208>)
 80060fe:	781b      	ldrb	r3, [r3, #0]
 8006100:	2b06      	cmp	r3, #6
 8006102:	d003      	beq.n	800610c <HAL_UART_RxCpltCallback+0x80>
 8006104:	4b63      	ldr	r3, [pc, #396]	; (8006294 <HAL_UART_RxCpltCallback+0x208>)
 8006106:	781b      	ldrb	r3, [r3, #0]
 8006108:	2b15      	cmp	r3, #21
 800610a:	d10b      	bne.n	8006124 <HAL_UART_RxCpltCallback+0x98>
 800610c:	4b62      	ldr	r3, [pc, #392]	; (8006298 <HAL_UART_RxCpltCallback+0x20c>)
 800610e:	781b      	ldrb	r3, [r3, #0]
 8006110:	2bff      	cmp	r3, #255	; 0xff
 8006112:	d107      	bne.n	8006124 <HAL_UART_RxCpltCallback+0x98>
				ack_rcv_flag = 1;
 8006114:	4b5e      	ldr	r3, [pc, #376]	; (8006290 <HAL_UART_RxCpltCallback+0x204>)
 8006116:	2201      	movs	r2, #1
 8006118:	701a      	strb	r2, [r3, #0]
				prvRxChar = rxChar;
 800611a:	4b5e      	ldr	r3, [pc, #376]	; (8006294 <HAL_UART_RxCpltCallback+0x208>)
 800611c:	781a      	ldrb	r2, [r3, #0]
 800611e:	4b5e      	ldr	r3, [pc, #376]	; (8006298 <HAL_UART_RxCpltCallback+0x20c>)
 8006120:	701a      	strb	r2, [r3, #0]
 8006122:	e059      	b.n	80061d8 <HAL_UART_RxCpltCallback+0x14c>
			}
			else if ((rxChar == ETX) && (prvRxChar != ESC)){
 8006124:	4b5b      	ldr	r3, [pc, #364]	; (8006294 <HAL_UART_RxCpltCallback+0x208>)
 8006126:	781b      	ldrb	r3, [r3, #0]
 8006128:	2b03      	cmp	r3, #3
 800612a:	d125      	bne.n	8006178 <HAL_UART_RxCpltCallback+0xec>
 800612c:	4b5a      	ldr	r3, [pc, #360]	; (8006298 <HAL_UART_RxCpltCallback+0x20c>)
 800612e:	781b      	ldrb	r3, [r3, #0]
 8006130:	2b1b      	cmp	r3, #27
 8006132:	d021      	beq.n	8006178 <HAL_UART_RxCpltCallback+0xec>
				uint8_t start_ch = 0;
 8006134:	2300      	movs	r3, #0
 8006136:	73bb      	strb	r3, [r7, #14]
				start_ch = RB_pop(&uart4RXrb);
 8006138:	4859      	ldr	r0, [pc, #356]	; (80062a0 <HAL_UART_RxCpltCallback+0x214>)
 800613a:	f7ff fa2a 	bl	8005592 <RB_pop>
 800613e:	4603      	mov	r3, r0
 8006140:	73bb      	strb	r3, [r7, #14]
				if (start_ch == STX){
 8006142:	7bbb      	ldrb	r3, [r7, #14]
 8006144:	2b02      	cmp	r3, #2
 8006146:	d113      	bne.n	8006170 <HAL_UART_RxCpltCallback+0xe4>
					uint8_t rb_len = RB_size(&uart4RXrb);
 8006148:	4855      	ldr	r0, [pc, #340]	; (80062a0 <HAL_UART_RxCpltCallback+0x214>)
 800614a:	f7ff fa71 	bl	8005630 <RB_size>
 800614e:	4603      	mov	r3, r0
 8006150:	737b      	strb	r3, [r7, #13]
					RB_pushFront(&uart4RXrb, rb_len);
 8006152:	7b7b      	ldrb	r3, [r7, #13]
 8006154:	4619      	mov	r1, r3
 8006156:	4852      	ldr	r0, [pc, #328]	; (80062a0 <HAL_UART_RxCpltCallback+0x214>)
 8006158:	f7ff fa40 	bl	80055dc <RB_pushFront>
					osMessageQueuePut(messageQueueHandle, uart4RXrb.buffer, 0U, 0U);
 800615c:	4b51      	ldr	r3, [pc, #324]	; (80062a4 <HAL_UART_RxCpltCallback+0x218>)
 800615e:	6818      	ldr	r0, [r3, #0]
 8006160:	2300      	movs	r3, #0
 8006162:	2200      	movs	r2, #0
 8006164:	494e      	ldr	r1, [pc, #312]	; (80062a0 <HAL_UART_RxCpltCallback+0x214>)
 8006166:	f006 fc0b 	bl	800c980 <osMessageQueuePut>
					prvRxChar = 0xFF;
 800616a:	4b4b      	ldr	r3, [pc, #300]	; (8006298 <HAL_UART_RxCpltCallback+0x20c>)
 800616c:	22ff      	movs	r2, #255	; 0xff
 800616e:	701a      	strb	r2, [r3, #0]
				}
				RB_clear(&uart4RXrb);
 8006170:	484b      	ldr	r0, [pc, #300]	; (80062a0 <HAL_UART_RxCpltCallback+0x214>)
 8006172:	f7ff fa79 	bl	8005668 <RB_clear>
			else if ((rxChar == ETX) && (prvRxChar != ESC)){
 8006176:	e02f      	b.n	80061d8 <HAL_UART_RxCpltCallback+0x14c>
			}
			else if ((rxChar == ESC) && (prvRxChar != ESC)){
 8006178:	4b46      	ldr	r3, [pc, #280]	; (8006294 <HAL_UART_RxCpltCallback+0x208>)
 800617a:	781b      	ldrb	r3, [r3, #0]
 800617c:	2b1b      	cmp	r3, #27
 800617e:	d108      	bne.n	8006192 <HAL_UART_RxCpltCallback+0x106>
 8006180:	4b45      	ldr	r3, [pc, #276]	; (8006298 <HAL_UART_RxCpltCallback+0x20c>)
 8006182:	781b      	ldrb	r3, [r3, #0]
 8006184:	2b1b      	cmp	r3, #27
 8006186:	d004      	beq.n	8006192 <HAL_UART_RxCpltCallback+0x106>
				 prvRxChar = rxChar;
 8006188:	4b42      	ldr	r3, [pc, #264]	; (8006294 <HAL_UART_RxCpltCallback+0x208>)
 800618a:	781a      	ldrb	r2, [r3, #0]
 800618c:	4b42      	ldr	r3, [pc, #264]	; (8006298 <HAL_UART_RxCpltCallback+0x20c>)
 800618e:	701a      	strb	r2, [r3, #0]
 8006190:	e022      	b.n	80061d8 <HAL_UART_RxCpltCallback+0x14c>
			}
			else if ((rxChar == ESC) && (prvRxChar == ESC)){
 8006192:	4b40      	ldr	r3, [pc, #256]	; (8006294 <HAL_UART_RxCpltCallback+0x208>)
 8006194:	781b      	ldrb	r3, [r3, #0]
 8006196:	2b1b      	cmp	r3, #27
 8006198:	d10d      	bne.n	80061b6 <HAL_UART_RxCpltCallback+0x12a>
 800619a:	4b3f      	ldr	r3, [pc, #252]	; (8006298 <HAL_UART_RxCpltCallback+0x20c>)
 800619c:	781b      	ldrb	r3, [r3, #0]
 800619e:	2b1b      	cmp	r3, #27
 80061a0:	d109      	bne.n	80061b6 <HAL_UART_RxCpltCallback+0x12a>
				RB_push(&uart4RXrb, rxChar);
 80061a2:	4b3c      	ldr	r3, [pc, #240]	; (8006294 <HAL_UART_RxCpltCallback+0x208>)
 80061a4:	781b      	ldrb	r3, [r3, #0]
 80061a6:	4619      	mov	r1, r3
 80061a8:	483d      	ldr	r0, [pc, #244]	; (80062a0 <HAL_UART_RxCpltCallback+0x214>)
 80061aa:	f7ff f9c4 	bl	8005536 <RB_push>
				prvRxChar = 0x00;
 80061ae:	4b3a      	ldr	r3, [pc, #232]	; (8006298 <HAL_UART_RxCpltCallback+0x20c>)
 80061b0:	2200      	movs	r2, #0
 80061b2:	701a      	strb	r2, [r3, #0]
 80061b4:	e010      	b.n	80061d8 <HAL_UART_RxCpltCallback+0x14c>
			}
			else {
			  RB_push(&uart4RXrb, rxChar);
 80061b6:	4b37      	ldr	r3, [pc, #220]	; (8006294 <HAL_UART_RxCpltCallback+0x208>)
 80061b8:	781b      	ldrb	r3, [r3, #0]
 80061ba:	4619      	mov	r1, r3
 80061bc:	4838      	ldr	r0, [pc, #224]	; (80062a0 <HAL_UART_RxCpltCallback+0x214>)
 80061be:	f7ff f9ba 	bl	8005536 <RB_push>
			  if (rxChar == 0xFF) prvRxChar = 0x00;
 80061c2:	4b34      	ldr	r3, [pc, #208]	; (8006294 <HAL_UART_RxCpltCallback+0x208>)
 80061c4:	781b      	ldrb	r3, [r3, #0]
 80061c6:	2bff      	cmp	r3, #255	; 0xff
 80061c8:	d102      	bne.n	80061d0 <HAL_UART_RxCpltCallback+0x144>
 80061ca:	4b33      	ldr	r3, [pc, #204]	; (8006298 <HAL_UART_RxCpltCallback+0x20c>)
 80061cc:	2200      	movs	r2, #0
 80061ce:	701a      	strb	r2, [r3, #0]
			  prvRxChar = rxChar;
 80061d0:	4b30      	ldr	r3, [pc, #192]	; (8006294 <HAL_UART_RxCpltCallback+0x208>)
 80061d2:	781a      	ldrb	r2, [r3, #0]
 80061d4:	4b30      	ldr	r3, [pc, #192]	; (8006298 <HAL_UART_RxCpltCallback+0x20c>)
 80061d6:	701a      	strb	r2, [r3, #0]
			}
		}
		HAL_UART_Receive_IT(&huart4, &rxChar, 1);
 80061d8:	2201      	movs	r2, #1
 80061da:	492e      	ldr	r1, [pc, #184]	; (8006294 <HAL_UART_RxCpltCallback+0x208>)
 80061dc:	4832      	ldr	r0, [pc, #200]	; (80062a8 <HAL_UART_RxCpltCallback+0x21c>)
 80061de:	f004 f84f 	bl	800a280 <HAL_UART_Receive_IT>
		  prvRxChar = rxChar;
		}
		HAL_UART_Receive_IT(&huart1, &rxChar, 1);
	}

}
 80061e2:	e04f      	b.n	8006284 <HAL_UART_RxCpltCallback+0x1f8>
	else if (UartHandle->Instance == USART1){
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	4a30      	ldr	r2, [pc, #192]	; (80062ac <HAL_UART_RxCpltCallback+0x220>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d14a      	bne.n	8006284 <HAL_UART_RxCpltCallback+0x1f8>
		if ((rxChar == ETX) && (prvRxChar != ESC)){
 80061ee:	4b29      	ldr	r3, [pc, #164]	; (8006294 <HAL_UART_RxCpltCallback+0x208>)
 80061f0:	781b      	ldrb	r3, [r3, #0]
 80061f2:	2b03      	cmp	r3, #3
 80061f4:	d118      	bne.n	8006228 <HAL_UART_RxCpltCallback+0x19c>
 80061f6:	4b28      	ldr	r3, [pc, #160]	; (8006298 <HAL_UART_RxCpltCallback+0x20c>)
 80061f8:	781b      	ldrb	r3, [r3, #0]
 80061fa:	2b1b      	cmp	r3, #27
 80061fc:	d014      	beq.n	8006228 <HAL_UART_RxCpltCallback+0x19c>
		uint8_t start_ch = 0;
 80061fe:	2300      	movs	r3, #0
 8006200:	73fb      	strb	r3, [r7, #15]
		start_ch = RB_pop(&uart1RXrb);
 8006202:	482b      	ldr	r0, [pc, #172]	; (80062b0 <HAL_UART_RxCpltCallback+0x224>)
 8006204:	f7ff f9c5 	bl	8005592 <RB_pop>
 8006208:	4603      	mov	r3, r0
 800620a:	73fb      	strb	r3, [r7, #15]
		if (start_ch == STX){
 800620c:	7bfb      	ldrb	r3, [r7, #15]
 800620e:	2b02      	cmp	r3, #2
 8006210:	d106      	bne.n	8006220 <HAL_UART_RxCpltCallback+0x194>
			osMessageQueuePut(messageQueueHandle, uart1RXrb.buffer, 0U, 0U);
 8006212:	4b24      	ldr	r3, [pc, #144]	; (80062a4 <HAL_UART_RxCpltCallback+0x218>)
 8006214:	6818      	ldr	r0, [r3, #0]
 8006216:	2300      	movs	r3, #0
 8006218:	2200      	movs	r2, #0
 800621a:	4925      	ldr	r1, [pc, #148]	; (80062b0 <HAL_UART_RxCpltCallback+0x224>)
 800621c:	f006 fbb0 	bl	800c980 <osMessageQueuePut>
		RB_clear(&uart1RXrb);
 8006220:	4823      	ldr	r0, [pc, #140]	; (80062b0 <HAL_UART_RxCpltCallback+0x224>)
 8006222:	f7ff fa21 	bl	8005668 <RB_clear>
		if ((rxChar == ETX) && (prvRxChar != ESC)){
 8006226:	e028      	b.n	800627a <HAL_UART_RxCpltCallback+0x1ee>
		 else if ((rxChar == ESC) && (prvRxChar != ESC)){
 8006228:	4b1a      	ldr	r3, [pc, #104]	; (8006294 <HAL_UART_RxCpltCallback+0x208>)
 800622a:	781b      	ldrb	r3, [r3, #0]
 800622c:	2b1b      	cmp	r3, #27
 800622e:	d108      	bne.n	8006242 <HAL_UART_RxCpltCallback+0x1b6>
 8006230:	4b19      	ldr	r3, [pc, #100]	; (8006298 <HAL_UART_RxCpltCallback+0x20c>)
 8006232:	781b      	ldrb	r3, [r3, #0]
 8006234:	2b1b      	cmp	r3, #27
 8006236:	d004      	beq.n	8006242 <HAL_UART_RxCpltCallback+0x1b6>
			 prvRxChar = rxChar;
 8006238:	4b16      	ldr	r3, [pc, #88]	; (8006294 <HAL_UART_RxCpltCallback+0x208>)
 800623a:	781a      	ldrb	r2, [r3, #0]
 800623c:	4b16      	ldr	r3, [pc, #88]	; (8006298 <HAL_UART_RxCpltCallback+0x20c>)
 800623e:	701a      	strb	r2, [r3, #0]
 8006240:	e01b      	b.n	800627a <HAL_UART_RxCpltCallback+0x1ee>
		else if ((rxChar == ESC) && (prvRxChar == ESC)){
 8006242:	4b14      	ldr	r3, [pc, #80]	; (8006294 <HAL_UART_RxCpltCallback+0x208>)
 8006244:	781b      	ldrb	r3, [r3, #0]
 8006246:	2b1b      	cmp	r3, #27
 8006248:	d10d      	bne.n	8006266 <HAL_UART_RxCpltCallback+0x1da>
 800624a:	4b13      	ldr	r3, [pc, #76]	; (8006298 <HAL_UART_RxCpltCallback+0x20c>)
 800624c:	781b      	ldrb	r3, [r3, #0]
 800624e:	2b1b      	cmp	r3, #27
 8006250:	d109      	bne.n	8006266 <HAL_UART_RxCpltCallback+0x1da>
			RB_push(&uart1RXrb, rxChar);
 8006252:	4b10      	ldr	r3, [pc, #64]	; (8006294 <HAL_UART_RxCpltCallback+0x208>)
 8006254:	781b      	ldrb	r3, [r3, #0]
 8006256:	4619      	mov	r1, r3
 8006258:	4815      	ldr	r0, [pc, #84]	; (80062b0 <HAL_UART_RxCpltCallback+0x224>)
 800625a:	f7ff f96c 	bl	8005536 <RB_push>
			prvRxChar = 0x00;
 800625e:	4b0e      	ldr	r3, [pc, #56]	; (8006298 <HAL_UART_RxCpltCallback+0x20c>)
 8006260:	2200      	movs	r2, #0
 8006262:	701a      	strb	r2, [r3, #0]
 8006264:	e009      	b.n	800627a <HAL_UART_RxCpltCallback+0x1ee>
		  RB_push(&uart1RXrb, rxChar);
 8006266:	4b0b      	ldr	r3, [pc, #44]	; (8006294 <HAL_UART_RxCpltCallback+0x208>)
 8006268:	781b      	ldrb	r3, [r3, #0]
 800626a:	4619      	mov	r1, r3
 800626c:	4810      	ldr	r0, [pc, #64]	; (80062b0 <HAL_UART_RxCpltCallback+0x224>)
 800626e:	f7ff f962 	bl	8005536 <RB_push>
		  prvRxChar = rxChar;
 8006272:	4b08      	ldr	r3, [pc, #32]	; (8006294 <HAL_UART_RxCpltCallback+0x208>)
 8006274:	781a      	ldrb	r2, [r3, #0]
 8006276:	4b08      	ldr	r3, [pc, #32]	; (8006298 <HAL_UART_RxCpltCallback+0x20c>)
 8006278:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart1, &rxChar, 1);
 800627a:	2201      	movs	r2, #1
 800627c:	4905      	ldr	r1, [pc, #20]	; (8006294 <HAL_UART_RxCpltCallback+0x208>)
 800627e:	480d      	ldr	r0, [pc, #52]	; (80062b4 <HAL_UART_RxCpltCallback+0x228>)
 8006280:	f003 fffe 	bl	800a280 <HAL_UART_Receive_IT>
}
 8006284:	bf00      	nop
 8006286:	3710      	adds	r7, #16
 8006288:	46bd      	mov	sp, r7
 800628a:	bd80      	pop	{r7, pc}
 800628c:	40004c00 	.word	0x40004c00
 8006290:	20000656 	.word	0x20000656
 8006294:	20000654 	.word	0x20000654
 8006298:	20000655 	.word	0x20000655
 800629c:	20000454 	.word	0x20000454
 80062a0:	200005ec 	.word	0x200005ec
 80062a4:	20000450 	.word	0x20000450
 80062a8:	2000055c 	.word	0x2000055c
 80062ac:	40013800 	.word	0x40013800
 80062b0:	20000620 	.word	0x20000620
 80062b4:	200004cc 	.word	0x200004cc

080062b8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80062b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80062f0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80062bc:	f7ff fda6 	bl	8005e0c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80062c0:	480c      	ldr	r0, [pc, #48]	; (80062f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80062c2:	490d      	ldr	r1, [pc, #52]	; (80062f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80062c4:	4a0d      	ldr	r2, [pc, #52]	; (80062fc <LoopForever+0xe>)
  movs r3, #0
 80062c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80062c8:	e002      	b.n	80062d0 <LoopCopyDataInit>

080062ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80062ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80062cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80062ce:	3304      	adds	r3, #4

080062d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80062d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80062d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80062d4:	d3f9      	bcc.n	80062ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80062d6:	4a0a      	ldr	r2, [pc, #40]	; (8006300 <LoopForever+0x12>)
  ldr r4, =_ebss
 80062d8:	4c0a      	ldr	r4, [pc, #40]	; (8006304 <LoopForever+0x16>)
  movs r3, #0
 80062da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80062dc:	e001      	b.n	80062e2 <LoopFillZerobss>

080062de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80062de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80062e0:	3204      	adds	r2, #4

080062e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80062e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80062e4:	d3fb      	bcc.n	80062de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80062e6:	f00a fe79 	bl	8010fdc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80062ea:	f7fe f8df 	bl	80044ac <main>

080062ee <LoopForever>:

LoopForever:
    b LoopForever
 80062ee:	e7fe      	b.n	80062ee <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80062f0:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80062f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80062f8:	20000234 	.word	0x20000234
  ldr r2, =_sidata
 80062fc:	08015274 	.word	0x08015274
  ldr r2, =_sbss
 8006300:	20000234 	.word	0x20000234
  ldr r4, =_ebss
 8006304:	200064f8 	.word	0x200064f8

08006308 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8006308:	e7fe      	b.n	8006308 <ADC1_IRQHandler>

0800630a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800630a:	b580      	push	{r7, lr}
 800630c:	b082      	sub	sp, #8
 800630e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8006310:	2300      	movs	r3, #0
 8006312:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006314:	2003      	movs	r0, #3
 8006316:	f000 f902 	bl	800651e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800631a:	200f      	movs	r0, #15
 800631c:	f7ff fbcc 	bl	8005ab8 <HAL_InitTick>
 8006320:	4603      	mov	r3, r0
 8006322:	2b00      	cmp	r3, #0
 8006324:	d002      	beq.n	800632c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8006326:	2301      	movs	r3, #1
 8006328:	71fb      	strb	r3, [r7, #7]
 800632a:	e001      	b.n	8006330 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800632c:	f7ff f9b0 	bl	8005690 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8006330:	79fb      	ldrb	r3, [r7, #7]
}
 8006332:	4618      	mov	r0, r3
 8006334:	3708      	adds	r7, #8
 8006336:	46bd      	mov	sp, r7
 8006338:	bd80      	pop	{r7, pc}
	...

0800633c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800633c:	b480      	push	{r7}
 800633e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8006340:	4b06      	ldr	r3, [pc, #24]	; (800635c <HAL_IncTick+0x20>)
 8006342:	781b      	ldrb	r3, [r3, #0]
 8006344:	461a      	mov	r2, r3
 8006346:	4b06      	ldr	r3, [pc, #24]	; (8006360 <HAL_IncTick+0x24>)
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4413      	add	r3, r2
 800634c:	4a04      	ldr	r2, [pc, #16]	; (8006360 <HAL_IncTick+0x24>)
 800634e:	6013      	str	r3, [r2, #0]
}
 8006350:	bf00      	nop
 8006352:	46bd      	mov	sp, r7
 8006354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006358:	4770      	bx	lr
 800635a:	bf00      	nop
 800635c:	20000044 	.word	0x20000044
 8006360:	20000658 	.word	0x20000658

08006364 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006364:	b480      	push	{r7}
 8006366:	af00      	add	r7, sp, #0
  return uwTick;
 8006368:	4b03      	ldr	r3, [pc, #12]	; (8006378 <HAL_GetTick+0x14>)
 800636a:	681b      	ldr	r3, [r3, #0]
}
 800636c:	4618      	mov	r0, r3
 800636e:	46bd      	mov	sp, r7
 8006370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006374:	4770      	bx	lr
 8006376:	bf00      	nop
 8006378:	20000658 	.word	0x20000658

0800637c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b084      	sub	sp, #16
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006384:	f7ff ffee 	bl	8006364 <HAL_GetTick>
 8006388:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006394:	d005      	beq.n	80063a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8006396:	4b0a      	ldr	r3, [pc, #40]	; (80063c0 <HAL_Delay+0x44>)
 8006398:	781b      	ldrb	r3, [r3, #0]
 800639a:	461a      	mov	r2, r3
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	4413      	add	r3, r2
 80063a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80063a2:	bf00      	nop
 80063a4:	f7ff ffde 	bl	8006364 <HAL_GetTick>
 80063a8:	4602      	mov	r2, r0
 80063aa:	68bb      	ldr	r3, [r7, #8]
 80063ac:	1ad3      	subs	r3, r2, r3
 80063ae:	68fa      	ldr	r2, [r7, #12]
 80063b0:	429a      	cmp	r2, r3
 80063b2:	d8f7      	bhi.n	80063a4 <HAL_Delay+0x28>
  {
  }
}
 80063b4:	bf00      	nop
 80063b6:	bf00      	nop
 80063b8:	3710      	adds	r7, #16
 80063ba:	46bd      	mov	sp, r7
 80063bc:	bd80      	pop	{r7, pc}
 80063be:	bf00      	nop
 80063c0:	20000044 	.word	0x20000044

080063c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80063c4:	b480      	push	{r7}
 80063c6:	b085      	sub	sp, #20
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	f003 0307 	and.w	r3, r3, #7
 80063d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80063d4:	4b0c      	ldr	r3, [pc, #48]	; (8006408 <__NVIC_SetPriorityGrouping+0x44>)
 80063d6:	68db      	ldr	r3, [r3, #12]
 80063d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80063da:	68ba      	ldr	r2, [r7, #8]
 80063dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80063e0:	4013      	ands	r3, r2
 80063e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80063e8:	68bb      	ldr	r3, [r7, #8]
 80063ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80063ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80063f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80063f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80063f6:	4a04      	ldr	r2, [pc, #16]	; (8006408 <__NVIC_SetPriorityGrouping+0x44>)
 80063f8:	68bb      	ldr	r3, [r7, #8]
 80063fa:	60d3      	str	r3, [r2, #12]
}
 80063fc:	bf00      	nop
 80063fe:	3714      	adds	r7, #20
 8006400:	46bd      	mov	sp, r7
 8006402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006406:	4770      	bx	lr
 8006408:	e000ed00 	.word	0xe000ed00

0800640c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800640c:	b480      	push	{r7}
 800640e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006410:	4b04      	ldr	r3, [pc, #16]	; (8006424 <__NVIC_GetPriorityGrouping+0x18>)
 8006412:	68db      	ldr	r3, [r3, #12]
 8006414:	0a1b      	lsrs	r3, r3, #8
 8006416:	f003 0307 	and.w	r3, r3, #7
}
 800641a:	4618      	mov	r0, r3
 800641c:	46bd      	mov	sp, r7
 800641e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006422:	4770      	bx	lr
 8006424:	e000ed00 	.word	0xe000ed00

08006428 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006428:	b480      	push	{r7}
 800642a:	b083      	sub	sp, #12
 800642c:	af00      	add	r7, sp, #0
 800642e:	4603      	mov	r3, r0
 8006430:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006432:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006436:	2b00      	cmp	r3, #0
 8006438:	db0b      	blt.n	8006452 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800643a:	79fb      	ldrb	r3, [r7, #7]
 800643c:	f003 021f 	and.w	r2, r3, #31
 8006440:	4907      	ldr	r1, [pc, #28]	; (8006460 <__NVIC_EnableIRQ+0x38>)
 8006442:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006446:	095b      	lsrs	r3, r3, #5
 8006448:	2001      	movs	r0, #1
 800644a:	fa00 f202 	lsl.w	r2, r0, r2
 800644e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006452:	bf00      	nop
 8006454:	370c      	adds	r7, #12
 8006456:	46bd      	mov	sp, r7
 8006458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645c:	4770      	bx	lr
 800645e:	bf00      	nop
 8006460:	e000e100 	.word	0xe000e100

08006464 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006464:	b480      	push	{r7}
 8006466:	b083      	sub	sp, #12
 8006468:	af00      	add	r7, sp, #0
 800646a:	4603      	mov	r3, r0
 800646c:	6039      	str	r1, [r7, #0]
 800646e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006470:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006474:	2b00      	cmp	r3, #0
 8006476:	db0a      	blt.n	800648e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	b2da      	uxtb	r2, r3
 800647c:	490c      	ldr	r1, [pc, #48]	; (80064b0 <__NVIC_SetPriority+0x4c>)
 800647e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006482:	0112      	lsls	r2, r2, #4
 8006484:	b2d2      	uxtb	r2, r2
 8006486:	440b      	add	r3, r1
 8006488:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800648c:	e00a      	b.n	80064a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	b2da      	uxtb	r2, r3
 8006492:	4908      	ldr	r1, [pc, #32]	; (80064b4 <__NVIC_SetPriority+0x50>)
 8006494:	79fb      	ldrb	r3, [r7, #7]
 8006496:	f003 030f 	and.w	r3, r3, #15
 800649a:	3b04      	subs	r3, #4
 800649c:	0112      	lsls	r2, r2, #4
 800649e:	b2d2      	uxtb	r2, r2
 80064a0:	440b      	add	r3, r1
 80064a2:	761a      	strb	r2, [r3, #24]
}
 80064a4:	bf00      	nop
 80064a6:	370c      	adds	r7, #12
 80064a8:	46bd      	mov	sp, r7
 80064aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ae:	4770      	bx	lr
 80064b0:	e000e100 	.word	0xe000e100
 80064b4:	e000ed00 	.word	0xe000ed00

080064b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80064b8:	b480      	push	{r7}
 80064ba:	b089      	sub	sp, #36	; 0x24
 80064bc:	af00      	add	r7, sp, #0
 80064be:	60f8      	str	r0, [r7, #12]
 80064c0:	60b9      	str	r1, [r7, #8]
 80064c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	f003 0307 	and.w	r3, r3, #7
 80064ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80064cc:	69fb      	ldr	r3, [r7, #28]
 80064ce:	f1c3 0307 	rsb	r3, r3, #7
 80064d2:	2b04      	cmp	r3, #4
 80064d4:	bf28      	it	cs
 80064d6:	2304      	movcs	r3, #4
 80064d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80064da:	69fb      	ldr	r3, [r7, #28]
 80064dc:	3304      	adds	r3, #4
 80064de:	2b06      	cmp	r3, #6
 80064e0:	d902      	bls.n	80064e8 <NVIC_EncodePriority+0x30>
 80064e2:	69fb      	ldr	r3, [r7, #28]
 80064e4:	3b03      	subs	r3, #3
 80064e6:	e000      	b.n	80064ea <NVIC_EncodePriority+0x32>
 80064e8:	2300      	movs	r3, #0
 80064ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80064ec:	f04f 32ff 	mov.w	r2, #4294967295
 80064f0:	69bb      	ldr	r3, [r7, #24]
 80064f2:	fa02 f303 	lsl.w	r3, r2, r3
 80064f6:	43da      	mvns	r2, r3
 80064f8:	68bb      	ldr	r3, [r7, #8]
 80064fa:	401a      	ands	r2, r3
 80064fc:	697b      	ldr	r3, [r7, #20]
 80064fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006500:	f04f 31ff 	mov.w	r1, #4294967295
 8006504:	697b      	ldr	r3, [r7, #20]
 8006506:	fa01 f303 	lsl.w	r3, r1, r3
 800650a:	43d9      	mvns	r1, r3
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006510:	4313      	orrs	r3, r2
         );
}
 8006512:	4618      	mov	r0, r3
 8006514:	3724      	adds	r7, #36	; 0x24
 8006516:	46bd      	mov	sp, r7
 8006518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651c:	4770      	bx	lr

0800651e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800651e:	b580      	push	{r7, lr}
 8006520:	b082      	sub	sp, #8
 8006522:	af00      	add	r7, sp, #0
 8006524:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006526:	6878      	ldr	r0, [r7, #4]
 8006528:	f7ff ff4c 	bl	80063c4 <__NVIC_SetPriorityGrouping>
}
 800652c:	bf00      	nop
 800652e:	3708      	adds	r7, #8
 8006530:	46bd      	mov	sp, r7
 8006532:	bd80      	pop	{r7, pc}

08006534 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006534:	b580      	push	{r7, lr}
 8006536:	b086      	sub	sp, #24
 8006538:	af00      	add	r7, sp, #0
 800653a:	4603      	mov	r3, r0
 800653c:	60b9      	str	r1, [r7, #8]
 800653e:	607a      	str	r2, [r7, #4]
 8006540:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8006542:	2300      	movs	r3, #0
 8006544:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006546:	f7ff ff61 	bl	800640c <__NVIC_GetPriorityGrouping>
 800654a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800654c:	687a      	ldr	r2, [r7, #4]
 800654e:	68b9      	ldr	r1, [r7, #8]
 8006550:	6978      	ldr	r0, [r7, #20]
 8006552:	f7ff ffb1 	bl	80064b8 <NVIC_EncodePriority>
 8006556:	4602      	mov	r2, r0
 8006558:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800655c:	4611      	mov	r1, r2
 800655e:	4618      	mov	r0, r3
 8006560:	f7ff ff80 	bl	8006464 <__NVIC_SetPriority>
}
 8006564:	bf00      	nop
 8006566:	3718      	adds	r7, #24
 8006568:	46bd      	mov	sp, r7
 800656a:	bd80      	pop	{r7, pc}

0800656c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b082      	sub	sp, #8
 8006570:	af00      	add	r7, sp, #0
 8006572:	4603      	mov	r3, r0
 8006574:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006576:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800657a:	4618      	mov	r0, r3
 800657c:	f7ff ff54 	bl	8006428 <__NVIC_EnableIRQ>
}
 8006580:	bf00      	nop
 8006582:	3708      	adds	r7, #8
 8006584:	46bd      	mov	sp, r7
 8006586:	bd80      	pop	{r7, pc}

08006588 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006588:	b480      	push	{r7}
 800658a:	b085      	sub	sp, #20
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006590:	2300      	movs	r3, #0
 8006592:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800659a:	b2db      	uxtb	r3, r3
 800659c:	2b02      	cmp	r3, #2
 800659e:	d008      	beq.n	80065b2 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2204      	movs	r2, #4
 80065a4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2200      	movs	r2, #0
 80065aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80065ae:	2301      	movs	r3, #1
 80065b0:	e040      	b.n	8006634 <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	681a      	ldr	r2, [r3, #0]
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f022 020e 	bic.w	r2, r2, #14
 80065c0:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80065c6:	681a      	ldr	r2, [r3, #0]
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80065cc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80065d0:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	681a      	ldr	r2, [r3, #0]
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f022 0201 	bic.w	r2, r2, #1
 80065e0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065e6:	f003 021c 	and.w	r2, r3, #28
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ee:	2101      	movs	r1, #1
 80065f0:	fa01 f202 	lsl.w	r2, r1, r2
 80065f4:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065fa:	687a      	ldr	r2, [r7, #4]
 80065fc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80065fe:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006604:	2b00      	cmp	r3, #0
 8006606:	d00c      	beq.n	8006622 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800660c:	681a      	ldr	r2, [r3, #0]
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006612:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006616:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800661c:	687a      	ldr	r2, [r7, #4]
 800661e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8006620:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2201      	movs	r2, #1
 8006626:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2200      	movs	r2, #0
 800662e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8006632:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8006634:	4618      	mov	r0, r3
 8006636:	3714      	adds	r7, #20
 8006638:	46bd      	mov	sp, r7
 800663a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663e:	4770      	bx	lr

08006640 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b084      	sub	sp, #16
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006648:	2300      	movs	r3, #0
 800664a:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006652:	b2db      	uxtb	r3, r3
 8006654:	2b02      	cmp	r3, #2
 8006656:	d005      	beq.n	8006664 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2204      	movs	r2, #4
 800665c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800665e:	2301      	movs	r3, #1
 8006660:	73fb      	strb	r3, [r7, #15]
 8006662:	e047      	b.n	80066f4 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	681a      	ldr	r2, [r3, #0]
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f022 020e 	bic.w	r2, r2, #14
 8006672:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	681a      	ldr	r2, [r3, #0]
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f022 0201 	bic.w	r2, r2, #1
 8006682:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006688:	681a      	ldr	r2, [r3, #0]
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800668e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006692:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006698:	f003 021c 	and.w	r2, r3, #28
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066a0:	2101      	movs	r1, #1
 80066a2:	fa01 f202 	lsl.w	r2, r1, r2
 80066a6:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066ac:	687a      	ldr	r2, [r7, #4]
 80066ae:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80066b0:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d00c      	beq.n	80066d4 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066be:	681a      	ldr	r2, [r3, #0]
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80066c8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066ce:	687a      	ldr	r2, [r7, #4]
 80066d0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80066d2:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2201      	movs	r2, #1
 80066d8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2200      	movs	r2, #0
 80066e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d003      	beq.n	80066f4 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066f0:	6878      	ldr	r0, [r7, #4]
 80066f2:	4798      	blx	r3
    }
  }
  return status;
 80066f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80066f6:	4618      	mov	r0, r3
 80066f8:	3710      	adds	r7, #16
 80066fa:	46bd      	mov	sp, r7
 80066fc:	bd80      	pop	{r7, pc}
	...

08006700 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b086      	sub	sp, #24
 8006704:	af00      	add	r7, sp, #0
 8006706:	60f8      	str	r0, [r7, #12]
 8006708:	60b9      	str	r1, [r7, #8]
 800670a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 800670e:	2300      	movs	r3, #0
 8006710:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8006712:	4b2f      	ldr	r3, [pc, #188]	; (80067d0 <HAL_FLASH_Program+0xd0>)
 8006714:	781b      	ldrb	r3, [r3, #0]
 8006716:	2b01      	cmp	r3, #1
 8006718:	d101      	bne.n	800671e <HAL_FLASH_Program+0x1e>
 800671a:	2302      	movs	r3, #2
 800671c:	e053      	b.n	80067c6 <HAL_FLASH_Program+0xc6>
 800671e:	4b2c      	ldr	r3, [pc, #176]	; (80067d0 <HAL_FLASH_Program+0xd0>)
 8006720:	2201      	movs	r2, #1
 8006722:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006724:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006728:	f000 f894 	bl	8006854 <FLASH_WaitForLastOperation>
 800672c:	4603      	mov	r3, r0
 800672e:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 8006730:	7dfb      	ldrb	r3, [r7, #23]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d143      	bne.n	80067be <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8006736:	4b26      	ldr	r3, [pc, #152]	; (80067d0 <HAL_FLASH_Program+0xd0>)
 8006738:	2200      	movs	r2, #0
 800673a:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800673c:	4b25      	ldr	r3, [pc, #148]	; (80067d4 <HAL_FLASH_Program+0xd4>)
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006744:	2b00      	cmp	r3, #0
 8006746:	d009      	beq.n	800675c <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8006748:	4b22      	ldr	r3, [pc, #136]	; (80067d4 <HAL_FLASH_Program+0xd4>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	4a21      	ldr	r2, [pc, #132]	; (80067d4 <HAL_FLASH_Program+0xd4>)
 800674e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006752:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8006754:	4b1e      	ldr	r3, [pc, #120]	; (80067d0 <HAL_FLASH_Program+0xd0>)
 8006756:	2202      	movs	r2, #2
 8006758:	771a      	strb	r2, [r3, #28]
 800675a:	e002      	b.n	8006762 <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800675c:	4b1c      	ldr	r3, [pc, #112]	; (80067d0 <HAL_FLASH_Program+0xd0>)
 800675e:	2200      	movs	r2, #0
 8006760:	771a      	strb	r2, [r3, #28]
    }

    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d107      	bne.n	8006778 <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8006768:	e9d7 2300 	ldrd	r2, r3, [r7]
 800676c:	68b8      	ldr	r0, [r7, #8]
 800676e:	f000 f8c9 	bl	8006904 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 8006772:	2301      	movs	r3, #1
 8006774:	613b      	str	r3, [r7, #16]
 8006776:	e010      	b.n	800679a <HAL_FLASH_Program+0x9a>
    }
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	2b01      	cmp	r3, #1
 800677c:	d002      	beq.n	8006784 <HAL_FLASH_Program+0x84>
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	2b02      	cmp	r3, #2
 8006782:	d10a      	bne.n	800679a <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	4619      	mov	r1, r3
 8006788:	68b8      	ldr	r0, [r7, #8]
 800678a:	f000 f8e1 	bl	8006950 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	2b02      	cmp	r3, #2
 8006792:	d102      	bne.n	800679a <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 8006794:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006798:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800679a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800679e:	f000 f859 	bl	8006854 <FLASH_WaitForLastOperation>
 80067a2:	4603      	mov	r3, r0
 80067a4:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 80067a6:	693b      	ldr	r3, [r7, #16]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d006      	beq.n	80067ba <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 80067ac:	4b09      	ldr	r3, [pc, #36]	; (80067d4 <HAL_FLASH_Program+0xd4>)
 80067ae:	695a      	ldr	r2, [r3, #20]
 80067b0:	693b      	ldr	r3, [r7, #16]
 80067b2:	43db      	mvns	r3, r3
 80067b4:	4907      	ldr	r1, [pc, #28]	; (80067d4 <HAL_FLASH_Program+0xd4>)
 80067b6:	4013      	ands	r3, r2
 80067b8:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80067ba:	f000 fa17 	bl	8006bec <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80067be:	4b04      	ldr	r3, [pc, #16]	; (80067d0 <HAL_FLASH_Program+0xd0>)
 80067c0:	2200      	movs	r2, #0
 80067c2:	701a      	strb	r2, [r3, #0]

  return status;
 80067c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80067c6:	4618      	mov	r0, r3
 80067c8:	3718      	adds	r7, #24
 80067ca:	46bd      	mov	sp, r7
 80067cc:	bd80      	pop	{r7, pc}
 80067ce:	bf00      	nop
 80067d0:	20000048 	.word	0x20000048
 80067d4:	40022000 	.word	0x40022000

080067d8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80067d8:	b480      	push	{r7}
 80067da:	b083      	sub	sp, #12
 80067dc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80067de:	2300      	movs	r3, #0
 80067e0:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80067e2:	4b0b      	ldr	r3, [pc, #44]	; (8006810 <HAL_FLASH_Unlock+0x38>)
 80067e4:	695b      	ldr	r3, [r3, #20]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	da0b      	bge.n	8006802 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80067ea:	4b09      	ldr	r3, [pc, #36]	; (8006810 <HAL_FLASH_Unlock+0x38>)
 80067ec:	4a09      	ldr	r2, [pc, #36]	; (8006814 <HAL_FLASH_Unlock+0x3c>)
 80067ee:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80067f0:	4b07      	ldr	r3, [pc, #28]	; (8006810 <HAL_FLASH_Unlock+0x38>)
 80067f2:	4a09      	ldr	r2, [pc, #36]	; (8006818 <HAL_FLASH_Unlock+0x40>)
 80067f4:	609a      	str	r2, [r3, #8]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80067f6:	4b06      	ldr	r3, [pc, #24]	; (8006810 <HAL_FLASH_Unlock+0x38>)
 80067f8:	695b      	ldr	r3, [r3, #20]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	da01      	bge.n	8006802 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80067fe:	2301      	movs	r3, #1
 8006800:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8006802:	79fb      	ldrb	r3, [r7, #7]
}
 8006804:	4618      	mov	r0, r3
 8006806:	370c      	adds	r7, #12
 8006808:	46bd      	mov	sp, r7
 800680a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680e:	4770      	bx	lr
 8006810:	40022000 	.word	0x40022000
 8006814:	45670123 	.word	0x45670123
 8006818:	cdef89ab 	.word	0xcdef89ab

0800681c <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800681c:	b480      	push	{r7}
 800681e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8006820:	4b05      	ldr	r3, [pc, #20]	; (8006838 <HAL_FLASH_Lock+0x1c>)
 8006822:	695b      	ldr	r3, [r3, #20]
 8006824:	4a04      	ldr	r2, [pc, #16]	; (8006838 <HAL_FLASH_Lock+0x1c>)
 8006826:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800682a:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 800682c:	2300      	movs	r3, #0
}
 800682e:	4618      	mov	r0, r3
 8006830:	46bd      	mov	sp, r7
 8006832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006836:	4770      	bx	lr
 8006838:	40022000 	.word	0x40022000

0800683c <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_RD: FLASH PCROP read error
  *            @arg HAL_FLASH_ERROR_OPTV: FLASH Option validity error
  *            @arg FLASH_FLAG_PEMPTY : FLASH Boot from not programmed flash (apply only for STM32L43x/STM32L44x devices)
  */
uint32_t HAL_FLASH_GetError(void)
{
 800683c:	b480      	push	{r7}
 800683e:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 8006840:	4b03      	ldr	r3, [pc, #12]	; (8006850 <HAL_FLASH_GetError+0x14>)
 8006842:	685b      	ldr	r3, [r3, #4]
}
 8006844:	4618      	mov	r0, r3
 8006846:	46bd      	mov	sp, r7
 8006848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684c:	4770      	bx	lr
 800684e:	bf00      	nop
 8006850:	20000048 	.word	0x20000048

08006854 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b084      	sub	sp, #16
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 800685c:	f7ff fd82 	bl	8006364 <HAL_GetTick>
 8006860:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8006862:	e00d      	b.n	8006880 <FLASH_WaitForLastOperation+0x2c>
  {
    if(Timeout != HAL_MAX_DELAY)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	f1b3 3fff 	cmp.w	r3, #4294967295
 800686a:	d009      	beq.n	8006880 <FLASH_WaitForLastOperation+0x2c>
    {
      if((HAL_GetTick() - tickstart) >= Timeout)
 800686c:	f7ff fd7a 	bl	8006364 <HAL_GetTick>
 8006870:	4602      	mov	r2, r0
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	1ad3      	subs	r3, r2, r3
 8006876:	687a      	ldr	r2, [r7, #4]
 8006878:	429a      	cmp	r2, r3
 800687a:	d801      	bhi.n	8006880 <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
 800687c:	2303      	movs	r3, #3
 800687e:	e036      	b.n	80068ee <FLASH_WaitForLastOperation+0x9a>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8006880:	4b1d      	ldr	r3, [pc, #116]	; (80068f8 <FLASH_WaitForLastOperation+0xa4>)
 8006882:	691b      	ldr	r3, [r3, #16]
 8006884:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006888:	2b00      	cmp	r3, #0
 800688a:	d1eb      	bne.n	8006864 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }

  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 800688c:	4b1a      	ldr	r3, [pc, #104]	; (80068f8 <FLASH_WaitForLastOperation+0xa4>)
 800688e:	691a      	ldr	r2, [r3, #16]
 8006890:	4b1a      	ldr	r3, [pc, #104]	; (80068fc <FLASH_WaitForLastOperation+0xa8>)
 8006892:	4013      	ands	r3, r2
 8006894:	60bb      	str	r3, [r7, #8]

  if(error != 0u)
 8006896:	68bb      	ldr	r3, [r7, #8]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d01e      	beq.n	80068da <FLASH_WaitForLastOperation+0x86>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 800689c:	4b18      	ldr	r3, [pc, #96]	; (8006900 <FLASH_WaitForLastOperation+0xac>)
 800689e:	685a      	ldr	r2, [r3, #4]
 80068a0:	68bb      	ldr	r3, [r7, #8]
 80068a2:	4313      	orrs	r3, r2
 80068a4:	4a16      	ldr	r2, [pc, #88]	; (8006900 <FLASH_WaitForLastOperation+0xac>)
 80068a6:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d007      	beq.n	80068c2 <FLASH_WaitForLastOperation+0x6e>
 80068b2:	4b11      	ldr	r3, [pc, #68]	; (80068f8 <FLASH_WaitForLastOperation+0xa4>)
 80068b4:	699a      	ldr	r2, [r3, #24]
 80068b6:	68bb      	ldr	r3, [r7, #8]
 80068b8:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80068bc:	490e      	ldr	r1, [pc, #56]	; (80068f8 <FLASH_WaitForLastOperation+0xa4>)
 80068be:	4313      	orrs	r3, r2
 80068c0:	618b      	str	r3, [r1, #24]
 80068c2:	68bb      	ldr	r3, [r7, #8]
 80068c4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d004      	beq.n	80068d6 <FLASH_WaitForLastOperation+0x82>
 80068cc:	4a0a      	ldr	r2, [pc, #40]	; (80068f8 <FLASH_WaitForLastOperation+0xa4>)
 80068ce:	68bb      	ldr	r3, [r7, #8]
 80068d0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80068d4:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 80068d6:	2301      	movs	r3, #1
 80068d8:	e009      	b.n	80068ee <FLASH_WaitForLastOperation+0x9a>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80068da:	4b07      	ldr	r3, [pc, #28]	; (80068f8 <FLASH_WaitForLastOperation+0xa4>)
 80068dc:	691b      	ldr	r3, [r3, #16]
 80068de:	f003 0301 	and.w	r3, r3, #1
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d002      	beq.n	80068ec <FLASH_WaitForLastOperation+0x98>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80068e6:	4b04      	ldr	r3, [pc, #16]	; (80068f8 <FLASH_WaitForLastOperation+0xa4>)
 80068e8:	2201      	movs	r2, #1
 80068ea:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 80068ec:	2300      	movs	r3, #0
}
 80068ee:	4618      	mov	r0, r3
 80068f0:	3710      	adds	r7, #16
 80068f2:	46bd      	mov	sp, r7
 80068f4:	bd80      	pop	{r7, pc}
 80068f6:	bf00      	nop
 80068f8:	40022000 	.word	0x40022000
 80068fc:	0002c3fa 	.word	0x0002c3fa
 8006900:	20000048 	.word	0x20000048

08006904 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8006904:	b480      	push	{r7}
 8006906:	b085      	sub	sp, #20
 8006908:	af00      	add	r7, sp, #0
 800690a:	60f8      	str	r0, [r7, #12]
 800690c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8006910:	4b0e      	ldr	r3, [pc, #56]	; (800694c <FLASH_Program_DoubleWord+0x48>)
 8006912:	695b      	ldr	r3, [r3, #20]
 8006914:	4a0d      	ldr	r2, [pc, #52]	; (800694c <FLASH_Program_DoubleWord+0x48>)
 8006916:	f043 0301 	orr.w	r3, r3, #1
 800691a:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	683a      	ldr	r2, [r7, #0]
 8006920:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8006922:	f3bf 8f6f 	isb	sy
}
 8006926:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 8006928:	e9d7 0100 	ldrd	r0, r1, [r7]
 800692c:	f04f 0200 	mov.w	r2, #0
 8006930:	f04f 0300 	mov.w	r3, #0
 8006934:	000a      	movs	r2, r1
 8006936:	2300      	movs	r3, #0
 8006938:	68f9      	ldr	r1, [r7, #12]
 800693a:	3104      	adds	r1, #4
 800693c:	4613      	mov	r3, r2
 800693e:	600b      	str	r3, [r1, #0]
}
 8006940:	bf00      	nop
 8006942:	3714      	adds	r7, #20
 8006944:	46bd      	mov	sp, r7
 8006946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694a:	4770      	bx	lr
 800694c:	40022000 	.word	0x40022000

08006950 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 8006950:	b480      	push	{r7}
 8006952:	b089      	sub	sp, #36	; 0x24
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
 8006958:	6039      	str	r1, [r7, #0]
  uint32_t primask_bit;
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
 800695a:	2380      	movs	r3, #128	; 0x80
 800695c:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t*)Address;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8006966:	4b14      	ldr	r3, [pc, #80]	; (80069b8 <FLASH_Program_Fast+0x68>)
 8006968:	695b      	ldr	r3, [r3, #20]
 800696a:	4a13      	ldr	r2, [pc, #76]	; (80069b8 <FLASH_Program_Fast+0x68>)
 800696c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006970:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006972:	f3ef 8310 	mrs	r3, PRIMASK
 8006976:	60fb      	str	r3, [r7, #12]
  return(result);
 8006978:	68fb      	ldr	r3, [r7, #12]

  /* Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 800697a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800697c:	b672      	cpsid	i
}
 800697e:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8006980:	697b      	ldr	r3, [r7, #20]
 8006982:	681a      	ldr	r2, [r3, #0]
 8006984:	69bb      	ldr	r3, [r7, #24]
 8006986:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8006988:	69bb      	ldr	r3, [r7, #24]
 800698a:	3304      	adds	r3, #4
 800698c:	61bb      	str	r3, [r7, #24]
    src_addr++;
 800698e:	697b      	ldr	r3, [r7, #20]
 8006990:	3304      	adds	r3, #4
 8006992:	617b      	str	r3, [r7, #20]
    row_index--;
 8006994:	7ffb      	ldrb	r3, [r7, #31]
 8006996:	3b01      	subs	r3, #1
 8006998:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
 800699a:	7ffb      	ldrb	r3, [r7, #31]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d1ef      	bne.n	8006980 <FLASH_Program_Fast+0x30>
 80069a0:	693b      	ldr	r3, [r7, #16]
 80069a2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80069a4:	68bb      	ldr	r3, [r7, #8]
 80069a6:	f383 8810 	msr	PRIMASK, r3
}
 80069aa:	bf00      	nop

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 80069ac:	bf00      	nop
 80069ae:	3724      	adds	r7, #36	; 0x24
 80069b0:	46bd      	mov	sp, r7
 80069b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b6:	4770      	bx	lr
 80069b8:	40022000 	.word	0x40022000

080069bc <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b084      	sub	sp, #16
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
 80069c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t page_index;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80069c6:	4b49      	ldr	r3, [pc, #292]	; (8006aec <HAL_FLASHEx_Erase+0x130>)
 80069c8:	781b      	ldrb	r3, [r3, #0]
 80069ca:	2b01      	cmp	r3, #1
 80069cc:	d101      	bne.n	80069d2 <HAL_FLASHEx_Erase+0x16>
 80069ce:	2302      	movs	r3, #2
 80069d0:	e087      	b.n	8006ae2 <HAL_FLASHEx_Erase+0x126>
 80069d2:	4b46      	ldr	r3, [pc, #280]	; (8006aec <HAL_FLASHEx_Erase+0x130>)
 80069d4:	2201      	movs	r2, #1
 80069d6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80069d8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80069dc:	f7ff ff3a 	bl	8006854 <FLASH_WaitForLastOperation>
 80069e0:	4603      	mov	r3, r0
 80069e2:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80069e4:	7bfb      	ldrb	r3, [r7, #15]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d177      	bne.n	8006ada <HAL_FLASHEx_Erase+0x11e>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80069ea:	4b40      	ldr	r3, [pc, #256]	; (8006aec <HAL_FLASHEx_Erase+0x130>)
 80069ec:	2200      	movs	r2, #0
 80069ee:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 80069f0:	4b3f      	ldr	r3, [pc, #252]	; (8006af0 <HAL_FLASHEx_Erase+0x134>)
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d013      	beq.n	8006a24 <HAL_FLASHEx_Erase+0x68>
    {
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 80069fc:	4b3c      	ldr	r3, [pc, #240]	; (8006af0 <HAL_FLASHEx_Erase+0x134>)
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d009      	beq.n	8006a1c <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8006a08:	4b39      	ldr	r3, [pc, #228]	; (8006af0 <HAL_FLASHEx_Erase+0x134>)
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	4a38      	ldr	r2, [pc, #224]	; (8006af0 <HAL_FLASHEx_Erase+0x134>)
 8006a0e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006a12:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8006a14:	4b35      	ldr	r3, [pc, #212]	; (8006aec <HAL_FLASHEx_Erase+0x130>)
 8006a16:	2203      	movs	r2, #3
 8006a18:	771a      	strb	r2, [r3, #28]
 8006a1a:	e016      	b.n	8006a4a <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8006a1c:	4b33      	ldr	r3, [pc, #204]	; (8006aec <HAL_FLASHEx_Erase+0x130>)
 8006a1e:	2201      	movs	r2, #1
 8006a20:	771a      	strb	r2, [r3, #28]
 8006a22:	e012      	b.n	8006a4a <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8006a24:	4b32      	ldr	r3, [pc, #200]	; (8006af0 <HAL_FLASHEx_Erase+0x134>)
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d009      	beq.n	8006a44 <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8006a30:	4b2f      	ldr	r3, [pc, #188]	; (8006af0 <HAL_FLASHEx_Erase+0x134>)
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	4a2e      	ldr	r2, [pc, #184]	; (8006af0 <HAL_FLASHEx_Erase+0x134>)
 8006a36:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006a3a:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8006a3c:	4b2b      	ldr	r3, [pc, #172]	; (8006aec <HAL_FLASHEx_Erase+0x130>)
 8006a3e:	2202      	movs	r2, #2
 8006a40:	771a      	strb	r2, [r3, #28]
 8006a42:	e002      	b.n	8006a4a <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8006a44:	4b29      	ldr	r3, [pc, #164]	; (8006aec <HAL_FLASHEx_Erase+0x130>)
 8006a46:	2200      	movs	r2, #0
 8006a48:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	2b01      	cmp	r3, #1
 8006a50:	d113      	bne.n	8006a7a <HAL_FLASHEx_Erase+0xbe>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	685b      	ldr	r3, [r3, #4]
 8006a56:	4618      	mov	r0, r3
 8006a58:	f000 f84c 	bl	8006af4 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006a5c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006a60:	f7ff fef8 	bl	8006854 <FLASH_WaitForLastOperation>
 8006a64:	4603      	mov	r3, r0
 8006a66:	73fb      	strb	r3, [r7, #15]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 8006a68:	4b21      	ldr	r3, [pc, #132]	; (8006af0 <HAL_FLASHEx_Erase+0x134>)
 8006a6a:	695b      	ldr	r3, [r3, #20]
 8006a6c:	4a20      	ldr	r2, [pc, #128]	; (8006af0 <HAL_FLASHEx_Erase+0x134>)
 8006a6e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006a72:	f023 0304 	bic.w	r3, r3, #4
 8006a76:	6153      	str	r3, [r2, #20]
 8006a78:	e02d      	b.n	8006ad6 <HAL_FLASHEx_Erase+0x11a>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	f04f 32ff 	mov.w	r2, #4294967295
 8006a80:	601a      	str	r2, [r3, #0]

      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	689b      	ldr	r3, [r3, #8]
 8006a86:	60bb      	str	r3, [r7, #8]
 8006a88:	e01d      	b.n	8006ac6 <HAL_FLASHEx_Erase+0x10a>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	685b      	ldr	r3, [r3, #4]
 8006a8e:	4619      	mov	r1, r3
 8006a90:	68b8      	ldr	r0, [r7, #8]
 8006a92:	f000 f867 	bl	8006b64 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006a96:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006a9a:	f7ff fedb 	bl	8006854 <FLASH_WaitForLastOperation>
 8006a9e:	4603      	mov	r3, r0
 8006aa0:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8006aa2:	4b13      	ldr	r3, [pc, #76]	; (8006af0 <HAL_FLASHEx_Erase+0x134>)
 8006aa4:	695b      	ldr	r3, [r3, #20]
 8006aa6:	4a12      	ldr	r2, [pc, #72]	; (8006af0 <HAL_FLASHEx_Erase+0x134>)
 8006aa8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006aac:	f023 0302 	bic.w	r3, r3, #2
 8006ab0:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 8006ab2:	7bfb      	ldrb	r3, [r7, #15]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d003      	beq.n	8006ac0 <HAL_FLASHEx_Erase+0x104>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = page_index;
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	68ba      	ldr	r2, [r7, #8]
 8006abc:	601a      	str	r2, [r3, #0]
          break;
 8006abe:	e00a      	b.n	8006ad6 <HAL_FLASHEx_Erase+0x11a>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8006ac0:	68bb      	ldr	r3, [r7, #8]
 8006ac2:	3301      	adds	r3, #1
 8006ac4:	60bb      	str	r3, [r7, #8]
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	689a      	ldr	r2, [r3, #8]
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	68db      	ldr	r3, [r3, #12]
 8006ace:	4413      	add	r3, r2
 8006ad0:	68ba      	ldr	r2, [r7, #8]
 8006ad2:	429a      	cmp	r2, r3
 8006ad4:	d3d9      	bcc.n	8006a8a <HAL_FLASHEx_Erase+0xce>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8006ad6:	f000 f889 	bl	8006bec <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8006ada:	4b04      	ldr	r3, [pc, #16]	; (8006aec <HAL_FLASHEx_Erase+0x130>)
 8006adc:	2200      	movs	r2, #0
 8006ade:	701a      	strb	r2, [r3, #0]

  return status;
 8006ae0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	3710      	adds	r7, #16
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	bd80      	pop	{r7, pc}
 8006aea:	bf00      	nop
 8006aec:	20000048 	.word	0x20000048
 8006af0:	40022000 	.word	0x40022000

08006af4 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8006af4:	b480      	push	{r7}
 8006af6:	b083      	sub	sp, #12
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
  if (READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) != 0U)
 8006afc:	4b18      	ldr	r3, [pc, #96]	; (8006b60 <FLASH_MassErase+0x6c>)
 8006afe:	6a1b      	ldr	r3, [r3, #32]
 8006b00:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d016      	beq.n	8006b36 <FLASH_MassErase+0x42>
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	f003 0301 	and.w	r3, r3, #1
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d005      	beq.n	8006b1e <FLASH_MassErase+0x2a>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 8006b12:	4b13      	ldr	r3, [pc, #76]	; (8006b60 <FLASH_MassErase+0x6c>)
 8006b14:	695b      	ldr	r3, [r3, #20]
 8006b16:	4a12      	ldr	r2, [pc, #72]	; (8006b60 <FLASH_MassErase+0x6c>)
 8006b18:	f043 0304 	orr.w	r3, r3, #4
 8006b1c:	6153      	str	r3, [r2, #20]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    /* Set the Mass Erase Bit for the bank 2 if requested */
    if((Banks & FLASH_BANK_2) != 0U)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	f003 0302 	and.w	r3, r3, #2
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d00e      	beq.n	8006b46 <FLASH_MassErase+0x52>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER2);
 8006b28:	4b0d      	ldr	r3, [pc, #52]	; (8006b60 <FLASH_MassErase+0x6c>)
 8006b2a:	695b      	ldr	r3, [r3, #20]
 8006b2c:	4a0c      	ldr	r2, [pc, #48]	; (8006b60 <FLASH_MassErase+0x6c>)
 8006b2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b32:	6153      	str	r3, [r2, #20]
 8006b34:	e007      	b.n	8006b46 <FLASH_MassErase+0x52>
#endif
  }
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
  else
  {
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 8006b36:	4b0a      	ldr	r3, [pc, #40]	; (8006b60 <FLASH_MassErase+0x6c>)
 8006b38:	695b      	ldr	r3, [r3, #20]
 8006b3a:	4a09      	ldr	r2, [pc, #36]	; (8006b60 <FLASH_MassErase+0x6c>)
 8006b3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b40:	f043 0304 	orr.w	r3, r3, #4
 8006b44:	6153      	str	r3, [r2, #20]
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8006b46:	4b06      	ldr	r3, [pc, #24]	; (8006b60 <FLASH_MassErase+0x6c>)
 8006b48:	695b      	ldr	r3, [r3, #20]
 8006b4a:	4a05      	ldr	r2, [pc, #20]	; (8006b60 <FLASH_MassErase+0x6c>)
 8006b4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b50:	6153      	str	r3, [r2, #20]
}
 8006b52:	bf00      	nop
 8006b54:	370c      	adds	r7, #12
 8006b56:	46bd      	mov	sp, r7
 8006b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5c:	4770      	bx	lr
 8006b5e:	bf00      	nop
 8006b60:	40022000 	.word	0x40022000

08006b64 <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 8006b64:	b480      	push	{r7}
 8006b66:	b083      	sub	sp, #12
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
 8006b6c:	6039      	str	r1, [r7, #0]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
  if(READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) == 0U)
 8006b6e:	4b1e      	ldr	r3, [pc, #120]	; (8006be8 <FLASH_PageErase+0x84>)
 8006b70:	6a1b      	ldr	r3, [r3, #32]
 8006b72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d106      	bne.n	8006b88 <FLASH_PageErase+0x24>
  {
    CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 8006b7a:	4b1b      	ldr	r3, [pc, #108]	; (8006be8 <FLASH_PageErase+0x84>)
 8006b7c:	695b      	ldr	r3, [r3, #20]
 8006b7e:	4a1a      	ldr	r2, [pc, #104]	; (8006be8 <FLASH_PageErase+0x84>)
 8006b80:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006b84:	6153      	str	r3, [r2, #20]
 8006b86:	e011      	b.n	8006bac <FLASH_PageErase+0x48>
  else
#endif
  {
    assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

    if((Banks & FLASH_BANK_1) != 0U)
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	f003 0301 	and.w	r3, r3, #1
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d006      	beq.n	8006ba0 <FLASH_PageErase+0x3c>
    {
      CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 8006b92:	4b15      	ldr	r3, [pc, #84]	; (8006be8 <FLASH_PageErase+0x84>)
 8006b94:	695b      	ldr	r3, [r3, #20]
 8006b96:	4a14      	ldr	r2, [pc, #80]	; (8006be8 <FLASH_PageErase+0x84>)
 8006b98:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006b9c:	6153      	str	r3, [r2, #20]
 8006b9e:	e005      	b.n	8006bac <FLASH_PageErase+0x48>
    }
    else
    {
      SET_BIT(FLASH->CR, FLASH_CR_BKER);
 8006ba0:	4b11      	ldr	r3, [pc, #68]	; (8006be8 <FLASH_PageErase+0x84>)
 8006ba2:	695b      	ldr	r3, [r3, #20]
 8006ba4:	4a10      	ldr	r2, [pc, #64]	; (8006be8 <FLASH_PageErase+0x84>)
 8006ba6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006baa:	6153      	str	r3, [r2, #20]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8006bac:	4b0e      	ldr	r3, [pc, #56]	; (8006be8 <FLASH_PageErase+0x84>)
 8006bae:	695b      	ldr	r3, [r3, #20]
 8006bb0:	f423 62ff 	bic.w	r2, r3, #2040	; 0x7f8
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	00db      	lsls	r3, r3, #3
 8006bb8:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 8006bbc:	490a      	ldr	r1, [pc, #40]	; (8006be8 <FLASH_PageErase+0x84>)
 8006bbe:	4313      	orrs	r3, r2
 8006bc0:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8006bc2:	4b09      	ldr	r3, [pc, #36]	; (8006be8 <FLASH_PageErase+0x84>)
 8006bc4:	695b      	ldr	r3, [r3, #20]
 8006bc6:	4a08      	ldr	r2, [pc, #32]	; (8006be8 <FLASH_PageErase+0x84>)
 8006bc8:	f043 0302 	orr.w	r3, r3, #2
 8006bcc:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8006bce:	4b06      	ldr	r3, [pc, #24]	; (8006be8 <FLASH_PageErase+0x84>)
 8006bd0:	695b      	ldr	r3, [r3, #20]
 8006bd2:	4a05      	ldr	r2, [pc, #20]	; (8006be8 <FLASH_PageErase+0x84>)
 8006bd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006bd8:	6153      	str	r3, [r2, #20]
}
 8006bda:	bf00      	nop
 8006bdc:	370c      	adds	r7, #12
 8006bde:	46bd      	mov	sp, r7
 8006be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be4:	4770      	bx	lr
 8006be6:	bf00      	nop
 8006be8:	40022000 	.word	0x40022000

08006bec <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8006bec:	b480      	push	{r7}
 8006bee:	b083      	sub	sp, #12
 8006bf0:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8006bf2:	4b21      	ldr	r3, [pc, #132]	; (8006c78 <FLASH_FlushCaches+0x8c>)
 8006bf4:	7f1b      	ldrb	r3, [r3, #28]
 8006bf6:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 8006bf8:	79fb      	ldrb	r3, [r7, #7]
 8006bfa:	2b01      	cmp	r3, #1
 8006bfc:	d002      	beq.n	8006c04 <FLASH_FlushCaches+0x18>
 8006bfe:	79fb      	ldrb	r3, [r7, #7]
 8006c00:	2b03      	cmp	r3, #3
 8006c02:	d117      	bne.n	8006c34 <FLASH_FlushCaches+0x48>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8006c04:	4b1d      	ldr	r3, [pc, #116]	; (8006c7c <FLASH_FlushCaches+0x90>)
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	4a1c      	ldr	r2, [pc, #112]	; (8006c7c <FLASH_FlushCaches+0x90>)
 8006c0a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006c0e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8006c10:	4b1a      	ldr	r3, [pc, #104]	; (8006c7c <FLASH_FlushCaches+0x90>)
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	4a19      	ldr	r2, [pc, #100]	; (8006c7c <FLASH_FlushCaches+0x90>)
 8006c16:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006c1a:	6013      	str	r3, [r2, #0]
 8006c1c:	4b17      	ldr	r3, [pc, #92]	; (8006c7c <FLASH_FlushCaches+0x90>)
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	4a16      	ldr	r2, [pc, #88]	; (8006c7c <FLASH_FlushCaches+0x90>)
 8006c22:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006c26:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006c28:	4b14      	ldr	r3, [pc, #80]	; (8006c7c <FLASH_FlushCaches+0x90>)
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	4a13      	ldr	r2, [pc, #76]	; (8006c7c <FLASH_FlushCaches+0x90>)
 8006c2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006c32:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 8006c34:	79fb      	ldrb	r3, [r7, #7]
 8006c36:	2b02      	cmp	r3, #2
 8006c38:	d002      	beq.n	8006c40 <FLASH_FlushCaches+0x54>
 8006c3a:	79fb      	ldrb	r3, [r7, #7]
 8006c3c:	2b03      	cmp	r3, #3
 8006c3e:	d111      	bne.n	8006c64 <FLASH_FlushCaches+0x78>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8006c40:	4b0e      	ldr	r3, [pc, #56]	; (8006c7c <FLASH_FlushCaches+0x90>)
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	4a0d      	ldr	r2, [pc, #52]	; (8006c7c <FLASH_FlushCaches+0x90>)
 8006c46:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006c4a:	6013      	str	r3, [r2, #0]
 8006c4c:	4b0b      	ldr	r3, [pc, #44]	; (8006c7c <FLASH_FlushCaches+0x90>)
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	4a0a      	ldr	r2, [pc, #40]	; (8006c7c <FLASH_FlushCaches+0x90>)
 8006c52:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006c56:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8006c58:	4b08      	ldr	r3, [pc, #32]	; (8006c7c <FLASH_FlushCaches+0x90>)
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	4a07      	ldr	r2, [pc, #28]	; (8006c7c <FLASH_FlushCaches+0x90>)
 8006c5e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006c62:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8006c64:	4b04      	ldr	r3, [pc, #16]	; (8006c78 <FLASH_FlushCaches+0x8c>)
 8006c66:	2200      	movs	r2, #0
 8006c68:	771a      	strb	r2, [r3, #28]
}
 8006c6a:	bf00      	nop
 8006c6c:	370c      	adds	r7, #12
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c74:	4770      	bx	lr
 8006c76:	bf00      	nop
 8006c78:	20000048 	.word	0x20000048
 8006c7c:	40022000 	.word	0x40022000

08006c80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006c80:	b480      	push	{r7}
 8006c82:	b087      	sub	sp, #28
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
 8006c88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006c8e:	e166      	b.n	8006f5e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	681a      	ldr	r2, [r3, #0]
 8006c94:	2101      	movs	r1, #1
 8006c96:	697b      	ldr	r3, [r7, #20]
 8006c98:	fa01 f303 	lsl.w	r3, r1, r3
 8006c9c:	4013      	ands	r3, r2
 8006c9e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	f000 8158 	beq.w	8006f58 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	685b      	ldr	r3, [r3, #4]
 8006cac:	f003 0303 	and.w	r3, r3, #3
 8006cb0:	2b01      	cmp	r3, #1
 8006cb2:	d005      	beq.n	8006cc0 <HAL_GPIO_Init+0x40>
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	685b      	ldr	r3, [r3, #4]
 8006cb8:	f003 0303 	and.w	r3, r3, #3
 8006cbc:	2b02      	cmp	r3, #2
 8006cbe:	d130      	bne.n	8006d22 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	689b      	ldr	r3, [r3, #8]
 8006cc4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8006cc6:	697b      	ldr	r3, [r7, #20]
 8006cc8:	005b      	lsls	r3, r3, #1
 8006cca:	2203      	movs	r2, #3
 8006ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8006cd0:	43db      	mvns	r3, r3
 8006cd2:	693a      	ldr	r2, [r7, #16]
 8006cd4:	4013      	ands	r3, r2
 8006cd6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	68da      	ldr	r2, [r3, #12]
 8006cdc:	697b      	ldr	r3, [r7, #20]
 8006cde:	005b      	lsls	r3, r3, #1
 8006ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8006ce4:	693a      	ldr	r2, [r7, #16]
 8006ce6:	4313      	orrs	r3, r2
 8006ce8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	693a      	ldr	r2, [r7, #16]
 8006cee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	685b      	ldr	r3, [r3, #4]
 8006cf4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006cf6:	2201      	movs	r2, #1
 8006cf8:	697b      	ldr	r3, [r7, #20]
 8006cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8006cfe:	43db      	mvns	r3, r3
 8006d00:	693a      	ldr	r2, [r7, #16]
 8006d02:	4013      	ands	r3, r2
 8006d04:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	685b      	ldr	r3, [r3, #4]
 8006d0a:	091b      	lsrs	r3, r3, #4
 8006d0c:	f003 0201 	and.w	r2, r3, #1
 8006d10:	697b      	ldr	r3, [r7, #20]
 8006d12:	fa02 f303 	lsl.w	r3, r2, r3
 8006d16:	693a      	ldr	r2, [r7, #16]
 8006d18:	4313      	orrs	r3, r2
 8006d1a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	693a      	ldr	r2, [r7, #16]
 8006d20:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	685b      	ldr	r3, [r3, #4]
 8006d26:	f003 0303 	and.w	r3, r3, #3
 8006d2a:	2b03      	cmp	r3, #3
 8006d2c:	d017      	beq.n	8006d5e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	68db      	ldr	r3, [r3, #12]
 8006d32:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006d34:	697b      	ldr	r3, [r7, #20]
 8006d36:	005b      	lsls	r3, r3, #1
 8006d38:	2203      	movs	r2, #3
 8006d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8006d3e:	43db      	mvns	r3, r3
 8006d40:	693a      	ldr	r2, [r7, #16]
 8006d42:	4013      	ands	r3, r2
 8006d44:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	689a      	ldr	r2, [r3, #8]
 8006d4a:	697b      	ldr	r3, [r7, #20]
 8006d4c:	005b      	lsls	r3, r3, #1
 8006d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8006d52:	693a      	ldr	r2, [r7, #16]
 8006d54:	4313      	orrs	r3, r2
 8006d56:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	693a      	ldr	r2, [r7, #16]
 8006d5c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	685b      	ldr	r3, [r3, #4]
 8006d62:	f003 0303 	and.w	r3, r3, #3
 8006d66:	2b02      	cmp	r3, #2
 8006d68:	d123      	bne.n	8006db2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8006d6a:	697b      	ldr	r3, [r7, #20]
 8006d6c:	08da      	lsrs	r2, r3, #3
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	3208      	adds	r2, #8
 8006d72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d76:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006d78:	697b      	ldr	r3, [r7, #20]
 8006d7a:	f003 0307 	and.w	r3, r3, #7
 8006d7e:	009b      	lsls	r3, r3, #2
 8006d80:	220f      	movs	r2, #15
 8006d82:	fa02 f303 	lsl.w	r3, r2, r3
 8006d86:	43db      	mvns	r3, r3
 8006d88:	693a      	ldr	r2, [r7, #16]
 8006d8a:	4013      	ands	r3, r2
 8006d8c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	691a      	ldr	r2, [r3, #16]
 8006d92:	697b      	ldr	r3, [r7, #20]
 8006d94:	f003 0307 	and.w	r3, r3, #7
 8006d98:	009b      	lsls	r3, r3, #2
 8006d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8006d9e:	693a      	ldr	r2, [r7, #16]
 8006da0:	4313      	orrs	r3, r2
 8006da2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006da4:	697b      	ldr	r3, [r7, #20]
 8006da6:	08da      	lsrs	r2, r3, #3
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	3208      	adds	r2, #8
 8006dac:	6939      	ldr	r1, [r7, #16]
 8006dae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8006db8:	697b      	ldr	r3, [r7, #20]
 8006dba:	005b      	lsls	r3, r3, #1
 8006dbc:	2203      	movs	r2, #3
 8006dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8006dc2:	43db      	mvns	r3, r3
 8006dc4:	693a      	ldr	r2, [r7, #16]
 8006dc6:	4013      	ands	r3, r2
 8006dc8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	685b      	ldr	r3, [r3, #4]
 8006dce:	f003 0203 	and.w	r2, r3, #3
 8006dd2:	697b      	ldr	r3, [r7, #20]
 8006dd4:	005b      	lsls	r3, r3, #1
 8006dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8006dda:	693a      	ldr	r2, [r7, #16]
 8006ddc:	4313      	orrs	r3, r2
 8006dde:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	693a      	ldr	r2, [r7, #16]
 8006de4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	685b      	ldr	r3, [r3, #4]
 8006dea:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	f000 80b2 	beq.w	8006f58 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006df4:	4b61      	ldr	r3, [pc, #388]	; (8006f7c <HAL_GPIO_Init+0x2fc>)
 8006df6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006df8:	4a60      	ldr	r2, [pc, #384]	; (8006f7c <HAL_GPIO_Init+0x2fc>)
 8006dfa:	f043 0301 	orr.w	r3, r3, #1
 8006dfe:	6613      	str	r3, [r2, #96]	; 0x60
 8006e00:	4b5e      	ldr	r3, [pc, #376]	; (8006f7c <HAL_GPIO_Init+0x2fc>)
 8006e02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e04:	f003 0301 	and.w	r3, r3, #1
 8006e08:	60bb      	str	r3, [r7, #8]
 8006e0a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8006e0c:	4a5c      	ldr	r2, [pc, #368]	; (8006f80 <HAL_GPIO_Init+0x300>)
 8006e0e:	697b      	ldr	r3, [r7, #20]
 8006e10:	089b      	lsrs	r3, r3, #2
 8006e12:	3302      	adds	r3, #2
 8006e14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e18:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8006e1a:	697b      	ldr	r3, [r7, #20]
 8006e1c:	f003 0303 	and.w	r3, r3, #3
 8006e20:	009b      	lsls	r3, r3, #2
 8006e22:	220f      	movs	r2, #15
 8006e24:	fa02 f303 	lsl.w	r3, r2, r3
 8006e28:	43db      	mvns	r3, r3
 8006e2a:	693a      	ldr	r2, [r7, #16]
 8006e2c:	4013      	ands	r3, r2
 8006e2e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8006e36:	d02b      	beq.n	8006e90 <HAL_GPIO_Init+0x210>
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	4a52      	ldr	r2, [pc, #328]	; (8006f84 <HAL_GPIO_Init+0x304>)
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d025      	beq.n	8006e8c <HAL_GPIO_Init+0x20c>
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	4a51      	ldr	r2, [pc, #324]	; (8006f88 <HAL_GPIO_Init+0x308>)
 8006e44:	4293      	cmp	r3, r2
 8006e46:	d01f      	beq.n	8006e88 <HAL_GPIO_Init+0x208>
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	4a50      	ldr	r2, [pc, #320]	; (8006f8c <HAL_GPIO_Init+0x30c>)
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d019      	beq.n	8006e84 <HAL_GPIO_Init+0x204>
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	4a4f      	ldr	r2, [pc, #316]	; (8006f90 <HAL_GPIO_Init+0x310>)
 8006e54:	4293      	cmp	r3, r2
 8006e56:	d013      	beq.n	8006e80 <HAL_GPIO_Init+0x200>
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	4a4e      	ldr	r2, [pc, #312]	; (8006f94 <HAL_GPIO_Init+0x314>)
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	d00d      	beq.n	8006e7c <HAL_GPIO_Init+0x1fc>
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	4a4d      	ldr	r2, [pc, #308]	; (8006f98 <HAL_GPIO_Init+0x318>)
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d007      	beq.n	8006e78 <HAL_GPIO_Init+0x1f8>
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	4a4c      	ldr	r2, [pc, #304]	; (8006f9c <HAL_GPIO_Init+0x31c>)
 8006e6c:	4293      	cmp	r3, r2
 8006e6e:	d101      	bne.n	8006e74 <HAL_GPIO_Init+0x1f4>
 8006e70:	2307      	movs	r3, #7
 8006e72:	e00e      	b.n	8006e92 <HAL_GPIO_Init+0x212>
 8006e74:	2308      	movs	r3, #8
 8006e76:	e00c      	b.n	8006e92 <HAL_GPIO_Init+0x212>
 8006e78:	2306      	movs	r3, #6
 8006e7a:	e00a      	b.n	8006e92 <HAL_GPIO_Init+0x212>
 8006e7c:	2305      	movs	r3, #5
 8006e7e:	e008      	b.n	8006e92 <HAL_GPIO_Init+0x212>
 8006e80:	2304      	movs	r3, #4
 8006e82:	e006      	b.n	8006e92 <HAL_GPIO_Init+0x212>
 8006e84:	2303      	movs	r3, #3
 8006e86:	e004      	b.n	8006e92 <HAL_GPIO_Init+0x212>
 8006e88:	2302      	movs	r3, #2
 8006e8a:	e002      	b.n	8006e92 <HAL_GPIO_Init+0x212>
 8006e8c:	2301      	movs	r3, #1
 8006e8e:	e000      	b.n	8006e92 <HAL_GPIO_Init+0x212>
 8006e90:	2300      	movs	r3, #0
 8006e92:	697a      	ldr	r2, [r7, #20]
 8006e94:	f002 0203 	and.w	r2, r2, #3
 8006e98:	0092      	lsls	r2, r2, #2
 8006e9a:	4093      	lsls	r3, r2
 8006e9c:	693a      	ldr	r2, [r7, #16]
 8006e9e:	4313      	orrs	r3, r2
 8006ea0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8006ea2:	4937      	ldr	r1, [pc, #220]	; (8006f80 <HAL_GPIO_Init+0x300>)
 8006ea4:	697b      	ldr	r3, [r7, #20]
 8006ea6:	089b      	lsrs	r3, r3, #2
 8006ea8:	3302      	adds	r3, #2
 8006eaa:	693a      	ldr	r2, [r7, #16]
 8006eac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006eb0:	4b3b      	ldr	r3, [pc, #236]	; (8006fa0 <HAL_GPIO_Init+0x320>)
 8006eb2:	689b      	ldr	r3, [r3, #8]
 8006eb4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	43db      	mvns	r3, r3
 8006eba:	693a      	ldr	r2, [r7, #16]
 8006ebc:	4013      	ands	r3, r2
 8006ebe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	685b      	ldr	r3, [r3, #4]
 8006ec4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d003      	beq.n	8006ed4 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8006ecc:	693a      	ldr	r2, [r7, #16]
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	4313      	orrs	r3, r2
 8006ed2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006ed4:	4a32      	ldr	r2, [pc, #200]	; (8006fa0 <HAL_GPIO_Init+0x320>)
 8006ed6:	693b      	ldr	r3, [r7, #16]
 8006ed8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8006eda:	4b31      	ldr	r3, [pc, #196]	; (8006fa0 <HAL_GPIO_Init+0x320>)
 8006edc:	68db      	ldr	r3, [r3, #12]
 8006ede:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	43db      	mvns	r3, r3
 8006ee4:	693a      	ldr	r2, [r7, #16]
 8006ee6:	4013      	ands	r3, r2
 8006ee8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	685b      	ldr	r3, [r3, #4]
 8006eee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d003      	beq.n	8006efe <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8006ef6:	693a      	ldr	r2, [r7, #16]
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	4313      	orrs	r3, r2
 8006efc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006efe:	4a28      	ldr	r2, [pc, #160]	; (8006fa0 <HAL_GPIO_Init+0x320>)
 8006f00:	693b      	ldr	r3, [r7, #16]
 8006f02:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8006f04:	4b26      	ldr	r3, [pc, #152]	; (8006fa0 <HAL_GPIO_Init+0x320>)
 8006f06:	685b      	ldr	r3, [r3, #4]
 8006f08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	43db      	mvns	r3, r3
 8006f0e:	693a      	ldr	r2, [r7, #16]
 8006f10:	4013      	ands	r3, r2
 8006f12:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	685b      	ldr	r3, [r3, #4]
 8006f18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d003      	beq.n	8006f28 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8006f20:	693a      	ldr	r2, [r7, #16]
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	4313      	orrs	r3, r2
 8006f26:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006f28:	4a1d      	ldr	r2, [pc, #116]	; (8006fa0 <HAL_GPIO_Init+0x320>)
 8006f2a:	693b      	ldr	r3, [r7, #16]
 8006f2c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8006f2e:	4b1c      	ldr	r3, [pc, #112]	; (8006fa0 <HAL_GPIO_Init+0x320>)
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	43db      	mvns	r3, r3
 8006f38:	693a      	ldr	r2, [r7, #16]
 8006f3a:	4013      	ands	r3, r2
 8006f3c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	685b      	ldr	r3, [r3, #4]
 8006f42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d003      	beq.n	8006f52 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8006f4a:	693a      	ldr	r2, [r7, #16]
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	4313      	orrs	r3, r2
 8006f50:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006f52:	4a13      	ldr	r2, [pc, #76]	; (8006fa0 <HAL_GPIO_Init+0x320>)
 8006f54:	693b      	ldr	r3, [r7, #16]
 8006f56:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006f58:	697b      	ldr	r3, [r7, #20]
 8006f5a:	3301      	adds	r3, #1
 8006f5c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	681a      	ldr	r2, [r3, #0]
 8006f62:	697b      	ldr	r3, [r7, #20]
 8006f64:	fa22 f303 	lsr.w	r3, r2, r3
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	f47f ae91 	bne.w	8006c90 <HAL_GPIO_Init+0x10>
  }
}
 8006f6e:	bf00      	nop
 8006f70:	bf00      	nop
 8006f72:	371c      	adds	r7, #28
 8006f74:	46bd      	mov	sp, r7
 8006f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7a:	4770      	bx	lr
 8006f7c:	40021000 	.word	0x40021000
 8006f80:	40010000 	.word	0x40010000
 8006f84:	48000400 	.word	0x48000400
 8006f88:	48000800 	.word	0x48000800
 8006f8c:	48000c00 	.word	0x48000c00
 8006f90:	48001000 	.word	0x48001000
 8006f94:	48001400 	.word	0x48001400
 8006f98:	48001800 	.word	0x48001800
 8006f9c:	48001c00 	.word	0x48001c00
 8006fa0:	40010400 	.word	0x40010400

08006fa4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006fa4:	b480      	push	{r7}
 8006fa6:	b083      	sub	sp, #12
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
 8006fac:	460b      	mov	r3, r1
 8006fae:	807b      	strh	r3, [r7, #2]
 8006fb0:	4613      	mov	r3, r2
 8006fb2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006fb4:	787b      	ldrb	r3, [r7, #1]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d003      	beq.n	8006fc2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006fba:	887a      	ldrh	r2, [r7, #2]
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006fc0:	e002      	b.n	8006fc8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006fc2:	887a      	ldrh	r2, [r7, #2]
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006fc8:	bf00      	nop
 8006fca:	370c      	adds	r7, #12
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd2:	4770      	bx	lr

08006fd4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006fd4:	b480      	push	{r7}
 8006fd6:	b085      	sub	sp, #20
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
 8006fdc:	460b      	mov	r3, r1
 8006fde:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	695b      	ldr	r3, [r3, #20]
 8006fe4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006fe6:	887a      	ldrh	r2, [r7, #2]
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	4013      	ands	r3, r2
 8006fec:	041a      	lsls	r2, r3, #16
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	43d9      	mvns	r1, r3
 8006ff2:	887b      	ldrh	r3, [r7, #2]
 8006ff4:	400b      	ands	r3, r1
 8006ff6:	431a      	orrs	r2, r3
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	619a      	str	r2, [r3, #24]
}
 8006ffc:	bf00      	nop
 8006ffe:	3714      	adds	r7, #20
 8007000:	46bd      	mov	sp, r7
 8007002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007006:	4770      	bx	lr

08007008 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007008:	b580      	push	{r7, lr}
 800700a:	b082      	sub	sp, #8
 800700c:	af00      	add	r7, sp, #0
 800700e:	4603      	mov	r3, r0
 8007010:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8007012:	4b08      	ldr	r3, [pc, #32]	; (8007034 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007014:	695a      	ldr	r2, [r3, #20]
 8007016:	88fb      	ldrh	r3, [r7, #6]
 8007018:	4013      	ands	r3, r2
 800701a:	2b00      	cmp	r3, #0
 800701c:	d006      	beq.n	800702c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800701e:	4a05      	ldr	r2, [pc, #20]	; (8007034 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007020:	88fb      	ldrh	r3, [r7, #6]
 8007022:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007024:	88fb      	ldrh	r3, [r7, #6]
 8007026:	4618      	mov	r0, r3
 8007028:	f000 f806 	bl	8007038 <HAL_GPIO_EXTI_Callback>
  }
}
 800702c:	bf00      	nop
 800702e:	3708      	adds	r7, #8
 8007030:	46bd      	mov	sp, r7
 8007032:	bd80      	pop	{r7, pc}
 8007034:	40010400 	.word	0x40010400

08007038 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8007038:	b480      	push	{r7}
 800703a:	b083      	sub	sp, #12
 800703c:	af00      	add	r7, sp, #0
 800703e:	4603      	mov	r3, r0
 8007040:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8007042:	bf00      	nop
 8007044:	370c      	adds	r7, #12
 8007046:	46bd      	mov	sp, r7
 8007048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704c:	4770      	bx	lr

0800704e <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800704e:	b580      	push	{r7, lr}
 8007050:	b082      	sub	sp, #8
 8007052:	af00      	add	r7, sp, #0
 8007054:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d101      	bne.n	8007060 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800705c:	2301      	movs	r3, #1
 800705e:	e081      	b.n	8007164 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007066:	b2db      	uxtb	r3, r3
 8007068:	2b00      	cmp	r3, #0
 800706a:	d106      	bne.n	800707a <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2200      	movs	r2, #0
 8007070:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007074:	6878      	ldr	r0, [r7, #4]
 8007076:	f7fe fb33 	bl	80056e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2224      	movs	r2, #36	; 0x24
 800707e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	681a      	ldr	r2, [r3, #0]
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f022 0201 	bic.w	r2, r2, #1
 8007090:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	685a      	ldr	r2, [r3, #4]
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800709e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	689a      	ldr	r2, [r3, #8]
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80070ae:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	68db      	ldr	r3, [r3, #12]
 80070b4:	2b01      	cmp	r3, #1
 80070b6:	d107      	bne.n	80070c8 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	689a      	ldr	r2, [r3, #8]
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80070c4:	609a      	str	r2, [r3, #8]
 80070c6:	e006      	b.n	80070d6 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	689a      	ldr	r2, [r3, #8]
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80070d4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	68db      	ldr	r3, [r3, #12]
 80070da:	2b02      	cmp	r3, #2
 80070dc:	d104      	bne.n	80070e8 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80070e6:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	685b      	ldr	r3, [r3, #4]
 80070ee:	687a      	ldr	r2, [r7, #4]
 80070f0:	6812      	ldr	r2, [r2, #0]
 80070f2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80070f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070fa:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	68da      	ldr	r2, [r3, #12]
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800710a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	691a      	ldr	r2, [r3, #16]
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	695b      	ldr	r3, [r3, #20]
 8007114:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	699b      	ldr	r3, [r3, #24]
 800711c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	430a      	orrs	r2, r1
 8007124:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	69d9      	ldr	r1, [r3, #28]
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6a1a      	ldr	r2, [r3, #32]
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	430a      	orrs	r2, r1
 8007134:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	681a      	ldr	r2, [r3, #0]
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f042 0201 	orr.w	r2, r2, #1
 8007144:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	2200      	movs	r2, #0
 800714a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2220      	movs	r2, #32
 8007150:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2200      	movs	r2, #0
 8007158:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	2200      	movs	r2, #0
 800715e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8007162:	2300      	movs	r3, #0
}
 8007164:	4618      	mov	r0, r3
 8007166:	3708      	adds	r7, #8
 8007168:	46bd      	mov	sp, r7
 800716a:	bd80      	pop	{r7, pc}

0800716c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800716c:	b580      	push	{r7, lr}
 800716e:	b088      	sub	sp, #32
 8007170:	af02      	add	r7, sp, #8
 8007172:	60f8      	str	r0, [r7, #12]
 8007174:	607a      	str	r2, [r7, #4]
 8007176:	461a      	mov	r2, r3
 8007178:	460b      	mov	r3, r1
 800717a:	817b      	strh	r3, [r7, #10]
 800717c:	4613      	mov	r3, r2
 800717e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007186:	b2db      	uxtb	r3, r3
 8007188:	2b20      	cmp	r3, #32
 800718a:	f040 80da 	bne.w	8007342 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007194:	2b01      	cmp	r3, #1
 8007196:	d101      	bne.n	800719c <HAL_I2C_Master_Transmit+0x30>
 8007198:	2302      	movs	r3, #2
 800719a:	e0d3      	b.n	8007344 <HAL_I2C_Master_Transmit+0x1d8>
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	2201      	movs	r2, #1
 80071a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80071a4:	f7ff f8de 	bl	8006364 <HAL_GetTick>
 80071a8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80071aa:	697b      	ldr	r3, [r7, #20]
 80071ac:	9300      	str	r3, [sp, #0]
 80071ae:	2319      	movs	r3, #25
 80071b0:	2201      	movs	r2, #1
 80071b2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80071b6:	68f8      	ldr	r0, [r7, #12]
 80071b8:	f000 fcd6 	bl	8007b68 <I2C_WaitOnFlagUntilTimeout>
 80071bc:	4603      	mov	r3, r0
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d001      	beq.n	80071c6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80071c2:	2301      	movs	r3, #1
 80071c4:	e0be      	b.n	8007344 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	2221      	movs	r2, #33	; 0x21
 80071ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	2210      	movs	r2, #16
 80071d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	2200      	movs	r2, #0
 80071da:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	687a      	ldr	r2, [r7, #4]
 80071e0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	893a      	ldrh	r2, [r7, #8]
 80071e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	2200      	movs	r2, #0
 80071ec:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071f2:	b29b      	uxth	r3, r3
 80071f4:	2bff      	cmp	r3, #255	; 0xff
 80071f6:	d90e      	bls.n	8007216 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	22ff      	movs	r2, #255	; 0xff
 80071fc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007202:	b2da      	uxtb	r2, r3
 8007204:	8979      	ldrh	r1, [r7, #10]
 8007206:	4b51      	ldr	r3, [pc, #324]	; (800734c <HAL_I2C_Master_Transmit+0x1e0>)
 8007208:	9300      	str	r3, [sp, #0]
 800720a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800720e:	68f8      	ldr	r0, [r7, #12]
 8007210:	f000 fecc 	bl	8007fac <I2C_TransferConfig>
 8007214:	e06c      	b.n	80072f0 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800721a:	b29a      	uxth	r2, r3
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007224:	b2da      	uxtb	r2, r3
 8007226:	8979      	ldrh	r1, [r7, #10]
 8007228:	4b48      	ldr	r3, [pc, #288]	; (800734c <HAL_I2C_Master_Transmit+0x1e0>)
 800722a:	9300      	str	r3, [sp, #0]
 800722c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007230:	68f8      	ldr	r0, [r7, #12]
 8007232:	f000 febb 	bl	8007fac <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8007236:	e05b      	b.n	80072f0 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007238:	697a      	ldr	r2, [r7, #20]
 800723a:	6a39      	ldr	r1, [r7, #32]
 800723c:	68f8      	ldr	r0, [r7, #12]
 800723e:	f000 fcd3 	bl	8007be8 <I2C_WaitOnTXISFlagUntilTimeout>
 8007242:	4603      	mov	r3, r0
 8007244:	2b00      	cmp	r3, #0
 8007246:	d001      	beq.n	800724c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8007248:	2301      	movs	r3, #1
 800724a:	e07b      	b.n	8007344 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007250:	781a      	ldrb	r2, [r3, #0]
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800725c:	1c5a      	adds	r2, r3, #1
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007266:	b29b      	uxth	r3, r3
 8007268:	3b01      	subs	r3, #1
 800726a:	b29a      	uxth	r2, r3
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007274:	3b01      	subs	r3, #1
 8007276:	b29a      	uxth	r2, r3
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007280:	b29b      	uxth	r3, r3
 8007282:	2b00      	cmp	r3, #0
 8007284:	d034      	beq.n	80072f0 <HAL_I2C_Master_Transmit+0x184>
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800728a:	2b00      	cmp	r3, #0
 800728c:	d130      	bne.n	80072f0 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800728e:	697b      	ldr	r3, [r7, #20]
 8007290:	9300      	str	r3, [sp, #0]
 8007292:	6a3b      	ldr	r3, [r7, #32]
 8007294:	2200      	movs	r2, #0
 8007296:	2180      	movs	r1, #128	; 0x80
 8007298:	68f8      	ldr	r0, [r7, #12]
 800729a:	f000 fc65 	bl	8007b68 <I2C_WaitOnFlagUntilTimeout>
 800729e:	4603      	mov	r3, r0
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d001      	beq.n	80072a8 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80072a4:	2301      	movs	r3, #1
 80072a6:	e04d      	b.n	8007344 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072ac:	b29b      	uxth	r3, r3
 80072ae:	2bff      	cmp	r3, #255	; 0xff
 80072b0:	d90e      	bls.n	80072d0 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	22ff      	movs	r2, #255	; 0xff
 80072b6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80072bc:	b2da      	uxtb	r2, r3
 80072be:	8979      	ldrh	r1, [r7, #10]
 80072c0:	2300      	movs	r3, #0
 80072c2:	9300      	str	r3, [sp, #0]
 80072c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80072c8:	68f8      	ldr	r0, [r7, #12]
 80072ca:	f000 fe6f 	bl	8007fac <I2C_TransferConfig>
 80072ce:	e00f      	b.n	80072f0 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072d4:	b29a      	uxth	r2, r3
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80072de:	b2da      	uxtb	r2, r3
 80072e0:	8979      	ldrh	r1, [r7, #10]
 80072e2:	2300      	movs	r3, #0
 80072e4:	9300      	str	r3, [sp, #0]
 80072e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80072ea:	68f8      	ldr	r0, [r7, #12]
 80072ec:	f000 fe5e 	bl	8007fac <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072f4:	b29b      	uxth	r3, r3
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d19e      	bne.n	8007238 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80072fa:	697a      	ldr	r2, [r7, #20]
 80072fc:	6a39      	ldr	r1, [r7, #32]
 80072fe:	68f8      	ldr	r0, [r7, #12]
 8007300:	f000 fcb2 	bl	8007c68 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007304:	4603      	mov	r3, r0
 8007306:	2b00      	cmp	r3, #0
 8007308:	d001      	beq.n	800730e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800730a:	2301      	movs	r3, #1
 800730c:	e01a      	b.n	8007344 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	2220      	movs	r2, #32
 8007314:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	6859      	ldr	r1, [r3, #4]
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	681a      	ldr	r2, [r3, #0]
 8007320:	4b0b      	ldr	r3, [pc, #44]	; (8007350 <HAL_I2C_Master_Transmit+0x1e4>)
 8007322:	400b      	ands	r3, r1
 8007324:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	2220      	movs	r2, #32
 800732a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	2200      	movs	r2, #0
 8007332:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	2200      	movs	r2, #0
 800733a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800733e:	2300      	movs	r3, #0
 8007340:	e000      	b.n	8007344 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8007342:	2302      	movs	r3, #2
  }
}
 8007344:	4618      	mov	r0, r3
 8007346:	3718      	adds	r7, #24
 8007348:	46bd      	mov	sp, r7
 800734a:	bd80      	pop	{r7, pc}
 800734c:	80002000 	.word	0x80002000
 8007350:	fe00e800 	.word	0xfe00e800

08007354 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b088      	sub	sp, #32
 8007358:	af02      	add	r7, sp, #8
 800735a:	60f8      	str	r0, [r7, #12]
 800735c:	607a      	str	r2, [r7, #4]
 800735e:	461a      	mov	r2, r3
 8007360:	460b      	mov	r3, r1
 8007362:	817b      	strh	r3, [r7, #10]
 8007364:	4613      	mov	r3, r2
 8007366:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800736e:	b2db      	uxtb	r3, r3
 8007370:	2b20      	cmp	r3, #32
 8007372:	f040 80db 	bne.w	800752c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800737c:	2b01      	cmp	r3, #1
 800737e:	d101      	bne.n	8007384 <HAL_I2C_Master_Receive+0x30>
 8007380:	2302      	movs	r3, #2
 8007382:	e0d4      	b.n	800752e <HAL_I2C_Master_Receive+0x1da>
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	2201      	movs	r2, #1
 8007388:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800738c:	f7fe ffea 	bl	8006364 <HAL_GetTick>
 8007390:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007392:	697b      	ldr	r3, [r7, #20]
 8007394:	9300      	str	r3, [sp, #0]
 8007396:	2319      	movs	r3, #25
 8007398:	2201      	movs	r2, #1
 800739a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800739e:	68f8      	ldr	r0, [r7, #12]
 80073a0:	f000 fbe2 	bl	8007b68 <I2C_WaitOnFlagUntilTimeout>
 80073a4:	4603      	mov	r3, r0
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d001      	beq.n	80073ae <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80073aa:	2301      	movs	r3, #1
 80073ac:	e0bf      	b.n	800752e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	2222      	movs	r2, #34	; 0x22
 80073b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	2210      	movs	r2, #16
 80073ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	2200      	movs	r2, #0
 80073c2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	687a      	ldr	r2, [r7, #4]
 80073c8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	893a      	ldrh	r2, [r7, #8]
 80073ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	2200      	movs	r2, #0
 80073d4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073da:	b29b      	uxth	r3, r3
 80073dc:	2bff      	cmp	r3, #255	; 0xff
 80073de:	d90e      	bls.n	80073fe <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	22ff      	movs	r2, #255	; 0xff
 80073e4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073ea:	b2da      	uxtb	r2, r3
 80073ec:	8979      	ldrh	r1, [r7, #10]
 80073ee:	4b52      	ldr	r3, [pc, #328]	; (8007538 <HAL_I2C_Master_Receive+0x1e4>)
 80073f0:	9300      	str	r3, [sp, #0]
 80073f2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80073f6:	68f8      	ldr	r0, [r7, #12]
 80073f8:	f000 fdd8 	bl	8007fac <I2C_TransferConfig>
 80073fc:	e06d      	b.n	80074da <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007402:	b29a      	uxth	r2, r3
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800740c:	b2da      	uxtb	r2, r3
 800740e:	8979      	ldrh	r1, [r7, #10]
 8007410:	4b49      	ldr	r3, [pc, #292]	; (8007538 <HAL_I2C_Master_Receive+0x1e4>)
 8007412:	9300      	str	r3, [sp, #0]
 8007414:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007418:	68f8      	ldr	r0, [r7, #12]
 800741a:	f000 fdc7 	bl	8007fac <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800741e:	e05c      	b.n	80074da <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007420:	697a      	ldr	r2, [r7, #20]
 8007422:	6a39      	ldr	r1, [r7, #32]
 8007424:	68f8      	ldr	r0, [r7, #12]
 8007426:	f000 fc5b 	bl	8007ce0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800742a:	4603      	mov	r3, r0
 800742c:	2b00      	cmp	r3, #0
 800742e:	d001      	beq.n	8007434 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8007430:	2301      	movs	r3, #1
 8007432:	e07c      	b.n	800752e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800743e:	b2d2      	uxtb	r2, r2
 8007440:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007446:	1c5a      	adds	r2, r3, #1
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007450:	3b01      	subs	r3, #1
 8007452:	b29a      	uxth	r2, r3
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800745c:	b29b      	uxth	r3, r3
 800745e:	3b01      	subs	r3, #1
 8007460:	b29a      	uxth	r2, r3
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800746a:	b29b      	uxth	r3, r3
 800746c:	2b00      	cmp	r3, #0
 800746e:	d034      	beq.n	80074da <HAL_I2C_Master_Receive+0x186>
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007474:	2b00      	cmp	r3, #0
 8007476:	d130      	bne.n	80074da <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007478:	697b      	ldr	r3, [r7, #20]
 800747a:	9300      	str	r3, [sp, #0]
 800747c:	6a3b      	ldr	r3, [r7, #32]
 800747e:	2200      	movs	r2, #0
 8007480:	2180      	movs	r1, #128	; 0x80
 8007482:	68f8      	ldr	r0, [r7, #12]
 8007484:	f000 fb70 	bl	8007b68 <I2C_WaitOnFlagUntilTimeout>
 8007488:	4603      	mov	r3, r0
 800748a:	2b00      	cmp	r3, #0
 800748c:	d001      	beq.n	8007492 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800748e:	2301      	movs	r3, #1
 8007490:	e04d      	b.n	800752e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007496:	b29b      	uxth	r3, r3
 8007498:	2bff      	cmp	r3, #255	; 0xff
 800749a:	d90e      	bls.n	80074ba <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	22ff      	movs	r2, #255	; 0xff
 80074a0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074a6:	b2da      	uxtb	r2, r3
 80074a8:	8979      	ldrh	r1, [r7, #10]
 80074aa:	2300      	movs	r3, #0
 80074ac:	9300      	str	r3, [sp, #0]
 80074ae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80074b2:	68f8      	ldr	r0, [r7, #12]
 80074b4:	f000 fd7a 	bl	8007fac <I2C_TransferConfig>
 80074b8:	e00f      	b.n	80074da <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074be:	b29a      	uxth	r2, r3
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074c8:	b2da      	uxtb	r2, r3
 80074ca:	8979      	ldrh	r1, [r7, #10]
 80074cc:	2300      	movs	r3, #0
 80074ce:	9300      	str	r3, [sp, #0]
 80074d0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80074d4:	68f8      	ldr	r0, [r7, #12]
 80074d6:	f000 fd69 	bl	8007fac <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074de:	b29b      	uxth	r3, r3
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d19d      	bne.n	8007420 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80074e4:	697a      	ldr	r2, [r7, #20]
 80074e6:	6a39      	ldr	r1, [r7, #32]
 80074e8:	68f8      	ldr	r0, [r7, #12]
 80074ea:	f000 fbbd 	bl	8007c68 <I2C_WaitOnSTOPFlagUntilTimeout>
 80074ee:	4603      	mov	r3, r0
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d001      	beq.n	80074f8 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80074f4:	2301      	movs	r3, #1
 80074f6:	e01a      	b.n	800752e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	2220      	movs	r2, #32
 80074fe:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	6859      	ldr	r1, [r3, #4]
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	681a      	ldr	r2, [r3, #0]
 800750a:	4b0c      	ldr	r3, [pc, #48]	; (800753c <HAL_I2C_Master_Receive+0x1e8>)
 800750c:	400b      	ands	r3, r1
 800750e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	2220      	movs	r2, #32
 8007514:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	2200      	movs	r2, #0
 800751c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	2200      	movs	r2, #0
 8007524:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007528:	2300      	movs	r3, #0
 800752a:	e000      	b.n	800752e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800752c:	2302      	movs	r3, #2
  }
}
 800752e:	4618      	mov	r0, r3
 8007530:	3718      	adds	r7, #24
 8007532:	46bd      	mov	sp, r7
 8007534:	bd80      	pop	{r7, pc}
 8007536:	bf00      	nop
 8007538:	80002400 	.word	0x80002400
 800753c:	fe00e800 	.word	0xfe00e800

08007540 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007540:	b580      	push	{r7, lr}
 8007542:	b088      	sub	sp, #32
 8007544:	af02      	add	r7, sp, #8
 8007546:	60f8      	str	r0, [r7, #12]
 8007548:	4608      	mov	r0, r1
 800754a:	4611      	mov	r1, r2
 800754c:	461a      	mov	r2, r3
 800754e:	4603      	mov	r3, r0
 8007550:	817b      	strh	r3, [r7, #10]
 8007552:	460b      	mov	r3, r1
 8007554:	813b      	strh	r3, [r7, #8]
 8007556:	4613      	mov	r3, r2
 8007558:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007560:	b2db      	uxtb	r3, r3
 8007562:	2b20      	cmp	r3, #32
 8007564:	f040 80f9 	bne.w	800775a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007568:	6a3b      	ldr	r3, [r7, #32]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d002      	beq.n	8007574 <HAL_I2C_Mem_Write+0x34>
 800756e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007570:	2b00      	cmp	r3, #0
 8007572:	d105      	bne.n	8007580 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	f44f 7200 	mov.w	r2, #512	; 0x200
 800757a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800757c:	2301      	movs	r3, #1
 800757e:	e0ed      	b.n	800775c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007586:	2b01      	cmp	r3, #1
 8007588:	d101      	bne.n	800758e <HAL_I2C_Mem_Write+0x4e>
 800758a:	2302      	movs	r3, #2
 800758c:	e0e6      	b.n	800775c <HAL_I2C_Mem_Write+0x21c>
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	2201      	movs	r2, #1
 8007592:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007596:	f7fe fee5 	bl	8006364 <HAL_GetTick>
 800759a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800759c:	697b      	ldr	r3, [r7, #20]
 800759e:	9300      	str	r3, [sp, #0]
 80075a0:	2319      	movs	r3, #25
 80075a2:	2201      	movs	r2, #1
 80075a4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80075a8:	68f8      	ldr	r0, [r7, #12]
 80075aa:	f000 fadd 	bl	8007b68 <I2C_WaitOnFlagUntilTimeout>
 80075ae:	4603      	mov	r3, r0
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d001      	beq.n	80075b8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80075b4:	2301      	movs	r3, #1
 80075b6:	e0d1      	b.n	800775c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	2221      	movs	r2, #33	; 0x21
 80075bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	2240      	movs	r2, #64	; 0x40
 80075c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	2200      	movs	r2, #0
 80075cc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	6a3a      	ldr	r2, [r7, #32]
 80075d2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80075d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	2200      	movs	r2, #0
 80075de:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80075e0:	88f8      	ldrh	r0, [r7, #6]
 80075e2:	893a      	ldrh	r2, [r7, #8]
 80075e4:	8979      	ldrh	r1, [r7, #10]
 80075e6:	697b      	ldr	r3, [r7, #20]
 80075e8:	9301      	str	r3, [sp, #4]
 80075ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075ec:	9300      	str	r3, [sp, #0]
 80075ee:	4603      	mov	r3, r0
 80075f0:	68f8      	ldr	r0, [r7, #12]
 80075f2:	f000 f9ed 	bl	80079d0 <I2C_RequestMemoryWrite>
 80075f6:	4603      	mov	r3, r0
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d005      	beq.n	8007608 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	2200      	movs	r2, #0
 8007600:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8007604:	2301      	movs	r3, #1
 8007606:	e0a9      	b.n	800775c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800760c:	b29b      	uxth	r3, r3
 800760e:	2bff      	cmp	r3, #255	; 0xff
 8007610:	d90e      	bls.n	8007630 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	22ff      	movs	r2, #255	; 0xff
 8007616:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800761c:	b2da      	uxtb	r2, r3
 800761e:	8979      	ldrh	r1, [r7, #10]
 8007620:	2300      	movs	r3, #0
 8007622:	9300      	str	r3, [sp, #0]
 8007624:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007628:	68f8      	ldr	r0, [r7, #12]
 800762a:	f000 fcbf 	bl	8007fac <I2C_TransferConfig>
 800762e:	e00f      	b.n	8007650 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007634:	b29a      	uxth	r2, r3
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800763e:	b2da      	uxtb	r2, r3
 8007640:	8979      	ldrh	r1, [r7, #10]
 8007642:	2300      	movs	r3, #0
 8007644:	9300      	str	r3, [sp, #0]
 8007646:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800764a:	68f8      	ldr	r0, [r7, #12]
 800764c:	f000 fcae 	bl	8007fac <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007650:	697a      	ldr	r2, [r7, #20]
 8007652:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007654:	68f8      	ldr	r0, [r7, #12]
 8007656:	f000 fac7 	bl	8007be8 <I2C_WaitOnTXISFlagUntilTimeout>
 800765a:	4603      	mov	r3, r0
 800765c:	2b00      	cmp	r3, #0
 800765e:	d001      	beq.n	8007664 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8007660:	2301      	movs	r3, #1
 8007662:	e07b      	b.n	800775c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007668:	781a      	ldrb	r2, [r3, #0]
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007674:	1c5a      	adds	r2, r3, #1
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800767e:	b29b      	uxth	r3, r3
 8007680:	3b01      	subs	r3, #1
 8007682:	b29a      	uxth	r2, r3
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800768c:	3b01      	subs	r3, #1
 800768e:	b29a      	uxth	r2, r3
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007698:	b29b      	uxth	r3, r3
 800769a:	2b00      	cmp	r3, #0
 800769c:	d034      	beq.n	8007708 <HAL_I2C_Mem_Write+0x1c8>
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d130      	bne.n	8007708 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80076a6:	697b      	ldr	r3, [r7, #20]
 80076a8:	9300      	str	r3, [sp, #0]
 80076aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076ac:	2200      	movs	r2, #0
 80076ae:	2180      	movs	r1, #128	; 0x80
 80076b0:	68f8      	ldr	r0, [r7, #12]
 80076b2:	f000 fa59 	bl	8007b68 <I2C_WaitOnFlagUntilTimeout>
 80076b6:	4603      	mov	r3, r0
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d001      	beq.n	80076c0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80076bc:	2301      	movs	r3, #1
 80076be:	e04d      	b.n	800775c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076c4:	b29b      	uxth	r3, r3
 80076c6:	2bff      	cmp	r3, #255	; 0xff
 80076c8:	d90e      	bls.n	80076e8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	22ff      	movs	r2, #255	; 0xff
 80076ce:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80076d4:	b2da      	uxtb	r2, r3
 80076d6:	8979      	ldrh	r1, [r7, #10]
 80076d8:	2300      	movs	r3, #0
 80076da:	9300      	str	r3, [sp, #0]
 80076dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80076e0:	68f8      	ldr	r0, [r7, #12]
 80076e2:	f000 fc63 	bl	8007fac <I2C_TransferConfig>
 80076e6:	e00f      	b.n	8007708 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076ec:	b29a      	uxth	r2, r3
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80076f6:	b2da      	uxtb	r2, r3
 80076f8:	8979      	ldrh	r1, [r7, #10]
 80076fa:	2300      	movs	r3, #0
 80076fc:	9300      	str	r3, [sp, #0]
 80076fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007702:	68f8      	ldr	r0, [r7, #12]
 8007704:	f000 fc52 	bl	8007fac <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800770c:	b29b      	uxth	r3, r3
 800770e:	2b00      	cmp	r3, #0
 8007710:	d19e      	bne.n	8007650 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007712:	697a      	ldr	r2, [r7, #20]
 8007714:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007716:	68f8      	ldr	r0, [r7, #12]
 8007718:	f000 faa6 	bl	8007c68 <I2C_WaitOnSTOPFlagUntilTimeout>
 800771c:	4603      	mov	r3, r0
 800771e:	2b00      	cmp	r3, #0
 8007720:	d001      	beq.n	8007726 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8007722:	2301      	movs	r3, #1
 8007724:	e01a      	b.n	800775c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	2220      	movs	r2, #32
 800772c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	6859      	ldr	r1, [r3, #4]
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	681a      	ldr	r2, [r3, #0]
 8007738:	4b0a      	ldr	r3, [pc, #40]	; (8007764 <HAL_I2C_Mem_Write+0x224>)
 800773a:	400b      	ands	r3, r1
 800773c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	2220      	movs	r2, #32
 8007742:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	2200      	movs	r2, #0
 800774a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	2200      	movs	r2, #0
 8007752:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007756:	2300      	movs	r3, #0
 8007758:	e000      	b.n	800775c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800775a:	2302      	movs	r3, #2
  }
}
 800775c:	4618      	mov	r0, r3
 800775e:	3718      	adds	r7, #24
 8007760:	46bd      	mov	sp, r7
 8007762:	bd80      	pop	{r7, pc}
 8007764:	fe00e800 	.word	0xfe00e800

08007768 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007768:	b580      	push	{r7, lr}
 800776a:	b088      	sub	sp, #32
 800776c:	af02      	add	r7, sp, #8
 800776e:	60f8      	str	r0, [r7, #12]
 8007770:	4608      	mov	r0, r1
 8007772:	4611      	mov	r1, r2
 8007774:	461a      	mov	r2, r3
 8007776:	4603      	mov	r3, r0
 8007778:	817b      	strh	r3, [r7, #10]
 800777a:	460b      	mov	r3, r1
 800777c:	813b      	strh	r3, [r7, #8]
 800777e:	4613      	mov	r3, r2
 8007780:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007788:	b2db      	uxtb	r3, r3
 800778a:	2b20      	cmp	r3, #32
 800778c:	f040 80fd 	bne.w	800798a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8007790:	6a3b      	ldr	r3, [r7, #32]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d002      	beq.n	800779c <HAL_I2C_Mem_Read+0x34>
 8007796:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007798:	2b00      	cmp	r3, #0
 800779a:	d105      	bne.n	80077a8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80077a2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80077a4:	2301      	movs	r3, #1
 80077a6:	e0f1      	b.n	800798c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80077ae:	2b01      	cmp	r3, #1
 80077b0:	d101      	bne.n	80077b6 <HAL_I2C_Mem_Read+0x4e>
 80077b2:	2302      	movs	r3, #2
 80077b4:	e0ea      	b.n	800798c <HAL_I2C_Mem_Read+0x224>
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	2201      	movs	r2, #1
 80077ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80077be:	f7fe fdd1 	bl	8006364 <HAL_GetTick>
 80077c2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80077c4:	697b      	ldr	r3, [r7, #20]
 80077c6:	9300      	str	r3, [sp, #0]
 80077c8:	2319      	movs	r3, #25
 80077ca:	2201      	movs	r2, #1
 80077cc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80077d0:	68f8      	ldr	r0, [r7, #12]
 80077d2:	f000 f9c9 	bl	8007b68 <I2C_WaitOnFlagUntilTimeout>
 80077d6:	4603      	mov	r3, r0
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d001      	beq.n	80077e0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80077dc:	2301      	movs	r3, #1
 80077de:	e0d5      	b.n	800798c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	2222      	movs	r2, #34	; 0x22
 80077e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	2240      	movs	r2, #64	; 0x40
 80077ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	2200      	movs	r2, #0
 80077f4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	6a3a      	ldr	r2, [r7, #32]
 80077fa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007800:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	2200      	movs	r2, #0
 8007806:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007808:	88f8      	ldrh	r0, [r7, #6]
 800780a:	893a      	ldrh	r2, [r7, #8]
 800780c:	8979      	ldrh	r1, [r7, #10]
 800780e:	697b      	ldr	r3, [r7, #20]
 8007810:	9301      	str	r3, [sp, #4]
 8007812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007814:	9300      	str	r3, [sp, #0]
 8007816:	4603      	mov	r3, r0
 8007818:	68f8      	ldr	r0, [r7, #12]
 800781a:	f000 f92d 	bl	8007a78 <I2C_RequestMemoryRead>
 800781e:	4603      	mov	r3, r0
 8007820:	2b00      	cmp	r3, #0
 8007822:	d005      	beq.n	8007830 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	2200      	movs	r2, #0
 8007828:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800782c:	2301      	movs	r3, #1
 800782e:	e0ad      	b.n	800798c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007834:	b29b      	uxth	r3, r3
 8007836:	2bff      	cmp	r3, #255	; 0xff
 8007838:	d90e      	bls.n	8007858 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	22ff      	movs	r2, #255	; 0xff
 800783e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007844:	b2da      	uxtb	r2, r3
 8007846:	8979      	ldrh	r1, [r7, #10]
 8007848:	4b52      	ldr	r3, [pc, #328]	; (8007994 <HAL_I2C_Mem_Read+0x22c>)
 800784a:	9300      	str	r3, [sp, #0]
 800784c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007850:	68f8      	ldr	r0, [r7, #12]
 8007852:	f000 fbab 	bl	8007fac <I2C_TransferConfig>
 8007856:	e00f      	b.n	8007878 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800785c:	b29a      	uxth	r2, r3
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007866:	b2da      	uxtb	r2, r3
 8007868:	8979      	ldrh	r1, [r7, #10]
 800786a:	4b4a      	ldr	r3, [pc, #296]	; (8007994 <HAL_I2C_Mem_Read+0x22c>)
 800786c:	9300      	str	r3, [sp, #0]
 800786e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007872:	68f8      	ldr	r0, [r7, #12]
 8007874:	f000 fb9a 	bl	8007fac <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8007878:	697b      	ldr	r3, [r7, #20]
 800787a:	9300      	str	r3, [sp, #0]
 800787c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800787e:	2200      	movs	r2, #0
 8007880:	2104      	movs	r1, #4
 8007882:	68f8      	ldr	r0, [r7, #12]
 8007884:	f000 f970 	bl	8007b68 <I2C_WaitOnFlagUntilTimeout>
 8007888:	4603      	mov	r3, r0
 800788a:	2b00      	cmp	r3, #0
 800788c:	d001      	beq.n	8007892 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800788e:	2301      	movs	r3, #1
 8007890:	e07c      	b.n	800798c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800789c:	b2d2      	uxtb	r2, r2
 800789e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078a4:	1c5a      	adds	r2, r3, #1
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80078ae:	3b01      	subs	r3, #1
 80078b0:	b29a      	uxth	r2, r3
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078ba:	b29b      	uxth	r3, r3
 80078bc:	3b01      	subs	r3, #1
 80078be:	b29a      	uxth	r2, r3
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078c8:	b29b      	uxth	r3, r3
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d034      	beq.n	8007938 <HAL_I2C_Mem_Read+0x1d0>
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d130      	bne.n	8007938 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80078d6:	697b      	ldr	r3, [r7, #20]
 80078d8:	9300      	str	r3, [sp, #0]
 80078da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078dc:	2200      	movs	r2, #0
 80078de:	2180      	movs	r1, #128	; 0x80
 80078e0:	68f8      	ldr	r0, [r7, #12]
 80078e2:	f000 f941 	bl	8007b68 <I2C_WaitOnFlagUntilTimeout>
 80078e6:	4603      	mov	r3, r0
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d001      	beq.n	80078f0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80078ec:	2301      	movs	r3, #1
 80078ee:	e04d      	b.n	800798c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078f4:	b29b      	uxth	r3, r3
 80078f6:	2bff      	cmp	r3, #255	; 0xff
 80078f8:	d90e      	bls.n	8007918 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	22ff      	movs	r2, #255	; 0xff
 80078fe:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007904:	b2da      	uxtb	r2, r3
 8007906:	8979      	ldrh	r1, [r7, #10]
 8007908:	2300      	movs	r3, #0
 800790a:	9300      	str	r3, [sp, #0]
 800790c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007910:	68f8      	ldr	r0, [r7, #12]
 8007912:	f000 fb4b 	bl	8007fac <I2C_TransferConfig>
 8007916:	e00f      	b.n	8007938 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800791c:	b29a      	uxth	r2, r3
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007926:	b2da      	uxtb	r2, r3
 8007928:	8979      	ldrh	r1, [r7, #10]
 800792a:	2300      	movs	r3, #0
 800792c:	9300      	str	r3, [sp, #0]
 800792e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007932:	68f8      	ldr	r0, [r7, #12]
 8007934:	f000 fb3a 	bl	8007fac <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800793c:	b29b      	uxth	r3, r3
 800793e:	2b00      	cmp	r3, #0
 8007940:	d19a      	bne.n	8007878 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007942:	697a      	ldr	r2, [r7, #20]
 8007944:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007946:	68f8      	ldr	r0, [r7, #12]
 8007948:	f000 f98e 	bl	8007c68 <I2C_WaitOnSTOPFlagUntilTimeout>
 800794c:	4603      	mov	r3, r0
 800794e:	2b00      	cmp	r3, #0
 8007950:	d001      	beq.n	8007956 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8007952:	2301      	movs	r3, #1
 8007954:	e01a      	b.n	800798c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	2220      	movs	r2, #32
 800795c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	6859      	ldr	r1, [r3, #4]
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	681a      	ldr	r2, [r3, #0]
 8007968:	4b0b      	ldr	r3, [pc, #44]	; (8007998 <HAL_I2C_Mem_Read+0x230>)
 800796a:	400b      	ands	r3, r1
 800796c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	2220      	movs	r2, #32
 8007972:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	2200      	movs	r2, #0
 800797a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	2200      	movs	r2, #0
 8007982:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007986:	2300      	movs	r3, #0
 8007988:	e000      	b.n	800798c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800798a:	2302      	movs	r3, #2
  }
}
 800798c:	4618      	mov	r0, r3
 800798e:	3718      	adds	r7, #24
 8007990:	46bd      	mov	sp, r7
 8007992:	bd80      	pop	{r7, pc}
 8007994:	80002400 	.word	0x80002400
 8007998:	fe00e800 	.word	0xfe00e800

0800799c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800799c:	b580      	push	{r7, lr}
 800799e:	b084      	sub	sp, #16
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	699b      	ldr	r3, [r3, #24]
 80079aa:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d005      	beq.n	80079c8 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079c0:	68ba      	ldr	r2, [r7, #8]
 80079c2:	68f9      	ldr	r1, [r7, #12]
 80079c4:	6878      	ldr	r0, [r7, #4]
 80079c6:	4798      	blx	r3
  }
}
 80079c8:	bf00      	nop
 80079ca:	3710      	adds	r7, #16
 80079cc:	46bd      	mov	sp, r7
 80079ce:	bd80      	pop	{r7, pc}

080079d0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b086      	sub	sp, #24
 80079d4:	af02      	add	r7, sp, #8
 80079d6:	60f8      	str	r0, [r7, #12]
 80079d8:	4608      	mov	r0, r1
 80079da:	4611      	mov	r1, r2
 80079dc:	461a      	mov	r2, r3
 80079de:	4603      	mov	r3, r0
 80079e0:	817b      	strh	r3, [r7, #10]
 80079e2:	460b      	mov	r3, r1
 80079e4:	813b      	strh	r3, [r7, #8]
 80079e6:	4613      	mov	r3, r2
 80079e8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80079ea:	88fb      	ldrh	r3, [r7, #6]
 80079ec:	b2da      	uxtb	r2, r3
 80079ee:	8979      	ldrh	r1, [r7, #10]
 80079f0:	4b20      	ldr	r3, [pc, #128]	; (8007a74 <I2C_RequestMemoryWrite+0xa4>)
 80079f2:	9300      	str	r3, [sp, #0]
 80079f4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80079f8:	68f8      	ldr	r0, [r7, #12]
 80079fa:	f000 fad7 	bl	8007fac <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80079fe:	69fa      	ldr	r2, [r7, #28]
 8007a00:	69b9      	ldr	r1, [r7, #24]
 8007a02:	68f8      	ldr	r0, [r7, #12]
 8007a04:	f000 f8f0 	bl	8007be8 <I2C_WaitOnTXISFlagUntilTimeout>
 8007a08:	4603      	mov	r3, r0
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d001      	beq.n	8007a12 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8007a0e:	2301      	movs	r3, #1
 8007a10:	e02c      	b.n	8007a6c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007a12:	88fb      	ldrh	r3, [r7, #6]
 8007a14:	2b01      	cmp	r3, #1
 8007a16:	d105      	bne.n	8007a24 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007a18:	893b      	ldrh	r3, [r7, #8]
 8007a1a:	b2da      	uxtb	r2, r3
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	629a      	str	r2, [r3, #40]	; 0x28
 8007a22:	e015      	b.n	8007a50 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007a24:	893b      	ldrh	r3, [r7, #8]
 8007a26:	0a1b      	lsrs	r3, r3, #8
 8007a28:	b29b      	uxth	r3, r3
 8007a2a:	b2da      	uxtb	r2, r3
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007a32:	69fa      	ldr	r2, [r7, #28]
 8007a34:	69b9      	ldr	r1, [r7, #24]
 8007a36:	68f8      	ldr	r0, [r7, #12]
 8007a38:	f000 f8d6 	bl	8007be8 <I2C_WaitOnTXISFlagUntilTimeout>
 8007a3c:	4603      	mov	r3, r0
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d001      	beq.n	8007a46 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8007a42:	2301      	movs	r3, #1
 8007a44:	e012      	b.n	8007a6c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007a46:	893b      	ldrh	r3, [r7, #8]
 8007a48:	b2da      	uxtb	r2, r3
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8007a50:	69fb      	ldr	r3, [r7, #28]
 8007a52:	9300      	str	r3, [sp, #0]
 8007a54:	69bb      	ldr	r3, [r7, #24]
 8007a56:	2200      	movs	r2, #0
 8007a58:	2180      	movs	r1, #128	; 0x80
 8007a5a:	68f8      	ldr	r0, [r7, #12]
 8007a5c:	f000 f884 	bl	8007b68 <I2C_WaitOnFlagUntilTimeout>
 8007a60:	4603      	mov	r3, r0
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d001      	beq.n	8007a6a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8007a66:	2301      	movs	r3, #1
 8007a68:	e000      	b.n	8007a6c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8007a6a:	2300      	movs	r3, #0
}
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	3710      	adds	r7, #16
 8007a70:	46bd      	mov	sp, r7
 8007a72:	bd80      	pop	{r7, pc}
 8007a74:	80002000 	.word	0x80002000

08007a78 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b086      	sub	sp, #24
 8007a7c:	af02      	add	r7, sp, #8
 8007a7e:	60f8      	str	r0, [r7, #12]
 8007a80:	4608      	mov	r0, r1
 8007a82:	4611      	mov	r1, r2
 8007a84:	461a      	mov	r2, r3
 8007a86:	4603      	mov	r3, r0
 8007a88:	817b      	strh	r3, [r7, #10]
 8007a8a:	460b      	mov	r3, r1
 8007a8c:	813b      	strh	r3, [r7, #8]
 8007a8e:	4613      	mov	r3, r2
 8007a90:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8007a92:	88fb      	ldrh	r3, [r7, #6]
 8007a94:	b2da      	uxtb	r2, r3
 8007a96:	8979      	ldrh	r1, [r7, #10]
 8007a98:	4b20      	ldr	r3, [pc, #128]	; (8007b1c <I2C_RequestMemoryRead+0xa4>)
 8007a9a:	9300      	str	r3, [sp, #0]
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	68f8      	ldr	r0, [r7, #12]
 8007aa0:	f000 fa84 	bl	8007fac <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007aa4:	69fa      	ldr	r2, [r7, #28]
 8007aa6:	69b9      	ldr	r1, [r7, #24]
 8007aa8:	68f8      	ldr	r0, [r7, #12]
 8007aaa:	f000 f89d 	bl	8007be8 <I2C_WaitOnTXISFlagUntilTimeout>
 8007aae:	4603      	mov	r3, r0
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d001      	beq.n	8007ab8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8007ab4:	2301      	movs	r3, #1
 8007ab6:	e02c      	b.n	8007b12 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007ab8:	88fb      	ldrh	r3, [r7, #6]
 8007aba:	2b01      	cmp	r3, #1
 8007abc:	d105      	bne.n	8007aca <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007abe:	893b      	ldrh	r3, [r7, #8]
 8007ac0:	b2da      	uxtb	r2, r3
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	629a      	str	r2, [r3, #40]	; 0x28
 8007ac8:	e015      	b.n	8007af6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007aca:	893b      	ldrh	r3, [r7, #8]
 8007acc:	0a1b      	lsrs	r3, r3, #8
 8007ace:	b29b      	uxth	r3, r3
 8007ad0:	b2da      	uxtb	r2, r3
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007ad8:	69fa      	ldr	r2, [r7, #28]
 8007ada:	69b9      	ldr	r1, [r7, #24]
 8007adc:	68f8      	ldr	r0, [r7, #12]
 8007ade:	f000 f883 	bl	8007be8 <I2C_WaitOnTXISFlagUntilTimeout>
 8007ae2:	4603      	mov	r3, r0
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d001      	beq.n	8007aec <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8007ae8:	2301      	movs	r3, #1
 8007aea:	e012      	b.n	8007b12 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007aec:	893b      	ldrh	r3, [r7, #8]
 8007aee:	b2da      	uxtb	r2, r3
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8007af6:	69fb      	ldr	r3, [r7, #28]
 8007af8:	9300      	str	r3, [sp, #0]
 8007afa:	69bb      	ldr	r3, [r7, #24]
 8007afc:	2200      	movs	r2, #0
 8007afe:	2140      	movs	r1, #64	; 0x40
 8007b00:	68f8      	ldr	r0, [r7, #12]
 8007b02:	f000 f831 	bl	8007b68 <I2C_WaitOnFlagUntilTimeout>
 8007b06:	4603      	mov	r3, r0
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d001      	beq.n	8007b10 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8007b0c:	2301      	movs	r3, #1
 8007b0e:	e000      	b.n	8007b12 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8007b10:	2300      	movs	r3, #0
}
 8007b12:	4618      	mov	r0, r3
 8007b14:	3710      	adds	r7, #16
 8007b16:	46bd      	mov	sp, r7
 8007b18:	bd80      	pop	{r7, pc}
 8007b1a:	bf00      	nop
 8007b1c:	80002000 	.word	0x80002000

08007b20 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007b20:	b480      	push	{r7}
 8007b22:	b083      	sub	sp, #12
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	699b      	ldr	r3, [r3, #24]
 8007b2e:	f003 0302 	and.w	r3, r3, #2
 8007b32:	2b02      	cmp	r3, #2
 8007b34:	d103      	bne.n	8007b3e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	699b      	ldr	r3, [r3, #24]
 8007b44:	f003 0301 	and.w	r3, r3, #1
 8007b48:	2b01      	cmp	r3, #1
 8007b4a:	d007      	beq.n	8007b5c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	699a      	ldr	r2, [r3, #24]
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	f042 0201 	orr.w	r2, r2, #1
 8007b5a:	619a      	str	r2, [r3, #24]
  }
}
 8007b5c:	bf00      	nop
 8007b5e:	370c      	adds	r7, #12
 8007b60:	46bd      	mov	sp, r7
 8007b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b66:	4770      	bx	lr

08007b68 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b084      	sub	sp, #16
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	60f8      	str	r0, [r7, #12]
 8007b70:	60b9      	str	r1, [r7, #8]
 8007b72:	603b      	str	r3, [r7, #0]
 8007b74:	4613      	mov	r3, r2
 8007b76:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007b78:	e022      	b.n	8007bc0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b7a:	683b      	ldr	r3, [r7, #0]
 8007b7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b80:	d01e      	beq.n	8007bc0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b82:	f7fe fbef 	bl	8006364 <HAL_GetTick>
 8007b86:	4602      	mov	r2, r0
 8007b88:	69bb      	ldr	r3, [r7, #24]
 8007b8a:	1ad3      	subs	r3, r2, r3
 8007b8c:	683a      	ldr	r2, [r7, #0]
 8007b8e:	429a      	cmp	r2, r3
 8007b90:	d302      	bcc.n	8007b98 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007b92:	683b      	ldr	r3, [r7, #0]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d113      	bne.n	8007bc0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b9c:	f043 0220 	orr.w	r2, r3, #32
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	2220      	movs	r2, #32
 8007ba8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	2200      	movs	r2, #0
 8007bb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8007bbc:	2301      	movs	r3, #1
 8007bbe:	e00f      	b.n	8007be0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	699a      	ldr	r2, [r3, #24]
 8007bc6:	68bb      	ldr	r3, [r7, #8]
 8007bc8:	4013      	ands	r3, r2
 8007bca:	68ba      	ldr	r2, [r7, #8]
 8007bcc:	429a      	cmp	r2, r3
 8007bce:	bf0c      	ite	eq
 8007bd0:	2301      	moveq	r3, #1
 8007bd2:	2300      	movne	r3, #0
 8007bd4:	b2db      	uxtb	r3, r3
 8007bd6:	461a      	mov	r2, r3
 8007bd8:	79fb      	ldrb	r3, [r7, #7]
 8007bda:	429a      	cmp	r2, r3
 8007bdc:	d0cd      	beq.n	8007b7a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007bde:	2300      	movs	r3, #0
}
 8007be0:	4618      	mov	r0, r3
 8007be2:	3710      	adds	r7, #16
 8007be4:	46bd      	mov	sp, r7
 8007be6:	bd80      	pop	{r7, pc}

08007be8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b084      	sub	sp, #16
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	60f8      	str	r0, [r7, #12]
 8007bf0:	60b9      	str	r1, [r7, #8]
 8007bf2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007bf4:	e02c      	b.n	8007c50 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007bf6:	687a      	ldr	r2, [r7, #4]
 8007bf8:	68b9      	ldr	r1, [r7, #8]
 8007bfa:	68f8      	ldr	r0, [r7, #12]
 8007bfc:	f000 f8ea 	bl	8007dd4 <I2C_IsErrorOccurred>
 8007c00:	4603      	mov	r3, r0
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d001      	beq.n	8007c0a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007c06:	2301      	movs	r3, #1
 8007c08:	e02a      	b.n	8007c60 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c0a:	68bb      	ldr	r3, [r7, #8]
 8007c0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c10:	d01e      	beq.n	8007c50 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c12:	f7fe fba7 	bl	8006364 <HAL_GetTick>
 8007c16:	4602      	mov	r2, r0
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	1ad3      	subs	r3, r2, r3
 8007c1c:	68ba      	ldr	r2, [r7, #8]
 8007c1e:	429a      	cmp	r2, r3
 8007c20:	d302      	bcc.n	8007c28 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8007c22:	68bb      	ldr	r3, [r7, #8]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d113      	bne.n	8007c50 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c2c:	f043 0220 	orr.w	r2, r3, #32
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	2220      	movs	r2, #32
 8007c38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	2200      	movs	r2, #0
 8007c40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	2200      	movs	r2, #0
 8007c48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8007c4c:	2301      	movs	r3, #1
 8007c4e:	e007      	b.n	8007c60 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	699b      	ldr	r3, [r3, #24]
 8007c56:	f003 0302 	and.w	r3, r3, #2
 8007c5a:	2b02      	cmp	r3, #2
 8007c5c:	d1cb      	bne.n	8007bf6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007c5e:	2300      	movs	r3, #0
}
 8007c60:	4618      	mov	r0, r3
 8007c62:	3710      	adds	r7, #16
 8007c64:	46bd      	mov	sp, r7
 8007c66:	bd80      	pop	{r7, pc}

08007c68 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b084      	sub	sp, #16
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	60f8      	str	r0, [r7, #12]
 8007c70:	60b9      	str	r1, [r7, #8]
 8007c72:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007c74:	e028      	b.n	8007cc8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007c76:	687a      	ldr	r2, [r7, #4]
 8007c78:	68b9      	ldr	r1, [r7, #8]
 8007c7a:	68f8      	ldr	r0, [r7, #12]
 8007c7c:	f000 f8aa 	bl	8007dd4 <I2C_IsErrorOccurred>
 8007c80:	4603      	mov	r3, r0
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d001      	beq.n	8007c8a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007c86:	2301      	movs	r3, #1
 8007c88:	e026      	b.n	8007cd8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c8a:	f7fe fb6b 	bl	8006364 <HAL_GetTick>
 8007c8e:	4602      	mov	r2, r0
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	1ad3      	subs	r3, r2, r3
 8007c94:	68ba      	ldr	r2, [r7, #8]
 8007c96:	429a      	cmp	r2, r3
 8007c98:	d302      	bcc.n	8007ca0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8007c9a:	68bb      	ldr	r3, [r7, #8]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d113      	bne.n	8007cc8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ca4:	f043 0220 	orr.w	r2, r3, #32
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	2220      	movs	r2, #32
 8007cb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007cc4:	2301      	movs	r3, #1
 8007cc6:	e007      	b.n	8007cd8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	699b      	ldr	r3, [r3, #24]
 8007cce:	f003 0320 	and.w	r3, r3, #32
 8007cd2:	2b20      	cmp	r3, #32
 8007cd4:	d1cf      	bne.n	8007c76 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007cd6:	2300      	movs	r3, #0
}
 8007cd8:	4618      	mov	r0, r3
 8007cda:	3710      	adds	r7, #16
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	bd80      	pop	{r7, pc}

08007ce0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b084      	sub	sp, #16
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	60f8      	str	r0, [r7, #12]
 8007ce8:	60b9      	str	r1, [r7, #8]
 8007cea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007cec:	e064      	b.n	8007db8 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007cee:	687a      	ldr	r2, [r7, #4]
 8007cf0:	68b9      	ldr	r1, [r7, #8]
 8007cf2:	68f8      	ldr	r0, [r7, #12]
 8007cf4:	f000 f86e 	bl	8007dd4 <I2C_IsErrorOccurred>
 8007cf8:	4603      	mov	r3, r0
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d001      	beq.n	8007d02 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007cfe:	2301      	movs	r3, #1
 8007d00:	e062      	b.n	8007dc8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	699b      	ldr	r3, [r3, #24]
 8007d08:	f003 0320 	and.w	r3, r3, #32
 8007d0c:	2b20      	cmp	r3, #32
 8007d0e:	d138      	bne.n	8007d82 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	699b      	ldr	r3, [r3, #24]
 8007d16:	f003 0304 	and.w	r3, r3, #4
 8007d1a:	2b04      	cmp	r3, #4
 8007d1c:	d105      	bne.n	8007d2a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d001      	beq.n	8007d2a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8007d26:	2300      	movs	r3, #0
 8007d28:	e04e      	b.n	8007dc8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	699b      	ldr	r3, [r3, #24]
 8007d30:	f003 0310 	and.w	r3, r3, #16
 8007d34:	2b10      	cmp	r3, #16
 8007d36:	d107      	bne.n	8007d48 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	2210      	movs	r2, #16
 8007d3e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	2204      	movs	r2, #4
 8007d44:	645a      	str	r2, [r3, #68]	; 0x44
 8007d46:	e002      	b.n	8007d4e <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	2220      	movs	r2, #32
 8007d54:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	6859      	ldr	r1, [r3, #4]
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	681a      	ldr	r2, [r3, #0]
 8007d60:	4b1b      	ldr	r3, [pc, #108]	; (8007dd0 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8007d62:	400b      	ands	r3, r1
 8007d64:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	2220      	movs	r2, #32
 8007d6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	2200      	movs	r2, #0
 8007d72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	2200      	movs	r2, #0
 8007d7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8007d7e:	2301      	movs	r3, #1
 8007d80:	e022      	b.n	8007dc8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d82:	f7fe faef 	bl	8006364 <HAL_GetTick>
 8007d86:	4602      	mov	r2, r0
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	1ad3      	subs	r3, r2, r3
 8007d8c:	68ba      	ldr	r2, [r7, #8]
 8007d8e:	429a      	cmp	r2, r3
 8007d90:	d302      	bcc.n	8007d98 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8007d92:	68bb      	ldr	r3, [r7, #8]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d10f      	bne.n	8007db8 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d9c:	f043 0220 	orr.w	r2, r3, #32
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	2220      	movs	r2, #32
 8007da8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	2200      	movs	r2, #0
 8007db0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007db4:	2301      	movs	r3, #1
 8007db6:	e007      	b.n	8007dc8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	699b      	ldr	r3, [r3, #24]
 8007dbe:	f003 0304 	and.w	r3, r3, #4
 8007dc2:	2b04      	cmp	r3, #4
 8007dc4:	d193      	bne.n	8007cee <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007dc6:	2300      	movs	r3, #0
}
 8007dc8:	4618      	mov	r0, r3
 8007dca:	3710      	adds	r7, #16
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	bd80      	pop	{r7, pc}
 8007dd0:	fe00e800 	.word	0xfe00e800

08007dd4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b08a      	sub	sp, #40	; 0x28
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	60f8      	str	r0, [r7, #12]
 8007ddc:	60b9      	str	r1, [r7, #8]
 8007dde:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007de0:	2300      	movs	r3, #0
 8007de2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	699b      	ldr	r3, [r3, #24]
 8007dec:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8007dee:	2300      	movs	r3, #0
 8007df0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8007df6:	69bb      	ldr	r3, [r7, #24]
 8007df8:	f003 0310 	and.w	r3, r3, #16
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d075      	beq.n	8007eec <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	2210      	movs	r2, #16
 8007e06:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007e08:	e056      	b.n	8007eb8 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007e0a:	68bb      	ldr	r3, [r7, #8]
 8007e0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e10:	d052      	beq.n	8007eb8 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007e12:	f7fe faa7 	bl	8006364 <HAL_GetTick>
 8007e16:	4602      	mov	r2, r0
 8007e18:	69fb      	ldr	r3, [r7, #28]
 8007e1a:	1ad3      	subs	r3, r2, r3
 8007e1c:	68ba      	ldr	r2, [r7, #8]
 8007e1e:	429a      	cmp	r2, r3
 8007e20:	d302      	bcc.n	8007e28 <I2C_IsErrorOccurred+0x54>
 8007e22:	68bb      	ldr	r3, [r7, #8]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d147      	bne.n	8007eb8 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	685b      	ldr	r3, [r3, #4]
 8007e2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007e32:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007e3a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	699b      	ldr	r3, [r3, #24]
 8007e42:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007e46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007e4a:	d12e      	bne.n	8007eaa <I2C_IsErrorOccurred+0xd6>
 8007e4c:	697b      	ldr	r3, [r7, #20]
 8007e4e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007e52:	d02a      	beq.n	8007eaa <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8007e54:	7cfb      	ldrb	r3, [r7, #19]
 8007e56:	2b20      	cmp	r3, #32
 8007e58:	d027      	beq.n	8007eaa <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	685a      	ldr	r2, [r3, #4]
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007e68:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8007e6a:	f7fe fa7b 	bl	8006364 <HAL_GetTick>
 8007e6e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007e70:	e01b      	b.n	8007eaa <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8007e72:	f7fe fa77 	bl	8006364 <HAL_GetTick>
 8007e76:	4602      	mov	r2, r0
 8007e78:	69fb      	ldr	r3, [r7, #28]
 8007e7a:	1ad3      	subs	r3, r2, r3
 8007e7c:	2b19      	cmp	r3, #25
 8007e7e:	d914      	bls.n	8007eaa <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e84:	f043 0220 	orr.w	r2, r3, #32
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	2220      	movs	r2, #32
 8007e90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	2200      	movs	r2, #0
 8007e98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8007ea4:	2301      	movs	r3, #1
 8007ea6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	699b      	ldr	r3, [r3, #24]
 8007eb0:	f003 0320 	and.w	r3, r3, #32
 8007eb4:	2b20      	cmp	r3, #32
 8007eb6:	d1dc      	bne.n	8007e72 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	699b      	ldr	r3, [r3, #24]
 8007ebe:	f003 0320 	and.w	r3, r3, #32
 8007ec2:	2b20      	cmp	r3, #32
 8007ec4:	d003      	beq.n	8007ece <I2C_IsErrorOccurred+0xfa>
 8007ec6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d09d      	beq.n	8007e0a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8007ece:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d103      	bne.n	8007ede <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	2220      	movs	r2, #32
 8007edc:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8007ede:	6a3b      	ldr	r3, [r7, #32]
 8007ee0:	f043 0304 	orr.w	r3, r3, #4
 8007ee4:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8007ee6:	2301      	movs	r3, #1
 8007ee8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	699b      	ldr	r3, [r3, #24]
 8007ef2:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8007ef4:	69bb      	ldr	r3, [r7, #24]
 8007ef6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d00b      	beq.n	8007f16 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8007efe:	6a3b      	ldr	r3, [r7, #32]
 8007f00:	f043 0301 	orr.w	r3, r3, #1
 8007f04:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007f0e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007f10:	2301      	movs	r3, #1
 8007f12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8007f16:	69bb      	ldr	r3, [r7, #24]
 8007f18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d00b      	beq.n	8007f38 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8007f20:	6a3b      	ldr	r3, [r7, #32]
 8007f22:	f043 0308 	orr.w	r3, r3, #8
 8007f26:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007f30:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007f32:	2301      	movs	r3, #1
 8007f34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8007f38:	69bb      	ldr	r3, [r7, #24]
 8007f3a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d00b      	beq.n	8007f5a <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8007f42:	6a3b      	ldr	r3, [r7, #32]
 8007f44:	f043 0302 	orr.w	r3, r3, #2
 8007f48:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007f52:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007f54:	2301      	movs	r3, #1
 8007f56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8007f5a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d01c      	beq.n	8007f9c <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007f62:	68f8      	ldr	r0, [r7, #12]
 8007f64:	f7ff fddc 	bl	8007b20 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	6859      	ldr	r1, [r3, #4]
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	681a      	ldr	r2, [r3, #0]
 8007f72:	4b0d      	ldr	r3, [pc, #52]	; (8007fa8 <I2C_IsErrorOccurred+0x1d4>)
 8007f74:	400b      	ands	r3, r1
 8007f76:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007f7c:	6a3b      	ldr	r3, [r7, #32]
 8007f7e:	431a      	orrs	r2, r3
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	2220      	movs	r2, #32
 8007f88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	2200      	movs	r2, #0
 8007f90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	2200      	movs	r2, #0
 8007f98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8007f9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	3728      	adds	r7, #40	; 0x28
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	bd80      	pop	{r7, pc}
 8007fa8:	fe00e800 	.word	0xfe00e800

08007fac <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007fac:	b480      	push	{r7}
 8007fae:	b087      	sub	sp, #28
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	60f8      	str	r0, [r7, #12]
 8007fb4:	607b      	str	r3, [r7, #4]
 8007fb6:	460b      	mov	r3, r1
 8007fb8:	817b      	strh	r3, [r7, #10]
 8007fba:	4613      	mov	r3, r2
 8007fbc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007fbe:	897b      	ldrh	r3, [r7, #10]
 8007fc0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007fc4:	7a7b      	ldrb	r3, [r7, #9]
 8007fc6:	041b      	lsls	r3, r3, #16
 8007fc8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007fcc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007fd2:	6a3b      	ldr	r3, [r7, #32]
 8007fd4:	4313      	orrs	r3, r2
 8007fd6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007fda:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	685a      	ldr	r2, [r3, #4]
 8007fe2:	6a3b      	ldr	r3, [r7, #32]
 8007fe4:	0d5b      	lsrs	r3, r3, #21
 8007fe6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8007fea:	4b08      	ldr	r3, [pc, #32]	; (800800c <I2C_TransferConfig+0x60>)
 8007fec:	430b      	orrs	r3, r1
 8007fee:	43db      	mvns	r3, r3
 8007ff0:	ea02 0103 	and.w	r1, r2, r3
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	697a      	ldr	r2, [r7, #20]
 8007ffa:	430a      	orrs	r2, r1
 8007ffc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8007ffe:	bf00      	nop
 8008000:	371c      	adds	r7, #28
 8008002:	46bd      	mov	sp, r7
 8008004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008008:	4770      	bx	lr
 800800a:	bf00      	nop
 800800c:	03ff63ff 	.word	0x03ff63ff

08008010 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008010:	b480      	push	{r7}
 8008012:	b083      	sub	sp, #12
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
 8008018:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008020:	b2db      	uxtb	r3, r3
 8008022:	2b20      	cmp	r3, #32
 8008024:	d138      	bne.n	8008098 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800802c:	2b01      	cmp	r3, #1
 800802e:	d101      	bne.n	8008034 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008030:	2302      	movs	r3, #2
 8008032:	e032      	b.n	800809a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2201      	movs	r2, #1
 8008038:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2224      	movs	r2, #36	; 0x24
 8008040:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	681a      	ldr	r2, [r3, #0]
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	f022 0201 	bic.w	r2, r2, #1
 8008052:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	681a      	ldr	r2, [r3, #0]
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008062:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	6819      	ldr	r1, [r3, #0]
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	683a      	ldr	r2, [r7, #0]
 8008070:	430a      	orrs	r2, r1
 8008072:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	681a      	ldr	r2, [r3, #0]
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	f042 0201 	orr.w	r2, r2, #1
 8008082:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2220      	movs	r2, #32
 8008088:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2200      	movs	r2, #0
 8008090:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008094:	2300      	movs	r3, #0
 8008096:	e000      	b.n	800809a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008098:	2302      	movs	r3, #2
  }
}
 800809a:	4618      	mov	r0, r3
 800809c:	370c      	adds	r7, #12
 800809e:	46bd      	mov	sp, r7
 80080a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a4:	4770      	bx	lr

080080a6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80080a6:	b480      	push	{r7}
 80080a8:	b085      	sub	sp, #20
 80080aa:	af00      	add	r7, sp, #0
 80080ac:	6078      	str	r0, [r7, #4]
 80080ae:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80080b6:	b2db      	uxtb	r3, r3
 80080b8:	2b20      	cmp	r3, #32
 80080ba:	d139      	bne.n	8008130 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80080c2:	2b01      	cmp	r3, #1
 80080c4:	d101      	bne.n	80080ca <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80080c6:	2302      	movs	r3, #2
 80080c8:	e033      	b.n	8008132 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	2201      	movs	r2, #1
 80080ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	2224      	movs	r2, #36	; 0x24
 80080d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	681a      	ldr	r2, [r3, #0]
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	f022 0201 	bic.w	r2, r2, #1
 80080e8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80080f8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80080fa:	683b      	ldr	r3, [r7, #0]
 80080fc:	021b      	lsls	r3, r3, #8
 80080fe:	68fa      	ldr	r2, [r7, #12]
 8008100:	4313      	orrs	r3, r2
 8008102:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	68fa      	ldr	r2, [r7, #12]
 800810a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	681a      	ldr	r2, [r3, #0]
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	f042 0201 	orr.w	r2, r2, #1
 800811a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2220      	movs	r2, #32
 8008120:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	2200      	movs	r2, #0
 8008128:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800812c:	2300      	movs	r3, #0
 800812e:	e000      	b.n	8008132 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008130:	2302      	movs	r3, #2
  }
}
 8008132:	4618      	mov	r0, r3
 8008134:	3714      	adds	r7, #20
 8008136:	46bd      	mov	sp, r7
 8008138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813c:	4770      	bx	lr
	...

08008140 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8008140:	b480      	push	{r7}
 8008142:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8008144:	4b0d      	ldr	r3, [pc, #52]	; (800817c <HAL_PWREx_GetVoltageRange+0x3c>)
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800814c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008150:	d102      	bne.n	8008158 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8008152:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008156:	e00b      	b.n	8008170 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8008158:	4b08      	ldr	r3, [pc, #32]	; (800817c <HAL_PWREx_GetVoltageRange+0x3c>)
 800815a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800815e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008162:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008166:	d102      	bne.n	800816e <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8008168:	f44f 7300 	mov.w	r3, #512	; 0x200
 800816c:	e000      	b.n	8008170 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800816e:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8008170:	4618      	mov	r0, r3
 8008172:	46bd      	mov	sp, r7
 8008174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008178:	4770      	bx	lr
 800817a:	bf00      	nop
 800817c:	40007000 	.word	0x40007000

08008180 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8008180:	b480      	push	{r7}
 8008182:	b085      	sub	sp, #20
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	2b00      	cmp	r3, #0
 800818c:	d141      	bne.n	8008212 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800818e:	4b4b      	ldr	r3, [pc, #300]	; (80082bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008196:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800819a:	d131      	bne.n	8008200 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800819c:	4b47      	ldr	r3, [pc, #284]	; (80082bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800819e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80081a2:	4a46      	ldr	r2, [pc, #280]	; (80082bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80081a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80081a8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80081ac:	4b43      	ldr	r3, [pc, #268]	; (80082bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80081b4:	4a41      	ldr	r2, [pc, #260]	; (80082bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80081b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80081ba:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80081bc:	4b40      	ldr	r3, [pc, #256]	; (80082c0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	2232      	movs	r2, #50	; 0x32
 80081c2:	fb02 f303 	mul.w	r3, r2, r3
 80081c6:	4a3f      	ldr	r2, [pc, #252]	; (80082c4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80081c8:	fba2 2303 	umull	r2, r3, r2, r3
 80081cc:	0c9b      	lsrs	r3, r3, #18
 80081ce:	3301      	adds	r3, #1
 80081d0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80081d2:	e002      	b.n	80081da <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	3b01      	subs	r3, #1
 80081d8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80081da:	4b38      	ldr	r3, [pc, #224]	; (80082bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80081dc:	695b      	ldr	r3, [r3, #20]
 80081de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80081e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80081e6:	d102      	bne.n	80081ee <HAL_PWREx_ControlVoltageScaling+0x6e>
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d1f2      	bne.n	80081d4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80081ee:	4b33      	ldr	r3, [pc, #204]	; (80082bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80081f0:	695b      	ldr	r3, [r3, #20]
 80081f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80081f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80081fa:	d158      	bne.n	80082ae <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80081fc:	2303      	movs	r3, #3
 80081fe:	e057      	b.n	80082b0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008200:	4b2e      	ldr	r3, [pc, #184]	; (80082bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008202:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008206:	4a2d      	ldr	r2, [pc, #180]	; (80082bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008208:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800820c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8008210:	e04d      	b.n	80082ae <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008218:	d141      	bne.n	800829e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800821a:	4b28      	ldr	r3, [pc, #160]	; (80082bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008222:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008226:	d131      	bne.n	800828c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008228:	4b24      	ldr	r3, [pc, #144]	; (80082bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800822a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800822e:	4a23      	ldr	r2, [pc, #140]	; (80082bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008230:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008234:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008238:	4b20      	ldr	r3, [pc, #128]	; (80082bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8008240:	4a1e      	ldr	r2, [pc, #120]	; (80082bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008242:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008246:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8008248:	4b1d      	ldr	r3, [pc, #116]	; (80082c0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	2232      	movs	r2, #50	; 0x32
 800824e:	fb02 f303 	mul.w	r3, r2, r3
 8008252:	4a1c      	ldr	r2, [pc, #112]	; (80082c4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8008254:	fba2 2303 	umull	r2, r3, r2, r3
 8008258:	0c9b      	lsrs	r3, r3, #18
 800825a:	3301      	adds	r3, #1
 800825c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800825e:	e002      	b.n	8008266 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	3b01      	subs	r3, #1
 8008264:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008266:	4b15      	ldr	r3, [pc, #84]	; (80082bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008268:	695b      	ldr	r3, [r3, #20]
 800826a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800826e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008272:	d102      	bne.n	800827a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d1f2      	bne.n	8008260 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800827a:	4b10      	ldr	r3, [pc, #64]	; (80082bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800827c:	695b      	ldr	r3, [r3, #20]
 800827e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008282:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008286:	d112      	bne.n	80082ae <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8008288:	2303      	movs	r3, #3
 800828a:	e011      	b.n	80082b0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800828c:	4b0b      	ldr	r3, [pc, #44]	; (80082bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800828e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008292:	4a0a      	ldr	r2, [pc, #40]	; (80082bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008294:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008298:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800829c:	e007      	b.n	80082ae <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800829e:	4b07      	ldr	r3, [pc, #28]	; (80082bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80082a6:	4a05      	ldr	r2, [pc, #20]	; (80082bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80082a8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80082ac:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80082ae:	2300      	movs	r3, #0
}
 80082b0:	4618      	mov	r0, r3
 80082b2:	3714      	adds	r7, #20
 80082b4:	46bd      	mov	sp, r7
 80082b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ba:	4770      	bx	lr
 80082bc:	40007000 	.word	0x40007000
 80082c0:	2000003c 	.word	0x2000003c
 80082c4:	431bde83 	.word	0x431bde83

080082c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b088      	sub	sp, #32
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d102      	bne.n	80082dc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80082d6:	2301      	movs	r3, #1
 80082d8:	f000 bc08 	b.w	8008aec <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80082dc:	4b96      	ldr	r3, [pc, #600]	; (8008538 <HAL_RCC_OscConfig+0x270>)
 80082de:	689b      	ldr	r3, [r3, #8]
 80082e0:	f003 030c 	and.w	r3, r3, #12
 80082e4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80082e6:	4b94      	ldr	r3, [pc, #592]	; (8008538 <HAL_RCC_OscConfig+0x270>)
 80082e8:	68db      	ldr	r3, [r3, #12]
 80082ea:	f003 0303 	and.w	r3, r3, #3
 80082ee:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	f003 0310 	and.w	r3, r3, #16
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	f000 80e4 	beq.w	80084c6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80082fe:	69bb      	ldr	r3, [r7, #24]
 8008300:	2b00      	cmp	r3, #0
 8008302:	d007      	beq.n	8008314 <HAL_RCC_OscConfig+0x4c>
 8008304:	69bb      	ldr	r3, [r7, #24]
 8008306:	2b0c      	cmp	r3, #12
 8008308:	f040 808b 	bne.w	8008422 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800830c:	697b      	ldr	r3, [r7, #20]
 800830e:	2b01      	cmp	r3, #1
 8008310:	f040 8087 	bne.w	8008422 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8008314:	4b88      	ldr	r3, [pc, #544]	; (8008538 <HAL_RCC_OscConfig+0x270>)
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	f003 0302 	and.w	r3, r3, #2
 800831c:	2b00      	cmp	r3, #0
 800831e:	d005      	beq.n	800832c <HAL_RCC_OscConfig+0x64>
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	699b      	ldr	r3, [r3, #24]
 8008324:	2b00      	cmp	r3, #0
 8008326:	d101      	bne.n	800832c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8008328:	2301      	movs	r3, #1
 800832a:	e3df      	b.n	8008aec <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	6a1a      	ldr	r2, [r3, #32]
 8008330:	4b81      	ldr	r3, [pc, #516]	; (8008538 <HAL_RCC_OscConfig+0x270>)
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	f003 0308 	and.w	r3, r3, #8
 8008338:	2b00      	cmp	r3, #0
 800833a:	d004      	beq.n	8008346 <HAL_RCC_OscConfig+0x7e>
 800833c:	4b7e      	ldr	r3, [pc, #504]	; (8008538 <HAL_RCC_OscConfig+0x270>)
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008344:	e005      	b.n	8008352 <HAL_RCC_OscConfig+0x8a>
 8008346:	4b7c      	ldr	r3, [pc, #496]	; (8008538 <HAL_RCC_OscConfig+0x270>)
 8008348:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800834c:	091b      	lsrs	r3, r3, #4
 800834e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008352:	4293      	cmp	r3, r2
 8008354:	d223      	bcs.n	800839e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	6a1b      	ldr	r3, [r3, #32]
 800835a:	4618      	mov	r0, r3
 800835c:	f000 fdfe 	bl	8008f5c <RCC_SetFlashLatencyFromMSIRange>
 8008360:	4603      	mov	r3, r0
 8008362:	2b00      	cmp	r3, #0
 8008364:	d001      	beq.n	800836a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8008366:	2301      	movs	r3, #1
 8008368:	e3c0      	b.n	8008aec <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800836a:	4b73      	ldr	r3, [pc, #460]	; (8008538 <HAL_RCC_OscConfig+0x270>)
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	4a72      	ldr	r2, [pc, #456]	; (8008538 <HAL_RCC_OscConfig+0x270>)
 8008370:	f043 0308 	orr.w	r3, r3, #8
 8008374:	6013      	str	r3, [r2, #0]
 8008376:	4b70      	ldr	r3, [pc, #448]	; (8008538 <HAL_RCC_OscConfig+0x270>)
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	6a1b      	ldr	r3, [r3, #32]
 8008382:	496d      	ldr	r1, [pc, #436]	; (8008538 <HAL_RCC_OscConfig+0x270>)
 8008384:	4313      	orrs	r3, r2
 8008386:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008388:	4b6b      	ldr	r3, [pc, #428]	; (8008538 <HAL_RCC_OscConfig+0x270>)
 800838a:	685b      	ldr	r3, [r3, #4]
 800838c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	69db      	ldr	r3, [r3, #28]
 8008394:	021b      	lsls	r3, r3, #8
 8008396:	4968      	ldr	r1, [pc, #416]	; (8008538 <HAL_RCC_OscConfig+0x270>)
 8008398:	4313      	orrs	r3, r2
 800839a:	604b      	str	r3, [r1, #4]
 800839c:	e025      	b.n	80083ea <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800839e:	4b66      	ldr	r3, [pc, #408]	; (8008538 <HAL_RCC_OscConfig+0x270>)
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	4a65      	ldr	r2, [pc, #404]	; (8008538 <HAL_RCC_OscConfig+0x270>)
 80083a4:	f043 0308 	orr.w	r3, r3, #8
 80083a8:	6013      	str	r3, [r2, #0]
 80083aa:	4b63      	ldr	r3, [pc, #396]	; (8008538 <HAL_RCC_OscConfig+0x270>)
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	6a1b      	ldr	r3, [r3, #32]
 80083b6:	4960      	ldr	r1, [pc, #384]	; (8008538 <HAL_RCC_OscConfig+0x270>)
 80083b8:	4313      	orrs	r3, r2
 80083ba:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80083bc:	4b5e      	ldr	r3, [pc, #376]	; (8008538 <HAL_RCC_OscConfig+0x270>)
 80083be:	685b      	ldr	r3, [r3, #4]
 80083c0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	69db      	ldr	r3, [r3, #28]
 80083c8:	021b      	lsls	r3, r3, #8
 80083ca:	495b      	ldr	r1, [pc, #364]	; (8008538 <HAL_RCC_OscConfig+0x270>)
 80083cc:	4313      	orrs	r3, r2
 80083ce:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80083d0:	69bb      	ldr	r3, [r7, #24]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d109      	bne.n	80083ea <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	6a1b      	ldr	r3, [r3, #32]
 80083da:	4618      	mov	r0, r3
 80083dc:	f000 fdbe 	bl	8008f5c <RCC_SetFlashLatencyFromMSIRange>
 80083e0:	4603      	mov	r3, r0
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d001      	beq.n	80083ea <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80083e6:	2301      	movs	r3, #1
 80083e8:	e380      	b.n	8008aec <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80083ea:	f000 fcc1 	bl	8008d70 <HAL_RCC_GetSysClockFreq>
 80083ee:	4602      	mov	r2, r0
 80083f0:	4b51      	ldr	r3, [pc, #324]	; (8008538 <HAL_RCC_OscConfig+0x270>)
 80083f2:	689b      	ldr	r3, [r3, #8]
 80083f4:	091b      	lsrs	r3, r3, #4
 80083f6:	f003 030f 	and.w	r3, r3, #15
 80083fa:	4950      	ldr	r1, [pc, #320]	; (800853c <HAL_RCC_OscConfig+0x274>)
 80083fc:	5ccb      	ldrb	r3, [r1, r3]
 80083fe:	f003 031f 	and.w	r3, r3, #31
 8008402:	fa22 f303 	lsr.w	r3, r2, r3
 8008406:	4a4e      	ldr	r2, [pc, #312]	; (8008540 <HAL_RCC_OscConfig+0x278>)
 8008408:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800840a:	4b4e      	ldr	r3, [pc, #312]	; (8008544 <HAL_RCC_OscConfig+0x27c>)
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	4618      	mov	r0, r3
 8008410:	f7fd fb52 	bl	8005ab8 <HAL_InitTick>
 8008414:	4603      	mov	r3, r0
 8008416:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8008418:	7bfb      	ldrb	r3, [r7, #15]
 800841a:	2b00      	cmp	r3, #0
 800841c:	d052      	beq.n	80084c4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800841e:	7bfb      	ldrb	r3, [r7, #15]
 8008420:	e364      	b.n	8008aec <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	699b      	ldr	r3, [r3, #24]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d032      	beq.n	8008490 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800842a:	4b43      	ldr	r3, [pc, #268]	; (8008538 <HAL_RCC_OscConfig+0x270>)
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	4a42      	ldr	r2, [pc, #264]	; (8008538 <HAL_RCC_OscConfig+0x270>)
 8008430:	f043 0301 	orr.w	r3, r3, #1
 8008434:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8008436:	f7fd ff95 	bl	8006364 <HAL_GetTick>
 800843a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800843c:	e008      	b.n	8008450 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800843e:	f7fd ff91 	bl	8006364 <HAL_GetTick>
 8008442:	4602      	mov	r2, r0
 8008444:	693b      	ldr	r3, [r7, #16]
 8008446:	1ad3      	subs	r3, r2, r3
 8008448:	2b02      	cmp	r3, #2
 800844a:	d901      	bls.n	8008450 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800844c:	2303      	movs	r3, #3
 800844e:	e34d      	b.n	8008aec <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8008450:	4b39      	ldr	r3, [pc, #228]	; (8008538 <HAL_RCC_OscConfig+0x270>)
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	f003 0302 	and.w	r3, r3, #2
 8008458:	2b00      	cmp	r3, #0
 800845a:	d0f0      	beq.n	800843e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800845c:	4b36      	ldr	r3, [pc, #216]	; (8008538 <HAL_RCC_OscConfig+0x270>)
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	4a35      	ldr	r2, [pc, #212]	; (8008538 <HAL_RCC_OscConfig+0x270>)
 8008462:	f043 0308 	orr.w	r3, r3, #8
 8008466:	6013      	str	r3, [r2, #0]
 8008468:	4b33      	ldr	r3, [pc, #204]	; (8008538 <HAL_RCC_OscConfig+0x270>)
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	6a1b      	ldr	r3, [r3, #32]
 8008474:	4930      	ldr	r1, [pc, #192]	; (8008538 <HAL_RCC_OscConfig+0x270>)
 8008476:	4313      	orrs	r3, r2
 8008478:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800847a:	4b2f      	ldr	r3, [pc, #188]	; (8008538 <HAL_RCC_OscConfig+0x270>)
 800847c:	685b      	ldr	r3, [r3, #4]
 800847e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	69db      	ldr	r3, [r3, #28]
 8008486:	021b      	lsls	r3, r3, #8
 8008488:	492b      	ldr	r1, [pc, #172]	; (8008538 <HAL_RCC_OscConfig+0x270>)
 800848a:	4313      	orrs	r3, r2
 800848c:	604b      	str	r3, [r1, #4]
 800848e:	e01a      	b.n	80084c6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8008490:	4b29      	ldr	r3, [pc, #164]	; (8008538 <HAL_RCC_OscConfig+0x270>)
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	4a28      	ldr	r2, [pc, #160]	; (8008538 <HAL_RCC_OscConfig+0x270>)
 8008496:	f023 0301 	bic.w	r3, r3, #1
 800849a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800849c:	f7fd ff62 	bl	8006364 <HAL_GetTick>
 80084a0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80084a2:	e008      	b.n	80084b6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80084a4:	f7fd ff5e 	bl	8006364 <HAL_GetTick>
 80084a8:	4602      	mov	r2, r0
 80084aa:	693b      	ldr	r3, [r7, #16]
 80084ac:	1ad3      	subs	r3, r2, r3
 80084ae:	2b02      	cmp	r3, #2
 80084b0:	d901      	bls.n	80084b6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80084b2:	2303      	movs	r3, #3
 80084b4:	e31a      	b.n	8008aec <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80084b6:	4b20      	ldr	r3, [pc, #128]	; (8008538 <HAL_RCC_OscConfig+0x270>)
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	f003 0302 	and.w	r3, r3, #2
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d1f0      	bne.n	80084a4 <HAL_RCC_OscConfig+0x1dc>
 80084c2:	e000      	b.n	80084c6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80084c4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	f003 0301 	and.w	r3, r3, #1
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d073      	beq.n	80085ba <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80084d2:	69bb      	ldr	r3, [r7, #24]
 80084d4:	2b08      	cmp	r3, #8
 80084d6:	d005      	beq.n	80084e4 <HAL_RCC_OscConfig+0x21c>
 80084d8:	69bb      	ldr	r3, [r7, #24]
 80084da:	2b0c      	cmp	r3, #12
 80084dc:	d10e      	bne.n	80084fc <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80084de:	697b      	ldr	r3, [r7, #20]
 80084e0:	2b03      	cmp	r3, #3
 80084e2:	d10b      	bne.n	80084fc <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80084e4:	4b14      	ldr	r3, [pc, #80]	; (8008538 <HAL_RCC_OscConfig+0x270>)
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d063      	beq.n	80085b8 <HAL_RCC_OscConfig+0x2f0>
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	685b      	ldr	r3, [r3, #4]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d15f      	bne.n	80085b8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80084f8:	2301      	movs	r3, #1
 80084fa:	e2f7      	b.n	8008aec <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	685b      	ldr	r3, [r3, #4]
 8008500:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008504:	d106      	bne.n	8008514 <HAL_RCC_OscConfig+0x24c>
 8008506:	4b0c      	ldr	r3, [pc, #48]	; (8008538 <HAL_RCC_OscConfig+0x270>)
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	4a0b      	ldr	r2, [pc, #44]	; (8008538 <HAL_RCC_OscConfig+0x270>)
 800850c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008510:	6013      	str	r3, [r2, #0]
 8008512:	e025      	b.n	8008560 <HAL_RCC_OscConfig+0x298>
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	685b      	ldr	r3, [r3, #4]
 8008518:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800851c:	d114      	bne.n	8008548 <HAL_RCC_OscConfig+0x280>
 800851e:	4b06      	ldr	r3, [pc, #24]	; (8008538 <HAL_RCC_OscConfig+0x270>)
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	4a05      	ldr	r2, [pc, #20]	; (8008538 <HAL_RCC_OscConfig+0x270>)
 8008524:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008528:	6013      	str	r3, [r2, #0]
 800852a:	4b03      	ldr	r3, [pc, #12]	; (8008538 <HAL_RCC_OscConfig+0x270>)
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	4a02      	ldr	r2, [pc, #8]	; (8008538 <HAL_RCC_OscConfig+0x270>)
 8008530:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008534:	6013      	str	r3, [r2, #0]
 8008536:	e013      	b.n	8008560 <HAL_RCC_OscConfig+0x298>
 8008538:	40021000 	.word	0x40021000
 800853c:	08014a64 	.word	0x08014a64
 8008540:	2000003c 	.word	0x2000003c
 8008544:	20000040 	.word	0x20000040
 8008548:	4ba0      	ldr	r3, [pc, #640]	; (80087cc <HAL_RCC_OscConfig+0x504>)
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	4a9f      	ldr	r2, [pc, #636]	; (80087cc <HAL_RCC_OscConfig+0x504>)
 800854e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008552:	6013      	str	r3, [r2, #0]
 8008554:	4b9d      	ldr	r3, [pc, #628]	; (80087cc <HAL_RCC_OscConfig+0x504>)
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	4a9c      	ldr	r2, [pc, #624]	; (80087cc <HAL_RCC_OscConfig+0x504>)
 800855a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800855e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	685b      	ldr	r3, [r3, #4]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d013      	beq.n	8008590 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008568:	f7fd fefc 	bl	8006364 <HAL_GetTick>
 800856c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800856e:	e008      	b.n	8008582 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008570:	f7fd fef8 	bl	8006364 <HAL_GetTick>
 8008574:	4602      	mov	r2, r0
 8008576:	693b      	ldr	r3, [r7, #16]
 8008578:	1ad3      	subs	r3, r2, r3
 800857a:	2b64      	cmp	r3, #100	; 0x64
 800857c:	d901      	bls.n	8008582 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800857e:	2303      	movs	r3, #3
 8008580:	e2b4      	b.n	8008aec <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008582:	4b92      	ldr	r3, [pc, #584]	; (80087cc <HAL_RCC_OscConfig+0x504>)
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800858a:	2b00      	cmp	r3, #0
 800858c:	d0f0      	beq.n	8008570 <HAL_RCC_OscConfig+0x2a8>
 800858e:	e014      	b.n	80085ba <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008590:	f7fd fee8 	bl	8006364 <HAL_GetTick>
 8008594:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008596:	e008      	b.n	80085aa <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008598:	f7fd fee4 	bl	8006364 <HAL_GetTick>
 800859c:	4602      	mov	r2, r0
 800859e:	693b      	ldr	r3, [r7, #16]
 80085a0:	1ad3      	subs	r3, r2, r3
 80085a2:	2b64      	cmp	r3, #100	; 0x64
 80085a4:	d901      	bls.n	80085aa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80085a6:	2303      	movs	r3, #3
 80085a8:	e2a0      	b.n	8008aec <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80085aa:	4b88      	ldr	r3, [pc, #544]	; (80087cc <HAL_RCC_OscConfig+0x504>)
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d1f0      	bne.n	8008598 <HAL_RCC_OscConfig+0x2d0>
 80085b6:	e000      	b.n	80085ba <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80085b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	f003 0302 	and.w	r3, r3, #2
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d060      	beq.n	8008688 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80085c6:	69bb      	ldr	r3, [r7, #24]
 80085c8:	2b04      	cmp	r3, #4
 80085ca:	d005      	beq.n	80085d8 <HAL_RCC_OscConfig+0x310>
 80085cc:	69bb      	ldr	r3, [r7, #24]
 80085ce:	2b0c      	cmp	r3, #12
 80085d0:	d119      	bne.n	8008606 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80085d2:	697b      	ldr	r3, [r7, #20]
 80085d4:	2b02      	cmp	r3, #2
 80085d6:	d116      	bne.n	8008606 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80085d8:	4b7c      	ldr	r3, [pc, #496]	; (80087cc <HAL_RCC_OscConfig+0x504>)
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d005      	beq.n	80085f0 <HAL_RCC_OscConfig+0x328>
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	68db      	ldr	r3, [r3, #12]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d101      	bne.n	80085f0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80085ec:	2301      	movs	r3, #1
 80085ee:	e27d      	b.n	8008aec <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80085f0:	4b76      	ldr	r3, [pc, #472]	; (80087cc <HAL_RCC_OscConfig+0x504>)
 80085f2:	685b      	ldr	r3, [r3, #4]
 80085f4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	691b      	ldr	r3, [r3, #16]
 80085fc:	061b      	lsls	r3, r3, #24
 80085fe:	4973      	ldr	r1, [pc, #460]	; (80087cc <HAL_RCC_OscConfig+0x504>)
 8008600:	4313      	orrs	r3, r2
 8008602:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008604:	e040      	b.n	8008688 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	68db      	ldr	r3, [r3, #12]
 800860a:	2b00      	cmp	r3, #0
 800860c:	d023      	beq.n	8008656 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800860e:	4b6f      	ldr	r3, [pc, #444]	; (80087cc <HAL_RCC_OscConfig+0x504>)
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	4a6e      	ldr	r2, [pc, #440]	; (80087cc <HAL_RCC_OscConfig+0x504>)
 8008614:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008618:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800861a:	f7fd fea3 	bl	8006364 <HAL_GetTick>
 800861e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008620:	e008      	b.n	8008634 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008622:	f7fd fe9f 	bl	8006364 <HAL_GetTick>
 8008626:	4602      	mov	r2, r0
 8008628:	693b      	ldr	r3, [r7, #16]
 800862a:	1ad3      	subs	r3, r2, r3
 800862c:	2b02      	cmp	r3, #2
 800862e:	d901      	bls.n	8008634 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8008630:	2303      	movs	r3, #3
 8008632:	e25b      	b.n	8008aec <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008634:	4b65      	ldr	r3, [pc, #404]	; (80087cc <HAL_RCC_OscConfig+0x504>)
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800863c:	2b00      	cmp	r3, #0
 800863e:	d0f0      	beq.n	8008622 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008640:	4b62      	ldr	r3, [pc, #392]	; (80087cc <HAL_RCC_OscConfig+0x504>)
 8008642:	685b      	ldr	r3, [r3, #4]
 8008644:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	691b      	ldr	r3, [r3, #16]
 800864c:	061b      	lsls	r3, r3, #24
 800864e:	495f      	ldr	r1, [pc, #380]	; (80087cc <HAL_RCC_OscConfig+0x504>)
 8008650:	4313      	orrs	r3, r2
 8008652:	604b      	str	r3, [r1, #4]
 8008654:	e018      	b.n	8008688 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008656:	4b5d      	ldr	r3, [pc, #372]	; (80087cc <HAL_RCC_OscConfig+0x504>)
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	4a5c      	ldr	r2, [pc, #368]	; (80087cc <HAL_RCC_OscConfig+0x504>)
 800865c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008660:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008662:	f7fd fe7f 	bl	8006364 <HAL_GetTick>
 8008666:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008668:	e008      	b.n	800867c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800866a:	f7fd fe7b 	bl	8006364 <HAL_GetTick>
 800866e:	4602      	mov	r2, r0
 8008670:	693b      	ldr	r3, [r7, #16]
 8008672:	1ad3      	subs	r3, r2, r3
 8008674:	2b02      	cmp	r3, #2
 8008676:	d901      	bls.n	800867c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8008678:	2303      	movs	r3, #3
 800867a:	e237      	b.n	8008aec <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800867c:	4b53      	ldr	r3, [pc, #332]	; (80087cc <HAL_RCC_OscConfig+0x504>)
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008684:	2b00      	cmp	r3, #0
 8008686:	d1f0      	bne.n	800866a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	f003 0308 	and.w	r3, r3, #8
 8008690:	2b00      	cmp	r3, #0
 8008692:	d03c      	beq.n	800870e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	695b      	ldr	r3, [r3, #20]
 8008698:	2b00      	cmp	r3, #0
 800869a:	d01c      	beq.n	80086d6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800869c:	4b4b      	ldr	r3, [pc, #300]	; (80087cc <HAL_RCC_OscConfig+0x504>)
 800869e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80086a2:	4a4a      	ldr	r2, [pc, #296]	; (80087cc <HAL_RCC_OscConfig+0x504>)
 80086a4:	f043 0301 	orr.w	r3, r3, #1
 80086a8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80086ac:	f7fd fe5a 	bl	8006364 <HAL_GetTick>
 80086b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80086b2:	e008      	b.n	80086c6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80086b4:	f7fd fe56 	bl	8006364 <HAL_GetTick>
 80086b8:	4602      	mov	r2, r0
 80086ba:	693b      	ldr	r3, [r7, #16]
 80086bc:	1ad3      	subs	r3, r2, r3
 80086be:	2b02      	cmp	r3, #2
 80086c0:	d901      	bls.n	80086c6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80086c2:	2303      	movs	r3, #3
 80086c4:	e212      	b.n	8008aec <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80086c6:	4b41      	ldr	r3, [pc, #260]	; (80087cc <HAL_RCC_OscConfig+0x504>)
 80086c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80086cc:	f003 0302 	and.w	r3, r3, #2
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d0ef      	beq.n	80086b4 <HAL_RCC_OscConfig+0x3ec>
 80086d4:	e01b      	b.n	800870e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80086d6:	4b3d      	ldr	r3, [pc, #244]	; (80087cc <HAL_RCC_OscConfig+0x504>)
 80086d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80086dc:	4a3b      	ldr	r2, [pc, #236]	; (80087cc <HAL_RCC_OscConfig+0x504>)
 80086de:	f023 0301 	bic.w	r3, r3, #1
 80086e2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80086e6:	f7fd fe3d 	bl	8006364 <HAL_GetTick>
 80086ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80086ec:	e008      	b.n	8008700 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80086ee:	f7fd fe39 	bl	8006364 <HAL_GetTick>
 80086f2:	4602      	mov	r2, r0
 80086f4:	693b      	ldr	r3, [r7, #16]
 80086f6:	1ad3      	subs	r3, r2, r3
 80086f8:	2b02      	cmp	r3, #2
 80086fa:	d901      	bls.n	8008700 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80086fc:	2303      	movs	r3, #3
 80086fe:	e1f5      	b.n	8008aec <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008700:	4b32      	ldr	r3, [pc, #200]	; (80087cc <HAL_RCC_OscConfig+0x504>)
 8008702:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008706:	f003 0302 	and.w	r3, r3, #2
 800870a:	2b00      	cmp	r3, #0
 800870c:	d1ef      	bne.n	80086ee <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	f003 0304 	and.w	r3, r3, #4
 8008716:	2b00      	cmp	r3, #0
 8008718:	f000 80a6 	beq.w	8008868 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800871c:	2300      	movs	r3, #0
 800871e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8008720:	4b2a      	ldr	r3, [pc, #168]	; (80087cc <HAL_RCC_OscConfig+0x504>)
 8008722:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008724:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008728:	2b00      	cmp	r3, #0
 800872a:	d10d      	bne.n	8008748 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800872c:	4b27      	ldr	r3, [pc, #156]	; (80087cc <HAL_RCC_OscConfig+0x504>)
 800872e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008730:	4a26      	ldr	r2, [pc, #152]	; (80087cc <HAL_RCC_OscConfig+0x504>)
 8008732:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008736:	6593      	str	r3, [r2, #88]	; 0x58
 8008738:	4b24      	ldr	r3, [pc, #144]	; (80087cc <HAL_RCC_OscConfig+0x504>)
 800873a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800873c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008740:	60bb      	str	r3, [r7, #8]
 8008742:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008744:	2301      	movs	r3, #1
 8008746:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008748:	4b21      	ldr	r3, [pc, #132]	; (80087d0 <HAL_RCC_OscConfig+0x508>)
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008750:	2b00      	cmp	r3, #0
 8008752:	d118      	bne.n	8008786 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008754:	4b1e      	ldr	r3, [pc, #120]	; (80087d0 <HAL_RCC_OscConfig+0x508>)
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	4a1d      	ldr	r2, [pc, #116]	; (80087d0 <HAL_RCC_OscConfig+0x508>)
 800875a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800875e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008760:	f7fd fe00 	bl	8006364 <HAL_GetTick>
 8008764:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008766:	e008      	b.n	800877a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008768:	f7fd fdfc 	bl	8006364 <HAL_GetTick>
 800876c:	4602      	mov	r2, r0
 800876e:	693b      	ldr	r3, [r7, #16]
 8008770:	1ad3      	subs	r3, r2, r3
 8008772:	2b02      	cmp	r3, #2
 8008774:	d901      	bls.n	800877a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8008776:	2303      	movs	r3, #3
 8008778:	e1b8      	b.n	8008aec <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800877a:	4b15      	ldr	r3, [pc, #84]	; (80087d0 <HAL_RCC_OscConfig+0x508>)
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008782:	2b00      	cmp	r3, #0
 8008784:	d0f0      	beq.n	8008768 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	689b      	ldr	r3, [r3, #8]
 800878a:	2b01      	cmp	r3, #1
 800878c:	d108      	bne.n	80087a0 <HAL_RCC_OscConfig+0x4d8>
 800878e:	4b0f      	ldr	r3, [pc, #60]	; (80087cc <HAL_RCC_OscConfig+0x504>)
 8008790:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008794:	4a0d      	ldr	r2, [pc, #52]	; (80087cc <HAL_RCC_OscConfig+0x504>)
 8008796:	f043 0301 	orr.w	r3, r3, #1
 800879a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800879e:	e029      	b.n	80087f4 <HAL_RCC_OscConfig+0x52c>
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	689b      	ldr	r3, [r3, #8]
 80087a4:	2b05      	cmp	r3, #5
 80087a6:	d115      	bne.n	80087d4 <HAL_RCC_OscConfig+0x50c>
 80087a8:	4b08      	ldr	r3, [pc, #32]	; (80087cc <HAL_RCC_OscConfig+0x504>)
 80087aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80087ae:	4a07      	ldr	r2, [pc, #28]	; (80087cc <HAL_RCC_OscConfig+0x504>)
 80087b0:	f043 0304 	orr.w	r3, r3, #4
 80087b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80087b8:	4b04      	ldr	r3, [pc, #16]	; (80087cc <HAL_RCC_OscConfig+0x504>)
 80087ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80087be:	4a03      	ldr	r2, [pc, #12]	; (80087cc <HAL_RCC_OscConfig+0x504>)
 80087c0:	f043 0301 	orr.w	r3, r3, #1
 80087c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80087c8:	e014      	b.n	80087f4 <HAL_RCC_OscConfig+0x52c>
 80087ca:	bf00      	nop
 80087cc:	40021000 	.word	0x40021000
 80087d0:	40007000 	.word	0x40007000
 80087d4:	4b9d      	ldr	r3, [pc, #628]	; (8008a4c <HAL_RCC_OscConfig+0x784>)
 80087d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80087da:	4a9c      	ldr	r2, [pc, #624]	; (8008a4c <HAL_RCC_OscConfig+0x784>)
 80087dc:	f023 0301 	bic.w	r3, r3, #1
 80087e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80087e4:	4b99      	ldr	r3, [pc, #612]	; (8008a4c <HAL_RCC_OscConfig+0x784>)
 80087e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80087ea:	4a98      	ldr	r2, [pc, #608]	; (8008a4c <HAL_RCC_OscConfig+0x784>)
 80087ec:	f023 0304 	bic.w	r3, r3, #4
 80087f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	689b      	ldr	r3, [r3, #8]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d016      	beq.n	800882a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80087fc:	f7fd fdb2 	bl	8006364 <HAL_GetTick>
 8008800:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008802:	e00a      	b.n	800881a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008804:	f7fd fdae 	bl	8006364 <HAL_GetTick>
 8008808:	4602      	mov	r2, r0
 800880a:	693b      	ldr	r3, [r7, #16]
 800880c:	1ad3      	subs	r3, r2, r3
 800880e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008812:	4293      	cmp	r3, r2
 8008814:	d901      	bls.n	800881a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8008816:	2303      	movs	r3, #3
 8008818:	e168      	b.n	8008aec <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800881a:	4b8c      	ldr	r3, [pc, #560]	; (8008a4c <HAL_RCC_OscConfig+0x784>)
 800881c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008820:	f003 0302 	and.w	r3, r3, #2
 8008824:	2b00      	cmp	r3, #0
 8008826:	d0ed      	beq.n	8008804 <HAL_RCC_OscConfig+0x53c>
 8008828:	e015      	b.n	8008856 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800882a:	f7fd fd9b 	bl	8006364 <HAL_GetTick>
 800882e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008830:	e00a      	b.n	8008848 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008832:	f7fd fd97 	bl	8006364 <HAL_GetTick>
 8008836:	4602      	mov	r2, r0
 8008838:	693b      	ldr	r3, [r7, #16]
 800883a:	1ad3      	subs	r3, r2, r3
 800883c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008840:	4293      	cmp	r3, r2
 8008842:	d901      	bls.n	8008848 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8008844:	2303      	movs	r3, #3
 8008846:	e151      	b.n	8008aec <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008848:	4b80      	ldr	r3, [pc, #512]	; (8008a4c <HAL_RCC_OscConfig+0x784>)
 800884a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800884e:	f003 0302 	and.w	r3, r3, #2
 8008852:	2b00      	cmp	r3, #0
 8008854:	d1ed      	bne.n	8008832 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008856:	7ffb      	ldrb	r3, [r7, #31]
 8008858:	2b01      	cmp	r3, #1
 800885a:	d105      	bne.n	8008868 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800885c:	4b7b      	ldr	r3, [pc, #492]	; (8008a4c <HAL_RCC_OscConfig+0x784>)
 800885e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008860:	4a7a      	ldr	r2, [pc, #488]	; (8008a4c <HAL_RCC_OscConfig+0x784>)
 8008862:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008866:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	f003 0320 	and.w	r3, r3, #32
 8008870:	2b00      	cmp	r3, #0
 8008872:	d03c      	beq.n	80088ee <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008878:	2b00      	cmp	r3, #0
 800887a:	d01c      	beq.n	80088b6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800887c:	4b73      	ldr	r3, [pc, #460]	; (8008a4c <HAL_RCC_OscConfig+0x784>)
 800887e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008882:	4a72      	ldr	r2, [pc, #456]	; (8008a4c <HAL_RCC_OscConfig+0x784>)
 8008884:	f043 0301 	orr.w	r3, r3, #1
 8008888:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800888c:	f7fd fd6a 	bl	8006364 <HAL_GetTick>
 8008890:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008892:	e008      	b.n	80088a6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008894:	f7fd fd66 	bl	8006364 <HAL_GetTick>
 8008898:	4602      	mov	r2, r0
 800889a:	693b      	ldr	r3, [r7, #16]
 800889c:	1ad3      	subs	r3, r2, r3
 800889e:	2b02      	cmp	r3, #2
 80088a0:	d901      	bls.n	80088a6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80088a2:	2303      	movs	r3, #3
 80088a4:	e122      	b.n	8008aec <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80088a6:	4b69      	ldr	r3, [pc, #420]	; (8008a4c <HAL_RCC_OscConfig+0x784>)
 80088a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80088ac:	f003 0302 	and.w	r3, r3, #2
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d0ef      	beq.n	8008894 <HAL_RCC_OscConfig+0x5cc>
 80088b4:	e01b      	b.n	80088ee <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80088b6:	4b65      	ldr	r3, [pc, #404]	; (8008a4c <HAL_RCC_OscConfig+0x784>)
 80088b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80088bc:	4a63      	ldr	r2, [pc, #396]	; (8008a4c <HAL_RCC_OscConfig+0x784>)
 80088be:	f023 0301 	bic.w	r3, r3, #1
 80088c2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80088c6:	f7fd fd4d 	bl	8006364 <HAL_GetTick>
 80088ca:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80088cc:	e008      	b.n	80088e0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80088ce:	f7fd fd49 	bl	8006364 <HAL_GetTick>
 80088d2:	4602      	mov	r2, r0
 80088d4:	693b      	ldr	r3, [r7, #16]
 80088d6:	1ad3      	subs	r3, r2, r3
 80088d8:	2b02      	cmp	r3, #2
 80088da:	d901      	bls.n	80088e0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80088dc:	2303      	movs	r3, #3
 80088de:	e105      	b.n	8008aec <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80088e0:	4b5a      	ldr	r3, [pc, #360]	; (8008a4c <HAL_RCC_OscConfig+0x784>)
 80088e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80088e6:	f003 0302 	and.w	r3, r3, #2
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d1ef      	bne.n	80088ce <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	f000 80f9 	beq.w	8008aea <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088fc:	2b02      	cmp	r3, #2
 80088fe:	f040 80cf 	bne.w	8008aa0 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8008902:	4b52      	ldr	r3, [pc, #328]	; (8008a4c <HAL_RCC_OscConfig+0x784>)
 8008904:	68db      	ldr	r3, [r3, #12]
 8008906:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8008908:	697b      	ldr	r3, [r7, #20]
 800890a:	f003 0203 	and.w	r2, r3, #3
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008912:	429a      	cmp	r2, r3
 8008914:	d12c      	bne.n	8008970 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008916:	697b      	ldr	r3, [r7, #20]
 8008918:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008920:	3b01      	subs	r3, #1
 8008922:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8008924:	429a      	cmp	r2, r3
 8008926:	d123      	bne.n	8008970 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008928:	697b      	ldr	r3, [r7, #20]
 800892a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008932:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008934:	429a      	cmp	r2, r3
 8008936:	d11b      	bne.n	8008970 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008938:	697b      	ldr	r3, [r7, #20]
 800893a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008942:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008944:	429a      	cmp	r2, r3
 8008946:	d113      	bne.n	8008970 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008948:	697b      	ldr	r3, [r7, #20]
 800894a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008952:	085b      	lsrs	r3, r3, #1
 8008954:	3b01      	subs	r3, #1
 8008956:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008958:	429a      	cmp	r2, r3
 800895a:	d109      	bne.n	8008970 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800895c:	697b      	ldr	r3, [r7, #20]
 800895e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008966:	085b      	lsrs	r3, r3, #1
 8008968:	3b01      	subs	r3, #1
 800896a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800896c:	429a      	cmp	r2, r3
 800896e:	d071      	beq.n	8008a54 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8008970:	69bb      	ldr	r3, [r7, #24]
 8008972:	2b0c      	cmp	r3, #12
 8008974:	d068      	beq.n	8008a48 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8008976:	4b35      	ldr	r3, [pc, #212]	; (8008a4c <HAL_RCC_OscConfig+0x784>)
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800897e:	2b00      	cmp	r3, #0
 8008980:	d105      	bne.n	800898e <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8008982:	4b32      	ldr	r3, [pc, #200]	; (8008a4c <HAL_RCC_OscConfig+0x784>)
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800898a:	2b00      	cmp	r3, #0
 800898c:	d001      	beq.n	8008992 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800898e:	2301      	movs	r3, #1
 8008990:	e0ac      	b.n	8008aec <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8008992:	4b2e      	ldr	r3, [pc, #184]	; (8008a4c <HAL_RCC_OscConfig+0x784>)
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	4a2d      	ldr	r2, [pc, #180]	; (8008a4c <HAL_RCC_OscConfig+0x784>)
 8008998:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800899c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800899e:	f7fd fce1 	bl	8006364 <HAL_GetTick>
 80089a2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80089a4:	e008      	b.n	80089b8 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80089a6:	f7fd fcdd 	bl	8006364 <HAL_GetTick>
 80089aa:	4602      	mov	r2, r0
 80089ac:	693b      	ldr	r3, [r7, #16]
 80089ae:	1ad3      	subs	r3, r2, r3
 80089b0:	2b02      	cmp	r3, #2
 80089b2:	d901      	bls.n	80089b8 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80089b4:	2303      	movs	r3, #3
 80089b6:	e099      	b.n	8008aec <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80089b8:	4b24      	ldr	r3, [pc, #144]	; (8008a4c <HAL_RCC_OscConfig+0x784>)
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d1f0      	bne.n	80089a6 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80089c4:	4b21      	ldr	r3, [pc, #132]	; (8008a4c <HAL_RCC_OscConfig+0x784>)
 80089c6:	68da      	ldr	r2, [r3, #12]
 80089c8:	4b21      	ldr	r3, [pc, #132]	; (8008a50 <HAL_RCC_OscConfig+0x788>)
 80089ca:	4013      	ands	r3, r2
 80089cc:	687a      	ldr	r2, [r7, #4]
 80089ce:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80089d0:	687a      	ldr	r2, [r7, #4]
 80089d2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80089d4:	3a01      	subs	r2, #1
 80089d6:	0112      	lsls	r2, r2, #4
 80089d8:	4311      	orrs	r1, r2
 80089da:	687a      	ldr	r2, [r7, #4]
 80089dc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80089de:	0212      	lsls	r2, r2, #8
 80089e0:	4311      	orrs	r1, r2
 80089e2:	687a      	ldr	r2, [r7, #4]
 80089e4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80089e6:	0852      	lsrs	r2, r2, #1
 80089e8:	3a01      	subs	r2, #1
 80089ea:	0552      	lsls	r2, r2, #21
 80089ec:	4311      	orrs	r1, r2
 80089ee:	687a      	ldr	r2, [r7, #4]
 80089f0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80089f2:	0852      	lsrs	r2, r2, #1
 80089f4:	3a01      	subs	r2, #1
 80089f6:	0652      	lsls	r2, r2, #25
 80089f8:	4311      	orrs	r1, r2
 80089fa:	687a      	ldr	r2, [r7, #4]
 80089fc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80089fe:	06d2      	lsls	r2, r2, #27
 8008a00:	430a      	orrs	r2, r1
 8008a02:	4912      	ldr	r1, [pc, #72]	; (8008a4c <HAL_RCC_OscConfig+0x784>)
 8008a04:	4313      	orrs	r3, r2
 8008a06:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8008a08:	4b10      	ldr	r3, [pc, #64]	; (8008a4c <HAL_RCC_OscConfig+0x784>)
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	4a0f      	ldr	r2, [pc, #60]	; (8008a4c <HAL_RCC_OscConfig+0x784>)
 8008a0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008a12:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008a14:	4b0d      	ldr	r3, [pc, #52]	; (8008a4c <HAL_RCC_OscConfig+0x784>)
 8008a16:	68db      	ldr	r3, [r3, #12]
 8008a18:	4a0c      	ldr	r2, [pc, #48]	; (8008a4c <HAL_RCC_OscConfig+0x784>)
 8008a1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008a1e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8008a20:	f7fd fca0 	bl	8006364 <HAL_GetTick>
 8008a24:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008a26:	e008      	b.n	8008a3a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008a28:	f7fd fc9c 	bl	8006364 <HAL_GetTick>
 8008a2c:	4602      	mov	r2, r0
 8008a2e:	693b      	ldr	r3, [r7, #16]
 8008a30:	1ad3      	subs	r3, r2, r3
 8008a32:	2b02      	cmp	r3, #2
 8008a34:	d901      	bls.n	8008a3a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8008a36:	2303      	movs	r3, #3
 8008a38:	e058      	b.n	8008aec <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008a3a:	4b04      	ldr	r3, [pc, #16]	; (8008a4c <HAL_RCC_OscConfig+0x784>)
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d0f0      	beq.n	8008a28 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8008a46:	e050      	b.n	8008aea <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8008a48:	2301      	movs	r3, #1
 8008a4a:	e04f      	b.n	8008aec <HAL_RCC_OscConfig+0x824>
 8008a4c:	40021000 	.word	0x40021000
 8008a50:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008a54:	4b27      	ldr	r3, [pc, #156]	; (8008af4 <HAL_RCC_OscConfig+0x82c>)
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d144      	bne.n	8008aea <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8008a60:	4b24      	ldr	r3, [pc, #144]	; (8008af4 <HAL_RCC_OscConfig+0x82c>)
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	4a23      	ldr	r2, [pc, #140]	; (8008af4 <HAL_RCC_OscConfig+0x82c>)
 8008a66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008a6a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008a6c:	4b21      	ldr	r3, [pc, #132]	; (8008af4 <HAL_RCC_OscConfig+0x82c>)
 8008a6e:	68db      	ldr	r3, [r3, #12]
 8008a70:	4a20      	ldr	r2, [pc, #128]	; (8008af4 <HAL_RCC_OscConfig+0x82c>)
 8008a72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008a76:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008a78:	f7fd fc74 	bl	8006364 <HAL_GetTick>
 8008a7c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008a7e:	e008      	b.n	8008a92 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008a80:	f7fd fc70 	bl	8006364 <HAL_GetTick>
 8008a84:	4602      	mov	r2, r0
 8008a86:	693b      	ldr	r3, [r7, #16]
 8008a88:	1ad3      	subs	r3, r2, r3
 8008a8a:	2b02      	cmp	r3, #2
 8008a8c:	d901      	bls.n	8008a92 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8008a8e:	2303      	movs	r3, #3
 8008a90:	e02c      	b.n	8008aec <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008a92:	4b18      	ldr	r3, [pc, #96]	; (8008af4 <HAL_RCC_OscConfig+0x82c>)
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d0f0      	beq.n	8008a80 <HAL_RCC_OscConfig+0x7b8>
 8008a9e:	e024      	b.n	8008aea <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8008aa0:	69bb      	ldr	r3, [r7, #24]
 8008aa2:	2b0c      	cmp	r3, #12
 8008aa4:	d01f      	beq.n	8008ae6 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008aa6:	4b13      	ldr	r3, [pc, #76]	; (8008af4 <HAL_RCC_OscConfig+0x82c>)
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	4a12      	ldr	r2, [pc, #72]	; (8008af4 <HAL_RCC_OscConfig+0x82c>)
 8008aac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008ab0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ab2:	f7fd fc57 	bl	8006364 <HAL_GetTick>
 8008ab6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008ab8:	e008      	b.n	8008acc <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008aba:	f7fd fc53 	bl	8006364 <HAL_GetTick>
 8008abe:	4602      	mov	r2, r0
 8008ac0:	693b      	ldr	r3, [r7, #16]
 8008ac2:	1ad3      	subs	r3, r2, r3
 8008ac4:	2b02      	cmp	r3, #2
 8008ac6:	d901      	bls.n	8008acc <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8008ac8:	2303      	movs	r3, #3
 8008aca:	e00f      	b.n	8008aec <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008acc:	4b09      	ldr	r3, [pc, #36]	; (8008af4 <HAL_RCC_OscConfig+0x82c>)
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d1f0      	bne.n	8008aba <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8008ad8:	4b06      	ldr	r3, [pc, #24]	; (8008af4 <HAL_RCC_OscConfig+0x82c>)
 8008ada:	68da      	ldr	r2, [r3, #12]
 8008adc:	4905      	ldr	r1, [pc, #20]	; (8008af4 <HAL_RCC_OscConfig+0x82c>)
 8008ade:	4b06      	ldr	r3, [pc, #24]	; (8008af8 <HAL_RCC_OscConfig+0x830>)
 8008ae0:	4013      	ands	r3, r2
 8008ae2:	60cb      	str	r3, [r1, #12]
 8008ae4:	e001      	b.n	8008aea <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8008ae6:	2301      	movs	r3, #1
 8008ae8:	e000      	b.n	8008aec <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8008aea:	2300      	movs	r3, #0
}
 8008aec:	4618      	mov	r0, r3
 8008aee:	3720      	adds	r7, #32
 8008af0:	46bd      	mov	sp, r7
 8008af2:	bd80      	pop	{r7, pc}
 8008af4:	40021000 	.word	0x40021000
 8008af8:	feeefffc 	.word	0xfeeefffc

08008afc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008afc:	b580      	push	{r7, lr}
 8008afe:	b086      	sub	sp, #24
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	6078      	str	r0, [r7, #4]
 8008b04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8008b06:	2300      	movs	r3, #0
 8008b08:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d101      	bne.n	8008b14 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8008b10:	2301      	movs	r3, #1
 8008b12:	e11d      	b.n	8008d50 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008b14:	4b90      	ldr	r3, [pc, #576]	; (8008d58 <HAL_RCC_ClockConfig+0x25c>)
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	f003 030f 	and.w	r3, r3, #15
 8008b1c:	683a      	ldr	r2, [r7, #0]
 8008b1e:	429a      	cmp	r2, r3
 8008b20:	d910      	bls.n	8008b44 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008b22:	4b8d      	ldr	r3, [pc, #564]	; (8008d58 <HAL_RCC_ClockConfig+0x25c>)
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	f023 020f 	bic.w	r2, r3, #15
 8008b2a:	498b      	ldr	r1, [pc, #556]	; (8008d58 <HAL_RCC_ClockConfig+0x25c>)
 8008b2c:	683b      	ldr	r3, [r7, #0]
 8008b2e:	4313      	orrs	r3, r2
 8008b30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008b32:	4b89      	ldr	r3, [pc, #548]	; (8008d58 <HAL_RCC_ClockConfig+0x25c>)
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	f003 030f 	and.w	r3, r3, #15
 8008b3a:	683a      	ldr	r2, [r7, #0]
 8008b3c:	429a      	cmp	r2, r3
 8008b3e:	d001      	beq.n	8008b44 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8008b40:	2301      	movs	r3, #1
 8008b42:	e105      	b.n	8008d50 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	f003 0302 	and.w	r3, r3, #2
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d010      	beq.n	8008b72 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	689a      	ldr	r2, [r3, #8]
 8008b54:	4b81      	ldr	r3, [pc, #516]	; (8008d5c <HAL_RCC_ClockConfig+0x260>)
 8008b56:	689b      	ldr	r3, [r3, #8]
 8008b58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008b5c:	429a      	cmp	r2, r3
 8008b5e:	d908      	bls.n	8008b72 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008b60:	4b7e      	ldr	r3, [pc, #504]	; (8008d5c <HAL_RCC_ClockConfig+0x260>)
 8008b62:	689b      	ldr	r3, [r3, #8]
 8008b64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	689b      	ldr	r3, [r3, #8]
 8008b6c:	497b      	ldr	r1, [pc, #492]	; (8008d5c <HAL_RCC_ClockConfig+0x260>)
 8008b6e:	4313      	orrs	r3, r2
 8008b70:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	f003 0301 	and.w	r3, r3, #1
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d079      	beq.n	8008c72 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	685b      	ldr	r3, [r3, #4]
 8008b82:	2b03      	cmp	r3, #3
 8008b84:	d11e      	bne.n	8008bc4 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008b86:	4b75      	ldr	r3, [pc, #468]	; (8008d5c <HAL_RCC_ClockConfig+0x260>)
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d101      	bne.n	8008b96 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8008b92:	2301      	movs	r3, #1
 8008b94:	e0dc      	b.n	8008d50 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8008b96:	f000 fa3b 	bl	8009010 <RCC_GetSysClockFreqFromPLLSource>
 8008b9a:	4603      	mov	r3, r0
 8008b9c:	4a70      	ldr	r2, [pc, #448]	; (8008d60 <HAL_RCC_ClockConfig+0x264>)
 8008b9e:	4293      	cmp	r3, r2
 8008ba0:	d946      	bls.n	8008c30 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8008ba2:	4b6e      	ldr	r3, [pc, #440]	; (8008d5c <HAL_RCC_ClockConfig+0x260>)
 8008ba4:	689b      	ldr	r3, [r3, #8]
 8008ba6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d140      	bne.n	8008c30 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8008bae:	4b6b      	ldr	r3, [pc, #428]	; (8008d5c <HAL_RCC_ClockConfig+0x260>)
 8008bb0:	689b      	ldr	r3, [r3, #8]
 8008bb2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008bb6:	4a69      	ldr	r2, [pc, #420]	; (8008d5c <HAL_RCC_ClockConfig+0x260>)
 8008bb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008bbc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8008bbe:	2380      	movs	r3, #128	; 0x80
 8008bc0:	617b      	str	r3, [r7, #20]
 8008bc2:	e035      	b.n	8008c30 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	685b      	ldr	r3, [r3, #4]
 8008bc8:	2b02      	cmp	r3, #2
 8008bca:	d107      	bne.n	8008bdc <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008bcc:	4b63      	ldr	r3, [pc, #396]	; (8008d5c <HAL_RCC_ClockConfig+0x260>)
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d115      	bne.n	8008c04 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8008bd8:	2301      	movs	r3, #1
 8008bda:	e0b9      	b.n	8008d50 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	685b      	ldr	r3, [r3, #4]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d107      	bne.n	8008bf4 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8008be4:	4b5d      	ldr	r3, [pc, #372]	; (8008d5c <HAL_RCC_ClockConfig+0x260>)
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	f003 0302 	and.w	r3, r3, #2
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d109      	bne.n	8008c04 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8008bf0:	2301      	movs	r3, #1
 8008bf2:	e0ad      	b.n	8008d50 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008bf4:	4b59      	ldr	r3, [pc, #356]	; (8008d5c <HAL_RCC_ClockConfig+0x260>)
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d101      	bne.n	8008c04 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8008c00:	2301      	movs	r3, #1
 8008c02:	e0a5      	b.n	8008d50 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8008c04:	f000 f8b4 	bl	8008d70 <HAL_RCC_GetSysClockFreq>
 8008c08:	4603      	mov	r3, r0
 8008c0a:	4a55      	ldr	r2, [pc, #340]	; (8008d60 <HAL_RCC_ClockConfig+0x264>)
 8008c0c:	4293      	cmp	r3, r2
 8008c0e:	d90f      	bls.n	8008c30 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8008c10:	4b52      	ldr	r3, [pc, #328]	; (8008d5c <HAL_RCC_ClockConfig+0x260>)
 8008c12:	689b      	ldr	r3, [r3, #8]
 8008c14:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d109      	bne.n	8008c30 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8008c1c:	4b4f      	ldr	r3, [pc, #316]	; (8008d5c <HAL_RCC_ClockConfig+0x260>)
 8008c1e:	689b      	ldr	r3, [r3, #8]
 8008c20:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008c24:	4a4d      	ldr	r2, [pc, #308]	; (8008d5c <HAL_RCC_ClockConfig+0x260>)
 8008c26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c2a:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8008c2c:	2380      	movs	r3, #128	; 0x80
 8008c2e:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008c30:	4b4a      	ldr	r3, [pc, #296]	; (8008d5c <HAL_RCC_ClockConfig+0x260>)
 8008c32:	689b      	ldr	r3, [r3, #8]
 8008c34:	f023 0203 	bic.w	r2, r3, #3
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	685b      	ldr	r3, [r3, #4]
 8008c3c:	4947      	ldr	r1, [pc, #284]	; (8008d5c <HAL_RCC_ClockConfig+0x260>)
 8008c3e:	4313      	orrs	r3, r2
 8008c40:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008c42:	f7fd fb8f 	bl	8006364 <HAL_GetTick>
 8008c46:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008c48:	e00a      	b.n	8008c60 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008c4a:	f7fd fb8b 	bl	8006364 <HAL_GetTick>
 8008c4e:	4602      	mov	r2, r0
 8008c50:	693b      	ldr	r3, [r7, #16]
 8008c52:	1ad3      	subs	r3, r2, r3
 8008c54:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c58:	4293      	cmp	r3, r2
 8008c5a:	d901      	bls.n	8008c60 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8008c5c:	2303      	movs	r3, #3
 8008c5e:	e077      	b.n	8008d50 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008c60:	4b3e      	ldr	r3, [pc, #248]	; (8008d5c <HAL_RCC_ClockConfig+0x260>)
 8008c62:	689b      	ldr	r3, [r3, #8]
 8008c64:	f003 020c 	and.w	r2, r3, #12
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	685b      	ldr	r3, [r3, #4]
 8008c6c:	009b      	lsls	r3, r3, #2
 8008c6e:	429a      	cmp	r2, r3
 8008c70:	d1eb      	bne.n	8008c4a <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8008c72:	697b      	ldr	r3, [r7, #20]
 8008c74:	2b80      	cmp	r3, #128	; 0x80
 8008c76:	d105      	bne.n	8008c84 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8008c78:	4b38      	ldr	r3, [pc, #224]	; (8008d5c <HAL_RCC_ClockConfig+0x260>)
 8008c7a:	689b      	ldr	r3, [r3, #8]
 8008c7c:	4a37      	ldr	r2, [pc, #220]	; (8008d5c <HAL_RCC_ClockConfig+0x260>)
 8008c7e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008c82:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	f003 0302 	and.w	r3, r3, #2
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d010      	beq.n	8008cb2 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	689a      	ldr	r2, [r3, #8]
 8008c94:	4b31      	ldr	r3, [pc, #196]	; (8008d5c <HAL_RCC_ClockConfig+0x260>)
 8008c96:	689b      	ldr	r3, [r3, #8]
 8008c98:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008c9c:	429a      	cmp	r2, r3
 8008c9e:	d208      	bcs.n	8008cb2 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008ca0:	4b2e      	ldr	r3, [pc, #184]	; (8008d5c <HAL_RCC_ClockConfig+0x260>)
 8008ca2:	689b      	ldr	r3, [r3, #8]
 8008ca4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	689b      	ldr	r3, [r3, #8]
 8008cac:	492b      	ldr	r1, [pc, #172]	; (8008d5c <HAL_RCC_ClockConfig+0x260>)
 8008cae:	4313      	orrs	r3, r2
 8008cb0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008cb2:	4b29      	ldr	r3, [pc, #164]	; (8008d58 <HAL_RCC_ClockConfig+0x25c>)
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	f003 030f 	and.w	r3, r3, #15
 8008cba:	683a      	ldr	r2, [r7, #0]
 8008cbc:	429a      	cmp	r2, r3
 8008cbe:	d210      	bcs.n	8008ce2 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008cc0:	4b25      	ldr	r3, [pc, #148]	; (8008d58 <HAL_RCC_ClockConfig+0x25c>)
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	f023 020f 	bic.w	r2, r3, #15
 8008cc8:	4923      	ldr	r1, [pc, #140]	; (8008d58 <HAL_RCC_ClockConfig+0x25c>)
 8008cca:	683b      	ldr	r3, [r7, #0]
 8008ccc:	4313      	orrs	r3, r2
 8008cce:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008cd0:	4b21      	ldr	r3, [pc, #132]	; (8008d58 <HAL_RCC_ClockConfig+0x25c>)
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	f003 030f 	and.w	r3, r3, #15
 8008cd8:	683a      	ldr	r2, [r7, #0]
 8008cda:	429a      	cmp	r2, r3
 8008cdc:	d001      	beq.n	8008ce2 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8008cde:	2301      	movs	r3, #1
 8008ce0:	e036      	b.n	8008d50 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	f003 0304 	and.w	r3, r3, #4
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d008      	beq.n	8008d00 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008cee:	4b1b      	ldr	r3, [pc, #108]	; (8008d5c <HAL_RCC_ClockConfig+0x260>)
 8008cf0:	689b      	ldr	r3, [r3, #8]
 8008cf2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	68db      	ldr	r3, [r3, #12]
 8008cfa:	4918      	ldr	r1, [pc, #96]	; (8008d5c <HAL_RCC_ClockConfig+0x260>)
 8008cfc:	4313      	orrs	r3, r2
 8008cfe:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	f003 0308 	and.w	r3, r3, #8
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d009      	beq.n	8008d20 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008d0c:	4b13      	ldr	r3, [pc, #76]	; (8008d5c <HAL_RCC_ClockConfig+0x260>)
 8008d0e:	689b      	ldr	r3, [r3, #8]
 8008d10:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	691b      	ldr	r3, [r3, #16]
 8008d18:	00db      	lsls	r3, r3, #3
 8008d1a:	4910      	ldr	r1, [pc, #64]	; (8008d5c <HAL_RCC_ClockConfig+0x260>)
 8008d1c:	4313      	orrs	r3, r2
 8008d1e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008d20:	f000 f826 	bl	8008d70 <HAL_RCC_GetSysClockFreq>
 8008d24:	4602      	mov	r2, r0
 8008d26:	4b0d      	ldr	r3, [pc, #52]	; (8008d5c <HAL_RCC_ClockConfig+0x260>)
 8008d28:	689b      	ldr	r3, [r3, #8]
 8008d2a:	091b      	lsrs	r3, r3, #4
 8008d2c:	f003 030f 	and.w	r3, r3, #15
 8008d30:	490c      	ldr	r1, [pc, #48]	; (8008d64 <HAL_RCC_ClockConfig+0x268>)
 8008d32:	5ccb      	ldrb	r3, [r1, r3]
 8008d34:	f003 031f 	and.w	r3, r3, #31
 8008d38:	fa22 f303 	lsr.w	r3, r2, r3
 8008d3c:	4a0a      	ldr	r2, [pc, #40]	; (8008d68 <HAL_RCC_ClockConfig+0x26c>)
 8008d3e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8008d40:	4b0a      	ldr	r3, [pc, #40]	; (8008d6c <HAL_RCC_ClockConfig+0x270>)
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	4618      	mov	r0, r3
 8008d46:	f7fc feb7 	bl	8005ab8 <HAL_InitTick>
 8008d4a:	4603      	mov	r3, r0
 8008d4c:	73fb      	strb	r3, [r7, #15]

  return status;
 8008d4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d50:	4618      	mov	r0, r3
 8008d52:	3718      	adds	r7, #24
 8008d54:	46bd      	mov	sp, r7
 8008d56:	bd80      	pop	{r7, pc}
 8008d58:	40022000 	.word	0x40022000
 8008d5c:	40021000 	.word	0x40021000
 8008d60:	04c4b400 	.word	0x04c4b400
 8008d64:	08014a64 	.word	0x08014a64
 8008d68:	2000003c 	.word	0x2000003c
 8008d6c:	20000040 	.word	0x20000040

08008d70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008d70:	b480      	push	{r7}
 8008d72:	b089      	sub	sp, #36	; 0x24
 8008d74:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8008d76:	2300      	movs	r3, #0
 8008d78:	61fb      	str	r3, [r7, #28]
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008d7e:	4b3e      	ldr	r3, [pc, #248]	; (8008e78 <HAL_RCC_GetSysClockFreq+0x108>)
 8008d80:	689b      	ldr	r3, [r3, #8]
 8008d82:	f003 030c 	and.w	r3, r3, #12
 8008d86:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008d88:	4b3b      	ldr	r3, [pc, #236]	; (8008e78 <HAL_RCC_GetSysClockFreq+0x108>)
 8008d8a:	68db      	ldr	r3, [r3, #12]
 8008d8c:	f003 0303 	and.w	r3, r3, #3
 8008d90:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8008d92:	693b      	ldr	r3, [r7, #16]
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d005      	beq.n	8008da4 <HAL_RCC_GetSysClockFreq+0x34>
 8008d98:	693b      	ldr	r3, [r7, #16]
 8008d9a:	2b0c      	cmp	r3, #12
 8008d9c:	d121      	bne.n	8008de2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	2b01      	cmp	r3, #1
 8008da2:	d11e      	bne.n	8008de2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8008da4:	4b34      	ldr	r3, [pc, #208]	; (8008e78 <HAL_RCC_GetSysClockFreq+0x108>)
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	f003 0308 	and.w	r3, r3, #8
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d107      	bne.n	8008dc0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8008db0:	4b31      	ldr	r3, [pc, #196]	; (8008e78 <HAL_RCC_GetSysClockFreq+0x108>)
 8008db2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008db6:	0a1b      	lsrs	r3, r3, #8
 8008db8:	f003 030f 	and.w	r3, r3, #15
 8008dbc:	61fb      	str	r3, [r7, #28]
 8008dbe:	e005      	b.n	8008dcc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8008dc0:	4b2d      	ldr	r3, [pc, #180]	; (8008e78 <HAL_RCC_GetSysClockFreq+0x108>)
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	091b      	lsrs	r3, r3, #4
 8008dc6:	f003 030f 	and.w	r3, r3, #15
 8008dca:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8008dcc:	4a2b      	ldr	r2, [pc, #172]	; (8008e7c <HAL_RCC_GetSysClockFreq+0x10c>)
 8008dce:	69fb      	ldr	r3, [r7, #28]
 8008dd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008dd4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008dd6:	693b      	ldr	r3, [r7, #16]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d10d      	bne.n	8008df8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8008ddc:	69fb      	ldr	r3, [r7, #28]
 8008dde:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008de0:	e00a      	b.n	8008df8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8008de2:	693b      	ldr	r3, [r7, #16]
 8008de4:	2b04      	cmp	r3, #4
 8008de6:	d102      	bne.n	8008dee <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8008de8:	4b25      	ldr	r3, [pc, #148]	; (8008e80 <HAL_RCC_GetSysClockFreq+0x110>)
 8008dea:	61bb      	str	r3, [r7, #24]
 8008dec:	e004      	b.n	8008df8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8008dee:	693b      	ldr	r3, [r7, #16]
 8008df0:	2b08      	cmp	r3, #8
 8008df2:	d101      	bne.n	8008df8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8008df4:	4b23      	ldr	r3, [pc, #140]	; (8008e84 <HAL_RCC_GetSysClockFreq+0x114>)
 8008df6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8008df8:	693b      	ldr	r3, [r7, #16]
 8008dfa:	2b0c      	cmp	r3, #12
 8008dfc:	d134      	bne.n	8008e68 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008dfe:	4b1e      	ldr	r3, [pc, #120]	; (8008e78 <HAL_RCC_GetSysClockFreq+0x108>)
 8008e00:	68db      	ldr	r3, [r3, #12]
 8008e02:	f003 0303 	and.w	r3, r3, #3
 8008e06:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8008e08:	68bb      	ldr	r3, [r7, #8]
 8008e0a:	2b02      	cmp	r3, #2
 8008e0c:	d003      	beq.n	8008e16 <HAL_RCC_GetSysClockFreq+0xa6>
 8008e0e:	68bb      	ldr	r3, [r7, #8]
 8008e10:	2b03      	cmp	r3, #3
 8008e12:	d003      	beq.n	8008e1c <HAL_RCC_GetSysClockFreq+0xac>
 8008e14:	e005      	b.n	8008e22 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8008e16:	4b1a      	ldr	r3, [pc, #104]	; (8008e80 <HAL_RCC_GetSysClockFreq+0x110>)
 8008e18:	617b      	str	r3, [r7, #20]
      break;
 8008e1a:	e005      	b.n	8008e28 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8008e1c:	4b19      	ldr	r3, [pc, #100]	; (8008e84 <HAL_RCC_GetSysClockFreq+0x114>)
 8008e1e:	617b      	str	r3, [r7, #20]
      break;
 8008e20:	e002      	b.n	8008e28 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8008e22:	69fb      	ldr	r3, [r7, #28]
 8008e24:	617b      	str	r3, [r7, #20]
      break;
 8008e26:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008e28:	4b13      	ldr	r3, [pc, #76]	; (8008e78 <HAL_RCC_GetSysClockFreq+0x108>)
 8008e2a:	68db      	ldr	r3, [r3, #12]
 8008e2c:	091b      	lsrs	r3, r3, #4
 8008e2e:	f003 030f 	and.w	r3, r3, #15
 8008e32:	3301      	adds	r3, #1
 8008e34:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8008e36:	4b10      	ldr	r3, [pc, #64]	; (8008e78 <HAL_RCC_GetSysClockFreq+0x108>)
 8008e38:	68db      	ldr	r3, [r3, #12]
 8008e3a:	0a1b      	lsrs	r3, r3, #8
 8008e3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e40:	697a      	ldr	r2, [r7, #20]
 8008e42:	fb03 f202 	mul.w	r2, r3, r2
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e4c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008e4e:	4b0a      	ldr	r3, [pc, #40]	; (8008e78 <HAL_RCC_GetSysClockFreq+0x108>)
 8008e50:	68db      	ldr	r3, [r3, #12]
 8008e52:	0e5b      	lsrs	r3, r3, #25
 8008e54:	f003 0303 	and.w	r3, r3, #3
 8008e58:	3301      	adds	r3, #1
 8008e5a:	005b      	lsls	r3, r3, #1
 8008e5c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8008e5e:	697a      	ldr	r2, [r7, #20]
 8008e60:	683b      	ldr	r3, [r7, #0]
 8008e62:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e66:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8008e68:	69bb      	ldr	r3, [r7, #24]
}
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	3724      	adds	r7, #36	; 0x24
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e74:	4770      	bx	lr
 8008e76:	bf00      	nop
 8008e78:	40021000 	.word	0x40021000
 8008e7c:	08014a7c 	.word	0x08014a7c
 8008e80:	00f42400 	.word	0x00f42400
 8008e84:	007a1200 	.word	0x007a1200

08008e88 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008e88:	b480      	push	{r7}
 8008e8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008e8c:	4b03      	ldr	r3, [pc, #12]	; (8008e9c <HAL_RCC_GetHCLKFreq+0x14>)
 8008e8e:	681b      	ldr	r3, [r3, #0]
}
 8008e90:	4618      	mov	r0, r3
 8008e92:	46bd      	mov	sp, r7
 8008e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e98:	4770      	bx	lr
 8008e9a:	bf00      	nop
 8008e9c:	2000003c 	.word	0x2000003c

08008ea0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8008ea4:	f7ff fff0 	bl	8008e88 <HAL_RCC_GetHCLKFreq>
 8008ea8:	4602      	mov	r2, r0
 8008eaa:	4b06      	ldr	r3, [pc, #24]	; (8008ec4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008eac:	689b      	ldr	r3, [r3, #8]
 8008eae:	0a1b      	lsrs	r3, r3, #8
 8008eb0:	f003 0307 	and.w	r3, r3, #7
 8008eb4:	4904      	ldr	r1, [pc, #16]	; (8008ec8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008eb6:	5ccb      	ldrb	r3, [r1, r3]
 8008eb8:	f003 031f 	and.w	r3, r3, #31
 8008ebc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	bd80      	pop	{r7, pc}
 8008ec4:	40021000 	.word	0x40021000
 8008ec8:	08014a74 	.word	0x08014a74

08008ecc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8008ed0:	f7ff ffda 	bl	8008e88 <HAL_RCC_GetHCLKFreq>
 8008ed4:	4602      	mov	r2, r0
 8008ed6:	4b06      	ldr	r3, [pc, #24]	; (8008ef0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008ed8:	689b      	ldr	r3, [r3, #8]
 8008eda:	0adb      	lsrs	r3, r3, #11
 8008edc:	f003 0307 	and.w	r3, r3, #7
 8008ee0:	4904      	ldr	r1, [pc, #16]	; (8008ef4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008ee2:	5ccb      	ldrb	r3, [r1, r3]
 8008ee4:	f003 031f 	and.w	r3, r3, #31
 8008ee8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008eec:	4618      	mov	r0, r3
 8008eee:	bd80      	pop	{r7, pc}
 8008ef0:	40021000 	.word	0x40021000
 8008ef4:	08014a74 	.word	0x08014a74

08008ef8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008ef8:	b480      	push	{r7}
 8008efa:	b083      	sub	sp, #12
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	6078      	str	r0, [r7, #4]
 8008f00:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	220f      	movs	r2, #15
 8008f06:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8008f08:	4b12      	ldr	r3, [pc, #72]	; (8008f54 <HAL_RCC_GetClockConfig+0x5c>)
 8008f0a:	689b      	ldr	r3, [r3, #8]
 8008f0c:	f003 0203 	and.w	r2, r3, #3
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8008f14:	4b0f      	ldr	r3, [pc, #60]	; (8008f54 <HAL_RCC_GetClockConfig+0x5c>)
 8008f16:	689b      	ldr	r3, [r3, #8]
 8008f18:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8008f20:	4b0c      	ldr	r3, [pc, #48]	; (8008f54 <HAL_RCC_GetClockConfig+0x5c>)
 8008f22:	689b      	ldr	r3, [r3, #8]
 8008f24:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8008f2c:	4b09      	ldr	r3, [pc, #36]	; (8008f54 <HAL_RCC_GetClockConfig+0x5c>)
 8008f2e:	689b      	ldr	r3, [r3, #8]
 8008f30:	08db      	lsrs	r3, r3, #3
 8008f32:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8008f3a:	4b07      	ldr	r3, [pc, #28]	; (8008f58 <HAL_RCC_GetClockConfig+0x60>)
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	f003 020f 	and.w	r2, r3, #15
 8008f42:	683b      	ldr	r3, [r7, #0]
 8008f44:	601a      	str	r2, [r3, #0]
}
 8008f46:	bf00      	nop
 8008f48:	370c      	adds	r7, #12
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f50:	4770      	bx	lr
 8008f52:	bf00      	nop
 8008f54:	40021000 	.word	0x40021000
 8008f58:	40022000 	.word	0x40022000

08008f5c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	b086      	sub	sp, #24
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8008f64:	2300      	movs	r3, #0
 8008f66:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8008f68:	4b27      	ldr	r3, [pc, #156]	; (8009008 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8008f6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d003      	beq.n	8008f7c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8008f74:	f7ff f8e4 	bl	8008140 <HAL_PWREx_GetVoltageRange>
 8008f78:	6178      	str	r0, [r7, #20]
 8008f7a:	e014      	b.n	8008fa6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8008f7c:	4b22      	ldr	r3, [pc, #136]	; (8009008 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8008f7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f80:	4a21      	ldr	r2, [pc, #132]	; (8009008 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8008f82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008f86:	6593      	str	r3, [r2, #88]	; 0x58
 8008f88:	4b1f      	ldr	r3, [pc, #124]	; (8009008 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8008f8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008f90:	60fb      	str	r3, [r7, #12]
 8008f92:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8008f94:	f7ff f8d4 	bl	8008140 <HAL_PWREx_GetVoltageRange>
 8008f98:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8008f9a:	4b1b      	ldr	r3, [pc, #108]	; (8009008 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8008f9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f9e:	4a1a      	ldr	r2, [pc, #104]	; (8009008 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8008fa0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008fa4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008fa6:	697b      	ldr	r3, [r7, #20]
 8008fa8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008fac:	d10b      	bne.n	8008fc6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	2b80      	cmp	r3, #128	; 0x80
 8008fb2:	d913      	bls.n	8008fdc <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	2ba0      	cmp	r3, #160	; 0xa0
 8008fb8:	d902      	bls.n	8008fc0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8008fba:	2302      	movs	r3, #2
 8008fbc:	613b      	str	r3, [r7, #16]
 8008fbe:	e00d      	b.n	8008fdc <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8008fc0:	2301      	movs	r3, #1
 8008fc2:	613b      	str	r3, [r7, #16]
 8008fc4:	e00a      	b.n	8008fdc <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	2b7f      	cmp	r3, #127	; 0x7f
 8008fca:	d902      	bls.n	8008fd2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8008fcc:	2302      	movs	r3, #2
 8008fce:	613b      	str	r3, [r7, #16]
 8008fd0:	e004      	b.n	8008fdc <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	2b70      	cmp	r3, #112	; 0x70
 8008fd6:	d101      	bne.n	8008fdc <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8008fd8:	2301      	movs	r3, #1
 8008fda:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8008fdc:	4b0b      	ldr	r3, [pc, #44]	; (800900c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	f023 020f 	bic.w	r2, r3, #15
 8008fe4:	4909      	ldr	r1, [pc, #36]	; (800900c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8008fe6:	693b      	ldr	r3, [r7, #16]
 8008fe8:	4313      	orrs	r3, r2
 8008fea:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8008fec:	4b07      	ldr	r3, [pc, #28]	; (800900c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	f003 030f 	and.w	r3, r3, #15
 8008ff4:	693a      	ldr	r2, [r7, #16]
 8008ff6:	429a      	cmp	r2, r3
 8008ff8:	d001      	beq.n	8008ffe <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8008ffa:	2301      	movs	r3, #1
 8008ffc:	e000      	b.n	8009000 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8008ffe:	2300      	movs	r3, #0
}
 8009000:	4618      	mov	r0, r3
 8009002:	3718      	adds	r7, #24
 8009004:	46bd      	mov	sp, r7
 8009006:	bd80      	pop	{r7, pc}
 8009008:	40021000 	.word	0x40021000
 800900c:	40022000 	.word	0x40022000

08009010 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8009010:	b480      	push	{r7}
 8009012:	b087      	sub	sp, #28
 8009014:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8009016:	4b2d      	ldr	r3, [pc, #180]	; (80090cc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8009018:	68db      	ldr	r3, [r3, #12]
 800901a:	f003 0303 	and.w	r3, r3, #3
 800901e:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	2b03      	cmp	r3, #3
 8009024:	d00b      	beq.n	800903e <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	2b03      	cmp	r3, #3
 800902a:	d825      	bhi.n	8009078 <RCC_GetSysClockFreqFromPLLSource+0x68>
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	2b01      	cmp	r3, #1
 8009030:	d008      	beq.n	8009044 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	2b02      	cmp	r3, #2
 8009036:	d11f      	bne.n	8009078 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8009038:	4b25      	ldr	r3, [pc, #148]	; (80090d0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800903a:	613b      	str	r3, [r7, #16]
    break;
 800903c:	e01f      	b.n	800907e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800903e:	4b25      	ldr	r3, [pc, #148]	; (80090d4 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8009040:	613b      	str	r3, [r7, #16]
    break;
 8009042:	e01c      	b.n	800907e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8009044:	4b21      	ldr	r3, [pc, #132]	; (80090cc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	f003 0308 	and.w	r3, r3, #8
 800904c:	2b00      	cmp	r3, #0
 800904e:	d107      	bne.n	8009060 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8009050:	4b1e      	ldr	r3, [pc, #120]	; (80090cc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8009052:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009056:	0a1b      	lsrs	r3, r3, #8
 8009058:	f003 030f 	and.w	r3, r3, #15
 800905c:	617b      	str	r3, [r7, #20]
 800905e:	e005      	b.n	800906c <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8009060:	4b1a      	ldr	r3, [pc, #104]	; (80090cc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	091b      	lsrs	r3, r3, #4
 8009066:	f003 030f 	and.w	r3, r3, #15
 800906a:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 800906c:	4a1a      	ldr	r2, [pc, #104]	; (80090d8 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800906e:	697b      	ldr	r3, [r7, #20]
 8009070:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009074:	613b      	str	r3, [r7, #16]
    break;
 8009076:	e002      	b.n	800907e <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8009078:	2300      	movs	r3, #0
 800907a:	613b      	str	r3, [r7, #16]
    break;
 800907c:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800907e:	4b13      	ldr	r3, [pc, #76]	; (80090cc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8009080:	68db      	ldr	r3, [r3, #12]
 8009082:	091b      	lsrs	r3, r3, #4
 8009084:	f003 030f 	and.w	r3, r3, #15
 8009088:	3301      	adds	r3, #1
 800908a:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800908c:	4b0f      	ldr	r3, [pc, #60]	; (80090cc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800908e:	68db      	ldr	r3, [r3, #12]
 8009090:	0a1b      	lsrs	r3, r3, #8
 8009092:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009096:	693a      	ldr	r2, [r7, #16]
 8009098:	fb03 f202 	mul.w	r2, r3, r2
 800909c:	68bb      	ldr	r3, [r7, #8]
 800909e:	fbb2 f3f3 	udiv	r3, r2, r3
 80090a2:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80090a4:	4b09      	ldr	r3, [pc, #36]	; (80090cc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80090a6:	68db      	ldr	r3, [r3, #12]
 80090a8:	0e5b      	lsrs	r3, r3, #25
 80090aa:	f003 0303 	and.w	r3, r3, #3
 80090ae:	3301      	adds	r3, #1
 80090b0:	005b      	lsls	r3, r3, #1
 80090b2:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80090b4:	693a      	ldr	r2, [r7, #16]
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80090bc:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80090be:	683b      	ldr	r3, [r7, #0]
}
 80090c0:	4618      	mov	r0, r3
 80090c2:	371c      	adds	r7, #28
 80090c4:	46bd      	mov	sp, r7
 80090c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ca:	4770      	bx	lr
 80090cc:	40021000 	.word	0x40021000
 80090d0:	00f42400 	.word	0x00f42400
 80090d4:	007a1200 	.word	0x007a1200
 80090d8:	08014a7c 	.word	0x08014a7c

080090dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80090dc:	b580      	push	{r7, lr}
 80090de:	b086      	sub	sp, #24
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80090e4:	2300      	movs	r3, #0
 80090e6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80090e8:	2300      	movs	r3, #0
 80090ea:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d040      	beq.n	800917a <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80090fc:	2b80      	cmp	r3, #128	; 0x80
 80090fe:	d02a      	beq.n	8009156 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8009100:	2b80      	cmp	r3, #128	; 0x80
 8009102:	d825      	bhi.n	8009150 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8009104:	2b60      	cmp	r3, #96	; 0x60
 8009106:	d026      	beq.n	8009156 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8009108:	2b60      	cmp	r3, #96	; 0x60
 800910a:	d821      	bhi.n	8009150 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800910c:	2b40      	cmp	r3, #64	; 0x40
 800910e:	d006      	beq.n	800911e <HAL_RCCEx_PeriphCLKConfig+0x42>
 8009110:	2b40      	cmp	r3, #64	; 0x40
 8009112:	d81d      	bhi.n	8009150 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8009114:	2b00      	cmp	r3, #0
 8009116:	d009      	beq.n	800912c <HAL_RCCEx_PeriphCLKConfig+0x50>
 8009118:	2b20      	cmp	r3, #32
 800911a:	d010      	beq.n	800913e <HAL_RCCEx_PeriphCLKConfig+0x62>
 800911c:	e018      	b.n	8009150 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800911e:	4b89      	ldr	r3, [pc, #548]	; (8009344 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009120:	68db      	ldr	r3, [r3, #12]
 8009122:	4a88      	ldr	r2, [pc, #544]	; (8009344 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009124:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009128:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800912a:	e015      	b.n	8009158 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	3304      	adds	r3, #4
 8009130:	2100      	movs	r1, #0
 8009132:	4618      	mov	r0, r3
 8009134:	f000 fb02 	bl	800973c <RCCEx_PLLSAI1_Config>
 8009138:	4603      	mov	r3, r0
 800913a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800913c:	e00c      	b.n	8009158 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	3320      	adds	r3, #32
 8009142:	2100      	movs	r1, #0
 8009144:	4618      	mov	r0, r3
 8009146:	f000 fbed 	bl	8009924 <RCCEx_PLLSAI2_Config>
 800914a:	4603      	mov	r3, r0
 800914c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800914e:	e003      	b.n	8009158 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009150:	2301      	movs	r3, #1
 8009152:	74fb      	strb	r3, [r7, #19]
      break;
 8009154:	e000      	b.n	8009158 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8009156:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009158:	7cfb      	ldrb	r3, [r7, #19]
 800915a:	2b00      	cmp	r3, #0
 800915c:	d10b      	bne.n	8009176 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800915e:	4b79      	ldr	r3, [pc, #484]	; (8009344 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009160:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009164:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800916c:	4975      	ldr	r1, [pc, #468]	; (8009344 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800916e:	4313      	orrs	r3, r2
 8009170:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8009174:	e001      	b.n	800917a <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009176:	7cfb      	ldrb	r3, [r7, #19]
 8009178:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009182:	2b00      	cmp	r3, #0
 8009184:	d047      	beq.n	8009216 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800918a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800918e:	d030      	beq.n	80091f2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8009190:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009194:	d82a      	bhi.n	80091ec <HAL_RCCEx_PeriphCLKConfig+0x110>
 8009196:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800919a:	d02a      	beq.n	80091f2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 800919c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80091a0:	d824      	bhi.n	80091ec <HAL_RCCEx_PeriphCLKConfig+0x110>
 80091a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80091a6:	d008      	beq.n	80091ba <HAL_RCCEx_PeriphCLKConfig+0xde>
 80091a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80091ac:	d81e      	bhi.n	80091ec <HAL_RCCEx_PeriphCLKConfig+0x110>
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d00a      	beq.n	80091c8 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80091b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80091b6:	d010      	beq.n	80091da <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80091b8:	e018      	b.n	80091ec <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80091ba:	4b62      	ldr	r3, [pc, #392]	; (8009344 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80091bc:	68db      	ldr	r3, [r3, #12]
 80091be:	4a61      	ldr	r2, [pc, #388]	; (8009344 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80091c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80091c4:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80091c6:	e015      	b.n	80091f4 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	3304      	adds	r3, #4
 80091cc:	2100      	movs	r1, #0
 80091ce:	4618      	mov	r0, r3
 80091d0:	f000 fab4 	bl	800973c <RCCEx_PLLSAI1_Config>
 80091d4:	4603      	mov	r3, r0
 80091d6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80091d8:	e00c      	b.n	80091f4 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	3320      	adds	r3, #32
 80091de:	2100      	movs	r1, #0
 80091e0:	4618      	mov	r0, r3
 80091e2:	f000 fb9f 	bl	8009924 <RCCEx_PLLSAI2_Config>
 80091e6:	4603      	mov	r3, r0
 80091e8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80091ea:	e003      	b.n	80091f4 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80091ec:	2301      	movs	r3, #1
 80091ee:	74fb      	strb	r3, [r7, #19]
      break;
 80091f0:	e000      	b.n	80091f4 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 80091f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80091f4:	7cfb      	ldrb	r3, [r7, #19]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d10b      	bne.n	8009212 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80091fa:	4b52      	ldr	r3, [pc, #328]	; (8009344 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80091fc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009200:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009208:	494e      	ldr	r1, [pc, #312]	; (8009344 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800920a:	4313      	orrs	r3, r2
 800920c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8009210:	e001      	b.n	8009216 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009212:	7cfb      	ldrb	r3, [r7, #19]
 8009214:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800921e:	2b00      	cmp	r3, #0
 8009220:	f000 809f 	beq.w	8009362 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009224:	2300      	movs	r3, #0
 8009226:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8009228:	4b46      	ldr	r3, [pc, #280]	; (8009344 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800922a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800922c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009230:	2b00      	cmp	r3, #0
 8009232:	d101      	bne.n	8009238 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8009234:	2301      	movs	r3, #1
 8009236:	e000      	b.n	800923a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8009238:	2300      	movs	r3, #0
 800923a:	2b00      	cmp	r3, #0
 800923c:	d00d      	beq.n	800925a <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800923e:	4b41      	ldr	r3, [pc, #260]	; (8009344 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009240:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009242:	4a40      	ldr	r2, [pc, #256]	; (8009344 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009244:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009248:	6593      	str	r3, [r2, #88]	; 0x58
 800924a:	4b3e      	ldr	r3, [pc, #248]	; (8009344 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800924c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800924e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009252:	60bb      	str	r3, [r7, #8]
 8009254:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009256:	2301      	movs	r3, #1
 8009258:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800925a:	4b3b      	ldr	r3, [pc, #236]	; (8009348 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	4a3a      	ldr	r2, [pc, #232]	; (8009348 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8009260:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009264:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009266:	f7fd f87d 	bl	8006364 <HAL_GetTick>
 800926a:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800926c:	e009      	b.n	8009282 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800926e:	f7fd f879 	bl	8006364 <HAL_GetTick>
 8009272:	4602      	mov	r2, r0
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	1ad3      	subs	r3, r2, r3
 8009278:	2b02      	cmp	r3, #2
 800927a:	d902      	bls.n	8009282 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 800927c:	2303      	movs	r3, #3
 800927e:	74fb      	strb	r3, [r7, #19]
        break;
 8009280:	e005      	b.n	800928e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8009282:	4b31      	ldr	r3, [pc, #196]	; (8009348 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800928a:	2b00      	cmp	r3, #0
 800928c:	d0ef      	beq.n	800926e <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 800928e:	7cfb      	ldrb	r3, [r7, #19]
 8009290:	2b00      	cmp	r3, #0
 8009292:	d15b      	bne.n	800934c <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8009294:	4b2b      	ldr	r3, [pc, #172]	; (8009344 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009296:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800929a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800929e:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80092a0:	697b      	ldr	r3, [r7, #20]
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d01f      	beq.n	80092e6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80092ac:	697a      	ldr	r2, [r7, #20]
 80092ae:	429a      	cmp	r2, r3
 80092b0:	d019      	beq.n	80092e6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80092b2:	4b24      	ldr	r3, [pc, #144]	; (8009344 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80092b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80092b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80092bc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80092be:	4b21      	ldr	r3, [pc, #132]	; (8009344 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80092c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80092c4:	4a1f      	ldr	r2, [pc, #124]	; (8009344 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80092c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80092ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80092ce:	4b1d      	ldr	r3, [pc, #116]	; (8009344 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80092d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80092d4:	4a1b      	ldr	r2, [pc, #108]	; (8009344 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80092d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80092da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80092de:	4a19      	ldr	r2, [pc, #100]	; (8009344 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80092e0:	697b      	ldr	r3, [r7, #20]
 80092e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80092e6:	697b      	ldr	r3, [r7, #20]
 80092e8:	f003 0301 	and.w	r3, r3, #1
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d016      	beq.n	800931e <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80092f0:	f7fd f838 	bl	8006364 <HAL_GetTick>
 80092f4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80092f6:	e00b      	b.n	8009310 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80092f8:	f7fd f834 	bl	8006364 <HAL_GetTick>
 80092fc:	4602      	mov	r2, r0
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	1ad3      	subs	r3, r2, r3
 8009302:	f241 3288 	movw	r2, #5000	; 0x1388
 8009306:	4293      	cmp	r3, r2
 8009308:	d902      	bls.n	8009310 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800930a:	2303      	movs	r3, #3
 800930c:	74fb      	strb	r3, [r7, #19]
            break;
 800930e:	e006      	b.n	800931e <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009310:	4b0c      	ldr	r3, [pc, #48]	; (8009344 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009312:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009316:	f003 0302 	and.w	r3, r3, #2
 800931a:	2b00      	cmp	r3, #0
 800931c:	d0ec      	beq.n	80092f8 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800931e:	7cfb      	ldrb	r3, [r7, #19]
 8009320:	2b00      	cmp	r3, #0
 8009322:	d10c      	bne.n	800933e <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009324:	4b07      	ldr	r3, [pc, #28]	; (8009344 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009326:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800932a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009334:	4903      	ldr	r1, [pc, #12]	; (8009344 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009336:	4313      	orrs	r3, r2
 8009338:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800933c:	e008      	b.n	8009350 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800933e:	7cfb      	ldrb	r3, [r7, #19]
 8009340:	74bb      	strb	r3, [r7, #18]
 8009342:	e005      	b.n	8009350 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8009344:	40021000 	.word	0x40021000
 8009348:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800934c:	7cfb      	ldrb	r3, [r7, #19]
 800934e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009350:	7c7b      	ldrb	r3, [r7, #17]
 8009352:	2b01      	cmp	r3, #1
 8009354:	d105      	bne.n	8009362 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009356:	4ba0      	ldr	r3, [pc, #640]	; (80095d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009358:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800935a:	4a9f      	ldr	r2, [pc, #636]	; (80095d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800935c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009360:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	f003 0301 	and.w	r3, r3, #1
 800936a:	2b00      	cmp	r3, #0
 800936c:	d00a      	beq.n	8009384 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800936e:	4b9a      	ldr	r3, [pc, #616]	; (80095d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009370:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009374:	f023 0203 	bic.w	r2, r3, #3
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800937c:	4996      	ldr	r1, [pc, #600]	; (80095d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800937e:	4313      	orrs	r3, r2
 8009380:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	f003 0302 	and.w	r3, r3, #2
 800938c:	2b00      	cmp	r3, #0
 800938e:	d00a      	beq.n	80093a6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009390:	4b91      	ldr	r3, [pc, #580]	; (80095d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009392:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009396:	f023 020c 	bic.w	r2, r3, #12
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800939e:	498e      	ldr	r1, [pc, #568]	; (80095d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80093a0:	4313      	orrs	r3, r2
 80093a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	f003 0304 	and.w	r3, r3, #4
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d00a      	beq.n	80093c8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80093b2:	4b89      	ldr	r3, [pc, #548]	; (80095d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80093b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80093b8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093c0:	4985      	ldr	r1, [pc, #532]	; (80095d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80093c2:	4313      	orrs	r3, r2
 80093c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	f003 0308 	and.w	r3, r3, #8
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d00a      	beq.n	80093ea <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80093d4:	4b80      	ldr	r3, [pc, #512]	; (80095d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80093d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80093da:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80093e2:	497d      	ldr	r1, [pc, #500]	; (80095d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80093e4:	4313      	orrs	r3, r2
 80093e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	f003 0310 	and.w	r3, r3, #16
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d00a      	beq.n	800940c <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80093f6:	4b78      	ldr	r3, [pc, #480]	; (80095d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80093f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80093fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009404:	4974      	ldr	r1, [pc, #464]	; (80095d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009406:	4313      	orrs	r3, r2
 8009408:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	f003 0320 	and.w	r3, r3, #32
 8009414:	2b00      	cmp	r3, #0
 8009416:	d00a      	beq.n	800942e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009418:	4b6f      	ldr	r3, [pc, #444]	; (80095d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800941a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800941e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009426:	496c      	ldr	r1, [pc, #432]	; (80095d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009428:	4313      	orrs	r3, r2
 800942a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009436:	2b00      	cmp	r3, #0
 8009438:	d00a      	beq.n	8009450 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800943a:	4b67      	ldr	r3, [pc, #412]	; (80095d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800943c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009440:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009448:	4963      	ldr	r1, [pc, #396]	; (80095d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800944a:	4313      	orrs	r3, r2
 800944c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009458:	2b00      	cmp	r3, #0
 800945a:	d00a      	beq.n	8009472 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800945c:	4b5e      	ldr	r3, [pc, #376]	; (80095d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800945e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009462:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800946a:	495b      	ldr	r1, [pc, #364]	; (80095d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800946c:	4313      	orrs	r3, r2
 800946e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800947a:	2b00      	cmp	r3, #0
 800947c:	d00a      	beq.n	8009494 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800947e:	4b56      	ldr	r3, [pc, #344]	; (80095d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009480:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009484:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800948c:	4952      	ldr	r1, [pc, #328]	; (80095d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800948e:	4313      	orrs	r3, r2
 8009490:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800949c:	2b00      	cmp	r3, #0
 800949e:	d00a      	beq.n	80094b6 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80094a0:	4b4d      	ldr	r3, [pc, #308]	; (80095d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80094a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80094a6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80094ae:	494a      	ldr	r1, [pc, #296]	; (80095d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80094b0:	4313      	orrs	r3, r2
 80094b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d00a      	beq.n	80094d8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80094c2:	4b45      	ldr	r3, [pc, #276]	; (80095d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80094c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80094c8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80094d0:	4941      	ldr	r1, [pc, #260]	; (80095d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80094d2:	4313      	orrs	r3, r2
 80094d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d00a      	beq.n	80094fa <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80094e4:	4b3c      	ldr	r3, [pc, #240]	; (80095d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80094e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80094ea:	f023 0203 	bic.w	r2, r3, #3
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80094f2:	4939      	ldr	r1, [pc, #228]	; (80095d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80094f4:	4313      	orrs	r3, r2
 80094f6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009502:	2b00      	cmp	r3, #0
 8009504:	d028      	beq.n	8009558 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009506:	4b34      	ldr	r3, [pc, #208]	; (80095d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009508:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800950c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009514:	4930      	ldr	r1, [pc, #192]	; (80095d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009516:	4313      	orrs	r3, r2
 8009518:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009520:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009524:	d106      	bne.n	8009534 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009526:	4b2c      	ldr	r3, [pc, #176]	; (80095d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009528:	68db      	ldr	r3, [r3, #12]
 800952a:	4a2b      	ldr	r2, [pc, #172]	; (80095d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800952c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009530:	60d3      	str	r3, [r2, #12]
 8009532:	e011      	b.n	8009558 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009538:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800953c:	d10c      	bne.n	8009558 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	3304      	adds	r3, #4
 8009542:	2101      	movs	r1, #1
 8009544:	4618      	mov	r0, r3
 8009546:	f000 f8f9 	bl	800973c <RCCEx_PLLSAI1_Config>
 800954a:	4603      	mov	r3, r0
 800954c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800954e:	7cfb      	ldrb	r3, [r7, #19]
 8009550:	2b00      	cmp	r3, #0
 8009552:	d001      	beq.n	8009558 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8009554:	7cfb      	ldrb	r3, [r7, #19]
 8009556:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009560:	2b00      	cmp	r3, #0
 8009562:	d04d      	beq.n	8009600 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009568:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800956c:	d108      	bne.n	8009580 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800956e:	4b1a      	ldr	r3, [pc, #104]	; (80095d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009570:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009574:	4a18      	ldr	r2, [pc, #96]	; (80095d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009576:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800957a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800957e:	e012      	b.n	80095a6 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8009580:	4b15      	ldr	r3, [pc, #84]	; (80095d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009582:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009586:	4a14      	ldr	r2, [pc, #80]	; (80095d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009588:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800958c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8009590:	4b11      	ldr	r3, [pc, #68]	; (80095d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009592:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009596:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800959e:	490e      	ldr	r1, [pc, #56]	; (80095d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80095a0:	4313      	orrs	r3, r2
 80095a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80095aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80095ae:	d106      	bne.n	80095be <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80095b0:	4b09      	ldr	r3, [pc, #36]	; (80095d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80095b2:	68db      	ldr	r3, [r3, #12]
 80095b4:	4a08      	ldr	r2, [pc, #32]	; (80095d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80095b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80095ba:	60d3      	str	r3, [r2, #12]
 80095bc:	e020      	b.n	8009600 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80095c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80095c6:	d109      	bne.n	80095dc <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80095c8:	4b03      	ldr	r3, [pc, #12]	; (80095d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80095ca:	68db      	ldr	r3, [r3, #12]
 80095cc:	4a02      	ldr	r2, [pc, #8]	; (80095d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80095ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80095d2:	60d3      	str	r3, [r2, #12]
 80095d4:	e014      	b.n	8009600 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80095d6:	bf00      	nop
 80095d8:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80095e0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80095e4:	d10c      	bne.n	8009600 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	3304      	adds	r3, #4
 80095ea:	2101      	movs	r1, #1
 80095ec:	4618      	mov	r0, r3
 80095ee:	f000 f8a5 	bl	800973c <RCCEx_PLLSAI1_Config>
 80095f2:	4603      	mov	r3, r0
 80095f4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80095f6:	7cfb      	ldrb	r3, [r7, #19]
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d001      	beq.n	8009600 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 80095fc:	7cfb      	ldrb	r3, [r7, #19]
 80095fe:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009608:	2b00      	cmp	r3, #0
 800960a:	d028      	beq.n	800965e <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800960c:	4b4a      	ldr	r3, [pc, #296]	; (8009738 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800960e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009612:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800961a:	4947      	ldr	r1, [pc, #284]	; (8009738 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800961c:	4313      	orrs	r3, r2
 800961e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009626:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800962a:	d106      	bne.n	800963a <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800962c:	4b42      	ldr	r3, [pc, #264]	; (8009738 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800962e:	68db      	ldr	r3, [r3, #12]
 8009630:	4a41      	ldr	r2, [pc, #260]	; (8009738 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009632:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009636:	60d3      	str	r3, [r2, #12]
 8009638:	e011      	b.n	800965e <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800963e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009642:	d10c      	bne.n	800965e <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	3304      	adds	r3, #4
 8009648:	2101      	movs	r1, #1
 800964a:	4618      	mov	r0, r3
 800964c:	f000 f876 	bl	800973c <RCCEx_PLLSAI1_Config>
 8009650:	4603      	mov	r3, r0
 8009652:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8009654:	7cfb      	ldrb	r3, [r7, #19]
 8009656:	2b00      	cmp	r3, #0
 8009658:	d001      	beq.n	800965e <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800965a:	7cfb      	ldrb	r3, [r7, #19]
 800965c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009666:	2b00      	cmp	r3, #0
 8009668:	d01e      	beq.n	80096a8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800966a:	4b33      	ldr	r3, [pc, #204]	; (8009738 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800966c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009670:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800967a:	492f      	ldr	r1, [pc, #188]	; (8009738 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800967c:	4313      	orrs	r3, r2
 800967e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009688:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800968c:	d10c      	bne.n	80096a8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	3304      	adds	r3, #4
 8009692:	2102      	movs	r1, #2
 8009694:	4618      	mov	r0, r3
 8009696:	f000 f851 	bl	800973c <RCCEx_PLLSAI1_Config>
 800969a:	4603      	mov	r3, r0
 800969c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800969e:	7cfb      	ldrb	r3, [r7, #19]
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d001      	beq.n	80096a8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 80096a4:	7cfb      	ldrb	r3, [r7, #19]
 80096a6:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d00b      	beq.n	80096cc <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80096b4:	4b20      	ldr	r3, [pc, #128]	; (8009738 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80096b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80096ba:	f023 0204 	bic.w	r2, r3, #4
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80096c4:	491c      	ldr	r1, [pc, #112]	; (8009738 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80096c6:	4313      	orrs	r3, r2
 80096c8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d00b      	beq.n	80096f0 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80096d8:	4b17      	ldr	r3, [pc, #92]	; (8009738 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80096da:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80096de:	f023 0218 	bic.w	r2, r3, #24
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80096e8:	4913      	ldr	r1, [pc, #76]	; (8009738 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80096ea:	4313      	orrs	r3, r2
 80096ec:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d017      	beq.n	800972c <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80096fc:	4b0e      	ldr	r3, [pc, #56]	; (8009738 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80096fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009702:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800970c:	490a      	ldr	r1, [pc, #40]	; (8009738 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800970e:	4313      	orrs	r3, r2
 8009710:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800971a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800971e:	d105      	bne.n	800972c <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009720:	4b05      	ldr	r3, [pc, #20]	; (8009738 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009722:	68db      	ldr	r3, [r3, #12]
 8009724:	4a04      	ldr	r2, [pc, #16]	; (8009738 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009726:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800972a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800972c:	7cbb      	ldrb	r3, [r7, #18]
}
 800972e:	4618      	mov	r0, r3
 8009730:	3718      	adds	r7, #24
 8009732:	46bd      	mov	sp, r7
 8009734:	bd80      	pop	{r7, pc}
 8009736:	bf00      	nop
 8009738:	40021000 	.word	0x40021000

0800973c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800973c:	b580      	push	{r7, lr}
 800973e:	b084      	sub	sp, #16
 8009740:	af00      	add	r7, sp, #0
 8009742:	6078      	str	r0, [r7, #4]
 8009744:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009746:	2300      	movs	r3, #0
 8009748:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800974a:	4b72      	ldr	r3, [pc, #456]	; (8009914 <RCCEx_PLLSAI1_Config+0x1d8>)
 800974c:	68db      	ldr	r3, [r3, #12]
 800974e:	f003 0303 	and.w	r3, r3, #3
 8009752:	2b00      	cmp	r3, #0
 8009754:	d00e      	beq.n	8009774 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8009756:	4b6f      	ldr	r3, [pc, #444]	; (8009914 <RCCEx_PLLSAI1_Config+0x1d8>)
 8009758:	68db      	ldr	r3, [r3, #12]
 800975a:	f003 0203 	and.w	r2, r3, #3
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	429a      	cmp	r2, r3
 8009764:	d103      	bne.n	800976e <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
       ||
 800976a:	2b00      	cmp	r3, #0
 800976c:	d142      	bne.n	80097f4 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800976e:	2301      	movs	r3, #1
 8009770:	73fb      	strb	r3, [r7, #15]
 8009772:	e03f      	b.n	80097f4 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	2b03      	cmp	r3, #3
 800977a:	d018      	beq.n	80097ae <RCCEx_PLLSAI1_Config+0x72>
 800977c:	2b03      	cmp	r3, #3
 800977e:	d825      	bhi.n	80097cc <RCCEx_PLLSAI1_Config+0x90>
 8009780:	2b01      	cmp	r3, #1
 8009782:	d002      	beq.n	800978a <RCCEx_PLLSAI1_Config+0x4e>
 8009784:	2b02      	cmp	r3, #2
 8009786:	d009      	beq.n	800979c <RCCEx_PLLSAI1_Config+0x60>
 8009788:	e020      	b.n	80097cc <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800978a:	4b62      	ldr	r3, [pc, #392]	; (8009914 <RCCEx_PLLSAI1_Config+0x1d8>)
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	f003 0302 	and.w	r3, r3, #2
 8009792:	2b00      	cmp	r3, #0
 8009794:	d11d      	bne.n	80097d2 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8009796:	2301      	movs	r3, #1
 8009798:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800979a:	e01a      	b.n	80097d2 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800979c:	4b5d      	ldr	r3, [pc, #372]	; (8009914 <RCCEx_PLLSAI1_Config+0x1d8>)
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d116      	bne.n	80097d6 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 80097a8:	2301      	movs	r3, #1
 80097aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80097ac:	e013      	b.n	80097d6 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80097ae:	4b59      	ldr	r3, [pc, #356]	; (8009914 <RCCEx_PLLSAI1_Config+0x1d8>)
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d10f      	bne.n	80097da <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80097ba:	4b56      	ldr	r3, [pc, #344]	; (8009914 <RCCEx_PLLSAI1_Config+0x1d8>)
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d109      	bne.n	80097da <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 80097c6:	2301      	movs	r3, #1
 80097c8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80097ca:	e006      	b.n	80097da <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80097cc:	2301      	movs	r3, #1
 80097ce:	73fb      	strb	r3, [r7, #15]
      break;
 80097d0:	e004      	b.n	80097dc <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80097d2:	bf00      	nop
 80097d4:	e002      	b.n	80097dc <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80097d6:	bf00      	nop
 80097d8:	e000      	b.n	80097dc <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80097da:	bf00      	nop
    }

    if(status == HAL_OK)
 80097dc:	7bfb      	ldrb	r3, [r7, #15]
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d108      	bne.n	80097f4 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80097e2:	4b4c      	ldr	r3, [pc, #304]	; (8009914 <RCCEx_PLLSAI1_Config+0x1d8>)
 80097e4:	68db      	ldr	r3, [r3, #12]
 80097e6:	f023 0203 	bic.w	r2, r3, #3
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	4949      	ldr	r1, [pc, #292]	; (8009914 <RCCEx_PLLSAI1_Config+0x1d8>)
 80097f0:	4313      	orrs	r3, r2
 80097f2:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80097f4:	7bfb      	ldrb	r3, [r7, #15]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	f040 8086 	bne.w	8009908 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80097fc:	4b45      	ldr	r3, [pc, #276]	; (8009914 <RCCEx_PLLSAI1_Config+0x1d8>)
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	4a44      	ldr	r2, [pc, #272]	; (8009914 <RCCEx_PLLSAI1_Config+0x1d8>)
 8009802:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009806:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009808:	f7fc fdac 	bl	8006364 <HAL_GetTick>
 800980c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800980e:	e009      	b.n	8009824 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009810:	f7fc fda8 	bl	8006364 <HAL_GetTick>
 8009814:	4602      	mov	r2, r0
 8009816:	68bb      	ldr	r3, [r7, #8]
 8009818:	1ad3      	subs	r3, r2, r3
 800981a:	2b02      	cmp	r3, #2
 800981c:	d902      	bls.n	8009824 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800981e:	2303      	movs	r3, #3
 8009820:	73fb      	strb	r3, [r7, #15]
        break;
 8009822:	e005      	b.n	8009830 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8009824:	4b3b      	ldr	r3, [pc, #236]	; (8009914 <RCCEx_PLLSAI1_Config+0x1d8>)
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800982c:	2b00      	cmp	r3, #0
 800982e:	d1ef      	bne.n	8009810 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8009830:	7bfb      	ldrb	r3, [r7, #15]
 8009832:	2b00      	cmp	r3, #0
 8009834:	d168      	bne.n	8009908 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8009836:	683b      	ldr	r3, [r7, #0]
 8009838:	2b00      	cmp	r3, #0
 800983a:	d113      	bne.n	8009864 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800983c:	4b35      	ldr	r3, [pc, #212]	; (8009914 <RCCEx_PLLSAI1_Config+0x1d8>)
 800983e:	691a      	ldr	r2, [r3, #16]
 8009840:	4b35      	ldr	r3, [pc, #212]	; (8009918 <RCCEx_PLLSAI1_Config+0x1dc>)
 8009842:	4013      	ands	r3, r2
 8009844:	687a      	ldr	r2, [r7, #4]
 8009846:	6892      	ldr	r2, [r2, #8]
 8009848:	0211      	lsls	r1, r2, #8
 800984a:	687a      	ldr	r2, [r7, #4]
 800984c:	68d2      	ldr	r2, [r2, #12]
 800984e:	06d2      	lsls	r2, r2, #27
 8009850:	4311      	orrs	r1, r2
 8009852:	687a      	ldr	r2, [r7, #4]
 8009854:	6852      	ldr	r2, [r2, #4]
 8009856:	3a01      	subs	r2, #1
 8009858:	0112      	lsls	r2, r2, #4
 800985a:	430a      	orrs	r2, r1
 800985c:	492d      	ldr	r1, [pc, #180]	; (8009914 <RCCEx_PLLSAI1_Config+0x1d8>)
 800985e:	4313      	orrs	r3, r2
 8009860:	610b      	str	r3, [r1, #16]
 8009862:	e02d      	b.n	80098c0 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8009864:	683b      	ldr	r3, [r7, #0]
 8009866:	2b01      	cmp	r3, #1
 8009868:	d115      	bne.n	8009896 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800986a:	4b2a      	ldr	r3, [pc, #168]	; (8009914 <RCCEx_PLLSAI1_Config+0x1d8>)
 800986c:	691a      	ldr	r2, [r3, #16]
 800986e:	4b2b      	ldr	r3, [pc, #172]	; (800991c <RCCEx_PLLSAI1_Config+0x1e0>)
 8009870:	4013      	ands	r3, r2
 8009872:	687a      	ldr	r2, [r7, #4]
 8009874:	6892      	ldr	r2, [r2, #8]
 8009876:	0211      	lsls	r1, r2, #8
 8009878:	687a      	ldr	r2, [r7, #4]
 800987a:	6912      	ldr	r2, [r2, #16]
 800987c:	0852      	lsrs	r2, r2, #1
 800987e:	3a01      	subs	r2, #1
 8009880:	0552      	lsls	r2, r2, #21
 8009882:	4311      	orrs	r1, r2
 8009884:	687a      	ldr	r2, [r7, #4]
 8009886:	6852      	ldr	r2, [r2, #4]
 8009888:	3a01      	subs	r2, #1
 800988a:	0112      	lsls	r2, r2, #4
 800988c:	430a      	orrs	r2, r1
 800988e:	4921      	ldr	r1, [pc, #132]	; (8009914 <RCCEx_PLLSAI1_Config+0x1d8>)
 8009890:	4313      	orrs	r3, r2
 8009892:	610b      	str	r3, [r1, #16]
 8009894:	e014      	b.n	80098c0 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8009896:	4b1f      	ldr	r3, [pc, #124]	; (8009914 <RCCEx_PLLSAI1_Config+0x1d8>)
 8009898:	691a      	ldr	r2, [r3, #16]
 800989a:	4b21      	ldr	r3, [pc, #132]	; (8009920 <RCCEx_PLLSAI1_Config+0x1e4>)
 800989c:	4013      	ands	r3, r2
 800989e:	687a      	ldr	r2, [r7, #4]
 80098a0:	6892      	ldr	r2, [r2, #8]
 80098a2:	0211      	lsls	r1, r2, #8
 80098a4:	687a      	ldr	r2, [r7, #4]
 80098a6:	6952      	ldr	r2, [r2, #20]
 80098a8:	0852      	lsrs	r2, r2, #1
 80098aa:	3a01      	subs	r2, #1
 80098ac:	0652      	lsls	r2, r2, #25
 80098ae:	4311      	orrs	r1, r2
 80098b0:	687a      	ldr	r2, [r7, #4]
 80098b2:	6852      	ldr	r2, [r2, #4]
 80098b4:	3a01      	subs	r2, #1
 80098b6:	0112      	lsls	r2, r2, #4
 80098b8:	430a      	orrs	r2, r1
 80098ba:	4916      	ldr	r1, [pc, #88]	; (8009914 <RCCEx_PLLSAI1_Config+0x1d8>)
 80098bc:	4313      	orrs	r3, r2
 80098be:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80098c0:	4b14      	ldr	r3, [pc, #80]	; (8009914 <RCCEx_PLLSAI1_Config+0x1d8>)
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	4a13      	ldr	r2, [pc, #76]	; (8009914 <RCCEx_PLLSAI1_Config+0x1d8>)
 80098c6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80098ca:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80098cc:	f7fc fd4a 	bl	8006364 <HAL_GetTick>
 80098d0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80098d2:	e009      	b.n	80098e8 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80098d4:	f7fc fd46 	bl	8006364 <HAL_GetTick>
 80098d8:	4602      	mov	r2, r0
 80098da:	68bb      	ldr	r3, [r7, #8]
 80098dc:	1ad3      	subs	r3, r2, r3
 80098de:	2b02      	cmp	r3, #2
 80098e0:	d902      	bls.n	80098e8 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80098e2:	2303      	movs	r3, #3
 80098e4:	73fb      	strb	r3, [r7, #15]
          break;
 80098e6:	e005      	b.n	80098f4 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80098e8:	4b0a      	ldr	r3, [pc, #40]	; (8009914 <RCCEx_PLLSAI1_Config+0x1d8>)
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d0ef      	beq.n	80098d4 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80098f4:	7bfb      	ldrb	r3, [r7, #15]
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d106      	bne.n	8009908 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80098fa:	4b06      	ldr	r3, [pc, #24]	; (8009914 <RCCEx_PLLSAI1_Config+0x1d8>)
 80098fc:	691a      	ldr	r2, [r3, #16]
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	699b      	ldr	r3, [r3, #24]
 8009902:	4904      	ldr	r1, [pc, #16]	; (8009914 <RCCEx_PLLSAI1_Config+0x1d8>)
 8009904:	4313      	orrs	r3, r2
 8009906:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8009908:	7bfb      	ldrb	r3, [r7, #15]
}
 800990a:	4618      	mov	r0, r3
 800990c:	3710      	adds	r7, #16
 800990e:	46bd      	mov	sp, r7
 8009910:	bd80      	pop	{r7, pc}
 8009912:	bf00      	nop
 8009914:	40021000 	.word	0x40021000
 8009918:	07ff800f 	.word	0x07ff800f
 800991c:	ff9f800f 	.word	0xff9f800f
 8009920:	f9ff800f 	.word	0xf9ff800f

08009924 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8009924:	b580      	push	{r7, lr}
 8009926:	b084      	sub	sp, #16
 8009928:	af00      	add	r7, sp, #0
 800992a:	6078      	str	r0, [r7, #4]
 800992c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800992e:	2300      	movs	r3, #0
 8009930:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8009932:	4b72      	ldr	r3, [pc, #456]	; (8009afc <RCCEx_PLLSAI2_Config+0x1d8>)
 8009934:	68db      	ldr	r3, [r3, #12]
 8009936:	f003 0303 	and.w	r3, r3, #3
 800993a:	2b00      	cmp	r3, #0
 800993c:	d00e      	beq.n	800995c <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800993e:	4b6f      	ldr	r3, [pc, #444]	; (8009afc <RCCEx_PLLSAI2_Config+0x1d8>)
 8009940:	68db      	ldr	r3, [r3, #12]
 8009942:	f003 0203 	and.w	r2, r3, #3
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	429a      	cmp	r2, r3
 800994c:	d103      	bne.n	8009956 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
       ||
 8009952:	2b00      	cmp	r3, #0
 8009954:	d142      	bne.n	80099dc <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8009956:	2301      	movs	r3, #1
 8009958:	73fb      	strb	r3, [r7, #15]
 800995a:	e03f      	b.n	80099dc <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	2b03      	cmp	r3, #3
 8009962:	d018      	beq.n	8009996 <RCCEx_PLLSAI2_Config+0x72>
 8009964:	2b03      	cmp	r3, #3
 8009966:	d825      	bhi.n	80099b4 <RCCEx_PLLSAI2_Config+0x90>
 8009968:	2b01      	cmp	r3, #1
 800996a:	d002      	beq.n	8009972 <RCCEx_PLLSAI2_Config+0x4e>
 800996c:	2b02      	cmp	r3, #2
 800996e:	d009      	beq.n	8009984 <RCCEx_PLLSAI2_Config+0x60>
 8009970:	e020      	b.n	80099b4 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8009972:	4b62      	ldr	r3, [pc, #392]	; (8009afc <RCCEx_PLLSAI2_Config+0x1d8>)
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	f003 0302 	and.w	r3, r3, #2
 800997a:	2b00      	cmp	r3, #0
 800997c:	d11d      	bne.n	80099ba <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 800997e:	2301      	movs	r3, #1
 8009980:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009982:	e01a      	b.n	80099ba <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8009984:	4b5d      	ldr	r3, [pc, #372]	; (8009afc <RCCEx_PLLSAI2_Config+0x1d8>)
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800998c:	2b00      	cmp	r3, #0
 800998e:	d116      	bne.n	80099be <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8009990:	2301      	movs	r3, #1
 8009992:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009994:	e013      	b.n	80099be <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8009996:	4b59      	ldr	r3, [pc, #356]	; (8009afc <RCCEx_PLLSAI2_Config+0x1d8>)
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d10f      	bne.n	80099c2 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80099a2:	4b56      	ldr	r3, [pc, #344]	; (8009afc <RCCEx_PLLSAI2_Config+0x1d8>)
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d109      	bne.n	80099c2 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 80099ae:	2301      	movs	r3, #1
 80099b0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80099b2:	e006      	b.n	80099c2 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 80099b4:	2301      	movs	r3, #1
 80099b6:	73fb      	strb	r3, [r7, #15]
      break;
 80099b8:	e004      	b.n	80099c4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80099ba:	bf00      	nop
 80099bc:	e002      	b.n	80099c4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80099be:	bf00      	nop
 80099c0:	e000      	b.n	80099c4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80099c2:	bf00      	nop
    }

    if(status == HAL_OK)
 80099c4:	7bfb      	ldrb	r3, [r7, #15]
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d108      	bne.n	80099dc <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80099ca:	4b4c      	ldr	r3, [pc, #304]	; (8009afc <RCCEx_PLLSAI2_Config+0x1d8>)
 80099cc:	68db      	ldr	r3, [r3, #12]
 80099ce:	f023 0203 	bic.w	r2, r3, #3
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	4949      	ldr	r1, [pc, #292]	; (8009afc <RCCEx_PLLSAI2_Config+0x1d8>)
 80099d8:	4313      	orrs	r3, r2
 80099da:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80099dc:	7bfb      	ldrb	r3, [r7, #15]
 80099de:	2b00      	cmp	r3, #0
 80099e0:	f040 8086 	bne.w	8009af0 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80099e4:	4b45      	ldr	r3, [pc, #276]	; (8009afc <RCCEx_PLLSAI2_Config+0x1d8>)
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	4a44      	ldr	r2, [pc, #272]	; (8009afc <RCCEx_PLLSAI2_Config+0x1d8>)
 80099ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80099ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80099f0:	f7fc fcb8 	bl	8006364 <HAL_GetTick>
 80099f4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80099f6:	e009      	b.n	8009a0c <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80099f8:	f7fc fcb4 	bl	8006364 <HAL_GetTick>
 80099fc:	4602      	mov	r2, r0
 80099fe:	68bb      	ldr	r3, [r7, #8]
 8009a00:	1ad3      	subs	r3, r2, r3
 8009a02:	2b02      	cmp	r3, #2
 8009a04:	d902      	bls.n	8009a0c <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8009a06:	2303      	movs	r3, #3
 8009a08:	73fb      	strb	r3, [r7, #15]
        break;
 8009a0a:	e005      	b.n	8009a18 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8009a0c:	4b3b      	ldr	r3, [pc, #236]	; (8009afc <RCCEx_PLLSAI2_Config+0x1d8>)
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d1ef      	bne.n	80099f8 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8009a18:	7bfb      	ldrb	r3, [r7, #15]
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d168      	bne.n	8009af0 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8009a1e:	683b      	ldr	r3, [r7, #0]
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d113      	bne.n	8009a4c <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8009a24:	4b35      	ldr	r3, [pc, #212]	; (8009afc <RCCEx_PLLSAI2_Config+0x1d8>)
 8009a26:	695a      	ldr	r2, [r3, #20]
 8009a28:	4b35      	ldr	r3, [pc, #212]	; (8009b00 <RCCEx_PLLSAI2_Config+0x1dc>)
 8009a2a:	4013      	ands	r3, r2
 8009a2c:	687a      	ldr	r2, [r7, #4]
 8009a2e:	6892      	ldr	r2, [r2, #8]
 8009a30:	0211      	lsls	r1, r2, #8
 8009a32:	687a      	ldr	r2, [r7, #4]
 8009a34:	68d2      	ldr	r2, [r2, #12]
 8009a36:	06d2      	lsls	r2, r2, #27
 8009a38:	4311      	orrs	r1, r2
 8009a3a:	687a      	ldr	r2, [r7, #4]
 8009a3c:	6852      	ldr	r2, [r2, #4]
 8009a3e:	3a01      	subs	r2, #1
 8009a40:	0112      	lsls	r2, r2, #4
 8009a42:	430a      	orrs	r2, r1
 8009a44:	492d      	ldr	r1, [pc, #180]	; (8009afc <RCCEx_PLLSAI2_Config+0x1d8>)
 8009a46:	4313      	orrs	r3, r2
 8009a48:	614b      	str	r3, [r1, #20]
 8009a4a:	e02d      	b.n	8009aa8 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8009a4c:	683b      	ldr	r3, [r7, #0]
 8009a4e:	2b01      	cmp	r3, #1
 8009a50:	d115      	bne.n	8009a7e <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8009a52:	4b2a      	ldr	r3, [pc, #168]	; (8009afc <RCCEx_PLLSAI2_Config+0x1d8>)
 8009a54:	695a      	ldr	r2, [r3, #20]
 8009a56:	4b2b      	ldr	r3, [pc, #172]	; (8009b04 <RCCEx_PLLSAI2_Config+0x1e0>)
 8009a58:	4013      	ands	r3, r2
 8009a5a:	687a      	ldr	r2, [r7, #4]
 8009a5c:	6892      	ldr	r2, [r2, #8]
 8009a5e:	0211      	lsls	r1, r2, #8
 8009a60:	687a      	ldr	r2, [r7, #4]
 8009a62:	6912      	ldr	r2, [r2, #16]
 8009a64:	0852      	lsrs	r2, r2, #1
 8009a66:	3a01      	subs	r2, #1
 8009a68:	0552      	lsls	r2, r2, #21
 8009a6a:	4311      	orrs	r1, r2
 8009a6c:	687a      	ldr	r2, [r7, #4]
 8009a6e:	6852      	ldr	r2, [r2, #4]
 8009a70:	3a01      	subs	r2, #1
 8009a72:	0112      	lsls	r2, r2, #4
 8009a74:	430a      	orrs	r2, r1
 8009a76:	4921      	ldr	r1, [pc, #132]	; (8009afc <RCCEx_PLLSAI2_Config+0x1d8>)
 8009a78:	4313      	orrs	r3, r2
 8009a7a:	614b      	str	r3, [r1, #20]
 8009a7c:	e014      	b.n	8009aa8 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8009a7e:	4b1f      	ldr	r3, [pc, #124]	; (8009afc <RCCEx_PLLSAI2_Config+0x1d8>)
 8009a80:	695a      	ldr	r2, [r3, #20]
 8009a82:	4b21      	ldr	r3, [pc, #132]	; (8009b08 <RCCEx_PLLSAI2_Config+0x1e4>)
 8009a84:	4013      	ands	r3, r2
 8009a86:	687a      	ldr	r2, [r7, #4]
 8009a88:	6892      	ldr	r2, [r2, #8]
 8009a8a:	0211      	lsls	r1, r2, #8
 8009a8c:	687a      	ldr	r2, [r7, #4]
 8009a8e:	6952      	ldr	r2, [r2, #20]
 8009a90:	0852      	lsrs	r2, r2, #1
 8009a92:	3a01      	subs	r2, #1
 8009a94:	0652      	lsls	r2, r2, #25
 8009a96:	4311      	orrs	r1, r2
 8009a98:	687a      	ldr	r2, [r7, #4]
 8009a9a:	6852      	ldr	r2, [r2, #4]
 8009a9c:	3a01      	subs	r2, #1
 8009a9e:	0112      	lsls	r2, r2, #4
 8009aa0:	430a      	orrs	r2, r1
 8009aa2:	4916      	ldr	r1, [pc, #88]	; (8009afc <RCCEx_PLLSAI2_Config+0x1d8>)
 8009aa4:	4313      	orrs	r3, r2
 8009aa6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8009aa8:	4b14      	ldr	r3, [pc, #80]	; (8009afc <RCCEx_PLLSAI2_Config+0x1d8>)
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	4a13      	ldr	r2, [pc, #76]	; (8009afc <RCCEx_PLLSAI2_Config+0x1d8>)
 8009aae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009ab2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009ab4:	f7fc fc56 	bl	8006364 <HAL_GetTick>
 8009ab8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8009aba:	e009      	b.n	8009ad0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8009abc:	f7fc fc52 	bl	8006364 <HAL_GetTick>
 8009ac0:	4602      	mov	r2, r0
 8009ac2:	68bb      	ldr	r3, [r7, #8]
 8009ac4:	1ad3      	subs	r3, r2, r3
 8009ac6:	2b02      	cmp	r3, #2
 8009ac8:	d902      	bls.n	8009ad0 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8009aca:	2303      	movs	r3, #3
 8009acc:	73fb      	strb	r3, [r7, #15]
          break;
 8009ace:	e005      	b.n	8009adc <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8009ad0:	4b0a      	ldr	r3, [pc, #40]	; (8009afc <RCCEx_PLLSAI2_Config+0x1d8>)
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d0ef      	beq.n	8009abc <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8009adc:	7bfb      	ldrb	r3, [r7, #15]
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d106      	bne.n	8009af0 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8009ae2:	4b06      	ldr	r3, [pc, #24]	; (8009afc <RCCEx_PLLSAI2_Config+0x1d8>)
 8009ae4:	695a      	ldr	r2, [r3, #20]
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	699b      	ldr	r3, [r3, #24]
 8009aea:	4904      	ldr	r1, [pc, #16]	; (8009afc <RCCEx_PLLSAI2_Config+0x1d8>)
 8009aec:	4313      	orrs	r3, r2
 8009aee:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8009af0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009af2:	4618      	mov	r0, r3
 8009af4:	3710      	adds	r7, #16
 8009af6:	46bd      	mov	sp, r7
 8009af8:	bd80      	pop	{r7, pc}
 8009afa:	bf00      	nop
 8009afc:	40021000 	.word	0x40021000
 8009b00:	07ff800f 	.word	0x07ff800f
 8009b04:	ff9f800f 	.word	0xff9f800f
 8009b08:	f9ff800f 	.word	0xf9ff800f

08009b0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009b0c:	b580      	push	{r7, lr}
 8009b0e:	b082      	sub	sp, #8
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d101      	bne.n	8009b1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009b1a:	2301      	movs	r3, #1
 8009b1c:	e049      	b.n	8009bb2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009b24:	b2db      	uxtb	r3, r3
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d106      	bne.n	8009b38 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	2200      	movs	r2, #0
 8009b2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009b32:	6878      	ldr	r0, [r7, #4]
 8009b34:	f000 f841 	bl	8009bba <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	2202      	movs	r2, #2
 8009b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681a      	ldr	r2, [r3, #0]
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	3304      	adds	r3, #4
 8009b48:	4619      	mov	r1, r3
 8009b4a:	4610      	mov	r0, r2
 8009b4c:	f000 f9f8 	bl	8009f40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	2201      	movs	r2, #1
 8009b54:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	2201      	movs	r2, #1
 8009b5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	2201      	movs	r2, #1
 8009b64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	2201      	movs	r2, #1
 8009b6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	2201      	movs	r2, #1
 8009b74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	2201      	movs	r2, #1
 8009b7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	2201      	movs	r2, #1
 8009b84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	2201      	movs	r2, #1
 8009b8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	2201      	movs	r2, #1
 8009b94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	2201      	movs	r2, #1
 8009b9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	2201      	movs	r2, #1
 8009ba4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	2201      	movs	r2, #1
 8009bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009bb0:	2300      	movs	r3, #0
}
 8009bb2:	4618      	mov	r0, r3
 8009bb4:	3708      	adds	r7, #8
 8009bb6:	46bd      	mov	sp, r7
 8009bb8:	bd80      	pop	{r7, pc}

08009bba <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8009bba:	b480      	push	{r7}
 8009bbc:	b083      	sub	sp, #12
 8009bbe:	af00      	add	r7, sp, #0
 8009bc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8009bc2:	bf00      	nop
 8009bc4:	370c      	adds	r7, #12
 8009bc6:	46bd      	mov	sp, r7
 8009bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bcc:	4770      	bx	lr
	...

08009bd0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009bd0:	b480      	push	{r7}
 8009bd2:	b085      	sub	sp, #20
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009bde:	b2db      	uxtb	r3, r3
 8009be0:	2b01      	cmp	r3, #1
 8009be2:	d001      	beq.n	8009be8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009be4:	2301      	movs	r3, #1
 8009be6:	e04f      	b.n	8009c88 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	2202      	movs	r2, #2
 8009bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	68da      	ldr	r2, [r3, #12]
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	f042 0201 	orr.w	r2, r2, #1
 8009bfe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	4a23      	ldr	r2, [pc, #140]	; (8009c94 <HAL_TIM_Base_Start_IT+0xc4>)
 8009c06:	4293      	cmp	r3, r2
 8009c08:	d01d      	beq.n	8009c46 <HAL_TIM_Base_Start_IT+0x76>
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c12:	d018      	beq.n	8009c46 <HAL_TIM_Base_Start_IT+0x76>
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	4a1f      	ldr	r2, [pc, #124]	; (8009c98 <HAL_TIM_Base_Start_IT+0xc8>)
 8009c1a:	4293      	cmp	r3, r2
 8009c1c:	d013      	beq.n	8009c46 <HAL_TIM_Base_Start_IT+0x76>
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	4a1e      	ldr	r2, [pc, #120]	; (8009c9c <HAL_TIM_Base_Start_IT+0xcc>)
 8009c24:	4293      	cmp	r3, r2
 8009c26:	d00e      	beq.n	8009c46 <HAL_TIM_Base_Start_IT+0x76>
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	4a1c      	ldr	r2, [pc, #112]	; (8009ca0 <HAL_TIM_Base_Start_IT+0xd0>)
 8009c2e:	4293      	cmp	r3, r2
 8009c30:	d009      	beq.n	8009c46 <HAL_TIM_Base_Start_IT+0x76>
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	4a1b      	ldr	r2, [pc, #108]	; (8009ca4 <HAL_TIM_Base_Start_IT+0xd4>)
 8009c38:	4293      	cmp	r3, r2
 8009c3a:	d004      	beq.n	8009c46 <HAL_TIM_Base_Start_IT+0x76>
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	4a19      	ldr	r2, [pc, #100]	; (8009ca8 <HAL_TIM_Base_Start_IT+0xd8>)
 8009c42:	4293      	cmp	r3, r2
 8009c44:	d115      	bne.n	8009c72 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	689a      	ldr	r2, [r3, #8]
 8009c4c:	4b17      	ldr	r3, [pc, #92]	; (8009cac <HAL_TIM_Base_Start_IT+0xdc>)
 8009c4e:	4013      	ands	r3, r2
 8009c50:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	2b06      	cmp	r3, #6
 8009c56:	d015      	beq.n	8009c84 <HAL_TIM_Base_Start_IT+0xb4>
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009c5e:	d011      	beq.n	8009c84 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	681a      	ldr	r2, [r3, #0]
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	f042 0201 	orr.w	r2, r2, #1
 8009c6e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009c70:	e008      	b.n	8009c84 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	681a      	ldr	r2, [r3, #0]
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	f042 0201 	orr.w	r2, r2, #1
 8009c80:	601a      	str	r2, [r3, #0]
 8009c82:	e000      	b.n	8009c86 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009c84:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009c86:	2300      	movs	r3, #0
}
 8009c88:	4618      	mov	r0, r3
 8009c8a:	3714      	adds	r7, #20
 8009c8c:	46bd      	mov	sp, r7
 8009c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c92:	4770      	bx	lr
 8009c94:	40012c00 	.word	0x40012c00
 8009c98:	40000400 	.word	0x40000400
 8009c9c:	40000800 	.word	0x40000800
 8009ca0:	40000c00 	.word	0x40000c00
 8009ca4:	40013400 	.word	0x40013400
 8009ca8:	40014000 	.word	0x40014000
 8009cac:	00010007 	.word	0x00010007

08009cb0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009cb0:	b580      	push	{r7, lr}
 8009cb2:	b082      	sub	sp, #8
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	691b      	ldr	r3, [r3, #16]
 8009cbe:	f003 0302 	and.w	r3, r3, #2
 8009cc2:	2b02      	cmp	r3, #2
 8009cc4:	d122      	bne.n	8009d0c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	68db      	ldr	r3, [r3, #12]
 8009ccc:	f003 0302 	and.w	r3, r3, #2
 8009cd0:	2b02      	cmp	r3, #2
 8009cd2:	d11b      	bne.n	8009d0c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	f06f 0202 	mvn.w	r2, #2
 8009cdc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	2201      	movs	r2, #1
 8009ce2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	699b      	ldr	r3, [r3, #24]
 8009cea:	f003 0303 	and.w	r3, r3, #3
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d003      	beq.n	8009cfa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009cf2:	6878      	ldr	r0, [r7, #4]
 8009cf4:	f000 f905 	bl	8009f02 <HAL_TIM_IC_CaptureCallback>
 8009cf8:	e005      	b.n	8009d06 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009cfa:	6878      	ldr	r0, [r7, #4]
 8009cfc:	f000 f8f7 	bl	8009eee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d00:	6878      	ldr	r0, [r7, #4]
 8009d02:	f000 f908 	bl	8009f16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	2200      	movs	r2, #0
 8009d0a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	691b      	ldr	r3, [r3, #16]
 8009d12:	f003 0304 	and.w	r3, r3, #4
 8009d16:	2b04      	cmp	r3, #4
 8009d18:	d122      	bne.n	8009d60 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	68db      	ldr	r3, [r3, #12]
 8009d20:	f003 0304 	and.w	r3, r3, #4
 8009d24:	2b04      	cmp	r3, #4
 8009d26:	d11b      	bne.n	8009d60 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	f06f 0204 	mvn.w	r2, #4
 8009d30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	2202      	movs	r2, #2
 8009d36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	699b      	ldr	r3, [r3, #24]
 8009d3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d003      	beq.n	8009d4e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009d46:	6878      	ldr	r0, [r7, #4]
 8009d48:	f000 f8db 	bl	8009f02 <HAL_TIM_IC_CaptureCallback>
 8009d4c:	e005      	b.n	8009d5a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009d4e:	6878      	ldr	r0, [r7, #4]
 8009d50:	f000 f8cd 	bl	8009eee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d54:	6878      	ldr	r0, [r7, #4]
 8009d56:	f000 f8de 	bl	8009f16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	2200      	movs	r2, #0
 8009d5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	691b      	ldr	r3, [r3, #16]
 8009d66:	f003 0308 	and.w	r3, r3, #8
 8009d6a:	2b08      	cmp	r3, #8
 8009d6c:	d122      	bne.n	8009db4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	68db      	ldr	r3, [r3, #12]
 8009d74:	f003 0308 	and.w	r3, r3, #8
 8009d78:	2b08      	cmp	r3, #8
 8009d7a:	d11b      	bne.n	8009db4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	f06f 0208 	mvn.w	r2, #8
 8009d84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	2204      	movs	r2, #4
 8009d8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	69db      	ldr	r3, [r3, #28]
 8009d92:	f003 0303 	and.w	r3, r3, #3
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d003      	beq.n	8009da2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009d9a:	6878      	ldr	r0, [r7, #4]
 8009d9c:	f000 f8b1 	bl	8009f02 <HAL_TIM_IC_CaptureCallback>
 8009da0:	e005      	b.n	8009dae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009da2:	6878      	ldr	r0, [r7, #4]
 8009da4:	f000 f8a3 	bl	8009eee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009da8:	6878      	ldr	r0, [r7, #4]
 8009daa:	f000 f8b4 	bl	8009f16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	2200      	movs	r2, #0
 8009db2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	691b      	ldr	r3, [r3, #16]
 8009dba:	f003 0310 	and.w	r3, r3, #16
 8009dbe:	2b10      	cmp	r3, #16
 8009dc0:	d122      	bne.n	8009e08 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	68db      	ldr	r3, [r3, #12]
 8009dc8:	f003 0310 	and.w	r3, r3, #16
 8009dcc:	2b10      	cmp	r3, #16
 8009dce:	d11b      	bne.n	8009e08 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	f06f 0210 	mvn.w	r2, #16
 8009dd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	2208      	movs	r2, #8
 8009dde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	69db      	ldr	r3, [r3, #28]
 8009de6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d003      	beq.n	8009df6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009dee:	6878      	ldr	r0, [r7, #4]
 8009df0:	f000 f887 	bl	8009f02 <HAL_TIM_IC_CaptureCallback>
 8009df4:	e005      	b.n	8009e02 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009df6:	6878      	ldr	r0, [r7, #4]
 8009df8:	f000 f879 	bl	8009eee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009dfc:	6878      	ldr	r0, [r7, #4]
 8009dfe:	f000 f88a 	bl	8009f16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	2200      	movs	r2, #0
 8009e06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	691b      	ldr	r3, [r3, #16]
 8009e0e:	f003 0301 	and.w	r3, r3, #1
 8009e12:	2b01      	cmp	r3, #1
 8009e14:	d10e      	bne.n	8009e34 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	68db      	ldr	r3, [r3, #12]
 8009e1c:	f003 0301 	and.w	r3, r3, #1
 8009e20:	2b01      	cmp	r3, #1
 8009e22:	d107      	bne.n	8009e34 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	f06f 0201 	mvn.w	r2, #1
 8009e2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009e2e:	6878      	ldr	r0, [r7, #4]
 8009e30:	f7fa ff4a 	bl	8004cc8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	691b      	ldr	r3, [r3, #16]
 8009e3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e3e:	2b80      	cmp	r3, #128	; 0x80
 8009e40:	d10e      	bne.n	8009e60 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	68db      	ldr	r3, [r3, #12]
 8009e48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e4c:	2b80      	cmp	r3, #128	; 0x80
 8009e4e:	d107      	bne.n	8009e60 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009e58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009e5a:	6878      	ldr	r0, [r7, #4]
 8009e5c:	f000 f914 	bl	800a088 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	691b      	ldr	r3, [r3, #16]
 8009e66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009e6e:	d10e      	bne.n	8009e8e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	68db      	ldr	r3, [r3, #12]
 8009e76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e7a:	2b80      	cmp	r3, #128	; 0x80
 8009e7c:	d107      	bne.n	8009e8e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009e86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009e88:	6878      	ldr	r0, [r7, #4]
 8009e8a:	f000 f907 	bl	800a09c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	691b      	ldr	r3, [r3, #16]
 8009e94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e98:	2b40      	cmp	r3, #64	; 0x40
 8009e9a:	d10e      	bne.n	8009eba <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	68db      	ldr	r3, [r3, #12]
 8009ea2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ea6:	2b40      	cmp	r3, #64	; 0x40
 8009ea8:	d107      	bne.n	8009eba <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009eb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009eb4:	6878      	ldr	r0, [r7, #4]
 8009eb6:	f000 f838 	bl	8009f2a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	691b      	ldr	r3, [r3, #16]
 8009ec0:	f003 0320 	and.w	r3, r3, #32
 8009ec4:	2b20      	cmp	r3, #32
 8009ec6:	d10e      	bne.n	8009ee6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	68db      	ldr	r3, [r3, #12]
 8009ece:	f003 0320 	and.w	r3, r3, #32
 8009ed2:	2b20      	cmp	r3, #32
 8009ed4:	d107      	bne.n	8009ee6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	f06f 0220 	mvn.w	r2, #32
 8009ede:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009ee0:	6878      	ldr	r0, [r7, #4]
 8009ee2:	f000 f8c7 	bl	800a074 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009ee6:	bf00      	nop
 8009ee8:	3708      	adds	r7, #8
 8009eea:	46bd      	mov	sp, r7
 8009eec:	bd80      	pop	{r7, pc}

08009eee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009eee:	b480      	push	{r7}
 8009ef0:	b083      	sub	sp, #12
 8009ef2:	af00      	add	r7, sp, #0
 8009ef4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009ef6:	bf00      	nop
 8009ef8:	370c      	adds	r7, #12
 8009efa:	46bd      	mov	sp, r7
 8009efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f00:	4770      	bx	lr

08009f02 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009f02:	b480      	push	{r7}
 8009f04:	b083      	sub	sp, #12
 8009f06:	af00      	add	r7, sp, #0
 8009f08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009f0a:	bf00      	nop
 8009f0c:	370c      	adds	r7, #12
 8009f0e:	46bd      	mov	sp, r7
 8009f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f14:	4770      	bx	lr

08009f16 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009f16:	b480      	push	{r7}
 8009f18:	b083      	sub	sp, #12
 8009f1a:	af00      	add	r7, sp, #0
 8009f1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009f1e:	bf00      	nop
 8009f20:	370c      	adds	r7, #12
 8009f22:	46bd      	mov	sp, r7
 8009f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f28:	4770      	bx	lr

08009f2a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009f2a:	b480      	push	{r7}
 8009f2c:	b083      	sub	sp, #12
 8009f2e:	af00      	add	r7, sp, #0
 8009f30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009f32:	bf00      	nop
 8009f34:	370c      	adds	r7, #12
 8009f36:	46bd      	mov	sp, r7
 8009f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f3c:	4770      	bx	lr
	...

08009f40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009f40:	b480      	push	{r7}
 8009f42:	b085      	sub	sp, #20
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	6078      	str	r0, [r7, #4]
 8009f48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	4a40      	ldr	r2, [pc, #256]	; (800a054 <TIM_Base_SetConfig+0x114>)
 8009f54:	4293      	cmp	r3, r2
 8009f56:	d013      	beq.n	8009f80 <TIM_Base_SetConfig+0x40>
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f5e:	d00f      	beq.n	8009f80 <TIM_Base_SetConfig+0x40>
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	4a3d      	ldr	r2, [pc, #244]	; (800a058 <TIM_Base_SetConfig+0x118>)
 8009f64:	4293      	cmp	r3, r2
 8009f66:	d00b      	beq.n	8009f80 <TIM_Base_SetConfig+0x40>
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	4a3c      	ldr	r2, [pc, #240]	; (800a05c <TIM_Base_SetConfig+0x11c>)
 8009f6c:	4293      	cmp	r3, r2
 8009f6e:	d007      	beq.n	8009f80 <TIM_Base_SetConfig+0x40>
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	4a3b      	ldr	r2, [pc, #236]	; (800a060 <TIM_Base_SetConfig+0x120>)
 8009f74:	4293      	cmp	r3, r2
 8009f76:	d003      	beq.n	8009f80 <TIM_Base_SetConfig+0x40>
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	4a3a      	ldr	r2, [pc, #232]	; (800a064 <TIM_Base_SetConfig+0x124>)
 8009f7c:	4293      	cmp	r3, r2
 8009f7e:	d108      	bne.n	8009f92 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009f88:	683b      	ldr	r3, [r7, #0]
 8009f8a:	685b      	ldr	r3, [r3, #4]
 8009f8c:	68fa      	ldr	r2, [r7, #12]
 8009f8e:	4313      	orrs	r3, r2
 8009f90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	4a2f      	ldr	r2, [pc, #188]	; (800a054 <TIM_Base_SetConfig+0x114>)
 8009f96:	4293      	cmp	r3, r2
 8009f98:	d01f      	beq.n	8009fda <TIM_Base_SetConfig+0x9a>
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009fa0:	d01b      	beq.n	8009fda <TIM_Base_SetConfig+0x9a>
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	4a2c      	ldr	r2, [pc, #176]	; (800a058 <TIM_Base_SetConfig+0x118>)
 8009fa6:	4293      	cmp	r3, r2
 8009fa8:	d017      	beq.n	8009fda <TIM_Base_SetConfig+0x9a>
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	4a2b      	ldr	r2, [pc, #172]	; (800a05c <TIM_Base_SetConfig+0x11c>)
 8009fae:	4293      	cmp	r3, r2
 8009fb0:	d013      	beq.n	8009fda <TIM_Base_SetConfig+0x9a>
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	4a2a      	ldr	r2, [pc, #168]	; (800a060 <TIM_Base_SetConfig+0x120>)
 8009fb6:	4293      	cmp	r3, r2
 8009fb8:	d00f      	beq.n	8009fda <TIM_Base_SetConfig+0x9a>
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	4a29      	ldr	r2, [pc, #164]	; (800a064 <TIM_Base_SetConfig+0x124>)
 8009fbe:	4293      	cmp	r3, r2
 8009fc0:	d00b      	beq.n	8009fda <TIM_Base_SetConfig+0x9a>
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	4a28      	ldr	r2, [pc, #160]	; (800a068 <TIM_Base_SetConfig+0x128>)
 8009fc6:	4293      	cmp	r3, r2
 8009fc8:	d007      	beq.n	8009fda <TIM_Base_SetConfig+0x9a>
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	4a27      	ldr	r2, [pc, #156]	; (800a06c <TIM_Base_SetConfig+0x12c>)
 8009fce:	4293      	cmp	r3, r2
 8009fd0:	d003      	beq.n	8009fda <TIM_Base_SetConfig+0x9a>
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	4a26      	ldr	r2, [pc, #152]	; (800a070 <TIM_Base_SetConfig+0x130>)
 8009fd6:	4293      	cmp	r3, r2
 8009fd8:	d108      	bne.n	8009fec <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009fe0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009fe2:	683b      	ldr	r3, [r7, #0]
 8009fe4:	68db      	ldr	r3, [r3, #12]
 8009fe6:	68fa      	ldr	r2, [r7, #12]
 8009fe8:	4313      	orrs	r3, r2
 8009fea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009ff2:	683b      	ldr	r3, [r7, #0]
 8009ff4:	695b      	ldr	r3, [r3, #20]
 8009ff6:	4313      	orrs	r3, r2
 8009ff8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	68fa      	ldr	r2, [r7, #12]
 8009ffe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a000:	683b      	ldr	r3, [r7, #0]
 800a002:	689a      	ldr	r2, [r3, #8]
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a008:	683b      	ldr	r3, [r7, #0]
 800a00a:	681a      	ldr	r2, [r3, #0]
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	4a10      	ldr	r2, [pc, #64]	; (800a054 <TIM_Base_SetConfig+0x114>)
 800a014:	4293      	cmp	r3, r2
 800a016:	d00f      	beq.n	800a038 <TIM_Base_SetConfig+0xf8>
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	4a12      	ldr	r2, [pc, #72]	; (800a064 <TIM_Base_SetConfig+0x124>)
 800a01c:	4293      	cmp	r3, r2
 800a01e:	d00b      	beq.n	800a038 <TIM_Base_SetConfig+0xf8>
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	4a11      	ldr	r2, [pc, #68]	; (800a068 <TIM_Base_SetConfig+0x128>)
 800a024:	4293      	cmp	r3, r2
 800a026:	d007      	beq.n	800a038 <TIM_Base_SetConfig+0xf8>
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	4a10      	ldr	r2, [pc, #64]	; (800a06c <TIM_Base_SetConfig+0x12c>)
 800a02c:	4293      	cmp	r3, r2
 800a02e:	d003      	beq.n	800a038 <TIM_Base_SetConfig+0xf8>
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	4a0f      	ldr	r2, [pc, #60]	; (800a070 <TIM_Base_SetConfig+0x130>)
 800a034:	4293      	cmp	r3, r2
 800a036:	d103      	bne.n	800a040 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a038:	683b      	ldr	r3, [r7, #0]
 800a03a:	691a      	ldr	r2, [r3, #16]
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	2201      	movs	r2, #1
 800a044:	615a      	str	r2, [r3, #20]
}
 800a046:	bf00      	nop
 800a048:	3714      	adds	r7, #20
 800a04a:	46bd      	mov	sp, r7
 800a04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a050:	4770      	bx	lr
 800a052:	bf00      	nop
 800a054:	40012c00 	.word	0x40012c00
 800a058:	40000400 	.word	0x40000400
 800a05c:	40000800 	.word	0x40000800
 800a060:	40000c00 	.word	0x40000c00
 800a064:	40013400 	.word	0x40013400
 800a068:	40014000 	.word	0x40014000
 800a06c:	40014400 	.word	0x40014400
 800a070:	40014800 	.word	0x40014800

0800a074 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a074:	b480      	push	{r7}
 800a076:	b083      	sub	sp, #12
 800a078:	af00      	add	r7, sp, #0
 800a07a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a07c:	bf00      	nop
 800a07e:	370c      	adds	r7, #12
 800a080:	46bd      	mov	sp, r7
 800a082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a086:	4770      	bx	lr

0800a088 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a088:	b480      	push	{r7}
 800a08a:	b083      	sub	sp, #12
 800a08c:	af00      	add	r7, sp, #0
 800a08e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a090:	bf00      	nop
 800a092:	370c      	adds	r7, #12
 800a094:	46bd      	mov	sp, r7
 800a096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a09a:	4770      	bx	lr

0800a09c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a09c:	b480      	push	{r7}
 800a09e:	b083      	sub	sp, #12
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a0a4:	bf00      	nop
 800a0a6:	370c      	adds	r7, #12
 800a0a8:	46bd      	mov	sp, r7
 800a0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ae:	4770      	bx	lr

0800a0b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a0b0:	b580      	push	{r7, lr}
 800a0b2:	b082      	sub	sp, #8
 800a0b4:	af00      	add	r7, sp, #0
 800a0b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d101      	bne.n	800a0c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a0be:	2301      	movs	r3, #1
 800a0c0:	e042      	b.n	800a148 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d106      	bne.n	800a0da <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	2200      	movs	r2, #0
 800a0d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a0d4:	6878      	ldr	r0, [r7, #4]
 800a0d6:	f7fb fbb5 	bl	8005844 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	2224      	movs	r2, #36	; 0x24
 800a0de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	681a      	ldr	r2, [r3, #0]
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	f022 0201 	bic.w	r2, r2, #1
 800a0f0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a0f2:	6878      	ldr	r0, [r7, #4]
 800a0f4:	f000 fc52 	bl	800a99c <UART_SetConfig>
 800a0f8:	4603      	mov	r3, r0
 800a0fa:	2b01      	cmp	r3, #1
 800a0fc:	d101      	bne.n	800a102 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800a0fe:	2301      	movs	r3, #1
 800a100:	e022      	b.n	800a148 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a106:	2b00      	cmp	r3, #0
 800a108:	d002      	beq.n	800a110 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800a10a:	6878      	ldr	r0, [r7, #4]
 800a10c:	f000 ff42 	bl	800af94 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	685a      	ldr	r2, [r3, #4]
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a11e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	689a      	ldr	r2, [r3, #8]
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a12e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	681a      	ldr	r2, [r3, #0]
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	f042 0201 	orr.w	r2, r2, #1
 800a13e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a140:	6878      	ldr	r0, [r7, #4]
 800a142:	f000 ffc9 	bl	800b0d8 <UART_CheckIdleState>
 800a146:	4603      	mov	r3, r0
}
 800a148:	4618      	mov	r0, r3
 800a14a:	3708      	adds	r7, #8
 800a14c:	46bd      	mov	sp, r7
 800a14e:	bd80      	pop	{r7, pc}

0800a150 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a150:	b580      	push	{r7, lr}
 800a152:	b08a      	sub	sp, #40	; 0x28
 800a154:	af02      	add	r7, sp, #8
 800a156:	60f8      	str	r0, [r7, #12]
 800a158:	60b9      	str	r1, [r7, #8]
 800a15a:	603b      	str	r3, [r7, #0]
 800a15c:	4613      	mov	r3, r2
 800a15e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a166:	2b20      	cmp	r3, #32
 800a168:	f040 8084 	bne.w	800a274 <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 800a16c:	68bb      	ldr	r3, [r7, #8]
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d002      	beq.n	800a178 <HAL_UART_Transmit+0x28>
 800a172:	88fb      	ldrh	r3, [r7, #6]
 800a174:	2b00      	cmp	r3, #0
 800a176:	d101      	bne.n	800a17c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800a178:	2301      	movs	r3, #1
 800a17a:	e07c      	b.n	800a276 <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a182:	2b01      	cmp	r3, #1
 800a184:	d101      	bne.n	800a18a <HAL_UART_Transmit+0x3a>
 800a186:	2302      	movs	r3, #2
 800a188:	e075      	b.n	800a276 <HAL_UART_Transmit+0x126>
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	2201      	movs	r2, #1
 800a18e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	2200      	movs	r2, #0
 800a196:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	2221      	movs	r2, #33	; 0x21
 800a19e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a1a2:	f7fc f8df 	bl	8006364 <HAL_GetTick>
 800a1a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	88fa      	ldrh	r2, [r7, #6]
 800a1ac:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	88fa      	ldrh	r2, [r7, #6]
 800a1b4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	689b      	ldr	r3, [r3, #8]
 800a1bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a1c0:	d108      	bne.n	800a1d4 <HAL_UART_Transmit+0x84>
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	691b      	ldr	r3, [r3, #16]
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d104      	bne.n	800a1d4 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800a1ca:	2300      	movs	r3, #0
 800a1cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a1ce:	68bb      	ldr	r3, [r7, #8]
 800a1d0:	61bb      	str	r3, [r7, #24]
 800a1d2:	e003      	b.n	800a1dc <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800a1d4:	68bb      	ldr	r3, [r7, #8]
 800a1d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a1d8:	2300      	movs	r3, #0
 800a1da:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	2200      	movs	r2, #0
 800a1e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800a1e4:	e02d      	b.n	800a242 <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a1e6:	683b      	ldr	r3, [r7, #0]
 800a1e8:	9300      	str	r3, [sp, #0]
 800a1ea:	697b      	ldr	r3, [r7, #20]
 800a1ec:	2200      	movs	r2, #0
 800a1ee:	2180      	movs	r1, #128	; 0x80
 800a1f0:	68f8      	ldr	r0, [r7, #12]
 800a1f2:	f000 ffbc 	bl	800b16e <UART_WaitOnFlagUntilTimeout>
 800a1f6:	4603      	mov	r3, r0
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d001      	beq.n	800a200 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800a1fc:	2303      	movs	r3, #3
 800a1fe:	e03a      	b.n	800a276 <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 800a200:	69fb      	ldr	r3, [r7, #28]
 800a202:	2b00      	cmp	r3, #0
 800a204:	d10b      	bne.n	800a21e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a206:	69bb      	ldr	r3, [r7, #24]
 800a208:	881a      	ldrh	r2, [r3, #0]
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a212:	b292      	uxth	r2, r2
 800a214:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800a216:	69bb      	ldr	r3, [r7, #24]
 800a218:	3302      	adds	r3, #2
 800a21a:	61bb      	str	r3, [r7, #24]
 800a21c:	e008      	b.n	800a230 <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a21e:	69fb      	ldr	r3, [r7, #28]
 800a220:	781a      	ldrb	r2, [r3, #0]
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	b292      	uxth	r2, r2
 800a228:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800a22a:	69fb      	ldr	r3, [r7, #28]
 800a22c:	3301      	adds	r3, #1
 800a22e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a236:	b29b      	uxth	r3, r3
 800a238:	3b01      	subs	r3, #1
 800a23a:	b29a      	uxth	r2, r3
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a248:	b29b      	uxth	r3, r3
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d1cb      	bne.n	800a1e6 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a24e:	683b      	ldr	r3, [r7, #0]
 800a250:	9300      	str	r3, [sp, #0]
 800a252:	697b      	ldr	r3, [r7, #20]
 800a254:	2200      	movs	r2, #0
 800a256:	2140      	movs	r1, #64	; 0x40
 800a258:	68f8      	ldr	r0, [r7, #12]
 800a25a:	f000 ff88 	bl	800b16e <UART_WaitOnFlagUntilTimeout>
 800a25e:	4603      	mov	r3, r0
 800a260:	2b00      	cmp	r3, #0
 800a262:	d001      	beq.n	800a268 <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 800a264:	2303      	movs	r3, #3
 800a266:	e006      	b.n	800a276 <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	2220      	movs	r2, #32
 800a26c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800a270:	2300      	movs	r3, #0
 800a272:	e000      	b.n	800a276 <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 800a274:	2302      	movs	r3, #2
  }
}
 800a276:	4618      	mov	r0, r3
 800a278:	3720      	adds	r7, #32
 800a27a:	46bd      	mov	sp, r7
 800a27c:	bd80      	pop	{r7, pc}
	...

0800a280 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a280:	b580      	push	{r7, lr}
 800a282:	b08a      	sub	sp, #40	; 0x28
 800a284:	af00      	add	r7, sp, #0
 800a286:	60f8      	str	r0, [r7, #12]
 800a288:	60b9      	str	r1, [r7, #8]
 800a28a:	4613      	mov	r3, r2
 800a28c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a294:	2b20      	cmp	r3, #32
 800a296:	d142      	bne.n	800a31e <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800a298:	68bb      	ldr	r3, [r7, #8]
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d002      	beq.n	800a2a4 <HAL_UART_Receive_IT+0x24>
 800a29e:	88fb      	ldrh	r3, [r7, #6]
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d101      	bne.n	800a2a8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800a2a4:	2301      	movs	r3, #1
 800a2a6:	e03b      	b.n	800a320 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a2ae:	2b01      	cmp	r3, #1
 800a2b0:	d101      	bne.n	800a2b6 <HAL_UART_Receive_IT+0x36>
 800a2b2:	2302      	movs	r3, #2
 800a2b4:	e034      	b.n	800a320 <HAL_UART_Receive_IT+0xa0>
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	2201      	movs	r2, #1
 800a2ba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	2200      	movs	r2, #0
 800a2c2:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	4a17      	ldr	r2, [pc, #92]	; (800a328 <HAL_UART_Receive_IT+0xa8>)
 800a2ca:	4293      	cmp	r3, r2
 800a2cc:	d01f      	beq.n	800a30e <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	685b      	ldr	r3, [r3, #4]
 800a2d4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d018      	beq.n	800a30e <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2e2:	697b      	ldr	r3, [r7, #20]
 800a2e4:	e853 3f00 	ldrex	r3, [r3]
 800a2e8:	613b      	str	r3, [r7, #16]
   return(result);
 800a2ea:	693b      	ldr	r3, [r7, #16]
 800a2ec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a2f0:	627b      	str	r3, [r7, #36]	; 0x24
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	461a      	mov	r2, r3
 800a2f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2fa:	623b      	str	r3, [r7, #32]
 800a2fc:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2fe:	69f9      	ldr	r1, [r7, #28]
 800a300:	6a3a      	ldr	r2, [r7, #32]
 800a302:	e841 2300 	strex	r3, r2, [r1]
 800a306:	61bb      	str	r3, [r7, #24]
   return(result);
 800a308:	69bb      	ldr	r3, [r7, #24]
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d1e6      	bne.n	800a2dc <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800a30e:	88fb      	ldrh	r3, [r7, #6]
 800a310:	461a      	mov	r2, r3
 800a312:	68b9      	ldr	r1, [r7, #8]
 800a314:	68f8      	ldr	r0, [r7, #12]
 800a316:	f000 fff3 	bl	800b300 <UART_Start_Receive_IT>
 800a31a:	4603      	mov	r3, r0
 800a31c:	e000      	b.n	800a320 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800a31e:	2302      	movs	r3, #2
  }
}
 800a320:	4618      	mov	r0, r3
 800a322:	3728      	adds	r7, #40	; 0x28
 800a324:	46bd      	mov	sp, r7
 800a326:	bd80      	pop	{r7, pc}
 800a328:	40008000 	.word	0x40008000

0800a32c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a32c:	b580      	push	{r7, lr}
 800a32e:	b0ba      	sub	sp, #232	; 0xe8
 800a330:	af00      	add	r7, sp, #0
 800a332:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	69db      	ldr	r3, [r3, #28]
 800a33a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	689b      	ldr	r3, [r3, #8]
 800a34e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a352:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800a356:	f640 030f 	movw	r3, #2063	; 0x80f
 800a35a:	4013      	ands	r3, r2
 800a35c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800a360:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a364:	2b00      	cmp	r3, #0
 800a366:	d11b      	bne.n	800a3a0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a368:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a36c:	f003 0320 	and.w	r3, r3, #32
 800a370:	2b00      	cmp	r3, #0
 800a372:	d015      	beq.n	800a3a0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a374:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a378:	f003 0320 	and.w	r3, r3, #32
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d105      	bne.n	800a38c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a380:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a384:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d009      	beq.n	800a3a0 <HAL_UART_IRQHandler+0x74>
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a390:	2b00      	cmp	r3, #0
 800a392:	f000 82d6 	beq.w	800a942 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a39a:	6878      	ldr	r0, [r7, #4]
 800a39c:	4798      	blx	r3
      }
      return;
 800a39e:	e2d0      	b.n	800a942 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
 800a3a0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	f000 811f 	beq.w	800a5e8 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800a3aa:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800a3ae:	4b8b      	ldr	r3, [pc, #556]	; (800a5dc <HAL_UART_IRQHandler+0x2b0>)
 800a3b0:	4013      	ands	r3, r2
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d106      	bne.n	800a3c4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800a3b6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800a3ba:	4b89      	ldr	r3, [pc, #548]	; (800a5e0 <HAL_UART_IRQHandler+0x2b4>)
 800a3bc:	4013      	ands	r3, r2
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	f000 8112 	beq.w	800a5e8 <HAL_UART_IRQHandler+0x2bc>
      && (((cr3its & USART_CR3_EIE) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a3c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a3c8:	f003 0301 	and.w	r3, r3, #1
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d011      	beq.n	800a3f4 <HAL_UART_IRQHandler+0xc8>
 800a3d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a3d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d00b      	beq.n	800a3f4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	2201      	movs	r2, #1
 800a3e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a3ea:	f043 0201 	orr.w	r2, r3, #1
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a3f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a3f8:	f003 0302 	and.w	r3, r3, #2
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d011      	beq.n	800a424 <HAL_UART_IRQHandler+0xf8>
 800a400:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a404:	f003 0301 	and.w	r3, r3, #1
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d00b      	beq.n	800a424 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	2202      	movs	r2, #2
 800a412:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a41a:	f043 0204 	orr.w	r2, r3, #4
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a424:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a428:	f003 0304 	and.w	r3, r3, #4
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d011      	beq.n	800a454 <HAL_UART_IRQHandler+0x128>
 800a430:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a434:	f003 0301 	and.w	r3, r3, #1
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d00b      	beq.n	800a454 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	2204      	movs	r2, #4
 800a442:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a44a:	f043 0202 	orr.w	r2, r3, #2
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a454:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a458:	f003 0308 	and.w	r3, r3, #8
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d017      	beq.n	800a490 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a460:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a464:	f003 0320 	and.w	r3, r3, #32
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d105      	bne.n	800a478 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800a46c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800a470:	4b5a      	ldr	r3, [pc, #360]	; (800a5dc <HAL_UART_IRQHandler+0x2b0>)
 800a472:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a474:	2b00      	cmp	r3, #0
 800a476:	d00b      	beq.n	800a490 <HAL_UART_IRQHandler+0x164>
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	2208      	movs	r2, #8
 800a47e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a486:	f043 0208 	orr.w	r2, r3, #8
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a490:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a494:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d012      	beq.n	800a4c2 <HAL_UART_IRQHandler+0x196>
 800a49c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a4a0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d00c      	beq.n	800a4c2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a4b0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a4b8:	f043 0220 	orr.w	r2, r3, #32
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	f000 823c 	beq.w	800a946 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a4ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a4d2:	f003 0320 	and.w	r3, r3, #32
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d013      	beq.n	800a502 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a4da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a4de:	f003 0320 	and.w	r3, r3, #32
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d105      	bne.n	800a4f2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a4e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a4ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d007      	beq.n	800a502 <HAL_UART_IRQHandler+0x1d6>
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d003      	beq.n	800a502 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4fe:	6878      	ldr	r0, [r7, #4]
 800a500:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a508:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	689b      	ldr	r3, [r3, #8]
 800a512:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a516:	2b40      	cmp	r3, #64	; 0x40
 800a518:	d005      	beq.n	800a526 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a51a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a51e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a522:	2b00      	cmp	r3, #0
 800a524:	d04f      	beq.n	800a5c6 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a526:	6878      	ldr	r0, [r7, #4]
 800a528:	f001 f814 	bl	800b554 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	689b      	ldr	r3, [r3, #8]
 800a532:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a536:	2b40      	cmp	r3, #64	; 0x40
 800a538:	d141      	bne.n	800a5be <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	3308      	adds	r3, #8
 800a540:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a544:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a548:	e853 3f00 	ldrex	r3, [r3]
 800a54c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800a550:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a554:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a558:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	3308      	adds	r3, #8
 800a562:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a566:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a56a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a56e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a572:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a576:	e841 2300 	strex	r3, r2, [r1]
 800a57a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800a57e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a582:	2b00      	cmp	r3, #0
 800a584:	d1d9      	bne.n	800a53a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d013      	beq.n	800a5b6 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a592:	4a14      	ldr	r2, [pc, #80]	; (800a5e4 <HAL_UART_IRQHandler+0x2b8>)
 800a594:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a59a:	4618      	mov	r0, r3
 800a59c:	f7fc f850 	bl	8006640 <HAL_DMA_Abort_IT>
 800a5a0:	4603      	mov	r3, r0
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d017      	beq.n	800a5d6 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a5aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5ac:	687a      	ldr	r2, [r7, #4]
 800a5ae:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800a5b0:	4610      	mov	r0, r2
 800a5b2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a5b4:	e00f      	b.n	800a5d6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a5b6:	6878      	ldr	r0, [r7, #4]
 800a5b8:	f000 f9da 	bl	800a970 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a5bc:	e00b      	b.n	800a5d6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a5be:	6878      	ldr	r0, [r7, #4]
 800a5c0:	f000 f9d6 	bl	800a970 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a5c4:	e007      	b.n	800a5d6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a5c6:	6878      	ldr	r0, [r7, #4]
 800a5c8:	f000 f9d2 	bl	800a970 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	2200      	movs	r2, #0
 800a5d0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800a5d4:	e1b7      	b.n	800a946 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a5d6:	bf00      	nop
    return;
 800a5d8:	e1b5      	b.n	800a946 <HAL_UART_IRQHandler+0x61a>
 800a5da:	bf00      	nop
 800a5dc:	10000001 	.word	0x10000001
 800a5e0:	04000120 	.word	0x04000120
 800a5e4:	0800b621 	.word	0x0800b621

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a5ec:	2b01      	cmp	r3, #1
 800a5ee:	f040 814a 	bne.w	800a886 <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a5f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a5f6:	f003 0310 	and.w	r3, r3, #16
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	f000 8143 	beq.w	800a886 <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a600:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a604:	f003 0310 	and.w	r3, r3, #16
 800a608:	2b00      	cmp	r3, #0
 800a60a:	f000 813c 	beq.w	800a886 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	2210      	movs	r2, #16
 800a614:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	689b      	ldr	r3, [r3, #8]
 800a61c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a620:	2b40      	cmp	r3, #64	; 0x40
 800a622:	f040 80b5 	bne.w	800a790 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	685b      	ldr	r3, [r3, #4]
 800a62e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a632:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a636:	2b00      	cmp	r3, #0
 800a638:	f000 8187 	beq.w	800a94a <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a642:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a646:	429a      	cmp	r2, r3
 800a648:	f080 817f 	bcs.w	800a94a <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a652:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	f003 0320 	and.w	r3, r3, #32
 800a662:	2b00      	cmp	r3, #0
 800a664:	f040 8086 	bne.w	800a774 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a670:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a674:	e853 3f00 	ldrex	r3, [r3]
 800a678:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a67c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a680:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a684:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	461a      	mov	r2, r3
 800a68e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a692:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a696:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a69a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a69e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a6a2:	e841 2300 	strex	r3, r2, [r1]
 800a6a6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a6aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d1da      	bne.n	800a668 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	3308      	adds	r3, #8
 800a6b8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a6bc:	e853 3f00 	ldrex	r3, [r3]
 800a6c0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a6c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a6c4:	f023 0301 	bic.w	r3, r3, #1
 800a6c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	3308      	adds	r3, #8
 800a6d2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a6d6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a6da:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6dc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a6de:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a6e2:	e841 2300 	strex	r3, r2, [r1]
 800a6e6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a6e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d1e1      	bne.n	800a6b2 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	3308      	adds	r3, #8
 800a6f4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a6f8:	e853 3f00 	ldrex	r3, [r3]
 800a6fc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a6fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a700:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a704:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	3308      	adds	r3, #8
 800a70e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a712:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a714:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a716:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a718:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a71a:	e841 2300 	strex	r3, r2, [r1]
 800a71e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a720:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a722:	2b00      	cmp	r3, #0
 800a724:	d1e3      	bne.n	800a6ee <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	2220      	movs	r2, #32
 800a72a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	2200      	movs	r2, #0
 800a732:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a73a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a73c:	e853 3f00 	ldrex	r3, [r3]
 800a740:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a742:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a744:	f023 0310 	bic.w	r3, r3, #16
 800a748:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	461a      	mov	r2, r3
 800a752:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a756:	65bb      	str	r3, [r7, #88]	; 0x58
 800a758:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a75a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a75c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a75e:	e841 2300 	strex	r3, r2, [r1]
 800a762:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a764:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a766:	2b00      	cmp	r3, #0
 800a768:	d1e4      	bne.n	800a734 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a76e:	4618      	mov	r0, r3
 800a770:	f7fb ff0a 	bl	8006588 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a780:	b29b      	uxth	r3, r3
 800a782:	1ad3      	subs	r3, r2, r3
 800a784:	b29b      	uxth	r3, r3
 800a786:	4619      	mov	r1, r3
 800a788:	6878      	ldr	r0, [r7, #4]
 800a78a:	f000 f8fb 	bl	800a984 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a78e:	e0dc      	b.n	800a94a <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a79c:	b29b      	uxth	r3, r3
 800a79e:	1ad3      	subs	r3, r2, r3
 800a7a0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a7aa:	b29b      	uxth	r3, r3
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	f000 80ce 	beq.w	800a94e <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 800a7b2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	f000 80c9 	beq.w	800a94e <HAL_UART_IRQHandler+0x622>
      {
#if defined(USART_CR1_FIFOEN)
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7c4:	e853 3f00 	ldrex	r3, [r3]
 800a7c8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a7ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7cc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a7d0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	461a      	mov	r2, r3
 800a7da:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a7de:	647b      	str	r3, [r7, #68]	; 0x44
 800a7e0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7e2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a7e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a7e6:	e841 2300 	strex	r3, r2, [r1]
 800a7ea:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a7ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d1e4      	bne.n	800a7bc <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	3308      	adds	r3, #8
 800a7f8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7fc:	e853 3f00 	ldrex	r3, [r3]
 800a800:	623b      	str	r3, [r7, #32]
   return(result);
 800a802:	6a3b      	ldr	r3, [r7, #32]
 800a804:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a808:	f023 0301 	bic.w	r3, r3, #1
 800a80c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	3308      	adds	r3, #8
 800a816:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a81a:	633a      	str	r2, [r7, #48]	; 0x30
 800a81c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a81e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a820:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a822:	e841 2300 	strex	r3, r2, [r1]
 800a826:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d1e1      	bne.n	800a7f2 <HAL_UART_IRQHandler+0x4c6>
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	2220      	movs	r2, #32
 800a832:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	2200      	movs	r2, #0
 800a83a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	2200      	movs	r2, #0
 800a840:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a848:	693b      	ldr	r3, [r7, #16]
 800a84a:	e853 3f00 	ldrex	r3, [r3]
 800a84e:	60fb      	str	r3, [r7, #12]
   return(result);
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	f023 0310 	bic.w	r3, r3, #16
 800a856:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	461a      	mov	r2, r3
 800a860:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a864:	61fb      	str	r3, [r7, #28]
 800a866:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a868:	69b9      	ldr	r1, [r7, #24]
 800a86a:	69fa      	ldr	r2, [r7, #28]
 800a86c:	e841 2300 	strex	r3, r2, [r1]
 800a870:	617b      	str	r3, [r7, #20]
   return(result);
 800a872:	697b      	ldr	r3, [r7, #20]
 800a874:	2b00      	cmp	r3, #0
 800a876:	d1e4      	bne.n	800a842 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a878:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a87c:	4619      	mov	r1, r3
 800a87e:	6878      	ldr	r0, [r7, #4]
 800a880:	f000 f880 	bl	800a984 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a884:	e063      	b.n	800a94e <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a886:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a88a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d00e      	beq.n	800a8b0 <HAL_UART_IRQHandler+0x584>
 800a892:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a896:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d008      	beq.n	800a8b0 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800a8a6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800a8a8:	6878      	ldr	r0, [r7, #4]
 800a8aa:	f001 fb5f 	bl	800bf6c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a8ae:	e051      	b.n	800a954 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800a8b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a8b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d014      	beq.n	800a8e6 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800a8bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a8c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d105      	bne.n	800a8d4 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800a8c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a8cc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d008      	beq.n	800a8e6 <HAL_UART_IRQHandler+0x5ba>
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
      && ((cr1its & USART_CR1_TXEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d03a      	beq.n	800a952 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a8e0:	6878      	ldr	r0, [r7, #4]
 800a8e2:	4798      	blx	r3
    }
    return;
 800a8e4:	e035      	b.n	800a952 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a8e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a8ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d009      	beq.n	800a906 <HAL_UART_IRQHandler+0x5da>
 800a8f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a8f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d003      	beq.n	800a906 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 800a8fe:	6878      	ldr	r0, [r7, #4]
 800a900:	f000 fea4 	bl	800b64c <UART_EndTransmit_IT>
    return;
 800a904:	e026      	b.n	800a954 <HAL_UART_IRQHandler+0x628>
  }

#if defined(USART_CR1_FIFOEN)
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800a906:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a90a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d009      	beq.n	800a926 <HAL_UART_IRQHandler+0x5fa>
 800a912:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a916:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d003      	beq.n	800a926 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800a91e:	6878      	ldr	r0, [r7, #4]
 800a920:	f001 fb38 	bl	800bf94 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a924:	e016      	b.n	800a954 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800a926:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a92a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d010      	beq.n	800a954 <HAL_UART_IRQHandler+0x628>
 800a932:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a936:	2b00      	cmp	r3, #0
 800a938:	da0c      	bge.n	800a954 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800a93a:	6878      	ldr	r0, [r7, #4]
 800a93c:	f001 fb20 	bl	800bf80 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a940:	e008      	b.n	800a954 <HAL_UART_IRQHandler+0x628>
      return;
 800a942:	bf00      	nop
 800a944:	e006      	b.n	800a954 <HAL_UART_IRQHandler+0x628>
    return;
 800a946:	bf00      	nop
 800a948:	e004      	b.n	800a954 <HAL_UART_IRQHandler+0x628>
      return;
 800a94a:	bf00      	nop
 800a94c:	e002      	b.n	800a954 <HAL_UART_IRQHandler+0x628>
      return;
 800a94e:	bf00      	nop
 800a950:	e000      	b.n	800a954 <HAL_UART_IRQHandler+0x628>
    return;
 800a952:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 800a954:	37e8      	adds	r7, #232	; 0xe8
 800a956:	46bd      	mov	sp, r7
 800a958:	bd80      	pop	{r7, pc}
 800a95a:	bf00      	nop

0800a95c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a95c:	b480      	push	{r7}
 800a95e:	b083      	sub	sp, #12
 800a960:	af00      	add	r7, sp, #0
 800a962:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a964:	bf00      	nop
 800a966:	370c      	adds	r7, #12
 800a968:	46bd      	mov	sp, r7
 800a96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96e:	4770      	bx	lr

0800a970 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a970:	b480      	push	{r7}
 800a972:	b083      	sub	sp, #12
 800a974:	af00      	add	r7, sp, #0
 800a976:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a978:	bf00      	nop
 800a97a:	370c      	adds	r7, #12
 800a97c:	46bd      	mov	sp, r7
 800a97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a982:	4770      	bx	lr

0800a984 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a984:	b480      	push	{r7}
 800a986:	b083      	sub	sp, #12
 800a988:	af00      	add	r7, sp, #0
 800a98a:	6078      	str	r0, [r7, #4]
 800a98c:	460b      	mov	r3, r1
 800a98e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a990:	bf00      	nop
 800a992:	370c      	adds	r7, #12
 800a994:	46bd      	mov	sp, r7
 800a996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a99a:	4770      	bx	lr

0800a99c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a99c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a9a0:	b08c      	sub	sp, #48	; 0x30
 800a9a2:	af00      	add	r7, sp, #0
 800a9a4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a9a6:	2300      	movs	r3, #0
 800a9a8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a9ac:	697b      	ldr	r3, [r7, #20]
 800a9ae:	689a      	ldr	r2, [r3, #8]
 800a9b0:	697b      	ldr	r3, [r7, #20]
 800a9b2:	691b      	ldr	r3, [r3, #16]
 800a9b4:	431a      	orrs	r2, r3
 800a9b6:	697b      	ldr	r3, [r7, #20]
 800a9b8:	695b      	ldr	r3, [r3, #20]
 800a9ba:	431a      	orrs	r2, r3
 800a9bc:	697b      	ldr	r3, [r7, #20]
 800a9be:	69db      	ldr	r3, [r3, #28]
 800a9c0:	4313      	orrs	r3, r2
 800a9c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a9c4:	697b      	ldr	r3, [r7, #20]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	681a      	ldr	r2, [r3, #0]
 800a9ca:	4baa      	ldr	r3, [pc, #680]	; (800ac74 <UART_SetConfig+0x2d8>)
 800a9cc:	4013      	ands	r3, r2
 800a9ce:	697a      	ldr	r2, [r7, #20]
 800a9d0:	6812      	ldr	r2, [r2, #0]
 800a9d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a9d4:	430b      	orrs	r3, r1
 800a9d6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a9d8:	697b      	ldr	r3, [r7, #20]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	685b      	ldr	r3, [r3, #4]
 800a9de:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a9e2:	697b      	ldr	r3, [r7, #20]
 800a9e4:	68da      	ldr	r2, [r3, #12]
 800a9e6:	697b      	ldr	r3, [r7, #20]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	430a      	orrs	r2, r1
 800a9ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a9ee:	697b      	ldr	r3, [r7, #20]
 800a9f0:	699b      	ldr	r3, [r3, #24]
 800a9f2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a9f4:	697b      	ldr	r3, [r7, #20]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	4a9f      	ldr	r2, [pc, #636]	; (800ac78 <UART_SetConfig+0x2dc>)
 800a9fa:	4293      	cmp	r3, r2
 800a9fc:	d004      	beq.n	800aa08 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a9fe:	697b      	ldr	r3, [r7, #20]
 800aa00:	6a1b      	ldr	r3, [r3, #32]
 800aa02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aa04:	4313      	orrs	r3, r2
 800aa06:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800aa08:	697b      	ldr	r3, [r7, #20]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	689b      	ldr	r3, [r3, #8]
 800aa0e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800aa12:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800aa16:	697a      	ldr	r2, [r7, #20]
 800aa18:	6812      	ldr	r2, [r2, #0]
 800aa1a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800aa1c:	430b      	orrs	r3, r1
 800aa1e:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800aa20:	697b      	ldr	r3, [r7, #20]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa26:	f023 010f 	bic.w	r1, r3, #15
 800aa2a:	697b      	ldr	r3, [r7, #20]
 800aa2c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800aa2e:	697b      	ldr	r3, [r7, #20]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	430a      	orrs	r2, r1
 800aa34:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800aa36:	697b      	ldr	r3, [r7, #20]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	4a90      	ldr	r2, [pc, #576]	; (800ac7c <UART_SetConfig+0x2e0>)
 800aa3c:	4293      	cmp	r3, r2
 800aa3e:	d125      	bne.n	800aa8c <UART_SetConfig+0xf0>
 800aa40:	4b8f      	ldr	r3, [pc, #572]	; (800ac80 <UART_SetConfig+0x2e4>)
 800aa42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa46:	f003 0303 	and.w	r3, r3, #3
 800aa4a:	2b03      	cmp	r3, #3
 800aa4c:	d81a      	bhi.n	800aa84 <UART_SetConfig+0xe8>
 800aa4e:	a201      	add	r2, pc, #4	; (adr r2, 800aa54 <UART_SetConfig+0xb8>)
 800aa50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa54:	0800aa65 	.word	0x0800aa65
 800aa58:	0800aa75 	.word	0x0800aa75
 800aa5c:	0800aa6d 	.word	0x0800aa6d
 800aa60:	0800aa7d 	.word	0x0800aa7d
 800aa64:	2301      	movs	r3, #1
 800aa66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aa6a:	e116      	b.n	800ac9a <UART_SetConfig+0x2fe>
 800aa6c:	2302      	movs	r3, #2
 800aa6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aa72:	e112      	b.n	800ac9a <UART_SetConfig+0x2fe>
 800aa74:	2304      	movs	r3, #4
 800aa76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aa7a:	e10e      	b.n	800ac9a <UART_SetConfig+0x2fe>
 800aa7c:	2308      	movs	r3, #8
 800aa7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aa82:	e10a      	b.n	800ac9a <UART_SetConfig+0x2fe>
 800aa84:	2310      	movs	r3, #16
 800aa86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aa8a:	e106      	b.n	800ac9a <UART_SetConfig+0x2fe>
 800aa8c:	697b      	ldr	r3, [r7, #20]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	4a7c      	ldr	r2, [pc, #496]	; (800ac84 <UART_SetConfig+0x2e8>)
 800aa92:	4293      	cmp	r3, r2
 800aa94:	d138      	bne.n	800ab08 <UART_SetConfig+0x16c>
 800aa96:	4b7a      	ldr	r3, [pc, #488]	; (800ac80 <UART_SetConfig+0x2e4>)
 800aa98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa9c:	f003 030c 	and.w	r3, r3, #12
 800aaa0:	2b0c      	cmp	r3, #12
 800aaa2:	d82d      	bhi.n	800ab00 <UART_SetConfig+0x164>
 800aaa4:	a201      	add	r2, pc, #4	; (adr r2, 800aaac <UART_SetConfig+0x110>)
 800aaa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aaaa:	bf00      	nop
 800aaac:	0800aae1 	.word	0x0800aae1
 800aab0:	0800ab01 	.word	0x0800ab01
 800aab4:	0800ab01 	.word	0x0800ab01
 800aab8:	0800ab01 	.word	0x0800ab01
 800aabc:	0800aaf1 	.word	0x0800aaf1
 800aac0:	0800ab01 	.word	0x0800ab01
 800aac4:	0800ab01 	.word	0x0800ab01
 800aac8:	0800ab01 	.word	0x0800ab01
 800aacc:	0800aae9 	.word	0x0800aae9
 800aad0:	0800ab01 	.word	0x0800ab01
 800aad4:	0800ab01 	.word	0x0800ab01
 800aad8:	0800ab01 	.word	0x0800ab01
 800aadc:	0800aaf9 	.word	0x0800aaf9
 800aae0:	2300      	movs	r3, #0
 800aae2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aae6:	e0d8      	b.n	800ac9a <UART_SetConfig+0x2fe>
 800aae8:	2302      	movs	r3, #2
 800aaea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aaee:	e0d4      	b.n	800ac9a <UART_SetConfig+0x2fe>
 800aaf0:	2304      	movs	r3, #4
 800aaf2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aaf6:	e0d0      	b.n	800ac9a <UART_SetConfig+0x2fe>
 800aaf8:	2308      	movs	r3, #8
 800aafa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aafe:	e0cc      	b.n	800ac9a <UART_SetConfig+0x2fe>
 800ab00:	2310      	movs	r3, #16
 800ab02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ab06:	e0c8      	b.n	800ac9a <UART_SetConfig+0x2fe>
 800ab08:	697b      	ldr	r3, [r7, #20]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	4a5e      	ldr	r2, [pc, #376]	; (800ac88 <UART_SetConfig+0x2ec>)
 800ab0e:	4293      	cmp	r3, r2
 800ab10:	d125      	bne.n	800ab5e <UART_SetConfig+0x1c2>
 800ab12:	4b5b      	ldr	r3, [pc, #364]	; (800ac80 <UART_SetConfig+0x2e4>)
 800ab14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab18:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800ab1c:	2b30      	cmp	r3, #48	; 0x30
 800ab1e:	d016      	beq.n	800ab4e <UART_SetConfig+0x1b2>
 800ab20:	2b30      	cmp	r3, #48	; 0x30
 800ab22:	d818      	bhi.n	800ab56 <UART_SetConfig+0x1ba>
 800ab24:	2b20      	cmp	r3, #32
 800ab26:	d00a      	beq.n	800ab3e <UART_SetConfig+0x1a2>
 800ab28:	2b20      	cmp	r3, #32
 800ab2a:	d814      	bhi.n	800ab56 <UART_SetConfig+0x1ba>
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d002      	beq.n	800ab36 <UART_SetConfig+0x19a>
 800ab30:	2b10      	cmp	r3, #16
 800ab32:	d008      	beq.n	800ab46 <UART_SetConfig+0x1aa>
 800ab34:	e00f      	b.n	800ab56 <UART_SetConfig+0x1ba>
 800ab36:	2300      	movs	r3, #0
 800ab38:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ab3c:	e0ad      	b.n	800ac9a <UART_SetConfig+0x2fe>
 800ab3e:	2302      	movs	r3, #2
 800ab40:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ab44:	e0a9      	b.n	800ac9a <UART_SetConfig+0x2fe>
 800ab46:	2304      	movs	r3, #4
 800ab48:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ab4c:	e0a5      	b.n	800ac9a <UART_SetConfig+0x2fe>
 800ab4e:	2308      	movs	r3, #8
 800ab50:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ab54:	e0a1      	b.n	800ac9a <UART_SetConfig+0x2fe>
 800ab56:	2310      	movs	r3, #16
 800ab58:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ab5c:	e09d      	b.n	800ac9a <UART_SetConfig+0x2fe>
 800ab5e:	697b      	ldr	r3, [r7, #20]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	4a4a      	ldr	r2, [pc, #296]	; (800ac8c <UART_SetConfig+0x2f0>)
 800ab64:	4293      	cmp	r3, r2
 800ab66:	d125      	bne.n	800abb4 <UART_SetConfig+0x218>
 800ab68:	4b45      	ldr	r3, [pc, #276]	; (800ac80 <UART_SetConfig+0x2e4>)
 800ab6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab6e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800ab72:	2bc0      	cmp	r3, #192	; 0xc0
 800ab74:	d016      	beq.n	800aba4 <UART_SetConfig+0x208>
 800ab76:	2bc0      	cmp	r3, #192	; 0xc0
 800ab78:	d818      	bhi.n	800abac <UART_SetConfig+0x210>
 800ab7a:	2b80      	cmp	r3, #128	; 0x80
 800ab7c:	d00a      	beq.n	800ab94 <UART_SetConfig+0x1f8>
 800ab7e:	2b80      	cmp	r3, #128	; 0x80
 800ab80:	d814      	bhi.n	800abac <UART_SetConfig+0x210>
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d002      	beq.n	800ab8c <UART_SetConfig+0x1f0>
 800ab86:	2b40      	cmp	r3, #64	; 0x40
 800ab88:	d008      	beq.n	800ab9c <UART_SetConfig+0x200>
 800ab8a:	e00f      	b.n	800abac <UART_SetConfig+0x210>
 800ab8c:	2300      	movs	r3, #0
 800ab8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ab92:	e082      	b.n	800ac9a <UART_SetConfig+0x2fe>
 800ab94:	2302      	movs	r3, #2
 800ab96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ab9a:	e07e      	b.n	800ac9a <UART_SetConfig+0x2fe>
 800ab9c:	2304      	movs	r3, #4
 800ab9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aba2:	e07a      	b.n	800ac9a <UART_SetConfig+0x2fe>
 800aba4:	2308      	movs	r3, #8
 800aba6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800abaa:	e076      	b.n	800ac9a <UART_SetConfig+0x2fe>
 800abac:	2310      	movs	r3, #16
 800abae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800abb2:	e072      	b.n	800ac9a <UART_SetConfig+0x2fe>
 800abb4:	697b      	ldr	r3, [r7, #20]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	4a35      	ldr	r2, [pc, #212]	; (800ac90 <UART_SetConfig+0x2f4>)
 800abba:	4293      	cmp	r3, r2
 800abbc:	d12a      	bne.n	800ac14 <UART_SetConfig+0x278>
 800abbe:	4b30      	ldr	r3, [pc, #192]	; (800ac80 <UART_SetConfig+0x2e4>)
 800abc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800abc4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800abc8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800abcc:	d01a      	beq.n	800ac04 <UART_SetConfig+0x268>
 800abce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800abd2:	d81b      	bhi.n	800ac0c <UART_SetConfig+0x270>
 800abd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800abd8:	d00c      	beq.n	800abf4 <UART_SetConfig+0x258>
 800abda:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800abde:	d815      	bhi.n	800ac0c <UART_SetConfig+0x270>
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d003      	beq.n	800abec <UART_SetConfig+0x250>
 800abe4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800abe8:	d008      	beq.n	800abfc <UART_SetConfig+0x260>
 800abea:	e00f      	b.n	800ac0c <UART_SetConfig+0x270>
 800abec:	2300      	movs	r3, #0
 800abee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800abf2:	e052      	b.n	800ac9a <UART_SetConfig+0x2fe>
 800abf4:	2302      	movs	r3, #2
 800abf6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800abfa:	e04e      	b.n	800ac9a <UART_SetConfig+0x2fe>
 800abfc:	2304      	movs	r3, #4
 800abfe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ac02:	e04a      	b.n	800ac9a <UART_SetConfig+0x2fe>
 800ac04:	2308      	movs	r3, #8
 800ac06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ac0a:	e046      	b.n	800ac9a <UART_SetConfig+0x2fe>
 800ac0c:	2310      	movs	r3, #16
 800ac0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ac12:	e042      	b.n	800ac9a <UART_SetConfig+0x2fe>
 800ac14:	697b      	ldr	r3, [r7, #20]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	4a17      	ldr	r2, [pc, #92]	; (800ac78 <UART_SetConfig+0x2dc>)
 800ac1a:	4293      	cmp	r3, r2
 800ac1c:	d13a      	bne.n	800ac94 <UART_SetConfig+0x2f8>
 800ac1e:	4b18      	ldr	r3, [pc, #96]	; (800ac80 <UART_SetConfig+0x2e4>)
 800ac20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac24:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800ac28:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ac2c:	d01a      	beq.n	800ac64 <UART_SetConfig+0x2c8>
 800ac2e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ac32:	d81b      	bhi.n	800ac6c <UART_SetConfig+0x2d0>
 800ac34:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ac38:	d00c      	beq.n	800ac54 <UART_SetConfig+0x2b8>
 800ac3a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ac3e:	d815      	bhi.n	800ac6c <UART_SetConfig+0x2d0>
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d003      	beq.n	800ac4c <UART_SetConfig+0x2b0>
 800ac44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ac48:	d008      	beq.n	800ac5c <UART_SetConfig+0x2c0>
 800ac4a:	e00f      	b.n	800ac6c <UART_SetConfig+0x2d0>
 800ac4c:	2300      	movs	r3, #0
 800ac4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ac52:	e022      	b.n	800ac9a <UART_SetConfig+0x2fe>
 800ac54:	2302      	movs	r3, #2
 800ac56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ac5a:	e01e      	b.n	800ac9a <UART_SetConfig+0x2fe>
 800ac5c:	2304      	movs	r3, #4
 800ac5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ac62:	e01a      	b.n	800ac9a <UART_SetConfig+0x2fe>
 800ac64:	2308      	movs	r3, #8
 800ac66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ac6a:	e016      	b.n	800ac9a <UART_SetConfig+0x2fe>
 800ac6c:	2310      	movs	r3, #16
 800ac6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ac72:	e012      	b.n	800ac9a <UART_SetConfig+0x2fe>
 800ac74:	cfff69f3 	.word	0xcfff69f3
 800ac78:	40008000 	.word	0x40008000
 800ac7c:	40013800 	.word	0x40013800
 800ac80:	40021000 	.word	0x40021000
 800ac84:	40004400 	.word	0x40004400
 800ac88:	40004800 	.word	0x40004800
 800ac8c:	40004c00 	.word	0x40004c00
 800ac90:	40005000 	.word	0x40005000
 800ac94:	2310      	movs	r3, #16
 800ac96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ac9a:	697b      	ldr	r3, [r7, #20]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	4aae      	ldr	r2, [pc, #696]	; (800af58 <UART_SetConfig+0x5bc>)
 800aca0:	4293      	cmp	r3, r2
 800aca2:	f040 8097 	bne.w	800add4 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800aca6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800acaa:	2b08      	cmp	r3, #8
 800acac:	d823      	bhi.n	800acf6 <UART_SetConfig+0x35a>
 800acae:	a201      	add	r2, pc, #4	; (adr r2, 800acb4 <UART_SetConfig+0x318>)
 800acb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acb4:	0800acd9 	.word	0x0800acd9
 800acb8:	0800acf7 	.word	0x0800acf7
 800acbc:	0800ace1 	.word	0x0800ace1
 800acc0:	0800acf7 	.word	0x0800acf7
 800acc4:	0800ace7 	.word	0x0800ace7
 800acc8:	0800acf7 	.word	0x0800acf7
 800accc:	0800acf7 	.word	0x0800acf7
 800acd0:	0800acf7 	.word	0x0800acf7
 800acd4:	0800acef 	.word	0x0800acef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800acd8:	f7fe f8e2 	bl	8008ea0 <HAL_RCC_GetPCLK1Freq>
 800acdc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800acde:	e010      	b.n	800ad02 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ace0:	4b9e      	ldr	r3, [pc, #632]	; (800af5c <UART_SetConfig+0x5c0>)
 800ace2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800ace4:	e00d      	b.n	800ad02 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ace6:	f7fe f843 	bl	8008d70 <HAL_RCC_GetSysClockFreq>
 800acea:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800acec:	e009      	b.n	800ad02 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800acee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800acf2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800acf4:	e005      	b.n	800ad02 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800acf6:	2300      	movs	r3, #0
 800acf8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800acfa:	2301      	movs	r3, #1
 800acfc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800ad00:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ad02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	f000 8130 	beq.w	800af6a <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ad0a:	697b      	ldr	r3, [r7, #20]
 800ad0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad0e:	4a94      	ldr	r2, [pc, #592]	; (800af60 <UART_SetConfig+0x5c4>)
 800ad10:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ad14:	461a      	mov	r2, r3
 800ad16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad18:	fbb3 f3f2 	udiv	r3, r3, r2
 800ad1c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ad1e:	697b      	ldr	r3, [r7, #20]
 800ad20:	685a      	ldr	r2, [r3, #4]
 800ad22:	4613      	mov	r3, r2
 800ad24:	005b      	lsls	r3, r3, #1
 800ad26:	4413      	add	r3, r2
 800ad28:	69ba      	ldr	r2, [r7, #24]
 800ad2a:	429a      	cmp	r2, r3
 800ad2c:	d305      	bcc.n	800ad3a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ad2e:	697b      	ldr	r3, [r7, #20]
 800ad30:	685b      	ldr	r3, [r3, #4]
 800ad32:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ad34:	69ba      	ldr	r2, [r7, #24]
 800ad36:	429a      	cmp	r2, r3
 800ad38:	d903      	bls.n	800ad42 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800ad3a:	2301      	movs	r3, #1
 800ad3c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800ad40:	e113      	b.n	800af6a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ad42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad44:	2200      	movs	r2, #0
 800ad46:	60bb      	str	r3, [r7, #8]
 800ad48:	60fa      	str	r2, [r7, #12]
 800ad4a:	697b      	ldr	r3, [r7, #20]
 800ad4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad4e:	4a84      	ldr	r2, [pc, #528]	; (800af60 <UART_SetConfig+0x5c4>)
 800ad50:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ad54:	b29b      	uxth	r3, r3
 800ad56:	2200      	movs	r2, #0
 800ad58:	603b      	str	r3, [r7, #0]
 800ad5a:	607a      	str	r2, [r7, #4]
 800ad5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ad60:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ad64:	f7f5 ff88 	bl	8000c78 <__aeabi_uldivmod>
 800ad68:	4602      	mov	r2, r0
 800ad6a:	460b      	mov	r3, r1
 800ad6c:	4610      	mov	r0, r2
 800ad6e:	4619      	mov	r1, r3
 800ad70:	f04f 0200 	mov.w	r2, #0
 800ad74:	f04f 0300 	mov.w	r3, #0
 800ad78:	020b      	lsls	r3, r1, #8
 800ad7a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ad7e:	0202      	lsls	r2, r0, #8
 800ad80:	6979      	ldr	r1, [r7, #20]
 800ad82:	6849      	ldr	r1, [r1, #4]
 800ad84:	0849      	lsrs	r1, r1, #1
 800ad86:	2000      	movs	r0, #0
 800ad88:	460c      	mov	r4, r1
 800ad8a:	4605      	mov	r5, r0
 800ad8c:	eb12 0804 	adds.w	r8, r2, r4
 800ad90:	eb43 0905 	adc.w	r9, r3, r5
 800ad94:	697b      	ldr	r3, [r7, #20]
 800ad96:	685b      	ldr	r3, [r3, #4]
 800ad98:	2200      	movs	r2, #0
 800ad9a:	469a      	mov	sl, r3
 800ad9c:	4693      	mov	fp, r2
 800ad9e:	4652      	mov	r2, sl
 800ada0:	465b      	mov	r3, fp
 800ada2:	4640      	mov	r0, r8
 800ada4:	4649      	mov	r1, r9
 800ada6:	f7f5 ff67 	bl	8000c78 <__aeabi_uldivmod>
 800adaa:	4602      	mov	r2, r0
 800adac:	460b      	mov	r3, r1
 800adae:	4613      	mov	r3, r2
 800adb0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800adb2:	6a3b      	ldr	r3, [r7, #32]
 800adb4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800adb8:	d308      	bcc.n	800adcc <UART_SetConfig+0x430>
 800adba:	6a3b      	ldr	r3, [r7, #32]
 800adbc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800adc0:	d204      	bcs.n	800adcc <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800adc2:	697b      	ldr	r3, [r7, #20]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	6a3a      	ldr	r2, [r7, #32]
 800adc8:	60da      	str	r2, [r3, #12]
 800adca:	e0ce      	b.n	800af6a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800adcc:	2301      	movs	r3, #1
 800adce:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800add2:	e0ca      	b.n	800af6a <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800add4:	697b      	ldr	r3, [r7, #20]
 800add6:	69db      	ldr	r3, [r3, #28]
 800add8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800addc:	d166      	bne.n	800aeac <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800adde:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ade2:	2b08      	cmp	r3, #8
 800ade4:	d827      	bhi.n	800ae36 <UART_SetConfig+0x49a>
 800ade6:	a201      	add	r2, pc, #4	; (adr r2, 800adec <UART_SetConfig+0x450>)
 800ade8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adec:	0800ae11 	.word	0x0800ae11
 800adf0:	0800ae19 	.word	0x0800ae19
 800adf4:	0800ae21 	.word	0x0800ae21
 800adf8:	0800ae37 	.word	0x0800ae37
 800adfc:	0800ae27 	.word	0x0800ae27
 800ae00:	0800ae37 	.word	0x0800ae37
 800ae04:	0800ae37 	.word	0x0800ae37
 800ae08:	0800ae37 	.word	0x0800ae37
 800ae0c:	0800ae2f 	.word	0x0800ae2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ae10:	f7fe f846 	bl	8008ea0 <HAL_RCC_GetPCLK1Freq>
 800ae14:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ae16:	e014      	b.n	800ae42 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ae18:	f7fe f858 	bl	8008ecc <HAL_RCC_GetPCLK2Freq>
 800ae1c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ae1e:	e010      	b.n	800ae42 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ae20:	4b4e      	ldr	r3, [pc, #312]	; (800af5c <UART_SetConfig+0x5c0>)
 800ae22:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800ae24:	e00d      	b.n	800ae42 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ae26:	f7fd ffa3 	bl	8008d70 <HAL_RCC_GetSysClockFreq>
 800ae2a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ae2c:	e009      	b.n	800ae42 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ae2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ae32:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800ae34:	e005      	b.n	800ae42 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800ae36:	2300      	movs	r3, #0
 800ae38:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800ae3a:	2301      	movs	r3, #1
 800ae3c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800ae40:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ae42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	f000 8090 	beq.w	800af6a <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ae4a:	697b      	ldr	r3, [r7, #20]
 800ae4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae4e:	4a44      	ldr	r2, [pc, #272]	; (800af60 <UART_SetConfig+0x5c4>)
 800ae50:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ae54:	461a      	mov	r2, r3
 800ae56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae58:	fbb3 f3f2 	udiv	r3, r3, r2
 800ae5c:	005a      	lsls	r2, r3, #1
 800ae5e:	697b      	ldr	r3, [r7, #20]
 800ae60:	685b      	ldr	r3, [r3, #4]
 800ae62:	085b      	lsrs	r3, r3, #1
 800ae64:	441a      	add	r2, r3
 800ae66:	697b      	ldr	r3, [r7, #20]
 800ae68:	685b      	ldr	r3, [r3, #4]
 800ae6a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae6e:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ae70:	6a3b      	ldr	r3, [r7, #32]
 800ae72:	2b0f      	cmp	r3, #15
 800ae74:	d916      	bls.n	800aea4 <UART_SetConfig+0x508>
 800ae76:	6a3b      	ldr	r3, [r7, #32]
 800ae78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ae7c:	d212      	bcs.n	800aea4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ae7e:	6a3b      	ldr	r3, [r7, #32]
 800ae80:	b29b      	uxth	r3, r3
 800ae82:	f023 030f 	bic.w	r3, r3, #15
 800ae86:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ae88:	6a3b      	ldr	r3, [r7, #32]
 800ae8a:	085b      	lsrs	r3, r3, #1
 800ae8c:	b29b      	uxth	r3, r3
 800ae8e:	f003 0307 	and.w	r3, r3, #7
 800ae92:	b29a      	uxth	r2, r3
 800ae94:	8bfb      	ldrh	r3, [r7, #30]
 800ae96:	4313      	orrs	r3, r2
 800ae98:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800ae9a:	697b      	ldr	r3, [r7, #20]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	8bfa      	ldrh	r2, [r7, #30]
 800aea0:	60da      	str	r2, [r3, #12]
 800aea2:	e062      	b.n	800af6a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800aea4:	2301      	movs	r3, #1
 800aea6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800aeaa:	e05e      	b.n	800af6a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800aeac:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800aeb0:	2b08      	cmp	r3, #8
 800aeb2:	d828      	bhi.n	800af06 <UART_SetConfig+0x56a>
 800aeb4:	a201      	add	r2, pc, #4	; (adr r2, 800aebc <UART_SetConfig+0x520>)
 800aeb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aeba:	bf00      	nop
 800aebc:	0800aee1 	.word	0x0800aee1
 800aec0:	0800aee9 	.word	0x0800aee9
 800aec4:	0800aef1 	.word	0x0800aef1
 800aec8:	0800af07 	.word	0x0800af07
 800aecc:	0800aef7 	.word	0x0800aef7
 800aed0:	0800af07 	.word	0x0800af07
 800aed4:	0800af07 	.word	0x0800af07
 800aed8:	0800af07 	.word	0x0800af07
 800aedc:	0800aeff 	.word	0x0800aeff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800aee0:	f7fd ffde 	bl	8008ea0 <HAL_RCC_GetPCLK1Freq>
 800aee4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800aee6:	e014      	b.n	800af12 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800aee8:	f7fd fff0 	bl	8008ecc <HAL_RCC_GetPCLK2Freq>
 800aeec:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800aeee:	e010      	b.n	800af12 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800aef0:	4b1a      	ldr	r3, [pc, #104]	; (800af5c <UART_SetConfig+0x5c0>)
 800aef2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800aef4:	e00d      	b.n	800af12 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800aef6:	f7fd ff3b 	bl	8008d70 <HAL_RCC_GetSysClockFreq>
 800aefa:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800aefc:	e009      	b.n	800af12 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800aefe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800af02:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800af04:	e005      	b.n	800af12 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800af06:	2300      	movs	r3, #0
 800af08:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800af0a:	2301      	movs	r3, #1
 800af0c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800af10:	bf00      	nop
    }

    if (pclk != 0U)
 800af12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af14:	2b00      	cmp	r3, #0
 800af16:	d028      	beq.n	800af6a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800af18:	697b      	ldr	r3, [r7, #20]
 800af1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af1c:	4a10      	ldr	r2, [pc, #64]	; (800af60 <UART_SetConfig+0x5c4>)
 800af1e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800af22:	461a      	mov	r2, r3
 800af24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af26:	fbb3 f2f2 	udiv	r2, r3, r2
 800af2a:	697b      	ldr	r3, [r7, #20]
 800af2c:	685b      	ldr	r3, [r3, #4]
 800af2e:	085b      	lsrs	r3, r3, #1
 800af30:	441a      	add	r2, r3
 800af32:	697b      	ldr	r3, [r7, #20]
 800af34:	685b      	ldr	r3, [r3, #4]
 800af36:	fbb2 f3f3 	udiv	r3, r2, r3
 800af3a:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800af3c:	6a3b      	ldr	r3, [r7, #32]
 800af3e:	2b0f      	cmp	r3, #15
 800af40:	d910      	bls.n	800af64 <UART_SetConfig+0x5c8>
 800af42:	6a3b      	ldr	r3, [r7, #32]
 800af44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800af48:	d20c      	bcs.n	800af64 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800af4a:	6a3b      	ldr	r3, [r7, #32]
 800af4c:	b29a      	uxth	r2, r3
 800af4e:	697b      	ldr	r3, [r7, #20]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	60da      	str	r2, [r3, #12]
 800af54:	e009      	b.n	800af6a <UART_SetConfig+0x5ce>
 800af56:	bf00      	nop
 800af58:	40008000 	.word	0x40008000
 800af5c:	00f42400 	.word	0x00f42400
 800af60:	08014aac 	.word	0x08014aac
      }
      else
      {
        ret = HAL_ERROR;
 800af64:	2301      	movs	r3, #1
 800af66:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800af6a:	697b      	ldr	r3, [r7, #20]
 800af6c:	2201      	movs	r2, #1
 800af6e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800af72:	697b      	ldr	r3, [r7, #20]
 800af74:	2201      	movs	r2, #1
 800af76:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800af7a:	697b      	ldr	r3, [r7, #20]
 800af7c:	2200      	movs	r2, #0
 800af7e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800af80:	697b      	ldr	r3, [r7, #20]
 800af82:	2200      	movs	r2, #0
 800af84:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800af86:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800af8a:	4618      	mov	r0, r3
 800af8c:	3730      	adds	r7, #48	; 0x30
 800af8e:	46bd      	mov	sp, r7
 800af90:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800af94 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800af94:	b480      	push	{r7}
 800af96:	b083      	sub	sp, #12
 800af98:	af00      	add	r7, sp, #0
 800af9a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afa0:	f003 0301 	and.w	r3, r3, #1
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d00a      	beq.n	800afbe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	685b      	ldr	r3, [r3, #4]
 800afae:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	430a      	orrs	r2, r1
 800afbc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afc2:	f003 0302 	and.w	r3, r3, #2
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d00a      	beq.n	800afe0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	685b      	ldr	r3, [r3, #4]
 800afd0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	430a      	orrs	r2, r1
 800afde:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afe4:	f003 0304 	and.w	r3, r3, #4
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d00a      	beq.n	800b002 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	685b      	ldr	r3, [r3, #4]
 800aff2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	430a      	orrs	r2, r1
 800b000:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b006:	f003 0308 	and.w	r3, r3, #8
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d00a      	beq.n	800b024 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	685b      	ldr	r3, [r3, #4]
 800b014:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	430a      	orrs	r2, r1
 800b022:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b028:	f003 0310 	and.w	r3, r3, #16
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d00a      	beq.n	800b046 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	689b      	ldr	r3, [r3, #8]
 800b036:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	430a      	orrs	r2, r1
 800b044:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b04a:	f003 0320 	and.w	r3, r3, #32
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d00a      	beq.n	800b068 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	689b      	ldr	r3, [r3, #8]
 800b058:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	430a      	orrs	r2, r1
 800b066:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b06c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b070:	2b00      	cmp	r3, #0
 800b072:	d01a      	beq.n	800b0aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	685b      	ldr	r3, [r3, #4]
 800b07a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	430a      	orrs	r2, r1
 800b088:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b08e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b092:	d10a      	bne.n	800b0aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	685b      	ldr	r3, [r3, #4]
 800b09a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	430a      	orrs	r2, r1
 800b0a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d00a      	beq.n	800b0cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	685b      	ldr	r3, [r3, #4]
 800b0bc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	430a      	orrs	r2, r1
 800b0ca:	605a      	str	r2, [r3, #4]
  }
}
 800b0cc:	bf00      	nop
 800b0ce:	370c      	adds	r7, #12
 800b0d0:	46bd      	mov	sp, r7
 800b0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d6:	4770      	bx	lr

0800b0d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b0d8:	b580      	push	{r7, lr}
 800b0da:	b086      	sub	sp, #24
 800b0dc:	af02      	add	r7, sp, #8
 800b0de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	2200      	movs	r2, #0
 800b0e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b0e8:	f7fb f93c 	bl	8006364 <HAL_GetTick>
 800b0ec:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	f003 0308 	and.w	r3, r3, #8
 800b0f8:	2b08      	cmp	r3, #8
 800b0fa:	d10e      	bne.n	800b11a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b0fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b100:	9300      	str	r3, [sp, #0]
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	2200      	movs	r2, #0
 800b106:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b10a:	6878      	ldr	r0, [r7, #4]
 800b10c:	f000 f82f 	bl	800b16e <UART_WaitOnFlagUntilTimeout>
 800b110:	4603      	mov	r3, r0
 800b112:	2b00      	cmp	r3, #0
 800b114:	d001      	beq.n	800b11a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b116:	2303      	movs	r3, #3
 800b118:	e025      	b.n	800b166 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	f003 0304 	and.w	r3, r3, #4
 800b124:	2b04      	cmp	r3, #4
 800b126:	d10e      	bne.n	800b146 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b128:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b12c:	9300      	str	r3, [sp, #0]
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	2200      	movs	r2, #0
 800b132:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b136:	6878      	ldr	r0, [r7, #4]
 800b138:	f000 f819 	bl	800b16e <UART_WaitOnFlagUntilTimeout>
 800b13c:	4603      	mov	r3, r0
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d001      	beq.n	800b146 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b142:	2303      	movs	r3, #3
 800b144:	e00f      	b.n	800b166 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	2220      	movs	r2, #32
 800b14a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	2220      	movs	r2, #32
 800b152:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	2200      	movs	r2, #0
 800b15a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	2200      	movs	r2, #0
 800b160:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b164:	2300      	movs	r3, #0
}
 800b166:	4618      	mov	r0, r3
 800b168:	3710      	adds	r7, #16
 800b16a:	46bd      	mov	sp, r7
 800b16c:	bd80      	pop	{r7, pc}

0800b16e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b16e:	b580      	push	{r7, lr}
 800b170:	b09c      	sub	sp, #112	; 0x70
 800b172:	af00      	add	r7, sp, #0
 800b174:	60f8      	str	r0, [r7, #12]
 800b176:	60b9      	str	r1, [r7, #8]
 800b178:	603b      	str	r3, [r7, #0]
 800b17a:	4613      	mov	r3, r2
 800b17c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b17e:	e0a9      	b.n	800b2d4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b180:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b182:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b186:	f000 80a5 	beq.w	800b2d4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b18a:	f7fb f8eb 	bl	8006364 <HAL_GetTick>
 800b18e:	4602      	mov	r2, r0
 800b190:	683b      	ldr	r3, [r7, #0]
 800b192:	1ad3      	subs	r3, r2, r3
 800b194:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800b196:	429a      	cmp	r2, r3
 800b198:	d302      	bcc.n	800b1a0 <UART_WaitOnFlagUntilTimeout+0x32>
 800b19a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d140      	bne.n	800b222 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b1a8:	e853 3f00 	ldrex	r3, [r3]
 800b1ac:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b1ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b1b0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b1b4:	667b      	str	r3, [r7, #100]	; 0x64
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	461a      	mov	r2, r3
 800b1bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b1be:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b1c0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1c2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b1c4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b1c6:	e841 2300 	strex	r3, r2, [r1]
 800b1ca:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800b1cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d1e6      	bne.n	800b1a0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	3308      	adds	r3, #8
 800b1d8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b1dc:	e853 3f00 	ldrex	r3, [r3]
 800b1e0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b1e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1e4:	f023 0301 	bic.w	r3, r3, #1
 800b1e8:	663b      	str	r3, [r7, #96]	; 0x60
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	3308      	adds	r3, #8
 800b1f0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b1f2:	64ba      	str	r2, [r7, #72]	; 0x48
 800b1f4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1f6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b1f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b1fa:	e841 2300 	strex	r3, r2, [r1]
 800b1fe:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800b200:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b202:	2b00      	cmp	r3, #0
 800b204:	d1e5      	bne.n	800b1d2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	2220      	movs	r2, #32
 800b20a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	2220      	movs	r2, #32
 800b212:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	2200      	movs	r2, #0
 800b21a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800b21e:	2303      	movs	r3, #3
 800b220:	e069      	b.n	800b2f6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	f003 0304 	and.w	r3, r3, #4
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d051      	beq.n	800b2d4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	69db      	ldr	r3, [r3, #28]
 800b236:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b23a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b23e:	d149      	bne.n	800b2d4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b248:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b252:	e853 3f00 	ldrex	r3, [r3]
 800b256:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b25a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b25e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	461a      	mov	r2, r3
 800b266:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b268:	637b      	str	r3, [r7, #52]	; 0x34
 800b26a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b26c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b26e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b270:	e841 2300 	strex	r3, r2, [r1]
 800b274:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d1e6      	bne.n	800b24a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	3308      	adds	r3, #8
 800b282:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b284:	697b      	ldr	r3, [r7, #20]
 800b286:	e853 3f00 	ldrex	r3, [r3]
 800b28a:	613b      	str	r3, [r7, #16]
   return(result);
 800b28c:	693b      	ldr	r3, [r7, #16]
 800b28e:	f023 0301 	bic.w	r3, r3, #1
 800b292:	66bb      	str	r3, [r7, #104]	; 0x68
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	3308      	adds	r3, #8
 800b29a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b29c:	623a      	str	r2, [r7, #32]
 800b29e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2a0:	69f9      	ldr	r1, [r7, #28]
 800b2a2:	6a3a      	ldr	r2, [r7, #32]
 800b2a4:	e841 2300 	strex	r3, r2, [r1]
 800b2a8:	61bb      	str	r3, [r7, #24]
   return(result);
 800b2aa:	69bb      	ldr	r3, [r7, #24]
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d1e5      	bne.n	800b27c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	2220      	movs	r2, #32
 800b2b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	2220      	movs	r2, #32
 800b2bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	2220      	movs	r2, #32
 800b2c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	2200      	movs	r2, #0
 800b2cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800b2d0:	2303      	movs	r3, #3
 800b2d2:	e010      	b.n	800b2f6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	69da      	ldr	r2, [r3, #28]
 800b2da:	68bb      	ldr	r3, [r7, #8]
 800b2dc:	4013      	ands	r3, r2
 800b2de:	68ba      	ldr	r2, [r7, #8]
 800b2e0:	429a      	cmp	r2, r3
 800b2e2:	bf0c      	ite	eq
 800b2e4:	2301      	moveq	r3, #1
 800b2e6:	2300      	movne	r3, #0
 800b2e8:	b2db      	uxtb	r3, r3
 800b2ea:	461a      	mov	r2, r3
 800b2ec:	79fb      	ldrb	r3, [r7, #7]
 800b2ee:	429a      	cmp	r2, r3
 800b2f0:	f43f af46 	beq.w	800b180 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b2f4:	2300      	movs	r3, #0
}
 800b2f6:	4618      	mov	r0, r3
 800b2f8:	3770      	adds	r7, #112	; 0x70
 800b2fa:	46bd      	mov	sp, r7
 800b2fc:	bd80      	pop	{r7, pc}
	...

0800b300 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b300:	b480      	push	{r7}
 800b302:	b0a3      	sub	sp, #140	; 0x8c
 800b304:	af00      	add	r7, sp, #0
 800b306:	60f8      	str	r0, [r7, #12]
 800b308:	60b9      	str	r1, [r7, #8]
 800b30a:	4613      	mov	r3, r2
 800b30c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	68ba      	ldr	r2, [r7, #8]
 800b312:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	88fa      	ldrh	r2, [r7, #6]
 800b318:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	88fa      	ldrh	r2, [r7, #6]
 800b320:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	2200      	movs	r2, #0
 800b328:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	689b      	ldr	r3, [r3, #8]
 800b32e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b332:	d10e      	bne.n	800b352 <UART_Start_Receive_IT+0x52>
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	691b      	ldr	r3, [r3, #16]
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d105      	bne.n	800b348 <UART_Start_Receive_IT+0x48>
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	f240 12ff 	movw	r2, #511	; 0x1ff
 800b342:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b346:	e02d      	b.n	800b3a4 <UART_Start_Receive_IT+0xa4>
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	22ff      	movs	r2, #255	; 0xff
 800b34c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b350:	e028      	b.n	800b3a4 <UART_Start_Receive_IT+0xa4>
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	689b      	ldr	r3, [r3, #8]
 800b356:	2b00      	cmp	r3, #0
 800b358:	d10d      	bne.n	800b376 <UART_Start_Receive_IT+0x76>
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	691b      	ldr	r3, [r3, #16]
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d104      	bne.n	800b36c <UART_Start_Receive_IT+0x6c>
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	22ff      	movs	r2, #255	; 0xff
 800b366:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b36a:	e01b      	b.n	800b3a4 <UART_Start_Receive_IT+0xa4>
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	227f      	movs	r2, #127	; 0x7f
 800b370:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b374:	e016      	b.n	800b3a4 <UART_Start_Receive_IT+0xa4>
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	689b      	ldr	r3, [r3, #8]
 800b37a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b37e:	d10d      	bne.n	800b39c <UART_Start_Receive_IT+0x9c>
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	691b      	ldr	r3, [r3, #16]
 800b384:	2b00      	cmp	r3, #0
 800b386:	d104      	bne.n	800b392 <UART_Start_Receive_IT+0x92>
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	227f      	movs	r2, #127	; 0x7f
 800b38c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b390:	e008      	b.n	800b3a4 <UART_Start_Receive_IT+0xa4>
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	223f      	movs	r2, #63	; 0x3f
 800b396:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b39a:	e003      	b.n	800b3a4 <UART_Start_Receive_IT+0xa4>
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	2200      	movs	r2, #0
 800b3a0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	2200      	movs	r2, #0
 800b3a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	2222      	movs	r2, #34	; 0x22
 800b3b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	3308      	adds	r3, #8
 800b3ba:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b3be:	e853 3f00 	ldrex	r3, [r3]
 800b3c2:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800b3c4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b3c6:	f043 0301 	orr.w	r3, r3, #1
 800b3ca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	3308      	adds	r3, #8
 800b3d4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800b3d8:	673a      	str	r2, [r7, #112]	; 0x70
 800b3da:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3dc:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800b3de:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800b3e0:	e841 2300 	strex	r3, r2, [r1]
 800b3e4:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800b3e6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d1e3      	bne.n	800b3b4 <UART_Start_Receive_IT+0xb4>

#if defined(USART_CR1_FIFOEN)
  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b3f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b3f4:	d153      	bne.n	800b49e <UART_Start_Receive_IT+0x19e>
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b3fc:	88fa      	ldrh	r2, [r7, #6]
 800b3fe:	429a      	cmp	r2, r3
 800b400:	d34d      	bcc.n	800b49e <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	689b      	ldr	r3, [r3, #8]
 800b406:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b40a:	d107      	bne.n	800b41c <UART_Start_Receive_IT+0x11c>
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	691b      	ldr	r3, [r3, #16]
 800b410:	2b00      	cmp	r3, #0
 800b412:	d103      	bne.n	800b41c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	4a4b      	ldr	r2, [pc, #300]	; (800b544 <UART_Start_Receive_IT+0x244>)
 800b418:	671a      	str	r2, [r3, #112]	; 0x70
 800b41a:	e002      	b.n	800b422 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	4a4a      	ldr	r2, [pc, #296]	; (800b548 <UART_Start_Receive_IT+0x248>)
 800b420:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	2200      	movs	r2, #0
 800b426:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	691b      	ldr	r3, [r3, #16]
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d01a      	beq.n	800b468 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b438:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b43a:	e853 3f00 	ldrex	r3, [r3]
 800b43e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b440:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b442:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b446:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	461a      	mov	r2, r3
 800b450:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b454:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b456:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b458:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b45a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b45c:	e841 2300 	strex	r3, r2, [r1]
 800b460:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800b462:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b464:	2b00      	cmp	r3, #0
 800b466:	d1e4      	bne.n	800b432 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	3308      	adds	r3, #8
 800b46e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b470:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b472:	e853 3f00 	ldrex	r3, [r3]
 800b476:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b47a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b47e:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	3308      	adds	r3, #8
 800b486:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800b488:	64ba      	str	r2, [r7, #72]	; 0x48
 800b48a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b48c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b48e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b490:	e841 2300 	strex	r3, r2, [r1]
 800b494:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800b496:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d1e5      	bne.n	800b468 <UART_Start_Receive_IT+0x168>
 800b49c:	e04a      	b.n	800b534 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	689b      	ldr	r3, [r3, #8]
 800b4a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b4a6:	d107      	bne.n	800b4b8 <UART_Start_Receive_IT+0x1b8>
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	691b      	ldr	r3, [r3, #16]
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d103      	bne.n	800b4b8 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	4a26      	ldr	r2, [pc, #152]	; (800b54c <UART_Start_Receive_IT+0x24c>)
 800b4b4:	671a      	str	r2, [r3, #112]	; 0x70
 800b4b6:	e002      	b.n	800b4be <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	4a25      	ldr	r2, [pc, #148]	; (800b550 <UART_Start_Receive_IT+0x250>)
 800b4bc:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	2200      	movs	r2, #0
 800b4c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	691b      	ldr	r3, [r3, #16]
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d019      	beq.n	800b502 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4d6:	e853 3f00 	ldrex	r3, [r3]
 800b4da:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b4dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4de:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800b4e2:	677b      	str	r3, [r7, #116]	; 0x74
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	461a      	mov	r2, r3
 800b4ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b4ec:	637b      	str	r3, [r7, #52]	; 0x34
 800b4ee:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4f0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b4f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b4f4:	e841 2300 	strex	r3, r2, [r1]
 800b4f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b4fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d1e6      	bne.n	800b4ce <UART_Start_Receive_IT+0x1ce>
 800b500:	e018      	b.n	800b534 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b508:	697b      	ldr	r3, [r7, #20]
 800b50a:	e853 3f00 	ldrex	r3, [r3]
 800b50e:	613b      	str	r3, [r7, #16]
   return(result);
 800b510:	693b      	ldr	r3, [r7, #16]
 800b512:	f043 0320 	orr.w	r3, r3, #32
 800b516:	67bb      	str	r3, [r7, #120]	; 0x78
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	461a      	mov	r2, r3
 800b51e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b520:	623b      	str	r3, [r7, #32]
 800b522:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b524:	69f9      	ldr	r1, [r7, #28]
 800b526:	6a3a      	ldr	r2, [r7, #32]
 800b528:	e841 2300 	strex	r3, r2, [r1]
 800b52c:	61bb      	str	r3, [r7, #24]
   return(result);
 800b52e:	69bb      	ldr	r3, [r7, #24]
 800b530:	2b00      	cmp	r3, #0
 800b532:	d1e6      	bne.n	800b502 <UART_Start_Receive_IT+0x202>
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800b534:	2300      	movs	r3, #0
}
 800b536:	4618      	mov	r0, r3
 800b538:	378c      	adds	r7, #140	; 0x8c
 800b53a:	46bd      	mov	sp, r7
 800b53c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b540:	4770      	bx	lr
 800b542:	bf00      	nop
 800b544:	0800bc69 	.word	0x0800bc69
 800b548:	0800b96d 	.word	0x0800b96d
 800b54c:	0800b807 	.word	0x0800b807
 800b550:	0800b6a3 	.word	0x0800b6a3

0800b554 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b554:	b480      	push	{r7}
 800b556:	b095      	sub	sp, #84	; 0x54
 800b558:	af00      	add	r7, sp, #0
 800b55a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b562:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b564:	e853 3f00 	ldrex	r3, [r3]
 800b568:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b56a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b56c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b570:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	461a      	mov	r2, r3
 800b578:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b57a:	643b      	str	r3, [r7, #64]	; 0x40
 800b57c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b57e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b580:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b582:	e841 2300 	strex	r3, r2, [r1]
 800b586:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d1e6      	bne.n	800b55c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	3308      	adds	r3, #8
 800b594:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b596:	6a3b      	ldr	r3, [r7, #32]
 800b598:	e853 3f00 	ldrex	r3, [r3]
 800b59c:	61fb      	str	r3, [r7, #28]
   return(result);
 800b59e:	69fb      	ldr	r3, [r7, #28]
 800b5a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b5a4:	f023 0301 	bic.w	r3, r3, #1
 800b5a8:	64bb      	str	r3, [r7, #72]	; 0x48
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	3308      	adds	r3, #8
 800b5b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b5b2:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b5b4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5b6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b5b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b5ba:	e841 2300 	strex	r3, r2, [r1]
 800b5be:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b5c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d1e3      	bne.n	800b58e <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b5ca:	2b01      	cmp	r3, #1
 800b5cc:	d118      	bne.n	800b600 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	e853 3f00 	ldrex	r3, [r3]
 800b5da:	60bb      	str	r3, [r7, #8]
   return(result);
 800b5dc:	68bb      	ldr	r3, [r7, #8]
 800b5de:	f023 0310 	bic.w	r3, r3, #16
 800b5e2:	647b      	str	r3, [r7, #68]	; 0x44
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	461a      	mov	r2, r3
 800b5ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b5ec:	61bb      	str	r3, [r7, #24]
 800b5ee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5f0:	6979      	ldr	r1, [r7, #20]
 800b5f2:	69ba      	ldr	r2, [r7, #24]
 800b5f4:	e841 2300 	strex	r3, r2, [r1]
 800b5f8:	613b      	str	r3, [r7, #16]
   return(result);
 800b5fa:	693b      	ldr	r3, [r7, #16]
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d1e6      	bne.n	800b5ce <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	2220      	movs	r2, #32
 800b604:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	2200      	movs	r2, #0
 800b60c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	2200      	movs	r2, #0
 800b612:	671a      	str	r2, [r3, #112]	; 0x70
}
 800b614:	bf00      	nop
 800b616:	3754      	adds	r7, #84	; 0x54
 800b618:	46bd      	mov	sp, r7
 800b61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b61e:	4770      	bx	lr

0800b620 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b620:	b580      	push	{r7, lr}
 800b622:	b084      	sub	sp, #16
 800b624:	af00      	add	r7, sp, #0
 800b626:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b62c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	2200      	movs	r2, #0
 800b632:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	2200      	movs	r2, #0
 800b63a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b63e:	68f8      	ldr	r0, [r7, #12]
 800b640:	f7ff f996 	bl	800a970 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b644:	bf00      	nop
 800b646:	3710      	adds	r7, #16
 800b648:	46bd      	mov	sp, r7
 800b64a:	bd80      	pop	{r7, pc}

0800b64c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b64c:	b580      	push	{r7, lr}
 800b64e:	b088      	sub	sp, #32
 800b650:	af00      	add	r7, sp, #0
 800b652:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	e853 3f00 	ldrex	r3, [r3]
 800b660:	60bb      	str	r3, [r7, #8]
   return(result);
 800b662:	68bb      	ldr	r3, [r7, #8]
 800b664:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b668:	61fb      	str	r3, [r7, #28]
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	461a      	mov	r2, r3
 800b670:	69fb      	ldr	r3, [r7, #28]
 800b672:	61bb      	str	r3, [r7, #24]
 800b674:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b676:	6979      	ldr	r1, [r7, #20]
 800b678:	69ba      	ldr	r2, [r7, #24]
 800b67a:	e841 2300 	strex	r3, r2, [r1]
 800b67e:	613b      	str	r3, [r7, #16]
   return(result);
 800b680:	693b      	ldr	r3, [r7, #16]
 800b682:	2b00      	cmp	r3, #0
 800b684:	d1e6      	bne.n	800b654 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	2220      	movs	r2, #32
 800b68a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	2200      	movs	r2, #0
 800b692:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b694:	6878      	ldr	r0, [r7, #4]
 800b696:	f7ff f961 	bl	800a95c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b69a:	bf00      	nop
 800b69c:	3720      	adds	r7, #32
 800b69e:	46bd      	mov	sp, r7
 800b6a0:	bd80      	pop	{r7, pc}

0800b6a2 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800b6a2:	b580      	push	{r7, lr}
 800b6a4:	b096      	sub	sp, #88	; 0x58
 800b6a6:	af00      	add	r7, sp, #0
 800b6a8:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b6b0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b6ba:	2b22      	cmp	r3, #34	; 0x22
 800b6bc:	f040 8095 	bne.w	800b7ea <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800b6c6:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800b6ca:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800b6ce:	b2d9      	uxtb	r1, r3
 800b6d0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800b6d4:	b2da      	uxtb	r2, r3
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b6da:	400a      	ands	r2, r1
 800b6dc:	b2d2      	uxtb	r2, r2
 800b6de:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b6e4:	1c5a      	adds	r2, r3, #1
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b6f0:	b29b      	uxth	r3, r3
 800b6f2:	3b01      	subs	r3, #1
 800b6f4:	b29a      	uxth	r2, r3
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b702:	b29b      	uxth	r3, r3
 800b704:	2b00      	cmp	r3, #0
 800b706:	d17a      	bne.n	800b7fe <UART_RxISR_8BIT+0x15c>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b70e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b710:	e853 3f00 	ldrex	r3, [r3]
 800b714:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b716:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b718:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b71c:	653b      	str	r3, [r7, #80]	; 0x50
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	461a      	mov	r2, r3
 800b724:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b726:	647b      	str	r3, [r7, #68]	; 0x44
 800b728:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b72a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b72c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b72e:	e841 2300 	strex	r3, r2, [r1]
 800b732:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b734:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b736:	2b00      	cmp	r3, #0
 800b738:	d1e6      	bne.n	800b708 <UART_RxISR_8BIT+0x66>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	3308      	adds	r3, #8
 800b740:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b744:	e853 3f00 	ldrex	r3, [r3]
 800b748:	623b      	str	r3, [r7, #32]
   return(result);
 800b74a:	6a3b      	ldr	r3, [r7, #32]
 800b74c:	f023 0301 	bic.w	r3, r3, #1
 800b750:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	3308      	adds	r3, #8
 800b758:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b75a:	633a      	str	r2, [r7, #48]	; 0x30
 800b75c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b75e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b760:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b762:	e841 2300 	strex	r3, r2, [r1]
 800b766:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d1e5      	bne.n	800b73a <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	2220      	movs	r2, #32
 800b772:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	2200      	movs	r2, #0
 800b77a:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b780:	2b01      	cmp	r3, #1
 800b782:	d12e      	bne.n	800b7e2 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	2200      	movs	r2, #0
 800b788:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b790:	693b      	ldr	r3, [r7, #16]
 800b792:	e853 3f00 	ldrex	r3, [r3]
 800b796:	60fb      	str	r3, [r7, #12]
   return(result);
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	f023 0310 	bic.w	r3, r3, #16
 800b79e:	64bb      	str	r3, [r7, #72]	; 0x48
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	461a      	mov	r2, r3
 800b7a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b7a8:	61fb      	str	r3, [r7, #28]
 800b7aa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7ac:	69b9      	ldr	r1, [r7, #24]
 800b7ae:	69fa      	ldr	r2, [r7, #28]
 800b7b0:	e841 2300 	strex	r3, r2, [r1]
 800b7b4:	617b      	str	r3, [r7, #20]
   return(result);
 800b7b6:	697b      	ldr	r3, [r7, #20]
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d1e6      	bne.n	800b78a <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	69db      	ldr	r3, [r3, #28]
 800b7c2:	f003 0310 	and.w	r3, r3, #16
 800b7c6:	2b10      	cmp	r3, #16
 800b7c8:	d103      	bne.n	800b7d2 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	2210      	movs	r2, #16
 800b7d0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b7d8:	4619      	mov	r1, r3
 800b7da:	6878      	ldr	r0, [r7, #4]
 800b7dc:	f7ff f8d2 	bl	800a984 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b7e0:	e00d      	b.n	800b7fe <UART_RxISR_8BIT+0x15c>
        HAL_UART_RxCpltCallback(huart);
 800b7e2:	6878      	ldr	r0, [r7, #4]
 800b7e4:	f7fa fc52 	bl	800608c <HAL_UART_RxCpltCallback>
}
 800b7e8:	e009      	b.n	800b7fe <UART_RxISR_8BIT+0x15c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	8b1b      	ldrh	r3, [r3, #24]
 800b7f0:	b29a      	uxth	r2, r3
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	f042 0208 	orr.w	r2, r2, #8
 800b7fa:	b292      	uxth	r2, r2
 800b7fc:	831a      	strh	r2, [r3, #24]
}
 800b7fe:	bf00      	nop
 800b800:	3758      	adds	r7, #88	; 0x58
 800b802:	46bd      	mov	sp, r7
 800b804:	bd80      	pop	{r7, pc}

0800b806 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800b806:	b580      	push	{r7, lr}
 800b808:	b096      	sub	sp, #88	; 0x58
 800b80a:	af00      	add	r7, sp, #0
 800b80c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b814:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b81e:	2b22      	cmp	r3, #34	; 0x22
 800b820:	f040 8095 	bne.w	800b94e <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800b82a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b832:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800b834:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800b838:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800b83c:	4013      	ands	r3, r2
 800b83e:	b29a      	uxth	r2, r3
 800b840:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b842:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b848:	1c9a      	adds	r2, r3, #2
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b854:	b29b      	uxth	r3, r3
 800b856:	3b01      	subs	r3, #1
 800b858:	b29a      	uxth	r2, r3
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b866:	b29b      	uxth	r3, r3
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d17a      	bne.n	800b962 <UART_RxISR_16BIT+0x15c>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b872:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b874:	e853 3f00 	ldrex	r3, [r3]
 800b878:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b87a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b87c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b880:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	461a      	mov	r2, r3
 800b888:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b88a:	643b      	str	r3, [r7, #64]	; 0x40
 800b88c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b88e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b890:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b892:	e841 2300 	strex	r3, r2, [r1]
 800b896:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d1e6      	bne.n	800b86c <UART_RxISR_16BIT+0x66>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	3308      	adds	r3, #8
 800b8a4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8a6:	6a3b      	ldr	r3, [r7, #32]
 800b8a8:	e853 3f00 	ldrex	r3, [r3]
 800b8ac:	61fb      	str	r3, [r7, #28]
   return(result);
 800b8ae:	69fb      	ldr	r3, [r7, #28]
 800b8b0:	f023 0301 	bic.w	r3, r3, #1
 800b8b4:	64bb      	str	r3, [r7, #72]	; 0x48
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	3308      	adds	r3, #8
 800b8bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b8be:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b8c0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8c2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b8c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b8c6:	e841 2300 	strex	r3, r2, [r1]
 800b8ca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b8cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d1e5      	bne.n	800b89e <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	2220      	movs	r2, #32
 800b8d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	2200      	movs	r2, #0
 800b8de:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b8e4:	2b01      	cmp	r3, #1
 800b8e6:	d12e      	bne.n	800b946 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	2200      	movs	r2, #0
 800b8ec:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	e853 3f00 	ldrex	r3, [r3]
 800b8fa:	60bb      	str	r3, [r7, #8]
   return(result);
 800b8fc:	68bb      	ldr	r3, [r7, #8]
 800b8fe:	f023 0310 	bic.w	r3, r3, #16
 800b902:	647b      	str	r3, [r7, #68]	; 0x44
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	461a      	mov	r2, r3
 800b90a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b90c:	61bb      	str	r3, [r7, #24]
 800b90e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b910:	6979      	ldr	r1, [r7, #20]
 800b912:	69ba      	ldr	r2, [r7, #24]
 800b914:	e841 2300 	strex	r3, r2, [r1]
 800b918:	613b      	str	r3, [r7, #16]
   return(result);
 800b91a:	693b      	ldr	r3, [r7, #16]
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d1e6      	bne.n	800b8ee <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	69db      	ldr	r3, [r3, #28]
 800b926:	f003 0310 	and.w	r3, r3, #16
 800b92a:	2b10      	cmp	r3, #16
 800b92c:	d103      	bne.n	800b936 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	2210      	movs	r2, #16
 800b934:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b93c:	4619      	mov	r1, r3
 800b93e:	6878      	ldr	r0, [r7, #4]
 800b940:	f7ff f820 	bl	800a984 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b944:	e00d      	b.n	800b962 <UART_RxISR_16BIT+0x15c>
        HAL_UART_RxCpltCallback(huart);
 800b946:	6878      	ldr	r0, [r7, #4]
 800b948:	f7fa fba0 	bl	800608c <HAL_UART_RxCpltCallback>
}
 800b94c:	e009      	b.n	800b962 <UART_RxISR_16BIT+0x15c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	8b1b      	ldrh	r3, [r3, #24]
 800b954:	b29a      	uxth	r2, r3
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	f042 0208 	orr.w	r2, r2, #8
 800b95e:	b292      	uxth	r2, r2
 800b960:	831a      	strh	r2, [r3, #24]
}
 800b962:	bf00      	nop
 800b964:	3758      	adds	r7, #88	; 0x58
 800b966:	46bd      	mov	sp, r7
 800b968:	bd80      	pop	{r7, pc}
	...

0800b96c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800b96c:	b580      	push	{r7, lr}
 800b96e:	b0a6      	sub	sp, #152	; 0x98
 800b970:	af00      	add	r7, sp, #0
 800b972:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b97a:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	69db      	ldr	r3, [r3, #28]
 800b984:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	689b      	ldr	r3, [r3, #8]
 800b998:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b9a2:	2b22      	cmp	r3, #34	; 0x22
 800b9a4:	f040 814f 	bne.w	800bc46 <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b9ae:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b9b2:	e0f6      	b.n	800bba2 <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800b9ba:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800b9be:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800b9c2:	b2d9      	uxtb	r1, r3
 800b9c4:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800b9c8:	b2da      	uxtb	r2, r3
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b9ce:	400a      	ands	r2, r1
 800b9d0:	b2d2      	uxtb	r2, r2
 800b9d2:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b9d8:	1c5a      	adds	r2, r3, #1
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b9e4:	b29b      	uxth	r3, r3
 800b9e6:	3b01      	subs	r3, #1
 800b9e8:	b29a      	uxth	r2, r3
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	69db      	ldr	r3, [r3, #28]
 800b9f6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800b9fa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b9fe:	f003 0307 	and.w	r3, r3, #7
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d053      	beq.n	800baae <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ba06:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ba0a:	f003 0301 	and.w	r3, r3, #1
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d011      	beq.n	800ba36 <UART_RxISR_8BIT_FIFOEN+0xca>
 800ba12:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ba16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d00b      	beq.n	800ba36 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	2201      	movs	r2, #1
 800ba24:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ba2c:	f043 0201 	orr.w	r2, r3, #1
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ba36:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ba3a:	f003 0302 	and.w	r3, r3, #2
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d011      	beq.n	800ba66 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800ba42:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ba46:	f003 0301 	and.w	r3, r3, #1
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d00b      	beq.n	800ba66 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	2202      	movs	r2, #2
 800ba54:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ba5c:	f043 0204 	orr.w	r2, r3, #4
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ba66:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ba6a:	f003 0304 	and.w	r3, r3, #4
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d011      	beq.n	800ba96 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800ba72:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ba76:	f003 0301 	and.w	r3, r3, #1
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d00b      	beq.n	800ba96 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	2204      	movs	r2, #4
 800ba84:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ba8c:	f043 0202 	orr.w	r2, r3, #2
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d006      	beq.n	800baae <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800baa0:	6878      	ldr	r0, [r7, #4]
 800baa2:	f7fe ff65 	bl	800a970 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	2200      	movs	r2, #0
 800baaa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bab4:	b29b      	uxth	r3, r3
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d173      	bne.n	800bba2 <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bac0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bac2:	e853 3f00 	ldrex	r3, [r3]
 800bac6:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800bac8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800baca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bace:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	461a      	mov	r2, r3
 800bad8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800badc:	66bb      	str	r3, [r7, #104]	; 0x68
 800bade:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bae0:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800bae2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800bae4:	e841 2300 	strex	r3, r2, [r1]
 800bae8:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800baea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800baec:	2b00      	cmp	r3, #0
 800baee:	d1e4      	bne.n	800baba <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	3308      	adds	r3, #8
 800baf6:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800baf8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bafa:	e853 3f00 	ldrex	r3, [r3]
 800bafe:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800bb00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bb02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bb06:	f023 0301 	bic.w	r3, r3, #1
 800bb0a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	3308      	adds	r3, #8
 800bb12:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800bb14:	657a      	str	r2, [r7, #84]	; 0x54
 800bb16:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb18:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800bb1a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bb1c:	e841 2300 	strex	r3, r2, [r1]
 800bb20:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800bb22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d1e3      	bne.n	800baf0 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	2220      	movs	r2, #32
 800bb2c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	2200      	movs	r2, #0
 800bb34:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bb3a:	2b01      	cmp	r3, #1
 800bb3c:	d12e      	bne.n	800bb9c <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	2200      	movs	r2, #0
 800bb42:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb4c:	e853 3f00 	ldrex	r3, [r3]
 800bb50:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800bb52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb54:	f023 0310 	bic.w	r3, r3, #16
 800bb58:	67bb      	str	r3, [r7, #120]	; 0x78
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	461a      	mov	r2, r3
 800bb60:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bb62:	643b      	str	r3, [r7, #64]	; 0x40
 800bb64:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb66:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bb68:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bb6a:	e841 2300 	strex	r3, r2, [r1]
 800bb6e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bb70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d1e6      	bne.n	800bb44 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	69db      	ldr	r3, [r3, #28]
 800bb7c:	f003 0310 	and.w	r3, r3, #16
 800bb80:	2b10      	cmp	r3, #16
 800bb82:	d103      	bne.n	800bb8c <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	2210      	movs	r2, #16
 800bb8a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800bb92:	4619      	mov	r1, r3
 800bb94:	6878      	ldr	r0, [r7, #4]
 800bb96:	f7fe fef5 	bl	800a984 <HAL_UARTEx_RxEventCallback>
 800bb9a:	e002      	b.n	800bba2 <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800bb9c:	6878      	ldr	r0, [r7, #4]
 800bb9e:	f7fa fa75 	bl	800608c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800bba2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d006      	beq.n	800bbb8 <UART_RxISR_8BIT_FIFOEN+0x24c>
 800bbaa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800bbae:	f003 0320 	and.w	r3, r3, #32
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	f47f aefe 	bne.w	800b9b4 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bbbe:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800bbc2:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d047      	beq.n	800bc5a <UART_RxISR_8BIT_FIFOEN+0x2ee>
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800bbd0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800bbd4:	429a      	cmp	r2, r3
 800bbd6:	d240      	bcs.n	800bc5a <UART_RxISR_8BIT_FIFOEN+0x2ee>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	3308      	adds	r3, #8
 800bbde:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbe0:	6a3b      	ldr	r3, [r7, #32]
 800bbe2:	e853 3f00 	ldrex	r3, [r3]
 800bbe6:	61fb      	str	r3, [r7, #28]
   return(result);
 800bbe8:	69fb      	ldr	r3, [r7, #28]
 800bbea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bbee:	673b      	str	r3, [r7, #112]	; 0x70
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	3308      	adds	r3, #8
 800bbf6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800bbf8:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bbfa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbfc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bbfe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bc00:	e841 2300 	strex	r3, r2, [r1]
 800bc04:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bc06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d1e5      	bne.n	800bbd8 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	4a15      	ldr	r2, [pc, #84]	; (800bc64 <UART_RxISR_8BIT_FIFOEN+0x2f8>)
 800bc10:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	e853 3f00 	ldrex	r3, [r3]
 800bc1e:	60bb      	str	r3, [r7, #8]
   return(result);
 800bc20:	68bb      	ldr	r3, [r7, #8]
 800bc22:	f043 0320 	orr.w	r3, r3, #32
 800bc26:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	461a      	mov	r2, r3
 800bc2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bc30:	61bb      	str	r3, [r7, #24]
 800bc32:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc34:	6979      	ldr	r1, [r7, #20]
 800bc36:	69ba      	ldr	r2, [r7, #24]
 800bc38:	e841 2300 	strex	r3, r2, [r1]
 800bc3c:	613b      	str	r3, [r7, #16]
   return(result);
 800bc3e:	693b      	ldr	r3, [r7, #16]
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d1e6      	bne.n	800bc12 <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800bc44:	e009      	b.n	800bc5a <UART_RxISR_8BIT_FIFOEN+0x2ee>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	8b1b      	ldrh	r3, [r3, #24]
 800bc4c:	b29a      	uxth	r2, r3
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	f042 0208 	orr.w	r2, r2, #8
 800bc56:	b292      	uxth	r2, r2
 800bc58:	831a      	strh	r2, [r3, #24]
}
 800bc5a:	bf00      	nop
 800bc5c:	3798      	adds	r7, #152	; 0x98
 800bc5e:	46bd      	mov	sp, r7
 800bc60:	bd80      	pop	{r7, pc}
 800bc62:	bf00      	nop
 800bc64:	0800b6a3 	.word	0x0800b6a3

0800bc68 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800bc68:	b580      	push	{r7, lr}
 800bc6a:	b0a8      	sub	sp, #160	; 0xa0
 800bc6c:	af00      	add	r7, sp, #0
 800bc6e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800bc76:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	69db      	ldr	r3, [r3, #28]
 800bc80:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	689b      	ldr	r3, [r3, #8]
 800bc94:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bc9e:	2b22      	cmp	r3, #34	; 0x22
 800bca0:	f040 8153 	bne.w	800bf4a <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800bcaa:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800bcae:	e0fa      	b.n	800bea6 <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800bcb6:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bcbe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 800bcc2:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 800bcc6:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800bcca:	4013      	ands	r3, r2
 800bccc:	b29a      	uxth	r2, r3
 800bcce:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800bcd2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bcd8:	1c9a      	adds	r2, r3, #2
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bce4:	b29b      	uxth	r3, r3
 800bce6:	3b01      	subs	r3, #1
 800bce8:	b29a      	uxth	r2, r3
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	69db      	ldr	r3, [r3, #28]
 800bcf6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800bcfa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800bcfe:	f003 0307 	and.w	r3, r3, #7
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d053      	beq.n	800bdae <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800bd06:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800bd0a:	f003 0301 	and.w	r3, r3, #1
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d011      	beq.n	800bd36 <UART_RxISR_16BIT_FIFOEN+0xce>
 800bd12:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800bd16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d00b      	beq.n	800bd36 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	2201      	movs	r2, #1
 800bd24:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bd2c:	f043 0201 	orr.w	r2, r3, #1
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bd36:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800bd3a:	f003 0302 	and.w	r3, r3, #2
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d011      	beq.n	800bd66 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800bd42:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bd46:	f003 0301 	and.w	r3, r3, #1
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d00b      	beq.n	800bd66 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	2202      	movs	r2, #2
 800bd54:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bd5c:	f043 0204 	orr.w	r2, r3, #4
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bd66:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800bd6a:	f003 0304 	and.w	r3, r3, #4
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d011      	beq.n	800bd96 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800bd72:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bd76:	f003 0301 	and.w	r3, r3, #1
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d00b      	beq.n	800bd96 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	2204      	movs	r2, #4
 800bd84:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bd8c:	f043 0202 	orr.w	r2, r3, #2
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d006      	beq.n	800bdae <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800bda0:	6878      	ldr	r0, [r7, #4]
 800bda2:	f7fe fde5 	bl	800a970 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	2200      	movs	r2, #0
 800bdaa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bdb4:	b29b      	uxth	r3, r3
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d175      	bne.n	800bea6 <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdc0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bdc2:	e853 3f00 	ldrex	r3, [r3]
 800bdc6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800bdc8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bdca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bdce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	461a      	mov	r2, r3
 800bdd8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800bddc:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bdde:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bde0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800bde2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800bde4:	e841 2300 	strex	r3, r2, [r1]
 800bde8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800bdea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d1e4      	bne.n	800bdba <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	3308      	adds	r3, #8
 800bdf6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdf8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bdfa:	e853 3f00 	ldrex	r3, [r3]
 800bdfe:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800be00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800be02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800be06:	f023 0301 	bic.w	r3, r3, #1
 800be0a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	3308      	adds	r3, #8
 800be14:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800be18:	65ba      	str	r2, [r7, #88]	; 0x58
 800be1a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be1c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800be1e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800be20:	e841 2300 	strex	r3, r2, [r1]
 800be24:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800be26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d1e1      	bne.n	800bdf0 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	2220      	movs	r2, #32
 800be30:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	2200      	movs	r2, #0
 800be38:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800be3e:	2b01      	cmp	r3, #1
 800be40:	d12e      	bne.n	800bea0 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	2200      	movs	r2, #0
 800be46:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be50:	e853 3f00 	ldrex	r3, [r3]
 800be54:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800be56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be58:	f023 0310 	bic.w	r3, r3, #16
 800be5c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	461a      	mov	r2, r3
 800be64:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800be66:	647b      	str	r3, [r7, #68]	; 0x44
 800be68:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be6a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800be6c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800be6e:	e841 2300 	strex	r3, r2, [r1]
 800be72:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800be74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be76:	2b00      	cmp	r3, #0
 800be78:	d1e6      	bne.n	800be48 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	69db      	ldr	r3, [r3, #28]
 800be80:	f003 0310 	and.w	r3, r3, #16
 800be84:	2b10      	cmp	r3, #16
 800be86:	d103      	bne.n	800be90 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	2210      	movs	r2, #16
 800be8e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800be96:	4619      	mov	r1, r3
 800be98:	6878      	ldr	r0, [r7, #4]
 800be9a:	f7fe fd73 	bl	800a984 <HAL_UARTEx_RxEventCallback>
 800be9e:	e002      	b.n	800bea6 <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800bea0:	6878      	ldr	r0, [r7, #4]
 800bea2:	f7fa f8f3 	bl	800608c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800bea6:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d006      	beq.n	800bebc <UART_RxISR_16BIT_FIFOEN+0x254>
 800beae:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800beb2:	f003 0320 	and.w	r3, r3, #32
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	f47f aefa 	bne.w	800bcb0 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bec2:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800bec6:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800beca:	2b00      	cmp	r3, #0
 800becc:	d047      	beq.n	800bf5e <UART_RxISR_16BIT_FIFOEN+0x2f6>
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800bed4:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 800bed8:	429a      	cmp	r2, r3
 800beda:	d240      	bcs.n	800bf5e <UART_RxISR_16BIT_FIFOEN+0x2f6>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	3308      	adds	r3, #8
 800bee2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bee6:	e853 3f00 	ldrex	r3, [r3]
 800beea:	623b      	str	r3, [r7, #32]
   return(result);
 800beec:	6a3b      	ldr	r3, [r7, #32]
 800beee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bef2:	677b      	str	r3, [r7, #116]	; 0x74
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	3308      	adds	r3, #8
 800befa:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800befc:	633a      	str	r2, [r7, #48]	; 0x30
 800befe:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf00:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bf02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bf04:	e841 2300 	strex	r3, r2, [r1]
 800bf08:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bf0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d1e5      	bne.n	800bedc <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	4a15      	ldr	r2, [pc, #84]	; (800bf68 <UART_RxISR_16BIT_FIFOEN+0x300>)
 800bf14:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf1c:	693b      	ldr	r3, [r7, #16]
 800bf1e:	e853 3f00 	ldrex	r3, [r3]
 800bf22:	60fb      	str	r3, [r7, #12]
   return(result);
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	f043 0320 	orr.w	r3, r3, #32
 800bf2a:	673b      	str	r3, [r7, #112]	; 0x70
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	461a      	mov	r2, r3
 800bf32:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bf34:	61fb      	str	r3, [r7, #28]
 800bf36:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf38:	69b9      	ldr	r1, [r7, #24]
 800bf3a:	69fa      	ldr	r2, [r7, #28]
 800bf3c:	e841 2300 	strex	r3, r2, [r1]
 800bf40:	617b      	str	r3, [r7, #20]
   return(result);
 800bf42:	697b      	ldr	r3, [r7, #20]
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d1e6      	bne.n	800bf16 <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800bf48:	e009      	b.n	800bf5e <UART_RxISR_16BIT_FIFOEN+0x2f6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	8b1b      	ldrh	r3, [r3, #24]
 800bf50:	b29a      	uxth	r2, r3
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	f042 0208 	orr.w	r2, r2, #8
 800bf5a:	b292      	uxth	r2, r2
 800bf5c:	831a      	strh	r2, [r3, #24]
}
 800bf5e:	bf00      	nop
 800bf60:	37a0      	adds	r7, #160	; 0xa0
 800bf62:	46bd      	mov	sp, r7
 800bf64:	bd80      	pop	{r7, pc}
 800bf66:	bf00      	nop
 800bf68:	0800b807 	.word	0x0800b807

0800bf6c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800bf6c:	b480      	push	{r7}
 800bf6e:	b083      	sub	sp, #12
 800bf70:	af00      	add	r7, sp, #0
 800bf72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800bf74:	bf00      	nop
 800bf76:	370c      	adds	r7, #12
 800bf78:	46bd      	mov	sp, r7
 800bf7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf7e:	4770      	bx	lr

0800bf80 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800bf80:	b480      	push	{r7}
 800bf82:	b083      	sub	sp, #12
 800bf84:	af00      	add	r7, sp, #0
 800bf86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800bf88:	bf00      	nop
 800bf8a:	370c      	adds	r7, #12
 800bf8c:	46bd      	mov	sp, r7
 800bf8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf92:	4770      	bx	lr

0800bf94 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800bf94:	b480      	push	{r7}
 800bf96:	b083      	sub	sp, #12
 800bf98:	af00      	add	r7, sp, #0
 800bf9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800bf9c:	bf00      	nop
 800bf9e:	370c      	adds	r7, #12
 800bfa0:	46bd      	mov	sp, r7
 800bfa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfa6:	4770      	bx	lr

0800bfa8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800bfa8:	b480      	push	{r7}
 800bfaa:	b085      	sub	sp, #20
 800bfac:	af00      	add	r7, sp, #0
 800bfae:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bfb6:	2b01      	cmp	r3, #1
 800bfb8:	d101      	bne.n	800bfbe <HAL_UARTEx_DisableFifoMode+0x16>
 800bfba:	2302      	movs	r3, #2
 800bfbc:	e027      	b.n	800c00e <HAL_UARTEx_DisableFifoMode+0x66>
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	2201      	movs	r2, #1
 800bfc2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	2224      	movs	r2, #36	; 0x24
 800bfca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	681a      	ldr	r2, [r3, #0]
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	f022 0201 	bic.w	r2, r2, #1
 800bfe4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800bfec:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	2200      	movs	r2, #0
 800bff2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	68fa      	ldr	r2, [r7, #12]
 800bffa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	2220      	movs	r2, #32
 800c000:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	2200      	movs	r2, #0
 800c008:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c00c:	2300      	movs	r3, #0
}
 800c00e:	4618      	mov	r0, r3
 800c010:	3714      	adds	r7, #20
 800c012:	46bd      	mov	sp, r7
 800c014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c018:	4770      	bx	lr

0800c01a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c01a:	b580      	push	{r7, lr}
 800c01c:	b084      	sub	sp, #16
 800c01e:	af00      	add	r7, sp, #0
 800c020:	6078      	str	r0, [r7, #4]
 800c022:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c02a:	2b01      	cmp	r3, #1
 800c02c:	d101      	bne.n	800c032 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c02e:	2302      	movs	r3, #2
 800c030:	e02d      	b.n	800c08e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	2201      	movs	r2, #1
 800c036:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	2224      	movs	r2, #36	; 0x24
 800c03e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	681a      	ldr	r2, [r3, #0]
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	f022 0201 	bic.w	r2, r2, #1
 800c058:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	689b      	ldr	r3, [r3, #8]
 800c060:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	683a      	ldr	r2, [r7, #0]
 800c06a:	430a      	orrs	r2, r1
 800c06c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c06e:	6878      	ldr	r0, [r7, #4]
 800c070:	f000 f850 	bl	800c114 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	68fa      	ldr	r2, [r7, #12]
 800c07a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	2220      	movs	r2, #32
 800c080:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	2200      	movs	r2, #0
 800c088:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c08c:	2300      	movs	r3, #0
}
 800c08e:	4618      	mov	r0, r3
 800c090:	3710      	adds	r7, #16
 800c092:	46bd      	mov	sp, r7
 800c094:	bd80      	pop	{r7, pc}

0800c096 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c096:	b580      	push	{r7, lr}
 800c098:	b084      	sub	sp, #16
 800c09a:	af00      	add	r7, sp, #0
 800c09c:	6078      	str	r0, [r7, #4]
 800c09e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c0a6:	2b01      	cmp	r3, #1
 800c0a8:	d101      	bne.n	800c0ae <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c0aa:	2302      	movs	r3, #2
 800c0ac:	e02d      	b.n	800c10a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	2201      	movs	r2, #1
 800c0b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	2224      	movs	r2, #36	; 0x24
 800c0ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	681a      	ldr	r2, [r3, #0]
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	f022 0201 	bic.w	r2, r2, #1
 800c0d4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	689b      	ldr	r3, [r3, #8]
 800c0dc:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	683a      	ldr	r2, [r7, #0]
 800c0e6:	430a      	orrs	r2, r1
 800c0e8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c0ea:	6878      	ldr	r0, [r7, #4]
 800c0ec:	f000 f812 	bl	800c114 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	68fa      	ldr	r2, [r7, #12]
 800c0f6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	2220      	movs	r2, #32
 800c0fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	2200      	movs	r2, #0
 800c104:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c108:	2300      	movs	r3, #0
}
 800c10a:	4618      	mov	r0, r3
 800c10c:	3710      	adds	r7, #16
 800c10e:	46bd      	mov	sp, r7
 800c110:	bd80      	pop	{r7, pc}
	...

0800c114 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c114:	b480      	push	{r7}
 800c116:	b085      	sub	sp, #20
 800c118:	af00      	add	r7, sp, #0
 800c11a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c120:	2b00      	cmp	r3, #0
 800c122:	d108      	bne.n	800c136 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	2201      	movs	r2, #1
 800c128:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	2201      	movs	r2, #1
 800c130:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c134:	e031      	b.n	800c19a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c136:	2308      	movs	r3, #8
 800c138:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c13a:	2308      	movs	r3, #8
 800c13c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	689b      	ldr	r3, [r3, #8]
 800c144:	0e5b      	lsrs	r3, r3, #25
 800c146:	b2db      	uxtb	r3, r3
 800c148:	f003 0307 	and.w	r3, r3, #7
 800c14c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	689b      	ldr	r3, [r3, #8]
 800c154:	0f5b      	lsrs	r3, r3, #29
 800c156:	b2db      	uxtb	r3, r3
 800c158:	f003 0307 	and.w	r3, r3, #7
 800c15c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c15e:	7bbb      	ldrb	r3, [r7, #14]
 800c160:	7b3a      	ldrb	r2, [r7, #12]
 800c162:	4911      	ldr	r1, [pc, #68]	; (800c1a8 <UARTEx_SetNbDataToProcess+0x94>)
 800c164:	5c8a      	ldrb	r2, [r1, r2]
 800c166:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c16a:	7b3a      	ldrb	r2, [r7, #12]
 800c16c:	490f      	ldr	r1, [pc, #60]	; (800c1ac <UARTEx_SetNbDataToProcess+0x98>)
 800c16e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c170:	fb93 f3f2 	sdiv	r3, r3, r2
 800c174:	b29a      	uxth	r2, r3
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c17c:	7bfb      	ldrb	r3, [r7, #15]
 800c17e:	7b7a      	ldrb	r2, [r7, #13]
 800c180:	4909      	ldr	r1, [pc, #36]	; (800c1a8 <UARTEx_SetNbDataToProcess+0x94>)
 800c182:	5c8a      	ldrb	r2, [r1, r2]
 800c184:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c188:	7b7a      	ldrb	r2, [r7, #13]
 800c18a:	4908      	ldr	r1, [pc, #32]	; (800c1ac <UARTEx_SetNbDataToProcess+0x98>)
 800c18c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c18e:	fb93 f3f2 	sdiv	r3, r3, r2
 800c192:	b29a      	uxth	r2, r3
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800c19a:	bf00      	nop
 800c19c:	3714      	adds	r7, #20
 800c19e:	46bd      	mov	sp, r7
 800c1a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1a4:	4770      	bx	lr
 800c1a6:	bf00      	nop
 800c1a8:	08014ac4 	.word	0x08014ac4
 800c1ac:	08014acc 	.word	0x08014acc

0800c1b0 <__NVIC_SetPriority>:
{
 800c1b0:	b480      	push	{r7}
 800c1b2:	b083      	sub	sp, #12
 800c1b4:	af00      	add	r7, sp, #0
 800c1b6:	4603      	mov	r3, r0
 800c1b8:	6039      	str	r1, [r7, #0]
 800c1ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c1bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	db0a      	blt.n	800c1da <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c1c4:	683b      	ldr	r3, [r7, #0]
 800c1c6:	b2da      	uxtb	r2, r3
 800c1c8:	490c      	ldr	r1, [pc, #48]	; (800c1fc <__NVIC_SetPriority+0x4c>)
 800c1ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c1ce:	0112      	lsls	r2, r2, #4
 800c1d0:	b2d2      	uxtb	r2, r2
 800c1d2:	440b      	add	r3, r1
 800c1d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800c1d8:	e00a      	b.n	800c1f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c1da:	683b      	ldr	r3, [r7, #0]
 800c1dc:	b2da      	uxtb	r2, r3
 800c1de:	4908      	ldr	r1, [pc, #32]	; (800c200 <__NVIC_SetPriority+0x50>)
 800c1e0:	79fb      	ldrb	r3, [r7, #7]
 800c1e2:	f003 030f 	and.w	r3, r3, #15
 800c1e6:	3b04      	subs	r3, #4
 800c1e8:	0112      	lsls	r2, r2, #4
 800c1ea:	b2d2      	uxtb	r2, r2
 800c1ec:	440b      	add	r3, r1
 800c1ee:	761a      	strb	r2, [r3, #24]
}
 800c1f0:	bf00      	nop
 800c1f2:	370c      	adds	r7, #12
 800c1f4:	46bd      	mov	sp, r7
 800c1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1fa:	4770      	bx	lr
 800c1fc:	e000e100 	.word	0xe000e100
 800c200:	e000ed00 	.word	0xe000ed00

0800c204 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800c204:	b580      	push	{r7, lr}
 800c206:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800c208:	4b05      	ldr	r3, [pc, #20]	; (800c220 <SysTick_Handler+0x1c>)
 800c20a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800c20c:	f002 fe9e 	bl	800ef4c <xTaskGetSchedulerState>
 800c210:	4603      	mov	r3, r0
 800c212:	2b01      	cmp	r3, #1
 800c214:	d001      	beq.n	800c21a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800c216:	f003 fdbf 	bl	800fd98 <xPortSysTickHandler>
  }
}
 800c21a:	bf00      	nop
 800c21c:	bd80      	pop	{r7, pc}
 800c21e:	bf00      	nop
 800c220:	e000e010 	.word	0xe000e010

0800c224 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800c224:	b580      	push	{r7, lr}
 800c226:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800c228:	2100      	movs	r1, #0
 800c22a:	f06f 0004 	mvn.w	r0, #4
 800c22e:	f7ff ffbf 	bl	800c1b0 <__NVIC_SetPriority>
#endif
}
 800c232:	bf00      	nop
 800c234:	bd80      	pop	{r7, pc}
	...

0800c238 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800c238:	b480      	push	{r7}
 800c23a:	b083      	sub	sp, #12
 800c23c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c23e:	f3ef 8305 	mrs	r3, IPSR
 800c242:	603b      	str	r3, [r7, #0]
  return(result);
 800c244:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c246:	2b00      	cmp	r3, #0
 800c248:	d003      	beq.n	800c252 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800c24a:	f06f 0305 	mvn.w	r3, #5
 800c24e:	607b      	str	r3, [r7, #4]
 800c250:	e00c      	b.n	800c26c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800c252:	4b0a      	ldr	r3, [pc, #40]	; (800c27c <osKernelInitialize+0x44>)
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	2b00      	cmp	r3, #0
 800c258:	d105      	bne.n	800c266 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800c25a:	4b08      	ldr	r3, [pc, #32]	; (800c27c <osKernelInitialize+0x44>)
 800c25c:	2201      	movs	r2, #1
 800c25e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800c260:	2300      	movs	r3, #0
 800c262:	607b      	str	r3, [r7, #4]
 800c264:	e002      	b.n	800c26c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800c266:	f04f 33ff 	mov.w	r3, #4294967295
 800c26a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c26c:	687b      	ldr	r3, [r7, #4]
}
 800c26e:	4618      	mov	r0, r3
 800c270:	370c      	adds	r7, #12
 800c272:	46bd      	mov	sp, r7
 800c274:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c278:	4770      	bx	lr
 800c27a:	bf00      	nop
 800c27c:	2000065c 	.word	0x2000065c

0800c280 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800c280:	b580      	push	{r7, lr}
 800c282:	b082      	sub	sp, #8
 800c284:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c286:	f3ef 8305 	mrs	r3, IPSR
 800c28a:	603b      	str	r3, [r7, #0]
  return(result);
 800c28c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d003      	beq.n	800c29a <osKernelStart+0x1a>
    stat = osErrorISR;
 800c292:	f06f 0305 	mvn.w	r3, #5
 800c296:	607b      	str	r3, [r7, #4]
 800c298:	e010      	b.n	800c2bc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800c29a:	4b0b      	ldr	r3, [pc, #44]	; (800c2c8 <osKernelStart+0x48>)
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	2b01      	cmp	r3, #1
 800c2a0:	d109      	bne.n	800c2b6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800c2a2:	f7ff ffbf 	bl	800c224 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800c2a6:	4b08      	ldr	r3, [pc, #32]	; (800c2c8 <osKernelStart+0x48>)
 800c2a8:	2202      	movs	r2, #2
 800c2aa:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800c2ac:	f002 f958 	bl	800e560 <vTaskStartScheduler>
      stat = osOK;
 800c2b0:	2300      	movs	r3, #0
 800c2b2:	607b      	str	r3, [r7, #4]
 800c2b4:	e002      	b.n	800c2bc <osKernelStart+0x3c>
    } else {
      stat = osError;
 800c2b6:	f04f 33ff 	mov.w	r3, #4294967295
 800c2ba:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c2bc:	687b      	ldr	r3, [r7, #4]
}
 800c2be:	4618      	mov	r0, r3
 800c2c0:	3708      	adds	r7, #8
 800c2c2:	46bd      	mov	sp, r7
 800c2c4:	bd80      	pop	{r7, pc}
 800c2c6:	bf00      	nop
 800c2c8:	2000065c 	.word	0x2000065c

0800c2cc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800c2cc:	b580      	push	{r7, lr}
 800c2ce:	b08e      	sub	sp, #56	; 0x38
 800c2d0:	af04      	add	r7, sp, #16
 800c2d2:	60f8      	str	r0, [r7, #12]
 800c2d4:	60b9      	str	r1, [r7, #8]
 800c2d6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800c2d8:	2300      	movs	r3, #0
 800c2da:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c2dc:	f3ef 8305 	mrs	r3, IPSR
 800c2e0:	617b      	str	r3, [r7, #20]
  return(result);
 800c2e2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d17e      	bne.n	800c3e6 <osThreadNew+0x11a>
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d07b      	beq.n	800c3e6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800c2ee:	2380      	movs	r3, #128	; 0x80
 800c2f0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800c2f2:	2318      	movs	r3, #24
 800c2f4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800c2f6:	2300      	movs	r3, #0
 800c2f8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800c2fa:	f04f 33ff 	mov.w	r3, #4294967295
 800c2fe:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	2b00      	cmp	r3, #0
 800c304:	d045      	beq.n	800c392 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d002      	beq.n	800c314 <osThreadNew+0x48>
        name = attr->name;
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	699b      	ldr	r3, [r3, #24]
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d002      	beq.n	800c322 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	699b      	ldr	r3, [r3, #24]
 800c320:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800c322:	69fb      	ldr	r3, [r7, #28]
 800c324:	2b00      	cmp	r3, #0
 800c326:	d008      	beq.n	800c33a <osThreadNew+0x6e>
 800c328:	69fb      	ldr	r3, [r7, #28]
 800c32a:	2b38      	cmp	r3, #56	; 0x38
 800c32c:	d805      	bhi.n	800c33a <osThreadNew+0x6e>
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	685b      	ldr	r3, [r3, #4]
 800c332:	f003 0301 	and.w	r3, r3, #1
 800c336:	2b00      	cmp	r3, #0
 800c338:	d001      	beq.n	800c33e <osThreadNew+0x72>
        return (NULL);
 800c33a:	2300      	movs	r3, #0
 800c33c:	e054      	b.n	800c3e8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	695b      	ldr	r3, [r3, #20]
 800c342:	2b00      	cmp	r3, #0
 800c344:	d003      	beq.n	800c34e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	695b      	ldr	r3, [r3, #20]
 800c34a:	089b      	lsrs	r3, r3, #2
 800c34c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	689b      	ldr	r3, [r3, #8]
 800c352:	2b00      	cmp	r3, #0
 800c354:	d00e      	beq.n	800c374 <osThreadNew+0xa8>
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	68db      	ldr	r3, [r3, #12]
 800c35a:	2b5b      	cmp	r3, #91	; 0x5b
 800c35c:	d90a      	bls.n	800c374 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c362:	2b00      	cmp	r3, #0
 800c364:	d006      	beq.n	800c374 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	695b      	ldr	r3, [r3, #20]
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d002      	beq.n	800c374 <osThreadNew+0xa8>
        mem = 1;
 800c36e:	2301      	movs	r3, #1
 800c370:	61bb      	str	r3, [r7, #24]
 800c372:	e010      	b.n	800c396 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	689b      	ldr	r3, [r3, #8]
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d10c      	bne.n	800c396 <osThreadNew+0xca>
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	68db      	ldr	r3, [r3, #12]
 800c380:	2b00      	cmp	r3, #0
 800c382:	d108      	bne.n	800c396 <osThreadNew+0xca>
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	691b      	ldr	r3, [r3, #16]
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d104      	bne.n	800c396 <osThreadNew+0xca>
          mem = 0;
 800c38c:	2300      	movs	r3, #0
 800c38e:	61bb      	str	r3, [r7, #24]
 800c390:	e001      	b.n	800c396 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800c392:	2300      	movs	r3, #0
 800c394:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800c396:	69bb      	ldr	r3, [r7, #24]
 800c398:	2b01      	cmp	r3, #1
 800c39a:	d110      	bne.n	800c3be <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800c3a0:	687a      	ldr	r2, [r7, #4]
 800c3a2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c3a4:	9202      	str	r2, [sp, #8]
 800c3a6:	9301      	str	r3, [sp, #4]
 800c3a8:	69fb      	ldr	r3, [r7, #28]
 800c3aa:	9300      	str	r3, [sp, #0]
 800c3ac:	68bb      	ldr	r3, [r7, #8]
 800c3ae:	6a3a      	ldr	r2, [r7, #32]
 800c3b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c3b2:	68f8      	ldr	r0, [r7, #12]
 800c3b4:	f001 fdf8 	bl	800dfa8 <xTaskCreateStatic>
 800c3b8:	4603      	mov	r3, r0
 800c3ba:	613b      	str	r3, [r7, #16]
 800c3bc:	e013      	b.n	800c3e6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800c3be:	69bb      	ldr	r3, [r7, #24]
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d110      	bne.n	800c3e6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800c3c4:	6a3b      	ldr	r3, [r7, #32]
 800c3c6:	b29a      	uxth	r2, r3
 800c3c8:	f107 0310 	add.w	r3, r7, #16
 800c3cc:	9301      	str	r3, [sp, #4]
 800c3ce:	69fb      	ldr	r3, [r7, #28]
 800c3d0:	9300      	str	r3, [sp, #0]
 800c3d2:	68bb      	ldr	r3, [r7, #8]
 800c3d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c3d6:	68f8      	ldr	r0, [r7, #12]
 800c3d8:	f001 fe43 	bl	800e062 <xTaskCreate>
 800c3dc:	4603      	mov	r3, r0
 800c3de:	2b01      	cmp	r3, #1
 800c3e0:	d001      	beq.n	800c3e6 <osThreadNew+0x11a>
            hTask = NULL;
 800c3e2:	2300      	movs	r3, #0
 800c3e4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800c3e6:	693b      	ldr	r3, [r7, #16]
}
 800c3e8:	4618      	mov	r0, r3
 800c3ea:	3728      	adds	r7, #40	; 0x28
 800c3ec:	46bd      	mov	sp, r7
 800c3ee:	bd80      	pop	{r7, pc}

0800c3f0 <osThreadSuspend>:

  return (stat);
}

#if (configUSE_OS2_THREAD_SUSPEND_RESUME == 1)
osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 800c3f0:	b580      	push	{r7, lr}
 800c3f2:	b086      	sub	sp, #24
 800c3f4:	af00      	add	r7, sp, #0
 800c3f6:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c3fc:	f3ef 8305 	mrs	r3, IPSR
 800c400:	60fb      	str	r3, [r7, #12]
  return(result);
 800c402:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c404:	2b00      	cmp	r3, #0
 800c406:	d003      	beq.n	800c410 <osThreadSuspend+0x20>
    stat = osErrorISR;
 800c408:	f06f 0305 	mvn.w	r3, #5
 800c40c:	617b      	str	r3, [r7, #20]
 800c40e:	e00b      	b.n	800c428 <osThreadSuspend+0x38>
  }
  else if (hTask == NULL) {
 800c410:	693b      	ldr	r3, [r7, #16]
 800c412:	2b00      	cmp	r3, #0
 800c414:	d103      	bne.n	800c41e <osThreadSuspend+0x2e>
    stat = osErrorParameter;
 800c416:	f06f 0303 	mvn.w	r3, #3
 800c41a:	617b      	str	r3, [r7, #20]
 800c41c:	e004      	b.n	800c428 <osThreadSuspend+0x38>
  }
  else {
    stat = osOK;
 800c41e:	2300      	movs	r3, #0
 800c420:	617b      	str	r3, [r7, #20]
    vTaskSuspend (hTask);
 800c422:	6938      	ldr	r0, [r7, #16]
 800c424:	f001 ff96 	bl	800e354 <vTaskSuspend>
  }

  return (stat);
 800c428:	697b      	ldr	r3, [r7, #20]
}
 800c42a:	4618      	mov	r0, r3
 800c42c:	3718      	adds	r7, #24
 800c42e:	46bd      	mov	sp, r7
 800c430:	bd80      	pop	{r7, pc}

0800c432 <osThreadResume>:

osStatus_t osThreadResume (osThreadId_t thread_id) {
 800c432:	b580      	push	{r7, lr}
 800c434:	b086      	sub	sp, #24
 800c436:	af00      	add	r7, sp, #0
 800c438:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c43e:	f3ef 8305 	mrs	r3, IPSR
 800c442:	60fb      	str	r3, [r7, #12]
  return(result);
 800c444:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c446:	2b00      	cmp	r3, #0
 800c448:	d003      	beq.n	800c452 <osThreadResume+0x20>
    stat = osErrorISR;
 800c44a:	f06f 0305 	mvn.w	r3, #5
 800c44e:	617b      	str	r3, [r7, #20]
 800c450:	e00b      	b.n	800c46a <osThreadResume+0x38>
  }
  else if (hTask == NULL) {
 800c452:	693b      	ldr	r3, [r7, #16]
 800c454:	2b00      	cmp	r3, #0
 800c456:	d103      	bne.n	800c460 <osThreadResume+0x2e>
    stat = osErrorParameter;
 800c458:	f06f 0303 	mvn.w	r3, #3
 800c45c:	617b      	str	r3, [r7, #20]
 800c45e:	e004      	b.n	800c46a <osThreadResume+0x38>
  }
  else {
    stat = osOK;
 800c460:	2300      	movs	r3, #0
 800c462:	617b      	str	r3, [r7, #20]
    vTaskResume (hTask);
 800c464:	6938      	ldr	r0, [r7, #16]
 800c466:	f002 f81d 	bl	800e4a4 <vTaskResume>
  }

  return (stat);
 800c46a:	697b      	ldr	r3, [r7, #20]
}
 800c46c:	4618      	mov	r0, r3
 800c46e:	3718      	adds	r7, #24
 800c470:	46bd      	mov	sp, r7
 800c472:	bd80      	pop	{r7, pc}

0800c474 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800c474:	b580      	push	{r7, lr}
 800c476:	b084      	sub	sp, #16
 800c478:	af00      	add	r7, sp, #0
 800c47a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c47c:	f3ef 8305 	mrs	r3, IPSR
 800c480:	60bb      	str	r3, [r7, #8]
  return(result);
 800c482:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c484:	2b00      	cmp	r3, #0
 800c486:	d003      	beq.n	800c490 <osDelay+0x1c>
    stat = osErrorISR;
 800c488:	f06f 0305 	mvn.w	r3, #5
 800c48c:	60fb      	str	r3, [r7, #12]
 800c48e:	e007      	b.n	800c4a0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800c490:	2300      	movs	r3, #0
 800c492:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	2b00      	cmp	r3, #0
 800c498:	d002      	beq.n	800c4a0 <osDelay+0x2c>
      vTaskDelay(ticks);
 800c49a:	6878      	ldr	r0, [r7, #4]
 800c49c:	f001 ff26 	bl	800e2ec <vTaskDelay>
    }
  }

  return (stat);
 800c4a0:	68fb      	ldr	r3, [r7, #12]
}
 800c4a2:	4618      	mov	r0, r3
 800c4a4:	3710      	adds	r7, #16
 800c4a6:	46bd      	mov	sp, r7
 800c4a8:	bd80      	pop	{r7, pc}

0800c4aa <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 800c4aa:	b580      	push	{r7, lr}
 800c4ac:	b086      	sub	sp, #24
 800c4ae:	af00      	add	r7, sp, #0
 800c4b0:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 800c4b2:	2300      	movs	r3, #0
 800c4b4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c4b6:	f3ef 8305 	mrs	r3, IPSR
 800c4ba:	60fb      	str	r3, [r7, #12]
  return(result);
 800c4bc:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d12d      	bne.n	800c51e <osEventFlagsNew+0x74>
    mem = -1;
 800c4c2:	f04f 33ff 	mov.w	r3, #4294967295
 800c4c6:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d015      	beq.n	800c4fa <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	689b      	ldr	r3, [r3, #8]
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d006      	beq.n	800c4e4 <osEventFlagsNew+0x3a>
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	68db      	ldr	r3, [r3, #12]
 800c4da:	2b1f      	cmp	r3, #31
 800c4dc:	d902      	bls.n	800c4e4 <osEventFlagsNew+0x3a>
        mem = 1;
 800c4de:	2301      	movs	r3, #1
 800c4e0:	613b      	str	r3, [r7, #16]
 800c4e2:	e00c      	b.n	800c4fe <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	689b      	ldr	r3, [r3, #8]
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d108      	bne.n	800c4fe <osEventFlagsNew+0x54>
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	68db      	ldr	r3, [r3, #12]
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d104      	bne.n	800c4fe <osEventFlagsNew+0x54>
          mem = 0;
 800c4f4:	2300      	movs	r3, #0
 800c4f6:	613b      	str	r3, [r7, #16]
 800c4f8:	e001      	b.n	800c4fe <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 800c4fa:	2300      	movs	r3, #0
 800c4fc:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 800c4fe:	693b      	ldr	r3, [r7, #16]
 800c500:	2b01      	cmp	r3, #1
 800c502:	d106      	bne.n	800c512 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	689b      	ldr	r3, [r3, #8]
 800c508:	4618      	mov	r0, r3
 800c50a:	f000 fb2b 	bl	800cb64 <xEventGroupCreateStatic>
 800c50e:	6178      	str	r0, [r7, #20]
 800c510:	e005      	b.n	800c51e <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 800c512:	693b      	ldr	r3, [r7, #16]
 800c514:	2b00      	cmp	r3, #0
 800c516:	d102      	bne.n	800c51e <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 800c518:	f000 fb5b 	bl	800cbd2 <xEventGroupCreate>
 800c51c:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 800c51e:	697b      	ldr	r3, [r7, #20]
}
 800c520:	4618      	mov	r0, r3
 800c522:	3718      	adds	r7, #24
 800c524:	46bd      	mov	sp, r7
 800c526:	bd80      	pop	{r7, pc}

0800c528 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 800c528:	b580      	push	{r7, lr}
 800c52a:	b086      	sub	sp, #24
 800c52c:	af00      	add	r7, sp, #0
 800c52e:	6078      	str	r0, [r7, #4]
 800c530:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800c536:	693b      	ldr	r3, [r7, #16]
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d004      	beq.n	800c546 <osEventFlagsSet+0x1e>
 800c53c:	683b      	ldr	r3, [r7, #0]
 800c53e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800c542:	2b00      	cmp	r3, #0
 800c544:	d003      	beq.n	800c54e <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 800c546:	f06f 0303 	mvn.w	r3, #3
 800c54a:	617b      	str	r3, [r7, #20]
 800c54c:	e028      	b.n	800c5a0 <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c54e:	f3ef 8305 	mrs	r3, IPSR
 800c552:	60fb      	str	r3, [r7, #12]
  return(result);
 800c554:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800c556:	2b00      	cmp	r3, #0
 800c558:	d01d      	beq.n	800c596 <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 800c55a:	2300      	movs	r3, #0
 800c55c:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 800c55e:	f107 0308 	add.w	r3, r7, #8
 800c562:	461a      	mov	r2, r3
 800c564:	6839      	ldr	r1, [r7, #0]
 800c566:	6938      	ldr	r0, [r7, #16]
 800c568:	f000 fcd6 	bl	800cf18 <xEventGroupSetBitsFromISR>
 800c56c:	4603      	mov	r3, r0
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d103      	bne.n	800c57a <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 800c572:	f06f 0302 	mvn.w	r3, #2
 800c576:	617b      	str	r3, [r7, #20]
 800c578:	e012      	b.n	800c5a0 <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 800c57a:	683b      	ldr	r3, [r7, #0]
 800c57c:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 800c57e:	68bb      	ldr	r3, [r7, #8]
 800c580:	2b00      	cmp	r3, #0
 800c582:	d00d      	beq.n	800c5a0 <osEventFlagsSet+0x78>
 800c584:	4b09      	ldr	r3, [pc, #36]	; (800c5ac <osEventFlagsSet+0x84>)
 800c586:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c58a:	601a      	str	r2, [r3, #0]
 800c58c:	f3bf 8f4f 	dsb	sy
 800c590:	f3bf 8f6f 	isb	sy
 800c594:	e004      	b.n	800c5a0 <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 800c596:	6839      	ldr	r1, [r7, #0]
 800c598:	6938      	ldr	r0, [r7, #16]
 800c59a:	f000 fc03 	bl	800cda4 <xEventGroupSetBits>
 800c59e:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 800c5a0:	697b      	ldr	r3, [r7, #20]
}
 800c5a2:	4618      	mov	r0, r3
 800c5a4:	3718      	adds	r7, #24
 800c5a6:	46bd      	mov	sp, r7
 800c5a8:	bd80      	pop	{r7, pc}
 800c5aa:	bf00      	nop
 800c5ac:	e000ed04 	.word	0xe000ed04

0800c5b0 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 800c5b0:	b580      	push	{r7, lr}
 800c5b2:	b08c      	sub	sp, #48	; 0x30
 800c5b4:	af02      	add	r7, sp, #8
 800c5b6:	60f8      	str	r0, [r7, #12]
 800c5b8:	60b9      	str	r1, [r7, #8]
 800c5ba:	607a      	str	r2, [r7, #4]
 800c5bc:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800c5c2:	69bb      	ldr	r3, [r7, #24]
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d004      	beq.n	800c5d2 <osEventFlagsWait+0x22>
 800c5c8:	68bb      	ldr	r3, [r7, #8]
 800c5ca:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d003      	beq.n	800c5da <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 800c5d2:	f06f 0303 	mvn.w	r3, #3
 800c5d6:	61fb      	str	r3, [r7, #28]
 800c5d8:	e04b      	b.n	800c672 <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c5da:	f3ef 8305 	mrs	r3, IPSR
 800c5de:	617b      	str	r3, [r7, #20]
  return(result);
 800c5e0:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d003      	beq.n	800c5ee <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 800c5e6:	f06f 0305 	mvn.w	r3, #5
 800c5ea:	61fb      	str	r3, [r7, #28]
 800c5ec:	e041      	b.n	800c672 <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	f003 0301 	and.w	r3, r3, #1
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d002      	beq.n	800c5fe <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 800c5f8:	2301      	movs	r3, #1
 800c5fa:	627b      	str	r3, [r7, #36]	; 0x24
 800c5fc:	e001      	b.n	800c602 <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 800c5fe:	2300      	movs	r3, #0
 800c600:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	f003 0302 	and.w	r3, r3, #2
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d002      	beq.n	800c612 <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 800c60c:	2300      	movs	r3, #0
 800c60e:	623b      	str	r3, [r7, #32]
 800c610:	e001      	b.n	800c616 <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 800c612:	2301      	movs	r3, #1
 800c614:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 800c616:	683b      	ldr	r3, [r7, #0]
 800c618:	9300      	str	r3, [sp, #0]
 800c61a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c61c:	6a3a      	ldr	r2, [r7, #32]
 800c61e:	68b9      	ldr	r1, [r7, #8]
 800c620:	69b8      	ldr	r0, [r7, #24]
 800c622:	f000 faf1 	bl	800cc08 <xEventGroupWaitBits>
 800c626:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	f003 0301 	and.w	r3, r3, #1
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d010      	beq.n	800c654 <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 800c632:	68ba      	ldr	r2, [r7, #8]
 800c634:	69fb      	ldr	r3, [r7, #28]
 800c636:	4013      	ands	r3, r2
 800c638:	68ba      	ldr	r2, [r7, #8]
 800c63a:	429a      	cmp	r2, r3
 800c63c:	d019      	beq.n	800c672 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 800c63e:	683b      	ldr	r3, [r7, #0]
 800c640:	2b00      	cmp	r3, #0
 800c642:	d003      	beq.n	800c64c <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 800c644:	f06f 0301 	mvn.w	r3, #1
 800c648:	61fb      	str	r3, [r7, #28]
 800c64a:	e012      	b.n	800c672 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 800c64c:	f06f 0302 	mvn.w	r3, #2
 800c650:	61fb      	str	r3, [r7, #28]
 800c652:	e00e      	b.n	800c672 <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 800c654:	68ba      	ldr	r2, [r7, #8]
 800c656:	69fb      	ldr	r3, [r7, #28]
 800c658:	4013      	ands	r3, r2
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d109      	bne.n	800c672 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 800c65e:	683b      	ldr	r3, [r7, #0]
 800c660:	2b00      	cmp	r3, #0
 800c662:	d003      	beq.n	800c66c <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 800c664:	f06f 0301 	mvn.w	r3, #1
 800c668:	61fb      	str	r3, [r7, #28]
 800c66a:	e002      	b.n	800c672 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 800c66c:	f06f 0302 	mvn.w	r3, #2
 800c670:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 800c672:	69fb      	ldr	r3, [r7, #28]
}
 800c674:	4618      	mov	r0, r3
 800c676:	3728      	adds	r7, #40	; 0x28
 800c678:	46bd      	mov	sp, r7
 800c67a:	bd80      	pop	{r7, pc}

0800c67c <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800c67c:	b580      	push	{r7, lr}
 800c67e:	b088      	sub	sp, #32
 800c680:	af00      	add	r7, sp, #0
 800c682:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800c684:	2300      	movs	r3, #0
 800c686:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c688:	f3ef 8305 	mrs	r3, IPSR
 800c68c:	60bb      	str	r3, [r7, #8]
  return(result);
 800c68e:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800c690:	2b00      	cmp	r3, #0
 800c692:	d174      	bne.n	800c77e <osMutexNew+0x102>
    if (attr != NULL) {
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	2b00      	cmp	r3, #0
 800c698:	d003      	beq.n	800c6a2 <osMutexNew+0x26>
      type = attr->attr_bits;
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	685b      	ldr	r3, [r3, #4]
 800c69e:	61bb      	str	r3, [r7, #24]
 800c6a0:	e001      	b.n	800c6a6 <osMutexNew+0x2a>
    } else {
      type = 0U;
 800c6a2:	2300      	movs	r3, #0
 800c6a4:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800c6a6:	69bb      	ldr	r3, [r7, #24]
 800c6a8:	f003 0301 	and.w	r3, r3, #1
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d002      	beq.n	800c6b6 <osMutexNew+0x3a>
      rmtx = 1U;
 800c6b0:	2301      	movs	r3, #1
 800c6b2:	617b      	str	r3, [r7, #20]
 800c6b4:	e001      	b.n	800c6ba <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800c6b6:	2300      	movs	r3, #0
 800c6b8:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800c6ba:	69bb      	ldr	r3, [r7, #24]
 800c6bc:	f003 0308 	and.w	r3, r3, #8
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d15c      	bne.n	800c77e <osMutexNew+0x102>
      mem = -1;
 800c6c4:	f04f 33ff 	mov.w	r3, #4294967295
 800c6c8:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d015      	beq.n	800c6fc <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	689b      	ldr	r3, [r3, #8]
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d006      	beq.n	800c6e6 <osMutexNew+0x6a>
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	68db      	ldr	r3, [r3, #12]
 800c6dc:	2b4f      	cmp	r3, #79	; 0x4f
 800c6de:	d902      	bls.n	800c6e6 <osMutexNew+0x6a>
          mem = 1;
 800c6e0:	2301      	movs	r3, #1
 800c6e2:	613b      	str	r3, [r7, #16]
 800c6e4:	e00c      	b.n	800c700 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	689b      	ldr	r3, [r3, #8]
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d108      	bne.n	800c700 <osMutexNew+0x84>
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	68db      	ldr	r3, [r3, #12]
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d104      	bne.n	800c700 <osMutexNew+0x84>
            mem = 0;
 800c6f6:	2300      	movs	r3, #0
 800c6f8:	613b      	str	r3, [r7, #16]
 800c6fa:	e001      	b.n	800c700 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800c6fc:	2300      	movs	r3, #0
 800c6fe:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800c700:	693b      	ldr	r3, [r7, #16]
 800c702:	2b01      	cmp	r3, #1
 800c704:	d112      	bne.n	800c72c <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800c706:	697b      	ldr	r3, [r7, #20]
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d007      	beq.n	800c71c <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	689b      	ldr	r3, [r3, #8]
 800c710:	4619      	mov	r1, r3
 800c712:	2004      	movs	r0, #4
 800c714:	f000 fe37 	bl	800d386 <xQueueCreateMutexStatic>
 800c718:	61f8      	str	r0, [r7, #28]
 800c71a:	e016      	b.n	800c74a <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	689b      	ldr	r3, [r3, #8]
 800c720:	4619      	mov	r1, r3
 800c722:	2001      	movs	r0, #1
 800c724:	f000 fe2f 	bl	800d386 <xQueueCreateMutexStatic>
 800c728:	61f8      	str	r0, [r7, #28]
 800c72a:	e00e      	b.n	800c74a <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800c72c:	693b      	ldr	r3, [r7, #16]
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d10b      	bne.n	800c74a <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800c732:	697b      	ldr	r3, [r7, #20]
 800c734:	2b00      	cmp	r3, #0
 800c736:	d004      	beq.n	800c742 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800c738:	2004      	movs	r0, #4
 800c73a:	f000 fe0c 	bl	800d356 <xQueueCreateMutex>
 800c73e:	61f8      	str	r0, [r7, #28]
 800c740:	e003      	b.n	800c74a <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800c742:	2001      	movs	r0, #1
 800c744:	f000 fe07 	bl	800d356 <xQueueCreateMutex>
 800c748:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800c74a:	69fb      	ldr	r3, [r7, #28]
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d00c      	beq.n	800c76a <osMutexNew+0xee>
        if (attr != NULL) {
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	2b00      	cmp	r3, #0
 800c754:	d003      	beq.n	800c75e <osMutexNew+0xe2>
          name = attr->name;
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	60fb      	str	r3, [r7, #12]
 800c75c:	e001      	b.n	800c762 <osMutexNew+0xe6>
        } else {
          name = NULL;
 800c75e:	2300      	movs	r3, #0
 800c760:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800c762:	68f9      	ldr	r1, [r7, #12]
 800c764:	69f8      	ldr	r0, [r7, #28]
 800c766:	f001 fbc1 	bl	800deec <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800c76a:	69fb      	ldr	r3, [r7, #28]
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d006      	beq.n	800c77e <osMutexNew+0x102>
 800c770:	697b      	ldr	r3, [r7, #20]
 800c772:	2b00      	cmp	r3, #0
 800c774:	d003      	beq.n	800c77e <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800c776:	69fb      	ldr	r3, [r7, #28]
 800c778:	f043 0301 	orr.w	r3, r3, #1
 800c77c:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800c77e:	69fb      	ldr	r3, [r7, #28]
}
 800c780:	4618      	mov	r0, r3
 800c782:	3720      	adds	r7, #32
 800c784:	46bd      	mov	sp, r7
 800c786:	bd80      	pop	{r7, pc}

0800c788 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800c788:	b580      	push	{r7, lr}
 800c78a:	b086      	sub	sp, #24
 800c78c:	af00      	add	r7, sp, #0
 800c78e:	6078      	str	r0, [r7, #4]
 800c790:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	f023 0301 	bic.w	r3, r3, #1
 800c798:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	f003 0301 	and.w	r3, r3, #1
 800c7a0:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800c7a2:	2300      	movs	r3, #0
 800c7a4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c7a6:	f3ef 8305 	mrs	r3, IPSR
 800c7aa:	60bb      	str	r3, [r7, #8]
  return(result);
 800c7ac:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d003      	beq.n	800c7ba <osMutexAcquire+0x32>
    stat = osErrorISR;
 800c7b2:	f06f 0305 	mvn.w	r3, #5
 800c7b6:	617b      	str	r3, [r7, #20]
 800c7b8:	e02c      	b.n	800c814 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800c7ba:	693b      	ldr	r3, [r7, #16]
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d103      	bne.n	800c7c8 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800c7c0:	f06f 0303 	mvn.w	r3, #3
 800c7c4:	617b      	str	r3, [r7, #20]
 800c7c6:	e025      	b.n	800c814 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d011      	beq.n	800c7f2 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800c7ce:	6839      	ldr	r1, [r7, #0]
 800c7d0:	6938      	ldr	r0, [r7, #16]
 800c7d2:	f000 fe27 	bl	800d424 <xQueueTakeMutexRecursive>
 800c7d6:	4603      	mov	r3, r0
 800c7d8:	2b01      	cmp	r3, #1
 800c7da:	d01b      	beq.n	800c814 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800c7dc:	683b      	ldr	r3, [r7, #0]
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d003      	beq.n	800c7ea <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800c7e2:	f06f 0301 	mvn.w	r3, #1
 800c7e6:	617b      	str	r3, [r7, #20]
 800c7e8:	e014      	b.n	800c814 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800c7ea:	f06f 0302 	mvn.w	r3, #2
 800c7ee:	617b      	str	r3, [r7, #20]
 800c7f0:	e010      	b.n	800c814 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800c7f2:	6839      	ldr	r1, [r7, #0]
 800c7f4:	6938      	ldr	r0, [r7, #16]
 800c7f6:	f001 f8c5 	bl	800d984 <xQueueSemaphoreTake>
 800c7fa:	4603      	mov	r3, r0
 800c7fc:	2b01      	cmp	r3, #1
 800c7fe:	d009      	beq.n	800c814 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800c800:	683b      	ldr	r3, [r7, #0]
 800c802:	2b00      	cmp	r3, #0
 800c804:	d003      	beq.n	800c80e <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800c806:	f06f 0301 	mvn.w	r3, #1
 800c80a:	617b      	str	r3, [r7, #20]
 800c80c:	e002      	b.n	800c814 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800c80e:	f06f 0302 	mvn.w	r3, #2
 800c812:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800c814:	697b      	ldr	r3, [r7, #20]
}
 800c816:	4618      	mov	r0, r3
 800c818:	3718      	adds	r7, #24
 800c81a:	46bd      	mov	sp, r7
 800c81c:	bd80      	pop	{r7, pc}

0800c81e <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800c81e:	b580      	push	{r7, lr}
 800c820:	b086      	sub	sp, #24
 800c822:	af00      	add	r7, sp, #0
 800c824:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	f023 0301 	bic.w	r3, r3, #1
 800c82c:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	f003 0301 	and.w	r3, r3, #1
 800c834:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800c836:	2300      	movs	r3, #0
 800c838:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c83a:	f3ef 8305 	mrs	r3, IPSR
 800c83e:	60bb      	str	r3, [r7, #8]
  return(result);
 800c840:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800c842:	2b00      	cmp	r3, #0
 800c844:	d003      	beq.n	800c84e <osMutexRelease+0x30>
    stat = osErrorISR;
 800c846:	f06f 0305 	mvn.w	r3, #5
 800c84a:	617b      	str	r3, [r7, #20]
 800c84c:	e01f      	b.n	800c88e <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800c84e:	693b      	ldr	r3, [r7, #16]
 800c850:	2b00      	cmp	r3, #0
 800c852:	d103      	bne.n	800c85c <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800c854:	f06f 0303 	mvn.w	r3, #3
 800c858:	617b      	str	r3, [r7, #20]
 800c85a:	e018      	b.n	800c88e <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800c85c:	68fb      	ldr	r3, [r7, #12]
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d009      	beq.n	800c876 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800c862:	6938      	ldr	r0, [r7, #16]
 800c864:	f000 fdaa 	bl	800d3bc <xQueueGiveMutexRecursive>
 800c868:	4603      	mov	r3, r0
 800c86a:	2b01      	cmp	r3, #1
 800c86c:	d00f      	beq.n	800c88e <osMutexRelease+0x70>
        stat = osErrorResource;
 800c86e:	f06f 0302 	mvn.w	r3, #2
 800c872:	617b      	str	r3, [r7, #20]
 800c874:	e00b      	b.n	800c88e <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800c876:	2300      	movs	r3, #0
 800c878:	2200      	movs	r2, #0
 800c87a:	2100      	movs	r1, #0
 800c87c:	6938      	ldr	r0, [r7, #16]
 800c87e:	f000 fe07 	bl	800d490 <xQueueGenericSend>
 800c882:	4603      	mov	r3, r0
 800c884:	2b01      	cmp	r3, #1
 800c886:	d002      	beq.n	800c88e <osMutexRelease+0x70>
        stat = osErrorResource;
 800c888:	f06f 0302 	mvn.w	r3, #2
 800c88c:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800c88e:	697b      	ldr	r3, [r7, #20]
}
 800c890:	4618      	mov	r0, r3
 800c892:	3718      	adds	r7, #24
 800c894:	46bd      	mov	sp, r7
 800c896:	bd80      	pop	{r7, pc}

0800c898 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800c898:	b580      	push	{r7, lr}
 800c89a:	b08a      	sub	sp, #40	; 0x28
 800c89c:	af02      	add	r7, sp, #8
 800c89e:	60f8      	str	r0, [r7, #12]
 800c8a0:	60b9      	str	r1, [r7, #8]
 800c8a2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800c8a4:	2300      	movs	r3, #0
 800c8a6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c8a8:	f3ef 8305 	mrs	r3, IPSR
 800c8ac:	613b      	str	r3, [r7, #16]
  return(result);
 800c8ae:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d15f      	bne.n	800c974 <osMessageQueueNew+0xdc>
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d05c      	beq.n	800c974 <osMessageQueueNew+0xdc>
 800c8ba:	68bb      	ldr	r3, [r7, #8]
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d059      	beq.n	800c974 <osMessageQueueNew+0xdc>
    mem = -1;
 800c8c0:	f04f 33ff 	mov.w	r3, #4294967295
 800c8c4:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d029      	beq.n	800c920 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	689b      	ldr	r3, [r3, #8]
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d012      	beq.n	800c8fa <osMessageQueueNew+0x62>
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	68db      	ldr	r3, [r3, #12]
 800c8d8:	2b4f      	cmp	r3, #79	; 0x4f
 800c8da:	d90e      	bls.n	800c8fa <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d00a      	beq.n	800c8fa <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	695a      	ldr	r2, [r3, #20]
 800c8e8:	68fb      	ldr	r3, [r7, #12]
 800c8ea:	68b9      	ldr	r1, [r7, #8]
 800c8ec:	fb01 f303 	mul.w	r3, r1, r3
 800c8f0:	429a      	cmp	r2, r3
 800c8f2:	d302      	bcc.n	800c8fa <osMessageQueueNew+0x62>
        mem = 1;
 800c8f4:	2301      	movs	r3, #1
 800c8f6:	61bb      	str	r3, [r7, #24]
 800c8f8:	e014      	b.n	800c924 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	689b      	ldr	r3, [r3, #8]
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d110      	bne.n	800c924 <osMessageQueueNew+0x8c>
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	68db      	ldr	r3, [r3, #12]
 800c906:	2b00      	cmp	r3, #0
 800c908:	d10c      	bne.n	800c924 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d108      	bne.n	800c924 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	695b      	ldr	r3, [r3, #20]
 800c916:	2b00      	cmp	r3, #0
 800c918:	d104      	bne.n	800c924 <osMessageQueueNew+0x8c>
          mem = 0;
 800c91a:	2300      	movs	r3, #0
 800c91c:	61bb      	str	r3, [r7, #24]
 800c91e:	e001      	b.n	800c924 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800c920:	2300      	movs	r3, #0
 800c922:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800c924:	69bb      	ldr	r3, [r7, #24]
 800c926:	2b01      	cmp	r3, #1
 800c928:	d10b      	bne.n	800c942 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	691a      	ldr	r2, [r3, #16]
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	689b      	ldr	r3, [r3, #8]
 800c932:	2100      	movs	r1, #0
 800c934:	9100      	str	r1, [sp, #0]
 800c936:	68b9      	ldr	r1, [r7, #8]
 800c938:	68f8      	ldr	r0, [r7, #12]
 800c93a:	f000 fc1d 	bl	800d178 <xQueueGenericCreateStatic>
 800c93e:	61f8      	str	r0, [r7, #28]
 800c940:	e008      	b.n	800c954 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800c942:	69bb      	ldr	r3, [r7, #24]
 800c944:	2b00      	cmp	r3, #0
 800c946:	d105      	bne.n	800c954 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800c948:	2200      	movs	r2, #0
 800c94a:	68b9      	ldr	r1, [r7, #8]
 800c94c:	68f8      	ldr	r0, [r7, #12]
 800c94e:	f000 fc8b 	bl	800d268 <xQueueGenericCreate>
 800c952:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800c954:	69fb      	ldr	r3, [r7, #28]
 800c956:	2b00      	cmp	r3, #0
 800c958:	d00c      	beq.n	800c974 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	d003      	beq.n	800c968 <osMessageQueueNew+0xd0>
        name = attr->name;
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	617b      	str	r3, [r7, #20]
 800c966:	e001      	b.n	800c96c <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800c968:	2300      	movs	r3, #0
 800c96a:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800c96c:	6979      	ldr	r1, [r7, #20]
 800c96e:	69f8      	ldr	r0, [r7, #28]
 800c970:	f001 fabc 	bl	800deec <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800c974:	69fb      	ldr	r3, [r7, #28]
}
 800c976:	4618      	mov	r0, r3
 800c978:	3720      	adds	r7, #32
 800c97a:	46bd      	mov	sp, r7
 800c97c:	bd80      	pop	{r7, pc}
	...

0800c980 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800c980:	b580      	push	{r7, lr}
 800c982:	b088      	sub	sp, #32
 800c984:	af00      	add	r7, sp, #0
 800c986:	60f8      	str	r0, [r7, #12]
 800c988:	60b9      	str	r1, [r7, #8]
 800c98a:	603b      	str	r3, [r7, #0]
 800c98c:	4613      	mov	r3, r2
 800c98e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800c990:	68fb      	ldr	r3, [r7, #12]
 800c992:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800c994:	2300      	movs	r3, #0
 800c996:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c998:	f3ef 8305 	mrs	r3, IPSR
 800c99c:	617b      	str	r3, [r7, #20]
  return(result);
 800c99e:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d028      	beq.n	800c9f6 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800c9a4:	69bb      	ldr	r3, [r7, #24]
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d005      	beq.n	800c9b6 <osMessageQueuePut+0x36>
 800c9aa:	68bb      	ldr	r3, [r7, #8]
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d002      	beq.n	800c9b6 <osMessageQueuePut+0x36>
 800c9b0:	683b      	ldr	r3, [r7, #0]
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d003      	beq.n	800c9be <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800c9b6:	f06f 0303 	mvn.w	r3, #3
 800c9ba:	61fb      	str	r3, [r7, #28]
 800c9bc:	e038      	b.n	800ca30 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800c9be:	2300      	movs	r3, #0
 800c9c0:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800c9c2:	f107 0210 	add.w	r2, r7, #16
 800c9c6:	2300      	movs	r3, #0
 800c9c8:	68b9      	ldr	r1, [r7, #8]
 800c9ca:	69b8      	ldr	r0, [r7, #24]
 800c9cc:	f000 fe5e 	bl	800d68c <xQueueGenericSendFromISR>
 800c9d0:	4603      	mov	r3, r0
 800c9d2:	2b01      	cmp	r3, #1
 800c9d4:	d003      	beq.n	800c9de <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800c9d6:	f06f 0302 	mvn.w	r3, #2
 800c9da:	61fb      	str	r3, [r7, #28]
 800c9dc:	e028      	b.n	800ca30 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800c9de:	693b      	ldr	r3, [r7, #16]
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d025      	beq.n	800ca30 <osMessageQueuePut+0xb0>
 800c9e4:	4b15      	ldr	r3, [pc, #84]	; (800ca3c <osMessageQueuePut+0xbc>)
 800c9e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c9ea:	601a      	str	r2, [r3, #0]
 800c9ec:	f3bf 8f4f 	dsb	sy
 800c9f0:	f3bf 8f6f 	isb	sy
 800c9f4:	e01c      	b.n	800ca30 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800c9f6:	69bb      	ldr	r3, [r7, #24]
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d002      	beq.n	800ca02 <osMessageQueuePut+0x82>
 800c9fc:	68bb      	ldr	r3, [r7, #8]
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d103      	bne.n	800ca0a <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800ca02:	f06f 0303 	mvn.w	r3, #3
 800ca06:	61fb      	str	r3, [r7, #28]
 800ca08:	e012      	b.n	800ca30 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800ca0a:	2300      	movs	r3, #0
 800ca0c:	683a      	ldr	r2, [r7, #0]
 800ca0e:	68b9      	ldr	r1, [r7, #8]
 800ca10:	69b8      	ldr	r0, [r7, #24]
 800ca12:	f000 fd3d 	bl	800d490 <xQueueGenericSend>
 800ca16:	4603      	mov	r3, r0
 800ca18:	2b01      	cmp	r3, #1
 800ca1a:	d009      	beq.n	800ca30 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800ca1c:	683b      	ldr	r3, [r7, #0]
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d003      	beq.n	800ca2a <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800ca22:	f06f 0301 	mvn.w	r3, #1
 800ca26:	61fb      	str	r3, [r7, #28]
 800ca28:	e002      	b.n	800ca30 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800ca2a:	f06f 0302 	mvn.w	r3, #2
 800ca2e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800ca30:	69fb      	ldr	r3, [r7, #28]
}
 800ca32:	4618      	mov	r0, r3
 800ca34:	3720      	adds	r7, #32
 800ca36:	46bd      	mov	sp, r7
 800ca38:	bd80      	pop	{r7, pc}
 800ca3a:	bf00      	nop
 800ca3c:	e000ed04 	.word	0xe000ed04

0800ca40 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800ca40:	b580      	push	{r7, lr}
 800ca42:	b088      	sub	sp, #32
 800ca44:	af00      	add	r7, sp, #0
 800ca46:	60f8      	str	r0, [r7, #12]
 800ca48:	60b9      	str	r1, [r7, #8]
 800ca4a:	607a      	str	r2, [r7, #4]
 800ca4c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800ca4e:	68fb      	ldr	r3, [r7, #12]
 800ca50:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800ca52:	2300      	movs	r3, #0
 800ca54:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ca56:	f3ef 8305 	mrs	r3, IPSR
 800ca5a:	617b      	str	r3, [r7, #20]
  return(result);
 800ca5c:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d028      	beq.n	800cab4 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ca62:	69bb      	ldr	r3, [r7, #24]
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d005      	beq.n	800ca74 <osMessageQueueGet+0x34>
 800ca68:	68bb      	ldr	r3, [r7, #8]
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d002      	beq.n	800ca74 <osMessageQueueGet+0x34>
 800ca6e:	683b      	ldr	r3, [r7, #0]
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d003      	beq.n	800ca7c <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800ca74:	f06f 0303 	mvn.w	r3, #3
 800ca78:	61fb      	str	r3, [r7, #28]
 800ca7a:	e037      	b.n	800caec <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800ca7c:	2300      	movs	r3, #0
 800ca7e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800ca80:	f107 0310 	add.w	r3, r7, #16
 800ca84:	461a      	mov	r2, r3
 800ca86:	68b9      	ldr	r1, [r7, #8]
 800ca88:	69b8      	ldr	r0, [r7, #24]
 800ca8a:	f001 f887 	bl	800db9c <xQueueReceiveFromISR>
 800ca8e:	4603      	mov	r3, r0
 800ca90:	2b01      	cmp	r3, #1
 800ca92:	d003      	beq.n	800ca9c <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800ca94:	f06f 0302 	mvn.w	r3, #2
 800ca98:	61fb      	str	r3, [r7, #28]
 800ca9a:	e027      	b.n	800caec <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800ca9c:	693b      	ldr	r3, [r7, #16]
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d024      	beq.n	800caec <osMessageQueueGet+0xac>
 800caa2:	4b15      	ldr	r3, [pc, #84]	; (800caf8 <osMessageQueueGet+0xb8>)
 800caa4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800caa8:	601a      	str	r2, [r3, #0]
 800caaa:	f3bf 8f4f 	dsb	sy
 800caae:	f3bf 8f6f 	isb	sy
 800cab2:	e01b      	b.n	800caec <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800cab4:	69bb      	ldr	r3, [r7, #24]
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d002      	beq.n	800cac0 <osMessageQueueGet+0x80>
 800caba:	68bb      	ldr	r3, [r7, #8]
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d103      	bne.n	800cac8 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800cac0:	f06f 0303 	mvn.w	r3, #3
 800cac4:	61fb      	str	r3, [r7, #28]
 800cac6:	e011      	b.n	800caec <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800cac8:	683a      	ldr	r2, [r7, #0]
 800caca:	68b9      	ldr	r1, [r7, #8]
 800cacc:	69b8      	ldr	r0, [r7, #24]
 800cace:	f000 fe79 	bl	800d7c4 <xQueueReceive>
 800cad2:	4603      	mov	r3, r0
 800cad4:	2b01      	cmp	r3, #1
 800cad6:	d009      	beq.n	800caec <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800cad8:	683b      	ldr	r3, [r7, #0]
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d003      	beq.n	800cae6 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800cade:	f06f 0301 	mvn.w	r3, #1
 800cae2:	61fb      	str	r3, [r7, #28]
 800cae4:	e002      	b.n	800caec <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800cae6:	f06f 0302 	mvn.w	r3, #2
 800caea:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800caec:	69fb      	ldr	r3, [r7, #28]
}
 800caee:	4618      	mov	r0, r3
 800caf0:	3720      	adds	r7, #32
 800caf2:	46bd      	mov	sp, r7
 800caf4:	bd80      	pop	{r7, pc}
 800caf6:	bf00      	nop
 800caf8:	e000ed04 	.word	0xe000ed04

0800cafc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800cafc:	b480      	push	{r7}
 800cafe:	b085      	sub	sp, #20
 800cb00:	af00      	add	r7, sp, #0
 800cb02:	60f8      	str	r0, [r7, #12]
 800cb04:	60b9      	str	r1, [r7, #8]
 800cb06:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	4a07      	ldr	r2, [pc, #28]	; (800cb28 <vApplicationGetIdleTaskMemory+0x2c>)
 800cb0c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800cb0e:	68bb      	ldr	r3, [r7, #8]
 800cb10:	4a06      	ldr	r2, [pc, #24]	; (800cb2c <vApplicationGetIdleTaskMemory+0x30>)
 800cb12:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	2280      	movs	r2, #128	; 0x80
 800cb18:	601a      	str	r2, [r3, #0]
}
 800cb1a:	bf00      	nop
 800cb1c:	3714      	adds	r7, #20
 800cb1e:	46bd      	mov	sp, r7
 800cb20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb24:	4770      	bx	lr
 800cb26:	bf00      	nop
 800cb28:	20000660 	.word	0x20000660
 800cb2c:	200006bc 	.word	0x200006bc

0800cb30 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800cb30:	b480      	push	{r7}
 800cb32:	b085      	sub	sp, #20
 800cb34:	af00      	add	r7, sp, #0
 800cb36:	60f8      	str	r0, [r7, #12]
 800cb38:	60b9      	str	r1, [r7, #8]
 800cb3a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800cb3c:	68fb      	ldr	r3, [r7, #12]
 800cb3e:	4a07      	ldr	r2, [pc, #28]	; (800cb5c <vApplicationGetTimerTaskMemory+0x2c>)
 800cb40:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800cb42:	68bb      	ldr	r3, [r7, #8]
 800cb44:	4a06      	ldr	r2, [pc, #24]	; (800cb60 <vApplicationGetTimerTaskMemory+0x30>)
 800cb46:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800cb4e:	601a      	str	r2, [r3, #0]
}
 800cb50:	bf00      	nop
 800cb52:	3714      	adds	r7, #20
 800cb54:	46bd      	mov	sp, r7
 800cb56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb5a:	4770      	bx	lr
 800cb5c:	200008bc 	.word	0x200008bc
 800cb60:	20000918 	.word	0x20000918

0800cb64 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 800cb64:	b580      	push	{r7, lr}
 800cb66:	b086      	sub	sp, #24
 800cb68:	af00      	add	r7, sp, #0
 800cb6a:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d10a      	bne.n	800cb88 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800cb72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb76:	f383 8811 	msr	BASEPRI, r3
 800cb7a:	f3bf 8f6f 	isb	sy
 800cb7e:	f3bf 8f4f 	dsb	sy
 800cb82:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800cb84:	bf00      	nop
 800cb86:	e7fe      	b.n	800cb86 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 800cb88:	2320      	movs	r3, #32
 800cb8a:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 800cb8c:	68bb      	ldr	r3, [r7, #8]
 800cb8e:	2b20      	cmp	r3, #32
 800cb90:	d00a      	beq.n	800cba8 <xEventGroupCreateStatic+0x44>
	__asm volatile
 800cb92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb96:	f383 8811 	msr	BASEPRI, r3
 800cb9a:	f3bf 8f6f 	isb	sy
 800cb9e:	f3bf 8f4f 	dsb	sy
 800cba2:	60fb      	str	r3, [r7, #12]
}
 800cba4:	bf00      	nop
 800cba6:	e7fe      	b.n	800cba6 <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 800cbac:	697b      	ldr	r3, [r7, #20]
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	d00a      	beq.n	800cbc8 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 800cbb2:	697b      	ldr	r3, [r7, #20]
 800cbb4:	2200      	movs	r2, #0
 800cbb6:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800cbb8:	697b      	ldr	r3, [r7, #20]
 800cbba:	3304      	adds	r3, #4
 800cbbc:	4618      	mov	r0, r3
 800cbbe:	f000 f9bf 	bl	800cf40 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 800cbc2:	697b      	ldr	r3, [r7, #20]
 800cbc4:	2201      	movs	r2, #1
 800cbc6:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 800cbc8:	697b      	ldr	r3, [r7, #20]
	}
 800cbca:	4618      	mov	r0, r3
 800cbcc:	3718      	adds	r7, #24
 800cbce:	46bd      	mov	sp, r7
 800cbd0:	bd80      	pop	{r7, pc}

0800cbd2 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 800cbd2:	b580      	push	{r7, lr}
 800cbd4:	b082      	sub	sp, #8
 800cbd6:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 800cbd8:	2020      	movs	r0, #32
 800cbda:	f003 f96d 	bl	800feb8 <pvPortMalloc>
 800cbde:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d00a      	beq.n	800cbfc <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	2200      	movs	r2, #0
 800cbea:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	3304      	adds	r3, #4
 800cbf0:	4618      	mov	r0, r3
 800cbf2:	f000 f9a5 	bl	800cf40 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	2200      	movs	r2, #0
 800cbfa:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 800cbfc:	687b      	ldr	r3, [r7, #4]
	}
 800cbfe:	4618      	mov	r0, r3
 800cc00:	3708      	adds	r7, #8
 800cc02:	46bd      	mov	sp, r7
 800cc04:	bd80      	pop	{r7, pc}
	...

0800cc08 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 800cc08:	b580      	push	{r7, lr}
 800cc0a:	b090      	sub	sp, #64	; 0x40
 800cc0c:	af00      	add	r7, sp, #0
 800cc0e:	60f8      	str	r0, [r7, #12]
 800cc10:	60b9      	str	r1, [r7, #8]
 800cc12:	607a      	str	r2, [r7, #4]
 800cc14:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 800cc16:	68fb      	ldr	r3, [r7, #12]
 800cc18:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 800cc1a:	2300      	movs	r3, #0
 800cc1c:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 800cc1e:	2300      	movs	r3, #0
 800cc20:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 800cc22:	68fb      	ldr	r3, [r7, #12]
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d10a      	bne.n	800cc3e <xEventGroupWaitBits+0x36>
	__asm volatile
 800cc28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc2c:	f383 8811 	msr	BASEPRI, r3
 800cc30:	f3bf 8f6f 	isb	sy
 800cc34:	f3bf 8f4f 	dsb	sy
 800cc38:	623b      	str	r3, [r7, #32]
}
 800cc3a:	bf00      	nop
 800cc3c:	e7fe      	b.n	800cc3c <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800cc3e:	68bb      	ldr	r3, [r7, #8]
 800cc40:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d00a      	beq.n	800cc5e <xEventGroupWaitBits+0x56>
	__asm volatile
 800cc48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc4c:	f383 8811 	msr	BASEPRI, r3
 800cc50:	f3bf 8f6f 	isb	sy
 800cc54:	f3bf 8f4f 	dsb	sy
 800cc58:	61fb      	str	r3, [r7, #28]
}
 800cc5a:	bf00      	nop
 800cc5c:	e7fe      	b.n	800cc5c <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 800cc5e:	68bb      	ldr	r3, [r7, #8]
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d10a      	bne.n	800cc7a <xEventGroupWaitBits+0x72>
	__asm volatile
 800cc64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc68:	f383 8811 	msr	BASEPRI, r3
 800cc6c:	f3bf 8f6f 	isb	sy
 800cc70:	f3bf 8f4f 	dsb	sy
 800cc74:	61bb      	str	r3, [r7, #24]
}
 800cc76:	bf00      	nop
 800cc78:	e7fe      	b.n	800cc78 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cc7a:	f002 f967 	bl	800ef4c <xTaskGetSchedulerState>
 800cc7e:	4603      	mov	r3, r0
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d102      	bne.n	800cc8a <xEventGroupWaitBits+0x82>
 800cc84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d101      	bne.n	800cc8e <xEventGroupWaitBits+0x86>
 800cc8a:	2301      	movs	r3, #1
 800cc8c:	e000      	b.n	800cc90 <xEventGroupWaitBits+0x88>
 800cc8e:	2300      	movs	r3, #0
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d10a      	bne.n	800ccaa <xEventGroupWaitBits+0xa2>
	__asm volatile
 800cc94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc98:	f383 8811 	msr	BASEPRI, r3
 800cc9c:	f3bf 8f6f 	isb	sy
 800cca0:	f3bf 8f4f 	dsb	sy
 800cca4:	617b      	str	r3, [r7, #20]
}
 800cca6:	bf00      	nop
 800cca8:	e7fe      	b.n	800cca8 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 800ccaa:	f001 fcbf 	bl	800e62c <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 800ccae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ccb0:	681b      	ldr	r3, [r3, #0]
 800ccb2:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 800ccb4:	683a      	ldr	r2, [r7, #0]
 800ccb6:	68b9      	ldr	r1, [r7, #8]
 800ccb8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ccba:	f000 f90b 	bl	800ced4 <prvTestWaitCondition>
 800ccbe:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 800ccc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d00e      	beq.n	800cce4 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 800ccc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccc8:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 800ccca:	2300      	movs	r3, #0
 800cccc:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d028      	beq.n	800cd26 <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800ccd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ccd6:	681a      	ldr	r2, [r3, #0]
 800ccd8:	68bb      	ldr	r3, [r7, #8]
 800ccda:	43db      	mvns	r3, r3
 800ccdc:	401a      	ands	r2, r3
 800ccde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cce0:	601a      	str	r2, [r3, #0]
 800cce2:	e020      	b.n	800cd26 <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 800cce4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d104      	bne.n	800ccf4 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 800ccea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccec:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 800ccee:	2301      	movs	r3, #1
 800ccf0:	633b      	str	r3, [r7, #48]	; 0x30
 800ccf2:	e018      	b.n	800cd26 <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d003      	beq.n	800cd02 <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 800ccfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccfc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800cd00:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 800cd02:	683b      	ldr	r3, [r7, #0]
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d003      	beq.n	800cd10 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 800cd08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd0a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800cd0e:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 800cd10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd12:	1d18      	adds	r0, r3, #4
 800cd14:	68ba      	ldr	r2, [r7, #8]
 800cd16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd18:	4313      	orrs	r3, r2
 800cd1a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cd1c:	4619      	mov	r1, r3
 800cd1e:	f001 fe7d 	bl	800ea1c <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 800cd22:	2300      	movs	r3, #0
 800cd24:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 800cd26:	f001 fc8f 	bl	800e648 <xTaskResumeAll>
 800cd2a:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 800cd2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d031      	beq.n	800cd96 <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 800cd32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d107      	bne.n	800cd48 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 800cd38:	4b19      	ldr	r3, [pc, #100]	; (800cda0 <xEventGroupWaitBits+0x198>)
 800cd3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cd3e:	601a      	str	r2, [r3, #0]
 800cd40:	f3bf 8f4f 	dsb	sy
 800cd44:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 800cd48:	f002 fa76 	bl	800f238 <uxTaskResetEventItemValue>
 800cd4c:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 800cd4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	d11a      	bne.n	800cd8e <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 800cd58:	f002 ff8c 	bl	800fc74 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 800cd5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 800cd62:	683a      	ldr	r2, [r7, #0]
 800cd64:	68b9      	ldr	r1, [r7, #8]
 800cd66:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800cd68:	f000 f8b4 	bl	800ced4 <prvTestWaitCondition>
 800cd6c:	4603      	mov	r3, r0
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d009      	beq.n	800cd86 <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d006      	beq.n	800cd86 <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800cd78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd7a:	681a      	ldr	r2, [r3, #0]
 800cd7c:	68bb      	ldr	r3, [r7, #8]
 800cd7e:	43db      	mvns	r3, r3
 800cd80:	401a      	ands	r2, r3
 800cd82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd84:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 800cd86:	2301      	movs	r3, #1
 800cd88:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 800cd8a:	f002 ffa3 	bl	800fcd4 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 800cd8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd90:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800cd94:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 800cd96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800cd98:	4618      	mov	r0, r3
 800cd9a:	3740      	adds	r7, #64	; 0x40
 800cd9c:	46bd      	mov	sp, r7
 800cd9e:	bd80      	pop	{r7, pc}
 800cda0:	e000ed04 	.word	0xe000ed04

0800cda4 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 800cda4:	b580      	push	{r7, lr}
 800cda6:	b08e      	sub	sp, #56	; 0x38
 800cda8:	af00      	add	r7, sp, #0
 800cdaa:	6078      	str	r0, [r7, #4]
 800cdac:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 800cdae:	2300      	movs	r3, #0
 800cdb0:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 800cdb6:	2300      	movs	r3, #0
 800cdb8:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d10a      	bne.n	800cdd6 <xEventGroupSetBits+0x32>
	__asm volatile
 800cdc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdc4:	f383 8811 	msr	BASEPRI, r3
 800cdc8:	f3bf 8f6f 	isb	sy
 800cdcc:	f3bf 8f4f 	dsb	sy
 800cdd0:	613b      	str	r3, [r7, #16]
}
 800cdd2:	bf00      	nop
 800cdd4:	e7fe      	b.n	800cdd4 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800cdd6:	683b      	ldr	r3, [r7, #0]
 800cdd8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d00a      	beq.n	800cdf6 <xEventGroupSetBits+0x52>
	__asm volatile
 800cde0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cde4:	f383 8811 	msr	BASEPRI, r3
 800cde8:	f3bf 8f6f 	isb	sy
 800cdec:	f3bf 8f4f 	dsb	sy
 800cdf0:	60fb      	str	r3, [r7, #12]
}
 800cdf2:	bf00      	nop
 800cdf4:	e7fe      	b.n	800cdf4 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 800cdf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdf8:	3304      	adds	r3, #4
 800cdfa:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cdfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdfe:	3308      	adds	r3, #8
 800ce00:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 800ce02:	f001 fc13 	bl	800e62c <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 800ce06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce08:	68db      	ldr	r3, [r3, #12]
 800ce0a:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 800ce0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce0e:	681a      	ldr	r2, [r3, #0]
 800ce10:	683b      	ldr	r3, [r7, #0]
 800ce12:	431a      	orrs	r2, r3
 800ce14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce16:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 800ce18:	e03c      	b.n	800ce94 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 800ce1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce1c:	685b      	ldr	r3, [r3, #4]
 800ce1e:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 800ce20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 800ce26:	2300      	movs	r3, #0
 800ce28:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 800ce2a:	69bb      	ldr	r3, [r7, #24]
 800ce2c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800ce30:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 800ce32:	69bb      	ldr	r3, [r7, #24]
 800ce34:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800ce38:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800ce3a:	697b      	ldr	r3, [r7, #20]
 800ce3c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d108      	bne.n	800ce56 <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 800ce44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce46:	681a      	ldr	r2, [r3, #0]
 800ce48:	69bb      	ldr	r3, [r7, #24]
 800ce4a:	4013      	ands	r3, r2
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d00b      	beq.n	800ce68 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 800ce50:	2301      	movs	r3, #1
 800ce52:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ce54:	e008      	b.n	800ce68 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 800ce56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce58:	681a      	ldr	r2, [r3, #0]
 800ce5a:	69bb      	ldr	r3, [r7, #24]
 800ce5c:	4013      	ands	r3, r2
 800ce5e:	69ba      	ldr	r2, [r7, #24]
 800ce60:	429a      	cmp	r2, r3
 800ce62:	d101      	bne.n	800ce68 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 800ce64:	2301      	movs	r3, #1
 800ce66:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 800ce68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d010      	beq.n	800ce90 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800ce6e:	697b      	ldr	r3, [r7, #20]
 800ce70:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d003      	beq.n	800ce80 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 800ce78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ce7a:	69bb      	ldr	r3, [r7, #24]
 800ce7c:	4313      	orrs	r3, r2
 800ce7e:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 800ce80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce82:	681b      	ldr	r3, [r3, #0]
 800ce84:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800ce88:	4619      	mov	r1, r3
 800ce8a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ce8c:	f001 fe92 	bl	800ebb4 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 800ce90:	69fb      	ldr	r3, [r7, #28]
 800ce92:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 800ce94:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ce96:	6a3b      	ldr	r3, [r7, #32]
 800ce98:	429a      	cmp	r2, r3
 800ce9a:	d1be      	bne.n	800ce1a <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800ce9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce9e:	681a      	ldr	r2, [r3, #0]
 800cea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cea2:	43db      	mvns	r3, r3
 800cea4:	401a      	ands	r2, r3
 800cea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cea8:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 800ceaa:	f001 fbcd 	bl	800e648 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 800ceae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ceb0:	681b      	ldr	r3, [r3, #0]
}
 800ceb2:	4618      	mov	r0, r3
 800ceb4:	3738      	adds	r7, #56	; 0x38
 800ceb6:	46bd      	mov	sp, r7
 800ceb8:	bd80      	pop	{r7, pc}

0800ceba <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 800ceba:	b580      	push	{r7, lr}
 800cebc:	b082      	sub	sp, #8
 800cebe:	af00      	add	r7, sp, #0
 800cec0:	6078      	str	r0, [r7, #4]
 800cec2:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 800cec4:	6839      	ldr	r1, [r7, #0]
 800cec6:	6878      	ldr	r0, [r7, #4]
 800cec8:	f7ff ff6c 	bl	800cda4 <xEventGroupSetBits>
}
 800cecc:	bf00      	nop
 800cece:	3708      	adds	r7, #8
 800ced0:	46bd      	mov	sp, r7
 800ced2:	bd80      	pop	{r7, pc}

0800ced4 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 800ced4:	b480      	push	{r7}
 800ced6:	b087      	sub	sp, #28
 800ced8:	af00      	add	r7, sp, #0
 800ceda:	60f8      	str	r0, [r7, #12]
 800cedc:	60b9      	str	r1, [r7, #8]
 800cede:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 800cee0:	2300      	movs	r3, #0
 800cee2:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d107      	bne.n	800cefa <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 800ceea:	68fa      	ldr	r2, [r7, #12]
 800ceec:	68bb      	ldr	r3, [r7, #8]
 800ceee:	4013      	ands	r3, r2
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d00a      	beq.n	800cf0a <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800cef4:	2301      	movs	r3, #1
 800cef6:	617b      	str	r3, [r7, #20]
 800cef8:	e007      	b.n	800cf0a <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 800cefa:	68fa      	ldr	r2, [r7, #12]
 800cefc:	68bb      	ldr	r3, [r7, #8]
 800cefe:	4013      	ands	r3, r2
 800cf00:	68ba      	ldr	r2, [r7, #8]
 800cf02:	429a      	cmp	r2, r3
 800cf04:	d101      	bne.n	800cf0a <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800cf06:	2301      	movs	r3, #1
 800cf08:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 800cf0a:	697b      	ldr	r3, [r7, #20]
}
 800cf0c:	4618      	mov	r0, r3
 800cf0e:	371c      	adds	r7, #28
 800cf10:	46bd      	mov	sp, r7
 800cf12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf16:	4770      	bx	lr

0800cf18 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800cf18:	b580      	push	{r7, lr}
 800cf1a:	b086      	sub	sp, #24
 800cf1c:	af00      	add	r7, sp, #0
 800cf1e:	60f8      	str	r0, [r7, #12]
 800cf20:	60b9      	str	r1, [r7, #8]
 800cf22:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	68ba      	ldr	r2, [r7, #8]
 800cf28:	68f9      	ldr	r1, [r7, #12]
 800cf2a:	4804      	ldr	r0, [pc, #16]	; (800cf3c <xEventGroupSetBitsFromISR+0x24>)
 800cf2c:	f002 fd52 	bl	800f9d4 <xTimerPendFunctionCallFromISR>
 800cf30:	6178      	str	r0, [r7, #20]

		return xReturn;
 800cf32:	697b      	ldr	r3, [r7, #20]
	}
 800cf34:	4618      	mov	r0, r3
 800cf36:	3718      	adds	r7, #24
 800cf38:	46bd      	mov	sp, r7
 800cf3a:	bd80      	pop	{r7, pc}
 800cf3c:	0800cebb 	.word	0x0800cebb

0800cf40 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800cf40:	b480      	push	{r7}
 800cf42:	b083      	sub	sp, #12
 800cf44:	af00      	add	r7, sp, #0
 800cf46:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	f103 0208 	add.w	r2, r3, #8
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	f04f 32ff 	mov.w	r2, #4294967295
 800cf58:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	f103 0208 	add.w	r2, r3, #8
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	f103 0208 	add.w	r2, r3, #8
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	2200      	movs	r2, #0
 800cf72:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800cf74:	bf00      	nop
 800cf76:	370c      	adds	r7, #12
 800cf78:	46bd      	mov	sp, r7
 800cf7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf7e:	4770      	bx	lr

0800cf80 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800cf80:	b480      	push	{r7}
 800cf82:	b083      	sub	sp, #12
 800cf84:	af00      	add	r7, sp, #0
 800cf86:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	2200      	movs	r2, #0
 800cf8c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800cf8e:	bf00      	nop
 800cf90:	370c      	adds	r7, #12
 800cf92:	46bd      	mov	sp, r7
 800cf94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf98:	4770      	bx	lr

0800cf9a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800cf9a:	b480      	push	{r7}
 800cf9c:	b085      	sub	sp, #20
 800cf9e:	af00      	add	r7, sp, #0
 800cfa0:	6078      	str	r0, [r7, #4]
 800cfa2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	685b      	ldr	r3, [r3, #4]
 800cfa8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800cfaa:	683b      	ldr	r3, [r7, #0]
 800cfac:	68fa      	ldr	r2, [r7, #12]
 800cfae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800cfb0:	68fb      	ldr	r3, [r7, #12]
 800cfb2:	689a      	ldr	r2, [r3, #8]
 800cfb4:	683b      	ldr	r3, [r7, #0]
 800cfb6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800cfb8:	68fb      	ldr	r3, [r7, #12]
 800cfba:	689b      	ldr	r3, [r3, #8]
 800cfbc:	683a      	ldr	r2, [r7, #0]
 800cfbe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800cfc0:	68fb      	ldr	r3, [r7, #12]
 800cfc2:	683a      	ldr	r2, [r7, #0]
 800cfc4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800cfc6:	683b      	ldr	r3, [r7, #0]
 800cfc8:	687a      	ldr	r2, [r7, #4]
 800cfca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	1c5a      	adds	r2, r3, #1
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	601a      	str	r2, [r3, #0]
}
 800cfd6:	bf00      	nop
 800cfd8:	3714      	adds	r7, #20
 800cfda:	46bd      	mov	sp, r7
 800cfdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfe0:	4770      	bx	lr

0800cfe2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800cfe2:	b480      	push	{r7}
 800cfe4:	b085      	sub	sp, #20
 800cfe6:	af00      	add	r7, sp, #0
 800cfe8:	6078      	str	r0, [r7, #4]
 800cfea:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800cfec:	683b      	ldr	r3, [r7, #0]
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800cff2:	68bb      	ldr	r3, [r7, #8]
 800cff4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cff8:	d103      	bne.n	800d002 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	691b      	ldr	r3, [r3, #16]
 800cffe:	60fb      	str	r3, [r7, #12]
 800d000:	e00c      	b.n	800d01c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	3308      	adds	r3, #8
 800d006:	60fb      	str	r3, [r7, #12]
 800d008:	e002      	b.n	800d010 <vListInsert+0x2e>
 800d00a:	68fb      	ldr	r3, [r7, #12]
 800d00c:	685b      	ldr	r3, [r3, #4]
 800d00e:	60fb      	str	r3, [r7, #12]
 800d010:	68fb      	ldr	r3, [r7, #12]
 800d012:	685b      	ldr	r3, [r3, #4]
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	68ba      	ldr	r2, [r7, #8]
 800d018:	429a      	cmp	r2, r3
 800d01a:	d2f6      	bcs.n	800d00a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800d01c:	68fb      	ldr	r3, [r7, #12]
 800d01e:	685a      	ldr	r2, [r3, #4]
 800d020:	683b      	ldr	r3, [r7, #0]
 800d022:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d024:	683b      	ldr	r3, [r7, #0]
 800d026:	685b      	ldr	r3, [r3, #4]
 800d028:	683a      	ldr	r2, [r7, #0]
 800d02a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800d02c:	683b      	ldr	r3, [r7, #0]
 800d02e:	68fa      	ldr	r2, [r7, #12]
 800d030:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	683a      	ldr	r2, [r7, #0]
 800d036:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800d038:	683b      	ldr	r3, [r7, #0]
 800d03a:	687a      	ldr	r2, [r7, #4]
 800d03c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	681b      	ldr	r3, [r3, #0]
 800d042:	1c5a      	adds	r2, r3, #1
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	601a      	str	r2, [r3, #0]
}
 800d048:	bf00      	nop
 800d04a:	3714      	adds	r7, #20
 800d04c:	46bd      	mov	sp, r7
 800d04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d052:	4770      	bx	lr

0800d054 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800d054:	b480      	push	{r7}
 800d056:	b085      	sub	sp, #20
 800d058:	af00      	add	r7, sp, #0
 800d05a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	691b      	ldr	r3, [r3, #16]
 800d060:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	685b      	ldr	r3, [r3, #4]
 800d066:	687a      	ldr	r2, [r7, #4]
 800d068:	6892      	ldr	r2, [r2, #8]
 800d06a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	689b      	ldr	r3, [r3, #8]
 800d070:	687a      	ldr	r2, [r7, #4]
 800d072:	6852      	ldr	r2, [r2, #4]
 800d074:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d076:	68fb      	ldr	r3, [r7, #12]
 800d078:	685b      	ldr	r3, [r3, #4]
 800d07a:	687a      	ldr	r2, [r7, #4]
 800d07c:	429a      	cmp	r2, r3
 800d07e:	d103      	bne.n	800d088 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	689a      	ldr	r2, [r3, #8]
 800d084:	68fb      	ldr	r3, [r7, #12]
 800d086:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	2200      	movs	r2, #0
 800d08c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800d08e:	68fb      	ldr	r3, [r7, #12]
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	1e5a      	subs	r2, r3, #1
 800d094:	68fb      	ldr	r3, [r7, #12]
 800d096:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800d098:	68fb      	ldr	r3, [r7, #12]
 800d09a:	681b      	ldr	r3, [r3, #0]
}
 800d09c:	4618      	mov	r0, r3
 800d09e:	3714      	adds	r7, #20
 800d0a0:	46bd      	mov	sp, r7
 800d0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0a6:	4770      	bx	lr

0800d0a8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800d0a8:	b580      	push	{r7, lr}
 800d0aa:	b084      	sub	sp, #16
 800d0ac:	af00      	add	r7, sp, #0
 800d0ae:	6078      	str	r0, [r7, #4]
 800d0b0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d0b6:	68fb      	ldr	r3, [r7, #12]
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d10a      	bne.n	800d0d2 <xQueueGenericReset+0x2a>
	__asm volatile
 800d0bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0c0:	f383 8811 	msr	BASEPRI, r3
 800d0c4:	f3bf 8f6f 	isb	sy
 800d0c8:	f3bf 8f4f 	dsb	sy
 800d0cc:	60bb      	str	r3, [r7, #8]
}
 800d0ce:	bf00      	nop
 800d0d0:	e7fe      	b.n	800d0d0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800d0d2:	f002 fdcf 	bl	800fc74 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d0d6:	68fb      	ldr	r3, [r7, #12]
 800d0d8:	681a      	ldr	r2, [r3, #0]
 800d0da:	68fb      	ldr	r3, [r7, #12]
 800d0dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d0de:	68f9      	ldr	r1, [r7, #12]
 800d0e0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d0e2:	fb01 f303 	mul.w	r3, r1, r3
 800d0e6:	441a      	add	r2, r3
 800d0e8:	68fb      	ldr	r3, [r7, #12]
 800d0ea:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d0ec:	68fb      	ldr	r3, [r7, #12]
 800d0ee:	2200      	movs	r2, #0
 800d0f0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d0f2:	68fb      	ldr	r3, [r7, #12]
 800d0f4:	681a      	ldr	r2, [r3, #0]
 800d0f6:	68fb      	ldr	r3, [r7, #12]
 800d0f8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d0fa:	68fb      	ldr	r3, [r7, #12]
 800d0fc:	681a      	ldr	r2, [r3, #0]
 800d0fe:	68fb      	ldr	r3, [r7, #12]
 800d100:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d102:	3b01      	subs	r3, #1
 800d104:	68f9      	ldr	r1, [r7, #12]
 800d106:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d108:	fb01 f303 	mul.w	r3, r1, r3
 800d10c:	441a      	add	r2, r3
 800d10e:	68fb      	ldr	r3, [r7, #12]
 800d110:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800d112:	68fb      	ldr	r3, [r7, #12]
 800d114:	22ff      	movs	r2, #255	; 0xff
 800d116:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	22ff      	movs	r2, #255	; 0xff
 800d11e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800d122:	683b      	ldr	r3, [r7, #0]
 800d124:	2b00      	cmp	r3, #0
 800d126:	d114      	bne.n	800d152 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d128:	68fb      	ldr	r3, [r7, #12]
 800d12a:	691b      	ldr	r3, [r3, #16]
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d01a      	beq.n	800d166 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d130:	68fb      	ldr	r3, [r7, #12]
 800d132:	3310      	adds	r3, #16
 800d134:	4618      	mov	r0, r3
 800d136:	f001 fcd9 	bl	800eaec <xTaskRemoveFromEventList>
 800d13a:	4603      	mov	r3, r0
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	d012      	beq.n	800d166 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800d140:	4b0c      	ldr	r3, [pc, #48]	; (800d174 <xQueueGenericReset+0xcc>)
 800d142:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d146:	601a      	str	r2, [r3, #0]
 800d148:	f3bf 8f4f 	dsb	sy
 800d14c:	f3bf 8f6f 	isb	sy
 800d150:	e009      	b.n	800d166 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d152:	68fb      	ldr	r3, [r7, #12]
 800d154:	3310      	adds	r3, #16
 800d156:	4618      	mov	r0, r3
 800d158:	f7ff fef2 	bl	800cf40 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d15c:	68fb      	ldr	r3, [r7, #12]
 800d15e:	3324      	adds	r3, #36	; 0x24
 800d160:	4618      	mov	r0, r3
 800d162:	f7ff feed 	bl	800cf40 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800d166:	f002 fdb5 	bl	800fcd4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800d16a:	2301      	movs	r3, #1
}
 800d16c:	4618      	mov	r0, r3
 800d16e:	3710      	adds	r7, #16
 800d170:	46bd      	mov	sp, r7
 800d172:	bd80      	pop	{r7, pc}
 800d174:	e000ed04 	.word	0xe000ed04

0800d178 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800d178:	b580      	push	{r7, lr}
 800d17a:	b08e      	sub	sp, #56	; 0x38
 800d17c:	af02      	add	r7, sp, #8
 800d17e:	60f8      	str	r0, [r7, #12]
 800d180:	60b9      	str	r1, [r7, #8]
 800d182:	607a      	str	r2, [r7, #4]
 800d184:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d186:	68fb      	ldr	r3, [r7, #12]
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d10a      	bne.n	800d1a2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800d18c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d190:	f383 8811 	msr	BASEPRI, r3
 800d194:	f3bf 8f6f 	isb	sy
 800d198:	f3bf 8f4f 	dsb	sy
 800d19c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d19e:	bf00      	nop
 800d1a0:	e7fe      	b.n	800d1a0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800d1a2:	683b      	ldr	r3, [r7, #0]
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d10a      	bne.n	800d1be <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800d1a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1ac:	f383 8811 	msr	BASEPRI, r3
 800d1b0:	f3bf 8f6f 	isb	sy
 800d1b4:	f3bf 8f4f 	dsb	sy
 800d1b8:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d1ba:	bf00      	nop
 800d1bc:	e7fe      	b.n	800d1bc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	d002      	beq.n	800d1ca <xQueueGenericCreateStatic+0x52>
 800d1c4:	68bb      	ldr	r3, [r7, #8]
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d001      	beq.n	800d1ce <xQueueGenericCreateStatic+0x56>
 800d1ca:	2301      	movs	r3, #1
 800d1cc:	e000      	b.n	800d1d0 <xQueueGenericCreateStatic+0x58>
 800d1ce:	2300      	movs	r3, #0
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d10a      	bne.n	800d1ea <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800d1d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1d8:	f383 8811 	msr	BASEPRI, r3
 800d1dc:	f3bf 8f6f 	isb	sy
 800d1e0:	f3bf 8f4f 	dsb	sy
 800d1e4:	623b      	str	r3, [r7, #32]
}
 800d1e6:	bf00      	nop
 800d1e8:	e7fe      	b.n	800d1e8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d102      	bne.n	800d1f6 <xQueueGenericCreateStatic+0x7e>
 800d1f0:	68bb      	ldr	r3, [r7, #8]
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	d101      	bne.n	800d1fa <xQueueGenericCreateStatic+0x82>
 800d1f6:	2301      	movs	r3, #1
 800d1f8:	e000      	b.n	800d1fc <xQueueGenericCreateStatic+0x84>
 800d1fa:	2300      	movs	r3, #0
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d10a      	bne.n	800d216 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800d200:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d204:	f383 8811 	msr	BASEPRI, r3
 800d208:	f3bf 8f6f 	isb	sy
 800d20c:	f3bf 8f4f 	dsb	sy
 800d210:	61fb      	str	r3, [r7, #28]
}
 800d212:	bf00      	nop
 800d214:	e7fe      	b.n	800d214 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800d216:	2350      	movs	r3, #80	; 0x50
 800d218:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800d21a:	697b      	ldr	r3, [r7, #20]
 800d21c:	2b50      	cmp	r3, #80	; 0x50
 800d21e:	d00a      	beq.n	800d236 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800d220:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d224:	f383 8811 	msr	BASEPRI, r3
 800d228:	f3bf 8f6f 	isb	sy
 800d22c:	f3bf 8f4f 	dsb	sy
 800d230:	61bb      	str	r3, [r7, #24]
}
 800d232:	bf00      	nop
 800d234:	e7fe      	b.n	800d234 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d236:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d238:	683b      	ldr	r3, [r7, #0]
 800d23a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800d23c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d00d      	beq.n	800d25e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d244:	2201      	movs	r2, #1
 800d246:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d24a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800d24e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d250:	9300      	str	r3, [sp, #0]
 800d252:	4613      	mov	r3, r2
 800d254:	687a      	ldr	r2, [r7, #4]
 800d256:	68b9      	ldr	r1, [r7, #8]
 800d258:	68f8      	ldr	r0, [r7, #12]
 800d25a:	f000 f83f 	bl	800d2dc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d25e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800d260:	4618      	mov	r0, r3
 800d262:	3730      	adds	r7, #48	; 0x30
 800d264:	46bd      	mov	sp, r7
 800d266:	bd80      	pop	{r7, pc}

0800d268 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800d268:	b580      	push	{r7, lr}
 800d26a:	b08a      	sub	sp, #40	; 0x28
 800d26c:	af02      	add	r7, sp, #8
 800d26e:	60f8      	str	r0, [r7, #12]
 800d270:	60b9      	str	r1, [r7, #8]
 800d272:	4613      	mov	r3, r2
 800d274:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d276:	68fb      	ldr	r3, [r7, #12]
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d10a      	bne.n	800d292 <xQueueGenericCreate+0x2a>
	__asm volatile
 800d27c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d280:	f383 8811 	msr	BASEPRI, r3
 800d284:	f3bf 8f6f 	isb	sy
 800d288:	f3bf 8f4f 	dsb	sy
 800d28c:	613b      	str	r3, [r7, #16]
}
 800d28e:	bf00      	nop
 800d290:	e7fe      	b.n	800d290 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d292:	68fb      	ldr	r3, [r7, #12]
 800d294:	68ba      	ldr	r2, [r7, #8]
 800d296:	fb02 f303 	mul.w	r3, r2, r3
 800d29a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800d29c:	69fb      	ldr	r3, [r7, #28]
 800d29e:	3350      	adds	r3, #80	; 0x50
 800d2a0:	4618      	mov	r0, r3
 800d2a2:	f002 fe09 	bl	800feb8 <pvPortMalloc>
 800d2a6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800d2a8:	69bb      	ldr	r3, [r7, #24]
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	d011      	beq.n	800d2d2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800d2ae:	69bb      	ldr	r3, [r7, #24]
 800d2b0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d2b2:	697b      	ldr	r3, [r7, #20]
 800d2b4:	3350      	adds	r3, #80	; 0x50
 800d2b6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800d2b8:	69bb      	ldr	r3, [r7, #24]
 800d2ba:	2200      	movs	r2, #0
 800d2bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d2c0:	79fa      	ldrb	r2, [r7, #7]
 800d2c2:	69bb      	ldr	r3, [r7, #24]
 800d2c4:	9300      	str	r3, [sp, #0]
 800d2c6:	4613      	mov	r3, r2
 800d2c8:	697a      	ldr	r2, [r7, #20]
 800d2ca:	68b9      	ldr	r1, [r7, #8]
 800d2cc:	68f8      	ldr	r0, [r7, #12]
 800d2ce:	f000 f805 	bl	800d2dc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d2d2:	69bb      	ldr	r3, [r7, #24]
	}
 800d2d4:	4618      	mov	r0, r3
 800d2d6:	3720      	adds	r7, #32
 800d2d8:	46bd      	mov	sp, r7
 800d2da:	bd80      	pop	{r7, pc}

0800d2dc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800d2dc:	b580      	push	{r7, lr}
 800d2de:	b084      	sub	sp, #16
 800d2e0:	af00      	add	r7, sp, #0
 800d2e2:	60f8      	str	r0, [r7, #12]
 800d2e4:	60b9      	str	r1, [r7, #8]
 800d2e6:	607a      	str	r2, [r7, #4]
 800d2e8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800d2ea:	68bb      	ldr	r3, [r7, #8]
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d103      	bne.n	800d2f8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d2f0:	69bb      	ldr	r3, [r7, #24]
 800d2f2:	69ba      	ldr	r2, [r7, #24]
 800d2f4:	601a      	str	r2, [r3, #0]
 800d2f6:	e002      	b.n	800d2fe <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d2f8:	69bb      	ldr	r3, [r7, #24]
 800d2fa:	687a      	ldr	r2, [r7, #4]
 800d2fc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800d2fe:	69bb      	ldr	r3, [r7, #24]
 800d300:	68fa      	ldr	r2, [r7, #12]
 800d302:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d304:	69bb      	ldr	r3, [r7, #24]
 800d306:	68ba      	ldr	r2, [r7, #8]
 800d308:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d30a:	2101      	movs	r1, #1
 800d30c:	69b8      	ldr	r0, [r7, #24]
 800d30e:	f7ff fecb 	bl	800d0a8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800d312:	69bb      	ldr	r3, [r7, #24]
 800d314:	78fa      	ldrb	r2, [r7, #3]
 800d316:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800d31a:	bf00      	nop
 800d31c:	3710      	adds	r7, #16
 800d31e:	46bd      	mov	sp, r7
 800d320:	bd80      	pop	{r7, pc}

0800d322 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800d322:	b580      	push	{r7, lr}
 800d324:	b082      	sub	sp, #8
 800d326:	af00      	add	r7, sp, #0
 800d328:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	d00e      	beq.n	800d34e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	2200      	movs	r2, #0
 800d334:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	2200      	movs	r2, #0
 800d33a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	2200      	movs	r2, #0
 800d340:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800d342:	2300      	movs	r3, #0
 800d344:	2200      	movs	r2, #0
 800d346:	2100      	movs	r1, #0
 800d348:	6878      	ldr	r0, [r7, #4]
 800d34a:	f000 f8a1 	bl	800d490 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800d34e:	bf00      	nop
 800d350:	3708      	adds	r7, #8
 800d352:	46bd      	mov	sp, r7
 800d354:	bd80      	pop	{r7, pc}

0800d356 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800d356:	b580      	push	{r7, lr}
 800d358:	b086      	sub	sp, #24
 800d35a:	af00      	add	r7, sp, #0
 800d35c:	4603      	mov	r3, r0
 800d35e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800d360:	2301      	movs	r3, #1
 800d362:	617b      	str	r3, [r7, #20]
 800d364:	2300      	movs	r3, #0
 800d366:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800d368:	79fb      	ldrb	r3, [r7, #7]
 800d36a:	461a      	mov	r2, r3
 800d36c:	6939      	ldr	r1, [r7, #16]
 800d36e:	6978      	ldr	r0, [r7, #20]
 800d370:	f7ff ff7a 	bl	800d268 <xQueueGenericCreate>
 800d374:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800d376:	68f8      	ldr	r0, [r7, #12]
 800d378:	f7ff ffd3 	bl	800d322 <prvInitialiseMutex>

		return xNewQueue;
 800d37c:	68fb      	ldr	r3, [r7, #12]
	}
 800d37e:	4618      	mov	r0, r3
 800d380:	3718      	adds	r7, #24
 800d382:	46bd      	mov	sp, r7
 800d384:	bd80      	pop	{r7, pc}

0800d386 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800d386:	b580      	push	{r7, lr}
 800d388:	b088      	sub	sp, #32
 800d38a:	af02      	add	r7, sp, #8
 800d38c:	4603      	mov	r3, r0
 800d38e:	6039      	str	r1, [r7, #0]
 800d390:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800d392:	2301      	movs	r3, #1
 800d394:	617b      	str	r3, [r7, #20]
 800d396:	2300      	movs	r3, #0
 800d398:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800d39a:	79fb      	ldrb	r3, [r7, #7]
 800d39c:	9300      	str	r3, [sp, #0]
 800d39e:	683b      	ldr	r3, [r7, #0]
 800d3a0:	2200      	movs	r2, #0
 800d3a2:	6939      	ldr	r1, [r7, #16]
 800d3a4:	6978      	ldr	r0, [r7, #20]
 800d3a6:	f7ff fee7 	bl	800d178 <xQueueGenericCreateStatic>
 800d3aa:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800d3ac:	68f8      	ldr	r0, [r7, #12]
 800d3ae:	f7ff ffb8 	bl	800d322 <prvInitialiseMutex>

		return xNewQueue;
 800d3b2:	68fb      	ldr	r3, [r7, #12]
	}
 800d3b4:	4618      	mov	r0, r3
 800d3b6:	3718      	adds	r7, #24
 800d3b8:	46bd      	mov	sp, r7
 800d3ba:	bd80      	pop	{r7, pc}

0800d3bc <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800d3bc:	b590      	push	{r4, r7, lr}
 800d3be:	b087      	sub	sp, #28
 800d3c0:	af00      	add	r7, sp, #0
 800d3c2:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800d3c8:	693b      	ldr	r3, [r7, #16]
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	d10a      	bne.n	800d3e4 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 800d3ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3d2:	f383 8811 	msr	BASEPRI, r3
 800d3d6:	f3bf 8f6f 	isb	sy
 800d3da:	f3bf 8f4f 	dsb	sy
 800d3de:	60fb      	str	r3, [r7, #12]
}
 800d3e0:	bf00      	nop
 800d3e2:	e7fe      	b.n	800d3e2 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800d3e4:	693b      	ldr	r3, [r7, #16]
 800d3e6:	689c      	ldr	r4, [r3, #8]
 800d3e8:	f001 fda0 	bl	800ef2c <xTaskGetCurrentTaskHandle>
 800d3ec:	4603      	mov	r3, r0
 800d3ee:	429c      	cmp	r4, r3
 800d3f0:	d111      	bne.n	800d416 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800d3f2:	693b      	ldr	r3, [r7, #16]
 800d3f4:	68db      	ldr	r3, [r3, #12]
 800d3f6:	1e5a      	subs	r2, r3, #1
 800d3f8:	693b      	ldr	r3, [r7, #16]
 800d3fa:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800d3fc:	693b      	ldr	r3, [r7, #16]
 800d3fe:	68db      	ldr	r3, [r3, #12]
 800d400:	2b00      	cmp	r3, #0
 800d402:	d105      	bne.n	800d410 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800d404:	2300      	movs	r3, #0
 800d406:	2200      	movs	r2, #0
 800d408:	2100      	movs	r1, #0
 800d40a:	6938      	ldr	r0, [r7, #16]
 800d40c:	f000 f840 	bl	800d490 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800d410:	2301      	movs	r3, #1
 800d412:	617b      	str	r3, [r7, #20]
 800d414:	e001      	b.n	800d41a <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800d416:	2300      	movs	r3, #0
 800d418:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800d41a:	697b      	ldr	r3, [r7, #20]
	}
 800d41c:	4618      	mov	r0, r3
 800d41e:	371c      	adds	r7, #28
 800d420:	46bd      	mov	sp, r7
 800d422:	bd90      	pop	{r4, r7, pc}

0800d424 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800d424:	b590      	push	{r4, r7, lr}
 800d426:	b087      	sub	sp, #28
 800d428:	af00      	add	r7, sp, #0
 800d42a:	6078      	str	r0, [r7, #4]
 800d42c:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800d432:	693b      	ldr	r3, [r7, #16]
 800d434:	2b00      	cmp	r3, #0
 800d436:	d10a      	bne.n	800d44e <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 800d438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d43c:	f383 8811 	msr	BASEPRI, r3
 800d440:	f3bf 8f6f 	isb	sy
 800d444:	f3bf 8f4f 	dsb	sy
 800d448:	60fb      	str	r3, [r7, #12]
}
 800d44a:	bf00      	nop
 800d44c:	e7fe      	b.n	800d44c <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800d44e:	693b      	ldr	r3, [r7, #16]
 800d450:	689c      	ldr	r4, [r3, #8]
 800d452:	f001 fd6b 	bl	800ef2c <xTaskGetCurrentTaskHandle>
 800d456:	4603      	mov	r3, r0
 800d458:	429c      	cmp	r4, r3
 800d45a:	d107      	bne.n	800d46c <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800d45c:	693b      	ldr	r3, [r7, #16]
 800d45e:	68db      	ldr	r3, [r3, #12]
 800d460:	1c5a      	adds	r2, r3, #1
 800d462:	693b      	ldr	r3, [r7, #16]
 800d464:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800d466:	2301      	movs	r3, #1
 800d468:	617b      	str	r3, [r7, #20]
 800d46a:	e00c      	b.n	800d486 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800d46c:	6839      	ldr	r1, [r7, #0]
 800d46e:	6938      	ldr	r0, [r7, #16]
 800d470:	f000 fa88 	bl	800d984 <xQueueSemaphoreTake>
 800d474:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800d476:	697b      	ldr	r3, [r7, #20]
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d004      	beq.n	800d486 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800d47c:	693b      	ldr	r3, [r7, #16]
 800d47e:	68db      	ldr	r3, [r3, #12]
 800d480:	1c5a      	adds	r2, r3, #1
 800d482:	693b      	ldr	r3, [r7, #16]
 800d484:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800d486:	697b      	ldr	r3, [r7, #20]
	}
 800d488:	4618      	mov	r0, r3
 800d48a:	371c      	adds	r7, #28
 800d48c:	46bd      	mov	sp, r7
 800d48e:	bd90      	pop	{r4, r7, pc}

0800d490 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d490:	b580      	push	{r7, lr}
 800d492:	b08e      	sub	sp, #56	; 0x38
 800d494:	af00      	add	r7, sp, #0
 800d496:	60f8      	str	r0, [r7, #12]
 800d498:	60b9      	str	r1, [r7, #8]
 800d49a:	607a      	str	r2, [r7, #4]
 800d49c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d49e:	2300      	movs	r3, #0
 800d4a0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d4a2:	68fb      	ldr	r3, [r7, #12]
 800d4a4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d4a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d10a      	bne.n	800d4c2 <xQueueGenericSend+0x32>
	__asm volatile
 800d4ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4b0:	f383 8811 	msr	BASEPRI, r3
 800d4b4:	f3bf 8f6f 	isb	sy
 800d4b8:	f3bf 8f4f 	dsb	sy
 800d4bc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d4be:	bf00      	nop
 800d4c0:	e7fe      	b.n	800d4c0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d4c2:	68bb      	ldr	r3, [r7, #8]
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d103      	bne.n	800d4d0 <xQueueGenericSend+0x40>
 800d4c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d101      	bne.n	800d4d4 <xQueueGenericSend+0x44>
 800d4d0:	2301      	movs	r3, #1
 800d4d2:	e000      	b.n	800d4d6 <xQueueGenericSend+0x46>
 800d4d4:	2300      	movs	r3, #0
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	d10a      	bne.n	800d4f0 <xQueueGenericSend+0x60>
	__asm volatile
 800d4da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4de:	f383 8811 	msr	BASEPRI, r3
 800d4e2:	f3bf 8f6f 	isb	sy
 800d4e6:	f3bf 8f4f 	dsb	sy
 800d4ea:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d4ec:	bf00      	nop
 800d4ee:	e7fe      	b.n	800d4ee <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d4f0:	683b      	ldr	r3, [r7, #0]
 800d4f2:	2b02      	cmp	r3, #2
 800d4f4:	d103      	bne.n	800d4fe <xQueueGenericSend+0x6e>
 800d4f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d4fa:	2b01      	cmp	r3, #1
 800d4fc:	d101      	bne.n	800d502 <xQueueGenericSend+0x72>
 800d4fe:	2301      	movs	r3, #1
 800d500:	e000      	b.n	800d504 <xQueueGenericSend+0x74>
 800d502:	2300      	movs	r3, #0
 800d504:	2b00      	cmp	r3, #0
 800d506:	d10a      	bne.n	800d51e <xQueueGenericSend+0x8e>
	__asm volatile
 800d508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d50c:	f383 8811 	msr	BASEPRI, r3
 800d510:	f3bf 8f6f 	isb	sy
 800d514:	f3bf 8f4f 	dsb	sy
 800d518:	623b      	str	r3, [r7, #32]
}
 800d51a:	bf00      	nop
 800d51c:	e7fe      	b.n	800d51c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d51e:	f001 fd15 	bl	800ef4c <xTaskGetSchedulerState>
 800d522:	4603      	mov	r3, r0
 800d524:	2b00      	cmp	r3, #0
 800d526:	d102      	bne.n	800d52e <xQueueGenericSend+0x9e>
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d101      	bne.n	800d532 <xQueueGenericSend+0xa2>
 800d52e:	2301      	movs	r3, #1
 800d530:	e000      	b.n	800d534 <xQueueGenericSend+0xa4>
 800d532:	2300      	movs	r3, #0
 800d534:	2b00      	cmp	r3, #0
 800d536:	d10a      	bne.n	800d54e <xQueueGenericSend+0xbe>
	__asm volatile
 800d538:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d53c:	f383 8811 	msr	BASEPRI, r3
 800d540:	f3bf 8f6f 	isb	sy
 800d544:	f3bf 8f4f 	dsb	sy
 800d548:	61fb      	str	r3, [r7, #28]
}
 800d54a:	bf00      	nop
 800d54c:	e7fe      	b.n	800d54c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d54e:	f002 fb91 	bl	800fc74 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d554:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d558:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d55a:	429a      	cmp	r2, r3
 800d55c:	d302      	bcc.n	800d564 <xQueueGenericSend+0xd4>
 800d55e:	683b      	ldr	r3, [r7, #0]
 800d560:	2b02      	cmp	r3, #2
 800d562:	d129      	bne.n	800d5b8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d564:	683a      	ldr	r2, [r7, #0]
 800d566:	68b9      	ldr	r1, [r7, #8]
 800d568:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d56a:	f000 fbaf 	bl	800dccc <prvCopyDataToQueue>
 800d56e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d574:	2b00      	cmp	r3, #0
 800d576:	d010      	beq.n	800d59a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d57a:	3324      	adds	r3, #36	; 0x24
 800d57c:	4618      	mov	r0, r3
 800d57e:	f001 fab5 	bl	800eaec <xTaskRemoveFromEventList>
 800d582:	4603      	mov	r3, r0
 800d584:	2b00      	cmp	r3, #0
 800d586:	d013      	beq.n	800d5b0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d588:	4b3f      	ldr	r3, [pc, #252]	; (800d688 <xQueueGenericSend+0x1f8>)
 800d58a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d58e:	601a      	str	r2, [r3, #0]
 800d590:	f3bf 8f4f 	dsb	sy
 800d594:	f3bf 8f6f 	isb	sy
 800d598:	e00a      	b.n	800d5b0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d59a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d007      	beq.n	800d5b0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d5a0:	4b39      	ldr	r3, [pc, #228]	; (800d688 <xQueueGenericSend+0x1f8>)
 800d5a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d5a6:	601a      	str	r2, [r3, #0]
 800d5a8:	f3bf 8f4f 	dsb	sy
 800d5ac:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d5b0:	f002 fb90 	bl	800fcd4 <vPortExitCritical>
				return pdPASS;
 800d5b4:	2301      	movs	r3, #1
 800d5b6:	e063      	b.n	800d680 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	d103      	bne.n	800d5c6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d5be:	f002 fb89 	bl	800fcd4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d5c2:	2300      	movs	r3, #0
 800d5c4:	e05c      	b.n	800d680 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d5c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	d106      	bne.n	800d5da <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d5cc:	f107 0314 	add.w	r3, r7, #20
 800d5d0:	4618      	mov	r0, r3
 800d5d2:	f001 fb51 	bl	800ec78 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d5d6:	2301      	movs	r3, #1
 800d5d8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d5da:	f002 fb7b 	bl	800fcd4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d5de:	f001 f825 	bl	800e62c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d5e2:	f002 fb47 	bl	800fc74 <vPortEnterCritical>
 800d5e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d5ec:	b25b      	sxtb	r3, r3
 800d5ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d5f2:	d103      	bne.n	800d5fc <xQueueGenericSend+0x16c>
 800d5f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5f6:	2200      	movs	r2, #0
 800d5f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d5fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d602:	b25b      	sxtb	r3, r3
 800d604:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d608:	d103      	bne.n	800d612 <xQueueGenericSend+0x182>
 800d60a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d60c:	2200      	movs	r2, #0
 800d60e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d612:	f002 fb5f 	bl	800fcd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d616:	1d3a      	adds	r2, r7, #4
 800d618:	f107 0314 	add.w	r3, r7, #20
 800d61c:	4611      	mov	r1, r2
 800d61e:	4618      	mov	r0, r3
 800d620:	f001 fb40 	bl	800eca4 <xTaskCheckForTimeOut>
 800d624:	4603      	mov	r3, r0
 800d626:	2b00      	cmp	r3, #0
 800d628:	d124      	bne.n	800d674 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d62a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d62c:	f000 fc46 	bl	800debc <prvIsQueueFull>
 800d630:	4603      	mov	r3, r0
 800d632:	2b00      	cmp	r3, #0
 800d634:	d018      	beq.n	800d668 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d638:	3310      	adds	r3, #16
 800d63a:	687a      	ldr	r2, [r7, #4]
 800d63c:	4611      	mov	r1, r2
 800d63e:	4618      	mov	r0, r3
 800d640:	f001 f9c8 	bl	800e9d4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d644:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d646:	f000 fbd1 	bl	800ddec <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d64a:	f000 fffd 	bl	800e648 <xTaskResumeAll>
 800d64e:	4603      	mov	r3, r0
 800d650:	2b00      	cmp	r3, #0
 800d652:	f47f af7c 	bne.w	800d54e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800d656:	4b0c      	ldr	r3, [pc, #48]	; (800d688 <xQueueGenericSend+0x1f8>)
 800d658:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d65c:	601a      	str	r2, [r3, #0]
 800d65e:	f3bf 8f4f 	dsb	sy
 800d662:	f3bf 8f6f 	isb	sy
 800d666:	e772      	b.n	800d54e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d668:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d66a:	f000 fbbf 	bl	800ddec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d66e:	f000 ffeb 	bl	800e648 <xTaskResumeAll>
 800d672:	e76c      	b.n	800d54e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d674:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d676:	f000 fbb9 	bl	800ddec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d67a:	f000 ffe5 	bl	800e648 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d67e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d680:	4618      	mov	r0, r3
 800d682:	3738      	adds	r7, #56	; 0x38
 800d684:	46bd      	mov	sp, r7
 800d686:	bd80      	pop	{r7, pc}
 800d688:	e000ed04 	.word	0xe000ed04

0800d68c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800d68c:	b580      	push	{r7, lr}
 800d68e:	b090      	sub	sp, #64	; 0x40
 800d690:	af00      	add	r7, sp, #0
 800d692:	60f8      	str	r0, [r7, #12]
 800d694:	60b9      	str	r1, [r7, #8]
 800d696:	607a      	str	r2, [r7, #4]
 800d698:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d69a:	68fb      	ldr	r3, [r7, #12]
 800d69c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800d69e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	d10a      	bne.n	800d6ba <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800d6a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6a8:	f383 8811 	msr	BASEPRI, r3
 800d6ac:	f3bf 8f6f 	isb	sy
 800d6b0:	f3bf 8f4f 	dsb	sy
 800d6b4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d6b6:	bf00      	nop
 800d6b8:	e7fe      	b.n	800d6b8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d6ba:	68bb      	ldr	r3, [r7, #8]
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d103      	bne.n	800d6c8 <xQueueGenericSendFromISR+0x3c>
 800d6c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d101      	bne.n	800d6cc <xQueueGenericSendFromISR+0x40>
 800d6c8:	2301      	movs	r3, #1
 800d6ca:	e000      	b.n	800d6ce <xQueueGenericSendFromISR+0x42>
 800d6cc:	2300      	movs	r3, #0
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d10a      	bne.n	800d6e8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800d6d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6d6:	f383 8811 	msr	BASEPRI, r3
 800d6da:	f3bf 8f6f 	isb	sy
 800d6de:	f3bf 8f4f 	dsb	sy
 800d6e2:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d6e4:	bf00      	nop
 800d6e6:	e7fe      	b.n	800d6e6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d6e8:	683b      	ldr	r3, [r7, #0]
 800d6ea:	2b02      	cmp	r3, #2
 800d6ec:	d103      	bne.n	800d6f6 <xQueueGenericSendFromISR+0x6a>
 800d6ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d6f2:	2b01      	cmp	r3, #1
 800d6f4:	d101      	bne.n	800d6fa <xQueueGenericSendFromISR+0x6e>
 800d6f6:	2301      	movs	r3, #1
 800d6f8:	e000      	b.n	800d6fc <xQueueGenericSendFromISR+0x70>
 800d6fa:	2300      	movs	r3, #0
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d10a      	bne.n	800d716 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800d700:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d704:	f383 8811 	msr	BASEPRI, r3
 800d708:	f3bf 8f6f 	isb	sy
 800d70c:	f3bf 8f4f 	dsb	sy
 800d710:	623b      	str	r3, [r7, #32]
}
 800d712:	bf00      	nop
 800d714:	e7fe      	b.n	800d714 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d716:	f002 fb8f 	bl	800fe38 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800d71a:	f3ef 8211 	mrs	r2, BASEPRI
 800d71e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d722:	f383 8811 	msr	BASEPRI, r3
 800d726:	f3bf 8f6f 	isb	sy
 800d72a:	f3bf 8f4f 	dsb	sy
 800d72e:	61fa      	str	r2, [r7, #28]
 800d730:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800d732:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d734:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d738:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d73a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d73c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d73e:	429a      	cmp	r2, r3
 800d740:	d302      	bcc.n	800d748 <xQueueGenericSendFromISR+0xbc>
 800d742:	683b      	ldr	r3, [r7, #0]
 800d744:	2b02      	cmp	r3, #2
 800d746:	d12f      	bne.n	800d7a8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d74a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d74e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d756:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d758:	683a      	ldr	r2, [r7, #0]
 800d75a:	68b9      	ldr	r1, [r7, #8]
 800d75c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d75e:	f000 fab5 	bl	800dccc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d762:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800d766:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d76a:	d112      	bne.n	800d792 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d76c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d76e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d770:	2b00      	cmp	r3, #0
 800d772:	d016      	beq.n	800d7a2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d774:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d776:	3324      	adds	r3, #36	; 0x24
 800d778:	4618      	mov	r0, r3
 800d77a:	f001 f9b7 	bl	800eaec <xTaskRemoveFromEventList>
 800d77e:	4603      	mov	r3, r0
 800d780:	2b00      	cmp	r3, #0
 800d782:	d00e      	beq.n	800d7a2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	2b00      	cmp	r3, #0
 800d788:	d00b      	beq.n	800d7a2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	2201      	movs	r2, #1
 800d78e:	601a      	str	r2, [r3, #0]
 800d790:	e007      	b.n	800d7a2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d792:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d796:	3301      	adds	r3, #1
 800d798:	b2db      	uxtb	r3, r3
 800d79a:	b25a      	sxtb	r2, r3
 800d79c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d79e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d7a2:	2301      	movs	r3, #1
 800d7a4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800d7a6:	e001      	b.n	800d7ac <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d7a8:	2300      	movs	r3, #0
 800d7aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d7ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d7ae:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d7b0:	697b      	ldr	r3, [r7, #20]
 800d7b2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800d7b6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d7b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800d7ba:	4618      	mov	r0, r3
 800d7bc:	3740      	adds	r7, #64	; 0x40
 800d7be:	46bd      	mov	sp, r7
 800d7c0:	bd80      	pop	{r7, pc}
	...

0800d7c4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d7c4:	b580      	push	{r7, lr}
 800d7c6:	b08c      	sub	sp, #48	; 0x30
 800d7c8:	af00      	add	r7, sp, #0
 800d7ca:	60f8      	str	r0, [r7, #12]
 800d7cc:	60b9      	str	r1, [r7, #8]
 800d7ce:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d7d0:	2300      	movs	r3, #0
 800d7d2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d7d4:	68fb      	ldr	r3, [r7, #12]
 800d7d6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d7d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	d10a      	bne.n	800d7f4 <xQueueReceive+0x30>
	__asm volatile
 800d7de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7e2:	f383 8811 	msr	BASEPRI, r3
 800d7e6:	f3bf 8f6f 	isb	sy
 800d7ea:	f3bf 8f4f 	dsb	sy
 800d7ee:	623b      	str	r3, [r7, #32]
}
 800d7f0:	bf00      	nop
 800d7f2:	e7fe      	b.n	800d7f2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d7f4:	68bb      	ldr	r3, [r7, #8]
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	d103      	bne.n	800d802 <xQueueReceive+0x3e>
 800d7fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	d101      	bne.n	800d806 <xQueueReceive+0x42>
 800d802:	2301      	movs	r3, #1
 800d804:	e000      	b.n	800d808 <xQueueReceive+0x44>
 800d806:	2300      	movs	r3, #0
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d10a      	bne.n	800d822 <xQueueReceive+0x5e>
	__asm volatile
 800d80c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d810:	f383 8811 	msr	BASEPRI, r3
 800d814:	f3bf 8f6f 	isb	sy
 800d818:	f3bf 8f4f 	dsb	sy
 800d81c:	61fb      	str	r3, [r7, #28]
}
 800d81e:	bf00      	nop
 800d820:	e7fe      	b.n	800d820 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d822:	f001 fb93 	bl	800ef4c <xTaskGetSchedulerState>
 800d826:	4603      	mov	r3, r0
 800d828:	2b00      	cmp	r3, #0
 800d82a:	d102      	bne.n	800d832 <xQueueReceive+0x6e>
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	2b00      	cmp	r3, #0
 800d830:	d101      	bne.n	800d836 <xQueueReceive+0x72>
 800d832:	2301      	movs	r3, #1
 800d834:	e000      	b.n	800d838 <xQueueReceive+0x74>
 800d836:	2300      	movs	r3, #0
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d10a      	bne.n	800d852 <xQueueReceive+0x8e>
	__asm volatile
 800d83c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d840:	f383 8811 	msr	BASEPRI, r3
 800d844:	f3bf 8f6f 	isb	sy
 800d848:	f3bf 8f4f 	dsb	sy
 800d84c:	61bb      	str	r3, [r7, #24]
}
 800d84e:	bf00      	nop
 800d850:	e7fe      	b.n	800d850 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d852:	f002 fa0f 	bl	800fc74 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d85a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d85c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d85e:	2b00      	cmp	r3, #0
 800d860:	d01f      	beq.n	800d8a2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d862:	68b9      	ldr	r1, [r7, #8]
 800d864:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d866:	f000 fa9b 	bl	800dda0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d86a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d86c:	1e5a      	subs	r2, r3, #1
 800d86e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d870:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d874:	691b      	ldr	r3, [r3, #16]
 800d876:	2b00      	cmp	r3, #0
 800d878:	d00f      	beq.n	800d89a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d87a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d87c:	3310      	adds	r3, #16
 800d87e:	4618      	mov	r0, r3
 800d880:	f001 f934 	bl	800eaec <xTaskRemoveFromEventList>
 800d884:	4603      	mov	r3, r0
 800d886:	2b00      	cmp	r3, #0
 800d888:	d007      	beq.n	800d89a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d88a:	4b3d      	ldr	r3, [pc, #244]	; (800d980 <xQueueReceive+0x1bc>)
 800d88c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d890:	601a      	str	r2, [r3, #0]
 800d892:	f3bf 8f4f 	dsb	sy
 800d896:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d89a:	f002 fa1b 	bl	800fcd4 <vPortExitCritical>
				return pdPASS;
 800d89e:	2301      	movs	r3, #1
 800d8a0:	e069      	b.n	800d976 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d103      	bne.n	800d8b0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d8a8:	f002 fa14 	bl	800fcd4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d8ac:	2300      	movs	r3, #0
 800d8ae:	e062      	b.n	800d976 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d8b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	d106      	bne.n	800d8c4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d8b6:	f107 0310 	add.w	r3, r7, #16
 800d8ba:	4618      	mov	r0, r3
 800d8bc:	f001 f9dc 	bl	800ec78 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d8c0:	2301      	movs	r3, #1
 800d8c2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d8c4:	f002 fa06 	bl	800fcd4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d8c8:	f000 feb0 	bl	800e62c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d8cc:	f002 f9d2 	bl	800fc74 <vPortEnterCritical>
 800d8d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d8d6:	b25b      	sxtb	r3, r3
 800d8d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d8dc:	d103      	bne.n	800d8e6 <xQueueReceive+0x122>
 800d8de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8e0:	2200      	movs	r2, #0
 800d8e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d8e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d8ec:	b25b      	sxtb	r3, r3
 800d8ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d8f2:	d103      	bne.n	800d8fc <xQueueReceive+0x138>
 800d8f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8f6:	2200      	movs	r2, #0
 800d8f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d8fc:	f002 f9ea 	bl	800fcd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d900:	1d3a      	adds	r2, r7, #4
 800d902:	f107 0310 	add.w	r3, r7, #16
 800d906:	4611      	mov	r1, r2
 800d908:	4618      	mov	r0, r3
 800d90a:	f001 f9cb 	bl	800eca4 <xTaskCheckForTimeOut>
 800d90e:	4603      	mov	r3, r0
 800d910:	2b00      	cmp	r3, #0
 800d912:	d123      	bne.n	800d95c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d914:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d916:	f000 fabb 	bl	800de90 <prvIsQueueEmpty>
 800d91a:	4603      	mov	r3, r0
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	d017      	beq.n	800d950 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d922:	3324      	adds	r3, #36	; 0x24
 800d924:	687a      	ldr	r2, [r7, #4]
 800d926:	4611      	mov	r1, r2
 800d928:	4618      	mov	r0, r3
 800d92a:	f001 f853 	bl	800e9d4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d92e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d930:	f000 fa5c 	bl	800ddec <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d934:	f000 fe88 	bl	800e648 <xTaskResumeAll>
 800d938:	4603      	mov	r3, r0
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d189      	bne.n	800d852 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800d93e:	4b10      	ldr	r3, [pc, #64]	; (800d980 <xQueueReceive+0x1bc>)
 800d940:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d944:	601a      	str	r2, [r3, #0]
 800d946:	f3bf 8f4f 	dsb	sy
 800d94a:	f3bf 8f6f 	isb	sy
 800d94e:	e780      	b.n	800d852 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d950:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d952:	f000 fa4b 	bl	800ddec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d956:	f000 fe77 	bl	800e648 <xTaskResumeAll>
 800d95a:	e77a      	b.n	800d852 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d95c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d95e:	f000 fa45 	bl	800ddec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d962:	f000 fe71 	bl	800e648 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d966:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d968:	f000 fa92 	bl	800de90 <prvIsQueueEmpty>
 800d96c:	4603      	mov	r3, r0
 800d96e:	2b00      	cmp	r3, #0
 800d970:	f43f af6f 	beq.w	800d852 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d974:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d976:	4618      	mov	r0, r3
 800d978:	3730      	adds	r7, #48	; 0x30
 800d97a:	46bd      	mov	sp, r7
 800d97c:	bd80      	pop	{r7, pc}
 800d97e:	bf00      	nop
 800d980:	e000ed04 	.word	0xe000ed04

0800d984 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800d984:	b580      	push	{r7, lr}
 800d986:	b08e      	sub	sp, #56	; 0x38
 800d988:	af00      	add	r7, sp, #0
 800d98a:	6078      	str	r0, [r7, #4]
 800d98c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800d98e:	2300      	movs	r3, #0
 800d990:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800d996:	2300      	movs	r3, #0
 800d998:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d99a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	d10a      	bne.n	800d9b6 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800d9a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9a4:	f383 8811 	msr	BASEPRI, r3
 800d9a8:	f3bf 8f6f 	isb	sy
 800d9ac:	f3bf 8f4f 	dsb	sy
 800d9b0:	623b      	str	r3, [r7, #32]
}
 800d9b2:	bf00      	nop
 800d9b4:	e7fe      	b.n	800d9b4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d9b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d00a      	beq.n	800d9d4 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800d9be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9c2:	f383 8811 	msr	BASEPRI, r3
 800d9c6:	f3bf 8f6f 	isb	sy
 800d9ca:	f3bf 8f4f 	dsb	sy
 800d9ce:	61fb      	str	r3, [r7, #28]
}
 800d9d0:	bf00      	nop
 800d9d2:	e7fe      	b.n	800d9d2 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d9d4:	f001 faba 	bl	800ef4c <xTaskGetSchedulerState>
 800d9d8:	4603      	mov	r3, r0
 800d9da:	2b00      	cmp	r3, #0
 800d9dc:	d102      	bne.n	800d9e4 <xQueueSemaphoreTake+0x60>
 800d9de:	683b      	ldr	r3, [r7, #0]
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d101      	bne.n	800d9e8 <xQueueSemaphoreTake+0x64>
 800d9e4:	2301      	movs	r3, #1
 800d9e6:	e000      	b.n	800d9ea <xQueueSemaphoreTake+0x66>
 800d9e8:	2300      	movs	r3, #0
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	d10a      	bne.n	800da04 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800d9ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9f2:	f383 8811 	msr	BASEPRI, r3
 800d9f6:	f3bf 8f6f 	isb	sy
 800d9fa:	f3bf 8f4f 	dsb	sy
 800d9fe:	61bb      	str	r3, [r7, #24]
}
 800da00:	bf00      	nop
 800da02:	e7fe      	b.n	800da02 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800da04:	f002 f936 	bl	800fc74 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800da08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da0c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800da0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da10:	2b00      	cmp	r3, #0
 800da12:	d024      	beq.n	800da5e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800da14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da16:	1e5a      	subs	r2, r3, #1
 800da18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da1a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800da1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da1e:	681b      	ldr	r3, [r3, #0]
 800da20:	2b00      	cmp	r3, #0
 800da22:	d104      	bne.n	800da2e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800da24:	f001 fc20 	bl	800f268 <pvTaskIncrementMutexHeldCount>
 800da28:	4602      	mov	r2, r0
 800da2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da2c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800da2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da30:	691b      	ldr	r3, [r3, #16]
 800da32:	2b00      	cmp	r3, #0
 800da34:	d00f      	beq.n	800da56 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800da36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da38:	3310      	adds	r3, #16
 800da3a:	4618      	mov	r0, r3
 800da3c:	f001 f856 	bl	800eaec <xTaskRemoveFromEventList>
 800da40:	4603      	mov	r3, r0
 800da42:	2b00      	cmp	r3, #0
 800da44:	d007      	beq.n	800da56 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800da46:	4b54      	ldr	r3, [pc, #336]	; (800db98 <xQueueSemaphoreTake+0x214>)
 800da48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800da4c:	601a      	str	r2, [r3, #0]
 800da4e:	f3bf 8f4f 	dsb	sy
 800da52:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800da56:	f002 f93d 	bl	800fcd4 <vPortExitCritical>
				return pdPASS;
 800da5a:	2301      	movs	r3, #1
 800da5c:	e097      	b.n	800db8e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800da5e:	683b      	ldr	r3, [r7, #0]
 800da60:	2b00      	cmp	r3, #0
 800da62:	d111      	bne.n	800da88 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800da64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da66:	2b00      	cmp	r3, #0
 800da68:	d00a      	beq.n	800da80 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800da6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da6e:	f383 8811 	msr	BASEPRI, r3
 800da72:	f3bf 8f6f 	isb	sy
 800da76:	f3bf 8f4f 	dsb	sy
 800da7a:	617b      	str	r3, [r7, #20]
}
 800da7c:	bf00      	nop
 800da7e:	e7fe      	b.n	800da7e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800da80:	f002 f928 	bl	800fcd4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800da84:	2300      	movs	r3, #0
 800da86:	e082      	b.n	800db8e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800da88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	d106      	bne.n	800da9c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800da8e:	f107 030c 	add.w	r3, r7, #12
 800da92:	4618      	mov	r0, r3
 800da94:	f001 f8f0 	bl	800ec78 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800da98:	2301      	movs	r3, #1
 800da9a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800da9c:	f002 f91a 	bl	800fcd4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800daa0:	f000 fdc4 	bl	800e62c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800daa4:	f002 f8e6 	bl	800fc74 <vPortEnterCritical>
 800daa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800daaa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800daae:	b25b      	sxtb	r3, r3
 800dab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dab4:	d103      	bne.n	800dabe <xQueueSemaphoreTake+0x13a>
 800dab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dab8:	2200      	movs	r2, #0
 800daba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800dabe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dac0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dac4:	b25b      	sxtb	r3, r3
 800dac6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800daca:	d103      	bne.n	800dad4 <xQueueSemaphoreTake+0x150>
 800dacc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dace:	2200      	movs	r2, #0
 800dad0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800dad4:	f002 f8fe 	bl	800fcd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800dad8:	463a      	mov	r2, r7
 800dada:	f107 030c 	add.w	r3, r7, #12
 800dade:	4611      	mov	r1, r2
 800dae0:	4618      	mov	r0, r3
 800dae2:	f001 f8df 	bl	800eca4 <xTaskCheckForTimeOut>
 800dae6:	4603      	mov	r3, r0
 800dae8:	2b00      	cmp	r3, #0
 800daea:	d132      	bne.n	800db52 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800daec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800daee:	f000 f9cf 	bl	800de90 <prvIsQueueEmpty>
 800daf2:	4603      	mov	r3, r0
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d026      	beq.n	800db46 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800daf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dafa:	681b      	ldr	r3, [r3, #0]
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	d109      	bne.n	800db14 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800db00:	f002 f8b8 	bl	800fc74 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800db04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db06:	689b      	ldr	r3, [r3, #8]
 800db08:	4618      	mov	r0, r3
 800db0a:	f001 fa3d 	bl	800ef88 <xTaskPriorityInherit>
 800db0e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800db10:	f002 f8e0 	bl	800fcd4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800db14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db16:	3324      	adds	r3, #36	; 0x24
 800db18:	683a      	ldr	r2, [r7, #0]
 800db1a:	4611      	mov	r1, r2
 800db1c:	4618      	mov	r0, r3
 800db1e:	f000 ff59 	bl	800e9d4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800db22:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800db24:	f000 f962 	bl	800ddec <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800db28:	f000 fd8e 	bl	800e648 <xTaskResumeAll>
 800db2c:	4603      	mov	r3, r0
 800db2e:	2b00      	cmp	r3, #0
 800db30:	f47f af68 	bne.w	800da04 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800db34:	4b18      	ldr	r3, [pc, #96]	; (800db98 <xQueueSemaphoreTake+0x214>)
 800db36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800db3a:	601a      	str	r2, [r3, #0]
 800db3c:	f3bf 8f4f 	dsb	sy
 800db40:	f3bf 8f6f 	isb	sy
 800db44:	e75e      	b.n	800da04 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800db46:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800db48:	f000 f950 	bl	800ddec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800db4c:	f000 fd7c 	bl	800e648 <xTaskResumeAll>
 800db50:	e758      	b.n	800da04 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800db52:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800db54:	f000 f94a 	bl	800ddec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800db58:	f000 fd76 	bl	800e648 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800db5c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800db5e:	f000 f997 	bl	800de90 <prvIsQueueEmpty>
 800db62:	4603      	mov	r3, r0
 800db64:	2b00      	cmp	r3, #0
 800db66:	f43f af4d 	beq.w	800da04 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800db6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db6c:	2b00      	cmp	r3, #0
 800db6e:	d00d      	beq.n	800db8c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800db70:	f002 f880 	bl	800fc74 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800db74:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800db76:	f000 f891 	bl	800dc9c <prvGetDisinheritPriorityAfterTimeout>
 800db7a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800db7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db7e:	689b      	ldr	r3, [r3, #8]
 800db80:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800db82:	4618      	mov	r0, r3
 800db84:	f001 fad6 	bl	800f134 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800db88:	f002 f8a4 	bl	800fcd4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800db8c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800db8e:	4618      	mov	r0, r3
 800db90:	3738      	adds	r7, #56	; 0x38
 800db92:	46bd      	mov	sp, r7
 800db94:	bd80      	pop	{r7, pc}
 800db96:	bf00      	nop
 800db98:	e000ed04 	.word	0xe000ed04

0800db9c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800db9c:	b580      	push	{r7, lr}
 800db9e:	b08e      	sub	sp, #56	; 0x38
 800dba0:	af00      	add	r7, sp, #0
 800dba2:	60f8      	str	r0, [r7, #12]
 800dba4:	60b9      	str	r1, [r7, #8]
 800dba6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800dba8:	68fb      	ldr	r3, [r7, #12]
 800dbaa:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800dbac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbae:	2b00      	cmp	r3, #0
 800dbb0:	d10a      	bne.n	800dbc8 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800dbb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbb6:	f383 8811 	msr	BASEPRI, r3
 800dbba:	f3bf 8f6f 	isb	sy
 800dbbe:	f3bf 8f4f 	dsb	sy
 800dbc2:	623b      	str	r3, [r7, #32]
}
 800dbc4:	bf00      	nop
 800dbc6:	e7fe      	b.n	800dbc6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800dbc8:	68bb      	ldr	r3, [r7, #8]
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	d103      	bne.n	800dbd6 <xQueueReceiveFromISR+0x3a>
 800dbce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	d101      	bne.n	800dbda <xQueueReceiveFromISR+0x3e>
 800dbd6:	2301      	movs	r3, #1
 800dbd8:	e000      	b.n	800dbdc <xQueueReceiveFromISR+0x40>
 800dbda:	2300      	movs	r3, #0
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	d10a      	bne.n	800dbf6 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800dbe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbe4:	f383 8811 	msr	BASEPRI, r3
 800dbe8:	f3bf 8f6f 	isb	sy
 800dbec:	f3bf 8f4f 	dsb	sy
 800dbf0:	61fb      	str	r3, [r7, #28]
}
 800dbf2:	bf00      	nop
 800dbf4:	e7fe      	b.n	800dbf4 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800dbf6:	f002 f91f 	bl	800fe38 <vPortValidateInterruptPriority>
	__asm volatile
 800dbfa:	f3ef 8211 	mrs	r2, BASEPRI
 800dbfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc02:	f383 8811 	msr	BASEPRI, r3
 800dc06:	f3bf 8f6f 	isb	sy
 800dc0a:	f3bf 8f4f 	dsb	sy
 800dc0e:	61ba      	str	r2, [r7, #24]
 800dc10:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800dc12:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800dc14:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dc16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc1a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800dc1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d02f      	beq.n	800dc82 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800dc22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc24:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dc28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800dc2c:	68b9      	ldr	r1, [r7, #8]
 800dc2e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dc30:	f000 f8b6 	bl	800dda0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800dc34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc36:	1e5a      	subs	r2, r3, #1
 800dc38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc3a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800dc3c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800dc40:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc44:	d112      	bne.n	800dc6c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dc46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc48:	691b      	ldr	r3, [r3, #16]
 800dc4a:	2b00      	cmp	r3, #0
 800dc4c:	d016      	beq.n	800dc7c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dc4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc50:	3310      	adds	r3, #16
 800dc52:	4618      	mov	r0, r3
 800dc54:	f000 ff4a 	bl	800eaec <xTaskRemoveFromEventList>
 800dc58:	4603      	mov	r3, r0
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d00e      	beq.n	800dc7c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	d00b      	beq.n	800dc7c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	2201      	movs	r2, #1
 800dc68:	601a      	str	r2, [r3, #0]
 800dc6a:	e007      	b.n	800dc7c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800dc6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dc70:	3301      	adds	r3, #1
 800dc72:	b2db      	uxtb	r3, r3
 800dc74:	b25a      	sxtb	r2, r3
 800dc76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800dc7c:	2301      	movs	r3, #1
 800dc7e:	637b      	str	r3, [r7, #52]	; 0x34
 800dc80:	e001      	b.n	800dc86 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800dc82:	2300      	movs	r3, #0
 800dc84:	637b      	str	r3, [r7, #52]	; 0x34
 800dc86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc88:	613b      	str	r3, [r7, #16]
	__asm volatile
 800dc8a:	693b      	ldr	r3, [r7, #16]
 800dc8c:	f383 8811 	msr	BASEPRI, r3
}
 800dc90:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800dc92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800dc94:	4618      	mov	r0, r3
 800dc96:	3738      	adds	r7, #56	; 0x38
 800dc98:	46bd      	mov	sp, r7
 800dc9a:	bd80      	pop	{r7, pc}

0800dc9c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800dc9c:	b480      	push	{r7}
 800dc9e:	b085      	sub	sp, #20
 800dca0:	af00      	add	r7, sp, #0
 800dca2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d006      	beq.n	800dcba <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dcb0:	681b      	ldr	r3, [r3, #0]
 800dcb2:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800dcb6:	60fb      	str	r3, [r7, #12]
 800dcb8:	e001      	b.n	800dcbe <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800dcba:	2300      	movs	r3, #0
 800dcbc:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800dcbe:	68fb      	ldr	r3, [r7, #12]
	}
 800dcc0:	4618      	mov	r0, r3
 800dcc2:	3714      	adds	r7, #20
 800dcc4:	46bd      	mov	sp, r7
 800dcc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcca:	4770      	bx	lr

0800dccc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800dccc:	b580      	push	{r7, lr}
 800dcce:	b086      	sub	sp, #24
 800dcd0:	af00      	add	r7, sp, #0
 800dcd2:	60f8      	str	r0, [r7, #12]
 800dcd4:	60b9      	str	r1, [r7, #8]
 800dcd6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800dcd8:	2300      	movs	r3, #0
 800dcda:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dcdc:	68fb      	ldr	r3, [r7, #12]
 800dcde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dce0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800dce2:	68fb      	ldr	r3, [r7, #12]
 800dce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dce6:	2b00      	cmp	r3, #0
 800dce8:	d10d      	bne.n	800dd06 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800dcea:	68fb      	ldr	r3, [r7, #12]
 800dcec:	681b      	ldr	r3, [r3, #0]
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d14d      	bne.n	800dd8e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800dcf2:	68fb      	ldr	r3, [r7, #12]
 800dcf4:	689b      	ldr	r3, [r3, #8]
 800dcf6:	4618      	mov	r0, r3
 800dcf8:	f001 f9ae 	bl	800f058 <xTaskPriorityDisinherit>
 800dcfc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800dcfe:	68fb      	ldr	r3, [r7, #12]
 800dd00:	2200      	movs	r2, #0
 800dd02:	609a      	str	r2, [r3, #8]
 800dd04:	e043      	b.n	800dd8e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d119      	bne.n	800dd40 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800dd0c:	68fb      	ldr	r3, [r7, #12]
 800dd0e:	6858      	ldr	r0, [r3, #4]
 800dd10:	68fb      	ldr	r3, [r7, #12]
 800dd12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd14:	461a      	mov	r2, r3
 800dd16:	68b9      	ldr	r1, [r7, #8]
 800dd18:	f003 f987 	bl	801102a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800dd1c:	68fb      	ldr	r3, [r7, #12]
 800dd1e:	685a      	ldr	r2, [r3, #4]
 800dd20:	68fb      	ldr	r3, [r7, #12]
 800dd22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd24:	441a      	add	r2, r3
 800dd26:	68fb      	ldr	r3, [r7, #12]
 800dd28:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800dd2a:	68fb      	ldr	r3, [r7, #12]
 800dd2c:	685a      	ldr	r2, [r3, #4]
 800dd2e:	68fb      	ldr	r3, [r7, #12]
 800dd30:	689b      	ldr	r3, [r3, #8]
 800dd32:	429a      	cmp	r2, r3
 800dd34:	d32b      	bcc.n	800dd8e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800dd36:	68fb      	ldr	r3, [r7, #12]
 800dd38:	681a      	ldr	r2, [r3, #0]
 800dd3a:	68fb      	ldr	r3, [r7, #12]
 800dd3c:	605a      	str	r2, [r3, #4]
 800dd3e:	e026      	b.n	800dd8e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800dd40:	68fb      	ldr	r3, [r7, #12]
 800dd42:	68d8      	ldr	r0, [r3, #12]
 800dd44:	68fb      	ldr	r3, [r7, #12]
 800dd46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd48:	461a      	mov	r2, r3
 800dd4a:	68b9      	ldr	r1, [r7, #8]
 800dd4c:	f003 f96d 	bl	801102a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800dd50:	68fb      	ldr	r3, [r7, #12]
 800dd52:	68da      	ldr	r2, [r3, #12]
 800dd54:	68fb      	ldr	r3, [r7, #12]
 800dd56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd58:	425b      	negs	r3, r3
 800dd5a:	441a      	add	r2, r3
 800dd5c:	68fb      	ldr	r3, [r7, #12]
 800dd5e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800dd60:	68fb      	ldr	r3, [r7, #12]
 800dd62:	68da      	ldr	r2, [r3, #12]
 800dd64:	68fb      	ldr	r3, [r7, #12]
 800dd66:	681b      	ldr	r3, [r3, #0]
 800dd68:	429a      	cmp	r2, r3
 800dd6a:	d207      	bcs.n	800dd7c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800dd6c:	68fb      	ldr	r3, [r7, #12]
 800dd6e:	689a      	ldr	r2, [r3, #8]
 800dd70:	68fb      	ldr	r3, [r7, #12]
 800dd72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd74:	425b      	negs	r3, r3
 800dd76:	441a      	add	r2, r3
 800dd78:	68fb      	ldr	r3, [r7, #12]
 800dd7a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	2b02      	cmp	r3, #2
 800dd80:	d105      	bne.n	800dd8e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800dd82:	693b      	ldr	r3, [r7, #16]
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	d002      	beq.n	800dd8e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800dd88:	693b      	ldr	r3, [r7, #16]
 800dd8a:	3b01      	subs	r3, #1
 800dd8c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800dd8e:	693b      	ldr	r3, [r7, #16]
 800dd90:	1c5a      	adds	r2, r3, #1
 800dd92:	68fb      	ldr	r3, [r7, #12]
 800dd94:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800dd96:	697b      	ldr	r3, [r7, #20]
}
 800dd98:	4618      	mov	r0, r3
 800dd9a:	3718      	adds	r7, #24
 800dd9c:	46bd      	mov	sp, r7
 800dd9e:	bd80      	pop	{r7, pc}

0800dda0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800dda0:	b580      	push	{r7, lr}
 800dda2:	b082      	sub	sp, #8
 800dda4:	af00      	add	r7, sp, #0
 800dda6:	6078      	str	r0, [r7, #4]
 800dda8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	d018      	beq.n	800dde4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	68da      	ldr	r2, [r3, #12]
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ddba:	441a      	add	r2, r3
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	68da      	ldr	r2, [r3, #12]
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	689b      	ldr	r3, [r3, #8]
 800ddc8:	429a      	cmp	r2, r3
 800ddca:	d303      	bcc.n	800ddd4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	681a      	ldr	r2, [r3, #0]
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	68d9      	ldr	r1, [r3, #12]
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dddc:	461a      	mov	r2, r3
 800ddde:	6838      	ldr	r0, [r7, #0]
 800dde0:	f003 f923 	bl	801102a <memcpy>
	}
}
 800dde4:	bf00      	nop
 800dde6:	3708      	adds	r7, #8
 800dde8:	46bd      	mov	sp, r7
 800ddea:	bd80      	pop	{r7, pc}

0800ddec <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ddec:	b580      	push	{r7, lr}
 800ddee:	b084      	sub	sp, #16
 800ddf0:	af00      	add	r7, sp, #0
 800ddf2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ddf4:	f001 ff3e 	bl	800fc74 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ddfe:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800de00:	e011      	b.n	800de26 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de06:	2b00      	cmp	r3, #0
 800de08:	d012      	beq.n	800de30 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	3324      	adds	r3, #36	; 0x24
 800de0e:	4618      	mov	r0, r3
 800de10:	f000 fe6c 	bl	800eaec <xTaskRemoveFromEventList>
 800de14:	4603      	mov	r3, r0
 800de16:	2b00      	cmp	r3, #0
 800de18:	d001      	beq.n	800de1e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800de1a:	f000 ffa5 	bl	800ed68 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800de1e:	7bfb      	ldrb	r3, [r7, #15]
 800de20:	3b01      	subs	r3, #1
 800de22:	b2db      	uxtb	r3, r3
 800de24:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800de26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	dce9      	bgt.n	800de02 <prvUnlockQueue+0x16>
 800de2e:	e000      	b.n	800de32 <prvUnlockQueue+0x46>
					break;
 800de30:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	22ff      	movs	r2, #255	; 0xff
 800de36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800de3a:	f001 ff4b 	bl	800fcd4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800de3e:	f001 ff19 	bl	800fc74 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800de48:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800de4a:	e011      	b.n	800de70 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	691b      	ldr	r3, [r3, #16]
 800de50:	2b00      	cmp	r3, #0
 800de52:	d012      	beq.n	800de7a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	3310      	adds	r3, #16
 800de58:	4618      	mov	r0, r3
 800de5a:	f000 fe47 	bl	800eaec <xTaskRemoveFromEventList>
 800de5e:	4603      	mov	r3, r0
 800de60:	2b00      	cmp	r3, #0
 800de62:	d001      	beq.n	800de68 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800de64:	f000 ff80 	bl	800ed68 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800de68:	7bbb      	ldrb	r3, [r7, #14]
 800de6a:	3b01      	subs	r3, #1
 800de6c:	b2db      	uxtb	r3, r3
 800de6e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800de70:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800de74:	2b00      	cmp	r3, #0
 800de76:	dce9      	bgt.n	800de4c <prvUnlockQueue+0x60>
 800de78:	e000      	b.n	800de7c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800de7a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	22ff      	movs	r2, #255	; 0xff
 800de80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800de84:	f001 ff26 	bl	800fcd4 <vPortExitCritical>
}
 800de88:	bf00      	nop
 800de8a:	3710      	adds	r7, #16
 800de8c:	46bd      	mov	sp, r7
 800de8e:	bd80      	pop	{r7, pc}

0800de90 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800de90:	b580      	push	{r7, lr}
 800de92:	b084      	sub	sp, #16
 800de94:	af00      	add	r7, sp, #0
 800de96:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800de98:	f001 feec 	bl	800fc74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	d102      	bne.n	800deaa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800dea4:	2301      	movs	r3, #1
 800dea6:	60fb      	str	r3, [r7, #12]
 800dea8:	e001      	b.n	800deae <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800deaa:	2300      	movs	r3, #0
 800deac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800deae:	f001 ff11 	bl	800fcd4 <vPortExitCritical>

	return xReturn;
 800deb2:	68fb      	ldr	r3, [r7, #12]
}
 800deb4:	4618      	mov	r0, r3
 800deb6:	3710      	adds	r7, #16
 800deb8:	46bd      	mov	sp, r7
 800deba:	bd80      	pop	{r7, pc}

0800debc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800debc:	b580      	push	{r7, lr}
 800debe:	b084      	sub	sp, #16
 800dec0:	af00      	add	r7, sp, #0
 800dec2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800dec4:	f001 fed6 	bl	800fc74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ded0:	429a      	cmp	r2, r3
 800ded2:	d102      	bne.n	800deda <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ded4:	2301      	movs	r3, #1
 800ded6:	60fb      	str	r3, [r7, #12]
 800ded8:	e001      	b.n	800dede <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800deda:	2300      	movs	r3, #0
 800dedc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800dede:	f001 fef9 	bl	800fcd4 <vPortExitCritical>

	return xReturn;
 800dee2:	68fb      	ldr	r3, [r7, #12]
}
 800dee4:	4618      	mov	r0, r3
 800dee6:	3710      	adds	r7, #16
 800dee8:	46bd      	mov	sp, r7
 800deea:	bd80      	pop	{r7, pc}

0800deec <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800deec:	b480      	push	{r7}
 800deee:	b085      	sub	sp, #20
 800def0:	af00      	add	r7, sp, #0
 800def2:	6078      	str	r0, [r7, #4]
 800def4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800def6:	2300      	movs	r3, #0
 800def8:	60fb      	str	r3, [r7, #12]
 800defa:	e014      	b.n	800df26 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800defc:	4a0f      	ldr	r2, [pc, #60]	; (800df3c <vQueueAddToRegistry+0x50>)
 800defe:	68fb      	ldr	r3, [r7, #12]
 800df00:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800df04:	2b00      	cmp	r3, #0
 800df06:	d10b      	bne.n	800df20 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800df08:	490c      	ldr	r1, [pc, #48]	; (800df3c <vQueueAddToRegistry+0x50>)
 800df0a:	68fb      	ldr	r3, [r7, #12]
 800df0c:	683a      	ldr	r2, [r7, #0]
 800df0e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800df12:	4a0a      	ldr	r2, [pc, #40]	; (800df3c <vQueueAddToRegistry+0x50>)
 800df14:	68fb      	ldr	r3, [r7, #12]
 800df16:	00db      	lsls	r3, r3, #3
 800df18:	4413      	add	r3, r2
 800df1a:	687a      	ldr	r2, [r7, #4]
 800df1c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800df1e:	e006      	b.n	800df2e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800df20:	68fb      	ldr	r3, [r7, #12]
 800df22:	3301      	adds	r3, #1
 800df24:	60fb      	str	r3, [r7, #12]
 800df26:	68fb      	ldr	r3, [r7, #12]
 800df28:	2b07      	cmp	r3, #7
 800df2a:	d9e7      	bls.n	800defc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800df2c:	bf00      	nop
 800df2e:	bf00      	nop
 800df30:	3714      	adds	r7, #20
 800df32:	46bd      	mov	sp, r7
 800df34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df38:	4770      	bx	lr
 800df3a:	bf00      	nop
 800df3c:	20000d18 	.word	0x20000d18

0800df40 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800df40:	b580      	push	{r7, lr}
 800df42:	b086      	sub	sp, #24
 800df44:	af00      	add	r7, sp, #0
 800df46:	60f8      	str	r0, [r7, #12]
 800df48:	60b9      	str	r1, [r7, #8]
 800df4a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800df4c:	68fb      	ldr	r3, [r7, #12]
 800df4e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800df50:	f001 fe90 	bl	800fc74 <vPortEnterCritical>
 800df54:	697b      	ldr	r3, [r7, #20]
 800df56:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800df5a:	b25b      	sxtb	r3, r3
 800df5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df60:	d103      	bne.n	800df6a <vQueueWaitForMessageRestricted+0x2a>
 800df62:	697b      	ldr	r3, [r7, #20]
 800df64:	2200      	movs	r2, #0
 800df66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800df6a:	697b      	ldr	r3, [r7, #20]
 800df6c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800df70:	b25b      	sxtb	r3, r3
 800df72:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df76:	d103      	bne.n	800df80 <vQueueWaitForMessageRestricted+0x40>
 800df78:	697b      	ldr	r3, [r7, #20]
 800df7a:	2200      	movs	r2, #0
 800df7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800df80:	f001 fea8 	bl	800fcd4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800df84:	697b      	ldr	r3, [r7, #20]
 800df86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df88:	2b00      	cmp	r3, #0
 800df8a:	d106      	bne.n	800df9a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800df8c:	697b      	ldr	r3, [r7, #20]
 800df8e:	3324      	adds	r3, #36	; 0x24
 800df90:	687a      	ldr	r2, [r7, #4]
 800df92:	68b9      	ldr	r1, [r7, #8]
 800df94:	4618      	mov	r0, r3
 800df96:	f000 fd7d 	bl	800ea94 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800df9a:	6978      	ldr	r0, [r7, #20]
 800df9c:	f7ff ff26 	bl	800ddec <prvUnlockQueue>
	}
 800dfa0:	bf00      	nop
 800dfa2:	3718      	adds	r7, #24
 800dfa4:	46bd      	mov	sp, r7
 800dfa6:	bd80      	pop	{r7, pc}

0800dfa8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800dfa8:	b580      	push	{r7, lr}
 800dfaa:	b08e      	sub	sp, #56	; 0x38
 800dfac:	af04      	add	r7, sp, #16
 800dfae:	60f8      	str	r0, [r7, #12]
 800dfb0:	60b9      	str	r1, [r7, #8]
 800dfb2:	607a      	str	r2, [r7, #4]
 800dfb4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800dfb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	d10a      	bne.n	800dfd2 <xTaskCreateStatic+0x2a>
	__asm volatile
 800dfbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfc0:	f383 8811 	msr	BASEPRI, r3
 800dfc4:	f3bf 8f6f 	isb	sy
 800dfc8:	f3bf 8f4f 	dsb	sy
 800dfcc:	623b      	str	r3, [r7, #32]
}
 800dfce:	bf00      	nop
 800dfd0:	e7fe      	b.n	800dfd0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800dfd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	d10a      	bne.n	800dfee <xTaskCreateStatic+0x46>
	__asm volatile
 800dfd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfdc:	f383 8811 	msr	BASEPRI, r3
 800dfe0:	f3bf 8f6f 	isb	sy
 800dfe4:	f3bf 8f4f 	dsb	sy
 800dfe8:	61fb      	str	r3, [r7, #28]
}
 800dfea:	bf00      	nop
 800dfec:	e7fe      	b.n	800dfec <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800dfee:	235c      	movs	r3, #92	; 0x5c
 800dff0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800dff2:	693b      	ldr	r3, [r7, #16]
 800dff4:	2b5c      	cmp	r3, #92	; 0x5c
 800dff6:	d00a      	beq.n	800e00e <xTaskCreateStatic+0x66>
	__asm volatile
 800dff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dffc:	f383 8811 	msr	BASEPRI, r3
 800e000:	f3bf 8f6f 	isb	sy
 800e004:	f3bf 8f4f 	dsb	sy
 800e008:	61bb      	str	r3, [r7, #24]
}
 800e00a:	bf00      	nop
 800e00c:	e7fe      	b.n	800e00c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800e00e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800e010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e012:	2b00      	cmp	r3, #0
 800e014:	d01e      	beq.n	800e054 <xTaskCreateStatic+0xac>
 800e016:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e018:	2b00      	cmp	r3, #0
 800e01a:	d01b      	beq.n	800e054 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e01c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e01e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800e020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e022:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e024:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800e026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e028:	2202      	movs	r2, #2
 800e02a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800e02e:	2300      	movs	r3, #0
 800e030:	9303      	str	r3, [sp, #12]
 800e032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e034:	9302      	str	r3, [sp, #8]
 800e036:	f107 0314 	add.w	r3, r7, #20
 800e03a:	9301      	str	r3, [sp, #4]
 800e03c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e03e:	9300      	str	r3, [sp, #0]
 800e040:	683b      	ldr	r3, [r7, #0]
 800e042:	687a      	ldr	r2, [r7, #4]
 800e044:	68b9      	ldr	r1, [r7, #8]
 800e046:	68f8      	ldr	r0, [r7, #12]
 800e048:	f000 f850 	bl	800e0ec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e04c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e04e:	f000 f8dd 	bl	800e20c <prvAddNewTaskToReadyList>
 800e052:	e001      	b.n	800e058 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800e054:	2300      	movs	r3, #0
 800e056:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800e058:	697b      	ldr	r3, [r7, #20]
	}
 800e05a:	4618      	mov	r0, r3
 800e05c:	3728      	adds	r7, #40	; 0x28
 800e05e:	46bd      	mov	sp, r7
 800e060:	bd80      	pop	{r7, pc}

0800e062 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800e062:	b580      	push	{r7, lr}
 800e064:	b08c      	sub	sp, #48	; 0x30
 800e066:	af04      	add	r7, sp, #16
 800e068:	60f8      	str	r0, [r7, #12]
 800e06a:	60b9      	str	r1, [r7, #8]
 800e06c:	603b      	str	r3, [r7, #0]
 800e06e:	4613      	mov	r3, r2
 800e070:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800e072:	88fb      	ldrh	r3, [r7, #6]
 800e074:	009b      	lsls	r3, r3, #2
 800e076:	4618      	mov	r0, r3
 800e078:	f001 ff1e 	bl	800feb8 <pvPortMalloc>
 800e07c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800e07e:	697b      	ldr	r3, [r7, #20]
 800e080:	2b00      	cmp	r3, #0
 800e082:	d00e      	beq.n	800e0a2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800e084:	205c      	movs	r0, #92	; 0x5c
 800e086:	f001 ff17 	bl	800feb8 <pvPortMalloc>
 800e08a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800e08c:	69fb      	ldr	r3, [r7, #28]
 800e08e:	2b00      	cmp	r3, #0
 800e090:	d003      	beq.n	800e09a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800e092:	69fb      	ldr	r3, [r7, #28]
 800e094:	697a      	ldr	r2, [r7, #20]
 800e096:	631a      	str	r2, [r3, #48]	; 0x30
 800e098:	e005      	b.n	800e0a6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800e09a:	6978      	ldr	r0, [r7, #20]
 800e09c:	f001 ffd8 	bl	8010050 <vPortFree>
 800e0a0:	e001      	b.n	800e0a6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800e0a2:	2300      	movs	r3, #0
 800e0a4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800e0a6:	69fb      	ldr	r3, [r7, #28]
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	d017      	beq.n	800e0dc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800e0ac:	69fb      	ldr	r3, [r7, #28]
 800e0ae:	2200      	movs	r2, #0
 800e0b0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800e0b4:	88fa      	ldrh	r2, [r7, #6]
 800e0b6:	2300      	movs	r3, #0
 800e0b8:	9303      	str	r3, [sp, #12]
 800e0ba:	69fb      	ldr	r3, [r7, #28]
 800e0bc:	9302      	str	r3, [sp, #8]
 800e0be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0c0:	9301      	str	r3, [sp, #4]
 800e0c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0c4:	9300      	str	r3, [sp, #0]
 800e0c6:	683b      	ldr	r3, [r7, #0]
 800e0c8:	68b9      	ldr	r1, [r7, #8]
 800e0ca:	68f8      	ldr	r0, [r7, #12]
 800e0cc:	f000 f80e 	bl	800e0ec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e0d0:	69f8      	ldr	r0, [r7, #28]
 800e0d2:	f000 f89b 	bl	800e20c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800e0d6:	2301      	movs	r3, #1
 800e0d8:	61bb      	str	r3, [r7, #24]
 800e0da:	e002      	b.n	800e0e2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e0dc:	f04f 33ff 	mov.w	r3, #4294967295
 800e0e0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800e0e2:	69bb      	ldr	r3, [r7, #24]
	}
 800e0e4:	4618      	mov	r0, r3
 800e0e6:	3720      	adds	r7, #32
 800e0e8:	46bd      	mov	sp, r7
 800e0ea:	bd80      	pop	{r7, pc}

0800e0ec <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800e0ec:	b580      	push	{r7, lr}
 800e0ee:	b088      	sub	sp, #32
 800e0f0:	af00      	add	r7, sp, #0
 800e0f2:	60f8      	str	r0, [r7, #12]
 800e0f4:	60b9      	str	r1, [r7, #8]
 800e0f6:	607a      	str	r2, [r7, #4]
 800e0f8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800e0fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0fc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	009b      	lsls	r3, r3, #2
 800e102:	461a      	mov	r2, r3
 800e104:	21a5      	movs	r1, #165	; 0xa5
 800e106:	f002 ff00 	bl	8010f0a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800e10a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e10c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800e114:	3b01      	subs	r3, #1
 800e116:	009b      	lsls	r3, r3, #2
 800e118:	4413      	add	r3, r2
 800e11a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800e11c:	69bb      	ldr	r3, [r7, #24]
 800e11e:	f023 0307 	bic.w	r3, r3, #7
 800e122:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800e124:	69bb      	ldr	r3, [r7, #24]
 800e126:	f003 0307 	and.w	r3, r3, #7
 800e12a:	2b00      	cmp	r3, #0
 800e12c:	d00a      	beq.n	800e144 <prvInitialiseNewTask+0x58>
	__asm volatile
 800e12e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e132:	f383 8811 	msr	BASEPRI, r3
 800e136:	f3bf 8f6f 	isb	sy
 800e13a:	f3bf 8f4f 	dsb	sy
 800e13e:	617b      	str	r3, [r7, #20]
}
 800e140:	bf00      	nop
 800e142:	e7fe      	b.n	800e142 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800e144:	68bb      	ldr	r3, [r7, #8]
 800e146:	2b00      	cmp	r3, #0
 800e148:	d01f      	beq.n	800e18a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e14a:	2300      	movs	r3, #0
 800e14c:	61fb      	str	r3, [r7, #28]
 800e14e:	e012      	b.n	800e176 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800e150:	68ba      	ldr	r2, [r7, #8]
 800e152:	69fb      	ldr	r3, [r7, #28]
 800e154:	4413      	add	r3, r2
 800e156:	7819      	ldrb	r1, [r3, #0]
 800e158:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e15a:	69fb      	ldr	r3, [r7, #28]
 800e15c:	4413      	add	r3, r2
 800e15e:	3334      	adds	r3, #52	; 0x34
 800e160:	460a      	mov	r2, r1
 800e162:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800e164:	68ba      	ldr	r2, [r7, #8]
 800e166:	69fb      	ldr	r3, [r7, #28]
 800e168:	4413      	add	r3, r2
 800e16a:	781b      	ldrb	r3, [r3, #0]
 800e16c:	2b00      	cmp	r3, #0
 800e16e:	d006      	beq.n	800e17e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e170:	69fb      	ldr	r3, [r7, #28]
 800e172:	3301      	adds	r3, #1
 800e174:	61fb      	str	r3, [r7, #28]
 800e176:	69fb      	ldr	r3, [r7, #28]
 800e178:	2b0f      	cmp	r3, #15
 800e17a:	d9e9      	bls.n	800e150 <prvInitialiseNewTask+0x64>
 800e17c:	e000      	b.n	800e180 <prvInitialiseNewTask+0x94>
			{
				break;
 800e17e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e182:	2200      	movs	r2, #0
 800e184:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800e188:	e003      	b.n	800e192 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800e18a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e18c:	2200      	movs	r2, #0
 800e18e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800e192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e194:	2b37      	cmp	r3, #55	; 0x37
 800e196:	d901      	bls.n	800e19c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800e198:	2337      	movs	r3, #55	; 0x37
 800e19a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800e19c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e19e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e1a0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800e1a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e1a6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800e1a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1aa:	2200      	movs	r2, #0
 800e1ac:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800e1ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1b0:	3304      	adds	r3, #4
 800e1b2:	4618      	mov	r0, r3
 800e1b4:	f7fe fee4 	bl	800cf80 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800e1b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1ba:	3318      	adds	r3, #24
 800e1bc:	4618      	mov	r0, r3
 800e1be:	f7fe fedf 	bl	800cf80 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800e1c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e1c6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e1c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1ca:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e1ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1d0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800e1d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e1d6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800e1d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1da:	2200      	movs	r2, #0
 800e1dc:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e1de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1e0:	2200      	movs	r2, #0
 800e1e2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e1e6:	683a      	ldr	r2, [r7, #0]
 800e1e8:	68f9      	ldr	r1, [r7, #12]
 800e1ea:	69b8      	ldr	r0, [r7, #24]
 800e1ec:	f001 fc12 	bl	800fa14 <pxPortInitialiseStack>
 800e1f0:	4602      	mov	r2, r0
 800e1f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1f4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800e1f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	d002      	beq.n	800e202 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e1fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e200:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e202:	bf00      	nop
 800e204:	3720      	adds	r7, #32
 800e206:	46bd      	mov	sp, r7
 800e208:	bd80      	pop	{r7, pc}
	...

0800e20c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800e20c:	b580      	push	{r7, lr}
 800e20e:	b082      	sub	sp, #8
 800e210:	af00      	add	r7, sp, #0
 800e212:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800e214:	f001 fd2e 	bl	800fc74 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800e218:	4b2d      	ldr	r3, [pc, #180]	; (800e2d0 <prvAddNewTaskToReadyList+0xc4>)
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	3301      	adds	r3, #1
 800e21e:	4a2c      	ldr	r2, [pc, #176]	; (800e2d0 <prvAddNewTaskToReadyList+0xc4>)
 800e220:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800e222:	4b2c      	ldr	r3, [pc, #176]	; (800e2d4 <prvAddNewTaskToReadyList+0xc8>)
 800e224:	681b      	ldr	r3, [r3, #0]
 800e226:	2b00      	cmp	r3, #0
 800e228:	d109      	bne.n	800e23e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800e22a:	4a2a      	ldr	r2, [pc, #168]	; (800e2d4 <prvAddNewTaskToReadyList+0xc8>)
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e230:	4b27      	ldr	r3, [pc, #156]	; (800e2d0 <prvAddNewTaskToReadyList+0xc4>)
 800e232:	681b      	ldr	r3, [r3, #0]
 800e234:	2b01      	cmp	r3, #1
 800e236:	d110      	bne.n	800e25a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800e238:	f000 fdba 	bl	800edb0 <prvInitialiseTaskLists>
 800e23c:	e00d      	b.n	800e25a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800e23e:	4b26      	ldr	r3, [pc, #152]	; (800e2d8 <prvAddNewTaskToReadyList+0xcc>)
 800e240:	681b      	ldr	r3, [r3, #0]
 800e242:	2b00      	cmp	r3, #0
 800e244:	d109      	bne.n	800e25a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e246:	4b23      	ldr	r3, [pc, #140]	; (800e2d4 <prvAddNewTaskToReadyList+0xc8>)
 800e248:	681b      	ldr	r3, [r3, #0]
 800e24a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e250:	429a      	cmp	r2, r3
 800e252:	d802      	bhi.n	800e25a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800e254:	4a1f      	ldr	r2, [pc, #124]	; (800e2d4 <prvAddNewTaskToReadyList+0xc8>)
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800e25a:	4b20      	ldr	r3, [pc, #128]	; (800e2dc <prvAddNewTaskToReadyList+0xd0>)
 800e25c:	681b      	ldr	r3, [r3, #0]
 800e25e:	3301      	adds	r3, #1
 800e260:	4a1e      	ldr	r2, [pc, #120]	; (800e2dc <prvAddNewTaskToReadyList+0xd0>)
 800e262:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800e264:	4b1d      	ldr	r3, [pc, #116]	; (800e2dc <prvAddNewTaskToReadyList+0xd0>)
 800e266:	681a      	ldr	r2, [r3, #0]
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e270:	4b1b      	ldr	r3, [pc, #108]	; (800e2e0 <prvAddNewTaskToReadyList+0xd4>)
 800e272:	681b      	ldr	r3, [r3, #0]
 800e274:	429a      	cmp	r2, r3
 800e276:	d903      	bls.n	800e280 <prvAddNewTaskToReadyList+0x74>
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e27c:	4a18      	ldr	r2, [pc, #96]	; (800e2e0 <prvAddNewTaskToReadyList+0xd4>)
 800e27e:	6013      	str	r3, [r2, #0]
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e284:	4613      	mov	r3, r2
 800e286:	009b      	lsls	r3, r3, #2
 800e288:	4413      	add	r3, r2
 800e28a:	009b      	lsls	r3, r3, #2
 800e28c:	4a15      	ldr	r2, [pc, #84]	; (800e2e4 <prvAddNewTaskToReadyList+0xd8>)
 800e28e:	441a      	add	r2, r3
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	3304      	adds	r3, #4
 800e294:	4619      	mov	r1, r3
 800e296:	4610      	mov	r0, r2
 800e298:	f7fe fe7f 	bl	800cf9a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800e29c:	f001 fd1a 	bl	800fcd4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800e2a0:	4b0d      	ldr	r3, [pc, #52]	; (800e2d8 <prvAddNewTaskToReadyList+0xcc>)
 800e2a2:	681b      	ldr	r3, [r3, #0]
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	d00e      	beq.n	800e2c6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800e2a8:	4b0a      	ldr	r3, [pc, #40]	; (800e2d4 <prvAddNewTaskToReadyList+0xc8>)
 800e2aa:	681b      	ldr	r3, [r3, #0]
 800e2ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e2b2:	429a      	cmp	r2, r3
 800e2b4:	d207      	bcs.n	800e2c6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800e2b6:	4b0c      	ldr	r3, [pc, #48]	; (800e2e8 <prvAddNewTaskToReadyList+0xdc>)
 800e2b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e2bc:	601a      	str	r2, [r3, #0]
 800e2be:	f3bf 8f4f 	dsb	sy
 800e2c2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e2c6:	bf00      	nop
 800e2c8:	3708      	adds	r7, #8
 800e2ca:	46bd      	mov	sp, r7
 800e2cc:	bd80      	pop	{r7, pc}
 800e2ce:	bf00      	nop
 800e2d0:	2000122c 	.word	0x2000122c
 800e2d4:	20000d58 	.word	0x20000d58
 800e2d8:	20001238 	.word	0x20001238
 800e2dc:	20001248 	.word	0x20001248
 800e2e0:	20001234 	.word	0x20001234
 800e2e4:	20000d5c 	.word	0x20000d5c
 800e2e8:	e000ed04 	.word	0xe000ed04

0800e2ec <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800e2ec:	b580      	push	{r7, lr}
 800e2ee:	b084      	sub	sp, #16
 800e2f0:	af00      	add	r7, sp, #0
 800e2f2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800e2f4:	2300      	movs	r3, #0
 800e2f6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	d017      	beq.n	800e32e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800e2fe:	4b13      	ldr	r3, [pc, #76]	; (800e34c <vTaskDelay+0x60>)
 800e300:	681b      	ldr	r3, [r3, #0]
 800e302:	2b00      	cmp	r3, #0
 800e304:	d00a      	beq.n	800e31c <vTaskDelay+0x30>
	__asm volatile
 800e306:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e30a:	f383 8811 	msr	BASEPRI, r3
 800e30e:	f3bf 8f6f 	isb	sy
 800e312:	f3bf 8f4f 	dsb	sy
 800e316:	60bb      	str	r3, [r7, #8]
}
 800e318:	bf00      	nop
 800e31a:	e7fe      	b.n	800e31a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800e31c:	f000 f986 	bl	800e62c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800e320:	2100      	movs	r1, #0
 800e322:	6878      	ldr	r0, [r7, #4]
 800e324:	f000 ffb4 	bl	800f290 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800e328:	f000 f98e 	bl	800e648 <xTaskResumeAll>
 800e32c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e32e:	68fb      	ldr	r3, [r7, #12]
 800e330:	2b00      	cmp	r3, #0
 800e332:	d107      	bne.n	800e344 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800e334:	4b06      	ldr	r3, [pc, #24]	; (800e350 <vTaskDelay+0x64>)
 800e336:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e33a:	601a      	str	r2, [r3, #0]
 800e33c:	f3bf 8f4f 	dsb	sy
 800e340:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e344:	bf00      	nop
 800e346:	3710      	adds	r7, #16
 800e348:	46bd      	mov	sp, r7
 800e34a:	bd80      	pop	{r7, pc}
 800e34c:	20001254 	.word	0x20001254
 800e350:	e000ed04 	.word	0xe000ed04

0800e354 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800e354:	b580      	push	{r7, lr}
 800e356:	b084      	sub	sp, #16
 800e358:	af00      	add	r7, sp, #0
 800e35a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800e35c:	f001 fc8a 	bl	800fc74 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	2b00      	cmp	r3, #0
 800e364:	d102      	bne.n	800e36c <vTaskSuspend+0x18>
 800e366:	4b30      	ldr	r3, [pc, #192]	; (800e428 <vTaskSuspend+0xd4>)
 800e368:	681b      	ldr	r3, [r3, #0]
 800e36a:	e000      	b.n	800e36e <vTaskSuspend+0x1a>
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e370:	68fb      	ldr	r3, [r7, #12]
 800e372:	3304      	adds	r3, #4
 800e374:	4618      	mov	r0, r3
 800e376:	f7fe fe6d 	bl	800d054 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e37a:	68fb      	ldr	r3, [r7, #12]
 800e37c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e37e:	2b00      	cmp	r3, #0
 800e380:	d004      	beq.n	800e38c <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e382:	68fb      	ldr	r3, [r7, #12]
 800e384:	3318      	adds	r3, #24
 800e386:	4618      	mov	r0, r3
 800e388:	f7fe fe64 	bl	800d054 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800e38c:	68fb      	ldr	r3, [r7, #12]
 800e38e:	3304      	adds	r3, #4
 800e390:	4619      	mov	r1, r3
 800e392:	4826      	ldr	r0, [pc, #152]	; (800e42c <vTaskSuspend+0xd8>)
 800e394:	f7fe fe01 	bl	800cf9a <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800e398:	68fb      	ldr	r3, [r7, #12]
 800e39a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800e39e:	b2db      	uxtb	r3, r3
 800e3a0:	2b01      	cmp	r3, #1
 800e3a2:	d103      	bne.n	800e3ac <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e3a4:	68fb      	ldr	r3, [r7, #12]
 800e3a6:	2200      	movs	r2, #0
 800e3a8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800e3ac:	f001 fc92 	bl	800fcd4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800e3b0:	4b1f      	ldr	r3, [pc, #124]	; (800e430 <vTaskSuspend+0xdc>)
 800e3b2:	681b      	ldr	r3, [r3, #0]
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	d005      	beq.n	800e3c4 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800e3b8:	f001 fc5c 	bl	800fc74 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800e3bc:	f000 fd96 	bl	800eeec <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800e3c0:	f001 fc88 	bl	800fcd4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800e3c4:	4b18      	ldr	r3, [pc, #96]	; (800e428 <vTaskSuspend+0xd4>)
 800e3c6:	681b      	ldr	r3, [r3, #0]
 800e3c8:	68fa      	ldr	r2, [r7, #12]
 800e3ca:	429a      	cmp	r2, r3
 800e3cc:	d127      	bne.n	800e41e <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 800e3ce:	4b18      	ldr	r3, [pc, #96]	; (800e430 <vTaskSuspend+0xdc>)
 800e3d0:	681b      	ldr	r3, [r3, #0]
 800e3d2:	2b00      	cmp	r3, #0
 800e3d4:	d017      	beq.n	800e406 <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800e3d6:	4b17      	ldr	r3, [pc, #92]	; (800e434 <vTaskSuspend+0xe0>)
 800e3d8:	681b      	ldr	r3, [r3, #0]
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	d00a      	beq.n	800e3f4 <vTaskSuspend+0xa0>
	__asm volatile
 800e3de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3e2:	f383 8811 	msr	BASEPRI, r3
 800e3e6:	f3bf 8f6f 	isb	sy
 800e3ea:	f3bf 8f4f 	dsb	sy
 800e3ee:	60bb      	str	r3, [r7, #8]
}
 800e3f0:	bf00      	nop
 800e3f2:	e7fe      	b.n	800e3f2 <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 800e3f4:	4b10      	ldr	r3, [pc, #64]	; (800e438 <vTaskSuspend+0xe4>)
 800e3f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e3fa:	601a      	str	r2, [r3, #0]
 800e3fc:	f3bf 8f4f 	dsb	sy
 800e400:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e404:	e00b      	b.n	800e41e <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800e406:	4b09      	ldr	r3, [pc, #36]	; (800e42c <vTaskSuspend+0xd8>)
 800e408:	681a      	ldr	r2, [r3, #0]
 800e40a:	4b0c      	ldr	r3, [pc, #48]	; (800e43c <vTaskSuspend+0xe8>)
 800e40c:	681b      	ldr	r3, [r3, #0]
 800e40e:	429a      	cmp	r2, r3
 800e410:	d103      	bne.n	800e41a <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 800e412:	4b05      	ldr	r3, [pc, #20]	; (800e428 <vTaskSuspend+0xd4>)
 800e414:	2200      	movs	r2, #0
 800e416:	601a      	str	r2, [r3, #0]
	}
 800e418:	e001      	b.n	800e41e <vTaskSuspend+0xca>
					vTaskSwitchContext();
 800e41a:	f000 fa7d 	bl	800e918 <vTaskSwitchContext>
	}
 800e41e:	bf00      	nop
 800e420:	3710      	adds	r7, #16
 800e422:	46bd      	mov	sp, r7
 800e424:	bd80      	pop	{r7, pc}
 800e426:	bf00      	nop
 800e428:	20000d58 	.word	0x20000d58
 800e42c:	20001218 	.word	0x20001218
 800e430:	20001238 	.word	0x20001238
 800e434:	20001254 	.word	0x20001254
 800e438:	e000ed04 	.word	0xe000ed04
 800e43c:	2000122c 	.word	0x2000122c

0800e440 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 800e440:	b480      	push	{r7}
 800e442:	b087      	sub	sp, #28
 800e444:	af00      	add	r7, sp, #0
 800e446:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 800e448:	2300      	movs	r3, #0
 800e44a:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	2b00      	cmp	r3, #0
 800e454:	d10a      	bne.n	800e46c <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 800e456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e45a:	f383 8811 	msr	BASEPRI, r3
 800e45e:	f3bf 8f6f 	isb	sy
 800e462:	f3bf 8f4f 	dsb	sy
 800e466:	60fb      	str	r3, [r7, #12]
}
 800e468:	bf00      	nop
 800e46a:	e7fe      	b.n	800e46a <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800e46c:	693b      	ldr	r3, [r7, #16]
 800e46e:	695b      	ldr	r3, [r3, #20]
 800e470:	4a0a      	ldr	r2, [pc, #40]	; (800e49c <prvTaskIsTaskSuspended+0x5c>)
 800e472:	4293      	cmp	r3, r2
 800e474:	d10a      	bne.n	800e48c <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800e476:	693b      	ldr	r3, [r7, #16]
 800e478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e47a:	4a09      	ldr	r2, [pc, #36]	; (800e4a0 <prvTaskIsTaskSuspended+0x60>)
 800e47c:	4293      	cmp	r3, r2
 800e47e:	d005      	beq.n	800e48c <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800e480:	693b      	ldr	r3, [r7, #16]
 800e482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e484:	2b00      	cmp	r3, #0
 800e486:	d101      	bne.n	800e48c <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 800e488:	2301      	movs	r3, #1
 800e48a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e48c:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800e48e:	4618      	mov	r0, r3
 800e490:	371c      	adds	r7, #28
 800e492:	46bd      	mov	sp, r7
 800e494:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e498:	4770      	bx	lr
 800e49a:	bf00      	nop
 800e49c:	20001218 	.word	0x20001218
 800e4a0:	200011ec 	.word	0x200011ec

0800e4a4 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 800e4a4:	b580      	push	{r7, lr}
 800e4a6:	b084      	sub	sp, #16
 800e4a8:	af00      	add	r7, sp, #0
 800e4aa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	2b00      	cmp	r3, #0
 800e4b4:	d10a      	bne.n	800e4cc <vTaskResume+0x28>
	__asm volatile
 800e4b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4ba:	f383 8811 	msr	BASEPRI, r3
 800e4be:	f3bf 8f6f 	isb	sy
 800e4c2:	f3bf 8f4f 	dsb	sy
 800e4c6:	60bb      	str	r3, [r7, #8]
}
 800e4c8:	bf00      	nop
 800e4ca:	e7fe      	b.n	800e4ca <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 800e4cc:	4b20      	ldr	r3, [pc, #128]	; (800e550 <vTaskResume+0xac>)
 800e4ce:	681b      	ldr	r3, [r3, #0]
 800e4d0:	68fa      	ldr	r2, [r7, #12]
 800e4d2:	429a      	cmp	r2, r3
 800e4d4:	d038      	beq.n	800e548 <vTaskResume+0xa4>
 800e4d6:	68fb      	ldr	r3, [r7, #12]
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	d035      	beq.n	800e548 <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 800e4dc:	f001 fbca 	bl	800fc74 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800e4e0:	68f8      	ldr	r0, [r7, #12]
 800e4e2:	f7ff ffad 	bl	800e440 <prvTaskIsTaskSuspended>
 800e4e6:	4603      	mov	r3, r0
 800e4e8:	2b00      	cmp	r3, #0
 800e4ea:	d02b      	beq.n	800e544 <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 800e4ec:	68fb      	ldr	r3, [r7, #12]
 800e4ee:	3304      	adds	r3, #4
 800e4f0:	4618      	mov	r0, r3
 800e4f2:	f7fe fdaf 	bl	800d054 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e4f6:	68fb      	ldr	r3, [r7, #12]
 800e4f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e4fa:	4b16      	ldr	r3, [pc, #88]	; (800e554 <vTaskResume+0xb0>)
 800e4fc:	681b      	ldr	r3, [r3, #0]
 800e4fe:	429a      	cmp	r2, r3
 800e500:	d903      	bls.n	800e50a <vTaskResume+0x66>
 800e502:	68fb      	ldr	r3, [r7, #12]
 800e504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e506:	4a13      	ldr	r2, [pc, #76]	; (800e554 <vTaskResume+0xb0>)
 800e508:	6013      	str	r3, [r2, #0]
 800e50a:	68fb      	ldr	r3, [r7, #12]
 800e50c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e50e:	4613      	mov	r3, r2
 800e510:	009b      	lsls	r3, r3, #2
 800e512:	4413      	add	r3, r2
 800e514:	009b      	lsls	r3, r3, #2
 800e516:	4a10      	ldr	r2, [pc, #64]	; (800e558 <vTaskResume+0xb4>)
 800e518:	441a      	add	r2, r3
 800e51a:	68fb      	ldr	r3, [r7, #12]
 800e51c:	3304      	adds	r3, #4
 800e51e:	4619      	mov	r1, r3
 800e520:	4610      	mov	r0, r2
 800e522:	f7fe fd3a 	bl	800cf9a <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e526:	68fb      	ldr	r3, [r7, #12]
 800e528:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e52a:	4b09      	ldr	r3, [pc, #36]	; (800e550 <vTaskResume+0xac>)
 800e52c:	681b      	ldr	r3, [r3, #0]
 800e52e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e530:	429a      	cmp	r2, r3
 800e532:	d307      	bcc.n	800e544 <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 800e534:	4b09      	ldr	r3, [pc, #36]	; (800e55c <vTaskResume+0xb8>)
 800e536:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e53a:	601a      	str	r2, [r3, #0]
 800e53c:	f3bf 8f4f 	dsb	sy
 800e540:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800e544:	f001 fbc6 	bl	800fcd4 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e548:	bf00      	nop
 800e54a:	3710      	adds	r7, #16
 800e54c:	46bd      	mov	sp, r7
 800e54e:	bd80      	pop	{r7, pc}
 800e550:	20000d58 	.word	0x20000d58
 800e554:	20001234 	.word	0x20001234
 800e558:	20000d5c 	.word	0x20000d5c
 800e55c:	e000ed04 	.word	0xe000ed04

0800e560 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800e560:	b580      	push	{r7, lr}
 800e562:	b08a      	sub	sp, #40	; 0x28
 800e564:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800e566:	2300      	movs	r3, #0
 800e568:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800e56a:	2300      	movs	r3, #0
 800e56c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e56e:	463a      	mov	r2, r7
 800e570:	1d39      	adds	r1, r7, #4
 800e572:	f107 0308 	add.w	r3, r7, #8
 800e576:	4618      	mov	r0, r3
 800e578:	f7fe fac0 	bl	800cafc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800e57c:	6839      	ldr	r1, [r7, #0]
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	68ba      	ldr	r2, [r7, #8]
 800e582:	9202      	str	r2, [sp, #8]
 800e584:	9301      	str	r3, [sp, #4]
 800e586:	2300      	movs	r3, #0
 800e588:	9300      	str	r3, [sp, #0]
 800e58a:	2300      	movs	r3, #0
 800e58c:	460a      	mov	r2, r1
 800e58e:	4921      	ldr	r1, [pc, #132]	; (800e614 <vTaskStartScheduler+0xb4>)
 800e590:	4821      	ldr	r0, [pc, #132]	; (800e618 <vTaskStartScheduler+0xb8>)
 800e592:	f7ff fd09 	bl	800dfa8 <xTaskCreateStatic>
 800e596:	4603      	mov	r3, r0
 800e598:	4a20      	ldr	r2, [pc, #128]	; (800e61c <vTaskStartScheduler+0xbc>)
 800e59a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800e59c:	4b1f      	ldr	r3, [pc, #124]	; (800e61c <vTaskStartScheduler+0xbc>)
 800e59e:	681b      	ldr	r3, [r3, #0]
 800e5a0:	2b00      	cmp	r3, #0
 800e5a2:	d002      	beq.n	800e5aa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800e5a4:	2301      	movs	r3, #1
 800e5a6:	617b      	str	r3, [r7, #20]
 800e5a8:	e001      	b.n	800e5ae <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800e5aa:	2300      	movs	r3, #0
 800e5ac:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800e5ae:	697b      	ldr	r3, [r7, #20]
 800e5b0:	2b01      	cmp	r3, #1
 800e5b2:	d102      	bne.n	800e5ba <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800e5b4:	f000 fec0 	bl	800f338 <xTimerCreateTimerTask>
 800e5b8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800e5ba:	697b      	ldr	r3, [r7, #20]
 800e5bc:	2b01      	cmp	r3, #1
 800e5be:	d116      	bne.n	800e5ee <vTaskStartScheduler+0x8e>
	__asm volatile
 800e5c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5c4:	f383 8811 	msr	BASEPRI, r3
 800e5c8:	f3bf 8f6f 	isb	sy
 800e5cc:	f3bf 8f4f 	dsb	sy
 800e5d0:	613b      	str	r3, [r7, #16]
}
 800e5d2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800e5d4:	4b12      	ldr	r3, [pc, #72]	; (800e620 <vTaskStartScheduler+0xc0>)
 800e5d6:	f04f 32ff 	mov.w	r2, #4294967295
 800e5da:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e5dc:	4b11      	ldr	r3, [pc, #68]	; (800e624 <vTaskStartScheduler+0xc4>)
 800e5de:	2201      	movs	r2, #1
 800e5e0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e5e2:	4b11      	ldr	r3, [pc, #68]	; (800e628 <vTaskStartScheduler+0xc8>)
 800e5e4:	2200      	movs	r2, #0
 800e5e6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800e5e8:	f001 faa2 	bl	800fb30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800e5ec:	e00e      	b.n	800e60c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e5ee:	697b      	ldr	r3, [r7, #20]
 800e5f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e5f4:	d10a      	bne.n	800e60c <vTaskStartScheduler+0xac>
	__asm volatile
 800e5f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5fa:	f383 8811 	msr	BASEPRI, r3
 800e5fe:	f3bf 8f6f 	isb	sy
 800e602:	f3bf 8f4f 	dsb	sy
 800e606:	60fb      	str	r3, [r7, #12]
}
 800e608:	bf00      	nop
 800e60a:	e7fe      	b.n	800e60a <vTaskStartScheduler+0xaa>
}
 800e60c:	bf00      	nop
 800e60e:	3718      	adds	r7, #24
 800e610:	46bd      	mov	sp, r7
 800e612:	bd80      	pop	{r7, pc}
 800e614:	08014930 	.word	0x08014930
 800e618:	0800ed81 	.word	0x0800ed81
 800e61c:	20001250 	.word	0x20001250
 800e620:	2000124c 	.word	0x2000124c
 800e624:	20001238 	.word	0x20001238
 800e628:	20001230 	.word	0x20001230

0800e62c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800e62c:	b480      	push	{r7}
 800e62e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800e630:	4b04      	ldr	r3, [pc, #16]	; (800e644 <vTaskSuspendAll+0x18>)
 800e632:	681b      	ldr	r3, [r3, #0]
 800e634:	3301      	adds	r3, #1
 800e636:	4a03      	ldr	r2, [pc, #12]	; (800e644 <vTaskSuspendAll+0x18>)
 800e638:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800e63a:	bf00      	nop
 800e63c:	46bd      	mov	sp, r7
 800e63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e642:	4770      	bx	lr
 800e644:	20001254 	.word	0x20001254

0800e648 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e648:	b580      	push	{r7, lr}
 800e64a:	b084      	sub	sp, #16
 800e64c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e64e:	2300      	movs	r3, #0
 800e650:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e652:	2300      	movs	r3, #0
 800e654:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800e656:	4b42      	ldr	r3, [pc, #264]	; (800e760 <xTaskResumeAll+0x118>)
 800e658:	681b      	ldr	r3, [r3, #0]
 800e65a:	2b00      	cmp	r3, #0
 800e65c:	d10a      	bne.n	800e674 <xTaskResumeAll+0x2c>
	__asm volatile
 800e65e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e662:	f383 8811 	msr	BASEPRI, r3
 800e666:	f3bf 8f6f 	isb	sy
 800e66a:	f3bf 8f4f 	dsb	sy
 800e66e:	603b      	str	r3, [r7, #0]
}
 800e670:	bf00      	nop
 800e672:	e7fe      	b.n	800e672 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800e674:	f001 fafe 	bl	800fc74 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800e678:	4b39      	ldr	r3, [pc, #228]	; (800e760 <xTaskResumeAll+0x118>)
 800e67a:	681b      	ldr	r3, [r3, #0]
 800e67c:	3b01      	subs	r3, #1
 800e67e:	4a38      	ldr	r2, [pc, #224]	; (800e760 <xTaskResumeAll+0x118>)
 800e680:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e682:	4b37      	ldr	r3, [pc, #220]	; (800e760 <xTaskResumeAll+0x118>)
 800e684:	681b      	ldr	r3, [r3, #0]
 800e686:	2b00      	cmp	r3, #0
 800e688:	d162      	bne.n	800e750 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e68a:	4b36      	ldr	r3, [pc, #216]	; (800e764 <xTaskResumeAll+0x11c>)
 800e68c:	681b      	ldr	r3, [r3, #0]
 800e68e:	2b00      	cmp	r3, #0
 800e690:	d05e      	beq.n	800e750 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e692:	e02f      	b.n	800e6f4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e694:	4b34      	ldr	r3, [pc, #208]	; (800e768 <xTaskResumeAll+0x120>)
 800e696:	68db      	ldr	r3, [r3, #12]
 800e698:	68db      	ldr	r3, [r3, #12]
 800e69a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e69c:	68fb      	ldr	r3, [r7, #12]
 800e69e:	3318      	adds	r3, #24
 800e6a0:	4618      	mov	r0, r3
 800e6a2:	f7fe fcd7 	bl	800d054 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e6a6:	68fb      	ldr	r3, [r7, #12]
 800e6a8:	3304      	adds	r3, #4
 800e6aa:	4618      	mov	r0, r3
 800e6ac:	f7fe fcd2 	bl	800d054 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e6b0:	68fb      	ldr	r3, [r7, #12]
 800e6b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e6b4:	4b2d      	ldr	r3, [pc, #180]	; (800e76c <xTaskResumeAll+0x124>)
 800e6b6:	681b      	ldr	r3, [r3, #0]
 800e6b8:	429a      	cmp	r2, r3
 800e6ba:	d903      	bls.n	800e6c4 <xTaskResumeAll+0x7c>
 800e6bc:	68fb      	ldr	r3, [r7, #12]
 800e6be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6c0:	4a2a      	ldr	r2, [pc, #168]	; (800e76c <xTaskResumeAll+0x124>)
 800e6c2:	6013      	str	r3, [r2, #0]
 800e6c4:	68fb      	ldr	r3, [r7, #12]
 800e6c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e6c8:	4613      	mov	r3, r2
 800e6ca:	009b      	lsls	r3, r3, #2
 800e6cc:	4413      	add	r3, r2
 800e6ce:	009b      	lsls	r3, r3, #2
 800e6d0:	4a27      	ldr	r2, [pc, #156]	; (800e770 <xTaskResumeAll+0x128>)
 800e6d2:	441a      	add	r2, r3
 800e6d4:	68fb      	ldr	r3, [r7, #12]
 800e6d6:	3304      	adds	r3, #4
 800e6d8:	4619      	mov	r1, r3
 800e6da:	4610      	mov	r0, r2
 800e6dc:	f7fe fc5d 	bl	800cf9a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e6e0:	68fb      	ldr	r3, [r7, #12]
 800e6e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e6e4:	4b23      	ldr	r3, [pc, #140]	; (800e774 <xTaskResumeAll+0x12c>)
 800e6e6:	681b      	ldr	r3, [r3, #0]
 800e6e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6ea:	429a      	cmp	r2, r3
 800e6ec:	d302      	bcc.n	800e6f4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800e6ee:	4b22      	ldr	r3, [pc, #136]	; (800e778 <xTaskResumeAll+0x130>)
 800e6f0:	2201      	movs	r2, #1
 800e6f2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e6f4:	4b1c      	ldr	r3, [pc, #112]	; (800e768 <xTaskResumeAll+0x120>)
 800e6f6:	681b      	ldr	r3, [r3, #0]
 800e6f8:	2b00      	cmp	r3, #0
 800e6fa:	d1cb      	bne.n	800e694 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e6fc:	68fb      	ldr	r3, [r7, #12]
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	d001      	beq.n	800e706 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e702:	f000 fbf3 	bl	800eeec <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800e706:	4b1d      	ldr	r3, [pc, #116]	; (800e77c <xTaskResumeAll+0x134>)
 800e708:	681b      	ldr	r3, [r3, #0]
 800e70a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	2b00      	cmp	r3, #0
 800e710:	d010      	beq.n	800e734 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e712:	f000 f847 	bl	800e7a4 <xTaskIncrementTick>
 800e716:	4603      	mov	r3, r0
 800e718:	2b00      	cmp	r3, #0
 800e71a:	d002      	beq.n	800e722 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800e71c:	4b16      	ldr	r3, [pc, #88]	; (800e778 <xTaskResumeAll+0x130>)
 800e71e:	2201      	movs	r2, #1
 800e720:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	3b01      	subs	r3, #1
 800e726:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	d1f1      	bne.n	800e712 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800e72e:	4b13      	ldr	r3, [pc, #76]	; (800e77c <xTaskResumeAll+0x134>)
 800e730:	2200      	movs	r2, #0
 800e732:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e734:	4b10      	ldr	r3, [pc, #64]	; (800e778 <xTaskResumeAll+0x130>)
 800e736:	681b      	ldr	r3, [r3, #0]
 800e738:	2b00      	cmp	r3, #0
 800e73a:	d009      	beq.n	800e750 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e73c:	2301      	movs	r3, #1
 800e73e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e740:	4b0f      	ldr	r3, [pc, #60]	; (800e780 <xTaskResumeAll+0x138>)
 800e742:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e746:	601a      	str	r2, [r3, #0]
 800e748:	f3bf 8f4f 	dsb	sy
 800e74c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e750:	f001 fac0 	bl	800fcd4 <vPortExitCritical>

	return xAlreadyYielded;
 800e754:	68bb      	ldr	r3, [r7, #8]
}
 800e756:	4618      	mov	r0, r3
 800e758:	3710      	adds	r7, #16
 800e75a:	46bd      	mov	sp, r7
 800e75c:	bd80      	pop	{r7, pc}
 800e75e:	bf00      	nop
 800e760:	20001254 	.word	0x20001254
 800e764:	2000122c 	.word	0x2000122c
 800e768:	200011ec 	.word	0x200011ec
 800e76c:	20001234 	.word	0x20001234
 800e770:	20000d5c 	.word	0x20000d5c
 800e774:	20000d58 	.word	0x20000d58
 800e778:	20001240 	.word	0x20001240
 800e77c:	2000123c 	.word	0x2000123c
 800e780:	e000ed04 	.word	0xe000ed04

0800e784 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800e784:	b480      	push	{r7}
 800e786:	b083      	sub	sp, #12
 800e788:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800e78a:	4b05      	ldr	r3, [pc, #20]	; (800e7a0 <xTaskGetTickCount+0x1c>)
 800e78c:	681b      	ldr	r3, [r3, #0]
 800e78e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800e790:	687b      	ldr	r3, [r7, #4]
}
 800e792:	4618      	mov	r0, r3
 800e794:	370c      	adds	r7, #12
 800e796:	46bd      	mov	sp, r7
 800e798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e79c:	4770      	bx	lr
 800e79e:	bf00      	nop
 800e7a0:	20001230 	.word	0x20001230

0800e7a4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e7a4:	b580      	push	{r7, lr}
 800e7a6:	b086      	sub	sp, #24
 800e7a8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e7aa:	2300      	movs	r3, #0
 800e7ac:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e7ae:	4b4f      	ldr	r3, [pc, #316]	; (800e8ec <xTaskIncrementTick+0x148>)
 800e7b0:	681b      	ldr	r3, [r3, #0]
 800e7b2:	2b00      	cmp	r3, #0
 800e7b4:	f040 808f 	bne.w	800e8d6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e7b8:	4b4d      	ldr	r3, [pc, #308]	; (800e8f0 <xTaskIncrementTick+0x14c>)
 800e7ba:	681b      	ldr	r3, [r3, #0]
 800e7bc:	3301      	adds	r3, #1
 800e7be:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e7c0:	4a4b      	ldr	r2, [pc, #300]	; (800e8f0 <xTaskIncrementTick+0x14c>)
 800e7c2:	693b      	ldr	r3, [r7, #16]
 800e7c4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e7c6:	693b      	ldr	r3, [r7, #16]
 800e7c8:	2b00      	cmp	r3, #0
 800e7ca:	d120      	bne.n	800e80e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800e7cc:	4b49      	ldr	r3, [pc, #292]	; (800e8f4 <xTaskIncrementTick+0x150>)
 800e7ce:	681b      	ldr	r3, [r3, #0]
 800e7d0:	681b      	ldr	r3, [r3, #0]
 800e7d2:	2b00      	cmp	r3, #0
 800e7d4:	d00a      	beq.n	800e7ec <xTaskIncrementTick+0x48>
	__asm volatile
 800e7d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7da:	f383 8811 	msr	BASEPRI, r3
 800e7de:	f3bf 8f6f 	isb	sy
 800e7e2:	f3bf 8f4f 	dsb	sy
 800e7e6:	603b      	str	r3, [r7, #0]
}
 800e7e8:	bf00      	nop
 800e7ea:	e7fe      	b.n	800e7ea <xTaskIncrementTick+0x46>
 800e7ec:	4b41      	ldr	r3, [pc, #260]	; (800e8f4 <xTaskIncrementTick+0x150>)
 800e7ee:	681b      	ldr	r3, [r3, #0]
 800e7f0:	60fb      	str	r3, [r7, #12]
 800e7f2:	4b41      	ldr	r3, [pc, #260]	; (800e8f8 <xTaskIncrementTick+0x154>)
 800e7f4:	681b      	ldr	r3, [r3, #0]
 800e7f6:	4a3f      	ldr	r2, [pc, #252]	; (800e8f4 <xTaskIncrementTick+0x150>)
 800e7f8:	6013      	str	r3, [r2, #0]
 800e7fa:	4a3f      	ldr	r2, [pc, #252]	; (800e8f8 <xTaskIncrementTick+0x154>)
 800e7fc:	68fb      	ldr	r3, [r7, #12]
 800e7fe:	6013      	str	r3, [r2, #0]
 800e800:	4b3e      	ldr	r3, [pc, #248]	; (800e8fc <xTaskIncrementTick+0x158>)
 800e802:	681b      	ldr	r3, [r3, #0]
 800e804:	3301      	adds	r3, #1
 800e806:	4a3d      	ldr	r2, [pc, #244]	; (800e8fc <xTaskIncrementTick+0x158>)
 800e808:	6013      	str	r3, [r2, #0]
 800e80a:	f000 fb6f 	bl	800eeec <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e80e:	4b3c      	ldr	r3, [pc, #240]	; (800e900 <xTaskIncrementTick+0x15c>)
 800e810:	681b      	ldr	r3, [r3, #0]
 800e812:	693a      	ldr	r2, [r7, #16]
 800e814:	429a      	cmp	r2, r3
 800e816:	d349      	bcc.n	800e8ac <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e818:	4b36      	ldr	r3, [pc, #216]	; (800e8f4 <xTaskIncrementTick+0x150>)
 800e81a:	681b      	ldr	r3, [r3, #0]
 800e81c:	681b      	ldr	r3, [r3, #0]
 800e81e:	2b00      	cmp	r3, #0
 800e820:	d104      	bne.n	800e82c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e822:	4b37      	ldr	r3, [pc, #220]	; (800e900 <xTaskIncrementTick+0x15c>)
 800e824:	f04f 32ff 	mov.w	r2, #4294967295
 800e828:	601a      	str	r2, [r3, #0]
					break;
 800e82a:	e03f      	b.n	800e8ac <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e82c:	4b31      	ldr	r3, [pc, #196]	; (800e8f4 <xTaskIncrementTick+0x150>)
 800e82e:	681b      	ldr	r3, [r3, #0]
 800e830:	68db      	ldr	r3, [r3, #12]
 800e832:	68db      	ldr	r3, [r3, #12]
 800e834:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e836:	68bb      	ldr	r3, [r7, #8]
 800e838:	685b      	ldr	r3, [r3, #4]
 800e83a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e83c:	693a      	ldr	r2, [r7, #16]
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	429a      	cmp	r2, r3
 800e842:	d203      	bcs.n	800e84c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e844:	4a2e      	ldr	r2, [pc, #184]	; (800e900 <xTaskIncrementTick+0x15c>)
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e84a:	e02f      	b.n	800e8ac <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e84c:	68bb      	ldr	r3, [r7, #8]
 800e84e:	3304      	adds	r3, #4
 800e850:	4618      	mov	r0, r3
 800e852:	f7fe fbff 	bl	800d054 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e856:	68bb      	ldr	r3, [r7, #8]
 800e858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	d004      	beq.n	800e868 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e85e:	68bb      	ldr	r3, [r7, #8]
 800e860:	3318      	adds	r3, #24
 800e862:	4618      	mov	r0, r3
 800e864:	f7fe fbf6 	bl	800d054 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e868:	68bb      	ldr	r3, [r7, #8]
 800e86a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e86c:	4b25      	ldr	r3, [pc, #148]	; (800e904 <xTaskIncrementTick+0x160>)
 800e86e:	681b      	ldr	r3, [r3, #0]
 800e870:	429a      	cmp	r2, r3
 800e872:	d903      	bls.n	800e87c <xTaskIncrementTick+0xd8>
 800e874:	68bb      	ldr	r3, [r7, #8]
 800e876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e878:	4a22      	ldr	r2, [pc, #136]	; (800e904 <xTaskIncrementTick+0x160>)
 800e87a:	6013      	str	r3, [r2, #0]
 800e87c:	68bb      	ldr	r3, [r7, #8]
 800e87e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e880:	4613      	mov	r3, r2
 800e882:	009b      	lsls	r3, r3, #2
 800e884:	4413      	add	r3, r2
 800e886:	009b      	lsls	r3, r3, #2
 800e888:	4a1f      	ldr	r2, [pc, #124]	; (800e908 <xTaskIncrementTick+0x164>)
 800e88a:	441a      	add	r2, r3
 800e88c:	68bb      	ldr	r3, [r7, #8]
 800e88e:	3304      	adds	r3, #4
 800e890:	4619      	mov	r1, r3
 800e892:	4610      	mov	r0, r2
 800e894:	f7fe fb81 	bl	800cf9a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e898:	68bb      	ldr	r3, [r7, #8]
 800e89a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e89c:	4b1b      	ldr	r3, [pc, #108]	; (800e90c <xTaskIncrementTick+0x168>)
 800e89e:	681b      	ldr	r3, [r3, #0]
 800e8a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e8a2:	429a      	cmp	r2, r3
 800e8a4:	d3b8      	bcc.n	800e818 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800e8a6:	2301      	movs	r3, #1
 800e8a8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e8aa:	e7b5      	b.n	800e818 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e8ac:	4b17      	ldr	r3, [pc, #92]	; (800e90c <xTaskIncrementTick+0x168>)
 800e8ae:	681b      	ldr	r3, [r3, #0]
 800e8b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e8b2:	4915      	ldr	r1, [pc, #84]	; (800e908 <xTaskIncrementTick+0x164>)
 800e8b4:	4613      	mov	r3, r2
 800e8b6:	009b      	lsls	r3, r3, #2
 800e8b8:	4413      	add	r3, r2
 800e8ba:	009b      	lsls	r3, r3, #2
 800e8bc:	440b      	add	r3, r1
 800e8be:	681b      	ldr	r3, [r3, #0]
 800e8c0:	2b01      	cmp	r3, #1
 800e8c2:	d901      	bls.n	800e8c8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800e8c4:	2301      	movs	r3, #1
 800e8c6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800e8c8:	4b11      	ldr	r3, [pc, #68]	; (800e910 <xTaskIncrementTick+0x16c>)
 800e8ca:	681b      	ldr	r3, [r3, #0]
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	d007      	beq.n	800e8e0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800e8d0:	2301      	movs	r3, #1
 800e8d2:	617b      	str	r3, [r7, #20]
 800e8d4:	e004      	b.n	800e8e0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800e8d6:	4b0f      	ldr	r3, [pc, #60]	; (800e914 <xTaskIncrementTick+0x170>)
 800e8d8:	681b      	ldr	r3, [r3, #0]
 800e8da:	3301      	adds	r3, #1
 800e8dc:	4a0d      	ldr	r2, [pc, #52]	; (800e914 <xTaskIncrementTick+0x170>)
 800e8de:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800e8e0:	697b      	ldr	r3, [r7, #20]
}
 800e8e2:	4618      	mov	r0, r3
 800e8e4:	3718      	adds	r7, #24
 800e8e6:	46bd      	mov	sp, r7
 800e8e8:	bd80      	pop	{r7, pc}
 800e8ea:	bf00      	nop
 800e8ec:	20001254 	.word	0x20001254
 800e8f0:	20001230 	.word	0x20001230
 800e8f4:	200011e4 	.word	0x200011e4
 800e8f8:	200011e8 	.word	0x200011e8
 800e8fc:	20001244 	.word	0x20001244
 800e900:	2000124c 	.word	0x2000124c
 800e904:	20001234 	.word	0x20001234
 800e908:	20000d5c 	.word	0x20000d5c
 800e90c:	20000d58 	.word	0x20000d58
 800e910:	20001240 	.word	0x20001240
 800e914:	2000123c 	.word	0x2000123c

0800e918 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e918:	b480      	push	{r7}
 800e91a:	b085      	sub	sp, #20
 800e91c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e91e:	4b28      	ldr	r3, [pc, #160]	; (800e9c0 <vTaskSwitchContext+0xa8>)
 800e920:	681b      	ldr	r3, [r3, #0]
 800e922:	2b00      	cmp	r3, #0
 800e924:	d003      	beq.n	800e92e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e926:	4b27      	ldr	r3, [pc, #156]	; (800e9c4 <vTaskSwitchContext+0xac>)
 800e928:	2201      	movs	r2, #1
 800e92a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e92c:	e041      	b.n	800e9b2 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800e92e:	4b25      	ldr	r3, [pc, #148]	; (800e9c4 <vTaskSwitchContext+0xac>)
 800e930:	2200      	movs	r2, #0
 800e932:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e934:	4b24      	ldr	r3, [pc, #144]	; (800e9c8 <vTaskSwitchContext+0xb0>)
 800e936:	681b      	ldr	r3, [r3, #0]
 800e938:	60fb      	str	r3, [r7, #12]
 800e93a:	e010      	b.n	800e95e <vTaskSwitchContext+0x46>
 800e93c:	68fb      	ldr	r3, [r7, #12]
 800e93e:	2b00      	cmp	r3, #0
 800e940:	d10a      	bne.n	800e958 <vTaskSwitchContext+0x40>
	__asm volatile
 800e942:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e946:	f383 8811 	msr	BASEPRI, r3
 800e94a:	f3bf 8f6f 	isb	sy
 800e94e:	f3bf 8f4f 	dsb	sy
 800e952:	607b      	str	r3, [r7, #4]
}
 800e954:	bf00      	nop
 800e956:	e7fe      	b.n	800e956 <vTaskSwitchContext+0x3e>
 800e958:	68fb      	ldr	r3, [r7, #12]
 800e95a:	3b01      	subs	r3, #1
 800e95c:	60fb      	str	r3, [r7, #12]
 800e95e:	491b      	ldr	r1, [pc, #108]	; (800e9cc <vTaskSwitchContext+0xb4>)
 800e960:	68fa      	ldr	r2, [r7, #12]
 800e962:	4613      	mov	r3, r2
 800e964:	009b      	lsls	r3, r3, #2
 800e966:	4413      	add	r3, r2
 800e968:	009b      	lsls	r3, r3, #2
 800e96a:	440b      	add	r3, r1
 800e96c:	681b      	ldr	r3, [r3, #0]
 800e96e:	2b00      	cmp	r3, #0
 800e970:	d0e4      	beq.n	800e93c <vTaskSwitchContext+0x24>
 800e972:	68fa      	ldr	r2, [r7, #12]
 800e974:	4613      	mov	r3, r2
 800e976:	009b      	lsls	r3, r3, #2
 800e978:	4413      	add	r3, r2
 800e97a:	009b      	lsls	r3, r3, #2
 800e97c:	4a13      	ldr	r2, [pc, #76]	; (800e9cc <vTaskSwitchContext+0xb4>)
 800e97e:	4413      	add	r3, r2
 800e980:	60bb      	str	r3, [r7, #8]
 800e982:	68bb      	ldr	r3, [r7, #8]
 800e984:	685b      	ldr	r3, [r3, #4]
 800e986:	685a      	ldr	r2, [r3, #4]
 800e988:	68bb      	ldr	r3, [r7, #8]
 800e98a:	605a      	str	r2, [r3, #4]
 800e98c:	68bb      	ldr	r3, [r7, #8]
 800e98e:	685a      	ldr	r2, [r3, #4]
 800e990:	68bb      	ldr	r3, [r7, #8]
 800e992:	3308      	adds	r3, #8
 800e994:	429a      	cmp	r2, r3
 800e996:	d104      	bne.n	800e9a2 <vTaskSwitchContext+0x8a>
 800e998:	68bb      	ldr	r3, [r7, #8]
 800e99a:	685b      	ldr	r3, [r3, #4]
 800e99c:	685a      	ldr	r2, [r3, #4]
 800e99e:	68bb      	ldr	r3, [r7, #8]
 800e9a0:	605a      	str	r2, [r3, #4]
 800e9a2:	68bb      	ldr	r3, [r7, #8]
 800e9a4:	685b      	ldr	r3, [r3, #4]
 800e9a6:	68db      	ldr	r3, [r3, #12]
 800e9a8:	4a09      	ldr	r2, [pc, #36]	; (800e9d0 <vTaskSwitchContext+0xb8>)
 800e9aa:	6013      	str	r3, [r2, #0]
 800e9ac:	4a06      	ldr	r2, [pc, #24]	; (800e9c8 <vTaskSwitchContext+0xb0>)
 800e9ae:	68fb      	ldr	r3, [r7, #12]
 800e9b0:	6013      	str	r3, [r2, #0]
}
 800e9b2:	bf00      	nop
 800e9b4:	3714      	adds	r7, #20
 800e9b6:	46bd      	mov	sp, r7
 800e9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9bc:	4770      	bx	lr
 800e9be:	bf00      	nop
 800e9c0:	20001254 	.word	0x20001254
 800e9c4:	20001240 	.word	0x20001240
 800e9c8:	20001234 	.word	0x20001234
 800e9cc:	20000d5c 	.word	0x20000d5c
 800e9d0:	20000d58 	.word	0x20000d58

0800e9d4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e9d4:	b580      	push	{r7, lr}
 800e9d6:	b084      	sub	sp, #16
 800e9d8:	af00      	add	r7, sp, #0
 800e9da:	6078      	str	r0, [r7, #4]
 800e9dc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	d10a      	bne.n	800e9fa <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800e9e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9e8:	f383 8811 	msr	BASEPRI, r3
 800e9ec:	f3bf 8f6f 	isb	sy
 800e9f0:	f3bf 8f4f 	dsb	sy
 800e9f4:	60fb      	str	r3, [r7, #12]
}
 800e9f6:	bf00      	nop
 800e9f8:	e7fe      	b.n	800e9f8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e9fa:	4b07      	ldr	r3, [pc, #28]	; (800ea18 <vTaskPlaceOnEventList+0x44>)
 800e9fc:	681b      	ldr	r3, [r3, #0]
 800e9fe:	3318      	adds	r3, #24
 800ea00:	4619      	mov	r1, r3
 800ea02:	6878      	ldr	r0, [r7, #4]
 800ea04:	f7fe faed 	bl	800cfe2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ea08:	2101      	movs	r1, #1
 800ea0a:	6838      	ldr	r0, [r7, #0]
 800ea0c:	f000 fc40 	bl	800f290 <prvAddCurrentTaskToDelayedList>
}
 800ea10:	bf00      	nop
 800ea12:	3710      	adds	r7, #16
 800ea14:	46bd      	mov	sp, r7
 800ea16:	bd80      	pop	{r7, pc}
 800ea18:	20000d58 	.word	0x20000d58

0800ea1c <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 800ea1c:	b580      	push	{r7, lr}
 800ea1e:	b086      	sub	sp, #24
 800ea20:	af00      	add	r7, sp, #0
 800ea22:	60f8      	str	r0, [r7, #12]
 800ea24:	60b9      	str	r1, [r7, #8]
 800ea26:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 800ea28:	68fb      	ldr	r3, [r7, #12]
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	d10a      	bne.n	800ea44 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 800ea2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea32:	f383 8811 	msr	BASEPRI, r3
 800ea36:	f3bf 8f6f 	isb	sy
 800ea3a:	f3bf 8f4f 	dsb	sy
 800ea3e:	617b      	str	r3, [r7, #20]
}
 800ea40:	bf00      	nop
 800ea42:	e7fe      	b.n	800ea42 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 800ea44:	4b11      	ldr	r3, [pc, #68]	; (800ea8c <vTaskPlaceOnUnorderedEventList+0x70>)
 800ea46:	681b      	ldr	r3, [r3, #0]
 800ea48:	2b00      	cmp	r3, #0
 800ea4a:	d10a      	bne.n	800ea62 <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 800ea4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea50:	f383 8811 	msr	BASEPRI, r3
 800ea54:	f3bf 8f6f 	isb	sy
 800ea58:	f3bf 8f4f 	dsb	sy
 800ea5c:	613b      	str	r3, [r7, #16]
}
 800ea5e:	bf00      	nop
 800ea60:	e7fe      	b.n	800ea60 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800ea62:	4b0b      	ldr	r3, [pc, #44]	; (800ea90 <vTaskPlaceOnUnorderedEventList+0x74>)
 800ea64:	681b      	ldr	r3, [r3, #0]
 800ea66:	68ba      	ldr	r2, [r7, #8]
 800ea68:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800ea6c:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ea6e:	4b08      	ldr	r3, [pc, #32]	; (800ea90 <vTaskPlaceOnUnorderedEventList+0x74>)
 800ea70:	681b      	ldr	r3, [r3, #0]
 800ea72:	3318      	adds	r3, #24
 800ea74:	4619      	mov	r1, r3
 800ea76:	68f8      	ldr	r0, [r7, #12]
 800ea78:	f7fe fa8f 	bl	800cf9a <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ea7c:	2101      	movs	r1, #1
 800ea7e:	6878      	ldr	r0, [r7, #4]
 800ea80:	f000 fc06 	bl	800f290 <prvAddCurrentTaskToDelayedList>
}
 800ea84:	bf00      	nop
 800ea86:	3718      	adds	r7, #24
 800ea88:	46bd      	mov	sp, r7
 800ea8a:	bd80      	pop	{r7, pc}
 800ea8c:	20001254 	.word	0x20001254
 800ea90:	20000d58 	.word	0x20000d58

0800ea94 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ea94:	b580      	push	{r7, lr}
 800ea96:	b086      	sub	sp, #24
 800ea98:	af00      	add	r7, sp, #0
 800ea9a:	60f8      	str	r0, [r7, #12]
 800ea9c:	60b9      	str	r1, [r7, #8]
 800ea9e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800eaa0:	68fb      	ldr	r3, [r7, #12]
 800eaa2:	2b00      	cmp	r3, #0
 800eaa4:	d10a      	bne.n	800eabc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800eaa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eaaa:	f383 8811 	msr	BASEPRI, r3
 800eaae:	f3bf 8f6f 	isb	sy
 800eab2:	f3bf 8f4f 	dsb	sy
 800eab6:	617b      	str	r3, [r7, #20]
}
 800eab8:	bf00      	nop
 800eaba:	e7fe      	b.n	800eaba <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800eabc:	4b0a      	ldr	r3, [pc, #40]	; (800eae8 <vTaskPlaceOnEventListRestricted+0x54>)
 800eabe:	681b      	ldr	r3, [r3, #0]
 800eac0:	3318      	adds	r3, #24
 800eac2:	4619      	mov	r1, r3
 800eac4:	68f8      	ldr	r0, [r7, #12]
 800eac6:	f7fe fa68 	bl	800cf9a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	2b00      	cmp	r3, #0
 800eace:	d002      	beq.n	800ead6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800ead0:	f04f 33ff 	mov.w	r3, #4294967295
 800ead4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ead6:	6879      	ldr	r1, [r7, #4]
 800ead8:	68b8      	ldr	r0, [r7, #8]
 800eada:	f000 fbd9 	bl	800f290 <prvAddCurrentTaskToDelayedList>
	}
 800eade:	bf00      	nop
 800eae0:	3718      	adds	r7, #24
 800eae2:	46bd      	mov	sp, r7
 800eae4:	bd80      	pop	{r7, pc}
 800eae6:	bf00      	nop
 800eae8:	20000d58 	.word	0x20000d58

0800eaec <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800eaec:	b580      	push	{r7, lr}
 800eaee:	b086      	sub	sp, #24
 800eaf0:	af00      	add	r7, sp, #0
 800eaf2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	68db      	ldr	r3, [r3, #12]
 800eaf8:	68db      	ldr	r3, [r3, #12]
 800eafa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800eafc:	693b      	ldr	r3, [r7, #16]
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	d10a      	bne.n	800eb18 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800eb02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb06:	f383 8811 	msr	BASEPRI, r3
 800eb0a:	f3bf 8f6f 	isb	sy
 800eb0e:	f3bf 8f4f 	dsb	sy
 800eb12:	60fb      	str	r3, [r7, #12]
}
 800eb14:	bf00      	nop
 800eb16:	e7fe      	b.n	800eb16 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800eb18:	693b      	ldr	r3, [r7, #16]
 800eb1a:	3318      	adds	r3, #24
 800eb1c:	4618      	mov	r0, r3
 800eb1e:	f7fe fa99 	bl	800d054 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800eb22:	4b1e      	ldr	r3, [pc, #120]	; (800eb9c <xTaskRemoveFromEventList+0xb0>)
 800eb24:	681b      	ldr	r3, [r3, #0]
 800eb26:	2b00      	cmp	r3, #0
 800eb28:	d11d      	bne.n	800eb66 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800eb2a:	693b      	ldr	r3, [r7, #16]
 800eb2c:	3304      	adds	r3, #4
 800eb2e:	4618      	mov	r0, r3
 800eb30:	f7fe fa90 	bl	800d054 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800eb34:	693b      	ldr	r3, [r7, #16]
 800eb36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb38:	4b19      	ldr	r3, [pc, #100]	; (800eba0 <xTaskRemoveFromEventList+0xb4>)
 800eb3a:	681b      	ldr	r3, [r3, #0]
 800eb3c:	429a      	cmp	r2, r3
 800eb3e:	d903      	bls.n	800eb48 <xTaskRemoveFromEventList+0x5c>
 800eb40:	693b      	ldr	r3, [r7, #16]
 800eb42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb44:	4a16      	ldr	r2, [pc, #88]	; (800eba0 <xTaskRemoveFromEventList+0xb4>)
 800eb46:	6013      	str	r3, [r2, #0]
 800eb48:	693b      	ldr	r3, [r7, #16]
 800eb4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb4c:	4613      	mov	r3, r2
 800eb4e:	009b      	lsls	r3, r3, #2
 800eb50:	4413      	add	r3, r2
 800eb52:	009b      	lsls	r3, r3, #2
 800eb54:	4a13      	ldr	r2, [pc, #76]	; (800eba4 <xTaskRemoveFromEventList+0xb8>)
 800eb56:	441a      	add	r2, r3
 800eb58:	693b      	ldr	r3, [r7, #16]
 800eb5a:	3304      	adds	r3, #4
 800eb5c:	4619      	mov	r1, r3
 800eb5e:	4610      	mov	r0, r2
 800eb60:	f7fe fa1b 	bl	800cf9a <vListInsertEnd>
 800eb64:	e005      	b.n	800eb72 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800eb66:	693b      	ldr	r3, [r7, #16]
 800eb68:	3318      	adds	r3, #24
 800eb6a:	4619      	mov	r1, r3
 800eb6c:	480e      	ldr	r0, [pc, #56]	; (800eba8 <xTaskRemoveFromEventList+0xbc>)
 800eb6e:	f7fe fa14 	bl	800cf9a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800eb72:	693b      	ldr	r3, [r7, #16]
 800eb74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb76:	4b0d      	ldr	r3, [pc, #52]	; (800ebac <xTaskRemoveFromEventList+0xc0>)
 800eb78:	681b      	ldr	r3, [r3, #0]
 800eb7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb7c:	429a      	cmp	r2, r3
 800eb7e:	d905      	bls.n	800eb8c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800eb80:	2301      	movs	r3, #1
 800eb82:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800eb84:	4b0a      	ldr	r3, [pc, #40]	; (800ebb0 <xTaskRemoveFromEventList+0xc4>)
 800eb86:	2201      	movs	r2, #1
 800eb88:	601a      	str	r2, [r3, #0]
 800eb8a:	e001      	b.n	800eb90 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800eb8c:	2300      	movs	r3, #0
 800eb8e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800eb90:	697b      	ldr	r3, [r7, #20]
}
 800eb92:	4618      	mov	r0, r3
 800eb94:	3718      	adds	r7, #24
 800eb96:	46bd      	mov	sp, r7
 800eb98:	bd80      	pop	{r7, pc}
 800eb9a:	bf00      	nop
 800eb9c:	20001254 	.word	0x20001254
 800eba0:	20001234 	.word	0x20001234
 800eba4:	20000d5c 	.word	0x20000d5c
 800eba8:	200011ec 	.word	0x200011ec
 800ebac:	20000d58 	.word	0x20000d58
 800ebb0:	20001240 	.word	0x20001240

0800ebb4 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 800ebb4:	b580      	push	{r7, lr}
 800ebb6:	b086      	sub	sp, #24
 800ebb8:	af00      	add	r7, sp, #0
 800ebba:	6078      	str	r0, [r7, #4]
 800ebbc:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 800ebbe:	4b29      	ldr	r3, [pc, #164]	; (800ec64 <vTaskRemoveFromUnorderedEventList+0xb0>)
 800ebc0:	681b      	ldr	r3, [r3, #0]
 800ebc2:	2b00      	cmp	r3, #0
 800ebc4:	d10a      	bne.n	800ebdc <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 800ebc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebca:	f383 8811 	msr	BASEPRI, r3
 800ebce:	f3bf 8f6f 	isb	sy
 800ebd2:	f3bf 8f4f 	dsb	sy
 800ebd6:	613b      	str	r3, [r7, #16]
}
 800ebd8:	bf00      	nop
 800ebda:	e7fe      	b.n	800ebda <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800ebdc:	683b      	ldr	r3, [r7, #0]
 800ebde:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	68db      	ldr	r3, [r3, #12]
 800ebea:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 800ebec:	697b      	ldr	r3, [r7, #20]
 800ebee:	2b00      	cmp	r3, #0
 800ebf0:	d10a      	bne.n	800ec08 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 800ebf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebf6:	f383 8811 	msr	BASEPRI, r3
 800ebfa:	f3bf 8f6f 	isb	sy
 800ebfe:	f3bf 8f4f 	dsb	sy
 800ec02:	60fb      	str	r3, [r7, #12]
}
 800ec04:	bf00      	nop
 800ec06:	e7fe      	b.n	800ec06 <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 800ec08:	6878      	ldr	r0, [r7, #4]
 800ec0a:	f7fe fa23 	bl	800d054 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ec0e:	697b      	ldr	r3, [r7, #20]
 800ec10:	3304      	adds	r3, #4
 800ec12:	4618      	mov	r0, r3
 800ec14:	f7fe fa1e 	bl	800d054 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 800ec18:	697b      	ldr	r3, [r7, #20]
 800ec1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec1c:	4b12      	ldr	r3, [pc, #72]	; (800ec68 <vTaskRemoveFromUnorderedEventList+0xb4>)
 800ec1e:	681b      	ldr	r3, [r3, #0]
 800ec20:	429a      	cmp	r2, r3
 800ec22:	d903      	bls.n	800ec2c <vTaskRemoveFromUnorderedEventList+0x78>
 800ec24:	697b      	ldr	r3, [r7, #20]
 800ec26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec28:	4a0f      	ldr	r2, [pc, #60]	; (800ec68 <vTaskRemoveFromUnorderedEventList+0xb4>)
 800ec2a:	6013      	str	r3, [r2, #0]
 800ec2c:	697b      	ldr	r3, [r7, #20]
 800ec2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec30:	4613      	mov	r3, r2
 800ec32:	009b      	lsls	r3, r3, #2
 800ec34:	4413      	add	r3, r2
 800ec36:	009b      	lsls	r3, r3, #2
 800ec38:	4a0c      	ldr	r2, [pc, #48]	; (800ec6c <vTaskRemoveFromUnorderedEventList+0xb8>)
 800ec3a:	441a      	add	r2, r3
 800ec3c:	697b      	ldr	r3, [r7, #20]
 800ec3e:	3304      	adds	r3, #4
 800ec40:	4619      	mov	r1, r3
 800ec42:	4610      	mov	r0, r2
 800ec44:	f7fe f9a9 	bl	800cf9a <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ec48:	697b      	ldr	r3, [r7, #20]
 800ec4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec4c:	4b08      	ldr	r3, [pc, #32]	; (800ec70 <vTaskRemoveFromUnorderedEventList+0xbc>)
 800ec4e:	681b      	ldr	r3, [r3, #0]
 800ec50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec52:	429a      	cmp	r2, r3
 800ec54:	d902      	bls.n	800ec5c <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 800ec56:	4b07      	ldr	r3, [pc, #28]	; (800ec74 <vTaskRemoveFromUnorderedEventList+0xc0>)
 800ec58:	2201      	movs	r2, #1
 800ec5a:	601a      	str	r2, [r3, #0]
	}
}
 800ec5c:	bf00      	nop
 800ec5e:	3718      	adds	r7, #24
 800ec60:	46bd      	mov	sp, r7
 800ec62:	bd80      	pop	{r7, pc}
 800ec64:	20001254 	.word	0x20001254
 800ec68:	20001234 	.word	0x20001234
 800ec6c:	20000d5c 	.word	0x20000d5c
 800ec70:	20000d58 	.word	0x20000d58
 800ec74:	20001240 	.word	0x20001240

0800ec78 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ec78:	b480      	push	{r7}
 800ec7a:	b083      	sub	sp, #12
 800ec7c:	af00      	add	r7, sp, #0
 800ec7e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ec80:	4b06      	ldr	r3, [pc, #24]	; (800ec9c <vTaskInternalSetTimeOutState+0x24>)
 800ec82:	681a      	ldr	r2, [r3, #0]
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ec88:	4b05      	ldr	r3, [pc, #20]	; (800eca0 <vTaskInternalSetTimeOutState+0x28>)
 800ec8a:	681a      	ldr	r2, [r3, #0]
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	605a      	str	r2, [r3, #4]
}
 800ec90:	bf00      	nop
 800ec92:	370c      	adds	r7, #12
 800ec94:	46bd      	mov	sp, r7
 800ec96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec9a:	4770      	bx	lr
 800ec9c:	20001244 	.word	0x20001244
 800eca0:	20001230 	.word	0x20001230

0800eca4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800eca4:	b580      	push	{r7, lr}
 800eca6:	b088      	sub	sp, #32
 800eca8:	af00      	add	r7, sp, #0
 800ecaa:	6078      	str	r0, [r7, #4]
 800ecac:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	2b00      	cmp	r3, #0
 800ecb2:	d10a      	bne.n	800ecca <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800ecb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecb8:	f383 8811 	msr	BASEPRI, r3
 800ecbc:	f3bf 8f6f 	isb	sy
 800ecc0:	f3bf 8f4f 	dsb	sy
 800ecc4:	613b      	str	r3, [r7, #16]
}
 800ecc6:	bf00      	nop
 800ecc8:	e7fe      	b.n	800ecc8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800ecca:	683b      	ldr	r3, [r7, #0]
 800eccc:	2b00      	cmp	r3, #0
 800ecce:	d10a      	bne.n	800ece6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800ecd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecd4:	f383 8811 	msr	BASEPRI, r3
 800ecd8:	f3bf 8f6f 	isb	sy
 800ecdc:	f3bf 8f4f 	dsb	sy
 800ece0:	60fb      	str	r3, [r7, #12]
}
 800ece2:	bf00      	nop
 800ece4:	e7fe      	b.n	800ece4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800ece6:	f000 ffc5 	bl	800fc74 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ecea:	4b1d      	ldr	r3, [pc, #116]	; (800ed60 <xTaskCheckForTimeOut+0xbc>)
 800ecec:	681b      	ldr	r3, [r3, #0]
 800ecee:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	685b      	ldr	r3, [r3, #4]
 800ecf4:	69ba      	ldr	r2, [r7, #24]
 800ecf6:	1ad3      	subs	r3, r2, r3
 800ecf8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ecfa:	683b      	ldr	r3, [r7, #0]
 800ecfc:	681b      	ldr	r3, [r3, #0]
 800ecfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed02:	d102      	bne.n	800ed0a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ed04:	2300      	movs	r3, #0
 800ed06:	61fb      	str	r3, [r7, #28]
 800ed08:	e023      	b.n	800ed52 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	681a      	ldr	r2, [r3, #0]
 800ed0e:	4b15      	ldr	r3, [pc, #84]	; (800ed64 <xTaskCheckForTimeOut+0xc0>)
 800ed10:	681b      	ldr	r3, [r3, #0]
 800ed12:	429a      	cmp	r2, r3
 800ed14:	d007      	beq.n	800ed26 <xTaskCheckForTimeOut+0x82>
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	685b      	ldr	r3, [r3, #4]
 800ed1a:	69ba      	ldr	r2, [r7, #24]
 800ed1c:	429a      	cmp	r2, r3
 800ed1e:	d302      	bcc.n	800ed26 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ed20:	2301      	movs	r3, #1
 800ed22:	61fb      	str	r3, [r7, #28]
 800ed24:	e015      	b.n	800ed52 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ed26:	683b      	ldr	r3, [r7, #0]
 800ed28:	681b      	ldr	r3, [r3, #0]
 800ed2a:	697a      	ldr	r2, [r7, #20]
 800ed2c:	429a      	cmp	r2, r3
 800ed2e:	d20b      	bcs.n	800ed48 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ed30:	683b      	ldr	r3, [r7, #0]
 800ed32:	681a      	ldr	r2, [r3, #0]
 800ed34:	697b      	ldr	r3, [r7, #20]
 800ed36:	1ad2      	subs	r2, r2, r3
 800ed38:	683b      	ldr	r3, [r7, #0]
 800ed3a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ed3c:	6878      	ldr	r0, [r7, #4]
 800ed3e:	f7ff ff9b 	bl	800ec78 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ed42:	2300      	movs	r3, #0
 800ed44:	61fb      	str	r3, [r7, #28]
 800ed46:	e004      	b.n	800ed52 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800ed48:	683b      	ldr	r3, [r7, #0]
 800ed4a:	2200      	movs	r2, #0
 800ed4c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ed4e:	2301      	movs	r3, #1
 800ed50:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ed52:	f000 ffbf 	bl	800fcd4 <vPortExitCritical>

	return xReturn;
 800ed56:	69fb      	ldr	r3, [r7, #28]
}
 800ed58:	4618      	mov	r0, r3
 800ed5a:	3720      	adds	r7, #32
 800ed5c:	46bd      	mov	sp, r7
 800ed5e:	bd80      	pop	{r7, pc}
 800ed60:	20001230 	.word	0x20001230
 800ed64:	20001244 	.word	0x20001244

0800ed68 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ed68:	b480      	push	{r7}
 800ed6a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ed6c:	4b03      	ldr	r3, [pc, #12]	; (800ed7c <vTaskMissedYield+0x14>)
 800ed6e:	2201      	movs	r2, #1
 800ed70:	601a      	str	r2, [r3, #0]
}
 800ed72:	bf00      	nop
 800ed74:	46bd      	mov	sp, r7
 800ed76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed7a:	4770      	bx	lr
 800ed7c:	20001240 	.word	0x20001240

0800ed80 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ed80:	b580      	push	{r7, lr}
 800ed82:	b082      	sub	sp, #8
 800ed84:	af00      	add	r7, sp, #0
 800ed86:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ed88:	f000 f852 	bl	800ee30 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ed8c:	4b06      	ldr	r3, [pc, #24]	; (800eda8 <prvIdleTask+0x28>)
 800ed8e:	681b      	ldr	r3, [r3, #0]
 800ed90:	2b01      	cmp	r3, #1
 800ed92:	d9f9      	bls.n	800ed88 <prvIdleTask+0x8>
			{
				taskYIELD();
 800ed94:	4b05      	ldr	r3, [pc, #20]	; (800edac <prvIdleTask+0x2c>)
 800ed96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ed9a:	601a      	str	r2, [r3, #0]
 800ed9c:	f3bf 8f4f 	dsb	sy
 800eda0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800eda4:	e7f0      	b.n	800ed88 <prvIdleTask+0x8>
 800eda6:	bf00      	nop
 800eda8:	20000d5c 	.word	0x20000d5c
 800edac:	e000ed04 	.word	0xe000ed04

0800edb0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800edb0:	b580      	push	{r7, lr}
 800edb2:	b082      	sub	sp, #8
 800edb4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800edb6:	2300      	movs	r3, #0
 800edb8:	607b      	str	r3, [r7, #4]
 800edba:	e00c      	b.n	800edd6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800edbc:	687a      	ldr	r2, [r7, #4]
 800edbe:	4613      	mov	r3, r2
 800edc0:	009b      	lsls	r3, r3, #2
 800edc2:	4413      	add	r3, r2
 800edc4:	009b      	lsls	r3, r3, #2
 800edc6:	4a12      	ldr	r2, [pc, #72]	; (800ee10 <prvInitialiseTaskLists+0x60>)
 800edc8:	4413      	add	r3, r2
 800edca:	4618      	mov	r0, r3
 800edcc:	f7fe f8b8 	bl	800cf40 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	3301      	adds	r3, #1
 800edd4:	607b      	str	r3, [r7, #4]
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	2b37      	cmp	r3, #55	; 0x37
 800edda:	d9ef      	bls.n	800edbc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800eddc:	480d      	ldr	r0, [pc, #52]	; (800ee14 <prvInitialiseTaskLists+0x64>)
 800edde:	f7fe f8af 	bl	800cf40 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ede2:	480d      	ldr	r0, [pc, #52]	; (800ee18 <prvInitialiseTaskLists+0x68>)
 800ede4:	f7fe f8ac 	bl	800cf40 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ede8:	480c      	ldr	r0, [pc, #48]	; (800ee1c <prvInitialiseTaskLists+0x6c>)
 800edea:	f7fe f8a9 	bl	800cf40 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800edee:	480c      	ldr	r0, [pc, #48]	; (800ee20 <prvInitialiseTaskLists+0x70>)
 800edf0:	f7fe f8a6 	bl	800cf40 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800edf4:	480b      	ldr	r0, [pc, #44]	; (800ee24 <prvInitialiseTaskLists+0x74>)
 800edf6:	f7fe f8a3 	bl	800cf40 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800edfa:	4b0b      	ldr	r3, [pc, #44]	; (800ee28 <prvInitialiseTaskLists+0x78>)
 800edfc:	4a05      	ldr	r2, [pc, #20]	; (800ee14 <prvInitialiseTaskLists+0x64>)
 800edfe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ee00:	4b0a      	ldr	r3, [pc, #40]	; (800ee2c <prvInitialiseTaskLists+0x7c>)
 800ee02:	4a05      	ldr	r2, [pc, #20]	; (800ee18 <prvInitialiseTaskLists+0x68>)
 800ee04:	601a      	str	r2, [r3, #0]
}
 800ee06:	bf00      	nop
 800ee08:	3708      	adds	r7, #8
 800ee0a:	46bd      	mov	sp, r7
 800ee0c:	bd80      	pop	{r7, pc}
 800ee0e:	bf00      	nop
 800ee10:	20000d5c 	.word	0x20000d5c
 800ee14:	200011bc 	.word	0x200011bc
 800ee18:	200011d0 	.word	0x200011d0
 800ee1c:	200011ec 	.word	0x200011ec
 800ee20:	20001200 	.word	0x20001200
 800ee24:	20001218 	.word	0x20001218
 800ee28:	200011e4 	.word	0x200011e4
 800ee2c:	200011e8 	.word	0x200011e8

0800ee30 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ee30:	b580      	push	{r7, lr}
 800ee32:	b082      	sub	sp, #8
 800ee34:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ee36:	e019      	b.n	800ee6c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ee38:	f000 ff1c 	bl	800fc74 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ee3c:	4b10      	ldr	r3, [pc, #64]	; (800ee80 <prvCheckTasksWaitingTermination+0x50>)
 800ee3e:	68db      	ldr	r3, [r3, #12]
 800ee40:	68db      	ldr	r3, [r3, #12]
 800ee42:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	3304      	adds	r3, #4
 800ee48:	4618      	mov	r0, r3
 800ee4a:	f7fe f903 	bl	800d054 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ee4e:	4b0d      	ldr	r3, [pc, #52]	; (800ee84 <prvCheckTasksWaitingTermination+0x54>)
 800ee50:	681b      	ldr	r3, [r3, #0]
 800ee52:	3b01      	subs	r3, #1
 800ee54:	4a0b      	ldr	r2, [pc, #44]	; (800ee84 <prvCheckTasksWaitingTermination+0x54>)
 800ee56:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ee58:	4b0b      	ldr	r3, [pc, #44]	; (800ee88 <prvCheckTasksWaitingTermination+0x58>)
 800ee5a:	681b      	ldr	r3, [r3, #0]
 800ee5c:	3b01      	subs	r3, #1
 800ee5e:	4a0a      	ldr	r2, [pc, #40]	; (800ee88 <prvCheckTasksWaitingTermination+0x58>)
 800ee60:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ee62:	f000 ff37 	bl	800fcd4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ee66:	6878      	ldr	r0, [r7, #4]
 800ee68:	f000 f810 	bl	800ee8c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ee6c:	4b06      	ldr	r3, [pc, #24]	; (800ee88 <prvCheckTasksWaitingTermination+0x58>)
 800ee6e:	681b      	ldr	r3, [r3, #0]
 800ee70:	2b00      	cmp	r3, #0
 800ee72:	d1e1      	bne.n	800ee38 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ee74:	bf00      	nop
 800ee76:	bf00      	nop
 800ee78:	3708      	adds	r7, #8
 800ee7a:	46bd      	mov	sp, r7
 800ee7c:	bd80      	pop	{r7, pc}
 800ee7e:	bf00      	nop
 800ee80:	20001200 	.word	0x20001200
 800ee84:	2000122c 	.word	0x2000122c
 800ee88:	20001214 	.word	0x20001214

0800ee8c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ee8c:	b580      	push	{r7, lr}
 800ee8e:	b084      	sub	sp, #16
 800ee90:	af00      	add	r7, sp, #0
 800ee92:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	d108      	bne.n	800eeb0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eea2:	4618      	mov	r0, r3
 800eea4:	f001 f8d4 	bl	8010050 <vPortFree>
				vPortFree( pxTCB );
 800eea8:	6878      	ldr	r0, [r7, #4]
 800eeaa:	f001 f8d1 	bl	8010050 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800eeae:	e018      	b.n	800eee2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800eeb6:	2b01      	cmp	r3, #1
 800eeb8:	d103      	bne.n	800eec2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800eeba:	6878      	ldr	r0, [r7, #4]
 800eebc:	f001 f8c8 	bl	8010050 <vPortFree>
	}
 800eec0:	e00f      	b.n	800eee2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800eec8:	2b02      	cmp	r3, #2
 800eeca:	d00a      	beq.n	800eee2 <prvDeleteTCB+0x56>
	__asm volatile
 800eecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eed0:	f383 8811 	msr	BASEPRI, r3
 800eed4:	f3bf 8f6f 	isb	sy
 800eed8:	f3bf 8f4f 	dsb	sy
 800eedc:	60fb      	str	r3, [r7, #12]
}
 800eede:	bf00      	nop
 800eee0:	e7fe      	b.n	800eee0 <prvDeleteTCB+0x54>
	}
 800eee2:	bf00      	nop
 800eee4:	3710      	adds	r7, #16
 800eee6:	46bd      	mov	sp, r7
 800eee8:	bd80      	pop	{r7, pc}
	...

0800eeec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800eeec:	b480      	push	{r7}
 800eeee:	b083      	sub	sp, #12
 800eef0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800eef2:	4b0c      	ldr	r3, [pc, #48]	; (800ef24 <prvResetNextTaskUnblockTime+0x38>)
 800eef4:	681b      	ldr	r3, [r3, #0]
 800eef6:	681b      	ldr	r3, [r3, #0]
 800eef8:	2b00      	cmp	r3, #0
 800eefa:	d104      	bne.n	800ef06 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800eefc:	4b0a      	ldr	r3, [pc, #40]	; (800ef28 <prvResetNextTaskUnblockTime+0x3c>)
 800eefe:	f04f 32ff 	mov.w	r2, #4294967295
 800ef02:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ef04:	e008      	b.n	800ef18 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ef06:	4b07      	ldr	r3, [pc, #28]	; (800ef24 <prvResetNextTaskUnblockTime+0x38>)
 800ef08:	681b      	ldr	r3, [r3, #0]
 800ef0a:	68db      	ldr	r3, [r3, #12]
 800ef0c:	68db      	ldr	r3, [r3, #12]
 800ef0e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	685b      	ldr	r3, [r3, #4]
 800ef14:	4a04      	ldr	r2, [pc, #16]	; (800ef28 <prvResetNextTaskUnblockTime+0x3c>)
 800ef16:	6013      	str	r3, [r2, #0]
}
 800ef18:	bf00      	nop
 800ef1a:	370c      	adds	r7, #12
 800ef1c:	46bd      	mov	sp, r7
 800ef1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef22:	4770      	bx	lr
 800ef24:	200011e4 	.word	0x200011e4
 800ef28:	2000124c 	.word	0x2000124c

0800ef2c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800ef2c:	b480      	push	{r7}
 800ef2e:	b083      	sub	sp, #12
 800ef30:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800ef32:	4b05      	ldr	r3, [pc, #20]	; (800ef48 <xTaskGetCurrentTaskHandle+0x1c>)
 800ef34:	681b      	ldr	r3, [r3, #0]
 800ef36:	607b      	str	r3, [r7, #4]

		return xReturn;
 800ef38:	687b      	ldr	r3, [r7, #4]
	}
 800ef3a:	4618      	mov	r0, r3
 800ef3c:	370c      	adds	r7, #12
 800ef3e:	46bd      	mov	sp, r7
 800ef40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef44:	4770      	bx	lr
 800ef46:	bf00      	nop
 800ef48:	20000d58 	.word	0x20000d58

0800ef4c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ef4c:	b480      	push	{r7}
 800ef4e:	b083      	sub	sp, #12
 800ef50:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ef52:	4b0b      	ldr	r3, [pc, #44]	; (800ef80 <xTaskGetSchedulerState+0x34>)
 800ef54:	681b      	ldr	r3, [r3, #0]
 800ef56:	2b00      	cmp	r3, #0
 800ef58:	d102      	bne.n	800ef60 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ef5a:	2301      	movs	r3, #1
 800ef5c:	607b      	str	r3, [r7, #4]
 800ef5e:	e008      	b.n	800ef72 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ef60:	4b08      	ldr	r3, [pc, #32]	; (800ef84 <xTaskGetSchedulerState+0x38>)
 800ef62:	681b      	ldr	r3, [r3, #0]
 800ef64:	2b00      	cmp	r3, #0
 800ef66:	d102      	bne.n	800ef6e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ef68:	2302      	movs	r3, #2
 800ef6a:	607b      	str	r3, [r7, #4]
 800ef6c:	e001      	b.n	800ef72 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ef6e:	2300      	movs	r3, #0
 800ef70:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ef72:	687b      	ldr	r3, [r7, #4]
	}
 800ef74:	4618      	mov	r0, r3
 800ef76:	370c      	adds	r7, #12
 800ef78:	46bd      	mov	sp, r7
 800ef7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef7e:	4770      	bx	lr
 800ef80:	20001238 	.word	0x20001238
 800ef84:	20001254 	.word	0x20001254

0800ef88 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800ef88:	b580      	push	{r7, lr}
 800ef8a:	b084      	sub	sp, #16
 800ef8c:	af00      	add	r7, sp, #0
 800ef8e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800ef94:	2300      	movs	r3, #0
 800ef96:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	2b00      	cmp	r3, #0
 800ef9c:	d051      	beq.n	800f042 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800ef9e:	68bb      	ldr	r3, [r7, #8]
 800efa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800efa2:	4b2a      	ldr	r3, [pc, #168]	; (800f04c <xTaskPriorityInherit+0xc4>)
 800efa4:	681b      	ldr	r3, [r3, #0]
 800efa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800efa8:	429a      	cmp	r2, r3
 800efaa:	d241      	bcs.n	800f030 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800efac:	68bb      	ldr	r3, [r7, #8]
 800efae:	699b      	ldr	r3, [r3, #24]
 800efb0:	2b00      	cmp	r3, #0
 800efb2:	db06      	blt.n	800efc2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800efb4:	4b25      	ldr	r3, [pc, #148]	; (800f04c <xTaskPriorityInherit+0xc4>)
 800efb6:	681b      	ldr	r3, [r3, #0]
 800efb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800efba:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800efbe:	68bb      	ldr	r3, [r7, #8]
 800efc0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800efc2:	68bb      	ldr	r3, [r7, #8]
 800efc4:	6959      	ldr	r1, [r3, #20]
 800efc6:	68bb      	ldr	r3, [r7, #8]
 800efc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800efca:	4613      	mov	r3, r2
 800efcc:	009b      	lsls	r3, r3, #2
 800efce:	4413      	add	r3, r2
 800efd0:	009b      	lsls	r3, r3, #2
 800efd2:	4a1f      	ldr	r2, [pc, #124]	; (800f050 <xTaskPriorityInherit+0xc8>)
 800efd4:	4413      	add	r3, r2
 800efd6:	4299      	cmp	r1, r3
 800efd8:	d122      	bne.n	800f020 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800efda:	68bb      	ldr	r3, [r7, #8]
 800efdc:	3304      	adds	r3, #4
 800efde:	4618      	mov	r0, r3
 800efe0:	f7fe f838 	bl	800d054 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800efe4:	4b19      	ldr	r3, [pc, #100]	; (800f04c <xTaskPriorityInherit+0xc4>)
 800efe6:	681b      	ldr	r3, [r3, #0]
 800efe8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800efea:	68bb      	ldr	r3, [r7, #8]
 800efec:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800efee:	68bb      	ldr	r3, [r7, #8]
 800eff0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eff2:	4b18      	ldr	r3, [pc, #96]	; (800f054 <xTaskPriorityInherit+0xcc>)
 800eff4:	681b      	ldr	r3, [r3, #0]
 800eff6:	429a      	cmp	r2, r3
 800eff8:	d903      	bls.n	800f002 <xTaskPriorityInherit+0x7a>
 800effa:	68bb      	ldr	r3, [r7, #8]
 800effc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800effe:	4a15      	ldr	r2, [pc, #84]	; (800f054 <xTaskPriorityInherit+0xcc>)
 800f000:	6013      	str	r3, [r2, #0]
 800f002:	68bb      	ldr	r3, [r7, #8]
 800f004:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f006:	4613      	mov	r3, r2
 800f008:	009b      	lsls	r3, r3, #2
 800f00a:	4413      	add	r3, r2
 800f00c:	009b      	lsls	r3, r3, #2
 800f00e:	4a10      	ldr	r2, [pc, #64]	; (800f050 <xTaskPriorityInherit+0xc8>)
 800f010:	441a      	add	r2, r3
 800f012:	68bb      	ldr	r3, [r7, #8]
 800f014:	3304      	adds	r3, #4
 800f016:	4619      	mov	r1, r3
 800f018:	4610      	mov	r0, r2
 800f01a:	f7fd ffbe 	bl	800cf9a <vListInsertEnd>
 800f01e:	e004      	b.n	800f02a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800f020:	4b0a      	ldr	r3, [pc, #40]	; (800f04c <xTaskPriorityInherit+0xc4>)
 800f022:	681b      	ldr	r3, [r3, #0]
 800f024:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f026:	68bb      	ldr	r3, [r7, #8]
 800f028:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800f02a:	2301      	movs	r3, #1
 800f02c:	60fb      	str	r3, [r7, #12]
 800f02e:	e008      	b.n	800f042 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800f030:	68bb      	ldr	r3, [r7, #8]
 800f032:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f034:	4b05      	ldr	r3, [pc, #20]	; (800f04c <xTaskPriorityInherit+0xc4>)
 800f036:	681b      	ldr	r3, [r3, #0]
 800f038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f03a:	429a      	cmp	r2, r3
 800f03c:	d201      	bcs.n	800f042 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800f03e:	2301      	movs	r3, #1
 800f040:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f042:	68fb      	ldr	r3, [r7, #12]
	}
 800f044:	4618      	mov	r0, r3
 800f046:	3710      	adds	r7, #16
 800f048:	46bd      	mov	sp, r7
 800f04a:	bd80      	pop	{r7, pc}
 800f04c:	20000d58 	.word	0x20000d58
 800f050:	20000d5c 	.word	0x20000d5c
 800f054:	20001234 	.word	0x20001234

0800f058 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800f058:	b580      	push	{r7, lr}
 800f05a:	b086      	sub	sp, #24
 800f05c:	af00      	add	r7, sp, #0
 800f05e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800f064:	2300      	movs	r3, #0
 800f066:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	2b00      	cmp	r3, #0
 800f06c:	d056      	beq.n	800f11c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800f06e:	4b2e      	ldr	r3, [pc, #184]	; (800f128 <xTaskPriorityDisinherit+0xd0>)
 800f070:	681b      	ldr	r3, [r3, #0]
 800f072:	693a      	ldr	r2, [r7, #16]
 800f074:	429a      	cmp	r2, r3
 800f076:	d00a      	beq.n	800f08e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800f078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f07c:	f383 8811 	msr	BASEPRI, r3
 800f080:	f3bf 8f6f 	isb	sy
 800f084:	f3bf 8f4f 	dsb	sy
 800f088:	60fb      	str	r3, [r7, #12]
}
 800f08a:	bf00      	nop
 800f08c:	e7fe      	b.n	800f08c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800f08e:	693b      	ldr	r3, [r7, #16]
 800f090:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f092:	2b00      	cmp	r3, #0
 800f094:	d10a      	bne.n	800f0ac <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800f096:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f09a:	f383 8811 	msr	BASEPRI, r3
 800f09e:	f3bf 8f6f 	isb	sy
 800f0a2:	f3bf 8f4f 	dsb	sy
 800f0a6:	60bb      	str	r3, [r7, #8]
}
 800f0a8:	bf00      	nop
 800f0aa:	e7fe      	b.n	800f0aa <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800f0ac:	693b      	ldr	r3, [r7, #16]
 800f0ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f0b0:	1e5a      	subs	r2, r3, #1
 800f0b2:	693b      	ldr	r3, [r7, #16]
 800f0b4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800f0b6:	693b      	ldr	r3, [r7, #16]
 800f0b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f0ba:	693b      	ldr	r3, [r7, #16]
 800f0bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f0be:	429a      	cmp	r2, r3
 800f0c0:	d02c      	beq.n	800f11c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800f0c2:	693b      	ldr	r3, [r7, #16]
 800f0c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f0c6:	2b00      	cmp	r3, #0
 800f0c8:	d128      	bne.n	800f11c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f0ca:	693b      	ldr	r3, [r7, #16]
 800f0cc:	3304      	adds	r3, #4
 800f0ce:	4618      	mov	r0, r3
 800f0d0:	f7fd ffc0 	bl	800d054 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800f0d4:	693b      	ldr	r3, [r7, #16]
 800f0d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f0d8:	693b      	ldr	r3, [r7, #16]
 800f0da:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f0dc:	693b      	ldr	r3, [r7, #16]
 800f0de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f0e0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800f0e4:	693b      	ldr	r3, [r7, #16]
 800f0e6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800f0e8:	693b      	ldr	r3, [r7, #16]
 800f0ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f0ec:	4b0f      	ldr	r3, [pc, #60]	; (800f12c <xTaskPriorityDisinherit+0xd4>)
 800f0ee:	681b      	ldr	r3, [r3, #0]
 800f0f0:	429a      	cmp	r2, r3
 800f0f2:	d903      	bls.n	800f0fc <xTaskPriorityDisinherit+0xa4>
 800f0f4:	693b      	ldr	r3, [r7, #16]
 800f0f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f0f8:	4a0c      	ldr	r2, [pc, #48]	; (800f12c <xTaskPriorityDisinherit+0xd4>)
 800f0fa:	6013      	str	r3, [r2, #0]
 800f0fc:	693b      	ldr	r3, [r7, #16]
 800f0fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f100:	4613      	mov	r3, r2
 800f102:	009b      	lsls	r3, r3, #2
 800f104:	4413      	add	r3, r2
 800f106:	009b      	lsls	r3, r3, #2
 800f108:	4a09      	ldr	r2, [pc, #36]	; (800f130 <xTaskPriorityDisinherit+0xd8>)
 800f10a:	441a      	add	r2, r3
 800f10c:	693b      	ldr	r3, [r7, #16]
 800f10e:	3304      	adds	r3, #4
 800f110:	4619      	mov	r1, r3
 800f112:	4610      	mov	r0, r2
 800f114:	f7fd ff41 	bl	800cf9a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800f118:	2301      	movs	r3, #1
 800f11a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f11c:	697b      	ldr	r3, [r7, #20]
	}
 800f11e:	4618      	mov	r0, r3
 800f120:	3718      	adds	r7, #24
 800f122:	46bd      	mov	sp, r7
 800f124:	bd80      	pop	{r7, pc}
 800f126:	bf00      	nop
 800f128:	20000d58 	.word	0x20000d58
 800f12c:	20001234 	.word	0x20001234
 800f130:	20000d5c 	.word	0x20000d5c

0800f134 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800f134:	b580      	push	{r7, lr}
 800f136:	b088      	sub	sp, #32
 800f138:	af00      	add	r7, sp, #0
 800f13a:	6078      	str	r0, [r7, #4]
 800f13c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800f142:	2301      	movs	r3, #1
 800f144:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	2b00      	cmp	r3, #0
 800f14a:	d06a      	beq.n	800f222 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800f14c:	69bb      	ldr	r3, [r7, #24]
 800f14e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f150:	2b00      	cmp	r3, #0
 800f152:	d10a      	bne.n	800f16a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800f154:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f158:	f383 8811 	msr	BASEPRI, r3
 800f15c:	f3bf 8f6f 	isb	sy
 800f160:	f3bf 8f4f 	dsb	sy
 800f164:	60fb      	str	r3, [r7, #12]
}
 800f166:	bf00      	nop
 800f168:	e7fe      	b.n	800f168 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800f16a:	69bb      	ldr	r3, [r7, #24]
 800f16c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f16e:	683a      	ldr	r2, [r7, #0]
 800f170:	429a      	cmp	r2, r3
 800f172:	d902      	bls.n	800f17a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800f174:	683b      	ldr	r3, [r7, #0]
 800f176:	61fb      	str	r3, [r7, #28]
 800f178:	e002      	b.n	800f180 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800f17a:	69bb      	ldr	r3, [r7, #24]
 800f17c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f17e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800f180:	69bb      	ldr	r3, [r7, #24]
 800f182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f184:	69fa      	ldr	r2, [r7, #28]
 800f186:	429a      	cmp	r2, r3
 800f188:	d04b      	beq.n	800f222 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800f18a:	69bb      	ldr	r3, [r7, #24]
 800f18c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f18e:	697a      	ldr	r2, [r7, #20]
 800f190:	429a      	cmp	r2, r3
 800f192:	d146      	bne.n	800f222 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800f194:	4b25      	ldr	r3, [pc, #148]	; (800f22c <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800f196:	681b      	ldr	r3, [r3, #0]
 800f198:	69ba      	ldr	r2, [r7, #24]
 800f19a:	429a      	cmp	r2, r3
 800f19c:	d10a      	bne.n	800f1b4 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800f19e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1a2:	f383 8811 	msr	BASEPRI, r3
 800f1a6:	f3bf 8f6f 	isb	sy
 800f1aa:	f3bf 8f4f 	dsb	sy
 800f1ae:	60bb      	str	r3, [r7, #8]
}
 800f1b0:	bf00      	nop
 800f1b2:	e7fe      	b.n	800f1b2 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800f1b4:	69bb      	ldr	r3, [r7, #24]
 800f1b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f1b8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800f1ba:	69bb      	ldr	r3, [r7, #24]
 800f1bc:	69fa      	ldr	r2, [r7, #28]
 800f1be:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800f1c0:	69bb      	ldr	r3, [r7, #24]
 800f1c2:	699b      	ldr	r3, [r3, #24]
 800f1c4:	2b00      	cmp	r3, #0
 800f1c6:	db04      	blt.n	800f1d2 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f1c8:	69fb      	ldr	r3, [r7, #28]
 800f1ca:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800f1ce:	69bb      	ldr	r3, [r7, #24]
 800f1d0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800f1d2:	69bb      	ldr	r3, [r7, #24]
 800f1d4:	6959      	ldr	r1, [r3, #20]
 800f1d6:	693a      	ldr	r2, [r7, #16]
 800f1d8:	4613      	mov	r3, r2
 800f1da:	009b      	lsls	r3, r3, #2
 800f1dc:	4413      	add	r3, r2
 800f1de:	009b      	lsls	r3, r3, #2
 800f1e0:	4a13      	ldr	r2, [pc, #76]	; (800f230 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800f1e2:	4413      	add	r3, r2
 800f1e4:	4299      	cmp	r1, r3
 800f1e6:	d11c      	bne.n	800f222 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f1e8:	69bb      	ldr	r3, [r7, #24]
 800f1ea:	3304      	adds	r3, #4
 800f1ec:	4618      	mov	r0, r3
 800f1ee:	f7fd ff31 	bl	800d054 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800f1f2:	69bb      	ldr	r3, [r7, #24]
 800f1f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f1f6:	4b0f      	ldr	r3, [pc, #60]	; (800f234 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800f1f8:	681b      	ldr	r3, [r3, #0]
 800f1fa:	429a      	cmp	r2, r3
 800f1fc:	d903      	bls.n	800f206 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800f1fe:	69bb      	ldr	r3, [r7, #24]
 800f200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f202:	4a0c      	ldr	r2, [pc, #48]	; (800f234 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800f204:	6013      	str	r3, [r2, #0]
 800f206:	69bb      	ldr	r3, [r7, #24]
 800f208:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f20a:	4613      	mov	r3, r2
 800f20c:	009b      	lsls	r3, r3, #2
 800f20e:	4413      	add	r3, r2
 800f210:	009b      	lsls	r3, r3, #2
 800f212:	4a07      	ldr	r2, [pc, #28]	; (800f230 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800f214:	441a      	add	r2, r3
 800f216:	69bb      	ldr	r3, [r7, #24]
 800f218:	3304      	adds	r3, #4
 800f21a:	4619      	mov	r1, r3
 800f21c:	4610      	mov	r0, r2
 800f21e:	f7fd febc 	bl	800cf9a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f222:	bf00      	nop
 800f224:	3720      	adds	r7, #32
 800f226:	46bd      	mov	sp, r7
 800f228:	bd80      	pop	{r7, pc}
 800f22a:	bf00      	nop
 800f22c:	20000d58 	.word	0x20000d58
 800f230:	20000d5c 	.word	0x20000d5c
 800f234:	20001234 	.word	0x20001234

0800f238 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 800f238:	b480      	push	{r7}
 800f23a:	b083      	sub	sp, #12
 800f23c:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800f23e:	4b09      	ldr	r3, [pc, #36]	; (800f264 <uxTaskResetEventItemValue+0x2c>)
 800f240:	681b      	ldr	r3, [r3, #0]
 800f242:	699b      	ldr	r3, [r3, #24]
 800f244:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f246:	4b07      	ldr	r3, [pc, #28]	; (800f264 <uxTaskResetEventItemValue+0x2c>)
 800f248:	681b      	ldr	r3, [r3, #0]
 800f24a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f24c:	4b05      	ldr	r3, [pc, #20]	; (800f264 <uxTaskResetEventItemValue+0x2c>)
 800f24e:	681b      	ldr	r3, [r3, #0]
 800f250:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 800f254:	619a      	str	r2, [r3, #24]

	return uxReturn;
 800f256:	687b      	ldr	r3, [r7, #4]
}
 800f258:	4618      	mov	r0, r3
 800f25a:	370c      	adds	r7, #12
 800f25c:	46bd      	mov	sp, r7
 800f25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f262:	4770      	bx	lr
 800f264:	20000d58 	.word	0x20000d58

0800f268 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800f268:	b480      	push	{r7}
 800f26a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800f26c:	4b07      	ldr	r3, [pc, #28]	; (800f28c <pvTaskIncrementMutexHeldCount+0x24>)
 800f26e:	681b      	ldr	r3, [r3, #0]
 800f270:	2b00      	cmp	r3, #0
 800f272:	d004      	beq.n	800f27e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800f274:	4b05      	ldr	r3, [pc, #20]	; (800f28c <pvTaskIncrementMutexHeldCount+0x24>)
 800f276:	681b      	ldr	r3, [r3, #0]
 800f278:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f27a:	3201      	adds	r2, #1
 800f27c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800f27e:	4b03      	ldr	r3, [pc, #12]	; (800f28c <pvTaskIncrementMutexHeldCount+0x24>)
 800f280:	681b      	ldr	r3, [r3, #0]
	}
 800f282:	4618      	mov	r0, r3
 800f284:	46bd      	mov	sp, r7
 800f286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f28a:	4770      	bx	lr
 800f28c:	20000d58 	.word	0x20000d58

0800f290 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800f290:	b580      	push	{r7, lr}
 800f292:	b084      	sub	sp, #16
 800f294:	af00      	add	r7, sp, #0
 800f296:	6078      	str	r0, [r7, #4]
 800f298:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800f29a:	4b21      	ldr	r3, [pc, #132]	; (800f320 <prvAddCurrentTaskToDelayedList+0x90>)
 800f29c:	681b      	ldr	r3, [r3, #0]
 800f29e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f2a0:	4b20      	ldr	r3, [pc, #128]	; (800f324 <prvAddCurrentTaskToDelayedList+0x94>)
 800f2a2:	681b      	ldr	r3, [r3, #0]
 800f2a4:	3304      	adds	r3, #4
 800f2a6:	4618      	mov	r0, r3
 800f2a8:	f7fd fed4 	bl	800d054 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f2b2:	d10a      	bne.n	800f2ca <prvAddCurrentTaskToDelayedList+0x3a>
 800f2b4:	683b      	ldr	r3, [r7, #0]
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	d007      	beq.n	800f2ca <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f2ba:	4b1a      	ldr	r3, [pc, #104]	; (800f324 <prvAddCurrentTaskToDelayedList+0x94>)
 800f2bc:	681b      	ldr	r3, [r3, #0]
 800f2be:	3304      	adds	r3, #4
 800f2c0:	4619      	mov	r1, r3
 800f2c2:	4819      	ldr	r0, [pc, #100]	; (800f328 <prvAddCurrentTaskToDelayedList+0x98>)
 800f2c4:	f7fd fe69 	bl	800cf9a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800f2c8:	e026      	b.n	800f318 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800f2ca:	68fa      	ldr	r2, [r7, #12]
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	4413      	add	r3, r2
 800f2d0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800f2d2:	4b14      	ldr	r3, [pc, #80]	; (800f324 <prvAddCurrentTaskToDelayedList+0x94>)
 800f2d4:	681b      	ldr	r3, [r3, #0]
 800f2d6:	68ba      	ldr	r2, [r7, #8]
 800f2d8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800f2da:	68ba      	ldr	r2, [r7, #8]
 800f2dc:	68fb      	ldr	r3, [r7, #12]
 800f2de:	429a      	cmp	r2, r3
 800f2e0:	d209      	bcs.n	800f2f6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f2e2:	4b12      	ldr	r3, [pc, #72]	; (800f32c <prvAddCurrentTaskToDelayedList+0x9c>)
 800f2e4:	681a      	ldr	r2, [r3, #0]
 800f2e6:	4b0f      	ldr	r3, [pc, #60]	; (800f324 <prvAddCurrentTaskToDelayedList+0x94>)
 800f2e8:	681b      	ldr	r3, [r3, #0]
 800f2ea:	3304      	adds	r3, #4
 800f2ec:	4619      	mov	r1, r3
 800f2ee:	4610      	mov	r0, r2
 800f2f0:	f7fd fe77 	bl	800cfe2 <vListInsert>
}
 800f2f4:	e010      	b.n	800f318 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f2f6:	4b0e      	ldr	r3, [pc, #56]	; (800f330 <prvAddCurrentTaskToDelayedList+0xa0>)
 800f2f8:	681a      	ldr	r2, [r3, #0]
 800f2fa:	4b0a      	ldr	r3, [pc, #40]	; (800f324 <prvAddCurrentTaskToDelayedList+0x94>)
 800f2fc:	681b      	ldr	r3, [r3, #0]
 800f2fe:	3304      	adds	r3, #4
 800f300:	4619      	mov	r1, r3
 800f302:	4610      	mov	r0, r2
 800f304:	f7fd fe6d 	bl	800cfe2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800f308:	4b0a      	ldr	r3, [pc, #40]	; (800f334 <prvAddCurrentTaskToDelayedList+0xa4>)
 800f30a:	681b      	ldr	r3, [r3, #0]
 800f30c:	68ba      	ldr	r2, [r7, #8]
 800f30e:	429a      	cmp	r2, r3
 800f310:	d202      	bcs.n	800f318 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800f312:	4a08      	ldr	r2, [pc, #32]	; (800f334 <prvAddCurrentTaskToDelayedList+0xa4>)
 800f314:	68bb      	ldr	r3, [r7, #8]
 800f316:	6013      	str	r3, [r2, #0]
}
 800f318:	bf00      	nop
 800f31a:	3710      	adds	r7, #16
 800f31c:	46bd      	mov	sp, r7
 800f31e:	bd80      	pop	{r7, pc}
 800f320:	20001230 	.word	0x20001230
 800f324:	20000d58 	.word	0x20000d58
 800f328:	20001218 	.word	0x20001218
 800f32c:	200011e8 	.word	0x200011e8
 800f330:	200011e4 	.word	0x200011e4
 800f334:	2000124c 	.word	0x2000124c

0800f338 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800f338:	b580      	push	{r7, lr}
 800f33a:	b08a      	sub	sp, #40	; 0x28
 800f33c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800f33e:	2300      	movs	r3, #0
 800f340:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800f342:	f000 fb07 	bl	800f954 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800f346:	4b1c      	ldr	r3, [pc, #112]	; (800f3b8 <xTimerCreateTimerTask+0x80>)
 800f348:	681b      	ldr	r3, [r3, #0]
 800f34a:	2b00      	cmp	r3, #0
 800f34c:	d021      	beq.n	800f392 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800f34e:	2300      	movs	r3, #0
 800f350:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800f352:	2300      	movs	r3, #0
 800f354:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800f356:	1d3a      	adds	r2, r7, #4
 800f358:	f107 0108 	add.w	r1, r7, #8
 800f35c:	f107 030c 	add.w	r3, r7, #12
 800f360:	4618      	mov	r0, r3
 800f362:	f7fd fbe5 	bl	800cb30 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800f366:	6879      	ldr	r1, [r7, #4]
 800f368:	68bb      	ldr	r3, [r7, #8]
 800f36a:	68fa      	ldr	r2, [r7, #12]
 800f36c:	9202      	str	r2, [sp, #8]
 800f36e:	9301      	str	r3, [sp, #4]
 800f370:	2302      	movs	r3, #2
 800f372:	9300      	str	r3, [sp, #0]
 800f374:	2300      	movs	r3, #0
 800f376:	460a      	mov	r2, r1
 800f378:	4910      	ldr	r1, [pc, #64]	; (800f3bc <xTimerCreateTimerTask+0x84>)
 800f37a:	4811      	ldr	r0, [pc, #68]	; (800f3c0 <xTimerCreateTimerTask+0x88>)
 800f37c:	f7fe fe14 	bl	800dfa8 <xTaskCreateStatic>
 800f380:	4603      	mov	r3, r0
 800f382:	4a10      	ldr	r2, [pc, #64]	; (800f3c4 <xTimerCreateTimerTask+0x8c>)
 800f384:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800f386:	4b0f      	ldr	r3, [pc, #60]	; (800f3c4 <xTimerCreateTimerTask+0x8c>)
 800f388:	681b      	ldr	r3, [r3, #0]
 800f38a:	2b00      	cmp	r3, #0
 800f38c:	d001      	beq.n	800f392 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800f38e:	2301      	movs	r3, #1
 800f390:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800f392:	697b      	ldr	r3, [r7, #20]
 800f394:	2b00      	cmp	r3, #0
 800f396:	d10a      	bne.n	800f3ae <xTimerCreateTimerTask+0x76>
	__asm volatile
 800f398:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f39c:	f383 8811 	msr	BASEPRI, r3
 800f3a0:	f3bf 8f6f 	isb	sy
 800f3a4:	f3bf 8f4f 	dsb	sy
 800f3a8:	613b      	str	r3, [r7, #16]
}
 800f3aa:	bf00      	nop
 800f3ac:	e7fe      	b.n	800f3ac <xTimerCreateTimerTask+0x74>
	return xReturn;
 800f3ae:	697b      	ldr	r3, [r7, #20]
}
 800f3b0:	4618      	mov	r0, r3
 800f3b2:	3718      	adds	r7, #24
 800f3b4:	46bd      	mov	sp, r7
 800f3b6:	bd80      	pop	{r7, pc}
 800f3b8:	20001288 	.word	0x20001288
 800f3bc:	08014938 	.word	0x08014938
 800f3c0:	0800f4fd 	.word	0x0800f4fd
 800f3c4:	2000128c 	.word	0x2000128c

0800f3c8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800f3c8:	b580      	push	{r7, lr}
 800f3ca:	b08a      	sub	sp, #40	; 0x28
 800f3cc:	af00      	add	r7, sp, #0
 800f3ce:	60f8      	str	r0, [r7, #12]
 800f3d0:	60b9      	str	r1, [r7, #8]
 800f3d2:	607a      	str	r2, [r7, #4]
 800f3d4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800f3d6:	2300      	movs	r3, #0
 800f3d8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800f3da:	68fb      	ldr	r3, [r7, #12]
 800f3dc:	2b00      	cmp	r3, #0
 800f3de:	d10a      	bne.n	800f3f6 <xTimerGenericCommand+0x2e>
	__asm volatile
 800f3e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3e4:	f383 8811 	msr	BASEPRI, r3
 800f3e8:	f3bf 8f6f 	isb	sy
 800f3ec:	f3bf 8f4f 	dsb	sy
 800f3f0:	623b      	str	r3, [r7, #32]
}
 800f3f2:	bf00      	nop
 800f3f4:	e7fe      	b.n	800f3f4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800f3f6:	4b1a      	ldr	r3, [pc, #104]	; (800f460 <xTimerGenericCommand+0x98>)
 800f3f8:	681b      	ldr	r3, [r3, #0]
 800f3fa:	2b00      	cmp	r3, #0
 800f3fc:	d02a      	beq.n	800f454 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800f3fe:	68bb      	ldr	r3, [r7, #8]
 800f400:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800f406:	68fb      	ldr	r3, [r7, #12]
 800f408:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800f40a:	68bb      	ldr	r3, [r7, #8]
 800f40c:	2b05      	cmp	r3, #5
 800f40e:	dc18      	bgt.n	800f442 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800f410:	f7ff fd9c 	bl	800ef4c <xTaskGetSchedulerState>
 800f414:	4603      	mov	r3, r0
 800f416:	2b02      	cmp	r3, #2
 800f418:	d109      	bne.n	800f42e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800f41a:	4b11      	ldr	r3, [pc, #68]	; (800f460 <xTimerGenericCommand+0x98>)
 800f41c:	6818      	ldr	r0, [r3, #0]
 800f41e:	f107 0110 	add.w	r1, r7, #16
 800f422:	2300      	movs	r3, #0
 800f424:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f426:	f7fe f833 	bl	800d490 <xQueueGenericSend>
 800f42a:	6278      	str	r0, [r7, #36]	; 0x24
 800f42c:	e012      	b.n	800f454 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800f42e:	4b0c      	ldr	r3, [pc, #48]	; (800f460 <xTimerGenericCommand+0x98>)
 800f430:	6818      	ldr	r0, [r3, #0]
 800f432:	f107 0110 	add.w	r1, r7, #16
 800f436:	2300      	movs	r3, #0
 800f438:	2200      	movs	r2, #0
 800f43a:	f7fe f829 	bl	800d490 <xQueueGenericSend>
 800f43e:	6278      	str	r0, [r7, #36]	; 0x24
 800f440:	e008      	b.n	800f454 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800f442:	4b07      	ldr	r3, [pc, #28]	; (800f460 <xTimerGenericCommand+0x98>)
 800f444:	6818      	ldr	r0, [r3, #0]
 800f446:	f107 0110 	add.w	r1, r7, #16
 800f44a:	2300      	movs	r3, #0
 800f44c:	683a      	ldr	r2, [r7, #0]
 800f44e:	f7fe f91d 	bl	800d68c <xQueueGenericSendFromISR>
 800f452:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800f454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f456:	4618      	mov	r0, r3
 800f458:	3728      	adds	r7, #40	; 0x28
 800f45a:	46bd      	mov	sp, r7
 800f45c:	bd80      	pop	{r7, pc}
 800f45e:	bf00      	nop
 800f460:	20001288 	.word	0x20001288

0800f464 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800f464:	b580      	push	{r7, lr}
 800f466:	b088      	sub	sp, #32
 800f468:	af02      	add	r7, sp, #8
 800f46a:	6078      	str	r0, [r7, #4]
 800f46c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f46e:	4b22      	ldr	r3, [pc, #136]	; (800f4f8 <prvProcessExpiredTimer+0x94>)
 800f470:	681b      	ldr	r3, [r3, #0]
 800f472:	68db      	ldr	r3, [r3, #12]
 800f474:	68db      	ldr	r3, [r3, #12]
 800f476:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f478:	697b      	ldr	r3, [r7, #20]
 800f47a:	3304      	adds	r3, #4
 800f47c:	4618      	mov	r0, r3
 800f47e:	f7fd fde9 	bl	800d054 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f482:	697b      	ldr	r3, [r7, #20]
 800f484:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f488:	f003 0304 	and.w	r3, r3, #4
 800f48c:	2b00      	cmp	r3, #0
 800f48e:	d022      	beq.n	800f4d6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800f490:	697b      	ldr	r3, [r7, #20]
 800f492:	699a      	ldr	r2, [r3, #24]
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	18d1      	adds	r1, r2, r3
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	683a      	ldr	r2, [r7, #0]
 800f49c:	6978      	ldr	r0, [r7, #20]
 800f49e:	f000 f8d1 	bl	800f644 <prvInsertTimerInActiveList>
 800f4a2:	4603      	mov	r3, r0
 800f4a4:	2b00      	cmp	r3, #0
 800f4a6:	d01f      	beq.n	800f4e8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f4a8:	2300      	movs	r3, #0
 800f4aa:	9300      	str	r3, [sp, #0]
 800f4ac:	2300      	movs	r3, #0
 800f4ae:	687a      	ldr	r2, [r7, #4]
 800f4b0:	2100      	movs	r1, #0
 800f4b2:	6978      	ldr	r0, [r7, #20]
 800f4b4:	f7ff ff88 	bl	800f3c8 <xTimerGenericCommand>
 800f4b8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800f4ba:	693b      	ldr	r3, [r7, #16]
 800f4bc:	2b00      	cmp	r3, #0
 800f4be:	d113      	bne.n	800f4e8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800f4c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4c4:	f383 8811 	msr	BASEPRI, r3
 800f4c8:	f3bf 8f6f 	isb	sy
 800f4cc:	f3bf 8f4f 	dsb	sy
 800f4d0:	60fb      	str	r3, [r7, #12]
}
 800f4d2:	bf00      	nop
 800f4d4:	e7fe      	b.n	800f4d4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f4d6:	697b      	ldr	r3, [r7, #20]
 800f4d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f4dc:	f023 0301 	bic.w	r3, r3, #1
 800f4e0:	b2da      	uxtb	r2, r3
 800f4e2:	697b      	ldr	r3, [r7, #20]
 800f4e4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f4e8:	697b      	ldr	r3, [r7, #20]
 800f4ea:	6a1b      	ldr	r3, [r3, #32]
 800f4ec:	6978      	ldr	r0, [r7, #20]
 800f4ee:	4798      	blx	r3
}
 800f4f0:	bf00      	nop
 800f4f2:	3718      	adds	r7, #24
 800f4f4:	46bd      	mov	sp, r7
 800f4f6:	bd80      	pop	{r7, pc}
 800f4f8:	20001280 	.word	0x20001280

0800f4fc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800f4fc:	b580      	push	{r7, lr}
 800f4fe:	b084      	sub	sp, #16
 800f500:	af00      	add	r7, sp, #0
 800f502:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f504:	f107 0308 	add.w	r3, r7, #8
 800f508:	4618      	mov	r0, r3
 800f50a:	f000 f857 	bl	800f5bc <prvGetNextExpireTime>
 800f50e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800f510:	68bb      	ldr	r3, [r7, #8]
 800f512:	4619      	mov	r1, r3
 800f514:	68f8      	ldr	r0, [r7, #12]
 800f516:	f000 f803 	bl	800f520 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800f51a:	f000 f8d5 	bl	800f6c8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f51e:	e7f1      	b.n	800f504 <prvTimerTask+0x8>

0800f520 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800f520:	b580      	push	{r7, lr}
 800f522:	b084      	sub	sp, #16
 800f524:	af00      	add	r7, sp, #0
 800f526:	6078      	str	r0, [r7, #4]
 800f528:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800f52a:	f7ff f87f 	bl	800e62c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f52e:	f107 0308 	add.w	r3, r7, #8
 800f532:	4618      	mov	r0, r3
 800f534:	f000 f866 	bl	800f604 <prvSampleTimeNow>
 800f538:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800f53a:	68bb      	ldr	r3, [r7, #8]
 800f53c:	2b00      	cmp	r3, #0
 800f53e:	d130      	bne.n	800f5a2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800f540:	683b      	ldr	r3, [r7, #0]
 800f542:	2b00      	cmp	r3, #0
 800f544:	d10a      	bne.n	800f55c <prvProcessTimerOrBlockTask+0x3c>
 800f546:	687a      	ldr	r2, [r7, #4]
 800f548:	68fb      	ldr	r3, [r7, #12]
 800f54a:	429a      	cmp	r2, r3
 800f54c:	d806      	bhi.n	800f55c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800f54e:	f7ff f87b 	bl	800e648 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800f552:	68f9      	ldr	r1, [r7, #12]
 800f554:	6878      	ldr	r0, [r7, #4]
 800f556:	f7ff ff85 	bl	800f464 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800f55a:	e024      	b.n	800f5a6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800f55c:	683b      	ldr	r3, [r7, #0]
 800f55e:	2b00      	cmp	r3, #0
 800f560:	d008      	beq.n	800f574 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800f562:	4b13      	ldr	r3, [pc, #76]	; (800f5b0 <prvProcessTimerOrBlockTask+0x90>)
 800f564:	681b      	ldr	r3, [r3, #0]
 800f566:	681b      	ldr	r3, [r3, #0]
 800f568:	2b00      	cmp	r3, #0
 800f56a:	d101      	bne.n	800f570 <prvProcessTimerOrBlockTask+0x50>
 800f56c:	2301      	movs	r3, #1
 800f56e:	e000      	b.n	800f572 <prvProcessTimerOrBlockTask+0x52>
 800f570:	2300      	movs	r3, #0
 800f572:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800f574:	4b0f      	ldr	r3, [pc, #60]	; (800f5b4 <prvProcessTimerOrBlockTask+0x94>)
 800f576:	6818      	ldr	r0, [r3, #0]
 800f578:	687a      	ldr	r2, [r7, #4]
 800f57a:	68fb      	ldr	r3, [r7, #12]
 800f57c:	1ad3      	subs	r3, r2, r3
 800f57e:	683a      	ldr	r2, [r7, #0]
 800f580:	4619      	mov	r1, r3
 800f582:	f7fe fcdd 	bl	800df40 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800f586:	f7ff f85f 	bl	800e648 <xTaskResumeAll>
 800f58a:	4603      	mov	r3, r0
 800f58c:	2b00      	cmp	r3, #0
 800f58e:	d10a      	bne.n	800f5a6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800f590:	4b09      	ldr	r3, [pc, #36]	; (800f5b8 <prvProcessTimerOrBlockTask+0x98>)
 800f592:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f596:	601a      	str	r2, [r3, #0]
 800f598:	f3bf 8f4f 	dsb	sy
 800f59c:	f3bf 8f6f 	isb	sy
}
 800f5a0:	e001      	b.n	800f5a6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800f5a2:	f7ff f851 	bl	800e648 <xTaskResumeAll>
}
 800f5a6:	bf00      	nop
 800f5a8:	3710      	adds	r7, #16
 800f5aa:	46bd      	mov	sp, r7
 800f5ac:	bd80      	pop	{r7, pc}
 800f5ae:	bf00      	nop
 800f5b0:	20001284 	.word	0x20001284
 800f5b4:	20001288 	.word	0x20001288
 800f5b8:	e000ed04 	.word	0xe000ed04

0800f5bc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800f5bc:	b480      	push	{r7}
 800f5be:	b085      	sub	sp, #20
 800f5c0:	af00      	add	r7, sp, #0
 800f5c2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800f5c4:	4b0e      	ldr	r3, [pc, #56]	; (800f600 <prvGetNextExpireTime+0x44>)
 800f5c6:	681b      	ldr	r3, [r3, #0]
 800f5c8:	681b      	ldr	r3, [r3, #0]
 800f5ca:	2b00      	cmp	r3, #0
 800f5cc:	d101      	bne.n	800f5d2 <prvGetNextExpireTime+0x16>
 800f5ce:	2201      	movs	r2, #1
 800f5d0:	e000      	b.n	800f5d4 <prvGetNextExpireTime+0x18>
 800f5d2:	2200      	movs	r2, #0
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	681b      	ldr	r3, [r3, #0]
 800f5dc:	2b00      	cmp	r3, #0
 800f5de:	d105      	bne.n	800f5ec <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f5e0:	4b07      	ldr	r3, [pc, #28]	; (800f600 <prvGetNextExpireTime+0x44>)
 800f5e2:	681b      	ldr	r3, [r3, #0]
 800f5e4:	68db      	ldr	r3, [r3, #12]
 800f5e6:	681b      	ldr	r3, [r3, #0]
 800f5e8:	60fb      	str	r3, [r7, #12]
 800f5ea:	e001      	b.n	800f5f0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800f5ec:	2300      	movs	r3, #0
 800f5ee:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800f5f0:	68fb      	ldr	r3, [r7, #12]
}
 800f5f2:	4618      	mov	r0, r3
 800f5f4:	3714      	adds	r7, #20
 800f5f6:	46bd      	mov	sp, r7
 800f5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5fc:	4770      	bx	lr
 800f5fe:	bf00      	nop
 800f600:	20001280 	.word	0x20001280

0800f604 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800f604:	b580      	push	{r7, lr}
 800f606:	b084      	sub	sp, #16
 800f608:	af00      	add	r7, sp, #0
 800f60a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800f60c:	f7ff f8ba 	bl	800e784 <xTaskGetTickCount>
 800f610:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800f612:	4b0b      	ldr	r3, [pc, #44]	; (800f640 <prvSampleTimeNow+0x3c>)
 800f614:	681b      	ldr	r3, [r3, #0]
 800f616:	68fa      	ldr	r2, [r7, #12]
 800f618:	429a      	cmp	r2, r3
 800f61a:	d205      	bcs.n	800f628 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800f61c:	f000 f936 	bl	800f88c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	2201      	movs	r2, #1
 800f624:	601a      	str	r2, [r3, #0]
 800f626:	e002      	b.n	800f62e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	2200      	movs	r2, #0
 800f62c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800f62e:	4a04      	ldr	r2, [pc, #16]	; (800f640 <prvSampleTimeNow+0x3c>)
 800f630:	68fb      	ldr	r3, [r7, #12]
 800f632:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800f634:	68fb      	ldr	r3, [r7, #12]
}
 800f636:	4618      	mov	r0, r3
 800f638:	3710      	adds	r7, #16
 800f63a:	46bd      	mov	sp, r7
 800f63c:	bd80      	pop	{r7, pc}
 800f63e:	bf00      	nop
 800f640:	20001290 	.word	0x20001290

0800f644 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800f644:	b580      	push	{r7, lr}
 800f646:	b086      	sub	sp, #24
 800f648:	af00      	add	r7, sp, #0
 800f64a:	60f8      	str	r0, [r7, #12]
 800f64c:	60b9      	str	r1, [r7, #8]
 800f64e:	607a      	str	r2, [r7, #4]
 800f650:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800f652:	2300      	movs	r3, #0
 800f654:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800f656:	68fb      	ldr	r3, [r7, #12]
 800f658:	68ba      	ldr	r2, [r7, #8]
 800f65a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f65c:	68fb      	ldr	r3, [r7, #12]
 800f65e:	68fa      	ldr	r2, [r7, #12]
 800f660:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800f662:	68ba      	ldr	r2, [r7, #8]
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	429a      	cmp	r2, r3
 800f668:	d812      	bhi.n	800f690 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f66a:	687a      	ldr	r2, [r7, #4]
 800f66c:	683b      	ldr	r3, [r7, #0]
 800f66e:	1ad2      	subs	r2, r2, r3
 800f670:	68fb      	ldr	r3, [r7, #12]
 800f672:	699b      	ldr	r3, [r3, #24]
 800f674:	429a      	cmp	r2, r3
 800f676:	d302      	bcc.n	800f67e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800f678:	2301      	movs	r3, #1
 800f67a:	617b      	str	r3, [r7, #20]
 800f67c:	e01b      	b.n	800f6b6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800f67e:	4b10      	ldr	r3, [pc, #64]	; (800f6c0 <prvInsertTimerInActiveList+0x7c>)
 800f680:	681a      	ldr	r2, [r3, #0]
 800f682:	68fb      	ldr	r3, [r7, #12]
 800f684:	3304      	adds	r3, #4
 800f686:	4619      	mov	r1, r3
 800f688:	4610      	mov	r0, r2
 800f68a:	f7fd fcaa 	bl	800cfe2 <vListInsert>
 800f68e:	e012      	b.n	800f6b6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800f690:	687a      	ldr	r2, [r7, #4]
 800f692:	683b      	ldr	r3, [r7, #0]
 800f694:	429a      	cmp	r2, r3
 800f696:	d206      	bcs.n	800f6a6 <prvInsertTimerInActiveList+0x62>
 800f698:	68ba      	ldr	r2, [r7, #8]
 800f69a:	683b      	ldr	r3, [r7, #0]
 800f69c:	429a      	cmp	r2, r3
 800f69e:	d302      	bcc.n	800f6a6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800f6a0:	2301      	movs	r3, #1
 800f6a2:	617b      	str	r3, [r7, #20]
 800f6a4:	e007      	b.n	800f6b6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f6a6:	4b07      	ldr	r3, [pc, #28]	; (800f6c4 <prvInsertTimerInActiveList+0x80>)
 800f6a8:	681a      	ldr	r2, [r3, #0]
 800f6aa:	68fb      	ldr	r3, [r7, #12]
 800f6ac:	3304      	adds	r3, #4
 800f6ae:	4619      	mov	r1, r3
 800f6b0:	4610      	mov	r0, r2
 800f6b2:	f7fd fc96 	bl	800cfe2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800f6b6:	697b      	ldr	r3, [r7, #20]
}
 800f6b8:	4618      	mov	r0, r3
 800f6ba:	3718      	adds	r7, #24
 800f6bc:	46bd      	mov	sp, r7
 800f6be:	bd80      	pop	{r7, pc}
 800f6c0:	20001284 	.word	0x20001284
 800f6c4:	20001280 	.word	0x20001280

0800f6c8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800f6c8:	b580      	push	{r7, lr}
 800f6ca:	b08e      	sub	sp, #56	; 0x38
 800f6cc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f6ce:	e0ca      	b.n	800f866 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	2b00      	cmp	r3, #0
 800f6d4:	da18      	bge.n	800f708 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800f6d6:	1d3b      	adds	r3, r7, #4
 800f6d8:	3304      	adds	r3, #4
 800f6da:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800f6dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6de:	2b00      	cmp	r3, #0
 800f6e0:	d10a      	bne.n	800f6f8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800f6e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6e6:	f383 8811 	msr	BASEPRI, r3
 800f6ea:	f3bf 8f6f 	isb	sy
 800f6ee:	f3bf 8f4f 	dsb	sy
 800f6f2:	61fb      	str	r3, [r7, #28]
}
 800f6f4:	bf00      	nop
 800f6f6:	e7fe      	b.n	800f6f6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800f6f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6fa:	681b      	ldr	r3, [r3, #0]
 800f6fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f6fe:	6850      	ldr	r0, [r2, #4]
 800f700:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f702:	6892      	ldr	r2, [r2, #8]
 800f704:	4611      	mov	r1, r2
 800f706:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	2b00      	cmp	r3, #0
 800f70c:	f2c0 80ab 	blt.w	800f866 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800f710:	68fb      	ldr	r3, [r7, #12]
 800f712:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800f714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f716:	695b      	ldr	r3, [r3, #20]
 800f718:	2b00      	cmp	r3, #0
 800f71a:	d004      	beq.n	800f726 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f71c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f71e:	3304      	adds	r3, #4
 800f720:	4618      	mov	r0, r3
 800f722:	f7fd fc97 	bl	800d054 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f726:	463b      	mov	r3, r7
 800f728:	4618      	mov	r0, r3
 800f72a:	f7ff ff6b 	bl	800f604 <prvSampleTimeNow>
 800f72e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	2b09      	cmp	r3, #9
 800f734:	f200 8096 	bhi.w	800f864 <prvProcessReceivedCommands+0x19c>
 800f738:	a201      	add	r2, pc, #4	; (adr r2, 800f740 <prvProcessReceivedCommands+0x78>)
 800f73a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f73e:	bf00      	nop
 800f740:	0800f769 	.word	0x0800f769
 800f744:	0800f769 	.word	0x0800f769
 800f748:	0800f769 	.word	0x0800f769
 800f74c:	0800f7dd 	.word	0x0800f7dd
 800f750:	0800f7f1 	.word	0x0800f7f1
 800f754:	0800f83b 	.word	0x0800f83b
 800f758:	0800f769 	.word	0x0800f769
 800f75c:	0800f769 	.word	0x0800f769
 800f760:	0800f7dd 	.word	0x0800f7dd
 800f764:	0800f7f1 	.word	0x0800f7f1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f76a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f76e:	f043 0301 	orr.w	r3, r3, #1
 800f772:	b2da      	uxtb	r2, r3
 800f774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f776:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800f77a:	68ba      	ldr	r2, [r7, #8]
 800f77c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f77e:	699b      	ldr	r3, [r3, #24]
 800f780:	18d1      	adds	r1, r2, r3
 800f782:	68bb      	ldr	r3, [r7, #8]
 800f784:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f786:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f788:	f7ff ff5c 	bl	800f644 <prvInsertTimerInActiveList>
 800f78c:	4603      	mov	r3, r0
 800f78e:	2b00      	cmp	r3, #0
 800f790:	d069      	beq.n	800f866 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f794:	6a1b      	ldr	r3, [r3, #32]
 800f796:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f798:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f79a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f79c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f7a0:	f003 0304 	and.w	r3, r3, #4
 800f7a4:	2b00      	cmp	r3, #0
 800f7a6:	d05e      	beq.n	800f866 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800f7a8:	68ba      	ldr	r2, [r7, #8]
 800f7aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7ac:	699b      	ldr	r3, [r3, #24]
 800f7ae:	441a      	add	r2, r3
 800f7b0:	2300      	movs	r3, #0
 800f7b2:	9300      	str	r3, [sp, #0]
 800f7b4:	2300      	movs	r3, #0
 800f7b6:	2100      	movs	r1, #0
 800f7b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f7ba:	f7ff fe05 	bl	800f3c8 <xTimerGenericCommand>
 800f7be:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800f7c0:	6a3b      	ldr	r3, [r7, #32]
 800f7c2:	2b00      	cmp	r3, #0
 800f7c4:	d14f      	bne.n	800f866 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800f7c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7ca:	f383 8811 	msr	BASEPRI, r3
 800f7ce:	f3bf 8f6f 	isb	sy
 800f7d2:	f3bf 8f4f 	dsb	sy
 800f7d6:	61bb      	str	r3, [r7, #24]
}
 800f7d8:	bf00      	nop
 800f7da:	e7fe      	b.n	800f7da <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f7dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f7e2:	f023 0301 	bic.w	r3, r3, #1
 800f7e6:	b2da      	uxtb	r2, r3
 800f7e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800f7ee:	e03a      	b.n	800f866 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f7f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f7f6:	f043 0301 	orr.w	r3, r3, #1
 800f7fa:	b2da      	uxtb	r2, r3
 800f7fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800f802:	68ba      	ldr	r2, [r7, #8]
 800f804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f806:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800f808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f80a:	699b      	ldr	r3, [r3, #24]
 800f80c:	2b00      	cmp	r3, #0
 800f80e:	d10a      	bne.n	800f826 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800f810:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f814:	f383 8811 	msr	BASEPRI, r3
 800f818:	f3bf 8f6f 	isb	sy
 800f81c:	f3bf 8f4f 	dsb	sy
 800f820:	617b      	str	r3, [r7, #20]
}
 800f822:	bf00      	nop
 800f824:	e7fe      	b.n	800f824 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800f826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f828:	699a      	ldr	r2, [r3, #24]
 800f82a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f82c:	18d1      	adds	r1, r2, r3
 800f82e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f830:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f832:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f834:	f7ff ff06 	bl	800f644 <prvInsertTimerInActiveList>
					break;
 800f838:	e015      	b.n	800f866 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800f83a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f83c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f840:	f003 0302 	and.w	r3, r3, #2
 800f844:	2b00      	cmp	r3, #0
 800f846:	d103      	bne.n	800f850 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800f848:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f84a:	f000 fc01 	bl	8010050 <vPortFree>
 800f84e:	e00a      	b.n	800f866 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f852:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f856:	f023 0301 	bic.w	r3, r3, #1
 800f85a:	b2da      	uxtb	r2, r3
 800f85c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f85e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800f862:	e000      	b.n	800f866 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800f864:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f866:	4b08      	ldr	r3, [pc, #32]	; (800f888 <prvProcessReceivedCommands+0x1c0>)
 800f868:	681b      	ldr	r3, [r3, #0]
 800f86a:	1d39      	adds	r1, r7, #4
 800f86c:	2200      	movs	r2, #0
 800f86e:	4618      	mov	r0, r3
 800f870:	f7fd ffa8 	bl	800d7c4 <xQueueReceive>
 800f874:	4603      	mov	r3, r0
 800f876:	2b00      	cmp	r3, #0
 800f878:	f47f af2a 	bne.w	800f6d0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800f87c:	bf00      	nop
 800f87e:	bf00      	nop
 800f880:	3730      	adds	r7, #48	; 0x30
 800f882:	46bd      	mov	sp, r7
 800f884:	bd80      	pop	{r7, pc}
 800f886:	bf00      	nop
 800f888:	20001288 	.word	0x20001288

0800f88c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800f88c:	b580      	push	{r7, lr}
 800f88e:	b088      	sub	sp, #32
 800f890:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f892:	e048      	b.n	800f926 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f894:	4b2d      	ldr	r3, [pc, #180]	; (800f94c <prvSwitchTimerLists+0xc0>)
 800f896:	681b      	ldr	r3, [r3, #0]
 800f898:	68db      	ldr	r3, [r3, #12]
 800f89a:	681b      	ldr	r3, [r3, #0]
 800f89c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f89e:	4b2b      	ldr	r3, [pc, #172]	; (800f94c <prvSwitchTimerLists+0xc0>)
 800f8a0:	681b      	ldr	r3, [r3, #0]
 800f8a2:	68db      	ldr	r3, [r3, #12]
 800f8a4:	68db      	ldr	r3, [r3, #12]
 800f8a6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f8a8:	68fb      	ldr	r3, [r7, #12]
 800f8aa:	3304      	adds	r3, #4
 800f8ac:	4618      	mov	r0, r3
 800f8ae:	f7fd fbd1 	bl	800d054 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f8b2:	68fb      	ldr	r3, [r7, #12]
 800f8b4:	6a1b      	ldr	r3, [r3, #32]
 800f8b6:	68f8      	ldr	r0, [r7, #12]
 800f8b8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f8ba:	68fb      	ldr	r3, [r7, #12]
 800f8bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f8c0:	f003 0304 	and.w	r3, r3, #4
 800f8c4:	2b00      	cmp	r3, #0
 800f8c6:	d02e      	beq.n	800f926 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800f8c8:	68fb      	ldr	r3, [r7, #12]
 800f8ca:	699b      	ldr	r3, [r3, #24]
 800f8cc:	693a      	ldr	r2, [r7, #16]
 800f8ce:	4413      	add	r3, r2
 800f8d0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800f8d2:	68ba      	ldr	r2, [r7, #8]
 800f8d4:	693b      	ldr	r3, [r7, #16]
 800f8d6:	429a      	cmp	r2, r3
 800f8d8:	d90e      	bls.n	800f8f8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800f8da:	68fb      	ldr	r3, [r7, #12]
 800f8dc:	68ba      	ldr	r2, [r7, #8]
 800f8de:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f8e0:	68fb      	ldr	r3, [r7, #12]
 800f8e2:	68fa      	ldr	r2, [r7, #12]
 800f8e4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f8e6:	4b19      	ldr	r3, [pc, #100]	; (800f94c <prvSwitchTimerLists+0xc0>)
 800f8e8:	681a      	ldr	r2, [r3, #0]
 800f8ea:	68fb      	ldr	r3, [r7, #12]
 800f8ec:	3304      	adds	r3, #4
 800f8ee:	4619      	mov	r1, r3
 800f8f0:	4610      	mov	r0, r2
 800f8f2:	f7fd fb76 	bl	800cfe2 <vListInsert>
 800f8f6:	e016      	b.n	800f926 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f8f8:	2300      	movs	r3, #0
 800f8fa:	9300      	str	r3, [sp, #0]
 800f8fc:	2300      	movs	r3, #0
 800f8fe:	693a      	ldr	r2, [r7, #16]
 800f900:	2100      	movs	r1, #0
 800f902:	68f8      	ldr	r0, [r7, #12]
 800f904:	f7ff fd60 	bl	800f3c8 <xTimerGenericCommand>
 800f908:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	2b00      	cmp	r3, #0
 800f90e:	d10a      	bne.n	800f926 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800f910:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f914:	f383 8811 	msr	BASEPRI, r3
 800f918:	f3bf 8f6f 	isb	sy
 800f91c:	f3bf 8f4f 	dsb	sy
 800f920:	603b      	str	r3, [r7, #0]
}
 800f922:	bf00      	nop
 800f924:	e7fe      	b.n	800f924 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f926:	4b09      	ldr	r3, [pc, #36]	; (800f94c <prvSwitchTimerLists+0xc0>)
 800f928:	681b      	ldr	r3, [r3, #0]
 800f92a:	681b      	ldr	r3, [r3, #0]
 800f92c:	2b00      	cmp	r3, #0
 800f92e:	d1b1      	bne.n	800f894 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800f930:	4b06      	ldr	r3, [pc, #24]	; (800f94c <prvSwitchTimerLists+0xc0>)
 800f932:	681b      	ldr	r3, [r3, #0]
 800f934:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800f936:	4b06      	ldr	r3, [pc, #24]	; (800f950 <prvSwitchTimerLists+0xc4>)
 800f938:	681b      	ldr	r3, [r3, #0]
 800f93a:	4a04      	ldr	r2, [pc, #16]	; (800f94c <prvSwitchTimerLists+0xc0>)
 800f93c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800f93e:	4a04      	ldr	r2, [pc, #16]	; (800f950 <prvSwitchTimerLists+0xc4>)
 800f940:	697b      	ldr	r3, [r7, #20]
 800f942:	6013      	str	r3, [r2, #0]
}
 800f944:	bf00      	nop
 800f946:	3718      	adds	r7, #24
 800f948:	46bd      	mov	sp, r7
 800f94a:	bd80      	pop	{r7, pc}
 800f94c:	20001280 	.word	0x20001280
 800f950:	20001284 	.word	0x20001284

0800f954 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800f954:	b580      	push	{r7, lr}
 800f956:	b082      	sub	sp, #8
 800f958:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800f95a:	f000 f98b 	bl	800fc74 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800f95e:	4b15      	ldr	r3, [pc, #84]	; (800f9b4 <prvCheckForValidListAndQueue+0x60>)
 800f960:	681b      	ldr	r3, [r3, #0]
 800f962:	2b00      	cmp	r3, #0
 800f964:	d120      	bne.n	800f9a8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800f966:	4814      	ldr	r0, [pc, #80]	; (800f9b8 <prvCheckForValidListAndQueue+0x64>)
 800f968:	f7fd faea 	bl	800cf40 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800f96c:	4813      	ldr	r0, [pc, #76]	; (800f9bc <prvCheckForValidListAndQueue+0x68>)
 800f96e:	f7fd fae7 	bl	800cf40 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800f972:	4b13      	ldr	r3, [pc, #76]	; (800f9c0 <prvCheckForValidListAndQueue+0x6c>)
 800f974:	4a10      	ldr	r2, [pc, #64]	; (800f9b8 <prvCheckForValidListAndQueue+0x64>)
 800f976:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800f978:	4b12      	ldr	r3, [pc, #72]	; (800f9c4 <prvCheckForValidListAndQueue+0x70>)
 800f97a:	4a10      	ldr	r2, [pc, #64]	; (800f9bc <prvCheckForValidListAndQueue+0x68>)
 800f97c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800f97e:	2300      	movs	r3, #0
 800f980:	9300      	str	r3, [sp, #0]
 800f982:	4b11      	ldr	r3, [pc, #68]	; (800f9c8 <prvCheckForValidListAndQueue+0x74>)
 800f984:	4a11      	ldr	r2, [pc, #68]	; (800f9cc <prvCheckForValidListAndQueue+0x78>)
 800f986:	2110      	movs	r1, #16
 800f988:	200a      	movs	r0, #10
 800f98a:	f7fd fbf5 	bl	800d178 <xQueueGenericCreateStatic>
 800f98e:	4603      	mov	r3, r0
 800f990:	4a08      	ldr	r2, [pc, #32]	; (800f9b4 <prvCheckForValidListAndQueue+0x60>)
 800f992:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800f994:	4b07      	ldr	r3, [pc, #28]	; (800f9b4 <prvCheckForValidListAndQueue+0x60>)
 800f996:	681b      	ldr	r3, [r3, #0]
 800f998:	2b00      	cmp	r3, #0
 800f99a:	d005      	beq.n	800f9a8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800f99c:	4b05      	ldr	r3, [pc, #20]	; (800f9b4 <prvCheckForValidListAndQueue+0x60>)
 800f99e:	681b      	ldr	r3, [r3, #0]
 800f9a0:	490b      	ldr	r1, [pc, #44]	; (800f9d0 <prvCheckForValidListAndQueue+0x7c>)
 800f9a2:	4618      	mov	r0, r3
 800f9a4:	f7fe faa2 	bl	800deec <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f9a8:	f000 f994 	bl	800fcd4 <vPortExitCritical>
}
 800f9ac:	bf00      	nop
 800f9ae:	46bd      	mov	sp, r7
 800f9b0:	bd80      	pop	{r7, pc}
 800f9b2:	bf00      	nop
 800f9b4:	20001288 	.word	0x20001288
 800f9b8:	20001258 	.word	0x20001258
 800f9bc:	2000126c 	.word	0x2000126c
 800f9c0:	20001280 	.word	0x20001280
 800f9c4:	20001284 	.word	0x20001284
 800f9c8:	20001334 	.word	0x20001334
 800f9cc:	20001294 	.word	0x20001294
 800f9d0:	08014940 	.word	0x08014940

0800f9d4 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800f9d4:	b580      	push	{r7, lr}
 800f9d6:	b08a      	sub	sp, #40	; 0x28
 800f9d8:	af00      	add	r7, sp, #0
 800f9da:	60f8      	str	r0, [r7, #12]
 800f9dc:	60b9      	str	r1, [r7, #8]
 800f9de:	607a      	str	r2, [r7, #4]
 800f9e0:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 800f9e2:	f06f 0301 	mvn.w	r3, #1
 800f9e6:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 800f9e8:	68fb      	ldr	r3, [r7, #12]
 800f9ea:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 800f9ec:	68bb      	ldr	r3, [r7, #8]
 800f9ee:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800f9f4:	4b06      	ldr	r3, [pc, #24]	; (800fa10 <xTimerPendFunctionCallFromISR+0x3c>)
 800f9f6:	6818      	ldr	r0, [r3, #0]
 800f9f8:	f107 0114 	add.w	r1, r7, #20
 800f9fc:	2300      	movs	r3, #0
 800f9fe:	683a      	ldr	r2, [r7, #0]
 800fa00:	f7fd fe44 	bl	800d68c <xQueueGenericSendFromISR>
 800fa04:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 800fa06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800fa08:	4618      	mov	r0, r3
 800fa0a:	3728      	adds	r7, #40	; 0x28
 800fa0c:	46bd      	mov	sp, r7
 800fa0e:	bd80      	pop	{r7, pc}
 800fa10:	20001288 	.word	0x20001288

0800fa14 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800fa14:	b480      	push	{r7}
 800fa16:	b085      	sub	sp, #20
 800fa18:	af00      	add	r7, sp, #0
 800fa1a:	60f8      	str	r0, [r7, #12]
 800fa1c:	60b9      	str	r1, [r7, #8]
 800fa1e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800fa20:	68fb      	ldr	r3, [r7, #12]
 800fa22:	3b04      	subs	r3, #4
 800fa24:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800fa26:	68fb      	ldr	r3, [r7, #12]
 800fa28:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800fa2c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800fa2e:	68fb      	ldr	r3, [r7, #12]
 800fa30:	3b04      	subs	r3, #4
 800fa32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800fa34:	68bb      	ldr	r3, [r7, #8]
 800fa36:	f023 0201 	bic.w	r2, r3, #1
 800fa3a:	68fb      	ldr	r3, [r7, #12]
 800fa3c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800fa3e:	68fb      	ldr	r3, [r7, #12]
 800fa40:	3b04      	subs	r3, #4
 800fa42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800fa44:	4a0c      	ldr	r2, [pc, #48]	; (800fa78 <pxPortInitialiseStack+0x64>)
 800fa46:	68fb      	ldr	r3, [r7, #12]
 800fa48:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800fa4a:	68fb      	ldr	r3, [r7, #12]
 800fa4c:	3b14      	subs	r3, #20
 800fa4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800fa50:	687a      	ldr	r2, [r7, #4]
 800fa52:	68fb      	ldr	r3, [r7, #12]
 800fa54:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800fa56:	68fb      	ldr	r3, [r7, #12]
 800fa58:	3b04      	subs	r3, #4
 800fa5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800fa5c:	68fb      	ldr	r3, [r7, #12]
 800fa5e:	f06f 0202 	mvn.w	r2, #2
 800fa62:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800fa64:	68fb      	ldr	r3, [r7, #12]
 800fa66:	3b20      	subs	r3, #32
 800fa68:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800fa6a:	68fb      	ldr	r3, [r7, #12]
}
 800fa6c:	4618      	mov	r0, r3
 800fa6e:	3714      	adds	r7, #20
 800fa70:	46bd      	mov	sp, r7
 800fa72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa76:	4770      	bx	lr
 800fa78:	0800fa7d 	.word	0x0800fa7d

0800fa7c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800fa7c:	b480      	push	{r7}
 800fa7e:	b085      	sub	sp, #20
 800fa80:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800fa82:	2300      	movs	r3, #0
 800fa84:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800fa86:	4b12      	ldr	r3, [pc, #72]	; (800fad0 <prvTaskExitError+0x54>)
 800fa88:	681b      	ldr	r3, [r3, #0]
 800fa8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fa8e:	d00a      	beq.n	800faa6 <prvTaskExitError+0x2a>
	__asm volatile
 800fa90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa94:	f383 8811 	msr	BASEPRI, r3
 800fa98:	f3bf 8f6f 	isb	sy
 800fa9c:	f3bf 8f4f 	dsb	sy
 800faa0:	60fb      	str	r3, [r7, #12]
}
 800faa2:	bf00      	nop
 800faa4:	e7fe      	b.n	800faa4 <prvTaskExitError+0x28>
	__asm volatile
 800faa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800faaa:	f383 8811 	msr	BASEPRI, r3
 800faae:	f3bf 8f6f 	isb	sy
 800fab2:	f3bf 8f4f 	dsb	sy
 800fab6:	60bb      	str	r3, [r7, #8]
}
 800fab8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800faba:	bf00      	nop
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	2b00      	cmp	r3, #0
 800fac0:	d0fc      	beq.n	800fabc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800fac2:	bf00      	nop
 800fac4:	bf00      	nop
 800fac6:	3714      	adds	r7, #20
 800fac8:	46bd      	mov	sp, r7
 800faca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800face:	4770      	bx	lr
 800fad0:	20000068 	.word	0x20000068
	...

0800fae0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800fae0:	4b07      	ldr	r3, [pc, #28]	; (800fb00 <pxCurrentTCBConst2>)
 800fae2:	6819      	ldr	r1, [r3, #0]
 800fae4:	6808      	ldr	r0, [r1, #0]
 800fae6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800faea:	f380 8809 	msr	PSP, r0
 800faee:	f3bf 8f6f 	isb	sy
 800faf2:	f04f 0000 	mov.w	r0, #0
 800faf6:	f380 8811 	msr	BASEPRI, r0
 800fafa:	4770      	bx	lr
 800fafc:	f3af 8000 	nop.w

0800fb00 <pxCurrentTCBConst2>:
 800fb00:	20000d58 	.word	0x20000d58
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800fb04:	bf00      	nop
 800fb06:	bf00      	nop

0800fb08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800fb08:	4808      	ldr	r0, [pc, #32]	; (800fb2c <prvPortStartFirstTask+0x24>)
 800fb0a:	6800      	ldr	r0, [r0, #0]
 800fb0c:	6800      	ldr	r0, [r0, #0]
 800fb0e:	f380 8808 	msr	MSP, r0
 800fb12:	f04f 0000 	mov.w	r0, #0
 800fb16:	f380 8814 	msr	CONTROL, r0
 800fb1a:	b662      	cpsie	i
 800fb1c:	b661      	cpsie	f
 800fb1e:	f3bf 8f4f 	dsb	sy
 800fb22:	f3bf 8f6f 	isb	sy
 800fb26:	df00      	svc	0
 800fb28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800fb2a:	bf00      	nop
 800fb2c:	e000ed08 	.word	0xe000ed08

0800fb30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800fb30:	b580      	push	{r7, lr}
 800fb32:	b086      	sub	sp, #24
 800fb34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800fb36:	4b46      	ldr	r3, [pc, #280]	; (800fc50 <xPortStartScheduler+0x120>)
 800fb38:	681b      	ldr	r3, [r3, #0]
 800fb3a:	4a46      	ldr	r2, [pc, #280]	; (800fc54 <xPortStartScheduler+0x124>)
 800fb3c:	4293      	cmp	r3, r2
 800fb3e:	d10a      	bne.n	800fb56 <xPortStartScheduler+0x26>
	__asm volatile
 800fb40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb44:	f383 8811 	msr	BASEPRI, r3
 800fb48:	f3bf 8f6f 	isb	sy
 800fb4c:	f3bf 8f4f 	dsb	sy
 800fb50:	613b      	str	r3, [r7, #16]
}
 800fb52:	bf00      	nop
 800fb54:	e7fe      	b.n	800fb54 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800fb56:	4b3e      	ldr	r3, [pc, #248]	; (800fc50 <xPortStartScheduler+0x120>)
 800fb58:	681b      	ldr	r3, [r3, #0]
 800fb5a:	4a3f      	ldr	r2, [pc, #252]	; (800fc58 <xPortStartScheduler+0x128>)
 800fb5c:	4293      	cmp	r3, r2
 800fb5e:	d10a      	bne.n	800fb76 <xPortStartScheduler+0x46>
	__asm volatile
 800fb60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb64:	f383 8811 	msr	BASEPRI, r3
 800fb68:	f3bf 8f6f 	isb	sy
 800fb6c:	f3bf 8f4f 	dsb	sy
 800fb70:	60fb      	str	r3, [r7, #12]
}
 800fb72:	bf00      	nop
 800fb74:	e7fe      	b.n	800fb74 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800fb76:	4b39      	ldr	r3, [pc, #228]	; (800fc5c <xPortStartScheduler+0x12c>)
 800fb78:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800fb7a:	697b      	ldr	r3, [r7, #20]
 800fb7c:	781b      	ldrb	r3, [r3, #0]
 800fb7e:	b2db      	uxtb	r3, r3
 800fb80:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800fb82:	697b      	ldr	r3, [r7, #20]
 800fb84:	22ff      	movs	r2, #255	; 0xff
 800fb86:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800fb88:	697b      	ldr	r3, [r7, #20]
 800fb8a:	781b      	ldrb	r3, [r3, #0]
 800fb8c:	b2db      	uxtb	r3, r3
 800fb8e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800fb90:	78fb      	ldrb	r3, [r7, #3]
 800fb92:	b2db      	uxtb	r3, r3
 800fb94:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800fb98:	b2da      	uxtb	r2, r3
 800fb9a:	4b31      	ldr	r3, [pc, #196]	; (800fc60 <xPortStartScheduler+0x130>)
 800fb9c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800fb9e:	4b31      	ldr	r3, [pc, #196]	; (800fc64 <xPortStartScheduler+0x134>)
 800fba0:	2207      	movs	r2, #7
 800fba2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800fba4:	e009      	b.n	800fbba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800fba6:	4b2f      	ldr	r3, [pc, #188]	; (800fc64 <xPortStartScheduler+0x134>)
 800fba8:	681b      	ldr	r3, [r3, #0]
 800fbaa:	3b01      	subs	r3, #1
 800fbac:	4a2d      	ldr	r2, [pc, #180]	; (800fc64 <xPortStartScheduler+0x134>)
 800fbae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800fbb0:	78fb      	ldrb	r3, [r7, #3]
 800fbb2:	b2db      	uxtb	r3, r3
 800fbb4:	005b      	lsls	r3, r3, #1
 800fbb6:	b2db      	uxtb	r3, r3
 800fbb8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800fbba:	78fb      	ldrb	r3, [r7, #3]
 800fbbc:	b2db      	uxtb	r3, r3
 800fbbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fbc2:	2b80      	cmp	r3, #128	; 0x80
 800fbc4:	d0ef      	beq.n	800fba6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800fbc6:	4b27      	ldr	r3, [pc, #156]	; (800fc64 <xPortStartScheduler+0x134>)
 800fbc8:	681b      	ldr	r3, [r3, #0]
 800fbca:	f1c3 0307 	rsb	r3, r3, #7
 800fbce:	2b04      	cmp	r3, #4
 800fbd0:	d00a      	beq.n	800fbe8 <xPortStartScheduler+0xb8>
	__asm volatile
 800fbd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbd6:	f383 8811 	msr	BASEPRI, r3
 800fbda:	f3bf 8f6f 	isb	sy
 800fbde:	f3bf 8f4f 	dsb	sy
 800fbe2:	60bb      	str	r3, [r7, #8]
}
 800fbe4:	bf00      	nop
 800fbe6:	e7fe      	b.n	800fbe6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800fbe8:	4b1e      	ldr	r3, [pc, #120]	; (800fc64 <xPortStartScheduler+0x134>)
 800fbea:	681b      	ldr	r3, [r3, #0]
 800fbec:	021b      	lsls	r3, r3, #8
 800fbee:	4a1d      	ldr	r2, [pc, #116]	; (800fc64 <xPortStartScheduler+0x134>)
 800fbf0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800fbf2:	4b1c      	ldr	r3, [pc, #112]	; (800fc64 <xPortStartScheduler+0x134>)
 800fbf4:	681b      	ldr	r3, [r3, #0]
 800fbf6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800fbfa:	4a1a      	ldr	r2, [pc, #104]	; (800fc64 <xPortStartScheduler+0x134>)
 800fbfc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	b2da      	uxtb	r2, r3
 800fc02:	697b      	ldr	r3, [r7, #20]
 800fc04:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800fc06:	4b18      	ldr	r3, [pc, #96]	; (800fc68 <xPortStartScheduler+0x138>)
 800fc08:	681b      	ldr	r3, [r3, #0]
 800fc0a:	4a17      	ldr	r2, [pc, #92]	; (800fc68 <xPortStartScheduler+0x138>)
 800fc0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800fc10:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800fc12:	4b15      	ldr	r3, [pc, #84]	; (800fc68 <xPortStartScheduler+0x138>)
 800fc14:	681b      	ldr	r3, [r3, #0]
 800fc16:	4a14      	ldr	r2, [pc, #80]	; (800fc68 <xPortStartScheduler+0x138>)
 800fc18:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800fc1c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800fc1e:	f000 f8dd 	bl	800fddc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800fc22:	4b12      	ldr	r3, [pc, #72]	; (800fc6c <xPortStartScheduler+0x13c>)
 800fc24:	2200      	movs	r2, #0
 800fc26:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800fc28:	f000 f8fc 	bl	800fe24 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800fc2c:	4b10      	ldr	r3, [pc, #64]	; (800fc70 <xPortStartScheduler+0x140>)
 800fc2e:	681b      	ldr	r3, [r3, #0]
 800fc30:	4a0f      	ldr	r2, [pc, #60]	; (800fc70 <xPortStartScheduler+0x140>)
 800fc32:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800fc36:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800fc38:	f7ff ff66 	bl	800fb08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800fc3c:	f7fe fe6c 	bl	800e918 <vTaskSwitchContext>
	prvTaskExitError();
 800fc40:	f7ff ff1c 	bl	800fa7c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800fc44:	2300      	movs	r3, #0
}
 800fc46:	4618      	mov	r0, r3
 800fc48:	3718      	adds	r7, #24
 800fc4a:	46bd      	mov	sp, r7
 800fc4c:	bd80      	pop	{r7, pc}
 800fc4e:	bf00      	nop
 800fc50:	e000ed00 	.word	0xe000ed00
 800fc54:	410fc271 	.word	0x410fc271
 800fc58:	410fc270 	.word	0x410fc270
 800fc5c:	e000e400 	.word	0xe000e400
 800fc60:	20001384 	.word	0x20001384
 800fc64:	20001388 	.word	0x20001388
 800fc68:	e000ed20 	.word	0xe000ed20
 800fc6c:	20000068 	.word	0x20000068
 800fc70:	e000ef34 	.word	0xe000ef34

0800fc74 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800fc74:	b480      	push	{r7}
 800fc76:	b083      	sub	sp, #12
 800fc78:	af00      	add	r7, sp, #0
	__asm volatile
 800fc7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc7e:	f383 8811 	msr	BASEPRI, r3
 800fc82:	f3bf 8f6f 	isb	sy
 800fc86:	f3bf 8f4f 	dsb	sy
 800fc8a:	607b      	str	r3, [r7, #4]
}
 800fc8c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800fc8e:	4b0f      	ldr	r3, [pc, #60]	; (800fccc <vPortEnterCritical+0x58>)
 800fc90:	681b      	ldr	r3, [r3, #0]
 800fc92:	3301      	adds	r3, #1
 800fc94:	4a0d      	ldr	r2, [pc, #52]	; (800fccc <vPortEnterCritical+0x58>)
 800fc96:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800fc98:	4b0c      	ldr	r3, [pc, #48]	; (800fccc <vPortEnterCritical+0x58>)
 800fc9a:	681b      	ldr	r3, [r3, #0]
 800fc9c:	2b01      	cmp	r3, #1
 800fc9e:	d10f      	bne.n	800fcc0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800fca0:	4b0b      	ldr	r3, [pc, #44]	; (800fcd0 <vPortEnterCritical+0x5c>)
 800fca2:	681b      	ldr	r3, [r3, #0]
 800fca4:	b2db      	uxtb	r3, r3
 800fca6:	2b00      	cmp	r3, #0
 800fca8:	d00a      	beq.n	800fcc0 <vPortEnterCritical+0x4c>
	__asm volatile
 800fcaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fcae:	f383 8811 	msr	BASEPRI, r3
 800fcb2:	f3bf 8f6f 	isb	sy
 800fcb6:	f3bf 8f4f 	dsb	sy
 800fcba:	603b      	str	r3, [r7, #0]
}
 800fcbc:	bf00      	nop
 800fcbe:	e7fe      	b.n	800fcbe <vPortEnterCritical+0x4a>
	}
}
 800fcc0:	bf00      	nop
 800fcc2:	370c      	adds	r7, #12
 800fcc4:	46bd      	mov	sp, r7
 800fcc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcca:	4770      	bx	lr
 800fccc:	20000068 	.word	0x20000068
 800fcd0:	e000ed04 	.word	0xe000ed04

0800fcd4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800fcd4:	b480      	push	{r7}
 800fcd6:	b083      	sub	sp, #12
 800fcd8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800fcda:	4b12      	ldr	r3, [pc, #72]	; (800fd24 <vPortExitCritical+0x50>)
 800fcdc:	681b      	ldr	r3, [r3, #0]
 800fcde:	2b00      	cmp	r3, #0
 800fce0:	d10a      	bne.n	800fcf8 <vPortExitCritical+0x24>
	__asm volatile
 800fce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fce6:	f383 8811 	msr	BASEPRI, r3
 800fcea:	f3bf 8f6f 	isb	sy
 800fcee:	f3bf 8f4f 	dsb	sy
 800fcf2:	607b      	str	r3, [r7, #4]
}
 800fcf4:	bf00      	nop
 800fcf6:	e7fe      	b.n	800fcf6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800fcf8:	4b0a      	ldr	r3, [pc, #40]	; (800fd24 <vPortExitCritical+0x50>)
 800fcfa:	681b      	ldr	r3, [r3, #0]
 800fcfc:	3b01      	subs	r3, #1
 800fcfe:	4a09      	ldr	r2, [pc, #36]	; (800fd24 <vPortExitCritical+0x50>)
 800fd00:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800fd02:	4b08      	ldr	r3, [pc, #32]	; (800fd24 <vPortExitCritical+0x50>)
 800fd04:	681b      	ldr	r3, [r3, #0]
 800fd06:	2b00      	cmp	r3, #0
 800fd08:	d105      	bne.n	800fd16 <vPortExitCritical+0x42>
 800fd0a:	2300      	movs	r3, #0
 800fd0c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800fd0e:	683b      	ldr	r3, [r7, #0]
 800fd10:	f383 8811 	msr	BASEPRI, r3
}
 800fd14:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800fd16:	bf00      	nop
 800fd18:	370c      	adds	r7, #12
 800fd1a:	46bd      	mov	sp, r7
 800fd1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd20:	4770      	bx	lr
 800fd22:	bf00      	nop
 800fd24:	20000068 	.word	0x20000068
	...

0800fd30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800fd30:	f3ef 8009 	mrs	r0, PSP
 800fd34:	f3bf 8f6f 	isb	sy
 800fd38:	4b15      	ldr	r3, [pc, #84]	; (800fd90 <pxCurrentTCBConst>)
 800fd3a:	681a      	ldr	r2, [r3, #0]
 800fd3c:	f01e 0f10 	tst.w	lr, #16
 800fd40:	bf08      	it	eq
 800fd42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800fd46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd4a:	6010      	str	r0, [r2, #0]
 800fd4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800fd50:	f04f 0050 	mov.w	r0, #80	; 0x50
 800fd54:	f380 8811 	msr	BASEPRI, r0
 800fd58:	f3bf 8f4f 	dsb	sy
 800fd5c:	f3bf 8f6f 	isb	sy
 800fd60:	f7fe fdda 	bl	800e918 <vTaskSwitchContext>
 800fd64:	f04f 0000 	mov.w	r0, #0
 800fd68:	f380 8811 	msr	BASEPRI, r0
 800fd6c:	bc09      	pop	{r0, r3}
 800fd6e:	6819      	ldr	r1, [r3, #0]
 800fd70:	6808      	ldr	r0, [r1, #0]
 800fd72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd76:	f01e 0f10 	tst.w	lr, #16
 800fd7a:	bf08      	it	eq
 800fd7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800fd80:	f380 8809 	msr	PSP, r0
 800fd84:	f3bf 8f6f 	isb	sy
 800fd88:	4770      	bx	lr
 800fd8a:	bf00      	nop
 800fd8c:	f3af 8000 	nop.w

0800fd90 <pxCurrentTCBConst>:
 800fd90:	20000d58 	.word	0x20000d58
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800fd94:	bf00      	nop
 800fd96:	bf00      	nop

0800fd98 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800fd98:	b580      	push	{r7, lr}
 800fd9a:	b082      	sub	sp, #8
 800fd9c:	af00      	add	r7, sp, #0
	__asm volatile
 800fd9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fda2:	f383 8811 	msr	BASEPRI, r3
 800fda6:	f3bf 8f6f 	isb	sy
 800fdaa:	f3bf 8f4f 	dsb	sy
 800fdae:	607b      	str	r3, [r7, #4]
}
 800fdb0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800fdb2:	f7fe fcf7 	bl	800e7a4 <xTaskIncrementTick>
 800fdb6:	4603      	mov	r3, r0
 800fdb8:	2b00      	cmp	r3, #0
 800fdba:	d003      	beq.n	800fdc4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800fdbc:	4b06      	ldr	r3, [pc, #24]	; (800fdd8 <xPortSysTickHandler+0x40>)
 800fdbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fdc2:	601a      	str	r2, [r3, #0]
 800fdc4:	2300      	movs	r3, #0
 800fdc6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800fdc8:	683b      	ldr	r3, [r7, #0]
 800fdca:	f383 8811 	msr	BASEPRI, r3
}
 800fdce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800fdd0:	bf00      	nop
 800fdd2:	3708      	adds	r7, #8
 800fdd4:	46bd      	mov	sp, r7
 800fdd6:	bd80      	pop	{r7, pc}
 800fdd8:	e000ed04 	.word	0xe000ed04

0800fddc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800fddc:	b480      	push	{r7}
 800fdde:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800fde0:	4b0b      	ldr	r3, [pc, #44]	; (800fe10 <vPortSetupTimerInterrupt+0x34>)
 800fde2:	2200      	movs	r2, #0
 800fde4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800fde6:	4b0b      	ldr	r3, [pc, #44]	; (800fe14 <vPortSetupTimerInterrupt+0x38>)
 800fde8:	2200      	movs	r2, #0
 800fdea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800fdec:	4b0a      	ldr	r3, [pc, #40]	; (800fe18 <vPortSetupTimerInterrupt+0x3c>)
 800fdee:	681b      	ldr	r3, [r3, #0]
 800fdf0:	4a0a      	ldr	r2, [pc, #40]	; (800fe1c <vPortSetupTimerInterrupt+0x40>)
 800fdf2:	fba2 2303 	umull	r2, r3, r2, r3
 800fdf6:	099b      	lsrs	r3, r3, #6
 800fdf8:	4a09      	ldr	r2, [pc, #36]	; (800fe20 <vPortSetupTimerInterrupt+0x44>)
 800fdfa:	3b01      	subs	r3, #1
 800fdfc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800fdfe:	4b04      	ldr	r3, [pc, #16]	; (800fe10 <vPortSetupTimerInterrupt+0x34>)
 800fe00:	2207      	movs	r2, #7
 800fe02:	601a      	str	r2, [r3, #0]
}
 800fe04:	bf00      	nop
 800fe06:	46bd      	mov	sp, r7
 800fe08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe0c:	4770      	bx	lr
 800fe0e:	bf00      	nop
 800fe10:	e000e010 	.word	0xe000e010
 800fe14:	e000e018 	.word	0xe000e018
 800fe18:	2000003c 	.word	0x2000003c
 800fe1c:	10624dd3 	.word	0x10624dd3
 800fe20:	e000e014 	.word	0xe000e014

0800fe24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800fe24:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800fe34 <vPortEnableVFP+0x10>
 800fe28:	6801      	ldr	r1, [r0, #0]
 800fe2a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800fe2e:	6001      	str	r1, [r0, #0]
 800fe30:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800fe32:	bf00      	nop
 800fe34:	e000ed88 	.word	0xe000ed88

0800fe38 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800fe38:	b480      	push	{r7}
 800fe3a:	b085      	sub	sp, #20
 800fe3c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800fe3e:	f3ef 8305 	mrs	r3, IPSR
 800fe42:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800fe44:	68fb      	ldr	r3, [r7, #12]
 800fe46:	2b0f      	cmp	r3, #15
 800fe48:	d914      	bls.n	800fe74 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800fe4a:	4a17      	ldr	r2, [pc, #92]	; (800fea8 <vPortValidateInterruptPriority+0x70>)
 800fe4c:	68fb      	ldr	r3, [r7, #12]
 800fe4e:	4413      	add	r3, r2
 800fe50:	781b      	ldrb	r3, [r3, #0]
 800fe52:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800fe54:	4b15      	ldr	r3, [pc, #84]	; (800feac <vPortValidateInterruptPriority+0x74>)
 800fe56:	781b      	ldrb	r3, [r3, #0]
 800fe58:	7afa      	ldrb	r2, [r7, #11]
 800fe5a:	429a      	cmp	r2, r3
 800fe5c:	d20a      	bcs.n	800fe74 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800fe5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe62:	f383 8811 	msr	BASEPRI, r3
 800fe66:	f3bf 8f6f 	isb	sy
 800fe6a:	f3bf 8f4f 	dsb	sy
 800fe6e:	607b      	str	r3, [r7, #4]
}
 800fe70:	bf00      	nop
 800fe72:	e7fe      	b.n	800fe72 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800fe74:	4b0e      	ldr	r3, [pc, #56]	; (800feb0 <vPortValidateInterruptPriority+0x78>)
 800fe76:	681b      	ldr	r3, [r3, #0]
 800fe78:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800fe7c:	4b0d      	ldr	r3, [pc, #52]	; (800feb4 <vPortValidateInterruptPriority+0x7c>)
 800fe7e:	681b      	ldr	r3, [r3, #0]
 800fe80:	429a      	cmp	r2, r3
 800fe82:	d90a      	bls.n	800fe9a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800fe84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe88:	f383 8811 	msr	BASEPRI, r3
 800fe8c:	f3bf 8f6f 	isb	sy
 800fe90:	f3bf 8f4f 	dsb	sy
 800fe94:	603b      	str	r3, [r7, #0]
}
 800fe96:	bf00      	nop
 800fe98:	e7fe      	b.n	800fe98 <vPortValidateInterruptPriority+0x60>
	}
 800fe9a:	bf00      	nop
 800fe9c:	3714      	adds	r7, #20
 800fe9e:	46bd      	mov	sp, r7
 800fea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fea4:	4770      	bx	lr
 800fea6:	bf00      	nop
 800fea8:	e000e3f0 	.word	0xe000e3f0
 800feac:	20001384 	.word	0x20001384
 800feb0:	e000ed0c 	.word	0xe000ed0c
 800feb4:	20001388 	.word	0x20001388

0800feb8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800feb8:	b580      	push	{r7, lr}
 800feba:	b08a      	sub	sp, #40	; 0x28
 800febc:	af00      	add	r7, sp, #0
 800febe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800fec0:	2300      	movs	r3, #0
 800fec2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800fec4:	f7fe fbb2 	bl	800e62c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800fec8:	4b5b      	ldr	r3, [pc, #364]	; (8010038 <pvPortMalloc+0x180>)
 800feca:	681b      	ldr	r3, [r3, #0]
 800fecc:	2b00      	cmp	r3, #0
 800fece:	d101      	bne.n	800fed4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800fed0:	f000 f920 	bl	8010114 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800fed4:	4b59      	ldr	r3, [pc, #356]	; (801003c <pvPortMalloc+0x184>)
 800fed6:	681a      	ldr	r2, [r3, #0]
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	4013      	ands	r3, r2
 800fedc:	2b00      	cmp	r3, #0
 800fede:	f040 8093 	bne.w	8010008 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800fee2:	687b      	ldr	r3, [r7, #4]
 800fee4:	2b00      	cmp	r3, #0
 800fee6:	d01d      	beq.n	800ff24 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800fee8:	2208      	movs	r2, #8
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	4413      	add	r3, r2
 800feee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	f003 0307 	and.w	r3, r3, #7
 800fef6:	2b00      	cmp	r3, #0
 800fef8:	d014      	beq.n	800ff24 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	f023 0307 	bic.w	r3, r3, #7
 800ff00:	3308      	adds	r3, #8
 800ff02:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	f003 0307 	and.w	r3, r3, #7
 800ff0a:	2b00      	cmp	r3, #0
 800ff0c:	d00a      	beq.n	800ff24 <pvPortMalloc+0x6c>
	__asm volatile
 800ff0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff12:	f383 8811 	msr	BASEPRI, r3
 800ff16:	f3bf 8f6f 	isb	sy
 800ff1a:	f3bf 8f4f 	dsb	sy
 800ff1e:	617b      	str	r3, [r7, #20]
}
 800ff20:	bf00      	nop
 800ff22:	e7fe      	b.n	800ff22 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	2b00      	cmp	r3, #0
 800ff28:	d06e      	beq.n	8010008 <pvPortMalloc+0x150>
 800ff2a:	4b45      	ldr	r3, [pc, #276]	; (8010040 <pvPortMalloc+0x188>)
 800ff2c:	681b      	ldr	r3, [r3, #0]
 800ff2e:	687a      	ldr	r2, [r7, #4]
 800ff30:	429a      	cmp	r2, r3
 800ff32:	d869      	bhi.n	8010008 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ff34:	4b43      	ldr	r3, [pc, #268]	; (8010044 <pvPortMalloc+0x18c>)
 800ff36:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ff38:	4b42      	ldr	r3, [pc, #264]	; (8010044 <pvPortMalloc+0x18c>)
 800ff3a:	681b      	ldr	r3, [r3, #0]
 800ff3c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ff3e:	e004      	b.n	800ff4a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800ff40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff42:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ff44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff46:	681b      	ldr	r3, [r3, #0]
 800ff48:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ff4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff4c:	685b      	ldr	r3, [r3, #4]
 800ff4e:	687a      	ldr	r2, [r7, #4]
 800ff50:	429a      	cmp	r2, r3
 800ff52:	d903      	bls.n	800ff5c <pvPortMalloc+0xa4>
 800ff54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff56:	681b      	ldr	r3, [r3, #0]
 800ff58:	2b00      	cmp	r3, #0
 800ff5a:	d1f1      	bne.n	800ff40 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ff5c:	4b36      	ldr	r3, [pc, #216]	; (8010038 <pvPortMalloc+0x180>)
 800ff5e:	681b      	ldr	r3, [r3, #0]
 800ff60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ff62:	429a      	cmp	r2, r3
 800ff64:	d050      	beq.n	8010008 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ff66:	6a3b      	ldr	r3, [r7, #32]
 800ff68:	681b      	ldr	r3, [r3, #0]
 800ff6a:	2208      	movs	r2, #8
 800ff6c:	4413      	add	r3, r2
 800ff6e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ff70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff72:	681a      	ldr	r2, [r3, #0]
 800ff74:	6a3b      	ldr	r3, [r7, #32]
 800ff76:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ff78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff7a:	685a      	ldr	r2, [r3, #4]
 800ff7c:	687b      	ldr	r3, [r7, #4]
 800ff7e:	1ad2      	subs	r2, r2, r3
 800ff80:	2308      	movs	r3, #8
 800ff82:	005b      	lsls	r3, r3, #1
 800ff84:	429a      	cmp	r2, r3
 800ff86:	d91f      	bls.n	800ffc8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ff88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	4413      	add	r3, r2
 800ff8e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ff90:	69bb      	ldr	r3, [r7, #24]
 800ff92:	f003 0307 	and.w	r3, r3, #7
 800ff96:	2b00      	cmp	r3, #0
 800ff98:	d00a      	beq.n	800ffb0 <pvPortMalloc+0xf8>
	__asm volatile
 800ff9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff9e:	f383 8811 	msr	BASEPRI, r3
 800ffa2:	f3bf 8f6f 	isb	sy
 800ffa6:	f3bf 8f4f 	dsb	sy
 800ffaa:	613b      	str	r3, [r7, #16]
}
 800ffac:	bf00      	nop
 800ffae:	e7fe      	b.n	800ffae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ffb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffb2:	685a      	ldr	r2, [r3, #4]
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	1ad2      	subs	r2, r2, r3
 800ffb8:	69bb      	ldr	r3, [r7, #24]
 800ffba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ffbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffbe:	687a      	ldr	r2, [r7, #4]
 800ffc0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ffc2:	69b8      	ldr	r0, [r7, #24]
 800ffc4:	f000 f908 	bl	80101d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ffc8:	4b1d      	ldr	r3, [pc, #116]	; (8010040 <pvPortMalloc+0x188>)
 800ffca:	681a      	ldr	r2, [r3, #0]
 800ffcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffce:	685b      	ldr	r3, [r3, #4]
 800ffd0:	1ad3      	subs	r3, r2, r3
 800ffd2:	4a1b      	ldr	r2, [pc, #108]	; (8010040 <pvPortMalloc+0x188>)
 800ffd4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ffd6:	4b1a      	ldr	r3, [pc, #104]	; (8010040 <pvPortMalloc+0x188>)
 800ffd8:	681a      	ldr	r2, [r3, #0]
 800ffda:	4b1b      	ldr	r3, [pc, #108]	; (8010048 <pvPortMalloc+0x190>)
 800ffdc:	681b      	ldr	r3, [r3, #0]
 800ffde:	429a      	cmp	r2, r3
 800ffe0:	d203      	bcs.n	800ffea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ffe2:	4b17      	ldr	r3, [pc, #92]	; (8010040 <pvPortMalloc+0x188>)
 800ffe4:	681b      	ldr	r3, [r3, #0]
 800ffe6:	4a18      	ldr	r2, [pc, #96]	; (8010048 <pvPortMalloc+0x190>)
 800ffe8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ffea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffec:	685a      	ldr	r2, [r3, #4]
 800ffee:	4b13      	ldr	r3, [pc, #76]	; (801003c <pvPortMalloc+0x184>)
 800fff0:	681b      	ldr	r3, [r3, #0]
 800fff2:	431a      	orrs	r2, r3
 800fff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fff6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800fff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fffa:	2200      	movs	r2, #0
 800fffc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800fffe:	4b13      	ldr	r3, [pc, #76]	; (801004c <pvPortMalloc+0x194>)
 8010000:	681b      	ldr	r3, [r3, #0]
 8010002:	3301      	adds	r3, #1
 8010004:	4a11      	ldr	r2, [pc, #68]	; (801004c <pvPortMalloc+0x194>)
 8010006:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8010008:	f7fe fb1e 	bl	800e648 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801000c:	69fb      	ldr	r3, [r7, #28]
 801000e:	f003 0307 	and.w	r3, r3, #7
 8010012:	2b00      	cmp	r3, #0
 8010014:	d00a      	beq.n	801002c <pvPortMalloc+0x174>
	__asm volatile
 8010016:	f04f 0350 	mov.w	r3, #80	; 0x50
 801001a:	f383 8811 	msr	BASEPRI, r3
 801001e:	f3bf 8f6f 	isb	sy
 8010022:	f3bf 8f4f 	dsb	sy
 8010026:	60fb      	str	r3, [r7, #12]
}
 8010028:	bf00      	nop
 801002a:	e7fe      	b.n	801002a <pvPortMalloc+0x172>
	return pvReturn;
 801002c:	69fb      	ldr	r3, [r7, #28]
}
 801002e:	4618      	mov	r0, r3
 8010030:	3728      	adds	r7, #40	; 0x28
 8010032:	46bd      	mov	sp, r7
 8010034:	bd80      	pop	{r7, pc}
 8010036:	bf00      	nop
 8010038:	20006394 	.word	0x20006394
 801003c:	200063a8 	.word	0x200063a8
 8010040:	20006398 	.word	0x20006398
 8010044:	2000638c 	.word	0x2000638c
 8010048:	2000639c 	.word	0x2000639c
 801004c:	200063a0 	.word	0x200063a0

08010050 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8010050:	b580      	push	{r7, lr}
 8010052:	b086      	sub	sp, #24
 8010054:	af00      	add	r7, sp, #0
 8010056:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	2b00      	cmp	r3, #0
 8010060:	d04d      	beq.n	80100fe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8010062:	2308      	movs	r3, #8
 8010064:	425b      	negs	r3, r3
 8010066:	697a      	ldr	r2, [r7, #20]
 8010068:	4413      	add	r3, r2
 801006a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801006c:	697b      	ldr	r3, [r7, #20]
 801006e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8010070:	693b      	ldr	r3, [r7, #16]
 8010072:	685a      	ldr	r2, [r3, #4]
 8010074:	4b24      	ldr	r3, [pc, #144]	; (8010108 <vPortFree+0xb8>)
 8010076:	681b      	ldr	r3, [r3, #0]
 8010078:	4013      	ands	r3, r2
 801007a:	2b00      	cmp	r3, #0
 801007c:	d10a      	bne.n	8010094 <vPortFree+0x44>
	__asm volatile
 801007e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010082:	f383 8811 	msr	BASEPRI, r3
 8010086:	f3bf 8f6f 	isb	sy
 801008a:	f3bf 8f4f 	dsb	sy
 801008e:	60fb      	str	r3, [r7, #12]
}
 8010090:	bf00      	nop
 8010092:	e7fe      	b.n	8010092 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8010094:	693b      	ldr	r3, [r7, #16]
 8010096:	681b      	ldr	r3, [r3, #0]
 8010098:	2b00      	cmp	r3, #0
 801009a:	d00a      	beq.n	80100b2 <vPortFree+0x62>
	__asm volatile
 801009c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100a0:	f383 8811 	msr	BASEPRI, r3
 80100a4:	f3bf 8f6f 	isb	sy
 80100a8:	f3bf 8f4f 	dsb	sy
 80100ac:	60bb      	str	r3, [r7, #8]
}
 80100ae:	bf00      	nop
 80100b0:	e7fe      	b.n	80100b0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80100b2:	693b      	ldr	r3, [r7, #16]
 80100b4:	685a      	ldr	r2, [r3, #4]
 80100b6:	4b14      	ldr	r3, [pc, #80]	; (8010108 <vPortFree+0xb8>)
 80100b8:	681b      	ldr	r3, [r3, #0]
 80100ba:	4013      	ands	r3, r2
 80100bc:	2b00      	cmp	r3, #0
 80100be:	d01e      	beq.n	80100fe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80100c0:	693b      	ldr	r3, [r7, #16]
 80100c2:	681b      	ldr	r3, [r3, #0]
 80100c4:	2b00      	cmp	r3, #0
 80100c6:	d11a      	bne.n	80100fe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80100c8:	693b      	ldr	r3, [r7, #16]
 80100ca:	685a      	ldr	r2, [r3, #4]
 80100cc:	4b0e      	ldr	r3, [pc, #56]	; (8010108 <vPortFree+0xb8>)
 80100ce:	681b      	ldr	r3, [r3, #0]
 80100d0:	43db      	mvns	r3, r3
 80100d2:	401a      	ands	r2, r3
 80100d4:	693b      	ldr	r3, [r7, #16]
 80100d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80100d8:	f7fe faa8 	bl	800e62c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80100dc:	693b      	ldr	r3, [r7, #16]
 80100de:	685a      	ldr	r2, [r3, #4]
 80100e0:	4b0a      	ldr	r3, [pc, #40]	; (801010c <vPortFree+0xbc>)
 80100e2:	681b      	ldr	r3, [r3, #0]
 80100e4:	4413      	add	r3, r2
 80100e6:	4a09      	ldr	r2, [pc, #36]	; (801010c <vPortFree+0xbc>)
 80100e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80100ea:	6938      	ldr	r0, [r7, #16]
 80100ec:	f000 f874 	bl	80101d8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80100f0:	4b07      	ldr	r3, [pc, #28]	; (8010110 <vPortFree+0xc0>)
 80100f2:	681b      	ldr	r3, [r3, #0]
 80100f4:	3301      	adds	r3, #1
 80100f6:	4a06      	ldr	r2, [pc, #24]	; (8010110 <vPortFree+0xc0>)
 80100f8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80100fa:	f7fe faa5 	bl	800e648 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80100fe:	bf00      	nop
 8010100:	3718      	adds	r7, #24
 8010102:	46bd      	mov	sp, r7
 8010104:	bd80      	pop	{r7, pc}
 8010106:	bf00      	nop
 8010108:	200063a8 	.word	0x200063a8
 801010c:	20006398 	.word	0x20006398
 8010110:	200063a4 	.word	0x200063a4

08010114 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8010114:	b480      	push	{r7}
 8010116:	b085      	sub	sp, #20
 8010118:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801011a:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 801011e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8010120:	4b27      	ldr	r3, [pc, #156]	; (80101c0 <prvHeapInit+0xac>)
 8010122:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8010124:	68fb      	ldr	r3, [r7, #12]
 8010126:	f003 0307 	and.w	r3, r3, #7
 801012a:	2b00      	cmp	r3, #0
 801012c:	d00c      	beq.n	8010148 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801012e:	68fb      	ldr	r3, [r7, #12]
 8010130:	3307      	adds	r3, #7
 8010132:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010134:	68fb      	ldr	r3, [r7, #12]
 8010136:	f023 0307 	bic.w	r3, r3, #7
 801013a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801013c:	68ba      	ldr	r2, [r7, #8]
 801013e:	68fb      	ldr	r3, [r7, #12]
 8010140:	1ad3      	subs	r3, r2, r3
 8010142:	4a1f      	ldr	r2, [pc, #124]	; (80101c0 <prvHeapInit+0xac>)
 8010144:	4413      	add	r3, r2
 8010146:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8010148:	68fb      	ldr	r3, [r7, #12]
 801014a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801014c:	4a1d      	ldr	r2, [pc, #116]	; (80101c4 <prvHeapInit+0xb0>)
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8010152:	4b1c      	ldr	r3, [pc, #112]	; (80101c4 <prvHeapInit+0xb0>)
 8010154:	2200      	movs	r2, #0
 8010156:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	68ba      	ldr	r2, [r7, #8]
 801015c:	4413      	add	r3, r2
 801015e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8010160:	2208      	movs	r2, #8
 8010162:	68fb      	ldr	r3, [r7, #12]
 8010164:	1a9b      	subs	r3, r3, r2
 8010166:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010168:	68fb      	ldr	r3, [r7, #12]
 801016a:	f023 0307 	bic.w	r3, r3, #7
 801016e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8010170:	68fb      	ldr	r3, [r7, #12]
 8010172:	4a15      	ldr	r2, [pc, #84]	; (80101c8 <prvHeapInit+0xb4>)
 8010174:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8010176:	4b14      	ldr	r3, [pc, #80]	; (80101c8 <prvHeapInit+0xb4>)
 8010178:	681b      	ldr	r3, [r3, #0]
 801017a:	2200      	movs	r2, #0
 801017c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801017e:	4b12      	ldr	r3, [pc, #72]	; (80101c8 <prvHeapInit+0xb4>)
 8010180:	681b      	ldr	r3, [r3, #0]
 8010182:	2200      	movs	r2, #0
 8010184:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801018a:	683b      	ldr	r3, [r7, #0]
 801018c:	68fa      	ldr	r2, [r7, #12]
 801018e:	1ad2      	subs	r2, r2, r3
 8010190:	683b      	ldr	r3, [r7, #0]
 8010192:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8010194:	4b0c      	ldr	r3, [pc, #48]	; (80101c8 <prvHeapInit+0xb4>)
 8010196:	681a      	ldr	r2, [r3, #0]
 8010198:	683b      	ldr	r3, [r7, #0]
 801019a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801019c:	683b      	ldr	r3, [r7, #0]
 801019e:	685b      	ldr	r3, [r3, #4]
 80101a0:	4a0a      	ldr	r2, [pc, #40]	; (80101cc <prvHeapInit+0xb8>)
 80101a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80101a4:	683b      	ldr	r3, [r7, #0]
 80101a6:	685b      	ldr	r3, [r3, #4]
 80101a8:	4a09      	ldr	r2, [pc, #36]	; (80101d0 <prvHeapInit+0xbc>)
 80101aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80101ac:	4b09      	ldr	r3, [pc, #36]	; (80101d4 <prvHeapInit+0xc0>)
 80101ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80101b2:	601a      	str	r2, [r3, #0]
}
 80101b4:	bf00      	nop
 80101b6:	3714      	adds	r7, #20
 80101b8:	46bd      	mov	sp, r7
 80101ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101be:	4770      	bx	lr
 80101c0:	2000138c 	.word	0x2000138c
 80101c4:	2000638c 	.word	0x2000638c
 80101c8:	20006394 	.word	0x20006394
 80101cc:	2000639c 	.word	0x2000639c
 80101d0:	20006398 	.word	0x20006398
 80101d4:	200063a8 	.word	0x200063a8

080101d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80101d8:	b480      	push	{r7}
 80101da:	b085      	sub	sp, #20
 80101dc:	af00      	add	r7, sp, #0
 80101de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80101e0:	4b28      	ldr	r3, [pc, #160]	; (8010284 <prvInsertBlockIntoFreeList+0xac>)
 80101e2:	60fb      	str	r3, [r7, #12]
 80101e4:	e002      	b.n	80101ec <prvInsertBlockIntoFreeList+0x14>
 80101e6:	68fb      	ldr	r3, [r7, #12]
 80101e8:	681b      	ldr	r3, [r3, #0]
 80101ea:	60fb      	str	r3, [r7, #12]
 80101ec:	68fb      	ldr	r3, [r7, #12]
 80101ee:	681b      	ldr	r3, [r3, #0]
 80101f0:	687a      	ldr	r2, [r7, #4]
 80101f2:	429a      	cmp	r2, r3
 80101f4:	d8f7      	bhi.n	80101e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80101f6:	68fb      	ldr	r3, [r7, #12]
 80101f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80101fa:	68fb      	ldr	r3, [r7, #12]
 80101fc:	685b      	ldr	r3, [r3, #4]
 80101fe:	68ba      	ldr	r2, [r7, #8]
 8010200:	4413      	add	r3, r2
 8010202:	687a      	ldr	r2, [r7, #4]
 8010204:	429a      	cmp	r2, r3
 8010206:	d108      	bne.n	801021a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8010208:	68fb      	ldr	r3, [r7, #12]
 801020a:	685a      	ldr	r2, [r3, #4]
 801020c:	687b      	ldr	r3, [r7, #4]
 801020e:	685b      	ldr	r3, [r3, #4]
 8010210:	441a      	add	r2, r3
 8010212:	68fb      	ldr	r3, [r7, #12]
 8010214:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8010216:	68fb      	ldr	r3, [r7, #12]
 8010218:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801021e:	687b      	ldr	r3, [r7, #4]
 8010220:	685b      	ldr	r3, [r3, #4]
 8010222:	68ba      	ldr	r2, [r7, #8]
 8010224:	441a      	add	r2, r3
 8010226:	68fb      	ldr	r3, [r7, #12]
 8010228:	681b      	ldr	r3, [r3, #0]
 801022a:	429a      	cmp	r2, r3
 801022c:	d118      	bne.n	8010260 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801022e:	68fb      	ldr	r3, [r7, #12]
 8010230:	681a      	ldr	r2, [r3, #0]
 8010232:	4b15      	ldr	r3, [pc, #84]	; (8010288 <prvInsertBlockIntoFreeList+0xb0>)
 8010234:	681b      	ldr	r3, [r3, #0]
 8010236:	429a      	cmp	r2, r3
 8010238:	d00d      	beq.n	8010256 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801023a:	687b      	ldr	r3, [r7, #4]
 801023c:	685a      	ldr	r2, [r3, #4]
 801023e:	68fb      	ldr	r3, [r7, #12]
 8010240:	681b      	ldr	r3, [r3, #0]
 8010242:	685b      	ldr	r3, [r3, #4]
 8010244:	441a      	add	r2, r3
 8010246:	687b      	ldr	r3, [r7, #4]
 8010248:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801024a:	68fb      	ldr	r3, [r7, #12]
 801024c:	681b      	ldr	r3, [r3, #0]
 801024e:	681a      	ldr	r2, [r3, #0]
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	601a      	str	r2, [r3, #0]
 8010254:	e008      	b.n	8010268 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8010256:	4b0c      	ldr	r3, [pc, #48]	; (8010288 <prvInsertBlockIntoFreeList+0xb0>)
 8010258:	681a      	ldr	r2, [r3, #0]
 801025a:	687b      	ldr	r3, [r7, #4]
 801025c:	601a      	str	r2, [r3, #0]
 801025e:	e003      	b.n	8010268 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8010260:	68fb      	ldr	r3, [r7, #12]
 8010262:	681a      	ldr	r2, [r3, #0]
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8010268:	68fa      	ldr	r2, [r7, #12]
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	429a      	cmp	r2, r3
 801026e:	d002      	beq.n	8010276 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8010270:	68fb      	ldr	r3, [r7, #12]
 8010272:	687a      	ldr	r2, [r7, #4]
 8010274:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010276:	bf00      	nop
 8010278:	3714      	adds	r7, #20
 801027a:	46bd      	mov	sp, r7
 801027c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010280:	4770      	bx	lr
 8010282:	bf00      	nop
 8010284:	2000638c 	.word	0x2000638c
 8010288:	20006394 	.word	0x20006394

0801028c <malloc>:
 801028c:	4b02      	ldr	r3, [pc, #8]	; (8010298 <malloc+0xc>)
 801028e:	4601      	mov	r1, r0
 8010290:	6818      	ldr	r0, [r3, #0]
 8010292:	f000 b823 	b.w	80102dc <_malloc_r>
 8010296:	bf00      	nop
 8010298:	200000c4 	.word	0x200000c4

0801029c <sbrk_aligned>:
 801029c:	b570      	push	{r4, r5, r6, lr}
 801029e:	4e0e      	ldr	r6, [pc, #56]	; (80102d8 <sbrk_aligned+0x3c>)
 80102a0:	460c      	mov	r4, r1
 80102a2:	6831      	ldr	r1, [r6, #0]
 80102a4:	4605      	mov	r5, r0
 80102a6:	b911      	cbnz	r1, 80102ae <sbrk_aligned+0x12>
 80102a8:	f000 fe70 	bl	8010f8c <_sbrk_r>
 80102ac:	6030      	str	r0, [r6, #0]
 80102ae:	4621      	mov	r1, r4
 80102b0:	4628      	mov	r0, r5
 80102b2:	f000 fe6b 	bl	8010f8c <_sbrk_r>
 80102b6:	1c43      	adds	r3, r0, #1
 80102b8:	d00a      	beq.n	80102d0 <sbrk_aligned+0x34>
 80102ba:	1cc4      	adds	r4, r0, #3
 80102bc:	f024 0403 	bic.w	r4, r4, #3
 80102c0:	42a0      	cmp	r0, r4
 80102c2:	d007      	beq.n	80102d4 <sbrk_aligned+0x38>
 80102c4:	1a21      	subs	r1, r4, r0
 80102c6:	4628      	mov	r0, r5
 80102c8:	f000 fe60 	bl	8010f8c <_sbrk_r>
 80102cc:	3001      	adds	r0, #1
 80102ce:	d101      	bne.n	80102d4 <sbrk_aligned+0x38>
 80102d0:	f04f 34ff 	mov.w	r4, #4294967295
 80102d4:	4620      	mov	r0, r4
 80102d6:	bd70      	pop	{r4, r5, r6, pc}
 80102d8:	200063b0 	.word	0x200063b0

080102dc <_malloc_r>:
 80102dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80102e0:	1ccd      	adds	r5, r1, #3
 80102e2:	f025 0503 	bic.w	r5, r5, #3
 80102e6:	3508      	adds	r5, #8
 80102e8:	2d0c      	cmp	r5, #12
 80102ea:	bf38      	it	cc
 80102ec:	250c      	movcc	r5, #12
 80102ee:	2d00      	cmp	r5, #0
 80102f0:	4607      	mov	r7, r0
 80102f2:	db01      	blt.n	80102f8 <_malloc_r+0x1c>
 80102f4:	42a9      	cmp	r1, r5
 80102f6:	d905      	bls.n	8010304 <_malloc_r+0x28>
 80102f8:	230c      	movs	r3, #12
 80102fa:	603b      	str	r3, [r7, #0]
 80102fc:	2600      	movs	r6, #0
 80102fe:	4630      	mov	r0, r6
 8010300:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010304:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80103d8 <_malloc_r+0xfc>
 8010308:	f000 f868 	bl	80103dc <__malloc_lock>
 801030c:	f8d8 3000 	ldr.w	r3, [r8]
 8010310:	461c      	mov	r4, r3
 8010312:	bb5c      	cbnz	r4, 801036c <_malloc_r+0x90>
 8010314:	4629      	mov	r1, r5
 8010316:	4638      	mov	r0, r7
 8010318:	f7ff ffc0 	bl	801029c <sbrk_aligned>
 801031c:	1c43      	adds	r3, r0, #1
 801031e:	4604      	mov	r4, r0
 8010320:	d155      	bne.n	80103ce <_malloc_r+0xf2>
 8010322:	f8d8 4000 	ldr.w	r4, [r8]
 8010326:	4626      	mov	r6, r4
 8010328:	2e00      	cmp	r6, #0
 801032a:	d145      	bne.n	80103b8 <_malloc_r+0xdc>
 801032c:	2c00      	cmp	r4, #0
 801032e:	d048      	beq.n	80103c2 <_malloc_r+0xe6>
 8010330:	6823      	ldr	r3, [r4, #0]
 8010332:	4631      	mov	r1, r6
 8010334:	4638      	mov	r0, r7
 8010336:	eb04 0903 	add.w	r9, r4, r3
 801033a:	f000 fe27 	bl	8010f8c <_sbrk_r>
 801033e:	4581      	cmp	r9, r0
 8010340:	d13f      	bne.n	80103c2 <_malloc_r+0xe6>
 8010342:	6821      	ldr	r1, [r4, #0]
 8010344:	1a6d      	subs	r5, r5, r1
 8010346:	4629      	mov	r1, r5
 8010348:	4638      	mov	r0, r7
 801034a:	f7ff ffa7 	bl	801029c <sbrk_aligned>
 801034e:	3001      	adds	r0, #1
 8010350:	d037      	beq.n	80103c2 <_malloc_r+0xe6>
 8010352:	6823      	ldr	r3, [r4, #0]
 8010354:	442b      	add	r3, r5
 8010356:	6023      	str	r3, [r4, #0]
 8010358:	f8d8 3000 	ldr.w	r3, [r8]
 801035c:	2b00      	cmp	r3, #0
 801035e:	d038      	beq.n	80103d2 <_malloc_r+0xf6>
 8010360:	685a      	ldr	r2, [r3, #4]
 8010362:	42a2      	cmp	r2, r4
 8010364:	d12b      	bne.n	80103be <_malloc_r+0xe2>
 8010366:	2200      	movs	r2, #0
 8010368:	605a      	str	r2, [r3, #4]
 801036a:	e00f      	b.n	801038c <_malloc_r+0xb0>
 801036c:	6822      	ldr	r2, [r4, #0]
 801036e:	1b52      	subs	r2, r2, r5
 8010370:	d41f      	bmi.n	80103b2 <_malloc_r+0xd6>
 8010372:	2a0b      	cmp	r2, #11
 8010374:	d917      	bls.n	80103a6 <_malloc_r+0xca>
 8010376:	1961      	adds	r1, r4, r5
 8010378:	42a3      	cmp	r3, r4
 801037a:	6025      	str	r5, [r4, #0]
 801037c:	bf18      	it	ne
 801037e:	6059      	strne	r1, [r3, #4]
 8010380:	6863      	ldr	r3, [r4, #4]
 8010382:	bf08      	it	eq
 8010384:	f8c8 1000 	streq.w	r1, [r8]
 8010388:	5162      	str	r2, [r4, r5]
 801038a:	604b      	str	r3, [r1, #4]
 801038c:	4638      	mov	r0, r7
 801038e:	f104 060b 	add.w	r6, r4, #11
 8010392:	f000 f829 	bl	80103e8 <__malloc_unlock>
 8010396:	f026 0607 	bic.w	r6, r6, #7
 801039a:	1d23      	adds	r3, r4, #4
 801039c:	1af2      	subs	r2, r6, r3
 801039e:	d0ae      	beq.n	80102fe <_malloc_r+0x22>
 80103a0:	1b9b      	subs	r3, r3, r6
 80103a2:	50a3      	str	r3, [r4, r2]
 80103a4:	e7ab      	b.n	80102fe <_malloc_r+0x22>
 80103a6:	42a3      	cmp	r3, r4
 80103a8:	6862      	ldr	r2, [r4, #4]
 80103aa:	d1dd      	bne.n	8010368 <_malloc_r+0x8c>
 80103ac:	f8c8 2000 	str.w	r2, [r8]
 80103b0:	e7ec      	b.n	801038c <_malloc_r+0xb0>
 80103b2:	4623      	mov	r3, r4
 80103b4:	6864      	ldr	r4, [r4, #4]
 80103b6:	e7ac      	b.n	8010312 <_malloc_r+0x36>
 80103b8:	4634      	mov	r4, r6
 80103ba:	6876      	ldr	r6, [r6, #4]
 80103bc:	e7b4      	b.n	8010328 <_malloc_r+0x4c>
 80103be:	4613      	mov	r3, r2
 80103c0:	e7cc      	b.n	801035c <_malloc_r+0x80>
 80103c2:	230c      	movs	r3, #12
 80103c4:	603b      	str	r3, [r7, #0]
 80103c6:	4638      	mov	r0, r7
 80103c8:	f000 f80e 	bl	80103e8 <__malloc_unlock>
 80103cc:	e797      	b.n	80102fe <_malloc_r+0x22>
 80103ce:	6025      	str	r5, [r4, #0]
 80103d0:	e7dc      	b.n	801038c <_malloc_r+0xb0>
 80103d2:	605b      	str	r3, [r3, #4]
 80103d4:	deff      	udf	#255	; 0xff
 80103d6:	bf00      	nop
 80103d8:	200063ac 	.word	0x200063ac

080103dc <__malloc_lock>:
 80103dc:	4801      	ldr	r0, [pc, #4]	; (80103e4 <__malloc_lock+0x8>)
 80103de:	f000 be22 	b.w	8011026 <__retarget_lock_acquire_recursive>
 80103e2:	bf00      	nop
 80103e4:	200064f4 	.word	0x200064f4

080103e8 <__malloc_unlock>:
 80103e8:	4801      	ldr	r0, [pc, #4]	; (80103f0 <__malloc_unlock+0x8>)
 80103ea:	f000 be1d 	b.w	8011028 <__retarget_lock_release_recursive>
 80103ee:	bf00      	nop
 80103f0:	200064f4 	.word	0x200064f4

080103f4 <__cvt>:
 80103f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80103f8:	ec55 4b10 	vmov	r4, r5, d0
 80103fc:	2d00      	cmp	r5, #0
 80103fe:	460e      	mov	r6, r1
 8010400:	4619      	mov	r1, r3
 8010402:	462b      	mov	r3, r5
 8010404:	bfbb      	ittet	lt
 8010406:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801040a:	461d      	movlt	r5, r3
 801040c:	2300      	movge	r3, #0
 801040e:	232d      	movlt	r3, #45	; 0x2d
 8010410:	700b      	strb	r3, [r1, #0]
 8010412:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010414:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8010418:	4691      	mov	r9, r2
 801041a:	f023 0820 	bic.w	r8, r3, #32
 801041e:	bfbc      	itt	lt
 8010420:	4622      	movlt	r2, r4
 8010422:	4614      	movlt	r4, r2
 8010424:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8010428:	d005      	beq.n	8010436 <__cvt+0x42>
 801042a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801042e:	d100      	bne.n	8010432 <__cvt+0x3e>
 8010430:	3601      	adds	r6, #1
 8010432:	2102      	movs	r1, #2
 8010434:	e000      	b.n	8010438 <__cvt+0x44>
 8010436:	2103      	movs	r1, #3
 8010438:	ab03      	add	r3, sp, #12
 801043a:	9301      	str	r3, [sp, #4]
 801043c:	ab02      	add	r3, sp, #8
 801043e:	9300      	str	r3, [sp, #0]
 8010440:	ec45 4b10 	vmov	d0, r4, r5
 8010444:	4653      	mov	r3, sl
 8010446:	4632      	mov	r2, r6
 8010448:	f000 fe86 	bl	8011158 <_dtoa_r>
 801044c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8010450:	4607      	mov	r7, r0
 8010452:	d102      	bne.n	801045a <__cvt+0x66>
 8010454:	f019 0f01 	tst.w	r9, #1
 8010458:	d022      	beq.n	80104a0 <__cvt+0xac>
 801045a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801045e:	eb07 0906 	add.w	r9, r7, r6
 8010462:	d110      	bne.n	8010486 <__cvt+0x92>
 8010464:	783b      	ldrb	r3, [r7, #0]
 8010466:	2b30      	cmp	r3, #48	; 0x30
 8010468:	d10a      	bne.n	8010480 <__cvt+0x8c>
 801046a:	2200      	movs	r2, #0
 801046c:	2300      	movs	r3, #0
 801046e:	4620      	mov	r0, r4
 8010470:	4629      	mov	r1, r5
 8010472:	f7f0 fb41 	bl	8000af8 <__aeabi_dcmpeq>
 8010476:	b918      	cbnz	r0, 8010480 <__cvt+0x8c>
 8010478:	f1c6 0601 	rsb	r6, r6, #1
 801047c:	f8ca 6000 	str.w	r6, [sl]
 8010480:	f8da 3000 	ldr.w	r3, [sl]
 8010484:	4499      	add	r9, r3
 8010486:	2200      	movs	r2, #0
 8010488:	2300      	movs	r3, #0
 801048a:	4620      	mov	r0, r4
 801048c:	4629      	mov	r1, r5
 801048e:	f7f0 fb33 	bl	8000af8 <__aeabi_dcmpeq>
 8010492:	b108      	cbz	r0, 8010498 <__cvt+0xa4>
 8010494:	f8cd 900c 	str.w	r9, [sp, #12]
 8010498:	2230      	movs	r2, #48	; 0x30
 801049a:	9b03      	ldr	r3, [sp, #12]
 801049c:	454b      	cmp	r3, r9
 801049e:	d307      	bcc.n	80104b0 <__cvt+0xbc>
 80104a0:	9b03      	ldr	r3, [sp, #12]
 80104a2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80104a4:	1bdb      	subs	r3, r3, r7
 80104a6:	4638      	mov	r0, r7
 80104a8:	6013      	str	r3, [r2, #0]
 80104aa:	b004      	add	sp, #16
 80104ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80104b0:	1c59      	adds	r1, r3, #1
 80104b2:	9103      	str	r1, [sp, #12]
 80104b4:	701a      	strb	r2, [r3, #0]
 80104b6:	e7f0      	b.n	801049a <__cvt+0xa6>

080104b8 <__exponent>:
 80104b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80104ba:	4603      	mov	r3, r0
 80104bc:	2900      	cmp	r1, #0
 80104be:	bfb8      	it	lt
 80104c0:	4249      	neglt	r1, r1
 80104c2:	f803 2b02 	strb.w	r2, [r3], #2
 80104c6:	bfb4      	ite	lt
 80104c8:	222d      	movlt	r2, #45	; 0x2d
 80104ca:	222b      	movge	r2, #43	; 0x2b
 80104cc:	2909      	cmp	r1, #9
 80104ce:	7042      	strb	r2, [r0, #1]
 80104d0:	dd2a      	ble.n	8010528 <__exponent+0x70>
 80104d2:	f10d 0207 	add.w	r2, sp, #7
 80104d6:	4617      	mov	r7, r2
 80104d8:	260a      	movs	r6, #10
 80104da:	4694      	mov	ip, r2
 80104dc:	fb91 f5f6 	sdiv	r5, r1, r6
 80104e0:	fb06 1415 	mls	r4, r6, r5, r1
 80104e4:	3430      	adds	r4, #48	; 0x30
 80104e6:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80104ea:	460c      	mov	r4, r1
 80104ec:	2c63      	cmp	r4, #99	; 0x63
 80104ee:	f102 32ff 	add.w	r2, r2, #4294967295
 80104f2:	4629      	mov	r1, r5
 80104f4:	dcf1      	bgt.n	80104da <__exponent+0x22>
 80104f6:	3130      	adds	r1, #48	; 0x30
 80104f8:	f1ac 0402 	sub.w	r4, ip, #2
 80104fc:	f802 1c01 	strb.w	r1, [r2, #-1]
 8010500:	1c41      	adds	r1, r0, #1
 8010502:	4622      	mov	r2, r4
 8010504:	42ba      	cmp	r2, r7
 8010506:	d30a      	bcc.n	801051e <__exponent+0x66>
 8010508:	f10d 0209 	add.w	r2, sp, #9
 801050c:	eba2 020c 	sub.w	r2, r2, ip
 8010510:	42bc      	cmp	r4, r7
 8010512:	bf88      	it	hi
 8010514:	2200      	movhi	r2, #0
 8010516:	4413      	add	r3, r2
 8010518:	1a18      	subs	r0, r3, r0
 801051a:	b003      	add	sp, #12
 801051c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801051e:	f812 5b01 	ldrb.w	r5, [r2], #1
 8010522:	f801 5f01 	strb.w	r5, [r1, #1]!
 8010526:	e7ed      	b.n	8010504 <__exponent+0x4c>
 8010528:	2330      	movs	r3, #48	; 0x30
 801052a:	3130      	adds	r1, #48	; 0x30
 801052c:	7083      	strb	r3, [r0, #2]
 801052e:	70c1      	strb	r1, [r0, #3]
 8010530:	1d03      	adds	r3, r0, #4
 8010532:	e7f1      	b.n	8010518 <__exponent+0x60>

08010534 <_printf_float>:
 8010534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010538:	ed2d 8b02 	vpush	{d8}
 801053c:	b08d      	sub	sp, #52	; 0x34
 801053e:	460c      	mov	r4, r1
 8010540:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8010544:	4616      	mov	r6, r2
 8010546:	461f      	mov	r7, r3
 8010548:	4605      	mov	r5, r0
 801054a:	f000 fce7 	bl	8010f1c <_localeconv_r>
 801054e:	f8d0 a000 	ldr.w	sl, [r0]
 8010552:	4650      	mov	r0, sl
 8010554:	f7ef fea4 	bl	80002a0 <strlen>
 8010558:	2300      	movs	r3, #0
 801055a:	930a      	str	r3, [sp, #40]	; 0x28
 801055c:	6823      	ldr	r3, [r4, #0]
 801055e:	9305      	str	r3, [sp, #20]
 8010560:	f8d8 3000 	ldr.w	r3, [r8]
 8010564:	f894 b018 	ldrb.w	fp, [r4, #24]
 8010568:	3307      	adds	r3, #7
 801056a:	f023 0307 	bic.w	r3, r3, #7
 801056e:	f103 0208 	add.w	r2, r3, #8
 8010572:	f8c8 2000 	str.w	r2, [r8]
 8010576:	e9d3 8900 	ldrd	r8, r9, [r3]
 801057a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801057e:	9307      	str	r3, [sp, #28]
 8010580:	f8cd 8018 	str.w	r8, [sp, #24]
 8010584:	ee08 0a10 	vmov	s16, r0
 8010588:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 801058c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010590:	4b9e      	ldr	r3, [pc, #632]	; (801080c <_printf_float+0x2d8>)
 8010592:	f04f 32ff 	mov.w	r2, #4294967295
 8010596:	f7f0 fae1 	bl	8000b5c <__aeabi_dcmpun>
 801059a:	bb88      	cbnz	r0, 8010600 <_printf_float+0xcc>
 801059c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80105a0:	4b9a      	ldr	r3, [pc, #616]	; (801080c <_printf_float+0x2d8>)
 80105a2:	f04f 32ff 	mov.w	r2, #4294967295
 80105a6:	f7f0 fabb 	bl	8000b20 <__aeabi_dcmple>
 80105aa:	bb48      	cbnz	r0, 8010600 <_printf_float+0xcc>
 80105ac:	2200      	movs	r2, #0
 80105ae:	2300      	movs	r3, #0
 80105b0:	4640      	mov	r0, r8
 80105b2:	4649      	mov	r1, r9
 80105b4:	f7f0 faaa 	bl	8000b0c <__aeabi_dcmplt>
 80105b8:	b110      	cbz	r0, 80105c0 <_printf_float+0x8c>
 80105ba:	232d      	movs	r3, #45	; 0x2d
 80105bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80105c0:	4a93      	ldr	r2, [pc, #588]	; (8010810 <_printf_float+0x2dc>)
 80105c2:	4b94      	ldr	r3, [pc, #592]	; (8010814 <_printf_float+0x2e0>)
 80105c4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80105c8:	bf94      	ite	ls
 80105ca:	4690      	movls	r8, r2
 80105cc:	4698      	movhi	r8, r3
 80105ce:	2303      	movs	r3, #3
 80105d0:	6123      	str	r3, [r4, #16]
 80105d2:	9b05      	ldr	r3, [sp, #20]
 80105d4:	f023 0304 	bic.w	r3, r3, #4
 80105d8:	6023      	str	r3, [r4, #0]
 80105da:	f04f 0900 	mov.w	r9, #0
 80105de:	9700      	str	r7, [sp, #0]
 80105e0:	4633      	mov	r3, r6
 80105e2:	aa0b      	add	r2, sp, #44	; 0x2c
 80105e4:	4621      	mov	r1, r4
 80105e6:	4628      	mov	r0, r5
 80105e8:	f000 f9da 	bl	80109a0 <_printf_common>
 80105ec:	3001      	adds	r0, #1
 80105ee:	f040 8090 	bne.w	8010712 <_printf_float+0x1de>
 80105f2:	f04f 30ff 	mov.w	r0, #4294967295
 80105f6:	b00d      	add	sp, #52	; 0x34
 80105f8:	ecbd 8b02 	vpop	{d8}
 80105fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010600:	4642      	mov	r2, r8
 8010602:	464b      	mov	r3, r9
 8010604:	4640      	mov	r0, r8
 8010606:	4649      	mov	r1, r9
 8010608:	f7f0 faa8 	bl	8000b5c <__aeabi_dcmpun>
 801060c:	b140      	cbz	r0, 8010620 <_printf_float+0xec>
 801060e:	464b      	mov	r3, r9
 8010610:	2b00      	cmp	r3, #0
 8010612:	bfbc      	itt	lt
 8010614:	232d      	movlt	r3, #45	; 0x2d
 8010616:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801061a:	4a7f      	ldr	r2, [pc, #508]	; (8010818 <_printf_float+0x2e4>)
 801061c:	4b7f      	ldr	r3, [pc, #508]	; (801081c <_printf_float+0x2e8>)
 801061e:	e7d1      	b.n	80105c4 <_printf_float+0x90>
 8010620:	6863      	ldr	r3, [r4, #4]
 8010622:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8010626:	9206      	str	r2, [sp, #24]
 8010628:	1c5a      	adds	r2, r3, #1
 801062a:	d13f      	bne.n	80106ac <_printf_float+0x178>
 801062c:	2306      	movs	r3, #6
 801062e:	6063      	str	r3, [r4, #4]
 8010630:	9b05      	ldr	r3, [sp, #20]
 8010632:	6861      	ldr	r1, [r4, #4]
 8010634:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8010638:	2300      	movs	r3, #0
 801063a:	9303      	str	r3, [sp, #12]
 801063c:	ab0a      	add	r3, sp, #40	; 0x28
 801063e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8010642:	ab09      	add	r3, sp, #36	; 0x24
 8010644:	ec49 8b10 	vmov	d0, r8, r9
 8010648:	9300      	str	r3, [sp, #0]
 801064a:	6022      	str	r2, [r4, #0]
 801064c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8010650:	4628      	mov	r0, r5
 8010652:	f7ff fecf 	bl	80103f4 <__cvt>
 8010656:	9b06      	ldr	r3, [sp, #24]
 8010658:	9909      	ldr	r1, [sp, #36]	; 0x24
 801065a:	2b47      	cmp	r3, #71	; 0x47
 801065c:	4680      	mov	r8, r0
 801065e:	d108      	bne.n	8010672 <_printf_float+0x13e>
 8010660:	1cc8      	adds	r0, r1, #3
 8010662:	db02      	blt.n	801066a <_printf_float+0x136>
 8010664:	6863      	ldr	r3, [r4, #4]
 8010666:	4299      	cmp	r1, r3
 8010668:	dd41      	ble.n	80106ee <_printf_float+0x1ba>
 801066a:	f1ab 0302 	sub.w	r3, fp, #2
 801066e:	fa5f fb83 	uxtb.w	fp, r3
 8010672:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8010676:	d820      	bhi.n	80106ba <_printf_float+0x186>
 8010678:	3901      	subs	r1, #1
 801067a:	465a      	mov	r2, fp
 801067c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8010680:	9109      	str	r1, [sp, #36]	; 0x24
 8010682:	f7ff ff19 	bl	80104b8 <__exponent>
 8010686:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010688:	1813      	adds	r3, r2, r0
 801068a:	2a01      	cmp	r2, #1
 801068c:	4681      	mov	r9, r0
 801068e:	6123      	str	r3, [r4, #16]
 8010690:	dc02      	bgt.n	8010698 <_printf_float+0x164>
 8010692:	6822      	ldr	r2, [r4, #0]
 8010694:	07d2      	lsls	r2, r2, #31
 8010696:	d501      	bpl.n	801069c <_printf_float+0x168>
 8010698:	3301      	adds	r3, #1
 801069a:	6123      	str	r3, [r4, #16]
 801069c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80106a0:	2b00      	cmp	r3, #0
 80106a2:	d09c      	beq.n	80105de <_printf_float+0xaa>
 80106a4:	232d      	movs	r3, #45	; 0x2d
 80106a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80106aa:	e798      	b.n	80105de <_printf_float+0xaa>
 80106ac:	9a06      	ldr	r2, [sp, #24]
 80106ae:	2a47      	cmp	r2, #71	; 0x47
 80106b0:	d1be      	bne.n	8010630 <_printf_float+0xfc>
 80106b2:	2b00      	cmp	r3, #0
 80106b4:	d1bc      	bne.n	8010630 <_printf_float+0xfc>
 80106b6:	2301      	movs	r3, #1
 80106b8:	e7b9      	b.n	801062e <_printf_float+0xfa>
 80106ba:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80106be:	d118      	bne.n	80106f2 <_printf_float+0x1be>
 80106c0:	2900      	cmp	r1, #0
 80106c2:	6863      	ldr	r3, [r4, #4]
 80106c4:	dd0b      	ble.n	80106de <_printf_float+0x1aa>
 80106c6:	6121      	str	r1, [r4, #16]
 80106c8:	b913      	cbnz	r3, 80106d0 <_printf_float+0x19c>
 80106ca:	6822      	ldr	r2, [r4, #0]
 80106cc:	07d0      	lsls	r0, r2, #31
 80106ce:	d502      	bpl.n	80106d6 <_printf_float+0x1a2>
 80106d0:	3301      	adds	r3, #1
 80106d2:	440b      	add	r3, r1
 80106d4:	6123      	str	r3, [r4, #16]
 80106d6:	65a1      	str	r1, [r4, #88]	; 0x58
 80106d8:	f04f 0900 	mov.w	r9, #0
 80106dc:	e7de      	b.n	801069c <_printf_float+0x168>
 80106de:	b913      	cbnz	r3, 80106e6 <_printf_float+0x1b2>
 80106e0:	6822      	ldr	r2, [r4, #0]
 80106e2:	07d2      	lsls	r2, r2, #31
 80106e4:	d501      	bpl.n	80106ea <_printf_float+0x1b6>
 80106e6:	3302      	adds	r3, #2
 80106e8:	e7f4      	b.n	80106d4 <_printf_float+0x1a0>
 80106ea:	2301      	movs	r3, #1
 80106ec:	e7f2      	b.n	80106d4 <_printf_float+0x1a0>
 80106ee:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80106f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80106f4:	4299      	cmp	r1, r3
 80106f6:	db05      	blt.n	8010704 <_printf_float+0x1d0>
 80106f8:	6823      	ldr	r3, [r4, #0]
 80106fa:	6121      	str	r1, [r4, #16]
 80106fc:	07d8      	lsls	r0, r3, #31
 80106fe:	d5ea      	bpl.n	80106d6 <_printf_float+0x1a2>
 8010700:	1c4b      	adds	r3, r1, #1
 8010702:	e7e7      	b.n	80106d4 <_printf_float+0x1a0>
 8010704:	2900      	cmp	r1, #0
 8010706:	bfd4      	ite	le
 8010708:	f1c1 0202 	rsble	r2, r1, #2
 801070c:	2201      	movgt	r2, #1
 801070e:	4413      	add	r3, r2
 8010710:	e7e0      	b.n	80106d4 <_printf_float+0x1a0>
 8010712:	6823      	ldr	r3, [r4, #0]
 8010714:	055a      	lsls	r2, r3, #21
 8010716:	d407      	bmi.n	8010728 <_printf_float+0x1f4>
 8010718:	6923      	ldr	r3, [r4, #16]
 801071a:	4642      	mov	r2, r8
 801071c:	4631      	mov	r1, r6
 801071e:	4628      	mov	r0, r5
 8010720:	47b8      	blx	r7
 8010722:	3001      	adds	r0, #1
 8010724:	d12c      	bne.n	8010780 <_printf_float+0x24c>
 8010726:	e764      	b.n	80105f2 <_printf_float+0xbe>
 8010728:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801072c:	f240 80e0 	bls.w	80108f0 <_printf_float+0x3bc>
 8010730:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010734:	2200      	movs	r2, #0
 8010736:	2300      	movs	r3, #0
 8010738:	f7f0 f9de 	bl	8000af8 <__aeabi_dcmpeq>
 801073c:	2800      	cmp	r0, #0
 801073e:	d034      	beq.n	80107aa <_printf_float+0x276>
 8010740:	4a37      	ldr	r2, [pc, #220]	; (8010820 <_printf_float+0x2ec>)
 8010742:	2301      	movs	r3, #1
 8010744:	4631      	mov	r1, r6
 8010746:	4628      	mov	r0, r5
 8010748:	47b8      	blx	r7
 801074a:	3001      	adds	r0, #1
 801074c:	f43f af51 	beq.w	80105f2 <_printf_float+0xbe>
 8010750:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010754:	429a      	cmp	r2, r3
 8010756:	db02      	blt.n	801075e <_printf_float+0x22a>
 8010758:	6823      	ldr	r3, [r4, #0]
 801075a:	07d8      	lsls	r0, r3, #31
 801075c:	d510      	bpl.n	8010780 <_printf_float+0x24c>
 801075e:	ee18 3a10 	vmov	r3, s16
 8010762:	4652      	mov	r2, sl
 8010764:	4631      	mov	r1, r6
 8010766:	4628      	mov	r0, r5
 8010768:	47b8      	blx	r7
 801076a:	3001      	adds	r0, #1
 801076c:	f43f af41 	beq.w	80105f2 <_printf_float+0xbe>
 8010770:	f04f 0800 	mov.w	r8, #0
 8010774:	f104 091a 	add.w	r9, r4, #26
 8010778:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801077a:	3b01      	subs	r3, #1
 801077c:	4543      	cmp	r3, r8
 801077e:	dc09      	bgt.n	8010794 <_printf_float+0x260>
 8010780:	6823      	ldr	r3, [r4, #0]
 8010782:	079b      	lsls	r3, r3, #30
 8010784:	f100 8107 	bmi.w	8010996 <_printf_float+0x462>
 8010788:	68e0      	ldr	r0, [r4, #12]
 801078a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801078c:	4298      	cmp	r0, r3
 801078e:	bfb8      	it	lt
 8010790:	4618      	movlt	r0, r3
 8010792:	e730      	b.n	80105f6 <_printf_float+0xc2>
 8010794:	2301      	movs	r3, #1
 8010796:	464a      	mov	r2, r9
 8010798:	4631      	mov	r1, r6
 801079a:	4628      	mov	r0, r5
 801079c:	47b8      	blx	r7
 801079e:	3001      	adds	r0, #1
 80107a0:	f43f af27 	beq.w	80105f2 <_printf_float+0xbe>
 80107a4:	f108 0801 	add.w	r8, r8, #1
 80107a8:	e7e6      	b.n	8010778 <_printf_float+0x244>
 80107aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80107ac:	2b00      	cmp	r3, #0
 80107ae:	dc39      	bgt.n	8010824 <_printf_float+0x2f0>
 80107b0:	4a1b      	ldr	r2, [pc, #108]	; (8010820 <_printf_float+0x2ec>)
 80107b2:	2301      	movs	r3, #1
 80107b4:	4631      	mov	r1, r6
 80107b6:	4628      	mov	r0, r5
 80107b8:	47b8      	blx	r7
 80107ba:	3001      	adds	r0, #1
 80107bc:	f43f af19 	beq.w	80105f2 <_printf_float+0xbe>
 80107c0:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80107c4:	4313      	orrs	r3, r2
 80107c6:	d102      	bne.n	80107ce <_printf_float+0x29a>
 80107c8:	6823      	ldr	r3, [r4, #0]
 80107ca:	07d9      	lsls	r1, r3, #31
 80107cc:	d5d8      	bpl.n	8010780 <_printf_float+0x24c>
 80107ce:	ee18 3a10 	vmov	r3, s16
 80107d2:	4652      	mov	r2, sl
 80107d4:	4631      	mov	r1, r6
 80107d6:	4628      	mov	r0, r5
 80107d8:	47b8      	blx	r7
 80107da:	3001      	adds	r0, #1
 80107dc:	f43f af09 	beq.w	80105f2 <_printf_float+0xbe>
 80107e0:	f04f 0900 	mov.w	r9, #0
 80107e4:	f104 0a1a 	add.w	sl, r4, #26
 80107e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80107ea:	425b      	negs	r3, r3
 80107ec:	454b      	cmp	r3, r9
 80107ee:	dc01      	bgt.n	80107f4 <_printf_float+0x2c0>
 80107f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80107f2:	e792      	b.n	801071a <_printf_float+0x1e6>
 80107f4:	2301      	movs	r3, #1
 80107f6:	4652      	mov	r2, sl
 80107f8:	4631      	mov	r1, r6
 80107fa:	4628      	mov	r0, r5
 80107fc:	47b8      	blx	r7
 80107fe:	3001      	adds	r0, #1
 8010800:	f43f aef7 	beq.w	80105f2 <_printf_float+0xbe>
 8010804:	f109 0901 	add.w	r9, r9, #1
 8010808:	e7ee      	b.n	80107e8 <_printf_float+0x2b4>
 801080a:	bf00      	nop
 801080c:	7fefffff 	.word	0x7fefffff
 8010810:	08014ad4 	.word	0x08014ad4
 8010814:	08014ad8 	.word	0x08014ad8
 8010818:	08014adc 	.word	0x08014adc
 801081c:	08014ae0 	.word	0x08014ae0
 8010820:	08014ae4 	.word	0x08014ae4
 8010824:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010826:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010828:	429a      	cmp	r2, r3
 801082a:	bfa8      	it	ge
 801082c:	461a      	movge	r2, r3
 801082e:	2a00      	cmp	r2, #0
 8010830:	4691      	mov	r9, r2
 8010832:	dc37      	bgt.n	80108a4 <_printf_float+0x370>
 8010834:	f04f 0b00 	mov.w	fp, #0
 8010838:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801083c:	f104 021a 	add.w	r2, r4, #26
 8010840:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010842:	9305      	str	r3, [sp, #20]
 8010844:	eba3 0309 	sub.w	r3, r3, r9
 8010848:	455b      	cmp	r3, fp
 801084a:	dc33      	bgt.n	80108b4 <_printf_float+0x380>
 801084c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010850:	429a      	cmp	r2, r3
 8010852:	db3b      	blt.n	80108cc <_printf_float+0x398>
 8010854:	6823      	ldr	r3, [r4, #0]
 8010856:	07da      	lsls	r2, r3, #31
 8010858:	d438      	bmi.n	80108cc <_printf_float+0x398>
 801085a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 801085e:	eba2 0903 	sub.w	r9, r2, r3
 8010862:	9b05      	ldr	r3, [sp, #20]
 8010864:	1ad2      	subs	r2, r2, r3
 8010866:	4591      	cmp	r9, r2
 8010868:	bfa8      	it	ge
 801086a:	4691      	movge	r9, r2
 801086c:	f1b9 0f00 	cmp.w	r9, #0
 8010870:	dc35      	bgt.n	80108de <_printf_float+0x3aa>
 8010872:	f04f 0800 	mov.w	r8, #0
 8010876:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801087a:	f104 0a1a 	add.w	sl, r4, #26
 801087e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010882:	1a9b      	subs	r3, r3, r2
 8010884:	eba3 0309 	sub.w	r3, r3, r9
 8010888:	4543      	cmp	r3, r8
 801088a:	f77f af79 	ble.w	8010780 <_printf_float+0x24c>
 801088e:	2301      	movs	r3, #1
 8010890:	4652      	mov	r2, sl
 8010892:	4631      	mov	r1, r6
 8010894:	4628      	mov	r0, r5
 8010896:	47b8      	blx	r7
 8010898:	3001      	adds	r0, #1
 801089a:	f43f aeaa 	beq.w	80105f2 <_printf_float+0xbe>
 801089e:	f108 0801 	add.w	r8, r8, #1
 80108a2:	e7ec      	b.n	801087e <_printf_float+0x34a>
 80108a4:	4613      	mov	r3, r2
 80108a6:	4631      	mov	r1, r6
 80108a8:	4642      	mov	r2, r8
 80108aa:	4628      	mov	r0, r5
 80108ac:	47b8      	blx	r7
 80108ae:	3001      	adds	r0, #1
 80108b0:	d1c0      	bne.n	8010834 <_printf_float+0x300>
 80108b2:	e69e      	b.n	80105f2 <_printf_float+0xbe>
 80108b4:	2301      	movs	r3, #1
 80108b6:	4631      	mov	r1, r6
 80108b8:	4628      	mov	r0, r5
 80108ba:	9205      	str	r2, [sp, #20]
 80108bc:	47b8      	blx	r7
 80108be:	3001      	adds	r0, #1
 80108c0:	f43f ae97 	beq.w	80105f2 <_printf_float+0xbe>
 80108c4:	9a05      	ldr	r2, [sp, #20]
 80108c6:	f10b 0b01 	add.w	fp, fp, #1
 80108ca:	e7b9      	b.n	8010840 <_printf_float+0x30c>
 80108cc:	ee18 3a10 	vmov	r3, s16
 80108d0:	4652      	mov	r2, sl
 80108d2:	4631      	mov	r1, r6
 80108d4:	4628      	mov	r0, r5
 80108d6:	47b8      	blx	r7
 80108d8:	3001      	adds	r0, #1
 80108da:	d1be      	bne.n	801085a <_printf_float+0x326>
 80108dc:	e689      	b.n	80105f2 <_printf_float+0xbe>
 80108de:	9a05      	ldr	r2, [sp, #20]
 80108e0:	464b      	mov	r3, r9
 80108e2:	4442      	add	r2, r8
 80108e4:	4631      	mov	r1, r6
 80108e6:	4628      	mov	r0, r5
 80108e8:	47b8      	blx	r7
 80108ea:	3001      	adds	r0, #1
 80108ec:	d1c1      	bne.n	8010872 <_printf_float+0x33e>
 80108ee:	e680      	b.n	80105f2 <_printf_float+0xbe>
 80108f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80108f2:	2a01      	cmp	r2, #1
 80108f4:	dc01      	bgt.n	80108fa <_printf_float+0x3c6>
 80108f6:	07db      	lsls	r3, r3, #31
 80108f8:	d53a      	bpl.n	8010970 <_printf_float+0x43c>
 80108fa:	2301      	movs	r3, #1
 80108fc:	4642      	mov	r2, r8
 80108fe:	4631      	mov	r1, r6
 8010900:	4628      	mov	r0, r5
 8010902:	47b8      	blx	r7
 8010904:	3001      	adds	r0, #1
 8010906:	f43f ae74 	beq.w	80105f2 <_printf_float+0xbe>
 801090a:	ee18 3a10 	vmov	r3, s16
 801090e:	4652      	mov	r2, sl
 8010910:	4631      	mov	r1, r6
 8010912:	4628      	mov	r0, r5
 8010914:	47b8      	blx	r7
 8010916:	3001      	adds	r0, #1
 8010918:	f43f ae6b 	beq.w	80105f2 <_printf_float+0xbe>
 801091c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010920:	2200      	movs	r2, #0
 8010922:	2300      	movs	r3, #0
 8010924:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8010928:	f7f0 f8e6 	bl	8000af8 <__aeabi_dcmpeq>
 801092c:	b9d8      	cbnz	r0, 8010966 <_printf_float+0x432>
 801092e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8010932:	f108 0201 	add.w	r2, r8, #1
 8010936:	4631      	mov	r1, r6
 8010938:	4628      	mov	r0, r5
 801093a:	47b8      	blx	r7
 801093c:	3001      	adds	r0, #1
 801093e:	d10e      	bne.n	801095e <_printf_float+0x42a>
 8010940:	e657      	b.n	80105f2 <_printf_float+0xbe>
 8010942:	2301      	movs	r3, #1
 8010944:	4652      	mov	r2, sl
 8010946:	4631      	mov	r1, r6
 8010948:	4628      	mov	r0, r5
 801094a:	47b8      	blx	r7
 801094c:	3001      	adds	r0, #1
 801094e:	f43f ae50 	beq.w	80105f2 <_printf_float+0xbe>
 8010952:	f108 0801 	add.w	r8, r8, #1
 8010956:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010958:	3b01      	subs	r3, #1
 801095a:	4543      	cmp	r3, r8
 801095c:	dcf1      	bgt.n	8010942 <_printf_float+0x40e>
 801095e:	464b      	mov	r3, r9
 8010960:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8010964:	e6da      	b.n	801071c <_printf_float+0x1e8>
 8010966:	f04f 0800 	mov.w	r8, #0
 801096a:	f104 0a1a 	add.w	sl, r4, #26
 801096e:	e7f2      	b.n	8010956 <_printf_float+0x422>
 8010970:	2301      	movs	r3, #1
 8010972:	4642      	mov	r2, r8
 8010974:	e7df      	b.n	8010936 <_printf_float+0x402>
 8010976:	2301      	movs	r3, #1
 8010978:	464a      	mov	r2, r9
 801097a:	4631      	mov	r1, r6
 801097c:	4628      	mov	r0, r5
 801097e:	47b8      	blx	r7
 8010980:	3001      	adds	r0, #1
 8010982:	f43f ae36 	beq.w	80105f2 <_printf_float+0xbe>
 8010986:	f108 0801 	add.w	r8, r8, #1
 801098a:	68e3      	ldr	r3, [r4, #12]
 801098c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801098e:	1a5b      	subs	r3, r3, r1
 8010990:	4543      	cmp	r3, r8
 8010992:	dcf0      	bgt.n	8010976 <_printf_float+0x442>
 8010994:	e6f8      	b.n	8010788 <_printf_float+0x254>
 8010996:	f04f 0800 	mov.w	r8, #0
 801099a:	f104 0919 	add.w	r9, r4, #25
 801099e:	e7f4      	b.n	801098a <_printf_float+0x456>

080109a0 <_printf_common>:
 80109a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80109a4:	4616      	mov	r6, r2
 80109a6:	4699      	mov	r9, r3
 80109a8:	688a      	ldr	r2, [r1, #8]
 80109aa:	690b      	ldr	r3, [r1, #16]
 80109ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80109b0:	4293      	cmp	r3, r2
 80109b2:	bfb8      	it	lt
 80109b4:	4613      	movlt	r3, r2
 80109b6:	6033      	str	r3, [r6, #0]
 80109b8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80109bc:	4607      	mov	r7, r0
 80109be:	460c      	mov	r4, r1
 80109c0:	b10a      	cbz	r2, 80109c6 <_printf_common+0x26>
 80109c2:	3301      	adds	r3, #1
 80109c4:	6033      	str	r3, [r6, #0]
 80109c6:	6823      	ldr	r3, [r4, #0]
 80109c8:	0699      	lsls	r1, r3, #26
 80109ca:	bf42      	ittt	mi
 80109cc:	6833      	ldrmi	r3, [r6, #0]
 80109ce:	3302      	addmi	r3, #2
 80109d0:	6033      	strmi	r3, [r6, #0]
 80109d2:	6825      	ldr	r5, [r4, #0]
 80109d4:	f015 0506 	ands.w	r5, r5, #6
 80109d8:	d106      	bne.n	80109e8 <_printf_common+0x48>
 80109da:	f104 0a19 	add.w	sl, r4, #25
 80109de:	68e3      	ldr	r3, [r4, #12]
 80109e0:	6832      	ldr	r2, [r6, #0]
 80109e2:	1a9b      	subs	r3, r3, r2
 80109e4:	42ab      	cmp	r3, r5
 80109e6:	dc26      	bgt.n	8010a36 <_printf_common+0x96>
 80109e8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80109ec:	1e13      	subs	r3, r2, #0
 80109ee:	6822      	ldr	r2, [r4, #0]
 80109f0:	bf18      	it	ne
 80109f2:	2301      	movne	r3, #1
 80109f4:	0692      	lsls	r2, r2, #26
 80109f6:	d42b      	bmi.n	8010a50 <_printf_common+0xb0>
 80109f8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80109fc:	4649      	mov	r1, r9
 80109fe:	4638      	mov	r0, r7
 8010a00:	47c0      	blx	r8
 8010a02:	3001      	adds	r0, #1
 8010a04:	d01e      	beq.n	8010a44 <_printf_common+0xa4>
 8010a06:	6823      	ldr	r3, [r4, #0]
 8010a08:	6922      	ldr	r2, [r4, #16]
 8010a0a:	f003 0306 	and.w	r3, r3, #6
 8010a0e:	2b04      	cmp	r3, #4
 8010a10:	bf02      	ittt	eq
 8010a12:	68e5      	ldreq	r5, [r4, #12]
 8010a14:	6833      	ldreq	r3, [r6, #0]
 8010a16:	1aed      	subeq	r5, r5, r3
 8010a18:	68a3      	ldr	r3, [r4, #8]
 8010a1a:	bf0c      	ite	eq
 8010a1c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010a20:	2500      	movne	r5, #0
 8010a22:	4293      	cmp	r3, r2
 8010a24:	bfc4      	itt	gt
 8010a26:	1a9b      	subgt	r3, r3, r2
 8010a28:	18ed      	addgt	r5, r5, r3
 8010a2a:	2600      	movs	r6, #0
 8010a2c:	341a      	adds	r4, #26
 8010a2e:	42b5      	cmp	r5, r6
 8010a30:	d11a      	bne.n	8010a68 <_printf_common+0xc8>
 8010a32:	2000      	movs	r0, #0
 8010a34:	e008      	b.n	8010a48 <_printf_common+0xa8>
 8010a36:	2301      	movs	r3, #1
 8010a38:	4652      	mov	r2, sl
 8010a3a:	4649      	mov	r1, r9
 8010a3c:	4638      	mov	r0, r7
 8010a3e:	47c0      	blx	r8
 8010a40:	3001      	adds	r0, #1
 8010a42:	d103      	bne.n	8010a4c <_printf_common+0xac>
 8010a44:	f04f 30ff 	mov.w	r0, #4294967295
 8010a48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010a4c:	3501      	adds	r5, #1
 8010a4e:	e7c6      	b.n	80109de <_printf_common+0x3e>
 8010a50:	18e1      	adds	r1, r4, r3
 8010a52:	1c5a      	adds	r2, r3, #1
 8010a54:	2030      	movs	r0, #48	; 0x30
 8010a56:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010a5a:	4422      	add	r2, r4
 8010a5c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010a60:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010a64:	3302      	adds	r3, #2
 8010a66:	e7c7      	b.n	80109f8 <_printf_common+0x58>
 8010a68:	2301      	movs	r3, #1
 8010a6a:	4622      	mov	r2, r4
 8010a6c:	4649      	mov	r1, r9
 8010a6e:	4638      	mov	r0, r7
 8010a70:	47c0      	blx	r8
 8010a72:	3001      	adds	r0, #1
 8010a74:	d0e6      	beq.n	8010a44 <_printf_common+0xa4>
 8010a76:	3601      	adds	r6, #1
 8010a78:	e7d9      	b.n	8010a2e <_printf_common+0x8e>
	...

08010a7c <_printf_i>:
 8010a7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010a80:	7e0f      	ldrb	r7, [r1, #24]
 8010a82:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010a84:	2f78      	cmp	r7, #120	; 0x78
 8010a86:	4691      	mov	r9, r2
 8010a88:	4680      	mov	r8, r0
 8010a8a:	460c      	mov	r4, r1
 8010a8c:	469a      	mov	sl, r3
 8010a8e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8010a92:	d807      	bhi.n	8010aa4 <_printf_i+0x28>
 8010a94:	2f62      	cmp	r7, #98	; 0x62
 8010a96:	d80a      	bhi.n	8010aae <_printf_i+0x32>
 8010a98:	2f00      	cmp	r7, #0
 8010a9a:	f000 80d4 	beq.w	8010c46 <_printf_i+0x1ca>
 8010a9e:	2f58      	cmp	r7, #88	; 0x58
 8010aa0:	f000 80c0 	beq.w	8010c24 <_printf_i+0x1a8>
 8010aa4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010aa8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010aac:	e03a      	b.n	8010b24 <_printf_i+0xa8>
 8010aae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8010ab2:	2b15      	cmp	r3, #21
 8010ab4:	d8f6      	bhi.n	8010aa4 <_printf_i+0x28>
 8010ab6:	a101      	add	r1, pc, #4	; (adr r1, 8010abc <_printf_i+0x40>)
 8010ab8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010abc:	08010b15 	.word	0x08010b15
 8010ac0:	08010b29 	.word	0x08010b29
 8010ac4:	08010aa5 	.word	0x08010aa5
 8010ac8:	08010aa5 	.word	0x08010aa5
 8010acc:	08010aa5 	.word	0x08010aa5
 8010ad0:	08010aa5 	.word	0x08010aa5
 8010ad4:	08010b29 	.word	0x08010b29
 8010ad8:	08010aa5 	.word	0x08010aa5
 8010adc:	08010aa5 	.word	0x08010aa5
 8010ae0:	08010aa5 	.word	0x08010aa5
 8010ae4:	08010aa5 	.word	0x08010aa5
 8010ae8:	08010c2d 	.word	0x08010c2d
 8010aec:	08010b55 	.word	0x08010b55
 8010af0:	08010be7 	.word	0x08010be7
 8010af4:	08010aa5 	.word	0x08010aa5
 8010af8:	08010aa5 	.word	0x08010aa5
 8010afc:	08010c4f 	.word	0x08010c4f
 8010b00:	08010aa5 	.word	0x08010aa5
 8010b04:	08010b55 	.word	0x08010b55
 8010b08:	08010aa5 	.word	0x08010aa5
 8010b0c:	08010aa5 	.word	0x08010aa5
 8010b10:	08010bef 	.word	0x08010bef
 8010b14:	682b      	ldr	r3, [r5, #0]
 8010b16:	1d1a      	adds	r2, r3, #4
 8010b18:	681b      	ldr	r3, [r3, #0]
 8010b1a:	602a      	str	r2, [r5, #0]
 8010b1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010b20:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010b24:	2301      	movs	r3, #1
 8010b26:	e09f      	b.n	8010c68 <_printf_i+0x1ec>
 8010b28:	6820      	ldr	r0, [r4, #0]
 8010b2a:	682b      	ldr	r3, [r5, #0]
 8010b2c:	0607      	lsls	r7, r0, #24
 8010b2e:	f103 0104 	add.w	r1, r3, #4
 8010b32:	6029      	str	r1, [r5, #0]
 8010b34:	d501      	bpl.n	8010b3a <_printf_i+0xbe>
 8010b36:	681e      	ldr	r6, [r3, #0]
 8010b38:	e003      	b.n	8010b42 <_printf_i+0xc6>
 8010b3a:	0646      	lsls	r6, r0, #25
 8010b3c:	d5fb      	bpl.n	8010b36 <_printf_i+0xba>
 8010b3e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8010b42:	2e00      	cmp	r6, #0
 8010b44:	da03      	bge.n	8010b4e <_printf_i+0xd2>
 8010b46:	232d      	movs	r3, #45	; 0x2d
 8010b48:	4276      	negs	r6, r6
 8010b4a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010b4e:	485a      	ldr	r0, [pc, #360]	; (8010cb8 <_printf_i+0x23c>)
 8010b50:	230a      	movs	r3, #10
 8010b52:	e012      	b.n	8010b7a <_printf_i+0xfe>
 8010b54:	682b      	ldr	r3, [r5, #0]
 8010b56:	6820      	ldr	r0, [r4, #0]
 8010b58:	1d19      	adds	r1, r3, #4
 8010b5a:	6029      	str	r1, [r5, #0]
 8010b5c:	0605      	lsls	r5, r0, #24
 8010b5e:	d501      	bpl.n	8010b64 <_printf_i+0xe8>
 8010b60:	681e      	ldr	r6, [r3, #0]
 8010b62:	e002      	b.n	8010b6a <_printf_i+0xee>
 8010b64:	0641      	lsls	r1, r0, #25
 8010b66:	d5fb      	bpl.n	8010b60 <_printf_i+0xe4>
 8010b68:	881e      	ldrh	r6, [r3, #0]
 8010b6a:	4853      	ldr	r0, [pc, #332]	; (8010cb8 <_printf_i+0x23c>)
 8010b6c:	2f6f      	cmp	r7, #111	; 0x6f
 8010b6e:	bf0c      	ite	eq
 8010b70:	2308      	moveq	r3, #8
 8010b72:	230a      	movne	r3, #10
 8010b74:	2100      	movs	r1, #0
 8010b76:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010b7a:	6865      	ldr	r5, [r4, #4]
 8010b7c:	60a5      	str	r5, [r4, #8]
 8010b7e:	2d00      	cmp	r5, #0
 8010b80:	bfa2      	ittt	ge
 8010b82:	6821      	ldrge	r1, [r4, #0]
 8010b84:	f021 0104 	bicge.w	r1, r1, #4
 8010b88:	6021      	strge	r1, [r4, #0]
 8010b8a:	b90e      	cbnz	r6, 8010b90 <_printf_i+0x114>
 8010b8c:	2d00      	cmp	r5, #0
 8010b8e:	d04b      	beq.n	8010c28 <_printf_i+0x1ac>
 8010b90:	4615      	mov	r5, r2
 8010b92:	fbb6 f1f3 	udiv	r1, r6, r3
 8010b96:	fb03 6711 	mls	r7, r3, r1, r6
 8010b9a:	5dc7      	ldrb	r7, [r0, r7]
 8010b9c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8010ba0:	4637      	mov	r7, r6
 8010ba2:	42bb      	cmp	r3, r7
 8010ba4:	460e      	mov	r6, r1
 8010ba6:	d9f4      	bls.n	8010b92 <_printf_i+0x116>
 8010ba8:	2b08      	cmp	r3, #8
 8010baa:	d10b      	bne.n	8010bc4 <_printf_i+0x148>
 8010bac:	6823      	ldr	r3, [r4, #0]
 8010bae:	07de      	lsls	r6, r3, #31
 8010bb0:	d508      	bpl.n	8010bc4 <_printf_i+0x148>
 8010bb2:	6923      	ldr	r3, [r4, #16]
 8010bb4:	6861      	ldr	r1, [r4, #4]
 8010bb6:	4299      	cmp	r1, r3
 8010bb8:	bfde      	ittt	le
 8010bba:	2330      	movle	r3, #48	; 0x30
 8010bbc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8010bc0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8010bc4:	1b52      	subs	r2, r2, r5
 8010bc6:	6122      	str	r2, [r4, #16]
 8010bc8:	f8cd a000 	str.w	sl, [sp]
 8010bcc:	464b      	mov	r3, r9
 8010bce:	aa03      	add	r2, sp, #12
 8010bd0:	4621      	mov	r1, r4
 8010bd2:	4640      	mov	r0, r8
 8010bd4:	f7ff fee4 	bl	80109a0 <_printf_common>
 8010bd8:	3001      	adds	r0, #1
 8010bda:	d14a      	bne.n	8010c72 <_printf_i+0x1f6>
 8010bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8010be0:	b004      	add	sp, #16
 8010be2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010be6:	6823      	ldr	r3, [r4, #0]
 8010be8:	f043 0320 	orr.w	r3, r3, #32
 8010bec:	6023      	str	r3, [r4, #0]
 8010bee:	4833      	ldr	r0, [pc, #204]	; (8010cbc <_printf_i+0x240>)
 8010bf0:	2778      	movs	r7, #120	; 0x78
 8010bf2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8010bf6:	6823      	ldr	r3, [r4, #0]
 8010bf8:	6829      	ldr	r1, [r5, #0]
 8010bfa:	061f      	lsls	r7, r3, #24
 8010bfc:	f851 6b04 	ldr.w	r6, [r1], #4
 8010c00:	d402      	bmi.n	8010c08 <_printf_i+0x18c>
 8010c02:	065f      	lsls	r7, r3, #25
 8010c04:	bf48      	it	mi
 8010c06:	b2b6      	uxthmi	r6, r6
 8010c08:	07df      	lsls	r7, r3, #31
 8010c0a:	bf48      	it	mi
 8010c0c:	f043 0320 	orrmi.w	r3, r3, #32
 8010c10:	6029      	str	r1, [r5, #0]
 8010c12:	bf48      	it	mi
 8010c14:	6023      	strmi	r3, [r4, #0]
 8010c16:	b91e      	cbnz	r6, 8010c20 <_printf_i+0x1a4>
 8010c18:	6823      	ldr	r3, [r4, #0]
 8010c1a:	f023 0320 	bic.w	r3, r3, #32
 8010c1e:	6023      	str	r3, [r4, #0]
 8010c20:	2310      	movs	r3, #16
 8010c22:	e7a7      	b.n	8010b74 <_printf_i+0xf8>
 8010c24:	4824      	ldr	r0, [pc, #144]	; (8010cb8 <_printf_i+0x23c>)
 8010c26:	e7e4      	b.n	8010bf2 <_printf_i+0x176>
 8010c28:	4615      	mov	r5, r2
 8010c2a:	e7bd      	b.n	8010ba8 <_printf_i+0x12c>
 8010c2c:	682b      	ldr	r3, [r5, #0]
 8010c2e:	6826      	ldr	r6, [r4, #0]
 8010c30:	6961      	ldr	r1, [r4, #20]
 8010c32:	1d18      	adds	r0, r3, #4
 8010c34:	6028      	str	r0, [r5, #0]
 8010c36:	0635      	lsls	r5, r6, #24
 8010c38:	681b      	ldr	r3, [r3, #0]
 8010c3a:	d501      	bpl.n	8010c40 <_printf_i+0x1c4>
 8010c3c:	6019      	str	r1, [r3, #0]
 8010c3e:	e002      	b.n	8010c46 <_printf_i+0x1ca>
 8010c40:	0670      	lsls	r0, r6, #25
 8010c42:	d5fb      	bpl.n	8010c3c <_printf_i+0x1c0>
 8010c44:	8019      	strh	r1, [r3, #0]
 8010c46:	2300      	movs	r3, #0
 8010c48:	6123      	str	r3, [r4, #16]
 8010c4a:	4615      	mov	r5, r2
 8010c4c:	e7bc      	b.n	8010bc8 <_printf_i+0x14c>
 8010c4e:	682b      	ldr	r3, [r5, #0]
 8010c50:	1d1a      	adds	r2, r3, #4
 8010c52:	602a      	str	r2, [r5, #0]
 8010c54:	681d      	ldr	r5, [r3, #0]
 8010c56:	6862      	ldr	r2, [r4, #4]
 8010c58:	2100      	movs	r1, #0
 8010c5a:	4628      	mov	r0, r5
 8010c5c:	f7ef fad0 	bl	8000200 <memchr>
 8010c60:	b108      	cbz	r0, 8010c66 <_printf_i+0x1ea>
 8010c62:	1b40      	subs	r0, r0, r5
 8010c64:	6060      	str	r0, [r4, #4]
 8010c66:	6863      	ldr	r3, [r4, #4]
 8010c68:	6123      	str	r3, [r4, #16]
 8010c6a:	2300      	movs	r3, #0
 8010c6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010c70:	e7aa      	b.n	8010bc8 <_printf_i+0x14c>
 8010c72:	6923      	ldr	r3, [r4, #16]
 8010c74:	462a      	mov	r2, r5
 8010c76:	4649      	mov	r1, r9
 8010c78:	4640      	mov	r0, r8
 8010c7a:	47d0      	blx	sl
 8010c7c:	3001      	adds	r0, #1
 8010c7e:	d0ad      	beq.n	8010bdc <_printf_i+0x160>
 8010c80:	6823      	ldr	r3, [r4, #0]
 8010c82:	079b      	lsls	r3, r3, #30
 8010c84:	d413      	bmi.n	8010cae <_printf_i+0x232>
 8010c86:	68e0      	ldr	r0, [r4, #12]
 8010c88:	9b03      	ldr	r3, [sp, #12]
 8010c8a:	4298      	cmp	r0, r3
 8010c8c:	bfb8      	it	lt
 8010c8e:	4618      	movlt	r0, r3
 8010c90:	e7a6      	b.n	8010be0 <_printf_i+0x164>
 8010c92:	2301      	movs	r3, #1
 8010c94:	4632      	mov	r2, r6
 8010c96:	4649      	mov	r1, r9
 8010c98:	4640      	mov	r0, r8
 8010c9a:	47d0      	blx	sl
 8010c9c:	3001      	adds	r0, #1
 8010c9e:	d09d      	beq.n	8010bdc <_printf_i+0x160>
 8010ca0:	3501      	adds	r5, #1
 8010ca2:	68e3      	ldr	r3, [r4, #12]
 8010ca4:	9903      	ldr	r1, [sp, #12]
 8010ca6:	1a5b      	subs	r3, r3, r1
 8010ca8:	42ab      	cmp	r3, r5
 8010caa:	dcf2      	bgt.n	8010c92 <_printf_i+0x216>
 8010cac:	e7eb      	b.n	8010c86 <_printf_i+0x20a>
 8010cae:	2500      	movs	r5, #0
 8010cb0:	f104 0619 	add.w	r6, r4, #25
 8010cb4:	e7f5      	b.n	8010ca2 <_printf_i+0x226>
 8010cb6:	bf00      	nop
 8010cb8:	08014ae6 	.word	0x08014ae6
 8010cbc:	08014af7 	.word	0x08014af7

08010cc0 <std>:
 8010cc0:	2300      	movs	r3, #0
 8010cc2:	b510      	push	{r4, lr}
 8010cc4:	4604      	mov	r4, r0
 8010cc6:	e9c0 3300 	strd	r3, r3, [r0]
 8010cca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010cce:	6083      	str	r3, [r0, #8]
 8010cd0:	8181      	strh	r1, [r0, #12]
 8010cd2:	6643      	str	r3, [r0, #100]	; 0x64
 8010cd4:	81c2      	strh	r2, [r0, #14]
 8010cd6:	6183      	str	r3, [r0, #24]
 8010cd8:	4619      	mov	r1, r3
 8010cda:	2208      	movs	r2, #8
 8010cdc:	305c      	adds	r0, #92	; 0x5c
 8010cde:	f000 f914 	bl	8010f0a <memset>
 8010ce2:	4b0d      	ldr	r3, [pc, #52]	; (8010d18 <std+0x58>)
 8010ce4:	6263      	str	r3, [r4, #36]	; 0x24
 8010ce6:	4b0d      	ldr	r3, [pc, #52]	; (8010d1c <std+0x5c>)
 8010ce8:	62a3      	str	r3, [r4, #40]	; 0x28
 8010cea:	4b0d      	ldr	r3, [pc, #52]	; (8010d20 <std+0x60>)
 8010cec:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010cee:	4b0d      	ldr	r3, [pc, #52]	; (8010d24 <std+0x64>)
 8010cf0:	6323      	str	r3, [r4, #48]	; 0x30
 8010cf2:	4b0d      	ldr	r3, [pc, #52]	; (8010d28 <std+0x68>)
 8010cf4:	6224      	str	r4, [r4, #32]
 8010cf6:	429c      	cmp	r4, r3
 8010cf8:	d006      	beq.n	8010d08 <std+0x48>
 8010cfa:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8010cfe:	4294      	cmp	r4, r2
 8010d00:	d002      	beq.n	8010d08 <std+0x48>
 8010d02:	33d0      	adds	r3, #208	; 0xd0
 8010d04:	429c      	cmp	r4, r3
 8010d06:	d105      	bne.n	8010d14 <std+0x54>
 8010d08:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8010d0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010d10:	f000 b988 	b.w	8011024 <__retarget_lock_init_recursive>
 8010d14:	bd10      	pop	{r4, pc}
 8010d16:	bf00      	nop
 8010d18:	08010e85 	.word	0x08010e85
 8010d1c:	08010ea7 	.word	0x08010ea7
 8010d20:	08010edf 	.word	0x08010edf
 8010d24:	08010f03 	.word	0x08010f03
 8010d28:	200063b4 	.word	0x200063b4

08010d2c <stdio_exit_handler>:
 8010d2c:	4a02      	ldr	r2, [pc, #8]	; (8010d38 <stdio_exit_handler+0xc>)
 8010d2e:	4903      	ldr	r1, [pc, #12]	; (8010d3c <stdio_exit_handler+0x10>)
 8010d30:	4803      	ldr	r0, [pc, #12]	; (8010d40 <stdio_exit_handler+0x14>)
 8010d32:	f000 b869 	b.w	8010e08 <_fwalk_sglue>
 8010d36:	bf00      	nop
 8010d38:	2000006c 	.word	0x2000006c
 8010d3c:	08012889 	.word	0x08012889
 8010d40:	20000078 	.word	0x20000078

08010d44 <cleanup_stdio>:
 8010d44:	6841      	ldr	r1, [r0, #4]
 8010d46:	4b0c      	ldr	r3, [pc, #48]	; (8010d78 <cleanup_stdio+0x34>)
 8010d48:	4299      	cmp	r1, r3
 8010d4a:	b510      	push	{r4, lr}
 8010d4c:	4604      	mov	r4, r0
 8010d4e:	d001      	beq.n	8010d54 <cleanup_stdio+0x10>
 8010d50:	f001 fd9a 	bl	8012888 <_fflush_r>
 8010d54:	68a1      	ldr	r1, [r4, #8]
 8010d56:	4b09      	ldr	r3, [pc, #36]	; (8010d7c <cleanup_stdio+0x38>)
 8010d58:	4299      	cmp	r1, r3
 8010d5a:	d002      	beq.n	8010d62 <cleanup_stdio+0x1e>
 8010d5c:	4620      	mov	r0, r4
 8010d5e:	f001 fd93 	bl	8012888 <_fflush_r>
 8010d62:	68e1      	ldr	r1, [r4, #12]
 8010d64:	4b06      	ldr	r3, [pc, #24]	; (8010d80 <cleanup_stdio+0x3c>)
 8010d66:	4299      	cmp	r1, r3
 8010d68:	d004      	beq.n	8010d74 <cleanup_stdio+0x30>
 8010d6a:	4620      	mov	r0, r4
 8010d6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010d70:	f001 bd8a 	b.w	8012888 <_fflush_r>
 8010d74:	bd10      	pop	{r4, pc}
 8010d76:	bf00      	nop
 8010d78:	200063b4 	.word	0x200063b4
 8010d7c:	2000641c 	.word	0x2000641c
 8010d80:	20006484 	.word	0x20006484

08010d84 <global_stdio_init.part.0>:
 8010d84:	b510      	push	{r4, lr}
 8010d86:	4b0b      	ldr	r3, [pc, #44]	; (8010db4 <global_stdio_init.part.0+0x30>)
 8010d88:	4c0b      	ldr	r4, [pc, #44]	; (8010db8 <global_stdio_init.part.0+0x34>)
 8010d8a:	4a0c      	ldr	r2, [pc, #48]	; (8010dbc <global_stdio_init.part.0+0x38>)
 8010d8c:	601a      	str	r2, [r3, #0]
 8010d8e:	4620      	mov	r0, r4
 8010d90:	2200      	movs	r2, #0
 8010d92:	2104      	movs	r1, #4
 8010d94:	f7ff ff94 	bl	8010cc0 <std>
 8010d98:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8010d9c:	2201      	movs	r2, #1
 8010d9e:	2109      	movs	r1, #9
 8010da0:	f7ff ff8e 	bl	8010cc0 <std>
 8010da4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8010da8:	2202      	movs	r2, #2
 8010daa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010dae:	2112      	movs	r1, #18
 8010db0:	f7ff bf86 	b.w	8010cc0 <std>
 8010db4:	200064ec 	.word	0x200064ec
 8010db8:	200063b4 	.word	0x200063b4
 8010dbc:	08010d2d 	.word	0x08010d2d

08010dc0 <__sfp_lock_acquire>:
 8010dc0:	4801      	ldr	r0, [pc, #4]	; (8010dc8 <__sfp_lock_acquire+0x8>)
 8010dc2:	f000 b930 	b.w	8011026 <__retarget_lock_acquire_recursive>
 8010dc6:	bf00      	nop
 8010dc8:	200064f5 	.word	0x200064f5

08010dcc <__sfp_lock_release>:
 8010dcc:	4801      	ldr	r0, [pc, #4]	; (8010dd4 <__sfp_lock_release+0x8>)
 8010dce:	f000 b92b 	b.w	8011028 <__retarget_lock_release_recursive>
 8010dd2:	bf00      	nop
 8010dd4:	200064f5 	.word	0x200064f5

08010dd8 <__sinit>:
 8010dd8:	b510      	push	{r4, lr}
 8010dda:	4604      	mov	r4, r0
 8010ddc:	f7ff fff0 	bl	8010dc0 <__sfp_lock_acquire>
 8010de0:	6a23      	ldr	r3, [r4, #32]
 8010de2:	b11b      	cbz	r3, 8010dec <__sinit+0x14>
 8010de4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010de8:	f7ff bff0 	b.w	8010dcc <__sfp_lock_release>
 8010dec:	4b04      	ldr	r3, [pc, #16]	; (8010e00 <__sinit+0x28>)
 8010dee:	6223      	str	r3, [r4, #32]
 8010df0:	4b04      	ldr	r3, [pc, #16]	; (8010e04 <__sinit+0x2c>)
 8010df2:	681b      	ldr	r3, [r3, #0]
 8010df4:	2b00      	cmp	r3, #0
 8010df6:	d1f5      	bne.n	8010de4 <__sinit+0xc>
 8010df8:	f7ff ffc4 	bl	8010d84 <global_stdio_init.part.0>
 8010dfc:	e7f2      	b.n	8010de4 <__sinit+0xc>
 8010dfe:	bf00      	nop
 8010e00:	08010d45 	.word	0x08010d45
 8010e04:	200064ec 	.word	0x200064ec

08010e08 <_fwalk_sglue>:
 8010e08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010e0c:	4607      	mov	r7, r0
 8010e0e:	4688      	mov	r8, r1
 8010e10:	4614      	mov	r4, r2
 8010e12:	2600      	movs	r6, #0
 8010e14:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010e18:	f1b9 0901 	subs.w	r9, r9, #1
 8010e1c:	d505      	bpl.n	8010e2a <_fwalk_sglue+0x22>
 8010e1e:	6824      	ldr	r4, [r4, #0]
 8010e20:	2c00      	cmp	r4, #0
 8010e22:	d1f7      	bne.n	8010e14 <_fwalk_sglue+0xc>
 8010e24:	4630      	mov	r0, r6
 8010e26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010e2a:	89ab      	ldrh	r3, [r5, #12]
 8010e2c:	2b01      	cmp	r3, #1
 8010e2e:	d907      	bls.n	8010e40 <_fwalk_sglue+0x38>
 8010e30:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010e34:	3301      	adds	r3, #1
 8010e36:	d003      	beq.n	8010e40 <_fwalk_sglue+0x38>
 8010e38:	4629      	mov	r1, r5
 8010e3a:	4638      	mov	r0, r7
 8010e3c:	47c0      	blx	r8
 8010e3e:	4306      	orrs	r6, r0
 8010e40:	3568      	adds	r5, #104	; 0x68
 8010e42:	e7e9      	b.n	8010e18 <_fwalk_sglue+0x10>

08010e44 <siprintf>:
 8010e44:	b40e      	push	{r1, r2, r3}
 8010e46:	b500      	push	{lr}
 8010e48:	b09c      	sub	sp, #112	; 0x70
 8010e4a:	ab1d      	add	r3, sp, #116	; 0x74
 8010e4c:	9002      	str	r0, [sp, #8]
 8010e4e:	9006      	str	r0, [sp, #24]
 8010e50:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010e54:	4809      	ldr	r0, [pc, #36]	; (8010e7c <siprintf+0x38>)
 8010e56:	9107      	str	r1, [sp, #28]
 8010e58:	9104      	str	r1, [sp, #16]
 8010e5a:	4909      	ldr	r1, [pc, #36]	; (8010e80 <siprintf+0x3c>)
 8010e5c:	f853 2b04 	ldr.w	r2, [r3], #4
 8010e60:	9105      	str	r1, [sp, #20]
 8010e62:	6800      	ldr	r0, [r0, #0]
 8010e64:	9301      	str	r3, [sp, #4]
 8010e66:	a902      	add	r1, sp, #8
 8010e68:	f001 fb8a 	bl	8012580 <_svfiprintf_r>
 8010e6c:	9b02      	ldr	r3, [sp, #8]
 8010e6e:	2200      	movs	r2, #0
 8010e70:	701a      	strb	r2, [r3, #0]
 8010e72:	b01c      	add	sp, #112	; 0x70
 8010e74:	f85d eb04 	ldr.w	lr, [sp], #4
 8010e78:	b003      	add	sp, #12
 8010e7a:	4770      	bx	lr
 8010e7c:	200000c4 	.word	0x200000c4
 8010e80:	ffff0208 	.word	0xffff0208

08010e84 <__sread>:
 8010e84:	b510      	push	{r4, lr}
 8010e86:	460c      	mov	r4, r1
 8010e88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010e8c:	f000 f86c 	bl	8010f68 <_read_r>
 8010e90:	2800      	cmp	r0, #0
 8010e92:	bfab      	itete	ge
 8010e94:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010e96:	89a3      	ldrhlt	r3, [r4, #12]
 8010e98:	181b      	addge	r3, r3, r0
 8010e9a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010e9e:	bfac      	ite	ge
 8010ea0:	6563      	strge	r3, [r4, #84]	; 0x54
 8010ea2:	81a3      	strhlt	r3, [r4, #12]
 8010ea4:	bd10      	pop	{r4, pc}

08010ea6 <__swrite>:
 8010ea6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010eaa:	461f      	mov	r7, r3
 8010eac:	898b      	ldrh	r3, [r1, #12]
 8010eae:	05db      	lsls	r3, r3, #23
 8010eb0:	4605      	mov	r5, r0
 8010eb2:	460c      	mov	r4, r1
 8010eb4:	4616      	mov	r6, r2
 8010eb6:	d505      	bpl.n	8010ec4 <__swrite+0x1e>
 8010eb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010ebc:	2302      	movs	r3, #2
 8010ebe:	2200      	movs	r2, #0
 8010ec0:	f000 f840 	bl	8010f44 <_lseek_r>
 8010ec4:	89a3      	ldrh	r3, [r4, #12]
 8010ec6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010eca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010ece:	81a3      	strh	r3, [r4, #12]
 8010ed0:	4632      	mov	r2, r6
 8010ed2:	463b      	mov	r3, r7
 8010ed4:	4628      	mov	r0, r5
 8010ed6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010eda:	f000 b867 	b.w	8010fac <_write_r>

08010ede <__sseek>:
 8010ede:	b510      	push	{r4, lr}
 8010ee0:	460c      	mov	r4, r1
 8010ee2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010ee6:	f000 f82d 	bl	8010f44 <_lseek_r>
 8010eea:	1c43      	adds	r3, r0, #1
 8010eec:	89a3      	ldrh	r3, [r4, #12]
 8010eee:	bf15      	itete	ne
 8010ef0:	6560      	strne	r0, [r4, #84]	; 0x54
 8010ef2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010ef6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010efa:	81a3      	strheq	r3, [r4, #12]
 8010efc:	bf18      	it	ne
 8010efe:	81a3      	strhne	r3, [r4, #12]
 8010f00:	bd10      	pop	{r4, pc}

08010f02 <__sclose>:
 8010f02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010f06:	f000 b80d 	b.w	8010f24 <_close_r>

08010f0a <memset>:
 8010f0a:	4402      	add	r2, r0
 8010f0c:	4603      	mov	r3, r0
 8010f0e:	4293      	cmp	r3, r2
 8010f10:	d100      	bne.n	8010f14 <memset+0xa>
 8010f12:	4770      	bx	lr
 8010f14:	f803 1b01 	strb.w	r1, [r3], #1
 8010f18:	e7f9      	b.n	8010f0e <memset+0x4>
	...

08010f1c <_localeconv_r>:
 8010f1c:	4800      	ldr	r0, [pc, #0]	; (8010f20 <_localeconv_r+0x4>)
 8010f1e:	4770      	bx	lr
 8010f20:	200001b8 	.word	0x200001b8

08010f24 <_close_r>:
 8010f24:	b538      	push	{r3, r4, r5, lr}
 8010f26:	4d06      	ldr	r5, [pc, #24]	; (8010f40 <_close_r+0x1c>)
 8010f28:	2300      	movs	r3, #0
 8010f2a:	4604      	mov	r4, r0
 8010f2c:	4608      	mov	r0, r1
 8010f2e:	602b      	str	r3, [r5, #0]
 8010f30:	f7f4 ff01 	bl	8005d36 <_close>
 8010f34:	1c43      	adds	r3, r0, #1
 8010f36:	d102      	bne.n	8010f3e <_close_r+0x1a>
 8010f38:	682b      	ldr	r3, [r5, #0]
 8010f3a:	b103      	cbz	r3, 8010f3e <_close_r+0x1a>
 8010f3c:	6023      	str	r3, [r4, #0]
 8010f3e:	bd38      	pop	{r3, r4, r5, pc}
 8010f40:	200064f0 	.word	0x200064f0

08010f44 <_lseek_r>:
 8010f44:	b538      	push	{r3, r4, r5, lr}
 8010f46:	4d07      	ldr	r5, [pc, #28]	; (8010f64 <_lseek_r+0x20>)
 8010f48:	4604      	mov	r4, r0
 8010f4a:	4608      	mov	r0, r1
 8010f4c:	4611      	mov	r1, r2
 8010f4e:	2200      	movs	r2, #0
 8010f50:	602a      	str	r2, [r5, #0]
 8010f52:	461a      	mov	r2, r3
 8010f54:	f7f4 ff16 	bl	8005d84 <_lseek>
 8010f58:	1c43      	adds	r3, r0, #1
 8010f5a:	d102      	bne.n	8010f62 <_lseek_r+0x1e>
 8010f5c:	682b      	ldr	r3, [r5, #0]
 8010f5e:	b103      	cbz	r3, 8010f62 <_lseek_r+0x1e>
 8010f60:	6023      	str	r3, [r4, #0]
 8010f62:	bd38      	pop	{r3, r4, r5, pc}
 8010f64:	200064f0 	.word	0x200064f0

08010f68 <_read_r>:
 8010f68:	b538      	push	{r3, r4, r5, lr}
 8010f6a:	4d07      	ldr	r5, [pc, #28]	; (8010f88 <_read_r+0x20>)
 8010f6c:	4604      	mov	r4, r0
 8010f6e:	4608      	mov	r0, r1
 8010f70:	4611      	mov	r1, r2
 8010f72:	2200      	movs	r2, #0
 8010f74:	602a      	str	r2, [r5, #0]
 8010f76:	461a      	mov	r2, r3
 8010f78:	f7f4 fea4 	bl	8005cc4 <_read>
 8010f7c:	1c43      	adds	r3, r0, #1
 8010f7e:	d102      	bne.n	8010f86 <_read_r+0x1e>
 8010f80:	682b      	ldr	r3, [r5, #0]
 8010f82:	b103      	cbz	r3, 8010f86 <_read_r+0x1e>
 8010f84:	6023      	str	r3, [r4, #0]
 8010f86:	bd38      	pop	{r3, r4, r5, pc}
 8010f88:	200064f0 	.word	0x200064f0

08010f8c <_sbrk_r>:
 8010f8c:	b538      	push	{r3, r4, r5, lr}
 8010f8e:	4d06      	ldr	r5, [pc, #24]	; (8010fa8 <_sbrk_r+0x1c>)
 8010f90:	2300      	movs	r3, #0
 8010f92:	4604      	mov	r4, r0
 8010f94:	4608      	mov	r0, r1
 8010f96:	602b      	str	r3, [r5, #0]
 8010f98:	f7f4 ff02 	bl	8005da0 <_sbrk>
 8010f9c:	1c43      	adds	r3, r0, #1
 8010f9e:	d102      	bne.n	8010fa6 <_sbrk_r+0x1a>
 8010fa0:	682b      	ldr	r3, [r5, #0]
 8010fa2:	b103      	cbz	r3, 8010fa6 <_sbrk_r+0x1a>
 8010fa4:	6023      	str	r3, [r4, #0]
 8010fa6:	bd38      	pop	{r3, r4, r5, pc}
 8010fa8:	200064f0 	.word	0x200064f0

08010fac <_write_r>:
 8010fac:	b538      	push	{r3, r4, r5, lr}
 8010fae:	4d07      	ldr	r5, [pc, #28]	; (8010fcc <_write_r+0x20>)
 8010fb0:	4604      	mov	r4, r0
 8010fb2:	4608      	mov	r0, r1
 8010fb4:	4611      	mov	r1, r2
 8010fb6:	2200      	movs	r2, #0
 8010fb8:	602a      	str	r2, [r5, #0]
 8010fba:	461a      	mov	r2, r3
 8010fbc:	f7f4 fe9f 	bl	8005cfe <_write>
 8010fc0:	1c43      	adds	r3, r0, #1
 8010fc2:	d102      	bne.n	8010fca <_write_r+0x1e>
 8010fc4:	682b      	ldr	r3, [r5, #0]
 8010fc6:	b103      	cbz	r3, 8010fca <_write_r+0x1e>
 8010fc8:	6023      	str	r3, [r4, #0]
 8010fca:	bd38      	pop	{r3, r4, r5, pc}
 8010fcc:	200064f0 	.word	0x200064f0

08010fd0 <__errno>:
 8010fd0:	4b01      	ldr	r3, [pc, #4]	; (8010fd8 <__errno+0x8>)
 8010fd2:	6818      	ldr	r0, [r3, #0]
 8010fd4:	4770      	bx	lr
 8010fd6:	bf00      	nop
 8010fd8:	200000c4 	.word	0x200000c4

08010fdc <__libc_init_array>:
 8010fdc:	b570      	push	{r4, r5, r6, lr}
 8010fde:	4d0d      	ldr	r5, [pc, #52]	; (8011014 <__libc_init_array+0x38>)
 8010fe0:	4c0d      	ldr	r4, [pc, #52]	; (8011018 <__libc_init_array+0x3c>)
 8010fe2:	1b64      	subs	r4, r4, r5
 8010fe4:	10a4      	asrs	r4, r4, #2
 8010fe6:	2600      	movs	r6, #0
 8010fe8:	42a6      	cmp	r6, r4
 8010fea:	d109      	bne.n	8011000 <__libc_init_array+0x24>
 8010fec:	4d0b      	ldr	r5, [pc, #44]	; (801101c <__libc_init_array+0x40>)
 8010fee:	4c0c      	ldr	r4, [pc, #48]	; (8011020 <__libc_init_array+0x44>)
 8010ff0:	f003 fb32 	bl	8014658 <_init>
 8010ff4:	1b64      	subs	r4, r4, r5
 8010ff6:	10a4      	asrs	r4, r4, #2
 8010ff8:	2600      	movs	r6, #0
 8010ffa:	42a6      	cmp	r6, r4
 8010ffc:	d105      	bne.n	801100a <__libc_init_array+0x2e>
 8010ffe:	bd70      	pop	{r4, r5, r6, pc}
 8011000:	f855 3b04 	ldr.w	r3, [r5], #4
 8011004:	4798      	blx	r3
 8011006:	3601      	adds	r6, #1
 8011008:	e7ee      	b.n	8010fe8 <__libc_init_array+0xc>
 801100a:	f855 3b04 	ldr.w	r3, [r5], #4
 801100e:	4798      	blx	r3
 8011010:	3601      	adds	r6, #1
 8011012:	e7f2      	b.n	8010ffa <__libc_init_array+0x1e>
 8011014:	0801526c 	.word	0x0801526c
 8011018:	0801526c 	.word	0x0801526c
 801101c:	0801526c 	.word	0x0801526c
 8011020:	08015270 	.word	0x08015270

08011024 <__retarget_lock_init_recursive>:
 8011024:	4770      	bx	lr

08011026 <__retarget_lock_acquire_recursive>:
 8011026:	4770      	bx	lr

08011028 <__retarget_lock_release_recursive>:
 8011028:	4770      	bx	lr

0801102a <memcpy>:
 801102a:	440a      	add	r2, r1
 801102c:	4291      	cmp	r1, r2
 801102e:	f100 33ff 	add.w	r3, r0, #4294967295
 8011032:	d100      	bne.n	8011036 <memcpy+0xc>
 8011034:	4770      	bx	lr
 8011036:	b510      	push	{r4, lr}
 8011038:	f811 4b01 	ldrb.w	r4, [r1], #1
 801103c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011040:	4291      	cmp	r1, r2
 8011042:	d1f9      	bne.n	8011038 <memcpy+0xe>
 8011044:	bd10      	pop	{r4, pc}

08011046 <quorem>:
 8011046:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801104a:	6903      	ldr	r3, [r0, #16]
 801104c:	690c      	ldr	r4, [r1, #16]
 801104e:	42a3      	cmp	r3, r4
 8011050:	4607      	mov	r7, r0
 8011052:	db7e      	blt.n	8011152 <quorem+0x10c>
 8011054:	3c01      	subs	r4, #1
 8011056:	f101 0814 	add.w	r8, r1, #20
 801105a:	f100 0514 	add.w	r5, r0, #20
 801105e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011062:	9301      	str	r3, [sp, #4]
 8011064:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8011068:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801106c:	3301      	adds	r3, #1
 801106e:	429a      	cmp	r2, r3
 8011070:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8011074:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8011078:	fbb2 f6f3 	udiv	r6, r2, r3
 801107c:	d331      	bcc.n	80110e2 <quorem+0x9c>
 801107e:	f04f 0e00 	mov.w	lr, #0
 8011082:	4640      	mov	r0, r8
 8011084:	46ac      	mov	ip, r5
 8011086:	46f2      	mov	sl, lr
 8011088:	f850 2b04 	ldr.w	r2, [r0], #4
 801108c:	b293      	uxth	r3, r2
 801108e:	fb06 e303 	mla	r3, r6, r3, lr
 8011092:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8011096:	0c1a      	lsrs	r2, r3, #16
 8011098:	b29b      	uxth	r3, r3
 801109a:	ebaa 0303 	sub.w	r3, sl, r3
 801109e:	f8dc a000 	ldr.w	sl, [ip]
 80110a2:	fa13 f38a 	uxtah	r3, r3, sl
 80110a6:	fb06 220e 	mla	r2, r6, lr, r2
 80110aa:	9300      	str	r3, [sp, #0]
 80110ac:	9b00      	ldr	r3, [sp, #0]
 80110ae:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80110b2:	b292      	uxth	r2, r2
 80110b4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80110b8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80110bc:	f8bd 3000 	ldrh.w	r3, [sp]
 80110c0:	4581      	cmp	r9, r0
 80110c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80110c6:	f84c 3b04 	str.w	r3, [ip], #4
 80110ca:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80110ce:	d2db      	bcs.n	8011088 <quorem+0x42>
 80110d0:	f855 300b 	ldr.w	r3, [r5, fp]
 80110d4:	b92b      	cbnz	r3, 80110e2 <quorem+0x9c>
 80110d6:	9b01      	ldr	r3, [sp, #4]
 80110d8:	3b04      	subs	r3, #4
 80110da:	429d      	cmp	r5, r3
 80110dc:	461a      	mov	r2, r3
 80110de:	d32c      	bcc.n	801113a <quorem+0xf4>
 80110e0:	613c      	str	r4, [r7, #16]
 80110e2:	4638      	mov	r0, r7
 80110e4:	f001 f8f2 	bl	80122cc <__mcmp>
 80110e8:	2800      	cmp	r0, #0
 80110ea:	db22      	blt.n	8011132 <quorem+0xec>
 80110ec:	3601      	adds	r6, #1
 80110ee:	4629      	mov	r1, r5
 80110f0:	2000      	movs	r0, #0
 80110f2:	f858 2b04 	ldr.w	r2, [r8], #4
 80110f6:	f8d1 c000 	ldr.w	ip, [r1]
 80110fa:	b293      	uxth	r3, r2
 80110fc:	1ac3      	subs	r3, r0, r3
 80110fe:	0c12      	lsrs	r2, r2, #16
 8011100:	fa13 f38c 	uxtah	r3, r3, ip
 8011104:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8011108:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801110c:	b29b      	uxth	r3, r3
 801110e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011112:	45c1      	cmp	r9, r8
 8011114:	f841 3b04 	str.w	r3, [r1], #4
 8011118:	ea4f 4022 	mov.w	r0, r2, asr #16
 801111c:	d2e9      	bcs.n	80110f2 <quorem+0xac>
 801111e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011122:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011126:	b922      	cbnz	r2, 8011132 <quorem+0xec>
 8011128:	3b04      	subs	r3, #4
 801112a:	429d      	cmp	r5, r3
 801112c:	461a      	mov	r2, r3
 801112e:	d30a      	bcc.n	8011146 <quorem+0x100>
 8011130:	613c      	str	r4, [r7, #16]
 8011132:	4630      	mov	r0, r6
 8011134:	b003      	add	sp, #12
 8011136:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801113a:	6812      	ldr	r2, [r2, #0]
 801113c:	3b04      	subs	r3, #4
 801113e:	2a00      	cmp	r2, #0
 8011140:	d1ce      	bne.n	80110e0 <quorem+0x9a>
 8011142:	3c01      	subs	r4, #1
 8011144:	e7c9      	b.n	80110da <quorem+0x94>
 8011146:	6812      	ldr	r2, [r2, #0]
 8011148:	3b04      	subs	r3, #4
 801114a:	2a00      	cmp	r2, #0
 801114c:	d1f0      	bne.n	8011130 <quorem+0xea>
 801114e:	3c01      	subs	r4, #1
 8011150:	e7eb      	b.n	801112a <quorem+0xe4>
 8011152:	2000      	movs	r0, #0
 8011154:	e7ee      	b.n	8011134 <quorem+0xee>
	...

08011158 <_dtoa_r>:
 8011158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801115c:	ed2d 8b04 	vpush	{d8-d9}
 8011160:	69c5      	ldr	r5, [r0, #28]
 8011162:	b093      	sub	sp, #76	; 0x4c
 8011164:	ed8d 0b02 	vstr	d0, [sp, #8]
 8011168:	ec57 6b10 	vmov	r6, r7, d0
 801116c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8011170:	9107      	str	r1, [sp, #28]
 8011172:	4604      	mov	r4, r0
 8011174:	920a      	str	r2, [sp, #40]	; 0x28
 8011176:	930d      	str	r3, [sp, #52]	; 0x34
 8011178:	b975      	cbnz	r5, 8011198 <_dtoa_r+0x40>
 801117a:	2010      	movs	r0, #16
 801117c:	f7ff f886 	bl	801028c <malloc>
 8011180:	4602      	mov	r2, r0
 8011182:	61e0      	str	r0, [r4, #28]
 8011184:	b920      	cbnz	r0, 8011190 <_dtoa_r+0x38>
 8011186:	4bae      	ldr	r3, [pc, #696]	; (8011440 <_dtoa_r+0x2e8>)
 8011188:	21ef      	movs	r1, #239	; 0xef
 801118a:	48ae      	ldr	r0, [pc, #696]	; (8011444 <_dtoa_r+0x2ec>)
 801118c:	f001 fbbe 	bl	801290c <__assert_func>
 8011190:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8011194:	6005      	str	r5, [r0, #0]
 8011196:	60c5      	str	r5, [r0, #12]
 8011198:	69e3      	ldr	r3, [r4, #28]
 801119a:	6819      	ldr	r1, [r3, #0]
 801119c:	b151      	cbz	r1, 80111b4 <_dtoa_r+0x5c>
 801119e:	685a      	ldr	r2, [r3, #4]
 80111a0:	604a      	str	r2, [r1, #4]
 80111a2:	2301      	movs	r3, #1
 80111a4:	4093      	lsls	r3, r2
 80111a6:	608b      	str	r3, [r1, #8]
 80111a8:	4620      	mov	r0, r4
 80111aa:	f000 fe53 	bl	8011e54 <_Bfree>
 80111ae:	69e3      	ldr	r3, [r4, #28]
 80111b0:	2200      	movs	r2, #0
 80111b2:	601a      	str	r2, [r3, #0]
 80111b4:	1e3b      	subs	r3, r7, #0
 80111b6:	bfbb      	ittet	lt
 80111b8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80111bc:	9303      	strlt	r3, [sp, #12]
 80111be:	2300      	movge	r3, #0
 80111c0:	2201      	movlt	r2, #1
 80111c2:	bfac      	ite	ge
 80111c4:	f8c8 3000 	strge.w	r3, [r8]
 80111c8:	f8c8 2000 	strlt.w	r2, [r8]
 80111cc:	4b9e      	ldr	r3, [pc, #632]	; (8011448 <_dtoa_r+0x2f0>)
 80111ce:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80111d2:	ea33 0308 	bics.w	r3, r3, r8
 80111d6:	d11b      	bne.n	8011210 <_dtoa_r+0xb8>
 80111d8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80111da:	f242 730f 	movw	r3, #9999	; 0x270f
 80111de:	6013      	str	r3, [r2, #0]
 80111e0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80111e4:	4333      	orrs	r3, r6
 80111e6:	f000 8593 	beq.w	8011d10 <_dtoa_r+0xbb8>
 80111ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80111ec:	b963      	cbnz	r3, 8011208 <_dtoa_r+0xb0>
 80111ee:	4b97      	ldr	r3, [pc, #604]	; (801144c <_dtoa_r+0x2f4>)
 80111f0:	e027      	b.n	8011242 <_dtoa_r+0xea>
 80111f2:	4b97      	ldr	r3, [pc, #604]	; (8011450 <_dtoa_r+0x2f8>)
 80111f4:	9300      	str	r3, [sp, #0]
 80111f6:	3308      	adds	r3, #8
 80111f8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80111fa:	6013      	str	r3, [r2, #0]
 80111fc:	9800      	ldr	r0, [sp, #0]
 80111fe:	b013      	add	sp, #76	; 0x4c
 8011200:	ecbd 8b04 	vpop	{d8-d9}
 8011204:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011208:	4b90      	ldr	r3, [pc, #576]	; (801144c <_dtoa_r+0x2f4>)
 801120a:	9300      	str	r3, [sp, #0]
 801120c:	3303      	adds	r3, #3
 801120e:	e7f3      	b.n	80111f8 <_dtoa_r+0xa0>
 8011210:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011214:	2200      	movs	r2, #0
 8011216:	ec51 0b17 	vmov	r0, r1, d7
 801121a:	eeb0 8a47 	vmov.f32	s16, s14
 801121e:	eef0 8a67 	vmov.f32	s17, s15
 8011222:	2300      	movs	r3, #0
 8011224:	f7ef fc68 	bl	8000af8 <__aeabi_dcmpeq>
 8011228:	4681      	mov	r9, r0
 801122a:	b160      	cbz	r0, 8011246 <_dtoa_r+0xee>
 801122c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801122e:	2301      	movs	r3, #1
 8011230:	6013      	str	r3, [r2, #0]
 8011232:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011234:	2b00      	cmp	r3, #0
 8011236:	f000 8568 	beq.w	8011d0a <_dtoa_r+0xbb2>
 801123a:	4b86      	ldr	r3, [pc, #536]	; (8011454 <_dtoa_r+0x2fc>)
 801123c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801123e:	6013      	str	r3, [r2, #0]
 8011240:	3b01      	subs	r3, #1
 8011242:	9300      	str	r3, [sp, #0]
 8011244:	e7da      	b.n	80111fc <_dtoa_r+0xa4>
 8011246:	aa10      	add	r2, sp, #64	; 0x40
 8011248:	a911      	add	r1, sp, #68	; 0x44
 801124a:	4620      	mov	r0, r4
 801124c:	eeb0 0a48 	vmov.f32	s0, s16
 8011250:	eef0 0a68 	vmov.f32	s1, s17
 8011254:	f001 f8e0 	bl	8012418 <__d2b>
 8011258:	f3c8 550a 	ubfx	r5, r8, #20, #11
 801125c:	4682      	mov	sl, r0
 801125e:	2d00      	cmp	r5, #0
 8011260:	d07f      	beq.n	8011362 <_dtoa_r+0x20a>
 8011262:	ee18 3a90 	vmov	r3, s17
 8011266:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801126a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 801126e:	ec51 0b18 	vmov	r0, r1, d8
 8011272:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8011276:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801127a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 801127e:	4619      	mov	r1, r3
 8011280:	2200      	movs	r2, #0
 8011282:	4b75      	ldr	r3, [pc, #468]	; (8011458 <_dtoa_r+0x300>)
 8011284:	f7ef f818 	bl	80002b8 <__aeabi_dsub>
 8011288:	a367      	add	r3, pc, #412	; (adr r3, 8011428 <_dtoa_r+0x2d0>)
 801128a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801128e:	f7ef f9cb 	bl	8000628 <__aeabi_dmul>
 8011292:	a367      	add	r3, pc, #412	; (adr r3, 8011430 <_dtoa_r+0x2d8>)
 8011294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011298:	f7ef f810 	bl	80002bc <__adddf3>
 801129c:	4606      	mov	r6, r0
 801129e:	4628      	mov	r0, r5
 80112a0:	460f      	mov	r7, r1
 80112a2:	f7ef f957 	bl	8000554 <__aeabi_i2d>
 80112a6:	a364      	add	r3, pc, #400	; (adr r3, 8011438 <_dtoa_r+0x2e0>)
 80112a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112ac:	f7ef f9bc 	bl	8000628 <__aeabi_dmul>
 80112b0:	4602      	mov	r2, r0
 80112b2:	460b      	mov	r3, r1
 80112b4:	4630      	mov	r0, r6
 80112b6:	4639      	mov	r1, r7
 80112b8:	f7ef f800 	bl	80002bc <__adddf3>
 80112bc:	4606      	mov	r6, r0
 80112be:	460f      	mov	r7, r1
 80112c0:	f7ef fc62 	bl	8000b88 <__aeabi_d2iz>
 80112c4:	2200      	movs	r2, #0
 80112c6:	4683      	mov	fp, r0
 80112c8:	2300      	movs	r3, #0
 80112ca:	4630      	mov	r0, r6
 80112cc:	4639      	mov	r1, r7
 80112ce:	f7ef fc1d 	bl	8000b0c <__aeabi_dcmplt>
 80112d2:	b148      	cbz	r0, 80112e8 <_dtoa_r+0x190>
 80112d4:	4658      	mov	r0, fp
 80112d6:	f7ef f93d 	bl	8000554 <__aeabi_i2d>
 80112da:	4632      	mov	r2, r6
 80112dc:	463b      	mov	r3, r7
 80112de:	f7ef fc0b 	bl	8000af8 <__aeabi_dcmpeq>
 80112e2:	b908      	cbnz	r0, 80112e8 <_dtoa_r+0x190>
 80112e4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80112e8:	f1bb 0f16 	cmp.w	fp, #22
 80112ec:	d857      	bhi.n	801139e <_dtoa_r+0x246>
 80112ee:	4b5b      	ldr	r3, [pc, #364]	; (801145c <_dtoa_r+0x304>)
 80112f0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80112f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112f8:	ec51 0b18 	vmov	r0, r1, d8
 80112fc:	f7ef fc06 	bl	8000b0c <__aeabi_dcmplt>
 8011300:	2800      	cmp	r0, #0
 8011302:	d04e      	beq.n	80113a2 <_dtoa_r+0x24a>
 8011304:	f10b 3bff 	add.w	fp, fp, #4294967295
 8011308:	2300      	movs	r3, #0
 801130a:	930c      	str	r3, [sp, #48]	; 0x30
 801130c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801130e:	1b5b      	subs	r3, r3, r5
 8011310:	1e5a      	subs	r2, r3, #1
 8011312:	bf45      	ittet	mi
 8011314:	f1c3 0301 	rsbmi	r3, r3, #1
 8011318:	9305      	strmi	r3, [sp, #20]
 801131a:	2300      	movpl	r3, #0
 801131c:	2300      	movmi	r3, #0
 801131e:	9206      	str	r2, [sp, #24]
 8011320:	bf54      	ite	pl
 8011322:	9305      	strpl	r3, [sp, #20]
 8011324:	9306      	strmi	r3, [sp, #24]
 8011326:	f1bb 0f00 	cmp.w	fp, #0
 801132a:	db3c      	blt.n	80113a6 <_dtoa_r+0x24e>
 801132c:	9b06      	ldr	r3, [sp, #24]
 801132e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8011332:	445b      	add	r3, fp
 8011334:	9306      	str	r3, [sp, #24]
 8011336:	2300      	movs	r3, #0
 8011338:	9308      	str	r3, [sp, #32]
 801133a:	9b07      	ldr	r3, [sp, #28]
 801133c:	2b09      	cmp	r3, #9
 801133e:	d868      	bhi.n	8011412 <_dtoa_r+0x2ba>
 8011340:	2b05      	cmp	r3, #5
 8011342:	bfc4      	itt	gt
 8011344:	3b04      	subgt	r3, #4
 8011346:	9307      	strgt	r3, [sp, #28]
 8011348:	9b07      	ldr	r3, [sp, #28]
 801134a:	f1a3 0302 	sub.w	r3, r3, #2
 801134e:	bfcc      	ite	gt
 8011350:	2500      	movgt	r5, #0
 8011352:	2501      	movle	r5, #1
 8011354:	2b03      	cmp	r3, #3
 8011356:	f200 8085 	bhi.w	8011464 <_dtoa_r+0x30c>
 801135a:	e8df f003 	tbb	[pc, r3]
 801135e:	3b2e      	.short	0x3b2e
 8011360:	5839      	.short	0x5839
 8011362:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8011366:	441d      	add	r5, r3
 8011368:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801136c:	2b20      	cmp	r3, #32
 801136e:	bfc1      	itttt	gt
 8011370:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8011374:	fa08 f803 	lslgt.w	r8, r8, r3
 8011378:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 801137c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8011380:	bfd6      	itet	le
 8011382:	f1c3 0320 	rsble	r3, r3, #32
 8011386:	ea48 0003 	orrgt.w	r0, r8, r3
 801138a:	fa06 f003 	lslle.w	r0, r6, r3
 801138e:	f7ef f8d1 	bl	8000534 <__aeabi_ui2d>
 8011392:	2201      	movs	r2, #1
 8011394:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8011398:	3d01      	subs	r5, #1
 801139a:	920e      	str	r2, [sp, #56]	; 0x38
 801139c:	e76f      	b.n	801127e <_dtoa_r+0x126>
 801139e:	2301      	movs	r3, #1
 80113a0:	e7b3      	b.n	801130a <_dtoa_r+0x1b2>
 80113a2:	900c      	str	r0, [sp, #48]	; 0x30
 80113a4:	e7b2      	b.n	801130c <_dtoa_r+0x1b4>
 80113a6:	9b05      	ldr	r3, [sp, #20]
 80113a8:	eba3 030b 	sub.w	r3, r3, fp
 80113ac:	9305      	str	r3, [sp, #20]
 80113ae:	f1cb 0300 	rsb	r3, fp, #0
 80113b2:	9308      	str	r3, [sp, #32]
 80113b4:	2300      	movs	r3, #0
 80113b6:	930b      	str	r3, [sp, #44]	; 0x2c
 80113b8:	e7bf      	b.n	801133a <_dtoa_r+0x1e2>
 80113ba:	2300      	movs	r3, #0
 80113bc:	9309      	str	r3, [sp, #36]	; 0x24
 80113be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80113c0:	2b00      	cmp	r3, #0
 80113c2:	dc52      	bgt.n	801146a <_dtoa_r+0x312>
 80113c4:	2301      	movs	r3, #1
 80113c6:	9301      	str	r3, [sp, #4]
 80113c8:	9304      	str	r3, [sp, #16]
 80113ca:	461a      	mov	r2, r3
 80113cc:	920a      	str	r2, [sp, #40]	; 0x28
 80113ce:	e00b      	b.n	80113e8 <_dtoa_r+0x290>
 80113d0:	2301      	movs	r3, #1
 80113d2:	e7f3      	b.n	80113bc <_dtoa_r+0x264>
 80113d4:	2300      	movs	r3, #0
 80113d6:	9309      	str	r3, [sp, #36]	; 0x24
 80113d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80113da:	445b      	add	r3, fp
 80113dc:	9301      	str	r3, [sp, #4]
 80113de:	3301      	adds	r3, #1
 80113e0:	2b01      	cmp	r3, #1
 80113e2:	9304      	str	r3, [sp, #16]
 80113e4:	bfb8      	it	lt
 80113e6:	2301      	movlt	r3, #1
 80113e8:	69e0      	ldr	r0, [r4, #28]
 80113ea:	2100      	movs	r1, #0
 80113ec:	2204      	movs	r2, #4
 80113ee:	f102 0614 	add.w	r6, r2, #20
 80113f2:	429e      	cmp	r6, r3
 80113f4:	d93d      	bls.n	8011472 <_dtoa_r+0x31a>
 80113f6:	6041      	str	r1, [r0, #4]
 80113f8:	4620      	mov	r0, r4
 80113fa:	f000 fceb 	bl	8011dd4 <_Balloc>
 80113fe:	9000      	str	r0, [sp, #0]
 8011400:	2800      	cmp	r0, #0
 8011402:	d139      	bne.n	8011478 <_dtoa_r+0x320>
 8011404:	4b16      	ldr	r3, [pc, #88]	; (8011460 <_dtoa_r+0x308>)
 8011406:	4602      	mov	r2, r0
 8011408:	f240 11af 	movw	r1, #431	; 0x1af
 801140c:	e6bd      	b.n	801118a <_dtoa_r+0x32>
 801140e:	2301      	movs	r3, #1
 8011410:	e7e1      	b.n	80113d6 <_dtoa_r+0x27e>
 8011412:	2501      	movs	r5, #1
 8011414:	2300      	movs	r3, #0
 8011416:	9307      	str	r3, [sp, #28]
 8011418:	9509      	str	r5, [sp, #36]	; 0x24
 801141a:	f04f 33ff 	mov.w	r3, #4294967295
 801141e:	9301      	str	r3, [sp, #4]
 8011420:	9304      	str	r3, [sp, #16]
 8011422:	2200      	movs	r2, #0
 8011424:	2312      	movs	r3, #18
 8011426:	e7d1      	b.n	80113cc <_dtoa_r+0x274>
 8011428:	636f4361 	.word	0x636f4361
 801142c:	3fd287a7 	.word	0x3fd287a7
 8011430:	8b60c8b3 	.word	0x8b60c8b3
 8011434:	3fc68a28 	.word	0x3fc68a28
 8011438:	509f79fb 	.word	0x509f79fb
 801143c:	3fd34413 	.word	0x3fd34413
 8011440:	08014b15 	.word	0x08014b15
 8011444:	08014b2c 	.word	0x08014b2c
 8011448:	7ff00000 	.word	0x7ff00000
 801144c:	08014b11 	.word	0x08014b11
 8011450:	08014b08 	.word	0x08014b08
 8011454:	08014ae5 	.word	0x08014ae5
 8011458:	3ff80000 	.word	0x3ff80000
 801145c:	08014c18 	.word	0x08014c18
 8011460:	08014b84 	.word	0x08014b84
 8011464:	2301      	movs	r3, #1
 8011466:	9309      	str	r3, [sp, #36]	; 0x24
 8011468:	e7d7      	b.n	801141a <_dtoa_r+0x2c2>
 801146a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801146c:	9301      	str	r3, [sp, #4]
 801146e:	9304      	str	r3, [sp, #16]
 8011470:	e7ba      	b.n	80113e8 <_dtoa_r+0x290>
 8011472:	3101      	adds	r1, #1
 8011474:	0052      	lsls	r2, r2, #1
 8011476:	e7ba      	b.n	80113ee <_dtoa_r+0x296>
 8011478:	69e3      	ldr	r3, [r4, #28]
 801147a:	9a00      	ldr	r2, [sp, #0]
 801147c:	601a      	str	r2, [r3, #0]
 801147e:	9b04      	ldr	r3, [sp, #16]
 8011480:	2b0e      	cmp	r3, #14
 8011482:	f200 80a8 	bhi.w	80115d6 <_dtoa_r+0x47e>
 8011486:	2d00      	cmp	r5, #0
 8011488:	f000 80a5 	beq.w	80115d6 <_dtoa_r+0x47e>
 801148c:	f1bb 0f00 	cmp.w	fp, #0
 8011490:	dd38      	ble.n	8011504 <_dtoa_r+0x3ac>
 8011492:	4bc0      	ldr	r3, [pc, #768]	; (8011794 <_dtoa_r+0x63c>)
 8011494:	f00b 020f 	and.w	r2, fp, #15
 8011498:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801149c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80114a0:	e9d3 6700 	ldrd	r6, r7, [r3]
 80114a4:	ea4f 182b 	mov.w	r8, fp, asr #4
 80114a8:	d019      	beq.n	80114de <_dtoa_r+0x386>
 80114aa:	4bbb      	ldr	r3, [pc, #748]	; (8011798 <_dtoa_r+0x640>)
 80114ac:	ec51 0b18 	vmov	r0, r1, d8
 80114b0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80114b4:	f7ef f9e2 	bl	800087c <__aeabi_ddiv>
 80114b8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80114bc:	f008 080f 	and.w	r8, r8, #15
 80114c0:	2503      	movs	r5, #3
 80114c2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8011798 <_dtoa_r+0x640>
 80114c6:	f1b8 0f00 	cmp.w	r8, #0
 80114ca:	d10a      	bne.n	80114e2 <_dtoa_r+0x38a>
 80114cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80114d0:	4632      	mov	r2, r6
 80114d2:	463b      	mov	r3, r7
 80114d4:	f7ef f9d2 	bl	800087c <__aeabi_ddiv>
 80114d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80114dc:	e02b      	b.n	8011536 <_dtoa_r+0x3de>
 80114de:	2502      	movs	r5, #2
 80114e0:	e7ef      	b.n	80114c2 <_dtoa_r+0x36a>
 80114e2:	f018 0f01 	tst.w	r8, #1
 80114e6:	d008      	beq.n	80114fa <_dtoa_r+0x3a2>
 80114e8:	4630      	mov	r0, r6
 80114ea:	4639      	mov	r1, r7
 80114ec:	e9d9 2300 	ldrd	r2, r3, [r9]
 80114f0:	f7ef f89a 	bl	8000628 <__aeabi_dmul>
 80114f4:	3501      	adds	r5, #1
 80114f6:	4606      	mov	r6, r0
 80114f8:	460f      	mov	r7, r1
 80114fa:	ea4f 0868 	mov.w	r8, r8, asr #1
 80114fe:	f109 0908 	add.w	r9, r9, #8
 8011502:	e7e0      	b.n	80114c6 <_dtoa_r+0x36e>
 8011504:	f000 809f 	beq.w	8011646 <_dtoa_r+0x4ee>
 8011508:	f1cb 0600 	rsb	r6, fp, #0
 801150c:	4ba1      	ldr	r3, [pc, #644]	; (8011794 <_dtoa_r+0x63c>)
 801150e:	4fa2      	ldr	r7, [pc, #648]	; (8011798 <_dtoa_r+0x640>)
 8011510:	f006 020f 	and.w	r2, r6, #15
 8011514:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011518:	e9d3 2300 	ldrd	r2, r3, [r3]
 801151c:	ec51 0b18 	vmov	r0, r1, d8
 8011520:	f7ef f882 	bl	8000628 <__aeabi_dmul>
 8011524:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011528:	1136      	asrs	r6, r6, #4
 801152a:	2300      	movs	r3, #0
 801152c:	2502      	movs	r5, #2
 801152e:	2e00      	cmp	r6, #0
 8011530:	d17e      	bne.n	8011630 <_dtoa_r+0x4d8>
 8011532:	2b00      	cmp	r3, #0
 8011534:	d1d0      	bne.n	80114d8 <_dtoa_r+0x380>
 8011536:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011538:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801153c:	2b00      	cmp	r3, #0
 801153e:	f000 8084 	beq.w	801164a <_dtoa_r+0x4f2>
 8011542:	4b96      	ldr	r3, [pc, #600]	; (801179c <_dtoa_r+0x644>)
 8011544:	2200      	movs	r2, #0
 8011546:	4640      	mov	r0, r8
 8011548:	4649      	mov	r1, r9
 801154a:	f7ef fadf 	bl	8000b0c <__aeabi_dcmplt>
 801154e:	2800      	cmp	r0, #0
 8011550:	d07b      	beq.n	801164a <_dtoa_r+0x4f2>
 8011552:	9b04      	ldr	r3, [sp, #16]
 8011554:	2b00      	cmp	r3, #0
 8011556:	d078      	beq.n	801164a <_dtoa_r+0x4f2>
 8011558:	9b01      	ldr	r3, [sp, #4]
 801155a:	2b00      	cmp	r3, #0
 801155c:	dd39      	ble.n	80115d2 <_dtoa_r+0x47a>
 801155e:	4b90      	ldr	r3, [pc, #576]	; (80117a0 <_dtoa_r+0x648>)
 8011560:	2200      	movs	r2, #0
 8011562:	4640      	mov	r0, r8
 8011564:	4649      	mov	r1, r9
 8011566:	f7ef f85f 	bl	8000628 <__aeabi_dmul>
 801156a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801156e:	9e01      	ldr	r6, [sp, #4]
 8011570:	f10b 37ff 	add.w	r7, fp, #4294967295
 8011574:	3501      	adds	r5, #1
 8011576:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801157a:	4628      	mov	r0, r5
 801157c:	f7ee ffea 	bl	8000554 <__aeabi_i2d>
 8011580:	4642      	mov	r2, r8
 8011582:	464b      	mov	r3, r9
 8011584:	f7ef f850 	bl	8000628 <__aeabi_dmul>
 8011588:	4b86      	ldr	r3, [pc, #536]	; (80117a4 <_dtoa_r+0x64c>)
 801158a:	2200      	movs	r2, #0
 801158c:	f7ee fe96 	bl	80002bc <__adddf3>
 8011590:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8011594:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011598:	9303      	str	r3, [sp, #12]
 801159a:	2e00      	cmp	r6, #0
 801159c:	d158      	bne.n	8011650 <_dtoa_r+0x4f8>
 801159e:	4b82      	ldr	r3, [pc, #520]	; (80117a8 <_dtoa_r+0x650>)
 80115a0:	2200      	movs	r2, #0
 80115a2:	4640      	mov	r0, r8
 80115a4:	4649      	mov	r1, r9
 80115a6:	f7ee fe87 	bl	80002b8 <__aeabi_dsub>
 80115aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80115ae:	4680      	mov	r8, r0
 80115b0:	4689      	mov	r9, r1
 80115b2:	f7ef fac9 	bl	8000b48 <__aeabi_dcmpgt>
 80115b6:	2800      	cmp	r0, #0
 80115b8:	f040 8296 	bne.w	8011ae8 <_dtoa_r+0x990>
 80115bc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80115c0:	4640      	mov	r0, r8
 80115c2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80115c6:	4649      	mov	r1, r9
 80115c8:	f7ef faa0 	bl	8000b0c <__aeabi_dcmplt>
 80115cc:	2800      	cmp	r0, #0
 80115ce:	f040 8289 	bne.w	8011ae4 <_dtoa_r+0x98c>
 80115d2:	ed8d 8b02 	vstr	d8, [sp, #8]
 80115d6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80115d8:	2b00      	cmp	r3, #0
 80115da:	f2c0 814e 	blt.w	801187a <_dtoa_r+0x722>
 80115de:	f1bb 0f0e 	cmp.w	fp, #14
 80115e2:	f300 814a 	bgt.w	801187a <_dtoa_r+0x722>
 80115e6:	4b6b      	ldr	r3, [pc, #428]	; (8011794 <_dtoa_r+0x63c>)
 80115e8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80115ec:	e9d3 8900 	ldrd	r8, r9, [r3]
 80115f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80115f2:	2b00      	cmp	r3, #0
 80115f4:	f280 80dc 	bge.w	80117b0 <_dtoa_r+0x658>
 80115f8:	9b04      	ldr	r3, [sp, #16]
 80115fa:	2b00      	cmp	r3, #0
 80115fc:	f300 80d8 	bgt.w	80117b0 <_dtoa_r+0x658>
 8011600:	f040 826f 	bne.w	8011ae2 <_dtoa_r+0x98a>
 8011604:	4b68      	ldr	r3, [pc, #416]	; (80117a8 <_dtoa_r+0x650>)
 8011606:	2200      	movs	r2, #0
 8011608:	4640      	mov	r0, r8
 801160a:	4649      	mov	r1, r9
 801160c:	f7ef f80c 	bl	8000628 <__aeabi_dmul>
 8011610:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011614:	f7ef fa8e 	bl	8000b34 <__aeabi_dcmpge>
 8011618:	9e04      	ldr	r6, [sp, #16]
 801161a:	4637      	mov	r7, r6
 801161c:	2800      	cmp	r0, #0
 801161e:	f040 8245 	bne.w	8011aac <_dtoa_r+0x954>
 8011622:	9d00      	ldr	r5, [sp, #0]
 8011624:	2331      	movs	r3, #49	; 0x31
 8011626:	f805 3b01 	strb.w	r3, [r5], #1
 801162a:	f10b 0b01 	add.w	fp, fp, #1
 801162e:	e241      	b.n	8011ab4 <_dtoa_r+0x95c>
 8011630:	07f2      	lsls	r2, r6, #31
 8011632:	d505      	bpl.n	8011640 <_dtoa_r+0x4e8>
 8011634:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011638:	f7ee fff6 	bl	8000628 <__aeabi_dmul>
 801163c:	3501      	adds	r5, #1
 801163e:	2301      	movs	r3, #1
 8011640:	1076      	asrs	r6, r6, #1
 8011642:	3708      	adds	r7, #8
 8011644:	e773      	b.n	801152e <_dtoa_r+0x3d6>
 8011646:	2502      	movs	r5, #2
 8011648:	e775      	b.n	8011536 <_dtoa_r+0x3de>
 801164a:	9e04      	ldr	r6, [sp, #16]
 801164c:	465f      	mov	r7, fp
 801164e:	e792      	b.n	8011576 <_dtoa_r+0x41e>
 8011650:	9900      	ldr	r1, [sp, #0]
 8011652:	4b50      	ldr	r3, [pc, #320]	; (8011794 <_dtoa_r+0x63c>)
 8011654:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011658:	4431      	add	r1, r6
 801165a:	9102      	str	r1, [sp, #8]
 801165c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801165e:	eeb0 9a47 	vmov.f32	s18, s14
 8011662:	eef0 9a67 	vmov.f32	s19, s15
 8011666:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801166a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801166e:	2900      	cmp	r1, #0
 8011670:	d044      	beq.n	80116fc <_dtoa_r+0x5a4>
 8011672:	494e      	ldr	r1, [pc, #312]	; (80117ac <_dtoa_r+0x654>)
 8011674:	2000      	movs	r0, #0
 8011676:	f7ef f901 	bl	800087c <__aeabi_ddiv>
 801167a:	ec53 2b19 	vmov	r2, r3, d9
 801167e:	f7ee fe1b 	bl	80002b8 <__aeabi_dsub>
 8011682:	9d00      	ldr	r5, [sp, #0]
 8011684:	ec41 0b19 	vmov	d9, r0, r1
 8011688:	4649      	mov	r1, r9
 801168a:	4640      	mov	r0, r8
 801168c:	f7ef fa7c 	bl	8000b88 <__aeabi_d2iz>
 8011690:	4606      	mov	r6, r0
 8011692:	f7ee ff5f 	bl	8000554 <__aeabi_i2d>
 8011696:	4602      	mov	r2, r0
 8011698:	460b      	mov	r3, r1
 801169a:	4640      	mov	r0, r8
 801169c:	4649      	mov	r1, r9
 801169e:	f7ee fe0b 	bl	80002b8 <__aeabi_dsub>
 80116a2:	3630      	adds	r6, #48	; 0x30
 80116a4:	f805 6b01 	strb.w	r6, [r5], #1
 80116a8:	ec53 2b19 	vmov	r2, r3, d9
 80116ac:	4680      	mov	r8, r0
 80116ae:	4689      	mov	r9, r1
 80116b0:	f7ef fa2c 	bl	8000b0c <__aeabi_dcmplt>
 80116b4:	2800      	cmp	r0, #0
 80116b6:	d164      	bne.n	8011782 <_dtoa_r+0x62a>
 80116b8:	4642      	mov	r2, r8
 80116ba:	464b      	mov	r3, r9
 80116bc:	4937      	ldr	r1, [pc, #220]	; (801179c <_dtoa_r+0x644>)
 80116be:	2000      	movs	r0, #0
 80116c0:	f7ee fdfa 	bl	80002b8 <__aeabi_dsub>
 80116c4:	ec53 2b19 	vmov	r2, r3, d9
 80116c8:	f7ef fa20 	bl	8000b0c <__aeabi_dcmplt>
 80116cc:	2800      	cmp	r0, #0
 80116ce:	f040 80b6 	bne.w	801183e <_dtoa_r+0x6e6>
 80116d2:	9b02      	ldr	r3, [sp, #8]
 80116d4:	429d      	cmp	r5, r3
 80116d6:	f43f af7c 	beq.w	80115d2 <_dtoa_r+0x47a>
 80116da:	4b31      	ldr	r3, [pc, #196]	; (80117a0 <_dtoa_r+0x648>)
 80116dc:	ec51 0b19 	vmov	r0, r1, d9
 80116e0:	2200      	movs	r2, #0
 80116e2:	f7ee ffa1 	bl	8000628 <__aeabi_dmul>
 80116e6:	4b2e      	ldr	r3, [pc, #184]	; (80117a0 <_dtoa_r+0x648>)
 80116e8:	ec41 0b19 	vmov	d9, r0, r1
 80116ec:	2200      	movs	r2, #0
 80116ee:	4640      	mov	r0, r8
 80116f0:	4649      	mov	r1, r9
 80116f2:	f7ee ff99 	bl	8000628 <__aeabi_dmul>
 80116f6:	4680      	mov	r8, r0
 80116f8:	4689      	mov	r9, r1
 80116fa:	e7c5      	b.n	8011688 <_dtoa_r+0x530>
 80116fc:	ec51 0b17 	vmov	r0, r1, d7
 8011700:	f7ee ff92 	bl	8000628 <__aeabi_dmul>
 8011704:	9b02      	ldr	r3, [sp, #8]
 8011706:	9d00      	ldr	r5, [sp, #0]
 8011708:	930f      	str	r3, [sp, #60]	; 0x3c
 801170a:	ec41 0b19 	vmov	d9, r0, r1
 801170e:	4649      	mov	r1, r9
 8011710:	4640      	mov	r0, r8
 8011712:	f7ef fa39 	bl	8000b88 <__aeabi_d2iz>
 8011716:	4606      	mov	r6, r0
 8011718:	f7ee ff1c 	bl	8000554 <__aeabi_i2d>
 801171c:	3630      	adds	r6, #48	; 0x30
 801171e:	4602      	mov	r2, r0
 8011720:	460b      	mov	r3, r1
 8011722:	4640      	mov	r0, r8
 8011724:	4649      	mov	r1, r9
 8011726:	f7ee fdc7 	bl	80002b8 <__aeabi_dsub>
 801172a:	f805 6b01 	strb.w	r6, [r5], #1
 801172e:	9b02      	ldr	r3, [sp, #8]
 8011730:	429d      	cmp	r5, r3
 8011732:	4680      	mov	r8, r0
 8011734:	4689      	mov	r9, r1
 8011736:	f04f 0200 	mov.w	r2, #0
 801173a:	d124      	bne.n	8011786 <_dtoa_r+0x62e>
 801173c:	4b1b      	ldr	r3, [pc, #108]	; (80117ac <_dtoa_r+0x654>)
 801173e:	ec51 0b19 	vmov	r0, r1, d9
 8011742:	f7ee fdbb 	bl	80002bc <__adddf3>
 8011746:	4602      	mov	r2, r0
 8011748:	460b      	mov	r3, r1
 801174a:	4640      	mov	r0, r8
 801174c:	4649      	mov	r1, r9
 801174e:	f7ef f9fb 	bl	8000b48 <__aeabi_dcmpgt>
 8011752:	2800      	cmp	r0, #0
 8011754:	d173      	bne.n	801183e <_dtoa_r+0x6e6>
 8011756:	ec53 2b19 	vmov	r2, r3, d9
 801175a:	4914      	ldr	r1, [pc, #80]	; (80117ac <_dtoa_r+0x654>)
 801175c:	2000      	movs	r0, #0
 801175e:	f7ee fdab 	bl	80002b8 <__aeabi_dsub>
 8011762:	4602      	mov	r2, r0
 8011764:	460b      	mov	r3, r1
 8011766:	4640      	mov	r0, r8
 8011768:	4649      	mov	r1, r9
 801176a:	f7ef f9cf 	bl	8000b0c <__aeabi_dcmplt>
 801176e:	2800      	cmp	r0, #0
 8011770:	f43f af2f 	beq.w	80115d2 <_dtoa_r+0x47a>
 8011774:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8011776:	1e6b      	subs	r3, r5, #1
 8011778:	930f      	str	r3, [sp, #60]	; 0x3c
 801177a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801177e:	2b30      	cmp	r3, #48	; 0x30
 8011780:	d0f8      	beq.n	8011774 <_dtoa_r+0x61c>
 8011782:	46bb      	mov	fp, r7
 8011784:	e04a      	b.n	801181c <_dtoa_r+0x6c4>
 8011786:	4b06      	ldr	r3, [pc, #24]	; (80117a0 <_dtoa_r+0x648>)
 8011788:	f7ee ff4e 	bl	8000628 <__aeabi_dmul>
 801178c:	4680      	mov	r8, r0
 801178e:	4689      	mov	r9, r1
 8011790:	e7bd      	b.n	801170e <_dtoa_r+0x5b6>
 8011792:	bf00      	nop
 8011794:	08014c18 	.word	0x08014c18
 8011798:	08014bf0 	.word	0x08014bf0
 801179c:	3ff00000 	.word	0x3ff00000
 80117a0:	40240000 	.word	0x40240000
 80117a4:	401c0000 	.word	0x401c0000
 80117a8:	40140000 	.word	0x40140000
 80117ac:	3fe00000 	.word	0x3fe00000
 80117b0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80117b4:	9d00      	ldr	r5, [sp, #0]
 80117b6:	4642      	mov	r2, r8
 80117b8:	464b      	mov	r3, r9
 80117ba:	4630      	mov	r0, r6
 80117bc:	4639      	mov	r1, r7
 80117be:	f7ef f85d 	bl	800087c <__aeabi_ddiv>
 80117c2:	f7ef f9e1 	bl	8000b88 <__aeabi_d2iz>
 80117c6:	9001      	str	r0, [sp, #4]
 80117c8:	f7ee fec4 	bl	8000554 <__aeabi_i2d>
 80117cc:	4642      	mov	r2, r8
 80117ce:	464b      	mov	r3, r9
 80117d0:	f7ee ff2a 	bl	8000628 <__aeabi_dmul>
 80117d4:	4602      	mov	r2, r0
 80117d6:	460b      	mov	r3, r1
 80117d8:	4630      	mov	r0, r6
 80117da:	4639      	mov	r1, r7
 80117dc:	f7ee fd6c 	bl	80002b8 <__aeabi_dsub>
 80117e0:	9e01      	ldr	r6, [sp, #4]
 80117e2:	9f04      	ldr	r7, [sp, #16]
 80117e4:	3630      	adds	r6, #48	; 0x30
 80117e6:	f805 6b01 	strb.w	r6, [r5], #1
 80117ea:	9e00      	ldr	r6, [sp, #0]
 80117ec:	1bae      	subs	r6, r5, r6
 80117ee:	42b7      	cmp	r7, r6
 80117f0:	4602      	mov	r2, r0
 80117f2:	460b      	mov	r3, r1
 80117f4:	d134      	bne.n	8011860 <_dtoa_r+0x708>
 80117f6:	f7ee fd61 	bl	80002bc <__adddf3>
 80117fa:	4642      	mov	r2, r8
 80117fc:	464b      	mov	r3, r9
 80117fe:	4606      	mov	r6, r0
 8011800:	460f      	mov	r7, r1
 8011802:	f7ef f9a1 	bl	8000b48 <__aeabi_dcmpgt>
 8011806:	b9c8      	cbnz	r0, 801183c <_dtoa_r+0x6e4>
 8011808:	4642      	mov	r2, r8
 801180a:	464b      	mov	r3, r9
 801180c:	4630      	mov	r0, r6
 801180e:	4639      	mov	r1, r7
 8011810:	f7ef f972 	bl	8000af8 <__aeabi_dcmpeq>
 8011814:	b110      	cbz	r0, 801181c <_dtoa_r+0x6c4>
 8011816:	9b01      	ldr	r3, [sp, #4]
 8011818:	07db      	lsls	r3, r3, #31
 801181a:	d40f      	bmi.n	801183c <_dtoa_r+0x6e4>
 801181c:	4651      	mov	r1, sl
 801181e:	4620      	mov	r0, r4
 8011820:	f000 fb18 	bl	8011e54 <_Bfree>
 8011824:	2300      	movs	r3, #0
 8011826:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011828:	702b      	strb	r3, [r5, #0]
 801182a:	f10b 0301 	add.w	r3, fp, #1
 801182e:	6013      	str	r3, [r2, #0]
 8011830:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011832:	2b00      	cmp	r3, #0
 8011834:	f43f ace2 	beq.w	80111fc <_dtoa_r+0xa4>
 8011838:	601d      	str	r5, [r3, #0]
 801183a:	e4df      	b.n	80111fc <_dtoa_r+0xa4>
 801183c:	465f      	mov	r7, fp
 801183e:	462b      	mov	r3, r5
 8011840:	461d      	mov	r5, r3
 8011842:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011846:	2a39      	cmp	r2, #57	; 0x39
 8011848:	d106      	bne.n	8011858 <_dtoa_r+0x700>
 801184a:	9a00      	ldr	r2, [sp, #0]
 801184c:	429a      	cmp	r2, r3
 801184e:	d1f7      	bne.n	8011840 <_dtoa_r+0x6e8>
 8011850:	9900      	ldr	r1, [sp, #0]
 8011852:	2230      	movs	r2, #48	; 0x30
 8011854:	3701      	adds	r7, #1
 8011856:	700a      	strb	r2, [r1, #0]
 8011858:	781a      	ldrb	r2, [r3, #0]
 801185a:	3201      	adds	r2, #1
 801185c:	701a      	strb	r2, [r3, #0]
 801185e:	e790      	b.n	8011782 <_dtoa_r+0x62a>
 8011860:	4ba3      	ldr	r3, [pc, #652]	; (8011af0 <_dtoa_r+0x998>)
 8011862:	2200      	movs	r2, #0
 8011864:	f7ee fee0 	bl	8000628 <__aeabi_dmul>
 8011868:	2200      	movs	r2, #0
 801186a:	2300      	movs	r3, #0
 801186c:	4606      	mov	r6, r0
 801186e:	460f      	mov	r7, r1
 8011870:	f7ef f942 	bl	8000af8 <__aeabi_dcmpeq>
 8011874:	2800      	cmp	r0, #0
 8011876:	d09e      	beq.n	80117b6 <_dtoa_r+0x65e>
 8011878:	e7d0      	b.n	801181c <_dtoa_r+0x6c4>
 801187a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801187c:	2a00      	cmp	r2, #0
 801187e:	f000 80ca 	beq.w	8011a16 <_dtoa_r+0x8be>
 8011882:	9a07      	ldr	r2, [sp, #28]
 8011884:	2a01      	cmp	r2, #1
 8011886:	f300 80ad 	bgt.w	80119e4 <_dtoa_r+0x88c>
 801188a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801188c:	2a00      	cmp	r2, #0
 801188e:	f000 80a5 	beq.w	80119dc <_dtoa_r+0x884>
 8011892:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8011896:	9e08      	ldr	r6, [sp, #32]
 8011898:	9d05      	ldr	r5, [sp, #20]
 801189a:	9a05      	ldr	r2, [sp, #20]
 801189c:	441a      	add	r2, r3
 801189e:	9205      	str	r2, [sp, #20]
 80118a0:	9a06      	ldr	r2, [sp, #24]
 80118a2:	2101      	movs	r1, #1
 80118a4:	441a      	add	r2, r3
 80118a6:	4620      	mov	r0, r4
 80118a8:	9206      	str	r2, [sp, #24]
 80118aa:	f000 fb89 	bl	8011fc0 <__i2b>
 80118ae:	4607      	mov	r7, r0
 80118b0:	b165      	cbz	r5, 80118cc <_dtoa_r+0x774>
 80118b2:	9b06      	ldr	r3, [sp, #24]
 80118b4:	2b00      	cmp	r3, #0
 80118b6:	dd09      	ble.n	80118cc <_dtoa_r+0x774>
 80118b8:	42ab      	cmp	r3, r5
 80118ba:	9a05      	ldr	r2, [sp, #20]
 80118bc:	bfa8      	it	ge
 80118be:	462b      	movge	r3, r5
 80118c0:	1ad2      	subs	r2, r2, r3
 80118c2:	9205      	str	r2, [sp, #20]
 80118c4:	9a06      	ldr	r2, [sp, #24]
 80118c6:	1aed      	subs	r5, r5, r3
 80118c8:	1ad3      	subs	r3, r2, r3
 80118ca:	9306      	str	r3, [sp, #24]
 80118cc:	9b08      	ldr	r3, [sp, #32]
 80118ce:	b1f3      	cbz	r3, 801190e <_dtoa_r+0x7b6>
 80118d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80118d2:	2b00      	cmp	r3, #0
 80118d4:	f000 80a3 	beq.w	8011a1e <_dtoa_r+0x8c6>
 80118d8:	2e00      	cmp	r6, #0
 80118da:	dd10      	ble.n	80118fe <_dtoa_r+0x7a6>
 80118dc:	4639      	mov	r1, r7
 80118de:	4632      	mov	r2, r6
 80118e0:	4620      	mov	r0, r4
 80118e2:	f000 fc2d 	bl	8012140 <__pow5mult>
 80118e6:	4652      	mov	r2, sl
 80118e8:	4601      	mov	r1, r0
 80118ea:	4607      	mov	r7, r0
 80118ec:	4620      	mov	r0, r4
 80118ee:	f000 fb7d 	bl	8011fec <__multiply>
 80118f2:	4651      	mov	r1, sl
 80118f4:	4680      	mov	r8, r0
 80118f6:	4620      	mov	r0, r4
 80118f8:	f000 faac 	bl	8011e54 <_Bfree>
 80118fc:	46c2      	mov	sl, r8
 80118fe:	9b08      	ldr	r3, [sp, #32]
 8011900:	1b9a      	subs	r2, r3, r6
 8011902:	d004      	beq.n	801190e <_dtoa_r+0x7b6>
 8011904:	4651      	mov	r1, sl
 8011906:	4620      	mov	r0, r4
 8011908:	f000 fc1a 	bl	8012140 <__pow5mult>
 801190c:	4682      	mov	sl, r0
 801190e:	2101      	movs	r1, #1
 8011910:	4620      	mov	r0, r4
 8011912:	f000 fb55 	bl	8011fc0 <__i2b>
 8011916:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011918:	2b00      	cmp	r3, #0
 801191a:	4606      	mov	r6, r0
 801191c:	f340 8081 	ble.w	8011a22 <_dtoa_r+0x8ca>
 8011920:	461a      	mov	r2, r3
 8011922:	4601      	mov	r1, r0
 8011924:	4620      	mov	r0, r4
 8011926:	f000 fc0b 	bl	8012140 <__pow5mult>
 801192a:	9b07      	ldr	r3, [sp, #28]
 801192c:	2b01      	cmp	r3, #1
 801192e:	4606      	mov	r6, r0
 8011930:	dd7a      	ble.n	8011a28 <_dtoa_r+0x8d0>
 8011932:	f04f 0800 	mov.w	r8, #0
 8011936:	6933      	ldr	r3, [r6, #16]
 8011938:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801193c:	6918      	ldr	r0, [r3, #16]
 801193e:	f000 faf1 	bl	8011f24 <__hi0bits>
 8011942:	f1c0 0020 	rsb	r0, r0, #32
 8011946:	9b06      	ldr	r3, [sp, #24]
 8011948:	4418      	add	r0, r3
 801194a:	f010 001f 	ands.w	r0, r0, #31
 801194e:	f000 8094 	beq.w	8011a7a <_dtoa_r+0x922>
 8011952:	f1c0 0320 	rsb	r3, r0, #32
 8011956:	2b04      	cmp	r3, #4
 8011958:	f340 8085 	ble.w	8011a66 <_dtoa_r+0x90e>
 801195c:	9b05      	ldr	r3, [sp, #20]
 801195e:	f1c0 001c 	rsb	r0, r0, #28
 8011962:	4403      	add	r3, r0
 8011964:	9305      	str	r3, [sp, #20]
 8011966:	9b06      	ldr	r3, [sp, #24]
 8011968:	4403      	add	r3, r0
 801196a:	4405      	add	r5, r0
 801196c:	9306      	str	r3, [sp, #24]
 801196e:	9b05      	ldr	r3, [sp, #20]
 8011970:	2b00      	cmp	r3, #0
 8011972:	dd05      	ble.n	8011980 <_dtoa_r+0x828>
 8011974:	4651      	mov	r1, sl
 8011976:	461a      	mov	r2, r3
 8011978:	4620      	mov	r0, r4
 801197a:	f000 fc3b 	bl	80121f4 <__lshift>
 801197e:	4682      	mov	sl, r0
 8011980:	9b06      	ldr	r3, [sp, #24]
 8011982:	2b00      	cmp	r3, #0
 8011984:	dd05      	ble.n	8011992 <_dtoa_r+0x83a>
 8011986:	4631      	mov	r1, r6
 8011988:	461a      	mov	r2, r3
 801198a:	4620      	mov	r0, r4
 801198c:	f000 fc32 	bl	80121f4 <__lshift>
 8011990:	4606      	mov	r6, r0
 8011992:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011994:	2b00      	cmp	r3, #0
 8011996:	d072      	beq.n	8011a7e <_dtoa_r+0x926>
 8011998:	4631      	mov	r1, r6
 801199a:	4650      	mov	r0, sl
 801199c:	f000 fc96 	bl	80122cc <__mcmp>
 80119a0:	2800      	cmp	r0, #0
 80119a2:	da6c      	bge.n	8011a7e <_dtoa_r+0x926>
 80119a4:	2300      	movs	r3, #0
 80119a6:	4651      	mov	r1, sl
 80119a8:	220a      	movs	r2, #10
 80119aa:	4620      	mov	r0, r4
 80119ac:	f000 fa74 	bl	8011e98 <__multadd>
 80119b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80119b2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80119b6:	4682      	mov	sl, r0
 80119b8:	2b00      	cmp	r3, #0
 80119ba:	f000 81b0 	beq.w	8011d1e <_dtoa_r+0xbc6>
 80119be:	2300      	movs	r3, #0
 80119c0:	4639      	mov	r1, r7
 80119c2:	220a      	movs	r2, #10
 80119c4:	4620      	mov	r0, r4
 80119c6:	f000 fa67 	bl	8011e98 <__multadd>
 80119ca:	9b01      	ldr	r3, [sp, #4]
 80119cc:	2b00      	cmp	r3, #0
 80119ce:	4607      	mov	r7, r0
 80119d0:	f300 8096 	bgt.w	8011b00 <_dtoa_r+0x9a8>
 80119d4:	9b07      	ldr	r3, [sp, #28]
 80119d6:	2b02      	cmp	r3, #2
 80119d8:	dc59      	bgt.n	8011a8e <_dtoa_r+0x936>
 80119da:	e091      	b.n	8011b00 <_dtoa_r+0x9a8>
 80119dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80119de:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80119e2:	e758      	b.n	8011896 <_dtoa_r+0x73e>
 80119e4:	9b04      	ldr	r3, [sp, #16]
 80119e6:	1e5e      	subs	r6, r3, #1
 80119e8:	9b08      	ldr	r3, [sp, #32]
 80119ea:	42b3      	cmp	r3, r6
 80119ec:	bfbf      	itttt	lt
 80119ee:	9b08      	ldrlt	r3, [sp, #32]
 80119f0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 80119f2:	9608      	strlt	r6, [sp, #32]
 80119f4:	1af3      	sublt	r3, r6, r3
 80119f6:	bfb4      	ite	lt
 80119f8:	18d2      	addlt	r2, r2, r3
 80119fa:	1b9e      	subge	r6, r3, r6
 80119fc:	9b04      	ldr	r3, [sp, #16]
 80119fe:	bfbc      	itt	lt
 8011a00:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8011a02:	2600      	movlt	r6, #0
 8011a04:	2b00      	cmp	r3, #0
 8011a06:	bfb7      	itett	lt
 8011a08:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8011a0c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8011a10:	1a9d      	sublt	r5, r3, r2
 8011a12:	2300      	movlt	r3, #0
 8011a14:	e741      	b.n	801189a <_dtoa_r+0x742>
 8011a16:	9e08      	ldr	r6, [sp, #32]
 8011a18:	9d05      	ldr	r5, [sp, #20]
 8011a1a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8011a1c:	e748      	b.n	80118b0 <_dtoa_r+0x758>
 8011a1e:	9a08      	ldr	r2, [sp, #32]
 8011a20:	e770      	b.n	8011904 <_dtoa_r+0x7ac>
 8011a22:	9b07      	ldr	r3, [sp, #28]
 8011a24:	2b01      	cmp	r3, #1
 8011a26:	dc19      	bgt.n	8011a5c <_dtoa_r+0x904>
 8011a28:	9b02      	ldr	r3, [sp, #8]
 8011a2a:	b9bb      	cbnz	r3, 8011a5c <_dtoa_r+0x904>
 8011a2c:	9b03      	ldr	r3, [sp, #12]
 8011a2e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011a32:	b99b      	cbnz	r3, 8011a5c <_dtoa_r+0x904>
 8011a34:	9b03      	ldr	r3, [sp, #12]
 8011a36:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011a3a:	0d1b      	lsrs	r3, r3, #20
 8011a3c:	051b      	lsls	r3, r3, #20
 8011a3e:	b183      	cbz	r3, 8011a62 <_dtoa_r+0x90a>
 8011a40:	9b05      	ldr	r3, [sp, #20]
 8011a42:	3301      	adds	r3, #1
 8011a44:	9305      	str	r3, [sp, #20]
 8011a46:	9b06      	ldr	r3, [sp, #24]
 8011a48:	3301      	adds	r3, #1
 8011a4a:	9306      	str	r3, [sp, #24]
 8011a4c:	f04f 0801 	mov.w	r8, #1
 8011a50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011a52:	2b00      	cmp	r3, #0
 8011a54:	f47f af6f 	bne.w	8011936 <_dtoa_r+0x7de>
 8011a58:	2001      	movs	r0, #1
 8011a5a:	e774      	b.n	8011946 <_dtoa_r+0x7ee>
 8011a5c:	f04f 0800 	mov.w	r8, #0
 8011a60:	e7f6      	b.n	8011a50 <_dtoa_r+0x8f8>
 8011a62:	4698      	mov	r8, r3
 8011a64:	e7f4      	b.n	8011a50 <_dtoa_r+0x8f8>
 8011a66:	d082      	beq.n	801196e <_dtoa_r+0x816>
 8011a68:	9a05      	ldr	r2, [sp, #20]
 8011a6a:	331c      	adds	r3, #28
 8011a6c:	441a      	add	r2, r3
 8011a6e:	9205      	str	r2, [sp, #20]
 8011a70:	9a06      	ldr	r2, [sp, #24]
 8011a72:	441a      	add	r2, r3
 8011a74:	441d      	add	r5, r3
 8011a76:	9206      	str	r2, [sp, #24]
 8011a78:	e779      	b.n	801196e <_dtoa_r+0x816>
 8011a7a:	4603      	mov	r3, r0
 8011a7c:	e7f4      	b.n	8011a68 <_dtoa_r+0x910>
 8011a7e:	9b04      	ldr	r3, [sp, #16]
 8011a80:	2b00      	cmp	r3, #0
 8011a82:	dc37      	bgt.n	8011af4 <_dtoa_r+0x99c>
 8011a84:	9b07      	ldr	r3, [sp, #28]
 8011a86:	2b02      	cmp	r3, #2
 8011a88:	dd34      	ble.n	8011af4 <_dtoa_r+0x99c>
 8011a8a:	9b04      	ldr	r3, [sp, #16]
 8011a8c:	9301      	str	r3, [sp, #4]
 8011a8e:	9b01      	ldr	r3, [sp, #4]
 8011a90:	b963      	cbnz	r3, 8011aac <_dtoa_r+0x954>
 8011a92:	4631      	mov	r1, r6
 8011a94:	2205      	movs	r2, #5
 8011a96:	4620      	mov	r0, r4
 8011a98:	f000 f9fe 	bl	8011e98 <__multadd>
 8011a9c:	4601      	mov	r1, r0
 8011a9e:	4606      	mov	r6, r0
 8011aa0:	4650      	mov	r0, sl
 8011aa2:	f000 fc13 	bl	80122cc <__mcmp>
 8011aa6:	2800      	cmp	r0, #0
 8011aa8:	f73f adbb 	bgt.w	8011622 <_dtoa_r+0x4ca>
 8011aac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011aae:	9d00      	ldr	r5, [sp, #0]
 8011ab0:	ea6f 0b03 	mvn.w	fp, r3
 8011ab4:	f04f 0800 	mov.w	r8, #0
 8011ab8:	4631      	mov	r1, r6
 8011aba:	4620      	mov	r0, r4
 8011abc:	f000 f9ca 	bl	8011e54 <_Bfree>
 8011ac0:	2f00      	cmp	r7, #0
 8011ac2:	f43f aeab 	beq.w	801181c <_dtoa_r+0x6c4>
 8011ac6:	f1b8 0f00 	cmp.w	r8, #0
 8011aca:	d005      	beq.n	8011ad8 <_dtoa_r+0x980>
 8011acc:	45b8      	cmp	r8, r7
 8011ace:	d003      	beq.n	8011ad8 <_dtoa_r+0x980>
 8011ad0:	4641      	mov	r1, r8
 8011ad2:	4620      	mov	r0, r4
 8011ad4:	f000 f9be 	bl	8011e54 <_Bfree>
 8011ad8:	4639      	mov	r1, r7
 8011ada:	4620      	mov	r0, r4
 8011adc:	f000 f9ba 	bl	8011e54 <_Bfree>
 8011ae0:	e69c      	b.n	801181c <_dtoa_r+0x6c4>
 8011ae2:	2600      	movs	r6, #0
 8011ae4:	4637      	mov	r7, r6
 8011ae6:	e7e1      	b.n	8011aac <_dtoa_r+0x954>
 8011ae8:	46bb      	mov	fp, r7
 8011aea:	4637      	mov	r7, r6
 8011aec:	e599      	b.n	8011622 <_dtoa_r+0x4ca>
 8011aee:	bf00      	nop
 8011af0:	40240000 	.word	0x40240000
 8011af4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011af6:	2b00      	cmp	r3, #0
 8011af8:	f000 80c8 	beq.w	8011c8c <_dtoa_r+0xb34>
 8011afc:	9b04      	ldr	r3, [sp, #16]
 8011afe:	9301      	str	r3, [sp, #4]
 8011b00:	2d00      	cmp	r5, #0
 8011b02:	dd05      	ble.n	8011b10 <_dtoa_r+0x9b8>
 8011b04:	4639      	mov	r1, r7
 8011b06:	462a      	mov	r2, r5
 8011b08:	4620      	mov	r0, r4
 8011b0a:	f000 fb73 	bl	80121f4 <__lshift>
 8011b0e:	4607      	mov	r7, r0
 8011b10:	f1b8 0f00 	cmp.w	r8, #0
 8011b14:	d05b      	beq.n	8011bce <_dtoa_r+0xa76>
 8011b16:	6879      	ldr	r1, [r7, #4]
 8011b18:	4620      	mov	r0, r4
 8011b1a:	f000 f95b 	bl	8011dd4 <_Balloc>
 8011b1e:	4605      	mov	r5, r0
 8011b20:	b928      	cbnz	r0, 8011b2e <_dtoa_r+0x9d6>
 8011b22:	4b83      	ldr	r3, [pc, #524]	; (8011d30 <_dtoa_r+0xbd8>)
 8011b24:	4602      	mov	r2, r0
 8011b26:	f240 21ef 	movw	r1, #751	; 0x2ef
 8011b2a:	f7ff bb2e 	b.w	801118a <_dtoa_r+0x32>
 8011b2e:	693a      	ldr	r2, [r7, #16]
 8011b30:	3202      	adds	r2, #2
 8011b32:	0092      	lsls	r2, r2, #2
 8011b34:	f107 010c 	add.w	r1, r7, #12
 8011b38:	300c      	adds	r0, #12
 8011b3a:	f7ff fa76 	bl	801102a <memcpy>
 8011b3e:	2201      	movs	r2, #1
 8011b40:	4629      	mov	r1, r5
 8011b42:	4620      	mov	r0, r4
 8011b44:	f000 fb56 	bl	80121f4 <__lshift>
 8011b48:	9b00      	ldr	r3, [sp, #0]
 8011b4a:	3301      	adds	r3, #1
 8011b4c:	9304      	str	r3, [sp, #16]
 8011b4e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011b52:	4413      	add	r3, r2
 8011b54:	9308      	str	r3, [sp, #32]
 8011b56:	9b02      	ldr	r3, [sp, #8]
 8011b58:	f003 0301 	and.w	r3, r3, #1
 8011b5c:	46b8      	mov	r8, r7
 8011b5e:	9306      	str	r3, [sp, #24]
 8011b60:	4607      	mov	r7, r0
 8011b62:	9b04      	ldr	r3, [sp, #16]
 8011b64:	4631      	mov	r1, r6
 8011b66:	3b01      	subs	r3, #1
 8011b68:	4650      	mov	r0, sl
 8011b6a:	9301      	str	r3, [sp, #4]
 8011b6c:	f7ff fa6b 	bl	8011046 <quorem>
 8011b70:	4641      	mov	r1, r8
 8011b72:	9002      	str	r0, [sp, #8]
 8011b74:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8011b78:	4650      	mov	r0, sl
 8011b7a:	f000 fba7 	bl	80122cc <__mcmp>
 8011b7e:	463a      	mov	r2, r7
 8011b80:	9005      	str	r0, [sp, #20]
 8011b82:	4631      	mov	r1, r6
 8011b84:	4620      	mov	r0, r4
 8011b86:	f000 fbbd 	bl	8012304 <__mdiff>
 8011b8a:	68c2      	ldr	r2, [r0, #12]
 8011b8c:	4605      	mov	r5, r0
 8011b8e:	bb02      	cbnz	r2, 8011bd2 <_dtoa_r+0xa7a>
 8011b90:	4601      	mov	r1, r0
 8011b92:	4650      	mov	r0, sl
 8011b94:	f000 fb9a 	bl	80122cc <__mcmp>
 8011b98:	4602      	mov	r2, r0
 8011b9a:	4629      	mov	r1, r5
 8011b9c:	4620      	mov	r0, r4
 8011b9e:	9209      	str	r2, [sp, #36]	; 0x24
 8011ba0:	f000 f958 	bl	8011e54 <_Bfree>
 8011ba4:	9b07      	ldr	r3, [sp, #28]
 8011ba6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011ba8:	9d04      	ldr	r5, [sp, #16]
 8011baa:	ea43 0102 	orr.w	r1, r3, r2
 8011bae:	9b06      	ldr	r3, [sp, #24]
 8011bb0:	4319      	orrs	r1, r3
 8011bb2:	d110      	bne.n	8011bd6 <_dtoa_r+0xa7e>
 8011bb4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8011bb8:	d029      	beq.n	8011c0e <_dtoa_r+0xab6>
 8011bba:	9b05      	ldr	r3, [sp, #20]
 8011bbc:	2b00      	cmp	r3, #0
 8011bbe:	dd02      	ble.n	8011bc6 <_dtoa_r+0xa6e>
 8011bc0:	9b02      	ldr	r3, [sp, #8]
 8011bc2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8011bc6:	9b01      	ldr	r3, [sp, #4]
 8011bc8:	f883 9000 	strb.w	r9, [r3]
 8011bcc:	e774      	b.n	8011ab8 <_dtoa_r+0x960>
 8011bce:	4638      	mov	r0, r7
 8011bd0:	e7ba      	b.n	8011b48 <_dtoa_r+0x9f0>
 8011bd2:	2201      	movs	r2, #1
 8011bd4:	e7e1      	b.n	8011b9a <_dtoa_r+0xa42>
 8011bd6:	9b05      	ldr	r3, [sp, #20]
 8011bd8:	2b00      	cmp	r3, #0
 8011bda:	db04      	blt.n	8011be6 <_dtoa_r+0xa8e>
 8011bdc:	9907      	ldr	r1, [sp, #28]
 8011bde:	430b      	orrs	r3, r1
 8011be0:	9906      	ldr	r1, [sp, #24]
 8011be2:	430b      	orrs	r3, r1
 8011be4:	d120      	bne.n	8011c28 <_dtoa_r+0xad0>
 8011be6:	2a00      	cmp	r2, #0
 8011be8:	dded      	ble.n	8011bc6 <_dtoa_r+0xa6e>
 8011bea:	4651      	mov	r1, sl
 8011bec:	2201      	movs	r2, #1
 8011bee:	4620      	mov	r0, r4
 8011bf0:	f000 fb00 	bl	80121f4 <__lshift>
 8011bf4:	4631      	mov	r1, r6
 8011bf6:	4682      	mov	sl, r0
 8011bf8:	f000 fb68 	bl	80122cc <__mcmp>
 8011bfc:	2800      	cmp	r0, #0
 8011bfe:	dc03      	bgt.n	8011c08 <_dtoa_r+0xab0>
 8011c00:	d1e1      	bne.n	8011bc6 <_dtoa_r+0xa6e>
 8011c02:	f019 0f01 	tst.w	r9, #1
 8011c06:	d0de      	beq.n	8011bc6 <_dtoa_r+0xa6e>
 8011c08:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8011c0c:	d1d8      	bne.n	8011bc0 <_dtoa_r+0xa68>
 8011c0e:	9a01      	ldr	r2, [sp, #4]
 8011c10:	2339      	movs	r3, #57	; 0x39
 8011c12:	7013      	strb	r3, [r2, #0]
 8011c14:	462b      	mov	r3, r5
 8011c16:	461d      	mov	r5, r3
 8011c18:	3b01      	subs	r3, #1
 8011c1a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8011c1e:	2a39      	cmp	r2, #57	; 0x39
 8011c20:	d06c      	beq.n	8011cfc <_dtoa_r+0xba4>
 8011c22:	3201      	adds	r2, #1
 8011c24:	701a      	strb	r2, [r3, #0]
 8011c26:	e747      	b.n	8011ab8 <_dtoa_r+0x960>
 8011c28:	2a00      	cmp	r2, #0
 8011c2a:	dd07      	ble.n	8011c3c <_dtoa_r+0xae4>
 8011c2c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8011c30:	d0ed      	beq.n	8011c0e <_dtoa_r+0xab6>
 8011c32:	9a01      	ldr	r2, [sp, #4]
 8011c34:	f109 0301 	add.w	r3, r9, #1
 8011c38:	7013      	strb	r3, [r2, #0]
 8011c3a:	e73d      	b.n	8011ab8 <_dtoa_r+0x960>
 8011c3c:	9b04      	ldr	r3, [sp, #16]
 8011c3e:	9a08      	ldr	r2, [sp, #32]
 8011c40:	f803 9c01 	strb.w	r9, [r3, #-1]
 8011c44:	4293      	cmp	r3, r2
 8011c46:	d043      	beq.n	8011cd0 <_dtoa_r+0xb78>
 8011c48:	4651      	mov	r1, sl
 8011c4a:	2300      	movs	r3, #0
 8011c4c:	220a      	movs	r2, #10
 8011c4e:	4620      	mov	r0, r4
 8011c50:	f000 f922 	bl	8011e98 <__multadd>
 8011c54:	45b8      	cmp	r8, r7
 8011c56:	4682      	mov	sl, r0
 8011c58:	f04f 0300 	mov.w	r3, #0
 8011c5c:	f04f 020a 	mov.w	r2, #10
 8011c60:	4641      	mov	r1, r8
 8011c62:	4620      	mov	r0, r4
 8011c64:	d107      	bne.n	8011c76 <_dtoa_r+0xb1e>
 8011c66:	f000 f917 	bl	8011e98 <__multadd>
 8011c6a:	4680      	mov	r8, r0
 8011c6c:	4607      	mov	r7, r0
 8011c6e:	9b04      	ldr	r3, [sp, #16]
 8011c70:	3301      	adds	r3, #1
 8011c72:	9304      	str	r3, [sp, #16]
 8011c74:	e775      	b.n	8011b62 <_dtoa_r+0xa0a>
 8011c76:	f000 f90f 	bl	8011e98 <__multadd>
 8011c7a:	4639      	mov	r1, r7
 8011c7c:	4680      	mov	r8, r0
 8011c7e:	2300      	movs	r3, #0
 8011c80:	220a      	movs	r2, #10
 8011c82:	4620      	mov	r0, r4
 8011c84:	f000 f908 	bl	8011e98 <__multadd>
 8011c88:	4607      	mov	r7, r0
 8011c8a:	e7f0      	b.n	8011c6e <_dtoa_r+0xb16>
 8011c8c:	9b04      	ldr	r3, [sp, #16]
 8011c8e:	9301      	str	r3, [sp, #4]
 8011c90:	9d00      	ldr	r5, [sp, #0]
 8011c92:	4631      	mov	r1, r6
 8011c94:	4650      	mov	r0, sl
 8011c96:	f7ff f9d6 	bl	8011046 <quorem>
 8011c9a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8011c9e:	9b00      	ldr	r3, [sp, #0]
 8011ca0:	f805 9b01 	strb.w	r9, [r5], #1
 8011ca4:	1aea      	subs	r2, r5, r3
 8011ca6:	9b01      	ldr	r3, [sp, #4]
 8011ca8:	4293      	cmp	r3, r2
 8011caa:	dd07      	ble.n	8011cbc <_dtoa_r+0xb64>
 8011cac:	4651      	mov	r1, sl
 8011cae:	2300      	movs	r3, #0
 8011cb0:	220a      	movs	r2, #10
 8011cb2:	4620      	mov	r0, r4
 8011cb4:	f000 f8f0 	bl	8011e98 <__multadd>
 8011cb8:	4682      	mov	sl, r0
 8011cba:	e7ea      	b.n	8011c92 <_dtoa_r+0xb3a>
 8011cbc:	9b01      	ldr	r3, [sp, #4]
 8011cbe:	2b00      	cmp	r3, #0
 8011cc0:	bfc8      	it	gt
 8011cc2:	461d      	movgt	r5, r3
 8011cc4:	9b00      	ldr	r3, [sp, #0]
 8011cc6:	bfd8      	it	le
 8011cc8:	2501      	movle	r5, #1
 8011cca:	441d      	add	r5, r3
 8011ccc:	f04f 0800 	mov.w	r8, #0
 8011cd0:	4651      	mov	r1, sl
 8011cd2:	2201      	movs	r2, #1
 8011cd4:	4620      	mov	r0, r4
 8011cd6:	f000 fa8d 	bl	80121f4 <__lshift>
 8011cda:	4631      	mov	r1, r6
 8011cdc:	4682      	mov	sl, r0
 8011cde:	f000 faf5 	bl	80122cc <__mcmp>
 8011ce2:	2800      	cmp	r0, #0
 8011ce4:	dc96      	bgt.n	8011c14 <_dtoa_r+0xabc>
 8011ce6:	d102      	bne.n	8011cee <_dtoa_r+0xb96>
 8011ce8:	f019 0f01 	tst.w	r9, #1
 8011cec:	d192      	bne.n	8011c14 <_dtoa_r+0xabc>
 8011cee:	462b      	mov	r3, r5
 8011cf0:	461d      	mov	r5, r3
 8011cf2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011cf6:	2a30      	cmp	r2, #48	; 0x30
 8011cf8:	d0fa      	beq.n	8011cf0 <_dtoa_r+0xb98>
 8011cfa:	e6dd      	b.n	8011ab8 <_dtoa_r+0x960>
 8011cfc:	9a00      	ldr	r2, [sp, #0]
 8011cfe:	429a      	cmp	r2, r3
 8011d00:	d189      	bne.n	8011c16 <_dtoa_r+0xabe>
 8011d02:	f10b 0b01 	add.w	fp, fp, #1
 8011d06:	2331      	movs	r3, #49	; 0x31
 8011d08:	e796      	b.n	8011c38 <_dtoa_r+0xae0>
 8011d0a:	4b0a      	ldr	r3, [pc, #40]	; (8011d34 <_dtoa_r+0xbdc>)
 8011d0c:	f7ff ba99 	b.w	8011242 <_dtoa_r+0xea>
 8011d10:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011d12:	2b00      	cmp	r3, #0
 8011d14:	f47f aa6d 	bne.w	80111f2 <_dtoa_r+0x9a>
 8011d18:	4b07      	ldr	r3, [pc, #28]	; (8011d38 <_dtoa_r+0xbe0>)
 8011d1a:	f7ff ba92 	b.w	8011242 <_dtoa_r+0xea>
 8011d1e:	9b01      	ldr	r3, [sp, #4]
 8011d20:	2b00      	cmp	r3, #0
 8011d22:	dcb5      	bgt.n	8011c90 <_dtoa_r+0xb38>
 8011d24:	9b07      	ldr	r3, [sp, #28]
 8011d26:	2b02      	cmp	r3, #2
 8011d28:	f73f aeb1 	bgt.w	8011a8e <_dtoa_r+0x936>
 8011d2c:	e7b0      	b.n	8011c90 <_dtoa_r+0xb38>
 8011d2e:	bf00      	nop
 8011d30:	08014b84 	.word	0x08014b84
 8011d34:	08014ae4 	.word	0x08014ae4
 8011d38:	08014b08 	.word	0x08014b08

08011d3c <_free_r>:
 8011d3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011d3e:	2900      	cmp	r1, #0
 8011d40:	d044      	beq.n	8011dcc <_free_r+0x90>
 8011d42:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011d46:	9001      	str	r0, [sp, #4]
 8011d48:	2b00      	cmp	r3, #0
 8011d4a:	f1a1 0404 	sub.w	r4, r1, #4
 8011d4e:	bfb8      	it	lt
 8011d50:	18e4      	addlt	r4, r4, r3
 8011d52:	f7fe fb43 	bl	80103dc <__malloc_lock>
 8011d56:	4a1e      	ldr	r2, [pc, #120]	; (8011dd0 <_free_r+0x94>)
 8011d58:	9801      	ldr	r0, [sp, #4]
 8011d5a:	6813      	ldr	r3, [r2, #0]
 8011d5c:	b933      	cbnz	r3, 8011d6c <_free_r+0x30>
 8011d5e:	6063      	str	r3, [r4, #4]
 8011d60:	6014      	str	r4, [r2, #0]
 8011d62:	b003      	add	sp, #12
 8011d64:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011d68:	f7fe bb3e 	b.w	80103e8 <__malloc_unlock>
 8011d6c:	42a3      	cmp	r3, r4
 8011d6e:	d908      	bls.n	8011d82 <_free_r+0x46>
 8011d70:	6825      	ldr	r5, [r4, #0]
 8011d72:	1961      	adds	r1, r4, r5
 8011d74:	428b      	cmp	r3, r1
 8011d76:	bf01      	itttt	eq
 8011d78:	6819      	ldreq	r1, [r3, #0]
 8011d7a:	685b      	ldreq	r3, [r3, #4]
 8011d7c:	1949      	addeq	r1, r1, r5
 8011d7e:	6021      	streq	r1, [r4, #0]
 8011d80:	e7ed      	b.n	8011d5e <_free_r+0x22>
 8011d82:	461a      	mov	r2, r3
 8011d84:	685b      	ldr	r3, [r3, #4]
 8011d86:	b10b      	cbz	r3, 8011d8c <_free_r+0x50>
 8011d88:	42a3      	cmp	r3, r4
 8011d8a:	d9fa      	bls.n	8011d82 <_free_r+0x46>
 8011d8c:	6811      	ldr	r1, [r2, #0]
 8011d8e:	1855      	adds	r5, r2, r1
 8011d90:	42a5      	cmp	r5, r4
 8011d92:	d10b      	bne.n	8011dac <_free_r+0x70>
 8011d94:	6824      	ldr	r4, [r4, #0]
 8011d96:	4421      	add	r1, r4
 8011d98:	1854      	adds	r4, r2, r1
 8011d9a:	42a3      	cmp	r3, r4
 8011d9c:	6011      	str	r1, [r2, #0]
 8011d9e:	d1e0      	bne.n	8011d62 <_free_r+0x26>
 8011da0:	681c      	ldr	r4, [r3, #0]
 8011da2:	685b      	ldr	r3, [r3, #4]
 8011da4:	6053      	str	r3, [r2, #4]
 8011da6:	440c      	add	r4, r1
 8011da8:	6014      	str	r4, [r2, #0]
 8011daa:	e7da      	b.n	8011d62 <_free_r+0x26>
 8011dac:	d902      	bls.n	8011db4 <_free_r+0x78>
 8011dae:	230c      	movs	r3, #12
 8011db0:	6003      	str	r3, [r0, #0]
 8011db2:	e7d6      	b.n	8011d62 <_free_r+0x26>
 8011db4:	6825      	ldr	r5, [r4, #0]
 8011db6:	1961      	adds	r1, r4, r5
 8011db8:	428b      	cmp	r3, r1
 8011dba:	bf04      	itt	eq
 8011dbc:	6819      	ldreq	r1, [r3, #0]
 8011dbe:	685b      	ldreq	r3, [r3, #4]
 8011dc0:	6063      	str	r3, [r4, #4]
 8011dc2:	bf04      	itt	eq
 8011dc4:	1949      	addeq	r1, r1, r5
 8011dc6:	6021      	streq	r1, [r4, #0]
 8011dc8:	6054      	str	r4, [r2, #4]
 8011dca:	e7ca      	b.n	8011d62 <_free_r+0x26>
 8011dcc:	b003      	add	sp, #12
 8011dce:	bd30      	pop	{r4, r5, pc}
 8011dd0:	200063ac 	.word	0x200063ac

08011dd4 <_Balloc>:
 8011dd4:	b570      	push	{r4, r5, r6, lr}
 8011dd6:	69c6      	ldr	r6, [r0, #28]
 8011dd8:	4604      	mov	r4, r0
 8011dda:	460d      	mov	r5, r1
 8011ddc:	b976      	cbnz	r6, 8011dfc <_Balloc+0x28>
 8011dde:	2010      	movs	r0, #16
 8011de0:	f7fe fa54 	bl	801028c <malloc>
 8011de4:	4602      	mov	r2, r0
 8011de6:	61e0      	str	r0, [r4, #28]
 8011de8:	b920      	cbnz	r0, 8011df4 <_Balloc+0x20>
 8011dea:	4b18      	ldr	r3, [pc, #96]	; (8011e4c <_Balloc+0x78>)
 8011dec:	4818      	ldr	r0, [pc, #96]	; (8011e50 <_Balloc+0x7c>)
 8011dee:	216b      	movs	r1, #107	; 0x6b
 8011df0:	f000 fd8c 	bl	801290c <__assert_func>
 8011df4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011df8:	6006      	str	r6, [r0, #0]
 8011dfa:	60c6      	str	r6, [r0, #12]
 8011dfc:	69e6      	ldr	r6, [r4, #28]
 8011dfe:	68f3      	ldr	r3, [r6, #12]
 8011e00:	b183      	cbz	r3, 8011e24 <_Balloc+0x50>
 8011e02:	69e3      	ldr	r3, [r4, #28]
 8011e04:	68db      	ldr	r3, [r3, #12]
 8011e06:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8011e0a:	b9b8      	cbnz	r0, 8011e3c <_Balloc+0x68>
 8011e0c:	2101      	movs	r1, #1
 8011e0e:	fa01 f605 	lsl.w	r6, r1, r5
 8011e12:	1d72      	adds	r2, r6, #5
 8011e14:	0092      	lsls	r2, r2, #2
 8011e16:	4620      	mov	r0, r4
 8011e18:	f000 fd96 	bl	8012948 <_calloc_r>
 8011e1c:	b160      	cbz	r0, 8011e38 <_Balloc+0x64>
 8011e1e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8011e22:	e00e      	b.n	8011e42 <_Balloc+0x6e>
 8011e24:	2221      	movs	r2, #33	; 0x21
 8011e26:	2104      	movs	r1, #4
 8011e28:	4620      	mov	r0, r4
 8011e2a:	f000 fd8d 	bl	8012948 <_calloc_r>
 8011e2e:	69e3      	ldr	r3, [r4, #28]
 8011e30:	60f0      	str	r0, [r6, #12]
 8011e32:	68db      	ldr	r3, [r3, #12]
 8011e34:	2b00      	cmp	r3, #0
 8011e36:	d1e4      	bne.n	8011e02 <_Balloc+0x2e>
 8011e38:	2000      	movs	r0, #0
 8011e3a:	bd70      	pop	{r4, r5, r6, pc}
 8011e3c:	6802      	ldr	r2, [r0, #0]
 8011e3e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011e42:	2300      	movs	r3, #0
 8011e44:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011e48:	e7f7      	b.n	8011e3a <_Balloc+0x66>
 8011e4a:	bf00      	nop
 8011e4c:	08014b15 	.word	0x08014b15
 8011e50:	08014b95 	.word	0x08014b95

08011e54 <_Bfree>:
 8011e54:	b570      	push	{r4, r5, r6, lr}
 8011e56:	69c6      	ldr	r6, [r0, #28]
 8011e58:	4605      	mov	r5, r0
 8011e5a:	460c      	mov	r4, r1
 8011e5c:	b976      	cbnz	r6, 8011e7c <_Bfree+0x28>
 8011e5e:	2010      	movs	r0, #16
 8011e60:	f7fe fa14 	bl	801028c <malloc>
 8011e64:	4602      	mov	r2, r0
 8011e66:	61e8      	str	r0, [r5, #28]
 8011e68:	b920      	cbnz	r0, 8011e74 <_Bfree+0x20>
 8011e6a:	4b09      	ldr	r3, [pc, #36]	; (8011e90 <_Bfree+0x3c>)
 8011e6c:	4809      	ldr	r0, [pc, #36]	; (8011e94 <_Bfree+0x40>)
 8011e6e:	218f      	movs	r1, #143	; 0x8f
 8011e70:	f000 fd4c 	bl	801290c <__assert_func>
 8011e74:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011e78:	6006      	str	r6, [r0, #0]
 8011e7a:	60c6      	str	r6, [r0, #12]
 8011e7c:	b13c      	cbz	r4, 8011e8e <_Bfree+0x3a>
 8011e7e:	69eb      	ldr	r3, [r5, #28]
 8011e80:	6862      	ldr	r2, [r4, #4]
 8011e82:	68db      	ldr	r3, [r3, #12]
 8011e84:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011e88:	6021      	str	r1, [r4, #0]
 8011e8a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8011e8e:	bd70      	pop	{r4, r5, r6, pc}
 8011e90:	08014b15 	.word	0x08014b15
 8011e94:	08014b95 	.word	0x08014b95

08011e98 <__multadd>:
 8011e98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011e9c:	690d      	ldr	r5, [r1, #16]
 8011e9e:	4607      	mov	r7, r0
 8011ea0:	460c      	mov	r4, r1
 8011ea2:	461e      	mov	r6, r3
 8011ea4:	f101 0c14 	add.w	ip, r1, #20
 8011ea8:	2000      	movs	r0, #0
 8011eaa:	f8dc 3000 	ldr.w	r3, [ip]
 8011eae:	b299      	uxth	r1, r3
 8011eb0:	fb02 6101 	mla	r1, r2, r1, r6
 8011eb4:	0c1e      	lsrs	r6, r3, #16
 8011eb6:	0c0b      	lsrs	r3, r1, #16
 8011eb8:	fb02 3306 	mla	r3, r2, r6, r3
 8011ebc:	b289      	uxth	r1, r1
 8011ebe:	3001      	adds	r0, #1
 8011ec0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8011ec4:	4285      	cmp	r5, r0
 8011ec6:	f84c 1b04 	str.w	r1, [ip], #4
 8011eca:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8011ece:	dcec      	bgt.n	8011eaa <__multadd+0x12>
 8011ed0:	b30e      	cbz	r6, 8011f16 <__multadd+0x7e>
 8011ed2:	68a3      	ldr	r3, [r4, #8]
 8011ed4:	42ab      	cmp	r3, r5
 8011ed6:	dc19      	bgt.n	8011f0c <__multadd+0x74>
 8011ed8:	6861      	ldr	r1, [r4, #4]
 8011eda:	4638      	mov	r0, r7
 8011edc:	3101      	adds	r1, #1
 8011ede:	f7ff ff79 	bl	8011dd4 <_Balloc>
 8011ee2:	4680      	mov	r8, r0
 8011ee4:	b928      	cbnz	r0, 8011ef2 <__multadd+0x5a>
 8011ee6:	4602      	mov	r2, r0
 8011ee8:	4b0c      	ldr	r3, [pc, #48]	; (8011f1c <__multadd+0x84>)
 8011eea:	480d      	ldr	r0, [pc, #52]	; (8011f20 <__multadd+0x88>)
 8011eec:	21ba      	movs	r1, #186	; 0xba
 8011eee:	f000 fd0d 	bl	801290c <__assert_func>
 8011ef2:	6922      	ldr	r2, [r4, #16]
 8011ef4:	3202      	adds	r2, #2
 8011ef6:	f104 010c 	add.w	r1, r4, #12
 8011efa:	0092      	lsls	r2, r2, #2
 8011efc:	300c      	adds	r0, #12
 8011efe:	f7ff f894 	bl	801102a <memcpy>
 8011f02:	4621      	mov	r1, r4
 8011f04:	4638      	mov	r0, r7
 8011f06:	f7ff ffa5 	bl	8011e54 <_Bfree>
 8011f0a:	4644      	mov	r4, r8
 8011f0c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8011f10:	3501      	adds	r5, #1
 8011f12:	615e      	str	r6, [r3, #20]
 8011f14:	6125      	str	r5, [r4, #16]
 8011f16:	4620      	mov	r0, r4
 8011f18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011f1c:	08014b84 	.word	0x08014b84
 8011f20:	08014b95 	.word	0x08014b95

08011f24 <__hi0bits>:
 8011f24:	0c03      	lsrs	r3, r0, #16
 8011f26:	041b      	lsls	r3, r3, #16
 8011f28:	b9d3      	cbnz	r3, 8011f60 <__hi0bits+0x3c>
 8011f2a:	0400      	lsls	r0, r0, #16
 8011f2c:	2310      	movs	r3, #16
 8011f2e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8011f32:	bf04      	itt	eq
 8011f34:	0200      	lsleq	r0, r0, #8
 8011f36:	3308      	addeq	r3, #8
 8011f38:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8011f3c:	bf04      	itt	eq
 8011f3e:	0100      	lsleq	r0, r0, #4
 8011f40:	3304      	addeq	r3, #4
 8011f42:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8011f46:	bf04      	itt	eq
 8011f48:	0080      	lsleq	r0, r0, #2
 8011f4a:	3302      	addeq	r3, #2
 8011f4c:	2800      	cmp	r0, #0
 8011f4e:	db05      	blt.n	8011f5c <__hi0bits+0x38>
 8011f50:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8011f54:	f103 0301 	add.w	r3, r3, #1
 8011f58:	bf08      	it	eq
 8011f5a:	2320      	moveq	r3, #32
 8011f5c:	4618      	mov	r0, r3
 8011f5e:	4770      	bx	lr
 8011f60:	2300      	movs	r3, #0
 8011f62:	e7e4      	b.n	8011f2e <__hi0bits+0xa>

08011f64 <__lo0bits>:
 8011f64:	6803      	ldr	r3, [r0, #0]
 8011f66:	f013 0207 	ands.w	r2, r3, #7
 8011f6a:	d00c      	beq.n	8011f86 <__lo0bits+0x22>
 8011f6c:	07d9      	lsls	r1, r3, #31
 8011f6e:	d422      	bmi.n	8011fb6 <__lo0bits+0x52>
 8011f70:	079a      	lsls	r2, r3, #30
 8011f72:	bf49      	itett	mi
 8011f74:	085b      	lsrmi	r3, r3, #1
 8011f76:	089b      	lsrpl	r3, r3, #2
 8011f78:	6003      	strmi	r3, [r0, #0]
 8011f7a:	2201      	movmi	r2, #1
 8011f7c:	bf5c      	itt	pl
 8011f7e:	6003      	strpl	r3, [r0, #0]
 8011f80:	2202      	movpl	r2, #2
 8011f82:	4610      	mov	r0, r2
 8011f84:	4770      	bx	lr
 8011f86:	b299      	uxth	r1, r3
 8011f88:	b909      	cbnz	r1, 8011f8e <__lo0bits+0x2a>
 8011f8a:	0c1b      	lsrs	r3, r3, #16
 8011f8c:	2210      	movs	r2, #16
 8011f8e:	b2d9      	uxtb	r1, r3
 8011f90:	b909      	cbnz	r1, 8011f96 <__lo0bits+0x32>
 8011f92:	3208      	adds	r2, #8
 8011f94:	0a1b      	lsrs	r3, r3, #8
 8011f96:	0719      	lsls	r1, r3, #28
 8011f98:	bf04      	itt	eq
 8011f9a:	091b      	lsreq	r3, r3, #4
 8011f9c:	3204      	addeq	r2, #4
 8011f9e:	0799      	lsls	r1, r3, #30
 8011fa0:	bf04      	itt	eq
 8011fa2:	089b      	lsreq	r3, r3, #2
 8011fa4:	3202      	addeq	r2, #2
 8011fa6:	07d9      	lsls	r1, r3, #31
 8011fa8:	d403      	bmi.n	8011fb2 <__lo0bits+0x4e>
 8011faa:	085b      	lsrs	r3, r3, #1
 8011fac:	f102 0201 	add.w	r2, r2, #1
 8011fb0:	d003      	beq.n	8011fba <__lo0bits+0x56>
 8011fb2:	6003      	str	r3, [r0, #0]
 8011fb4:	e7e5      	b.n	8011f82 <__lo0bits+0x1e>
 8011fb6:	2200      	movs	r2, #0
 8011fb8:	e7e3      	b.n	8011f82 <__lo0bits+0x1e>
 8011fba:	2220      	movs	r2, #32
 8011fbc:	e7e1      	b.n	8011f82 <__lo0bits+0x1e>
	...

08011fc0 <__i2b>:
 8011fc0:	b510      	push	{r4, lr}
 8011fc2:	460c      	mov	r4, r1
 8011fc4:	2101      	movs	r1, #1
 8011fc6:	f7ff ff05 	bl	8011dd4 <_Balloc>
 8011fca:	4602      	mov	r2, r0
 8011fcc:	b928      	cbnz	r0, 8011fda <__i2b+0x1a>
 8011fce:	4b05      	ldr	r3, [pc, #20]	; (8011fe4 <__i2b+0x24>)
 8011fd0:	4805      	ldr	r0, [pc, #20]	; (8011fe8 <__i2b+0x28>)
 8011fd2:	f240 1145 	movw	r1, #325	; 0x145
 8011fd6:	f000 fc99 	bl	801290c <__assert_func>
 8011fda:	2301      	movs	r3, #1
 8011fdc:	6144      	str	r4, [r0, #20]
 8011fde:	6103      	str	r3, [r0, #16]
 8011fe0:	bd10      	pop	{r4, pc}
 8011fe2:	bf00      	nop
 8011fe4:	08014b84 	.word	0x08014b84
 8011fe8:	08014b95 	.word	0x08014b95

08011fec <__multiply>:
 8011fec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ff0:	4691      	mov	r9, r2
 8011ff2:	690a      	ldr	r2, [r1, #16]
 8011ff4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011ff8:	429a      	cmp	r2, r3
 8011ffa:	bfb8      	it	lt
 8011ffc:	460b      	movlt	r3, r1
 8011ffe:	460c      	mov	r4, r1
 8012000:	bfbc      	itt	lt
 8012002:	464c      	movlt	r4, r9
 8012004:	4699      	movlt	r9, r3
 8012006:	6927      	ldr	r7, [r4, #16]
 8012008:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801200c:	68a3      	ldr	r3, [r4, #8]
 801200e:	6861      	ldr	r1, [r4, #4]
 8012010:	eb07 060a 	add.w	r6, r7, sl
 8012014:	42b3      	cmp	r3, r6
 8012016:	b085      	sub	sp, #20
 8012018:	bfb8      	it	lt
 801201a:	3101      	addlt	r1, #1
 801201c:	f7ff feda 	bl	8011dd4 <_Balloc>
 8012020:	b930      	cbnz	r0, 8012030 <__multiply+0x44>
 8012022:	4602      	mov	r2, r0
 8012024:	4b44      	ldr	r3, [pc, #272]	; (8012138 <__multiply+0x14c>)
 8012026:	4845      	ldr	r0, [pc, #276]	; (801213c <__multiply+0x150>)
 8012028:	f44f 71b1 	mov.w	r1, #354	; 0x162
 801202c:	f000 fc6e 	bl	801290c <__assert_func>
 8012030:	f100 0514 	add.w	r5, r0, #20
 8012034:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8012038:	462b      	mov	r3, r5
 801203a:	2200      	movs	r2, #0
 801203c:	4543      	cmp	r3, r8
 801203e:	d321      	bcc.n	8012084 <__multiply+0x98>
 8012040:	f104 0314 	add.w	r3, r4, #20
 8012044:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8012048:	f109 0314 	add.w	r3, r9, #20
 801204c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8012050:	9202      	str	r2, [sp, #8]
 8012052:	1b3a      	subs	r2, r7, r4
 8012054:	3a15      	subs	r2, #21
 8012056:	f022 0203 	bic.w	r2, r2, #3
 801205a:	3204      	adds	r2, #4
 801205c:	f104 0115 	add.w	r1, r4, #21
 8012060:	428f      	cmp	r7, r1
 8012062:	bf38      	it	cc
 8012064:	2204      	movcc	r2, #4
 8012066:	9201      	str	r2, [sp, #4]
 8012068:	9a02      	ldr	r2, [sp, #8]
 801206a:	9303      	str	r3, [sp, #12]
 801206c:	429a      	cmp	r2, r3
 801206e:	d80c      	bhi.n	801208a <__multiply+0x9e>
 8012070:	2e00      	cmp	r6, #0
 8012072:	dd03      	ble.n	801207c <__multiply+0x90>
 8012074:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8012078:	2b00      	cmp	r3, #0
 801207a:	d05b      	beq.n	8012134 <__multiply+0x148>
 801207c:	6106      	str	r6, [r0, #16]
 801207e:	b005      	add	sp, #20
 8012080:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012084:	f843 2b04 	str.w	r2, [r3], #4
 8012088:	e7d8      	b.n	801203c <__multiply+0x50>
 801208a:	f8b3 a000 	ldrh.w	sl, [r3]
 801208e:	f1ba 0f00 	cmp.w	sl, #0
 8012092:	d024      	beq.n	80120de <__multiply+0xf2>
 8012094:	f104 0e14 	add.w	lr, r4, #20
 8012098:	46a9      	mov	r9, r5
 801209a:	f04f 0c00 	mov.w	ip, #0
 801209e:	f85e 2b04 	ldr.w	r2, [lr], #4
 80120a2:	f8d9 1000 	ldr.w	r1, [r9]
 80120a6:	fa1f fb82 	uxth.w	fp, r2
 80120aa:	b289      	uxth	r1, r1
 80120ac:	fb0a 110b 	mla	r1, sl, fp, r1
 80120b0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80120b4:	f8d9 2000 	ldr.w	r2, [r9]
 80120b8:	4461      	add	r1, ip
 80120ba:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80120be:	fb0a c20b 	mla	r2, sl, fp, ip
 80120c2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80120c6:	b289      	uxth	r1, r1
 80120c8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80120cc:	4577      	cmp	r7, lr
 80120ce:	f849 1b04 	str.w	r1, [r9], #4
 80120d2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80120d6:	d8e2      	bhi.n	801209e <__multiply+0xb2>
 80120d8:	9a01      	ldr	r2, [sp, #4]
 80120da:	f845 c002 	str.w	ip, [r5, r2]
 80120de:	9a03      	ldr	r2, [sp, #12]
 80120e0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80120e4:	3304      	adds	r3, #4
 80120e6:	f1b9 0f00 	cmp.w	r9, #0
 80120ea:	d021      	beq.n	8012130 <__multiply+0x144>
 80120ec:	6829      	ldr	r1, [r5, #0]
 80120ee:	f104 0c14 	add.w	ip, r4, #20
 80120f2:	46ae      	mov	lr, r5
 80120f4:	f04f 0a00 	mov.w	sl, #0
 80120f8:	f8bc b000 	ldrh.w	fp, [ip]
 80120fc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8012100:	fb09 220b 	mla	r2, r9, fp, r2
 8012104:	4452      	add	r2, sl
 8012106:	b289      	uxth	r1, r1
 8012108:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801210c:	f84e 1b04 	str.w	r1, [lr], #4
 8012110:	f85c 1b04 	ldr.w	r1, [ip], #4
 8012114:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8012118:	f8be 1000 	ldrh.w	r1, [lr]
 801211c:	fb09 110a 	mla	r1, r9, sl, r1
 8012120:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8012124:	4567      	cmp	r7, ip
 8012126:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801212a:	d8e5      	bhi.n	80120f8 <__multiply+0x10c>
 801212c:	9a01      	ldr	r2, [sp, #4]
 801212e:	50a9      	str	r1, [r5, r2]
 8012130:	3504      	adds	r5, #4
 8012132:	e799      	b.n	8012068 <__multiply+0x7c>
 8012134:	3e01      	subs	r6, #1
 8012136:	e79b      	b.n	8012070 <__multiply+0x84>
 8012138:	08014b84 	.word	0x08014b84
 801213c:	08014b95 	.word	0x08014b95

08012140 <__pow5mult>:
 8012140:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012144:	4615      	mov	r5, r2
 8012146:	f012 0203 	ands.w	r2, r2, #3
 801214a:	4606      	mov	r6, r0
 801214c:	460f      	mov	r7, r1
 801214e:	d007      	beq.n	8012160 <__pow5mult+0x20>
 8012150:	4c25      	ldr	r4, [pc, #148]	; (80121e8 <__pow5mult+0xa8>)
 8012152:	3a01      	subs	r2, #1
 8012154:	2300      	movs	r3, #0
 8012156:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801215a:	f7ff fe9d 	bl	8011e98 <__multadd>
 801215e:	4607      	mov	r7, r0
 8012160:	10ad      	asrs	r5, r5, #2
 8012162:	d03d      	beq.n	80121e0 <__pow5mult+0xa0>
 8012164:	69f4      	ldr	r4, [r6, #28]
 8012166:	b97c      	cbnz	r4, 8012188 <__pow5mult+0x48>
 8012168:	2010      	movs	r0, #16
 801216a:	f7fe f88f 	bl	801028c <malloc>
 801216e:	4602      	mov	r2, r0
 8012170:	61f0      	str	r0, [r6, #28]
 8012172:	b928      	cbnz	r0, 8012180 <__pow5mult+0x40>
 8012174:	4b1d      	ldr	r3, [pc, #116]	; (80121ec <__pow5mult+0xac>)
 8012176:	481e      	ldr	r0, [pc, #120]	; (80121f0 <__pow5mult+0xb0>)
 8012178:	f240 11b3 	movw	r1, #435	; 0x1b3
 801217c:	f000 fbc6 	bl	801290c <__assert_func>
 8012180:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8012184:	6004      	str	r4, [r0, #0]
 8012186:	60c4      	str	r4, [r0, #12]
 8012188:	f8d6 801c 	ldr.w	r8, [r6, #28]
 801218c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8012190:	b94c      	cbnz	r4, 80121a6 <__pow5mult+0x66>
 8012192:	f240 2171 	movw	r1, #625	; 0x271
 8012196:	4630      	mov	r0, r6
 8012198:	f7ff ff12 	bl	8011fc0 <__i2b>
 801219c:	2300      	movs	r3, #0
 801219e:	f8c8 0008 	str.w	r0, [r8, #8]
 80121a2:	4604      	mov	r4, r0
 80121a4:	6003      	str	r3, [r0, #0]
 80121a6:	f04f 0900 	mov.w	r9, #0
 80121aa:	07eb      	lsls	r3, r5, #31
 80121ac:	d50a      	bpl.n	80121c4 <__pow5mult+0x84>
 80121ae:	4639      	mov	r1, r7
 80121b0:	4622      	mov	r2, r4
 80121b2:	4630      	mov	r0, r6
 80121b4:	f7ff ff1a 	bl	8011fec <__multiply>
 80121b8:	4639      	mov	r1, r7
 80121ba:	4680      	mov	r8, r0
 80121bc:	4630      	mov	r0, r6
 80121be:	f7ff fe49 	bl	8011e54 <_Bfree>
 80121c2:	4647      	mov	r7, r8
 80121c4:	106d      	asrs	r5, r5, #1
 80121c6:	d00b      	beq.n	80121e0 <__pow5mult+0xa0>
 80121c8:	6820      	ldr	r0, [r4, #0]
 80121ca:	b938      	cbnz	r0, 80121dc <__pow5mult+0x9c>
 80121cc:	4622      	mov	r2, r4
 80121ce:	4621      	mov	r1, r4
 80121d0:	4630      	mov	r0, r6
 80121d2:	f7ff ff0b 	bl	8011fec <__multiply>
 80121d6:	6020      	str	r0, [r4, #0]
 80121d8:	f8c0 9000 	str.w	r9, [r0]
 80121dc:	4604      	mov	r4, r0
 80121de:	e7e4      	b.n	80121aa <__pow5mult+0x6a>
 80121e0:	4638      	mov	r0, r7
 80121e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80121e6:	bf00      	nop
 80121e8:	08014ce0 	.word	0x08014ce0
 80121ec:	08014b15 	.word	0x08014b15
 80121f0:	08014b95 	.word	0x08014b95

080121f4 <__lshift>:
 80121f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80121f8:	460c      	mov	r4, r1
 80121fa:	6849      	ldr	r1, [r1, #4]
 80121fc:	6923      	ldr	r3, [r4, #16]
 80121fe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8012202:	68a3      	ldr	r3, [r4, #8]
 8012204:	4607      	mov	r7, r0
 8012206:	4691      	mov	r9, r2
 8012208:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801220c:	f108 0601 	add.w	r6, r8, #1
 8012210:	42b3      	cmp	r3, r6
 8012212:	db0b      	blt.n	801222c <__lshift+0x38>
 8012214:	4638      	mov	r0, r7
 8012216:	f7ff fddd 	bl	8011dd4 <_Balloc>
 801221a:	4605      	mov	r5, r0
 801221c:	b948      	cbnz	r0, 8012232 <__lshift+0x3e>
 801221e:	4602      	mov	r2, r0
 8012220:	4b28      	ldr	r3, [pc, #160]	; (80122c4 <__lshift+0xd0>)
 8012222:	4829      	ldr	r0, [pc, #164]	; (80122c8 <__lshift+0xd4>)
 8012224:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8012228:	f000 fb70 	bl	801290c <__assert_func>
 801222c:	3101      	adds	r1, #1
 801222e:	005b      	lsls	r3, r3, #1
 8012230:	e7ee      	b.n	8012210 <__lshift+0x1c>
 8012232:	2300      	movs	r3, #0
 8012234:	f100 0114 	add.w	r1, r0, #20
 8012238:	f100 0210 	add.w	r2, r0, #16
 801223c:	4618      	mov	r0, r3
 801223e:	4553      	cmp	r3, sl
 8012240:	db33      	blt.n	80122aa <__lshift+0xb6>
 8012242:	6920      	ldr	r0, [r4, #16]
 8012244:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012248:	f104 0314 	add.w	r3, r4, #20
 801224c:	f019 091f 	ands.w	r9, r9, #31
 8012250:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8012254:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8012258:	d02b      	beq.n	80122b2 <__lshift+0xbe>
 801225a:	f1c9 0e20 	rsb	lr, r9, #32
 801225e:	468a      	mov	sl, r1
 8012260:	2200      	movs	r2, #0
 8012262:	6818      	ldr	r0, [r3, #0]
 8012264:	fa00 f009 	lsl.w	r0, r0, r9
 8012268:	4310      	orrs	r0, r2
 801226a:	f84a 0b04 	str.w	r0, [sl], #4
 801226e:	f853 2b04 	ldr.w	r2, [r3], #4
 8012272:	459c      	cmp	ip, r3
 8012274:	fa22 f20e 	lsr.w	r2, r2, lr
 8012278:	d8f3      	bhi.n	8012262 <__lshift+0x6e>
 801227a:	ebac 0304 	sub.w	r3, ip, r4
 801227e:	3b15      	subs	r3, #21
 8012280:	f023 0303 	bic.w	r3, r3, #3
 8012284:	3304      	adds	r3, #4
 8012286:	f104 0015 	add.w	r0, r4, #21
 801228a:	4584      	cmp	ip, r0
 801228c:	bf38      	it	cc
 801228e:	2304      	movcc	r3, #4
 8012290:	50ca      	str	r2, [r1, r3]
 8012292:	b10a      	cbz	r2, 8012298 <__lshift+0xa4>
 8012294:	f108 0602 	add.w	r6, r8, #2
 8012298:	3e01      	subs	r6, #1
 801229a:	4638      	mov	r0, r7
 801229c:	612e      	str	r6, [r5, #16]
 801229e:	4621      	mov	r1, r4
 80122a0:	f7ff fdd8 	bl	8011e54 <_Bfree>
 80122a4:	4628      	mov	r0, r5
 80122a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80122aa:	f842 0f04 	str.w	r0, [r2, #4]!
 80122ae:	3301      	adds	r3, #1
 80122b0:	e7c5      	b.n	801223e <__lshift+0x4a>
 80122b2:	3904      	subs	r1, #4
 80122b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80122b8:	f841 2f04 	str.w	r2, [r1, #4]!
 80122bc:	459c      	cmp	ip, r3
 80122be:	d8f9      	bhi.n	80122b4 <__lshift+0xc0>
 80122c0:	e7ea      	b.n	8012298 <__lshift+0xa4>
 80122c2:	bf00      	nop
 80122c4:	08014b84 	.word	0x08014b84
 80122c8:	08014b95 	.word	0x08014b95

080122cc <__mcmp>:
 80122cc:	b530      	push	{r4, r5, lr}
 80122ce:	6902      	ldr	r2, [r0, #16]
 80122d0:	690c      	ldr	r4, [r1, #16]
 80122d2:	1b12      	subs	r2, r2, r4
 80122d4:	d10e      	bne.n	80122f4 <__mcmp+0x28>
 80122d6:	f100 0314 	add.w	r3, r0, #20
 80122da:	3114      	adds	r1, #20
 80122dc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80122e0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80122e4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80122e8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80122ec:	42a5      	cmp	r5, r4
 80122ee:	d003      	beq.n	80122f8 <__mcmp+0x2c>
 80122f0:	d305      	bcc.n	80122fe <__mcmp+0x32>
 80122f2:	2201      	movs	r2, #1
 80122f4:	4610      	mov	r0, r2
 80122f6:	bd30      	pop	{r4, r5, pc}
 80122f8:	4283      	cmp	r3, r0
 80122fa:	d3f3      	bcc.n	80122e4 <__mcmp+0x18>
 80122fc:	e7fa      	b.n	80122f4 <__mcmp+0x28>
 80122fe:	f04f 32ff 	mov.w	r2, #4294967295
 8012302:	e7f7      	b.n	80122f4 <__mcmp+0x28>

08012304 <__mdiff>:
 8012304:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012308:	460c      	mov	r4, r1
 801230a:	4606      	mov	r6, r0
 801230c:	4611      	mov	r1, r2
 801230e:	4620      	mov	r0, r4
 8012310:	4690      	mov	r8, r2
 8012312:	f7ff ffdb 	bl	80122cc <__mcmp>
 8012316:	1e05      	subs	r5, r0, #0
 8012318:	d110      	bne.n	801233c <__mdiff+0x38>
 801231a:	4629      	mov	r1, r5
 801231c:	4630      	mov	r0, r6
 801231e:	f7ff fd59 	bl	8011dd4 <_Balloc>
 8012322:	b930      	cbnz	r0, 8012332 <__mdiff+0x2e>
 8012324:	4b3a      	ldr	r3, [pc, #232]	; (8012410 <__mdiff+0x10c>)
 8012326:	4602      	mov	r2, r0
 8012328:	f240 2137 	movw	r1, #567	; 0x237
 801232c:	4839      	ldr	r0, [pc, #228]	; (8012414 <__mdiff+0x110>)
 801232e:	f000 faed 	bl	801290c <__assert_func>
 8012332:	2301      	movs	r3, #1
 8012334:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8012338:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801233c:	bfa4      	itt	ge
 801233e:	4643      	movge	r3, r8
 8012340:	46a0      	movge	r8, r4
 8012342:	4630      	mov	r0, r6
 8012344:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8012348:	bfa6      	itte	ge
 801234a:	461c      	movge	r4, r3
 801234c:	2500      	movge	r5, #0
 801234e:	2501      	movlt	r5, #1
 8012350:	f7ff fd40 	bl	8011dd4 <_Balloc>
 8012354:	b920      	cbnz	r0, 8012360 <__mdiff+0x5c>
 8012356:	4b2e      	ldr	r3, [pc, #184]	; (8012410 <__mdiff+0x10c>)
 8012358:	4602      	mov	r2, r0
 801235a:	f240 2145 	movw	r1, #581	; 0x245
 801235e:	e7e5      	b.n	801232c <__mdiff+0x28>
 8012360:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8012364:	6926      	ldr	r6, [r4, #16]
 8012366:	60c5      	str	r5, [r0, #12]
 8012368:	f104 0914 	add.w	r9, r4, #20
 801236c:	f108 0514 	add.w	r5, r8, #20
 8012370:	f100 0e14 	add.w	lr, r0, #20
 8012374:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8012378:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801237c:	f108 0210 	add.w	r2, r8, #16
 8012380:	46f2      	mov	sl, lr
 8012382:	2100      	movs	r1, #0
 8012384:	f859 3b04 	ldr.w	r3, [r9], #4
 8012388:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801238c:	fa11 f88b 	uxtah	r8, r1, fp
 8012390:	b299      	uxth	r1, r3
 8012392:	0c1b      	lsrs	r3, r3, #16
 8012394:	eba8 0801 	sub.w	r8, r8, r1
 8012398:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801239c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80123a0:	fa1f f888 	uxth.w	r8, r8
 80123a4:	1419      	asrs	r1, r3, #16
 80123a6:	454e      	cmp	r6, r9
 80123a8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80123ac:	f84a 3b04 	str.w	r3, [sl], #4
 80123b0:	d8e8      	bhi.n	8012384 <__mdiff+0x80>
 80123b2:	1b33      	subs	r3, r6, r4
 80123b4:	3b15      	subs	r3, #21
 80123b6:	f023 0303 	bic.w	r3, r3, #3
 80123ba:	3304      	adds	r3, #4
 80123bc:	3415      	adds	r4, #21
 80123be:	42a6      	cmp	r6, r4
 80123c0:	bf38      	it	cc
 80123c2:	2304      	movcc	r3, #4
 80123c4:	441d      	add	r5, r3
 80123c6:	4473      	add	r3, lr
 80123c8:	469e      	mov	lr, r3
 80123ca:	462e      	mov	r6, r5
 80123cc:	4566      	cmp	r6, ip
 80123ce:	d30e      	bcc.n	80123ee <__mdiff+0xea>
 80123d0:	f10c 0203 	add.w	r2, ip, #3
 80123d4:	1b52      	subs	r2, r2, r5
 80123d6:	f022 0203 	bic.w	r2, r2, #3
 80123da:	3d03      	subs	r5, #3
 80123dc:	45ac      	cmp	ip, r5
 80123de:	bf38      	it	cc
 80123e0:	2200      	movcc	r2, #0
 80123e2:	4413      	add	r3, r2
 80123e4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80123e8:	b17a      	cbz	r2, 801240a <__mdiff+0x106>
 80123ea:	6107      	str	r7, [r0, #16]
 80123ec:	e7a4      	b.n	8012338 <__mdiff+0x34>
 80123ee:	f856 8b04 	ldr.w	r8, [r6], #4
 80123f2:	fa11 f288 	uxtah	r2, r1, r8
 80123f6:	1414      	asrs	r4, r2, #16
 80123f8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80123fc:	b292      	uxth	r2, r2
 80123fe:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8012402:	f84e 2b04 	str.w	r2, [lr], #4
 8012406:	1421      	asrs	r1, r4, #16
 8012408:	e7e0      	b.n	80123cc <__mdiff+0xc8>
 801240a:	3f01      	subs	r7, #1
 801240c:	e7ea      	b.n	80123e4 <__mdiff+0xe0>
 801240e:	bf00      	nop
 8012410:	08014b84 	.word	0x08014b84
 8012414:	08014b95 	.word	0x08014b95

08012418 <__d2b>:
 8012418:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801241c:	460f      	mov	r7, r1
 801241e:	2101      	movs	r1, #1
 8012420:	ec59 8b10 	vmov	r8, r9, d0
 8012424:	4616      	mov	r6, r2
 8012426:	f7ff fcd5 	bl	8011dd4 <_Balloc>
 801242a:	4604      	mov	r4, r0
 801242c:	b930      	cbnz	r0, 801243c <__d2b+0x24>
 801242e:	4602      	mov	r2, r0
 8012430:	4b24      	ldr	r3, [pc, #144]	; (80124c4 <__d2b+0xac>)
 8012432:	4825      	ldr	r0, [pc, #148]	; (80124c8 <__d2b+0xb0>)
 8012434:	f240 310f 	movw	r1, #783	; 0x30f
 8012438:	f000 fa68 	bl	801290c <__assert_func>
 801243c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8012440:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8012444:	bb2d      	cbnz	r5, 8012492 <__d2b+0x7a>
 8012446:	9301      	str	r3, [sp, #4]
 8012448:	f1b8 0300 	subs.w	r3, r8, #0
 801244c:	d026      	beq.n	801249c <__d2b+0x84>
 801244e:	4668      	mov	r0, sp
 8012450:	9300      	str	r3, [sp, #0]
 8012452:	f7ff fd87 	bl	8011f64 <__lo0bits>
 8012456:	e9dd 1200 	ldrd	r1, r2, [sp]
 801245a:	b1e8      	cbz	r0, 8012498 <__d2b+0x80>
 801245c:	f1c0 0320 	rsb	r3, r0, #32
 8012460:	fa02 f303 	lsl.w	r3, r2, r3
 8012464:	430b      	orrs	r3, r1
 8012466:	40c2      	lsrs	r2, r0
 8012468:	6163      	str	r3, [r4, #20]
 801246a:	9201      	str	r2, [sp, #4]
 801246c:	9b01      	ldr	r3, [sp, #4]
 801246e:	61a3      	str	r3, [r4, #24]
 8012470:	2b00      	cmp	r3, #0
 8012472:	bf14      	ite	ne
 8012474:	2202      	movne	r2, #2
 8012476:	2201      	moveq	r2, #1
 8012478:	6122      	str	r2, [r4, #16]
 801247a:	b1bd      	cbz	r5, 80124ac <__d2b+0x94>
 801247c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8012480:	4405      	add	r5, r0
 8012482:	603d      	str	r5, [r7, #0]
 8012484:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8012488:	6030      	str	r0, [r6, #0]
 801248a:	4620      	mov	r0, r4
 801248c:	b003      	add	sp, #12
 801248e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012492:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8012496:	e7d6      	b.n	8012446 <__d2b+0x2e>
 8012498:	6161      	str	r1, [r4, #20]
 801249a:	e7e7      	b.n	801246c <__d2b+0x54>
 801249c:	a801      	add	r0, sp, #4
 801249e:	f7ff fd61 	bl	8011f64 <__lo0bits>
 80124a2:	9b01      	ldr	r3, [sp, #4]
 80124a4:	6163      	str	r3, [r4, #20]
 80124a6:	3020      	adds	r0, #32
 80124a8:	2201      	movs	r2, #1
 80124aa:	e7e5      	b.n	8012478 <__d2b+0x60>
 80124ac:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80124b0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80124b4:	6038      	str	r0, [r7, #0]
 80124b6:	6918      	ldr	r0, [r3, #16]
 80124b8:	f7ff fd34 	bl	8011f24 <__hi0bits>
 80124bc:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80124c0:	e7e2      	b.n	8012488 <__d2b+0x70>
 80124c2:	bf00      	nop
 80124c4:	08014b84 	.word	0x08014b84
 80124c8:	08014b95 	.word	0x08014b95

080124cc <__ssputs_r>:
 80124cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80124d0:	688e      	ldr	r6, [r1, #8]
 80124d2:	461f      	mov	r7, r3
 80124d4:	42be      	cmp	r6, r7
 80124d6:	680b      	ldr	r3, [r1, #0]
 80124d8:	4682      	mov	sl, r0
 80124da:	460c      	mov	r4, r1
 80124dc:	4690      	mov	r8, r2
 80124de:	d82c      	bhi.n	801253a <__ssputs_r+0x6e>
 80124e0:	898a      	ldrh	r2, [r1, #12]
 80124e2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80124e6:	d026      	beq.n	8012536 <__ssputs_r+0x6a>
 80124e8:	6965      	ldr	r5, [r4, #20]
 80124ea:	6909      	ldr	r1, [r1, #16]
 80124ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80124f0:	eba3 0901 	sub.w	r9, r3, r1
 80124f4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80124f8:	1c7b      	adds	r3, r7, #1
 80124fa:	444b      	add	r3, r9
 80124fc:	106d      	asrs	r5, r5, #1
 80124fe:	429d      	cmp	r5, r3
 8012500:	bf38      	it	cc
 8012502:	461d      	movcc	r5, r3
 8012504:	0553      	lsls	r3, r2, #21
 8012506:	d527      	bpl.n	8012558 <__ssputs_r+0x8c>
 8012508:	4629      	mov	r1, r5
 801250a:	f7fd fee7 	bl	80102dc <_malloc_r>
 801250e:	4606      	mov	r6, r0
 8012510:	b360      	cbz	r0, 801256c <__ssputs_r+0xa0>
 8012512:	6921      	ldr	r1, [r4, #16]
 8012514:	464a      	mov	r2, r9
 8012516:	f7fe fd88 	bl	801102a <memcpy>
 801251a:	89a3      	ldrh	r3, [r4, #12]
 801251c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8012520:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012524:	81a3      	strh	r3, [r4, #12]
 8012526:	6126      	str	r6, [r4, #16]
 8012528:	6165      	str	r5, [r4, #20]
 801252a:	444e      	add	r6, r9
 801252c:	eba5 0509 	sub.w	r5, r5, r9
 8012530:	6026      	str	r6, [r4, #0]
 8012532:	60a5      	str	r5, [r4, #8]
 8012534:	463e      	mov	r6, r7
 8012536:	42be      	cmp	r6, r7
 8012538:	d900      	bls.n	801253c <__ssputs_r+0x70>
 801253a:	463e      	mov	r6, r7
 801253c:	6820      	ldr	r0, [r4, #0]
 801253e:	4632      	mov	r2, r6
 8012540:	4641      	mov	r1, r8
 8012542:	f000 f9c9 	bl	80128d8 <memmove>
 8012546:	68a3      	ldr	r3, [r4, #8]
 8012548:	1b9b      	subs	r3, r3, r6
 801254a:	60a3      	str	r3, [r4, #8]
 801254c:	6823      	ldr	r3, [r4, #0]
 801254e:	4433      	add	r3, r6
 8012550:	6023      	str	r3, [r4, #0]
 8012552:	2000      	movs	r0, #0
 8012554:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012558:	462a      	mov	r2, r5
 801255a:	f000 fa1d 	bl	8012998 <_realloc_r>
 801255e:	4606      	mov	r6, r0
 8012560:	2800      	cmp	r0, #0
 8012562:	d1e0      	bne.n	8012526 <__ssputs_r+0x5a>
 8012564:	6921      	ldr	r1, [r4, #16]
 8012566:	4650      	mov	r0, sl
 8012568:	f7ff fbe8 	bl	8011d3c <_free_r>
 801256c:	230c      	movs	r3, #12
 801256e:	f8ca 3000 	str.w	r3, [sl]
 8012572:	89a3      	ldrh	r3, [r4, #12]
 8012574:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012578:	81a3      	strh	r3, [r4, #12]
 801257a:	f04f 30ff 	mov.w	r0, #4294967295
 801257e:	e7e9      	b.n	8012554 <__ssputs_r+0x88>

08012580 <_svfiprintf_r>:
 8012580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012584:	4698      	mov	r8, r3
 8012586:	898b      	ldrh	r3, [r1, #12]
 8012588:	061b      	lsls	r3, r3, #24
 801258a:	b09d      	sub	sp, #116	; 0x74
 801258c:	4607      	mov	r7, r0
 801258e:	460d      	mov	r5, r1
 8012590:	4614      	mov	r4, r2
 8012592:	d50e      	bpl.n	80125b2 <_svfiprintf_r+0x32>
 8012594:	690b      	ldr	r3, [r1, #16]
 8012596:	b963      	cbnz	r3, 80125b2 <_svfiprintf_r+0x32>
 8012598:	2140      	movs	r1, #64	; 0x40
 801259a:	f7fd fe9f 	bl	80102dc <_malloc_r>
 801259e:	6028      	str	r0, [r5, #0]
 80125a0:	6128      	str	r0, [r5, #16]
 80125a2:	b920      	cbnz	r0, 80125ae <_svfiprintf_r+0x2e>
 80125a4:	230c      	movs	r3, #12
 80125a6:	603b      	str	r3, [r7, #0]
 80125a8:	f04f 30ff 	mov.w	r0, #4294967295
 80125ac:	e0d0      	b.n	8012750 <_svfiprintf_r+0x1d0>
 80125ae:	2340      	movs	r3, #64	; 0x40
 80125b0:	616b      	str	r3, [r5, #20]
 80125b2:	2300      	movs	r3, #0
 80125b4:	9309      	str	r3, [sp, #36]	; 0x24
 80125b6:	2320      	movs	r3, #32
 80125b8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80125bc:	f8cd 800c 	str.w	r8, [sp, #12]
 80125c0:	2330      	movs	r3, #48	; 0x30
 80125c2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8012768 <_svfiprintf_r+0x1e8>
 80125c6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80125ca:	f04f 0901 	mov.w	r9, #1
 80125ce:	4623      	mov	r3, r4
 80125d0:	469a      	mov	sl, r3
 80125d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80125d6:	b10a      	cbz	r2, 80125dc <_svfiprintf_r+0x5c>
 80125d8:	2a25      	cmp	r2, #37	; 0x25
 80125da:	d1f9      	bne.n	80125d0 <_svfiprintf_r+0x50>
 80125dc:	ebba 0b04 	subs.w	fp, sl, r4
 80125e0:	d00b      	beq.n	80125fa <_svfiprintf_r+0x7a>
 80125e2:	465b      	mov	r3, fp
 80125e4:	4622      	mov	r2, r4
 80125e6:	4629      	mov	r1, r5
 80125e8:	4638      	mov	r0, r7
 80125ea:	f7ff ff6f 	bl	80124cc <__ssputs_r>
 80125ee:	3001      	adds	r0, #1
 80125f0:	f000 80a9 	beq.w	8012746 <_svfiprintf_r+0x1c6>
 80125f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80125f6:	445a      	add	r2, fp
 80125f8:	9209      	str	r2, [sp, #36]	; 0x24
 80125fa:	f89a 3000 	ldrb.w	r3, [sl]
 80125fe:	2b00      	cmp	r3, #0
 8012600:	f000 80a1 	beq.w	8012746 <_svfiprintf_r+0x1c6>
 8012604:	2300      	movs	r3, #0
 8012606:	f04f 32ff 	mov.w	r2, #4294967295
 801260a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801260e:	f10a 0a01 	add.w	sl, sl, #1
 8012612:	9304      	str	r3, [sp, #16]
 8012614:	9307      	str	r3, [sp, #28]
 8012616:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801261a:	931a      	str	r3, [sp, #104]	; 0x68
 801261c:	4654      	mov	r4, sl
 801261e:	2205      	movs	r2, #5
 8012620:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012624:	4850      	ldr	r0, [pc, #320]	; (8012768 <_svfiprintf_r+0x1e8>)
 8012626:	f7ed fdeb 	bl	8000200 <memchr>
 801262a:	9a04      	ldr	r2, [sp, #16]
 801262c:	b9d8      	cbnz	r0, 8012666 <_svfiprintf_r+0xe6>
 801262e:	06d0      	lsls	r0, r2, #27
 8012630:	bf44      	itt	mi
 8012632:	2320      	movmi	r3, #32
 8012634:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012638:	0711      	lsls	r1, r2, #28
 801263a:	bf44      	itt	mi
 801263c:	232b      	movmi	r3, #43	; 0x2b
 801263e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012642:	f89a 3000 	ldrb.w	r3, [sl]
 8012646:	2b2a      	cmp	r3, #42	; 0x2a
 8012648:	d015      	beq.n	8012676 <_svfiprintf_r+0xf6>
 801264a:	9a07      	ldr	r2, [sp, #28]
 801264c:	4654      	mov	r4, sl
 801264e:	2000      	movs	r0, #0
 8012650:	f04f 0c0a 	mov.w	ip, #10
 8012654:	4621      	mov	r1, r4
 8012656:	f811 3b01 	ldrb.w	r3, [r1], #1
 801265a:	3b30      	subs	r3, #48	; 0x30
 801265c:	2b09      	cmp	r3, #9
 801265e:	d94d      	bls.n	80126fc <_svfiprintf_r+0x17c>
 8012660:	b1b0      	cbz	r0, 8012690 <_svfiprintf_r+0x110>
 8012662:	9207      	str	r2, [sp, #28]
 8012664:	e014      	b.n	8012690 <_svfiprintf_r+0x110>
 8012666:	eba0 0308 	sub.w	r3, r0, r8
 801266a:	fa09 f303 	lsl.w	r3, r9, r3
 801266e:	4313      	orrs	r3, r2
 8012670:	9304      	str	r3, [sp, #16]
 8012672:	46a2      	mov	sl, r4
 8012674:	e7d2      	b.n	801261c <_svfiprintf_r+0x9c>
 8012676:	9b03      	ldr	r3, [sp, #12]
 8012678:	1d19      	adds	r1, r3, #4
 801267a:	681b      	ldr	r3, [r3, #0]
 801267c:	9103      	str	r1, [sp, #12]
 801267e:	2b00      	cmp	r3, #0
 8012680:	bfbb      	ittet	lt
 8012682:	425b      	neglt	r3, r3
 8012684:	f042 0202 	orrlt.w	r2, r2, #2
 8012688:	9307      	strge	r3, [sp, #28]
 801268a:	9307      	strlt	r3, [sp, #28]
 801268c:	bfb8      	it	lt
 801268e:	9204      	strlt	r2, [sp, #16]
 8012690:	7823      	ldrb	r3, [r4, #0]
 8012692:	2b2e      	cmp	r3, #46	; 0x2e
 8012694:	d10c      	bne.n	80126b0 <_svfiprintf_r+0x130>
 8012696:	7863      	ldrb	r3, [r4, #1]
 8012698:	2b2a      	cmp	r3, #42	; 0x2a
 801269a:	d134      	bne.n	8012706 <_svfiprintf_r+0x186>
 801269c:	9b03      	ldr	r3, [sp, #12]
 801269e:	1d1a      	adds	r2, r3, #4
 80126a0:	681b      	ldr	r3, [r3, #0]
 80126a2:	9203      	str	r2, [sp, #12]
 80126a4:	2b00      	cmp	r3, #0
 80126a6:	bfb8      	it	lt
 80126a8:	f04f 33ff 	movlt.w	r3, #4294967295
 80126ac:	3402      	adds	r4, #2
 80126ae:	9305      	str	r3, [sp, #20]
 80126b0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8012778 <_svfiprintf_r+0x1f8>
 80126b4:	7821      	ldrb	r1, [r4, #0]
 80126b6:	2203      	movs	r2, #3
 80126b8:	4650      	mov	r0, sl
 80126ba:	f7ed fda1 	bl	8000200 <memchr>
 80126be:	b138      	cbz	r0, 80126d0 <_svfiprintf_r+0x150>
 80126c0:	9b04      	ldr	r3, [sp, #16]
 80126c2:	eba0 000a 	sub.w	r0, r0, sl
 80126c6:	2240      	movs	r2, #64	; 0x40
 80126c8:	4082      	lsls	r2, r0
 80126ca:	4313      	orrs	r3, r2
 80126cc:	3401      	adds	r4, #1
 80126ce:	9304      	str	r3, [sp, #16]
 80126d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80126d4:	4825      	ldr	r0, [pc, #148]	; (801276c <_svfiprintf_r+0x1ec>)
 80126d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80126da:	2206      	movs	r2, #6
 80126dc:	f7ed fd90 	bl	8000200 <memchr>
 80126e0:	2800      	cmp	r0, #0
 80126e2:	d038      	beq.n	8012756 <_svfiprintf_r+0x1d6>
 80126e4:	4b22      	ldr	r3, [pc, #136]	; (8012770 <_svfiprintf_r+0x1f0>)
 80126e6:	bb1b      	cbnz	r3, 8012730 <_svfiprintf_r+0x1b0>
 80126e8:	9b03      	ldr	r3, [sp, #12]
 80126ea:	3307      	adds	r3, #7
 80126ec:	f023 0307 	bic.w	r3, r3, #7
 80126f0:	3308      	adds	r3, #8
 80126f2:	9303      	str	r3, [sp, #12]
 80126f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80126f6:	4433      	add	r3, r6
 80126f8:	9309      	str	r3, [sp, #36]	; 0x24
 80126fa:	e768      	b.n	80125ce <_svfiprintf_r+0x4e>
 80126fc:	fb0c 3202 	mla	r2, ip, r2, r3
 8012700:	460c      	mov	r4, r1
 8012702:	2001      	movs	r0, #1
 8012704:	e7a6      	b.n	8012654 <_svfiprintf_r+0xd4>
 8012706:	2300      	movs	r3, #0
 8012708:	3401      	adds	r4, #1
 801270a:	9305      	str	r3, [sp, #20]
 801270c:	4619      	mov	r1, r3
 801270e:	f04f 0c0a 	mov.w	ip, #10
 8012712:	4620      	mov	r0, r4
 8012714:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012718:	3a30      	subs	r2, #48	; 0x30
 801271a:	2a09      	cmp	r2, #9
 801271c:	d903      	bls.n	8012726 <_svfiprintf_r+0x1a6>
 801271e:	2b00      	cmp	r3, #0
 8012720:	d0c6      	beq.n	80126b0 <_svfiprintf_r+0x130>
 8012722:	9105      	str	r1, [sp, #20]
 8012724:	e7c4      	b.n	80126b0 <_svfiprintf_r+0x130>
 8012726:	fb0c 2101 	mla	r1, ip, r1, r2
 801272a:	4604      	mov	r4, r0
 801272c:	2301      	movs	r3, #1
 801272e:	e7f0      	b.n	8012712 <_svfiprintf_r+0x192>
 8012730:	ab03      	add	r3, sp, #12
 8012732:	9300      	str	r3, [sp, #0]
 8012734:	462a      	mov	r2, r5
 8012736:	4b0f      	ldr	r3, [pc, #60]	; (8012774 <_svfiprintf_r+0x1f4>)
 8012738:	a904      	add	r1, sp, #16
 801273a:	4638      	mov	r0, r7
 801273c:	f7fd fefa 	bl	8010534 <_printf_float>
 8012740:	1c42      	adds	r2, r0, #1
 8012742:	4606      	mov	r6, r0
 8012744:	d1d6      	bne.n	80126f4 <_svfiprintf_r+0x174>
 8012746:	89ab      	ldrh	r3, [r5, #12]
 8012748:	065b      	lsls	r3, r3, #25
 801274a:	f53f af2d 	bmi.w	80125a8 <_svfiprintf_r+0x28>
 801274e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012750:	b01d      	add	sp, #116	; 0x74
 8012752:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012756:	ab03      	add	r3, sp, #12
 8012758:	9300      	str	r3, [sp, #0]
 801275a:	462a      	mov	r2, r5
 801275c:	4b05      	ldr	r3, [pc, #20]	; (8012774 <_svfiprintf_r+0x1f4>)
 801275e:	a904      	add	r1, sp, #16
 8012760:	4638      	mov	r0, r7
 8012762:	f7fe f98b 	bl	8010a7c <_printf_i>
 8012766:	e7eb      	b.n	8012740 <_svfiprintf_r+0x1c0>
 8012768:	08014cec 	.word	0x08014cec
 801276c:	08014cf6 	.word	0x08014cf6
 8012770:	08010535 	.word	0x08010535
 8012774:	080124cd 	.word	0x080124cd
 8012778:	08014cf2 	.word	0x08014cf2

0801277c <__sflush_r>:
 801277c:	898a      	ldrh	r2, [r1, #12]
 801277e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012782:	4605      	mov	r5, r0
 8012784:	0710      	lsls	r0, r2, #28
 8012786:	460c      	mov	r4, r1
 8012788:	d458      	bmi.n	801283c <__sflush_r+0xc0>
 801278a:	684b      	ldr	r3, [r1, #4]
 801278c:	2b00      	cmp	r3, #0
 801278e:	dc05      	bgt.n	801279c <__sflush_r+0x20>
 8012790:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8012792:	2b00      	cmp	r3, #0
 8012794:	dc02      	bgt.n	801279c <__sflush_r+0x20>
 8012796:	2000      	movs	r0, #0
 8012798:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801279c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801279e:	2e00      	cmp	r6, #0
 80127a0:	d0f9      	beq.n	8012796 <__sflush_r+0x1a>
 80127a2:	2300      	movs	r3, #0
 80127a4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80127a8:	682f      	ldr	r7, [r5, #0]
 80127aa:	6a21      	ldr	r1, [r4, #32]
 80127ac:	602b      	str	r3, [r5, #0]
 80127ae:	d032      	beq.n	8012816 <__sflush_r+0x9a>
 80127b0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80127b2:	89a3      	ldrh	r3, [r4, #12]
 80127b4:	075a      	lsls	r2, r3, #29
 80127b6:	d505      	bpl.n	80127c4 <__sflush_r+0x48>
 80127b8:	6863      	ldr	r3, [r4, #4]
 80127ba:	1ac0      	subs	r0, r0, r3
 80127bc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80127be:	b10b      	cbz	r3, 80127c4 <__sflush_r+0x48>
 80127c0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80127c2:	1ac0      	subs	r0, r0, r3
 80127c4:	2300      	movs	r3, #0
 80127c6:	4602      	mov	r2, r0
 80127c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80127ca:	6a21      	ldr	r1, [r4, #32]
 80127cc:	4628      	mov	r0, r5
 80127ce:	47b0      	blx	r6
 80127d0:	1c43      	adds	r3, r0, #1
 80127d2:	89a3      	ldrh	r3, [r4, #12]
 80127d4:	d106      	bne.n	80127e4 <__sflush_r+0x68>
 80127d6:	6829      	ldr	r1, [r5, #0]
 80127d8:	291d      	cmp	r1, #29
 80127da:	d82b      	bhi.n	8012834 <__sflush_r+0xb8>
 80127dc:	4a29      	ldr	r2, [pc, #164]	; (8012884 <__sflush_r+0x108>)
 80127de:	410a      	asrs	r2, r1
 80127e0:	07d6      	lsls	r6, r2, #31
 80127e2:	d427      	bmi.n	8012834 <__sflush_r+0xb8>
 80127e4:	2200      	movs	r2, #0
 80127e6:	6062      	str	r2, [r4, #4]
 80127e8:	04d9      	lsls	r1, r3, #19
 80127ea:	6922      	ldr	r2, [r4, #16]
 80127ec:	6022      	str	r2, [r4, #0]
 80127ee:	d504      	bpl.n	80127fa <__sflush_r+0x7e>
 80127f0:	1c42      	adds	r2, r0, #1
 80127f2:	d101      	bne.n	80127f8 <__sflush_r+0x7c>
 80127f4:	682b      	ldr	r3, [r5, #0]
 80127f6:	b903      	cbnz	r3, 80127fa <__sflush_r+0x7e>
 80127f8:	6560      	str	r0, [r4, #84]	; 0x54
 80127fa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80127fc:	602f      	str	r7, [r5, #0]
 80127fe:	2900      	cmp	r1, #0
 8012800:	d0c9      	beq.n	8012796 <__sflush_r+0x1a>
 8012802:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012806:	4299      	cmp	r1, r3
 8012808:	d002      	beq.n	8012810 <__sflush_r+0x94>
 801280a:	4628      	mov	r0, r5
 801280c:	f7ff fa96 	bl	8011d3c <_free_r>
 8012810:	2000      	movs	r0, #0
 8012812:	6360      	str	r0, [r4, #52]	; 0x34
 8012814:	e7c0      	b.n	8012798 <__sflush_r+0x1c>
 8012816:	2301      	movs	r3, #1
 8012818:	4628      	mov	r0, r5
 801281a:	47b0      	blx	r6
 801281c:	1c41      	adds	r1, r0, #1
 801281e:	d1c8      	bne.n	80127b2 <__sflush_r+0x36>
 8012820:	682b      	ldr	r3, [r5, #0]
 8012822:	2b00      	cmp	r3, #0
 8012824:	d0c5      	beq.n	80127b2 <__sflush_r+0x36>
 8012826:	2b1d      	cmp	r3, #29
 8012828:	d001      	beq.n	801282e <__sflush_r+0xb2>
 801282a:	2b16      	cmp	r3, #22
 801282c:	d101      	bne.n	8012832 <__sflush_r+0xb6>
 801282e:	602f      	str	r7, [r5, #0]
 8012830:	e7b1      	b.n	8012796 <__sflush_r+0x1a>
 8012832:	89a3      	ldrh	r3, [r4, #12]
 8012834:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012838:	81a3      	strh	r3, [r4, #12]
 801283a:	e7ad      	b.n	8012798 <__sflush_r+0x1c>
 801283c:	690f      	ldr	r7, [r1, #16]
 801283e:	2f00      	cmp	r7, #0
 8012840:	d0a9      	beq.n	8012796 <__sflush_r+0x1a>
 8012842:	0793      	lsls	r3, r2, #30
 8012844:	680e      	ldr	r6, [r1, #0]
 8012846:	bf08      	it	eq
 8012848:	694b      	ldreq	r3, [r1, #20]
 801284a:	600f      	str	r7, [r1, #0]
 801284c:	bf18      	it	ne
 801284e:	2300      	movne	r3, #0
 8012850:	eba6 0807 	sub.w	r8, r6, r7
 8012854:	608b      	str	r3, [r1, #8]
 8012856:	f1b8 0f00 	cmp.w	r8, #0
 801285a:	dd9c      	ble.n	8012796 <__sflush_r+0x1a>
 801285c:	6a21      	ldr	r1, [r4, #32]
 801285e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012860:	4643      	mov	r3, r8
 8012862:	463a      	mov	r2, r7
 8012864:	4628      	mov	r0, r5
 8012866:	47b0      	blx	r6
 8012868:	2800      	cmp	r0, #0
 801286a:	dc06      	bgt.n	801287a <__sflush_r+0xfe>
 801286c:	89a3      	ldrh	r3, [r4, #12]
 801286e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012872:	81a3      	strh	r3, [r4, #12]
 8012874:	f04f 30ff 	mov.w	r0, #4294967295
 8012878:	e78e      	b.n	8012798 <__sflush_r+0x1c>
 801287a:	4407      	add	r7, r0
 801287c:	eba8 0800 	sub.w	r8, r8, r0
 8012880:	e7e9      	b.n	8012856 <__sflush_r+0xda>
 8012882:	bf00      	nop
 8012884:	dfbffffe 	.word	0xdfbffffe

08012888 <_fflush_r>:
 8012888:	b538      	push	{r3, r4, r5, lr}
 801288a:	690b      	ldr	r3, [r1, #16]
 801288c:	4605      	mov	r5, r0
 801288e:	460c      	mov	r4, r1
 8012890:	b913      	cbnz	r3, 8012898 <_fflush_r+0x10>
 8012892:	2500      	movs	r5, #0
 8012894:	4628      	mov	r0, r5
 8012896:	bd38      	pop	{r3, r4, r5, pc}
 8012898:	b118      	cbz	r0, 80128a2 <_fflush_r+0x1a>
 801289a:	6a03      	ldr	r3, [r0, #32]
 801289c:	b90b      	cbnz	r3, 80128a2 <_fflush_r+0x1a>
 801289e:	f7fe fa9b 	bl	8010dd8 <__sinit>
 80128a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80128a6:	2b00      	cmp	r3, #0
 80128a8:	d0f3      	beq.n	8012892 <_fflush_r+0xa>
 80128aa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80128ac:	07d0      	lsls	r0, r2, #31
 80128ae:	d404      	bmi.n	80128ba <_fflush_r+0x32>
 80128b0:	0599      	lsls	r1, r3, #22
 80128b2:	d402      	bmi.n	80128ba <_fflush_r+0x32>
 80128b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80128b6:	f7fe fbb6 	bl	8011026 <__retarget_lock_acquire_recursive>
 80128ba:	4628      	mov	r0, r5
 80128bc:	4621      	mov	r1, r4
 80128be:	f7ff ff5d 	bl	801277c <__sflush_r>
 80128c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80128c4:	07da      	lsls	r2, r3, #31
 80128c6:	4605      	mov	r5, r0
 80128c8:	d4e4      	bmi.n	8012894 <_fflush_r+0xc>
 80128ca:	89a3      	ldrh	r3, [r4, #12]
 80128cc:	059b      	lsls	r3, r3, #22
 80128ce:	d4e1      	bmi.n	8012894 <_fflush_r+0xc>
 80128d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80128d2:	f7fe fba9 	bl	8011028 <__retarget_lock_release_recursive>
 80128d6:	e7dd      	b.n	8012894 <_fflush_r+0xc>

080128d8 <memmove>:
 80128d8:	4288      	cmp	r0, r1
 80128da:	b510      	push	{r4, lr}
 80128dc:	eb01 0402 	add.w	r4, r1, r2
 80128e0:	d902      	bls.n	80128e8 <memmove+0x10>
 80128e2:	4284      	cmp	r4, r0
 80128e4:	4623      	mov	r3, r4
 80128e6:	d807      	bhi.n	80128f8 <memmove+0x20>
 80128e8:	1e43      	subs	r3, r0, #1
 80128ea:	42a1      	cmp	r1, r4
 80128ec:	d008      	beq.n	8012900 <memmove+0x28>
 80128ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80128f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80128f6:	e7f8      	b.n	80128ea <memmove+0x12>
 80128f8:	4402      	add	r2, r0
 80128fa:	4601      	mov	r1, r0
 80128fc:	428a      	cmp	r2, r1
 80128fe:	d100      	bne.n	8012902 <memmove+0x2a>
 8012900:	bd10      	pop	{r4, pc}
 8012902:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012906:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801290a:	e7f7      	b.n	80128fc <memmove+0x24>

0801290c <__assert_func>:
 801290c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801290e:	4614      	mov	r4, r2
 8012910:	461a      	mov	r2, r3
 8012912:	4b09      	ldr	r3, [pc, #36]	; (8012938 <__assert_func+0x2c>)
 8012914:	681b      	ldr	r3, [r3, #0]
 8012916:	4605      	mov	r5, r0
 8012918:	68d8      	ldr	r0, [r3, #12]
 801291a:	b14c      	cbz	r4, 8012930 <__assert_func+0x24>
 801291c:	4b07      	ldr	r3, [pc, #28]	; (801293c <__assert_func+0x30>)
 801291e:	9100      	str	r1, [sp, #0]
 8012920:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012924:	4906      	ldr	r1, [pc, #24]	; (8012940 <__assert_func+0x34>)
 8012926:	462b      	mov	r3, r5
 8012928:	f000 f872 	bl	8012a10 <fiprintf>
 801292c:	f000 f882 	bl	8012a34 <abort>
 8012930:	4b04      	ldr	r3, [pc, #16]	; (8012944 <__assert_func+0x38>)
 8012932:	461c      	mov	r4, r3
 8012934:	e7f3      	b.n	801291e <__assert_func+0x12>
 8012936:	bf00      	nop
 8012938:	200000c4 	.word	0x200000c4
 801293c:	08014d07 	.word	0x08014d07
 8012940:	08014d14 	.word	0x08014d14
 8012944:	08014d42 	.word	0x08014d42

08012948 <_calloc_r>:
 8012948:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801294a:	fba1 2402 	umull	r2, r4, r1, r2
 801294e:	b94c      	cbnz	r4, 8012964 <_calloc_r+0x1c>
 8012950:	4611      	mov	r1, r2
 8012952:	9201      	str	r2, [sp, #4]
 8012954:	f7fd fcc2 	bl	80102dc <_malloc_r>
 8012958:	9a01      	ldr	r2, [sp, #4]
 801295a:	4605      	mov	r5, r0
 801295c:	b930      	cbnz	r0, 801296c <_calloc_r+0x24>
 801295e:	4628      	mov	r0, r5
 8012960:	b003      	add	sp, #12
 8012962:	bd30      	pop	{r4, r5, pc}
 8012964:	220c      	movs	r2, #12
 8012966:	6002      	str	r2, [r0, #0]
 8012968:	2500      	movs	r5, #0
 801296a:	e7f8      	b.n	801295e <_calloc_r+0x16>
 801296c:	4621      	mov	r1, r4
 801296e:	f7fe facc 	bl	8010f0a <memset>
 8012972:	e7f4      	b.n	801295e <_calloc_r+0x16>

08012974 <__ascii_mbtowc>:
 8012974:	b082      	sub	sp, #8
 8012976:	b901      	cbnz	r1, 801297a <__ascii_mbtowc+0x6>
 8012978:	a901      	add	r1, sp, #4
 801297a:	b142      	cbz	r2, 801298e <__ascii_mbtowc+0x1a>
 801297c:	b14b      	cbz	r3, 8012992 <__ascii_mbtowc+0x1e>
 801297e:	7813      	ldrb	r3, [r2, #0]
 8012980:	600b      	str	r3, [r1, #0]
 8012982:	7812      	ldrb	r2, [r2, #0]
 8012984:	1e10      	subs	r0, r2, #0
 8012986:	bf18      	it	ne
 8012988:	2001      	movne	r0, #1
 801298a:	b002      	add	sp, #8
 801298c:	4770      	bx	lr
 801298e:	4610      	mov	r0, r2
 8012990:	e7fb      	b.n	801298a <__ascii_mbtowc+0x16>
 8012992:	f06f 0001 	mvn.w	r0, #1
 8012996:	e7f8      	b.n	801298a <__ascii_mbtowc+0x16>

08012998 <_realloc_r>:
 8012998:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801299c:	4680      	mov	r8, r0
 801299e:	4614      	mov	r4, r2
 80129a0:	460e      	mov	r6, r1
 80129a2:	b921      	cbnz	r1, 80129ae <_realloc_r+0x16>
 80129a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80129a8:	4611      	mov	r1, r2
 80129aa:	f7fd bc97 	b.w	80102dc <_malloc_r>
 80129ae:	b92a      	cbnz	r2, 80129bc <_realloc_r+0x24>
 80129b0:	f7ff f9c4 	bl	8011d3c <_free_r>
 80129b4:	4625      	mov	r5, r4
 80129b6:	4628      	mov	r0, r5
 80129b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80129bc:	f000 f841 	bl	8012a42 <_malloc_usable_size_r>
 80129c0:	4284      	cmp	r4, r0
 80129c2:	4607      	mov	r7, r0
 80129c4:	d802      	bhi.n	80129cc <_realloc_r+0x34>
 80129c6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80129ca:	d812      	bhi.n	80129f2 <_realloc_r+0x5a>
 80129cc:	4621      	mov	r1, r4
 80129ce:	4640      	mov	r0, r8
 80129d0:	f7fd fc84 	bl	80102dc <_malloc_r>
 80129d4:	4605      	mov	r5, r0
 80129d6:	2800      	cmp	r0, #0
 80129d8:	d0ed      	beq.n	80129b6 <_realloc_r+0x1e>
 80129da:	42bc      	cmp	r4, r7
 80129dc:	4622      	mov	r2, r4
 80129de:	4631      	mov	r1, r6
 80129e0:	bf28      	it	cs
 80129e2:	463a      	movcs	r2, r7
 80129e4:	f7fe fb21 	bl	801102a <memcpy>
 80129e8:	4631      	mov	r1, r6
 80129ea:	4640      	mov	r0, r8
 80129ec:	f7ff f9a6 	bl	8011d3c <_free_r>
 80129f0:	e7e1      	b.n	80129b6 <_realloc_r+0x1e>
 80129f2:	4635      	mov	r5, r6
 80129f4:	e7df      	b.n	80129b6 <_realloc_r+0x1e>

080129f6 <__ascii_wctomb>:
 80129f6:	b149      	cbz	r1, 8012a0c <__ascii_wctomb+0x16>
 80129f8:	2aff      	cmp	r2, #255	; 0xff
 80129fa:	bf85      	ittet	hi
 80129fc:	238a      	movhi	r3, #138	; 0x8a
 80129fe:	6003      	strhi	r3, [r0, #0]
 8012a00:	700a      	strbls	r2, [r1, #0]
 8012a02:	f04f 30ff 	movhi.w	r0, #4294967295
 8012a06:	bf98      	it	ls
 8012a08:	2001      	movls	r0, #1
 8012a0a:	4770      	bx	lr
 8012a0c:	4608      	mov	r0, r1
 8012a0e:	4770      	bx	lr

08012a10 <fiprintf>:
 8012a10:	b40e      	push	{r1, r2, r3}
 8012a12:	b503      	push	{r0, r1, lr}
 8012a14:	4601      	mov	r1, r0
 8012a16:	ab03      	add	r3, sp, #12
 8012a18:	4805      	ldr	r0, [pc, #20]	; (8012a30 <fiprintf+0x20>)
 8012a1a:	f853 2b04 	ldr.w	r2, [r3], #4
 8012a1e:	6800      	ldr	r0, [r0, #0]
 8012a20:	9301      	str	r3, [sp, #4]
 8012a22:	f000 f83f 	bl	8012aa4 <_vfiprintf_r>
 8012a26:	b002      	add	sp, #8
 8012a28:	f85d eb04 	ldr.w	lr, [sp], #4
 8012a2c:	b003      	add	sp, #12
 8012a2e:	4770      	bx	lr
 8012a30:	200000c4 	.word	0x200000c4

08012a34 <abort>:
 8012a34:	b508      	push	{r3, lr}
 8012a36:	2006      	movs	r0, #6
 8012a38:	f000 fa0c 	bl	8012e54 <raise>
 8012a3c:	2001      	movs	r0, #1
 8012a3e:	f7f3 f937 	bl	8005cb0 <_exit>

08012a42 <_malloc_usable_size_r>:
 8012a42:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012a46:	1f18      	subs	r0, r3, #4
 8012a48:	2b00      	cmp	r3, #0
 8012a4a:	bfbc      	itt	lt
 8012a4c:	580b      	ldrlt	r3, [r1, r0]
 8012a4e:	18c0      	addlt	r0, r0, r3
 8012a50:	4770      	bx	lr

08012a52 <__sfputc_r>:
 8012a52:	6893      	ldr	r3, [r2, #8]
 8012a54:	3b01      	subs	r3, #1
 8012a56:	2b00      	cmp	r3, #0
 8012a58:	b410      	push	{r4}
 8012a5a:	6093      	str	r3, [r2, #8]
 8012a5c:	da08      	bge.n	8012a70 <__sfputc_r+0x1e>
 8012a5e:	6994      	ldr	r4, [r2, #24]
 8012a60:	42a3      	cmp	r3, r4
 8012a62:	db01      	blt.n	8012a68 <__sfputc_r+0x16>
 8012a64:	290a      	cmp	r1, #10
 8012a66:	d103      	bne.n	8012a70 <__sfputc_r+0x1e>
 8012a68:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012a6c:	f000 b934 	b.w	8012cd8 <__swbuf_r>
 8012a70:	6813      	ldr	r3, [r2, #0]
 8012a72:	1c58      	adds	r0, r3, #1
 8012a74:	6010      	str	r0, [r2, #0]
 8012a76:	7019      	strb	r1, [r3, #0]
 8012a78:	4608      	mov	r0, r1
 8012a7a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012a7e:	4770      	bx	lr

08012a80 <__sfputs_r>:
 8012a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012a82:	4606      	mov	r6, r0
 8012a84:	460f      	mov	r7, r1
 8012a86:	4614      	mov	r4, r2
 8012a88:	18d5      	adds	r5, r2, r3
 8012a8a:	42ac      	cmp	r4, r5
 8012a8c:	d101      	bne.n	8012a92 <__sfputs_r+0x12>
 8012a8e:	2000      	movs	r0, #0
 8012a90:	e007      	b.n	8012aa2 <__sfputs_r+0x22>
 8012a92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012a96:	463a      	mov	r2, r7
 8012a98:	4630      	mov	r0, r6
 8012a9a:	f7ff ffda 	bl	8012a52 <__sfputc_r>
 8012a9e:	1c43      	adds	r3, r0, #1
 8012aa0:	d1f3      	bne.n	8012a8a <__sfputs_r+0xa>
 8012aa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012aa4 <_vfiprintf_r>:
 8012aa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012aa8:	460d      	mov	r5, r1
 8012aaa:	b09d      	sub	sp, #116	; 0x74
 8012aac:	4614      	mov	r4, r2
 8012aae:	4698      	mov	r8, r3
 8012ab0:	4606      	mov	r6, r0
 8012ab2:	b118      	cbz	r0, 8012abc <_vfiprintf_r+0x18>
 8012ab4:	6a03      	ldr	r3, [r0, #32]
 8012ab6:	b90b      	cbnz	r3, 8012abc <_vfiprintf_r+0x18>
 8012ab8:	f7fe f98e 	bl	8010dd8 <__sinit>
 8012abc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012abe:	07d9      	lsls	r1, r3, #31
 8012ac0:	d405      	bmi.n	8012ace <_vfiprintf_r+0x2a>
 8012ac2:	89ab      	ldrh	r3, [r5, #12]
 8012ac4:	059a      	lsls	r2, r3, #22
 8012ac6:	d402      	bmi.n	8012ace <_vfiprintf_r+0x2a>
 8012ac8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012aca:	f7fe faac 	bl	8011026 <__retarget_lock_acquire_recursive>
 8012ace:	89ab      	ldrh	r3, [r5, #12]
 8012ad0:	071b      	lsls	r3, r3, #28
 8012ad2:	d501      	bpl.n	8012ad8 <_vfiprintf_r+0x34>
 8012ad4:	692b      	ldr	r3, [r5, #16]
 8012ad6:	b99b      	cbnz	r3, 8012b00 <_vfiprintf_r+0x5c>
 8012ad8:	4629      	mov	r1, r5
 8012ada:	4630      	mov	r0, r6
 8012adc:	f000 f93a 	bl	8012d54 <__swsetup_r>
 8012ae0:	b170      	cbz	r0, 8012b00 <_vfiprintf_r+0x5c>
 8012ae2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012ae4:	07dc      	lsls	r4, r3, #31
 8012ae6:	d504      	bpl.n	8012af2 <_vfiprintf_r+0x4e>
 8012ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8012aec:	b01d      	add	sp, #116	; 0x74
 8012aee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012af2:	89ab      	ldrh	r3, [r5, #12]
 8012af4:	0598      	lsls	r0, r3, #22
 8012af6:	d4f7      	bmi.n	8012ae8 <_vfiprintf_r+0x44>
 8012af8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012afa:	f7fe fa95 	bl	8011028 <__retarget_lock_release_recursive>
 8012afe:	e7f3      	b.n	8012ae8 <_vfiprintf_r+0x44>
 8012b00:	2300      	movs	r3, #0
 8012b02:	9309      	str	r3, [sp, #36]	; 0x24
 8012b04:	2320      	movs	r3, #32
 8012b06:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012b0a:	f8cd 800c 	str.w	r8, [sp, #12]
 8012b0e:	2330      	movs	r3, #48	; 0x30
 8012b10:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8012cc4 <_vfiprintf_r+0x220>
 8012b14:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012b18:	f04f 0901 	mov.w	r9, #1
 8012b1c:	4623      	mov	r3, r4
 8012b1e:	469a      	mov	sl, r3
 8012b20:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012b24:	b10a      	cbz	r2, 8012b2a <_vfiprintf_r+0x86>
 8012b26:	2a25      	cmp	r2, #37	; 0x25
 8012b28:	d1f9      	bne.n	8012b1e <_vfiprintf_r+0x7a>
 8012b2a:	ebba 0b04 	subs.w	fp, sl, r4
 8012b2e:	d00b      	beq.n	8012b48 <_vfiprintf_r+0xa4>
 8012b30:	465b      	mov	r3, fp
 8012b32:	4622      	mov	r2, r4
 8012b34:	4629      	mov	r1, r5
 8012b36:	4630      	mov	r0, r6
 8012b38:	f7ff ffa2 	bl	8012a80 <__sfputs_r>
 8012b3c:	3001      	adds	r0, #1
 8012b3e:	f000 80a9 	beq.w	8012c94 <_vfiprintf_r+0x1f0>
 8012b42:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012b44:	445a      	add	r2, fp
 8012b46:	9209      	str	r2, [sp, #36]	; 0x24
 8012b48:	f89a 3000 	ldrb.w	r3, [sl]
 8012b4c:	2b00      	cmp	r3, #0
 8012b4e:	f000 80a1 	beq.w	8012c94 <_vfiprintf_r+0x1f0>
 8012b52:	2300      	movs	r3, #0
 8012b54:	f04f 32ff 	mov.w	r2, #4294967295
 8012b58:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012b5c:	f10a 0a01 	add.w	sl, sl, #1
 8012b60:	9304      	str	r3, [sp, #16]
 8012b62:	9307      	str	r3, [sp, #28]
 8012b64:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012b68:	931a      	str	r3, [sp, #104]	; 0x68
 8012b6a:	4654      	mov	r4, sl
 8012b6c:	2205      	movs	r2, #5
 8012b6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012b72:	4854      	ldr	r0, [pc, #336]	; (8012cc4 <_vfiprintf_r+0x220>)
 8012b74:	f7ed fb44 	bl	8000200 <memchr>
 8012b78:	9a04      	ldr	r2, [sp, #16]
 8012b7a:	b9d8      	cbnz	r0, 8012bb4 <_vfiprintf_r+0x110>
 8012b7c:	06d1      	lsls	r1, r2, #27
 8012b7e:	bf44      	itt	mi
 8012b80:	2320      	movmi	r3, #32
 8012b82:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012b86:	0713      	lsls	r3, r2, #28
 8012b88:	bf44      	itt	mi
 8012b8a:	232b      	movmi	r3, #43	; 0x2b
 8012b8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012b90:	f89a 3000 	ldrb.w	r3, [sl]
 8012b94:	2b2a      	cmp	r3, #42	; 0x2a
 8012b96:	d015      	beq.n	8012bc4 <_vfiprintf_r+0x120>
 8012b98:	9a07      	ldr	r2, [sp, #28]
 8012b9a:	4654      	mov	r4, sl
 8012b9c:	2000      	movs	r0, #0
 8012b9e:	f04f 0c0a 	mov.w	ip, #10
 8012ba2:	4621      	mov	r1, r4
 8012ba4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012ba8:	3b30      	subs	r3, #48	; 0x30
 8012baa:	2b09      	cmp	r3, #9
 8012bac:	d94d      	bls.n	8012c4a <_vfiprintf_r+0x1a6>
 8012bae:	b1b0      	cbz	r0, 8012bde <_vfiprintf_r+0x13a>
 8012bb0:	9207      	str	r2, [sp, #28]
 8012bb2:	e014      	b.n	8012bde <_vfiprintf_r+0x13a>
 8012bb4:	eba0 0308 	sub.w	r3, r0, r8
 8012bb8:	fa09 f303 	lsl.w	r3, r9, r3
 8012bbc:	4313      	orrs	r3, r2
 8012bbe:	9304      	str	r3, [sp, #16]
 8012bc0:	46a2      	mov	sl, r4
 8012bc2:	e7d2      	b.n	8012b6a <_vfiprintf_r+0xc6>
 8012bc4:	9b03      	ldr	r3, [sp, #12]
 8012bc6:	1d19      	adds	r1, r3, #4
 8012bc8:	681b      	ldr	r3, [r3, #0]
 8012bca:	9103      	str	r1, [sp, #12]
 8012bcc:	2b00      	cmp	r3, #0
 8012bce:	bfbb      	ittet	lt
 8012bd0:	425b      	neglt	r3, r3
 8012bd2:	f042 0202 	orrlt.w	r2, r2, #2
 8012bd6:	9307      	strge	r3, [sp, #28]
 8012bd8:	9307      	strlt	r3, [sp, #28]
 8012bda:	bfb8      	it	lt
 8012bdc:	9204      	strlt	r2, [sp, #16]
 8012bde:	7823      	ldrb	r3, [r4, #0]
 8012be0:	2b2e      	cmp	r3, #46	; 0x2e
 8012be2:	d10c      	bne.n	8012bfe <_vfiprintf_r+0x15a>
 8012be4:	7863      	ldrb	r3, [r4, #1]
 8012be6:	2b2a      	cmp	r3, #42	; 0x2a
 8012be8:	d134      	bne.n	8012c54 <_vfiprintf_r+0x1b0>
 8012bea:	9b03      	ldr	r3, [sp, #12]
 8012bec:	1d1a      	adds	r2, r3, #4
 8012bee:	681b      	ldr	r3, [r3, #0]
 8012bf0:	9203      	str	r2, [sp, #12]
 8012bf2:	2b00      	cmp	r3, #0
 8012bf4:	bfb8      	it	lt
 8012bf6:	f04f 33ff 	movlt.w	r3, #4294967295
 8012bfa:	3402      	adds	r4, #2
 8012bfc:	9305      	str	r3, [sp, #20]
 8012bfe:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8012cd4 <_vfiprintf_r+0x230>
 8012c02:	7821      	ldrb	r1, [r4, #0]
 8012c04:	2203      	movs	r2, #3
 8012c06:	4650      	mov	r0, sl
 8012c08:	f7ed fafa 	bl	8000200 <memchr>
 8012c0c:	b138      	cbz	r0, 8012c1e <_vfiprintf_r+0x17a>
 8012c0e:	9b04      	ldr	r3, [sp, #16]
 8012c10:	eba0 000a 	sub.w	r0, r0, sl
 8012c14:	2240      	movs	r2, #64	; 0x40
 8012c16:	4082      	lsls	r2, r0
 8012c18:	4313      	orrs	r3, r2
 8012c1a:	3401      	adds	r4, #1
 8012c1c:	9304      	str	r3, [sp, #16]
 8012c1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012c22:	4829      	ldr	r0, [pc, #164]	; (8012cc8 <_vfiprintf_r+0x224>)
 8012c24:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012c28:	2206      	movs	r2, #6
 8012c2a:	f7ed fae9 	bl	8000200 <memchr>
 8012c2e:	2800      	cmp	r0, #0
 8012c30:	d03f      	beq.n	8012cb2 <_vfiprintf_r+0x20e>
 8012c32:	4b26      	ldr	r3, [pc, #152]	; (8012ccc <_vfiprintf_r+0x228>)
 8012c34:	bb1b      	cbnz	r3, 8012c7e <_vfiprintf_r+0x1da>
 8012c36:	9b03      	ldr	r3, [sp, #12]
 8012c38:	3307      	adds	r3, #7
 8012c3a:	f023 0307 	bic.w	r3, r3, #7
 8012c3e:	3308      	adds	r3, #8
 8012c40:	9303      	str	r3, [sp, #12]
 8012c42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012c44:	443b      	add	r3, r7
 8012c46:	9309      	str	r3, [sp, #36]	; 0x24
 8012c48:	e768      	b.n	8012b1c <_vfiprintf_r+0x78>
 8012c4a:	fb0c 3202 	mla	r2, ip, r2, r3
 8012c4e:	460c      	mov	r4, r1
 8012c50:	2001      	movs	r0, #1
 8012c52:	e7a6      	b.n	8012ba2 <_vfiprintf_r+0xfe>
 8012c54:	2300      	movs	r3, #0
 8012c56:	3401      	adds	r4, #1
 8012c58:	9305      	str	r3, [sp, #20]
 8012c5a:	4619      	mov	r1, r3
 8012c5c:	f04f 0c0a 	mov.w	ip, #10
 8012c60:	4620      	mov	r0, r4
 8012c62:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012c66:	3a30      	subs	r2, #48	; 0x30
 8012c68:	2a09      	cmp	r2, #9
 8012c6a:	d903      	bls.n	8012c74 <_vfiprintf_r+0x1d0>
 8012c6c:	2b00      	cmp	r3, #0
 8012c6e:	d0c6      	beq.n	8012bfe <_vfiprintf_r+0x15a>
 8012c70:	9105      	str	r1, [sp, #20]
 8012c72:	e7c4      	b.n	8012bfe <_vfiprintf_r+0x15a>
 8012c74:	fb0c 2101 	mla	r1, ip, r1, r2
 8012c78:	4604      	mov	r4, r0
 8012c7a:	2301      	movs	r3, #1
 8012c7c:	e7f0      	b.n	8012c60 <_vfiprintf_r+0x1bc>
 8012c7e:	ab03      	add	r3, sp, #12
 8012c80:	9300      	str	r3, [sp, #0]
 8012c82:	462a      	mov	r2, r5
 8012c84:	4b12      	ldr	r3, [pc, #72]	; (8012cd0 <_vfiprintf_r+0x22c>)
 8012c86:	a904      	add	r1, sp, #16
 8012c88:	4630      	mov	r0, r6
 8012c8a:	f7fd fc53 	bl	8010534 <_printf_float>
 8012c8e:	4607      	mov	r7, r0
 8012c90:	1c78      	adds	r0, r7, #1
 8012c92:	d1d6      	bne.n	8012c42 <_vfiprintf_r+0x19e>
 8012c94:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012c96:	07d9      	lsls	r1, r3, #31
 8012c98:	d405      	bmi.n	8012ca6 <_vfiprintf_r+0x202>
 8012c9a:	89ab      	ldrh	r3, [r5, #12]
 8012c9c:	059a      	lsls	r2, r3, #22
 8012c9e:	d402      	bmi.n	8012ca6 <_vfiprintf_r+0x202>
 8012ca0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012ca2:	f7fe f9c1 	bl	8011028 <__retarget_lock_release_recursive>
 8012ca6:	89ab      	ldrh	r3, [r5, #12]
 8012ca8:	065b      	lsls	r3, r3, #25
 8012caa:	f53f af1d 	bmi.w	8012ae8 <_vfiprintf_r+0x44>
 8012cae:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012cb0:	e71c      	b.n	8012aec <_vfiprintf_r+0x48>
 8012cb2:	ab03      	add	r3, sp, #12
 8012cb4:	9300      	str	r3, [sp, #0]
 8012cb6:	462a      	mov	r2, r5
 8012cb8:	4b05      	ldr	r3, [pc, #20]	; (8012cd0 <_vfiprintf_r+0x22c>)
 8012cba:	a904      	add	r1, sp, #16
 8012cbc:	4630      	mov	r0, r6
 8012cbe:	f7fd fedd 	bl	8010a7c <_printf_i>
 8012cc2:	e7e4      	b.n	8012c8e <_vfiprintf_r+0x1ea>
 8012cc4:	08014cec 	.word	0x08014cec
 8012cc8:	08014cf6 	.word	0x08014cf6
 8012ccc:	08010535 	.word	0x08010535
 8012cd0:	08012a81 	.word	0x08012a81
 8012cd4:	08014cf2 	.word	0x08014cf2

08012cd8 <__swbuf_r>:
 8012cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012cda:	460e      	mov	r6, r1
 8012cdc:	4614      	mov	r4, r2
 8012cde:	4605      	mov	r5, r0
 8012ce0:	b118      	cbz	r0, 8012cea <__swbuf_r+0x12>
 8012ce2:	6a03      	ldr	r3, [r0, #32]
 8012ce4:	b90b      	cbnz	r3, 8012cea <__swbuf_r+0x12>
 8012ce6:	f7fe f877 	bl	8010dd8 <__sinit>
 8012cea:	69a3      	ldr	r3, [r4, #24]
 8012cec:	60a3      	str	r3, [r4, #8]
 8012cee:	89a3      	ldrh	r3, [r4, #12]
 8012cf0:	071a      	lsls	r2, r3, #28
 8012cf2:	d525      	bpl.n	8012d40 <__swbuf_r+0x68>
 8012cf4:	6923      	ldr	r3, [r4, #16]
 8012cf6:	b31b      	cbz	r3, 8012d40 <__swbuf_r+0x68>
 8012cf8:	6823      	ldr	r3, [r4, #0]
 8012cfa:	6922      	ldr	r2, [r4, #16]
 8012cfc:	1a98      	subs	r0, r3, r2
 8012cfe:	6963      	ldr	r3, [r4, #20]
 8012d00:	b2f6      	uxtb	r6, r6
 8012d02:	4283      	cmp	r3, r0
 8012d04:	4637      	mov	r7, r6
 8012d06:	dc04      	bgt.n	8012d12 <__swbuf_r+0x3a>
 8012d08:	4621      	mov	r1, r4
 8012d0a:	4628      	mov	r0, r5
 8012d0c:	f7ff fdbc 	bl	8012888 <_fflush_r>
 8012d10:	b9e0      	cbnz	r0, 8012d4c <__swbuf_r+0x74>
 8012d12:	68a3      	ldr	r3, [r4, #8]
 8012d14:	3b01      	subs	r3, #1
 8012d16:	60a3      	str	r3, [r4, #8]
 8012d18:	6823      	ldr	r3, [r4, #0]
 8012d1a:	1c5a      	adds	r2, r3, #1
 8012d1c:	6022      	str	r2, [r4, #0]
 8012d1e:	701e      	strb	r6, [r3, #0]
 8012d20:	6962      	ldr	r2, [r4, #20]
 8012d22:	1c43      	adds	r3, r0, #1
 8012d24:	429a      	cmp	r2, r3
 8012d26:	d004      	beq.n	8012d32 <__swbuf_r+0x5a>
 8012d28:	89a3      	ldrh	r3, [r4, #12]
 8012d2a:	07db      	lsls	r3, r3, #31
 8012d2c:	d506      	bpl.n	8012d3c <__swbuf_r+0x64>
 8012d2e:	2e0a      	cmp	r6, #10
 8012d30:	d104      	bne.n	8012d3c <__swbuf_r+0x64>
 8012d32:	4621      	mov	r1, r4
 8012d34:	4628      	mov	r0, r5
 8012d36:	f7ff fda7 	bl	8012888 <_fflush_r>
 8012d3a:	b938      	cbnz	r0, 8012d4c <__swbuf_r+0x74>
 8012d3c:	4638      	mov	r0, r7
 8012d3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012d40:	4621      	mov	r1, r4
 8012d42:	4628      	mov	r0, r5
 8012d44:	f000 f806 	bl	8012d54 <__swsetup_r>
 8012d48:	2800      	cmp	r0, #0
 8012d4a:	d0d5      	beq.n	8012cf8 <__swbuf_r+0x20>
 8012d4c:	f04f 37ff 	mov.w	r7, #4294967295
 8012d50:	e7f4      	b.n	8012d3c <__swbuf_r+0x64>
	...

08012d54 <__swsetup_r>:
 8012d54:	b538      	push	{r3, r4, r5, lr}
 8012d56:	4b2a      	ldr	r3, [pc, #168]	; (8012e00 <__swsetup_r+0xac>)
 8012d58:	4605      	mov	r5, r0
 8012d5a:	6818      	ldr	r0, [r3, #0]
 8012d5c:	460c      	mov	r4, r1
 8012d5e:	b118      	cbz	r0, 8012d68 <__swsetup_r+0x14>
 8012d60:	6a03      	ldr	r3, [r0, #32]
 8012d62:	b90b      	cbnz	r3, 8012d68 <__swsetup_r+0x14>
 8012d64:	f7fe f838 	bl	8010dd8 <__sinit>
 8012d68:	89a3      	ldrh	r3, [r4, #12]
 8012d6a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012d6e:	0718      	lsls	r0, r3, #28
 8012d70:	d422      	bmi.n	8012db8 <__swsetup_r+0x64>
 8012d72:	06d9      	lsls	r1, r3, #27
 8012d74:	d407      	bmi.n	8012d86 <__swsetup_r+0x32>
 8012d76:	2309      	movs	r3, #9
 8012d78:	602b      	str	r3, [r5, #0]
 8012d7a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8012d7e:	81a3      	strh	r3, [r4, #12]
 8012d80:	f04f 30ff 	mov.w	r0, #4294967295
 8012d84:	e034      	b.n	8012df0 <__swsetup_r+0x9c>
 8012d86:	0758      	lsls	r0, r3, #29
 8012d88:	d512      	bpl.n	8012db0 <__swsetup_r+0x5c>
 8012d8a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012d8c:	b141      	cbz	r1, 8012da0 <__swsetup_r+0x4c>
 8012d8e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012d92:	4299      	cmp	r1, r3
 8012d94:	d002      	beq.n	8012d9c <__swsetup_r+0x48>
 8012d96:	4628      	mov	r0, r5
 8012d98:	f7fe ffd0 	bl	8011d3c <_free_r>
 8012d9c:	2300      	movs	r3, #0
 8012d9e:	6363      	str	r3, [r4, #52]	; 0x34
 8012da0:	89a3      	ldrh	r3, [r4, #12]
 8012da2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012da6:	81a3      	strh	r3, [r4, #12]
 8012da8:	2300      	movs	r3, #0
 8012daa:	6063      	str	r3, [r4, #4]
 8012dac:	6923      	ldr	r3, [r4, #16]
 8012dae:	6023      	str	r3, [r4, #0]
 8012db0:	89a3      	ldrh	r3, [r4, #12]
 8012db2:	f043 0308 	orr.w	r3, r3, #8
 8012db6:	81a3      	strh	r3, [r4, #12]
 8012db8:	6923      	ldr	r3, [r4, #16]
 8012dba:	b94b      	cbnz	r3, 8012dd0 <__swsetup_r+0x7c>
 8012dbc:	89a3      	ldrh	r3, [r4, #12]
 8012dbe:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012dc2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012dc6:	d003      	beq.n	8012dd0 <__swsetup_r+0x7c>
 8012dc8:	4621      	mov	r1, r4
 8012dca:	4628      	mov	r0, r5
 8012dcc:	f000 f884 	bl	8012ed8 <__smakebuf_r>
 8012dd0:	89a0      	ldrh	r0, [r4, #12]
 8012dd2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012dd6:	f010 0301 	ands.w	r3, r0, #1
 8012dda:	d00a      	beq.n	8012df2 <__swsetup_r+0x9e>
 8012ddc:	2300      	movs	r3, #0
 8012dde:	60a3      	str	r3, [r4, #8]
 8012de0:	6963      	ldr	r3, [r4, #20]
 8012de2:	425b      	negs	r3, r3
 8012de4:	61a3      	str	r3, [r4, #24]
 8012de6:	6923      	ldr	r3, [r4, #16]
 8012de8:	b943      	cbnz	r3, 8012dfc <__swsetup_r+0xa8>
 8012dea:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8012dee:	d1c4      	bne.n	8012d7a <__swsetup_r+0x26>
 8012df0:	bd38      	pop	{r3, r4, r5, pc}
 8012df2:	0781      	lsls	r1, r0, #30
 8012df4:	bf58      	it	pl
 8012df6:	6963      	ldrpl	r3, [r4, #20]
 8012df8:	60a3      	str	r3, [r4, #8]
 8012dfa:	e7f4      	b.n	8012de6 <__swsetup_r+0x92>
 8012dfc:	2000      	movs	r0, #0
 8012dfe:	e7f7      	b.n	8012df0 <__swsetup_r+0x9c>
 8012e00:	200000c4 	.word	0x200000c4

08012e04 <_raise_r>:
 8012e04:	291f      	cmp	r1, #31
 8012e06:	b538      	push	{r3, r4, r5, lr}
 8012e08:	4604      	mov	r4, r0
 8012e0a:	460d      	mov	r5, r1
 8012e0c:	d904      	bls.n	8012e18 <_raise_r+0x14>
 8012e0e:	2316      	movs	r3, #22
 8012e10:	6003      	str	r3, [r0, #0]
 8012e12:	f04f 30ff 	mov.w	r0, #4294967295
 8012e16:	bd38      	pop	{r3, r4, r5, pc}
 8012e18:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8012e1a:	b112      	cbz	r2, 8012e22 <_raise_r+0x1e>
 8012e1c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012e20:	b94b      	cbnz	r3, 8012e36 <_raise_r+0x32>
 8012e22:	4620      	mov	r0, r4
 8012e24:	f000 f830 	bl	8012e88 <_getpid_r>
 8012e28:	462a      	mov	r2, r5
 8012e2a:	4601      	mov	r1, r0
 8012e2c:	4620      	mov	r0, r4
 8012e2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012e32:	f000 b817 	b.w	8012e64 <_kill_r>
 8012e36:	2b01      	cmp	r3, #1
 8012e38:	d00a      	beq.n	8012e50 <_raise_r+0x4c>
 8012e3a:	1c59      	adds	r1, r3, #1
 8012e3c:	d103      	bne.n	8012e46 <_raise_r+0x42>
 8012e3e:	2316      	movs	r3, #22
 8012e40:	6003      	str	r3, [r0, #0]
 8012e42:	2001      	movs	r0, #1
 8012e44:	e7e7      	b.n	8012e16 <_raise_r+0x12>
 8012e46:	2400      	movs	r4, #0
 8012e48:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8012e4c:	4628      	mov	r0, r5
 8012e4e:	4798      	blx	r3
 8012e50:	2000      	movs	r0, #0
 8012e52:	e7e0      	b.n	8012e16 <_raise_r+0x12>

08012e54 <raise>:
 8012e54:	4b02      	ldr	r3, [pc, #8]	; (8012e60 <raise+0xc>)
 8012e56:	4601      	mov	r1, r0
 8012e58:	6818      	ldr	r0, [r3, #0]
 8012e5a:	f7ff bfd3 	b.w	8012e04 <_raise_r>
 8012e5e:	bf00      	nop
 8012e60:	200000c4 	.word	0x200000c4

08012e64 <_kill_r>:
 8012e64:	b538      	push	{r3, r4, r5, lr}
 8012e66:	4d07      	ldr	r5, [pc, #28]	; (8012e84 <_kill_r+0x20>)
 8012e68:	2300      	movs	r3, #0
 8012e6a:	4604      	mov	r4, r0
 8012e6c:	4608      	mov	r0, r1
 8012e6e:	4611      	mov	r1, r2
 8012e70:	602b      	str	r3, [r5, #0]
 8012e72:	f7f2 ff0d 	bl	8005c90 <_kill>
 8012e76:	1c43      	adds	r3, r0, #1
 8012e78:	d102      	bne.n	8012e80 <_kill_r+0x1c>
 8012e7a:	682b      	ldr	r3, [r5, #0]
 8012e7c:	b103      	cbz	r3, 8012e80 <_kill_r+0x1c>
 8012e7e:	6023      	str	r3, [r4, #0]
 8012e80:	bd38      	pop	{r3, r4, r5, pc}
 8012e82:	bf00      	nop
 8012e84:	200064f0 	.word	0x200064f0

08012e88 <_getpid_r>:
 8012e88:	f7f2 befa 	b.w	8005c80 <_getpid>

08012e8c <__swhatbuf_r>:
 8012e8c:	b570      	push	{r4, r5, r6, lr}
 8012e8e:	460c      	mov	r4, r1
 8012e90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012e94:	2900      	cmp	r1, #0
 8012e96:	b096      	sub	sp, #88	; 0x58
 8012e98:	4615      	mov	r5, r2
 8012e9a:	461e      	mov	r6, r3
 8012e9c:	da0d      	bge.n	8012eba <__swhatbuf_r+0x2e>
 8012e9e:	89a3      	ldrh	r3, [r4, #12]
 8012ea0:	f013 0f80 	tst.w	r3, #128	; 0x80
 8012ea4:	f04f 0100 	mov.w	r1, #0
 8012ea8:	bf0c      	ite	eq
 8012eaa:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8012eae:	2340      	movne	r3, #64	; 0x40
 8012eb0:	2000      	movs	r0, #0
 8012eb2:	6031      	str	r1, [r6, #0]
 8012eb4:	602b      	str	r3, [r5, #0]
 8012eb6:	b016      	add	sp, #88	; 0x58
 8012eb8:	bd70      	pop	{r4, r5, r6, pc}
 8012eba:	466a      	mov	r2, sp
 8012ebc:	f000 f848 	bl	8012f50 <_fstat_r>
 8012ec0:	2800      	cmp	r0, #0
 8012ec2:	dbec      	blt.n	8012e9e <__swhatbuf_r+0x12>
 8012ec4:	9901      	ldr	r1, [sp, #4]
 8012ec6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8012eca:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8012ece:	4259      	negs	r1, r3
 8012ed0:	4159      	adcs	r1, r3
 8012ed2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012ed6:	e7eb      	b.n	8012eb0 <__swhatbuf_r+0x24>

08012ed8 <__smakebuf_r>:
 8012ed8:	898b      	ldrh	r3, [r1, #12]
 8012eda:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012edc:	079d      	lsls	r5, r3, #30
 8012ede:	4606      	mov	r6, r0
 8012ee0:	460c      	mov	r4, r1
 8012ee2:	d507      	bpl.n	8012ef4 <__smakebuf_r+0x1c>
 8012ee4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012ee8:	6023      	str	r3, [r4, #0]
 8012eea:	6123      	str	r3, [r4, #16]
 8012eec:	2301      	movs	r3, #1
 8012eee:	6163      	str	r3, [r4, #20]
 8012ef0:	b002      	add	sp, #8
 8012ef2:	bd70      	pop	{r4, r5, r6, pc}
 8012ef4:	ab01      	add	r3, sp, #4
 8012ef6:	466a      	mov	r2, sp
 8012ef8:	f7ff ffc8 	bl	8012e8c <__swhatbuf_r>
 8012efc:	9900      	ldr	r1, [sp, #0]
 8012efe:	4605      	mov	r5, r0
 8012f00:	4630      	mov	r0, r6
 8012f02:	f7fd f9eb 	bl	80102dc <_malloc_r>
 8012f06:	b948      	cbnz	r0, 8012f1c <__smakebuf_r+0x44>
 8012f08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012f0c:	059a      	lsls	r2, r3, #22
 8012f0e:	d4ef      	bmi.n	8012ef0 <__smakebuf_r+0x18>
 8012f10:	f023 0303 	bic.w	r3, r3, #3
 8012f14:	f043 0302 	orr.w	r3, r3, #2
 8012f18:	81a3      	strh	r3, [r4, #12]
 8012f1a:	e7e3      	b.n	8012ee4 <__smakebuf_r+0xc>
 8012f1c:	89a3      	ldrh	r3, [r4, #12]
 8012f1e:	6020      	str	r0, [r4, #0]
 8012f20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012f24:	81a3      	strh	r3, [r4, #12]
 8012f26:	9b00      	ldr	r3, [sp, #0]
 8012f28:	6163      	str	r3, [r4, #20]
 8012f2a:	9b01      	ldr	r3, [sp, #4]
 8012f2c:	6120      	str	r0, [r4, #16]
 8012f2e:	b15b      	cbz	r3, 8012f48 <__smakebuf_r+0x70>
 8012f30:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012f34:	4630      	mov	r0, r6
 8012f36:	f000 f81d 	bl	8012f74 <_isatty_r>
 8012f3a:	b128      	cbz	r0, 8012f48 <__smakebuf_r+0x70>
 8012f3c:	89a3      	ldrh	r3, [r4, #12]
 8012f3e:	f023 0303 	bic.w	r3, r3, #3
 8012f42:	f043 0301 	orr.w	r3, r3, #1
 8012f46:	81a3      	strh	r3, [r4, #12]
 8012f48:	89a3      	ldrh	r3, [r4, #12]
 8012f4a:	431d      	orrs	r5, r3
 8012f4c:	81a5      	strh	r5, [r4, #12]
 8012f4e:	e7cf      	b.n	8012ef0 <__smakebuf_r+0x18>

08012f50 <_fstat_r>:
 8012f50:	b538      	push	{r3, r4, r5, lr}
 8012f52:	4d07      	ldr	r5, [pc, #28]	; (8012f70 <_fstat_r+0x20>)
 8012f54:	2300      	movs	r3, #0
 8012f56:	4604      	mov	r4, r0
 8012f58:	4608      	mov	r0, r1
 8012f5a:	4611      	mov	r1, r2
 8012f5c:	602b      	str	r3, [r5, #0]
 8012f5e:	f7f2 fef6 	bl	8005d4e <_fstat>
 8012f62:	1c43      	adds	r3, r0, #1
 8012f64:	d102      	bne.n	8012f6c <_fstat_r+0x1c>
 8012f66:	682b      	ldr	r3, [r5, #0]
 8012f68:	b103      	cbz	r3, 8012f6c <_fstat_r+0x1c>
 8012f6a:	6023      	str	r3, [r4, #0]
 8012f6c:	bd38      	pop	{r3, r4, r5, pc}
 8012f6e:	bf00      	nop
 8012f70:	200064f0 	.word	0x200064f0

08012f74 <_isatty_r>:
 8012f74:	b538      	push	{r3, r4, r5, lr}
 8012f76:	4d06      	ldr	r5, [pc, #24]	; (8012f90 <_isatty_r+0x1c>)
 8012f78:	2300      	movs	r3, #0
 8012f7a:	4604      	mov	r4, r0
 8012f7c:	4608      	mov	r0, r1
 8012f7e:	602b      	str	r3, [r5, #0]
 8012f80:	f7f2 fef5 	bl	8005d6e <_isatty>
 8012f84:	1c43      	adds	r3, r0, #1
 8012f86:	d102      	bne.n	8012f8e <_isatty_r+0x1a>
 8012f88:	682b      	ldr	r3, [r5, #0]
 8012f8a:	b103      	cbz	r3, 8012f8e <_isatty_r+0x1a>
 8012f8c:	6023      	str	r3, [r4, #0]
 8012f8e:	bd38      	pop	{r3, r4, r5, pc}
 8012f90:	200064f0 	.word	0x200064f0

08012f94 <asinf>:
 8012f94:	b508      	push	{r3, lr}
 8012f96:	ed2d 8b02 	vpush	{d8}
 8012f9a:	eeb0 8a40 	vmov.f32	s16, s0
 8012f9e:	f000 f9cf 	bl	8013340 <__ieee754_asinf>
 8012fa2:	eeb4 8a48 	vcmp.f32	s16, s16
 8012fa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012faa:	eef0 8a40 	vmov.f32	s17, s0
 8012fae:	d615      	bvs.n	8012fdc <asinf+0x48>
 8012fb0:	eeb0 0a48 	vmov.f32	s0, s16
 8012fb4:	f000 f8b8 	bl	8013128 <fabsf>
 8012fb8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8012fbc:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8012fc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012fc4:	dd0a      	ble.n	8012fdc <asinf+0x48>
 8012fc6:	f7fe f803 	bl	8010fd0 <__errno>
 8012fca:	ecbd 8b02 	vpop	{d8}
 8012fce:	2321      	movs	r3, #33	; 0x21
 8012fd0:	6003      	str	r3, [r0, #0]
 8012fd2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8012fd6:	4804      	ldr	r0, [pc, #16]	; (8012fe8 <asinf+0x54>)
 8012fd8:	f000 b902 	b.w	80131e0 <nanf>
 8012fdc:	eeb0 0a68 	vmov.f32	s0, s17
 8012fe0:	ecbd 8b02 	vpop	{d8}
 8012fe4:	bd08      	pop	{r3, pc}
 8012fe6:	bf00      	nop
 8012fe8:	08014d42 	.word	0x08014d42

08012fec <atan2f>:
 8012fec:	f000 ba8e 	b.w	801350c <__ieee754_atan2f>

08012ff0 <powf>:
 8012ff0:	b508      	push	{r3, lr}
 8012ff2:	ed2d 8b04 	vpush	{d8-d9}
 8012ff6:	eeb0 8a60 	vmov.f32	s16, s1
 8012ffa:	eeb0 9a40 	vmov.f32	s18, s0
 8012ffe:	f000 fb25 	bl	801364c <__ieee754_powf>
 8013002:	eeb4 8a48 	vcmp.f32	s16, s16
 8013006:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801300a:	eef0 8a40 	vmov.f32	s17, s0
 801300e:	d63e      	bvs.n	801308e <powf+0x9e>
 8013010:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8013014:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013018:	d112      	bne.n	8013040 <powf+0x50>
 801301a:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801301e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013022:	d039      	beq.n	8013098 <powf+0xa8>
 8013024:	eeb0 0a48 	vmov.f32	s0, s16
 8013028:	f000 f8cc 	bl	80131c4 <finitef>
 801302c:	b378      	cbz	r0, 801308e <powf+0x9e>
 801302e:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8013032:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013036:	d52a      	bpl.n	801308e <powf+0x9e>
 8013038:	f7fd ffca 	bl	8010fd0 <__errno>
 801303c:	2322      	movs	r3, #34	; 0x22
 801303e:	e014      	b.n	801306a <powf+0x7a>
 8013040:	f000 f8c0 	bl	80131c4 <finitef>
 8013044:	b998      	cbnz	r0, 801306e <powf+0x7e>
 8013046:	eeb0 0a49 	vmov.f32	s0, s18
 801304a:	f000 f8bb 	bl	80131c4 <finitef>
 801304e:	b170      	cbz	r0, 801306e <powf+0x7e>
 8013050:	eeb0 0a48 	vmov.f32	s0, s16
 8013054:	f000 f8b6 	bl	80131c4 <finitef>
 8013058:	b148      	cbz	r0, 801306e <powf+0x7e>
 801305a:	eef4 8a68 	vcmp.f32	s17, s17
 801305e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013062:	d7e9      	bvc.n	8013038 <powf+0x48>
 8013064:	f7fd ffb4 	bl	8010fd0 <__errno>
 8013068:	2321      	movs	r3, #33	; 0x21
 801306a:	6003      	str	r3, [r0, #0]
 801306c:	e00f      	b.n	801308e <powf+0x9e>
 801306e:	eef5 8a40 	vcmp.f32	s17, #0.0
 8013072:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013076:	d10a      	bne.n	801308e <powf+0x9e>
 8013078:	eeb0 0a49 	vmov.f32	s0, s18
 801307c:	f000 f8a2 	bl	80131c4 <finitef>
 8013080:	b128      	cbz	r0, 801308e <powf+0x9e>
 8013082:	eeb0 0a48 	vmov.f32	s0, s16
 8013086:	f000 f89d 	bl	80131c4 <finitef>
 801308a:	2800      	cmp	r0, #0
 801308c:	d1d4      	bne.n	8013038 <powf+0x48>
 801308e:	eeb0 0a68 	vmov.f32	s0, s17
 8013092:	ecbd 8b04 	vpop	{d8-d9}
 8013096:	bd08      	pop	{r3, pc}
 8013098:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 801309c:	e7f7      	b.n	801308e <powf+0x9e>
	...

080130a0 <cosf>:
 80130a0:	ee10 3a10 	vmov	r3, s0
 80130a4:	b507      	push	{r0, r1, r2, lr}
 80130a6:	4a1e      	ldr	r2, [pc, #120]	; (8013120 <cosf+0x80>)
 80130a8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80130ac:	4293      	cmp	r3, r2
 80130ae:	dc06      	bgt.n	80130be <cosf+0x1e>
 80130b0:	eddf 0a1c 	vldr	s1, [pc, #112]	; 8013124 <cosf+0x84>
 80130b4:	b003      	add	sp, #12
 80130b6:	f85d eb04 	ldr.w	lr, [sp], #4
 80130ba:	f000 b89b 	b.w	80131f4 <__kernel_cosf>
 80130be:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80130c2:	db04      	blt.n	80130ce <cosf+0x2e>
 80130c4:	ee30 0a40 	vsub.f32	s0, s0, s0
 80130c8:	b003      	add	sp, #12
 80130ca:	f85d fb04 	ldr.w	pc, [sp], #4
 80130ce:	4668      	mov	r0, sp
 80130d0:	f000 fd86 	bl	8013be0 <__ieee754_rem_pio2f>
 80130d4:	f000 0003 	and.w	r0, r0, #3
 80130d8:	2801      	cmp	r0, #1
 80130da:	d009      	beq.n	80130f0 <cosf+0x50>
 80130dc:	2802      	cmp	r0, #2
 80130de:	d010      	beq.n	8013102 <cosf+0x62>
 80130e0:	b9b0      	cbnz	r0, 8013110 <cosf+0x70>
 80130e2:	eddd 0a01 	vldr	s1, [sp, #4]
 80130e6:	ed9d 0a00 	vldr	s0, [sp]
 80130ea:	f000 f883 	bl	80131f4 <__kernel_cosf>
 80130ee:	e7eb      	b.n	80130c8 <cosf+0x28>
 80130f0:	eddd 0a01 	vldr	s1, [sp, #4]
 80130f4:	ed9d 0a00 	vldr	s0, [sp]
 80130f8:	f000 f8da 	bl	80132b0 <__kernel_sinf>
 80130fc:	eeb1 0a40 	vneg.f32	s0, s0
 8013100:	e7e2      	b.n	80130c8 <cosf+0x28>
 8013102:	eddd 0a01 	vldr	s1, [sp, #4]
 8013106:	ed9d 0a00 	vldr	s0, [sp]
 801310a:	f000 f873 	bl	80131f4 <__kernel_cosf>
 801310e:	e7f5      	b.n	80130fc <cosf+0x5c>
 8013110:	eddd 0a01 	vldr	s1, [sp, #4]
 8013114:	ed9d 0a00 	vldr	s0, [sp]
 8013118:	2001      	movs	r0, #1
 801311a:	f000 f8c9 	bl	80132b0 <__kernel_sinf>
 801311e:	e7d3      	b.n	80130c8 <cosf+0x28>
 8013120:	3f490fd8 	.word	0x3f490fd8
 8013124:	00000000 	.word	0x00000000

08013128 <fabsf>:
 8013128:	ee10 3a10 	vmov	r3, s0
 801312c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013130:	ee00 3a10 	vmov	s0, r3
 8013134:	4770      	bx	lr
	...

08013138 <sinf>:
 8013138:	ee10 3a10 	vmov	r3, s0
 801313c:	b507      	push	{r0, r1, r2, lr}
 801313e:	4a1f      	ldr	r2, [pc, #124]	; (80131bc <sinf+0x84>)
 8013140:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013144:	4293      	cmp	r3, r2
 8013146:	dc07      	bgt.n	8013158 <sinf+0x20>
 8013148:	eddf 0a1d 	vldr	s1, [pc, #116]	; 80131c0 <sinf+0x88>
 801314c:	2000      	movs	r0, #0
 801314e:	b003      	add	sp, #12
 8013150:	f85d eb04 	ldr.w	lr, [sp], #4
 8013154:	f000 b8ac 	b.w	80132b0 <__kernel_sinf>
 8013158:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801315c:	db04      	blt.n	8013168 <sinf+0x30>
 801315e:	ee30 0a40 	vsub.f32	s0, s0, s0
 8013162:	b003      	add	sp, #12
 8013164:	f85d fb04 	ldr.w	pc, [sp], #4
 8013168:	4668      	mov	r0, sp
 801316a:	f000 fd39 	bl	8013be0 <__ieee754_rem_pio2f>
 801316e:	f000 0003 	and.w	r0, r0, #3
 8013172:	2801      	cmp	r0, #1
 8013174:	d00a      	beq.n	801318c <sinf+0x54>
 8013176:	2802      	cmp	r0, #2
 8013178:	d00f      	beq.n	801319a <sinf+0x62>
 801317a:	b9c0      	cbnz	r0, 80131ae <sinf+0x76>
 801317c:	eddd 0a01 	vldr	s1, [sp, #4]
 8013180:	ed9d 0a00 	vldr	s0, [sp]
 8013184:	2001      	movs	r0, #1
 8013186:	f000 f893 	bl	80132b0 <__kernel_sinf>
 801318a:	e7ea      	b.n	8013162 <sinf+0x2a>
 801318c:	eddd 0a01 	vldr	s1, [sp, #4]
 8013190:	ed9d 0a00 	vldr	s0, [sp]
 8013194:	f000 f82e 	bl	80131f4 <__kernel_cosf>
 8013198:	e7e3      	b.n	8013162 <sinf+0x2a>
 801319a:	eddd 0a01 	vldr	s1, [sp, #4]
 801319e:	ed9d 0a00 	vldr	s0, [sp]
 80131a2:	2001      	movs	r0, #1
 80131a4:	f000 f884 	bl	80132b0 <__kernel_sinf>
 80131a8:	eeb1 0a40 	vneg.f32	s0, s0
 80131ac:	e7d9      	b.n	8013162 <sinf+0x2a>
 80131ae:	eddd 0a01 	vldr	s1, [sp, #4]
 80131b2:	ed9d 0a00 	vldr	s0, [sp]
 80131b6:	f000 f81d 	bl	80131f4 <__kernel_cosf>
 80131ba:	e7f5      	b.n	80131a8 <sinf+0x70>
 80131bc:	3f490fd8 	.word	0x3f490fd8
 80131c0:	00000000 	.word	0x00000000

080131c4 <finitef>:
 80131c4:	b082      	sub	sp, #8
 80131c6:	ed8d 0a01 	vstr	s0, [sp, #4]
 80131ca:	9801      	ldr	r0, [sp, #4]
 80131cc:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80131d0:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 80131d4:	bfac      	ite	ge
 80131d6:	2000      	movge	r0, #0
 80131d8:	2001      	movlt	r0, #1
 80131da:	b002      	add	sp, #8
 80131dc:	4770      	bx	lr
	...

080131e0 <nanf>:
 80131e0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80131e8 <nanf+0x8>
 80131e4:	4770      	bx	lr
 80131e6:	bf00      	nop
 80131e8:	7fc00000 	.word	0x7fc00000

080131ec <__ieee754_sqrtf>:
 80131ec:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80131f0:	4770      	bx	lr
	...

080131f4 <__kernel_cosf>:
 80131f4:	ee10 3a10 	vmov	r3, s0
 80131f8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80131fc:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8013200:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8013204:	da05      	bge.n	8013212 <__kernel_cosf+0x1e>
 8013206:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801320a:	ee17 2a90 	vmov	r2, s15
 801320e:	2a00      	cmp	r2, #0
 8013210:	d03b      	beq.n	801328a <__kernel_cosf+0x96>
 8013212:	ee20 7a00 	vmul.f32	s14, s0, s0
 8013216:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8013290 <__kernel_cosf+0x9c>
 801321a:	ed9f 6a1e 	vldr	s12, [pc, #120]	; 8013294 <__kernel_cosf+0xa0>
 801321e:	4a1e      	ldr	r2, [pc, #120]	; (8013298 <__kernel_cosf+0xa4>)
 8013220:	eea7 6a27 	vfma.f32	s12, s14, s15
 8013224:	4293      	cmp	r3, r2
 8013226:	eddf 7a1d 	vldr	s15, [pc, #116]	; 801329c <__kernel_cosf+0xa8>
 801322a:	eee6 7a07 	vfma.f32	s15, s12, s14
 801322e:	ed9f 6a1c 	vldr	s12, [pc, #112]	; 80132a0 <__kernel_cosf+0xac>
 8013232:	eea7 6a87 	vfma.f32	s12, s15, s14
 8013236:	eddf 7a1b 	vldr	s15, [pc, #108]	; 80132a4 <__kernel_cosf+0xb0>
 801323a:	eee6 7a07 	vfma.f32	s15, s12, s14
 801323e:	ed9f 6a1a 	vldr	s12, [pc, #104]	; 80132a8 <__kernel_cosf+0xb4>
 8013242:	eea7 6a87 	vfma.f32	s12, s15, s14
 8013246:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 801324a:	ee26 6a07 	vmul.f32	s12, s12, s14
 801324e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8013252:	eee7 0a06 	vfma.f32	s1, s14, s12
 8013256:	ee67 7a27 	vmul.f32	s15, s14, s15
 801325a:	dc04      	bgt.n	8013266 <__kernel_cosf+0x72>
 801325c:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8013260:	ee36 0ae7 	vsub.f32	s0, s13, s15
 8013264:	4770      	bx	lr
 8013266:	4a11      	ldr	r2, [pc, #68]	; (80132ac <__kernel_cosf+0xb8>)
 8013268:	4293      	cmp	r3, r2
 801326a:	bfda      	itte	le
 801326c:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8013270:	ee07 3a10 	vmovle	s14, r3
 8013274:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 8013278:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801327c:	ee36 0ac7 	vsub.f32	s0, s13, s14
 8013280:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8013284:	ee30 0a67 	vsub.f32	s0, s0, s15
 8013288:	4770      	bx	lr
 801328a:	eeb0 0a66 	vmov.f32	s0, s13
 801328e:	4770      	bx	lr
 8013290:	ad47d74e 	.word	0xad47d74e
 8013294:	310f74f6 	.word	0x310f74f6
 8013298:	3e999999 	.word	0x3e999999
 801329c:	b493f27c 	.word	0xb493f27c
 80132a0:	37d00d01 	.word	0x37d00d01
 80132a4:	bab60b61 	.word	0xbab60b61
 80132a8:	3d2aaaab 	.word	0x3d2aaaab
 80132ac:	3f480000 	.word	0x3f480000

080132b0 <__kernel_sinf>:
 80132b0:	ee10 3a10 	vmov	r3, s0
 80132b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80132b8:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80132bc:	da04      	bge.n	80132c8 <__kernel_sinf+0x18>
 80132be:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80132c2:	ee17 3a90 	vmov	r3, s15
 80132c6:	b35b      	cbz	r3, 8013320 <__kernel_sinf+0x70>
 80132c8:	ee20 7a00 	vmul.f32	s14, s0, s0
 80132cc:	eddf 7a15 	vldr	s15, [pc, #84]	; 8013324 <__kernel_sinf+0x74>
 80132d0:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8013328 <__kernel_sinf+0x78>
 80132d4:	eea7 6a27 	vfma.f32	s12, s14, s15
 80132d8:	eddf 7a14 	vldr	s15, [pc, #80]	; 801332c <__kernel_sinf+0x7c>
 80132dc:	eee6 7a07 	vfma.f32	s15, s12, s14
 80132e0:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8013330 <__kernel_sinf+0x80>
 80132e4:	eea7 6a87 	vfma.f32	s12, s15, s14
 80132e8:	eddf 7a12 	vldr	s15, [pc, #72]	; 8013334 <__kernel_sinf+0x84>
 80132ec:	ee60 6a07 	vmul.f32	s13, s0, s14
 80132f0:	eee6 7a07 	vfma.f32	s15, s12, s14
 80132f4:	b930      	cbnz	r0, 8013304 <__kernel_sinf+0x54>
 80132f6:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8013338 <__kernel_sinf+0x88>
 80132fa:	eea7 6a27 	vfma.f32	s12, s14, s15
 80132fe:	eea6 0a26 	vfma.f32	s0, s12, s13
 8013302:	4770      	bx	lr
 8013304:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8013308:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 801330c:	eee0 7a86 	vfma.f32	s15, s1, s12
 8013310:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8013314:	eddf 7a09 	vldr	s15, [pc, #36]	; 801333c <__kernel_sinf+0x8c>
 8013318:	eee6 0aa7 	vfma.f32	s1, s13, s15
 801331c:	ee30 0a60 	vsub.f32	s0, s0, s1
 8013320:	4770      	bx	lr
 8013322:	bf00      	nop
 8013324:	2f2ec9d3 	.word	0x2f2ec9d3
 8013328:	b2d72f34 	.word	0xb2d72f34
 801332c:	3638ef1b 	.word	0x3638ef1b
 8013330:	b9500d01 	.word	0xb9500d01
 8013334:	3c088889 	.word	0x3c088889
 8013338:	be2aaaab 	.word	0xbe2aaaab
 801333c:	3e2aaaab 	.word	0x3e2aaaab

08013340 <__ieee754_asinf>:
 8013340:	b538      	push	{r3, r4, r5, lr}
 8013342:	ee10 5a10 	vmov	r5, s0
 8013346:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 801334a:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 801334e:	ed2d 8b04 	vpush	{d8-d9}
 8013352:	d10c      	bne.n	801336e <__ieee754_asinf+0x2e>
 8013354:	eddf 7a5d 	vldr	s15, [pc, #372]	; 80134cc <__ieee754_asinf+0x18c>
 8013358:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 80134d0 <__ieee754_asinf+0x190>
 801335c:	ee60 7a27 	vmul.f32	s15, s0, s15
 8013360:	eee0 7a07 	vfma.f32	s15, s0, s14
 8013364:	eeb0 0a67 	vmov.f32	s0, s15
 8013368:	ecbd 8b04 	vpop	{d8-d9}
 801336c:	bd38      	pop	{r3, r4, r5, pc}
 801336e:	dd04      	ble.n	801337a <__ieee754_asinf+0x3a>
 8013370:	ee70 7a40 	vsub.f32	s15, s0, s0
 8013374:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8013378:	e7f6      	b.n	8013368 <__ieee754_asinf+0x28>
 801337a:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 801337e:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8013382:	da0b      	bge.n	801339c <__ieee754_asinf+0x5c>
 8013384:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 8013388:	da52      	bge.n	8013430 <__ieee754_asinf+0xf0>
 801338a:	eddf 7a52 	vldr	s15, [pc, #328]	; 80134d4 <__ieee754_asinf+0x194>
 801338e:	ee70 7a27 	vadd.f32	s15, s0, s15
 8013392:	eef4 7ae8 	vcmpe.f32	s15, s17
 8013396:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801339a:	dce5      	bgt.n	8013368 <__ieee754_asinf+0x28>
 801339c:	f7ff fec4 	bl	8013128 <fabsf>
 80133a0:	ee38 0ac0 	vsub.f32	s0, s17, s0
 80133a4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80133a8:	ee20 8a27 	vmul.f32	s16, s0, s15
 80133ac:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 80134d8 <__ieee754_asinf+0x198>
 80133b0:	eddf 7a4a 	vldr	s15, [pc, #296]	; 80134dc <__ieee754_asinf+0x19c>
 80133b4:	ed9f 9a4a 	vldr	s18, [pc, #296]	; 80134e0 <__ieee754_asinf+0x1a0>
 80133b8:	eea8 7a27 	vfma.f32	s14, s16, s15
 80133bc:	eddf 7a49 	vldr	s15, [pc, #292]	; 80134e4 <__ieee754_asinf+0x1a4>
 80133c0:	eee7 7a08 	vfma.f32	s15, s14, s16
 80133c4:	ed9f 7a48 	vldr	s14, [pc, #288]	; 80134e8 <__ieee754_asinf+0x1a8>
 80133c8:	eea7 7a88 	vfma.f32	s14, s15, s16
 80133cc:	eddf 7a47 	vldr	s15, [pc, #284]	; 80134ec <__ieee754_asinf+0x1ac>
 80133d0:	eee7 7a08 	vfma.f32	s15, s14, s16
 80133d4:	ed9f 7a46 	vldr	s14, [pc, #280]	; 80134f0 <__ieee754_asinf+0x1b0>
 80133d8:	eea7 9a88 	vfma.f32	s18, s15, s16
 80133dc:	eddf 7a45 	vldr	s15, [pc, #276]	; 80134f4 <__ieee754_asinf+0x1b4>
 80133e0:	eee8 7a07 	vfma.f32	s15, s16, s14
 80133e4:	ed9f 7a44 	vldr	s14, [pc, #272]	; 80134f8 <__ieee754_asinf+0x1b8>
 80133e8:	eea7 7a88 	vfma.f32	s14, s15, s16
 80133ec:	eddf 7a43 	vldr	s15, [pc, #268]	; 80134fc <__ieee754_asinf+0x1bc>
 80133f0:	eee7 7a08 	vfma.f32	s15, s14, s16
 80133f4:	eeb0 0a48 	vmov.f32	s0, s16
 80133f8:	eee7 8a88 	vfma.f32	s17, s15, s16
 80133fc:	f7ff fef6 	bl	80131ec <__ieee754_sqrtf>
 8013400:	4b3f      	ldr	r3, [pc, #252]	; (8013500 <__ieee754_asinf+0x1c0>)
 8013402:	ee29 9a08 	vmul.f32	s18, s18, s16
 8013406:	429c      	cmp	r4, r3
 8013408:	ee89 6a28 	vdiv.f32	s12, s18, s17
 801340c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8013410:	dd3d      	ble.n	801348e <__ieee754_asinf+0x14e>
 8013412:	eea0 0a06 	vfma.f32	s0, s0, s12
 8013416:	eddf 7a3b 	vldr	s15, [pc, #236]	; 8013504 <__ieee754_asinf+0x1c4>
 801341a:	eee0 7a26 	vfma.f32	s15, s0, s13
 801341e:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 80134d0 <__ieee754_asinf+0x190>
 8013422:	ee30 0a67 	vsub.f32	s0, s0, s15
 8013426:	2d00      	cmp	r5, #0
 8013428:	bfd8      	it	le
 801342a:	eeb1 0a40 	vnegle.f32	s0, s0
 801342e:	e79b      	b.n	8013368 <__ieee754_asinf+0x28>
 8013430:	ee60 7a00 	vmul.f32	s15, s0, s0
 8013434:	eddf 6a29 	vldr	s13, [pc, #164]	; 80134dc <__ieee754_asinf+0x19c>
 8013438:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80134d8 <__ieee754_asinf+0x198>
 801343c:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 80134f0 <__ieee754_asinf+0x1b0>
 8013440:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8013444:	eddf 6a27 	vldr	s13, [pc, #156]	; 80134e4 <__ieee754_asinf+0x1a4>
 8013448:	eee7 6a27 	vfma.f32	s13, s14, s15
 801344c:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80134e8 <__ieee754_asinf+0x1a8>
 8013450:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8013454:	eddf 6a25 	vldr	s13, [pc, #148]	; 80134ec <__ieee754_asinf+0x1ac>
 8013458:	eee7 6a27 	vfma.f32	s13, s14, s15
 801345c:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80134e0 <__ieee754_asinf+0x1a0>
 8013460:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8013464:	eddf 6a23 	vldr	s13, [pc, #140]	; 80134f4 <__ieee754_asinf+0x1b4>
 8013468:	eee7 6a86 	vfma.f32	s13, s15, s12
 801346c:	ed9f 6a22 	vldr	s12, [pc, #136]	; 80134f8 <__ieee754_asinf+0x1b8>
 8013470:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8013474:	eddf 6a21 	vldr	s13, [pc, #132]	; 80134fc <__ieee754_asinf+0x1bc>
 8013478:	eee6 6a27 	vfma.f32	s13, s12, s15
 801347c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013480:	eee6 8aa7 	vfma.f32	s17, s13, s15
 8013484:	eec7 7a28 	vdiv.f32	s15, s14, s17
 8013488:	eea0 0a27 	vfma.f32	s0, s0, s15
 801348c:	e76c      	b.n	8013368 <__ieee754_asinf+0x28>
 801348e:	ee10 3a10 	vmov	r3, s0
 8013492:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8013496:	f023 030f 	bic.w	r3, r3, #15
 801349a:	ee07 3a10 	vmov	s14, r3
 801349e:	eea7 8a47 	vfms.f32	s16, s14, s14
 80134a2:	ee70 7a07 	vadd.f32	s15, s0, s14
 80134a6:	ee30 0a00 	vadd.f32	s0, s0, s0
 80134aa:	eec8 5a27 	vdiv.f32	s11, s16, s15
 80134ae:	eddf 7a07 	vldr	s15, [pc, #28]	; 80134cc <__ieee754_asinf+0x18c>
 80134b2:	eee5 7ae6 	vfms.f32	s15, s11, s13
 80134b6:	eed0 7a06 	vfnms.f32	s15, s0, s12
 80134ba:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8013508 <__ieee754_asinf+0x1c8>
 80134be:	eeb0 6a40 	vmov.f32	s12, s0
 80134c2:	eea7 6a66 	vfms.f32	s12, s14, s13
 80134c6:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80134ca:	e7aa      	b.n	8013422 <__ieee754_asinf+0xe2>
 80134cc:	b33bbd2e 	.word	0xb33bbd2e
 80134d0:	3fc90fdb 	.word	0x3fc90fdb
 80134d4:	7149f2ca 	.word	0x7149f2ca
 80134d8:	3a4f7f04 	.word	0x3a4f7f04
 80134dc:	3811ef08 	.word	0x3811ef08
 80134e0:	3e2aaaab 	.word	0x3e2aaaab
 80134e4:	bd241146 	.word	0xbd241146
 80134e8:	3e4e0aa8 	.word	0x3e4e0aa8
 80134ec:	bea6b090 	.word	0xbea6b090
 80134f0:	3d9dc62e 	.word	0x3d9dc62e
 80134f4:	bf303361 	.word	0xbf303361
 80134f8:	4001572d 	.word	0x4001572d
 80134fc:	c019d139 	.word	0xc019d139
 8013500:	3f799999 	.word	0x3f799999
 8013504:	333bbd2e 	.word	0x333bbd2e
 8013508:	3f490fdb 	.word	0x3f490fdb

0801350c <__ieee754_atan2f>:
 801350c:	ee10 2a90 	vmov	r2, s1
 8013510:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8013514:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8013518:	b510      	push	{r4, lr}
 801351a:	eef0 7a40 	vmov.f32	s15, s0
 801351e:	dc06      	bgt.n	801352e <__ieee754_atan2f+0x22>
 8013520:	ee10 0a10 	vmov	r0, s0
 8013524:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8013528:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801352c:	dd04      	ble.n	8013538 <__ieee754_atan2f+0x2c>
 801352e:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8013532:	eeb0 0a67 	vmov.f32	s0, s15
 8013536:	bd10      	pop	{r4, pc}
 8013538:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 801353c:	d103      	bne.n	8013546 <__ieee754_atan2f+0x3a>
 801353e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013542:	f000 bc79 	b.w	8013e38 <atanf>
 8013546:	1794      	asrs	r4, r2, #30
 8013548:	f004 0402 	and.w	r4, r4, #2
 801354c:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8013550:	b943      	cbnz	r3, 8013564 <__ieee754_atan2f+0x58>
 8013552:	2c02      	cmp	r4, #2
 8013554:	d05e      	beq.n	8013614 <__ieee754_atan2f+0x108>
 8013556:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8013628 <__ieee754_atan2f+0x11c>
 801355a:	2c03      	cmp	r4, #3
 801355c:	bf08      	it	eq
 801355e:	eef0 7a47 	vmoveq.f32	s15, s14
 8013562:	e7e6      	b.n	8013532 <__ieee754_atan2f+0x26>
 8013564:	b941      	cbnz	r1, 8013578 <__ieee754_atan2f+0x6c>
 8013566:	eddf 7a31 	vldr	s15, [pc, #196]	; 801362c <__ieee754_atan2f+0x120>
 801356a:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8013630 <__ieee754_atan2f+0x124>
 801356e:	2800      	cmp	r0, #0
 8013570:	bfb8      	it	lt
 8013572:	eef0 7a47 	vmovlt.f32	s15, s14
 8013576:	e7dc      	b.n	8013532 <__ieee754_atan2f+0x26>
 8013578:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801357c:	d110      	bne.n	80135a0 <__ieee754_atan2f+0x94>
 801357e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8013582:	f104 34ff 	add.w	r4, r4, #4294967295
 8013586:	d107      	bne.n	8013598 <__ieee754_atan2f+0x8c>
 8013588:	2c02      	cmp	r4, #2
 801358a:	d846      	bhi.n	801361a <__ieee754_atan2f+0x10e>
 801358c:	4b29      	ldr	r3, [pc, #164]	; (8013634 <__ieee754_atan2f+0x128>)
 801358e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8013592:	edd3 7a00 	vldr	s15, [r3]
 8013596:	e7cc      	b.n	8013532 <__ieee754_atan2f+0x26>
 8013598:	2c02      	cmp	r4, #2
 801359a:	d841      	bhi.n	8013620 <__ieee754_atan2f+0x114>
 801359c:	4b26      	ldr	r3, [pc, #152]	; (8013638 <__ieee754_atan2f+0x12c>)
 801359e:	e7f6      	b.n	801358e <__ieee754_atan2f+0x82>
 80135a0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80135a4:	d0df      	beq.n	8013566 <__ieee754_atan2f+0x5a>
 80135a6:	1a5b      	subs	r3, r3, r1
 80135a8:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 80135ac:	ea4f 51e3 	mov.w	r1, r3, asr #23
 80135b0:	da1a      	bge.n	80135e8 <__ieee754_atan2f+0xdc>
 80135b2:	2a00      	cmp	r2, #0
 80135b4:	da01      	bge.n	80135ba <__ieee754_atan2f+0xae>
 80135b6:	313c      	adds	r1, #60	; 0x3c
 80135b8:	db19      	blt.n	80135ee <__ieee754_atan2f+0xe2>
 80135ba:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 80135be:	f7ff fdb3 	bl	8013128 <fabsf>
 80135c2:	f000 fc39 	bl	8013e38 <atanf>
 80135c6:	eef0 7a40 	vmov.f32	s15, s0
 80135ca:	2c01      	cmp	r4, #1
 80135cc:	d012      	beq.n	80135f4 <__ieee754_atan2f+0xe8>
 80135ce:	2c02      	cmp	r4, #2
 80135d0:	d017      	beq.n	8013602 <__ieee754_atan2f+0xf6>
 80135d2:	2c00      	cmp	r4, #0
 80135d4:	d0ad      	beq.n	8013532 <__ieee754_atan2f+0x26>
 80135d6:	ed9f 7a19 	vldr	s14, [pc, #100]	; 801363c <__ieee754_atan2f+0x130>
 80135da:	ee77 7a87 	vadd.f32	s15, s15, s14
 80135de:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8013640 <__ieee754_atan2f+0x134>
 80135e2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80135e6:	e7a4      	b.n	8013532 <__ieee754_atan2f+0x26>
 80135e8:	eddf 7a10 	vldr	s15, [pc, #64]	; 801362c <__ieee754_atan2f+0x120>
 80135ec:	e7ed      	b.n	80135ca <__ieee754_atan2f+0xbe>
 80135ee:	eddf 7a15 	vldr	s15, [pc, #84]	; 8013644 <__ieee754_atan2f+0x138>
 80135f2:	e7ea      	b.n	80135ca <__ieee754_atan2f+0xbe>
 80135f4:	ee17 3a90 	vmov	r3, s15
 80135f8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80135fc:	ee07 3a90 	vmov	s15, r3
 8013600:	e797      	b.n	8013532 <__ieee754_atan2f+0x26>
 8013602:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 801363c <__ieee754_atan2f+0x130>
 8013606:	ee77 7a87 	vadd.f32	s15, s15, s14
 801360a:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8013640 <__ieee754_atan2f+0x134>
 801360e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013612:	e78e      	b.n	8013532 <__ieee754_atan2f+0x26>
 8013614:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8013640 <__ieee754_atan2f+0x134>
 8013618:	e78b      	b.n	8013532 <__ieee754_atan2f+0x26>
 801361a:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8013648 <__ieee754_atan2f+0x13c>
 801361e:	e788      	b.n	8013532 <__ieee754_atan2f+0x26>
 8013620:	eddf 7a08 	vldr	s15, [pc, #32]	; 8013644 <__ieee754_atan2f+0x138>
 8013624:	e785      	b.n	8013532 <__ieee754_atan2f+0x26>
 8013626:	bf00      	nop
 8013628:	c0490fdb 	.word	0xc0490fdb
 801362c:	3fc90fdb 	.word	0x3fc90fdb
 8013630:	bfc90fdb 	.word	0xbfc90fdb
 8013634:	08014e44 	.word	0x08014e44
 8013638:	08014e50 	.word	0x08014e50
 801363c:	33bbbd2e 	.word	0x33bbbd2e
 8013640:	40490fdb 	.word	0x40490fdb
 8013644:	00000000 	.word	0x00000000
 8013648:	3f490fdb 	.word	0x3f490fdb

0801364c <__ieee754_powf>:
 801364c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013650:	ee10 4a90 	vmov	r4, s1
 8013654:	f034 4800 	bics.w	r8, r4, #2147483648	; 0x80000000
 8013658:	ed2d 8b02 	vpush	{d8}
 801365c:	ee10 7a10 	vmov	r7, s0
 8013660:	eeb0 8a40 	vmov.f32	s16, s0
 8013664:	eef0 8a60 	vmov.f32	s17, s1
 8013668:	d10c      	bne.n	8013684 <__ieee754_powf+0x38>
 801366a:	f487 0780 	eor.w	r7, r7, #4194304	; 0x400000
 801366e:	007f      	lsls	r7, r7, #1
 8013670:	f517 0f00 	cmn.w	r7, #8388608	; 0x800000
 8013674:	f240 8292 	bls.w	8013b9c <__ieee754_powf+0x550>
 8013678:	ee38 0a28 	vadd.f32	s0, s16, s17
 801367c:	ecbd 8b02 	vpop	{d8}
 8013680:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013684:	f027 4500 	bic.w	r5, r7, #2147483648	; 0x80000000
 8013688:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 801368c:	dcf4      	bgt.n	8013678 <__ieee754_powf+0x2c>
 801368e:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 8013692:	dd08      	ble.n	80136a6 <__ieee754_powf+0x5a>
 8013694:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8013698:	d1ee      	bne.n	8013678 <__ieee754_powf+0x2c>
 801369a:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 801369e:	0064      	lsls	r4, r4, #1
 80136a0:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 80136a4:	e7e6      	b.n	8013674 <__ieee754_powf+0x28>
 80136a6:	2f00      	cmp	r7, #0
 80136a8:	da20      	bge.n	80136ec <__ieee754_powf+0xa0>
 80136aa:	f1b8 4f97 	cmp.w	r8, #1266679808	; 0x4b800000
 80136ae:	da2d      	bge.n	801370c <__ieee754_powf+0xc0>
 80136b0:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 80136b4:	f2c0 827b 	blt.w	8013bae <__ieee754_powf+0x562>
 80136b8:	ea4f 53e8 	mov.w	r3, r8, asr #23
 80136bc:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 80136c0:	fa48 f603 	asr.w	r6, r8, r3
 80136c4:	fa06 f303 	lsl.w	r3, r6, r3
 80136c8:	4543      	cmp	r3, r8
 80136ca:	f040 8270 	bne.w	8013bae <__ieee754_powf+0x562>
 80136ce:	f006 0601 	and.w	r6, r6, #1
 80136d2:	f1c6 0602 	rsb	r6, r6, #2
 80136d6:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 80136da:	d11f      	bne.n	801371c <__ieee754_powf+0xd0>
 80136dc:	2c00      	cmp	r4, #0
 80136de:	f280 8263 	bge.w	8013ba8 <__ieee754_powf+0x55c>
 80136e2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80136e6:	ee87 0a88 	vdiv.f32	s0, s15, s16
 80136ea:	e7c7      	b.n	801367c <__ieee754_powf+0x30>
 80136ec:	2600      	movs	r6, #0
 80136ee:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 80136f2:	d1f0      	bne.n	80136d6 <__ieee754_powf+0x8a>
 80136f4:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 80136f8:	f000 8250 	beq.w	8013b9c <__ieee754_powf+0x550>
 80136fc:	dd08      	ble.n	8013710 <__ieee754_powf+0xc4>
 80136fe:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 8013a04 <__ieee754_powf+0x3b8>
 8013702:	2c00      	cmp	r4, #0
 8013704:	bfa8      	it	ge
 8013706:	eeb0 0a68 	vmovge.f32	s0, s17
 801370a:	e7b7      	b.n	801367c <__ieee754_powf+0x30>
 801370c:	2602      	movs	r6, #2
 801370e:	e7ee      	b.n	80136ee <__ieee754_powf+0xa2>
 8013710:	2c00      	cmp	r4, #0
 8013712:	f280 8246 	bge.w	8013ba2 <__ieee754_powf+0x556>
 8013716:	eeb1 0a68 	vneg.f32	s0, s17
 801371a:	e7af      	b.n	801367c <__ieee754_powf+0x30>
 801371c:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 8013720:	d102      	bne.n	8013728 <__ieee754_powf+0xdc>
 8013722:	ee28 0a08 	vmul.f32	s0, s16, s16
 8013726:	e7a9      	b.n	801367c <__ieee754_powf+0x30>
 8013728:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 801372c:	eeb0 0a48 	vmov.f32	s0, s16
 8013730:	d107      	bne.n	8013742 <__ieee754_powf+0xf6>
 8013732:	2f00      	cmp	r7, #0
 8013734:	db05      	blt.n	8013742 <__ieee754_powf+0xf6>
 8013736:	ecbd 8b02 	vpop	{d8}
 801373a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801373e:	f7ff bd55 	b.w	80131ec <__ieee754_sqrtf>
 8013742:	f7ff fcf1 	bl	8013128 <fabsf>
 8013746:	b125      	cbz	r5, 8013752 <__ieee754_powf+0x106>
 8013748:	f027 4340 	bic.w	r3, r7, #3221225472	; 0xc0000000
 801374c:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8013750:	d115      	bne.n	801377e <__ieee754_powf+0x132>
 8013752:	2c00      	cmp	r4, #0
 8013754:	bfbc      	itt	lt
 8013756:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 801375a:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 801375e:	2f00      	cmp	r7, #0
 8013760:	da8c      	bge.n	801367c <__ieee754_powf+0x30>
 8013762:	f1a5 557e 	sub.w	r5, r5, #1065353216	; 0x3f800000
 8013766:	4335      	orrs	r5, r6
 8013768:	d104      	bne.n	8013774 <__ieee754_powf+0x128>
 801376a:	ee70 7a40 	vsub.f32	s15, s0, s0
 801376e:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8013772:	e783      	b.n	801367c <__ieee754_powf+0x30>
 8013774:	2e01      	cmp	r6, #1
 8013776:	d181      	bne.n	801367c <__ieee754_powf+0x30>
 8013778:	eeb1 0a40 	vneg.f32	s0, s0
 801377c:	e77e      	b.n	801367c <__ieee754_powf+0x30>
 801377e:	0ff8      	lsrs	r0, r7, #31
 8013780:	3801      	subs	r0, #1
 8013782:	ea56 0300 	orrs.w	r3, r6, r0
 8013786:	d104      	bne.n	8013792 <__ieee754_powf+0x146>
 8013788:	ee38 8a48 	vsub.f32	s16, s16, s16
 801378c:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8013790:	e774      	b.n	801367c <__ieee754_powf+0x30>
 8013792:	f1b8 4f9a 	cmp.w	r8, #1291845632	; 0x4d000000
 8013796:	dd73      	ble.n	8013880 <__ieee754_powf+0x234>
 8013798:	4b9b      	ldr	r3, [pc, #620]	; (8013a08 <__ieee754_powf+0x3bc>)
 801379a:	429d      	cmp	r5, r3
 801379c:	dc08      	bgt.n	80137b0 <__ieee754_powf+0x164>
 801379e:	2c00      	cmp	r4, #0
 80137a0:	da0b      	bge.n	80137ba <__ieee754_powf+0x16e>
 80137a2:	2000      	movs	r0, #0
 80137a4:	ecbd 8b02 	vpop	{d8}
 80137a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80137ac:	f000 bc9a 	b.w	80140e4 <__math_oflowf>
 80137b0:	4b96      	ldr	r3, [pc, #600]	; (8013a0c <__ieee754_powf+0x3c0>)
 80137b2:	429d      	cmp	r5, r3
 80137b4:	dd08      	ble.n	80137c8 <__ieee754_powf+0x17c>
 80137b6:	2c00      	cmp	r4, #0
 80137b8:	dcf3      	bgt.n	80137a2 <__ieee754_powf+0x156>
 80137ba:	2000      	movs	r0, #0
 80137bc:	ecbd 8b02 	vpop	{d8}
 80137c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80137c4:	f000 bc88 	b.w	80140d8 <__math_uflowf>
 80137c8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80137cc:	ee30 0a67 	vsub.f32	s0, s0, s15
 80137d0:	eddf 6a8f 	vldr	s13, [pc, #572]	; 8013a10 <__ieee754_powf+0x3c4>
 80137d4:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 80137d8:	eee0 6a67 	vfms.f32	s13, s0, s15
 80137dc:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80137e0:	eee6 7ac0 	vfms.f32	s15, s13, s0
 80137e4:	ee20 7a00 	vmul.f32	s14, s0, s0
 80137e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80137ec:	eddf 7a89 	vldr	s15, [pc, #548]	; 8013a14 <__ieee754_powf+0x3c8>
 80137f0:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 80137f4:	ed9f 7a88 	vldr	s14, [pc, #544]	; 8013a18 <__ieee754_powf+0x3cc>
 80137f8:	eee0 7a07 	vfma.f32	s15, s0, s14
 80137fc:	ed9f 7a87 	vldr	s14, [pc, #540]	; 8013a1c <__ieee754_powf+0x3d0>
 8013800:	eef0 6a67 	vmov.f32	s13, s15
 8013804:	eee0 6a07 	vfma.f32	s13, s0, s14
 8013808:	ee16 3a90 	vmov	r3, s13
 801380c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8013810:	f023 030f 	bic.w	r3, r3, #15
 8013814:	ee06 3a90 	vmov	s13, r3
 8013818:	eee0 6a47 	vfms.f32	s13, s0, s14
 801381c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8013820:	3e01      	subs	r6, #1
 8013822:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 8013826:	4306      	orrs	r6, r0
 8013828:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801382c:	f024 040f 	bic.w	r4, r4, #15
 8013830:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8013834:	bf08      	it	eq
 8013836:	eeb0 8a47 	vmoveq.f32	s16, s14
 801383a:	ee07 4a10 	vmov	s14, r4
 801383e:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8013842:	ee38 7ac7 	vsub.f32	s14, s17, s14
 8013846:	ee07 3a90 	vmov	s15, r3
 801384a:	eee7 0a27 	vfma.f32	s1, s14, s15
 801384e:	ee07 4a10 	vmov	s14, r4
 8013852:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013856:	ee30 7aa7 	vadd.f32	s14, s1, s15
 801385a:	ee17 1a10 	vmov	r1, s14
 801385e:	2900      	cmp	r1, #0
 8013860:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8013864:	f340 817c 	ble.w	8013b60 <__ieee754_powf+0x514>
 8013868:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 801386c:	f340 80f8 	ble.w	8013a60 <__ieee754_powf+0x414>
 8013870:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8013874:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013878:	bf4c      	ite	mi
 801387a:	2001      	movmi	r0, #1
 801387c:	2000      	movpl	r0, #0
 801387e:	e791      	b.n	80137a4 <__ieee754_powf+0x158>
 8013880:	f017 4fff 	tst.w	r7, #2139095040	; 0x7f800000
 8013884:	bf01      	itttt	eq
 8013886:	eddf 7a66 	vldreq	s15, [pc, #408]	; 8013a20 <__ieee754_powf+0x3d4>
 801388a:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 801388e:	f06f 0317 	mvneq.w	r3, #23
 8013892:	ee17 5a90 	vmoveq	r5, s15
 8013896:	ea4f 52e5 	mov.w	r2, r5, asr #23
 801389a:	bf18      	it	ne
 801389c:	2300      	movne	r3, #0
 801389e:	3a7f      	subs	r2, #127	; 0x7f
 80138a0:	441a      	add	r2, r3
 80138a2:	4b60      	ldr	r3, [pc, #384]	; (8013a24 <__ieee754_powf+0x3d8>)
 80138a4:	f3c5 0516 	ubfx	r5, r5, #0, #23
 80138a8:	429d      	cmp	r5, r3
 80138aa:	f045 517e 	orr.w	r1, r5, #1065353216	; 0x3f800000
 80138ae:	dd06      	ble.n	80138be <__ieee754_powf+0x272>
 80138b0:	4b5d      	ldr	r3, [pc, #372]	; (8013a28 <__ieee754_powf+0x3dc>)
 80138b2:	429d      	cmp	r5, r3
 80138b4:	f340 80a4 	ble.w	8013a00 <__ieee754_powf+0x3b4>
 80138b8:	3201      	adds	r2, #1
 80138ba:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 80138be:	2500      	movs	r5, #0
 80138c0:	4b5a      	ldr	r3, [pc, #360]	; (8013a2c <__ieee754_powf+0x3e0>)
 80138c2:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 80138c6:	ee07 1a10 	vmov	s14, r1
 80138ca:	edd3 5a00 	vldr	s11, [r3]
 80138ce:	4b58      	ldr	r3, [pc, #352]	; (8013a30 <__ieee754_powf+0x3e4>)
 80138d0:	ee75 7a87 	vadd.f32	s15, s11, s14
 80138d4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80138d8:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 80138dc:	1049      	asrs	r1, r1, #1
 80138de:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 80138e2:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 80138e6:	eb01 5145 	add.w	r1, r1, r5, lsl #21
 80138ea:	ee37 6a65 	vsub.f32	s12, s14, s11
 80138ee:	ee07 1a90 	vmov	s15, r1
 80138f2:	ee26 5a24 	vmul.f32	s10, s12, s9
 80138f6:	ee77 5ae5 	vsub.f32	s11, s15, s11
 80138fa:	ee15 7a10 	vmov	r7, s10
 80138fe:	401f      	ands	r7, r3
 8013900:	ee06 7a90 	vmov	s13, r7
 8013904:	eea6 6ae7 	vfms.f32	s12, s13, s15
 8013908:	ee37 7a65 	vsub.f32	s14, s14, s11
 801390c:	ee65 7a05 	vmul.f32	s15, s10, s10
 8013910:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8013914:	eddf 5a47 	vldr	s11, [pc, #284]	; 8013a34 <__ieee754_powf+0x3e8>
 8013918:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8013a38 <__ieee754_powf+0x3ec>
 801391c:	eee7 5a87 	vfma.f32	s11, s15, s14
 8013920:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8013a3c <__ieee754_powf+0x3f0>
 8013924:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8013928:	eddf 5a39 	vldr	s11, [pc, #228]	; 8013a10 <__ieee754_powf+0x3c4>
 801392c:	eee7 5a27 	vfma.f32	s11, s14, s15
 8013930:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8013a40 <__ieee754_powf+0x3f4>
 8013934:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8013938:	eddf 5a42 	vldr	s11, [pc, #264]	; 8013a44 <__ieee754_powf+0x3f8>
 801393c:	ee26 6a24 	vmul.f32	s12, s12, s9
 8013940:	eee7 5a27 	vfma.f32	s11, s14, s15
 8013944:	ee35 7a26 	vadd.f32	s14, s10, s13
 8013948:	ee67 4aa7 	vmul.f32	s9, s15, s15
 801394c:	ee27 7a06 	vmul.f32	s14, s14, s12
 8013950:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 8013954:	eea4 7aa5 	vfma.f32	s14, s9, s11
 8013958:	eef0 5a67 	vmov.f32	s11, s15
 801395c:	eee6 5aa6 	vfma.f32	s11, s13, s13
 8013960:	ee75 5a87 	vadd.f32	s11, s11, s14
 8013964:	ee15 1a90 	vmov	r1, s11
 8013968:	4019      	ands	r1, r3
 801396a:	ee05 1a90 	vmov	s11, r1
 801396e:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8013972:	eee6 7ae6 	vfms.f32	s15, s13, s13
 8013976:	ee77 7a67 	vsub.f32	s15, s14, s15
 801397a:	ee67 7a85 	vmul.f32	s15, s15, s10
 801397e:	eee6 7a25 	vfma.f32	s15, s12, s11
 8013982:	eeb0 6a67 	vmov.f32	s12, s15
 8013986:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801398a:	ee16 1a10 	vmov	r1, s12
 801398e:	4019      	ands	r1, r3
 8013990:	ee07 1a10 	vmov	s14, r1
 8013994:	eea6 7ae5 	vfms.f32	s14, s13, s11
 8013998:	ee06 1a10 	vmov	s12, r1
 801399c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80139a0:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8013a48 <__ieee754_powf+0x3fc>
 80139a4:	4929      	ldr	r1, [pc, #164]	; (8013a4c <__ieee754_powf+0x400>)
 80139a6:	eddf 5a2a 	vldr	s11, [pc, #168]	; 8013a50 <__ieee754_powf+0x404>
 80139aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80139ae:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8013a54 <__ieee754_powf+0x408>
 80139b2:	eee6 7a07 	vfma.f32	s15, s12, s14
 80139b6:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 80139ba:	ed91 7a00 	vldr	s14, [r1]
 80139be:	ee77 7a87 	vadd.f32	s15, s15, s14
 80139c2:	ee07 2a10 	vmov	s14, r2
 80139c6:	eef0 6a67 	vmov.f32	s13, s15
 80139ca:	4a23      	ldr	r2, [pc, #140]	; (8013a58 <__ieee754_powf+0x40c>)
 80139cc:	eee6 6a25 	vfma.f32	s13, s12, s11
 80139d0:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 80139d4:	ed92 5a00 	vldr	s10, [r2]
 80139d8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80139dc:	ee76 6a85 	vadd.f32	s13, s13, s10
 80139e0:	ee76 6a87 	vadd.f32	s13, s13, s14
 80139e4:	ee16 2a90 	vmov	r2, s13
 80139e8:	4013      	ands	r3, r2
 80139ea:	ee06 3a90 	vmov	s13, r3
 80139ee:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80139f2:	ee37 7a45 	vsub.f32	s14, s14, s10
 80139f6:	eea6 7a65 	vfms.f32	s14, s12, s11
 80139fa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80139fe:	e70f      	b.n	8013820 <__ieee754_powf+0x1d4>
 8013a00:	2501      	movs	r5, #1
 8013a02:	e75d      	b.n	80138c0 <__ieee754_powf+0x274>
 8013a04:	00000000 	.word	0x00000000
 8013a08:	3f7ffff3 	.word	0x3f7ffff3
 8013a0c:	3f800007 	.word	0x3f800007
 8013a10:	3eaaaaab 	.word	0x3eaaaaab
 8013a14:	3fb8aa3b 	.word	0x3fb8aa3b
 8013a18:	36eca570 	.word	0x36eca570
 8013a1c:	3fb8aa00 	.word	0x3fb8aa00
 8013a20:	4b800000 	.word	0x4b800000
 8013a24:	001cc471 	.word	0x001cc471
 8013a28:	005db3d6 	.word	0x005db3d6
 8013a2c:	08014e5c 	.word	0x08014e5c
 8013a30:	fffff000 	.word	0xfffff000
 8013a34:	3e6c3255 	.word	0x3e6c3255
 8013a38:	3e53f142 	.word	0x3e53f142
 8013a3c:	3e8ba305 	.word	0x3e8ba305
 8013a40:	3edb6db7 	.word	0x3edb6db7
 8013a44:	3f19999a 	.word	0x3f19999a
 8013a48:	3f76384f 	.word	0x3f76384f
 8013a4c:	08014e6c 	.word	0x08014e6c
 8013a50:	3f763800 	.word	0x3f763800
 8013a54:	369dc3a0 	.word	0x369dc3a0
 8013a58:	08014e64 	.word	0x08014e64
 8013a5c:	3338aa3c 	.word	0x3338aa3c
 8013a60:	f040 8093 	bne.w	8013b8a <__ieee754_powf+0x53e>
 8013a64:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 8013a5c <__ieee754_powf+0x410>
 8013a68:	ee37 7a67 	vsub.f32	s14, s14, s15
 8013a6c:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8013a70:	eef4 6ac7 	vcmpe.f32	s13, s14
 8013a74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013a78:	f73f aefa 	bgt.w	8013870 <__ieee754_powf+0x224>
 8013a7c:	15db      	asrs	r3, r3, #23
 8013a7e:	3b7e      	subs	r3, #126	; 0x7e
 8013a80:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8013a84:	4118      	asrs	r0, r3
 8013a86:	4408      	add	r0, r1
 8013a88:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8013a8c:	4a49      	ldr	r2, [pc, #292]	; (8013bb4 <__ieee754_powf+0x568>)
 8013a8e:	3b7f      	subs	r3, #127	; 0x7f
 8013a90:	411a      	asrs	r2, r3
 8013a92:	4002      	ands	r2, r0
 8013a94:	ee07 2a10 	vmov	s14, r2
 8013a98:	f3c0 0016 	ubfx	r0, r0, #0, #23
 8013a9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8013aa0:	f1c3 0317 	rsb	r3, r3, #23
 8013aa4:	4118      	asrs	r0, r3
 8013aa6:	2900      	cmp	r1, #0
 8013aa8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013aac:	bfb8      	it	lt
 8013aae:	4240      	neglt	r0, r0
 8013ab0:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8013ab4:	eddf 6a40 	vldr	s13, [pc, #256]	; 8013bb8 <__ieee754_powf+0x56c>
 8013ab8:	ed9f 6a40 	vldr	s12, [pc, #256]	; 8013bbc <__ieee754_powf+0x570>
 8013abc:	ee17 3a10 	vmov	r3, s14
 8013ac0:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8013ac4:	f023 030f 	bic.w	r3, r3, #15
 8013ac8:	ee07 3a10 	vmov	s14, r3
 8013acc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013ad0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8013ad4:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8013ad8:	eddf 7a39 	vldr	s15, [pc, #228]	; 8013bc0 <__ieee754_powf+0x574>
 8013adc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013ae0:	eee0 7aa6 	vfma.f32	s15, s1, s13
 8013ae4:	eef0 6a67 	vmov.f32	s13, s15
 8013ae8:	eee7 6a06 	vfma.f32	s13, s14, s12
 8013aec:	eef0 5a66 	vmov.f32	s11, s13
 8013af0:	eee7 5a46 	vfms.f32	s11, s14, s12
 8013af4:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8013af8:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8013afc:	ed9f 6a31 	vldr	s12, [pc, #196]	; 8013bc4 <__ieee754_powf+0x578>
 8013b00:	eddf 5a31 	vldr	s11, [pc, #196]	; 8013bc8 <__ieee754_powf+0x57c>
 8013b04:	eea7 6a25 	vfma.f32	s12, s14, s11
 8013b08:	eddf 5a30 	vldr	s11, [pc, #192]	; 8013bcc <__ieee754_powf+0x580>
 8013b0c:	eee6 5a07 	vfma.f32	s11, s12, s14
 8013b10:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 8013bd0 <__ieee754_powf+0x584>
 8013b14:	eea5 6a87 	vfma.f32	s12, s11, s14
 8013b18:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8013bd4 <__ieee754_powf+0x588>
 8013b1c:	eee6 5a07 	vfma.f32	s11, s12, s14
 8013b20:	eeb0 6a66 	vmov.f32	s12, s13
 8013b24:	eea5 6ac7 	vfms.f32	s12, s11, s14
 8013b28:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8013b2c:	ee66 5a86 	vmul.f32	s11, s13, s12
 8013b30:	ee36 6a47 	vsub.f32	s12, s12, s14
 8013b34:	eee6 7aa7 	vfma.f32	s15, s13, s15
 8013b38:	ee85 7a86 	vdiv.f32	s14, s11, s12
 8013b3c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013b40:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8013b44:	ee30 0a67 	vsub.f32	s0, s0, s15
 8013b48:	ee10 3a10 	vmov	r3, s0
 8013b4c:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8013b50:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8013b54:	da1f      	bge.n	8013b96 <__ieee754_powf+0x54a>
 8013b56:	f000 fa43 	bl	8013fe0 <scalbnf>
 8013b5a:	ee20 0a08 	vmul.f32	s0, s0, s16
 8013b5e:	e58d      	b.n	801367c <__ieee754_powf+0x30>
 8013b60:	4a1d      	ldr	r2, [pc, #116]	; (8013bd8 <__ieee754_powf+0x58c>)
 8013b62:	4293      	cmp	r3, r2
 8013b64:	dd07      	ble.n	8013b76 <__ieee754_powf+0x52a>
 8013b66:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8013b6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b6e:	bf4c      	ite	mi
 8013b70:	2001      	movmi	r0, #1
 8013b72:	2000      	movpl	r0, #0
 8013b74:	e622      	b.n	80137bc <__ieee754_powf+0x170>
 8013b76:	d108      	bne.n	8013b8a <__ieee754_powf+0x53e>
 8013b78:	ee37 7a67 	vsub.f32	s14, s14, s15
 8013b7c:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8013b80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b84:	f6ff af7a 	blt.w	8013a7c <__ieee754_powf+0x430>
 8013b88:	e7ed      	b.n	8013b66 <__ieee754_powf+0x51a>
 8013b8a:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 8013b8e:	f73f af75 	bgt.w	8013a7c <__ieee754_powf+0x430>
 8013b92:	2000      	movs	r0, #0
 8013b94:	e78c      	b.n	8013ab0 <__ieee754_powf+0x464>
 8013b96:	ee00 3a10 	vmov	s0, r3
 8013b9a:	e7de      	b.n	8013b5a <__ieee754_powf+0x50e>
 8013b9c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8013ba0:	e56c      	b.n	801367c <__ieee754_powf+0x30>
 8013ba2:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8013bdc <__ieee754_powf+0x590>
 8013ba6:	e569      	b.n	801367c <__ieee754_powf+0x30>
 8013ba8:	eeb0 0a48 	vmov.f32	s0, s16
 8013bac:	e566      	b.n	801367c <__ieee754_powf+0x30>
 8013bae:	2600      	movs	r6, #0
 8013bb0:	e591      	b.n	80136d6 <__ieee754_powf+0x8a>
 8013bb2:	bf00      	nop
 8013bb4:	ff800000 	.word	0xff800000
 8013bb8:	3f317218 	.word	0x3f317218
 8013bbc:	3f317200 	.word	0x3f317200
 8013bc0:	35bfbe8c 	.word	0x35bfbe8c
 8013bc4:	b5ddea0e 	.word	0xb5ddea0e
 8013bc8:	3331bb4c 	.word	0x3331bb4c
 8013bcc:	388ab355 	.word	0x388ab355
 8013bd0:	bb360b61 	.word	0xbb360b61
 8013bd4:	3e2aaaab 	.word	0x3e2aaaab
 8013bd8:	43160000 	.word	0x43160000
 8013bdc:	00000000 	.word	0x00000000

08013be0 <__ieee754_rem_pio2f>:
 8013be0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013be2:	ee10 6a10 	vmov	r6, s0
 8013be6:	4b86      	ldr	r3, [pc, #536]	; (8013e00 <__ieee754_rem_pio2f+0x220>)
 8013be8:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8013bec:	429d      	cmp	r5, r3
 8013bee:	b087      	sub	sp, #28
 8013bf0:	4604      	mov	r4, r0
 8013bf2:	dc05      	bgt.n	8013c00 <__ieee754_rem_pio2f+0x20>
 8013bf4:	2300      	movs	r3, #0
 8013bf6:	ed80 0a00 	vstr	s0, [r0]
 8013bfa:	6043      	str	r3, [r0, #4]
 8013bfc:	2000      	movs	r0, #0
 8013bfe:	e020      	b.n	8013c42 <__ieee754_rem_pio2f+0x62>
 8013c00:	4b80      	ldr	r3, [pc, #512]	; (8013e04 <__ieee754_rem_pio2f+0x224>)
 8013c02:	429d      	cmp	r5, r3
 8013c04:	dc38      	bgt.n	8013c78 <__ieee754_rem_pio2f+0x98>
 8013c06:	2e00      	cmp	r6, #0
 8013c08:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 8013e08 <__ieee754_rem_pio2f+0x228>
 8013c0c:	4b7f      	ldr	r3, [pc, #508]	; (8013e0c <__ieee754_rem_pio2f+0x22c>)
 8013c0e:	f025 050f 	bic.w	r5, r5, #15
 8013c12:	dd18      	ble.n	8013c46 <__ieee754_rem_pio2f+0x66>
 8013c14:	429d      	cmp	r5, r3
 8013c16:	ee70 7a47 	vsub.f32	s15, s0, s14
 8013c1a:	bf09      	itett	eq
 8013c1c:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 8013e10 <__ieee754_rem_pio2f+0x230>
 8013c20:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 8013e14 <__ieee754_rem_pio2f+0x234>
 8013c24:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8013c28:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 8013e18 <__ieee754_rem_pio2f+0x238>
 8013c2c:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8013c30:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8013c34:	edc0 6a00 	vstr	s13, [r0]
 8013c38:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013c3c:	edc0 7a01 	vstr	s15, [r0, #4]
 8013c40:	2001      	movs	r0, #1
 8013c42:	b007      	add	sp, #28
 8013c44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013c46:	429d      	cmp	r5, r3
 8013c48:	ee70 7a07 	vadd.f32	s15, s0, s14
 8013c4c:	bf09      	itett	eq
 8013c4e:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 8013e10 <__ieee754_rem_pio2f+0x230>
 8013c52:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 8013e14 <__ieee754_rem_pio2f+0x234>
 8013c56:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8013c5a:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 8013e18 <__ieee754_rem_pio2f+0x238>
 8013c5e:	ee77 6a87 	vadd.f32	s13, s15, s14
 8013c62:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8013c66:	edc0 6a00 	vstr	s13, [r0]
 8013c6a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013c6e:	edc0 7a01 	vstr	s15, [r0, #4]
 8013c72:	f04f 30ff 	mov.w	r0, #4294967295
 8013c76:	e7e4      	b.n	8013c42 <__ieee754_rem_pio2f+0x62>
 8013c78:	4b68      	ldr	r3, [pc, #416]	; (8013e1c <__ieee754_rem_pio2f+0x23c>)
 8013c7a:	429d      	cmp	r5, r3
 8013c7c:	dc71      	bgt.n	8013d62 <__ieee754_rem_pio2f+0x182>
 8013c7e:	f7ff fa53 	bl	8013128 <fabsf>
 8013c82:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8013e20 <__ieee754_rem_pio2f+0x240>
 8013c86:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8013c8a:	eee0 7a07 	vfma.f32	s15, s0, s14
 8013c8e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013c92:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8013c96:	ee17 0a90 	vmov	r0, s15
 8013c9a:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8013e08 <__ieee754_rem_pio2f+0x228>
 8013c9e:	eea7 0a67 	vfms.f32	s0, s14, s15
 8013ca2:	281f      	cmp	r0, #31
 8013ca4:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8013e14 <__ieee754_rem_pio2f+0x234>
 8013ca8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013cac:	eeb1 6a47 	vneg.f32	s12, s14
 8013cb0:	ee70 6a67 	vsub.f32	s13, s0, s15
 8013cb4:	ee16 2a90 	vmov	r2, s13
 8013cb8:	dc1c      	bgt.n	8013cf4 <__ieee754_rem_pio2f+0x114>
 8013cba:	495a      	ldr	r1, [pc, #360]	; (8013e24 <__ieee754_rem_pio2f+0x244>)
 8013cbc:	1e47      	subs	r7, r0, #1
 8013cbe:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 8013cc2:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8013cc6:	428b      	cmp	r3, r1
 8013cc8:	d014      	beq.n	8013cf4 <__ieee754_rem_pio2f+0x114>
 8013cca:	6022      	str	r2, [r4, #0]
 8013ccc:	ed94 7a00 	vldr	s14, [r4]
 8013cd0:	ee30 0a47 	vsub.f32	s0, s0, s14
 8013cd4:	2e00      	cmp	r6, #0
 8013cd6:	ee30 0a67 	vsub.f32	s0, s0, s15
 8013cda:	ed84 0a01 	vstr	s0, [r4, #4]
 8013cde:	dab0      	bge.n	8013c42 <__ieee754_rem_pio2f+0x62>
 8013ce0:	eeb1 7a47 	vneg.f32	s14, s14
 8013ce4:	eeb1 0a40 	vneg.f32	s0, s0
 8013ce8:	ed84 7a00 	vstr	s14, [r4]
 8013cec:	ed84 0a01 	vstr	s0, [r4, #4]
 8013cf0:	4240      	negs	r0, r0
 8013cf2:	e7a6      	b.n	8013c42 <__ieee754_rem_pio2f+0x62>
 8013cf4:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8013cf8:	ebc1 51d5 	rsb	r1, r1, r5, lsr #23
 8013cfc:	2908      	cmp	r1, #8
 8013cfe:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8013d02:	dde2      	ble.n	8013cca <__ieee754_rem_pio2f+0xea>
 8013d04:	eddf 5a42 	vldr	s11, [pc, #264]	; 8013e10 <__ieee754_rem_pio2f+0x230>
 8013d08:	eef0 6a40 	vmov.f32	s13, s0
 8013d0c:	eee6 6a25 	vfma.f32	s13, s12, s11
 8013d10:	ee70 7a66 	vsub.f32	s15, s0, s13
 8013d14:	eee6 7a25 	vfma.f32	s15, s12, s11
 8013d18:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8013e18 <__ieee754_rem_pio2f+0x238>
 8013d1c:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8013d20:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8013d24:	ee15 2a90 	vmov	r2, s11
 8013d28:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8013d2c:	1a5b      	subs	r3, r3, r1
 8013d2e:	2b19      	cmp	r3, #25
 8013d30:	dc04      	bgt.n	8013d3c <__ieee754_rem_pio2f+0x15c>
 8013d32:	edc4 5a00 	vstr	s11, [r4]
 8013d36:	eeb0 0a66 	vmov.f32	s0, s13
 8013d3a:	e7c7      	b.n	8013ccc <__ieee754_rem_pio2f+0xec>
 8013d3c:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8013e28 <__ieee754_rem_pio2f+0x248>
 8013d40:	eeb0 0a66 	vmov.f32	s0, s13
 8013d44:	eea6 0a25 	vfma.f32	s0, s12, s11
 8013d48:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8013d4c:	eddf 6a37 	vldr	s13, [pc, #220]	; 8013e2c <__ieee754_rem_pio2f+0x24c>
 8013d50:	eee6 7a25 	vfma.f32	s15, s12, s11
 8013d54:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8013d58:	ee30 7a67 	vsub.f32	s14, s0, s15
 8013d5c:	ed84 7a00 	vstr	s14, [r4]
 8013d60:	e7b4      	b.n	8013ccc <__ieee754_rem_pio2f+0xec>
 8013d62:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8013d66:	db06      	blt.n	8013d76 <__ieee754_rem_pio2f+0x196>
 8013d68:	ee70 7a40 	vsub.f32	s15, s0, s0
 8013d6c:	edc0 7a01 	vstr	s15, [r0, #4]
 8013d70:	edc0 7a00 	vstr	s15, [r0]
 8013d74:	e742      	b.n	8013bfc <__ieee754_rem_pio2f+0x1c>
 8013d76:	15ea      	asrs	r2, r5, #23
 8013d78:	3a86      	subs	r2, #134	; 0x86
 8013d7a:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8013d7e:	ee07 3a90 	vmov	s15, r3
 8013d82:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8013d86:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8013e30 <__ieee754_rem_pio2f+0x250>
 8013d8a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013d8e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013d92:	ed8d 7a03 	vstr	s14, [sp, #12]
 8013d96:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8013d9a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8013d9e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013da2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013da6:	ed8d 7a04 	vstr	s14, [sp, #16]
 8013daa:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8013dae:	eef5 7a40 	vcmp.f32	s15, #0.0
 8013db2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013db6:	edcd 7a05 	vstr	s15, [sp, #20]
 8013dba:	d11e      	bne.n	8013dfa <__ieee754_rem_pio2f+0x21a>
 8013dbc:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8013dc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013dc4:	bf14      	ite	ne
 8013dc6:	2302      	movne	r3, #2
 8013dc8:	2301      	moveq	r3, #1
 8013dca:	491a      	ldr	r1, [pc, #104]	; (8013e34 <__ieee754_rem_pio2f+0x254>)
 8013dcc:	9101      	str	r1, [sp, #4]
 8013dce:	2102      	movs	r1, #2
 8013dd0:	9100      	str	r1, [sp, #0]
 8013dd2:	a803      	add	r0, sp, #12
 8013dd4:	4621      	mov	r1, r4
 8013dd6:	f000 f98b 	bl	80140f0 <__kernel_rem_pio2f>
 8013dda:	2e00      	cmp	r6, #0
 8013ddc:	f6bf af31 	bge.w	8013c42 <__ieee754_rem_pio2f+0x62>
 8013de0:	edd4 7a00 	vldr	s15, [r4]
 8013de4:	eef1 7a67 	vneg.f32	s15, s15
 8013de8:	edc4 7a00 	vstr	s15, [r4]
 8013dec:	edd4 7a01 	vldr	s15, [r4, #4]
 8013df0:	eef1 7a67 	vneg.f32	s15, s15
 8013df4:	edc4 7a01 	vstr	s15, [r4, #4]
 8013df8:	e77a      	b.n	8013cf0 <__ieee754_rem_pio2f+0x110>
 8013dfa:	2303      	movs	r3, #3
 8013dfc:	e7e5      	b.n	8013dca <__ieee754_rem_pio2f+0x1ea>
 8013dfe:	bf00      	nop
 8013e00:	3f490fd8 	.word	0x3f490fd8
 8013e04:	4016cbe3 	.word	0x4016cbe3
 8013e08:	3fc90f80 	.word	0x3fc90f80
 8013e0c:	3fc90fd0 	.word	0x3fc90fd0
 8013e10:	37354400 	.word	0x37354400
 8013e14:	37354443 	.word	0x37354443
 8013e18:	2e85a308 	.word	0x2e85a308
 8013e1c:	43490f80 	.word	0x43490f80
 8013e20:	3f22f984 	.word	0x3f22f984
 8013e24:	08014e74 	.word	0x08014e74
 8013e28:	2e85a300 	.word	0x2e85a300
 8013e2c:	248d3132 	.word	0x248d3132
 8013e30:	43800000 	.word	0x43800000
 8013e34:	08014ef4 	.word	0x08014ef4

08013e38 <atanf>:
 8013e38:	b538      	push	{r3, r4, r5, lr}
 8013e3a:	ee10 5a10 	vmov	r5, s0
 8013e3e:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8013e42:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 8013e46:	eef0 7a40 	vmov.f32	s15, s0
 8013e4a:	db10      	blt.n	8013e6e <atanf+0x36>
 8013e4c:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8013e50:	dd04      	ble.n	8013e5c <atanf+0x24>
 8013e52:	ee70 7a00 	vadd.f32	s15, s0, s0
 8013e56:	eeb0 0a67 	vmov.f32	s0, s15
 8013e5a:	bd38      	pop	{r3, r4, r5, pc}
 8013e5c:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8013f94 <atanf+0x15c>
 8013e60:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8013f98 <atanf+0x160>
 8013e64:	2d00      	cmp	r5, #0
 8013e66:	bfd8      	it	le
 8013e68:	eef0 7a47 	vmovle.f32	s15, s14
 8013e6c:	e7f3      	b.n	8013e56 <atanf+0x1e>
 8013e6e:	4b4b      	ldr	r3, [pc, #300]	; (8013f9c <atanf+0x164>)
 8013e70:	429c      	cmp	r4, r3
 8013e72:	dc10      	bgt.n	8013e96 <atanf+0x5e>
 8013e74:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8013e78:	da0a      	bge.n	8013e90 <atanf+0x58>
 8013e7a:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8013fa0 <atanf+0x168>
 8013e7e:	ee30 7a07 	vadd.f32	s14, s0, s14
 8013e82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8013e86:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8013e8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e8e:	dce2      	bgt.n	8013e56 <atanf+0x1e>
 8013e90:	f04f 33ff 	mov.w	r3, #4294967295
 8013e94:	e013      	b.n	8013ebe <atanf+0x86>
 8013e96:	f7ff f947 	bl	8013128 <fabsf>
 8013e9a:	4b42      	ldr	r3, [pc, #264]	; (8013fa4 <atanf+0x16c>)
 8013e9c:	429c      	cmp	r4, r3
 8013e9e:	dc4f      	bgt.n	8013f40 <atanf+0x108>
 8013ea0:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8013ea4:	429c      	cmp	r4, r3
 8013ea6:	dc41      	bgt.n	8013f2c <atanf+0xf4>
 8013ea8:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8013eac:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8013eb0:	eea0 7a27 	vfma.f32	s14, s0, s15
 8013eb4:	2300      	movs	r3, #0
 8013eb6:	ee30 0a27 	vadd.f32	s0, s0, s15
 8013eba:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8013ebe:	1c5a      	adds	r2, r3, #1
 8013ec0:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8013ec4:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8013fa8 <atanf+0x170>
 8013ec8:	eddf 5a38 	vldr	s11, [pc, #224]	; 8013fac <atanf+0x174>
 8013ecc:	ed9f 5a38 	vldr	s10, [pc, #224]	; 8013fb0 <atanf+0x178>
 8013ed0:	ee66 6a06 	vmul.f32	s13, s12, s12
 8013ed4:	eee6 5a87 	vfma.f32	s11, s13, s14
 8013ed8:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8013fb4 <atanf+0x17c>
 8013edc:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8013ee0:	eddf 5a35 	vldr	s11, [pc, #212]	; 8013fb8 <atanf+0x180>
 8013ee4:	eee7 5a26 	vfma.f32	s11, s14, s13
 8013ee8:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8013fbc <atanf+0x184>
 8013eec:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8013ef0:	eddf 5a33 	vldr	s11, [pc, #204]	; 8013fc0 <atanf+0x188>
 8013ef4:	eee7 5a26 	vfma.f32	s11, s14, s13
 8013ef8:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8013fc4 <atanf+0x18c>
 8013efc:	eea6 5a87 	vfma.f32	s10, s13, s14
 8013f00:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8013fc8 <atanf+0x190>
 8013f04:	eea5 7a26 	vfma.f32	s14, s10, s13
 8013f08:	ed9f 5a30 	vldr	s10, [pc, #192]	; 8013fcc <atanf+0x194>
 8013f0c:	eea7 5a26 	vfma.f32	s10, s14, s13
 8013f10:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8013fd0 <atanf+0x198>
 8013f14:	eea5 7a26 	vfma.f32	s14, s10, s13
 8013f18:	ee27 7a26 	vmul.f32	s14, s14, s13
 8013f1c:	eea5 7a86 	vfma.f32	s14, s11, s12
 8013f20:	ee27 7a87 	vmul.f32	s14, s15, s14
 8013f24:	d121      	bne.n	8013f6a <atanf+0x132>
 8013f26:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013f2a:	e794      	b.n	8013e56 <atanf+0x1e>
 8013f2c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8013f30:	ee30 7a67 	vsub.f32	s14, s0, s15
 8013f34:	ee30 0a27 	vadd.f32	s0, s0, s15
 8013f38:	2301      	movs	r3, #1
 8013f3a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8013f3e:	e7be      	b.n	8013ebe <atanf+0x86>
 8013f40:	4b24      	ldr	r3, [pc, #144]	; (8013fd4 <atanf+0x19c>)
 8013f42:	429c      	cmp	r4, r3
 8013f44:	dc0b      	bgt.n	8013f5e <atanf+0x126>
 8013f46:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8013f4a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8013f4e:	eea0 7a27 	vfma.f32	s14, s0, s15
 8013f52:	2302      	movs	r3, #2
 8013f54:	ee70 6a67 	vsub.f32	s13, s0, s15
 8013f58:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013f5c:	e7af      	b.n	8013ebe <atanf+0x86>
 8013f5e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8013f62:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8013f66:	2303      	movs	r3, #3
 8013f68:	e7a9      	b.n	8013ebe <atanf+0x86>
 8013f6a:	4a1b      	ldr	r2, [pc, #108]	; (8013fd8 <atanf+0x1a0>)
 8013f6c:	491b      	ldr	r1, [pc, #108]	; (8013fdc <atanf+0x1a4>)
 8013f6e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8013f72:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8013f76:	edd3 6a00 	vldr	s13, [r3]
 8013f7a:	ee37 7a66 	vsub.f32	s14, s14, s13
 8013f7e:	2d00      	cmp	r5, #0
 8013f80:	ee37 7a67 	vsub.f32	s14, s14, s15
 8013f84:	edd2 7a00 	vldr	s15, [r2]
 8013f88:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013f8c:	bfb8      	it	lt
 8013f8e:	eef1 7a67 	vneglt.f32	s15, s15
 8013f92:	e760      	b.n	8013e56 <atanf+0x1e>
 8013f94:	3fc90fdb 	.word	0x3fc90fdb
 8013f98:	bfc90fdb 	.word	0xbfc90fdb
 8013f9c:	3edfffff 	.word	0x3edfffff
 8013fa0:	7149f2ca 	.word	0x7149f2ca
 8013fa4:	3f97ffff 	.word	0x3f97ffff
 8013fa8:	3c8569d7 	.word	0x3c8569d7
 8013fac:	3d4bda59 	.word	0x3d4bda59
 8013fb0:	bd6ef16b 	.word	0xbd6ef16b
 8013fb4:	3d886b35 	.word	0x3d886b35
 8013fb8:	3dba2e6e 	.word	0x3dba2e6e
 8013fbc:	3e124925 	.word	0x3e124925
 8013fc0:	3eaaaaab 	.word	0x3eaaaaab
 8013fc4:	bd15a221 	.word	0xbd15a221
 8013fc8:	bd9d8795 	.word	0xbd9d8795
 8013fcc:	bde38e38 	.word	0xbde38e38
 8013fd0:	be4ccccd 	.word	0xbe4ccccd
 8013fd4:	401bffff 	.word	0x401bffff
 8013fd8:	0801520c 	.word	0x0801520c
 8013fdc:	0801521c 	.word	0x0801521c

08013fe0 <scalbnf>:
 8013fe0:	ee10 3a10 	vmov	r3, s0
 8013fe4:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8013fe8:	d02b      	beq.n	8014042 <scalbnf+0x62>
 8013fea:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8013fee:	d302      	bcc.n	8013ff6 <scalbnf+0x16>
 8013ff0:	ee30 0a00 	vadd.f32	s0, s0, s0
 8013ff4:	4770      	bx	lr
 8013ff6:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8013ffa:	d123      	bne.n	8014044 <scalbnf+0x64>
 8013ffc:	4b24      	ldr	r3, [pc, #144]	; (8014090 <scalbnf+0xb0>)
 8013ffe:	eddf 7a25 	vldr	s15, [pc, #148]	; 8014094 <scalbnf+0xb4>
 8014002:	4298      	cmp	r0, r3
 8014004:	ee20 0a27 	vmul.f32	s0, s0, s15
 8014008:	db17      	blt.n	801403a <scalbnf+0x5a>
 801400a:	ee10 3a10 	vmov	r3, s0
 801400e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8014012:	3a19      	subs	r2, #25
 8014014:	f24c 3150 	movw	r1, #50000	; 0xc350
 8014018:	4288      	cmp	r0, r1
 801401a:	dd15      	ble.n	8014048 <scalbnf+0x68>
 801401c:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8014098 <scalbnf+0xb8>
 8014020:	eddf 6a1e 	vldr	s13, [pc, #120]	; 801409c <scalbnf+0xbc>
 8014024:	ee10 3a10 	vmov	r3, s0
 8014028:	eeb0 7a67 	vmov.f32	s14, s15
 801402c:	2b00      	cmp	r3, #0
 801402e:	bfb8      	it	lt
 8014030:	eef0 7a66 	vmovlt.f32	s15, s13
 8014034:	ee27 0a87 	vmul.f32	s0, s15, s14
 8014038:	4770      	bx	lr
 801403a:	eddf 7a19 	vldr	s15, [pc, #100]	; 80140a0 <scalbnf+0xc0>
 801403e:	ee27 0a80 	vmul.f32	s0, s15, s0
 8014042:	4770      	bx	lr
 8014044:	0dd2      	lsrs	r2, r2, #23
 8014046:	e7e5      	b.n	8014014 <scalbnf+0x34>
 8014048:	4410      	add	r0, r2
 801404a:	28fe      	cmp	r0, #254	; 0xfe
 801404c:	dce6      	bgt.n	801401c <scalbnf+0x3c>
 801404e:	2800      	cmp	r0, #0
 8014050:	dd06      	ble.n	8014060 <scalbnf+0x80>
 8014052:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8014056:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 801405a:	ee00 3a10 	vmov	s0, r3
 801405e:	4770      	bx	lr
 8014060:	f110 0f16 	cmn.w	r0, #22
 8014064:	da09      	bge.n	801407a <scalbnf+0x9a>
 8014066:	eddf 7a0e 	vldr	s15, [pc, #56]	; 80140a0 <scalbnf+0xc0>
 801406a:	eddf 6a0e 	vldr	s13, [pc, #56]	; 80140a4 <scalbnf+0xc4>
 801406e:	ee10 3a10 	vmov	r3, s0
 8014072:	eeb0 7a67 	vmov.f32	s14, s15
 8014076:	2b00      	cmp	r3, #0
 8014078:	e7d9      	b.n	801402e <scalbnf+0x4e>
 801407a:	3019      	adds	r0, #25
 801407c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8014080:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8014084:	ed9f 0a08 	vldr	s0, [pc, #32]	; 80140a8 <scalbnf+0xc8>
 8014088:	ee07 3a90 	vmov	s15, r3
 801408c:	e7d7      	b.n	801403e <scalbnf+0x5e>
 801408e:	bf00      	nop
 8014090:	ffff3cb0 	.word	0xffff3cb0
 8014094:	4c000000 	.word	0x4c000000
 8014098:	7149f2ca 	.word	0x7149f2ca
 801409c:	f149f2ca 	.word	0xf149f2ca
 80140a0:	0da24260 	.word	0x0da24260
 80140a4:	8da24260 	.word	0x8da24260
 80140a8:	33000000 	.word	0x33000000

080140ac <with_errnof>:
 80140ac:	b513      	push	{r0, r1, r4, lr}
 80140ae:	4604      	mov	r4, r0
 80140b0:	ed8d 0a01 	vstr	s0, [sp, #4]
 80140b4:	f7fc ff8c 	bl	8010fd0 <__errno>
 80140b8:	ed9d 0a01 	vldr	s0, [sp, #4]
 80140bc:	6004      	str	r4, [r0, #0]
 80140be:	b002      	add	sp, #8
 80140c0:	bd10      	pop	{r4, pc}

080140c2 <xflowf>:
 80140c2:	b130      	cbz	r0, 80140d2 <xflowf+0x10>
 80140c4:	eef1 7a40 	vneg.f32	s15, s0
 80140c8:	ee27 0a80 	vmul.f32	s0, s15, s0
 80140cc:	2022      	movs	r0, #34	; 0x22
 80140ce:	f7ff bfed 	b.w	80140ac <with_errnof>
 80140d2:	eef0 7a40 	vmov.f32	s15, s0
 80140d6:	e7f7      	b.n	80140c8 <xflowf+0x6>

080140d8 <__math_uflowf>:
 80140d8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80140e0 <__math_uflowf+0x8>
 80140dc:	f7ff bff1 	b.w	80140c2 <xflowf>
 80140e0:	10000000 	.word	0x10000000

080140e4 <__math_oflowf>:
 80140e4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80140ec <__math_oflowf+0x8>
 80140e8:	f7ff bfeb 	b.w	80140c2 <xflowf>
 80140ec:	70000000 	.word	0x70000000

080140f0 <__kernel_rem_pio2f>:
 80140f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80140f4:	ed2d 8b04 	vpush	{d8-d9}
 80140f8:	b0d9      	sub	sp, #356	; 0x164
 80140fa:	4688      	mov	r8, r1
 80140fc:	9002      	str	r0, [sp, #8]
 80140fe:	49b8      	ldr	r1, [pc, #736]	; (80143e0 <__kernel_rem_pio2f+0x2f0>)
 8014100:	9866      	ldr	r0, [sp, #408]	; 0x198
 8014102:	9301      	str	r3, [sp, #4]
 8014104:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 8014108:	9901      	ldr	r1, [sp, #4]
 801410a:	9b67      	ldr	r3, [sp, #412]	; 0x19c
 801410c:	f101 3bff 	add.w	fp, r1, #4294967295
 8014110:	1d11      	adds	r1, r2, #4
 8014112:	db25      	blt.n	8014160 <__kernel_rem_pio2f+0x70>
 8014114:	1ed0      	subs	r0, r2, #3
 8014116:	bf48      	it	mi
 8014118:	1d10      	addmi	r0, r2, #4
 801411a:	10c0      	asrs	r0, r0, #3
 801411c:	1c45      	adds	r5, r0, #1
 801411e:	00e9      	lsls	r1, r5, #3
 8014120:	eba0 070b 	sub.w	r7, r0, fp
 8014124:	ed9f 7ab2 	vldr	s14, [pc, #712]	; 80143f0 <__kernel_rem_pio2f+0x300>
 8014128:	9103      	str	r1, [sp, #12]
 801412a:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 801412e:	eb0a 0c0b 	add.w	ip, sl, fp
 8014132:	ae1c      	add	r6, sp, #112	; 0x70
 8014134:	eb03 0e87 	add.w	lr, r3, r7, lsl #2
 8014138:	2400      	movs	r4, #0
 801413a:	4564      	cmp	r4, ip
 801413c:	dd12      	ble.n	8014164 <__kernel_rem_pio2f+0x74>
 801413e:	9901      	ldr	r1, [sp, #4]
 8014140:	ac1c      	add	r4, sp, #112	; 0x70
 8014142:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8014146:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 801414a:	f04f 0c00 	mov.w	ip, #0
 801414e:	45d4      	cmp	ip, sl
 8014150:	dc27      	bgt.n	80141a2 <__kernel_rem_pio2f+0xb2>
 8014152:	f8dd e008 	ldr.w	lr, [sp, #8]
 8014156:	eddf 7aa6 	vldr	s15, [pc, #664]	; 80143f0 <__kernel_rem_pio2f+0x300>
 801415a:	4627      	mov	r7, r4
 801415c:	2600      	movs	r6, #0
 801415e:	e016      	b.n	801418e <__kernel_rem_pio2f+0x9e>
 8014160:	2000      	movs	r0, #0
 8014162:	e7db      	b.n	801411c <__kernel_rem_pio2f+0x2c>
 8014164:	42e7      	cmn	r7, r4
 8014166:	bf5d      	ittte	pl
 8014168:	f85e 1024 	ldrpl.w	r1, [lr, r4, lsl #2]
 801416c:	ee07 1a90 	vmovpl	s15, r1
 8014170:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8014174:	eef0 7a47 	vmovmi.f32	s15, s14
 8014178:	ece6 7a01 	vstmia	r6!, {s15}
 801417c:	3401      	adds	r4, #1
 801417e:	e7dc      	b.n	801413a <__kernel_rem_pio2f+0x4a>
 8014180:	ecfe 6a01 	vldmia	lr!, {s13}
 8014184:	ed97 7a00 	vldr	s14, [r7]
 8014188:	eee6 7a87 	vfma.f32	s15, s13, s14
 801418c:	3601      	adds	r6, #1
 801418e:	455e      	cmp	r6, fp
 8014190:	f1a7 0704 	sub.w	r7, r7, #4
 8014194:	ddf4      	ble.n	8014180 <__kernel_rem_pio2f+0x90>
 8014196:	ece9 7a01 	vstmia	r9!, {s15}
 801419a:	f10c 0c01 	add.w	ip, ip, #1
 801419e:	3404      	adds	r4, #4
 80141a0:	e7d5      	b.n	801414e <__kernel_rem_pio2f+0x5e>
 80141a2:	a908      	add	r1, sp, #32
 80141a4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80141a8:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 80141ac:	eddf 8a8f 	vldr	s17, [pc, #572]	; 80143ec <__kernel_rem_pio2f+0x2fc>
 80141b0:	ed9f 9a8d 	vldr	s18, [pc, #564]	; 80143e8 <__kernel_rem_pio2f+0x2f8>
 80141b4:	9105      	str	r1, [sp, #20]
 80141b6:	9304      	str	r3, [sp, #16]
 80141b8:	4656      	mov	r6, sl
 80141ba:	00b3      	lsls	r3, r6, #2
 80141bc:	9306      	str	r3, [sp, #24]
 80141be:	ab58      	add	r3, sp, #352	; 0x160
 80141c0:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 80141c4:	ac08      	add	r4, sp, #32
 80141c6:	ab44      	add	r3, sp, #272	; 0x110
 80141c8:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 80141cc:	46a4      	mov	ip, r4
 80141ce:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 80141d2:	4637      	mov	r7, r6
 80141d4:	2f00      	cmp	r7, #0
 80141d6:	f1a0 0004 	sub.w	r0, r0, #4
 80141da:	dc4a      	bgt.n	8014272 <__kernel_rem_pio2f+0x182>
 80141dc:	4628      	mov	r0, r5
 80141de:	9207      	str	r2, [sp, #28]
 80141e0:	f7ff fefe 	bl	8013fe0 <scalbnf>
 80141e4:	eeb0 8a40 	vmov.f32	s16, s0
 80141e8:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 80141ec:	ee28 0a00 	vmul.f32	s0, s16, s0
 80141f0:	f000 f9f0 	bl	80145d4 <floorf>
 80141f4:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 80141f8:	eea0 8a67 	vfms.f32	s16, s0, s15
 80141fc:	2d00      	cmp	r5, #0
 80141fe:	9a07      	ldr	r2, [sp, #28]
 8014200:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8014204:	ee17 9a90 	vmov	r9, s15
 8014208:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801420c:	ee38 8a67 	vsub.f32	s16, s16, s15
 8014210:	dd41      	ble.n	8014296 <__kernel_rem_pio2f+0x1a6>
 8014212:	f106 3cff 	add.w	ip, r6, #4294967295
 8014216:	ab08      	add	r3, sp, #32
 8014218:	f1c5 0e08 	rsb	lr, r5, #8
 801421c:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 8014220:	fa47 f00e 	asr.w	r0, r7, lr
 8014224:	4481      	add	r9, r0
 8014226:	fa00 f00e 	lsl.w	r0, r0, lr
 801422a:	1a3f      	subs	r7, r7, r0
 801422c:	f1c5 0007 	rsb	r0, r5, #7
 8014230:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 8014234:	4107      	asrs	r7, r0
 8014236:	2f00      	cmp	r7, #0
 8014238:	dd3c      	ble.n	80142b4 <__kernel_rem_pio2f+0x1c4>
 801423a:	f04f 0e00 	mov.w	lr, #0
 801423e:	f109 0901 	add.w	r9, r9, #1
 8014242:	4671      	mov	r1, lr
 8014244:	4576      	cmp	r6, lr
 8014246:	dc67      	bgt.n	8014318 <__kernel_rem_pio2f+0x228>
 8014248:	2d00      	cmp	r5, #0
 801424a:	dd03      	ble.n	8014254 <__kernel_rem_pio2f+0x164>
 801424c:	2d01      	cmp	r5, #1
 801424e:	d074      	beq.n	801433a <__kernel_rem_pio2f+0x24a>
 8014250:	2d02      	cmp	r5, #2
 8014252:	d07b      	beq.n	801434c <__kernel_rem_pio2f+0x25c>
 8014254:	2f02      	cmp	r7, #2
 8014256:	d12d      	bne.n	80142b4 <__kernel_rem_pio2f+0x1c4>
 8014258:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801425c:	ee30 8a48 	vsub.f32	s16, s0, s16
 8014260:	b341      	cbz	r1, 80142b4 <__kernel_rem_pio2f+0x1c4>
 8014262:	4628      	mov	r0, r5
 8014264:	9207      	str	r2, [sp, #28]
 8014266:	f7ff febb 	bl	8013fe0 <scalbnf>
 801426a:	9a07      	ldr	r2, [sp, #28]
 801426c:	ee38 8a40 	vsub.f32	s16, s16, s0
 8014270:	e020      	b.n	80142b4 <__kernel_rem_pio2f+0x1c4>
 8014272:	ee60 7a28 	vmul.f32	s15, s0, s17
 8014276:	3f01      	subs	r7, #1
 8014278:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801427c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014280:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8014284:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8014288:	ecac 0a01 	vstmia	ip!, {s0}
 801428c:	ed90 0a00 	vldr	s0, [r0]
 8014290:	ee37 0a80 	vadd.f32	s0, s15, s0
 8014294:	e79e      	b.n	80141d4 <__kernel_rem_pio2f+0xe4>
 8014296:	d105      	bne.n	80142a4 <__kernel_rem_pio2f+0x1b4>
 8014298:	1e70      	subs	r0, r6, #1
 801429a:	ab08      	add	r3, sp, #32
 801429c:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 80142a0:	11ff      	asrs	r7, r7, #7
 80142a2:	e7c8      	b.n	8014236 <__kernel_rem_pio2f+0x146>
 80142a4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80142a8:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80142ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80142b0:	da30      	bge.n	8014314 <__kernel_rem_pio2f+0x224>
 80142b2:	2700      	movs	r7, #0
 80142b4:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80142b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80142bc:	f040 809a 	bne.w	80143f4 <__kernel_rem_pio2f+0x304>
 80142c0:	1e74      	subs	r4, r6, #1
 80142c2:	46a4      	mov	ip, r4
 80142c4:	2100      	movs	r1, #0
 80142c6:	45d4      	cmp	ip, sl
 80142c8:	da47      	bge.n	801435a <__kernel_rem_pio2f+0x26a>
 80142ca:	2900      	cmp	r1, #0
 80142cc:	d063      	beq.n	8014396 <__kernel_rem_pio2f+0x2a6>
 80142ce:	ab08      	add	r3, sp, #32
 80142d0:	3d08      	subs	r5, #8
 80142d2:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80142d6:	2b00      	cmp	r3, #0
 80142d8:	d07f      	beq.n	80143da <__kernel_rem_pio2f+0x2ea>
 80142da:	4628      	mov	r0, r5
 80142dc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80142e0:	f7ff fe7e 	bl	8013fe0 <scalbnf>
 80142e4:	1c63      	adds	r3, r4, #1
 80142e6:	aa44      	add	r2, sp, #272	; 0x110
 80142e8:	ed9f 7a40 	vldr	s14, [pc, #256]	; 80143ec <__kernel_rem_pio2f+0x2fc>
 80142ec:	0099      	lsls	r1, r3, #2
 80142ee:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80142f2:	4623      	mov	r3, r4
 80142f4:	2b00      	cmp	r3, #0
 80142f6:	f280 80ad 	bge.w	8014454 <__kernel_rem_pio2f+0x364>
 80142fa:	4623      	mov	r3, r4
 80142fc:	2b00      	cmp	r3, #0
 80142fe:	f2c0 80cb 	blt.w	8014498 <__kernel_rem_pio2f+0x3a8>
 8014302:	aa44      	add	r2, sp, #272	; 0x110
 8014304:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8014308:	4e36      	ldr	r6, [pc, #216]	; (80143e4 <__kernel_rem_pio2f+0x2f4>)
 801430a:	eddf 7a39 	vldr	s15, [pc, #228]	; 80143f0 <__kernel_rem_pio2f+0x300>
 801430e:	2000      	movs	r0, #0
 8014310:	1ae2      	subs	r2, r4, r3
 8014312:	e0b6      	b.n	8014482 <__kernel_rem_pio2f+0x392>
 8014314:	2702      	movs	r7, #2
 8014316:	e790      	b.n	801423a <__kernel_rem_pio2f+0x14a>
 8014318:	6820      	ldr	r0, [r4, #0]
 801431a:	b949      	cbnz	r1, 8014330 <__kernel_rem_pio2f+0x240>
 801431c:	b118      	cbz	r0, 8014326 <__kernel_rem_pio2f+0x236>
 801431e:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8014322:	6020      	str	r0, [r4, #0]
 8014324:	2001      	movs	r0, #1
 8014326:	f10e 0e01 	add.w	lr, lr, #1
 801432a:	3404      	adds	r4, #4
 801432c:	4601      	mov	r1, r0
 801432e:	e789      	b.n	8014244 <__kernel_rem_pio2f+0x154>
 8014330:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 8014334:	6020      	str	r0, [r4, #0]
 8014336:	4608      	mov	r0, r1
 8014338:	e7f5      	b.n	8014326 <__kernel_rem_pio2f+0x236>
 801433a:	1e74      	subs	r4, r6, #1
 801433c:	ab08      	add	r3, sp, #32
 801433e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8014342:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8014346:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801434a:	e783      	b.n	8014254 <__kernel_rem_pio2f+0x164>
 801434c:	1e74      	subs	r4, r6, #1
 801434e:	ab08      	add	r3, sp, #32
 8014350:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8014354:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8014358:	e7f5      	b.n	8014346 <__kernel_rem_pio2f+0x256>
 801435a:	ab08      	add	r3, sp, #32
 801435c:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
 8014360:	f10c 3cff 	add.w	ip, ip, #4294967295
 8014364:	4301      	orrs	r1, r0
 8014366:	e7ae      	b.n	80142c6 <__kernel_rem_pio2f+0x1d6>
 8014368:	3001      	adds	r0, #1
 801436a:	f854 7d04 	ldr.w	r7, [r4, #-4]!
 801436e:	2f00      	cmp	r7, #0
 8014370:	d0fa      	beq.n	8014368 <__kernel_rem_pio2f+0x278>
 8014372:	9b06      	ldr	r3, [sp, #24]
 8014374:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8014378:	eb0d 0403 	add.w	r4, sp, r3
 801437c:	9b01      	ldr	r3, [sp, #4]
 801437e:	18f7      	adds	r7, r6, r3
 8014380:	ab1c      	add	r3, sp, #112	; 0x70
 8014382:	f106 0c01 	add.w	ip, r6, #1
 8014386:	3c4c      	subs	r4, #76	; 0x4c
 8014388:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801438c:	4430      	add	r0, r6
 801438e:	4560      	cmp	r0, ip
 8014390:	da04      	bge.n	801439c <__kernel_rem_pio2f+0x2ac>
 8014392:	4606      	mov	r6, r0
 8014394:	e711      	b.n	80141ba <__kernel_rem_pio2f+0xca>
 8014396:	9c05      	ldr	r4, [sp, #20]
 8014398:	2001      	movs	r0, #1
 801439a:	e7e6      	b.n	801436a <__kernel_rem_pio2f+0x27a>
 801439c:	9b04      	ldr	r3, [sp, #16]
 801439e:	f8dd e008 	ldr.w	lr, [sp, #8]
 80143a2:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 80143a6:	9306      	str	r3, [sp, #24]
 80143a8:	ee07 3a90 	vmov	s15, r3
 80143ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80143b0:	2600      	movs	r6, #0
 80143b2:	ece7 7a01 	vstmia	r7!, {s15}
 80143b6:	eddf 7a0e 	vldr	s15, [pc, #56]	; 80143f0 <__kernel_rem_pio2f+0x300>
 80143ba:	46b9      	mov	r9, r7
 80143bc:	455e      	cmp	r6, fp
 80143be:	dd04      	ble.n	80143ca <__kernel_rem_pio2f+0x2da>
 80143c0:	ece4 7a01 	vstmia	r4!, {s15}
 80143c4:	f10c 0c01 	add.w	ip, ip, #1
 80143c8:	e7e1      	b.n	801438e <__kernel_rem_pio2f+0x29e>
 80143ca:	ecfe 6a01 	vldmia	lr!, {s13}
 80143ce:	ed39 7a01 	vldmdb	r9!, {s14}
 80143d2:	3601      	adds	r6, #1
 80143d4:	eee6 7a87 	vfma.f32	s15, s13, s14
 80143d8:	e7f0      	b.n	80143bc <__kernel_rem_pio2f+0x2cc>
 80143da:	3c01      	subs	r4, #1
 80143dc:	e777      	b.n	80142ce <__kernel_rem_pio2f+0x1de>
 80143de:	bf00      	nop
 80143e0:	08015258 	.word	0x08015258
 80143e4:	0801522c 	.word	0x0801522c
 80143e8:	43800000 	.word	0x43800000
 80143ec:	3b800000 	.word	0x3b800000
 80143f0:	00000000 	.word	0x00000000
 80143f4:	9b03      	ldr	r3, [sp, #12]
 80143f6:	eeb0 0a48 	vmov.f32	s0, s16
 80143fa:	1a98      	subs	r0, r3, r2
 80143fc:	f7ff fdf0 	bl	8013fe0 <scalbnf>
 8014400:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 80143e8 <__kernel_rem_pio2f+0x2f8>
 8014404:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8014408:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801440c:	db19      	blt.n	8014442 <__kernel_rem_pio2f+0x352>
 801440e:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 80143ec <__kernel_rem_pio2f+0x2fc>
 8014412:	ee60 7a27 	vmul.f32	s15, s0, s15
 8014416:	aa08      	add	r2, sp, #32
 8014418:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801441c:	1c74      	adds	r4, r6, #1
 801441e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014422:	3508      	adds	r5, #8
 8014424:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8014428:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801442c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8014430:	ee10 3a10 	vmov	r3, s0
 8014434:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8014438:	ee17 3a90 	vmov	r3, s15
 801443c:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8014440:	e74b      	b.n	80142da <__kernel_rem_pio2f+0x1ea>
 8014442:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8014446:	aa08      	add	r2, sp, #32
 8014448:	ee10 3a10 	vmov	r3, s0
 801444c:	4634      	mov	r4, r6
 801444e:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8014452:	e742      	b.n	80142da <__kernel_rem_pio2f+0x1ea>
 8014454:	a808      	add	r0, sp, #32
 8014456:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 801445a:	9001      	str	r0, [sp, #4]
 801445c:	ee07 0a90 	vmov	s15, r0
 8014460:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014464:	3b01      	subs	r3, #1
 8014466:	ee67 7a80 	vmul.f32	s15, s15, s0
 801446a:	ee20 0a07 	vmul.f32	s0, s0, s14
 801446e:	ed62 7a01 	vstmdb	r2!, {s15}
 8014472:	e73f      	b.n	80142f4 <__kernel_rem_pio2f+0x204>
 8014474:	ecf6 6a01 	vldmia	r6!, {s13}
 8014478:	ecb5 7a01 	vldmia	r5!, {s14}
 801447c:	eee6 7a87 	vfma.f32	s15, s13, s14
 8014480:	3001      	adds	r0, #1
 8014482:	4550      	cmp	r0, sl
 8014484:	dc01      	bgt.n	801448a <__kernel_rem_pio2f+0x39a>
 8014486:	4290      	cmp	r0, r2
 8014488:	ddf4      	ble.n	8014474 <__kernel_rem_pio2f+0x384>
 801448a:	a858      	add	r0, sp, #352	; 0x160
 801448c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8014490:	ed42 7a28 	vstr	s15, [r2, #-160]	; 0xffffff60
 8014494:	3b01      	subs	r3, #1
 8014496:	e731      	b.n	80142fc <__kernel_rem_pio2f+0x20c>
 8014498:	9b66      	ldr	r3, [sp, #408]	; 0x198
 801449a:	2b02      	cmp	r3, #2
 801449c:	dc09      	bgt.n	80144b2 <__kernel_rem_pio2f+0x3c2>
 801449e:	2b00      	cmp	r3, #0
 80144a0:	dc2b      	bgt.n	80144fa <__kernel_rem_pio2f+0x40a>
 80144a2:	d044      	beq.n	801452e <__kernel_rem_pio2f+0x43e>
 80144a4:	f009 0007 	and.w	r0, r9, #7
 80144a8:	b059      	add	sp, #356	; 0x164
 80144aa:	ecbd 8b04 	vpop	{d8-d9}
 80144ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80144b2:	9b66      	ldr	r3, [sp, #408]	; 0x198
 80144b4:	2b03      	cmp	r3, #3
 80144b6:	d1f5      	bne.n	80144a4 <__kernel_rem_pio2f+0x3b4>
 80144b8:	aa30      	add	r2, sp, #192	; 0xc0
 80144ba:	1f0b      	subs	r3, r1, #4
 80144bc:	4413      	add	r3, r2
 80144be:	461a      	mov	r2, r3
 80144c0:	4620      	mov	r0, r4
 80144c2:	2800      	cmp	r0, #0
 80144c4:	f1a2 0204 	sub.w	r2, r2, #4
 80144c8:	dc52      	bgt.n	8014570 <__kernel_rem_pio2f+0x480>
 80144ca:	4622      	mov	r2, r4
 80144cc:	2a01      	cmp	r2, #1
 80144ce:	f1a3 0304 	sub.w	r3, r3, #4
 80144d2:	dc5d      	bgt.n	8014590 <__kernel_rem_pio2f+0x4a0>
 80144d4:	ab30      	add	r3, sp, #192	; 0xc0
 80144d6:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 80143f0 <__kernel_rem_pio2f+0x300>
 80144da:	440b      	add	r3, r1
 80144dc:	2c01      	cmp	r4, #1
 80144de:	dc67      	bgt.n	80145b0 <__kernel_rem_pio2f+0x4c0>
 80144e0:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 80144e4:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 80144e8:	2f00      	cmp	r7, #0
 80144ea:	d167      	bne.n	80145bc <__kernel_rem_pio2f+0x4cc>
 80144ec:	edc8 6a00 	vstr	s13, [r8]
 80144f0:	ed88 7a01 	vstr	s14, [r8, #4]
 80144f4:	edc8 7a02 	vstr	s15, [r8, #8]
 80144f8:	e7d4      	b.n	80144a4 <__kernel_rem_pio2f+0x3b4>
 80144fa:	ab30      	add	r3, sp, #192	; 0xc0
 80144fc:	ed1f 7a44 	vldr	s14, [pc, #-272]	; 80143f0 <__kernel_rem_pio2f+0x300>
 8014500:	440b      	add	r3, r1
 8014502:	4622      	mov	r2, r4
 8014504:	2a00      	cmp	r2, #0
 8014506:	da24      	bge.n	8014552 <__kernel_rem_pio2f+0x462>
 8014508:	b34f      	cbz	r7, 801455e <__kernel_rem_pio2f+0x46e>
 801450a:	eef1 7a47 	vneg.f32	s15, s14
 801450e:	edc8 7a00 	vstr	s15, [r8]
 8014512:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 8014516:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801451a:	aa31      	add	r2, sp, #196	; 0xc4
 801451c:	2301      	movs	r3, #1
 801451e:	429c      	cmp	r4, r3
 8014520:	da20      	bge.n	8014564 <__kernel_rem_pio2f+0x474>
 8014522:	b10f      	cbz	r7, 8014528 <__kernel_rem_pio2f+0x438>
 8014524:	eef1 7a67 	vneg.f32	s15, s15
 8014528:	edc8 7a01 	vstr	s15, [r8, #4]
 801452c:	e7ba      	b.n	80144a4 <__kernel_rem_pio2f+0x3b4>
 801452e:	ab30      	add	r3, sp, #192	; 0xc0
 8014530:	ed5f 7a51 	vldr	s15, [pc, #-324]	; 80143f0 <__kernel_rem_pio2f+0x300>
 8014534:	440b      	add	r3, r1
 8014536:	2c00      	cmp	r4, #0
 8014538:	da05      	bge.n	8014546 <__kernel_rem_pio2f+0x456>
 801453a:	b10f      	cbz	r7, 8014540 <__kernel_rem_pio2f+0x450>
 801453c:	eef1 7a67 	vneg.f32	s15, s15
 8014540:	edc8 7a00 	vstr	s15, [r8]
 8014544:	e7ae      	b.n	80144a4 <__kernel_rem_pio2f+0x3b4>
 8014546:	ed33 7a01 	vldmdb	r3!, {s14}
 801454a:	3c01      	subs	r4, #1
 801454c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014550:	e7f1      	b.n	8014536 <__kernel_rem_pio2f+0x446>
 8014552:	ed73 7a01 	vldmdb	r3!, {s15}
 8014556:	3a01      	subs	r2, #1
 8014558:	ee37 7a27 	vadd.f32	s14, s14, s15
 801455c:	e7d2      	b.n	8014504 <__kernel_rem_pio2f+0x414>
 801455e:	eef0 7a47 	vmov.f32	s15, s14
 8014562:	e7d4      	b.n	801450e <__kernel_rem_pio2f+0x41e>
 8014564:	ecb2 7a01 	vldmia	r2!, {s14}
 8014568:	3301      	adds	r3, #1
 801456a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801456e:	e7d6      	b.n	801451e <__kernel_rem_pio2f+0x42e>
 8014570:	edd2 7a00 	vldr	s15, [r2]
 8014574:	edd2 6a01 	vldr	s13, [r2, #4]
 8014578:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801457c:	3801      	subs	r0, #1
 801457e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014582:	ed82 7a00 	vstr	s14, [r2]
 8014586:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801458a:	edc2 7a01 	vstr	s15, [r2, #4]
 801458e:	e798      	b.n	80144c2 <__kernel_rem_pio2f+0x3d2>
 8014590:	edd3 7a00 	vldr	s15, [r3]
 8014594:	edd3 6a01 	vldr	s13, [r3, #4]
 8014598:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801459c:	3a01      	subs	r2, #1
 801459e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80145a2:	ed83 7a00 	vstr	s14, [r3]
 80145a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80145aa:	edc3 7a01 	vstr	s15, [r3, #4]
 80145ae:	e78d      	b.n	80144cc <__kernel_rem_pio2f+0x3dc>
 80145b0:	ed33 7a01 	vldmdb	r3!, {s14}
 80145b4:	3c01      	subs	r4, #1
 80145b6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80145ba:	e78f      	b.n	80144dc <__kernel_rem_pio2f+0x3ec>
 80145bc:	eef1 6a66 	vneg.f32	s13, s13
 80145c0:	eeb1 7a47 	vneg.f32	s14, s14
 80145c4:	edc8 6a00 	vstr	s13, [r8]
 80145c8:	ed88 7a01 	vstr	s14, [r8, #4]
 80145cc:	eef1 7a67 	vneg.f32	s15, s15
 80145d0:	e790      	b.n	80144f4 <__kernel_rem_pio2f+0x404>
 80145d2:	bf00      	nop

080145d4 <floorf>:
 80145d4:	ee10 3a10 	vmov	r3, s0
 80145d8:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80145dc:	3a7f      	subs	r2, #127	; 0x7f
 80145de:	2a16      	cmp	r2, #22
 80145e0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80145e4:	dc2a      	bgt.n	801463c <floorf+0x68>
 80145e6:	2a00      	cmp	r2, #0
 80145e8:	da11      	bge.n	801460e <floorf+0x3a>
 80145ea:	eddf 7a18 	vldr	s15, [pc, #96]	; 801464c <floorf+0x78>
 80145ee:	ee30 0a27 	vadd.f32	s0, s0, s15
 80145f2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80145f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80145fa:	dd05      	ble.n	8014608 <floorf+0x34>
 80145fc:	2b00      	cmp	r3, #0
 80145fe:	da23      	bge.n	8014648 <floorf+0x74>
 8014600:	4a13      	ldr	r2, [pc, #76]	; (8014650 <floorf+0x7c>)
 8014602:	2900      	cmp	r1, #0
 8014604:	bf18      	it	ne
 8014606:	4613      	movne	r3, r2
 8014608:	ee00 3a10 	vmov	s0, r3
 801460c:	4770      	bx	lr
 801460e:	4911      	ldr	r1, [pc, #68]	; (8014654 <floorf+0x80>)
 8014610:	4111      	asrs	r1, r2
 8014612:	420b      	tst	r3, r1
 8014614:	d0fa      	beq.n	801460c <floorf+0x38>
 8014616:	eddf 7a0d 	vldr	s15, [pc, #52]	; 801464c <floorf+0x78>
 801461a:	ee30 0a27 	vadd.f32	s0, s0, s15
 801461e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8014622:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014626:	ddef      	ble.n	8014608 <floorf+0x34>
 8014628:	2b00      	cmp	r3, #0
 801462a:	bfbe      	ittt	lt
 801462c:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8014630:	fa40 f202 	asrlt.w	r2, r0, r2
 8014634:	189b      	addlt	r3, r3, r2
 8014636:	ea23 0301 	bic.w	r3, r3, r1
 801463a:	e7e5      	b.n	8014608 <floorf+0x34>
 801463c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8014640:	d3e4      	bcc.n	801460c <floorf+0x38>
 8014642:	ee30 0a00 	vadd.f32	s0, s0, s0
 8014646:	4770      	bx	lr
 8014648:	2300      	movs	r3, #0
 801464a:	e7dd      	b.n	8014608 <floorf+0x34>
 801464c:	7149f2ca 	.word	0x7149f2ca
 8014650:	bf800000 	.word	0xbf800000
 8014654:	007fffff 	.word	0x007fffff

08014658 <_init>:
 8014658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801465a:	bf00      	nop
 801465c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801465e:	bc08      	pop	{r3}
 8014660:	469e      	mov	lr, r3
 8014662:	4770      	bx	lr

08014664 <_fini>:
 8014664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014666:	bf00      	nop
 8014668:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801466a:	bc08      	pop	{r3}
 801466c:	469e      	mov	lr, r3
 801466e:	4770      	bx	lr
