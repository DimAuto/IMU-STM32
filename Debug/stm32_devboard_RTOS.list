
stm32_devboard_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014250  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c34  08014410  08014410  00024410  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015044  08015044  000301f0  2**0
                  CONTENTS
  4 .ARM          00000008  08015044  08015044  00025044  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801504c  0801504c  000301f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801504c  0801504c  0002504c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015050  08015050  00025050  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  08015054  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000615c  200001f0  08015244  000301f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000634c  08015244  0003634c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00028ba3  00000000  00000000  00030220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000571e  00000000  00000000  00058dc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000021a0  00000000  00000000  0005e4e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001f68  00000000  00000000  00060688  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00030a14  00000000  00000000  000625f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00028a40  00000000  00000000  00093004  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011d764  00000000  00000000  000bba44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001d91a8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a3cc  00000000  00000000  001d91f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001f0 	.word	0x200001f0
 80001dc:	00000000 	.word	0x00000000
 80001e0:	080143f8 	.word	0x080143f8

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001f4 	.word	0x200001f4
 80001fc:	080143f8 	.word	0x080143f8

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_uldivmod>:
 8000bd8:	b953      	cbnz	r3, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bda:	b94a      	cbnz	r2, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	bf08      	it	eq
 8000be0:	2800      	cmpeq	r0, #0
 8000be2:	bf1c      	itt	ne
 8000be4:	f04f 31ff 	movne.w	r1, #4294967295
 8000be8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bec:	f000 b974 	b.w	8000ed8 <__aeabi_idiv0>
 8000bf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf8:	f000 f806 	bl	8000c08 <__udivmoddi4>
 8000bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c04:	b004      	add	sp, #16
 8000c06:	4770      	bx	lr

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9d08      	ldr	r5, [sp, #32]
 8000c0e:	4604      	mov	r4, r0
 8000c10:	468e      	mov	lr, r1
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d14d      	bne.n	8000cb2 <__udivmoddi4+0xaa>
 8000c16:	428a      	cmp	r2, r1
 8000c18:	4694      	mov	ip, r2
 8000c1a:	d969      	bls.n	8000cf0 <__udivmoddi4+0xe8>
 8000c1c:	fab2 f282 	clz	r2, r2
 8000c20:	b152      	cbz	r2, 8000c38 <__udivmoddi4+0x30>
 8000c22:	fa01 f302 	lsl.w	r3, r1, r2
 8000c26:	f1c2 0120 	rsb	r1, r2, #32
 8000c2a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c2e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c32:	ea41 0e03 	orr.w	lr, r1, r3
 8000c36:	4094      	lsls	r4, r2
 8000c38:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c3c:	0c21      	lsrs	r1, r4, #16
 8000c3e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c42:	fa1f f78c 	uxth.w	r7, ip
 8000c46:	fb08 e316 	mls	r3, r8, r6, lr
 8000c4a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c4e:	fb06 f107 	mul.w	r1, r6, r7
 8000c52:	4299      	cmp	r1, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x64>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c5e:	f080 811f 	bcs.w	8000ea0 <__udivmoddi4+0x298>
 8000c62:	4299      	cmp	r1, r3
 8000c64:	f240 811c 	bls.w	8000ea0 <__udivmoddi4+0x298>
 8000c68:	3e02      	subs	r6, #2
 8000c6a:	4463      	add	r3, ip
 8000c6c:	1a5b      	subs	r3, r3, r1
 8000c6e:	b2a4      	uxth	r4, r4
 8000c70:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c74:	fb08 3310 	mls	r3, r8, r0, r3
 8000c78:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c7c:	fb00 f707 	mul.w	r7, r0, r7
 8000c80:	42a7      	cmp	r7, r4
 8000c82:	d90a      	bls.n	8000c9a <__udivmoddi4+0x92>
 8000c84:	eb1c 0404 	adds.w	r4, ip, r4
 8000c88:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c8c:	f080 810a 	bcs.w	8000ea4 <__udivmoddi4+0x29c>
 8000c90:	42a7      	cmp	r7, r4
 8000c92:	f240 8107 	bls.w	8000ea4 <__udivmoddi4+0x29c>
 8000c96:	4464      	add	r4, ip
 8000c98:	3802      	subs	r0, #2
 8000c9a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c9e:	1be4      	subs	r4, r4, r7
 8000ca0:	2600      	movs	r6, #0
 8000ca2:	b11d      	cbz	r5, 8000cac <__udivmoddi4+0xa4>
 8000ca4:	40d4      	lsrs	r4, r2
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cac:	4631      	mov	r1, r6
 8000cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d909      	bls.n	8000cca <__udivmoddi4+0xc2>
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	f000 80ef 	beq.w	8000e9a <__udivmoddi4+0x292>
 8000cbc:	2600      	movs	r6, #0
 8000cbe:	e9c5 0100 	strd	r0, r1, [r5]
 8000cc2:	4630      	mov	r0, r6
 8000cc4:	4631      	mov	r1, r6
 8000cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cca:	fab3 f683 	clz	r6, r3
 8000cce:	2e00      	cmp	r6, #0
 8000cd0:	d14a      	bne.n	8000d68 <__udivmoddi4+0x160>
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d302      	bcc.n	8000cdc <__udivmoddi4+0xd4>
 8000cd6:	4282      	cmp	r2, r0
 8000cd8:	f200 80f9 	bhi.w	8000ece <__udivmoddi4+0x2c6>
 8000cdc:	1a84      	subs	r4, r0, r2
 8000cde:	eb61 0303 	sbc.w	r3, r1, r3
 8000ce2:	2001      	movs	r0, #1
 8000ce4:	469e      	mov	lr, r3
 8000ce6:	2d00      	cmp	r5, #0
 8000ce8:	d0e0      	beq.n	8000cac <__udivmoddi4+0xa4>
 8000cea:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cee:	e7dd      	b.n	8000cac <__udivmoddi4+0xa4>
 8000cf0:	b902      	cbnz	r2, 8000cf4 <__udivmoddi4+0xec>
 8000cf2:	deff      	udf	#255	; 0xff
 8000cf4:	fab2 f282 	clz	r2, r2
 8000cf8:	2a00      	cmp	r2, #0
 8000cfa:	f040 8092 	bne.w	8000e22 <__udivmoddi4+0x21a>
 8000cfe:	eba1 010c 	sub.w	r1, r1, ip
 8000d02:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d06:	fa1f fe8c 	uxth.w	lr, ip
 8000d0a:	2601      	movs	r6, #1
 8000d0c:	0c20      	lsrs	r0, r4, #16
 8000d0e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d12:	fb07 1113 	mls	r1, r7, r3, r1
 8000d16:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d1a:	fb0e f003 	mul.w	r0, lr, r3
 8000d1e:	4288      	cmp	r0, r1
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x12c>
 8000d22:	eb1c 0101 	adds.w	r1, ip, r1
 8000d26:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x12a>
 8000d2c:	4288      	cmp	r0, r1
 8000d2e:	f200 80cb 	bhi.w	8000ec8 <__udivmoddi4+0x2c0>
 8000d32:	4643      	mov	r3, r8
 8000d34:	1a09      	subs	r1, r1, r0
 8000d36:	b2a4      	uxth	r4, r4
 8000d38:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d3c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d40:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d44:	fb0e fe00 	mul.w	lr, lr, r0
 8000d48:	45a6      	cmp	lr, r4
 8000d4a:	d908      	bls.n	8000d5e <__udivmoddi4+0x156>
 8000d4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d50:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d54:	d202      	bcs.n	8000d5c <__udivmoddi4+0x154>
 8000d56:	45a6      	cmp	lr, r4
 8000d58:	f200 80bb 	bhi.w	8000ed2 <__udivmoddi4+0x2ca>
 8000d5c:	4608      	mov	r0, r1
 8000d5e:	eba4 040e 	sub.w	r4, r4, lr
 8000d62:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d66:	e79c      	b.n	8000ca2 <__udivmoddi4+0x9a>
 8000d68:	f1c6 0720 	rsb	r7, r6, #32
 8000d6c:	40b3      	lsls	r3, r6
 8000d6e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d72:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d76:	fa20 f407 	lsr.w	r4, r0, r7
 8000d7a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d7e:	431c      	orrs	r4, r3
 8000d80:	40f9      	lsrs	r1, r7
 8000d82:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d86:	fa00 f306 	lsl.w	r3, r0, r6
 8000d8a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d8e:	0c20      	lsrs	r0, r4, #16
 8000d90:	fa1f fe8c 	uxth.w	lr, ip
 8000d94:	fb09 1118 	mls	r1, r9, r8, r1
 8000d98:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9c:	fb08 f00e 	mul.w	r0, r8, lr
 8000da0:	4288      	cmp	r0, r1
 8000da2:	fa02 f206 	lsl.w	r2, r2, r6
 8000da6:	d90b      	bls.n	8000dc0 <__udivmoddi4+0x1b8>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f108 3aff 	add.w	sl, r8, #4294967295
 8000db0:	f080 8088 	bcs.w	8000ec4 <__udivmoddi4+0x2bc>
 8000db4:	4288      	cmp	r0, r1
 8000db6:	f240 8085 	bls.w	8000ec4 <__udivmoddi4+0x2bc>
 8000dba:	f1a8 0802 	sub.w	r8, r8, #2
 8000dbe:	4461      	add	r1, ip
 8000dc0:	1a09      	subs	r1, r1, r0
 8000dc2:	b2a4      	uxth	r4, r4
 8000dc4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dc8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dcc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dd0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dd4:	458e      	cmp	lr, r1
 8000dd6:	d908      	bls.n	8000dea <__udivmoddi4+0x1e2>
 8000dd8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ddc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000de0:	d26c      	bcs.n	8000ebc <__udivmoddi4+0x2b4>
 8000de2:	458e      	cmp	lr, r1
 8000de4:	d96a      	bls.n	8000ebc <__udivmoddi4+0x2b4>
 8000de6:	3802      	subs	r0, #2
 8000de8:	4461      	add	r1, ip
 8000dea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dee:	fba0 9402 	umull	r9, r4, r0, r2
 8000df2:	eba1 010e 	sub.w	r1, r1, lr
 8000df6:	42a1      	cmp	r1, r4
 8000df8:	46c8      	mov	r8, r9
 8000dfa:	46a6      	mov	lr, r4
 8000dfc:	d356      	bcc.n	8000eac <__udivmoddi4+0x2a4>
 8000dfe:	d053      	beq.n	8000ea8 <__udivmoddi4+0x2a0>
 8000e00:	b15d      	cbz	r5, 8000e1a <__udivmoddi4+0x212>
 8000e02:	ebb3 0208 	subs.w	r2, r3, r8
 8000e06:	eb61 010e 	sbc.w	r1, r1, lr
 8000e0a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e0e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e12:	40f1      	lsrs	r1, r6
 8000e14:	431f      	orrs	r7, r3
 8000e16:	e9c5 7100 	strd	r7, r1, [r5]
 8000e1a:	2600      	movs	r6, #0
 8000e1c:	4631      	mov	r1, r6
 8000e1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e22:	f1c2 0320 	rsb	r3, r2, #32
 8000e26:	40d8      	lsrs	r0, r3
 8000e28:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e2c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e30:	4091      	lsls	r1, r2
 8000e32:	4301      	orrs	r1, r0
 8000e34:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e38:	fa1f fe8c 	uxth.w	lr, ip
 8000e3c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e40:	fb07 3610 	mls	r6, r7, r0, r3
 8000e44:	0c0b      	lsrs	r3, r1, #16
 8000e46:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e4a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e4e:	429e      	cmp	r6, r3
 8000e50:	fa04 f402 	lsl.w	r4, r4, r2
 8000e54:	d908      	bls.n	8000e68 <__udivmoddi4+0x260>
 8000e56:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e5e:	d22f      	bcs.n	8000ec0 <__udivmoddi4+0x2b8>
 8000e60:	429e      	cmp	r6, r3
 8000e62:	d92d      	bls.n	8000ec0 <__udivmoddi4+0x2b8>
 8000e64:	3802      	subs	r0, #2
 8000e66:	4463      	add	r3, ip
 8000e68:	1b9b      	subs	r3, r3, r6
 8000e6a:	b289      	uxth	r1, r1
 8000e6c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e70:	fb07 3316 	mls	r3, r7, r6, r3
 8000e74:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e78:	fb06 f30e 	mul.w	r3, r6, lr
 8000e7c:	428b      	cmp	r3, r1
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x28a>
 8000e80:	eb1c 0101 	adds.w	r1, ip, r1
 8000e84:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e88:	d216      	bcs.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e8a:	428b      	cmp	r3, r1
 8000e8c:	d914      	bls.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e8e:	3e02      	subs	r6, #2
 8000e90:	4461      	add	r1, ip
 8000e92:	1ac9      	subs	r1, r1, r3
 8000e94:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e98:	e738      	b.n	8000d0c <__udivmoddi4+0x104>
 8000e9a:	462e      	mov	r6, r5
 8000e9c:	4628      	mov	r0, r5
 8000e9e:	e705      	b.n	8000cac <__udivmoddi4+0xa4>
 8000ea0:	4606      	mov	r6, r0
 8000ea2:	e6e3      	b.n	8000c6c <__udivmoddi4+0x64>
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	e6f8      	b.n	8000c9a <__udivmoddi4+0x92>
 8000ea8:	454b      	cmp	r3, r9
 8000eaa:	d2a9      	bcs.n	8000e00 <__udivmoddi4+0x1f8>
 8000eac:	ebb9 0802 	subs.w	r8, r9, r2
 8000eb0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000eb4:	3801      	subs	r0, #1
 8000eb6:	e7a3      	b.n	8000e00 <__udivmoddi4+0x1f8>
 8000eb8:	4646      	mov	r6, r8
 8000eba:	e7ea      	b.n	8000e92 <__udivmoddi4+0x28a>
 8000ebc:	4620      	mov	r0, r4
 8000ebe:	e794      	b.n	8000dea <__udivmoddi4+0x1e2>
 8000ec0:	4640      	mov	r0, r8
 8000ec2:	e7d1      	b.n	8000e68 <__udivmoddi4+0x260>
 8000ec4:	46d0      	mov	r8, sl
 8000ec6:	e77b      	b.n	8000dc0 <__udivmoddi4+0x1b8>
 8000ec8:	3b02      	subs	r3, #2
 8000eca:	4461      	add	r1, ip
 8000ecc:	e732      	b.n	8000d34 <__udivmoddi4+0x12c>
 8000ece:	4630      	mov	r0, r6
 8000ed0:	e709      	b.n	8000ce6 <__udivmoddi4+0xde>
 8000ed2:	4464      	add	r4, ip
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	e742      	b.n	8000d5e <__udivmoddi4+0x156>

08000ed8 <__aeabi_idiv0>:
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop

08000edc <FusionRadiansToDegrees>:
/**
 * @brief Converts radians to degrees.
 * @param radians Radians.
 * @return Degrees.
 */
static inline float FusionRadiansToDegrees(const float radians) {
 8000edc:	b480      	push	{r7}
 8000ede:	b083      	sub	sp, #12
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	ed87 0a01 	vstr	s0, [r7, #4]
    return radians * (180.0f / (float) M_PI);
 8000ee6:	edd7 7a01 	vldr	s15, [r7, #4]
 8000eea:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8000f00 <FusionRadiansToDegrees+0x24>
 8000eee:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8000ef2:	eeb0 0a67 	vmov.f32	s0, s15
 8000ef6:	370c      	adds	r7, #12
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr
 8000f00:	42652ee0 	.word	0x42652ee0

08000f04 <FusionAsin>:
/**
 * @brief Returns the arc sine of the value.
 * @param value Value.
 * @return Arc sine of the value.
 */
static inline float FusionAsin(const float value) {
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	ed87 0a01 	vstr	s0, [r7, #4]
    if (value <= -1.0f) {
 8000f0e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f12:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8000f16:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f1e:	d802      	bhi.n	8000f26 <FusionAsin+0x22>
        return (float) M_PI / -2.0f;
 8000f20:	eddf 7a0c 	vldr	s15, [pc, #48]	; 8000f54 <FusionAsin+0x50>
 8000f24:	e011      	b.n	8000f4a <FusionAsin+0x46>
    }
    if (value >= 1.0f) {
 8000f26:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f2a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000f2e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f36:	db02      	blt.n	8000f3e <FusionAsin+0x3a>
        return (float) M_PI / 2.0f;
 8000f38:	eddf 7a07 	vldr	s15, [pc, #28]	; 8000f58 <FusionAsin+0x54>
 8000f3c:	e005      	b.n	8000f4a <FusionAsin+0x46>
    }
    return asinf(value);
 8000f3e:	ed97 0a01 	vldr	s0, [r7, #4]
 8000f42:	f011 ff5d 	bl	8012e00 <asinf>
 8000f46:	eef0 7a40 	vmov.f32	s15, s0
}
 8000f4a:	eeb0 0a67 	vmov.f32	s0, s15
 8000f4e:	3708      	adds	r7, #8
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	bfc90fdb 	.word	0xbfc90fdb
 8000f58:	3fc90fdb 	.word	0x3fc90fdb

08000f5c <FusionVectorSubtract>:
 * @brief Returns vector B subtracted from vector A.
 * @param vectorA Vector A.
 * @param vectorB Vector B.
 * @return Vector B subtracted from vector A.
 */
static inline FusionVector FusionVectorSubtract(const FusionVector vectorA, const FusionVector vectorB) {
 8000f5c:	b480      	push	{r7}
 8000f5e:	b091      	sub	sp, #68	; 0x44
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	eeb0 5a40 	vmov.f32	s10, s0
 8000f66:	eef0 5a60 	vmov.f32	s11, s1
 8000f6a:	eeb0 6a41 	vmov.f32	s12, s2
 8000f6e:	eef0 6a61 	vmov.f32	s13, s3
 8000f72:	eeb0 7a42 	vmov.f32	s14, s4
 8000f76:	eef0 7a62 	vmov.f32	s15, s5
 8000f7a:	ed87 5a07 	vstr	s10, [r7, #28]
 8000f7e:	edc7 5a08 	vstr	s11, [r7, #32]
 8000f82:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 8000f86:	edc7 6a04 	vstr	s13, [r7, #16]
 8000f8a:	ed87 7a05 	vstr	s14, [r7, #20]
 8000f8e:	edc7 7a06 	vstr	s15, [r7, #24]
    const FusionVector result = {.axis = {
            .x = vectorA.axis.x - vectorB.axis.x,
 8000f92:	ed97 7a07 	vldr	s14, [r7, #28]
 8000f96:	edd7 7a04 	vldr	s15, [r7, #16]
 8000f9a:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8000f9e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = vectorA.axis.y - vectorB.axis.y,
 8000fa2:	ed97 7a08 	vldr	s14, [r7, #32]
 8000fa6:	edd7 7a05 	vldr	s15, [r7, #20]
 8000faa:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8000fae:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = vectorA.axis.z - vectorB.axis.z,
 8000fb2:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8000fb6:	edd7 7a06 	vldr	s15, [r7, #24]
 8000fba:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8000fbe:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    }};
    return result;
 8000fc2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000fc6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000fca:	ca07      	ldmia	r2, {r0, r1, r2}
 8000fcc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8000fd0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000fd2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000fd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000fd6:	ee06 1a90 	vmov	s13, r1
 8000fda:	ee07 2a10 	vmov	s14, r2
 8000fde:	ee07 3a90 	vmov	s15, r3
}
 8000fe2:	eeb0 0a66 	vmov.f32	s0, s13
 8000fe6:	eef0 0a47 	vmov.f32	s1, s14
 8000fea:	eeb0 1a67 	vmov.f32	s2, s15
 8000fee:	3744      	adds	r7, #68	; 0x44
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr

08000ff8 <FusionVectorHadamardProduct>:
 * @brief Calculates the Hadamard product (element-wise multiplication).
 * @param vectorA Vector A.
 * @param vectorB Vector B.
 * @return Hadamard product.
 */
static inline FusionVector FusionVectorHadamardProduct(const FusionVector vectorA, const FusionVector vectorB) {
 8000ff8:	b480      	push	{r7}
 8000ffa:	b091      	sub	sp, #68	; 0x44
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	eeb0 5a40 	vmov.f32	s10, s0
 8001002:	eef0 5a60 	vmov.f32	s11, s1
 8001006:	eeb0 6a41 	vmov.f32	s12, s2
 800100a:	eef0 6a61 	vmov.f32	s13, s3
 800100e:	eeb0 7a42 	vmov.f32	s14, s4
 8001012:	eef0 7a62 	vmov.f32	s15, s5
 8001016:	ed87 5a07 	vstr	s10, [r7, #28]
 800101a:	edc7 5a08 	vstr	s11, [r7, #32]
 800101e:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 8001022:	edc7 6a04 	vstr	s13, [r7, #16]
 8001026:	ed87 7a05 	vstr	s14, [r7, #20]
 800102a:	edc7 7a06 	vstr	s15, [r7, #24]
    const FusionVector result = {.axis = {
            .x = vectorA.axis.x * vectorB.axis.x,
 800102e:	ed97 7a07 	vldr	s14, [r7, #28]
 8001032:	edd7 7a04 	vldr	s15, [r7, #16]
 8001036:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800103a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = vectorA.axis.y * vectorB.axis.y,
 800103e:	ed97 7a08 	vldr	s14, [r7, #32]
 8001042:	edd7 7a05 	vldr	s15, [r7, #20]
 8001046:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800104a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = vectorA.axis.z * vectorB.axis.z,
 800104e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001052:	edd7 7a06 	vldr	s15, [r7, #24]
 8001056:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800105a:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    }};
    return result;
 800105e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001062:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001066:	ca07      	ldmia	r2, {r0, r1, r2}
 8001068:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800106c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800106e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001070:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001072:	ee06 1a90 	vmov	s13, r1
 8001076:	ee07 2a10 	vmov	s14, r2
 800107a:	ee07 3a90 	vmov	s15, r3
}
 800107e:	eeb0 0a66 	vmov.f32	s0, s13
 8001082:	eef0 0a47 	vmov.f32	s1, s14
 8001086:	eeb0 1a67 	vmov.f32	s2, s15
 800108a:	3744      	adds	r7, #68	; 0x44
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr

08001094 <FusionMatrixMultiplyVector>:
 * @brief Returns the multiplication of a matrix with a vector.
 * @param matrix Matrix.
 * @param vector Vector.
 * @return Multiplication of a matrix with a vector.
 */
static inline FusionVector FusionMatrixMultiplyVector(const FusionMatrix matrix, const FusionVector vector) {
 8001094:	b084      	sub	sp, #16
 8001096:	b480      	push	{r7}
 8001098:	b08f      	sub	sp, #60	; 0x3c
 800109a:	af00      	add	r7, sp, #0
 800109c:	f107 0c40 	add.w	ip, r7, #64	; 0x40
 80010a0:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 80010a4:	eef0 6a40 	vmov.f32	s13, s0
 80010a8:	eeb0 7a60 	vmov.f32	s14, s1
 80010ac:	eef0 7a41 	vmov.f32	s15, s2
 80010b0:	edc7 6a05 	vstr	s13, [r7, #20]
 80010b4:	ed87 7a06 	vstr	s14, [r7, #24]
 80010b8:	edc7 7a07 	vstr	s15, [r7, #28]
#define R matrix.element
    const FusionVector result = {.axis = {
            .x = R.xx * vector.axis.x + R.xy * vector.axis.y + R.xz * vector.axis.z,
 80010bc:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80010c0:	edd7 7a05 	vldr	s15, [r7, #20]
 80010c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010c8:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 80010cc:	edd7 7a06 	vldr	s15, [r7, #24]
 80010d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80010d8:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 80010dc:	edd7 7a07 	vldr	s15, [r7, #28]
 80010e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010e4:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80010e8:	edc7 7a08 	vstr	s15, [r7, #32]
            .y = R.yx * vector.axis.x + R.yy * vector.axis.y + R.yz * vector.axis.z,
 80010ec:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80010f0:	edd7 7a05 	vldr	s15, [r7, #20]
 80010f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010f8:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 80010fc:	edd7 7a06 	vldr	s15, [r7, #24]
 8001100:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001104:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001108:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 800110c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001110:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001114:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8001118:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            .z = R.zx * vector.axis.x + R.zy * vector.axis.y + R.zz * vector.axis.z,
 800111c:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8001120:	edd7 7a05 	vldr	s15, [r7, #20]
 8001124:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001128:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 800112c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001130:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001134:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001138:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 800113c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001140:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001144:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8001148:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    }};
    return result;
 800114c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001150:	f107 0220 	add.w	r2, r7, #32
 8001154:	ca07      	ldmia	r2, {r0, r1, r2}
 8001156:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800115a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800115c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800115e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001160:	ee06 1a90 	vmov	s13, r1
 8001164:	ee07 2a10 	vmov	s14, r2
 8001168:	ee07 3a90 	vmov	s15, r3
#undef R
}
 800116c:	eeb0 0a66 	vmov.f32	s0, s13
 8001170:	eef0 0a47 	vmov.f32	s1, s14
 8001174:	eeb0 1a67 	vmov.f32	s2, s15
 8001178:	373c      	adds	r7, #60	; 0x3c
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	b004      	add	sp, #16
 8001182:	4770      	bx	lr

08001184 <FusionQuaternionToEuler>:
/**
 * @brief Converts a quaternion to ZYX Euler angles in degrees.
 * @param quaternion Quaternion.
 * @return Euler angles in degrees.
 */
static inline FusionEuler FusionQuaternionToEuler(const FusionQuaternion quaternion) {
 8001184:	b580      	push	{r7, lr}
 8001186:	b090      	sub	sp, #64	; 0x40
 8001188:	af00      	add	r7, sp, #0
 800118a:	eeb0 6a40 	vmov.f32	s12, s0
 800118e:	eef0 6a60 	vmov.f32	s13, s1
 8001192:	eeb0 7a41 	vmov.f32	s14, s2
 8001196:	eef0 7a61 	vmov.f32	s15, s3
 800119a:	ed87 6a04 	vstr	s12, [r7, #16]
 800119e:	edc7 6a05 	vstr	s13, [r7, #20]
 80011a2:	ed87 7a06 	vstr	s14, [r7, #24]
 80011a6:	edc7 7a07 	vstr	s15, [r7, #28]
#define Q quaternion.element
    const float halfMinusQySquared = 0.5f - Q.y * Q.y; // calculate common terms to avoid repeated operations
 80011aa:	ed97 7a06 	vldr	s14, [r7, #24]
 80011ae:	edd7 7a06 	vldr	s15, [r7, #24]
 80011b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011b6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80011ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011be:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    const FusionEuler euler = {.angle = {
            .roll = FusionRadiansToDegrees(atan2f(Q.w * Q.x + Q.y * Q.z, halfMinusQySquared - Q.x * Q.x)),
 80011c2:	ed97 7a04 	vldr	s14, [r7, #16]
 80011c6:	edd7 7a05 	vldr	s15, [r7, #20]
 80011ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011ce:	edd7 6a06 	vldr	s13, [r7, #24]
 80011d2:	edd7 7a07 	vldr	s15, [r7, #28]
 80011d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011da:	ee77 6a27 	vadd.f32	s13, s14, s15
 80011de:	ed97 7a05 	vldr	s14, [r7, #20]
 80011e2:	edd7 7a05 	vldr	s15, [r7, #20]
 80011e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011ea:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80011ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011f2:	eef0 0a67 	vmov.f32	s1, s15
 80011f6:	eeb0 0a66 	vmov.f32	s0, s13
 80011fa:	f011 fe2d 	bl	8012e58 <atan2f>
 80011fe:	eef0 7a40 	vmov.f32	s15, s0
 8001202:	eeb0 0a67 	vmov.f32	s0, s15
 8001206:	f7ff fe69 	bl	8000edc <FusionRadiansToDegrees>
 800120a:	eef0 7a40 	vmov.f32	s15, s0
    const FusionEuler euler = {.angle = {
 800120e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            .pitch = FusionRadiansToDegrees(FusionAsin(2.0f * (Q.w * Q.y - Q.z * Q.x))),
 8001212:	ed97 7a04 	vldr	s14, [r7, #16]
 8001216:	edd7 7a06 	vldr	s15, [r7, #24]
 800121a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800121e:	edd7 6a07 	vldr	s13, [r7, #28]
 8001222:	edd7 7a05 	vldr	s15, [r7, #20]
 8001226:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800122a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800122e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001232:	eeb0 0a67 	vmov.f32	s0, s15
 8001236:	f7ff fe65 	bl	8000f04 <FusionAsin>
 800123a:	eef0 7a40 	vmov.f32	s15, s0
 800123e:	eeb0 0a67 	vmov.f32	s0, s15
 8001242:	f7ff fe4b 	bl	8000edc <FusionRadiansToDegrees>
 8001246:	eef0 7a40 	vmov.f32	s15, s0
    const FusionEuler euler = {.angle = {
 800124a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .yaw = FusionRadiansToDegrees(atan2f(Q.w * Q.z + Q.x * Q.y, halfMinusQySquared - Q.z * Q.z)),
 800124e:	ed97 7a04 	vldr	s14, [r7, #16]
 8001252:	edd7 7a07 	vldr	s15, [r7, #28]
 8001256:	ee27 7a27 	vmul.f32	s14, s14, s15
 800125a:	edd7 6a05 	vldr	s13, [r7, #20]
 800125e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001262:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001266:	ee77 6a27 	vadd.f32	s13, s14, s15
 800126a:	ed97 7a07 	vldr	s14, [r7, #28]
 800126e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001272:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001276:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800127a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800127e:	eef0 0a67 	vmov.f32	s1, s15
 8001282:	eeb0 0a66 	vmov.f32	s0, s13
 8001286:	f011 fde7 	bl	8012e58 <atan2f>
 800128a:	eef0 7a40 	vmov.f32	s15, s0
 800128e:	eeb0 0a67 	vmov.f32	s0, s15
 8001292:	f7ff fe23 	bl	8000edc <FusionRadiansToDegrees>
 8001296:	eef0 7a40 	vmov.f32	s15, s0
    const FusionEuler euler = {.angle = {
 800129a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    }};
    return euler;
 800129e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80012a2:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80012a6:	ca07      	ldmia	r2, {r0, r1, r2}
 80012a8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80012ac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80012ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80012b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80012b2:	ee06 1a90 	vmov	s13, r1
 80012b6:	ee07 2a10 	vmov	s14, r2
 80012ba:	ee07 3a90 	vmov	s15, r3
#undef Q
}
 80012be:	eeb0 0a66 	vmov.f32	s0, s13
 80012c2:	eef0 0a47 	vmov.f32	s1, s14
 80012c6:	eeb0 1a67 	vmov.f32	s2, s15
 80012ca:	3740      	adds	r7, #64	; 0x40
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}

080012d0 <FusionCalibrationInertial>:
 * @param misalignment Misalignment matrix.
 * @param sensitivity Sensitivity.
 * @param offset Offset.
 * @return Calibrated measurement.
 */
static inline FusionVector FusionCalibrationInertial(const FusionVector uncalibrated, const FusionMatrix misalignment, const FusionVector sensitivity, const FusionVector offset) {
 80012d0:	b084      	sub	sp, #16
 80012d2:	b5b0      	push	{r4, r5, r7, lr}
 80012d4:	b09e      	sub	sp, #120	; 0x78
 80012d6:	af06      	add	r7, sp, #24
 80012d8:	eef0 4a41 	vmov.f32	s9, s2
 80012dc:	f107 0470 	add.w	r4, r7, #112	; 0x70
 80012e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80012e4:	eeb0 5a61 	vmov.f32	s10, s3
 80012e8:	eef0 5a42 	vmov.f32	s11, s4
 80012ec:	eeb0 6a62 	vmov.f32	s12, s5
 80012f0:	eef0 6a43 	vmov.f32	s13, s6
 80012f4:	eeb0 7a63 	vmov.f32	s14, s7
 80012f8:	eef0 7a44 	vmov.f32	s15, s8
 80012fc:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
 8001300:	edc7 0a0c 	vstr	s1, [r7, #48]	; 0x30
 8001304:	edc7 4a0d 	vstr	s9, [r7, #52]	; 0x34
 8001308:	ed87 5a08 	vstr	s10, [r7, #32]
 800130c:	edc7 5a09 	vstr	s11, [r7, #36]	; 0x24
 8001310:	ed87 6a0a 	vstr	s12, [r7, #40]	; 0x28
 8001314:	edc7 6a05 	vstr	s13, [r7, #20]
 8001318:	ed87 7a06 	vstr	s14, [r7, #24]
 800131c:	edc7 7a07 	vstr	s15, [r7, #28]
    return FusionMatrixMultiplyVector(misalignment, FusionVectorHadamardProduct(FusionVectorSubtract(uncalibrated, offset), sensitivity));
 8001320:	ed97 5a05 	vldr	s10, [r7, #20]
 8001324:	edd7 5a06 	vldr	s11, [r7, #24]
 8001328:	ed97 6a07 	vldr	s12, [r7, #28]
 800132c:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8001330:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8001334:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001338:	eef0 1a45 	vmov.f32	s3, s10
 800133c:	eeb0 2a65 	vmov.f32	s4, s11
 8001340:	eef0 2a46 	vmov.f32	s5, s12
 8001344:	eeb0 0a66 	vmov.f32	s0, s13
 8001348:	eef0 0a47 	vmov.f32	s1, s14
 800134c:	eeb0 1a67 	vmov.f32	s2, s15
 8001350:	f7ff fe04 	bl	8000f5c <FusionVectorSubtract>
 8001354:	eef0 6a40 	vmov.f32	s13, s0
 8001358:	eeb0 7a60 	vmov.f32	s14, s1
 800135c:	eef0 7a41 	vmov.f32	s15, s2
 8001360:	edc7 6a12 	vstr	s13, [r7, #72]	; 0x48
 8001364:	ed87 7a13 	vstr	s14, [r7, #76]	; 0x4c
 8001368:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
 800136c:	ed97 5a08 	vldr	s10, [r7, #32]
 8001370:	edd7 5a09 	vldr	s11, [r7, #36]	; 0x24
 8001374:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 8001378:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 800137c:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001380:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8001384:	eef0 1a45 	vmov.f32	s3, s10
 8001388:	eeb0 2a65 	vmov.f32	s4, s11
 800138c:	eef0 2a46 	vmov.f32	s5, s12
 8001390:	eeb0 0a66 	vmov.f32	s0, s13
 8001394:	eef0 0a47 	vmov.f32	s1, s14
 8001398:	eeb0 1a67 	vmov.f32	s2, s15
 800139c:	f7ff fe2c 	bl	8000ff8 <FusionVectorHadamardProduct>
 80013a0:	eef0 6a40 	vmov.f32	s13, s0
 80013a4:	eeb0 7a60 	vmov.f32	s14, s1
 80013a8:	eef0 7a41 	vmov.f32	s15, s2
 80013ac:	edc7 6a15 	vstr	s13, [r7, #84]	; 0x54
 80013b0:	ed87 7a16 	vstr	s14, [r7, #88]	; 0x58
 80013b4:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
 80013b8:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 80013bc:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80013c0:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80013c4:	466d      	mov	r5, sp
 80013c6:	f107 0480 	add.w	r4, r7, #128	; 0x80
 80013ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013ce:	6823      	ldr	r3, [r4, #0]
 80013d0:	602b      	str	r3, [r5, #0]
 80013d2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80013d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013d8:	eeb0 0a66 	vmov.f32	s0, s13
 80013dc:	eef0 0a47 	vmov.f32	s1, s14
 80013e0:	eeb0 1a67 	vmov.f32	s2, s15
 80013e4:	f7ff fe56 	bl	8001094 <FusionMatrixMultiplyVector>
 80013e8:	eef0 6a40 	vmov.f32	s13, s0
 80013ec:	eeb0 7a60 	vmov.f32	s14, s1
 80013f0:	eef0 7a41 	vmov.f32	s15, s2
 80013f4:	edc7 6a0f 	vstr	s13, [r7, #60]	; 0x3c
 80013f8:	ed87 7a10 	vstr	s14, [r7, #64]	; 0x40
 80013fc:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
 8001400:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001402:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001404:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001406:	ee06 1a90 	vmov	s13, r1
 800140a:	ee07 2a10 	vmov	s14, r2
 800140e:	ee07 3a90 	vmov	s15, r3
}
 8001412:	eeb0 0a66 	vmov.f32	s0, s13
 8001416:	eef0 0a47 	vmov.f32	s1, s14
 800141a:	eeb0 1a67 	vmov.f32	s2, s15
 800141e:	3760      	adds	r7, #96	; 0x60
 8001420:	46bd      	mov	sp, r7
 8001422:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001426:	b004      	add	sp, #16
 8001428:	4770      	bx	lr

0800142a <FusionCalibrationMagnetic>:
 * @param uncalibrated Uncalibrated measurement.
 * @param softIronMatrix Soft-iron matrix.
 * @param hardIronOffset Hard-iron offset.
 * @return Calibrated measurement.
 */
static inline FusionVector FusionCalibrationMagnetic(const FusionVector uncalibrated, const FusionMatrix softIronMatrix, const FusionVector hardIronOffset) {
 800142a:	b084      	sub	sp, #16
 800142c:	b5b0      	push	{r4, r5, r7, lr}
 800142e:	b096      	sub	sp, #88	; 0x58
 8001430:	af06      	add	r7, sp, #24
 8001432:	eeb0 5a40 	vmov.f32	s10, s0
 8001436:	eef0 5a60 	vmov.f32	s11, s1
 800143a:	eeb0 6a41 	vmov.f32	s12, s2
 800143e:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8001442:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001446:	eef0 6a61 	vmov.f32	s13, s3
 800144a:	eeb0 7a42 	vmov.f32	s14, s4
 800144e:	eef0 7a62 	vmov.f32	s15, s5
 8001452:	ed87 5a07 	vstr	s10, [r7, #28]
 8001456:	edc7 5a08 	vstr	s11, [r7, #32]
 800145a:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 800145e:	edc7 6a04 	vstr	s13, [r7, #16]
 8001462:	ed87 7a05 	vstr	s14, [r7, #20]
 8001466:	edc7 7a06 	vstr	s15, [r7, #24]
    return FusionVectorSubtract(FusionMatrixMultiplyVector(softIronMatrix, uncalibrated), hardIronOffset);
 800146a:	edd7 6a07 	vldr	s13, [r7, #28]
 800146e:	ed97 7a08 	vldr	s14, [r7, #32]
 8001472:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001476:	466d      	mov	r5, sp
 8001478:	f107 0460 	add.w	r4, r7, #96	; 0x60
 800147c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800147e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001480:	6823      	ldr	r3, [r4, #0]
 8001482:	602b      	str	r3, [r5, #0]
 8001484:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001488:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800148a:	eeb0 0a66 	vmov.f32	s0, s13
 800148e:	eef0 0a47 	vmov.f32	s1, s14
 8001492:	eeb0 1a67 	vmov.f32	s2, s15
 8001496:	f7ff fdfd 	bl	8001094 <FusionMatrixMultiplyVector>
 800149a:	eef0 6a40 	vmov.f32	s13, s0
 800149e:	eeb0 7a60 	vmov.f32	s14, s1
 80014a2:	eef0 7a41 	vmov.f32	s15, s2
 80014a6:	edc7 6a0d 	vstr	s13, [r7, #52]	; 0x34
 80014aa:	ed87 7a0e 	vstr	s14, [r7, #56]	; 0x38
 80014ae:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
 80014b2:	ed97 5a04 	vldr	s10, [r7, #16]
 80014b6:	edd7 5a05 	vldr	s11, [r7, #20]
 80014ba:	ed97 6a06 	vldr	s12, [r7, #24]
 80014be:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 80014c2:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80014c6:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80014ca:	eef0 1a45 	vmov.f32	s3, s10
 80014ce:	eeb0 2a65 	vmov.f32	s4, s11
 80014d2:	eef0 2a46 	vmov.f32	s5, s12
 80014d6:	eeb0 0a66 	vmov.f32	s0, s13
 80014da:	eef0 0a47 	vmov.f32	s1, s14
 80014de:	eeb0 1a67 	vmov.f32	s2, s15
 80014e2:	f7ff fd3b 	bl	8000f5c <FusionVectorSubtract>
 80014e6:	eef0 6a40 	vmov.f32	s13, s0
 80014ea:	eeb0 7a60 	vmov.f32	s14, s1
 80014ee:	eef0 7a41 	vmov.f32	s15, s2
 80014f2:	edc7 6a0a 	vstr	s13, [r7, #40]	; 0x28
 80014f6:	ed87 7a0b 	vstr	s14, [r7, #44]	; 0x2c
 80014fa:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 80014fe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001500:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001504:	ee06 1a90 	vmov	s13, r1
 8001508:	ee07 2a10 	vmov	s14, r2
 800150c:	ee07 3a90 	vmov	s15, r3
}
 8001510:	eeb0 0a66 	vmov.f32	s0, s13
 8001514:	eef0 0a47 	vmov.f32	s1, s14
 8001518:	eeb0 1a67 	vmov.f32	s2, s15
 800151c:	3740      	adds	r7, #64	; 0x40
 800151e:	46bd      	mov	sp, r7
 8001520:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001524:	b004      	add	sp, #16
 8001526:	4770      	bx	lr

08001528 <FusionInit>:

FusionAhrs ahrs;
FusionOffset offset;

/* Initialize Fusion algorithm. */
void FusionInit(void){
 8001528:	b5b0      	push	{r4, r5, r7, lr}
 800152a:	b086      	sub	sp, #24
 800152c:	af00      	add	r7, sp, #0
	FusionOffsetInitialise(&offset, SAMPLE_RATE);
 800152e:	2146      	movs	r1, #70	; 0x46
 8001530:	480a      	ldr	r0, [pc, #40]	; (800155c <FusionInit+0x34>)
 8001532:	f002 fa57 	bl	80039e4 <FusionOffsetInitialise>
	FusionAhrsInitialise(&ahrs);
 8001536:	480a      	ldr	r0, [pc, #40]	; (8001560 <FusionInit+0x38>)
 8001538:	f000 fe6c 	bl	8002214 <FusionAhrsInitialise>
	const FusionAhrsSettings settings = {
 800153c:	4b09      	ldr	r3, [pc, #36]	; (8001564 <FusionInit+0x3c>)
 800153e:	1d3c      	adds	r4, r7, #4
 8001540:	461d      	mov	r5, r3
 8001542:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001544:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001546:	682b      	ldr	r3, [r5, #0]
 8001548:	6023      	str	r3, [r4, #0]
			.gain = 0.5f,
			.accelerationRejection = 10.0f,
			.magneticRejection = 20.0f,
			.rejectionTimeout = 5 * SAMPLE_RATE, /* 5 seconds */
	};
	FusionAhrsSetSettings(&ahrs, &settings);
 800154a:	1d3b      	adds	r3, r7, #4
 800154c:	4619      	mov	r1, r3
 800154e:	4804      	ldr	r0, [pc, #16]	; (8001560 <FusionInit+0x38>)
 8001550:	f000 feda 	bl	8002308 <FusionAhrsSetSettings>

}
 8001554:	bf00      	nop
 8001556:	3718      	adds	r7, #24
 8001558:	46bd      	mov	sp, r7
 800155a:	bdb0      	pop	{r4, r5, r7, pc}
 800155c:	20000274 	.word	0x20000274
 8001560:	2000020c 	.word	0x2000020c
 8001564:	08014410 	.word	0x08014410

08001568 <FusionCalcHeading>:
	*output_angles = FusionQuaternionToEuler(FusionAhrsGetQuaternion(&ahrs));
	//	const FusionVect = FusionQuaternionToEuler(FusionAhrsGetQuaternion(&ahrs));
}

/* Calculate heading based on all three sensors.*/
void FusionCalcHeading(mems_data_t *memsData, FusionEuler *output_angles){
 8001568:	b5f0      	push	{r4, r5, r6, r7, lr}
 800156a:	b099      	sub	sp, #100	; 0x64
 800156c:	af06      	add	r7, sp, #24
 800156e:	6078      	str	r0, [r7, #4]
 8001570:	6039      	str	r1, [r7, #0]
	const clock_t timestamp = memsData->timestamp; // timestamp taken from LSM6DRX gyroscope.
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001576:	647b      	str	r3, [r7, #68]	; 0x44
	FusionVector gyroscope = {memsData->gyro_x, memsData->gyro_y, memsData->gyro_z};
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	627b      	str	r3, [r7, #36]	; 0x24
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	62bb      	str	r3, [r7, #40]	; 0x28
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	689b      	ldr	r3, [r3, #8]
 8001588:	62fb      	str	r3, [r7, #44]	; 0x2c
	FusionVector accelerometer = {memsData->acc_x, memsData->acc_y, memsData->acc_z};
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	68db      	ldr	r3, [r3, #12]
 800158e:	61bb      	str	r3, [r7, #24]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	691b      	ldr	r3, [r3, #16]
 8001594:	61fb      	str	r3, [r7, #28]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	695b      	ldr	r3, [r3, #20]
 800159a:	623b      	str	r3, [r7, #32]
	FusionVector magnetometer = {memsData->magn_x, memsData->magn_y, memsData->magn_z}; // replace this with actual magnetometer data in arbitrary units
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	699b      	ldr	r3, [r3, #24]
 80015a0:	60fb      	str	r3, [r7, #12]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	69db      	ldr	r3, [r3, #28]
 80015a6:	613b      	str	r3, [r7, #16]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6a1b      	ldr	r3, [r3, #32]
 80015ac:	617b      	str	r3, [r7, #20]

	// Apply calibration
	gyroscope = FusionCalibrationInertial(gyroscope, gyroscopeMisalignment, gyroscopeSensitivity, gyroscopeOffset);
 80015ae:	4bb4      	ldr	r3, [pc, #720]	; (8001880 <FusionCalcHeading+0x318>)
 80015b0:	edd3 3a00 	vldr	s7, [r3]
 80015b4:	ed93 4a01 	vldr	s8, [r3, #4]
 80015b8:	edd3 4a02 	vldr	s9, [r3, #8]
 80015bc:	4bb1      	ldr	r3, [pc, #708]	; (8001884 <FusionCalcHeading+0x31c>)
 80015be:	ed93 5a00 	vldr	s10, [r3]
 80015c2:	edd3 5a01 	vldr	s11, [r3, #4]
 80015c6:	ed93 6a02 	vldr	s12, [r3, #8]
 80015ca:	4eaf      	ldr	r6, [pc, #700]	; (8001888 <FusionCalcHeading+0x320>)
 80015cc:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80015d0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80015d4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80015d8:	466d      	mov	r5, sp
 80015da:	f106 0410 	add.w	r4, r6, #16
 80015de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015e2:	6823      	ldr	r3, [r4, #0]
 80015e4:	602b      	str	r3, [r5, #0]
 80015e6:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80015ea:	eeb0 3a63 	vmov.f32	s6, s7
 80015ee:	eef0 3a44 	vmov.f32	s7, s8
 80015f2:	eeb0 4a64 	vmov.f32	s8, s9
 80015f6:	eef0 1a45 	vmov.f32	s3, s10
 80015fa:	eeb0 2a65 	vmov.f32	s4, s11
 80015fe:	eef0 2a46 	vmov.f32	s5, s12
 8001602:	eeb0 0a66 	vmov.f32	s0, s13
 8001606:	eef0 0a47 	vmov.f32	s1, s14
 800160a:	eeb0 1a67 	vmov.f32	s2, s15
 800160e:	f7ff fe5f 	bl	80012d0 <FusionCalibrationInertial>
 8001612:	eef0 6a40 	vmov.f32	s13, s0
 8001616:	eeb0 7a60 	vmov.f32	s14, s1
 800161a:	eef0 7a41 	vmov.f32	s15, s2
 800161e:	edc7 6a09 	vstr	s13, [r7, #36]	; 0x24
 8001622:	ed87 7a0a 	vstr	s14, [r7, #40]	; 0x28
 8001626:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	accelerometer = FusionCalibrationInertial(accelerometer, accelerometerMisalignment, accelerometerSensitivity, accelerometerOffset);
 800162a:	4b98      	ldr	r3, [pc, #608]	; (800188c <FusionCalcHeading+0x324>)
 800162c:	edd3 3a00 	vldr	s7, [r3]
 8001630:	ed93 4a01 	vldr	s8, [r3, #4]
 8001634:	edd3 4a02 	vldr	s9, [r3, #8]
 8001638:	4b95      	ldr	r3, [pc, #596]	; (8001890 <FusionCalcHeading+0x328>)
 800163a:	ed93 5a00 	vldr	s10, [r3]
 800163e:	edd3 5a01 	vldr	s11, [r3, #4]
 8001642:	ed93 6a02 	vldr	s12, [r3, #8]
 8001646:	4e93      	ldr	r6, [pc, #588]	; (8001894 <FusionCalcHeading+0x32c>)
 8001648:	edd7 6a06 	vldr	s13, [r7, #24]
 800164c:	ed97 7a07 	vldr	s14, [r7, #28]
 8001650:	edd7 7a08 	vldr	s15, [r7, #32]
 8001654:	466d      	mov	r5, sp
 8001656:	f106 0410 	add.w	r4, r6, #16
 800165a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800165c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800165e:	6823      	ldr	r3, [r4, #0]
 8001660:	602b      	str	r3, [r5, #0]
 8001662:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001666:	eeb0 3a63 	vmov.f32	s6, s7
 800166a:	eef0 3a44 	vmov.f32	s7, s8
 800166e:	eeb0 4a64 	vmov.f32	s8, s9
 8001672:	eef0 1a45 	vmov.f32	s3, s10
 8001676:	eeb0 2a65 	vmov.f32	s4, s11
 800167a:	eef0 2a46 	vmov.f32	s5, s12
 800167e:	eeb0 0a66 	vmov.f32	s0, s13
 8001682:	eef0 0a47 	vmov.f32	s1, s14
 8001686:	eeb0 1a67 	vmov.f32	s2, s15
 800168a:	f7ff fe21 	bl	80012d0 <FusionCalibrationInertial>
 800168e:	eef0 6a40 	vmov.f32	s13, s0
 8001692:	eeb0 7a60 	vmov.f32	s14, s1
 8001696:	eef0 7a41 	vmov.f32	s15, s2
 800169a:	edc7 6a06 	vstr	s13, [r7, #24]
 800169e:	ed87 7a07 	vstr	s14, [r7, #28]
 80016a2:	edc7 7a08 	vstr	s15, [r7, #32]
	magnetometer = FusionCalibrationMagnetic(magnetometer, softIronMatrix, hardIronOffset);
 80016a6:	4b7c      	ldr	r3, [pc, #496]	; (8001898 <FusionCalcHeading+0x330>)
 80016a8:	ed93 5a00 	vldr	s10, [r3]
 80016ac:	edd3 5a01 	vldr	s11, [r3, #4]
 80016b0:	ed93 6a02 	vldr	s12, [r3, #8]
 80016b4:	4e79      	ldr	r6, [pc, #484]	; (800189c <FusionCalcHeading+0x334>)
 80016b6:	edd7 6a03 	vldr	s13, [r7, #12]
 80016ba:	ed97 7a04 	vldr	s14, [r7, #16]
 80016be:	edd7 7a05 	vldr	s15, [r7, #20]
 80016c2:	466d      	mov	r5, sp
 80016c4:	f106 0410 	add.w	r4, r6, #16
 80016c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016cc:	6823      	ldr	r3, [r4, #0]
 80016ce:	602b      	str	r3, [r5, #0]
 80016d0:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80016d4:	eef0 1a45 	vmov.f32	s3, s10
 80016d8:	eeb0 2a65 	vmov.f32	s4, s11
 80016dc:	eef0 2a46 	vmov.f32	s5, s12
 80016e0:	eeb0 0a66 	vmov.f32	s0, s13
 80016e4:	eef0 0a47 	vmov.f32	s1, s14
 80016e8:	eeb0 1a67 	vmov.f32	s2, s15
 80016ec:	f7ff fe9d 	bl	800142a <FusionCalibrationMagnetic>
 80016f0:	eef0 6a40 	vmov.f32	s13, s0
 80016f4:	eeb0 7a60 	vmov.f32	s14, s1
 80016f8:	eef0 7a41 	vmov.f32	s15, s2
 80016fc:	edc7 6a03 	vstr	s13, [r7, #12]
 8001700:	ed87 7a04 	vstr	s14, [r7, #16]
 8001704:	edc7 7a05 	vstr	s15, [r7, #20]

	// Update gyroscope offset correction algorithm
	gyroscope = FusionOffsetUpdate(&offset, gyroscope);
 8001708:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800170c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001710:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001714:	eeb0 0a66 	vmov.f32	s0, s13
 8001718:	eef0 0a47 	vmov.f32	s1, s14
 800171c:	eeb0 1a67 	vmov.f32	s2, s15
 8001720:	485f      	ldr	r0, [pc, #380]	; (80018a0 <FusionCalcHeading+0x338>)
 8001722:	f002 f991 	bl	8003a48 <FusionOffsetUpdate>
 8001726:	eef0 6a40 	vmov.f32	s13, s0
 800172a:	eeb0 7a60 	vmov.f32	s14, s1
 800172e:	eef0 7a41 	vmov.f32	s15, s2
 8001732:	edc7 6a09 	vstr	s13, [r7, #36]	; 0x24
 8001736:	ed87 7a0a 	vstr	s14, [r7, #40]	; 0x28
 800173a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

	// Calculate delta time (in seconds) to account for gyroscope sample clock error
	static clock_t previousTimestamp;
	const float deltaTime = (float) (timestamp - previousTimestamp) / (float) CLOCKS_PER_SEC;
 800173e:	4b59      	ldr	r3, [pc, #356]	; (80018a4 <FusionCalcHeading+0x33c>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001744:	1ad3      	subs	r3, r2, r3
 8001746:	ee07 3a90 	vmov	s15, r3
 800174a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800174e:	eddf 6a56 	vldr	s13, [pc, #344]	; 80018a8 <FusionCalcHeading+0x340>
 8001752:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001756:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
	previousTimestamp = timestamp;
 800175a:	4a52      	ldr	r2, [pc, #328]	; (80018a4 <FusionCalcHeading+0x33c>)
 800175c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800175e:	6013      	str	r3, [r2, #0]


	// Update gyroscope AHRS algorithm
	FusionAhrsUpdate(&ahrs, gyroscope, accelerometer, magnetometer, deltaTime);
 8001760:	ed97 3a03 	vldr	s6, [r7, #12]
 8001764:	edd7 3a04 	vldr	s7, [r7, #16]
 8001768:	ed97 4a05 	vldr	s8, [r7, #20]
 800176c:	ed97 5a06 	vldr	s10, [r7, #24]
 8001770:	edd7 5a07 	vldr	s11, [r7, #28]
 8001774:	ed97 6a08 	vldr	s12, [r7, #32]
 8001778:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800177c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001780:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001784:	edd7 4a10 	vldr	s9, [r7, #64]	; 0x40
 8001788:	eef0 1a45 	vmov.f32	s3, s10
 800178c:	eeb0 2a65 	vmov.f32	s4, s11
 8001790:	eef0 2a46 	vmov.f32	s5, s12
 8001794:	eeb0 0a66 	vmov.f32	s0, s13
 8001798:	eef0 0a47 	vmov.f32	s1, s14
 800179c:	eeb0 1a67 	vmov.f32	s2, s15
 80017a0:	4842      	ldr	r0, [pc, #264]	; (80018ac <FusionCalcHeading+0x344>)
 80017a2:	f000 fe3f 	bl	8002424 <FusionAhrsUpdate>

	// Print algorithm outputs
	*output_angles = FusionQuaternionToEuler(FusionAhrsGetQuaternion(&ahrs));
 80017a6:	4841      	ldr	r0, [pc, #260]	; (80018ac <FusionCalcHeading+0x344>)
 80017a8:	f001 fb64 	bl	8002e74 <FusionAhrsGetQuaternion>
 80017ac:	eeb0 6a40 	vmov.f32	s12, s0
 80017b0:	eef0 6a60 	vmov.f32	s13, s1
 80017b4:	eeb0 7a41 	vmov.f32	s14, s2
 80017b8:	eef0 7a61 	vmov.f32	s15, s3
 80017bc:	ed87 6a0c 	vstr	s12, [r7, #48]	; 0x30
 80017c0:	edc7 6a0d 	vstr	s13, [r7, #52]	; 0x34
 80017c4:	ed87 7a0e 	vstr	s14, [r7, #56]	; 0x38
 80017c8:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
 80017cc:	ed97 6a0c 	vldr	s12, [r7, #48]	; 0x30
 80017d0:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 80017d4:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80017d8:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80017dc:	eeb0 0a46 	vmov.f32	s0, s12
 80017e0:	eef0 0a66 	vmov.f32	s1, s13
 80017e4:	eeb0 1a47 	vmov.f32	s2, s14
 80017e8:	eef0 1a67 	vmov.f32	s3, s15
 80017ec:	f7ff fcca 	bl	8001184 <FusionQuaternionToEuler>
 80017f0:	eef0 6a40 	vmov.f32	s13, s0
 80017f4:	eeb0 7a60 	vmov.f32	s14, s1
 80017f8:	eef0 7a41 	vmov.f32	s15, s2
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	edc3 6a00 	vstr	s13, [r3]
 8001802:	ed83 7a01 	vstr	s14, [r3, #4]
 8001806:	edc3 7a02 	vstr	s15, [r3, #8]
	if (output_angles->angle.yaw < 0){
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001810:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001814:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001818:	d509      	bpl.n	800182e <FusionCalcHeading+0x2c6>
		output_angles->angle.yaw += 360;
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001820:	ed9f 7a23 	vldr	s14, [pc, #140]	; 80018b0 <FusionCalcHeading+0x348>
 8001824:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	edc3 7a02 	vstr	s15, [r3, #8]
	}
	if (output_angles->angle.roll < 0){
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	edd3 7a00 	vldr	s15, [r3]
 8001834:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001838:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800183c:	d509      	bpl.n	8001852 <FusionCalcHeading+0x2ea>
		output_angles->angle.roll += 360;
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	edd3 7a00 	vldr	s15, [r3]
 8001844:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80018b0 <FusionCalcHeading+0x348>
 8001848:	ee77 7a87 	vadd.f32	s15, s15, s14
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	edc3 7a00 	vstr	s15, [r3]
	}
	if (output_angles->angle.pitch < 0){
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	edd3 7a01 	vldr	s15, [r3, #4]
 8001858:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800185c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001860:	d400      	bmi.n	8001864 <FusionCalcHeading+0x2fc>
		output_angles->angle.pitch += 360;
	}
//	const FusionVector earth = FusionAhrsGetEarthAcceleration(&ahrs);
}
 8001862:	e009      	b.n	8001878 <FusionCalcHeading+0x310>
		output_angles->angle.pitch += 360;
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	edd3 7a01 	vldr	s15, [r3, #4]
 800186a:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80018b0 <FusionCalcHeading+0x348>
 800186e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8001878:	bf00      	nop
 800187a:	374c      	adds	r7, #76	; 0x4c
 800187c:	46bd      	mov	sp, r7
 800187e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001880:	08014624 	.word	0x08014624
 8001884:	08014618 	.word	0x08014618
 8001888:	080145f4 	.word	0x080145f4
 800188c:	08014660 	.word	0x08014660
 8001890:	08014654 	.word	0x08014654
 8001894:	08014630 	.word	0x08014630
 8001898:	08014690 	.word	0x08014690
 800189c:	0801466c 	.word	0x0801466c
 80018a0:	20000274 	.word	0x20000274
 80018a4:	2000028c 	.word	0x2000028c
 80018a8:	42c80000 	.word	0x42c80000
 80018ac:	2000020c 	.word	0x2000020c
 80018b0:	43b40000 	.word	0x43b40000

080018b4 <FusionDegreesToRadians>:
static inline float FusionDegreesToRadians(const float degrees) {
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	ed87 0a01 	vstr	s0, [r7, #4]
    return degrees * ((float) M_PI / 180.0f);
 80018be:	edd7 7a01 	vldr	s15, [r7, #4]
 80018c2:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80018d8 <FusionDegreesToRadians+0x24>
 80018c6:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80018ca:	eeb0 0a67 	vmov.f32	s0, s15
 80018ce:	370c      	adds	r7, #12
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr
 80018d8:	3c8efa35 	.word	0x3c8efa35

080018dc <FusionFastInverseSqrt>:
static inline float FusionFastInverseSqrt(const float x) {
 80018dc:	b480      	push	{r7}
 80018de:	b085      	sub	sp, #20
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	ed87 0a01 	vstr	s0, [r7, #4]
    Union32 union32 = {.f = x};
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	60fb      	str	r3, [r7, #12]
    union32.i = 0x5F1F1412 - (union32.i >> 1);
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	105a      	asrs	r2, r3, #1
 80018ee:	4b10      	ldr	r3, [pc, #64]	; (8001930 <FusionFastInverseSqrt+0x54>)
 80018f0:	1a9b      	subs	r3, r3, r2
 80018f2:	60fb      	str	r3, [r7, #12]
    return union32.f * (1.69000231f - 0.714158168f * x * union32.f * union32.f);
 80018f4:	ed97 7a03 	vldr	s14, [r7, #12]
 80018f8:	edd7 7a01 	vldr	s15, [r7, #4]
 80018fc:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8001934 <FusionFastInverseSqrt+0x58>
 8001900:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001904:	edd7 7a03 	vldr	s15, [r7, #12]
 8001908:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800190c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001910:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001914:	eddf 6a08 	vldr	s13, [pc, #32]	; 8001938 <FusionFastInverseSqrt+0x5c>
 8001918:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800191c:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8001920:	eeb0 0a67 	vmov.f32	s0, s15
 8001924:	3714      	adds	r7, #20
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr
 800192e:	bf00      	nop
 8001930:	5f1f1412 	.word	0x5f1f1412
 8001934:	3f36d312 	.word	0x3f36d312
 8001938:	3fd851ff 	.word	0x3fd851ff

0800193c <FusionVectorIsZero>:
static inline bool FusionVectorIsZero(const FusionVector vector) {
 800193c:	b480      	push	{r7}
 800193e:	b085      	sub	sp, #20
 8001940:	af00      	add	r7, sp, #0
 8001942:	eef0 6a40 	vmov.f32	s13, s0
 8001946:	eeb0 7a60 	vmov.f32	s14, s1
 800194a:	eef0 7a41 	vmov.f32	s15, s2
 800194e:	edc7 6a01 	vstr	s13, [r7, #4]
 8001952:	ed87 7a02 	vstr	s14, [r7, #8]
 8001956:	edc7 7a03 	vstr	s15, [r7, #12]
    return (vector.axis.x == 0.0f) && (vector.axis.y == 0.0f) && (vector.axis.z == 0.0f);
 800195a:	edd7 7a01 	vldr	s15, [r7, #4]
 800195e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001962:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001966:	d10f      	bne.n	8001988 <FusionVectorIsZero+0x4c>
 8001968:	edd7 7a02 	vldr	s15, [r7, #8]
 800196c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001970:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001974:	d108      	bne.n	8001988 <FusionVectorIsZero+0x4c>
 8001976:	edd7 7a03 	vldr	s15, [r7, #12]
 800197a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800197e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001982:	d101      	bne.n	8001988 <FusionVectorIsZero+0x4c>
 8001984:	2301      	movs	r3, #1
 8001986:	e000      	b.n	800198a <FusionVectorIsZero+0x4e>
 8001988:	2300      	movs	r3, #0
 800198a:	f003 0301 	and.w	r3, r3, #1
 800198e:	b2db      	uxtb	r3, r3
}
 8001990:	4618      	mov	r0, r3
 8001992:	3714      	adds	r7, #20
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr

0800199c <FusionVectorAdd>:
static inline FusionVector FusionVectorAdd(const FusionVector vectorA, const FusionVector vectorB) {
 800199c:	b480      	push	{r7}
 800199e:	b091      	sub	sp, #68	; 0x44
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	eeb0 5a40 	vmov.f32	s10, s0
 80019a6:	eef0 5a60 	vmov.f32	s11, s1
 80019aa:	eeb0 6a41 	vmov.f32	s12, s2
 80019ae:	eef0 6a61 	vmov.f32	s13, s3
 80019b2:	eeb0 7a42 	vmov.f32	s14, s4
 80019b6:	eef0 7a62 	vmov.f32	s15, s5
 80019ba:	ed87 5a07 	vstr	s10, [r7, #28]
 80019be:	edc7 5a08 	vstr	s11, [r7, #32]
 80019c2:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 80019c6:	edc7 6a04 	vstr	s13, [r7, #16]
 80019ca:	ed87 7a05 	vstr	s14, [r7, #20]
 80019ce:	edc7 7a06 	vstr	s15, [r7, #24]
            .x = vectorA.axis.x + vectorB.axis.x,
 80019d2:	ed97 7a07 	vldr	s14, [r7, #28]
 80019d6:	edd7 7a04 	vldr	s15, [r7, #16]
 80019da:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80019de:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = vectorA.axis.y + vectorB.axis.y,
 80019e2:	ed97 7a08 	vldr	s14, [r7, #32]
 80019e6:	edd7 7a05 	vldr	s15, [r7, #20]
 80019ea:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80019ee:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = vectorA.axis.z + vectorB.axis.z,
 80019f2:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80019f6:	edd7 7a06 	vldr	s15, [r7, #24]
 80019fa:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80019fe:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    return result;
 8001a02:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001a06:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001a0a:	ca07      	ldmia	r2, {r0, r1, r2}
 8001a0c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001a10:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001a12:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001a14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a16:	ee06 1a90 	vmov	s13, r1
 8001a1a:	ee07 2a10 	vmov	s14, r2
 8001a1e:	ee07 3a90 	vmov	s15, r3
}
 8001a22:	eeb0 0a66 	vmov.f32	s0, s13
 8001a26:	eef0 0a47 	vmov.f32	s1, s14
 8001a2a:	eeb0 1a67 	vmov.f32	s2, s15
 8001a2e:	3744      	adds	r7, #68	; 0x44
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr

08001a38 <FusionVectorSum>:
static inline float FusionVectorSum(const FusionVector vector) {
 8001a38:	b480      	push	{r7}
 8001a3a:	b085      	sub	sp, #20
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	eef0 6a40 	vmov.f32	s13, s0
 8001a42:	eeb0 7a60 	vmov.f32	s14, s1
 8001a46:	eef0 7a41 	vmov.f32	s15, s2
 8001a4a:	edc7 6a01 	vstr	s13, [r7, #4]
 8001a4e:	ed87 7a02 	vstr	s14, [r7, #8]
 8001a52:	edc7 7a03 	vstr	s15, [r7, #12]
    return vector.axis.x + vector.axis.y + vector.axis.z;
 8001a56:	ed97 7a01 	vldr	s14, [r7, #4]
 8001a5a:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a5e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a62:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a66:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8001a6a:	eeb0 0a67 	vmov.f32	s0, s15
 8001a6e:	3714      	adds	r7, #20
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr

08001a78 <FusionVectorMultiplyScalar>:
static inline FusionVector FusionVectorMultiplyScalar(const FusionVector vector, const float scalar) {
 8001a78:	b480      	push	{r7}
 8001a7a:	b08f      	sub	sp, #60	; 0x3c
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	eef0 6a40 	vmov.f32	s13, s0
 8001a82:	eeb0 7a60 	vmov.f32	s14, s1
 8001a86:	eef0 7a41 	vmov.f32	s15, s2
 8001a8a:	edc7 1a04 	vstr	s3, [r7, #16]
 8001a8e:	edc7 6a05 	vstr	s13, [r7, #20]
 8001a92:	ed87 7a06 	vstr	s14, [r7, #24]
 8001a96:	edc7 7a07 	vstr	s15, [r7, #28]
            .x = vector.axis.x * scalar,
 8001a9a:	ed97 7a05 	vldr	s14, [r7, #20]
 8001a9e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001aa2:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8001aa6:	edc7 7a08 	vstr	s15, [r7, #32]
            .y = vector.axis.y * scalar,
 8001aaa:	ed97 7a06 	vldr	s14, [r7, #24]
 8001aae:	edd7 7a04 	vldr	s15, [r7, #16]
 8001ab2:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8001ab6:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            .z = vector.axis.z * scalar,
 8001aba:	ed97 7a07 	vldr	s14, [r7, #28]
 8001abe:	edd7 7a04 	vldr	s15, [r7, #16]
 8001ac2:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8001ac6:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    return result;
 8001aca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ace:	f107 0220 	add.w	r2, r7, #32
 8001ad2:	ca07      	ldmia	r2, {r0, r1, r2}
 8001ad4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001ad8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001ada:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001adc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ade:	ee06 1a90 	vmov	s13, r1
 8001ae2:	ee07 2a10 	vmov	s14, r2
 8001ae6:	ee07 3a90 	vmov	s15, r3
}
 8001aea:	eeb0 0a66 	vmov.f32	s0, s13
 8001aee:	eef0 0a47 	vmov.f32	s1, s14
 8001af2:	eeb0 1a67 	vmov.f32	s2, s15
 8001af6:	373c      	adds	r7, #60	; 0x3c
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr

08001b00 <FusionVectorHadamardProduct>:
static inline FusionVector FusionVectorHadamardProduct(const FusionVector vectorA, const FusionVector vectorB) {
 8001b00:	b480      	push	{r7}
 8001b02:	b091      	sub	sp, #68	; 0x44
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	eeb0 5a40 	vmov.f32	s10, s0
 8001b0a:	eef0 5a60 	vmov.f32	s11, s1
 8001b0e:	eeb0 6a41 	vmov.f32	s12, s2
 8001b12:	eef0 6a61 	vmov.f32	s13, s3
 8001b16:	eeb0 7a42 	vmov.f32	s14, s4
 8001b1a:	eef0 7a62 	vmov.f32	s15, s5
 8001b1e:	ed87 5a07 	vstr	s10, [r7, #28]
 8001b22:	edc7 5a08 	vstr	s11, [r7, #32]
 8001b26:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 8001b2a:	edc7 6a04 	vstr	s13, [r7, #16]
 8001b2e:	ed87 7a05 	vstr	s14, [r7, #20]
 8001b32:	edc7 7a06 	vstr	s15, [r7, #24]
            .x = vectorA.axis.x * vectorB.axis.x,
 8001b36:	ed97 7a07 	vldr	s14, [r7, #28]
 8001b3a:	edd7 7a04 	vldr	s15, [r7, #16]
 8001b3e:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8001b42:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = vectorA.axis.y * vectorB.axis.y,
 8001b46:	ed97 7a08 	vldr	s14, [r7, #32]
 8001b4a:	edd7 7a05 	vldr	s15, [r7, #20]
 8001b4e:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8001b52:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = vectorA.axis.z * vectorB.axis.z,
 8001b56:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001b5a:	edd7 7a06 	vldr	s15, [r7, #24]
 8001b5e:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8001b62:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    return result;
 8001b66:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001b6a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001b6e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001b70:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001b74:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001b76:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001b78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b7a:	ee06 1a90 	vmov	s13, r1
 8001b7e:	ee07 2a10 	vmov	s14, r2
 8001b82:	ee07 3a90 	vmov	s15, r3
}
 8001b86:	eeb0 0a66 	vmov.f32	s0, s13
 8001b8a:	eef0 0a47 	vmov.f32	s1, s14
 8001b8e:	eeb0 1a67 	vmov.f32	s2, s15
 8001b92:	3744      	adds	r7, #68	; 0x44
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr

08001b9c <FusionVectorCrossProduct>:
static inline FusionVector FusionVectorCrossProduct(const FusionVector vectorA, const FusionVector vectorB) {
 8001b9c:	b480      	push	{r7}
 8001b9e:	b091      	sub	sp, #68	; 0x44
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	eeb0 5a40 	vmov.f32	s10, s0
 8001ba6:	eef0 5a60 	vmov.f32	s11, s1
 8001baa:	eeb0 6a41 	vmov.f32	s12, s2
 8001bae:	eef0 6a61 	vmov.f32	s13, s3
 8001bb2:	eeb0 7a42 	vmov.f32	s14, s4
 8001bb6:	eef0 7a62 	vmov.f32	s15, s5
 8001bba:	ed87 5a07 	vstr	s10, [r7, #28]
 8001bbe:	edc7 5a08 	vstr	s11, [r7, #32]
 8001bc2:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 8001bc6:	edc7 6a04 	vstr	s13, [r7, #16]
 8001bca:	ed87 7a05 	vstr	s14, [r7, #20]
 8001bce:	edc7 7a06 	vstr	s15, [r7, #24]
            .x = A.y * B.z - A.z * B.y,
 8001bd2:	ed97 7a08 	vldr	s14, [r7, #32]
 8001bd6:	edd7 7a06 	vldr	s15, [r7, #24]
 8001bda:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001bde:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8001be2:	edd7 7a05 	vldr	s15, [r7, #20]
 8001be6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bea:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8001bee:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = A.z * B.x - A.x * B.z,
 8001bf2:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001bf6:	edd7 7a04 	vldr	s15, [r7, #16]
 8001bfa:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001bfe:	edd7 6a07 	vldr	s13, [r7, #28]
 8001c02:	edd7 7a06 	vldr	s15, [r7, #24]
 8001c06:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c0a:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8001c0e:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = A.x * B.y - A.y * B.x,
 8001c12:	ed97 7a07 	vldr	s14, [r7, #28]
 8001c16:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c1a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c1e:	edd7 6a08 	vldr	s13, [r7, #32]
 8001c22:	edd7 7a04 	vldr	s15, [r7, #16]
 8001c26:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c2a:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8001c2e:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    return result;
 8001c32:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001c36:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001c3a:	ca07      	ldmia	r2, {r0, r1, r2}
 8001c3c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001c40:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001c42:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001c44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c46:	ee06 1a90 	vmov	s13, r1
 8001c4a:	ee07 2a10 	vmov	s14, r2
 8001c4e:	ee07 3a90 	vmov	s15, r3
}
 8001c52:	eeb0 0a66 	vmov.f32	s0, s13
 8001c56:	eef0 0a47 	vmov.f32	s1, s14
 8001c5a:	eeb0 1a67 	vmov.f32	s2, s15
 8001c5e:	3744      	adds	r7, #68	; 0x44
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr

08001c68 <FusionVectorMagnitudeSquared>:
static inline float FusionVectorMagnitudeSquared(const FusionVector vector) {
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b088      	sub	sp, #32
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	eef0 6a40 	vmov.f32	s13, s0
 8001c72:	eeb0 7a60 	vmov.f32	s14, s1
 8001c76:	eef0 7a41 	vmov.f32	s15, s2
 8001c7a:	edc7 6a01 	vstr	s13, [r7, #4]
 8001c7e:	ed87 7a02 	vstr	s14, [r7, #8]
 8001c82:	edc7 7a03 	vstr	s15, [r7, #12]
    return FusionVectorSum(FusionVectorHadamardProduct(vector, vector));
 8001c86:	ed97 5a01 	vldr	s10, [r7, #4]
 8001c8a:	edd7 5a02 	vldr	s11, [r7, #8]
 8001c8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8001c92:	edd7 6a01 	vldr	s13, [r7, #4]
 8001c96:	ed97 7a02 	vldr	s14, [r7, #8]
 8001c9a:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c9e:	eef0 1a45 	vmov.f32	s3, s10
 8001ca2:	eeb0 2a65 	vmov.f32	s4, s11
 8001ca6:	eef0 2a46 	vmov.f32	s5, s12
 8001caa:	eeb0 0a66 	vmov.f32	s0, s13
 8001cae:	eef0 0a47 	vmov.f32	s1, s14
 8001cb2:	eeb0 1a67 	vmov.f32	s2, s15
 8001cb6:	f7ff ff23 	bl	8001b00 <FusionVectorHadamardProduct>
 8001cba:	eef0 6a40 	vmov.f32	s13, s0
 8001cbe:	eeb0 7a60 	vmov.f32	s14, s1
 8001cc2:	eef0 7a41 	vmov.f32	s15, s2
 8001cc6:	edc7 6a05 	vstr	s13, [r7, #20]
 8001cca:	ed87 7a06 	vstr	s14, [r7, #24]
 8001cce:	edc7 7a07 	vstr	s15, [r7, #28]
 8001cd2:	edd7 6a05 	vldr	s13, [r7, #20]
 8001cd6:	ed97 7a06 	vldr	s14, [r7, #24]
 8001cda:	edd7 7a07 	vldr	s15, [r7, #28]
 8001cde:	eeb0 0a66 	vmov.f32	s0, s13
 8001ce2:	eef0 0a47 	vmov.f32	s1, s14
 8001ce6:	eeb0 1a67 	vmov.f32	s2, s15
 8001cea:	f7ff fea5 	bl	8001a38 <FusionVectorSum>
 8001cee:	eef0 7a40 	vmov.f32	s15, s0
}
 8001cf2:	eeb0 0a67 	vmov.f32	s0, s15
 8001cf6:	3720      	adds	r7, #32
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}

08001cfc <FusionVectorNormalise>:
static inline FusionVector FusionVectorNormalise(const FusionVector vector) {
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b08c      	sub	sp, #48	; 0x30
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	eef0 6a40 	vmov.f32	s13, s0
 8001d06:	eeb0 7a60 	vmov.f32	s14, s1
 8001d0a:	eef0 7a41 	vmov.f32	s15, s2
 8001d0e:	edc7 6a05 	vstr	s13, [r7, #20]
 8001d12:	ed87 7a06 	vstr	s14, [r7, #24]
 8001d16:	edc7 7a07 	vstr	s15, [r7, #28]
    const float magnitudeReciprocal = FusionFastInverseSqrt(FusionVectorMagnitudeSquared(vector));
 8001d1a:	edd7 6a05 	vldr	s13, [r7, #20]
 8001d1e:	ed97 7a06 	vldr	s14, [r7, #24]
 8001d22:	edd7 7a07 	vldr	s15, [r7, #28]
 8001d26:	eeb0 0a66 	vmov.f32	s0, s13
 8001d2a:	eef0 0a47 	vmov.f32	s1, s14
 8001d2e:	eeb0 1a67 	vmov.f32	s2, s15
 8001d32:	f7ff ff99 	bl	8001c68 <FusionVectorMagnitudeSquared>
 8001d36:	eef0 7a40 	vmov.f32	s15, s0
 8001d3a:	eeb0 0a67 	vmov.f32	s0, s15
 8001d3e:	f7ff fdcd 	bl	80018dc <FusionFastInverseSqrt>
 8001d42:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
    return FusionVectorMultiplyScalar(vector, magnitudeReciprocal);
 8001d46:	edd7 6a05 	vldr	s13, [r7, #20]
 8001d4a:	ed97 7a06 	vldr	s14, [r7, #24]
 8001d4e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001d52:	edd7 1a0b 	vldr	s3, [r7, #44]	; 0x2c
 8001d56:	eeb0 0a66 	vmov.f32	s0, s13
 8001d5a:	eef0 0a47 	vmov.f32	s1, s14
 8001d5e:	eeb0 1a67 	vmov.f32	s2, s15
 8001d62:	f7ff fe89 	bl	8001a78 <FusionVectorMultiplyScalar>
 8001d66:	eef0 6a40 	vmov.f32	s13, s0
 8001d6a:	eeb0 7a60 	vmov.f32	s14, s1
 8001d6e:	eef0 7a41 	vmov.f32	s15, s2
 8001d72:	edc7 6a08 	vstr	s13, [r7, #32]
 8001d76:	ed87 7a09 	vstr	s14, [r7, #36]	; 0x24
 8001d7a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 8001d7e:	6a39      	ldr	r1, [r7, #32]
 8001d80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d84:	ee06 1a90 	vmov	s13, r1
 8001d88:	ee07 2a10 	vmov	s14, r2
 8001d8c:	ee07 3a90 	vmov	s15, r3
}
 8001d90:	eeb0 0a66 	vmov.f32	s0, s13
 8001d94:	eef0 0a47 	vmov.f32	s1, s14
 8001d98:	eeb0 1a67 	vmov.f32	s2, s15
 8001d9c:	3730      	adds	r7, #48	; 0x30
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}

08001da2 <FusionQuaternionAdd>:
static inline FusionQuaternion FusionQuaternionAdd(const FusionQuaternion quaternionA, const FusionQuaternion quaternionB) {
 8001da2:	b490      	push	{r4, r7}
 8001da4:	b094      	sub	sp, #80	; 0x50
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	eeb0 4a40 	vmov.f32	s8, s0
 8001dac:	eef0 4a60 	vmov.f32	s9, s1
 8001db0:	eeb0 5a41 	vmov.f32	s10, s2
 8001db4:	eef0 5a61 	vmov.f32	s11, s3
 8001db8:	eeb0 6a42 	vmov.f32	s12, s4
 8001dbc:	eef0 6a62 	vmov.f32	s13, s5
 8001dc0:	eeb0 7a43 	vmov.f32	s14, s6
 8001dc4:	eef0 7a63 	vmov.f32	s15, s7
 8001dc8:	ed87 4a08 	vstr	s8, [r7, #32]
 8001dcc:	edc7 4a09 	vstr	s9, [r7, #36]	; 0x24
 8001dd0:	ed87 5a0a 	vstr	s10, [r7, #40]	; 0x28
 8001dd4:	edc7 5a0b 	vstr	s11, [r7, #44]	; 0x2c
 8001dd8:	ed87 6a04 	vstr	s12, [r7, #16]
 8001ddc:	edc7 6a05 	vstr	s13, [r7, #20]
 8001de0:	ed87 7a06 	vstr	s14, [r7, #24]
 8001de4:	edc7 7a07 	vstr	s15, [r7, #28]
            .w = quaternionA.element.w + quaternionB.element.w,
 8001de8:	ed97 7a08 	vldr	s14, [r7, #32]
 8001dec:	edd7 7a04 	vldr	s15, [r7, #16]
 8001df0:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8001df4:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
            .x = quaternionA.element.x + quaternionB.element.x,
 8001df8:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001dfc:	edd7 7a05 	vldr	s15, [r7, #20]
 8001e00:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8001e04:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
            .y = quaternionA.element.y + quaternionB.element.y,
 8001e08:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001e0c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001e10:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8001e14:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
            .z = quaternionA.element.z + quaternionB.element.z,
 8001e18:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8001e1c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001e20:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8001e24:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    return result;
 8001e28:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8001e2c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001e30:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e32:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001e36:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001e38:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001e3a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001e3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e3e:	ee06 0a10 	vmov	s12, r0
 8001e42:	ee06 1a90 	vmov	s13, r1
 8001e46:	ee07 2a10 	vmov	s14, r2
 8001e4a:	ee07 3a90 	vmov	s15, r3
}
 8001e4e:	eeb0 0a46 	vmov.f32	s0, s12
 8001e52:	eef0 0a66 	vmov.f32	s1, s13
 8001e56:	eeb0 1a47 	vmov.f32	s2, s14
 8001e5a:	eef0 1a67 	vmov.f32	s3, s15
 8001e5e:	3750      	adds	r7, #80	; 0x50
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bc90      	pop	{r4, r7}
 8001e64:	4770      	bx	lr

08001e66 <FusionQuaternionMultiply>:
static inline FusionQuaternion FusionQuaternionMultiply(const FusionQuaternion quaternionA, const FusionQuaternion quaternionB) {
 8001e66:	b490      	push	{r4, r7}
 8001e68:	b094      	sub	sp, #80	; 0x50
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	eeb0 4a40 	vmov.f32	s8, s0
 8001e70:	eef0 4a60 	vmov.f32	s9, s1
 8001e74:	eeb0 5a41 	vmov.f32	s10, s2
 8001e78:	eef0 5a61 	vmov.f32	s11, s3
 8001e7c:	eeb0 6a42 	vmov.f32	s12, s4
 8001e80:	eef0 6a62 	vmov.f32	s13, s5
 8001e84:	eeb0 7a43 	vmov.f32	s14, s6
 8001e88:	eef0 7a63 	vmov.f32	s15, s7
 8001e8c:	ed87 4a08 	vstr	s8, [r7, #32]
 8001e90:	edc7 4a09 	vstr	s9, [r7, #36]	; 0x24
 8001e94:	ed87 5a0a 	vstr	s10, [r7, #40]	; 0x28
 8001e98:	edc7 5a0b 	vstr	s11, [r7, #44]	; 0x2c
 8001e9c:	ed87 6a04 	vstr	s12, [r7, #16]
 8001ea0:	edc7 6a05 	vstr	s13, [r7, #20]
 8001ea4:	ed87 7a06 	vstr	s14, [r7, #24]
 8001ea8:	edc7 7a07 	vstr	s15, [r7, #28]
            .w = A.w * B.w - A.x * B.x - A.y * B.y - A.z * B.z,
 8001eac:	ed97 7a08 	vldr	s14, [r7, #32]
 8001eb0:	edd7 7a04 	vldr	s15, [r7, #16]
 8001eb4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001eb8:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8001ebc:	edd7 7a05 	vldr	s15, [r7, #20]
 8001ec0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ec4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001ec8:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8001ecc:	edd7 7a06 	vldr	s15, [r7, #24]
 8001ed0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ed4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001ed8:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8001edc:	edd7 7a07 	vldr	s15, [r7, #28]
 8001ee0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ee4:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8001ee8:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
            .x = A.w * B.x + A.x * B.w + A.y * B.z - A.z * B.y,
 8001eec:	ed97 7a08 	vldr	s14, [r7, #32]
 8001ef0:	edd7 7a05 	vldr	s15, [r7, #20]
 8001ef4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ef8:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8001efc:	edd7 7a04 	vldr	s15, [r7, #16]
 8001f00:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f04:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f08:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8001f0c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001f10:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f14:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f18:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8001f1c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001f20:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f24:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8001f28:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
            .y = A.w * B.y - A.x * B.z + A.y * B.w + A.z * B.x,
 8001f2c:	ed97 7a08 	vldr	s14, [r7, #32]
 8001f30:	edd7 7a06 	vldr	s15, [r7, #24]
 8001f34:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f38:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8001f3c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001f40:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f44:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001f48:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8001f4c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001f50:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f54:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f58:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8001f5c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001f60:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f64:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8001f68:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
            .z = A.w * B.z + A.x * B.y - A.y * B.x + A.z * B.w,
 8001f6c:	ed97 7a08 	vldr	s14, [r7, #32]
 8001f70:	edd7 7a07 	vldr	s15, [r7, #28]
 8001f74:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f78:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8001f7c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001f80:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f84:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f88:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8001f8c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001f90:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f94:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001f98:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8001f9c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001fa0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fa4:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8001fa8:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    return result;
 8001fac:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8001fb0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001fb4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001fb6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001fba:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001fbc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001fbe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001fc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001fc2:	ee06 0a10 	vmov	s12, r0
 8001fc6:	ee06 1a90 	vmov	s13, r1
 8001fca:	ee07 2a10 	vmov	s14, r2
 8001fce:	ee07 3a90 	vmov	s15, r3
}
 8001fd2:	eeb0 0a46 	vmov.f32	s0, s12
 8001fd6:	eef0 0a66 	vmov.f32	s1, s13
 8001fda:	eeb0 1a47 	vmov.f32	s2, s14
 8001fde:	eef0 1a67 	vmov.f32	s3, s15
 8001fe2:	3750      	adds	r7, #80	; 0x50
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bc90      	pop	{r4, r7}
 8001fe8:	4770      	bx	lr

08001fea <FusionQuaternionMultiplyVector>:
static inline FusionQuaternion FusionQuaternionMultiplyVector(const FusionQuaternion quaternion, const FusionVector vector) {
 8001fea:	b490      	push	{r4, r7}
 8001fec:	b094      	sub	sp, #80	; 0x50
 8001fee:	af00      	add	r7, sp, #0
 8001ff0:	eef0 4a40 	vmov.f32	s9, s0
 8001ff4:	eeb0 5a60 	vmov.f32	s10, s1
 8001ff8:	eef0 5a41 	vmov.f32	s11, s2
 8001ffc:	eeb0 6a61 	vmov.f32	s12, s3
 8002000:	eef0 6a42 	vmov.f32	s13, s4
 8002004:	eeb0 7a62 	vmov.f32	s14, s5
 8002008:	eef0 7a43 	vmov.f32	s15, s6
 800200c:	edc7 4a08 	vstr	s9, [r7, #32]
 8002010:	ed87 5a09 	vstr	s10, [r7, #36]	; 0x24
 8002014:	edc7 5a0a 	vstr	s11, [r7, #40]	; 0x28
 8002018:	ed87 6a0b 	vstr	s12, [r7, #44]	; 0x2c
 800201c:	edc7 6a05 	vstr	s13, [r7, #20]
 8002020:	ed87 7a06 	vstr	s14, [r7, #24]
 8002024:	edc7 7a07 	vstr	s15, [r7, #28]
            .w = -Q.x * V.x - Q.y * V.y - Q.z * V.z,
 8002028:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800202c:	eeb1 7a67 	vneg.f32	s14, s15
 8002030:	edd7 7a05 	vldr	s15, [r7, #20]
 8002034:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002038:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800203c:	edd7 7a06 	vldr	s15, [r7, #24]
 8002040:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002044:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002048:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800204c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002050:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002054:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8002058:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
            .x = Q.w * V.x + Q.y * V.z - Q.z * V.y,
 800205c:	ed97 7a08 	vldr	s14, [r7, #32]
 8002060:	edd7 7a05 	vldr	s15, [r7, #20]
 8002064:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002068:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800206c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002070:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002074:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002078:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800207c:	edd7 7a06 	vldr	s15, [r7, #24]
 8002080:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002084:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8002088:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
            .y = Q.w * V.y - Q.x * V.z + Q.z * V.x,
 800208c:	ed97 7a08 	vldr	s14, [r7, #32]
 8002090:	edd7 7a06 	vldr	s15, [r7, #24]
 8002094:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002098:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800209c:	edd7 7a07 	vldr	s15, [r7, #28]
 80020a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020a4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80020a8:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 80020ac:	edd7 7a05 	vldr	s15, [r7, #20]
 80020b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020b4:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 80020b8:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
            .z = Q.w * V.z + Q.x * V.y - Q.y * V.x,
 80020bc:	ed97 7a08 	vldr	s14, [r7, #32]
 80020c0:	edd7 7a07 	vldr	s15, [r7, #28]
 80020c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020c8:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80020cc:	edd7 7a06 	vldr	s15, [r7, #24]
 80020d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80020d8:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 80020dc:	edd7 7a05 	vldr	s15, [r7, #20]
 80020e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020e4:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 80020e8:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    return result;
 80020ec:	f107 0440 	add.w	r4, r7, #64	; 0x40
 80020f0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80020f4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80020f6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80020fa:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80020fc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80020fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002100:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002102:	ee06 0a10 	vmov	s12, r0
 8002106:	ee06 1a90 	vmov	s13, r1
 800210a:	ee07 2a10 	vmov	s14, r2
 800210e:	ee07 3a90 	vmov	s15, r3
}
 8002112:	eeb0 0a46 	vmov.f32	s0, s12
 8002116:	eef0 0a66 	vmov.f32	s1, s13
 800211a:	eeb0 1a47 	vmov.f32	s2, s14
 800211e:	eef0 1a67 	vmov.f32	s3, s15
 8002122:	3750      	adds	r7, #80	; 0x50
 8002124:	46bd      	mov	sp, r7
 8002126:	bc90      	pop	{r4, r7}
 8002128:	4770      	bx	lr

0800212a <FusionQuaternionNormalise>:
static inline FusionQuaternion FusionQuaternionNormalise(const FusionQuaternion quaternion) {
 800212a:	b590      	push	{r4, r7, lr}
 800212c:	b093      	sub	sp, #76	; 0x4c
 800212e:	af00      	add	r7, sp, #0
 8002130:	eeb0 6a40 	vmov.f32	s12, s0
 8002134:	eef0 6a60 	vmov.f32	s13, s1
 8002138:	eeb0 7a41 	vmov.f32	s14, s2
 800213c:	eef0 7a61 	vmov.f32	s15, s3
 8002140:	ed87 6a04 	vstr	s12, [r7, #16]
 8002144:	edc7 6a05 	vstr	s13, [r7, #20]
 8002148:	ed87 7a06 	vstr	s14, [r7, #24]
 800214c:	edc7 7a07 	vstr	s15, [r7, #28]
    const float magnitudeReciprocal = FusionFastInverseSqrt(Q.w * Q.w + Q.x * Q.x + Q.y * Q.y + Q.z * Q.z);
 8002150:	ed97 7a04 	vldr	s14, [r7, #16]
 8002154:	edd7 7a04 	vldr	s15, [r7, #16]
 8002158:	ee27 7a27 	vmul.f32	s14, s14, s15
 800215c:	edd7 6a05 	vldr	s13, [r7, #20]
 8002160:	edd7 7a05 	vldr	s15, [r7, #20]
 8002164:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002168:	ee37 7a27 	vadd.f32	s14, s14, s15
 800216c:	edd7 6a06 	vldr	s13, [r7, #24]
 8002170:	edd7 7a06 	vldr	s15, [r7, #24]
 8002174:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002178:	ee37 7a27 	vadd.f32	s14, s14, s15
 800217c:	edd7 6a07 	vldr	s13, [r7, #28]
 8002180:	edd7 7a07 	vldr	s15, [r7, #28]
 8002184:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002188:	ee77 7a27 	vadd.f32	s15, s14, s15
 800218c:	eeb0 0a67 	vmov.f32	s0, s15
 8002190:	f7ff fba4 	bl	80018dc <FusionFastInverseSqrt>
 8002194:	ed87 0a11 	vstr	s0, [r7, #68]	; 0x44
            .w = Q.w * magnitudeReciprocal,
 8002198:	ed97 7a04 	vldr	s14, [r7, #16]
 800219c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80021a0:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 80021a4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            .x = Q.x * magnitudeReciprocal,
 80021a8:	ed97 7a05 	vldr	s14, [r7, #20]
 80021ac:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80021b0:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 80021b4:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = Q.y * magnitudeReciprocal,
 80021b8:	ed97 7a06 	vldr	s14, [r7, #24]
 80021bc:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80021c0:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 80021c4:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = Q.z * magnitudeReciprocal,
 80021c8:	ed97 7a07 	vldr	s14, [r7, #28]
 80021cc:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80021d0:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 80021d4:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    return result;
 80021d8:	f107 0434 	add.w	r4, r7, #52	; 0x34
 80021dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021e0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80021e2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80021e6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80021e8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80021ea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80021ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021ee:	ee06 0a10 	vmov	s12, r0
 80021f2:	ee06 1a90 	vmov	s13, r1
 80021f6:	ee07 2a10 	vmov	s14, r2
 80021fa:	ee07 3a90 	vmov	s15, r3
}
 80021fe:	eeb0 0a46 	vmov.f32	s0, s12
 8002202:	eef0 0a66 	vmov.f32	s1, s13
 8002206:	eeb0 1a47 	vmov.f32	s2, s14
 800220a:	eef0 1a67 	vmov.f32	s3, s15
 800220e:	374c      	adds	r7, #76	; 0x4c
 8002210:	46bd      	mov	sp, r7
 8002212:	bd90      	pop	{r4, r7, pc}

08002214 <FusionAhrsInitialise>:

/**
 * @brief Initialises the AHRS algorithm structure.
 * @param ahrs AHRS algorithm structure.
 */
void FusionAhrsInitialise(FusionAhrs *const ahrs) {
 8002214:	b5b0      	push	{r4, r5, r7, lr}
 8002216:	b088      	sub	sp, #32
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
    const FusionAhrsSettings settings = {
 800221c:	4b0a      	ldr	r3, [pc, #40]	; (8002248 <FusionAhrsInitialise+0x34>)
 800221e:	f107 040c 	add.w	r4, r7, #12
 8002222:	461d      	mov	r5, r3
 8002224:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002226:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002228:	682b      	ldr	r3, [r5, #0]
 800222a:	6023      	str	r3, [r4, #0]
            .gain = 0.5f,
            .accelerationRejection = 90.0f,
            .magneticRejection = 90.0f,
            .rejectionTimeout = 0,
    };
    FusionAhrsSetSettings(ahrs, &settings);
 800222c:	f107 030c 	add.w	r3, r7, #12
 8002230:	4619      	mov	r1, r3
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f000 f868 	bl	8002308 <FusionAhrsSetSettings>
    FusionAhrsReset(ahrs);
 8002238:	6878      	ldr	r0, [r7, #4]
 800223a:	f000 f807 	bl	800224c <FusionAhrsReset>
}
 800223e:	bf00      	nop
 8002240:	3720      	adds	r7, #32
 8002242:	46bd      	mov	sp, r7
 8002244:	bdb0      	pop	{r4, r5, r7, pc}
 8002246:	bf00      	nop
 8002248:	08014424 	.word	0x08014424

0800224c <FusionAhrsReset>:
/**
 * @brief Resets the AHRS algorithm.  This is equivalent to reinitialising the
 * algorithm while maintaining the current settings.
 * @param ahrs AHRS algorithm structure.
 */
void FusionAhrsReset(FusionAhrs *const ahrs) {
 800224c:	b480      	push	{r7}
 800224e:	b091      	sub	sp, #68	; 0x44
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
    ahrs->quaternion = FUSION_IDENTITY_QUATERNION;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800225a:	615a      	str	r2, [r3, #20]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	f04f 0200 	mov.w	r2, #0
 8002262:	619a      	str	r2, [r3, #24]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	f04f 0200 	mov.w	r2, #0
 800226a:	61da      	str	r2, [r3, #28]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	f04f 0200 	mov.w	r2, #0
 8002272:	621a      	str	r2, [r3, #32]
    ahrs->accelerometer = FUSION_VECTOR_ZERO;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	f04f 0200 	mov.w	r2, #0
 800227a:	625a      	str	r2, [r3, #36]	; 0x24
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	f04f 0200 	mov.w	r2, #0
 8002282:	629a      	str	r2, [r3, #40]	; 0x28
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	f04f 0200 	mov.w	r2, #0
 800228a:	62da      	str	r2, [r3, #44]	; 0x2c
    ahrs->initialising = true;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2201      	movs	r2, #1
 8002290:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    ahrs->rampedGain = INITIAL_GAIN;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	4a1b      	ldr	r2, [pc, #108]	; (8002304 <FusionAhrsReset+0xb8>)
 8002298:	635a      	str	r2, [r3, #52]	; 0x34
    ahrs->halfAccelerometerFeedback = FUSION_VECTOR_ZERO;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	f04f 0200 	mov.w	r2, #0
 80022a0:	63da      	str	r2, [r3, #60]	; 0x3c
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	f04f 0200 	mov.w	r2, #0
 80022a8:	641a      	str	r2, [r3, #64]	; 0x40
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	f04f 0200 	mov.w	r2, #0
 80022b0:	645a      	str	r2, [r3, #68]	; 0x44
    ahrs->halfMagnetometerFeedback = FUSION_VECTOR_ZERO;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	f04f 0200 	mov.w	r2, #0
 80022b8:	649a      	str	r2, [r3, #72]	; 0x48
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	f04f 0200 	mov.w	r2, #0
 80022c0:	64da      	str	r2, [r3, #76]	; 0x4c
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	f04f 0200 	mov.w	r2, #0
 80022c8:	651a      	str	r2, [r3, #80]	; 0x50
    ahrs->accelerometerIgnored = false;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2200      	movs	r2, #0
 80022ce:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
    ahrs->accelerationRejectionTimer = 0;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2200      	movs	r2, #0
 80022d6:	659a      	str	r2, [r3, #88]	; 0x58
    ahrs->accelerationRejectionTimeout = false;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2200      	movs	r2, #0
 80022dc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
    ahrs->magnetometerIgnored = false;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2200      	movs	r2, #0
 80022e4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    ahrs->magneticRejectionTimer = 0;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2200      	movs	r2, #0
 80022ec:	661a      	str	r2, [r3, #96]	; 0x60
    ahrs->magneticRejectionTimeout = false;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2200      	movs	r2, #0
 80022f2:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
}
 80022f6:	bf00      	nop
 80022f8:	3744      	adds	r7, #68	; 0x44
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr
 8002302:	bf00      	nop
 8002304:	41200000 	.word	0x41200000

08002308 <FusionAhrsSetSettings>:
/**
 * @brief Sets the AHRS algorithm settings.
 * @param ahrs AHRS algorithm structure.
 * @param settings Settings.
 */
void FusionAhrsSetSettings(FusionAhrs *const ahrs, const FusionAhrsSettings *const settings) {
 8002308:	b580      	push	{r7, lr}
 800230a:	b082      	sub	sp, #8
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
 8002310:	6039      	str	r1, [r7, #0]
    ahrs->settings.convention = settings->convention;
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	781a      	ldrb	r2, [r3, #0]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	701a      	strb	r2, [r3, #0]
    ahrs->settings.gain = settings->gain;
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	685a      	ldr	r2, [r3, #4]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	605a      	str	r2, [r3, #4]
    if ((settings->accelerationRejection == 0.0f) || (settings->rejectionTimeout == 0)) {
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	edd3 7a02 	vldr	s15, [r3, #8]
 8002328:	eef5 7a40 	vcmp.f32	s15, #0.0
 800232c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002330:	d003      	beq.n	800233a <FusionAhrsSetSettings+0x32>
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	691b      	ldr	r3, [r3, #16]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d103      	bne.n	8002342 <FusionAhrsSetSettings+0x3a>
        ahrs->settings.accelerationRejection = FLT_MAX;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	4a38      	ldr	r2, [pc, #224]	; (8002420 <FusionAhrsSetSettings+0x118>)
 800233e:	609a      	str	r2, [r3, #8]
 8002340:	e01d      	b.n	800237e <FusionAhrsSetSettings+0x76>
    } else {
        ahrs->settings.accelerationRejection = powf(0.5f * sinf(FusionDegreesToRadians(settings->accelerationRejection)), 2);
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	edd3 7a02 	vldr	s15, [r3, #8]
 8002348:	eeb0 0a67 	vmov.f32	s0, s15
 800234c:	f7ff fab2 	bl	80018b4 <FusionDegreesToRadians>
 8002350:	eef0 7a40 	vmov.f32	s15, s0
 8002354:	eeb0 0a67 	vmov.f32	s0, s15
 8002358:	f010 fd0c 	bl	8012d74 <sinf>
 800235c:	eef0 7a40 	vmov.f32	s15, s0
 8002360:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002364:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002368:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800236c:	eeb0 0a67 	vmov.f32	s0, s15
 8002370:	f010 fd74 	bl	8012e5c <powf>
 8002374:	eef0 7a40 	vmov.f32	s15, s0
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	edc3 7a02 	vstr	s15, [r3, #8]
    }
    if ((settings->magneticRejection == 0.0f) || (settings->rejectionTimeout == 0)) {
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	edd3 7a03 	vldr	s15, [r3, #12]
 8002384:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002388:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800238c:	d003      	beq.n	8002396 <FusionAhrsSetSettings+0x8e>
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	691b      	ldr	r3, [r3, #16]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d103      	bne.n	800239e <FusionAhrsSetSettings+0x96>
        ahrs->settings.magneticRejection = FLT_MAX;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	4a21      	ldr	r2, [pc, #132]	; (8002420 <FusionAhrsSetSettings+0x118>)
 800239a:	60da      	str	r2, [r3, #12]
 800239c:	e01d      	b.n	80023da <FusionAhrsSetSettings+0xd2>
    } else {
        ahrs->settings.magneticRejection = powf(0.5f * sinf(FusionDegreesToRadians(settings->magneticRejection)), 2);
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	edd3 7a03 	vldr	s15, [r3, #12]
 80023a4:	eeb0 0a67 	vmov.f32	s0, s15
 80023a8:	f7ff fa84 	bl	80018b4 <FusionDegreesToRadians>
 80023ac:	eef0 7a40 	vmov.f32	s15, s0
 80023b0:	eeb0 0a67 	vmov.f32	s0, s15
 80023b4:	f010 fcde 	bl	8012d74 <sinf>
 80023b8:	eef0 7a40 	vmov.f32	s15, s0
 80023bc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80023c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023c4:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80023c8:	eeb0 0a67 	vmov.f32	s0, s15
 80023cc:	f010 fd46 	bl	8012e5c <powf>
 80023d0:	eef0 7a40 	vmov.f32	s15, s0
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	edc3 7a03 	vstr	s15, [r3, #12]
    }
    ahrs->settings.rejectionTimeout = settings->rejectionTimeout;
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	691a      	ldr	r2, [r3, #16]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	611a      	str	r2, [r3, #16]
    if (ahrs->initialising == false) {
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80023e8:	f083 0301 	eor.w	r3, r3, #1
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d003      	beq.n	80023fa <FusionAhrsSetSettings+0xf2>
        ahrs->rampedGain = ahrs->settings.gain;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	685a      	ldr	r2, [r3, #4]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	635a      	str	r2, [r3, #52]	; 0x34
    }
    ahrs->rampedGainStep = (INITIAL_GAIN - ahrs->settings.gain) / INITIALISATION_PERIOD;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	edd3 7a01 	vldr	s15, [r3, #4]
 8002400:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002404:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002408:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800240c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
}
 8002416:	bf00      	nop
 8002418:	3708      	adds	r7, #8
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	7f7fffff 	.word	0x7f7fffff

08002424 <FusionAhrsUpdate>:
 * @param gyroscope Gyroscope measurement in degrees per second.
 * @param accelerometer Accelerometer measurement in g.
 * @param magnetometer Magnetometer measurement in arbitrary units.
 * @param deltaTime Delta time in seconds.
 */
void FusionAhrsUpdate(FusionAhrs *const ahrs, const FusionVector gyroscope, const FusionVector accelerometer, const FusionVector magnetometer, const float deltaTime) {
 8002424:	b590      	push	{r4, r7, lr}
 8002426:	b0bf      	sub	sp, #252	; 0xfc
 8002428:	af00      	add	r7, sp, #0
 800242a:	62f8      	str	r0, [r7, #44]	; 0x2c
 800242c:	eeb0 5a61 	vmov.f32	s10, s3
 8002430:	eef0 5a42 	vmov.f32	s11, s4
 8002434:	eeb0 6a62 	vmov.f32	s12, s5
 8002438:	eef0 6a43 	vmov.f32	s13, s6
 800243c:	eeb0 7a63 	vmov.f32	s14, s7
 8002440:	eef0 7a44 	vmov.f32	s15, s8
 8002444:	edc7 4a01 	vstr	s9, [r7, #4]
 8002448:	ed87 0a08 	vstr	s0, [r7, #32]
 800244c:	edc7 0a09 	vstr	s1, [r7, #36]	; 0x24
 8002450:	ed87 1a0a 	vstr	s2, [r7, #40]	; 0x28
 8002454:	ed87 5a05 	vstr	s10, [r7, #20]
 8002458:	edc7 5a06 	vstr	s11, [r7, #24]
 800245c:	ed87 6a07 	vstr	s12, [r7, #28]
 8002460:	edc7 6a02 	vstr	s13, [r7, #8]
 8002464:	ed87 7a03 	vstr	s14, [r7, #12]
 8002468:	edc7 7a04 	vstr	s15, [r7, #16]
#define Q ahrs->quaternion.element

    // Store accelerometer
    ahrs->accelerometer = accelerometer;
 800246c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800246e:	3324      	adds	r3, #36	; 0x24
 8002470:	f107 0214 	add.w	r2, r7, #20
 8002474:	ca07      	ldmia	r2, {r0, r1, r2}
 8002476:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    // Ramp down gain during initialisation
    if (ahrs->initialising == true) {
 800247a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800247c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002480:	2b00      	cmp	r3, #0
 8002482:	d025      	beq.n	80024d0 <FusionAhrsUpdate+0xac>
        ahrs->rampedGain -= ahrs->rampedGainStep * deltaTime;
 8002484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002486:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 800248a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800248c:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 8002490:	edd7 7a01 	vldr	s15, [r7, #4]
 8002494:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002498:	ee77 7a67 	vsub.f32	s15, s14, s15
 800249c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800249e:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
        if (ahrs->rampedGain < ahrs->settings.gain) {
 80024a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024a4:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 80024a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024aa:	edd3 7a01 	vldr	s15, [r3, #4]
 80024ae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80024b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024b6:	d50b      	bpl.n	80024d0 <FusionAhrsUpdate+0xac>
            ahrs->rampedGain = ahrs->settings.gain;
 80024b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024ba:	685a      	ldr	r2, [r3, #4]
 80024bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024be:	635a      	str	r2, [r3, #52]	; 0x34
            ahrs->initialising = false;
 80024c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024c2:	2200      	movs	r2, #0
 80024c4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
            ahrs->accelerationRejectionTimeout = false;
 80024c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024ca:	2200      	movs	r2, #0
 80024cc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
        }
    }

    // Calculate direction of gravity indicated by algorithm
    const FusionVector halfGravity = HalfGravity(ahrs);
 80024d0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80024d2:	f000 fb08 	bl	8002ae6 <HalfGravity>
 80024d6:	eef0 6a40 	vmov.f32	s13, s0
 80024da:	eeb0 7a60 	vmov.f32	s14, s1
 80024de:	eef0 7a41 	vmov.f32	s15, s2
 80024e2:	edc7 6a25 	vstr	s13, [r7, #148]	; 0x94
 80024e6:	ed87 7a26 	vstr	s14, [r7, #152]	; 0x98
 80024ea:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c

    // Calculate accelerometer feedback
    FusionVector halfAccelerometerFeedback = FUSION_VECTOR_ZERO;
 80024ee:	f04f 0300 	mov.w	r3, #0
 80024f2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80024f6:	f04f 0300 	mov.w	r3, #0
 80024fa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80024fe:	f04f 0300 	mov.w	r3, #0
 8002502:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    ahrs->accelerometerIgnored = true;
 8002506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002508:	2201      	movs	r2, #1
 800250a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
    if (FusionVectorIsZero(accelerometer) == false) {
 800250e:	edd7 6a05 	vldr	s13, [r7, #20]
 8002512:	ed97 7a06 	vldr	s14, [r7, #24]
 8002516:	edd7 7a07 	vldr	s15, [r7, #28]
 800251a:	eeb0 0a66 	vmov.f32	s0, s13
 800251e:	eef0 0a47 	vmov.f32	s1, s14
 8002522:	eeb0 1a67 	vmov.f32	s2, s15
 8002526:	f7ff fa09 	bl	800193c <FusionVectorIsZero>
 800252a:	4603      	mov	r3, r0
 800252c:	f083 0301 	eor.w	r3, r3, #1
 8002530:	b2db      	uxtb	r3, r3
 8002532:	2b00      	cmp	r3, #0
 8002534:	f000 809b 	beq.w	800266e <FusionAhrsUpdate+0x24a>

        // Enter acceleration recovery state if acceleration rejection times out
        if (ahrs->accelerationRejectionTimer > ahrs->settings.rejectionTimeout) {
 8002538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800253a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800253c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800253e:	691b      	ldr	r3, [r3, #16]
 8002540:	429a      	cmp	r2, r3
 8002542:	d918      	bls.n	8002576 <FusionAhrsUpdate+0x152>
            const FusionQuaternion quaternion = ahrs->quaternion;
 8002544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002546:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 800254a:	3314      	adds	r3, #20
 800254c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800254e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            FusionAhrsReset(ahrs);
 8002552:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002554:	f7ff fe7a 	bl	800224c <FusionAhrsReset>
            ahrs->quaternion = quaternion;
 8002558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800255a:	f103 0414 	add.w	r4, r3, #20
 800255e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002562:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002564:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            ahrs->accelerationRejectionTimer = 0;
 8002568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800256a:	2200      	movs	r2, #0
 800256c:	659a      	str	r2, [r3, #88]	; 0x58
            ahrs->accelerationRejectionTimeout = true;
 800256e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002570:	2201      	movs	r2, #1
 8002572:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
        }

        // Calculate accelerometer feedback scaled by 0.5
        ahrs->halfAccelerometerFeedback = FusionVectorCrossProduct(FusionVectorNormalise(accelerometer), halfGravity);
 8002576:	edd7 6a05 	vldr	s13, [r7, #20]
 800257a:	ed97 7a06 	vldr	s14, [r7, #24]
 800257e:	edd7 7a07 	vldr	s15, [r7, #28]
 8002582:	eeb0 0a66 	vmov.f32	s0, s13
 8002586:	eef0 0a47 	vmov.f32	s1, s14
 800258a:	eeb0 1a67 	vmov.f32	s2, s15
 800258e:	f7ff fbb5 	bl	8001cfc <FusionVectorNormalise>
 8002592:	eef0 6a40 	vmov.f32	s13, s0
 8002596:	eeb0 7a60 	vmov.f32	s14, s1
 800259a:	eef0 7a41 	vmov.f32	s15, s2
 800259e:	edc7 6a28 	vstr	s13, [r7, #160]	; 0xa0
 80025a2:	ed87 7a29 	vstr	s14, [r7, #164]	; 0xa4
 80025a6:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
 80025aa:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 80025ac:	ed97 5a25 	vldr	s10, [r7, #148]	; 0x94
 80025b0:	edd7 5a26 	vldr	s11, [r7, #152]	; 0x98
 80025b4:	ed97 6a27 	vldr	s12, [r7, #156]	; 0x9c
 80025b8:	edd7 6a28 	vldr	s13, [r7, #160]	; 0xa0
 80025bc:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 80025c0:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80025c4:	eef0 1a45 	vmov.f32	s3, s10
 80025c8:	eeb0 2a65 	vmov.f32	s4, s11
 80025cc:	eef0 2a46 	vmov.f32	s5, s12
 80025d0:	eeb0 0a66 	vmov.f32	s0, s13
 80025d4:	eef0 0a47 	vmov.f32	s1, s14
 80025d8:	eeb0 1a67 	vmov.f32	s2, s15
 80025dc:	f7ff fade 	bl	8001b9c <FusionVectorCrossProduct>
 80025e0:	eef0 6a40 	vmov.f32	s13, s0
 80025e4:	eeb0 7a60 	vmov.f32	s14, s1
 80025e8:	eef0 7a41 	vmov.f32	s15, s2
 80025ec:	edc4 6a0f 	vstr	s13, [r4, #60]	; 0x3c
 80025f0:	ed84 7a10 	vstr	s14, [r4, #64]	; 0x40
 80025f4:	edc4 7a11 	vstr	s15, [r4, #68]	; 0x44

        // Ignore accelerometer if acceleration distortion detected
        if ((ahrs->initialising == true) || (FusionVectorMagnitudeSquared(ahrs->halfAccelerometerFeedback) <= ahrs->settings.accelerationRejection)) {
 80025f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025fa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d118      	bne.n	8002634 <FusionAhrsUpdate+0x210>
 8002602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002604:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 8002608:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 800260c:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8002610:	eeb0 0a66 	vmov.f32	s0, s13
 8002614:	eef0 0a47 	vmov.f32	s1, s14
 8002618:	eeb0 1a67 	vmov.f32	s2, s15
 800261c:	f7ff fb24 	bl	8001c68 <FusionVectorMagnitudeSquared>
 8002620:	eeb0 7a40 	vmov.f32	s14, s0
 8002624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002626:	edd3 7a02 	vldr	s15, [r3, #8]
 800262a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800262e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002632:	d817      	bhi.n	8002664 <FusionAhrsUpdate+0x240>
            halfAccelerometerFeedback = ahrs->halfAccelerometerFeedback;
 8002634:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002636:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800263a:	323c      	adds	r2, #60	; 0x3c
 800263c:	ca07      	ldmia	r2, {r0, r1, r2}
 800263e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            ahrs->accelerometerIgnored = false;
 8002642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002644:	2200      	movs	r2, #0
 8002646:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
            ahrs->accelerationRejectionTimer -= ahrs->accelerationRejectionTimer >= 10 ? 10 : 0;
 800264a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800264c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800264e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002650:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002652:	2b09      	cmp	r3, #9
 8002654:	d901      	bls.n	800265a <FusionAhrsUpdate+0x236>
 8002656:	230a      	movs	r3, #10
 8002658:	e000      	b.n	800265c <FusionAhrsUpdate+0x238>
 800265a:	2300      	movs	r3, #0
 800265c:	1ad2      	subs	r2, r2, r3
 800265e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002660:	659a      	str	r2, [r3, #88]	; 0x58
 8002662:	e004      	b.n	800266e <FusionAhrsUpdate+0x24a>
        } else {
            ahrs->accelerationRejectionTimer++;
 8002664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002666:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002668:	1c5a      	adds	r2, r3, #1
 800266a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800266c:	659a      	str	r2, [r3, #88]	; 0x58
        }
    }

    // Calculate magnetometer feedback
    FusionVector halfMagnetometerFeedback = FUSION_VECTOR_ZERO;
 800266e:	f04f 0300 	mov.w	r3, #0
 8002672:	673b      	str	r3, [r7, #112]	; 0x70
 8002674:	f04f 0300 	mov.w	r3, #0
 8002678:	677b      	str	r3, [r7, #116]	; 0x74
 800267a:	f04f 0300 	mov.w	r3, #0
 800267e:	67bb      	str	r3, [r7, #120]	; 0x78
    ahrs->magnetometerIgnored = true;
 8002680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002682:	2201      	movs	r2, #1
 8002684:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    if (FusionVectorIsZero(magnetometer) == false) {
 8002688:	edd7 6a02 	vldr	s13, [r7, #8]
 800268c:	ed97 7a03 	vldr	s14, [r7, #12]
 8002690:	edd7 7a04 	vldr	s15, [r7, #16]
 8002694:	eeb0 0a66 	vmov.f32	s0, s13
 8002698:	eef0 0a47 	vmov.f32	s1, s14
 800269c:	eeb0 1a67 	vmov.f32	s2, s15
 80026a0:	f7ff f94c 	bl	800193c <FusionVectorIsZero>
 80026a4:	4603      	mov	r3, r0
 80026a6:	f083 0301 	eor.w	r3, r3, #1
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	f000 80e6 	beq.w	800287e <FusionAhrsUpdate+0x45a>

        // Set to compass heading if magnetic rejection times out
        ahrs->magneticRejectionTimeout = false;
 80026b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026b4:	2200      	movs	r2, #0
 80026b6:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
        if (ahrs->magneticRejectionTimer > ahrs->settings.rejectionTimeout) {
 80026ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026bc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80026be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026c0:	691b      	ldr	r3, [r3, #16]
 80026c2:	429a      	cmp	r2, r3
 80026c4:	d92a      	bls.n	800271c <FusionAhrsUpdate+0x2f8>
            FusionAhrsSetHeading(ahrs, FusionCompassCalculateHeading(ahrs->settings.convention, halfGravity, magnetometer));
 80026c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026c8:	781b      	ldrb	r3, [r3, #0]
 80026ca:	ed97 5a02 	vldr	s10, [r7, #8]
 80026ce:	edd7 5a03 	vldr	s11, [r7, #12]
 80026d2:	ed97 6a04 	vldr	s12, [r7, #16]
 80026d6:	edd7 6a25 	vldr	s13, [r7, #148]	; 0x94
 80026da:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 80026de:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80026e2:	eef0 1a45 	vmov.f32	s3, s10
 80026e6:	eeb0 2a65 	vmov.f32	s4, s11
 80026ea:	eef0 2a46 	vmov.f32	s5, s12
 80026ee:	eeb0 0a66 	vmov.f32	s0, s13
 80026f2:	eef0 0a47 	vmov.f32	s1, s14
 80026f6:	eeb0 1a67 	vmov.f32	s2, s15
 80026fa:	4618      	mov	r0, r3
 80026fc:	f000 fe6e 	bl	80033dc <FusionCompassCalculateHeading>
 8002700:	eef0 7a40 	vmov.f32	s15, s0
 8002704:	eeb0 0a67 	vmov.f32	s0, s15
 8002708:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800270a:	f000 fbd6 	bl	8002eba <FusionAhrsSetHeading>
            ahrs->magneticRejectionTimer = 0;
 800270e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002710:	2200      	movs	r2, #0
 8002712:	661a      	str	r2, [r3, #96]	; 0x60
            ahrs->magneticRejectionTimeout = true;
 8002714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002716:	2201      	movs	r2, #1
 8002718:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
        }

        // Calculate direction of magnetic field indicated by algorithm
        const FusionVector halfMagnetic = HalfMagnetic(ahrs);
 800271c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800271e:	f000 fa9f 	bl	8002c60 <HalfMagnetic>
 8002722:	eef0 6a40 	vmov.f32	s13, s0
 8002726:	eeb0 7a60 	vmov.f32	s14, s1
 800272a:	eef0 7a41 	vmov.f32	s15, s2
 800272e:	edc7 6a0c 	vstr	s13, [r7, #48]	; 0x30
 8002732:	ed87 7a0d 	vstr	s14, [r7, #52]	; 0x34
 8002736:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38

        // Calculate magnetometer feedback scaled by 0.5
        ahrs->halfMagnetometerFeedback = FusionVectorCrossProduct(FusionVectorNormalise(FusionVectorCrossProduct(halfGravity, magnetometer)), halfMagnetic);
 800273a:	ed97 5a02 	vldr	s10, [r7, #8]
 800273e:	edd7 5a03 	vldr	s11, [r7, #12]
 8002742:	ed97 6a04 	vldr	s12, [r7, #16]
 8002746:	edd7 6a25 	vldr	s13, [r7, #148]	; 0x94
 800274a:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800274e:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8002752:	eef0 1a45 	vmov.f32	s3, s10
 8002756:	eeb0 2a65 	vmov.f32	s4, s11
 800275a:	eef0 2a46 	vmov.f32	s5, s12
 800275e:	eeb0 0a66 	vmov.f32	s0, s13
 8002762:	eef0 0a47 	vmov.f32	s1, s14
 8002766:	eeb0 1a67 	vmov.f32	s2, s15
 800276a:	f7ff fa17 	bl	8001b9c <FusionVectorCrossProduct>
 800276e:	eef0 6a40 	vmov.f32	s13, s0
 8002772:	eeb0 7a60 	vmov.f32	s14, s1
 8002776:	eef0 7a41 	vmov.f32	s15, s2
 800277a:	edc7 6a2b 	vstr	s13, [r7, #172]	; 0xac
 800277e:	ed87 7a2c 	vstr	s14, [r7, #176]	; 0xb0
 8002782:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
 8002786:	edd7 6a2b 	vldr	s13, [r7, #172]	; 0xac
 800278a:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 800278e:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8002792:	eeb0 0a66 	vmov.f32	s0, s13
 8002796:	eef0 0a47 	vmov.f32	s1, s14
 800279a:	eeb0 1a67 	vmov.f32	s2, s15
 800279e:	f7ff faad 	bl	8001cfc <FusionVectorNormalise>
 80027a2:	eef0 6a40 	vmov.f32	s13, s0
 80027a6:	eeb0 7a60 	vmov.f32	s14, s1
 80027aa:	eef0 7a41 	vmov.f32	s15, s2
 80027ae:	edc7 6a2e 	vstr	s13, [r7, #184]	; 0xb8
 80027b2:	ed87 7a2f 	vstr	s14, [r7, #188]	; 0xbc
 80027b6:	edc7 7a30 	vstr	s15, [r7, #192]	; 0xc0
 80027ba:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 80027bc:	ed97 5a0c 	vldr	s10, [r7, #48]	; 0x30
 80027c0:	edd7 5a0d 	vldr	s11, [r7, #52]	; 0x34
 80027c4:	ed97 6a0e 	vldr	s12, [r7, #56]	; 0x38
 80027c8:	edd7 6a2e 	vldr	s13, [r7, #184]	; 0xb8
 80027cc:	ed97 7a2f 	vldr	s14, [r7, #188]	; 0xbc
 80027d0:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 80027d4:	eef0 1a45 	vmov.f32	s3, s10
 80027d8:	eeb0 2a65 	vmov.f32	s4, s11
 80027dc:	eef0 2a46 	vmov.f32	s5, s12
 80027e0:	eeb0 0a66 	vmov.f32	s0, s13
 80027e4:	eef0 0a47 	vmov.f32	s1, s14
 80027e8:	eeb0 1a67 	vmov.f32	s2, s15
 80027ec:	f7ff f9d6 	bl	8001b9c <FusionVectorCrossProduct>
 80027f0:	eef0 6a40 	vmov.f32	s13, s0
 80027f4:	eeb0 7a60 	vmov.f32	s14, s1
 80027f8:	eef0 7a41 	vmov.f32	s15, s2
 80027fc:	edc4 6a12 	vstr	s13, [r4, #72]	; 0x48
 8002800:	ed84 7a13 	vstr	s14, [r4, #76]	; 0x4c
 8002804:	edc4 7a14 	vstr	s15, [r4, #80]	; 0x50

        // Ignore magnetometer if magnetic distortion detected
        if ((ahrs->initialising == true) || (FusionVectorMagnitudeSquared(ahrs->halfMagnetometerFeedback) <= ahrs->settings.magneticRejection)) {
 8002808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800280a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800280e:	2b00      	cmp	r3, #0
 8002810:	d118      	bne.n	8002844 <FusionAhrsUpdate+0x420>
 8002812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002814:	edd3 6a12 	vldr	s13, [r3, #72]	; 0x48
 8002818:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 800281c:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8002820:	eeb0 0a66 	vmov.f32	s0, s13
 8002824:	eef0 0a47 	vmov.f32	s1, s14
 8002828:	eeb0 1a67 	vmov.f32	s2, s15
 800282c:	f7ff fa1c 	bl	8001c68 <FusionVectorMagnitudeSquared>
 8002830:	eeb0 7a40 	vmov.f32	s14, s0
 8002834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002836:	edd3 7a03 	vldr	s15, [r3, #12]
 800283a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800283e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002842:	d817      	bhi.n	8002874 <FusionAhrsUpdate+0x450>
            halfMagnetometerFeedback = ahrs->halfMagnetometerFeedback;
 8002844:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002846:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800284a:	3248      	adds	r2, #72	; 0x48
 800284c:	ca07      	ldmia	r2, {r0, r1, r2}
 800284e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            ahrs->magnetometerIgnored = false;
 8002852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002854:	2200      	movs	r2, #0
 8002856:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
            ahrs->magneticRejectionTimer -= ahrs->magneticRejectionTimer >= 10 ? 10 : 0;
 800285a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800285c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800285e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002860:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002862:	2b09      	cmp	r3, #9
 8002864:	d901      	bls.n	800286a <FusionAhrsUpdate+0x446>
 8002866:	230a      	movs	r3, #10
 8002868:	e000      	b.n	800286c <FusionAhrsUpdate+0x448>
 800286a:	2300      	movs	r3, #0
 800286c:	1ad2      	subs	r2, r2, r3
 800286e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002870:	661a      	str	r2, [r3, #96]	; 0x60
 8002872:	e004      	b.n	800287e <FusionAhrsUpdate+0x45a>
        } else {
            ahrs->magneticRejectionTimer++;
 8002874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002876:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002878:	1c5a      	adds	r2, r3, #1
 800287a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800287c:	661a      	str	r2, [r3, #96]	; 0x60
        }
    }

    // Convert gyroscope to radians per second scaled by 0.5
    const FusionVector halfGyroscope = FusionVectorMultiplyScalar(gyroscope, FusionDegreesToRadians(0.5f));
 800287e:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8002882:	f7ff f817 	bl	80018b4 <FusionDegreesToRadians>
 8002886:	eeb0 6a40 	vmov.f32	s12, s0
 800288a:	edd7 6a08 	vldr	s13, [r7, #32]
 800288e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002892:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002896:	eef0 1a46 	vmov.f32	s3, s12
 800289a:	eeb0 0a66 	vmov.f32	s0, s13
 800289e:	eef0 0a47 	vmov.f32	s1, s14
 80028a2:	eeb0 1a67 	vmov.f32	s2, s15
 80028a6:	f7ff f8e7 	bl	8001a78 <FusionVectorMultiplyScalar>
 80028aa:	eef0 6a40 	vmov.f32	s13, s0
 80028ae:	eeb0 7a60 	vmov.f32	s14, s1
 80028b2:	eef0 7a41 	vmov.f32	s15, s2
 80028b6:	edc7 6a16 	vstr	s13, [r7, #88]	; 0x58
 80028ba:	ed87 7a17 	vstr	s14, [r7, #92]	; 0x5c
 80028be:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60

    // Apply feedback to gyroscope
    const FusionVector adjustedHalfGyroscope = FusionVectorAdd(halfGyroscope, FusionVectorMultiplyScalar(FusionVectorAdd(halfAccelerometerFeedback, halfMagnetometerFeedback), ahrs->rampedGain));
 80028c2:	ed97 5a1c 	vldr	s10, [r7, #112]	; 0x70
 80028c6:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 80028ca:	ed97 6a1e 	vldr	s12, [r7, #120]	; 0x78
 80028ce:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 80028d2:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 80028d6:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 80028da:	eef0 1a45 	vmov.f32	s3, s10
 80028de:	eeb0 2a65 	vmov.f32	s4, s11
 80028e2:	eef0 2a46 	vmov.f32	s5, s12
 80028e6:	eeb0 0a66 	vmov.f32	s0, s13
 80028ea:	eef0 0a47 	vmov.f32	s1, s14
 80028ee:	eeb0 1a67 	vmov.f32	s2, s15
 80028f2:	f7ff f853 	bl	800199c <FusionVectorAdd>
 80028f6:	eef0 6a40 	vmov.f32	s13, s0
 80028fa:	eeb0 7a60 	vmov.f32	s14, s1
 80028fe:	eef0 7a41 	vmov.f32	s15, s2
 8002902:	edc7 6a31 	vstr	s13, [r7, #196]	; 0xc4
 8002906:	ed87 7a32 	vstr	s14, [r7, #200]	; 0xc8
 800290a:	edc7 7a33 	vstr	s15, [r7, #204]	; 0xcc
 800290e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002910:	ed93 6a0d 	vldr	s12, [r3, #52]	; 0x34
 8002914:	edd7 6a31 	vldr	s13, [r7, #196]	; 0xc4
 8002918:	ed97 7a32 	vldr	s14, [r7, #200]	; 0xc8
 800291c:	edd7 7a33 	vldr	s15, [r7, #204]	; 0xcc
 8002920:	eef0 1a46 	vmov.f32	s3, s12
 8002924:	eeb0 0a66 	vmov.f32	s0, s13
 8002928:	eef0 0a47 	vmov.f32	s1, s14
 800292c:	eeb0 1a67 	vmov.f32	s2, s15
 8002930:	f7ff f8a2 	bl	8001a78 <FusionVectorMultiplyScalar>
 8002934:	eef0 6a40 	vmov.f32	s13, s0
 8002938:	eeb0 7a60 	vmov.f32	s14, s1
 800293c:	eef0 7a41 	vmov.f32	s15, s2
 8002940:	edc7 6a34 	vstr	s13, [r7, #208]	; 0xd0
 8002944:	ed87 7a35 	vstr	s14, [r7, #212]	; 0xd4
 8002948:	edc7 7a36 	vstr	s15, [r7, #216]	; 0xd8
 800294c:	ed97 5a34 	vldr	s10, [r7, #208]	; 0xd0
 8002950:	edd7 5a35 	vldr	s11, [r7, #212]	; 0xd4
 8002954:	ed97 6a36 	vldr	s12, [r7, #216]	; 0xd8
 8002958:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 800295c:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8002960:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8002964:	eef0 1a45 	vmov.f32	s3, s10
 8002968:	eeb0 2a65 	vmov.f32	s4, s11
 800296c:	eef0 2a46 	vmov.f32	s5, s12
 8002970:	eeb0 0a66 	vmov.f32	s0, s13
 8002974:	eef0 0a47 	vmov.f32	s1, s14
 8002978:	eeb0 1a67 	vmov.f32	s2, s15
 800297c:	f7ff f80e 	bl	800199c <FusionVectorAdd>
 8002980:	eef0 6a40 	vmov.f32	s13, s0
 8002984:	eeb0 7a60 	vmov.f32	s14, s1
 8002988:	eef0 7a41 	vmov.f32	s15, s2
 800298c:	edc7 6a13 	vstr	s13, [r7, #76]	; 0x4c
 8002990:	ed87 7a14 	vstr	s14, [r7, #80]	; 0x50
 8002994:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    // Integrate rate of change of quaternion
    ahrs->quaternion = FusionQuaternionAdd(ahrs->quaternion, FusionQuaternionMultiplyVector(ahrs->quaternion, FusionVectorMultiplyScalar(adjustedHalfGyroscope, deltaTime)));
 8002998:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 800299c:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80029a0:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80029a4:	edd7 1a01 	vldr	s3, [r7, #4]
 80029a8:	eeb0 0a66 	vmov.f32	s0, s13
 80029ac:	eef0 0a47 	vmov.f32	s1, s14
 80029b0:	eeb0 1a67 	vmov.f32	s2, s15
 80029b4:	f7ff f860 	bl	8001a78 <FusionVectorMultiplyScalar>
 80029b8:	eef0 6a40 	vmov.f32	s13, s0
 80029bc:	eeb0 7a60 	vmov.f32	s14, s1
 80029c0:	eef0 7a41 	vmov.f32	s15, s2
 80029c4:	edc7 6a37 	vstr	s13, [r7, #220]	; 0xdc
 80029c8:	ed87 7a38 	vstr	s14, [r7, #224]	; 0xe0
 80029cc:	edc7 7a39 	vstr	s15, [r7, #228]	; 0xe4
 80029d0:	edd7 4a37 	vldr	s9, [r7, #220]	; 0xdc
 80029d4:	ed97 5a38 	vldr	s10, [r7, #224]	; 0xe0
 80029d8:	edd7 5a39 	vldr	s11, [r7, #228]	; 0xe4
 80029dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029de:	ed93 6a05 	vldr	s12, [r3, #20]
 80029e2:	edd3 6a06 	vldr	s13, [r3, #24]
 80029e6:	ed93 7a07 	vldr	s14, [r3, #28]
 80029ea:	edd3 7a08 	vldr	s15, [r3, #32]
 80029ee:	eeb0 2a64 	vmov.f32	s4, s9
 80029f2:	eef0 2a45 	vmov.f32	s5, s10
 80029f6:	eeb0 3a65 	vmov.f32	s6, s11
 80029fa:	eeb0 0a46 	vmov.f32	s0, s12
 80029fe:	eef0 0a66 	vmov.f32	s1, s13
 8002a02:	eeb0 1a47 	vmov.f32	s2, s14
 8002a06:	eef0 1a67 	vmov.f32	s3, s15
 8002a0a:	f7ff faee 	bl	8001fea <FusionQuaternionMultiplyVector>
 8002a0e:	eeb0 6a40 	vmov.f32	s12, s0
 8002a12:	eef0 6a60 	vmov.f32	s13, s1
 8002a16:	eeb0 7a41 	vmov.f32	s14, s2
 8002a1a:	eef0 7a61 	vmov.f32	s15, s3
 8002a1e:	ed87 6a3a 	vstr	s12, [r7, #232]	; 0xe8
 8002a22:	edc7 6a3b 	vstr	s13, [r7, #236]	; 0xec
 8002a26:	ed87 7a3c 	vstr	s14, [r7, #240]	; 0xf0
 8002a2a:	edc7 7a3d 	vstr	s15, [r7, #244]	; 0xf4
 8002a2e:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 8002a30:	ed97 4a3a 	vldr	s8, [r7, #232]	; 0xe8
 8002a34:	edd7 4a3b 	vldr	s9, [r7, #236]	; 0xec
 8002a38:	ed97 5a3c 	vldr	s10, [r7, #240]	; 0xf0
 8002a3c:	edd7 5a3d 	vldr	s11, [r7, #244]	; 0xf4
 8002a40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a42:	ed93 6a05 	vldr	s12, [r3, #20]
 8002a46:	edd3 6a06 	vldr	s13, [r3, #24]
 8002a4a:	ed93 7a07 	vldr	s14, [r3, #28]
 8002a4e:	edd3 7a08 	vldr	s15, [r3, #32]
 8002a52:	eeb0 2a44 	vmov.f32	s4, s8
 8002a56:	eef0 2a64 	vmov.f32	s5, s9
 8002a5a:	eeb0 3a45 	vmov.f32	s6, s10
 8002a5e:	eef0 3a65 	vmov.f32	s7, s11
 8002a62:	eeb0 0a46 	vmov.f32	s0, s12
 8002a66:	eef0 0a66 	vmov.f32	s1, s13
 8002a6a:	eeb0 1a47 	vmov.f32	s2, s14
 8002a6e:	eef0 1a67 	vmov.f32	s3, s15
 8002a72:	f7ff f996 	bl	8001da2 <FusionQuaternionAdd>
 8002a76:	eeb0 6a40 	vmov.f32	s12, s0
 8002a7a:	eef0 6a60 	vmov.f32	s13, s1
 8002a7e:	eeb0 7a41 	vmov.f32	s14, s2
 8002a82:	eef0 7a61 	vmov.f32	s15, s3
 8002a86:	ed84 6a05 	vstr	s12, [r4, #20]
 8002a8a:	edc4 6a06 	vstr	s13, [r4, #24]
 8002a8e:	ed84 7a07 	vstr	s14, [r4, #28]
 8002a92:	edc4 7a08 	vstr	s15, [r4, #32]

    // Normalise quaternion
    ahrs->quaternion = FusionQuaternionNormalise(ahrs->quaternion);
 8002a96:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 8002a98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a9a:	ed93 6a05 	vldr	s12, [r3, #20]
 8002a9e:	edd3 6a06 	vldr	s13, [r3, #24]
 8002aa2:	ed93 7a07 	vldr	s14, [r3, #28]
 8002aa6:	edd3 7a08 	vldr	s15, [r3, #32]
 8002aaa:	eeb0 0a46 	vmov.f32	s0, s12
 8002aae:	eef0 0a66 	vmov.f32	s1, s13
 8002ab2:	eeb0 1a47 	vmov.f32	s2, s14
 8002ab6:	eef0 1a67 	vmov.f32	s3, s15
 8002aba:	f7ff fb36 	bl	800212a <FusionQuaternionNormalise>
 8002abe:	eeb0 6a40 	vmov.f32	s12, s0
 8002ac2:	eef0 6a60 	vmov.f32	s13, s1
 8002ac6:	eeb0 7a41 	vmov.f32	s14, s2
 8002aca:	eef0 7a61 	vmov.f32	s15, s3
 8002ace:	ed84 6a05 	vstr	s12, [r4, #20]
 8002ad2:	edc4 6a06 	vstr	s13, [r4, #24]
 8002ad6:	ed84 7a07 	vstr	s14, [r4, #28]
 8002ada:	edc4 7a08 	vstr	s15, [r4, #32]
#undef Q
}
 8002ade:	bf00      	nop
 8002ae0:	37fc      	adds	r7, #252	; 0xfc
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd90      	pop	{r4, r7, pc}

08002ae6 <HalfGravity>:
/**
 * @brief Returns the direction of gravity scaled by 0.5.
 * @param ahrs AHRS algorithm structure.
 * @return Direction of gravity scaled by 0.5.
 */
static FusionVector HalfGravity(const FusionAhrs *const ahrs) {
 8002ae6:	b480      	push	{r7}
 8002ae8:	b093      	sub	sp, #76	; 0x4c
 8002aea:	af00      	add	r7, sp, #0
 8002aec:	6178      	str	r0, [r7, #20]
#define Q ahrs->quaternion.element
    switch (ahrs->settings.convention) {
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	781b      	ldrb	r3, [r3, #0]
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	dc02      	bgt.n	8002afc <HalfGravity+0x16>
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	da03      	bge.n	8002b02 <HalfGravity+0x1c>
 8002afa:	e094      	b.n	8002c26 <HalfGravity+0x140>
 8002afc:	2b02      	cmp	r3, #2
 8002afe:	d048      	beq.n	8002b92 <HalfGravity+0xac>
 8002b00:	e091      	b.n	8002c26 <HalfGravity+0x140>
        case FusionConventionNwu:
        case FusionConventionEnu: {
            const FusionVector halfGravity = {.axis = {
                    .x = Q.x * Q.z - Q.w * Q.y,
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	ed93 7a06 	vldr	s14, [r3, #24]
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	edd3 7a08 	vldr	s15, [r3, #32]
 8002b0e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	edd3 6a05 	vldr	s13, [r3, #20]
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	edd3 7a07 	vldr	s15, [r3, #28]
 8002b1e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b22:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfGravity = {.axis = {
 8002b26:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                    .y = Q.y * Q.z + Q.w * Q.x,
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	ed93 7a07 	vldr	s14, [r3, #28]
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	edd3 7a08 	vldr	s15, [r3, #32]
 8002b36:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	edd3 6a05 	vldr	s13, [r3, #20]
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	edd3 7a06 	vldr	s15, [r3, #24]
 8002b46:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b4a:	ee77 7a27 	vadd.f32	s15, s14, s15
            const FusionVector halfGravity = {.axis = {
 8002b4e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
                    .z = Q.w * Q.w - 0.5f + Q.z * Q.z,
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	ed93 7a05 	vldr	s14, [r3, #20]
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	edd3 7a05 	vldr	s15, [r3, #20]
 8002b5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b62:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002b66:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	edd3 6a08 	vldr	s13, [r3, #32]
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	edd3 7a08 	vldr	s15, [r3, #32]
 8002b76:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b7a:	ee77 7a27 	vadd.f32	s15, s14, s15
            const FusionVector halfGravity = {.axis = {
 8002b7e:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            }}; // third column of transposed rotation matrix scaled by 0.5
            return halfGravity;
 8002b82:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002b86:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8002b8a:	ca07      	ldmia	r2, {r0, r1, r2}
 8002b8c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002b90:	e052      	b.n	8002c38 <HalfGravity+0x152>
        }
        case FusionConventionNed: {
            const FusionVector halfGravity = {.axis = {
                    .x = Q.w * Q.y - Q.x * Q.z,
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	ed93 7a05 	vldr	s14, [r3, #20]
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	edd3 7a07 	vldr	s15, [r3, #28]
 8002b9e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	edd3 6a06 	vldr	s13, [r3, #24]
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	edd3 7a08 	vldr	s15, [r3, #32]
 8002bae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002bb2:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfGravity = {.axis = {
 8002bb6:	edc7 7a06 	vstr	s15, [r7, #24]
                    .y = -1.0f * (Q.y * Q.z + Q.w * Q.x),
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	ed93 7a07 	vldr	s14, [r3, #28]
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	edd3 7a08 	vldr	s15, [r3, #32]
 8002bc6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	edd3 6a05 	vldr	s13, [r3, #20]
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	edd3 7a06 	vldr	s15, [r3, #24]
 8002bd6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002bda:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bde:	eef1 7a67 	vneg.f32	s15, s15
            const FusionVector halfGravity = {.axis = {
 8002be2:	edc7 7a07 	vstr	s15, [r7, #28]
                    .z = 0.5f - Q.w * Q.w - Q.z * Q.z,
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	ed93 7a05 	vldr	s14, [r3, #20]
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	edd3 7a05 	vldr	s15, [r3, #20]
 8002bf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bf6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002bfa:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	edd3 6a08 	vldr	s13, [r3, #32]
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	edd3 7a08 	vldr	s15, [r3, #32]
 8002c0a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c0e:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfGravity = {.axis = {
 8002c12:	edc7 7a08 	vstr	s15, [r7, #32]
            }}; // third column of transposed rotation matrix scaled by -0.5
            return halfGravity;
 8002c16:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002c1a:	f107 0218 	add.w	r2, r7, #24
 8002c1e:	ca07      	ldmia	r2, {r0, r1, r2}
 8002c20:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002c24:	e008      	b.n	8002c38 <HalfGravity+0x152>
        }
    }
    return FUSION_VECTOR_ZERO; // avoid compiler warning
 8002c26:	f04f 0300 	mov.w	r3, #0
 8002c2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c2c:	f04f 0300 	mov.w	r3, #0
 8002c30:	643b      	str	r3, [r7, #64]	; 0x40
 8002c32:	f04f 0300 	mov.w	r3, #0
 8002c36:	647b      	str	r3, [r7, #68]	; 0x44
#undef Q
}
 8002c38:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002c3a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002c3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c3e:	ee06 1a90 	vmov	s13, r1
 8002c42:	ee07 2a10 	vmov	s14, r2
 8002c46:	ee07 3a90 	vmov	s15, r3
 8002c4a:	eeb0 0a66 	vmov.f32	s0, s13
 8002c4e:	eef0 0a47 	vmov.f32	s1, s14
 8002c52:	eeb0 1a67 	vmov.f32	s2, s15
 8002c56:	374c      	adds	r7, #76	; 0x4c
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr

08002c60 <HalfMagnetic>:
/**
 * @brief Returns the direction of the magnetic field scaled by 0.5.
 * @param ahrs AHRS algorithm structure.
 * @return Direction of the magnetic field scaled by 0.5.
 */
static FusionVector HalfMagnetic(const FusionAhrs *const ahrs) {
 8002c60:	b480      	push	{r7}
 8002c62:	b097      	sub	sp, #92	; 0x5c
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6178      	str	r0, [r7, #20]
#define Q ahrs->quaternion.element
    switch (ahrs->settings.convention) {
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	781b      	ldrb	r3, [r3, #0]
 8002c6c:	2b02      	cmp	r3, #2
 8002c6e:	f000 809a 	beq.w	8002da6 <HalfMagnetic+0x146>
 8002c72:	2b02      	cmp	r3, #2
 8002c74:	f300 80e1 	bgt.w	8002e3a <HalfMagnetic+0x1da>
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d002      	beq.n	8002c82 <HalfMagnetic+0x22>
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	d048      	beq.n	8002d12 <HalfMagnetic+0xb2>
 8002c80:	e0db      	b.n	8002e3a <HalfMagnetic+0x1da>
        case FusionConventionNwu: {
            const FusionVector halfMagnetic = {.axis = {
                    .x = Q.x * Q.y + Q.w * Q.z,
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	ed93 7a06 	vldr	s14, [r3, #24]
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	edd3 7a07 	vldr	s15, [r3, #28]
 8002c8e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	edd3 6a05 	vldr	s13, [r3, #20]
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	edd3 7a08 	vldr	s15, [r3, #32]
 8002c9e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ca2:	ee77 7a27 	vadd.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 8002ca6:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
                    .y = Q.w * Q.w - 0.5f + Q.y * Q.y,
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	ed93 7a05 	vldr	s14, [r3, #20]
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	edd3 7a05 	vldr	s15, [r3, #20]
 8002cb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cba:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002cbe:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	edd3 6a07 	vldr	s13, [r3, #28]
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	edd3 7a07 	vldr	s15, [r3, #28]
 8002cce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002cd2:	ee77 7a27 	vadd.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 8002cd6:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
                    .z = Q.y * Q.z - Q.w * Q.x,
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	ed93 7a07 	vldr	s14, [r3, #28]
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	edd3 7a08 	vldr	s15, [r3, #32]
 8002ce6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	edd3 6a05 	vldr	s13, [r3, #20]
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	edd3 7a06 	vldr	s15, [r3, #24]
 8002cf6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002cfa:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 8002cfe:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
            }}; // second column of transposed rotation matrix scaled by 0.5
            return halfMagnetic;
 8002d02:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002d06:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002d0a:	ca07      	ldmia	r2, {r0, r1, r2}
 8002d0c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002d10:	e09c      	b.n	8002e4c <HalfMagnetic+0x1ec>
        }
        case FusionConventionEnu: {
            const FusionVector halfMagnetic = {.axis = {
                    .x = 0.5f - Q.w * Q.w - Q.x * Q.x,
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	ed93 7a05 	vldr	s14, [r3, #20]
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	edd3 7a05 	vldr	s15, [r3, #20]
 8002d1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d22:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002d26:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	edd3 6a06 	vldr	s13, [r3, #24]
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	edd3 7a06 	vldr	s15, [r3, #24]
 8002d36:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d3a:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 8002d3e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
                    .y = Q.w * Q.z - Q.x * Q.y,
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	ed93 7a05 	vldr	s14, [r3, #20]
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	edd3 7a08 	vldr	s15, [r3, #32]
 8002d4e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	edd3 6a06 	vldr	s13, [r3, #24]
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	edd3 7a07 	vldr	s15, [r3, #28]
 8002d5e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d62:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 8002d66:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
                    .z = -1.0f * (Q.x * Q.z + Q.w * Q.y),
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	ed93 7a06 	vldr	s14, [r3, #24]
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	edd3 7a08 	vldr	s15, [r3, #32]
 8002d76:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	edd3 6a05 	vldr	s13, [r3, #20]
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	edd3 7a07 	vldr	s15, [r3, #28]
 8002d86:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d8e:	eef1 7a67 	vneg.f32	s15, s15
            const FusionVector halfMagnetic = {.axis = {
 8002d92:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
            }}; // first column of transposed rotation matrix scaled by -0.5
            return halfMagnetic;
 8002d96:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002d9a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002d9e:	ca07      	ldmia	r2, {r0, r1, r2}
 8002da0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002da4:	e052      	b.n	8002e4c <HalfMagnetic+0x1ec>
        }
        case FusionConventionNed: {
            const FusionVector halfMagnetic = {.axis = {
                    .x = -1.0f * (Q.x * Q.y + Q.w * Q.z),
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	ed93 7a06 	vldr	s14, [r3, #24]
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	edd3 7a07 	vldr	s15, [r3, #28]
 8002db2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	edd3 6a05 	vldr	s13, [r3, #20]
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	edd3 7a08 	vldr	s15, [r3, #32]
 8002dc2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002dc6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002dca:	eef1 7a67 	vneg.f32	s15, s15
            const FusionVector halfMagnetic = {.axis = {
 8002dce:	edc7 7a07 	vstr	s15, [r7, #28]
                    .y = 0.5f - Q.w * Q.w - Q.y * Q.y,
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	ed93 7a05 	vldr	s14, [r3, #20]
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	edd3 7a05 	vldr	s15, [r3, #20]
 8002dde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002de2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002de6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	edd3 6a07 	vldr	s13, [r3, #28]
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	edd3 7a07 	vldr	s15, [r3, #28]
 8002df6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002dfa:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 8002dfe:	edc7 7a08 	vstr	s15, [r7, #32]
                    .z = Q.w * Q.x - Q.y * Q.z,
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	ed93 7a05 	vldr	s14, [r3, #20]
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	edd3 7a06 	vldr	s15, [r3, #24]
 8002e0e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	edd3 6a07 	vldr	s13, [r3, #28]
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	edd3 7a08 	vldr	s15, [r3, #32]
 8002e1e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e22:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 8002e26:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            }}; // second column of transposed rotation matrix scaled by -0.5
            return halfMagnetic;
 8002e2a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002e2e:	f107 021c 	add.w	r2, r7, #28
 8002e32:	ca07      	ldmia	r2, {r0, r1, r2}
 8002e34:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002e38:	e008      	b.n	8002e4c <HalfMagnetic+0x1ec>
        }
    }
    return FUSION_VECTOR_ZERO; // avoid compiler warning
 8002e3a:	f04f 0300 	mov.w	r3, #0
 8002e3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e40:	f04f 0300 	mov.w	r3, #0
 8002e44:	653b      	str	r3, [r7, #80]	; 0x50
 8002e46:	f04f 0300 	mov.w	r3, #0
 8002e4a:	657b      	str	r3, [r7, #84]	; 0x54
#undef Q
}
 8002e4c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002e4e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002e50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e52:	ee06 1a90 	vmov	s13, r1
 8002e56:	ee07 2a10 	vmov	s14, r2
 8002e5a:	ee07 3a90 	vmov	s15, r3
 8002e5e:	eeb0 0a66 	vmov.f32	s0, s13
 8002e62:	eef0 0a47 	vmov.f32	s1, s14
 8002e66:	eeb0 1a67 	vmov.f32	s2, s15
 8002e6a:	375c      	adds	r7, #92	; 0x5c
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e72:	4770      	bx	lr

08002e74 <FusionAhrsGetQuaternion>:
/**
 * @brief Returns the quaternion describing the sensor relative to the Earth.
 * @param ahrs AHRS algorithm structure.
 * @return Quaternion describing the sensor relative to the Earth.
 */
FusionQuaternion FusionAhrsGetQuaternion(const FusionAhrs *const ahrs) {
 8002e74:	b490      	push	{r4, r7}
 8002e76:	b08a      	sub	sp, #40	; 0x28
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6178      	str	r0, [r7, #20]
    return ahrs->quaternion;
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	f107 0418 	add.w	r4, r7, #24
 8002e82:	3314      	adds	r3, #20
 8002e84:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002e86:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002e8a:	69b8      	ldr	r0, [r7, #24]
 8002e8c:	69f9      	ldr	r1, [r7, #28]
 8002e8e:	6a3a      	ldr	r2, [r7, #32]
 8002e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e92:	ee06 0a10 	vmov	s12, r0
 8002e96:	ee06 1a90 	vmov	s13, r1
 8002e9a:	ee07 2a10 	vmov	s14, r2
 8002e9e:	ee07 3a90 	vmov	s15, r3
}
 8002ea2:	eeb0 0a46 	vmov.f32	s0, s12
 8002ea6:	eef0 0a66 	vmov.f32	s1, s13
 8002eaa:	eeb0 1a47 	vmov.f32	s2, s14
 8002eae:	eef0 1a67 	vmov.f32	s3, s15
 8002eb2:	3728      	adds	r7, #40	; 0x28
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bc90      	pop	{r4, r7}
 8002eb8:	4770      	bx	lr

08002eba <FusionAhrsSetHeading>:
 * algorithm.  This function can be used to reset drift in heading when the AHRS
 * algorithm is being used without a magnetometer.
 * @param ahrs AHRS algorithm structure.
 * @param heading Heading angle in degrees.
 */
void FusionAhrsSetHeading(FusionAhrs *const ahrs, const float heading) {
 8002eba:	b590      	push	{r4, r7, lr}
 8002ebc:	b089      	sub	sp, #36	; 0x24
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	6078      	str	r0, [r7, #4]
 8002ec2:	ed87 0a00 	vstr	s0, [r7]
#define Q ahrs->quaternion.element
    const float yaw = atan2f(Q.w * Q.z + Q.x * Q.y, 0.5f - Q.y * Q.y - Q.z * Q.z);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	ed93 7a05 	vldr	s14, [r3, #20]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	edd3 7a08 	vldr	s15, [r3, #32]
 8002ed2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	edd3 6a06 	vldr	s13, [r3, #24]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	edd3 7a07 	vldr	s15, [r3, #28]
 8002ee2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ee6:	ee37 6a27 	vadd.f32	s12, s14, s15
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	ed93 7a07 	vldr	s14, [r3, #28]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	edd3 7a07 	vldr	s15, [r3, #28]
 8002ef6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002efa:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002efe:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	edd3 6a08 	vldr	s13, [r3, #32]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	edd3 7a08 	vldr	s15, [r3, #32]
 8002f0e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f12:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f16:	eef0 0a67 	vmov.f32	s1, s15
 8002f1a:	eeb0 0a46 	vmov.f32	s0, s12
 8002f1e:	f00f ff9b 	bl	8012e58 <atan2f>
 8002f22:	ed87 0a07 	vstr	s0, [r7, #28]
    const float halfYawMinusHeading = 0.5f * (yaw - FusionDegreesToRadians(heading));
 8002f26:	ed97 0a00 	vldr	s0, [r7]
 8002f2a:	f7fe fcc3 	bl	80018b4 <FusionDegreesToRadians>
 8002f2e:	eeb0 7a40 	vmov.f32	s14, s0
 8002f32:	edd7 7a07 	vldr	s15, [r7, #28]
 8002f36:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002f3a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002f3e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f42:	edc7 7a06 	vstr	s15, [r7, #24]
    const FusionQuaternion rotation = {.element = {
            .w = cosf(halfYawMinusHeading),
 8002f46:	ed97 0a06 	vldr	s0, [r7, #24]
 8002f4a:	f00f fecf 	bl	8012cec <cosf>
 8002f4e:	eef0 7a40 	vmov.f32	s15, s0
    const FusionQuaternion rotation = {.element = {
 8002f52:	edc7 7a02 	vstr	s15, [r7, #8]
 8002f56:	f04f 0300 	mov.w	r3, #0
 8002f5a:	60fb      	str	r3, [r7, #12]
 8002f5c:	f04f 0300 	mov.w	r3, #0
 8002f60:	613b      	str	r3, [r7, #16]
            .x = 0.0f,
            .y = 0.0f,
            .z = -1.0f * sinf(halfYawMinusHeading),
 8002f62:	ed97 0a06 	vldr	s0, [r7, #24]
 8002f66:	f00f ff05 	bl	8012d74 <sinf>
 8002f6a:	eef0 7a40 	vmov.f32	s15, s0
 8002f6e:	eef1 7a67 	vneg.f32	s15, s15
    const FusionQuaternion rotation = {.element = {
 8002f72:	edc7 7a05 	vstr	s15, [r7, #20]
    }};
    ahrs->quaternion = FusionQuaternionMultiply(rotation, ahrs->quaternion);
 8002f76:	687c      	ldr	r4, [r7, #4]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	ed93 4a05 	vldr	s8, [r3, #20]
 8002f7e:	edd3 4a06 	vldr	s9, [r3, #24]
 8002f82:	ed93 5a07 	vldr	s10, [r3, #28]
 8002f86:	edd3 5a08 	vldr	s11, [r3, #32]
 8002f8a:	ed97 6a02 	vldr	s12, [r7, #8]
 8002f8e:	edd7 6a03 	vldr	s13, [r7, #12]
 8002f92:	ed97 7a04 	vldr	s14, [r7, #16]
 8002f96:	edd7 7a05 	vldr	s15, [r7, #20]
 8002f9a:	eeb0 2a44 	vmov.f32	s4, s8
 8002f9e:	eef0 2a64 	vmov.f32	s5, s9
 8002fa2:	eeb0 3a45 	vmov.f32	s6, s10
 8002fa6:	eef0 3a65 	vmov.f32	s7, s11
 8002faa:	eeb0 0a46 	vmov.f32	s0, s12
 8002fae:	eef0 0a66 	vmov.f32	s1, s13
 8002fb2:	eeb0 1a47 	vmov.f32	s2, s14
 8002fb6:	eef0 1a67 	vmov.f32	s3, s15
 8002fba:	f7fe ff54 	bl	8001e66 <FusionQuaternionMultiply>
 8002fbe:	eeb0 6a40 	vmov.f32	s12, s0
 8002fc2:	eef0 6a60 	vmov.f32	s13, s1
 8002fc6:	eeb0 7a41 	vmov.f32	s14, s2
 8002fca:	eef0 7a61 	vmov.f32	s15, s3
 8002fce:	ed84 6a05 	vstr	s12, [r4, #20]
 8002fd2:	edc4 6a06 	vstr	s13, [r4, #24]
 8002fd6:	ed84 7a07 	vstr	s14, [r4, #28]
 8002fda:	edc4 7a08 	vstr	s15, [r4, #32]
#undef Q
}
 8002fde:	bf00      	nop
 8002fe0:	3724      	adds	r7, #36	; 0x24
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd90      	pop	{r4, r7, pc}
	...

08002fe8 <FusionRadiansToDegrees>:
static inline float FusionRadiansToDegrees(const float radians) {
 8002fe8:	b480      	push	{r7}
 8002fea:	b083      	sub	sp, #12
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	ed87 0a01 	vstr	s0, [r7, #4]
    return radians * (180.0f / (float) M_PI);
 8002ff2:	edd7 7a01 	vldr	s15, [r7, #4]
 8002ff6:	ed9f 7a05 	vldr	s14, [pc, #20]	; 800300c <FusionRadiansToDegrees+0x24>
 8002ffa:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8002ffe:	eeb0 0a67 	vmov.f32	s0, s15
 8003002:	370c      	adds	r7, #12
 8003004:	46bd      	mov	sp, r7
 8003006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300a:	4770      	bx	lr
 800300c:	42652ee0 	.word	0x42652ee0

08003010 <FusionFastInverseSqrt>:
static inline float FusionFastInverseSqrt(const float x) {
 8003010:	b480      	push	{r7}
 8003012:	b085      	sub	sp, #20
 8003014:	af00      	add	r7, sp, #0
 8003016:	ed87 0a01 	vstr	s0, [r7, #4]
    Union32 union32 = {.f = x};
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	60fb      	str	r3, [r7, #12]
    union32.i = 0x5F1F1412 - (union32.i >> 1);
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	105a      	asrs	r2, r3, #1
 8003022:	4b10      	ldr	r3, [pc, #64]	; (8003064 <FusionFastInverseSqrt+0x54>)
 8003024:	1a9b      	subs	r3, r3, r2
 8003026:	60fb      	str	r3, [r7, #12]
    return union32.f * (1.69000231f - 0.714158168f * x * union32.f * union32.f);
 8003028:	ed97 7a03 	vldr	s14, [r7, #12]
 800302c:	edd7 7a01 	vldr	s15, [r7, #4]
 8003030:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8003068 <FusionFastInverseSqrt+0x58>
 8003034:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8003038:	edd7 7a03 	vldr	s15, [r7, #12]
 800303c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003040:	edd7 7a03 	vldr	s15, [r7, #12]
 8003044:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003048:	eddf 6a08 	vldr	s13, [pc, #32]	; 800306c <FusionFastInverseSqrt+0x5c>
 800304c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003050:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8003054:	eeb0 0a67 	vmov.f32	s0, s15
 8003058:	3714      	adds	r7, #20
 800305a:	46bd      	mov	sp, r7
 800305c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003060:	4770      	bx	lr
 8003062:	bf00      	nop
 8003064:	5f1f1412 	.word	0x5f1f1412
 8003068:	3f36d312 	.word	0x3f36d312
 800306c:	3fd851ff 	.word	0x3fd851ff

08003070 <FusionVectorSum>:
static inline float FusionVectorSum(const FusionVector vector) {
 8003070:	b480      	push	{r7}
 8003072:	b085      	sub	sp, #20
 8003074:	af00      	add	r7, sp, #0
 8003076:	eef0 6a40 	vmov.f32	s13, s0
 800307a:	eeb0 7a60 	vmov.f32	s14, s1
 800307e:	eef0 7a41 	vmov.f32	s15, s2
 8003082:	edc7 6a01 	vstr	s13, [r7, #4]
 8003086:	ed87 7a02 	vstr	s14, [r7, #8]
 800308a:	edc7 7a03 	vstr	s15, [r7, #12]
    return vector.axis.x + vector.axis.y + vector.axis.z;
 800308e:	ed97 7a01 	vldr	s14, [r7, #4]
 8003092:	edd7 7a02 	vldr	s15, [r7, #8]
 8003096:	ee37 7a27 	vadd.f32	s14, s14, s15
 800309a:	edd7 7a03 	vldr	s15, [r7, #12]
 800309e:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 80030a2:	eeb0 0a67 	vmov.f32	s0, s15
 80030a6:	3714      	adds	r7, #20
 80030a8:	46bd      	mov	sp, r7
 80030aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ae:	4770      	bx	lr

080030b0 <FusionVectorMultiplyScalar>:
static inline FusionVector FusionVectorMultiplyScalar(const FusionVector vector, const float scalar) {
 80030b0:	b480      	push	{r7}
 80030b2:	b08f      	sub	sp, #60	; 0x3c
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	eef0 6a40 	vmov.f32	s13, s0
 80030ba:	eeb0 7a60 	vmov.f32	s14, s1
 80030be:	eef0 7a41 	vmov.f32	s15, s2
 80030c2:	edc7 1a04 	vstr	s3, [r7, #16]
 80030c6:	edc7 6a05 	vstr	s13, [r7, #20]
 80030ca:	ed87 7a06 	vstr	s14, [r7, #24]
 80030ce:	edc7 7a07 	vstr	s15, [r7, #28]
            .x = vector.axis.x * scalar,
 80030d2:	ed97 7a05 	vldr	s14, [r7, #20]
 80030d6:	edd7 7a04 	vldr	s15, [r7, #16]
 80030da:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80030de:	edc7 7a08 	vstr	s15, [r7, #32]
            .y = vector.axis.y * scalar,
 80030e2:	ed97 7a06 	vldr	s14, [r7, #24]
 80030e6:	edd7 7a04 	vldr	s15, [r7, #16]
 80030ea:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80030ee:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            .z = vector.axis.z * scalar,
 80030f2:	ed97 7a07 	vldr	s14, [r7, #28]
 80030f6:	edd7 7a04 	vldr	s15, [r7, #16]
 80030fa:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80030fe:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    return result;
 8003102:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003106:	f107 0220 	add.w	r2, r7, #32
 800310a:	ca07      	ldmia	r2, {r0, r1, r2}
 800310c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003110:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003112:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003114:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003116:	ee06 1a90 	vmov	s13, r1
 800311a:	ee07 2a10 	vmov	s14, r2
 800311e:	ee07 3a90 	vmov	s15, r3
}
 8003122:	eeb0 0a66 	vmov.f32	s0, s13
 8003126:	eef0 0a47 	vmov.f32	s1, s14
 800312a:	eeb0 1a67 	vmov.f32	s2, s15
 800312e:	373c      	adds	r7, #60	; 0x3c
 8003130:	46bd      	mov	sp, r7
 8003132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003136:	4770      	bx	lr

08003138 <FusionVectorHadamardProduct>:
static inline FusionVector FusionVectorHadamardProduct(const FusionVector vectorA, const FusionVector vectorB) {
 8003138:	b480      	push	{r7}
 800313a:	b091      	sub	sp, #68	; 0x44
 800313c:	af00      	add	r7, sp, #0
 800313e:	eeb0 5a40 	vmov.f32	s10, s0
 8003142:	eef0 5a60 	vmov.f32	s11, s1
 8003146:	eeb0 6a41 	vmov.f32	s12, s2
 800314a:	eef0 6a61 	vmov.f32	s13, s3
 800314e:	eeb0 7a42 	vmov.f32	s14, s4
 8003152:	eef0 7a62 	vmov.f32	s15, s5
 8003156:	ed87 5a07 	vstr	s10, [r7, #28]
 800315a:	edc7 5a08 	vstr	s11, [r7, #32]
 800315e:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 8003162:	edc7 6a04 	vstr	s13, [r7, #16]
 8003166:	ed87 7a05 	vstr	s14, [r7, #20]
 800316a:	edc7 7a06 	vstr	s15, [r7, #24]
            .x = vectorA.axis.x * vectorB.axis.x,
 800316e:	ed97 7a07 	vldr	s14, [r7, #28]
 8003172:	edd7 7a04 	vldr	s15, [r7, #16]
 8003176:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800317a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = vectorA.axis.y * vectorB.axis.y,
 800317e:	ed97 7a08 	vldr	s14, [r7, #32]
 8003182:	edd7 7a05 	vldr	s15, [r7, #20]
 8003186:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800318a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = vectorA.axis.z * vectorB.axis.z,
 800318e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003192:	edd7 7a06 	vldr	s15, [r7, #24]
 8003196:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800319a:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    return result;
 800319e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80031a2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80031a6:	ca07      	ldmia	r2, {r0, r1, r2}
 80031a8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80031ac:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80031ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80031b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031b2:	ee06 1a90 	vmov	s13, r1
 80031b6:	ee07 2a10 	vmov	s14, r2
 80031ba:	ee07 3a90 	vmov	s15, r3
}
 80031be:	eeb0 0a66 	vmov.f32	s0, s13
 80031c2:	eef0 0a47 	vmov.f32	s1, s14
 80031c6:	eeb0 1a67 	vmov.f32	s2, s15
 80031ca:	3744      	adds	r7, #68	; 0x44
 80031cc:	46bd      	mov	sp, r7
 80031ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d2:	4770      	bx	lr

080031d4 <FusionVectorCrossProduct>:
static inline FusionVector FusionVectorCrossProduct(const FusionVector vectorA, const FusionVector vectorB) {
 80031d4:	b480      	push	{r7}
 80031d6:	b091      	sub	sp, #68	; 0x44
 80031d8:	af00      	add	r7, sp, #0
 80031da:	eeb0 5a40 	vmov.f32	s10, s0
 80031de:	eef0 5a60 	vmov.f32	s11, s1
 80031e2:	eeb0 6a41 	vmov.f32	s12, s2
 80031e6:	eef0 6a61 	vmov.f32	s13, s3
 80031ea:	eeb0 7a42 	vmov.f32	s14, s4
 80031ee:	eef0 7a62 	vmov.f32	s15, s5
 80031f2:	ed87 5a07 	vstr	s10, [r7, #28]
 80031f6:	edc7 5a08 	vstr	s11, [r7, #32]
 80031fa:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 80031fe:	edc7 6a04 	vstr	s13, [r7, #16]
 8003202:	ed87 7a05 	vstr	s14, [r7, #20]
 8003206:	edc7 7a06 	vstr	s15, [r7, #24]
            .x = A.y * B.z - A.z * B.y,
 800320a:	ed97 7a08 	vldr	s14, [r7, #32]
 800320e:	edd7 7a06 	vldr	s15, [r7, #24]
 8003212:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003216:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800321a:	edd7 7a05 	vldr	s15, [r7, #20]
 800321e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003222:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8003226:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = A.z * B.x - A.x * B.z,
 800322a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800322e:	edd7 7a04 	vldr	s15, [r7, #16]
 8003232:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003236:	edd7 6a07 	vldr	s13, [r7, #28]
 800323a:	edd7 7a06 	vldr	s15, [r7, #24]
 800323e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003242:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8003246:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = A.x * B.y - A.y * B.x,
 800324a:	ed97 7a07 	vldr	s14, [r7, #28]
 800324e:	edd7 7a05 	vldr	s15, [r7, #20]
 8003252:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003256:	edd7 6a08 	vldr	s13, [r7, #32]
 800325a:	edd7 7a04 	vldr	s15, [r7, #16]
 800325e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003262:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8003266:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    return result;
 800326a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800326e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003272:	ca07      	ldmia	r2, {r0, r1, r2}
 8003274:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003278:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800327a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800327c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800327e:	ee06 1a90 	vmov	s13, r1
 8003282:	ee07 2a10 	vmov	s14, r2
 8003286:	ee07 3a90 	vmov	s15, r3
}
 800328a:	eeb0 0a66 	vmov.f32	s0, s13
 800328e:	eef0 0a47 	vmov.f32	s1, s14
 8003292:	eeb0 1a67 	vmov.f32	s2, s15
 8003296:	3744      	adds	r7, #68	; 0x44
 8003298:	46bd      	mov	sp, r7
 800329a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329e:	4770      	bx	lr

080032a0 <FusionVectorMagnitudeSquared>:
static inline float FusionVectorMagnitudeSquared(const FusionVector vector) {
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b088      	sub	sp, #32
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	eef0 6a40 	vmov.f32	s13, s0
 80032aa:	eeb0 7a60 	vmov.f32	s14, s1
 80032ae:	eef0 7a41 	vmov.f32	s15, s2
 80032b2:	edc7 6a01 	vstr	s13, [r7, #4]
 80032b6:	ed87 7a02 	vstr	s14, [r7, #8]
 80032ba:	edc7 7a03 	vstr	s15, [r7, #12]
    return FusionVectorSum(FusionVectorHadamardProduct(vector, vector));
 80032be:	ed97 5a01 	vldr	s10, [r7, #4]
 80032c2:	edd7 5a02 	vldr	s11, [r7, #8]
 80032c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80032ca:	edd7 6a01 	vldr	s13, [r7, #4]
 80032ce:	ed97 7a02 	vldr	s14, [r7, #8]
 80032d2:	edd7 7a03 	vldr	s15, [r7, #12]
 80032d6:	eef0 1a45 	vmov.f32	s3, s10
 80032da:	eeb0 2a65 	vmov.f32	s4, s11
 80032de:	eef0 2a46 	vmov.f32	s5, s12
 80032e2:	eeb0 0a66 	vmov.f32	s0, s13
 80032e6:	eef0 0a47 	vmov.f32	s1, s14
 80032ea:	eeb0 1a67 	vmov.f32	s2, s15
 80032ee:	f7ff ff23 	bl	8003138 <FusionVectorHadamardProduct>
 80032f2:	eef0 6a40 	vmov.f32	s13, s0
 80032f6:	eeb0 7a60 	vmov.f32	s14, s1
 80032fa:	eef0 7a41 	vmov.f32	s15, s2
 80032fe:	edc7 6a05 	vstr	s13, [r7, #20]
 8003302:	ed87 7a06 	vstr	s14, [r7, #24]
 8003306:	edc7 7a07 	vstr	s15, [r7, #28]
 800330a:	edd7 6a05 	vldr	s13, [r7, #20]
 800330e:	ed97 7a06 	vldr	s14, [r7, #24]
 8003312:	edd7 7a07 	vldr	s15, [r7, #28]
 8003316:	eeb0 0a66 	vmov.f32	s0, s13
 800331a:	eef0 0a47 	vmov.f32	s1, s14
 800331e:	eeb0 1a67 	vmov.f32	s2, s15
 8003322:	f7ff fea5 	bl	8003070 <FusionVectorSum>
 8003326:	eef0 7a40 	vmov.f32	s15, s0
}
 800332a:	eeb0 0a67 	vmov.f32	s0, s15
 800332e:	3720      	adds	r7, #32
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}

08003334 <FusionVectorNormalise>:
static inline FusionVector FusionVectorNormalise(const FusionVector vector) {
 8003334:	b580      	push	{r7, lr}
 8003336:	b08c      	sub	sp, #48	; 0x30
 8003338:	af00      	add	r7, sp, #0
 800333a:	eef0 6a40 	vmov.f32	s13, s0
 800333e:	eeb0 7a60 	vmov.f32	s14, s1
 8003342:	eef0 7a41 	vmov.f32	s15, s2
 8003346:	edc7 6a05 	vstr	s13, [r7, #20]
 800334a:	ed87 7a06 	vstr	s14, [r7, #24]
 800334e:	edc7 7a07 	vstr	s15, [r7, #28]
    const float magnitudeReciprocal = FusionFastInverseSqrt(FusionVectorMagnitudeSquared(vector));
 8003352:	edd7 6a05 	vldr	s13, [r7, #20]
 8003356:	ed97 7a06 	vldr	s14, [r7, #24]
 800335a:	edd7 7a07 	vldr	s15, [r7, #28]
 800335e:	eeb0 0a66 	vmov.f32	s0, s13
 8003362:	eef0 0a47 	vmov.f32	s1, s14
 8003366:	eeb0 1a67 	vmov.f32	s2, s15
 800336a:	f7ff ff99 	bl	80032a0 <FusionVectorMagnitudeSquared>
 800336e:	eef0 7a40 	vmov.f32	s15, s0
 8003372:	eeb0 0a67 	vmov.f32	s0, s15
 8003376:	f7ff fe4b 	bl	8003010 <FusionFastInverseSqrt>
 800337a:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
    return FusionVectorMultiplyScalar(vector, magnitudeReciprocal);
 800337e:	edd7 6a05 	vldr	s13, [r7, #20]
 8003382:	ed97 7a06 	vldr	s14, [r7, #24]
 8003386:	edd7 7a07 	vldr	s15, [r7, #28]
 800338a:	edd7 1a0b 	vldr	s3, [r7, #44]	; 0x2c
 800338e:	eeb0 0a66 	vmov.f32	s0, s13
 8003392:	eef0 0a47 	vmov.f32	s1, s14
 8003396:	eeb0 1a67 	vmov.f32	s2, s15
 800339a:	f7ff fe89 	bl	80030b0 <FusionVectorMultiplyScalar>
 800339e:	eef0 6a40 	vmov.f32	s13, s0
 80033a2:	eeb0 7a60 	vmov.f32	s14, s1
 80033a6:	eef0 7a41 	vmov.f32	s15, s2
 80033aa:	edc7 6a08 	vstr	s13, [r7, #32]
 80033ae:	ed87 7a09 	vstr	s14, [r7, #36]	; 0x24
 80033b2:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 80033b6:	6a39      	ldr	r1, [r7, #32]
 80033b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033bc:	ee06 1a90 	vmov	s13, r1
 80033c0:	ee07 2a10 	vmov	s14, r2
 80033c4:	ee07 3a90 	vmov	s15, r3
}
 80033c8:	eeb0 0a66 	vmov.f32	s0, s13
 80033cc:	eef0 0a47 	vmov.f32	s1, s14
 80033d0:	eeb0 1a67 	vmov.f32	s2, s15
 80033d4:	3730      	adds	r7, #48	; 0x30
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}
	...

080033dc <FusionCompassCalculateHeading>:
 * @param convention Earth axes convention.
 * @param accelerometer Accelerometer measurement in any calibrated units.
 * @param magnetometer Magnetometer measurement in any calibrated units.
 * @return Heading angle in degrees.
 */
float FusionCompassCalculateHeading(const FusionConvention convention, const FusionVector accelerometer, const FusionVector magnetometer) {
 80033dc:	b580      	push	{r7, lr}
 80033de:	b0b2      	sub	sp, #200	; 0xc8
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	4603      	mov	r3, r0
 80033e4:	eeb0 5a40 	vmov.f32	s10, s0
 80033e8:	eef0 5a60 	vmov.f32	s11, s1
 80033ec:	eeb0 6a41 	vmov.f32	s12, s2
 80033f0:	eef0 6a61 	vmov.f32	s13, s3
 80033f4:	eeb0 7a42 	vmov.f32	s14, s4
 80033f8:	eef0 7a62 	vmov.f32	s15, s5
 80033fc:	77fb      	strb	r3, [r7, #31]
 80033fe:	ed87 5a04 	vstr	s10, [r7, #16]
 8003402:	edc7 5a05 	vstr	s11, [r7, #20]
 8003406:	ed87 6a06 	vstr	s12, [r7, #24]
 800340a:	edc7 6a01 	vstr	s13, [r7, #4]
 800340e:	ed87 7a02 	vstr	s14, [r7, #8]
 8003412:	edc7 7a03 	vstr	s15, [r7, #12]
    switch (convention) {
 8003416:	7ffb      	ldrb	r3, [r7, #31]
 8003418:	2b02      	cmp	r3, #2
 800341a:	f000 814b 	beq.w	80036b4 <FusionCompassCalculateHeading+0x2d8>
 800341e:	2b02      	cmp	r3, #2
 8003420:	f300 81f7 	bgt.w	8003812 <FusionCompassCalculateHeading+0x436>
 8003424:	2b00      	cmp	r3, #0
 8003426:	d003      	beq.n	8003430 <FusionCompassCalculateHeading+0x54>
 8003428:	2b01      	cmp	r3, #1
 800342a:	f000 8094 	beq.w	8003556 <FusionCompassCalculateHeading+0x17a>
 800342e:	e1f0      	b.n	8003812 <FusionCompassCalculateHeading+0x436>
        case FusionConventionNwu: {
            const FusionVector west = FusionVectorNormalise(FusionVectorCrossProduct(accelerometer, magnetometer));
 8003430:	ed97 5a01 	vldr	s10, [r7, #4]
 8003434:	edd7 5a02 	vldr	s11, [r7, #8]
 8003438:	ed97 6a03 	vldr	s12, [r7, #12]
 800343c:	edd7 6a04 	vldr	s13, [r7, #16]
 8003440:	ed97 7a05 	vldr	s14, [r7, #20]
 8003444:	edd7 7a06 	vldr	s15, [r7, #24]
 8003448:	eef0 1a45 	vmov.f32	s3, s10
 800344c:	eeb0 2a65 	vmov.f32	s4, s11
 8003450:	eef0 2a46 	vmov.f32	s5, s12
 8003454:	eeb0 0a66 	vmov.f32	s0, s13
 8003458:	eef0 0a47 	vmov.f32	s1, s14
 800345c:	eeb0 1a67 	vmov.f32	s2, s15
 8003460:	f7ff feb8 	bl	80031d4 <FusionVectorCrossProduct>
 8003464:	eef0 6a40 	vmov.f32	s13, s0
 8003468:	eeb0 7a60 	vmov.f32	s14, s1
 800346c:	eef0 7a41 	vmov.f32	s15, s2
 8003470:	edc7 6a20 	vstr	s13, [r7, #128]	; 0x80
 8003474:	ed87 7a21 	vstr	s14, [r7, #132]	; 0x84
 8003478:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
 800347c:	edd7 6a20 	vldr	s13, [r7, #128]	; 0x80
 8003480:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 8003484:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8003488:	eeb0 0a66 	vmov.f32	s0, s13
 800348c:	eef0 0a47 	vmov.f32	s1, s14
 8003490:	eeb0 1a67 	vmov.f32	s2, s15
 8003494:	f7ff ff4e 	bl	8003334 <FusionVectorNormalise>
 8003498:	eef0 6a40 	vmov.f32	s13, s0
 800349c:	eeb0 7a60 	vmov.f32	s14, s1
 80034a0:	eef0 7a41 	vmov.f32	s15, s2
 80034a4:	edc7 6a1d 	vstr	s13, [r7, #116]	; 0x74
 80034a8:	ed87 7a1e 	vstr	s14, [r7, #120]	; 0x78
 80034ac:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
            const FusionVector north = FusionVectorNormalise(FusionVectorCrossProduct(west, accelerometer));
 80034b0:	ed97 5a04 	vldr	s10, [r7, #16]
 80034b4:	edd7 5a05 	vldr	s11, [r7, #20]
 80034b8:	ed97 6a06 	vldr	s12, [r7, #24]
 80034bc:	edd7 6a1d 	vldr	s13, [r7, #116]	; 0x74
 80034c0:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 80034c4:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 80034c8:	eef0 1a45 	vmov.f32	s3, s10
 80034cc:	eeb0 2a65 	vmov.f32	s4, s11
 80034d0:	eef0 2a46 	vmov.f32	s5, s12
 80034d4:	eeb0 0a66 	vmov.f32	s0, s13
 80034d8:	eef0 0a47 	vmov.f32	s1, s14
 80034dc:	eeb0 1a67 	vmov.f32	s2, s15
 80034e0:	f7ff fe78 	bl	80031d4 <FusionVectorCrossProduct>
 80034e4:	eef0 6a40 	vmov.f32	s13, s0
 80034e8:	eeb0 7a60 	vmov.f32	s14, s1
 80034ec:	eef0 7a41 	vmov.f32	s15, s2
 80034f0:	edc7 6a23 	vstr	s13, [r7, #140]	; 0x8c
 80034f4:	ed87 7a24 	vstr	s14, [r7, #144]	; 0x90
 80034f8:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
 80034fc:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 8003500:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8003504:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8003508:	eeb0 0a66 	vmov.f32	s0, s13
 800350c:	eef0 0a47 	vmov.f32	s1, s14
 8003510:	eeb0 1a67 	vmov.f32	s2, s15
 8003514:	f7ff ff0e 	bl	8003334 <FusionVectorNormalise>
 8003518:	eef0 6a40 	vmov.f32	s13, s0
 800351c:	eeb0 7a60 	vmov.f32	s14, s1
 8003520:	eef0 7a41 	vmov.f32	s15, s2
 8003524:	edc7 6a1a 	vstr	s13, [r7, #104]	; 0x68
 8003528:	ed87 7a1b 	vstr	s14, [r7, #108]	; 0x6c
 800352c:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
            return FusionRadiansToDegrees(atan2f(west.axis.x, north.axis.x));
 8003530:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8003534:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 8003538:	eef0 0a47 	vmov.f32	s1, s14
 800353c:	eeb0 0a67 	vmov.f32	s0, s15
 8003540:	f00f fc8a 	bl	8012e58 <atan2f>
 8003544:	eef0 7a40 	vmov.f32	s15, s0
 8003548:	eeb0 0a67 	vmov.f32	s0, s15
 800354c:	f7ff fd4c 	bl	8002fe8 <FusionRadiansToDegrees>
 8003550:	eef0 7a40 	vmov.f32	s15, s0
 8003554:	e15f      	b.n	8003816 <FusionCompassCalculateHeading+0x43a>
        }
        case FusionConventionEnu: {
            const FusionVector west = FusionVectorNormalise(FusionVectorCrossProduct(accelerometer, magnetometer));
 8003556:	ed97 5a01 	vldr	s10, [r7, #4]
 800355a:	edd7 5a02 	vldr	s11, [r7, #8]
 800355e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003562:	edd7 6a04 	vldr	s13, [r7, #16]
 8003566:	ed97 7a05 	vldr	s14, [r7, #20]
 800356a:	edd7 7a06 	vldr	s15, [r7, #24]
 800356e:	eef0 1a45 	vmov.f32	s3, s10
 8003572:	eeb0 2a65 	vmov.f32	s4, s11
 8003576:	eef0 2a46 	vmov.f32	s5, s12
 800357a:	eeb0 0a66 	vmov.f32	s0, s13
 800357e:	eef0 0a47 	vmov.f32	s1, s14
 8003582:	eeb0 1a67 	vmov.f32	s2, s15
 8003586:	f7ff fe25 	bl	80031d4 <FusionVectorCrossProduct>
 800358a:	eef0 6a40 	vmov.f32	s13, s0
 800358e:	eeb0 7a60 	vmov.f32	s14, s1
 8003592:	eef0 7a41 	vmov.f32	s15, s2
 8003596:	edc7 6a26 	vstr	s13, [r7, #152]	; 0x98
 800359a:	ed87 7a27 	vstr	s14, [r7, #156]	; 0x9c
 800359e:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
 80035a2:	edd7 6a26 	vldr	s13, [r7, #152]	; 0x98
 80035a6:	ed97 7a27 	vldr	s14, [r7, #156]	; 0x9c
 80035aa:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80035ae:	eeb0 0a66 	vmov.f32	s0, s13
 80035b2:	eef0 0a47 	vmov.f32	s1, s14
 80035b6:	eeb0 1a67 	vmov.f32	s2, s15
 80035ba:	f7ff febb 	bl	8003334 <FusionVectorNormalise>
 80035be:	eef0 6a40 	vmov.f32	s13, s0
 80035c2:	eeb0 7a60 	vmov.f32	s14, s1
 80035c6:	eef0 7a41 	vmov.f32	s15, s2
 80035ca:	edc7 6a17 	vstr	s13, [r7, #92]	; 0x5c
 80035ce:	ed87 7a18 	vstr	s14, [r7, #96]	; 0x60
 80035d2:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
            const FusionVector north = FusionVectorNormalise(FusionVectorCrossProduct(west, accelerometer));
 80035d6:	ed97 5a04 	vldr	s10, [r7, #16]
 80035da:	edd7 5a05 	vldr	s11, [r7, #20]
 80035de:	ed97 6a06 	vldr	s12, [r7, #24]
 80035e2:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 80035e6:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80035ea:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80035ee:	eef0 1a45 	vmov.f32	s3, s10
 80035f2:	eeb0 2a65 	vmov.f32	s4, s11
 80035f6:	eef0 2a46 	vmov.f32	s5, s12
 80035fa:	eeb0 0a66 	vmov.f32	s0, s13
 80035fe:	eef0 0a47 	vmov.f32	s1, s14
 8003602:	eeb0 1a67 	vmov.f32	s2, s15
 8003606:	f7ff fde5 	bl	80031d4 <FusionVectorCrossProduct>
 800360a:	eef0 6a40 	vmov.f32	s13, s0
 800360e:	eeb0 7a60 	vmov.f32	s14, s1
 8003612:	eef0 7a41 	vmov.f32	s15, s2
 8003616:	edc7 6a29 	vstr	s13, [r7, #164]	; 0xa4
 800361a:	ed87 7a2a 	vstr	s14, [r7, #168]	; 0xa8
 800361e:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
 8003622:	edd7 6a29 	vldr	s13, [r7, #164]	; 0xa4
 8003626:	ed97 7a2a 	vldr	s14, [r7, #168]	; 0xa8
 800362a:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 800362e:	eeb0 0a66 	vmov.f32	s0, s13
 8003632:	eef0 0a47 	vmov.f32	s1, s14
 8003636:	eeb0 1a67 	vmov.f32	s2, s15
 800363a:	f7ff fe7b 	bl	8003334 <FusionVectorNormalise>
 800363e:	eef0 6a40 	vmov.f32	s13, s0
 8003642:	eeb0 7a60 	vmov.f32	s14, s1
 8003646:	eef0 7a41 	vmov.f32	s15, s2
 800364a:	edc7 6a14 	vstr	s13, [r7, #80]	; 0x50
 800364e:	ed87 7a15 	vstr	s14, [r7, #84]	; 0x54
 8003652:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
            const FusionVector east = FusionVectorMultiplyScalar(west, -1.0f);
 8003656:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 800365a:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800365e:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8003662:	eeff 1a00 	vmov.f32	s3, #240	; 0xbf800000 -1.0
 8003666:	eeb0 0a66 	vmov.f32	s0, s13
 800366a:	eef0 0a47 	vmov.f32	s1, s14
 800366e:	eeb0 1a67 	vmov.f32	s2, s15
 8003672:	f7ff fd1d 	bl	80030b0 <FusionVectorMultiplyScalar>
 8003676:	eef0 6a40 	vmov.f32	s13, s0
 800367a:	eeb0 7a60 	vmov.f32	s14, s1
 800367e:	eef0 7a41 	vmov.f32	s15, s2
 8003682:	edc7 6a11 	vstr	s13, [r7, #68]	; 0x44
 8003686:	ed87 7a12 	vstr	s14, [r7, #72]	; 0x48
 800368a:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
            return FusionRadiansToDegrees(atan2f(north.axis.x, east.axis.x));
 800368e:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8003692:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8003696:	eef0 0a47 	vmov.f32	s1, s14
 800369a:	eeb0 0a67 	vmov.f32	s0, s15
 800369e:	f00f fbdb 	bl	8012e58 <atan2f>
 80036a2:	eef0 7a40 	vmov.f32	s15, s0
 80036a6:	eeb0 0a67 	vmov.f32	s0, s15
 80036aa:	f7ff fc9d 	bl	8002fe8 <FusionRadiansToDegrees>
 80036ae:	eef0 7a40 	vmov.f32	s15, s0
 80036b2:	e0b0      	b.n	8003816 <FusionCompassCalculateHeading+0x43a>
        }
        case FusionConventionNed: {
            const FusionVector up = FusionVectorMultiplyScalar(accelerometer, -1.0f);
 80036b4:	edd7 6a04 	vldr	s13, [r7, #16]
 80036b8:	ed97 7a05 	vldr	s14, [r7, #20]
 80036bc:	edd7 7a06 	vldr	s15, [r7, #24]
 80036c0:	eeff 1a00 	vmov.f32	s3, #240	; 0xbf800000 -1.0
 80036c4:	eeb0 0a66 	vmov.f32	s0, s13
 80036c8:	eef0 0a47 	vmov.f32	s1, s14
 80036cc:	eeb0 1a67 	vmov.f32	s2, s15
 80036d0:	f7ff fcee 	bl	80030b0 <FusionVectorMultiplyScalar>
 80036d4:	eef0 6a40 	vmov.f32	s13, s0
 80036d8:	eeb0 7a60 	vmov.f32	s14, s1
 80036dc:	eef0 7a41 	vmov.f32	s15, s2
 80036e0:	edc7 6a0e 	vstr	s13, [r7, #56]	; 0x38
 80036e4:	ed87 7a0f 	vstr	s14, [r7, #60]	; 0x3c
 80036e8:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
            const FusionVector west = FusionVectorNormalise(FusionVectorCrossProduct(up, magnetometer));
 80036ec:	ed97 5a01 	vldr	s10, [r7, #4]
 80036f0:	edd7 5a02 	vldr	s11, [r7, #8]
 80036f4:	ed97 6a03 	vldr	s12, [r7, #12]
 80036f8:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 80036fc:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8003700:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8003704:	eef0 1a45 	vmov.f32	s3, s10
 8003708:	eeb0 2a65 	vmov.f32	s4, s11
 800370c:	eef0 2a46 	vmov.f32	s5, s12
 8003710:	eeb0 0a66 	vmov.f32	s0, s13
 8003714:	eef0 0a47 	vmov.f32	s1, s14
 8003718:	eeb0 1a67 	vmov.f32	s2, s15
 800371c:	f7ff fd5a 	bl	80031d4 <FusionVectorCrossProduct>
 8003720:	eef0 6a40 	vmov.f32	s13, s0
 8003724:	eeb0 7a60 	vmov.f32	s14, s1
 8003728:	eef0 7a41 	vmov.f32	s15, s2
 800372c:	edc7 6a2c 	vstr	s13, [r7, #176]	; 0xb0
 8003730:	ed87 7a2d 	vstr	s14, [r7, #180]	; 0xb4
 8003734:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
 8003738:	edd7 6a2c 	vldr	s13, [r7, #176]	; 0xb0
 800373c:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8003740:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8003744:	eeb0 0a66 	vmov.f32	s0, s13
 8003748:	eef0 0a47 	vmov.f32	s1, s14
 800374c:	eeb0 1a67 	vmov.f32	s2, s15
 8003750:	f7ff fdf0 	bl	8003334 <FusionVectorNormalise>
 8003754:	eef0 6a40 	vmov.f32	s13, s0
 8003758:	eeb0 7a60 	vmov.f32	s14, s1
 800375c:	eef0 7a41 	vmov.f32	s15, s2
 8003760:	edc7 6a0b 	vstr	s13, [r7, #44]	; 0x2c
 8003764:	ed87 7a0c 	vstr	s14, [r7, #48]	; 0x30
 8003768:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
            const FusionVector north = FusionVectorNormalise(FusionVectorCrossProduct(west, up));
 800376c:	ed97 5a0e 	vldr	s10, [r7, #56]	; 0x38
 8003770:	edd7 5a0f 	vldr	s11, [r7, #60]	; 0x3c
 8003774:	ed97 6a10 	vldr	s12, [r7, #64]	; 0x40
 8003778:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800377c:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8003780:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8003784:	eef0 1a45 	vmov.f32	s3, s10
 8003788:	eeb0 2a65 	vmov.f32	s4, s11
 800378c:	eef0 2a46 	vmov.f32	s5, s12
 8003790:	eeb0 0a66 	vmov.f32	s0, s13
 8003794:	eef0 0a47 	vmov.f32	s1, s14
 8003798:	eeb0 1a67 	vmov.f32	s2, s15
 800379c:	f7ff fd1a 	bl	80031d4 <FusionVectorCrossProduct>
 80037a0:	eef0 6a40 	vmov.f32	s13, s0
 80037a4:	eeb0 7a60 	vmov.f32	s14, s1
 80037a8:	eef0 7a41 	vmov.f32	s15, s2
 80037ac:	edc7 6a2f 	vstr	s13, [r7, #188]	; 0xbc
 80037b0:	ed87 7a30 	vstr	s14, [r7, #192]	; 0xc0
 80037b4:	edc7 7a31 	vstr	s15, [r7, #196]	; 0xc4
 80037b8:	edd7 6a2f 	vldr	s13, [r7, #188]	; 0xbc
 80037bc:	ed97 7a30 	vldr	s14, [r7, #192]	; 0xc0
 80037c0:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 80037c4:	eeb0 0a66 	vmov.f32	s0, s13
 80037c8:	eef0 0a47 	vmov.f32	s1, s14
 80037cc:	eeb0 1a67 	vmov.f32	s2, s15
 80037d0:	f7ff fdb0 	bl	8003334 <FusionVectorNormalise>
 80037d4:	eef0 6a40 	vmov.f32	s13, s0
 80037d8:	eeb0 7a60 	vmov.f32	s14, s1
 80037dc:	eef0 7a41 	vmov.f32	s15, s2
 80037e0:	edc7 6a08 	vstr	s13, [r7, #32]
 80037e4:	ed87 7a09 	vstr	s14, [r7, #36]	; 0x24
 80037e8:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            return FusionRadiansToDegrees(atan2f(west.axis.x, north.axis.x));
 80037ec:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80037f0:	ed97 7a08 	vldr	s14, [r7, #32]
 80037f4:	eef0 0a47 	vmov.f32	s1, s14
 80037f8:	eeb0 0a67 	vmov.f32	s0, s15
 80037fc:	f00f fb2c 	bl	8012e58 <atan2f>
 8003800:	eef0 7a40 	vmov.f32	s15, s0
 8003804:	eeb0 0a67 	vmov.f32	s0, s15
 8003808:	f7ff fbee 	bl	8002fe8 <FusionRadiansToDegrees>
 800380c:	eef0 7a40 	vmov.f32	s15, s0
 8003810:	e001      	b.n	8003816 <FusionCompassCalculateHeading+0x43a>
        }
    }
    return 0; // avoid compiler warning
 8003812:	eddf 7a03 	vldr	s15, [pc, #12]	; 8003820 <FusionCompassCalculateHeading+0x444>
}
 8003816:	eeb0 0a67 	vmov.f32	s0, s15
 800381a:	37c8      	adds	r7, #200	; 0xc8
 800381c:	46bd      	mov	sp, r7
 800381e:	bd80      	pop	{r7, pc}
 8003820:	00000000 	.word	0x00000000

08003824 <FusionVectorAdd>:
static inline FusionVector FusionVectorAdd(const FusionVector vectorA, const FusionVector vectorB) {
 8003824:	b480      	push	{r7}
 8003826:	b091      	sub	sp, #68	; 0x44
 8003828:	af00      	add	r7, sp, #0
 800382a:	eeb0 5a40 	vmov.f32	s10, s0
 800382e:	eef0 5a60 	vmov.f32	s11, s1
 8003832:	eeb0 6a41 	vmov.f32	s12, s2
 8003836:	eef0 6a61 	vmov.f32	s13, s3
 800383a:	eeb0 7a42 	vmov.f32	s14, s4
 800383e:	eef0 7a62 	vmov.f32	s15, s5
 8003842:	ed87 5a07 	vstr	s10, [r7, #28]
 8003846:	edc7 5a08 	vstr	s11, [r7, #32]
 800384a:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 800384e:	edc7 6a04 	vstr	s13, [r7, #16]
 8003852:	ed87 7a05 	vstr	s14, [r7, #20]
 8003856:	edc7 7a06 	vstr	s15, [r7, #24]
            .x = vectorA.axis.x + vectorB.axis.x,
 800385a:	ed97 7a07 	vldr	s14, [r7, #28]
 800385e:	edd7 7a04 	vldr	s15, [r7, #16]
 8003862:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8003866:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = vectorA.axis.y + vectorB.axis.y,
 800386a:	ed97 7a08 	vldr	s14, [r7, #32]
 800386e:	edd7 7a05 	vldr	s15, [r7, #20]
 8003872:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8003876:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = vectorA.axis.z + vectorB.axis.z,
 800387a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800387e:	edd7 7a06 	vldr	s15, [r7, #24]
 8003882:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8003886:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    return result;
 800388a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800388e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003892:	ca07      	ldmia	r2, {r0, r1, r2}
 8003894:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003898:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800389a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800389c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800389e:	ee06 1a90 	vmov	s13, r1
 80038a2:	ee07 2a10 	vmov	s14, r2
 80038a6:	ee07 3a90 	vmov	s15, r3
}
 80038aa:	eeb0 0a66 	vmov.f32	s0, s13
 80038ae:	eef0 0a47 	vmov.f32	s1, s14
 80038b2:	eeb0 1a67 	vmov.f32	s2, s15
 80038b6:	3744      	adds	r7, #68	; 0x44
 80038b8:	46bd      	mov	sp, r7
 80038ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038be:	4770      	bx	lr

080038c0 <FusionVectorSubtract>:
static inline FusionVector FusionVectorSubtract(const FusionVector vectorA, const FusionVector vectorB) {
 80038c0:	b480      	push	{r7}
 80038c2:	b091      	sub	sp, #68	; 0x44
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	eeb0 5a40 	vmov.f32	s10, s0
 80038ca:	eef0 5a60 	vmov.f32	s11, s1
 80038ce:	eeb0 6a41 	vmov.f32	s12, s2
 80038d2:	eef0 6a61 	vmov.f32	s13, s3
 80038d6:	eeb0 7a42 	vmov.f32	s14, s4
 80038da:	eef0 7a62 	vmov.f32	s15, s5
 80038de:	ed87 5a07 	vstr	s10, [r7, #28]
 80038e2:	edc7 5a08 	vstr	s11, [r7, #32]
 80038e6:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 80038ea:	edc7 6a04 	vstr	s13, [r7, #16]
 80038ee:	ed87 7a05 	vstr	s14, [r7, #20]
 80038f2:	edc7 7a06 	vstr	s15, [r7, #24]
            .x = vectorA.axis.x - vectorB.axis.x,
 80038f6:	ed97 7a07 	vldr	s14, [r7, #28]
 80038fa:	edd7 7a04 	vldr	s15, [r7, #16]
 80038fe:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8003902:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = vectorA.axis.y - vectorB.axis.y,
 8003906:	ed97 7a08 	vldr	s14, [r7, #32]
 800390a:	edd7 7a05 	vldr	s15, [r7, #20]
 800390e:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8003912:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = vectorA.axis.z - vectorB.axis.z,
 8003916:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800391a:	edd7 7a06 	vldr	s15, [r7, #24]
 800391e:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8003922:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    return result;
 8003926:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800392a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800392e:	ca07      	ldmia	r2, {r0, r1, r2}
 8003930:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003934:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003936:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003938:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800393a:	ee06 1a90 	vmov	s13, r1
 800393e:	ee07 2a10 	vmov	s14, r2
 8003942:	ee07 3a90 	vmov	s15, r3
}
 8003946:	eeb0 0a66 	vmov.f32	s0, s13
 800394a:	eef0 0a47 	vmov.f32	s1, s14
 800394e:	eeb0 1a67 	vmov.f32	s2, s15
 8003952:	3744      	adds	r7, #68	; 0x44
 8003954:	46bd      	mov	sp, r7
 8003956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395a:	4770      	bx	lr

0800395c <FusionVectorMultiplyScalar>:
static inline FusionVector FusionVectorMultiplyScalar(const FusionVector vector, const float scalar) {
 800395c:	b480      	push	{r7}
 800395e:	b08f      	sub	sp, #60	; 0x3c
 8003960:	af00      	add	r7, sp, #0
 8003962:	eef0 6a40 	vmov.f32	s13, s0
 8003966:	eeb0 7a60 	vmov.f32	s14, s1
 800396a:	eef0 7a41 	vmov.f32	s15, s2
 800396e:	edc7 1a04 	vstr	s3, [r7, #16]
 8003972:	edc7 6a05 	vstr	s13, [r7, #20]
 8003976:	ed87 7a06 	vstr	s14, [r7, #24]
 800397a:	edc7 7a07 	vstr	s15, [r7, #28]
            .x = vector.axis.x * scalar,
 800397e:	ed97 7a05 	vldr	s14, [r7, #20]
 8003982:	edd7 7a04 	vldr	s15, [r7, #16]
 8003986:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800398a:	edc7 7a08 	vstr	s15, [r7, #32]
            .y = vector.axis.y * scalar,
 800398e:	ed97 7a06 	vldr	s14, [r7, #24]
 8003992:	edd7 7a04 	vldr	s15, [r7, #16]
 8003996:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800399a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            .z = vector.axis.z * scalar,
 800399e:	ed97 7a07 	vldr	s14, [r7, #28]
 80039a2:	edd7 7a04 	vldr	s15, [r7, #16]
 80039a6:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80039aa:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    return result;
 80039ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80039b2:	f107 0220 	add.w	r2, r7, #32
 80039b6:	ca07      	ldmia	r2, {r0, r1, r2}
 80039b8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80039bc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80039be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039c2:	ee06 1a90 	vmov	s13, r1
 80039c6:	ee07 2a10 	vmov	s14, r2
 80039ca:	ee07 3a90 	vmov	s15, r3
}
 80039ce:	eeb0 0a66 	vmov.f32	s0, s13
 80039d2:	eef0 0a47 	vmov.f32	s1, s14
 80039d6:	eeb0 1a67 	vmov.f32	s2, s15
 80039da:	373c      	adds	r7, #60	; 0x3c
 80039dc:	46bd      	mov	sp, r7
 80039de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e2:	4770      	bx	lr

080039e4 <FusionOffsetInitialise>:
/**
 * @brief Initialises the gyroscope offset algorithm.
 * @param offset Gyroscope offset algorithm structure.
 * @param sampleRate Sample rate in Hz.
 */
void FusionOffsetInitialise(FusionOffset *const offset, const unsigned int sampleRate) {
 80039e4:	b480      	push	{r7}
 80039e6:	b087      	sub	sp, #28
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
 80039ec:	6039      	str	r1, [r7, #0]
    offset->filterCoefficient = 2.0f * (float) M_PI * CUTOFF_FREQUENCY * (1.0f / (float) sampleRate);
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	ee07 3a90 	vmov	s15, r3
 80039f4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80039f8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80039fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a00:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8003a44 <FusionOffsetInitialise+0x60>
 8003a04:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	edc3 7a00 	vstr	s15, [r3]
    offset->timeout = TIMEOUT * sampleRate;
 8003a0e:	683a      	ldr	r2, [r7, #0]
 8003a10:	4613      	mov	r3, r2
 8003a12:	009b      	lsls	r3, r3, #2
 8003a14:	441a      	add	r2, r3
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	605a      	str	r2, [r3, #4]
    offset->timer = 0;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	609a      	str	r2, [r3, #8]
    offset->gyroscopeOffset = FUSION_VECTOR_ZERO;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	f04f 0200 	mov.w	r2, #0
 8003a26:	60da      	str	r2, [r3, #12]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	f04f 0200 	mov.w	r2, #0
 8003a2e:	611a      	str	r2, [r3, #16]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	f04f 0200 	mov.w	r2, #0
 8003a36:	615a      	str	r2, [r3, #20]
}
 8003a38:	bf00      	nop
 8003a3a:	371c      	adds	r7, #28
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a42:	4770      	bx	lr
 8003a44:	3e00adfd 	.word	0x3e00adfd

08003a48 <FusionOffsetUpdate>:
 * gyroscope measurement.
 * @param offset Gyroscope offset algorithm structure.
 * @param gyroscope Gyroscope measurement in degrees per second.
 * @return Corrected gyroscope measurement in degrees per second.
 */
FusionVector FusionOffsetUpdate(FusionOffset *const offset, FusionVector gyroscope) {
 8003a48:	b590      	push	{r4, r7, lr}
 8003a4a:	b08f      	sub	sp, #60	; 0x3c
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	61f8      	str	r0, [r7, #28]
 8003a50:	eef0 6a40 	vmov.f32	s13, s0
 8003a54:	eeb0 7a60 	vmov.f32	s14, s1
 8003a58:	eef0 7a41 	vmov.f32	s15, s2
 8003a5c:	edc7 6a04 	vstr	s13, [r7, #16]
 8003a60:	ed87 7a05 	vstr	s14, [r7, #20]
 8003a64:	edc7 7a06 	vstr	s15, [r7, #24]

    // Subtract offset from gyroscope measurement
    gyroscope = FusionVectorSubtract(gyroscope, offset->gyroscopeOffset);
 8003a68:	69fb      	ldr	r3, [r7, #28]
 8003a6a:	ed93 5a03 	vldr	s10, [r3, #12]
 8003a6e:	edd3 5a04 	vldr	s11, [r3, #16]
 8003a72:	ed93 6a05 	vldr	s12, [r3, #20]
 8003a76:	edd7 6a04 	vldr	s13, [r7, #16]
 8003a7a:	ed97 7a05 	vldr	s14, [r7, #20]
 8003a7e:	edd7 7a06 	vldr	s15, [r7, #24]
 8003a82:	eef0 1a45 	vmov.f32	s3, s10
 8003a86:	eeb0 2a65 	vmov.f32	s4, s11
 8003a8a:	eef0 2a46 	vmov.f32	s5, s12
 8003a8e:	eeb0 0a66 	vmov.f32	s0, s13
 8003a92:	eef0 0a47 	vmov.f32	s1, s14
 8003a96:	eeb0 1a67 	vmov.f32	s2, s15
 8003a9a:	f7ff ff11 	bl	80038c0 <FusionVectorSubtract>
 8003a9e:	eef0 6a40 	vmov.f32	s13, s0
 8003aa2:	eeb0 7a60 	vmov.f32	s14, s1
 8003aa6:	eef0 7a41 	vmov.f32	s15, s2
 8003aaa:	edc7 6a04 	vstr	s13, [r7, #16]
 8003aae:	ed87 7a05 	vstr	s14, [r7, #20]
 8003ab2:	edc7 7a06 	vstr	s15, [r7, #24]

    // Reset timer if gyroscope not stationary
    if ((fabs(gyroscope.axis.x) > THRESHOLD) || (fabs(gyroscope.axis.y) > THRESHOLD) || (fabs(gyroscope.axis.z) > THRESHOLD)) {
 8003ab6:	edd7 7a04 	vldr	s15, [r7, #16]
 8003aba:	eef0 7ae7 	vabs.f32	s15, s15
 8003abe:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8003ac2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ac6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003aca:	dc15      	bgt.n	8003af8 <FusionOffsetUpdate+0xb0>
 8003acc:	edd7 7a05 	vldr	s15, [r7, #20]
 8003ad0:	eef0 7ae7 	vabs.f32	s15, s15
 8003ad4:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8003ad8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003adc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ae0:	dc0a      	bgt.n	8003af8 <FusionOffsetUpdate+0xb0>
 8003ae2:	edd7 7a06 	vldr	s15, [r7, #24]
 8003ae6:	eef0 7ae7 	vabs.f32	s15, s15
 8003aea:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8003aee:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003af2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003af6:	dd0a      	ble.n	8003b0e <FusionOffsetUpdate+0xc6>
        offset->timer = 0;
 8003af8:	69fb      	ldr	r3, [r7, #28]
 8003afa:	2200      	movs	r2, #0
 8003afc:	609a      	str	r2, [r3, #8]
        return gyroscope;
 8003afe:	f107 0320 	add.w	r3, r7, #32
 8003b02:	f107 0210 	add.w	r2, r7, #16
 8003b06:	ca07      	ldmia	r2, {r0, r1, r2}
 8003b08:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003b0c:	e060      	b.n	8003bd0 <FusionOffsetUpdate+0x188>
    }

    // Increment timer while gyroscope stationary
    if (offset->timer < offset->timeout) {
 8003b0e:	69fb      	ldr	r3, [r7, #28]
 8003b10:	689a      	ldr	r2, [r3, #8]
 8003b12:	69fb      	ldr	r3, [r7, #28]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	429a      	cmp	r2, r3
 8003b18:	d20c      	bcs.n	8003b34 <FusionOffsetUpdate+0xec>
        offset->timer++;
 8003b1a:	69fb      	ldr	r3, [r7, #28]
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	1c5a      	adds	r2, r3, #1
 8003b20:	69fb      	ldr	r3, [r7, #28]
 8003b22:	609a      	str	r2, [r3, #8]
        return gyroscope;
 8003b24:	f107 0320 	add.w	r3, r7, #32
 8003b28:	f107 0210 	add.w	r2, r7, #16
 8003b2c:	ca07      	ldmia	r2, {r0, r1, r2}
 8003b2e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003b32:	e04d      	b.n	8003bd0 <FusionOffsetUpdate+0x188>
    }

    // Adjust offset if timer has elapsed
    offset->gyroscopeOffset = FusionVectorAdd(offset->gyroscopeOffset, FusionVectorMultiplyScalar(gyroscope, offset->filterCoefficient));
 8003b34:	69fb      	ldr	r3, [r7, #28]
 8003b36:	ed93 6a00 	vldr	s12, [r3]
 8003b3a:	edd7 6a04 	vldr	s13, [r7, #16]
 8003b3e:	ed97 7a05 	vldr	s14, [r7, #20]
 8003b42:	edd7 7a06 	vldr	s15, [r7, #24]
 8003b46:	eef0 1a46 	vmov.f32	s3, s12
 8003b4a:	eeb0 0a66 	vmov.f32	s0, s13
 8003b4e:	eef0 0a47 	vmov.f32	s1, s14
 8003b52:	eeb0 1a67 	vmov.f32	s2, s15
 8003b56:	f7ff ff01 	bl	800395c <FusionVectorMultiplyScalar>
 8003b5a:	eef0 6a40 	vmov.f32	s13, s0
 8003b5e:	eeb0 7a60 	vmov.f32	s14, s1
 8003b62:	eef0 7a41 	vmov.f32	s15, s2
 8003b66:	edc7 6a0b 	vstr	s13, [r7, #44]	; 0x2c
 8003b6a:	ed87 7a0c 	vstr	s14, [r7, #48]	; 0x30
 8003b6e:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
 8003b72:	69fc      	ldr	r4, [r7, #28]
 8003b74:	ed97 5a0b 	vldr	s10, [r7, #44]	; 0x2c
 8003b78:	edd7 5a0c 	vldr	s11, [r7, #48]	; 0x30
 8003b7c:	ed97 6a0d 	vldr	s12, [r7, #52]	; 0x34
 8003b80:	69fb      	ldr	r3, [r7, #28]
 8003b82:	edd3 6a03 	vldr	s13, [r3, #12]
 8003b86:	ed93 7a04 	vldr	s14, [r3, #16]
 8003b8a:	edd3 7a05 	vldr	s15, [r3, #20]
 8003b8e:	eef0 1a45 	vmov.f32	s3, s10
 8003b92:	eeb0 2a65 	vmov.f32	s4, s11
 8003b96:	eef0 2a46 	vmov.f32	s5, s12
 8003b9a:	eeb0 0a66 	vmov.f32	s0, s13
 8003b9e:	eef0 0a47 	vmov.f32	s1, s14
 8003ba2:	eeb0 1a67 	vmov.f32	s2, s15
 8003ba6:	f7ff fe3d 	bl	8003824 <FusionVectorAdd>
 8003baa:	eef0 6a40 	vmov.f32	s13, s0
 8003bae:	eeb0 7a60 	vmov.f32	s14, s1
 8003bb2:	eef0 7a41 	vmov.f32	s15, s2
 8003bb6:	edc4 6a03 	vstr	s13, [r4, #12]
 8003bba:	ed84 7a04 	vstr	s14, [r4, #16]
 8003bbe:	edc4 7a05 	vstr	s15, [r4, #20]
    return gyroscope;
 8003bc2:	f107 0320 	add.w	r3, r7, #32
 8003bc6:	f107 0210 	add.w	r2, r7, #16
 8003bca:	ca07      	ldmia	r2, {r0, r1, r2}
 8003bcc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 8003bd0:	6a39      	ldr	r1, [r7, #32]
 8003bd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bd6:	ee06 1a90 	vmov	s13, r1
 8003bda:	ee07 2a10 	vmov	s14, r2
 8003bde:	ee07 3a90 	vmov	s15, r3
 8003be2:	eeb0 0a66 	vmov.f32	s0, s13
 8003be6:	eef0 0a47 	vmov.f32	s1, s14
 8003bea:	eeb0 1a67 	vmov.f32	s2, s15
 8003bee:	373c      	adds	r7, #60	; 0x3c
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bd90      	pop	{r4, r7, pc}

08003bf4 <ublox_i2c_bus_init>:
static uint8_t gps_loss_count = 0;

uint8_t gps_data_backup_flag = 0;   //Flag to enable gps data backup only on boot.


uint8_t ublox_i2c_bus_init(void){
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	af00      	add	r7, sp, #0
	hi2c1.Instance = I2C1;
 8003bf8:	4b1b      	ldr	r3, [pc, #108]	; (8003c68 <ublox_i2c_bus_init+0x74>)
 8003bfa:	4a1c      	ldr	r2, [pc, #112]	; (8003c6c <ublox_i2c_bus_init+0x78>)
 8003bfc:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x00B03FDB;
 8003bfe:	4b1a      	ldr	r3, [pc, #104]	; (8003c68 <ublox_i2c_bus_init+0x74>)
 8003c00:	4a1b      	ldr	r2, [pc, #108]	; (8003c70 <ublox_i2c_bus_init+0x7c>)
 8003c02:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 8003c04:	4b18      	ldr	r3, [pc, #96]	; (8003c68 <ublox_i2c_bus_init+0x74>)
 8003c06:	2200      	movs	r2, #0
 8003c08:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003c0a:	4b17      	ldr	r3, [pc, #92]	; (8003c68 <ublox_i2c_bus_init+0x74>)
 8003c0c:	2201      	movs	r2, #1
 8003c0e:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003c10:	4b15      	ldr	r3, [pc, #84]	; (8003c68 <ublox_i2c_bus_init+0x74>)
 8003c12:	2200      	movs	r2, #0
 8003c14:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 8003c16:	4b14      	ldr	r3, [pc, #80]	; (8003c68 <ublox_i2c_bus_init+0x74>)
 8003c18:	2200      	movs	r2, #0
 8003c1a:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003c1c:	4b12      	ldr	r3, [pc, #72]	; (8003c68 <ublox_i2c_bus_init+0x74>)
 8003c1e:	2200      	movs	r2, #0
 8003c20:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003c22:	4b11      	ldr	r3, [pc, #68]	; (8003c68 <ublox_i2c_bus_init+0x74>)
 8003c24:	2200      	movs	r2, #0
 8003c26:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003c28:	4b0f      	ldr	r3, [pc, #60]	; (8003c68 <ublox_i2c_bus_init+0x74>)
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003c2e:	480e      	ldr	r0, [pc, #56]	; (8003c68 <ublox_i2c_bus_init+0x74>)
 8003c30:	f003 fabf 	bl	80071b2 <HAL_I2C_Init>
 8003c34:	4603      	mov	r3, r0
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d001      	beq.n	8003c3e <ublox_i2c_bus_init+0x4a>
	{
	return 1;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e012      	b.n	8003c64 <ublox_i2c_bus_init+0x70>
	}

	/** Configure Analogue filter
	*/
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003c3e:	2100      	movs	r1, #0
 8003c40:	4809      	ldr	r0, [pc, #36]	; (8003c68 <ublox_i2c_bus_init+0x74>)
 8003c42:	f004 f927 	bl	8007e94 <HAL_I2CEx_ConfigAnalogFilter>
 8003c46:	4603      	mov	r3, r0
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d001      	beq.n	8003c50 <ublox_i2c_bus_init+0x5c>
	{
	return 2;
 8003c4c:	2302      	movs	r3, #2
 8003c4e:	e009      	b.n	8003c64 <ublox_i2c_bus_init+0x70>
	}

	/** Configure Digital filter
	*/
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003c50:	2100      	movs	r1, #0
 8003c52:	4805      	ldr	r0, [pc, #20]	; (8003c68 <ublox_i2c_bus_init+0x74>)
 8003c54:	f004 f969 	bl	8007f2a <HAL_I2CEx_ConfigDigitalFilter>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d001      	beq.n	8003c62 <ublox_i2c_bus_init+0x6e>
	{
	return 3;
 8003c5e:	2303      	movs	r3, #3
 8003c60:	e000      	b.n	8003c64 <ublox_i2c_bus_init+0x70>
	}
	return 0;
 8003c62:	2300      	movs	r3, #0
}
 8003c64:	4618      	mov	r0, r3
 8003c66:	bd80      	pop	{r7, pc}
 8003c68:	20000290 	.word	0x20000290
 8003c6c:	40005400 	.word	0x40005400
 8003c70:	00b03fdb 	.word	0x00b03fdb

08003c74 <ublox_tick>:


void ublox_tick(void){
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b082      	sub	sp, #8
 8003c78:	af00      	add	r7, sp, #0
    uint8_t res = 0;
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	71fb      	strb	r3, [r7, #7]
    res = ubloxRead();
 8003c7e:	f000 f8db 	bl	8003e38 <ubloxRead>
 8003c82:	4603      	mov	r3, r0
 8003c84:	71fb      	strb	r3, [r7, #7]
    if ((res == 8) || (res==10)){
 8003c86:	79fb      	ldrb	r3, [r7, #7]
 8003c88:	2b08      	cmp	r3, #8
 8003c8a:	d005      	beq.n	8003c98 <ublox_tick+0x24>
 8003c8c:	79fb      	ldrb	r3, [r7, #7]
 8003c8e:	2b0a      	cmp	r3, #10
 8003c90:	d002      	beq.n	8003c98 <ublox_tick+0x24>
        uart_write_debug("Failed to read\r\n",UART_NYX);
#endif
        return;
    }
    else{
        parseNMEA();
 8003c92:	f000 f925 	bl	8003ee0 <parseNMEA>
 8003c96:	e000      	b.n	8003c9a <ublox_tick+0x26>
        return;
 8003c98:	bf00      	nop
    }
}
 8003c9a:	3708      	adds	r7, #8
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bd80      	pop	{r7, pc}

08003ca0 <ublox_transmit_rtc>:

void ublox_transmit_rtc(uint8_t cmd, UART_select device){
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b082      	sub	sp, #8
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	460a      	mov	r2, r1
 8003caa:	71fb      	strb	r3, [r7, #7]
 8003cac:	4613      	mov	r3, r2
 8003cae:	71bb      	strb	r3, [r7, #6]
    transmitMessage(gps_data.timestamp, 9, cmd, device);
 8003cb0:	79fa      	ldrb	r2, [r7, #7]
 8003cb2:	79bb      	ldrb	r3, [r7, #6]
 8003cb4:	2109      	movs	r1, #9
 8003cb6:	4803      	ldr	r0, [pc, #12]	; (8003cc4 <ublox_transmit_rtc+0x24>)
 8003cb8:	f001 fc62 	bl	8005580 <transmitMessage>
}
 8003cbc:	bf00      	nop
 8003cbe:	3708      	adds	r7, #8
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bd80      	pop	{r7, pc}
 8003cc4:	2000032f 	.word	0x2000032f

08003cc8 <ublox_transmit_message>:

void ublox_transmit_message(uint8_t cmd, UART_select device){
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b086      	sub	sp, #24
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	4603      	mov	r3, r0
 8003cd0:	460a      	mov	r2, r1
 8003cd2:	71fb      	strb	r3, [r7, #7]
 8003cd4:	4613      	mov	r3, r2
 8003cd6:	71bb      	strb	r3, [r7, #6]
    uint8_t message[12] = {0};
 8003cd8:	2300      	movs	r3, #0
 8003cda:	60fb      	str	r3, [r7, #12]
 8003cdc:	f107 0310 	add.w	r3, r7, #16
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	601a      	str	r2, [r3, #0]
 8003ce4:	605a      	str	r2, [r3, #4]
    message[0] = (gps_data.latitude & 0xFF000000) >> 24;
 8003ce6:	4b22      	ldr	r3, [pc, #136]	; (8003d70 <ublox_transmit_message+0xa8>)
 8003ce8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cea:	0e1b      	lsrs	r3, r3, #24
 8003cec:	b2db      	uxtb	r3, r3
 8003cee:	733b      	strb	r3, [r7, #12]
    message[1] = (gps_data.latitude & 0x00FF0000) >> 16;
 8003cf0:	4b1f      	ldr	r3, [pc, #124]	; (8003d70 <ublox_transmit_message+0xa8>)
 8003cf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cf4:	141b      	asrs	r3, r3, #16
 8003cf6:	b2db      	uxtb	r3, r3
 8003cf8:	737b      	strb	r3, [r7, #13]
    message[2] = (gps_data.latitude & 0x0000FF00) >> 8;
 8003cfa:	4b1d      	ldr	r3, [pc, #116]	; (8003d70 <ublox_transmit_message+0xa8>)
 8003cfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cfe:	121b      	asrs	r3, r3, #8
 8003d00:	b2db      	uxtb	r3, r3
 8003d02:	73bb      	strb	r3, [r7, #14]
    message[3] = (gps_data.latitude & 0x000000FF);
 8003d04:	4b1a      	ldr	r3, [pc, #104]	; (8003d70 <ublox_transmit_message+0xa8>)
 8003d06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d08:	b2db      	uxtb	r3, r3
 8003d0a:	73fb      	strb	r3, [r7, #15]
    message[4] = (gps_data.longtitude & 0xFF000000) >> 24;
 8003d0c:	4b18      	ldr	r3, [pc, #96]	; (8003d70 <ublox_transmit_message+0xa8>)
 8003d0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d10:	0e1b      	lsrs	r3, r3, #24
 8003d12:	b2db      	uxtb	r3, r3
 8003d14:	743b      	strb	r3, [r7, #16]
    message[5] = (gps_data.longtitude & 0x00FF0000) >> 16;
 8003d16:	4b16      	ldr	r3, [pc, #88]	; (8003d70 <ublox_transmit_message+0xa8>)
 8003d18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d1a:	141b      	asrs	r3, r3, #16
 8003d1c:	b2db      	uxtb	r3, r3
 8003d1e:	747b      	strb	r3, [r7, #17]
    message[6] = (gps_data.longtitude & 0x0000FF00) >> 8;
 8003d20:	4b13      	ldr	r3, [pc, #76]	; (8003d70 <ublox_transmit_message+0xa8>)
 8003d22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d24:	121b      	asrs	r3, r3, #8
 8003d26:	b2db      	uxtb	r3, r3
 8003d28:	74bb      	strb	r3, [r7, #18]
    message[7] = (gps_data.longtitude & 0x000000FF);
 8003d2a:	4b11      	ldr	r3, [pc, #68]	; (8003d70 <ublox_transmit_message+0xa8>)
 8003d2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d2e:	b2db      	uxtb	r3, r3
 8003d30:	74fb      	strb	r3, [r7, #19]
    message[8] = (gps_data.altitude & 0xFF000000) >> 24;
 8003d32:	4b0f      	ldr	r3, [pc, #60]	; (8003d70 <ublox_transmit_message+0xa8>)
 8003d34:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d36:	0e1b      	lsrs	r3, r3, #24
 8003d38:	b2db      	uxtb	r3, r3
 8003d3a:	753b      	strb	r3, [r7, #20]
    message[9] = (gps_data.altitude & 0x00FF0000) >> 16;
 8003d3c:	4b0c      	ldr	r3, [pc, #48]	; (8003d70 <ublox_transmit_message+0xa8>)
 8003d3e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d40:	141b      	asrs	r3, r3, #16
 8003d42:	b2db      	uxtb	r3, r3
 8003d44:	757b      	strb	r3, [r7, #21]
    message[10] = (gps_data.altitude & 0x0000FF00) >> 8;
 8003d46:	4b0a      	ldr	r3, [pc, #40]	; (8003d70 <ublox_transmit_message+0xa8>)
 8003d48:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d4a:	121b      	asrs	r3, r3, #8
 8003d4c:	b2db      	uxtb	r3, r3
 8003d4e:	75bb      	strb	r3, [r7, #22]
    message[11] = (gps_data.altitude & 0x000000FF);
 8003d50:	4b07      	ldr	r3, [pc, #28]	; (8003d70 <ublox_transmit_message+0xa8>)
 8003d52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	75fb      	strb	r3, [r7, #23]
    transmitMessage(message, 12, cmd, device);
 8003d58:	79fa      	ldrb	r2, [r7, #7]
 8003d5a:	79bb      	ldrb	r3, [r7, #6]
 8003d5c:	f107 000c 	add.w	r0, r7, #12
 8003d60:	210c      	movs	r1, #12
 8003d62:	f001 fc0d 	bl	8005580 <transmitMessage>
}
 8003d66:	bf00      	nop
 8003d68:	3718      	adds	r7, #24
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}
 8003d6e:	bf00      	nop
 8003d70:	200002e4 	.word	0x200002e4

08003d74 <ubloxInit>:

HAL_StatusTypeDef ubloxInit(void){
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b082      	sub	sp, #8
 8003d78:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef ret=0x00;
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	71fb      	strb	r3, [r7, #7]
    ret = setPortOutput(COM_PORT_I2C, COM_TYPE_NMEA);
 8003d7e:	2102      	movs	r1, #2
 8003d80:	2000      	movs	r0, #0
 8003d82:	f000 fa8b 	bl	800429c <setPortOutput>
 8003d86:	4603      	mov	r3, r0
 8003d88:	71fb      	strb	r3, [r7, #7]
    if (ret != HAL_OK)return ret;
 8003d8a:	79fb      	ldrb	r3, [r7, #7]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d001      	beq.n	8003d94 <ubloxInit+0x20>
 8003d90:	79fb      	ldrb	r3, [r7, #7]
 8003d92:	e04d      	b.n	8003e30 <ubloxInit+0xbc>
    ret = configureNMEA(UBX_CLASS_NMEA, UBX_NMEA_GLL, NMEA_GGL_RATE, COM_PORT_I2C);
 8003d94:	2300      	movs	r3, #0
 8003d96:	2200      	movs	r2, #0
 8003d98:	2101      	movs	r1, #1
 8003d9a:	20f0      	movs	r0, #240	; 0xf0
 8003d9c:	f000 faae 	bl	80042fc <configureNMEA>
 8003da0:	4603      	mov	r3, r0
 8003da2:	71fb      	strb	r3, [r7, #7]
    if (ret != HAL_OK)return ret;
 8003da4:	79fb      	ldrb	r3, [r7, #7]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d001      	beq.n	8003dae <ubloxInit+0x3a>
 8003daa:	79fb      	ldrb	r3, [r7, #7]
 8003dac:	e040      	b.n	8003e30 <ubloxInit+0xbc>
    ret = configureNMEA(UBX_CLASS_NMEA, UBX_NMEA_GSA, NMEA_GSA_RATE, COM_PORT_I2C);
 8003dae:	2300      	movs	r3, #0
 8003db0:	2200      	movs	r2, #0
 8003db2:	2102      	movs	r1, #2
 8003db4:	20f0      	movs	r0, #240	; 0xf0
 8003db6:	f000 faa1 	bl	80042fc <configureNMEA>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	71fb      	strb	r3, [r7, #7]
    if (ret != HAL_OK)return ret;
 8003dbe:	79fb      	ldrb	r3, [r7, #7]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d001      	beq.n	8003dc8 <ubloxInit+0x54>
 8003dc4:	79fb      	ldrb	r3, [r7, #7]
 8003dc6:	e033      	b.n	8003e30 <ubloxInit+0xbc>
    ret = configureNMEA(UBX_CLASS_NMEA, UBX_NMEA_GSV, NMEA_GSV_RATE, COM_PORT_I2C);
 8003dc8:	2300      	movs	r3, #0
 8003dca:	2200      	movs	r2, #0
 8003dcc:	2103      	movs	r1, #3
 8003dce:	20f0      	movs	r0, #240	; 0xf0
 8003dd0:	f000 fa94 	bl	80042fc <configureNMEA>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	71fb      	strb	r3, [r7, #7]
    if (ret != HAL_OK)return ret;
 8003dd8:	79fb      	ldrb	r3, [r7, #7]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d001      	beq.n	8003de2 <ubloxInit+0x6e>
 8003dde:	79fb      	ldrb	r3, [r7, #7]
 8003de0:	e026      	b.n	8003e30 <ubloxInit+0xbc>
    ret = configureNMEA(UBX_CLASS_NMEA, UBX_NMEA_RMC, NMEA_RMC_RATE, COM_PORT_I2C);
 8003de2:	2300      	movs	r3, #0
 8003de4:	2200      	movs	r2, #0
 8003de6:	2104      	movs	r1, #4
 8003de8:	20f0      	movs	r0, #240	; 0xf0
 8003dea:	f000 fa87 	bl	80042fc <configureNMEA>
 8003dee:	4603      	mov	r3, r0
 8003df0:	71fb      	strb	r3, [r7, #7]
    if (ret != HAL_OK)return ret;
 8003df2:	79fb      	ldrb	r3, [r7, #7]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d001      	beq.n	8003dfc <ubloxInit+0x88>
 8003df8:	79fb      	ldrb	r3, [r7, #7]
 8003dfa:	e019      	b.n	8003e30 <ubloxInit+0xbc>
    ret = configureNMEA(UBX_CLASS_NMEA, UBX_NMEA_VTG, NMEA_VTG_RATE, COM_PORT_I2C);
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	2200      	movs	r2, #0
 8003e00:	2105      	movs	r1, #5
 8003e02:	20f0      	movs	r0, #240	; 0xf0
 8003e04:	f000 fa7a 	bl	80042fc <configureNMEA>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	71fb      	strb	r3, [r7, #7]
    if (ret != HAL_OK)return ret;
 8003e0c:	79fb      	ldrb	r3, [r7, #7]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d001      	beq.n	8003e16 <ubloxInit+0xa2>
 8003e12:	79fb      	ldrb	r3, [r7, #7]
 8003e14:	e00c      	b.n	8003e30 <ubloxInit+0xbc>
    ret = configureNMEA(UBX_CLASS_NMEA, UBX_NMEA_GGA, NMEA_GGA_RATE, COM_PORT_I2C);
 8003e16:	2300      	movs	r3, #0
 8003e18:	2202      	movs	r2, #2
 8003e1a:	2100      	movs	r1, #0
 8003e1c:	20f0      	movs	r0, #240	; 0xf0
 8003e1e:	f000 fa6d 	bl	80042fc <configureNMEA>
 8003e22:	4603      	mov	r3, r0
 8003e24:	71fb      	strb	r3, [r7, #7]
    if (ret != HAL_OK)return ret;
 8003e26:	79fb      	ldrb	r3, [r7, #7]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d001      	beq.n	8003e30 <ubloxInit+0xbc>
 8003e2c:	79fb      	ldrb	r3, [r7, #7]
 8003e2e:	e7ff      	b.n	8003e30 <ubloxInit+0xbc>
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	3708      	adds	r7, #8
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bd80      	pop	{r7, pc}

08003e38 <ubloxRead>:

HAL_StatusTypeDef ubloxNmeaGGA_set_refresh_rate(uint8_t seconds){
    return configureNMEA(UBX_CLASS_NMEA, UBX_NMEA_GGA, seconds, COM_PORT_I2C);
}

uint8_t ubloxRead(void){
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b086      	sub	sp, #24
 8003e3c:	af04      	add	r7, sp, #16
    uint8_t res = 0;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	717b      	strb	r3, [r7, #5]

    uint16_t num = 0;
 8003e42:	2300      	movs	r3, #0
 8003e44:	80fb      	strh	r3, [r7, #6]
    uint8_t bytes[2] = {0};
 8003e46:	2300      	movs	r3, #0
 8003e48:	803b      	strh	r3, [r7, #0]

    res = HAL_I2C_Mem_Read(&hi2c1, UBLOX_M9N, 0xFD, I2C_MEMADD_SIZE_8BIT, bytes, 2, 20);
 8003e4a:	2314      	movs	r3, #20
 8003e4c:	9302      	str	r3, [sp, #8]
 8003e4e:	2302      	movs	r3, #2
 8003e50:	9301      	str	r3, [sp, #4]
 8003e52:	463b      	mov	r3, r7
 8003e54:	9300      	str	r3, [sp, #0]
 8003e56:	2301      	movs	r3, #1
 8003e58:	22fd      	movs	r2, #253	; 0xfd
 8003e5a:	2184      	movs	r1, #132	; 0x84
 8003e5c:	481e      	ldr	r0, [pc, #120]	; (8003ed8 <ubloxRead+0xa0>)
 8003e5e:	f003 fc3f 	bl	80076e0 <HAL_I2C_Mem_Read>
 8003e62:	4603      	mov	r3, r0
 8003e64:	717b      	strb	r3, [r7, #5]
    if (res!=HAL_OK)return res;
 8003e66:	797b      	ldrb	r3, [r7, #5]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d001      	beq.n	8003e70 <ubloxRead+0x38>
 8003e6c:	797b      	ldrb	r3, [r7, #5]
 8003e6e:	e02f      	b.n	8003ed0 <ubloxRead+0x98>
    num  = ((bytes[0] << 8) | bytes[1]);
 8003e70:	783b      	ldrb	r3, [r7, #0]
 8003e72:	021b      	lsls	r3, r3, #8
 8003e74:	b21a      	sxth	r2, r3
 8003e76:	787b      	ldrb	r3, [r7, #1]
 8003e78:	b21b      	sxth	r3, r3
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	b21b      	sxth	r3, r3
 8003e7e:	80fb      	strh	r3, [r7, #6]
    memset(bytes, 0, 2);
 8003e80:	463b      	mov	r3, r7
 8003e82:	2202      	movs	r2, #2
 8003e84:	2100      	movs	r1, #0
 8003e86:	4618      	mov	r0, r3
 8003e88:	f00c f830 	bl	800feec <memset>
    if (num > 0){
 8003e8c:	88fb      	ldrh	r3, [r7, #6]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d01d      	beq.n	8003ece <ubloxRead+0x96>
    	if (num>140)num=140;
 8003e92:	88fb      	ldrh	r3, [r7, #6]
 8003e94:	2b8c      	cmp	r3, #140	; 0x8c
 8003e96:	d901      	bls.n	8003e9c <ubloxRead+0x64>
 8003e98:	238c      	movs	r3, #140	; 0x8c
 8003e9a:	80fb      	strh	r3, [r7, #6]
        res = HAL_I2C_Mem_Read(&hi2c1, UBLOX_M9N, 0xFF, I2C_MEMADD_SIZE_8BIT, gps_data.sentence, num, 100);
 8003e9c:	2364      	movs	r3, #100	; 0x64
 8003e9e:	9302      	str	r3, [sp, #8]
 8003ea0:	88fb      	ldrh	r3, [r7, #6]
 8003ea2:	9301      	str	r3, [sp, #4]
 8003ea4:	4b0d      	ldr	r3, [pc, #52]	; (8003edc <ubloxRead+0xa4>)
 8003ea6:	9300      	str	r3, [sp, #0]
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	22ff      	movs	r2, #255	; 0xff
 8003eac:	2184      	movs	r1, #132	; 0x84
 8003eae:	480a      	ldr	r0, [pc, #40]	; (8003ed8 <ubloxRead+0xa0>)
 8003eb0:	f003 fc16 	bl	80076e0 <HAL_I2C_Mem_Read>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	717b      	strb	r3, [r7, #5]
        if ((res != HAL_OK) || (gps_data.sentence[0] != '$')){
 8003eb8:	797b      	ldrb	r3, [r7, #5]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d103      	bne.n	8003ec6 <ubloxRead+0x8e>
 8003ebe:	4b07      	ldr	r3, [pc, #28]	; (8003edc <ubloxRead+0xa4>)
 8003ec0:	781b      	ldrb	r3, [r3, #0]
 8003ec2:	2b24      	cmp	r3, #36	; 0x24
 8003ec4:	d001      	beq.n	8003eca <ubloxRead+0x92>
                return 10;
 8003ec6:	230a      	movs	r3, #10
 8003ec8:	e002      	b.n	8003ed0 <ubloxRead+0x98>
        }
#ifdef __DEBUG__
        uart_write_debug(gps_data.sentence, 50);
        uart_write_debug("\r\n", 10);
#endif
        return res;
 8003eca:	797b      	ldrb	r3, [r7, #5]
 8003ecc:	e000      	b.n	8003ed0 <ubloxRead+0x98>
    }
    return 10;
 8003ece:	230a      	movs	r3, #10
}
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	3708      	adds	r7, #8
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bd80      	pop	{r7, pc}
 8003ed8:	20000290 	.word	0x20000290
 8003edc:	200002e4 	.word	0x200002e4

08003ee0 <parseNMEA>:

uint8_t parseNMEA(void){
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b08c      	sub	sp, #48	; 0x30
 8003ee4:	af00      	add	r7, sp, #0
    char lat[12] = {0};
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	61fb      	str	r3, [r7, #28]
 8003eea:	f107 0320 	add.w	r3, r7, #32
 8003eee:	2200      	movs	r2, #0
 8003ef0:	601a      	str	r2, [r3, #0]
 8003ef2:	605a      	str	r2, [r3, #4]
    char lng[12] = {0};
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	613b      	str	r3, [r7, #16]
 8003ef8:	f107 0314 	add.w	r3, r7, #20
 8003efc:	2200      	movs	r2, #0
 8003efe:	601a      	str	r2, [r3, #0]
 8003f00:	605a      	str	r2, [r3, #4]
    char alt[7] = {0};
 8003f02:	2300      	movs	r3, #0
 8003f04:	60bb      	str	r3, [r7, #8]
 8003f06:	f107 030c 	add.w	r3, r7, #12
 8003f0a:	2100      	movs	r1, #0
 8003f0c:	460a      	mov	r2, r1
 8003f0e:	801a      	strh	r2, [r3, #0]
 8003f10:	460a      	mov	r2, r1
 8003f12:	709a      	strb	r2, [r3, #2]
    const char NMEA_delimiter[2] = ",";
 8003f14:	232c      	movs	r3, #44	; 0x2c
 8003f16:	80bb      	strh	r3, [r7, #4]
    char * token = strtoke(gps_data.sentence, NMEA_delimiter);
 8003f18:	1d3b      	adds	r3, r7, #4
 8003f1a:	4619      	mov	r1, r3
 8003f1c:	4868      	ldr	r0, [pc, #416]	; (80040c0 <parseNMEA+0x1e0>)
 8003f1e:	f000 fa5b 	bl	80043d8 <strtoke>
 8003f22:	4603      	mov	r3, r0
 8003f24:	62fb      	str	r3, [r7, #44]	; 0x2c

    uint8_t i = 0;
 8003f26:	2300      	movs	r3, #0
 8003f28:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    for (i = 0; token != NULL; i++) {
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f32:	e063      	b.n	8003ffc <parseNMEA+0x11c>
        switch (i) {
 8003f34:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003f38:	2b0b      	cmp	r3, #11
 8003f3a:	d853      	bhi.n	8003fe4 <parseNMEA+0x104>
 8003f3c:	a201      	add	r2, pc, #4	; (adr r2, 8003f44 <parseNMEA+0x64>)
 8003f3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f42:	bf00      	nop
 8003f44:	08003fe5 	.word	0x08003fe5
 8003f48:	08003f75 	.word	0x08003f75
 8003f4c:	08003f7f 	.word	0x08003f7f
 8003f50:	08003f8d 	.word	0x08003f8d
 8003f54:	08003f97 	.word	0x08003f97
 8003f58:	08003fa5 	.word	0x08003fa5
 8003f5c:	08003faf 	.word	0x08003faf
 8003f60:	08003fb9 	.word	0x08003fb9
 8003f64:	08003fc3 	.word	0x08003fc3
 8003f68:	08003fcd 	.word	0x08003fcd
 8003f6c:	08003fe5 	.word	0x08003fe5
 8003f70:	08003fdb 	.word	0x08003fdb
        case 0:
            break;
        case 1:
            strcpy(gps_data.timestamp, token);
 8003f74:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003f76:	4853      	ldr	r0, [pc, #332]	; (80040c4 <parseNMEA+0x1e4>)
 8003f78:	f00c fc4a 	bl	8010810 <strcpy>
            break;
 8003f7c:	e032      	b.n	8003fe4 <parseNMEA+0x104>
        case 2:
            strcpy(lat, token);
 8003f7e:	f107 031c 	add.w	r3, r7, #28
 8003f82:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003f84:	4618      	mov	r0, r3
 8003f86:	f00c fc43 	bl	8010810 <strcpy>
            break;
 8003f8a:	e02b      	b.n	8003fe4 <parseNMEA+0x104>
        case 3:
            strcpy(gps_data.NS, token);
 8003f8c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003f8e:	484e      	ldr	r0, [pc, #312]	; (80040c8 <parseNMEA+0x1e8>)
 8003f90:	f00c fc3e 	bl	8010810 <strcpy>
            break;
 8003f94:	e026      	b.n	8003fe4 <parseNMEA+0x104>
        case 4:
            strcpy(lng, token);
 8003f96:	f107 0310 	add.w	r3, r7, #16
 8003f9a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	f00c fc37 	bl	8010810 <strcpy>
            break;
 8003fa2:	e01f      	b.n	8003fe4 <parseNMEA+0x104>
        case 5:
            strcpy(gps_data.EW, token);
 8003fa4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003fa6:	4849      	ldr	r0, [pc, #292]	; (80040cc <parseNMEA+0x1ec>)
 8003fa8:	f00c fc32 	bl	8010810 <strcpy>
            break;
 8003fac:	e01a      	b.n	8003fe4 <parseNMEA+0x104>
        case 6:
            strcpy(gps_data.quality, token);
 8003fae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003fb0:	4847      	ldr	r0, [pc, #284]	; (80040d0 <parseNMEA+0x1f0>)
 8003fb2:	f00c fc2d 	bl	8010810 <strcpy>
            break;
 8003fb6:	e015      	b.n	8003fe4 <parseNMEA+0x104>
        case 7:
            strcpy(gps_data.satellites, token);
 8003fb8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003fba:	4846      	ldr	r0, [pc, #280]	; (80040d4 <parseNMEA+0x1f4>)
 8003fbc:	f00c fc28 	bl	8010810 <strcpy>
            break;
 8003fc0:	e010      	b.n	8003fe4 <parseNMEA+0x104>
        case 8:
            strcpy(gps_data.HDOP, token);
 8003fc2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003fc4:	4844      	ldr	r0, [pc, #272]	; (80040d8 <parseNMEA+0x1f8>)
 8003fc6:	f00c fc23 	bl	8010810 <strcpy>
            break;
 8003fca:	e00b      	b.n	8003fe4 <parseNMEA+0x104>
        case 9:
            strcpy(alt, token);
 8003fcc:	f107 0308 	add.w	r3, r7, #8
 8003fd0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f00c fc1c 	bl	8010810 <strcpy>
            break;
 8003fd8:	e004      	b.n	8003fe4 <parseNMEA+0x104>
        case 11:
            strcpy(gps_data.sep, token);
 8003fda:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003fdc:	483f      	ldr	r0, [pc, #252]	; (80040dc <parseNMEA+0x1fc>)
 8003fde:	f00c fc17 	bl	8010810 <strcpy>
            break;
 8003fe2:	bf00      	nop
        }
        token = strtoke(NULL, NMEA_delimiter);
 8003fe4:	1d3b      	adds	r3, r7, #4
 8003fe6:	4619      	mov	r1, r3
 8003fe8:	2000      	movs	r0, #0
 8003fea:	f000 f9f5 	bl	80043d8 <strtoke>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (i = 0; token != NULL; i++) {
 8003ff2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003ff6:	3301      	adds	r3, #1
 8003ff8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ffc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d198      	bne.n	8003f34 <parseNMEA+0x54>
    }
    if (i<11){ //If the number of fields parsed is less than 11. Return error.
 8004002:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004006:	2b0a      	cmp	r3, #10
 8004008:	d80d      	bhi.n	8004026 <parseNMEA+0x146>
        gps_loss_count++;
 800400a:	4b35      	ldr	r3, [pc, #212]	; (80040e0 <parseNMEA+0x200>)
 800400c:	781b      	ldrb	r3, [r3, #0]
 800400e:	3301      	adds	r3, #1
 8004010:	b2da      	uxtb	r2, r3
 8004012:	4b33      	ldr	r3, [pc, #204]	; (80040e0 <parseNMEA+0x200>)
 8004014:	701a      	strb	r2, [r3, #0]
        if (gps_loss_count > GPS_LOSS_COUNT_THR){
 8004016:	4b32      	ldr	r3, [pc, #200]	; (80040e0 <parseNMEA+0x200>)
 8004018:	781b      	ldrb	r3, [r3, #0]
 800401a:	2b14      	cmp	r3, #20
 800401c:	d901      	bls.n	8004022 <parseNMEA+0x142>
            init_gps_data();
 800401e:	f000 f99f 	bl	8004360 <init_gps_data>
        }
        return 1;
 8004022:	2301      	movs	r3, #1
 8004024:	e048      	b.n	80040b8 <parseNMEA+0x1d8>
    }
    if ((gps_data.quality[0] == '1') || (gps_data.quality[0] == '2') || (gps_data.quality[0] == '4') || (gps_data.quality[0] == '5')){
 8004026:	4b26      	ldr	r3, [pc, #152]	; (80040c0 <parseNMEA+0x1e0>)
 8004028:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800402c:	2b31      	cmp	r3, #49	; 0x31
 800402e:	d00e      	beq.n	800404e <parseNMEA+0x16e>
 8004030:	4b23      	ldr	r3, [pc, #140]	; (80040c0 <parseNMEA+0x1e0>)
 8004032:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8004036:	2b32      	cmp	r3, #50	; 0x32
 8004038:	d009      	beq.n	800404e <parseNMEA+0x16e>
 800403a:	4b21      	ldr	r3, [pc, #132]	; (80040c0 <parseNMEA+0x1e0>)
 800403c:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8004040:	2b34      	cmp	r3, #52	; 0x34
 8004042:	d004      	beq.n	800404e <parseNMEA+0x16e>
 8004044:	4b1e      	ldr	r3, [pc, #120]	; (80040c0 <parseNMEA+0x1e0>)
 8004046:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800404a:	2b35      	cmp	r3, #53	; 0x35
 800404c:	d11d      	bne.n	800408a <parseNMEA+0x1aa>
        gps_data.latitude = coorsAtol(lat, gps_data.NS);
 800404e:	f107 031c 	add.w	r3, r7, #28
 8004052:	491d      	ldr	r1, [pc, #116]	; (80040c8 <parseNMEA+0x1e8>)
 8004054:	4618      	mov	r0, r3
 8004056:	f000 fa79 	bl	800454c <coorsAtol>
 800405a:	4603      	mov	r3, r0
 800405c:	4a18      	ldr	r2, [pc, #96]	; (80040c0 <parseNMEA+0x1e0>)
 800405e:	6553      	str	r3, [r2, #84]	; 0x54
        gps_data.longtitude = coorsAtol(lng, gps_data.EW);
 8004060:	f107 0310 	add.w	r3, r7, #16
 8004064:	4919      	ldr	r1, [pc, #100]	; (80040cc <parseNMEA+0x1ec>)
 8004066:	4618      	mov	r0, r3
 8004068:	f000 fa70 	bl	800454c <coorsAtol>
 800406c:	4603      	mov	r3, r0
 800406e:	4a14      	ldr	r2, [pc, #80]	; (80040c0 <parseNMEA+0x1e0>)
 8004070:	65d3      	str	r3, [r2, #92]	; 0x5c
        gps_data.altitude = altAtol(alt);
 8004072:	f107 0308 	add.w	r3, r7, #8
 8004076:	4618      	mov	r0, r3
 8004078:	f000 f9e0 	bl	800443c <altAtol>
 800407c:	4603      	mov	r3, r0
 800407e:	4a10      	ldr	r2, [pc, #64]	; (80040c0 <parseNMEA+0x1e0>)
 8004080:	6653      	str	r3, [r2, #100]	; 0x64
        gps_loss_count = 0;
 8004082:	4b17      	ldr	r3, [pc, #92]	; (80040e0 <parseNMEA+0x200>)
 8004084:	2200      	movs	r2, #0
 8004086:	701a      	strb	r2, [r3, #0]
    if ((gps_data.quality[0] == '1') || (gps_data.quality[0] == '2') || (gps_data.quality[0] == '4') || (gps_data.quality[0] == '5')){
 8004088:	e010      	b.n	80040ac <parseNMEA+0x1cc>
    }
    else if (gps_data.quality[0] == '0'){
 800408a:	4b0d      	ldr	r3, [pc, #52]	; (80040c0 <parseNMEA+0x1e0>)
 800408c:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8004090:	2b30      	cmp	r3, #48	; 0x30
 8004092:	d10b      	bne.n	80040ac <parseNMEA+0x1cc>
        gps_loss_count++;
 8004094:	4b12      	ldr	r3, [pc, #72]	; (80040e0 <parseNMEA+0x200>)
 8004096:	781b      	ldrb	r3, [r3, #0]
 8004098:	3301      	adds	r3, #1
 800409a:	b2da      	uxtb	r2, r3
 800409c:	4b10      	ldr	r3, [pc, #64]	; (80040e0 <parseNMEA+0x200>)
 800409e:	701a      	strb	r2, [r3, #0]
        if (gps_loss_count > GPS_LOSS_COUNT_THR){
 80040a0:	4b0f      	ldr	r3, [pc, #60]	; (80040e0 <parseNMEA+0x200>)
 80040a2:	781b      	ldrb	r3, [r3, #0]
 80040a4:	2b14      	cmp	r3, #20
 80040a6:	d901      	bls.n	80040ac <parseNMEA+0x1cc>
            init_gps_data();
 80040a8:	f000 f95a 	bl	8004360 <init_gps_data>
        }
    }
    memset(gps_data.sentence, 0, 75);
 80040ac:	224b      	movs	r2, #75	; 0x4b
 80040ae:	2100      	movs	r1, #0
 80040b0:	4803      	ldr	r0, [pc, #12]	; (80040c0 <parseNMEA+0x1e0>)
 80040b2:	f00b ff1b 	bl	800feec <memset>
    return 0;
 80040b6:	2300      	movs	r3, #0
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	3730      	adds	r7, #48	; 0x30
 80040bc:	46bd      	mov	sp, r7
 80040be:	bd80      	pop	{r7, pc}
 80040c0:	200002e4 	.word	0x200002e4
 80040c4:	2000032f 	.word	0x2000032f
 80040c8:	2000033c 	.word	0x2000033c
 80040cc:	20000344 	.word	0x20000344
 80040d0:	20000345 	.word	0x20000345
 80040d4:	2000034c 	.word	0x2000034c
 80040d8:	2000034e 	.word	0x2000034e
 80040dc:	20000353 	.word	0x20000353
 80040e0:	2000035c 	.word	0x2000035c

080040e4 <calcChecksum>:


static void calcChecksum(messageCFG_t *msg){
 80040e4:	b480      	push	{r7}
 80040e6:	b085      	sub	sp, #20
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
    msg->checksumA = 0;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2200      	movs	r2, #0
 80040f0:	731a      	strb	r2, [r3, #12]
    msg->checksumB = 0;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2200      	movs	r2, #0
 80040f6:	735a      	strb	r2, [r3, #13]

    msg->checksumA += msg->cls;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	7b1a      	ldrb	r2, [r3, #12]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	781b      	ldrb	r3, [r3, #0]
 8004100:	4413      	add	r3, r2
 8004102:	b2da      	uxtb	r2, r3
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	731a      	strb	r2, [r3, #12]
    msg->checksumB += msg->checksumA;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	7b5a      	ldrb	r2, [r3, #13]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	7b1b      	ldrb	r3, [r3, #12]
 8004110:	4413      	add	r3, r2
 8004112:	b2da      	uxtb	r2, r3
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	735a      	strb	r2, [r3, #13]

    msg->checksumA += msg->id;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	7b1a      	ldrb	r2, [r3, #12]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	785b      	ldrb	r3, [r3, #1]
 8004120:	4413      	add	r3, r2
 8004122:	b2da      	uxtb	r2, r3
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	731a      	strb	r2, [r3, #12]
    msg->checksumB += msg->checksumA;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	7b5a      	ldrb	r2, [r3, #13]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	7b1b      	ldrb	r3, [r3, #12]
 8004130:	4413      	add	r3, r2
 8004132:	b2da      	uxtb	r2, r3
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	735a      	strb	r2, [r3, #13]

    msg->checksumA += (msg->len & 0xFF);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	7b1a      	ldrb	r2, [r3, #12]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	885b      	ldrh	r3, [r3, #2]
 8004140:	b2db      	uxtb	r3, r3
 8004142:	4413      	add	r3, r2
 8004144:	b2da      	uxtb	r2, r3
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	731a      	strb	r2, [r3, #12]
    msg->checksumB += msg->checksumA;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	7b5a      	ldrb	r2, [r3, #13]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	7b1b      	ldrb	r3, [r3, #12]
 8004152:	4413      	add	r3, r2
 8004154:	b2da      	uxtb	r2, r3
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	735a      	strb	r2, [r3, #13]

    msg->checksumA += (msg->len >> 8);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	7b1a      	ldrb	r2, [r3, #12]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	885b      	ldrh	r3, [r3, #2]
 8004162:	0a1b      	lsrs	r3, r3, #8
 8004164:	b29b      	uxth	r3, r3
 8004166:	b2db      	uxtb	r3, r3
 8004168:	4413      	add	r3, r2
 800416a:	b2da      	uxtb	r2, r3
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	731a      	strb	r2, [r3, #12]
    msg->checksumB += msg->checksumA;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	7b5a      	ldrb	r2, [r3, #13]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	7b1b      	ldrb	r3, [r3, #12]
 8004178:	4413      	add	r3, r2
 800417a:	b2da      	uxtb	r2, r3
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	735a      	strb	r2, [r3, #13]

    uint8_t i;
    for (i=0; i < msg->len; i++)
 8004180:	2300      	movs	r3, #0
 8004182:	73fb      	strb	r3, [r7, #15]
 8004184:	e015      	b.n	80041b2 <calcChecksum+0xce>
    {
        msg->checksumA += msg->payload[i];
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	7b1a      	ldrb	r2, [r3, #12]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6899      	ldr	r1, [r3, #8]
 800418e:	7bfb      	ldrb	r3, [r7, #15]
 8004190:	440b      	add	r3, r1
 8004192:	781b      	ldrb	r3, [r3, #0]
 8004194:	4413      	add	r3, r2
 8004196:	b2da      	uxtb	r2, r3
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	731a      	strb	r2, [r3, #12]
        msg->checksumB += msg->checksumA;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	7b5a      	ldrb	r2, [r3, #13]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	7b1b      	ldrb	r3, [r3, #12]
 80041a4:	4413      	add	r3, r2
 80041a6:	b2da      	uxtb	r2, r3
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	735a      	strb	r2, [r3, #13]
    for (i=0; i < msg->len; i++)
 80041ac:	7bfb      	ldrb	r3, [r7, #15]
 80041ae:	3301      	adds	r3, #1
 80041b0:	73fb      	strb	r3, [r7, #15]
 80041b2:	7bfb      	ldrb	r3, [r7, #15]
 80041b4:	b29a      	uxth	r2, r3
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	885b      	ldrh	r3, [r3, #2]
 80041ba:	429a      	cmp	r2, r3
 80041bc:	d3e3      	bcc.n	8004186 <calcChecksum+0xa2>
    }
}
 80041be:	bf00      	nop
 80041c0:	bf00      	nop
 80041c2:	3714      	adds	r7, #20
 80041c4:	46bd      	mov	sp, r7
 80041c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ca:	4770      	bx	lr

080041cc <sendI2Cmessage>:

HAL_StatusTypeDef sendI2Cmessage(void){
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b08e      	sub	sp, #56	; 0x38
 80041d0:	af02      	add	r7, sp, #8
    uint8_t message[40] = {0};
 80041d2:	2300      	movs	r3, #0
 80041d4:	607b      	str	r3, [r7, #4]
 80041d6:	f107 0308 	add.w	r3, r7, #8
 80041da:	2224      	movs	r2, #36	; 0x24
 80041dc:	2100      	movs	r1, #0
 80041de:	4618      	mov	r0, r3
 80041e0:	f00b fe84 	bl	800feec <memset>
    uint8_t len = config_message.len + 8;
 80041e4:	4b2b      	ldr	r3, [pc, #172]	; (8004294 <sendI2Cmessage+0xc8>)
 80041e6:	885b      	ldrh	r3, [r3, #2]
 80041e8:	b2db      	uxtb	r3, r3
 80041ea:	3308      	adds	r3, #8
 80041ec:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    message[0] = UBX_SYNCH_1;
 80041f0:	23b5      	movs	r3, #181	; 0xb5
 80041f2:	713b      	strb	r3, [r7, #4]
    message[1] = UBX_SYNCH_2;
 80041f4:	2362      	movs	r3, #98	; 0x62
 80041f6:	717b      	strb	r3, [r7, #5]
    message[2] = config_message.cls;
 80041f8:	4b26      	ldr	r3, [pc, #152]	; (8004294 <sendI2Cmessage+0xc8>)
 80041fa:	781b      	ldrb	r3, [r3, #0]
 80041fc:	71bb      	strb	r3, [r7, #6]
    message[3] = config_message.id;
 80041fe:	4b25      	ldr	r3, [pc, #148]	; (8004294 <sendI2Cmessage+0xc8>)
 8004200:	785b      	ldrb	r3, [r3, #1]
 8004202:	71fb      	strb	r3, [r7, #7]
    message[4] = (config_message.len & 0xFF);
 8004204:	4b23      	ldr	r3, [pc, #140]	; (8004294 <sendI2Cmessage+0xc8>)
 8004206:	885b      	ldrh	r3, [r3, #2]
 8004208:	b2db      	uxtb	r3, r3
 800420a:	723b      	strb	r3, [r7, #8]
    message[5] = (config_message.len >> 8);
 800420c:	4b21      	ldr	r3, [pc, #132]	; (8004294 <sendI2Cmessage+0xc8>)
 800420e:	885b      	ldrh	r3, [r3, #2]
 8004210:	0a1b      	lsrs	r3, r3, #8
 8004212:	b29b      	uxth	r3, r3
 8004214:	b2db      	uxtb	r3, r3
 8004216:	727b      	strb	r3, [r7, #9]
    uint8_t i;
    for ( i=0 ; i < config_message.len ; i++){
 8004218:	2300      	movs	r3, #0
 800421a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800421e:	e011      	b.n	8004244 <sendI2Cmessage+0x78>
        message[6+i] = config_message.payload[i];
 8004220:	4b1c      	ldr	r3, [pc, #112]	; (8004294 <sendI2Cmessage+0xc8>)
 8004222:	689a      	ldr	r2, [r3, #8]
 8004224:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004228:	441a      	add	r2, r3
 800422a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800422e:	3306      	adds	r3, #6
 8004230:	7812      	ldrb	r2, [r2, #0]
 8004232:	3330      	adds	r3, #48	; 0x30
 8004234:	443b      	add	r3, r7
 8004236:	f803 2c2c 	strb.w	r2, [r3, #-44]
    for ( i=0 ; i < config_message.len ; i++){
 800423a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800423e:	3301      	adds	r3, #1
 8004240:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8004244:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004248:	b29a      	uxth	r2, r3
 800424a:	4b12      	ldr	r3, [pc, #72]	; (8004294 <sendI2Cmessage+0xc8>)
 800424c:	885b      	ldrh	r3, [r3, #2]
 800424e:	429a      	cmp	r2, r3
 8004250:	d3e6      	bcc.n	8004220 <sendI2Cmessage+0x54>
    }
    message[6+i] = config_message.checksumA;
 8004252:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004256:	3306      	adds	r3, #6
 8004258:	4a0e      	ldr	r2, [pc, #56]	; (8004294 <sendI2Cmessage+0xc8>)
 800425a:	7b12      	ldrb	r2, [r2, #12]
 800425c:	3330      	adds	r3, #48	; 0x30
 800425e:	443b      	add	r3, r7
 8004260:	f803 2c2c 	strb.w	r2, [r3, #-44]
    message[7+i] = config_message.checksumB;
 8004264:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004268:	3307      	adds	r3, #7
 800426a:	4a0a      	ldr	r2, [pc, #40]	; (8004294 <sendI2Cmessage+0xc8>)
 800426c:	7b52      	ldrb	r2, [r2, #13]
 800426e:	3330      	adds	r3, #48	; 0x30
 8004270:	443b      	add	r3, r7
 8004272:	f803 2c2c 	strb.w	r2, [r3, #-44]
    return HAL_I2C_Master_Transmit(&hi2c1, UBLOX_M9N, message, len, 50);
 8004276:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800427a:	b29b      	uxth	r3, r3
 800427c:	1d3a      	adds	r2, r7, #4
 800427e:	2132      	movs	r1, #50	; 0x32
 8004280:	9100      	str	r1, [sp, #0]
 8004282:	2184      	movs	r1, #132	; 0x84
 8004284:	4804      	ldr	r0, [pc, #16]	; (8004298 <sendI2Cmessage+0xcc>)
 8004286:	f003 f823 	bl	80072d0 <HAL_I2C_Master_Transmit>
 800428a:	4603      	mov	r3, r0
}
 800428c:	4618      	mov	r0, r3
 800428e:	3730      	adds	r7, #48	; 0x30
 8004290:	46bd      	mov	sp, r7
 8004292:	bd80      	pop	{r7, pc}
 8004294:	20000000 	.word	0x20000000
 8004298:	20000290 	.word	0x20000290

0800429c <setPortOutput>:

HAL_StatusTypeDef setPortOutput(uint8_t portSelect, uint8_t streamSettings){
 800429c:	b580      	push	{r7, lr}
 800429e:	b088      	sub	sp, #32
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	4603      	mov	r3, r0
 80042a4:	460a      	mov	r2, r1
 80042a6:	71fb      	strb	r3, [r7, #7]
 80042a8:	4613      	mov	r3, r2
 80042aa:	71bb      	strb	r3, [r7, #6]
    config_message.cls = UBX_CLASS_CFG;
 80042ac:	4b12      	ldr	r3, [pc, #72]	; (80042f8 <setPortOutput+0x5c>)
 80042ae:	2206      	movs	r2, #6
 80042b0:	701a      	strb	r2, [r3, #0]
    config_message.id =  UBX_CFG_PRT;
 80042b2:	4b11      	ldr	r3, [pc, #68]	; (80042f8 <setPortOutput+0x5c>)
 80042b4:	2200      	movs	r2, #0
 80042b6:	705a      	strb	r2, [r3, #1]
    config_message.len = 20;
 80042b8:	4b0f      	ldr	r3, [pc, #60]	; (80042f8 <setPortOutput+0x5c>)
 80042ba:	2214      	movs	r2, #20
 80042bc:	805a      	strh	r2, [r3, #2]
    uint8_t payloadCfg[20] = {0};
 80042be:	2300      	movs	r3, #0
 80042c0:	60fb      	str	r3, [r7, #12]
 80042c2:	f107 0310 	add.w	r3, r7, #16
 80042c6:	2200      	movs	r2, #0
 80042c8:	601a      	str	r2, [r3, #0]
 80042ca:	605a      	str	r2, [r3, #4]
 80042cc:	609a      	str	r2, [r3, #8]
 80042ce:	60da      	str	r2, [r3, #12]
    payloadCfg[4] = 0x84;
 80042d0:	2384      	movs	r3, #132	; 0x84
 80042d2:	743b      	strb	r3, [r7, #16]
    payloadCfg[12] = 0x23;
 80042d4:	2323      	movs	r3, #35	; 0x23
 80042d6:	763b      	strb	r3, [r7, #24]
    payloadCfg[14] = streamSettings;
 80042d8:	79bb      	ldrb	r3, [r7, #6]
 80042da:	76bb      	strb	r3, [r7, #26]
    config_message.payload = payloadCfg;
 80042dc:	4a06      	ldr	r2, [pc, #24]	; (80042f8 <setPortOutput+0x5c>)
 80042de:	f107 030c 	add.w	r3, r7, #12
 80042e2:	6093      	str	r3, [r2, #8]
    calcChecksum(&config_message);
 80042e4:	4804      	ldr	r0, [pc, #16]	; (80042f8 <setPortOutput+0x5c>)
 80042e6:	f7ff fefd 	bl	80040e4 <calcChecksum>
    return sendI2Cmessage();
 80042ea:	f7ff ff6f 	bl	80041cc <sendI2Cmessage>
 80042ee:	4603      	mov	r3, r0
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	3720      	adds	r7, #32
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bd80      	pop	{r7, pc}
 80042f8:	20000000 	.word	0x20000000

080042fc <configureNMEA>:
    message[8] = config_message.checksumA;
    message[9] = config_message.checksumB;
    return UbloxI2CWriteReadPolling(UBLOX_M9N, message, 10, rx_mes, 11, 100);
}

HAL_StatusTypeDef configureNMEA(uint8_t msgClass, uint8_t msgID, uint8_t rate, uint8_t portID){
 80042fc:	b590      	push	{r4, r7, lr}
 80042fe:	b085      	sub	sp, #20
 8004300:	af00      	add	r7, sp, #0
 8004302:	4604      	mov	r4, r0
 8004304:	4608      	mov	r0, r1
 8004306:	4611      	mov	r1, r2
 8004308:	461a      	mov	r2, r3
 800430a:	4623      	mov	r3, r4
 800430c:	71fb      	strb	r3, [r7, #7]
 800430e:	4603      	mov	r3, r0
 8004310:	71bb      	strb	r3, [r7, #6]
 8004312:	460b      	mov	r3, r1
 8004314:	717b      	strb	r3, [r7, #5]
 8004316:	4613      	mov	r3, r2
 8004318:	713b      	strb	r3, [r7, #4]
    config_message.cls = UBX_CLASS_CFG;
 800431a:	4b10      	ldr	r3, [pc, #64]	; (800435c <configureNMEA+0x60>)
 800431c:	2206      	movs	r2, #6
 800431e:	701a      	strb	r2, [r3, #0]
    config_message.id = UBX_CFG_MSG;
 8004320:	4b0e      	ldr	r3, [pc, #56]	; (800435c <configureNMEA+0x60>)
 8004322:	2201      	movs	r2, #1
 8004324:	705a      	strb	r2, [r3, #1]
    config_message.len = 8;
 8004326:	4b0d      	ldr	r3, [pc, #52]	; (800435c <configureNMEA+0x60>)
 8004328:	2208      	movs	r2, #8
 800432a:	805a      	strh	r2, [r3, #2]
    uint8_t payloadCfg[8] = {0};
 800432c:	2300      	movs	r3, #0
 800432e:	60bb      	str	r3, [r7, #8]
 8004330:	2300      	movs	r3, #0
 8004332:	60fb      	str	r3, [r7, #12]
    payloadCfg[0] = msgClass;
 8004334:	79fb      	ldrb	r3, [r7, #7]
 8004336:	723b      	strb	r3, [r7, #8]
    payloadCfg[1] = msgID;
 8004338:	79bb      	ldrb	r3, [r7, #6]
 800433a:	727b      	strb	r3, [r7, #9]
    payloadCfg[2] = rate;
 800433c:	797b      	ldrb	r3, [r7, #5]
 800433e:	72bb      	strb	r3, [r7, #10]
    config_message.payload = payloadCfg;
 8004340:	4a06      	ldr	r2, [pc, #24]	; (800435c <configureNMEA+0x60>)
 8004342:	f107 0308 	add.w	r3, r7, #8
 8004346:	6093      	str	r3, [r2, #8]
    calcChecksum(&config_message);
 8004348:	4804      	ldr	r0, [pc, #16]	; (800435c <configureNMEA+0x60>)
 800434a:	f7ff fecb 	bl	80040e4 <calcChecksum>
    return sendI2Cmessage();
 800434e:	f7ff ff3d 	bl	80041cc <sendI2Cmessage>
 8004352:	4603      	mov	r3, r0
}
 8004354:	4618      	mov	r0, r3
 8004356:	3714      	adds	r7, #20
 8004358:	46bd      	mov	sp, r7
 800435a:	bd90      	pop	{r4, r7, pc}
 800435c:	20000000 	.word	0x20000000

08004360 <init_gps_data>:
    config_message.payload = payloadCfg;
    calcChecksum(&config_message);
    return sendI2Cmessage();
}

void init_gps_data(void){
 8004360:	b580      	push	{r7, lr}
 8004362:	af00      	add	r7, sp, #0
 8004364:	4b17      	ldr	r3, [pc, #92]	; (80043c4 <init_gps_data+0x64>)
 8004366:	2200      	movs	r2, #0
 8004368:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    memset(gps_data.EW, 0, 1);
    memset(gps_data.HDOP, 0, 5);
 800436c:	2205      	movs	r2, #5
 800436e:	2100      	movs	r1, #0
 8004370:	4815      	ldr	r0, [pc, #84]	; (80043c8 <init_gps_data+0x68>)
 8004372:	f00b fdbb 	bl	800feec <memset>
 8004376:	4b13      	ldr	r3, [pc, #76]	; (80043c4 <init_gps_data+0x64>)
 8004378:	2200      	movs	r2, #0
 800437a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
    memset(gps_data.NS, 0, 1);
    gps_data.altitude = 0;
 800437e:	4b11      	ldr	r3, [pc, #68]	; (80043c4 <init_gps_data+0x64>)
 8004380:	2200      	movs	r2, #0
 8004382:	665a      	str	r2, [r3, #100]	; 0x64
    gps_data.latitude = 0;
 8004384:	4b0f      	ldr	r3, [pc, #60]	; (80043c4 <init_gps_data+0x64>)
 8004386:	2200      	movs	r2, #0
 8004388:	655a      	str	r2, [r3, #84]	; 0x54
    gps_data.longtitude = 0;
 800438a:	4b0e      	ldr	r3, [pc, #56]	; (80043c4 <init_gps_data+0x64>)
 800438c:	2200      	movs	r2, #0
 800438e:	65da      	str	r2, [r3, #92]	; 0x5c
 8004390:	4b0c      	ldr	r3, [pc, #48]	; (80043c4 <init_gps_data+0x64>)
 8004392:	2200      	movs	r2, #0
 8004394:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    memset(gps_data.quality, 0, 1);
    memset(gps_data.satellites, 0, 2);
 8004398:	2202      	movs	r2, #2
 800439a:	2100      	movs	r1, #0
 800439c:	480b      	ldr	r0, [pc, #44]	; (80043cc <init_gps_data+0x6c>)
 800439e:	f00b fda5 	bl	800feec <memset>
    memset(gps_data.sentence, 0, 75);
 80043a2:	224b      	movs	r2, #75	; 0x4b
 80043a4:	2100      	movs	r1, #0
 80043a6:	4807      	ldr	r0, [pc, #28]	; (80043c4 <init_gps_data+0x64>)
 80043a8:	f00b fda0 	bl	800feec <memset>
    memset(gps_data.sep, 0, 6);
 80043ac:	2206      	movs	r2, #6
 80043ae:	2100      	movs	r1, #0
 80043b0:	4807      	ldr	r0, [pc, #28]	; (80043d0 <init_gps_data+0x70>)
 80043b2:	f00b fd9b 	bl	800feec <memset>
    memset(gps_data.timestamp, 0, 9);
 80043b6:	2209      	movs	r2, #9
 80043b8:	2100      	movs	r1, #0
 80043ba:	4806      	ldr	r0, [pc, #24]	; (80043d4 <init_gps_data+0x74>)
 80043bc:	f00b fd96 	bl	800feec <memset>
}
 80043c0:	bf00      	nop
 80043c2:	bd80      	pop	{r7, pc}
 80043c4:	200002e4 	.word	0x200002e4
 80043c8:	2000034e 	.word	0x2000034e
 80043cc:	2000034c 	.word	0x2000034c
 80043d0:	20000353 	.word	0x20000353
 80043d4:	2000032f 	.word	0x2000032f

080043d8 <strtoke>:

    return len;
}

char* strtoke(char *str, const char *delim)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b084      	sub	sp, #16
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
 80043e0:	6039      	str	r1, [r7, #0]
  static char *start = NULL; /* stores string str for consecutive calls */
  char *token = NULL; /* found token */
 80043e2:	2300      	movs	r3, #0
 80043e4:	60fb      	str	r3, [r7, #12]
  /* assign new start in case */
  if (str) start = str;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d002      	beq.n	80043f2 <strtoke+0x1a>
 80043ec:	4a12      	ldr	r2, [pc, #72]	; (8004438 <strtoke+0x60>)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6013      	str	r3, [r2, #0]
  /* check whether text to parse left */
  if (!start) return NULL;
 80043f2:	4b11      	ldr	r3, [pc, #68]	; (8004438 <strtoke+0x60>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d101      	bne.n	80043fe <strtoke+0x26>
 80043fa:	2300      	movs	r3, #0
 80043fc:	e017      	b.n	800442e <strtoke+0x56>
  /* remember current start as found token */
  token = start;
 80043fe:	4b0e      	ldr	r3, [pc, #56]	; (8004438 <strtoke+0x60>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	60fb      	str	r3, [r7, #12]
  /* find next occurrence of delim */
  start = strpbrk(start, delim);
 8004404:	4b0c      	ldr	r3, [pc, #48]	; (8004438 <strtoke+0x60>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	6839      	ldr	r1, [r7, #0]
 800440a:	4618      	mov	r0, r3
 800440c:	f00c fa08 	bl	8010820 <strpbrk>
 8004410:	4603      	mov	r3, r0
 8004412:	4a09      	ldr	r2, [pc, #36]	; (8004438 <strtoke+0x60>)
 8004414:	6013      	str	r3, [r2, #0]
  /* replace delim with terminator and move start to follower */
  if (start) *start++ = '\0';
 8004416:	4b08      	ldr	r3, [pc, #32]	; (8004438 <strtoke+0x60>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d006      	beq.n	800442c <strtoke+0x54>
 800441e:	4b06      	ldr	r3, [pc, #24]	; (8004438 <strtoke+0x60>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	1c5a      	adds	r2, r3, #1
 8004424:	4904      	ldr	r1, [pc, #16]	; (8004438 <strtoke+0x60>)
 8004426:	600a      	str	r2, [r1, #0]
 8004428:	2200      	movs	r2, #0
 800442a:	701a      	strb	r2, [r3, #0]
  /* done */
  return token;
 800442c:	68fb      	ldr	r3, [r7, #12]
}
 800442e:	4618      	mov	r0, r3
 8004430:	3710      	adds	r7, #16
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}
 8004436:	bf00      	nop
 8004438:	20000360 	.word	0x20000360

0800443c <altAtol>:
  }

  return sign * result;
}

long altAtol(char *str) {
 800443c:	b480      	push	{r7}
 800443e:	b087      	sub	sp, #28
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  float result = 0;
 8004444:	f04f 0300 	mov.w	r3, #0
 8004448:	617b      	str	r3, [r7, #20]
  long ret = 0;
 800444a:	2300      	movs	r3, #0
 800444c:	60fb      	str	r3, [r7, #12]
  float divisor = 10;
 800444e:	4b3d      	ldr	r3, [pc, #244]	; (8004544 <altAtol+0x108>)
 8004450:	613b      	str	r3, [r7, #16]
  int sign = 1;
 8004452:	2301      	movs	r3, #1
 8004454:	60bb      	str	r3, [r7, #8]

  // Skip whitespace
  while (*str == ' ') {
 8004456:	e002      	b.n	800445e <altAtol+0x22>
    str++;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	3301      	adds	r3, #1
 800445c:	607b      	str	r3, [r7, #4]
  while (*str == ' ') {
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	781b      	ldrb	r3, [r3, #0]
 8004462:	2b20      	cmp	r3, #32
 8004464:	d0f8      	beq.n	8004458 <altAtol+0x1c>
  }

  // Handle optional sign
  if (*str == '-') {
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	781b      	ldrb	r3, [r3, #0]
 800446a:	2b2d      	cmp	r3, #45	; 0x2d
 800446c:	d106      	bne.n	800447c <altAtol+0x40>
    sign = -1;
 800446e:	f04f 33ff 	mov.w	r3, #4294967295
 8004472:	60bb      	str	r3, [r7, #8]
    str++;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	3301      	adds	r3, #1
 8004478:	607b      	str	r3, [r7, #4]
 800447a:	e01d      	b.n	80044b8 <altAtol+0x7c>
  } else if (*str == '+') {
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	781b      	ldrb	r3, [r3, #0]
 8004480:	2b2b      	cmp	r3, #43	; 0x2b
 8004482:	d119      	bne.n	80044b8 <altAtol+0x7c>
    sign = 1;
 8004484:	2301      	movs	r3, #1
 8004486:	60bb      	str	r3, [r7, #8]
    str++;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	3301      	adds	r3, #1
 800448c:	607b      	str	r3, [r7, #4]
  }

  // Parse integer part
  while (*str >= '0' && *str <= '9') {
 800448e:	e013      	b.n	80044b8 <altAtol+0x7c>
    result = (result * 10) + (*str - '0');
 8004490:	edd7 7a05 	vldr	s15, [r7, #20]
 8004494:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004498:	ee27 7a87 	vmul.f32	s14, s15, s14
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	781b      	ldrb	r3, [r3, #0]
 80044a0:	3b30      	subs	r3, #48	; 0x30
 80044a2:	ee07 3a90 	vmov	s15, r3
 80044a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80044aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80044ae:	edc7 7a05 	vstr	s15, [r7, #20]
    str++;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	3301      	adds	r3, #1
 80044b6:	607b      	str	r3, [r7, #4]
  while (*str >= '0' && *str <= '9') {
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	781b      	ldrb	r3, [r3, #0]
 80044bc:	2b2f      	cmp	r3, #47	; 0x2f
 80044be:	d903      	bls.n	80044c8 <altAtol+0x8c>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	781b      	ldrb	r3, [r3, #0]
 80044c4:	2b39      	cmp	r3, #57	; 0x39
 80044c6:	d9e3      	bls.n	8004490 <altAtol+0x54>
  }

  // Parse decimal part
  if (*str == '.') {
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	781b      	ldrb	r3, [r3, #0]
 80044cc:	2b2e      	cmp	r3, #46	; 0x2e
 80044ce:	d127      	bne.n	8004520 <altAtol+0xe4>
    str++;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	3301      	adds	r3, #1
 80044d4:	607b      	str	r3, [r7, #4]

    while (*str >= '0' && *str <= '9') {
 80044d6:	e01b      	b.n	8004510 <altAtol+0xd4>
      result += (*str - '0') / divisor;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	781b      	ldrb	r3, [r3, #0]
 80044dc:	3b30      	subs	r3, #48	; 0x30
 80044de:	ee07 3a90 	vmov	s15, r3
 80044e2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80044e6:	ed97 7a04 	vldr	s14, [r7, #16]
 80044ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80044ee:	ed97 7a05 	vldr	s14, [r7, #20]
 80044f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80044f6:	edc7 7a05 	vstr	s15, [r7, #20]
      divisor *= 10;
 80044fa:	edd7 7a04 	vldr	s15, [r7, #16]
 80044fe:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004502:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004506:	edc7 7a04 	vstr	s15, [r7, #16]
      str++;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	3301      	adds	r3, #1
 800450e:	607b      	str	r3, [r7, #4]
    while (*str >= '0' && *str <= '9') {
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	781b      	ldrb	r3, [r3, #0]
 8004514:	2b2f      	cmp	r3, #47	; 0x2f
 8004516:	d903      	bls.n	8004520 <altAtol+0xe4>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	781b      	ldrb	r3, [r3, #0]
 800451c:	2b39      	cmp	r3, #57	; 0x39
 800451e:	d9db      	bls.n	80044d8 <altAtol+0x9c>
    }
  }
  ret = (long)(result * 200000);
 8004520:	edd7 7a05 	vldr	s15, [r7, #20]
 8004524:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8004548 <altAtol+0x10c>
 8004528:	ee67 7a87 	vmul.f32	s15, s15, s14
 800452c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004530:	ee17 3a90 	vmov	r3, s15
 8004534:	60fb      	str	r3, [r7, #12]

  return ret;
 8004536:	68fb      	ldr	r3, [r7, #12]
}
 8004538:	4618      	mov	r0, r3
 800453a:	371c      	adds	r7, #28
 800453c:	46bd      	mov	sp, r7
 800453e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004542:	4770      	bx	lr
 8004544:	41200000 	.word	0x41200000
 8004548:	48435000 	.word	0x48435000

0800454c <coorsAtol>:

long coorsAtol(char *coors, char sign){
 800454c:	b480      	push	{r7}
 800454e:	b08d      	sub	sp, #52	; 0x34
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
 8004554:	460b      	mov	r3, r1
 8004556:	70fb      	strb	r3, [r7, #3]
    uint8_t i = 0;
 8004558:	2300      	movs	r3, #0
 800455a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    uint8_t dotIndex=0;
 800455e:	2300      	movs	r3, #0
 8004560:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    char tempBuffer[12]={0};
 8004564:	2300      	movs	r3, #0
 8004566:	60fb      	str	r3, [r7, #12]
 8004568:	f107 0310 	add.w	r3, r7, #16
 800456c:	2200      	movs	r2, #0
 800456e:	601a      	str	r2, [r3, #0]
 8004570:	605a      	str	r2, [r3, #4]
    int deg = 0;
 8004572:	2300      	movs	r3, #0
 8004574:	62bb      	str	r3, [r7, #40]	; 0x28
    float min = 0;
 8004576:	f04f 0300 	mov.w	r3, #0
 800457a:	627b      	str	r3, [r7, #36]	; 0x24
    float divisor = 10;
 800457c:	4b68      	ldr	r3, [pc, #416]	; (8004720 <coorsAtol+0x1d4>)
 800457e:	623b      	str	r3, [r7, #32]
    int s = 1;
 8004580:	2301      	movs	r3, #1
 8004582:	61fb      	str	r3, [r7, #28]
    long result =0;
 8004584:	2300      	movs	r3, #0
 8004586:	61bb      	str	r3, [r7, #24]


    // Skip whitespace
    while (*coors == ' ') {
 8004588:	e002      	b.n	8004590 <coorsAtol+0x44>
      coors++;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	3301      	adds	r3, #1
 800458e:	607b      	str	r3, [r7, #4]
    while (*coors == ' ') {
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	781b      	ldrb	r3, [r3, #0]
 8004594:	2b20      	cmp	r3, #32
 8004596:	d0f8      	beq.n	800458a <coorsAtol+0x3e>
    }
    while ((*coors >= '0' && *coors <= '9') || (*coors == '.')){
 8004598:	e017      	b.n	80045ca <coorsAtol+0x7e>
        tempBuffer[i] = *coors;
 800459a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800459e:	687a      	ldr	r2, [r7, #4]
 80045a0:	7812      	ldrb	r2, [r2, #0]
 80045a2:	3330      	adds	r3, #48	; 0x30
 80045a4:	443b      	add	r3, r7
 80045a6:	f803 2c24 	strb.w	r2, [r3, #-36]
        if (*coors == '.'){
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	781b      	ldrb	r3, [r3, #0]
 80045ae:	2b2e      	cmp	r3, #46	; 0x2e
 80045b0:	d103      	bne.n	80045ba <coorsAtol+0x6e>
            dotIndex = i;
 80045b2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80045b6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        }
        i++;
 80045ba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80045be:	3301      	adds	r3, #1
 80045c0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        coors++;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	3301      	adds	r3, #1
 80045c8:	607b      	str	r3, [r7, #4]
    while ((*coors >= '0' && *coors <= '9') || (*coors == '.')){
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	781b      	ldrb	r3, [r3, #0]
 80045ce:	2b2f      	cmp	r3, #47	; 0x2f
 80045d0:	d903      	bls.n	80045da <coorsAtol+0x8e>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	781b      	ldrb	r3, [r3, #0]
 80045d6:	2b39      	cmp	r3, #57	; 0x39
 80045d8:	d9df      	bls.n	800459a <coorsAtol+0x4e>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	781b      	ldrb	r3, [r3, #0]
 80045de:	2b2e      	cmp	r3, #46	; 0x2e
 80045e0:	d0db      	beq.n	800459a <coorsAtol+0x4e>
    }

    for (i=0; i<(dotIndex-2); i++){
 80045e2:	2300      	movs	r3, #0
 80045e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80045e8:	e013      	b.n	8004612 <coorsAtol+0xc6>
        deg = (deg * 10) + (tempBuffer[i] - '0');
 80045ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80045ec:	4613      	mov	r3, r2
 80045ee:	009b      	lsls	r3, r3, #2
 80045f0:	4413      	add	r3, r2
 80045f2:	005b      	lsls	r3, r3, #1
 80045f4:	461a      	mov	r2, r3
 80045f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80045fa:	3330      	adds	r3, #48	; 0x30
 80045fc:	443b      	add	r3, r7
 80045fe:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004602:	3b30      	subs	r3, #48	; 0x30
 8004604:	4413      	add	r3, r2
 8004606:	62bb      	str	r3, [r7, #40]	; 0x28
    for (i=0; i<(dotIndex-2); i++){
 8004608:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800460c:	3301      	adds	r3, #1
 800460e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8004612:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8004616:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800461a:	3b02      	subs	r3, #2
 800461c:	429a      	cmp	r2, r3
 800461e:	dbe4      	blt.n	80045ea <coorsAtol+0x9e>
    }
//    deg = deg * 60;

    for (i=dotIndex-2; i<dotIndex;i++){
 8004620:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004624:	3b02      	subs	r3, #2
 8004626:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800462a:	e019      	b.n	8004660 <coorsAtol+0x114>
            min = (min * 10) + (tempBuffer[i] - '0');
 800462c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8004630:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004634:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004638:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800463c:	3330      	adds	r3, #48	; 0x30
 800463e:	443b      	add	r3, r7
 8004640:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004644:	3b30      	subs	r3, #48	; 0x30
 8004646:	ee07 3a90 	vmov	s15, r3
 800464a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800464e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004652:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    for (i=dotIndex-2; i<dotIndex;i++){
 8004656:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800465a:	3301      	adds	r3, #1
 800465c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8004660:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8004664:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004668:	429a      	cmp	r2, r3
 800466a:	d3df      	bcc.n	800462c <coorsAtol+0xe0>
    }
    for (i=dotIndex+1;i<12;i++){
 800466c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004670:	3301      	adds	r3, #1
 8004672:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8004676:	e021      	b.n	80046bc <coorsAtol+0x170>
      min += (tempBuffer[i] - '0') / divisor;
 8004678:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800467c:	3330      	adds	r3, #48	; 0x30
 800467e:	443b      	add	r3, r7
 8004680:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004684:	3b30      	subs	r3, #48	; 0x30
 8004686:	ee07 3a90 	vmov	s15, r3
 800468a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800468e:	ed97 7a08 	vldr	s14, [r7, #32]
 8004692:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004696:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800469a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800469e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
      divisor *= 10;
 80046a2:	edd7 7a08 	vldr	s15, [r7, #32]
 80046a6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80046aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80046ae:	edc7 7a08 	vstr	s15, [r7, #32]
    for (i=dotIndex+1;i<12;i++){
 80046b2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80046b6:	3301      	adds	r3, #1
 80046b8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80046bc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80046c0:	2b0b      	cmp	r3, #11
 80046c2:	d9d9      	bls.n	8004678 <coorsAtol+0x12c>
    }
    min = min /60;
 80046c4:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80046c8:	eddf 6a16 	vldr	s13, [pc, #88]	; 8004724 <coorsAtol+0x1d8>
 80046cc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80046d0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

    result = (long)((deg+min) * 200000);
 80046d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046d6:	ee07 3a90 	vmov	s15, r3
 80046da:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80046de:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80046e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80046e6:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8004728 <coorsAtol+0x1dc>
 80046ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80046ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80046f2:	ee17 3a90 	vmov	r3, s15
 80046f6:	61bb      	str	r3, [r7, #24]

    if ((sign == 'W')  || (sign == 'S')){
 80046f8:	78fb      	ldrb	r3, [r7, #3]
 80046fa:	2b57      	cmp	r3, #87	; 0x57
 80046fc:	d002      	beq.n	8004704 <coorsAtol+0x1b8>
 80046fe:	78fb      	ldrb	r3, [r7, #3]
 8004700:	2b53      	cmp	r3, #83	; 0x53
 8004702:	d102      	bne.n	800470a <coorsAtol+0x1be>
        s = -1;
 8004704:	f04f 33ff 	mov.w	r3, #4294967295
 8004708:	61fb      	str	r3, [r7, #28]
    }
    return s * result;
 800470a:	69fb      	ldr	r3, [r7, #28]
 800470c:	69ba      	ldr	r2, [r7, #24]
 800470e:	fb02 f303 	mul.w	r3, r2, r3
}
 8004712:	4618      	mov	r0, r3
 8004714:	3734      	adds	r7, #52	; 0x34
 8004716:	46bd      	mov	sp, r7
 8004718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471c:	4770      	bx	lr
 800471e:	bf00      	nop
 8004720:	41200000 	.word	0x41200000
 8004724:	42700000 	.word	0x42700000
 8004728:	48435000 	.word	0x48435000

0800472c <tick_gyro>:
I2C_HandleTypeDef hi2c2;

static void debugPrintMEMS(mems_data_t *mems_data);


void tick_gyro(mems_data_t * mems_data){
 800472c:	b580      	push	{r7, lr}
 800472e:	b082      	sub	sp, #8
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
    gyro_read(mems_data);
 8004734:	6878      	ldr	r0, [r7, #4]
 8004736:	f000 f8f3 	bl	8004920 <gyro_read>
    lsm6_acc_read(mems_data);
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f000 f972 	bl	8004a24 <lsm6_acc_read>
    lis3_magn_read(mems_data);
 8004740:	6878      	ldr	r0, [r7, #4]
 8004742:	f000 f9d3 	bl	8004aec <lis3_magn_read>
//    osDelay(5);
//    debugPrintMEMS(mems_data);
}
 8004746:	bf00      	nop
 8004748:	3708      	adds	r7, #8
 800474a:	46bd      	mov	sp, r7
 800474c:	bd80      	pop	{r7, pc}
	...

08004750 <lsm6_bus_init>:


uint8_t lsm6_bus_init(void)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 8004754:	4b1b      	ldr	r3, [pc, #108]	; (80047c4 <lsm6_bus_init+0x74>)
 8004756:	4a1c      	ldr	r2, [pc, #112]	; (80047c8 <lsm6_bus_init+0x78>)
 8004758:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00B03FDB;
 800475a:	4b1a      	ldr	r3, [pc, #104]	; (80047c4 <lsm6_bus_init+0x74>)
 800475c:	4a1b      	ldr	r2, [pc, #108]	; (80047cc <lsm6_bus_init+0x7c>)
 800475e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8004760:	4b18      	ldr	r3, [pc, #96]	; (80047c4 <lsm6_bus_init+0x74>)
 8004762:	2200      	movs	r2, #0
 8004764:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004766:	4b17      	ldr	r3, [pc, #92]	; (80047c4 <lsm6_bus_init+0x74>)
 8004768:	2201      	movs	r2, #1
 800476a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800476c:	4b15      	ldr	r3, [pc, #84]	; (80047c4 <lsm6_bus_init+0x74>)
 800476e:	2200      	movs	r2, #0
 8004770:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8004772:	4b14      	ldr	r3, [pc, #80]	; (80047c4 <lsm6_bus_init+0x74>)
 8004774:	2200      	movs	r2, #0
 8004776:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004778:	4b12      	ldr	r3, [pc, #72]	; (80047c4 <lsm6_bus_init+0x74>)
 800477a:	2200      	movs	r2, #0
 800477c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800477e:	4b11      	ldr	r3, [pc, #68]	; (80047c4 <lsm6_bus_init+0x74>)
 8004780:	2200      	movs	r2, #0
 8004782:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004784:	4b0f      	ldr	r3, [pc, #60]	; (80047c4 <lsm6_bus_init+0x74>)
 8004786:	2200      	movs	r2, #0
 8004788:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800478a:	480e      	ldr	r0, [pc, #56]	; (80047c4 <lsm6_bus_init+0x74>)
 800478c:	f002 fd11 	bl	80071b2 <HAL_I2C_Init>
 8004790:	4603      	mov	r3, r0
 8004792:	2b00      	cmp	r3, #0
 8004794:	d001      	beq.n	800479a <lsm6_bus_init+0x4a>
  {
    return 1;
 8004796:	2301      	movs	r3, #1
 8004798:	e012      	b.n	80047c0 <lsm6_bus_init+0x70>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800479a:	2100      	movs	r1, #0
 800479c:	4809      	ldr	r0, [pc, #36]	; (80047c4 <lsm6_bus_init+0x74>)
 800479e:	f003 fb79 	bl	8007e94 <HAL_I2CEx_ConfigAnalogFilter>
 80047a2:	4603      	mov	r3, r0
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d001      	beq.n	80047ac <lsm6_bus_init+0x5c>
  {
    return 2;
 80047a8:	2302      	movs	r3, #2
 80047aa:	e009      	b.n	80047c0 <lsm6_bus_init+0x70>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80047ac:	2100      	movs	r1, #0
 80047ae:	4805      	ldr	r0, [pc, #20]	; (80047c4 <lsm6_bus_init+0x74>)
 80047b0:	f003 fbbb 	bl	8007f2a <HAL_I2CEx_ConfigDigitalFilter>
 80047b4:	4603      	mov	r3, r0
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d001      	beq.n	80047be <lsm6_bus_init+0x6e>
  {
    return 3;
 80047ba:	2303      	movs	r3, #3
 80047bc:	e000      	b.n	80047c0 <lsm6_bus_init+0x70>
  }
  return 0;
 80047be:	2300      	movs	r3, #0

}
 80047c0:	4618      	mov	r0, r3
 80047c2:	bd80      	pop	{r7, pc}
 80047c4:	20000364 	.word	0x20000364
 80047c8:	40005800 	.word	0x40005800
 80047cc:	00b03fdb 	.word	0x00b03fdb

080047d0 <gyro_init>:
		return res;
	}
	return addr;
}

HAL_StatusTypeDef gyro_init(void){
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b086      	sub	sp, #24
 80047d4:	af04      	add	r7, sp, #16
    uint8_t ctrl2_val = 0x50;   //gyro 208Hz-250dps
 80047d6:	2350      	movs	r3, #80	; 0x50
 80047d8:	71fb      	strb	r3, [r7, #7]
    uint8_t ctrl3_val = 0x44;   // block data update - reg addr auto incr
 80047da:	2344      	movs	r3, #68	; 0x44
 80047dc:	71bb      	strb	r3, [r7, #6]
    HAL_I2C_Mem_Write(&hi2c2, LSM6, CTRL2_G, I2C_MEMADD_SIZE_8BIT, &ctrl2_val, 1, 20);
 80047de:	2314      	movs	r3, #20
 80047e0:	9302      	str	r3, [sp, #8]
 80047e2:	2301      	movs	r3, #1
 80047e4:	9301      	str	r3, [sp, #4]
 80047e6:	1dfb      	adds	r3, r7, #7
 80047e8:	9300      	str	r3, [sp, #0]
 80047ea:	2301      	movs	r3, #1
 80047ec:	2211      	movs	r2, #17
 80047ee:	21d4      	movs	r1, #212	; 0xd4
 80047f0:	4809      	ldr	r0, [pc, #36]	; (8004818 <gyro_init+0x48>)
 80047f2:	f002 fe61 	bl	80074b8 <HAL_I2C_Mem_Write>
    return HAL_I2C_Mem_Write(&hi2c2, LSM6, CTRL3_C, I2C_MEMADD_SIZE_8BIT, &ctrl3_val, 1, 20);
 80047f6:	2314      	movs	r3, #20
 80047f8:	9302      	str	r3, [sp, #8]
 80047fa:	2301      	movs	r3, #1
 80047fc:	9301      	str	r3, [sp, #4]
 80047fe:	1dbb      	adds	r3, r7, #6
 8004800:	9300      	str	r3, [sp, #0]
 8004802:	2301      	movs	r3, #1
 8004804:	2212      	movs	r2, #18
 8004806:	21d4      	movs	r1, #212	; 0xd4
 8004808:	4803      	ldr	r0, [pc, #12]	; (8004818 <gyro_init+0x48>)
 800480a:	f002 fe55 	bl	80074b8 <HAL_I2C_Mem_Write>
 800480e:	4603      	mov	r3, r0
}
 8004810:	4618      	mov	r0, r3
 8004812:	3708      	adds	r7, #8
 8004814:	46bd      	mov	sp, r7
 8004816:	bd80      	pop	{r7, pc}
 8004818:	20000364 	.word	0x20000364

0800481c <lsm6_acc_init>:

HAL_StatusTypeDef lsm6_acc_init(void){
 800481c:	b580      	push	{r7, lr}
 800481e:	b086      	sub	sp, #24
 8004820:	af04      	add	r7, sp, #16
    uint8_t ctrl1_val = 0x50;   //acc off
 8004822:	2350      	movs	r3, #80	; 0x50
 8004824:	71fb      	strb	r3, [r7, #7]
    uint8_t ctrl10_val = 0x20; //Enable timestamp
 8004826:	2320      	movs	r3, #32
 8004828:	71bb      	strb	r3, [r7, #6]
    HAL_I2C_Mem_Write(&hi2c2, LSM6, CTRL1_XL, I2C_MEMADD_SIZE_8BIT, &ctrl1_val, 1, 20);
 800482a:	2314      	movs	r3, #20
 800482c:	9302      	str	r3, [sp, #8]
 800482e:	2301      	movs	r3, #1
 8004830:	9301      	str	r3, [sp, #4]
 8004832:	1dfb      	adds	r3, r7, #7
 8004834:	9300      	str	r3, [sp, #0]
 8004836:	2301      	movs	r3, #1
 8004838:	2210      	movs	r2, #16
 800483a:	21d4      	movs	r1, #212	; 0xd4
 800483c:	4809      	ldr	r0, [pc, #36]	; (8004864 <lsm6_acc_init+0x48>)
 800483e:	f002 fe3b 	bl	80074b8 <HAL_I2C_Mem_Write>
    return HAL_I2C_Mem_Write(&hi2c2, LSM6, CTRL10_C, I2C_MEMADD_SIZE_8BIT, &ctrl10_val, 1, 20);
 8004842:	2314      	movs	r3, #20
 8004844:	9302      	str	r3, [sp, #8]
 8004846:	2301      	movs	r3, #1
 8004848:	9301      	str	r3, [sp, #4]
 800484a:	1dbb      	adds	r3, r7, #6
 800484c:	9300      	str	r3, [sp, #0]
 800484e:	2301      	movs	r3, #1
 8004850:	2219      	movs	r2, #25
 8004852:	21d4      	movs	r1, #212	; 0xd4
 8004854:	4803      	ldr	r0, [pc, #12]	; (8004864 <lsm6_acc_init+0x48>)
 8004856:	f002 fe2f 	bl	80074b8 <HAL_I2C_Mem_Write>
 800485a:	4603      	mov	r3, r0
}
 800485c:	4618      	mov	r0, r3
 800485e:	3708      	adds	r7, #8
 8004860:	46bd      	mov	sp, r7
 8004862:	bd80      	pop	{r7, pc}
 8004864:	20000364 	.word	0x20000364

08004868 <magn_init>:

HAL_StatusTypeDef magn_init(void){
 8004868:	b580      	push	{r7, lr}
 800486a:	b086      	sub	sp, #24
 800486c:	af04      	add	r7, sp, #16
	HAL_StatusTypeDef res = HAL_OK;
 800486e:	2300      	movs	r3, #0
 8004870:	71fb      	strb	r3, [r7, #7]
	uint8_t ctrl1_val = 0x42;
 8004872:	2342      	movs	r3, #66	; 0x42
 8004874:	71bb      	strb	r3, [r7, #6]
    uint8_t ctrl3_val = 0x00;
 8004876:	2300      	movs	r3, #0
 8004878:	717b      	strb	r3, [r7, #5]
    uint8_t ctrl4_val = 0x08;
 800487a:	2308      	movs	r3, #8
 800487c:	713b      	strb	r3, [r7, #4]
    uint8_t ctrl5_val = 0x40;
 800487e:	2340      	movs	r3, #64	; 0x40
 8004880:	70fb      	strb	r3, [r7, #3]
    res = HAL_I2C_Mem_Write(&hi2c2, LIS3_MAGN, CTRL_REG1_MG, I2C_MEMADD_SIZE_8BIT, &ctrl1_val, 1, 20);
 8004882:	2314      	movs	r3, #20
 8004884:	9302      	str	r3, [sp, #8]
 8004886:	2301      	movs	r3, #1
 8004888:	9301      	str	r3, [sp, #4]
 800488a:	1dbb      	adds	r3, r7, #6
 800488c:	9300      	str	r3, [sp, #0]
 800488e:	2301      	movs	r3, #1
 8004890:	2220      	movs	r2, #32
 8004892:	213c      	movs	r1, #60	; 0x3c
 8004894:	4821      	ldr	r0, [pc, #132]	; (800491c <magn_init+0xb4>)
 8004896:	f002 fe0f 	bl	80074b8 <HAL_I2C_Mem_Write>
 800489a:	4603      	mov	r3, r0
 800489c:	71fb      	strb	r3, [r7, #7]
    if (res != HAL_OK)return res;
 800489e:	79fb      	ldrb	r3, [r7, #7]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d001      	beq.n	80048a8 <magn_init+0x40>
 80048a4:	79fb      	ldrb	r3, [r7, #7]
 80048a6:	e034      	b.n	8004912 <magn_init+0xaa>
    res = HAL_I2C_Mem_Write(&hi2c2, LIS3_MAGN, CTRL_REG3_MG, I2C_MEMADD_SIZE_8BIT, &ctrl3_val, 1, 20);
 80048a8:	2314      	movs	r3, #20
 80048aa:	9302      	str	r3, [sp, #8]
 80048ac:	2301      	movs	r3, #1
 80048ae:	9301      	str	r3, [sp, #4]
 80048b0:	1d7b      	adds	r3, r7, #5
 80048b2:	9300      	str	r3, [sp, #0]
 80048b4:	2301      	movs	r3, #1
 80048b6:	2222      	movs	r2, #34	; 0x22
 80048b8:	213c      	movs	r1, #60	; 0x3c
 80048ba:	4818      	ldr	r0, [pc, #96]	; (800491c <magn_init+0xb4>)
 80048bc:	f002 fdfc 	bl	80074b8 <HAL_I2C_Mem_Write>
 80048c0:	4603      	mov	r3, r0
 80048c2:	71fb      	strb	r3, [r7, #7]
    if (res != HAL_OK)return res;
 80048c4:	79fb      	ldrb	r3, [r7, #7]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d001      	beq.n	80048ce <magn_init+0x66>
 80048ca:	79fb      	ldrb	r3, [r7, #7]
 80048cc:	e021      	b.n	8004912 <magn_init+0xaa>
    res = HAL_I2C_Mem_Write(&hi2c2, LIS3_MAGN, CTRL_REG4_MG, I2C_MEMADD_SIZE_8BIT, &ctrl4_val, 1, 20);
 80048ce:	2314      	movs	r3, #20
 80048d0:	9302      	str	r3, [sp, #8]
 80048d2:	2301      	movs	r3, #1
 80048d4:	9301      	str	r3, [sp, #4]
 80048d6:	1d3b      	adds	r3, r7, #4
 80048d8:	9300      	str	r3, [sp, #0]
 80048da:	2301      	movs	r3, #1
 80048dc:	2223      	movs	r2, #35	; 0x23
 80048de:	213c      	movs	r1, #60	; 0x3c
 80048e0:	480e      	ldr	r0, [pc, #56]	; (800491c <magn_init+0xb4>)
 80048e2:	f002 fde9 	bl	80074b8 <HAL_I2C_Mem_Write>
 80048e6:	4603      	mov	r3, r0
 80048e8:	71fb      	strb	r3, [r7, #7]
    if (res != HAL_OK)return res;
 80048ea:	79fb      	ldrb	r3, [r7, #7]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d001      	beq.n	80048f4 <magn_init+0x8c>
 80048f0:	79fb      	ldrb	r3, [r7, #7]
 80048f2:	e00e      	b.n	8004912 <magn_init+0xaa>
    res = HAL_I2C_Mem_Write(&hi2c2, LIS3_MAGN, CTRL_REG5_MG, I2C_MEMADD_SIZE_8BIT, &ctrl5_val, 1, 20);
 80048f4:	2314      	movs	r3, #20
 80048f6:	9302      	str	r3, [sp, #8]
 80048f8:	2301      	movs	r3, #1
 80048fa:	9301      	str	r3, [sp, #4]
 80048fc:	1cfb      	adds	r3, r7, #3
 80048fe:	9300      	str	r3, [sp, #0]
 8004900:	2301      	movs	r3, #1
 8004902:	2224      	movs	r2, #36	; 0x24
 8004904:	213c      	movs	r1, #60	; 0x3c
 8004906:	4805      	ldr	r0, [pc, #20]	; (800491c <magn_init+0xb4>)
 8004908:	f002 fdd6 	bl	80074b8 <HAL_I2C_Mem_Write>
 800490c:	4603      	mov	r3, r0
 800490e:	71fb      	strb	r3, [r7, #7]
    return res;
 8004910:	79fb      	ldrb	r3, [r7, #7]
}
 8004912:	4618      	mov	r0, r3
 8004914:	3708      	adds	r7, #8
 8004916:	46bd      	mov	sp, r7
 8004918:	bd80      	pop	{r7, pc}
 800491a:	bf00      	nop
 800491c:	20000364 	.word	0x20000364

08004920 <gyro_read>:

HAL_StatusTypeDef gyro_read(mems_data_t *mems_data){
 8004920:	b580      	push	{r7, lr}
 8004922:	b08c      	sub	sp, #48	; 0x30
 8004924:	af04      	add	r7, sp, #16
 8004926:	6078      	str	r0, [r7, #4]
	uint8_t data[6]={0};
 8004928:	2300      	movs	r3, #0
 800492a:	613b      	str	r3, [r7, #16]
 800492c:	2300      	movs	r3, #0
 800492e:	82bb      	strh	r3, [r7, #20]
	uint8_t ts_data[4]={0};
 8004930:	2300      	movs	r3, #0
 8004932:	60fb      	str	r3, [r7, #12]
	int16_t gyro_x, gyro_y, gyro_z;
	HAL_StatusTypeDef res = HAL_OK;
 8004934:	2300      	movs	r3, #0
 8004936:	77fb      	strb	r3, [r7, #31]
    HAL_I2C_Mem_Read(&hi2c2, LSM6, OUTX_L_G, I2C_MEMADD_SIZE_8BIT, data, 6, 50);
 8004938:	2332      	movs	r3, #50	; 0x32
 800493a:	9302      	str	r3, [sp, #8]
 800493c:	2306      	movs	r3, #6
 800493e:	9301      	str	r3, [sp, #4]
 8004940:	f107 0310 	add.w	r3, r7, #16
 8004944:	9300      	str	r3, [sp, #0]
 8004946:	2301      	movs	r3, #1
 8004948:	2222      	movs	r2, #34	; 0x22
 800494a:	21d4      	movs	r1, #212	; 0xd4
 800494c:	4833      	ldr	r0, [pc, #204]	; (8004a1c <gyro_read+0xfc>)
 800494e:	f002 fec7 	bl	80076e0 <HAL_I2C_Mem_Read>
    if (res != HAL_OK){
 8004952:	7ffb      	ldrb	r3, [r7, #31]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d001      	beq.n	800495c <gyro_read+0x3c>
		return res;
 8004958:	7ffb      	ldrb	r3, [r7, #31]
 800495a:	e05a      	b.n	8004a12 <gyro_read+0xf2>
	}
    HAL_I2C_Mem_Read(&hi2c2, LSM6, TIMESTAMP0, I2C_MEMADD_SIZE_8BIT, ts_data, 4, 50);
 800495c:	2332      	movs	r3, #50	; 0x32
 800495e:	9302      	str	r3, [sp, #8]
 8004960:	2304      	movs	r3, #4
 8004962:	9301      	str	r3, [sp, #4]
 8004964:	f107 030c 	add.w	r3, r7, #12
 8004968:	9300      	str	r3, [sp, #0]
 800496a:	2301      	movs	r3, #1
 800496c:	2240      	movs	r2, #64	; 0x40
 800496e:	21d4      	movs	r1, #212	; 0xd4
 8004970:	482a      	ldr	r0, [pc, #168]	; (8004a1c <gyro_read+0xfc>)
 8004972:	f002 feb5 	bl	80076e0 <HAL_I2C_Mem_Read>
    if (res != HAL_OK){
 8004976:	7ffb      	ldrb	r3, [r7, #31]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d001      	beq.n	8004980 <gyro_read+0x60>
		return res;
 800497c:	7ffb      	ldrb	r3, [r7, #31]
 800497e:	e048      	b.n	8004a12 <gyro_read+0xf2>
	}
    gyro_x = ((int16_t)((data[1] << 8) | data[0]));
 8004980:	7c7b      	ldrb	r3, [r7, #17]
 8004982:	021b      	lsls	r3, r3, #8
 8004984:	b21a      	sxth	r2, r3
 8004986:	7c3b      	ldrb	r3, [r7, #16]
 8004988:	b21b      	sxth	r3, r3
 800498a:	4313      	orrs	r3, r2
 800498c:	83bb      	strh	r3, [r7, #28]
    gyro_y = ((int16_t)((data[3] << 8) | data[2]));
 800498e:	7cfb      	ldrb	r3, [r7, #19]
 8004990:	021b      	lsls	r3, r3, #8
 8004992:	b21a      	sxth	r2, r3
 8004994:	7cbb      	ldrb	r3, [r7, #18]
 8004996:	b21b      	sxth	r3, r3
 8004998:	4313      	orrs	r3, r2
 800499a:	837b      	strh	r3, [r7, #26]
    gyro_z = ((int16_t)((data[5] << 8) | data[4]));
 800499c:	7d7b      	ldrb	r3, [r7, #21]
 800499e:	021b      	lsls	r3, r3, #8
 80049a0:	b21a      	sxth	r2, r3
 80049a2:	7d3b      	ldrb	r3, [r7, #20]
 80049a4:	b21b      	sxth	r3, r3
 80049a6:	4313      	orrs	r3, r2
 80049a8:	833b      	strh	r3, [r7, #24]
    mems_data->gyro_x = (gyro_x / 131.1f);// * -1.0f;
 80049aa:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80049ae:	ee07 3a90 	vmov	s15, r3
 80049b2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80049b6:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8004a20 <gyro_read+0x100>
 80049ba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	edc3 7a00 	vstr	s15, [r3]
    mems_data->gyro_y = (gyro_y / 131.1f);// * -1.0f;
 80049c4:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80049c8:	ee07 3a90 	vmov	s15, r3
 80049cc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80049d0:	eddf 6a13 	vldr	s13, [pc, #76]	; 8004a20 <gyro_read+0x100>
 80049d4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	edc3 7a01 	vstr	s15, [r3, #4]
    mems_data->gyro_z = (gyro_z / 131.1f);// * -1.0f;
 80049de:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80049e2:	ee07 3a90 	vmov	s15, r3
 80049e6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80049ea:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8004a20 <gyro_read+0x100>
 80049ee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	edc3 7a02 	vstr	s15, [r3, #8]
    mems_data->timestamp = ((int)((ts_data[3]<<24)|(ts_data[2]<<16)|(ts_data[1]<<8)|(ts_data[0])));
 80049f8:	7bfb      	ldrb	r3, [r7, #15]
 80049fa:	061a      	lsls	r2, r3, #24
 80049fc:	7bbb      	ldrb	r3, [r7, #14]
 80049fe:	041b      	lsls	r3, r3, #16
 8004a00:	431a      	orrs	r2, r3
 8004a02:	7b7b      	ldrb	r3, [r7, #13]
 8004a04:	021b      	lsls	r3, r3, #8
 8004a06:	4313      	orrs	r3, r2
 8004a08:	7b3a      	ldrb	r2, [r7, #12]
 8004a0a:	431a      	orrs	r2, r3
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	625a      	str	r2, [r3, #36]	; 0x24
    return res;
 8004a10:	7ffb      	ldrb	r3, [r7, #31]
}
 8004a12:	4618      	mov	r0, r3
 8004a14:	3720      	adds	r7, #32
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd80      	pop	{r7, pc}
 8004a1a:	bf00      	nop
 8004a1c:	20000364 	.word	0x20000364
 8004a20:	4303199a 	.word	0x4303199a

08004a24 <lsm6_acc_read>:

HAL_StatusTypeDef lsm6_acc_read(mems_data_t *mems_data){
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b08a      	sub	sp, #40	; 0x28
 8004a28:	af04      	add	r7, sp, #16
 8004a2a:	6078      	str	r0, [r7, #4]
	uint8_t data[6] = {0};
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	60bb      	str	r3, [r7, #8]
 8004a30:	2300      	movs	r3, #0
 8004a32:	81bb      	strh	r3, [r7, #12]
	int16_t acc_x, acc_y, acc_z;
	HAL_StatusTypeDef res = HAL_OK;
 8004a34:	2300      	movs	r3, #0
 8004a36:	75fb      	strb	r3, [r7, #23]
	res = HAL_I2C_Mem_Read(&hi2c2, LSM6, OUTX_L_A, I2C_MEMADD_SIZE_8BIT, data, 6, 50);
 8004a38:	2332      	movs	r3, #50	; 0x32
 8004a3a:	9302      	str	r3, [sp, #8]
 8004a3c:	2306      	movs	r3, #6
 8004a3e:	9301      	str	r3, [sp, #4]
 8004a40:	f107 0308 	add.w	r3, r7, #8
 8004a44:	9300      	str	r3, [sp, #0]
 8004a46:	2301      	movs	r3, #1
 8004a48:	2228      	movs	r2, #40	; 0x28
 8004a4a:	21d4      	movs	r1, #212	; 0xd4
 8004a4c:	4825      	ldr	r0, [pc, #148]	; (8004ae4 <lsm6_acc_read+0xc0>)
 8004a4e:	f002 fe47 	bl	80076e0 <HAL_I2C_Mem_Read>
 8004a52:	4603      	mov	r3, r0
 8004a54:	75fb      	strb	r3, [r7, #23]
	if (res != HAL_OK){
 8004a56:	7dfb      	ldrb	r3, [r7, #23]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d001      	beq.n	8004a60 <lsm6_acc_read+0x3c>
		return res;
 8004a5c:	7dfb      	ldrb	r3, [r7, #23]
 8004a5e:	e03c      	b.n	8004ada <lsm6_acc_read+0xb6>
	}
    acc_x = ((int16_t)((data[1] << 8) | data[0]));
 8004a60:	7a7b      	ldrb	r3, [r7, #9]
 8004a62:	021b      	lsls	r3, r3, #8
 8004a64:	b21a      	sxth	r2, r3
 8004a66:	7a3b      	ldrb	r3, [r7, #8]
 8004a68:	b21b      	sxth	r3, r3
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	82bb      	strh	r3, [r7, #20]
    acc_y = ((int16_t)((data[3] << 8) | data[2]));
 8004a6e:	7afb      	ldrb	r3, [r7, #11]
 8004a70:	021b      	lsls	r3, r3, #8
 8004a72:	b21a      	sxth	r2, r3
 8004a74:	7abb      	ldrb	r3, [r7, #10]
 8004a76:	b21b      	sxth	r3, r3
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	827b      	strh	r3, [r7, #18]
    acc_z = ((int16_t)((data[5] << 8) | data[4]));
 8004a7c:	7b7b      	ldrb	r3, [r7, #13]
 8004a7e:	021b      	lsls	r3, r3, #8
 8004a80:	b21a      	sxth	r2, r3
 8004a82:	7b3b      	ldrb	r3, [r7, #12]
 8004a84:	b21b      	sxth	r3, r3
 8004a86:	4313      	orrs	r3, r2
 8004a88:	823b      	strh	r3, [r7, #16]
    mems_data->acc_x = (acc_x / 16384.0f);//  * -1.0f;
 8004a8a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004a8e:	ee07 3a90 	vmov	s15, r3
 8004a92:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004a96:	eddf 6a14 	vldr	s13, [pc, #80]	; 8004ae8 <lsm6_acc_read+0xc4>
 8004a9a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	edc3 7a03 	vstr	s15, [r3, #12]
    mems_data->acc_y = (acc_y / 16384.0f);// * -1.0f;
 8004aa4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004aa8:	ee07 3a90 	vmov	s15, r3
 8004aac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004ab0:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8004ae8 <lsm6_acc_read+0xc4>
 8004ab4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	edc3 7a04 	vstr	s15, [r3, #16]
    mems_data->acc_z = (acc_z / 16384.0f);// * -1.0f;
 8004abe:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004ac2:	ee07 3a90 	vmov	s15, r3
 8004ac6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004aca:	eddf 6a07 	vldr	s13, [pc, #28]	; 8004ae8 <lsm6_acc_read+0xc4>
 8004ace:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	edc3 7a05 	vstr	s15, [r3, #20]
    return res;
 8004ad8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ada:	4618      	mov	r0, r3
 8004adc:	3718      	adds	r7, #24
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd80      	pop	{r7, pc}
 8004ae2:	bf00      	nop
 8004ae4:	20000364 	.word	0x20000364
 8004ae8:	46800000 	.word	0x46800000

08004aec <lis3_magn_read>:

HAL_StatusTypeDef lis3_magn_read(mems_data_t *mems_data){
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b08a      	sub	sp, #40	; 0x28
 8004af0:	af04      	add	r7, sp, #16
 8004af2:	6078      	str	r0, [r7, #4]
	uint8_t data[6] = {0};
 8004af4:	2300      	movs	r3, #0
 8004af6:	60bb      	str	r3, [r7, #8]
 8004af8:	2300      	movs	r3, #0
 8004afa:	81bb      	strh	r3, [r7, #12]
    int16_t magn_x, magn_y, magn_z;
    HAL_StatusTypeDef res = HAL_OK;
 8004afc:	2300      	movs	r3, #0
 8004afe:	75fb      	strb	r3, [r7, #23]

    HAL_I2C_Mem_Read(&hi2c2, LIS3_MAGN, OUT_X_L_MG, I2C_MEMADD_SIZE_8BIT, data, 6, 50);
 8004b00:	2332      	movs	r3, #50	; 0x32
 8004b02:	9302      	str	r3, [sp, #8]
 8004b04:	2306      	movs	r3, #6
 8004b06:	9301      	str	r3, [sp, #4]
 8004b08:	f107 0308 	add.w	r3, r7, #8
 8004b0c:	9300      	str	r3, [sp, #0]
 8004b0e:	2301      	movs	r3, #1
 8004b10:	2228      	movs	r2, #40	; 0x28
 8004b12:	213c      	movs	r1, #60	; 0x3c
 8004b14:	4824      	ldr	r0, [pc, #144]	; (8004ba8 <lis3_magn_read+0xbc>)
 8004b16:	f002 fde3 	bl	80076e0 <HAL_I2C_Mem_Read>
    if (res != HAL_OK){
 8004b1a:	7dfb      	ldrb	r3, [r7, #23]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d001      	beq.n	8004b24 <lis3_magn_read+0x38>
    	return res;
 8004b20:	7dfb      	ldrb	r3, [r7, #23]
 8004b22:	e03c      	b.n	8004b9e <lis3_magn_read+0xb2>
	}
    magn_x = ((int16_t)((data[1] << 8) | data[0]));
 8004b24:	7a7b      	ldrb	r3, [r7, #9]
 8004b26:	021b      	lsls	r3, r3, #8
 8004b28:	b21a      	sxth	r2, r3
 8004b2a:	7a3b      	ldrb	r3, [r7, #8]
 8004b2c:	b21b      	sxth	r3, r3
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	82bb      	strh	r3, [r7, #20]
    magn_y = ((int16_t)((data[3] << 8) | data[2]));
 8004b32:	7afb      	ldrb	r3, [r7, #11]
 8004b34:	021b      	lsls	r3, r3, #8
 8004b36:	b21a      	sxth	r2, r3
 8004b38:	7abb      	ldrb	r3, [r7, #10]
 8004b3a:	b21b      	sxth	r3, r3
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	827b      	strh	r3, [r7, #18]
    magn_z = ((int16_t)((data[5] << 8) | data[4]));
 8004b40:	7b7b      	ldrb	r3, [r7, #13]
 8004b42:	021b      	lsls	r3, r3, #8
 8004b44:	b21a      	sxth	r2, r3
 8004b46:	7b3b      	ldrb	r3, [r7, #12]
 8004b48:	b21b      	sxth	r3, r3
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	823b      	strh	r3, [r7, #16]
    mems_data->magn_x = magn_x / 10.0f;
 8004b4e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004b52:	ee07 3a90 	vmov	s15, r3
 8004b56:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004b5a:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8004b5e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	edc3 7a06 	vstr	s15, [r3, #24]
    mems_data->magn_y = magn_y / 10.0f;
 8004b68:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004b6c:	ee07 3a90 	vmov	s15, r3
 8004b70:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004b74:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8004b78:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	edc3 7a07 	vstr	s15, [r3, #28]
    mems_data->magn_z = magn_z / 10.0f;
 8004b82:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004b86:	ee07 3a90 	vmov	s15, r3
 8004b8a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004b8e:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8004b92:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	edc3 7a08 	vstr	s15, [r3, #32]
    return res;
 8004b9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	3718      	adds	r7, #24
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd80      	pop	{r7, pc}
 8004ba6:	bf00      	nop
 8004ba8:	20000364 	.word	0x20000364

08004bac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004bac:	b5b0      	push	{r4, r5, r7, lr}
 8004bae:	b09c      	sub	sp, #112	; 0x70
 8004bb0:	af00      	add	r7, sp, #0

  HAL_Init();
 8004bb2:	f001 ff1c 	bl	80069ee <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8004bb6:	f000 fa11 	bl	8004fdc <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004bba:	f000 fa61 	bl	8005080 <MX_GPIO_Init>

  MX_USART1_UART_Init();
 8004bbe:	f001 fca9 	bl	8006514 <MX_USART1_UART_Init>

  MX_UART4_Init();
 8004bc2:	f001 fcf9 	bl	80065b8 <MX_UART4_Init>


  if (lsm6_bus_init() != 0){
 8004bc6:	f7ff fdc3 	bl	8004750 <lsm6_bus_init>
 8004bca:	4603      	mov	r3, r0
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d010      	beq.n	8004bf2 <main+0x46>
	  uint8_t Test[] = "Failed to init I2C bus\r\n";
 8004bd0:	4b67      	ldr	r3, [pc, #412]	; (8004d70 <main+0x1c4>)
 8004bd2:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8004bd6:	461d      	mov	r5, r3
 8004bd8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004bda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004bdc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004be0:	c403      	stmia	r4!, {r0, r1}
 8004be2:	7022      	strb	r2, [r4, #0]
	  uart_write_debug(Test, 10);
 8004be4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004be8:	210a      	movs	r1, #10
 8004bea:	4618      	mov	r0, r3
 8004bec:	f001 fd6e 	bl	80066cc <uart_write_debug>
 8004bf0:	e042      	b.n	8004c78 <main+0xcc>
  }
  else{
		  if (lsm6_acc_init() != HAL_OK){
 8004bf2:	f7ff fe13 	bl	800481c <lsm6_acc_init>
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d00f      	beq.n	8004c1c <main+0x70>
			  uint8_t Test[] = "Failed to init LSM6 acc\r\n";
 8004bfc:	4b5d      	ldr	r3, [pc, #372]	; (8004d74 <main+0x1c8>)
 8004bfe:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8004c02:	461d      	mov	r5, r3
 8004c04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004c06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004c08:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004c0c:	c403      	stmia	r4!, {r0, r1}
 8004c0e:	8022      	strh	r2, [r4, #0]
			  uart_write_debug(Test, 10);
 8004c10:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004c14:	210a      	movs	r1, #10
 8004c16:	4618      	mov	r0, r3
 8004c18:	f001 fd58 	bl	80066cc <uart_write_debug>
		  }
		  if (gyro_init() != HAL_OK){
 8004c1c:	f7ff fdd8 	bl	80047d0 <gyro_init>
 8004c20:	4603      	mov	r3, r0
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d012      	beq.n	8004c4c <main+0xa0>
			  uint8_t Test[] = "Failed to init LSM6 gyro\r\n";
 8004c26:	4b54      	ldr	r3, [pc, #336]	; (8004d78 <main+0x1cc>)
 8004c28:	f107 041c 	add.w	r4, r7, #28
 8004c2c:	461d      	mov	r5, r3
 8004c2e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004c30:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004c32:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004c36:	c403      	stmia	r4!, {r0, r1}
 8004c38:	8022      	strh	r2, [r4, #0]
 8004c3a:	3402      	adds	r4, #2
 8004c3c:	0c13      	lsrs	r3, r2, #16
 8004c3e:	7023      	strb	r3, [r4, #0]
			  uart_write_debug(Test, 10);
 8004c40:	f107 031c 	add.w	r3, r7, #28
 8004c44:	210a      	movs	r1, #10
 8004c46:	4618      	mov	r0, r3
 8004c48:	f001 fd40 	bl	80066cc <uart_write_debug>
		  }
		  if (magn_init() != HAL_OK){
 8004c4c:	f7ff fe0c 	bl	8004868 <magn_init>
 8004c50:	4603      	mov	r3, r0
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d010      	beq.n	8004c78 <main+0xcc>
			  uint8_t Test[] = "Failed to init LIS3 magn\r\n";
 8004c56:	4b49      	ldr	r3, [pc, #292]	; (8004d7c <main+0x1d0>)
 8004c58:	463c      	mov	r4, r7
 8004c5a:	461d      	mov	r5, r3
 8004c5c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004c5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004c60:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004c64:	c403      	stmia	r4!, {r0, r1}
 8004c66:	8022      	strh	r2, [r4, #0]
 8004c68:	3402      	adds	r4, #2
 8004c6a:	0c13      	lsrs	r3, r2, #16
 8004c6c:	7023      	strb	r3, [r4, #0]
			  uart_write_debug(Test, 10);
 8004c6e:	463b      	mov	r3, r7
 8004c70:	210a      	movs	r1, #10
 8004c72:	4618      	mov	r0, r3
 8004c74:	f001 fd2a 	bl	80066cc <uart_write_debug>
		  }
  }
  if (ublox_i2c_bus_init() != HAL_OK){
 8004c78:	f7fe ffbc 	bl	8003bf4 <ublox_i2c_bus_init>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d004      	beq.n	8004c8c <main+0xe0>
	  uart_write_debug("Failed to Initialize ublox bus\r\n", 10);
 8004c82:	210a      	movs	r1, #10
 8004c84:	483e      	ldr	r0, [pc, #248]	; (8004d80 <main+0x1d4>)
 8004c86:	f001 fd21 	bl	80066cc <uart_write_debug>
 8004c8a:	e011      	b.n	8004cb0 <main+0x104>
  }
  else{
	  HAL_StatusTypeDef res;
	  res = ubloxInit();
 8004c8c:	f7ff f872 	bl	8003d74 <ubloxInit>
 8004c90:	4603      	mov	r3, r0
 8004c92:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	  if (res != HAL_OK){
 8004c96:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d004      	beq.n	8004ca8 <main+0xfc>
		  uart_write_debug("Failed to Initialize UBLOX\r\n", 10);
 8004c9e:	210a      	movs	r1, #10
 8004ca0:	4838      	ldr	r0, [pc, #224]	; (8004d84 <main+0x1d8>)
 8004ca2:	f001 fd13 	bl	80066cc <uart_write_debug>
 8004ca6:	e003      	b.n	8004cb0 <main+0x104>
	  }
	  else{
		  uart_write_debug("Ublox Initialized!\r\n", 10);
 8004ca8:	210a      	movs	r1, #10
 8004caa:	4837      	ldr	r0, [pc, #220]	; (8004d88 <main+0x1dc>)
 8004cac:	f001 fd0e 	bl	80066cc <uart_write_debug>
	  }
  }

  /* Init scheduler */
  osKernelInitialize();
 8004cb0:	f007 fa04 	bl	800c0bc <osKernelInitialize>
  /* USER CODE BEGIN RTOS_MUTEX */
  debugUartMutex = osMutexNew(&uartMutex_attributes);
 8004cb4:	4835      	ldr	r0, [pc, #212]	; (8004d8c <main+0x1e0>)
 8004cb6:	f007 fbe1 	bl	800c47c <osMutexNew>
 8004cba:	4603      	mov	r3, r0
 8004cbc:	4a34      	ldr	r2, [pc, #208]	; (8004d90 <main+0x1e4>)
 8004cbe:	6013      	str	r3, [r2, #0]
  i2cMutex = osMutexNew(&i2cMutex_attributes);
 8004cc0:	4834      	ldr	r0, [pc, #208]	; (8004d94 <main+0x1e8>)
 8004cc2:	f007 fbdb 	bl	800c47c <osMutexNew>
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	4a33      	ldr	r2, [pc, #204]	; (8004d98 <main+0x1ec>)
 8004cca:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_MUTEX */
  memsQueueHandle = osMessageQueueNew (8, sizeof(mems_data_t), &memsQueue_attributes);
 8004ccc:	4a33      	ldr	r2, [pc, #204]	; (8004d9c <main+0x1f0>)
 8004cce:	2128      	movs	r1, #40	; 0x28
 8004cd0:	2008      	movs	r0, #8
 8004cd2:	f007 fce1 	bl	800c698 <osMessageQueueNew>
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	4a31      	ldr	r2, [pc, #196]	; (8004da0 <main+0x1f4>)
 8004cda:	6013      	str	r3, [r2, #0]
  outputQueueHandle = osMessageQueueNew (4, sizeof(FusionEuler), &outputQueue_attributes);
 8004cdc:	4a31      	ldr	r2, [pc, #196]	; (8004da4 <main+0x1f8>)
 8004cde:	210c      	movs	r1, #12
 8004ce0:	2004      	movs	r0, #4
 8004ce2:	f007 fcd9 	bl	800c698 <osMessageQueueNew>
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	4a2f      	ldr	r2, [pc, #188]	; (8004da8 <main+0x1fc>)
 8004cea:	6013      	str	r3, [r2, #0]
  messageQueueHandle = osMessageQueueNew (8, RB_SIZE, &messageQueue_attributes);
 8004cec:	4a2f      	ldr	r2, [pc, #188]	; (8004dac <main+0x200>)
 8004cee:	2128      	movs	r1, #40	; 0x28
 8004cf0:	2008      	movs	r0, #8
 8004cf2:	f007 fcd1 	bl	800c698 <osMessageQueueNew>
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	4a2d      	ldr	r2, [pc, #180]	; (8004db0 <main+0x204>)
 8004cfa:	6013      	str	r3, [r2, #0]
  /* EVENT FLAG FOR ACK RECEIVE */
  ack_rcvd = osEventFlagsNew(NULL);
 8004cfc:	2000      	movs	r0, #0
 8004cfe:	f007 fad4 	bl	800c2aa <osEventFlagsNew>
 8004d02:	4603      	mov	r3, r0
 8004d04:	4a2b      	ldr	r2, [pc, #172]	; (8004db4 <main+0x208>)
 8004d06:	6013      	str	r3, [r2, #0]
  //							//

  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8004d08:	4a2b      	ldr	r2, [pc, #172]	; (8004db8 <main+0x20c>)
 8004d0a:	2100      	movs	r1, #0
 8004d0c:	482b      	ldr	r0, [pc, #172]	; (8004dbc <main+0x210>)
 8004d0e:	f007 fa1f 	bl	800c150 <osThreadNew>
 8004d12:	4603      	mov	r3, r0
 8004d14:	4a2a      	ldr	r2, [pc, #168]	; (8004dc0 <main+0x214>)
 8004d16:	6013      	str	r3, [r2, #0]

  readMemsTaskHandle = osThreadNew(readMemsTask, NULL, &readMemsTask_attributes);
 8004d18:	4a2a      	ldr	r2, [pc, #168]	; (8004dc4 <main+0x218>)
 8004d1a:	2100      	movs	r1, #0
 8004d1c:	482a      	ldr	r0, [pc, #168]	; (8004dc8 <main+0x21c>)
 8004d1e:	f007 fa17 	bl	800c150 <osThreadNew>
 8004d22:	4603      	mov	r3, r0
 8004d24:	4a29      	ldr	r2, [pc, #164]	; (8004dcc <main+0x220>)
 8004d26:	6013      	str	r3, [r2, #0]

  calcHeadingTaskHandle = osThreadNew(calcHeadingTask, NULL, &calcHeadingTask_attributes);
 8004d28:	4a29      	ldr	r2, [pc, #164]	; (8004dd0 <main+0x224>)
 8004d2a:	2100      	movs	r1, #0
 8004d2c:	4829      	ldr	r0, [pc, #164]	; (8004dd4 <main+0x228>)
 8004d2e:	f007 fa0f 	bl	800c150 <osThreadNew>
 8004d32:	4603      	mov	r3, r0
 8004d34:	4a28      	ldr	r2, [pc, #160]	; (8004dd8 <main+0x22c>)
 8004d36:	6013      	str	r3, [r2, #0]

  printOutTaskHandle = osThreadNew(printOutTask, NULL, &printOutTask_attributes);
 8004d38:	4a28      	ldr	r2, [pc, #160]	; (8004ddc <main+0x230>)
 8004d3a:	2100      	movs	r1, #0
 8004d3c:	4828      	ldr	r0, [pc, #160]	; (8004de0 <main+0x234>)
 8004d3e:	f007 fa07 	bl	800c150 <osThreadNew>
 8004d42:	4603      	mov	r3, r0
 8004d44:	4a27      	ldr	r2, [pc, #156]	; (8004de4 <main+0x238>)
 8004d46:	6013      	str	r3, [r2, #0]

  getCoorsTaskHandle = osThreadNew(getCoorsTask, NULL, &getCoorsTask_attributes);
 8004d48:	4a27      	ldr	r2, [pc, #156]	; (8004de8 <main+0x23c>)
 8004d4a:	2100      	movs	r1, #0
 8004d4c:	4827      	ldr	r0, [pc, #156]	; (8004dec <main+0x240>)
 8004d4e:	f007 f9ff 	bl	800c150 <osThreadNew>
 8004d52:	4603      	mov	r3, r0
 8004d54:	4a26      	ldr	r2, [pc, #152]	; (8004df0 <main+0x244>)
 8004d56:	6013      	str	r3, [r2, #0]

//  sendMessageTaskHandle = osThreadNew(sendMessageTask, NULL, &sendMessageTaskHandle_attributes);

  readMessageTaskHandle = osThreadNew(readMessageTask, NULL, &readMessageTaskHandle_attributes);
 8004d58:	4a26      	ldr	r2, [pc, #152]	; (8004df4 <main+0x248>)
 8004d5a:	2100      	movs	r1, #0
 8004d5c:	4826      	ldr	r0, [pc, #152]	; (8004df8 <main+0x24c>)
 8004d5e:	f007 f9f7 	bl	800c150 <osThreadNew>
 8004d62:	4603      	mov	r3, r0
 8004d64:	4a25      	ldr	r2, [pc, #148]	; (8004dfc <main+0x250>)
 8004d66:	6013      	str	r3, [r2, #0]

  /* Start scheduler */
  osKernelStart();
 8004d68:	f007 f9cc 	bl	800c104 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8004d6c:	e7fe      	b.n	8004d6c <main+0x1c0>
 8004d6e:	bf00      	nop
 8004d70:	08014538 	.word	0x08014538
 8004d74:	08014554 	.word	0x08014554
 8004d78:	08014570 	.word	0x08014570
 8004d7c:	0801458c 	.word	0x0801458c
 8004d80:	080144dc 	.word	0x080144dc
 8004d84:	08014500 	.word	0x08014500
 8004d88:	08014520 	.word	0x08014520
 8004d8c:	08014774 	.word	0x08014774
 8004d90:	200003d0 	.word	0x200003d0
 8004d94:	08014784 	.word	0x08014784
 8004d98:	200003d4 	.word	0x200003d4
 8004d9c:	08014794 	.word	0x08014794
 8004da0:	200003d8 	.word	0x200003d8
 8004da4:	080147ac 	.word	0x080147ac
 8004da8:	200003dc 	.word	0x200003dc
 8004dac:	080147c4 	.word	0x080147c4
 8004db0:	200003e0 	.word	0x200003e0
 8004db4:	200003e4 	.word	0x200003e4
 8004db8:	0801469c 	.word	0x0801469c
 8004dbc:	08004e01 	.word	0x08004e01
 8004dc0:	200003b8 	.word	0x200003b8
 8004dc4:	08014708 	.word	0x08014708
 8004dc8:	08004e7d 	.word	0x08004e7d
 8004dcc:	200003c0 	.word	0x200003c0
 8004dd0:	080146e4 	.word	0x080146e4
 8004dd4:	08004e29 	.word	0x08004e29
 8004dd8:	200003bc 	.word	0x200003bc
 8004ddc:	080146c0 	.word	0x080146c0
 8004de0:	08004ec9 	.word	0x08004ec9
 8004de4:	200003c4 	.word	0x200003c4
 8004de8:	0801472c 	.word	0x0801472c
 8004dec:	08004f55 	.word	0x08004f55
 8004df0:	200003c8 	.word	0x200003c8
 8004df4:	08014750 	.word	0x08014750
 8004df8:	08004f6d 	.word	0x08004f6d
 8004dfc:	200003cc 	.word	0x200003cc

08004e00 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b082      	sub	sp, #8
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOB,LED2_Pin);
 8004e08:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004e0c:	4805      	ldr	r0, [pc, #20]	; (8004e24 <StartDefaultTask+0x24>)
 8004e0e:	f002 f993 	bl	8007138 <HAL_GPIO_TogglePin>
	uart_receive_it(UART_NYX);
 8004e12:	2001      	movs	r0, #1
 8004e14:	f001 fc32 	bl	800667c <uart_receive_it>
    osDelay(500);
 8004e18:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004e1c:	f007 fa2a 	bl	800c274 <osDelay>
  {
 8004e20:	e7f2      	b.n	8004e08 <StartDefaultTask+0x8>
 8004e22:	bf00      	nop
 8004e24:	48000400 	.word	0x48000400

08004e28 <calcHeadingTask>:
  /* USER CODE END 5 */
}


void calcHeadingTask(void *argument)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b090      	sub	sp, #64	; 0x40
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
	mems_data_t mems_data;
	FusionEuler euler;
	osStatus_t status;
	FusionInit();
 8004e30:	f7fc fb7a 	bl	8001528 <FusionInit>

	for(;;)
	{
		status = osMessageQueueGet(memsQueueHandle, &mems_data, NULL, 5U);   // wait for message
 8004e34:	4b0f      	ldr	r3, [pc, #60]	; (8004e74 <calcHeadingTask+0x4c>)
 8004e36:	6818      	ldr	r0, [r3, #0]
 8004e38:	f107 0114 	add.w	r1, r7, #20
 8004e3c:	2305      	movs	r3, #5
 8004e3e:	2200      	movs	r2, #0
 8004e40:	f007 fcfe 	bl	800c840 <osMessageQueueGet>
 8004e44:	63f8      	str	r0, [r7, #60]	; 0x3c
	    if (status == osOK) {
 8004e46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d10f      	bne.n	8004e6c <calcHeadingTask+0x44>
	    	FusionCalcHeading(&mems_data, &euler);
 8004e4c:	f107 0208 	add.w	r2, r7, #8
 8004e50:	f107 0314 	add.w	r3, r7, #20
 8004e54:	4611      	mov	r1, r2
 8004e56:	4618      	mov	r0, r3
 8004e58:	f7fc fb86 	bl	8001568 <FusionCalcHeading>
	    	osMessageQueuePut(outputQueueHandle, &euler, 0U, 5U);
 8004e5c:	4b06      	ldr	r3, [pc, #24]	; (8004e78 <calcHeadingTask+0x50>)
 8004e5e:	6818      	ldr	r0, [r3, #0]
 8004e60:	f107 0108 	add.w	r1, r7, #8
 8004e64:	2305      	movs	r3, #5
 8004e66:	2200      	movs	r2, #0
 8004e68:	f007 fc8a 	bl	800c780 <osMessageQueuePut>
	    }
		osDelay(30);
 8004e6c:	201e      	movs	r0, #30
 8004e6e:	f007 fa01 	bl	800c274 <osDelay>
		status = osMessageQueueGet(memsQueueHandle, &mems_data, NULL, 5U);   // wait for message
 8004e72:	e7df      	b.n	8004e34 <calcHeadingTask+0xc>
 8004e74:	200003d8 	.word	0x200003d8
 8004e78:	200003dc 	.word	0x200003dc

08004e7c <readMemsTask>:
	}
}

void readMemsTask(void *argument)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b08c      	sub	sp, #48	; 0x30
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
	mems_data_t mems_data;
	for(;;)
	{
		osMutexAcquire(i2cMutex, osWaitForever);
 8004e84:	4b0e      	ldr	r3, [pc, #56]	; (8004ec0 <readMemsTask+0x44>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f04f 31ff 	mov.w	r1, #4294967295
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	f007 fb7b 	bl	800c588 <osMutexAcquire>
		tick_gyro(&mems_data);
 8004e92:	f107 0308 	add.w	r3, r7, #8
 8004e96:	4618      	mov	r0, r3
 8004e98:	f7ff fc48 	bl	800472c <tick_gyro>
		osMutexRelease(i2cMutex);
 8004e9c:	4b08      	ldr	r3, [pc, #32]	; (8004ec0 <readMemsTask+0x44>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	f007 fbbc 	bl	800c61e <osMutexRelease>
		osMessageQueuePut(memsQueueHandle, &mems_data, 0U, 5U);
 8004ea6:	4b07      	ldr	r3, [pc, #28]	; (8004ec4 <readMemsTask+0x48>)
 8004ea8:	6818      	ldr	r0, [r3, #0]
 8004eaa:	f107 0108 	add.w	r1, r7, #8
 8004eae:	2305      	movs	r3, #5
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	f007 fc65 	bl	800c780 <osMessageQueuePut>
		osDelay(10);
 8004eb6:	200a      	movs	r0, #10
 8004eb8:	f007 f9dc 	bl	800c274 <osDelay>
		osMutexAcquire(i2cMutex, osWaitForever);
 8004ebc:	e7e2      	b.n	8004e84 <readMemsTask+0x8>
 8004ebe:	bf00      	nop
 8004ec0:	200003d4 	.word	0x200003d4
 8004ec4:	200003d8 	.word	0x200003d8

08004ec8 <printOutTask>:
	}
}


void printOutTask(void *argument)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b094      	sub	sp, #80	; 0x50
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
	mems_data_t mems_data;
	FusionEuler euler;
	uint8_t text[10] = "";
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	60fb      	str	r3, [r7, #12]
 8004ed4:	f107 0310 	add.w	r3, r7, #16
 8004ed8:	2200      	movs	r2, #0
 8004eda:	601a      	str	r2, [r3, #0]
 8004edc:	809a      	strh	r2, [r3, #4]
	osStatus_t status;

	for(;;)
	{
		status = osMessageQueueGet(outputQueueHandle, &euler, NULL, 5U);   // wait for message
 8004ede:	4b1a      	ldr	r3, [pc, #104]	; (8004f48 <printOutTask+0x80>)
 8004ee0:	6818      	ldr	r0, [r3, #0]
 8004ee2:	f107 0118 	add.w	r1, r7, #24
 8004ee6:	2305      	movs	r3, #5
 8004ee8:	2200      	movs	r2, #0
 8004eea:	f007 fca9 	bl	800c840 <osMessageQueueGet>
 8004eee:	64f8      	str	r0, [r7, #76]	; 0x4c
		if (status == osOK) {
 8004ef0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d123      	bne.n	8004f3e <printOutTask+0x76>
			sprintf(text, "\n%f\r", euler.angle.yaw);
 8004ef6:	6a3b      	ldr	r3, [r7, #32]
 8004ef8:	4618      	mov	r0, r3
 8004efa:	f7fb fb3d 	bl	8000578 <__aeabi_f2d>
 8004efe:	4602      	mov	r2, r0
 8004f00:	460b      	mov	r3, r1
 8004f02:	f107 000c 	add.w	r0, r7, #12
 8004f06:	4911      	ldr	r1, [pc, #68]	; (8004f4c <printOutTask+0x84>)
 8004f08:	f00b fc62 	bl	80107d0 <siprintf>
			osMutexAcquire(debugUartMutex, osWaitForever);
 8004f0c:	4b10      	ldr	r3, [pc, #64]	; (8004f50 <printOutTask+0x88>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f04f 31ff 	mov.w	r1, #4294967295
 8004f14:	4618      	mov	r0, r3
 8004f16:	f007 fb37 	bl	800c588 <osMutexAcquire>
			uart_write_debug(text,50);
 8004f1a:	f107 030c 	add.w	r3, r7, #12
 8004f1e:	2132      	movs	r1, #50	; 0x32
 8004f20:	4618      	mov	r0, r3
 8004f22:	f001 fbd3 	bl	80066cc <uart_write_debug>
			osMutexRelease(debugUartMutex);
 8004f26:	4b0a      	ldr	r3, [pc, #40]	; (8004f50 <printOutTask+0x88>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	f007 fb77 	bl	800c61e <osMutexRelease>
			memset(text,0,sizeof(text));
 8004f30:	f107 030c 	add.w	r3, r7, #12
 8004f34:	220a      	movs	r2, #10
 8004f36:	2100      	movs	r1, #0
 8004f38:	4618      	mov	r0, r3
 8004f3a:	f00a ffd7 	bl	800feec <memset>
		}
		osDelay(100);
 8004f3e:	2064      	movs	r0, #100	; 0x64
 8004f40:	f007 f998 	bl	800c274 <osDelay>
		status = osMessageQueueGet(outputQueueHandle, &euler, NULL, 5U);   // wait for message
 8004f44:	e7cb      	b.n	8004ede <printOutTask+0x16>
 8004f46:	bf00      	nop
 8004f48:	200003dc 	.word	0x200003dc
 8004f4c:	080145a8 	.word	0x080145a8
 8004f50:	200003d0 	.word	0x200003d0

08004f54 <getCoorsTask>:
	}
}


void getCoorsTask(void *argument){
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b082      	sub	sp, #8
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]

	for(;;)
	{
//		osMutexAcquire(i2cMutex, osWaitForever);
//		osMutexAcquire(debugUartMutex, osWaitForever);
		ublox_tick();
 8004f5c:	f7fe fe8a 	bl	8003c74 <ublox_tick>
//		osMutexRelease(i2cMutex);
//		osMutexRelease(debugUartMutex);
		osDelay(1700);
 8004f60:	f240 60a4 	movw	r0, #1700	; 0x6a4
 8004f64:	f007 f986 	bl	800c274 <osDelay>
		ublox_tick();
 8004f68:	e7f8      	b.n	8004f5c <getCoorsTask+0x8>
	...

08004f6c <readMessageTask>:
	}
}

void readMessageTask(void *argument){
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b08e      	sub	sp, #56	; 0x38
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
	osStatus_t status;
	uint32_t ack_flag;
	uint8_t message_buffer[RB_SIZE] = {0};
 8004f74:	2300      	movs	r3, #0
 8004f76:	60bb      	str	r3, [r7, #8]
 8004f78:	f107 030c 	add.w	r3, r7, #12
 8004f7c:	2224      	movs	r2, #36	; 0x24
 8004f7e:	2100      	movs	r1, #0
 8004f80:	4618      	mov	r0, r3
 8004f82:	f00a ffb3 	bl	800feec <memset>
	for(;;){
		status = osMessageQueueGet(messageQueueHandle, message_buffer, NULL, osWaitForever);   // wait for message
 8004f86:	4b13      	ldr	r3, [pc, #76]	; (8004fd4 <readMessageTask+0x68>)
 8004f88:	6818      	ldr	r0, [r3, #0]
 8004f8a:	f107 0108 	add.w	r1, r7, #8
 8004f8e:	f04f 33ff 	mov.w	r3, #4294967295
 8004f92:	2200      	movs	r2, #0
 8004f94:	f007 fc54 	bl	800c840 <osMessageQueueGet>
 8004f98:	6378      	str	r0, [r7, #52]	; 0x34
		if (status == osOK) {
 8004f9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d114      	bne.n	8004fca <readMessageTask+0x5e>
			tick_Handler(message_buffer);
 8004fa0:	f107 0308 	add.w	r3, r7, #8
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	f000 fa37 	bl	8005418 <tick_Handler>
			ack_flag = osEventFlagsWait(ack_rcvd, ACK_FLAG, osFlagsWaitAny, 150);
 8004faa:	4b0b      	ldr	r3, [pc, #44]	; (8004fd8 <readMessageTask+0x6c>)
 8004fac:	6818      	ldr	r0, [r3, #0]
 8004fae:	2396      	movs	r3, #150	; 0x96
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	2101      	movs	r1, #1
 8004fb4:	f007 f9fc 	bl	800c3b0 <osEventFlagsWait>
 8004fb8:	6338      	str	r0, [r7, #48]	; 0x30
			if (ack_flag != 1){
 8004fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fbc:	2b01      	cmp	r3, #1
 8004fbe:	d004      	beq.n	8004fca <readMessageTask+0x5e>
				tick_Handler(message_buffer);
 8004fc0:	f107 0308 	add.w	r3, r7, #8
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	f000 fa27 	bl	8005418 <tick_Handler>
			}
		}
		osDelay(200);
 8004fca:	20c8      	movs	r0, #200	; 0xc8
 8004fcc:	f007 f952 	bl	800c274 <osDelay>
		status = osMessageQueueGet(messageQueueHandle, message_buffer, NULL, osWaitForever);   // wait for message
 8004fd0:	e7d9      	b.n	8004f86 <readMessageTask+0x1a>
 8004fd2:	bf00      	nop
 8004fd4:	200003e0 	.word	0x200003e0
 8004fd8:	200003e4 	.word	0x200003e4

08004fdc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b096      	sub	sp, #88	; 0x58
 8004fe0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004fe2:	f107 0314 	add.w	r3, r7, #20
 8004fe6:	2244      	movs	r2, #68	; 0x44
 8004fe8:	2100      	movs	r1, #0
 8004fea:	4618      	mov	r0, r3
 8004fec:	f00a ff7e 	bl	800feec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004ff0:	463b      	mov	r3, r7
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	601a      	str	r2, [r3, #0]
 8004ff6:	605a      	str	r2, [r3, #4]
 8004ff8:	609a      	str	r2, [r3, #8]
 8004ffa:	60da      	str	r2, [r3, #12]
 8004ffc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8004ffe:	2000      	movs	r0, #0
 8005000:	f003 f800 	bl	8008004 <HAL_PWREx_ControlVoltageScaling>
 8005004:	4603      	mov	r3, r0
 8005006:	2b00      	cmp	r3, #0
 8005008:	d001      	beq.n	800500e <SystemClock_Config+0x32>
  {
    Error_Handler();
 800500a:	f000 f9f5 	bl	80053f8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800500e:	2310      	movs	r3, #16
 8005010:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8005012:	2301      	movs	r3, #1
 8005014:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8005016:	2300      	movs	r3, #0
 8005018:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800501a:	2360      	movs	r3, #96	; 0x60
 800501c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800501e:	2302      	movs	r3, #2
 8005020:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8005022:	2301      	movs	r3, #1
 8005024:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8005026:	2301      	movs	r3, #1
 8005028:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 800502a:	233c      	movs	r3, #60	; 0x3c
 800502c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800502e:	2302      	movs	r3, #2
 8005030:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8005032:	2302      	movs	r3, #2
 8005034:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8005036:	2302      	movs	r3, #2
 8005038:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800503a:	f107 0314 	add.w	r3, r7, #20
 800503e:	4618      	mov	r0, r3
 8005040:	f003 f884 	bl	800814c <HAL_RCC_OscConfig>
 8005044:	4603      	mov	r3, r0
 8005046:	2b00      	cmp	r3, #0
 8005048:	d001      	beq.n	800504e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800504a:	f000 f9d5 	bl	80053f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800504e:	230f      	movs	r3, #15
 8005050:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005052:	2303      	movs	r3, #3
 8005054:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005056:	2300      	movs	r3, #0
 8005058:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800505a:	2300      	movs	r3, #0
 800505c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800505e:	2300      	movs	r3, #0
 8005060:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8005062:	463b      	mov	r3, r7
 8005064:	2105      	movs	r1, #5
 8005066:	4618      	mov	r0, r3
 8005068:	f003 fc8a 	bl	8008980 <HAL_RCC_ClockConfig>
 800506c:	4603      	mov	r3, r0
 800506e:	2b00      	cmp	r3, #0
 8005070:	d001      	beq.n	8005076 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8005072:	f000 f9c1 	bl	80053f8 <Error_Handler>
  }
}
 8005076:	bf00      	nop
 8005078:	3758      	adds	r7, #88	; 0x58
 800507a:	46bd      	mov	sp, r7
 800507c:	bd80      	pop	{r7, pc}
	...

08005080 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b08a      	sub	sp, #40	; 0x28
 8005084:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005086:	f107 0314 	add.w	r3, r7, #20
 800508a:	2200      	movs	r2, #0
 800508c:	601a      	str	r2, [r3, #0]
 800508e:	605a      	str	r2, [r3, #4]
 8005090:	609a      	str	r2, [r3, #8]
 8005092:	60da      	str	r2, [r3, #12]
 8005094:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8005096:	4bbb      	ldr	r3, [pc, #748]	; (8005384 <MX_GPIO_Init+0x304>)
 8005098:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800509a:	4aba      	ldr	r2, [pc, #744]	; (8005384 <MX_GPIO_Init+0x304>)
 800509c:	f043 0310 	orr.w	r3, r3, #16
 80050a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80050a2:	4bb8      	ldr	r3, [pc, #736]	; (8005384 <MX_GPIO_Init+0x304>)
 80050a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050a6:	f003 0310 	and.w	r3, r3, #16
 80050aa:	613b      	str	r3, [r7, #16]
 80050ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80050ae:	4bb5      	ldr	r3, [pc, #724]	; (8005384 <MX_GPIO_Init+0x304>)
 80050b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050b2:	4ab4      	ldr	r2, [pc, #720]	; (8005384 <MX_GPIO_Init+0x304>)
 80050b4:	f043 0304 	orr.w	r3, r3, #4
 80050b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80050ba:	4bb2      	ldr	r3, [pc, #712]	; (8005384 <MX_GPIO_Init+0x304>)
 80050bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050be:	f003 0304 	and.w	r3, r3, #4
 80050c2:	60fb      	str	r3, [r7, #12]
 80050c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80050c6:	4baf      	ldr	r3, [pc, #700]	; (8005384 <MX_GPIO_Init+0x304>)
 80050c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050ca:	4aae      	ldr	r2, [pc, #696]	; (8005384 <MX_GPIO_Init+0x304>)
 80050cc:	f043 0301 	orr.w	r3, r3, #1
 80050d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80050d2:	4bac      	ldr	r3, [pc, #688]	; (8005384 <MX_GPIO_Init+0x304>)
 80050d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050d6:	f003 0301 	and.w	r3, r3, #1
 80050da:	60bb      	str	r3, [r7, #8]
 80050dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80050de:	4ba9      	ldr	r3, [pc, #676]	; (8005384 <MX_GPIO_Init+0x304>)
 80050e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050e2:	4aa8      	ldr	r2, [pc, #672]	; (8005384 <MX_GPIO_Init+0x304>)
 80050e4:	f043 0302 	orr.w	r3, r3, #2
 80050e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80050ea:	4ba6      	ldr	r3, [pc, #664]	; (8005384 <MX_GPIO_Init+0x304>)
 80050ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050ee:	f003 0302 	and.w	r3, r3, #2
 80050f2:	607b      	str	r3, [r7, #4]
 80050f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80050f6:	4ba3      	ldr	r3, [pc, #652]	; (8005384 <MX_GPIO_Init+0x304>)
 80050f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050fa:	4aa2      	ldr	r2, [pc, #648]	; (8005384 <MX_GPIO_Init+0x304>)
 80050fc:	f043 0308 	orr.w	r3, r3, #8
 8005100:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005102:	4ba0      	ldr	r3, [pc, #640]	; (8005384 <MX_GPIO_Init+0x304>)
 8005104:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005106:	f003 0308 	and.w	r3, r3, #8
 800510a:	603b      	str	r3, [r7, #0]
 800510c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ST25DV04K_RF_DISABLE_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin, GPIO_PIN_RESET);
 800510e:	2200      	movs	r2, #0
 8005110:	f240 1105 	movw	r1, #261	; 0x105
 8005114:	489c      	ldr	r0, [pc, #624]	; (8005388 <MX_GPIO_Init+0x308>)
 8005116:	f001 fff7 	bl	8007108 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|ARD_D4_Pin|ARD_D7_Pin|SPBTLE_RF_RST_Pin
 800511a:	2200      	movs	r2, #0
 800511c:	f248 111c 	movw	r1, #33052	; 0x811c
 8005120:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005124:	f001 fff0 	bl	8007108 <HAL_GPIO_WritePin>
                          |ARD_D9_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8005128:	2200      	movs	r2, #0
 800512a:	f24f 0134 	movw	r1, #61492	; 0xf034
 800512e:	4897      	ldr	r0, [pc, #604]	; (800538c <MX_GPIO_Init+0x30c>)
 8005130:	f001 ffea 	bl	8007108 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|PMOD_SPI2_SCK_Pin|STSAFE_A110_RESET_Pin, GPIO_PIN_RESET);
 8005134:	2200      	movs	r2, #0
 8005136:	f242 0183 	movw	r1, #8323	; 0x2083
 800513a:	4895      	ldr	r0, [pc, #596]	; (8005390 <MX_GPIO_Init+0x310>)
 800513c:	f001 ffe4 	bl	8007108 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8005140:	2200      	movs	r2, #0
 8005142:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005146:	4893      	ldr	r0, [pc, #588]	; (8005394 <MX_GPIO_Init+0x314>)
 8005148:	f001 ffde 	bl	8007108 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ST25DV04K_RF_DISABLE_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ST25DV04K_RF_DISABLE_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 800514c:	f240 1305 	movw	r3, #261	; 0x105
 8005150:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005152:	2301      	movs	r3, #1
 8005154:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005156:	2300      	movs	r3, #0
 8005158:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800515a:	2300      	movs	r3, #0
 800515c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800515e:	f107 0314 	add.w	r3, r7, #20
 8005162:	4619      	mov	r1, r3
 8005164:	4888      	ldr	r0, [pc, #544]	; (8005388 <MX_GPIO_Init+0x308>)
 8005166:	f001 fe3d 	bl	8006de4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin ST25DV04K_GPO_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin
                           ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|ST25DV04K_GPO_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin
 800516a:	237a      	movs	r3, #122	; 0x7a
 800516c:	617b      	str	r3, [r7, #20]
                          |ISM43362_DRDY_EXTI1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800516e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8005172:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005174:	2300      	movs	r3, #0
 8005176:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005178:	f107 0314 	add.w	r3, r7, #20
 800517c:	4619      	mov	r1, r3
 800517e:	4882      	ldr	r0, [pc, #520]	; (8005388 <MX_GPIO_Init+0x308>)
 8005180:	f001 fe30 	bl	8006de4 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_EXTI13_Pin VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin|VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8005184:	f44f 5306 	mov.w	r3, #8576	; 0x2180
 8005188:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800518a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800518e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005190:	2300      	movs	r3, #0
 8005192:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005194:	f107 0314 	add.w	r3, r7, #20
 8005198:	4619      	mov	r1, r3
 800519a:	487e      	ldr	r0, [pc, #504]	; (8005394 <MX_GPIO_Init+0x314>)
 800519c:	f001 fe22 	bl	8006de4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 80051a0:	233f      	movs	r3, #63	; 0x3f
 80051a2:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80051a4:	230b      	movs	r3, #11
 80051a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051a8:	2300      	movs	r3, #0
 80051aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80051ac:	f107 0314 	add.w	r3, r7, #20
 80051b0:	4619      	mov	r1, r3
 80051b2:	4878      	ldr	r0, [pc, #480]	; (8005394 <MX_GPIO_Init+0x314>)
 80051b4:	f001 fe16 	bl	8006de4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 80051b8:	2303      	movs	r3, #3
 80051ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051bc:	2302      	movs	r3, #2
 80051be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051c0:	2300      	movs	r3, #0
 80051c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80051c4:	2303      	movs	r3, #3
 80051c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80051c8:	2308      	movs	r3, #8
 80051ca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80051cc:	f107 0314 	add.w	r3, r7, #20
 80051d0:	4619      	mov	r1, r3
 80051d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80051d6:	f001 fe05 	bl	8006de4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin ARD_D4_Pin ARD_D7_Pin SPBTLE_RF_RST_Pin
                           ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|ARD_D4_Pin|ARD_D7_Pin|SPBTLE_RF_RST_Pin
 80051da:	f248 131c 	movw	r3, #33052	; 0x811c
 80051de:	617b      	str	r3, [r7, #20]
                          |ARD_D9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80051e0:	2301      	movs	r3, #1
 80051e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051e4:	2300      	movs	r3, #0
 80051e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80051e8:	2300      	movs	r3, #0
 80051ea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80051ec:	f107 0314 	add.w	r3, r7, #20
 80051f0:	4619      	mov	r1, r3
 80051f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80051f6:	f001 fdf5 	bl	8006de4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 80051fa:	23e0      	movs	r3, #224	; 0xe0
 80051fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051fe:	2302      	movs	r3, #2
 8005200:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005202:	2300      	movs	r3, #0
 8005204:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005206:	2303      	movs	r3, #3
 8005208:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800520a:	2305      	movs	r3, #5
 800520c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800520e:	f107 0314 	add.w	r3, r7, #20
 8005212:	4619      	mov	r1, r3
 8005214:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005218:	f001 fde4 	bl	8006de4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 800521c:	2301      	movs	r3, #1
 800521e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005220:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8005224:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005226:	2300      	movs	r3, #0
 8005228:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 800522a:	f107 0314 	add.w	r3, r7, #20
 800522e:	4619      	mov	r1, r3
 8005230:	4856      	ldr	r0, [pc, #344]	; (800538c <MX_GPIO_Init+0x30c>)
 8005232:	f001 fdd7 	bl	8006de4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8005236:	2302      	movs	r3, #2
 8005238:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800523a:	2302      	movs	r3, #2
 800523c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800523e:	2300      	movs	r3, #0
 8005240:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005242:	2300      	movs	r3, #0
 8005244:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005246:	2302      	movs	r3, #2
 8005248:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 800524a:	f107 0314 	add.w	r3, r7, #20
 800524e:	4619      	mov	r1, r3
 8005250:	484e      	ldr	r0, [pc, #312]	; (800538c <MX_GPIO_Init+0x30c>)
 8005252:	f001 fdc7 	bl	8006de4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8005256:	f24f 0334 	movw	r3, #61492	; 0xf034
 800525a:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800525c:	2301      	movs	r3, #1
 800525e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005260:	2300      	movs	r3, #0
 8005262:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005264:	2300      	movs	r3, #0
 8005266:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005268:	f107 0314 	add.w	r3, r7, #20
 800526c:	4619      	mov	r1, r3
 800526e:	4847      	ldr	r0, [pc, #284]	; (800538c <MX_GPIO_Init+0x30c>)
 8005270:	f001 fdb8 	bl	8006de4 <HAL_GPIO_Init>

  /*Configure GPIO pins : DFSDM1_DATIN2_Pin DFSDM1_CKOUT_Pin */
  GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8005274:	f44f 7320 	mov.w	r3, #640	; 0x280
 8005278:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800527a:	2302      	movs	r3, #2
 800527c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800527e:	2300      	movs	r3, #0
 8005280:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005282:	2300      	movs	r3, #0
 8005284:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8005286:	2306      	movs	r3, #6
 8005288:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800528a:	f107 0314 	add.w	r3, r7, #20
 800528e:	4619      	mov	r1, r3
 8005290:	483d      	ldr	r0, [pc, #244]	; (8005388 <MX_GPIO_Init+0x308>)
 8005292:	f001 fda7 	bl	8006de4 <HAL_GPIO_Init>

  /*Configure GPIO pins : QUADSPI_CLK_Pin QUADSPI_NCS_Pin OQUADSPI_BK1_IO0_Pin QUADSPI_BK1_IO1_Pin
                           QUAD_SPI_BK1_IO2_Pin QUAD_SPI_BK1_IO3_Pin */
  GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8005296:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 800529a:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800529c:	2302      	movs	r3, #2
 800529e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052a0:	2300      	movs	r3, #0
 80052a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80052a4:	2303      	movs	r3, #3
 80052a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 80052a8:	230a      	movs	r3, #10
 80052aa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80052ac:	f107 0314 	add.w	r3, r7, #20
 80052b0:	4619      	mov	r1, r3
 80052b2:	4835      	ldr	r0, [pc, #212]	; (8005388 <MX_GPIO_Init+0x308>)
 80052b4:	f001 fd96 	bl	8006de4 <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_UART3_TX_Pin INTERNAL_UART3_RX_Pin */
  GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 80052b8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80052bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052be:	2302      	movs	r3, #2
 80052c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052c2:	2300      	movs	r3, #0
 80052c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80052c6:	2303      	movs	r3, #3
 80052c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80052ca:	2307      	movs	r3, #7
 80052cc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80052ce:	f107 0314 	add.w	r3, r7, #20
 80052d2:	4619      	mov	r1, r3
 80052d4:	482e      	ldr	r0, [pc, #184]	; (8005390 <MX_GPIO_Init+0x310>)
 80052d6:	f001 fd85 	bl	8006de4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI10_Pin LSM6DSL_INT1_EXTI11_Pin USB_OTG_FS_PWR_EN_Pin ARD_D2_Pin
                           HTS221_DRDY_EXTI15_Pin PMOD_IRQ_EXTI2_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI10_Pin|LSM6DSL_INT1_EXTI11_Pin|USB_OTG_FS_PWR_EN_Pin|ARD_D2_Pin
 80052da:	f64d 4304 	movw	r3, #56324	; 0xdc04
 80052de:	617b      	str	r3, [r7, #20]
                          |HTS221_DRDY_EXTI15_Pin|PMOD_IRQ_EXTI2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80052e0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80052e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052e6:	2300      	movs	r3, #0
 80052e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80052ea:	f107 0314 	add.w	r3, r7, #20
 80052ee:	4619      	mov	r1, r3
 80052f0:	4827      	ldr	r0, [pc, #156]	; (8005390 <MX_GPIO_Init+0x310>)
 80052f2:	f001 fd77 	bl	8006de4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin PMOD_SPI2_SCK_Pin STSAFE_A110_RESET_Pin */
  GPIO_InitStruct.Pin = SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|PMOD_SPI2_SCK_Pin|STSAFE_A110_RESET_Pin;
 80052f6:	f242 0383 	movw	r3, #8323	; 0x2083
 80052fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80052fc:	2301      	movs	r3, #1
 80052fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005300:	2300      	movs	r3, #0
 8005302:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005304:	2300      	movs	r3, #0
 8005306:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005308:	f107 0314 	add.w	r3, r7, #20
 800530c:	4619      	mov	r1, r3
 800530e:	4820      	ldr	r0, [pc, #128]	; (8005390 <MX_GPIO_Init+0x310>)
 8005310:	f001 fd68 	bl	8006de4 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8005314:	f44f 7310 	mov.w	r3, #576	; 0x240
 8005318:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800531a:	2301      	movs	r3, #1
 800531c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800531e:	2300      	movs	r3, #0
 8005320:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005322:	2300      	movs	r3, #0
 8005324:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005326:	f107 0314 	add.w	r3, r7, #20
 800532a:	4619      	mov	r1, r3
 800532c:	4819      	ldr	r0, [pc, #100]	; (8005394 <MX_GPIO_Init+0x314>)
 800532e:	f001 fd59 	bl	8006de4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8005332:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005336:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005338:	2300      	movs	r3, #0
 800533a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800533c:	2300      	movs	r3, #0
 800533e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8005340:	f107 0314 	add.w	r3, r7, #20
 8005344:	4619      	mov	r1, r3
 8005346:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800534a:	f001 fd4b 	bl	8006de4 <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_SPI3_SCK_Pin INTERNAL_SPI3_MISO_Pin INTERNAL_SPI3_MOSI_Pin */
  GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 800534e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8005352:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005354:	2302      	movs	r3, #2
 8005356:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005358:	2300      	movs	r3, #0
 800535a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800535c:	2303      	movs	r3, #3
 800535e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8005360:	2306      	movs	r3, #6
 8005362:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005364:	f107 0314 	add.w	r3, r7, #20
 8005368:	4619      	mov	r1, r3
 800536a:	480a      	ldr	r0, [pc, #40]	; (8005394 <MX_GPIO_Init+0x314>)
 800536c:	f001 fd3a 	bl	8006de4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8005370:	2378      	movs	r3, #120	; 0x78
 8005372:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005374:	2302      	movs	r3, #2
 8005376:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005378:	2300      	movs	r3, #0
 800537a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800537c:	2303      	movs	r3, #3
 800537e:	623b      	str	r3, [r7, #32]
 8005380:	e00a      	b.n	8005398 <MX_GPIO_Init+0x318>
 8005382:	bf00      	nop
 8005384:	40021000 	.word	0x40021000
 8005388:	48001000 	.word	0x48001000
 800538c:	48000400 	.word	0x48000400
 8005390:	48000c00 	.word	0x48000c00
 8005394:	48000800 	.word	0x48000800
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005398:	2307      	movs	r3, #7
 800539a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800539c:	f107 0314 	add.w	r3, r7, #20
 80053a0:	4619      	mov	r1, r3
 80053a2:	480b      	ldr	r0, [pc, #44]	; (80053d0 <MX_GPIO_Init+0x350>)
 80053a4:	f001 fd1e 	bl	8006de4 <HAL_GPIO_Init>
//  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
//  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
//  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 80053a8:	2200      	movs	r2, #0
 80053aa:	2105      	movs	r1, #5
 80053ac:	2017      	movs	r0, #23
 80053ae:	f001 fc33 	bl	8006c18 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80053b2:	2017      	movs	r0, #23
 80053b4:	f001 fc4c 	bl	8006c50 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80053b8:	2200      	movs	r2, #0
 80053ba:	2105      	movs	r1, #5
 80053bc:	2028      	movs	r0, #40	; 0x28
 80053be:	f001 fc2b 	bl	8006c18 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80053c2:	2028      	movs	r0, #40	; 0x28
 80053c4:	f001 fc44 	bl	8006c50 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80053c8:	bf00      	nop
 80053ca:	3728      	adds	r7, #40	; 0x28
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bd80      	pop	{r7, pc}
 80053d0:	48000c00 	.word	0x48000c00

080053d4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b082      	sub	sp, #8
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a04      	ldr	r2, [pc, #16]	; (80053f4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d101      	bne.n	80053ea <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80053e6:	f001 fb1b 	bl	8006a20 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80053ea:	bf00      	nop
 80053ec:	3708      	adds	r7, #8
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bd80      	pop	{r7, pc}
 80053f2:	bf00      	nop
 80053f4:	40012c00 	.word	0x40012c00

080053f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80053fc:	b672      	cpsid	i
}
 80053fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOB,LED2_Pin);
 8005400:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005404:	4803      	ldr	r0, [pc, #12]	; (8005414 <Error_Handler+0x1c>)
 8005406:	f001 fe97 	bl	8007138 <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 800540a:	2064      	movs	r0, #100	; 0x64
 800540c:	f001 fb28 	bl	8006a60 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOB,LED2_Pin);
 8005410:	e7f6      	b.n	8005400 <Error_Handler+0x8>
 8005412:	bf00      	nop
 8005414:	48000400 	.word	0x48000400

08005418 <tick_Handler>:
uint8_t flag_connected_toIris = 0;

static uint8_t message_d[25]={0};
static message_t msg;

void tick_Handler(uint8_t *data){
 8005418:	b580      	push	{r7, lr}
 800541a:	b084      	sub	sp, #16
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
	uint8_t mess_len = 0;
 8005420:	2300      	movs	r3, #0
 8005422:	73fb      	strb	r3, [r7, #15]
    init_message_t();
 8005424:	f000 fb98 	bl	8005b58 <init_message_t>

	if (!parseMessage(data, UART_NYX)){
 8005428:	2101      	movs	r1, #1
 800542a:	6878      	ldr	r0, [r7, #4]
 800542c:	f000 fa9a 	bl	8005964 <parseMessage>
 8005430:	4603      	mov	r3, r0
 8005432:	2b00      	cmp	r3, #0
 8005434:	d102      	bne.n	800543c <tick_Handler+0x24>
		handler(UART_NYX);
 8005436:	2001      	movs	r0, #1
 8005438:	f000 fb1e 	bl	8005a78 <handler>
	}
}
 800543c:	bf00      	nop
 800543e:	3710      	adds	r7, #16
 8005440:	46bd      	mov	sp, r7
 8005442:	bd80      	pop	{r7, pc}

08005444 <sendNack>:
uint8_t send_heartbeat(UART_select device){
    uint8_t data[1] = {0};
    return transmitMessage(data, 1, SBP_CMD_HEARTBEAT, device);
}

uint8_t sendNack(UART_select device){
 8005444:	b580      	push	{r7, lr}
 8005446:	b084      	sub	sp, #16
 8005448:	af00      	add	r7, sp, #0
 800544a:	4603      	mov	r3, r0
 800544c:	71fb      	strb	r3, [r7, #7]
    if ((TOKEN == ESC) || (TOKEN == ETX) || (TOKEN == STX)){
 800544e:	4b16      	ldr	r3, [pc, #88]	; (80054a8 <sendNack+0x64>)
 8005450:	781b      	ldrb	r3, [r3, #0]
 8005452:	2b1b      	cmp	r3, #27
 8005454:	d007      	beq.n	8005466 <sendNack+0x22>
 8005456:	4b14      	ldr	r3, [pc, #80]	; (80054a8 <sendNack+0x64>)
 8005458:	781b      	ldrb	r3, [r3, #0]
 800545a:	2b03      	cmp	r3, #3
 800545c:	d003      	beq.n	8005466 <sendNack+0x22>
 800545e:	4b12      	ldr	r3, [pc, #72]	; (80054a8 <sendNack+0x64>)
 8005460:	781b      	ldrb	r3, [r3, #0]
 8005462:	2b02      	cmp	r3, #2
 8005464:	d10f      	bne.n	8005486 <sendNack+0x42>
        uint8_t msg[3] = {NACK,ESC,TOKEN};
 8005466:	2315      	movs	r3, #21
 8005468:	733b      	strb	r3, [r7, #12]
 800546a:	231b      	movs	r3, #27
 800546c:	737b      	strb	r3, [r7, #13]
 800546e:	4b0e      	ldr	r3, [pc, #56]	; (80054a8 <sendNack+0x64>)
 8005470:	781b      	ldrb	r3, [r3, #0]
 8005472:	73bb      	strb	r3, [r7, #14]
        return uart_write(msg, 3, device, 5);
 8005474:	79fa      	ldrb	r2, [r7, #7]
 8005476:	f107 000c 	add.w	r0, r7, #12
 800547a:	2305      	movs	r3, #5
 800547c:	2103      	movs	r1, #3
 800547e:	f001 f93b 	bl	80066f8 <uart_write>
 8005482:	4603      	mov	r3, r0
 8005484:	e00c      	b.n	80054a0 <sendNack+0x5c>
    }
    else{
        uint8_t msg[2] = {NACK,TOKEN};
 8005486:	2315      	movs	r3, #21
 8005488:	723b      	strb	r3, [r7, #8]
 800548a:	4b07      	ldr	r3, [pc, #28]	; (80054a8 <sendNack+0x64>)
 800548c:	781b      	ldrb	r3, [r3, #0]
 800548e:	727b      	strb	r3, [r7, #9]
        return uart_write(msg, 2, device, 5);
 8005490:	79fa      	ldrb	r2, [r7, #7]
 8005492:	f107 0008 	add.w	r0, r7, #8
 8005496:	2305      	movs	r3, #5
 8005498:	2102      	movs	r1, #2
 800549a:	f001 f92d 	bl	80066f8 <uart_write>
 800549e:	4603      	mov	r3, r0
    }
}
 80054a0:	4618      	mov	r0, r3
 80054a2:	3710      	adds	r7, #16
 80054a4:	46bd      	mov	sp, r7
 80054a6:	bd80      	pop	{r7, pc}
 80054a8:	200003e8 	.word	0x200003e8

080054ac <sendAck>:

uint8_t sendAck(UART_select device){
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b084      	sub	sp, #16
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	4603      	mov	r3, r0
 80054b4:	71fb      	strb	r3, [r7, #7]
    if ((TOKEN == ESC) || (TOKEN == ETX) || (TOKEN == STX)){
 80054b6:	4b16      	ldr	r3, [pc, #88]	; (8005510 <sendAck+0x64>)
 80054b8:	781b      	ldrb	r3, [r3, #0]
 80054ba:	2b1b      	cmp	r3, #27
 80054bc:	d007      	beq.n	80054ce <sendAck+0x22>
 80054be:	4b14      	ldr	r3, [pc, #80]	; (8005510 <sendAck+0x64>)
 80054c0:	781b      	ldrb	r3, [r3, #0]
 80054c2:	2b03      	cmp	r3, #3
 80054c4:	d003      	beq.n	80054ce <sendAck+0x22>
 80054c6:	4b12      	ldr	r3, [pc, #72]	; (8005510 <sendAck+0x64>)
 80054c8:	781b      	ldrb	r3, [r3, #0]
 80054ca:	2b02      	cmp	r3, #2
 80054cc:	d10f      	bne.n	80054ee <sendAck+0x42>
        uint8_t msg[3] = {ACK,ESC,TOKEN};
 80054ce:	2306      	movs	r3, #6
 80054d0:	733b      	strb	r3, [r7, #12]
 80054d2:	231b      	movs	r3, #27
 80054d4:	737b      	strb	r3, [r7, #13]
 80054d6:	4b0e      	ldr	r3, [pc, #56]	; (8005510 <sendAck+0x64>)
 80054d8:	781b      	ldrb	r3, [r3, #0]
 80054da:	73bb      	strb	r3, [r7, #14]
        return uart_write(msg, 3, device, 5);
 80054dc:	79fa      	ldrb	r2, [r7, #7]
 80054de:	f107 000c 	add.w	r0, r7, #12
 80054e2:	2305      	movs	r3, #5
 80054e4:	2103      	movs	r1, #3
 80054e6:	f001 f907 	bl	80066f8 <uart_write>
 80054ea:	4603      	mov	r3, r0
 80054ec:	e00c      	b.n	8005508 <sendAck+0x5c>
    }
    else{
        uint8_t msg[2] = {ACK,TOKEN};
 80054ee:	2306      	movs	r3, #6
 80054f0:	723b      	strb	r3, [r7, #8]
 80054f2:	4b07      	ldr	r3, [pc, #28]	; (8005510 <sendAck+0x64>)
 80054f4:	781b      	ldrb	r3, [r3, #0]
 80054f6:	727b      	strb	r3, [r7, #9]
        return uart_write(msg, 2, device, 5);
 80054f8:	79fa      	ldrb	r2, [r7, #7]
 80054fa:	f107 0008 	add.w	r0, r7, #8
 80054fe:	2305      	movs	r3, #5
 8005500:	2102      	movs	r1, #2
 8005502:	f001 f8f9 	bl	80066f8 <uart_write>
 8005506:	4603      	mov	r3, r0
    }
}
 8005508:	4618      	mov	r0, r3
 800550a:	3710      	adds	r7, #16
 800550c:	46bd      	mov	sp, r7
 800550e:	bd80      	pop	{r7, pc}
 8005510:	200003e8 	.word	0x200003e8

08005514 <calcDataSize>:

static uint8_t calcDataSize(uint8_t *data, uint8_t len){
 8005514:	b480      	push	{r7}
 8005516:	b085      	sub	sp, #20
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
 800551c:	460b      	mov	r3, r1
 800551e:	70fb      	strb	r3, [r7, #3]
    uint8_t j,i;
    j=0;
 8005520:	2300      	movs	r3, #0
 8005522:	73fb      	strb	r3, [r7, #15]
    for (i=0;i<len;i++){
 8005524:	2300      	movs	r3, #0
 8005526:	73bb      	strb	r3, [r7, #14]
 8005528:	e01e      	b.n	8005568 <calcDataSize+0x54>
       if ((data[i] == STX) || (data[i] == ETX) || (data[i] == ESC)){
 800552a:	7bbb      	ldrb	r3, [r7, #14]
 800552c:	687a      	ldr	r2, [r7, #4]
 800552e:	4413      	add	r3, r2
 8005530:	781b      	ldrb	r3, [r3, #0]
 8005532:	2b02      	cmp	r3, #2
 8005534:	d00b      	beq.n	800554e <calcDataSize+0x3a>
 8005536:	7bbb      	ldrb	r3, [r7, #14]
 8005538:	687a      	ldr	r2, [r7, #4]
 800553a:	4413      	add	r3, r2
 800553c:	781b      	ldrb	r3, [r3, #0]
 800553e:	2b03      	cmp	r3, #3
 8005540:	d005      	beq.n	800554e <calcDataSize+0x3a>
 8005542:	7bbb      	ldrb	r3, [r7, #14]
 8005544:	687a      	ldr	r2, [r7, #4]
 8005546:	4413      	add	r3, r2
 8005548:	781b      	ldrb	r3, [r3, #0]
 800554a:	2b1b      	cmp	r3, #27
 800554c:	d106      	bne.n	800555c <calcDataSize+0x48>
           j++;
 800554e:	7bfb      	ldrb	r3, [r7, #15]
 8005550:	3301      	adds	r3, #1
 8005552:	73fb      	strb	r3, [r7, #15]
           j++;
 8005554:	7bfb      	ldrb	r3, [r7, #15]
 8005556:	3301      	adds	r3, #1
 8005558:	73fb      	strb	r3, [r7, #15]
 800555a:	e002      	b.n	8005562 <calcDataSize+0x4e>
       }
       else j++;
 800555c:	7bfb      	ldrb	r3, [r7, #15]
 800555e:	3301      	adds	r3, #1
 8005560:	73fb      	strb	r3, [r7, #15]
    for (i=0;i<len;i++){
 8005562:	7bbb      	ldrb	r3, [r7, #14]
 8005564:	3301      	adds	r3, #1
 8005566:	73bb      	strb	r3, [r7, #14]
 8005568:	7bba      	ldrb	r2, [r7, #14]
 800556a:	78fb      	ldrb	r3, [r7, #3]
 800556c:	429a      	cmp	r2, r3
 800556e:	d3dc      	bcc.n	800552a <calcDataSize+0x16>
    }
    return j;
 8005570:	7bfb      	ldrb	r3, [r7, #15]
}
 8005572:	4618      	mov	r0, r3
 8005574:	3714      	adds	r7, #20
 8005576:	46bd      	mov	sp, r7
 8005578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557c:	4770      	bx	lr
	...

08005580 <transmitMessage>:

uint8_t transmitMessage(uint8_t *data, uint8_t data_len, uint8_t cmd, UART_select device){
 8005580:	b580      	push	{r7, lr}
 8005582:	b08c      	sub	sp, #48	; 0x30
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
 8005588:	4608      	mov	r0, r1
 800558a:	4611      	mov	r1, r2
 800558c:	461a      	mov	r2, r3
 800558e:	4603      	mov	r3, r0
 8005590:	70fb      	strb	r3, [r7, #3]
 8005592:	460b      	mov	r3, r1
 8005594:	70bb      	strb	r3, [r7, #2]
 8005596:	4613      	mov	r3, r2
 8005598:	707b      	strb	r3, [r7, #1]
    uint8_t message[34];
    uint8_t i,j,index;
    uint8_t tmp_len = 0;
 800559a:	2300      	movs	r3, #0
 800559c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    tmp_len = calcDataSize(data, data_len);
 80055a0:	78fb      	ldrb	r3, [r7, #3]
 80055a2:	4619      	mov	r1, r3
 80055a4:	6878      	ldr	r0, [r7, #4]
 80055a6:	f7ff ffb5 	bl	8005514 <calcDataSize>
 80055aa:	4603      	mov	r3, r0
 80055ac:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    msg.len = data_len;
 80055b0:	78fb      	ldrb	r3, [r7, #3]
 80055b2:	b29a      	uxth	r2, r3
 80055b4:	4bc1      	ldr	r3, [pc, #772]	; (80058bc <transmitMessage+0x33c>)
 80055b6:	80da      	strh	r2, [r3, #6]
    memcpy(msg.data, data, msg.len);
 80055b8:	4bc0      	ldr	r3, [pc, #768]	; (80058bc <transmitMessage+0x33c>)
 80055ba:	88db      	ldrh	r3, [r3, #6]
 80055bc:	461a      	mov	r2, r3
 80055be:	6879      	ldr	r1, [r7, #4]
 80055c0:	48bf      	ldr	r0, [pc, #764]	; (80058c0 <transmitMessage+0x340>)
 80055c2:	f00a fc85 	bl	800fed0 <memcpy>
    msg.protocol_rev[0] = PROTOCOL_VER;
 80055c6:	4bbd      	ldr	r3, [pc, #756]	; (80058bc <transmitMessage+0x33c>)
 80055c8:	22fe      	movs	r2, #254	; 0xfe
 80055ca:	701a      	strb	r2, [r3, #0]
    msg.protocol_rev[1] = COMM_PROTOCOL_REV;
 80055cc:	4bbb      	ldr	r3, [pc, #748]	; (80058bc <transmitMessage+0x33c>)
 80055ce:	2201      	movs	r2, #1
 80055d0:	705a      	strb	r2, [r3, #1]
    if (TOKEN == 255){
 80055d2:	4bbc      	ldr	r3, [pc, #752]	; (80058c4 <transmitMessage+0x344>)
 80055d4:	781b      	ldrb	r3, [r3, #0]
 80055d6:	2bff      	cmp	r3, #255	; 0xff
 80055d8:	d103      	bne.n	80055e2 <transmitMessage+0x62>
        TOKEN=0;
 80055da:	4bba      	ldr	r3, [pc, #744]	; (80058c4 <transmitMessage+0x344>)
 80055dc:	2200      	movs	r2, #0
 80055de:	701a      	strb	r2, [r3, #0]
 80055e0:	e005      	b.n	80055ee <transmitMessage+0x6e>
    }
    else{
        TOKEN++;
 80055e2:	4bb8      	ldr	r3, [pc, #736]	; (80058c4 <transmitMessage+0x344>)
 80055e4:	781b      	ldrb	r3, [r3, #0]
 80055e6:	3301      	adds	r3, #1
 80055e8:	b2da      	uxtb	r2, r3
 80055ea:	4bb6      	ldr	r3, [pc, #728]	; (80058c4 <transmitMessage+0x344>)
 80055ec:	701a      	strb	r2, [r3, #0]
    }
    msg.token = TOKEN;
 80055ee:	4bb5      	ldr	r3, [pc, #724]	; (80058c4 <transmitMessage+0x344>)
 80055f0:	781a      	ldrb	r2, [r3, #0]
 80055f2:	4bb2      	ldr	r3, [pc, #712]	; (80058bc <transmitMessage+0x33c>)
 80055f4:	709a      	strb	r2, [r3, #2]

    msg.cmd = cmd;
 80055f6:	4ab1      	ldr	r2, [pc, #708]	; (80058bc <transmitMessage+0x33c>)
 80055f8:	78bb      	ldrb	r3, [r7, #2]
 80055fa:	7153      	strb	r3, [r2, #5]
    msg.senderID[0] = ESC;
 80055fc:	4baf      	ldr	r3, [pc, #700]	; (80058bc <transmitMessage+0x33c>)
 80055fe:	221b      	movs	r2, #27
 8005600:	70da      	strb	r2, [r3, #3]
    msg.senderID[1] = SBP_S_ID;
 8005602:	4bae      	ldr	r3, [pc, #696]	; (80058bc <transmitMessage+0x33c>)
 8005604:	2232      	movs	r2, #50	; 0x32
 8005606:	711a      	strb	r2, [r3, #4]
    calcChecksum();
 8005608:	f000 f95e 	bl	80058c8 <calcChecksum>
    //CREATE MESSAGE
    index = 0;
 800560c:	2300      	movs	r3, #0
 800560e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    message[index] = STX;
 8005612:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005616:	3330      	adds	r3, #48	; 0x30
 8005618:	443b      	add	r3, r7
 800561a:	2202      	movs	r2, #2
 800561c:	f803 2c28 	strb.w	r2, [r3, #-40]
    index++;
 8005620:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005624:	3301      	adds	r3, #1
 8005626:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    message[index] = msg.protocol_rev[0];
 800562a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800562e:	4aa3      	ldr	r2, [pc, #652]	; (80058bc <transmitMessage+0x33c>)
 8005630:	7812      	ldrb	r2, [r2, #0]
 8005632:	3330      	adds	r3, #48	; 0x30
 8005634:	443b      	add	r3, r7
 8005636:	f803 2c28 	strb.w	r2, [r3, #-40]
    index++;
 800563a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800563e:	3301      	adds	r3, #1
 8005640:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    message[index] = msg.protocol_rev[1];
 8005644:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005648:	4a9c      	ldr	r2, [pc, #624]	; (80058bc <transmitMessage+0x33c>)
 800564a:	7852      	ldrb	r2, [r2, #1]
 800564c:	3330      	adds	r3, #48	; 0x30
 800564e:	443b      	add	r3, r7
 8005650:	f803 2c28 	strb.w	r2, [r3, #-40]
    index++;
 8005654:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005658:	3301      	adds	r3, #1
 800565a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    if ((msg.token == STX) || (msg.token == ETX) || (msg.token == ESC)){
 800565e:	4b97      	ldr	r3, [pc, #604]	; (80058bc <transmitMessage+0x33c>)
 8005660:	789b      	ldrb	r3, [r3, #2]
 8005662:	2b02      	cmp	r3, #2
 8005664:	d007      	beq.n	8005676 <transmitMessage+0xf6>
 8005666:	4b95      	ldr	r3, [pc, #596]	; (80058bc <transmitMessage+0x33c>)
 8005668:	789b      	ldrb	r3, [r3, #2]
 800566a:	2b03      	cmp	r3, #3
 800566c:	d003      	beq.n	8005676 <transmitMessage+0xf6>
 800566e:	4b93      	ldr	r3, [pc, #588]	; (80058bc <transmitMessage+0x33c>)
 8005670:	789b      	ldrb	r3, [r3, #2]
 8005672:	2b1b      	cmp	r3, #27
 8005674:	d119      	bne.n	80056aa <transmitMessage+0x12a>
        message[index] = ESC;
 8005676:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800567a:	3330      	adds	r3, #48	; 0x30
 800567c:	443b      	add	r3, r7
 800567e:	221b      	movs	r2, #27
 8005680:	f803 2c28 	strb.w	r2, [r3, #-40]
        index++;
 8005684:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005688:	3301      	adds	r3, #1
 800568a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        message[index] = msg.token;
 800568e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005692:	4a8a      	ldr	r2, [pc, #552]	; (80058bc <transmitMessage+0x33c>)
 8005694:	7892      	ldrb	r2, [r2, #2]
 8005696:	3330      	adds	r3, #48	; 0x30
 8005698:	443b      	add	r3, r7
 800569a:	f803 2c28 	strb.w	r2, [r3, #-40]
        index++;
 800569e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80056a2:	3301      	adds	r3, #1
 80056a4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80056a8:	e00c      	b.n	80056c4 <transmitMessage+0x144>
    }
    else{
        message[index] = msg.token;
 80056aa:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80056ae:	4a83      	ldr	r2, [pc, #524]	; (80058bc <transmitMessage+0x33c>)
 80056b0:	7892      	ldrb	r2, [r2, #2]
 80056b2:	3330      	adds	r3, #48	; 0x30
 80056b4:	443b      	add	r3, r7
 80056b6:	f803 2c28 	strb.w	r2, [r3, #-40]
        index++;
 80056ba:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80056be:	3301      	adds	r3, #1
 80056c0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    }
    message[index] = msg.senderID[0];
 80056c4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80056c8:	4a7c      	ldr	r2, [pc, #496]	; (80058bc <transmitMessage+0x33c>)
 80056ca:	78d2      	ldrb	r2, [r2, #3]
 80056cc:	3330      	adds	r3, #48	; 0x30
 80056ce:	443b      	add	r3, r7
 80056d0:	f803 2c28 	strb.w	r2, [r3, #-40]
    index++;
 80056d4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80056d8:	3301      	adds	r3, #1
 80056da:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    message[index] = msg.senderID[1];
 80056de:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80056e2:	4a76      	ldr	r2, [pc, #472]	; (80058bc <transmitMessage+0x33c>)
 80056e4:	7912      	ldrb	r2, [r2, #4]
 80056e6:	3330      	adds	r3, #48	; 0x30
 80056e8:	443b      	add	r3, r7
 80056ea:	f803 2c28 	strb.w	r2, [r3, #-40]
    index++;
 80056ee:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80056f2:	3301      	adds	r3, #1
 80056f4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    message[index] = msg.cmd;
 80056f8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80056fc:	4a6f      	ldr	r2, [pc, #444]	; (80058bc <transmitMessage+0x33c>)
 80056fe:	7952      	ldrb	r2, [r2, #5]
 8005700:	3330      	adds	r3, #48	; 0x30
 8005702:	443b      	add	r3, r7
 8005704:	f803 2c28 	strb.w	r2, [r3, #-40]
    index++;
 8005708:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800570c:	3301      	adds	r3, #1
 800570e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    for(i=0; i<msg.len;i++){
 8005712:	2300      	movs	r3, #0
 8005714:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8005718:	e046      	b.n	80057a8 <transmitMessage+0x228>
        if ((msg.data[i] == STX) || (msg.data[i] == ETX) || (msg.data[i] == ESC)){
 800571a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800571e:	4a67      	ldr	r2, [pc, #412]	; (80058bc <transmitMessage+0x33c>)
 8005720:	4413      	add	r3, r2
 8005722:	7a1b      	ldrb	r3, [r3, #8]
 8005724:	2b02      	cmp	r3, #2
 8005726:	d00d      	beq.n	8005744 <transmitMessage+0x1c4>
 8005728:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800572c:	4a63      	ldr	r2, [pc, #396]	; (80058bc <transmitMessage+0x33c>)
 800572e:	4413      	add	r3, r2
 8005730:	7a1b      	ldrb	r3, [r3, #8]
 8005732:	2b03      	cmp	r3, #3
 8005734:	d006      	beq.n	8005744 <transmitMessage+0x1c4>
 8005736:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800573a:	4a60      	ldr	r2, [pc, #384]	; (80058bc <transmitMessage+0x33c>)
 800573c:	4413      	add	r3, r2
 800573e:	7a1b      	ldrb	r3, [r3, #8]
 8005740:	2b1b      	cmp	r3, #27
 8005742:	d11c      	bne.n	800577e <transmitMessage+0x1fe>
            message[index] = ESC;
 8005744:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005748:	3330      	adds	r3, #48	; 0x30
 800574a:	443b      	add	r3, r7
 800574c:	221b      	movs	r2, #27
 800574e:	f803 2c28 	strb.w	r2, [r3, #-40]
            index++;
 8005752:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005756:	3301      	adds	r3, #1
 8005758:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
            message[index] = msg.data[i];
 800575c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8005760:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005764:	4955      	ldr	r1, [pc, #340]	; (80058bc <transmitMessage+0x33c>)
 8005766:	440a      	add	r2, r1
 8005768:	7a12      	ldrb	r2, [r2, #8]
 800576a:	3330      	adds	r3, #48	; 0x30
 800576c:	443b      	add	r3, r7
 800576e:	f803 2c28 	strb.w	r2, [r3, #-40]
            index++;
 8005772:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005776:	3301      	adds	r3, #1
 8005778:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800577c:	e00f      	b.n	800579e <transmitMessage+0x21e>
        }
        else{
            message[index] = msg.data[i];
 800577e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8005782:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005786:	494d      	ldr	r1, [pc, #308]	; (80058bc <transmitMessage+0x33c>)
 8005788:	440a      	add	r2, r1
 800578a:	7a12      	ldrb	r2, [r2, #8]
 800578c:	3330      	adds	r3, #48	; 0x30
 800578e:	443b      	add	r3, r7
 8005790:	f803 2c28 	strb.w	r2, [r3, #-40]
            index++;
 8005794:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005798:	3301      	adds	r3, #1
 800579a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    for(i=0; i<msg.len;i++){
 800579e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80057a2:	3301      	adds	r3, #1
 80057a4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80057a8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80057ac:	b29a      	uxth	r2, r3
 80057ae:	4b43      	ldr	r3, [pc, #268]	; (80058bc <transmitMessage+0x33c>)
 80057b0:	88db      	ldrh	r3, [r3, #6]
 80057b2:	429a      	cmp	r2, r3
 80057b4:	d3b1      	bcc.n	800571a <transmitMessage+0x19a>
        }
    }
    message[index] = msg.checksum[3];
 80057b6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80057ba:	4a40      	ldr	r2, [pc, #256]	; (80058bc <transmitMessage+0x33c>)
 80057bc:	7fd2      	ldrb	r2, [r2, #31]
 80057be:	3330      	adds	r3, #48	; 0x30
 80057c0:	443b      	add	r3, r7
 80057c2:	f803 2c28 	strb.w	r2, [r3, #-40]
    index++;
 80057c6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80057ca:	3301      	adds	r3, #1
 80057cc:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    message[index] = msg.checksum[2];
 80057d0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80057d4:	4a39      	ldr	r2, [pc, #228]	; (80058bc <transmitMessage+0x33c>)
 80057d6:	7f92      	ldrb	r2, [r2, #30]
 80057d8:	3330      	adds	r3, #48	; 0x30
 80057da:	443b      	add	r3, r7
 80057dc:	f803 2c28 	strb.w	r2, [r3, #-40]
    index++;
 80057e0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80057e4:	3301      	adds	r3, #1
 80057e6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    message[index] = msg.checksum[1];
 80057ea:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80057ee:	4a33      	ldr	r2, [pc, #204]	; (80058bc <transmitMessage+0x33c>)
 80057f0:	7f52      	ldrb	r2, [r2, #29]
 80057f2:	3330      	adds	r3, #48	; 0x30
 80057f4:	443b      	add	r3, r7
 80057f6:	f803 2c28 	strb.w	r2, [r3, #-40]
    index++;
 80057fa:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80057fe:	3301      	adds	r3, #1
 8005800:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    if (msg.checksum[0] == ESC){
 8005804:	4b2d      	ldr	r3, [pc, #180]	; (80058bc <transmitMessage+0x33c>)
 8005806:	7f1b      	ldrb	r3, [r3, #28]
 8005808:	2b1b      	cmp	r3, #27
 800580a:	d12a      	bne.n	8005862 <transmitMessage+0x2e2>
        message[index] = ESC;
 800580c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005810:	3330      	adds	r3, #48	; 0x30
 8005812:	443b      	add	r3, r7
 8005814:	221b      	movs	r2, #27
 8005816:	f803 2c28 	strb.w	r2, [r3, #-40]
        index++;
 800581a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800581e:	3301      	adds	r3, #1
 8005820:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        message[index] = msg.checksum[0];
 8005824:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005828:	4a24      	ldr	r2, [pc, #144]	; (80058bc <transmitMessage+0x33c>)
 800582a:	7f12      	ldrb	r2, [r2, #28]
 800582c:	3330      	adds	r3, #48	; 0x30
 800582e:	443b      	add	r3, r7
 8005830:	f803 2c28 	strb.w	r2, [r3, #-40]
        index++;
 8005834:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005838:	3301      	adds	r3, #1
 800583a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        message[index] = ETX;
 800583e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005842:	3330      	adds	r3, #48	; 0x30
 8005844:	443b      	add	r3, r7
 8005846:	2203      	movs	r2, #3
 8005848:	f803 2c28 	strb.w	r2, [r3, #-40]
        index++;
 800584c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005850:	3301      	adds	r3, #1
 8005852:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        msg.len = index;
 8005856:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800585a:	b29a      	uxth	r2, r3
 800585c:	4b17      	ldr	r3, [pc, #92]	; (80058bc <transmitMessage+0x33c>)
 800585e:	80da      	strh	r2, [r3, #6]
 8005860:	e01d      	b.n	800589e <transmitMessage+0x31e>
    }
    else{
        message[index] = msg.checksum[0];
 8005862:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005866:	4a15      	ldr	r2, [pc, #84]	; (80058bc <transmitMessage+0x33c>)
 8005868:	7f12      	ldrb	r2, [r2, #28]
 800586a:	3330      	adds	r3, #48	; 0x30
 800586c:	443b      	add	r3, r7
 800586e:	f803 2c28 	strb.w	r2, [r3, #-40]
        index++;
 8005872:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005876:	3301      	adds	r3, #1
 8005878:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        message[index] = ETX;
 800587c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005880:	3330      	adds	r3, #48	; 0x30
 8005882:	443b      	add	r3, r7
 8005884:	2203      	movs	r2, #3
 8005886:	f803 2c28 	strb.w	r2, [r3, #-40]
        index++;
 800588a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800588e:	3301      	adds	r3, #1
 8005890:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        msg.len = index;
 8005894:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005898:	b29a      	uxth	r2, r3
 800589a:	4b08      	ldr	r3, [pc, #32]	; (80058bc <transmitMessage+0x33c>)
 800589c:	80da      	strh	r2, [r3, #6]
    }

    uart_write(message, msg.len, device, 10);
 800589e:	4b07      	ldr	r3, [pc, #28]	; (80058bc <transmitMessage+0x33c>)
 80058a0:	88db      	ldrh	r3, [r3, #6]
 80058a2:	b2d9      	uxtb	r1, r3
 80058a4:	787a      	ldrb	r2, [r7, #1]
 80058a6:	f107 0008 	add.w	r0, r7, #8
 80058aa:	230a      	movs	r3, #10
 80058ac:	f000 ff24 	bl	80066f8 <uart_write>
    return 1;
 80058b0:	2301      	movs	r3, #1
}
 80058b2:	4618      	mov	r0, r3
 80058b4:	3730      	adds	r7, #48	; 0x30
 80058b6:	46bd      	mov	sp, r7
 80058b8:	bd80      	pop	{r7, pc}
 80058ba:	bf00      	nop
 80058bc:	200003ec 	.word	0x200003ec
 80058c0:	200003f4 	.word	0x200003f4
 80058c4:	200003e8 	.word	0x200003e8

080058c8 <calcChecksum>:

static void calcChecksum(void){
 80058c8:	b480      	push	{r7}
 80058ca:	b083      	sub	sp, #12
 80058cc:	af00      	add	r7, sp, #0
    msg.checksum[0] = msg.protocol_rev[0];
 80058ce:	4b24      	ldr	r3, [pc, #144]	; (8005960 <calcChecksum+0x98>)
 80058d0:	781a      	ldrb	r2, [r3, #0]
 80058d2:	4b23      	ldr	r3, [pc, #140]	; (8005960 <calcChecksum+0x98>)
 80058d4:	771a      	strb	r2, [r3, #28]
    msg.checksum[0] ^= msg.protocol_rev[1];
 80058d6:	4b22      	ldr	r3, [pc, #136]	; (8005960 <calcChecksum+0x98>)
 80058d8:	7f1a      	ldrb	r2, [r3, #28]
 80058da:	4b21      	ldr	r3, [pc, #132]	; (8005960 <calcChecksum+0x98>)
 80058dc:	785b      	ldrb	r3, [r3, #1]
 80058de:	4053      	eors	r3, r2
 80058e0:	b2da      	uxtb	r2, r3
 80058e2:	4b1f      	ldr	r3, [pc, #124]	; (8005960 <calcChecksum+0x98>)
 80058e4:	771a      	strb	r2, [r3, #28]

    msg.checksum[0] ^= msg.token;
 80058e6:	4b1e      	ldr	r3, [pc, #120]	; (8005960 <calcChecksum+0x98>)
 80058e8:	7f1a      	ldrb	r2, [r3, #28]
 80058ea:	4b1d      	ldr	r3, [pc, #116]	; (8005960 <calcChecksum+0x98>)
 80058ec:	789b      	ldrb	r3, [r3, #2]
 80058ee:	4053      	eors	r3, r2
 80058f0:	b2da      	uxtb	r2, r3
 80058f2:	4b1b      	ldr	r3, [pc, #108]	; (8005960 <calcChecksum+0x98>)
 80058f4:	771a      	strb	r2, [r3, #28]

    msg.checksum[0] ^= msg.senderID[0];
 80058f6:	4b1a      	ldr	r3, [pc, #104]	; (8005960 <calcChecksum+0x98>)
 80058f8:	7f1a      	ldrb	r2, [r3, #28]
 80058fa:	4b19      	ldr	r3, [pc, #100]	; (8005960 <calcChecksum+0x98>)
 80058fc:	78db      	ldrb	r3, [r3, #3]
 80058fe:	4053      	eors	r3, r2
 8005900:	b2da      	uxtb	r2, r3
 8005902:	4b17      	ldr	r3, [pc, #92]	; (8005960 <calcChecksum+0x98>)
 8005904:	771a      	strb	r2, [r3, #28]
    msg.checksum[0] ^= msg.senderID[1];
 8005906:	4b16      	ldr	r3, [pc, #88]	; (8005960 <calcChecksum+0x98>)
 8005908:	7f1a      	ldrb	r2, [r3, #28]
 800590a:	4b15      	ldr	r3, [pc, #84]	; (8005960 <calcChecksum+0x98>)
 800590c:	791b      	ldrb	r3, [r3, #4]
 800590e:	4053      	eors	r3, r2
 8005910:	b2da      	uxtb	r2, r3
 8005912:	4b13      	ldr	r3, [pc, #76]	; (8005960 <calcChecksum+0x98>)
 8005914:	771a      	strb	r2, [r3, #28]

    msg.checksum[0] ^= msg.cmd;
 8005916:	4b12      	ldr	r3, [pc, #72]	; (8005960 <calcChecksum+0x98>)
 8005918:	7f1a      	ldrb	r2, [r3, #28]
 800591a:	4b11      	ldr	r3, [pc, #68]	; (8005960 <calcChecksum+0x98>)
 800591c:	795b      	ldrb	r3, [r3, #5]
 800591e:	4053      	eors	r3, r2
 8005920:	b2da      	uxtb	r2, r3
 8005922:	4b0f      	ldr	r3, [pc, #60]	; (8005960 <calcChecksum+0x98>)
 8005924:	771a      	strb	r2, [r3, #28]
    uint8_t i;

    for (i=0; i < msg.len; i++)
 8005926:	2300      	movs	r3, #0
 8005928:	71fb      	strb	r3, [r7, #7]
 800592a:	e00c      	b.n	8005946 <calcChecksum+0x7e>
    {
       msg.checksum[0] ^= msg.data[i];
 800592c:	4b0c      	ldr	r3, [pc, #48]	; (8005960 <calcChecksum+0x98>)
 800592e:	7f1a      	ldrb	r2, [r3, #28]
 8005930:	79fb      	ldrb	r3, [r7, #7]
 8005932:	490b      	ldr	r1, [pc, #44]	; (8005960 <calcChecksum+0x98>)
 8005934:	440b      	add	r3, r1
 8005936:	7a1b      	ldrb	r3, [r3, #8]
 8005938:	4053      	eors	r3, r2
 800593a:	b2da      	uxtb	r2, r3
 800593c:	4b08      	ldr	r3, [pc, #32]	; (8005960 <calcChecksum+0x98>)
 800593e:	771a      	strb	r2, [r3, #28]
    for (i=0; i < msg.len; i++)
 8005940:	79fb      	ldrb	r3, [r7, #7]
 8005942:	3301      	adds	r3, #1
 8005944:	71fb      	strb	r3, [r7, #7]
 8005946:	79fb      	ldrb	r3, [r7, #7]
 8005948:	b29a      	uxth	r2, r3
 800594a:	4b05      	ldr	r3, [pc, #20]	; (8005960 <calcChecksum+0x98>)
 800594c:	88db      	ldrh	r3, [r3, #6]
 800594e:	429a      	cmp	r2, r3
 8005950:	d3ec      	bcc.n	800592c <calcChecksum+0x64>
    }
}
 8005952:	bf00      	nop
 8005954:	bf00      	nop
 8005956:	370c      	adds	r7, #12
 8005958:	46bd      	mov	sp, r7
 800595a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595e:	4770      	bx	lr
 8005960:	200003ec 	.word	0x200003ec

08005964 <parseMessage>:


uint8_t parseMessage(uint8_t *data, UART_select device){
 8005964:	b580      	push	{r7, lr}
 8005966:	b084      	sub	sp, #16
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
 800596c:	460b      	mov	r3, r1
 800596e:	70fb      	strb	r3, [r7, #3]
    uint8_t chsum = 0;
 8005970:	2300      	movs	r3, #0
 8005972:	73bb      	strb	r3, [r7, #14]
    uint8_t len = data[0];
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	781b      	ldrb	r3, [r3, #0]
 8005978:	737b      	strb	r3, [r7, #13]
    if (len < 11){
 800597a:	7b7b      	ldrb	r3, [r7, #13]
 800597c:	2b0a      	cmp	r3, #10
 800597e:	d805      	bhi.n	800598c <parseMessage+0x28>
        sendNack(device);
 8005980:	78fb      	ldrb	r3, [r7, #3]
 8005982:	4618      	mov	r0, r3
 8005984:	f7ff fd5e 	bl	8005444 <sendNack>
        return 1;
 8005988:	2301      	movs	r3, #1
 800598a:	e06d      	b.n	8005a68 <parseMessage+0x104>
    }
    msg.len = len-10;
 800598c:	7b7b      	ldrb	r3, [r7, #13]
 800598e:	b29b      	uxth	r3, r3
 8005990:	3b0a      	subs	r3, #10
 8005992:	b29a      	uxth	r2, r3
 8005994:	4b36      	ldr	r3, [pc, #216]	; (8005a70 <parseMessage+0x10c>)
 8005996:	80da      	strh	r2, [r3, #6]
    if (!msg.data)return 2;
    msg.protocol_rev[0] = data[1];
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	785a      	ldrb	r2, [r3, #1]
 800599c:	4b34      	ldr	r3, [pc, #208]	; (8005a70 <parseMessage+0x10c>)
 800599e:	701a      	strb	r2, [r3, #0]
    msg.protocol_rev[1] = data[2];
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	789a      	ldrb	r2, [r3, #2]
 80059a4:	4b32      	ldr	r3, [pc, #200]	; (8005a70 <parseMessage+0x10c>)
 80059a6:	705a      	strb	r2, [r3, #1]
    msg.token = data[3];
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	78da      	ldrb	r2, [r3, #3]
 80059ac:	4b30      	ldr	r3, [pc, #192]	; (8005a70 <parseMessage+0x10c>)
 80059ae:	709a      	strb	r2, [r3, #2]
    TOKEN = msg.token;
 80059b0:	4b2f      	ldr	r3, [pc, #188]	; (8005a70 <parseMessage+0x10c>)
 80059b2:	789a      	ldrb	r2, [r3, #2]
 80059b4:	4b2f      	ldr	r3, [pc, #188]	; (8005a74 <parseMessage+0x110>)
 80059b6:	701a      	strb	r2, [r3, #0]
    msg.senderID[0] = data[4];
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	791a      	ldrb	r2, [r3, #4]
 80059bc:	4b2c      	ldr	r3, [pc, #176]	; (8005a70 <parseMessage+0x10c>)
 80059be:	70da      	strb	r2, [r3, #3]
    msg.senderID[1] = data[5];
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	795a      	ldrb	r2, [r3, #5]
 80059c4:	4b2a      	ldr	r3, [pc, #168]	; (8005a70 <parseMessage+0x10c>)
 80059c6:	711a      	strb	r2, [r3, #4]
    msg.cmd = data[6];
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	799a      	ldrb	r2, [r3, #6]
 80059cc:	4b28      	ldr	r3, [pc, #160]	; (8005a70 <parseMessage+0x10c>)
 80059ce:	715a      	strb	r2, [r3, #5]
    uint8_t i;
    for (i=0; i<msg.len; i++){
 80059d0:	2300      	movs	r3, #0
 80059d2:	73fb      	strb	r3, [r7, #15]
 80059d4:	e00d      	b.n	80059f2 <parseMessage+0x8e>
//        if (data[6+i] == ESC) i++;
        msg.data[i] = data[7+i];
 80059d6:	7bfb      	ldrb	r3, [r7, #15]
 80059d8:	3307      	adds	r3, #7
 80059da:	461a      	mov	r2, r3
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	441a      	add	r2, r3
 80059e0:	7bfb      	ldrb	r3, [r7, #15]
 80059e2:	7811      	ldrb	r1, [r2, #0]
 80059e4:	4a22      	ldr	r2, [pc, #136]	; (8005a70 <parseMessage+0x10c>)
 80059e6:	4413      	add	r3, r2
 80059e8:	460a      	mov	r2, r1
 80059ea:	721a      	strb	r2, [r3, #8]
    for (i=0; i<msg.len; i++){
 80059ec:	7bfb      	ldrb	r3, [r7, #15]
 80059ee:	3301      	adds	r3, #1
 80059f0:	73fb      	strb	r3, [r7, #15]
 80059f2:	7bfb      	ldrb	r3, [r7, #15]
 80059f4:	b29a      	uxth	r2, r3
 80059f6:	4b1e      	ldr	r3, [pc, #120]	; (8005a70 <parseMessage+0x10c>)
 80059f8:	88db      	ldrh	r3, [r3, #6]
 80059fa:	429a      	cmp	r2, r3
 80059fc:	d3eb      	bcc.n	80059d6 <parseMessage+0x72>
    }
    msg.checksum[3] = data[7+i];
 80059fe:	7bfb      	ldrb	r3, [r7, #15]
 8005a00:	3307      	adds	r3, #7
 8005a02:	461a      	mov	r2, r3
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	4413      	add	r3, r2
 8005a08:	781a      	ldrb	r2, [r3, #0]
 8005a0a:	4b19      	ldr	r3, [pc, #100]	; (8005a70 <parseMessage+0x10c>)
 8005a0c:	77da      	strb	r2, [r3, #31]
    msg.checksum[2] = data[8+i];
 8005a0e:	7bfb      	ldrb	r3, [r7, #15]
 8005a10:	3308      	adds	r3, #8
 8005a12:	461a      	mov	r2, r3
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	4413      	add	r3, r2
 8005a18:	781a      	ldrb	r2, [r3, #0]
 8005a1a:	4b15      	ldr	r3, [pc, #84]	; (8005a70 <parseMessage+0x10c>)
 8005a1c:	779a      	strb	r2, [r3, #30]
    msg.checksum[1] = data[9+i];
 8005a1e:	7bfb      	ldrb	r3, [r7, #15]
 8005a20:	3309      	adds	r3, #9
 8005a22:	461a      	mov	r2, r3
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	4413      	add	r3, r2
 8005a28:	781a      	ldrb	r2, [r3, #0]
 8005a2a:	4b11      	ldr	r3, [pc, #68]	; (8005a70 <parseMessage+0x10c>)
 8005a2c:	775a      	strb	r2, [r3, #29]
    msg.checksum[0] = data[10+i];
 8005a2e:	7bfb      	ldrb	r3, [r7, #15]
 8005a30:	330a      	adds	r3, #10
 8005a32:	461a      	mov	r2, r3
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	4413      	add	r3, r2
 8005a38:	781a      	ldrb	r2, [r3, #0]
 8005a3a:	4b0d      	ldr	r3, [pc, #52]	; (8005a70 <parseMessage+0x10c>)
 8005a3c:	771a      	strb	r2, [r3, #28]
    chsum = msg.checksum[0];
 8005a3e:	4b0c      	ldr	r3, [pc, #48]	; (8005a70 <parseMessage+0x10c>)
 8005a40:	7f1b      	ldrb	r3, [r3, #28]
 8005a42:	73bb      	strb	r3, [r7, #14]
    calcChecksum();
 8005a44:	f7ff ff40 	bl	80058c8 <calcChecksum>
    if (chsum != msg.checksum[0]){
 8005a48:	4b09      	ldr	r3, [pc, #36]	; (8005a70 <parseMessage+0x10c>)
 8005a4a:	7f1b      	ldrb	r3, [r3, #28]
 8005a4c:	7bba      	ldrb	r2, [r7, #14]
 8005a4e:	429a      	cmp	r2, r3
 8005a50:	d005      	beq.n	8005a5e <parseMessage+0xfa>
        sendNack(device);
 8005a52:	78fb      	ldrb	r3, [r7, #3]
 8005a54:	4618      	mov	r0, r3
 8005a56:	f7ff fcf5 	bl	8005444 <sendNack>
        return 1;
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	e004      	b.n	8005a68 <parseMessage+0x104>
    }
    sendAck(device);
 8005a5e:	78fb      	ldrb	r3, [r7, #3]
 8005a60:	4618      	mov	r0, r3
 8005a62:	f7ff fd23 	bl	80054ac <sendAck>
//    HAL_Delay(22);
    return 0;                  //Note that after the parsing the escape chars remains in payload.
 8005a66:	2300      	movs	r3, #0
}
 8005a68:	4618      	mov	r0, r3
 8005a6a:	3710      	adds	r7, #16
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	bd80      	pop	{r7, pc}
 8005a70:	200003ec 	.word	0x200003ec
 8005a74:	200003e8 	.word	0x200003e8

08005a78 <handler>:



void handler(UART_select device){
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b082      	sub	sp, #8
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	4603      	mov	r3, r0
 8005a80:	71fb      	strb	r3, [r7, #7]
    switch (msg.cmd){
 8005a82:	4b33      	ldr	r3, [pc, #204]	; (8005b50 <handler+0xd8>)
 8005a84:	795b      	ldrb	r3, [r3, #5]
 8005a86:	2ba0      	cmp	r3, #160	; 0xa0
 8005a88:	d057      	beq.n	8005b3a <handler+0xc2>
 8005a8a:	2ba0      	cmp	r3, #160	; 0xa0
 8005a8c:	dc5a      	bgt.n	8005b44 <handler+0xcc>
 8005a8e:	2b65      	cmp	r3, #101	; 0x65
 8005a90:	dc34      	bgt.n	8005afc <handler+0x84>
 8005a92:	2b50      	cmp	r3, #80	; 0x50
 8005a94:	db56      	blt.n	8005b44 <handler+0xcc>
 8005a96:	3b50      	subs	r3, #80	; 0x50
 8005a98:	2b15      	cmp	r3, #21
 8005a9a:	d853      	bhi.n	8005b44 <handler+0xcc>
 8005a9c:	a201      	add	r2, pc, #4	; (adr r2, 8005aa4 <handler+0x2c>)
 8005a9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aa2:	bf00      	nop
 8005aa4:	08005b03 	.word	0x08005b03
 8005aa8:	08005b45 	.word	0x08005b45
 8005aac:	08005b45 	.word	0x08005b45
 8005ab0:	08005b45 	.word	0x08005b45
 8005ab4:	08005b45 	.word	0x08005b45
 8005ab8:	08005b45 	.word	0x08005b45
 8005abc:	08005b0b 	.word	0x08005b0b
 8005ac0:	08005b45 	.word	0x08005b45
 8005ac4:	08005b45 	.word	0x08005b45
 8005ac8:	08005b45 	.word	0x08005b45
 8005acc:	08005b45 	.word	0x08005b45
 8005ad0:	08005b45 	.word	0x08005b45
 8005ad4:	08005b45 	.word	0x08005b45
 8005ad8:	08005b45 	.word	0x08005b45
 8005adc:	08005b45 	.word	0x08005b45
 8005ae0:	08005b45 	.word	0x08005b45
 8005ae4:	08005b45 	.word	0x08005b45
 8005ae8:	08005b45 	.word	0x08005b45
 8005aec:	08005b45 	.word	0x08005b45
 8005af0:	08005b45 	.word	0x08005b45
 8005af4:	08005b45 	.word	0x08005b45
 8005af8:	08005b1b 	.word	0x08005b1b
 8005afc:	2b80      	cmp	r3, #128	; 0x80
 8005afe:	d014      	beq.n	8005b2a <handler+0xb2>
//        gpio_setGNSS_RESET(PIN_LOW);
        HAL_Delay(500);
//        gpio_setGNSS_RESET(PIN_HIGH);
        break;
    default:
        break;
 8005b00:	e020      	b.n	8005b44 <handler+0xcc>
        flag_connected_toIris = 1;
 8005b02:	4b14      	ldr	r3, [pc, #80]	; (8005b54 <handler+0xdc>)
 8005b04:	2201      	movs	r2, #1
 8005b06:	701a      	strb	r2, [r3, #0]
        break;
 8005b08:	e01d      	b.n	8005b46 <handler+0xce>
        ublox_transmit_message(msg.cmd, device);
 8005b0a:	4b11      	ldr	r3, [pc, #68]	; (8005b50 <handler+0xd8>)
 8005b0c:	795b      	ldrb	r3, [r3, #5]
 8005b0e:	79fa      	ldrb	r2, [r7, #7]
 8005b10:	4611      	mov	r1, r2
 8005b12:	4618      	mov	r0, r3
 8005b14:	f7fe f8d8 	bl	8003cc8 <ublox_transmit_message>
        break;
 8005b18:	e015      	b.n	8005b46 <handler+0xce>
        reportFW(msg.cmd, device);
 8005b1a:	4b0d      	ldr	r3, [pc, #52]	; (8005b50 <handler+0xd8>)
 8005b1c:	795b      	ldrb	r3, [r3, #5]
 8005b1e:	79fa      	ldrb	r2, [r7, #7]
 8005b20:	4611      	mov	r1, r2
 8005b22:	4618      	mov	r0, r3
 8005b24:	f000 f844 	bl	8005bb0 <reportFW>
        break;
 8005b28:	e00d      	b.n	8005b46 <handler+0xce>
        ublox_transmit_rtc(msg.cmd, device);
 8005b2a:	4b09      	ldr	r3, [pc, #36]	; (8005b50 <handler+0xd8>)
 8005b2c:	795b      	ldrb	r3, [r3, #5]
 8005b2e:	79fa      	ldrb	r2, [r7, #7]
 8005b30:	4611      	mov	r1, r2
 8005b32:	4618      	mov	r0, r3
 8005b34:	f7fe f8b4 	bl	8003ca0 <ublox_transmit_rtc>
        break;
 8005b38:	e005      	b.n	8005b46 <handler+0xce>
        HAL_Delay(500);
 8005b3a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005b3e:	f000 ff8f 	bl	8006a60 <HAL_Delay>
        break;
 8005b42:	e000      	b.n	8005b46 <handler+0xce>
        break;
 8005b44:	bf00      	nop
    }
}
 8005b46:	bf00      	nop
 8005b48:	3708      	adds	r7, #8
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	bd80      	pop	{r7, pc}
 8005b4e:	bf00      	nop
 8005b50:	200003ec 	.word	0x200003ec
 8005b54:	200003e9 	.word	0x200003e9

08005b58 <init_message_t>:

void init_message_t(void){
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	af00      	add	r7, sp, #0
    msg.protocol_rev[0] = 0;
 8005b5c:	4b12      	ldr	r3, [pc, #72]	; (8005ba8 <init_message_t+0x50>)
 8005b5e:	2200      	movs	r2, #0
 8005b60:	701a      	strb	r2, [r3, #0]
    msg.protocol_rev[1] = 0;
 8005b62:	4b11      	ldr	r3, [pc, #68]	; (8005ba8 <init_message_t+0x50>)
 8005b64:	2200      	movs	r2, #0
 8005b66:	705a      	strb	r2, [r3, #1]
    msg.token = 0;
 8005b68:	4b0f      	ldr	r3, [pc, #60]	; (8005ba8 <init_message_t+0x50>)
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	709a      	strb	r2, [r3, #2]
    msg.senderID[0] = 0;
 8005b6e:	4b0e      	ldr	r3, [pc, #56]	; (8005ba8 <init_message_t+0x50>)
 8005b70:	2200      	movs	r2, #0
 8005b72:	70da      	strb	r2, [r3, #3]
    msg.senderID[1] = 0;
 8005b74:	4b0c      	ldr	r3, [pc, #48]	; (8005ba8 <init_message_t+0x50>)
 8005b76:	2200      	movs	r2, #0
 8005b78:	711a      	strb	r2, [r3, #4]
    msg.cmd = 0;
 8005b7a:	4b0b      	ldr	r3, [pc, #44]	; (8005ba8 <init_message_t+0x50>)
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	715a      	strb	r2, [r3, #5]
    memset(msg.data, 0, 20);
 8005b80:	2214      	movs	r2, #20
 8005b82:	2100      	movs	r1, #0
 8005b84:	4809      	ldr	r0, [pc, #36]	; (8005bac <init_message_t+0x54>)
 8005b86:	f00a f9b1 	bl	800feec <memset>
    msg.checksum[0] = 0;
 8005b8a:	4b07      	ldr	r3, [pc, #28]	; (8005ba8 <init_message_t+0x50>)
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	771a      	strb	r2, [r3, #28]
    msg.checksum[1] = 0;
 8005b90:	4b05      	ldr	r3, [pc, #20]	; (8005ba8 <init_message_t+0x50>)
 8005b92:	2200      	movs	r2, #0
 8005b94:	775a      	strb	r2, [r3, #29]
    msg.checksum[2] = 0;
 8005b96:	4b04      	ldr	r3, [pc, #16]	; (8005ba8 <init_message_t+0x50>)
 8005b98:	2200      	movs	r2, #0
 8005b9a:	779a      	strb	r2, [r3, #30]
    msg.checksum[3] = 0;
 8005b9c:	4b02      	ldr	r3, [pc, #8]	; (8005ba8 <init_message_t+0x50>)
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	77da      	strb	r2, [r3, #31]
}
 8005ba2:	bf00      	nop
 8005ba4:	bd80      	pop	{r7, pc}
 8005ba6:	bf00      	nop
 8005ba8:	200003ec 	.word	0x200003ec
 8005bac:	200003f4 	.word	0x200003f4

08005bb0 <reportFW>:

void reportFW(uint8_t cmd, UART_select device){
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b084      	sub	sp, #16
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	460a      	mov	r2, r1
 8005bba:	71fb      	strb	r3, [r7, #7]
 8005bbc:	4613      	mov	r3, r2
 8005bbe:	71bb      	strb	r3, [r7, #6]
    uint8_t fwv[1] = {FW_VERSION};
 8005bc0:	236e      	movs	r3, #110	; 0x6e
 8005bc2:	733b      	strb	r3, [r7, #12]
    transmitMessage(fwv, 1, cmd, device);
 8005bc4:	79bb      	ldrb	r3, [r7, #6]
 8005bc6:	79fa      	ldrb	r2, [r7, #7]
 8005bc8:	f107 000c 	add.w	r0, r7, #12
 8005bcc:	2101      	movs	r1, #1
 8005bce:	f7ff fcd7 	bl	8005580 <transmitMessage>
}
 8005bd2:	bf00      	nop
 8005bd4:	3710      	adds	r7, #16
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bd80      	pop	{r7, pc}

08005bda <RB_init>:

#include "ring_buffer.h"
#include <string.h>
#include "assert.h"

uint8_t RB_init(RB_t* rb, uint8_t size) {
 8005bda:	b580      	push	{r7, lr}
 8005bdc:	b082      	sub	sp, #8
 8005bde:	af00      	add	r7, sp, #0
 8005be0:	6078      	str	r0, [r7, #4]
 8005be2:	460b      	mov	r3, r1
 8005be4:	70fb      	strb	r3, [r7, #3]
  memset(rb->buffer, 0, sizeof(uint8_t)*size);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	78fa      	ldrb	r2, [r7, #3]
 8005bea:	2100      	movs	r1, #0
 8005bec:	4618      	mov	r0, r3
 8005bee:	f00a f97d 	bl	800feec <memset>
//  rb->buffer = malloc(size * sizeof(char));
//
  if (!rb->buffer) {
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d101      	bne.n	8005bfc <RB_init+0x22>
    return 0;
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	e00a      	b.n	8005c12 <RB_init+0x38>
  }
  rb->rdpos = 0;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2200      	movs	r2, #0
 8005c00:	629a      	str	r2, [r3, #40]	; 0x28
  rb->wrpos = 0;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2200      	movs	r2, #0
 8005c06:	62da      	str	r2, [r3, #44]	; 0x2c
  rb->size = size;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	78fa      	ldrb	r2, [r7, #3]
 8005c0c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return 1;
 8005c10:	2301      	movs	r3, #1
}
 8005c12:	4618      	mov	r0, r3
 8005c14:	3708      	adds	r7, #8
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bd80      	pop	{r7, pc}

08005c1a <RB_push>:
  rb->rdpos = 0;
  rb->wrpos = 0;
  memset(rb->buffer, 0, sizeof(rb->buffer));
}

void RB_push(RB_t* rb, uint8_t byte) {
 8005c1a:	b480      	push	{r7}
 8005c1c:	b083      	sub	sp, #12
 8005c1e:	af00      	add	r7, sp, #0
 8005c20:	6078      	str	r0, [r7, #4]
 8005c22:	460b      	mov	r3, r1
 8005c24:	70fb      	strb	r3, [r7, #3]
  if ((rb->wrpos + 1) % rb->size == rb->rdpos) {
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c2a:	3301      	adds	r3, #1
 8005c2c:	687a      	ldr	r2, [r7, #4]
 8005c2e:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 8005c32:	fb93 f1f2 	sdiv	r1, r3, r2
 8005c36:	fb01 f202 	mul.w	r2, r1, r2
 8005c3a:	1a9a      	subs	r2, r3, r2
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c40:	429a      	cmp	r2, r3
 8005c42:	d012      	beq.n	8005c6a <RB_push+0x50>
    return;
  }

  rb->buffer[rb->wrpos] = byte;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c48:	687a      	ldr	r2, [r7, #4]
 8005c4a:	78f9      	ldrb	r1, [r7, #3]
 8005c4c:	54d1      	strb	r1, [r2, r3]
  rb->wrpos = (rb->wrpos + 1) % rb->size;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c52:	3301      	adds	r3, #1
 8005c54:	687a      	ldr	r2, [r7, #4]
 8005c56:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 8005c5a:	fb93 f1f2 	sdiv	r1, r3, r2
 8005c5e:	fb01 f202 	mul.w	r2, r1, r2
 8005c62:	1a9a      	subs	r2, r3, r2
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	62da      	str	r2, [r3, #44]	; 0x2c
 8005c68:	e000      	b.n	8005c6c <RB_push+0x52>
    return;
 8005c6a:	bf00      	nop
}
 8005c6c:	370c      	adds	r7, #12
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c74:	4770      	bx	lr

08005c76 <RB_pop>:

uint8_t RB_pop(RB_t* rb) {
 8005c76:	b480      	push	{r7}
 8005c78:	b085      	sub	sp, #20
 8005c7a:	af00      	add	r7, sp, #0
 8005c7c:	6078      	str	r0, [r7, #4]
  if (rb->rdpos == rb->wrpos) return EOF;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c86:	429a      	cmp	r2, r3
 8005c88:	d101      	bne.n	8005c8e <RB_pop+0x18>
 8005c8a:	23ff      	movs	r3, #255	; 0xff
 8005c8c:	e012      	b.n	8005cb4 <RB_pop+0x3e>

  uint8_t byte = rb->buffer[rb->rdpos];
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c92:	687a      	ldr	r2, [r7, #4]
 8005c94:	5cd3      	ldrb	r3, [r2, r3]
 8005c96:	73fb      	strb	r3, [r7, #15]
  rb->rdpos = (rb->rdpos + 1) % rb->size;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c9c:	3301      	adds	r3, #1
 8005c9e:	687a      	ldr	r2, [r7, #4]
 8005ca0:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 8005ca4:	fb93 f1f2 	sdiv	r1, r3, r2
 8005ca8:	fb01 f202 	mul.w	r2, r1, r2
 8005cac:	1a9a      	subs	r2, r3, r2
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	629a      	str	r2, [r3, #40]	; 0x28

  return byte;
 8005cb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	3714      	adds	r7, #20
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbe:	4770      	bx	lr

08005cc0 <RB_pushFront>:

void RB_pushFront(RB_t* rb, uint8_t byte) {
 8005cc0:	b480      	push	{r7}
 8005cc2:	b085      	sub	sp, #20
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
 8005cc8:	460b      	mov	r3, r1
 8005cca:	70fb      	strb	r3, [r7, #3]
  uint8_t newrpos = (rb->rdpos - 1) < 0 ? (rb->size - 1) : rb->rdpos - 1;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	dc05      	bgt.n	8005ce0 <RB_pushFront+0x20>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005cda:	3b01      	subs	r3, #1
 8005cdc:	b2db      	uxtb	r3, r3
 8005cde:	e004      	b.n	8005cea <RB_pushFront+0x2a>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ce4:	b2db      	uxtb	r3, r3
 8005ce6:	3b01      	subs	r3, #1
 8005ce8:	b2db      	uxtb	r3, r3
 8005cea:	73fb      	strb	r3, [r7, #15]

  if (newrpos == rb->wrpos) {
 8005cec:	7bfa      	ldrb	r2, [r7, #15]
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cf2:	429a      	cmp	r2, r3
 8005cf4:	d008      	beq.n	8005d08 <RB_pushFront+0x48>
    return;
  }

  rb->rdpos = newrpos;
 8005cf6:	7bfa      	ldrb	r2, [r7, #15]
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	629a      	str	r2, [r3, #40]	; 0x28
  rb->buffer[rb->rdpos] = byte;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d00:	687a      	ldr	r2, [r7, #4]
 8005d02:	78f9      	ldrb	r1, [r7, #3]
 8005d04:	54d1      	strb	r1, [r2, r3]
 8005d06:	e000      	b.n	8005d0a <RB_pushFront+0x4a>
    return;
 8005d08:	bf00      	nop
}
 8005d0a:	3714      	adds	r7, #20
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d12:	4770      	bx	lr

08005d14 <RB_size>:
  return rb->buffer[rb->wrpos];
}

uint8_t RB_capacity(RB_t* rb) { return rb->size; }

uint8_t RB_size(RB_t* rb) {
 8005d14:	b480      	push	{r7}
 8005d16:	b083      	sub	sp, #12
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
  return (rb->wrpos + rb->size - rb->rdpos) % rb->size;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d20:	687a      	ldr	r2, [r7, #4]
 8005d22:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 8005d26:	441a      	add	r2, r3
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d2c:	1ad3      	subs	r3, r2, r3
 8005d2e:	687a      	ldr	r2, [r7, #4]
 8005d30:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 8005d34:	fb93 f1f2 	sdiv	r1, r3, r2
 8005d38:	fb01 f202 	mul.w	r2, r1, r2
 8005d3c:	1a9b      	subs	r3, r3, r2
 8005d3e:	b2db      	uxtb	r3, r3
}
 8005d40:	4618      	mov	r0, r3
 8005d42:	370c      	adds	r7, #12
 8005d44:	46bd      	mov	sp, r7
 8005d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4a:	4770      	bx	lr

08005d4c <RB_clear>:

uint8_t RB_isFull(RB_t* rb) {
  return ((rb->wrpos + 1) % rb->size == rb->rdpos);
}

void RB_clear(RB_t* rb) {
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b082      	sub	sp, #8
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
  memset(rb->buffer, 0, sizeof(rb->buffer));
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2228      	movs	r2, #40	; 0x28
 8005d58:	2100      	movs	r1, #0
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	f00a f8c6 	bl	800feec <memset>
  rb->rdpos = 0;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2200      	movs	r2, #0
 8005d64:	629a      	str	r2, [r3, #40]	; 0x28
  rb->wrpos = 0;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2200      	movs	r2, #0
 8005d6a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005d6c:	bf00      	nop
 8005d6e:	3708      	adds	r7, #8
 8005d70:	46bd      	mov	sp, r7
 8005d72:	bd80      	pop	{r7, pc}

08005d74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b082      	sub	sp, #8
 8005d78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005d7a:	4b11      	ldr	r3, [pc, #68]	; (8005dc0 <HAL_MspInit+0x4c>)
 8005d7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d7e:	4a10      	ldr	r2, [pc, #64]	; (8005dc0 <HAL_MspInit+0x4c>)
 8005d80:	f043 0301 	orr.w	r3, r3, #1
 8005d84:	6613      	str	r3, [r2, #96]	; 0x60
 8005d86:	4b0e      	ldr	r3, [pc, #56]	; (8005dc0 <HAL_MspInit+0x4c>)
 8005d88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d8a:	f003 0301 	and.w	r3, r3, #1
 8005d8e:	607b      	str	r3, [r7, #4]
 8005d90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005d92:	4b0b      	ldr	r3, [pc, #44]	; (8005dc0 <HAL_MspInit+0x4c>)
 8005d94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d96:	4a0a      	ldr	r2, [pc, #40]	; (8005dc0 <HAL_MspInit+0x4c>)
 8005d98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d9c:	6593      	str	r3, [r2, #88]	; 0x58
 8005d9e:	4b08      	ldr	r3, [pc, #32]	; (8005dc0 <HAL_MspInit+0x4c>)
 8005da0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005da2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005da6:	603b      	str	r3, [r7, #0]
 8005da8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8005daa:	2200      	movs	r2, #0
 8005dac:	210f      	movs	r1, #15
 8005dae:	f06f 0001 	mvn.w	r0, #1
 8005db2:	f000 ff31 	bl	8006c18 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005db6:	bf00      	nop
 8005db8:	3708      	adds	r7, #8
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	bd80      	pop	{r7, pc}
 8005dbe:	bf00      	nop
 8005dc0:	40021000 	.word	0x40021000

08005dc4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b0b0      	sub	sp, #192	; 0xc0
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005dcc:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	601a      	str	r2, [r3, #0]
 8005dd4:	605a      	str	r2, [r3, #4]
 8005dd6:	609a      	str	r2, [r3, #8]
 8005dd8:	60da      	str	r2, [r3, #12]
 8005dda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005ddc:	f107 0318 	add.w	r3, r7, #24
 8005de0:	2294      	movs	r2, #148	; 0x94
 8005de2:	2100      	movs	r1, #0
 8005de4:	4618      	mov	r0, r3
 8005de6:	f00a f881 	bl	800feec <memset>
  if(hi2c->Instance==I2C2)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4a4a      	ldr	r2, [pc, #296]	; (8005f18 <HAL_I2C_MspInit+0x154>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d144      	bne.n	8005e7e <HAL_I2C_MspInit+0xba>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8005df4:	2380      	movs	r3, #128	; 0x80
 8005df6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8005df8:	2300      	movs	r3, #0
 8005dfa:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005dfc:	f107 0318 	add.w	r3, r7, #24
 8005e00:	4618      	mov	r0, r3
 8005e02:	f003 f8ad 	bl	8008f60 <HAL_RCCEx_PeriphCLKConfig>
 8005e06:	4603      	mov	r3, r0
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d001      	beq.n	8005e10 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8005e0c:	f7ff faf4 	bl	80053f8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005e10:	4b42      	ldr	r3, [pc, #264]	; (8005f1c <HAL_I2C_MspInit+0x158>)
 8005e12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e14:	4a41      	ldr	r2, [pc, #260]	; (8005f1c <HAL_I2C_MspInit+0x158>)
 8005e16:	f043 0302 	orr.w	r3, r3, #2
 8005e1a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005e1c:	4b3f      	ldr	r3, [pc, #252]	; (8005f1c <HAL_I2C_MspInit+0x158>)
 8005e1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e20:	f003 0302 	and.w	r3, r3, #2
 8005e24:	617b      	str	r3, [r7, #20]
 8005e26:	697b      	ldr	r3, [r7, #20]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8005e28:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005e2c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005e30:	2312      	movs	r3, #18
 8005e32:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e36:	2300      	movs	r3, #0
 8005e38:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005e3c:	2303      	movs	r3, #3
 8005e3e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8005e42:	2304      	movs	r3, #4
 8005e44:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005e48:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8005e4c:	4619      	mov	r1, r3
 8005e4e:	4834      	ldr	r0, [pc, #208]	; (8005f20 <HAL_I2C_MspInit+0x15c>)
 8005e50:	f000 ffc8 	bl	8006de4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8005e54:	4b31      	ldr	r3, [pc, #196]	; (8005f1c <HAL_I2C_MspInit+0x158>)
 8005e56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e58:	4a30      	ldr	r2, [pc, #192]	; (8005f1c <HAL_I2C_MspInit+0x158>)
 8005e5a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005e5e:	6593      	str	r3, [r2, #88]	; 0x58
 8005e60:	4b2e      	ldr	r3, [pc, #184]	; (8005f1c <HAL_I2C_MspInit+0x158>)
 8005e62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e64:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e68:	613b      	str	r3, [r7, #16]
 8005e6a:	693b      	ldr	r3, [r7, #16]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 5, 0);
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	2105      	movs	r1, #5
 8005e70:	2021      	movs	r0, #33	; 0x21
 8005e72:	f000 fed1 	bl	8006c18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8005e76:	2021      	movs	r0, #33	; 0x21
 8005e78:	f000 feea 	bl	8006c50 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8005e7c:	e048      	b.n	8005f10 <HAL_I2C_MspInit+0x14c>
  else if(hi2c->Instance==I2C1)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4a28      	ldr	r2, [pc, #160]	; (8005f24 <HAL_I2C_MspInit+0x160>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d143      	bne.n	8005f10 <HAL_I2C_MspInit+0x14c>
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8005e88:	2340      	movs	r3, #64	; 0x40
 8005e8a:	61bb      	str	r3, [r7, #24]
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	66fb      	str	r3, [r7, #108]	; 0x6c
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005e90:	f107 0318 	add.w	r3, r7, #24
 8005e94:	4618      	mov	r0, r3
 8005e96:	f003 f863 	bl	8008f60 <HAL_RCCEx_PeriphCLKConfig>
 8005e9a:	4603      	mov	r3, r0
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d001      	beq.n	8005ea4 <HAL_I2C_MspInit+0xe0>
	  Error_Handler();
 8005ea0:	f7ff faaa 	bl	80053f8 <Error_Handler>
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8005ea4:	4b1d      	ldr	r3, [pc, #116]	; (8005f1c <HAL_I2C_MspInit+0x158>)
 8005ea6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ea8:	4a1c      	ldr	r2, [pc, #112]	; (8005f1c <HAL_I2C_MspInit+0x158>)
 8005eaa:	f043 0302 	orr.w	r3, r3, #2
 8005eae:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005eb0:	4b1a      	ldr	r3, [pc, #104]	; (8005f1c <HAL_I2C_MspInit+0x158>)
 8005eb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005eb4:	f003 0302 	and.w	r3, r3, #2
 8005eb8:	60fb      	str	r3, [r7, #12]
 8005eba:	68fb      	ldr	r3, [r7, #12]
	GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8005ebc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005ec0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005ec4:	2312      	movs	r3, #18
 8005ec6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005eca:	2301      	movs	r3, #1
 8005ecc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005ed0:	2303      	movs	r3, #3
 8005ed2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005ed6:	2304      	movs	r3, #4
 8005ed8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005edc:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8005ee0:	4619      	mov	r1, r3
 8005ee2:	480f      	ldr	r0, [pc, #60]	; (8005f20 <HAL_I2C_MspInit+0x15c>)
 8005ee4:	f000 ff7e 	bl	8006de4 <HAL_GPIO_Init>
	__HAL_RCC_I2C1_CLK_ENABLE();
 8005ee8:	4b0c      	ldr	r3, [pc, #48]	; (8005f1c <HAL_I2C_MspInit+0x158>)
 8005eea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005eec:	4a0b      	ldr	r2, [pc, #44]	; (8005f1c <HAL_I2C_MspInit+0x158>)
 8005eee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005ef2:	6593      	str	r3, [r2, #88]	; 0x58
 8005ef4:	4b09      	ldr	r3, [pc, #36]	; (8005f1c <HAL_I2C_MspInit+0x158>)
 8005ef6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ef8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005efc:	60bb      	str	r3, [r7, #8]
 8005efe:	68bb      	ldr	r3, [r7, #8]
	HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8005f00:	2200      	movs	r2, #0
 8005f02:	2105      	movs	r1, #5
 8005f04:	201f      	movs	r0, #31
 8005f06:	f000 fe87 	bl	8006c18 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8005f0a:	201f      	movs	r0, #31
 8005f0c:	f000 fea0 	bl	8006c50 <HAL_NVIC_EnableIRQ>
}
 8005f10:	bf00      	nop
 8005f12:	37c0      	adds	r7, #192	; 0xc0
 8005f14:	46bd      	mov	sp, r7
 8005f16:	bd80      	pop	{r7, pc}
 8005f18:	40005800 	.word	0x40005800
 8005f1c:	40021000 	.word	0x40021000
 8005f20:	48000400 	.word	0x48000400
 8005f24:	40005400 	.word	0x40005400

08005f28 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b0b4      	sub	sp, #208	; 0xd0
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f30:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8005f34:	2200      	movs	r2, #0
 8005f36:	601a      	str	r2, [r3, #0]
 8005f38:	605a      	str	r2, [r3, #4]
 8005f3a:	609a      	str	r2, [r3, #8]
 8005f3c:	60da      	str	r2, [r3, #12]
 8005f3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005f40:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005f44:	2294      	movs	r2, #148	; 0x94
 8005f46:	2100      	movs	r1, #0
 8005f48:	4618      	mov	r0, r3
 8005f4a:	f009 ffcf 	bl	800feec <memset>
  if(huart->Instance==UART4)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4a8b      	ldr	r2, [pc, #556]	; (8006180 <HAL_UART_MspInit+0x258>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d144      	bne.n	8005fe2 <HAL_UART_MspInit+0xba>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8005f58:	2308      	movs	r3, #8
 8005f5a:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005f60:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005f64:	4618      	mov	r0, r3
 8005f66:	f002 fffb 	bl	8008f60 <HAL_RCCEx_PeriphCLKConfig>
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d001      	beq.n	8005f74 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8005f70:	f7ff fa42 	bl	80053f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8005f74:	4b83      	ldr	r3, [pc, #524]	; (8006184 <HAL_UART_MspInit+0x25c>)
 8005f76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f78:	4a82      	ldr	r2, [pc, #520]	; (8006184 <HAL_UART_MspInit+0x25c>)
 8005f7a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005f7e:	6593      	str	r3, [r2, #88]	; 0x58
 8005f80:	4b80      	ldr	r3, [pc, #512]	; (8006184 <HAL_UART_MspInit+0x25c>)
 8005f82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f84:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005f88:	627b      	str	r3, [r7, #36]	; 0x24
 8005f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005f8c:	4b7d      	ldr	r3, [pc, #500]	; (8006184 <HAL_UART_MspInit+0x25c>)
 8005f8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f90:	4a7c      	ldr	r2, [pc, #496]	; (8006184 <HAL_UART_MspInit+0x25c>)
 8005f92:	f043 0301 	orr.w	r3, r3, #1
 8005f96:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005f98:	4b7a      	ldr	r3, [pc, #488]	; (8006184 <HAL_UART_MspInit+0x25c>)
 8005f9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f9c:	f003 0301 	and.w	r3, r3, #1
 8005fa0:	623b      	str	r3, [r7, #32]
 8005fa2:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8005fa4:	2303      	movs	r3, #3
 8005fa6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005faa:	2302      	movs	r3, #2
 8005fac:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005fb6:	2303      	movs	r3, #3
 8005fb8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8005fbc:	2308      	movs	r3, #8
 8005fbe:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005fc2:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8005fc6:	4619      	mov	r1, r3
 8005fc8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005fcc:	f000 ff0a 	bl	8006de4 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	2105      	movs	r1, #5
 8005fd4:	2034      	movs	r0, #52	; 0x34
 8005fd6:	f000 fe1f 	bl	8006c18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8005fda:	2034      	movs	r0, #52	; 0x34
 8005fdc:	f000 fe38 	bl	8006c50 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8005fe0:	e0ca      	b.n	8006178 <HAL_UART_MspInit+0x250>
  else if(huart->Instance==USART1)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	4a68      	ldr	r2, [pc, #416]	; (8006188 <HAL_UART_MspInit+0x260>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d143      	bne.n	8006074 <HAL_UART_MspInit+0x14c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8005fec:	2301      	movs	r3, #1
 8005fee:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005ff4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	f002 ffb1 	bl	8008f60 <HAL_RCCEx_PeriphCLKConfig>
 8005ffe:	4603      	mov	r3, r0
 8006000:	2b00      	cmp	r3, #0
 8006002:	d001      	beq.n	8006008 <HAL_UART_MspInit+0xe0>
      Error_Handler();
 8006004:	f7ff f9f8 	bl	80053f8 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8006008:	4b5e      	ldr	r3, [pc, #376]	; (8006184 <HAL_UART_MspInit+0x25c>)
 800600a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800600c:	4a5d      	ldr	r2, [pc, #372]	; (8006184 <HAL_UART_MspInit+0x25c>)
 800600e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006012:	6613      	str	r3, [r2, #96]	; 0x60
 8006014:	4b5b      	ldr	r3, [pc, #364]	; (8006184 <HAL_UART_MspInit+0x25c>)
 8006016:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006018:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800601c:	61fb      	str	r3, [r7, #28]
 800601e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006020:	4b58      	ldr	r3, [pc, #352]	; (8006184 <HAL_UART_MspInit+0x25c>)
 8006022:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006024:	4a57      	ldr	r2, [pc, #348]	; (8006184 <HAL_UART_MspInit+0x25c>)
 8006026:	f043 0302 	orr.w	r3, r3, #2
 800602a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800602c:	4b55      	ldr	r3, [pc, #340]	; (8006184 <HAL_UART_MspInit+0x25c>)
 800602e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006030:	f003 0302 	and.w	r3, r3, #2
 8006034:	61bb      	str	r3, [r7, #24]
 8006036:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8006038:	23c0      	movs	r3, #192	; 0xc0
 800603a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800603e:	2302      	movs	r3, #2
 8006040:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006044:	2300      	movs	r3, #0
 8006046:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800604a:	2303      	movs	r3, #3
 800604c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006050:	2307      	movs	r3, #7
 8006052:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006056:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800605a:	4619      	mov	r1, r3
 800605c:	484b      	ldr	r0, [pc, #300]	; (800618c <HAL_UART_MspInit+0x264>)
 800605e:	f000 fec1 	bl	8006de4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8006062:	2200      	movs	r2, #0
 8006064:	2105      	movs	r1, #5
 8006066:	2025      	movs	r0, #37	; 0x25
 8006068:	f000 fdd6 	bl	8006c18 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART1_IRQn);
 800606c:	2025      	movs	r0, #37	; 0x25
 800606e:	f000 fdef 	bl	8006c50 <HAL_NVIC_EnableIRQ>
}
 8006072:	e081      	b.n	8006178 <HAL_UART_MspInit+0x250>
  else if(huart->Instance==USART2)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	4a45      	ldr	r2, [pc, #276]	; (8006190 <HAL_UART_MspInit+0x268>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d13b      	bne.n	80060f6 <HAL_UART_MspInit+0x1ce>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800607e:	2302      	movs	r3, #2
 8006080:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8006082:	2300      	movs	r3, #0
 8006084:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006086:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800608a:	4618      	mov	r0, r3
 800608c:	f002 ff68 	bl	8008f60 <HAL_RCCEx_PeriphCLKConfig>
 8006090:	4603      	mov	r3, r0
 8006092:	2b00      	cmp	r3, #0
 8006094:	d001      	beq.n	800609a <HAL_UART_MspInit+0x172>
      Error_Handler();
 8006096:	f7ff f9af 	bl	80053f8 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800609a:	4b3a      	ldr	r3, [pc, #232]	; (8006184 <HAL_UART_MspInit+0x25c>)
 800609c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800609e:	4a39      	ldr	r2, [pc, #228]	; (8006184 <HAL_UART_MspInit+0x25c>)
 80060a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80060a4:	6593      	str	r3, [r2, #88]	; 0x58
 80060a6:	4b37      	ldr	r3, [pc, #220]	; (8006184 <HAL_UART_MspInit+0x25c>)
 80060a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060ae:	617b      	str	r3, [r7, #20]
 80060b0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80060b2:	4b34      	ldr	r3, [pc, #208]	; (8006184 <HAL_UART_MspInit+0x25c>)
 80060b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060b6:	4a33      	ldr	r2, [pc, #204]	; (8006184 <HAL_UART_MspInit+0x25c>)
 80060b8:	f043 0308 	orr.w	r3, r3, #8
 80060bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80060be:	4b31      	ldr	r3, [pc, #196]	; (8006184 <HAL_UART_MspInit+0x25c>)
 80060c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060c2:	f003 0308 	and.w	r3, r3, #8
 80060c6:	613b      	str	r3, [r7, #16]
 80060c8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 80060ca:	2378      	movs	r3, #120	; 0x78
 80060cc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80060d0:	2302      	movs	r3, #2
 80060d2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060d6:	2300      	movs	r3, #0
 80060d8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80060dc:	2303      	movs	r3, #3
 80060de:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80060e2:	2307      	movs	r3, #7
 80060e4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80060e8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80060ec:	4619      	mov	r1, r3
 80060ee:	4829      	ldr	r0, [pc, #164]	; (8006194 <HAL_UART_MspInit+0x26c>)
 80060f0:	f000 fe78 	bl	8006de4 <HAL_GPIO_Init>
}
 80060f4:	e040      	b.n	8006178 <HAL_UART_MspInit+0x250>
  else if(huart->Instance==USART3)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	4a27      	ldr	r2, [pc, #156]	; (8006198 <HAL_UART_MspInit+0x270>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d13b      	bne.n	8006178 <HAL_UART_MspInit+0x250>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8006100:	2304      	movs	r3, #4
 8006102:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8006104:	2300      	movs	r3, #0
 8006106:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006108:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800610c:	4618      	mov	r0, r3
 800610e:	f002 ff27 	bl	8008f60 <HAL_RCCEx_PeriphCLKConfig>
 8006112:	4603      	mov	r3, r0
 8006114:	2b00      	cmp	r3, #0
 8006116:	d001      	beq.n	800611c <HAL_UART_MspInit+0x1f4>
      Error_Handler();
 8006118:	f7ff f96e 	bl	80053f8 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800611c:	4b19      	ldr	r3, [pc, #100]	; (8006184 <HAL_UART_MspInit+0x25c>)
 800611e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006120:	4a18      	ldr	r2, [pc, #96]	; (8006184 <HAL_UART_MspInit+0x25c>)
 8006122:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006126:	6593      	str	r3, [r2, #88]	; 0x58
 8006128:	4b16      	ldr	r3, [pc, #88]	; (8006184 <HAL_UART_MspInit+0x25c>)
 800612a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800612c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006130:	60fb      	str	r3, [r7, #12]
 8006132:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006134:	4b13      	ldr	r3, [pc, #76]	; (8006184 <HAL_UART_MspInit+0x25c>)
 8006136:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006138:	4a12      	ldr	r2, [pc, #72]	; (8006184 <HAL_UART_MspInit+0x25c>)
 800613a:	f043 0308 	orr.w	r3, r3, #8
 800613e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006140:	4b10      	ldr	r3, [pc, #64]	; (8006184 <HAL_UART_MspInit+0x25c>)
 8006142:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006144:	f003 0308 	and.w	r3, r3, #8
 8006148:	60bb      	str	r3, [r7, #8]
 800614a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 800614c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006150:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006154:	2302      	movs	r3, #2
 8006156:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800615a:	2300      	movs	r3, #0
 800615c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006160:	2303      	movs	r3, #3
 8006162:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8006166:	2307      	movs	r3, #7
 8006168:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800616c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8006170:	4619      	mov	r1, r3
 8006172:	4808      	ldr	r0, [pc, #32]	; (8006194 <HAL_UART_MspInit+0x26c>)
 8006174:	f000 fe36 	bl	8006de4 <HAL_GPIO_Init>
}
 8006178:	bf00      	nop
 800617a:	37d0      	adds	r7, #208	; 0xd0
 800617c:	46bd      	mov	sp, r7
 800617e:	bd80      	pop	{r7, pc}
 8006180:	40004c00 	.word	0x40004c00
 8006184:	40021000 	.word	0x40021000
 8006188:	40013800 	.word	0x40013800
 800618c:	48000400 	.word	0x48000400
 8006190:	40004400 	.word	0x40004400
 8006194:	48000c00 	.word	0x48000c00
 8006198:	40004800 	.word	0x40004800

0800619c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b08c      	sub	sp, #48	; 0x30
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80061a4:	2300      	movs	r3, #0
 80061a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80061aa:	4b2e      	ldr	r3, [pc, #184]	; (8006264 <HAL_InitTick+0xc8>)
 80061ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061ae:	4a2d      	ldr	r2, [pc, #180]	; (8006264 <HAL_InitTick+0xc8>)
 80061b0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80061b4:	6613      	str	r3, [r2, #96]	; 0x60
 80061b6:	4b2b      	ldr	r3, [pc, #172]	; (8006264 <HAL_InitTick+0xc8>)
 80061b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80061be:	60bb      	str	r3, [r7, #8]
 80061c0:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80061c2:	f107 020c 	add.w	r2, r7, #12
 80061c6:	f107 0310 	add.w	r3, r7, #16
 80061ca:	4611      	mov	r1, r2
 80061cc:	4618      	mov	r0, r3
 80061ce:	f002 fdd5 	bl	8008d7c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80061d2:	f002 fdbd 	bl	8008d50 <HAL_RCC_GetPCLK2Freq>
 80061d6:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80061d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061da:	4a23      	ldr	r2, [pc, #140]	; (8006268 <HAL_InitTick+0xcc>)
 80061dc:	fba2 2303 	umull	r2, r3, r2, r3
 80061e0:	0c9b      	lsrs	r3, r3, #18
 80061e2:	3b01      	subs	r3, #1
 80061e4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80061e6:	4b21      	ldr	r3, [pc, #132]	; (800626c <HAL_InitTick+0xd0>)
 80061e8:	4a21      	ldr	r2, [pc, #132]	; (8006270 <HAL_InitTick+0xd4>)
 80061ea:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80061ec:	4b1f      	ldr	r3, [pc, #124]	; (800626c <HAL_InitTick+0xd0>)
 80061ee:	f240 32e7 	movw	r2, #999	; 0x3e7
 80061f2:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80061f4:	4a1d      	ldr	r2, [pc, #116]	; (800626c <HAL_InitTick+0xd0>)
 80061f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061f8:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80061fa:	4b1c      	ldr	r3, [pc, #112]	; (800626c <HAL_InitTick+0xd0>)
 80061fc:	2200      	movs	r2, #0
 80061fe:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006200:	4b1a      	ldr	r3, [pc, #104]	; (800626c <HAL_InitTick+0xd0>)
 8006202:	2200      	movs	r2, #0
 8006204:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006206:	4b19      	ldr	r3, [pc, #100]	; (800626c <HAL_InitTick+0xd0>)
 8006208:	2200      	movs	r2, #0
 800620a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800620c:	4817      	ldr	r0, [pc, #92]	; (800626c <HAL_InitTick+0xd0>)
 800620e:	f003 fbbf 	bl	8009990 <HAL_TIM_Base_Init>
 8006212:	4603      	mov	r3, r0
 8006214:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8006218:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800621c:	2b00      	cmp	r3, #0
 800621e:	d11b      	bne.n	8006258 <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8006220:	4812      	ldr	r0, [pc, #72]	; (800626c <HAL_InitTick+0xd0>)
 8006222:	f003 fc17 	bl	8009a54 <HAL_TIM_Base_Start_IT>
 8006226:	4603      	mov	r3, r0
 8006228:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 800622c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006230:	2b00      	cmp	r3, #0
 8006232:	d111      	bne.n	8006258 <HAL_InitTick+0xbc>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8006234:	2019      	movs	r0, #25
 8006236:	f000 fd0b 	bl	8006c50 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2b0f      	cmp	r3, #15
 800623e:	d808      	bhi.n	8006252 <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8006240:	2200      	movs	r2, #0
 8006242:	6879      	ldr	r1, [r7, #4]
 8006244:	2019      	movs	r0, #25
 8006246:	f000 fce7 	bl	8006c18 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800624a:	4a0a      	ldr	r2, [pc, #40]	; (8006274 <HAL_InitTick+0xd8>)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6013      	str	r3, [r2, #0]
 8006250:	e002      	b.n	8006258 <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 8006252:	2301      	movs	r3, #1
 8006254:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8006258:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800625c:	4618      	mov	r0, r3
 800625e:	3730      	adds	r7, #48	; 0x30
 8006260:	46bd      	mov	sp, r7
 8006262:	bd80      	pop	{r7, pc}
 8006264:	40021000 	.word	0x40021000
 8006268:	431bde83 	.word	0x431bde83
 800626c:	2000040c 	.word	0x2000040c
 8006270:	40012c00 	.word	0x40012c00
 8006274:	20000014 	.word	0x20000014

08006278 <NMI_Handler>:

/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006278:	b480      	push	{r7}
 800627a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800627c:	e7fe      	b.n	800627c <NMI_Handler+0x4>

0800627e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800627e:	b480      	push	{r7}
 8006280:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006282:	e7fe      	b.n	8006282 <HardFault_Handler+0x4>

08006284 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006284:	b480      	push	{r7}
 8006286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006288:	e7fe      	b.n	8006288 <MemManage_Handler+0x4>

0800628a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800628a:	b480      	push	{r7}
 800628c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800628e:	e7fe      	b.n	800628e <BusFault_Handler+0x4>

08006290 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006290:	b480      	push	{r7}
 8006292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006294:	e7fe      	b.n	8006294 <UsageFault_Handler+0x4>

08006296 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006296:	b480      	push	{r7}
 8006298:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800629a:	bf00      	nop
 800629c:	46bd      	mov	sp, r7
 800629e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a2:	4770      	bx	lr

080062a4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 80062a8:	2020      	movs	r0, #32
 80062aa:	f000 ff5f 	bl	800716c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 80062ae:	2040      	movs	r0, #64	; 0x40
 80062b0:	f000 ff5c 	bl	800716c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 80062b4:	2080      	movs	r0, #128	; 0x80
 80062b6:	f000 ff59 	bl	800716c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 80062ba:	f44f 7080 	mov.w	r0, #256	; 0x100
 80062be:	f000 ff55 	bl	800716c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80062c2:	bf00      	nop
 80062c4:	bd80      	pop	{r7, pc}
	...

080062c8 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80062cc:	4802      	ldr	r0, [pc, #8]	; (80062d8 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80062ce:	f003 fc31 	bl	8009b34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80062d2:	bf00      	nop
 80062d4:	bd80      	pop	{r7, pc}
 80062d6:	bf00      	nop
 80062d8:	2000040c 	.word	0x2000040c

080062dc <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80062e0:	4802      	ldr	r0, [pc, #8]	; (80062ec <I2C1_EV_IRQHandler+0x10>)
 80062e2:	f001 fb17 	bl	8007914 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80062e6:	bf00      	nop
 80062e8:	bd80      	pop	{r7, pc}
 80062ea:	bf00      	nop
 80062ec:	20000290 	.word	0x20000290

080062f0 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 80062f4:	4802      	ldr	r0, [pc, #8]	; (8006300 <I2C2_EV_IRQHandler+0x10>)
 80062f6:	f001 fb0d 	bl	8007914 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 80062fa:	bf00      	nop
 80062fc:	bd80      	pop	{r7, pc}
 80062fe:	bf00      	nop
 8006300:	20000364 	.word	0x20000364

08006304 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8006308:	4802      	ldr	r0, [pc, #8]	; (8006314 <USART1_IRQHandler+0x10>)
 800630a:	f003 ff51 	bl	800a1b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800630e:	bf00      	nop
 8006310:	bd80      	pop	{r7, pc}
 8006312:	bf00      	nop
 8006314:	2000045c 	.word	0x2000045c

08006318 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800631c:	4802      	ldr	r0, [pc, #8]	; (8006328 <UART4_IRQHandler+0x10>)
 800631e:	f003 ff47 	bl	800a1b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8006322:	bf00      	nop
 8006324:	bd80      	pop	{r7, pc}
 8006326:	bf00      	nop
 8006328:	200004ec 	.word	0x200004ec

0800632c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800632c:	b580      	push	{r7, lr}
 800632e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI10_Pin);
 8006330:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8006334:	f000 ff1a 	bl	800716c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8006338:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800633c:	f000 ff16 	bl	800716c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(USB_OTG_FS_PWR_EN_Pin);
 8006340:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8006344:	f000 ff12 	bl	800716c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 8006348:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800634c:	f000 ff0e 	bl	800716c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 8006350:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8006354:	f000 ff0a 	bl	800716c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 8006358:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800635c:	f000 ff06 	bl	800716c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8006360:	bf00      	nop
 8006362:	bd80      	pop	{r7, pc}

08006364 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8006364:	b480      	push	{r7}
 8006366:	af00      	add	r7, sp, #0
  return 1;
 8006368:	2301      	movs	r3, #1
}
 800636a:	4618      	mov	r0, r3
 800636c:	46bd      	mov	sp, r7
 800636e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006372:	4770      	bx	lr

08006374 <_kill>:

int _kill(int pid, int sig)
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b082      	sub	sp, #8
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
 800637c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800637e:	f009 fd7d 	bl	800fe7c <__errno>
 8006382:	4603      	mov	r3, r0
 8006384:	2216      	movs	r2, #22
 8006386:	601a      	str	r2, [r3, #0]
  return -1;
 8006388:	f04f 33ff 	mov.w	r3, #4294967295
}
 800638c:	4618      	mov	r0, r3
 800638e:	3708      	adds	r7, #8
 8006390:	46bd      	mov	sp, r7
 8006392:	bd80      	pop	{r7, pc}

08006394 <_exit>:

void _exit (int status)
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b082      	sub	sp, #8
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800639c:	f04f 31ff 	mov.w	r1, #4294967295
 80063a0:	6878      	ldr	r0, [r7, #4]
 80063a2:	f7ff ffe7 	bl	8006374 <_kill>
  while (1) {}    /* Make sure we hang here */
 80063a6:	e7fe      	b.n	80063a6 <_exit+0x12>

080063a8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b086      	sub	sp, #24
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	60f8      	str	r0, [r7, #12]
 80063b0:	60b9      	str	r1, [r7, #8]
 80063b2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80063b4:	2300      	movs	r3, #0
 80063b6:	617b      	str	r3, [r7, #20]
 80063b8:	e00a      	b.n	80063d0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80063ba:	f3af 8000 	nop.w
 80063be:	4601      	mov	r1, r0
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	1c5a      	adds	r2, r3, #1
 80063c4:	60ba      	str	r2, [r7, #8]
 80063c6:	b2ca      	uxtb	r2, r1
 80063c8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80063ca:	697b      	ldr	r3, [r7, #20]
 80063cc:	3301      	adds	r3, #1
 80063ce:	617b      	str	r3, [r7, #20]
 80063d0:	697a      	ldr	r2, [r7, #20]
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	429a      	cmp	r2, r3
 80063d6:	dbf0      	blt.n	80063ba <_read+0x12>
  }

  return len;
 80063d8:	687b      	ldr	r3, [r7, #4]
}
 80063da:	4618      	mov	r0, r3
 80063dc:	3718      	adds	r7, #24
 80063de:	46bd      	mov	sp, r7
 80063e0:	bd80      	pop	{r7, pc}

080063e2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80063e2:	b580      	push	{r7, lr}
 80063e4:	b086      	sub	sp, #24
 80063e6:	af00      	add	r7, sp, #0
 80063e8:	60f8      	str	r0, [r7, #12]
 80063ea:	60b9      	str	r1, [r7, #8]
 80063ec:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80063ee:	2300      	movs	r3, #0
 80063f0:	617b      	str	r3, [r7, #20]
 80063f2:	e009      	b.n	8006408 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80063f4:	68bb      	ldr	r3, [r7, #8]
 80063f6:	1c5a      	adds	r2, r3, #1
 80063f8:	60ba      	str	r2, [r7, #8]
 80063fa:	781b      	ldrb	r3, [r3, #0]
 80063fc:	4618      	mov	r0, r3
 80063fe:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006402:	697b      	ldr	r3, [r7, #20]
 8006404:	3301      	adds	r3, #1
 8006406:	617b      	str	r3, [r7, #20]
 8006408:	697a      	ldr	r2, [r7, #20]
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	429a      	cmp	r2, r3
 800640e:	dbf1      	blt.n	80063f4 <_write+0x12>
  }
  return len;
 8006410:	687b      	ldr	r3, [r7, #4]
}
 8006412:	4618      	mov	r0, r3
 8006414:	3718      	adds	r7, #24
 8006416:	46bd      	mov	sp, r7
 8006418:	bd80      	pop	{r7, pc}

0800641a <_close>:

int _close(int file)
{
 800641a:	b480      	push	{r7}
 800641c:	b083      	sub	sp, #12
 800641e:	af00      	add	r7, sp, #0
 8006420:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8006422:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006426:	4618      	mov	r0, r3
 8006428:	370c      	adds	r7, #12
 800642a:	46bd      	mov	sp, r7
 800642c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006430:	4770      	bx	lr

08006432 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8006432:	b480      	push	{r7}
 8006434:	b083      	sub	sp, #12
 8006436:	af00      	add	r7, sp, #0
 8006438:	6078      	str	r0, [r7, #4]
 800643a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006442:	605a      	str	r2, [r3, #4]
  return 0;
 8006444:	2300      	movs	r3, #0
}
 8006446:	4618      	mov	r0, r3
 8006448:	370c      	adds	r7, #12
 800644a:	46bd      	mov	sp, r7
 800644c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006450:	4770      	bx	lr

08006452 <_isatty>:

int _isatty(int file)
{
 8006452:	b480      	push	{r7}
 8006454:	b083      	sub	sp, #12
 8006456:	af00      	add	r7, sp, #0
 8006458:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800645a:	2301      	movs	r3, #1
}
 800645c:	4618      	mov	r0, r3
 800645e:	370c      	adds	r7, #12
 8006460:	46bd      	mov	sp, r7
 8006462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006466:	4770      	bx	lr

08006468 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006468:	b480      	push	{r7}
 800646a:	b085      	sub	sp, #20
 800646c:	af00      	add	r7, sp, #0
 800646e:	60f8      	str	r0, [r7, #12]
 8006470:	60b9      	str	r1, [r7, #8]
 8006472:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8006474:	2300      	movs	r3, #0
}
 8006476:	4618      	mov	r0, r3
 8006478:	3714      	adds	r7, #20
 800647a:	46bd      	mov	sp, r7
 800647c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006480:	4770      	bx	lr
	...

08006484 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b086      	sub	sp, #24
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800648c:	4a14      	ldr	r2, [pc, #80]	; (80064e0 <_sbrk+0x5c>)
 800648e:	4b15      	ldr	r3, [pc, #84]	; (80064e4 <_sbrk+0x60>)
 8006490:	1ad3      	subs	r3, r2, r3
 8006492:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006494:	697b      	ldr	r3, [r7, #20]
 8006496:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006498:	4b13      	ldr	r3, [pc, #76]	; (80064e8 <_sbrk+0x64>)
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d102      	bne.n	80064a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80064a0:	4b11      	ldr	r3, [pc, #68]	; (80064e8 <_sbrk+0x64>)
 80064a2:	4a12      	ldr	r2, [pc, #72]	; (80064ec <_sbrk+0x68>)
 80064a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80064a6:	4b10      	ldr	r3, [pc, #64]	; (80064e8 <_sbrk+0x64>)
 80064a8:	681a      	ldr	r2, [r3, #0]
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	4413      	add	r3, r2
 80064ae:	693a      	ldr	r2, [r7, #16]
 80064b0:	429a      	cmp	r2, r3
 80064b2:	d207      	bcs.n	80064c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80064b4:	f009 fce2 	bl	800fe7c <__errno>
 80064b8:	4603      	mov	r3, r0
 80064ba:	220c      	movs	r2, #12
 80064bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80064be:	f04f 33ff 	mov.w	r3, #4294967295
 80064c2:	e009      	b.n	80064d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80064c4:	4b08      	ldr	r3, [pc, #32]	; (80064e8 <_sbrk+0x64>)
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80064ca:	4b07      	ldr	r3, [pc, #28]	; (80064e8 <_sbrk+0x64>)
 80064cc:	681a      	ldr	r2, [r3, #0]
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	4413      	add	r3, r2
 80064d2:	4a05      	ldr	r2, [pc, #20]	; (80064e8 <_sbrk+0x64>)
 80064d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80064d6:	68fb      	ldr	r3, [r7, #12]
}
 80064d8:	4618      	mov	r0, r3
 80064da:	3718      	adds	r7, #24
 80064dc:	46bd      	mov	sp, r7
 80064de:	bd80      	pop	{r7, pc}
 80064e0:	200a0000 	.word	0x200a0000
 80064e4:	00000400 	.word	0x00000400
 80064e8:	20000458 	.word	0x20000458
 80064ec:	20006350 	.word	0x20006350

080064f0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80064f0:	b480      	push	{r7}
 80064f2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80064f4:	4b06      	ldr	r3, [pc, #24]	; (8006510 <SystemInit+0x20>)
 80064f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064fa:	4a05      	ldr	r2, [pc, #20]	; (8006510 <SystemInit+0x20>)
 80064fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006500:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8006504:	bf00      	nop
 8006506:	46bd      	mov	sp, r7
 8006508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650c:	4770      	bx	lr
 800650e:	bf00      	nop
 8006510:	e000ed00 	.word	0xe000ed00

08006514 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 8006514:	b580      	push	{r7, lr}
 8006516:	af00      	add	r7, sp, #0
  huart1.Instance = USART1;
 8006518:	4b24      	ldr	r3, [pc, #144]	; (80065ac <MX_USART1_UART_Init+0x98>)
 800651a:	4a25      	ldr	r2, [pc, #148]	; (80065b0 <MX_USART1_UART_Init+0x9c>)
 800651c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 921600;
 800651e:	4b23      	ldr	r3, [pc, #140]	; (80065ac <MX_USART1_UART_Init+0x98>)
 8006520:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8006524:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8006526:	4b21      	ldr	r3, [pc, #132]	; (80065ac <MX_USART1_UART_Init+0x98>)
 8006528:	2200      	movs	r2, #0
 800652a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800652c:	4b1f      	ldr	r3, [pc, #124]	; (80065ac <MX_USART1_UART_Init+0x98>)
 800652e:	2200      	movs	r2, #0
 8006530:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8006532:	4b1e      	ldr	r3, [pc, #120]	; (80065ac <MX_USART1_UART_Init+0x98>)
 8006534:	2200      	movs	r2, #0
 8006536:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8006538:	4b1c      	ldr	r3, [pc, #112]	; (80065ac <MX_USART1_UART_Init+0x98>)
 800653a:	220c      	movs	r2, #12
 800653c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800653e:	4b1b      	ldr	r3, [pc, #108]	; (80065ac <MX_USART1_UART_Init+0x98>)
 8006540:	2200      	movs	r2, #0
 8006542:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8006544:	4b19      	ldr	r3, [pc, #100]	; (80065ac <MX_USART1_UART_Init+0x98>)
 8006546:	2200      	movs	r2, #0
 8006548:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800654a:	4b18      	ldr	r3, [pc, #96]	; (80065ac <MX_USART1_UART_Init+0x98>)
 800654c:	2200      	movs	r2, #0
 800654e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8006550:	4b16      	ldr	r3, [pc, #88]	; (80065ac <MX_USART1_UART_Init+0x98>)
 8006552:	2200      	movs	r2, #0
 8006554:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006556:	4b15      	ldr	r3, [pc, #84]	; (80065ac <MX_USART1_UART_Init+0x98>)
 8006558:	2200      	movs	r2, #0
 800655a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800655c:	4813      	ldr	r0, [pc, #76]	; (80065ac <MX_USART1_UART_Init+0x98>)
 800655e:	f003 fce9 	bl	8009f34 <HAL_UART_Init>
 8006562:	4603      	mov	r3, r0
 8006564:	2b00      	cmp	r3, #0
 8006566:	d001      	beq.n	800656c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8006568:	f7fe ff46 	bl	80053f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800656c:	2100      	movs	r1, #0
 800656e:	480f      	ldr	r0, [pc, #60]	; (80065ac <MX_USART1_UART_Init+0x98>)
 8006570:	f005 fc95 	bl	800be9e <HAL_UARTEx_SetTxFifoThreshold>
 8006574:	4603      	mov	r3, r0
 8006576:	2b00      	cmp	r3, #0
 8006578:	d001      	beq.n	800657e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800657a:	f7fe ff3d 	bl	80053f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800657e:	2100      	movs	r1, #0
 8006580:	480a      	ldr	r0, [pc, #40]	; (80065ac <MX_USART1_UART_Init+0x98>)
 8006582:	f005 fcca 	bl	800bf1a <HAL_UARTEx_SetRxFifoThreshold>
 8006586:	4603      	mov	r3, r0
 8006588:	2b00      	cmp	r3, #0
 800658a:	d001      	beq.n	8006590 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800658c:	f7fe ff34 	bl	80053f8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8006590:	4806      	ldr	r0, [pc, #24]	; (80065ac <MX_USART1_UART_Init+0x98>)
 8006592:	f005 fc4b 	bl	800be2c <HAL_UARTEx_DisableFifoMode>
 8006596:	4603      	mov	r3, r0
 8006598:	2b00      	cmp	r3, #0
 800659a:	d001      	beq.n	80065a0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800659c:	f7fe ff2c 	bl	80053f8 <Error_Handler>
  }
  RB_init(&uart1RXrb, RB_SIZE);
 80065a0:	2128      	movs	r1, #40	; 0x28
 80065a2:	4804      	ldr	r0, [pc, #16]	; (80065b4 <MX_USART1_UART_Init+0xa0>)
 80065a4:	f7ff fb19 	bl	8005bda <RB_init>

}
 80065a8:	bf00      	nop
 80065aa:	bd80      	pop	{r7, pc}
 80065ac:	2000045c 	.word	0x2000045c
 80065b0:	40013800 	.word	0x40013800
 80065b4:	200005b0 	.word	0x200005b0

080065b8 <MX_UART4_Init>:

void MX_UART4_Init(void)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	af00      	add	r7, sp, #0

  huart4.Instance = UART4;
 80065bc:	4b26      	ldr	r3, [pc, #152]	; (8006658 <MX_UART4_Init+0xa0>)
 80065be:	4a27      	ldr	r2, [pc, #156]	; (800665c <MX_UART4_Init+0xa4>)
 80065c0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 921600;
 80065c2:	4b25      	ldr	r3, [pc, #148]	; (8006658 <MX_UART4_Init+0xa0>)
 80065c4:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 80065c8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80065ca:	4b23      	ldr	r3, [pc, #140]	; (8006658 <MX_UART4_Init+0xa0>)
 80065cc:	2200      	movs	r2, #0
 80065ce:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80065d0:	4b21      	ldr	r3, [pc, #132]	; (8006658 <MX_UART4_Init+0xa0>)
 80065d2:	2200      	movs	r2, #0
 80065d4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80065d6:	4b20      	ldr	r3, [pc, #128]	; (8006658 <MX_UART4_Init+0xa0>)
 80065d8:	2200      	movs	r2, #0
 80065da:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80065dc:	4b1e      	ldr	r3, [pc, #120]	; (8006658 <MX_UART4_Init+0xa0>)
 80065de:	220c      	movs	r2, #12
 80065e0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80065e2:	4b1d      	ldr	r3, [pc, #116]	; (8006658 <MX_UART4_Init+0xa0>)
 80065e4:	2200      	movs	r2, #0
 80065e6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80065e8:	4b1b      	ldr	r3, [pc, #108]	; (8006658 <MX_UART4_Init+0xa0>)
 80065ea:	2200      	movs	r2, #0
 80065ec:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80065ee:	4b1a      	ldr	r3, [pc, #104]	; (8006658 <MX_UART4_Init+0xa0>)
 80065f0:	2200      	movs	r2, #0
 80065f2:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80065f4:	4b18      	ldr	r3, [pc, #96]	; (8006658 <MX_UART4_Init+0xa0>)
 80065f6:	2200      	movs	r2, #0
 80065f8:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80065fa:	4b17      	ldr	r3, [pc, #92]	; (8006658 <MX_UART4_Init+0xa0>)
 80065fc:	2200      	movs	r2, #0
 80065fe:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8006600:	4815      	ldr	r0, [pc, #84]	; (8006658 <MX_UART4_Init+0xa0>)
 8006602:	f003 fc97 	bl	8009f34 <HAL_UART_Init>
 8006606:	4603      	mov	r3, r0
 8006608:	2b00      	cmp	r3, #0
 800660a:	d001      	beq.n	8006610 <MX_UART4_Init+0x58>
  {
    error_Handler();
 800660c:	f000 f82c 	bl	8006668 <error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006610:	2100      	movs	r1, #0
 8006612:	4811      	ldr	r0, [pc, #68]	; (8006658 <MX_UART4_Init+0xa0>)
 8006614:	f005 fc43 	bl	800be9e <HAL_UARTEx_SetTxFifoThreshold>
 8006618:	4603      	mov	r3, r0
 800661a:	2b00      	cmp	r3, #0
 800661c:	d001      	beq.n	8006622 <MX_UART4_Init+0x6a>
  {
    error_Handler();
 800661e:	f000 f823 	bl	8006668 <error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006622:	2100      	movs	r1, #0
 8006624:	480c      	ldr	r0, [pc, #48]	; (8006658 <MX_UART4_Init+0xa0>)
 8006626:	f005 fc78 	bl	800bf1a <HAL_UARTEx_SetRxFifoThreshold>
 800662a:	4603      	mov	r3, r0
 800662c:	2b00      	cmp	r3, #0
 800662e:	d001      	beq.n	8006634 <MX_UART4_Init+0x7c>
  {
    error_Handler();
 8006630:	f000 f81a 	bl	8006668 <error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8006634:	4808      	ldr	r0, [pc, #32]	; (8006658 <MX_UART4_Init+0xa0>)
 8006636:	f005 fbf9 	bl	800be2c <HAL_UARTEx_DisableFifoMode>
 800663a:	4603      	mov	r3, r0
 800663c:	2b00      	cmp	r3, #0
 800663e:	d001      	beq.n	8006644 <MX_UART4_Init+0x8c>
  {
    error_Handler();
 8006640:	f000 f812 	bl	8006668 <error_Handler>
  }
  RB_init(&uart4RXrb, RB_SIZE);
 8006644:	2128      	movs	r1, #40	; 0x28
 8006646:	4806      	ldr	r0, [pc, #24]	; (8006660 <MX_UART4_Init+0xa8>)
 8006648:	f7ff fac7 	bl	8005bda <RB_init>
  uart_write_debug("UART4 initialized\r\n", 10);
 800664c:	210a      	movs	r1, #10
 800664e:	4805      	ldr	r0, [pc, #20]	; (8006664 <MX_UART4_Init+0xac>)
 8006650:	f000 f83c 	bl	80066cc <uart_write_debug>

}
 8006654:	bf00      	nop
 8006656:	bd80      	pop	{r7, pc}
 8006658:	200004ec 	.word	0x200004ec
 800665c:	40004c00 	.word	0x40004c00
 8006660:	2000057c 	.word	0x2000057c
 8006664:	080145b0 	.word	0x080145b0

08006668 <error_Handler>:

void error_Handler(void){
 8006668:	b580      	push	{r7, lr}
 800666a:	af00      	add	r7, sp, #0
	uart_write_debug("Failed to Init UART4\r\n", 10);
 800666c:	210a      	movs	r1, #10
 800666e:	4802      	ldr	r0, [pc, #8]	; (8006678 <error_Handler+0x10>)
 8006670:	f000 f82c 	bl	80066cc <uart_write_debug>
}
 8006674:	bf00      	nop
 8006676:	bd80      	pop	{r7, pc}
 8006678:	080145c4 	.word	0x080145c4

0800667c <uart_receive_it>:


HAL_StatusTypeDef uart_receive_it(UART_select device){
 800667c:	b580      	push	{r7, lr}
 800667e:	b084      	sub	sp, #16
 8006680:	af00      	add	r7, sp, #0
 8006682:	4603      	mov	r3, r0
 8006684:	71fb      	strb	r3, [r7, #7]
	UART_HandleTypeDef *huart;

	switch (device){
 8006686:	79fb      	ldrb	r3, [r7, #7]
 8006688:	2b02      	cmp	r3, #2
 800668a:	d00c      	beq.n	80066a6 <uart_receive_it+0x2a>
 800668c:	2b02      	cmp	r3, #2
 800668e:	dc0d      	bgt.n	80066ac <uart_receive_it+0x30>
 8006690:	2b00      	cmp	r3, #0
 8006692:	d002      	beq.n	800669a <uart_receive_it+0x1e>
 8006694:	2b01      	cmp	r3, #1
 8006696:	d003      	beq.n	80066a0 <uart_receive_it+0x24>
 8006698:	e008      	b.n	80066ac <uart_receive_it+0x30>
	case UART_DEBUG:
		huart = &huart1;
 800669a:	4b09      	ldr	r3, [pc, #36]	; (80066c0 <uart_receive_it+0x44>)
 800669c:	60fb      	str	r3, [r7, #12]
		break;
 800669e:	e005      	b.n	80066ac <uart_receive_it+0x30>
	case UART_NYX:
		huart = &huart4;
 80066a0:	4b08      	ldr	r3, [pc, #32]	; (80066c4 <uart_receive_it+0x48>)
 80066a2:	60fb      	str	r3, [r7, #12]
		break;
 80066a4:	e002      	b.n	80066ac <uart_receive_it+0x30>
	case UART_IRIS:
		huart = &huart1;
 80066a6:	4b06      	ldr	r3, [pc, #24]	; (80066c0 <uart_receive_it+0x44>)
 80066a8:	60fb      	str	r3, [r7, #12]
		break;
 80066aa:	bf00      	nop
	}
	return HAL_UART_Receive_IT(huart, &rxChar, 1);
 80066ac:	2201      	movs	r2, #1
 80066ae:	4906      	ldr	r1, [pc, #24]	; (80066c8 <uart_receive_it+0x4c>)
 80066b0:	68f8      	ldr	r0, [r7, #12]
 80066b2:	f003 fd27 	bl	800a104 <HAL_UART_Receive_IT>
 80066b6:	4603      	mov	r3, r0
}
 80066b8:	4618      	mov	r0, r3
 80066ba:	3710      	adds	r7, #16
 80066bc:	46bd      	mov	sp, r7
 80066be:	bd80      	pop	{r7, pc}
 80066c0:	2000045c 	.word	0x2000045c
 80066c4:	200004ec 	.word	0x200004ec
 80066c8:	200005e4 	.word	0x200005e4

080066cc <uart_write_debug>:




HAL_StatusTypeDef uart_write_debug(uint8_t *pData, uint32_t Timeout){
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b082      	sub	sp, #8
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
 80066d4:	6039      	str	r1, [r7, #0]
	return HAL_UART_Transmit(&huart1,pData,strlen(pData),Timeout);// Sending in normal mode
 80066d6:	6878      	ldr	r0, [r7, #4]
 80066d8:	f7f9 fd92 	bl	8000200 <strlen>
 80066dc:	4603      	mov	r3, r0
 80066de:	b29a      	uxth	r2, r3
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	6879      	ldr	r1, [r7, #4]
 80066e4:	4803      	ldr	r0, [pc, #12]	; (80066f4 <uart_write_debug+0x28>)
 80066e6:	f003 fc75 	bl	8009fd4 <HAL_UART_Transmit>
 80066ea:	4603      	mov	r3, r0
}
 80066ec:	4618      	mov	r0, r3
 80066ee:	3708      	adds	r7, #8
 80066f0:	46bd      	mov	sp, r7
 80066f2:	bd80      	pop	{r7, pc}
 80066f4:	2000045c 	.word	0x2000045c

080066f8 <uart_write>:

HAL_StatusTypeDef uart_write(uint8_t *pData, uint8_t len, UART_select device, uint32_t Timeout){
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b086      	sub	sp, #24
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	60f8      	str	r0, [r7, #12]
 8006700:	607b      	str	r3, [r7, #4]
 8006702:	460b      	mov	r3, r1
 8006704:	72fb      	strb	r3, [r7, #11]
 8006706:	4613      	mov	r3, r2
 8006708:	72bb      	strb	r3, [r7, #10]
	UART_HandleTypeDef *huart;
	switch (device){
 800670a:	7abb      	ldrb	r3, [r7, #10]
 800670c:	2b02      	cmp	r3, #2
 800670e:	d00c      	beq.n	800672a <uart_write+0x32>
 8006710:	2b02      	cmp	r3, #2
 8006712:	dc0d      	bgt.n	8006730 <uart_write+0x38>
 8006714:	2b00      	cmp	r3, #0
 8006716:	d002      	beq.n	800671e <uart_write+0x26>
 8006718:	2b01      	cmp	r3, #1
 800671a:	d003      	beq.n	8006724 <uart_write+0x2c>
 800671c:	e008      	b.n	8006730 <uart_write+0x38>
	case UART_DEBUG:
		huart = &huart1;
 800671e:	4b12      	ldr	r3, [pc, #72]	; (8006768 <uart_write+0x70>)
 8006720:	617b      	str	r3, [r7, #20]
		break;
 8006722:	e005      	b.n	8006730 <uart_write+0x38>
	case UART_NYX:
		huart = &huart4;
 8006724:	4b11      	ldr	r3, [pc, #68]	; (800676c <uart_write+0x74>)
 8006726:	617b      	str	r3, [r7, #20]
		break;
 8006728:	e002      	b.n	8006730 <uart_write+0x38>
	case UART_IRIS:
		huart = &huart1;
 800672a:	4b0f      	ldr	r3, [pc, #60]	; (8006768 <uart_write+0x70>)
 800672c:	617b      	str	r3, [r7, #20]
		break;
 800672e:	bf00      	nop
	}
	if (len == 0){
 8006730:	7afb      	ldrb	r3, [r7, #11]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d10b      	bne.n	800674e <uart_write+0x56>
		return HAL_UART_Transmit(huart,pData,strlen(pData),Timeout);// Sending in normal mode
 8006736:	68f8      	ldr	r0, [r7, #12]
 8006738:	f7f9 fd62 	bl	8000200 <strlen>
 800673c:	4603      	mov	r3, r0
 800673e:	b29a      	uxth	r2, r3
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	68f9      	ldr	r1, [r7, #12]
 8006744:	6978      	ldr	r0, [r7, #20]
 8006746:	f003 fc45 	bl	8009fd4 <HAL_UART_Transmit>
 800674a:	4603      	mov	r3, r0
 800674c:	e007      	b.n	800675e <uart_write+0x66>
	}
	return HAL_UART_Transmit(huart,pData,len,Timeout);// Sending in normal mode
 800674e:	7afb      	ldrb	r3, [r7, #11]
 8006750:	b29a      	uxth	r2, r3
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	68f9      	ldr	r1, [r7, #12]
 8006756:	6978      	ldr	r0, [r7, #20]
 8006758:	f003 fc3c 	bl	8009fd4 <HAL_UART_Transmit>
 800675c:	4603      	mov	r3, r0
}
 800675e:	4618      	mov	r0, r3
 8006760:	3718      	adds	r7, #24
 8006762:	46bd      	mov	sp, r7
 8006764:	bd80      	pop	{r7, pc}
 8006766:	bf00      	nop
 8006768:	2000045c 	.word	0x2000045c
 800676c:	200004ec 	.word	0x200004ec

08006770 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b084      	sub	sp, #16
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
	if (UartHandle->Instance == UART4)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	4a7c      	ldr	r2, [pc, #496]	; (8006970 <HAL_UART_RxCpltCallback+0x200>)
 800677e:	4293      	cmp	r3, r2
 8006780:	f040 80a2 	bne.w	80068c8 <HAL_UART_RxCpltCallback+0x158>
	{
		if (ack_rcv_flag == 1){
 8006784:	4b7b      	ldr	r3, [pc, #492]	; (8006974 <HAL_UART_RxCpltCallback+0x204>)
 8006786:	781b      	ldrb	r3, [r3, #0]
 8006788:	2b01      	cmp	r3, #1
 800678a:	d129      	bne.n	80067e0 <HAL_UART_RxCpltCallback+0x70>
			if ((rxChar != ESC) && (prvRxChar == ACK)){
 800678c:	4b7a      	ldr	r3, [pc, #488]	; (8006978 <HAL_UART_RxCpltCallback+0x208>)
 800678e:	781b      	ldrb	r3, [r3, #0]
 8006790:	2b1b      	cmp	r3, #27
 8006792:	d010      	beq.n	80067b6 <HAL_UART_RxCpltCallback+0x46>
 8006794:	4b79      	ldr	r3, [pc, #484]	; (800697c <HAL_UART_RxCpltCallback+0x20c>)
 8006796:	781b      	ldrb	r3, [r3, #0]
 8006798:	2b06      	cmp	r3, #6
 800679a:	d10c      	bne.n	80067b6 <HAL_UART_RxCpltCallback+0x46>
				osEventFlagsSet(ack_rcvd, ACK_FLAG);
 800679c:	4b78      	ldr	r3, [pc, #480]	; (8006980 <HAL_UART_RxCpltCallback+0x210>)
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	2101      	movs	r1, #1
 80067a2:	4618      	mov	r0, r3
 80067a4:	f005 fdc0 	bl	800c328 <osEventFlagsSet>
				prvRxChar = 0x00;
 80067a8:	4b74      	ldr	r3, [pc, #464]	; (800697c <HAL_UART_RxCpltCallback+0x20c>)
 80067aa:	2200      	movs	r2, #0
 80067ac:	701a      	strb	r2, [r3, #0]
				ack_rcv_flag = 0;
 80067ae:	4b71      	ldr	r3, [pc, #452]	; (8006974 <HAL_UART_RxCpltCallback+0x204>)
 80067b0:	2200      	movs	r2, #0
 80067b2:	701a      	strb	r2, [r3, #0]
 80067b4:	e082      	b.n	80068bc <HAL_UART_RxCpltCallback+0x14c>
			}
			else if ((rxChar != ESC) && (prvRxChar == NACK)){
 80067b6:	4b70      	ldr	r3, [pc, #448]	; (8006978 <HAL_UART_RxCpltCallback+0x208>)
 80067b8:	781b      	ldrb	r3, [r3, #0]
 80067ba:	2b1b      	cmp	r3, #27
 80067bc:	d07e      	beq.n	80068bc <HAL_UART_RxCpltCallback+0x14c>
 80067be:	4b6f      	ldr	r3, [pc, #444]	; (800697c <HAL_UART_RxCpltCallback+0x20c>)
 80067c0:	781b      	ldrb	r3, [r3, #0]
 80067c2:	2b15      	cmp	r3, #21
 80067c4:	d17a      	bne.n	80068bc <HAL_UART_RxCpltCallback+0x14c>
				osEventFlagsSet(ack_rcvd, NACK_FLAG);
 80067c6:	4b6e      	ldr	r3, [pc, #440]	; (8006980 <HAL_UART_RxCpltCallback+0x210>)
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	2100      	movs	r1, #0
 80067cc:	4618      	mov	r0, r3
 80067ce:	f005 fdab 	bl	800c328 <osEventFlagsSet>
				prvRxChar = 0x00;
 80067d2:	4b6a      	ldr	r3, [pc, #424]	; (800697c <HAL_UART_RxCpltCallback+0x20c>)
 80067d4:	2200      	movs	r2, #0
 80067d6:	701a      	strb	r2, [r3, #0]
				ack_rcv_flag = 0;
 80067d8:	4b66      	ldr	r3, [pc, #408]	; (8006974 <HAL_UART_RxCpltCallback+0x204>)
 80067da:	2200      	movs	r2, #0
 80067dc:	701a      	strb	r2, [r3, #0]
 80067de:	e06d      	b.n	80068bc <HAL_UART_RxCpltCallback+0x14c>
			}
		}
		else{
			if (((rxChar == ACK) || (rxChar == NACK)) && (prvRxChar == 0xFF)){
 80067e0:	4b65      	ldr	r3, [pc, #404]	; (8006978 <HAL_UART_RxCpltCallback+0x208>)
 80067e2:	781b      	ldrb	r3, [r3, #0]
 80067e4:	2b06      	cmp	r3, #6
 80067e6:	d003      	beq.n	80067f0 <HAL_UART_RxCpltCallback+0x80>
 80067e8:	4b63      	ldr	r3, [pc, #396]	; (8006978 <HAL_UART_RxCpltCallback+0x208>)
 80067ea:	781b      	ldrb	r3, [r3, #0]
 80067ec:	2b15      	cmp	r3, #21
 80067ee:	d10b      	bne.n	8006808 <HAL_UART_RxCpltCallback+0x98>
 80067f0:	4b62      	ldr	r3, [pc, #392]	; (800697c <HAL_UART_RxCpltCallback+0x20c>)
 80067f2:	781b      	ldrb	r3, [r3, #0]
 80067f4:	2bff      	cmp	r3, #255	; 0xff
 80067f6:	d107      	bne.n	8006808 <HAL_UART_RxCpltCallback+0x98>
				ack_rcv_flag = 1;
 80067f8:	4b5e      	ldr	r3, [pc, #376]	; (8006974 <HAL_UART_RxCpltCallback+0x204>)
 80067fa:	2201      	movs	r2, #1
 80067fc:	701a      	strb	r2, [r3, #0]
				prvRxChar = rxChar;
 80067fe:	4b5e      	ldr	r3, [pc, #376]	; (8006978 <HAL_UART_RxCpltCallback+0x208>)
 8006800:	781a      	ldrb	r2, [r3, #0]
 8006802:	4b5e      	ldr	r3, [pc, #376]	; (800697c <HAL_UART_RxCpltCallback+0x20c>)
 8006804:	701a      	strb	r2, [r3, #0]
 8006806:	e059      	b.n	80068bc <HAL_UART_RxCpltCallback+0x14c>
			}
			else if ((rxChar == ETX) && (prvRxChar != ESC)){
 8006808:	4b5b      	ldr	r3, [pc, #364]	; (8006978 <HAL_UART_RxCpltCallback+0x208>)
 800680a:	781b      	ldrb	r3, [r3, #0]
 800680c:	2b03      	cmp	r3, #3
 800680e:	d125      	bne.n	800685c <HAL_UART_RxCpltCallback+0xec>
 8006810:	4b5a      	ldr	r3, [pc, #360]	; (800697c <HAL_UART_RxCpltCallback+0x20c>)
 8006812:	781b      	ldrb	r3, [r3, #0]
 8006814:	2b1b      	cmp	r3, #27
 8006816:	d021      	beq.n	800685c <HAL_UART_RxCpltCallback+0xec>
				uint8_t start_ch = 0;
 8006818:	2300      	movs	r3, #0
 800681a:	73bb      	strb	r3, [r7, #14]
				start_ch = RB_pop(&uart4RXrb);
 800681c:	4859      	ldr	r0, [pc, #356]	; (8006984 <HAL_UART_RxCpltCallback+0x214>)
 800681e:	f7ff fa2a 	bl	8005c76 <RB_pop>
 8006822:	4603      	mov	r3, r0
 8006824:	73bb      	strb	r3, [r7, #14]
				if (start_ch == STX){
 8006826:	7bbb      	ldrb	r3, [r7, #14]
 8006828:	2b02      	cmp	r3, #2
 800682a:	d113      	bne.n	8006854 <HAL_UART_RxCpltCallback+0xe4>
					uint8_t rb_len = RB_size(&uart4RXrb);
 800682c:	4855      	ldr	r0, [pc, #340]	; (8006984 <HAL_UART_RxCpltCallback+0x214>)
 800682e:	f7ff fa71 	bl	8005d14 <RB_size>
 8006832:	4603      	mov	r3, r0
 8006834:	737b      	strb	r3, [r7, #13]
					RB_pushFront(&uart4RXrb, rb_len);
 8006836:	7b7b      	ldrb	r3, [r7, #13]
 8006838:	4619      	mov	r1, r3
 800683a:	4852      	ldr	r0, [pc, #328]	; (8006984 <HAL_UART_RxCpltCallback+0x214>)
 800683c:	f7ff fa40 	bl	8005cc0 <RB_pushFront>
					osMessageQueuePut(messageQueueHandle, uart4RXrb.buffer, 0U, 0U);
 8006840:	4b51      	ldr	r3, [pc, #324]	; (8006988 <HAL_UART_RxCpltCallback+0x218>)
 8006842:	6818      	ldr	r0, [r3, #0]
 8006844:	2300      	movs	r3, #0
 8006846:	2200      	movs	r2, #0
 8006848:	494e      	ldr	r1, [pc, #312]	; (8006984 <HAL_UART_RxCpltCallback+0x214>)
 800684a:	f005 ff99 	bl	800c780 <osMessageQueuePut>
					prvRxChar = 0xFF;
 800684e:	4b4b      	ldr	r3, [pc, #300]	; (800697c <HAL_UART_RxCpltCallback+0x20c>)
 8006850:	22ff      	movs	r2, #255	; 0xff
 8006852:	701a      	strb	r2, [r3, #0]
				}
				RB_clear(&uart4RXrb);
 8006854:	484b      	ldr	r0, [pc, #300]	; (8006984 <HAL_UART_RxCpltCallback+0x214>)
 8006856:	f7ff fa79 	bl	8005d4c <RB_clear>
			else if ((rxChar == ETX) && (prvRxChar != ESC)){
 800685a:	e02f      	b.n	80068bc <HAL_UART_RxCpltCallback+0x14c>
			}
			else if ((rxChar == ESC) && (prvRxChar != ESC)){
 800685c:	4b46      	ldr	r3, [pc, #280]	; (8006978 <HAL_UART_RxCpltCallback+0x208>)
 800685e:	781b      	ldrb	r3, [r3, #0]
 8006860:	2b1b      	cmp	r3, #27
 8006862:	d108      	bne.n	8006876 <HAL_UART_RxCpltCallback+0x106>
 8006864:	4b45      	ldr	r3, [pc, #276]	; (800697c <HAL_UART_RxCpltCallback+0x20c>)
 8006866:	781b      	ldrb	r3, [r3, #0]
 8006868:	2b1b      	cmp	r3, #27
 800686a:	d004      	beq.n	8006876 <HAL_UART_RxCpltCallback+0x106>
				 prvRxChar = rxChar;
 800686c:	4b42      	ldr	r3, [pc, #264]	; (8006978 <HAL_UART_RxCpltCallback+0x208>)
 800686e:	781a      	ldrb	r2, [r3, #0]
 8006870:	4b42      	ldr	r3, [pc, #264]	; (800697c <HAL_UART_RxCpltCallback+0x20c>)
 8006872:	701a      	strb	r2, [r3, #0]
 8006874:	e022      	b.n	80068bc <HAL_UART_RxCpltCallback+0x14c>
			}
			else if ((rxChar == ESC) && (prvRxChar == ESC)){
 8006876:	4b40      	ldr	r3, [pc, #256]	; (8006978 <HAL_UART_RxCpltCallback+0x208>)
 8006878:	781b      	ldrb	r3, [r3, #0]
 800687a:	2b1b      	cmp	r3, #27
 800687c:	d10d      	bne.n	800689a <HAL_UART_RxCpltCallback+0x12a>
 800687e:	4b3f      	ldr	r3, [pc, #252]	; (800697c <HAL_UART_RxCpltCallback+0x20c>)
 8006880:	781b      	ldrb	r3, [r3, #0]
 8006882:	2b1b      	cmp	r3, #27
 8006884:	d109      	bne.n	800689a <HAL_UART_RxCpltCallback+0x12a>
				RB_push(&uart4RXrb, rxChar);
 8006886:	4b3c      	ldr	r3, [pc, #240]	; (8006978 <HAL_UART_RxCpltCallback+0x208>)
 8006888:	781b      	ldrb	r3, [r3, #0]
 800688a:	4619      	mov	r1, r3
 800688c:	483d      	ldr	r0, [pc, #244]	; (8006984 <HAL_UART_RxCpltCallback+0x214>)
 800688e:	f7ff f9c4 	bl	8005c1a <RB_push>
				prvRxChar = 0x00;
 8006892:	4b3a      	ldr	r3, [pc, #232]	; (800697c <HAL_UART_RxCpltCallback+0x20c>)
 8006894:	2200      	movs	r2, #0
 8006896:	701a      	strb	r2, [r3, #0]
 8006898:	e010      	b.n	80068bc <HAL_UART_RxCpltCallback+0x14c>
			}
			else {
			  RB_push(&uart4RXrb, rxChar);
 800689a:	4b37      	ldr	r3, [pc, #220]	; (8006978 <HAL_UART_RxCpltCallback+0x208>)
 800689c:	781b      	ldrb	r3, [r3, #0]
 800689e:	4619      	mov	r1, r3
 80068a0:	4838      	ldr	r0, [pc, #224]	; (8006984 <HAL_UART_RxCpltCallback+0x214>)
 80068a2:	f7ff f9ba 	bl	8005c1a <RB_push>
			  if (rxChar == 0xFF) prvRxChar = 0x00;
 80068a6:	4b34      	ldr	r3, [pc, #208]	; (8006978 <HAL_UART_RxCpltCallback+0x208>)
 80068a8:	781b      	ldrb	r3, [r3, #0]
 80068aa:	2bff      	cmp	r3, #255	; 0xff
 80068ac:	d102      	bne.n	80068b4 <HAL_UART_RxCpltCallback+0x144>
 80068ae:	4b33      	ldr	r3, [pc, #204]	; (800697c <HAL_UART_RxCpltCallback+0x20c>)
 80068b0:	2200      	movs	r2, #0
 80068b2:	701a      	strb	r2, [r3, #0]
			  prvRxChar = rxChar;
 80068b4:	4b30      	ldr	r3, [pc, #192]	; (8006978 <HAL_UART_RxCpltCallback+0x208>)
 80068b6:	781a      	ldrb	r2, [r3, #0]
 80068b8:	4b30      	ldr	r3, [pc, #192]	; (800697c <HAL_UART_RxCpltCallback+0x20c>)
 80068ba:	701a      	strb	r2, [r3, #0]
			}
		}
		HAL_UART_Receive_IT(&huart4, &rxChar, 1);
 80068bc:	2201      	movs	r2, #1
 80068be:	492e      	ldr	r1, [pc, #184]	; (8006978 <HAL_UART_RxCpltCallback+0x208>)
 80068c0:	4832      	ldr	r0, [pc, #200]	; (800698c <HAL_UART_RxCpltCallback+0x21c>)
 80068c2:	f003 fc1f 	bl	800a104 <HAL_UART_Receive_IT>
		  prvRxChar = rxChar;
		}
		HAL_UART_Receive_IT(&huart1, &rxChar, 1);
	}

}
 80068c6:	e04f      	b.n	8006968 <HAL_UART_RxCpltCallback+0x1f8>
	else if (UartHandle->Instance == USART1){
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	4a30      	ldr	r2, [pc, #192]	; (8006990 <HAL_UART_RxCpltCallback+0x220>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d14a      	bne.n	8006968 <HAL_UART_RxCpltCallback+0x1f8>
		if ((rxChar == ETX) && (prvRxChar != ESC)){
 80068d2:	4b29      	ldr	r3, [pc, #164]	; (8006978 <HAL_UART_RxCpltCallback+0x208>)
 80068d4:	781b      	ldrb	r3, [r3, #0]
 80068d6:	2b03      	cmp	r3, #3
 80068d8:	d118      	bne.n	800690c <HAL_UART_RxCpltCallback+0x19c>
 80068da:	4b28      	ldr	r3, [pc, #160]	; (800697c <HAL_UART_RxCpltCallback+0x20c>)
 80068dc:	781b      	ldrb	r3, [r3, #0]
 80068de:	2b1b      	cmp	r3, #27
 80068e0:	d014      	beq.n	800690c <HAL_UART_RxCpltCallback+0x19c>
		uint8_t start_ch = 0;
 80068e2:	2300      	movs	r3, #0
 80068e4:	73fb      	strb	r3, [r7, #15]
		start_ch = RB_pop(&uart1RXrb);
 80068e6:	482b      	ldr	r0, [pc, #172]	; (8006994 <HAL_UART_RxCpltCallback+0x224>)
 80068e8:	f7ff f9c5 	bl	8005c76 <RB_pop>
 80068ec:	4603      	mov	r3, r0
 80068ee:	73fb      	strb	r3, [r7, #15]
		if (start_ch == STX){
 80068f0:	7bfb      	ldrb	r3, [r7, #15]
 80068f2:	2b02      	cmp	r3, #2
 80068f4:	d106      	bne.n	8006904 <HAL_UART_RxCpltCallback+0x194>
			osMessageQueuePut(messageQueueHandle, uart1RXrb.buffer, 0U, 0U);
 80068f6:	4b24      	ldr	r3, [pc, #144]	; (8006988 <HAL_UART_RxCpltCallback+0x218>)
 80068f8:	6818      	ldr	r0, [r3, #0]
 80068fa:	2300      	movs	r3, #0
 80068fc:	2200      	movs	r2, #0
 80068fe:	4925      	ldr	r1, [pc, #148]	; (8006994 <HAL_UART_RxCpltCallback+0x224>)
 8006900:	f005 ff3e 	bl	800c780 <osMessageQueuePut>
		RB_clear(&uart1RXrb);
 8006904:	4823      	ldr	r0, [pc, #140]	; (8006994 <HAL_UART_RxCpltCallback+0x224>)
 8006906:	f7ff fa21 	bl	8005d4c <RB_clear>
		if ((rxChar == ETX) && (prvRxChar != ESC)){
 800690a:	e028      	b.n	800695e <HAL_UART_RxCpltCallback+0x1ee>
		 else if ((rxChar == ESC) && (prvRxChar != ESC)){
 800690c:	4b1a      	ldr	r3, [pc, #104]	; (8006978 <HAL_UART_RxCpltCallback+0x208>)
 800690e:	781b      	ldrb	r3, [r3, #0]
 8006910:	2b1b      	cmp	r3, #27
 8006912:	d108      	bne.n	8006926 <HAL_UART_RxCpltCallback+0x1b6>
 8006914:	4b19      	ldr	r3, [pc, #100]	; (800697c <HAL_UART_RxCpltCallback+0x20c>)
 8006916:	781b      	ldrb	r3, [r3, #0]
 8006918:	2b1b      	cmp	r3, #27
 800691a:	d004      	beq.n	8006926 <HAL_UART_RxCpltCallback+0x1b6>
			 prvRxChar = rxChar;
 800691c:	4b16      	ldr	r3, [pc, #88]	; (8006978 <HAL_UART_RxCpltCallback+0x208>)
 800691e:	781a      	ldrb	r2, [r3, #0]
 8006920:	4b16      	ldr	r3, [pc, #88]	; (800697c <HAL_UART_RxCpltCallback+0x20c>)
 8006922:	701a      	strb	r2, [r3, #0]
 8006924:	e01b      	b.n	800695e <HAL_UART_RxCpltCallback+0x1ee>
		else if ((rxChar == ESC) && (prvRxChar == ESC)){
 8006926:	4b14      	ldr	r3, [pc, #80]	; (8006978 <HAL_UART_RxCpltCallback+0x208>)
 8006928:	781b      	ldrb	r3, [r3, #0]
 800692a:	2b1b      	cmp	r3, #27
 800692c:	d10d      	bne.n	800694a <HAL_UART_RxCpltCallback+0x1da>
 800692e:	4b13      	ldr	r3, [pc, #76]	; (800697c <HAL_UART_RxCpltCallback+0x20c>)
 8006930:	781b      	ldrb	r3, [r3, #0]
 8006932:	2b1b      	cmp	r3, #27
 8006934:	d109      	bne.n	800694a <HAL_UART_RxCpltCallback+0x1da>
			RB_push(&uart1RXrb, rxChar);
 8006936:	4b10      	ldr	r3, [pc, #64]	; (8006978 <HAL_UART_RxCpltCallback+0x208>)
 8006938:	781b      	ldrb	r3, [r3, #0]
 800693a:	4619      	mov	r1, r3
 800693c:	4815      	ldr	r0, [pc, #84]	; (8006994 <HAL_UART_RxCpltCallback+0x224>)
 800693e:	f7ff f96c 	bl	8005c1a <RB_push>
			prvRxChar = 0x00;
 8006942:	4b0e      	ldr	r3, [pc, #56]	; (800697c <HAL_UART_RxCpltCallback+0x20c>)
 8006944:	2200      	movs	r2, #0
 8006946:	701a      	strb	r2, [r3, #0]
 8006948:	e009      	b.n	800695e <HAL_UART_RxCpltCallback+0x1ee>
		  RB_push(&uart1RXrb, rxChar);
 800694a:	4b0b      	ldr	r3, [pc, #44]	; (8006978 <HAL_UART_RxCpltCallback+0x208>)
 800694c:	781b      	ldrb	r3, [r3, #0]
 800694e:	4619      	mov	r1, r3
 8006950:	4810      	ldr	r0, [pc, #64]	; (8006994 <HAL_UART_RxCpltCallback+0x224>)
 8006952:	f7ff f962 	bl	8005c1a <RB_push>
		  prvRxChar = rxChar;
 8006956:	4b08      	ldr	r3, [pc, #32]	; (8006978 <HAL_UART_RxCpltCallback+0x208>)
 8006958:	781a      	ldrb	r2, [r3, #0]
 800695a:	4b08      	ldr	r3, [pc, #32]	; (800697c <HAL_UART_RxCpltCallback+0x20c>)
 800695c:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart1, &rxChar, 1);
 800695e:	2201      	movs	r2, #1
 8006960:	4905      	ldr	r1, [pc, #20]	; (8006978 <HAL_UART_RxCpltCallback+0x208>)
 8006962:	480d      	ldr	r0, [pc, #52]	; (8006998 <HAL_UART_RxCpltCallback+0x228>)
 8006964:	f003 fbce 	bl	800a104 <HAL_UART_Receive_IT>
}
 8006968:	bf00      	nop
 800696a:	3710      	adds	r7, #16
 800696c:	46bd      	mov	sp, r7
 800696e:	bd80      	pop	{r7, pc}
 8006970:	40004c00 	.word	0x40004c00
 8006974:	200005e6 	.word	0x200005e6
 8006978:	200005e4 	.word	0x200005e4
 800697c:	200005e5 	.word	0x200005e5
 8006980:	200003e4 	.word	0x200003e4
 8006984:	2000057c 	.word	0x2000057c
 8006988:	200003e0 	.word	0x200003e0
 800698c:	200004ec 	.word	0x200004ec
 8006990:	40013800 	.word	0x40013800
 8006994:	200005b0 	.word	0x200005b0
 8006998:	2000045c 	.word	0x2000045c

0800699c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800699c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80069d4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80069a0:	f7ff fda6 	bl	80064f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80069a4:	480c      	ldr	r0, [pc, #48]	; (80069d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80069a6:	490d      	ldr	r1, [pc, #52]	; (80069dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80069a8:	4a0d      	ldr	r2, [pc, #52]	; (80069e0 <LoopForever+0xe>)
  movs r3, #0
 80069aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80069ac:	e002      	b.n	80069b4 <LoopCopyDataInit>

080069ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80069ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80069b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80069b2:	3304      	adds	r3, #4

080069b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80069b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80069b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80069b8:	d3f9      	bcc.n	80069ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80069ba:	4a0a      	ldr	r2, [pc, #40]	; (80069e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80069bc:	4c0a      	ldr	r4, [pc, #40]	; (80069e8 <LoopForever+0x16>)
  movs r3, #0
 80069be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80069c0:	e001      	b.n	80069c6 <LoopFillZerobss>

080069c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80069c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80069c4:	3204      	adds	r2, #4

080069c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80069c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80069c8:	d3fb      	bcc.n	80069c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80069ca:	f009 fa5d 	bl	800fe88 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80069ce:	f7fe f8ed 	bl	8004bac <main>

080069d2 <LoopForever>:

LoopForever:
    b LoopForever
 80069d2:	e7fe      	b.n	80069d2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80069d4:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80069d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80069dc:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 80069e0:	08015054 	.word	0x08015054
  ldr r2, =_sbss
 80069e4:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 80069e8:	2000634c 	.word	0x2000634c

080069ec <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80069ec:	e7fe      	b.n	80069ec <ADC1_IRQHandler>

080069ee <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80069ee:	b580      	push	{r7, lr}
 80069f0:	b082      	sub	sp, #8
 80069f2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80069f4:	2300      	movs	r3, #0
 80069f6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80069f8:	2003      	movs	r0, #3
 80069fa:	f000 f902 	bl	8006c02 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80069fe:	200f      	movs	r0, #15
 8006a00:	f7ff fbcc 	bl	800619c <HAL_InitTick>
 8006a04:	4603      	mov	r3, r0
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d002      	beq.n	8006a10 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8006a0a:	2301      	movs	r3, #1
 8006a0c:	71fb      	strb	r3, [r7, #7]
 8006a0e:	e001      	b.n	8006a14 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8006a10:	f7ff f9b0 	bl	8005d74 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8006a14:	79fb      	ldrb	r3, [r7, #7]
}
 8006a16:	4618      	mov	r0, r3
 8006a18:	3708      	adds	r7, #8
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	bd80      	pop	{r7, pc}
	...

08006a20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006a20:	b480      	push	{r7}
 8006a22:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8006a24:	4b06      	ldr	r3, [pc, #24]	; (8006a40 <HAL_IncTick+0x20>)
 8006a26:	781b      	ldrb	r3, [r3, #0]
 8006a28:	461a      	mov	r2, r3
 8006a2a:	4b06      	ldr	r3, [pc, #24]	; (8006a44 <HAL_IncTick+0x24>)
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	4413      	add	r3, r2
 8006a30:	4a04      	ldr	r2, [pc, #16]	; (8006a44 <HAL_IncTick+0x24>)
 8006a32:	6013      	str	r3, [r2, #0]
}
 8006a34:	bf00      	nop
 8006a36:	46bd      	mov	sp, r7
 8006a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3c:	4770      	bx	lr
 8006a3e:	bf00      	nop
 8006a40:	20000018 	.word	0x20000018
 8006a44:	200005e8 	.word	0x200005e8

08006a48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006a48:	b480      	push	{r7}
 8006a4a:	af00      	add	r7, sp, #0
  return uwTick;
 8006a4c:	4b03      	ldr	r3, [pc, #12]	; (8006a5c <HAL_GetTick+0x14>)
 8006a4e:	681b      	ldr	r3, [r3, #0]
}
 8006a50:	4618      	mov	r0, r3
 8006a52:	46bd      	mov	sp, r7
 8006a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a58:	4770      	bx	lr
 8006a5a:	bf00      	nop
 8006a5c:	200005e8 	.word	0x200005e8

08006a60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b084      	sub	sp, #16
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006a68:	f7ff ffee 	bl	8006a48 <HAL_GetTick>
 8006a6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a78:	d005      	beq.n	8006a86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8006a7a:	4b0a      	ldr	r3, [pc, #40]	; (8006aa4 <HAL_Delay+0x44>)
 8006a7c:	781b      	ldrb	r3, [r3, #0]
 8006a7e:	461a      	mov	r2, r3
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	4413      	add	r3, r2
 8006a84:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006a86:	bf00      	nop
 8006a88:	f7ff ffde 	bl	8006a48 <HAL_GetTick>
 8006a8c:	4602      	mov	r2, r0
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	1ad3      	subs	r3, r2, r3
 8006a92:	68fa      	ldr	r2, [r7, #12]
 8006a94:	429a      	cmp	r2, r3
 8006a96:	d8f7      	bhi.n	8006a88 <HAL_Delay+0x28>
  {
  }
}
 8006a98:	bf00      	nop
 8006a9a:	bf00      	nop
 8006a9c:	3710      	adds	r7, #16
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	bd80      	pop	{r7, pc}
 8006aa2:	bf00      	nop
 8006aa4:	20000018 	.word	0x20000018

08006aa8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006aa8:	b480      	push	{r7}
 8006aaa:	b085      	sub	sp, #20
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	f003 0307 	and.w	r3, r3, #7
 8006ab6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006ab8:	4b0c      	ldr	r3, [pc, #48]	; (8006aec <__NVIC_SetPriorityGrouping+0x44>)
 8006aba:	68db      	ldr	r3, [r3, #12]
 8006abc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006abe:	68ba      	ldr	r2, [r7, #8]
 8006ac0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006ac4:	4013      	ands	r3, r2
 8006ac6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006acc:	68bb      	ldr	r3, [r7, #8]
 8006ace:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006ad0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006ad4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ad8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006ada:	4a04      	ldr	r2, [pc, #16]	; (8006aec <__NVIC_SetPriorityGrouping+0x44>)
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	60d3      	str	r3, [r2, #12]
}
 8006ae0:	bf00      	nop
 8006ae2:	3714      	adds	r7, #20
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aea:	4770      	bx	lr
 8006aec:	e000ed00 	.word	0xe000ed00

08006af0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006af0:	b480      	push	{r7}
 8006af2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006af4:	4b04      	ldr	r3, [pc, #16]	; (8006b08 <__NVIC_GetPriorityGrouping+0x18>)
 8006af6:	68db      	ldr	r3, [r3, #12]
 8006af8:	0a1b      	lsrs	r3, r3, #8
 8006afa:	f003 0307 	and.w	r3, r3, #7
}
 8006afe:	4618      	mov	r0, r3
 8006b00:	46bd      	mov	sp, r7
 8006b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b06:	4770      	bx	lr
 8006b08:	e000ed00 	.word	0xe000ed00

08006b0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006b0c:	b480      	push	{r7}
 8006b0e:	b083      	sub	sp, #12
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	4603      	mov	r3, r0
 8006b14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006b16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	db0b      	blt.n	8006b36 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006b1e:	79fb      	ldrb	r3, [r7, #7]
 8006b20:	f003 021f 	and.w	r2, r3, #31
 8006b24:	4907      	ldr	r1, [pc, #28]	; (8006b44 <__NVIC_EnableIRQ+0x38>)
 8006b26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b2a:	095b      	lsrs	r3, r3, #5
 8006b2c:	2001      	movs	r0, #1
 8006b2e:	fa00 f202 	lsl.w	r2, r0, r2
 8006b32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006b36:	bf00      	nop
 8006b38:	370c      	adds	r7, #12
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b40:	4770      	bx	lr
 8006b42:	bf00      	nop
 8006b44:	e000e100 	.word	0xe000e100

08006b48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006b48:	b480      	push	{r7}
 8006b4a:	b083      	sub	sp, #12
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	4603      	mov	r3, r0
 8006b50:	6039      	str	r1, [r7, #0]
 8006b52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006b54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	db0a      	blt.n	8006b72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	b2da      	uxtb	r2, r3
 8006b60:	490c      	ldr	r1, [pc, #48]	; (8006b94 <__NVIC_SetPriority+0x4c>)
 8006b62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b66:	0112      	lsls	r2, r2, #4
 8006b68:	b2d2      	uxtb	r2, r2
 8006b6a:	440b      	add	r3, r1
 8006b6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006b70:	e00a      	b.n	8006b88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	b2da      	uxtb	r2, r3
 8006b76:	4908      	ldr	r1, [pc, #32]	; (8006b98 <__NVIC_SetPriority+0x50>)
 8006b78:	79fb      	ldrb	r3, [r7, #7]
 8006b7a:	f003 030f 	and.w	r3, r3, #15
 8006b7e:	3b04      	subs	r3, #4
 8006b80:	0112      	lsls	r2, r2, #4
 8006b82:	b2d2      	uxtb	r2, r2
 8006b84:	440b      	add	r3, r1
 8006b86:	761a      	strb	r2, [r3, #24]
}
 8006b88:	bf00      	nop
 8006b8a:	370c      	adds	r7, #12
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b92:	4770      	bx	lr
 8006b94:	e000e100 	.word	0xe000e100
 8006b98:	e000ed00 	.word	0xe000ed00

08006b9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006b9c:	b480      	push	{r7}
 8006b9e:	b089      	sub	sp, #36	; 0x24
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	60f8      	str	r0, [r7, #12]
 8006ba4:	60b9      	str	r1, [r7, #8]
 8006ba6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	f003 0307 	and.w	r3, r3, #7
 8006bae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006bb0:	69fb      	ldr	r3, [r7, #28]
 8006bb2:	f1c3 0307 	rsb	r3, r3, #7
 8006bb6:	2b04      	cmp	r3, #4
 8006bb8:	bf28      	it	cs
 8006bba:	2304      	movcs	r3, #4
 8006bbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006bbe:	69fb      	ldr	r3, [r7, #28]
 8006bc0:	3304      	adds	r3, #4
 8006bc2:	2b06      	cmp	r3, #6
 8006bc4:	d902      	bls.n	8006bcc <NVIC_EncodePriority+0x30>
 8006bc6:	69fb      	ldr	r3, [r7, #28]
 8006bc8:	3b03      	subs	r3, #3
 8006bca:	e000      	b.n	8006bce <NVIC_EncodePriority+0x32>
 8006bcc:	2300      	movs	r3, #0
 8006bce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006bd0:	f04f 32ff 	mov.w	r2, #4294967295
 8006bd4:	69bb      	ldr	r3, [r7, #24]
 8006bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8006bda:	43da      	mvns	r2, r3
 8006bdc:	68bb      	ldr	r3, [r7, #8]
 8006bde:	401a      	ands	r2, r3
 8006be0:	697b      	ldr	r3, [r7, #20]
 8006be2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006be4:	f04f 31ff 	mov.w	r1, #4294967295
 8006be8:	697b      	ldr	r3, [r7, #20]
 8006bea:	fa01 f303 	lsl.w	r3, r1, r3
 8006bee:	43d9      	mvns	r1, r3
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006bf4:	4313      	orrs	r3, r2
         );
}
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	3724      	adds	r7, #36	; 0x24
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c00:	4770      	bx	lr

08006c02 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006c02:	b580      	push	{r7, lr}
 8006c04:	b082      	sub	sp, #8
 8006c06:	af00      	add	r7, sp, #0
 8006c08:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006c0a:	6878      	ldr	r0, [r7, #4]
 8006c0c:	f7ff ff4c 	bl	8006aa8 <__NVIC_SetPriorityGrouping>
}
 8006c10:	bf00      	nop
 8006c12:	3708      	adds	r7, #8
 8006c14:	46bd      	mov	sp, r7
 8006c16:	bd80      	pop	{r7, pc}

08006c18 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b086      	sub	sp, #24
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	4603      	mov	r3, r0
 8006c20:	60b9      	str	r1, [r7, #8]
 8006c22:	607a      	str	r2, [r7, #4]
 8006c24:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8006c26:	2300      	movs	r3, #0
 8006c28:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006c2a:	f7ff ff61 	bl	8006af0 <__NVIC_GetPriorityGrouping>
 8006c2e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006c30:	687a      	ldr	r2, [r7, #4]
 8006c32:	68b9      	ldr	r1, [r7, #8]
 8006c34:	6978      	ldr	r0, [r7, #20]
 8006c36:	f7ff ffb1 	bl	8006b9c <NVIC_EncodePriority>
 8006c3a:	4602      	mov	r2, r0
 8006c3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c40:	4611      	mov	r1, r2
 8006c42:	4618      	mov	r0, r3
 8006c44:	f7ff ff80 	bl	8006b48 <__NVIC_SetPriority>
}
 8006c48:	bf00      	nop
 8006c4a:	3718      	adds	r7, #24
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	bd80      	pop	{r7, pc}

08006c50 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b082      	sub	sp, #8
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	4603      	mov	r3, r0
 8006c58:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c5e:	4618      	mov	r0, r3
 8006c60:	f7ff ff54 	bl	8006b0c <__NVIC_EnableIRQ>
}
 8006c64:	bf00      	nop
 8006c66:	3708      	adds	r7, #8
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	bd80      	pop	{r7, pc}

08006c6c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006c6c:	b480      	push	{r7}
 8006c6e:	b085      	sub	sp, #20
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006c74:	2300      	movs	r3, #0
 8006c76:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006c7e:	b2db      	uxtb	r3, r3
 8006c80:	2b02      	cmp	r3, #2
 8006c82:	d008      	beq.n	8006c96 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2204      	movs	r2, #4
 8006c88:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8006c92:	2301      	movs	r3, #1
 8006c94:	e040      	b.n	8006d18 <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	681a      	ldr	r2, [r3, #0]
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f022 020e 	bic.w	r2, r2, #14
 8006ca4:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006caa:	681a      	ldr	r2, [r3, #0]
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006cb0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006cb4:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	681a      	ldr	r2, [r3, #0]
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f022 0201 	bic.w	r2, r2, #1
 8006cc4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cca:	f003 021c 	and.w	r2, r3, #28
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cd2:	2101      	movs	r1, #1
 8006cd4:	fa01 f202 	lsl.w	r2, r1, r2
 8006cd8:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cde:	687a      	ldr	r2, [r7, #4]
 8006ce0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006ce2:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d00c      	beq.n	8006d06 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cf0:	681a      	ldr	r2, [r3, #0]
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cf6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006cfa:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d00:	687a      	ldr	r2, [r7, #4]
 8006d02:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8006d04:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2201      	movs	r2, #1
 8006d0a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2200      	movs	r2, #0
 8006d12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8006d16:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8006d18:	4618      	mov	r0, r3
 8006d1a:	3714      	adds	r7, #20
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d22:	4770      	bx	lr

08006d24 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b084      	sub	sp, #16
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006d36:	b2db      	uxtb	r3, r3
 8006d38:	2b02      	cmp	r3, #2
 8006d3a:	d005      	beq.n	8006d48 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2204      	movs	r2, #4
 8006d40:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8006d42:	2301      	movs	r3, #1
 8006d44:	73fb      	strb	r3, [r7, #15]
 8006d46:	e047      	b.n	8006dd8 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	681a      	ldr	r2, [r3, #0]
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f022 020e 	bic.w	r2, r2, #14
 8006d56:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	681a      	ldr	r2, [r3, #0]
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f022 0201 	bic.w	r2, r2, #1
 8006d66:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d6c:	681a      	ldr	r2, [r3, #0]
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d72:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006d76:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d7c:	f003 021c 	and.w	r2, r3, #28
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d84:	2101      	movs	r1, #1
 8006d86:	fa01 f202 	lsl.w	r2, r1, r2
 8006d8a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d90:	687a      	ldr	r2, [r7, #4]
 8006d92:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006d94:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d00c      	beq.n	8006db8 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006da2:	681a      	ldr	r2, [r3, #0]
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006da8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006dac:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006db2:	687a      	ldr	r2, [r7, #4]
 8006db4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8006db6:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2201      	movs	r2, #1
 8006dbc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d003      	beq.n	8006dd8 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dd4:	6878      	ldr	r0, [r7, #4]
 8006dd6:	4798      	blx	r3
    }
  }
  return status;
 8006dd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dda:	4618      	mov	r0, r3
 8006ddc:	3710      	adds	r7, #16
 8006dde:	46bd      	mov	sp, r7
 8006de0:	bd80      	pop	{r7, pc}
	...

08006de4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006de4:	b480      	push	{r7}
 8006de6:	b087      	sub	sp, #28
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
 8006dec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006dee:	2300      	movs	r3, #0
 8006df0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006df2:	e166      	b.n	80070c2 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	681a      	ldr	r2, [r3, #0]
 8006df8:	2101      	movs	r1, #1
 8006dfa:	697b      	ldr	r3, [r7, #20]
 8006dfc:	fa01 f303 	lsl.w	r3, r1, r3
 8006e00:	4013      	ands	r3, r2
 8006e02:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	f000 8158 	beq.w	80070bc <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	685b      	ldr	r3, [r3, #4]
 8006e10:	f003 0303 	and.w	r3, r3, #3
 8006e14:	2b01      	cmp	r3, #1
 8006e16:	d005      	beq.n	8006e24 <HAL_GPIO_Init+0x40>
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	685b      	ldr	r3, [r3, #4]
 8006e1c:	f003 0303 	and.w	r3, r3, #3
 8006e20:	2b02      	cmp	r3, #2
 8006e22:	d130      	bne.n	8006e86 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	689b      	ldr	r3, [r3, #8]
 8006e28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8006e2a:	697b      	ldr	r3, [r7, #20]
 8006e2c:	005b      	lsls	r3, r3, #1
 8006e2e:	2203      	movs	r2, #3
 8006e30:	fa02 f303 	lsl.w	r3, r2, r3
 8006e34:	43db      	mvns	r3, r3
 8006e36:	693a      	ldr	r2, [r7, #16]
 8006e38:	4013      	ands	r3, r2
 8006e3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	68da      	ldr	r2, [r3, #12]
 8006e40:	697b      	ldr	r3, [r7, #20]
 8006e42:	005b      	lsls	r3, r3, #1
 8006e44:	fa02 f303 	lsl.w	r3, r2, r3
 8006e48:	693a      	ldr	r2, [r7, #16]
 8006e4a:	4313      	orrs	r3, r2
 8006e4c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	693a      	ldr	r2, [r7, #16]
 8006e52:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	685b      	ldr	r3, [r3, #4]
 8006e58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006e5a:	2201      	movs	r2, #1
 8006e5c:	697b      	ldr	r3, [r7, #20]
 8006e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8006e62:	43db      	mvns	r3, r3
 8006e64:	693a      	ldr	r2, [r7, #16]
 8006e66:	4013      	ands	r3, r2
 8006e68:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	685b      	ldr	r3, [r3, #4]
 8006e6e:	091b      	lsrs	r3, r3, #4
 8006e70:	f003 0201 	and.w	r2, r3, #1
 8006e74:	697b      	ldr	r3, [r7, #20]
 8006e76:	fa02 f303 	lsl.w	r3, r2, r3
 8006e7a:	693a      	ldr	r2, [r7, #16]
 8006e7c:	4313      	orrs	r3, r2
 8006e7e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	693a      	ldr	r2, [r7, #16]
 8006e84:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	685b      	ldr	r3, [r3, #4]
 8006e8a:	f003 0303 	and.w	r3, r3, #3
 8006e8e:	2b03      	cmp	r3, #3
 8006e90:	d017      	beq.n	8006ec2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	68db      	ldr	r3, [r3, #12]
 8006e96:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006e98:	697b      	ldr	r3, [r7, #20]
 8006e9a:	005b      	lsls	r3, r3, #1
 8006e9c:	2203      	movs	r2, #3
 8006e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8006ea2:	43db      	mvns	r3, r3
 8006ea4:	693a      	ldr	r2, [r7, #16]
 8006ea6:	4013      	ands	r3, r2
 8006ea8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	689a      	ldr	r2, [r3, #8]
 8006eae:	697b      	ldr	r3, [r7, #20]
 8006eb0:	005b      	lsls	r3, r3, #1
 8006eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8006eb6:	693a      	ldr	r2, [r7, #16]
 8006eb8:	4313      	orrs	r3, r2
 8006eba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	693a      	ldr	r2, [r7, #16]
 8006ec0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	685b      	ldr	r3, [r3, #4]
 8006ec6:	f003 0303 	and.w	r3, r3, #3
 8006eca:	2b02      	cmp	r3, #2
 8006ecc:	d123      	bne.n	8006f16 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8006ece:	697b      	ldr	r3, [r7, #20]
 8006ed0:	08da      	lsrs	r2, r3, #3
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	3208      	adds	r2, #8
 8006ed6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006eda:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006edc:	697b      	ldr	r3, [r7, #20]
 8006ede:	f003 0307 	and.w	r3, r3, #7
 8006ee2:	009b      	lsls	r3, r3, #2
 8006ee4:	220f      	movs	r2, #15
 8006ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8006eea:	43db      	mvns	r3, r3
 8006eec:	693a      	ldr	r2, [r7, #16]
 8006eee:	4013      	ands	r3, r2
 8006ef0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	691a      	ldr	r2, [r3, #16]
 8006ef6:	697b      	ldr	r3, [r7, #20]
 8006ef8:	f003 0307 	and.w	r3, r3, #7
 8006efc:	009b      	lsls	r3, r3, #2
 8006efe:	fa02 f303 	lsl.w	r3, r2, r3
 8006f02:	693a      	ldr	r2, [r7, #16]
 8006f04:	4313      	orrs	r3, r2
 8006f06:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006f08:	697b      	ldr	r3, [r7, #20]
 8006f0a:	08da      	lsrs	r2, r3, #3
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	3208      	adds	r2, #8
 8006f10:	6939      	ldr	r1, [r7, #16]
 8006f12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8006f1c:	697b      	ldr	r3, [r7, #20]
 8006f1e:	005b      	lsls	r3, r3, #1
 8006f20:	2203      	movs	r2, #3
 8006f22:	fa02 f303 	lsl.w	r3, r2, r3
 8006f26:	43db      	mvns	r3, r3
 8006f28:	693a      	ldr	r2, [r7, #16]
 8006f2a:	4013      	ands	r3, r2
 8006f2c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	685b      	ldr	r3, [r3, #4]
 8006f32:	f003 0203 	and.w	r2, r3, #3
 8006f36:	697b      	ldr	r3, [r7, #20]
 8006f38:	005b      	lsls	r3, r3, #1
 8006f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8006f3e:	693a      	ldr	r2, [r7, #16]
 8006f40:	4313      	orrs	r3, r2
 8006f42:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	693a      	ldr	r2, [r7, #16]
 8006f48:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	685b      	ldr	r3, [r3, #4]
 8006f4e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	f000 80b2 	beq.w	80070bc <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006f58:	4b61      	ldr	r3, [pc, #388]	; (80070e0 <HAL_GPIO_Init+0x2fc>)
 8006f5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f5c:	4a60      	ldr	r2, [pc, #384]	; (80070e0 <HAL_GPIO_Init+0x2fc>)
 8006f5e:	f043 0301 	orr.w	r3, r3, #1
 8006f62:	6613      	str	r3, [r2, #96]	; 0x60
 8006f64:	4b5e      	ldr	r3, [pc, #376]	; (80070e0 <HAL_GPIO_Init+0x2fc>)
 8006f66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f68:	f003 0301 	and.w	r3, r3, #1
 8006f6c:	60bb      	str	r3, [r7, #8]
 8006f6e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8006f70:	4a5c      	ldr	r2, [pc, #368]	; (80070e4 <HAL_GPIO_Init+0x300>)
 8006f72:	697b      	ldr	r3, [r7, #20]
 8006f74:	089b      	lsrs	r3, r3, #2
 8006f76:	3302      	adds	r3, #2
 8006f78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f7c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8006f7e:	697b      	ldr	r3, [r7, #20]
 8006f80:	f003 0303 	and.w	r3, r3, #3
 8006f84:	009b      	lsls	r3, r3, #2
 8006f86:	220f      	movs	r2, #15
 8006f88:	fa02 f303 	lsl.w	r3, r2, r3
 8006f8c:	43db      	mvns	r3, r3
 8006f8e:	693a      	ldr	r2, [r7, #16]
 8006f90:	4013      	ands	r3, r2
 8006f92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8006f9a:	d02b      	beq.n	8006ff4 <HAL_GPIO_Init+0x210>
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	4a52      	ldr	r2, [pc, #328]	; (80070e8 <HAL_GPIO_Init+0x304>)
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d025      	beq.n	8006ff0 <HAL_GPIO_Init+0x20c>
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	4a51      	ldr	r2, [pc, #324]	; (80070ec <HAL_GPIO_Init+0x308>)
 8006fa8:	4293      	cmp	r3, r2
 8006faa:	d01f      	beq.n	8006fec <HAL_GPIO_Init+0x208>
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	4a50      	ldr	r2, [pc, #320]	; (80070f0 <HAL_GPIO_Init+0x30c>)
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d019      	beq.n	8006fe8 <HAL_GPIO_Init+0x204>
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	4a4f      	ldr	r2, [pc, #316]	; (80070f4 <HAL_GPIO_Init+0x310>)
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d013      	beq.n	8006fe4 <HAL_GPIO_Init+0x200>
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	4a4e      	ldr	r2, [pc, #312]	; (80070f8 <HAL_GPIO_Init+0x314>)
 8006fc0:	4293      	cmp	r3, r2
 8006fc2:	d00d      	beq.n	8006fe0 <HAL_GPIO_Init+0x1fc>
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	4a4d      	ldr	r2, [pc, #308]	; (80070fc <HAL_GPIO_Init+0x318>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d007      	beq.n	8006fdc <HAL_GPIO_Init+0x1f8>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	4a4c      	ldr	r2, [pc, #304]	; (8007100 <HAL_GPIO_Init+0x31c>)
 8006fd0:	4293      	cmp	r3, r2
 8006fd2:	d101      	bne.n	8006fd8 <HAL_GPIO_Init+0x1f4>
 8006fd4:	2307      	movs	r3, #7
 8006fd6:	e00e      	b.n	8006ff6 <HAL_GPIO_Init+0x212>
 8006fd8:	2308      	movs	r3, #8
 8006fda:	e00c      	b.n	8006ff6 <HAL_GPIO_Init+0x212>
 8006fdc:	2306      	movs	r3, #6
 8006fde:	e00a      	b.n	8006ff6 <HAL_GPIO_Init+0x212>
 8006fe0:	2305      	movs	r3, #5
 8006fe2:	e008      	b.n	8006ff6 <HAL_GPIO_Init+0x212>
 8006fe4:	2304      	movs	r3, #4
 8006fe6:	e006      	b.n	8006ff6 <HAL_GPIO_Init+0x212>
 8006fe8:	2303      	movs	r3, #3
 8006fea:	e004      	b.n	8006ff6 <HAL_GPIO_Init+0x212>
 8006fec:	2302      	movs	r3, #2
 8006fee:	e002      	b.n	8006ff6 <HAL_GPIO_Init+0x212>
 8006ff0:	2301      	movs	r3, #1
 8006ff2:	e000      	b.n	8006ff6 <HAL_GPIO_Init+0x212>
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	697a      	ldr	r2, [r7, #20]
 8006ff8:	f002 0203 	and.w	r2, r2, #3
 8006ffc:	0092      	lsls	r2, r2, #2
 8006ffe:	4093      	lsls	r3, r2
 8007000:	693a      	ldr	r2, [r7, #16]
 8007002:	4313      	orrs	r3, r2
 8007004:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8007006:	4937      	ldr	r1, [pc, #220]	; (80070e4 <HAL_GPIO_Init+0x300>)
 8007008:	697b      	ldr	r3, [r7, #20]
 800700a:	089b      	lsrs	r3, r3, #2
 800700c:	3302      	adds	r3, #2
 800700e:	693a      	ldr	r2, [r7, #16]
 8007010:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007014:	4b3b      	ldr	r3, [pc, #236]	; (8007104 <HAL_GPIO_Init+0x320>)
 8007016:	689b      	ldr	r3, [r3, #8]
 8007018:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	43db      	mvns	r3, r3
 800701e:	693a      	ldr	r2, [r7, #16]
 8007020:	4013      	ands	r3, r2
 8007022:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	685b      	ldr	r3, [r3, #4]
 8007028:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800702c:	2b00      	cmp	r3, #0
 800702e:	d003      	beq.n	8007038 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8007030:	693a      	ldr	r2, [r7, #16]
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	4313      	orrs	r3, r2
 8007036:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8007038:	4a32      	ldr	r2, [pc, #200]	; (8007104 <HAL_GPIO_Init+0x320>)
 800703a:	693b      	ldr	r3, [r7, #16]
 800703c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800703e:	4b31      	ldr	r3, [pc, #196]	; (8007104 <HAL_GPIO_Init+0x320>)
 8007040:	68db      	ldr	r3, [r3, #12]
 8007042:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	43db      	mvns	r3, r3
 8007048:	693a      	ldr	r2, [r7, #16]
 800704a:	4013      	ands	r3, r2
 800704c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800704e:	683b      	ldr	r3, [r7, #0]
 8007050:	685b      	ldr	r3, [r3, #4]
 8007052:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007056:	2b00      	cmp	r3, #0
 8007058:	d003      	beq.n	8007062 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800705a:	693a      	ldr	r2, [r7, #16]
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	4313      	orrs	r3, r2
 8007060:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8007062:	4a28      	ldr	r2, [pc, #160]	; (8007104 <HAL_GPIO_Init+0x320>)
 8007064:	693b      	ldr	r3, [r7, #16]
 8007066:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8007068:	4b26      	ldr	r3, [pc, #152]	; (8007104 <HAL_GPIO_Init+0x320>)
 800706a:	685b      	ldr	r3, [r3, #4]
 800706c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	43db      	mvns	r3, r3
 8007072:	693a      	ldr	r2, [r7, #16]
 8007074:	4013      	ands	r3, r2
 8007076:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	685b      	ldr	r3, [r3, #4]
 800707c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007080:	2b00      	cmp	r3, #0
 8007082:	d003      	beq.n	800708c <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8007084:	693a      	ldr	r2, [r7, #16]
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	4313      	orrs	r3, r2
 800708a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800708c:	4a1d      	ldr	r2, [pc, #116]	; (8007104 <HAL_GPIO_Init+0x320>)
 800708e:	693b      	ldr	r3, [r7, #16]
 8007090:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8007092:	4b1c      	ldr	r3, [pc, #112]	; (8007104 <HAL_GPIO_Init+0x320>)
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	43db      	mvns	r3, r3
 800709c:	693a      	ldr	r2, [r7, #16]
 800709e:	4013      	ands	r3, r2
 80070a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	685b      	ldr	r3, [r3, #4]
 80070a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d003      	beq.n	80070b6 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80070ae:	693a      	ldr	r2, [r7, #16]
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	4313      	orrs	r3, r2
 80070b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80070b6:	4a13      	ldr	r2, [pc, #76]	; (8007104 <HAL_GPIO_Init+0x320>)
 80070b8:	693b      	ldr	r3, [r7, #16]
 80070ba:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80070bc:	697b      	ldr	r3, [r7, #20]
 80070be:	3301      	adds	r3, #1
 80070c0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	681a      	ldr	r2, [r3, #0]
 80070c6:	697b      	ldr	r3, [r7, #20]
 80070c8:	fa22 f303 	lsr.w	r3, r2, r3
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	f47f ae91 	bne.w	8006df4 <HAL_GPIO_Init+0x10>
  }
}
 80070d2:	bf00      	nop
 80070d4:	bf00      	nop
 80070d6:	371c      	adds	r7, #28
 80070d8:	46bd      	mov	sp, r7
 80070da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070de:	4770      	bx	lr
 80070e0:	40021000 	.word	0x40021000
 80070e4:	40010000 	.word	0x40010000
 80070e8:	48000400 	.word	0x48000400
 80070ec:	48000800 	.word	0x48000800
 80070f0:	48000c00 	.word	0x48000c00
 80070f4:	48001000 	.word	0x48001000
 80070f8:	48001400 	.word	0x48001400
 80070fc:	48001800 	.word	0x48001800
 8007100:	48001c00 	.word	0x48001c00
 8007104:	40010400 	.word	0x40010400

08007108 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007108:	b480      	push	{r7}
 800710a:	b083      	sub	sp, #12
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
 8007110:	460b      	mov	r3, r1
 8007112:	807b      	strh	r3, [r7, #2]
 8007114:	4613      	mov	r3, r2
 8007116:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007118:	787b      	ldrb	r3, [r7, #1]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d003      	beq.n	8007126 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800711e:	887a      	ldrh	r2, [r7, #2]
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8007124:	e002      	b.n	800712c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8007126:	887a      	ldrh	r2, [r7, #2]
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800712c:	bf00      	nop
 800712e:	370c      	adds	r7, #12
 8007130:	46bd      	mov	sp, r7
 8007132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007136:	4770      	bx	lr

08007138 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007138:	b480      	push	{r7}
 800713a:	b085      	sub	sp, #20
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
 8007140:	460b      	mov	r3, r1
 8007142:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	695b      	ldr	r3, [r3, #20]
 8007148:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800714a:	887a      	ldrh	r2, [r7, #2]
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	4013      	ands	r3, r2
 8007150:	041a      	lsls	r2, r3, #16
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	43d9      	mvns	r1, r3
 8007156:	887b      	ldrh	r3, [r7, #2]
 8007158:	400b      	ands	r3, r1
 800715a:	431a      	orrs	r2, r3
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	619a      	str	r2, [r3, #24]
}
 8007160:	bf00      	nop
 8007162:	3714      	adds	r7, #20
 8007164:	46bd      	mov	sp, r7
 8007166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716a:	4770      	bx	lr

0800716c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800716c:	b580      	push	{r7, lr}
 800716e:	b082      	sub	sp, #8
 8007170:	af00      	add	r7, sp, #0
 8007172:	4603      	mov	r3, r0
 8007174:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8007176:	4b08      	ldr	r3, [pc, #32]	; (8007198 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007178:	695a      	ldr	r2, [r3, #20]
 800717a:	88fb      	ldrh	r3, [r7, #6]
 800717c:	4013      	ands	r3, r2
 800717e:	2b00      	cmp	r3, #0
 8007180:	d006      	beq.n	8007190 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007182:	4a05      	ldr	r2, [pc, #20]	; (8007198 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007184:	88fb      	ldrh	r3, [r7, #6]
 8007186:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007188:	88fb      	ldrh	r3, [r7, #6]
 800718a:	4618      	mov	r0, r3
 800718c:	f000 f806 	bl	800719c <HAL_GPIO_EXTI_Callback>
  }
}
 8007190:	bf00      	nop
 8007192:	3708      	adds	r7, #8
 8007194:	46bd      	mov	sp, r7
 8007196:	bd80      	pop	{r7, pc}
 8007198:	40010400 	.word	0x40010400

0800719c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800719c:	b480      	push	{r7}
 800719e:	b083      	sub	sp, #12
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	4603      	mov	r3, r0
 80071a4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80071a6:	bf00      	nop
 80071a8:	370c      	adds	r7, #12
 80071aa:	46bd      	mov	sp, r7
 80071ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b0:	4770      	bx	lr

080071b2 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80071b2:	b580      	push	{r7, lr}
 80071b4:	b082      	sub	sp, #8
 80071b6:	af00      	add	r7, sp, #0
 80071b8:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d101      	bne.n	80071c4 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80071c0:	2301      	movs	r3, #1
 80071c2:	e081      	b.n	80072c8 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80071ca:	b2db      	uxtb	r3, r3
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d106      	bne.n	80071de <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2200      	movs	r2, #0
 80071d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80071d8:	6878      	ldr	r0, [r7, #4]
 80071da:	f7fe fdf3 	bl	8005dc4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2224      	movs	r2, #36	; 0x24
 80071e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	681a      	ldr	r2, [r3, #0]
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f022 0201 	bic.w	r2, r2, #1
 80071f4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	685a      	ldr	r2, [r3, #4]
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007202:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	689a      	ldr	r2, [r3, #8]
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007212:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	68db      	ldr	r3, [r3, #12]
 8007218:	2b01      	cmp	r3, #1
 800721a:	d107      	bne.n	800722c <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	689a      	ldr	r2, [r3, #8]
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007228:	609a      	str	r2, [r3, #8]
 800722a:	e006      	b.n	800723a <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	689a      	ldr	r2, [r3, #8]
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8007238:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	68db      	ldr	r3, [r3, #12]
 800723e:	2b02      	cmp	r3, #2
 8007240:	d104      	bne.n	800724c <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800724a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	685b      	ldr	r3, [r3, #4]
 8007252:	687a      	ldr	r2, [r7, #4]
 8007254:	6812      	ldr	r2, [r2, #0]
 8007256:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800725a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800725e:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	68da      	ldr	r2, [r3, #12]
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800726e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	691a      	ldr	r2, [r3, #16]
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	695b      	ldr	r3, [r3, #20]
 8007278:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	699b      	ldr	r3, [r3, #24]
 8007280:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	430a      	orrs	r2, r1
 8007288:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	69d9      	ldr	r1, [r3, #28]
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	6a1a      	ldr	r2, [r3, #32]
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	430a      	orrs	r2, r1
 8007298:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	681a      	ldr	r2, [r3, #0]
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	f042 0201 	orr.w	r2, r2, #1
 80072a8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	2200      	movs	r2, #0
 80072ae:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2220      	movs	r2, #32
 80072b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2200      	movs	r2, #0
 80072bc:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2200      	movs	r2, #0
 80072c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80072c6:	2300      	movs	r3, #0
}
 80072c8:	4618      	mov	r0, r3
 80072ca:	3708      	adds	r7, #8
 80072cc:	46bd      	mov	sp, r7
 80072ce:	bd80      	pop	{r7, pc}

080072d0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b088      	sub	sp, #32
 80072d4:	af02      	add	r7, sp, #8
 80072d6:	60f8      	str	r0, [r7, #12]
 80072d8:	607a      	str	r2, [r7, #4]
 80072da:	461a      	mov	r2, r3
 80072dc:	460b      	mov	r3, r1
 80072de:	817b      	strh	r3, [r7, #10]
 80072e0:	4613      	mov	r3, r2
 80072e2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80072ea:	b2db      	uxtb	r3, r3
 80072ec:	2b20      	cmp	r3, #32
 80072ee:	f040 80da 	bne.w	80074a6 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80072f8:	2b01      	cmp	r3, #1
 80072fa:	d101      	bne.n	8007300 <HAL_I2C_Master_Transmit+0x30>
 80072fc:	2302      	movs	r3, #2
 80072fe:	e0d3      	b.n	80074a8 <HAL_I2C_Master_Transmit+0x1d8>
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	2201      	movs	r2, #1
 8007304:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007308:	f7ff fb9e 	bl	8006a48 <HAL_GetTick>
 800730c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800730e:	697b      	ldr	r3, [r7, #20]
 8007310:	9300      	str	r3, [sp, #0]
 8007312:	2319      	movs	r3, #25
 8007314:	2201      	movs	r2, #1
 8007316:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800731a:	68f8      	ldr	r0, [r7, #12]
 800731c:	f000 fbe0 	bl	8007ae0 <I2C_WaitOnFlagUntilTimeout>
 8007320:	4603      	mov	r3, r0
 8007322:	2b00      	cmp	r3, #0
 8007324:	d001      	beq.n	800732a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8007326:	2301      	movs	r3, #1
 8007328:	e0be      	b.n	80074a8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	2221      	movs	r2, #33	; 0x21
 800732e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	2210      	movs	r2, #16
 8007336:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	2200      	movs	r2, #0
 800733e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	687a      	ldr	r2, [r7, #4]
 8007344:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	893a      	ldrh	r2, [r7, #8]
 800734a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	2200      	movs	r2, #0
 8007350:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007356:	b29b      	uxth	r3, r3
 8007358:	2bff      	cmp	r3, #255	; 0xff
 800735a:	d90e      	bls.n	800737a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	22ff      	movs	r2, #255	; 0xff
 8007360:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007366:	b2da      	uxtb	r2, r3
 8007368:	8979      	ldrh	r1, [r7, #10]
 800736a:	4b51      	ldr	r3, [pc, #324]	; (80074b0 <HAL_I2C_Master_Transmit+0x1e0>)
 800736c:	9300      	str	r3, [sp, #0]
 800736e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007372:	68f8      	ldr	r0, [r7, #12]
 8007374:	f000 fd5c 	bl	8007e30 <I2C_TransferConfig>
 8007378:	e06c      	b.n	8007454 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800737e:	b29a      	uxth	r2, r3
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007388:	b2da      	uxtb	r2, r3
 800738a:	8979      	ldrh	r1, [r7, #10]
 800738c:	4b48      	ldr	r3, [pc, #288]	; (80074b0 <HAL_I2C_Master_Transmit+0x1e0>)
 800738e:	9300      	str	r3, [sp, #0]
 8007390:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007394:	68f8      	ldr	r0, [r7, #12]
 8007396:	f000 fd4b 	bl	8007e30 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800739a:	e05b      	b.n	8007454 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800739c:	697a      	ldr	r2, [r7, #20]
 800739e:	6a39      	ldr	r1, [r7, #32]
 80073a0:	68f8      	ldr	r0, [r7, #12]
 80073a2:	f000 fbdd 	bl	8007b60 <I2C_WaitOnTXISFlagUntilTimeout>
 80073a6:	4603      	mov	r3, r0
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d001      	beq.n	80073b0 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80073ac:	2301      	movs	r3, #1
 80073ae:	e07b      	b.n	80074a8 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073b4:	781a      	ldrb	r2, [r3, #0]
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073c0:	1c5a      	adds	r2, r3, #1
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073ca:	b29b      	uxth	r3, r3
 80073cc:	3b01      	subs	r3, #1
 80073ce:	b29a      	uxth	r2, r3
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073d8:	3b01      	subs	r3, #1
 80073da:	b29a      	uxth	r2, r3
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073e4:	b29b      	uxth	r3, r3
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d034      	beq.n	8007454 <HAL_I2C_Master_Transmit+0x184>
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d130      	bne.n	8007454 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80073f2:	697b      	ldr	r3, [r7, #20]
 80073f4:	9300      	str	r3, [sp, #0]
 80073f6:	6a3b      	ldr	r3, [r7, #32]
 80073f8:	2200      	movs	r2, #0
 80073fa:	2180      	movs	r1, #128	; 0x80
 80073fc:	68f8      	ldr	r0, [r7, #12]
 80073fe:	f000 fb6f 	bl	8007ae0 <I2C_WaitOnFlagUntilTimeout>
 8007402:	4603      	mov	r3, r0
 8007404:	2b00      	cmp	r3, #0
 8007406:	d001      	beq.n	800740c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8007408:	2301      	movs	r3, #1
 800740a:	e04d      	b.n	80074a8 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007410:	b29b      	uxth	r3, r3
 8007412:	2bff      	cmp	r3, #255	; 0xff
 8007414:	d90e      	bls.n	8007434 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	22ff      	movs	r2, #255	; 0xff
 800741a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007420:	b2da      	uxtb	r2, r3
 8007422:	8979      	ldrh	r1, [r7, #10]
 8007424:	2300      	movs	r3, #0
 8007426:	9300      	str	r3, [sp, #0]
 8007428:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800742c:	68f8      	ldr	r0, [r7, #12]
 800742e:	f000 fcff 	bl	8007e30 <I2C_TransferConfig>
 8007432:	e00f      	b.n	8007454 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007438:	b29a      	uxth	r2, r3
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007442:	b2da      	uxtb	r2, r3
 8007444:	8979      	ldrh	r1, [r7, #10]
 8007446:	2300      	movs	r3, #0
 8007448:	9300      	str	r3, [sp, #0]
 800744a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800744e:	68f8      	ldr	r0, [r7, #12]
 8007450:	f000 fcee 	bl	8007e30 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007458:	b29b      	uxth	r3, r3
 800745a:	2b00      	cmp	r3, #0
 800745c:	d19e      	bne.n	800739c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800745e:	697a      	ldr	r2, [r7, #20]
 8007460:	6a39      	ldr	r1, [r7, #32]
 8007462:	68f8      	ldr	r0, [r7, #12]
 8007464:	f000 fbbc 	bl	8007be0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007468:	4603      	mov	r3, r0
 800746a:	2b00      	cmp	r3, #0
 800746c:	d001      	beq.n	8007472 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800746e:	2301      	movs	r3, #1
 8007470:	e01a      	b.n	80074a8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	2220      	movs	r2, #32
 8007478:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	6859      	ldr	r1, [r3, #4]
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	681a      	ldr	r2, [r3, #0]
 8007484:	4b0b      	ldr	r3, [pc, #44]	; (80074b4 <HAL_I2C_Master_Transmit+0x1e4>)
 8007486:	400b      	ands	r3, r1
 8007488:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	2220      	movs	r2, #32
 800748e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	2200      	movs	r2, #0
 8007496:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	2200      	movs	r2, #0
 800749e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80074a2:	2300      	movs	r3, #0
 80074a4:	e000      	b.n	80074a8 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80074a6:	2302      	movs	r3, #2
  }
}
 80074a8:	4618      	mov	r0, r3
 80074aa:	3718      	adds	r7, #24
 80074ac:	46bd      	mov	sp, r7
 80074ae:	bd80      	pop	{r7, pc}
 80074b0:	80002000 	.word	0x80002000
 80074b4:	fe00e800 	.word	0xfe00e800

080074b8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b088      	sub	sp, #32
 80074bc:	af02      	add	r7, sp, #8
 80074be:	60f8      	str	r0, [r7, #12]
 80074c0:	4608      	mov	r0, r1
 80074c2:	4611      	mov	r1, r2
 80074c4:	461a      	mov	r2, r3
 80074c6:	4603      	mov	r3, r0
 80074c8:	817b      	strh	r3, [r7, #10]
 80074ca:	460b      	mov	r3, r1
 80074cc:	813b      	strh	r3, [r7, #8]
 80074ce:	4613      	mov	r3, r2
 80074d0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80074d8:	b2db      	uxtb	r3, r3
 80074da:	2b20      	cmp	r3, #32
 80074dc:	f040 80f9 	bne.w	80076d2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80074e0:	6a3b      	ldr	r3, [r7, #32]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d002      	beq.n	80074ec <HAL_I2C_Mem_Write+0x34>
 80074e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d105      	bne.n	80074f8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80074f2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80074f4:	2301      	movs	r3, #1
 80074f6:	e0ed      	b.n	80076d4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80074fe:	2b01      	cmp	r3, #1
 8007500:	d101      	bne.n	8007506 <HAL_I2C_Mem_Write+0x4e>
 8007502:	2302      	movs	r3, #2
 8007504:	e0e6      	b.n	80076d4 <HAL_I2C_Mem_Write+0x21c>
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	2201      	movs	r2, #1
 800750a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800750e:	f7ff fa9b 	bl	8006a48 <HAL_GetTick>
 8007512:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007514:	697b      	ldr	r3, [r7, #20]
 8007516:	9300      	str	r3, [sp, #0]
 8007518:	2319      	movs	r3, #25
 800751a:	2201      	movs	r2, #1
 800751c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007520:	68f8      	ldr	r0, [r7, #12]
 8007522:	f000 fadd 	bl	8007ae0 <I2C_WaitOnFlagUntilTimeout>
 8007526:	4603      	mov	r3, r0
 8007528:	2b00      	cmp	r3, #0
 800752a:	d001      	beq.n	8007530 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800752c:	2301      	movs	r3, #1
 800752e:	e0d1      	b.n	80076d4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	2221      	movs	r2, #33	; 0x21
 8007534:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	2240      	movs	r2, #64	; 0x40
 800753c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	2200      	movs	r2, #0
 8007544:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	6a3a      	ldr	r2, [r7, #32]
 800754a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007550:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	2200      	movs	r2, #0
 8007556:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007558:	88f8      	ldrh	r0, [r7, #6]
 800755a:	893a      	ldrh	r2, [r7, #8]
 800755c:	8979      	ldrh	r1, [r7, #10]
 800755e:	697b      	ldr	r3, [r7, #20]
 8007560:	9301      	str	r3, [sp, #4]
 8007562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007564:	9300      	str	r3, [sp, #0]
 8007566:	4603      	mov	r3, r0
 8007568:	68f8      	ldr	r0, [r7, #12]
 800756a:	f000 f9ed 	bl	8007948 <I2C_RequestMemoryWrite>
 800756e:	4603      	mov	r3, r0
 8007570:	2b00      	cmp	r3, #0
 8007572:	d005      	beq.n	8007580 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	2200      	movs	r2, #0
 8007578:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800757c:	2301      	movs	r3, #1
 800757e:	e0a9      	b.n	80076d4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007584:	b29b      	uxth	r3, r3
 8007586:	2bff      	cmp	r3, #255	; 0xff
 8007588:	d90e      	bls.n	80075a8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	22ff      	movs	r2, #255	; 0xff
 800758e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007594:	b2da      	uxtb	r2, r3
 8007596:	8979      	ldrh	r1, [r7, #10]
 8007598:	2300      	movs	r3, #0
 800759a:	9300      	str	r3, [sp, #0]
 800759c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80075a0:	68f8      	ldr	r0, [r7, #12]
 80075a2:	f000 fc45 	bl	8007e30 <I2C_TransferConfig>
 80075a6:	e00f      	b.n	80075c8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075ac:	b29a      	uxth	r2, r3
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075b6:	b2da      	uxtb	r2, r3
 80075b8:	8979      	ldrh	r1, [r7, #10]
 80075ba:	2300      	movs	r3, #0
 80075bc:	9300      	str	r3, [sp, #0]
 80075be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80075c2:	68f8      	ldr	r0, [r7, #12]
 80075c4:	f000 fc34 	bl	8007e30 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80075c8:	697a      	ldr	r2, [r7, #20]
 80075ca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80075cc:	68f8      	ldr	r0, [r7, #12]
 80075ce:	f000 fac7 	bl	8007b60 <I2C_WaitOnTXISFlagUntilTimeout>
 80075d2:	4603      	mov	r3, r0
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d001      	beq.n	80075dc <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80075d8:	2301      	movs	r3, #1
 80075da:	e07b      	b.n	80076d4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075e0:	781a      	ldrb	r2, [r3, #0]
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ec:	1c5a      	adds	r2, r3, #1
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075f6:	b29b      	uxth	r3, r3
 80075f8:	3b01      	subs	r3, #1
 80075fa:	b29a      	uxth	r2, r3
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007604:	3b01      	subs	r3, #1
 8007606:	b29a      	uxth	r2, r3
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007610:	b29b      	uxth	r3, r3
 8007612:	2b00      	cmp	r3, #0
 8007614:	d034      	beq.n	8007680 <HAL_I2C_Mem_Write+0x1c8>
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800761a:	2b00      	cmp	r3, #0
 800761c:	d130      	bne.n	8007680 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800761e:	697b      	ldr	r3, [r7, #20]
 8007620:	9300      	str	r3, [sp, #0]
 8007622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007624:	2200      	movs	r2, #0
 8007626:	2180      	movs	r1, #128	; 0x80
 8007628:	68f8      	ldr	r0, [r7, #12]
 800762a:	f000 fa59 	bl	8007ae0 <I2C_WaitOnFlagUntilTimeout>
 800762e:	4603      	mov	r3, r0
 8007630:	2b00      	cmp	r3, #0
 8007632:	d001      	beq.n	8007638 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8007634:	2301      	movs	r3, #1
 8007636:	e04d      	b.n	80076d4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800763c:	b29b      	uxth	r3, r3
 800763e:	2bff      	cmp	r3, #255	; 0xff
 8007640:	d90e      	bls.n	8007660 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	22ff      	movs	r2, #255	; 0xff
 8007646:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800764c:	b2da      	uxtb	r2, r3
 800764e:	8979      	ldrh	r1, [r7, #10]
 8007650:	2300      	movs	r3, #0
 8007652:	9300      	str	r3, [sp, #0]
 8007654:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007658:	68f8      	ldr	r0, [r7, #12]
 800765a:	f000 fbe9 	bl	8007e30 <I2C_TransferConfig>
 800765e:	e00f      	b.n	8007680 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007664:	b29a      	uxth	r2, r3
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800766e:	b2da      	uxtb	r2, r3
 8007670:	8979      	ldrh	r1, [r7, #10]
 8007672:	2300      	movs	r3, #0
 8007674:	9300      	str	r3, [sp, #0]
 8007676:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800767a:	68f8      	ldr	r0, [r7, #12]
 800767c:	f000 fbd8 	bl	8007e30 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007684:	b29b      	uxth	r3, r3
 8007686:	2b00      	cmp	r3, #0
 8007688:	d19e      	bne.n	80075c8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800768a:	697a      	ldr	r2, [r7, #20]
 800768c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800768e:	68f8      	ldr	r0, [r7, #12]
 8007690:	f000 faa6 	bl	8007be0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007694:	4603      	mov	r3, r0
 8007696:	2b00      	cmp	r3, #0
 8007698:	d001      	beq.n	800769e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800769a:	2301      	movs	r3, #1
 800769c:	e01a      	b.n	80076d4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	2220      	movs	r2, #32
 80076a4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	6859      	ldr	r1, [r3, #4]
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	681a      	ldr	r2, [r3, #0]
 80076b0:	4b0a      	ldr	r3, [pc, #40]	; (80076dc <HAL_I2C_Mem_Write+0x224>)
 80076b2:	400b      	ands	r3, r1
 80076b4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	2220      	movs	r2, #32
 80076ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	2200      	movs	r2, #0
 80076c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	2200      	movs	r2, #0
 80076ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80076ce:	2300      	movs	r3, #0
 80076d0:	e000      	b.n	80076d4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80076d2:	2302      	movs	r3, #2
  }
}
 80076d4:	4618      	mov	r0, r3
 80076d6:	3718      	adds	r7, #24
 80076d8:	46bd      	mov	sp, r7
 80076da:	bd80      	pop	{r7, pc}
 80076dc:	fe00e800 	.word	0xfe00e800

080076e0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80076e0:	b580      	push	{r7, lr}
 80076e2:	b088      	sub	sp, #32
 80076e4:	af02      	add	r7, sp, #8
 80076e6:	60f8      	str	r0, [r7, #12]
 80076e8:	4608      	mov	r0, r1
 80076ea:	4611      	mov	r1, r2
 80076ec:	461a      	mov	r2, r3
 80076ee:	4603      	mov	r3, r0
 80076f0:	817b      	strh	r3, [r7, #10]
 80076f2:	460b      	mov	r3, r1
 80076f4:	813b      	strh	r3, [r7, #8]
 80076f6:	4613      	mov	r3, r2
 80076f8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007700:	b2db      	uxtb	r3, r3
 8007702:	2b20      	cmp	r3, #32
 8007704:	f040 80fd 	bne.w	8007902 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8007708:	6a3b      	ldr	r3, [r7, #32]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d002      	beq.n	8007714 <HAL_I2C_Mem_Read+0x34>
 800770e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007710:	2b00      	cmp	r3, #0
 8007712:	d105      	bne.n	8007720 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	f44f 7200 	mov.w	r2, #512	; 0x200
 800771a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800771c:	2301      	movs	r3, #1
 800771e:	e0f1      	b.n	8007904 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007726:	2b01      	cmp	r3, #1
 8007728:	d101      	bne.n	800772e <HAL_I2C_Mem_Read+0x4e>
 800772a:	2302      	movs	r3, #2
 800772c:	e0ea      	b.n	8007904 <HAL_I2C_Mem_Read+0x224>
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	2201      	movs	r2, #1
 8007732:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007736:	f7ff f987 	bl	8006a48 <HAL_GetTick>
 800773a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800773c:	697b      	ldr	r3, [r7, #20]
 800773e:	9300      	str	r3, [sp, #0]
 8007740:	2319      	movs	r3, #25
 8007742:	2201      	movs	r2, #1
 8007744:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007748:	68f8      	ldr	r0, [r7, #12]
 800774a:	f000 f9c9 	bl	8007ae0 <I2C_WaitOnFlagUntilTimeout>
 800774e:	4603      	mov	r3, r0
 8007750:	2b00      	cmp	r3, #0
 8007752:	d001      	beq.n	8007758 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8007754:	2301      	movs	r3, #1
 8007756:	e0d5      	b.n	8007904 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	2222      	movs	r2, #34	; 0x22
 800775c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	2240      	movs	r2, #64	; 0x40
 8007764:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	2200      	movs	r2, #0
 800776c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	6a3a      	ldr	r2, [r7, #32]
 8007772:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007778:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	2200      	movs	r2, #0
 800777e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007780:	88f8      	ldrh	r0, [r7, #6]
 8007782:	893a      	ldrh	r2, [r7, #8]
 8007784:	8979      	ldrh	r1, [r7, #10]
 8007786:	697b      	ldr	r3, [r7, #20]
 8007788:	9301      	str	r3, [sp, #4]
 800778a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800778c:	9300      	str	r3, [sp, #0]
 800778e:	4603      	mov	r3, r0
 8007790:	68f8      	ldr	r0, [r7, #12]
 8007792:	f000 f92d 	bl	80079f0 <I2C_RequestMemoryRead>
 8007796:	4603      	mov	r3, r0
 8007798:	2b00      	cmp	r3, #0
 800779a:	d005      	beq.n	80077a8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	2200      	movs	r2, #0
 80077a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80077a4:	2301      	movs	r3, #1
 80077a6:	e0ad      	b.n	8007904 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077ac:	b29b      	uxth	r3, r3
 80077ae:	2bff      	cmp	r3, #255	; 0xff
 80077b0:	d90e      	bls.n	80077d0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	22ff      	movs	r2, #255	; 0xff
 80077b6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077bc:	b2da      	uxtb	r2, r3
 80077be:	8979      	ldrh	r1, [r7, #10]
 80077c0:	4b52      	ldr	r3, [pc, #328]	; (800790c <HAL_I2C_Mem_Read+0x22c>)
 80077c2:	9300      	str	r3, [sp, #0]
 80077c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80077c8:	68f8      	ldr	r0, [r7, #12]
 80077ca:	f000 fb31 	bl	8007e30 <I2C_TransferConfig>
 80077ce:	e00f      	b.n	80077f0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077d4:	b29a      	uxth	r2, r3
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077de:	b2da      	uxtb	r2, r3
 80077e0:	8979      	ldrh	r1, [r7, #10]
 80077e2:	4b4a      	ldr	r3, [pc, #296]	; (800790c <HAL_I2C_Mem_Read+0x22c>)
 80077e4:	9300      	str	r3, [sp, #0]
 80077e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80077ea:	68f8      	ldr	r0, [r7, #12]
 80077ec:	f000 fb20 	bl	8007e30 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80077f0:	697b      	ldr	r3, [r7, #20]
 80077f2:	9300      	str	r3, [sp, #0]
 80077f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077f6:	2200      	movs	r2, #0
 80077f8:	2104      	movs	r1, #4
 80077fa:	68f8      	ldr	r0, [r7, #12]
 80077fc:	f000 f970 	bl	8007ae0 <I2C_WaitOnFlagUntilTimeout>
 8007800:	4603      	mov	r3, r0
 8007802:	2b00      	cmp	r3, #0
 8007804:	d001      	beq.n	800780a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8007806:	2301      	movs	r3, #1
 8007808:	e07c      	b.n	8007904 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007814:	b2d2      	uxtb	r2, r2
 8007816:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800781c:	1c5a      	adds	r2, r3, #1
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007826:	3b01      	subs	r3, #1
 8007828:	b29a      	uxth	r2, r3
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007832:	b29b      	uxth	r3, r3
 8007834:	3b01      	subs	r3, #1
 8007836:	b29a      	uxth	r2, r3
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007840:	b29b      	uxth	r3, r3
 8007842:	2b00      	cmp	r3, #0
 8007844:	d034      	beq.n	80078b0 <HAL_I2C_Mem_Read+0x1d0>
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800784a:	2b00      	cmp	r3, #0
 800784c:	d130      	bne.n	80078b0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800784e:	697b      	ldr	r3, [r7, #20]
 8007850:	9300      	str	r3, [sp, #0]
 8007852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007854:	2200      	movs	r2, #0
 8007856:	2180      	movs	r1, #128	; 0x80
 8007858:	68f8      	ldr	r0, [r7, #12]
 800785a:	f000 f941 	bl	8007ae0 <I2C_WaitOnFlagUntilTimeout>
 800785e:	4603      	mov	r3, r0
 8007860:	2b00      	cmp	r3, #0
 8007862:	d001      	beq.n	8007868 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8007864:	2301      	movs	r3, #1
 8007866:	e04d      	b.n	8007904 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800786c:	b29b      	uxth	r3, r3
 800786e:	2bff      	cmp	r3, #255	; 0xff
 8007870:	d90e      	bls.n	8007890 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	22ff      	movs	r2, #255	; 0xff
 8007876:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800787c:	b2da      	uxtb	r2, r3
 800787e:	8979      	ldrh	r1, [r7, #10]
 8007880:	2300      	movs	r3, #0
 8007882:	9300      	str	r3, [sp, #0]
 8007884:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007888:	68f8      	ldr	r0, [r7, #12]
 800788a:	f000 fad1 	bl	8007e30 <I2C_TransferConfig>
 800788e:	e00f      	b.n	80078b0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007894:	b29a      	uxth	r2, r3
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800789e:	b2da      	uxtb	r2, r3
 80078a0:	8979      	ldrh	r1, [r7, #10]
 80078a2:	2300      	movs	r3, #0
 80078a4:	9300      	str	r3, [sp, #0]
 80078a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80078aa:	68f8      	ldr	r0, [r7, #12]
 80078ac:	f000 fac0 	bl	8007e30 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078b4:	b29b      	uxth	r3, r3
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d19a      	bne.n	80077f0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80078ba:	697a      	ldr	r2, [r7, #20]
 80078bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80078be:	68f8      	ldr	r0, [r7, #12]
 80078c0:	f000 f98e 	bl	8007be0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80078c4:	4603      	mov	r3, r0
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d001      	beq.n	80078ce <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80078ca:	2301      	movs	r3, #1
 80078cc:	e01a      	b.n	8007904 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	2220      	movs	r2, #32
 80078d4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	6859      	ldr	r1, [r3, #4]
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	681a      	ldr	r2, [r3, #0]
 80078e0:	4b0b      	ldr	r3, [pc, #44]	; (8007910 <HAL_I2C_Mem_Read+0x230>)
 80078e2:	400b      	ands	r3, r1
 80078e4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	2220      	movs	r2, #32
 80078ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	2200      	movs	r2, #0
 80078f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	2200      	movs	r2, #0
 80078fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80078fe:	2300      	movs	r3, #0
 8007900:	e000      	b.n	8007904 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8007902:	2302      	movs	r3, #2
  }
}
 8007904:	4618      	mov	r0, r3
 8007906:	3718      	adds	r7, #24
 8007908:	46bd      	mov	sp, r7
 800790a:	bd80      	pop	{r7, pc}
 800790c:	80002400 	.word	0x80002400
 8007910:	fe00e800 	.word	0xfe00e800

08007914 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8007914:	b580      	push	{r7, lr}
 8007916:	b084      	sub	sp, #16
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	699b      	ldr	r3, [r3, #24]
 8007922:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007930:	2b00      	cmp	r3, #0
 8007932:	d005      	beq.n	8007940 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007938:	68ba      	ldr	r2, [r7, #8]
 800793a:	68f9      	ldr	r1, [r7, #12]
 800793c:	6878      	ldr	r0, [r7, #4]
 800793e:	4798      	blx	r3
  }
}
 8007940:	bf00      	nop
 8007942:	3710      	adds	r7, #16
 8007944:	46bd      	mov	sp, r7
 8007946:	bd80      	pop	{r7, pc}

08007948 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b086      	sub	sp, #24
 800794c:	af02      	add	r7, sp, #8
 800794e:	60f8      	str	r0, [r7, #12]
 8007950:	4608      	mov	r0, r1
 8007952:	4611      	mov	r1, r2
 8007954:	461a      	mov	r2, r3
 8007956:	4603      	mov	r3, r0
 8007958:	817b      	strh	r3, [r7, #10]
 800795a:	460b      	mov	r3, r1
 800795c:	813b      	strh	r3, [r7, #8]
 800795e:	4613      	mov	r3, r2
 8007960:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8007962:	88fb      	ldrh	r3, [r7, #6]
 8007964:	b2da      	uxtb	r2, r3
 8007966:	8979      	ldrh	r1, [r7, #10]
 8007968:	4b20      	ldr	r3, [pc, #128]	; (80079ec <I2C_RequestMemoryWrite+0xa4>)
 800796a:	9300      	str	r3, [sp, #0]
 800796c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007970:	68f8      	ldr	r0, [r7, #12]
 8007972:	f000 fa5d 	bl	8007e30 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007976:	69fa      	ldr	r2, [r7, #28]
 8007978:	69b9      	ldr	r1, [r7, #24]
 800797a:	68f8      	ldr	r0, [r7, #12]
 800797c:	f000 f8f0 	bl	8007b60 <I2C_WaitOnTXISFlagUntilTimeout>
 8007980:	4603      	mov	r3, r0
 8007982:	2b00      	cmp	r3, #0
 8007984:	d001      	beq.n	800798a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8007986:	2301      	movs	r3, #1
 8007988:	e02c      	b.n	80079e4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800798a:	88fb      	ldrh	r3, [r7, #6]
 800798c:	2b01      	cmp	r3, #1
 800798e:	d105      	bne.n	800799c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007990:	893b      	ldrh	r3, [r7, #8]
 8007992:	b2da      	uxtb	r2, r3
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	629a      	str	r2, [r3, #40]	; 0x28
 800799a:	e015      	b.n	80079c8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800799c:	893b      	ldrh	r3, [r7, #8]
 800799e:	0a1b      	lsrs	r3, r3, #8
 80079a0:	b29b      	uxth	r3, r3
 80079a2:	b2da      	uxtb	r2, r3
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80079aa:	69fa      	ldr	r2, [r7, #28]
 80079ac:	69b9      	ldr	r1, [r7, #24]
 80079ae:	68f8      	ldr	r0, [r7, #12]
 80079b0:	f000 f8d6 	bl	8007b60 <I2C_WaitOnTXISFlagUntilTimeout>
 80079b4:	4603      	mov	r3, r0
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d001      	beq.n	80079be <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80079ba:	2301      	movs	r3, #1
 80079bc:	e012      	b.n	80079e4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80079be:	893b      	ldrh	r3, [r7, #8]
 80079c0:	b2da      	uxtb	r2, r3
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80079c8:	69fb      	ldr	r3, [r7, #28]
 80079ca:	9300      	str	r3, [sp, #0]
 80079cc:	69bb      	ldr	r3, [r7, #24]
 80079ce:	2200      	movs	r2, #0
 80079d0:	2180      	movs	r1, #128	; 0x80
 80079d2:	68f8      	ldr	r0, [r7, #12]
 80079d4:	f000 f884 	bl	8007ae0 <I2C_WaitOnFlagUntilTimeout>
 80079d8:	4603      	mov	r3, r0
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d001      	beq.n	80079e2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80079de:	2301      	movs	r3, #1
 80079e0:	e000      	b.n	80079e4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80079e2:	2300      	movs	r3, #0
}
 80079e4:	4618      	mov	r0, r3
 80079e6:	3710      	adds	r7, #16
 80079e8:	46bd      	mov	sp, r7
 80079ea:	bd80      	pop	{r7, pc}
 80079ec:	80002000 	.word	0x80002000

080079f0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b086      	sub	sp, #24
 80079f4:	af02      	add	r7, sp, #8
 80079f6:	60f8      	str	r0, [r7, #12]
 80079f8:	4608      	mov	r0, r1
 80079fa:	4611      	mov	r1, r2
 80079fc:	461a      	mov	r2, r3
 80079fe:	4603      	mov	r3, r0
 8007a00:	817b      	strh	r3, [r7, #10]
 8007a02:	460b      	mov	r3, r1
 8007a04:	813b      	strh	r3, [r7, #8]
 8007a06:	4613      	mov	r3, r2
 8007a08:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8007a0a:	88fb      	ldrh	r3, [r7, #6]
 8007a0c:	b2da      	uxtb	r2, r3
 8007a0e:	8979      	ldrh	r1, [r7, #10]
 8007a10:	4b20      	ldr	r3, [pc, #128]	; (8007a94 <I2C_RequestMemoryRead+0xa4>)
 8007a12:	9300      	str	r3, [sp, #0]
 8007a14:	2300      	movs	r3, #0
 8007a16:	68f8      	ldr	r0, [r7, #12]
 8007a18:	f000 fa0a 	bl	8007e30 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007a1c:	69fa      	ldr	r2, [r7, #28]
 8007a1e:	69b9      	ldr	r1, [r7, #24]
 8007a20:	68f8      	ldr	r0, [r7, #12]
 8007a22:	f000 f89d 	bl	8007b60 <I2C_WaitOnTXISFlagUntilTimeout>
 8007a26:	4603      	mov	r3, r0
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d001      	beq.n	8007a30 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8007a2c:	2301      	movs	r3, #1
 8007a2e:	e02c      	b.n	8007a8a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007a30:	88fb      	ldrh	r3, [r7, #6]
 8007a32:	2b01      	cmp	r3, #1
 8007a34:	d105      	bne.n	8007a42 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007a36:	893b      	ldrh	r3, [r7, #8]
 8007a38:	b2da      	uxtb	r2, r3
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	629a      	str	r2, [r3, #40]	; 0x28
 8007a40:	e015      	b.n	8007a6e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007a42:	893b      	ldrh	r3, [r7, #8]
 8007a44:	0a1b      	lsrs	r3, r3, #8
 8007a46:	b29b      	uxth	r3, r3
 8007a48:	b2da      	uxtb	r2, r3
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007a50:	69fa      	ldr	r2, [r7, #28]
 8007a52:	69b9      	ldr	r1, [r7, #24]
 8007a54:	68f8      	ldr	r0, [r7, #12]
 8007a56:	f000 f883 	bl	8007b60 <I2C_WaitOnTXISFlagUntilTimeout>
 8007a5a:	4603      	mov	r3, r0
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d001      	beq.n	8007a64 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8007a60:	2301      	movs	r3, #1
 8007a62:	e012      	b.n	8007a8a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007a64:	893b      	ldrh	r3, [r7, #8]
 8007a66:	b2da      	uxtb	r2, r3
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8007a6e:	69fb      	ldr	r3, [r7, #28]
 8007a70:	9300      	str	r3, [sp, #0]
 8007a72:	69bb      	ldr	r3, [r7, #24]
 8007a74:	2200      	movs	r2, #0
 8007a76:	2140      	movs	r1, #64	; 0x40
 8007a78:	68f8      	ldr	r0, [r7, #12]
 8007a7a:	f000 f831 	bl	8007ae0 <I2C_WaitOnFlagUntilTimeout>
 8007a7e:	4603      	mov	r3, r0
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d001      	beq.n	8007a88 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8007a84:	2301      	movs	r3, #1
 8007a86:	e000      	b.n	8007a8a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8007a88:	2300      	movs	r3, #0
}
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	3710      	adds	r7, #16
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	bd80      	pop	{r7, pc}
 8007a92:	bf00      	nop
 8007a94:	80002000 	.word	0x80002000

08007a98 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007a98:	b480      	push	{r7}
 8007a9a:	b083      	sub	sp, #12
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	699b      	ldr	r3, [r3, #24]
 8007aa6:	f003 0302 	and.w	r3, r3, #2
 8007aaa:	2b02      	cmp	r3, #2
 8007aac:	d103      	bne.n	8007ab6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	699b      	ldr	r3, [r3, #24]
 8007abc:	f003 0301 	and.w	r3, r3, #1
 8007ac0:	2b01      	cmp	r3, #1
 8007ac2:	d007      	beq.n	8007ad4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	699a      	ldr	r2, [r3, #24]
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f042 0201 	orr.w	r2, r2, #1
 8007ad2:	619a      	str	r2, [r3, #24]
  }
}
 8007ad4:	bf00      	nop
 8007ad6:	370c      	adds	r7, #12
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ade:	4770      	bx	lr

08007ae0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b084      	sub	sp, #16
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	60f8      	str	r0, [r7, #12]
 8007ae8:	60b9      	str	r1, [r7, #8]
 8007aea:	603b      	str	r3, [r7, #0]
 8007aec:	4613      	mov	r3, r2
 8007aee:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007af0:	e022      	b.n	8007b38 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007af2:	683b      	ldr	r3, [r7, #0]
 8007af4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007af8:	d01e      	beq.n	8007b38 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007afa:	f7fe ffa5 	bl	8006a48 <HAL_GetTick>
 8007afe:	4602      	mov	r2, r0
 8007b00:	69bb      	ldr	r3, [r7, #24]
 8007b02:	1ad3      	subs	r3, r2, r3
 8007b04:	683a      	ldr	r2, [r7, #0]
 8007b06:	429a      	cmp	r2, r3
 8007b08:	d302      	bcc.n	8007b10 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007b0a:	683b      	ldr	r3, [r7, #0]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d113      	bne.n	8007b38 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b14:	f043 0220 	orr.w	r2, r3, #32
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	2220      	movs	r2, #32
 8007b20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	2200      	movs	r2, #0
 8007b28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	2200      	movs	r2, #0
 8007b30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8007b34:	2301      	movs	r3, #1
 8007b36:	e00f      	b.n	8007b58 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	699a      	ldr	r2, [r3, #24]
 8007b3e:	68bb      	ldr	r3, [r7, #8]
 8007b40:	4013      	ands	r3, r2
 8007b42:	68ba      	ldr	r2, [r7, #8]
 8007b44:	429a      	cmp	r2, r3
 8007b46:	bf0c      	ite	eq
 8007b48:	2301      	moveq	r3, #1
 8007b4a:	2300      	movne	r3, #0
 8007b4c:	b2db      	uxtb	r3, r3
 8007b4e:	461a      	mov	r2, r3
 8007b50:	79fb      	ldrb	r3, [r7, #7]
 8007b52:	429a      	cmp	r2, r3
 8007b54:	d0cd      	beq.n	8007af2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007b56:	2300      	movs	r3, #0
}
 8007b58:	4618      	mov	r0, r3
 8007b5a:	3710      	adds	r7, #16
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	bd80      	pop	{r7, pc}

08007b60 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b084      	sub	sp, #16
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	60f8      	str	r0, [r7, #12]
 8007b68:	60b9      	str	r1, [r7, #8]
 8007b6a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007b6c:	e02c      	b.n	8007bc8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007b6e:	687a      	ldr	r2, [r7, #4]
 8007b70:	68b9      	ldr	r1, [r7, #8]
 8007b72:	68f8      	ldr	r0, [r7, #12]
 8007b74:	f000 f870 	bl	8007c58 <I2C_IsErrorOccurred>
 8007b78:	4603      	mov	r3, r0
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d001      	beq.n	8007b82 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007b7e:	2301      	movs	r3, #1
 8007b80:	e02a      	b.n	8007bd8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b82:	68bb      	ldr	r3, [r7, #8]
 8007b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b88:	d01e      	beq.n	8007bc8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b8a:	f7fe ff5d 	bl	8006a48 <HAL_GetTick>
 8007b8e:	4602      	mov	r2, r0
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	1ad3      	subs	r3, r2, r3
 8007b94:	68ba      	ldr	r2, [r7, #8]
 8007b96:	429a      	cmp	r2, r3
 8007b98:	d302      	bcc.n	8007ba0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8007b9a:	68bb      	ldr	r3, [r7, #8]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d113      	bne.n	8007bc8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ba4:	f043 0220 	orr.w	r2, r3, #32
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	2220      	movs	r2, #32
 8007bb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8007bc4:	2301      	movs	r3, #1
 8007bc6:	e007      	b.n	8007bd8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	699b      	ldr	r3, [r3, #24]
 8007bce:	f003 0302 	and.w	r3, r3, #2
 8007bd2:	2b02      	cmp	r3, #2
 8007bd4:	d1cb      	bne.n	8007b6e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007bd6:	2300      	movs	r3, #0
}
 8007bd8:	4618      	mov	r0, r3
 8007bda:	3710      	adds	r7, #16
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	bd80      	pop	{r7, pc}

08007be0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b084      	sub	sp, #16
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	60f8      	str	r0, [r7, #12]
 8007be8:	60b9      	str	r1, [r7, #8]
 8007bea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007bec:	e028      	b.n	8007c40 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007bee:	687a      	ldr	r2, [r7, #4]
 8007bf0:	68b9      	ldr	r1, [r7, #8]
 8007bf2:	68f8      	ldr	r0, [r7, #12]
 8007bf4:	f000 f830 	bl	8007c58 <I2C_IsErrorOccurred>
 8007bf8:	4603      	mov	r3, r0
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d001      	beq.n	8007c02 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007bfe:	2301      	movs	r3, #1
 8007c00:	e026      	b.n	8007c50 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c02:	f7fe ff21 	bl	8006a48 <HAL_GetTick>
 8007c06:	4602      	mov	r2, r0
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	1ad3      	subs	r3, r2, r3
 8007c0c:	68ba      	ldr	r2, [r7, #8]
 8007c0e:	429a      	cmp	r2, r3
 8007c10:	d302      	bcc.n	8007c18 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8007c12:	68bb      	ldr	r3, [r7, #8]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d113      	bne.n	8007c40 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c1c:	f043 0220 	orr.w	r2, r3, #32
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	2220      	movs	r2, #32
 8007c28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	2200      	movs	r2, #0
 8007c30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	2200      	movs	r2, #0
 8007c38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007c3c:	2301      	movs	r3, #1
 8007c3e:	e007      	b.n	8007c50 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	699b      	ldr	r3, [r3, #24]
 8007c46:	f003 0320 	and.w	r3, r3, #32
 8007c4a:	2b20      	cmp	r3, #32
 8007c4c:	d1cf      	bne.n	8007bee <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007c4e:	2300      	movs	r3, #0
}
 8007c50:	4618      	mov	r0, r3
 8007c52:	3710      	adds	r7, #16
 8007c54:	46bd      	mov	sp, r7
 8007c56:	bd80      	pop	{r7, pc}

08007c58 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b08a      	sub	sp, #40	; 0x28
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	60f8      	str	r0, [r7, #12]
 8007c60:	60b9      	str	r1, [r7, #8]
 8007c62:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007c64:	2300      	movs	r3, #0
 8007c66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	699b      	ldr	r3, [r3, #24]
 8007c70:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8007c72:	2300      	movs	r3, #0
 8007c74:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8007c7a:	69bb      	ldr	r3, [r7, #24]
 8007c7c:	f003 0310 	and.w	r3, r3, #16
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d075      	beq.n	8007d70 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	2210      	movs	r2, #16
 8007c8a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007c8c:	e056      	b.n	8007d3c <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007c8e:	68bb      	ldr	r3, [r7, #8]
 8007c90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c94:	d052      	beq.n	8007d3c <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007c96:	f7fe fed7 	bl	8006a48 <HAL_GetTick>
 8007c9a:	4602      	mov	r2, r0
 8007c9c:	69fb      	ldr	r3, [r7, #28]
 8007c9e:	1ad3      	subs	r3, r2, r3
 8007ca0:	68ba      	ldr	r2, [r7, #8]
 8007ca2:	429a      	cmp	r2, r3
 8007ca4:	d302      	bcc.n	8007cac <I2C_IsErrorOccurred+0x54>
 8007ca6:	68bb      	ldr	r3, [r7, #8]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d147      	bne.n	8007d3c <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	685b      	ldr	r3, [r3, #4]
 8007cb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007cb6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007cbe:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	699b      	ldr	r3, [r3, #24]
 8007cc6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007cca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007cce:	d12e      	bne.n	8007d2e <I2C_IsErrorOccurred+0xd6>
 8007cd0:	697b      	ldr	r3, [r7, #20]
 8007cd2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007cd6:	d02a      	beq.n	8007d2e <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8007cd8:	7cfb      	ldrb	r3, [r7, #19]
 8007cda:	2b20      	cmp	r3, #32
 8007cdc:	d027      	beq.n	8007d2e <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	685a      	ldr	r2, [r3, #4]
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007cec:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8007cee:	f7fe feab 	bl	8006a48 <HAL_GetTick>
 8007cf2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007cf4:	e01b      	b.n	8007d2e <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8007cf6:	f7fe fea7 	bl	8006a48 <HAL_GetTick>
 8007cfa:	4602      	mov	r2, r0
 8007cfc:	69fb      	ldr	r3, [r7, #28]
 8007cfe:	1ad3      	subs	r3, r2, r3
 8007d00:	2b19      	cmp	r3, #25
 8007d02:	d914      	bls.n	8007d2e <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d08:	f043 0220 	orr.w	r2, r3, #32
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	2220      	movs	r2, #32
 8007d14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	2200      	movs	r2, #0
 8007d24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8007d28:	2301      	movs	r3, #1
 8007d2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	699b      	ldr	r3, [r3, #24]
 8007d34:	f003 0320 	and.w	r3, r3, #32
 8007d38:	2b20      	cmp	r3, #32
 8007d3a:	d1dc      	bne.n	8007cf6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	699b      	ldr	r3, [r3, #24]
 8007d42:	f003 0320 	and.w	r3, r3, #32
 8007d46:	2b20      	cmp	r3, #32
 8007d48:	d003      	beq.n	8007d52 <I2C_IsErrorOccurred+0xfa>
 8007d4a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d09d      	beq.n	8007c8e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8007d52:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d103      	bne.n	8007d62 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	2220      	movs	r2, #32
 8007d60:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8007d62:	6a3b      	ldr	r3, [r7, #32]
 8007d64:	f043 0304 	orr.w	r3, r3, #4
 8007d68:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8007d6a:	2301      	movs	r3, #1
 8007d6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	699b      	ldr	r3, [r3, #24]
 8007d76:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8007d78:	69bb      	ldr	r3, [r7, #24]
 8007d7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d00b      	beq.n	8007d9a <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8007d82:	6a3b      	ldr	r3, [r7, #32]
 8007d84:	f043 0301 	orr.w	r3, r3, #1
 8007d88:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007d92:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007d94:	2301      	movs	r3, #1
 8007d96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8007d9a:	69bb      	ldr	r3, [r7, #24]
 8007d9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d00b      	beq.n	8007dbc <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8007da4:	6a3b      	ldr	r3, [r7, #32]
 8007da6:	f043 0308 	orr.w	r3, r3, #8
 8007daa:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007db4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007db6:	2301      	movs	r3, #1
 8007db8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8007dbc:	69bb      	ldr	r3, [r7, #24]
 8007dbe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d00b      	beq.n	8007dde <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8007dc6:	6a3b      	ldr	r3, [r7, #32]
 8007dc8:	f043 0302 	orr.w	r3, r3, #2
 8007dcc:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007dd6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007dd8:	2301      	movs	r3, #1
 8007dda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8007dde:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d01c      	beq.n	8007e20 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007de6:	68f8      	ldr	r0, [r7, #12]
 8007de8:	f7ff fe56 	bl	8007a98 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	6859      	ldr	r1, [r3, #4]
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	681a      	ldr	r2, [r3, #0]
 8007df6:	4b0d      	ldr	r3, [pc, #52]	; (8007e2c <I2C_IsErrorOccurred+0x1d4>)
 8007df8:	400b      	ands	r3, r1
 8007dfa:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007e00:	6a3b      	ldr	r3, [r7, #32]
 8007e02:	431a      	orrs	r2, r3
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	2220      	movs	r2, #32
 8007e0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	2200      	movs	r2, #0
 8007e14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8007e20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8007e24:	4618      	mov	r0, r3
 8007e26:	3728      	adds	r7, #40	; 0x28
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	bd80      	pop	{r7, pc}
 8007e2c:	fe00e800 	.word	0xfe00e800

08007e30 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007e30:	b480      	push	{r7}
 8007e32:	b087      	sub	sp, #28
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	60f8      	str	r0, [r7, #12]
 8007e38:	607b      	str	r3, [r7, #4]
 8007e3a:	460b      	mov	r3, r1
 8007e3c:	817b      	strh	r3, [r7, #10]
 8007e3e:	4613      	mov	r3, r2
 8007e40:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007e42:	897b      	ldrh	r3, [r7, #10]
 8007e44:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007e48:	7a7b      	ldrb	r3, [r7, #9]
 8007e4a:	041b      	lsls	r3, r3, #16
 8007e4c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007e50:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007e56:	6a3b      	ldr	r3, [r7, #32]
 8007e58:	4313      	orrs	r3, r2
 8007e5a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007e5e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	685a      	ldr	r2, [r3, #4]
 8007e66:	6a3b      	ldr	r3, [r7, #32]
 8007e68:	0d5b      	lsrs	r3, r3, #21
 8007e6a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8007e6e:	4b08      	ldr	r3, [pc, #32]	; (8007e90 <I2C_TransferConfig+0x60>)
 8007e70:	430b      	orrs	r3, r1
 8007e72:	43db      	mvns	r3, r3
 8007e74:	ea02 0103 	and.w	r1, r2, r3
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	697a      	ldr	r2, [r7, #20]
 8007e7e:	430a      	orrs	r2, r1
 8007e80:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8007e82:	bf00      	nop
 8007e84:	371c      	adds	r7, #28
 8007e86:	46bd      	mov	sp, r7
 8007e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8c:	4770      	bx	lr
 8007e8e:	bf00      	nop
 8007e90:	03ff63ff 	.word	0x03ff63ff

08007e94 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007e94:	b480      	push	{r7}
 8007e96:	b083      	sub	sp, #12
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
 8007e9c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007ea4:	b2db      	uxtb	r3, r3
 8007ea6:	2b20      	cmp	r3, #32
 8007ea8:	d138      	bne.n	8007f1c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007eb0:	2b01      	cmp	r3, #1
 8007eb2:	d101      	bne.n	8007eb8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007eb4:	2302      	movs	r3, #2
 8007eb6:	e032      	b.n	8007f1e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2201      	movs	r2, #1
 8007ebc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	2224      	movs	r2, #36	; 0x24
 8007ec4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	681a      	ldr	r2, [r3, #0]
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	f022 0201 	bic.w	r2, r2, #1
 8007ed6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	681a      	ldr	r2, [r3, #0]
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007ee6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	6819      	ldr	r1, [r3, #0]
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	683a      	ldr	r2, [r7, #0]
 8007ef4:	430a      	orrs	r2, r1
 8007ef6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	681a      	ldr	r2, [r3, #0]
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	f042 0201 	orr.w	r2, r2, #1
 8007f06:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2220      	movs	r2, #32
 8007f0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2200      	movs	r2, #0
 8007f14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007f18:	2300      	movs	r3, #0
 8007f1a:	e000      	b.n	8007f1e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007f1c:	2302      	movs	r3, #2
  }
}
 8007f1e:	4618      	mov	r0, r3
 8007f20:	370c      	adds	r7, #12
 8007f22:	46bd      	mov	sp, r7
 8007f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f28:	4770      	bx	lr

08007f2a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007f2a:	b480      	push	{r7}
 8007f2c:	b085      	sub	sp, #20
 8007f2e:	af00      	add	r7, sp, #0
 8007f30:	6078      	str	r0, [r7, #4]
 8007f32:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007f3a:	b2db      	uxtb	r3, r3
 8007f3c:	2b20      	cmp	r3, #32
 8007f3e:	d139      	bne.n	8007fb4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007f46:	2b01      	cmp	r3, #1
 8007f48:	d101      	bne.n	8007f4e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007f4a:	2302      	movs	r3, #2
 8007f4c:	e033      	b.n	8007fb6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	2201      	movs	r2, #1
 8007f52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	2224      	movs	r2, #36	; 0x24
 8007f5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	681a      	ldr	r2, [r3, #0]
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	f022 0201 	bic.w	r2, r2, #1
 8007f6c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007f7c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	021b      	lsls	r3, r3, #8
 8007f82:	68fa      	ldr	r2, [r7, #12]
 8007f84:	4313      	orrs	r3, r2
 8007f86:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	68fa      	ldr	r2, [r7, #12]
 8007f8e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	681a      	ldr	r2, [r3, #0]
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	f042 0201 	orr.w	r2, r2, #1
 8007f9e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2220      	movs	r2, #32
 8007fa4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2200      	movs	r2, #0
 8007fac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	e000      	b.n	8007fb6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007fb4:	2302      	movs	r3, #2
  }
}
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	3714      	adds	r7, #20
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc0:	4770      	bx	lr
	...

08007fc4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8007fc4:	b480      	push	{r7}
 8007fc6:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007fc8:	4b0d      	ldr	r3, [pc, #52]	; (8008000 <HAL_PWREx_GetVoltageRange+0x3c>)
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007fd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007fd4:	d102      	bne.n	8007fdc <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8007fd6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007fda:	e00b      	b.n	8007ff4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8007fdc:	4b08      	ldr	r3, [pc, #32]	; (8008000 <HAL_PWREx_GetVoltageRange+0x3c>)
 8007fde:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007fe2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fe6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007fea:	d102      	bne.n	8007ff2 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8007fec:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007ff0:	e000      	b.n	8007ff4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8007ff2:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffc:	4770      	bx	lr
 8007ffe:	bf00      	nop
 8008000:	40007000 	.word	0x40007000

08008004 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8008004:	b480      	push	{r7}
 8008006:	b085      	sub	sp, #20
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	2b00      	cmp	r3, #0
 8008010:	d141      	bne.n	8008096 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8008012:	4b4b      	ldr	r3, [pc, #300]	; (8008140 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800801a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800801e:	d131      	bne.n	8008084 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008020:	4b47      	ldr	r3, [pc, #284]	; (8008140 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008022:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008026:	4a46      	ldr	r2, [pc, #280]	; (8008140 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008028:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800802c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008030:	4b43      	ldr	r3, [pc, #268]	; (8008140 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8008038:	4a41      	ldr	r2, [pc, #260]	; (8008140 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800803a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800803e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8008040:	4b40      	ldr	r3, [pc, #256]	; (8008144 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	2232      	movs	r2, #50	; 0x32
 8008046:	fb02 f303 	mul.w	r3, r2, r3
 800804a:	4a3f      	ldr	r2, [pc, #252]	; (8008148 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800804c:	fba2 2303 	umull	r2, r3, r2, r3
 8008050:	0c9b      	lsrs	r3, r3, #18
 8008052:	3301      	adds	r3, #1
 8008054:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008056:	e002      	b.n	800805e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	3b01      	subs	r3, #1
 800805c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800805e:	4b38      	ldr	r3, [pc, #224]	; (8008140 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008060:	695b      	ldr	r3, [r3, #20]
 8008062:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008066:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800806a:	d102      	bne.n	8008072 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	2b00      	cmp	r3, #0
 8008070:	d1f2      	bne.n	8008058 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008072:	4b33      	ldr	r3, [pc, #204]	; (8008140 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008074:	695b      	ldr	r3, [r3, #20]
 8008076:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800807a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800807e:	d158      	bne.n	8008132 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8008080:	2303      	movs	r3, #3
 8008082:	e057      	b.n	8008134 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008084:	4b2e      	ldr	r3, [pc, #184]	; (8008140 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008086:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800808a:	4a2d      	ldr	r2, [pc, #180]	; (8008140 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800808c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008090:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8008094:	e04d      	b.n	8008132 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800809c:	d141      	bne.n	8008122 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800809e:	4b28      	ldr	r3, [pc, #160]	; (8008140 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80080a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80080aa:	d131      	bne.n	8008110 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80080ac:	4b24      	ldr	r3, [pc, #144]	; (8008140 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80080ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80080b2:	4a23      	ldr	r2, [pc, #140]	; (8008140 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80080b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80080b8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80080bc:	4b20      	ldr	r3, [pc, #128]	; (8008140 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80080c4:	4a1e      	ldr	r2, [pc, #120]	; (8008140 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80080c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80080ca:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80080cc:	4b1d      	ldr	r3, [pc, #116]	; (8008144 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	2232      	movs	r2, #50	; 0x32
 80080d2:	fb02 f303 	mul.w	r3, r2, r3
 80080d6:	4a1c      	ldr	r2, [pc, #112]	; (8008148 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80080d8:	fba2 2303 	umull	r2, r3, r2, r3
 80080dc:	0c9b      	lsrs	r3, r3, #18
 80080de:	3301      	adds	r3, #1
 80080e0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80080e2:	e002      	b.n	80080ea <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	3b01      	subs	r3, #1
 80080e8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80080ea:	4b15      	ldr	r3, [pc, #84]	; (8008140 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80080ec:	695b      	ldr	r3, [r3, #20]
 80080ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80080f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80080f6:	d102      	bne.n	80080fe <HAL_PWREx_ControlVoltageScaling+0xfa>
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d1f2      	bne.n	80080e4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80080fe:	4b10      	ldr	r3, [pc, #64]	; (8008140 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008100:	695b      	ldr	r3, [r3, #20]
 8008102:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008106:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800810a:	d112      	bne.n	8008132 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800810c:	2303      	movs	r3, #3
 800810e:	e011      	b.n	8008134 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008110:	4b0b      	ldr	r3, [pc, #44]	; (8008140 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008112:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008116:	4a0a      	ldr	r2, [pc, #40]	; (8008140 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008118:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800811c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8008120:	e007      	b.n	8008132 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8008122:	4b07      	ldr	r3, [pc, #28]	; (8008140 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800812a:	4a05      	ldr	r2, [pc, #20]	; (8008140 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800812c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008130:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8008132:	2300      	movs	r3, #0
}
 8008134:	4618      	mov	r0, r3
 8008136:	3714      	adds	r7, #20
 8008138:	46bd      	mov	sp, r7
 800813a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813e:	4770      	bx	lr
 8008140:	40007000 	.word	0x40007000
 8008144:	20000010 	.word	0x20000010
 8008148:	431bde83 	.word	0x431bde83

0800814c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800814c:	b580      	push	{r7, lr}
 800814e:	b088      	sub	sp, #32
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2b00      	cmp	r3, #0
 8008158:	d102      	bne.n	8008160 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800815a:	2301      	movs	r3, #1
 800815c:	f000 bc08 	b.w	8008970 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008160:	4b96      	ldr	r3, [pc, #600]	; (80083bc <HAL_RCC_OscConfig+0x270>)
 8008162:	689b      	ldr	r3, [r3, #8]
 8008164:	f003 030c 	and.w	r3, r3, #12
 8008168:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800816a:	4b94      	ldr	r3, [pc, #592]	; (80083bc <HAL_RCC_OscConfig+0x270>)
 800816c:	68db      	ldr	r3, [r3, #12]
 800816e:	f003 0303 	and.w	r3, r3, #3
 8008172:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	f003 0310 	and.w	r3, r3, #16
 800817c:	2b00      	cmp	r3, #0
 800817e:	f000 80e4 	beq.w	800834a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8008182:	69bb      	ldr	r3, [r7, #24]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d007      	beq.n	8008198 <HAL_RCC_OscConfig+0x4c>
 8008188:	69bb      	ldr	r3, [r7, #24]
 800818a:	2b0c      	cmp	r3, #12
 800818c:	f040 808b 	bne.w	80082a6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8008190:	697b      	ldr	r3, [r7, #20]
 8008192:	2b01      	cmp	r3, #1
 8008194:	f040 8087 	bne.w	80082a6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8008198:	4b88      	ldr	r3, [pc, #544]	; (80083bc <HAL_RCC_OscConfig+0x270>)
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	f003 0302 	and.w	r3, r3, #2
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d005      	beq.n	80081b0 <HAL_RCC_OscConfig+0x64>
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	699b      	ldr	r3, [r3, #24]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d101      	bne.n	80081b0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80081ac:	2301      	movs	r3, #1
 80081ae:	e3df      	b.n	8008970 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	6a1a      	ldr	r2, [r3, #32]
 80081b4:	4b81      	ldr	r3, [pc, #516]	; (80083bc <HAL_RCC_OscConfig+0x270>)
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	f003 0308 	and.w	r3, r3, #8
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d004      	beq.n	80081ca <HAL_RCC_OscConfig+0x7e>
 80081c0:	4b7e      	ldr	r3, [pc, #504]	; (80083bc <HAL_RCC_OscConfig+0x270>)
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80081c8:	e005      	b.n	80081d6 <HAL_RCC_OscConfig+0x8a>
 80081ca:	4b7c      	ldr	r3, [pc, #496]	; (80083bc <HAL_RCC_OscConfig+0x270>)
 80081cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80081d0:	091b      	lsrs	r3, r3, #4
 80081d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80081d6:	4293      	cmp	r3, r2
 80081d8:	d223      	bcs.n	8008222 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	6a1b      	ldr	r3, [r3, #32]
 80081de:	4618      	mov	r0, r3
 80081e0:	f000 fdfe 	bl	8008de0 <RCC_SetFlashLatencyFromMSIRange>
 80081e4:	4603      	mov	r3, r0
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d001      	beq.n	80081ee <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80081ea:	2301      	movs	r3, #1
 80081ec:	e3c0      	b.n	8008970 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80081ee:	4b73      	ldr	r3, [pc, #460]	; (80083bc <HAL_RCC_OscConfig+0x270>)
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	4a72      	ldr	r2, [pc, #456]	; (80083bc <HAL_RCC_OscConfig+0x270>)
 80081f4:	f043 0308 	orr.w	r3, r3, #8
 80081f8:	6013      	str	r3, [r2, #0]
 80081fa:	4b70      	ldr	r3, [pc, #448]	; (80083bc <HAL_RCC_OscConfig+0x270>)
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	6a1b      	ldr	r3, [r3, #32]
 8008206:	496d      	ldr	r1, [pc, #436]	; (80083bc <HAL_RCC_OscConfig+0x270>)
 8008208:	4313      	orrs	r3, r2
 800820a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800820c:	4b6b      	ldr	r3, [pc, #428]	; (80083bc <HAL_RCC_OscConfig+0x270>)
 800820e:	685b      	ldr	r3, [r3, #4]
 8008210:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	69db      	ldr	r3, [r3, #28]
 8008218:	021b      	lsls	r3, r3, #8
 800821a:	4968      	ldr	r1, [pc, #416]	; (80083bc <HAL_RCC_OscConfig+0x270>)
 800821c:	4313      	orrs	r3, r2
 800821e:	604b      	str	r3, [r1, #4]
 8008220:	e025      	b.n	800826e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008222:	4b66      	ldr	r3, [pc, #408]	; (80083bc <HAL_RCC_OscConfig+0x270>)
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	4a65      	ldr	r2, [pc, #404]	; (80083bc <HAL_RCC_OscConfig+0x270>)
 8008228:	f043 0308 	orr.w	r3, r3, #8
 800822c:	6013      	str	r3, [r2, #0]
 800822e:	4b63      	ldr	r3, [pc, #396]	; (80083bc <HAL_RCC_OscConfig+0x270>)
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	6a1b      	ldr	r3, [r3, #32]
 800823a:	4960      	ldr	r1, [pc, #384]	; (80083bc <HAL_RCC_OscConfig+0x270>)
 800823c:	4313      	orrs	r3, r2
 800823e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008240:	4b5e      	ldr	r3, [pc, #376]	; (80083bc <HAL_RCC_OscConfig+0x270>)
 8008242:	685b      	ldr	r3, [r3, #4]
 8008244:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	69db      	ldr	r3, [r3, #28]
 800824c:	021b      	lsls	r3, r3, #8
 800824e:	495b      	ldr	r1, [pc, #364]	; (80083bc <HAL_RCC_OscConfig+0x270>)
 8008250:	4313      	orrs	r3, r2
 8008252:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008254:	69bb      	ldr	r3, [r7, #24]
 8008256:	2b00      	cmp	r3, #0
 8008258:	d109      	bne.n	800826e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	6a1b      	ldr	r3, [r3, #32]
 800825e:	4618      	mov	r0, r3
 8008260:	f000 fdbe 	bl	8008de0 <RCC_SetFlashLatencyFromMSIRange>
 8008264:	4603      	mov	r3, r0
 8008266:	2b00      	cmp	r3, #0
 8008268:	d001      	beq.n	800826e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800826a:	2301      	movs	r3, #1
 800826c:	e380      	b.n	8008970 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800826e:	f000 fcc1 	bl	8008bf4 <HAL_RCC_GetSysClockFreq>
 8008272:	4602      	mov	r2, r0
 8008274:	4b51      	ldr	r3, [pc, #324]	; (80083bc <HAL_RCC_OscConfig+0x270>)
 8008276:	689b      	ldr	r3, [r3, #8]
 8008278:	091b      	lsrs	r3, r3, #4
 800827a:	f003 030f 	and.w	r3, r3, #15
 800827e:	4950      	ldr	r1, [pc, #320]	; (80083c0 <HAL_RCC_OscConfig+0x274>)
 8008280:	5ccb      	ldrb	r3, [r1, r3]
 8008282:	f003 031f 	and.w	r3, r3, #31
 8008286:	fa22 f303 	lsr.w	r3, r2, r3
 800828a:	4a4e      	ldr	r2, [pc, #312]	; (80083c4 <HAL_RCC_OscConfig+0x278>)
 800828c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800828e:	4b4e      	ldr	r3, [pc, #312]	; (80083c8 <HAL_RCC_OscConfig+0x27c>)
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	4618      	mov	r0, r3
 8008294:	f7fd ff82 	bl	800619c <HAL_InitTick>
 8008298:	4603      	mov	r3, r0
 800829a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800829c:	7bfb      	ldrb	r3, [r7, #15]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d052      	beq.n	8008348 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80082a2:	7bfb      	ldrb	r3, [r7, #15]
 80082a4:	e364      	b.n	8008970 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	699b      	ldr	r3, [r3, #24]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d032      	beq.n	8008314 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80082ae:	4b43      	ldr	r3, [pc, #268]	; (80083bc <HAL_RCC_OscConfig+0x270>)
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	4a42      	ldr	r2, [pc, #264]	; (80083bc <HAL_RCC_OscConfig+0x270>)
 80082b4:	f043 0301 	orr.w	r3, r3, #1
 80082b8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80082ba:	f7fe fbc5 	bl	8006a48 <HAL_GetTick>
 80082be:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80082c0:	e008      	b.n	80082d4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80082c2:	f7fe fbc1 	bl	8006a48 <HAL_GetTick>
 80082c6:	4602      	mov	r2, r0
 80082c8:	693b      	ldr	r3, [r7, #16]
 80082ca:	1ad3      	subs	r3, r2, r3
 80082cc:	2b02      	cmp	r3, #2
 80082ce:	d901      	bls.n	80082d4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80082d0:	2303      	movs	r3, #3
 80082d2:	e34d      	b.n	8008970 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80082d4:	4b39      	ldr	r3, [pc, #228]	; (80083bc <HAL_RCC_OscConfig+0x270>)
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	f003 0302 	and.w	r3, r3, #2
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d0f0      	beq.n	80082c2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80082e0:	4b36      	ldr	r3, [pc, #216]	; (80083bc <HAL_RCC_OscConfig+0x270>)
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	4a35      	ldr	r2, [pc, #212]	; (80083bc <HAL_RCC_OscConfig+0x270>)
 80082e6:	f043 0308 	orr.w	r3, r3, #8
 80082ea:	6013      	str	r3, [r2, #0]
 80082ec:	4b33      	ldr	r3, [pc, #204]	; (80083bc <HAL_RCC_OscConfig+0x270>)
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	6a1b      	ldr	r3, [r3, #32]
 80082f8:	4930      	ldr	r1, [pc, #192]	; (80083bc <HAL_RCC_OscConfig+0x270>)
 80082fa:	4313      	orrs	r3, r2
 80082fc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80082fe:	4b2f      	ldr	r3, [pc, #188]	; (80083bc <HAL_RCC_OscConfig+0x270>)
 8008300:	685b      	ldr	r3, [r3, #4]
 8008302:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	69db      	ldr	r3, [r3, #28]
 800830a:	021b      	lsls	r3, r3, #8
 800830c:	492b      	ldr	r1, [pc, #172]	; (80083bc <HAL_RCC_OscConfig+0x270>)
 800830e:	4313      	orrs	r3, r2
 8008310:	604b      	str	r3, [r1, #4]
 8008312:	e01a      	b.n	800834a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8008314:	4b29      	ldr	r3, [pc, #164]	; (80083bc <HAL_RCC_OscConfig+0x270>)
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	4a28      	ldr	r2, [pc, #160]	; (80083bc <HAL_RCC_OscConfig+0x270>)
 800831a:	f023 0301 	bic.w	r3, r3, #1
 800831e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8008320:	f7fe fb92 	bl	8006a48 <HAL_GetTick>
 8008324:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8008326:	e008      	b.n	800833a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008328:	f7fe fb8e 	bl	8006a48 <HAL_GetTick>
 800832c:	4602      	mov	r2, r0
 800832e:	693b      	ldr	r3, [r7, #16]
 8008330:	1ad3      	subs	r3, r2, r3
 8008332:	2b02      	cmp	r3, #2
 8008334:	d901      	bls.n	800833a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8008336:	2303      	movs	r3, #3
 8008338:	e31a      	b.n	8008970 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800833a:	4b20      	ldr	r3, [pc, #128]	; (80083bc <HAL_RCC_OscConfig+0x270>)
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	f003 0302 	and.w	r3, r3, #2
 8008342:	2b00      	cmp	r3, #0
 8008344:	d1f0      	bne.n	8008328 <HAL_RCC_OscConfig+0x1dc>
 8008346:	e000      	b.n	800834a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8008348:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	f003 0301 	and.w	r3, r3, #1
 8008352:	2b00      	cmp	r3, #0
 8008354:	d073      	beq.n	800843e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8008356:	69bb      	ldr	r3, [r7, #24]
 8008358:	2b08      	cmp	r3, #8
 800835a:	d005      	beq.n	8008368 <HAL_RCC_OscConfig+0x21c>
 800835c:	69bb      	ldr	r3, [r7, #24]
 800835e:	2b0c      	cmp	r3, #12
 8008360:	d10e      	bne.n	8008380 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8008362:	697b      	ldr	r3, [r7, #20]
 8008364:	2b03      	cmp	r3, #3
 8008366:	d10b      	bne.n	8008380 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008368:	4b14      	ldr	r3, [pc, #80]	; (80083bc <HAL_RCC_OscConfig+0x270>)
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008370:	2b00      	cmp	r3, #0
 8008372:	d063      	beq.n	800843c <HAL_RCC_OscConfig+0x2f0>
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	685b      	ldr	r3, [r3, #4]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d15f      	bne.n	800843c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800837c:	2301      	movs	r3, #1
 800837e:	e2f7      	b.n	8008970 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	685b      	ldr	r3, [r3, #4]
 8008384:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008388:	d106      	bne.n	8008398 <HAL_RCC_OscConfig+0x24c>
 800838a:	4b0c      	ldr	r3, [pc, #48]	; (80083bc <HAL_RCC_OscConfig+0x270>)
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	4a0b      	ldr	r2, [pc, #44]	; (80083bc <HAL_RCC_OscConfig+0x270>)
 8008390:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008394:	6013      	str	r3, [r2, #0]
 8008396:	e025      	b.n	80083e4 <HAL_RCC_OscConfig+0x298>
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	685b      	ldr	r3, [r3, #4]
 800839c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80083a0:	d114      	bne.n	80083cc <HAL_RCC_OscConfig+0x280>
 80083a2:	4b06      	ldr	r3, [pc, #24]	; (80083bc <HAL_RCC_OscConfig+0x270>)
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	4a05      	ldr	r2, [pc, #20]	; (80083bc <HAL_RCC_OscConfig+0x270>)
 80083a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80083ac:	6013      	str	r3, [r2, #0]
 80083ae:	4b03      	ldr	r3, [pc, #12]	; (80083bc <HAL_RCC_OscConfig+0x270>)
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	4a02      	ldr	r2, [pc, #8]	; (80083bc <HAL_RCC_OscConfig+0x270>)
 80083b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80083b8:	6013      	str	r3, [r2, #0]
 80083ba:	e013      	b.n	80083e4 <HAL_RCC_OscConfig+0x298>
 80083bc:	40021000 	.word	0x40021000
 80083c0:	080147dc 	.word	0x080147dc
 80083c4:	20000010 	.word	0x20000010
 80083c8:	20000014 	.word	0x20000014
 80083cc:	4ba0      	ldr	r3, [pc, #640]	; (8008650 <HAL_RCC_OscConfig+0x504>)
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	4a9f      	ldr	r2, [pc, #636]	; (8008650 <HAL_RCC_OscConfig+0x504>)
 80083d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80083d6:	6013      	str	r3, [r2, #0]
 80083d8:	4b9d      	ldr	r3, [pc, #628]	; (8008650 <HAL_RCC_OscConfig+0x504>)
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	4a9c      	ldr	r2, [pc, #624]	; (8008650 <HAL_RCC_OscConfig+0x504>)
 80083de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80083e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	685b      	ldr	r3, [r3, #4]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d013      	beq.n	8008414 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083ec:	f7fe fb2c 	bl	8006a48 <HAL_GetTick>
 80083f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80083f2:	e008      	b.n	8008406 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80083f4:	f7fe fb28 	bl	8006a48 <HAL_GetTick>
 80083f8:	4602      	mov	r2, r0
 80083fa:	693b      	ldr	r3, [r7, #16]
 80083fc:	1ad3      	subs	r3, r2, r3
 80083fe:	2b64      	cmp	r3, #100	; 0x64
 8008400:	d901      	bls.n	8008406 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8008402:	2303      	movs	r3, #3
 8008404:	e2b4      	b.n	8008970 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008406:	4b92      	ldr	r3, [pc, #584]	; (8008650 <HAL_RCC_OscConfig+0x504>)
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800840e:	2b00      	cmp	r3, #0
 8008410:	d0f0      	beq.n	80083f4 <HAL_RCC_OscConfig+0x2a8>
 8008412:	e014      	b.n	800843e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008414:	f7fe fb18 	bl	8006a48 <HAL_GetTick>
 8008418:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800841a:	e008      	b.n	800842e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800841c:	f7fe fb14 	bl	8006a48 <HAL_GetTick>
 8008420:	4602      	mov	r2, r0
 8008422:	693b      	ldr	r3, [r7, #16]
 8008424:	1ad3      	subs	r3, r2, r3
 8008426:	2b64      	cmp	r3, #100	; 0x64
 8008428:	d901      	bls.n	800842e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800842a:	2303      	movs	r3, #3
 800842c:	e2a0      	b.n	8008970 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800842e:	4b88      	ldr	r3, [pc, #544]	; (8008650 <HAL_RCC_OscConfig+0x504>)
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008436:	2b00      	cmp	r3, #0
 8008438:	d1f0      	bne.n	800841c <HAL_RCC_OscConfig+0x2d0>
 800843a:	e000      	b.n	800843e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800843c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	f003 0302 	and.w	r3, r3, #2
 8008446:	2b00      	cmp	r3, #0
 8008448:	d060      	beq.n	800850c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800844a:	69bb      	ldr	r3, [r7, #24]
 800844c:	2b04      	cmp	r3, #4
 800844e:	d005      	beq.n	800845c <HAL_RCC_OscConfig+0x310>
 8008450:	69bb      	ldr	r3, [r7, #24]
 8008452:	2b0c      	cmp	r3, #12
 8008454:	d119      	bne.n	800848a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8008456:	697b      	ldr	r3, [r7, #20]
 8008458:	2b02      	cmp	r3, #2
 800845a:	d116      	bne.n	800848a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800845c:	4b7c      	ldr	r3, [pc, #496]	; (8008650 <HAL_RCC_OscConfig+0x504>)
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008464:	2b00      	cmp	r3, #0
 8008466:	d005      	beq.n	8008474 <HAL_RCC_OscConfig+0x328>
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	68db      	ldr	r3, [r3, #12]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d101      	bne.n	8008474 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8008470:	2301      	movs	r3, #1
 8008472:	e27d      	b.n	8008970 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008474:	4b76      	ldr	r3, [pc, #472]	; (8008650 <HAL_RCC_OscConfig+0x504>)
 8008476:	685b      	ldr	r3, [r3, #4]
 8008478:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	691b      	ldr	r3, [r3, #16]
 8008480:	061b      	lsls	r3, r3, #24
 8008482:	4973      	ldr	r1, [pc, #460]	; (8008650 <HAL_RCC_OscConfig+0x504>)
 8008484:	4313      	orrs	r3, r2
 8008486:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008488:	e040      	b.n	800850c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	68db      	ldr	r3, [r3, #12]
 800848e:	2b00      	cmp	r3, #0
 8008490:	d023      	beq.n	80084da <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008492:	4b6f      	ldr	r3, [pc, #444]	; (8008650 <HAL_RCC_OscConfig+0x504>)
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	4a6e      	ldr	r2, [pc, #440]	; (8008650 <HAL_RCC_OscConfig+0x504>)
 8008498:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800849c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800849e:	f7fe fad3 	bl	8006a48 <HAL_GetTick>
 80084a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80084a4:	e008      	b.n	80084b8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80084a6:	f7fe facf 	bl	8006a48 <HAL_GetTick>
 80084aa:	4602      	mov	r2, r0
 80084ac:	693b      	ldr	r3, [r7, #16]
 80084ae:	1ad3      	subs	r3, r2, r3
 80084b0:	2b02      	cmp	r3, #2
 80084b2:	d901      	bls.n	80084b8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80084b4:	2303      	movs	r3, #3
 80084b6:	e25b      	b.n	8008970 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80084b8:	4b65      	ldr	r3, [pc, #404]	; (8008650 <HAL_RCC_OscConfig+0x504>)
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d0f0      	beq.n	80084a6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80084c4:	4b62      	ldr	r3, [pc, #392]	; (8008650 <HAL_RCC_OscConfig+0x504>)
 80084c6:	685b      	ldr	r3, [r3, #4]
 80084c8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	691b      	ldr	r3, [r3, #16]
 80084d0:	061b      	lsls	r3, r3, #24
 80084d2:	495f      	ldr	r1, [pc, #380]	; (8008650 <HAL_RCC_OscConfig+0x504>)
 80084d4:	4313      	orrs	r3, r2
 80084d6:	604b      	str	r3, [r1, #4]
 80084d8:	e018      	b.n	800850c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80084da:	4b5d      	ldr	r3, [pc, #372]	; (8008650 <HAL_RCC_OscConfig+0x504>)
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	4a5c      	ldr	r2, [pc, #368]	; (8008650 <HAL_RCC_OscConfig+0x504>)
 80084e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80084e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084e6:	f7fe faaf 	bl	8006a48 <HAL_GetTick>
 80084ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80084ec:	e008      	b.n	8008500 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80084ee:	f7fe faab 	bl	8006a48 <HAL_GetTick>
 80084f2:	4602      	mov	r2, r0
 80084f4:	693b      	ldr	r3, [r7, #16]
 80084f6:	1ad3      	subs	r3, r2, r3
 80084f8:	2b02      	cmp	r3, #2
 80084fa:	d901      	bls.n	8008500 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80084fc:	2303      	movs	r3, #3
 80084fe:	e237      	b.n	8008970 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008500:	4b53      	ldr	r3, [pc, #332]	; (8008650 <HAL_RCC_OscConfig+0x504>)
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008508:	2b00      	cmp	r3, #0
 800850a:	d1f0      	bne.n	80084ee <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	f003 0308 	and.w	r3, r3, #8
 8008514:	2b00      	cmp	r3, #0
 8008516:	d03c      	beq.n	8008592 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	695b      	ldr	r3, [r3, #20]
 800851c:	2b00      	cmp	r3, #0
 800851e:	d01c      	beq.n	800855a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008520:	4b4b      	ldr	r3, [pc, #300]	; (8008650 <HAL_RCC_OscConfig+0x504>)
 8008522:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008526:	4a4a      	ldr	r2, [pc, #296]	; (8008650 <HAL_RCC_OscConfig+0x504>)
 8008528:	f043 0301 	orr.w	r3, r3, #1
 800852c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008530:	f7fe fa8a 	bl	8006a48 <HAL_GetTick>
 8008534:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008536:	e008      	b.n	800854a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008538:	f7fe fa86 	bl	8006a48 <HAL_GetTick>
 800853c:	4602      	mov	r2, r0
 800853e:	693b      	ldr	r3, [r7, #16]
 8008540:	1ad3      	subs	r3, r2, r3
 8008542:	2b02      	cmp	r3, #2
 8008544:	d901      	bls.n	800854a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8008546:	2303      	movs	r3, #3
 8008548:	e212      	b.n	8008970 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800854a:	4b41      	ldr	r3, [pc, #260]	; (8008650 <HAL_RCC_OscConfig+0x504>)
 800854c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008550:	f003 0302 	and.w	r3, r3, #2
 8008554:	2b00      	cmp	r3, #0
 8008556:	d0ef      	beq.n	8008538 <HAL_RCC_OscConfig+0x3ec>
 8008558:	e01b      	b.n	8008592 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800855a:	4b3d      	ldr	r3, [pc, #244]	; (8008650 <HAL_RCC_OscConfig+0x504>)
 800855c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008560:	4a3b      	ldr	r2, [pc, #236]	; (8008650 <HAL_RCC_OscConfig+0x504>)
 8008562:	f023 0301 	bic.w	r3, r3, #1
 8008566:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800856a:	f7fe fa6d 	bl	8006a48 <HAL_GetTick>
 800856e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008570:	e008      	b.n	8008584 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008572:	f7fe fa69 	bl	8006a48 <HAL_GetTick>
 8008576:	4602      	mov	r2, r0
 8008578:	693b      	ldr	r3, [r7, #16]
 800857a:	1ad3      	subs	r3, r2, r3
 800857c:	2b02      	cmp	r3, #2
 800857e:	d901      	bls.n	8008584 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8008580:	2303      	movs	r3, #3
 8008582:	e1f5      	b.n	8008970 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008584:	4b32      	ldr	r3, [pc, #200]	; (8008650 <HAL_RCC_OscConfig+0x504>)
 8008586:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800858a:	f003 0302 	and.w	r3, r3, #2
 800858e:	2b00      	cmp	r3, #0
 8008590:	d1ef      	bne.n	8008572 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	f003 0304 	and.w	r3, r3, #4
 800859a:	2b00      	cmp	r3, #0
 800859c:	f000 80a6 	beq.w	80086ec <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80085a0:	2300      	movs	r3, #0
 80085a2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80085a4:	4b2a      	ldr	r3, [pc, #168]	; (8008650 <HAL_RCC_OscConfig+0x504>)
 80085a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d10d      	bne.n	80085cc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80085b0:	4b27      	ldr	r3, [pc, #156]	; (8008650 <HAL_RCC_OscConfig+0x504>)
 80085b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085b4:	4a26      	ldr	r2, [pc, #152]	; (8008650 <HAL_RCC_OscConfig+0x504>)
 80085b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80085ba:	6593      	str	r3, [r2, #88]	; 0x58
 80085bc:	4b24      	ldr	r3, [pc, #144]	; (8008650 <HAL_RCC_OscConfig+0x504>)
 80085be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80085c4:	60bb      	str	r3, [r7, #8]
 80085c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80085c8:	2301      	movs	r3, #1
 80085ca:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80085cc:	4b21      	ldr	r3, [pc, #132]	; (8008654 <HAL_RCC_OscConfig+0x508>)
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d118      	bne.n	800860a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80085d8:	4b1e      	ldr	r3, [pc, #120]	; (8008654 <HAL_RCC_OscConfig+0x508>)
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	4a1d      	ldr	r2, [pc, #116]	; (8008654 <HAL_RCC_OscConfig+0x508>)
 80085de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80085e2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80085e4:	f7fe fa30 	bl	8006a48 <HAL_GetTick>
 80085e8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80085ea:	e008      	b.n	80085fe <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80085ec:	f7fe fa2c 	bl	8006a48 <HAL_GetTick>
 80085f0:	4602      	mov	r2, r0
 80085f2:	693b      	ldr	r3, [r7, #16]
 80085f4:	1ad3      	subs	r3, r2, r3
 80085f6:	2b02      	cmp	r3, #2
 80085f8:	d901      	bls.n	80085fe <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80085fa:	2303      	movs	r3, #3
 80085fc:	e1b8      	b.n	8008970 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80085fe:	4b15      	ldr	r3, [pc, #84]	; (8008654 <HAL_RCC_OscConfig+0x508>)
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008606:	2b00      	cmp	r3, #0
 8008608:	d0f0      	beq.n	80085ec <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	689b      	ldr	r3, [r3, #8]
 800860e:	2b01      	cmp	r3, #1
 8008610:	d108      	bne.n	8008624 <HAL_RCC_OscConfig+0x4d8>
 8008612:	4b0f      	ldr	r3, [pc, #60]	; (8008650 <HAL_RCC_OscConfig+0x504>)
 8008614:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008618:	4a0d      	ldr	r2, [pc, #52]	; (8008650 <HAL_RCC_OscConfig+0x504>)
 800861a:	f043 0301 	orr.w	r3, r3, #1
 800861e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008622:	e029      	b.n	8008678 <HAL_RCC_OscConfig+0x52c>
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	689b      	ldr	r3, [r3, #8]
 8008628:	2b05      	cmp	r3, #5
 800862a:	d115      	bne.n	8008658 <HAL_RCC_OscConfig+0x50c>
 800862c:	4b08      	ldr	r3, [pc, #32]	; (8008650 <HAL_RCC_OscConfig+0x504>)
 800862e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008632:	4a07      	ldr	r2, [pc, #28]	; (8008650 <HAL_RCC_OscConfig+0x504>)
 8008634:	f043 0304 	orr.w	r3, r3, #4
 8008638:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800863c:	4b04      	ldr	r3, [pc, #16]	; (8008650 <HAL_RCC_OscConfig+0x504>)
 800863e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008642:	4a03      	ldr	r2, [pc, #12]	; (8008650 <HAL_RCC_OscConfig+0x504>)
 8008644:	f043 0301 	orr.w	r3, r3, #1
 8008648:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800864c:	e014      	b.n	8008678 <HAL_RCC_OscConfig+0x52c>
 800864e:	bf00      	nop
 8008650:	40021000 	.word	0x40021000
 8008654:	40007000 	.word	0x40007000
 8008658:	4b9d      	ldr	r3, [pc, #628]	; (80088d0 <HAL_RCC_OscConfig+0x784>)
 800865a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800865e:	4a9c      	ldr	r2, [pc, #624]	; (80088d0 <HAL_RCC_OscConfig+0x784>)
 8008660:	f023 0301 	bic.w	r3, r3, #1
 8008664:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008668:	4b99      	ldr	r3, [pc, #612]	; (80088d0 <HAL_RCC_OscConfig+0x784>)
 800866a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800866e:	4a98      	ldr	r2, [pc, #608]	; (80088d0 <HAL_RCC_OscConfig+0x784>)
 8008670:	f023 0304 	bic.w	r3, r3, #4
 8008674:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	689b      	ldr	r3, [r3, #8]
 800867c:	2b00      	cmp	r3, #0
 800867e:	d016      	beq.n	80086ae <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008680:	f7fe f9e2 	bl	8006a48 <HAL_GetTick>
 8008684:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008686:	e00a      	b.n	800869e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008688:	f7fe f9de 	bl	8006a48 <HAL_GetTick>
 800868c:	4602      	mov	r2, r0
 800868e:	693b      	ldr	r3, [r7, #16]
 8008690:	1ad3      	subs	r3, r2, r3
 8008692:	f241 3288 	movw	r2, #5000	; 0x1388
 8008696:	4293      	cmp	r3, r2
 8008698:	d901      	bls.n	800869e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800869a:	2303      	movs	r3, #3
 800869c:	e168      	b.n	8008970 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800869e:	4b8c      	ldr	r3, [pc, #560]	; (80088d0 <HAL_RCC_OscConfig+0x784>)
 80086a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086a4:	f003 0302 	and.w	r3, r3, #2
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d0ed      	beq.n	8008688 <HAL_RCC_OscConfig+0x53c>
 80086ac:	e015      	b.n	80086da <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80086ae:	f7fe f9cb 	bl	8006a48 <HAL_GetTick>
 80086b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80086b4:	e00a      	b.n	80086cc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80086b6:	f7fe f9c7 	bl	8006a48 <HAL_GetTick>
 80086ba:	4602      	mov	r2, r0
 80086bc:	693b      	ldr	r3, [r7, #16]
 80086be:	1ad3      	subs	r3, r2, r3
 80086c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80086c4:	4293      	cmp	r3, r2
 80086c6:	d901      	bls.n	80086cc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80086c8:	2303      	movs	r3, #3
 80086ca:	e151      	b.n	8008970 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80086cc:	4b80      	ldr	r3, [pc, #512]	; (80088d0 <HAL_RCC_OscConfig+0x784>)
 80086ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086d2:	f003 0302 	and.w	r3, r3, #2
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d1ed      	bne.n	80086b6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80086da:	7ffb      	ldrb	r3, [r7, #31]
 80086dc:	2b01      	cmp	r3, #1
 80086de:	d105      	bne.n	80086ec <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80086e0:	4b7b      	ldr	r3, [pc, #492]	; (80088d0 <HAL_RCC_OscConfig+0x784>)
 80086e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086e4:	4a7a      	ldr	r2, [pc, #488]	; (80088d0 <HAL_RCC_OscConfig+0x784>)
 80086e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80086ea:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	f003 0320 	and.w	r3, r3, #32
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d03c      	beq.n	8008772 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d01c      	beq.n	800873a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008700:	4b73      	ldr	r3, [pc, #460]	; (80088d0 <HAL_RCC_OscConfig+0x784>)
 8008702:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008706:	4a72      	ldr	r2, [pc, #456]	; (80088d0 <HAL_RCC_OscConfig+0x784>)
 8008708:	f043 0301 	orr.w	r3, r3, #1
 800870c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008710:	f7fe f99a 	bl	8006a48 <HAL_GetTick>
 8008714:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008716:	e008      	b.n	800872a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008718:	f7fe f996 	bl	8006a48 <HAL_GetTick>
 800871c:	4602      	mov	r2, r0
 800871e:	693b      	ldr	r3, [r7, #16]
 8008720:	1ad3      	subs	r3, r2, r3
 8008722:	2b02      	cmp	r3, #2
 8008724:	d901      	bls.n	800872a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8008726:	2303      	movs	r3, #3
 8008728:	e122      	b.n	8008970 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800872a:	4b69      	ldr	r3, [pc, #420]	; (80088d0 <HAL_RCC_OscConfig+0x784>)
 800872c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008730:	f003 0302 	and.w	r3, r3, #2
 8008734:	2b00      	cmp	r3, #0
 8008736:	d0ef      	beq.n	8008718 <HAL_RCC_OscConfig+0x5cc>
 8008738:	e01b      	b.n	8008772 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800873a:	4b65      	ldr	r3, [pc, #404]	; (80088d0 <HAL_RCC_OscConfig+0x784>)
 800873c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008740:	4a63      	ldr	r2, [pc, #396]	; (80088d0 <HAL_RCC_OscConfig+0x784>)
 8008742:	f023 0301 	bic.w	r3, r3, #1
 8008746:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800874a:	f7fe f97d 	bl	8006a48 <HAL_GetTick>
 800874e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008750:	e008      	b.n	8008764 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008752:	f7fe f979 	bl	8006a48 <HAL_GetTick>
 8008756:	4602      	mov	r2, r0
 8008758:	693b      	ldr	r3, [r7, #16]
 800875a:	1ad3      	subs	r3, r2, r3
 800875c:	2b02      	cmp	r3, #2
 800875e:	d901      	bls.n	8008764 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8008760:	2303      	movs	r3, #3
 8008762:	e105      	b.n	8008970 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008764:	4b5a      	ldr	r3, [pc, #360]	; (80088d0 <HAL_RCC_OscConfig+0x784>)
 8008766:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800876a:	f003 0302 	and.w	r3, r3, #2
 800876e:	2b00      	cmp	r3, #0
 8008770:	d1ef      	bne.n	8008752 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008776:	2b00      	cmp	r3, #0
 8008778:	f000 80f9 	beq.w	800896e <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008780:	2b02      	cmp	r3, #2
 8008782:	f040 80cf 	bne.w	8008924 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8008786:	4b52      	ldr	r3, [pc, #328]	; (80088d0 <HAL_RCC_OscConfig+0x784>)
 8008788:	68db      	ldr	r3, [r3, #12]
 800878a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800878c:	697b      	ldr	r3, [r7, #20]
 800878e:	f003 0203 	and.w	r2, r3, #3
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008796:	429a      	cmp	r2, r3
 8008798:	d12c      	bne.n	80087f4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800879a:	697b      	ldr	r3, [r7, #20]
 800879c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087a4:	3b01      	subs	r3, #1
 80087a6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80087a8:	429a      	cmp	r2, r3
 80087aa:	d123      	bne.n	80087f4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80087ac:	697b      	ldr	r3, [r7, #20]
 80087ae:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087b6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80087b8:	429a      	cmp	r2, r3
 80087ba:	d11b      	bne.n	80087f4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80087bc:	697b      	ldr	r3, [r7, #20]
 80087be:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087c6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80087c8:	429a      	cmp	r2, r3
 80087ca:	d113      	bne.n	80087f4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80087cc:	697b      	ldr	r3, [r7, #20]
 80087ce:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087d6:	085b      	lsrs	r3, r3, #1
 80087d8:	3b01      	subs	r3, #1
 80087da:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80087dc:	429a      	cmp	r2, r3
 80087de:	d109      	bne.n	80087f4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80087e0:	697b      	ldr	r3, [r7, #20]
 80087e2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087ea:	085b      	lsrs	r3, r3, #1
 80087ec:	3b01      	subs	r3, #1
 80087ee:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80087f0:	429a      	cmp	r2, r3
 80087f2:	d071      	beq.n	80088d8 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80087f4:	69bb      	ldr	r3, [r7, #24]
 80087f6:	2b0c      	cmp	r3, #12
 80087f8:	d068      	beq.n	80088cc <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80087fa:	4b35      	ldr	r3, [pc, #212]	; (80088d0 <HAL_RCC_OscConfig+0x784>)
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008802:	2b00      	cmp	r3, #0
 8008804:	d105      	bne.n	8008812 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8008806:	4b32      	ldr	r3, [pc, #200]	; (80088d0 <HAL_RCC_OscConfig+0x784>)
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800880e:	2b00      	cmp	r3, #0
 8008810:	d001      	beq.n	8008816 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8008812:	2301      	movs	r3, #1
 8008814:	e0ac      	b.n	8008970 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8008816:	4b2e      	ldr	r3, [pc, #184]	; (80088d0 <HAL_RCC_OscConfig+0x784>)
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	4a2d      	ldr	r2, [pc, #180]	; (80088d0 <HAL_RCC_OscConfig+0x784>)
 800881c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008820:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8008822:	f7fe f911 	bl	8006a48 <HAL_GetTick>
 8008826:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008828:	e008      	b.n	800883c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800882a:	f7fe f90d 	bl	8006a48 <HAL_GetTick>
 800882e:	4602      	mov	r2, r0
 8008830:	693b      	ldr	r3, [r7, #16]
 8008832:	1ad3      	subs	r3, r2, r3
 8008834:	2b02      	cmp	r3, #2
 8008836:	d901      	bls.n	800883c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8008838:	2303      	movs	r3, #3
 800883a:	e099      	b.n	8008970 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800883c:	4b24      	ldr	r3, [pc, #144]	; (80088d0 <HAL_RCC_OscConfig+0x784>)
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008844:	2b00      	cmp	r3, #0
 8008846:	d1f0      	bne.n	800882a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008848:	4b21      	ldr	r3, [pc, #132]	; (80088d0 <HAL_RCC_OscConfig+0x784>)
 800884a:	68da      	ldr	r2, [r3, #12]
 800884c:	4b21      	ldr	r3, [pc, #132]	; (80088d4 <HAL_RCC_OscConfig+0x788>)
 800884e:	4013      	ands	r3, r2
 8008850:	687a      	ldr	r2, [r7, #4]
 8008852:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8008854:	687a      	ldr	r2, [r7, #4]
 8008856:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008858:	3a01      	subs	r2, #1
 800885a:	0112      	lsls	r2, r2, #4
 800885c:	4311      	orrs	r1, r2
 800885e:	687a      	ldr	r2, [r7, #4]
 8008860:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008862:	0212      	lsls	r2, r2, #8
 8008864:	4311      	orrs	r1, r2
 8008866:	687a      	ldr	r2, [r7, #4]
 8008868:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800886a:	0852      	lsrs	r2, r2, #1
 800886c:	3a01      	subs	r2, #1
 800886e:	0552      	lsls	r2, r2, #21
 8008870:	4311      	orrs	r1, r2
 8008872:	687a      	ldr	r2, [r7, #4]
 8008874:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8008876:	0852      	lsrs	r2, r2, #1
 8008878:	3a01      	subs	r2, #1
 800887a:	0652      	lsls	r2, r2, #25
 800887c:	4311      	orrs	r1, r2
 800887e:	687a      	ldr	r2, [r7, #4]
 8008880:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008882:	06d2      	lsls	r2, r2, #27
 8008884:	430a      	orrs	r2, r1
 8008886:	4912      	ldr	r1, [pc, #72]	; (80088d0 <HAL_RCC_OscConfig+0x784>)
 8008888:	4313      	orrs	r3, r2
 800888a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800888c:	4b10      	ldr	r3, [pc, #64]	; (80088d0 <HAL_RCC_OscConfig+0x784>)
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	4a0f      	ldr	r2, [pc, #60]	; (80088d0 <HAL_RCC_OscConfig+0x784>)
 8008892:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008896:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008898:	4b0d      	ldr	r3, [pc, #52]	; (80088d0 <HAL_RCC_OscConfig+0x784>)
 800889a:	68db      	ldr	r3, [r3, #12]
 800889c:	4a0c      	ldr	r2, [pc, #48]	; (80088d0 <HAL_RCC_OscConfig+0x784>)
 800889e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80088a2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80088a4:	f7fe f8d0 	bl	8006a48 <HAL_GetTick>
 80088a8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80088aa:	e008      	b.n	80088be <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80088ac:	f7fe f8cc 	bl	8006a48 <HAL_GetTick>
 80088b0:	4602      	mov	r2, r0
 80088b2:	693b      	ldr	r3, [r7, #16]
 80088b4:	1ad3      	subs	r3, r2, r3
 80088b6:	2b02      	cmp	r3, #2
 80088b8:	d901      	bls.n	80088be <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80088ba:	2303      	movs	r3, #3
 80088bc:	e058      	b.n	8008970 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80088be:	4b04      	ldr	r3, [pc, #16]	; (80088d0 <HAL_RCC_OscConfig+0x784>)
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d0f0      	beq.n	80088ac <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80088ca:	e050      	b.n	800896e <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80088cc:	2301      	movs	r3, #1
 80088ce:	e04f      	b.n	8008970 <HAL_RCC_OscConfig+0x824>
 80088d0:	40021000 	.word	0x40021000
 80088d4:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80088d8:	4b27      	ldr	r3, [pc, #156]	; (8008978 <HAL_RCC_OscConfig+0x82c>)
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d144      	bne.n	800896e <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80088e4:	4b24      	ldr	r3, [pc, #144]	; (8008978 <HAL_RCC_OscConfig+0x82c>)
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	4a23      	ldr	r2, [pc, #140]	; (8008978 <HAL_RCC_OscConfig+0x82c>)
 80088ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80088ee:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80088f0:	4b21      	ldr	r3, [pc, #132]	; (8008978 <HAL_RCC_OscConfig+0x82c>)
 80088f2:	68db      	ldr	r3, [r3, #12]
 80088f4:	4a20      	ldr	r2, [pc, #128]	; (8008978 <HAL_RCC_OscConfig+0x82c>)
 80088f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80088fa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80088fc:	f7fe f8a4 	bl	8006a48 <HAL_GetTick>
 8008900:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008902:	e008      	b.n	8008916 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008904:	f7fe f8a0 	bl	8006a48 <HAL_GetTick>
 8008908:	4602      	mov	r2, r0
 800890a:	693b      	ldr	r3, [r7, #16]
 800890c:	1ad3      	subs	r3, r2, r3
 800890e:	2b02      	cmp	r3, #2
 8008910:	d901      	bls.n	8008916 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8008912:	2303      	movs	r3, #3
 8008914:	e02c      	b.n	8008970 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008916:	4b18      	ldr	r3, [pc, #96]	; (8008978 <HAL_RCC_OscConfig+0x82c>)
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800891e:	2b00      	cmp	r3, #0
 8008920:	d0f0      	beq.n	8008904 <HAL_RCC_OscConfig+0x7b8>
 8008922:	e024      	b.n	800896e <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8008924:	69bb      	ldr	r3, [r7, #24]
 8008926:	2b0c      	cmp	r3, #12
 8008928:	d01f      	beq.n	800896a <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800892a:	4b13      	ldr	r3, [pc, #76]	; (8008978 <HAL_RCC_OscConfig+0x82c>)
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	4a12      	ldr	r2, [pc, #72]	; (8008978 <HAL_RCC_OscConfig+0x82c>)
 8008930:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008934:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008936:	f7fe f887 	bl	8006a48 <HAL_GetTick>
 800893a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800893c:	e008      	b.n	8008950 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800893e:	f7fe f883 	bl	8006a48 <HAL_GetTick>
 8008942:	4602      	mov	r2, r0
 8008944:	693b      	ldr	r3, [r7, #16]
 8008946:	1ad3      	subs	r3, r2, r3
 8008948:	2b02      	cmp	r3, #2
 800894a:	d901      	bls.n	8008950 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 800894c:	2303      	movs	r3, #3
 800894e:	e00f      	b.n	8008970 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008950:	4b09      	ldr	r3, [pc, #36]	; (8008978 <HAL_RCC_OscConfig+0x82c>)
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008958:	2b00      	cmp	r3, #0
 800895a:	d1f0      	bne.n	800893e <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800895c:	4b06      	ldr	r3, [pc, #24]	; (8008978 <HAL_RCC_OscConfig+0x82c>)
 800895e:	68da      	ldr	r2, [r3, #12]
 8008960:	4905      	ldr	r1, [pc, #20]	; (8008978 <HAL_RCC_OscConfig+0x82c>)
 8008962:	4b06      	ldr	r3, [pc, #24]	; (800897c <HAL_RCC_OscConfig+0x830>)
 8008964:	4013      	ands	r3, r2
 8008966:	60cb      	str	r3, [r1, #12]
 8008968:	e001      	b.n	800896e <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800896a:	2301      	movs	r3, #1
 800896c:	e000      	b.n	8008970 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800896e:	2300      	movs	r3, #0
}
 8008970:	4618      	mov	r0, r3
 8008972:	3720      	adds	r7, #32
 8008974:	46bd      	mov	sp, r7
 8008976:	bd80      	pop	{r7, pc}
 8008978:	40021000 	.word	0x40021000
 800897c:	feeefffc 	.word	0xfeeefffc

08008980 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008980:	b580      	push	{r7, lr}
 8008982:	b086      	sub	sp, #24
 8008984:	af00      	add	r7, sp, #0
 8008986:	6078      	str	r0, [r7, #4]
 8008988:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800898a:	2300      	movs	r3, #0
 800898c:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	2b00      	cmp	r3, #0
 8008992:	d101      	bne.n	8008998 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8008994:	2301      	movs	r3, #1
 8008996:	e11d      	b.n	8008bd4 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008998:	4b90      	ldr	r3, [pc, #576]	; (8008bdc <HAL_RCC_ClockConfig+0x25c>)
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	f003 030f 	and.w	r3, r3, #15
 80089a0:	683a      	ldr	r2, [r7, #0]
 80089a2:	429a      	cmp	r2, r3
 80089a4:	d910      	bls.n	80089c8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80089a6:	4b8d      	ldr	r3, [pc, #564]	; (8008bdc <HAL_RCC_ClockConfig+0x25c>)
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	f023 020f 	bic.w	r2, r3, #15
 80089ae:	498b      	ldr	r1, [pc, #556]	; (8008bdc <HAL_RCC_ClockConfig+0x25c>)
 80089b0:	683b      	ldr	r3, [r7, #0]
 80089b2:	4313      	orrs	r3, r2
 80089b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80089b6:	4b89      	ldr	r3, [pc, #548]	; (8008bdc <HAL_RCC_ClockConfig+0x25c>)
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	f003 030f 	and.w	r3, r3, #15
 80089be:	683a      	ldr	r2, [r7, #0]
 80089c0:	429a      	cmp	r2, r3
 80089c2:	d001      	beq.n	80089c8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80089c4:	2301      	movs	r3, #1
 80089c6:	e105      	b.n	8008bd4 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	f003 0302 	and.w	r3, r3, #2
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d010      	beq.n	80089f6 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	689a      	ldr	r2, [r3, #8]
 80089d8:	4b81      	ldr	r3, [pc, #516]	; (8008be0 <HAL_RCC_ClockConfig+0x260>)
 80089da:	689b      	ldr	r3, [r3, #8]
 80089dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80089e0:	429a      	cmp	r2, r3
 80089e2:	d908      	bls.n	80089f6 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80089e4:	4b7e      	ldr	r3, [pc, #504]	; (8008be0 <HAL_RCC_ClockConfig+0x260>)
 80089e6:	689b      	ldr	r3, [r3, #8]
 80089e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	689b      	ldr	r3, [r3, #8]
 80089f0:	497b      	ldr	r1, [pc, #492]	; (8008be0 <HAL_RCC_ClockConfig+0x260>)
 80089f2:	4313      	orrs	r3, r2
 80089f4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	f003 0301 	and.w	r3, r3, #1
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d079      	beq.n	8008af6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	685b      	ldr	r3, [r3, #4]
 8008a06:	2b03      	cmp	r3, #3
 8008a08:	d11e      	bne.n	8008a48 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008a0a:	4b75      	ldr	r3, [pc, #468]	; (8008be0 <HAL_RCC_ClockConfig+0x260>)
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d101      	bne.n	8008a1a <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8008a16:	2301      	movs	r3, #1
 8008a18:	e0dc      	b.n	8008bd4 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8008a1a:	f000 fa3b 	bl	8008e94 <RCC_GetSysClockFreqFromPLLSource>
 8008a1e:	4603      	mov	r3, r0
 8008a20:	4a70      	ldr	r2, [pc, #448]	; (8008be4 <HAL_RCC_ClockConfig+0x264>)
 8008a22:	4293      	cmp	r3, r2
 8008a24:	d946      	bls.n	8008ab4 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8008a26:	4b6e      	ldr	r3, [pc, #440]	; (8008be0 <HAL_RCC_ClockConfig+0x260>)
 8008a28:	689b      	ldr	r3, [r3, #8]
 8008a2a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d140      	bne.n	8008ab4 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8008a32:	4b6b      	ldr	r3, [pc, #428]	; (8008be0 <HAL_RCC_ClockConfig+0x260>)
 8008a34:	689b      	ldr	r3, [r3, #8]
 8008a36:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008a3a:	4a69      	ldr	r2, [pc, #420]	; (8008be0 <HAL_RCC_ClockConfig+0x260>)
 8008a3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a40:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8008a42:	2380      	movs	r3, #128	; 0x80
 8008a44:	617b      	str	r3, [r7, #20]
 8008a46:	e035      	b.n	8008ab4 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	685b      	ldr	r3, [r3, #4]
 8008a4c:	2b02      	cmp	r3, #2
 8008a4e:	d107      	bne.n	8008a60 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008a50:	4b63      	ldr	r3, [pc, #396]	; (8008be0 <HAL_RCC_ClockConfig+0x260>)
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d115      	bne.n	8008a88 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8008a5c:	2301      	movs	r3, #1
 8008a5e:	e0b9      	b.n	8008bd4 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	685b      	ldr	r3, [r3, #4]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d107      	bne.n	8008a78 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8008a68:	4b5d      	ldr	r3, [pc, #372]	; (8008be0 <HAL_RCC_ClockConfig+0x260>)
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	f003 0302 	and.w	r3, r3, #2
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d109      	bne.n	8008a88 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8008a74:	2301      	movs	r3, #1
 8008a76:	e0ad      	b.n	8008bd4 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008a78:	4b59      	ldr	r3, [pc, #356]	; (8008be0 <HAL_RCC_ClockConfig+0x260>)
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d101      	bne.n	8008a88 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8008a84:	2301      	movs	r3, #1
 8008a86:	e0a5      	b.n	8008bd4 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8008a88:	f000 f8b4 	bl	8008bf4 <HAL_RCC_GetSysClockFreq>
 8008a8c:	4603      	mov	r3, r0
 8008a8e:	4a55      	ldr	r2, [pc, #340]	; (8008be4 <HAL_RCC_ClockConfig+0x264>)
 8008a90:	4293      	cmp	r3, r2
 8008a92:	d90f      	bls.n	8008ab4 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8008a94:	4b52      	ldr	r3, [pc, #328]	; (8008be0 <HAL_RCC_ClockConfig+0x260>)
 8008a96:	689b      	ldr	r3, [r3, #8]
 8008a98:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d109      	bne.n	8008ab4 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8008aa0:	4b4f      	ldr	r3, [pc, #316]	; (8008be0 <HAL_RCC_ClockConfig+0x260>)
 8008aa2:	689b      	ldr	r3, [r3, #8]
 8008aa4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008aa8:	4a4d      	ldr	r2, [pc, #308]	; (8008be0 <HAL_RCC_ClockConfig+0x260>)
 8008aaa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008aae:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8008ab0:	2380      	movs	r3, #128	; 0x80
 8008ab2:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008ab4:	4b4a      	ldr	r3, [pc, #296]	; (8008be0 <HAL_RCC_ClockConfig+0x260>)
 8008ab6:	689b      	ldr	r3, [r3, #8]
 8008ab8:	f023 0203 	bic.w	r2, r3, #3
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	685b      	ldr	r3, [r3, #4]
 8008ac0:	4947      	ldr	r1, [pc, #284]	; (8008be0 <HAL_RCC_ClockConfig+0x260>)
 8008ac2:	4313      	orrs	r3, r2
 8008ac4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008ac6:	f7fd ffbf 	bl	8006a48 <HAL_GetTick>
 8008aca:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008acc:	e00a      	b.n	8008ae4 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008ace:	f7fd ffbb 	bl	8006a48 <HAL_GetTick>
 8008ad2:	4602      	mov	r2, r0
 8008ad4:	693b      	ldr	r3, [r7, #16]
 8008ad6:	1ad3      	subs	r3, r2, r3
 8008ad8:	f241 3288 	movw	r2, #5000	; 0x1388
 8008adc:	4293      	cmp	r3, r2
 8008ade:	d901      	bls.n	8008ae4 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8008ae0:	2303      	movs	r3, #3
 8008ae2:	e077      	b.n	8008bd4 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008ae4:	4b3e      	ldr	r3, [pc, #248]	; (8008be0 <HAL_RCC_ClockConfig+0x260>)
 8008ae6:	689b      	ldr	r3, [r3, #8]
 8008ae8:	f003 020c 	and.w	r2, r3, #12
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	685b      	ldr	r3, [r3, #4]
 8008af0:	009b      	lsls	r3, r3, #2
 8008af2:	429a      	cmp	r2, r3
 8008af4:	d1eb      	bne.n	8008ace <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8008af6:	697b      	ldr	r3, [r7, #20]
 8008af8:	2b80      	cmp	r3, #128	; 0x80
 8008afa:	d105      	bne.n	8008b08 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8008afc:	4b38      	ldr	r3, [pc, #224]	; (8008be0 <HAL_RCC_ClockConfig+0x260>)
 8008afe:	689b      	ldr	r3, [r3, #8]
 8008b00:	4a37      	ldr	r2, [pc, #220]	; (8008be0 <HAL_RCC_ClockConfig+0x260>)
 8008b02:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008b06:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	f003 0302 	and.w	r3, r3, #2
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d010      	beq.n	8008b36 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	689a      	ldr	r2, [r3, #8]
 8008b18:	4b31      	ldr	r3, [pc, #196]	; (8008be0 <HAL_RCC_ClockConfig+0x260>)
 8008b1a:	689b      	ldr	r3, [r3, #8]
 8008b1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008b20:	429a      	cmp	r2, r3
 8008b22:	d208      	bcs.n	8008b36 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008b24:	4b2e      	ldr	r3, [pc, #184]	; (8008be0 <HAL_RCC_ClockConfig+0x260>)
 8008b26:	689b      	ldr	r3, [r3, #8]
 8008b28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	689b      	ldr	r3, [r3, #8]
 8008b30:	492b      	ldr	r1, [pc, #172]	; (8008be0 <HAL_RCC_ClockConfig+0x260>)
 8008b32:	4313      	orrs	r3, r2
 8008b34:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008b36:	4b29      	ldr	r3, [pc, #164]	; (8008bdc <HAL_RCC_ClockConfig+0x25c>)
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	f003 030f 	and.w	r3, r3, #15
 8008b3e:	683a      	ldr	r2, [r7, #0]
 8008b40:	429a      	cmp	r2, r3
 8008b42:	d210      	bcs.n	8008b66 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008b44:	4b25      	ldr	r3, [pc, #148]	; (8008bdc <HAL_RCC_ClockConfig+0x25c>)
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	f023 020f 	bic.w	r2, r3, #15
 8008b4c:	4923      	ldr	r1, [pc, #140]	; (8008bdc <HAL_RCC_ClockConfig+0x25c>)
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	4313      	orrs	r3, r2
 8008b52:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008b54:	4b21      	ldr	r3, [pc, #132]	; (8008bdc <HAL_RCC_ClockConfig+0x25c>)
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	f003 030f 	and.w	r3, r3, #15
 8008b5c:	683a      	ldr	r2, [r7, #0]
 8008b5e:	429a      	cmp	r2, r3
 8008b60:	d001      	beq.n	8008b66 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8008b62:	2301      	movs	r3, #1
 8008b64:	e036      	b.n	8008bd4 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	f003 0304 	and.w	r3, r3, #4
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d008      	beq.n	8008b84 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008b72:	4b1b      	ldr	r3, [pc, #108]	; (8008be0 <HAL_RCC_ClockConfig+0x260>)
 8008b74:	689b      	ldr	r3, [r3, #8]
 8008b76:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	68db      	ldr	r3, [r3, #12]
 8008b7e:	4918      	ldr	r1, [pc, #96]	; (8008be0 <HAL_RCC_ClockConfig+0x260>)
 8008b80:	4313      	orrs	r3, r2
 8008b82:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	f003 0308 	and.w	r3, r3, #8
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d009      	beq.n	8008ba4 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008b90:	4b13      	ldr	r3, [pc, #76]	; (8008be0 <HAL_RCC_ClockConfig+0x260>)
 8008b92:	689b      	ldr	r3, [r3, #8]
 8008b94:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	691b      	ldr	r3, [r3, #16]
 8008b9c:	00db      	lsls	r3, r3, #3
 8008b9e:	4910      	ldr	r1, [pc, #64]	; (8008be0 <HAL_RCC_ClockConfig+0x260>)
 8008ba0:	4313      	orrs	r3, r2
 8008ba2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008ba4:	f000 f826 	bl	8008bf4 <HAL_RCC_GetSysClockFreq>
 8008ba8:	4602      	mov	r2, r0
 8008baa:	4b0d      	ldr	r3, [pc, #52]	; (8008be0 <HAL_RCC_ClockConfig+0x260>)
 8008bac:	689b      	ldr	r3, [r3, #8]
 8008bae:	091b      	lsrs	r3, r3, #4
 8008bb0:	f003 030f 	and.w	r3, r3, #15
 8008bb4:	490c      	ldr	r1, [pc, #48]	; (8008be8 <HAL_RCC_ClockConfig+0x268>)
 8008bb6:	5ccb      	ldrb	r3, [r1, r3]
 8008bb8:	f003 031f 	and.w	r3, r3, #31
 8008bbc:	fa22 f303 	lsr.w	r3, r2, r3
 8008bc0:	4a0a      	ldr	r2, [pc, #40]	; (8008bec <HAL_RCC_ClockConfig+0x26c>)
 8008bc2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8008bc4:	4b0a      	ldr	r3, [pc, #40]	; (8008bf0 <HAL_RCC_ClockConfig+0x270>)
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	4618      	mov	r0, r3
 8008bca:	f7fd fae7 	bl	800619c <HAL_InitTick>
 8008bce:	4603      	mov	r3, r0
 8008bd0:	73fb      	strb	r3, [r7, #15]

  return status;
 8008bd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	3718      	adds	r7, #24
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	bd80      	pop	{r7, pc}
 8008bdc:	40022000 	.word	0x40022000
 8008be0:	40021000 	.word	0x40021000
 8008be4:	04c4b400 	.word	0x04c4b400
 8008be8:	080147dc 	.word	0x080147dc
 8008bec:	20000010 	.word	0x20000010
 8008bf0:	20000014 	.word	0x20000014

08008bf4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008bf4:	b480      	push	{r7}
 8008bf6:	b089      	sub	sp, #36	; 0x24
 8008bf8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	61fb      	str	r3, [r7, #28]
 8008bfe:	2300      	movs	r3, #0
 8008c00:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008c02:	4b3e      	ldr	r3, [pc, #248]	; (8008cfc <HAL_RCC_GetSysClockFreq+0x108>)
 8008c04:	689b      	ldr	r3, [r3, #8]
 8008c06:	f003 030c 	and.w	r3, r3, #12
 8008c0a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008c0c:	4b3b      	ldr	r3, [pc, #236]	; (8008cfc <HAL_RCC_GetSysClockFreq+0x108>)
 8008c0e:	68db      	ldr	r3, [r3, #12]
 8008c10:	f003 0303 	and.w	r3, r3, #3
 8008c14:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8008c16:	693b      	ldr	r3, [r7, #16]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d005      	beq.n	8008c28 <HAL_RCC_GetSysClockFreq+0x34>
 8008c1c:	693b      	ldr	r3, [r7, #16]
 8008c1e:	2b0c      	cmp	r3, #12
 8008c20:	d121      	bne.n	8008c66 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	2b01      	cmp	r3, #1
 8008c26:	d11e      	bne.n	8008c66 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8008c28:	4b34      	ldr	r3, [pc, #208]	; (8008cfc <HAL_RCC_GetSysClockFreq+0x108>)
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	f003 0308 	and.w	r3, r3, #8
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d107      	bne.n	8008c44 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8008c34:	4b31      	ldr	r3, [pc, #196]	; (8008cfc <HAL_RCC_GetSysClockFreq+0x108>)
 8008c36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008c3a:	0a1b      	lsrs	r3, r3, #8
 8008c3c:	f003 030f 	and.w	r3, r3, #15
 8008c40:	61fb      	str	r3, [r7, #28]
 8008c42:	e005      	b.n	8008c50 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8008c44:	4b2d      	ldr	r3, [pc, #180]	; (8008cfc <HAL_RCC_GetSysClockFreq+0x108>)
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	091b      	lsrs	r3, r3, #4
 8008c4a:	f003 030f 	and.w	r3, r3, #15
 8008c4e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8008c50:	4a2b      	ldr	r2, [pc, #172]	; (8008d00 <HAL_RCC_GetSysClockFreq+0x10c>)
 8008c52:	69fb      	ldr	r3, [r7, #28]
 8008c54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008c58:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008c5a:	693b      	ldr	r3, [r7, #16]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d10d      	bne.n	8008c7c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8008c60:	69fb      	ldr	r3, [r7, #28]
 8008c62:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008c64:	e00a      	b.n	8008c7c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8008c66:	693b      	ldr	r3, [r7, #16]
 8008c68:	2b04      	cmp	r3, #4
 8008c6a:	d102      	bne.n	8008c72 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8008c6c:	4b25      	ldr	r3, [pc, #148]	; (8008d04 <HAL_RCC_GetSysClockFreq+0x110>)
 8008c6e:	61bb      	str	r3, [r7, #24]
 8008c70:	e004      	b.n	8008c7c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8008c72:	693b      	ldr	r3, [r7, #16]
 8008c74:	2b08      	cmp	r3, #8
 8008c76:	d101      	bne.n	8008c7c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8008c78:	4b23      	ldr	r3, [pc, #140]	; (8008d08 <HAL_RCC_GetSysClockFreq+0x114>)
 8008c7a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8008c7c:	693b      	ldr	r3, [r7, #16]
 8008c7e:	2b0c      	cmp	r3, #12
 8008c80:	d134      	bne.n	8008cec <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008c82:	4b1e      	ldr	r3, [pc, #120]	; (8008cfc <HAL_RCC_GetSysClockFreq+0x108>)
 8008c84:	68db      	ldr	r3, [r3, #12]
 8008c86:	f003 0303 	and.w	r3, r3, #3
 8008c8a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8008c8c:	68bb      	ldr	r3, [r7, #8]
 8008c8e:	2b02      	cmp	r3, #2
 8008c90:	d003      	beq.n	8008c9a <HAL_RCC_GetSysClockFreq+0xa6>
 8008c92:	68bb      	ldr	r3, [r7, #8]
 8008c94:	2b03      	cmp	r3, #3
 8008c96:	d003      	beq.n	8008ca0 <HAL_RCC_GetSysClockFreq+0xac>
 8008c98:	e005      	b.n	8008ca6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8008c9a:	4b1a      	ldr	r3, [pc, #104]	; (8008d04 <HAL_RCC_GetSysClockFreq+0x110>)
 8008c9c:	617b      	str	r3, [r7, #20]
      break;
 8008c9e:	e005      	b.n	8008cac <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8008ca0:	4b19      	ldr	r3, [pc, #100]	; (8008d08 <HAL_RCC_GetSysClockFreq+0x114>)
 8008ca2:	617b      	str	r3, [r7, #20]
      break;
 8008ca4:	e002      	b.n	8008cac <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8008ca6:	69fb      	ldr	r3, [r7, #28]
 8008ca8:	617b      	str	r3, [r7, #20]
      break;
 8008caa:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008cac:	4b13      	ldr	r3, [pc, #76]	; (8008cfc <HAL_RCC_GetSysClockFreq+0x108>)
 8008cae:	68db      	ldr	r3, [r3, #12]
 8008cb0:	091b      	lsrs	r3, r3, #4
 8008cb2:	f003 030f 	and.w	r3, r3, #15
 8008cb6:	3301      	adds	r3, #1
 8008cb8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8008cba:	4b10      	ldr	r3, [pc, #64]	; (8008cfc <HAL_RCC_GetSysClockFreq+0x108>)
 8008cbc:	68db      	ldr	r3, [r3, #12]
 8008cbe:	0a1b      	lsrs	r3, r3, #8
 8008cc0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008cc4:	697a      	ldr	r2, [r7, #20]
 8008cc6:	fb03 f202 	mul.w	r2, r3, r2
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	fbb2 f3f3 	udiv	r3, r2, r3
 8008cd0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008cd2:	4b0a      	ldr	r3, [pc, #40]	; (8008cfc <HAL_RCC_GetSysClockFreq+0x108>)
 8008cd4:	68db      	ldr	r3, [r3, #12]
 8008cd6:	0e5b      	lsrs	r3, r3, #25
 8008cd8:	f003 0303 	and.w	r3, r3, #3
 8008cdc:	3301      	adds	r3, #1
 8008cde:	005b      	lsls	r3, r3, #1
 8008ce0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8008ce2:	697a      	ldr	r2, [r7, #20]
 8008ce4:	683b      	ldr	r3, [r7, #0]
 8008ce6:	fbb2 f3f3 	udiv	r3, r2, r3
 8008cea:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8008cec:	69bb      	ldr	r3, [r7, #24]
}
 8008cee:	4618      	mov	r0, r3
 8008cf0:	3724      	adds	r7, #36	; 0x24
 8008cf2:	46bd      	mov	sp, r7
 8008cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf8:	4770      	bx	lr
 8008cfa:	bf00      	nop
 8008cfc:	40021000 	.word	0x40021000
 8008d00:	080147f4 	.word	0x080147f4
 8008d04:	00f42400 	.word	0x00f42400
 8008d08:	007a1200 	.word	0x007a1200

08008d0c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008d0c:	b480      	push	{r7}
 8008d0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008d10:	4b03      	ldr	r3, [pc, #12]	; (8008d20 <HAL_RCC_GetHCLKFreq+0x14>)
 8008d12:	681b      	ldr	r3, [r3, #0]
}
 8008d14:	4618      	mov	r0, r3
 8008d16:	46bd      	mov	sp, r7
 8008d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1c:	4770      	bx	lr
 8008d1e:	bf00      	nop
 8008d20:	20000010 	.word	0x20000010

08008d24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008d24:	b580      	push	{r7, lr}
 8008d26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8008d28:	f7ff fff0 	bl	8008d0c <HAL_RCC_GetHCLKFreq>
 8008d2c:	4602      	mov	r2, r0
 8008d2e:	4b06      	ldr	r3, [pc, #24]	; (8008d48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008d30:	689b      	ldr	r3, [r3, #8]
 8008d32:	0a1b      	lsrs	r3, r3, #8
 8008d34:	f003 0307 	and.w	r3, r3, #7
 8008d38:	4904      	ldr	r1, [pc, #16]	; (8008d4c <HAL_RCC_GetPCLK1Freq+0x28>)
 8008d3a:	5ccb      	ldrb	r3, [r1, r3]
 8008d3c:	f003 031f 	and.w	r3, r3, #31
 8008d40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008d44:	4618      	mov	r0, r3
 8008d46:	bd80      	pop	{r7, pc}
 8008d48:	40021000 	.word	0x40021000
 8008d4c:	080147ec 	.word	0x080147ec

08008d50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8008d54:	f7ff ffda 	bl	8008d0c <HAL_RCC_GetHCLKFreq>
 8008d58:	4602      	mov	r2, r0
 8008d5a:	4b06      	ldr	r3, [pc, #24]	; (8008d74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008d5c:	689b      	ldr	r3, [r3, #8]
 8008d5e:	0adb      	lsrs	r3, r3, #11
 8008d60:	f003 0307 	and.w	r3, r3, #7
 8008d64:	4904      	ldr	r1, [pc, #16]	; (8008d78 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008d66:	5ccb      	ldrb	r3, [r1, r3]
 8008d68:	f003 031f 	and.w	r3, r3, #31
 8008d6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008d70:	4618      	mov	r0, r3
 8008d72:	bd80      	pop	{r7, pc}
 8008d74:	40021000 	.word	0x40021000
 8008d78:	080147ec 	.word	0x080147ec

08008d7c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008d7c:	b480      	push	{r7}
 8008d7e:	b083      	sub	sp, #12
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
 8008d84:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	220f      	movs	r2, #15
 8008d8a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8008d8c:	4b12      	ldr	r3, [pc, #72]	; (8008dd8 <HAL_RCC_GetClockConfig+0x5c>)
 8008d8e:	689b      	ldr	r3, [r3, #8]
 8008d90:	f003 0203 	and.w	r2, r3, #3
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8008d98:	4b0f      	ldr	r3, [pc, #60]	; (8008dd8 <HAL_RCC_GetClockConfig+0x5c>)
 8008d9a:	689b      	ldr	r3, [r3, #8]
 8008d9c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8008da4:	4b0c      	ldr	r3, [pc, #48]	; (8008dd8 <HAL_RCC_GetClockConfig+0x5c>)
 8008da6:	689b      	ldr	r3, [r3, #8]
 8008da8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8008db0:	4b09      	ldr	r3, [pc, #36]	; (8008dd8 <HAL_RCC_GetClockConfig+0x5c>)
 8008db2:	689b      	ldr	r3, [r3, #8]
 8008db4:	08db      	lsrs	r3, r3, #3
 8008db6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8008dbe:	4b07      	ldr	r3, [pc, #28]	; (8008ddc <HAL_RCC_GetClockConfig+0x60>)
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	f003 020f 	and.w	r2, r3, #15
 8008dc6:	683b      	ldr	r3, [r7, #0]
 8008dc8:	601a      	str	r2, [r3, #0]
}
 8008dca:	bf00      	nop
 8008dcc:	370c      	adds	r7, #12
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd4:	4770      	bx	lr
 8008dd6:	bf00      	nop
 8008dd8:	40021000 	.word	0x40021000
 8008ddc:	40022000 	.word	0x40022000

08008de0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8008de0:	b580      	push	{r7, lr}
 8008de2:	b086      	sub	sp, #24
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8008de8:	2300      	movs	r3, #0
 8008dea:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8008dec:	4b27      	ldr	r3, [pc, #156]	; (8008e8c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8008dee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008df0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d003      	beq.n	8008e00 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8008df8:	f7ff f8e4 	bl	8007fc4 <HAL_PWREx_GetVoltageRange>
 8008dfc:	6178      	str	r0, [r7, #20]
 8008dfe:	e014      	b.n	8008e2a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8008e00:	4b22      	ldr	r3, [pc, #136]	; (8008e8c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8008e02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e04:	4a21      	ldr	r2, [pc, #132]	; (8008e8c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8008e06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008e0a:	6593      	str	r3, [r2, #88]	; 0x58
 8008e0c:	4b1f      	ldr	r3, [pc, #124]	; (8008e8c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8008e0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008e14:	60fb      	str	r3, [r7, #12]
 8008e16:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8008e18:	f7ff f8d4 	bl	8007fc4 <HAL_PWREx_GetVoltageRange>
 8008e1c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8008e1e:	4b1b      	ldr	r3, [pc, #108]	; (8008e8c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8008e20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e22:	4a1a      	ldr	r2, [pc, #104]	; (8008e8c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8008e24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008e28:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008e2a:	697b      	ldr	r3, [r7, #20]
 8008e2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008e30:	d10b      	bne.n	8008e4a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	2b80      	cmp	r3, #128	; 0x80
 8008e36:	d913      	bls.n	8008e60 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	2ba0      	cmp	r3, #160	; 0xa0
 8008e3c:	d902      	bls.n	8008e44 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8008e3e:	2302      	movs	r3, #2
 8008e40:	613b      	str	r3, [r7, #16]
 8008e42:	e00d      	b.n	8008e60 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8008e44:	2301      	movs	r3, #1
 8008e46:	613b      	str	r3, [r7, #16]
 8008e48:	e00a      	b.n	8008e60 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	2b7f      	cmp	r3, #127	; 0x7f
 8008e4e:	d902      	bls.n	8008e56 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8008e50:	2302      	movs	r3, #2
 8008e52:	613b      	str	r3, [r7, #16]
 8008e54:	e004      	b.n	8008e60 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	2b70      	cmp	r3, #112	; 0x70
 8008e5a:	d101      	bne.n	8008e60 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8008e5c:	2301      	movs	r3, #1
 8008e5e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8008e60:	4b0b      	ldr	r3, [pc, #44]	; (8008e90 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	f023 020f 	bic.w	r2, r3, #15
 8008e68:	4909      	ldr	r1, [pc, #36]	; (8008e90 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8008e6a:	693b      	ldr	r3, [r7, #16]
 8008e6c:	4313      	orrs	r3, r2
 8008e6e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8008e70:	4b07      	ldr	r3, [pc, #28]	; (8008e90 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	f003 030f 	and.w	r3, r3, #15
 8008e78:	693a      	ldr	r2, [r7, #16]
 8008e7a:	429a      	cmp	r2, r3
 8008e7c:	d001      	beq.n	8008e82 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8008e7e:	2301      	movs	r3, #1
 8008e80:	e000      	b.n	8008e84 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8008e82:	2300      	movs	r3, #0
}
 8008e84:	4618      	mov	r0, r3
 8008e86:	3718      	adds	r7, #24
 8008e88:	46bd      	mov	sp, r7
 8008e8a:	bd80      	pop	{r7, pc}
 8008e8c:	40021000 	.word	0x40021000
 8008e90:	40022000 	.word	0x40022000

08008e94 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8008e94:	b480      	push	{r7}
 8008e96:	b087      	sub	sp, #28
 8008e98:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008e9a:	4b2d      	ldr	r3, [pc, #180]	; (8008f50 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8008e9c:	68db      	ldr	r3, [r3, #12]
 8008e9e:	f003 0303 	and.w	r3, r3, #3
 8008ea2:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	2b03      	cmp	r3, #3
 8008ea8:	d00b      	beq.n	8008ec2 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	2b03      	cmp	r3, #3
 8008eae:	d825      	bhi.n	8008efc <RCC_GetSysClockFreqFromPLLSource+0x68>
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	2b01      	cmp	r3, #1
 8008eb4:	d008      	beq.n	8008ec8 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	2b02      	cmp	r3, #2
 8008eba:	d11f      	bne.n	8008efc <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8008ebc:	4b25      	ldr	r3, [pc, #148]	; (8008f54 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8008ebe:	613b      	str	r3, [r7, #16]
    break;
 8008ec0:	e01f      	b.n	8008f02 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8008ec2:	4b25      	ldr	r3, [pc, #148]	; (8008f58 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8008ec4:	613b      	str	r3, [r7, #16]
    break;
 8008ec6:	e01c      	b.n	8008f02 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8008ec8:	4b21      	ldr	r3, [pc, #132]	; (8008f50 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	f003 0308 	and.w	r3, r3, #8
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d107      	bne.n	8008ee4 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8008ed4:	4b1e      	ldr	r3, [pc, #120]	; (8008f50 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8008ed6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008eda:	0a1b      	lsrs	r3, r3, #8
 8008edc:	f003 030f 	and.w	r3, r3, #15
 8008ee0:	617b      	str	r3, [r7, #20]
 8008ee2:	e005      	b.n	8008ef0 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8008ee4:	4b1a      	ldr	r3, [pc, #104]	; (8008f50 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	091b      	lsrs	r3, r3, #4
 8008eea:	f003 030f 	and.w	r3, r3, #15
 8008eee:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8008ef0:	4a1a      	ldr	r2, [pc, #104]	; (8008f5c <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8008ef2:	697b      	ldr	r3, [r7, #20]
 8008ef4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008ef8:	613b      	str	r3, [r7, #16]
    break;
 8008efa:	e002      	b.n	8008f02 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8008efc:	2300      	movs	r3, #0
 8008efe:	613b      	str	r3, [r7, #16]
    break;
 8008f00:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008f02:	4b13      	ldr	r3, [pc, #76]	; (8008f50 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8008f04:	68db      	ldr	r3, [r3, #12]
 8008f06:	091b      	lsrs	r3, r3, #4
 8008f08:	f003 030f 	and.w	r3, r3, #15
 8008f0c:	3301      	adds	r3, #1
 8008f0e:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8008f10:	4b0f      	ldr	r3, [pc, #60]	; (8008f50 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8008f12:	68db      	ldr	r3, [r3, #12]
 8008f14:	0a1b      	lsrs	r3, r3, #8
 8008f16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f1a:	693a      	ldr	r2, [r7, #16]
 8008f1c:	fb03 f202 	mul.w	r2, r3, r2
 8008f20:	68bb      	ldr	r3, [r7, #8]
 8008f22:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f26:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008f28:	4b09      	ldr	r3, [pc, #36]	; (8008f50 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8008f2a:	68db      	ldr	r3, [r3, #12]
 8008f2c:	0e5b      	lsrs	r3, r3, #25
 8008f2e:	f003 0303 	and.w	r3, r3, #3
 8008f32:	3301      	adds	r3, #1
 8008f34:	005b      	lsls	r3, r3, #1
 8008f36:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8008f38:	693a      	ldr	r2, [r7, #16]
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f40:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8008f42:	683b      	ldr	r3, [r7, #0]
}
 8008f44:	4618      	mov	r0, r3
 8008f46:	371c      	adds	r7, #28
 8008f48:	46bd      	mov	sp, r7
 8008f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4e:	4770      	bx	lr
 8008f50:	40021000 	.word	0x40021000
 8008f54:	00f42400 	.word	0x00f42400
 8008f58:	007a1200 	.word	0x007a1200
 8008f5c:	080147f4 	.word	0x080147f4

08008f60 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008f60:	b580      	push	{r7, lr}
 8008f62:	b086      	sub	sp, #24
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008f68:	2300      	movs	r3, #0
 8008f6a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d040      	beq.n	8008ffe <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f80:	2b80      	cmp	r3, #128	; 0x80
 8008f82:	d02a      	beq.n	8008fda <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8008f84:	2b80      	cmp	r3, #128	; 0x80
 8008f86:	d825      	bhi.n	8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8008f88:	2b60      	cmp	r3, #96	; 0x60
 8008f8a:	d026      	beq.n	8008fda <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8008f8c:	2b60      	cmp	r3, #96	; 0x60
 8008f8e:	d821      	bhi.n	8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8008f90:	2b40      	cmp	r3, #64	; 0x40
 8008f92:	d006      	beq.n	8008fa2 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8008f94:	2b40      	cmp	r3, #64	; 0x40
 8008f96:	d81d      	bhi.n	8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d009      	beq.n	8008fb0 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8008f9c:	2b20      	cmp	r3, #32
 8008f9e:	d010      	beq.n	8008fc2 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8008fa0:	e018      	b.n	8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8008fa2:	4b89      	ldr	r3, [pc, #548]	; (80091c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008fa4:	68db      	ldr	r3, [r3, #12]
 8008fa6:	4a88      	ldr	r2, [pc, #544]	; (80091c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008fa8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008fac:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8008fae:	e015      	b.n	8008fdc <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	3304      	adds	r3, #4
 8008fb4:	2100      	movs	r1, #0
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	f000 fb02 	bl	80095c0 <RCCEx_PLLSAI1_Config>
 8008fbc:	4603      	mov	r3, r0
 8008fbe:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8008fc0:	e00c      	b.n	8008fdc <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	3320      	adds	r3, #32
 8008fc6:	2100      	movs	r1, #0
 8008fc8:	4618      	mov	r0, r3
 8008fca:	f000 fbed 	bl	80097a8 <RCCEx_PLLSAI2_Config>
 8008fce:	4603      	mov	r3, r0
 8008fd0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8008fd2:	e003      	b.n	8008fdc <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008fd4:	2301      	movs	r3, #1
 8008fd6:	74fb      	strb	r3, [r7, #19]
      break;
 8008fd8:	e000      	b.n	8008fdc <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8008fda:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008fdc:	7cfb      	ldrb	r3, [r7, #19]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d10b      	bne.n	8008ffa <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008fe2:	4b79      	ldr	r3, [pc, #484]	; (80091c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008fe4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008fe8:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ff0:	4975      	ldr	r1, [pc, #468]	; (80091c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008ff2:	4313      	orrs	r3, r2
 8008ff4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8008ff8:	e001      	b.n	8008ffe <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ffa:	7cfb      	ldrb	r3, [r7, #19]
 8008ffc:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009006:	2b00      	cmp	r3, #0
 8009008:	d047      	beq.n	800909a <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800900e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009012:	d030      	beq.n	8009076 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8009014:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009018:	d82a      	bhi.n	8009070 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800901a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800901e:	d02a      	beq.n	8009076 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8009020:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009024:	d824      	bhi.n	8009070 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8009026:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800902a:	d008      	beq.n	800903e <HAL_RCCEx_PeriphCLKConfig+0xde>
 800902c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009030:	d81e      	bhi.n	8009070 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8009032:	2b00      	cmp	r3, #0
 8009034:	d00a      	beq.n	800904c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8009036:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800903a:	d010      	beq.n	800905e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800903c:	e018      	b.n	8009070 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800903e:	4b62      	ldr	r3, [pc, #392]	; (80091c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009040:	68db      	ldr	r3, [r3, #12]
 8009042:	4a61      	ldr	r2, [pc, #388]	; (80091c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009044:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009048:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800904a:	e015      	b.n	8009078 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	3304      	adds	r3, #4
 8009050:	2100      	movs	r1, #0
 8009052:	4618      	mov	r0, r3
 8009054:	f000 fab4 	bl	80095c0 <RCCEx_PLLSAI1_Config>
 8009058:	4603      	mov	r3, r0
 800905a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800905c:	e00c      	b.n	8009078 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	3320      	adds	r3, #32
 8009062:	2100      	movs	r1, #0
 8009064:	4618      	mov	r0, r3
 8009066:	f000 fb9f 	bl	80097a8 <RCCEx_PLLSAI2_Config>
 800906a:	4603      	mov	r3, r0
 800906c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800906e:	e003      	b.n	8009078 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009070:	2301      	movs	r3, #1
 8009072:	74fb      	strb	r3, [r7, #19]
      break;
 8009074:	e000      	b.n	8009078 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8009076:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009078:	7cfb      	ldrb	r3, [r7, #19]
 800907a:	2b00      	cmp	r3, #0
 800907c:	d10b      	bne.n	8009096 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800907e:	4b52      	ldr	r3, [pc, #328]	; (80091c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009080:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009084:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800908c:	494e      	ldr	r1, [pc, #312]	; (80091c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800908e:	4313      	orrs	r3, r2
 8009090:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8009094:	e001      	b.n	800909a <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009096:	7cfb      	ldrb	r3, [r7, #19]
 8009098:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	f000 809f 	beq.w	80091e6 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 80090a8:	2300      	movs	r3, #0
 80090aa:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80090ac:	4b46      	ldr	r3, [pc, #280]	; (80091c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80090ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80090b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d101      	bne.n	80090bc <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80090b8:	2301      	movs	r3, #1
 80090ba:	e000      	b.n	80090be <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80090bc:	2300      	movs	r3, #0
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d00d      	beq.n	80090de <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80090c2:	4b41      	ldr	r3, [pc, #260]	; (80091c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80090c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80090c6:	4a40      	ldr	r2, [pc, #256]	; (80091c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80090c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80090cc:	6593      	str	r3, [r2, #88]	; 0x58
 80090ce:	4b3e      	ldr	r3, [pc, #248]	; (80091c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80090d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80090d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80090d6:	60bb      	str	r3, [r7, #8]
 80090d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80090da:	2301      	movs	r3, #1
 80090dc:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80090de:	4b3b      	ldr	r3, [pc, #236]	; (80091cc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	4a3a      	ldr	r2, [pc, #232]	; (80091cc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80090e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80090e8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80090ea:	f7fd fcad 	bl	8006a48 <HAL_GetTick>
 80090ee:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80090f0:	e009      	b.n	8009106 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80090f2:	f7fd fca9 	bl	8006a48 <HAL_GetTick>
 80090f6:	4602      	mov	r2, r0
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	1ad3      	subs	r3, r2, r3
 80090fc:	2b02      	cmp	r3, #2
 80090fe:	d902      	bls.n	8009106 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8009100:	2303      	movs	r3, #3
 8009102:	74fb      	strb	r3, [r7, #19]
        break;
 8009104:	e005      	b.n	8009112 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8009106:	4b31      	ldr	r3, [pc, #196]	; (80091cc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800910e:	2b00      	cmp	r3, #0
 8009110:	d0ef      	beq.n	80090f2 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8009112:	7cfb      	ldrb	r3, [r7, #19]
 8009114:	2b00      	cmp	r3, #0
 8009116:	d15b      	bne.n	80091d0 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8009118:	4b2b      	ldr	r3, [pc, #172]	; (80091c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800911a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800911e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009122:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8009124:	697b      	ldr	r3, [r7, #20]
 8009126:	2b00      	cmp	r3, #0
 8009128:	d01f      	beq.n	800916a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009130:	697a      	ldr	r2, [r7, #20]
 8009132:	429a      	cmp	r2, r3
 8009134:	d019      	beq.n	800916a <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8009136:	4b24      	ldr	r3, [pc, #144]	; (80091c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009138:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800913c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009140:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009142:	4b21      	ldr	r3, [pc, #132]	; (80091c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009144:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009148:	4a1f      	ldr	r2, [pc, #124]	; (80091c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800914a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800914e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009152:	4b1d      	ldr	r3, [pc, #116]	; (80091c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009154:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009158:	4a1b      	ldr	r2, [pc, #108]	; (80091c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800915a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800915e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8009162:	4a19      	ldr	r2, [pc, #100]	; (80091c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009164:	697b      	ldr	r3, [r7, #20]
 8009166:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800916a:	697b      	ldr	r3, [r7, #20]
 800916c:	f003 0301 	and.w	r3, r3, #1
 8009170:	2b00      	cmp	r3, #0
 8009172:	d016      	beq.n	80091a2 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009174:	f7fd fc68 	bl	8006a48 <HAL_GetTick>
 8009178:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800917a:	e00b      	b.n	8009194 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800917c:	f7fd fc64 	bl	8006a48 <HAL_GetTick>
 8009180:	4602      	mov	r2, r0
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	1ad3      	subs	r3, r2, r3
 8009186:	f241 3288 	movw	r2, #5000	; 0x1388
 800918a:	4293      	cmp	r3, r2
 800918c:	d902      	bls.n	8009194 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800918e:	2303      	movs	r3, #3
 8009190:	74fb      	strb	r3, [r7, #19]
            break;
 8009192:	e006      	b.n	80091a2 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009194:	4b0c      	ldr	r3, [pc, #48]	; (80091c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009196:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800919a:	f003 0302 	and.w	r3, r3, #2
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d0ec      	beq.n	800917c <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 80091a2:	7cfb      	ldrb	r3, [r7, #19]
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d10c      	bne.n	80091c2 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80091a8:	4b07      	ldr	r3, [pc, #28]	; (80091c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80091aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80091ae:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80091b8:	4903      	ldr	r1, [pc, #12]	; (80091c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80091ba:	4313      	orrs	r3, r2
 80091bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80091c0:	e008      	b.n	80091d4 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80091c2:	7cfb      	ldrb	r3, [r7, #19]
 80091c4:	74bb      	strb	r3, [r7, #18]
 80091c6:	e005      	b.n	80091d4 <HAL_RCCEx_PeriphCLKConfig+0x274>
 80091c8:	40021000 	.word	0x40021000
 80091cc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091d0:	7cfb      	ldrb	r3, [r7, #19]
 80091d2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80091d4:	7c7b      	ldrb	r3, [r7, #17]
 80091d6:	2b01      	cmp	r3, #1
 80091d8:	d105      	bne.n	80091e6 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80091da:	4ba0      	ldr	r3, [pc, #640]	; (800945c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80091dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091de:	4a9f      	ldr	r2, [pc, #636]	; (800945c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80091e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80091e4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	f003 0301 	and.w	r3, r3, #1
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d00a      	beq.n	8009208 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80091f2:	4b9a      	ldr	r3, [pc, #616]	; (800945c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80091f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80091f8:	f023 0203 	bic.w	r2, r3, #3
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009200:	4996      	ldr	r1, [pc, #600]	; (800945c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009202:	4313      	orrs	r3, r2
 8009204:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	f003 0302 	and.w	r3, r3, #2
 8009210:	2b00      	cmp	r3, #0
 8009212:	d00a      	beq.n	800922a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009214:	4b91      	ldr	r3, [pc, #580]	; (800945c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009216:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800921a:	f023 020c 	bic.w	r2, r3, #12
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009222:	498e      	ldr	r1, [pc, #568]	; (800945c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009224:	4313      	orrs	r3, r2
 8009226:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	f003 0304 	and.w	r3, r3, #4
 8009232:	2b00      	cmp	r3, #0
 8009234:	d00a      	beq.n	800924c <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8009236:	4b89      	ldr	r3, [pc, #548]	; (800945c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009238:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800923c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009244:	4985      	ldr	r1, [pc, #532]	; (800945c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009246:	4313      	orrs	r3, r2
 8009248:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	f003 0308 	and.w	r3, r3, #8
 8009254:	2b00      	cmp	r3, #0
 8009256:	d00a      	beq.n	800926e <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8009258:	4b80      	ldr	r3, [pc, #512]	; (800945c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800925a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800925e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009266:	497d      	ldr	r1, [pc, #500]	; (800945c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009268:	4313      	orrs	r3, r2
 800926a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	f003 0310 	and.w	r3, r3, #16
 8009276:	2b00      	cmp	r3, #0
 8009278:	d00a      	beq.n	8009290 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800927a:	4b78      	ldr	r3, [pc, #480]	; (800945c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800927c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009280:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009288:	4974      	ldr	r1, [pc, #464]	; (800945c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800928a:	4313      	orrs	r3, r2
 800928c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	f003 0320 	and.w	r3, r3, #32
 8009298:	2b00      	cmp	r3, #0
 800929a:	d00a      	beq.n	80092b2 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800929c:	4b6f      	ldr	r3, [pc, #444]	; (800945c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800929e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80092a2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80092aa:	496c      	ldr	r1, [pc, #432]	; (800945c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80092ac:	4313      	orrs	r3, r2
 80092ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d00a      	beq.n	80092d4 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80092be:	4b67      	ldr	r3, [pc, #412]	; (800945c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80092c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80092c4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80092cc:	4963      	ldr	r1, [pc, #396]	; (800945c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80092ce:	4313      	orrs	r3, r2
 80092d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d00a      	beq.n	80092f6 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80092e0:	4b5e      	ldr	r3, [pc, #376]	; (800945c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80092e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80092e6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80092ee:	495b      	ldr	r1, [pc, #364]	; (800945c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80092f0:	4313      	orrs	r3, r2
 80092f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d00a      	beq.n	8009318 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009302:	4b56      	ldr	r3, [pc, #344]	; (800945c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009304:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009308:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009310:	4952      	ldr	r1, [pc, #328]	; (800945c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009312:	4313      	orrs	r3, r2
 8009314:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009320:	2b00      	cmp	r3, #0
 8009322:	d00a      	beq.n	800933a <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8009324:	4b4d      	ldr	r3, [pc, #308]	; (800945c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009326:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800932a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009332:	494a      	ldr	r1, [pc, #296]	; (800945c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009334:	4313      	orrs	r3, r2
 8009336:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009342:	2b00      	cmp	r3, #0
 8009344:	d00a      	beq.n	800935c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009346:	4b45      	ldr	r3, [pc, #276]	; (800945c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009348:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800934c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009354:	4941      	ldr	r1, [pc, #260]	; (800945c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009356:	4313      	orrs	r3, r2
 8009358:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009364:	2b00      	cmp	r3, #0
 8009366:	d00a      	beq.n	800937e <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009368:	4b3c      	ldr	r3, [pc, #240]	; (800945c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800936a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800936e:	f023 0203 	bic.w	r2, r3, #3
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009376:	4939      	ldr	r1, [pc, #228]	; (800945c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009378:	4313      	orrs	r3, r2
 800937a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009386:	2b00      	cmp	r3, #0
 8009388:	d028      	beq.n	80093dc <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800938a:	4b34      	ldr	r3, [pc, #208]	; (800945c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800938c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009390:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009398:	4930      	ldr	r1, [pc, #192]	; (800945c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800939a:	4313      	orrs	r3, r2
 800939c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80093a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80093a8:	d106      	bne.n	80093b8 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80093aa:	4b2c      	ldr	r3, [pc, #176]	; (800945c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80093ac:	68db      	ldr	r3, [r3, #12]
 80093ae:	4a2b      	ldr	r2, [pc, #172]	; (800945c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80093b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80093b4:	60d3      	str	r3, [r2, #12]
 80093b6:	e011      	b.n	80093dc <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80093bc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80093c0:	d10c      	bne.n	80093dc <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	3304      	adds	r3, #4
 80093c6:	2101      	movs	r1, #1
 80093c8:	4618      	mov	r0, r3
 80093ca:	f000 f8f9 	bl	80095c0 <RCCEx_PLLSAI1_Config>
 80093ce:	4603      	mov	r3, r0
 80093d0:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80093d2:	7cfb      	ldrb	r3, [r7, #19]
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d001      	beq.n	80093dc <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 80093d8:	7cfb      	ldrb	r3, [r7, #19]
 80093da:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d04d      	beq.n	8009484 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80093ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80093f0:	d108      	bne.n	8009404 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80093f2:	4b1a      	ldr	r3, [pc, #104]	; (800945c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80093f4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80093f8:	4a18      	ldr	r2, [pc, #96]	; (800945c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80093fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80093fe:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8009402:	e012      	b.n	800942a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8009404:	4b15      	ldr	r3, [pc, #84]	; (800945c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009406:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800940a:	4a14      	ldr	r2, [pc, #80]	; (800945c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800940c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009410:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8009414:	4b11      	ldr	r3, [pc, #68]	; (800945c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009416:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800941a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009422:	490e      	ldr	r1, [pc, #56]	; (800945c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009424:	4313      	orrs	r3, r2
 8009426:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800942e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009432:	d106      	bne.n	8009442 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009434:	4b09      	ldr	r3, [pc, #36]	; (800945c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009436:	68db      	ldr	r3, [r3, #12]
 8009438:	4a08      	ldr	r2, [pc, #32]	; (800945c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800943a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800943e:	60d3      	str	r3, [r2, #12]
 8009440:	e020      	b.n	8009484 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009446:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800944a:	d109      	bne.n	8009460 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800944c:	4b03      	ldr	r3, [pc, #12]	; (800945c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800944e:	68db      	ldr	r3, [r3, #12]
 8009450:	4a02      	ldr	r2, [pc, #8]	; (800945c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009452:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009456:	60d3      	str	r3, [r2, #12]
 8009458:	e014      	b.n	8009484 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800945a:	bf00      	nop
 800945c:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009464:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009468:	d10c      	bne.n	8009484 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	3304      	adds	r3, #4
 800946e:	2101      	movs	r1, #1
 8009470:	4618      	mov	r0, r3
 8009472:	f000 f8a5 	bl	80095c0 <RCCEx_PLLSAI1_Config>
 8009476:	4603      	mov	r3, r0
 8009478:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800947a:	7cfb      	ldrb	r3, [r7, #19]
 800947c:	2b00      	cmp	r3, #0
 800947e:	d001      	beq.n	8009484 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8009480:	7cfb      	ldrb	r3, [r7, #19]
 8009482:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800948c:	2b00      	cmp	r3, #0
 800948e:	d028      	beq.n	80094e2 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009490:	4b4a      	ldr	r3, [pc, #296]	; (80095bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009492:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009496:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800949e:	4947      	ldr	r1, [pc, #284]	; (80095bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80094a0:	4313      	orrs	r3, r2
 80094a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80094aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80094ae:	d106      	bne.n	80094be <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80094b0:	4b42      	ldr	r3, [pc, #264]	; (80095bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80094b2:	68db      	ldr	r3, [r3, #12]
 80094b4:	4a41      	ldr	r2, [pc, #260]	; (80095bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80094b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80094ba:	60d3      	str	r3, [r2, #12]
 80094bc:	e011      	b.n	80094e2 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80094c2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80094c6:	d10c      	bne.n	80094e2 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	3304      	adds	r3, #4
 80094cc:	2101      	movs	r1, #1
 80094ce:	4618      	mov	r0, r3
 80094d0:	f000 f876 	bl	80095c0 <RCCEx_PLLSAI1_Config>
 80094d4:	4603      	mov	r3, r0
 80094d6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80094d8:	7cfb      	ldrb	r3, [r7, #19]
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d001      	beq.n	80094e2 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 80094de:	7cfb      	ldrb	r3, [r7, #19]
 80094e0:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d01e      	beq.n	800952c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80094ee:	4b33      	ldr	r3, [pc, #204]	; (80095bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80094f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80094f4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80094fe:	492f      	ldr	r1, [pc, #188]	; (80095bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009500:	4313      	orrs	r3, r2
 8009502:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800950c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009510:	d10c      	bne.n	800952c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	3304      	adds	r3, #4
 8009516:	2102      	movs	r1, #2
 8009518:	4618      	mov	r0, r3
 800951a:	f000 f851 	bl	80095c0 <RCCEx_PLLSAI1_Config>
 800951e:	4603      	mov	r3, r0
 8009520:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8009522:	7cfb      	ldrb	r3, [r7, #19]
 8009524:	2b00      	cmp	r3, #0
 8009526:	d001      	beq.n	800952c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8009528:	7cfb      	ldrb	r3, [r7, #19]
 800952a:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009534:	2b00      	cmp	r3, #0
 8009536:	d00b      	beq.n	8009550 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009538:	4b20      	ldr	r3, [pc, #128]	; (80095bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800953a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800953e:	f023 0204 	bic.w	r2, r3, #4
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009548:	491c      	ldr	r1, [pc, #112]	; (80095bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800954a:	4313      	orrs	r3, r2
 800954c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009558:	2b00      	cmp	r3, #0
 800955a:	d00b      	beq.n	8009574 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800955c:	4b17      	ldr	r3, [pc, #92]	; (80095bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800955e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009562:	f023 0218 	bic.w	r2, r3, #24
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800956c:	4913      	ldr	r1, [pc, #76]	; (80095bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800956e:	4313      	orrs	r3, r2
 8009570:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800957c:	2b00      	cmp	r3, #0
 800957e:	d017      	beq.n	80095b0 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8009580:	4b0e      	ldr	r3, [pc, #56]	; (80095bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009582:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009586:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009590:	490a      	ldr	r1, [pc, #40]	; (80095bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009592:	4313      	orrs	r3, r2
 8009594:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800959e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80095a2:	d105      	bne.n	80095b0 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80095a4:	4b05      	ldr	r3, [pc, #20]	; (80095bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80095a6:	68db      	ldr	r3, [r3, #12]
 80095a8:	4a04      	ldr	r2, [pc, #16]	; (80095bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80095aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80095ae:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80095b0:	7cbb      	ldrb	r3, [r7, #18]
}
 80095b2:	4618      	mov	r0, r3
 80095b4:	3718      	adds	r7, #24
 80095b6:	46bd      	mov	sp, r7
 80095b8:	bd80      	pop	{r7, pc}
 80095ba:	bf00      	nop
 80095bc:	40021000 	.word	0x40021000

080095c0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80095c0:	b580      	push	{r7, lr}
 80095c2:	b084      	sub	sp, #16
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	6078      	str	r0, [r7, #4]
 80095c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80095ca:	2300      	movs	r3, #0
 80095cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80095ce:	4b72      	ldr	r3, [pc, #456]	; (8009798 <RCCEx_PLLSAI1_Config+0x1d8>)
 80095d0:	68db      	ldr	r3, [r3, #12]
 80095d2:	f003 0303 	and.w	r3, r3, #3
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d00e      	beq.n	80095f8 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80095da:	4b6f      	ldr	r3, [pc, #444]	; (8009798 <RCCEx_PLLSAI1_Config+0x1d8>)
 80095dc:	68db      	ldr	r3, [r3, #12]
 80095de:	f003 0203 	and.w	r2, r3, #3
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	429a      	cmp	r2, r3
 80095e8:	d103      	bne.n	80095f2 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	681b      	ldr	r3, [r3, #0]
       ||
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d142      	bne.n	8009678 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80095f2:	2301      	movs	r3, #1
 80095f4:	73fb      	strb	r3, [r7, #15]
 80095f6:	e03f      	b.n	8009678 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	2b03      	cmp	r3, #3
 80095fe:	d018      	beq.n	8009632 <RCCEx_PLLSAI1_Config+0x72>
 8009600:	2b03      	cmp	r3, #3
 8009602:	d825      	bhi.n	8009650 <RCCEx_PLLSAI1_Config+0x90>
 8009604:	2b01      	cmp	r3, #1
 8009606:	d002      	beq.n	800960e <RCCEx_PLLSAI1_Config+0x4e>
 8009608:	2b02      	cmp	r3, #2
 800960a:	d009      	beq.n	8009620 <RCCEx_PLLSAI1_Config+0x60>
 800960c:	e020      	b.n	8009650 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800960e:	4b62      	ldr	r3, [pc, #392]	; (8009798 <RCCEx_PLLSAI1_Config+0x1d8>)
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	f003 0302 	and.w	r3, r3, #2
 8009616:	2b00      	cmp	r3, #0
 8009618:	d11d      	bne.n	8009656 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800961a:	2301      	movs	r3, #1
 800961c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800961e:	e01a      	b.n	8009656 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8009620:	4b5d      	ldr	r3, [pc, #372]	; (8009798 <RCCEx_PLLSAI1_Config+0x1d8>)
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009628:	2b00      	cmp	r3, #0
 800962a:	d116      	bne.n	800965a <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 800962c:	2301      	movs	r3, #1
 800962e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009630:	e013      	b.n	800965a <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8009632:	4b59      	ldr	r3, [pc, #356]	; (8009798 <RCCEx_PLLSAI1_Config+0x1d8>)
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800963a:	2b00      	cmp	r3, #0
 800963c:	d10f      	bne.n	800965e <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800963e:	4b56      	ldr	r3, [pc, #344]	; (8009798 <RCCEx_PLLSAI1_Config+0x1d8>)
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009646:	2b00      	cmp	r3, #0
 8009648:	d109      	bne.n	800965e <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800964a:	2301      	movs	r3, #1
 800964c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800964e:	e006      	b.n	800965e <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8009650:	2301      	movs	r3, #1
 8009652:	73fb      	strb	r3, [r7, #15]
      break;
 8009654:	e004      	b.n	8009660 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8009656:	bf00      	nop
 8009658:	e002      	b.n	8009660 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800965a:	bf00      	nop
 800965c:	e000      	b.n	8009660 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800965e:	bf00      	nop
    }

    if(status == HAL_OK)
 8009660:	7bfb      	ldrb	r3, [r7, #15]
 8009662:	2b00      	cmp	r3, #0
 8009664:	d108      	bne.n	8009678 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8009666:	4b4c      	ldr	r3, [pc, #304]	; (8009798 <RCCEx_PLLSAI1_Config+0x1d8>)
 8009668:	68db      	ldr	r3, [r3, #12]
 800966a:	f023 0203 	bic.w	r2, r3, #3
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	4949      	ldr	r1, [pc, #292]	; (8009798 <RCCEx_PLLSAI1_Config+0x1d8>)
 8009674:	4313      	orrs	r3, r2
 8009676:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8009678:	7bfb      	ldrb	r3, [r7, #15]
 800967a:	2b00      	cmp	r3, #0
 800967c:	f040 8086 	bne.w	800978c <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8009680:	4b45      	ldr	r3, [pc, #276]	; (8009798 <RCCEx_PLLSAI1_Config+0x1d8>)
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	4a44      	ldr	r2, [pc, #272]	; (8009798 <RCCEx_PLLSAI1_Config+0x1d8>)
 8009686:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800968a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800968c:	f7fd f9dc 	bl	8006a48 <HAL_GetTick>
 8009690:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8009692:	e009      	b.n	80096a8 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009694:	f7fd f9d8 	bl	8006a48 <HAL_GetTick>
 8009698:	4602      	mov	r2, r0
 800969a:	68bb      	ldr	r3, [r7, #8]
 800969c:	1ad3      	subs	r3, r2, r3
 800969e:	2b02      	cmp	r3, #2
 80096a0:	d902      	bls.n	80096a8 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80096a2:	2303      	movs	r3, #3
 80096a4:	73fb      	strb	r3, [r7, #15]
        break;
 80096a6:	e005      	b.n	80096b4 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80096a8:	4b3b      	ldr	r3, [pc, #236]	; (8009798 <RCCEx_PLLSAI1_Config+0x1d8>)
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d1ef      	bne.n	8009694 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80096b4:	7bfb      	ldrb	r3, [r7, #15]
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d168      	bne.n	800978c <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80096ba:	683b      	ldr	r3, [r7, #0]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d113      	bne.n	80096e8 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80096c0:	4b35      	ldr	r3, [pc, #212]	; (8009798 <RCCEx_PLLSAI1_Config+0x1d8>)
 80096c2:	691a      	ldr	r2, [r3, #16]
 80096c4:	4b35      	ldr	r3, [pc, #212]	; (800979c <RCCEx_PLLSAI1_Config+0x1dc>)
 80096c6:	4013      	ands	r3, r2
 80096c8:	687a      	ldr	r2, [r7, #4]
 80096ca:	6892      	ldr	r2, [r2, #8]
 80096cc:	0211      	lsls	r1, r2, #8
 80096ce:	687a      	ldr	r2, [r7, #4]
 80096d0:	68d2      	ldr	r2, [r2, #12]
 80096d2:	06d2      	lsls	r2, r2, #27
 80096d4:	4311      	orrs	r1, r2
 80096d6:	687a      	ldr	r2, [r7, #4]
 80096d8:	6852      	ldr	r2, [r2, #4]
 80096da:	3a01      	subs	r2, #1
 80096dc:	0112      	lsls	r2, r2, #4
 80096de:	430a      	orrs	r2, r1
 80096e0:	492d      	ldr	r1, [pc, #180]	; (8009798 <RCCEx_PLLSAI1_Config+0x1d8>)
 80096e2:	4313      	orrs	r3, r2
 80096e4:	610b      	str	r3, [r1, #16]
 80096e6:	e02d      	b.n	8009744 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80096e8:	683b      	ldr	r3, [r7, #0]
 80096ea:	2b01      	cmp	r3, #1
 80096ec:	d115      	bne.n	800971a <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80096ee:	4b2a      	ldr	r3, [pc, #168]	; (8009798 <RCCEx_PLLSAI1_Config+0x1d8>)
 80096f0:	691a      	ldr	r2, [r3, #16]
 80096f2:	4b2b      	ldr	r3, [pc, #172]	; (80097a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80096f4:	4013      	ands	r3, r2
 80096f6:	687a      	ldr	r2, [r7, #4]
 80096f8:	6892      	ldr	r2, [r2, #8]
 80096fa:	0211      	lsls	r1, r2, #8
 80096fc:	687a      	ldr	r2, [r7, #4]
 80096fe:	6912      	ldr	r2, [r2, #16]
 8009700:	0852      	lsrs	r2, r2, #1
 8009702:	3a01      	subs	r2, #1
 8009704:	0552      	lsls	r2, r2, #21
 8009706:	4311      	orrs	r1, r2
 8009708:	687a      	ldr	r2, [r7, #4]
 800970a:	6852      	ldr	r2, [r2, #4]
 800970c:	3a01      	subs	r2, #1
 800970e:	0112      	lsls	r2, r2, #4
 8009710:	430a      	orrs	r2, r1
 8009712:	4921      	ldr	r1, [pc, #132]	; (8009798 <RCCEx_PLLSAI1_Config+0x1d8>)
 8009714:	4313      	orrs	r3, r2
 8009716:	610b      	str	r3, [r1, #16]
 8009718:	e014      	b.n	8009744 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800971a:	4b1f      	ldr	r3, [pc, #124]	; (8009798 <RCCEx_PLLSAI1_Config+0x1d8>)
 800971c:	691a      	ldr	r2, [r3, #16]
 800971e:	4b21      	ldr	r3, [pc, #132]	; (80097a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009720:	4013      	ands	r3, r2
 8009722:	687a      	ldr	r2, [r7, #4]
 8009724:	6892      	ldr	r2, [r2, #8]
 8009726:	0211      	lsls	r1, r2, #8
 8009728:	687a      	ldr	r2, [r7, #4]
 800972a:	6952      	ldr	r2, [r2, #20]
 800972c:	0852      	lsrs	r2, r2, #1
 800972e:	3a01      	subs	r2, #1
 8009730:	0652      	lsls	r2, r2, #25
 8009732:	4311      	orrs	r1, r2
 8009734:	687a      	ldr	r2, [r7, #4]
 8009736:	6852      	ldr	r2, [r2, #4]
 8009738:	3a01      	subs	r2, #1
 800973a:	0112      	lsls	r2, r2, #4
 800973c:	430a      	orrs	r2, r1
 800973e:	4916      	ldr	r1, [pc, #88]	; (8009798 <RCCEx_PLLSAI1_Config+0x1d8>)
 8009740:	4313      	orrs	r3, r2
 8009742:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8009744:	4b14      	ldr	r3, [pc, #80]	; (8009798 <RCCEx_PLLSAI1_Config+0x1d8>)
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	4a13      	ldr	r2, [pc, #76]	; (8009798 <RCCEx_PLLSAI1_Config+0x1d8>)
 800974a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800974e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009750:	f7fd f97a 	bl	8006a48 <HAL_GetTick>
 8009754:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8009756:	e009      	b.n	800976c <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009758:	f7fd f976 	bl	8006a48 <HAL_GetTick>
 800975c:	4602      	mov	r2, r0
 800975e:	68bb      	ldr	r3, [r7, #8]
 8009760:	1ad3      	subs	r3, r2, r3
 8009762:	2b02      	cmp	r3, #2
 8009764:	d902      	bls.n	800976c <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8009766:	2303      	movs	r3, #3
 8009768:	73fb      	strb	r3, [r7, #15]
          break;
 800976a:	e005      	b.n	8009778 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800976c:	4b0a      	ldr	r3, [pc, #40]	; (8009798 <RCCEx_PLLSAI1_Config+0x1d8>)
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009774:	2b00      	cmp	r3, #0
 8009776:	d0ef      	beq.n	8009758 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8009778:	7bfb      	ldrb	r3, [r7, #15]
 800977a:	2b00      	cmp	r3, #0
 800977c:	d106      	bne.n	800978c <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800977e:	4b06      	ldr	r3, [pc, #24]	; (8009798 <RCCEx_PLLSAI1_Config+0x1d8>)
 8009780:	691a      	ldr	r2, [r3, #16]
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	699b      	ldr	r3, [r3, #24]
 8009786:	4904      	ldr	r1, [pc, #16]	; (8009798 <RCCEx_PLLSAI1_Config+0x1d8>)
 8009788:	4313      	orrs	r3, r2
 800978a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800978c:	7bfb      	ldrb	r3, [r7, #15]
}
 800978e:	4618      	mov	r0, r3
 8009790:	3710      	adds	r7, #16
 8009792:	46bd      	mov	sp, r7
 8009794:	bd80      	pop	{r7, pc}
 8009796:	bf00      	nop
 8009798:	40021000 	.word	0x40021000
 800979c:	07ff800f 	.word	0x07ff800f
 80097a0:	ff9f800f 	.word	0xff9f800f
 80097a4:	f9ff800f 	.word	0xf9ff800f

080097a8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80097a8:	b580      	push	{r7, lr}
 80097aa:	b084      	sub	sp, #16
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	6078      	str	r0, [r7, #4]
 80097b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80097b2:	2300      	movs	r3, #0
 80097b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80097b6:	4b72      	ldr	r3, [pc, #456]	; (8009980 <RCCEx_PLLSAI2_Config+0x1d8>)
 80097b8:	68db      	ldr	r3, [r3, #12]
 80097ba:	f003 0303 	and.w	r3, r3, #3
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d00e      	beq.n	80097e0 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80097c2:	4b6f      	ldr	r3, [pc, #444]	; (8009980 <RCCEx_PLLSAI2_Config+0x1d8>)
 80097c4:	68db      	ldr	r3, [r3, #12]
 80097c6:	f003 0203 	and.w	r2, r3, #3
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	429a      	cmp	r2, r3
 80097d0:	d103      	bne.n	80097da <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
       ||
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d142      	bne.n	8009860 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80097da:	2301      	movs	r3, #1
 80097dc:	73fb      	strb	r3, [r7, #15]
 80097de:	e03f      	b.n	8009860 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	2b03      	cmp	r3, #3
 80097e6:	d018      	beq.n	800981a <RCCEx_PLLSAI2_Config+0x72>
 80097e8:	2b03      	cmp	r3, #3
 80097ea:	d825      	bhi.n	8009838 <RCCEx_PLLSAI2_Config+0x90>
 80097ec:	2b01      	cmp	r3, #1
 80097ee:	d002      	beq.n	80097f6 <RCCEx_PLLSAI2_Config+0x4e>
 80097f0:	2b02      	cmp	r3, #2
 80097f2:	d009      	beq.n	8009808 <RCCEx_PLLSAI2_Config+0x60>
 80097f4:	e020      	b.n	8009838 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80097f6:	4b62      	ldr	r3, [pc, #392]	; (8009980 <RCCEx_PLLSAI2_Config+0x1d8>)
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	f003 0302 	and.w	r3, r3, #2
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d11d      	bne.n	800983e <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8009802:	2301      	movs	r3, #1
 8009804:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009806:	e01a      	b.n	800983e <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8009808:	4b5d      	ldr	r3, [pc, #372]	; (8009980 <RCCEx_PLLSAI2_Config+0x1d8>)
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009810:	2b00      	cmp	r3, #0
 8009812:	d116      	bne.n	8009842 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8009814:	2301      	movs	r3, #1
 8009816:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009818:	e013      	b.n	8009842 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800981a:	4b59      	ldr	r3, [pc, #356]	; (8009980 <RCCEx_PLLSAI2_Config+0x1d8>)
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009822:	2b00      	cmp	r3, #0
 8009824:	d10f      	bne.n	8009846 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8009826:	4b56      	ldr	r3, [pc, #344]	; (8009980 <RCCEx_PLLSAI2_Config+0x1d8>)
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800982e:	2b00      	cmp	r3, #0
 8009830:	d109      	bne.n	8009846 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8009832:	2301      	movs	r3, #1
 8009834:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009836:	e006      	b.n	8009846 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8009838:	2301      	movs	r3, #1
 800983a:	73fb      	strb	r3, [r7, #15]
      break;
 800983c:	e004      	b.n	8009848 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800983e:	bf00      	nop
 8009840:	e002      	b.n	8009848 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8009842:	bf00      	nop
 8009844:	e000      	b.n	8009848 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8009846:	bf00      	nop
    }

    if(status == HAL_OK)
 8009848:	7bfb      	ldrb	r3, [r7, #15]
 800984a:	2b00      	cmp	r3, #0
 800984c:	d108      	bne.n	8009860 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800984e:	4b4c      	ldr	r3, [pc, #304]	; (8009980 <RCCEx_PLLSAI2_Config+0x1d8>)
 8009850:	68db      	ldr	r3, [r3, #12]
 8009852:	f023 0203 	bic.w	r2, r3, #3
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	4949      	ldr	r1, [pc, #292]	; (8009980 <RCCEx_PLLSAI2_Config+0x1d8>)
 800985c:	4313      	orrs	r3, r2
 800985e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8009860:	7bfb      	ldrb	r3, [r7, #15]
 8009862:	2b00      	cmp	r3, #0
 8009864:	f040 8086 	bne.w	8009974 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8009868:	4b45      	ldr	r3, [pc, #276]	; (8009980 <RCCEx_PLLSAI2_Config+0x1d8>)
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	4a44      	ldr	r2, [pc, #272]	; (8009980 <RCCEx_PLLSAI2_Config+0x1d8>)
 800986e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009872:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009874:	f7fd f8e8 	bl	8006a48 <HAL_GetTick>
 8009878:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800987a:	e009      	b.n	8009890 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800987c:	f7fd f8e4 	bl	8006a48 <HAL_GetTick>
 8009880:	4602      	mov	r2, r0
 8009882:	68bb      	ldr	r3, [r7, #8]
 8009884:	1ad3      	subs	r3, r2, r3
 8009886:	2b02      	cmp	r3, #2
 8009888:	d902      	bls.n	8009890 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800988a:	2303      	movs	r3, #3
 800988c:	73fb      	strb	r3, [r7, #15]
        break;
 800988e:	e005      	b.n	800989c <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8009890:	4b3b      	ldr	r3, [pc, #236]	; (8009980 <RCCEx_PLLSAI2_Config+0x1d8>)
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009898:	2b00      	cmp	r3, #0
 800989a:	d1ef      	bne.n	800987c <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800989c:	7bfb      	ldrb	r3, [r7, #15]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d168      	bne.n	8009974 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80098a2:	683b      	ldr	r3, [r7, #0]
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d113      	bne.n	80098d0 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80098a8:	4b35      	ldr	r3, [pc, #212]	; (8009980 <RCCEx_PLLSAI2_Config+0x1d8>)
 80098aa:	695a      	ldr	r2, [r3, #20]
 80098ac:	4b35      	ldr	r3, [pc, #212]	; (8009984 <RCCEx_PLLSAI2_Config+0x1dc>)
 80098ae:	4013      	ands	r3, r2
 80098b0:	687a      	ldr	r2, [r7, #4]
 80098b2:	6892      	ldr	r2, [r2, #8]
 80098b4:	0211      	lsls	r1, r2, #8
 80098b6:	687a      	ldr	r2, [r7, #4]
 80098b8:	68d2      	ldr	r2, [r2, #12]
 80098ba:	06d2      	lsls	r2, r2, #27
 80098bc:	4311      	orrs	r1, r2
 80098be:	687a      	ldr	r2, [r7, #4]
 80098c0:	6852      	ldr	r2, [r2, #4]
 80098c2:	3a01      	subs	r2, #1
 80098c4:	0112      	lsls	r2, r2, #4
 80098c6:	430a      	orrs	r2, r1
 80098c8:	492d      	ldr	r1, [pc, #180]	; (8009980 <RCCEx_PLLSAI2_Config+0x1d8>)
 80098ca:	4313      	orrs	r3, r2
 80098cc:	614b      	str	r3, [r1, #20]
 80098ce:	e02d      	b.n	800992c <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80098d0:	683b      	ldr	r3, [r7, #0]
 80098d2:	2b01      	cmp	r3, #1
 80098d4:	d115      	bne.n	8009902 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80098d6:	4b2a      	ldr	r3, [pc, #168]	; (8009980 <RCCEx_PLLSAI2_Config+0x1d8>)
 80098d8:	695a      	ldr	r2, [r3, #20]
 80098da:	4b2b      	ldr	r3, [pc, #172]	; (8009988 <RCCEx_PLLSAI2_Config+0x1e0>)
 80098dc:	4013      	ands	r3, r2
 80098de:	687a      	ldr	r2, [r7, #4]
 80098e0:	6892      	ldr	r2, [r2, #8]
 80098e2:	0211      	lsls	r1, r2, #8
 80098e4:	687a      	ldr	r2, [r7, #4]
 80098e6:	6912      	ldr	r2, [r2, #16]
 80098e8:	0852      	lsrs	r2, r2, #1
 80098ea:	3a01      	subs	r2, #1
 80098ec:	0552      	lsls	r2, r2, #21
 80098ee:	4311      	orrs	r1, r2
 80098f0:	687a      	ldr	r2, [r7, #4]
 80098f2:	6852      	ldr	r2, [r2, #4]
 80098f4:	3a01      	subs	r2, #1
 80098f6:	0112      	lsls	r2, r2, #4
 80098f8:	430a      	orrs	r2, r1
 80098fa:	4921      	ldr	r1, [pc, #132]	; (8009980 <RCCEx_PLLSAI2_Config+0x1d8>)
 80098fc:	4313      	orrs	r3, r2
 80098fe:	614b      	str	r3, [r1, #20]
 8009900:	e014      	b.n	800992c <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8009902:	4b1f      	ldr	r3, [pc, #124]	; (8009980 <RCCEx_PLLSAI2_Config+0x1d8>)
 8009904:	695a      	ldr	r2, [r3, #20]
 8009906:	4b21      	ldr	r3, [pc, #132]	; (800998c <RCCEx_PLLSAI2_Config+0x1e4>)
 8009908:	4013      	ands	r3, r2
 800990a:	687a      	ldr	r2, [r7, #4]
 800990c:	6892      	ldr	r2, [r2, #8]
 800990e:	0211      	lsls	r1, r2, #8
 8009910:	687a      	ldr	r2, [r7, #4]
 8009912:	6952      	ldr	r2, [r2, #20]
 8009914:	0852      	lsrs	r2, r2, #1
 8009916:	3a01      	subs	r2, #1
 8009918:	0652      	lsls	r2, r2, #25
 800991a:	4311      	orrs	r1, r2
 800991c:	687a      	ldr	r2, [r7, #4]
 800991e:	6852      	ldr	r2, [r2, #4]
 8009920:	3a01      	subs	r2, #1
 8009922:	0112      	lsls	r2, r2, #4
 8009924:	430a      	orrs	r2, r1
 8009926:	4916      	ldr	r1, [pc, #88]	; (8009980 <RCCEx_PLLSAI2_Config+0x1d8>)
 8009928:	4313      	orrs	r3, r2
 800992a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800992c:	4b14      	ldr	r3, [pc, #80]	; (8009980 <RCCEx_PLLSAI2_Config+0x1d8>)
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	4a13      	ldr	r2, [pc, #76]	; (8009980 <RCCEx_PLLSAI2_Config+0x1d8>)
 8009932:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009936:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009938:	f7fd f886 	bl	8006a48 <HAL_GetTick>
 800993c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800993e:	e009      	b.n	8009954 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8009940:	f7fd f882 	bl	8006a48 <HAL_GetTick>
 8009944:	4602      	mov	r2, r0
 8009946:	68bb      	ldr	r3, [r7, #8]
 8009948:	1ad3      	subs	r3, r2, r3
 800994a:	2b02      	cmp	r3, #2
 800994c:	d902      	bls.n	8009954 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800994e:	2303      	movs	r3, #3
 8009950:	73fb      	strb	r3, [r7, #15]
          break;
 8009952:	e005      	b.n	8009960 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8009954:	4b0a      	ldr	r3, [pc, #40]	; (8009980 <RCCEx_PLLSAI2_Config+0x1d8>)
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800995c:	2b00      	cmp	r3, #0
 800995e:	d0ef      	beq.n	8009940 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8009960:	7bfb      	ldrb	r3, [r7, #15]
 8009962:	2b00      	cmp	r3, #0
 8009964:	d106      	bne.n	8009974 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8009966:	4b06      	ldr	r3, [pc, #24]	; (8009980 <RCCEx_PLLSAI2_Config+0x1d8>)
 8009968:	695a      	ldr	r2, [r3, #20]
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	699b      	ldr	r3, [r3, #24]
 800996e:	4904      	ldr	r1, [pc, #16]	; (8009980 <RCCEx_PLLSAI2_Config+0x1d8>)
 8009970:	4313      	orrs	r3, r2
 8009972:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8009974:	7bfb      	ldrb	r3, [r7, #15]
}
 8009976:	4618      	mov	r0, r3
 8009978:	3710      	adds	r7, #16
 800997a:	46bd      	mov	sp, r7
 800997c:	bd80      	pop	{r7, pc}
 800997e:	bf00      	nop
 8009980:	40021000 	.word	0x40021000
 8009984:	07ff800f 	.word	0x07ff800f
 8009988:	ff9f800f 	.word	0xff9f800f
 800998c:	f9ff800f 	.word	0xf9ff800f

08009990 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009990:	b580      	push	{r7, lr}
 8009992:	b082      	sub	sp, #8
 8009994:	af00      	add	r7, sp, #0
 8009996:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	2b00      	cmp	r3, #0
 800999c:	d101      	bne.n	80099a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800999e:	2301      	movs	r3, #1
 80099a0:	e049      	b.n	8009a36 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80099a8:	b2db      	uxtb	r3, r3
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d106      	bne.n	80099bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	2200      	movs	r2, #0
 80099b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80099b6:	6878      	ldr	r0, [r7, #4]
 80099b8:	f000 f841 	bl	8009a3e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	2202      	movs	r2, #2
 80099c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681a      	ldr	r2, [r3, #0]
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	3304      	adds	r3, #4
 80099cc:	4619      	mov	r1, r3
 80099ce:	4610      	mov	r0, r2
 80099d0:	f000 f9f8 	bl	8009dc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	2201      	movs	r2, #1
 80099d8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	2201      	movs	r2, #1
 80099e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	2201      	movs	r2, #1
 80099e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	2201      	movs	r2, #1
 80099f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	2201      	movs	r2, #1
 80099f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	2201      	movs	r2, #1
 8009a00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	2201      	movs	r2, #1
 8009a08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	2201      	movs	r2, #1
 8009a10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	2201      	movs	r2, #1
 8009a18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	2201      	movs	r2, #1
 8009a20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	2201      	movs	r2, #1
 8009a28:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	2201      	movs	r2, #1
 8009a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009a34:	2300      	movs	r3, #0
}
 8009a36:	4618      	mov	r0, r3
 8009a38:	3708      	adds	r7, #8
 8009a3a:	46bd      	mov	sp, r7
 8009a3c:	bd80      	pop	{r7, pc}

08009a3e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8009a3e:	b480      	push	{r7}
 8009a40:	b083      	sub	sp, #12
 8009a42:	af00      	add	r7, sp, #0
 8009a44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8009a46:	bf00      	nop
 8009a48:	370c      	adds	r7, #12
 8009a4a:	46bd      	mov	sp, r7
 8009a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a50:	4770      	bx	lr
	...

08009a54 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009a54:	b480      	push	{r7}
 8009a56:	b085      	sub	sp, #20
 8009a58:	af00      	add	r7, sp, #0
 8009a5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009a62:	b2db      	uxtb	r3, r3
 8009a64:	2b01      	cmp	r3, #1
 8009a66:	d001      	beq.n	8009a6c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009a68:	2301      	movs	r3, #1
 8009a6a:	e04f      	b.n	8009b0c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	2202      	movs	r2, #2
 8009a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	68da      	ldr	r2, [r3, #12]
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	f042 0201 	orr.w	r2, r2, #1
 8009a82:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	4a23      	ldr	r2, [pc, #140]	; (8009b18 <HAL_TIM_Base_Start_IT+0xc4>)
 8009a8a:	4293      	cmp	r3, r2
 8009a8c:	d01d      	beq.n	8009aca <HAL_TIM_Base_Start_IT+0x76>
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a96:	d018      	beq.n	8009aca <HAL_TIM_Base_Start_IT+0x76>
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	4a1f      	ldr	r2, [pc, #124]	; (8009b1c <HAL_TIM_Base_Start_IT+0xc8>)
 8009a9e:	4293      	cmp	r3, r2
 8009aa0:	d013      	beq.n	8009aca <HAL_TIM_Base_Start_IT+0x76>
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	4a1e      	ldr	r2, [pc, #120]	; (8009b20 <HAL_TIM_Base_Start_IT+0xcc>)
 8009aa8:	4293      	cmp	r3, r2
 8009aaa:	d00e      	beq.n	8009aca <HAL_TIM_Base_Start_IT+0x76>
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	4a1c      	ldr	r2, [pc, #112]	; (8009b24 <HAL_TIM_Base_Start_IT+0xd0>)
 8009ab2:	4293      	cmp	r3, r2
 8009ab4:	d009      	beq.n	8009aca <HAL_TIM_Base_Start_IT+0x76>
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	4a1b      	ldr	r2, [pc, #108]	; (8009b28 <HAL_TIM_Base_Start_IT+0xd4>)
 8009abc:	4293      	cmp	r3, r2
 8009abe:	d004      	beq.n	8009aca <HAL_TIM_Base_Start_IT+0x76>
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	4a19      	ldr	r2, [pc, #100]	; (8009b2c <HAL_TIM_Base_Start_IT+0xd8>)
 8009ac6:	4293      	cmp	r3, r2
 8009ac8:	d115      	bne.n	8009af6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	689a      	ldr	r2, [r3, #8]
 8009ad0:	4b17      	ldr	r3, [pc, #92]	; (8009b30 <HAL_TIM_Base_Start_IT+0xdc>)
 8009ad2:	4013      	ands	r3, r2
 8009ad4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	2b06      	cmp	r3, #6
 8009ada:	d015      	beq.n	8009b08 <HAL_TIM_Base_Start_IT+0xb4>
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009ae2:	d011      	beq.n	8009b08 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	681a      	ldr	r2, [r3, #0]
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	f042 0201 	orr.w	r2, r2, #1
 8009af2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009af4:	e008      	b.n	8009b08 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	681a      	ldr	r2, [r3, #0]
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	f042 0201 	orr.w	r2, r2, #1
 8009b04:	601a      	str	r2, [r3, #0]
 8009b06:	e000      	b.n	8009b0a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009b08:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009b0a:	2300      	movs	r3, #0
}
 8009b0c:	4618      	mov	r0, r3
 8009b0e:	3714      	adds	r7, #20
 8009b10:	46bd      	mov	sp, r7
 8009b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b16:	4770      	bx	lr
 8009b18:	40012c00 	.word	0x40012c00
 8009b1c:	40000400 	.word	0x40000400
 8009b20:	40000800 	.word	0x40000800
 8009b24:	40000c00 	.word	0x40000c00
 8009b28:	40013400 	.word	0x40013400
 8009b2c:	40014000 	.word	0x40014000
 8009b30:	00010007 	.word	0x00010007

08009b34 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009b34:	b580      	push	{r7, lr}
 8009b36:	b082      	sub	sp, #8
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	691b      	ldr	r3, [r3, #16]
 8009b42:	f003 0302 	and.w	r3, r3, #2
 8009b46:	2b02      	cmp	r3, #2
 8009b48:	d122      	bne.n	8009b90 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	68db      	ldr	r3, [r3, #12]
 8009b50:	f003 0302 	and.w	r3, r3, #2
 8009b54:	2b02      	cmp	r3, #2
 8009b56:	d11b      	bne.n	8009b90 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	f06f 0202 	mvn.w	r2, #2
 8009b60:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	2201      	movs	r2, #1
 8009b66:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	699b      	ldr	r3, [r3, #24]
 8009b6e:	f003 0303 	and.w	r3, r3, #3
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d003      	beq.n	8009b7e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009b76:	6878      	ldr	r0, [r7, #4]
 8009b78:	f000 f905 	bl	8009d86 <HAL_TIM_IC_CaptureCallback>
 8009b7c:	e005      	b.n	8009b8a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009b7e:	6878      	ldr	r0, [r7, #4]
 8009b80:	f000 f8f7 	bl	8009d72 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009b84:	6878      	ldr	r0, [r7, #4]
 8009b86:	f000 f908 	bl	8009d9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	2200      	movs	r2, #0
 8009b8e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	691b      	ldr	r3, [r3, #16]
 8009b96:	f003 0304 	and.w	r3, r3, #4
 8009b9a:	2b04      	cmp	r3, #4
 8009b9c:	d122      	bne.n	8009be4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	68db      	ldr	r3, [r3, #12]
 8009ba4:	f003 0304 	and.w	r3, r3, #4
 8009ba8:	2b04      	cmp	r3, #4
 8009baa:	d11b      	bne.n	8009be4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	f06f 0204 	mvn.w	r2, #4
 8009bb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	2202      	movs	r2, #2
 8009bba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	699b      	ldr	r3, [r3, #24]
 8009bc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d003      	beq.n	8009bd2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009bca:	6878      	ldr	r0, [r7, #4]
 8009bcc:	f000 f8db 	bl	8009d86 <HAL_TIM_IC_CaptureCallback>
 8009bd0:	e005      	b.n	8009bde <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009bd2:	6878      	ldr	r0, [r7, #4]
 8009bd4:	f000 f8cd 	bl	8009d72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009bd8:	6878      	ldr	r0, [r7, #4]
 8009bda:	f000 f8de 	bl	8009d9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	2200      	movs	r2, #0
 8009be2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	691b      	ldr	r3, [r3, #16]
 8009bea:	f003 0308 	and.w	r3, r3, #8
 8009bee:	2b08      	cmp	r3, #8
 8009bf0:	d122      	bne.n	8009c38 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	68db      	ldr	r3, [r3, #12]
 8009bf8:	f003 0308 	and.w	r3, r3, #8
 8009bfc:	2b08      	cmp	r3, #8
 8009bfe:	d11b      	bne.n	8009c38 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	f06f 0208 	mvn.w	r2, #8
 8009c08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	2204      	movs	r2, #4
 8009c0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	69db      	ldr	r3, [r3, #28]
 8009c16:	f003 0303 	and.w	r3, r3, #3
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d003      	beq.n	8009c26 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009c1e:	6878      	ldr	r0, [r7, #4]
 8009c20:	f000 f8b1 	bl	8009d86 <HAL_TIM_IC_CaptureCallback>
 8009c24:	e005      	b.n	8009c32 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009c26:	6878      	ldr	r0, [r7, #4]
 8009c28:	f000 f8a3 	bl	8009d72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c2c:	6878      	ldr	r0, [r7, #4]
 8009c2e:	f000 f8b4 	bl	8009d9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	2200      	movs	r2, #0
 8009c36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	691b      	ldr	r3, [r3, #16]
 8009c3e:	f003 0310 	and.w	r3, r3, #16
 8009c42:	2b10      	cmp	r3, #16
 8009c44:	d122      	bne.n	8009c8c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	68db      	ldr	r3, [r3, #12]
 8009c4c:	f003 0310 	and.w	r3, r3, #16
 8009c50:	2b10      	cmp	r3, #16
 8009c52:	d11b      	bne.n	8009c8c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	f06f 0210 	mvn.w	r2, #16
 8009c5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	2208      	movs	r2, #8
 8009c62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	69db      	ldr	r3, [r3, #28]
 8009c6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d003      	beq.n	8009c7a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009c72:	6878      	ldr	r0, [r7, #4]
 8009c74:	f000 f887 	bl	8009d86 <HAL_TIM_IC_CaptureCallback>
 8009c78:	e005      	b.n	8009c86 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009c7a:	6878      	ldr	r0, [r7, #4]
 8009c7c:	f000 f879 	bl	8009d72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c80:	6878      	ldr	r0, [r7, #4]
 8009c82:	f000 f88a 	bl	8009d9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	2200      	movs	r2, #0
 8009c8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	691b      	ldr	r3, [r3, #16]
 8009c92:	f003 0301 	and.w	r3, r3, #1
 8009c96:	2b01      	cmp	r3, #1
 8009c98:	d10e      	bne.n	8009cb8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	68db      	ldr	r3, [r3, #12]
 8009ca0:	f003 0301 	and.w	r3, r3, #1
 8009ca4:	2b01      	cmp	r3, #1
 8009ca6:	d107      	bne.n	8009cb8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	f06f 0201 	mvn.w	r2, #1
 8009cb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009cb2:	6878      	ldr	r0, [r7, #4]
 8009cb4:	f7fb fb8e 	bl	80053d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	691b      	ldr	r3, [r3, #16]
 8009cbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009cc2:	2b80      	cmp	r3, #128	; 0x80
 8009cc4:	d10e      	bne.n	8009ce4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	68db      	ldr	r3, [r3, #12]
 8009ccc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009cd0:	2b80      	cmp	r3, #128	; 0x80
 8009cd2:	d107      	bne.n	8009ce4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009cdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009cde:	6878      	ldr	r0, [r7, #4]
 8009ce0:	f000 f914 	bl	8009f0c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	691b      	ldr	r3, [r3, #16]
 8009cea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009cee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009cf2:	d10e      	bne.n	8009d12 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	68db      	ldr	r3, [r3, #12]
 8009cfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009cfe:	2b80      	cmp	r3, #128	; 0x80
 8009d00:	d107      	bne.n	8009d12 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009d0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009d0c:	6878      	ldr	r0, [r7, #4]
 8009d0e:	f000 f907 	bl	8009f20 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	691b      	ldr	r3, [r3, #16]
 8009d18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d1c:	2b40      	cmp	r3, #64	; 0x40
 8009d1e:	d10e      	bne.n	8009d3e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	68db      	ldr	r3, [r3, #12]
 8009d26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d2a:	2b40      	cmp	r3, #64	; 0x40
 8009d2c:	d107      	bne.n	8009d3e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009d36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009d38:	6878      	ldr	r0, [r7, #4]
 8009d3a:	f000 f838 	bl	8009dae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	691b      	ldr	r3, [r3, #16]
 8009d44:	f003 0320 	and.w	r3, r3, #32
 8009d48:	2b20      	cmp	r3, #32
 8009d4a:	d10e      	bne.n	8009d6a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	68db      	ldr	r3, [r3, #12]
 8009d52:	f003 0320 	and.w	r3, r3, #32
 8009d56:	2b20      	cmp	r3, #32
 8009d58:	d107      	bne.n	8009d6a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	f06f 0220 	mvn.w	r2, #32
 8009d62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009d64:	6878      	ldr	r0, [r7, #4]
 8009d66:	f000 f8c7 	bl	8009ef8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009d6a:	bf00      	nop
 8009d6c:	3708      	adds	r7, #8
 8009d6e:	46bd      	mov	sp, r7
 8009d70:	bd80      	pop	{r7, pc}

08009d72 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009d72:	b480      	push	{r7}
 8009d74:	b083      	sub	sp, #12
 8009d76:	af00      	add	r7, sp, #0
 8009d78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009d7a:	bf00      	nop
 8009d7c:	370c      	adds	r7, #12
 8009d7e:	46bd      	mov	sp, r7
 8009d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d84:	4770      	bx	lr

08009d86 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009d86:	b480      	push	{r7}
 8009d88:	b083      	sub	sp, #12
 8009d8a:	af00      	add	r7, sp, #0
 8009d8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009d8e:	bf00      	nop
 8009d90:	370c      	adds	r7, #12
 8009d92:	46bd      	mov	sp, r7
 8009d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d98:	4770      	bx	lr

08009d9a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009d9a:	b480      	push	{r7}
 8009d9c:	b083      	sub	sp, #12
 8009d9e:	af00      	add	r7, sp, #0
 8009da0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009da2:	bf00      	nop
 8009da4:	370c      	adds	r7, #12
 8009da6:	46bd      	mov	sp, r7
 8009da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dac:	4770      	bx	lr

08009dae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009dae:	b480      	push	{r7}
 8009db0:	b083      	sub	sp, #12
 8009db2:	af00      	add	r7, sp, #0
 8009db4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009db6:	bf00      	nop
 8009db8:	370c      	adds	r7, #12
 8009dba:	46bd      	mov	sp, r7
 8009dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc0:	4770      	bx	lr
	...

08009dc4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009dc4:	b480      	push	{r7}
 8009dc6:	b085      	sub	sp, #20
 8009dc8:	af00      	add	r7, sp, #0
 8009dca:	6078      	str	r0, [r7, #4]
 8009dcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	4a40      	ldr	r2, [pc, #256]	; (8009ed8 <TIM_Base_SetConfig+0x114>)
 8009dd8:	4293      	cmp	r3, r2
 8009dda:	d013      	beq.n	8009e04 <TIM_Base_SetConfig+0x40>
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009de2:	d00f      	beq.n	8009e04 <TIM_Base_SetConfig+0x40>
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	4a3d      	ldr	r2, [pc, #244]	; (8009edc <TIM_Base_SetConfig+0x118>)
 8009de8:	4293      	cmp	r3, r2
 8009dea:	d00b      	beq.n	8009e04 <TIM_Base_SetConfig+0x40>
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	4a3c      	ldr	r2, [pc, #240]	; (8009ee0 <TIM_Base_SetConfig+0x11c>)
 8009df0:	4293      	cmp	r3, r2
 8009df2:	d007      	beq.n	8009e04 <TIM_Base_SetConfig+0x40>
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	4a3b      	ldr	r2, [pc, #236]	; (8009ee4 <TIM_Base_SetConfig+0x120>)
 8009df8:	4293      	cmp	r3, r2
 8009dfa:	d003      	beq.n	8009e04 <TIM_Base_SetConfig+0x40>
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	4a3a      	ldr	r2, [pc, #232]	; (8009ee8 <TIM_Base_SetConfig+0x124>)
 8009e00:	4293      	cmp	r3, r2
 8009e02:	d108      	bne.n	8009e16 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009e0c:	683b      	ldr	r3, [r7, #0]
 8009e0e:	685b      	ldr	r3, [r3, #4]
 8009e10:	68fa      	ldr	r2, [r7, #12]
 8009e12:	4313      	orrs	r3, r2
 8009e14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	4a2f      	ldr	r2, [pc, #188]	; (8009ed8 <TIM_Base_SetConfig+0x114>)
 8009e1a:	4293      	cmp	r3, r2
 8009e1c:	d01f      	beq.n	8009e5e <TIM_Base_SetConfig+0x9a>
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e24:	d01b      	beq.n	8009e5e <TIM_Base_SetConfig+0x9a>
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	4a2c      	ldr	r2, [pc, #176]	; (8009edc <TIM_Base_SetConfig+0x118>)
 8009e2a:	4293      	cmp	r3, r2
 8009e2c:	d017      	beq.n	8009e5e <TIM_Base_SetConfig+0x9a>
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	4a2b      	ldr	r2, [pc, #172]	; (8009ee0 <TIM_Base_SetConfig+0x11c>)
 8009e32:	4293      	cmp	r3, r2
 8009e34:	d013      	beq.n	8009e5e <TIM_Base_SetConfig+0x9a>
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	4a2a      	ldr	r2, [pc, #168]	; (8009ee4 <TIM_Base_SetConfig+0x120>)
 8009e3a:	4293      	cmp	r3, r2
 8009e3c:	d00f      	beq.n	8009e5e <TIM_Base_SetConfig+0x9a>
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	4a29      	ldr	r2, [pc, #164]	; (8009ee8 <TIM_Base_SetConfig+0x124>)
 8009e42:	4293      	cmp	r3, r2
 8009e44:	d00b      	beq.n	8009e5e <TIM_Base_SetConfig+0x9a>
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	4a28      	ldr	r2, [pc, #160]	; (8009eec <TIM_Base_SetConfig+0x128>)
 8009e4a:	4293      	cmp	r3, r2
 8009e4c:	d007      	beq.n	8009e5e <TIM_Base_SetConfig+0x9a>
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	4a27      	ldr	r2, [pc, #156]	; (8009ef0 <TIM_Base_SetConfig+0x12c>)
 8009e52:	4293      	cmp	r3, r2
 8009e54:	d003      	beq.n	8009e5e <TIM_Base_SetConfig+0x9a>
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	4a26      	ldr	r2, [pc, #152]	; (8009ef4 <TIM_Base_SetConfig+0x130>)
 8009e5a:	4293      	cmp	r3, r2
 8009e5c:	d108      	bne.n	8009e70 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009e64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009e66:	683b      	ldr	r3, [r7, #0]
 8009e68:	68db      	ldr	r3, [r3, #12]
 8009e6a:	68fa      	ldr	r2, [r7, #12]
 8009e6c:	4313      	orrs	r3, r2
 8009e6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009e76:	683b      	ldr	r3, [r7, #0]
 8009e78:	695b      	ldr	r3, [r3, #20]
 8009e7a:	4313      	orrs	r3, r2
 8009e7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	68fa      	ldr	r2, [r7, #12]
 8009e82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009e84:	683b      	ldr	r3, [r7, #0]
 8009e86:	689a      	ldr	r2, [r3, #8]
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009e8c:	683b      	ldr	r3, [r7, #0]
 8009e8e:	681a      	ldr	r2, [r3, #0]
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	4a10      	ldr	r2, [pc, #64]	; (8009ed8 <TIM_Base_SetConfig+0x114>)
 8009e98:	4293      	cmp	r3, r2
 8009e9a:	d00f      	beq.n	8009ebc <TIM_Base_SetConfig+0xf8>
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	4a12      	ldr	r2, [pc, #72]	; (8009ee8 <TIM_Base_SetConfig+0x124>)
 8009ea0:	4293      	cmp	r3, r2
 8009ea2:	d00b      	beq.n	8009ebc <TIM_Base_SetConfig+0xf8>
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	4a11      	ldr	r2, [pc, #68]	; (8009eec <TIM_Base_SetConfig+0x128>)
 8009ea8:	4293      	cmp	r3, r2
 8009eaa:	d007      	beq.n	8009ebc <TIM_Base_SetConfig+0xf8>
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	4a10      	ldr	r2, [pc, #64]	; (8009ef0 <TIM_Base_SetConfig+0x12c>)
 8009eb0:	4293      	cmp	r3, r2
 8009eb2:	d003      	beq.n	8009ebc <TIM_Base_SetConfig+0xf8>
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	4a0f      	ldr	r2, [pc, #60]	; (8009ef4 <TIM_Base_SetConfig+0x130>)
 8009eb8:	4293      	cmp	r3, r2
 8009eba:	d103      	bne.n	8009ec4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009ebc:	683b      	ldr	r3, [r7, #0]
 8009ebe:	691a      	ldr	r2, [r3, #16]
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	2201      	movs	r2, #1
 8009ec8:	615a      	str	r2, [r3, #20]
}
 8009eca:	bf00      	nop
 8009ecc:	3714      	adds	r7, #20
 8009ece:	46bd      	mov	sp, r7
 8009ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed4:	4770      	bx	lr
 8009ed6:	bf00      	nop
 8009ed8:	40012c00 	.word	0x40012c00
 8009edc:	40000400 	.word	0x40000400
 8009ee0:	40000800 	.word	0x40000800
 8009ee4:	40000c00 	.word	0x40000c00
 8009ee8:	40013400 	.word	0x40013400
 8009eec:	40014000 	.word	0x40014000
 8009ef0:	40014400 	.word	0x40014400
 8009ef4:	40014800 	.word	0x40014800

08009ef8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009ef8:	b480      	push	{r7}
 8009efa:	b083      	sub	sp, #12
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009f00:	bf00      	nop
 8009f02:	370c      	adds	r7, #12
 8009f04:	46bd      	mov	sp, r7
 8009f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f0a:	4770      	bx	lr

08009f0c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009f0c:	b480      	push	{r7}
 8009f0e:	b083      	sub	sp, #12
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009f14:	bf00      	nop
 8009f16:	370c      	adds	r7, #12
 8009f18:	46bd      	mov	sp, r7
 8009f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f1e:	4770      	bx	lr

08009f20 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009f20:	b480      	push	{r7}
 8009f22:	b083      	sub	sp, #12
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009f28:	bf00      	nop
 8009f2a:	370c      	adds	r7, #12
 8009f2c:	46bd      	mov	sp, r7
 8009f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f32:	4770      	bx	lr

08009f34 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009f34:	b580      	push	{r7, lr}
 8009f36:	b082      	sub	sp, #8
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d101      	bne.n	8009f46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009f42:	2301      	movs	r3, #1
 8009f44:	e042      	b.n	8009fcc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d106      	bne.n	8009f5e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	2200      	movs	r2, #0
 8009f54:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009f58:	6878      	ldr	r0, [r7, #4]
 8009f5a:	f7fb ffe5 	bl	8005f28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	2224      	movs	r2, #36	; 0x24
 8009f62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	681a      	ldr	r2, [r3, #0]
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	f022 0201 	bic.w	r2, r2, #1
 8009f74:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009f76:	6878      	ldr	r0, [r7, #4]
 8009f78:	f000 fc52 	bl	800a820 <UART_SetConfig>
 8009f7c:	4603      	mov	r3, r0
 8009f7e:	2b01      	cmp	r3, #1
 8009f80:	d101      	bne.n	8009f86 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8009f82:	2301      	movs	r3, #1
 8009f84:	e022      	b.n	8009fcc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d002      	beq.n	8009f94 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8009f8e:	6878      	ldr	r0, [r7, #4]
 8009f90:	f000 ff42 	bl	800ae18 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	685a      	ldr	r2, [r3, #4]
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009fa2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	689a      	ldr	r2, [r3, #8]
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009fb2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	681a      	ldr	r2, [r3, #0]
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	f042 0201 	orr.w	r2, r2, #1
 8009fc2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009fc4:	6878      	ldr	r0, [r7, #4]
 8009fc6:	f000 ffc9 	bl	800af5c <UART_CheckIdleState>
 8009fca:	4603      	mov	r3, r0
}
 8009fcc:	4618      	mov	r0, r3
 8009fce:	3708      	adds	r7, #8
 8009fd0:	46bd      	mov	sp, r7
 8009fd2:	bd80      	pop	{r7, pc}

08009fd4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009fd4:	b580      	push	{r7, lr}
 8009fd6:	b08a      	sub	sp, #40	; 0x28
 8009fd8:	af02      	add	r7, sp, #8
 8009fda:	60f8      	str	r0, [r7, #12]
 8009fdc:	60b9      	str	r1, [r7, #8]
 8009fde:	603b      	str	r3, [r7, #0]
 8009fe0:	4613      	mov	r3, r2
 8009fe2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009fea:	2b20      	cmp	r3, #32
 8009fec:	f040 8084 	bne.w	800a0f8 <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8009ff0:	68bb      	ldr	r3, [r7, #8]
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d002      	beq.n	8009ffc <HAL_UART_Transmit+0x28>
 8009ff6:	88fb      	ldrh	r3, [r7, #6]
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d101      	bne.n	800a000 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8009ffc:	2301      	movs	r3, #1
 8009ffe:	e07c      	b.n	800a0fa <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a006:	2b01      	cmp	r3, #1
 800a008:	d101      	bne.n	800a00e <HAL_UART_Transmit+0x3a>
 800a00a:	2302      	movs	r3, #2
 800a00c:	e075      	b.n	800a0fa <HAL_UART_Transmit+0x126>
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	2201      	movs	r2, #1
 800a012:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	2200      	movs	r2, #0
 800a01a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	2221      	movs	r2, #33	; 0x21
 800a022:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a026:	f7fc fd0f 	bl	8006a48 <HAL_GetTick>
 800a02a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	88fa      	ldrh	r2, [r7, #6]
 800a030:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	88fa      	ldrh	r2, [r7, #6]
 800a038:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	689b      	ldr	r3, [r3, #8]
 800a040:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a044:	d108      	bne.n	800a058 <HAL_UART_Transmit+0x84>
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	691b      	ldr	r3, [r3, #16]
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d104      	bne.n	800a058 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800a04e:	2300      	movs	r3, #0
 800a050:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a052:	68bb      	ldr	r3, [r7, #8]
 800a054:	61bb      	str	r3, [r7, #24]
 800a056:	e003      	b.n	800a060 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800a058:	68bb      	ldr	r3, [r7, #8]
 800a05a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a05c:	2300      	movs	r3, #0
 800a05e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	2200      	movs	r2, #0
 800a064:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800a068:	e02d      	b.n	800a0c6 <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a06a:	683b      	ldr	r3, [r7, #0]
 800a06c:	9300      	str	r3, [sp, #0]
 800a06e:	697b      	ldr	r3, [r7, #20]
 800a070:	2200      	movs	r2, #0
 800a072:	2180      	movs	r1, #128	; 0x80
 800a074:	68f8      	ldr	r0, [r7, #12]
 800a076:	f000 ffbc 	bl	800aff2 <UART_WaitOnFlagUntilTimeout>
 800a07a:	4603      	mov	r3, r0
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d001      	beq.n	800a084 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800a080:	2303      	movs	r3, #3
 800a082:	e03a      	b.n	800a0fa <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 800a084:	69fb      	ldr	r3, [r7, #28]
 800a086:	2b00      	cmp	r3, #0
 800a088:	d10b      	bne.n	800a0a2 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a08a:	69bb      	ldr	r3, [r7, #24]
 800a08c:	881a      	ldrh	r2, [r3, #0]
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a096:	b292      	uxth	r2, r2
 800a098:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800a09a:	69bb      	ldr	r3, [r7, #24]
 800a09c:	3302      	adds	r3, #2
 800a09e:	61bb      	str	r3, [r7, #24]
 800a0a0:	e008      	b.n	800a0b4 <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a0a2:	69fb      	ldr	r3, [r7, #28]
 800a0a4:	781a      	ldrb	r2, [r3, #0]
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	b292      	uxth	r2, r2
 800a0ac:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800a0ae:	69fb      	ldr	r3, [r7, #28]
 800a0b0:	3301      	adds	r3, #1
 800a0b2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a0ba:	b29b      	uxth	r3, r3
 800a0bc:	3b01      	subs	r3, #1
 800a0be:	b29a      	uxth	r2, r3
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a0cc:	b29b      	uxth	r3, r3
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d1cb      	bne.n	800a06a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a0d2:	683b      	ldr	r3, [r7, #0]
 800a0d4:	9300      	str	r3, [sp, #0]
 800a0d6:	697b      	ldr	r3, [r7, #20]
 800a0d8:	2200      	movs	r2, #0
 800a0da:	2140      	movs	r1, #64	; 0x40
 800a0dc:	68f8      	ldr	r0, [r7, #12]
 800a0de:	f000 ff88 	bl	800aff2 <UART_WaitOnFlagUntilTimeout>
 800a0e2:	4603      	mov	r3, r0
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d001      	beq.n	800a0ec <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 800a0e8:	2303      	movs	r3, #3
 800a0ea:	e006      	b.n	800a0fa <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	2220      	movs	r2, #32
 800a0f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800a0f4:	2300      	movs	r3, #0
 800a0f6:	e000      	b.n	800a0fa <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 800a0f8:	2302      	movs	r3, #2
  }
}
 800a0fa:	4618      	mov	r0, r3
 800a0fc:	3720      	adds	r7, #32
 800a0fe:	46bd      	mov	sp, r7
 800a100:	bd80      	pop	{r7, pc}
	...

0800a104 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a104:	b580      	push	{r7, lr}
 800a106:	b08a      	sub	sp, #40	; 0x28
 800a108:	af00      	add	r7, sp, #0
 800a10a:	60f8      	str	r0, [r7, #12]
 800a10c:	60b9      	str	r1, [r7, #8]
 800a10e:	4613      	mov	r3, r2
 800a110:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a118:	2b20      	cmp	r3, #32
 800a11a:	d142      	bne.n	800a1a2 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800a11c:	68bb      	ldr	r3, [r7, #8]
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d002      	beq.n	800a128 <HAL_UART_Receive_IT+0x24>
 800a122:	88fb      	ldrh	r3, [r7, #6]
 800a124:	2b00      	cmp	r3, #0
 800a126:	d101      	bne.n	800a12c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800a128:	2301      	movs	r3, #1
 800a12a:	e03b      	b.n	800a1a4 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a132:	2b01      	cmp	r3, #1
 800a134:	d101      	bne.n	800a13a <HAL_UART_Receive_IT+0x36>
 800a136:	2302      	movs	r3, #2
 800a138:	e034      	b.n	800a1a4 <HAL_UART_Receive_IT+0xa0>
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	2201      	movs	r2, #1
 800a13e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	2200      	movs	r2, #0
 800a146:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	4a17      	ldr	r2, [pc, #92]	; (800a1ac <HAL_UART_Receive_IT+0xa8>)
 800a14e:	4293      	cmp	r3, r2
 800a150:	d01f      	beq.n	800a192 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	685b      	ldr	r3, [r3, #4]
 800a158:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d018      	beq.n	800a192 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a166:	697b      	ldr	r3, [r7, #20]
 800a168:	e853 3f00 	ldrex	r3, [r3]
 800a16c:	613b      	str	r3, [r7, #16]
   return(result);
 800a16e:	693b      	ldr	r3, [r7, #16]
 800a170:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a174:	627b      	str	r3, [r7, #36]	; 0x24
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	461a      	mov	r2, r3
 800a17c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a17e:	623b      	str	r3, [r7, #32]
 800a180:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a182:	69f9      	ldr	r1, [r7, #28]
 800a184:	6a3a      	ldr	r2, [r7, #32]
 800a186:	e841 2300 	strex	r3, r2, [r1]
 800a18a:	61bb      	str	r3, [r7, #24]
   return(result);
 800a18c:	69bb      	ldr	r3, [r7, #24]
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d1e6      	bne.n	800a160 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800a192:	88fb      	ldrh	r3, [r7, #6]
 800a194:	461a      	mov	r2, r3
 800a196:	68b9      	ldr	r1, [r7, #8]
 800a198:	68f8      	ldr	r0, [r7, #12]
 800a19a:	f000 fff3 	bl	800b184 <UART_Start_Receive_IT>
 800a19e:	4603      	mov	r3, r0
 800a1a0:	e000      	b.n	800a1a4 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800a1a2:	2302      	movs	r3, #2
  }
}
 800a1a4:	4618      	mov	r0, r3
 800a1a6:	3728      	adds	r7, #40	; 0x28
 800a1a8:	46bd      	mov	sp, r7
 800a1aa:	bd80      	pop	{r7, pc}
 800a1ac:	40008000 	.word	0x40008000

0800a1b0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a1b0:	b580      	push	{r7, lr}
 800a1b2:	b0ba      	sub	sp, #232	; 0xe8
 800a1b4:	af00      	add	r7, sp, #0
 800a1b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	69db      	ldr	r3, [r3, #28]
 800a1be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	689b      	ldr	r3, [r3, #8]
 800a1d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a1d6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800a1da:	f640 030f 	movw	r3, #2063	; 0x80f
 800a1de:	4013      	ands	r3, r2
 800a1e0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800a1e4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d11b      	bne.n	800a224 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a1ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a1f0:	f003 0320 	and.w	r3, r3, #32
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d015      	beq.n	800a224 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a1f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a1fc:	f003 0320 	and.w	r3, r3, #32
 800a200:	2b00      	cmp	r3, #0
 800a202:	d105      	bne.n	800a210 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a204:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a208:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d009      	beq.n	800a224 <HAL_UART_IRQHandler+0x74>
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a214:	2b00      	cmp	r3, #0
 800a216:	f000 82d6 	beq.w	800a7c6 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a21e:	6878      	ldr	r0, [r7, #4]
 800a220:	4798      	blx	r3
      }
      return;
 800a222:	e2d0      	b.n	800a7c6 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
 800a224:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a228:	2b00      	cmp	r3, #0
 800a22a:	f000 811f 	beq.w	800a46c <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800a22e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800a232:	4b8b      	ldr	r3, [pc, #556]	; (800a460 <HAL_UART_IRQHandler+0x2b0>)
 800a234:	4013      	ands	r3, r2
 800a236:	2b00      	cmp	r3, #0
 800a238:	d106      	bne.n	800a248 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800a23a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800a23e:	4b89      	ldr	r3, [pc, #548]	; (800a464 <HAL_UART_IRQHandler+0x2b4>)
 800a240:	4013      	ands	r3, r2
 800a242:	2b00      	cmp	r3, #0
 800a244:	f000 8112 	beq.w	800a46c <HAL_UART_IRQHandler+0x2bc>
      && (((cr3its & USART_CR3_EIE) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a248:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a24c:	f003 0301 	and.w	r3, r3, #1
 800a250:	2b00      	cmp	r3, #0
 800a252:	d011      	beq.n	800a278 <HAL_UART_IRQHandler+0xc8>
 800a254:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a258:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d00b      	beq.n	800a278 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	2201      	movs	r2, #1
 800a266:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a26e:	f043 0201 	orr.w	r2, r3, #1
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a278:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a27c:	f003 0302 	and.w	r3, r3, #2
 800a280:	2b00      	cmp	r3, #0
 800a282:	d011      	beq.n	800a2a8 <HAL_UART_IRQHandler+0xf8>
 800a284:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a288:	f003 0301 	and.w	r3, r3, #1
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d00b      	beq.n	800a2a8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	2202      	movs	r2, #2
 800a296:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a29e:	f043 0204 	orr.w	r2, r3, #4
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a2a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a2ac:	f003 0304 	and.w	r3, r3, #4
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d011      	beq.n	800a2d8 <HAL_UART_IRQHandler+0x128>
 800a2b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a2b8:	f003 0301 	and.w	r3, r3, #1
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d00b      	beq.n	800a2d8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	2204      	movs	r2, #4
 800a2c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a2ce:	f043 0202 	orr.w	r2, r3, #2
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a2d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a2dc:	f003 0308 	and.w	r3, r3, #8
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d017      	beq.n	800a314 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a2e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a2e8:	f003 0320 	and.w	r3, r3, #32
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d105      	bne.n	800a2fc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800a2f0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800a2f4:	4b5a      	ldr	r3, [pc, #360]	; (800a460 <HAL_UART_IRQHandler+0x2b0>)
 800a2f6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d00b      	beq.n	800a314 <HAL_UART_IRQHandler+0x164>
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	2208      	movs	r2, #8
 800a302:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a30a:	f043 0208 	orr.w	r2, r3, #8
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a314:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a318:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d012      	beq.n	800a346 <HAL_UART_IRQHandler+0x196>
 800a320:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a324:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d00c      	beq.n	800a346 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a334:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a33c:	f043 0220 	orr.w	r2, r3, #32
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	f000 823c 	beq.w	800a7ca <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a352:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a356:	f003 0320 	and.w	r3, r3, #32
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d013      	beq.n	800a386 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a35e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a362:	f003 0320 	and.w	r3, r3, #32
 800a366:	2b00      	cmp	r3, #0
 800a368:	d105      	bne.n	800a376 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a36a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a36e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a372:	2b00      	cmp	r3, #0
 800a374:	d007      	beq.n	800a386 <HAL_UART_IRQHandler+0x1d6>
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d003      	beq.n	800a386 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a382:	6878      	ldr	r0, [r7, #4]
 800a384:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a38c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	689b      	ldr	r3, [r3, #8]
 800a396:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a39a:	2b40      	cmp	r3, #64	; 0x40
 800a39c:	d005      	beq.n	800a3aa <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a39e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a3a2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d04f      	beq.n	800a44a <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a3aa:	6878      	ldr	r0, [r7, #4]
 800a3ac:	f001 f814 	bl	800b3d8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	689b      	ldr	r3, [r3, #8]
 800a3b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a3ba:	2b40      	cmp	r3, #64	; 0x40
 800a3bc:	d141      	bne.n	800a442 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	3308      	adds	r3, #8
 800a3c4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a3cc:	e853 3f00 	ldrex	r3, [r3]
 800a3d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800a3d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a3d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a3dc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	3308      	adds	r3, #8
 800a3e6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a3ea:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a3ee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3f2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a3f6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a3fa:	e841 2300 	strex	r3, r2, [r1]
 800a3fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800a402:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a406:	2b00      	cmp	r3, #0
 800a408:	d1d9      	bne.n	800a3be <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d013      	beq.n	800a43a <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a416:	4a14      	ldr	r2, [pc, #80]	; (800a468 <HAL_UART_IRQHandler+0x2b8>)
 800a418:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a41e:	4618      	mov	r0, r3
 800a420:	f7fc fc80 	bl	8006d24 <HAL_DMA_Abort_IT>
 800a424:	4603      	mov	r3, r0
 800a426:	2b00      	cmp	r3, #0
 800a428:	d017      	beq.n	800a45a <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a42e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a430:	687a      	ldr	r2, [r7, #4]
 800a432:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800a434:	4610      	mov	r0, r2
 800a436:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a438:	e00f      	b.n	800a45a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a43a:	6878      	ldr	r0, [r7, #4]
 800a43c:	f000 f9da 	bl	800a7f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a440:	e00b      	b.n	800a45a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a442:	6878      	ldr	r0, [r7, #4]
 800a444:	f000 f9d6 	bl	800a7f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a448:	e007      	b.n	800a45a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a44a:	6878      	ldr	r0, [r7, #4]
 800a44c:	f000 f9d2 	bl	800a7f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	2200      	movs	r2, #0
 800a454:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800a458:	e1b7      	b.n	800a7ca <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a45a:	bf00      	nop
    return;
 800a45c:	e1b5      	b.n	800a7ca <HAL_UART_IRQHandler+0x61a>
 800a45e:	bf00      	nop
 800a460:	10000001 	.word	0x10000001
 800a464:	04000120 	.word	0x04000120
 800a468:	0800b4a5 	.word	0x0800b4a5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a470:	2b01      	cmp	r3, #1
 800a472:	f040 814a 	bne.w	800a70a <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a476:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a47a:	f003 0310 	and.w	r3, r3, #16
 800a47e:	2b00      	cmp	r3, #0
 800a480:	f000 8143 	beq.w	800a70a <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a484:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a488:	f003 0310 	and.w	r3, r3, #16
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	f000 813c 	beq.w	800a70a <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	2210      	movs	r2, #16
 800a498:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	689b      	ldr	r3, [r3, #8]
 800a4a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a4a4:	2b40      	cmp	r3, #64	; 0x40
 800a4a6:	f040 80b5 	bne.w	800a614 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	685b      	ldr	r3, [r3, #4]
 800a4b2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a4b6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	f000 8187 	beq.w	800a7ce <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a4c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a4ca:	429a      	cmp	r2, r3
 800a4cc:	f080 817f 	bcs.w	800a7ce <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a4d6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	f003 0320 	and.w	r3, r3, #32
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	f040 8086 	bne.w	800a5f8 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a4f8:	e853 3f00 	ldrex	r3, [r3]
 800a4fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a500:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a504:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a508:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	461a      	mov	r2, r3
 800a512:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a516:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a51a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a51e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a522:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a526:	e841 2300 	strex	r3, r2, [r1]
 800a52a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a52e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a532:	2b00      	cmp	r3, #0
 800a534:	d1da      	bne.n	800a4ec <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	3308      	adds	r3, #8
 800a53c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a53e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a540:	e853 3f00 	ldrex	r3, [r3]
 800a544:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a546:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a548:	f023 0301 	bic.w	r3, r3, #1
 800a54c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	3308      	adds	r3, #8
 800a556:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a55a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a55e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a560:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a562:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a566:	e841 2300 	strex	r3, r2, [r1]
 800a56a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a56c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d1e1      	bne.n	800a536 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	3308      	adds	r3, #8
 800a578:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a57a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a57c:	e853 3f00 	ldrex	r3, [r3]
 800a580:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a582:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a584:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a588:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	3308      	adds	r3, #8
 800a592:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a596:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a598:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a59a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a59c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a59e:	e841 2300 	strex	r3, r2, [r1]
 800a5a2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a5a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d1e3      	bne.n	800a572 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	2220      	movs	r2, #32
 800a5ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	2200      	movs	r2, #0
 800a5b6:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a5c0:	e853 3f00 	ldrex	r3, [r3]
 800a5c4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a5c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a5c8:	f023 0310 	bic.w	r3, r3, #16
 800a5cc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	461a      	mov	r2, r3
 800a5d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a5da:	65bb      	str	r3, [r7, #88]	; 0x58
 800a5dc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5de:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a5e0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a5e2:	e841 2300 	strex	r3, r2, [r1]
 800a5e6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a5e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d1e4      	bne.n	800a5b8 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a5f2:	4618      	mov	r0, r3
 800a5f4:	f7fc fb3a 	bl	8006c6c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a604:	b29b      	uxth	r3, r3
 800a606:	1ad3      	subs	r3, r2, r3
 800a608:	b29b      	uxth	r3, r3
 800a60a:	4619      	mov	r1, r3
 800a60c:	6878      	ldr	r0, [r7, #4]
 800a60e:	f000 f8fb 	bl	800a808 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a612:	e0dc      	b.n	800a7ce <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a620:	b29b      	uxth	r3, r3
 800a622:	1ad3      	subs	r3, r2, r3
 800a624:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a62e:	b29b      	uxth	r3, r3
 800a630:	2b00      	cmp	r3, #0
 800a632:	f000 80ce 	beq.w	800a7d2 <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 800a636:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	f000 80c9 	beq.w	800a7d2 <HAL_UART_IRQHandler+0x622>
      {
#if defined(USART_CR1_FIFOEN)
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a648:	e853 3f00 	ldrex	r3, [r3]
 800a64c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a64e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a650:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a654:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	461a      	mov	r2, r3
 800a65e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a662:	647b      	str	r3, [r7, #68]	; 0x44
 800a664:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a666:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a668:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a66a:	e841 2300 	strex	r3, r2, [r1]
 800a66e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a670:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a672:	2b00      	cmp	r3, #0
 800a674:	d1e4      	bne.n	800a640 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	3308      	adds	r3, #8
 800a67c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a67e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a680:	e853 3f00 	ldrex	r3, [r3]
 800a684:	623b      	str	r3, [r7, #32]
   return(result);
 800a686:	6a3b      	ldr	r3, [r7, #32]
 800a688:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a68c:	f023 0301 	bic.w	r3, r3, #1
 800a690:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	3308      	adds	r3, #8
 800a69a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a69e:	633a      	str	r2, [r7, #48]	; 0x30
 800a6a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a6a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a6a6:	e841 2300 	strex	r3, r2, [r1]
 800a6aa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a6ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d1e1      	bne.n	800a676 <HAL_UART_IRQHandler+0x4c6>
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	2220      	movs	r2, #32
 800a6b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	2200      	movs	r2, #0
 800a6be:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	2200      	movs	r2, #0
 800a6c4:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6cc:	693b      	ldr	r3, [r7, #16]
 800a6ce:	e853 3f00 	ldrex	r3, [r3]
 800a6d2:	60fb      	str	r3, [r7, #12]
   return(result);
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	f023 0310 	bic.w	r3, r3, #16
 800a6da:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	461a      	mov	r2, r3
 800a6e4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a6e8:	61fb      	str	r3, [r7, #28]
 800a6ea:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6ec:	69b9      	ldr	r1, [r7, #24]
 800a6ee:	69fa      	ldr	r2, [r7, #28]
 800a6f0:	e841 2300 	strex	r3, r2, [r1]
 800a6f4:	617b      	str	r3, [r7, #20]
   return(result);
 800a6f6:	697b      	ldr	r3, [r7, #20]
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d1e4      	bne.n	800a6c6 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a6fc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a700:	4619      	mov	r1, r3
 800a702:	6878      	ldr	r0, [r7, #4]
 800a704:	f000 f880 	bl	800a808 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a708:	e063      	b.n	800a7d2 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a70a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a70e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a712:	2b00      	cmp	r3, #0
 800a714:	d00e      	beq.n	800a734 <HAL_UART_IRQHandler+0x584>
 800a716:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a71a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d008      	beq.n	800a734 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800a72a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800a72c:	6878      	ldr	r0, [r7, #4]
 800a72e:	f001 fb5f 	bl	800bdf0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a732:	e051      	b.n	800a7d8 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800a734:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a738:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d014      	beq.n	800a76a <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800a740:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a744:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d105      	bne.n	800a758 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800a74c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a750:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a754:	2b00      	cmp	r3, #0
 800a756:	d008      	beq.n	800a76a <HAL_UART_IRQHandler+0x5ba>
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
      && ((cr1its & USART_CR1_TXEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d03a      	beq.n	800a7d6 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a764:	6878      	ldr	r0, [r7, #4]
 800a766:	4798      	blx	r3
    }
    return;
 800a768:	e035      	b.n	800a7d6 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a76a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a76e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a772:	2b00      	cmp	r3, #0
 800a774:	d009      	beq.n	800a78a <HAL_UART_IRQHandler+0x5da>
 800a776:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a77a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d003      	beq.n	800a78a <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 800a782:	6878      	ldr	r0, [r7, #4]
 800a784:	f000 fea4 	bl	800b4d0 <UART_EndTransmit_IT>
    return;
 800a788:	e026      	b.n	800a7d8 <HAL_UART_IRQHandler+0x628>
  }

#if defined(USART_CR1_FIFOEN)
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800a78a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a78e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a792:	2b00      	cmp	r3, #0
 800a794:	d009      	beq.n	800a7aa <HAL_UART_IRQHandler+0x5fa>
 800a796:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a79a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d003      	beq.n	800a7aa <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800a7a2:	6878      	ldr	r0, [r7, #4]
 800a7a4:	f001 fb38 	bl	800be18 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a7a8:	e016      	b.n	800a7d8 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800a7aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a7ae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d010      	beq.n	800a7d8 <HAL_UART_IRQHandler+0x628>
 800a7b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	da0c      	bge.n	800a7d8 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800a7be:	6878      	ldr	r0, [r7, #4]
 800a7c0:	f001 fb20 	bl	800be04 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a7c4:	e008      	b.n	800a7d8 <HAL_UART_IRQHandler+0x628>
      return;
 800a7c6:	bf00      	nop
 800a7c8:	e006      	b.n	800a7d8 <HAL_UART_IRQHandler+0x628>
    return;
 800a7ca:	bf00      	nop
 800a7cc:	e004      	b.n	800a7d8 <HAL_UART_IRQHandler+0x628>
      return;
 800a7ce:	bf00      	nop
 800a7d0:	e002      	b.n	800a7d8 <HAL_UART_IRQHandler+0x628>
      return;
 800a7d2:	bf00      	nop
 800a7d4:	e000      	b.n	800a7d8 <HAL_UART_IRQHandler+0x628>
    return;
 800a7d6:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 800a7d8:	37e8      	adds	r7, #232	; 0xe8
 800a7da:	46bd      	mov	sp, r7
 800a7dc:	bd80      	pop	{r7, pc}
 800a7de:	bf00      	nop

0800a7e0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a7e0:	b480      	push	{r7}
 800a7e2:	b083      	sub	sp, #12
 800a7e4:	af00      	add	r7, sp, #0
 800a7e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a7e8:	bf00      	nop
 800a7ea:	370c      	adds	r7, #12
 800a7ec:	46bd      	mov	sp, r7
 800a7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f2:	4770      	bx	lr

0800a7f4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a7f4:	b480      	push	{r7}
 800a7f6:	b083      	sub	sp, #12
 800a7f8:	af00      	add	r7, sp, #0
 800a7fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a7fc:	bf00      	nop
 800a7fe:	370c      	adds	r7, #12
 800a800:	46bd      	mov	sp, r7
 800a802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a806:	4770      	bx	lr

0800a808 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a808:	b480      	push	{r7}
 800a80a:	b083      	sub	sp, #12
 800a80c:	af00      	add	r7, sp, #0
 800a80e:	6078      	str	r0, [r7, #4]
 800a810:	460b      	mov	r3, r1
 800a812:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a814:	bf00      	nop
 800a816:	370c      	adds	r7, #12
 800a818:	46bd      	mov	sp, r7
 800a81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a81e:	4770      	bx	lr

0800a820 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a820:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a824:	b08c      	sub	sp, #48	; 0x30
 800a826:	af00      	add	r7, sp, #0
 800a828:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a82a:	2300      	movs	r3, #0
 800a82c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a830:	697b      	ldr	r3, [r7, #20]
 800a832:	689a      	ldr	r2, [r3, #8]
 800a834:	697b      	ldr	r3, [r7, #20]
 800a836:	691b      	ldr	r3, [r3, #16]
 800a838:	431a      	orrs	r2, r3
 800a83a:	697b      	ldr	r3, [r7, #20]
 800a83c:	695b      	ldr	r3, [r3, #20]
 800a83e:	431a      	orrs	r2, r3
 800a840:	697b      	ldr	r3, [r7, #20]
 800a842:	69db      	ldr	r3, [r3, #28]
 800a844:	4313      	orrs	r3, r2
 800a846:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a848:	697b      	ldr	r3, [r7, #20]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	681a      	ldr	r2, [r3, #0]
 800a84e:	4baa      	ldr	r3, [pc, #680]	; (800aaf8 <UART_SetConfig+0x2d8>)
 800a850:	4013      	ands	r3, r2
 800a852:	697a      	ldr	r2, [r7, #20]
 800a854:	6812      	ldr	r2, [r2, #0]
 800a856:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a858:	430b      	orrs	r3, r1
 800a85a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a85c:	697b      	ldr	r3, [r7, #20]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	685b      	ldr	r3, [r3, #4]
 800a862:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a866:	697b      	ldr	r3, [r7, #20]
 800a868:	68da      	ldr	r2, [r3, #12]
 800a86a:	697b      	ldr	r3, [r7, #20]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	430a      	orrs	r2, r1
 800a870:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a872:	697b      	ldr	r3, [r7, #20]
 800a874:	699b      	ldr	r3, [r3, #24]
 800a876:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a878:	697b      	ldr	r3, [r7, #20]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	4a9f      	ldr	r2, [pc, #636]	; (800aafc <UART_SetConfig+0x2dc>)
 800a87e:	4293      	cmp	r3, r2
 800a880:	d004      	beq.n	800a88c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a882:	697b      	ldr	r3, [r7, #20]
 800a884:	6a1b      	ldr	r3, [r3, #32]
 800a886:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a888:	4313      	orrs	r3, r2
 800a88a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a88c:	697b      	ldr	r3, [r7, #20]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	689b      	ldr	r3, [r3, #8]
 800a892:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800a896:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800a89a:	697a      	ldr	r2, [r7, #20]
 800a89c:	6812      	ldr	r2, [r2, #0]
 800a89e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a8a0:	430b      	orrs	r3, r1
 800a8a2:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a8a4:	697b      	ldr	r3, [r7, #20]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8aa:	f023 010f 	bic.w	r1, r3, #15
 800a8ae:	697b      	ldr	r3, [r7, #20]
 800a8b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a8b2:	697b      	ldr	r3, [r7, #20]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	430a      	orrs	r2, r1
 800a8b8:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a8ba:	697b      	ldr	r3, [r7, #20]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	4a90      	ldr	r2, [pc, #576]	; (800ab00 <UART_SetConfig+0x2e0>)
 800a8c0:	4293      	cmp	r3, r2
 800a8c2:	d125      	bne.n	800a910 <UART_SetConfig+0xf0>
 800a8c4:	4b8f      	ldr	r3, [pc, #572]	; (800ab04 <UART_SetConfig+0x2e4>)
 800a8c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a8ca:	f003 0303 	and.w	r3, r3, #3
 800a8ce:	2b03      	cmp	r3, #3
 800a8d0:	d81a      	bhi.n	800a908 <UART_SetConfig+0xe8>
 800a8d2:	a201      	add	r2, pc, #4	; (adr r2, 800a8d8 <UART_SetConfig+0xb8>)
 800a8d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8d8:	0800a8e9 	.word	0x0800a8e9
 800a8dc:	0800a8f9 	.word	0x0800a8f9
 800a8e0:	0800a8f1 	.word	0x0800a8f1
 800a8e4:	0800a901 	.word	0x0800a901
 800a8e8:	2301      	movs	r3, #1
 800a8ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a8ee:	e116      	b.n	800ab1e <UART_SetConfig+0x2fe>
 800a8f0:	2302      	movs	r3, #2
 800a8f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a8f6:	e112      	b.n	800ab1e <UART_SetConfig+0x2fe>
 800a8f8:	2304      	movs	r3, #4
 800a8fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a8fe:	e10e      	b.n	800ab1e <UART_SetConfig+0x2fe>
 800a900:	2308      	movs	r3, #8
 800a902:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a906:	e10a      	b.n	800ab1e <UART_SetConfig+0x2fe>
 800a908:	2310      	movs	r3, #16
 800a90a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a90e:	e106      	b.n	800ab1e <UART_SetConfig+0x2fe>
 800a910:	697b      	ldr	r3, [r7, #20]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	4a7c      	ldr	r2, [pc, #496]	; (800ab08 <UART_SetConfig+0x2e8>)
 800a916:	4293      	cmp	r3, r2
 800a918:	d138      	bne.n	800a98c <UART_SetConfig+0x16c>
 800a91a:	4b7a      	ldr	r3, [pc, #488]	; (800ab04 <UART_SetConfig+0x2e4>)
 800a91c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a920:	f003 030c 	and.w	r3, r3, #12
 800a924:	2b0c      	cmp	r3, #12
 800a926:	d82d      	bhi.n	800a984 <UART_SetConfig+0x164>
 800a928:	a201      	add	r2, pc, #4	; (adr r2, 800a930 <UART_SetConfig+0x110>)
 800a92a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a92e:	bf00      	nop
 800a930:	0800a965 	.word	0x0800a965
 800a934:	0800a985 	.word	0x0800a985
 800a938:	0800a985 	.word	0x0800a985
 800a93c:	0800a985 	.word	0x0800a985
 800a940:	0800a975 	.word	0x0800a975
 800a944:	0800a985 	.word	0x0800a985
 800a948:	0800a985 	.word	0x0800a985
 800a94c:	0800a985 	.word	0x0800a985
 800a950:	0800a96d 	.word	0x0800a96d
 800a954:	0800a985 	.word	0x0800a985
 800a958:	0800a985 	.word	0x0800a985
 800a95c:	0800a985 	.word	0x0800a985
 800a960:	0800a97d 	.word	0x0800a97d
 800a964:	2300      	movs	r3, #0
 800a966:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a96a:	e0d8      	b.n	800ab1e <UART_SetConfig+0x2fe>
 800a96c:	2302      	movs	r3, #2
 800a96e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a972:	e0d4      	b.n	800ab1e <UART_SetConfig+0x2fe>
 800a974:	2304      	movs	r3, #4
 800a976:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a97a:	e0d0      	b.n	800ab1e <UART_SetConfig+0x2fe>
 800a97c:	2308      	movs	r3, #8
 800a97e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a982:	e0cc      	b.n	800ab1e <UART_SetConfig+0x2fe>
 800a984:	2310      	movs	r3, #16
 800a986:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a98a:	e0c8      	b.n	800ab1e <UART_SetConfig+0x2fe>
 800a98c:	697b      	ldr	r3, [r7, #20]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	4a5e      	ldr	r2, [pc, #376]	; (800ab0c <UART_SetConfig+0x2ec>)
 800a992:	4293      	cmp	r3, r2
 800a994:	d125      	bne.n	800a9e2 <UART_SetConfig+0x1c2>
 800a996:	4b5b      	ldr	r3, [pc, #364]	; (800ab04 <UART_SetConfig+0x2e4>)
 800a998:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a99c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a9a0:	2b30      	cmp	r3, #48	; 0x30
 800a9a2:	d016      	beq.n	800a9d2 <UART_SetConfig+0x1b2>
 800a9a4:	2b30      	cmp	r3, #48	; 0x30
 800a9a6:	d818      	bhi.n	800a9da <UART_SetConfig+0x1ba>
 800a9a8:	2b20      	cmp	r3, #32
 800a9aa:	d00a      	beq.n	800a9c2 <UART_SetConfig+0x1a2>
 800a9ac:	2b20      	cmp	r3, #32
 800a9ae:	d814      	bhi.n	800a9da <UART_SetConfig+0x1ba>
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d002      	beq.n	800a9ba <UART_SetConfig+0x19a>
 800a9b4:	2b10      	cmp	r3, #16
 800a9b6:	d008      	beq.n	800a9ca <UART_SetConfig+0x1aa>
 800a9b8:	e00f      	b.n	800a9da <UART_SetConfig+0x1ba>
 800a9ba:	2300      	movs	r3, #0
 800a9bc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a9c0:	e0ad      	b.n	800ab1e <UART_SetConfig+0x2fe>
 800a9c2:	2302      	movs	r3, #2
 800a9c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a9c8:	e0a9      	b.n	800ab1e <UART_SetConfig+0x2fe>
 800a9ca:	2304      	movs	r3, #4
 800a9cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a9d0:	e0a5      	b.n	800ab1e <UART_SetConfig+0x2fe>
 800a9d2:	2308      	movs	r3, #8
 800a9d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a9d8:	e0a1      	b.n	800ab1e <UART_SetConfig+0x2fe>
 800a9da:	2310      	movs	r3, #16
 800a9dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a9e0:	e09d      	b.n	800ab1e <UART_SetConfig+0x2fe>
 800a9e2:	697b      	ldr	r3, [r7, #20]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	4a4a      	ldr	r2, [pc, #296]	; (800ab10 <UART_SetConfig+0x2f0>)
 800a9e8:	4293      	cmp	r3, r2
 800a9ea:	d125      	bne.n	800aa38 <UART_SetConfig+0x218>
 800a9ec:	4b45      	ldr	r3, [pc, #276]	; (800ab04 <UART_SetConfig+0x2e4>)
 800a9ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a9f2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a9f6:	2bc0      	cmp	r3, #192	; 0xc0
 800a9f8:	d016      	beq.n	800aa28 <UART_SetConfig+0x208>
 800a9fa:	2bc0      	cmp	r3, #192	; 0xc0
 800a9fc:	d818      	bhi.n	800aa30 <UART_SetConfig+0x210>
 800a9fe:	2b80      	cmp	r3, #128	; 0x80
 800aa00:	d00a      	beq.n	800aa18 <UART_SetConfig+0x1f8>
 800aa02:	2b80      	cmp	r3, #128	; 0x80
 800aa04:	d814      	bhi.n	800aa30 <UART_SetConfig+0x210>
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d002      	beq.n	800aa10 <UART_SetConfig+0x1f0>
 800aa0a:	2b40      	cmp	r3, #64	; 0x40
 800aa0c:	d008      	beq.n	800aa20 <UART_SetConfig+0x200>
 800aa0e:	e00f      	b.n	800aa30 <UART_SetConfig+0x210>
 800aa10:	2300      	movs	r3, #0
 800aa12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aa16:	e082      	b.n	800ab1e <UART_SetConfig+0x2fe>
 800aa18:	2302      	movs	r3, #2
 800aa1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aa1e:	e07e      	b.n	800ab1e <UART_SetConfig+0x2fe>
 800aa20:	2304      	movs	r3, #4
 800aa22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aa26:	e07a      	b.n	800ab1e <UART_SetConfig+0x2fe>
 800aa28:	2308      	movs	r3, #8
 800aa2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aa2e:	e076      	b.n	800ab1e <UART_SetConfig+0x2fe>
 800aa30:	2310      	movs	r3, #16
 800aa32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aa36:	e072      	b.n	800ab1e <UART_SetConfig+0x2fe>
 800aa38:	697b      	ldr	r3, [r7, #20]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	4a35      	ldr	r2, [pc, #212]	; (800ab14 <UART_SetConfig+0x2f4>)
 800aa3e:	4293      	cmp	r3, r2
 800aa40:	d12a      	bne.n	800aa98 <UART_SetConfig+0x278>
 800aa42:	4b30      	ldr	r3, [pc, #192]	; (800ab04 <UART_SetConfig+0x2e4>)
 800aa44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa48:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800aa4c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800aa50:	d01a      	beq.n	800aa88 <UART_SetConfig+0x268>
 800aa52:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800aa56:	d81b      	bhi.n	800aa90 <UART_SetConfig+0x270>
 800aa58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aa5c:	d00c      	beq.n	800aa78 <UART_SetConfig+0x258>
 800aa5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aa62:	d815      	bhi.n	800aa90 <UART_SetConfig+0x270>
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d003      	beq.n	800aa70 <UART_SetConfig+0x250>
 800aa68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aa6c:	d008      	beq.n	800aa80 <UART_SetConfig+0x260>
 800aa6e:	e00f      	b.n	800aa90 <UART_SetConfig+0x270>
 800aa70:	2300      	movs	r3, #0
 800aa72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aa76:	e052      	b.n	800ab1e <UART_SetConfig+0x2fe>
 800aa78:	2302      	movs	r3, #2
 800aa7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aa7e:	e04e      	b.n	800ab1e <UART_SetConfig+0x2fe>
 800aa80:	2304      	movs	r3, #4
 800aa82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aa86:	e04a      	b.n	800ab1e <UART_SetConfig+0x2fe>
 800aa88:	2308      	movs	r3, #8
 800aa8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aa8e:	e046      	b.n	800ab1e <UART_SetConfig+0x2fe>
 800aa90:	2310      	movs	r3, #16
 800aa92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aa96:	e042      	b.n	800ab1e <UART_SetConfig+0x2fe>
 800aa98:	697b      	ldr	r3, [r7, #20]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	4a17      	ldr	r2, [pc, #92]	; (800aafc <UART_SetConfig+0x2dc>)
 800aa9e:	4293      	cmp	r3, r2
 800aaa0:	d13a      	bne.n	800ab18 <UART_SetConfig+0x2f8>
 800aaa2:	4b18      	ldr	r3, [pc, #96]	; (800ab04 <UART_SetConfig+0x2e4>)
 800aaa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aaa8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800aaac:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800aab0:	d01a      	beq.n	800aae8 <UART_SetConfig+0x2c8>
 800aab2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800aab6:	d81b      	bhi.n	800aaf0 <UART_SetConfig+0x2d0>
 800aab8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800aabc:	d00c      	beq.n	800aad8 <UART_SetConfig+0x2b8>
 800aabe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800aac2:	d815      	bhi.n	800aaf0 <UART_SetConfig+0x2d0>
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d003      	beq.n	800aad0 <UART_SetConfig+0x2b0>
 800aac8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aacc:	d008      	beq.n	800aae0 <UART_SetConfig+0x2c0>
 800aace:	e00f      	b.n	800aaf0 <UART_SetConfig+0x2d0>
 800aad0:	2300      	movs	r3, #0
 800aad2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aad6:	e022      	b.n	800ab1e <UART_SetConfig+0x2fe>
 800aad8:	2302      	movs	r3, #2
 800aada:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aade:	e01e      	b.n	800ab1e <UART_SetConfig+0x2fe>
 800aae0:	2304      	movs	r3, #4
 800aae2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aae6:	e01a      	b.n	800ab1e <UART_SetConfig+0x2fe>
 800aae8:	2308      	movs	r3, #8
 800aaea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aaee:	e016      	b.n	800ab1e <UART_SetConfig+0x2fe>
 800aaf0:	2310      	movs	r3, #16
 800aaf2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aaf6:	e012      	b.n	800ab1e <UART_SetConfig+0x2fe>
 800aaf8:	cfff69f3 	.word	0xcfff69f3
 800aafc:	40008000 	.word	0x40008000
 800ab00:	40013800 	.word	0x40013800
 800ab04:	40021000 	.word	0x40021000
 800ab08:	40004400 	.word	0x40004400
 800ab0c:	40004800 	.word	0x40004800
 800ab10:	40004c00 	.word	0x40004c00
 800ab14:	40005000 	.word	0x40005000
 800ab18:	2310      	movs	r3, #16
 800ab1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ab1e:	697b      	ldr	r3, [r7, #20]
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	4aae      	ldr	r2, [pc, #696]	; (800addc <UART_SetConfig+0x5bc>)
 800ab24:	4293      	cmp	r3, r2
 800ab26:	f040 8097 	bne.w	800ac58 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ab2a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ab2e:	2b08      	cmp	r3, #8
 800ab30:	d823      	bhi.n	800ab7a <UART_SetConfig+0x35a>
 800ab32:	a201      	add	r2, pc, #4	; (adr r2, 800ab38 <UART_SetConfig+0x318>)
 800ab34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab38:	0800ab5d 	.word	0x0800ab5d
 800ab3c:	0800ab7b 	.word	0x0800ab7b
 800ab40:	0800ab65 	.word	0x0800ab65
 800ab44:	0800ab7b 	.word	0x0800ab7b
 800ab48:	0800ab6b 	.word	0x0800ab6b
 800ab4c:	0800ab7b 	.word	0x0800ab7b
 800ab50:	0800ab7b 	.word	0x0800ab7b
 800ab54:	0800ab7b 	.word	0x0800ab7b
 800ab58:	0800ab73 	.word	0x0800ab73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ab5c:	f7fe f8e2 	bl	8008d24 <HAL_RCC_GetPCLK1Freq>
 800ab60:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ab62:	e010      	b.n	800ab86 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ab64:	4b9e      	ldr	r3, [pc, #632]	; (800ade0 <UART_SetConfig+0x5c0>)
 800ab66:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800ab68:	e00d      	b.n	800ab86 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ab6a:	f7fe f843 	bl	8008bf4 <HAL_RCC_GetSysClockFreq>
 800ab6e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ab70:	e009      	b.n	800ab86 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ab72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ab76:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800ab78:	e005      	b.n	800ab86 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800ab7a:	2300      	movs	r3, #0
 800ab7c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800ab7e:	2301      	movs	r3, #1
 800ab80:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800ab84:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ab86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	f000 8130 	beq.w	800adee <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ab8e:	697b      	ldr	r3, [r7, #20]
 800ab90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab92:	4a94      	ldr	r2, [pc, #592]	; (800ade4 <UART_SetConfig+0x5c4>)
 800ab94:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ab98:	461a      	mov	r2, r3
 800ab9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab9c:	fbb3 f3f2 	udiv	r3, r3, r2
 800aba0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800aba2:	697b      	ldr	r3, [r7, #20]
 800aba4:	685a      	ldr	r2, [r3, #4]
 800aba6:	4613      	mov	r3, r2
 800aba8:	005b      	lsls	r3, r3, #1
 800abaa:	4413      	add	r3, r2
 800abac:	69ba      	ldr	r2, [r7, #24]
 800abae:	429a      	cmp	r2, r3
 800abb0:	d305      	bcc.n	800abbe <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800abb2:	697b      	ldr	r3, [r7, #20]
 800abb4:	685b      	ldr	r3, [r3, #4]
 800abb6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800abb8:	69ba      	ldr	r2, [r7, #24]
 800abba:	429a      	cmp	r2, r3
 800abbc:	d903      	bls.n	800abc6 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800abbe:	2301      	movs	r3, #1
 800abc0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800abc4:	e113      	b.n	800adee <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800abc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abc8:	2200      	movs	r2, #0
 800abca:	60bb      	str	r3, [r7, #8]
 800abcc:	60fa      	str	r2, [r7, #12]
 800abce:	697b      	ldr	r3, [r7, #20]
 800abd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abd2:	4a84      	ldr	r2, [pc, #528]	; (800ade4 <UART_SetConfig+0x5c4>)
 800abd4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800abd8:	b29b      	uxth	r3, r3
 800abda:	2200      	movs	r2, #0
 800abdc:	603b      	str	r3, [r7, #0]
 800abde:	607a      	str	r2, [r7, #4]
 800abe0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800abe4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800abe8:	f7f5 fff6 	bl	8000bd8 <__aeabi_uldivmod>
 800abec:	4602      	mov	r2, r0
 800abee:	460b      	mov	r3, r1
 800abf0:	4610      	mov	r0, r2
 800abf2:	4619      	mov	r1, r3
 800abf4:	f04f 0200 	mov.w	r2, #0
 800abf8:	f04f 0300 	mov.w	r3, #0
 800abfc:	020b      	lsls	r3, r1, #8
 800abfe:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ac02:	0202      	lsls	r2, r0, #8
 800ac04:	6979      	ldr	r1, [r7, #20]
 800ac06:	6849      	ldr	r1, [r1, #4]
 800ac08:	0849      	lsrs	r1, r1, #1
 800ac0a:	2000      	movs	r0, #0
 800ac0c:	460c      	mov	r4, r1
 800ac0e:	4605      	mov	r5, r0
 800ac10:	eb12 0804 	adds.w	r8, r2, r4
 800ac14:	eb43 0905 	adc.w	r9, r3, r5
 800ac18:	697b      	ldr	r3, [r7, #20]
 800ac1a:	685b      	ldr	r3, [r3, #4]
 800ac1c:	2200      	movs	r2, #0
 800ac1e:	469a      	mov	sl, r3
 800ac20:	4693      	mov	fp, r2
 800ac22:	4652      	mov	r2, sl
 800ac24:	465b      	mov	r3, fp
 800ac26:	4640      	mov	r0, r8
 800ac28:	4649      	mov	r1, r9
 800ac2a:	f7f5 ffd5 	bl	8000bd8 <__aeabi_uldivmod>
 800ac2e:	4602      	mov	r2, r0
 800ac30:	460b      	mov	r3, r1
 800ac32:	4613      	mov	r3, r2
 800ac34:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ac36:	6a3b      	ldr	r3, [r7, #32]
 800ac38:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ac3c:	d308      	bcc.n	800ac50 <UART_SetConfig+0x430>
 800ac3e:	6a3b      	ldr	r3, [r7, #32]
 800ac40:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ac44:	d204      	bcs.n	800ac50 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800ac46:	697b      	ldr	r3, [r7, #20]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	6a3a      	ldr	r2, [r7, #32]
 800ac4c:	60da      	str	r2, [r3, #12]
 800ac4e:	e0ce      	b.n	800adee <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800ac50:	2301      	movs	r3, #1
 800ac52:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800ac56:	e0ca      	b.n	800adee <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ac58:	697b      	ldr	r3, [r7, #20]
 800ac5a:	69db      	ldr	r3, [r3, #28]
 800ac5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ac60:	d166      	bne.n	800ad30 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800ac62:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ac66:	2b08      	cmp	r3, #8
 800ac68:	d827      	bhi.n	800acba <UART_SetConfig+0x49a>
 800ac6a:	a201      	add	r2, pc, #4	; (adr r2, 800ac70 <UART_SetConfig+0x450>)
 800ac6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac70:	0800ac95 	.word	0x0800ac95
 800ac74:	0800ac9d 	.word	0x0800ac9d
 800ac78:	0800aca5 	.word	0x0800aca5
 800ac7c:	0800acbb 	.word	0x0800acbb
 800ac80:	0800acab 	.word	0x0800acab
 800ac84:	0800acbb 	.word	0x0800acbb
 800ac88:	0800acbb 	.word	0x0800acbb
 800ac8c:	0800acbb 	.word	0x0800acbb
 800ac90:	0800acb3 	.word	0x0800acb3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ac94:	f7fe f846 	bl	8008d24 <HAL_RCC_GetPCLK1Freq>
 800ac98:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ac9a:	e014      	b.n	800acc6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ac9c:	f7fe f858 	bl	8008d50 <HAL_RCC_GetPCLK2Freq>
 800aca0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800aca2:	e010      	b.n	800acc6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800aca4:	4b4e      	ldr	r3, [pc, #312]	; (800ade0 <UART_SetConfig+0x5c0>)
 800aca6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800aca8:	e00d      	b.n	800acc6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800acaa:	f7fd ffa3 	bl	8008bf4 <HAL_RCC_GetSysClockFreq>
 800acae:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800acb0:	e009      	b.n	800acc6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800acb2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800acb6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800acb8:	e005      	b.n	800acc6 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800acba:	2300      	movs	r3, #0
 800acbc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800acbe:	2301      	movs	r3, #1
 800acc0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800acc4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800acc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acc8:	2b00      	cmp	r3, #0
 800acca:	f000 8090 	beq.w	800adee <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800acce:	697b      	ldr	r3, [r7, #20]
 800acd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acd2:	4a44      	ldr	r2, [pc, #272]	; (800ade4 <UART_SetConfig+0x5c4>)
 800acd4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800acd8:	461a      	mov	r2, r3
 800acda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acdc:	fbb3 f3f2 	udiv	r3, r3, r2
 800ace0:	005a      	lsls	r2, r3, #1
 800ace2:	697b      	ldr	r3, [r7, #20]
 800ace4:	685b      	ldr	r3, [r3, #4]
 800ace6:	085b      	lsrs	r3, r3, #1
 800ace8:	441a      	add	r2, r3
 800acea:	697b      	ldr	r3, [r7, #20]
 800acec:	685b      	ldr	r3, [r3, #4]
 800acee:	fbb2 f3f3 	udiv	r3, r2, r3
 800acf2:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800acf4:	6a3b      	ldr	r3, [r7, #32]
 800acf6:	2b0f      	cmp	r3, #15
 800acf8:	d916      	bls.n	800ad28 <UART_SetConfig+0x508>
 800acfa:	6a3b      	ldr	r3, [r7, #32]
 800acfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ad00:	d212      	bcs.n	800ad28 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ad02:	6a3b      	ldr	r3, [r7, #32]
 800ad04:	b29b      	uxth	r3, r3
 800ad06:	f023 030f 	bic.w	r3, r3, #15
 800ad0a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ad0c:	6a3b      	ldr	r3, [r7, #32]
 800ad0e:	085b      	lsrs	r3, r3, #1
 800ad10:	b29b      	uxth	r3, r3
 800ad12:	f003 0307 	and.w	r3, r3, #7
 800ad16:	b29a      	uxth	r2, r3
 800ad18:	8bfb      	ldrh	r3, [r7, #30]
 800ad1a:	4313      	orrs	r3, r2
 800ad1c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800ad1e:	697b      	ldr	r3, [r7, #20]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	8bfa      	ldrh	r2, [r7, #30]
 800ad24:	60da      	str	r2, [r3, #12]
 800ad26:	e062      	b.n	800adee <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800ad28:	2301      	movs	r3, #1
 800ad2a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800ad2e:	e05e      	b.n	800adee <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800ad30:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ad34:	2b08      	cmp	r3, #8
 800ad36:	d828      	bhi.n	800ad8a <UART_SetConfig+0x56a>
 800ad38:	a201      	add	r2, pc, #4	; (adr r2, 800ad40 <UART_SetConfig+0x520>)
 800ad3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad3e:	bf00      	nop
 800ad40:	0800ad65 	.word	0x0800ad65
 800ad44:	0800ad6d 	.word	0x0800ad6d
 800ad48:	0800ad75 	.word	0x0800ad75
 800ad4c:	0800ad8b 	.word	0x0800ad8b
 800ad50:	0800ad7b 	.word	0x0800ad7b
 800ad54:	0800ad8b 	.word	0x0800ad8b
 800ad58:	0800ad8b 	.word	0x0800ad8b
 800ad5c:	0800ad8b 	.word	0x0800ad8b
 800ad60:	0800ad83 	.word	0x0800ad83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ad64:	f7fd ffde 	bl	8008d24 <HAL_RCC_GetPCLK1Freq>
 800ad68:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ad6a:	e014      	b.n	800ad96 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ad6c:	f7fd fff0 	bl	8008d50 <HAL_RCC_GetPCLK2Freq>
 800ad70:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ad72:	e010      	b.n	800ad96 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ad74:	4b1a      	ldr	r3, [pc, #104]	; (800ade0 <UART_SetConfig+0x5c0>)
 800ad76:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800ad78:	e00d      	b.n	800ad96 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ad7a:	f7fd ff3b 	bl	8008bf4 <HAL_RCC_GetSysClockFreq>
 800ad7e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ad80:	e009      	b.n	800ad96 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ad82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ad86:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800ad88:	e005      	b.n	800ad96 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800ad8a:	2300      	movs	r3, #0
 800ad8c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800ad8e:	2301      	movs	r3, #1
 800ad90:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800ad94:	bf00      	nop
    }

    if (pclk != 0U)
 800ad96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d028      	beq.n	800adee <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ad9c:	697b      	ldr	r3, [r7, #20]
 800ad9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ada0:	4a10      	ldr	r2, [pc, #64]	; (800ade4 <UART_SetConfig+0x5c4>)
 800ada2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ada6:	461a      	mov	r2, r3
 800ada8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adaa:	fbb3 f2f2 	udiv	r2, r3, r2
 800adae:	697b      	ldr	r3, [r7, #20]
 800adb0:	685b      	ldr	r3, [r3, #4]
 800adb2:	085b      	lsrs	r3, r3, #1
 800adb4:	441a      	add	r2, r3
 800adb6:	697b      	ldr	r3, [r7, #20]
 800adb8:	685b      	ldr	r3, [r3, #4]
 800adba:	fbb2 f3f3 	udiv	r3, r2, r3
 800adbe:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800adc0:	6a3b      	ldr	r3, [r7, #32]
 800adc2:	2b0f      	cmp	r3, #15
 800adc4:	d910      	bls.n	800ade8 <UART_SetConfig+0x5c8>
 800adc6:	6a3b      	ldr	r3, [r7, #32]
 800adc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800adcc:	d20c      	bcs.n	800ade8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800adce:	6a3b      	ldr	r3, [r7, #32]
 800add0:	b29a      	uxth	r2, r3
 800add2:	697b      	ldr	r3, [r7, #20]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	60da      	str	r2, [r3, #12]
 800add8:	e009      	b.n	800adee <UART_SetConfig+0x5ce>
 800adda:	bf00      	nop
 800addc:	40008000 	.word	0x40008000
 800ade0:	00f42400 	.word	0x00f42400
 800ade4:	08014824 	.word	0x08014824
      }
      else
      {
        ret = HAL_ERROR;
 800ade8:	2301      	movs	r3, #1
 800adea:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800adee:	697b      	ldr	r3, [r7, #20]
 800adf0:	2201      	movs	r2, #1
 800adf2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800adf6:	697b      	ldr	r3, [r7, #20]
 800adf8:	2201      	movs	r2, #1
 800adfa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800adfe:	697b      	ldr	r3, [r7, #20]
 800ae00:	2200      	movs	r2, #0
 800ae02:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800ae04:	697b      	ldr	r3, [r7, #20]
 800ae06:	2200      	movs	r2, #0
 800ae08:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800ae0a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800ae0e:	4618      	mov	r0, r3
 800ae10:	3730      	adds	r7, #48	; 0x30
 800ae12:	46bd      	mov	sp, r7
 800ae14:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800ae18 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ae18:	b480      	push	{r7}
 800ae1a:	b083      	sub	sp, #12
 800ae1c:	af00      	add	r7, sp, #0
 800ae1e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae24:	f003 0301 	and.w	r3, r3, #1
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d00a      	beq.n	800ae42 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	685b      	ldr	r3, [r3, #4]
 800ae32:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	430a      	orrs	r2, r1
 800ae40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae46:	f003 0302 	and.w	r3, r3, #2
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d00a      	beq.n	800ae64 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	685b      	ldr	r3, [r3, #4]
 800ae54:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	430a      	orrs	r2, r1
 800ae62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae68:	f003 0304 	and.w	r3, r3, #4
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d00a      	beq.n	800ae86 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	685b      	ldr	r3, [r3, #4]
 800ae76:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	430a      	orrs	r2, r1
 800ae84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae8a:	f003 0308 	and.w	r3, r3, #8
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d00a      	beq.n	800aea8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	685b      	ldr	r3, [r3, #4]
 800ae98:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	430a      	orrs	r2, r1
 800aea6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aeac:	f003 0310 	and.w	r3, r3, #16
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d00a      	beq.n	800aeca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	689b      	ldr	r3, [r3, #8]
 800aeba:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	430a      	orrs	r2, r1
 800aec8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aece:	f003 0320 	and.w	r3, r3, #32
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d00a      	beq.n	800aeec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	689b      	ldr	r3, [r3, #8]
 800aedc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	430a      	orrs	r2, r1
 800aeea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aef0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d01a      	beq.n	800af2e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	685b      	ldr	r3, [r3, #4]
 800aefe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	430a      	orrs	r2, r1
 800af0c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800af16:	d10a      	bne.n	800af2e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	685b      	ldr	r3, [r3, #4]
 800af1e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	430a      	orrs	r2, r1
 800af2c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800af36:	2b00      	cmp	r3, #0
 800af38:	d00a      	beq.n	800af50 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	685b      	ldr	r3, [r3, #4]
 800af40:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	430a      	orrs	r2, r1
 800af4e:	605a      	str	r2, [r3, #4]
  }
}
 800af50:	bf00      	nop
 800af52:	370c      	adds	r7, #12
 800af54:	46bd      	mov	sp, r7
 800af56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af5a:	4770      	bx	lr

0800af5c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800af5c:	b580      	push	{r7, lr}
 800af5e:	b086      	sub	sp, #24
 800af60:	af02      	add	r7, sp, #8
 800af62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	2200      	movs	r2, #0
 800af68:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800af6c:	f7fb fd6c 	bl	8006a48 <HAL_GetTick>
 800af70:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	f003 0308 	and.w	r3, r3, #8
 800af7c:	2b08      	cmp	r3, #8
 800af7e:	d10e      	bne.n	800af9e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800af80:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800af84:	9300      	str	r3, [sp, #0]
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	2200      	movs	r2, #0
 800af8a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800af8e:	6878      	ldr	r0, [r7, #4]
 800af90:	f000 f82f 	bl	800aff2 <UART_WaitOnFlagUntilTimeout>
 800af94:	4603      	mov	r3, r0
 800af96:	2b00      	cmp	r3, #0
 800af98:	d001      	beq.n	800af9e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800af9a:	2303      	movs	r3, #3
 800af9c:	e025      	b.n	800afea <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	f003 0304 	and.w	r3, r3, #4
 800afa8:	2b04      	cmp	r3, #4
 800afaa:	d10e      	bne.n	800afca <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800afac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800afb0:	9300      	str	r3, [sp, #0]
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	2200      	movs	r2, #0
 800afb6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800afba:	6878      	ldr	r0, [r7, #4]
 800afbc:	f000 f819 	bl	800aff2 <UART_WaitOnFlagUntilTimeout>
 800afc0:	4603      	mov	r3, r0
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d001      	beq.n	800afca <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800afc6:	2303      	movs	r3, #3
 800afc8:	e00f      	b.n	800afea <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	2220      	movs	r2, #32
 800afce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	2220      	movs	r2, #32
 800afd6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	2200      	movs	r2, #0
 800afde:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	2200      	movs	r2, #0
 800afe4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800afe8:	2300      	movs	r3, #0
}
 800afea:	4618      	mov	r0, r3
 800afec:	3710      	adds	r7, #16
 800afee:	46bd      	mov	sp, r7
 800aff0:	bd80      	pop	{r7, pc}

0800aff2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800aff2:	b580      	push	{r7, lr}
 800aff4:	b09c      	sub	sp, #112	; 0x70
 800aff6:	af00      	add	r7, sp, #0
 800aff8:	60f8      	str	r0, [r7, #12]
 800affa:	60b9      	str	r1, [r7, #8]
 800affc:	603b      	str	r3, [r7, #0]
 800affe:	4613      	mov	r3, r2
 800b000:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b002:	e0a9      	b.n	800b158 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b004:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b006:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b00a:	f000 80a5 	beq.w	800b158 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b00e:	f7fb fd1b 	bl	8006a48 <HAL_GetTick>
 800b012:	4602      	mov	r2, r0
 800b014:	683b      	ldr	r3, [r7, #0]
 800b016:	1ad3      	subs	r3, r2, r3
 800b018:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800b01a:	429a      	cmp	r2, r3
 800b01c:	d302      	bcc.n	800b024 <UART_WaitOnFlagUntilTimeout+0x32>
 800b01e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b020:	2b00      	cmp	r3, #0
 800b022:	d140      	bne.n	800b0a6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b02a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b02c:	e853 3f00 	ldrex	r3, [r3]
 800b030:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b032:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b034:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b038:	667b      	str	r3, [r7, #100]	; 0x64
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	461a      	mov	r2, r3
 800b040:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b042:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b044:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b046:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b048:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b04a:	e841 2300 	strex	r3, r2, [r1]
 800b04e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800b050:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b052:	2b00      	cmp	r3, #0
 800b054:	d1e6      	bne.n	800b024 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	3308      	adds	r3, #8
 800b05c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b05e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b060:	e853 3f00 	ldrex	r3, [r3]
 800b064:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b068:	f023 0301 	bic.w	r3, r3, #1
 800b06c:	663b      	str	r3, [r7, #96]	; 0x60
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	3308      	adds	r3, #8
 800b074:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b076:	64ba      	str	r2, [r7, #72]	; 0x48
 800b078:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b07a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b07c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b07e:	e841 2300 	strex	r3, r2, [r1]
 800b082:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800b084:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b086:	2b00      	cmp	r3, #0
 800b088:	d1e5      	bne.n	800b056 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	2220      	movs	r2, #32
 800b08e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	2220      	movs	r2, #32
 800b096:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	2200      	movs	r2, #0
 800b09e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800b0a2:	2303      	movs	r3, #3
 800b0a4:	e069      	b.n	800b17a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	f003 0304 	and.w	r3, r3, #4
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d051      	beq.n	800b158 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	69db      	ldr	r3, [r3, #28]
 800b0ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b0be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b0c2:	d149      	bne.n	800b158 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b0cc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0d6:	e853 3f00 	ldrex	r3, [r3]
 800b0da:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b0dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0de:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b0e2:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	461a      	mov	r2, r3
 800b0ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b0ec:	637b      	str	r3, [r7, #52]	; 0x34
 800b0ee:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0f0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b0f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b0f4:	e841 2300 	strex	r3, r2, [r1]
 800b0f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b0fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d1e6      	bne.n	800b0ce <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	3308      	adds	r3, #8
 800b106:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b108:	697b      	ldr	r3, [r7, #20]
 800b10a:	e853 3f00 	ldrex	r3, [r3]
 800b10e:	613b      	str	r3, [r7, #16]
   return(result);
 800b110:	693b      	ldr	r3, [r7, #16]
 800b112:	f023 0301 	bic.w	r3, r3, #1
 800b116:	66bb      	str	r3, [r7, #104]	; 0x68
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	3308      	adds	r3, #8
 800b11e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b120:	623a      	str	r2, [r7, #32]
 800b122:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b124:	69f9      	ldr	r1, [r7, #28]
 800b126:	6a3a      	ldr	r2, [r7, #32]
 800b128:	e841 2300 	strex	r3, r2, [r1]
 800b12c:	61bb      	str	r3, [r7, #24]
   return(result);
 800b12e:	69bb      	ldr	r3, [r7, #24]
 800b130:	2b00      	cmp	r3, #0
 800b132:	d1e5      	bne.n	800b100 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	2220      	movs	r2, #32
 800b138:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	2220      	movs	r2, #32
 800b140:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	2220      	movs	r2, #32
 800b148:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	2200      	movs	r2, #0
 800b150:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800b154:	2303      	movs	r3, #3
 800b156:	e010      	b.n	800b17a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	69da      	ldr	r2, [r3, #28]
 800b15e:	68bb      	ldr	r3, [r7, #8]
 800b160:	4013      	ands	r3, r2
 800b162:	68ba      	ldr	r2, [r7, #8]
 800b164:	429a      	cmp	r2, r3
 800b166:	bf0c      	ite	eq
 800b168:	2301      	moveq	r3, #1
 800b16a:	2300      	movne	r3, #0
 800b16c:	b2db      	uxtb	r3, r3
 800b16e:	461a      	mov	r2, r3
 800b170:	79fb      	ldrb	r3, [r7, #7]
 800b172:	429a      	cmp	r2, r3
 800b174:	f43f af46 	beq.w	800b004 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b178:	2300      	movs	r3, #0
}
 800b17a:	4618      	mov	r0, r3
 800b17c:	3770      	adds	r7, #112	; 0x70
 800b17e:	46bd      	mov	sp, r7
 800b180:	bd80      	pop	{r7, pc}
	...

0800b184 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b184:	b480      	push	{r7}
 800b186:	b0a3      	sub	sp, #140	; 0x8c
 800b188:	af00      	add	r7, sp, #0
 800b18a:	60f8      	str	r0, [r7, #12]
 800b18c:	60b9      	str	r1, [r7, #8]
 800b18e:	4613      	mov	r3, r2
 800b190:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	68ba      	ldr	r2, [r7, #8]
 800b196:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	88fa      	ldrh	r2, [r7, #6]
 800b19c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	88fa      	ldrh	r2, [r7, #6]
 800b1a4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	2200      	movs	r2, #0
 800b1ac:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	689b      	ldr	r3, [r3, #8]
 800b1b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b1b6:	d10e      	bne.n	800b1d6 <UART_Start_Receive_IT+0x52>
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	691b      	ldr	r3, [r3, #16]
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d105      	bne.n	800b1cc <UART_Start_Receive_IT+0x48>
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	f240 12ff 	movw	r2, #511	; 0x1ff
 800b1c6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b1ca:	e02d      	b.n	800b228 <UART_Start_Receive_IT+0xa4>
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	22ff      	movs	r2, #255	; 0xff
 800b1d0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b1d4:	e028      	b.n	800b228 <UART_Start_Receive_IT+0xa4>
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	689b      	ldr	r3, [r3, #8]
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d10d      	bne.n	800b1fa <UART_Start_Receive_IT+0x76>
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	691b      	ldr	r3, [r3, #16]
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d104      	bne.n	800b1f0 <UART_Start_Receive_IT+0x6c>
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	22ff      	movs	r2, #255	; 0xff
 800b1ea:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b1ee:	e01b      	b.n	800b228 <UART_Start_Receive_IT+0xa4>
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	227f      	movs	r2, #127	; 0x7f
 800b1f4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b1f8:	e016      	b.n	800b228 <UART_Start_Receive_IT+0xa4>
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	689b      	ldr	r3, [r3, #8]
 800b1fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b202:	d10d      	bne.n	800b220 <UART_Start_Receive_IT+0x9c>
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	691b      	ldr	r3, [r3, #16]
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d104      	bne.n	800b216 <UART_Start_Receive_IT+0x92>
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	227f      	movs	r2, #127	; 0x7f
 800b210:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b214:	e008      	b.n	800b228 <UART_Start_Receive_IT+0xa4>
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	223f      	movs	r2, #63	; 0x3f
 800b21a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b21e:	e003      	b.n	800b228 <UART_Start_Receive_IT+0xa4>
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	2200      	movs	r2, #0
 800b224:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	2200      	movs	r2, #0
 800b22c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	2222      	movs	r2, #34	; 0x22
 800b234:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	3308      	adds	r3, #8
 800b23e:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b240:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b242:	e853 3f00 	ldrex	r3, [r3]
 800b246:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800b248:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b24a:	f043 0301 	orr.w	r3, r3, #1
 800b24e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	3308      	adds	r3, #8
 800b258:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800b25c:	673a      	str	r2, [r7, #112]	; 0x70
 800b25e:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b260:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800b262:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800b264:	e841 2300 	strex	r3, r2, [r1]
 800b268:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800b26a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d1e3      	bne.n	800b238 <UART_Start_Receive_IT+0xb4>

#if defined(USART_CR1_FIFOEN)
  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b274:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b278:	d153      	bne.n	800b322 <UART_Start_Receive_IT+0x19e>
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b280:	88fa      	ldrh	r2, [r7, #6]
 800b282:	429a      	cmp	r2, r3
 800b284:	d34d      	bcc.n	800b322 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	689b      	ldr	r3, [r3, #8]
 800b28a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b28e:	d107      	bne.n	800b2a0 <UART_Start_Receive_IT+0x11c>
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	691b      	ldr	r3, [r3, #16]
 800b294:	2b00      	cmp	r3, #0
 800b296:	d103      	bne.n	800b2a0 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	4a4b      	ldr	r2, [pc, #300]	; (800b3c8 <UART_Start_Receive_IT+0x244>)
 800b29c:	671a      	str	r2, [r3, #112]	; 0x70
 800b29e:	e002      	b.n	800b2a6 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	4a4a      	ldr	r2, [pc, #296]	; (800b3cc <UART_Start_Receive_IT+0x248>)
 800b2a4:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	2200      	movs	r2, #0
 800b2aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	691b      	ldr	r3, [r3, #16]
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d01a      	beq.n	800b2ec <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b2be:	e853 3f00 	ldrex	r3, [r3]
 800b2c2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b2c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b2c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b2ca:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	461a      	mov	r2, r3
 800b2d4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b2d8:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b2da:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2dc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b2de:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b2e0:	e841 2300 	strex	r3, r2, [r1]
 800b2e4:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800b2e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d1e4      	bne.n	800b2b6 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	3308      	adds	r3, #8
 800b2f2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b2f6:	e853 3f00 	ldrex	r3, [r3]
 800b2fa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b2fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b302:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	3308      	adds	r3, #8
 800b30a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800b30c:	64ba      	str	r2, [r7, #72]	; 0x48
 800b30e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b310:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b312:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b314:	e841 2300 	strex	r3, r2, [r1]
 800b318:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800b31a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d1e5      	bne.n	800b2ec <UART_Start_Receive_IT+0x168>
 800b320:	e04a      	b.n	800b3b8 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	689b      	ldr	r3, [r3, #8]
 800b326:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b32a:	d107      	bne.n	800b33c <UART_Start_Receive_IT+0x1b8>
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	691b      	ldr	r3, [r3, #16]
 800b330:	2b00      	cmp	r3, #0
 800b332:	d103      	bne.n	800b33c <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	4a26      	ldr	r2, [pc, #152]	; (800b3d0 <UART_Start_Receive_IT+0x24c>)
 800b338:	671a      	str	r2, [r3, #112]	; 0x70
 800b33a:	e002      	b.n	800b342 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	4a25      	ldr	r2, [pc, #148]	; (800b3d4 <UART_Start_Receive_IT+0x250>)
 800b340:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	2200      	movs	r2, #0
 800b346:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	691b      	ldr	r3, [r3, #16]
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d019      	beq.n	800b386 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b35a:	e853 3f00 	ldrex	r3, [r3]
 800b35e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b362:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800b366:	677b      	str	r3, [r7, #116]	; 0x74
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	461a      	mov	r2, r3
 800b36e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b370:	637b      	str	r3, [r7, #52]	; 0x34
 800b372:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b374:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b376:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b378:	e841 2300 	strex	r3, r2, [r1]
 800b37c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b37e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b380:	2b00      	cmp	r3, #0
 800b382:	d1e6      	bne.n	800b352 <UART_Start_Receive_IT+0x1ce>
 800b384:	e018      	b.n	800b3b8 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b38c:	697b      	ldr	r3, [r7, #20]
 800b38e:	e853 3f00 	ldrex	r3, [r3]
 800b392:	613b      	str	r3, [r7, #16]
   return(result);
 800b394:	693b      	ldr	r3, [r7, #16]
 800b396:	f043 0320 	orr.w	r3, r3, #32
 800b39a:	67bb      	str	r3, [r7, #120]	; 0x78
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	461a      	mov	r2, r3
 800b3a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b3a4:	623b      	str	r3, [r7, #32]
 800b3a6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3a8:	69f9      	ldr	r1, [r7, #28]
 800b3aa:	6a3a      	ldr	r2, [r7, #32]
 800b3ac:	e841 2300 	strex	r3, r2, [r1]
 800b3b0:	61bb      	str	r3, [r7, #24]
   return(result);
 800b3b2:	69bb      	ldr	r3, [r7, #24]
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d1e6      	bne.n	800b386 <UART_Start_Receive_IT+0x202>
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800b3b8:	2300      	movs	r3, #0
}
 800b3ba:	4618      	mov	r0, r3
 800b3bc:	378c      	adds	r7, #140	; 0x8c
 800b3be:	46bd      	mov	sp, r7
 800b3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c4:	4770      	bx	lr
 800b3c6:	bf00      	nop
 800b3c8:	0800baed 	.word	0x0800baed
 800b3cc:	0800b7f1 	.word	0x0800b7f1
 800b3d0:	0800b68b 	.word	0x0800b68b
 800b3d4:	0800b527 	.word	0x0800b527

0800b3d8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b3d8:	b480      	push	{r7}
 800b3da:	b095      	sub	sp, #84	; 0x54
 800b3dc:	af00      	add	r7, sp, #0
 800b3de:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3e8:	e853 3f00 	ldrex	r3, [r3]
 800b3ec:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b3ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3f0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b3f4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	461a      	mov	r2, r3
 800b3fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b3fe:	643b      	str	r3, [r7, #64]	; 0x40
 800b400:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b402:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b404:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b406:	e841 2300 	strex	r3, r2, [r1]
 800b40a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b40c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d1e6      	bne.n	800b3e0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	3308      	adds	r3, #8
 800b418:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b41a:	6a3b      	ldr	r3, [r7, #32]
 800b41c:	e853 3f00 	ldrex	r3, [r3]
 800b420:	61fb      	str	r3, [r7, #28]
   return(result);
 800b422:	69fb      	ldr	r3, [r7, #28]
 800b424:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b428:	f023 0301 	bic.w	r3, r3, #1
 800b42c:	64bb      	str	r3, [r7, #72]	; 0x48
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	3308      	adds	r3, #8
 800b434:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b436:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b438:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b43a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b43c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b43e:	e841 2300 	strex	r3, r2, [r1]
 800b442:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b446:	2b00      	cmp	r3, #0
 800b448:	d1e3      	bne.n	800b412 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b44e:	2b01      	cmp	r3, #1
 800b450:	d118      	bne.n	800b484 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	e853 3f00 	ldrex	r3, [r3]
 800b45e:	60bb      	str	r3, [r7, #8]
   return(result);
 800b460:	68bb      	ldr	r3, [r7, #8]
 800b462:	f023 0310 	bic.w	r3, r3, #16
 800b466:	647b      	str	r3, [r7, #68]	; 0x44
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	461a      	mov	r2, r3
 800b46e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b470:	61bb      	str	r3, [r7, #24]
 800b472:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b474:	6979      	ldr	r1, [r7, #20]
 800b476:	69ba      	ldr	r2, [r7, #24]
 800b478:	e841 2300 	strex	r3, r2, [r1]
 800b47c:	613b      	str	r3, [r7, #16]
   return(result);
 800b47e:	693b      	ldr	r3, [r7, #16]
 800b480:	2b00      	cmp	r3, #0
 800b482:	d1e6      	bne.n	800b452 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	2220      	movs	r2, #32
 800b488:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	2200      	movs	r2, #0
 800b490:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	2200      	movs	r2, #0
 800b496:	671a      	str	r2, [r3, #112]	; 0x70
}
 800b498:	bf00      	nop
 800b49a:	3754      	adds	r7, #84	; 0x54
 800b49c:	46bd      	mov	sp, r7
 800b49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a2:	4770      	bx	lr

0800b4a4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b4a4:	b580      	push	{r7, lr}
 800b4a6:	b084      	sub	sp, #16
 800b4a8:	af00      	add	r7, sp, #0
 800b4aa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4b0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	2200      	movs	r2, #0
 800b4b6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	2200      	movs	r2, #0
 800b4be:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b4c2:	68f8      	ldr	r0, [r7, #12]
 800b4c4:	f7ff f996 	bl	800a7f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b4c8:	bf00      	nop
 800b4ca:	3710      	adds	r7, #16
 800b4cc:	46bd      	mov	sp, r7
 800b4ce:	bd80      	pop	{r7, pc}

0800b4d0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b4d0:	b580      	push	{r7, lr}
 800b4d2:	b088      	sub	sp, #32
 800b4d4:	af00      	add	r7, sp, #0
 800b4d6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	e853 3f00 	ldrex	r3, [r3]
 800b4e4:	60bb      	str	r3, [r7, #8]
   return(result);
 800b4e6:	68bb      	ldr	r3, [r7, #8]
 800b4e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b4ec:	61fb      	str	r3, [r7, #28]
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	461a      	mov	r2, r3
 800b4f4:	69fb      	ldr	r3, [r7, #28]
 800b4f6:	61bb      	str	r3, [r7, #24]
 800b4f8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4fa:	6979      	ldr	r1, [r7, #20]
 800b4fc:	69ba      	ldr	r2, [r7, #24]
 800b4fe:	e841 2300 	strex	r3, r2, [r1]
 800b502:	613b      	str	r3, [r7, #16]
   return(result);
 800b504:	693b      	ldr	r3, [r7, #16]
 800b506:	2b00      	cmp	r3, #0
 800b508:	d1e6      	bne.n	800b4d8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	2220      	movs	r2, #32
 800b50e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	2200      	movs	r2, #0
 800b516:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b518:	6878      	ldr	r0, [r7, #4]
 800b51a:	f7ff f961 	bl	800a7e0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b51e:	bf00      	nop
 800b520:	3720      	adds	r7, #32
 800b522:	46bd      	mov	sp, r7
 800b524:	bd80      	pop	{r7, pc}

0800b526 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800b526:	b580      	push	{r7, lr}
 800b528:	b096      	sub	sp, #88	; 0x58
 800b52a:	af00      	add	r7, sp, #0
 800b52c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b534:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b53e:	2b22      	cmp	r3, #34	; 0x22
 800b540:	f040 8095 	bne.w	800b66e <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800b54a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800b54e:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800b552:	b2d9      	uxtb	r1, r3
 800b554:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800b558:	b2da      	uxtb	r2, r3
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b55e:	400a      	ands	r2, r1
 800b560:	b2d2      	uxtb	r2, r2
 800b562:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b568:	1c5a      	adds	r2, r3, #1
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b574:	b29b      	uxth	r3, r3
 800b576:	3b01      	subs	r3, #1
 800b578:	b29a      	uxth	r2, r3
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b586:	b29b      	uxth	r3, r3
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d17a      	bne.n	800b682 <UART_RxISR_8BIT+0x15c>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b594:	e853 3f00 	ldrex	r3, [r3]
 800b598:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b59a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b59c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b5a0:	653b      	str	r3, [r7, #80]	; 0x50
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	461a      	mov	r2, r3
 800b5a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b5aa:	647b      	str	r3, [r7, #68]	; 0x44
 800b5ac:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5ae:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b5b0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b5b2:	e841 2300 	strex	r3, r2, [r1]
 800b5b6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b5b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d1e6      	bne.n	800b58c <UART_RxISR_8BIT+0x66>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	3308      	adds	r3, #8
 800b5c4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5c8:	e853 3f00 	ldrex	r3, [r3]
 800b5cc:	623b      	str	r3, [r7, #32]
   return(result);
 800b5ce:	6a3b      	ldr	r3, [r7, #32]
 800b5d0:	f023 0301 	bic.w	r3, r3, #1
 800b5d4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	3308      	adds	r3, #8
 800b5dc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b5de:	633a      	str	r2, [r7, #48]	; 0x30
 800b5e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b5e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b5e6:	e841 2300 	strex	r3, r2, [r1]
 800b5ea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b5ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d1e5      	bne.n	800b5be <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	2220      	movs	r2, #32
 800b5f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	2200      	movs	r2, #0
 800b5fe:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b604:	2b01      	cmp	r3, #1
 800b606:	d12e      	bne.n	800b666 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	2200      	movs	r2, #0
 800b60c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b614:	693b      	ldr	r3, [r7, #16]
 800b616:	e853 3f00 	ldrex	r3, [r3]
 800b61a:	60fb      	str	r3, [r7, #12]
   return(result);
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	f023 0310 	bic.w	r3, r3, #16
 800b622:	64bb      	str	r3, [r7, #72]	; 0x48
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	461a      	mov	r2, r3
 800b62a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b62c:	61fb      	str	r3, [r7, #28]
 800b62e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b630:	69b9      	ldr	r1, [r7, #24]
 800b632:	69fa      	ldr	r2, [r7, #28]
 800b634:	e841 2300 	strex	r3, r2, [r1]
 800b638:	617b      	str	r3, [r7, #20]
   return(result);
 800b63a:	697b      	ldr	r3, [r7, #20]
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d1e6      	bne.n	800b60e <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	69db      	ldr	r3, [r3, #28]
 800b646:	f003 0310 	and.w	r3, r3, #16
 800b64a:	2b10      	cmp	r3, #16
 800b64c:	d103      	bne.n	800b656 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	2210      	movs	r2, #16
 800b654:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b65c:	4619      	mov	r1, r3
 800b65e:	6878      	ldr	r0, [r7, #4]
 800b660:	f7ff f8d2 	bl	800a808 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b664:	e00d      	b.n	800b682 <UART_RxISR_8BIT+0x15c>
        HAL_UART_RxCpltCallback(huart);
 800b666:	6878      	ldr	r0, [r7, #4]
 800b668:	f7fb f882 	bl	8006770 <HAL_UART_RxCpltCallback>
}
 800b66c:	e009      	b.n	800b682 <UART_RxISR_8BIT+0x15c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	8b1b      	ldrh	r3, [r3, #24]
 800b674:	b29a      	uxth	r2, r3
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	f042 0208 	orr.w	r2, r2, #8
 800b67e:	b292      	uxth	r2, r2
 800b680:	831a      	strh	r2, [r3, #24]
}
 800b682:	bf00      	nop
 800b684:	3758      	adds	r7, #88	; 0x58
 800b686:	46bd      	mov	sp, r7
 800b688:	bd80      	pop	{r7, pc}

0800b68a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800b68a:	b580      	push	{r7, lr}
 800b68c:	b096      	sub	sp, #88	; 0x58
 800b68e:	af00      	add	r7, sp, #0
 800b690:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b698:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b6a2:	2b22      	cmp	r3, #34	; 0x22
 800b6a4:	f040 8095 	bne.w	800b7d2 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800b6ae:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b6b6:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800b6b8:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800b6bc:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800b6c0:	4013      	ands	r3, r2
 800b6c2:	b29a      	uxth	r2, r3
 800b6c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b6c6:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b6cc:	1c9a      	adds	r2, r3, #2
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b6d8:	b29b      	uxth	r3, r3
 800b6da:	3b01      	subs	r3, #1
 800b6dc:	b29a      	uxth	r2, r3
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b6ea:	b29b      	uxth	r3, r3
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d17a      	bne.n	800b7e6 <UART_RxISR_16BIT+0x15c>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b6f8:	e853 3f00 	ldrex	r3, [r3]
 800b6fc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b6fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b700:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b704:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	461a      	mov	r2, r3
 800b70c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b70e:	643b      	str	r3, [r7, #64]	; 0x40
 800b710:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b712:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b714:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b716:	e841 2300 	strex	r3, r2, [r1]
 800b71a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b71c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d1e6      	bne.n	800b6f0 <UART_RxISR_16BIT+0x66>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	3308      	adds	r3, #8
 800b728:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b72a:	6a3b      	ldr	r3, [r7, #32]
 800b72c:	e853 3f00 	ldrex	r3, [r3]
 800b730:	61fb      	str	r3, [r7, #28]
   return(result);
 800b732:	69fb      	ldr	r3, [r7, #28]
 800b734:	f023 0301 	bic.w	r3, r3, #1
 800b738:	64bb      	str	r3, [r7, #72]	; 0x48
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	3308      	adds	r3, #8
 800b740:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b742:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b744:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b746:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b748:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b74a:	e841 2300 	strex	r3, r2, [r1]
 800b74e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b752:	2b00      	cmp	r3, #0
 800b754:	d1e5      	bne.n	800b722 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	2220      	movs	r2, #32
 800b75a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	2200      	movs	r2, #0
 800b762:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b768:	2b01      	cmp	r3, #1
 800b76a:	d12e      	bne.n	800b7ca <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	2200      	movs	r2, #0
 800b770:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	e853 3f00 	ldrex	r3, [r3]
 800b77e:	60bb      	str	r3, [r7, #8]
   return(result);
 800b780:	68bb      	ldr	r3, [r7, #8]
 800b782:	f023 0310 	bic.w	r3, r3, #16
 800b786:	647b      	str	r3, [r7, #68]	; 0x44
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	461a      	mov	r2, r3
 800b78e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b790:	61bb      	str	r3, [r7, #24]
 800b792:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b794:	6979      	ldr	r1, [r7, #20]
 800b796:	69ba      	ldr	r2, [r7, #24]
 800b798:	e841 2300 	strex	r3, r2, [r1]
 800b79c:	613b      	str	r3, [r7, #16]
   return(result);
 800b79e:	693b      	ldr	r3, [r7, #16]
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d1e6      	bne.n	800b772 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	69db      	ldr	r3, [r3, #28]
 800b7aa:	f003 0310 	and.w	r3, r3, #16
 800b7ae:	2b10      	cmp	r3, #16
 800b7b0:	d103      	bne.n	800b7ba <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	2210      	movs	r2, #16
 800b7b8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b7c0:	4619      	mov	r1, r3
 800b7c2:	6878      	ldr	r0, [r7, #4]
 800b7c4:	f7ff f820 	bl	800a808 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b7c8:	e00d      	b.n	800b7e6 <UART_RxISR_16BIT+0x15c>
        HAL_UART_RxCpltCallback(huart);
 800b7ca:	6878      	ldr	r0, [r7, #4]
 800b7cc:	f7fa ffd0 	bl	8006770 <HAL_UART_RxCpltCallback>
}
 800b7d0:	e009      	b.n	800b7e6 <UART_RxISR_16BIT+0x15c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	8b1b      	ldrh	r3, [r3, #24]
 800b7d8:	b29a      	uxth	r2, r3
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	f042 0208 	orr.w	r2, r2, #8
 800b7e2:	b292      	uxth	r2, r2
 800b7e4:	831a      	strh	r2, [r3, #24]
}
 800b7e6:	bf00      	nop
 800b7e8:	3758      	adds	r7, #88	; 0x58
 800b7ea:	46bd      	mov	sp, r7
 800b7ec:	bd80      	pop	{r7, pc}
	...

0800b7f0 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800b7f0:	b580      	push	{r7, lr}
 800b7f2:	b0a6      	sub	sp, #152	; 0x98
 800b7f4:	af00      	add	r7, sp, #0
 800b7f6:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b7fe:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	69db      	ldr	r3, [r3, #28]
 800b808:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	689b      	ldr	r3, [r3, #8]
 800b81c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b826:	2b22      	cmp	r3, #34	; 0x22
 800b828:	f040 814f 	bne.w	800baca <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b832:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b836:	e0f6      	b.n	800ba26 <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800b83e:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800b842:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800b846:	b2d9      	uxtb	r1, r3
 800b848:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800b84c:	b2da      	uxtb	r2, r3
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b852:	400a      	ands	r2, r1
 800b854:	b2d2      	uxtb	r2, r2
 800b856:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b85c:	1c5a      	adds	r2, r3, #1
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b868:	b29b      	uxth	r3, r3
 800b86a:	3b01      	subs	r3, #1
 800b86c:	b29a      	uxth	r2, r3
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	69db      	ldr	r3, [r3, #28]
 800b87a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800b87e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b882:	f003 0307 	and.w	r3, r3, #7
 800b886:	2b00      	cmp	r3, #0
 800b888:	d053      	beq.n	800b932 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b88a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b88e:	f003 0301 	and.w	r3, r3, #1
 800b892:	2b00      	cmp	r3, #0
 800b894:	d011      	beq.n	800b8ba <UART_RxISR_8BIT_FIFOEN+0xca>
 800b896:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b89a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d00b      	beq.n	800b8ba <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	2201      	movs	r2, #1
 800b8a8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b8b0:	f043 0201 	orr.w	r2, r3, #1
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b8ba:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b8be:	f003 0302 	and.w	r3, r3, #2
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d011      	beq.n	800b8ea <UART_RxISR_8BIT_FIFOEN+0xfa>
 800b8c6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b8ca:	f003 0301 	and.w	r3, r3, #1
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d00b      	beq.n	800b8ea <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	2202      	movs	r2, #2
 800b8d8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b8e0:	f043 0204 	orr.w	r2, r3, #4
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b8ea:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b8ee:	f003 0304 	and.w	r3, r3, #4
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d011      	beq.n	800b91a <UART_RxISR_8BIT_FIFOEN+0x12a>
 800b8f6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b8fa:	f003 0301 	and.w	r3, r3, #1
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d00b      	beq.n	800b91a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	2204      	movs	r2, #4
 800b908:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b910:	f043 0202 	orr.w	r2, r3, #2
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b920:	2b00      	cmp	r3, #0
 800b922:	d006      	beq.n	800b932 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b924:	6878      	ldr	r0, [r7, #4]
 800b926:	f7fe ff65 	bl	800a7f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	2200      	movs	r2, #0
 800b92e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b938:	b29b      	uxth	r3, r3
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d173      	bne.n	800ba26 <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b944:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b946:	e853 3f00 	ldrex	r3, [r3]
 800b94a:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800b94c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b94e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b952:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	461a      	mov	r2, r3
 800b95c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b960:	66bb      	str	r3, [r7, #104]	; 0x68
 800b962:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b964:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800b966:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b968:	e841 2300 	strex	r3, r2, [r1]
 800b96c:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800b96e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b970:	2b00      	cmp	r3, #0
 800b972:	d1e4      	bne.n	800b93e <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	3308      	adds	r3, #8
 800b97a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b97c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b97e:	e853 3f00 	ldrex	r3, [r3]
 800b982:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800b984:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b986:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b98a:	f023 0301 	bic.w	r3, r3, #1
 800b98e:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	3308      	adds	r3, #8
 800b996:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800b998:	657a      	str	r2, [r7, #84]	; 0x54
 800b99a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b99c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b99e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b9a0:	e841 2300 	strex	r3, r2, [r1]
 800b9a4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b9a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d1e3      	bne.n	800b974 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	2220      	movs	r2, #32
 800b9b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	2200      	movs	r2, #0
 800b9b8:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b9be:	2b01      	cmp	r3, #1
 800b9c0:	d12e      	bne.n	800ba20 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	2200      	movs	r2, #0
 800b9c6:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9d0:	e853 3f00 	ldrex	r3, [r3]
 800b9d4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b9d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9d8:	f023 0310 	bic.w	r3, r3, #16
 800b9dc:	67bb      	str	r3, [r7, #120]	; 0x78
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	461a      	mov	r2, r3
 800b9e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b9e6:	643b      	str	r3, [r7, #64]	; 0x40
 800b9e8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9ea:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b9ec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b9ee:	e841 2300 	strex	r3, r2, [r1]
 800b9f2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b9f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d1e6      	bne.n	800b9c8 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	69db      	ldr	r3, [r3, #28]
 800ba00:	f003 0310 	and.w	r3, r3, #16
 800ba04:	2b10      	cmp	r3, #16
 800ba06:	d103      	bne.n	800ba10 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	2210      	movs	r2, #16
 800ba0e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ba16:	4619      	mov	r1, r3
 800ba18:	6878      	ldr	r0, [r7, #4]
 800ba1a:	f7fe fef5 	bl	800a808 <HAL_UARTEx_RxEventCallback>
 800ba1e:	e002      	b.n	800ba26 <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800ba20:	6878      	ldr	r0, [r7, #4]
 800ba22:	f7fa fea5 	bl	8006770 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800ba26:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d006      	beq.n	800ba3c <UART_RxISR_8BIT_FIFOEN+0x24c>
 800ba2e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ba32:	f003 0320 	and.w	r3, r3, #32
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	f47f aefe 	bne.w	800b838 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ba42:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800ba46:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d047      	beq.n	800bade <UART_RxISR_8BIT_FIFOEN+0x2ee>
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800ba54:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800ba58:	429a      	cmp	r2, r3
 800ba5a:	d240      	bcs.n	800bade <UART_RxISR_8BIT_FIFOEN+0x2ee>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	3308      	adds	r3, #8
 800ba62:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba64:	6a3b      	ldr	r3, [r7, #32]
 800ba66:	e853 3f00 	ldrex	r3, [r3]
 800ba6a:	61fb      	str	r3, [r7, #28]
   return(result);
 800ba6c:	69fb      	ldr	r3, [r7, #28]
 800ba6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ba72:	673b      	str	r3, [r7, #112]	; 0x70
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	3308      	adds	r3, #8
 800ba7a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800ba7c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ba7e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba80:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ba82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ba84:	e841 2300 	strex	r3, r2, [r1]
 800ba88:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ba8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d1e5      	bne.n	800ba5c <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	4a15      	ldr	r2, [pc, #84]	; (800bae8 <UART_RxISR_8BIT_FIFOEN+0x2f8>)
 800ba94:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	e853 3f00 	ldrex	r3, [r3]
 800baa2:	60bb      	str	r3, [r7, #8]
   return(result);
 800baa4:	68bb      	ldr	r3, [r7, #8]
 800baa6:	f043 0320 	orr.w	r3, r3, #32
 800baaa:	66fb      	str	r3, [r7, #108]	; 0x6c
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	461a      	mov	r2, r3
 800bab2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bab4:	61bb      	str	r3, [r7, #24]
 800bab6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bab8:	6979      	ldr	r1, [r7, #20]
 800baba:	69ba      	ldr	r2, [r7, #24]
 800babc:	e841 2300 	strex	r3, r2, [r1]
 800bac0:	613b      	str	r3, [r7, #16]
   return(result);
 800bac2:	693b      	ldr	r3, [r7, #16]
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d1e6      	bne.n	800ba96 <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800bac8:	e009      	b.n	800bade <UART_RxISR_8BIT_FIFOEN+0x2ee>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	8b1b      	ldrh	r3, [r3, #24]
 800bad0:	b29a      	uxth	r2, r3
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	f042 0208 	orr.w	r2, r2, #8
 800bada:	b292      	uxth	r2, r2
 800badc:	831a      	strh	r2, [r3, #24]
}
 800bade:	bf00      	nop
 800bae0:	3798      	adds	r7, #152	; 0x98
 800bae2:	46bd      	mov	sp, r7
 800bae4:	bd80      	pop	{r7, pc}
 800bae6:	bf00      	nop
 800bae8:	0800b527 	.word	0x0800b527

0800baec <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800baec:	b580      	push	{r7, lr}
 800baee:	b0a8      	sub	sp, #160	; 0xa0
 800baf0:	af00      	add	r7, sp, #0
 800baf2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800bafa:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	69db      	ldr	r3, [r3, #28]
 800bb04:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	689b      	ldr	r3, [r3, #8]
 800bb18:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bb22:	2b22      	cmp	r3, #34	; 0x22
 800bb24:	f040 8153 	bne.w	800bdce <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800bb2e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800bb32:	e0fa      	b.n	800bd2a <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800bb3a:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bb42:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 800bb46:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 800bb4a:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800bb4e:	4013      	ands	r3, r2
 800bb50:	b29a      	uxth	r2, r3
 800bb52:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800bb56:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bb5c:	1c9a      	adds	r2, r3, #2
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bb68:	b29b      	uxth	r3, r3
 800bb6a:	3b01      	subs	r3, #1
 800bb6c:	b29a      	uxth	r2, r3
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	69db      	ldr	r3, [r3, #28]
 800bb7a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800bb7e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800bb82:	f003 0307 	and.w	r3, r3, #7
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d053      	beq.n	800bc32 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800bb8a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800bb8e:	f003 0301 	and.w	r3, r3, #1
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d011      	beq.n	800bbba <UART_RxISR_16BIT_FIFOEN+0xce>
 800bb96:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800bb9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d00b      	beq.n	800bbba <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	2201      	movs	r2, #1
 800bba8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bbb0:	f043 0201 	orr.w	r2, r3, #1
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bbba:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800bbbe:	f003 0302 	and.w	r3, r3, #2
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d011      	beq.n	800bbea <UART_RxISR_16BIT_FIFOEN+0xfe>
 800bbc6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bbca:	f003 0301 	and.w	r3, r3, #1
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d00b      	beq.n	800bbea <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	2202      	movs	r2, #2
 800bbd8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bbe0:	f043 0204 	orr.w	r2, r3, #4
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bbea:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800bbee:	f003 0304 	and.w	r3, r3, #4
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d011      	beq.n	800bc1a <UART_RxISR_16BIT_FIFOEN+0x12e>
 800bbf6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bbfa:	f003 0301 	and.w	r3, r3, #1
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d00b      	beq.n	800bc1a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	2204      	movs	r2, #4
 800bc08:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bc10:	f043 0202 	orr.w	r2, r3, #2
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d006      	beq.n	800bc32 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800bc24:	6878      	ldr	r0, [r7, #4]
 800bc26:	f7fe fde5 	bl	800a7f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	2200      	movs	r2, #0
 800bc2e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bc38:	b29b      	uxth	r3, r3
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d175      	bne.n	800bd2a <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc44:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bc46:	e853 3f00 	ldrex	r3, [r3]
 800bc4a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800bc4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bc4e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bc52:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	461a      	mov	r2, r3
 800bc5c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800bc60:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bc62:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc64:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800bc66:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800bc68:	e841 2300 	strex	r3, r2, [r1]
 800bc6c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800bc6e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d1e4      	bne.n	800bc3e <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	3308      	adds	r3, #8
 800bc7a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc7e:	e853 3f00 	ldrex	r3, [r3]
 800bc82:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800bc84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bc86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bc8a:	f023 0301 	bic.w	r3, r3, #1
 800bc8e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	3308      	adds	r3, #8
 800bc98:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800bc9c:	65ba      	str	r2, [r7, #88]	; 0x58
 800bc9e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bca0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800bca2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bca4:	e841 2300 	strex	r3, r2, [r1]
 800bca8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800bcaa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d1e1      	bne.n	800bc74 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	2220      	movs	r2, #32
 800bcb4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	2200      	movs	r2, #0
 800bcbc:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bcc2:	2b01      	cmp	r3, #1
 800bcc4:	d12e      	bne.n	800bd24 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	2200      	movs	r2, #0
 800bcca:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcd4:	e853 3f00 	ldrex	r3, [r3]
 800bcd8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800bcda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bcdc:	f023 0310 	bic.w	r3, r3, #16
 800bce0:	67fb      	str	r3, [r7, #124]	; 0x7c
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	461a      	mov	r2, r3
 800bce8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800bcea:	647b      	str	r3, [r7, #68]	; 0x44
 800bcec:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcee:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bcf0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bcf2:	e841 2300 	strex	r3, r2, [r1]
 800bcf6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800bcf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d1e6      	bne.n	800bccc <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	69db      	ldr	r3, [r3, #28]
 800bd04:	f003 0310 	and.w	r3, r3, #16
 800bd08:	2b10      	cmp	r3, #16
 800bd0a:	d103      	bne.n	800bd14 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	2210      	movs	r2, #16
 800bd12:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800bd1a:	4619      	mov	r1, r3
 800bd1c:	6878      	ldr	r0, [r7, #4]
 800bd1e:	f7fe fd73 	bl	800a808 <HAL_UARTEx_RxEventCallback>
 800bd22:	e002      	b.n	800bd2a <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800bd24:	6878      	ldr	r0, [r7, #4]
 800bd26:	f7fa fd23 	bl	8006770 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800bd2a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d006      	beq.n	800bd40 <UART_RxISR_16BIT_FIFOEN+0x254>
 800bd32:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800bd36:	f003 0320 	and.w	r3, r3, #32
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	f47f aefa 	bne.w	800bb34 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bd46:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800bd4a:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d047      	beq.n	800bde2 <UART_RxISR_16BIT_FIFOEN+0x2f6>
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800bd58:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 800bd5c:	429a      	cmp	r2, r3
 800bd5e:	d240      	bcs.n	800bde2 <UART_RxISR_16BIT_FIFOEN+0x2f6>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	3308      	adds	r3, #8
 800bd66:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd6a:	e853 3f00 	ldrex	r3, [r3]
 800bd6e:	623b      	str	r3, [r7, #32]
   return(result);
 800bd70:	6a3b      	ldr	r3, [r7, #32]
 800bd72:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bd76:	677b      	str	r3, [r7, #116]	; 0x74
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	3308      	adds	r3, #8
 800bd7e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800bd80:	633a      	str	r2, [r7, #48]	; 0x30
 800bd82:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd84:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bd86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bd88:	e841 2300 	strex	r3, r2, [r1]
 800bd8c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bd8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d1e5      	bne.n	800bd60 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	4a15      	ldr	r2, [pc, #84]	; (800bdec <UART_RxISR_16BIT_FIFOEN+0x300>)
 800bd98:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bda0:	693b      	ldr	r3, [r7, #16]
 800bda2:	e853 3f00 	ldrex	r3, [r3]
 800bda6:	60fb      	str	r3, [r7, #12]
   return(result);
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	f043 0320 	orr.w	r3, r3, #32
 800bdae:	673b      	str	r3, [r7, #112]	; 0x70
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	461a      	mov	r2, r3
 800bdb6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bdb8:	61fb      	str	r3, [r7, #28]
 800bdba:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdbc:	69b9      	ldr	r1, [r7, #24]
 800bdbe:	69fa      	ldr	r2, [r7, #28]
 800bdc0:	e841 2300 	strex	r3, r2, [r1]
 800bdc4:	617b      	str	r3, [r7, #20]
   return(result);
 800bdc6:	697b      	ldr	r3, [r7, #20]
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d1e6      	bne.n	800bd9a <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800bdcc:	e009      	b.n	800bde2 <UART_RxISR_16BIT_FIFOEN+0x2f6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	8b1b      	ldrh	r3, [r3, #24]
 800bdd4:	b29a      	uxth	r2, r3
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	f042 0208 	orr.w	r2, r2, #8
 800bdde:	b292      	uxth	r2, r2
 800bde0:	831a      	strh	r2, [r3, #24]
}
 800bde2:	bf00      	nop
 800bde4:	37a0      	adds	r7, #160	; 0xa0
 800bde6:	46bd      	mov	sp, r7
 800bde8:	bd80      	pop	{r7, pc}
 800bdea:	bf00      	nop
 800bdec:	0800b68b 	.word	0x0800b68b

0800bdf0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800bdf0:	b480      	push	{r7}
 800bdf2:	b083      	sub	sp, #12
 800bdf4:	af00      	add	r7, sp, #0
 800bdf6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800bdf8:	bf00      	nop
 800bdfa:	370c      	adds	r7, #12
 800bdfc:	46bd      	mov	sp, r7
 800bdfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be02:	4770      	bx	lr

0800be04 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800be04:	b480      	push	{r7}
 800be06:	b083      	sub	sp, #12
 800be08:	af00      	add	r7, sp, #0
 800be0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800be0c:	bf00      	nop
 800be0e:	370c      	adds	r7, #12
 800be10:	46bd      	mov	sp, r7
 800be12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be16:	4770      	bx	lr

0800be18 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800be18:	b480      	push	{r7}
 800be1a:	b083      	sub	sp, #12
 800be1c:	af00      	add	r7, sp, #0
 800be1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800be20:	bf00      	nop
 800be22:	370c      	adds	r7, #12
 800be24:	46bd      	mov	sp, r7
 800be26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be2a:	4770      	bx	lr

0800be2c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800be2c:	b480      	push	{r7}
 800be2e:	b085      	sub	sp, #20
 800be30:	af00      	add	r7, sp, #0
 800be32:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800be3a:	2b01      	cmp	r3, #1
 800be3c:	d101      	bne.n	800be42 <HAL_UARTEx_DisableFifoMode+0x16>
 800be3e:	2302      	movs	r3, #2
 800be40:	e027      	b.n	800be92 <HAL_UARTEx_DisableFifoMode+0x66>
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	2201      	movs	r2, #1
 800be46:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	2224      	movs	r2, #36	; 0x24
 800be4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	681a      	ldr	r2, [r3, #0]
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	f022 0201 	bic.w	r2, r2, #1
 800be68:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800be70:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	2200      	movs	r2, #0
 800be76:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	68fa      	ldr	r2, [r7, #12]
 800be7e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	2220      	movs	r2, #32
 800be84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	2200      	movs	r2, #0
 800be8c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800be90:	2300      	movs	r3, #0
}
 800be92:	4618      	mov	r0, r3
 800be94:	3714      	adds	r7, #20
 800be96:	46bd      	mov	sp, r7
 800be98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be9c:	4770      	bx	lr

0800be9e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800be9e:	b580      	push	{r7, lr}
 800bea0:	b084      	sub	sp, #16
 800bea2:	af00      	add	r7, sp, #0
 800bea4:	6078      	str	r0, [r7, #4]
 800bea6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800beae:	2b01      	cmp	r3, #1
 800beb0:	d101      	bne.n	800beb6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800beb2:	2302      	movs	r3, #2
 800beb4:	e02d      	b.n	800bf12 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	2201      	movs	r2, #1
 800beba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	2224      	movs	r2, #36	; 0x24
 800bec2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	681a      	ldr	r2, [r3, #0]
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	f022 0201 	bic.w	r2, r2, #1
 800bedc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	689b      	ldr	r3, [r3, #8]
 800bee4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	683a      	ldr	r2, [r7, #0]
 800beee:	430a      	orrs	r2, r1
 800bef0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bef2:	6878      	ldr	r0, [r7, #4]
 800bef4:	f000 f850 	bl	800bf98 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	68fa      	ldr	r2, [r7, #12]
 800befe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	2220      	movs	r2, #32
 800bf04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	2200      	movs	r2, #0
 800bf0c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800bf10:	2300      	movs	r3, #0
}
 800bf12:	4618      	mov	r0, r3
 800bf14:	3710      	adds	r7, #16
 800bf16:	46bd      	mov	sp, r7
 800bf18:	bd80      	pop	{r7, pc}

0800bf1a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bf1a:	b580      	push	{r7, lr}
 800bf1c:	b084      	sub	sp, #16
 800bf1e:	af00      	add	r7, sp, #0
 800bf20:	6078      	str	r0, [r7, #4]
 800bf22:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bf2a:	2b01      	cmp	r3, #1
 800bf2c:	d101      	bne.n	800bf32 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800bf2e:	2302      	movs	r3, #2
 800bf30:	e02d      	b.n	800bf8e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	2201      	movs	r2, #1
 800bf36:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	2224      	movs	r2, #36	; 0x24
 800bf3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	681a      	ldr	r2, [r3, #0]
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	f022 0201 	bic.w	r2, r2, #1
 800bf58:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	689b      	ldr	r3, [r3, #8]
 800bf60:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	683a      	ldr	r2, [r7, #0]
 800bf6a:	430a      	orrs	r2, r1
 800bf6c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bf6e:	6878      	ldr	r0, [r7, #4]
 800bf70:	f000 f812 	bl	800bf98 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	68fa      	ldr	r2, [r7, #12]
 800bf7a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	2220      	movs	r2, #32
 800bf80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	2200      	movs	r2, #0
 800bf88:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800bf8c:	2300      	movs	r3, #0
}
 800bf8e:	4618      	mov	r0, r3
 800bf90:	3710      	adds	r7, #16
 800bf92:	46bd      	mov	sp, r7
 800bf94:	bd80      	pop	{r7, pc}
	...

0800bf98 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800bf98:	b480      	push	{r7}
 800bf9a:	b085      	sub	sp, #20
 800bf9c:	af00      	add	r7, sp, #0
 800bf9e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d108      	bne.n	800bfba <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	2201      	movs	r2, #1
 800bfac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	2201      	movs	r2, #1
 800bfb4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800bfb8:	e031      	b.n	800c01e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800bfba:	2308      	movs	r3, #8
 800bfbc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800bfbe:	2308      	movs	r3, #8
 800bfc0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	689b      	ldr	r3, [r3, #8]
 800bfc8:	0e5b      	lsrs	r3, r3, #25
 800bfca:	b2db      	uxtb	r3, r3
 800bfcc:	f003 0307 	and.w	r3, r3, #7
 800bfd0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	689b      	ldr	r3, [r3, #8]
 800bfd8:	0f5b      	lsrs	r3, r3, #29
 800bfda:	b2db      	uxtb	r3, r3
 800bfdc:	f003 0307 	and.w	r3, r3, #7
 800bfe0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bfe2:	7bbb      	ldrb	r3, [r7, #14]
 800bfe4:	7b3a      	ldrb	r2, [r7, #12]
 800bfe6:	4911      	ldr	r1, [pc, #68]	; (800c02c <UARTEx_SetNbDataToProcess+0x94>)
 800bfe8:	5c8a      	ldrb	r2, [r1, r2]
 800bfea:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800bfee:	7b3a      	ldrb	r2, [r7, #12]
 800bff0:	490f      	ldr	r1, [pc, #60]	; (800c030 <UARTEx_SetNbDataToProcess+0x98>)
 800bff2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bff4:	fb93 f3f2 	sdiv	r3, r3, r2
 800bff8:	b29a      	uxth	r2, r3
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c000:	7bfb      	ldrb	r3, [r7, #15]
 800c002:	7b7a      	ldrb	r2, [r7, #13]
 800c004:	4909      	ldr	r1, [pc, #36]	; (800c02c <UARTEx_SetNbDataToProcess+0x94>)
 800c006:	5c8a      	ldrb	r2, [r1, r2]
 800c008:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c00c:	7b7a      	ldrb	r2, [r7, #13]
 800c00e:	4908      	ldr	r1, [pc, #32]	; (800c030 <UARTEx_SetNbDataToProcess+0x98>)
 800c010:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c012:	fb93 f3f2 	sdiv	r3, r3, r2
 800c016:	b29a      	uxth	r2, r3
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800c01e:	bf00      	nop
 800c020:	3714      	adds	r7, #20
 800c022:	46bd      	mov	sp, r7
 800c024:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c028:	4770      	bx	lr
 800c02a:	bf00      	nop
 800c02c:	0801483c 	.word	0x0801483c
 800c030:	08014844 	.word	0x08014844

0800c034 <__NVIC_SetPriority>:
{
 800c034:	b480      	push	{r7}
 800c036:	b083      	sub	sp, #12
 800c038:	af00      	add	r7, sp, #0
 800c03a:	4603      	mov	r3, r0
 800c03c:	6039      	str	r1, [r7, #0]
 800c03e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c040:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c044:	2b00      	cmp	r3, #0
 800c046:	db0a      	blt.n	800c05e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c048:	683b      	ldr	r3, [r7, #0]
 800c04a:	b2da      	uxtb	r2, r3
 800c04c:	490c      	ldr	r1, [pc, #48]	; (800c080 <__NVIC_SetPriority+0x4c>)
 800c04e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c052:	0112      	lsls	r2, r2, #4
 800c054:	b2d2      	uxtb	r2, r2
 800c056:	440b      	add	r3, r1
 800c058:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800c05c:	e00a      	b.n	800c074 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c05e:	683b      	ldr	r3, [r7, #0]
 800c060:	b2da      	uxtb	r2, r3
 800c062:	4908      	ldr	r1, [pc, #32]	; (800c084 <__NVIC_SetPriority+0x50>)
 800c064:	79fb      	ldrb	r3, [r7, #7]
 800c066:	f003 030f 	and.w	r3, r3, #15
 800c06a:	3b04      	subs	r3, #4
 800c06c:	0112      	lsls	r2, r2, #4
 800c06e:	b2d2      	uxtb	r2, r2
 800c070:	440b      	add	r3, r1
 800c072:	761a      	strb	r2, [r3, #24]
}
 800c074:	bf00      	nop
 800c076:	370c      	adds	r7, #12
 800c078:	46bd      	mov	sp, r7
 800c07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c07e:	4770      	bx	lr
 800c080:	e000e100 	.word	0xe000e100
 800c084:	e000ed00 	.word	0xe000ed00

0800c088 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800c088:	b580      	push	{r7, lr}
 800c08a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800c08c:	4b05      	ldr	r3, [pc, #20]	; (800c0a4 <SysTick_Handler+0x1c>)
 800c08e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800c090:	f002 fd56 	bl	800eb40 <xTaskGetSchedulerState>
 800c094:	4603      	mov	r3, r0
 800c096:	2b01      	cmp	r3, #1
 800c098:	d001      	beq.n	800c09e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800c09a:	f003 fc75 	bl	800f988 <xPortSysTickHandler>
  }
}
 800c09e:	bf00      	nop
 800c0a0:	bd80      	pop	{r7, pc}
 800c0a2:	bf00      	nop
 800c0a4:	e000e010 	.word	0xe000e010

0800c0a8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800c0a8:	b580      	push	{r7, lr}
 800c0aa:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800c0ac:	2100      	movs	r1, #0
 800c0ae:	f06f 0004 	mvn.w	r0, #4
 800c0b2:	f7ff ffbf 	bl	800c034 <__NVIC_SetPriority>
#endif
}
 800c0b6:	bf00      	nop
 800c0b8:	bd80      	pop	{r7, pc}
	...

0800c0bc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800c0bc:	b480      	push	{r7}
 800c0be:	b083      	sub	sp, #12
 800c0c0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c0c2:	f3ef 8305 	mrs	r3, IPSR
 800c0c6:	603b      	str	r3, [r7, #0]
  return(result);
 800c0c8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d003      	beq.n	800c0d6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800c0ce:	f06f 0305 	mvn.w	r3, #5
 800c0d2:	607b      	str	r3, [r7, #4]
 800c0d4:	e00c      	b.n	800c0f0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800c0d6:	4b0a      	ldr	r3, [pc, #40]	; (800c100 <osKernelInitialize+0x44>)
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d105      	bne.n	800c0ea <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800c0de:	4b08      	ldr	r3, [pc, #32]	; (800c100 <osKernelInitialize+0x44>)
 800c0e0:	2201      	movs	r2, #1
 800c0e2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800c0e4:	2300      	movs	r3, #0
 800c0e6:	607b      	str	r3, [r7, #4]
 800c0e8:	e002      	b.n	800c0f0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800c0ea:	f04f 33ff 	mov.w	r3, #4294967295
 800c0ee:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c0f0:	687b      	ldr	r3, [r7, #4]
}
 800c0f2:	4618      	mov	r0, r3
 800c0f4:	370c      	adds	r7, #12
 800c0f6:	46bd      	mov	sp, r7
 800c0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0fc:	4770      	bx	lr
 800c0fe:	bf00      	nop
 800c100:	200005ec 	.word	0x200005ec

0800c104 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800c104:	b580      	push	{r7, lr}
 800c106:	b082      	sub	sp, #8
 800c108:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c10a:	f3ef 8305 	mrs	r3, IPSR
 800c10e:	603b      	str	r3, [r7, #0]
  return(result);
 800c110:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c112:	2b00      	cmp	r3, #0
 800c114:	d003      	beq.n	800c11e <osKernelStart+0x1a>
    stat = osErrorISR;
 800c116:	f06f 0305 	mvn.w	r3, #5
 800c11a:	607b      	str	r3, [r7, #4]
 800c11c:	e010      	b.n	800c140 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800c11e:	4b0b      	ldr	r3, [pc, #44]	; (800c14c <osKernelStart+0x48>)
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	2b01      	cmp	r3, #1
 800c124:	d109      	bne.n	800c13a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800c126:	f7ff ffbf 	bl	800c0a8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800c12a:	4b08      	ldr	r3, [pc, #32]	; (800c14c <osKernelStart+0x48>)
 800c12c:	2202      	movs	r2, #2
 800c12e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800c130:	f002 f810 	bl	800e154 <vTaskStartScheduler>
      stat = osOK;
 800c134:	2300      	movs	r3, #0
 800c136:	607b      	str	r3, [r7, #4]
 800c138:	e002      	b.n	800c140 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800c13a:	f04f 33ff 	mov.w	r3, #4294967295
 800c13e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c140:	687b      	ldr	r3, [r7, #4]
}
 800c142:	4618      	mov	r0, r3
 800c144:	3708      	adds	r7, #8
 800c146:	46bd      	mov	sp, r7
 800c148:	bd80      	pop	{r7, pc}
 800c14a:	bf00      	nop
 800c14c:	200005ec 	.word	0x200005ec

0800c150 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800c150:	b580      	push	{r7, lr}
 800c152:	b08e      	sub	sp, #56	; 0x38
 800c154:	af04      	add	r7, sp, #16
 800c156:	60f8      	str	r0, [r7, #12]
 800c158:	60b9      	str	r1, [r7, #8]
 800c15a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800c15c:	2300      	movs	r3, #0
 800c15e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c160:	f3ef 8305 	mrs	r3, IPSR
 800c164:	617b      	str	r3, [r7, #20]
  return(result);
 800c166:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d17e      	bne.n	800c26a <osThreadNew+0x11a>
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d07b      	beq.n	800c26a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800c172:	2380      	movs	r3, #128	; 0x80
 800c174:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800c176:	2318      	movs	r3, #24
 800c178:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800c17a:	2300      	movs	r3, #0
 800c17c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800c17e:	f04f 33ff 	mov.w	r3, #4294967295
 800c182:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	2b00      	cmp	r3, #0
 800c188:	d045      	beq.n	800c216 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d002      	beq.n	800c198 <osThreadNew+0x48>
        name = attr->name;
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	699b      	ldr	r3, [r3, #24]
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d002      	beq.n	800c1a6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	699b      	ldr	r3, [r3, #24]
 800c1a4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800c1a6:	69fb      	ldr	r3, [r7, #28]
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d008      	beq.n	800c1be <osThreadNew+0x6e>
 800c1ac:	69fb      	ldr	r3, [r7, #28]
 800c1ae:	2b38      	cmp	r3, #56	; 0x38
 800c1b0:	d805      	bhi.n	800c1be <osThreadNew+0x6e>
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	685b      	ldr	r3, [r3, #4]
 800c1b6:	f003 0301 	and.w	r3, r3, #1
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d001      	beq.n	800c1c2 <osThreadNew+0x72>
        return (NULL);
 800c1be:	2300      	movs	r3, #0
 800c1c0:	e054      	b.n	800c26c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	695b      	ldr	r3, [r3, #20]
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d003      	beq.n	800c1d2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	695b      	ldr	r3, [r3, #20]
 800c1ce:	089b      	lsrs	r3, r3, #2
 800c1d0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	689b      	ldr	r3, [r3, #8]
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d00e      	beq.n	800c1f8 <osThreadNew+0xa8>
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	68db      	ldr	r3, [r3, #12]
 800c1de:	2b5b      	cmp	r3, #91	; 0x5b
 800c1e0:	d90a      	bls.n	800c1f8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d006      	beq.n	800c1f8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	695b      	ldr	r3, [r3, #20]
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d002      	beq.n	800c1f8 <osThreadNew+0xa8>
        mem = 1;
 800c1f2:	2301      	movs	r3, #1
 800c1f4:	61bb      	str	r3, [r7, #24]
 800c1f6:	e010      	b.n	800c21a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	689b      	ldr	r3, [r3, #8]
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d10c      	bne.n	800c21a <osThreadNew+0xca>
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	68db      	ldr	r3, [r3, #12]
 800c204:	2b00      	cmp	r3, #0
 800c206:	d108      	bne.n	800c21a <osThreadNew+0xca>
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	691b      	ldr	r3, [r3, #16]
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d104      	bne.n	800c21a <osThreadNew+0xca>
          mem = 0;
 800c210:	2300      	movs	r3, #0
 800c212:	61bb      	str	r3, [r7, #24]
 800c214:	e001      	b.n	800c21a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800c216:	2300      	movs	r3, #0
 800c218:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800c21a:	69bb      	ldr	r3, [r7, #24]
 800c21c:	2b01      	cmp	r3, #1
 800c21e:	d110      	bne.n	800c242 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800c224:	687a      	ldr	r2, [r7, #4]
 800c226:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c228:	9202      	str	r2, [sp, #8]
 800c22a:	9301      	str	r3, [sp, #4]
 800c22c:	69fb      	ldr	r3, [r7, #28]
 800c22e:	9300      	str	r3, [sp, #0]
 800c230:	68bb      	ldr	r3, [r7, #8]
 800c232:	6a3a      	ldr	r2, [r7, #32]
 800c234:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c236:	68f8      	ldr	r0, [r7, #12]
 800c238:	f001 fdb6 	bl	800dda8 <xTaskCreateStatic>
 800c23c:	4603      	mov	r3, r0
 800c23e:	613b      	str	r3, [r7, #16]
 800c240:	e013      	b.n	800c26a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800c242:	69bb      	ldr	r3, [r7, #24]
 800c244:	2b00      	cmp	r3, #0
 800c246:	d110      	bne.n	800c26a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800c248:	6a3b      	ldr	r3, [r7, #32]
 800c24a:	b29a      	uxth	r2, r3
 800c24c:	f107 0310 	add.w	r3, r7, #16
 800c250:	9301      	str	r3, [sp, #4]
 800c252:	69fb      	ldr	r3, [r7, #28]
 800c254:	9300      	str	r3, [sp, #0]
 800c256:	68bb      	ldr	r3, [r7, #8]
 800c258:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c25a:	68f8      	ldr	r0, [r7, #12]
 800c25c:	f001 fe01 	bl	800de62 <xTaskCreate>
 800c260:	4603      	mov	r3, r0
 800c262:	2b01      	cmp	r3, #1
 800c264:	d001      	beq.n	800c26a <osThreadNew+0x11a>
            hTask = NULL;
 800c266:	2300      	movs	r3, #0
 800c268:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800c26a:	693b      	ldr	r3, [r7, #16]
}
 800c26c:	4618      	mov	r0, r3
 800c26e:	3728      	adds	r7, #40	; 0x28
 800c270:	46bd      	mov	sp, r7
 800c272:	bd80      	pop	{r7, pc}

0800c274 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800c274:	b580      	push	{r7, lr}
 800c276:	b084      	sub	sp, #16
 800c278:	af00      	add	r7, sp, #0
 800c27a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c27c:	f3ef 8305 	mrs	r3, IPSR
 800c280:	60bb      	str	r3, [r7, #8]
  return(result);
 800c282:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c284:	2b00      	cmp	r3, #0
 800c286:	d003      	beq.n	800c290 <osDelay+0x1c>
    stat = osErrorISR;
 800c288:	f06f 0305 	mvn.w	r3, #5
 800c28c:	60fb      	str	r3, [r7, #12]
 800c28e:	e007      	b.n	800c2a0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800c290:	2300      	movs	r3, #0
 800c292:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	2b00      	cmp	r3, #0
 800c298:	d002      	beq.n	800c2a0 <osDelay+0x2c>
      vTaskDelay(ticks);
 800c29a:	6878      	ldr	r0, [r7, #4]
 800c29c:	f001 ff26 	bl	800e0ec <vTaskDelay>
    }
  }

  return (stat);
 800c2a0:	68fb      	ldr	r3, [r7, #12]
}
 800c2a2:	4618      	mov	r0, r3
 800c2a4:	3710      	adds	r7, #16
 800c2a6:	46bd      	mov	sp, r7
 800c2a8:	bd80      	pop	{r7, pc}

0800c2aa <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 800c2aa:	b580      	push	{r7, lr}
 800c2ac:	b086      	sub	sp, #24
 800c2ae:	af00      	add	r7, sp, #0
 800c2b0:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 800c2b2:	2300      	movs	r3, #0
 800c2b4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c2b6:	f3ef 8305 	mrs	r3, IPSR
 800c2ba:	60fb      	str	r3, [r7, #12]
  return(result);
 800c2bc:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d12d      	bne.n	800c31e <osEventFlagsNew+0x74>
    mem = -1;
 800c2c2:	f04f 33ff 	mov.w	r3, #4294967295
 800c2c6:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d015      	beq.n	800c2fa <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	689b      	ldr	r3, [r3, #8]
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d006      	beq.n	800c2e4 <osEventFlagsNew+0x3a>
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	68db      	ldr	r3, [r3, #12]
 800c2da:	2b1f      	cmp	r3, #31
 800c2dc:	d902      	bls.n	800c2e4 <osEventFlagsNew+0x3a>
        mem = 1;
 800c2de:	2301      	movs	r3, #1
 800c2e0:	613b      	str	r3, [r7, #16]
 800c2e2:	e00c      	b.n	800c2fe <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	689b      	ldr	r3, [r3, #8]
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d108      	bne.n	800c2fe <osEventFlagsNew+0x54>
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	68db      	ldr	r3, [r3, #12]
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d104      	bne.n	800c2fe <osEventFlagsNew+0x54>
          mem = 0;
 800c2f4:	2300      	movs	r3, #0
 800c2f6:	613b      	str	r3, [r7, #16]
 800c2f8:	e001      	b.n	800c2fe <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 800c2fa:	2300      	movs	r3, #0
 800c2fc:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 800c2fe:	693b      	ldr	r3, [r7, #16]
 800c300:	2b01      	cmp	r3, #1
 800c302:	d106      	bne.n	800c312 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	689b      	ldr	r3, [r3, #8]
 800c308:	4618      	mov	r0, r3
 800c30a:	f000 fb2b 	bl	800c964 <xEventGroupCreateStatic>
 800c30e:	6178      	str	r0, [r7, #20]
 800c310:	e005      	b.n	800c31e <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 800c312:	693b      	ldr	r3, [r7, #16]
 800c314:	2b00      	cmp	r3, #0
 800c316:	d102      	bne.n	800c31e <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 800c318:	f000 fb5b 	bl	800c9d2 <xEventGroupCreate>
 800c31c:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 800c31e:	697b      	ldr	r3, [r7, #20]
}
 800c320:	4618      	mov	r0, r3
 800c322:	3718      	adds	r7, #24
 800c324:	46bd      	mov	sp, r7
 800c326:	bd80      	pop	{r7, pc}

0800c328 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 800c328:	b580      	push	{r7, lr}
 800c32a:	b086      	sub	sp, #24
 800c32c:	af00      	add	r7, sp, #0
 800c32e:	6078      	str	r0, [r7, #4]
 800c330:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800c336:	693b      	ldr	r3, [r7, #16]
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d004      	beq.n	800c346 <osEventFlagsSet+0x1e>
 800c33c:	683b      	ldr	r3, [r7, #0]
 800c33e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800c342:	2b00      	cmp	r3, #0
 800c344:	d003      	beq.n	800c34e <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 800c346:	f06f 0303 	mvn.w	r3, #3
 800c34a:	617b      	str	r3, [r7, #20]
 800c34c:	e028      	b.n	800c3a0 <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c34e:	f3ef 8305 	mrs	r3, IPSR
 800c352:	60fb      	str	r3, [r7, #12]
  return(result);
 800c354:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800c356:	2b00      	cmp	r3, #0
 800c358:	d01d      	beq.n	800c396 <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 800c35a:	2300      	movs	r3, #0
 800c35c:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 800c35e:	f107 0308 	add.w	r3, r7, #8
 800c362:	461a      	mov	r2, r3
 800c364:	6839      	ldr	r1, [r7, #0]
 800c366:	6938      	ldr	r0, [r7, #16]
 800c368:	f000 fcd6 	bl	800cd18 <xEventGroupSetBitsFromISR>
 800c36c:	4603      	mov	r3, r0
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d103      	bne.n	800c37a <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 800c372:	f06f 0302 	mvn.w	r3, #2
 800c376:	617b      	str	r3, [r7, #20]
 800c378:	e012      	b.n	800c3a0 <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 800c37a:	683b      	ldr	r3, [r7, #0]
 800c37c:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 800c37e:	68bb      	ldr	r3, [r7, #8]
 800c380:	2b00      	cmp	r3, #0
 800c382:	d00d      	beq.n	800c3a0 <osEventFlagsSet+0x78>
 800c384:	4b09      	ldr	r3, [pc, #36]	; (800c3ac <osEventFlagsSet+0x84>)
 800c386:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c38a:	601a      	str	r2, [r3, #0]
 800c38c:	f3bf 8f4f 	dsb	sy
 800c390:	f3bf 8f6f 	isb	sy
 800c394:	e004      	b.n	800c3a0 <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 800c396:	6839      	ldr	r1, [r7, #0]
 800c398:	6938      	ldr	r0, [r7, #16]
 800c39a:	f000 fc03 	bl	800cba4 <xEventGroupSetBits>
 800c39e:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 800c3a0:	697b      	ldr	r3, [r7, #20]
}
 800c3a2:	4618      	mov	r0, r3
 800c3a4:	3718      	adds	r7, #24
 800c3a6:	46bd      	mov	sp, r7
 800c3a8:	bd80      	pop	{r7, pc}
 800c3aa:	bf00      	nop
 800c3ac:	e000ed04 	.word	0xe000ed04

0800c3b0 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 800c3b0:	b580      	push	{r7, lr}
 800c3b2:	b08c      	sub	sp, #48	; 0x30
 800c3b4:	af02      	add	r7, sp, #8
 800c3b6:	60f8      	str	r0, [r7, #12]
 800c3b8:	60b9      	str	r1, [r7, #8]
 800c3ba:	607a      	str	r2, [r7, #4]
 800c3bc:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800c3c2:	69bb      	ldr	r3, [r7, #24]
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d004      	beq.n	800c3d2 <osEventFlagsWait+0x22>
 800c3c8:	68bb      	ldr	r3, [r7, #8]
 800c3ca:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d003      	beq.n	800c3da <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 800c3d2:	f06f 0303 	mvn.w	r3, #3
 800c3d6:	61fb      	str	r3, [r7, #28]
 800c3d8:	e04b      	b.n	800c472 <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c3da:	f3ef 8305 	mrs	r3, IPSR
 800c3de:	617b      	str	r3, [r7, #20]
  return(result);
 800c3e0:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d003      	beq.n	800c3ee <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 800c3e6:	f06f 0305 	mvn.w	r3, #5
 800c3ea:	61fb      	str	r3, [r7, #28]
 800c3ec:	e041      	b.n	800c472 <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	f003 0301 	and.w	r3, r3, #1
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d002      	beq.n	800c3fe <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 800c3f8:	2301      	movs	r3, #1
 800c3fa:	627b      	str	r3, [r7, #36]	; 0x24
 800c3fc:	e001      	b.n	800c402 <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 800c3fe:	2300      	movs	r3, #0
 800c400:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	f003 0302 	and.w	r3, r3, #2
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d002      	beq.n	800c412 <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 800c40c:	2300      	movs	r3, #0
 800c40e:	623b      	str	r3, [r7, #32]
 800c410:	e001      	b.n	800c416 <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 800c412:	2301      	movs	r3, #1
 800c414:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 800c416:	683b      	ldr	r3, [r7, #0]
 800c418:	9300      	str	r3, [sp, #0]
 800c41a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c41c:	6a3a      	ldr	r2, [r7, #32]
 800c41e:	68b9      	ldr	r1, [r7, #8]
 800c420:	69b8      	ldr	r0, [r7, #24]
 800c422:	f000 faf1 	bl	800ca08 <xEventGroupWaitBits>
 800c426:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	f003 0301 	and.w	r3, r3, #1
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d010      	beq.n	800c454 <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 800c432:	68ba      	ldr	r2, [r7, #8]
 800c434:	69fb      	ldr	r3, [r7, #28]
 800c436:	4013      	ands	r3, r2
 800c438:	68ba      	ldr	r2, [r7, #8]
 800c43a:	429a      	cmp	r2, r3
 800c43c:	d019      	beq.n	800c472 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 800c43e:	683b      	ldr	r3, [r7, #0]
 800c440:	2b00      	cmp	r3, #0
 800c442:	d003      	beq.n	800c44c <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 800c444:	f06f 0301 	mvn.w	r3, #1
 800c448:	61fb      	str	r3, [r7, #28]
 800c44a:	e012      	b.n	800c472 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 800c44c:	f06f 0302 	mvn.w	r3, #2
 800c450:	61fb      	str	r3, [r7, #28]
 800c452:	e00e      	b.n	800c472 <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 800c454:	68ba      	ldr	r2, [r7, #8]
 800c456:	69fb      	ldr	r3, [r7, #28]
 800c458:	4013      	ands	r3, r2
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d109      	bne.n	800c472 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 800c45e:	683b      	ldr	r3, [r7, #0]
 800c460:	2b00      	cmp	r3, #0
 800c462:	d003      	beq.n	800c46c <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 800c464:	f06f 0301 	mvn.w	r3, #1
 800c468:	61fb      	str	r3, [r7, #28]
 800c46a:	e002      	b.n	800c472 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 800c46c:	f06f 0302 	mvn.w	r3, #2
 800c470:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 800c472:	69fb      	ldr	r3, [r7, #28]
}
 800c474:	4618      	mov	r0, r3
 800c476:	3728      	adds	r7, #40	; 0x28
 800c478:	46bd      	mov	sp, r7
 800c47a:	bd80      	pop	{r7, pc}

0800c47c <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800c47c:	b580      	push	{r7, lr}
 800c47e:	b088      	sub	sp, #32
 800c480:	af00      	add	r7, sp, #0
 800c482:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800c484:	2300      	movs	r3, #0
 800c486:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c488:	f3ef 8305 	mrs	r3, IPSR
 800c48c:	60bb      	str	r3, [r7, #8]
  return(result);
 800c48e:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800c490:	2b00      	cmp	r3, #0
 800c492:	d174      	bne.n	800c57e <osMutexNew+0x102>
    if (attr != NULL) {
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	2b00      	cmp	r3, #0
 800c498:	d003      	beq.n	800c4a2 <osMutexNew+0x26>
      type = attr->attr_bits;
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	685b      	ldr	r3, [r3, #4]
 800c49e:	61bb      	str	r3, [r7, #24]
 800c4a0:	e001      	b.n	800c4a6 <osMutexNew+0x2a>
    } else {
      type = 0U;
 800c4a2:	2300      	movs	r3, #0
 800c4a4:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800c4a6:	69bb      	ldr	r3, [r7, #24]
 800c4a8:	f003 0301 	and.w	r3, r3, #1
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d002      	beq.n	800c4b6 <osMutexNew+0x3a>
      rmtx = 1U;
 800c4b0:	2301      	movs	r3, #1
 800c4b2:	617b      	str	r3, [r7, #20]
 800c4b4:	e001      	b.n	800c4ba <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800c4b6:	2300      	movs	r3, #0
 800c4b8:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800c4ba:	69bb      	ldr	r3, [r7, #24]
 800c4bc:	f003 0308 	and.w	r3, r3, #8
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d15c      	bne.n	800c57e <osMutexNew+0x102>
      mem = -1;
 800c4c4:	f04f 33ff 	mov.w	r3, #4294967295
 800c4c8:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d015      	beq.n	800c4fc <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	689b      	ldr	r3, [r3, #8]
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d006      	beq.n	800c4e6 <osMutexNew+0x6a>
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	68db      	ldr	r3, [r3, #12]
 800c4dc:	2b4f      	cmp	r3, #79	; 0x4f
 800c4de:	d902      	bls.n	800c4e6 <osMutexNew+0x6a>
          mem = 1;
 800c4e0:	2301      	movs	r3, #1
 800c4e2:	613b      	str	r3, [r7, #16]
 800c4e4:	e00c      	b.n	800c500 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	689b      	ldr	r3, [r3, #8]
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d108      	bne.n	800c500 <osMutexNew+0x84>
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	68db      	ldr	r3, [r3, #12]
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d104      	bne.n	800c500 <osMutexNew+0x84>
            mem = 0;
 800c4f6:	2300      	movs	r3, #0
 800c4f8:	613b      	str	r3, [r7, #16]
 800c4fa:	e001      	b.n	800c500 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800c4fc:	2300      	movs	r3, #0
 800c4fe:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800c500:	693b      	ldr	r3, [r7, #16]
 800c502:	2b01      	cmp	r3, #1
 800c504:	d112      	bne.n	800c52c <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800c506:	697b      	ldr	r3, [r7, #20]
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d007      	beq.n	800c51c <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	689b      	ldr	r3, [r3, #8]
 800c510:	4619      	mov	r1, r3
 800c512:	2004      	movs	r0, #4
 800c514:	f000 fe37 	bl	800d186 <xQueueCreateMutexStatic>
 800c518:	61f8      	str	r0, [r7, #28]
 800c51a:	e016      	b.n	800c54a <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	689b      	ldr	r3, [r3, #8]
 800c520:	4619      	mov	r1, r3
 800c522:	2001      	movs	r0, #1
 800c524:	f000 fe2f 	bl	800d186 <xQueueCreateMutexStatic>
 800c528:	61f8      	str	r0, [r7, #28]
 800c52a:	e00e      	b.n	800c54a <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800c52c:	693b      	ldr	r3, [r7, #16]
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d10b      	bne.n	800c54a <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800c532:	697b      	ldr	r3, [r7, #20]
 800c534:	2b00      	cmp	r3, #0
 800c536:	d004      	beq.n	800c542 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800c538:	2004      	movs	r0, #4
 800c53a:	f000 fe0c 	bl	800d156 <xQueueCreateMutex>
 800c53e:	61f8      	str	r0, [r7, #28]
 800c540:	e003      	b.n	800c54a <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800c542:	2001      	movs	r0, #1
 800c544:	f000 fe07 	bl	800d156 <xQueueCreateMutex>
 800c548:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800c54a:	69fb      	ldr	r3, [r7, #28]
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d00c      	beq.n	800c56a <osMutexNew+0xee>
        if (attr != NULL) {
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	2b00      	cmp	r3, #0
 800c554:	d003      	beq.n	800c55e <osMutexNew+0xe2>
          name = attr->name;
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	60fb      	str	r3, [r7, #12]
 800c55c:	e001      	b.n	800c562 <osMutexNew+0xe6>
        } else {
          name = NULL;
 800c55e:	2300      	movs	r3, #0
 800c560:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800c562:	68f9      	ldr	r1, [r7, #12]
 800c564:	69f8      	ldr	r0, [r7, #28]
 800c566:	f001 fbc1 	bl	800dcec <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800c56a:	69fb      	ldr	r3, [r7, #28]
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d006      	beq.n	800c57e <osMutexNew+0x102>
 800c570:	697b      	ldr	r3, [r7, #20]
 800c572:	2b00      	cmp	r3, #0
 800c574:	d003      	beq.n	800c57e <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800c576:	69fb      	ldr	r3, [r7, #28]
 800c578:	f043 0301 	orr.w	r3, r3, #1
 800c57c:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800c57e:	69fb      	ldr	r3, [r7, #28]
}
 800c580:	4618      	mov	r0, r3
 800c582:	3720      	adds	r7, #32
 800c584:	46bd      	mov	sp, r7
 800c586:	bd80      	pop	{r7, pc}

0800c588 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800c588:	b580      	push	{r7, lr}
 800c58a:	b086      	sub	sp, #24
 800c58c:	af00      	add	r7, sp, #0
 800c58e:	6078      	str	r0, [r7, #4]
 800c590:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	f023 0301 	bic.w	r3, r3, #1
 800c598:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	f003 0301 	and.w	r3, r3, #1
 800c5a0:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800c5a2:	2300      	movs	r3, #0
 800c5a4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c5a6:	f3ef 8305 	mrs	r3, IPSR
 800c5aa:	60bb      	str	r3, [r7, #8]
  return(result);
 800c5ac:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d003      	beq.n	800c5ba <osMutexAcquire+0x32>
    stat = osErrorISR;
 800c5b2:	f06f 0305 	mvn.w	r3, #5
 800c5b6:	617b      	str	r3, [r7, #20]
 800c5b8:	e02c      	b.n	800c614 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800c5ba:	693b      	ldr	r3, [r7, #16]
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d103      	bne.n	800c5c8 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800c5c0:	f06f 0303 	mvn.w	r3, #3
 800c5c4:	617b      	str	r3, [r7, #20]
 800c5c6:	e025      	b.n	800c614 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d011      	beq.n	800c5f2 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800c5ce:	6839      	ldr	r1, [r7, #0]
 800c5d0:	6938      	ldr	r0, [r7, #16]
 800c5d2:	f000 fe27 	bl	800d224 <xQueueTakeMutexRecursive>
 800c5d6:	4603      	mov	r3, r0
 800c5d8:	2b01      	cmp	r3, #1
 800c5da:	d01b      	beq.n	800c614 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800c5dc:	683b      	ldr	r3, [r7, #0]
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d003      	beq.n	800c5ea <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800c5e2:	f06f 0301 	mvn.w	r3, #1
 800c5e6:	617b      	str	r3, [r7, #20]
 800c5e8:	e014      	b.n	800c614 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800c5ea:	f06f 0302 	mvn.w	r3, #2
 800c5ee:	617b      	str	r3, [r7, #20]
 800c5f0:	e010      	b.n	800c614 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800c5f2:	6839      	ldr	r1, [r7, #0]
 800c5f4:	6938      	ldr	r0, [r7, #16]
 800c5f6:	f001 f8c5 	bl	800d784 <xQueueSemaphoreTake>
 800c5fa:	4603      	mov	r3, r0
 800c5fc:	2b01      	cmp	r3, #1
 800c5fe:	d009      	beq.n	800c614 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800c600:	683b      	ldr	r3, [r7, #0]
 800c602:	2b00      	cmp	r3, #0
 800c604:	d003      	beq.n	800c60e <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800c606:	f06f 0301 	mvn.w	r3, #1
 800c60a:	617b      	str	r3, [r7, #20]
 800c60c:	e002      	b.n	800c614 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800c60e:	f06f 0302 	mvn.w	r3, #2
 800c612:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800c614:	697b      	ldr	r3, [r7, #20]
}
 800c616:	4618      	mov	r0, r3
 800c618:	3718      	adds	r7, #24
 800c61a:	46bd      	mov	sp, r7
 800c61c:	bd80      	pop	{r7, pc}

0800c61e <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800c61e:	b580      	push	{r7, lr}
 800c620:	b086      	sub	sp, #24
 800c622:	af00      	add	r7, sp, #0
 800c624:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	f023 0301 	bic.w	r3, r3, #1
 800c62c:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	f003 0301 	and.w	r3, r3, #1
 800c634:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800c636:	2300      	movs	r3, #0
 800c638:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c63a:	f3ef 8305 	mrs	r3, IPSR
 800c63e:	60bb      	str	r3, [r7, #8]
  return(result);
 800c640:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800c642:	2b00      	cmp	r3, #0
 800c644:	d003      	beq.n	800c64e <osMutexRelease+0x30>
    stat = osErrorISR;
 800c646:	f06f 0305 	mvn.w	r3, #5
 800c64a:	617b      	str	r3, [r7, #20]
 800c64c:	e01f      	b.n	800c68e <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800c64e:	693b      	ldr	r3, [r7, #16]
 800c650:	2b00      	cmp	r3, #0
 800c652:	d103      	bne.n	800c65c <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800c654:	f06f 0303 	mvn.w	r3, #3
 800c658:	617b      	str	r3, [r7, #20]
 800c65a:	e018      	b.n	800c68e <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d009      	beq.n	800c676 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800c662:	6938      	ldr	r0, [r7, #16]
 800c664:	f000 fdaa 	bl	800d1bc <xQueueGiveMutexRecursive>
 800c668:	4603      	mov	r3, r0
 800c66a:	2b01      	cmp	r3, #1
 800c66c:	d00f      	beq.n	800c68e <osMutexRelease+0x70>
        stat = osErrorResource;
 800c66e:	f06f 0302 	mvn.w	r3, #2
 800c672:	617b      	str	r3, [r7, #20]
 800c674:	e00b      	b.n	800c68e <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800c676:	2300      	movs	r3, #0
 800c678:	2200      	movs	r2, #0
 800c67a:	2100      	movs	r1, #0
 800c67c:	6938      	ldr	r0, [r7, #16]
 800c67e:	f000 fe07 	bl	800d290 <xQueueGenericSend>
 800c682:	4603      	mov	r3, r0
 800c684:	2b01      	cmp	r3, #1
 800c686:	d002      	beq.n	800c68e <osMutexRelease+0x70>
        stat = osErrorResource;
 800c688:	f06f 0302 	mvn.w	r3, #2
 800c68c:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800c68e:	697b      	ldr	r3, [r7, #20]
}
 800c690:	4618      	mov	r0, r3
 800c692:	3718      	adds	r7, #24
 800c694:	46bd      	mov	sp, r7
 800c696:	bd80      	pop	{r7, pc}

0800c698 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800c698:	b580      	push	{r7, lr}
 800c69a:	b08a      	sub	sp, #40	; 0x28
 800c69c:	af02      	add	r7, sp, #8
 800c69e:	60f8      	str	r0, [r7, #12]
 800c6a0:	60b9      	str	r1, [r7, #8]
 800c6a2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800c6a4:	2300      	movs	r3, #0
 800c6a6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c6a8:	f3ef 8305 	mrs	r3, IPSR
 800c6ac:	613b      	str	r3, [r7, #16]
  return(result);
 800c6ae:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d15f      	bne.n	800c774 <osMessageQueueNew+0xdc>
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d05c      	beq.n	800c774 <osMessageQueueNew+0xdc>
 800c6ba:	68bb      	ldr	r3, [r7, #8]
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d059      	beq.n	800c774 <osMessageQueueNew+0xdc>
    mem = -1;
 800c6c0:	f04f 33ff 	mov.w	r3, #4294967295
 800c6c4:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d029      	beq.n	800c720 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	689b      	ldr	r3, [r3, #8]
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d012      	beq.n	800c6fa <osMessageQueueNew+0x62>
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	68db      	ldr	r3, [r3, #12]
 800c6d8:	2b4f      	cmp	r3, #79	; 0x4f
 800c6da:	d90e      	bls.n	800c6fa <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d00a      	beq.n	800c6fa <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	695a      	ldr	r2, [r3, #20]
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	68b9      	ldr	r1, [r7, #8]
 800c6ec:	fb01 f303 	mul.w	r3, r1, r3
 800c6f0:	429a      	cmp	r2, r3
 800c6f2:	d302      	bcc.n	800c6fa <osMessageQueueNew+0x62>
        mem = 1;
 800c6f4:	2301      	movs	r3, #1
 800c6f6:	61bb      	str	r3, [r7, #24]
 800c6f8:	e014      	b.n	800c724 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	689b      	ldr	r3, [r3, #8]
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d110      	bne.n	800c724 <osMessageQueueNew+0x8c>
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	68db      	ldr	r3, [r3, #12]
 800c706:	2b00      	cmp	r3, #0
 800c708:	d10c      	bne.n	800c724 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d108      	bne.n	800c724 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	695b      	ldr	r3, [r3, #20]
 800c716:	2b00      	cmp	r3, #0
 800c718:	d104      	bne.n	800c724 <osMessageQueueNew+0x8c>
          mem = 0;
 800c71a:	2300      	movs	r3, #0
 800c71c:	61bb      	str	r3, [r7, #24]
 800c71e:	e001      	b.n	800c724 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800c720:	2300      	movs	r3, #0
 800c722:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800c724:	69bb      	ldr	r3, [r7, #24]
 800c726:	2b01      	cmp	r3, #1
 800c728:	d10b      	bne.n	800c742 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	691a      	ldr	r2, [r3, #16]
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	689b      	ldr	r3, [r3, #8]
 800c732:	2100      	movs	r1, #0
 800c734:	9100      	str	r1, [sp, #0]
 800c736:	68b9      	ldr	r1, [r7, #8]
 800c738:	68f8      	ldr	r0, [r7, #12]
 800c73a:	f000 fc1d 	bl	800cf78 <xQueueGenericCreateStatic>
 800c73e:	61f8      	str	r0, [r7, #28]
 800c740:	e008      	b.n	800c754 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800c742:	69bb      	ldr	r3, [r7, #24]
 800c744:	2b00      	cmp	r3, #0
 800c746:	d105      	bne.n	800c754 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800c748:	2200      	movs	r2, #0
 800c74a:	68b9      	ldr	r1, [r7, #8]
 800c74c:	68f8      	ldr	r0, [r7, #12]
 800c74e:	f000 fc8b 	bl	800d068 <xQueueGenericCreate>
 800c752:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800c754:	69fb      	ldr	r3, [r7, #28]
 800c756:	2b00      	cmp	r3, #0
 800c758:	d00c      	beq.n	800c774 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d003      	beq.n	800c768 <osMessageQueueNew+0xd0>
        name = attr->name;
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	617b      	str	r3, [r7, #20]
 800c766:	e001      	b.n	800c76c <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800c768:	2300      	movs	r3, #0
 800c76a:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800c76c:	6979      	ldr	r1, [r7, #20]
 800c76e:	69f8      	ldr	r0, [r7, #28]
 800c770:	f001 fabc 	bl	800dcec <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800c774:	69fb      	ldr	r3, [r7, #28]
}
 800c776:	4618      	mov	r0, r3
 800c778:	3720      	adds	r7, #32
 800c77a:	46bd      	mov	sp, r7
 800c77c:	bd80      	pop	{r7, pc}
	...

0800c780 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800c780:	b580      	push	{r7, lr}
 800c782:	b088      	sub	sp, #32
 800c784:	af00      	add	r7, sp, #0
 800c786:	60f8      	str	r0, [r7, #12]
 800c788:	60b9      	str	r1, [r7, #8]
 800c78a:	603b      	str	r3, [r7, #0]
 800c78c:	4613      	mov	r3, r2
 800c78e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800c794:	2300      	movs	r3, #0
 800c796:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c798:	f3ef 8305 	mrs	r3, IPSR
 800c79c:	617b      	str	r3, [r7, #20]
  return(result);
 800c79e:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d028      	beq.n	800c7f6 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800c7a4:	69bb      	ldr	r3, [r7, #24]
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d005      	beq.n	800c7b6 <osMessageQueuePut+0x36>
 800c7aa:	68bb      	ldr	r3, [r7, #8]
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d002      	beq.n	800c7b6 <osMessageQueuePut+0x36>
 800c7b0:	683b      	ldr	r3, [r7, #0]
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d003      	beq.n	800c7be <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800c7b6:	f06f 0303 	mvn.w	r3, #3
 800c7ba:	61fb      	str	r3, [r7, #28]
 800c7bc:	e038      	b.n	800c830 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800c7be:	2300      	movs	r3, #0
 800c7c0:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800c7c2:	f107 0210 	add.w	r2, r7, #16
 800c7c6:	2300      	movs	r3, #0
 800c7c8:	68b9      	ldr	r1, [r7, #8]
 800c7ca:	69b8      	ldr	r0, [r7, #24]
 800c7cc:	f000 fe5e 	bl	800d48c <xQueueGenericSendFromISR>
 800c7d0:	4603      	mov	r3, r0
 800c7d2:	2b01      	cmp	r3, #1
 800c7d4:	d003      	beq.n	800c7de <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800c7d6:	f06f 0302 	mvn.w	r3, #2
 800c7da:	61fb      	str	r3, [r7, #28]
 800c7dc:	e028      	b.n	800c830 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800c7de:	693b      	ldr	r3, [r7, #16]
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d025      	beq.n	800c830 <osMessageQueuePut+0xb0>
 800c7e4:	4b15      	ldr	r3, [pc, #84]	; (800c83c <osMessageQueuePut+0xbc>)
 800c7e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c7ea:	601a      	str	r2, [r3, #0]
 800c7ec:	f3bf 8f4f 	dsb	sy
 800c7f0:	f3bf 8f6f 	isb	sy
 800c7f4:	e01c      	b.n	800c830 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800c7f6:	69bb      	ldr	r3, [r7, #24]
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d002      	beq.n	800c802 <osMessageQueuePut+0x82>
 800c7fc:	68bb      	ldr	r3, [r7, #8]
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d103      	bne.n	800c80a <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800c802:	f06f 0303 	mvn.w	r3, #3
 800c806:	61fb      	str	r3, [r7, #28]
 800c808:	e012      	b.n	800c830 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800c80a:	2300      	movs	r3, #0
 800c80c:	683a      	ldr	r2, [r7, #0]
 800c80e:	68b9      	ldr	r1, [r7, #8]
 800c810:	69b8      	ldr	r0, [r7, #24]
 800c812:	f000 fd3d 	bl	800d290 <xQueueGenericSend>
 800c816:	4603      	mov	r3, r0
 800c818:	2b01      	cmp	r3, #1
 800c81a:	d009      	beq.n	800c830 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800c81c:	683b      	ldr	r3, [r7, #0]
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d003      	beq.n	800c82a <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800c822:	f06f 0301 	mvn.w	r3, #1
 800c826:	61fb      	str	r3, [r7, #28]
 800c828:	e002      	b.n	800c830 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800c82a:	f06f 0302 	mvn.w	r3, #2
 800c82e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800c830:	69fb      	ldr	r3, [r7, #28]
}
 800c832:	4618      	mov	r0, r3
 800c834:	3720      	adds	r7, #32
 800c836:	46bd      	mov	sp, r7
 800c838:	bd80      	pop	{r7, pc}
 800c83a:	bf00      	nop
 800c83c:	e000ed04 	.word	0xe000ed04

0800c840 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800c840:	b580      	push	{r7, lr}
 800c842:	b088      	sub	sp, #32
 800c844:	af00      	add	r7, sp, #0
 800c846:	60f8      	str	r0, [r7, #12]
 800c848:	60b9      	str	r1, [r7, #8]
 800c84a:	607a      	str	r2, [r7, #4]
 800c84c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800c84e:	68fb      	ldr	r3, [r7, #12]
 800c850:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800c852:	2300      	movs	r3, #0
 800c854:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c856:	f3ef 8305 	mrs	r3, IPSR
 800c85a:	617b      	str	r3, [r7, #20]
  return(result);
 800c85c:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d028      	beq.n	800c8b4 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800c862:	69bb      	ldr	r3, [r7, #24]
 800c864:	2b00      	cmp	r3, #0
 800c866:	d005      	beq.n	800c874 <osMessageQueueGet+0x34>
 800c868:	68bb      	ldr	r3, [r7, #8]
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d002      	beq.n	800c874 <osMessageQueueGet+0x34>
 800c86e:	683b      	ldr	r3, [r7, #0]
 800c870:	2b00      	cmp	r3, #0
 800c872:	d003      	beq.n	800c87c <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800c874:	f06f 0303 	mvn.w	r3, #3
 800c878:	61fb      	str	r3, [r7, #28]
 800c87a:	e037      	b.n	800c8ec <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800c87c:	2300      	movs	r3, #0
 800c87e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800c880:	f107 0310 	add.w	r3, r7, #16
 800c884:	461a      	mov	r2, r3
 800c886:	68b9      	ldr	r1, [r7, #8]
 800c888:	69b8      	ldr	r0, [r7, #24]
 800c88a:	f001 f887 	bl	800d99c <xQueueReceiveFromISR>
 800c88e:	4603      	mov	r3, r0
 800c890:	2b01      	cmp	r3, #1
 800c892:	d003      	beq.n	800c89c <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800c894:	f06f 0302 	mvn.w	r3, #2
 800c898:	61fb      	str	r3, [r7, #28]
 800c89a:	e027      	b.n	800c8ec <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800c89c:	693b      	ldr	r3, [r7, #16]
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d024      	beq.n	800c8ec <osMessageQueueGet+0xac>
 800c8a2:	4b15      	ldr	r3, [pc, #84]	; (800c8f8 <osMessageQueueGet+0xb8>)
 800c8a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c8a8:	601a      	str	r2, [r3, #0]
 800c8aa:	f3bf 8f4f 	dsb	sy
 800c8ae:	f3bf 8f6f 	isb	sy
 800c8b2:	e01b      	b.n	800c8ec <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800c8b4:	69bb      	ldr	r3, [r7, #24]
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d002      	beq.n	800c8c0 <osMessageQueueGet+0x80>
 800c8ba:	68bb      	ldr	r3, [r7, #8]
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d103      	bne.n	800c8c8 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800c8c0:	f06f 0303 	mvn.w	r3, #3
 800c8c4:	61fb      	str	r3, [r7, #28]
 800c8c6:	e011      	b.n	800c8ec <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800c8c8:	683a      	ldr	r2, [r7, #0]
 800c8ca:	68b9      	ldr	r1, [r7, #8]
 800c8cc:	69b8      	ldr	r0, [r7, #24]
 800c8ce:	f000 fe79 	bl	800d5c4 <xQueueReceive>
 800c8d2:	4603      	mov	r3, r0
 800c8d4:	2b01      	cmp	r3, #1
 800c8d6:	d009      	beq.n	800c8ec <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800c8d8:	683b      	ldr	r3, [r7, #0]
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d003      	beq.n	800c8e6 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800c8de:	f06f 0301 	mvn.w	r3, #1
 800c8e2:	61fb      	str	r3, [r7, #28]
 800c8e4:	e002      	b.n	800c8ec <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800c8e6:	f06f 0302 	mvn.w	r3, #2
 800c8ea:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800c8ec:	69fb      	ldr	r3, [r7, #28]
}
 800c8ee:	4618      	mov	r0, r3
 800c8f0:	3720      	adds	r7, #32
 800c8f2:	46bd      	mov	sp, r7
 800c8f4:	bd80      	pop	{r7, pc}
 800c8f6:	bf00      	nop
 800c8f8:	e000ed04 	.word	0xe000ed04

0800c8fc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800c8fc:	b480      	push	{r7}
 800c8fe:	b085      	sub	sp, #20
 800c900:	af00      	add	r7, sp, #0
 800c902:	60f8      	str	r0, [r7, #12]
 800c904:	60b9      	str	r1, [r7, #8]
 800c906:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800c908:	68fb      	ldr	r3, [r7, #12]
 800c90a:	4a07      	ldr	r2, [pc, #28]	; (800c928 <vApplicationGetIdleTaskMemory+0x2c>)
 800c90c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800c90e:	68bb      	ldr	r3, [r7, #8]
 800c910:	4a06      	ldr	r2, [pc, #24]	; (800c92c <vApplicationGetIdleTaskMemory+0x30>)
 800c912:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	2280      	movs	r2, #128	; 0x80
 800c918:	601a      	str	r2, [r3, #0]
}
 800c91a:	bf00      	nop
 800c91c:	3714      	adds	r7, #20
 800c91e:	46bd      	mov	sp, r7
 800c920:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c924:	4770      	bx	lr
 800c926:	bf00      	nop
 800c928:	200005f0 	.word	0x200005f0
 800c92c:	2000064c 	.word	0x2000064c

0800c930 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800c930:	b480      	push	{r7}
 800c932:	b085      	sub	sp, #20
 800c934:	af00      	add	r7, sp, #0
 800c936:	60f8      	str	r0, [r7, #12]
 800c938:	60b9      	str	r1, [r7, #8]
 800c93a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	4a07      	ldr	r2, [pc, #28]	; (800c95c <vApplicationGetTimerTaskMemory+0x2c>)
 800c940:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800c942:	68bb      	ldr	r3, [r7, #8]
 800c944:	4a06      	ldr	r2, [pc, #24]	; (800c960 <vApplicationGetTimerTaskMemory+0x30>)
 800c946:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c94e:	601a      	str	r2, [r3, #0]
}
 800c950:	bf00      	nop
 800c952:	3714      	adds	r7, #20
 800c954:	46bd      	mov	sp, r7
 800c956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c95a:	4770      	bx	lr
 800c95c:	2000084c 	.word	0x2000084c
 800c960:	200008a8 	.word	0x200008a8

0800c964 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 800c964:	b580      	push	{r7, lr}
 800c966:	b086      	sub	sp, #24
 800c968:	af00      	add	r7, sp, #0
 800c96a:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d10a      	bne.n	800c988 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c972:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c976:	f383 8811 	msr	BASEPRI, r3
 800c97a:	f3bf 8f6f 	isb	sy
 800c97e:	f3bf 8f4f 	dsb	sy
 800c982:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800c984:	bf00      	nop
 800c986:	e7fe      	b.n	800c986 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 800c988:	2320      	movs	r3, #32
 800c98a:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 800c98c:	68bb      	ldr	r3, [r7, #8]
 800c98e:	2b20      	cmp	r3, #32
 800c990:	d00a      	beq.n	800c9a8 <xEventGroupCreateStatic+0x44>
	__asm volatile
 800c992:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c996:	f383 8811 	msr	BASEPRI, r3
 800c99a:	f3bf 8f6f 	isb	sy
 800c99e:	f3bf 8f4f 	dsb	sy
 800c9a2:	60fb      	str	r3, [r7, #12]
}
 800c9a4:	bf00      	nop
 800c9a6:	e7fe      	b.n	800c9a6 <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 800c9ac:	697b      	ldr	r3, [r7, #20]
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d00a      	beq.n	800c9c8 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 800c9b2:	697b      	ldr	r3, [r7, #20]
 800c9b4:	2200      	movs	r2, #0
 800c9b6:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800c9b8:	697b      	ldr	r3, [r7, #20]
 800c9ba:	3304      	adds	r3, #4
 800c9bc:	4618      	mov	r0, r3
 800c9be:	f000 f9bf 	bl	800cd40 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 800c9c2:	697b      	ldr	r3, [r7, #20]
 800c9c4:	2201      	movs	r2, #1
 800c9c6:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 800c9c8:	697b      	ldr	r3, [r7, #20]
	}
 800c9ca:	4618      	mov	r0, r3
 800c9cc:	3718      	adds	r7, #24
 800c9ce:	46bd      	mov	sp, r7
 800c9d0:	bd80      	pop	{r7, pc}

0800c9d2 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 800c9d2:	b580      	push	{r7, lr}
 800c9d4:	b082      	sub	sp, #8
 800c9d6:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 800c9d8:	2020      	movs	r0, #32
 800c9da:	f003 f865 	bl	800faa8 <pvPortMalloc>
 800c9de:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	d00a      	beq.n	800c9fc <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	2200      	movs	r2, #0
 800c9ea:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	3304      	adds	r3, #4
 800c9f0:	4618      	mov	r0, r3
 800c9f2:	f000 f9a5 	bl	800cd40 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	2200      	movs	r2, #0
 800c9fa:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 800c9fc:	687b      	ldr	r3, [r7, #4]
	}
 800c9fe:	4618      	mov	r0, r3
 800ca00:	3708      	adds	r7, #8
 800ca02:	46bd      	mov	sp, r7
 800ca04:	bd80      	pop	{r7, pc}
	...

0800ca08 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 800ca08:	b580      	push	{r7, lr}
 800ca0a:	b090      	sub	sp, #64	; 0x40
 800ca0c:	af00      	add	r7, sp, #0
 800ca0e:	60f8      	str	r0, [r7, #12]
 800ca10:	60b9      	str	r1, [r7, #8]
 800ca12:	607a      	str	r2, [r7, #4]
 800ca14:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 800ca16:	68fb      	ldr	r3, [r7, #12]
 800ca18:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 800ca1a:	2300      	movs	r3, #0
 800ca1c:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 800ca1e:	2300      	movs	r3, #0
 800ca20:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d10a      	bne.n	800ca3e <xEventGroupWaitBits+0x36>
	__asm volatile
 800ca28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca2c:	f383 8811 	msr	BASEPRI, r3
 800ca30:	f3bf 8f6f 	isb	sy
 800ca34:	f3bf 8f4f 	dsb	sy
 800ca38:	623b      	str	r3, [r7, #32]
}
 800ca3a:	bf00      	nop
 800ca3c:	e7fe      	b.n	800ca3c <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800ca3e:	68bb      	ldr	r3, [r7, #8]
 800ca40:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d00a      	beq.n	800ca5e <xEventGroupWaitBits+0x56>
	__asm volatile
 800ca48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca4c:	f383 8811 	msr	BASEPRI, r3
 800ca50:	f3bf 8f6f 	isb	sy
 800ca54:	f3bf 8f4f 	dsb	sy
 800ca58:	61fb      	str	r3, [r7, #28]
}
 800ca5a:	bf00      	nop
 800ca5c:	e7fe      	b.n	800ca5c <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 800ca5e:	68bb      	ldr	r3, [r7, #8]
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	d10a      	bne.n	800ca7a <xEventGroupWaitBits+0x72>
	__asm volatile
 800ca64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca68:	f383 8811 	msr	BASEPRI, r3
 800ca6c:	f3bf 8f6f 	isb	sy
 800ca70:	f3bf 8f4f 	dsb	sy
 800ca74:	61bb      	str	r3, [r7, #24]
}
 800ca76:	bf00      	nop
 800ca78:	e7fe      	b.n	800ca78 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ca7a:	f002 f861 	bl	800eb40 <xTaskGetSchedulerState>
 800ca7e:	4603      	mov	r3, r0
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	d102      	bne.n	800ca8a <xEventGroupWaitBits+0x82>
 800ca84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d101      	bne.n	800ca8e <xEventGroupWaitBits+0x86>
 800ca8a:	2301      	movs	r3, #1
 800ca8c:	e000      	b.n	800ca90 <xEventGroupWaitBits+0x88>
 800ca8e:	2300      	movs	r3, #0
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d10a      	bne.n	800caaa <xEventGroupWaitBits+0xa2>
	__asm volatile
 800ca94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca98:	f383 8811 	msr	BASEPRI, r3
 800ca9c:	f3bf 8f6f 	isb	sy
 800caa0:	f3bf 8f4f 	dsb	sy
 800caa4:	617b      	str	r3, [r7, #20]
}
 800caa6:	bf00      	nop
 800caa8:	e7fe      	b.n	800caa8 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 800caaa:	f001 fbb9 	bl	800e220 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 800caae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 800cab4:	683a      	ldr	r2, [r7, #0]
 800cab6:	68b9      	ldr	r1, [r7, #8]
 800cab8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800caba:	f000 f90b 	bl	800ccd4 <prvTestWaitCondition>
 800cabe:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 800cac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	d00e      	beq.n	800cae4 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 800cac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cac8:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 800caca:	2300      	movs	r3, #0
 800cacc:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d028      	beq.n	800cb26 <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800cad4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cad6:	681a      	ldr	r2, [r3, #0]
 800cad8:	68bb      	ldr	r3, [r7, #8]
 800cada:	43db      	mvns	r3, r3
 800cadc:	401a      	ands	r2, r3
 800cade:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cae0:	601a      	str	r2, [r3, #0]
 800cae2:	e020      	b.n	800cb26 <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 800cae4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d104      	bne.n	800caf4 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 800caea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800caec:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 800caee:	2301      	movs	r3, #1
 800caf0:	633b      	str	r3, [r7, #48]	; 0x30
 800caf2:	e018      	b.n	800cb26 <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d003      	beq.n	800cb02 <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 800cafa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cafc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800cb00:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 800cb02:	683b      	ldr	r3, [r7, #0]
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	d003      	beq.n	800cb10 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 800cb08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb0a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800cb0e:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 800cb10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb12:	1d18      	adds	r0, r3, #4
 800cb14:	68ba      	ldr	r2, [r7, #8]
 800cb16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb18:	4313      	orrs	r3, r2
 800cb1a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cb1c:	4619      	mov	r1, r3
 800cb1e:	f001 fd77 	bl	800e610 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 800cb22:	2300      	movs	r3, #0
 800cb24:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 800cb26:	f001 fb89 	bl	800e23c <xTaskResumeAll>
 800cb2a:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 800cb2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d031      	beq.n	800cb96 <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 800cb32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d107      	bne.n	800cb48 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 800cb38:	4b19      	ldr	r3, [pc, #100]	; (800cba0 <xEventGroupWaitBits+0x198>)
 800cb3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cb3e:	601a      	str	r2, [r3, #0]
 800cb40:	f3bf 8f4f 	dsb	sy
 800cb44:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 800cb48:	f002 f970 	bl	800ee2c <uxTaskResetEventItemValue>
 800cb4c:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 800cb4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d11a      	bne.n	800cb8e <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 800cb58:	f002 fe84 	bl	800f864 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 800cb5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 800cb62:	683a      	ldr	r2, [r7, #0]
 800cb64:	68b9      	ldr	r1, [r7, #8]
 800cb66:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800cb68:	f000 f8b4 	bl	800ccd4 <prvTestWaitCondition>
 800cb6c:	4603      	mov	r3, r0
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d009      	beq.n	800cb86 <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	d006      	beq.n	800cb86 <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800cb78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb7a:	681a      	ldr	r2, [r3, #0]
 800cb7c:	68bb      	ldr	r3, [r7, #8]
 800cb7e:	43db      	mvns	r3, r3
 800cb80:	401a      	ands	r2, r3
 800cb82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb84:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 800cb86:	2301      	movs	r3, #1
 800cb88:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 800cb8a:	f002 fe9b 	bl	800f8c4 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 800cb8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb90:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800cb94:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 800cb96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800cb98:	4618      	mov	r0, r3
 800cb9a:	3740      	adds	r7, #64	; 0x40
 800cb9c:	46bd      	mov	sp, r7
 800cb9e:	bd80      	pop	{r7, pc}
 800cba0:	e000ed04 	.word	0xe000ed04

0800cba4 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 800cba4:	b580      	push	{r7, lr}
 800cba6:	b08e      	sub	sp, #56	; 0x38
 800cba8:	af00      	add	r7, sp, #0
 800cbaa:	6078      	str	r0, [r7, #4]
 800cbac:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 800cbae:	2300      	movs	r3, #0
 800cbb0:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 800cbb6:	2300      	movs	r3, #0
 800cbb8:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d10a      	bne.n	800cbd6 <xEventGroupSetBits+0x32>
	__asm volatile
 800cbc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbc4:	f383 8811 	msr	BASEPRI, r3
 800cbc8:	f3bf 8f6f 	isb	sy
 800cbcc:	f3bf 8f4f 	dsb	sy
 800cbd0:	613b      	str	r3, [r7, #16]
}
 800cbd2:	bf00      	nop
 800cbd4:	e7fe      	b.n	800cbd4 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800cbd6:	683b      	ldr	r3, [r7, #0]
 800cbd8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d00a      	beq.n	800cbf6 <xEventGroupSetBits+0x52>
	__asm volatile
 800cbe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbe4:	f383 8811 	msr	BASEPRI, r3
 800cbe8:	f3bf 8f6f 	isb	sy
 800cbec:	f3bf 8f4f 	dsb	sy
 800cbf0:	60fb      	str	r3, [r7, #12]
}
 800cbf2:	bf00      	nop
 800cbf4:	e7fe      	b.n	800cbf4 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 800cbf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbf8:	3304      	adds	r3, #4
 800cbfa:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cbfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbfe:	3308      	adds	r3, #8
 800cc00:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 800cc02:	f001 fb0d 	bl	800e220 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 800cc06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc08:	68db      	ldr	r3, [r3, #12]
 800cc0a:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 800cc0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc0e:	681a      	ldr	r2, [r3, #0]
 800cc10:	683b      	ldr	r3, [r7, #0]
 800cc12:	431a      	orrs	r2, r3
 800cc14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc16:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 800cc18:	e03c      	b.n	800cc94 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 800cc1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc1c:	685b      	ldr	r3, [r3, #4]
 800cc1e:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 800cc20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 800cc26:	2300      	movs	r3, #0
 800cc28:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 800cc2a:	69bb      	ldr	r3, [r7, #24]
 800cc2c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800cc30:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 800cc32:	69bb      	ldr	r3, [r7, #24]
 800cc34:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800cc38:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800cc3a:	697b      	ldr	r3, [r7, #20]
 800cc3c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d108      	bne.n	800cc56 <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 800cc44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc46:	681a      	ldr	r2, [r3, #0]
 800cc48:	69bb      	ldr	r3, [r7, #24]
 800cc4a:	4013      	ands	r3, r2
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	d00b      	beq.n	800cc68 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 800cc50:	2301      	movs	r3, #1
 800cc52:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cc54:	e008      	b.n	800cc68 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 800cc56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc58:	681a      	ldr	r2, [r3, #0]
 800cc5a:	69bb      	ldr	r3, [r7, #24]
 800cc5c:	4013      	ands	r3, r2
 800cc5e:	69ba      	ldr	r2, [r7, #24]
 800cc60:	429a      	cmp	r2, r3
 800cc62:	d101      	bne.n	800cc68 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 800cc64:	2301      	movs	r3, #1
 800cc66:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 800cc68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	d010      	beq.n	800cc90 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800cc6e:	697b      	ldr	r3, [r7, #20]
 800cc70:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d003      	beq.n	800cc80 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 800cc78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cc7a:	69bb      	ldr	r3, [r7, #24]
 800cc7c:	4313      	orrs	r3, r2
 800cc7e:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 800cc80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800cc88:	4619      	mov	r1, r3
 800cc8a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800cc8c:	f001 fd8c 	bl	800e7a8 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 800cc90:	69fb      	ldr	r3, [r7, #28]
 800cc92:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 800cc94:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cc96:	6a3b      	ldr	r3, [r7, #32]
 800cc98:	429a      	cmp	r2, r3
 800cc9a:	d1be      	bne.n	800cc1a <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800cc9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc9e:	681a      	ldr	r2, [r3, #0]
 800cca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cca2:	43db      	mvns	r3, r3
 800cca4:	401a      	ands	r2, r3
 800cca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cca8:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 800ccaa:	f001 fac7 	bl	800e23c <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 800ccae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccb0:	681b      	ldr	r3, [r3, #0]
}
 800ccb2:	4618      	mov	r0, r3
 800ccb4:	3738      	adds	r7, #56	; 0x38
 800ccb6:	46bd      	mov	sp, r7
 800ccb8:	bd80      	pop	{r7, pc}

0800ccba <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 800ccba:	b580      	push	{r7, lr}
 800ccbc:	b082      	sub	sp, #8
 800ccbe:	af00      	add	r7, sp, #0
 800ccc0:	6078      	str	r0, [r7, #4]
 800ccc2:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 800ccc4:	6839      	ldr	r1, [r7, #0]
 800ccc6:	6878      	ldr	r0, [r7, #4]
 800ccc8:	f7ff ff6c 	bl	800cba4 <xEventGroupSetBits>
}
 800cccc:	bf00      	nop
 800ccce:	3708      	adds	r7, #8
 800ccd0:	46bd      	mov	sp, r7
 800ccd2:	bd80      	pop	{r7, pc}

0800ccd4 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 800ccd4:	b480      	push	{r7}
 800ccd6:	b087      	sub	sp, #28
 800ccd8:	af00      	add	r7, sp, #0
 800ccda:	60f8      	str	r0, [r7, #12]
 800ccdc:	60b9      	str	r1, [r7, #8]
 800ccde:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 800cce0:	2300      	movs	r3, #0
 800cce2:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d107      	bne.n	800ccfa <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 800ccea:	68fa      	ldr	r2, [r7, #12]
 800ccec:	68bb      	ldr	r3, [r7, #8]
 800ccee:	4013      	ands	r3, r2
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d00a      	beq.n	800cd0a <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800ccf4:	2301      	movs	r3, #1
 800ccf6:	617b      	str	r3, [r7, #20]
 800ccf8:	e007      	b.n	800cd0a <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 800ccfa:	68fa      	ldr	r2, [r7, #12]
 800ccfc:	68bb      	ldr	r3, [r7, #8]
 800ccfe:	4013      	ands	r3, r2
 800cd00:	68ba      	ldr	r2, [r7, #8]
 800cd02:	429a      	cmp	r2, r3
 800cd04:	d101      	bne.n	800cd0a <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800cd06:	2301      	movs	r3, #1
 800cd08:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 800cd0a:	697b      	ldr	r3, [r7, #20]
}
 800cd0c:	4618      	mov	r0, r3
 800cd0e:	371c      	adds	r7, #28
 800cd10:	46bd      	mov	sp, r7
 800cd12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd16:	4770      	bx	lr

0800cd18 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800cd18:	b580      	push	{r7, lr}
 800cd1a:	b086      	sub	sp, #24
 800cd1c:	af00      	add	r7, sp, #0
 800cd1e:	60f8      	str	r0, [r7, #12]
 800cd20:	60b9      	str	r1, [r7, #8]
 800cd22:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	68ba      	ldr	r2, [r7, #8]
 800cd28:	68f9      	ldr	r1, [r7, #12]
 800cd2a:	4804      	ldr	r0, [pc, #16]	; (800cd3c <xEventGroupSetBitsFromISR+0x24>)
 800cd2c:	f002 fc4c 	bl	800f5c8 <xTimerPendFunctionCallFromISR>
 800cd30:	6178      	str	r0, [r7, #20]

		return xReturn;
 800cd32:	697b      	ldr	r3, [r7, #20]
	}
 800cd34:	4618      	mov	r0, r3
 800cd36:	3718      	adds	r7, #24
 800cd38:	46bd      	mov	sp, r7
 800cd3a:	bd80      	pop	{r7, pc}
 800cd3c:	0800ccbb 	.word	0x0800ccbb

0800cd40 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800cd40:	b480      	push	{r7}
 800cd42:	b083      	sub	sp, #12
 800cd44:	af00      	add	r7, sp, #0
 800cd46:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	f103 0208 	add.w	r2, r3, #8
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	f04f 32ff 	mov.w	r2, #4294967295
 800cd58:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	f103 0208 	add.w	r2, r3, #8
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	f103 0208 	add.w	r2, r3, #8
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	2200      	movs	r2, #0
 800cd72:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800cd74:	bf00      	nop
 800cd76:	370c      	adds	r7, #12
 800cd78:	46bd      	mov	sp, r7
 800cd7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd7e:	4770      	bx	lr

0800cd80 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800cd80:	b480      	push	{r7}
 800cd82:	b083      	sub	sp, #12
 800cd84:	af00      	add	r7, sp, #0
 800cd86:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	2200      	movs	r2, #0
 800cd8c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800cd8e:	bf00      	nop
 800cd90:	370c      	adds	r7, #12
 800cd92:	46bd      	mov	sp, r7
 800cd94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd98:	4770      	bx	lr

0800cd9a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800cd9a:	b480      	push	{r7}
 800cd9c:	b085      	sub	sp, #20
 800cd9e:	af00      	add	r7, sp, #0
 800cda0:	6078      	str	r0, [r7, #4]
 800cda2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	685b      	ldr	r3, [r3, #4]
 800cda8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800cdaa:	683b      	ldr	r3, [r7, #0]
 800cdac:	68fa      	ldr	r2, [r7, #12]
 800cdae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800cdb0:	68fb      	ldr	r3, [r7, #12]
 800cdb2:	689a      	ldr	r2, [r3, #8]
 800cdb4:	683b      	ldr	r3, [r7, #0]
 800cdb6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800cdb8:	68fb      	ldr	r3, [r7, #12]
 800cdba:	689b      	ldr	r3, [r3, #8]
 800cdbc:	683a      	ldr	r2, [r7, #0]
 800cdbe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800cdc0:	68fb      	ldr	r3, [r7, #12]
 800cdc2:	683a      	ldr	r2, [r7, #0]
 800cdc4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800cdc6:	683b      	ldr	r3, [r7, #0]
 800cdc8:	687a      	ldr	r2, [r7, #4]
 800cdca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	1c5a      	adds	r2, r3, #1
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	601a      	str	r2, [r3, #0]
}
 800cdd6:	bf00      	nop
 800cdd8:	3714      	adds	r7, #20
 800cdda:	46bd      	mov	sp, r7
 800cddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cde0:	4770      	bx	lr

0800cde2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800cde2:	b480      	push	{r7}
 800cde4:	b085      	sub	sp, #20
 800cde6:	af00      	add	r7, sp, #0
 800cde8:	6078      	str	r0, [r7, #4]
 800cdea:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800cdec:	683b      	ldr	r3, [r7, #0]
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800cdf2:	68bb      	ldr	r3, [r7, #8]
 800cdf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cdf8:	d103      	bne.n	800ce02 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	691b      	ldr	r3, [r3, #16]
 800cdfe:	60fb      	str	r3, [r7, #12]
 800ce00:	e00c      	b.n	800ce1c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	3308      	adds	r3, #8
 800ce06:	60fb      	str	r3, [r7, #12]
 800ce08:	e002      	b.n	800ce10 <vListInsert+0x2e>
 800ce0a:	68fb      	ldr	r3, [r7, #12]
 800ce0c:	685b      	ldr	r3, [r3, #4]
 800ce0e:	60fb      	str	r3, [r7, #12]
 800ce10:	68fb      	ldr	r3, [r7, #12]
 800ce12:	685b      	ldr	r3, [r3, #4]
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	68ba      	ldr	r2, [r7, #8]
 800ce18:	429a      	cmp	r2, r3
 800ce1a:	d2f6      	bcs.n	800ce0a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ce1c:	68fb      	ldr	r3, [r7, #12]
 800ce1e:	685a      	ldr	r2, [r3, #4]
 800ce20:	683b      	ldr	r3, [r7, #0]
 800ce22:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ce24:	683b      	ldr	r3, [r7, #0]
 800ce26:	685b      	ldr	r3, [r3, #4]
 800ce28:	683a      	ldr	r2, [r7, #0]
 800ce2a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ce2c:	683b      	ldr	r3, [r7, #0]
 800ce2e:	68fa      	ldr	r2, [r7, #12]
 800ce30:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800ce32:	68fb      	ldr	r3, [r7, #12]
 800ce34:	683a      	ldr	r2, [r7, #0]
 800ce36:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800ce38:	683b      	ldr	r3, [r7, #0]
 800ce3a:	687a      	ldr	r2, [r7, #4]
 800ce3c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	1c5a      	adds	r2, r3, #1
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	601a      	str	r2, [r3, #0]
}
 800ce48:	bf00      	nop
 800ce4a:	3714      	adds	r7, #20
 800ce4c:	46bd      	mov	sp, r7
 800ce4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce52:	4770      	bx	lr

0800ce54 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ce54:	b480      	push	{r7}
 800ce56:	b085      	sub	sp, #20
 800ce58:	af00      	add	r7, sp, #0
 800ce5a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	691b      	ldr	r3, [r3, #16]
 800ce60:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	685b      	ldr	r3, [r3, #4]
 800ce66:	687a      	ldr	r2, [r7, #4]
 800ce68:	6892      	ldr	r2, [r2, #8]
 800ce6a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	689b      	ldr	r3, [r3, #8]
 800ce70:	687a      	ldr	r2, [r7, #4]
 800ce72:	6852      	ldr	r2, [r2, #4]
 800ce74:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	685b      	ldr	r3, [r3, #4]
 800ce7a:	687a      	ldr	r2, [r7, #4]
 800ce7c:	429a      	cmp	r2, r3
 800ce7e:	d103      	bne.n	800ce88 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	689a      	ldr	r2, [r3, #8]
 800ce84:	68fb      	ldr	r3, [r7, #12]
 800ce86:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	2200      	movs	r2, #0
 800ce8c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	1e5a      	subs	r2, r3, #1
 800ce94:	68fb      	ldr	r3, [r7, #12]
 800ce96:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	681b      	ldr	r3, [r3, #0]
}
 800ce9c:	4618      	mov	r0, r3
 800ce9e:	3714      	adds	r7, #20
 800cea0:	46bd      	mov	sp, r7
 800cea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cea6:	4770      	bx	lr

0800cea8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800cea8:	b580      	push	{r7, lr}
 800ceaa:	b084      	sub	sp, #16
 800ceac:	af00      	add	r7, sp, #0
 800ceae:	6078      	str	r0, [r7, #4]
 800ceb0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ceb6:	68fb      	ldr	r3, [r7, #12]
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d10a      	bne.n	800ced2 <xQueueGenericReset+0x2a>
	__asm volatile
 800cebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cec0:	f383 8811 	msr	BASEPRI, r3
 800cec4:	f3bf 8f6f 	isb	sy
 800cec8:	f3bf 8f4f 	dsb	sy
 800cecc:	60bb      	str	r3, [r7, #8]
}
 800cece:	bf00      	nop
 800ced0:	e7fe      	b.n	800ced0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800ced2:	f002 fcc7 	bl	800f864 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ced6:	68fb      	ldr	r3, [r7, #12]
 800ced8:	681a      	ldr	r2, [r3, #0]
 800ceda:	68fb      	ldr	r3, [r7, #12]
 800cedc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cede:	68f9      	ldr	r1, [r7, #12]
 800cee0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800cee2:	fb01 f303 	mul.w	r3, r1, r3
 800cee6:	441a      	add	r2, r3
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ceec:	68fb      	ldr	r3, [r7, #12]
 800ceee:	2200      	movs	r2, #0
 800cef0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	681a      	ldr	r2, [r3, #0]
 800cef6:	68fb      	ldr	r3, [r7, #12]
 800cef8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	681a      	ldr	r2, [r3, #0]
 800cefe:	68fb      	ldr	r3, [r7, #12]
 800cf00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf02:	3b01      	subs	r3, #1
 800cf04:	68f9      	ldr	r1, [r7, #12]
 800cf06:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800cf08:	fb01 f303 	mul.w	r3, r1, r3
 800cf0c:	441a      	add	r2, r3
 800cf0e:	68fb      	ldr	r3, [r7, #12]
 800cf10:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800cf12:	68fb      	ldr	r3, [r7, #12]
 800cf14:	22ff      	movs	r2, #255	; 0xff
 800cf16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800cf1a:	68fb      	ldr	r3, [r7, #12]
 800cf1c:	22ff      	movs	r2, #255	; 0xff
 800cf1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800cf22:	683b      	ldr	r3, [r7, #0]
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	d114      	bne.n	800cf52 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cf28:	68fb      	ldr	r3, [r7, #12]
 800cf2a:	691b      	ldr	r3, [r3, #16]
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d01a      	beq.n	800cf66 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cf30:	68fb      	ldr	r3, [r7, #12]
 800cf32:	3310      	adds	r3, #16
 800cf34:	4618      	mov	r0, r3
 800cf36:	f001 fbd3 	bl	800e6e0 <xTaskRemoveFromEventList>
 800cf3a:	4603      	mov	r3, r0
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d012      	beq.n	800cf66 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800cf40:	4b0c      	ldr	r3, [pc, #48]	; (800cf74 <xQueueGenericReset+0xcc>)
 800cf42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cf46:	601a      	str	r2, [r3, #0]
 800cf48:	f3bf 8f4f 	dsb	sy
 800cf4c:	f3bf 8f6f 	isb	sy
 800cf50:	e009      	b.n	800cf66 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800cf52:	68fb      	ldr	r3, [r7, #12]
 800cf54:	3310      	adds	r3, #16
 800cf56:	4618      	mov	r0, r3
 800cf58:	f7ff fef2 	bl	800cd40 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800cf5c:	68fb      	ldr	r3, [r7, #12]
 800cf5e:	3324      	adds	r3, #36	; 0x24
 800cf60:	4618      	mov	r0, r3
 800cf62:	f7ff feed 	bl	800cd40 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800cf66:	f002 fcad 	bl	800f8c4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800cf6a:	2301      	movs	r3, #1
}
 800cf6c:	4618      	mov	r0, r3
 800cf6e:	3710      	adds	r7, #16
 800cf70:	46bd      	mov	sp, r7
 800cf72:	bd80      	pop	{r7, pc}
 800cf74:	e000ed04 	.word	0xe000ed04

0800cf78 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800cf78:	b580      	push	{r7, lr}
 800cf7a:	b08e      	sub	sp, #56	; 0x38
 800cf7c:	af02      	add	r7, sp, #8
 800cf7e:	60f8      	str	r0, [r7, #12]
 800cf80:	60b9      	str	r1, [r7, #8]
 800cf82:	607a      	str	r2, [r7, #4]
 800cf84:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800cf86:	68fb      	ldr	r3, [r7, #12]
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d10a      	bne.n	800cfa2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800cf8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf90:	f383 8811 	msr	BASEPRI, r3
 800cf94:	f3bf 8f6f 	isb	sy
 800cf98:	f3bf 8f4f 	dsb	sy
 800cf9c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800cf9e:	bf00      	nop
 800cfa0:	e7fe      	b.n	800cfa0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800cfa2:	683b      	ldr	r3, [r7, #0]
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d10a      	bne.n	800cfbe <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800cfa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfac:	f383 8811 	msr	BASEPRI, r3
 800cfb0:	f3bf 8f6f 	isb	sy
 800cfb4:	f3bf 8f4f 	dsb	sy
 800cfb8:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cfba:	bf00      	nop
 800cfbc:	e7fe      	b.n	800cfbc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d002      	beq.n	800cfca <xQueueGenericCreateStatic+0x52>
 800cfc4:	68bb      	ldr	r3, [r7, #8]
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d001      	beq.n	800cfce <xQueueGenericCreateStatic+0x56>
 800cfca:	2301      	movs	r3, #1
 800cfcc:	e000      	b.n	800cfd0 <xQueueGenericCreateStatic+0x58>
 800cfce:	2300      	movs	r3, #0
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	d10a      	bne.n	800cfea <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800cfd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfd8:	f383 8811 	msr	BASEPRI, r3
 800cfdc:	f3bf 8f6f 	isb	sy
 800cfe0:	f3bf 8f4f 	dsb	sy
 800cfe4:	623b      	str	r3, [r7, #32]
}
 800cfe6:	bf00      	nop
 800cfe8:	e7fe      	b.n	800cfe8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d102      	bne.n	800cff6 <xQueueGenericCreateStatic+0x7e>
 800cff0:	68bb      	ldr	r3, [r7, #8]
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d101      	bne.n	800cffa <xQueueGenericCreateStatic+0x82>
 800cff6:	2301      	movs	r3, #1
 800cff8:	e000      	b.n	800cffc <xQueueGenericCreateStatic+0x84>
 800cffa:	2300      	movs	r3, #0
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d10a      	bne.n	800d016 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800d000:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d004:	f383 8811 	msr	BASEPRI, r3
 800d008:	f3bf 8f6f 	isb	sy
 800d00c:	f3bf 8f4f 	dsb	sy
 800d010:	61fb      	str	r3, [r7, #28]
}
 800d012:	bf00      	nop
 800d014:	e7fe      	b.n	800d014 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800d016:	2350      	movs	r3, #80	; 0x50
 800d018:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800d01a:	697b      	ldr	r3, [r7, #20]
 800d01c:	2b50      	cmp	r3, #80	; 0x50
 800d01e:	d00a      	beq.n	800d036 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800d020:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d024:	f383 8811 	msr	BASEPRI, r3
 800d028:	f3bf 8f6f 	isb	sy
 800d02c:	f3bf 8f4f 	dsb	sy
 800d030:	61bb      	str	r3, [r7, #24]
}
 800d032:	bf00      	nop
 800d034:	e7fe      	b.n	800d034 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d036:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d038:	683b      	ldr	r3, [r7, #0]
 800d03a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800d03c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d00d      	beq.n	800d05e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d044:	2201      	movs	r2, #1
 800d046:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d04a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800d04e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d050:	9300      	str	r3, [sp, #0]
 800d052:	4613      	mov	r3, r2
 800d054:	687a      	ldr	r2, [r7, #4]
 800d056:	68b9      	ldr	r1, [r7, #8]
 800d058:	68f8      	ldr	r0, [r7, #12]
 800d05a:	f000 f83f 	bl	800d0dc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d05e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800d060:	4618      	mov	r0, r3
 800d062:	3730      	adds	r7, #48	; 0x30
 800d064:	46bd      	mov	sp, r7
 800d066:	bd80      	pop	{r7, pc}

0800d068 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800d068:	b580      	push	{r7, lr}
 800d06a:	b08a      	sub	sp, #40	; 0x28
 800d06c:	af02      	add	r7, sp, #8
 800d06e:	60f8      	str	r0, [r7, #12]
 800d070:	60b9      	str	r1, [r7, #8]
 800d072:	4613      	mov	r3, r2
 800d074:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d076:	68fb      	ldr	r3, [r7, #12]
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d10a      	bne.n	800d092 <xQueueGenericCreate+0x2a>
	__asm volatile
 800d07c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d080:	f383 8811 	msr	BASEPRI, r3
 800d084:	f3bf 8f6f 	isb	sy
 800d088:	f3bf 8f4f 	dsb	sy
 800d08c:	613b      	str	r3, [r7, #16]
}
 800d08e:	bf00      	nop
 800d090:	e7fe      	b.n	800d090 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d092:	68fb      	ldr	r3, [r7, #12]
 800d094:	68ba      	ldr	r2, [r7, #8]
 800d096:	fb02 f303 	mul.w	r3, r2, r3
 800d09a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800d09c:	69fb      	ldr	r3, [r7, #28]
 800d09e:	3350      	adds	r3, #80	; 0x50
 800d0a0:	4618      	mov	r0, r3
 800d0a2:	f002 fd01 	bl	800faa8 <pvPortMalloc>
 800d0a6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800d0a8:	69bb      	ldr	r3, [r7, #24]
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	d011      	beq.n	800d0d2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800d0ae:	69bb      	ldr	r3, [r7, #24]
 800d0b0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d0b2:	697b      	ldr	r3, [r7, #20]
 800d0b4:	3350      	adds	r3, #80	; 0x50
 800d0b6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800d0b8:	69bb      	ldr	r3, [r7, #24]
 800d0ba:	2200      	movs	r2, #0
 800d0bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d0c0:	79fa      	ldrb	r2, [r7, #7]
 800d0c2:	69bb      	ldr	r3, [r7, #24]
 800d0c4:	9300      	str	r3, [sp, #0]
 800d0c6:	4613      	mov	r3, r2
 800d0c8:	697a      	ldr	r2, [r7, #20]
 800d0ca:	68b9      	ldr	r1, [r7, #8]
 800d0cc:	68f8      	ldr	r0, [r7, #12]
 800d0ce:	f000 f805 	bl	800d0dc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d0d2:	69bb      	ldr	r3, [r7, #24]
	}
 800d0d4:	4618      	mov	r0, r3
 800d0d6:	3720      	adds	r7, #32
 800d0d8:	46bd      	mov	sp, r7
 800d0da:	bd80      	pop	{r7, pc}

0800d0dc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800d0dc:	b580      	push	{r7, lr}
 800d0de:	b084      	sub	sp, #16
 800d0e0:	af00      	add	r7, sp, #0
 800d0e2:	60f8      	str	r0, [r7, #12]
 800d0e4:	60b9      	str	r1, [r7, #8]
 800d0e6:	607a      	str	r2, [r7, #4]
 800d0e8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800d0ea:	68bb      	ldr	r3, [r7, #8]
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d103      	bne.n	800d0f8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d0f0:	69bb      	ldr	r3, [r7, #24]
 800d0f2:	69ba      	ldr	r2, [r7, #24]
 800d0f4:	601a      	str	r2, [r3, #0]
 800d0f6:	e002      	b.n	800d0fe <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d0f8:	69bb      	ldr	r3, [r7, #24]
 800d0fa:	687a      	ldr	r2, [r7, #4]
 800d0fc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800d0fe:	69bb      	ldr	r3, [r7, #24]
 800d100:	68fa      	ldr	r2, [r7, #12]
 800d102:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d104:	69bb      	ldr	r3, [r7, #24]
 800d106:	68ba      	ldr	r2, [r7, #8]
 800d108:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d10a:	2101      	movs	r1, #1
 800d10c:	69b8      	ldr	r0, [r7, #24]
 800d10e:	f7ff fecb 	bl	800cea8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800d112:	69bb      	ldr	r3, [r7, #24]
 800d114:	78fa      	ldrb	r2, [r7, #3]
 800d116:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800d11a:	bf00      	nop
 800d11c:	3710      	adds	r7, #16
 800d11e:	46bd      	mov	sp, r7
 800d120:	bd80      	pop	{r7, pc}

0800d122 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800d122:	b580      	push	{r7, lr}
 800d124:	b082      	sub	sp, #8
 800d126:	af00      	add	r7, sp, #0
 800d128:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d00e      	beq.n	800d14e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	2200      	movs	r2, #0
 800d134:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	2200      	movs	r2, #0
 800d13a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	2200      	movs	r2, #0
 800d140:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800d142:	2300      	movs	r3, #0
 800d144:	2200      	movs	r2, #0
 800d146:	2100      	movs	r1, #0
 800d148:	6878      	ldr	r0, [r7, #4]
 800d14a:	f000 f8a1 	bl	800d290 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800d14e:	bf00      	nop
 800d150:	3708      	adds	r7, #8
 800d152:	46bd      	mov	sp, r7
 800d154:	bd80      	pop	{r7, pc}

0800d156 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800d156:	b580      	push	{r7, lr}
 800d158:	b086      	sub	sp, #24
 800d15a:	af00      	add	r7, sp, #0
 800d15c:	4603      	mov	r3, r0
 800d15e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800d160:	2301      	movs	r3, #1
 800d162:	617b      	str	r3, [r7, #20]
 800d164:	2300      	movs	r3, #0
 800d166:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800d168:	79fb      	ldrb	r3, [r7, #7]
 800d16a:	461a      	mov	r2, r3
 800d16c:	6939      	ldr	r1, [r7, #16]
 800d16e:	6978      	ldr	r0, [r7, #20]
 800d170:	f7ff ff7a 	bl	800d068 <xQueueGenericCreate>
 800d174:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800d176:	68f8      	ldr	r0, [r7, #12]
 800d178:	f7ff ffd3 	bl	800d122 <prvInitialiseMutex>

		return xNewQueue;
 800d17c:	68fb      	ldr	r3, [r7, #12]
	}
 800d17e:	4618      	mov	r0, r3
 800d180:	3718      	adds	r7, #24
 800d182:	46bd      	mov	sp, r7
 800d184:	bd80      	pop	{r7, pc}

0800d186 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800d186:	b580      	push	{r7, lr}
 800d188:	b088      	sub	sp, #32
 800d18a:	af02      	add	r7, sp, #8
 800d18c:	4603      	mov	r3, r0
 800d18e:	6039      	str	r1, [r7, #0]
 800d190:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800d192:	2301      	movs	r3, #1
 800d194:	617b      	str	r3, [r7, #20]
 800d196:	2300      	movs	r3, #0
 800d198:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800d19a:	79fb      	ldrb	r3, [r7, #7]
 800d19c:	9300      	str	r3, [sp, #0]
 800d19e:	683b      	ldr	r3, [r7, #0]
 800d1a0:	2200      	movs	r2, #0
 800d1a2:	6939      	ldr	r1, [r7, #16]
 800d1a4:	6978      	ldr	r0, [r7, #20]
 800d1a6:	f7ff fee7 	bl	800cf78 <xQueueGenericCreateStatic>
 800d1aa:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800d1ac:	68f8      	ldr	r0, [r7, #12]
 800d1ae:	f7ff ffb8 	bl	800d122 <prvInitialiseMutex>

		return xNewQueue;
 800d1b2:	68fb      	ldr	r3, [r7, #12]
	}
 800d1b4:	4618      	mov	r0, r3
 800d1b6:	3718      	adds	r7, #24
 800d1b8:	46bd      	mov	sp, r7
 800d1ba:	bd80      	pop	{r7, pc}

0800d1bc <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800d1bc:	b590      	push	{r4, r7, lr}
 800d1be:	b087      	sub	sp, #28
 800d1c0:	af00      	add	r7, sp, #0
 800d1c2:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800d1c8:	693b      	ldr	r3, [r7, #16]
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	d10a      	bne.n	800d1e4 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 800d1ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1d2:	f383 8811 	msr	BASEPRI, r3
 800d1d6:	f3bf 8f6f 	isb	sy
 800d1da:	f3bf 8f4f 	dsb	sy
 800d1de:	60fb      	str	r3, [r7, #12]
}
 800d1e0:	bf00      	nop
 800d1e2:	e7fe      	b.n	800d1e2 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800d1e4:	693b      	ldr	r3, [r7, #16]
 800d1e6:	689c      	ldr	r4, [r3, #8]
 800d1e8:	f001 fc9a 	bl	800eb20 <xTaskGetCurrentTaskHandle>
 800d1ec:	4603      	mov	r3, r0
 800d1ee:	429c      	cmp	r4, r3
 800d1f0:	d111      	bne.n	800d216 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800d1f2:	693b      	ldr	r3, [r7, #16]
 800d1f4:	68db      	ldr	r3, [r3, #12]
 800d1f6:	1e5a      	subs	r2, r3, #1
 800d1f8:	693b      	ldr	r3, [r7, #16]
 800d1fa:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800d1fc:	693b      	ldr	r3, [r7, #16]
 800d1fe:	68db      	ldr	r3, [r3, #12]
 800d200:	2b00      	cmp	r3, #0
 800d202:	d105      	bne.n	800d210 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800d204:	2300      	movs	r3, #0
 800d206:	2200      	movs	r2, #0
 800d208:	2100      	movs	r1, #0
 800d20a:	6938      	ldr	r0, [r7, #16]
 800d20c:	f000 f840 	bl	800d290 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800d210:	2301      	movs	r3, #1
 800d212:	617b      	str	r3, [r7, #20]
 800d214:	e001      	b.n	800d21a <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800d216:	2300      	movs	r3, #0
 800d218:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800d21a:	697b      	ldr	r3, [r7, #20]
	}
 800d21c:	4618      	mov	r0, r3
 800d21e:	371c      	adds	r7, #28
 800d220:	46bd      	mov	sp, r7
 800d222:	bd90      	pop	{r4, r7, pc}

0800d224 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800d224:	b590      	push	{r4, r7, lr}
 800d226:	b087      	sub	sp, #28
 800d228:	af00      	add	r7, sp, #0
 800d22a:	6078      	str	r0, [r7, #4]
 800d22c:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800d232:	693b      	ldr	r3, [r7, #16]
 800d234:	2b00      	cmp	r3, #0
 800d236:	d10a      	bne.n	800d24e <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 800d238:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d23c:	f383 8811 	msr	BASEPRI, r3
 800d240:	f3bf 8f6f 	isb	sy
 800d244:	f3bf 8f4f 	dsb	sy
 800d248:	60fb      	str	r3, [r7, #12]
}
 800d24a:	bf00      	nop
 800d24c:	e7fe      	b.n	800d24c <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800d24e:	693b      	ldr	r3, [r7, #16]
 800d250:	689c      	ldr	r4, [r3, #8]
 800d252:	f001 fc65 	bl	800eb20 <xTaskGetCurrentTaskHandle>
 800d256:	4603      	mov	r3, r0
 800d258:	429c      	cmp	r4, r3
 800d25a:	d107      	bne.n	800d26c <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800d25c:	693b      	ldr	r3, [r7, #16]
 800d25e:	68db      	ldr	r3, [r3, #12]
 800d260:	1c5a      	adds	r2, r3, #1
 800d262:	693b      	ldr	r3, [r7, #16]
 800d264:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800d266:	2301      	movs	r3, #1
 800d268:	617b      	str	r3, [r7, #20]
 800d26a:	e00c      	b.n	800d286 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800d26c:	6839      	ldr	r1, [r7, #0]
 800d26e:	6938      	ldr	r0, [r7, #16]
 800d270:	f000 fa88 	bl	800d784 <xQueueSemaphoreTake>
 800d274:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800d276:	697b      	ldr	r3, [r7, #20]
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d004      	beq.n	800d286 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800d27c:	693b      	ldr	r3, [r7, #16]
 800d27e:	68db      	ldr	r3, [r3, #12]
 800d280:	1c5a      	adds	r2, r3, #1
 800d282:	693b      	ldr	r3, [r7, #16]
 800d284:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800d286:	697b      	ldr	r3, [r7, #20]
	}
 800d288:	4618      	mov	r0, r3
 800d28a:	371c      	adds	r7, #28
 800d28c:	46bd      	mov	sp, r7
 800d28e:	bd90      	pop	{r4, r7, pc}

0800d290 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d290:	b580      	push	{r7, lr}
 800d292:	b08e      	sub	sp, #56	; 0x38
 800d294:	af00      	add	r7, sp, #0
 800d296:	60f8      	str	r0, [r7, #12]
 800d298:	60b9      	str	r1, [r7, #8]
 800d29a:	607a      	str	r2, [r7, #4]
 800d29c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d29e:	2300      	movs	r3, #0
 800d2a0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d2a2:	68fb      	ldr	r3, [r7, #12]
 800d2a4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d2a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d10a      	bne.n	800d2c2 <xQueueGenericSend+0x32>
	__asm volatile
 800d2ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2b0:	f383 8811 	msr	BASEPRI, r3
 800d2b4:	f3bf 8f6f 	isb	sy
 800d2b8:	f3bf 8f4f 	dsb	sy
 800d2bc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d2be:	bf00      	nop
 800d2c0:	e7fe      	b.n	800d2c0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d2c2:	68bb      	ldr	r3, [r7, #8]
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d103      	bne.n	800d2d0 <xQueueGenericSend+0x40>
 800d2c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d101      	bne.n	800d2d4 <xQueueGenericSend+0x44>
 800d2d0:	2301      	movs	r3, #1
 800d2d2:	e000      	b.n	800d2d6 <xQueueGenericSend+0x46>
 800d2d4:	2300      	movs	r3, #0
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d10a      	bne.n	800d2f0 <xQueueGenericSend+0x60>
	__asm volatile
 800d2da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2de:	f383 8811 	msr	BASEPRI, r3
 800d2e2:	f3bf 8f6f 	isb	sy
 800d2e6:	f3bf 8f4f 	dsb	sy
 800d2ea:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d2ec:	bf00      	nop
 800d2ee:	e7fe      	b.n	800d2ee <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d2f0:	683b      	ldr	r3, [r7, #0]
 800d2f2:	2b02      	cmp	r3, #2
 800d2f4:	d103      	bne.n	800d2fe <xQueueGenericSend+0x6e>
 800d2f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d2fa:	2b01      	cmp	r3, #1
 800d2fc:	d101      	bne.n	800d302 <xQueueGenericSend+0x72>
 800d2fe:	2301      	movs	r3, #1
 800d300:	e000      	b.n	800d304 <xQueueGenericSend+0x74>
 800d302:	2300      	movs	r3, #0
 800d304:	2b00      	cmp	r3, #0
 800d306:	d10a      	bne.n	800d31e <xQueueGenericSend+0x8e>
	__asm volatile
 800d308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d30c:	f383 8811 	msr	BASEPRI, r3
 800d310:	f3bf 8f6f 	isb	sy
 800d314:	f3bf 8f4f 	dsb	sy
 800d318:	623b      	str	r3, [r7, #32]
}
 800d31a:	bf00      	nop
 800d31c:	e7fe      	b.n	800d31c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d31e:	f001 fc0f 	bl	800eb40 <xTaskGetSchedulerState>
 800d322:	4603      	mov	r3, r0
 800d324:	2b00      	cmp	r3, #0
 800d326:	d102      	bne.n	800d32e <xQueueGenericSend+0x9e>
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	d101      	bne.n	800d332 <xQueueGenericSend+0xa2>
 800d32e:	2301      	movs	r3, #1
 800d330:	e000      	b.n	800d334 <xQueueGenericSend+0xa4>
 800d332:	2300      	movs	r3, #0
 800d334:	2b00      	cmp	r3, #0
 800d336:	d10a      	bne.n	800d34e <xQueueGenericSend+0xbe>
	__asm volatile
 800d338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d33c:	f383 8811 	msr	BASEPRI, r3
 800d340:	f3bf 8f6f 	isb	sy
 800d344:	f3bf 8f4f 	dsb	sy
 800d348:	61fb      	str	r3, [r7, #28]
}
 800d34a:	bf00      	nop
 800d34c:	e7fe      	b.n	800d34c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d34e:	f002 fa89 	bl	800f864 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d354:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d358:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d35a:	429a      	cmp	r2, r3
 800d35c:	d302      	bcc.n	800d364 <xQueueGenericSend+0xd4>
 800d35e:	683b      	ldr	r3, [r7, #0]
 800d360:	2b02      	cmp	r3, #2
 800d362:	d129      	bne.n	800d3b8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d364:	683a      	ldr	r2, [r7, #0]
 800d366:	68b9      	ldr	r1, [r7, #8]
 800d368:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d36a:	f000 fbaf 	bl	800dacc <prvCopyDataToQueue>
 800d36e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d374:	2b00      	cmp	r3, #0
 800d376:	d010      	beq.n	800d39a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d37a:	3324      	adds	r3, #36	; 0x24
 800d37c:	4618      	mov	r0, r3
 800d37e:	f001 f9af 	bl	800e6e0 <xTaskRemoveFromEventList>
 800d382:	4603      	mov	r3, r0
 800d384:	2b00      	cmp	r3, #0
 800d386:	d013      	beq.n	800d3b0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d388:	4b3f      	ldr	r3, [pc, #252]	; (800d488 <xQueueGenericSend+0x1f8>)
 800d38a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d38e:	601a      	str	r2, [r3, #0]
 800d390:	f3bf 8f4f 	dsb	sy
 800d394:	f3bf 8f6f 	isb	sy
 800d398:	e00a      	b.n	800d3b0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d39a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d007      	beq.n	800d3b0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d3a0:	4b39      	ldr	r3, [pc, #228]	; (800d488 <xQueueGenericSend+0x1f8>)
 800d3a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d3a6:	601a      	str	r2, [r3, #0]
 800d3a8:	f3bf 8f4f 	dsb	sy
 800d3ac:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d3b0:	f002 fa88 	bl	800f8c4 <vPortExitCritical>
				return pdPASS;
 800d3b4:	2301      	movs	r3, #1
 800d3b6:	e063      	b.n	800d480 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	d103      	bne.n	800d3c6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d3be:	f002 fa81 	bl	800f8c4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d3c2:	2300      	movs	r3, #0
 800d3c4:	e05c      	b.n	800d480 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d3c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d106      	bne.n	800d3da <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d3cc:	f107 0314 	add.w	r3, r7, #20
 800d3d0:	4618      	mov	r0, r3
 800d3d2:	f001 fa4b 	bl	800e86c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d3d6:	2301      	movs	r3, #1
 800d3d8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d3da:	f002 fa73 	bl	800f8c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d3de:	f000 ff1f 	bl	800e220 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d3e2:	f002 fa3f 	bl	800f864 <vPortEnterCritical>
 800d3e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d3ec:	b25b      	sxtb	r3, r3
 800d3ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d3f2:	d103      	bne.n	800d3fc <xQueueGenericSend+0x16c>
 800d3f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3f6:	2200      	movs	r2, #0
 800d3f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d3fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d402:	b25b      	sxtb	r3, r3
 800d404:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d408:	d103      	bne.n	800d412 <xQueueGenericSend+0x182>
 800d40a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d40c:	2200      	movs	r2, #0
 800d40e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d412:	f002 fa57 	bl	800f8c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d416:	1d3a      	adds	r2, r7, #4
 800d418:	f107 0314 	add.w	r3, r7, #20
 800d41c:	4611      	mov	r1, r2
 800d41e:	4618      	mov	r0, r3
 800d420:	f001 fa3a 	bl	800e898 <xTaskCheckForTimeOut>
 800d424:	4603      	mov	r3, r0
 800d426:	2b00      	cmp	r3, #0
 800d428:	d124      	bne.n	800d474 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d42a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d42c:	f000 fc46 	bl	800dcbc <prvIsQueueFull>
 800d430:	4603      	mov	r3, r0
 800d432:	2b00      	cmp	r3, #0
 800d434:	d018      	beq.n	800d468 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d438:	3310      	adds	r3, #16
 800d43a:	687a      	ldr	r2, [r7, #4]
 800d43c:	4611      	mov	r1, r2
 800d43e:	4618      	mov	r0, r3
 800d440:	f001 f8c2 	bl	800e5c8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d444:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d446:	f000 fbd1 	bl	800dbec <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d44a:	f000 fef7 	bl	800e23c <xTaskResumeAll>
 800d44e:	4603      	mov	r3, r0
 800d450:	2b00      	cmp	r3, #0
 800d452:	f47f af7c 	bne.w	800d34e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800d456:	4b0c      	ldr	r3, [pc, #48]	; (800d488 <xQueueGenericSend+0x1f8>)
 800d458:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d45c:	601a      	str	r2, [r3, #0]
 800d45e:	f3bf 8f4f 	dsb	sy
 800d462:	f3bf 8f6f 	isb	sy
 800d466:	e772      	b.n	800d34e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d468:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d46a:	f000 fbbf 	bl	800dbec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d46e:	f000 fee5 	bl	800e23c <xTaskResumeAll>
 800d472:	e76c      	b.n	800d34e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d474:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d476:	f000 fbb9 	bl	800dbec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d47a:	f000 fedf 	bl	800e23c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d47e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d480:	4618      	mov	r0, r3
 800d482:	3738      	adds	r7, #56	; 0x38
 800d484:	46bd      	mov	sp, r7
 800d486:	bd80      	pop	{r7, pc}
 800d488:	e000ed04 	.word	0xe000ed04

0800d48c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800d48c:	b580      	push	{r7, lr}
 800d48e:	b090      	sub	sp, #64	; 0x40
 800d490:	af00      	add	r7, sp, #0
 800d492:	60f8      	str	r0, [r7, #12]
 800d494:	60b9      	str	r1, [r7, #8]
 800d496:	607a      	str	r2, [r7, #4]
 800d498:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d49a:	68fb      	ldr	r3, [r7, #12]
 800d49c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800d49e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	d10a      	bne.n	800d4ba <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800d4a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4a8:	f383 8811 	msr	BASEPRI, r3
 800d4ac:	f3bf 8f6f 	isb	sy
 800d4b0:	f3bf 8f4f 	dsb	sy
 800d4b4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d4b6:	bf00      	nop
 800d4b8:	e7fe      	b.n	800d4b8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d4ba:	68bb      	ldr	r3, [r7, #8]
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	d103      	bne.n	800d4c8 <xQueueGenericSendFromISR+0x3c>
 800d4c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d101      	bne.n	800d4cc <xQueueGenericSendFromISR+0x40>
 800d4c8:	2301      	movs	r3, #1
 800d4ca:	e000      	b.n	800d4ce <xQueueGenericSendFromISR+0x42>
 800d4cc:	2300      	movs	r3, #0
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	d10a      	bne.n	800d4e8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800d4d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4d6:	f383 8811 	msr	BASEPRI, r3
 800d4da:	f3bf 8f6f 	isb	sy
 800d4de:	f3bf 8f4f 	dsb	sy
 800d4e2:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d4e4:	bf00      	nop
 800d4e6:	e7fe      	b.n	800d4e6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d4e8:	683b      	ldr	r3, [r7, #0]
 800d4ea:	2b02      	cmp	r3, #2
 800d4ec:	d103      	bne.n	800d4f6 <xQueueGenericSendFromISR+0x6a>
 800d4ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d4f2:	2b01      	cmp	r3, #1
 800d4f4:	d101      	bne.n	800d4fa <xQueueGenericSendFromISR+0x6e>
 800d4f6:	2301      	movs	r3, #1
 800d4f8:	e000      	b.n	800d4fc <xQueueGenericSendFromISR+0x70>
 800d4fa:	2300      	movs	r3, #0
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	d10a      	bne.n	800d516 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800d500:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d504:	f383 8811 	msr	BASEPRI, r3
 800d508:	f3bf 8f6f 	isb	sy
 800d50c:	f3bf 8f4f 	dsb	sy
 800d510:	623b      	str	r3, [r7, #32]
}
 800d512:	bf00      	nop
 800d514:	e7fe      	b.n	800d514 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d516:	f002 fa87 	bl	800fa28 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800d51a:	f3ef 8211 	mrs	r2, BASEPRI
 800d51e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d522:	f383 8811 	msr	BASEPRI, r3
 800d526:	f3bf 8f6f 	isb	sy
 800d52a:	f3bf 8f4f 	dsb	sy
 800d52e:	61fa      	str	r2, [r7, #28]
 800d530:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800d532:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d534:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d538:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d53a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d53c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d53e:	429a      	cmp	r2, r3
 800d540:	d302      	bcc.n	800d548 <xQueueGenericSendFromISR+0xbc>
 800d542:	683b      	ldr	r3, [r7, #0]
 800d544:	2b02      	cmp	r3, #2
 800d546:	d12f      	bne.n	800d5a8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d54a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d54e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d556:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d558:	683a      	ldr	r2, [r7, #0]
 800d55a:	68b9      	ldr	r1, [r7, #8]
 800d55c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d55e:	f000 fab5 	bl	800dacc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d562:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800d566:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d56a:	d112      	bne.n	800d592 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d56c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d56e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d570:	2b00      	cmp	r3, #0
 800d572:	d016      	beq.n	800d5a2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d576:	3324      	adds	r3, #36	; 0x24
 800d578:	4618      	mov	r0, r3
 800d57a:	f001 f8b1 	bl	800e6e0 <xTaskRemoveFromEventList>
 800d57e:	4603      	mov	r3, r0
 800d580:	2b00      	cmp	r3, #0
 800d582:	d00e      	beq.n	800d5a2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	2b00      	cmp	r3, #0
 800d588:	d00b      	beq.n	800d5a2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	2201      	movs	r2, #1
 800d58e:	601a      	str	r2, [r3, #0]
 800d590:	e007      	b.n	800d5a2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d592:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d596:	3301      	adds	r3, #1
 800d598:	b2db      	uxtb	r3, r3
 800d59a:	b25a      	sxtb	r2, r3
 800d59c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d59e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d5a2:	2301      	movs	r3, #1
 800d5a4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800d5a6:	e001      	b.n	800d5ac <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d5a8:	2300      	movs	r3, #0
 800d5aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d5ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d5ae:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d5b0:	697b      	ldr	r3, [r7, #20]
 800d5b2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800d5b6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d5b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800d5ba:	4618      	mov	r0, r3
 800d5bc:	3740      	adds	r7, #64	; 0x40
 800d5be:	46bd      	mov	sp, r7
 800d5c0:	bd80      	pop	{r7, pc}
	...

0800d5c4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d5c4:	b580      	push	{r7, lr}
 800d5c6:	b08c      	sub	sp, #48	; 0x30
 800d5c8:	af00      	add	r7, sp, #0
 800d5ca:	60f8      	str	r0, [r7, #12]
 800d5cc:	60b9      	str	r1, [r7, #8]
 800d5ce:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d5d0:	2300      	movs	r3, #0
 800d5d2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d5d4:	68fb      	ldr	r3, [r7, #12]
 800d5d6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d5d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	d10a      	bne.n	800d5f4 <xQueueReceive+0x30>
	__asm volatile
 800d5de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5e2:	f383 8811 	msr	BASEPRI, r3
 800d5e6:	f3bf 8f6f 	isb	sy
 800d5ea:	f3bf 8f4f 	dsb	sy
 800d5ee:	623b      	str	r3, [r7, #32]
}
 800d5f0:	bf00      	nop
 800d5f2:	e7fe      	b.n	800d5f2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d5f4:	68bb      	ldr	r3, [r7, #8]
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	d103      	bne.n	800d602 <xQueueReceive+0x3e>
 800d5fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	d101      	bne.n	800d606 <xQueueReceive+0x42>
 800d602:	2301      	movs	r3, #1
 800d604:	e000      	b.n	800d608 <xQueueReceive+0x44>
 800d606:	2300      	movs	r3, #0
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d10a      	bne.n	800d622 <xQueueReceive+0x5e>
	__asm volatile
 800d60c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d610:	f383 8811 	msr	BASEPRI, r3
 800d614:	f3bf 8f6f 	isb	sy
 800d618:	f3bf 8f4f 	dsb	sy
 800d61c:	61fb      	str	r3, [r7, #28]
}
 800d61e:	bf00      	nop
 800d620:	e7fe      	b.n	800d620 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d622:	f001 fa8d 	bl	800eb40 <xTaskGetSchedulerState>
 800d626:	4603      	mov	r3, r0
 800d628:	2b00      	cmp	r3, #0
 800d62a:	d102      	bne.n	800d632 <xQueueReceive+0x6e>
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d101      	bne.n	800d636 <xQueueReceive+0x72>
 800d632:	2301      	movs	r3, #1
 800d634:	e000      	b.n	800d638 <xQueueReceive+0x74>
 800d636:	2300      	movs	r3, #0
 800d638:	2b00      	cmp	r3, #0
 800d63a:	d10a      	bne.n	800d652 <xQueueReceive+0x8e>
	__asm volatile
 800d63c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d640:	f383 8811 	msr	BASEPRI, r3
 800d644:	f3bf 8f6f 	isb	sy
 800d648:	f3bf 8f4f 	dsb	sy
 800d64c:	61bb      	str	r3, [r7, #24]
}
 800d64e:	bf00      	nop
 800d650:	e7fe      	b.n	800d650 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d652:	f002 f907 	bl	800f864 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d65a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d65c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d01f      	beq.n	800d6a2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d662:	68b9      	ldr	r1, [r7, #8]
 800d664:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d666:	f000 fa9b 	bl	800dba0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d66a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d66c:	1e5a      	subs	r2, r3, #1
 800d66e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d670:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d674:	691b      	ldr	r3, [r3, #16]
 800d676:	2b00      	cmp	r3, #0
 800d678:	d00f      	beq.n	800d69a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d67a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d67c:	3310      	adds	r3, #16
 800d67e:	4618      	mov	r0, r3
 800d680:	f001 f82e 	bl	800e6e0 <xTaskRemoveFromEventList>
 800d684:	4603      	mov	r3, r0
 800d686:	2b00      	cmp	r3, #0
 800d688:	d007      	beq.n	800d69a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d68a:	4b3d      	ldr	r3, [pc, #244]	; (800d780 <xQueueReceive+0x1bc>)
 800d68c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d690:	601a      	str	r2, [r3, #0]
 800d692:	f3bf 8f4f 	dsb	sy
 800d696:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d69a:	f002 f913 	bl	800f8c4 <vPortExitCritical>
				return pdPASS;
 800d69e:	2301      	movs	r3, #1
 800d6a0:	e069      	b.n	800d776 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d103      	bne.n	800d6b0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d6a8:	f002 f90c 	bl	800f8c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d6ac:	2300      	movs	r3, #0
 800d6ae:	e062      	b.n	800d776 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d6b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	d106      	bne.n	800d6c4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d6b6:	f107 0310 	add.w	r3, r7, #16
 800d6ba:	4618      	mov	r0, r3
 800d6bc:	f001 f8d6 	bl	800e86c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d6c0:	2301      	movs	r3, #1
 800d6c2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d6c4:	f002 f8fe 	bl	800f8c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d6c8:	f000 fdaa 	bl	800e220 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d6cc:	f002 f8ca 	bl	800f864 <vPortEnterCritical>
 800d6d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d6d6:	b25b      	sxtb	r3, r3
 800d6d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d6dc:	d103      	bne.n	800d6e6 <xQueueReceive+0x122>
 800d6de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6e0:	2200      	movs	r2, #0
 800d6e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d6e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d6ec:	b25b      	sxtb	r3, r3
 800d6ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d6f2:	d103      	bne.n	800d6fc <xQueueReceive+0x138>
 800d6f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6f6:	2200      	movs	r2, #0
 800d6f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d6fc:	f002 f8e2 	bl	800f8c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d700:	1d3a      	adds	r2, r7, #4
 800d702:	f107 0310 	add.w	r3, r7, #16
 800d706:	4611      	mov	r1, r2
 800d708:	4618      	mov	r0, r3
 800d70a:	f001 f8c5 	bl	800e898 <xTaskCheckForTimeOut>
 800d70e:	4603      	mov	r3, r0
 800d710:	2b00      	cmp	r3, #0
 800d712:	d123      	bne.n	800d75c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d714:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d716:	f000 fabb 	bl	800dc90 <prvIsQueueEmpty>
 800d71a:	4603      	mov	r3, r0
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d017      	beq.n	800d750 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d722:	3324      	adds	r3, #36	; 0x24
 800d724:	687a      	ldr	r2, [r7, #4]
 800d726:	4611      	mov	r1, r2
 800d728:	4618      	mov	r0, r3
 800d72a:	f000 ff4d 	bl	800e5c8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d72e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d730:	f000 fa5c 	bl	800dbec <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d734:	f000 fd82 	bl	800e23c <xTaskResumeAll>
 800d738:	4603      	mov	r3, r0
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d189      	bne.n	800d652 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800d73e:	4b10      	ldr	r3, [pc, #64]	; (800d780 <xQueueReceive+0x1bc>)
 800d740:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d744:	601a      	str	r2, [r3, #0]
 800d746:	f3bf 8f4f 	dsb	sy
 800d74a:	f3bf 8f6f 	isb	sy
 800d74e:	e780      	b.n	800d652 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d750:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d752:	f000 fa4b 	bl	800dbec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d756:	f000 fd71 	bl	800e23c <xTaskResumeAll>
 800d75a:	e77a      	b.n	800d652 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d75c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d75e:	f000 fa45 	bl	800dbec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d762:	f000 fd6b 	bl	800e23c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d766:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d768:	f000 fa92 	bl	800dc90 <prvIsQueueEmpty>
 800d76c:	4603      	mov	r3, r0
 800d76e:	2b00      	cmp	r3, #0
 800d770:	f43f af6f 	beq.w	800d652 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d774:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d776:	4618      	mov	r0, r3
 800d778:	3730      	adds	r7, #48	; 0x30
 800d77a:	46bd      	mov	sp, r7
 800d77c:	bd80      	pop	{r7, pc}
 800d77e:	bf00      	nop
 800d780:	e000ed04 	.word	0xe000ed04

0800d784 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800d784:	b580      	push	{r7, lr}
 800d786:	b08e      	sub	sp, #56	; 0x38
 800d788:	af00      	add	r7, sp, #0
 800d78a:	6078      	str	r0, [r7, #4]
 800d78c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800d78e:	2300      	movs	r3, #0
 800d790:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800d796:	2300      	movs	r3, #0
 800d798:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d79a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	d10a      	bne.n	800d7b6 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800d7a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7a4:	f383 8811 	msr	BASEPRI, r3
 800d7a8:	f3bf 8f6f 	isb	sy
 800d7ac:	f3bf 8f4f 	dsb	sy
 800d7b0:	623b      	str	r3, [r7, #32]
}
 800d7b2:	bf00      	nop
 800d7b4:	e7fe      	b.n	800d7b4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d7b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d00a      	beq.n	800d7d4 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800d7be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7c2:	f383 8811 	msr	BASEPRI, r3
 800d7c6:	f3bf 8f6f 	isb	sy
 800d7ca:	f3bf 8f4f 	dsb	sy
 800d7ce:	61fb      	str	r3, [r7, #28]
}
 800d7d0:	bf00      	nop
 800d7d2:	e7fe      	b.n	800d7d2 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d7d4:	f001 f9b4 	bl	800eb40 <xTaskGetSchedulerState>
 800d7d8:	4603      	mov	r3, r0
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	d102      	bne.n	800d7e4 <xQueueSemaphoreTake+0x60>
 800d7de:	683b      	ldr	r3, [r7, #0]
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	d101      	bne.n	800d7e8 <xQueueSemaphoreTake+0x64>
 800d7e4:	2301      	movs	r3, #1
 800d7e6:	e000      	b.n	800d7ea <xQueueSemaphoreTake+0x66>
 800d7e8:	2300      	movs	r3, #0
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d10a      	bne.n	800d804 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800d7ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7f2:	f383 8811 	msr	BASEPRI, r3
 800d7f6:	f3bf 8f6f 	isb	sy
 800d7fa:	f3bf 8f4f 	dsb	sy
 800d7fe:	61bb      	str	r3, [r7, #24]
}
 800d800:	bf00      	nop
 800d802:	e7fe      	b.n	800d802 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d804:	f002 f82e 	bl	800f864 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800d808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d80a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d80c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800d80e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d810:	2b00      	cmp	r3, #0
 800d812:	d024      	beq.n	800d85e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800d814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d816:	1e5a      	subs	r2, r3, #1
 800d818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d81a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d81c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d81e:	681b      	ldr	r3, [r3, #0]
 800d820:	2b00      	cmp	r3, #0
 800d822:	d104      	bne.n	800d82e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800d824:	f001 fb1a 	bl	800ee5c <pvTaskIncrementMutexHeldCount>
 800d828:	4602      	mov	r2, r0
 800d82a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d82c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d82e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d830:	691b      	ldr	r3, [r3, #16]
 800d832:	2b00      	cmp	r3, #0
 800d834:	d00f      	beq.n	800d856 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d838:	3310      	adds	r3, #16
 800d83a:	4618      	mov	r0, r3
 800d83c:	f000 ff50 	bl	800e6e0 <xTaskRemoveFromEventList>
 800d840:	4603      	mov	r3, r0
 800d842:	2b00      	cmp	r3, #0
 800d844:	d007      	beq.n	800d856 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d846:	4b54      	ldr	r3, [pc, #336]	; (800d998 <xQueueSemaphoreTake+0x214>)
 800d848:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d84c:	601a      	str	r2, [r3, #0]
 800d84e:	f3bf 8f4f 	dsb	sy
 800d852:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d856:	f002 f835 	bl	800f8c4 <vPortExitCritical>
				return pdPASS;
 800d85a:	2301      	movs	r3, #1
 800d85c:	e097      	b.n	800d98e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d85e:	683b      	ldr	r3, [r7, #0]
 800d860:	2b00      	cmp	r3, #0
 800d862:	d111      	bne.n	800d888 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800d864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d866:	2b00      	cmp	r3, #0
 800d868:	d00a      	beq.n	800d880 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800d86a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d86e:	f383 8811 	msr	BASEPRI, r3
 800d872:	f3bf 8f6f 	isb	sy
 800d876:	f3bf 8f4f 	dsb	sy
 800d87a:	617b      	str	r3, [r7, #20]
}
 800d87c:	bf00      	nop
 800d87e:	e7fe      	b.n	800d87e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800d880:	f002 f820 	bl	800f8c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d884:	2300      	movs	r3, #0
 800d886:	e082      	b.n	800d98e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d888:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d106      	bne.n	800d89c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d88e:	f107 030c 	add.w	r3, r7, #12
 800d892:	4618      	mov	r0, r3
 800d894:	f000 ffea 	bl	800e86c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d898:	2301      	movs	r3, #1
 800d89a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d89c:	f002 f812 	bl	800f8c4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d8a0:	f000 fcbe 	bl	800e220 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d8a4:	f001 ffde 	bl	800f864 <vPortEnterCritical>
 800d8a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8aa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d8ae:	b25b      	sxtb	r3, r3
 800d8b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d8b4:	d103      	bne.n	800d8be <xQueueSemaphoreTake+0x13a>
 800d8b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8b8:	2200      	movs	r2, #0
 800d8ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d8be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d8c4:	b25b      	sxtb	r3, r3
 800d8c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d8ca:	d103      	bne.n	800d8d4 <xQueueSemaphoreTake+0x150>
 800d8cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8ce:	2200      	movs	r2, #0
 800d8d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d8d4:	f001 fff6 	bl	800f8c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d8d8:	463a      	mov	r2, r7
 800d8da:	f107 030c 	add.w	r3, r7, #12
 800d8de:	4611      	mov	r1, r2
 800d8e0:	4618      	mov	r0, r3
 800d8e2:	f000 ffd9 	bl	800e898 <xTaskCheckForTimeOut>
 800d8e6:	4603      	mov	r3, r0
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	d132      	bne.n	800d952 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d8ec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d8ee:	f000 f9cf 	bl	800dc90 <prvIsQueueEmpty>
 800d8f2:	4603      	mov	r3, r0
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d026      	beq.n	800d946 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d8f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8fa:	681b      	ldr	r3, [r3, #0]
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	d109      	bne.n	800d914 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800d900:	f001 ffb0 	bl	800f864 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d906:	689b      	ldr	r3, [r3, #8]
 800d908:	4618      	mov	r0, r3
 800d90a:	f001 f937 	bl	800eb7c <xTaskPriorityInherit>
 800d90e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800d910:	f001 ffd8 	bl	800f8c4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d916:	3324      	adds	r3, #36	; 0x24
 800d918:	683a      	ldr	r2, [r7, #0]
 800d91a:	4611      	mov	r1, r2
 800d91c:	4618      	mov	r0, r3
 800d91e:	f000 fe53 	bl	800e5c8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d922:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d924:	f000 f962 	bl	800dbec <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d928:	f000 fc88 	bl	800e23c <xTaskResumeAll>
 800d92c:	4603      	mov	r3, r0
 800d92e:	2b00      	cmp	r3, #0
 800d930:	f47f af68 	bne.w	800d804 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800d934:	4b18      	ldr	r3, [pc, #96]	; (800d998 <xQueueSemaphoreTake+0x214>)
 800d936:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d93a:	601a      	str	r2, [r3, #0]
 800d93c:	f3bf 8f4f 	dsb	sy
 800d940:	f3bf 8f6f 	isb	sy
 800d944:	e75e      	b.n	800d804 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800d946:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d948:	f000 f950 	bl	800dbec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d94c:	f000 fc76 	bl	800e23c <xTaskResumeAll>
 800d950:	e758      	b.n	800d804 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800d952:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d954:	f000 f94a 	bl	800dbec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d958:	f000 fc70 	bl	800e23c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d95c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d95e:	f000 f997 	bl	800dc90 <prvIsQueueEmpty>
 800d962:	4603      	mov	r3, r0
 800d964:	2b00      	cmp	r3, #0
 800d966:	f43f af4d 	beq.w	800d804 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800d96a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d00d      	beq.n	800d98c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800d970:	f001 ff78 	bl	800f864 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800d974:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d976:	f000 f891 	bl	800da9c <prvGetDisinheritPriorityAfterTimeout>
 800d97a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800d97c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d97e:	689b      	ldr	r3, [r3, #8]
 800d980:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d982:	4618      	mov	r0, r3
 800d984:	f001 f9d0 	bl	800ed28 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800d988:	f001 ff9c 	bl	800f8c4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d98c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d98e:	4618      	mov	r0, r3
 800d990:	3738      	adds	r7, #56	; 0x38
 800d992:	46bd      	mov	sp, r7
 800d994:	bd80      	pop	{r7, pc}
 800d996:	bf00      	nop
 800d998:	e000ed04 	.word	0xe000ed04

0800d99c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d99c:	b580      	push	{r7, lr}
 800d99e:	b08e      	sub	sp, #56	; 0x38
 800d9a0:	af00      	add	r7, sp, #0
 800d9a2:	60f8      	str	r0, [r7, #12]
 800d9a4:	60b9      	str	r1, [r7, #8]
 800d9a6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d9a8:	68fb      	ldr	r3, [r7, #12]
 800d9aa:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d9ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	d10a      	bne.n	800d9c8 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800d9b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9b6:	f383 8811 	msr	BASEPRI, r3
 800d9ba:	f3bf 8f6f 	isb	sy
 800d9be:	f3bf 8f4f 	dsb	sy
 800d9c2:	623b      	str	r3, [r7, #32]
}
 800d9c4:	bf00      	nop
 800d9c6:	e7fe      	b.n	800d9c6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d9c8:	68bb      	ldr	r3, [r7, #8]
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	d103      	bne.n	800d9d6 <xQueueReceiveFromISR+0x3a>
 800d9ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	d101      	bne.n	800d9da <xQueueReceiveFromISR+0x3e>
 800d9d6:	2301      	movs	r3, #1
 800d9d8:	e000      	b.n	800d9dc <xQueueReceiveFromISR+0x40>
 800d9da:	2300      	movs	r3, #0
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	d10a      	bne.n	800d9f6 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800d9e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9e4:	f383 8811 	msr	BASEPRI, r3
 800d9e8:	f3bf 8f6f 	isb	sy
 800d9ec:	f3bf 8f4f 	dsb	sy
 800d9f0:	61fb      	str	r3, [r7, #28]
}
 800d9f2:	bf00      	nop
 800d9f4:	e7fe      	b.n	800d9f4 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d9f6:	f002 f817 	bl	800fa28 <vPortValidateInterruptPriority>
	__asm volatile
 800d9fa:	f3ef 8211 	mrs	r2, BASEPRI
 800d9fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da02:	f383 8811 	msr	BASEPRI, r3
 800da06:	f3bf 8f6f 	isb	sy
 800da0a:	f3bf 8f4f 	dsb	sy
 800da0e:	61ba      	str	r2, [r7, #24]
 800da10:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800da12:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800da14:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800da16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da1a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800da1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da1e:	2b00      	cmp	r3, #0
 800da20:	d02f      	beq.n	800da82 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800da22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da24:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800da28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800da2c:	68b9      	ldr	r1, [r7, #8]
 800da2e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800da30:	f000 f8b6 	bl	800dba0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800da34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da36:	1e5a      	subs	r2, r3, #1
 800da38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da3a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800da3c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800da40:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da44:	d112      	bne.n	800da6c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800da46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da48:	691b      	ldr	r3, [r3, #16]
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	d016      	beq.n	800da7c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800da4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da50:	3310      	adds	r3, #16
 800da52:	4618      	mov	r0, r3
 800da54:	f000 fe44 	bl	800e6e0 <xTaskRemoveFromEventList>
 800da58:	4603      	mov	r3, r0
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	d00e      	beq.n	800da7c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	2b00      	cmp	r3, #0
 800da62:	d00b      	beq.n	800da7c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	2201      	movs	r2, #1
 800da68:	601a      	str	r2, [r3, #0]
 800da6a:	e007      	b.n	800da7c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800da6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800da70:	3301      	adds	r3, #1
 800da72:	b2db      	uxtb	r3, r3
 800da74:	b25a      	sxtb	r2, r3
 800da76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800da7c:	2301      	movs	r3, #1
 800da7e:	637b      	str	r3, [r7, #52]	; 0x34
 800da80:	e001      	b.n	800da86 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800da82:	2300      	movs	r3, #0
 800da84:	637b      	str	r3, [r7, #52]	; 0x34
 800da86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da88:	613b      	str	r3, [r7, #16]
	__asm volatile
 800da8a:	693b      	ldr	r3, [r7, #16]
 800da8c:	f383 8811 	msr	BASEPRI, r3
}
 800da90:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800da92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800da94:	4618      	mov	r0, r3
 800da96:	3738      	adds	r7, #56	; 0x38
 800da98:	46bd      	mov	sp, r7
 800da9a:	bd80      	pop	{r7, pc}

0800da9c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800da9c:	b480      	push	{r7}
 800da9e:	b085      	sub	sp, #20
 800daa0:	af00      	add	r7, sp, #0
 800daa2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	d006      	beq.n	800daba <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dab0:	681b      	ldr	r3, [r3, #0]
 800dab2:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800dab6:	60fb      	str	r3, [r7, #12]
 800dab8:	e001      	b.n	800dabe <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800daba:	2300      	movs	r3, #0
 800dabc:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800dabe:	68fb      	ldr	r3, [r7, #12]
	}
 800dac0:	4618      	mov	r0, r3
 800dac2:	3714      	adds	r7, #20
 800dac4:	46bd      	mov	sp, r7
 800dac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daca:	4770      	bx	lr

0800dacc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800dacc:	b580      	push	{r7, lr}
 800dace:	b086      	sub	sp, #24
 800dad0:	af00      	add	r7, sp, #0
 800dad2:	60f8      	str	r0, [r7, #12]
 800dad4:	60b9      	str	r1, [r7, #8]
 800dad6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800dad8:	2300      	movs	r3, #0
 800dada:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dadc:	68fb      	ldr	r3, [r7, #12]
 800dade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dae0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800dae2:	68fb      	ldr	r3, [r7, #12]
 800dae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	d10d      	bne.n	800db06 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800daea:	68fb      	ldr	r3, [r7, #12]
 800daec:	681b      	ldr	r3, [r3, #0]
 800daee:	2b00      	cmp	r3, #0
 800daf0:	d14d      	bne.n	800db8e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800daf2:	68fb      	ldr	r3, [r7, #12]
 800daf4:	689b      	ldr	r3, [r3, #8]
 800daf6:	4618      	mov	r0, r3
 800daf8:	f001 f8a8 	bl	800ec4c <xTaskPriorityDisinherit>
 800dafc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800dafe:	68fb      	ldr	r3, [r7, #12]
 800db00:	2200      	movs	r2, #0
 800db02:	609a      	str	r2, [r3, #8]
 800db04:	e043      	b.n	800db8e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	2b00      	cmp	r3, #0
 800db0a:	d119      	bne.n	800db40 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800db0c:	68fb      	ldr	r3, [r7, #12]
 800db0e:	6858      	ldr	r0, [r3, #4]
 800db10:	68fb      	ldr	r3, [r7, #12]
 800db12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db14:	461a      	mov	r2, r3
 800db16:	68b9      	ldr	r1, [r7, #8]
 800db18:	f002 f9da 	bl	800fed0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800db1c:	68fb      	ldr	r3, [r7, #12]
 800db1e:	685a      	ldr	r2, [r3, #4]
 800db20:	68fb      	ldr	r3, [r7, #12]
 800db22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db24:	441a      	add	r2, r3
 800db26:	68fb      	ldr	r3, [r7, #12]
 800db28:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800db2a:	68fb      	ldr	r3, [r7, #12]
 800db2c:	685a      	ldr	r2, [r3, #4]
 800db2e:	68fb      	ldr	r3, [r7, #12]
 800db30:	689b      	ldr	r3, [r3, #8]
 800db32:	429a      	cmp	r2, r3
 800db34:	d32b      	bcc.n	800db8e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800db36:	68fb      	ldr	r3, [r7, #12]
 800db38:	681a      	ldr	r2, [r3, #0]
 800db3a:	68fb      	ldr	r3, [r7, #12]
 800db3c:	605a      	str	r2, [r3, #4]
 800db3e:	e026      	b.n	800db8e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800db40:	68fb      	ldr	r3, [r7, #12]
 800db42:	68d8      	ldr	r0, [r3, #12]
 800db44:	68fb      	ldr	r3, [r7, #12]
 800db46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db48:	461a      	mov	r2, r3
 800db4a:	68b9      	ldr	r1, [r7, #8]
 800db4c:	f002 f9c0 	bl	800fed0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800db50:	68fb      	ldr	r3, [r7, #12]
 800db52:	68da      	ldr	r2, [r3, #12]
 800db54:	68fb      	ldr	r3, [r7, #12]
 800db56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db58:	425b      	negs	r3, r3
 800db5a:	441a      	add	r2, r3
 800db5c:	68fb      	ldr	r3, [r7, #12]
 800db5e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800db60:	68fb      	ldr	r3, [r7, #12]
 800db62:	68da      	ldr	r2, [r3, #12]
 800db64:	68fb      	ldr	r3, [r7, #12]
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	429a      	cmp	r2, r3
 800db6a:	d207      	bcs.n	800db7c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800db6c:	68fb      	ldr	r3, [r7, #12]
 800db6e:	689a      	ldr	r2, [r3, #8]
 800db70:	68fb      	ldr	r3, [r7, #12]
 800db72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db74:	425b      	negs	r3, r3
 800db76:	441a      	add	r2, r3
 800db78:	68fb      	ldr	r3, [r7, #12]
 800db7a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	2b02      	cmp	r3, #2
 800db80:	d105      	bne.n	800db8e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800db82:	693b      	ldr	r3, [r7, #16]
 800db84:	2b00      	cmp	r3, #0
 800db86:	d002      	beq.n	800db8e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800db88:	693b      	ldr	r3, [r7, #16]
 800db8a:	3b01      	subs	r3, #1
 800db8c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800db8e:	693b      	ldr	r3, [r7, #16]
 800db90:	1c5a      	adds	r2, r3, #1
 800db92:	68fb      	ldr	r3, [r7, #12]
 800db94:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800db96:	697b      	ldr	r3, [r7, #20]
}
 800db98:	4618      	mov	r0, r3
 800db9a:	3718      	adds	r7, #24
 800db9c:	46bd      	mov	sp, r7
 800db9e:	bd80      	pop	{r7, pc}

0800dba0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800dba0:	b580      	push	{r7, lr}
 800dba2:	b082      	sub	sp, #8
 800dba4:	af00      	add	r7, sp, #0
 800dba6:	6078      	str	r0, [r7, #4]
 800dba8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dbae:	2b00      	cmp	r3, #0
 800dbb0:	d018      	beq.n	800dbe4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	68da      	ldr	r2, [r3, #12]
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dbba:	441a      	add	r2, r3
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	68da      	ldr	r2, [r3, #12]
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	689b      	ldr	r3, [r3, #8]
 800dbc8:	429a      	cmp	r2, r3
 800dbca:	d303      	bcc.n	800dbd4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	681a      	ldr	r2, [r3, #0]
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	68d9      	ldr	r1, [r3, #12]
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dbdc:	461a      	mov	r2, r3
 800dbde:	6838      	ldr	r0, [r7, #0]
 800dbe0:	f002 f976 	bl	800fed0 <memcpy>
	}
}
 800dbe4:	bf00      	nop
 800dbe6:	3708      	adds	r7, #8
 800dbe8:	46bd      	mov	sp, r7
 800dbea:	bd80      	pop	{r7, pc}

0800dbec <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800dbec:	b580      	push	{r7, lr}
 800dbee:	b084      	sub	sp, #16
 800dbf0:	af00      	add	r7, sp, #0
 800dbf2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800dbf4:	f001 fe36 	bl	800f864 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dbfe:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800dc00:	e011      	b.n	800dc26 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	d012      	beq.n	800dc30 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	3324      	adds	r3, #36	; 0x24
 800dc0e:	4618      	mov	r0, r3
 800dc10:	f000 fd66 	bl	800e6e0 <xTaskRemoveFromEventList>
 800dc14:	4603      	mov	r3, r0
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	d001      	beq.n	800dc1e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800dc1a:	f000 fe9f 	bl	800e95c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800dc1e:	7bfb      	ldrb	r3, [r7, #15]
 800dc20:	3b01      	subs	r3, #1
 800dc22:	b2db      	uxtb	r3, r3
 800dc24:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800dc26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	dce9      	bgt.n	800dc02 <prvUnlockQueue+0x16>
 800dc2e:	e000      	b.n	800dc32 <prvUnlockQueue+0x46>
					break;
 800dc30:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	22ff      	movs	r2, #255	; 0xff
 800dc36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800dc3a:	f001 fe43 	bl	800f8c4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800dc3e:	f001 fe11 	bl	800f864 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dc48:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800dc4a:	e011      	b.n	800dc70 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	691b      	ldr	r3, [r3, #16]
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	d012      	beq.n	800dc7a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	3310      	adds	r3, #16
 800dc58:	4618      	mov	r0, r3
 800dc5a:	f000 fd41 	bl	800e6e0 <xTaskRemoveFromEventList>
 800dc5e:	4603      	mov	r3, r0
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	d001      	beq.n	800dc68 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800dc64:	f000 fe7a 	bl	800e95c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800dc68:	7bbb      	ldrb	r3, [r7, #14]
 800dc6a:	3b01      	subs	r3, #1
 800dc6c:	b2db      	uxtb	r3, r3
 800dc6e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800dc70:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	dce9      	bgt.n	800dc4c <prvUnlockQueue+0x60>
 800dc78:	e000      	b.n	800dc7c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800dc7a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	22ff      	movs	r2, #255	; 0xff
 800dc80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800dc84:	f001 fe1e 	bl	800f8c4 <vPortExitCritical>
}
 800dc88:	bf00      	nop
 800dc8a:	3710      	adds	r7, #16
 800dc8c:	46bd      	mov	sp, r7
 800dc8e:	bd80      	pop	{r7, pc}

0800dc90 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800dc90:	b580      	push	{r7, lr}
 800dc92:	b084      	sub	sp, #16
 800dc94:	af00      	add	r7, sp, #0
 800dc96:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800dc98:	f001 fde4 	bl	800f864 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	d102      	bne.n	800dcaa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800dca4:	2301      	movs	r3, #1
 800dca6:	60fb      	str	r3, [r7, #12]
 800dca8:	e001      	b.n	800dcae <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800dcaa:	2300      	movs	r3, #0
 800dcac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800dcae:	f001 fe09 	bl	800f8c4 <vPortExitCritical>

	return xReturn;
 800dcb2:	68fb      	ldr	r3, [r7, #12]
}
 800dcb4:	4618      	mov	r0, r3
 800dcb6:	3710      	adds	r7, #16
 800dcb8:	46bd      	mov	sp, r7
 800dcba:	bd80      	pop	{r7, pc}

0800dcbc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800dcbc:	b580      	push	{r7, lr}
 800dcbe:	b084      	sub	sp, #16
 800dcc0:	af00      	add	r7, sp, #0
 800dcc2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800dcc4:	f001 fdce 	bl	800f864 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dcd0:	429a      	cmp	r2, r3
 800dcd2:	d102      	bne.n	800dcda <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800dcd4:	2301      	movs	r3, #1
 800dcd6:	60fb      	str	r3, [r7, #12]
 800dcd8:	e001      	b.n	800dcde <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800dcda:	2300      	movs	r3, #0
 800dcdc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800dcde:	f001 fdf1 	bl	800f8c4 <vPortExitCritical>

	return xReturn;
 800dce2:	68fb      	ldr	r3, [r7, #12]
}
 800dce4:	4618      	mov	r0, r3
 800dce6:	3710      	adds	r7, #16
 800dce8:	46bd      	mov	sp, r7
 800dcea:	bd80      	pop	{r7, pc}

0800dcec <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800dcec:	b480      	push	{r7}
 800dcee:	b085      	sub	sp, #20
 800dcf0:	af00      	add	r7, sp, #0
 800dcf2:	6078      	str	r0, [r7, #4]
 800dcf4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800dcf6:	2300      	movs	r3, #0
 800dcf8:	60fb      	str	r3, [r7, #12]
 800dcfa:	e014      	b.n	800dd26 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800dcfc:	4a0f      	ldr	r2, [pc, #60]	; (800dd3c <vQueueAddToRegistry+0x50>)
 800dcfe:	68fb      	ldr	r3, [r7, #12]
 800dd00:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d10b      	bne.n	800dd20 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800dd08:	490c      	ldr	r1, [pc, #48]	; (800dd3c <vQueueAddToRegistry+0x50>)
 800dd0a:	68fb      	ldr	r3, [r7, #12]
 800dd0c:	683a      	ldr	r2, [r7, #0]
 800dd0e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800dd12:	4a0a      	ldr	r2, [pc, #40]	; (800dd3c <vQueueAddToRegistry+0x50>)
 800dd14:	68fb      	ldr	r3, [r7, #12]
 800dd16:	00db      	lsls	r3, r3, #3
 800dd18:	4413      	add	r3, r2
 800dd1a:	687a      	ldr	r2, [r7, #4]
 800dd1c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800dd1e:	e006      	b.n	800dd2e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800dd20:	68fb      	ldr	r3, [r7, #12]
 800dd22:	3301      	adds	r3, #1
 800dd24:	60fb      	str	r3, [r7, #12]
 800dd26:	68fb      	ldr	r3, [r7, #12]
 800dd28:	2b07      	cmp	r3, #7
 800dd2a:	d9e7      	bls.n	800dcfc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800dd2c:	bf00      	nop
 800dd2e:	bf00      	nop
 800dd30:	3714      	adds	r7, #20
 800dd32:	46bd      	mov	sp, r7
 800dd34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd38:	4770      	bx	lr
 800dd3a:	bf00      	nop
 800dd3c:	20000ca8 	.word	0x20000ca8

0800dd40 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800dd40:	b580      	push	{r7, lr}
 800dd42:	b086      	sub	sp, #24
 800dd44:	af00      	add	r7, sp, #0
 800dd46:	60f8      	str	r0, [r7, #12]
 800dd48:	60b9      	str	r1, [r7, #8]
 800dd4a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800dd4c:	68fb      	ldr	r3, [r7, #12]
 800dd4e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800dd50:	f001 fd88 	bl	800f864 <vPortEnterCritical>
 800dd54:	697b      	ldr	r3, [r7, #20]
 800dd56:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dd5a:	b25b      	sxtb	r3, r3
 800dd5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd60:	d103      	bne.n	800dd6a <vQueueWaitForMessageRestricted+0x2a>
 800dd62:	697b      	ldr	r3, [r7, #20]
 800dd64:	2200      	movs	r2, #0
 800dd66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800dd6a:	697b      	ldr	r3, [r7, #20]
 800dd6c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dd70:	b25b      	sxtb	r3, r3
 800dd72:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd76:	d103      	bne.n	800dd80 <vQueueWaitForMessageRestricted+0x40>
 800dd78:	697b      	ldr	r3, [r7, #20]
 800dd7a:	2200      	movs	r2, #0
 800dd7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800dd80:	f001 fda0 	bl	800f8c4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800dd84:	697b      	ldr	r3, [r7, #20]
 800dd86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	d106      	bne.n	800dd9a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800dd8c:	697b      	ldr	r3, [r7, #20]
 800dd8e:	3324      	adds	r3, #36	; 0x24
 800dd90:	687a      	ldr	r2, [r7, #4]
 800dd92:	68b9      	ldr	r1, [r7, #8]
 800dd94:	4618      	mov	r0, r3
 800dd96:	f000 fc77 	bl	800e688 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800dd9a:	6978      	ldr	r0, [r7, #20]
 800dd9c:	f7ff ff26 	bl	800dbec <prvUnlockQueue>
	}
 800dda0:	bf00      	nop
 800dda2:	3718      	adds	r7, #24
 800dda4:	46bd      	mov	sp, r7
 800dda6:	bd80      	pop	{r7, pc}

0800dda8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800dda8:	b580      	push	{r7, lr}
 800ddaa:	b08e      	sub	sp, #56	; 0x38
 800ddac:	af04      	add	r7, sp, #16
 800ddae:	60f8      	str	r0, [r7, #12]
 800ddb0:	60b9      	str	r1, [r7, #8]
 800ddb2:	607a      	str	r2, [r7, #4]
 800ddb4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ddb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	d10a      	bne.n	800ddd2 <xTaskCreateStatic+0x2a>
	__asm volatile
 800ddbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddc0:	f383 8811 	msr	BASEPRI, r3
 800ddc4:	f3bf 8f6f 	isb	sy
 800ddc8:	f3bf 8f4f 	dsb	sy
 800ddcc:	623b      	str	r3, [r7, #32]
}
 800ddce:	bf00      	nop
 800ddd0:	e7fe      	b.n	800ddd0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800ddd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddd4:	2b00      	cmp	r3, #0
 800ddd6:	d10a      	bne.n	800ddee <xTaskCreateStatic+0x46>
	__asm volatile
 800ddd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dddc:	f383 8811 	msr	BASEPRI, r3
 800dde0:	f3bf 8f6f 	isb	sy
 800dde4:	f3bf 8f4f 	dsb	sy
 800dde8:	61fb      	str	r3, [r7, #28]
}
 800ddea:	bf00      	nop
 800ddec:	e7fe      	b.n	800ddec <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ddee:	235c      	movs	r3, #92	; 0x5c
 800ddf0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ddf2:	693b      	ldr	r3, [r7, #16]
 800ddf4:	2b5c      	cmp	r3, #92	; 0x5c
 800ddf6:	d00a      	beq.n	800de0e <xTaskCreateStatic+0x66>
	__asm volatile
 800ddf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddfc:	f383 8811 	msr	BASEPRI, r3
 800de00:	f3bf 8f6f 	isb	sy
 800de04:	f3bf 8f4f 	dsb	sy
 800de08:	61bb      	str	r3, [r7, #24]
}
 800de0a:	bf00      	nop
 800de0c:	e7fe      	b.n	800de0c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800de0e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800de10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de12:	2b00      	cmp	r3, #0
 800de14:	d01e      	beq.n	800de54 <xTaskCreateStatic+0xac>
 800de16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800de18:	2b00      	cmp	r3, #0
 800de1a:	d01b      	beq.n	800de54 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800de1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de1e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800de20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de22:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800de24:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800de26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de28:	2202      	movs	r2, #2
 800de2a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800de2e:	2300      	movs	r3, #0
 800de30:	9303      	str	r3, [sp, #12]
 800de32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de34:	9302      	str	r3, [sp, #8]
 800de36:	f107 0314 	add.w	r3, r7, #20
 800de3a:	9301      	str	r3, [sp, #4]
 800de3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de3e:	9300      	str	r3, [sp, #0]
 800de40:	683b      	ldr	r3, [r7, #0]
 800de42:	687a      	ldr	r2, [r7, #4]
 800de44:	68b9      	ldr	r1, [r7, #8]
 800de46:	68f8      	ldr	r0, [r7, #12]
 800de48:	f000 f850 	bl	800deec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800de4c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800de4e:	f000 f8dd 	bl	800e00c <prvAddNewTaskToReadyList>
 800de52:	e001      	b.n	800de58 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800de54:	2300      	movs	r3, #0
 800de56:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800de58:	697b      	ldr	r3, [r7, #20]
	}
 800de5a:	4618      	mov	r0, r3
 800de5c:	3728      	adds	r7, #40	; 0x28
 800de5e:	46bd      	mov	sp, r7
 800de60:	bd80      	pop	{r7, pc}

0800de62 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800de62:	b580      	push	{r7, lr}
 800de64:	b08c      	sub	sp, #48	; 0x30
 800de66:	af04      	add	r7, sp, #16
 800de68:	60f8      	str	r0, [r7, #12]
 800de6a:	60b9      	str	r1, [r7, #8]
 800de6c:	603b      	str	r3, [r7, #0]
 800de6e:	4613      	mov	r3, r2
 800de70:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800de72:	88fb      	ldrh	r3, [r7, #6]
 800de74:	009b      	lsls	r3, r3, #2
 800de76:	4618      	mov	r0, r3
 800de78:	f001 fe16 	bl	800faa8 <pvPortMalloc>
 800de7c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800de7e:	697b      	ldr	r3, [r7, #20]
 800de80:	2b00      	cmp	r3, #0
 800de82:	d00e      	beq.n	800dea2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800de84:	205c      	movs	r0, #92	; 0x5c
 800de86:	f001 fe0f 	bl	800faa8 <pvPortMalloc>
 800de8a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800de8c:	69fb      	ldr	r3, [r7, #28]
 800de8e:	2b00      	cmp	r3, #0
 800de90:	d003      	beq.n	800de9a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800de92:	69fb      	ldr	r3, [r7, #28]
 800de94:	697a      	ldr	r2, [r7, #20]
 800de96:	631a      	str	r2, [r3, #48]	; 0x30
 800de98:	e005      	b.n	800dea6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800de9a:	6978      	ldr	r0, [r7, #20]
 800de9c:	f001 fed0 	bl	800fc40 <vPortFree>
 800dea0:	e001      	b.n	800dea6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800dea2:	2300      	movs	r3, #0
 800dea4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800dea6:	69fb      	ldr	r3, [r7, #28]
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	d017      	beq.n	800dedc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800deac:	69fb      	ldr	r3, [r7, #28]
 800deae:	2200      	movs	r2, #0
 800deb0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800deb4:	88fa      	ldrh	r2, [r7, #6]
 800deb6:	2300      	movs	r3, #0
 800deb8:	9303      	str	r3, [sp, #12]
 800deba:	69fb      	ldr	r3, [r7, #28]
 800debc:	9302      	str	r3, [sp, #8]
 800debe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dec0:	9301      	str	r3, [sp, #4]
 800dec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dec4:	9300      	str	r3, [sp, #0]
 800dec6:	683b      	ldr	r3, [r7, #0]
 800dec8:	68b9      	ldr	r1, [r7, #8]
 800deca:	68f8      	ldr	r0, [r7, #12]
 800decc:	f000 f80e 	bl	800deec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ded0:	69f8      	ldr	r0, [r7, #28]
 800ded2:	f000 f89b 	bl	800e00c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ded6:	2301      	movs	r3, #1
 800ded8:	61bb      	str	r3, [r7, #24]
 800deda:	e002      	b.n	800dee2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800dedc:	f04f 33ff 	mov.w	r3, #4294967295
 800dee0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800dee2:	69bb      	ldr	r3, [r7, #24]
	}
 800dee4:	4618      	mov	r0, r3
 800dee6:	3720      	adds	r7, #32
 800dee8:	46bd      	mov	sp, r7
 800deea:	bd80      	pop	{r7, pc}

0800deec <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800deec:	b580      	push	{r7, lr}
 800deee:	b088      	sub	sp, #32
 800def0:	af00      	add	r7, sp, #0
 800def2:	60f8      	str	r0, [r7, #12]
 800def4:	60b9      	str	r1, [r7, #8]
 800def6:	607a      	str	r2, [r7, #4]
 800def8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800defa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800defc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	009b      	lsls	r3, r3, #2
 800df02:	461a      	mov	r2, r3
 800df04:	21a5      	movs	r1, #165	; 0xa5
 800df06:	f001 fff1 	bl	800feec <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800df0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800df14:	3b01      	subs	r3, #1
 800df16:	009b      	lsls	r3, r3, #2
 800df18:	4413      	add	r3, r2
 800df1a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800df1c:	69bb      	ldr	r3, [r7, #24]
 800df1e:	f023 0307 	bic.w	r3, r3, #7
 800df22:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800df24:	69bb      	ldr	r3, [r7, #24]
 800df26:	f003 0307 	and.w	r3, r3, #7
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	d00a      	beq.n	800df44 <prvInitialiseNewTask+0x58>
	__asm volatile
 800df2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df32:	f383 8811 	msr	BASEPRI, r3
 800df36:	f3bf 8f6f 	isb	sy
 800df3a:	f3bf 8f4f 	dsb	sy
 800df3e:	617b      	str	r3, [r7, #20]
}
 800df40:	bf00      	nop
 800df42:	e7fe      	b.n	800df42 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800df44:	68bb      	ldr	r3, [r7, #8]
 800df46:	2b00      	cmp	r3, #0
 800df48:	d01f      	beq.n	800df8a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800df4a:	2300      	movs	r3, #0
 800df4c:	61fb      	str	r3, [r7, #28]
 800df4e:	e012      	b.n	800df76 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800df50:	68ba      	ldr	r2, [r7, #8]
 800df52:	69fb      	ldr	r3, [r7, #28]
 800df54:	4413      	add	r3, r2
 800df56:	7819      	ldrb	r1, [r3, #0]
 800df58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800df5a:	69fb      	ldr	r3, [r7, #28]
 800df5c:	4413      	add	r3, r2
 800df5e:	3334      	adds	r3, #52	; 0x34
 800df60:	460a      	mov	r2, r1
 800df62:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800df64:	68ba      	ldr	r2, [r7, #8]
 800df66:	69fb      	ldr	r3, [r7, #28]
 800df68:	4413      	add	r3, r2
 800df6a:	781b      	ldrb	r3, [r3, #0]
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d006      	beq.n	800df7e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800df70:	69fb      	ldr	r3, [r7, #28]
 800df72:	3301      	adds	r3, #1
 800df74:	61fb      	str	r3, [r7, #28]
 800df76:	69fb      	ldr	r3, [r7, #28]
 800df78:	2b0f      	cmp	r3, #15
 800df7a:	d9e9      	bls.n	800df50 <prvInitialiseNewTask+0x64>
 800df7c:	e000      	b.n	800df80 <prvInitialiseNewTask+0x94>
			{
				break;
 800df7e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800df80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df82:	2200      	movs	r2, #0
 800df84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800df88:	e003      	b.n	800df92 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800df8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df8c:	2200      	movs	r2, #0
 800df8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800df92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df94:	2b37      	cmp	r3, #55	; 0x37
 800df96:	d901      	bls.n	800df9c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800df98:	2337      	movs	r3, #55	; 0x37
 800df9a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800df9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dfa0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800dfa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfa4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dfa6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800dfa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfaa:	2200      	movs	r2, #0
 800dfac:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800dfae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfb0:	3304      	adds	r3, #4
 800dfb2:	4618      	mov	r0, r3
 800dfb4:	f7fe fee4 	bl	800cd80 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800dfb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfba:	3318      	adds	r3, #24
 800dfbc:	4618      	mov	r0, r3
 800dfbe:	f7fe fedf 	bl	800cd80 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800dfc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dfc6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dfc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfca:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800dfce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfd0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800dfd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dfd6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800dfd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfda:	2200      	movs	r2, #0
 800dfdc:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800dfde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfe0:	2200      	movs	r2, #0
 800dfe2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800dfe6:	683a      	ldr	r2, [r7, #0]
 800dfe8:	68f9      	ldr	r1, [r7, #12]
 800dfea:	69b8      	ldr	r0, [r7, #24]
 800dfec:	f001 fb0c 	bl	800f608 <pxPortInitialiseStack>
 800dff0:	4602      	mov	r2, r0
 800dff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dff4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800dff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dff8:	2b00      	cmp	r3, #0
 800dffa:	d002      	beq.n	800e002 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800dffc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dffe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e000:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e002:	bf00      	nop
 800e004:	3720      	adds	r7, #32
 800e006:	46bd      	mov	sp, r7
 800e008:	bd80      	pop	{r7, pc}
	...

0800e00c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800e00c:	b580      	push	{r7, lr}
 800e00e:	b082      	sub	sp, #8
 800e010:	af00      	add	r7, sp, #0
 800e012:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800e014:	f001 fc26 	bl	800f864 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800e018:	4b2d      	ldr	r3, [pc, #180]	; (800e0d0 <prvAddNewTaskToReadyList+0xc4>)
 800e01a:	681b      	ldr	r3, [r3, #0]
 800e01c:	3301      	adds	r3, #1
 800e01e:	4a2c      	ldr	r2, [pc, #176]	; (800e0d0 <prvAddNewTaskToReadyList+0xc4>)
 800e020:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800e022:	4b2c      	ldr	r3, [pc, #176]	; (800e0d4 <prvAddNewTaskToReadyList+0xc8>)
 800e024:	681b      	ldr	r3, [r3, #0]
 800e026:	2b00      	cmp	r3, #0
 800e028:	d109      	bne.n	800e03e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800e02a:	4a2a      	ldr	r2, [pc, #168]	; (800e0d4 <prvAddNewTaskToReadyList+0xc8>)
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e030:	4b27      	ldr	r3, [pc, #156]	; (800e0d0 <prvAddNewTaskToReadyList+0xc4>)
 800e032:	681b      	ldr	r3, [r3, #0]
 800e034:	2b01      	cmp	r3, #1
 800e036:	d110      	bne.n	800e05a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800e038:	f000 fcb4 	bl	800e9a4 <prvInitialiseTaskLists>
 800e03c:	e00d      	b.n	800e05a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800e03e:	4b26      	ldr	r3, [pc, #152]	; (800e0d8 <prvAddNewTaskToReadyList+0xcc>)
 800e040:	681b      	ldr	r3, [r3, #0]
 800e042:	2b00      	cmp	r3, #0
 800e044:	d109      	bne.n	800e05a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e046:	4b23      	ldr	r3, [pc, #140]	; (800e0d4 <prvAddNewTaskToReadyList+0xc8>)
 800e048:	681b      	ldr	r3, [r3, #0]
 800e04a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e050:	429a      	cmp	r2, r3
 800e052:	d802      	bhi.n	800e05a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800e054:	4a1f      	ldr	r2, [pc, #124]	; (800e0d4 <prvAddNewTaskToReadyList+0xc8>)
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800e05a:	4b20      	ldr	r3, [pc, #128]	; (800e0dc <prvAddNewTaskToReadyList+0xd0>)
 800e05c:	681b      	ldr	r3, [r3, #0]
 800e05e:	3301      	adds	r3, #1
 800e060:	4a1e      	ldr	r2, [pc, #120]	; (800e0dc <prvAddNewTaskToReadyList+0xd0>)
 800e062:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800e064:	4b1d      	ldr	r3, [pc, #116]	; (800e0dc <prvAddNewTaskToReadyList+0xd0>)
 800e066:	681a      	ldr	r2, [r3, #0]
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e070:	4b1b      	ldr	r3, [pc, #108]	; (800e0e0 <prvAddNewTaskToReadyList+0xd4>)
 800e072:	681b      	ldr	r3, [r3, #0]
 800e074:	429a      	cmp	r2, r3
 800e076:	d903      	bls.n	800e080 <prvAddNewTaskToReadyList+0x74>
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e07c:	4a18      	ldr	r2, [pc, #96]	; (800e0e0 <prvAddNewTaskToReadyList+0xd4>)
 800e07e:	6013      	str	r3, [r2, #0]
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e084:	4613      	mov	r3, r2
 800e086:	009b      	lsls	r3, r3, #2
 800e088:	4413      	add	r3, r2
 800e08a:	009b      	lsls	r3, r3, #2
 800e08c:	4a15      	ldr	r2, [pc, #84]	; (800e0e4 <prvAddNewTaskToReadyList+0xd8>)
 800e08e:	441a      	add	r2, r3
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	3304      	adds	r3, #4
 800e094:	4619      	mov	r1, r3
 800e096:	4610      	mov	r0, r2
 800e098:	f7fe fe7f 	bl	800cd9a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800e09c:	f001 fc12 	bl	800f8c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800e0a0:	4b0d      	ldr	r3, [pc, #52]	; (800e0d8 <prvAddNewTaskToReadyList+0xcc>)
 800e0a2:	681b      	ldr	r3, [r3, #0]
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	d00e      	beq.n	800e0c6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800e0a8:	4b0a      	ldr	r3, [pc, #40]	; (800e0d4 <prvAddNewTaskToReadyList+0xc8>)
 800e0aa:	681b      	ldr	r3, [r3, #0]
 800e0ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0b2:	429a      	cmp	r2, r3
 800e0b4:	d207      	bcs.n	800e0c6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800e0b6:	4b0c      	ldr	r3, [pc, #48]	; (800e0e8 <prvAddNewTaskToReadyList+0xdc>)
 800e0b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e0bc:	601a      	str	r2, [r3, #0]
 800e0be:	f3bf 8f4f 	dsb	sy
 800e0c2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e0c6:	bf00      	nop
 800e0c8:	3708      	adds	r7, #8
 800e0ca:	46bd      	mov	sp, r7
 800e0cc:	bd80      	pop	{r7, pc}
 800e0ce:	bf00      	nop
 800e0d0:	200011bc 	.word	0x200011bc
 800e0d4:	20000ce8 	.word	0x20000ce8
 800e0d8:	200011c8 	.word	0x200011c8
 800e0dc:	200011d8 	.word	0x200011d8
 800e0e0:	200011c4 	.word	0x200011c4
 800e0e4:	20000cec 	.word	0x20000cec
 800e0e8:	e000ed04 	.word	0xe000ed04

0800e0ec <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800e0ec:	b580      	push	{r7, lr}
 800e0ee:	b084      	sub	sp, #16
 800e0f0:	af00      	add	r7, sp, #0
 800e0f2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800e0f4:	2300      	movs	r3, #0
 800e0f6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	d017      	beq.n	800e12e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800e0fe:	4b13      	ldr	r3, [pc, #76]	; (800e14c <vTaskDelay+0x60>)
 800e100:	681b      	ldr	r3, [r3, #0]
 800e102:	2b00      	cmp	r3, #0
 800e104:	d00a      	beq.n	800e11c <vTaskDelay+0x30>
	__asm volatile
 800e106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e10a:	f383 8811 	msr	BASEPRI, r3
 800e10e:	f3bf 8f6f 	isb	sy
 800e112:	f3bf 8f4f 	dsb	sy
 800e116:	60bb      	str	r3, [r7, #8]
}
 800e118:	bf00      	nop
 800e11a:	e7fe      	b.n	800e11a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800e11c:	f000 f880 	bl	800e220 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800e120:	2100      	movs	r1, #0
 800e122:	6878      	ldr	r0, [r7, #4]
 800e124:	f000 feae 	bl	800ee84 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800e128:	f000 f888 	bl	800e23c <xTaskResumeAll>
 800e12c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e12e:	68fb      	ldr	r3, [r7, #12]
 800e130:	2b00      	cmp	r3, #0
 800e132:	d107      	bne.n	800e144 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800e134:	4b06      	ldr	r3, [pc, #24]	; (800e150 <vTaskDelay+0x64>)
 800e136:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e13a:	601a      	str	r2, [r3, #0]
 800e13c:	f3bf 8f4f 	dsb	sy
 800e140:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e144:	bf00      	nop
 800e146:	3710      	adds	r7, #16
 800e148:	46bd      	mov	sp, r7
 800e14a:	bd80      	pop	{r7, pc}
 800e14c:	200011e4 	.word	0x200011e4
 800e150:	e000ed04 	.word	0xe000ed04

0800e154 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800e154:	b580      	push	{r7, lr}
 800e156:	b08a      	sub	sp, #40	; 0x28
 800e158:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800e15a:	2300      	movs	r3, #0
 800e15c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800e15e:	2300      	movs	r3, #0
 800e160:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e162:	463a      	mov	r2, r7
 800e164:	1d39      	adds	r1, r7, #4
 800e166:	f107 0308 	add.w	r3, r7, #8
 800e16a:	4618      	mov	r0, r3
 800e16c:	f7fe fbc6 	bl	800c8fc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800e170:	6839      	ldr	r1, [r7, #0]
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	68ba      	ldr	r2, [r7, #8]
 800e176:	9202      	str	r2, [sp, #8]
 800e178:	9301      	str	r3, [sp, #4]
 800e17a:	2300      	movs	r3, #0
 800e17c:	9300      	str	r3, [sp, #0]
 800e17e:	2300      	movs	r3, #0
 800e180:	460a      	mov	r2, r1
 800e182:	4921      	ldr	r1, [pc, #132]	; (800e208 <vTaskStartScheduler+0xb4>)
 800e184:	4821      	ldr	r0, [pc, #132]	; (800e20c <vTaskStartScheduler+0xb8>)
 800e186:	f7ff fe0f 	bl	800dda8 <xTaskCreateStatic>
 800e18a:	4603      	mov	r3, r0
 800e18c:	4a20      	ldr	r2, [pc, #128]	; (800e210 <vTaskStartScheduler+0xbc>)
 800e18e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800e190:	4b1f      	ldr	r3, [pc, #124]	; (800e210 <vTaskStartScheduler+0xbc>)
 800e192:	681b      	ldr	r3, [r3, #0]
 800e194:	2b00      	cmp	r3, #0
 800e196:	d002      	beq.n	800e19e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800e198:	2301      	movs	r3, #1
 800e19a:	617b      	str	r3, [r7, #20]
 800e19c:	e001      	b.n	800e1a2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800e19e:	2300      	movs	r3, #0
 800e1a0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800e1a2:	697b      	ldr	r3, [r7, #20]
 800e1a4:	2b01      	cmp	r3, #1
 800e1a6:	d102      	bne.n	800e1ae <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800e1a8:	f000 fec0 	bl	800ef2c <xTimerCreateTimerTask>
 800e1ac:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800e1ae:	697b      	ldr	r3, [r7, #20]
 800e1b0:	2b01      	cmp	r3, #1
 800e1b2:	d116      	bne.n	800e1e2 <vTaskStartScheduler+0x8e>
	__asm volatile
 800e1b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1b8:	f383 8811 	msr	BASEPRI, r3
 800e1bc:	f3bf 8f6f 	isb	sy
 800e1c0:	f3bf 8f4f 	dsb	sy
 800e1c4:	613b      	str	r3, [r7, #16]
}
 800e1c6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800e1c8:	4b12      	ldr	r3, [pc, #72]	; (800e214 <vTaskStartScheduler+0xc0>)
 800e1ca:	f04f 32ff 	mov.w	r2, #4294967295
 800e1ce:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e1d0:	4b11      	ldr	r3, [pc, #68]	; (800e218 <vTaskStartScheduler+0xc4>)
 800e1d2:	2201      	movs	r2, #1
 800e1d4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e1d6:	4b11      	ldr	r3, [pc, #68]	; (800e21c <vTaskStartScheduler+0xc8>)
 800e1d8:	2200      	movs	r2, #0
 800e1da:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800e1dc:	f001 faa0 	bl	800f720 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800e1e0:	e00e      	b.n	800e200 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e1e2:	697b      	ldr	r3, [r7, #20]
 800e1e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e1e8:	d10a      	bne.n	800e200 <vTaskStartScheduler+0xac>
	__asm volatile
 800e1ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1ee:	f383 8811 	msr	BASEPRI, r3
 800e1f2:	f3bf 8f6f 	isb	sy
 800e1f6:	f3bf 8f4f 	dsb	sy
 800e1fa:	60fb      	str	r3, [r7, #12]
}
 800e1fc:	bf00      	nop
 800e1fe:	e7fe      	b.n	800e1fe <vTaskStartScheduler+0xaa>
}
 800e200:	bf00      	nop
 800e202:	3718      	adds	r7, #24
 800e204:	46bd      	mov	sp, r7
 800e206:	bd80      	pop	{r7, pc}
 800e208:	080145dc 	.word	0x080145dc
 800e20c:	0800e975 	.word	0x0800e975
 800e210:	200011e0 	.word	0x200011e0
 800e214:	200011dc 	.word	0x200011dc
 800e218:	200011c8 	.word	0x200011c8
 800e21c:	200011c0 	.word	0x200011c0

0800e220 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800e220:	b480      	push	{r7}
 800e222:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800e224:	4b04      	ldr	r3, [pc, #16]	; (800e238 <vTaskSuspendAll+0x18>)
 800e226:	681b      	ldr	r3, [r3, #0]
 800e228:	3301      	adds	r3, #1
 800e22a:	4a03      	ldr	r2, [pc, #12]	; (800e238 <vTaskSuspendAll+0x18>)
 800e22c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800e22e:	bf00      	nop
 800e230:	46bd      	mov	sp, r7
 800e232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e236:	4770      	bx	lr
 800e238:	200011e4 	.word	0x200011e4

0800e23c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e23c:	b580      	push	{r7, lr}
 800e23e:	b084      	sub	sp, #16
 800e240:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e242:	2300      	movs	r3, #0
 800e244:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e246:	2300      	movs	r3, #0
 800e248:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800e24a:	4b42      	ldr	r3, [pc, #264]	; (800e354 <xTaskResumeAll+0x118>)
 800e24c:	681b      	ldr	r3, [r3, #0]
 800e24e:	2b00      	cmp	r3, #0
 800e250:	d10a      	bne.n	800e268 <xTaskResumeAll+0x2c>
	__asm volatile
 800e252:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e256:	f383 8811 	msr	BASEPRI, r3
 800e25a:	f3bf 8f6f 	isb	sy
 800e25e:	f3bf 8f4f 	dsb	sy
 800e262:	603b      	str	r3, [r7, #0]
}
 800e264:	bf00      	nop
 800e266:	e7fe      	b.n	800e266 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800e268:	f001 fafc 	bl	800f864 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800e26c:	4b39      	ldr	r3, [pc, #228]	; (800e354 <xTaskResumeAll+0x118>)
 800e26e:	681b      	ldr	r3, [r3, #0]
 800e270:	3b01      	subs	r3, #1
 800e272:	4a38      	ldr	r2, [pc, #224]	; (800e354 <xTaskResumeAll+0x118>)
 800e274:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e276:	4b37      	ldr	r3, [pc, #220]	; (800e354 <xTaskResumeAll+0x118>)
 800e278:	681b      	ldr	r3, [r3, #0]
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	d162      	bne.n	800e344 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e27e:	4b36      	ldr	r3, [pc, #216]	; (800e358 <xTaskResumeAll+0x11c>)
 800e280:	681b      	ldr	r3, [r3, #0]
 800e282:	2b00      	cmp	r3, #0
 800e284:	d05e      	beq.n	800e344 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e286:	e02f      	b.n	800e2e8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e288:	4b34      	ldr	r3, [pc, #208]	; (800e35c <xTaskResumeAll+0x120>)
 800e28a:	68db      	ldr	r3, [r3, #12]
 800e28c:	68db      	ldr	r3, [r3, #12]
 800e28e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e290:	68fb      	ldr	r3, [r7, #12]
 800e292:	3318      	adds	r3, #24
 800e294:	4618      	mov	r0, r3
 800e296:	f7fe fddd 	bl	800ce54 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e29a:	68fb      	ldr	r3, [r7, #12]
 800e29c:	3304      	adds	r3, #4
 800e29e:	4618      	mov	r0, r3
 800e2a0:	f7fe fdd8 	bl	800ce54 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e2a4:	68fb      	ldr	r3, [r7, #12]
 800e2a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e2a8:	4b2d      	ldr	r3, [pc, #180]	; (800e360 <xTaskResumeAll+0x124>)
 800e2aa:	681b      	ldr	r3, [r3, #0]
 800e2ac:	429a      	cmp	r2, r3
 800e2ae:	d903      	bls.n	800e2b8 <xTaskResumeAll+0x7c>
 800e2b0:	68fb      	ldr	r3, [r7, #12]
 800e2b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e2b4:	4a2a      	ldr	r2, [pc, #168]	; (800e360 <xTaskResumeAll+0x124>)
 800e2b6:	6013      	str	r3, [r2, #0]
 800e2b8:	68fb      	ldr	r3, [r7, #12]
 800e2ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e2bc:	4613      	mov	r3, r2
 800e2be:	009b      	lsls	r3, r3, #2
 800e2c0:	4413      	add	r3, r2
 800e2c2:	009b      	lsls	r3, r3, #2
 800e2c4:	4a27      	ldr	r2, [pc, #156]	; (800e364 <xTaskResumeAll+0x128>)
 800e2c6:	441a      	add	r2, r3
 800e2c8:	68fb      	ldr	r3, [r7, #12]
 800e2ca:	3304      	adds	r3, #4
 800e2cc:	4619      	mov	r1, r3
 800e2ce:	4610      	mov	r0, r2
 800e2d0:	f7fe fd63 	bl	800cd9a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e2d4:	68fb      	ldr	r3, [r7, #12]
 800e2d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e2d8:	4b23      	ldr	r3, [pc, #140]	; (800e368 <xTaskResumeAll+0x12c>)
 800e2da:	681b      	ldr	r3, [r3, #0]
 800e2dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e2de:	429a      	cmp	r2, r3
 800e2e0:	d302      	bcc.n	800e2e8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800e2e2:	4b22      	ldr	r3, [pc, #136]	; (800e36c <xTaskResumeAll+0x130>)
 800e2e4:	2201      	movs	r2, #1
 800e2e6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e2e8:	4b1c      	ldr	r3, [pc, #112]	; (800e35c <xTaskResumeAll+0x120>)
 800e2ea:	681b      	ldr	r3, [r3, #0]
 800e2ec:	2b00      	cmp	r3, #0
 800e2ee:	d1cb      	bne.n	800e288 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e2f0:	68fb      	ldr	r3, [r7, #12]
 800e2f2:	2b00      	cmp	r3, #0
 800e2f4:	d001      	beq.n	800e2fa <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e2f6:	f000 fbf3 	bl	800eae0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800e2fa:	4b1d      	ldr	r3, [pc, #116]	; (800e370 <xTaskResumeAll+0x134>)
 800e2fc:	681b      	ldr	r3, [r3, #0]
 800e2fe:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	2b00      	cmp	r3, #0
 800e304:	d010      	beq.n	800e328 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e306:	f000 f847 	bl	800e398 <xTaskIncrementTick>
 800e30a:	4603      	mov	r3, r0
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	d002      	beq.n	800e316 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800e310:	4b16      	ldr	r3, [pc, #88]	; (800e36c <xTaskResumeAll+0x130>)
 800e312:	2201      	movs	r2, #1
 800e314:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	3b01      	subs	r3, #1
 800e31a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	2b00      	cmp	r3, #0
 800e320:	d1f1      	bne.n	800e306 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800e322:	4b13      	ldr	r3, [pc, #76]	; (800e370 <xTaskResumeAll+0x134>)
 800e324:	2200      	movs	r2, #0
 800e326:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e328:	4b10      	ldr	r3, [pc, #64]	; (800e36c <xTaskResumeAll+0x130>)
 800e32a:	681b      	ldr	r3, [r3, #0]
 800e32c:	2b00      	cmp	r3, #0
 800e32e:	d009      	beq.n	800e344 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e330:	2301      	movs	r3, #1
 800e332:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e334:	4b0f      	ldr	r3, [pc, #60]	; (800e374 <xTaskResumeAll+0x138>)
 800e336:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e33a:	601a      	str	r2, [r3, #0]
 800e33c:	f3bf 8f4f 	dsb	sy
 800e340:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e344:	f001 fabe 	bl	800f8c4 <vPortExitCritical>

	return xAlreadyYielded;
 800e348:	68bb      	ldr	r3, [r7, #8]
}
 800e34a:	4618      	mov	r0, r3
 800e34c:	3710      	adds	r7, #16
 800e34e:	46bd      	mov	sp, r7
 800e350:	bd80      	pop	{r7, pc}
 800e352:	bf00      	nop
 800e354:	200011e4 	.word	0x200011e4
 800e358:	200011bc 	.word	0x200011bc
 800e35c:	2000117c 	.word	0x2000117c
 800e360:	200011c4 	.word	0x200011c4
 800e364:	20000cec 	.word	0x20000cec
 800e368:	20000ce8 	.word	0x20000ce8
 800e36c:	200011d0 	.word	0x200011d0
 800e370:	200011cc 	.word	0x200011cc
 800e374:	e000ed04 	.word	0xe000ed04

0800e378 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800e378:	b480      	push	{r7}
 800e37a:	b083      	sub	sp, #12
 800e37c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800e37e:	4b05      	ldr	r3, [pc, #20]	; (800e394 <xTaskGetTickCount+0x1c>)
 800e380:	681b      	ldr	r3, [r3, #0]
 800e382:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800e384:	687b      	ldr	r3, [r7, #4]
}
 800e386:	4618      	mov	r0, r3
 800e388:	370c      	adds	r7, #12
 800e38a:	46bd      	mov	sp, r7
 800e38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e390:	4770      	bx	lr
 800e392:	bf00      	nop
 800e394:	200011c0 	.word	0x200011c0

0800e398 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e398:	b580      	push	{r7, lr}
 800e39a:	b086      	sub	sp, #24
 800e39c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e39e:	2300      	movs	r3, #0
 800e3a0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e3a2:	4b4f      	ldr	r3, [pc, #316]	; (800e4e0 <xTaskIncrementTick+0x148>)
 800e3a4:	681b      	ldr	r3, [r3, #0]
 800e3a6:	2b00      	cmp	r3, #0
 800e3a8:	f040 808f 	bne.w	800e4ca <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e3ac:	4b4d      	ldr	r3, [pc, #308]	; (800e4e4 <xTaskIncrementTick+0x14c>)
 800e3ae:	681b      	ldr	r3, [r3, #0]
 800e3b0:	3301      	adds	r3, #1
 800e3b2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e3b4:	4a4b      	ldr	r2, [pc, #300]	; (800e4e4 <xTaskIncrementTick+0x14c>)
 800e3b6:	693b      	ldr	r3, [r7, #16]
 800e3b8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e3ba:	693b      	ldr	r3, [r7, #16]
 800e3bc:	2b00      	cmp	r3, #0
 800e3be:	d120      	bne.n	800e402 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800e3c0:	4b49      	ldr	r3, [pc, #292]	; (800e4e8 <xTaskIncrementTick+0x150>)
 800e3c2:	681b      	ldr	r3, [r3, #0]
 800e3c4:	681b      	ldr	r3, [r3, #0]
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	d00a      	beq.n	800e3e0 <xTaskIncrementTick+0x48>
	__asm volatile
 800e3ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3ce:	f383 8811 	msr	BASEPRI, r3
 800e3d2:	f3bf 8f6f 	isb	sy
 800e3d6:	f3bf 8f4f 	dsb	sy
 800e3da:	603b      	str	r3, [r7, #0]
}
 800e3dc:	bf00      	nop
 800e3de:	e7fe      	b.n	800e3de <xTaskIncrementTick+0x46>
 800e3e0:	4b41      	ldr	r3, [pc, #260]	; (800e4e8 <xTaskIncrementTick+0x150>)
 800e3e2:	681b      	ldr	r3, [r3, #0]
 800e3e4:	60fb      	str	r3, [r7, #12]
 800e3e6:	4b41      	ldr	r3, [pc, #260]	; (800e4ec <xTaskIncrementTick+0x154>)
 800e3e8:	681b      	ldr	r3, [r3, #0]
 800e3ea:	4a3f      	ldr	r2, [pc, #252]	; (800e4e8 <xTaskIncrementTick+0x150>)
 800e3ec:	6013      	str	r3, [r2, #0]
 800e3ee:	4a3f      	ldr	r2, [pc, #252]	; (800e4ec <xTaskIncrementTick+0x154>)
 800e3f0:	68fb      	ldr	r3, [r7, #12]
 800e3f2:	6013      	str	r3, [r2, #0]
 800e3f4:	4b3e      	ldr	r3, [pc, #248]	; (800e4f0 <xTaskIncrementTick+0x158>)
 800e3f6:	681b      	ldr	r3, [r3, #0]
 800e3f8:	3301      	adds	r3, #1
 800e3fa:	4a3d      	ldr	r2, [pc, #244]	; (800e4f0 <xTaskIncrementTick+0x158>)
 800e3fc:	6013      	str	r3, [r2, #0]
 800e3fe:	f000 fb6f 	bl	800eae0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e402:	4b3c      	ldr	r3, [pc, #240]	; (800e4f4 <xTaskIncrementTick+0x15c>)
 800e404:	681b      	ldr	r3, [r3, #0]
 800e406:	693a      	ldr	r2, [r7, #16]
 800e408:	429a      	cmp	r2, r3
 800e40a:	d349      	bcc.n	800e4a0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e40c:	4b36      	ldr	r3, [pc, #216]	; (800e4e8 <xTaskIncrementTick+0x150>)
 800e40e:	681b      	ldr	r3, [r3, #0]
 800e410:	681b      	ldr	r3, [r3, #0]
 800e412:	2b00      	cmp	r3, #0
 800e414:	d104      	bne.n	800e420 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e416:	4b37      	ldr	r3, [pc, #220]	; (800e4f4 <xTaskIncrementTick+0x15c>)
 800e418:	f04f 32ff 	mov.w	r2, #4294967295
 800e41c:	601a      	str	r2, [r3, #0]
					break;
 800e41e:	e03f      	b.n	800e4a0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e420:	4b31      	ldr	r3, [pc, #196]	; (800e4e8 <xTaskIncrementTick+0x150>)
 800e422:	681b      	ldr	r3, [r3, #0]
 800e424:	68db      	ldr	r3, [r3, #12]
 800e426:	68db      	ldr	r3, [r3, #12]
 800e428:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e42a:	68bb      	ldr	r3, [r7, #8]
 800e42c:	685b      	ldr	r3, [r3, #4]
 800e42e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e430:	693a      	ldr	r2, [r7, #16]
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	429a      	cmp	r2, r3
 800e436:	d203      	bcs.n	800e440 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e438:	4a2e      	ldr	r2, [pc, #184]	; (800e4f4 <xTaskIncrementTick+0x15c>)
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e43e:	e02f      	b.n	800e4a0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e440:	68bb      	ldr	r3, [r7, #8]
 800e442:	3304      	adds	r3, #4
 800e444:	4618      	mov	r0, r3
 800e446:	f7fe fd05 	bl	800ce54 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e44a:	68bb      	ldr	r3, [r7, #8]
 800e44c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e44e:	2b00      	cmp	r3, #0
 800e450:	d004      	beq.n	800e45c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e452:	68bb      	ldr	r3, [r7, #8]
 800e454:	3318      	adds	r3, #24
 800e456:	4618      	mov	r0, r3
 800e458:	f7fe fcfc 	bl	800ce54 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e45c:	68bb      	ldr	r3, [r7, #8]
 800e45e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e460:	4b25      	ldr	r3, [pc, #148]	; (800e4f8 <xTaskIncrementTick+0x160>)
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	429a      	cmp	r2, r3
 800e466:	d903      	bls.n	800e470 <xTaskIncrementTick+0xd8>
 800e468:	68bb      	ldr	r3, [r7, #8]
 800e46a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e46c:	4a22      	ldr	r2, [pc, #136]	; (800e4f8 <xTaskIncrementTick+0x160>)
 800e46e:	6013      	str	r3, [r2, #0]
 800e470:	68bb      	ldr	r3, [r7, #8]
 800e472:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e474:	4613      	mov	r3, r2
 800e476:	009b      	lsls	r3, r3, #2
 800e478:	4413      	add	r3, r2
 800e47a:	009b      	lsls	r3, r3, #2
 800e47c:	4a1f      	ldr	r2, [pc, #124]	; (800e4fc <xTaskIncrementTick+0x164>)
 800e47e:	441a      	add	r2, r3
 800e480:	68bb      	ldr	r3, [r7, #8]
 800e482:	3304      	adds	r3, #4
 800e484:	4619      	mov	r1, r3
 800e486:	4610      	mov	r0, r2
 800e488:	f7fe fc87 	bl	800cd9a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e48c:	68bb      	ldr	r3, [r7, #8]
 800e48e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e490:	4b1b      	ldr	r3, [pc, #108]	; (800e500 <xTaskIncrementTick+0x168>)
 800e492:	681b      	ldr	r3, [r3, #0]
 800e494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e496:	429a      	cmp	r2, r3
 800e498:	d3b8      	bcc.n	800e40c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800e49a:	2301      	movs	r3, #1
 800e49c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e49e:	e7b5      	b.n	800e40c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e4a0:	4b17      	ldr	r3, [pc, #92]	; (800e500 <xTaskIncrementTick+0x168>)
 800e4a2:	681b      	ldr	r3, [r3, #0]
 800e4a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e4a6:	4915      	ldr	r1, [pc, #84]	; (800e4fc <xTaskIncrementTick+0x164>)
 800e4a8:	4613      	mov	r3, r2
 800e4aa:	009b      	lsls	r3, r3, #2
 800e4ac:	4413      	add	r3, r2
 800e4ae:	009b      	lsls	r3, r3, #2
 800e4b0:	440b      	add	r3, r1
 800e4b2:	681b      	ldr	r3, [r3, #0]
 800e4b4:	2b01      	cmp	r3, #1
 800e4b6:	d901      	bls.n	800e4bc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800e4b8:	2301      	movs	r3, #1
 800e4ba:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800e4bc:	4b11      	ldr	r3, [pc, #68]	; (800e504 <xTaskIncrementTick+0x16c>)
 800e4be:	681b      	ldr	r3, [r3, #0]
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	d007      	beq.n	800e4d4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800e4c4:	2301      	movs	r3, #1
 800e4c6:	617b      	str	r3, [r7, #20]
 800e4c8:	e004      	b.n	800e4d4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800e4ca:	4b0f      	ldr	r3, [pc, #60]	; (800e508 <xTaskIncrementTick+0x170>)
 800e4cc:	681b      	ldr	r3, [r3, #0]
 800e4ce:	3301      	adds	r3, #1
 800e4d0:	4a0d      	ldr	r2, [pc, #52]	; (800e508 <xTaskIncrementTick+0x170>)
 800e4d2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800e4d4:	697b      	ldr	r3, [r7, #20]
}
 800e4d6:	4618      	mov	r0, r3
 800e4d8:	3718      	adds	r7, #24
 800e4da:	46bd      	mov	sp, r7
 800e4dc:	bd80      	pop	{r7, pc}
 800e4de:	bf00      	nop
 800e4e0:	200011e4 	.word	0x200011e4
 800e4e4:	200011c0 	.word	0x200011c0
 800e4e8:	20001174 	.word	0x20001174
 800e4ec:	20001178 	.word	0x20001178
 800e4f0:	200011d4 	.word	0x200011d4
 800e4f4:	200011dc 	.word	0x200011dc
 800e4f8:	200011c4 	.word	0x200011c4
 800e4fc:	20000cec 	.word	0x20000cec
 800e500:	20000ce8 	.word	0x20000ce8
 800e504:	200011d0 	.word	0x200011d0
 800e508:	200011cc 	.word	0x200011cc

0800e50c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e50c:	b480      	push	{r7}
 800e50e:	b085      	sub	sp, #20
 800e510:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e512:	4b28      	ldr	r3, [pc, #160]	; (800e5b4 <vTaskSwitchContext+0xa8>)
 800e514:	681b      	ldr	r3, [r3, #0]
 800e516:	2b00      	cmp	r3, #0
 800e518:	d003      	beq.n	800e522 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e51a:	4b27      	ldr	r3, [pc, #156]	; (800e5b8 <vTaskSwitchContext+0xac>)
 800e51c:	2201      	movs	r2, #1
 800e51e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e520:	e041      	b.n	800e5a6 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800e522:	4b25      	ldr	r3, [pc, #148]	; (800e5b8 <vTaskSwitchContext+0xac>)
 800e524:	2200      	movs	r2, #0
 800e526:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e528:	4b24      	ldr	r3, [pc, #144]	; (800e5bc <vTaskSwitchContext+0xb0>)
 800e52a:	681b      	ldr	r3, [r3, #0]
 800e52c:	60fb      	str	r3, [r7, #12]
 800e52e:	e010      	b.n	800e552 <vTaskSwitchContext+0x46>
 800e530:	68fb      	ldr	r3, [r7, #12]
 800e532:	2b00      	cmp	r3, #0
 800e534:	d10a      	bne.n	800e54c <vTaskSwitchContext+0x40>
	__asm volatile
 800e536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e53a:	f383 8811 	msr	BASEPRI, r3
 800e53e:	f3bf 8f6f 	isb	sy
 800e542:	f3bf 8f4f 	dsb	sy
 800e546:	607b      	str	r3, [r7, #4]
}
 800e548:	bf00      	nop
 800e54a:	e7fe      	b.n	800e54a <vTaskSwitchContext+0x3e>
 800e54c:	68fb      	ldr	r3, [r7, #12]
 800e54e:	3b01      	subs	r3, #1
 800e550:	60fb      	str	r3, [r7, #12]
 800e552:	491b      	ldr	r1, [pc, #108]	; (800e5c0 <vTaskSwitchContext+0xb4>)
 800e554:	68fa      	ldr	r2, [r7, #12]
 800e556:	4613      	mov	r3, r2
 800e558:	009b      	lsls	r3, r3, #2
 800e55a:	4413      	add	r3, r2
 800e55c:	009b      	lsls	r3, r3, #2
 800e55e:	440b      	add	r3, r1
 800e560:	681b      	ldr	r3, [r3, #0]
 800e562:	2b00      	cmp	r3, #0
 800e564:	d0e4      	beq.n	800e530 <vTaskSwitchContext+0x24>
 800e566:	68fa      	ldr	r2, [r7, #12]
 800e568:	4613      	mov	r3, r2
 800e56a:	009b      	lsls	r3, r3, #2
 800e56c:	4413      	add	r3, r2
 800e56e:	009b      	lsls	r3, r3, #2
 800e570:	4a13      	ldr	r2, [pc, #76]	; (800e5c0 <vTaskSwitchContext+0xb4>)
 800e572:	4413      	add	r3, r2
 800e574:	60bb      	str	r3, [r7, #8]
 800e576:	68bb      	ldr	r3, [r7, #8]
 800e578:	685b      	ldr	r3, [r3, #4]
 800e57a:	685a      	ldr	r2, [r3, #4]
 800e57c:	68bb      	ldr	r3, [r7, #8]
 800e57e:	605a      	str	r2, [r3, #4]
 800e580:	68bb      	ldr	r3, [r7, #8]
 800e582:	685a      	ldr	r2, [r3, #4]
 800e584:	68bb      	ldr	r3, [r7, #8]
 800e586:	3308      	adds	r3, #8
 800e588:	429a      	cmp	r2, r3
 800e58a:	d104      	bne.n	800e596 <vTaskSwitchContext+0x8a>
 800e58c:	68bb      	ldr	r3, [r7, #8]
 800e58e:	685b      	ldr	r3, [r3, #4]
 800e590:	685a      	ldr	r2, [r3, #4]
 800e592:	68bb      	ldr	r3, [r7, #8]
 800e594:	605a      	str	r2, [r3, #4]
 800e596:	68bb      	ldr	r3, [r7, #8]
 800e598:	685b      	ldr	r3, [r3, #4]
 800e59a:	68db      	ldr	r3, [r3, #12]
 800e59c:	4a09      	ldr	r2, [pc, #36]	; (800e5c4 <vTaskSwitchContext+0xb8>)
 800e59e:	6013      	str	r3, [r2, #0]
 800e5a0:	4a06      	ldr	r2, [pc, #24]	; (800e5bc <vTaskSwitchContext+0xb0>)
 800e5a2:	68fb      	ldr	r3, [r7, #12]
 800e5a4:	6013      	str	r3, [r2, #0]
}
 800e5a6:	bf00      	nop
 800e5a8:	3714      	adds	r7, #20
 800e5aa:	46bd      	mov	sp, r7
 800e5ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5b0:	4770      	bx	lr
 800e5b2:	bf00      	nop
 800e5b4:	200011e4 	.word	0x200011e4
 800e5b8:	200011d0 	.word	0x200011d0
 800e5bc:	200011c4 	.word	0x200011c4
 800e5c0:	20000cec 	.word	0x20000cec
 800e5c4:	20000ce8 	.word	0x20000ce8

0800e5c8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e5c8:	b580      	push	{r7, lr}
 800e5ca:	b084      	sub	sp, #16
 800e5cc:	af00      	add	r7, sp, #0
 800e5ce:	6078      	str	r0, [r7, #4]
 800e5d0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	2b00      	cmp	r3, #0
 800e5d6:	d10a      	bne.n	800e5ee <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800e5d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5dc:	f383 8811 	msr	BASEPRI, r3
 800e5e0:	f3bf 8f6f 	isb	sy
 800e5e4:	f3bf 8f4f 	dsb	sy
 800e5e8:	60fb      	str	r3, [r7, #12]
}
 800e5ea:	bf00      	nop
 800e5ec:	e7fe      	b.n	800e5ec <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e5ee:	4b07      	ldr	r3, [pc, #28]	; (800e60c <vTaskPlaceOnEventList+0x44>)
 800e5f0:	681b      	ldr	r3, [r3, #0]
 800e5f2:	3318      	adds	r3, #24
 800e5f4:	4619      	mov	r1, r3
 800e5f6:	6878      	ldr	r0, [r7, #4]
 800e5f8:	f7fe fbf3 	bl	800cde2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e5fc:	2101      	movs	r1, #1
 800e5fe:	6838      	ldr	r0, [r7, #0]
 800e600:	f000 fc40 	bl	800ee84 <prvAddCurrentTaskToDelayedList>
}
 800e604:	bf00      	nop
 800e606:	3710      	adds	r7, #16
 800e608:	46bd      	mov	sp, r7
 800e60a:	bd80      	pop	{r7, pc}
 800e60c:	20000ce8 	.word	0x20000ce8

0800e610 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 800e610:	b580      	push	{r7, lr}
 800e612:	b086      	sub	sp, #24
 800e614:	af00      	add	r7, sp, #0
 800e616:	60f8      	str	r0, [r7, #12]
 800e618:	60b9      	str	r1, [r7, #8]
 800e61a:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 800e61c:	68fb      	ldr	r3, [r7, #12]
 800e61e:	2b00      	cmp	r3, #0
 800e620:	d10a      	bne.n	800e638 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 800e622:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e626:	f383 8811 	msr	BASEPRI, r3
 800e62a:	f3bf 8f6f 	isb	sy
 800e62e:	f3bf 8f4f 	dsb	sy
 800e632:	617b      	str	r3, [r7, #20]
}
 800e634:	bf00      	nop
 800e636:	e7fe      	b.n	800e636 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 800e638:	4b11      	ldr	r3, [pc, #68]	; (800e680 <vTaskPlaceOnUnorderedEventList+0x70>)
 800e63a:	681b      	ldr	r3, [r3, #0]
 800e63c:	2b00      	cmp	r3, #0
 800e63e:	d10a      	bne.n	800e656 <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 800e640:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e644:	f383 8811 	msr	BASEPRI, r3
 800e648:	f3bf 8f6f 	isb	sy
 800e64c:	f3bf 8f4f 	dsb	sy
 800e650:	613b      	str	r3, [r7, #16]
}
 800e652:	bf00      	nop
 800e654:	e7fe      	b.n	800e654 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800e656:	4b0b      	ldr	r3, [pc, #44]	; (800e684 <vTaskPlaceOnUnorderedEventList+0x74>)
 800e658:	681b      	ldr	r3, [r3, #0]
 800e65a:	68ba      	ldr	r2, [r7, #8]
 800e65c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800e660:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e662:	4b08      	ldr	r3, [pc, #32]	; (800e684 <vTaskPlaceOnUnorderedEventList+0x74>)
 800e664:	681b      	ldr	r3, [r3, #0]
 800e666:	3318      	adds	r3, #24
 800e668:	4619      	mov	r1, r3
 800e66a:	68f8      	ldr	r0, [r7, #12]
 800e66c:	f7fe fb95 	bl	800cd9a <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e670:	2101      	movs	r1, #1
 800e672:	6878      	ldr	r0, [r7, #4]
 800e674:	f000 fc06 	bl	800ee84 <prvAddCurrentTaskToDelayedList>
}
 800e678:	bf00      	nop
 800e67a:	3718      	adds	r7, #24
 800e67c:	46bd      	mov	sp, r7
 800e67e:	bd80      	pop	{r7, pc}
 800e680:	200011e4 	.word	0x200011e4
 800e684:	20000ce8 	.word	0x20000ce8

0800e688 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e688:	b580      	push	{r7, lr}
 800e68a:	b086      	sub	sp, #24
 800e68c:	af00      	add	r7, sp, #0
 800e68e:	60f8      	str	r0, [r7, #12]
 800e690:	60b9      	str	r1, [r7, #8]
 800e692:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800e694:	68fb      	ldr	r3, [r7, #12]
 800e696:	2b00      	cmp	r3, #0
 800e698:	d10a      	bne.n	800e6b0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800e69a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e69e:	f383 8811 	msr	BASEPRI, r3
 800e6a2:	f3bf 8f6f 	isb	sy
 800e6a6:	f3bf 8f4f 	dsb	sy
 800e6aa:	617b      	str	r3, [r7, #20]
}
 800e6ac:	bf00      	nop
 800e6ae:	e7fe      	b.n	800e6ae <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e6b0:	4b0a      	ldr	r3, [pc, #40]	; (800e6dc <vTaskPlaceOnEventListRestricted+0x54>)
 800e6b2:	681b      	ldr	r3, [r3, #0]
 800e6b4:	3318      	adds	r3, #24
 800e6b6:	4619      	mov	r1, r3
 800e6b8:	68f8      	ldr	r0, [r7, #12]
 800e6ba:	f7fe fb6e 	bl	800cd9a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	d002      	beq.n	800e6ca <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800e6c4:	f04f 33ff 	mov.w	r3, #4294967295
 800e6c8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800e6ca:	6879      	ldr	r1, [r7, #4]
 800e6cc:	68b8      	ldr	r0, [r7, #8]
 800e6ce:	f000 fbd9 	bl	800ee84 <prvAddCurrentTaskToDelayedList>
	}
 800e6d2:	bf00      	nop
 800e6d4:	3718      	adds	r7, #24
 800e6d6:	46bd      	mov	sp, r7
 800e6d8:	bd80      	pop	{r7, pc}
 800e6da:	bf00      	nop
 800e6dc:	20000ce8 	.word	0x20000ce8

0800e6e0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e6e0:	b580      	push	{r7, lr}
 800e6e2:	b086      	sub	sp, #24
 800e6e4:	af00      	add	r7, sp, #0
 800e6e6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	68db      	ldr	r3, [r3, #12]
 800e6ec:	68db      	ldr	r3, [r3, #12]
 800e6ee:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e6f0:	693b      	ldr	r3, [r7, #16]
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	d10a      	bne.n	800e70c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800e6f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6fa:	f383 8811 	msr	BASEPRI, r3
 800e6fe:	f3bf 8f6f 	isb	sy
 800e702:	f3bf 8f4f 	dsb	sy
 800e706:	60fb      	str	r3, [r7, #12]
}
 800e708:	bf00      	nop
 800e70a:	e7fe      	b.n	800e70a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e70c:	693b      	ldr	r3, [r7, #16]
 800e70e:	3318      	adds	r3, #24
 800e710:	4618      	mov	r0, r3
 800e712:	f7fe fb9f 	bl	800ce54 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e716:	4b1e      	ldr	r3, [pc, #120]	; (800e790 <xTaskRemoveFromEventList+0xb0>)
 800e718:	681b      	ldr	r3, [r3, #0]
 800e71a:	2b00      	cmp	r3, #0
 800e71c:	d11d      	bne.n	800e75a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e71e:	693b      	ldr	r3, [r7, #16]
 800e720:	3304      	adds	r3, #4
 800e722:	4618      	mov	r0, r3
 800e724:	f7fe fb96 	bl	800ce54 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e728:	693b      	ldr	r3, [r7, #16]
 800e72a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e72c:	4b19      	ldr	r3, [pc, #100]	; (800e794 <xTaskRemoveFromEventList+0xb4>)
 800e72e:	681b      	ldr	r3, [r3, #0]
 800e730:	429a      	cmp	r2, r3
 800e732:	d903      	bls.n	800e73c <xTaskRemoveFromEventList+0x5c>
 800e734:	693b      	ldr	r3, [r7, #16]
 800e736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e738:	4a16      	ldr	r2, [pc, #88]	; (800e794 <xTaskRemoveFromEventList+0xb4>)
 800e73a:	6013      	str	r3, [r2, #0]
 800e73c:	693b      	ldr	r3, [r7, #16]
 800e73e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e740:	4613      	mov	r3, r2
 800e742:	009b      	lsls	r3, r3, #2
 800e744:	4413      	add	r3, r2
 800e746:	009b      	lsls	r3, r3, #2
 800e748:	4a13      	ldr	r2, [pc, #76]	; (800e798 <xTaskRemoveFromEventList+0xb8>)
 800e74a:	441a      	add	r2, r3
 800e74c:	693b      	ldr	r3, [r7, #16]
 800e74e:	3304      	adds	r3, #4
 800e750:	4619      	mov	r1, r3
 800e752:	4610      	mov	r0, r2
 800e754:	f7fe fb21 	bl	800cd9a <vListInsertEnd>
 800e758:	e005      	b.n	800e766 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e75a:	693b      	ldr	r3, [r7, #16]
 800e75c:	3318      	adds	r3, #24
 800e75e:	4619      	mov	r1, r3
 800e760:	480e      	ldr	r0, [pc, #56]	; (800e79c <xTaskRemoveFromEventList+0xbc>)
 800e762:	f7fe fb1a 	bl	800cd9a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e766:	693b      	ldr	r3, [r7, #16]
 800e768:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e76a:	4b0d      	ldr	r3, [pc, #52]	; (800e7a0 <xTaskRemoveFromEventList+0xc0>)
 800e76c:	681b      	ldr	r3, [r3, #0]
 800e76e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e770:	429a      	cmp	r2, r3
 800e772:	d905      	bls.n	800e780 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e774:	2301      	movs	r3, #1
 800e776:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e778:	4b0a      	ldr	r3, [pc, #40]	; (800e7a4 <xTaskRemoveFromEventList+0xc4>)
 800e77a:	2201      	movs	r2, #1
 800e77c:	601a      	str	r2, [r3, #0]
 800e77e:	e001      	b.n	800e784 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800e780:	2300      	movs	r3, #0
 800e782:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e784:	697b      	ldr	r3, [r7, #20]
}
 800e786:	4618      	mov	r0, r3
 800e788:	3718      	adds	r7, #24
 800e78a:	46bd      	mov	sp, r7
 800e78c:	bd80      	pop	{r7, pc}
 800e78e:	bf00      	nop
 800e790:	200011e4 	.word	0x200011e4
 800e794:	200011c4 	.word	0x200011c4
 800e798:	20000cec 	.word	0x20000cec
 800e79c:	2000117c 	.word	0x2000117c
 800e7a0:	20000ce8 	.word	0x20000ce8
 800e7a4:	200011d0 	.word	0x200011d0

0800e7a8 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 800e7a8:	b580      	push	{r7, lr}
 800e7aa:	b086      	sub	sp, #24
 800e7ac:	af00      	add	r7, sp, #0
 800e7ae:	6078      	str	r0, [r7, #4]
 800e7b0:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 800e7b2:	4b29      	ldr	r3, [pc, #164]	; (800e858 <vTaskRemoveFromUnorderedEventList+0xb0>)
 800e7b4:	681b      	ldr	r3, [r3, #0]
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	d10a      	bne.n	800e7d0 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 800e7ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7be:	f383 8811 	msr	BASEPRI, r3
 800e7c2:	f3bf 8f6f 	isb	sy
 800e7c6:	f3bf 8f4f 	dsb	sy
 800e7ca:	613b      	str	r3, [r7, #16]
}
 800e7cc:	bf00      	nop
 800e7ce:	e7fe      	b.n	800e7ce <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800e7d0:	683b      	ldr	r3, [r7, #0]
 800e7d2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	68db      	ldr	r3, [r3, #12]
 800e7de:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 800e7e0:	697b      	ldr	r3, [r7, #20]
 800e7e2:	2b00      	cmp	r3, #0
 800e7e4:	d10a      	bne.n	800e7fc <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 800e7e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7ea:	f383 8811 	msr	BASEPRI, r3
 800e7ee:	f3bf 8f6f 	isb	sy
 800e7f2:	f3bf 8f4f 	dsb	sy
 800e7f6:	60fb      	str	r3, [r7, #12]
}
 800e7f8:	bf00      	nop
 800e7fa:	e7fe      	b.n	800e7fa <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 800e7fc:	6878      	ldr	r0, [r7, #4]
 800e7fe:	f7fe fb29 	bl	800ce54 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e802:	697b      	ldr	r3, [r7, #20]
 800e804:	3304      	adds	r3, #4
 800e806:	4618      	mov	r0, r3
 800e808:	f7fe fb24 	bl	800ce54 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 800e80c:	697b      	ldr	r3, [r7, #20]
 800e80e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e810:	4b12      	ldr	r3, [pc, #72]	; (800e85c <vTaskRemoveFromUnorderedEventList+0xb4>)
 800e812:	681b      	ldr	r3, [r3, #0]
 800e814:	429a      	cmp	r2, r3
 800e816:	d903      	bls.n	800e820 <vTaskRemoveFromUnorderedEventList+0x78>
 800e818:	697b      	ldr	r3, [r7, #20]
 800e81a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e81c:	4a0f      	ldr	r2, [pc, #60]	; (800e85c <vTaskRemoveFromUnorderedEventList+0xb4>)
 800e81e:	6013      	str	r3, [r2, #0]
 800e820:	697b      	ldr	r3, [r7, #20]
 800e822:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e824:	4613      	mov	r3, r2
 800e826:	009b      	lsls	r3, r3, #2
 800e828:	4413      	add	r3, r2
 800e82a:	009b      	lsls	r3, r3, #2
 800e82c:	4a0c      	ldr	r2, [pc, #48]	; (800e860 <vTaskRemoveFromUnorderedEventList+0xb8>)
 800e82e:	441a      	add	r2, r3
 800e830:	697b      	ldr	r3, [r7, #20]
 800e832:	3304      	adds	r3, #4
 800e834:	4619      	mov	r1, r3
 800e836:	4610      	mov	r0, r2
 800e838:	f7fe faaf 	bl	800cd9a <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e83c:	697b      	ldr	r3, [r7, #20]
 800e83e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e840:	4b08      	ldr	r3, [pc, #32]	; (800e864 <vTaskRemoveFromUnorderedEventList+0xbc>)
 800e842:	681b      	ldr	r3, [r3, #0]
 800e844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e846:	429a      	cmp	r2, r3
 800e848:	d902      	bls.n	800e850 <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 800e84a:	4b07      	ldr	r3, [pc, #28]	; (800e868 <vTaskRemoveFromUnorderedEventList+0xc0>)
 800e84c:	2201      	movs	r2, #1
 800e84e:	601a      	str	r2, [r3, #0]
	}
}
 800e850:	bf00      	nop
 800e852:	3718      	adds	r7, #24
 800e854:	46bd      	mov	sp, r7
 800e856:	bd80      	pop	{r7, pc}
 800e858:	200011e4 	.word	0x200011e4
 800e85c:	200011c4 	.word	0x200011c4
 800e860:	20000cec 	.word	0x20000cec
 800e864:	20000ce8 	.word	0x20000ce8
 800e868:	200011d0 	.word	0x200011d0

0800e86c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e86c:	b480      	push	{r7}
 800e86e:	b083      	sub	sp, #12
 800e870:	af00      	add	r7, sp, #0
 800e872:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e874:	4b06      	ldr	r3, [pc, #24]	; (800e890 <vTaskInternalSetTimeOutState+0x24>)
 800e876:	681a      	ldr	r2, [r3, #0]
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e87c:	4b05      	ldr	r3, [pc, #20]	; (800e894 <vTaskInternalSetTimeOutState+0x28>)
 800e87e:	681a      	ldr	r2, [r3, #0]
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	605a      	str	r2, [r3, #4]
}
 800e884:	bf00      	nop
 800e886:	370c      	adds	r7, #12
 800e888:	46bd      	mov	sp, r7
 800e88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e88e:	4770      	bx	lr
 800e890:	200011d4 	.word	0x200011d4
 800e894:	200011c0 	.word	0x200011c0

0800e898 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e898:	b580      	push	{r7, lr}
 800e89a:	b088      	sub	sp, #32
 800e89c:	af00      	add	r7, sp, #0
 800e89e:	6078      	str	r0, [r7, #4]
 800e8a0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	2b00      	cmp	r3, #0
 800e8a6:	d10a      	bne.n	800e8be <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800e8a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8ac:	f383 8811 	msr	BASEPRI, r3
 800e8b0:	f3bf 8f6f 	isb	sy
 800e8b4:	f3bf 8f4f 	dsb	sy
 800e8b8:	613b      	str	r3, [r7, #16]
}
 800e8ba:	bf00      	nop
 800e8bc:	e7fe      	b.n	800e8bc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800e8be:	683b      	ldr	r3, [r7, #0]
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	d10a      	bne.n	800e8da <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800e8c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8c8:	f383 8811 	msr	BASEPRI, r3
 800e8cc:	f3bf 8f6f 	isb	sy
 800e8d0:	f3bf 8f4f 	dsb	sy
 800e8d4:	60fb      	str	r3, [r7, #12]
}
 800e8d6:	bf00      	nop
 800e8d8:	e7fe      	b.n	800e8d8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800e8da:	f000 ffc3 	bl	800f864 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e8de:	4b1d      	ldr	r3, [pc, #116]	; (800e954 <xTaskCheckForTimeOut+0xbc>)
 800e8e0:	681b      	ldr	r3, [r3, #0]
 800e8e2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	685b      	ldr	r3, [r3, #4]
 800e8e8:	69ba      	ldr	r2, [r7, #24]
 800e8ea:	1ad3      	subs	r3, r2, r3
 800e8ec:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e8ee:	683b      	ldr	r3, [r7, #0]
 800e8f0:	681b      	ldr	r3, [r3, #0]
 800e8f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e8f6:	d102      	bne.n	800e8fe <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e8f8:	2300      	movs	r3, #0
 800e8fa:	61fb      	str	r3, [r7, #28]
 800e8fc:	e023      	b.n	800e946 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	681a      	ldr	r2, [r3, #0]
 800e902:	4b15      	ldr	r3, [pc, #84]	; (800e958 <xTaskCheckForTimeOut+0xc0>)
 800e904:	681b      	ldr	r3, [r3, #0]
 800e906:	429a      	cmp	r2, r3
 800e908:	d007      	beq.n	800e91a <xTaskCheckForTimeOut+0x82>
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	685b      	ldr	r3, [r3, #4]
 800e90e:	69ba      	ldr	r2, [r7, #24]
 800e910:	429a      	cmp	r2, r3
 800e912:	d302      	bcc.n	800e91a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e914:	2301      	movs	r3, #1
 800e916:	61fb      	str	r3, [r7, #28]
 800e918:	e015      	b.n	800e946 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e91a:	683b      	ldr	r3, [r7, #0]
 800e91c:	681b      	ldr	r3, [r3, #0]
 800e91e:	697a      	ldr	r2, [r7, #20]
 800e920:	429a      	cmp	r2, r3
 800e922:	d20b      	bcs.n	800e93c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e924:	683b      	ldr	r3, [r7, #0]
 800e926:	681a      	ldr	r2, [r3, #0]
 800e928:	697b      	ldr	r3, [r7, #20]
 800e92a:	1ad2      	subs	r2, r2, r3
 800e92c:	683b      	ldr	r3, [r7, #0]
 800e92e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e930:	6878      	ldr	r0, [r7, #4]
 800e932:	f7ff ff9b 	bl	800e86c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e936:	2300      	movs	r3, #0
 800e938:	61fb      	str	r3, [r7, #28]
 800e93a:	e004      	b.n	800e946 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800e93c:	683b      	ldr	r3, [r7, #0]
 800e93e:	2200      	movs	r2, #0
 800e940:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e942:	2301      	movs	r3, #1
 800e944:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e946:	f000 ffbd 	bl	800f8c4 <vPortExitCritical>

	return xReturn;
 800e94a:	69fb      	ldr	r3, [r7, #28]
}
 800e94c:	4618      	mov	r0, r3
 800e94e:	3720      	adds	r7, #32
 800e950:	46bd      	mov	sp, r7
 800e952:	bd80      	pop	{r7, pc}
 800e954:	200011c0 	.word	0x200011c0
 800e958:	200011d4 	.word	0x200011d4

0800e95c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e95c:	b480      	push	{r7}
 800e95e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e960:	4b03      	ldr	r3, [pc, #12]	; (800e970 <vTaskMissedYield+0x14>)
 800e962:	2201      	movs	r2, #1
 800e964:	601a      	str	r2, [r3, #0]
}
 800e966:	bf00      	nop
 800e968:	46bd      	mov	sp, r7
 800e96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e96e:	4770      	bx	lr
 800e970:	200011d0 	.word	0x200011d0

0800e974 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e974:	b580      	push	{r7, lr}
 800e976:	b082      	sub	sp, #8
 800e978:	af00      	add	r7, sp, #0
 800e97a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e97c:	f000 f852 	bl	800ea24 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e980:	4b06      	ldr	r3, [pc, #24]	; (800e99c <prvIdleTask+0x28>)
 800e982:	681b      	ldr	r3, [r3, #0]
 800e984:	2b01      	cmp	r3, #1
 800e986:	d9f9      	bls.n	800e97c <prvIdleTask+0x8>
			{
				taskYIELD();
 800e988:	4b05      	ldr	r3, [pc, #20]	; (800e9a0 <prvIdleTask+0x2c>)
 800e98a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e98e:	601a      	str	r2, [r3, #0]
 800e990:	f3bf 8f4f 	dsb	sy
 800e994:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e998:	e7f0      	b.n	800e97c <prvIdleTask+0x8>
 800e99a:	bf00      	nop
 800e99c:	20000cec 	.word	0x20000cec
 800e9a0:	e000ed04 	.word	0xe000ed04

0800e9a4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e9a4:	b580      	push	{r7, lr}
 800e9a6:	b082      	sub	sp, #8
 800e9a8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e9aa:	2300      	movs	r3, #0
 800e9ac:	607b      	str	r3, [r7, #4]
 800e9ae:	e00c      	b.n	800e9ca <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e9b0:	687a      	ldr	r2, [r7, #4]
 800e9b2:	4613      	mov	r3, r2
 800e9b4:	009b      	lsls	r3, r3, #2
 800e9b6:	4413      	add	r3, r2
 800e9b8:	009b      	lsls	r3, r3, #2
 800e9ba:	4a12      	ldr	r2, [pc, #72]	; (800ea04 <prvInitialiseTaskLists+0x60>)
 800e9bc:	4413      	add	r3, r2
 800e9be:	4618      	mov	r0, r3
 800e9c0:	f7fe f9be 	bl	800cd40 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	3301      	adds	r3, #1
 800e9c8:	607b      	str	r3, [r7, #4]
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	2b37      	cmp	r3, #55	; 0x37
 800e9ce:	d9ef      	bls.n	800e9b0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e9d0:	480d      	ldr	r0, [pc, #52]	; (800ea08 <prvInitialiseTaskLists+0x64>)
 800e9d2:	f7fe f9b5 	bl	800cd40 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e9d6:	480d      	ldr	r0, [pc, #52]	; (800ea0c <prvInitialiseTaskLists+0x68>)
 800e9d8:	f7fe f9b2 	bl	800cd40 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e9dc:	480c      	ldr	r0, [pc, #48]	; (800ea10 <prvInitialiseTaskLists+0x6c>)
 800e9de:	f7fe f9af 	bl	800cd40 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e9e2:	480c      	ldr	r0, [pc, #48]	; (800ea14 <prvInitialiseTaskLists+0x70>)
 800e9e4:	f7fe f9ac 	bl	800cd40 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e9e8:	480b      	ldr	r0, [pc, #44]	; (800ea18 <prvInitialiseTaskLists+0x74>)
 800e9ea:	f7fe f9a9 	bl	800cd40 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e9ee:	4b0b      	ldr	r3, [pc, #44]	; (800ea1c <prvInitialiseTaskLists+0x78>)
 800e9f0:	4a05      	ldr	r2, [pc, #20]	; (800ea08 <prvInitialiseTaskLists+0x64>)
 800e9f2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e9f4:	4b0a      	ldr	r3, [pc, #40]	; (800ea20 <prvInitialiseTaskLists+0x7c>)
 800e9f6:	4a05      	ldr	r2, [pc, #20]	; (800ea0c <prvInitialiseTaskLists+0x68>)
 800e9f8:	601a      	str	r2, [r3, #0]
}
 800e9fa:	bf00      	nop
 800e9fc:	3708      	adds	r7, #8
 800e9fe:	46bd      	mov	sp, r7
 800ea00:	bd80      	pop	{r7, pc}
 800ea02:	bf00      	nop
 800ea04:	20000cec 	.word	0x20000cec
 800ea08:	2000114c 	.word	0x2000114c
 800ea0c:	20001160 	.word	0x20001160
 800ea10:	2000117c 	.word	0x2000117c
 800ea14:	20001190 	.word	0x20001190
 800ea18:	200011a8 	.word	0x200011a8
 800ea1c:	20001174 	.word	0x20001174
 800ea20:	20001178 	.word	0x20001178

0800ea24 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ea24:	b580      	push	{r7, lr}
 800ea26:	b082      	sub	sp, #8
 800ea28:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ea2a:	e019      	b.n	800ea60 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ea2c:	f000 ff1a 	bl	800f864 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ea30:	4b10      	ldr	r3, [pc, #64]	; (800ea74 <prvCheckTasksWaitingTermination+0x50>)
 800ea32:	68db      	ldr	r3, [r3, #12]
 800ea34:	68db      	ldr	r3, [r3, #12]
 800ea36:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	3304      	adds	r3, #4
 800ea3c:	4618      	mov	r0, r3
 800ea3e:	f7fe fa09 	bl	800ce54 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ea42:	4b0d      	ldr	r3, [pc, #52]	; (800ea78 <prvCheckTasksWaitingTermination+0x54>)
 800ea44:	681b      	ldr	r3, [r3, #0]
 800ea46:	3b01      	subs	r3, #1
 800ea48:	4a0b      	ldr	r2, [pc, #44]	; (800ea78 <prvCheckTasksWaitingTermination+0x54>)
 800ea4a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ea4c:	4b0b      	ldr	r3, [pc, #44]	; (800ea7c <prvCheckTasksWaitingTermination+0x58>)
 800ea4e:	681b      	ldr	r3, [r3, #0]
 800ea50:	3b01      	subs	r3, #1
 800ea52:	4a0a      	ldr	r2, [pc, #40]	; (800ea7c <prvCheckTasksWaitingTermination+0x58>)
 800ea54:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ea56:	f000 ff35 	bl	800f8c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ea5a:	6878      	ldr	r0, [r7, #4]
 800ea5c:	f000 f810 	bl	800ea80 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ea60:	4b06      	ldr	r3, [pc, #24]	; (800ea7c <prvCheckTasksWaitingTermination+0x58>)
 800ea62:	681b      	ldr	r3, [r3, #0]
 800ea64:	2b00      	cmp	r3, #0
 800ea66:	d1e1      	bne.n	800ea2c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ea68:	bf00      	nop
 800ea6a:	bf00      	nop
 800ea6c:	3708      	adds	r7, #8
 800ea6e:	46bd      	mov	sp, r7
 800ea70:	bd80      	pop	{r7, pc}
 800ea72:	bf00      	nop
 800ea74:	20001190 	.word	0x20001190
 800ea78:	200011bc 	.word	0x200011bc
 800ea7c:	200011a4 	.word	0x200011a4

0800ea80 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ea80:	b580      	push	{r7, lr}
 800ea82:	b084      	sub	sp, #16
 800ea84:	af00      	add	r7, sp, #0
 800ea86:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	d108      	bne.n	800eaa4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ea96:	4618      	mov	r0, r3
 800ea98:	f001 f8d2 	bl	800fc40 <vPortFree>
				vPortFree( pxTCB );
 800ea9c:	6878      	ldr	r0, [r7, #4]
 800ea9e:	f001 f8cf 	bl	800fc40 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800eaa2:	e018      	b.n	800ead6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800eaaa:	2b01      	cmp	r3, #1
 800eaac:	d103      	bne.n	800eab6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800eaae:	6878      	ldr	r0, [r7, #4]
 800eab0:	f001 f8c6 	bl	800fc40 <vPortFree>
	}
 800eab4:	e00f      	b.n	800ead6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800eabc:	2b02      	cmp	r3, #2
 800eabe:	d00a      	beq.n	800ead6 <prvDeleteTCB+0x56>
	__asm volatile
 800eac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eac4:	f383 8811 	msr	BASEPRI, r3
 800eac8:	f3bf 8f6f 	isb	sy
 800eacc:	f3bf 8f4f 	dsb	sy
 800ead0:	60fb      	str	r3, [r7, #12]
}
 800ead2:	bf00      	nop
 800ead4:	e7fe      	b.n	800ead4 <prvDeleteTCB+0x54>
	}
 800ead6:	bf00      	nop
 800ead8:	3710      	adds	r7, #16
 800eada:	46bd      	mov	sp, r7
 800eadc:	bd80      	pop	{r7, pc}
	...

0800eae0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800eae0:	b480      	push	{r7}
 800eae2:	b083      	sub	sp, #12
 800eae4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800eae6:	4b0c      	ldr	r3, [pc, #48]	; (800eb18 <prvResetNextTaskUnblockTime+0x38>)
 800eae8:	681b      	ldr	r3, [r3, #0]
 800eaea:	681b      	ldr	r3, [r3, #0]
 800eaec:	2b00      	cmp	r3, #0
 800eaee:	d104      	bne.n	800eafa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800eaf0:	4b0a      	ldr	r3, [pc, #40]	; (800eb1c <prvResetNextTaskUnblockTime+0x3c>)
 800eaf2:	f04f 32ff 	mov.w	r2, #4294967295
 800eaf6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800eaf8:	e008      	b.n	800eb0c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eafa:	4b07      	ldr	r3, [pc, #28]	; (800eb18 <prvResetNextTaskUnblockTime+0x38>)
 800eafc:	681b      	ldr	r3, [r3, #0]
 800eafe:	68db      	ldr	r3, [r3, #12]
 800eb00:	68db      	ldr	r3, [r3, #12]
 800eb02:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	685b      	ldr	r3, [r3, #4]
 800eb08:	4a04      	ldr	r2, [pc, #16]	; (800eb1c <prvResetNextTaskUnblockTime+0x3c>)
 800eb0a:	6013      	str	r3, [r2, #0]
}
 800eb0c:	bf00      	nop
 800eb0e:	370c      	adds	r7, #12
 800eb10:	46bd      	mov	sp, r7
 800eb12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb16:	4770      	bx	lr
 800eb18:	20001174 	.word	0x20001174
 800eb1c:	200011dc 	.word	0x200011dc

0800eb20 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800eb20:	b480      	push	{r7}
 800eb22:	b083      	sub	sp, #12
 800eb24:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800eb26:	4b05      	ldr	r3, [pc, #20]	; (800eb3c <xTaskGetCurrentTaskHandle+0x1c>)
 800eb28:	681b      	ldr	r3, [r3, #0]
 800eb2a:	607b      	str	r3, [r7, #4]

		return xReturn;
 800eb2c:	687b      	ldr	r3, [r7, #4]
	}
 800eb2e:	4618      	mov	r0, r3
 800eb30:	370c      	adds	r7, #12
 800eb32:	46bd      	mov	sp, r7
 800eb34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb38:	4770      	bx	lr
 800eb3a:	bf00      	nop
 800eb3c:	20000ce8 	.word	0x20000ce8

0800eb40 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800eb40:	b480      	push	{r7}
 800eb42:	b083      	sub	sp, #12
 800eb44:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800eb46:	4b0b      	ldr	r3, [pc, #44]	; (800eb74 <xTaskGetSchedulerState+0x34>)
 800eb48:	681b      	ldr	r3, [r3, #0]
 800eb4a:	2b00      	cmp	r3, #0
 800eb4c:	d102      	bne.n	800eb54 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800eb4e:	2301      	movs	r3, #1
 800eb50:	607b      	str	r3, [r7, #4]
 800eb52:	e008      	b.n	800eb66 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800eb54:	4b08      	ldr	r3, [pc, #32]	; (800eb78 <xTaskGetSchedulerState+0x38>)
 800eb56:	681b      	ldr	r3, [r3, #0]
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	d102      	bne.n	800eb62 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800eb5c:	2302      	movs	r3, #2
 800eb5e:	607b      	str	r3, [r7, #4]
 800eb60:	e001      	b.n	800eb66 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800eb62:	2300      	movs	r3, #0
 800eb64:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800eb66:	687b      	ldr	r3, [r7, #4]
	}
 800eb68:	4618      	mov	r0, r3
 800eb6a:	370c      	adds	r7, #12
 800eb6c:	46bd      	mov	sp, r7
 800eb6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb72:	4770      	bx	lr
 800eb74:	200011c8 	.word	0x200011c8
 800eb78:	200011e4 	.word	0x200011e4

0800eb7c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800eb7c:	b580      	push	{r7, lr}
 800eb7e:	b084      	sub	sp, #16
 800eb80:	af00      	add	r7, sp, #0
 800eb82:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800eb88:	2300      	movs	r3, #0
 800eb8a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	d051      	beq.n	800ec36 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800eb92:	68bb      	ldr	r3, [r7, #8]
 800eb94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb96:	4b2a      	ldr	r3, [pc, #168]	; (800ec40 <xTaskPriorityInherit+0xc4>)
 800eb98:	681b      	ldr	r3, [r3, #0]
 800eb9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb9c:	429a      	cmp	r2, r3
 800eb9e:	d241      	bcs.n	800ec24 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800eba0:	68bb      	ldr	r3, [r7, #8]
 800eba2:	699b      	ldr	r3, [r3, #24]
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	db06      	blt.n	800ebb6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800eba8:	4b25      	ldr	r3, [pc, #148]	; (800ec40 <xTaskPriorityInherit+0xc4>)
 800ebaa:	681b      	ldr	r3, [r3, #0]
 800ebac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ebae:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ebb2:	68bb      	ldr	r3, [r7, #8]
 800ebb4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800ebb6:	68bb      	ldr	r3, [r7, #8]
 800ebb8:	6959      	ldr	r1, [r3, #20]
 800ebba:	68bb      	ldr	r3, [r7, #8]
 800ebbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ebbe:	4613      	mov	r3, r2
 800ebc0:	009b      	lsls	r3, r3, #2
 800ebc2:	4413      	add	r3, r2
 800ebc4:	009b      	lsls	r3, r3, #2
 800ebc6:	4a1f      	ldr	r2, [pc, #124]	; (800ec44 <xTaskPriorityInherit+0xc8>)
 800ebc8:	4413      	add	r3, r2
 800ebca:	4299      	cmp	r1, r3
 800ebcc:	d122      	bne.n	800ec14 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ebce:	68bb      	ldr	r3, [r7, #8]
 800ebd0:	3304      	adds	r3, #4
 800ebd2:	4618      	mov	r0, r3
 800ebd4:	f7fe f93e 	bl	800ce54 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ebd8:	4b19      	ldr	r3, [pc, #100]	; (800ec40 <xTaskPriorityInherit+0xc4>)
 800ebda:	681b      	ldr	r3, [r3, #0]
 800ebdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ebde:	68bb      	ldr	r3, [r7, #8]
 800ebe0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800ebe2:	68bb      	ldr	r3, [r7, #8]
 800ebe4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ebe6:	4b18      	ldr	r3, [pc, #96]	; (800ec48 <xTaskPriorityInherit+0xcc>)
 800ebe8:	681b      	ldr	r3, [r3, #0]
 800ebea:	429a      	cmp	r2, r3
 800ebec:	d903      	bls.n	800ebf6 <xTaskPriorityInherit+0x7a>
 800ebee:	68bb      	ldr	r3, [r7, #8]
 800ebf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ebf2:	4a15      	ldr	r2, [pc, #84]	; (800ec48 <xTaskPriorityInherit+0xcc>)
 800ebf4:	6013      	str	r3, [r2, #0]
 800ebf6:	68bb      	ldr	r3, [r7, #8]
 800ebf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ebfa:	4613      	mov	r3, r2
 800ebfc:	009b      	lsls	r3, r3, #2
 800ebfe:	4413      	add	r3, r2
 800ec00:	009b      	lsls	r3, r3, #2
 800ec02:	4a10      	ldr	r2, [pc, #64]	; (800ec44 <xTaskPriorityInherit+0xc8>)
 800ec04:	441a      	add	r2, r3
 800ec06:	68bb      	ldr	r3, [r7, #8]
 800ec08:	3304      	adds	r3, #4
 800ec0a:	4619      	mov	r1, r3
 800ec0c:	4610      	mov	r0, r2
 800ec0e:	f7fe f8c4 	bl	800cd9a <vListInsertEnd>
 800ec12:	e004      	b.n	800ec1e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ec14:	4b0a      	ldr	r3, [pc, #40]	; (800ec40 <xTaskPriorityInherit+0xc4>)
 800ec16:	681b      	ldr	r3, [r3, #0]
 800ec18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec1a:	68bb      	ldr	r3, [r7, #8]
 800ec1c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800ec1e:	2301      	movs	r3, #1
 800ec20:	60fb      	str	r3, [r7, #12]
 800ec22:	e008      	b.n	800ec36 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800ec24:	68bb      	ldr	r3, [r7, #8]
 800ec26:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ec28:	4b05      	ldr	r3, [pc, #20]	; (800ec40 <xTaskPriorityInherit+0xc4>)
 800ec2a:	681b      	ldr	r3, [r3, #0]
 800ec2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec2e:	429a      	cmp	r2, r3
 800ec30:	d201      	bcs.n	800ec36 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800ec32:	2301      	movs	r3, #1
 800ec34:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ec36:	68fb      	ldr	r3, [r7, #12]
	}
 800ec38:	4618      	mov	r0, r3
 800ec3a:	3710      	adds	r7, #16
 800ec3c:	46bd      	mov	sp, r7
 800ec3e:	bd80      	pop	{r7, pc}
 800ec40:	20000ce8 	.word	0x20000ce8
 800ec44:	20000cec 	.word	0x20000cec
 800ec48:	200011c4 	.word	0x200011c4

0800ec4c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ec4c:	b580      	push	{r7, lr}
 800ec4e:	b086      	sub	sp, #24
 800ec50:	af00      	add	r7, sp, #0
 800ec52:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ec58:	2300      	movs	r3, #0
 800ec5a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	2b00      	cmp	r3, #0
 800ec60:	d056      	beq.n	800ed10 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ec62:	4b2e      	ldr	r3, [pc, #184]	; (800ed1c <xTaskPriorityDisinherit+0xd0>)
 800ec64:	681b      	ldr	r3, [r3, #0]
 800ec66:	693a      	ldr	r2, [r7, #16]
 800ec68:	429a      	cmp	r2, r3
 800ec6a:	d00a      	beq.n	800ec82 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800ec6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec70:	f383 8811 	msr	BASEPRI, r3
 800ec74:	f3bf 8f6f 	isb	sy
 800ec78:	f3bf 8f4f 	dsb	sy
 800ec7c:	60fb      	str	r3, [r7, #12]
}
 800ec7e:	bf00      	nop
 800ec80:	e7fe      	b.n	800ec80 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800ec82:	693b      	ldr	r3, [r7, #16]
 800ec84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ec86:	2b00      	cmp	r3, #0
 800ec88:	d10a      	bne.n	800eca0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800ec8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec8e:	f383 8811 	msr	BASEPRI, r3
 800ec92:	f3bf 8f6f 	isb	sy
 800ec96:	f3bf 8f4f 	dsb	sy
 800ec9a:	60bb      	str	r3, [r7, #8]
}
 800ec9c:	bf00      	nop
 800ec9e:	e7fe      	b.n	800ec9e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800eca0:	693b      	ldr	r3, [r7, #16]
 800eca2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800eca4:	1e5a      	subs	r2, r3, #1
 800eca6:	693b      	ldr	r3, [r7, #16]
 800eca8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ecaa:	693b      	ldr	r3, [r7, #16]
 800ecac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ecae:	693b      	ldr	r3, [r7, #16]
 800ecb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ecb2:	429a      	cmp	r2, r3
 800ecb4:	d02c      	beq.n	800ed10 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ecb6:	693b      	ldr	r3, [r7, #16]
 800ecb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ecba:	2b00      	cmp	r3, #0
 800ecbc:	d128      	bne.n	800ed10 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ecbe:	693b      	ldr	r3, [r7, #16]
 800ecc0:	3304      	adds	r3, #4
 800ecc2:	4618      	mov	r0, r3
 800ecc4:	f7fe f8c6 	bl	800ce54 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ecc8:	693b      	ldr	r3, [r7, #16]
 800ecca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800eccc:	693b      	ldr	r3, [r7, #16]
 800ecce:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ecd0:	693b      	ldr	r3, [r7, #16]
 800ecd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ecd4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ecd8:	693b      	ldr	r3, [r7, #16]
 800ecda:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ecdc:	693b      	ldr	r3, [r7, #16]
 800ecde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ece0:	4b0f      	ldr	r3, [pc, #60]	; (800ed20 <xTaskPriorityDisinherit+0xd4>)
 800ece2:	681b      	ldr	r3, [r3, #0]
 800ece4:	429a      	cmp	r2, r3
 800ece6:	d903      	bls.n	800ecf0 <xTaskPriorityDisinherit+0xa4>
 800ece8:	693b      	ldr	r3, [r7, #16]
 800ecea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ecec:	4a0c      	ldr	r2, [pc, #48]	; (800ed20 <xTaskPriorityDisinherit+0xd4>)
 800ecee:	6013      	str	r3, [r2, #0]
 800ecf0:	693b      	ldr	r3, [r7, #16]
 800ecf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ecf4:	4613      	mov	r3, r2
 800ecf6:	009b      	lsls	r3, r3, #2
 800ecf8:	4413      	add	r3, r2
 800ecfa:	009b      	lsls	r3, r3, #2
 800ecfc:	4a09      	ldr	r2, [pc, #36]	; (800ed24 <xTaskPriorityDisinherit+0xd8>)
 800ecfe:	441a      	add	r2, r3
 800ed00:	693b      	ldr	r3, [r7, #16]
 800ed02:	3304      	adds	r3, #4
 800ed04:	4619      	mov	r1, r3
 800ed06:	4610      	mov	r0, r2
 800ed08:	f7fe f847 	bl	800cd9a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ed0c:	2301      	movs	r3, #1
 800ed0e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ed10:	697b      	ldr	r3, [r7, #20]
	}
 800ed12:	4618      	mov	r0, r3
 800ed14:	3718      	adds	r7, #24
 800ed16:	46bd      	mov	sp, r7
 800ed18:	bd80      	pop	{r7, pc}
 800ed1a:	bf00      	nop
 800ed1c:	20000ce8 	.word	0x20000ce8
 800ed20:	200011c4 	.word	0x200011c4
 800ed24:	20000cec 	.word	0x20000cec

0800ed28 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800ed28:	b580      	push	{r7, lr}
 800ed2a:	b088      	sub	sp, #32
 800ed2c:	af00      	add	r7, sp, #0
 800ed2e:	6078      	str	r0, [r7, #4]
 800ed30:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800ed36:	2301      	movs	r3, #1
 800ed38:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	2b00      	cmp	r3, #0
 800ed3e:	d06a      	beq.n	800ee16 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800ed40:	69bb      	ldr	r3, [r7, #24]
 800ed42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ed44:	2b00      	cmp	r3, #0
 800ed46:	d10a      	bne.n	800ed5e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800ed48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed4c:	f383 8811 	msr	BASEPRI, r3
 800ed50:	f3bf 8f6f 	isb	sy
 800ed54:	f3bf 8f4f 	dsb	sy
 800ed58:	60fb      	str	r3, [r7, #12]
}
 800ed5a:	bf00      	nop
 800ed5c:	e7fe      	b.n	800ed5c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800ed5e:	69bb      	ldr	r3, [r7, #24]
 800ed60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ed62:	683a      	ldr	r2, [r7, #0]
 800ed64:	429a      	cmp	r2, r3
 800ed66:	d902      	bls.n	800ed6e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800ed68:	683b      	ldr	r3, [r7, #0]
 800ed6a:	61fb      	str	r3, [r7, #28]
 800ed6c:	e002      	b.n	800ed74 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800ed6e:	69bb      	ldr	r3, [r7, #24]
 800ed70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ed72:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800ed74:	69bb      	ldr	r3, [r7, #24]
 800ed76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed78:	69fa      	ldr	r2, [r7, #28]
 800ed7a:	429a      	cmp	r2, r3
 800ed7c:	d04b      	beq.n	800ee16 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800ed7e:	69bb      	ldr	r3, [r7, #24]
 800ed80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ed82:	697a      	ldr	r2, [r7, #20]
 800ed84:	429a      	cmp	r2, r3
 800ed86:	d146      	bne.n	800ee16 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800ed88:	4b25      	ldr	r3, [pc, #148]	; (800ee20 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800ed8a:	681b      	ldr	r3, [r3, #0]
 800ed8c:	69ba      	ldr	r2, [r7, #24]
 800ed8e:	429a      	cmp	r2, r3
 800ed90:	d10a      	bne.n	800eda8 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800ed92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed96:	f383 8811 	msr	BASEPRI, r3
 800ed9a:	f3bf 8f6f 	isb	sy
 800ed9e:	f3bf 8f4f 	dsb	sy
 800eda2:	60bb      	str	r3, [r7, #8]
}
 800eda4:	bf00      	nop
 800eda6:	e7fe      	b.n	800eda6 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800eda8:	69bb      	ldr	r3, [r7, #24]
 800edaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800edac:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800edae:	69bb      	ldr	r3, [r7, #24]
 800edb0:	69fa      	ldr	r2, [r7, #28]
 800edb2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800edb4:	69bb      	ldr	r3, [r7, #24]
 800edb6:	699b      	ldr	r3, [r3, #24]
 800edb8:	2b00      	cmp	r3, #0
 800edba:	db04      	blt.n	800edc6 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800edbc:	69fb      	ldr	r3, [r7, #28]
 800edbe:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800edc2:	69bb      	ldr	r3, [r7, #24]
 800edc4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800edc6:	69bb      	ldr	r3, [r7, #24]
 800edc8:	6959      	ldr	r1, [r3, #20]
 800edca:	693a      	ldr	r2, [r7, #16]
 800edcc:	4613      	mov	r3, r2
 800edce:	009b      	lsls	r3, r3, #2
 800edd0:	4413      	add	r3, r2
 800edd2:	009b      	lsls	r3, r3, #2
 800edd4:	4a13      	ldr	r2, [pc, #76]	; (800ee24 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800edd6:	4413      	add	r3, r2
 800edd8:	4299      	cmp	r1, r3
 800edda:	d11c      	bne.n	800ee16 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800eddc:	69bb      	ldr	r3, [r7, #24]
 800edde:	3304      	adds	r3, #4
 800ede0:	4618      	mov	r0, r3
 800ede2:	f7fe f837 	bl	800ce54 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800ede6:	69bb      	ldr	r3, [r7, #24]
 800ede8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800edea:	4b0f      	ldr	r3, [pc, #60]	; (800ee28 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800edec:	681b      	ldr	r3, [r3, #0]
 800edee:	429a      	cmp	r2, r3
 800edf0:	d903      	bls.n	800edfa <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800edf2:	69bb      	ldr	r3, [r7, #24]
 800edf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800edf6:	4a0c      	ldr	r2, [pc, #48]	; (800ee28 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800edf8:	6013      	str	r3, [r2, #0]
 800edfa:	69bb      	ldr	r3, [r7, #24]
 800edfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800edfe:	4613      	mov	r3, r2
 800ee00:	009b      	lsls	r3, r3, #2
 800ee02:	4413      	add	r3, r2
 800ee04:	009b      	lsls	r3, r3, #2
 800ee06:	4a07      	ldr	r2, [pc, #28]	; (800ee24 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800ee08:	441a      	add	r2, r3
 800ee0a:	69bb      	ldr	r3, [r7, #24]
 800ee0c:	3304      	adds	r3, #4
 800ee0e:	4619      	mov	r1, r3
 800ee10:	4610      	mov	r0, r2
 800ee12:	f7fd ffc2 	bl	800cd9a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ee16:	bf00      	nop
 800ee18:	3720      	adds	r7, #32
 800ee1a:	46bd      	mov	sp, r7
 800ee1c:	bd80      	pop	{r7, pc}
 800ee1e:	bf00      	nop
 800ee20:	20000ce8 	.word	0x20000ce8
 800ee24:	20000cec 	.word	0x20000cec
 800ee28:	200011c4 	.word	0x200011c4

0800ee2c <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 800ee2c:	b480      	push	{r7}
 800ee2e:	b083      	sub	sp, #12
 800ee30:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800ee32:	4b09      	ldr	r3, [pc, #36]	; (800ee58 <uxTaskResetEventItemValue+0x2c>)
 800ee34:	681b      	ldr	r3, [r3, #0]
 800ee36:	699b      	ldr	r3, [r3, #24]
 800ee38:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ee3a:	4b07      	ldr	r3, [pc, #28]	; (800ee58 <uxTaskResetEventItemValue+0x2c>)
 800ee3c:	681b      	ldr	r3, [r3, #0]
 800ee3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee40:	4b05      	ldr	r3, [pc, #20]	; (800ee58 <uxTaskResetEventItemValue+0x2c>)
 800ee42:	681b      	ldr	r3, [r3, #0]
 800ee44:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 800ee48:	619a      	str	r2, [r3, #24]

	return uxReturn;
 800ee4a:	687b      	ldr	r3, [r7, #4]
}
 800ee4c:	4618      	mov	r0, r3
 800ee4e:	370c      	adds	r7, #12
 800ee50:	46bd      	mov	sp, r7
 800ee52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee56:	4770      	bx	lr
 800ee58:	20000ce8 	.word	0x20000ce8

0800ee5c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800ee5c:	b480      	push	{r7}
 800ee5e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800ee60:	4b07      	ldr	r3, [pc, #28]	; (800ee80 <pvTaskIncrementMutexHeldCount+0x24>)
 800ee62:	681b      	ldr	r3, [r3, #0]
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	d004      	beq.n	800ee72 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800ee68:	4b05      	ldr	r3, [pc, #20]	; (800ee80 <pvTaskIncrementMutexHeldCount+0x24>)
 800ee6a:	681b      	ldr	r3, [r3, #0]
 800ee6c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ee6e:	3201      	adds	r2, #1
 800ee70:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800ee72:	4b03      	ldr	r3, [pc, #12]	; (800ee80 <pvTaskIncrementMutexHeldCount+0x24>)
 800ee74:	681b      	ldr	r3, [r3, #0]
	}
 800ee76:	4618      	mov	r0, r3
 800ee78:	46bd      	mov	sp, r7
 800ee7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee7e:	4770      	bx	lr
 800ee80:	20000ce8 	.word	0x20000ce8

0800ee84 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ee84:	b580      	push	{r7, lr}
 800ee86:	b084      	sub	sp, #16
 800ee88:	af00      	add	r7, sp, #0
 800ee8a:	6078      	str	r0, [r7, #4]
 800ee8c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ee8e:	4b21      	ldr	r3, [pc, #132]	; (800ef14 <prvAddCurrentTaskToDelayedList+0x90>)
 800ee90:	681b      	ldr	r3, [r3, #0]
 800ee92:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ee94:	4b20      	ldr	r3, [pc, #128]	; (800ef18 <prvAddCurrentTaskToDelayedList+0x94>)
 800ee96:	681b      	ldr	r3, [r3, #0]
 800ee98:	3304      	adds	r3, #4
 800ee9a:	4618      	mov	r0, r3
 800ee9c:	f7fd ffda 	bl	800ce54 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eea6:	d10a      	bne.n	800eebe <prvAddCurrentTaskToDelayedList+0x3a>
 800eea8:	683b      	ldr	r3, [r7, #0]
 800eeaa:	2b00      	cmp	r3, #0
 800eeac:	d007      	beq.n	800eebe <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800eeae:	4b1a      	ldr	r3, [pc, #104]	; (800ef18 <prvAddCurrentTaskToDelayedList+0x94>)
 800eeb0:	681b      	ldr	r3, [r3, #0]
 800eeb2:	3304      	adds	r3, #4
 800eeb4:	4619      	mov	r1, r3
 800eeb6:	4819      	ldr	r0, [pc, #100]	; (800ef1c <prvAddCurrentTaskToDelayedList+0x98>)
 800eeb8:	f7fd ff6f 	bl	800cd9a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800eebc:	e026      	b.n	800ef0c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800eebe:	68fa      	ldr	r2, [r7, #12]
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	4413      	add	r3, r2
 800eec4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800eec6:	4b14      	ldr	r3, [pc, #80]	; (800ef18 <prvAddCurrentTaskToDelayedList+0x94>)
 800eec8:	681b      	ldr	r3, [r3, #0]
 800eeca:	68ba      	ldr	r2, [r7, #8]
 800eecc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800eece:	68ba      	ldr	r2, [r7, #8]
 800eed0:	68fb      	ldr	r3, [r7, #12]
 800eed2:	429a      	cmp	r2, r3
 800eed4:	d209      	bcs.n	800eeea <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800eed6:	4b12      	ldr	r3, [pc, #72]	; (800ef20 <prvAddCurrentTaskToDelayedList+0x9c>)
 800eed8:	681a      	ldr	r2, [r3, #0]
 800eeda:	4b0f      	ldr	r3, [pc, #60]	; (800ef18 <prvAddCurrentTaskToDelayedList+0x94>)
 800eedc:	681b      	ldr	r3, [r3, #0]
 800eede:	3304      	adds	r3, #4
 800eee0:	4619      	mov	r1, r3
 800eee2:	4610      	mov	r0, r2
 800eee4:	f7fd ff7d 	bl	800cde2 <vListInsert>
}
 800eee8:	e010      	b.n	800ef0c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800eeea:	4b0e      	ldr	r3, [pc, #56]	; (800ef24 <prvAddCurrentTaskToDelayedList+0xa0>)
 800eeec:	681a      	ldr	r2, [r3, #0]
 800eeee:	4b0a      	ldr	r3, [pc, #40]	; (800ef18 <prvAddCurrentTaskToDelayedList+0x94>)
 800eef0:	681b      	ldr	r3, [r3, #0]
 800eef2:	3304      	adds	r3, #4
 800eef4:	4619      	mov	r1, r3
 800eef6:	4610      	mov	r0, r2
 800eef8:	f7fd ff73 	bl	800cde2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800eefc:	4b0a      	ldr	r3, [pc, #40]	; (800ef28 <prvAddCurrentTaskToDelayedList+0xa4>)
 800eefe:	681b      	ldr	r3, [r3, #0]
 800ef00:	68ba      	ldr	r2, [r7, #8]
 800ef02:	429a      	cmp	r2, r3
 800ef04:	d202      	bcs.n	800ef0c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800ef06:	4a08      	ldr	r2, [pc, #32]	; (800ef28 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ef08:	68bb      	ldr	r3, [r7, #8]
 800ef0a:	6013      	str	r3, [r2, #0]
}
 800ef0c:	bf00      	nop
 800ef0e:	3710      	adds	r7, #16
 800ef10:	46bd      	mov	sp, r7
 800ef12:	bd80      	pop	{r7, pc}
 800ef14:	200011c0 	.word	0x200011c0
 800ef18:	20000ce8 	.word	0x20000ce8
 800ef1c:	200011a8 	.word	0x200011a8
 800ef20:	20001178 	.word	0x20001178
 800ef24:	20001174 	.word	0x20001174
 800ef28:	200011dc 	.word	0x200011dc

0800ef2c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800ef2c:	b580      	push	{r7, lr}
 800ef2e:	b08a      	sub	sp, #40	; 0x28
 800ef30:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800ef32:	2300      	movs	r3, #0
 800ef34:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800ef36:	f000 fb07 	bl	800f548 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800ef3a:	4b1c      	ldr	r3, [pc, #112]	; (800efac <xTimerCreateTimerTask+0x80>)
 800ef3c:	681b      	ldr	r3, [r3, #0]
 800ef3e:	2b00      	cmp	r3, #0
 800ef40:	d021      	beq.n	800ef86 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800ef42:	2300      	movs	r3, #0
 800ef44:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800ef46:	2300      	movs	r3, #0
 800ef48:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ef4a:	1d3a      	adds	r2, r7, #4
 800ef4c:	f107 0108 	add.w	r1, r7, #8
 800ef50:	f107 030c 	add.w	r3, r7, #12
 800ef54:	4618      	mov	r0, r3
 800ef56:	f7fd fceb 	bl	800c930 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ef5a:	6879      	ldr	r1, [r7, #4]
 800ef5c:	68bb      	ldr	r3, [r7, #8]
 800ef5e:	68fa      	ldr	r2, [r7, #12]
 800ef60:	9202      	str	r2, [sp, #8]
 800ef62:	9301      	str	r3, [sp, #4]
 800ef64:	2302      	movs	r3, #2
 800ef66:	9300      	str	r3, [sp, #0]
 800ef68:	2300      	movs	r3, #0
 800ef6a:	460a      	mov	r2, r1
 800ef6c:	4910      	ldr	r1, [pc, #64]	; (800efb0 <xTimerCreateTimerTask+0x84>)
 800ef6e:	4811      	ldr	r0, [pc, #68]	; (800efb4 <xTimerCreateTimerTask+0x88>)
 800ef70:	f7fe ff1a 	bl	800dda8 <xTaskCreateStatic>
 800ef74:	4603      	mov	r3, r0
 800ef76:	4a10      	ldr	r2, [pc, #64]	; (800efb8 <xTimerCreateTimerTask+0x8c>)
 800ef78:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800ef7a:	4b0f      	ldr	r3, [pc, #60]	; (800efb8 <xTimerCreateTimerTask+0x8c>)
 800ef7c:	681b      	ldr	r3, [r3, #0]
 800ef7e:	2b00      	cmp	r3, #0
 800ef80:	d001      	beq.n	800ef86 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800ef82:	2301      	movs	r3, #1
 800ef84:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ef86:	697b      	ldr	r3, [r7, #20]
 800ef88:	2b00      	cmp	r3, #0
 800ef8a:	d10a      	bne.n	800efa2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800ef8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef90:	f383 8811 	msr	BASEPRI, r3
 800ef94:	f3bf 8f6f 	isb	sy
 800ef98:	f3bf 8f4f 	dsb	sy
 800ef9c:	613b      	str	r3, [r7, #16]
}
 800ef9e:	bf00      	nop
 800efa0:	e7fe      	b.n	800efa0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800efa2:	697b      	ldr	r3, [r7, #20]
}
 800efa4:	4618      	mov	r0, r3
 800efa6:	3718      	adds	r7, #24
 800efa8:	46bd      	mov	sp, r7
 800efaa:	bd80      	pop	{r7, pc}
 800efac:	20001218 	.word	0x20001218
 800efb0:	080145e4 	.word	0x080145e4
 800efb4:	0800f0f1 	.word	0x0800f0f1
 800efb8:	2000121c 	.word	0x2000121c

0800efbc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800efbc:	b580      	push	{r7, lr}
 800efbe:	b08a      	sub	sp, #40	; 0x28
 800efc0:	af00      	add	r7, sp, #0
 800efc2:	60f8      	str	r0, [r7, #12]
 800efc4:	60b9      	str	r1, [r7, #8]
 800efc6:	607a      	str	r2, [r7, #4]
 800efc8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800efca:	2300      	movs	r3, #0
 800efcc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800efce:	68fb      	ldr	r3, [r7, #12]
 800efd0:	2b00      	cmp	r3, #0
 800efd2:	d10a      	bne.n	800efea <xTimerGenericCommand+0x2e>
	__asm volatile
 800efd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efd8:	f383 8811 	msr	BASEPRI, r3
 800efdc:	f3bf 8f6f 	isb	sy
 800efe0:	f3bf 8f4f 	dsb	sy
 800efe4:	623b      	str	r3, [r7, #32]
}
 800efe6:	bf00      	nop
 800efe8:	e7fe      	b.n	800efe8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800efea:	4b1a      	ldr	r3, [pc, #104]	; (800f054 <xTimerGenericCommand+0x98>)
 800efec:	681b      	ldr	r3, [r3, #0]
 800efee:	2b00      	cmp	r3, #0
 800eff0:	d02a      	beq.n	800f048 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800eff2:	68bb      	ldr	r3, [r7, #8]
 800eff4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800effa:	68fb      	ldr	r3, [r7, #12]
 800effc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800effe:	68bb      	ldr	r3, [r7, #8]
 800f000:	2b05      	cmp	r3, #5
 800f002:	dc18      	bgt.n	800f036 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800f004:	f7ff fd9c 	bl	800eb40 <xTaskGetSchedulerState>
 800f008:	4603      	mov	r3, r0
 800f00a:	2b02      	cmp	r3, #2
 800f00c:	d109      	bne.n	800f022 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800f00e:	4b11      	ldr	r3, [pc, #68]	; (800f054 <xTimerGenericCommand+0x98>)
 800f010:	6818      	ldr	r0, [r3, #0]
 800f012:	f107 0110 	add.w	r1, r7, #16
 800f016:	2300      	movs	r3, #0
 800f018:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f01a:	f7fe f939 	bl	800d290 <xQueueGenericSend>
 800f01e:	6278      	str	r0, [r7, #36]	; 0x24
 800f020:	e012      	b.n	800f048 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800f022:	4b0c      	ldr	r3, [pc, #48]	; (800f054 <xTimerGenericCommand+0x98>)
 800f024:	6818      	ldr	r0, [r3, #0]
 800f026:	f107 0110 	add.w	r1, r7, #16
 800f02a:	2300      	movs	r3, #0
 800f02c:	2200      	movs	r2, #0
 800f02e:	f7fe f92f 	bl	800d290 <xQueueGenericSend>
 800f032:	6278      	str	r0, [r7, #36]	; 0x24
 800f034:	e008      	b.n	800f048 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800f036:	4b07      	ldr	r3, [pc, #28]	; (800f054 <xTimerGenericCommand+0x98>)
 800f038:	6818      	ldr	r0, [r3, #0]
 800f03a:	f107 0110 	add.w	r1, r7, #16
 800f03e:	2300      	movs	r3, #0
 800f040:	683a      	ldr	r2, [r7, #0]
 800f042:	f7fe fa23 	bl	800d48c <xQueueGenericSendFromISR>
 800f046:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800f048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f04a:	4618      	mov	r0, r3
 800f04c:	3728      	adds	r7, #40	; 0x28
 800f04e:	46bd      	mov	sp, r7
 800f050:	bd80      	pop	{r7, pc}
 800f052:	bf00      	nop
 800f054:	20001218 	.word	0x20001218

0800f058 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800f058:	b580      	push	{r7, lr}
 800f05a:	b088      	sub	sp, #32
 800f05c:	af02      	add	r7, sp, #8
 800f05e:	6078      	str	r0, [r7, #4]
 800f060:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f062:	4b22      	ldr	r3, [pc, #136]	; (800f0ec <prvProcessExpiredTimer+0x94>)
 800f064:	681b      	ldr	r3, [r3, #0]
 800f066:	68db      	ldr	r3, [r3, #12]
 800f068:	68db      	ldr	r3, [r3, #12]
 800f06a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f06c:	697b      	ldr	r3, [r7, #20]
 800f06e:	3304      	adds	r3, #4
 800f070:	4618      	mov	r0, r3
 800f072:	f7fd feef 	bl	800ce54 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f076:	697b      	ldr	r3, [r7, #20]
 800f078:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f07c:	f003 0304 	and.w	r3, r3, #4
 800f080:	2b00      	cmp	r3, #0
 800f082:	d022      	beq.n	800f0ca <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800f084:	697b      	ldr	r3, [r7, #20]
 800f086:	699a      	ldr	r2, [r3, #24]
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	18d1      	adds	r1, r2, r3
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	683a      	ldr	r2, [r7, #0]
 800f090:	6978      	ldr	r0, [r7, #20]
 800f092:	f000 f8d1 	bl	800f238 <prvInsertTimerInActiveList>
 800f096:	4603      	mov	r3, r0
 800f098:	2b00      	cmp	r3, #0
 800f09a:	d01f      	beq.n	800f0dc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f09c:	2300      	movs	r3, #0
 800f09e:	9300      	str	r3, [sp, #0]
 800f0a0:	2300      	movs	r3, #0
 800f0a2:	687a      	ldr	r2, [r7, #4]
 800f0a4:	2100      	movs	r1, #0
 800f0a6:	6978      	ldr	r0, [r7, #20]
 800f0a8:	f7ff ff88 	bl	800efbc <xTimerGenericCommand>
 800f0ac:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800f0ae:	693b      	ldr	r3, [r7, #16]
 800f0b0:	2b00      	cmp	r3, #0
 800f0b2:	d113      	bne.n	800f0dc <prvProcessExpiredTimer+0x84>
	__asm volatile
 800f0b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0b8:	f383 8811 	msr	BASEPRI, r3
 800f0bc:	f3bf 8f6f 	isb	sy
 800f0c0:	f3bf 8f4f 	dsb	sy
 800f0c4:	60fb      	str	r3, [r7, #12]
}
 800f0c6:	bf00      	nop
 800f0c8:	e7fe      	b.n	800f0c8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f0ca:	697b      	ldr	r3, [r7, #20]
 800f0cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f0d0:	f023 0301 	bic.w	r3, r3, #1
 800f0d4:	b2da      	uxtb	r2, r3
 800f0d6:	697b      	ldr	r3, [r7, #20]
 800f0d8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f0dc:	697b      	ldr	r3, [r7, #20]
 800f0de:	6a1b      	ldr	r3, [r3, #32]
 800f0e0:	6978      	ldr	r0, [r7, #20]
 800f0e2:	4798      	blx	r3
}
 800f0e4:	bf00      	nop
 800f0e6:	3718      	adds	r7, #24
 800f0e8:	46bd      	mov	sp, r7
 800f0ea:	bd80      	pop	{r7, pc}
 800f0ec:	20001210 	.word	0x20001210

0800f0f0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800f0f0:	b580      	push	{r7, lr}
 800f0f2:	b084      	sub	sp, #16
 800f0f4:	af00      	add	r7, sp, #0
 800f0f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f0f8:	f107 0308 	add.w	r3, r7, #8
 800f0fc:	4618      	mov	r0, r3
 800f0fe:	f000 f857 	bl	800f1b0 <prvGetNextExpireTime>
 800f102:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800f104:	68bb      	ldr	r3, [r7, #8]
 800f106:	4619      	mov	r1, r3
 800f108:	68f8      	ldr	r0, [r7, #12]
 800f10a:	f000 f803 	bl	800f114 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800f10e:	f000 f8d5 	bl	800f2bc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f112:	e7f1      	b.n	800f0f8 <prvTimerTask+0x8>

0800f114 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800f114:	b580      	push	{r7, lr}
 800f116:	b084      	sub	sp, #16
 800f118:	af00      	add	r7, sp, #0
 800f11a:	6078      	str	r0, [r7, #4]
 800f11c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800f11e:	f7ff f87f 	bl	800e220 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f122:	f107 0308 	add.w	r3, r7, #8
 800f126:	4618      	mov	r0, r3
 800f128:	f000 f866 	bl	800f1f8 <prvSampleTimeNow>
 800f12c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800f12e:	68bb      	ldr	r3, [r7, #8]
 800f130:	2b00      	cmp	r3, #0
 800f132:	d130      	bne.n	800f196 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800f134:	683b      	ldr	r3, [r7, #0]
 800f136:	2b00      	cmp	r3, #0
 800f138:	d10a      	bne.n	800f150 <prvProcessTimerOrBlockTask+0x3c>
 800f13a:	687a      	ldr	r2, [r7, #4]
 800f13c:	68fb      	ldr	r3, [r7, #12]
 800f13e:	429a      	cmp	r2, r3
 800f140:	d806      	bhi.n	800f150 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800f142:	f7ff f87b 	bl	800e23c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800f146:	68f9      	ldr	r1, [r7, #12]
 800f148:	6878      	ldr	r0, [r7, #4]
 800f14a:	f7ff ff85 	bl	800f058 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800f14e:	e024      	b.n	800f19a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800f150:	683b      	ldr	r3, [r7, #0]
 800f152:	2b00      	cmp	r3, #0
 800f154:	d008      	beq.n	800f168 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800f156:	4b13      	ldr	r3, [pc, #76]	; (800f1a4 <prvProcessTimerOrBlockTask+0x90>)
 800f158:	681b      	ldr	r3, [r3, #0]
 800f15a:	681b      	ldr	r3, [r3, #0]
 800f15c:	2b00      	cmp	r3, #0
 800f15e:	d101      	bne.n	800f164 <prvProcessTimerOrBlockTask+0x50>
 800f160:	2301      	movs	r3, #1
 800f162:	e000      	b.n	800f166 <prvProcessTimerOrBlockTask+0x52>
 800f164:	2300      	movs	r3, #0
 800f166:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800f168:	4b0f      	ldr	r3, [pc, #60]	; (800f1a8 <prvProcessTimerOrBlockTask+0x94>)
 800f16a:	6818      	ldr	r0, [r3, #0]
 800f16c:	687a      	ldr	r2, [r7, #4]
 800f16e:	68fb      	ldr	r3, [r7, #12]
 800f170:	1ad3      	subs	r3, r2, r3
 800f172:	683a      	ldr	r2, [r7, #0]
 800f174:	4619      	mov	r1, r3
 800f176:	f7fe fde3 	bl	800dd40 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800f17a:	f7ff f85f 	bl	800e23c <xTaskResumeAll>
 800f17e:	4603      	mov	r3, r0
 800f180:	2b00      	cmp	r3, #0
 800f182:	d10a      	bne.n	800f19a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800f184:	4b09      	ldr	r3, [pc, #36]	; (800f1ac <prvProcessTimerOrBlockTask+0x98>)
 800f186:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f18a:	601a      	str	r2, [r3, #0]
 800f18c:	f3bf 8f4f 	dsb	sy
 800f190:	f3bf 8f6f 	isb	sy
}
 800f194:	e001      	b.n	800f19a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800f196:	f7ff f851 	bl	800e23c <xTaskResumeAll>
}
 800f19a:	bf00      	nop
 800f19c:	3710      	adds	r7, #16
 800f19e:	46bd      	mov	sp, r7
 800f1a0:	bd80      	pop	{r7, pc}
 800f1a2:	bf00      	nop
 800f1a4:	20001214 	.word	0x20001214
 800f1a8:	20001218 	.word	0x20001218
 800f1ac:	e000ed04 	.word	0xe000ed04

0800f1b0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800f1b0:	b480      	push	{r7}
 800f1b2:	b085      	sub	sp, #20
 800f1b4:	af00      	add	r7, sp, #0
 800f1b6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800f1b8:	4b0e      	ldr	r3, [pc, #56]	; (800f1f4 <prvGetNextExpireTime+0x44>)
 800f1ba:	681b      	ldr	r3, [r3, #0]
 800f1bc:	681b      	ldr	r3, [r3, #0]
 800f1be:	2b00      	cmp	r3, #0
 800f1c0:	d101      	bne.n	800f1c6 <prvGetNextExpireTime+0x16>
 800f1c2:	2201      	movs	r2, #1
 800f1c4:	e000      	b.n	800f1c8 <prvGetNextExpireTime+0x18>
 800f1c6:	2200      	movs	r2, #0
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	681b      	ldr	r3, [r3, #0]
 800f1d0:	2b00      	cmp	r3, #0
 800f1d2:	d105      	bne.n	800f1e0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f1d4:	4b07      	ldr	r3, [pc, #28]	; (800f1f4 <prvGetNextExpireTime+0x44>)
 800f1d6:	681b      	ldr	r3, [r3, #0]
 800f1d8:	68db      	ldr	r3, [r3, #12]
 800f1da:	681b      	ldr	r3, [r3, #0]
 800f1dc:	60fb      	str	r3, [r7, #12]
 800f1de:	e001      	b.n	800f1e4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800f1e0:	2300      	movs	r3, #0
 800f1e2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800f1e4:	68fb      	ldr	r3, [r7, #12]
}
 800f1e6:	4618      	mov	r0, r3
 800f1e8:	3714      	adds	r7, #20
 800f1ea:	46bd      	mov	sp, r7
 800f1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1f0:	4770      	bx	lr
 800f1f2:	bf00      	nop
 800f1f4:	20001210 	.word	0x20001210

0800f1f8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800f1f8:	b580      	push	{r7, lr}
 800f1fa:	b084      	sub	sp, #16
 800f1fc:	af00      	add	r7, sp, #0
 800f1fe:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800f200:	f7ff f8ba 	bl	800e378 <xTaskGetTickCount>
 800f204:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800f206:	4b0b      	ldr	r3, [pc, #44]	; (800f234 <prvSampleTimeNow+0x3c>)
 800f208:	681b      	ldr	r3, [r3, #0]
 800f20a:	68fa      	ldr	r2, [r7, #12]
 800f20c:	429a      	cmp	r2, r3
 800f20e:	d205      	bcs.n	800f21c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800f210:	f000 f936 	bl	800f480 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	2201      	movs	r2, #1
 800f218:	601a      	str	r2, [r3, #0]
 800f21a:	e002      	b.n	800f222 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	2200      	movs	r2, #0
 800f220:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800f222:	4a04      	ldr	r2, [pc, #16]	; (800f234 <prvSampleTimeNow+0x3c>)
 800f224:	68fb      	ldr	r3, [r7, #12]
 800f226:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800f228:	68fb      	ldr	r3, [r7, #12]
}
 800f22a:	4618      	mov	r0, r3
 800f22c:	3710      	adds	r7, #16
 800f22e:	46bd      	mov	sp, r7
 800f230:	bd80      	pop	{r7, pc}
 800f232:	bf00      	nop
 800f234:	20001220 	.word	0x20001220

0800f238 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800f238:	b580      	push	{r7, lr}
 800f23a:	b086      	sub	sp, #24
 800f23c:	af00      	add	r7, sp, #0
 800f23e:	60f8      	str	r0, [r7, #12]
 800f240:	60b9      	str	r1, [r7, #8]
 800f242:	607a      	str	r2, [r7, #4]
 800f244:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800f246:	2300      	movs	r3, #0
 800f248:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800f24a:	68fb      	ldr	r3, [r7, #12]
 800f24c:	68ba      	ldr	r2, [r7, #8]
 800f24e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f250:	68fb      	ldr	r3, [r7, #12]
 800f252:	68fa      	ldr	r2, [r7, #12]
 800f254:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800f256:	68ba      	ldr	r2, [r7, #8]
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	429a      	cmp	r2, r3
 800f25c:	d812      	bhi.n	800f284 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f25e:	687a      	ldr	r2, [r7, #4]
 800f260:	683b      	ldr	r3, [r7, #0]
 800f262:	1ad2      	subs	r2, r2, r3
 800f264:	68fb      	ldr	r3, [r7, #12]
 800f266:	699b      	ldr	r3, [r3, #24]
 800f268:	429a      	cmp	r2, r3
 800f26a:	d302      	bcc.n	800f272 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800f26c:	2301      	movs	r3, #1
 800f26e:	617b      	str	r3, [r7, #20]
 800f270:	e01b      	b.n	800f2aa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800f272:	4b10      	ldr	r3, [pc, #64]	; (800f2b4 <prvInsertTimerInActiveList+0x7c>)
 800f274:	681a      	ldr	r2, [r3, #0]
 800f276:	68fb      	ldr	r3, [r7, #12]
 800f278:	3304      	adds	r3, #4
 800f27a:	4619      	mov	r1, r3
 800f27c:	4610      	mov	r0, r2
 800f27e:	f7fd fdb0 	bl	800cde2 <vListInsert>
 800f282:	e012      	b.n	800f2aa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800f284:	687a      	ldr	r2, [r7, #4]
 800f286:	683b      	ldr	r3, [r7, #0]
 800f288:	429a      	cmp	r2, r3
 800f28a:	d206      	bcs.n	800f29a <prvInsertTimerInActiveList+0x62>
 800f28c:	68ba      	ldr	r2, [r7, #8]
 800f28e:	683b      	ldr	r3, [r7, #0]
 800f290:	429a      	cmp	r2, r3
 800f292:	d302      	bcc.n	800f29a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800f294:	2301      	movs	r3, #1
 800f296:	617b      	str	r3, [r7, #20]
 800f298:	e007      	b.n	800f2aa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f29a:	4b07      	ldr	r3, [pc, #28]	; (800f2b8 <prvInsertTimerInActiveList+0x80>)
 800f29c:	681a      	ldr	r2, [r3, #0]
 800f29e:	68fb      	ldr	r3, [r7, #12]
 800f2a0:	3304      	adds	r3, #4
 800f2a2:	4619      	mov	r1, r3
 800f2a4:	4610      	mov	r0, r2
 800f2a6:	f7fd fd9c 	bl	800cde2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800f2aa:	697b      	ldr	r3, [r7, #20]
}
 800f2ac:	4618      	mov	r0, r3
 800f2ae:	3718      	adds	r7, #24
 800f2b0:	46bd      	mov	sp, r7
 800f2b2:	bd80      	pop	{r7, pc}
 800f2b4:	20001214 	.word	0x20001214
 800f2b8:	20001210 	.word	0x20001210

0800f2bc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800f2bc:	b580      	push	{r7, lr}
 800f2be:	b08e      	sub	sp, #56	; 0x38
 800f2c0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f2c2:	e0ca      	b.n	800f45a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	da18      	bge.n	800f2fc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800f2ca:	1d3b      	adds	r3, r7, #4
 800f2cc:	3304      	adds	r3, #4
 800f2ce:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800f2d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2d2:	2b00      	cmp	r3, #0
 800f2d4:	d10a      	bne.n	800f2ec <prvProcessReceivedCommands+0x30>
	__asm volatile
 800f2d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2da:	f383 8811 	msr	BASEPRI, r3
 800f2de:	f3bf 8f6f 	isb	sy
 800f2e2:	f3bf 8f4f 	dsb	sy
 800f2e6:	61fb      	str	r3, [r7, #28]
}
 800f2e8:	bf00      	nop
 800f2ea:	e7fe      	b.n	800f2ea <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800f2ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2ee:	681b      	ldr	r3, [r3, #0]
 800f2f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f2f2:	6850      	ldr	r0, [r2, #4]
 800f2f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f2f6:	6892      	ldr	r2, [r2, #8]
 800f2f8:	4611      	mov	r1, r2
 800f2fa:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	2b00      	cmp	r3, #0
 800f300:	f2c0 80aa 	blt.w	800f458 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800f304:	68fb      	ldr	r3, [r7, #12]
 800f306:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800f308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f30a:	695b      	ldr	r3, [r3, #20]
 800f30c:	2b00      	cmp	r3, #0
 800f30e:	d004      	beq.n	800f31a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f312:	3304      	adds	r3, #4
 800f314:	4618      	mov	r0, r3
 800f316:	f7fd fd9d 	bl	800ce54 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f31a:	463b      	mov	r3, r7
 800f31c:	4618      	mov	r0, r3
 800f31e:	f7ff ff6b 	bl	800f1f8 <prvSampleTimeNow>
 800f322:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	2b09      	cmp	r3, #9
 800f328:	f200 8097 	bhi.w	800f45a <prvProcessReceivedCommands+0x19e>
 800f32c:	a201      	add	r2, pc, #4	; (adr r2, 800f334 <prvProcessReceivedCommands+0x78>)
 800f32e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f332:	bf00      	nop
 800f334:	0800f35d 	.word	0x0800f35d
 800f338:	0800f35d 	.word	0x0800f35d
 800f33c:	0800f35d 	.word	0x0800f35d
 800f340:	0800f3d1 	.word	0x0800f3d1
 800f344:	0800f3e5 	.word	0x0800f3e5
 800f348:	0800f42f 	.word	0x0800f42f
 800f34c:	0800f35d 	.word	0x0800f35d
 800f350:	0800f35d 	.word	0x0800f35d
 800f354:	0800f3d1 	.word	0x0800f3d1
 800f358:	0800f3e5 	.word	0x0800f3e5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f35c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f35e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f362:	f043 0301 	orr.w	r3, r3, #1
 800f366:	b2da      	uxtb	r2, r3
 800f368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f36a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800f36e:	68ba      	ldr	r2, [r7, #8]
 800f370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f372:	699b      	ldr	r3, [r3, #24]
 800f374:	18d1      	adds	r1, r2, r3
 800f376:	68bb      	ldr	r3, [r7, #8]
 800f378:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f37a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f37c:	f7ff ff5c 	bl	800f238 <prvInsertTimerInActiveList>
 800f380:	4603      	mov	r3, r0
 800f382:	2b00      	cmp	r3, #0
 800f384:	d069      	beq.n	800f45a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f388:	6a1b      	ldr	r3, [r3, #32]
 800f38a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f38c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f38e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f390:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f394:	f003 0304 	and.w	r3, r3, #4
 800f398:	2b00      	cmp	r3, #0
 800f39a:	d05e      	beq.n	800f45a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800f39c:	68ba      	ldr	r2, [r7, #8]
 800f39e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3a0:	699b      	ldr	r3, [r3, #24]
 800f3a2:	441a      	add	r2, r3
 800f3a4:	2300      	movs	r3, #0
 800f3a6:	9300      	str	r3, [sp, #0]
 800f3a8:	2300      	movs	r3, #0
 800f3aa:	2100      	movs	r1, #0
 800f3ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f3ae:	f7ff fe05 	bl	800efbc <xTimerGenericCommand>
 800f3b2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800f3b4:	6a3b      	ldr	r3, [r7, #32]
 800f3b6:	2b00      	cmp	r3, #0
 800f3b8:	d14f      	bne.n	800f45a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800f3ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3be:	f383 8811 	msr	BASEPRI, r3
 800f3c2:	f3bf 8f6f 	isb	sy
 800f3c6:	f3bf 8f4f 	dsb	sy
 800f3ca:	61bb      	str	r3, [r7, #24]
}
 800f3cc:	bf00      	nop
 800f3ce:	e7fe      	b.n	800f3ce <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f3d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f3d6:	f023 0301 	bic.w	r3, r3, #1
 800f3da:	b2da      	uxtb	r2, r3
 800f3dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800f3e2:	e03a      	b.n	800f45a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f3e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f3ea:	f043 0301 	orr.w	r3, r3, #1
 800f3ee:	b2da      	uxtb	r2, r3
 800f3f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800f3f6:	68ba      	ldr	r2, [r7, #8]
 800f3f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3fa:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800f3fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3fe:	699b      	ldr	r3, [r3, #24]
 800f400:	2b00      	cmp	r3, #0
 800f402:	d10a      	bne.n	800f41a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800f404:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f408:	f383 8811 	msr	BASEPRI, r3
 800f40c:	f3bf 8f6f 	isb	sy
 800f410:	f3bf 8f4f 	dsb	sy
 800f414:	617b      	str	r3, [r7, #20]
}
 800f416:	bf00      	nop
 800f418:	e7fe      	b.n	800f418 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800f41a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f41c:	699a      	ldr	r2, [r3, #24]
 800f41e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f420:	18d1      	adds	r1, r2, r3
 800f422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f424:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f426:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f428:	f7ff ff06 	bl	800f238 <prvInsertTimerInActiveList>
					break;
 800f42c:	e015      	b.n	800f45a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800f42e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f430:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f434:	f003 0302 	and.w	r3, r3, #2
 800f438:	2b00      	cmp	r3, #0
 800f43a:	d103      	bne.n	800f444 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800f43c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f43e:	f000 fbff 	bl	800fc40 <vPortFree>
 800f442:	e00a      	b.n	800f45a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f446:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f44a:	f023 0301 	bic.w	r3, r3, #1
 800f44e:	b2da      	uxtb	r2, r3
 800f450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f452:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800f456:	e000      	b.n	800f45a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800f458:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f45a:	4b08      	ldr	r3, [pc, #32]	; (800f47c <prvProcessReceivedCommands+0x1c0>)
 800f45c:	681b      	ldr	r3, [r3, #0]
 800f45e:	1d39      	adds	r1, r7, #4
 800f460:	2200      	movs	r2, #0
 800f462:	4618      	mov	r0, r3
 800f464:	f7fe f8ae 	bl	800d5c4 <xQueueReceive>
 800f468:	4603      	mov	r3, r0
 800f46a:	2b00      	cmp	r3, #0
 800f46c:	f47f af2a 	bne.w	800f2c4 <prvProcessReceivedCommands+0x8>
	}
}
 800f470:	bf00      	nop
 800f472:	bf00      	nop
 800f474:	3730      	adds	r7, #48	; 0x30
 800f476:	46bd      	mov	sp, r7
 800f478:	bd80      	pop	{r7, pc}
 800f47a:	bf00      	nop
 800f47c:	20001218 	.word	0x20001218

0800f480 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800f480:	b580      	push	{r7, lr}
 800f482:	b088      	sub	sp, #32
 800f484:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f486:	e048      	b.n	800f51a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f488:	4b2d      	ldr	r3, [pc, #180]	; (800f540 <prvSwitchTimerLists+0xc0>)
 800f48a:	681b      	ldr	r3, [r3, #0]
 800f48c:	68db      	ldr	r3, [r3, #12]
 800f48e:	681b      	ldr	r3, [r3, #0]
 800f490:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f492:	4b2b      	ldr	r3, [pc, #172]	; (800f540 <prvSwitchTimerLists+0xc0>)
 800f494:	681b      	ldr	r3, [r3, #0]
 800f496:	68db      	ldr	r3, [r3, #12]
 800f498:	68db      	ldr	r3, [r3, #12]
 800f49a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f49c:	68fb      	ldr	r3, [r7, #12]
 800f49e:	3304      	adds	r3, #4
 800f4a0:	4618      	mov	r0, r3
 800f4a2:	f7fd fcd7 	bl	800ce54 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f4a6:	68fb      	ldr	r3, [r7, #12]
 800f4a8:	6a1b      	ldr	r3, [r3, #32]
 800f4aa:	68f8      	ldr	r0, [r7, #12]
 800f4ac:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f4ae:	68fb      	ldr	r3, [r7, #12]
 800f4b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f4b4:	f003 0304 	and.w	r3, r3, #4
 800f4b8:	2b00      	cmp	r3, #0
 800f4ba:	d02e      	beq.n	800f51a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800f4bc:	68fb      	ldr	r3, [r7, #12]
 800f4be:	699b      	ldr	r3, [r3, #24]
 800f4c0:	693a      	ldr	r2, [r7, #16]
 800f4c2:	4413      	add	r3, r2
 800f4c4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800f4c6:	68ba      	ldr	r2, [r7, #8]
 800f4c8:	693b      	ldr	r3, [r7, #16]
 800f4ca:	429a      	cmp	r2, r3
 800f4cc:	d90e      	bls.n	800f4ec <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800f4ce:	68fb      	ldr	r3, [r7, #12]
 800f4d0:	68ba      	ldr	r2, [r7, #8]
 800f4d2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f4d4:	68fb      	ldr	r3, [r7, #12]
 800f4d6:	68fa      	ldr	r2, [r7, #12]
 800f4d8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f4da:	4b19      	ldr	r3, [pc, #100]	; (800f540 <prvSwitchTimerLists+0xc0>)
 800f4dc:	681a      	ldr	r2, [r3, #0]
 800f4de:	68fb      	ldr	r3, [r7, #12]
 800f4e0:	3304      	adds	r3, #4
 800f4e2:	4619      	mov	r1, r3
 800f4e4:	4610      	mov	r0, r2
 800f4e6:	f7fd fc7c 	bl	800cde2 <vListInsert>
 800f4ea:	e016      	b.n	800f51a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f4ec:	2300      	movs	r3, #0
 800f4ee:	9300      	str	r3, [sp, #0]
 800f4f0:	2300      	movs	r3, #0
 800f4f2:	693a      	ldr	r2, [r7, #16]
 800f4f4:	2100      	movs	r1, #0
 800f4f6:	68f8      	ldr	r0, [r7, #12]
 800f4f8:	f7ff fd60 	bl	800efbc <xTimerGenericCommand>
 800f4fc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	2b00      	cmp	r3, #0
 800f502:	d10a      	bne.n	800f51a <prvSwitchTimerLists+0x9a>
	__asm volatile
 800f504:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f508:	f383 8811 	msr	BASEPRI, r3
 800f50c:	f3bf 8f6f 	isb	sy
 800f510:	f3bf 8f4f 	dsb	sy
 800f514:	603b      	str	r3, [r7, #0]
}
 800f516:	bf00      	nop
 800f518:	e7fe      	b.n	800f518 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f51a:	4b09      	ldr	r3, [pc, #36]	; (800f540 <prvSwitchTimerLists+0xc0>)
 800f51c:	681b      	ldr	r3, [r3, #0]
 800f51e:	681b      	ldr	r3, [r3, #0]
 800f520:	2b00      	cmp	r3, #0
 800f522:	d1b1      	bne.n	800f488 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800f524:	4b06      	ldr	r3, [pc, #24]	; (800f540 <prvSwitchTimerLists+0xc0>)
 800f526:	681b      	ldr	r3, [r3, #0]
 800f528:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800f52a:	4b06      	ldr	r3, [pc, #24]	; (800f544 <prvSwitchTimerLists+0xc4>)
 800f52c:	681b      	ldr	r3, [r3, #0]
 800f52e:	4a04      	ldr	r2, [pc, #16]	; (800f540 <prvSwitchTimerLists+0xc0>)
 800f530:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800f532:	4a04      	ldr	r2, [pc, #16]	; (800f544 <prvSwitchTimerLists+0xc4>)
 800f534:	697b      	ldr	r3, [r7, #20]
 800f536:	6013      	str	r3, [r2, #0]
}
 800f538:	bf00      	nop
 800f53a:	3718      	adds	r7, #24
 800f53c:	46bd      	mov	sp, r7
 800f53e:	bd80      	pop	{r7, pc}
 800f540:	20001210 	.word	0x20001210
 800f544:	20001214 	.word	0x20001214

0800f548 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800f548:	b580      	push	{r7, lr}
 800f54a:	b082      	sub	sp, #8
 800f54c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800f54e:	f000 f989 	bl	800f864 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800f552:	4b15      	ldr	r3, [pc, #84]	; (800f5a8 <prvCheckForValidListAndQueue+0x60>)
 800f554:	681b      	ldr	r3, [r3, #0]
 800f556:	2b00      	cmp	r3, #0
 800f558:	d120      	bne.n	800f59c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800f55a:	4814      	ldr	r0, [pc, #80]	; (800f5ac <prvCheckForValidListAndQueue+0x64>)
 800f55c:	f7fd fbf0 	bl	800cd40 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800f560:	4813      	ldr	r0, [pc, #76]	; (800f5b0 <prvCheckForValidListAndQueue+0x68>)
 800f562:	f7fd fbed 	bl	800cd40 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800f566:	4b13      	ldr	r3, [pc, #76]	; (800f5b4 <prvCheckForValidListAndQueue+0x6c>)
 800f568:	4a10      	ldr	r2, [pc, #64]	; (800f5ac <prvCheckForValidListAndQueue+0x64>)
 800f56a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800f56c:	4b12      	ldr	r3, [pc, #72]	; (800f5b8 <prvCheckForValidListAndQueue+0x70>)
 800f56e:	4a10      	ldr	r2, [pc, #64]	; (800f5b0 <prvCheckForValidListAndQueue+0x68>)
 800f570:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800f572:	2300      	movs	r3, #0
 800f574:	9300      	str	r3, [sp, #0]
 800f576:	4b11      	ldr	r3, [pc, #68]	; (800f5bc <prvCheckForValidListAndQueue+0x74>)
 800f578:	4a11      	ldr	r2, [pc, #68]	; (800f5c0 <prvCheckForValidListAndQueue+0x78>)
 800f57a:	2110      	movs	r1, #16
 800f57c:	200a      	movs	r0, #10
 800f57e:	f7fd fcfb 	bl	800cf78 <xQueueGenericCreateStatic>
 800f582:	4603      	mov	r3, r0
 800f584:	4a08      	ldr	r2, [pc, #32]	; (800f5a8 <prvCheckForValidListAndQueue+0x60>)
 800f586:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800f588:	4b07      	ldr	r3, [pc, #28]	; (800f5a8 <prvCheckForValidListAndQueue+0x60>)
 800f58a:	681b      	ldr	r3, [r3, #0]
 800f58c:	2b00      	cmp	r3, #0
 800f58e:	d005      	beq.n	800f59c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800f590:	4b05      	ldr	r3, [pc, #20]	; (800f5a8 <prvCheckForValidListAndQueue+0x60>)
 800f592:	681b      	ldr	r3, [r3, #0]
 800f594:	490b      	ldr	r1, [pc, #44]	; (800f5c4 <prvCheckForValidListAndQueue+0x7c>)
 800f596:	4618      	mov	r0, r3
 800f598:	f7fe fba8 	bl	800dcec <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f59c:	f000 f992 	bl	800f8c4 <vPortExitCritical>
}
 800f5a0:	bf00      	nop
 800f5a2:	46bd      	mov	sp, r7
 800f5a4:	bd80      	pop	{r7, pc}
 800f5a6:	bf00      	nop
 800f5a8:	20001218 	.word	0x20001218
 800f5ac:	200011e8 	.word	0x200011e8
 800f5b0:	200011fc 	.word	0x200011fc
 800f5b4:	20001210 	.word	0x20001210
 800f5b8:	20001214 	.word	0x20001214
 800f5bc:	200012c4 	.word	0x200012c4
 800f5c0:	20001224 	.word	0x20001224
 800f5c4:	080145ec 	.word	0x080145ec

0800f5c8 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800f5c8:	b580      	push	{r7, lr}
 800f5ca:	b08a      	sub	sp, #40	; 0x28
 800f5cc:	af00      	add	r7, sp, #0
 800f5ce:	60f8      	str	r0, [r7, #12]
 800f5d0:	60b9      	str	r1, [r7, #8]
 800f5d2:	607a      	str	r2, [r7, #4]
 800f5d4:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 800f5d6:	f06f 0301 	mvn.w	r3, #1
 800f5da:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 800f5dc:	68fb      	ldr	r3, [r7, #12]
 800f5de:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 800f5e0:	68bb      	ldr	r3, [r7, #8]
 800f5e2:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800f5e8:	4b06      	ldr	r3, [pc, #24]	; (800f604 <xTimerPendFunctionCallFromISR+0x3c>)
 800f5ea:	6818      	ldr	r0, [r3, #0]
 800f5ec:	f107 0114 	add.w	r1, r7, #20
 800f5f0:	2300      	movs	r3, #0
 800f5f2:	683a      	ldr	r2, [r7, #0]
 800f5f4:	f7fd ff4a 	bl	800d48c <xQueueGenericSendFromISR>
 800f5f8:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 800f5fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800f5fc:	4618      	mov	r0, r3
 800f5fe:	3728      	adds	r7, #40	; 0x28
 800f600:	46bd      	mov	sp, r7
 800f602:	bd80      	pop	{r7, pc}
 800f604:	20001218 	.word	0x20001218

0800f608 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800f608:	b480      	push	{r7}
 800f60a:	b085      	sub	sp, #20
 800f60c:	af00      	add	r7, sp, #0
 800f60e:	60f8      	str	r0, [r7, #12]
 800f610:	60b9      	str	r1, [r7, #8]
 800f612:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800f614:	68fb      	ldr	r3, [r7, #12]
 800f616:	3b04      	subs	r3, #4
 800f618:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f61a:	68fb      	ldr	r3, [r7, #12]
 800f61c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800f620:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f622:	68fb      	ldr	r3, [r7, #12]
 800f624:	3b04      	subs	r3, #4
 800f626:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800f628:	68bb      	ldr	r3, [r7, #8]
 800f62a:	f023 0201 	bic.w	r2, r3, #1
 800f62e:	68fb      	ldr	r3, [r7, #12]
 800f630:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f632:	68fb      	ldr	r3, [r7, #12]
 800f634:	3b04      	subs	r3, #4
 800f636:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f638:	4a0c      	ldr	r2, [pc, #48]	; (800f66c <pxPortInitialiseStack+0x64>)
 800f63a:	68fb      	ldr	r3, [r7, #12]
 800f63c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800f63e:	68fb      	ldr	r3, [r7, #12]
 800f640:	3b14      	subs	r3, #20
 800f642:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f644:	687a      	ldr	r2, [r7, #4]
 800f646:	68fb      	ldr	r3, [r7, #12]
 800f648:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800f64a:	68fb      	ldr	r3, [r7, #12]
 800f64c:	3b04      	subs	r3, #4
 800f64e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800f650:	68fb      	ldr	r3, [r7, #12]
 800f652:	f06f 0202 	mvn.w	r2, #2
 800f656:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800f658:	68fb      	ldr	r3, [r7, #12]
 800f65a:	3b20      	subs	r3, #32
 800f65c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800f65e:	68fb      	ldr	r3, [r7, #12]
}
 800f660:	4618      	mov	r0, r3
 800f662:	3714      	adds	r7, #20
 800f664:	46bd      	mov	sp, r7
 800f666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f66a:	4770      	bx	lr
 800f66c:	0800f671 	.word	0x0800f671

0800f670 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800f670:	b480      	push	{r7}
 800f672:	b085      	sub	sp, #20
 800f674:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800f676:	2300      	movs	r3, #0
 800f678:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800f67a:	4b12      	ldr	r3, [pc, #72]	; (800f6c4 <prvTaskExitError+0x54>)
 800f67c:	681b      	ldr	r3, [r3, #0]
 800f67e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f682:	d00a      	beq.n	800f69a <prvTaskExitError+0x2a>
	__asm volatile
 800f684:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f688:	f383 8811 	msr	BASEPRI, r3
 800f68c:	f3bf 8f6f 	isb	sy
 800f690:	f3bf 8f4f 	dsb	sy
 800f694:	60fb      	str	r3, [r7, #12]
}
 800f696:	bf00      	nop
 800f698:	e7fe      	b.n	800f698 <prvTaskExitError+0x28>
	__asm volatile
 800f69a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f69e:	f383 8811 	msr	BASEPRI, r3
 800f6a2:	f3bf 8f6f 	isb	sy
 800f6a6:	f3bf 8f4f 	dsb	sy
 800f6aa:	60bb      	str	r3, [r7, #8]
}
 800f6ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800f6ae:	bf00      	nop
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	2b00      	cmp	r3, #0
 800f6b4:	d0fc      	beq.n	800f6b0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800f6b6:	bf00      	nop
 800f6b8:	bf00      	nop
 800f6ba:	3714      	adds	r7, #20
 800f6bc:	46bd      	mov	sp, r7
 800f6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6c2:	4770      	bx	lr
 800f6c4:	2000001c 	.word	0x2000001c
	...

0800f6d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800f6d0:	4b07      	ldr	r3, [pc, #28]	; (800f6f0 <pxCurrentTCBConst2>)
 800f6d2:	6819      	ldr	r1, [r3, #0]
 800f6d4:	6808      	ldr	r0, [r1, #0]
 800f6d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6da:	f380 8809 	msr	PSP, r0
 800f6de:	f3bf 8f6f 	isb	sy
 800f6e2:	f04f 0000 	mov.w	r0, #0
 800f6e6:	f380 8811 	msr	BASEPRI, r0
 800f6ea:	4770      	bx	lr
 800f6ec:	f3af 8000 	nop.w

0800f6f0 <pxCurrentTCBConst2>:
 800f6f0:	20000ce8 	.word	0x20000ce8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800f6f4:	bf00      	nop
 800f6f6:	bf00      	nop

0800f6f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800f6f8:	4808      	ldr	r0, [pc, #32]	; (800f71c <prvPortStartFirstTask+0x24>)
 800f6fa:	6800      	ldr	r0, [r0, #0]
 800f6fc:	6800      	ldr	r0, [r0, #0]
 800f6fe:	f380 8808 	msr	MSP, r0
 800f702:	f04f 0000 	mov.w	r0, #0
 800f706:	f380 8814 	msr	CONTROL, r0
 800f70a:	b662      	cpsie	i
 800f70c:	b661      	cpsie	f
 800f70e:	f3bf 8f4f 	dsb	sy
 800f712:	f3bf 8f6f 	isb	sy
 800f716:	df00      	svc	0
 800f718:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800f71a:	bf00      	nop
 800f71c:	e000ed08 	.word	0xe000ed08

0800f720 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800f720:	b580      	push	{r7, lr}
 800f722:	b086      	sub	sp, #24
 800f724:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800f726:	4b46      	ldr	r3, [pc, #280]	; (800f840 <xPortStartScheduler+0x120>)
 800f728:	681b      	ldr	r3, [r3, #0]
 800f72a:	4a46      	ldr	r2, [pc, #280]	; (800f844 <xPortStartScheduler+0x124>)
 800f72c:	4293      	cmp	r3, r2
 800f72e:	d10a      	bne.n	800f746 <xPortStartScheduler+0x26>
	__asm volatile
 800f730:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f734:	f383 8811 	msr	BASEPRI, r3
 800f738:	f3bf 8f6f 	isb	sy
 800f73c:	f3bf 8f4f 	dsb	sy
 800f740:	613b      	str	r3, [r7, #16]
}
 800f742:	bf00      	nop
 800f744:	e7fe      	b.n	800f744 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800f746:	4b3e      	ldr	r3, [pc, #248]	; (800f840 <xPortStartScheduler+0x120>)
 800f748:	681b      	ldr	r3, [r3, #0]
 800f74a:	4a3f      	ldr	r2, [pc, #252]	; (800f848 <xPortStartScheduler+0x128>)
 800f74c:	4293      	cmp	r3, r2
 800f74e:	d10a      	bne.n	800f766 <xPortStartScheduler+0x46>
	__asm volatile
 800f750:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f754:	f383 8811 	msr	BASEPRI, r3
 800f758:	f3bf 8f6f 	isb	sy
 800f75c:	f3bf 8f4f 	dsb	sy
 800f760:	60fb      	str	r3, [r7, #12]
}
 800f762:	bf00      	nop
 800f764:	e7fe      	b.n	800f764 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800f766:	4b39      	ldr	r3, [pc, #228]	; (800f84c <xPortStartScheduler+0x12c>)
 800f768:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f76a:	697b      	ldr	r3, [r7, #20]
 800f76c:	781b      	ldrb	r3, [r3, #0]
 800f76e:	b2db      	uxtb	r3, r3
 800f770:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f772:	697b      	ldr	r3, [r7, #20]
 800f774:	22ff      	movs	r2, #255	; 0xff
 800f776:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f778:	697b      	ldr	r3, [r7, #20]
 800f77a:	781b      	ldrb	r3, [r3, #0]
 800f77c:	b2db      	uxtb	r3, r3
 800f77e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f780:	78fb      	ldrb	r3, [r7, #3]
 800f782:	b2db      	uxtb	r3, r3
 800f784:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800f788:	b2da      	uxtb	r2, r3
 800f78a:	4b31      	ldr	r3, [pc, #196]	; (800f850 <xPortStartScheduler+0x130>)
 800f78c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800f78e:	4b31      	ldr	r3, [pc, #196]	; (800f854 <xPortStartScheduler+0x134>)
 800f790:	2207      	movs	r2, #7
 800f792:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f794:	e009      	b.n	800f7aa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800f796:	4b2f      	ldr	r3, [pc, #188]	; (800f854 <xPortStartScheduler+0x134>)
 800f798:	681b      	ldr	r3, [r3, #0]
 800f79a:	3b01      	subs	r3, #1
 800f79c:	4a2d      	ldr	r2, [pc, #180]	; (800f854 <xPortStartScheduler+0x134>)
 800f79e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800f7a0:	78fb      	ldrb	r3, [r7, #3]
 800f7a2:	b2db      	uxtb	r3, r3
 800f7a4:	005b      	lsls	r3, r3, #1
 800f7a6:	b2db      	uxtb	r3, r3
 800f7a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f7aa:	78fb      	ldrb	r3, [r7, #3]
 800f7ac:	b2db      	uxtb	r3, r3
 800f7ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f7b2:	2b80      	cmp	r3, #128	; 0x80
 800f7b4:	d0ef      	beq.n	800f796 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800f7b6:	4b27      	ldr	r3, [pc, #156]	; (800f854 <xPortStartScheduler+0x134>)
 800f7b8:	681b      	ldr	r3, [r3, #0]
 800f7ba:	f1c3 0307 	rsb	r3, r3, #7
 800f7be:	2b04      	cmp	r3, #4
 800f7c0:	d00a      	beq.n	800f7d8 <xPortStartScheduler+0xb8>
	__asm volatile
 800f7c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7c6:	f383 8811 	msr	BASEPRI, r3
 800f7ca:	f3bf 8f6f 	isb	sy
 800f7ce:	f3bf 8f4f 	dsb	sy
 800f7d2:	60bb      	str	r3, [r7, #8]
}
 800f7d4:	bf00      	nop
 800f7d6:	e7fe      	b.n	800f7d6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800f7d8:	4b1e      	ldr	r3, [pc, #120]	; (800f854 <xPortStartScheduler+0x134>)
 800f7da:	681b      	ldr	r3, [r3, #0]
 800f7dc:	021b      	lsls	r3, r3, #8
 800f7de:	4a1d      	ldr	r2, [pc, #116]	; (800f854 <xPortStartScheduler+0x134>)
 800f7e0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f7e2:	4b1c      	ldr	r3, [pc, #112]	; (800f854 <xPortStartScheduler+0x134>)
 800f7e4:	681b      	ldr	r3, [r3, #0]
 800f7e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f7ea:	4a1a      	ldr	r2, [pc, #104]	; (800f854 <xPortStartScheduler+0x134>)
 800f7ec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	b2da      	uxtb	r2, r3
 800f7f2:	697b      	ldr	r3, [r7, #20]
 800f7f4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f7f6:	4b18      	ldr	r3, [pc, #96]	; (800f858 <xPortStartScheduler+0x138>)
 800f7f8:	681b      	ldr	r3, [r3, #0]
 800f7fa:	4a17      	ldr	r2, [pc, #92]	; (800f858 <xPortStartScheduler+0x138>)
 800f7fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800f800:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f802:	4b15      	ldr	r3, [pc, #84]	; (800f858 <xPortStartScheduler+0x138>)
 800f804:	681b      	ldr	r3, [r3, #0]
 800f806:	4a14      	ldr	r2, [pc, #80]	; (800f858 <xPortStartScheduler+0x138>)
 800f808:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800f80c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800f80e:	f000 f8dd 	bl	800f9cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800f812:	4b12      	ldr	r3, [pc, #72]	; (800f85c <xPortStartScheduler+0x13c>)
 800f814:	2200      	movs	r2, #0
 800f816:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800f818:	f000 f8fc 	bl	800fa14 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800f81c:	4b10      	ldr	r3, [pc, #64]	; (800f860 <xPortStartScheduler+0x140>)
 800f81e:	681b      	ldr	r3, [r3, #0]
 800f820:	4a0f      	ldr	r2, [pc, #60]	; (800f860 <xPortStartScheduler+0x140>)
 800f822:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800f826:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800f828:	f7ff ff66 	bl	800f6f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800f82c:	f7fe fe6e 	bl	800e50c <vTaskSwitchContext>
	prvTaskExitError();
 800f830:	f7ff ff1e 	bl	800f670 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800f834:	2300      	movs	r3, #0
}
 800f836:	4618      	mov	r0, r3
 800f838:	3718      	adds	r7, #24
 800f83a:	46bd      	mov	sp, r7
 800f83c:	bd80      	pop	{r7, pc}
 800f83e:	bf00      	nop
 800f840:	e000ed00 	.word	0xe000ed00
 800f844:	410fc271 	.word	0x410fc271
 800f848:	410fc270 	.word	0x410fc270
 800f84c:	e000e400 	.word	0xe000e400
 800f850:	20001314 	.word	0x20001314
 800f854:	20001318 	.word	0x20001318
 800f858:	e000ed20 	.word	0xe000ed20
 800f85c:	2000001c 	.word	0x2000001c
 800f860:	e000ef34 	.word	0xe000ef34

0800f864 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800f864:	b480      	push	{r7}
 800f866:	b083      	sub	sp, #12
 800f868:	af00      	add	r7, sp, #0
	__asm volatile
 800f86a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f86e:	f383 8811 	msr	BASEPRI, r3
 800f872:	f3bf 8f6f 	isb	sy
 800f876:	f3bf 8f4f 	dsb	sy
 800f87a:	607b      	str	r3, [r7, #4]
}
 800f87c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800f87e:	4b0f      	ldr	r3, [pc, #60]	; (800f8bc <vPortEnterCritical+0x58>)
 800f880:	681b      	ldr	r3, [r3, #0]
 800f882:	3301      	adds	r3, #1
 800f884:	4a0d      	ldr	r2, [pc, #52]	; (800f8bc <vPortEnterCritical+0x58>)
 800f886:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800f888:	4b0c      	ldr	r3, [pc, #48]	; (800f8bc <vPortEnterCritical+0x58>)
 800f88a:	681b      	ldr	r3, [r3, #0]
 800f88c:	2b01      	cmp	r3, #1
 800f88e:	d10f      	bne.n	800f8b0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800f890:	4b0b      	ldr	r3, [pc, #44]	; (800f8c0 <vPortEnterCritical+0x5c>)
 800f892:	681b      	ldr	r3, [r3, #0]
 800f894:	b2db      	uxtb	r3, r3
 800f896:	2b00      	cmp	r3, #0
 800f898:	d00a      	beq.n	800f8b0 <vPortEnterCritical+0x4c>
	__asm volatile
 800f89a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f89e:	f383 8811 	msr	BASEPRI, r3
 800f8a2:	f3bf 8f6f 	isb	sy
 800f8a6:	f3bf 8f4f 	dsb	sy
 800f8aa:	603b      	str	r3, [r7, #0]
}
 800f8ac:	bf00      	nop
 800f8ae:	e7fe      	b.n	800f8ae <vPortEnterCritical+0x4a>
	}
}
 800f8b0:	bf00      	nop
 800f8b2:	370c      	adds	r7, #12
 800f8b4:	46bd      	mov	sp, r7
 800f8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8ba:	4770      	bx	lr
 800f8bc:	2000001c 	.word	0x2000001c
 800f8c0:	e000ed04 	.word	0xe000ed04

0800f8c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800f8c4:	b480      	push	{r7}
 800f8c6:	b083      	sub	sp, #12
 800f8c8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800f8ca:	4b12      	ldr	r3, [pc, #72]	; (800f914 <vPortExitCritical+0x50>)
 800f8cc:	681b      	ldr	r3, [r3, #0]
 800f8ce:	2b00      	cmp	r3, #0
 800f8d0:	d10a      	bne.n	800f8e8 <vPortExitCritical+0x24>
	__asm volatile
 800f8d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8d6:	f383 8811 	msr	BASEPRI, r3
 800f8da:	f3bf 8f6f 	isb	sy
 800f8de:	f3bf 8f4f 	dsb	sy
 800f8e2:	607b      	str	r3, [r7, #4]
}
 800f8e4:	bf00      	nop
 800f8e6:	e7fe      	b.n	800f8e6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800f8e8:	4b0a      	ldr	r3, [pc, #40]	; (800f914 <vPortExitCritical+0x50>)
 800f8ea:	681b      	ldr	r3, [r3, #0]
 800f8ec:	3b01      	subs	r3, #1
 800f8ee:	4a09      	ldr	r2, [pc, #36]	; (800f914 <vPortExitCritical+0x50>)
 800f8f0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800f8f2:	4b08      	ldr	r3, [pc, #32]	; (800f914 <vPortExitCritical+0x50>)
 800f8f4:	681b      	ldr	r3, [r3, #0]
 800f8f6:	2b00      	cmp	r3, #0
 800f8f8:	d105      	bne.n	800f906 <vPortExitCritical+0x42>
 800f8fa:	2300      	movs	r3, #0
 800f8fc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f8fe:	683b      	ldr	r3, [r7, #0]
 800f900:	f383 8811 	msr	BASEPRI, r3
}
 800f904:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800f906:	bf00      	nop
 800f908:	370c      	adds	r7, #12
 800f90a:	46bd      	mov	sp, r7
 800f90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f910:	4770      	bx	lr
 800f912:	bf00      	nop
 800f914:	2000001c 	.word	0x2000001c
	...

0800f920 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800f920:	f3ef 8009 	mrs	r0, PSP
 800f924:	f3bf 8f6f 	isb	sy
 800f928:	4b15      	ldr	r3, [pc, #84]	; (800f980 <pxCurrentTCBConst>)
 800f92a:	681a      	ldr	r2, [r3, #0]
 800f92c:	f01e 0f10 	tst.w	lr, #16
 800f930:	bf08      	it	eq
 800f932:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f936:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f93a:	6010      	str	r0, [r2, #0]
 800f93c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800f940:	f04f 0050 	mov.w	r0, #80	; 0x50
 800f944:	f380 8811 	msr	BASEPRI, r0
 800f948:	f3bf 8f4f 	dsb	sy
 800f94c:	f3bf 8f6f 	isb	sy
 800f950:	f7fe fddc 	bl	800e50c <vTaskSwitchContext>
 800f954:	f04f 0000 	mov.w	r0, #0
 800f958:	f380 8811 	msr	BASEPRI, r0
 800f95c:	bc09      	pop	{r0, r3}
 800f95e:	6819      	ldr	r1, [r3, #0]
 800f960:	6808      	ldr	r0, [r1, #0]
 800f962:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f966:	f01e 0f10 	tst.w	lr, #16
 800f96a:	bf08      	it	eq
 800f96c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f970:	f380 8809 	msr	PSP, r0
 800f974:	f3bf 8f6f 	isb	sy
 800f978:	4770      	bx	lr
 800f97a:	bf00      	nop
 800f97c:	f3af 8000 	nop.w

0800f980 <pxCurrentTCBConst>:
 800f980:	20000ce8 	.word	0x20000ce8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800f984:	bf00      	nop
 800f986:	bf00      	nop

0800f988 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800f988:	b580      	push	{r7, lr}
 800f98a:	b082      	sub	sp, #8
 800f98c:	af00      	add	r7, sp, #0
	__asm volatile
 800f98e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f992:	f383 8811 	msr	BASEPRI, r3
 800f996:	f3bf 8f6f 	isb	sy
 800f99a:	f3bf 8f4f 	dsb	sy
 800f99e:	607b      	str	r3, [r7, #4]
}
 800f9a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800f9a2:	f7fe fcf9 	bl	800e398 <xTaskIncrementTick>
 800f9a6:	4603      	mov	r3, r0
 800f9a8:	2b00      	cmp	r3, #0
 800f9aa:	d003      	beq.n	800f9b4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800f9ac:	4b06      	ldr	r3, [pc, #24]	; (800f9c8 <xPortSysTickHandler+0x40>)
 800f9ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f9b2:	601a      	str	r2, [r3, #0]
 800f9b4:	2300      	movs	r3, #0
 800f9b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f9b8:	683b      	ldr	r3, [r7, #0]
 800f9ba:	f383 8811 	msr	BASEPRI, r3
}
 800f9be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800f9c0:	bf00      	nop
 800f9c2:	3708      	adds	r7, #8
 800f9c4:	46bd      	mov	sp, r7
 800f9c6:	bd80      	pop	{r7, pc}
 800f9c8:	e000ed04 	.word	0xe000ed04

0800f9cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800f9cc:	b480      	push	{r7}
 800f9ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800f9d0:	4b0b      	ldr	r3, [pc, #44]	; (800fa00 <vPortSetupTimerInterrupt+0x34>)
 800f9d2:	2200      	movs	r2, #0
 800f9d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800f9d6:	4b0b      	ldr	r3, [pc, #44]	; (800fa04 <vPortSetupTimerInterrupt+0x38>)
 800f9d8:	2200      	movs	r2, #0
 800f9da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f9dc:	4b0a      	ldr	r3, [pc, #40]	; (800fa08 <vPortSetupTimerInterrupt+0x3c>)
 800f9de:	681b      	ldr	r3, [r3, #0]
 800f9e0:	4a0a      	ldr	r2, [pc, #40]	; (800fa0c <vPortSetupTimerInterrupt+0x40>)
 800f9e2:	fba2 2303 	umull	r2, r3, r2, r3
 800f9e6:	099b      	lsrs	r3, r3, #6
 800f9e8:	4a09      	ldr	r2, [pc, #36]	; (800fa10 <vPortSetupTimerInterrupt+0x44>)
 800f9ea:	3b01      	subs	r3, #1
 800f9ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800f9ee:	4b04      	ldr	r3, [pc, #16]	; (800fa00 <vPortSetupTimerInterrupt+0x34>)
 800f9f0:	2207      	movs	r2, #7
 800f9f2:	601a      	str	r2, [r3, #0]
}
 800f9f4:	bf00      	nop
 800f9f6:	46bd      	mov	sp, r7
 800f9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9fc:	4770      	bx	lr
 800f9fe:	bf00      	nop
 800fa00:	e000e010 	.word	0xe000e010
 800fa04:	e000e018 	.word	0xe000e018
 800fa08:	20000010 	.word	0x20000010
 800fa0c:	10624dd3 	.word	0x10624dd3
 800fa10:	e000e014 	.word	0xe000e014

0800fa14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800fa14:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800fa24 <vPortEnableVFP+0x10>
 800fa18:	6801      	ldr	r1, [r0, #0]
 800fa1a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800fa1e:	6001      	str	r1, [r0, #0]
 800fa20:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800fa22:	bf00      	nop
 800fa24:	e000ed88 	.word	0xe000ed88

0800fa28 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800fa28:	b480      	push	{r7}
 800fa2a:	b085      	sub	sp, #20
 800fa2c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800fa2e:	f3ef 8305 	mrs	r3, IPSR
 800fa32:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800fa34:	68fb      	ldr	r3, [r7, #12]
 800fa36:	2b0f      	cmp	r3, #15
 800fa38:	d914      	bls.n	800fa64 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800fa3a:	4a17      	ldr	r2, [pc, #92]	; (800fa98 <vPortValidateInterruptPriority+0x70>)
 800fa3c:	68fb      	ldr	r3, [r7, #12]
 800fa3e:	4413      	add	r3, r2
 800fa40:	781b      	ldrb	r3, [r3, #0]
 800fa42:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800fa44:	4b15      	ldr	r3, [pc, #84]	; (800fa9c <vPortValidateInterruptPriority+0x74>)
 800fa46:	781b      	ldrb	r3, [r3, #0]
 800fa48:	7afa      	ldrb	r2, [r7, #11]
 800fa4a:	429a      	cmp	r2, r3
 800fa4c:	d20a      	bcs.n	800fa64 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800fa4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa52:	f383 8811 	msr	BASEPRI, r3
 800fa56:	f3bf 8f6f 	isb	sy
 800fa5a:	f3bf 8f4f 	dsb	sy
 800fa5e:	607b      	str	r3, [r7, #4]
}
 800fa60:	bf00      	nop
 800fa62:	e7fe      	b.n	800fa62 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800fa64:	4b0e      	ldr	r3, [pc, #56]	; (800faa0 <vPortValidateInterruptPriority+0x78>)
 800fa66:	681b      	ldr	r3, [r3, #0]
 800fa68:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800fa6c:	4b0d      	ldr	r3, [pc, #52]	; (800faa4 <vPortValidateInterruptPriority+0x7c>)
 800fa6e:	681b      	ldr	r3, [r3, #0]
 800fa70:	429a      	cmp	r2, r3
 800fa72:	d90a      	bls.n	800fa8a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800fa74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa78:	f383 8811 	msr	BASEPRI, r3
 800fa7c:	f3bf 8f6f 	isb	sy
 800fa80:	f3bf 8f4f 	dsb	sy
 800fa84:	603b      	str	r3, [r7, #0]
}
 800fa86:	bf00      	nop
 800fa88:	e7fe      	b.n	800fa88 <vPortValidateInterruptPriority+0x60>
	}
 800fa8a:	bf00      	nop
 800fa8c:	3714      	adds	r7, #20
 800fa8e:	46bd      	mov	sp, r7
 800fa90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa94:	4770      	bx	lr
 800fa96:	bf00      	nop
 800fa98:	e000e3f0 	.word	0xe000e3f0
 800fa9c:	20001314 	.word	0x20001314
 800faa0:	e000ed0c 	.word	0xe000ed0c
 800faa4:	20001318 	.word	0x20001318

0800faa8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800faa8:	b580      	push	{r7, lr}
 800faaa:	b08a      	sub	sp, #40	; 0x28
 800faac:	af00      	add	r7, sp, #0
 800faae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800fab0:	2300      	movs	r3, #0
 800fab2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800fab4:	f7fe fbb4 	bl	800e220 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800fab8:	4b5b      	ldr	r3, [pc, #364]	; (800fc28 <pvPortMalloc+0x180>)
 800faba:	681b      	ldr	r3, [r3, #0]
 800fabc:	2b00      	cmp	r3, #0
 800fabe:	d101      	bne.n	800fac4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800fac0:	f000 f920 	bl	800fd04 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800fac4:	4b59      	ldr	r3, [pc, #356]	; (800fc2c <pvPortMalloc+0x184>)
 800fac6:	681a      	ldr	r2, [r3, #0]
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	4013      	ands	r3, r2
 800facc:	2b00      	cmp	r3, #0
 800face:	f040 8093 	bne.w	800fbf8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	2b00      	cmp	r3, #0
 800fad6:	d01d      	beq.n	800fb14 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800fad8:	2208      	movs	r2, #8
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	4413      	add	r3, r2
 800fade:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	f003 0307 	and.w	r3, r3, #7
 800fae6:	2b00      	cmp	r3, #0
 800fae8:	d014      	beq.n	800fb14 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	f023 0307 	bic.w	r3, r3, #7
 800faf0:	3308      	adds	r3, #8
 800faf2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	f003 0307 	and.w	r3, r3, #7
 800fafa:	2b00      	cmp	r3, #0
 800fafc:	d00a      	beq.n	800fb14 <pvPortMalloc+0x6c>
	__asm volatile
 800fafe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb02:	f383 8811 	msr	BASEPRI, r3
 800fb06:	f3bf 8f6f 	isb	sy
 800fb0a:	f3bf 8f4f 	dsb	sy
 800fb0e:	617b      	str	r3, [r7, #20]
}
 800fb10:	bf00      	nop
 800fb12:	e7fe      	b.n	800fb12 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	2b00      	cmp	r3, #0
 800fb18:	d06e      	beq.n	800fbf8 <pvPortMalloc+0x150>
 800fb1a:	4b45      	ldr	r3, [pc, #276]	; (800fc30 <pvPortMalloc+0x188>)
 800fb1c:	681b      	ldr	r3, [r3, #0]
 800fb1e:	687a      	ldr	r2, [r7, #4]
 800fb20:	429a      	cmp	r2, r3
 800fb22:	d869      	bhi.n	800fbf8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800fb24:	4b43      	ldr	r3, [pc, #268]	; (800fc34 <pvPortMalloc+0x18c>)
 800fb26:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800fb28:	4b42      	ldr	r3, [pc, #264]	; (800fc34 <pvPortMalloc+0x18c>)
 800fb2a:	681b      	ldr	r3, [r3, #0]
 800fb2c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800fb2e:	e004      	b.n	800fb3a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800fb30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb32:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800fb34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb36:	681b      	ldr	r3, [r3, #0]
 800fb38:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800fb3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb3c:	685b      	ldr	r3, [r3, #4]
 800fb3e:	687a      	ldr	r2, [r7, #4]
 800fb40:	429a      	cmp	r2, r3
 800fb42:	d903      	bls.n	800fb4c <pvPortMalloc+0xa4>
 800fb44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb46:	681b      	ldr	r3, [r3, #0]
 800fb48:	2b00      	cmp	r3, #0
 800fb4a:	d1f1      	bne.n	800fb30 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800fb4c:	4b36      	ldr	r3, [pc, #216]	; (800fc28 <pvPortMalloc+0x180>)
 800fb4e:	681b      	ldr	r3, [r3, #0]
 800fb50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fb52:	429a      	cmp	r2, r3
 800fb54:	d050      	beq.n	800fbf8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800fb56:	6a3b      	ldr	r3, [r7, #32]
 800fb58:	681b      	ldr	r3, [r3, #0]
 800fb5a:	2208      	movs	r2, #8
 800fb5c:	4413      	add	r3, r2
 800fb5e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800fb60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb62:	681a      	ldr	r2, [r3, #0]
 800fb64:	6a3b      	ldr	r3, [r7, #32]
 800fb66:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800fb68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb6a:	685a      	ldr	r2, [r3, #4]
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	1ad2      	subs	r2, r2, r3
 800fb70:	2308      	movs	r3, #8
 800fb72:	005b      	lsls	r3, r3, #1
 800fb74:	429a      	cmp	r2, r3
 800fb76:	d91f      	bls.n	800fbb8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800fb78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	4413      	add	r3, r2
 800fb7e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800fb80:	69bb      	ldr	r3, [r7, #24]
 800fb82:	f003 0307 	and.w	r3, r3, #7
 800fb86:	2b00      	cmp	r3, #0
 800fb88:	d00a      	beq.n	800fba0 <pvPortMalloc+0xf8>
	__asm volatile
 800fb8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb8e:	f383 8811 	msr	BASEPRI, r3
 800fb92:	f3bf 8f6f 	isb	sy
 800fb96:	f3bf 8f4f 	dsb	sy
 800fb9a:	613b      	str	r3, [r7, #16]
}
 800fb9c:	bf00      	nop
 800fb9e:	e7fe      	b.n	800fb9e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800fba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fba2:	685a      	ldr	r2, [r3, #4]
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	1ad2      	subs	r2, r2, r3
 800fba8:	69bb      	ldr	r3, [r7, #24]
 800fbaa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800fbac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbae:	687a      	ldr	r2, [r7, #4]
 800fbb0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800fbb2:	69b8      	ldr	r0, [r7, #24]
 800fbb4:	f000 f908 	bl	800fdc8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800fbb8:	4b1d      	ldr	r3, [pc, #116]	; (800fc30 <pvPortMalloc+0x188>)
 800fbba:	681a      	ldr	r2, [r3, #0]
 800fbbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbbe:	685b      	ldr	r3, [r3, #4]
 800fbc0:	1ad3      	subs	r3, r2, r3
 800fbc2:	4a1b      	ldr	r2, [pc, #108]	; (800fc30 <pvPortMalloc+0x188>)
 800fbc4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800fbc6:	4b1a      	ldr	r3, [pc, #104]	; (800fc30 <pvPortMalloc+0x188>)
 800fbc8:	681a      	ldr	r2, [r3, #0]
 800fbca:	4b1b      	ldr	r3, [pc, #108]	; (800fc38 <pvPortMalloc+0x190>)
 800fbcc:	681b      	ldr	r3, [r3, #0]
 800fbce:	429a      	cmp	r2, r3
 800fbd0:	d203      	bcs.n	800fbda <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800fbd2:	4b17      	ldr	r3, [pc, #92]	; (800fc30 <pvPortMalloc+0x188>)
 800fbd4:	681b      	ldr	r3, [r3, #0]
 800fbd6:	4a18      	ldr	r2, [pc, #96]	; (800fc38 <pvPortMalloc+0x190>)
 800fbd8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800fbda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbdc:	685a      	ldr	r2, [r3, #4]
 800fbde:	4b13      	ldr	r3, [pc, #76]	; (800fc2c <pvPortMalloc+0x184>)
 800fbe0:	681b      	ldr	r3, [r3, #0]
 800fbe2:	431a      	orrs	r2, r3
 800fbe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbe6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800fbe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbea:	2200      	movs	r2, #0
 800fbec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800fbee:	4b13      	ldr	r3, [pc, #76]	; (800fc3c <pvPortMalloc+0x194>)
 800fbf0:	681b      	ldr	r3, [r3, #0]
 800fbf2:	3301      	adds	r3, #1
 800fbf4:	4a11      	ldr	r2, [pc, #68]	; (800fc3c <pvPortMalloc+0x194>)
 800fbf6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800fbf8:	f7fe fb20 	bl	800e23c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800fbfc:	69fb      	ldr	r3, [r7, #28]
 800fbfe:	f003 0307 	and.w	r3, r3, #7
 800fc02:	2b00      	cmp	r3, #0
 800fc04:	d00a      	beq.n	800fc1c <pvPortMalloc+0x174>
	__asm volatile
 800fc06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc0a:	f383 8811 	msr	BASEPRI, r3
 800fc0e:	f3bf 8f6f 	isb	sy
 800fc12:	f3bf 8f4f 	dsb	sy
 800fc16:	60fb      	str	r3, [r7, #12]
}
 800fc18:	bf00      	nop
 800fc1a:	e7fe      	b.n	800fc1a <pvPortMalloc+0x172>
	return pvReturn;
 800fc1c:	69fb      	ldr	r3, [r7, #28]
}
 800fc1e:	4618      	mov	r0, r3
 800fc20:	3728      	adds	r7, #40	; 0x28
 800fc22:	46bd      	mov	sp, r7
 800fc24:	bd80      	pop	{r7, pc}
 800fc26:	bf00      	nop
 800fc28:	20006324 	.word	0x20006324
 800fc2c:	20006338 	.word	0x20006338
 800fc30:	20006328 	.word	0x20006328
 800fc34:	2000631c 	.word	0x2000631c
 800fc38:	2000632c 	.word	0x2000632c
 800fc3c:	20006330 	.word	0x20006330

0800fc40 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800fc40:	b580      	push	{r7, lr}
 800fc42:	b086      	sub	sp, #24
 800fc44:	af00      	add	r7, sp, #0
 800fc46:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	2b00      	cmp	r3, #0
 800fc50:	d04d      	beq.n	800fcee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800fc52:	2308      	movs	r3, #8
 800fc54:	425b      	negs	r3, r3
 800fc56:	697a      	ldr	r2, [r7, #20]
 800fc58:	4413      	add	r3, r2
 800fc5a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800fc5c:	697b      	ldr	r3, [r7, #20]
 800fc5e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800fc60:	693b      	ldr	r3, [r7, #16]
 800fc62:	685a      	ldr	r2, [r3, #4]
 800fc64:	4b24      	ldr	r3, [pc, #144]	; (800fcf8 <vPortFree+0xb8>)
 800fc66:	681b      	ldr	r3, [r3, #0]
 800fc68:	4013      	ands	r3, r2
 800fc6a:	2b00      	cmp	r3, #0
 800fc6c:	d10a      	bne.n	800fc84 <vPortFree+0x44>
	__asm volatile
 800fc6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc72:	f383 8811 	msr	BASEPRI, r3
 800fc76:	f3bf 8f6f 	isb	sy
 800fc7a:	f3bf 8f4f 	dsb	sy
 800fc7e:	60fb      	str	r3, [r7, #12]
}
 800fc80:	bf00      	nop
 800fc82:	e7fe      	b.n	800fc82 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800fc84:	693b      	ldr	r3, [r7, #16]
 800fc86:	681b      	ldr	r3, [r3, #0]
 800fc88:	2b00      	cmp	r3, #0
 800fc8a:	d00a      	beq.n	800fca2 <vPortFree+0x62>
	__asm volatile
 800fc8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc90:	f383 8811 	msr	BASEPRI, r3
 800fc94:	f3bf 8f6f 	isb	sy
 800fc98:	f3bf 8f4f 	dsb	sy
 800fc9c:	60bb      	str	r3, [r7, #8]
}
 800fc9e:	bf00      	nop
 800fca0:	e7fe      	b.n	800fca0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800fca2:	693b      	ldr	r3, [r7, #16]
 800fca4:	685a      	ldr	r2, [r3, #4]
 800fca6:	4b14      	ldr	r3, [pc, #80]	; (800fcf8 <vPortFree+0xb8>)
 800fca8:	681b      	ldr	r3, [r3, #0]
 800fcaa:	4013      	ands	r3, r2
 800fcac:	2b00      	cmp	r3, #0
 800fcae:	d01e      	beq.n	800fcee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800fcb0:	693b      	ldr	r3, [r7, #16]
 800fcb2:	681b      	ldr	r3, [r3, #0]
 800fcb4:	2b00      	cmp	r3, #0
 800fcb6:	d11a      	bne.n	800fcee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800fcb8:	693b      	ldr	r3, [r7, #16]
 800fcba:	685a      	ldr	r2, [r3, #4]
 800fcbc:	4b0e      	ldr	r3, [pc, #56]	; (800fcf8 <vPortFree+0xb8>)
 800fcbe:	681b      	ldr	r3, [r3, #0]
 800fcc0:	43db      	mvns	r3, r3
 800fcc2:	401a      	ands	r2, r3
 800fcc4:	693b      	ldr	r3, [r7, #16]
 800fcc6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800fcc8:	f7fe faaa 	bl	800e220 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800fccc:	693b      	ldr	r3, [r7, #16]
 800fcce:	685a      	ldr	r2, [r3, #4]
 800fcd0:	4b0a      	ldr	r3, [pc, #40]	; (800fcfc <vPortFree+0xbc>)
 800fcd2:	681b      	ldr	r3, [r3, #0]
 800fcd4:	4413      	add	r3, r2
 800fcd6:	4a09      	ldr	r2, [pc, #36]	; (800fcfc <vPortFree+0xbc>)
 800fcd8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800fcda:	6938      	ldr	r0, [r7, #16]
 800fcdc:	f000 f874 	bl	800fdc8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800fce0:	4b07      	ldr	r3, [pc, #28]	; (800fd00 <vPortFree+0xc0>)
 800fce2:	681b      	ldr	r3, [r3, #0]
 800fce4:	3301      	adds	r3, #1
 800fce6:	4a06      	ldr	r2, [pc, #24]	; (800fd00 <vPortFree+0xc0>)
 800fce8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800fcea:	f7fe faa7 	bl	800e23c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800fcee:	bf00      	nop
 800fcf0:	3718      	adds	r7, #24
 800fcf2:	46bd      	mov	sp, r7
 800fcf4:	bd80      	pop	{r7, pc}
 800fcf6:	bf00      	nop
 800fcf8:	20006338 	.word	0x20006338
 800fcfc:	20006328 	.word	0x20006328
 800fd00:	20006334 	.word	0x20006334

0800fd04 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800fd04:	b480      	push	{r7}
 800fd06:	b085      	sub	sp, #20
 800fd08:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800fd0a:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 800fd0e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800fd10:	4b27      	ldr	r3, [pc, #156]	; (800fdb0 <prvHeapInit+0xac>)
 800fd12:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800fd14:	68fb      	ldr	r3, [r7, #12]
 800fd16:	f003 0307 	and.w	r3, r3, #7
 800fd1a:	2b00      	cmp	r3, #0
 800fd1c:	d00c      	beq.n	800fd38 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800fd1e:	68fb      	ldr	r3, [r7, #12]
 800fd20:	3307      	adds	r3, #7
 800fd22:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800fd24:	68fb      	ldr	r3, [r7, #12]
 800fd26:	f023 0307 	bic.w	r3, r3, #7
 800fd2a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800fd2c:	68ba      	ldr	r2, [r7, #8]
 800fd2e:	68fb      	ldr	r3, [r7, #12]
 800fd30:	1ad3      	subs	r3, r2, r3
 800fd32:	4a1f      	ldr	r2, [pc, #124]	; (800fdb0 <prvHeapInit+0xac>)
 800fd34:	4413      	add	r3, r2
 800fd36:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800fd38:	68fb      	ldr	r3, [r7, #12]
 800fd3a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800fd3c:	4a1d      	ldr	r2, [pc, #116]	; (800fdb4 <prvHeapInit+0xb0>)
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800fd42:	4b1c      	ldr	r3, [pc, #112]	; (800fdb4 <prvHeapInit+0xb0>)
 800fd44:	2200      	movs	r2, #0
 800fd46:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	68ba      	ldr	r2, [r7, #8]
 800fd4c:	4413      	add	r3, r2
 800fd4e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800fd50:	2208      	movs	r2, #8
 800fd52:	68fb      	ldr	r3, [r7, #12]
 800fd54:	1a9b      	subs	r3, r3, r2
 800fd56:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800fd58:	68fb      	ldr	r3, [r7, #12]
 800fd5a:	f023 0307 	bic.w	r3, r3, #7
 800fd5e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800fd60:	68fb      	ldr	r3, [r7, #12]
 800fd62:	4a15      	ldr	r2, [pc, #84]	; (800fdb8 <prvHeapInit+0xb4>)
 800fd64:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800fd66:	4b14      	ldr	r3, [pc, #80]	; (800fdb8 <prvHeapInit+0xb4>)
 800fd68:	681b      	ldr	r3, [r3, #0]
 800fd6a:	2200      	movs	r2, #0
 800fd6c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800fd6e:	4b12      	ldr	r3, [pc, #72]	; (800fdb8 <prvHeapInit+0xb4>)
 800fd70:	681b      	ldr	r3, [r3, #0]
 800fd72:	2200      	movs	r2, #0
 800fd74:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800fd7a:	683b      	ldr	r3, [r7, #0]
 800fd7c:	68fa      	ldr	r2, [r7, #12]
 800fd7e:	1ad2      	subs	r2, r2, r3
 800fd80:	683b      	ldr	r3, [r7, #0]
 800fd82:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800fd84:	4b0c      	ldr	r3, [pc, #48]	; (800fdb8 <prvHeapInit+0xb4>)
 800fd86:	681a      	ldr	r2, [r3, #0]
 800fd88:	683b      	ldr	r3, [r7, #0]
 800fd8a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800fd8c:	683b      	ldr	r3, [r7, #0]
 800fd8e:	685b      	ldr	r3, [r3, #4]
 800fd90:	4a0a      	ldr	r2, [pc, #40]	; (800fdbc <prvHeapInit+0xb8>)
 800fd92:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800fd94:	683b      	ldr	r3, [r7, #0]
 800fd96:	685b      	ldr	r3, [r3, #4]
 800fd98:	4a09      	ldr	r2, [pc, #36]	; (800fdc0 <prvHeapInit+0xbc>)
 800fd9a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800fd9c:	4b09      	ldr	r3, [pc, #36]	; (800fdc4 <prvHeapInit+0xc0>)
 800fd9e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800fda2:	601a      	str	r2, [r3, #0]
}
 800fda4:	bf00      	nop
 800fda6:	3714      	adds	r7, #20
 800fda8:	46bd      	mov	sp, r7
 800fdaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdae:	4770      	bx	lr
 800fdb0:	2000131c 	.word	0x2000131c
 800fdb4:	2000631c 	.word	0x2000631c
 800fdb8:	20006324 	.word	0x20006324
 800fdbc:	2000632c 	.word	0x2000632c
 800fdc0:	20006328 	.word	0x20006328
 800fdc4:	20006338 	.word	0x20006338

0800fdc8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800fdc8:	b480      	push	{r7}
 800fdca:	b085      	sub	sp, #20
 800fdcc:	af00      	add	r7, sp, #0
 800fdce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800fdd0:	4b28      	ldr	r3, [pc, #160]	; (800fe74 <prvInsertBlockIntoFreeList+0xac>)
 800fdd2:	60fb      	str	r3, [r7, #12]
 800fdd4:	e002      	b.n	800fddc <prvInsertBlockIntoFreeList+0x14>
 800fdd6:	68fb      	ldr	r3, [r7, #12]
 800fdd8:	681b      	ldr	r3, [r3, #0]
 800fdda:	60fb      	str	r3, [r7, #12]
 800fddc:	68fb      	ldr	r3, [r7, #12]
 800fdde:	681b      	ldr	r3, [r3, #0]
 800fde0:	687a      	ldr	r2, [r7, #4]
 800fde2:	429a      	cmp	r2, r3
 800fde4:	d8f7      	bhi.n	800fdd6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800fde6:	68fb      	ldr	r3, [r7, #12]
 800fde8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800fdea:	68fb      	ldr	r3, [r7, #12]
 800fdec:	685b      	ldr	r3, [r3, #4]
 800fdee:	68ba      	ldr	r2, [r7, #8]
 800fdf0:	4413      	add	r3, r2
 800fdf2:	687a      	ldr	r2, [r7, #4]
 800fdf4:	429a      	cmp	r2, r3
 800fdf6:	d108      	bne.n	800fe0a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800fdf8:	68fb      	ldr	r3, [r7, #12]
 800fdfa:	685a      	ldr	r2, [r3, #4]
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	685b      	ldr	r3, [r3, #4]
 800fe00:	441a      	add	r2, r3
 800fe02:	68fb      	ldr	r3, [r7, #12]
 800fe04:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800fe06:	68fb      	ldr	r3, [r7, #12]
 800fe08:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	685b      	ldr	r3, [r3, #4]
 800fe12:	68ba      	ldr	r2, [r7, #8]
 800fe14:	441a      	add	r2, r3
 800fe16:	68fb      	ldr	r3, [r7, #12]
 800fe18:	681b      	ldr	r3, [r3, #0]
 800fe1a:	429a      	cmp	r2, r3
 800fe1c:	d118      	bne.n	800fe50 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800fe1e:	68fb      	ldr	r3, [r7, #12]
 800fe20:	681a      	ldr	r2, [r3, #0]
 800fe22:	4b15      	ldr	r3, [pc, #84]	; (800fe78 <prvInsertBlockIntoFreeList+0xb0>)
 800fe24:	681b      	ldr	r3, [r3, #0]
 800fe26:	429a      	cmp	r2, r3
 800fe28:	d00d      	beq.n	800fe46 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800fe2a:	687b      	ldr	r3, [r7, #4]
 800fe2c:	685a      	ldr	r2, [r3, #4]
 800fe2e:	68fb      	ldr	r3, [r7, #12]
 800fe30:	681b      	ldr	r3, [r3, #0]
 800fe32:	685b      	ldr	r3, [r3, #4]
 800fe34:	441a      	add	r2, r3
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800fe3a:	68fb      	ldr	r3, [r7, #12]
 800fe3c:	681b      	ldr	r3, [r3, #0]
 800fe3e:	681a      	ldr	r2, [r3, #0]
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	601a      	str	r2, [r3, #0]
 800fe44:	e008      	b.n	800fe58 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800fe46:	4b0c      	ldr	r3, [pc, #48]	; (800fe78 <prvInsertBlockIntoFreeList+0xb0>)
 800fe48:	681a      	ldr	r2, [r3, #0]
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	601a      	str	r2, [r3, #0]
 800fe4e:	e003      	b.n	800fe58 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800fe50:	68fb      	ldr	r3, [r7, #12]
 800fe52:	681a      	ldr	r2, [r3, #0]
 800fe54:	687b      	ldr	r3, [r7, #4]
 800fe56:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800fe58:	68fa      	ldr	r2, [r7, #12]
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	429a      	cmp	r2, r3
 800fe5e:	d002      	beq.n	800fe66 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800fe60:	68fb      	ldr	r3, [r7, #12]
 800fe62:	687a      	ldr	r2, [r7, #4]
 800fe64:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fe66:	bf00      	nop
 800fe68:	3714      	adds	r7, #20
 800fe6a:	46bd      	mov	sp, r7
 800fe6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe70:	4770      	bx	lr
 800fe72:	bf00      	nop
 800fe74:	2000631c 	.word	0x2000631c
 800fe78:	20006324 	.word	0x20006324

0800fe7c <__errno>:
 800fe7c:	4b01      	ldr	r3, [pc, #4]	; (800fe84 <__errno+0x8>)
 800fe7e:	6818      	ldr	r0, [r3, #0]
 800fe80:	4770      	bx	lr
 800fe82:	bf00      	nop
 800fe84:	20000020 	.word	0x20000020

0800fe88 <__libc_init_array>:
 800fe88:	b570      	push	{r4, r5, r6, lr}
 800fe8a:	4d0d      	ldr	r5, [pc, #52]	; (800fec0 <__libc_init_array+0x38>)
 800fe8c:	4c0d      	ldr	r4, [pc, #52]	; (800fec4 <__libc_init_array+0x3c>)
 800fe8e:	1b64      	subs	r4, r4, r5
 800fe90:	10a4      	asrs	r4, r4, #2
 800fe92:	2600      	movs	r6, #0
 800fe94:	42a6      	cmp	r6, r4
 800fe96:	d109      	bne.n	800feac <__libc_init_array+0x24>
 800fe98:	4d0b      	ldr	r5, [pc, #44]	; (800fec8 <__libc_init_array+0x40>)
 800fe9a:	4c0c      	ldr	r4, [pc, #48]	; (800fecc <__libc_init_array+0x44>)
 800fe9c:	f004 faac 	bl	80143f8 <_init>
 800fea0:	1b64      	subs	r4, r4, r5
 800fea2:	10a4      	asrs	r4, r4, #2
 800fea4:	2600      	movs	r6, #0
 800fea6:	42a6      	cmp	r6, r4
 800fea8:	d105      	bne.n	800feb6 <__libc_init_array+0x2e>
 800feaa:	bd70      	pop	{r4, r5, r6, pc}
 800feac:	f855 3b04 	ldr.w	r3, [r5], #4
 800feb0:	4798      	blx	r3
 800feb2:	3601      	adds	r6, #1
 800feb4:	e7ee      	b.n	800fe94 <__libc_init_array+0xc>
 800feb6:	f855 3b04 	ldr.w	r3, [r5], #4
 800feba:	4798      	blx	r3
 800febc:	3601      	adds	r6, #1
 800febe:	e7f2      	b.n	800fea6 <__libc_init_array+0x1e>
 800fec0:	0801504c 	.word	0x0801504c
 800fec4:	0801504c 	.word	0x0801504c
 800fec8:	0801504c 	.word	0x0801504c
 800fecc:	08015050 	.word	0x08015050

0800fed0 <memcpy>:
 800fed0:	440a      	add	r2, r1
 800fed2:	4291      	cmp	r1, r2
 800fed4:	f100 33ff 	add.w	r3, r0, #4294967295
 800fed8:	d100      	bne.n	800fedc <memcpy+0xc>
 800feda:	4770      	bx	lr
 800fedc:	b510      	push	{r4, lr}
 800fede:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fee2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fee6:	4291      	cmp	r1, r2
 800fee8:	d1f9      	bne.n	800fede <memcpy+0xe>
 800feea:	bd10      	pop	{r4, pc}

0800feec <memset>:
 800feec:	4402      	add	r2, r0
 800feee:	4603      	mov	r3, r0
 800fef0:	4293      	cmp	r3, r2
 800fef2:	d100      	bne.n	800fef6 <memset+0xa>
 800fef4:	4770      	bx	lr
 800fef6:	f803 1b01 	strb.w	r1, [r3], #1
 800fefa:	e7f9      	b.n	800fef0 <memset+0x4>

0800fefc <__cvt>:
 800fefc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ff00:	ec55 4b10 	vmov	r4, r5, d0
 800ff04:	2d00      	cmp	r5, #0
 800ff06:	460e      	mov	r6, r1
 800ff08:	4619      	mov	r1, r3
 800ff0a:	462b      	mov	r3, r5
 800ff0c:	bfbb      	ittet	lt
 800ff0e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800ff12:	461d      	movlt	r5, r3
 800ff14:	2300      	movge	r3, #0
 800ff16:	232d      	movlt	r3, #45	; 0x2d
 800ff18:	700b      	strb	r3, [r1, #0]
 800ff1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ff1c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800ff20:	4691      	mov	r9, r2
 800ff22:	f023 0820 	bic.w	r8, r3, #32
 800ff26:	bfbc      	itt	lt
 800ff28:	4622      	movlt	r2, r4
 800ff2a:	4614      	movlt	r4, r2
 800ff2c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ff30:	d005      	beq.n	800ff3e <__cvt+0x42>
 800ff32:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800ff36:	d100      	bne.n	800ff3a <__cvt+0x3e>
 800ff38:	3601      	adds	r6, #1
 800ff3a:	2102      	movs	r1, #2
 800ff3c:	e000      	b.n	800ff40 <__cvt+0x44>
 800ff3e:	2103      	movs	r1, #3
 800ff40:	ab03      	add	r3, sp, #12
 800ff42:	9301      	str	r3, [sp, #4]
 800ff44:	ab02      	add	r3, sp, #8
 800ff46:	9300      	str	r3, [sp, #0]
 800ff48:	ec45 4b10 	vmov	d0, r4, r5
 800ff4c:	4653      	mov	r3, sl
 800ff4e:	4632      	mov	r2, r6
 800ff50:	f000 fd0e 	bl	8010970 <_dtoa_r>
 800ff54:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800ff58:	4607      	mov	r7, r0
 800ff5a:	d102      	bne.n	800ff62 <__cvt+0x66>
 800ff5c:	f019 0f01 	tst.w	r9, #1
 800ff60:	d022      	beq.n	800ffa8 <__cvt+0xac>
 800ff62:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ff66:	eb07 0906 	add.w	r9, r7, r6
 800ff6a:	d110      	bne.n	800ff8e <__cvt+0x92>
 800ff6c:	783b      	ldrb	r3, [r7, #0]
 800ff6e:	2b30      	cmp	r3, #48	; 0x30
 800ff70:	d10a      	bne.n	800ff88 <__cvt+0x8c>
 800ff72:	2200      	movs	r2, #0
 800ff74:	2300      	movs	r3, #0
 800ff76:	4620      	mov	r0, r4
 800ff78:	4629      	mov	r1, r5
 800ff7a:	f7f0 fdbd 	bl	8000af8 <__aeabi_dcmpeq>
 800ff7e:	b918      	cbnz	r0, 800ff88 <__cvt+0x8c>
 800ff80:	f1c6 0601 	rsb	r6, r6, #1
 800ff84:	f8ca 6000 	str.w	r6, [sl]
 800ff88:	f8da 3000 	ldr.w	r3, [sl]
 800ff8c:	4499      	add	r9, r3
 800ff8e:	2200      	movs	r2, #0
 800ff90:	2300      	movs	r3, #0
 800ff92:	4620      	mov	r0, r4
 800ff94:	4629      	mov	r1, r5
 800ff96:	f7f0 fdaf 	bl	8000af8 <__aeabi_dcmpeq>
 800ff9a:	b108      	cbz	r0, 800ffa0 <__cvt+0xa4>
 800ff9c:	f8cd 900c 	str.w	r9, [sp, #12]
 800ffa0:	2230      	movs	r2, #48	; 0x30
 800ffa2:	9b03      	ldr	r3, [sp, #12]
 800ffa4:	454b      	cmp	r3, r9
 800ffa6:	d307      	bcc.n	800ffb8 <__cvt+0xbc>
 800ffa8:	9b03      	ldr	r3, [sp, #12]
 800ffaa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ffac:	1bdb      	subs	r3, r3, r7
 800ffae:	4638      	mov	r0, r7
 800ffb0:	6013      	str	r3, [r2, #0]
 800ffb2:	b004      	add	sp, #16
 800ffb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ffb8:	1c59      	adds	r1, r3, #1
 800ffba:	9103      	str	r1, [sp, #12]
 800ffbc:	701a      	strb	r2, [r3, #0]
 800ffbe:	e7f0      	b.n	800ffa2 <__cvt+0xa6>

0800ffc0 <__exponent>:
 800ffc0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ffc2:	4603      	mov	r3, r0
 800ffc4:	2900      	cmp	r1, #0
 800ffc6:	bfb8      	it	lt
 800ffc8:	4249      	neglt	r1, r1
 800ffca:	f803 2b02 	strb.w	r2, [r3], #2
 800ffce:	bfb4      	ite	lt
 800ffd0:	222d      	movlt	r2, #45	; 0x2d
 800ffd2:	222b      	movge	r2, #43	; 0x2b
 800ffd4:	2909      	cmp	r1, #9
 800ffd6:	7042      	strb	r2, [r0, #1]
 800ffd8:	dd2a      	ble.n	8010030 <__exponent+0x70>
 800ffda:	f10d 0407 	add.w	r4, sp, #7
 800ffde:	46a4      	mov	ip, r4
 800ffe0:	270a      	movs	r7, #10
 800ffe2:	46a6      	mov	lr, r4
 800ffe4:	460a      	mov	r2, r1
 800ffe6:	fb91 f6f7 	sdiv	r6, r1, r7
 800ffea:	fb07 1516 	mls	r5, r7, r6, r1
 800ffee:	3530      	adds	r5, #48	; 0x30
 800fff0:	2a63      	cmp	r2, #99	; 0x63
 800fff2:	f104 34ff 	add.w	r4, r4, #4294967295
 800fff6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800fffa:	4631      	mov	r1, r6
 800fffc:	dcf1      	bgt.n	800ffe2 <__exponent+0x22>
 800fffe:	3130      	adds	r1, #48	; 0x30
 8010000:	f1ae 0502 	sub.w	r5, lr, #2
 8010004:	f804 1c01 	strb.w	r1, [r4, #-1]
 8010008:	1c44      	adds	r4, r0, #1
 801000a:	4629      	mov	r1, r5
 801000c:	4561      	cmp	r1, ip
 801000e:	d30a      	bcc.n	8010026 <__exponent+0x66>
 8010010:	f10d 0209 	add.w	r2, sp, #9
 8010014:	eba2 020e 	sub.w	r2, r2, lr
 8010018:	4565      	cmp	r5, ip
 801001a:	bf88      	it	hi
 801001c:	2200      	movhi	r2, #0
 801001e:	4413      	add	r3, r2
 8010020:	1a18      	subs	r0, r3, r0
 8010022:	b003      	add	sp, #12
 8010024:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010026:	f811 2b01 	ldrb.w	r2, [r1], #1
 801002a:	f804 2f01 	strb.w	r2, [r4, #1]!
 801002e:	e7ed      	b.n	801000c <__exponent+0x4c>
 8010030:	2330      	movs	r3, #48	; 0x30
 8010032:	3130      	adds	r1, #48	; 0x30
 8010034:	7083      	strb	r3, [r0, #2]
 8010036:	70c1      	strb	r1, [r0, #3]
 8010038:	1d03      	adds	r3, r0, #4
 801003a:	e7f1      	b.n	8010020 <__exponent+0x60>

0801003c <_printf_float>:
 801003c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010040:	ed2d 8b02 	vpush	{d8}
 8010044:	b08d      	sub	sp, #52	; 0x34
 8010046:	460c      	mov	r4, r1
 8010048:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801004c:	4616      	mov	r6, r2
 801004e:	461f      	mov	r7, r3
 8010050:	4605      	mov	r5, r0
 8010052:	f001 fa7b 	bl	801154c <_localeconv_r>
 8010056:	f8d0 a000 	ldr.w	sl, [r0]
 801005a:	4650      	mov	r0, sl
 801005c:	f7f0 f8d0 	bl	8000200 <strlen>
 8010060:	2300      	movs	r3, #0
 8010062:	930a      	str	r3, [sp, #40]	; 0x28
 8010064:	6823      	ldr	r3, [r4, #0]
 8010066:	9305      	str	r3, [sp, #20]
 8010068:	f8d8 3000 	ldr.w	r3, [r8]
 801006c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8010070:	3307      	adds	r3, #7
 8010072:	f023 0307 	bic.w	r3, r3, #7
 8010076:	f103 0208 	add.w	r2, r3, #8
 801007a:	f8c8 2000 	str.w	r2, [r8]
 801007e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010082:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8010086:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801008a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801008e:	9307      	str	r3, [sp, #28]
 8010090:	f8cd 8018 	str.w	r8, [sp, #24]
 8010094:	ee08 0a10 	vmov	s16, r0
 8010098:	4b9f      	ldr	r3, [pc, #636]	; (8010318 <_printf_float+0x2dc>)
 801009a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801009e:	f04f 32ff 	mov.w	r2, #4294967295
 80100a2:	f7f0 fd5b 	bl	8000b5c <__aeabi_dcmpun>
 80100a6:	bb88      	cbnz	r0, 801010c <_printf_float+0xd0>
 80100a8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80100ac:	4b9a      	ldr	r3, [pc, #616]	; (8010318 <_printf_float+0x2dc>)
 80100ae:	f04f 32ff 	mov.w	r2, #4294967295
 80100b2:	f7f0 fd35 	bl	8000b20 <__aeabi_dcmple>
 80100b6:	bb48      	cbnz	r0, 801010c <_printf_float+0xd0>
 80100b8:	2200      	movs	r2, #0
 80100ba:	2300      	movs	r3, #0
 80100bc:	4640      	mov	r0, r8
 80100be:	4649      	mov	r1, r9
 80100c0:	f7f0 fd24 	bl	8000b0c <__aeabi_dcmplt>
 80100c4:	b110      	cbz	r0, 80100cc <_printf_float+0x90>
 80100c6:	232d      	movs	r3, #45	; 0x2d
 80100c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80100cc:	4b93      	ldr	r3, [pc, #588]	; (801031c <_printf_float+0x2e0>)
 80100ce:	4894      	ldr	r0, [pc, #592]	; (8010320 <_printf_float+0x2e4>)
 80100d0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80100d4:	bf94      	ite	ls
 80100d6:	4698      	movls	r8, r3
 80100d8:	4680      	movhi	r8, r0
 80100da:	2303      	movs	r3, #3
 80100dc:	6123      	str	r3, [r4, #16]
 80100de:	9b05      	ldr	r3, [sp, #20]
 80100e0:	f023 0204 	bic.w	r2, r3, #4
 80100e4:	6022      	str	r2, [r4, #0]
 80100e6:	f04f 0900 	mov.w	r9, #0
 80100ea:	9700      	str	r7, [sp, #0]
 80100ec:	4633      	mov	r3, r6
 80100ee:	aa0b      	add	r2, sp, #44	; 0x2c
 80100f0:	4621      	mov	r1, r4
 80100f2:	4628      	mov	r0, r5
 80100f4:	f000 f9d8 	bl	80104a8 <_printf_common>
 80100f8:	3001      	adds	r0, #1
 80100fa:	f040 8090 	bne.w	801021e <_printf_float+0x1e2>
 80100fe:	f04f 30ff 	mov.w	r0, #4294967295
 8010102:	b00d      	add	sp, #52	; 0x34
 8010104:	ecbd 8b02 	vpop	{d8}
 8010108:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801010c:	4642      	mov	r2, r8
 801010e:	464b      	mov	r3, r9
 8010110:	4640      	mov	r0, r8
 8010112:	4649      	mov	r1, r9
 8010114:	f7f0 fd22 	bl	8000b5c <__aeabi_dcmpun>
 8010118:	b140      	cbz	r0, 801012c <_printf_float+0xf0>
 801011a:	464b      	mov	r3, r9
 801011c:	2b00      	cmp	r3, #0
 801011e:	bfbc      	itt	lt
 8010120:	232d      	movlt	r3, #45	; 0x2d
 8010122:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8010126:	487f      	ldr	r0, [pc, #508]	; (8010324 <_printf_float+0x2e8>)
 8010128:	4b7f      	ldr	r3, [pc, #508]	; (8010328 <_printf_float+0x2ec>)
 801012a:	e7d1      	b.n	80100d0 <_printf_float+0x94>
 801012c:	6863      	ldr	r3, [r4, #4]
 801012e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8010132:	9206      	str	r2, [sp, #24]
 8010134:	1c5a      	adds	r2, r3, #1
 8010136:	d13f      	bne.n	80101b8 <_printf_float+0x17c>
 8010138:	2306      	movs	r3, #6
 801013a:	6063      	str	r3, [r4, #4]
 801013c:	9b05      	ldr	r3, [sp, #20]
 801013e:	6861      	ldr	r1, [r4, #4]
 8010140:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8010144:	2300      	movs	r3, #0
 8010146:	9303      	str	r3, [sp, #12]
 8010148:	ab0a      	add	r3, sp, #40	; 0x28
 801014a:	e9cd b301 	strd	fp, r3, [sp, #4]
 801014e:	ab09      	add	r3, sp, #36	; 0x24
 8010150:	ec49 8b10 	vmov	d0, r8, r9
 8010154:	9300      	str	r3, [sp, #0]
 8010156:	6022      	str	r2, [r4, #0]
 8010158:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801015c:	4628      	mov	r0, r5
 801015e:	f7ff fecd 	bl	800fefc <__cvt>
 8010162:	9b06      	ldr	r3, [sp, #24]
 8010164:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010166:	2b47      	cmp	r3, #71	; 0x47
 8010168:	4680      	mov	r8, r0
 801016a:	d108      	bne.n	801017e <_printf_float+0x142>
 801016c:	1cc8      	adds	r0, r1, #3
 801016e:	db02      	blt.n	8010176 <_printf_float+0x13a>
 8010170:	6863      	ldr	r3, [r4, #4]
 8010172:	4299      	cmp	r1, r3
 8010174:	dd41      	ble.n	80101fa <_printf_float+0x1be>
 8010176:	f1ab 0b02 	sub.w	fp, fp, #2
 801017a:	fa5f fb8b 	uxtb.w	fp, fp
 801017e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8010182:	d820      	bhi.n	80101c6 <_printf_float+0x18a>
 8010184:	3901      	subs	r1, #1
 8010186:	465a      	mov	r2, fp
 8010188:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801018c:	9109      	str	r1, [sp, #36]	; 0x24
 801018e:	f7ff ff17 	bl	800ffc0 <__exponent>
 8010192:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010194:	1813      	adds	r3, r2, r0
 8010196:	2a01      	cmp	r2, #1
 8010198:	4681      	mov	r9, r0
 801019a:	6123      	str	r3, [r4, #16]
 801019c:	dc02      	bgt.n	80101a4 <_printf_float+0x168>
 801019e:	6822      	ldr	r2, [r4, #0]
 80101a0:	07d2      	lsls	r2, r2, #31
 80101a2:	d501      	bpl.n	80101a8 <_printf_float+0x16c>
 80101a4:	3301      	adds	r3, #1
 80101a6:	6123      	str	r3, [r4, #16]
 80101a8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80101ac:	2b00      	cmp	r3, #0
 80101ae:	d09c      	beq.n	80100ea <_printf_float+0xae>
 80101b0:	232d      	movs	r3, #45	; 0x2d
 80101b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80101b6:	e798      	b.n	80100ea <_printf_float+0xae>
 80101b8:	9a06      	ldr	r2, [sp, #24]
 80101ba:	2a47      	cmp	r2, #71	; 0x47
 80101bc:	d1be      	bne.n	801013c <_printf_float+0x100>
 80101be:	2b00      	cmp	r3, #0
 80101c0:	d1bc      	bne.n	801013c <_printf_float+0x100>
 80101c2:	2301      	movs	r3, #1
 80101c4:	e7b9      	b.n	801013a <_printf_float+0xfe>
 80101c6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80101ca:	d118      	bne.n	80101fe <_printf_float+0x1c2>
 80101cc:	2900      	cmp	r1, #0
 80101ce:	6863      	ldr	r3, [r4, #4]
 80101d0:	dd0b      	ble.n	80101ea <_printf_float+0x1ae>
 80101d2:	6121      	str	r1, [r4, #16]
 80101d4:	b913      	cbnz	r3, 80101dc <_printf_float+0x1a0>
 80101d6:	6822      	ldr	r2, [r4, #0]
 80101d8:	07d0      	lsls	r0, r2, #31
 80101da:	d502      	bpl.n	80101e2 <_printf_float+0x1a6>
 80101dc:	3301      	adds	r3, #1
 80101de:	440b      	add	r3, r1
 80101e0:	6123      	str	r3, [r4, #16]
 80101e2:	65a1      	str	r1, [r4, #88]	; 0x58
 80101e4:	f04f 0900 	mov.w	r9, #0
 80101e8:	e7de      	b.n	80101a8 <_printf_float+0x16c>
 80101ea:	b913      	cbnz	r3, 80101f2 <_printf_float+0x1b6>
 80101ec:	6822      	ldr	r2, [r4, #0]
 80101ee:	07d2      	lsls	r2, r2, #31
 80101f0:	d501      	bpl.n	80101f6 <_printf_float+0x1ba>
 80101f2:	3302      	adds	r3, #2
 80101f4:	e7f4      	b.n	80101e0 <_printf_float+0x1a4>
 80101f6:	2301      	movs	r3, #1
 80101f8:	e7f2      	b.n	80101e0 <_printf_float+0x1a4>
 80101fa:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80101fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010200:	4299      	cmp	r1, r3
 8010202:	db05      	blt.n	8010210 <_printf_float+0x1d4>
 8010204:	6823      	ldr	r3, [r4, #0]
 8010206:	6121      	str	r1, [r4, #16]
 8010208:	07d8      	lsls	r0, r3, #31
 801020a:	d5ea      	bpl.n	80101e2 <_printf_float+0x1a6>
 801020c:	1c4b      	adds	r3, r1, #1
 801020e:	e7e7      	b.n	80101e0 <_printf_float+0x1a4>
 8010210:	2900      	cmp	r1, #0
 8010212:	bfd4      	ite	le
 8010214:	f1c1 0202 	rsble	r2, r1, #2
 8010218:	2201      	movgt	r2, #1
 801021a:	4413      	add	r3, r2
 801021c:	e7e0      	b.n	80101e0 <_printf_float+0x1a4>
 801021e:	6823      	ldr	r3, [r4, #0]
 8010220:	055a      	lsls	r2, r3, #21
 8010222:	d407      	bmi.n	8010234 <_printf_float+0x1f8>
 8010224:	6923      	ldr	r3, [r4, #16]
 8010226:	4642      	mov	r2, r8
 8010228:	4631      	mov	r1, r6
 801022a:	4628      	mov	r0, r5
 801022c:	47b8      	blx	r7
 801022e:	3001      	adds	r0, #1
 8010230:	d12c      	bne.n	801028c <_printf_float+0x250>
 8010232:	e764      	b.n	80100fe <_printf_float+0xc2>
 8010234:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8010238:	f240 80e0 	bls.w	80103fc <_printf_float+0x3c0>
 801023c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010240:	2200      	movs	r2, #0
 8010242:	2300      	movs	r3, #0
 8010244:	f7f0 fc58 	bl	8000af8 <__aeabi_dcmpeq>
 8010248:	2800      	cmp	r0, #0
 801024a:	d034      	beq.n	80102b6 <_printf_float+0x27a>
 801024c:	4a37      	ldr	r2, [pc, #220]	; (801032c <_printf_float+0x2f0>)
 801024e:	2301      	movs	r3, #1
 8010250:	4631      	mov	r1, r6
 8010252:	4628      	mov	r0, r5
 8010254:	47b8      	blx	r7
 8010256:	3001      	adds	r0, #1
 8010258:	f43f af51 	beq.w	80100fe <_printf_float+0xc2>
 801025c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010260:	429a      	cmp	r2, r3
 8010262:	db02      	blt.n	801026a <_printf_float+0x22e>
 8010264:	6823      	ldr	r3, [r4, #0]
 8010266:	07d8      	lsls	r0, r3, #31
 8010268:	d510      	bpl.n	801028c <_printf_float+0x250>
 801026a:	ee18 3a10 	vmov	r3, s16
 801026e:	4652      	mov	r2, sl
 8010270:	4631      	mov	r1, r6
 8010272:	4628      	mov	r0, r5
 8010274:	47b8      	blx	r7
 8010276:	3001      	adds	r0, #1
 8010278:	f43f af41 	beq.w	80100fe <_printf_float+0xc2>
 801027c:	f04f 0800 	mov.w	r8, #0
 8010280:	f104 091a 	add.w	r9, r4, #26
 8010284:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010286:	3b01      	subs	r3, #1
 8010288:	4543      	cmp	r3, r8
 801028a:	dc09      	bgt.n	80102a0 <_printf_float+0x264>
 801028c:	6823      	ldr	r3, [r4, #0]
 801028e:	079b      	lsls	r3, r3, #30
 8010290:	f100 8105 	bmi.w	801049e <_printf_float+0x462>
 8010294:	68e0      	ldr	r0, [r4, #12]
 8010296:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010298:	4298      	cmp	r0, r3
 801029a:	bfb8      	it	lt
 801029c:	4618      	movlt	r0, r3
 801029e:	e730      	b.n	8010102 <_printf_float+0xc6>
 80102a0:	2301      	movs	r3, #1
 80102a2:	464a      	mov	r2, r9
 80102a4:	4631      	mov	r1, r6
 80102a6:	4628      	mov	r0, r5
 80102a8:	47b8      	blx	r7
 80102aa:	3001      	adds	r0, #1
 80102ac:	f43f af27 	beq.w	80100fe <_printf_float+0xc2>
 80102b0:	f108 0801 	add.w	r8, r8, #1
 80102b4:	e7e6      	b.n	8010284 <_printf_float+0x248>
 80102b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80102b8:	2b00      	cmp	r3, #0
 80102ba:	dc39      	bgt.n	8010330 <_printf_float+0x2f4>
 80102bc:	4a1b      	ldr	r2, [pc, #108]	; (801032c <_printf_float+0x2f0>)
 80102be:	2301      	movs	r3, #1
 80102c0:	4631      	mov	r1, r6
 80102c2:	4628      	mov	r0, r5
 80102c4:	47b8      	blx	r7
 80102c6:	3001      	adds	r0, #1
 80102c8:	f43f af19 	beq.w	80100fe <_printf_float+0xc2>
 80102cc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80102d0:	4313      	orrs	r3, r2
 80102d2:	d102      	bne.n	80102da <_printf_float+0x29e>
 80102d4:	6823      	ldr	r3, [r4, #0]
 80102d6:	07d9      	lsls	r1, r3, #31
 80102d8:	d5d8      	bpl.n	801028c <_printf_float+0x250>
 80102da:	ee18 3a10 	vmov	r3, s16
 80102de:	4652      	mov	r2, sl
 80102e0:	4631      	mov	r1, r6
 80102e2:	4628      	mov	r0, r5
 80102e4:	47b8      	blx	r7
 80102e6:	3001      	adds	r0, #1
 80102e8:	f43f af09 	beq.w	80100fe <_printf_float+0xc2>
 80102ec:	f04f 0900 	mov.w	r9, #0
 80102f0:	f104 0a1a 	add.w	sl, r4, #26
 80102f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80102f6:	425b      	negs	r3, r3
 80102f8:	454b      	cmp	r3, r9
 80102fa:	dc01      	bgt.n	8010300 <_printf_float+0x2c4>
 80102fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80102fe:	e792      	b.n	8010226 <_printf_float+0x1ea>
 8010300:	2301      	movs	r3, #1
 8010302:	4652      	mov	r2, sl
 8010304:	4631      	mov	r1, r6
 8010306:	4628      	mov	r0, r5
 8010308:	47b8      	blx	r7
 801030a:	3001      	adds	r0, #1
 801030c:	f43f aef7 	beq.w	80100fe <_printf_float+0xc2>
 8010310:	f109 0901 	add.w	r9, r9, #1
 8010314:	e7ee      	b.n	80102f4 <_printf_float+0x2b8>
 8010316:	bf00      	nop
 8010318:	7fefffff 	.word	0x7fefffff
 801031c:	08014850 	.word	0x08014850
 8010320:	08014854 	.word	0x08014854
 8010324:	0801485c 	.word	0x0801485c
 8010328:	08014858 	.word	0x08014858
 801032c:	08014860 	.word	0x08014860
 8010330:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010332:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010334:	429a      	cmp	r2, r3
 8010336:	bfa8      	it	ge
 8010338:	461a      	movge	r2, r3
 801033a:	2a00      	cmp	r2, #0
 801033c:	4691      	mov	r9, r2
 801033e:	dc37      	bgt.n	80103b0 <_printf_float+0x374>
 8010340:	f04f 0b00 	mov.w	fp, #0
 8010344:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010348:	f104 021a 	add.w	r2, r4, #26
 801034c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801034e:	9305      	str	r3, [sp, #20]
 8010350:	eba3 0309 	sub.w	r3, r3, r9
 8010354:	455b      	cmp	r3, fp
 8010356:	dc33      	bgt.n	80103c0 <_printf_float+0x384>
 8010358:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801035c:	429a      	cmp	r2, r3
 801035e:	db3b      	blt.n	80103d8 <_printf_float+0x39c>
 8010360:	6823      	ldr	r3, [r4, #0]
 8010362:	07da      	lsls	r2, r3, #31
 8010364:	d438      	bmi.n	80103d8 <_printf_float+0x39c>
 8010366:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010368:	9a05      	ldr	r2, [sp, #20]
 801036a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801036c:	1a9a      	subs	r2, r3, r2
 801036e:	eba3 0901 	sub.w	r9, r3, r1
 8010372:	4591      	cmp	r9, r2
 8010374:	bfa8      	it	ge
 8010376:	4691      	movge	r9, r2
 8010378:	f1b9 0f00 	cmp.w	r9, #0
 801037c:	dc35      	bgt.n	80103ea <_printf_float+0x3ae>
 801037e:	f04f 0800 	mov.w	r8, #0
 8010382:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010386:	f104 0a1a 	add.w	sl, r4, #26
 801038a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801038e:	1a9b      	subs	r3, r3, r2
 8010390:	eba3 0309 	sub.w	r3, r3, r9
 8010394:	4543      	cmp	r3, r8
 8010396:	f77f af79 	ble.w	801028c <_printf_float+0x250>
 801039a:	2301      	movs	r3, #1
 801039c:	4652      	mov	r2, sl
 801039e:	4631      	mov	r1, r6
 80103a0:	4628      	mov	r0, r5
 80103a2:	47b8      	blx	r7
 80103a4:	3001      	adds	r0, #1
 80103a6:	f43f aeaa 	beq.w	80100fe <_printf_float+0xc2>
 80103aa:	f108 0801 	add.w	r8, r8, #1
 80103ae:	e7ec      	b.n	801038a <_printf_float+0x34e>
 80103b0:	4613      	mov	r3, r2
 80103b2:	4631      	mov	r1, r6
 80103b4:	4642      	mov	r2, r8
 80103b6:	4628      	mov	r0, r5
 80103b8:	47b8      	blx	r7
 80103ba:	3001      	adds	r0, #1
 80103bc:	d1c0      	bne.n	8010340 <_printf_float+0x304>
 80103be:	e69e      	b.n	80100fe <_printf_float+0xc2>
 80103c0:	2301      	movs	r3, #1
 80103c2:	4631      	mov	r1, r6
 80103c4:	4628      	mov	r0, r5
 80103c6:	9205      	str	r2, [sp, #20]
 80103c8:	47b8      	blx	r7
 80103ca:	3001      	adds	r0, #1
 80103cc:	f43f ae97 	beq.w	80100fe <_printf_float+0xc2>
 80103d0:	9a05      	ldr	r2, [sp, #20]
 80103d2:	f10b 0b01 	add.w	fp, fp, #1
 80103d6:	e7b9      	b.n	801034c <_printf_float+0x310>
 80103d8:	ee18 3a10 	vmov	r3, s16
 80103dc:	4652      	mov	r2, sl
 80103de:	4631      	mov	r1, r6
 80103e0:	4628      	mov	r0, r5
 80103e2:	47b8      	blx	r7
 80103e4:	3001      	adds	r0, #1
 80103e6:	d1be      	bne.n	8010366 <_printf_float+0x32a>
 80103e8:	e689      	b.n	80100fe <_printf_float+0xc2>
 80103ea:	9a05      	ldr	r2, [sp, #20]
 80103ec:	464b      	mov	r3, r9
 80103ee:	4442      	add	r2, r8
 80103f0:	4631      	mov	r1, r6
 80103f2:	4628      	mov	r0, r5
 80103f4:	47b8      	blx	r7
 80103f6:	3001      	adds	r0, #1
 80103f8:	d1c1      	bne.n	801037e <_printf_float+0x342>
 80103fa:	e680      	b.n	80100fe <_printf_float+0xc2>
 80103fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80103fe:	2a01      	cmp	r2, #1
 8010400:	dc01      	bgt.n	8010406 <_printf_float+0x3ca>
 8010402:	07db      	lsls	r3, r3, #31
 8010404:	d538      	bpl.n	8010478 <_printf_float+0x43c>
 8010406:	2301      	movs	r3, #1
 8010408:	4642      	mov	r2, r8
 801040a:	4631      	mov	r1, r6
 801040c:	4628      	mov	r0, r5
 801040e:	47b8      	blx	r7
 8010410:	3001      	adds	r0, #1
 8010412:	f43f ae74 	beq.w	80100fe <_printf_float+0xc2>
 8010416:	ee18 3a10 	vmov	r3, s16
 801041a:	4652      	mov	r2, sl
 801041c:	4631      	mov	r1, r6
 801041e:	4628      	mov	r0, r5
 8010420:	47b8      	blx	r7
 8010422:	3001      	adds	r0, #1
 8010424:	f43f ae6b 	beq.w	80100fe <_printf_float+0xc2>
 8010428:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801042c:	2200      	movs	r2, #0
 801042e:	2300      	movs	r3, #0
 8010430:	f7f0 fb62 	bl	8000af8 <__aeabi_dcmpeq>
 8010434:	b9d8      	cbnz	r0, 801046e <_printf_float+0x432>
 8010436:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010438:	f108 0201 	add.w	r2, r8, #1
 801043c:	3b01      	subs	r3, #1
 801043e:	4631      	mov	r1, r6
 8010440:	4628      	mov	r0, r5
 8010442:	47b8      	blx	r7
 8010444:	3001      	adds	r0, #1
 8010446:	d10e      	bne.n	8010466 <_printf_float+0x42a>
 8010448:	e659      	b.n	80100fe <_printf_float+0xc2>
 801044a:	2301      	movs	r3, #1
 801044c:	4652      	mov	r2, sl
 801044e:	4631      	mov	r1, r6
 8010450:	4628      	mov	r0, r5
 8010452:	47b8      	blx	r7
 8010454:	3001      	adds	r0, #1
 8010456:	f43f ae52 	beq.w	80100fe <_printf_float+0xc2>
 801045a:	f108 0801 	add.w	r8, r8, #1
 801045e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010460:	3b01      	subs	r3, #1
 8010462:	4543      	cmp	r3, r8
 8010464:	dcf1      	bgt.n	801044a <_printf_float+0x40e>
 8010466:	464b      	mov	r3, r9
 8010468:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801046c:	e6dc      	b.n	8010228 <_printf_float+0x1ec>
 801046e:	f04f 0800 	mov.w	r8, #0
 8010472:	f104 0a1a 	add.w	sl, r4, #26
 8010476:	e7f2      	b.n	801045e <_printf_float+0x422>
 8010478:	2301      	movs	r3, #1
 801047a:	4642      	mov	r2, r8
 801047c:	e7df      	b.n	801043e <_printf_float+0x402>
 801047e:	2301      	movs	r3, #1
 8010480:	464a      	mov	r2, r9
 8010482:	4631      	mov	r1, r6
 8010484:	4628      	mov	r0, r5
 8010486:	47b8      	blx	r7
 8010488:	3001      	adds	r0, #1
 801048a:	f43f ae38 	beq.w	80100fe <_printf_float+0xc2>
 801048e:	f108 0801 	add.w	r8, r8, #1
 8010492:	68e3      	ldr	r3, [r4, #12]
 8010494:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010496:	1a5b      	subs	r3, r3, r1
 8010498:	4543      	cmp	r3, r8
 801049a:	dcf0      	bgt.n	801047e <_printf_float+0x442>
 801049c:	e6fa      	b.n	8010294 <_printf_float+0x258>
 801049e:	f04f 0800 	mov.w	r8, #0
 80104a2:	f104 0919 	add.w	r9, r4, #25
 80104a6:	e7f4      	b.n	8010492 <_printf_float+0x456>

080104a8 <_printf_common>:
 80104a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80104ac:	4616      	mov	r6, r2
 80104ae:	4699      	mov	r9, r3
 80104b0:	688a      	ldr	r2, [r1, #8]
 80104b2:	690b      	ldr	r3, [r1, #16]
 80104b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80104b8:	4293      	cmp	r3, r2
 80104ba:	bfb8      	it	lt
 80104bc:	4613      	movlt	r3, r2
 80104be:	6033      	str	r3, [r6, #0]
 80104c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80104c4:	4607      	mov	r7, r0
 80104c6:	460c      	mov	r4, r1
 80104c8:	b10a      	cbz	r2, 80104ce <_printf_common+0x26>
 80104ca:	3301      	adds	r3, #1
 80104cc:	6033      	str	r3, [r6, #0]
 80104ce:	6823      	ldr	r3, [r4, #0]
 80104d0:	0699      	lsls	r1, r3, #26
 80104d2:	bf42      	ittt	mi
 80104d4:	6833      	ldrmi	r3, [r6, #0]
 80104d6:	3302      	addmi	r3, #2
 80104d8:	6033      	strmi	r3, [r6, #0]
 80104da:	6825      	ldr	r5, [r4, #0]
 80104dc:	f015 0506 	ands.w	r5, r5, #6
 80104e0:	d106      	bne.n	80104f0 <_printf_common+0x48>
 80104e2:	f104 0a19 	add.w	sl, r4, #25
 80104e6:	68e3      	ldr	r3, [r4, #12]
 80104e8:	6832      	ldr	r2, [r6, #0]
 80104ea:	1a9b      	subs	r3, r3, r2
 80104ec:	42ab      	cmp	r3, r5
 80104ee:	dc26      	bgt.n	801053e <_printf_common+0x96>
 80104f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80104f4:	1e13      	subs	r3, r2, #0
 80104f6:	6822      	ldr	r2, [r4, #0]
 80104f8:	bf18      	it	ne
 80104fa:	2301      	movne	r3, #1
 80104fc:	0692      	lsls	r2, r2, #26
 80104fe:	d42b      	bmi.n	8010558 <_printf_common+0xb0>
 8010500:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010504:	4649      	mov	r1, r9
 8010506:	4638      	mov	r0, r7
 8010508:	47c0      	blx	r8
 801050a:	3001      	adds	r0, #1
 801050c:	d01e      	beq.n	801054c <_printf_common+0xa4>
 801050e:	6823      	ldr	r3, [r4, #0]
 8010510:	68e5      	ldr	r5, [r4, #12]
 8010512:	6832      	ldr	r2, [r6, #0]
 8010514:	f003 0306 	and.w	r3, r3, #6
 8010518:	2b04      	cmp	r3, #4
 801051a:	bf08      	it	eq
 801051c:	1aad      	subeq	r5, r5, r2
 801051e:	68a3      	ldr	r3, [r4, #8]
 8010520:	6922      	ldr	r2, [r4, #16]
 8010522:	bf0c      	ite	eq
 8010524:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010528:	2500      	movne	r5, #0
 801052a:	4293      	cmp	r3, r2
 801052c:	bfc4      	itt	gt
 801052e:	1a9b      	subgt	r3, r3, r2
 8010530:	18ed      	addgt	r5, r5, r3
 8010532:	2600      	movs	r6, #0
 8010534:	341a      	adds	r4, #26
 8010536:	42b5      	cmp	r5, r6
 8010538:	d11a      	bne.n	8010570 <_printf_common+0xc8>
 801053a:	2000      	movs	r0, #0
 801053c:	e008      	b.n	8010550 <_printf_common+0xa8>
 801053e:	2301      	movs	r3, #1
 8010540:	4652      	mov	r2, sl
 8010542:	4649      	mov	r1, r9
 8010544:	4638      	mov	r0, r7
 8010546:	47c0      	blx	r8
 8010548:	3001      	adds	r0, #1
 801054a:	d103      	bne.n	8010554 <_printf_common+0xac>
 801054c:	f04f 30ff 	mov.w	r0, #4294967295
 8010550:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010554:	3501      	adds	r5, #1
 8010556:	e7c6      	b.n	80104e6 <_printf_common+0x3e>
 8010558:	18e1      	adds	r1, r4, r3
 801055a:	1c5a      	adds	r2, r3, #1
 801055c:	2030      	movs	r0, #48	; 0x30
 801055e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010562:	4422      	add	r2, r4
 8010564:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010568:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801056c:	3302      	adds	r3, #2
 801056e:	e7c7      	b.n	8010500 <_printf_common+0x58>
 8010570:	2301      	movs	r3, #1
 8010572:	4622      	mov	r2, r4
 8010574:	4649      	mov	r1, r9
 8010576:	4638      	mov	r0, r7
 8010578:	47c0      	blx	r8
 801057a:	3001      	adds	r0, #1
 801057c:	d0e6      	beq.n	801054c <_printf_common+0xa4>
 801057e:	3601      	adds	r6, #1
 8010580:	e7d9      	b.n	8010536 <_printf_common+0x8e>
	...

08010584 <_printf_i>:
 8010584:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010588:	7e0f      	ldrb	r7, [r1, #24]
 801058a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801058c:	2f78      	cmp	r7, #120	; 0x78
 801058e:	4691      	mov	r9, r2
 8010590:	4680      	mov	r8, r0
 8010592:	460c      	mov	r4, r1
 8010594:	469a      	mov	sl, r3
 8010596:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801059a:	d807      	bhi.n	80105ac <_printf_i+0x28>
 801059c:	2f62      	cmp	r7, #98	; 0x62
 801059e:	d80a      	bhi.n	80105b6 <_printf_i+0x32>
 80105a0:	2f00      	cmp	r7, #0
 80105a2:	f000 80d8 	beq.w	8010756 <_printf_i+0x1d2>
 80105a6:	2f58      	cmp	r7, #88	; 0x58
 80105a8:	f000 80a3 	beq.w	80106f2 <_printf_i+0x16e>
 80105ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80105b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80105b4:	e03a      	b.n	801062c <_printf_i+0xa8>
 80105b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80105ba:	2b15      	cmp	r3, #21
 80105bc:	d8f6      	bhi.n	80105ac <_printf_i+0x28>
 80105be:	a101      	add	r1, pc, #4	; (adr r1, 80105c4 <_printf_i+0x40>)
 80105c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80105c4:	0801061d 	.word	0x0801061d
 80105c8:	08010631 	.word	0x08010631
 80105cc:	080105ad 	.word	0x080105ad
 80105d0:	080105ad 	.word	0x080105ad
 80105d4:	080105ad 	.word	0x080105ad
 80105d8:	080105ad 	.word	0x080105ad
 80105dc:	08010631 	.word	0x08010631
 80105e0:	080105ad 	.word	0x080105ad
 80105e4:	080105ad 	.word	0x080105ad
 80105e8:	080105ad 	.word	0x080105ad
 80105ec:	080105ad 	.word	0x080105ad
 80105f0:	0801073d 	.word	0x0801073d
 80105f4:	08010661 	.word	0x08010661
 80105f8:	0801071f 	.word	0x0801071f
 80105fc:	080105ad 	.word	0x080105ad
 8010600:	080105ad 	.word	0x080105ad
 8010604:	0801075f 	.word	0x0801075f
 8010608:	080105ad 	.word	0x080105ad
 801060c:	08010661 	.word	0x08010661
 8010610:	080105ad 	.word	0x080105ad
 8010614:	080105ad 	.word	0x080105ad
 8010618:	08010727 	.word	0x08010727
 801061c:	682b      	ldr	r3, [r5, #0]
 801061e:	1d1a      	adds	r2, r3, #4
 8010620:	681b      	ldr	r3, [r3, #0]
 8010622:	602a      	str	r2, [r5, #0]
 8010624:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010628:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801062c:	2301      	movs	r3, #1
 801062e:	e0a3      	b.n	8010778 <_printf_i+0x1f4>
 8010630:	6820      	ldr	r0, [r4, #0]
 8010632:	6829      	ldr	r1, [r5, #0]
 8010634:	0606      	lsls	r6, r0, #24
 8010636:	f101 0304 	add.w	r3, r1, #4
 801063a:	d50a      	bpl.n	8010652 <_printf_i+0xce>
 801063c:	680e      	ldr	r6, [r1, #0]
 801063e:	602b      	str	r3, [r5, #0]
 8010640:	2e00      	cmp	r6, #0
 8010642:	da03      	bge.n	801064c <_printf_i+0xc8>
 8010644:	232d      	movs	r3, #45	; 0x2d
 8010646:	4276      	negs	r6, r6
 8010648:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801064c:	485e      	ldr	r0, [pc, #376]	; (80107c8 <_printf_i+0x244>)
 801064e:	230a      	movs	r3, #10
 8010650:	e019      	b.n	8010686 <_printf_i+0x102>
 8010652:	680e      	ldr	r6, [r1, #0]
 8010654:	602b      	str	r3, [r5, #0]
 8010656:	f010 0f40 	tst.w	r0, #64	; 0x40
 801065a:	bf18      	it	ne
 801065c:	b236      	sxthne	r6, r6
 801065e:	e7ef      	b.n	8010640 <_printf_i+0xbc>
 8010660:	682b      	ldr	r3, [r5, #0]
 8010662:	6820      	ldr	r0, [r4, #0]
 8010664:	1d19      	adds	r1, r3, #4
 8010666:	6029      	str	r1, [r5, #0]
 8010668:	0601      	lsls	r1, r0, #24
 801066a:	d501      	bpl.n	8010670 <_printf_i+0xec>
 801066c:	681e      	ldr	r6, [r3, #0]
 801066e:	e002      	b.n	8010676 <_printf_i+0xf2>
 8010670:	0646      	lsls	r6, r0, #25
 8010672:	d5fb      	bpl.n	801066c <_printf_i+0xe8>
 8010674:	881e      	ldrh	r6, [r3, #0]
 8010676:	4854      	ldr	r0, [pc, #336]	; (80107c8 <_printf_i+0x244>)
 8010678:	2f6f      	cmp	r7, #111	; 0x6f
 801067a:	bf0c      	ite	eq
 801067c:	2308      	moveq	r3, #8
 801067e:	230a      	movne	r3, #10
 8010680:	2100      	movs	r1, #0
 8010682:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010686:	6865      	ldr	r5, [r4, #4]
 8010688:	60a5      	str	r5, [r4, #8]
 801068a:	2d00      	cmp	r5, #0
 801068c:	bfa2      	ittt	ge
 801068e:	6821      	ldrge	r1, [r4, #0]
 8010690:	f021 0104 	bicge.w	r1, r1, #4
 8010694:	6021      	strge	r1, [r4, #0]
 8010696:	b90e      	cbnz	r6, 801069c <_printf_i+0x118>
 8010698:	2d00      	cmp	r5, #0
 801069a:	d04d      	beq.n	8010738 <_printf_i+0x1b4>
 801069c:	4615      	mov	r5, r2
 801069e:	fbb6 f1f3 	udiv	r1, r6, r3
 80106a2:	fb03 6711 	mls	r7, r3, r1, r6
 80106a6:	5dc7      	ldrb	r7, [r0, r7]
 80106a8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80106ac:	4637      	mov	r7, r6
 80106ae:	42bb      	cmp	r3, r7
 80106b0:	460e      	mov	r6, r1
 80106b2:	d9f4      	bls.n	801069e <_printf_i+0x11a>
 80106b4:	2b08      	cmp	r3, #8
 80106b6:	d10b      	bne.n	80106d0 <_printf_i+0x14c>
 80106b8:	6823      	ldr	r3, [r4, #0]
 80106ba:	07de      	lsls	r6, r3, #31
 80106bc:	d508      	bpl.n	80106d0 <_printf_i+0x14c>
 80106be:	6923      	ldr	r3, [r4, #16]
 80106c0:	6861      	ldr	r1, [r4, #4]
 80106c2:	4299      	cmp	r1, r3
 80106c4:	bfde      	ittt	le
 80106c6:	2330      	movle	r3, #48	; 0x30
 80106c8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80106cc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80106d0:	1b52      	subs	r2, r2, r5
 80106d2:	6122      	str	r2, [r4, #16]
 80106d4:	f8cd a000 	str.w	sl, [sp]
 80106d8:	464b      	mov	r3, r9
 80106da:	aa03      	add	r2, sp, #12
 80106dc:	4621      	mov	r1, r4
 80106de:	4640      	mov	r0, r8
 80106e0:	f7ff fee2 	bl	80104a8 <_printf_common>
 80106e4:	3001      	adds	r0, #1
 80106e6:	d14c      	bne.n	8010782 <_printf_i+0x1fe>
 80106e8:	f04f 30ff 	mov.w	r0, #4294967295
 80106ec:	b004      	add	sp, #16
 80106ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80106f2:	4835      	ldr	r0, [pc, #212]	; (80107c8 <_printf_i+0x244>)
 80106f4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80106f8:	6829      	ldr	r1, [r5, #0]
 80106fa:	6823      	ldr	r3, [r4, #0]
 80106fc:	f851 6b04 	ldr.w	r6, [r1], #4
 8010700:	6029      	str	r1, [r5, #0]
 8010702:	061d      	lsls	r5, r3, #24
 8010704:	d514      	bpl.n	8010730 <_printf_i+0x1ac>
 8010706:	07df      	lsls	r7, r3, #31
 8010708:	bf44      	itt	mi
 801070a:	f043 0320 	orrmi.w	r3, r3, #32
 801070e:	6023      	strmi	r3, [r4, #0]
 8010710:	b91e      	cbnz	r6, 801071a <_printf_i+0x196>
 8010712:	6823      	ldr	r3, [r4, #0]
 8010714:	f023 0320 	bic.w	r3, r3, #32
 8010718:	6023      	str	r3, [r4, #0]
 801071a:	2310      	movs	r3, #16
 801071c:	e7b0      	b.n	8010680 <_printf_i+0xfc>
 801071e:	6823      	ldr	r3, [r4, #0]
 8010720:	f043 0320 	orr.w	r3, r3, #32
 8010724:	6023      	str	r3, [r4, #0]
 8010726:	2378      	movs	r3, #120	; 0x78
 8010728:	4828      	ldr	r0, [pc, #160]	; (80107cc <_printf_i+0x248>)
 801072a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801072e:	e7e3      	b.n	80106f8 <_printf_i+0x174>
 8010730:	0659      	lsls	r1, r3, #25
 8010732:	bf48      	it	mi
 8010734:	b2b6      	uxthmi	r6, r6
 8010736:	e7e6      	b.n	8010706 <_printf_i+0x182>
 8010738:	4615      	mov	r5, r2
 801073a:	e7bb      	b.n	80106b4 <_printf_i+0x130>
 801073c:	682b      	ldr	r3, [r5, #0]
 801073e:	6826      	ldr	r6, [r4, #0]
 8010740:	6961      	ldr	r1, [r4, #20]
 8010742:	1d18      	adds	r0, r3, #4
 8010744:	6028      	str	r0, [r5, #0]
 8010746:	0635      	lsls	r5, r6, #24
 8010748:	681b      	ldr	r3, [r3, #0]
 801074a:	d501      	bpl.n	8010750 <_printf_i+0x1cc>
 801074c:	6019      	str	r1, [r3, #0]
 801074e:	e002      	b.n	8010756 <_printf_i+0x1d2>
 8010750:	0670      	lsls	r0, r6, #25
 8010752:	d5fb      	bpl.n	801074c <_printf_i+0x1c8>
 8010754:	8019      	strh	r1, [r3, #0]
 8010756:	2300      	movs	r3, #0
 8010758:	6123      	str	r3, [r4, #16]
 801075a:	4615      	mov	r5, r2
 801075c:	e7ba      	b.n	80106d4 <_printf_i+0x150>
 801075e:	682b      	ldr	r3, [r5, #0]
 8010760:	1d1a      	adds	r2, r3, #4
 8010762:	602a      	str	r2, [r5, #0]
 8010764:	681d      	ldr	r5, [r3, #0]
 8010766:	6862      	ldr	r2, [r4, #4]
 8010768:	2100      	movs	r1, #0
 801076a:	4628      	mov	r0, r5
 801076c:	f7ef fd50 	bl	8000210 <memchr>
 8010770:	b108      	cbz	r0, 8010776 <_printf_i+0x1f2>
 8010772:	1b40      	subs	r0, r0, r5
 8010774:	6060      	str	r0, [r4, #4]
 8010776:	6863      	ldr	r3, [r4, #4]
 8010778:	6123      	str	r3, [r4, #16]
 801077a:	2300      	movs	r3, #0
 801077c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010780:	e7a8      	b.n	80106d4 <_printf_i+0x150>
 8010782:	6923      	ldr	r3, [r4, #16]
 8010784:	462a      	mov	r2, r5
 8010786:	4649      	mov	r1, r9
 8010788:	4640      	mov	r0, r8
 801078a:	47d0      	blx	sl
 801078c:	3001      	adds	r0, #1
 801078e:	d0ab      	beq.n	80106e8 <_printf_i+0x164>
 8010790:	6823      	ldr	r3, [r4, #0]
 8010792:	079b      	lsls	r3, r3, #30
 8010794:	d413      	bmi.n	80107be <_printf_i+0x23a>
 8010796:	68e0      	ldr	r0, [r4, #12]
 8010798:	9b03      	ldr	r3, [sp, #12]
 801079a:	4298      	cmp	r0, r3
 801079c:	bfb8      	it	lt
 801079e:	4618      	movlt	r0, r3
 80107a0:	e7a4      	b.n	80106ec <_printf_i+0x168>
 80107a2:	2301      	movs	r3, #1
 80107a4:	4632      	mov	r2, r6
 80107a6:	4649      	mov	r1, r9
 80107a8:	4640      	mov	r0, r8
 80107aa:	47d0      	blx	sl
 80107ac:	3001      	adds	r0, #1
 80107ae:	d09b      	beq.n	80106e8 <_printf_i+0x164>
 80107b0:	3501      	adds	r5, #1
 80107b2:	68e3      	ldr	r3, [r4, #12]
 80107b4:	9903      	ldr	r1, [sp, #12]
 80107b6:	1a5b      	subs	r3, r3, r1
 80107b8:	42ab      	cmp	r3, r5
 80107ba:	dcf2      	bgt.n	80107a2 <_printf_i+0x21e>
 80107bc:	e7eb      	b.n	8010796 <_printf_i+0x212>
 80107be:	2500      	movs	r5, #0
 80107c0:	f104 0619 	add.w	r6, r4, #25
 80107c4:	e7f5      	b.n	80107b2 <_printf_i+0x22e>
 80107c6:	bf00      	nop
 80107c8:	08014862 	.word	0x08014862
 80107cc:	08014873 	.word	0x08014873

080107d0 <siprintf>:
 80107d0:	b40e      	push	{r1, r2, r3}
 80107d2:	b500      	push	{lr}
 80107d4:	b09c      	sub	sp, #112	; 0x70
 80107d6:	ab1d      	add	r3, sp, #116	; 0x74
 80107d8:	9002      	str	r0, [sp, #8]
 80107da:	9006      	str	r0, [sp, #24]
 80107dc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80107e0:	4809      	ldr	r0, [pc, #36]	; (8010808 <siprintf+0x38>)
 80107e2:	9107      	str	r1, [sp, #28]
 80107e4:	9104      	str	r1, [sp, #16]
 80107e6:	4909      	ldr	r1, [pc, #36]	; (801080c <siprintf+0x3c>)
 80107e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80107ec:	9105      	str	r1, [sp, #20]
 80107ee:	6800      	ldr	r0, [r0, #0]
 80107f0:	9301      	str	r3, [sp, #4]
 80107f2:	a902      	add	r1, sp, #8
 80107f4:	f001 fb8c 	bl	8011f10 <_svfiprintf_r>
 80107f8:	9b02      	ldr	r3, [sp, #8]
 80107fa:	2200      	movs	r2, #0
 80107fc:	701a      	strb	r2, [r3, #0]
 80107fe:	b01c      	add	sp, #112	; 0x70
 8010800:	f85d eb04 	ldr.w	lr, [sp], #4
 8010804:	b003      	add	sp, #12
 8010806:	4770      	bx	lr
 8010808:	20000020 	.word	0x20000020
 801080c:	ffff0208 	.word	0xffff0208

08010810 <strcpy>:
 8010810:	4603      	mov	r3, r0
 8010812:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010816:	f803 2b01 	strb.w	r2, [r3], #1
 801081a:	2a00      	cmp	r2, #0
 801081c:	d1f9      	bne.n	8010812 <strcpy+0x2>
 801081e:	4770      	bx	lr

08010820 <strpbrk>:
 8010820:	b570      	push	{r4, r5, r6, lr}
 8010822:	7803      	ldrb	r3, [r0, #0]
 8010824:	b1a3      	cbz	r3, 8010850 <strpbrk+0x30>
 8010826:	4603      	mov	r3, r0
 8010828:	460c      	mov	r4, r1
 801082a:	4618      	mov	r0, r3
 801082c:	f813 5b01 	ldrb.w	r5, [r3], #1
 8010830:	b14d      	cbz	r5, 8010846 <strpbrk+0x26>
 8010832:	460a      	mov	r2, r1
 8010834:	e001      	b.n	801083a <strpbrk+0x1a>
 8010836:	42ae      	cmp	r6, r5
 8010838:	d009      	beq.n	801084e <strpbrk+0x2e>
 801083a:	4614      	mov	r4, r2
 801083c:	f812 6b01 	ldrb.w	r6, [r2], #1
 8010840:	2e00      	cmp	r6, #0
 8010842:	d1f8      	bne.n	8010836 <strpbrk+0x16>
 8010844:	e7f1      	b.n	801082a <strpbrk+0xa>
 8010846:	7823      	ldrb	r3, [r4, #0]
 8010848:	2b00      	cmp	r3, #0
 801084a:	bf08      	it	eq
 801084c:	2000      	moveq	r0, #0
 801084e:	bd70      	pop	{r4, r5, r6, pc}
 8010850:	4618      	mov	r0, r3
 8010852:	e7fc      	b.n	801084e <strpbrk+0x2e>

08010854 <quorem>:
 8010854:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010858:	6903      	ldr	r3, [r0, #16]
 801085a:	690c      	ldr	r4, [r1, #16]
 801085c:	42a3      	cmp	r3, r4
 801085e:	4607      	mov	r7, r0
 8010860:	f2c0 8081 	blt.w	8010966 <quorem+0x112>
 8010864:	3c01      	subs	r4, #1
 8010866:	f101 0814 	add.w	r8, r1, #20
 801086a:	f100 0514 	add.w	r5, r0, #20
 801086e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010872:	9301      	str	r3, [sp, #4]
 8010874:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8010878:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801087c:	3301      	adds	r3, #1
 801087e:	429a      	cmp	r2, r3
 8010880:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8010884:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8010888:	fbb2 f6f3 	udiv	r6, r2, r3
 801088c:	d331      	bcc.n	80108f2 <quorem+0x9e>
 801088e:	f04f 0e00 	mov.w	lr, #0
 8010892:	4640      	mov	r0, r8
 8010894:	46ac      	mov	ip, r5
 8010896:	46f2      	mov	sl, lr
 8010898:	f850 2b04 	ldr.w	r2, [r0], #4
 801089c:	b293      	uxth	r3, r2
 801089e:	fb06 e303 	mla	r3, r6, r3, lr
 80108a2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80108a6:	b29b      	uxth	r3, r3
 80108a8:	ebaa 0303 	sub.w	r3, sl, r3
 80108ac:	f8dc a000 	ldr.w	sl, [ip]
 80108b0:	0c12      	lsrs	r2, r2, #16
 80108b2:	fa13 f38a 	uxtah	r3, r3, sl
 80108b6:	fb06 e202 	mla	r2, r6, r2, lr
 80108ba:	9300      	str	r3, [sp, #0]
 80108bc:	9b00      	ldr	r3, [sp, #0]
 80108be:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80108c2:	b292      	uxth	r2, r2
 80108c4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80108c8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80108cc:	f8bd 3000 	ldrh.w	r3, [sp]
 80108d0:	4581      	cmp	r9, r0
 80108d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80108d6:	f84c 3b04 	str.w	r3, [ip], #4
 80108da:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80108de:	d2db      	bcs.n	8010898 <quorem+0x44>
 80108e0:	f855 300b 	ldr.w	r3, [r5, fp]
 80108e4:	b92b      	cbnz	r3, 80108f2 <quorem+0x9e>
 80108e6:	9b01      	ldr	r3, [sp, #4]
 80108e8:	3b04      	subs	r3, #4
 80108ea:	429d      	cmp	r5, r3
 80108ec:	461a      	mov	r2, r3
 80108ee:	d32e      	bcc.n	801094e <quorem+0xfa>
 80108f0:	613c      	str	r4, [r7, #16]
 80108f2:	4638      	mov	r0, r7
 80108f4:	f001 f8b8 	bl	8011a68 <__mcmp>
 80108f8:	2800      	cmp	r0, #0
 80108fa:	db24      	blt.n	8010946 <quorem+0xf2>
 80108fc:	3601      	adds	r6, #1
 80108fe:	4628      	mov	r0, r5
 8010900:	f04f 0c00 	mov.w	ip, #0
 8010904:	f858 2b04 	ldr.w	r2, [r8], #4
 8010908:	f8d0 e000 	ldr.w	lr, [r0]
 801090c:	b293      	uxth	r3, r2
 801090e:	ebac 0303 	sub.w	r3, ip, r3
 8010912:	0c12      	lsrs	r2, r2, #16
 8010914:	fa13 f38e 	uxtah	r3, r3, lr
 8010918:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801091c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010920:	b29b      	uxth	r3, r3
 8010922:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010926:	45c1      	cmp	r9, r8
 8010928:	f840 3b04 	str.w	r3, [r0], #4
 801092c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8010930:	d2e8      	bcs.n	8010904 <quorem+0xb0>
 8010932:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010936:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801093a:	b922      	cbnz	r2, 8010946 <quorem+0xf2>
 801093c:	3b04      	subs	r3, #4
 801093e:	429d      	cmp	r5, r3
 8010940:	461a      	mov	r2, r3
 8010942:	d30a      	bcc.n	801095a <quorem+0x106>
 8010944:	613c      	str	r4, [r7, #16]
 8010946:	4630      	mov	r0, r6
 8010948:	b003      	add	sp, #12
 801094a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801094e:	6812      	ldr	r2, [r2, #0]
 8010950:	3b04      	subs	r3, #4
 8010952:	2a00      	cmp	r2, #0
 8010954:	d1cc      	bne.n	80108f0 <quorem+0x9c>
 8010956:	3c01      	subs	r4, #1
 8010958:	e7c7      	b.n	80108ea <quorem+0x96>
 801095a:	6812      	ldr	r2, [r2, #0]
 801095c:	3b04      	subs	r3, #4
 801095e:	2a00      	cmp	r2, #0
 8010960:	d1f0      	bne.n	8010944 <quorem+0xf0>
 8010962:	3c01      	subs	r4, #1
 8010964:	e7eb      	b.n	801093e <quorem+0xea>
 8010966:	2000      	movs	r0, #0
 8010968:	e7ee      	b.n	8010948 <quorem+0xf4>
 801096a:	0000      	movs	r0, r0
 801096c:	0000      	movs	r0, r0
	...

08010970 <_dtoa_r>:
 8010970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010974:	ed2d 8b04 	vpush	{d8-d9}
 8010978:	ec57 6b10 	vmov	r6, r7, d0
 801097c:	b093      	sub	sp, #76	; 0x4c
 801097e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8010980:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8010984:	9106      	str	r1, [sp, #24]
 8010986:	ee10 aa10 	vmov	sl, s0
 801098a:	4604      	mov	r4, r0
 801098c:	9209      	str	r2, [sp, #36]	; 0x24
 801098e:	930c      	str	r3, [sp, #48]	; 0x30
 8010990:	46bb      	mov	fp, r7
 8010992:	b975      	cbnz	r5, 80109b2 <_dtoa_r+0x42>
 8010994:	2010      	movs	r0, #16
 8010996:	f000 fddd 	bl	8011554 <malloc>
 801099a:	4602      	mov	r2, r0
 801099c:	6260      	str	r0, [r4, #36]	; 0x24
 801099e:	b920      	cbnz	r0, 80109aa <_dtoa_r+0x3a>
 80109a0:	4ba7      	ldr	r3, [pc, #668]	; (8010c40 <_dtoa_r+0x2d0>)
 80109a2:	21ea      	movs	r1, #234	; 0xea
 80109a4:	48a7      	ldr	r0, [pc, #668]	; (8010c44 <_dtoa_r+0x2d4>)
 80109a6:	f001 fbc3 	bl	8012130 <__assert_func>
 80109aa:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80109ae:	6005      	str	r5, [r0, #0]
 80109b0:	60c5      	str	r5, [r0, #12]
 80109b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80109b4:	6819      	ldr	r1, [r3, #0]
 80109b6:	b151      	cbz	r1, 80109ce <_dtoa_r+0x5e>
 80109b8:	685a      	ldr	r2, [r3, #4]
 80109ba:	604a      	str	r2, [r1, #4]
 80109bc:	2301      	movs	r3, #1
 80109be:	4093      	lsls	r3, r2
 80109c0:	608b      	str	r3, [r1, #8]
 80109c2:	4620      	mov	r0, r4
 80109c4:	f000 fe0e 	bl	80115e4 <_Bfree>
 80109c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80109ca:	2200      	movs	r2, #0
 80109cc:	601a      	str	r2, [r3, #0]
 80109ce:	1e3b      	subs	r3, r7, #0
 80109d0:	bfaa      	itet	ge
 80109d2:	2300      	movge	r3, #0
 80109d4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80109d8:	f8c8 3000 	strge.w	r3, [r8]
 80109dc:	4b9a      	ldr	r3, [pc, #616]	; (8010c48 <_dtoa_r+0x2d8>)
 80109de:	bfbc      	itt	lt
 80109e0:	2201      	movlt	r2, #1
 80109e2:	f8c8 2000 	strlt.w	r2, [r8]
 80109e6:	ea33 030b 	bics.w	r3, r3, fp
 80109ea:	d11b      	bne.n	8010a24 <_dtoa_r+0xb4>
 80109ec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80109ee:	f242 730f 	movw	r3, #9999	; 0x270f
 80109f2:	6013      	str	r3, [r2, #0]
 80109f4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80109f8:	4333      	orrs	r3, r6
 80109fa:	f000 8592 	beq.w	8011522 <_dtoa_r+0xbb2>
 80109fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010a00:	b963      	cbnz	r3, 8010a1c <_dtoa_r+0xac>
 8010a02:	4b92      	ldr	r3, [pc, #584]	; (8010c4c <_dtoa_r+0x2dc>)
 8010a04:	e022      	b.n	8010a4c <_dtoa_r+0xdc>
 8010a06:	4b92      	ldr	r3, [pc, #584]	; (8010c50 <_dtoa_r+0x2e0>)
 8010a08:	9301      	str	r3, [sp, #4]
 8010a0a:	3308      	adds	r3, #8
 8010a0c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8010a0e:	6013      	str	r3, [r2, #0]
 8010a10:	9801      	ldr	r0, [sp, #4]
 8010a12:	b013      	add	sp, #76	; 0x4c
 8010a14:	ecbd 8b04 	vpop	{d8-d9}
 8010a18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a1c:	4b8b      	ldr	r3, [pc, #556]	; (8010c4c <_dtoa_r+0x2dc>)
 8010a1e:	9301      	str	r3, [sp, #4]
 8010a20:	3303      	adds	r3, #3
 8010a22:	e7f3      	b.n	8010a0c <_dtoa_r+0x9c>
 8010a24:	2200      	movs	r2, #0
 8010a26:	2300      	movs	r3, #0
 8010a28:	4650      	mov	r0, sl
 8010a2a:	4659      	mov	r1, fp
 8010a2c:	f7f0 f864 	bl	8000af8 <__aeabi_dcmpeq>
 8010a30:	ec4b ab19 	vmov	d9, sl, fp
 8010a34:	4680      	mov	r8, r0
 8010a36:	b158      	cbz	r0, 8010a50 <_dtoa_r+0xe0>
 8010a38:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010a3a:	2301      	movs	r3, #1
 8010a3c:	6013      	str	r3, [r2, #0]
 8010a3e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010a40:	2b00      	cmp	r3, #0
 8010a42:	f000 856b 	beq.w	801151c <_dtoa_r+0xbac>
 8010a46:	4883      	ldr	r0, [pc, #524]	; (8010c54 <_dtoa_r+0x2e4>)
 8010a48:	6018      	str	r0, [r3, #0]
 8010a4a:	1e43      	subs	r3, r0, #1
 8010a4c:	9301      	str	r3, [sp, #4]
 8010a4e:	e7df      	b.n	8010a10 <_dtoa_r+0xa0>
 8010a50:	ec4b ab10 	vmov	d0, sl, fp
 8010a54:	aa10      	add	r2, sp, #64	; 0x40
 8010a56:	a911      	add	r1, sp, #68	; 0x44
 8010a58:	4620      	mov	r0, r4
 8010a5a:	f001 f8ab 	bl	8011bb4 <__d2b>
 8010a5e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8010a62:	ee08 0a10 	vmov	s16, r0
 8010a66:	2d00      	cmp	r5, #0
 8010a68:	f000 8084 	beq.w	8010b74 <_dtoa_r+0x204>
 8010a6c:	ee19 3a90 	vmov	r3, s19
 8010a70:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010a74:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8010a78:	4656      	mov	r6, sl
 8010a7a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8010a7e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8010a82:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8010a86:	4b74      	ldr	r3, [pc, #464]	; (8010c58 <_dtoa_r+0x2e8>)
 8010a88:	2200      	movs	r2, #0
 8010a8a:	4630      	mov	r0, r6
 8010a8c:	4639      	mov	r1, r7
 8010a8e:	f7ef fc13 	bl	80002b8 <__aeabi_dsub>
 8010a92:	a365      	add	r3, pc, #404	; (adr r3, 8010c28 <_dtoa_r+0x2b8>)
 8010a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a98:	f7ef fdc6 	bl	8000628 <__aeabi_dmul>
 8010a9c:	a364      	add	r3, pc, #400	; (adr r3, 8010c30 <_dtoa_r+0x2c0>)
 8010a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010aa2:	f7ef fc0b 	bl	80002bc <__adddf3>
 8010aa6:	4606      	mov	r6, r0
 8010aa8:	4628      	mov	r0, r5
 8010aaa:	460f      	mov	r7, r1
 8010aac:	f7ef fd52 	bl	8000554 <__aeabi_i2d>
 8010ab0:	a361      	add	r3, pc, #388	; (adr r3, 8010c38 <_dtoa_r+0x2c8>)
 8010ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ab6:	f7ef fdb7 	bl	8000628 <__aeabi_dmul>
 8010aba:	4602      	mov	r2, r0
 8010abc:	460b      	mov	r3, r1
 8010abe:	4630      	mov	r0, r6
 8010ac0:	4639      	mov	r1, r7
 8010ac2:	f7ef fbfb 	bl	80002bc <__adddf3>
 8010ac6:	4606      	mov	r6, r0
 8010ac8:	460f      	mov	r7, r1
 8010aca:	f7f0 f85d 	bl	8000b88 <__aeabi_d2iz>
 8010ace:	2200      	movs	r2, #0
 8010ad0:	9000      	str	r0, [sp, #0]
 8010ad2:	2300      	movs	r3, #0
 8010ad4:	4630      	mov	r0, r6
 8010ad6:	4639      	mov	r1, r7
 8010ad8:	f7f0 f818 	bl	8000b0c <__aeabi_dcmplt>
 8010adc:	b150      	cbz	r0, 8010af4 <_dtoa_r+0x184>
 8010ade:	9800      	ldr	r0, [sp, #0]
 8010ae0:	f7ef fd38 	bl	8000554 <__aeabi_i2d>
 8010ae4:	4632      	mov	r2, r6
 8010ae6:	463b      	mov	r3, r7
 8010ae8:	f7f0 f806 	bl	8000af8 <__aeabi_dcmpeq>
 8010aec:	b910      	cbnz	r0, 8010af4 <_dtoa_r+0x184>
 8010aee:	9b00      	ldr	r3, [sp, #0]
 8010af0:	3b01      	subs	r3, #1
 8010af2:	9300      	str	r3, [sp, #0]
 8010af4:	9b00      	ldr	r3, [sp, #0]
 8010af6:	2b16      	cmp	r3, #22
 8010af8:	d85a      	bhi.n	8010bb0 <_dtoa_r+0x240>
 8010afa:	9a00      	ldr	r2, [sp, #0]
 8010afc:	4b57      	ldr	r3, [pc, #348]	; (8010c5c <_dtoa_r+0x2ec>)
 8010afe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b06:	ec51 0b19 	vmov	r0, r1, d9
 8010b0a:	f7ef ffff 	bl	8000b0c <__aeabi_dcmplt>
 8010b0e:	2800      	cmp	r0, #0
 8010b10:	d050      	beq.n	8010bb4 <_dtoa_r+0x244>
 8010b12:	9b00      	ldr	r3, [sp, #0]
 8010b14:	3b01      	subs	r3, #1
 8010b16:	9300      	str	r3, [sp, #0]
 8010b18:	2300      	movs	r3, #0
 8010b1a:	930b      	str	r3, [sp, #44]	; 0x2c
 8010b1c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010b1e:	1b5d      	subs	r5, r3, r5
 8010b20:	1e6b      	subs	r3, r5, #1
 8010b22:	9305      	str	r3, [sp, #20]
 8010b24:	bf45      	ittet	mi
 8010b26:	f1c5 0301 	rsbmi	r3, r5, #1
 8010b2a:	9304      	strmi	r3, [sp, #16]
 8010b2c:	2300      	movpl	r3, #0
 8010b2e:	2300      	movmi	r3, #0
 8010b30:	bf4c      	ite	mi
 8010b32:	9305      	strmi	r3, [sp, #20]
 8010b34:	9304      	strpl	r3, [sp, #16]
 8010b36:	9b00      	ldr	r3, [sp, #0]
 8010b38:	2b00      	cmp	r3, #0
 8010b3a:	db3d      	blt.n	8010bb8 <_dtoa_r+0x248>
 8010b3c:	9b05      	ldr	r3, [sp, #20]
 8010b3e:	9a00      	ldr	r2, [sp, #0]
 8010b40:	920a      	str	r2, [sp, #40]	; 0x28
 8010b42:	4413      	add	r3, r2
 8010b44:	9305      	str	r3, [sp, #20]
 8010b46:	2300      	movs	r3, #0
 8010b48:	9307      	str	r3, [sp, #28]
 8010b4a:	9b06      	ldr	r3, [sp, #24]
 8010b4c:	2b09      	cmp	r3, #9
 8010b4e:	f200 8089 	bhi.w	8010c64 <_dtoa_r+0x2f4>
 8010b52:	2b05      	cmp	r3, #5
 8010b54:	bfc4      	itt	gt
 8010b56:	3b04      	subgt	r3, #4
 8010b58:	9306      	strgt	r3, [sp, #24]
 8010b5a:	9b06      	ldr	r3, [sp, #24]
 8010b5c:	f1a3 0302 	sub.w	r3, r3, #2
 8010b60:	bfcc      	ite	gt
 8010b62:	2500      	movgt	r5, #0
 8010b64:	2501      	movle	r5, #1
 8010b66:	2b03      	cmp	r3, #3
 8010b68:	f200 8087 	bhi.w	8010c7a <_dtoa_r+0x30a>
 8010b6c:	e8df f003 	tbb	[pc, r3]
 8010b70:	59383a2d 	.word	0x59383a2d
 8010b74:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8010b78:	441d      	add	r5, r3
 8010b7a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8010b7e:	2b20      	cmp	r3, #32
 8010b80:	bfc1      	itttt	gt
 8010b82:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8010b86:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8010b8a:	fa0b f303 	lslgt.w	r3, fp, r3
 8010b8e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8010b92:	bfda      	itte	le
 8010b94:	f1c3 0320 	rsble	r3, r3, #32
 8010b98:	fa06 f003 	lslle.w	r0, r6, r3
 8010b9c:	4318      	orrgt	r0, r3
 8010b9e:	f7ef fcc9 	bl	8000534 <__aeabi_ui2d>
 8010ba2:	2301      	movs	r3, #1
 8010ba4:	4606      	mov	r6, r0
 8010ba6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8010baa:	3d01      	subs	r5, #1
 8010bac:	930e      	str	r3, [sp, #56]	; 0x38
 8010bae:	e76a      	b.n	8010a86 <_dtoa_r+0x116>
 8010bb0:	2301      	movs	r3, #1
 8010bb2:	e7b2      	b.n	8010b1a <_dtoa_r+0x1aa>
 8010bb4:	900b      	str	r0, [sp, #44]	; 0x2c
 8010bb6:	e7b1      	b.n	8010b1c <_dtoa_r+0x1ac>
 8010bb8:	9b04      	ldr	r3, [sp, #16]
 8010bba:	9a00      	ldr	r2, [sp, #0]
 8010bbc:	1a9b      	subs	r3, r3, r2
 8010bbe:	9304      	str	r3, [sp, #16]
 8010bc0:	4253      	negs	r3, r2
 8010bc2:	9307      	str	r3, [sp, #28]
 8010bc4:	2300      	movs	r3, #0
 8010bc6:	930a      	str	r3, [sp, #40]	; 0x28
 8010bc8:	e7bf      	b.n	8010b4a <_dtoa_r+0x1da>
 8010bca:	2300      	movs	r3, #0
 8010bcc:	9308      	str	r3, [sp, #32]
 8010bce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010bd0:	2b00      	cmp	r3, #0
 8010bd2:	dc55      	bgt.n	8010c80 <_dtoa_r+0x310>
 8010bd4:	2301      	movs	r3, #1
 8010bd6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8010bda:	461a      	mov	r2, r3
 8010bdc:	9209      	str	r2, [sp, #36]	; 0x24
 8010bde:	e00c      	b.n	8010bfa <_dtoa_r+0x28a>
 8010be0:	2301      	movs	r3, #1
 8010be2:	e7f3      	b.n	8010bcc <_dtoa_r+0x25c>
 8010be4:	2300      	movs	r3, #0
 8010be6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010be8:	9308      	str	r3, [sp, #32]
 8010bea:	9b00      	ldr	r3, [sp, #0]
 8010bec:	4413      	add	r3, r2
 8010bee:	9302      	str	r3, [sp, #8]
 8010bf0:	3301      	adds	r3, #1
 8010bf2:	2b01      	cmp	r3, #1
 8010bf4:	9303      	str	r3, [sp, #12]
 8010bf6:	bfb8      	it	lt
 8010bf8:	2301      	movlt	r3, #1
 8010bfa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8010bfc:	2200      	movs	r2, #0
 8010bfe:	6042      	str	r2, [r0, #4]
 8010c00:	2204      	movs	r2, #4
 8010c02:	f102 0614 	add.w	r6, r2, #20
 8010c06:	429e      	cmp	r6, r3
 8010c08:	6841      	ldr	r1, [r0, #4]
 8010c0a:	d93d      	bls.n	8010c88 <_dtoa_r+0x318>
 8010c0c:	4620      	mov	r0, r4
 8010c0e:	f000 fca9 	bl	8011564 <_Balloc>
 8010c12:	9001      	str	r0, [sp, #4]
 8010c14:	2800      	cmp	r0, #0
 8010c16:	d13b      	bne.n	8010c90 <_dtoa_r+0x320>
 8010c18:	4b11      	ldr	r3, [pc, #68]	; (8010c60 <_dtoa_r+0x2f0>)
 8010c1a:	4602      	mov	r2, r0
 8010c1c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8010c20:	e6c0      	b.n	80109a4 <_dtoa_r+0x34>
 8010c22:	2301      	movs	r3, #1
 8010c24:	e7df      	b.n	8010be6 <_dtoa_r+0x276>
 8010c26:	bf00      	nop
 8010c28:	636f4361 	.word	0x636f4361
 8010c2c:	3fd287a7 	.word	0x3fd287a7
 8010c30:	8b60c8b3 	.word	0x8b60c8b3
 8010c34:	3fc68a28 	.word	0x3fc68a28
 8010c38:	509f79fb 	.word	0x509f79fb
 8010c3c:	3fd34413 	.word	0x3fd34413
 8010c40:	08014891 	.word	0x08014891
 8010c44:	080148a8 	.word	0x080148a8
 8010c48:	7ff00000 	.word	0x7ff00000
 8010c4c:	0801488d 	.word	0x0801488d
 8010c50:	08014884 	.word	0x08014884
 8010c54:	08014861 	.word	0x08014861
 8010c58:	3ff80000 	.word	0x3ff80000
 8010c5c:	08014998 	.word	0x08014998
 8010c60:	08014903 	.word	0x08014903
 8010c64:	2501      	movs	r5, #1
 8010c66:	2300      	movs	r3, #0
 8010c68:	9306      	str	r3, [sp, #24]
 8010c6a:	9508      	str	r5, [sp, #32]
 8010c6c:	f04f 33ff 	mov.w	r3, #4294967295
 8010c70:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8010c74:	2200      	movs	r2, #0
 8010c76:	2312      	movs	r3, #18
 8010c78:	e7b0      	b.n	8010bdc <_dtoa_r+0x26c>
 8010c7a:	2301      	movs	r3, #1
 8010c7c:	9308      	str	r3, [sp, #32]
 8010c7e:	e7f5      	b.n	8010c6c <_dtoa_r+0x2fc>
 8010c80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010c82:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8010c86:	e7b8      	b.n	8010bfa <_dtoa_r+0x28a>
 8010c88:	3101      	adds	r1, #1
 8010c8a:	6041      	str	r1, [r0, #4]
 8010c8c:	0052      	lsls	r2, r2, #1
 8010c8e:	e7b8      	b.n	8010c02 <_dtoa_r+0x292>
 8010c90:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010c92:	9a01      	ldr	r2, [sp, #4]
 8010c94:	601a      	str	r2, [r3, #0]
 8010c96:	9b03      	ldr	r3, [sp, #12]
 8010c98:	2b0e      	cmp	r3, #14
 8010c9a:	f200 809d 	bhi.w	8010dd8 <_dtoa_r+0x468>
 8010c9e:	2d00      	cmp	r5, #0
 8010ca0:	f000 809a 	beq.w	8010dd8 <_dtoa_r+0x468>
 8010ca4:	9b00      	ldr	r3, [sp, #0]
 8010ca6:	2b00      	cmp	r3, #0
 8010ca8:	dd32      	ble.n	8010d10 <_dtoa_r+0x3a0>
 8010caa:	4ab7      	ldr	r2, [pc, #732]	; (8010f88 <_dtoa_r+0x618>)
 8010cac:	f003 030f 	and.w	r3, r3, #15
 8010cb0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8010cb4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010cb8:	9b00      	ldr	r3, [sp, #0]
 8010cba:	05d8      	lsls	r0, r3, #23
 8010cbc:	ea4f 1723 	mov.w	r7, r3, asr #4
 8010cc0:	d516      	bpl.n	8010cf0 <_dtoa_r+0x380>
 8010cc2:	4bb2      	ldr	r3, [pc, #712]	; (8010f8c <_dtoa_r+0x61c>)
 8010cc4:	ec51 0b19 	vmov	r0, r1, d9
 8010cc8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010ccc:	f7ef fdd6 	bl	800087c <__aeabi_ddiv>
 8010cd0:	f007 070f 	and.w	r7, r7, #15
 8010cd4:	4682      	mov	sl, r0
 8010cd6:	468b      	mov	fp, r1
 8010cd8:	2503      	movs	r5, #3
 8010cda:	4eac      	ldr	r6, [pc, #688]	; (8010f8c <_dtoa_r+0x61c>)
 8010cdc:	b957      	cbnz	r7, 8010cf4 <_dtoa_r+0x384>
 8010cde:	4642      	mov	r2, r8
 8010ce0:	464b      	mov	r3, r9
 8010ce2:	4650      	mov	r0, sl
 8010ce4:	4659      	mov	r1, fp
 8010ce6:	f7ef fdc9 	bl	800087c <__aeabi_ddiv>
 8010cea:	4682      	mov	sl, r0
 8010cec:	468b      	mov	fp, r1
 8010cee:	e028      	b.n	8010d42 <_dtoa_r+0x3d2>
 8010cf0:	2502      	movs	r5, #2
 8010cf2:	e7f2      	b.n	8010cda <_dtoa_r+0x36a>
 8010cf4:	07f9      	lsls	r1, r7, #31
 8010cf6:	d508      	bpl.n	8010d0a <_dtoa_r+0x39a>
 8010cf8:	4640      	mov	r0, r8
 8010cfa:	4649      	mov	r1, r9
 8010cfc:	e9d6 2300 	ldrd	r2, r3, [r6]
 8010d00:	f7ef fc92 	bl	8000628 <__aeabi_dmul>
 8010d04:	3501      	adds	r5, #1
 8010d06:	4680      	mov	r8, r0
 8010d08:	4689      	mov	r9, r1
 8010d0a:	107f      	asrs	r7, r7, #1
 8010d0c:	3608      	adds	r6, #8
 8010d0e:	e7e5      	b.n	8010cdc <_dtoa_r+0x36c>
 8010d10:	f000 809b 	beq.w	8010e4a <_dtoa_r+0x4da>
 8010d14:	9b00      	ldr	r3, [sp, #0]
 8010d16:	4f9d      	ldr	r7, [pc, #628]	; (8010f8c <_dtoa_r+0x61c>)
 8010d18:	425e      	negs	r6, r3
 8010d1a:	4b9b      	ldr	r3, [pc, #620]	; (8010f88 <_dtoa_r+0x618>)
 8010d1c:	f006 020f 	and.w	r2, r6, #15
 8010d20:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d28:	ec51 0b19 	vmov	r0, r1, d9
 8010d2c:	f7ef fc7c 	bl	8000628 <__aeabi_dmul>
 8010d30:	1136      	asrs	r6, r6, #4
 8010d32:	4682      	mov	sl, r0
 8010d34:	468b      	mov	fp, r1
 8010d36:	2300      	movs	r3, #0
 8010d38:	2502      	movs	r5, #2
 8010d3a:	2e00      	cmp	r6, #0
 8010d3c:	d17a      	bne.n	8010e34 <_dtoa_r+0x4c4>
 8010d3e:	2b00      	cmp	r3, #0
 8010d40:	d1d3      	bne.n	8010cea <_dtoa_r+0x37a>
 8010d42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010d44:	2b00      	cmp	r3, #0
 8010d46:	f000 8082 	beq.w	8010e4e <_dtoa_r+0x4de>
 8010d4a:	4b91      	ldr	r3, [pc, #580]	; (8010f90 <_dtoa_r+0x620>)
 8010d4c:	2200      	movs	r2, #0
 8010d4e:	4650      	mov	r0, sl
 8010d50:	4659      	mov	r1, fp
 8010d52:	f7ef fedb 	bl	8000b0c <__aeabi_dcmplt>
 8010d56:	2800      	cmp	r0, #0
 8010d58:	d079      	beq.n	8010e4e <_dtoa_r+0x4de>
 8010d5a:	9b03      	ldr	r3, [sp, #12]
 8010d5c:	2b00      	cmp	r3, #0
 8010d5e:	d076      	beq.n	8010e4e <_dtoa_r+0x4de>
 8010d60:	9b02      	ldr	r3, [sp, #8]
 8010d62:	2b00      	cmp	r3, #0
 8010d64:	dd36      	ble.n	8010dd4 <_dtoa_r+0x464>
 8010d66:	9b00      	ldr	r3, [sp, #0]
 8010d68:	4650      	mov	r0, sl
 8010d6a:	4659      	mov	r1, fp
 8010d6c:	1e5f      	subs	r7, r3, #1
 8010d6e:	2200      	movs	r2, #0
 8010d70:	4b88      	ldr	r3, [pc, #544]	; (8010f94 <_dtoa_r+0x624>)
 8010d72:	f7ef fc59 	bl	8000628 <__aeabi_dmul>
 8010d76:	9e02      	ldr	r6, [sp, #8]
 8010d78:	4682      	mov	sl, r0
 8010d7a:	468b      	mov	fp, r1
 8010d7c:	3501      	adds	r5, #1
 8010d7e:	4628      	mov	r0, r5
 8010d80:	f7ef fbe8 	bl	8000554 <__aeabi_i2d>
 8010d84:	4652      	mov	r2, sl
 8010d86:	465b      	mov	r3, fp
 8010d88:	f7ef fc4e 	bl	8000628 <__aeabi_dmul>
 8010d8c:	4b82      	ldr	r3, [pc, #520]	; (8010f98 <_dtoa_r+0x628>)
 8010d8e:	2200      	movs	r2, #0
 8010d90:	f7ef fa94 	bl	80002bc <__adddf3>
 8010d94:	46d0      	mov	r8, sl
 8010d96:	46d9      	mov	r9, fp
 8010d98:	4682      	mov	sl, r0
 8010d9a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8010d9e:	2e00      	cmp	r6, #0
 8010da0:	d158      	bne.n	8010e54 <_dtoa_r+0x4e4>
 8010da2:	4b7e      	ldr	r3, [pc, #504]	; (8010f9c <_dtoa_r+0x62c>)
 8010da4:	2200      	movs	r2, #0
 8010da6:	4640      	mov	r0, r8
 8010da8:	4649      	mov	r1, r9
 8010daa:	f7ef fa85 	bl	80002b8 <__aeabi_dsub>
 8010dae:	4652      	mov	r2, sl
 8010db0:	465b      	mov	r3, fp
 8010db2:	4680      	mov	r8, r0
 8010db4:	4689      	mov	r9, r1
 8010db6:	f7ef fec7 	bl	8000b48 <__aeabi_dcmpgt>
 8010dba:	2800      	cmp	r0, #0
 8010dbc:	f040 8295 	bne.w	80112ea <_dtoa_r+0x97a>
 8010dc0:	4652      	mov	r2, sl
 8010dc2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8010dc6:	4640      	mov	r0, r8
 8010dc8:	4649      	mov	r1, r9
 8010dca:	f7ef fe9f 	bl	8000b0c <__aeabi_dcmplt>
 8010dce:	2800      	cmp	r0, #0
 8010dd0:	f040 8289 	bne.w	80112e6 <_dtoa_r+0x976>
 8010dd4:	ec5b ab19 	vmov	sl, fp, d9
 8010dd8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010dda:	2b00      	cmp	r3, #0
 8010ddc:	f2c0 8148 	blt.w	8011070 <_dtoa_r+0x700>
 8010de0:	9a00      	ldr	r2, [sp, #0]
 8010de2:	2a0e      	cmp	r2, #14
 8010de4:	f300 8144 	bgt.w	8011070 <_dtoa_r+0x700>
 8010de8:	4b67      	ldr	r3, [pc, #412]	; (8010f88 <_dtoa_r+0x618>)
 8010dea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010dee:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010df2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010df4:	2b00      	cmp	r3, #0
 8010df6:	f280 80d5 	bge.w	8010fa4 <_dtoa_r+0x634>
 8010dfa:	9b03      	ldr	r3, [sp, #12]
 8010dfc:	2b00      	cmp	r3, #0
 8010dfe:	f300 80d1 	bgt.w	8010fa4 <_dtoa_r+0x634>
 8010e02:	f040 826f 	bne.w	80112e4 <_dtoa_r+0x974>
 8010e06:	4b65      	ldr	r3, [pc, #404]	; (8010f9c <_dtoa_r+0x62c>)
 8010e08:	2200      	movs	r2, #0
 8010e0a:	4640      	mov	r0, r8
 8010e0c:	4649      	mov	r1, r9
 8010e0e:	f7ef fc0b 	bl	8000628 <__aeabi_dmul>
 8010e12:	4652      	mov	r2, sl
 8010e14:	465b      	mov	r3, fp
 8010e16:	f7ef fe8d 	bl	8000b34 <__aeabi_dcmpge>
 8010e1a:	9e03      	ldr	r6, [sp, #12]
 8010e1c:	4637      	mov	r7, r6
 8010e1e:	2800      	cmp	r0, #0
 8010e20:	f040 8245 	bne.w	80112ae <_dtoa_r+0x93e>
 8010e24:	9d01      	ldr	r5, [sp, #4]
 8010e26:	2331      	movs	r3, #49	; 0x31
 8010e28:	f805 3b01 	strb.w	r3, [r5], #1
 8010e2c:	9b00      	ldr	r3, [sp, #0]
 8010e2e:	3301      	adds	r3, #1
 8010e30:	9300      	str	r3, [sp, #0]
 8010e32:	e240      	b.n	80112b6 <_dtoa_r+0x946>
 8010e34:	07f2      	lsls	r2, r6, #31
 8010e36:	d505      	bpl.n	8010e44 <_dtoa_r+0x4d4>
 8010e38:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010e3c:	f7ef fbf4 	bl	8000628 <__aeabi_dmul>
 8010e40:	3501      	adds	r5, #1
 8010e42:	2301      	movs	r3, #1
 8010e44:	1076      	asrs	r6, r6, #1
 8010e46:	3708      	adds	r7, #8
 8010e48:	e777      	b.n	8010d3a <_dtoa_r+0x3ca>
 8010e4a:	2502      	movs	r5, #2
 8010e4c:	e779      	b.n	8010d42 <_dtoa_r+0x3d2>
 8010e4e:	9f00      	ldr	r7, [sp, #0]
 8010e50:	9e03      	ldr	r6, [sp, #12]
 8010e52:	e794      	b.n	8010d7e <_dtoa_r+0x40e>
 8010e54:	9901      	ldr	r1, [sp, #4]
 8010e56:	4b4c      	ldr	r3, [pc, #304]	; (8010f88 <_dtoa_r+0x618>)
 8010e58:	4431      	add	r1, r6
 8010e5a:	910d      	str	r1, [sp, #52]	; 0x34
 8010e5c:	9908      	ldr	r1, [sp, #32]
 8010e5e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8010e62:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8010e66:	2900      	cmp	r1, #0
 8010e68:	d043      	beq.n	8010ef2 <_dtoa_r+0x582>
 8010e6a:	494d      	ldr	r1, [pc, #308]	; (8010fa0 <_dtoa_r+0x630>)
 8010e6c:	2000      	movs	r0, #0
 8010e6e:	f7ef fd05 	bl	800087c <__aeabi_ddiv>
 8010e72:	4652      	mov	r2, sl
 8010e74:	465b      	mov	r3, fp
 8010e76:	f7ef fa1f 	bl	80002b8 <__aeabi_dsub>
 8010e7a:	9d01      	ldr	r5, [sp, #4]
 8010e7c:	4682      	mov	sl, r0
 8010e7e:	468b      	mov	fp, r1
 8010e80:	4649      	mov	r1, r9
 8010e82:	4640      	mov	r0, r8
 8010e84:	f7ef fe80 	bl	8000b88 <__aeabi_d2iz>
 8010e88:	4606      	mov	r6, r0
 8010e8a:	f7ef fb63 	bl	8000554 <__aeabi_i2d>
 8010e8e:	4602      	mov	r2, r0
 8010e90:	460b      	mov	r3, r1
 8010e92:	4640      	mov	r0, r8
 8010e94:	4649      	mov	r1, r9
 8010e96:	f7ef fa0f 	bl	80002b8 <__aeabi_dsub>
 8010e9a:	3630      	adds	r6, #48	; 0x30
 8010e9c:	f805 6b01 	strb.w	r6, [r5], #1
 8010ea0:	4652      	mov	r2, sl
 8010ea2:	465b      	mov	r3, fp
 8010ea4:	4680      	mov	r8, r0
 8010ea6:	4689      	mov	r9, r1
 8010ea8:	f7ef fe30 	bl	8000b0c <__aeabi_dcmplt>
 8010eac:	2800      	cmp	r0, #0
 8010eae:	d163      	bne.n	8010f78 <_dtoa_r+0x608>
 8010eb0:	4642      	mov	r2, r8
 8010eb2:	464b      	mov	r3, r9
 8010eb4:	4936      	ldr	r1, [pc, #216]	; (8010f90 <_dtoa_r+0x620>)
 8010eb6:	2000      	movs	r0, #0
 8010eb8:	f7ef f9fe 	bl	80002b8 <__aeabi_dsub>
 8010ebc:	4652      	mov	r2, sl
 8010ebe:	465b      	mov	r3, fp
 8010ec0:	f7ef fe24 	bl	8000b0c <__aeabi_dcmplt>
 8010ec4:	2800      	cmp	r0, #0
 8010ec6:	f040 80b5 	bne.w	8011034 <_dtoa_r+0x6c4>
 8010eca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010ecc:	429d      	cmp	r5, r3
 8010ece:	d081      	beq.n	8010dd4 <_dtoa_r+0x464>
 8010ed0:	4b30      	ldr	r3, [pc, #192]	; (8010f94 <_dtoa_r+0x624>)
 8010ed2:	2200      	movs	r2, #0
 8010ed4:	4650      	mov	r0, sl
 8010ed6:	4659      	mov	r1, fp
 8010ed8:	f7ef fba6 	bl	8000628 <__aeabi_dmul>
 8010edc:	4b2d      	ldr	r3, [pc, #180]	; (8010f94 <_dtoa_r+0x624>)
 8010ede:	4682      	mov	sl, r0
 8010ee0:	468b      	mov	fp, r1
 8010ee2:	4640      	mov	r0, r8
 8010ee4:	4649      	mov	r1, r9
 8010ee6:	2200      	movs	r2, #0
 8010ee8:	f7ef fb9e 	bl	8000628 <__aeabi_dmul>
 8010eec:	4680      	mov	r8, r0
 8010eee:	4689      	mov	r9, r1
 8010ef0:	e7c6      	b.n	8010e80 <_dtoa_r+0x510>
 8010ef2:	4650      	mov	r0, sl
 8010ef4:	4659      	mov	r1, fp
 8010ef6:	f7ef fb97 	bl	8000628 <__aeabi_dmul>
 8010efa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010efc:	9d01      	ldr	r5, [sp, #4]
 8010efe:	930f      	str	r3, [sp, #60]	; 0x3c
 8010f00:	4682      	mov	sl, r0
 8010f02:	468b      	mov	fp, r1
 8010f04:	4649      	mov	r1, r9
 8010f06:	4640      	mov	r0, r8
 8010f08:	f7ef fe3e 	bl	8000b88 <__aeabi_d2iz>
 8010f0c:	4606      	mov	r6, r0
 8010f0e:	f7ef fb21 	bl	8000554 <__aeabi_i2d>
 8010f12:	3630      	adds	r6, #48	; 0x30
 8010f14:	4602      	mov	r2, r0
 8010f16:	460b      	mov	r3, r1
 8010f18:	4640      	mov	r0, r8
 8010f1a:	4649      	mov	r1, r9
 8010f1c:	f7ef f9cc 	bl	80002b8 <__aeabi_dsub>
 8010f20:	f805 6b01 	strb.w	r6, [r5], #1
 8010f24:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010f26:	429d      	cmp	r5, r3
 8010f28:	4680      	mov	r8, r0
 8010f2a:	4689      	mov	r9, r1
 8010f2c:	f04f 0200 	mov.w	r2, #0
 8010f30:	d124      	bne.n	8010f7c <_dtoa_r+0x60c>
 8010f32:	4b1b      	ldr	r3, [pc, #108]	; (8010fa0 <_dtoa_r+0x630>)
 8010f34:	4650      	mov	r0, sl
 8010f36:	4659      	mov	r1, fp
 8010f38:	f7ef f9c0 	bl	80002bc <__adddf3>
 8010f3c:	4602      	mov	r2, r0
 8010f3e:	460b      	mov	r3, r1
 8010f40:	4640      	mov	r0, r8
 8010f42:	4649      	mov	r1, r9
 8010f44:	f7ef fe00 	bl	8000b48 <__aeabi_dcmpgt>
 8010f48:	2800      	cmp	r0, #0
 8010f4a:	d173      	bne.n	8011034 <_dtoa_r+0x6c4>
 8010f4c:	4652      	mov	r2, sl
 8010f4e:	465b      	mov	r3, fp
 8010f50:	4913      	ldr	r1, [pc, #76]	; (8010fa0 <_dtoa_r+0x630>)
 8010f52:	2000      	movs	r0, #0
 8010f54:	f7ef f9b0 	bl	80002b8 <__aeabi_dsub>
 8010f58:	4602      	mov	r2, r0
 8010f5a:	460b      	mov	r3, r1
 8010f5c:	4640      	mov	r0, r8
 8010f5e:	4649      	mov	r1, r9
 8010f60:	f7ef fdd4 	bl	8000b0c <__aeabi_dcmplt>
 8010f64:	2800      	cmp	r0, #0
 8010f66:	f43f af35 	beq.w	8010dd4 <_dtoa_r+0x464>
 8010f6a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8010f6c:	1e6b      	subs	r3, r5, #1
 8010f6e:	930f      	str	r3, [sp, #60]	; 0x3c
 8010f70:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8010f74:	2b30      	cmp	r3, #48	; 0x30
 8010f76:	d0f8      	beq.n	8010f6a <_dtoa_r+0x5fa>
 8010f78:	9700      	str	r7, [sp, #0]
 8010f7a:	e049      	b.n	8011010 <_dtoa_r+0x6a0>
 8010f7c:	4b05      	ldr	r3, [pc, #20]	; (8010f94 <_dtoa_r+0x624>)
 8010f7e:	f7ef fb53 	bl	8000628 <__aeabi_dmul>
 8010f82:	4680      	mov	r8, r0
 8010f84:	4689      	mov	r9, r1
 8010f86:	e7bd      	b.n	8010f04 <_dtoa_r+0x594>
 8010f88:	08014998 	.word	0x08014998
 8010f8c:	08014970 	.word	0x08014970
 8010f90:	3ff00000 	.word	0x3ff00000
 8010f94:	40240000 	.word	0x40240000
 8010f98:	401c0000 	.word	0x401c0000
 8010f9c:	40140000 	.word	0x40140000
 8010fa0:	3fe00000 	.word	0x3fe00000
 8010fa4:	9d01      	ldr	r5, [sp, #4]
 8010fa6:	4656      	mov	r6, sl
 8010fa8:	465f      	mov	r7, fp
 8010faa:	4642      	mov	r2, r8
 8010fac:	464b      	mov	r3, r9
 8010fae:	4630      	mov	r0, r6
 8010fb0:	4639      	mov	r1, r7
 8010fb2:	f7ef fc63 	bl	800087c <__aeabi_ddiv>
 8010fb6:	f7ef fde7 	bl	8000b88 <__aeabi_d2iz>
 8010fba:	4682      	mov	sl, r0
 8010fbc:	f7ef faca 	bl	8000554 <__aeabi_i2d>
 8010fc0:	4642      	mov	r2, r8
 8010fc2:	464b      	mov	r3, r9
 8010fc4:	f7ef fb30 	bl	8000628 <__aeabi_dmul>
 8010fc8:	4602      	mov	r2, r0
 8010fca:	460b      	mov	r3, r1
 8010fcc:	4630      	mov	r0, r6
 8010fce:	4639      	mov	r1, r7
 8010fd0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8010fd4:	f7ef f970 	bl	80002b8 <__aeabi_dsub>
 8010fd8:	f805 6b01 	strb.w	r6, [r5], #1
 8010fdc:	9e01      	ldr	r6, [sp, #4]
 8010fde:	9f03      	ldr	r7, [sp, #12]
 8010fe0:	1bae      	subs	r6, r5, r6
 8010fe2:	42b7      	cmp	r7, r6
 8010fe4:	4602      	mov	r2, r0
 8010fe6:	460b      	mov	r3, r1
 8010fe8:	d135      	bne.n	8011056 <_dtoa_r+0x6e6>
 8010fea:	f7ef f967 	bl	80002bc <__adddf3>
 8010fee:	4642      	mov	r2, r8
 8010ff0:	464b      	mov	r3, r9
 8010ff2:	4606      	mov	r6, r0
 8010ff4:	460f      	mov	r7, r1
 8010ff6:	f7ef fda7 	bl	8000b48 <__aeabi_dcmpgt>
 8010ffa:	b9d0      	cbnz	r0, 8011032 <_dtoa_r+0x6c2>
 8010ffc:	4642      	mov	r2, r8
 8010ffe:	464b      	mov	r3, r9
 8011000:	4630      	mov	r0, r6
 8011002:	4639      	mov	r1, r7
 8011004:	f7ef fd78 	bl	8000af8 <__aeabi_dcmpeq>
 8011008:	b110      	cbz	r0, 8011010 <_dtoa_r+0x6a0>
 801100a:	f01a 0f01 	tst.w	sl, #1
 801100e:	d110      	bne.n	8011032 <_dtoa_r+0x6c2>
 8011010:	4620      	mov	r0, r4
 8011012:	ee18 1a10 	vmov	r1, s16
 8011016:	f000 fae5 	bl	80115e4 <_Bfree>
 801101a:	2300      	movs	r3, #0
 801101c:	9800      	ldr	r0, [sp, #0]
 801101e:	702b      	strb	r3, [r5, #0]
 8011020:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011022:	3001      	adds	r0, #1
 8011024:	6018      	str	r0, [r3, #0]
 8011026:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011028:	2b00      	cmp	r3, #0
 801102a:	f43f acf1 	beq.w	8010a10 <_dtoa_r+0xa0>
 801102e:	601d      	str	r5, [r3, #0]
 8011030:	e4ee      	b.n	8010a10 <_dtoa_r+0xa0>
 8011032:	9f00      	ldr	r7, [sp, #0]
 8011034:	462b      	mov	r3, r5
 8011036:	461d      	mov	r5, r3
 8011038:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801103c:	2a39      	cmp	r2, #57	; 0x39
 801103e:	d106      	bne.n	801104e <_dtoa_r+0x6de>
 8011040:	9a01      	ldr	r2, [sp, #4]
 8011042:	429a      	cmp	r2, r3
 8011044:	d1f7      	bne.n	8011036 <_dtoa_r+0x6c6>
 8011046:	9901      	ldr	r1, [sp, #4]
 8011048:	2230      	movs	r2, #48	; 0x30
 801104a:	3701      	adds	r7, #1
 801104c:	700a      	strb	r2, [r1, #0]
 801104e:	781a      	ldrb	r2, [r3, #0]
 8011050:	3201      	adds	r2, #1
 8011052:	701a      	strb	r2, [r3, #0]
 8011054:	e790      	b.n	8010f78 <_dtoa_r+0x608>
 8011056:	4ba6      	ldr	r3, [pc, #664]	; (80112f0 <_dtoa_r+0x980>)
 8011058:	2200      	movs	r2, #0
 801105a:	f7ef fae5 	bl	8000628 <__aeabi_dmul>
 801105e:	2200      	movs	r2, #0
 8011060:	2300      	movs	r3, #0
 8011062:	4606      	mov	r6, r0
 8011064:	460f      	mov	r7, r1
 8011066:	f7ef fd47 	bl	8000af8 <__aeabi_dcmpeq>
 801106a:	2800      	cmp	r0, #0
 801106c:	d09d      	beq.n	8010faa <_dtoa_r+0x63a>
 801106e:	e7cf      	b.n	8011010 <_dtoa_r+0x6a0>
 8011070:	9a08      	ldr	r2, [sp, #32]
 8011072:	2a00      	cmp	r2, #0
 8011074:	f000 80d7 	beq.w	8011226 <_dtoa_r+0x8b6>
 8011078:	9a06      	ldr	r2, [sp, #24]
 801107a:	2a01      	cmp	r2, #1
 801107c:	f300 80ba 	bgt.w	80111f4 <_dtoa_r+0x884>
 8011080:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011082:	2a00      	cmp	r2, #0
 8011084:	f000 80b2 	beq.w	80111ec <_dtoa_r+0x87c>
 8011088:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801108c:	9e07      	ldr	r6, [sp, #28]
 801108e:	9d04      	ldr	r5, [sp, #16]
 8011090:	9a04      	ldr	r2, [sp, #16]
 8011092:	441a      	add	r2, r3
 8011094:	9204      	str	r2, [sp, #16]
 8011096:	9a05      	ldr	r2, [sp, #20]
 8011098:	2101      	movs	r1, #1
 801109a:	441a      	add	r2, r3
 801109c:	4620      	mov	r0, r4
 801109e:	9205      	str	r2, [sp, #20]
 80110a0:	f000 fb58 	bl	8011754 <__i2b>
 80110a4:	4607      	mov	r7, r0
 80110a6:	2d00      	cmp	r5, #0
 80110a8:	dd0c      	ble.n	80110c4 <_dtoa_r+0x754>
 80110aa:	9b05      	ldr	r3, [sp, #20]
 80110ac:	2b00      	cmp	r3, #0
 80110ae:	dd09      	ble.n	80110c4 <_dtoa_r+0x754>
 80110b0:	42ab      	cmp	r3, r5
 80110b2:	9a04      	ldr	r2, [sp, #16]
 80110b4:	bfa8      	it	ge
 80110b6:	462b      	movge	r3, r5
 80110b8:	1ad2      	subs	r2, r2, r3
 80110ba:	9204      	str	r2, [sp, #16]
 80110bc:	9a05      	ldr	r2, [sp, #20]
 80110be:	1aed      	subs	r5, r5, r3
 80110c0:	1ad3      	subs	r3, r2, r3
 80110c2:	9305      	str	r3, [sp, #20]
 80110c4:	9b07      	ldr	r3, [sp, #28]
 80110c6:	b31b      	cbz	r3, 8011110 <_dtoa_r+0x7a0>
 80110c8:	9b08      	ldr	r3, [sp, #32]
 80110ca:	2b00      	cmp	r3, #0
 80110cc:	f000 80af 	beq.w	801122e <_dtoa_r+0x8be>
 80110d0:	2e00      	cmp	r6, #0
 80110d2:	dd13      	ble.n	80110fc <_dtoa_r+0x78c>
 80110d4:	4639      	mov	r1, r7
 80110d6:	4632      	mov	r2, r6
 80110d8:	4620      	mov	r0, r4
 80110da:	f000 fbfb 	bl	80118d4 <__pow5mult>
 80110de:	ee18 2a10 	vmov	r2, s16
 80110e2:	4601      	mov	r1, r0
 80110e4:	4607      	mov	r7, r0
 80110e6:	4620      	mov	r0, r4
 80110e8:	f000 fb4a 	bl	8011780 <__multiply>
 80110ec:	ee18 1a10 	vmov	r1, s16
 80110f0:	4680      	mov	r8, r0
 80110f2:	4620      	mov	r0, r4
 80110f4:	f000 fa76 	bl	80115e4 <_Bfree>
 80110f8:	ee08 8a10 	vmov	s16, r8
 80110fc:	9b07      	ldr	r3, [sp, #28]
 80110fe:	1b9a      	subs	r2, r3, r6
 8011100:	d006      	beq.n	8011110 <_dtoa_r+0x7a0>
 8011102:	ee18 1a10 	vmov	r1, s16
 8011106:	4620      	mov	r0, r4
 8011108:	f000 fbe4 	bl	80118d4 <__pow5mult>
 801110c:	ee08 0a10 	vmov	s16, r0
 8011110:	2101      	movs	r1, #1
 8011112:	4620      	mov	r0, r4
 8011114:	f000 fb1e 	bl	8011754 <__i2b>
 8011118:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801111a:	2b00      	cmp	r3, #0
 801111c:	4606      	mov	r6, r0
 801111e:	f340 8088 	ble.w	8011232 <_dtoa_r+0x8c2>
 8011122:	461a      	mov	r2, r3
 8011124:	4601      	mov	r1, r0
 8011126:	4620      	mov	r0, r4
 8011128:	f000 fbd4 	bl	80118d4 <__pow5mult>
 801112c:	9b06      	ldr	r3, [sp, #24]
 801112e:	2b01      	cmp	r3, #1
 8011130:	4606      	mov	r6, r0
 8011132:	f340 8081 	ble.w	8011238 <_dtoa_r+0x8c8>
 8011136:	f04f 0800 	mov.w	r8, #0
 801113a:	6933      	ldr	r3, [r6, #16]
 801113c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8011140:	6918      	ldr	r0, [r3, #16]
 8011142:	f000 fab7 	bl	80116b4 <__hi0bits>
 8011146:	f1c0 0020 	rsb	r0, r0, #32
 801114a:	9b05      	ldr	r3, [sp, #20]
 801114c:	4418      	add	r0, r3
 801114e:	f010 001f 	ands.w	r0, r0, #31
 8011152:	f000 8092 	beq.w	801127a <_dtoa_r+0x90a>
 8011156:	f1c0 0320 	rsb	r3, r0, #32
 801115a:	2b04      	cmp	r3, #4
 801115c:	f340 808a 	ble.w	8011274 <_dtoa_r+0x904>
 8011160:	f1c0 001c 	rsb	r0, r0, #28
 8011164:	9b04      	ldr	r3, [sp, #16]
 8011166:	4403      	add	r3, r0
 8011168:	9304      	str	r3, [sp, #16]
 801116a:	9b05      	ldr	r3, [sp, #20]
 801116c:	4403      	add	r3, r0
 801116e:	4405      	add	r5, r0
 8011170:	9305      	str	r3, [sp, #20]
 8011172:	9b04      	ldr	r3, [sp, #16]
 8011174:	2b00      	cmp	r3, #0
 8011176:	dd07      	ble.n	8011188 <_dtoa_r+0x818>
 8011178:	ee18 1a10 	vmov	r1, s16
 801117c:	461a      	mov	r2, r3
 801117e:	4620      	mov	r0, r4
 8011180:	f000 fc02 	bl	8011988 <__lshift>
 8011184:	ee08 0a10 	vmov	s16, r0
 8011188:	9b05      	ldr	r3, [sp, #20]
 801118a:	2b00      	cmp	r3, #0
 801118c:	dd05      	ble.n	801119a <_dtoa_r+0x82a>
 801118e:	4631      	mov	r1, r6
 8011190:	461a      	mov	r2, r3
 8011192:	4620      	mov	r0, r4
 8011194:	f000 fbf8 	bl	8011988 <__lshift>
 8011198:	4606      	mov	r6, r0
 801119a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801119c:	2b00      	cmp	r3, #0
 801119e:	d06e      	beq.n	801127e <_dtoa_r+0x90e>
 80111a0:	ee18 0a10 	vmov	r0, s16
 80111a4:	4631      	mov	r1, r6
 80111a6:	f000 fc5f 	bl	8011a68 <__mcmp>
 80111aa:	2800      	cmp	r0, #0
 80111ac:	da67      	bge.n	801127e <_dtoa_r+0x90e>
 80111ae:	9b00      	ldr	r3, [sp, #0]
 80111b0:	3b01      	subs	r3, #1
 80111b2:	ee18 1a10 	vmov	r1, s16
 80111b6:	9300      	str	r3, [sp, #0]
 80111b8:	220a      	movs	r2, #10
 80111ba:	2300      	movs	r3, #0
 80111bc:	4620      	mov	r0, r4
 80111be:	f000 fa33 	bl	8011628 <__multadd>
 80111c2:	9b08      	ldr	r3, [sp, #32]
 80111c4:	ee08 0a10 	vmov	s16, r0
 80111c8:	2b00      	cmp	r3, #0
 80111ca:	f000 81b1 	beq.w	8011530 <_dtoa_r+0xbc0>
 80111ce:	2300      	movs	r3, #0
 80111d0:	4639      	mov	r1, r7
 80111d2:	220a      	movs	r2, #10
 80111d4:	4620      	mov	r0, r4
 80111d6:	f000 fa27 	bl	8011628 <__multadd>
 80111da:	9b02      	ldr	r3, [sp, #8]
 80111dc:	2b00      	cmp	r3, #0
 80111de:	4607      	mov	r7, r0
 80111e0:	f300 808e 	bgt.w	8011300 <_dtoa_r+0x990>
 80111e4:	9b06      	ldr	r3, [sp, #24]
 80111e6:	2b02      	cmp	r3, #2
 80111e8:	dc51      	bgt.n	801128e <_dtoa_r+0x91e>
 80111ea:	e089      	b.n	8011300 <_dtoa_r+0x990>
 80111ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80111ee:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80111f2:	e74b      	b.n	801108c <_dtoa_r+0x71c>
 80111f4:	9b03      	ldr	r3, [sp, #12]
 80111f6:	1e5e      	subs	r6, r3, #1
 80111f8:	9b07      	ldr	r3, [sp, #28]
 80111fa:	42b3      	cmp	r3, r6
 80111fc:	bfbf      	itttt	lt
 80111fe:	9b07      	ldrlt	r3, [sp, #28]
 8011200:	9607      	strlt	r6, [sp, #28]
 8011202:	1af2      	sublt	r2, r6, r3
 8011204:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8011206:	bfb6      	itet	lt
 8011208:	189b      	addlt	r3, r3, r2
 801120a:	1b9e      	subge	r6, r3, r6
 801120c:	930a      	strlt	r3, [sp, #40]	; 0x28
 801120e:	9b03      	ldr	r3, [sp, #12]
 8011210:	bfb8      	it	lt
 8011212:	2600      	movlt	r6, #0
 8011214:	2b00      	cmp	r3, #0
 8011216:	bfb7      	itett	lt
 8011218:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 801121c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8011220:	1a9d      	sublt	r5, r3, r2
 8011222:	2300      	movlt	r3, #0
 8011224:	e734      	b.n	8011090 <_dtoa_r+0x720>
 8011226:	9e07      	ldr	r6, [sp, #28]
 8011228:	9d04      	ldr	r5, [sp, #16]
 801122a:	9f08      	ldr	r7, [sp, #32]
 801122c:	e73b      	b.n	80110a6 <_dtoa_r+0x736>
 801122e:	9a07      	ldr	r2, [sp, #28]
 8011230:	e767      	b.n	8011102 <_dtoa_r+0x792>
 8011232:	9b06      	ldr	r3, [sp, #24]
 8011234:	2b01      	cmp	r3, #1
 8011236:	dc18      	bgt.n	801126a <_dtoa_r+0x8fa>
 8011238:	f1ba 0f00 	cmp.w	sl, #0
 801123c:	d115      	bne.n	801126a <_dtoa_r+0x8fa>
 801123e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011242:	b993      	cbnz	r3, 801126a <_dtoa_r+0x8fa>
 8011244:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8011248:	0d1b      	lsrs	r3, r3, #20
 801124a:	051b      	lsls	r3, r3, #20
 801124c:	b183      	cbz	r3, 8011270 <_dtoa_r+0x900>
 801124e:	9b04      	ldr	r3, [sp, #16]
 8011250:	3301      	adds	r3, #1
 8011252:	9304      	str	r3, [sp, #16]
 8011254:	9b05      	ldr	r3, [sp, #20]
 8011256:	3301      	adds	r3, #1
 8011258:	9305      	str	r3, [sp, #20]
 801125a:	f04f 0801 	mov.w	r8, #1
 801125e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011260:	2b00      	cmp	r3, #0
 8011262:	f47f af6a 	bne.w	801113a <_dtoa_r+0x7ca>
 8011266:	2001      	movs	r0, #1
 8011268:	e76f      	b.n	801114a <_dtoa_r+0x7da>
 801126a:	f04f 0800 	mov.w	r8, #0
 801126e:	e7f6      	b.n	801125e <_dtoa_r+0x8ee>
 8011270:	4698      	mov	r8, r3
 8011272:	e7f4      	b.n	801125e <_dtoa_r+0x8ee>
 8011274:	f43f af7d 	beq.w	8011172 <_dtoa_r+0x802>
 8011278:	4618      	mov	r0, r3
 801127a:	301c      	adds	r0, #28
 801127c:	e772      	b.n	8011164 <_dtoa_r+0x7f4>
 801127e:	9b03      	ldr	r3, [sp, #12]
 8011280:	2b00      	cmp	r3, #0
 8011282:	dc37      	bgt.n	80112f4 <_dtoa_r+0x984>
 8011284:	9b06      	ldr	r3, [sp, #24]
 8011286:	2b02      	cmp	r3, #2
 8011288:	dd34      	ble.n	80112f4 <_dtoa_r+0x984>
 801128a:	9b03      	ldr	r3, [sp, #12]
 801128c:	9302      	str	r3, [sp, #8]
 801128e:	9b02      	ldr	r3, [sp, #8]
 8011290:	b96b      	cbnz	r3, 80112ae <_dtoa_r+0x93e>
 8011292:	4631      	mov	r1, r6
 8011294:	2205      	movs	r2, #5
 8011296:	4620      	mov	r0, r4
 8011298:	f000 f9c6 	bl	8011628 <__multadd>
 801129c:	4601      	mov	r1, r0
 801129e:	4606      	mov	r6, r0
 80112a0:	ee18 0a10 	vmov	r0, s16
 80112a4:	f000 fbe0 	bl	8011a68 <__mcmp>
 80112a8:	2800      	cmp	r0, #0
 80112aa:	f73f adbb 	bgt.w	8010e24 <_dtoa_r+0x4b4>
 80112ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80112b0:	9d01      	ldr	r5, [sp, #4]
 80112b2:	43db      	mvns	r3, r3
 80112b4:	9300      	str	r3, [sp, #0]
 80112b6:	f04f 0800 	mov.w	r8, #0
 80112ba:	4631      	mov	r1, r6
 80112bc:	4620      	mov	r0, r4
 80112be:	f000 f991 	bl	80115e4 <_Bfree>
 80112c2:	2f00      	cmp	r7, #0
 80112c4:	f43f aea4 	beq.w	8011010 <_dtoa_r+0x6a0>
 80112c8:	f1b8 0f00 	cmp.w	r8, #0
 80112cc:	d005      	beq.n	80112da <_dtoa_r+0x96a>
 80112ce:	45b8      	cmp	r8, r7
 80112d0:	d003      	beq.n	80112da <_dtoa_r+0x96a>
 80112d2:	4641      	mov	r1, r8
 80112d4:	4620      	mov	r0, r4
 80112d6:	f000 f985 	bl	80115e4 <_Bfree>
 80112da:	4639      	mov	r1, r7
 80112dc:	4620      	mov	r0, r4
 80112de:	f000 f981 	bl	80115e4 <_Bfree>
 80112e2:	e695      	b.n	8011010 <_dtoa_r+0x6a0>
 80112e4:	2600      	movs	r6, #0
 80112e6:	4637      	mov	r7, r6
 80112e8:	e7e1      	b.n	80112ae <_dtoa_r+0x93e>
 80112ea:	9700      	str	r7, [sp, #0]
 80112ec:	4637      	mov	r7, r6
 80112ee:	e599      	b.n	8010e24 <_dtoa_r+0x4b4>
 80112f0:	40240000 	.word	0x40240000
 80112f4:	9b08      	ldr	r3, [sp, #32]
 80112f6:	2b00      	cmp	r3, #0
 80112f8:	f000 80ca 	beq.w	8011490 <_dtoa_r+0xb20>
 80112fc:	9b03      	ldr	r3, [sp, #12]
 80112fe:	9302      	str	r3, [sp, #8]
 8011300:	2d00      	cmp	r5, #0
 8011302:	dd05      	ble.n	8011310 <_dtoa_r+0x9a0>
 8011304:	4639      	mov	r1, r7
 8011306:	462a      	mov	r2, r5
 8011308:	4620      	mov	r0, r4
 801130a:	f000 fb3d 	bl	8011988 <__lshift>
 801130e:	4607      	mov	r7, r0
 8011310:	f1b8 0f00 	cmp.w	r8, #0
 8011314:	d05b      	beq.n	80113ce <_dtoa_r+0xa5e>
 8011316:	6879      	ldr	r1, [r7, #4]
 8011318:	4620      	mov	r0, r4
 801131a:	f000 f923 	bl	8011564 <_Balloc>
 801131e:	4605      	mov	r5, r0
 8011320:	b928      	cbnz	r0, 801132e <_dtoa_r+0x9be>
 8011322:	4b87      	ldr	r3, [pc, #540]	; (8011540 <_dtoa_r+0xbd0>)
 8011324:	4602      	mov	r2, r0
 8011326:	f240 21ea 	movw	r1, #746	; 0x2ea
 801132a:	f7ff bb3b 	b.w	80109a4 <_dtoa_r+0x34>
 801132e:	693a      	ldr	r2, [r7, #16]
 8011330:	3202      	adds	r2, #2
 8011332:	0092      	lsls	r2, r2, #2
 8011334:	f107 010c 	add.w	r1, r7, #12
 8011338:	300c      	adds	r0, #12
 801133a:	f7fe fdc9 	bl	800fed0 <memcpy>
 801133e:	2201      	movs	r2, #1
 8011340:	4629      	mov	r1, r5
 8011342:	4620      	mov	r0, r4
 8011344:	f000 fb20 	bl	8011988 <__lshift>
 8011348:	9b01      	ldr	r3, [sp, #4]
 801134a:	f103 0901 	add.w	r9, r3, #1
 801134e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8011352:	4413      	add	r3, r2
 8011354:	9305      	str	r3, [sp, #20]
 8011356:	f00a 0301 	and.w	r3, sl, #1
 801135a:	46b8      	mov	r8, r7
 801135c:	9304      	str	r3, [sp, #16]
 801135e:	4607      	mov	r7, r0
 8011360:	4631      	mov	r1, r6
 8011362:	ee18 0a10 	vmov	r0, s16
 8011366:	f7ff fa75 	bl	8010854 <quorem>
 801136a:	4641      	mov	r1, r8
 801136c:	9002      	str	r0, [sp, #8]
 801136e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8011372:	ee18 0a10 	vmov	r0, s16
 8011376:	f000 fb77 	bl	8011a68 <__mcmp>
 801137a:	463a      	mov	r2, r7
 801137c:	9003      	str	r0, [sp, #12]
 801137e:	4631      	mov	r1, r6
 8011380:	4620      	mov	r0, r4
 8011382:	f000 fb8d 	bl	8011aa0 <__mdiff>
 8011386:	68c2      	ldr	r2, [r0, #12]
 8011388:	f109 3bff 	add.w	fp, r9, #4294967295
 801138c:	4605      	mov	r5, r0
 801138e:	bb02      	cbnz	r2, 80113d2 <_dtoa_r+0xa62>
 8011390:	4601      	mov	r1, r0
 8011392:	ee18 0a10 	vmov	r0, s16
 8011396:	f000 fb67 	bl	8011a68 <__mcmp>
 801139a:	4602      	mov	r2, r0
 801139c:	4629      	mov	r1, r5
 801139e:	4620      	mov	r0, r4
 80113a0:	9207      	str	r2, [sp, #28]
 80113a2:	f000 f91f 	bl	80115e4 <_Bfree>
 80113a6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80113aa:	ea43 0102 	orr.w	r1, r3, r2
 80113ae:	9b04      	ldr	r3, [sp, #16]
 80113b0:	430b      	orrs	r3, r1
 80113b2:	464d      	mov	r5, r9
 80113b4:	d10f      	bne.n	80113d6 <_dtoa_r+0xa66>
 80113b6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80113ba:	d02a      	beq.n	8011412 <_dtoa_r+0xaa2>
 80113bc:	9b03      	ldr	r3, [sp, #12]
 80113be:	2b00      	cmp	r3, #0
 80113c0:	dd02      	ble.n	80113c8 <_dtoa_r+0xa58>
 80113c2:	9b02      	ldr	r3, [sp, #8]
 80113c4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80113c8:	f88b a000 	strb.w	sl, [fp]
 80113cc:	e775      	b.n	80112ba <_dtoa_r+0x94a>
 80113ce:	4638      	mov	r0, r7
 80113d0:	e7ba      	b.n	8011348 <_dtoa_r+0x9d8>
 80113d2:	2201      	movs	r2, #1
 80113d4:	e7e2      	b.n	801139c <_dtoa_r+0xa2c>
 80113d6:	9b03      	ldr	r3, [sp, #12]
 80113d8:	2b00      	cmp	r3, #0
 80113da:	db04      	blt.n	80113e6 <_dtoa_r+0xa76>
 80113dc:	9906      	ldr	r1, [sp, #24]
 80113de:	430b      	orrs	r3, r1
 80113e0:	9904      	ldr	r1, [sp, #16]
 80113e2:	430b      	orrs	r3, r1
 80113e4:	d122      	bne.n	801142c <_dtoa_r+0xabc>
 80113e6:	2a00      	cmp	r2, #0
 80113e8:	ddee      	ble.n	80113c8 <_dtoa_r+0xa58>
 80113ea:	ee18 1a10 	vmov	r1, s16
 80113ee:	2201      	movs	r2, #1
 80113f0:	4620      	mov	r0, r4
 80113f2:	f000 fac9 	bl	8011988 <__lshift>
 80113f6:	4631      	mov	r1, r6
 80113f8:	ee08 0a10 	vmov	s16, r0
 80113fc:	f000 fb34 	bl	8011a68 <__mcmp>
 8011400:	2800      	cmp	r0, #0
 8011402:	dc03      	bgt.n	801140c <_dtoa_r+0xa9c>
 8011404:	d1e0      	bne.n	80113c8 <_dtoa_r+0xa58>
 8011406:	f01a 0f01 	tst.w	sl, #1
 801140a:	d0dd      	beq.n	80113c8 <_dtoa_r+0xa58>
 801140c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8011410:	d1d7      	bne.n	80113c2 <_dtoa_r+0xa52>
 8011412:	2339      	movs	r3, #57	; 0x39
 8011414:	f88b 3000 	strb.w	r3, [fp]
 8011418:	462b      	mov	r3, r5
 801141a:	461d      	mov	r5, r3
 801141c:	3b01      	subs	r3, #1
 801141e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8011422:	2a39      	cmp	r2, #57	; 0x39
 8011424:	d071      	beq.n	801150a <_dtoa_r+0xb9a>
 8011426:	3201      	adds	r2, #1
 8011428:	701a      	strb	r2, [r3, #0]
 801142a:	e746      	b.n	80112ba <_dtoa_r+0x94a>
 801142c:	2a00      	cmp	r2, #0
 801142e:	dd07      	ble.n	8011440 <_dtoa_r+0xad0>
 8011430:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8011434:	d0ed      	beq.n	8011412 <_dtoa_r+0xaa2>
 8011436:	f10a 0301 	add.w	r3, sl, #1
 801143a:	f88b 3000 	strb.w	r3, [fp]
 801143e:	e73c      	b.n	80112ba <_dtoa_r+0x94a>
 8011440:	9b05      	ldr	r3, [sp, #20]
 8011442:	f809 ac01 	strb.w	sl, [r9, #-1]
 8011446:	4599      	cmp	r9, r3
 8011448:	d047      	beq.n	80114da <_dtoa_r+0xb6a>
 801144a:	ee18 1a10 	vmov	r1, s16
 801144e:	2300      	movs	r3, #0
 8011450:	220a      	movs	r2, #10
 8011452:	4620      	mov	r0, r4
 8011454:	f000 f8e8 	bl	8011628 <__multadd>
 8011458:	45b8      	cmp	r8, r7
 801145a:	ee08 0a10 	vmov	s16, r0
 801145e:	f04f 0300 	mov.w	r3, #0
 8011462:	f04f 020a 	mov.w	r2, #10
 8011466:	4641      	mov	r1, r8
 8011468:	4620      	mov	r0, r4
 801146a:	d106      	bne.n	801147a <_dtoa_r+0xb0a>
 801146c:	f000 f8dc 	bl	8011628 <__multadd>
 8011470:	4680      	mov	r8, r0
 8011472:	4607      	mov	r7, r0
 8011474:	f109 0901 	add.w	r9, r9, #1
 8011478:	e772      	b.n	8011360 <_dtoa_r+0x9f0>
 801147a:	f000 f8d5 	bl	8011628 <__multadd>
 801147e:	4639      	mov	r1, r7
 8011480:	4680      	mov	r8, r0
 8011482:	2300      	movs	r3, #0
 8011484:	220a      	movs	r2, #10
 8011486:	4620      	mov	r0, r4
 8011488:	f000 f8ce 	bl	8011628 <__multadd>
 801148c:	4607      	mov	r7, r0
 801148e:	e7f1      	b.n	8011474 <_dtoa_r+0xb04>
 8011490:	9b03      	ldr	r3, [sp, #12]
 8011492:	9302      	str	r3, [sp, #8]
 8011494:	9d01      	ldr	r5, [sp, #4]
 8011496:	ee18 0a10 	vmov	r0, s16
 801149a:	4631      	mov	r1, r6
 801149c:	f7ff f9da 	bl	8010854 <quorem>
 80114a0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80114a4:	9b01      	ldr	r3, [sp, #4]
 80114a6:	f805 ab01 	strb.w	sl, [r5], #1
 80114aa:	1aea      	subs	r2, r5, r3
 80114ac:	9b02      	ldr	r3, [sp, #8]
 80114ae:	4293      	cmp	r3, r2
 80114b0:	dd09      	ble.n	80114c6 <_dtoa_r+0xb56>
 80114b2:	ee18 1a10 	vmov	r1, s16
 80114b6:	2300      	movs	r3, #0
 80114b8:	220a      	movs	r2, #10
 80114ba:	4620      	mov	r0, r4
 80114bc:	f000 f8b4 	bl	8011628 <__multadd>
 80114c0:	ee08 0a10 	vmov	s16, r0
 80114c4:	e7e7      	b.n	8011496 <_dtoa_r+0xb26>
 80114c6:	9b02      	ldr	r3, [sp, #8]
 80114c8:	2b00      	cmp	r3, #0
 80114ca:	bfc8      	it	gt
 80114cc:	461d      	movgt	r5, r3
 80114ce:	9b01      	ldr	r3, [sp, #4]
 80114d0:	bfd8      	it	le
 80114d2:	2501      	movle	r5, #1
 80114d4:	441d      	add	r5, r3
 80114d6:	f04f 0800 	mov.w	r8, #0
 80114da:	ee18 1a10 	vmov	r1, s16
 80114de:	2201      	movs	r2, #1
 80114e0:	4620      	mov	r0, r4
 80114e2:	f000 fa51 	bl	8011988 <__lshift>
 80114e6:	4631      	mov	r1, r6
 80114e8:	ee08 0a10 	vmov	s16, r0
 80114ec:	f000 fabc 	bl	8011a68 <__mcmp>
 80114f0:	2800      	cmp	r0, #0
 80114f2:	dc91      	bgt.n	8011418 <_dtoa_r+0xaa8>
 80114f4:	d102      	bne.n	80114fc <_dtoa_r+0xb8c>
 80114f6:	f01a 0f01 	tst.w	sl, #1
 80114fa:	d18d      	bne.n	8011418 <_dtoa_r+0xaa8>
 80114fc:	462b      	mov	r3, r5
 80114fe:	461d      	mov	r5, r3
 8011500:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011504:	2a30      	cmp	r2, #48	; 0x30
 8011506:	d0fa      	beq.n	80114fe <_dtoa_r+0xb8e>
 8011508:	e6d7      	b.n	80112ba <_dtoa_r+0x94a>
 801150a:	9a01      	ldr	r2, [sp, #4]
 801150c:	429a      	cmp	r2, r3
 801150e:	d184      	bne.n	801141a <_dtoa_r+0xaaa>
 8011510:	9b00      	ldr	r3, [sp, #0]
 8011512:	3301      	adds	r3, #1
 8011514:	9300      	str	r3, [sp, #0]
 8011516:	2331      	movs	r3, #49	; 0x31
 8011518:	7013      	strb	r3, [r2, #0]
 801151a:	e6ce      	b.n	80112ba <_dtoa_r+0x94a>
 801151c:	4b09      	ldr	r3, [pc, #36]	; (8011544 <_dtoa_r+0xbd4>)
 801151e:	f7ff ba95 	b.w	8010a4c <_dtoa_r+0xdc>
 8011522:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011524:	2b00      	cmp	r3, #0
 8011526:	f47f aa6e 	bne.w	8010a06 <_dtoa_r+0x96>
 801152a:	4b07      	ldr	r3, [pc, #28]	; (8011548 <_dtoa_r+0xbd8>)
 801152c:	f7ff ba8e 	b.w	8010a4c <_dtoa_r+0xdc>
 8011530:	9b02      	ldr	r3, [sp, #8]
 8011532:	2b00      	cmp	r3, #0
 8011534:	dcae      	bgt.n	8011494 <_dtoa_r+0xb24>
 8011536:	9b06      	ldr	r3, [sp, #24]
 8011538:	2b02      	cmp	r3, #2
 801153a:	f73f aea8 	bgt.w	801128e <_dtoa_r+0x91e>
 801153e:	e7a9      	b.n	8011494 <_dtoa_r+0xb24>
 8011540:	08014903 	.word	0x08014903
 8011544:	08014860 	.word	0x08014860
 8011548:	08014884 	.word	0x08014884

0801154c <_localeconv_r>:
 801154c:	4800      	ldr	r0, [pc, #0]	; (8011550 <_localeconv_r+0x4>)
 801154e:	4770      	bx	lr
 8011550:	20000174 	.word	0x20000174

08011554 <malloc>:
 8011554:	4b02      	ldr	r3, [pc, #8]	; (8011560 <malloc+0xc>)
 8011556:	4601      	mov	r1, r0
 8011558:	6818      	ldr	r0, [r3, #0]
 801155a:	f000 bc09 	b.w	8011d70 <_malloc_r>
 801155e:	bf00      	nop
 8011560:	20000020 	.word	0x20000020

08011564 <_Balloc>:
 8011564:	b570      	push	{r4, r5, r6, lr}
 8011566:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8011568:	4604      	mov	r4, r0
 801156a:	460d      	mov	r5, r1
 801156c:	b976      	cbnz	r6, 801158c <_Balloc+0x28>
 801156e:	2010      	movs	r0, #16
 8011570:	f7ff fff0 	bl	8011554 <malloc>
 8011574:	4602      	mov	r2, r0
 8011576:	6260      	str	r0, [r4, #36]	; 0x24
 8011578:	b920      	cbnz	r0, 8011584 <_Balloc+0x20>
 801157a:	4b18      	ldr	r3, [pc, #96]	; (80115dc <_Balloc+0x78>)
 801157c:	4818      	ldr	r0, [pc, #96]	; (80115e0 <_Balloc+0x7c>)
 801157e:	2166      	movs	r1, #102	; 0x66
 8011580:	f000 fdd6 	bl	8012130 <__assert_func>
 8011584:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011588:	6006      	str	r6, [r0, #0]
 801158a:	60c6      	str	r6, [r0, #12]
 801158c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801158e:	68f3      	ldr	r3, [r6, #12]
 8011590:	b183      	cbz	r3, 80115b4 <_Balloc+0x50>
 8011592:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011594:	68db      	ldr	r3, [r3, #12]
 8011596:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801159a:	b9b8      	cbnz	r0, 80115cc <_Balloc+0x68>
 801159c:	2101      	movs	r1, #1
 801159e:	fa01 f605 	lsl.w	r6, r1, r5
 80115a2:	1d72      	adds	r2, r6, #5
 80115a4:	0092      	lsls	r2, r2, #2
 80115a6:	4620      	mov	r0, r4
 80115a8:	f000 fb60 	bl	8011c6c <_calloc_r>
 80115ac:	b160      	cbz	r0, 80115c8 <_Balloc+0x64>
 80115ae:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80115b2:	e00e      	b.n	80115d2 <_Balloc+0x6e>
 80115b4:	2221      	movs	r2, #33	; 0x21
 80115b6:	2104      	movs	r1, #4
 80115b8:	4620      	mov	r0, r4
 80115ba:	f000 fb57 	bl	8011c6c <_calloc_r>
 80115be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80115c0:	60f0      	str	r0, [r6, #12]
 80115c2:	68db      	ldr	r3, [r3, #12]
 80115c4:	2b00      	cmp	r3, #0
 80115c6:	d1e4      	bne.n	8011592 <_Balloc+0x2e>
 80115c8:	2000      	movs	r0, #0
 80115ca:	bd70      	pop	{r4, r5, r6, pc}
 80115cc:	6802      	ldr	r2, [r0, #0]
 80115ce:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80115d2:	2300      	movs	r3, #0
 80115d4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80115d8:	e7f7      	b.n	80115ca <_Balloc+0x66>
 80115da:	bf00      	nop
 80115dc:	08014891 	.word	0x08014891
 80115e0:	08014914 	.word	0x08014914

080115e4 <_Bfree>:
 80115e4:	b570      	push	{r4, r5, r6, lr}
 80115e6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80115e8:	4605      	mov	r5, r0
 80115ea:	460c      	mov	r4, r1
 80115ec:	b976      	cbnz	r6, 801160c <_Bfree+0x28>
 80115ee:	2010      	movs	r0, #16
 80115f0:	f7ff ffb0 	bl	8011554 <malloc>
 80115f4:	4602      	mov	r2, r0
 80115f6:	6268      	str	r0, [r5, #36]	; 0x24
 80115f8:	b920      	cbnz	r0, 8011604 <_Bfree+0x20>
 80115fa:	4b09      	ldr	r3, [pc, #36]	; (8011620 <_Bfree+0x3c>)
 80115fc:	4809      	ldr	r0, [pc, #36]	; (8011624 <_Bfree+0x40>)
 80115fe:	218a      	movs	r1, #138	; 0x8a
 8011600:	f000 fd96 	bl	8012130 <__assert_func>
 8011604:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011608:	6006      	str	r6, [r0, #0]
 801160a:	60c6      	str	r6, [r0, #12]
 801160c:	b13c      	cbz	r4, 801161e <_Bfree+0x3a>
 801160e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8011610:	6862      	ldr	r2, [r4, #4]
 8011612:	68db      	ldr	r3, [r3, #12]
 8011614:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011618:	6021      	str	r1, [r4, #0]
 801161a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801161e:	bd70      	pop	{r4, r5, r6, pc}
 8011620:	08014891 	.word	0x08014891
 8011624:	08014914 	.word	0x08014914

08011628 <__multadd>:
 8011628:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801162c:	690d      	ldr	r5, [r1, #16]
 801162e:	4607      	mov	r7, r0
 8011630:	460c      	mov	r4, r1
 8011632:	461e      	mov	r6, r3
 8011634:	f101 0c14 	add.w	ip, r1, #20
 8011638:	2000      	movs	r0, #0
 801163a:	f8dc 3000 	ldr.w	r3, [ip]
 801163e:	b299      	uxth	r1, r3
 8011640:	fb02 6101 	mla	r1, r2, r1, r6
 8011644:	0c1e      	lsrs	r6, r3, #16
 8011646:	0c0b      	lsrs	r3, r1, #16
 8011648:	fb02 3306 	mla	r3, r2, r6, r3
 801164c:	b289      	uxth	r1, r1
 801164e:	3001      	adds	r0, #1
 8011650:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8011654:	4285      	cmp	r5, r0
 8011656:	f84c 1b04 	str.w	r1, [ip], #4
 801165a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801165e:	dcec      	bgt.n	801163a <__multadd+0x12>
 8011660:	b30e      	cbz	r6, 80116a6 <__multadd+0x7e>
 8011662:	68a3      	ldr	r3, [r4, #8]
 8011664:	42ab      	cmp	r3, r5
 8011666:	dc19      	bgt.n	801169c <__multadd+0x74>
 8011668:	6861      	ldr	r1, [r4, #4]
 801166a:	4638      	mov	r0, r7
 801166c:	3101      	adds	r1, #1
 801166e:	f7ff ff79 	bl	8011564 <_Balloc>
 8011672:	4680      	mov	r8, r0
 8011674:	b928      	cbnz	r0, 8011682 <__multadd+0x5a>
 8011676:	4602      	mov	r2, r0
 8011678:	4b0c      	ldr	r3, [pc, #48]	; (80116ac <__multadd+0x84>)
 801167a:	480d      	ldr	r0, [pc, #52]	; (80116b0 <__multadd+0x88>)
 801167c:	21b5      	movs	r1, #181	; 0xb5
 801167e:	f000 fd57 	bl	8012130 <__assert_func>
 8011682:	6922      	ldr	r2, [r4, #16]
 8011684:	3202      	adds	r2, #2
 8011686:	f104 010c 	add.w	r1, r4, #12
 801168a:	0092      	lsls	r2, r2, #2
 801168c:	300c      	adds	r0, #12
 801168e:	f7fe fc1f 	bl	800fed0 <memcpy>
 8011692:	4621      	mov	r1, r4
 8011694:	4638      	mov	r0, r7
 8011696:	f7ff ffa5 	bl	80115e4 <_Bfree>
 801169a:	4644      	mov	r4, r8
 801169c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80116a0:	3501      	adds	r5, #1
 80116a2:	615e      	str	r6, [r3, #20]
 80116a4:	6125      	str	r5, [r4, #16]
 80116a6:	4620      	mov	r0, r4
 80116a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80116ac:	08014903 	.word	0x08014903
 80116b0:	08014914 	.word	0x08014914

080116b4 <__hi0bits>:
 80116b4:	0c03      	lsrs	r3, r0, #16
 80116b6:	041b      	lsls	r3, r3, #16
 80116b8:	b9d3      	cbnz	r3, 80116f0 <__hi0bits+0x3c>
 80116ba:	0400      	lsls	r0, r0, #16
 80116bc:	2310      	movs	r3, #16
 80116be:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80116c2:	bf04      	itt	eq
 80116c4:	0200      	lsleq	r0, r0, #8
 80116c6:	3308      	addeq	r3, #8
 80116c8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80116cc:	bf04      	itt	eq
 80116ce:	0100      	lsleq	r0, r0, #4
 80116d0:	3304      	addeq	r3, #4
 80116d2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80116d6:	bf04      	itt	eq
 80116d8:	0080      	lsleq	r0, r0, #2
 80116da:	3302      	addeq	r3, #2
 80116dc:	2800      	cmp	r0, #0
 80116de:	db05      	blt.n	80116ec <__hi0bits+0x38>
 80116e0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80116e4:	f103 0301 	add.w	r3, r3, #1
 80116e8:	bf08      	it	eq
 80116ea:	2320      	moveq	r3, #32
 80116ec:	4618      	mov	r0, r3
 80116ee:	4770      	bx	lr
 80116f0:	2300      	movs	r3, #0
 80116f2:	e7e4      	b.n	80116be <__hi0bits+0xa>

080116f4 <__lo0bits>:
 80116f4:	6803      	ldr	r3, [r0, #0]
 80116f6:	f013 0207 	ands.w	r2, r3, #7
 80116fa:	4601      	mov	r1, r0
 80116fc:	d00b      	beq.n	8011716 <__lo0bits+0x22>
 80116fe:	07da      	lsls	r2, r3, #31
 8011700:	d423      	bmi.n	801174a <__lo0bits+0x56>
 8011702:	0798      	lsls	r0, r3, #30
 8011704:	bf49      	itett	mi
 8011706:	085b      	lsrmi	r3, r3, #1
 8011708:	089b      	lsrpl	r3, r3, #2
 801170a:	2001      	movmi	r0, #1
 801170c:	600b      	strmi	r3, [r1, #0]
 801170e:	bf5c      	itt	pl
 8011710:	600b      	strpl	r3, [r1, #0]
 8011712:	2002      	movpl	r0, #2
 8011714:	4770      	bx	lr
 8011716:	b298      	uxth	r0, r3
 8011718:	b9a8      	cbnz	r0, 8011746 <__lo0bits+0x52>
 801171a:	0c1b      	lsrs	r3, r3, #16
 801171c:	2010      	movs	r0, #16
 801171e:	b2da      	uxtb	r2, r3
 8011720:	b90a      	cbnz	r2, 8011726 <__lo0bits+0x32>
 8011722:	3008      	adds	r0, #8
 8011724:	0a1b      	lsrs	r3, r3, #8
 8011726:	071a      	lsls	r2, r3, #28
 8011728:	bf04      	itt	eq
 801172a:	091b      	lsreq	r3, r3, #4
 801172c:	3004      	addeq	r0, #4
 801172e:	079a      	lsls	r2, r3, #30
 8011730:	bf04      	itt	eq
 8011732:	089b      	lsreq	r3, r3, #2
 8011734:	3002      	addeq	r0, #2
 8011736:	07da      	lsls	r2, r3, #31
 8011738:	d403      	bmi.n	8011742 <__lo0bits+0x4e>
 801173a:	085b      	lsrs	r3, r3, #1
 801173c:	f100 0001 	add.w	r0, r0, #1
 8011740:	d005      	beq.n	801174e <__lo0bits+0x5a>
 8011742:	600b      	str	r3, [r1, #0]
 8011744:	4770      	bx	lr
 8011746:	4610      	mov	r0, r2
 8011748:	e7e9      	b.n	801171e <__lo0bits+0x2a>
 801174a:	2000      	movs	r0, #0
 801174c:	4770      	bx	lr
 801174e:	2020      	movs	r0, #32
 8011750:	4770      	bx	lr
	...

08011754 <__i2b>:
 8011754:	b510      	push	{r4, lr}
 8011756:	460c      	mov	r4, r1
 8011758:	2101      	movs	r1, #1
 801175a:	f7ff ff03 	bl	8011564 <_Balloc>
 801175e:	4602      	mov	r2, r0
 8011760:	b928      	cbnz	r0, 801176e <__i2b+0x1a>
 8011762:	4b05      	ldr	r3, [pc, #20]	; (8011778 <__i2b+0x24>)
 8011764:	4805      	ldr	r0, [pc, #20]	; (801177c <__i2b+0x28>)
 8011766:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801176a:	f000 fce1 	bl	8012130 <__assert_func>
 801176e:	2301      	movs	r3, #1
 8011770:	6144      	str	r4, [r0, #20]
 8011772:	6103      	str	r3, [r0, #16]
 8011774:	bd10      	pop	{r4, pc}
 8011776:	bf00      	nop
 8011778:	08014903 	.word	0x08014903
 801177c:	08014914 	.word	0x08014914

08011780 <__multiply>:
 8011780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011784:	4691      	mov	r9, r2
 8011786:	690a      	ldr	r2, [r1, #16]
 8011788:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801178c:	429a      	cmp	r2, r3
 801178e:	bfb8      	it	lt
 8011790:	460b      	movlt	r3, r1
 8011792:	460c      	mov	r4, r1
 8011794:	bfbc      	itt	lt
 8011796:	464c      	movlt	r4, r9
 8011798:	4699      	movlt	r9, r3
 801179a:	6927      	ldr	r7, [r4, #16]
 801179c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80117a0:	68a3      	ldr	r3, [r4, #8]
 80117a2:	6861      	ldr	r1, [r4, #4]
 80117a4:	eb07 060a 	add.w	r6, r7, sl
 80117a8:	42b3      	cmp	r3, r6
 80117aa:	b085      	sub	sp, #20
 80117ac:	bfb8      	it	lt
 80117ae:	3101      	addlt	r1, #1
 80117b0:	f7ff fed8 	bl	8011564 <_Balloc>
 80117b4:	b930      	cbnz	r0, 80117c4 <__multiply+0x44>
 80117b6:	4602      	mov	r2, r0
 80117b8:	4b44      	ldr	r3, [pc, #272]	; (80118cc <__multiply+0x14c>)
 80117ba:	4845      	ldr	r0, [pc, #276]	; (80118d0 <__multiply+0x150>)
 80117bc:	f240 115d 	movw	r1, #349	; 0x15d
 80117c0:	f000 fcb6 	bl	8012130 <__assert_func>
 80117c4:	f100 0514 	add.w	r5, r0, #20
 80117c8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80117cc:	462b      	mov	r3, r5
 80117ce:	2200      	movs	r2, #0
 80117d0:	4543      	cmp	r3, r8
 80117d2:	d321      	bcc.n	8011818 <__multiply+0x98>
 80117d4:	f104 0314 	add.w	r3, r4, #20
 80117d8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80117dc:	f109 0314 	add.w	r3, r9, #20
 80117e0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80117e4:	9202      	str	r2, [sp, #8]
 80117e6:	1b3a      	subs	r2, r7, r4
 80117e8:	3a15      	subs	r2, #21
 80117ea:	f022 0203 	bic.w	r2, r2, #3
 80117ee:	3204      	adds	r2, #4
 80117f0:	f104 0115 	add.w	r1, r4, #21
 80117f4:	428f      	cmp	r7, r1
 80117f6:	bf38      	it	cc
 80117f8:	2204      	movcc	r2, #4
 80117fa:	9201      	str	r2, [sp, #4]
 80117fc:	9a02      	ldr	r2, [sp, #8]
 80117fe:	9303      	str	r3, [sp, #12]
 8011800:	429a      	cmp	r2, r3
 8011802:	d80c      	bhi.n	801181e <__multiply+0x9e>
 8011804:	2e00      	cmp	r6, #0
 8011806:	dd03      	ble.n	8011810 <__multiply+0x90>
 8011808:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801180c:	2b00      	cmp	r3, #0
 801180e:	d05a      	beq.n	80118c6 <__multiply+0x146>
 8011810:	6106      	str	r6, [r0, #16]
 8011812:	b005      	add	sp, #20
 8011814:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011818:	f843 2b04 	str.w	r2, [r3], #4
 801181c:	e7d8      	b.n	80117d0 <__multiply+0x50>
 801181e:	f8b3 a000 	ldrh.w	sl, [r3]
 8011822:	f1ba 0f00 	cmp.w	sl, #0
 8011826:	d024      	beq.n	8011872 <__multiply+0xf2>
 8011828:	f104 0e14 	add.w	lr, r4, #20
 801182c:	46a9      	mov	r9, r5
 801182e:	f04f 0c00 	mov.w	ip, #0
 8011832:	f85e 2b04 	ldr.w	r2, [lr], #4
 8011836:	f8d9 1000 	ldr.w	r1, [r9]
 801183a:	fa1f fb82 	uxth.w	fp, r2
 801183e:	b289      	uxth	r1, r1
 8011840:	fb0a 110b 	mla	r1, sl, fp, r1
 8011844:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8011848:	f8d9 2000 	ldr.w	r2, [r9]
 801184c:	4461      	add	r1, ip
 801184e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8011852:	fb0a c20b 	mla	r2, sl, fp, ip
 8011856:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801185a:	b289      	uxth	r1, r1
 801185c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8011860:	4577      	cmp	r7, lr
 8011862:	f849 1b04 	str.w	r1, [r9], #4
 8011866:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801186a:	d8e2      	bhi.n	8011832 <__multiply+0xb2>
 801186c:	9a01      	ldr	r2, [sp, #4]
 801186e:	f845 c002 	str.w	ip, [r5, r2]
 8011872:	9a03      	ldr	r2, [sp, #12]
 8011874:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8011878:	3304      	adds	r3, #4
 801187a:	f1b9 0f00 	cmp.w	r9, #0
 801187e:	d020      	beq.n	80118c2 <__multiply+0x142>
 8011880:	6829      	ldr	r1, [r5, #0]
 8011882:	f104 0c14 	add.w	ip, r4, #20
 8011886:	46ae      	mov	lr, r5
 8011888:	f04f 0a00 	mov.w	sl, #0
 801188c:	f8bc b000 	ldrh.w	fp, [ip]
 8011890:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8011894:	fb09 220b 	mla	r2, r9, fp, r2
 8011898:	4492      	add	sl, r2
 801189a:	b289      	uxth	r1, r1
 801189c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80118a0:	f84e 1b04 	str.w	r1, [lr], #4
 80118a4:	f85c 2b04 	ldr.w	r2, [ip], #4
 80118a8:	f8be 1000 	ldrh.w	r1, [lr]
 80118ac:	0c12      	lsrs	r2, r2, #16
 80118ae:	fb09 1102 	mla	r1, r9, r2, r1
 80118b2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80118b6:	4567      	cmp	r7, ip
 80118b8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80118bc:	d8e6      	bhi.n	801188c <__multiply+0x10c>
 80118be:	9a01      	ldr	r2, [sp, #4]
 80118c0:	50a9      	str	r1, [r5, r2]
 80118c2:	3504      	adds	r5, #4
 80118c4:	e79a      	b.n	80117fc <__multiply+0x7c>
 80118c6:	3e01      	subs	r6, #1
 80118c8:	e79c      	b.n	8011804 <__multiply+0x84>
 80118ca:	bf00      	nop
 80118cc:	08014903 	.word	0x08014903
 80118d0:	08014914 	.word	0x08014914

080118d4 <__pow5mult>:
 80118d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80118d8:	4615      	mov	r5, r2
 80118da:	f012 0203 	ands.w	r2, r2, #3
 80118de:	4606      	mov	r6, r0
 80118e0:	460f      	mov	r7, r1
 80118e2:	d007      	beq.n	80118f4 <__pow5mult+0x20>
 80118e4:	4c25      	ldr	r4, [pc, #148]	; (801197c <__pow5mult+0xa8>)
 80118e6:	3a01      	subs	r2, #1
 80118e8:	2300      	movs	r3, #0
 80118ea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80118ee:	f7ff fe9b 	bl	8011628 <__multadd>
 80118f2:	4607      	mov	r7, r0
 80118f4:	10ad      	asrs	r5, r5, #2
 80118f6:	d03d      	beq.n	8011974 <__pow5mult+0xa0>
 80118f8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80118fa:	b97c      	cbnz	r4, 801191c <__pow5mult+0x48>
 80118fc:	2010      	movs	r0, #16
 80118fe:	f7ff fe29 	bl	8011554 <malloc>
 8011902:	4602      	mov	r2, r0
 8011904:	6270      	str	r0, [r6, #36]	; 0x24
 8011906:	b928      	cbnz	r0, 8011914 <__pow5mult+0x40>
 8011908:	4b1d      	ldr	r3, [pc, #116]	; (8011980 <__pow5mult+0xac>)
 801190a:	481e      	ldr	r0, [pc, #120]	; (8011984 <__pow5mult+0xb0>)
 801190c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8011910:	f000 fc0e 	bl	8012130 <__assert_func>
 8011914:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011918:	6004      	str	r4, [r0, #0]
 801191a:	60c4      	str	r4, [r0, #12]
 801191c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8011920:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011924:	b94c      	cbnz	r4, 801193a <__pow5mult+0x66>
 8011926:	f240 2171 	movw	r1, #625	; 0x271
 801192a:	4630      	mov	r0, r6
 801192c:	f7ff ff12 	bl	8011754 <__i2b>
 8011930:	2300      	movs	r3, #0
 8011932:	f8c8 0008 	str.w	r0, [r8, #8]
 8011936:	4604      	mov	r4, r0
 8011938:	6003      	str	r3, [r0, #0]
 801193a:	f04f 0900 	mov.w	r9, #0
 801193e:	07eb      	lsls	r3, r5, #31
 8011940:	d50a      	bpl.n	8011958 <__pow5mult+0x84>
 8011942:	4639      	mov	r1, r7
 8011944:	4622      	mov	r2, r4
 8011946:	4630      	mov	r0, r6
 8011948:	f7ff ff1a 	bl	8011780 <__multiply>
 801194c:	4639      	mov	r1, r7
 801194e:	4680      	mov	r8, r0
 8011950:	4630      	mov	r0, r6
 8011952:	f7ff fe47 	bl	80115e4 <_Bfree>
 8011956:	4647      	mov	r7, r8
 8011958:	106d      	asrs	r5, r5, #1
 801195a:	d00b      	beq.n	8011974 <__pow5mult+0xa0>
 801195c:	6820      	ldr	r0, [r4, #0]
 801195e:	b938      	cbnz	r0, 8011970 <__pow5mult+0x9c>
 8011960:	4622      	mov	r2, r4
 8011962:	4621      	mov	r1, r4
 8011964:	4630      	mov	r0, r6
 8011966:	f7ff ff0b 	bl	8011780 <__multiply>
 801196a:	6020      	str	r0, [r4, #0]
 801196c:	f8c0 9000 	str.w	r9, [r0]
 8011970:	4604      	mov	r4, r0
 8011972:	e7e4      	b.n	801193e <__pow5mult+0x6a>
 8011974:	4638      	mov	r0, r7
 8011976:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801197a:	bf00      	nop
 801197c:	08014a60 	.word	0x08014a60
 8011980:	08014891 	.word	0x08014891
 8011984:	08014914 	.word	0x08014914

08011988 <__lshift>:
 8011988:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801198c:	460c      	mov	r4, r1
 801198e:	6849      	ldr	r1, [r1, #4]
 8011990:	6923      	ldr	r3, [r4, #16]
 8011992:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8011996:	68a3      	ldr	r3, [r4, #8]
 8011998:	4607      	mov	r7, r0
 801199a:	4691      	mov	r9, r2
 801199c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80119a0:	f108 0601 	add.w	r6, r8, #1
 80119a4:	42b3      	cmp	r3, r6
 80119a6:	db0b      	blt.n	80119c0 <__lshift+0x38>
 80119a8:	4638      	mov	r0, r7
 80119aa:	f7ff fddb 	bl	8011564 <_Balloc>
 80119ae:	4605      	mov	r5, r0
 80119b0:	b948      	cbnz	r0, 80119c6 <__lshift+0x3e>
 80119b2:	4602      	mov	r2, r0
 80119b4:	4b2a      	ldr	r3, [pc, #168]	; (8011a60 <__lshift+0xd8>)
 80119b6:	482b      	ldr	r0, [pc, #172]	; (8011a64 <__lshift+0xdc>)
 80119b8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80119bc:	f000 fbb8 	bl	8012130 <__assert_func>
 80119c0:	3101      	adds	r1, #1
 80119c2:	005b      	lsls	r3, r3, #1
 80119c4:	e7ee      	b.n	80119a4 <__lshift+0x1c>
 80119c6:	2300      	movs	r3, #0
 80119c8:	f100 0114 	add.w	r1, r0, #20
 80119cc:	f100 0210 	add.w	r2, r0, #16
 80119d0:	4618      	mov	r0, r3
 80119d2:	4553      	cmp	r3, sl
 80119d4:	db37      	blt.n	8011a46 <__lshift+0xbe>
 80119d6:	6920      	ldr	r0, [r4, #16]
 80119d8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80119dc:	f104 0314 	add.w	r3, r4, #20
 80119e0:	f019 091f 	ands.w	r9, r9, #31
 80119e4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80119e8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80119ec:	d02f      	beq.n	8011a4e <__lshift+0xc6>
 80119ee:	f1c9 0e20 	rsb	lr, r9, #32
 80119f2:	468a      	mov	sl, r1
 80119f4:	f04f 0c00 	mov.w	ip, #0
 80119f8:	681a      	ldr	r2, [r3, #0]
 80119fa:	fa02 f209 	lsl.w	r2, r2, r9
 80119fe:	ea42 020c 	orr.w	r2, r2, ip
 8011a02:	f84a 2b04 	str.w	r2, [sl], #4
 8011a06:	f853 2b04 	ldr.w	r2, [r3], #4
 8011a0a:	4298      	cmp	r0, r3
 8011a0c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8011a10:	d8f2      	bhi.n	80119f8 <__lshift+0x70>
 8011a12:	1b03      	subs	r3, r0, r4
 8011a14:	3b15      	subs	r3, #21
 8011a16:	f023 0303 	bic.w	r3, r3, #3
 8011a1a:	3304      	adds	r3, #4
 8011a1c:	f104 0215 	add.w	r2, r4, #21
 8011a20:	4290      	cmp	r0, r2
 8011a22:	bf38      	it	cc
 8011a24:	2304      	movcc	r3, #4
 8011a26:	f841 c003 	str.w	ip, [r1, r3]
 8011a2a:	f1bc 0f00 	cmp.w	ip, #0
 8011a2e:	d001      	beq.n	8011a34 <__lshift+0xac>
 8011a30:	f108 0602 	add.w	r6, r8, #2
 8011a34:	3e01      	subs	r6, #1
 8011a36:	4638      	mov	r0, r7
 8011a38:	612e      	str	r6, [r5, #16]
 8011a3a:	4621      	mov	r1, r4
 8011a3c:	f7ff fdd2 	bl	80115e4 <_Bfree>
 8011a40:	4628      	mov	r0, r5
 8011a42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011a46:	f842 0f04 	str.w	r0, [r2, #4]!
 8011a4a:	3301      	adds	r3, #1
 8011a4c:	e7c1      	b.n	80119d2 <__lshift+0x4a>
 8011a4e:	3904      	subs	r1, #4
 8011a50:	f853 2b04 	ldr.w	r2, [r3], #4
 8011a54:	f841 2f04 	str.w	r2, [r1, #4]!
 8011a58:	4298      	cmp	r0, r3
 8011a5a:	d8f9      	bhi.n	8011a50 <__lshift+0xc8>
 8011a5c:	e7ea      	b.n	8011a34 <__lshift+0xac>
 8011a5e:	bf00      	nop
 8011a60:	08014903 	.word	0x08014903
 8011a64:	08014914 	.word	0x08014914

08011a68 <__mcmp>:
 8011a68:	b530      	push	{r4, r5, lr}
 8011a6a:	6902      	ldr	r2, [r0, #16]
 8011a6c:	690c      	ldr	r4, [r1, #16]
 8011a6e:	1b12      	subs	r2, r2, r4
 8011a70:	d10e      	bne.n	8011a90 <__mcmp+0x28>
 8011a72:	f100 0314 	add.w	r3, r0, #20
 8011a76:	3114      	adds	r1, #20
 8011a78:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8011a7c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8011a80:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8011a84:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8011a88:	42a5      	cmp	r5, r4
 8011a8a:	d003      	beq.n	8011a94 <__mcmp+0x2c>
 8011a8c:	d305      	bcc.n	8011a9a <__mcmp+0x32>
 8011a8e:	2201      	movs	r2, #1
 8011a90:	4610      	mov	r0, r2
 8011a92:	bd30      	pop	{r4, r5, pc}
 8011a94:	4283      	cmp	r3, r0
 8011a96:	d3f3      	bcc.n	8011a80 <__mcmp+0x18>
 8011a98:	e7fa      	b.n	8011a90 <__mcmp+0x28>
 8011a9a:	f04f 32ff 	mov.w	r2, #4294967295
 8011a9e:	e7f7      	b.n	8011a90 <__mcmp+0x28>

08011aa0 <__mdiff>:
 8011aa0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011aa4:	460c      	mov	r4, r1
 8011aa6:	4606      	mov	r6, r0
 8011aa8:	4611      	mov	r1, r2
 8011aaa:	4620      	mov	r0, r4
 8011aac:	4690      	mov	r8, r2
 8011aae:	f7ff ffdb 	bl	8011a68 <__mcmp>
 8011ab2:	1e05      	subs	r5, r0, #0
 8011ab4:	d110      	bne.n	8011ad8 <__mdiff+0x38>
 8011ab6:	4629      	mov	r1, r5
 8011ab8:	4630      	mov	r0, r6
 8011aba:	f7ff fd53 	bl	8011564 <_Balloc>
 8011abe:	b930      	cbnz	r0, 8011ace <__mdiff+0x2e>
 8011ac0:	4b3a      	ldr	r3, [pc, #232]	; (8011bac <__mdiff+0x10c>)
 8011ac2:	4602      	mov	r2, r0
 8011ac4:	f240 2132 	movw	r1, #562	; 0x232
 8011ac8:	4839      	ldr	r0, [pc, #228]	; (8011bb0 <__mdiff+0x110>)
 8011aca:	f000 fb31 	bl	8012130 <__assert_func>
 8011ace:	2301      	movs	r3, #1
 8011ad0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011ad4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ad8:	bfa4      	itt	ge
 8011ada:	4643      	movge	r3, r8
 8011adc:	46a0      	movge	r8, r4
 8011ade:	4630      	mov	r0, r6
 8011ae0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8011ae4:	bfa6      	itte	ge
 8011ae6:	461c      	movge	r4, r3
 8011ae8:	2500      	movge	r5, #0
 8011aea:	2501      	movlt	r5, #1
 8011aec:	f7ff fd3a 	bl	8011564 <_Balloc>
 8011af0:	b920      	cbnz	r0, 8011afc <__mdiff+0x5c>
 8011af2:	4b2e      	ldr	r3, [pc, #184]	; (8011bac <__mdiff+0x10c>)
 8011af4:	4602      	mov	r2, r0
 8011af6:	f44f 7110 	mov.w	r1, #576	; 0x240
 8011afa:	e7e5      	b.n	8011ac8 <__mdiff+0x28>
 8011afc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8011b00:	6926      	ldr	r6, [r4, #16]
 8011b02:	60c5      	str	r5, [r0, #12]
 8011b04:	f104 0914 	add.w	r9, r4, #20
 8011b08:	f108 0514 	add.w	r5, r8, #20
 8011b0c:	f100 0e14 	add.w	lr, r0, #20
 8011b10:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8011b14:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8011b18:	f108 0210 	add.w	r2, r8, #16
 8011b1c:	46f2      	mov	sl, lr
 8011b1e:	2100      	movs	r1, #0
 8011b20:	f859 3b04 	ldr.w	r3, [r9], #4
 8011b24:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8011b28:	fa1f f883 	uxth.w	r8, r3
 8011b2c:	fa11 f18b 	uxtah	r1, r1, fp
 8011b30:	0c1b      	lsrs	r3, r3, #16
 8011b32:	eba1 0808 	sub.w	r8, r1, r8
 8011b36:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8011b3a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8011b3e:	fa1f f888 	uxth.w	r8, r8
 8011b42:	1419      	asrs	r1, r3, #16
 8011b44:	454e      	cmp	r6, r9
 8011b46:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8011b4a:	f84a 3b04 	str.w	r3, [sl], #4
 8011b4e:	d8e7      	bhi.n	8011b20 <__mdiff+0x80>
 8011b50:	1b33      	subs	r3, r6, r4
 8011b52:	3b15      	subs	r3, #21
 8011b54:	f023 0303 	bic.w	r3, r3, #3
 8011b58:	3304      	adds	r3, #4
 8011b5a:	3415      	adds	r4, #21
 8011b5c:	42a6      	cmp	r6, r4
 8011b5e:	bf38      	it	cc
 8011b60:	2304      	movcc	r3, #4
 8011b62:	441d      	add	r5, r3
 8011b64:	4473      	add	r3, lr
 8011b66:	469e      	mov	lr, r3
 8011b68:	462e      	mov	r6, r5
 8011b6a:	4566      	cmp	r6, ip
 8011b6c:	d30e      	bcc.n	8011b8c <__mdiff+0xec>
 8011b6e:	f10c 0203 	add.w	r2, ip, #3
 8011b72:	1b52      	subs	r2, r2, r5
 8011b74:	f022 0203 	bic.w	r2, r2, #3
 8011b78:	3d03      	subs	r5, #3
 8011b7a:	45ac      	cmp	ip, r5
 8011b7c:	bf38      	it	cc
 8011b7e:	2200      	movcc	r2, #0
 8011b80:	441a      	add	r2, r3
 8011b82:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8011b86:	b17b      	cbz	r3, 8011ba8 <__mdiff+0x108>
 8011b88:	6107      	str	r7, [r0, #16]
 8011b8a:	e7a3      	b.n	8011ad4 <__mdiff+0x34>
 8011b8c:	f856 8b04 	ldr.w	r8, [r6], #4
 8011b90:	fa11 f288 	uxtah	r2, r1, r8
 8011b94:	1414      	asrs	r4, r2, #16
 8011b96:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8011b9a:	b292      	uxth	r2, r2
 8011b9c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8011ba0:	f84e 2b04 	str.w	r2, [lr], #4
 8011ba4:	1421      	asrs	r1, r4, #16
 8011ba6:	e7e0      	b.n	8011b6a <__mdiff+0xca>
 8011ba8:	3f01      	subs	r7, #1
 8011baa:	e7ea      	b.n	8011b82 <__mdiff+0xe2>
 8011bac:	08014903 	.word	0x08014903
 8011bb0:	08014914 	.word	0x08014914

08011bb4 <__d2b>:
 8011bb4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011bb8:	4689      	mov	r9, r1
 8011bba:	2101      	movs	r1, #1
 8011bbc:	ec57 6b10 	vmov	r6, r7, d0
 8011bc0:	4690      	mov	r8, r2
 8011bc2:	f7ff fccf 	bl	8011564 <_Balloc>
 8011bc6:	4604      	mov	r4, r0
 8011bc8:	b930      	cbnz	r0, 8011bd8 <__d2b+0x24>
 8011bca:	4602      	mov	r2, r0
 8011bcc:	4b25      	ldr	r3, [pc, #148]	; (8011c64 <__d2b+0xb0>)
 8011bce:	4826      	ldr	r0, [pc, #152]	; (8011c68 <__d2b+0xb4>)
 8011bd0:	f240 310a 	movw	r1, #778	; 0x30a
 8011bd4:	f000 faac 	bl	8012130 <__assert_func>
 8011bd8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8011bdc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8011be0:	bb35      	cbnz	r5, 8011c30 <__d2b+0x7c>
 8011be2:	2e00      	cmp	r6, #0
 8011be4:	9301      	str	r3, [sp, #4]
 8011be6:	d028      	beq.n	8011c3a <__d2b+0x86>
 8011be8:	4668      	mov	r0, sp
 8011bea:	9600      	str	r6, [sp, #0]
 8011bec:	f7ff fd82 	bl	80116f4 <__lo0bits>
 8011bf0:	9900      	ldr	r1, [sp, #0]
 8011bf2:	b300      	cbz	r0, 8011c36 <__d2b+0x82>
 8011bf4:	9a01      	ldr	r2, [sp, #4]
 8011bf6:	f1c0 0320 	rsb	r3, r0, #32
 8011bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8011bfe:	430b      	orrs	r3, r1
 8011c00:	40c2      	lsrs	r2, r0
 8011c02:	6163      	str	r3, [r4, #20]
 8011c04:	9201      	str	r2, [sp, #4]
 8011c06:	9b01      	ldr	r3, [sp, #4]
 8011c08:	61a3      	str	r3, [r4, #24]
 8011c0a:	2b00      	cmp	r3, #0
 8011c0c:	bf14      	ite	ne
 8011c0e:	2202      	movne	r2, #2
 8011c10:	2201      	moveq	r2, #1
 8011c12:	6122      	str	r2, [r4, #16]
 8011c14:	b1d5      	cbz	r5, 8011c4c <__d2b+0x98>
 8011c16:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8011c1a:	4405      	add	r5, r0
 8011c1c:	f8c9 5000 	str.w	r5, [r9]
 8011c20:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8011c24:	f8c8 0000 	str.w	r0, [r8]
 8011c28:	4620      	mov	r0, r4
 8011c2a:	b003      	add	sp, #12
 8011c2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011c30:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011c34:	e7d5      	b.n	8011be2 <__d2b+0x2e>
 8011c36:	6161      	str	r1, [r4, #20]
 8011c38:	e7e5      	b.n	8011c06 <__d2b+0x52>
 8011c3a:	a801      	add	r0, sp, #4
 8011c3c:	f7ff fd5a 	bl	80116f4 <__lo0bits>
 8011c40:	9b01      	ldr	r3, [sp, #4]
 8011c42:	6163      	str	r3, [r4, #20]
 8011c44:	2201      	movs	r2, #1
 8011c46:	6122      	str	r2, [r4, #16]
 8011c48:	3020      	adds	r0, #32
 8011c4a:	e7e3      	b.n	8011c14 <__d2b+0x60>
 8011c4c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011c50:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8011c54:	f8c9 0000 	str.w	r0, [r9]
 8011c58:	6918      	ldr	r0, [r3, #16]
 8011c5a:	f7ff fd2b 	bl	80116b4 <__hi0bits>
 8011c5e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011c62:	e7df      	b.n	8011c24 <__d2b+0x70>
 8011c64:	08014903 	.word	0x08014903
 8011c68:	08014914 	.word	0x08014914

08011c6c <_calloc_r>:
 8011c6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011c6e:	fba1 2402 	umull	r2, r4, r1, r2
 8011c72:	b94c      	cbnz	r4, 8011c88 <_calloc_r+0x1c>
 8011c74:	4611      	mov	r1, r2
 8011c76:	9201      	str	r2, [sp, #4]
 8011c78:	f000 f87a 	bl	8011d70 <_malloc_r>
 8011c7c:	9a01      	ldr	r2, [sp, #4]
 8011c7e:	4605      	mov	r5, r0
 8011c80:	b930      	cbnz	r0, 8011c90 <_calloc_r+0x24>
 8011c82:	4628      	mov	r0, r5
 8011c84:	b003      	add	sp, #12
 8011c86:	bd30      	pop	{r4, r5, pc}
 8011c88:	220c      	movs	r2, #12
 8011c8a:	6002      	str	r2, [r0, #0]
 8011c8c:	2500      	movs	r5, #0
 8011c8e:	e7f8      	b.n	8011c82 <_calloc_r+0x16>
 8011c90:	4621      	mov	r1, r4
 8011c92:	f7fe f92b 	bl	800feec <memset>
 8011c96:	e7f4      	b.n	8011c82 <_calloc_r+0x16>

08011c98 <_free_r>:
 8011c98:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011c9a:	2900      	cmp	r1, #0
 8011c9c:	d044      	beq.n	8011d28 <_free_r+0x90>
 8011c9e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011ca2:	9001      	str	r0, [sp, #4]
 8011ca4:	2b00      	cmp	r3, #0
 8011ca6:	f1a1 0404 	sub.w	r4, r1, #4
 8011caa:	bfb8      	it	lt
 8011cac:	18e4      	addlt	r4, r4, r3
 8011cae:	f000 fa9b 	bl	80121e8 <__malloc_lock>
 8011cb2:	4a1e      	ldr	r2, [pc, #120]	; (8011d2c <_free_r+0x94>)
 8011cb4:	9801      	ldr	r0, [sp, #4]
 8011cb6:	6813      	ldr	r3, [r2, #0]
 8011cb8:	b933      	cbnz	r3, 8011cc8 <_free_r+0x30>
 8011cba:	6063      	str	r3, [r4, #4]
 8011cbc:	6014      	str	r4, [r2, #0]
 8011cbe:	b003      	add	sp, #12
 8011cc0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011cc4:	f000 ba96 	b.w	80121f4 <__malloc_unlock>
 8011cc8:	42a3      	cmp	r3, r4
 8011cca:	d908      	bls.n	8011cde <_free_r+0x46>
 8011ccc:	6825      	ldr	r5, [r4, #0]
 8011cce:	1961      	adds	r1, r4, r5
 8011cd0:	428b      	cmp	r3, r1
 8011cd2:	bf01      	itttt	eq
 8011cd4:	6819      	ldreq	r1, [r3, #0]
 8011cd6:	685b      	ldreq	r3, [r3, #4]
 8011cd8:	1949      	addeq	r1, r1, r5
 8011cda:	6021      	streq	r1, [r4, #0]
 8011cdc:	e7ed      	b.n	8011cba <_free_r+0x22>
 8011cde:	461a      	mov	r2, r3
 8011ce0:	685b      	ldr	r3, [r3, #4]
 8011ce2:	b10b      	cbz	r3, 8011ce8 <_free_r+0x50>
 8011ce4:	42a3      	cmp	r3, r4
 8011ce6:	d9fa      	bls.n	8011cde <_free_r+0x46>
 8011ce8:	6811      	ldr	r1, [r2, #0]
 8011cea:	1855      	adds	r5, r2, r1
 8011cec:	42a5      	cmp	r5, r4
 8011cee:	d10b      	bne.n	8011d08 <_free_r+0x70>
 8011cf0:	6824      	ldr	r4, [r4, #0]
 8011cf2:	4421      	add	r1, r4
 8011cf4:	1854      	adds	r4, r2, r1
 8011cf6:	42a3      	cmp	r3, r4
 8011cf8:	6011      	str	r1, [r2, #0]
 8011cfa:	d1e0      	bne.n	8011cbe <_free_r+0x26>
 8011cfc:	681c      	ldr	r4, [r3, #0]
 8011cfe:	685b      	ldr	r3, [r3, #4]
 8011d00:	6053      	str	r3, [r2, #4]
 8011d02:	4421      	add	r1, r4
 8011d04:	6011      	str	r1, [r2, #0]
 8011d06:	e7da      	b.n	8011cbe <_free_r+0x26>
 8011d08:	d902      	bls.n	8011d10 <_free_r+0x78>
 8011d0a:	230c      	movs	r3, #12
 8011d0c:	6003      	str	r3, [r0, #0]
 8011d0e:	e7d6      	b.n	8011cbe <_free_r+0x26>
 8011d10:	6825      	ldr	r5, [r4, #0]
 8011d12:	1961      	adds	r1, r4, r5
 8011d14:	428b      	cmp	r3, r1
 8011d16:	bf04      	itt	eq
 8011d18:	6819      	ldreq	r1, [r3, #0]
 8011d1a:	685b      	ldreq	r3, [r3, #4]
 8011d1c:	6063      	str	r3, [r4, #4]
 8011d1e:	bf04      	itt	eq
 8011d20:	1949      	addeq	r1, r1, r5
 8011d22:	6021      	streq	r1, [r4, #0]
 8011d24:	6054      	str	r4, [r2, #4]
 8011d26:	e7ca      	b.n	8011cbe <_free_r+0x26>
 8011d28:	b003      	add	sp, #12
 8011d2a:	bd30      	pop	{r4, r5, pc}
 8011d2c:	2000633c 	.word	0x2000633c

08011d30 <sbrk_aligned>:
 8011d30:	b570      	push	{r4, r5, r6, lr}
 8011d32:	4e0e      	ldr	r6, [pc, #56]	; (8011d6c <sbrk_aligned+0x3c>)
 8011d34:	460c      	mov	r4, r1
 8011d36:	6831      	ldr	r1, [r6, #0]
 8011d38:	4605      	mov	r5, r0
 8011d3a:	b911      	cbnz	r1, 8011d42 <sbrk_aligned+0x12>
 8011d3c:	f000 f9e8 	bl	8012110 <_sbrk_r>
 8011d40:	6030      	str	r0, [r6, #0]
 8011d42:	4621      	mov	r1, r4
 8011d44:	4628      	mov	r0, r5
 8011d46:	f000 f9e3 	bl	8012110 <_sbrk_r>
 8011d4a:	1c43      	adds	r3, r0, #1
 8011d4c:	d00a      	beq.n	8011d64 <sbrk_aligned+0x34>
 8011d4e:	1cc4      	adds	r4, r0, #3
 8011d50:	f024 0403 	bic.w	r4, r4, #3
 8011d54:	42a0      	cmp	r0, r4
 8011d56:	d007      	beq.n	8011d68 <sbrk_aligned+0x38>
 8011d58:	1a21      	subs	r1, r4, r0
 8011d5a:	4628      	mov	r0, r5
 8011d5c:	f000 f9d8 	bl	8012110 <_sbrk_r>
 8011d60:	3001      	adds	r0, #1
 8011d62:	d101      	bne.n	8011d68 <sbrk_aligned+0x38>
 8011d64:	f04f 34ff 	mov.w	r4, #4294967295
 8011d68:	4620      	mov	r0, r4
 8011d6a:	bd70      	pop	{r4, r5, r6, pc}
 8011d6c:	20006340 	.word	0x20006340

08011d70 <_malloc_r>:
 8011d70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011d74:	1ccd      	adds	r5, r1, #3
 8011d76:	f025 0503 	bic.w	r5, r5, #3
 8011d7a:	3508      	adds	r5, #8
 8011d7c:	2d0c      	cmp	r5, #12
 8011d7e:	bf38      	it	cc
 8011d80:	250c      	movcc	r5, #12
 8011d82:	2d00      	cmp	r5, #0
 8011d84:	4607      	mov	r7, r0
 8011d86:	db01      	blt.n	8011d8c <_malloc_r+0x1c>
 8011d88:	42a9      	cmp	r1, r5
 8011d8a:	d905      	bls.n	8011d98 <_malloc_r+0x28>
 8011d8c:	230c      	movs	r3, #12
 8011d8e:	603b      	str	r3, [r7, #0]
 8011d90:	2600      	movs	r6, #0
 8011d92:	4630      	mov	r0, r6
 8011d94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011d98:	4e2e      	ldr	r6, [pc, #184]	; (8011e54 <_malloc_r+0xe4>)
 8011d9a:	f000 fa25 	bl	80121e8 <__malloc_lock>
 8011d9e:	6833      	ldr	r3, [r6, #0]
 8011da0:	461c      	mov	r4, r3
 8011da2:	bb34      	cbnz	r4, 8011df2 <_malloc_r+0x82>
 8011da4:	4629      	mov	r1, r5
 8011da6:	4638      	mov	r0, r7
 8011da8:	f7ff ffc2 	bl	8011d30 <sbrk_aligned>
 8011dac:	1c43      	adds	r3, r0, #1
 8011dae:	4604      	mov	r4, r0
 8011db0:	d14d      	bne.n	8011e4e <_malloc_r+0xde>
 8011db2:	6834      	ldr	r4, [r6, #0]
 8011db4:	4626      	mov	r6, r4
 8011db6:	2e00      	cmp	r6, #0
 8011db8:	d140      	bne.n	8011e3c <_malloc_r+0xcc>
 8011dba:	6823      	ldr	r3, [r4, #0]
 8011dbc:	4631      	mov	r1, r6
 8011dbe:	4638      	mov	r0, r7
 8011dc0:	eb04 0803 	add.w	r8, r4, r3
 8011dc4:	f000 f9a4 	bl	8012110 <_sbrk_r>
 8011dc8:	4580      	cmp	r8, r0
 8011dca:	d13a      	bne.n	8011e42 <_malloc_r+0xd2>
 8011dcc:	6821      	ldr	r1, [r4, #0]
 8011dce:	3503      	adds	r5, #3
 8011dd0:	1a6d      	subs	r5, r5, r1
 8011dd2:	f025 0503 	bic.w	r5, r5, #3
 8011dd6:	3508      	adds	r5, #8
 8011dd8:	2d0c      	cmp	r5, #12
 8011dda:	bf38      	it	cc
 8011ddc:	250c      	movcc	r5, #12
 8011dde:	4629      	mov	r1, r5
 8011de0:	4638      	mov	r0, r7
 8011de2:	f7ff ffa5 	bl	8011d30 <sbrk_aligned>
 8011de6:	3001      	adds	r0, #1
 8011de8:	d02b      	beq.n	8011e42 <_malloc_r+0xd2>
 8011dea:	6823      	ldr	r3, [r4, #0]
 8011dec:	442b      	add	r3, r5
 8011dee:	6023      	str	r3, [r4, #0]
 8011df0:	e00e      	b.n	8011e10 <_malloc_r+0xa0>
 8011df2:	6822      	ldr	r2, [r4, #0]
 8011df4:	1b52      	subs	r2, r2, r5
 8011df6:	d41e      	bmi.n	8011e36 <_malloc_r+0xc6>
 8011df8:	2a0b      	cmp	r2, #11
 8011dfa:	d916      	bls.n	8011e2a <_malloc_r+0xba>
 8011dfc:	1961      	adds	r1, r4, r5
 8011dfe:	42a3      	cmp	r3, r4
 8011e00:	6025      	str	r5, [r4, #0]
 8011e02:	bf18      	it	ne
 8011e04:	6059      	strne	r1, [r3, #4]
 8011e06:	6863      	ldr	r3, [r4, #4]
 8011e08:	bf08      	it	eq
 8011e0a:	6031      	streq	r1, [r6, #0]
 8011e0c:	5162      	str	r2, [r4, r5]
 8011e0e:	604b      	str	r3, [r1, #4]
 8011e10:	4638      	mov	r0, r7
 8011e12:	f104 060b 	add.w	r6, r4, #11
 8011e16:	f000 f9ed 	bl	80121f4 <__malloc_unlock>
 8011e1a:	f026 0607 	bic.w	r6, r6, #7
 8011e1e:	1d23      	adds	r3, r4, #4
 8011e20:	1af2      	subs	r2, r6, r3
 8011e22:	d0b6      	beq.n	8011d92 <_malloc_r+0x22>
 8011e24:	1b9b      	subs	r3, r3, r6
 8011e26:	50a3      	str	r3, [r4, r2]
 8011e28:	e7b3      	b.n	8011d92 <_malloc_r+0x22>
 8011e2a:	6862      	ldr	r2, [r4, #4]
 8011e2c:	42a3      	cmp	r3, r4
 8011e2e:	bf0c      	ite	eq
 8011e30:	6032      	streq	r2, [r6, #0]
 8011e32:	605a      	strne	r2, [r3, #4]
 8011e34:	e7ec      	b.n	8011e10 <_malloc_r+0xa0>
 8011e36:	4623      	mov	r3, r4
 8011e38:	6864      	ldr	r4, [r4, #4]
 8011e3a:	e7b2      	b.n	8011da2 <_malloc_r+0x32>
 8011e3c:	4634      	mov	r4, r6
 8011e3e:	6876      	ldr	r6, [r6, #4]
 8011e40:	e7b9      	b.n	8011db6 <_malloc_r+0x46>
 8011e42:	230c      	movs	r3, #12
 8011e44:	603b      	str	r3, [r7, #0]
 8011e46:	4638      	mov	r0, r7
 8011e48:	f000 f9d4 	bl	80121f4 <__malloc_unlock>
 8011e4c:	e7a1      	b.n	8011d92 <_malloc_r+0x22>
 8011e4e:	6025      	str	r5, [r4, #0]
 8011e50:	e7de      	b.n	8011e10 <_malloc_r+0xa0>
 8011e52:	bf00      	nop
 8011e54:	2000633c 	.word	0x2000633c

08011e58 <__ssputs_r>:
 8011e58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011e5c:	688e      	ldr	r6, [r1, #8]
 8011e5e:	429e      	cmp	r6, r3
 8011e60:	4682      	mov	sl, r0
 8011e62:	460c      	mov	r4, r1
 8011e64:	4690      	mov	r8, r2
 8011e66:	461f      	mov	r7, r3
 8011e68:	d838      	bhi.n	8011edc <__ssputs_r+0x84>
 8011e6a:	898a      	ldrh	r2, [r1, #12]
 8011e6c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011e70:	d032      	beq.n	8011ed8 <__ssputs_r+0x80>
 8011e72:	6825      	ldr	r5, [r4, #0]
 8011e74:	6909      	ldr	r1, [r1, #16]
 8011e76:	eba5 0901 	sub.w	r9, r5, r1
 8011e7a:	6965      	ldr	r5, [r4, #20]
 8011e7c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011e80:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011e84:	3301      	adds	r3, #1
 8011e86:	444b      	add	r3, r9
 8011e88:	106d      	asrs	r5, r5, #1
 8011e8a:	429d      	cmp	r5, r3
 8011e8c:	bf38      	it	cc
 8011e8e:	461d      	movcc	r5, r3
 8011e90:	0553      	lsls	r3, r2, #21
 8011e92:	d531      	bpl.n	8011ef8 <__ssputs_r+0xa0>
 8011e94:	4629      	mov	r1, r5
 8011e96:	f7ff ff6b 	bl	8011d70 <_malloc_r>
 8011e9a:	4606      	mov	r6, r0
 8011e9c:	b950      	cbnz	r0, 8011eb4 <__ssputs_r+0x5c>
 8011e9e:	230c      	movs	r3, #12
 8011ea0:	f8ca 3000 	str.w	r3, [sl]
 8011ea4:	89a3      	ldrh	r3, [r4, #12]
 8011ea6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011eaa:	81a3      	strh	r3, [r4, #12]
 8011eac:	f04f 30ff 	mov.w	r0, #4294967295
 8011eb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011eb4:	6921      	ldr	r1, [r4, #16]
 8011eb6:	464a      	mov	r2, r9
 8011eb8:	f7fe f80a 	bl	800fed0 <memcpy>
 8011ebc:	89a3      	ldrh	r3, [r4, #12]
 8011ebe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8011ec2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011ec6:	81a3      	strh	r3, [r4, #12]
 8011ec8:	6126      	str	r6, [r4, #16]
 8011eca:	6165      	str	r5, [r4, #20]
 8011ecc:	444e      	add	r6, r9
 8011ece:	eba5 0509 	sub.w	r5, r5, r9
 8011ed2:	6026      	str	r6, [r4, #0]
 8011ed4:	60a5      	str	r5, [r4, #8]
 8011ed6:	463e      	mov	r6, r7
 8011ed8:	42be      	cmp	r6, r7
 8011eda:	d900      	bls.n	8011ede <__ssputs_r+0x86>
 8011edc:	463e      	mov	r6, r7
 8011ede:	6820      	ldr	r0, [r4, #0]
 8011ee0:	4632      	mov	r2, r6
 8011ee2:	4641      	mov	r1, r8
 8011ee4:	f000 f966 	bl	80121b4 <memmove>
 8011ee8:	68a3      	ldr	r3, [r4, #8]
 8011eea:	1b9b      	subs	r3, r3, r6
 8011eec:	60a3      	str	r3, [r4, #8]
 8011eee:	6823      	ldr	r3, [r4, #0]
 8011ef0:	4433      	add	r3, r6
 8011ef2:	6023      	str	r3, [r4, #0]
 8011ef4:	2000      	movs	r0, #0
 8011ef6:	e7db      	b.n	8011eb0 <__ssputs_r+0x58>
 8011ef8:	462a      	mov	r2, r5
 8011efa:	f000 f981 	bl	8012200 <_realloc_r>
 8011efe:	4606      	mov	r6, r0
 8011f00:	2800      	cmp	r0, #0
 8011f02:	d1e1      	bne.n	8011ec8 <__ssputs_r+0x70>
 8011f04:	6921      	ldr	r1, [r4, #16]
 8011f06:	4650      	mov	r0, sl
 8011f08:	f7ff fec6 	bl	8011c98 <_free_r>
 8011f0c:	e7c7      	b.n	8011e9e <__ssputs_r+0x46>
	...

08011f10 <_svfiprintf_r>:
 8011f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f14:	4698      	mov	r8, r3
 8011f16:	898b      	ldrh	r3, [r1, #12]
 8011f18:	061b      	lsls	r3, r3, #24
 8011f1a:	b09d      	sub	sp, #116	; 0x74
 8011f1c:	4607      	mov	r7, r0
 8011f1e:	460d      	mov	r5, r1
 8011f20:	4614      	mov	r4, r2
 8011f22:	d50e      	bpl.n	8011f42 <_svfiprintf_r+0x32>
 8011f24:	690b      	ldr	r3, [r1, #16]
 8011f26:	b963      	cbnz	r3, 8011f42 <_svfiprintf_r+0x32>
 8011f28:	2140      	movs	r1, #64	; 0x40
 8011f2a:	f7ff ff21 	bl	8011d70 <_malloc_r>
 8011f2e:	6028      	str	r0, [r5, #0]
 8011f30:	6128      	str	r0, [r5, #16]
 8011f32:	b920      	cbnz	r0, 8011f3e <_svfiprintf_r+0x2e>
 8011f34:	230c      	movs	r3, #12
 8011f36:	603b      	str	r3, [r7, #0]
 8011f38:	f04f 30ff 	mov.w	r0, #4294967295
 8011f3c:	e0d1      	b.n	80120e2 <_svfiprintf_r+0x1d2>
 8011f3e:	2340      	movs	r3, #64	; 0x40
 8011f40:	616b      	str	r3, [r5, #20]
 8011f42:	2300      	movs	r3, #0
 8011f44:	9309      	str	r3, [sp, #36]	; 0x24
 8011f46:	2320      	movs	r3, #32
 8011f48:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011f4c:	f8cd 800c 	str.w	r8, [sp, #12]
 8011f50:	2330      	movs	r3, #48	; 0x30
 8011f52:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80120fc <_svfiprintf_r+0x1ec>
 8011f56:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011f5a:	f04f 0901 	mov.w	r9, #1
 8011f5e:	4623      	mov	r3, r4
 8011f60:	469a      	mov	sl, r3
 8011f62:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011f66:	b10a      	cbz	r2, 8011f6c <_svfiprintf_r+0x5c>
 8011f68:	2a25      	cmp	r2, #37	; 0x25
 8011f6a:	d1f9      	bne.n	8011f60 <_svfiprintf_r+0x50>
 8011f6c:	ebba 0b04 	subs.w	fp, sl, r4
 8011f70:	d00b      	beq.n	8011f8a <_svfiprintf_r+0x7a>
 8011f72:	465b      	mov	r3, fp
 8011f74:	4622      	mov	r2, r4
 8011f76:	4629      	mov	r1, r5
 8011f78:	4638      	mov	r0, r7
 8011f7a:	f7ff ff6d 	bl	8011e58 <__ssputs_r>
 8011f7e:	3001      	adds	r0, #1
 8011f80:	f000 80aa 	beq.w	80120d8 <_svfiprintf_r+0x1c8>
 8011f84:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011f86:	445a      	add	r2, fp
 8011f88:	9209      	str	r2, [sp, #36]	; 0x24
 8011f8a:	f89a 3000 	ldrb.w	r3, [sl]
 8011f8e:	2b00      	cmp	r3, #0
 8011f90:	f000 80a2 	beq.w	80120d8 <_svfiprintf_r+0x1c8>
 8011f94:	2300      	movs	r3, #0
 8011f96:	f04f 32ff 	mov.w	r2, #4294967295
 8011f9a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011f9e:	f10a 0a01 	add.w	sl, sl, #1
 8011fa2:	9304      	str	r3, [sp, #16]
 8011fa4:	9307      	str	r3, [sp, #28]
 8011fa6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011faa:	931a      	str	r3, [sp, #104]	; 0x68
 8011fac:	4654      	mov	r4, sl
 8011fae:	2205      	movs	r2, #5
 8011fb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011fb4:	4851      	ldr	r0, [pc, #324]	; (80120fc <_svfiprintf_r+0x1ec>)
 8011fb6:	f7ee f92b 	bl	8000210 <memchr>
 8011fba:	9a04      	ldr	r2, [sp, #16]
 8011fbc:	b9d8      	cbnz	r0, 8011ff6 <_svfiprintf_r+0xe6>
 8011fbe:	06d0      	lsls	r0, r2, #27
 8011fc0:	bf44      	itt	mi
 8011fc2:	2320      	movmi	r3, #32
 8011fc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011fc8:	0711      	lsls	r1, r2, #28
 8011fca:	bf44      	itt	mi
 8011fcc:	232b      	movmi	r3, #43	; 0x2b
 8011fce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011fd2:	f89a 3000 	ldrb.w	r3, [sl]
 8011fd6:	2b2a      	cmp	r3, #42	; 0x2a
 8011fd8:	d015      	beq.n	8012006 <_svfiprintf_r+0xf6>
 8011fda:	9a07      	ldr	r2, [sp, #28]
 8011fdc:	4654      	mov	r4, sl
 8011fde:	2000      	movs	r0, #0
 8011fe0:	f04f 0c0a 	mov.w	ip, #10
 8011fe4:	4621      	mov	r1, r4
 8011fe6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011fea:	3b30      	subs	r3, #48	; 0x30
 8011fec:	2b09      	cmp	r3, #9
 8011fee:	d94e      	bls.n	801208e <_svfiprintf_r+0x17e>
 8011ff0:	b1b0      	cbz	r0, 8012020 <_svfiprintf_r+0x110>
 8011ff2:	9207      	str	r2, [sp, #28]
 8011ff4:	e014      	b.n	8012020 <_svfiprintf_r+0x110>
 8011ff6:	eba0 0308 	sub.w	r3, r0, r8
 8011ffa:	fa09 f303 	lsl.w	r3, r9, r3
 8011ffe:	4313      	orrs	r3, r2
 8012000:	9304      	str	r3, [sp, #16]
 8012002:	46a2      	mov	sl, r4
 8012004:	e7d2      	b.n	8011fac <_svfiprintf_r+0x9c>
 8012006:	9b03      	ldr	r3, [sp, #12]
 8012008:	1d19      	adds	r1, r3, #4
 801200a:	681b      	ldr	r3, [r3, #0]
 801200c:	9103      	str	r1, [sp, #12]
 801200e:	2b00      	cmp	r3, #0
 8012010:	bfbb      	ittet	lt
 8012012:	425b      	neglt	r3, r3
 8012014:	f042 0202 	orrlt.w	r2, r2, #2
 8012018:	9307      	strge	r3, [sp, #28]
 801201a:	9307      	strlt	r3, [sp, #28]
 801201c:	bfb8      	it	lt
 801201e:	9204      	strlt	r2, [sp, #16]
 8012020:	7823      	ldrb	r3, [r4, #0]
 8012022:	2b2e      	cmp	r3, #46	; 0x2e
 8012024:	d10c      	bne.n	8012040 <_svfiprintf_r+0x130>
 8012026:	7863      	ldrb	r3, [r4, #1]
 8012028:	2b2a      	cmp	r3, #42	; 0x2a
 801202a:	d135      	bne.n	8012098 <_svfiprintf_r+0x188>
 801202c:	9b03      	ldr	r3, [sp, #12]
 801202e:	1d1a      	adds	r2, r3, #4
 8012030:	681b      	ldr	r3, [r3, #0]
 8012032:	9203      	str	r2, [sp, #12]
 8012034:	2b00      	cmp	r3, #0
 8012036:	bfb8      	it	lt
 8012038:	f04f 33ff 	movlt.w	r3, #4294967295
 801203c:	3402      	adds	r4, #2
 801203e:	9305      	str	r3, [sp, #20]
 8012040:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801210c <_svfiprintf_r+0x1fc>
 8012044:	7821      	ldrb	r1, [r4, #0]
 8012046:	2203      	movs	r2, #3
 8012048:	4650      	mov	r0, sl
 801204a:	f7ee f8e1 	bl	8000210 <memchr>
 801204e:	b140      	cbz	r0, 8012062 <_svfiprintf_r+0x152>
 8012050:	2340      	movs	r3, #64	; 0x40
 8012052:	eba0 000a 	sub.w	r0, r0, sl
 8012056:	fa03 f000 	lsl.w	r0, r3, r0
 801205a:	9b04      	ldr	r3, [sp, #16]
 801205c:	4303      	orrs	r3, r0
 801205e:	3401      	adds	r4, #1
 8012060:	9304      	str	r3, [sp, #16]
 8012062:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012066:	4826      	ldr	r0, [pc, #152]	; (8012100 <_svfiprintf_r+0x1f0>)
 8012068:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801206c:	2206      	movs	r2, #6
 801206e:	f7ee f8cf 	bl	8000210 <memchr>
 8012072:	2800      	cmp	r0, #0
 8012074:	d038      	beq.n	80120e8 <_svfiprintf_r+0x1d8>
 8012076:	4b23      	ldr	r3, [pc, #140]	; (8012104 <_svfiprintf_r+0x1f4>)
 8012078:	bb1b      	cbnz	r3, 80120c2 <_svfiprintf_r+0x1b2>
 801207a:	9b03      	ldr	r3, [sp, #12]
 801207c:	3307      	adds	r3, #7
 801207e:	f023 0307 	bic.w	r3, r3, #7
 8012082:	3308      	adds	r3, #8
 8012084:	9303      	str	r3, [sp, #12]
 8012086:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012088:	4433      	add	r3, r6
 801208a:	9309      	str	r3, [sp, #36]	; 0x24
 801208c:	e767      	b.n	8011f5e <_svfiprintf_r+0x4e>
 801208e:	fb0c 3202 	mla	r2, ip, r2, r3
 8012092:	460c      	mov	r4, r1
 8012094:	2001      	movs	r0, #1
 8012096:	e7a5      	b.n	8011fe4 <_svfiprintf_r+0xd4>
 8012098:	2300      	movs	r3, #0
 801209a:	3401      	adds	r4, #1
 801209c:	9305      	str	r3, [sp, #20]
 801209e:	4619      	mov	r1, r3
 80120a0:	f04f 0c0a 	mov.w	ip, #10
 80120a4:	4620      	mov	r0, r4
 80120a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80120aa:	3a30      	subs	r2, #48	; 0x30
 80120ac:	2a09      	cmp	r2, #9
 80120ae:	d903      	bls.n	80120b8 <_svfiprintf_r+0x1a8>
 80120b0:	2b00      	cmp	r3, #0
 80120b2:	d0c5      	beq.n	8012040 <_svfiprintf_r+0x130>
 80120b4:	9105      	str	r1, [sp, #20]
 80120b6:	e7c3      	b.n	8012040 <_svfiprintf_r+0x130>
 80120b8:	fb0c 2101 	mla	r1, ip, r1, r2
 80120bc:	4604      	mov	r4, r0
 80120be:	2301      	movs	r3, #1
 80120c0:	e7f0      	b.n	80120a4 <_svfiprintf_r+0x194>
 80120c2:	ab03      	add	r3, sp, #12
 80120c4:	9300      	str	r3, [sp, #0]
 80120c6:	462a      	mov	r2, r5
 80120c8:	4b0f      	ldr	r3, [pc, #60]	; (8012108 <_svfiprintf_r+0x1f8>)
 80120ca:	a904      	add	r1, sp, #16
 80120cc:	4638      	mov	r0, r7
 80120ce:	f7fd ffb5 	bl	801003c <_printf_float>
 80120d2:	1c42      	adds	r2, r0, #1
 80120d4:	4606      	mov	r6, r0
 80120d6:	d1d6      	bne.n	8012086 <_svfiprintf_r+0x176>
 80120d8:	89ab      	ldrh	r3, [r5, #12]
 80120da:	065b      	lsls	r3, r3, #25
 80120dc:	f53f af2c 	bmi.w	8011f38 <_svfiprintf_r+0x28>
 80120e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80120e2:	b01d      	add	sp, #116	; 0x74
 80120e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80120e8:	ab03      	add	r3, sp, #12
 80120ea:	9300      	str	r3, [sp, #0]
 80120ec:	462a      	mov	r2, r5
 80120ee:	4b06      	ldr	r3, [pc, #24]	; (8012108 <_svfiprintf_r+0x1f8>)
 80120f0:	a904      	add	r1, sp, #16
 80120f2:	4638      	mov	r0, r7
 80120f4:	f7fe fa46 	bl	8010584 <_printf_i>
 80120f8:	e7eb      	b.n	80120d2 <_svfiprintf_r+0x1c2>
 80120fa:	bf00      	nop
 80120fc:	08014a6c 	.word	0x08014a6c
 8012100:	08014a76 	.word	0x08014a76
 8012104:	0801003d 	.word	0x0801003d
 8012108:	08011e59 	.word	0x08011e59
 801210c:	08014a72 	.word	0x08014a72

08012110 <_sbrk_r>:
 8012110:	b538      	push	{r3, r4, r5, lr}
 8012112:	4d06      	ldr	r5, [pc, #24]	; (801212c <_sbrk_r+0x1c>)
 8012114:	2300      	movs	r3, #0
 8012116:	4604      	mov	r4, r0
 8012118:	4608      	mov	r0, r1
 801211a:	602b      	str	r3, [r5, #0]
 801211c:	f7f4 f9b2 	bl	8006484 <_sbrk>
 8012120:	1c43      	adds	r3, r0, #1
 8012122:	d102      	bne.n	801212a <_sbrk_r+0x1a>
 8012124:	682b      	ldr	r3, [r5, #0]
 8012126:	b103      	cbz	r3, 801212a <_sbrk_r+0x1a>
 8012128:	6023      	str	r3, [r4, #0]
 801212a:	bd38      	pop	{r3, r4, r5, pc}
 801212c:	20006344 	.word	0x20006344

08012130 <__assert_func>:
 8012130:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012132:	4614      	mov	r4, r2
 8012134:	461a      	mov	r2, r3
 8012136:	4b09      	ldr	r3, [pc, #36]	; (801215c <__assert_func+0x2c>)
 8012138:	681b      	ldr	r3, [r3, #0]
 801213a:	4605      	mov	r5, r0
 801213c:	68d8      	ldr	r0, [r3, #12]
 801213e:	b14c      	cbz	r4, 8012154 <__assert_func+0x24>
 8012140:	4b07      	ldr	r3, [pc, #28]	; (8012160 <__assert_func+0x30>)
 8012142:	9100      	str	r1, [sp, #0]
 8012144:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012148:	4906      	ldr	r1, [pc, #24]	; (8012164 <__assert_func+0x34>)
 801214a:	462b      	mov	r3, r5
 801214c:	f000 f80e 	bl	801216c <fiprintf>
 8012150:	f000 faac 	bl	80126ac <abort>
 8012154:	4b04      	ldr	r3, [pc, #16]	; (8012168 <__assert_func+0x38>)
 8012156:	461c      	mov	r4, r3
 8012158:	e7f3      	b.n	8012142 <__assert_func+0x12>
 801215a:	bf00      	nop
 801215c:	20000020 	.word	0x20000020
 8012160:	08014a7d 	.word	0x08014a7d
 8012164:	08014a8a 	.word	0x08014a8a
 8012168:	08014ab8 	.word	0x08014ab8

0801216c <fiprintf>:
 801216c:	b40e      	push	{r1, r2, r3}
 801216e:	b503      	push	{r0, r1, lr}
 8012170:	4601      	mov	r1, r0
 8012172:	ab03      	add	r3, sp, #12
 8012174:	4805      	ldr	r0, [pc, #20]	; (801218c <fiprintf+0x20>)
 8012176:	f853 2b04 	ldr.w	r2, [r3], #4
 801217a:	6800      	ldr	r0, [r0, #0]
 801217c:	9301      	str	r3, [sp, #4]
 801217e:	f000 f897 	bl	80122b0 <_vfiprintf_r>
 8012182:	b002      	add	sp, #8
 8012184:	f85d eb04 	ldr.w	lr, [sp], #4
 8012188:	b003      	add	sp, #12
 801218a:	4770      	bx	lr
 801218c:	20000020 	.word	0x20000020

08012190 <__ascii_mbtowc>:
 8012190:	b082      	sub	sp, #8
 8012192:	b901      	cbnz	r1, 8012196 <__ascii_mbtowc+0x6>
 8012194:	a901      	add	r1, sp, #4
 8012196:	b142      	cbz	r2, 80121aa <__ascii_mbtowc+0x1a>
 8012198:	b14b      	cbz	r3, 80121ae <__ascii_mbtowc+0x1e>
 801219a:	7813      	ldrb	r3, [r2, #0]
 801219c:	600b      	str	r3, [r1, #0]
 801219e:	7812      	ldrb	r2, [r2, #0]
 80121a0:	1e10      	subs	r0, r2, #0
 80121a2:	bf18      	it	ne
 80121a4:	2001      	movne	r0, #1
 80121a6:	b002      	add	sp, #8
 80121a8:	4770      	bx	lr
 80121aa:	4610      	mov	r0, r2
 80121ac:	e7fb      	b.n	80121a6 <__ascii_mbtowc+0x16>
 80121ae:	f06f 0001 	mvn.w	r0, #1
 80121b2:	e7f8      	b.n	80121a6 <__ascii_mbtowc+0x16>

080121b4 <memmove>:
 80121b4:	4288      	cmp	r0, r1
 80121b6:	b510      	push	{r4, lr}
 80121b8:	eb01 0402 	add.w	r4, r1, r2
 80121bc:	d902      	bls.n	80121c4 <memmove+0x10>
 80121be:	4284      	cmp	r4, r0
 80121c0:	4623      	mov	r3, r4
 80121c2:	d807      	bhi.n	80121d4 <memmove+0x20>
 80121c4:	1e43      	subs	r3, r0, #1
 80121c6:	42a1      	cmp	r1, r4
 80121c8:	d008      	beq.n	80121dc <memmove+0x28>
 80121ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 80121ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 80121d2:	e7f8      	b.n	80121c6 <memmove+0x12>
 80121d4:	4402      	add	r2, r0
 80121d6:	4601      	mov	r1, r0
 80121d8:	428a      	cmp	r2, r1
 80121da:	d100      	bne.n	80121de <memmove+0x2a>
 80121dc:	bd10      	pop	{r4, pc}
 80121de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80121e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80121e6:	e7f7      	b.n	80121d8 <memmove+0x24>

080121e8 <__malloc_lock>:
 80121e8:	4801      	ldr	r0, [pc, #4]	; (80121f0 <__malloc_lock+0x8>)
 80121ea:	f000 bc1f 	b.w	8012a2c <__retarget_lock_acquire_recursive>
 80121ee:	bf00      	nop
 80121f0:	20006348 	.word	0x20006348

080121f4 <__malloc_unlock>:
 80121f4:	4801      	ldr	r0, [pc, #4]	; (80121fc <__malloc_unlock+0x8>)
 80121f6:	f000 bc1a 	b.w	8012a2e <__retarget_lock_release_recursive>
 80121fa:	bf00      	nop
 80121fc:	20006348 	.word	0x20006348

08012200 <_realloc_r>:
 8012200:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012204:	4680      	mov	r8, r0
 8012206:	4614      	mov	r4, r2
 8012208:	460e      	mov	r6, r1
 801220a:	b921      	cbnz	r1, 8012216 <_realloc_r+0x16>
 801220c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012210:	4611      	mov	r1, r2
 8012212:	f7ff bdad 	b.w	8011d70 <_malloc_r>
 8012216:	b92a      	cbnz	r2, 8012224 <_realloc_r+0x24>
 8012218:	f7ff fd3e 	bl	8011c98 <_free_r>
 801221c:	4625      	mov	r5, r4
 801221e:	4628      	mov	r0, r5
 8012220:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012224:	f000 fc6a 	bl	8012afc <_malloc_usable_size_r>
 8012228:	4284      	cmp	r4, r0
 801222a:	4607      	mov	r7, r0
 801222c:	d802      	bhi.n	8012234 <_realloc_r+0x34>
 801222e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8012232:	d812      	bhi.n	801225a <_realloc_r+0x5a>
 8012234:	4621      	mov	r1, r4
 8012236:	4640      	mov	r0, r8
 8012238:	f7ff fd9a 	bl	8011d70 <_malloc_r>
 801223c:	4605      	mov	r5, r0
 801223e:	2800      	cmp	r0, #0
 8012240:	d0ed      	beq.n	801221e <_realloc_r+0x1e>
 8012242:	42bc      	cmp	r4, r7
 8012244:	4622      	mov	r2, r4
 8012246:	4631      	mov	r1, r6
 8012248:	bf28      	it	cs
 801224a:	463a      	movcs	r2, r7
 801224c:	f7fd fe40 	bl	800fed0 <memcpy>
 8012250:	4631      	mov	r1, r6
 8012252:	4640      	mov	r0, r8
 8012254:	f7ff fd20 	bl	8011c98 <_free_r>
 8012258:	e7e1      	b.n	801221e <_realloc_r+0x1e>
 801225a:	4635      	mov	r5, r6
 801225c:	e7df      	b.n	801221e <_realloc_r+0x1e>

0801225e <__sfputc_r>:
 801225e:	6893      	ldr	r3, [r2, #8]
 8012260:	3b01      	subs	r3, #1
 8012262:	2b00      	cmp	r3, #0
 8012264:	b410      	push	{r4}
 8012266:	6093      	str	r3, [r2, #8]
 8012268:	da08      	bge.n	801227c <__sfputc_r+0x1e>
 801226a:	6994      	ldr	r4, [r2, #24]
 801226c:	42a3      	cmp	r3, r4
 801226e:	db01      	blt.n	8012274 <__sfputc_r+0x16>
 8012270:	290a      	cmp	r1, #10
 8012272:	d103      	bne.n	801227c <__sfputc_r+0x1e>
 8012274:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012278:	f000 b94a 	b.w	8012510 <__swbuf_r>
 801227c:	6813      	ldr	r3, [r2, #0]
 801227e:	1c58      	adds	r0, r3, #1
 8012280:	6010      	str	r0, [r2, #0]
 8012282:	7019      	strb	r1, [r3, #0]
 8012284:	4608      	mov	r0, r1
 8012286:	f85d 4b04 	ldr.w	r4, [sp], #4
 801228a:	4770      	bx	lr

0801228c <__sfputs_r>:
 801228c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801228e:	4606      	mov	r6, r0
 8012290:	460f      	mov	r7, r1
 8012292:	4614      	mov	r4, r2
 8012294:	18d5      	adds	r5, r2, r3
 8012296:	42ac      	cmp	r4, r5
 8012298:	d101      	bne.n	801229e <__sfputs_r+0x12>
 801229a:	2000      	movs	r0, #0
 801229c:	e007      	b.n	80122ae <__sfputs_r+0x22>
 801229e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80122a2:	463a      	mov	r2, r7
 80122a4:	4630      	mov	r0, r6
 80122a6:	f7ff ffda 	bl	801225e <__sfputc_r>
 80122aa:	1c43      	adds	r3, r0, #1
 80122ac:	d1f3      	bne.n	8012296 <__sfputs_r+0xa>
 80122ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080122b0 <_vfiprintf_r>:
 80122b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80122b4:	460d      	mov	r5, r1
 80122b6:	b09d      	sub	sp, #116	; 0x74
 80122b8:	4614      	mov	r4, r2
 80122ba:	4698      	mov	r8, r3
 80122bc:	4606      	mov	r6, r0
 80122be:	b118      	cbz	r0, 80122c8 <_vfiprintf_r+0x18>
 80122c0:	6983      	ldr	r3, [r0, #24]
 80122c2:	b90b      	cbnz	r3, 80122c8 <_vfiprintf_r+0x18>
 80122c4:	f000 fb14 	bl	80128f0 <__sinit>
 80122c8:	4b89      	ldr	r3, [pc, #548]	; (80124f0 <_vfiprintf_r+0x240>)
 80122ca:	429d      	cmp	r5, r3
 80122cc:	d11b      	bne.n	8012306 <_vfiprintf_r+0x56>
 80122ce:	6875      	ldr	r5, [r6, #4]
 80122d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80122d2:	07d9      	lsls	r1, r3, #31
 80122d4:	d405      	bmi.n	80122e2 <_vfiprintf_r+0x32>
 80122d6:	89ab      	ldrh	r3, [r5, #12]
 80122d8:	059a      	lsls	r2, r3, #22
 80122da:	d402      	bmi.n	80122e2 <_vfiprintf_r+0x32>
 80122dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80122de:	f000 fba5 	bl	8012a2c <__retarget_lock_acquire_recursive>
 80122e2:	89ab      	ldrh	r3, [r5, #12]
 80122e4:	071b      	lsls	r3, r3, #28
 80122e6:	d501      	bpl.n	80122ec <_vfiprintf_r+0x3c>
 80122e8:	692b      	ldr	r3, [r5, #16]
 80122ea:	b9eb      	cbnz	r3, 8012328 <_vfiprintf_r+0x78>
 80122ec:	4629      	mov	r1, r5
 80122ee:	4630      	mov	r0, r6
 80122f0:	f000 f96e 	bl	80125d0 <__swsetup_r>
 80122f4:	b1c0      	cbz	r0, 8012328 <_vfiprintf_r+0x78>
 80122f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80122f8:	07dc      	lsls	r4, r3, #31
 80122fa:	d50e      	bpl.n	801231a <_vfiprintf_r+0x6a>
 80122fc:	f04f 30ff 	mov.w	r0, #4294967295
 8012300:	b01d      	add	sp, #116	; 0x74
 8012302:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012306:	4b7b      	ldr	r3, [pc, #492]	; (80124f4 <_vfiprintf_r+0x244>)
 8012308:	429d      	cmp	r5, r3
 801230a:	d101      	bne.n	8012310 <_vfiprintf_r+0x60>
 801230c:	68b5      	ldr	r5, [r6, #8]
 801230e:	e7df      	b.n	80122d0 <_vfiprintf_r+0x20>
 8012310:	4b79      	ldr	r3, [pc, #484]	; (80124f8 <_vfiprintf_r+0x248>)
 8012312:	429d      	cmp	r5, r3
 8012314:	bf08      	it	eq
 8012316:	68f5      	ldreq	r5, [r6, #12]
 8012318:	e7da      	b.n	80122d0 <_vfiprintf_r+0x20>
 801231a:	89ab      	ldrh	r3, [r5, #12]
 801231c:	0598      	lsls	r0, r3, #22
 801231e:	d4ed      	bmi.n	80122fc <_vfiprintf_r+0x4c>
 8012320:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012322:	f000 fb84 	bl	8012a2e <__retarget_lock_release_recursive>
 8012326:	e7e9      	b.n	80122fc <_vfiprintf_r+0x4c>
 8012328:	2300      	movs	r3, #0
 801232a:	9309      	str	r3, [sp, #36]	; 0x24
 801232c:	2320      	movs	r3, #32
 801232e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012332:	f8cd 800c 	str.w	r8, [sp, #12]
 8012336:	2330      	movs	r3, #48	; 0x30
 8012338:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80124fc <_vfiprintf_r+0x24c>
 801233c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012340:	f04f 0901 	mov.w	r9, #1
 8012344:	4623      	mov	r3, r4
 8012346:	469a      	mov	sl, r3
 8012348:	f813 2b01 	ldrb.w	r2, [r3], #1
 801234c:	b10a      	cbz	r2, 8012352 <_vfiprintf_r+0xa2>
 801234e:	2a25      	cmp	r2, #37	; 0x25
 8012350:	d1f9      	bne.n	8012346 <_vfiprintf_r+0x96>
 8012352:	ebba 0b04 	subs.w	fp, sl, r4
 8012356:	d00b      	beq.n	8012370 <_vfiprintf_r+0xc0>
 8012358:	465b      	mov	r3, fp
 801235a:	4622      	mov	r2, r4
 801235c:	4629      	mov	r1, r5
 801235e:	4630      	mov	r0, r6
 8012360:	f7ff ff94 	bl	801228c <__sfputs_r>
 8012364:	3001      	adds	r0, #1
 8012366:	f000 80aa 	beq.w	80124be <_vfiprintf_r+0x20e>
 801236a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801236c:	445a      	add	r2, fp
 801236e:	9209      	str	r2, [sp, #36]	; 0x24
 8012370:	f89a 3000 	ldrb.w	r3, [sl]
 8012374:	2b00      	cmp	r3, #0
 8012376:	f000 80a2 	beq.w	80124be <_vfiprintf_r+0x20e>
 801237a:	2300      	movs	r3, #0
 801237c:	f04f 32ff 	mov.w	r2, #4294967295
 8012380:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012384:	f10a 0a01 	add.w	sl, sl, #1
 8012388:	9304      	str	r3, [sp, #16]
 801238a:	9307      	str	r3, [sp, #28]
 801238c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012390:	931a      	str	r3, [sp, #104]	; 0x68
 8012392:	4654      	mov	r4, sl
 8012394:	2205      	movs	r2, #5
 8012396:	f814 1b01 	ldrb.w	r1, [r4], #1
 801239a:	4858      	ldr	r0, [pc, #352]	; (80124fc <_vfiprintf_r+0x24c>)
 801239c:	f7ed ff38 	bl	8000210 <memchr>
 80123a0:	9a04      	ldr	r2, [sp, #16]
 80123a2:	b9d8      	cbnz	r0, 80123dc <_vfiprintf_r+0x12c>
 80123a4:	06d1      	lsls	r1, r2, #27
 80123a6:	bf44      	itt	mi
 80123a8:	2320      	movmi	r3, #32
 80123aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80123ae:	0713      	lsls	r3, r2, #28
 80123b0:	bf44      	itt	mi
 80123b2:	232b      	movmi	r3, #43	; 0x2b
 80123b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80123b8:	f89a 3000 	ldrb.w	r3, [sl]
 80123bc:	2b2a      	cmp	r3, #42	; 0x2a
 80123be:	d015      	beq.n	80123ec <_vfiprintf_r+0x13c>
 80123c0:	9a07      	ldr	r2, [sp, #28]
 80123c2:	4654      	mov	r4, sl
 80123c4:	2000      	movs	r0, #0
 80123c6:	f04f 0c0a 	mov.w	ip, #10
 80123ca:	4621      	mov	r1, r4
 80123cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80123d0:	3b30      	subs	r3, #48	; 0x30
 80123d2:	2b09      	cmp	r3, #9
 80123d4:	d94e      	bls.n	8012474 <_vfiprintf_r+0x1c4>
 80123d6:	b1b0      	cbz	r0, 8012406 <_vfiprintf_r+0x156>
 80123d8:	9207      	str	r2, [sp, #28]
 80123da:	e014      	b.n	8012406 <_vfiprintf_r+0x156>
 80123dc:	eba0 0308 	sub.w	r3, r0, r8
 80123e0:	fa09 f303 	lsl.w	r3, r9, r3
 80123e4:	4313      	orrs	r3, r2
 80123e6:	9304      	str	r3, [sp, #16]
 80123e8:	46a2      	mov	sl, r4
 80123ea:	e7d2      	b.n	8012392 <_vfiprintf_r+0xe2>
 80123ec:	9b03      	ldr	r3, [sp, #12]
 80123ee:	1d19      	adds	r1, r3, #4
 80123f0:	681b      	ldr	r3, [r3, #0]
 80123f2:	9103      	str	r1, [sp, #12]
 80123f4:	2b00      	cmp	r3, #0
 80123f6:	bfbb      	ittet	lt
 80123f8:	425b      	neglt	r3, r3
 80123fa:	f042 0202 	orrlt.w	r2, r2, #2
 80123fe:	9307      	strge	r3, [sp, #28]
 8012400:	9307      	strlt	r3, [sp, #28]
 8012402:	bfb8      	it	lt
 8012404:	9204      	strlt	r2, [sp, #16]
 8012406:	7823      	ldrb	r3, [r4, #0]
 8012408:	2b2e      	cmp	r3, #46	; 0x2e
 801240a:	d10c      	bne.n	8012426 <_vfiprintf_r+0x176>
 801240c:	7863      	ldrb	r3, [r4, #1]
 801240e:	2b2a      	cmp	r3, #42	; 0x2a
 8012410:	d135      	bne.n	801247e <_vfiprintf_r+0x1ce>
 8012412:	9b03      	ldr	r3, [sp, #12]
 8012414:	1d1a      	adds	r2, r3, #4
 8012416:	681b      	ldr	r3, [r3, #0]
 8012418:	9203      	str	r2, [sp, #12]
 801241a:	2b00      	cmp	r3, #0
 801241c:	bfb8      	it	lt
 801241e:	f04f 33ff 	movlt.w	r3, #4294967295
 8012422:	3402      	adds	r4, #2
 8012424:	9305      	str	r3, [sp, #20]
 8012426:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801250c <_vfiprintf_r+0x25c>
 801242a:	7821      	ldrb	r1, [r4, #0]
 801242c:	2203      	movs	r2, #3
 801242e:	4650      	mov	r0, sl
 8012430:	f7ed feee 	bl	8000210 <memchr>
 8012434:	b140      	cbz	r0, 8012448 <_vfiprintf_r+0x198>
 8012436:	2340      	movs	r3, #64	; 0x40
 8012438:	eba0 000a 	sub.w	r0, r0, sl
 801243c:	fa03 f000 	lsl.w	r0, r3, r0
 8012440:	9b04      	ldr	r3, [sp, #16]
 8012442:	4303      	orrs	r3, r0
 8012444:	3401      	adds	r4, #1
 8012446:	9304      	str	r3, [sp, #16]
 8012448:	f814 1b01 	ldrb.w	r1, [r4], #1
 801244c:	482c      	ldr	r0, [pc, #176]	; (8012500 <_vfiprintf_r+0x250>)
 801244e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012452:	2206      	movs	r2, #6
 8012454:	f7ed fedc 	bl	8000210 <memchr>
 8012458:	2800      	cmp	r0, #0
 801245a:	d03f      	beq.n	80124dc <_vfiprintf_r+0x22c>
 801245c:	4b29      	ldr	r3, [pc, #164]	; (8012504 <_vfiprintf_r+0x254>)
 801245e:	bb1b      	cbnz	r3, 80124a8 <_vfiprintf_r+0x1f8>
 8012460:	9b03      	ldr	r3, [sp, #12]
 8012462:	3307      	adds	r3, #7
 8012464:	f023 0307 	bic.w	r3, r3, #7
 8012468:	3308      	adds	r3, #8
 801246a:	9303      	str	r3, [sp, #12]
 801246c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801246e:	443b      	add	r3, r7
 8012470:	9309      	str	r3, [sp, #36]	; 0x24
 8012472:	e767      	b.n	8012344 <_vfiprintf_r+0x94>
 8012474:	fb0c 3202 	mla	r2, ip, r2, r3
 8012478:	460c      	mov	r4, r1
 801247a:	2001      	movs	r0, #1
 801247c:	e7a5      	b.n	80123ca <_vfiprintf_r+0x11a>
 801247e:	2300      	movs	r3, #0
 8012480:	3401      	adds	r4, #1
 8012482:	9305      	str	r3, [sp, #20]
 8012484:	4619      	mov	r1, r3
 8012486:	f04f 0c0a 	mov.w	ip, #10
 801248a:	4620      	mov	r0, r4
 801248c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012490:	3a30      	subs	r2, #48	; 0x30
 8012492:	2a09      	cmp	r2, #9
 8012494:	d903      	bls.n	801249e <_vfiprintf_r+0x1ee>
 8012496:	2b00      	cmp	r3, #0
 8012498:	d0c5      	beq.n	8012426 <_vfiprintf_r+0x176>
 801249a:	9105      	str	r1, [sp, #20]
 801249c:	e7c3      	b.n	8012426 <_vfiprintf_r+0x176>
 801249e:	fb0c 2101 	mla	r1, ip, r1, r2
 80124a2:	4604      	mov	r4, r0
 80124a4:	2301      	movs	r3, #1
 80124a6:	e7f0      	b.n	801248a <_vfiprintf_r+0x1da>
 80124a8:	ab03      	add	r3, sp, #12
 80124aa:	9300      	str	r3, [sp, #0]
 80124ac:	462a      	mov	r2, r5
 80124ae:	4b16      	ldr	r3, [pc, #88]	; (8012508 <_vfiprintf_r+0x258>)
 80124b0:	a904      	add	r1, sp, #16
 80124b2:	4630      	mov	r0, r6
 80124b4:	f7fd fdc2 	bl	801003c <_printf_float>
 80124b8:	4607      	mov	r7, r0
 80124ba:	1c78      	adds	r0, r7, #1
 80124bc:	d1d6      	bne.n	801246c <_vfiprintf_r+0x1bc>
 80124be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80124c0:	07d9      	lsls	r1, r3, #31
 80124c2:	d405      	bmi.n	80124d0 <_vfiprintf_r+0x220>
 80124c4:	89ab      	ldrh	r3, [r5, #12]
 80124c6:	059a      	lsls	r2, r3, #22
 80124c8:	d402      	bmi.n	80124d0 <_vfiprintf_r+0x220>
 80124ca:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80124cc:	f000 faaf 	bl	8012a2e <__retarget_lock_release_recursive>
 80124d0:	89ab      	ldrh	r3, [r5, #12]
 80124d2:	065b      	lsls	r3, r3, #25
 80124d4:	f53f af12 	bmi.w	80122fc <_vfiprintf_r+0x4c>
 80124d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80124da:	e711      	b.n	8012300 <_vfiprintf_r+0x50>
 80124dc:	ab03      	add	r3, sp, #12
 80124de:	9300      	str	r3, [sp, #0]
 80124e0:	462a      	mov	r2, r5
 80124e2:	4b09      	ldr	r3, [pc, #36]	; (8012508 <_vfiprintf_r+0x258>)
 80124e4:	a904      	add	r1, sp, #16
 80124e6:	4630      	mov	r0, r6
 80124e8:	f7fe f84c 	bl	8010584 <_printf_i>
 80124ec:	e7e4      	b.n	80124b8 <_vfiprintf_r+0x208>
 80124ee:	bf00      	nop
 80124f0:	08014be4 	.word	0x08014be4
 80124f4:	08014c04 	.word	0x08014c04
 80124f8:	08014bc4 	.word	0x08014bc4
 80124fc:	08014a6c 	.word	0x08014a6c
 8012500:	08014a76 	.word	0x08014a76
 8012504:	0801003d 	.word	0x0801003d
 8012508:	0801228d 	.word	0x0801228d
 801250c:	08014a72 	.word	0x08014a72

08012510 <__swbuf_r>:
 8012510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012512:	460e      	mov	r6, r1
 8012514:	4614      	mov	r4, r2
 8012516:	4605      	mov	r5, r0
 8012518:	b118      	cbz	r0, 8012522 <__swbuf_r+0x12>
 801251a:	6983      	ldr	r3, [r0, #24]
 801251c:	b90b      	cbnz	r3, 8012522 <__swbuf_r+0x12>
 801251e:	f000 f9e7 	bl	80128f0 <__sinit>
 8012522:	4b21      	ldr	r3, [pc, #132]	; (80125a8 <__swbuf_r+0x98>)
 8012524:	429c      	cmp	r4, r3
 8012526:	d12b      	bne.n	8012580 <__swbuf_r+0x70>
 8012528:	686c      	ldr	r4, [r5, #4]
 801252a:	69a3      	ldr	r3, [r4, #24]
 801252c:	60a3      	str	r3, [r4, #8]
 801252e:	89a3      	ldrh	r3, [r4, #12]
 8012530:	071a      	lsls	r2, r3, #28
 8012532:	d52f      	bpl.n	8012594 <__swbuf_r+0x84>
 8012534:	6923      	ldr	r3, [r4, #16]
 8012536:	b36b      	cbz	r3, 8012594 <__swbuf_r+0x84>
 8012538:	6923      	ldr	r3, [r4, #16]
 801253a:	6820      	ldr	r0, [r4, #0]
 801253c:	1ac0      	subs	r0, r0, r3
 801253e:	6963      	ldr	r3, [r4, #20]
 8012540:	b2f6      	uxtb	r6, r6
 8012542:	4283      	cmp	r3, r0
 8012544:	4637      	mov	r7, r6
 8012546:	dc04      	bgt.n	8012552 <__swbuf_r+0x42>
 8012548:	4621      	mov	r1, r4
 801254a:	4628      	mov	r0, r5
 801254c:	f000 f93c 	bl	80127c8 <_fflush_r>
 8012550:	bb30      	cbnz	r0, 80125a0 <__swbuf_r+0x90>
 8012552:	68a3      	ldr	r3, [r4, #8]
 8012554:	3b01      	subs	r3, #1
 8012556:	60a3      	str	r3, [r4, #8]
 8012558:	6823      	ldr	r3, [r4, #0]
 801255a:	1c5a      	adds	r2, r3, #1
 801255c:	6022      	str	r2, [r4, #0]
 801255e:	701e      	strb	r6, [r3, #0]
 8012560:	6963      	ldr	r3, [r4, #20]
 8012562:	3001      	adds	r0, #1
 8012564:	4283      	cmp	r3, r0
 8012566:	d004      	beq.n	8012572 <__swbuf_r+0x62>
 8012568:	89a3      	ldrh	r3, [r4, #12]
 801256a:	07db      	lsls	r3, r3, #31
 801256c:	d506      	bpl.n	801257c <__swbuf_r+0x6c>
 801256e:	2e0a      	cmp	r6, #10
 8012570:	d104      	bne.n	801257c <__swbuf_r+0x6c>
 8012572:	4621      	mov	r1, r4
 8012574:	4628      	mov	r0, r5
 8012576:	f000 f927 	bl	80127c8 <_fflush_r>
 801257a:	b988      	cbnz	r0, 80125a0 <__swbuf_r+0x90>
 801257c:	4638      	mov	r0, r7
 801257e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012580:	4b0a      	ldr	r3, [pc, #40]	; (80125ac <__swbuf_r+0x9c>)
 8012582:	429c      	cmp	r4, r3
 8012584:	d101      	bne.n	801258a <__swbuf_r+0x7a>
 8012586:	68ac      	ldr	r4, [r5, #8]
 8012588:	e7cf      	b.n	801252a <__swbuf_r+0x1a>
 801258a:	4b09      	ldr	r3, [pc, #36]	; (80125b0 <__swbuf_r+0xa0>)
 801258c:	429c      	cmp	r4, r3
 801258e:	bf08      	it	eq
 8012590:	68ec      	ldreq	r4, [r5, #12]
 8012592:	e7ca      	b.n	801252a <__swbuf_r+0x1a>
 8012594:	4621      	mov	r1, r4
 8012596:	4628      	mov	r0, r5
 8012598:	f000 f81a 	bl	80125d0 <__swsetup_r>
 801259c:	2800      	cmp	r0, #0
 801259e:	d0cb      	beq.n	8012538 <__swbuf_r+0x28>
 80125a0:	f04f 37ff 	mov.w	r7, #4294967295
 80125a4:	e7ea      	b.n	801257c <__swbuf_r+0x6c>
 80125a6:	bf00      	nop
 80125a8:	08014be4 	.word	0x08014be4
 80125ac:	08014c04 	.word	0x08014c04
 80125b0:	08014bc4 	.word	0x08014bc4

080125b4 <__ascii_wctomb>:
 80125b4:	b149      	cbz	r1, 80125ca <__ascii_wctomb+0x16>
 80125b6:	2aff      	cmp	r2, #255	; 0xff
 80125b8:	bf85      	ittet	hi
 80125ba:	238a      	movhi	r3, #138	; 0x8a
 80125bc:	6003      	strhi	r3, [r0, #0]
 80125be:	700a      	strbls	r2, [r1, #0]
 80125c0:	f04f 30ff 	movhi.w	r0, #4294967295
 80125c4:	bf98      	it	ls
 80125c6:	2001      	movls	r0, #1
 80125c8:	4770      	bx	lr
 80125ca:	4608      	mov	r0, r1
 80125cc:	4770      	bx	lr
	...

080125d0 <__swsetup_r>:
 80125d0:	4b32      	ldr	r3, [pc, #200]	; (801269c <__swsetup_r+0xcc>)
 80125d2:	b570      	push	{r4, r5, r6, lr}
 80125d4:	681d      	ldr	r5, [r3, #0]
 80125d6:	4606      	mov	r6, r0
 80125d8:	460c      	mov	r4, r1
 80125da:	b125      	cbz	r5, 80125e6 <__swsetup_r+0x16>
 80125dc:	69ab      	ldr	r3, [r5, #24]
 80125de:	b913      	cbnz	r3, 80125e6 <__swsetup_r+0x16>
 80125e0:	4628      	mov	r0, r5
 80125e2:	f000 f985 	bl	80128f0 <__sinit>
 80125e6:	4b2e      	ldr	r3, [pc, #184]	; (80126a0 <__swsetup_r+0xd0>)
 80125e8:	429c      	cmp	r4, r3
 80125ea:	d10f      	bne.n	801260c <__swsetup_r+0x3c>
 80125ec:	686c      	ldr	r4, [r5, #4]
 80125ee:	89a3      	ldrh	r3, [r4, #12]
 80125f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80125f4:	0719      	lsls	r1, r3, #28
 80125f6:	d42c      	bmi.n	8012652 <__swsetup_r+0x82>
 80125f8:	06dd      	lsls	r5, r3, #27
 80125fa:	d411      	bmi.n	8012620 <__swsetup_r+0x50>
 80125fc:	2309      	movs	r3, #9
 80125fe:	6033      	str	r3, [r6, #0]
 8012600:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8012604:	81a3      	strh	r3, [r4, #12]
 8012606:	f04f 30ff 	mov.w	r0, #4294967295
 801260a:	e03e      	b.n	801268a <__swsetup_r+0xba>
 801260c:	4b25      	ldr	r3, [pc, #148]	; (80126a4 <__swsetup_r+0xd4>)
 801260e:	429c      	cmp	r4, r3
 8012610:	d101      	bne.n	8012616 <__swsetup_r+0x46>
 8012612:	68ac      	ldr	r4, [r5, #8]
 8012614:	e7eb      	b.n	80125ee <__swsetup_r+0x1e>
 8012616:	4b24      	ldr	r3, [pc, #144]	; (80126a8 <__swsetup_r+0xd8>)
 8012618:	429c      	cmp	r4, r3
 801261a:	bf08      	it	eq
 801261c:	68ec      	ldreq	r4, [r5, #12]
 801261e:	e7e6      	b.n	80125ee <__swsetup_r+0x1e>
 8012620:	0758      	lsls	r0, r3, #29
 8012622:	d512      	bpl.n	801264a <__swsetup_r+0x7a>
 8012624:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012626:	b141      	cbz	r1, 801263a <__swsetup_r+0x6a>
 8012628:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801262c:	4299      	cmp	r1, r3
 801262e:	d002      	beq.n	8012636 <__swsetup_r+0x66>
 8012630:	4630      	mov	r0, r6
 8012632:	f7ff fb31 	bl	8011c98 <_free_r>
 8012636:	2300      	movs	r3, #0
 8012638:	6363      	str	r3, [r4, #52]	; 0x34
 801263a:	89a3      	ldrh	r3, [r4, #12]
 801263c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012640:	81a3      	strh	r3, [r4, #12]
 8012642:	2300      	movs	r3, #0
 8012644:	6063      	str	r3, [r4, #4]
 8012646:	6923      	ldr	r3, [r4, #16]
 8012648:	6023      	str	r3, [r4, #0]
 801264a:	89a3      	ldrh	r3, [r4, #12]
 801264c:	f043 0308 	orr.w	r3, r3, #8
 8012650:	81a3      	strh	r3, [r4, #12]
 8012652:	6923      	ldr	r3, [r4, #16]
 8012654:	b94b      	cbnz	r3, 801266a <__swsetup_r+0x9a>
 8012656:	89a3      	ldrh	r3, [r4, #12]
 8012658:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801265c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012660:	d003      	beq.n	801266a <__swsetup_r+0x9a>
 8012662:	4621      	mov	r1, r4
 8012664:	4630      	mov	r0, r6
 8012666:	f000 fa09 	bl	8012a7c <__smakebuf_r>
 801266a:	89a0      	ldrh	r0, [r4, #12]
 801266c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012670:	f010 0301 	ands.w	r3, r0, #1
 8012674:	d00a      	beq.n	801268c <__swsetup_r+0xbc>
 8012676:	2300      	movs	r3, #0
 8012678:	60a3      	str	r3, [r4, #8]
 801267a:	6963      	ldr	r3, [r4, #20]
 801267c:	425b      	negs	r3, r3
 801267e:	61a3      	str	r3, [r4, #24]
 8012680:	6923      	ldr	r3, [r4, #16]
 8012682:	b943      	cbnz	r3, 8012696 <__swsetup_r+0xc6>
 8012684:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8012688:	d1ba      	bne.n	8012600 <__swsetup_r+0x30>
 801268a:	bd70      	pop	{r4, r5, r6, pc}
 801268c:	0781      	lsls	r1, r0, #30
 801268e:	bf58      	it	pl
 8012690:	6963      	ldrpl	r3, [r4, #20]
 8012692:	60a3      	str	r3, [r4, #8]
 8012694:	e7f4      	b.n	8012680 <__swsetup_r+0xb0>
 8012696:	2000      	movs	r0, #0
 8012698:	e7f7      	b.n	801268a <__swsetup_r+0xba>
 801269a:	bf00      	nop
 801269c:	20000020 	.word	0x20000020
 80126a0:	08014be4 	.word	0x08014be4
 80126a4:	08014c04 	.word	0x08014c04
 80126a8:	08014bc4 	.word	0x08014bc4

080126ac <abort>:
 80126ac:	b508      	push	{r3, lr}
 80126ae:	2006      	movs	r0, #6
 80126b0:	f000 fa54 	bl	8012b5c <raise>
 80126b4:	2001      	movs	r0, #1
 80126b6:	f7f3 fe6d 	bl	8006394 <_exit>
	...

080126bc <__sflush_r>:
 80126bc:	898a      	ldrh	r2, [r1, #12]
 80126be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80126c2:	4605      	mov	r5, r0
 80126c4:	0710      	lsls	r0, r2, #28
 80126c6:	460c      	mov	r4, r1
 80126c8:	d458      	bmi.n	801277c <__sflush_r+0xc0>
 80126ca:	684b      	ldr	r3, [r1, #4]
 80126cc:	2b00      	cmp	r3, #0
 80126ce:	dc05      	bgt.n	80126dc <__sflush_r+0x20>
 80126d0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80126d2:	2b00      	cmp	r3, #0
 80126d4:	dc02      	bgt.n	80126dc <__sflush_r+0x20>
 80126d6:	2000      	movs	r0, #0
 80126d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80126dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80126de:	2e00      	cmp	r6, #0
 80126e0:	d0f9      	beq.n	80126d6 <__sflush_r+0x1a>
 80126e2:	2300      	movs	r3, #0
 80126e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80126e8:	682f      	ldr	r7, [r5, #0]
 80126ea:	602b      	str	r3, [r5, #0]
 80126ec:	d032      	beq.n	8012754 <__sflush_r+0x98>
 80126ee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80126f0:	89a3      	ldrh	r3, [r4, #12]
 80126f2:	075a      	lsls	r2, r3, #29
 80126f4:	d505      	bpl.n	8012702 <__sflush_r+0x46>
 80126f6:	6863      	ldr	r3, [r4, #4]
 80126f8:	1ac0      	subs	r0, r0, r3
 80126fa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80126fc:	b10b      	cbz	r3, 8012702 <__sflush_r+0x46>
 80126fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012700:	1ac0      	subs	r0, r0, r3
 8012702:	2300      	movs	r3, #0
 8012704:	4602      	mov	r2, r0
 8012706:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012708:	6a21      	ldr	r1, [r4, #32]
 801270a:	4628      	mov	r0, r5
 801270c:	47b0      	blx	r6
 801270e:	1c43      	adds	r3, r0, #1
 8012710:	89a3      	ldrh	r3, [r4, #12]
 8012712:	d106      	bne.n	8012722 <__sflush_r+0x66>
 8012714:	6829      	ldr	r1, [r5, #0]
 8012716:	291d      	cmp	r1, #29
 8012718:	d82c      	bhi.n	8012774 <__sflush_r+0xb8>
 801271a:	4a2a      	ldr	r2, [pc, #168]	; (80127c4 <__sflush_r+0x108>)
 801271c:	40ca      	lsrs	r2, r1
 801271e:	07d6      	lsls	r6, r2, #31
 8012720:	d528      	bpl.n	8012774 <__sflush_r+0xb8>
 8012722:	2200      	movs	r2, #0
 8012724:	6062      	str	r2, [r4, #4]
 8012726:	04d9      	lsls	r1, r3, #19
 8012728:	6922      	ldr	r2, [r4, #16]
 801272a:	6022      	str	r2, [r4, #0]
 801272c:	d504      	bpl.n	8012738 <__sflush_r+0x7c>
 801272e:	1c42      	adds	r2, r0, #1
 8012730:	d101      	bne.n	8012736 <__sflush_r+0x7a>
 8012732:	682b      	ldr	r3, [r5, #0]
 8012734:	b903      	cbnz	r3, 8012738 <__sflush_r+0x7c>
 8012736:	6560      	str	r0, [r4, #84]	; 0x54
 8012738:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801273a:	602f      	str	r7, [r5, #0]
 801273c:	2900      	cmp	r1, #0
 801273e:	d0ca      	beq.n	80126d6 <__sflush_r+0x1a>
 8012740:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012744:	4299      	cmp	r1, r3
 8012746:	d002      	beq.n	801274e <__sflush_r+0x92>
 8012748:	4628      	mov	r0, r5
 801274a:	f7ff faa5 	bl	8011c98 <_free_r>
 801274e:	2000      	movs	r0, #0
 8012750:	6360      	str	r0, [r4, #52]	; 0x34
 8012752:	e7c1      	b.n	80126d8 <__sflush_r+0x1c>
 8012754:	6a21      	ldr	r1, [r4, #32]
 8012756:	2301      	movs	r3, #1
 8012758:	4628      	mov	r0, r5
 801275a:	47b0      	blx	r6
 801275c:	1c41      	adds	r1, r0, #1
 801275e:	d1c7      	bne.n	80126f0 <__sflush_r+0x34>
 8012760:	682b      	ldr	r3, [r5, #0]
 8012762:	2b00      	cmp	r3, #0
 8012764:	d0c4      	beq.n	80126f0 <__sflush_r+0x34>
 8012766:	2b1d      	cmp	r3, #29
 8012768:	d001      	beq.n	801276e <__sflush_r+0xb2>
 801276a:	2b16      	cmp	r3, #22
 801276c:	d101      	bne.n	8012772 <__sflush_r+0xb6>
 801276e:	602f      	str	r7, [r5, #0]
 8012770:	e7b1      	b.n	80126d6 <__sflush_r+0x1a>
 8012772:	89a3      	ldrh	r3, [r4, #12]
 8012774:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012778:	81a3      	strh	r3, [r4, #12]
 801277a:	e7ad      	b.n	80126d8 <__sflush_r+0x1c>
 801277c:	690f      	ldr	r7, [r1, #16]
 801277e:	2f00      	cmp	r7, #0
 8012780:	d0a9      	beq.n	80126d6 <__sflush_r+0x1a>
 8012782:	0793      	lsls	r3, r2, #30
 8012784:	680e      	ldr	r6, [r1, #0]
 8012786:	bf08      	it	eq
 8012788:	694b      	ldreq	r3, [r1, #20]
 801278a:	600f      	str	r7, [r1, #0]
 801278c:	bf18      	it	ne
 801278e:	2300      	movne	r3, #0
 8012790:	eba6 0807 	sub.w	r8, r6, r7
 8012794:	608b      	str	r3, [r1, #8]
 8012796:	f1b8 0f00 	cmp.w	r8, #0
 801279a:	dd9c      	ble.n	80126d6 <__sflush_r+0x1a>
 801279c:	6a21      	ldr	r1, [r4, #32]
 801279e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80127a0:	4643      	mov	r3, r8
 80127a2:	463a      	mov	r2, r7
 80127a4:	4628      	mov	r0, r5
 80127a6:	47b0      	blx	r6
 80127a8:	2800      	cmp	r0, #0
 80127aa:	dc06      	bgt.n	80127ba <__sflush_r+0xfe>
 80127ac:	89a3      	ldrh	r3, [r4, #12]
 80127ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80127b2:	81a3      	strh	r3, [r4, #12]
 80127b4:	f04f 30ff 	mov.w	r0, #4294967295
 80127b8:	e78e      	b.n	80126d8 <__sflush_r+0x1c>
 80127ba:	4407      	add	r7, r0
 80127bc:	eba8 0800 	sub.w	r8, r8, r0
 80127c0:	e7e9      	b.n	8012796 <__sflush_r+0xda>
 80127c2:	bf00      	nop
 80127c4:	20400001 	.word	0x20400001

080127c8 <_fflush_r>:
 80127c8:	b538      	push	{r3, r4, r5, lr}
 80127ca:	690b      	ldr	r3, [r1, #16]
 80127cc:	4605      	mov	r5, r0
 80127ce:	460c      	mov	r4, r1
 80127d0:	b913      	cbnz	r3, 80127d8 <_fflush_r+0x10>
 80127d2:	2500      	movs	r5, #0
 80127d4:	4628      	mov	r0, r5
 80127d6:	bd38      	pop	{r3, r4, r5, pc}
 80127d8:	b118      	cbz	r0, 80127e2 <_fflush_r+0x1a>
 80127da:	6983      	ldr	r3, [r0, #24]
 80127dc:	b90b      	cbnz	r3, 80127e2 <_fflush_r+0x1a>
 80127de:	f000 f887 	bl	80128f0 <__sinit>
 80127e2:	4b14      	ldr	r3, [pc, #80]	; (8012834 <_fflush_r+0x6c>)
 80127e4:	429c      	cmp	r4, r3
 80127e6:	d11b      	bne.n	8012820 <_fflush_r+0x58>
 80127e8:	686c      	ldr	r4, [r5, #4]
 80127ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80127ee:	2b00      	cmp	r3, #0
 80127f0:	d0ef      	beq.n	80127d2 <_fflush_r+0xa>
 80127f2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80127f4:	07d0      	lsls	r0, r2, #31
 80127f6:	d404      	bmi.n	8012802 <_fflush_r+0x3a>
 80127f8:	0599      	lsls	r1, r3, #22
 80127fa:	d402      	bmi.n	8012802 <_fflush_r+0x3a>
 80127fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80127fe:	f000 f915 	bl	8012a2c <__retarget_lock_acquire_recursive>
 8012802:	4628      	mov	r0, r5
 8012804:	4621      	mov	r1, r4
 8012806:	f7ff ff59 	bl	80126bc <__sflush_r>
 801280a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801280c:	07da      	lsls	r2, r3, #31
 801280e:	4605      	mov	r5, r0
 8012810:	d4e0      	bmi.n	80127d4 <_fflush_r+0xc>
 8012812:	89a3      	ldrh	r3, [r4, #12]
 8012814:	059b      	lsls	r3, r3, #22
 8012816:	d4dd      	bmi.n	80127d4 <_fflush_r+0xc>
 8012818:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801281a:	f000 f908 	bl	8012a2e <__retarget_lock_release_recursive>
 801281e:	e7d9      	b.n	80127d4 <_fflush_r+0xc>
 8012820:	4b05      	ldr	r3, [pc, #20]	; (8012838 <_fflush_r+0x70>)
 8012822:	429c      	cmp	r4, r3
 8012824:	d101      	bne.n	801282a <_fflush_r+0x62>
 8012826:	68ac      	ldr	r4, [r5, #8]
 8012828:	e7df      	b.n	80127ea <_fflush_r+0x22>
 801282a:	4b04      	ldr	r3, [pc, #16]	; (801283c <_fflush_r+0x74>)
 801282c:	429c      	cmp	r4, r3
 801282e:	bf08      	it	eq
 8012830:	68ec      	ldreq	r4, [r5, #12]
 8012832:	e7da      	b.n	80127ea <_fflush_r+0x22>
 8012834:	08014be4 	.word	0x08014be4
 8012838:	08014c04 	.word	0x08014c04
 801283c:	08014bc4 	.word	0x08014bc4

08012840 <std>:
 8012840:	2300      	movs	r3, #0
 8012842:	b510      	push	{r4, lr}
 8012844:	4604      	mov	r4, r0
 8012846:	e9c0 3300 	strd	r3, r3, [r0]
 801284a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801284e:	6083      	str	r3, [r0, #8]
 8012850:	8181      	strh	r1, [r0, #12]
 8012852:	6643      	str	r3, [r0, #100]	; 0x64
 8012854:	81c2      	strh	r2, [r0, #14]
 8012856:	6183      	str	r3, [r0, #24]
 8012858:	4619      	mov	r1, r3
 801285a:	2208      	movs	r2, #8
 801285c:	305c      	adds	r0, #92	; 0x5c
 801285e:	f7fd fb45 	bl	800feec <memset>
 8012862:	4b05      	ldr	r3, [pc, #20]	; (8012878 <std+0x38>)
 8012864:	6263      	str	r3, [r4, #36]	; 0x24
 8012866:	4b05      	ldr	r3, [pc, #20]	; (801287c <std+0x3c>)
 8012868:	62a3      	str	r3, [r4, #40]	; 0x28
 801286a:	4b05      	ldr	r3, [pc, #20]	; (8012880 <std+0x40>)
 801286c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801286e:	4b05      	ldr	r3, [pc, #20]	; (8012884 <std+0x44>)
 8012870:	6224      	str	r4, [r4, #32]
 8012872:	6323      	str	r3, [r4, #48]	; 0x30
 8012874:	bd10      	pop	{r4, pc}
 8012876:	bf00      	nop
 8012878:	08012b95 	.word	0x08012b95
 801287c:	08012bb7 	.word	0x08012bb7
 8012880:	08012bef 	.word	0x08012bef
 8012884:	08012c13 	.word	0x08012c13

08012888 <_cleanup_r>:
 8012888:	4901      	ldr	r1, [pc, #4]	; (8012890 <_cleanup_r+0x8>)
 801288a:	f000 b8af 	b.w	80129ec <_fwalk_reent>
 801288e:	bf00      	nop
 8012890:	080127c9 	.word	0x080127c9

08012894 <__sfmoreglue>:
 8012894:	b570      	push	{r4, r5, r6, lr}
 8012896:	2268      	movs	r2, #104	; 0x68
 8012898:	1e4d      	subs	r5, r1, #1
 801289a:	4355      	muls	r5, r2
 801289c:	460e      	mov	r6, r1
 801289e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80128a2:	f7ff fa65 	bl	8011d70 <_malloc_r>
 80128a6:	4604      	mov	r4, r0
 80128a8:	b140      	cbz	r0, 80128bc <__sfmoreglue+0x28>
 80128aa:	2100      	movs	r1, #0
 80128ac:	e9c0 1600 	strd	r1, r6, [r0]
 80128b0:	300c      	adds	r0, #12
 80128b2:	60a0      	str	r0, [r4, #8]
 80128b4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80128b8:	f7fd fb18 	bl	800feec <memset>
 80128bc:	4620      	mov	r0, r4
 80128be:	bd70      	pop	{r4, r5, r6, pc}

080128c0 <__sfp_lock_acquire>:
 80128c0:	4801      	ldr	r0, [pc, #4]	; (80128c8 <__sfp_lock_acquire+0x8>)
 80128c2:	f000 b8b3 	b.w	8012a2c <__retarget_lock_acquire_recursive>
 80128c6:	bf00      	nop
 80128c8:	20006349 	.word	0x20006349

080128cc <__sfp_lock_release>:
 80128cc:	4801      	ldr	r0, [pc, #4]	; (80128d4 <__sfp_lock_release+0x8>)
 80128ce:	f000 b8ae 	b.w	8012a2e <__retarget_lock_release_recursive>
 80128d2:	bf00      	nop
 80128d4:	20006349 	.word	0x20006349

080128d8 <__sinit_lock_acquire>:
 80128d8:	4801      	ldr	r0, [pc, #4]	; (80128e0 <__sinit_lock_acquire+0x8>)
 80128da:	f000 b8a7 	b.w	8012a2c <__retarget_lock_acquire_recursive>
 80128de:	bf00      	nop
 80128e0:	2000634a 	.word	0x2000634a

080128e4 <__sinit_lock_release>:
 80128e4:	4801      	ldr	r0, [pc, #4]	; (80128ec <__sinit_lock_release+0x8>)
 80128e6:	f000 b8a2 	b.w	8012a2e <__retarget_lock_release_recursive>
 80128ea:	bf00      	nop
 80128ec:	2000634a 	.word	0x2000634a

080128f0 <__sinit>:
 80128f0:	b510      	push	{r4, lr}
 80128f2:	4604      	mov	r4, r0
 80128f4:	f7ff fff0 	bl	80128d8 <__sinit_lock_acquire>
 80128f8:	69a3      	ldr	r3, [r4, #24]
 80128fa:	b11b      	cbz	r3, 8012904 <__sinit+0x14>
 80128fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012900:	f7ff bff0 	b.w	80128e4 <__sinit_lock_release>
 8012904:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8012908:	6523      	str	r3, [r4, #80]	; 0x50
 801290a:	4b13      	ldr	r3, [pc, #76]	; (8012958 <__sinit+0x68>)
 801290c:	4a13      	ldr	r2, [pc, #76]	; (801295c <__sinit+0x6c>)
 801290e:	681b      	ldr	r3, [r3, #0]
 8012910:	62a2      	str	r2, [r4, #40]	; 0x28
 8012912:	42a3      	cmp	r3, r4
 8012914:	bf04      	itt	eq
 8012916:	2301      	moveq	r3, #1
 8012918:	61a3      	streq	r3, [r4, #24]
 801291a:	4620      	mov	r0, r4
 801291c:	f000 f820 	bl	8012960 <__sfp>
 8012920:	6060      	str	r0, [r4, #4]
 8012922:	4620      	mov	r0, r4
 8012924:	f000 f81c 	bl	8012960 <__sfp>
 8012928:	60a0      	str	r0, [r4, #8]
 801292a:	4620      	mov	r0, r4
 801292c:	f000 f818 	bl	8012960 <__sfp>
 8012930:	2200      	movs	r2, #0
 8012932:	60e0      	str	r0, [r4, #12]
 8012934:	2104      	movs	r1, #4
 8012936:	6860      	ldr	r0, [r4, #4]
 8012938:	f7ff ff82 	bl	8012840 <std>
 801293c:	68a0      	ldr	r0, [r4, #8]
 801293e:	2201      	movs	r2, #1
 8012940:	2109      	movs	r1, #9
 8012942:	f7ff ff7d 	bl	8012840 <std>
 8012946:	68e0      	ldr	r0, [r4, #12]
 8012948:	2202      	movs	r2, #2
 801294a:	2112      	movs	r1, #18
 801294c:	f7ff ff78 	bl	8012840 <std>
 8012950:	2301      	movs	r3, #1
 8012952:	61a3      	str	r3, [r4, #24]
 8012954:	e7d2      	b.n	80128fc <__sinit+0xc>
 8012956:	bf00      	nop
 8012958:	0801484c 	.word	0x0801484c
 801295c:	08012889 	.word	0x08012889

08012960 <__sfp>:
 8012960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012962:	4607      	mov	r7, r0
 8012964:	f7ff ffac 	bl	80128c0 <__sfp_lock_acquire>
 8012968:	4b1e      	ldr	r3, [pc, #120]	; (80129e4 <__sfp+0x84>)
 801296a:	681e      	ldr	r6, [r3, #0]
 801296c:	69b3      	ldr	r3, [r6, #24]
 801296e:	b913      	cbnz	r3, 8012976 <__sfp+0x16>
 8012970:	4630      	mov	r0, r6
 8012972:	f7ff ffbd 	bl	80128f0 <__sinit>
 8012976:	3648      	adds	r6, #72	; 0x48
 8012978:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801297c:	3b01      	subs	r3, #1
 801297e:	d503      	bpl.n	8012988 <__sfp+0x28>
 8012980:	6833      	ldr	r3, [r6, #0]
 8012982:	b30b      	cbz	r3, 80129c8 <__sfp+0x68>
 8012984:	6836      	ldr	r6, [r6, #0]
 8012986:	e7f7      	b.n	8012978 <__sfp+0x18>
 8012988:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801298c:	b9d5      	cbnz	r5, 80129c4 <__sfp+0x64>
 801298e:	4b16      	ldr	r3, [pc, #88]	; (80129e8 <__sfp+0x88>)
 8012990:	60e3      	str	r3, [r4, #12]
 8012992:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8012996:	6665      	str	r5, [r4, #100]	; 0x64
 8012998:	f000 f847 	bl	8012a2a <__retarget_lock_init_recursive>
 801299c:	f7ff ff96 	bl	80128cc <__sfp_lock_release>
 80129a0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80129a4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80129a8:	6025      	str	r5, [r4, #0]
 80129aa:	61a5      	str	r5, [r4, #24]
 80129ac:	2208      	movs	r2, #8
 80129ae:	4629      	mov	r1, r5
 80129b0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80129b4:	f7fd fa9a 	bl	800feec <memset>
 80129b8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80129bc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80129c0:	4620      	mov	r0, r4
 80129c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80129c4:	3468      	adds	r4, #104	; 0x68
 80129c6:	e7d9      	b.n	801297c <__sfp+0x1c>
 80129c8:	2104      	movs	r1, #4
 80129ca:	4638      	mov	r0, r7
 80129cc:	f7ff ff62 	bl	8012894 <__sfmoreglue>
 80129d0:	4604      	mov	r4, r0
 80129d2:	6030      	str	r0, [r6, #0]
 80129d4:	2800      	cmp	r0, #0
 80129d6:	d1d5      	bne.n	8012984 <__sfp+0x24>
 80129d8:	f7ff ff78 	bl	80128cc <__sfp_lock_release>
 80129dc:	230c      	movs	r3, #12
 80129de:	603b      	str	r3, [r7, #0]
 80129e0:	e7ee      	b.n	80129c0 <__sfp+0x60>
 80129e2:	bf00      	nop
 80129e4:	0801484c 	.word	0x0801484c
 80129e8:	ffff0001 	.word	0xffff0001

080129ec <_fwalk_reent>:
 80129ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80129f0:	4606      	mov	r6, r0
 80129f2:	4688      	mov	r8, r1
 80129f4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80129f8:	2700      	movs	r7, #0
 80129fa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80129fe:	f1b9 0901 	subs.w	r9, r9, #1
 8012a02:	d505      	bpl.n	8012a10 <_fwalk_reent+0x24>
 8012a04:	6824      	ldr	r4, [r4, #0]
 8012a06:	2c00      	cmp	r4, #0
 8012a08:	d1f7      	bne.n	80129fa <_fwalk_reent+0xe>
 8012a0a:	4638      	mov	r0, r7
 8012a0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012a10:	89ab      	ldrh	r3, [r5, #12]
 8012a12:	2b01      	cmp	r3, #1
 8012a14:	d907      	bls.n	8012a26 <_fwalk_reent+0x3a>
 8012a16:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012a1a:	3301      	adds	r3, #1
 8012a1c:	d003      	beq.n	8012a26 <_fwalk_reent+0x3a>
 8012a1e:	4629      	mov	r1, r5
 8012a20:	4630      	mov	r0, r6
 8012a22:	47c0      	blx	r8
 8012a24:	4307      	orrs	r7, r0
 8012a26:	3568      	adds	r5, #104	; 0x68
 8012a28:	e7e9      	b.n	80129fe <_fwalk_reent+0x12>

08012a2a <__retarget_lock_init_recursive>:
 8012a2a:	4770      	bx	lr

08012a2c <__retarget_lock_acquire_recursive>:
 8012a2c:	4770      	bx	lr

08012a2e <__retarget_lock_release_recursive>:
 8012a2e:	4770      	bx	lr

08012a30 <__swhatbuf_r>:
 8012a30:	b570      	push	{r4, r5, r6, lr}
 8012a32:	460e      	mov	r6, r1
 8012a34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012a38:	2900      	cmp	r1, #0
 8012a3a:	b096      	sub	sp, #88	; 0x58
 8012a3c:	4614      	mov	r4, r2
 8012a3e:	461d      	mov	r5, r3
 8012a40:	da08      	bge.n	8012a54 <__swhatbuf_r+0x24>
 8012a42:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8012a46:	2200      	movs	r2, #0
 8012a48:	602a      	str	r2, [r5, #0]
 8012a4a:	061a      	lsls	r2, r3, #24
 8012a4c:	d410      	bmi.n	8012a70 <__swhatbuf_r+0x40>
 8012a4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012a52:	e00e      	b.n	8012a72 <__swhatbuf_r+0x42>
 8012a54:	466a      	mov	r2, sp
 8012a56:	f000 f903 	bl	8012c60 <_fstat_r>
 8012a5a:	2800      	cmp	r0, #0
 8012a5c:	dbf1      	blt.n	8012a42 <__swhatbuf_r+0x12>
 8012a5e:	9a01      	ldr	r2, [sp, #4]
 8012a60:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8012a64:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8012a68:	425a      	negs	r2, r3
 8012a6a:	415a      	adcs	r2, r3
 8012a6c:	602a      	str	r2, [r5, #0]
 8012a6e:	e7ee      	b.n	8012a4e <__swhatbuf_r+0x1e>
 8012a70:	2340      	movs	r3, #64	; 0x40
 8012a72:	2000      	movs	r0, #0
 8012a74:	6023      	str	r3, [r4, #0]
 8012a76:	b016      	add	sp, #88	; 0x58
 8012a78:	bd70      	pop	{r4, r5, r6, pc}
	...

08012a7c <__smakebuf_r>:
 8012a7c:	898b      	ldrh	r3, [r1, #12]
 8012a7e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012a80:	079d      	lsls	r5, r3, #30
 8012a82:	4606      	mov	r6, r0
 8012a84:	460c      	mov	r4, r1
 8012a86:	d507      	bpl.n	8012a98 <__smakebuf_r+0x1c>
 8012a88:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012a8c:	6023      	str	r3, [r4, #0]
 8012a8e:	6123      	str	r3, [r4, #16]
 8012a90:	2301      	movs	r3, #1
 8012a92:	6163      	str	r3, [r4, #20]
 8012a94:	b002      	add	sp, #8
 8012a96:	bd70      	pop	{r4, r5, r6, pc}
 8012a98:	ab01      	add	r3, sp, #4
 8012a9a:	466a      	mov	r2, sp
 8012a9c:	f7ff ffc8 	bl	8012a30 <__swhatbuf_r>
 8012aa0:	9900      	ldr	r1, [sp, #0]
 8012aa2:	4605      	mov	r5, r0
 8012aa4:	4630      	mov	r0, r6
 8012aa6:	f7ff f963 	bl	8011d70 <_malloc_r>
 8012aaa:	b948      	cbnz	r0, 8012ac0 <__smakebuf_r+0x44>
 8012aac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012ab0:	059a      	lsls	r2, r3, #22
 8012ab2:	d4ef      	bmi.n	8012a94 <__smakebuf_r+0x18>
 8012ab4:	f023 0303 	bic.w	r3, r3, #3
 8012ab8:	f043 0302 	orr.w	r3, r3, #2
 8012abc:	81a3      	strh	r3, [r4, #12]
 8012abe:	e7e3      	b.n	8012a88 <__smakebuf_r+0xc>
 8012ac0:	4b0d      	ldr	r3, [pc, #52]	; (8012af8 <__smakebuf_r+0x7c>)
 8012ac2:	62b3      	str	r3, [r6, #40]	; 0x28
 8012ac4:	89a3      	ldrh	r3, [r4, #12]
 8012ac6:	6020      	str	r0, [r4, #0]
 8012ac8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012acc:	81a3      	strh	r3, [r4, #12]
 8012ace:	9b00      	ldr	r3, [sp, #0]
 8012ad0:	6163      	str	r3, [r4, #20]
 8012ad2:	9b01      	ldr	r3, [sp, #4]
 8012ad4:	6120      	str	r0, [r4, #16]
 8012ad6:	b15b      	cbz	r3, 8012af0 <__smakebuf_r+0x74>
 8012ad8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012adc:	4630      	mov	r0, r6
 8012ade:	f000 f8d1 	bl	8012c84 <_isatty_r>
 8012ae2:	b128      	cbz	r0, 8012af0 <__smakebuf_r+0x74>
 8012ae4:	89a3      	ldrh	r3, [r4, #12]
 8012ae6:	f023 0303 	bic.w	r3, r3, #3
 8012aea:	f043 0301 	orr.w	r3, r3, #1
 8012aee:	81a3      	strh	r3, [r4, #12]
 8012af0:	89a0      	ldrh	r0, [r4, #12]
 8012af2:	4305      	orrs	r5, r0
 8012af4:	81a5      	strh	r5, [r4, #12]
 8012af6:	e7cd      	b.n	8012a94 <__smakebuf_r+0x18>
 8012af8:	08012889 	.word	0x08012889

08012afc <_malloc_usable_size_r>:
 8012afc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012b00:	1f18      	subs	r0, r3, #4
 8012b02:	2b00      	cmp	r3, #0
 8012b04:	bfbc      	itt	lt
 8012b06:	580b      	ldrlt	r3, [r1, r0]
 8012b08:	18c0      	addlt	r0, r0, r3
 8012b0a:	4770      	bx	lr

08012b0c <_raise_r>:
 8012b0c:	291f      	cmp	r1, #31
 8012b0e:	b538      	push	{r3, r4, r5, lr}
 8012b10:	4604      	mov	r4, r0
 8012b12:	460d      	mov	r5, r1
 8012b14:	d904      	bls.n	8012b20 <_raise_r+0x14>
 8012b16:	2316      	movs	r3, #22
 8012b18:	6003      	str	r3, [r0, #0]
 8012b1a:	f04f 30ff 	mov.w	r0, #4294967295
 8012b1e:	bd38      	pop	{r3, r4, r5, pc}
 8012b20:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8012b22:	b112      	cbz	r2, 8012b2a <_raise_r+0x1e>
 8012b24:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012b28:	b94b      	cbnz	r3, 8012b3e <_raise_r+0x32>
 8012b2a:	4620      	mov	r0, r4
 8012b2c:	f000 f830 	bl	8012b90 <_getpid_r>
 8012b30:	462a      	mov	r2, r5
 8012b32:	4601      	mov	r1, r0
 8012b34:	4620      	mov	r0, r4
 8012b36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012b3a:	f000 b817 	b.w	8012b6c <_kill_r>
 8012b3e:	2b01      	cmp	r3, #1
 8012b40:	d00a      	beq.n	8012b58 <_raise_r+0x4c>
 8012b42:	1c59      	adds	r1, r3, #1
 8012b44:	d103      	bne.n	8012b4e <_raise_r+0x42>
 8012b46:	2316      	movs	r3, #22
 8012b48:	6003      	str	r3, [r0, #0]
 8012b4a:	2001      	movs	r0, #1
 8012b4c:	e7e7      	b.n	8012b1e <_raise_r+0x12>
 8012b4e:	2400      	movs	r4, #0
 8012b50:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8012b54:	4628      	mov	r0, r5
 8012b56:	4798      	blx	r3
 8012b58:	2000      	movs	r0, #0
 8012b5a:	e7e0      	b.n	8012b1e <_raise_r+0x12>

08012b5c <raise>:
 8012b5c:	4b02      	ldr	r3, [pc, #8]	; (8012b68 <raise+0xc>)
 8012b5e:	4601      	mov	r1, r0
 8012b60:	6818      	ldr	r0, [r3, #0]
 8012b62:	f7ff bfd3 	b.w	8012b0c <_raise_r>
 8012b66:	bf00      	nop
 8012b68:	20000020 	.word	0x20000020

08012b6c <_kill_r>:
 8012b6c:	b538      	push	{r3, r4, r5, lr}
 8012b6e:	4d07      	ldr	r5, [pc, #28]	; (8012b8c <_kill_r+0x20>)
 8012b70:	2300      	movs	r3, #0
 8012b72:	4604      	mov	r4, r0
 8012b74:	4608      	mov	r0, r1
 8012b76:	4611      	mov	r1, r2
 8012b78:	602b      	str	r3, [r5, #0]
 8012b7a:	f7f3 fbfb 	bl	8006374 <_kill>
 8012b7e:	1c43      	adds	r3, r0, #1
 8012b80:	d102      	bne.n	8012b88 <_kill_r+0x1c>
 8012b82:	682b      	ldr	r3, [r5, #0]
 8012b84:	b103      	cbz	r3, 8012b88 <_kill_r+0x1c>
 8012b86:	6023      	str	r3, [r4, #0]
 8012b88:	bd38      	pop	{r3, r4, r5, pc}
 8012b8a:	bf00      	nop
 8012b8c:	20006344 	.word	0x20006344

08012b90 <_getpid_r>:
 8012b90:	f7f3 bbe8 	b.w	8006364 <_getpid>

08012b94 <__sread>:
 8012b94:	b510      	push	{r4, lr}
 8012b96:	460c      	mov	r4, r1
 8012b98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012b9c:	f000 f894 	bl	8012cc8 <_read_r>
 8012ba0:	2800      	cmp	r0, #0
 8012ba2:	bfab      	itete	ge
 8012ba4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8012ba6:	89a3      	ldrhlt	r3, [r4, #12]
 8012ba8:	181b      	addge	r3, r3, r0
 8012baa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8012bae:	bfac      	ite	ge
 8012bb0:	6563      	strge	r3, [r4, #84]	; 0x54
 8012bb2:	81a3      	strhlt	r3, [r4, #12]
 8012bb4:	bd10      	pop	{r4, pc}

08012bb6 <__swrite>:
 8012bb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012bba:	461f      	mov	r7, r3
 8012bbc:	898b      	ldrh	r3, [r1, #12]
 8012bbe:	05db      	lsls	r3, r3, #23
 8012bc0:	4605      	mov	r5, r0
 8012bc2:	460c      	mov	r4, r1
 8012bc4:	4616      	mov	r6, r2
 8012bc6:	d505      	bpl.n	8012bd4 <__swrite+0x1e>
 8012bc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012bcc:	2302      	movs	r3, #2
 8012bce:	2200      	movs	r2, #0
 8012bd0:	f000 f868 	bl	8012ca4 <_lseek_r>
 8012bd4:	89a3      	ldrh	r3, [r4, #12]
 8012bd6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012bda:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012bde:	81a3      	strh	r3, [r4, #12]
 8012be0:	4632      	mov	r2, r6
 8012be2:	463b      	mov	r3, r7
 8012be4:	4628      	mov	r0, r5
 8012be6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012bea:	f000 b817 	b.w	8012c1c <_write_r>

08012bee <__sseek>:
 8012bee:	b510      	push	{r4, lr}
 8012bf0:	460c      	mov	r4, r1
 8012bf2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012bf6:	f000 f855 	bl	8012ca4 <_lseek_r>
 8012bfa:	1c43      	adds	r3, r0, #1
 8012bfc:	89a3      	ldrh	r3, [r4, #12]
 8012bfe:	bf15      	itete	ne
 8012c00:	6560      	strne	r0, [r4, #84]	; 0x54
 8012c02:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8012c06:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8012c0a:	81a3      	strheq	r3, [r4, #12]
 8012c0c:	bf18      	it	ne
 8012c0e:	81a3      	strhne	r3, [r4, #12]
 8012c10:	bd10      	pop	{r4, pc}

08012c12 <__sclose>:
 8012c12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012c16:	f000 b813 	b.w	8012c40 <_close_r>
	...

08012c1c <_write_r>:
 8012c1c:	b538      	push	{r3, r4, r5, lr}
 8012c1e:	4d07      	ldr	r5, [pc, #28]	; (8012c3c <_write_r+0x20>)
 8012c20:	4604      	mov	r4, r0
 8012c22:	4608      	mov	r0, r1
 8012c24:	4611      	mov	r1, r2
 8012c26:	2200      	movs	r2, #0
 8012c28:	602a      	str	r2, [r5, #0]
 8012c2a:	461a      	mov	r2, r3
 8012c2c:	f7f3 fbd9 	bl	80063e2 <_write>
 8012c30:	1c43      	adds	r3, r0, #1
 8012c32:	d102      	bne.n	8012c3a <_write_r+0x1e>
 8012c34:	682b      	ldr	r3, [r5, #0]
 8012c36:	b103      	cbz	r3, 8012c3a <_write_r+0x1e>
 8012c38:	6023      	str	r3, [r4, #0]
 8012c3a:	bd38      	pop	{r3, r4, r5, pc}
 8012c3c:	20006344 	.word	0x20006344

08012c40 <_close_r>:
 8012c40:	b538      	push	{r3, r4, r5, lr}
 8012c42:	4d06      	ldr	r5, [pc, #24]	; (8012c5c <_close_r+0x1c>)
 8012c44:	2300      	movs	r3, #0
 8012c46:	4604      	mov	r4, r0
 8012c48:	4608      	mov	r0, r1
 8012c4a:	602b      	str	r3, [r5, #0]
 8012c4c:	f7f3 fbe5 	bl	800641a <_close>
 8012c50:	1c43      	adds	r3, r0, #1
 8012c52:	d102      	bne.n	8012c5a <_close_r+0x1a>
 8012c54:	682b      	ldr	r3, [r5, #0]
 8012c56:	b103      	cbz	r3, 8012c5a <_close_r+0x1a>
 8012c58:	6023      	str	r3, [r4, #0]
 8012c5a:	bd38      	pop	{r3, r4, r5, pc}
 8012c5c:	20006344 	.word	0x20006344

08012c60 <_fstat_r>:
 8012c60:	b538      	push	{r3, r4, r5, lr}
 8012c62:	4d07      	ldr	r5, [pc, #28]	; (8012c80 <_fstat_r+0x20>)
 8012c64:	2300      	movs	r3, #0
 8012c66:	4604      	mov	r4, r0
 8012c68:	4608      	mov	r0, r1
 8012c6a:	4611      	mov	r1, r2
 8012c6c:	602b      	str	r3, [r5, #0]
 8012c6e:	f7f3 fbe0 	bl	8006432 <_fstat>
 8012c72:	1c43      	adds	r3, r0, #1
 8012c74:	d102      	bne.n	8012c7c <_fstat_r+0x1c>
 8012c76:	682b      	ldr	r3, [r5, #0]
 8012c78:	b103      	cbz	r3, 8012c7c <_fstat_r+0x1c>
 8012c7a:	6023      	str	r3, [r4, #0]
 8012c7c:	bd38      	pop	{r3, r4, r5, pc}
 8012c7e:	bf00      	nop
 8012c80:	20006344 	.word	0x20006344

08012c84 <_isatty_r>:
 8012c84:	b538      	push	{r3, r4, r5, lr}
 8012c86:	4d06      	ldr	r5, [pc, #24]	; (8012ca0 <_isatty_r+0x1c>)
 8012c88:	2300      	movs	r3, #0
 8012c8a:	4604      	mov	r4, r0
 8012c8c:	4608      	mov	r0, r1
 8012c8e:	602b      	str	r3, [r5, #0]
 8012c90:	f7f3 fbdf 	bl	8006452 <_isatty>
 8012c94:	1c43      	adds	r3, r0, #1
 8012c96:	d102      	bne.n	8012c9e <_isatty_r+0x1a>
 8012c98:	682b      	ldr	r3, [r5, #0]
 8012c9a:	b103      	cbz	r3, 8012c9e <_isatty_r+0x1a>
 8012c9c:	6023      	str	r3, [r4, #0]
 8012c9e:	bd38      	pop	{r3, r4, r5, pc}
 8012ca0:	20006344 	.word	0x20006344

08012ca4 <_lseek_r>:
 8012ca4:	b538      	push	{r3, r4, r5, lr}
 8012ca6:	4d07      	ldr	r5, [pc, #28]	; (8012cc4 <_lseek_r+0x20>)
 8012ca8:	4604      	mov	r4, r0
 8012caa:	4608      	mov	r0, r1
 8012cac:	4611      	mov	r1, r2
 8012cae:	2200      	movs	r2, #0
 8012cb0:	602a      	str	r2, [r5, #0]
 8012cb2:	461a      	mov	r2, r3
 8012cb4:	f7f3 fbd8 	bl	8006468 <_lseek>
 8012cb8:	1c43      	adds	r3, r0, #1
 8012cba:	d102      	bne.n	8012cc2 <_lseek_r+0x1e>
 8012cbc:	682b      	ldr	r3, [r5, #0]
 8012cbe:	b103      	cbz	r3, 8012cc2 <_lseek_r+0x1e>
 8012cc0:	6023      	str	r3, [r4, #0]
 8012cc2:	bd38      	pop	{r3, r4, r5, pc}
 8012cc4:	20006344 	.word	0x20006344

08012cc8 <_read_r>:
 8012cc8:	b538      	push	{r3, r4, r5, lr}
 8012cca:	4d07      	ldr	r5, [pc, #28]	; (8012ce8 <_read_r+0x20>)
 8012ccc:	4604      	mov	r4, r0
 8012cce:	4608      	mov	r0, r1
 8012cd0:	4611      	mov	r1, r2
 8012cd2:	2200      	movs	r2, #0
 8012cd4:	602a      	str	r2, [r5, #0]
 8012cd6:	461a      	mov	r2, r3
 8012cd8:	f7f3 fb66 	bl	80063a8 <_read>
 8012cdc:	1c43      	adds	r3, r0, #1
 8012cde:	d102      	bne.n	8012ce6 <_read_r+0x1e>
 8012ce0:	682b      	ldr	r3, [r5, #0]
 8012ce2:	b103      	cbz	r3, 8012ce6 <_read_r+0x1e>
 8012ce4:	6023      	str	r3, [r4, #0]
 8012ce6:	bd38      	pop	{r3, r4, r5, pc}
 8012ce8:	20006344 	.word	0x20006344

08012cec <cosf>:
 8012cec:	ee10 3a10 	vmov	r3, s0
 8012cf0:	b507      	push	{r0, r1, r2, lr}
 8012cf2:	4a1e      	ldr	r2, [pc, #120]	; (8012d6c <cosf+0x80>)
 8012cf4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012cf8:	4293      	cmp	r3, r2
 8012cfa:	dc06      	bgt.n	8012d0a <cosf+0x1e>
 8012cfc:	eddf 0a1c 	vldr	s1, [pc, #112]	; 8012d70 <cosf+0x84>
 8012d00:	b003      	add	sp, #12
 8012d02:	f85d eb04 	ldr.w	lr, [sp], #4
 8012d06:	f000 be95 	b.w	8013a34 <__kernel_cosf>
 8012d0a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8012d0e:	db04      	blt.n	8012d1a <cosf+0x2e>
 8012d10:	ee30 0a40 	vsub.f32	s0, s0, s0
 8012d14:	b003      	add	sp, #12
 8012d16:	f85d fb04 	ldr.w	pc, [sp], #4
 8012d1a:	4668      	mov	r0, sp
 8012d1c:	f000 fd4a 	bl	80137b4 <__ieee754_rem_pio2f>
 8012d20:	f000 0003 	and.w	r0, r0, #3
 8012d24:	2801      	cmp	r0, #1
 8012d26:	d009      	beq.n	8012d3c <cosf+0x50>
 8012d28:	2802      	cmp	r0, #2
 8012d2a:	d010      	beq.n	8012d4e <cosf+0x62>
 8012d2c:	b9b0      	cbnz	r0, 8012d5c <cosf+0x70>
 8012d2e:	eddd 0a01 	vldr	s1, [sp, #4]
 8012d32:	ed9d 0a00 	vldr	s0, [sp]
 8012d36:	f000 fe7d 	bl	8013a34 <__kernel_cosf>
 8012d3a:	e7eb      	b.n	8012d14 <cosf+0x28>
 8012d3c:	eddd 0a01 	vldr	s1, [sp, #4]
 8012d40:	ed9d 0a00 	vldr	s0, [sp]
 8012d44:	f001 f94c 	bl	8013fe0 <__kernel_sinf>
 8012d48:	eeb1 0a40 	vneg.f32	s0, s0
 8012d4c:	e7e2      	b.n	8012d14 <cosf+0x28>
 8012d4e:	eddd 0a01 	vldr	s1, [sp, #4]
 8012d52:	ed9d 0a00 	vldr	s0, [sp]
 8012d56:	f000 fe6d 	bl	8013a34 <__kernel_cosf>
 8012d5a:	e7f5      	b.n	8012d48 <cosf+0x5c>
 8012d5c:	eddd 0a01 	vldr	s1, [sp, #4]
 8012d60:	ed9d 0a00 	vldr	s0, [sp]
 8012d64:	2001      	movs	r0, #1
 8012d66:	f001 f93b 	bl	8013fe0 <__kernel_sinf>
 8012d6a:	e7d3      	b.n	8012d14 <cosf+0x28>
 8012d6c:	3f490fd8 	.word	0x3f490fd8
 8012d70:	00000000 	.word	0x00000000

08012d74 <sinf>:
 8012d74:	ee10 3a10 	vmov	r3, s0
 8012d78:	b507      	push	{r0, r1, r2, lr}
 8012d7a:	4a1f      	ldr	r2, [pc, #124]	; (8012df8 <sinf+0x84>)
 8012d7c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012d80:	4293      	cmp	r3, r2
 8012d82:	dc07      	bgt.n	8012d94 <sinf+0x20>
 8012d84:	eddf 0a1d 	vldr	s1, [pc, #116]	; 8012dfc <sinf+0x88>
 8012d88:	2000      	movs	r0, #0
 8012d8a:	b003      	add	sp, #12
 8012d8c:	f85d eb04 	ldr.w	lr, [sp], #4
 8012d90:	f001 b926 	b.w	8013fe0 <__kernel_sinf>
 8012d94:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8012d98:	db04      	blt.n	8012da4 <sinf+0x30>
 8012d9a:	ee30 0a40 	vsub.f32	s0, s0, s0
 8012d9e:	b003      	add	sp, #12
 8012da0:	f85d fb04 	ldr.w	pc, [sp], #4
 8012da4:	4668      	mov	r0, sp
 8012da6:	f000 fd05 	bl	80137b4 <__ieee754_rem_pio2f>
 8012daa:	f000 0003 	and.w	r0, r0, #3
 8012dae:	2801      	cmp	r0, #1
 8012db0:	d00a      	beq.n	8012dc8 <sinf+0x54>
 8012db2:	2802      	cmp	r0, #2
 8012db4:	d00f      	beq.n	8012dd6 <sinf+0x62>
 8012db6:	b9c0      	cbnz	r0, 8012dea <sinf+0x76>
 8012db8:	eddd 0a01 	vldr	s1, [sp, #4]
 8012dbc:	ed9d 0a00 	vldr	s0, [sp]
 8012dc0:	2001      	movs	r0, #1
 8012dc2:	f001 f90d 	bl	8013fe0 <__kernel_sinf>
 8012dc6:	e7ea      	b.n	8012d9e <sinf+0x2a>
 8012dc8:	eddd 0a01 	vldr	s1, [sp, #4]
 8012dcc:	ed9d 0a00 	vldr	s0, [sp]
 8012dd0:	f000 fe30 	bl	8013a34 <__kernel_cosf>
 8012dd4:	e7e3      	b.n	8012d9e <sinf+0x2a>
 8012dd6:	eddd 0a01 	vldr	s1, [sp, #4]
 8012dda:	ed9d 0a00 	vldr	s0, [sp]
 8012dde:	2001      	movs	r0, #1
 8012de0:	f001 f8fe 	bl	8013fe0 <__kernel_sinf>
 8012de4:	eeb1 0a40 	vneg.f32	s0, s0
 8012de8:	e7d9      	b.n	8012d9e <sinf+0x2a>
 8012dea:	eddd 0a01 	vldr	s1, [sp, #4]
 8012dee:	ed9d 0a00 	vldr	s0, [sp]
 8012df2:	f000 fe1f 	bl	8013a34 <__kernel_cosf>
 8012df6:	e7f5      	b.n	8012de4 <sinf+0x70>
 8012df8:	3f490fd8 	.word	0x3f490fd8
 8012dfc:	00000000 	.word	0x00000000

08012e00 <asinf>:
 8012e00:	b508      	push	{r3, lr}
 8012e02:	ed2d 8b02 	vpush	{d8}
 8012e06:	eeb0 8a40 	vmov.f32	s16, s0
 8012e0a:	f000 f87f 	bl	8012f0c <__ieee754_asinf>
 8012e0e:	eeb4 8a48 	vcmp.f32	s16, s16
 8012e12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e16:	eef0 8a40 	vmov.f32	s17, s0
 8012e1a:	d615      	bvs.n	8012e48 <asinf+0x48>
 8012e1c:	eeb0 0a48 	vmov.f32	s0, s16
 8012e20:	f001 fa1c 	bl	801425c <fabsf>
 8012e24:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8012e28:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8012e2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e30:	dd0a      	ble.n	8012e48 <asinf+0x48>
 8012e32:	f7fd f823 	bl	800fe7c <__errno>
 8012e36:	ecbd 8b02 	vpop	{d8}
 8012e3a:	2321      	movs	r3, #33	; 0x21
 8012e3c:	6003      	str	r3, [r0, #0]
 8012e3e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8012e42:	4804      	ldr	r0, [pc, #16]	; (8012e54 <asinf+0x54>)
 8012e44:	f001 ba60 	b.w	8014308 <nanf>
 8012e48:	eeb0 0a68 	vmov.f32	s0, s17
 8012e4c:	ecbd 8b02 	vpop	{d8}
 8012e50:	bd08      	pop	{r3, pc}
 8012e52:	bf00      	nop
 8012e54:	08014ab8 	.word	0x08014ab8

08012e58 <atan2f>:
 8012e58:	f000 b93e 	b.w	80130d8 <__ieee754_atan2f>

08012e5c <powf>:
 8012e5c:	b508      	push	{r3, lr}
 8012e5e:	ed2d 8b04 	vpush	{d8-d9}
 8012e62:	eeb0 8a60 	vmov.f32	s16, s1
 8012e66:	eeb0 9a40 	vmov.f32	s18, s0
 8012e6a:	f000 f9d5 	bl	8013218 <__ieee754_powf>
 8012e6e:	eeb4 8a48 	vcmp.f32	s16, s16
 8012e72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e76:	eef0 8a40 	vmov.f32	s17, s0
 8012e7a:	d63e      	bvs.n	8012efa <powf+0x9e>
 8012e7c:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8012e80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e84:	d112      	bne.n	8012eac <powf+0x50>
 8012e86:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8012e8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e8e:	d039      	beq.n	8012f04 <powf+0xa8>
 8012e90:	eeb0 0a48 	vmov.f32	s0, s16
 8012e94:	f001 f9e9 	bl	801426a <finitef>
 8012e98:	b378      	cbz	r0, 8012efa <powf+0x9e>
 8012e9a:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8012e9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ea2:	d52a      	bpl.n	8012efa <powf+0x9e>
 8012ea4:	f7fc ffea 	bl	800fe7c <__errno>
 8012ea8:	2322      	movs	r3, #34	; 0x22
 8012eaa:	e014      	b.n	8012ed6 <powf+0x7a>
 8012eac:	f001 f9dd 	bl	801426a <finitef>
 8012eb0:	b998      	cbnz	r0, 8012eda <powf+0x7e>
 8012eb2:	eeb0 0a49 	vmov.f32	s0, s18
 8012eb6:	f001 f9d8 	bl	801426a <finitef>
 8012eba:	b170      	cbz	r0, 8012eda <powf+0x7e>
 8012ebc:	eeb0 0a48 	vmov.f32	s0, s16
 8012ec0:	f001 f9d3 	bl	801426a <finitef>
 8012ec4:	b148      	cbz	r0, 8012eda <powf+0x7e>
 8012ec6:	eef4 8a68 	vcmp.f32	s17, s17
 8012eca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ece:	d7e9      	bvc.n	8012ea4 <powf+0x48>
 8012ed0:	f7fc ffd4 	bl	800fe7c <__errno>
 8012ed4:	2321      	movs	r3, #33	; 0x21
 8012ed6:	6003      	str	r3, [r0, #0]
 8012ed8:	e00f      	b.n	8012efa <powf+0x9e>
 8012eda:	eef5 8a40 	vcmp.f32	s17, #0.0
 8012ede:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ee2:	d10a      	bne.n	8012efa <powf+0x9e>
 8012ee4:	eeb0 0a49 	vmov.f32	s0, s18
 8012ee8:	f001 f9bf 	bl	801426a <finitef>
 8012eec:	b128      	cbz	r0, 8012efa <powf+0x9e>
 8012eee:	eeb0 0a48 	vmov.f32	s0, s16
 8012ef2:	f001 f9ba 	bl	801426a <finitef>
 8012ef6:	2800      	cmp	r0, #0
 8012ef8:	d1d4      	bne.n	8012ea4 <powf+0x48>
 8012efa:	eeb0 0a68 	vmov.f32	s0, s17
 8012efe:	ecbd 8b04 	vpop	{d8-d9}
 8012f02:	bd08      	pop	{r3, pc}
 8012f04:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8012f08:	e7f7      	b.n	8012efa <powf+0x9e>
	...

08012f0c <__ieee754_asinf>:
 8012f0c:	b538      	push	{r3, r4, r5, lr}
 8012f0e:	ee10 5a10 	vmov	r5, s0
 8012f12:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8012f16:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8012f1a:	ed2d 8b04 	vpush	{d8-d9}
 8012f1e:	d10c      	bne.n	8012f3a <__ieee754_asinf+0x2e>
 8012f20:	eddf 7a5d 	vldr	s15, [pc, #372]	; 8013098 <__ieee754_asinf+0x18c>
 8012f24:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 801309c <__ieee754_asinf+0x190>
 8012f28:	ee60 7a27 	vmul.f32	s15, s0, s15
 8012f2c:	eee0 7a07 	vfma.f32	s15, s0, s14
 8012f30:	eeb0 0a67 	vmov.f32	s0, s15
 8012f34:	ecbd 8b04 	vpop	{d8-d9}
 8012f38:	bd38      	pop	{r3, r4, r5, pc}
 8012f3a:	dd04      	ble.n	8012f46 <__ieee754_asinf+0x3a>
 8012f3c:	ee70 7a40 	vsub.f32	s15, s0, s0
 8012f40:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8012f44:	e7f6      	b.n	8012f34 <__ieee754_asinf+0x28>
 8012f46:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8012f4a:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8012f4e:	da0b      	bge.n	8012f68 <__ieee754_asinf+0x5c>
 8012f50:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 8012f54:	da52      	bge.n	8012ffc <__ieee754_asinf+0xf0>
 8012f56:	eddf 7a52 	vldr	s15, [pc, #328]	; 80130a0 <__ieee754_asinf+0x194>
 8012f5a:	ee70 7a27 	vadd.f32	s15, s0, s15
 8012f5e:	eef4 7ae8 	vcmpe.f32	s15, s17
 8012f62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012f66:	dce5      	bgt.n	8012f34 <__ieee754_asinf+0x28>
 8012f68:	f001 f978 	bl	801425c <fabsf>
 8012f6c:	ee38 0ac0 	vsub.f32	s0, s17, s0
 8012f70:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 8012f74:	ee20 8a08 	vmul.f32	s16, s0, s16
 8012f78:	eddf 7a4a 	vldr	s15, [pc, #296]	; 80130a4 <__ieee754_asinf+0x198>
 8012f7c:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 80130a8 <__ieee754_asinf+0x19c>
 8012f80:	ed9f 9a4a 	vldr	s18, [pc, #296]	; 80130ac <__ieee754_asinf+0x1a0>
 8012f84:	eea8 7a27 	vfma.f32	s14, s16, s15
 8012f88:	eddf 7a49 	vldr	s15, [pc, #292]	; 80130b0 <__ieee754_asinf+0x1a4>
 8012f8c:	eee7 7a08 	vfma.f32	s15, s14, s16
 8012f90:	ed9f 7a48 	vldr	s14, [pc, #288]	; 80130b4 <__ieee754_asinf+0x1a8>
 8012f94:	eea7 7a88 	vfma.f32	s14, s15, s16
 8012f98:	eddf 7a47 	vldr	s15, [pc, #284]	; 80130b8 <__ieee754_asinf+0x1ac>
 8012f9c:	eee7 7a08 	vfma.f32	s15, s14, s16
 8012fa0:	ed9f 7a46 	vldr	s14, [pc, #280]	; 80130bc <__ieee754_asinf+0x1b0>
 8012fa4:	eea7 9a88 	vfma.f32	s18, s15, s16
 8012fa8:	eddf 7a45 	vldr	s15, [pc, #276]	; 80130c0 <__ieee754_asinf+0x1b4>
 8012fac:	eee8 7a07 	vfma.f32	s15, s16, s14
 8012fb0:	ed9f 7a44 	vldr	s14, [pc, #272]	; 80130c4 <__ieee754_asinf+0x1b8>
 8012fb4:	eea7 7a88 	vfma.f32	s14, s15, s16
 8012fb8:	eddf 7a43 	vldr	s15, [pc, #268]	; 80130c8 <__ieee754_asinf+0x1bc>
 8012fbc:	eee7 7a08 	vfma.f32	s15, s14, s16
 8012fc0:	eeb0 0a48 	vmov.f32	s0, s16
 8012fc4:	eee7 8a88 	vfma.f32	s17, s15, s16
 8012fc8:	f000 fd30 	bl	8013a2c <__ieee754_sqrtf>
 8012fcc:	4b3f      	ldr	r3, [pc, #252]	; (80130cc <__ieee754_asinf+0x1c0>)
 8012fce:	ee29 9a08 	vmul.f32	s18, s18, s16
 8012fd2:	429c      	cmp	r4, r3
 8012fd4:	ee89 6a28 	vdiv.f32	s12, s18, s17
 8012fd8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8012fdc:	dd3d      	ble.n	801305a <__ieee754_asinf+0x14e>
 8012fde:	eea0 0a06 	vfma.f32	s0, s0, s12
 8012fe2:	eddf 7a3b 	vldr	s15, [pc, #236]	; 80130d0 <__ieee754_asinf+0x1c4>
 8012fe6:	eee0 7a26 	vfma.f32	s15, s0, s13
 8012fea:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 801309c <__ieee754_asinf+0x190>
 8012fee:	ee30 0a67 	vsub.f32	s0, s0, s15
 8012ff2:	2d00      	cmp	r5, #0
 8012ff4:	bfd8      	it	le
 8012ff6:	eeb1 0a40 	vnegle.f32	s0, s0
 8012ffa:	e79b      	b.n	8012f34 <__ieee754_asinf+0x28>
 8012ffc:	ee60 7a00 	vmul.f32	s15, s0, s0
 8013000:	eddf 6a28 	vldr	s13, [pc, #160]	; 80130a4 <__ieee754_asinf+0x198>
 8013004:	ed9f 7a28 	vldr	s14, [pc, #160]	; 80130a8 <__ieee754_asinf+0x19c>
 8013008:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 80130bc <__ieee754_asinf+0x1b0>
 801300c:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8013010:	eddf 6a27 	vldr	s13, [pc, #156]	; 80130b0 <__ieee754_asinf+0x1a4>
 8013014:	eee7 6a27 	vfma.f32	s13, s14, s15
 8013018:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80130b4 <__ieee754_asinf+0x1a8>
 801301c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8013020:	eddf 6a25 	vldr	s13, [pc, #148]	; 80130b8 <__ieee754_asinf+0x1ac>
 8013024:	eee7 6a27 	vfma.f32	s13, s14, s15
 8013028:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80130ac <__ieee754_asinf+0x1a0>
 801302c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8013030:	eddf 6a23 	vldr	s13, [pc, #140]	; 80130c0 <__ieee754_asinf+0x1b4>
 8013034:	eee7 6a86 	vfma.f32	s13, s15, s12
 8013038:	ed9f 6a22 	vldr	s12, [pc, #136]	; 80130c4 <__ieee754_asinf+0x1b8>
 801303c:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8013040:	eddf 6a21 	vldr	s13, [pc, #132]	; 80130c8 <__ieee754_asinf+0x1bc>
 8013044:	eee6 6a27 	vfma.f32	s13, s12, s15
 8013048:	ee27 7a27 	vmul.f32	s14, s14, s15
 801304c:	eee6 8aa7 	vfma.f32	s17, s13, s15
 8013050:	eec7 7a28 	vdiv.f32	s15, s14, s17
 8013054:	eea0 0a27 	vfma.f32	s0, s0, s15
 8013058:	e76c      	b.n	8012f34 <__ieee754_asinf+0x28>
 801305a:	ee10 3a10 	vmov	r3, s0
 801305e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8013062:	f023 030f 	bic.w	r3, r3, #15
 8013066:	ee07 3a10 	vmov	s14, r3
 801306a:	eea7 8a47 	vfms.f32	s16, s14, s14
 801306e:	ee70 7a07 	vadd.f32	s15, s0, s14
 8013072:	ee30 0a00 	vadd.f32	s0, s0, s0
 8013076:	eec8 5a27 	vdiv.f32	s11, s16, s15
 801307a:	eddf 7a07 	vldr	s15, [pc, #28]	; 8013098 <__ieee754_asinf+0x18c>
 801307e:	eee5 7ae6 	vfms.f32	s15, s11, s13
 8013082:	eed0 7a06 	vfnms.f32	s15, s0, s12
 8013086:	ed9f 0a13 	vldr	s0, [pc, #76]	; 80130d4 <__ieee754_asinf+0x1c8>
 801308a:	eeb0 6a40 	vmov.f32	s12, s0
 801308e:	eea7 6a66 	vfms.f32	s12, s14, s13
 8013092:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8013096:	e7aa      	b.n	8012fee <__ieee754_asinf+0xe2>
 8013098:	b33bbd2e 	.word	0xb33bbd2e
 801309c:	3fc90fdb 	.word	0x3fc90fdb
 80130a0:	7149f2ca 	.word	0x7149f2ca
 80130a4:	3811ef08 	.word	0x3811ef08
 80130a8:	3a4f7f04 	.word	0x3a4f7f04
 80130ac:	3e2aaaab 	.word	0x3e2aaaab
 80130b0:	bd241146 	.word	0xbd241146
 80130b4:	3e4e0aa8 	.word	0x3e4e0aa8
 80130b8:	bea6b090 	.word	0xbea6b090
 80130bc:	3d9dc62e 	.word	0x3d9dc62e
 80130c0:	bf303361 	.word	0xbf303361
 80130c4:	4001572d 	.word	0x4001572d
 80130c8:	c019d139 	.word	0xc019d139
 80130cc:	3f799999 	.word	0x3f799999
 80130d0:	333bbd2e 	.word	0x333bbd2e
 80130d4:	3f490fdb 	.word	0x3f490fdb

080130d8 <__ieee754_atan2f>:
 80130d8:	ee10 2a90 	vmov	r2, s1
 80130dc:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 80130e0:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80130e4:	b510      	push	{r4, lr}
 80130e6:	eef0 7a40 	vmov.f32	s15, s0
 80130ea:	dc06      	bgt.n	80130fa <__ieee754_atan2f+0x22>
 80130ec:	ee10 0a10 	vmov	r0, s0
 80130f0:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 80130f4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80130f8:	dd04      	ble.n	8013104 <__ieee754_atan2f+0x2c>
 80130fa:	ee77 7aa0 	vadd.f32	s15, s15, s1
 80130fe:	eeb0 0a67 	vmov.f32	s0, s15
 8013102:	bd10      	pop	{r4, pc}
 8013104:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8013108:	d103      	bne.n	8013112 <__ieee754_atan2f+0x3a>
 801310a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801310e:	f000 bfd1 	b.w	80140b4 <atanf>
 8013112:	1794      	asrs	r4, r2, #30
 8013114:	f004 0402 	and.w	r4, r4, #2
 8013118:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 801311c:	b943      	cbnz	r3, 8013130 <__ieee754_atan2f+0x58>
 801311e:	2c02      	cmp	r4, #2
 8013120:	d05e      	beq.n	80131e0 <__ieee754_atan2f+0x108>
 8013122:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80131f4 <__ieee754_atan2f+0x11c>
 8013126:	2c03      	cmp	r4, #3
 8013128:	bf08      	it	eq
 801312a:	eef0 7a47 	vmoveq.f32	s15, s14
 801312e:	e7e6      	b.n	80130fe <__ieee754_atan2f+0x26>
 8013130:	b941      	cbnz	r1, 8013144 <__ieee754_atan2f+0x6c>
 8013132:	eddf 7a31 	vldr	s15, [pc, #196]	; 80131f8 <__ieee754_atan2f+0x120>
 8013136:	ed9f 0a31 	vldr	s0, [pc, #196]	; 80131fc <__ieee754_atan2f+0x124>
 801313a:	2800      	cmp	r0, #0
 801313c:	bfb8      	it	lt
 801313e:	eef0 7a40 	vmovlt.f32	s15, s0
 8013142:	e7dc      	b.n	80130fe <__ieee754_atan2f+0x26>
 8013144:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8013148:	d110      	bne.n	801316c <__ieee754_atan2f+0x94>
 801314a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801314e:	f104 34ff 	add.w	r4, r4, #4294967295
 8013152:	d107      	bne.n	8013164 <__ieee754_atan2f+0x8c>
 8013154:	2c02      	cmp	r4, #2
 8013156:	d846      	bhi.n	80131e6 <__ieee754_atan2f+0x10e>
 8013158:	4b29      	ldr	r3, [pc, #164]	; (8013200 <__ieee754_atan2f+0x128>)
 801315a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801315e:	edd4 7a00 	vldr	s15, [r4]
 8013162:	e7cc      	b.n	80130fe <__ieee754_atan2f+0x26>
 8013164:	2c02      	cmp	r4, #2
 8013166:	d841      	bhi.n	80131ec <__ieee754_atan2f+0x114>
 8013168:	4b26      	ldr	r3, [pc, #152]	; (8013204 <__ieee754_atan2f+0x12c>)
 801316a:	e7f6      	b.n	801315a <__ieee754_atan2f+0x82>
 801316c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8013170:	d0df      	beq.n	8013132 <__ieee754_atan2f+0x5a>
 8013172:	1a5b      	subs	r3, r3, r1
 8013174:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 8013178:	ea4f 51e3 	mov.w	r1, r3, asr #23
 801317c:	da1a      	bge.n	80131b4 <__ieee754_atan2f+0xdc>
 801317e:	2a00      	cmp	r2, #0
 8013180:	da01      	bge.n	8013186 <__ieee754_atan2f+0xae>
 8013182:	313c      	adds	r1, #60	; 0x3c
 8013184:	db19      	blt.n	80131ba <__ieee754_atan2f+0xe2>
 8013186:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 801318a:	f001 f867 	bl	801425c <fabsf>
 801318e:	f000 ff91 	bl	80140b4 <atanf>
 8013192:	eef0 7a40 	vmov.f32	s15, s0
 8013196:	2c01      	cmp	r4, #1
 8013198:	d012      	beq.n	80131c0 <__ieee754_atan2f+0xe8>
 801319a:	2c02      	cmp	r4, #2
 801319c:	d017      	beq.n	80131ce <__ieee754_atan2f+0xf6>
 801319e:	2c00      	cmp	r4, #0
 80131a0:	d0ad      	beq.n	80130fe <__ieee754_atan2f+0x26>
 80131a2:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8013208 <__ieee754_atan2f+0x130>
 80131a6:	ee77 7a80 	vadd.f32	s15, s15, s0
 80131aa:	ed9f 0a18 	vldr	s0, [pc, #96]	; 801320c <__ieee754_atan2f+0x134>
 80131ae:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80131b2:	e7a4      	b.n	80130fe <__ieee754_atan2f+0x26>
 80131b4:	eddf 7a10 	vldr	s15, [pc, #64]	; 80131f8 <__ieee754_atan2f+0x120>
 80131b8:	e7ed      	b.n	8013196 <__ieee754_atan2f+0xbe>
 80131ba:	eddf 7a15 	vldr	s15, [pc, #84]	; 8013210 <__ieee754_atan2f+0x138>
 80131be:	e7ea      	b.n	8013196 <__ieee754_atan2f+0xbe>
 80131c0:	ee17 3a90 	vmov	r3, s15
 80131c4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80131c8:	ee07 3a90 	vmov	s15, r3
 80131cc:	e797      	b.n	80130fe <__ieee754_atan2f+0x26>
 80131ce:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8013208 <__ieee754_atan2f+0x130>
 80131d2:	ee77 7a80 	vadd.f32	s15, s15, s0
 80131d6:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 801320c <__ieee754_atan2f+0x134>
 80131da:	ee70 7a67 	vsub.f32	s15, s0, s15
 80131de:	e78e      	b.n	80130fe <__ieee754_atan2f+0x26>
 80131e0:	eddf 7a0a 	vldr	s15, [pc, #40]	; 801320c <__ieee754_atan2f+0x134>
 80131e4:	e78b      	b.n	80130fe <__ieee754_atan2f+0x26>
 80131e6:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8013214 <__ieee754_atan2f+0x13c>
 80131ea:	e788      	b.n	80130fe <__ieee754_atan2f+0x26>
 80131ec:	eddf 7a08 	vldr	s15, [pc, #32]	; 8013210 <__ieee754_atan2f+0x138>
 80131f0:	e785      	b.n	80130fe <__ieee754_atan2f+0x26>
 80131f2:	bf00      	nop
 80131f4:	c0490fdb 	.word	0xc0490fdb
 80131f8:	3fc90fdb 	.word	0x3fc90fdb
 80131fc:	bfc90fdb 	.word	0xbfc90fdb
 8013200:	08014c24 	.word	0x08014c24
 8013204:	08014c30 	.word	0x08014c30
 8013208:	33bbbd2e 	.word	0x33bbbd2e
 801320c:	40490fdb 	.word	0x40490fdb
 8013210:	00000000 	.word	0x00000000
 8013214:	3f490fdb 	.word	0x3f490fdb

08013218 <__ieee754_powf>:
 8013218:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801321c:	ee10 4a90 	vmov	r4, s1
 8013220:	f034 4800 	bics.w	r8, r4, #2147483648	; 0x80000000
 8013224:	ed2d 8b02 	vpush	{d8}
 8013228:	ee10 6a10 	vmov	r6, s0
 801322c:	eeb0 8a40 	vmov.f32	s16, s0
 8013230:	eef0 8a60 	vmov.f32	s17, s1
 8013234:	d10c      	bne.n	8013250 <__ieee754_powf+0x38>
 8013236:	f486 0680 	eor.w	r6, r6, #4194304	; 0x400000
 801323a:	0076      	lsls	r6, r6, #1
 801323c:	f516 0f00 	cmn.w	r6, #8388608	; 0x800000
 8013240:	f240 8296 	bls.w	8013770 <__ieee754_powf+0x558>
 8013244:	ee38 0a28 	vadd.f32	s0, s16, s17
 8013248:	ecbd 8b02 	vpop	{d8}
 801324c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013250:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8013254:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8013258:	dcf4      	bgt.n	8013244 <__ieee754_powf+0x2c>
 801325a:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 801325e:	dd08      	ble.n	8013272 <__ieee754_powf+0x5a>
 8013260:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
 8013264:	d1ee      	bne.n	8013244 <__ieee754_powf+0x2c>
 8013266:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 801326a:	0064      	lsls	r4, r4, #1
 801326c:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 8013270:	e7e6      	b.n	8013240 <__ieee754_powf+0x28>
 8013272:	2e00      	cmp	r6, #0
 8013274:	da20      	bge.n	80132b8 <__ieee754_powf+0xa0>
 8013276:	f1b8 4f97 	cmp.w	r8, #1266679808	; 0x4b800000
 801327a:	da2d      	bge.n	80132d8 <__ieee754_powf+0xc0>
 801327c:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 8013280:	f2c0 827f 	blt.w	8013782 <__ieee754_powf+0x56a>
 8013284:	ea4f 53e8 	mov.w	r3, r8, asr #23
 8013288:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 801328c:	fa48 f703 	asr.w	r7, r8, r3
 8013290:	fa07 f303 	lsl.w	r3, r7, r3
 8013294:	4543      	cmp	r3, r8
 8013296:	f040 8274 	bne.w	8013782 <__ieee754_powf+0x56a>
 801329a:	f007 0701 	and.w	r7, r7, #1
 801329e:	f1c7 0702 	rsb	r7, r7, #2
 80132a2:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 80132a6:	d11f      	bne.n	80132e8 <__ieee754_powf+0xd0>
 80132a8:	2c00      	cmp	r4, #0
 80132aa:	f280 8267 	bge.w	801377c <__ieee754_powf+0x564>
 80132ae:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80132b2:	ee87 0a88 	vdiv.f32	s0, s15, s16
 80132b6:	e7c7      	b.n	8013248 <__ieee754_powf+0x30>
 80132b8:	2700      	movs	r7, #0
 80132ba:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 80132be:	d1f0      	bne.n	80132a2 <__ieee754_powf+0x8a>
 80132c0:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 80132c4:	f000 8254 	beq.w	8013770 <__ieee754_powf+0x558>
 80132c8:	dd08      	ble.n	80132dc <__ieee754_powf+0xc4>
 80132ca:	ed9f 0ac2 	vldr	s0, [pc, #776]	; 80135d4 <__ieee754_powf+0x3bc>
 80132ce:	2c00      	cmp	r4, #0
 80132d0:	bfa8      	it	ge
 80132d2:	eeb0 0a68 	vmovge.f32	s0, s17
 80132d6:	e7b7      	b.n	8013248 <__ieee754_powf+0x30>
 80132d8:	2702      	movs	r7, #2
 80132da:	e7ee      	b.n	80132ba <__ieee754_powf+0xa2>
 80132dc:	2c00      	cmp	r4, #0
 80132de:	f280 824a 	bge.w	8013776 <__ieee754_powf+0x55e>
 80132e2:	eeb1 0a68 	vneg.f32	s0, s17
 80132e6:	e7af      	b.n	8013248 <__ieee754_powf+0x30>
 80132e8:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 80132ec:	d102      	bne.n	80132f4 <__ieee754_powf+0xdc>
 80132ee:	ee28 0a08 	vmul.f32	s0, s16, s16
 80132f2:	e7a9      	b.n	8013248 <__ieee754_powf+0x30>
 80132f4:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 80132f8:	eeb0 0a48 	vmov.f32	s0, s16
 80132fc:	d107      	bne.n	801330e <__ieee754_powf+0xf6>
 80132fe:	2e00      	cmp	r6, #0
 8013300:	db05      	blt.n	801330e <__ieee754_powf+0xf6>
 8013302:	ecbd 8b02 	vpop	{d8}
 8013306:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801330a:	f000 bb8f 	b.w	8013a2c <__ieee754_sqrtf>
 801330e:	f000 ffa5 	bl	801425c <fabsf>
 8013312:	b125      	cbz	r5, 801331e <__ieee754_powf+0x106>
 8013314:	f026 4340 	bic.w	r3, r6, #3221225472	; 0xc0000000
 8013318:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 801331c:	d116      	bne.n	801334c <__ieee754_powf+0x134>
 801331e:	2c00      	cmp	r4, #0
 8013320:	bfbc      	itt	lt
 8013322:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 8013326:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 801332a:	2e00      	cmp	r6, #0
 801332c:	da8c      	bge.n	8013248 <__ieee754_powf+0x30>
 801332e:	f1a5 557e 	sub.w	r5, r5, #1065353216	; 0x3f800000
 8013332:	ea55 0307 	orrs.w	r3, r5, r7
 8013336:	d104      	bne.n	8013342 <__ieee754_powf+0x12a>
 8013338:	ee70 7a40 	vsub.f32	s15, s0, s0
 801333c:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8013340:	e782      	b.n	8013248 <__ieee754_powf+0x30>
 8013342:	2f01      	cmp	r7, #1
 8013344:	d180      	bne.n	8013248 <__ieee754_powf+0x30>
 8013346:	eeb1 0a40 	vneg.f32	s0, s0
 801334a:	e77d      	b.n	8013248 <__ieee754_powf+0x30>
 801334c:	0ff0      	lsrs	r0, r6, #31
 801334e:	3801      	subs	r0, #1
 8013350:	ea57 0300 	orrs.w	r3, r7, r0
 8013354:	d104      	bne.n	8013360 <__ieee754_powf+0x148>
 8013356:	ee38 8a48 	vsub.f32	s16, s16, s16
 801335a:	ee88 0a08 	vdiv.f32	s0, s16, s16
 801335e:	e773      	b.n	8013248 <__ieee754_powf+0x30>
 8013360:	f1b8 4f9a 	cmp.w	r8, #1291845632	; 0x4d000000
 8013364:	dd74      	ble.n	8013450 <__ieee754_powf+0x238>
 8013366:	4b9c      	ldr	r3, [pc, #624]	; (80135d8 <__ieee754_powf+0x3c0>)
 8013368:	429d      	cmp	r5, r3
 801336a:	dc08      	bgt.n	801337e <__ieee754_powf+0x166>
 801336c:	2c00      	cmp	r4, #0
 801336e:	da0b      	bge.n	8013388 <__ieee754_powf+0x170>
 8013370:	2000      	movs	r0, #0
 8013372:	ecbd 8b02 	vpop	{d8}
 8013376:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801337a:	f000 be95 	b.w	80140a8 <__math_oflowf>
 801337e:	4b97      	ldr	r3, [pc, #604]	; (80135dc <__ieee754_powf+0x3c4>)
 8013380:	429d      	cmp	r5, r3
 8013382:	dd08      	ble.n	8013396 <__ieee754_powf+0x17e>
 8013384:	2c00      	cmp	r4, #0
 8013386:	dcf3      	bgt.n	8013370 <__ieee754_powf+0x158>
 8013388:	2000      	movs	r0, #0
 801338a:	ecbd 8b02 	vpop	{d8}
 801338e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013392:	f000 be83 	b.w	801409c <__math_uflowf>
 8013396:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801339a:	ee30 0a67 	vsub.f32	s0, s0, s15
 801339e:	eddf 6a90 	vldr	s13, [pc, #576]	; 80135e0 <__ieee754_powf+0x3c8>
 80133a2:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 80133a6:	eee0 6a67 	vfms.f32	s13, s0, s15
 80133aa:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80133ae:	eee6 7ac0 	vfms.f32	s15, s13, s0
 80133b2:	ee20 7a00 	vmul.f32	s14, s0, s0
 80133b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80133ba:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 80135e4 <__ieee754_powf+0x3cc>
 80133be:	ee67 7a67 	vnmul.f32	s15, s14, s15
 80133c2:	ed9f 7a89 	vldr	s14, [pc, #548]	; 80135e8 <__ieee754_powf+0x3d0>
 80133c6:	eee0 7a07 	vfma.f32	s15, s0, s14
 80133ca:	ed9f 7a88 	vldr	s14, [pc, #544]	; 80135ec <__ieee754_powf+0x3d4>
 80133ce:	eef0 6a67 	vmov.f32	s13, s15
 80133d2:	eee0 6a07 	vfma.f32	s13, s0, s14
 80133d6:	ee16 3a90 	vmov	r3, s13
 80133da:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80133de:	f023 030f 	bic.w	r3, r3, #15
 80133e2:	ee00 3a90 	vmov	s1, r3
 80133e6:	eee0 0a47 	vfms.f32	s1, s0, s14
 80133ea:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80133ee:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 80133f2:	f024 040f 	bic.w	r4, r4, #15
 80133f6:	ee07 4a10 	vmov	s14, r4
 80133fa:	ee67 0aa8 	vmul.f32	s1, s15, s17
 80133fe:	ee38 7ac7 	vsub.f32	s14, s17, s14
 8013402:	ee07 3a90 	vmov	s15, r3
 8013406:	eee7 0a27 	vfma.f32	s1, s14, s15
 801340a:	3f01      	subs	r7, #1
 801340c:	ea57 0200 	orrs.w	r2, r7, r0
 8013410:	ee07 4a10 	vmov	s14, r4
 8013414:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013418:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 801341c:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8013420:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8013424:	ee17 4a10 	vmov	r4, s14
 8013428:	bf08      	it	eq
 801342a:	eeb0 8a40 	vmoveq.f32	s16, s0
 801342e:	2c00      	cmp	r4, #0
 8013430:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8013434:	f340 817e 	ble.w	8013734 <__ieee754_powf+0x51c>
 8013438:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 801343c:	f340 80f8 	ble.w	8013630 <__ieee754_powf+0x418>
 8013440:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8013444:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013448:	bf4c      	ite	mi
 801344a:	2001      	movmi	r0, #1
 801344c:	2000      	movpl	r0, #0
 801344e:	e790      	b.n	8013372 <__ieee754_powf+0x15a>
 8013450:	f016 4fff 	tst.w	r6, #2139095040	; 0x7f800000
 8013454:	bf01      	itttt	eq
 8013456:	eddf 7a66 	vldreq	s15, [pc, #408]	; 80135f0 <__ieee754_powf+0x3d8>
 801345a:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 801345e:	f06f 0217 	mvneq.w	r2, #23
 8013462:	ee17 5a90 	vmoveq	r5, s15
 8013466:	ea4f 53e5 	mov.w	r3, r5, asr #23
 801346a:	bf18      	it	ne
 801346c:	2200      	movne	r2, #0
 801346e:	3b7f      	subs	r3, #127	; 0x7f
 8013470:	4413      	add	r3, r2
 8013472:	4a60      	ldr	r2, [pc, #384]	; (80135f4 <__ieee754_powf+0x3dc>)
 8013474:	f3c5 0516 	ubfx	r5, r5, #0, #23
 8013478:	4295      	cmp	r5, r2
 801347a:	f045 517e 	orr.w	r1, r5, #1065353216	; 0x3f800000
 801347e:	dd06      	ble.n	801348e <__ieee754_powf+0x276>
 8013480:	4a5d      	ldr	r2, [pc, #372]	; (80135f8 <__ieee754_powf+0x3e0>)
 8013482:	4295      	cmp	r5, r2
 8013484:	f340 80a4 	ble.w	80135d0 <__ieee754_powf+0x3b8>
 8013488:	3301      	adds	r3, #1
 801348a:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 801348e:	2500      	movs	r5, #0
 8013490:	4a5a      	ldr	r2, [pc, #360]	; (80135fc <__ieee754_powf+0x3e4>)
 8013492:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 8013496:	ee07 1a90 	vmov	s15, r1
 801349a:	ed92 7a00 	vldr	s14, [r2]
 801349e:	4a58      	ldr	r2, [pc, #352]	; (8013600 <__ieee754_powf+0x3e8>)
 80134a0:	ee37 6a27 	vadd.f32	s12, s14, s15
 80134a4:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 80134a8:	eec5 6a86 	vdiv.f32	s13, s11, s12
 80134ac:	1049      	asrs	r1, r1, #1
 80134ae:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 80134b2:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 80134b6:	eb01 5145 	add.w	r1, r1, r5, lsl #21
 80134ba:	ee37 5ac7 	vsub.f32	s10, s15, s14
 80134be:	ee06 1a10 	vmov	s12, r1
 80134c2:	ee65 4a26 	vmul.f32	s9, s10, s13
 80134c6:	ee36 7a47 	vsub.f32	s14, s12, s14
 80134ca:	ee14 6a90 	vmov	r6, s9
 80134ce:	4016      	ands	r6, r2
 80134d0:	ee05 6a90 	vmov	s11, r6
 80134d4:	eea5 5ac6 	vfms.f32	s10, s11, s12
 80134d8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80134dc:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8013604 <__ieee754_powf+0x3ec>
 80134e0:	eea5 5ae7 	vfms.f32	s10, s11, s15
 80134e4:	ee64 7aa4 	vmul.f32	s15, s9, s9
 80134e8:	ee25 6a26 	vmul.f32	s12, s10, s13
 80134ec:	eddf 6a46 	vldr	s13, [pc, #280]	; 8013608 <__ieee754_powf+0x3f0>
 80134f0:	eea7 7aa6 	vfma.f32	s14, s15, s13
 80134f4:	eddf 6a45 	vldr	s13, [pc, #276]	; 801360c <__ieee754_powf+0x3f4>
 80134f8:	eee7 6a27 	vfma.f32	s13, s14, s15
 80134fc:	ed9f 7a38 	vldr	s14, [pc, #224]	; 80135e0 <__ieee754_powf+0x3c8>
 8013500:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8013504:	eddf 6a42 	vldr	s13, [pc, #264]	; 8013610 <__ieee754_powf+0x3f8>
 8013508:	eee7 6a27 	vfma.f32	s13, s14, s15
 801350c:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8013614 <__ieee754_powf+0x3fc>
 8013510:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8013514:	ee74 6aa5 	vadd.f32	s13, s9, s11
 8013518:	ee27 5aa7 	vmul.f32	s10, s15, s15
 801351c:	ee66 6a86 	vmul.f32	s13, s13, s12
 8013520:	eee5 6a07 	vfma.f32	s13, s10, s14
 8013524:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 8013528:	eef0 7a45 	vmov.f32	s15, s10
 801352c:	eee5 7aa5 	vfma.f32	s15, s11, s11
 8013530:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013534:	ee17 1a90 	vmov	r1, s15
 8013538:	4011      	ands	r1, r2
 801353a:	ee07 1a90 	vmov	s15, r1
 801353e:	ee37 7ac5 	vsub.f32	s14, s15, s10
 8013542:	eea5 7ae5 	vfms.f32	s14, s11, s11
 8013546:	ee36 7ac7 	vsub.f32	s14, s13, s14
 801354a:	ee27 7a24 	vmul.f32	s14, s14, s9
 801354e:	eea6 7a27 	vfma.f32	s14, s12, s15
 8013552:	eeb0 6a47 	vmov.f32	s12, s14
 8013556:	eea5 6aa7 	vfma.f32	s12, s11, s15
 801355a:	ee16 1a10 	vmov	r1, s12
 801355e:	4011      	ands	r1, r2
 8013560:	ee06 1a90 	vmov	s13, r1
 8013564:	eee5 6ae7 	vfms.f32	s13, s11, s15
 8013568:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8013618 <__ieee754_powf+0x400>
 801356c:	eddf 5a2b 	vldr	s11, [pc, #172]	; 801361c <__ieee754_powf+0x404>
 8013570:	ee37 7a66 	vsub.f32	s14, s14, s13
 8013574:	ee06 1a10 	vmov	s12, r1
 8013578:	ee27 7a27 	vmul.f32	s14, s14, s15
 801357c:	eddf 7a28 	vldr	s15, [pc, #160]	; 8013620 <__ieee754_powf+0x408>
 8013580:	4928      	ldr	r1, [pc, #160]	; (8013624 <__ieee754_powf+0x40c>)
 8013582:	eea6 7a27 	vfma.f32	s14, s12, s15
 8013586:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 801358a:	edd1 7a00 	vldr	s15, [r1]
 801358e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013592:	ee07 3a90 	vmov	s15, r3
 8013596:	4b24      	ldr	r3, [pc, #144]	; (8013628 <__ieee754_powf+0x410>)
 8013598:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801359c:	eef0 7a47 	vmov.f32	s15, s14
 80135a0:	eee6 7a25 	vfma.f32	s15, s12, s11
 80135a4:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 80135a8:	edd5 0a00 	vldr	s1, [r5]
 80135ac:	ee77 7aa0 	vadd.f32	s15, s15, s1
 80135b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80135b4:	ee17 3a90 	vmov	r3, s15
 80135b8:	4013      	ands	r3, r2
 80135ba:	ee07 3a90 	vmov	s15, r3
 80135be:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80135c2:	ee76 6ae0 	vsub.f32	s13, s13, s1
 80135c6:	eee6 6a65 	vfms.f32	s13, s12, s11
 80135ca:	ee77 7a66 	vsub.f32	s15, s14, s13
 80135ce:	e70e      	b.n	80133ee <__ieee754_powf+0x1d6>
 80135d0:	2501      	movs	r5, #1
 80135d2:	e75d      	b.n	8013490 <__ieee754_powf+0x278>
 80135d4:	00000000 	.word	0x00000000
 80135d8:	3f7ffff3 	.word	0x3f7ffff3
 80135dc:	3f800007 	.word	0x3f800007
 80135e0:	3eaaaaab 	.word	0x3eaaaaab
 80135e4:	3fb8aa3b 	.word	0x3fb8aa3b
 80135e8:	36eca570 	.word	0x36eca570
 80135ec:	3fb8aa00 	.word	0x3fb8aa00
 80135f0:	4b800000 	.word	0x4b800000
 80135f4:	001cc471 	.word	0x001cc471
 80135f8:	005db3d6 	.word	0x005db3d6
 80135fc:	08014c3c 	.word	0x08014c3c
 8013600:	fffff000 	.word	0xfffff000
 8013604:	3e6c3255 	.word	0x3e6c3255
 8013608:	3e53f142 	.word	0x3e53f142
 801360c:	3e8ba305 	.word	0x3e8ba305
 8013610:	3edb6db7 	.word	0x3edb6db7
 8013614:	3f19999a 	.word	0x3f19999a
 8013618:	3f76384f 	.word	0x3f76384f
 801361c:	3f763800 	.word	0x3f763800
 8013620:	369dc3a0 	.word	0x369dc3a0
 8013624:	08014c4c 	.word	0x08014c4c
 8013628:	08014c44 	.word	0x08014c44
 801362c:	3338aa3c 	.word	0x3338aa3c
 8013630:	f040 8095 	bne.w	801375e <__ieee754_powf+0x546>
 8013634:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 801362c <__ieee754_powf+0x414>
 8013638:	ee37 7a67 	vsub.f32	s14, s14, s15
 801363c:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8013640:	eef4 6ac7 	vcmpe.f32	s13, s14
 8013644:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013648:	f73f aefa 	bgt.w	8013440 <__ieee754_powf+0x228>
 801364c:	15db      	asrs	r3, r3, #23
 801364e:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 8013652:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8013656:	4103      	asrs	r3, r0
 8013658:	4423      	add	r3, r4
 801365a:	494b      	ldr	r1, [pc, #300]	; (8013788 <__ieee754_powf+0x570>)
 801365c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8013660:	3a7f      	subs	r2, #127	; 0x7f
 8013662:	4111      	asrs	r1, r2
 8013664:	ea23 0101 	bic.w	r1, r3, r1
 8013668:	ee07 1a10 	vmov	s14, r1
 801366c:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8013670:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8013674:	f1c2 0217 	rsb	r2, r2, #23
 8013678:	4110      	asrs	r0, r2
 801367a:	2c00      	cmp	r4, #0
 801367c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013680:	bfb8      	it	lt
 8013682:	4240      	neglt	r0, r0
 8013684:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8013688:	ed9f 0a40 	vldr	s0, [pc, #256]	; 801378c <__ieee754_powf+0x574>
 801368c:	eddf 6a40 	vldr	s13, [pc, #256]	; 8013790 <__ieee754_powf+0x578>
 8013690:	ee17 3a10 	vmov	r3, s14
 8013694:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8013698:	f023 030f 	bic.w	r3, r3, #15
 801369c:	ee07 3a10 	vmov	s14, r3
 80136a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80136a4:	ee27 0a00 	vmul.f32	s0, s14, s0
 80136a8:	ee70 0ae7 	vsub.f32	s1, s1, s15
 80136ac:	eddf 7a39 	vldr	s15, [pc, #228]	; 8013794 <__ieee754_powf+0x57c>
 80136b0:	eea0 0aa7 	vfma.f32	s0, s1, s15
 80136b4:	eef0 7a40 	vmov.f32	s15, s0
 80136b8:	eee7 7a26 	vfma.f32	s15, s14, s13
 80136bc:	eeb0 6a67 	vmov.f32	s12, s15
 80136c0:	eea7 6a66 	vfms.f32	s12, s14, s13
 80136c4:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80136c8:	ee30 0a46 	vsub.f32	s0, s0, s12
 80136cc:	eddf 6a32 	vldr	s13, [pc, #200]	; 8013798 <__ieee754_powf+0x580>
 80136d0:	ed9f 6a32 	vldr	s12, [pc, #200]	; 801379c <__ieee754_powf+0x584>
 80136d4:	eee7 6a06 	vfma.f32	s13, s14, s12
 80136d8:	ed9f 6a31 	vldr	s12, [pc, #196]	; 80137a0 <__ieee754_powf+0x588>
 80136dc:	eea6 6a87 	vfma.f32	s12, s13, s14
 80136e0:	eddf 6a30 	vldr	s13, [pc, #192]	; 80137a4 <__ieee754_powf+0x58c>
 80136e4:	eee6 6a07 	vfma.f32	s13, s12, s14
 80136e8:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 80137a8 <__ieee754_powf+0x590>
 80136ec:	eea6 6a87 	vfma.f32	s12, s13, s14
 80136f0:	eef0 6a67 	vmov.f32	s13, s15
 80136f4:	eee6 6a47 	vfms.f32	s13, s12, s14
 80136f8:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80136fc:	ee27 6aa6 	vmul.f32	s12, s15, s13
 8013700:	ee76 6ac7 	vsub.f32	s13, s13, s14
 8013704:	eea7 0a80 	vfma.f32	s0, s15, s0
 8013708:	ee86 7a26 	vdiv.f32	s14, s12, s13
 801370c:	ee37 0a40 	vsub.f32	s0, s14, s0
 8013710:	ee70 7a67 	vsub.f32	s15, s0, s15
 8013714:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8013718:	ee30 0a67 	vsub.f32	s0, s0, s15
 801371c:	ee10 3a10 	vmov	r3, s0
 8013720:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8013724:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8013728:	da1f      	bge.n	801376a <__ieee754_powf+0x552>
 801372a:	f000 fdf3 	bl	8014314 <scalbnf>
 801372e:	ee20 0a08 	vmul.f32	s0, s0, s16
 8013732:	e589      	b.n	8013248 <__ieee754_powf+0x30>
 8013734:	4a1d      	ldr	r2, [pc, #116]	; (80137ac <__ieee754_powf+0x594>)
 8013736:	4293      	cmp	r3, r2
 8013738:	dd07      	ble.n	801374a <__ieee754_powf+0x532>
 801373a:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801373e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013742:	bf4c      	ite	mi
 8013744:	2001      	movmi	r0, #1
 8013746:	2000      	movpl	r0, #0
 8013748:	e61f      	b.n	801338a <__ieee754_powf+0x172>
 801374a:	d108      	bne.n	801375e <__ieee754_powf+0x546>
 801374c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8013750:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8013754:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013758:	f6ff af78 	blt.w	801364c <__ieee754_powf+0x434>
 801375c:	e7ed      	b.n	801373a <__ieee754_powf+0x522>
 801375e:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 8013762:	f73f af73 	bgt.w	801364c <__ieee754_powf+0x434>
 8013766:	2000      	movs	r0, #0
 8013768:	e78c      	b.n	8013684 <__ieee754_powf+0x46c>
 801376a:	ee00 3a10 	vmov	s0, r3
 801376e:	e7de      	b.n	801372e <__ieee754_powf+0x516>
 8013770:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8013774:	e568      	b.n	8013248 <__ieee754_powf+0x30>
 8013776:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 80137b0 <__ieee754_powf+0x598>
 801377a:	e565      	b.n	8013248 <__ieee754_powf+0x30>
 801377c:	eeb0 0a48 	vmov.f32	s0, s16
 8013780:	e562      	b.n	8013248 <__ieee754_powf+0x30>
 8013782:	2700      	movs	r7, #0
 8013784:	e58d      	b.n	80132a2 <__ieee754_powf+0x8a>
 8013786:	bf00      	nop
 8013788:	007fffff 	.word	0x007fffff
 801378c:	35bfbe8c 	.word	0x35bfbe8c
 8013790:	3f317200 	.word	0x3f317200
 8013794:	3f317218 	.word	0x3f317218
 8013798:	b5ddea0e 	.word	0xb5ddea0e
 801379c:	3331bb4c 	.word	0x3331bb4c
 80137a0:	388ab355 	.word	0x388ab355
 80137a4:	bb360b61 	.word	0xbb360b61
 80137a8:	3e2aaaab 	.word	0x3e2aaaab
 80137ac:	43160000 	.word	0x43160000
 80137b0:	00000000 	.word	0x00000000

080137b4 <__ieee754_rem_pio2f>:
 80137b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80137b6:	ee10 6a10 	vmov	r6, s0
 80137ba:	4b8e      	ldr	r3, [pc, #568]	; (80139f4 <__ieee754_rem_pio2f+0x240>)
 80137bc:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 80137c0:	429d      	cmp	r5, r3
 80137c2:	b087      	sub	sp, #28
 80137c4:	eef0 7a40 	vmov.f32	s15, s0
 80137c8:	4604      	mov	r4, r0
 80137ca:	dc05      	bgt.n	80137d8 <__ieee754_rem_pio2f+0x24>
 80137cc:	2300      	movs	r3, #0
 80137ce:	ed80 0a00 	vstr	s0, [r0]
 80137d2:	6043      	str	r3, [r0, #4]
 80137d4:	2000      	movs	r0, #0
 80137d6:	e01a      	b.n	801380e <__ieee754_rem_pio2f+0x5a>
 80137d8:	4b87      	ldr	r3, [pc, #540]	; (80139f8 <__ieee754_rem_pio2f+0x244>)
 80137da:	429d      	cmp	r5, r3
 80137dc:	dc46      	bgt.n	801386c <__ieee754_rem_pio2f+0xb8>
 80137de:	2e00      	cmp	r6, #0
 80137e0:	ed9f 0a86 	vldr	s0, [pc, #536]	; 80139fc <__ieee754_rem_pio2f+0x248>
 80137e4:	4b86      	ldr	r3, [pc, #536]	; (8013a00 <__ieee754_rem_pio2f+0x24c>)
 80137e6:	f025 050f 	bic.w	r5, r5, #15
 80137ea:	dd1f      	ble.n	801382c <__ieee754_rem_pio2f+0x78>
 80137ec:	429d      	cmp	r5, r3
 80137ee:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80137f2:	d00e      	beq.n	8013812 <__ieee754_rem_pio2f+0x5e>
 80137f4:	ed9f 7a83 	vldr	s14, [pc, #524]	; 8013a04 <__ieee754_rem_pio2f+0x250>
 80137f8:	ee37 0ac7 	vsub.f32	s0, s15, s14
 80137fc:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8013800:	ed80 0a00 	vstr	s0, [r0]
 8013804:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013808:	2001      	movs	r0, #1
 801380a:	edc4 7a01 	vstr	s15, [r4, #4]
 801380e:	b007      	add	sp, #28
 8013810:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013812:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 8013a08 <__ieee754_rem_pio2f+0x254>
 8013816:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8013a0c <__ieee754_rem_pio2f+0x258>
 801381a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801381e:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8013822:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8013826:	edc0 6a00 	vstr	s13, [r0]
 801382a:	e7eb      	b.n	8013804 <__ieee754_rem_pio2f+0x50>
 801382c:	429d      	cmp	r5, r3
 801382e:	ee77 7a80 	vadd.f32	s15, s15, s0
 8013832:	d00e      	beq.n	8013852 <__ieee754_rem_pio2f+0x9e>
 8013834:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8013a04 <__ieee754_rem_pio2f+0x250>
 8013838:	ee37 0a87 	vadd.f32	s0, s15, s14
 801383c:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8013840:	ed80 0a00 	vstr	s0, [r0]
 8013844:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013848:	f04f 30ff 	mov.w	r0, #4294967295
 801384c:	edc4 7a01 	vstr	s15, [r4, #4]
 8013850:	e7dd      	b.n	801380e <__ieee754_rem_pio2f+0x5a>
 8013852:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 8013a08 <__ieee754_rem_pio2f+0x254>
 8013856:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8013a0c <__ieee754_rem_pio2f+0x258>
 801385a:	ee77 7a80 	vadd.f32	s15, s15, s0
 801385e:	ee77 6a87 	vadd.f32	s13, s15, s14
 8013862:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8013866:	edc0 6a00 	vstr	s13, [r0]
 801386a:	e7eb      	b.n	8013844 <__ieee754_rem_pio2f+0x90>
 801386c:	4b68      	ldr	r3, [pc, #416]	; (8013a10 <__ieee754_rem_pio2f+0x25c>)
 801386e:	429d      	cmp	r5, r3
 8013870:	dc72      	bgt.n	8013958 <__ieee754_rem_pio2f+0x1a4>
 8013872:	f000 fcf3 	bl	801425c <fabsf>
 8013876:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8013a14 <__ieee754_rem_pio2f+0x260>
 801387a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801387e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8013882:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013886:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801388a:	ee17 0a90 	vmov	r0, s15
 801388e:	eddf 7a5b 	vldr	s15, [pc, #364]	; 80139fc <__ieee754_rem_pio2f+0x248>
 8013892:	eea7 0a67 	vfms.f32	s0, s14, s15
 8013896:	281f      	cmp	r0, #31
 8013898:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8013a04 <__ieee754_rem_pio2f+0x250>
 801389c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80138a0:	eeb1 6a47 	vneg.f32	s12, s14
 80138a4:	ee70 6a67 	vsub.f32	s13, s0, s15
 80138a8:	ee16 2a90 	vmov	r2, s13
 80138ac:	dc1c      	bgt.n	80138e8 <__ieee754_rem_pio2f+0x134>
 80138ae:	495a      	ldr	r1, [pc, #360]	; (8013a18 <__ieee754_rem_pio2f+0x264>)
 80138b0:	1e47      	subs	r7, r0, #1
 80138b2:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 80138b6:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 80138ba:	428b      	cmp	r3, r1
 80138bc:	d014      	beq.n	80138e8 <__ieee754_rem_pio2f+0x134>
 80138be:	6022      	str	r2, [r4, #0]
 80138c0:	ed94 7a00 	vldr	s14, [r4]
 80138c4:	ee30 0a47 	vsub.f32	s0, s0, s14
 80138c8:	2e00      	cmp	r6, #0
 80138ca:	ee30 0a67 	vsub.f32	s0, s0, s15
 80138ce:	ed84 0a01 	vstr	s0, [r4, #4]
 80138d2:	da9c      	bge.n	801380e <__ieee754_rem_pio2f+0x5a>
 80138d4:	eeb1 7a47 	vneg.f32	s14, s14
 80138d8:	eeb1 0a40 	vneg.f32	s0, s0
 80138dc:	ed84 7a00 	vstr	s14, [r4]
 80138e0:	ed84 0a01 	vstr	s0, [r4, #4]
 80138e4:	4240      	negs	r0, r0
 80138e6:	e792      	b.n	801380e <__ieee754_rem_pio2f+0x5a>
 80138e8:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80138ec:	15eb      	asrs	r3, r5, #23
 80138ee:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 80138f2:	2d08      	cmp	r5, #8
 80138f4:	dde3      	ble.n	80138be <__ieee754_rem_pio2f+0x10a>
 80138f6:	eddf 7a44 	vldr	s15, [pc, #272]	; 8013a08 <__ieee754_rem_pio2f+0x254>
 80138fa:	eddf 5a44 	vldr	s11, [pc, #272]	; 8013a0c <__ieee754_rem_pio2f+0x258>
 80138fe:	eef0 6a40 	vmov.f32	s13, s0
 8013902:	eee6 6a27 	vfma.f32	s13, s12, s15
 8013906:	ee30 0a66 	vsub.f32	s0, s0, s13
 801390a:	eea6 0a27 	vfma.f32	s0, s12, s15
 801390e:	eef0 7a40 	vmov.f32	s15, s0
 8013912:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8013916:	ee76 5ae7 	vsub.f32	s11, s13, s15
 801391a:	ee15 2a90 	vmov	r2, s11
 801391e:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8013922:	1a5b      	subs	r3, r3, r1
 8013924:	2b19      	cmp	r3, #25
 8013926:	dc04      	bgt.n	8013932 <__ieee754_rem_pio2f+0x17e>
 8013928:	edc4 5a00 	vstr	s11, [r4]
 801392c:	eeb0 0a66 	vmov.f32	s0, s13
 8013930:	e7c6      	b.n	80138c0 <__ieee754_rem_pio2f+0x10c>
 8013932:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8013a1c <__ieee754_rem_pio2f+0x268>
 8013936:	eeb0 0a66 	vmov.f32	s0, s13
 801393a:	eea6 0a25 	vfma.f32	s0, s12, s11
 801393e:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8013942:	eddf 6a37 	vldr	s13, [pc, #220]	; 8013a20 <__ieee754_rem_pio2f+0x26c>
 8013946:	eee6 7a25 	vfma.f32	s15, s12, s11
 801394a:	eed7 7a26 	vfnms.f32	s15, s14, s13
 801394e:	ee30 7a67 	vsub.f32	s14, s0, s15
 8013952:	ed84 7a00 	vstr	s14, [r4]
 8013956:	e7b3      	b.n	80138c0 <__ieee754_rem_pio2f+0x10c>
 8013958:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 801395c:	db06      	blt.n	801396c <__ieee754_rem_pio2f+0x1b8>
 801395e:	ee70 7a40 	vsub.f32	s15, s0, s0
 8013962:	edc0 7a01 	vstr	s15, [r0, #4]
 8013966:	edc0 7a00 	vstr	s15, [r0]
 801396a:	e733      	b.n	80137d4 <__ieee754_rem_pio2f+0x20>
 801396c:	15ea      	asrs	r2, r5, #23
 801396e:	3a86      	subs	r2, #134	; 0x86
 8013970:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8013974:	ee07 3a90 	vmov	s15, r3
 8013978:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801397c:	eddf 6a29 	vldr	s13, [pc, #164]	; 8013a24 <__ieee754_rem_pio2f+0x270>
 8013980:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013984:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013988:	ed8d 7a03 	vstr	s14, [sp, #12]
 801398c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8013990:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8013994:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013998:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801399c:	ed8d 7a04 	vstr	s14, [sp, #16]
 80139a0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80139a4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80139a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80139ac:	edcd 7a05 	vstr	s15, [sp, #20]
 80139b0:	d11e      	bne.n	80139f0 <__ieee754_rem_pio2f+0x23c>
 80139b2:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80139b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80139ba:	bf14      	ite	ne
 80139bc:	2302      	movne	r3, #2
 80139be:	2301      	moveq	r3, #1
 80139c0:	4919      	ldr	r1, [pc, #100]	; (8013a28 <__ieee754_rem_pio2f+0x274>)
 80139c2:	9101      	str	r1, [sp, #4]
 80139c4:	2102      	movs	r1, #2
 80139c6:	9100      	str	r1, [sp, #0]
 80139c8:	a803      	add	r0, sp, #12
 80139ca:	4621      	mov	r1, r4
 80139cc:	f000 f892 	bl	8013af4 <__kernel_rem_pio2f>
 80139d0:	2e00      	cmp	r6, #0
 80139d2:	f6bf af1c 	bge.w	801380e <__ieee754_rem_pio2f+0x5a>
 80139d6:	edd4 7a00 	vldr	s15, [r4]
 80139da:	eef1 7a67 	vneg.f32	s15, s15
 80139de:	edc4 7a00 	vstr	s15, [r4]
 80139e2:	edd4 7a01 	vldr	s15, [r4, #4]
 80139e6:	eef1 7a67 	vneg.f32	s15, s15
 80139ea:	edc4 7a01 	vstr	s15, [r4, #4]
 80139ee:	e779      	b.n	80138e4 <__ieee754_rem_pio2f+0x130>
 80139f0:	2303      	movs	r3, #3
 80139f2:	e7e5      	b.n	80139c0 <__ieee754_rem_pio2f+0x20c>
 80139f4:	3f490fd8 	.word	0x3f490fd8
 80139f8:	4016cbe3 	.word	0x4016cbe3
 80139fc:	3fc90f80 	.word	0x3fc90f80
 8013a00:	3fc90fd0 	.word	0x3fc90fd0
 8013a04:	37354443 	.word	0x37354443
 8013a08:	37354400 	.word	0x37354400
 8013a0c:	2e85a308 	.word	0x2e85a308
 8013a10:	43490f80 	.word	0x43490f80
 8013a14:	3f22f984 	.word	0x3f22f984
 8013a18:	08014c54 	.word	0x08014c54
 8013a1c:	2e85a300 	.word	0x2e85a300
 8013a20:	248d3132 	.word	0x248d3132
 8013a24:	43800000 	.word	0x43800000
 8013a28:	08014cd4 	.word	0x08014cd4

08013a2c <__ieee754_sqrtf>:
 8013a2c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8013a30:	4770      	bx	lr
	...

08013a34 <__kernel_cosf>:
 8013a34:	ee10 3a10 	vmov	r3, s0
 8013a38:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013a3c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8013a40:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8013a44:	da05      	bge.n	8013a52 <__kernel_cosf+0x1e>
 8013a46:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8013a4a:	ee17 2a90 	vmov	r2, s15
 8013a4e:	2a00      	cmp	r2, #0
 8013a50:	d03d      	beq.n	8013ace <__kernel_cosf+0x9a>
 8013a52:	ee60 5a00 	vmul.f32	s11, s0, s0
 8013a56:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8013ad4 <__kernel_cosf+0xa0>
 8013a5a:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8013ad8 <__kernel_cosf+0xa4>
 8013a5e:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8013adc <__kernel_cosf+0xa8>
 8013a62:	4a1f      	ldr	r2, [pc, #124]	; (8013ae0 <__kernel_cosf+0xac>)
 8013a64:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8013a68:	4293      	cmp	r3, r2
 8013a6a:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8013ae4 <__kernel_cosf+0xb0>
 8013a6e:	eee7 7a25 	vfma.f32	s15, s14, s11
 8013a72:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8013ae8 <__kernel_cosf+0xb4>
 8013a76:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8013a7a:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8013aec <__kernel_cosf+0xb8>
 8013a7e:	eee7 7a25 	vfma.f32	s15, s14, s11
 8013a82:	eeb0 7a66 	vmov.f32	s14, s13
 8013a86:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8013a8a:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8013a8e:	ee65 7aa6 	vmul.f32	s15, s11, s13
 8013a92:	ee67 6a25 	vmul.f32	s13, s14, s11
 8013a96:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 8013a9a:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8013a9e:	dc04      	bgt.n	8013aaa <__kernel_cosf+0x76>
 8013aa0:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8013aa4:	ee36 0a47 	vsub.f32	s0, s12, s14
 8013aa8:	4770      	bx	lr
 8013aaa:	4a11      	ldr	r2, [pc, #68]	; (8013af0 <__kernel_cosf+0xbc>)
 8013aac:	4293      	cmp	r3, r2
 8013aae:	bfda      	itte	le
 8013ab0:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8013ab4:	ee06 3a90 	vmovle	s13, r3
 8013ab8:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 8013abc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8013ac0:	ee36 0a66 	vsub.f32	s0, s12, s13
 8013ac4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013ac8:	ee30 0a67 	vsub.f32	s0, s0, s15
 8013acc:	4770      	bx	lr
 8013ace:	eeb0 0a46 	vmov.f32	s0, s12
 8013ad2:	4770      	bx	lr
 8013ad4:	ad47d74e 	.word	0xad47d74e
 8013ad8:	310f74f6 	.word	0x310f74f6
 8013adc:	3d2aaaab 	.word	0x3d2aaaab
 8013ae0:	3e999999 	.word	0x3e999999
 8013ae4:	b493f27c 	.word	0xb493f27c
 8013ae8:	37d00d01 	.word	0x37d00d01
 8013aec:	bab60b61 	.word	0xbab60b61
 8013af0:	3f480000 	.word	0x3f480000

08013af4 <__kernel_rem_pio2f>:
 8013af4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013af8:	ed2d 8b04 	vpush	{d8-d9}
 8013afc:	b0d9      	sub	sp, #356	; 0x164
 8013afe:	4688      	mov	r8, r1
 8013b00:	9002      	str	r0, [sp, #8]
 8013b02:	49bb      	ldr	r1, [pc, #748]	; (8013df0 <__kernel_rem_pio2f+0x2fc>)
 8013b04:	9866      	ldr	r0, [sp, #408]	; 0x198
 8013b06:	9301      	str	r3, [sp, #4]
 8013b08:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 8013b0c:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 8013b10:	1e59      	subs	r1, r3, #1
 8013b12:	1d13      	adds	r3, r2, #4
 8013b14:	db27      	blt.n	8013b66 <__kernel_rem_pio2f+0x72>
 8013b16:	f1b2 0b03 	subs.w	fp, r2, #3
 8013b1a:	bf48      	it	mi
 8013b1c:	f102 0b04 	addmi.w	fp, r2, #4
 8013b20:	ea4f 00eb 	mov.w	r0, fp, asr #3
 8013b24:	1c45      	adds	r5, r0, #1
 8013b26:	00ec      	lsls	r4, r5, #3
 8013b28:	1a47      	subs	r7, r0, r1
 8013b2a:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 8013e00 <__kernel_rem_pio2f+0x30c>
 8013b2e:	9403      	str	r4, [sp, #12]
 8013b30:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 8013b34:	eb0a 0c01 	add.w	ip, sl, r1
 8013b38:	ae1c      	add	r6, sp, #112	; 0x70
 8013b3a:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 8013b3e:	2400      	movs	r4, #0
 8013b40:	4564      	cmp	r4, ip
 8013b42:	dd12      	ble.n	8013b6a <__kernel_rem_pio2f+0x76>
 8013b44:	9b01      	ldr	r3, [sp, #4]
 8013b46:	ac1c      	add	r4, sp, #112	; 0x70
 8013b48:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8013b4c:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 8013b50:	f04f 0c00 	mov.w	ip, #0
 8013b54:	45d4      	cmp	ip, sl
 8013b56:	dc27      	bgt.n	8013ba8 <__kernel_rem_pio2f+0xb4>
 8013b58:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8013b5c:	eddf 7aa8 	vldr	s15, [pc, #672]	; 8013e00 <__kernel_rem_pio2f+0x30c>
 8013b60:	4627      	mov	r7, r4
 8013b62:	2600      	movs	r6, #0
 8013b64:	e016      	b.n	8013b94 <__kernel_rem_pio2f+0xa0>
 8013b66:	2000      	movs	r0, #0
 8013b68:	e7dc      	b.n	8013b24 <__kernel_rem_pio2f+0x30>
 8013b6a:	42e7      	cmn	r7, r4
 8013b6c:	bf5d      	ittte	pl
 8013b6e:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 8013b72:	ee07 3a90 	vmovpl	s15, r3
 8013b76:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8013b7a:	eef0 7a47 	vmovmi.f32	s15, s14
 8013b7e:	ece6 7a01 	vstmia	r6!, {s15}
 8013b82:	3401      	adds	r4, #1
 8013b84:	e7dc      	b.n	8013b40 <__kernel_rem_pio2f+0x4c>
 8013b86:	ecf9 6a01 	vldmia	r9!, {s13}
 8013b8a:	ed97 7a00 	vldr	s14, [r7]
 8013b8e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8013b92:	3601      	adds	r6, #1
 8013b94:	428e      	cmp	r6, r1
 8013b96:	f1a7 0704 	sub.w	r7, r7, #4
 8013b9a:	ddf4      	ble.n	8013b86 <__kernel_rem_pio2f+0x92>
 8013b9c:	eceb 7a01 	vstmia	fp!, {s15}
 8013ba0:	f10c 0c01 	add.w	ip, ip, #1
 8013ba4:	3404      	adds	r4, #4
 8013ba6:	e7d5      	b.n	8013b54 <__kernel_rem_pio2f+0x60>
 8013ba8:	ab08      	add	r3, sp, #32
 8013baa:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8013bae:	eddf 8a93 	vldr	s17, [pc, #588]	; 8013dfc <__kernel_rem_pio2f+0x308>
 8013bb2:	ed9f 9a91 	vldr	s18, [pc, #580]	; 8013df8 <__kernel_rem_pio2f+0x304>
 8013bb6:	9304      	str	r3, [sp, #16]
 8013bb8:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 8013bbc:	4656      	mov	r6, sl
 8013bbe:	00b3      	lsls	r3, r6, #2
 8013bc0:	9305      	str	r3, [sp, #20]
 8013bc2:	ab58      	add	r3, sp, #352	; 0x160
 8013bc4:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8013bc8:	ac08      	add	r4, sp, #32
 8013bca:	ab44      	add	r3, sp, #272	; 0x110
 8013bcc:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 8013bd0:	46a4      	mov	ip, r4
 8013bd2:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8013bd6:	4637      	mov	r7, r6
 8013bd8:	2f00      	cmp	r7, #0
 8013bda:	f1a0 0004 	sub.w	r0, r0, #4
 8013bde:	dc4f      	bgt.n	8013c80 <__kernel_rem_pio2f+0x18c>
 8013be0:	4628      	mov	r0, r5
 8013be2:	e9cd 1206 	strd	r1, r2, [sp, #24]
 8013be6:	f000 fb95 	bl	8014314 <scalbnf>
 8013bea:	eeb0 8a40 	vmov.f32	s16, s0
 8013bee:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8013bf2:	ee28 0a00 	vmul.f32	s0, s16, s0
 8013bf6:	f000 fb45 	bl	8014284 <floorf>
 8013bfa:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8013bfe:	eea0 8a67 	vfms.f32	s16, s0, s15
 8013c02:	2d00      	cmp	r5, #0
 8013c04:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8013c08:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8013c0c:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8013c10:	ee17 9a90 	vmov	r9, s15
 8013c14:	ee38 8a40 	vsub.f32	s16, s16, s0
 8013c18:	dd44      	ble.n	8013ca4 <__kernel_rem_pio2f+0x1b0>
 8013c1a:	f106 3cff 	add.w	ip, r6, #4294967295
 8013c1e:	ab08      	add	r3, sp, #32
 8013c20:	f1c5 0e08 	rsb	lr, r5, #8
 8013c24:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 8013c28:	fa47 f00e 	asr.w	r0, r7, lr
 8013c2c:	4481      	add	r9, r0
 8013c2e:	fa00 f00e 	lsl.w	r0, r0, lr
 8013c32:	1a3f      	subs	r7, r7, r0
 8013c34:	f1c5 0007 	rsb	r0, r5, #7
 8013c38:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 8013c3c:	4107      	asrs	r7, r0
 8013c3e:	2f00      	cmp	r7, #0
 8013c40:	dd3f      	ble.n	8013cc2 <__kernel_rem_pio2f+0x1ce>
 8013c42:	f04f 0e00 	mov.w	lr, #0
 8013c46:	f109 0901 	add.w	r9, r9, #1
 8013c4a:	4673      	mov	r3, lr
 8013c4c:	4576      	cmp	r6, lr
 8013c4e:	dc6b      	bgt.n	8013d28 <__kernel_rem_pio2f+0x234>
 8013c50:	2d00      	cmp	r5, #0
 8013c52:	dd04      	ble.n	8013c5e <__kernel_rem_pio2f+0x16a>
 8013c54:	2d01      	cmp	r5, #1
 8013c56:	d078      	beq.n	8013d4a <__kernel_rem_pio2f+0x256>
 8013c58:	2d02      	cmp	r5, #2
 8013c5a:	f000 8081 	beq.w	8013d60 <__kernel_rem_pio2f+0x26c>
 8013c5e:	2f02      	cmp	r7, #2
 8013c60:	d12f      	bne.n	8013cc2 <__kernel_rem_pio2f+0x1ce>
 8013c62:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8013c66:	ee30 8a48 	vsub.f32	s16, s0, s16
 8013c6a:	b353      	cbz	r3, 8013cc2 <__kernel_rem_pio2f+0x1ce>
 8013c6c:	4628      	mov	r0, r5
 8013c6e:	e9cd 1206 	strd	r1, r2, [sp, #24]
 8013c72:	f000 fb4f 	bl	8014314 <scalbnf>
 8013c76:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8013c7a:	ee38 8a40 	vsub.f32	s16, s16, s0
 8013c7e:	e020      	b.n	8013cc2 <__kernel_rem_pio2f+0x1ce>
 8013c80:	ee60 7a28 	vmul.f32	s15, s0, s17
 8013c84:	3f01      	subs	r7, #1
 8013c86:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013c8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013c8e:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8013c92:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8013c96:	ecac 0a01 	vstmia	ip!, {s0}
 8013c9a:	ed90 0a00 	vldr	s0, [r0]
 8013c9e:	ee37 0a80 	vadd.f32	s0, s15, s0
 8013ca2:	e799      	b.n	8013bd8 <__kernel_rem_pio2f+0xe4>
 8013ca4:	d105      	bne.n	8013cb2 <__kernel_rem_pio2f+0x1be>
 8013ca6:	1e70      	subs	r0, r6, #1
 8013ca8:	ab08      	add	r3, sp, #32
 8013caa:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 8013cae:	11ff      	asrs	r7, r7, #7
 8013cb0:	e7c5      	b.n	8013c3e <__kernel_rem_pio2f+0x14a>
 8013cb2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8013cb6:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8013cba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013cbe:	da31      	bge.n	8013d24 <__kernel_rem_pio2f+0x230>
 8013cc0:	2700      	movs	r7, #0
 8013cc2:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8013cc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013cca:	f040 809b 	bne.w	8013e04 <__kernel_rem_pio2f+0x310>
 8013cce:	1e74      	subs	r4, r6, #1
 8013cd0:	46a4      	mov	ip, r4
 8013cd2:	2000      	movs	r0, #0
 8013cd4:	45d4      	cmp	ip, sl
 8013cd6:	da4a      	bge.n	8013d6e <__kernel_rem_pio2f+0x27a>
 8013cd8:	2800      	cmp	r0, #0
 8013cda:	d07a      	beq.n	8013dd2 <__kernel_rem_pio2f+0x2de>
 8013cdc:	ab08      	add	r3, sp, #32
 8013cde:	3d08      	subs	r5, #8
 8013ce0:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8013ce4:	2b00      	cmp	r3, #0
 8013ce6:	f000 8081 	beq.w	8013dec <__kernel_rem_pio2f+0x2f8>
 8013cea:	4628      	mov	r0, r5
 8013cec:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8013cf0:	00a5      	lsls	r5, r4, #2
 8013cf2:	f000 fb0f 	bl	8014314 <scalbnf>
 8013cf6:	aa44      	add	r2, sp, #272	; 0x110
 8013cf8:	1d2b      	adds	r3, r5, #4
 8013cfa:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8013dfc <__kernel_rem_pio2f+0x308>
 8013cfe:	18d1      	adds	r1, r2, r3
 8013d00:	4622      	mov	r2, r4
 8013d02:	2a00      	cmp	r2, #0
 8013d04:	f280 80ae 	bge.w	8013e64 <__kernel_rem_pio2f+0x370>
 8013d08:	4622      	mov	r2, r4
 8013d0a:	2a00      	cmp	r2, #0
 8013d0c:	f2c0 80cc 	blt.w	8013ea8 <__kernel_rem_pio2f+0x3b4>
 8013d10:	a944      	add	r1, sp, #272	; 0x110
 8013d12:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 8013d16:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 8013df4 <__kernel_rem_pio2f+0x300>
 8013d1a:	eddf 7a39 	vldr	s15, [pc, #228]	; 8013e00 <__kernel_rem_pio2f+0x30c>
 8013d1e:	2000      	movs	r0, #0
 8013d20:	1aa1      	subs	r1, r4, r2
 8013d22:	e0b6      	b.n	8013e92 <__kernel_rem_pio2f+0x39e>
 8013d24:	2702      	movs	r7, #2
 8013d26:	e78c      	b.n	8013c42 <__kernel_rem_pio2f+0x14e>
 8013d28:	6820      	ldr	r0, [r4, #0]
 8013d2a:	b94b      	cbnz	r3, 8013d40 <__kernel_rem_pio2f+0x24c>
 8013d2c:	b118      	cbz	r0, 8013d36 <__kernel_rem_pio2f+0x242>
 8013d2e:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8013d32:	6020      	str	r0, [r4, #0]
 8013d34:	2001      	movs	r0, #1
 8013d36:	f10e 0e01 	add.w	lr, lr, #1
 8013d3a:	3404      	adds	r4, #4
 8013d3c:	4603      	mov	r3, r0
 8013d3e:	e785      	b.n	8013c4c <__kernel_rem_pio2f+0x158>
 8013d40:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 8013d44:	6020      	str	r0, [r4, #0]
 8013d46:	4618      	mov	r0, r3
 8013d48:	e7f5      	b.n	8013d36 <__kernel_rem_pio2f+0x242>
 8013d4a:	1e74      	subs	r4, r6, #1
 8013d4c:	a808      	add	r0, sp, #32
 8013d4e:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8013d52:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8013d56:	f10d 0c20 	add.w	ip, sp, #32
 8013d5a:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 8013d5e:	e77e      	b.n	8013c5e <__kernel_rem_pio2f+0x16a>
 8013d60:	1e74      	subs	r4, r6, #1
 8013d62:	a808      	add	r0, sp, #32
 8013d64:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8013d68:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8013d6c:	e7f3      	b.n	8013d56 <__kernel_rem_pio2f+0x262>
 8013d6e:	ab08      	add	r3, sp, #32
 8013d70:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8013d74:	f10c 3cff 	add.w	ip, ip, #4294967295
 8013d78:	4318      	orrs	r0, r3
 8013d7a:	e7ab      	b.n	8013cd4 <__kernel_rem_pio2f+0x1e0>
 8013d7c:	f10c 0c01 	add.w	ip, ip, #1
 8013d80:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 8013d84:	2c00      	cmp	r4, #0
 8013d86:	d0f9      	beq.n	8013d7c <__kernel_rem_pio2f+0x288>
 8013d88:	9b05      	ldr	r3, [sp, #20]
 8013d8a:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8013d8e:	eb0d 0003 	add.w	r0, sp, r3
 8013d92:	9b01      	ldr	r3, [sp, #4]
 8013d94:	18f4      	adds	r4, r6, r3
 8013d96:	ab1c      	add	r3, sp, #112	; 0x70
 8013d98:	1c77      	adds	r7, r6, #1
 8013d9a:	384c      	subs	r0, #76	; 0x4c
 8013d9c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8013da0:	4466      	add	r6, ip
 8013da2:	42be      	cmp	r6, r7
 8013da4:	f6ff af0b 	blt.w	8013bbe <__kernel_rem_pio2f+0xca>
 8013da8:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 8013dac:	f8dd e008 	ldr.w	lr, [sp, #8]
 8013db0:	ee07 3a90 	vmov	s15, r3
 8013db4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013db8:	f04f 0c00 	mov.w	ip, #0
 8013dbc:	ece4 7a01 	vstmia	r4!, {s15}
 8013dc0:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8013e00 <__kernel_rem_pio2f+0x30c>
 8013dc4:	46a1      	mov	r9, r4
 8013dc6:	458c      	cmp	ip, r1
 8013dc8:	dd07      	ble.n	8013dda <__kernel_rem_pio2f+0x2e6>
 8013dca:	ece0 7a01 	vstmia	r0!, {s15}
 8013dce:	3701      	adds	r7, #1
 8013dd0:	e7e7      	b.n	8013da2 <__kernel_rem_pio2f+0x2ae>
 8013dd2:	9804      	ldr	r0, [sp, #16]
 8013dd4:	f04f 0c01 	mov.w	ip, #1
 8013dd8:	e7d2      	b.n	8013d80 <__kernel_rem_pio2f+0x28c>
 8013dda:	ecfe 6a01 	vldmia	lr!, {s13}
 8013dde:	ed39 7a01 	vldmdb	r9!, {s14}
 8013de2:	f10c 0c01 	add.w	ip, ip, #1
 8013de6:	eee6 7a87 	vfma.f32	s15, s13, s14
 8013dea:	e7ec      	b.n	8013dc6 <__kernel_rem_pio2f+0x2d2>
 8013dec:	3c01      	subs	r4, #1
 8013dee:	e775      	b.n	8013cdc <__kernel_rem_pio2f+0x1e8>
 8013df0:	08015018 	.word	0x08015018
 8013df4:	08014fec 	.word	0x08014fec
 8013df8:	43800000 	.word	0x43800000
 8013dfc:	3b800000 	.word	0x3b800000
 8013e00:	00000000 	.word	0x00000000
 8013e04:	9b03      	ldr	r3, [sp, #12]
 8013e06:	eeb0 0a48 	vmov.f32	s0, s16
 8013e0a:	1a98      	subs	r0, r3, r2
 8013e0c:	f000 fa82 	bl	8014314 <scalbnf>
 8013e10:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8013df8 <__kernel_rem_pio2f+0x304>
 8013e14:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8013e18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e1c:	db19      	blt.n	8013e52 <__kernel_rem_pio2f+0x35e>
 8013e1e:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8013dfc <__kernel_rem_pio2f+0x308>
 8013e22:	ee60 7a27 	vmul.f32	s15, s0, s15
 8013e26:	aa08      	add	r2, sp, #32
 8013e28:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013e2c:	1c74      	adds	r4, r6, #1
 8013e2e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013e32:	3508      	adds	r5, #8
 8013e34:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8013e38:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013e3c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8013e40:	ee10 3a10 	vmov	r3, s0
 8013e44:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8013e48:	ee17 3a90 	vmov	r3, s15
 8013e4c:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8013e50:	e74b      	b.n	8013cea <__kernel_rem_pio2f+0x1f6>
 8013e52:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8013e56:	aa08      	add	r2, sp, #32
 8013e58:	ee10 3a10 	vmov	r3, s0
 8013e5c:	4634      	mov	r4, r6
 8013e5e:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8013e62:	e742      	b.n	8013cea <__kernel_rem_pio2f+0x1f6>
 8013e64:	a808      	add	r0, sp, #32
 8013e66:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 8013e6a:	9001      	str	r0, [sp, #4]
 8013e6c:	ee07 0a90 	vmov	s15, r0
 8013e70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013e74:	3a01      	subs	r2, #1
 8013e76:	ee67 7a80 	vmul.f32	s15, s15, s0
 8013e7a:	ee20 0a07 	vmul.f32	s0, s0, s14
 8013e7e:	ed61 7a01 	vstmdb	r1!, {s15}
 8013e82:	e73e      	b.n	8013d02 <__kernel_rem_pio2f+0x20e>
 8013e84:	ecfc 6a01 	vldmia	ip!, {s13}
 8013e88:	ecb6 7a01 	vldmia	r6!, {s14}
 8013e8c:	eee6 7a87 	vfma.f32	s15, s13, s14
 8013e90:	3001      	adds	r0, #1
 8013e92:	4550      	cmp	r0, sl
 8013e94:	dc01      	bgt.n	8013e9a <__kernel_rem_pio2f+0x3a6>
 8013e96:	4288      	cmp	r0, r1
 8013e98:	ddf4      	ble.n	8013e84 <__kernel_rem_pio2f+0x390>
 8013e9a:	a858      	add	r0, sp, #352	; 0x160
 8013e9c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8013ea0:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 8013ea4:	3a01      	subs	r2, #1
 8013ea6:	e730      	b.n	8013d0a <__kernel_rem_pio2f+0x216>
 8013ea8:	9a66      	ldr	r2, [sp, #408]	; 0x198
 8013eaa:	2a02      	cmp	r2, #2
 8013eac:	dc09      	bgt.n	8013ec2 <__kernel_rem_pio2f+0x3ce>
 8013eae:	2a00      	cmp	r2, #0
 8013eb0:	dc2a      	bgt.n	8013f08 <__kernel_rem_pio2f+0x414>
 8013eb2:	d043      	beq.n	8013f3c <__kernel_rem_pio2f+0x448>
 8013eb4:	f009 0007 	and.w	r0, r9, #7
 8013eb8:	b059      	add	sp, #356	; 0x164
 8013eba:	ecbd 8b04 	vpop	{d8-d9}
 8013ebe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013ec2:	9b66      	ldr	r3, [sp, #408]	; 0x198
 8013ec4:	2b03      	cmp	r3, #3
 8013ec6:	d1f5      	bne.n	8013eb4 <__kernel_rem_pio2f+0x3c0>
 8013ec8:	ab30      	add	r3, sp, #192	; 0xc0
 8013eca:	442b      	add	r3, r5
 8013ecc:	461a      	mov	r2, r3
 8013ece:	4619      	mov	r1, r3
 8013ed0:	4620      	mov	r0, r4
 8013ed2:	2800      	cmp	r0, #0
 8013ed4:	f1a1 0104 	sub.w	r1, r1, #4
 8013ed8:	dc51      	bgt.n	8013f7e <__kernel_rem_pio2f+0x48a>
 8013eda:	4621      	mov	r1, r4
 8013edc:	2901      	cmp	r1, #1
 8013ede:	f1a2 0204 	sub.w	r2, r2, #4
 8013ee2:	dc5c      	bgt.n	8013f9e <__kernel_rem_pio2f+0x4aa>
 8013ee4:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 8013e00 <__kernel_rem_pio2f+0x30c>
 8013ee8:	3304      	adds	r3, #4
 8013eea:	2c01      	cmp	r4, #1
 8013eec:	dc67      	bgt.n	8013fbe <__kernel_rem_pio2f+0x4ca>
 8013eee:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8013ef2:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 8013ef6:	2f00      	cmp	r7, #0
 8013ef8:	d167      	bne.n	8013fca <__kernel_rem_pio2f+0x4d6>
 8013efa:	edc8 6a00 	vstr	s13, [r8]
 8013efe:	ed88 7a01 	vstr	s14, [r8, #4]
 8013f02:	edc8 7a02 	vstr	s15, [r8, #8]
 8013f06:	e7d5      	b.n	8013eb4 <__kernel_rem_pio2f+0x3c0>
 8013f08:	aa30      	add	r2, sp, #192	; 0xc0
 8013f0a:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 8013e00 <__kernel_rem_pio2f+0x30c>
 8013f0e:	4413      	add	r3, r2
 8013f10:	4622      	mov	r2, r4
 8013f12:	2a00      	cmp	r2, #0
 8013f14:	da24      	bge.n	8013f60 <__kernel_rem_pio2f+0x46c>
 8013f16:	b34f      	cbz	r7, 8013f6c <__kernel_rem_pio2f+0x478>
 8013f18:	eef1 7a47 	vneg.f32	s15, s14
 8013f1c:	edc8 7a00 	vstr	s15, [r8]
 8013f20:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 8013f24:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013f28:	aa31      	add	r2, sp, #196	; 0xc4
 8013f2a:	2301      	movs	r3, #1
 8013f2c:	429c      	cmp	r4, r3
 8013f2e:	da20      	bge.n	8013f72 <__kernel_rem_pio2f+0x47e>
 8013f30:	b10f      	cbz	r7, 8013f36 <__kernel_rem_pio2f+0x442>
 8013f32:	eef1 7a67 	vneg.f32	s15, s15
 8013f36:	edc8 7a01 	vstr	s15, [r8, #4]
 8013f3a:	e7bb      	b.n	8013eb4 <__kernel_rem_pio2f+0x3c0>
 8013f3c:	aa30      	add	r2, sp, #192	; 0xc0
 8013f3e:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 8013e00 <__kernel_rem_pio2f+0x30c>
 8013f42:	4413      	add	r3, r2
 8013f44:	2c00      	cmp	r4, #0
 8013f46:	da05      	bge.n	8013f54 <__kernel_rem_pio2f+0x460>
 8013f48:	b10f      	cbz	r7, 8013f4e <__kernel_rem_pio2f+0x45a>
 8013f4a:	eef1 7a67 	vneg.f32	s15, s15
 8013f4e:	edc8 7a00 	vstr	s15, [r8]
 8013f52:	e7af      	b.n	8013eb4 <__kernel_rem_pio2f+0x3c0>
 8013f54:	ed33 7a01 	vldmdb	r3!, {s14}
 8013f58:	3c01      	subs	r4, #1
 8013f5a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013f5e:	e7f1      	b.n	8013f44 <__kernel_rem_pio2f+0x450>
 8013f60:	ed73 7a01 	vldmdb	r3!, {s15}
 8013f64:	3a01      	subs	r2, #1
 8013f66:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013f6a:	e7d2      	b.n	8013f12 <__kernel_rem_pio2f+0x41e>
 8013f6c:	eef0 7a47 	vmov.f32	s15, s14
 8013f70:	e7d4      	b.n	8013f1c <__kernel_rem_pio2f+0x428>
 8013f72:	ecb2 7a01 	vldmia	r2!, {s14}
 8013f76:	3301      	adds	r3, #1
 8013f78:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013f7c:	e7d6      	b.n	8013f2c <__kernel_rem_pio2f+0x438>
 8013f7e:	edd1 7a00 	vldr	s15, [r1]
 8013f82:	edd1 6a01 	vldr	s13, [r1, #4]
 8013f86:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8013f8a:	3801      	subs	r0, #1
 8013f8c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013f90:	ed81 7a00 	vstr	s14, [r1]
 8013f94:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013f98:	edc1 7a01 	vstr	s15, [r1, #4]
 8013f9c:	e799      	b.n	8013ed2 <__kernel_rem_pio2f+0x3de>
 8013f9e:	edd2 7a00 	vldr	s15, [r2]
 8013fa2:	edd2 6a01 	vldr	s13, [r2, #4]
 8013fa6:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8013faa:	3901      	subs	r1, #1
 8013fac:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013fb0:	ed82 7a00 	vstr	s14, [r2]
 8013fb4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013fb8:	edc2 7a01 	vstr	s15, [r2, #4]
 8013fbc:	e78e      	b.n	8013edc <__kernel_rem_pio2f+0x3e8>
 8013fbe:	ed33 7a01 	vldmdb	r3!, {s14}
 8013fc2:	3c01      	subs	r4, #1
 8013fc4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013fc8:	e78f      	b.n	8013eea <__kernel_rem_pio2f+0x3f6>
 8013fca:	eef1 6a66 	vneg.f32	s13, s13
 8013fce:	eeb1 7a47 	vneg.f32	s14, s14
 8013fd2:	edc8 6a00 	vstr	s13, [r8]
 8013fd6:	ed88 7a01 	vstr	s14, [r8, #4]
 8013fda:	eef1 7a67 	vneg.f32	s15, s15
 8013fde:	e790      	b.n	8013f02 <__kernel_rem_pio2f+0x40e>

08013fe0 <__kernel_sinf>:
 8013fe0:	ee10 3a10 	vmov	r3, s0
 8013fe4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013fe8:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8013fec:	da04      	bge.n	8013ff8 <__kernel_sinf+0x18>
 8013fee:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8013ff2:	ee17 3a90 	vmov	r3, s15
 8013ff6:	b35b      	cbz	r3, 8014050 <__kernel_sinf+0x70>
 8013ff8:	ee20 7a00 	vmul.f32	s14, s0, s0
 8013ffc:	eddf 7a15 	vldr	s15, [pc, #84]	; 8014054 <__kernel_sinf+0x74>
 8014000:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8014058 <__kernel_sinf+0x78>
 8014004:	eea7 6a27 	vfma.f32	s12, s14, s15
 8014008:	eddf 7a14 	vldr	s15, [pc, #80]	; 801405c <__kernel_sinf+0x7c>
 801400c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8014010:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8014060 <__kernel_sinf+0x80>
 8014014:	eea7 6a87 	vfma.f32	s12, s15, s14
 8014018:	eddf 7a12 	vldr	s15, [pc, #72]	; 8014064 <__kernel_sinf+0x84>
 801401c:	ee60 6a07 	vmul.f32	s13, s0, s14
 8014020:	eee6 7a07 	vfma.f32	s15, s12, s14
 8014024:	b930      	cbnz	r0, 8014034 <__kernel_sinf+0x54>
 8014026:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8014068 <__kernel_sinf+0x88>
 801402a:	eea7 6a27 	vfma.f32	s12, s14, s15
 801402e:	eea6 0a26 	vfma.f32	s0, s12, s13
 8014032:	4770      	bx	lr
 8014034:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8014038:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 801403c:	eee0 7a86 	vfma.f32	s15, s1, s12
 8014040:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8014044:	eddf 7a09 	vldr	s15, [pc, #36]	; 801406c <__kernel_sinf+0x8c>
 8014048:	eee6 0aa7 	vfma.f32	s1, s13, s15
 801404c:	ee30 0a60 	vsub.f32	s0, s0, s1
 8014050:	4770      	bx	lr
 8014052:	bf00      	nop
 8014054:	2f2ec9d3 	.word	0x2f2ec9d3
 8014058:	b2d72f34 	.word	0xb2d72f34
 801405c:	3638ef1b 	.word	0x3638ef1b
 8014060:	b9500d01 	.word	0xb9500d01
 8014064:	3c088889 	.word	0x3c088889
 8014068:	be2aaaab 	.word	0xbe2aaaab
 801406c:	3e2aaaab 	.word	0x3e2aaaab

08014070 <with_errnof>:
 8014070:	b513      	push	{r0, r1, r4, lr}
 8014072:	4604      	mov	r4, r0
 8014074:	ed8d 0a01 	vstr	s0, [sp, #4]
 8014078:	f7fb ff00 	bl	800fe7c <__errno>
 801407c:	ed9d 0a01 	vldr	s0, [sp, #4]
 8014080:	6004      	str	r4, [r0, #0]
 8014082:	b002      	add	sp, #8
 8014084:	bd10      	pop	{r4, pc}

08014086 <xflowf>:
 8014086:	b130      	cbz	r0, 8014096 <xflowf+0x10>
 8014088:	eef1 7a40 	vneg.f32	s15, s0
 801408c:	ee27 0a80 	vmul.f32	s0, s15, s0
 8014090:	2022      	movs	r0, #34	; 0x22
 8014092:	f7ff bfed 	b.w	8014070 <with_errnof>
 8014096:	eef0 7a40 	vmov.f32	s15, s0
 801409a:	e7f7      	b.n	801408c <xflowf+0x6>

0801409c <__math_uflowf>:
 801409c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80140a4 <__math_uflowf+0x8>
 80140a0:	f7ff bff1 	b.w	8014086 <xflowf>
 80140a4:	10000000 	.word	0x10000000

080140a8 <__math_oflowf>:
 80140a8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80140b0 <__math_oflowf+0x8>
 80140ac:	f7ff bfeb 	b.w	8014086 <xflowf>
 80140b0:	70000000 	.word	0x70000000

080140b4 <atanf>:
 80140b4:	b538      	push	{r3, r4, r5, lr}
 80140b6:	ee10 5a10 	vmov	r5, s0
 80140ba:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 80140be:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 80140c2:	eef0 7a40 	vmov.f32	s15, s0
 80140c6:	db10      	blt.n	80140ea <atanf+0x36>
 80140c8:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 80140cc:	dd04      	ble.n	80140d8 <atanf+0x24>
 80140ce:	ee70 7a00 	vadd.f32	s15, s0, s0
 80140d2:	eeb0 0a67 	vmov.f32	s0, s15
 80140d6:	bd38      	pop	{r3, r4, r5, pc}
 80140d8:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8014210 <atanf+0x15c>
 80140dc:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 8014214 <atanf+0x160>
 80140e0:	2d00      	cmp	r5, #0
 80140e2:	bfd8      	it	le
 80140e4:	eef0 7a40 	vmovle.f32	s15, s0
 80140e8:	e7f3      	b.n	80140d2 <atanf+0x1e>
 80140ea:	4b4b      	ldr	r3, [pc, #300]	; (8014218 <atanf+0x164>)
 80140ec:	429c      	cmp	r4, r3
 80140ee:	dc10      	bgt.n	8014112 <atanf+0x5e>
 80140f0:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 80140f4:	da0a      	bge.n	801410c <atanf+0x58>
 80140f6:	ed9f 7a49 	vldr	s14, [pc, #292]	; 801421c <atanf+0x168>
 80140fa:	ee30 7a07 	vadd.f32	s14, s0, s14
 80140fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8014102:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8014106:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801410a:	dce2      	bgt.n	80140d2 <atanf+0x1e>
 801410c:	f04f 33ff 	mov.w	r3, #4294967295
 8014110:	e013      	b.n	801413a <atanf+0x86>
 8014112:	f000 f8a3 	bl	801425c <fabsf>
 8014116:	4b42      	ldr	r3, [pc, #264]	; (8014220 <atanf+0x16c>)
 8014118:	429c      	cmp	r4, r3
 801411a:	dc4f      	bgt.n	80141bc <atanf+0x108>
 801411c:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8014120:	429c      	cmp	r4, r3
 8014122:	dc41      	bgt.n	80141a8 <atanf+0xf4>
 8014124:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8014128:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801412c:	eea0 7a27 	vfma.f32	s14, s0, s15
 8014130:	2300      	movs	r3, #0
 8014132:	ee30 0a27 	vadd.f32	s0, s0, s15
 8014136:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801413a:	1c5a      	adds	r2, r3, #1
 801413c:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8014140:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8014224 <atanf+0x170>
 8014144:	eddf 5a38 	vldr	s11, [pc, #224]	; 8014228 <atanf+0x174>
 8014148:	ed9f 5a38 	vldr	s10, [pc, #224]	; 801422c <atanf+0x178>
 801414c:	ee66 6a06 	vmul.f32	s13, s12, s12
 8014150:	eee6 5a87 	vfma.f32	s11, s13, s14
 8014154:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8014230 <atanf+0x17c>
 8014158:	eea5 7aa6 	vfma.f32	s14, s11, s13
 801415c:	eddf 5a35 	vldr	s11, [pc, #212]	; 8014234 <atanf+0x180>
 8014160:	eee7 5a26 	vfma.f32	s11, s14, s13
 8014164:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8014238 <atanf+0x184>
 8014168:	eea5 7aa6 	vfma.f32	s14, s11, s13
 801416c:	eddf 5a33 	vldr	s11, [pc, #204]	; 801423c <atanf+0x188>
 8014170:	eee7 5a26 	vfma.f32	s11, s14, s13
 8014174:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8014240 <atanf+0x18c>
 8014178:	eea6 5a87 	vfma.f32	s10, s13, s14
 801417c:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8014244 <atanf+0x190>
 8014180:	eea5 7a26 	vfma.f32	s14, s10, s13
 8014184:	ed9f 5a30 	vldr	s10, [pc, #192]	; 8014248 <atanf+0x194>
 8014188:	eea7 5a26 	vfma.f32	s10, s14, s13
 801418c:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 801424c <atanf+0x198>
 8014190:	eea5 7a26 	vfma.f32	s14, s10, s13
 8014194:	ee27 7a26 	vmul.f32	s14, s14, s13
 8014198:	eea5 7a86 	vfma.f32	s14, s11, s12
 801419c:	ee27 7a87 	vmul.f32	s14, s15, s14
 80141a0:	d121      	bne.n	80141e6 <atanf+0x132>
 80141a2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80141a6:	e794      	b.n	80140d2 <atanf+0x1e>
 80141a8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80141ac:	ee30 7a67 	vsub.f32	s14, s0, s15
 80141b0:	ee30 0a27 	vadd.f32	s0, s0, s15
 80141b4:	2301      	movs	r3, #1
 80141b6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80141ba:	e7be      	b.n	801413a <atanf+0x86>
 80141bc:	4b24      	ldr	r3, [pc, #144]	; (8014250 <atanf+0x19c>)
 80141be:	429c      	cmp	r4, r3
 80141c0:	dc0b      	bgt.n	80141da <atanf+0x126>
 80141c2:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 80141c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80141ca:	eea0 7a27 	vfma.f32	s14, s0, s15
 80141ce:	2302      	movs	r3, #2
 80141d0:	ee70 6a67 	vsub.f32	s13, s0, s15
 80141d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80141d8:	e7af      	b.n	801413a <atanf+0x86>
 80141da:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80141de:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80141e2:	2303      	movs	r3, #3
 80141e4:	e7a9      	b.n	801413a <atanf+0x86>
 80141e6:	4a1b      	ldr	r2, [pc, #108]	; (8014254 <atanf+0x1a0>)
 80141e8:	491b      	ldr	r1, [pc, #108]	; (8014258 <atanf+0x1a4>)
 80141ea:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80141ee:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80141f2:	ed93 0a00 	vldr	s0, [r3]
 80141f6:	ee37 7a40 	vsub.f32	s14, s14, s0
 80141fa:	ed92 0a00 	vldr	s0, [r2]
 80141fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014202:	2d00      	cmp	r5, #0
 8014204:	ee70 7a67 	vsub.f32	s15, s0, s15
 8014208:	bfb8      	it	lt
 801420a:	eef1 7a67 	vneglt.f32	s15, s15
 801420e:	e760      	b.n	80140d2 <atanf+0x1e>
 8014210:	3fc90fdb 	.word	0x3fc90fdb
 8014214:	bfc90fdb 	.word	0xbfc90fdb
 8014218:	3edfffff 	.word	0x3edfffff
 801421c:	7149f2ca 	.word	0x7149f2ca
 8014220:	3f97ffff 	.word	0x3f97ffff
 8014224:	3c8569d7 	.word	0x3c8569d7
 8014228:	3d4bda59 	.word	0x3d4bda59
 801422c:	bd6ef16b 	.word	0xbd6ef16b
 8014230:	3d886b35 	.word	0x3d886b35
 8014234:	3dba2e6e 	.word	0x3dba2e6e
 8014238:	3e124925 	.word	0x3e124925
 801423c:	3eaaaaab 	.word	0x3eaaaaab
 8014240:	bd15a221 	.word	0xbd15a221
 8014244:	bd9d8795 	.word	0xbd9d8795
 8014248:	bde38e38 	.word	0xbde38e38
 801424c:	be4ccccd 	.word	0xbe4ccccd
 8014250:	401bffff 	.word	0x401bffff
 8014254:	08015024 	.word	0x08015024
 8014258:	08015034 	.word	0x08015034

0801425c <fabsf>:
 801425c:	ee10 3a10 	vmov	r3, s0
 8014260:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8014264:	ee00 3a10 	vmov	s0, r3
 8014268:	4770      	bx	lr

0801426a <finitef>:
 801426a:	b082      	sub	sp, #8
 801426c:	ed8d 0a01 	vstr	s0, [sp, #4]
 8014270:	9801      	ldr	r0, [sp, #4]
 8014272:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8014276:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 801427a:	bfac      	ite	ge
 801427c:	2000      	movge	r0, #0
 801427e:	2001      	movlt	r0, #1
 8014280:	b002      	add	sp, #8
 8014282:	4770      	bx	lr

08014284 <floorf>:
 8014284:	ee10 3a10 	vmov	r3, s0
 8014288:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801428c:	3a7f      	subs	r2, #127	; 0x7f
 801428e:	2a16      	cmp	r2, #22
 8014290:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8014294:	dc2a      	bgt.n	80142ec <floorf+0x68>
 8014296:	2a00      	cmp	r2, #0
 8014298:	da11      	bge.n	80142be <floorf+0x3a>
 801429a:	eddf 7a18 	vldr	s15, [pc, #96]	; 80142fc <floorf+0x78>
 801429e:	ee30 0a27 	vadd.f32	s0, s0, s15
 80142a2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80142a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80142aa:	dd05      	ble.n	80142b8 <floorf+0x34>
 80142ac:	2b00      	cmp	r3, #0
 80142ae:	da23      	bge.n	80142f8 <floorf+0x74>
 80142b0:	4a13      	ldr	r2, [pc, #76]	; (8014300 <floorf+0x7c>)
 80142b2:	2900      	cmp	r1, #0
 80142b4:	bf18      	it	ne
 80142b6:	4613      	movne	r3, r2
 80142b8:	ee00 3a10 	vmov	s0, r3
 80142bc:	4770      	bx	lr
 80142be:	4911      	ldr	r1, [pc, #68]	; (8014304 <floorf+0x80>)
 80142c0:	4111      	asrs	r1, r2
 80142c2:	420b      	tst	r3, r1
 80142c4:	d0fa      	beq.n	80142bc <floorf+0x38>
 80142c6:	eddf 7a0d 	vldr	s15, [pc, #52]	; 80142fc <floorf+0x78>
 80142ca:	ee30 0a27 	vadd.f32	s0, s0, s15
 80142ce:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80142d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80142d6:	ddef      	ble.n	80142b8 <floorf+0x34>
 80142d8:	2b00      	cmp	r3, #0
 80142da:	bfbe      	ittt	lt
 80142dc:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 80142e0:	fa40 f202 	asrlt.w	r2, r0, r2
 80142e4:	189b      	addlt	r3, r3, r2
 80142e6:	ea23 0301 	bic.w	r3, r3, r1
 80142ea:	e7e5      	b.n	80142b8 <floorf+0x34>
 80142ec:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80142f0:	d3e4      	bcc.n	80142bc <floorf+0x38>
 80142f2:	ee30 0a00 	vadd.f32	s0, s0, s0
 80142f6:	4770      	bx	lr
 80142f8:	2300      	movs	r3, #0
 80142fa:	e7dd      	b.n	80142b8 <floorf+0x34>
 80142fc:	7149f2ca 	.word	0x7149f2ca
 8014300:	bf800000 	.word	0xbf800000
 8014304:	007fffff 	.word	0x007fffff

08014308 <nanf>:
 8014308:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8014310 <nanf+0x8>
 801430c:	4770      	bx	lr
 801430e:	bf00      	nop
 8014310:	7fc00000 	.word	0x7fc00000

08014314 <scalbnf>:
 8014314:	ee10 3a10 	vmov	r3, s0
 8014318:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 801431c:	d025      	beq.n	801436a <scalbnf+0x56>
 801431e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8014322:	d302      	bcc.n	801432a <scalbnf+0x16>
 8014324:	ee30 0a00 	vadd.f32	s0, s0, s0
 8014328:	4770      	bx	lr
 801432a:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 801432e:	d122      	bne.n	8014376 <scalbnf+0x62>
 8014330:	4b2a      	ldr	r3, [pc, #168]	; (80143dc <scalbnf+0xc8>)
 8014332:	eddf 7a2b 	vldr	s15, [pc, #172]	; 80143e0 <scalbnf+0xcc>
 8014336:	4298      	cmp	r0, r3
 8014338:	ee20 0a27 	vmul.f32	s0, s0, s15
 801433c:	db16      	blt.n	801436c <scalbnf+0x58>
 801433e:	ee10 3a10 	vmov	r3, s0
 8014342:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8014346:	3a19      	subs	r2, #25
 8014348:	4402      	add	r2, r0
 801434a:	2afe      	cmp	r2, #254	; 0xfe
 801434c:	dd15      	ble.n	801437a <scalbnf+0x66>
 801434e:	ee10 3a10 	vmov	r3, s0
 8014352:	eddf 7a24 	vldr	s15, [pc, #144]	; 80143e4 <scalbnf+0xd0>
 8014356:	eddf 6a24 	vldr	s13, [pc, #144]	; 80143e8 <scalbnf+0xd4>
 801435a:	2b00      	cmp	r3, #0
 801435c:	eeb0 7a67 	vmov.f32	s14, s15
 8014360:	bfb8      	it	lt
 8014362:	eef0 7a66 	vmovlt.f32	s15, s13
 8014366:	ee27 0a27 	vmul.f32	s0, s14, s15
 801436a:	4770      	bx	lr
 801436c:	eddf 7a1f 	vldr	s15, [pc, #124]	; 80143ec <scalbnf+0xd8>
 8014370:	ee20 0a27 	vmul.f32	s0, s0, s15
 8014374:	4770      	bx	lr
 8014376:	0dd2      	lsrs	r2, r2, #23
 8014378:	e7e6      	b.n	8014348 <scalbnf+0x34>
 801437a:	2a00      	cmp	r2, #0
 801437c:	dd06      	ble.n	801438c <scalbnf+0x78>
 801437e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8014382:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8014386:	ee00 3a10 	vmov	s0, r3
 801438a:	4770      	bx	lr
 801438c:	f112 0f16 	cmn.w	r2, #22
 8014390:	da1a      	bge.n	80143c8 <scalbnf+0xb4>
 8014392:	f24c 3350 	movw	r3, #50000	; 0xc350
 8014396:	4298      	cmp	r0, r3
 8014398:	ee10 3a10 	vmov	r3, s0
 801439c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80143a0:	dd0a      	ble.n	80143b8 <scalbnf+0xa4>
 80143a2:	ed9f 0a10 	vldr	s0, [pc, #64]	; 80143e4 <scalbnf+0xd0>
 80143a6:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80143e8 <scalbnf+0xd4>
 80143aa:	eef0 7a40 	vmov.f32	s15, s0
 80143ae:	2b00      	cmp	r3, #0
 80143b0:	bf18      	it	ne
 80143b2:	eeb0 0a47 	vmovne.f32	s0, s14
 80143b6:	e7db      	b.n	8014370 <scalbnf+0x5c>
 80143b8:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 80143ec <scalbnf+0xd8>
 80143bc:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80143f0 <scalbnf+0xdc>
 80143c0:	eef0 7a40 	vmov.f32	s15, s0
 80143c4:	2b00      	cmp	r3, #0
 80143c6:	e7f3      	b.n	80143b0 <scalbnf+0x9c>
 80143c8:	3219      	adds	r2, #25
 80143ca:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80143ce:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 80143d2:	eddf 7a08 	vldr	s15, [pc, #32]	; 80143f4 <scalbnf+0xe0>
 80143d6:	ee07 3a10 	vmov	s14, r3
 80143da:	e7c4      	b.n	8014366 <scalbnf+0x52>
 80143dc:	ffff3cb0 	.word	0xffff3cb0
 80143e0:	4c000000 	.word	0x4c000000
 80143e4:	7149f2ca 	.word	0x7149f2ca
 80143e8:	f149f2ca 	.word	0xf149f2ca
 80143ec:	0da24260 	.word	0x0da24260
 80143f0:	8da24260 	.word	0x8da24260
 80143f4:	33000000 	.word	0x33000000

080143f8 <_init>:
 80143f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80143fa:	bf00      	nop
 80143fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80143fe:	bc08      	pop	{r3}
 8014400:	469e      	mov	lr, r3
 8014402:	4770      	bx	lr

08014404 <_fini>:
 8014404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014406:	bf00      	nop
 8014408:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801440a:	bc08      	pop	{r3}
 801440c:	469e      	mov	lr, r3
 801440e:	4770      	bx	lr
