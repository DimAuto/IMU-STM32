
stm32_devboard_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013eb8  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000bfc  08014078  08014078  00024078  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014c74  08014c74  000301f0  2**0
                  CONTENTS
  4 .ARM          00000008  08014c74  08014c74  00024c74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014c7c  08014c7c  000301f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014c7c  08014c7c  00024c7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014c80  08014c80  00024c80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  08014c84  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006174  200001f0  08014e74  000301f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20006364  08014e74  00036364  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00028a9c  00000000  00000000  00030220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005654  00000000  00000000  00058cbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002170  00000000  00000000  0005e310  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001f48  00000000  00000000  00060480  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000304e6  00000000  00000000  000623c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000281c2  00000000  00000000  000928ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011d7a4  00000000  00000000  000baa70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001d8214  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a2fc  00000000  00000000  001d8264  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001f0 	.word	0x200001f0
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08014060 	.word	0x08014060

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001f4 	.word	0x200001f4
 80001fc:	08014060 	.word	0x08014060

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_uldivmod>:
 8000bd8:	b953      	cbnz	r3, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bda:	b94a      	cbnz	r2, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	bf08      	it	eq
 8000be0:	2800      	cmpeq	r0, #0
 8000be2:	bf1c      	itt	ne
 8000be4:	f04f 31ff 	movne.w	r1, #4294967295
 8000be8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bec:	f000 b974 	b.w	8000ed8 <__aeabi_idiv0>
 8000bf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf8:	f000 f806 	bl	8000c08 <__udivmoddi4>
 8000bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c04:	b004      	add	sp, #16
 8000c06:	4770      	bx	lr

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9d08      	ldr	r5, [sp, #32]
 8000c0e:	4604      	mov	r4, r0
 8000c10:	468e      	mov	lr, r1
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d14d      	bne.n	8000cb2 <__udivmoddi4+0xaa>
 8000c16:	428a      	cmp	r2, r1
 8000c18:	4694      	mov	ip, r2
 8000c1a:	d969      	bls.n	8000cf0 <__udivmoddi4+0xe8>
 8000c1c:	fab2 f282 	clz	r2, r2
 8000c20:	b152      	cbz	r2, 8000c38 <__udivmoddi4+0x30>
 8000c22:	fa01 f302 	lsl.w	r3, r1, r2
 8000c26:	f1c2 0120 	rsb	r1, r2, #32
 8000c2a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c2e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c32:	ea41 0e03 	orr.w	lr, r1, r3
 8000c36:	4094      	lsls	r4, r2
 8000c38:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c3c:	0c21      	lsrs	r1, r4, #16
 8000c3e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c42:	fa1f f78c 	uxth.w	r7, ip
 8000c46:	fb08 e316 	mls	r3, r8, r6, lr
 8000c4a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c4e:	fb06 f107 	mul.w	r1, r6, r7
 8000c52:	4299      	cmp	r1, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x64>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c5e:	f080 811f 	bcs.w	8000ea0 <__udivmoddi4+0x298>
 8000c62:	4299      	cmp	r1, r3
 8000c64:	f240 811c 	bls.w	8000ea0 <__udivmoddi4+0x298>
 8000c68:	3e02      	subs	r6, #2
 8000c6a:	4463      	add	r3, ip
 8000c6c:	1a5b      	subs	r3, r3, r1
 8000c6e:	b2a4      	uxth	r4, r4
 8000c70:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c74:	fb08 3310 	mls	r3, r8, r0, r3
 8000c78:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c7c:	fb00 f707 	mul.w	r7, r0, r7
 8000c80:	42a7      	cmp	r7, r4
 8000c82:	d90a      	bls.n	8000c9a <__udivmoddi4+0x92>
 8000c84:	eb1c 0404 	adds.w	r4, ip, r4
 8000c88:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c8c:	f080 810a 	bcs.w	8000ea4 <__udivmoddi4+0x29c>
 8000c90:	42a7      	cmp	r7, r4
 8000c92:	f240 8107 	bls.w	8000ea4 <__udivmoddi4+0x29c>
 8000c96:	4464      	add	r4, ip
 8000c98:	3802      	subs	r0, #2
 8000c9a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c9e:	1be4      	subs	r4, r4, r7
 8000ca0:	2600      	movs	r6, #0
 8000ca2:	b11d      	cbz	r5, 8000cac <__udivmoddi4+0xa4>
 8000ca4:	40d4      	lsrs	r4, r2
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cac:	4631      	mov	r1, r6
 8000cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d909      	bls.n	8000cca <__udivmoddi4+0xc2>
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	f000 80ef 	beq.w	8000e9a <__udivmoddi4+0x292>
 8000cbc:	2600      	movs	r6, #0
 8000cbe:	e9c5 0100 	strd	r0, r1, [r5]
 8000cc2:	4630      	mov	r0, r6
 8000cc4:	4631      	mov	r1, r6
 8000cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cca:	fab3 f683 	clz	r6, r3
 8000cce:	2e00      	cmp	r6, #0
 8000cd0:	d14a      	bne.n	8000d68 <__udivmoddi4+0x160>
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d302      	bcc.n	8000cdc <__udivmoddi4+0xd4>
 8000cd6:	4282      	cmp	r2, r0
 8000cd8:	f200 80f9 	bhi.w	8000ece <__udivmoddi4+0x2c6>
 8000cdc:	1a84      	subs	r4, r0, r2
 8000cde:	eb61 0303 	sbc.w	r3, r1, r3
 8000ce2:	2001      	movs	r0, #1
 8000ce4:	469e      	mov	lr, r3
 8000ce6:	2d00      	cmp	r5, #0
 8000ce8:	d0e0      	beq.n	8000cac <__udivmoddi4+0xa4>
 8000cea:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cee:	e7dd      	b.n	8000cac <__udivmoddi4+0xa4>
 8000cf0:	b902      	cbnz	r2, 8000cf4 <__udivmoddi4+0xec>
 8000cf2:	deff      	udf	#255	; 0xff
 8000cf4:	fab2 f282 	clz	r2, r2
 8000cf8:	2a00      	cmp	r2, #0
 8000cfa:	f040 8092 	bne.w	8000e22 <__udivmoddi4+0x21a>
 8000cfe:	eba1 010c 	sub.w	r1, r1, ip
 8000d02:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d06:	fa1f fe8c 	uxth.w	lr, ip
 8000d0a:	2601      	movs	r6, #1
 8000d0c:	0c20      	lsrs	r0, r4, #16
 8000d0e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d12:	fb07 1113 	mls	r1, r7, r3, r1
 8000d16:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d1a:	fb0e f003 	mul.w	r0, lr, r3
 8000d1e:	4288      	cmp	r0, r1
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x12c>
 8000d22:	eb1c 0101 	adds.w	r1, ip, r1
 8000d26:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x12a>
 8000d2c:	4288      	cmp	r0, r1
 8000d2e:	f200 80cb 	bhi.w	8000ec8 <__udivmoddi4+0x2c0>
 8000d32:	4643      	mov	r3, r8
 8000d34:	1a09      	subs	r1, r1, r0
 8000d36:	b2a4      	uxth	r4, r4
 8000d38:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d3c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d40:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d44:	fb0e fe00 	mul.w	lr, lr, r0
 8000d48:	45a6      	cmp	lr, r4
 8000d4a:	d908      	bls.n	8000d5e <__udivmoddi4+0x156>
 8000d4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d50:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d54:	d202      	bcs.n	8000d5c <__udivmoddi4+0x154>
 8000d56:	45a6      	cmp	lr, r4
 8000d58:	f200 80bb 	bhi.w	8000ed2 <__udivmoddi4+0x2ca>
 8000d5c:	4608      	mov	r0, r1
 8000d5e:	eba4 040e 	sub.w	r4, r4, lr
 8000d62:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d66:	e79c      	b.n	8000ca2 <__udivmoddi4+0x9a>
 8000d68:	f1c6 0720 	rsb	r7, r6, #32
 8000d6c:	40b3      	lsls	r3, r6
 8000d6e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d72:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d76:	fa20 f407 	lsr.w	r4, r0, r7
 8000d7a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d7e:	431c      	orrs	r4, r3
 8000d80:	40f9      	lsrs	r1, r7
 8000d82:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d86:	fa00 f306 	lsl.w	r3, r0, r6
 8000d8a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d8e:	0c20      	lsrs	r0, r4, #16
 8000d90:	fa1f fe8c 	uxth.w	lr, ip
 8000d94:	fb09 1118 	mls	r1, r9, r8, r1
 8000d98:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9c:	fb08 f00e 	mul.w	r0, r8, lr
 8000da0:	4288      	cmp	r0, r1
 8000da2:	fa02 f206 	lsl.w	r2, r2, r6
 8000da6:	d90b      	bls.n	8000dc0 <__udivmoddi4+0x1b8>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f108 3aff 	add.w	sl, r8, #4294967295
 8000db0:	f080 8088 	bcs.w	8000ec4 <__udivmoddi4+0x2bc>
 8000db4:	4288      	cmp	r0, r1
 8000db6:	f240 8085 	bls.w	8000ec4 <__udivmoddi4+0x2bc>
 8000dba:	f1a8 0802 	sub.w	r8, r8, #2
 8000dbe:	4461      	add	r1, ip
 8000dc0:	1a09      	subs	r1, r1, r0
 8000dc2:	b2a4      	uxth	r4, r4
 8000dc4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dc8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dcc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dd0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dd4:	458e      	cmp	lr, r1
 8000dd6:	d908      	bls.n	8000dea <__udivmoddi4+0x1e2>
 8000dd8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ddc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000de0:	d26c      	bcs.n	8000ebc <__udivmoddi4+0x2b4>
 8000de2:	458e      	cmp	lr, r1
 8000de4:	d96a      	bls.n	8000ebc <__udivmoddi4+0x2b4>
 8000de6:	3802      	subs	r0, #2
 8000de8:	4461      	add	r1, ip
 8000dea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dee:	fba0 9402 	umull	r9, r4, r0, r2
 8000df2:	eba1 010e 	sub.w	r1, r1, lr
 8000df6:	42a1      	cmp	r1, r4
 8000df8:	46c8      	mov	r8, r9
 8000dfa:	46a6      	mov	lr, r4
 8000dfc:	d356      	bcc.n	8000eac <__udivmoddi4+0x2a4>
 8000dfe:	d053      	beq.n	8000ea8 <__udivmoddi4+0x2a0>
 8000e00:	b15d      	cbz	r5, 8000e1a <__udivmoddi4+0x212>
 8000e02:	ebb3 0208 	subs.w	r2, r3, r8
 8000e06:	eb61 010e 	sbc.w	r1, r1, lr
 8000e0a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e0e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e12:	40f1      	lsrs	r1, r6
 8000e14:	431f      	orrs	r7, r3
 8000e16:	e9c5 7100 	strd	r7, r1, [r5]
 8000e1a:	2600      	movs	r6, #0
 8000e1c:	4631      	mov	r1, r6
 8000e1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e22:	f1c2 0320 	rsb	r3, r2, #32
 8000e26:	40d8      	lsrs	r0, r3
 8000e28:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e2c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e30:	4091      	lsls	r1, r2
 8000e32:	4301      	orrs	r1, r0
 8000e34:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e38:	fa1f fe8c 	uxth.w	lr, ip
 8000e3c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e40:	fb07 3610 	mls	r6, r7, r0, r3
 8000e44:	0c0b      	lsrs	r3, r1, #16
 8000e46:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e4a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e4e:	429e      	cmp	r6, r3
 8000e50:	fa04 f402 	lsl.w	r4, r4, r2
 8000e54:	d908      	bls.n	8000e68 <__udivmoddi4+0x260>
 8000e56:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e5e:	d22f      	bcs.n	8000ec0 <__udivmoddi4+0x2b8>
 8000e60:	429e      	cmp	r6, r3
 8000e62:	d92d      	bls.n	8000ec0 <__udivmoddi4+0x2b8>
 8000e64:	3802      	subs	r0, #2
 8000e66:	4463      	add	r3, ip
 8000e68:	1b9b      	subs	r3, r3, r6
 8000e6a:	b289      	uxth	r1, r1
 8000e6c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e70:	fb07 3316 	mls	r3, r7, r6, r3
 8000e74:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e78:	fb06 f30e 	mul.w	r3, r6, lr
 8000e7c:	428b      	cmp	r3, r1
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x28a>
 8000e80:	eb1c 0101 	adds.w	r1, ip, r1
 8000e84:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e88:	d216      	bcs.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e8a:	428b      	cmp	r3, r1
 8000e8c:	d914      	bls.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e8e:	3e02      	subs	r6, #2
 8000e90:	4461      	add	r1, ip
 8000e92:	1ac9      	subs	r1, r1, r3
 8000e94:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e98:	e738      	b.n	8000d0c <__udivmoddi4+0x104>
 8000e9a:	462e      	mov	r6, r5
 8000e9c:	4628      	mov	r0, r5
 8000e9e:	e705      	b.n	8000cac <__udivmoddi4+0xa4>
 8000ea0:	4606      	mov	r6, r0
 8000ea2:	e6e3      	b.n	8000c6c <__udivmoddi4+0x64>
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	e6f8      	b.n	8000c9a <__udivmoddi4+0x92>
 8000ea8:	454b      	cmp	r3, r9
 8000eaa:	d2a9      	bcs.n	8000e00 <__udivmoddi4+0x1f8>
 8000eac:	ebb9 0802 	subs.w	r8, r9, r2
 8000eb0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000eb4:	3801      	subs	r0, #1
 8000eb6:	e7a3      	b.n	8000e00 <__udivmoddi4+0x1f8>
 8000eb8:	4646      	mov	r6, r8
 8000eba:	e7ea      	b.n	8000e92 <__udivmoddi4+0x28a>
 8000ebc:	4620      	mov	r0, r4
 8000ebe:	e794      	b.n	8000dea <__udivmoddi4+0x1e2>
 8000ec0:	4640      	mov	r0, r8
 8000ec2:	e7d1      	b.n	8000e68 <__udivmoddi4+0x260>
 8000ec4:	46d0      	mov	r8, sl
 8000ec6:	e77b      	b.n	8000dc0 <__udivmoddi4+0x1b8>
 8000ec8:	3b02      	subs	r3, #2
 8000eca:	4461      	add	r1, ip
 8000ecc:	e732      	b.n	8000d34 <__udivmoddi4+0x12c>
 8000ece:	4630      	mov	r0, r6
 8000ed0:	e709      	b.n	8000ce6 <__udivmoddi4+0xde>
 8000ed2:	4464      	add	r4, ip
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	e742      	b.n	8000d5e <__udivmoddi4+0x156>

08000ed8 <__aeabi_idiv0>:
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop

08000edc <FusionRadiansToDegrees>:
/**
 * @brief Converts radians to degrees.
 * @param radians Radians.
 * @return Degrees.
 */
static inline float FusionRadiansToDegrees(const float radians) {
 8000edc:	b480      	push	{r7}
 8000ede:	b083      	sub	sp, #12
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	ed87 0a01 	vstr	s0, [r7, #4]
    return radians * (180.0f / (float) M_PI);
 8000ee6:	edd7 7a01 	vldr	s15, [r7, #4]
 8000eea:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8000f00 <FusionRadiansToDegrees+0x24>
 8000eee:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8000ef2:	eeb0 0a67 	vmov.f32	s0, s15
 8000ef6:	370c      	adds	r7, #12
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr
 8000f00:	42652ee0 	.word	0x42652ee0

08000f04 <FusionAsin>:
/**
 * @brief Returns the arc sine of the value.
 * @param value Value.
 * @return Arc sine of the value.
 */
static inline float FusionAsin(const float value) {
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	ed87 0a01 	vstr	s0, [r7, #4]
    if (value <= -1.0f) {
 8000f0e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f12:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8000f16:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f1e:	d802      	bhi.n	8000f26 <FusionAsin+0x22>
        return (float) M_PI / -2.0f;
 8000f20:	eddf 7a0c 	vldr	s15, [pc, #48]	; 8000f54 <FusionAsin+0x50>
 8000f24:	e011      	b.n	8000f4a <FusionAsin+0x46>
    }
    if (value >= 1.0f) {
 8000f26:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f2a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000f2e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f36:	db02      	blt.n	8000f3e <FusionAsin+0x3a>
        return (float) M_PI / 2.0f;
 8000f38:	eddf 7a07 	vldr	s15, [pc, #28]	; 8000f58 <FusionAsin+0x54>
 8000f3c:	e005      	b.n	8000f4a <FusionAsin+0x46>
    }
    return asinf(value);
 8000f3e:	ed97 0a01 	vldr	s0, [r7, #4]
 8000f42:	f011 fd91 	bl	8012a68 <asinf>
 8000f46:	eef0 7a40 	vmov.f32	s15, s0
}
 8000f4a:	eeb0 0a67 	vmov.f32	s0, s15
 8000f4e:	3708      	adds	r7, #8
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	bfc90fdb 	.word	0xbfc90fdb
 8000f58:	3fc90fdb 	.word	0x3fc90fdb

08000f5c <FusionVectorSubtract>:
 * @brief Returns vector B subtracted from vector A.
 * @param vectorA Vector A.
 * @param vectorB Vector B.
 * @return Vector B subtracted from vector A.
 */
static inline FusionVector FusionVectorSubtract(const FusionVector vectorA, const FusionVector vectorB) {
 8000f5c:	b480      	push	{r7}
 8000f5e:	b091      	sub	sp, #68	; 0x44
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	eeb0 5a40 	vmov.f32	s10, s0
 8000f66:	eef0 5a60 	vmov.f32	s11, s1
 8000f6a:	eeb0 6a41 	vmov.f32	s12, s2
 8000f6e:	eef0 6a61 	vmov.f32	s13, s3
 8000f72:	eeb0 7a42 	vmov.f32	s14, s4
 8000f76:	eef0 7a62 	vmov.f32	s15, s5
 8000f7a:	ed87 5a07 	vstr	s10, [r7, #28]
 8000f7e:	edc7 5a08 	vstr	s11, [r7, #32]
 8000f82:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 8000f86:	edc7 6a04 	vstr	s13, [r7, #16]
 8000f8a:	ed87 7a05 	vstr	s14, [r7, #20]
 8000f8e:	edc7 7a06 	vstr	s15, [r7, #24]
    const FusionVector result = {.axis = {
            .x = vectorA.axis.x - vectorB.axis.x,
 8000f92:	ed97 7a07 	vldr	s14, [r7, #28]
 8000f96:	edd7 7a04 	vldr	s15, [r7, #16]
 8000f9a:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8000f9e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = vectorA.axis.y - vectorB.axis.y,
 8000fa2:	ed97 7a08 	vldr	s14, [r7, #32]
 8000fa6:	edd7 7a05 	vldr	s15, [r7, #20]
 8000faa:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8000fae:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = vectorA.axis.z - vectorB.axis.z,
 8000fb2:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8000fb6:	edd7 7a06 	vldr	s15, [r7, #24]
 8000fba:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8000fbe:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    }};
    return result;
 8000fc2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000fc6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000fca:	ca07      	ldmia	r2, {r0, r1, r2}
 8000fcc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8000fd0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000fd2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000fd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000fd6:	ee06 1a90 	vmov	s13, r1
 8000fda:	ee07 2a10 	vmov	s14, r2
 8000fde:	ee07 3a90 	vmov	s15, r3
}
 8000fe2:	eeb0 0a66 	vmov.f32	s0, s13
 8000fe6:	eef0 0a47 	vmov.f32	s1, s14
 8000fea:	eeb0 1a67 	vmov.f32	s2, s15
 8000fee:	3744      	adds	r7, #68	; 0x44
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr

08000ff8 <FusionVectorHadamardProduct>:
 * @brief Calculates the Hadamard product (element-wise multiplication).
 * @param vectorA Vector A.
 * @param vectorB Vector B.
 * @return Hadamard product.
 */
static inline FusionVector FusionVectorHadamardProduct(const FusionVector vectorA, const FusionVector vectorB) {
 8000ff8:	b480      	push	{r7}
 8000ffa:	b091      	sub	sp, #68	; 0x44
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	eeb0 5a40 	vmov.f32	s10, s0
 8001002:	eef0 5a60 	vmov.f32	s11, s1
 8001006:	eeb0 6a41 	vmov.f32	s12, s2
 800100a:	eef0 6a61 	vmov.f32	s13, s3
 800100e:	eeb0 7a42 	vmov.f32	s14, s4
 8001012:	eef0 7a62 	vmov.f32	s15, s5
 8001016:	ed87 5a07 	vstr	s10, [r7, #28]
 800101a:	edc7 5a08 	vstr	s11, [r7, #32]
 800101e:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 8001022:	edc7 6a04 	vstr	s13, [r7, #16]
 8001026:	ed87 7a05 	vstr	s14, [r7, #20]
 800102a:	edc7 7a06 	vstr	s15, [r7, #24]
    const FusionVector result = {.axis = {
            .x = vectorA.axis.x * vectorB.axis.x,
 800102e:	ed97 7a07 	vldr	s14, [r7, #28]
 8001032:	edd7 7a04 	vldr	s15, [r7, #16]
 8001036:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800103a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = vectorA.axis.y * vectorB.axis.y,
 800103e:	ed97 7a08 	vldr	s14, [r7, #32]
 8001042:	edd7 7a05 	vldr	s15, [r7, #20]
 8001046:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800104a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = vectorA.axis.z * vectorB.axis.z,
 800104e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001052:	edd7 7a06 	vldr	s15, [r7, #24]
 8001056:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800105a:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    }};
    return result;
 800105e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001062:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001066:	ca07      	ldmia	r2, {r0, r1, r2}
 8001068:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800106c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800106e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001070:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001072:	ee06 1a90 	vmov	s13, r1
 8001076:	ee07 2a10 	vmov	s14, r2
 800107a:	ee07 3a90 	vmov	s15, r3
}
 800107e:	eeb0 0a66 	vmov.f32	s0, s13
 8001082:	eef0 0a47 	vmov.f32	s1, s14
 8001086:	eeb0 1a67 	vmov.f32	s2, s15
 800108a:	3744      	adds	r7, #68	; 0x44
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr

08001094 <FusionMatrixMultiplyVector>:
 * @brief Returns the multiplication of a matrix with a vector.
 * @param matrix Matrix.
 * @param vector Vector.
 * @return Multiplication of a matrix with a vector.
 */
static inline FusionVector FusionMatrixMultiplyVector(const FusionMatrix matrix, const FusionVector vector) {
 8001094:	b084      	sub	sp, #16
 8001096:	b480      	push	{r7}
 8001098:	b08f      	sub	sp, #60	; 0x3c
 800109a:	af00      	add	r7, sp, #0
 800109c:	f107 0c40 	add.w	ip, r7, #64	; 0x40
 80010a0:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 80010a4:	eef0 6a40 	vmov.f32	s13, s0
 80010a8:	eeb0 7a60 	vmov.f32	s14, s1
 80010ac:	eef0 7a41 	vmov.f32	s15, s2
 80010b0:	edc7 6a05 	vstr	s13, [r7, #20]
 80010b4:	ed87 7a06 	vstr	s14, [r7, #24]
 80010b8:	edc7 7a07 	vstr	s15, [r7, #28]
#define R matrix.element
    const FusionVector result = {.axis = {
            .x = R.xx * vector.axis.x + R.xy * vector.axis.y + R.xz * vector.axis.z,
 80010bc:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80010c0:	edd7 7a05 	vldr	s15, [r7, #20]
 80010c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010c8:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 80010cc:	edd7 7a06 	vldr	s15, [r7, #24]
 80010d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80010d8:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 80010dc:	edd7 7a07 	vldr	s15, [r7, #28]
 80010e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010e4:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80010e8:	edc7 7a08 	vstr	s15, [r7, #32]
            .y = R.yx * vector.axis.x + R.yy * vector.axis.y + R.yz * vector.axis.z,
 80010ec:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80010f0:	edd7 7a05 	vldr	s15, [r7, #20]
 80010f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010f8:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 80010fc:	edd7 7a06 	vldr	s15, [r7, #24]
 8001100:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001104:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001108:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 800110c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001110:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001114:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8001118:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            .z = R.zx * vector.axis.x + R.zy * vector.axis.y + R.zz * vector.axis.z,
 800111c:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8001120:	edd7 7a05 	vldr	s15, [r7, #20]
 8001124:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001128:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 800112c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001130:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001134:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001138:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 800113c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001140:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001144:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8001148:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    }};
    return result;
 800114c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001150:	f107 0220 	add.w	r2, r7, #32
 8001154:	ca07      	ldmia	r2, {r0, r1, r2}
 8001156:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800115a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800115c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800115e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001160:	ee06 1a90 	vmov	s13, r1
 8001164:	ee07 2a10 	vmov	s14, r2
 8001168:	ee07 3a90 	vmov	s15, r3
#undef R
}
 800116c:	eeb0 0a66 	vmov.f32	s0, s13
 8001170:	eef0 0a47 	vmov.f32	s1, s14
 8001174:	eeb0 1a67 	vmov.f32	s2, s15
 8001178:	373c      	adds	r7, #60	; 0x3c
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	b004      	add	sp, #16
 8001182:	4770      	bx	lr

08001184 <FusionQuaternionToEuler>:
/**
 * @brief Converts a quaternion to ZYX Euler angles in degrees.
 * @param quaternion Quaternion.
 * @return Euler angles in degrees.
 */
static inline FusionEuler FusionQuaternionToEuler(const FusionQuaternion quaternion) {
 8001184:	b580      	push	{r7, lr}
 8001186:	b090      	sub	sp, #64	; 0x40
 8001188:	af00      	add	r7, sp, #0
 800118a:	eeb0 6a40 	vmov.f32	s12, s0
 800118e:	eef0 6a60 	vmov.f32	s13, s1
 8001192:	eeb0 7a41 	vmov.f32	s14, s2
 8001196:	eef0 7a61 	vmov.f32	s15, s3
 800119a:	ed87 6a04 	vstr	s12, [r7, #16]
 800119e:	edc7 6a05 	vstr	s13, [r7, #20]
 80011a2:	ed87 7a06 	vstr	s14, [r7, #24]
 80011a6:	edc7 7a07 	vstr	s15, [r7, #28]
#define Q quaternion.element
    const float halfMinusQySquared = 0.5f - Q.y * Q.y; // calculate common terms to avoid repeated operations
 80011aa:	ed97 7a06 	vldr	s14, [r7, #24]
 80011ae:	edd7 7a06 	vldr	s15, [r7, #24]
 80011b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011b6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80011ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011be:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    const FusionEuler euler = {.angle = {
            .roll = FusionRadiansToDegrees(atan2f(Q.w * Q.x + Q.y * Q.z, halfMinusQySquared - Q.x * Q.x)),
 80011c2:	ed97 7a04 	vldr	s14, [r7, #16]
 80011c6:	edd7 7a05 	vldr	s15, [r7, #20]
 80011ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011ce:	edd7 6a06 	vldr	s13, [r7, #24]
 80011d2:	edd7 7a07 	vldr	s15, [r7, #28]
 80011d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011da:	ee77 6a27 	vadd.f32	s13, s14, s15
 80011de:	ed97 7a05 	vldr	s14, [r7, #20]
 80011e2:	edd7 7a05 	vldr	s15, [r7, #20]
 80011e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011ea:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80011ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011f2:	eef0 0a67 	vmov.f32	s1, s15
 80011f6:	eeb0 0a66 	vmov.f32	s0, s13
 80011fa:	f011 fc61 	bl	8012ac0 <atan2f>
 80011fe:	eef0 7a40 	vmov.f32	s15, s0
 8001202:	eeb0 0a67 	vmov.f32	s0, s15
 8001206:	f7ff fe69 	bl	8000edc <FusionRadiansToDegrees>
 800120a:	eef0 7a40 	vmov.f32	s15, s0
    const FusionEuler euler = {.angle = {
 800120e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            .pitch = FusionRadiansToDegrees(FusionAsin(2.0f * (Q.w * Q.y - Q.z * Q.x))),
 8001212:	ed97 7a04 	vldr	s14, [r7, #16]
 8001216:	edd7 7a06 	vldr	s15, [r7, #24]
 800121a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800121e:	edd7 6a07 	vldr	s13, [r7, #28]
 8001222:	edd7 7a05 	vldr	s15, [r7, #20]
 8001226:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800122a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800122e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001232:	eeb0 0a67 	vmov.f32	s0, s15
 8001236:	f7ff fe65 	bl	8000f04 <FusionAsin>
 800123a:	eef0 7a40 	vmov.f32	s15, s0
 800123e:	eeb0 0a67 	vmov.f32	s0, s15
 8001242:	f7ff fe4b 	bl	8000edc <FusionRadiansToDegrees>
 8001246:	eef0 7a40 	vmov.f32	s15, s0
    const FusionEuler euler = {.angle = {
 800124a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .yaw = FusionRadiansToDegrees(atan2f(Q.w * Q.z + Q.x * Q.y, halfMinusQySquared - Q.z * Q.z)),
 800124e:	ed97 7a04 	vldr	s14, [r7, #16]
 8001252:	edd7 7a07 	vldr	s15, [r7, #28]
 8001256:	ee27 7a27 	vmul.f32	s14, s14, s15
 800125a:	edd7 6a05 	vldr	s13, [r7, #20]
 800125e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001262:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001266:	ee77 6a27 	vadd.f32	s13, s14, s15
 800126a:	ed97 7a07 	vldr	s14, [r7, #28]
 800126e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001272:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001276:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800127a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800127e:	eef0 0a67 	vmov.f32	s1, s15
 8001282:	eeb0 0a66 	vmov.f32	s0, s13
 8001286:	f011 fc1b 	bl	8012ac0 <atan2f>
 800128a:	eef0 7a40 	vmov.f32	s15, s0
 800128e:	eeb0 0a67 	vmov.f32	s0, s15
 8001292:	f7ff fe23 	bl	8000edc <FusionRadiansToDegrees>
 8001296:	eef0 7a40 	vmov.f32	s15, s0
    const FusionEuler euler = {.angle = {
 800129a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    }};
    return euler;
 800129e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80012a2:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80012a6:	ca07      	ldmia	r2, {r0, r1, r2}
 80012a8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80012ac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80012ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80012b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80012b2:	ee06 1a90 	vmov	s13, r1
 80012b6:	ee07 2a10 	vmov	s14, r2
 80012ba:	ee07 3a90 	vmov	s15, r3
#undef Q
}
 80012be:	eeb0 0a66 	vmov.f32	s0, s13
 80012c2:	eef0 0a47 	vmov.f32	s1, s14
 80012c6:	eeb0 1a67 	vmov.f32	s2, s15
 80012ca:	3740      	adds	r7, #64	; 0x40
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}

080012d0 <FusionCalibrationInertial>:
 * @param misalignment Misalignment matrix.
 * @param sensitivity Sensitivity.
 * @param offset Offset.
 * @return Calibrated measurement.
 */
static inline FusionVector FusionCalibrationInertial(const FusionVector uncalibrated, const FusionMatrix misalignment, const FusionVector sensitivity, const FusionVector offset) {
 80012d0:	b084      	sub	sp, #16
 80012d2:	b5b0      	push	{r4, r5, r7, lr}
 80012d4:	b09e      	sub	sp, #120	; 0x78
 80012d6:	af06      	add	r7, sp, #24
 80012d8:	eef0 4a41 	vmov.f32	s9, s2
 80012dc:	f107 0470 	add.w	r4, r7, #112	; 0x70
 80012e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80012e4:	eeb0 5a61 	vmov.f32	s10, s3
 80012e8:	eef0 5a42 	vmov.f32	s11, s4
 80012ec:	eeb0 6a62 	vmov.f32	s12, s5
 80012f0:	eef0 6a43 	vmov.f32	s13, s6
 80012f4:	eeb0 7a63 	vmov.f32	s14, s7
 80012f8:	eef0 7a44 	vmov.f32	s15, s8
 80012fc:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
 8001300:	edc7 0a0c 	vstr	s1, [r7, #48]	; 0x30
 8001304:	edc7 4a0d 	vstr	s9, [r7, #52]	; 0x34
 8001308:	ed87 5a08 	vstr	s10, [r7, #32]
 800130c:	edc7 5a09 	vstr	s11, [r7, #36]	; 0x24
 8001310:	ed87 6a0a 	vstr	s12, [r7, #40]	; 0x28
 8001314:	edc7 6a05 	vstr	s13, [r7, #20]
 8001318:	ed87 7a06 	vstr	s14, [r7, #24]
 800131c:	edc7 7a07 	vstr	s15, [r7, #28]
    return FusionMatrixMultiplyVector(misalignment, FusionVectorHadamardProduct(FusionVectorSubtract(uncalibrated, offset), sensitivity));
 8001320:	ed97 5a05 	vldr	s10, [r7, #20]
 8001324:	edd7 5a06 	vldr	s11, [r7, #24]
 8001328:	ed97 6a07 	vldr	s12, [r7, #28]
 800132c:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8001330:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8001334:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001338:	eef0 1a45 	vmov.f32	s3, s10
 800133c:	eeb0 2a65 	vmov.f32	s4, s11
 8001340:	eef0 2a46 	vmov.f32	s5, s12
 8001344:	eeb0 0a66 	vmov.f32	s0, s13
 8001348:	eef0 0a47 	vmov.f32	s1, s14
 800134c:	eeb0 1a67 	vmov.f32	s2, s15
 8001350:	f7ff fe04 	bl	8000f5c <FusionVectorSubtract>
 8001354:	eef0 6a40 	vmov.f32	s13, s0
 8001358:	eeb0 7a60 	vmov.f32	s14, s1
 800135c:	eef0 7a41 	vmov.f32	s15, s2
 8001360:	edc7 6a12 	vstr	s13, [r7, #72]	; 0x48
 8001364:	ed87 7a13 	vstr	s14, [r7, #76]	; 0x4c
 8001368:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
 800136c:	ed97 5a08 	vldr	s10, [r7, #32]
 8001370:	edd7 5a09 	vldr	s11, [r7, #36]	; 0x24
 8001374:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 8001378:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 800137c:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001380:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8001384:	eef0 1a45 	vmov.f32	s3, s10
 8001388:	eeb0 2a65 	vmov.f32	s4, s11
 800138c:	eef0 2a46 	vmov.f32	s5, s12
 8001390:	eeb0 0a66 	vmov.f32	s0, s13
 8001394:	eef0 0a47 	vmov.f32	s1, s14
 8001398:	eeb0 1a67 	vmov.f32	s2, s15
 800139c:	f7ff fe2c 	bl	8000ff8 <FusionVectorHadamardProduct>
 80013a0:	eef0 6a40 	vmov.f32	s13, s0
 80013a4:	eeb0 7a60 	vmov.f32	s14, s1
 80013a8:	eef0 7a41 	vmov.f32	s15, s2
 80013ac:	edc7 6a15 	vstr	s13, [r7, #84]	; 0x54
 80013b0:	ed87 7a16 	vstr	s14, [r7, #88]	; 0x58
 80013b4:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
 80013b8:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 80013bc:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80013c0:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80013c4:	466d      	mov	r5, sp
 80013c6:	f107 0480 	add.w	r4, r7, #128	; 0x80
 80013ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013ce:	6823      	ldr	r3, [r4, #0]
 80013d0:	602b      	str	r3, [r5, #0]
 80013d2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80013d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013d8:	eeb0 0a66 	vmov.f32	s0, s13
 80013dc:	eef0 0a47 	vmov.f32	s1, s14
 80013e0:	eeb0 1a67 	vmov.f32	s2, s15
 80013e4:	f7ff fe56 	bl	8001094 <FusionMatrixMultiplyVector>
 80013e8:	eef0 6a40 	vmov.f32	s13, s0
 80013ec:	eeb0 7a60 	vmov.f32	s14, s1
 80013f0:	eef0 7a41 	vmov.f32	s15, s2
 80013f4:	edc7 6a0f 	vstr	s13, [r7, #60]	; 0x3c
 80013f8:	ed87 7a10 	vstr	s14, [r7, #64]	; 0x40
 80013fc:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
 8001400:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001402:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001404:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001406:	ee06 1a90 	vmov	s13, r1
 800140a:	ee07 2a10 	vmov	s14, r2
 800140e:	ee07 3a90 	vmov	s15, r3
}
 8001412:	eeb0 0a66 	vmov.f32	s0, s13
 8001416:	eef0 0a47 	vmov.f32	s1, s14
 800141a:	eeb0 1a67 	vmov.f32	s2, s15
 800141e:	3760      	adds	r7, #96	; 0x60
 8001420:	46bd      	mov	sp, r7
 8001422:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001426:	b004      	add	sp, #16
 8001428:	4770      	bx	lr
	...

0800142c <setGyroOffset>:


FusionAhrs ahrs;
FusionOffset offset;

void setGyroOffset(gyro_data_t values){
 800142c:	b480      	push	{r7}
 800142e:	b085      	sub	sp, #20
 8001430:	af00      	add	r7, sp, #0
 8001432:	eef0 6a40 	vmov.f32	s13, s0
 8001436:	eeb0 7a60 	vmov.f32	s14, s1
 800143a:	eef0 7a41 	vmov.f32	s15, s2
 800143e:	edc7 6a01 	vstr	s13, [r7, #4]
 8001442:	ed87 7a02 	vstr	s14, [r7, #8]
 8001446:	edc7 7a03 	vstr	s15, [r7, #12]
	gyroscopeOffset.array[0] = values.gyro_x;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	4a06      	ldr	r2, [pc, #24]	; (8001468 <setGyroOffset+0x3c>)
 800144e:	6013      	str	r3, [r2, #0]
	gyroscopeOffset.array[1] = values.gyro_y;
 8001450:	68bb      	ldr	r3, [r7, #8]
 8001452:	4a05      	ldr	r2, [pc, #20]	; (8001468 <setGyroOffset+0x3c>)
 8001454:	6053      	str	r3, [r2, #4]
	gyroscopeOffset.array[2] = values.gyro_z;
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	4a03      	ldr	r2, [pc, #12]	; (8001468 <setGyroOffset+0x3c>)
 800145a:	6093      	str	r3, [r2, #8]
}
 800145c:	bf00      	nop
 800145e:	3714      	adds	r7, #20
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr
 8001468:	2000020c 	.word	0x2000020c

0800146c <FusionInit>:

/* Initialize Fusion algorithm. */
void FusionInit(void){
 800146c:	b5b0      	push	{r4, r5, r7, lr}
 800146e:	b086      	sub	sp, #24
 8001470:	af00      	add	r7, sp, #0
	FusionOffsetInitialise(&offset, SAMPLE_RATE);
 8001472:	2132      	movs	r1, #50	; 0x32
 8001474:	480a      	ldr	r0, [pc, #40]	; (80014a0 <FusionInit+0x34>)
 8001476:	f002 f91f 	bl	80036b8 <FusionOffsetInitialise>
	FusionAhrsInitialise(&ahrs);
 800147a:	480a      	ldr	r0, [pc, #40]	; (80014a4 <FusionInit+0x38>)
 800147c:	f000 fdb2 	bl	8001fe4 <FusionAhrsInitialise>
	const FusionAhrsSettings settings = {
 8001480:	4b09      	ldr	r3, [pc, #36]	; (80014a8 <FusionInit+0x3c>)
 8001482:	1d3c      	adds	r4, r7, #4
 8001484:	461d      	mov	r5, r3
 8001486:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001488:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800148a:	682b      	ldr	r3, [r5, #0]
 800148c:	6023      	str	r3, [r4, #0]
			.gain = 0.5f,
			.accelerationRejection = 0.0f,
			.magneticRejection = 20.0f,
			.rejectionTimeout = 5 * SAMPLE_RATE, /* 5 seconds */
	};
	FusionAhrsSetSettings(&ahrs, &settings);
 800148e:	1d3b      	adds	r3, r7, #4
 8001490:	4619      	mov	r1, r3
 8001492:	4804      	ldr	r0, [pc, #16]	; (80014a4 <FusionInit+0x38>)
 8001494:	f000 fe20 	bl	80020d8 <FusionAhrsSetSettings>
}
 8001498:	bf00      	nop
 800149a:	3718      	adds	r7, #24
 800149c:	46bd      	mov	sp, r7
 800149e:	bdb0      	pop	{r4, r5, r7, pc}
 80014a0:	20000280 	.word	0x20000280
 80014a4:	20000218 	.word	0x20000218
 80014a8:	08014078 	.word	0x08014078

080014ac <FusionCalcAngle>:

/* Calculate angle based only on Accelerometer and gyroscope.*/
void FusionCalcAngle(mems_data_t *memsData, FusionEuler *output_angles){
 80014ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014ae:	b093      	sub	sp, #76	; 0x4c
 80014b0:	af06      	add	r7, sp, #24
 80014b2:	6078      	str	r0, [r7, #4]
 80014b4:	6039      	str	r1, [r7, #0]
	FusionVector gyroscope = {memsData->gyro.gyro_x, memsData->gyro.gyro_y, memsData->gyro.gyro_z};
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	617b      	str	r3, [r7, #20]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	61bb      	str	r3, [r7, #24]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	689b      	ldr	r3, [r3, #8]
 80014c6:	61fb      	str	r3, [r7, #28]
	const FusionVector accelerometer = {memsData->acc.acc_x, memsData->acc.acc_y, memsData->acc.acc_z};
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	68db      	ldr	r3, [r3, #12]
 80014cc:	60bb      	str	r3, [r7, #8]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	691b      	ldr	r3, [r3, #16]
 80014d2:	60fb      	str	r3, [r7, #12]
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	695b      	ldr	r3, [r3, #20]
 80014d8:	613b      	str	r3, [r7, #16]

	gyroscope = FusionCalibrationInertial(gyroscope, gyroscopeMisalignment, gyroscopeSensitivity, gyroscopeOffset);
 80014da:	4b64      	ldr	r3, [pc, #400]	; (800166c <FusionCalcAngle+0x1c0>)
 80014dc:	edd3 3a00 	vldr	s7, [r3]
 80014e0:	ed93 4a01 	vldr	s8, [r3, #4]
 80014e4:	edd3 4a02 	vldr	s9, [r3, #8]
 80014e8:	4b61      	ldr	r3, [pc, #388]	; (8001670 <FusionCalcAngle+0x1c4>)
 80014ea:	ed93 5a00 	vldr	s10, [r3]
 80014ee:	edd3 5a01 	vldr	s11, [r3, #4]
 80014f2:	ed93 6a02 	vldr	s12, [r3, #8]
 80014f6:	4e5f      	ldr	r6, [pc, #380]	; (8001674 <FusionCalcAngle+0x1c8>)
 80014f8:	edd7 6a05 	vldr	s13, [r7, #20]
 80014fc:	ed97 7a06 	vldr	s14, [r7, #24]
 8001500:	edd7 7a07 	vldr	s15, [r7, #28]
 8001504:	466d      	mov	r5, sp
 8001506:	f106 0410 	add.w	r4, r6, #16
 800150a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800150c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800150e:	6823      	ldr	r3, [r4, #0]
 8001510:	602b      	str	r3, [r5, #0]
 8001512:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001516:	eeb0 3a63 	vmov.f32	s6, s7
 800151a:	eef0 3a44 	vmov.f32	s7, s8
 800151e:	eeb0 4a64 	vmov.f32	s8, s9
 8001522:	eef0 1a45 	vmov.f32	s3, s10
 8001526:	eeb0 2a65 	vmov.f32	s4, s11
 800152a:	eef0 2a46 	vmov.f32	s5, s12
 800152e:	eeb0 0a66 	vmov.f32	s0, s13
 8001532:	eef0 0a47 	vmov.f32	s1, s14
 8001536:	eeb0 1a67 	vmov.f32	s2, s15
 800153a:	f7ff fec9 	bl	80012d0 <FusionCalibrationInertial>
 800153e:	eef0 6a40 	vmov.f32	s13, s0
 8001542:	eeb0 7a60 	vmov.f32	s14, s1
 8001546:	eef0 7a41 	vmov.f32	s15, s2
 800154a:	edc7 6a05 	vstr	s13, [r7, #20]
 800154e:	ed87 7a06 	vstr	s14, [r7, #24]
 8001552:	edc7 7a07 	vstr	s15, [r7, #28]

	FusionAhrsUpdateNoMagnetometer(&ahrs, gyroscope, accelerometer, SAMPLE_PERIOD);
 8001556:	ed97 5a02 	vldr	s10, [r7, #8]
 800155a:	edd7 5a03 	vldr	s11, [r7, #12]
 800155e:	ed97 6a04 	vldr	s12, [r7, #16]
 8001562:	edd7 6a05 	vldr	s13, [r7, #20]
 8001566:	ed97 7a06 	vldr	s14, [r7, #24]
 800156a:	edd7 7a07 	vldr	s15, [r7, #28]
 800156e:	ed9f 3a42 	vldr	s6, [pc, #264]	; 8001678 <FusionCalcAngle+0x1cc>
 8001572:	eef0 1a45 	vmov.f32	s3, s10
 8001576:	eeb0 2a65 	vmov.f32	s4, s11
 800157a:	eef0 2a46 	vmov.f32	s5, s12
 800157e:	eeb0 0a66 	vmov.f32	s0, s13
 8001582:	eef0 0a47 	vmov.f32	s1, s14
 8001586:	eeb0 1a67 	vmov.f32	s2, s15
 800158a:	483c      	ldr	r0, [pc, #240]	; (800167c <FusionCalcAngle+0x1d0>)
 800158c:	f001 fb5a 	bl	8002c44 <FusionAhrsUpdateNoMagnetometer>
	*output_angles = FusionQuaternionToEuler(FusionAhrsGetQuaternion(&ahrs));
 8001590:	483a      	ldr	r0, [pc, #232]	; (800167c <FusionCalcAngle+0x1d0>)
 8001592:	f001 fbb9 	bl	8002d08 <FusionAhrsGetQuaternion>
 8001596:	eeb0 6a40 	vmov.f32	s12, s0
 800159a:	eef0 6a60 	vmov.f32	s13, s1
 800159e:	eeb0 7a41 	vmov.f32	s14, s2
 80015a2:	eef0 7a61 	vmov.f32	s15, s3
 80015a6:	ed87 6a08 	vstr	s12, [r7, #32]
 80015aa:	edc7 6a09 	vstr	s13, [r7, #36]	; 0x24
 80015ae:	ed87 7a0a 	vstr	s14, [r7, #40]	; 0x28
 80015b2:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
 80015b6:	ed97 6a08 	vldr	s12, [r7, #32]
 80015ba:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80015be:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80015c2:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80015c6:	eeb0 0a46 	vmov.f32	s0, s12
 80015ca:	eef0 0a66 	vmov.f32	s1, s13
 80015ce:	eeb0 1a47 	vmov.f32	s2, s14
 80015d2:	eef0 1a67 	vmov.f32	s3, s15
 80015d6:	f7ff fdd5 	bl	8001184 <FusionQuaternionToEuler>
 80015da:	eef0 6a40 	vmov.f32	s13, s0
 80015de:	eeb0 7a60 	vmov.f32	s14, s1
 80015e2:	eef0 7a41 	vmov.f32	s15, s2
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	edc3 6a00 	vstr	s13, [r3]
 80015ec:	ed83 7a01 	vstr	s14, [r3, #4]
 80015f0:	edc3 7a02 	vstr	s15, [r3, #8]
	if (output_angles->angle.yaw < 0){
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	edd3 7a02 	vldr	s15, [r3, #8]
 80015fa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80015fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001602:	d509      	bpl.n	8001618 <FusionCalcAngle+0x16c>
		output_angles->angle.yaw += 360;
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	edd3 7a02 	vldr	s15, [r3, #8]
 800160a:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8001680 <FusionCalcAngle+0x1d4>
 800160e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	edc3 7a02 	vstr	s15, [r3, #8]
	}
	if (output_angles->angle.roll < 0){
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	edd3 7a00 	vldr	s15, [r3]
 800161e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001622:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001626:	d509      	bpl.n	800163c <FusionCalcAngle+0x190>
		output_angles->angle.roll += 360;
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	edd3 7a00 	vldr	s15, [r3]
 800162e:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8001680 <FusionCalcAngle+0x1d4>
 8001632:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	edc3 7a00 	vstr	s15, [r3]
	}
	if (output_angles->angle.pitch < 0){
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001642:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001646:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800164a:	d400      	bmi.n	800164e <FusionCalcAngle+0x1a2>
		output_angles->angle.pitch += 360;
	}
	//	const FusionVect = FusionQuaternionToEuler(FusionAhrsGetQuaternion(&ahrs));
}
 800164c:	e009      	b.n	8001662 <FusionCalcAngle+0x1b6>
		output_angles->angle.pitch += 360;
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	edd3 7a01 	vldr	s15, [r3, #4]
 8001654:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8001680 <FusionCalcAngle+0x1d4>
 8001658:	ee77 7a87 	vadd.f32	s15, s15, s14
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8001662:	bf00      	nop
 8001664:	3734      	adds	r7, #52	; 0x34
 8001666:	46bd      	mov	sp, r7
 8001668:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800166a:	bf00      	nop
 800166c:	2000020c 	.word	0x2000020c
 8001670:	080142e0 	.word	0x080142e0
 8001674:	080142bc 	.word	0x080142bc
 8001678:	3d0b4396 	.word	0x3d0b4396
 800167c:	20000218 	.word	0x20000218
 8001680:	43b40000 	.word	0x43b40000

08001684 <FusionDegreesToRadians>:
static inline float FusionDegreesToRadians(const float degrees) {
 8001684:	b480      	push	{r7}
 8001686:	b083      	sub	sp, #12
 8001688:	af00      	add	r7, sp, #0
 800168a:	ed87 0a01 	vstr	s0, [r7, #4]
    return degrees * ((float) M_PI / 180.0f);
 800168e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001692:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80016a8 <FusionDegreesToRadians+0x24>
 8001696:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800169a:	eeb0 0a67 	vmov.f32	s0, s15
 800169e:	370c      	adds	r7, #12
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr
 80016a8:	3c8efa35 	.word	0x3c8efa35

080016ac <FusionFastInverseSqrt>:
static inline float FusionFastInverseSqrt(const float x) {
 80016ac:	b480      	push	{r7}
 80016ae:	b085      	sub	sp, #20
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	ed87 0a01 	vstr	s0, [r7, #4]
    Union32 union32 = {.f = x};
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	60fb      	str	r3, [r7, #12]
    union32.i = 0x5F1F1412 - (union32.i >> 1);
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	105a      	asrs	r2, r3, #1
 80016be:	4b10      	ldr	r3, [pc, #64]	; (8001700 <FusionFastInverseSqrt+0x54>)
 80016c0:	1a9b      	subs	r3, r3, r2
 80016c2:	60fb      	str	r3, [r7, #12]
    return union32.f * (1.69000231f - 0.714158168f * x * union32.f * union32.f);
 80016c4:	ed97 7a03 	vldr	s14, [r7, #12]
 80016c8:	edd7 7a01 	vldr	s15, [r7, #4]
 80016cc:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8001704 <FusionFastInverseSqrt+0x58>
 80016d0:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80016d4:	edd7 7a03 	vldr	s15, [r7, #12]
 80016d8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80016dc:	edd7 7a03 	vldr	s15, [r7, #12]
 80016e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016e4:	eddf 6a08 	vldr	s13, [pc, #32]	; 8001708 <FusionFastInverseSqrt+0x5c>
 80016e8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80016ec:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 80016f0:	eeb0 0a67 	vmov.f32	s0, s15
 80016f4:	3714      	adds	r7, #20
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
 80016fe:	bf00      	nop
 8001700:	5f1f1412 	.word	0x5f1f1412
 8001704:	3f36d312 	.word	0x3f36d312
 8001708:	3fd851ff 	.word	0x3fd851ff

0800170c <FusionVectorIsZero>:
static inline bool FusionVectorIsZero(const FusionVector vector) {
 800170c:	b480      	push	{r7}
 800170e:	b085      	sub	sp, #20
 8001710:	af00      	add	r7, sp, #0
 8001712:	eef0 6a40 	vmov.f32	s13, s0
 8001716:	eeb0 7a60 	vmov.f32	s14, s1
 800171a:	eef0 7a41 	vmov.f32	s15, s2
 800171e:	edc7 6a01 	vstr	s13, [r7, #4]
 8001722:	ed87 7a02 	vstr	s14, [r7, #8]
 8001726:	edc7 7a03 	vstr	s15, [r7, #12]
    return (vector.axis.x == 0.0f) && (vector.axis.y == 0.0f) && (vector.axis.z == 0.0f);
 800172a:	edd7 7a01 	vldr	s15, [r7, #4]
 800172e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001732:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001736:	d10f      	bne.n	8001758 <FusionVectorIsZero+0x4c>
 8001738:	edd7 7a02 	vldr	s15, [r7, #8]
 800173c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001740:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001744:	d108      	bne.n	8001758 <FusionVectorIsZero+0x4c>
 8001746:	edd7 7a03 	vldr	s15, [r7, #12]
 800174a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800174e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001752:	d101      	bne.n	8001758 <FusionVectorIsZero+0x4c>
 8001754:	2301      	movs	r3, #1
 8001756:	e000      	b.n	800175a <FusionVectorIsZero+0x4e>
 8001758:	2300      	movs	r3, #0
 800175a:	f003 0301 	and.w	r3, r3, #1
 800175e:	b2db      	uxtb	r3, r3
}
 8001760:	4618      	mov	r0, r3
 8001762:	3714      	adds	r7, #20
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr

0800176c <FusionVectorAdd>:
static inline FusionVector FusionVectorAdd(const FusionVector vectorA, const FusionVector vectorB) {
 800176c:	b480      	push	{r7}
 800176e:	b091      	sub	sp, #68	; 0x44
 8001770:	af00      	add	r7, sp, #0
 8001772:	eeb0 5a40 	vmov.f32	s10, s0
 8001776:	eef0 5a60 	vmov.f32	s11, s1
 800177a:	eeb0 6a41 	vmov.f32	s12, s2
 800177e:	eef0 6a61 	vmov.f32	s13, s3
 8001782:	eeb0 7a42 	vmov.f32	s14, s4
 8001786:	eef0 7a62 	vmov.f32	s15, s5
 800178a:	ed87 5a07 	vstr	s10, [r7, #28]
 800178e:	edc7 5a08 	vstr	s11, [r7, #32]
 8001792:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 8001796:	edc7 6a04 	vstr	s13, [r7, #16]
 800179a:	ed87 7a05 	vstr	s14, [r7, #20]
 800179e:	edc7 7a06 	vstr	s15, [r7, #24]
            .x = vectorA.axis.x + vectorB.axis.x,
 80017a2:	ed97 7a07 	vldr	s14, [r7, #28]
 80017a6:	edd7 7a04 	vldr	s15, [r7, #16]
 80017aa:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80017ae:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = vectorA.axis.y + vectorB.axis.y,
 80017b2:	ed97 7a08 	vldr	s14, [r7, #32]
 80017b6:	edd7 7a05 	vldr	s15, [r7, #20]
 80017ba:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80017be:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = vectorA.axis.z + vectorB.axis.z,
 80017c2:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80017c6:	edd7 7a06 	vldr	s15, [r7, #24]
 80017ca:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80017ce:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    return result;
 80017d2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80017d6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80017da:	ca07      	ldmia	r2, {r0, r1, r2}
 80017dc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80017e0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80017e2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80017e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80017e6:	ee06 1a90 	vmov	s13, r1
 80017ea:	ee07 2a10 	vmov	s14, r2
 80017ee:	ee07 3a90 	vmov	s15, r3
}
 80017f2:	eeb0 0a66 	vmov.f32	s0, s13
 80017f6:	eef0 0a47 	vmov.f32	s1, s14
 80017fa:	eeb0 1a67 	vmov.f32	s2, s15
 80017fe:	3744      	adds	r7, #68	; 0x44
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr

08001808 <FusionVectorSum>:
static inline float FusionVectorSum(const FusionVector vector) {
 8001808:	b480      	push	{r7}
 800180a:	b085      	sub	sp, #20
 800180c:	af00      	add	r7, sp, #0
 800180e:	eef0 6a40 	vmov.f32	s13, s0
 8001812:	eeb0 7a60 	vmov.f32	s14, s1
 8001816:	eef0 7a41 	vmov.f32	s15, s2
 800181a:	edc7 6a01 	vstr	s13, [r7, #4]
 800181e:	ed87 7a02 	vstr	s14, [r7, #8]
 8001822:	edc7 7a03 	vstr	s15, [r7, #12]
    return vector.axis.x + vector.axis.y + vector.axis.z;
 8001826:	ed97 7a01 	vldr	s14, [r7, #4]
 800182a:	edd7 7a02 	vldr	s15, [r7, #8]
 800182e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001832:	edd7 7a03 	vldr	s15, [r7, #12]
 8001836:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 800183a:	eeb0 0a67 	vmov.f32	s0, s15
 800183e:	3714      	adds	r7, #20
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr

08001848 <FusionVectorMultiplyScalar>:
static inline FusionVector FusionVectorMultiplyScalar(const FusionVector vector, const float scalar) {
 8001848:	b480      	push	{r7}
 800184a:	b08f      	sub	sp, #60	; 0x3c
 800184c:	af00      	add	r7, sp, #0
 800184e:	eef0 6a40 	vmov.f32	s13, s0
 8001852:	eeb0 7a60 	vmov.f32	s14, s1
 8001856:	eef0 7a41 	vmov.f32	s15, s2
 800185a:	edc7 1a04 	vstr	s3, [r7, #16]
 800185e:	edc7 6a05 	vstr	s13, [r7, #20]
 8001862:	ed87 7a06 	vstr	s14, [r7, #24]
 8001866:	edc7 7a07 	vstr	s15, [r7, #28]
            .x = vector.axis.x * scalar,
 800186a:	ed97 7a05 	vldr	s14, [r7, #20]
 800186e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001872:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8001876:	edc7 7a08 	vstr	s15, [r7, #32]
            .y = vector.axis.y * scalar,
 800187a:	ed97 7a06 	vldr	s14, [r7, #24]
 800187e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001882:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8001886:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            .z = vector.axis.z * scalar,
 800188a:	ed97 7a07 	vldr	s14, [r7, #28]
 800188e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001892:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8001896:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    return result;
 800189a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800189e:	f107 0220 	add.w	r2, r7, #32
 80018a2:	ca07      	ldmia	r2, {r0, r1, r2}
 80018a4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80018a8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80018aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80018ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018ae:	ee06 1a90 	vmov	s13, r1
 80018b2:	ee07 2a10 	vmov	s14, r2
 80018b6:	ee07 3a90 	vmov	s15, r3
}
 80018ba:	eeb0 0a66 	vmov.f32	s0, s13
 80018be:	eef0 0a47 	vmov.f32	s1, s14
 80018c2:	eeb0 1a67 	vmov.f32	s2, s15
 80018c6:	373c      	adds	r7, #60	; 0x3c
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr

080018d0 <FusionVectorHadamardProduct>:
static inline FusionVector FusionVectorHadamardProduct(const FusionVector vectorA, const FusionVector vectorB) {
 80018d0:	b480      	push	{r7}
 80018d2:	b091      	sub	sp, #68	; 0x44
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	eeb0 5a40 	vmov.f32	s10, s0
 80018da:	eef0 5a60 	vmov.f32	s11, s1
 80018de:	eeb0 6a41 	vmov.f32	s12, s2
 80018e2:	eef0 6a61 	vmov.f32	s13, s3
 80018e6:	eeb0 7a42 	vmov.f32	s14, s4
 80018ea:	eef0 7a62 	vmov.f32	s15, s5
 80018ee:	ed87 5a07 	vstr	s10, [r7, #28]
 80018f2:	edc7 5a08 	vstr	s11, [r7, #32]
 80018f6:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 80018fa:	edc7 6a04 	vstr	s13, [r7, #16]
 80018fe:	ed87 7a05 	vstr	s14, [r7, #20]
 8001902:	edc7 7a06 	vstr	s15, [r7, #24]
            .x = vectorA.axis.x * vectorB.axis.x,
 8001906:	ed97 7a07 	vldr	s14, [r7, #28]
 800190a:	edd7 7a04 	vldr	s15, [r7, #16]
 800190e:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8001912:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = vectorA.axis.y * vectorB.axis.y,
 8001916:	ed97 7a08 	vldr	s14, [r7, #32]
 800191a:	edd7 7a05 	vldr	s15, [r7, #20]
 800191e:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8001922:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = vectorA.axis.z * vectorB.axis.z,
 8001926:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800192a:	edd7 7a06 	vldr	s15, [r7, #24]
 800192e:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8001932:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    return result;
 8001936:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800193a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800193e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001940:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001944:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001946:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001948:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800194a:	ee06 1a90 	vmov	s13, r1
 800194e:	ee07 2a10 	vmov	s14, r2
 8001952:	ee07 3a90 	vmov	s15, r3
}
 8001956:	eeb0 0a66 	vmov.f32	s0, s13
 800195a:	eef0 0a47 	vmov.f32	s1, s14
 800195e:	eeb0 1a67 	vmov.f32	s2, s15
 8001962:	3744      	adds	r7, #68	; 0x44
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr

0800196c <FusionVectorCrossProduct>:
static inline FusionVector FusionVectorCrossProduct(const FusionVector vectorA, const FusionVector vectorB) {
 800196c:	b480      	push	{r7}
 800196e:	b091      	sub	sp, #68	; 0x44
 8001970:	af00      	add	r7, sp, #0
 8001972:	eeb0 5a40 	vmov.f32	s10, s0
 8001976:	eef0 5a60 	vmov.f32	s11, s1
 800197a:	eeb0 6a41 	vmov.f32	s12, s2
 800197e:	eef0 6a61 	vmov.f32	s13, s3
 8001982:	eeb0 7a42 	vmov.f32	s14, s4
 8001986:	eef0 7a62 	vmov.f32	s15, s5
 800198a:	ed87 5a07 	vstr	s10, [r7, #28]
 800198e:	edc7 5a08 	vstr	s11, [r7, #32]
 8001992:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 8001996:	edc7 6a04 	vstr	s13, [r7, #16]
 800199a:	ed87 7a05 	vstr	s14, [r7, #20]
 800199e:	edc7 7a06 	vstr	s15, [r7, #24]
            .x = A.y * B.z - A.z * B.y,
 80019a2:	ed97 7a08 	vldr	s14, [r7, #32]
 80019a6:	edd7 7a06 	vldr	s15, [r7, #24]
 80019aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019ae:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80019b2:	edd7 7a05 	vldr	s15, [r7, #20]
 80019b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019ba:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80019be:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = A.z * B.x - A.x * B.z,
 80019c2:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80019c6:	edd7 7a04 	vldr	s15, [r7, #16]
 80019ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019ce:	edd7 6a07 	vldr	s13, [r7, #28]
 80019d2:	edd7 7a06 	vldr	s15, [r7, #24]
 80019d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019da:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80019de:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = A.x * B.y - A.y * B.x,
 80019e2:	ed97 7a07 	vldr	s14, [r7, #28]
 80019e6:	edd7 7a05 	vldr	s15, [r7, #20]
 80019ea:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019ee:	edd7 6a08 	vldr	s13, [r7, #32]
 80019f2:	edd7 7a04 	vldr	s15, [r7, #16]
 80019f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019fa:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80019fe:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    return result;
 8001a02:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001a06:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001a0a:	ca07      	ldmia	r2, {r0, r1, r2}
 8001a0c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001a10:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001a12:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001a14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a16:	ee06 1a90 	vmov	s13, r1
 8001a1a:	ee07 2a10 	vmov	s14, r2
 8001a1e:	ee07 3a90 	vmov	s15, r3
}
 8001a22:	eeb0 0a66 	vmov.f32	s0, s13
 8001a26:	eef0 0a47 	vmov.f32	s1, s14
 8001a2a:	eeb0 1a67 	vmov.f32	s2, s15
 8001a2e:	3744      	adds	r7, #68	; 0x44
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr

08001a38 <FusionVectorMagnitudeSquared>:
static inline float FusionVectorMagnitudeSquared(const FusionVector vector) {
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b088      	sub	sp, #32
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	eef0 6a40 	vmov.f32	s13, s0
 8001a42:	eeb0 7a60 	vmov.f32	s14, s1
 8001a46:	eef0 7a41 	vmov.f32	s15, s2
 8001a4a:	edc7 6a01 	vstr	s13, [r7, #4]
 8001a4e:	ed87 7a02 	vstr	s14, [r7, #8]
 8001a52:	edc7 7a03 	vstr	s15, [r7, #12]
    return FusionVectorSum(FusionVectorHadamardProduct(vector, vector));
 8001a56:	ed97 5a01 	vldr	s10, [r7, #4]
 8001a5a:	edd7 5a02 	vldr	s11, [r7, #8]
 8001a5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8001a62:	edd7 6a01 	vldr	s13, [r7, #4]
 8001a66:	ed97 7a02 	vldr	s14, [r7, #8]
 8001a6a:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a6e:	eef0 1a45 	vmov.f32	s3, s10
 8001a72:	eeb0 2a65 	vmov.f32	s4, s11
 8001a76:	eef0 2a46 	vmov.f32	s5, s12
 8001a7a:	eeb0 0a66 	vmov.f32	s0, s13
 8001a7e:	eef0 0a47 	vmov.f32	s1, s14
 8001a82:	eeb0 1a67 	vmov.f32	s2, s15
 8001a86:	f7ff ff23 	bl	80018d0 <FusionVectorHadamardProduct>
 8001a8a:	eef0 6a40 	vmov.f32	s13, s0
 8001a8e:	eeb0 7a60 	vmov.f32	s14, s1
 8001a92:	eef0 7a41 	vmov.f32	s15, s2
 8001a96:	edc7 6a05 	vstr	s13, [r7, #20]
 8001a9a:	ed87 7a06 	vstr	s14, [r7, #24]
 8001a9e:	edc7 7a07 	vstr	s15, [r7, #28]
 8001aa2:	edd7 6a05 	vldr	s13, [r7, #20]
 8001aa6:	ed97 7a06 	vldr	s14, [r7, #24]
 8001aaa:	edd7 7a07 	vldr	s15, [r7, #28]
 8001aae:	eeb0 0a66 	vmov.f32	s0, s13
 8001ab2:	eef0 0a47 	vmov.f32	s1, s14
 8001ab6:	eeb0 1a67 	vmov.f32	s2, s15
 8001aba:	f7ff fea5 	bl	8001808 <FusionVectorSum>
 8001abe:	eef0 7a40 	vmov.f32	s15, s0
}
 8001ac2:	eeb0 0a67 	vmov.f32	s0, s15
 8001ac6:	3720      	adds	r7, #32
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}

08001acc <FusionVectorNormalise>:
static inline FusionVector FusionVectorNormalise(const FusionVector vector) {
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b08c      	sub	sp, #48	; 0x30
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	eef0 6a40 	vmov.f32	s13, s0
 8001ad6:	eeb0 7a60 	vmov.f32	s14, s1
 8001ada:	eef0 7a41 	vmov.f32	s15, s2
 8001ade:	edc7 6a05 	vstr	s13, [r7, #20]
 8001ae2:	ed87 7a06 	vstr	s14, [r7, #24]
 8001ae6:	edc7 7a07 	vstr	s15, [r7, #28]
    const float magnitudeReciprocal = FusionFastInverseSqrt(FusionVectorMagnitudeSquared(vector));
 8001aea:	edd7 6a05 	vldr	s13, [r7, #20]
 8001aee:	ed97 7a06 	vldr	s14, [r7, #24]
 8001af2:	edd7 7a07 	vldr	s15, [r7, #28]
 8001af6:	eeb0 0a66 	vmov.f32	s0, s13
 8001afa:	eef0 0a47 	vmov.f32	s1, s14
 8001afe:	eeb0 1a67 	vmov.f32	s2, s15
 8001b02:	f7ff ff99 	bl	8001a38 <FusionVectorMagnitudeSquared>
 8001b06:	eef0 7a40 	vmov.f32	s15, s0
 8001b0a:	eeb0 0a67 	vmov.f32	s0, s15
 8001b0e:	f7ff fdcd 	bl	80016ac <FusionFastInverseSqrt>
 8001b12:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
    return FusionVectorMultiplyScalar(vector, magnitudeReciprocal);
 8001b16:	edd7 6a05 	vldr	s13, [r7, #20]
 8001b1a:	ed97 7a06 	vldr	s14, [r7, #24]
 8001b1e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001b22:	edd7 1a0b 	vldr	s3, [r7, #44]	; 0x2c
 8001b26:	eeb0 0a66 	vmov.f32	s0, s13
 8001b2a:	eef0 0a47 	vmov.f32	s1, s14
 8001b2e:	eeb0 1a67 	vmov.f32	s2, s15
 8001b32:	f7ff fe89 	bl	8001848 <FusionVectorMultiplyScalar>
 8001b36:	eef0 6a40 	vmov.f32	s13, s0
 8001b3a:	eeb0 7a60 	vmov.f32	s14, s1
 8001b3e:	eef0 7a41 	vmov.f32	s15, s2
 8001b42:	edc7 6a08 	vstr	s13, [r7, #32]
 8001b46:	ed87 7a09 	vstr	s14, [r7, #36]	; 0x24
 8001b4a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 8001b4e:	6a39      	ldr	r1, [r7, #32]
 8001b50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b54:	ee06 1a90 	vmov	s13, r1
 8001b58:	ee07 2a10 	vmov	s14, r2
 8001b5c:	ee07 3a90 	vmov	s15, r3
}
 8001b60:	eeb0 0a66 	vmov.f32	s0, s13
 8001b64:	eef0 0a47 	vmov.f32	s1, s14
 8001b68:	eeb0 1a67 	vmov.f32	s2, s15
 8001b6c:	3730      	adds	r7, #48	; 0x30
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}

08001b72 <FusionQuaternionAdd>:
static inline FusionQuaternion FusionQuaternionAdd(const FusionQuaternion quaternionA, const FusionQuaternion quaternionB) {
 8001b72:	b490      	push	{r4, r7}
 8001b74:	b094      	sub	sp, #80	; 0x50
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	eeb0 4a40 	vmov.f32	s8, s0
 8001b7c:	eef0 4a60 	vmov.f32	s9, s1
 8001b80:	eeb0 5a41 	vmov.f32	s10, s2
 8001b84:	eef0 5a61 	vmov.f32	s11, s3
 8001b88:	eeb0 6a42 	vmov.f32	s12, s4
 8001b8c:	eef0 6a62 	vmov.f32	s13, s5
 8001b90:	eeb0 7a43 	vmov.f32	s14, s6
 8001b94:	eef0 7a63 	vmov.f32	s15, s7
 8001b98:	ed87 4a08 	vstr	s8, [r7, #32]
 8001b9c:	edc7 4a09 	vstr	s9, [r7, #36]	; 0x24
 8001ba0:	ed87 5a0a 	vstr	s10, [r7, #40]	; 0x28
 8001ba4:	edc7 5a0b 	vstr	s11, [r7, #44]	; 0x2c
 8001ba8:	ed87 6a04 	vstr	s12, [r7, #16]
 8001bac:	edc7 6a05 	vstr	s13, [r7, #20]
 8001bb0:	ed87 7a06 	vstr	s14, [r7, #24]
 8001bb4:	edc7 7a07 	vstr	s15, [r7, #28]
            .w = quaternionA.element.w + quaternionB.element.w,
 8001bb8:	ed97 7a08 	vldr	s14, [r7, #32]
 8001bbc:	edd7 7a04 	vldr	s15, [r7, #16]
 8001bc0:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8001bc4:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
            .x = quaternionA.element.x + quaternionB.element.x,
 8001bc8:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001bcc:	edd7 7a05 	vldr	s15, [r7, #20]
 8001bd0:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8001bd4:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
            .y = quaternionA.element.y + quaternionB.element.y,
 8001bd8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001bdc:	edd7 7a06 	vldr	s15, [r7, #24]
 8001be0:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8001be4:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
            .z = quaternionA.element.z + quaternionB.element.z,
 8001be8:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8001bec:	edd7 7a07 	vldr	s15, [r7, #28]
 8001bf0:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8001bf4:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    return result;
 8001bf8:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8001bfc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001c00:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c02:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001c06:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001c08:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001c0a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001c0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c0e:	ee06 0a10 	vmov	s12, r0
 8001c12:	ee06 1a90 	vmov	s13, r1
 8001c16:	ee07 2a10 	vmov	s14, r2
 8001c1a:	ee07 3a90 	vmov	s15, r3
}
 8001c1e:	eeb0 0a46 	vmov.f32	s0, s12
 8001c22:	eef0 0a66 	vmov.f32	s1, s13
 8001c26:	eeb0 1a47 	vmov.f32	s2, s14
 8001c2a:	eef0 1a67 	vmov.f32	s3, s15
 8001c2e:	3750      	adds	r7, #80	; 0x50
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bc90      	pop	{r4, r7}
 8001c34:	4770      	bx	lr

08001c36 <FusionQuaternionMultiply>:
static inline FusionQuaternion FusionQuaternionMultiply(const FusionQuaternion quaternionA, const FusionQuaternion quaternionB) {
 8001c36:	b490      	push	{r4, r7}
 8001c38:	b094      	sub	sp, #80	; 0x50
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	eeb0 4a40 	vmov.f32	s8, s0
 8001c40:	eef0 4a60 	vmov.f32	s9, s1
 8001c44:	eeb0 5a41 	vmov.f32	s10, s2
 8001c48:	eef0 5a61 	vmov.f32	s11, s3
 8001c4c:	eeb0 6a42 	vmov.f32	s12, s4
 8001c50:	eef0 6a62 	vmov.f32	s13, s5
 8001c54:	eeb0 7a43 	vmov.f32	s14, s6
 8001c58:	eef0 7a63 	vmov.f32	s15, s7
 8001c5c:	ed87 4a08 	vstr	s8, [r7, #32]
 8001c60:	edc7 4a09 	vstr	s9, [r7, #36]	; 0x24
 8001c64:	ed87 5a0a 	vstr	s10, [r7, #40]	; 0x28
 8001c68:	edc7 5a0b 	vstr	s11, [r7, #44]	; 0x2c
 8001c6c:	ed87 6a04 	vstr	s12, [r7, #16]
 8001c70:	edc7 6a05 	vstr	s13, [r7, #20]
 8001c74:	ed87 7a06 	vstr	s14, [r7, #24]
 8001c78:	edc7 7a07 	vstr	s15, [r7, #28]
            .w = A.w * B.w - A.x * B.x - A.y * B.y - A.z * B.z,
 8001c7c:	ed97 7a08 	vldr	s14, [r7, #32]
 8001c80:	edd7 7a04 	vldr	s15, [r7, #16]
 8001c84:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c88:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8001c8c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c90:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c94:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001c98:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8001c9c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001ca0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ca4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001ca8:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8001cac:	edd7 7a07 	vldr	s15, [r7, #28]
 8001cb0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001cb4:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8001cb8:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
            .x = A.w * B.x + A.x * B.w + A.y * B.z - A.z * B.y,
 8001cbc:	ed97 7a08 	vldr	s14, [r7, #32]
 8001cc0:	edd7 7a05 	vldr	s15, [r7, #20]
 8001cc4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001cc8:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8001ccc:	edd7 7a04 	vldr	s15, [r7, #16]
 8001cd0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001cd4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001cd8:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8001cdc:	edd7 7a07 	vldr	s15, [r7, #28]
 8001ce0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ce4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ce8:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8001cec:	edd7 7a06 	vldr	s15, [r7, #24]
 8001cf0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001cf4:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8001cf8:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
            .y = A.w * B.y - A.x * B.z + A.y * B.w + A.z * B.x,
 8001cfc:	ed97 7a08 	vldr	s14, [r7, #32]
 8001d00:	edd7 7a06 	vldr	s15, [r7, #24]
 8001d04:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d08:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8001d0c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001d10:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d14:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d18:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8001d1c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d20:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d24:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d28:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8001d2c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d30:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d34:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8001d38:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
            .z = A.w * B.z + A.x * B.y - A.y * B.x + A.z * B.w,
 8001d3c:	ed97 7a08 	vldr	s14, [r7, #32]
 8001d40:	edd7 7a07 	vldr	s15, [r7, #28]
 8001d44:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d48:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8001d4c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001d50:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d54:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d58:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8001d5c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d60:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d64:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d68:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8001d6c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d70:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d74:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8001d78:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    return result;
 8001d7c:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8001d80:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001d84:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d86:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001d8a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001d8c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001d8e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001d90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d92:	ee06 0a10 	vmov	s12, r0
 8001d96:	ee06 1a90 	vmov	s13, r1
 8001d9a:	ee07 2a10 	vmov	s14, r2
 8001d9e:	ee07 3a90 	vmov	s15, r3
}
 8001da2:	eeb0 0a46 	vmov.f32	s0, s12
 8001da6:	eef0 0a66 	vmov.f32	s1, s13
 8001daa:	eeb0 1a47 	vmov.f32	s2, s14
 8001dae:	eef0 1a67 	vmov.f32	s3, s15
 8001db2:	3750      	adds	r7, #80	; 0x50
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bc90      	pop	{r4, r7}
 8001db8:	4770      	bx	lr

08001dba <FusionQuaternionMultiplyVector>:
static inline FusionQuaternion FusionQuaternionMultiplyVector(const FusionQuaternion quaternion, const FusionVector vector) {
 8001dba:	b490      	push	{r4, r7}
 8001dbc:	b094      	sub	sp, #80	; 0x50
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	eef0 4a40 	vmov.f32	s9, s0
 8001dc4:	eeb0 5a60 	vmov.f32	s10, s1
 8001dc8:	eef0 5a41 	vmov.f32	s11, s2
 8001dcc:	eeb0 6a61 	vmov.f32	s12, s3
 8001dd0:	eef0 6a42 	vmov.f32	s13, s4
 8001dd4:	eeb0 7a62 	vmov.f32	s14, s5
 8001dd8:	eef0 7a43 	vmov.f32	s15, s6
 8001ddc:	edc7 4a08 	vstr	s9, [r7, #32]
 8001de0:	ed87 5a09 	vstr	s10, [r7, #36]	; 0x24
 8001de4:	edc7 5a0a 	vstr	s11, [r7, #40]	; 0x28
 8001de8:	ed87 6a0b 	vstr	s12, [r7, #44]	; 0x2c
 8001dec:	edc7 6a05 	vstr	s13, [r7, #20]
 8001df0:	ed87 7a06 	vstr	s14, [r7, #24]
 8001df4:	edc7 7a07 	vstr	s15, [r7, #28]
            .w = -Q.x * V.x - Q.y * V.y - Q.z * V.z,
 8001df8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001dfc:	eeb1 7a67 	vneg.f32	s14, s15
 8001e00:	edd7 7a05 	vldr	s15, [r7, #20]
 8001e04:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e08:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8001e0c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001e10:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e14:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001e18:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8001e1c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001e20:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e24:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8001e28:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
            .x = Q.w * V.x + Q.y * V.z - Q.z * V.y,
 8001e2c:	ed97 7a08 	vldr	s14, [r7, #32]
 8001e30:	edd7 7a05 	vldr	s15, [r7, #20]
 8001e34:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e38:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8001e3c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001e40:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e44:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e48:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8001e4c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001e50:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e54:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8001e58:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
            .y = Q.w * V.y - Q.x * V.z + Q.z * V.x,
 8001e5c:	ed97 7a08 	vldr	s14, [r7, #32]
 8001e60:	edd7 7a06 	vldr	s15, [r7, #24]
 8001e64:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e68:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8001e6c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001e70:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e74:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001e78:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8001e7c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001e80:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e84:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8001e88:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
            .z = Q.w * V.z + Q.x * V.y - Q.y * V.x,
 8001e8c:	ed97 7a08 	vldr	s14, [r7, #32]
 8001e90:	edd7 7a07 	vldr	s15, [r7, #28]
 8001e94:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e98:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8001e9c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001ea0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ea4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ea8:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8001eac:	edd7 7a05 	vldr	s15, [r7, #20]
 8001eb0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001eb4:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8001eb8:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    return result;
 8001ebc:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8001ec0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001ec4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ec6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001eca:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001ecc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001ece:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001ed0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ed2:	ee06 0a10 	vmov	s12, r0
 8001ed6:	ee06 1a90 	vmov	s13, r1
 8001eda:	ee07 2a10 	vmov	s14, r2
 8001ede:	ee07 3a90 	vmov	s15, r3
}
 8001ee2:	eeb0 0a46 	vmov.f32	s0, s12
 8001ee6:	eef0 0a66 	vmov.f32	s1, s13
 8001eea:	eeb0 1a47 	vmov.f32	s2, s14
 8001eee:	eef0 1a67 	vmov.f32	s3, s15
 8001ef2:	3750      	adds	r7, #80	; 0x50
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bc90      	pop	{r4, r7}
 8001ef8:	4770      	bx	lr

08001efa <FusionQuaternionNormalise>:
static inline FusionQuaternion FusionQuaternionNormalise(const FusionQuaternion quaternion) {
 8001efa:	b590      	push	{r4, r7, lr}
 8001efc:	b093      	sub	sp, #76	; 0x4c
 8001efe:	af00      	add	r7, sp, #0
 8001f00:	eeb0 6a40 	vmov.f32	s12, s0
 8001f04:	eef0 6a60 	vmov.f32	s13, s1
 8001f08:	eeb0 7a41 	vmov.f32	s14, s2
 8001f0c:	eef0 7a61 	vmov.f32	s15, s3
 8001f10:	ed87 6a04 	vstr	s12, [r7, #16]
 8001f14:	edc7 6a05 	vstr	s13, [r7, #20]
 8001f18:	ed87 7a06 	vstr	s14, [r7, #24]
 8001f1c:	edc7 7a07 	vstr	s15, [r7, #28]
    const float magnitudeReciprocal = FusionFastInverseSqrt(Q.w * Q.w + Q.x * Q.x + Q.y * Q.y + Q.z * Q.z);
 8001f20:	ed97 7a04 	vldr	s14, [r7, #16]
 8001f24:	edd7 7a04 	vldr	s15, [r7, #16]
 8001f28:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f2c:	edd7 6a05 	vldr	s13, [r7, #20]
 8001f30:	edd7 7a05 	vldr	s15, [r7, #20]
 8001f34:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f38:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f3c:	edd7 6a06 	vldr	s13, [r7, #24]
 8001f40:	edd7 7a06 	vldr	s15, [r7, #24]
 8001f44:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f48:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f4c:	edd7 6a07 	vldr	s13, [r7, #28]
 8001f50:	edd7 7a07 	vldr	s15, [r7, #28]
 8001f54:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f5c:	eeb0 0a67 	vmov.f32	s0, s15
 8001f60:	f7ff fba4 	bl	80016ac <FusionFastInverseSqrt>
 8001f64:	ed87 0a11 	vstr	s0, [r7, #68]	; 0x44
            .w = Q.w * magnitudeReciprocal,
 8001f68:	ed97 7a04 	vldr	s14, [r7, #16]
 8001f6c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001f70:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8001f74:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            .x = Q.x * magnitudeReciprocal,
 8001f78:	ed97 7a05 	vldr	s14, [r7, #20]
 8001f7c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001f80:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8001f84:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = Q.y * magnitudeReciprocal,
 8001f88:	ed97 7a06 	vldr	s14, [r7, #24]
 8001f8c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001f90:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8001f94:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = Q.z * magnitudeReciprocal,
 8001f98:	ed97 7a07 	vldr	s14, [r7, #28]
 8001f9c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001fa0:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8001fa4:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    return result;
 8001fa8:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8001fac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fb0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001fb2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001fb6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001fb8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001fba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001fbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001fbe:	ee06 0a10 	vmov	s12, r0
 8001fc2:	ee06 1a90 	vmov	s13, r1
 8001fc6:	ee07 2a10 	vmov	s14, r2
 8001fca:	ee07 3a90 	vmov	s15, r3
}
 8001fce:	eeb0 0a46 	vmov.f32	s0, s12
 8001fd2:	eef0 0a66 	vmov.f32	s1, s13
 8001fd6:	eeb0 1a47 	vmov.f32	s2, s14
 8001fda:	eef0 1a67 	vmov.f32	s3, s15
 8001fde:	374c      	adds	r7, #76	; 0x4c
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd90      	pop	{r4, r7, pc}

08001fe4 <FusionAhrsInitialise>:

/**
 * @brief Initialises the AHRS algorithm structure.
 * @param ahrs AHRS algorithm structure.
 */
void FusionAhrsInitialise(FusionAhrs *const ahrs) {
 8001fe4:	b5b0      	push	{r4, r5, r7, lr}
 8001fe6:	b088      	sub	sp, #32
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
    const FusionAhrsSettings settings = {
 8001fec:	4b0a      	ldr	r3, [pc, #40]	; (8002018 <FusionAhrsInitialise+0x34>)
 8001fee:	f107 040c 	add.w	r4, r7, #12
 8001ff2:	461d      	mov	r5, r3
 8001ff4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ff6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ff8:	682b      	ldr	r3, [r5, #0]
 8001ffa:	6023      	str	r3, [r4, #0]
            .gain = 0.5f,
            .accelerationRejection = 90.0f,
            .magneticRejection = 90.0f,
            .rejectionTimeout = 0,
    };
    FusionAhrsSetSettings(ahrs, &settings);
 8001ffc:	f107 030c 	add.w	r3, r7, #12
 8002000:	4619      	mov	r1, r3
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	f000 f868 	bl	80020d8 <FusionAhrsSetSettings>
    FusionAhrsReset(ahrs);
 8002008:	6878      	ldr	r0, [r7, #4]
 800200a:	f000 f807 	bl	800201c <FusionAhrsReset>
}
 800200e:	bf00      	nop
 8002010:	3720      	adds	r7, #32
 8002012:	46bd      	mov	sp, r7
 8002014:	bdb0      	pop	{r4, r5, r7, pc}
 8002016:	bf00      	nop
 8002018:	0801408c 	.word	0x0801408c

0800201c <FusionAhrsReset>:
/**
 * @brief Resets the AHRS algorithm.  This is equivalent to reinitialising the
 * algorithm while maintaining the current settings.
 * @param ahrs AHRS algorithm structure.
 */
void FusionAhrsReset(FusionAhrs *const ahrs) {
 800201c:	b480      	push	{r7}
 800201e:	b091      	sub	sp, #68	; 0x44
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
    ahrs->quaternion = FUSION_IDENTITY_QUATERNION;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800202a:	615a      	str	r2, [r3, #20]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	f04f 0200 	mov.w	r2, #0
 8002032:	619a      	str	r2, [r3, #24]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	f04f 0200 	mov.w	r2, #0
 800203a:	61da      	str	r2, [r3, #28]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	f04f 0200 	mov.w	r2, #0
 8002042:	621a      	str	r2, [r3, #32]
    ahrs->accelerometer = FUSION_VECTOR_ZERO;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	f04f 0200 	mov.w	r2, #0
 800204a:	625a      	str	r2, [r3, #36]	; 0x24
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	f04f 0200 	mov.w	r2, #0
 8002052:	629a      	str	r2, [r3, #40]	; 0x28
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	f04f 0200 	mov.w	r2, #0
 800205a:	62da      	str	r2, [r3, #44]	; 0x2c
    ahrs->initialising = true;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2201      	movs	r2, #1
 8002060:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    ahrs->rampedGain = INITIAL_GAIN;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	4a1b      	ldr	r2, [pc, #108]	; (80020d4 <FusionAhrsReset+0xb8>)
 8002068:	635a      	str	r2, [r3, #52]	; 0x34
    ahrs->halfAccelerometerFeedback = FUSION_VECTOR_ZERO;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	f04f 0200 	mov.w	r2, #0
 8002070:	63da      	str	r2, [r3, #60]	; 0x3c
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	f04f 0200 	mov.w	r2, #0
 8002078:	641a      	str	r2, [r3, #64]	; 0x40
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	f04f 0200 	mov.w	r2, #0
 8002080:	645a      	str	r2, [r3, #68]	; 0x44
    ahrs->halfMagnetometerFeedback = FUSION_VECTOR_ZERO;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	f04f 0200 	mov.w	r2, #0
 8002088:	649a      	str	r2, [r3, #72]	; 0x48
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	f04f 0200 	mov.w	r2, #0
 8002090:	64da      	str	r2, [r3, #76]	; 0x4c
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	f04f 0200 	mov.w	r2, #0
 8002098:	651a      	str	r2, [r3, #80]	; 0x50
    ahrs->accelerometerIgnored = false;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2200      	movs	r2, #0
 800209e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
    ahrs->accelerationRejectionTimer = 0;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2200      	movs	r2, #0
 80020a6:	659a      	str	r2, [r3, #88]	; 0x58
    ahrs->accelerationRejectionTimeout = false;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2200      	movs	r2, #0
 80020ac:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
    ahrs->magnetometerIgnored = false;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2200      	movs	r2, #0
 80020b4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    ahrs->magneticRejectionTimer = 0;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2200      	movs	r2, #0
 80020bc:	661a      	str	r2, [r3, #96]	; 0x60
    ahrs->magneticRejectionTimeout = false;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2200      	movs	r2, #0
 80020c2:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
}
 80020c6:	bf00      	nop
 80020c8:	3744      	adds	r7, #68	; 0x44
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr
 80020d2:	bf00      	nop
 80020d4:	41200000 	.word	0x41200000

080020d8 <FusionAhrsSetSettings>:
/**
 * @brief Sets the AHRS algorithm settings.
 * @param ahrs AHRS algorithm structure.
 * @param settings Settings.
 */
void FusionAhrsSetSettings(FusionAhrs *const ahrs, const FusionAhrsSettings *const settings) {
 80020d8:	b580      	push	{r7, lr}
 80020da:	b082      	sub	sp, #8
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
 80020e0:	6039      	str	r1, [r7, #0]
    ahrs->settings.convention = settings->convention;
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	781a      	ldrb	r2, [r3, #0]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	701a      	strb	r2, [r3, #0]
    ahrs->settings.gain = settings->gain;
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	685a      	ldr	r2, [r3, #4]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	605a      	str	r2, [r3, #4]
    if ((settings->accelerationRejection == 0.0f) || (settings->rejectionTimeout == 0)) {
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	edd3 7a02 	vldr	s15, [r3, #8]
 80020f8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80020fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002100:	d003      	beq.n	800210a <FusionAhrsSetSettings+0x32>
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	691b      	ldr	r3, [r3, #16]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d103      	bne.n	8002112 <FusionAhrsSetSettings+0x3a>
        ahrs->settings.accelerationRejection = FLT_MAX;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	4a38      	ldr	r2, [pc, #224]	; (80021f0 <FusionAhrsSetSettings+0x118>)
 800210e:	609a      	str	r2, [r3, #8]
 8002110:	e01d      	b.n	800214e <FusionAhrsSetSettings+0x76>
    } else {
        ahrs->settings.accelerationRejection = powf(0.5f * sinf(FusionDegreesToRadians(settings->accelerationRejection)), 2);
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	edd3 7a02 	vldr	s15, [r3, #8]
 8002118:	eeb0 0a67 	vmov.f32	s0, s15
 800211c:	f7ff fab2 	bl	8001684 <FusionDegreesToRadians>
 8002120:	eef0 7a40 	vmov.f32	s15, s0
 8002124:	eeb0 0a67 	vmov.f32	s0, s15
 8002128:	f010 fc58 	bl	80129dc <sinf>
 800212c:	eef0 7a40 	vmov.f32	s15, s0
 8002130:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002134:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002138:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800213c:	eeb0 0a67 	vmov.f32	s0, s15
 8002140:	f010 fcc0 	bl	8012ac4 <powf>
 8002144:	eef0 7a40 	vmov.f32	s15, s0
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	edc3 7a02 	vstr	s15, [r3, #8]
    }
    if ((settings->magneticRejection == 0.0f) || (settings->rejectionTimeout == 0)) {
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	edd3 7a03 	vldr	s15, [r3, #12]
 8002154:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002158:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800215c:	d003      	beq.n	8002166 <FusionAhrsSetSettings+0x8e>
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	691b      	ldr	r3, [r3, #16]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d103      	bne.n	800216e <FusionAhrsSetSettings+0x96>
        ahrs->settings.magneticRejection = FLT_MAX;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	4a21      	ldr	r2, [pc, #132]	; (80021f0 <FusionAhrsSetSettings+0x118>)
 800216a:	60da      	str	r2, [r3, #12]
 800216c:	e01d      	b.n	80021aa <FusionAhrsSetSettings+0xd2>
    } else {
        ahrs->settings.magneticRejection = powf(0.5f * sinf(FusionDegreesToRadians(settings->magneticRejection)), 2);
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	edd3 7a03 	vldr	s15, [r3, #12]
 8002174:	eeb0 0a67 	vmov.f32	s0, s15
 8002178:	f7ff fa84 	bl	8001684 <FusionDegreesToRadians>
 800217c:	eef0 7a40 	vmov.f32	s15, s0
 8002180:	eeb0 0a67 	vmov.f32	s0, s15
 8002184:	f010 fc2a 	bl	80129dc <sinf>
 8002188:	eef0 7a40 	vmov.f32	s15, s0
 800218c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002190:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002194:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8002198:	eeb0 0a67 	vmov.f32	s0, s15
 800219c:	f010 fc92 	bl	8012ac4 <powf>
 80021a0:	eef0 7a40 	vmov.f32	s15, s0
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	edc3 7a03 	vstr	s15, [r3, #12]
    }
    ahrs->settings.rejectionTimeout = settings->rejectionTimeout;
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	691a      	ldr	r2, [r3, #16]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	611a      	str	r2, [r3, #16]
    if (ahrs->initialising == false) {
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80021b8:	f083 0301 	eor.w	r3, r3, #1
 80021bc:	b2db      	uxtb	r3, r3
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d003      	beq.n	80021ca <FusionAhrsSetSettings+0xf2>
        ahrs->rampedGain = ahrs->settings.gain;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	685a      	ldr	r2, [r3, #4]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	635a      	str	r2, [r3, #52]	; 0x34
    }
    ahrs->rampedGainStep = (INITIAL_GAIN - ahrs->settings.gain) / INITIALISATION_PERIOD;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	edd3 7a01 	vldr	s15, [r3, #4]
 80021d0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80021d4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80021d8:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 80021dc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
}
 80021e6:	bf00      	nop
 80021e8:	3708      	adds	r7, #8
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	7f7fffff 	.word	0x7f7fffff

080021f4 <FusionAhrsUpdate>:
 * @param gyroscope Gyroscope measurement in degrees per second.
 * @param accelerometer Accelerometer measurement in g.
 * @param magnetometer Magnetometer measurement in arbitrary units.
 * @param deltaTime Delta time in seconds.
 */
void FusionAhrsUpdate(FusionAhrs *const ahrs, const FusionVector gyroscope, const FusionVector accelerometer, const FusionVector magnetometer, const float deltaTime) {
 80021f4:	b590      	push	{r4, r7, lr}
 80021f6:	b0bf      	sub	sp, #252	; 0xfc
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	62f8      	str	r0, [r7, #44]	; 0x2c
 80021fc:	eeb0 5a61 	vmov.f32	s10, s3
 8002200:	eef0 5a42 	vmov.f32	s11, s4
 8002204:	eeb0 6a62 	vmov.f32	s12, s5
 8002208:	eef0 6a43 	vmov.f32	s13, s6
 800220c:	eeb0 7a63 	vmov.f32	s14, s7
 8002210:	eef0 7a44 	vmov.f32	s15, s8
 8002214:	edc7 4a01 	vstr	s9, [r7, #4]
 8002218:	ed87 0a08 	vstr	s0, [r7, #32]
 800221c:	edc7 0a09 	vstr	s1, [r7, #36]	; 0x24
 8002220:	ed87 1a0a 	vstr	s2, [r7, #40]	; 0x28
 8002224:	ed87 5a05 	vstr	s10, [r7, #20]
 8002228:	edc7 5a06 	vstr	s11, [r7, #24]
 800222c:	ed87 6a07 	vstr	s12, [r7, #28]
 8002230:	edc7 6a02 	vstr	s13, [r7, #8]
 8002234:	ed87 7a03 	vstr	s14, [r7, #12]
 8002238:	edc7 7a04 	vstr	s15, [r7, #16]
#define Q ahrs->quaternion.element

    // Store accelerometer
    ahrs->accelerometer = accelerometer;
 800223c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800223e:	3324      	adds	r3, #36	; 0x24
 8002240:	f107 0214 	add.w	r2, r7, #20
 8002244:	ca07      	ldmia	r2, {r0, r1, r2}
 8002246:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    // Ramp down gain during initialisation
    if (ahrs->initialising == true) {
 800224a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800224c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002250:	2b00      	cmp	r3, #0
 8002252:	d025      	beq.n	80022a0 <FusionAhrsUpdate+0xac>
        ahrs->rampedGain -= ahrs->rampedGainStep * deltaTime;
 8002254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002256:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 800225a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800225c:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 8002260:	edd7 7a01 	vldr	s15, [r7, #4]
 8002264:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002268:	ee77 7a67 	vsub.f32	s15, s14, s15
 800226c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800226e:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
        if (ahrs->rampedGain < ahrs->settings.gain) {
 8002272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002274:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8002278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800227a:	edd3 7a01 	vldr	s15, [r3, #4]
 800227e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002282:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002286:	d50b      	bpl.n	80022a0 <FusionAhrsUpdate+0xac>
            ahrs->rampedGain = ahrs->settings.gain;
 8002288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800228a:	685a      	ldr	r2, [r3, #4]
 800228c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800228e:	635a      	str	r2, [r3, #52]	; 0x34
            ahrs->initialising = false;
 8002290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002292:	2200      	movs	r2, #0
 8002294:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
            ahrs->accelerationRejectionTimeout = false;
 8002298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800229a:	2200      	movs	r2, #0
 800229c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
        }
    }

    // Calculate direction of gravity indicated by algorithm
    const FusionVector halfGravity = HalfGravity(ahrs);
 80022a0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80022a2:	f000 fb08 	bl	80028b6 <HalfGravity>
 80022a6:	eef0 6a40 	vmov.f32	s13, s0
 80022aa:	eeb0 7a60 	vmov.f32	s14, s1
 80022ae:	eef0 7a41 	vmov.f32	s15, s2
 80022b2:	edc7 6a25 	vstr	s13, [r7, #148]	; 0x94
 80022b6:	ed87 7a26 	vstr	s14, [r7, #152]	; 0x98
 80022ba:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c

    // Calculate accelerometer feedback
    FusionVector halfAccelerometerFeedback = FUSION_VECTOR_ZERO;
 80022be:	f04f 0300 	mov.w	r3, #0
 80022c2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80022c6:	f04f 0300 	mov.w	r3, #0
 80022ca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80022ce:	f04f 0300 	mov.w	r3, #0
 80022d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    ahrs->accelerometerIgnored = true;
 80022d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022d8:	2201      	movs	r2, #1
 80022da:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
    if (FusionVectorIsZero(accelerometer) == false) {
 80022de:	edd7 6a05 	vldr	s13, [r7, #20]
 80022e2:	ed97 7a06 	vldr	s14, [r7, #24]
 80022e6:	edd7 7a07 	vldr	s15, [r7, #28]
 80022ea:	eeb0 0a66 	vmov.f32	s0, s13
 80022ee:	eef0 0a47 	vmov.f32	s1, s14
 80022f2:	eeb0 1a67 	vmov.f32	s2, s15
 80022f6:	f7ff fa09 	bl	800170c <FusionVectorIsZero>
 80022fa:	4603      	mov	r3, r0
 80022fc:	f083 0301 	eor.w	r3, r3, #1
 8002300:	b2db      	uxtb	r3, r3
 8002302:	2b00      	cmp	r3, #0
 8002304:	f000 809b 	beq.w	800243e <FusionAhrsUpdate+0x24a>

        // Enter acceleration recovery state if acceleration rejection times out
        if (ahrs->accelerationRejectionTimer > ahrs->settings.rejectionTimeout) {
 8002308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800230a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800230c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800230e:	691b      	ldr	r3, [r3, #16]
 8002310:	429a      	cmp	r2, r3
 8002312:	d918      	bls.n	8002346 <FusionAhrsUpdate+0x152>
            const FusionQuaternion quaternion = ahrs->quaternion;
 8002314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002316:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 800231a:	3314      	adds	r3, #20
 800231c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800231e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            FusionAhrsReset(ahrs);
 8002322:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002324:	f7ff fe7a 	bl	800201c <FusionAhrsReset>
            ahrs->quaternion = quaternion;
 8002328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800232a:	f103 0414 	add.w	r4, r3, #20
 800232e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002332:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002334:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            ahrs->accelerationRejectionTimer = 0;
 8002338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800233a:	2200      	movs	r2, #0
 800233c:	659a      	str	r2, [r3, #88]	; 0x58
            ahrs->accelerationRejectionTimeout = true;
 800233e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002340:	2201      	movs	r2, #1
 8002342:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
        }

        // Calculate accelerometer feedback scaled by 0.5
        ahrs->halfAccelerometerFeedback = FusionVectorCrossProduct(FusionVectorNormalise(accelerometer), halfGravity);
 8002346:	edd7 6a05 	vldr	s13, [r7, #20]
 800234a:	ed97 7a06 	vldr	s14, [r7, #24]
 800234e:	edd7 7a07 	vldr	s15, [r7, #28]
 8002352:	eeb0 0a66 	vmov.f32	s0, s13
 8002356:	eef0 0a47 	vmov.f32	s1, s14
 800235a:	eeb0 1a67 	vmov.f32	s2, s15
 800235e:	f7ff fbb5 	bl	8001acc <FusionVectorNormalise>
 8002362:	eef0 6a40 	vmov.f32	s13, s0
 8002366:	eeb0 7a60 	vmov.f32	s14, s1
 800236a:	eef0 7a41 	vmov.f32	s15, s2
 800236e:	edc7 6a28 	vstr	s13, [r7, #160]	; 0xa0
 8002372:	ed87 7a29 	vstr	s14, [r7, #164]	; 0xa4
 8002376:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
 800237a:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 800237c:	ed97 5a25 	vldr	s10, [r7, #148]	; 0x94
 8002380:	edd7 5a26 	vldr	s11, [r7, #152]	; 0x98
 8002384:	ed97 6a27 	vldr	s12, [r7, #156]	; 0x9c
 8002388:	edd7 6a28 	vldr	s13, [r7, #160]	; 0xa0
 800238c:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8002390:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8002394:	eef0 1a45 	vmov.f32	s3, s10
 8002398:	eeb0 2a65 	vmov.f32	s4, s11
 800239c:	eef0 2a46 	vmov.f32	s5, s12
 80023a0:	eeb0 0a66 	vmov.f32	s0, s13
 80023a4:	eef0 0a47 	vmov.f32	s1, s14
 80023a8:	eeb0 1a67 	vmov.f32	s2, s15
 80023ac:	f7ff fade 	bl	800196c <FusionVectorCrossProduct>
 80023b0:	eef0 6a40 	vmov.f32	s13, s0
 80023b4:	eeb0 7a60 	vmov.f32	s14, s1
 80023b8:	eef0 7a41 	vmov.f32	s15, s2
 80023bc:	edc4 6a0f 	vstr	s13, [r4, #60]	; 0x3c
 80023c0:	ed84 7a10 	vstr	s14, [r4, #64]	; 0x40
 80023c4:	edc4 7a11 	vstr	s15, [r4, #68]	; 0x44

        // Ignore accelerometer if acceleration distortion detected
        if ((ahrs->initialising == true) || (FusionVectorMagnitudeSquared(ahrs->halfAccelerometerFeedback) <= ahrs->settings.accelerationRejection)) {
 80023c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023ca:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d118      	bne.n	8002404 <FusionAhrsUpdate+0x210>
 80023d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023d4:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 80023d8:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 80023dc:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80023e0:	eeb0 0a66 	vmov.f32	s0, s13
 80023e4:	eef0 0a47 	vmov.f32	s1, s14
 80023e8:	eeb0 1a67 	vmov.f32	s2, s15
 80023ec:	f7ff fb24 	bl	8001a38 <FusionVectorMagnitudeSquared>
 80023f0:	eeb0 7a40 	vmov.f32	s14, s0
 80023f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023f6:	edd3 7a02 	vldr	s15, [r3, #8]
 80023fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80023fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002402:	d817      	bhi.n	8002434 <FusionAhrsUpdate+0x240>
            halfAccelerometerFeedback = ahrs->halfAccelerometerFeedback;
 8002404:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002406:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800240a:	323c      	adds	r2, #60	; 0x3c
 800240c:	ca07      	ldmia	r2, {r0, r1, r2}
 800240e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            ahrs->accelerometerIgnored = false;
 8002412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002414:	2200      	movs	r2, #0
 8002416:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
            ahrs->accelerationRejectionTimer -= ahrs->accelerationRejectionTimer >= 10 ? 10 : 0;
 800241a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800241c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800241e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002420:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002422:	2b09      	cmp	r3, #9
 8002424:	d901      	bls.n	800242a <FusionAhrsUpdate+0x236>
 8002426:	230a      	movs	r3, #10
 8002428:	e000      	b.n	800242c <FusionAhrsUpdate+0x238>
 800242a:	2300      	movs	r3, #0
 800242c:	1ad2      	subs	r2, r2, r3
 800242e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002430:	659a      	str	r2, [r3, #88]	; 0x58
 8002432:	e004      	b.n	800243e <FusionAhrsUpdate+0x24a>
        } else {
            ahrs->accelerationRejectionTimer++;
 8002434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002436:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002438:	1c5a      	adds	r2, r3, #1
 800243a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800243c:	659a      	str	r2, [r3, #88]	; 0x58
        }
    }

    // Calculate magnetometer feedback
    FusionVector halfMagnetometerFeedback = FUSION_VECTOR_ZERO;
 800243e:	f04f 0300 	mov.w	r3, #0
 8002442:	673b      	str	r3, [r7, #112]	; 0x70
 8002444:	f04f 0300 	mov.w	r3, #0
 8002448:	677b      	str	r3, [r7, #116]	; 0x74
 800244a:	f04f 0300 	mov.w	r3, #0
 800244e:	67bb      	str	r3, [r7, #120]	; 0x78
    ahrs->magnetometerIgnored = true;
 8002450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002452:	2201      	movs	r2, #1
 8002454:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    if (FusionVectorIsZero(magnetometer) == false) {
 8002458:	edd7 6a02 	vldr	s13, [r7, #8]
 800245c:	ed97 7a03 	vldr	s14, [r7, #12]
 8002460:	edd7 7a04 	vldr	s15, [r7, #16]
 8002464:	eeb0 0a66 	vmov.f32	s0, s13
 8002468:	eef0 0a47 	vmov.f32	s1, s14
 800246c:	eeb0 1a67 	vmov.f32	s2, s15
 8002470:	f7ff f94c 	bl	800170c <FusionVectorIsZero>
 8002474:	4603      	mov	r3, r0
 8002476:	f083 0301 	eor.w	r3, r3, #1
 800247a:	b2db      	uxtb	r3, r3
 800247c:	2b00      	cmp	r3, #0
 800247e:	f000 80e6 	beq.w	800264e <FusionAhrsUpdate+0x45a>

        // Set to compass heading if magnetic rejection times out
        ahrs->magneticRejectionTimeout = false;
 8002482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002484:	2200      	movs	r2, #0
 8002486:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
        if (ahrs->magneticRejectionTimer > ahrs->settings.rejectionTimeout) {
 800248a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800248c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800248e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002490:	691b      	ldr	r3, [r3, #16]
 8002492:	429a      	cmp	r2, r3
 8002494:	d92a      	bls.n	80024ec <FusionAhrsUpdate+0x2f8>
            FusionAhrsSetHeading(ahrs, FusionCompassCalculateHeading(ahrs->settings.convention, halfGravity, magnetometer));
 8002496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002498:	781b      	ldrb	r3, [r3, #0]
 800249a:	ed97 5a02 	vldr	s10, [r7, #8]
 800249e:	edd7 5a03 	vldr	s11, [r7, #12]
 80024a2:	ed97 6a04 	vldr	s12, [r7, #16]
 80024a6:	edd7 6a25 	vldr	s13, [r7, #148]	; 0x94
 80024aa:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 80024ae:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80024b2:	eef0 1a45 	vmov.f32	s3, s10
 80024b6:	eeb0 2a65 	vmov.f32	s4, s11
 80024ba:	eef0 2a46 	vmov.f32	s5, s12
 80024be:	eeb0 0a66 	vmov.f32	s0, s13
 80024c2:	eef0 0a47 	vmov.f32	s1, s14
 80024c6:	eeb0 1a67 	vmov.f32	s2, s15
 80024ca:	4618      	mov	r0, r3
 80024cc:	f000 fed0 	bl	8003270 <FusionCompassCalculateHeading>
 80024d0:	eef0 7a40 	vmov.f32	s15, s0
 80024d4:	eeb0 0a67 	vmov.f32	s0, s15
 80024d8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80024da:	f000 fc38 	bl	8002d4e <FusionAhrsSetHeading>
            ahrs->magneticRejectionTimer = 0;
 80024de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024e0:	2200      	movs	r2, #0
 80024e2:	661a      	str	r2, [r3, #96]	; 0x60
            ahrs->magneticRejectionTimeout = true;
 80024e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024e6:	2201      	movs	r2, #1
 80024e8:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
        }

        // Calculate direction of magnetic field indicated by algorithm
        const FusionVector halfMagnetic = HalfMagnetic(ahrs);
 80024ec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80024ee:	f000 fa9f 	bl	8002a30 <HalfMagnetic>
 80024f2:	eef0 6a40 	vmov.f32	s13, s0
 80024f6:	eeb0 7a60 	vmov.f32	s14, s1
 80024fa:	eef0 7a41 	vmov.f32	s15, s2
 80024fe:	edc7 6a0c 	vstr	s13, [r7, #48]	; 0x30
 8002502:	ed87 7a0d 	vstr	s14, [r7, #52]	; 0x34
 8002506:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38

        // Calculate magnetometer feedback scaled by 0.5
        ahrs->halfMagnetometerFeedback = FusionVectorCrossProduct(FusionVectorNormalise(FusionVectorCrossProduct(halfGravity, magnetometer)), halfMagnetic);
 800250a:	ed97 5a02 	vldr	s10, [r7, #8]
 800250e:	edd7 5a03 	vldr	s11, [r7, #12]
 8002512:	ed97 6a04 	vldr	s12, [r7, #16]
 8002516:	edd7 6a25 	vldr	s13, [r7, #148]	; 0x94
 800251a:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800251e:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8002522:	eef0 1a45 	vmov.f32	s3, s10
 8002526:	eeb0 2a65 	vmov.f32	s4, s11
 800252a:	eef0 2a46 	vmov.f32	s5, s12
 800252e:	eeb0 0a66 	vmov.f32	s0, s13
 8002532:	eef0 0a47 	vmov.f32	s1, s14
 8002536:	eeb0 1a67 	vmov.f32	s2, s15
 800253a:	f7ff fa17 	bl	800196c <FusionVectorCrossProduct>
 800253e:	eef0 6a40 	vmov.f32	s13, s0
 8002542:	eeb0 7a60 	vmov.f32	s14, s1
 8002546:	eef0 7a41 	vmov.f32	s15, s2
 800254a:	edc7 6a2b 	vstr	s13, [r7, #172]	; 0xac
 800254e:	ed87 7a2c 	vstr	s14, [r7, #176]	; 0xb0
 8002552:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
 8002556:	edd7 6a2b 	vldr	s13, [r7, #172]	; 0xac
 800255a:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 800255e:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8002562:	eeb0 0a66 	vmov.f32	s0, s13
 8002566:	eef0 0a47 	vmov.f32	s1, s14
 800256a:	eeb0 1a67 	vmov.f32	s2, s15
 800256e:	f7ff faad 	bl	8001acc <FusionVectorNormalise>
 8002572:	eef0 6a40 	vmov.f32	s13, s0
 8002576:	eeb0 7a60 	vmov.f32	s14, s1
 800257a:	eef0 7a41 	vmov.f32	s15, s2
 800257e:	edc7 6a2e 	vstr	s13, [r7, #184]	; 0xb8
 8002582:	ed87 7a2f 	vstr	s14, [r7, #188]	; 0xbc
 8002586:	edc7 7a30 	vstr	s15, [r7, #192]	; 0xc0
 800258a:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 800258c:	ed97 5a0c 	vldr	s10, [r7, #48]	; 0x30
 8002590:	edd7 5a0d 	vldr	s11, [r7, #52]	; 0x34
 8002594:	ed97 6a0e 	vldr	s12, [r7, #56]	; 0x38
 8002598:	edd7 6a2e 	vldr	s13, [r7, #184]	; 0xb8
 800259c:	ed97 7a2f 	vldr	s14, [r7, #188]	; 0xbc
 80025a0:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 80025a4:	eef0 1a45 	vmov.f32	s3, s10
 80025a8:	eeb0 2a65 	vmov.f32	s4, s11
 80025ac:	eef0 2a46 	vmov.f32	s5, s12
 80025b0:	eeb0 0a66 	vmov.f32	s0, s13
 80025b4:	eef0 0a47 	vmov.f32	s1, s14
 80025b8:	eeb0 1a67 	vmov.f32	s2, s15
 80025bc:	f7ff f9d6 	bl	800196c <FusionVectorCrossProduct>
 80025c0:	eef0 6a40 	vmov.f32	s13, s0
 80025c4:	eeb0 7a60 	vmov.f32	s14, s1
 80025c8:	eef0 7a41 	vmov.f32	s15, s2
 80025cc:	edc4 6a12 	vstr	s13, [r4, #72]	; 0x48
 80025d0:	ed84 7a13 	vstr	s14, [r4, #76]	; 0x4c
 80025d4:	edc4 7a14 	vstr	s15, [r4, #80]	; 0x50

        // Ignore magnetometer if magnetic distortion detected
        if ((ahrs->initialising == true) || (FusionVectorMagnitudeSquared(ahrs->halfMagnetometerFeedback) <= ahrs->settings.magneticRejection)) {
 80025d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025da:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d118      	bne.n	8002614 <FusionAhrsUpdate+0x420>
 80025e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025e4:	edd3 6a12 	vldr	s13, [r3, #72]	; 0x48
 80025e8:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 80025ec:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 80025f0:	eeb0 0a66 	vmov.f32	s0, s13
 80025f4:	eef0 0a47 	vmov.f32	s1, s14
 80025f8:	eeb0 1a67 	vmov.f32	s2, s15
 80025fc:	f7ff fa1c 	bl	8001a38 <FusionVectorMagnitudeSquared>
 8002600:	eeb0 7a40 	vmov.f32	s14, s0
 8002604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002606:	edd3 7a03 	vldr	s15, [r3, #12]
 800260a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800260e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002612:	d817      	bhi.n	8002644 <FusionAhrsUpdate+0x450>
            halfMagnetometerFeedback = ahrs->halfMagnetometerFeedback;
 8002614:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002616:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800261a:	3248      	adds	r2, #72	; 0x48
 800261c:	ca07      	ldmia	r2, {r0, r1, r2}
 800261e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            ahrs->magnetometerIgnored = false;
 8002622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002624:	2200      	movs	r2, #0
 8002626:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
            ahrs->magneticRejectionTimer -= ahrs->magneticRejectionTimer >= 10 ? 10 : 0;
 800262a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800262c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800262e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002630:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002632:	2b09      	cmp	r3, #9
 8002634:	d901      	bls.n	800263a <FusionAhrsUpdate+0x446>
 8002636:	230a      	movs	r3, #10
 8002638:	e000      	b.n	800263c <FusionAhrsUpdate+0x448>
 800263a:	2300      	movs	r3, #0
 800263c:	1ad2      	subs	r2, r2, r3
 800263e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002640:	661a      	str	r2, [r3, #96]	; 0x60
 8002642:	e004      	b.n	800264e <FusionAhrsUpdate+0x45a>
        } else {
            ahrs->magneticRejectionTimer++;
 8002644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002646:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002648:	1c5a      	adds	r2, r3, #1
 800264a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800264c:	661a      	str	r2, [r3, #96]	; 0x60
        }
    }

    // Convert gyroscope to radians per second scaled by 0.5
    const FusionVector halfGyroscope = FusionVectorMultiplyScalar(gyroscope, FusionDegreesToRadians(0.5f));
 800264e:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8002652:	f7ff f817 	bl	8001684 <FusionDegreesToRadians>
 8002656:	eeb0 6a40 	vmov.f32	s12, s0
 800265a:	edd7 6a08 	vldr	s13, [r7, #32]
 800265e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002662:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002666:	eef0 1a46 	vmov.f32	s3, s12
 800266a:	eeb0 0a66 	vmov.f32	s0, s13
 800266e:	eef0 0a47 	vmov.f32	s1, s14
 8002672:	eeb0 1a67 	vmov.f32	s2, s15
 8002676:	f7ff f8e7 	bl	8001848 <FusionVectorMultiplyScalar>
 800267a:	eef0 6a40 	vmov.f32	s13, s0
 800267e:	eeb0 7a60 	vmov.f32	s14, s1
 8002682:	eef0 7a41 	vmov.f32	s15, s2
 8002686:	edc7 6a16 	vstr	s13, [r7, #88]	; 0x58
 800268a:	ed87 7a17 	vstr	s14, [r7, #92]	; 0x5c
 800268e:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60

    // Apply feedback to gyroscope
    const FusionVector adjustedHalfGyroscope = FusionVectorAdd(halfGyroscope, FusionVectorMultiplyScalar(FusionVectorAdd(halfAccelerometerFeedback, halfMagnetometerFeedback), ahrs->rampedGain));
 8002692:	ed97 5a1c 	vldr	s10, [r7, #112]	; 0x70
 8002696:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 800269a:	ed97 6a1e 	vldr	s12, [r7, #120]	; 0x78
 800269e:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 80026a2:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 80026a6:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 80026aa:	eef0 1a45 	vmov.f32	s3, s10
 80026ae:	eeb0 2a65 	vmov.f32	s4, s11
 80026b2:	eef0 2a46 	vmov.f32	s5, s12
 80026b6:	eeb0 0a66 	vmov.f32	s0, s13
 80026ba:	eef0 0a47 	vmov.f32	s1, s14
 80026be:	eeb0 1a67 	vmov.f32	s2, s15
 80026c2:	f7ff f853 	bl	800176c <FusionVectorAdd>
 80026c6:	eef0 6a40 	vmov.f32	s13, s0
 80026ca:	eeb0 7a60 	vmov.f32	s14, s1
 80026ce:	eef0 7a41 	vmov.f32	s15, s2
 80026d2:	edc7 6a31 	vstr	s13, [r7, #196]	; 0xc4
 80026d6:	ed87 7a32 	vstr	s14, [r7, #200]	; 0xc8
 80026da:	edc7 7a33 	vstr	s15, [r7, #204]	; 0xcc
 80026de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026e0:	ed93 6a0d 	vldr	s12, [r3, #52]	; 0x34
 80026e4:	edd7 6a31 	vldr	s13, [r7, #196]	; 0xc4
 80026e8:	ed97 7a32 	vldr	s14, [r7, #200]	; 0xc8
 80026ec:	edd7 7a33 	vldr	s15, [r7, #204]	; 0xcc
 80026f0:	eef0 1a46 	vmov.f32	s3, s12
 80026f4:	eeb0 0a66 	vmov.f32	s0, s13
 80026f8:	eef0 0a47 	vmov.f32	s1, s14
 80026fc:	eeb0 1a67 	vmov.f32	s2, s15
 8002700:	f7ff f8a2 	bl	8001848 <FusionVectorMultiplyScalar>
 8002704:	eef0 6a40 	vmov.f32	s13, s0
 8002708:	eeb0 7a60 	vmov.f32	s14, s1
 800270c:	eef0 7a41 	vmov.f32	s15, s2
 8002710:	edc7 6a34 	vstr	s13, [r7, #208]	; 0xd0
 8002714:	ed87 7a35 	vstr	s14, [r7, #212]	; 0xd4
 8002718:	edc7 7a36 	vstr	s15, [r7, #216]	; 0xd8
 800271c:	ed97 5a34 	vldr	s10, [r7, #208]	; 0xd0
 8002720:	edd7 5a35 	vldr	s11, [r7, #212]	; 0xd4
 8002724:	ed97 6a36 	vldr	s12, [r7, #216]	; 0xd8
 8002728:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 800272c:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8002730:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8002734:	eef0 1a45 	vmov.f32	s3, s10
 8002738:	eeb0 2a65 	vmov.f32	s4, s11
 800273c:	eef0 2a46 	vmov.f32	s5, s12
 8002740:	eeb0 0a66 	vmov.f32	s0, s13
 8002744:	eef0 0a47 	vmov.f32	s1, s14
 8002748:	eeb0 1a67 	vmov.f32	s2, s15
 800274c:	f7ff f80e 	bl	800176c <FusionVectorAdd>
 8002750:	eef0 6a40 	vmov.f32	s13, s0
 8002754:	eeb0 7a60 	vmov.f32	s14, s1
 8002758:	eef0 7a41 	vmov.f32	s15, s2
 800275c:	edc7 6a13 	vstr	s13, [r7, #76]	; 0x4c
 8002760:	ed87 7a14 	vstr	s14, [r7, #80]	; 0x50
 8002764:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    // Integrate rate of change of quaternion
    ahrs->quaternion = FusionQuaternionAdd(ahrs->quaternion, FusionQuaternionMultiplyVector(ahrs->quaternion, FusionVectorMultiplyScalar(adjustedHalfGyroscope, deltaTime)));
 8002768:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 800276c:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8002770:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002774:	edd7 1a01 	vldr	s3, [r7, #4]
 8002778:	eeb0 0a66 	vmov.f32	s0, s13
 800277c:	eef0 0a47 	vmov.f32	s1, s14
 8002780:	eeb0 1a67 	vmov.f32	s2, s15
 8002784:	f7ff f860 	bl	8001848 <FusionVectorMultiplyScalar>
 8002788:	eef0 6a40 	vmov.f32	s13, s0
 800278c:	eeb0 7a60 	vmov.f32	s14, s1
 8002790:	eef0 7a41 	vmov.f32	s15, s2
 8002794:	edc7 6a37 	vstr	s13, [r7, #220]	; 0xdc
 8002798:	ed87 7a38 	vstr	s14, [r7, #224]	; 0xe0
 800279c:	edc7 7a39 	vstr	s15, [r7, #228]	; 0xe4
 80027a0:	edd7 4a37 	vldr	s9, [r7, #220]	; 0xdc
 80027a4:	ed97 5a38 	vldr	s10, [r7, #224]	; 0xe0
 80027a8:	edd7 5a39 	vldr	s11, [r7, #228]	; 0xe4
 80027ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027ae:	ed93 6a05 	vldr	s12, [r3, #20]
 80027b2:	edd3 6a06 	vldr	s13, [r3, #24]
 80027b6:	ed93 7a07 	vldr	s14, [r3, #28]
 80027ba:	edd3 7a08 	vldr	s15, [r3, #32]
 80027be:	eeb0 2a64 	vmov.f32	s4, s9
 80027c2:	eef0 2a45 	vmov.f32	s5, s10
 80027c6:	eeb0 3a65 	vmov.f32	s6, s11
 80027ca:	eeb0 0a46 	vmov.f32	s0, s12
 80027ce:	eef0 0a66 	vmov.f32	s1, s13
 80027d2:	eeb0 1a47 	vmov.f32	s2, s14
 80027d6:	eef0 1a67 	vmov.f32	s3, s15
 80027da:	f7ff faee 	bl	8001dba <FusionQuaternionMultiplyVector>
 80027de:	eeb0 6a40 	vmov.f32	s12, s0
 80027e2:	eef0 6a60 	vmov.f32	s13, s1
 80027e6:	eeb0 7a41 	vmov.f32	s14, s2
 80027ea:	eef0 7a61 	vmov.f32	s15, s3
 80027ee:	ed87 6a3a 	vstr	s12, [r7, #232]	; 0xe8
 80027f2:	edc7 6a3b 	vstr	s13, [r7, #236]	; 0xec
 80027f6:	ed87 7a3c 	vstr	s14, [r7, #240]	; 0xf0
 80027fa:	edc7 7a3d 	vstr	s15, [r7, #244]	; 0xf4
 80027fe:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 8002800:	ed97 4a3a 	vldr	s8, [r7, #232]	; 0xe8
 8002804:	edd7 4a3b 	vldr	s9, [r7, #236]	; 0xec
 8002808:	ed97 5a3c 	vldr	s10, [r7, #240]	; 0xf0
 800280c:	edd7 5a3d 	vldr	s11, [r7, #244]	; 0xf4
 8002810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002812:	ed93 6a05 	vldr	s12, [r3, #20]
 8002816:	edd3 6a06 	vldr	s13, [r3, #24]
 800281a:	ed93 7a07 	vldr	s14, [r3, #28]
 800281e:	edd3 7a08 	vldr	s15, [r3, #32]
 8002822:	eeb0 2a44 	vmov.f32	s4, s8
 8002826:	eef0 2a64 	vmov.f32	s5, s9
 800282a:	eeb0 3a45 	vmov.f32	s6, s10
 800282e:	eef0 3a65 	vmov.f32	s7, s11
 8002832:	eeb0 0a46 	vmov.f32	s0, s12
 8002836:	eef0 0a66 	vmov.f32	s1, s13
 800283a:	eeb0 1a47 	vmov.f32	s2, s14
 800283e:	eef0 1a67 	vmov.f32	s3, s15
 8002842:	f7ff f996 	bl	8001b72 <FusionQuaternionAdd>
 8002846:	eeb0 6a40 	vmov.f32	s12, s0
 800284a:	eef0 6a60 	vmov.f32	s13, s1
 800284e:	eeb0 7a41 	vmov.f32	s14, s2
 8002852:	eef0 7a61 	vmov.f32	s15, s3
 8002856:	ed84 6a05 	vstr	s12, [r4, #20]
 800285a:	edc4 6a06 	vstr	s13, [r4, #24]
 800285e:	ed84 7a07 	vstr	s14, [r4, #28]
 8002862:	edc4 7a08 	vstr	s15, [r4, #32]

    // Normalise quaternion
    ahrs->quaternion = FusionQuaternionNormalise(ahrs->quaternion);
 8002866:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 8002868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800286a:	ed93 6a05 	vldr	s12, [r3, #20]
 800286e:	edd3 6a06 	vldr	s13, [r3, #24]
 8002872:	ed93 7a07 	vldr	s14, [r3, #28]
 8002876:	edd3 7a08 	vldr	s15, [r3, #32]
 800287a:	eeb0 0a46 	vmov.f32	s0, s12
 800287e:	eef0 0a66 	vmov.f32	s1, s13
 8002882:	eeb0 1a47 	vmov.f32	s2, s14
 8002886:	eef0 1a67 	vmov.f32	s3, s15
 800288a:	f7ff fb36 	bl	8001efa <FusionQuaternionNormalise>
 800288e:	eeb0 6a40 	vmov.f32	s12, s0
 8002892:	eef0 6a60 	vmov.f32	s13, s1
 8002896:	eeb0 7a41 	vmov.f32	s14, s2
 800289a:	eef0 7a61 	vmov.f32	s15, s3
 800289e:	ed84 6a05 	vstr	s12, [r4, #20]
 80028a2:	edc4 6a06 	vstr	s13, [r4, #24]
 80028a6:	ed84 7a07 	vstr	s14, [r4, #28]
 80028aa:	edc4 7a08 	vstr	s15, [r4, #32]
#undef Q
}
 80028ae:	bf00      	nop
 80028b0:	37fc      	adds	r7, #252	; 0xfc
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd90      	pop	{r4, r7, pc}

080028b6 <HalfGravity>:
/**
 * @brief Returns the direction of gravity scaled by 0.5.
 * @param ahrs AHRS algorithm structure.
 * @return Direction of gravity scaled by 0.5.
 */
static FusionVector HalfGravity(const FusionAhrs *const ahrs) {
 80028b6:	b480      	push	{r7}
 80028b8:	b093      	sub	sp, #76	; 0x4c
 80028ba:	af00      	add	r7, sp, #0
 80028bc:	6178      	str	r0, [r7, #20]
#define Q ahrs->quaternion.element
    switch (ahrs->settings.convention) {
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	781b      	ldrb	r3, [r3, #0]
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	dc02      	bgt.n	80028cc <HalfGravity+0x16>
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	da03      	bge.n	80028d2 <HalfGravity+0x1c>
 80028ca:	e094      	b.n	80029f6 <HalfGravity+0x140>
 80028cc:	2b02      	cmp	r3, #2
 80028ce:	d048      	beq.n	8002962 <HalfGravity+0xac>
 80028d0:	e091      	b.n	80029f6 <HalfGravity+0x140>
        case FusionConventionNwu:
        case FusionConventionEnu: {
            const FusionVector halfGravity = {.axis = {
                    .x = Q.x * Q.z - Q.w * Q.y,
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	ed93 7a06 	vldr	s14, [r3, #24]
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	edd3 7a08 	vldr	s15, [r3, #32]
 80028de:	ee27 7a27 	vmul.f32	s14, s14, s15
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	edd3 6a05 	vldr	s13, [r3, #20]
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	edd3 7a07 	vldr	s15, [r3, #28]
 80028ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80028f2:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfGravity = {.axis = {
 80028f6:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                    .y = Q.y * Q.z + Q.w * Q.x,
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	ed93 7a07 	vldr	s14, [r3, #28]
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	edd3 7a08 	vldr	s15, [r3, #32]
 8002906:	ee27 7a27 	vmul.f32	s14, s14, s15
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	edd3 6a05 	vldr	s13, [r3, #20]
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	edd3 7a06 	vldr	s15, [r3, #24]
 8002916:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800291a:	ee77 7a27 	vadd.f32	s15, s14, s15
            const FusionVector halfGravity = {.axis = {
 800291e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
                    .z = Q.w * Q.w - 0.5f + Q.z * Q.z,
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	ed93 7a05 	vldr	s14, [r3, #20]
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	edd3 7a05 	vldr	s15, [r3, #20]
 800292e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002932:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002936:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	edd3 6a08 	vldr	s13, [r3, #32]
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	edd3 7a08 	vldr	s15, [r3, #32]
 8002946:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800294a:	ee77 7a27 	vadd.f32	s15, s14, s15
            const FusionVector halfGravity = {.axis = {
 800294e:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            }}; // third column of transposed rotation matrix scaled by 0.5
            return halfGravity;
 8002952:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002956:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800295a:	ca07      	ldmia	r2, {r0, r1, r2}
 800295c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002960:	e052      	b.n	8002a08 <HalfGravity+0x152>
        }
        case FusionConventionNed: {
            const FusionVector halfGravity = {.axis = {
                    .x = Q.w * Q.y - Q.x * Q.z,
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	ed93 7a05 	vldr	s14, [r3, #20]
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	edd3 7a07 	vldr	s15, [r3, #28]
 800296e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	edd3 6a06 	vldr	s13, [r3, #24]
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	edd3 7a08 	vldr	s15, [r3, #32]
 800297e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002982:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfGravity = {.axis = {
 8002986:	edc7 7a06 	vstr	s15, [r7, #24]
                    .y = -1.0f * (Q.y * Q.z + Q.w * Q.x),
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	ed93 7a07 	vldr	s14, [r3, #28]
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	edd3 7a08 	vldr	s15, [r3, #32]
 8002996:	ee27 7a27 	vmul.f32	s14, s14, s15
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	edd3 6a05 	vldr	s13, [r3, #20]
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	edd3 7a06 	vldr	s15, [r3, #24]
 80029a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029ae:	eef1 7a67 	vneg.f32	s15, s15
            const FusionVector halfGravity = {.axis = {
 80029b2:	edc7 7a07 	vstr	s15, [r7, #28]
                    .z = 0.5f - Q.w * Q.w - Q.z * Q.z,
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	ed93 7a05 	vldr	s14, [r3, #20]
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	edd3 7a05 	vldr	s15, [r3, #20]
 80029c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029c6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80029ca:	ee37 7a67 	vsub.f32	s14, s14, s15
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	edd3 6a08 	vldr	s13, [r3, #32]
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	edd3 7a08 	vldr	s15, [r3, #32]
 80029da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029de:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfGravity = {.axis = {
 80029e2:	edc7 7a08 	vstr	s15, [r7, #32]
            }}; // third column of transposed rotation matrix scaled by -0.5
            return halfGravity;
 80029e6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80029ea:	f107 0218 	add.w	r2, r7, #24
 80029ee:	ca07      	ldmia	r2, {r0, r1, r2}
 80029f0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80029f4:	e008      	b.n	8002a08 <HalfGravity+0x152>
        }
    }
    return FUSION_VECTOR_ZERO; // avoid compiler warning
 80029f6:	f04f 0300 	mov.w	r3, #0
 80029fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80029fc:	f04f 0300 	mov.w	r3, #0
 8002a00:	643b      	str	r3, [r7, #64]	; 0x40
 8002a02:	f04f 0300 	mov.w	r3, #0
 8002a06:	647b      	str	r3, [r7, #68]	; 0x44
#undef Q
}
 8002a08:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002a0a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002a0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a0e:	ee06 1a90 	vmov	s13, r1
 8002a12:	ee07 2a10 	vmov	s14, r2
 8002a16:	ee07 3a90 	vmov	s15, r3
 8002a1a:	eeb0 0a66 	vmov.f32	s0, s13
 8002a1e:	eef0 0a47 	vmov.f32	s1, s14
 8002a22:	eeb0 1a67 	vmov.f32	s2, s15
 8002a26:	374c      	adds	r7, #76	; 0x4c
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2e:	4770      	bx	lr

08002a30 <HalfMagnetic>:
/**
 * @brief Returns the direction of the magnetic field scaled by 0.5.
 * @param ahrs AHRS algorithm structure.
 * @return Direction of the magnetic field scaled by 0.5.
 */
static FusionVector HalfMagnetic(const FusionAhrs *const ahrs) {
 8002a30:	b480      	push	{r7}
 8002a32:	b097      	sub	sp, #92	; 0x5c
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6178      	str	r0, [r7, #20]
#define Q ahrs->quaternion.element
    switch (ahrs->settings.convention) {
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	781b      	ldrb	r3, [r3, #0]
 8002a3c:	2b02      	cmp	r3, #2
 8002a3e:	f000 809a 	beq.w	8002b76 <HalfMagnetic+0x146>
 8002a42:	2b02      	cmp	r3, #2
 8002a44:	f300 80e1 	bgt.w	8002c0a <HalfMagnetic+0x1da>
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d002      	beq.n	8002a52 <HalfMagnetic+0x22>
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d048      	beq.n	8002ae2 <HalfMagnetic+0xb2>
 8002a50:	e0db      	b.n	8002c0a <HalfMagnetic+0x1da>
        case FusionConventionNwu: {
            const FusionVector halfMagnetic = {.axis = {
                    .x = Q.x * Q.y + Q.w * Q.z,
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	ed93 7a06 	vldr	s14, [r3, #24]
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	edd3 7a07 	vldr	s15, [r3, #28]
 8002a5e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	edd3 6a05 	vldr	s13, [r3, #20]
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	edd3 7a08 	vldr	s15, [r3, #32]
 8002a6e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a72:	ee77 7a27 	vadd.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 8002a76:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
                    .y = Q.w * Q.w - 0.5f + Q.y * Q.y,
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	ed93 7a05 	vldr	s14, [r3, #20]
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	edd3 7a05 	vldr	s15, [r3, #20]
 8002a86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a8a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002a8e:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	edd3 6a07 	vldr	s13, [r3, #28]
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	edd3 7a07 	vldr	s15, [r3, #28]
 8002a9e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002aa2:	ee77 7a27 	vadd.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 8002aa6:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
                    .z = Q.y * Q.z - Q.w * Q.x,
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	ed93 7a07 	vldr	s14, [r3, #28]
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	edd3 7a08 	vldr	s15, [r3, #32]
 8002ab6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	edd3 6a05 	vldr	s13, [r3, #20]
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	edd3 7a06 	vldr	s15, [r3, #24]
 8002ac6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002aca:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 8002ace:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
            }}; // second column of transposed rotation matrix scaled by 0.5
            return halfMagnetic;
 8002ad2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002ad6:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002ada:	ca07      	ldmia	r2, {r0, r1, r2}
 8002adc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002ae0:	e09c      	b.n	8002c1c <HalfMagnetic+0x1ec>
        }
        case FusionConventionEnu: {
            const FusionVector halfMagnetic = {.axis = {
                    .x = 0.5f - Q.w * Q.w - Q.x * Q.x,
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	ed93 7a05 	vldr	s14, [r3, #20]
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	edd3 7a05 	vldr	s15, [r3, #20]
 8002aee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002af2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002af6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	edd3 6a06 	vldr	s13, [r3, #24]
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	edd3 7a06 	vldr	s15, [r3, #24]
 8002b06:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b0a:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 8002b0e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
                    .y = Q.w * Q.z - Q.x * Q.y,
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	ed93 7a05 	vldr	s14, [r3, #20]
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	edd3 7a08 	vldr	s15, [r3, #32]
 8002b1e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	edd3 6a06 	vldr	s13, [r3, #24]
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	edd3 7a07 	vldr	s15, [r3, #28]
 8002b2e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b32:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 8002b36:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
                    .z = -1.0f * (Q.x * Q.z + Q.w * Q.y),
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	ed93 7a06 	vldr	s14, [r3, #24]
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	edd3 7a08 	vldr	s15, [r3, #32]
 8002b46:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	edd3 6a05 	vldr	s13, [r3, #20]
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	edd3 7a07 	vldr	s15, [r3, #28]
 8002b56:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b5e:	eef1 7a67 	vneg.f32	s15, s15
            const FusionVector halfMagnetic = {.axis = {
 8002b62:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
            }}; // first column of transposed rotation matrix scaled by -0.5
            return halfMagnetic;
 8002b66:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002b6a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002b6e:	ca07      	ldmia	r2, {r0, r1, r2}
 8002b70:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002b74:	e052      	b.n	8002c1c <HalfMagnetic+0x1ec>
        }
        case FusionConventionNed: {
            const FusionVector halfMagnetic = {.axis = {
                    .x = -1.0f * (Q.x * Q.y + Q.w * Q.z),
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	ed93 7a06 	vldr	s14, [r3, #24]
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	edd3 7a07 	vldr	s15, [r3, #28]
 8002b82:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	edd3 6a05 	vldr	s13, [r3, #20]
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	edd3 7a08 	vldr	s15, [r3, #32]
 8002b92:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b9a:	eef1 7a67 	vneg.f32	s15, s15
            const FusionVector halfMagnetic = {.axis = {
 8002b9e:	edc7 7a07 	vstr	s15, [r7, #28]
                    .y = 0.5f - Q.w * Q.w - Q.y * Q.y,
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	ed93 7a05 	vldr	s14, [r3, #20]
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	edd3 7a05 	vldr	s15, [r3, #20]
 8002bae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bb2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002bb6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	edd3 6a07 	vldr	s13, [r3, #28]
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	edd3 7a07 	vldr	s15, [r3, #28]
 8002bc6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002bca:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 8002bce:	edc7 7a08 	vstr	s15, [r7, #32]
                    .z = Q.w * Q.x - Q.y * Q.z,
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	ed93 7a05 	vldr	s14, [r3, #20]
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	edd3 7a06 	vldr	s15, [r3, #24]
 8002bde:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	edd3 6a07 	vldr	s13, [r3, #28]
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	edd3 7a08 	vldr	s15, [r3, #32]
 8002bee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002bf2:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 8002bf6:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            }}; // second column of transposed rotation matrix scaled by -0.5
            return halfMagnetic;
 8002bfa:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002bfe:	f107 021c 	add.w	r2, r7, #28
 8002c02:	ca07      	ldmia	r2, {r0, r1, r2}
 8002c04:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002c08:	e008      	b.n	8002c1c <HalfMagnetic+0x1ec>
        }
    }
    return FUSION_VECTOR_ZERO; // avoid compiler warning
 8002c0a:	f04f 0300 	mov.w	r3, #0
 8002c0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c10:	f04f 0300 	mov.w	r3, #0
 8002c14:	653b      	str	r3, [r7, #80]	; 0x50
 8002c16:	f04f 0300 	mov.w	r3, #0
 8002c1a:	657b      	str	r3, [r7, #84]	; 0x54
#undef Q
}
 8002c1c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002c1e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002c20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c22:	ee06 1a90 	vmov	s13, r1
 8002c26:	ee07 2a10 	vmov	s14, r2
 8002c2a:	ee07 3a90 	vmov	s15, r3
 8002c2e:	eeb0 0a66 	vmov.f32	s0, s13
 8002c32:	eef0 0a47 	vmov.f32	s1, s14
 8002c36:	eeb0 1a67 	vmov.f32	s2, s15
 8002c3a:	375c      	adds	r7, #92	; 0x5c
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c42:	4770      	bx	lr

08002c44 <FusionAhrsUpdateNoMagnetometer>:
 * @param ahrs AHRS algorithm structure.
 * @param gyroscope Gyroscope measurement in degrees per second.
 * @param accelerometer Accelerometer measurement in g.
 * @param deltaTime Delta time in seconds.
 */
void FusionAhrsUpdateNoMagnetometer(FusionAhrs *const ahrs, const FusionVector gyroscope, const FusionVector accelerometer, const float deltaTime) {
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b08c      	sub	sp, #48	; 0x30
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	61f8      	str	r0, [r7, #28]
 8002c4c:	eeb0 5a40 	vmov.f32	s10, s0
 8002c50:	eef0 5a60 	vmov.f32	s11, s1
 8002c54:	eeb0 6a41 	vmov.f32	s12, s2
 8002c58:	eef0 6a61 	vmov.f32	s13, s3
 8002c5c:	eeb0 7a42 	vmov.f32	s14, s4
 8002c60:	eef0 7a62 	vmov.f32	s15, s5
 8002c64:	ed87 3a00 	vstr	s6, [r7]
 8002c68:	ed87 5a04 	vstr	s10, [r7, #16]
 8002c6c:	edc7 5a05 	vstr	s11, [r7, #20]
 8002c70:	ed87 6a06 	vstr	s12, [r7, #24]
 8002c74:	edc7 6a01 	vstr	s13, [r7, #4]
 8002c78:	ed87 7a02 	vstr	s14, [r7, #8]
 8002c7c:	edc7 7a03 	vstr	s15, [r7, #12]

    // Update AHRS algorithm
    FusionAhrsUpdate(ahrs, gyroscope, accelerometer, FUSION_VECTOR_ZERO, deltaTime);
 8002c80:	f04f 0300 	mov.w	r3, #0
 8002c84:	627b      	str	r3, [r7, #36]	; 0x24
 8002c86:	f04f 0300 	mov.w	r3, #0
 8002c8a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c8c:	f04f 0300 	mov.w	r3, #0
 8002c90:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c92:	ed97 3a09 	vldr	s6, [r7, #36]	; 0x24
 8002c96:	edd7 3a0a 	vldr	s7, [r7, #40]	; 0x28
 8002c9a:	ed97 4a0b 	vldr	s8, [r7, #44]	; 0x2c
 8002c9e:	ed97 5a01 	vldr	s10, [r7, #4]
 8002ca2:	edd7 5a02 	vldr	s11, [r7, #8]
 8002ca6:	ed97 6a03 	vldr	s12, [r7, #12]
 8002caa:	edd7 6a04 	vldr	s13, [r7, #16]
 8002cae:	ed97 7a05 	vldr	s14, [r7, #20]
 8002cb2:	edd7 7a06 	vldr	s15, [r7, #24]
 8002cb6:	edd7 4a00 	vldr	s9, [r7]
 8002cba:	eef0 1a45 	vmov.f32	s3, s10
 8002cbe:	eeb0 2a65 	vmov.f32	s4, s11
 8002cc2:	eef0 2a46 	vmov.f32	s5, s12
 8002cc6:	eeb0 0a66 	vmov.f32	s0, s13
 8002cca:	eef0 0a47 	vmov.f32	s1, s14
 8002cce:	eeb0 1a67 	vmov.f32	s2, s15
 8002cd2:	69f8      	ldr	r0, [r7, #28]
 8002cd4:	f7ff fa8e 	bl	80021f4 <FusionAhrsUpdate>

    // Zero heading during initialisation
    if ((ahrs->initialising == true) && (ahrs->accelerationRejectionTimeout == false)) {
 8002cd8:	69fb      	ldr	r3, [r7, #28]
 8002cda:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d00c      	beq.n	8002cfc <FusionAhrsUpdateNoMagnetometer+0xb8>
 8002ce2:	69fb      	ldr	r3, [r7, #28]
 8002ce4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002ce8:	f083 0301 	eor.w	r3, r3, #1
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d004      	beq.n	8002cfc <FusionAhrsUpdateNoMagnetometer+0xb8>
        FusionAhrsSetHeading(ahrs, 0.0f);
 8002cf2:	ed9f 0a04 	vldr	s0, [pc, #16]	; 8002d04 <FusionAhrsUpdateNoMagnetometer+0xc0>
 8002cf6:	69f8      	ldr	r0, [r7, #28]
 8002cf8:	f000 f829 	bl	8002d4e <FusionAhrsSetHeading>
    }
}
 8002cfc:	bf00      	nop
 8002cfe:	3730      	adds	r7, #48	; 0x30
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}
 8002d04:	00000000 	.word	0x00000000

08002d08 <FusionAhrsGetQuaternion>:
/**
 * @brief Returns the quaternion describing the sensor relative to the Earth.
 * @param ahrs AHRS algorithm structure.
 * @return Quaternion describing the sensor relative to the Earth.
 */
FusionQuaternion FusionAhrsGetQuaternion(const FusionAhrs *const ahrs) {
 8002d08:	b490      	push	{r4, r7}
 8002d0a:	b08a      	sub	sp, #40	; 0x28
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6178      	str	r0, [r7, #20]
    return ahrs->quaternion;
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	f107 0418 	add.w	r4, r7, #24
 8002d16:	3314      	adds	r3, #20
 8002d18:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002d1a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002d1e:	69b8      	ldr	r0, [r7, #24]
 8002d20:	69f9      	ldr	r1, [r7, #28]
 8002d22:	6a3a      	ldr	r2, [r7, #32]
 8002d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d26:	ee06 0a10 	vmov	s12, r0
 8002d2a:	ee06 1a90 	vmov	s13, r1
 8002d2e:	ee07 2a10 	vmov	s14, r2
 8002d32:	ee07 3a90 	vmov	s15, r3
}
 8002d36:	eeb0 0a46 	vmov.f32	s0, s12
 8002d3a:	eef0 0a66 	vmov.f32	s1, s13
 8002d3e:	eeb0 1a47 	vmov.f32	s2, s14
 8002d42:	eef0 1a67 	vmov.f32	s3, s15
 8002d46:	3728      	adds	r7, #40	; 0x28
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bc90      	pop	{r4, r7}
 8002d4c:	4770      	bx	lr

08002d4e <FusionAhrsSetHeading>:
 * algorithm.  This function can be used to reset drift in heading when the AHRS
 * algorithm is being used without a magnetometer.
 * @param ahrs AHRS algorithm structure.
 * @param heading Heading angle in degrees.
 */
void FusionAhrsSetHeading(FusionAhrs *const ahrs, const float heading) {
 8002d4e:	b590      	push	{r4, r7, lr}
 8002d50:	b089      	sub	sp, #36	; 0x24
 8002d52:	af00      	add	r7, sp, #0
 8002d54:	6078      	str	r0, [r7, #4]
 8002d56:	ed87 0a00 	vstr	s0, [r7]
#define Q ahrs->quaternion.element
    const float yaw = atan2f(Q.w * Q.z + Q.x * Q.y, 0.5f - Q.y * Q.y - Q.z * Q.z);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	ed93 7a05 	vldr	s14, [r3, #20]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	edd3 7a08 	vldr	s15, [r3, #32]
 8002d66:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	edd3 6a06 	vldr	s13, [r3, #24]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	edd3 7a07 	vldr	s15, [r3, #28]
 8002d76:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d7a:	ee37 6a27 	vadd.f32	s12, s14, s15
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	ed93 7a07 	vldr	s14, [r3, #28]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	edd3 7a07 	vldr	s15, [r3, #28]
 8002d8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d8e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002d92:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	edd3 6a08 	vldr	s13, [r3, #32]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	edd3 7a08 	vldr	s15, [r3, #32]
 8002da2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002da6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002daa:	eef0 0a67 	vmov.f32	s1, s15
 8002dae:	eeb0 0a46 	vmov.f32	s0, s12
 8002db2:	f00f fe85 	bl	8012ac0 <atan2f>
 8002db6:	ed87 0a07 	vstr	s0, [r7, #28]
    const float halfYawMinusHeading = 0.5f * (yaw - FusionDegreesToRadians(heading));
 8002dba:	ed97 0a00 	vldr	s0, [r7]
 8002dbe:	f7fe fc61 	bl	8001684 <FusionDegreesToRadians>
 8002dc2:	eeb0 7a40 	vmov.f32	s14, s0
 8002dc6:	edd7 7a07 	vldr	s15, [r7, #28]
 8002dca:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002dce:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002dd2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002dd6:	edc7 7a06 	vstr	s15, [r7, #24]
    const FusionQuaternion rotation = {.element = {
            .w = cosf(halfYawMinusHeading),
 8002dda:	ed97 0a06 	vldr	s0, [r7, #24]
 8002dde:	f00f fdb9 	bl	8012954 <cosf>
 8002de2:	eef0 7a40 	vmov.f32	s15, s0
    const FusionQuaternion rotation = {.element = {
 8002de6:	edc7 7a02 	vstr	s15, [r7, #8]
 8002dea:	f04f 0300 	mov.w	r3, #0
 8002dee:	60fb      	str	r3, [r7, #12]
 8002df0:	f04f 0300 	mov.w	r3, #0
 8002df4:	613b      	str	r3, [r7, #16]
            .x = 0.0f,
            .y = 0.0f,
            .z = -1.0f * sinf(halfYawMinusHeading),
 8002df6:	ed97 0a06 	vldr	s0, [r7, #24]
 8002dfa:	f00f fdef 	bl	80129dc <sinf>
 8002dfe:	eef0 7a40 	vmov.f32	s15, s0
 8002e02:	eef1 7a67 	vneg.f32	s15, s15
    const FusionQuaternion rotation = {.element = {
 8002e06:	edc7 7a05 	vstr	s15, [r7, #20]
    }};
    ahrs->quaternion = FusionQuaternionMultiply(rotation, ahrs->quaternion);
 8002e0a:	687c      	ldr	r4, [r7, #4]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	ed93 4a05 	vldr	s8, [r3, #20]
 8002e12:	edd3 4a06 	vldr	s9, [r3, #24]
 8002e16:	ed93 5a07 	vldr	s10, [r3, #28]
 8002e1a:	edd3 5a08 	vldr	s11, [r3, #32]
 8002e1e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002e22:	edd7 6a03 	vldr	s13, [r7, #12]
 8002e26:	ed97 7a04 	vldr	s14, [r7, #16]
 8002e2a:	edd7 7a05 	vldr	s15, [r7, #20]
 8002e2e:	eeb0 2a44 	vmov.f32	s4, s8
 8002e32:	eef0 2a64 	vmov.f32	s5, s9
 8002e36:	eeb0 3a45 	vmov.f32	s6, s10
 8002e3a:	eef0 3a65 	vmov.f32	s7, s11
 8002e3e:	eeb0 0a46 	vmov.f32	s0, s12
 8002e42:	eef0 0a66 	vmov.f32	s1, s13
 8002e46:	eeb0 1a47 	vmov.f32	s2, s14
 8002e4a:	eef0 1a67 	vmov.f32	s3, s15
 8002e4e:	f7fe fef2 	bl	8001c36 <FusionQuaternionMultiply>
 8002e52:	eeb0 6a40 	vmov.f32	s12, s0
 8002e56:	eef0 6a60 	vmov.f32	s13, s1
 8002e5a:	eeb0 7a41 	vmov.f32	s14, s2
 8002e5e:	eef0 7a61 	vmov.f32	s15, s3
 8002e62:	ed84 6a05 	vstr	s12, [r4, #20]
 8002e66:	edc4 6a06 	vstr	s13, [r4, #24]
 8002e6a:	ed84 7a07 	vstr	s14, [r4, #28]
 8002e6e:	edc4 7a08 	vstr	s15, [r4, #32]
#undef Q
}
 8002e72:	bf00      	nop
 8002e74:	3724      	adds	r7, #36	; 0x24
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd90      	pop	{r4, r7, pc}
	...

08002e7c <FusionRadiansToDegrees>:
static inline float FusionRadiansToDegrees(const float radians) {
 8002e7c:	b480      	push	{r7}
 8002e7e:	b083      	sub	sp, #12
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	ed87 0a01 	vstr	s0, [r7, #4]
    return radians * (180.0f / (float) M_PI);
 8002e86:	edd7 7a01 	vldr	s15, [r7, #4]
 8002e8a:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8002ea0 <FusionRadiansToDegrees+0x24>
 8002e8e:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8002e92:	eeb0 0a67 	vmov.f32	s0, s15
 8002e96:	370c      	adds	r7, #12
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9e:	4770      	bx	lr
 8002ea0:	42652ee0 	.word	0x42652ee0

08002ea4 <FusionFastInverseSqrt>:
static inline float FusionFastInverseSqrt(const float x) {
 8002ea4:	b480      	push	{r7}
 8002ea6:	b085      	sub	sp, #20
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	ed87 0a01 	vstr	s0, [r7, #4]
    Union32 union32 = {.f = x};
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	60fb      	str	r3, [r7, #12]
    union32.i = 0x5F1F1412 - (union32.i >> 1);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	105a      	asrs	r2, r3, #1
 8002eb6:	4b10      	ldr	r3, [pc, #64]	; (8002ef8 <FusionFastInverseSqrt+0x54>)
 8002eb8:	1a9b      	subs	r3, r3, r2
 8002eba:	60fb      	str	r3, [r7, #12]
    return union32.f * (1.69000231f - 0.714158168f * x * union32.f * union32.f);
 8002ebc:	ed97 7a03 	vldr	s14, [r7, #12]
 8002ec0:	edd7 7a01 	vldr	s15, [r7, #4]
 8002ec4:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8002efc <FusionFastInverseSqrt+0x58>
 8002ec8:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002ecc:	edd7 7a03 	vldr	s15, [r7, #12]
 8002ed0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002ed4:	edd7 7a03 	vldr	s15, [r7, #12]
 8002ed8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002edc:	eddf 6a08 	vldr	s13, [pc, #32]	; 8002f00 <FusionFastInverseSqrt+0x5c>
 8002ee0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002ee4:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8002ee8:	eeb0 0a67 	vmov.f32	s0, s15
 8002eec:	3714      	adds	r7, #20
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef4:	4770      	bx	lr
 8002ef6:	bf00      	nop
 8002ef8:	5f1f1412 	.word	0x5f1f1412
 8002efc:	3f36d312 	.word	0x3f36d312
 8002f00:	3fd851ff 	.word	0x3fd851ff

08002f04 <FusionVectorSum>:
static inline float FusionVectorSum(const FusionVector vector) {
 8002f04:	b480      	push	{r7}
 8002f06:	b085      	sub	sp, #20
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	eef0 6a40 	vmov.f32	s13, s0
 8002f0e:	eeb0 7a60 	vmov.f32	s14, s1
 8002f12:	eef0 7a41 	vmov.f32	s15, s2
 8002f16:	edc7 6a01 	vstr	s13, [r7, #4]
 8002f1a:	ed87 7a02 	vstr	s14, [r7, #8]
 8002f1e:	edc7 7a03 	vstr	s15, [r7, #12]
    return vector.axis.x + vector.axis.y + vector.axis.z;
 8002f22:	ed97 7a01 	vldr	s14, [r7, #4]
 8002f26:	edd7 7a02 	vldr	s15, [r7, #8]
 8002f2a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f2e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002f32:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8002f36:	eeb0 0a67 	vmov.f32	s0, s15
 8002f3a:	3714      	adds	r7, #20
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f42:	4770      	bx	lr

08002f44 <FusionVectorMultiplyScalar>:
static inline FusionVector FusionVectorMultiplyScalar(const FusionVector vector, const float scalar) {
 8002f44:	b480      	push	{r7}
 8002f46:	b08f      	sub	sp, #60	; 0x3c
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	eef0 6a40 	vmov.f32	s13, s0
 8002f4e:	eeb0 7a60 	vmov.f32	s14, s1
 8002f52:	eef0 7a41 	vmov.f32	s15, s2
 8002f56:	edc7 1a04 	vstr	s3, [r7, #16]
 8002f5a:	edc7 6a05 	vstr	s13, [r7, #20]
 8002f5e:	ed87 7a06 	vstr	s14, [r7, #24]
 8002f62:	edc7 7a07 	vstr	s15, [r7, #28]
            .x = vector.axis.x * scalar,
 8002f66:	ed97 7a05 	vldr	s14, [r7, #20]
 8002f6a:	edd7 7a04 	vldr	s15, [r7, #16]
 8002f6e:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8002f72:	edc7 7a08 	vstr	s15, [r7, #32]
            .y = vector.axis.y * scalar,
 8002f76:	ed97 7a06 	vldr	s14, [r7, #24]
 8002f7a:	edd7 7a04 	vldr	s15, [r7, #16]
 8002f7e:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8002f82:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            .z = vector.axis.z * scalar,
 8002f86:	ed97 7a07 	vldr	s14, [r7, #28]
 8002f8a:	edd7 7a04 	vldr	s15, [r7, #16]
 8002f8e:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8002f92:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    return result;
 8002f96:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f9a:	f107 0220 	add.w	r2, r7, #32
 8002f9e:	ca07      	ldmia	r2, {r0, r1, r2}
 8002fa0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002fa4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002fa6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002fa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002faa:	ee06 1a90 	vmov	s13, r1
 8002fae:	ee07 2a10 	vmov	s14, r2
 8002fb2:	ee07 3a90 	vmov	s15, r3
}
 8002fb6:	eeb0 0a66 	vmov.f32	s0, s13
 8002fba:	eef0 0a47 	vmov.f32	s1, s14
 8002fbe:	eeb0 1a67 	vmov.f32	s2, s15
 8002fc2:	373c      	adds	r7, #60	; 0x3c
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fca:	4770      	bx	lr

08002fcc <FusionVectorHadamardProduct>:
static inline FusionVector FusionVectorHadamardProduct(const FusionVector vectorA, const FusionVector vectorB) {
 8002fcc:	b480      	push	{r7}
 8002fce:	b091      	sub	sp, #68	; 0x44
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	eeb0 5a40 	vmov.f32	s10, s0
 8002fd6:	eef0 5a60 	vmov.f32	s11, s1
 8002fda:	eeb0 6a41 	vmov.f32	s12, s2
 8002fde:	eef0 6a61 	vmov.f32	s13, s3
 8002fe2:	eeb0 7a42 	vmov.f32	s14, s4
 8002fe6:	eef0 7a62 	vmov.f32	s15, s5
 8002fea:	ed87 5a07 	vstr	s10, [r7, #28]
 8002fee:	edc7 5a08 	vstr	s11, [r7, #32]
 8002ff2:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 8002ff6:	edc7 6a04 	vstr	s13, [r7, #16]
 8002ffa:	ed87 7a05 	vstr	s14, [r7, #20]
 8002ffe:	edc7 7a06 	vstr	s15, [r7, #24]
            .x = vectorA.axis.x * vectorB.axis.x,
 8003002:	ed97 7a07 	vldr	s14, [r7, #28]
 8003006:	edd7 7a04 	vldr	s15, [r7, #16]
 800300a:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800300e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = vectorA.axis.y * vectorB.axis.y,
 8003012:	ed97 7a08 	vldr	s14, [r7, #32]
 8003016:	edd7 7a05 	vldr	s15, [r7, #20]
 800301a:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800301e:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = vectorA.axis.z * vectorB.axis.z,
 8003022:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003026:	edd7 7a06 	vldr	s15, [r7, #24]
 800302a:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800302e:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    return result;
 8003032:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003036:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800303a:	ca07      	ldmia	r2, {r0, r1, r2}
 800303c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003040:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003042:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003044:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003046:	ee06 1a90 	vmov	s13, r1
 800304a:	ee07 2a10 	vmov	s14, r2
 800304e:	ee07 3a90 	vmov	s15, r3
}
 8003052:	eeb0 0a66 	vmov.f32	s0, s13
 8003056:	eef0 0a47 	vmov.f32	s1, s14
 800305a:	eeb0 1a67 	vmov.f32	s2, s15
 800305e:	3744      	adds	r7, #68	; 0x44
 8003060:	46bd      	mov	sp, r7
 8003062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003066:	4770      	bx	lr

08003068 <FusionVectorCrossProduct>:
static inline FusionVector FusionVectorCrossProduct(const FusionVector vectorA, const FusionVector vectorB) {
 8003068:	b480      	push	{r7}
 800306a:	b091      	sub	sp, #68	; 0x44
 800306c:	af00      	add	r7, sp, #0
 800306e:	eeb0 5a40 	vmov.f32	s10, s0
 8003072:	eef0 5a60 	vmov.f32	s11, s1
 8003076:	eeb0 6a41 	vmov.f32	s12, s2
 800307a:	eef0 6a61 	vmov.f32	s13, s3
 800307e:	eeb0 7a42 	vmov.f32	s14, s4
 8003082:	eef0 7a62 	vmov.f32	s15, s5
 8003086:	ed87 5a07 	vstr	s10, [r7, #28]
 800308a:	edc7 5a08 	vstr	s11, [r7, #32]
 800308e:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 8003092:	edc7 6a04 	vstr	s13, [r7, #16]
 8003096:	ed87 7a05 	vstr	s14, [r7, #20]
 800309a:	edc7 7a06 	vstr	s15, [r7, #24]
            .x = A.y * B.z - A.z * B.y,
 800309e:	ed97 7a08 	vldr	s14, [r7, #32]
 80030a2:	edd7 7a06 	vldr	s15, [r7, #24]
 80030a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80030aa:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80030ae:	edd7 7a05 	vldr	s15, [r7, #20]
 80030b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80030b6:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80030ba:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = A.z * B.x - A.x * B.z,
 80030be:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80030c2:	edd7 7a04 	vldr	s15, [r7, #16]
 80030c6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80030ca:	edd7 6a07 	vldr	s13, [r7, #28]
 80030ce:	edd7 7a06 	vldr	s15, [r7, #24]
 80030d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80030d6:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80030da:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = A.x * B.y - A.y * B.x,
 80030de:	ed97 7a07 	vldr	s14, [r7, #28]
 80030e2:	edd7 7a05 	vldr	s15, [r7, #20]
 80030e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80030ea:	edd7 6a08 	vldr	s13, [r7, #32]
 80030ee:	edd7 7a04 	vldr	s15, [r7, #16]
 80030f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80030f6:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80030fa:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    return result;
 80030fe:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003102:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003106:	ca07      	ldmia	r2, {r0, r1, r2}
 8003108:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800310c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800310e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003110:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003112:	ee06 1a90 	vmov	s13, r1
 8003116:	ee07 2a10 	vmov	s14, r2
 800311a:	ee07 3a90 	vmov	s15, r3
}
 800311e:	eeb0 0a66 	vmov.f32	s0, s13
 8003122:	eef0 0a47 	vmov.f32	s1, s14
 8003126:	eeb0 1a67 	vmov.f32	s2, s15
 800312a:	3744      	adds	r7, #68	; 0x44
 800312c:	46bd      	mov	sp, r7
 800312e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003132:	4770      	bx	lr

08003134 <FusionVectorMagnitudeSquared>:
static inline float FusionVectorMagnitudeSquared(const FusionVector vector) {
 8003134:	b580      	push	{r7, lr}
 8003136:	b088      	sub	sp, #32
 8003138:	af00      	add	r7, sp, #0
 800313a:	eef0 6a40 	vmov.f32	s13, s0
 800313e:	eeb0 7a60 	vmov.f32	s14, s1
 8003142:	eef0 7a41 	vmov.f32	s15, s2
 8003146:	edc7 6a01 	vstr	s13, [r7, #4]
 800314a:	ed87 7a02 	vstr	s14, [r7, #8]
 800314e:	edc7 7a03 	vstr	s15, [r7, #12]
    return FusionVectorSum(FusionVectorHadamardProduct(vector, vector));
 8003152:	ed97 5a01 	vldr	s10, [r7, #4]
 8003156:	edd7 5a02 	vldr	s11, [r7, #8]
 800315a:	ed97 6a03 	vldr	s12, [r7, #12]
 800315e:	edd7 6a01 	vldr	s13, [r7, #4]
 8003162:	ed97 7a02 	vldr	s14, [r7, #8]
 8003166:	edd7 7a03 	vldr	s15, [r7, #12]
 800316a:	eef0 1a45 	vmov.f32	s3, s10
 800316e:	eeb0 2a65 	vmov.f32	s4, s11
 8003172:	eef0 2a46 	vmov.f32	s5, s12
 8003176:	eeb0 0a66 	vmov.f32	s0, s13
 800317a:	eef0 0a47 	vmov.f32	s1, s14
 800317e:	eeb0 1a67 	vmov.f32	s2, s15
 8003182:	f7ff ff23 	bl	8002fcc <FusionVectorHadamardProduct>
 8003186:	eef0 6a40 	vmov.f32	s13, s0
 800318a:	eeb0 7a60 	vmov.f32	s14, s1
 800318e:	eef0 7a41 	vmov.f32	s15, s2
 8003192:	edc7 6a05 	vstr	s13, [r7, #20]
 8003196:	ed87 7a06 	vstr	s14, [r7, #24]
 800319a:	edc7 7a07 	vstr	s15, [r7, #28]
 800319e:	edd7 6a05 	vldr	s13, [r7, #20]
 80031a2:	ed97 7a06 	vldr	s14, [r7, #24]
 80031a6:	edd7 7a07 	vldr	s15, [r7, #28]
 80031aa:	eeb0 0a66 	vmov.f32	s0, s13
 80031ae:	eef0 0a47 	vmov.f32	s1, s14
 80031b2:	eeb0 1a67 	vmov.f32	s2, s15
 80031b6:	f7ff fea5 	bl	8002f04 <FusionVectorSum>
 80031ba:	eef0 7a40 	vmov.f32	s15, s0
}
 80031be:	eeb0 0a67 	vmov.f32	s0, s15
 80031c2:	3720      	adds	r7, #32
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd80      	pop	{r7, pc}

080031c8 <FusionVectorNormalise>:
static inline FusionVector FusionVectorNormalise(const FusionVector vector) {
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b08c      	sub	sp, #48	; 0x30
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	eef0 6a40 	vmov.f32	s13, s0
 80031d2:	eeb0 7a60 	vmov.f32	s14, s1
 80031d6:	eef0 7a41 	vmov.f32	s15, s2
 80031da:	edc7 6a05 	vstr	s13, [r7, #20]
 80031de:	ed87 7a06 	vstr	s14, [r7, #24]
 80031e2:	edc7 7a07 	vstr	s15, [r7, #28]
    const float magnitudeReciprocal = FusionFastInverseSqrt(FusionVectorMagnitudeSquared(vector));
 80031e6:	edd7 6a05 	vldr	s13, [r7, #20]
 80031ea:	ed97 7a06 	vldr	s14, [r7, #24]
 80031ee:	edd7 7a07 	vldr	s15, [r7, #28]
 80031f2:	eeb0 0a66 	vmov.f32	s0, s13
 80031f6:	eef0 0a47 	vmov.f32	s1, s14
 80031fa:	eeb0 1a67 	vmov.f32	s2, s15
 80031fe:	f7ff ff99 	bl	8003134 <FusionVectorMagnitudeSquared>
 8003202:	eef0 7a40 	vmov.f32	s15, s0
 8003206:	eeb0 0a67 	vmov.f32	s0, s15
 800320a:	f7ff fe4b 	bl	8002ea4 <FusionFastInverseSqrt>
 800320e:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
    return FusionVectorMultiplyScalar(vector, magnitudeReciprocal);
 8003212:	edd7 6a05 	vldr	s13, [r7, #20]
 8003216:	ed97 7a06 	vldr	s14, [r7, #24]
 800321a:	edd7 7a07 	vldr	s15, [r7, #28]
 800321e:	edd7 1a0b 	vldr	s3, [r7, #44]	; 0x2c
 8003222:	eeb0 0a66 	vmov.f32	s0, s13
 8003226:	eef0 0a47 	vmov.f32	s1, s14
 800322a:	eeb0 1a67 	vmov.f32	s2, s15
 800322e:	f7ff fe89 	bl	8002f44 <FusionVectorMultiplyScalar>
 8003232:	eef0 6a40 	vmov.f32	s13, s0
 8003236:	eeb0 7a60 	vmov.f32	s14, s1
 800323a:	eef0 7a41 	vmov.f32	s15, s2
 800323e:	edc7 6a08 	vstr	s13, [r7, #32]
 8003242:	ed87 7a09 	vstr	s14, [r7, #36]	; 0x24
 8003246:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 800324a:	6a39      	ldr	r1, [r7, #32]
 800324c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800324e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003250:	ee06 1a90 	vmov	s13, r1
 8003254:	ee07 2a10 	vmov	s14, r2
 8003258:	ee07 3a90 	vmov	s15, r3
}
 800325c:	eeb0 0a66 	vmov.f32	s0, s13
 8003260:	eef0 0a47 	vmov.f32	s1, s14
 8003264:	eeb0 1a67 	vmov.f32	s2, s15
 8003268:	3730      	adds	r7, #48	; 0x30
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}
	...

08003270 <FusionCompassCalculateHeading>:
 * @param convention Earth axes convention.
 * @param accelerometer Accelerometer measurement in any calibrated units.
 * @param magnetometer Magnetometer measurement in any calibrated units.
 * @return Heading angle in degrees.
 */
float FusionCompassCalculateHeading(const FusionConvention convention, const FusionVector accelerometer, const FusionVector magnetometer) {
 8003270:	b580      	push	{r7, lr}
 8003272:	b0b2      	sub	sp, #200	; 0xc8
 8003274:	af00      	add	r7, sp, #0
 8003276:	4603      	mov	r3, r0
 8003278:	eeb0 5a40 	vmov.f32	s10, s0
 800327c:	eef0 5a60 	vmov.f32	s11, s1
 8003280:	eeb0 6a41 	vmov.f32	s12, s2
 8003284:	eef0 6a61 	vmov.f32	s13, s3
 8003288:	eeb0 7a42 	vmov.f32	s14, s4
 800328c:	eef0 7a62 	vmov.f32	s15, s5
 8003290:	77fb      	strb	r3, [r7, #31]
 8003292:	ed87 5a04 	vstr	s10, [r7, #16]
 8003296:	edc7 5a05 	vstr	s11, [r7, #20]
 800329a:	ed87 6a06 	vstr	s12, [r7, #24]
 800329e:	edc7 6a01 	vstr	s13, [r7, #4]
 80032a2:	ed87 7a02 	vstr	s14, [r7, #8]
 80032a6:	edc7 7a03 	vstr	s15, [r7, #12]
    switch (convention) {
 80032aa:	7ffb      	ldrb	r3, [r7, #31]
 80032ac:	2b02      	cmp	r3, #2
 80032ae:	f000 814b 	beq.w	8003548 <FusionCompassCalculateHeading+0x2d8>
 80032b2:	2b02      	cmp	r3, #2
 80032b4:	f300 81f7 	bgt.w	80036a6 <FusionCompassCalculateHeading+0x436>
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d003      	beq.n	80032c4 <FusionCompassCalculateHeading+0x54>
 80032bc:	2b01      	cmp	r3, #1
 80032be:	f000 8094 	beq.w	80033ea <FusionCompassCalculateHeading+0x17a>
 80032c2:	e1f0      	b.n	80036a6 <FusionCompassCalculateHeading+0x436>
        case FusionConventionNwu: {
            const FusionVector west = FusionVectorNormalise(FusionVectorCrossProduct(accelerometer, magnetometer));
 80032c4:	ed97 5a01 	vldr	s10, [r7, #4]
 80032c8:	edd7 5a02 	vldr	s11, [r7, #8]
 80032cc:	ed97 6a03 	vldr	s12, [r7, #12]
 80032d0:	edd7 6a04 	vldr	s13, [r7, #16]
 80032d4:	ed97 7a05 	vldr	s14, [r7, #20]
 80032d8:	edd7 7a06 	vldr	s15, [r7, #24]
 80032dc:	eef0 1a45 	vmov.f32	s3, s10
 80032e0:	eeb0 2a65 	vmov.f32	s4, s11
 80032e4:	eef0 2a46 	vmov.f32	s5, s12
 80032e8:	eeb0 0a66 	vmov.f32	s0, s13
 80032ec:	eef0 0a47 	vmov.f32	s1, s14
 80032f0:	eeb0 1a67 	vmov.f32	s2, s15
 80032f4:	f7ff feb8 	bl	8003068 <FusionVectorCrossProduct>
 80032f8:	eef0 6a40 	vmov.f32	s13, s0
 80032fc:	eeb0 7a60 	vmov.f32	s14, s1
 8003300:	eef0 7a41 	vmov.f32	s15, s2
 8003304:	edc7 6a20 	vstr	s13, [r7, #128]	; 0x80
 8003308:	ed87 7a21 	vstr	s14, [r7, #132]	; 0x84
 800330c:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
 8003310:	edd7 6a20 	vldr	s13, [r7, #128]	; 0x80
 8003314:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 8003318:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 800331c:	eeb0 0a66 	vmov.f32	s0, s13
 8003320:	eef0 0a47 	vmov.f32	s1, s14
 8003324:	eeb0 1a67 	vmov.f32	s2, s15
 8003328:	f7ff ff4e 	bl	80031c8 <FusionVectorNormalise>
 800332c:	eef0 6a40 	vmov.f32	s13, s0
 8003330:	eeb0 7a60 	vmov.f32	s14, s1
 8003334:	eef0 7a41 	vmov.f32	s15, s2
 8003338:	edc7 6a1d 	vstr	s13, [r7, #116]	; 0x74
 800333c:	ed87 7a1e 	vstr	s14, [r7, #120]	; 0x78
 8003340:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
            const FusionVector north = FusionVectorNormalise(FusionVectorCrossProduct(west, accelerometer));
 8003344:	ed97 5a04 	vldr	s10, [r7, #16]
 8003348:	edd7 5a05 	vldr	s11, [r7, #20]
 800334c:	ed97 6a06 	vldr	s12, [r7, #24]
 8003350:	edd7 6a1d 	vldr	s13, [r7, #116]	; 0x74
 8003354:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8003358:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 800335c:	eef0 1a45 	vmov.f32	s3, s10
 8003360:	eeb0 2a65 	vmov.f32	s4, s11
 8003364:	eef0 2a46 	vmov.f32	s5, s12
 8003368:	eeb0 0a66 	vmov.f32	s0, s13
 800336c:	eef0 0a47 	vmov.f32	s1, s14
 8003370:	eeb0 1a67 	vmov.f32	s2, s15
 8003374:	f7ff fe78 	bl	8003068 <FusionVectorCrossProduct>
 8003378:	eef0 6a40 	vmov.f32	s13, s0
 800337c:	eeb0 7a60 	vmov.f32	s14, s1
 8003380:	eef0 7a41 	vmov.f32	s15, s2
 8003384:	edc7 6a23 	vstr	s13, [r7, #140]	; 0x8c
 8003388:	ed87 7a24 	vstr	s14, [r7, #144]	; 0x90
 800338c:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
 8003390:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 8003394:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8003398:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 800339c:	eeb0 0a66 	vmov.f32	s0, s13
 80033a0:	eef0 0a47 	vmov.f32	s1, s14
 80033a4:	eeb0 1a67 	vmov.f32	s2, s15
 80033a8:	f7ff ff0e 	bl	80031c8 <FusionVectorNormalise>
 80033ac:	eef0 6a40 	vmov.f32	s13, s0
 80033b0:	eeb0 7a60 	vmov.f32	s14, s1
 80033b4:	eef0 7a41 	vmov.f32	s15, s2
 80033b8:	edc7 6a1a 	vstr	s13, [r7, #104]	; 0x68
 80033bc:	ed87 7a1b 	vstr	s14, [r7, #108]	; 0x6c
 80033c0:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
            return FusionRadiansToDegrees(atan2f(west.axis.x, north.axis.x));
 80033c4:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80033c8:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 80033cc:	eef0 0a47 	vmov.f32	s1, s14
 80033d0:	eeb0 0a67 	vmov.f32	s0, s15
 80033d4:	f00f fb74 	bl	8012ac0 <atan2f>
 80033d8:	eef0 7a40 	vmov.f32	s15, s0
 80033dc:	eeb0 0a67 	vmov.f32	s0, s15
 80033e0:	f7ff fd4c 	bl	8002e7c <FusionRadiansToDegrees>
 80033e4:	eef0 7a40 	vmov.f32	s15, s0
 80033e8:	e15f      	b.n	80036aa <FusionCompassCalculateHeading+0x43a>
        }
        case FusionConventionEnu: {
            const FusionVector west = FusionVectorNormalise(FusionVectorCrossProduct(accelerometer, magnetometer));
 80033ea:	ed97 5a01 	vldr	s10, [r7, #4]
 80033ee:	edd7 5a02 	vldr	s11, [r7, #8]
 80033f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80033f6:	edd7 6a04 	vldr	s13, [r7, #16]
 80033fa:	ed97 7a05 	vldr	s14, [r7, #20]
 80033fe:	edd7 7a06 	vldr	s15, [r7, #24]
 8003402:	eef0 1a45 	vmov.f32	s3, s10
 8003406:	eeb0 2a65 	vmov.f32	s4, s11
 800340a:	eef0 2a46 	vmov.f32	s5, s12
 800340e:	eeb0 0a66 	vmov.f32	s0, s13
 8003412:	eef0 0a47 	vmov.f32	s1, s14
 8003416:	eeb0 1a67 	vmov.f32	s2, s15
 800341a:	f7ff fe25 	bl	8003068 <FusionVectorCrossProduct>
 800341e:	eef0 6a40 	vmov.f32	s13, s0
 8003422:	eeb0 7a60 	vmov.f32	s14, s1
 8003426:	eef0 7a41 	vmov.f32	s15, s2
 800342a:	edc7 6a26 	vstr	s13, [r7, #152]	; 0x98
 800342e:	ed87 7a27 	vstr	s14, [r7, #156]	; 0x9c
 8003432:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
 8003436:	edd7 6a26 	vldr	s13, [r7, #152]	; 0x98
 800343a:	ed97 7a27 	vldr	s14, [r7, #156]	; 0x9c
 800343e:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8003442:	eeb0 0a66 	vmov.f32	s0, s13
 8003446:	eef0 0a47 	vmov.f32	s1, s14
 800344a:	eeb0 1a67 	vmov.f32	s2, s15
 800344e:	f7ff febb 	bl	80031c8 <FusionVectorNormalise>
 8003452:	eef0 6a40 	vmov.f32	s13, s0
 8003456:	eeb0 7a60 	vmov.f32	s14, s1
 800345a:	eef0 7a41 	vmov.f32	s15, s2
 800345e:	edc7 6a17 	vstr	s13, [r7, #92]	; 0x5c
 8003462:	ed87 7a18 	vstr	s14, [r7, #96]	; 0x60
 8003466:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
            const FusionVector north = FusionVectorNormalise(FusionVectorCrossProduct(west, accelerometer));
 800346a:	ed97 5a04 	vldr	s10, [r7, #16]
 800346e:	edd7 5a05 	vldr	s11, [r7, #20]
 8003472:	ed97 6a06 	vldr	s12, [r7, #24]
 8003476:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 800347a:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800347e:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8003482:	eef0 1a45 	vmov.f32	s3, s10
 8003486:	eeb0 2a65 	vmov.f32	s4, s11
 800348a:	eef0 2a46 	vmov.f32	s5, s12
 800348e:	eeb0 0a66 	vmov.f32	s0, s13
 8003492:	eef0 0a47 	vmov.f32	s1, s14
 8003496:	eeb0 1a67 	vmov.f32	s2, s15
 800349a:	f7ff fde5 	bl	8003068 <FusionVectorCrossProduct>
 800349e:	eef0 6a40 	vmov.f32	s13, s0
 80034a2:	eeb0 7a60 	vmov.f32	s14, s1
 80034a6:	eef0 7a41 	vmov.f32	s15, s2
 80034aa:	edc7 6a29 	vstr	s13, [r7, #164]	; 0xa4
 80034ae:	ed87 7a2a 	vstr	s14, [r7, #168]	; 0xa8
 80034b2:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
 80034b6:	edd7 6a29 	vldr	s13, [r7, #164]	; 0xa4
 80034ba:	ed97 7a2a 	vldr	s14, [r7, #168]	; 0xa8
 80034be:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 80034c2:	eeb0 0a66 	vmov.f32	s0, s13
 80034c6:	eef0 0a47 	vmov.f32	s1, s14
 80034ca:	eeb0 1a67 	vmov.f32	s2, s15
 80034ce:	f7ff fe7b 	bl	80031c8 <FusionVectorNormalise>
 80034d2:	eef0 6a40 	vmov.f32	s13, s0
 80034d6:	eeb0 7a60 	vmov.f32	s14, s1
 80034da:	eef0 7a41 	vmov.f32	s15, s2
 80034de:	edc7 6a14 	vstr	s13, [r7, #80]	; 0x50
 80034e2:	ed87 7a15 	vstr	s14, [r7, #84]	; 0x54
 80034e6:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
            const FusionVector east = FusionVectorMultiplyScalar(west, -1.0f);
 80034ea:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 80034ee:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80034f2:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80034f6:	eeff 1a00 	vmov.f32	s3, #240	; 0xbf800000 -1.0
 80034fa:	eeb0 0a66 	vmov.f32	s0, s13
 80034fe:	eef0 0a47 	vmov.f32	s1, s14
 8003502:	eeb0 1a67 	vmov.f32	s2, s15
 8003506:	f7ff fd1d 	bl	8002f44 <FusionVectorMultiplyScalar>
 800350a:	eef0 6a40 	vmov.f32	s13, s0
 800350e:	eeb0 7a60 	vmov.f32	s14, s1
 8003512:	eef0 7a41 	vmov.f32	s15, s2
 8003516:	edc7 6a11 	vstr	s13, [r7, #68]	; 0x44
 800351a:	ed87 7a12 	vstr	s14, [r7, #72]	; 0x48
 800351e:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
            return FusionRadiansToDegrees(atan2f(north.axis.x, east.axis.x));
 8003522:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8003526:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800352a:	eef0 0a47 	vmov.f32	s1, s14
 800352e:	eeb0 0a67 	vmov.f32	s0, s15
 8003532:	f00f fac5 	bl	8012ac0 <atan2f>
 8003536:	eef0 7a40 	vmov.f32	s15, s0
 800353a:	eeb0 0a67 	vmov.f32	s0, s15
 800353e:	f7ff fc9d 	bl	8002e7c <FusionRadiansToDegrees>
 8003542:	eef0 7a40 	vmov.f32	s15, s0
 8003546:	e0b0      	b.n	80036aa <FusionCompassCalculateHeading+0x43a>
        }
        case FusionConventionNed: {
            const FusionVector up = FusionVectorMultiplyScalar(accelerometer, -1.0f);
 8003548:	edd7 6a04 	vldr	s13, [r7, #16]
 800354c:	ed97 7a05 	vldr	s14, [r7, #20]
 8003550:	edd7 7a06 	vldr	s15, [r7, #24]
 8003554:	eeff 1a00 	vmov.f32	s3, #240	; 0xbf800000 -1.0
 8003558:	eeb0 0a66 	vmov.f32	s0, s13
 800355c:	eef0 0a47 	vmov.f32	s1, s14
 8003560:	eeb0 1a67 	vmov.f32	s2, s15
 8003564:	f7ff fcee 	bl	8002f44 <FusionVectorMultiplyScalar>
 8003568:	eef0 6a40 	vmov.f32	s13, s0
 800356c:	eeb0 7a60 	vmov.f32	s14, s1
 8003570:	eef0 7a41 	vmov.f32	s15, s2
 8003574:	edc7 6a0e 	vstr	s13, [r7, #56]	; 0x38
 8003578:	ed87 7a0f 	vstr	s14, [r7, #60]	; 0x3c
 800357c:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
            const FusionVector west = FusionVectorNormalise(FusionVectorCrossProduct(up, magnetometer));
 8003580:	ed97 5a01 	vldr	s10, [r7, #4]
 8003584:	edd7 5a02 	vldr	s11, [r7, #8]
 8003588:	ed97 6a03 	vldr	s12, [r7, #12]
 800358c:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 8003590:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8003594:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8003598:	eef0 1a45 	vmov.f32	s3, s10
 800359c:	eeb0 2a65 	vmov.f32	s4, s11
 80035a0:	eef0 2a46 	vmov.f32	s5, s12
 80035a4:	eeb0 0a66 	vmov.f32	s0, s13
 80035a8:	eef0 0a47 	vmov.f32	s1, s14
 80035ac:	eeb0 1a67 	vmov.f32	s2, s15
 80035b0:	f7ff fd5a 	bl	8003068 <FusionVectorCrossProduct>
 80035b4:	eef0 6a40 	vmov.f32	s13, s0
 80035b8:	eeb0 7a60 	vmov.f32	s14, s1
 80035bc:	eef0 7a41 	vmov.f32	s15, s2
 80035c0:	edc7 6a2c 	vstr	s13, [r7, #176]	; 0xb0
 80035c4:	ed87 7a2d 	vstr	s14, [r7, #180]	; 0xb4
 80035c8:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
 80035cc:	edd7 6a2c 	vldr	s13, [r7, #176]	; 0xb0
 80035d0:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 80035d4:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80035d8:	eeb0 0a66 	vmov.f32	s0, s13
 80035dc:	eef0 0a47 	vmov.f32	s1, s14
 80035e0:	eeb0 1a67 	vmov.f32	s2, s15
 80035e4:	f7ff fdf0 	bl	80031c8 <FusionVectorNormalise>
 80035e8:	eef0 6a40 	vmov.f32	s13, s0
 80035ec:	eeb0 7a60 	vmov.f32	s14, s1
 80035f0:	eef0 7a41 	vmov.f32	s15, s2
 80035f4:	edc7 6a0b 	vstr	s13, [r7, #44]	; 0x2c
 80035f8:	ed87 7a0c 	vstr	s14, [r7, #48]	; 0x30
 80035fc:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
            const FusionVector north = FusionVectorNormalise(FusionVectorCrossProduct(west, up));
 8003600:	ed97 5a0e 	vldr	s10, [r7, #56]	; 0x38
 8003604:	edd7 5a0f 	vldr	s11, [r7, #60]	; 0x3c
 8003608:	ed97 6a10 	vldr	s12, [r7, #64]	; 0x40
 800360c:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8003610:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8003614:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8003618:	eef0 1a45 	vmov.f32	s3, s10
 800361c:	eeb0 2a65 	vmov.f32	s4, s11
 8003620:	eef0 2a46 	vmov.f32	s5, s12
 8003624:	eeb0 0a66 	vmov.f32	s0, s13
 8003628:	eef0 0a47 	vmov.f32	s1, s14
 800362c:	eeb0 1a67 	vmov.f32	s2, s15
 8003630:	f7ff fd1a 	bl	8003068 <FusionVectorCrossProduct>
 8003634:	eef0 6a40 	vmov.f32	s13, s0
 8003638:	eeb0 7a60 	vmov.f32	s14, s1
 800363c:	eef0 7a41 	vmov.f32	s15, s2
 8003640:	edc7 6a2f 	vstr	s13, [r7, #188]	; 0xbc
 8003644:	ed87 7a30 	vstr	s14, [r7, #192]	; 0xc0
 8003648:	edc7 7a31 	vstr	s15, [r7, #196]	; 0xc4
 800364c:	edd7 6a2f 	vldr	s13, [r7, #188]	; 0xbc
 8003650:	ed97 7a30 	vldr	s14, [r7, #192]	; 0xc0
 8003654:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8003658:	eeb0 0a66 	vmov.f32	s0, s13
 800365c:	eef0 0a47 	vmov.f32	s1, s14
 8003660:	eeb0 1a67 	vmov.f32	s2, s15
 8003664:	f7ff fdb0 	bl	80031c8 <FusionVectorNormalise>
 8003668:	eef0 6a40 	vmov.f32	s13, s0
 800366c:	eeb0 7a60 	vmov.f32	s14, s1
 8003670:	eef0 7a41 	vmov.f32	s15, s2
 8003674:	edc7 6a08 	vstr	s13, [r7, #32]
 8003678:	ed87 7a09 	vstr	s14, [r7, #36]	; 0x24
 800367c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            return FusionRadiansToDegrees(atan2f(west.axis.x, north.axis.x));
 8003680:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003684:	ed97 7a08 	vldr	s14, [r7, #32]
 8003688:	eef0 0a47 	vmov.f32	s1, s14
 800368c:	eeb0 0a67 	vmov.f32	s0, s15
 8003690:	f00f fa16 	bl	8012ac0 <atan2f>
 8003694:	eef0 7a40 	vmov.f32	s15, s0
 8003698:	eeb0 0a67 	vmov.f32	s0, s15
 800369c:	f7ff fbee 	bl	8002e7c <FusionRadiansToDegrees>
 80036a0:	eef0 7a40 	vmov.f32	s15, s0
 80036a4:	e001      	b.n	80036aa <FusionCompassCalculateHeading+0x43a>
        }
    }
    return 0; // avoid compiler warning
 80036a6:	eddf 7a03 	vldr	s15, [pc, #12]	; 80036b4 <FusionCompassCalculateHeading+0x444>
}
 80036aa:	eeb0 0a67 	vmov.f32	s0, s15
 80036ae:	37c8      	adds	r7, #200	; 0xc8
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}
 80036b4:	00000000 	.word	0x00000000

080036b8 <FusionOffsetInitialise>:
/**
 * @brief Initialises the gyroscope offset algorithm.
 * @param offset Gyroscope offset algorithm structure.
 * @param sampleRate Sample rate in Hz.
 */
void FusionOffsetInitialise(FusionOffset *const offset, const unsigned int sampleRate) {
 80036b8:	b480      	push	{r7}
 80036ba:	b087      	sub	sp, #28
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
 80036c0:	6039      	str	r1, [r7, #0]
    offset->filterCoefficient = 2.0f * (float) M_PI * CUTOFF_FREQUENCY * (1.0f / (float) sampleRate);
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	ee07 3a90 	vmov	s15, r3
 80036c8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80036cc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80036d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80036d4:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8003718 <FusionOffsetInitialise+0x60>
 80036d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	edc3 7a00 	vstr	s15, [r3]
    offset->timeout = TIMEOUT * sampleRate;
 80036e2:	683a      	ldr	r2, [r7, #0]
 80036e4:	4613      	mov	r3, r2
 80036e6:	009b      	lsls	r3, r3, #2
 80036e8:	441a      	add	r2, r3
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	605a      	str	r2, [r3, #4]
    offset->timer = 0;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2200      	movs	r2, #0
 80036f2:	609a      	str	r2, [r3, #8]
    offset->gyroscopeOffset = FUSION_VECTOR_ZERO;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	f04f 0200 	mov.w	r2, #0
 80036fa:	60da      	str	r2, [r3, #12]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	f04f 0200 	mov.w	r2, #0
 8003702:	611a      	str	r2, [r3, #16]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	f04f 0200 	mov.w	r2, #0
 800370a:	615a      	str	r2, [r3, #20]
}
 800370c:	bf00      	nop
 800370e:	371c      	adds	r7, #28
 8003710:	46bd      	mov	sp, r7
 8003712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003716:	4770      	bx	lr
 8003718:	3e00adfd 	.word	0x3e00adfd

0800371c <ublox_i2c_bus_init>:
static uint8_t gps_loss_count = 0;

uint8_t gps_data_backup_flag = 0;   //Flag to enable gps data backup only on boot.


uint8_t ublox_i2c_bus_init(void){
 800371c:	b580      	push	{r7, lr}
 800371e:	af00      	add	r7, sp, #0
	hi2c1.Instance = I2C1;
 8003720:	4b1b      	ldr	r3, [pc, #108]	; (8003790 <ublox_i2c_bus_init+0x74>)
 8003722:	4a1c      	ldr	r2, [pc, #112]	; (8003794 <ublox_i2c_bus_init+0x78>)
 8003724:	601a      	str	r2, [r3, #0]
//	hi2c1.Init.Timing = 0x00B03FDB; 400KB i2c speed
	hi2c1.Init.Timing = 0x307075B1;	//100KB i2c speed
 8003726:	4b1a      	ldr	r3, [pc, #104]	; (8003790 <ublox_i2c_bus_init+0x74>)
 8003728:	4a1b      	ldr	r2, [pc, #108]	; (8003798 <ublox_i2c_bus_init+0x7c>)
 800372a:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 800372c:	4b18      	ldr	r3, [pc, #96]	; (8003790 <ublox_i2c_bus_init+0x74>)
 800372e:	2200      	movs	r2, #0
 8003730:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003732:	4b17      	ldr	r3, [pc, #92]	; (8003790 <ublox_i2c_bus_init+0x74>)
 8003734:	2201      	movs	r2, #1
 8003736:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003738:	4b15      	ldr	r3, [pc, #84]	; (8003790 <ublox_i2c_bus_init+0x74>)
 800373a:	2200      	movs	r2, #0
 800373c:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 800373e:	4b14      	ldr	r3, [pc, #80]	; (8003790 <ublox_i2c_bus_init+0x74>)
 8003740:	2200      	movs	r2, #0
 8003742:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003744:	4b12      	ldr	r3, [pc, #72]	; (8003790 <ublox_i2c_bus_init+0x74>)
 8003746:	2200      	movs	r2, #0
 8003748:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800374a:	4b11      	ldr	r3, [pc, #68]	; (8003790 <ublox_i2c_bus_init+0x74>)
 800374c:	2200      	movs	r2, #0
 800374e:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003750:	4b0f      	ldr	r3, [pc, #60]	; (8003790 <ublox_i2c_bus_init+0x74>)
 8003752:	2200      	movs	r2, #0
 8003754:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003756:	480e      	ldr	r0, [pc, #56]	; (8003790 <ublox_i2c_bus_init+0x74>)
 8003758:	f003 f8cd 	bl	80068f6 <HAL_I2C_Init>
 800375c:	4603      	mov	r3, r0
 800375e:	2b00      	cmp	r3, #0
 8003760:	d001      	beq.n	8003766 <ublox_i2c_bus_init+0x4a>
	{
	return 1;
 8003762:	2301      	movs	r3, #1
 8003764:	e012      	b.n	800378c <ublox_i2c_bus_init+0x70>
	}

	/** Configure Analogue filter
	*/
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003766:	2100      	movs	r1, #0
 8003768:	4809      	ldr	r0, [pc, #36]	; (8003790 <ublox_i2c_bus_init+0x74>)
 800376a:	f004 f8a5 	bl	80078b8 <HAL_I2CEx_ConfigAnalogFilter>
 800376e:	4603      	mov	r3, r0
 8003770:	2b00      	cmp	r3, #0
 8003772:	d001      	beq.n	8003778 <ublox_i2c_bus_init+0x5c>
	{
	return 2;
 8003774:	2302      	movs	r3, #2
 8003776:	e009      	b.n	800378c <ublox_i2c_bus_init+0x70>
	}

	/** Configure Digital filter
	*/
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003778:	2100      	movs	r1, #0
 800377a:	4805      	ldr	r0, [pc, #20]	; (8003790 <ublox_i2c_bus_init+0x74>)
 800377c:	f004 f8e7 	bl	800794e <HAL_I2CEx_ConfigDigitalFilter>
 8003780:	4603      	mov	r3, r0
 8003782:	2b00      	cmp	r3, #0
 8003784:	d001      	beq.n	800378a <ublox_i2c_bus_init+0x6e>
	{
	return 3;
 8003786:	2303      	movs	r3, #3
 8003788:	e000      	b.n	800378c <ublox_i2c_bus_init+0x70>
	}
	return 0;
 800378a:	2300      	movs	r3, #0
}
 800378c:	4618      	mov	r0, r3
 800378e:	bd80      	pop	{r7, pc}
 8003790:	20000298 	.word	0x20000298
 8003794:	40005400 	.word	0x40005400
 8003798:	307075b1 	.word	0x307075b1

0800379c <ublox_transmit_rtc>:
    else{
        parseNMEA();
    }
}

void ublox_transmit_rtc(uint8_t cmd, UART_select device){
 800379c:	b580      	push	{r7, lr}
 800379e:	b082      	sub	sp, #8
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	4603      	mov	r3, r0
 80037a4:	460a      	mov	r2, r1
 80037a6:	71fb      	strb	r3, [r7, #7]
 80037a8:	4613      	mov	r3, r2
 80037aa:	71bb      	strb	r3, [r7, #6]
    transmitMessage(gps_data.timestamp, 9, cmd, device);
 80037ac:	79fa      	ldrb	r2, [r7, #7]
 80037ae:	79bb      	ldrb	r3, [r7, #6]
 80037b0:	2109      	movs	r1, #9
 80037b2:	4803      	ldr	r0, [pc, #12]	; (80037c0 <ublox_transmit_rtc+0x24>)
 80037b4:	f001 fa72 	bl	8004c9c <transmitMessage>
}
 80037b8:	bf00      	nop
 80037ba:	3708      	adds	r7, #8
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}
 80037c0:	20000337 	.word	0x20000337

080037c4 <ublox_transmit_message>:

void ublox_transmit_message(uint8_t cmd, UART_select device){
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b086      	sub	sp, #24
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	4603      	mov	r3, r0
 80037cc:	460a      	mov	r2, r1
 80037ce:	71fb      	strb	r3, [r7, #7]
 80037d0:	4613      	mov	r3, r2
 80037d2:	71bb      	strb	r3, [r7, #6]
    uint8_t message[12] = {0};
 80037d4:	2300      	movs	r3, #0
 80037d6:	60fb      	str	r3, [r7, #12]
 80037d8:	f107 0310 	add.w	r3, r7, #16
 80037dc:	2200      	movs	r2, #0
 80037de:	601a      	str	r2, [r3, #0]
 80037e0:	605a      	str	r2, [r3, #4]
    message[0] = (gps_data.latitude & 0xFF000000) >> 24;
 80037e2:	4b22      	ldr	r3, [pc, #136]	; (800386c <ublox_transmit_message+0xa8>)
 80037e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037e6:	0e1b      	lsrs	r3, r3, #24
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	733b      	strb	r3, [r7, #12]
    message[1] = (gps_data.latitude & 0x00FF0000) >> 16;
 80037ec:	4b1f      	ldr	r3, [pc, #124]	; (800386c <ublox_transmit_message+0xa8>)
 80037ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037f0:	141b      	asrs	r3, r3, #16
 80037f2:	b2db      	uxtb	r3, r3
 80037f4:	737b      	strb	r3, [r7, #13]
    message[2] = (gps_data.latitude & 0x0000FF00) >> 8;
 80037f6:	4b1d      	ldr	r3, [pc, #116]	; (800386c <ublox_transmit_message+0xa8>)
 80037f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037fa:	121b      	asrs	r3, r3, #8
 80037fc:	b2db      	uxtb	r3, r3
 80037fe:	73bb      	strb	r3, [r7, #14]
    message[3] = (gps_data.latitude & 0x000000FF);
 8003800:	4b1a      	ldr	r3, [pc, #104]	; (800386c <ublox_transmit_message+0xa8>)
 8003802:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003804:	b2db      	uxtb	r3, r3
 8003806:	73fb      	strb	r3, [r7, #15]
    message[4] = (gps_data.longtitude & 0xFF000000) >> 24;
 8003808:	4b18      	ldr	r3, [pc, #96]	; (800386c <ublox_transmit_message+0xa8>)
 800380a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800380c:	0e1b      	lsrs	r3, r3, #24
 800380e:	b2db      	uxtb	r3, r3
 8003810:	743b      	strb	r3, [r7, #16]
    message[5] = (gps_data.longtitude & 0x00FF0000) >> 16;
 8003812:	4b16      	ldr	r3, [pc, #88]	; (800386c <ublox_transmit_message+0xa8>)
 8003814:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003816:	141b      	asrs	r3, r3, #16
 8003818:	b2db      	uxtb	r3, r3
 800381a:	747b      	strb	r3, [r7, #17]
    message[6] = (gps_data.longtitude & 0x0000FF00) >> 8;
 800381c:	4b13      	ldr	r3, [pc, #76]	; (800386c <ublox_transmit_message+0xa8>)
 800381e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003820:	121b      	asrs	r3, r3, #8
 8003822:	b2db      	uxtb	r3, r3
 8003824:	74bb      	strb	r3, [r7, #18]
    message[7] = (gps_data.longtitude & 0x000000FF);
 8003826:	4b11      	ldr	r3, [pc, #68]	; (800386c <ublox_transmit_message+0xa8>)
 8003828:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800382a:	b2db      	uxtb	r3, r3
 800382c:	74fb      	strb	r3, [r7, #19]
    message[8] = (gps_data.altitude & 0xFF000000) >> 24;
 800382e:	4b0f      	ldr	r3, [pc, #60]	; (800386c <ublox_transmit_message+0xa8>)
 8003830:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003832:	0e1b      	lsrs	r3, r3, #24
 8003834:	b2db      	uxtb	r3, r3
 8003836:	753b      	strb	r3, [r7, #20]
    message[9] = (gps_data.altitude & 0x00FF0000) >> 16;
 8003838:	4b0c      	ldr	r3, [pc, #48]	; (800386c <ublox_transmit_message+0xa8>)
 800383a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800383c:	141b      	asrs	r3, r3, #16
 800383e:	b2db      	uxtb	r3, r3
 8003840:	757b      	strb	r3, [r7, #21]
    message[10] = (gps_data.altitude & 0x0000FF00) >> 8;
 8003842:	4b0a      	ldr	r3, [pc, #40]	; (800386c <ublox_transmit_message+0xa8>)
 8003844:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003846:	121b      	asrs	r3, r3, #8
 8003848:	b2db      	uxtb	r3, r3
 800384a:	75bb      	strb	r3, [r7, #22]
    message[11] = (gps_data.altitude & 0x000000FF);
 800384c:	4b07      	ldr	r3, [pc, #28]	; (800386c <ublox_transmit_message+0xa8>)
 800384e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003850:	b2db      	uxtb	r3, r3
 8003852:	75fb      	strb	r3, [r7, #23]
    transmitMessage(message, 12, cmd, device);
 8003854:	79fa      	ldrb	r2, [r7, #7]
 8003856:	79bb      	ldrb	r3, [r7, #6]
 8003858:	f107 000c 	add.w	r0, r7, #12
 800385c:	210c      	movs	r1, #12
 800385e:	f001 fa1d 	bl	8004c9c <transmitMessage>
}
 8003862:	bf00      	nop
 8003864:	3718      	adds	r7, #24
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}
 800386a:	bf00      	nop
 800386c:	200002ec 	.word	0x200002ec

08003870 <ubloxInit>:

HAL_StatusTypeDef ubloxInit(void){
 8003870:	b580      	push	{r7, lr}
 8003872:	b082      	sub	sp, #8
 8003874:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef ret=0x00;
 8003876:	2300      	movs	r3, #0
 8003878:	71fb      	strb	r3, [r7, #7]
    ret = setPortOutput(COM_PORT_I2C, COM_TYPE_NMEA);
 800387a:	2102      	movs	r1, #2
 800387c:	2000      	movs	r0, #0
 800387e:	f000 f935 	bl	8003aec <setPortOutput>
 8003882:	4603      	mov	r3, r0
 8003884:	71fb      	strb	r3, [r7, #7]
    if (ret != HAL_OK)return ret;
 8003886:	79fb      	ldrb	r3, [r7, #7]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d001      	beq.n	8003890 <ubloxInit+0x20>
 800388c:	79fb      	ldrb	r3, [r7, #7]
 800388e:	e04d      	b.n	800392c <ubloxInit+0xbc>
    ret = configureNMEA(UBX_CLASS_NMEA, UBX_NMEA_GLL, NMEA_GGL_RATE, COM_PORT_I2C);
 8003890:	2300      	movs	r3, #0
 8003892:	2200      	movs	r2, #0
 8003894:	2101      	movs	r1, #1
 8003896:	20f0      	movs	r0, #240	; 0xf0
 8003898:	f000 f958 	bl	8003b4c <configureNMEA>
 800389c:	4603      	mov	r3, r0
 800389e:	71fb      	strb	r3, [r7, #7]
    if (ret != HAL_OK)return ret;
 80038a0:	79fb      	ldrb	r3, [r7, #7]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d001      	beq.n	80038aa <ubloxInit+0x3a>
 80038a6:	79fb      	ldrb	r3, [r7, #7]
 80038a8:	e040      	b.n	800392c <ubloxInit+0xbc>
    ret = configureNMEA(UBX_CLASS_NMEA, UBX_NMEA_GSA, NMEA_GSA_RATE, COM_PORT_I2C);
 80038aa:	2300      	movs	r3, #0
 80038ac:	2200      	movs	r2, #0
 80038ae:	2102      	movs	r1, #2
 80038b0:	20f0      	movs	r0, #240	; 0xf0
 80038b2:	f000 f94b 	bl	8003b4c <configureNMEA>
 80038b6:	4603      	mov	r3, r0
 80038b8:	71fb      	strb	r3, [r7, #7]
    if (ret != HAL_OK)return ret;
 80038ba:	79fb      	ldrb	r3, [r7, #7]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d001      	beq.n	80038c4 <ubloxInit+0x54>
 80038c0:	79fb      	ldrb	r3, [r7, #7]
 80038c2:	e033      	b.n	800392c <ubloxInit+0xbc>
    ret = configureNMEA(UBX_CLASS_NMEA, UBX_NMEA_GSV, NMEA_GSV_RATE, COM_PORT_I2C);
 80038c4:	2300      	movs	r3, #0
 80038c6:	2200      	movs	r2, #0
 80038c8:	2103      	movs	r1, #3
 80038ca:	20f0      	movs	r0, #240	; 0xf0
 80038cc:	f000 f93e 	bl	8003b4c <configureNMEA>
 80038d0:	4603      	mov	r3, r0
 80038d2:	71fb      	strb	r3, [r7, #7]
    if (ret != HAL_OK)return ret;
 80038d4:	79fb      	ldrb	r3, [r7, #7]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d001      	beq.n	80038de <ubloxInit+0x6e>
 80038da:	79fb      	ldrb	r3, [r7, #7]
 80038dc:	e026      	b.n	800392c <ubloxInit+0xbc>
    ret = configureNMEA(UBX_CLASS_NMEA, UBX_NMEA_RMC, NMEA_RMC_RATE, COM_PORT_I2C);
 80038de:	2300      	movs	r3, #0
 80038e0:	2200      	movs	r2, #0
 80038e2:	2104      	movs	r1, #4
 80038e4:	20f0      	movs	r0, #240	; 0xf0
 80038e6:	f000 f931 	bl	8003b4c <configureNMEA>
 80038ea:	4603      	mov	r3, r0
 80038ec:	71fb      	strb	r3, [r7, #7]
    if (ret != HAL_OK)return ret;
 80038ee:	79fb      	ldrb	r3, [r7, #7]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d001      	beq.n	80038f8 <ubloxInit+0x88>
 80038f4:	79fb      	ldrb	r3, [r7, #7]
 80038f6:	e019      	b.n	800392c <ubloxInit+0xbc>
    ret = configureNMEA(UBX_CLASS_NMEA, UBX_NMEA_VTG, NMEA_VTG_RATE, COM_PORT_I2C);
 80038f8:	2300      	movs	r3, #0
 80038fa:	2200      	movs	r2, #0
 80038fc:	2105      	movs	r1, #5
 80038fe:	20f0      	movs	r0, #240	; 0xf0
 8003900:	f000 f924 	bl	8003b4c <configureNMEA>
 8003904:	4603      	mov	r3, r0
 8003906:	71fb      	strb	r3, [r7, #7]
    if (ret != HAL_OK)return ret;
 8003908:	79fb      	ldrb	r3, [r7, #7]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d001      	beq.n	8003912 <ubloxInit+0xa2>
 800390e:	79fb      	ldrb	r3, [r7, #7]
 8003910:	e00c      	b.n	800392c <ubloxInit+0xbc>
    ret = configureNMEA(UBX_CLASS_NMEA, UBX_NMEA_GGA, NMEA_GGA_RATE, COM_PORT_I2C);
 8003912:	2300      	movs	r3, #0
 8003914:	2202      	movs	r2, #2
 8003916:	2100      	movs	r1, #0
 8003918:	20f0      	movs	r0, #240	; 0xf0
 800391a:	f000 f917 	bl	8003b4c <configureNMEA>
 800391e:	4603      	mov	r3, r0
 8003920:	71fb      	strb	r3, [r7, #7]
    if (ret != HAL_OK)return ret;
 8003922:	79fb      	ldrb	r3, [r7, #7]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d001      	beq.n	800392c <ubloxInit+0xbc>
 8003928:	79fb      	ldrb	r3, [r7, #7]
 800392a:	e7ff      	b.n	800392c <ubloxInit+0xbc>
}
 800392c:	4618      	mov	r0, r3
 800392e:	3708      	adds	r7, #8
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}

08003934 <calcChecksum>:
    memset(gps_data.sentence, 0, 75);
    return 0;
}


static void calcChecksum(messageCFG_t *msg){
 8003934:	b480      	push	{r7}
 8003936:	b085      	sub	sp, #20
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
    msg->checksumA = 0;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2200      	movs	r2, #0
 8003940:	731a      	strb	r2, [r3, #12]
    msg->checksumB = 0;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2200      	movs	r2, #0
 8003946:	735a      	strb	r2, [r3, #13]

    msg->checksumA += msg->cls;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	7b1a      	ldrb	r2, [r3, #12]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	781b      	ldrb	r3, [r3, #0]
 8003950:	4413      	add	r3, r2
 8003952:	b2da      	uxtb	r2, r3
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	731a      	strb	r2, [r3, #12]
    msg->checksumB += msg->checksumA;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	7b5a      	ldrb	r2, [r3, #13]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	7b1b      	ldrb	r3, [r3, #12]
 8003960:	4413      	add	r3, r2
 8003962:	b2da      	uxtb	r2, r3
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	735a      	strb	r2, [r3, #13]

    msg->checksumA += msg->id;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	7b1a      	ldrb	r2, [r3, #12]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	785b      	ldrb	r3, [r3, #1]
 8003970:	4413      	add	r3, r2
 8003972:	b2da      	uxtb	r2, r3
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	731a      	strb	r2, [r3, #12]
    msg->checksumB += msg->checksumA;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	7b5a      	ldrb	r2, [r3, #13]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	7b1b      	ldrb	r3, [r3, #12]
 8003980:	4413      	add	r3, r2
 8003982:	b2da      	uxtb	r2, r3
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	735a      	strb	r2, [r3, #13]

    msg->checksumA += (msg->len & 0xFF);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	7b1a      	ldrb	r2, [r3, #12]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	885b      	ldrh	r3, [r3, #2]
 8003990:	b2db      	uxtb	r3, r3
 8003992:	4413      	add	r3, r2
 8003994:	b2da      	uxtb	r2, r3
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	731a      	strb	r2, [r3, #12]
    msg->checksumB += msg->checksumA;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	7b5a      	ldrb	r2, [r3, #13]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	7b1b      	ldrb	r3, [r3, #12]
 80039a2:	4413      	add	r3, r2
 80039a4:	b2da      	uxtb	r2, r3
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	735a      	strb	r2, [r3, #13]

    msg->checksumA += (msg->len >> 8);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	7b1a      	ldrb	r2, [r3, #12]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	885b      	ldrh	r3, [r3, #2]
 80039b2:	0a1b      	lsrs	r3, r3, #8
 80039b4:	b29b      	uxth	r3, r3
 80039b6:	b2db      	uxtb	r3, r3
 80039b8:	4413      	add	r3, r2
 80039ba:	b2da      	uxtb	r2, r3
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	731a      	strb	r2, [r3, #12]
    msg->checksumB += msg->checksumA;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	7b5a      	ldrb	r2, [r3, #13]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	7b1b      	ldrb	r3, [r3, #12]
 80039c8:	4413      	add	r3, r2
 80039ca:	b2da      	uxtb	r2, r3
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	735a      	strb	r2, [r3, #13]

    uint8_t i;
    for (i=0; i < msg->len; i++)
 80039d0:	2300      	movs	r3, #0
 80039d2:	73fb      	strb	r3, [r7, #15]
 80039d4:	e015      	b.n	8003a02 <calcChecksum+0xce>
    {
        msg->checksumA += msg->payload[i];
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	7b1a      	ldrb	r2, [r3, #12]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6899      	ldr	r1, [r3, #8]
 80039de:	7bfb      	ldrb	r3, [r7, #15]
 80039e0:	440b      	add	r3, r1
 80039e2:	781b      	ldrb	r3, [r3, #0]
 80039e4:	4413      	add	r3, r2
 80039e6:	b2da      	uxtb	r2, r3
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	731a      	strb	r2, [r3, #12]
        msg->checksumB += msg->checksumA;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	7b5a      	ldrb	r2, [r3, #13]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	7b1b      	ldrb	r3, [r3, #12]
 80039f4:	4413      	add	r3, r2
 80039f6:	b2da      	uxtb	r2, r3
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	735a      	strb	r2, [r3, #13]
    for (i=0; i < msg->len; i++)
 80039fc:	7bfb      	ldrb	r3, [r7, #15]
 80039fe:	3301      	adds	r3, #1
 8003a00:	73fb      	strb	r3, [r7, #15]
 8003a02:	7bfb      	ldrb	r3, [r7, #15]
 8003a04:	b29a      	uxth	r2, r3
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	885b      	ldrh	r3, [r3, #2]
 8003a0a:	429a      	cmp	r2, r3
 8003a0c:	d3e3      	bcc.n	80039d6 <calcChecksum+0xa2>
    }
}
 8003a0e:	bf00      	nop
 8003a10:	bf00      	nop
 8003a12:	3714      	adds	r7, #20
 8003a14:	46bd      	mov	sp, r7
 8003a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1a:	4770      	bx	lr

08003a1c <sendI2Cmessage>:

HAL_StatusTypeDef sendI2Cmessage(void){
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b092      	sub	sp, #72	; 0x48
 8003a20:	af02      	add	r7, sp, #8
    uint8_t message[60] = {0};
 8003a22:	2300      	movs	r3, #0
 8003a24:	603b      	str	r3, [r7, #0]
 8003a26:	1d3b      	adds	r3, r7, #4
 8003a28:	2238      	movs	r2, #56	; 0x38
 8003a2a:	2100      	movs	r1, #0
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f00c f8bd 	bl	800fbac <memset>
    uint8_t len = config_message.len + 8;
 8003a32:	4b2c      	ldr	r3, [pc, #176]	; (8003ae4 <sendI2Cmessage+0xc8>)
 8003a34:	885b      	ldrh	r3, [r3, #2]
 8003a36:	b2db      	uxtb	r3, r3
 8003a38:	3308      	adds	r3, #8
 8003a3a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    message[0] = UBX_SYNCH_1;
 8003a3e:	23b5      	movs	r3, #181	; 0xb5
 8003a40:	703b      	strb	r3, [r7, #0]
    message[1] = UBX_SYNCH_2;
 8003a42:	2362      	movs	r3, #98	; 0x62
 8003a44:	707b      	strb	r3, [r7, #1]
    message[2] = config_message.cls;
 8003a46:	4b27      	ldr	r3, [pc, #156]	; (8003ae4 <sendI2Cmessage+0xc8>)
 8003a48:	781b      	ldrb	r3, [r3, #0]
 8003a4a:	70bb      	strb	r3, [r7, #2]
    message[3] = config_message.id;
 8003a4c:	4b25      	ldr	r3, [pc, #148]	; (8003ae4 <sendI2Cmessage+0xc8>)
 8003a4e:	785b      	ldrb	r3, [r3, #1]
 8003a50:	70fb      	strb	r3, [r7, #3]
    message[4] = (config_message.len & 0xFF);
 8003a52:	4b24      	ldr	r3, [pc, #144]	; (8003ae4 <sendI2Cmessage+0xc8>)
 8003a54:	885b      	ldrh	r3, [r3, #2]
 8003a56:	b2db      	uxtb	r3, r3
 8003a58:	713b      	strb	r3, [r7, #4]
    message[5] = (config_message.len >> 8);
 8003a5a:	4b22      	ldr	r3, [pc, #136]	; (8003ae4 <sendI2Cmessage+0xc8>)
 8003a5c:	885b      	ldrh	r3, [r3, #2]
 8003a5e:	0a1b      	lsrs	r3, r3, #8
 8003a60:	b29b      	uxth	r3, r3
 8003a62:	b2db      	uxtb	r3, r3
 8003a64:	717b      	strb	r3, [r7, #5]
    uint8_t i;
    for ( i=0 ; i < config_message.len ; i++){
 8003a66:	2300      	movs	r3, #0
 8003a68:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8003a6c:	e011      	b.n	8003a92 <sendI2Cmessage+0x76>
        message[6+i] = config_message.payload[i];
 8003a6e:	4b1d      	ldr	r3, [pc, #116]	; (8003ae4 <sendI2Cmessage+0xc8>)
 8003a70:	689a      	ldr	r2, [r3, #8]
 8003a72:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003a76:	441a      	add	r2, r3
 8003a78:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003a7c:	3306      	adds	r3, #6
 8003a7e:	7812      	ldrb	r2, [r2, #0]
 8003a80:	3340      	adds	r3, #64	; 0x40
 8003a82:	443b      	add	r3, r7
 8003a84:	f803 2c40 	strb.w	r2, [r3, #-64]
    for ( i=0 ; i < config_message.len ; i++){
 8003a88:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003a8c:	3301      	adds	r3, #1
 8003a8e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8003a92:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003a96:	b29a      	uxth	r2, r3
 8003a98:	4b12      	ldr	r3, [pc, #72]	; (8003ae4 <sendI2Cmessage+0xc8>)
 8003a9a:	885b      	ldrh	r3, [r3, #2]
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	d3e6      	bcc.n	8003a6e <sendI2Cmessage+0x52>
    }
    message[6+i] = config_message.checksumA;
 8003aa0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003aa4:	3306      	adds	r3, #6
 8003aa6:	4a0f      	ldr	r2, [pc, #60]	; (8003ae4 <sendI2Cmessage+0xc8>)
 8003aa8:	7b12      	ldrb	r2, [r2, #12]
 8003aaa:	3340      	adds	r3, #64	; 0x40
 8003aac:	443b      	add	r3, r7
 8003aae:	f803 2c40 	strb.w	r2, [r3, #-64]
    message[7+i] = config_message.checksumB;
 8003ab2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003ab6:	3307      	adds	r3, #7
 8003ab8:	4a0a      	ldr	r2, [pc, #40]	; (8003ae4 <sendI2Cmessage+0xc8>)
 8003aba:	7b52      	ldrb	r2, [r2, #13]
 8003abc:	3340      	adds	r3, #64	; 0x40
 8003abe:	443b      	add	r3, r7
 8003ac0:	f803 2c40 	strb.w	r2, [r3, #-64]
    return HAL_I2C_Master_Transmit(&hi2c1, UBLOX_M9N, message, len, 50);
 8003ac4:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8003ac8:	b29b      	uxth	r3, r3
 8003aca:	463a      	mov	r2, r7
 8003acc:	2132      	movs	r1, #50	; 0x32
 8003ace:	9100      	str	r1, [sp, #0]
 8003ad0:	2184      	movs	r1, #132	; 0x84
 8003ad2:	4805      	ldr	r0, [pc, #20]	; (8003ae8 <sendI2Cmessage+0xcc>)
 8003ad4:	f002 ff9e 	bl	8006a14 <HAL_I2C_Master_Transmit>
 8003ad8:	4603      	mov	r3, r0
}
 8003ada:	4618      	mov	r0, r3
 8003adc:	3740      	adds	r7, #64	; 0x40
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}
 8003ae2:	bf00      	nop
 8003ae4:	20000000 	.word	0x20000000
 8003ae8:	20000298 	.word	0x20000298

08003aec <setPortOutput>:

HAL_StatusTypeDef setPortOutput(uint8_t portSelect, uint8_t streamSettings){
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b088      	sub	sp, #32
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	4603      	mov	r3, r0
 8003af4:	460a      	mov	r2, r1
 8003af6:	71fb      	strb	r3, [r7, #7]
 8003af8:	4613      	mov	r3, r2
 8003afa:	71bb      	strb	r3, [r7, #6]
    config_message.cls = UBX_CLASS_CFG;
 8003afc:	4b12      	ldr	r3, [pc, #72]	; (8003b48 <setPortOutput+0x5c>)
 8003afe:	2206      	movs	r2, #6
 8003b00:	701a      	strb	r2, [r3, #0]
    config_message.id =  UBX_CFG_PRT;
 8003b02:	4b11      	ldr	r3, [pc, #68]	; (8003b48 <setPortOutput+0x5c>)
 8003b04:	2200      	movs	r2, #0
 8003b06:	705a      	strb	r2, [r3, #1]
    config_message.len = 20;
 8003b08:	4b0f      	ldr	r3, [pc, #60]	; (8003b48 <setPortOutput+0x5c>)
 8003b0a:	2214      	movs	r2, #20
 8003b0c:	805a      	strh	r2, [r3, #2]
    uint8_t payloadCfg[20] = {0};
 8003b0e:	2300      	movs	r3, #0
 8003b10:	60fb      	str	r3, [r7, #12]
 8003b12:	f107 0310 	add.w	r3, r7, #16
 8003b16:	2200      	movs	r2, #0
 8003b18:	601a      	str	r2, [r3, #0]
 8003b1a:	605a      	str	r2, [r3, #4]
 8003b1c:	609a      	str	r2, [r3, #8]
 8003b1e:	60da      	str	r2, [r3, #12]
    payloadCfg[4] = 0x84;
 8003b20:	2384      	movs	r3, #132	; 0x84
 8003b22:	743b      	strb	r3, [r7, #16]
    payloadCfg[12] = 0x23;
 8003b24:	2323      	movs	r3, #35	; 0x23
 8003b26:	763b      	strb	r3, [r7, #24]
    payloadCfg[14] = streamSettings;
 8003b28:	79bb      	ldrb	r3, [r7, #6]
 8003b2a:	76bb      	strb	r3, [r7, #26]
    config_message.payload = payloadCfg;
 8003b2c:	4a06      	ldr	r2, [pc, #24]	; (8003b48 <setPortOutput+0x5c>)
 8003b2e:	f107 030c 	add.w	r3, r7, #12
 8003b32:	6093      	str	r3, [r2, #8]
    calcChecksum(&config_message);
 8003b34:	4804      	ldr	r0, [pc, #16]	; (8003b48 <setPortOutput+0x5c>)
 8003b36:	f7ff fefd 	bl	8003934 <calcChecksum>
    return sendI2Cmessage();
 8003b3a:	f7ff ff6f 	bl	8003a1c <sendI2Cmessage>
 8003b3e:	4603      	mov	r3, r0
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	3720      	adds	r7, #32
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}
 8003b48:	20000000 	.word	0x20000000

08003b4c <configureNMEA>:
    message[8] = config_message.checksumA;
    message[9] = config_message.checksumB;
    return UbloxI2CWriteReadPolling(UBLOX_M9N, message, 10, rx_mes, 11, 100);
}

HAL_StatusTypeDef configureNMEA(uint8_t msgClass, uint8_t msgID, uint8_t rate, uint8_t portID){
 8003b4c:	b590      	push	{r4, r7, lr}
 8003b4e:	b085      	sub	sp, #20
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	4604      	mov	r4, r0
 8003b54:	4608      	mov	r0, r1
 8003b56:	4611      	mov	r1, r2
 8003b58:	461a      	mov	r2, r3
 8003b5a:	4623      	mov	r3, r4
 8003b5c:	71fb      	strb	r3, [r7, #7]
 8003b5e:	4603      	mov	r3, r0
 8003b60:	71bb      	strb	r3, [r7, #6]
 8003b62:	460b      	mov	r3, r1
 8003b64:	717b      	strb	r3, [r7, #5]
 8003b66:	4613      	mov	r3, r2
 8003b68:	713b      	strb	r3, [r7, #4]
    config_message.cls = UBX_CLASS_CFG;
 8003b6a:	4b10      	ldr	r3, [pc, #64]	; (8003bac <configureNMEA+0x60>)
 8003b6c:	2206      	movs	r2, #6
 8003b6e:	701a      	strb	r2, [r3, #0]
    config_message.id = UBX_CFG_MSG;
 8003b70:	4b0e      	ldr	r3, [pc, #56]	; (8003bac <configureNMEA+0x60>)
 8003b72:	2201      	movs	r2, #1
 8003b74:	705a      	strb	r2, [r3, #1]
    config_message.len = 8;
 8003b76:	4b0d      	ldr	r3, [pc, #52]	; (8003bac <configureNMEA+0x60>)
 8003b78:	2208      	movs	r2, #8
 8003b7a:	805a      	strh	r2, [r3, #2]
    uint8_t payloadCfg[8] = {0};
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	60bb      	str	r3, [r7, #8]
 8003b80:	2300      	movs	r3, #0
 8003b82:	60fb      	str	r3, [r7, #12]
    payloadCfg[0] = msgClass;
 8003b84:	79fb      	ldrb	r3, [r7, #7]
 8003b86:	723b      	strb	r3, [r7, #8]
    payloadCfg[1] = msgID;
 8003b88:	79bb      	ldrb	r3, [r7, #6]
 8003b8a:	727b      	strb	r3, [r7, #9]
    payloadCfg[2] = rate;
 8003b8c:	797b      	ldrb	r3, [r7, #5]
 8003b8e:	72bb      	strb	r3, [r7, #10]
    config_message.payload = payloadCfg;
 8003b90:	4a06      	ldr	r2, [pc, #24]	; (8003bac <configureNMEA+0x60>)
 8003b92:	f107 0308 	add.w	r3, r7, #8
 8003b96:	6093      	str	r3, [r2, #8]
    calcChecksum(&config_message);
 8003b98:	4804      	ldr	r0, [pc, #16]	; (8003bac <configureNMEA+0x60>)
 8003b9a:	f7ff fecb 	bl	8003934 <calcChecksum>
    return sendI2Cmessage();
 8003b9e:	f7ff ff3d 	bl	8003a1c <sendI2Cmessage>
 8003ba2:	4603      	mov	r3, r0
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	3714      	adds	r7, #20
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bd90      	pop	{r4, r7, pc}
 8003bac:	20000000 	.word	0x20000000

08003bb0 <powerManageCfgGet>:
    if (res != HAL_OK)return res;
    return data[7];
}


HAL_StatusTypeDef powerManageCfgGet(uint8_t *payload){
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b088      	sub	sp, #32
 8003bb4:	af02      	add	r7, sp, #8
 8003bb6:	6078      	str	r0, [r7, #4]
    config_message.cls = UBX_CLASS_CFG;
 8003bb8:	4b1e      	ldr	r3, [pc, #120]	; (8003c34 <powerManageCfgGet+0x84>)
 8003bba:	2206      	movs	r2, #6
 8003bbc:	701a      	strb	r2, [r3, #0]
    config_message.id = UBX_CFG_PM2;
 8003bbe:	4b1d      	ldr	r3, [pc, #116]	; (8003c34 <powerManageCfgGet+0x84>)
 8003bc0:	223b      	movs	r2, #59	; 0x3b
 8003bc2:	705a      	strb	r2, [r3, #1]
    config_message.len = 0;
 8003bc4:	4b1b      	ldr	r3, [pc, #108]	; (8003c34 <powerManageCfgGet+0x84>)
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	805a      	strh	r2, [r3, #2]
    calcChecksum(&config_message);
 8003bca:	481a      	ldr	r0, [pc, #104]	; (8003c34 <powerManageCfgGet+0x84>)
 8003bcc:	f7ff feb2 	bl	8003934 <calcChecksum>
    uint8_t message[10] = {0};
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	60fb      	str	r3, [r7, #12]
 8003bd4:	f107 0310 	add.w	r3, r7, #16
 8003bd8:	2200      	movs	r2, #0
 8003bda:	601a      	str	r2, [r3, #0]
 8003bdc:	809a      	strh	r2, [r3, #4]
    message[0] = UBX_SYNCH_1;
 8003bde:	23b5      	movs	r3, #181	; 0xb5
 8003be0:	733b      	strb	r3, [r7, #12]
    message[1] = UBX_SYNCH_2;
 8003be2:	2362      	movs	r3, #98	; 0x62
 8003be4:	737b      	strb	r3, [r7, #13]
    message[2] = config_message.cls;
 8003be6:	4b13      	ldr	r3, [pc, #76]	; (8003c34 <powerManageCfgGet+0x84>)
 8003be8:	781b      	ldrb	r3, [r3, #0]
 8003bea:	73bb      	strb	r3, [r7, #14]
    message[3] = config_message.id;
 8003bec:	4b11      	ldr	r3, [pc, #68]	; (8003c34 <powerManageCfgGet+0x84>)
 8003bee:	785b      	ldrb	r3, [r3, #1]
 8003bf0:	73fb      	strb	r3, [r7, #15]
    message[4] = (config_message.len & 0xFF);
 8003bf2:	4b10      	ldr	r3, [pc, #64]	; (8003c34 <powerManageCfgGet+0x84>)
 8003bf4:	885b      	ldrh	r3, [r3, #2]
 8003bf6:	b2db      	uxtb	r3, r3
 8003bf8:	743b      	strb	r3, [r7, #16]
    message[5] = (config_message.len >> 8);
 8003bfa:	4b0e      	ldr	r3, [pc, #56]	; (8003c34 <powerManageCfgGet+0x84>)
 8003bfc:	885b      	ldrh	r3, [r3, #2]
 8003bfe:	0a1b      	lsrs	r3, r3, #8
 8003c00:	b29b      	uxth	r3, r3
 8003c02:	b2db      	uxtb	r3, r3
 8003c04:	747b      	strb	r3, [r7, #17]
    message[6] = config_message.checksumA;
 8003c06:	4b0b      	ldr	r3, [pc, #44]	; (8003c34 <powerManageCfgGet+0x84>)
 8003c08:	7b1b      	ldrb	r3, [r3, #12]
 8003c0a:	74bb      	strb	r3, [r7, #18]
    message[7] = config_message.checksumB;
 8003c0c:	4b09      	ldr	r3, [pc, #36]	; (8003c34 <powerManageCfgGet+0x84>)
 8003c0e:	7b5b      	ldrb	r3, [r3, #13]
 8003c10:	74fb      	strb	r3, [r7, #19]
    return UbloxI2CWriteReadPolling(UBLOX_M9N, message, 8, payload, 56, 200);
 8003c12:	f107 010c 	add.w	r1, r7, #12
 8003c16:	23c8      	movs	r3, #200	; 0xc8
 8003c18:	9301      	str	r3, [sp, #4]
 8003c1a:	2338      	movs	r3, #56	; 0x38
 8003c1c:	9300      	str	r3, [sp, #0]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2208      	movs	r2, #8
 8003c22:	2084      	movs	r0, #132	; 0x84
 8003c24:	f000 f864 	bl	8003cf0 <UbloxI2CWriteReadPolling>
 8003c28:	4603      	mov	r3, r0
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3718      	adds	r7, #24
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}
 8003c32:	bf00      	nop
 8003c34:	20000000 	.word	0x20000000

08003c38 <powerManageCfgSet>:


HAL_StatusTypeDef powerManageCfgSet(uint8_t maxAckTime){
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b09e      	sub	sp, #120	; 0x78
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	4603      	mov	r3, r0
 8003c40:	71fb      	strb	r3, [r7, #7]
    uint8_t payloadCfg[48] = {0};
 8003c42:	2300      	movs	r3, #0
 8003c44:	647b      	str	r3, [r7, #68]	; 0x44
 8003c46:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003c4a:	222c      	movs	r2, #44	; 0x2c
 8003c4c:	2100      	movs	r1, #0
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f00b ffac 	bl	800fbac <memset>
    uint8_t payload[56] = {0};
 8003c54:	2300      	movs	r3, #0
 8003c56:	60fb      	str	r3, [r7, #12]
 8003c58:	f107 0310 	add.w	r3, r7, #16
 8003c5c:	2234      	movs	r2, #52	; 0x34
 8003c5e:	2100      	movs	r1, #0
 8003c60:	4618      	mov	r0, r3
 8003c62:	f00b ffa3 	bl	800fbac <memset>
    uint8_t i;
    uint8_t res = HAL_OK;
 8003c66:	2300      	movs	r3, #0
 8003c68:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
    res = powerManageCfgGet(payload);
 8003c6c:	f107 030c 	add.w	r3, r7, #12
 8003c70:	4618      	mov	r0, r3
 8003c72:	f7ff ff9d 	bl	8003bb0 <powerManageCfgGet>
 8003c76:	4603      	mov	r3, r0
 8003c78:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
//    if ( res != HAL_OK) return res;
    for(i=0;i<=48;i++){
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003c82:	e011      	b.n	8003ca8 <powerManageCfgSet+0x70>
    	payloadCfg[i] = payload[i+6];
 8003c84:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8003c88:	1d9a      	adds	r2, r3, #6
 8003c8a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8003c8e:	3278      	adds	r2, #120	; 0x78
 8003c90:	443a      	add	r2, r7
 8003c92:	f812 2c6c 	ldrb.w	r2, [r2, #-108]
 8003c96:	3378      	adds	r3, #120	; 0x78
 8003c98:	443b      	add	r3, r7
 8003c9a:	f803 2c34 	strb.w	r2, [r3, #-52]
    for(i=0;i<=48;i++){
 8003c9e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8003ca2:	3301      	adds	r3, #1
 8003ca4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003ca8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8003cac:	2b30      	cmp	r3, #48	; 0x30
 8003cae:	d9e9      	bls.n	8003c84 <powerManageCfgSet+0x4c>
    }
    config_message.cls = UBX_CLASS_CFG;
 8003cb0:	4b0e      	ldr	r3, [pc, #56]	; (8003cec <powerManageCfgSet+0xb4>)
 8003cb2:	2206      	movs	r2, #6
 8003cb4:	701a      	strb	r2, [r3, #0]
    config_message.id =  UBX_CFG_PM2;
 8003cb6:	4b0d      	ldr	r3, [pc, #52]	; (8003cec <powerManageCfgSet+0xb4>)
 8003cb8:	223b      	movs	r2, #59	; 0x3b
 8003cba:	705a      	strb	r2, [r3, #1]
    config_message.len = 48;
 8003cbc:	4b0b      	ldr	r3, [pc, #44]	; (8003cec <powerManageCfgSet+0xb4>)
 8003cbe:	2230      	movs	r2, #48	; 0x30
 8003cc0:	805a      	strh	r2, [r3, #2]
    payloadCfg[2] = maxAckTime;
 8003cc2:	79fb      	ldrb	r3, [r7, #7]
 8003cc4:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    payloadCfg[2] = 67;
 8003cc8:	2343      	movs	r3, #67	; 0x43
 8003cca:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    config_message.payload = payloadCfg;
 8003cce:	4a07      	ldr	r2, [pc, #28]	; (8003cec <powerManageCfgSet+0xb4>)
 8003cd0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003cd4:	6093      	str	r3, [r2, #8]
    calcChecksum(&config_message);
 8003cd6:	4805      	ldr	r0, [pc, #20]	; (8003cec <powerManageCfgSet+0xb4>)
 8003cd8:	f7ff fe2c 	bl	8003934 <calcChecksum>
    return sendI2Cmessage();
 8003cdc:	f7ff fe9e 	bl	8003a1c <sendI2Cmessage>
 8003ce0:	4603      	mov	r3, r0
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3778      	adds	r7, #120	; 0x78
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}
 8003cea:	bf00      	nop
 8003cec:	20000000 	.word	0x20000000

08003cf0 <UbloxI2CWriteReadPolling>:
}


HAL_StatusTypeDef UbloxI2CWriteReadPolling(uint16_t DevAddress, uint8_t *TData, uint16_t TDataLen,
										uint8_t *RData, uint16_t RDataLen, uint32_t Timeout)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b088      	sub	sp, #32
 8003cf4:	af02      	add	r7, sp, #8
 8003cf6:	60b9      	str	r1, [r7, #8]
 8003cf8:	607b      	str	r3, [r7, #4]
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	81fb      	strh	r3, [r7, #14]
 8003cfe:	4613      	mov	r3, r2
 8003d00:	81bb      	strh	r3, [r7, #12]
	HAL_StatusTypeDef ret = 0x00;
 8003d02:	2300      	movs	r3, #0
 8003d04:	75fb      	strb	r3, [r7, #23]

	ret = HAL_I2C_Master_Transmit(&hi2c1, DevAddress, TData, TDataLen, Timeout);
 8003d06:	89ba      	ldrh	r2, [r7, #12]
 8003d08:	89f9      	ldrh	r1, [r7, #14]
 8003d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d0c:	9300      	str	r3, [sp, #0]
 8003d0e:	4613      	mov	r3, r2
 8003d10:	68ba      	ldr	r2, [r7, #8]
 8003d12:	4810      	ldr	r0, [pc, #64]	; (8003d54 <UbloxI2CWriteReadPolling+0x64>)
 8003d14:	f002 fe7e 	bl	8006a14 <HAL_I2C_Master_Transmit>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	75fb      	strb	r3, [r7, #23]
	if ( ret != HAL_OK ) {
 8003d1c:	7dfb      	ldrb	r3, [r7, #23]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d004      	beq.n	8003d2c <UbloxI2CWriteReadPolling+0x3c>
	  return (0x10 | ret);
 8003d22:	7dfb      	ldrb	r3, [r7, #23]
 8003d24:	f043 0310 	orr.w	r3, r3, #16
 8003d28:	b2db      	uxtb	r3, r3
 8003d2a:	e00e      	b.n	8003d4a <UbloxI2CWriteReadPolling+0x5a>
	}
	else {
		// Read Response
		ret = HAL_I2C_Master_Receive(&hi2c1, DevAddress, RData, RDataLen, Timeout);
 8003d2c:	8c3a      	ldrh	r2, [r7, #32]
 8003d2e:	89f9      	ldrh	r1, [r7, #14]
 8003d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d32:	9300      	str	r3, [sp, #0]
 8003d34:	4613      	mov	r3, r2
 8003d36:	687a      	ldr	r2, [r7, #4]
 8003d38:	4806      	ldr	r0, [pc, #24]	; (8003d54 <UbloxI2CWriteReadPolling+0x64>)
 8003d3a:	f002 ff5f 	bl	8006bfc <HAL_I2C_Master_Receive>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	75fb      	strb	r3, [r7, #23]
		return (0x20 |ret);
 8003d42:	7dfb      	ldrb	r3, [r7, #23]
 8003d44:	f043 0320 	orr.w	r3, r3, #32
 8003d48:	b2db      	uxtb	r3, r3
	}
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	3718      	adds	r7, #24
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}
 8003d52:	bf00      	nop
 8003d54:	20000298 	.word	0x20000298

08003d58 <tick_gyro>:

uint16_t gyro_offset_counter = 0;
gyro_data_t gyro_sum;
gyro_data_t gyro_mean;

void tick_gyro(mems_data_t * mems_data){
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b082      	sub	sp, #8
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
    gyro_read(mems_data);
 8003d60:	6878      	ldr	r0, [r7, #4]
 8003d62:	f000 f8f3 	bl	8003f4c <gyro_read>
    lsm6_acc_read(mems_data);
 8003d66:	6878      	ldr	r0, [r7, #4]
 8003d68:	f000 f974 	bl	8004054 <lsm6_acc_read>
    lis3_magn_read(mems_data);
 8003d6c:	6878      	ldr	r0, [r7, #4]
 8003d6e:	f000 f9d7 	bl	8004120 <lis3_magn_read>
//    osDelay(5);
//    debugPrintMEMS(mems_data);
}
 8003d72:	bf00      	nop
 8003d74:	3708      	adds	r7, #8
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}
	...

08003d7c <lsm6_bus_init>:


uint8_t lsm6_bus_init(void)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 8003d80:	4b1b      	ldr	r3, [pc, #108]	; (8003df0 <lsm6_bus_init+0x74>)
 8003d82:	4a1c      	ldr	r2, [pc, #112]	; (8003df4 <lsm6_bus_init+0x78>)
 8003d84:	601a      	str	r2, [r3, #0]
//hi2c2.Init.Timing = 0x00B03FDB;
  hi2c2.Init.Timing = 0x307075B1;
 8003d86:	4b1a      	ldr	r3, [pc, #104]	; (8003df0 <lsm6_bus_init+0x74>)
 8003d88:	4a1b      	ldr	r2, [pc, #108]	; (8003df8 <lsm6_bus_init+0x7c>)
 8003d8a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8003d8c:	4b18      	ldr	r3, [pc, #96]	; (8003df0 <lsm6_bus_init+0x74>)
 8003d8e:	2200      	movs	r2, #0
 8003d90:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003d92:	4b17      	ldr	r3, [pc, #92]	; (8003df0 <lsm6_bus_init+0x74>)
 8003d94:	2201      	movs	r2, #1
 8003d96:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003d98:	4b15      	ldr	r3, [pc, #84]	; (8003df0 <lsm6_bus_init+0x74>)
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8003d9e:	4b14      	ldr	r3, [pc, #80]	; (8003df0 <lsm6_bus_init+0x74>)
 8003da0:	2200      	movs	r2, #0
 8003da2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003da4:	4b12      	ldr	r3, [pc, #72]	; (8003df0 <lsm6_bus_init+0x74>)
 8003da6:	2200      	movs	r2, #0
 8003da8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003daa:	4b11      	ldr	r3, [pc, #68]	; (8003df0 <lsm6_bus_init+0x74>)
 8003dac:	2200      	movs	r2, #0
 8003dae:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003db0:	4b0f      	ldr	r3, [pc, #60]	; (8003df0 <lsm6_bus_init+0x74>)
 8003db2:	2200      	movs	r2, #0
 8003db4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8003db6:	480e      	ldr	r0, [pc, #56]	; (8003df0 <lsm6_bus_init+0x74>)
 8003db8:	f002 fd9d 	bl	80068f6 <HAL_I2C_Init>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d001      	beq.n	8003dc6 <lsm6_bus_init+0x4a>
  {
    return 1;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e012      	b.n	8003dec <lsm6_bus_init+0x70>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003dc6:	2100      	movs	r1, #0
 8003dc8:	4809      	ldr	r0, [pc, #36]	; (8003df0 <lsm6_bus_init+0x74>)
 8003dca:	f003 fd75 	bl	80078b8 <HAL_I2CEx_ConfigAnalogFilter>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d001      	beq.n	8003dd8 <lsm6_bus_init+0x5c>
  {
    return 2;
 8003dd4:	2302      	movs	r3, #2
 8003dd6:	e009      	b.n	8003dec <lsm6_bus_init+0x70>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8003dd8:	2100      	movs	r1, #0
 8003dda:	4805      	ldr	r0, [pc, #20]	; (8003df0 <lsm6_bus_init+0x74>)
 8003ddc:	f003 fdb7 	bl	800794e <HAL_I2CEx_ConfigDigitalFilter>
 8003de0:	4603      	mov	r3, r0
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d001      	beq.n	8003dea <lsm6_bus_init+0x6e>
  {
    return 3;
 8003de6:	2303      	movs	r3, #3
 8003de8:	e000      	b.n	8003dec <lsm6_bus_init+0x70>
  }
  return 0;
 8003dea:	2300      	movs	r3, #0

}
 8003dec:	4618      	mov	r0, r3
 8003dee:	bd80      	pop	{r7, pc}
 8003df0:	20000364 	.word	0x20000364
 8003df4:	40005800 	.word	0x40005800
 8003df8:	307075b1 	.word	0x307075b1

08003dfc <gyro_init>:
		return res;
	}
	return addr;
}

HAL_StatusTypeDef gyro_init(void){
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b086      	sub	sp, #24
 8003e00:	af04      	add	r7, sp, #16
    uint8_t ctrl2_val = 0x50;   //gyro 208Hz-250dps
 8003e02:	2350      	movs	r3, #80	; 0x50
 8003e04:	71fb      	strb	r3, [r7, #7]
    uint8_t ctrl3_val = 0x44;   // block data update - reg addr auto incr
 8003e06:	2344      	movs	r3, #68	; 0x44
 8003e08:	71bb      	strb	r3, [r7, #6]
    HAL_I2C_Mem_Write(&hi2c2, LSM6, CTRL2_G, I2C_MEMADD_SIZE_8BIT, &ctrl2_val, 1, 20);
 8003e0a:	2314      	movs	r3, #20
 8003e0c:	9302      	str	r3, [sp, #8]
 8003e0e:	2301      	movs	r3, #1
 8003e10:	9301      	str	r3, [sp, #4]
 8003e12:	1dfb      	adds	r3, r7, #7
 8003e14:	9300      	str	r3, [sp, #0]
 8003e16:	2301      	movs	r3, #1
 8003e18:	2211      	movs	r2, #17
 8003e1a:	21d4      	movs	r1, #212	; 0xd4
 8003e1c:	4809      	ldr	r0, [pc, #36]	; (8003e44 <gyro_init+0x48>)
 8003e1e:	f002 ffe3 	bl	8006de8 <HAL_I2C_Mem_Write>
    return HAL_I2C_Mem_Write(&hi2c2, LSM6, CTRL3_C, I2C_MEMADD_SIZE_8BIT, &ctrl3_val, 1, 20);
 8003e22:	2314      	movs	r3, #20
 8003e24:	9302      	str	r3, [sp, #8]
 8003e26:	2301      	movs	r3, #1
 8003e28:	9301      	str	r3, [sp, #4]
 8003e2a:	1dbb      	adds	r3, r7, #6
 8003e2c:	9300      	str	r3, [sp, #0]
 8003e2e:	2301      	movs	r3, #1
 8003e30:	2212      	movs	r2, #18
 8003e32:	21d4      	movs	r1, #212	; 0xd4
 8003e34:	4803      	ldr	r0, [pc, #12]	; (8003e44 <gyro_init+0x48>)
 8003e36:	f002 ffd7 	bl	8006de8 <HAL_I2C_Mem_Write>
 8003e3a:	4603      	mov	r3, r0
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	3708      	adds	r7, #8
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd80      	pop	{r7, pc}
 8003e44:	20000364 	.word	0x20000364

08003e48 <lsm6_acc_init>:

HAL_StatusTypeDef lsm6_acc_init(void){
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b086      	sub	sp, #24
 8003e4c:	af04      	add	r7, sp, #16
    uint8_t ctrl1_val = 0x50;   //acc off
 8003e4e:	2350      	movs	r3, #80	; 0x50
 8003e50:	71fb      	strb	r3, [r7, #7]
    uint8_t ctrl10_val = 0x20; //Enable timestamp
 8003e52:	2320      	movs	r3, #32
 8003e54:	71bb      	strb	r3, [r7, #6]
    HAL_I2C_Mem_Write(&hi2c2, LSM6, CTRL1_XL, I2C_MEMADD_SIZE_8BIT, &ctrl1_val, 1, 20);
 8003e56:	2314      	movs	r3, #20
 8003e58:	9302      	str	r3, [sp, #8]
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	9301      	str	r3, [sp, #4]
 8003e5e:	1dfb      	adds	r3, r7, #7
 8003e60:	9300      	str	r3, [sp, #0]
 8003e62:	2301      	movs	r3, #1
 8003e64:	2210      	movs	r2, #16
 8003e66:	21d4      	movs	r1, #212	; 0xd4
 8003e68:	4809      	ldr	r0, [pc, #36]	; (8003e90 <lsm6_acc_init+0x48>)
 8003e6a:	f002 ffbd 	bl	8006de8 <HAL_I2C_Mem_Write>
    return HAL_I2C_Mem_Write(&hi2c2, LSM6, CTRL10_C, I2C_MEMADD_SIZE_8BIT, &ctrl10_val, 1, 20);
 8003e6e:	2314      	movs	r3, #20
 8003e70:	9302      	str	r3, [sp, #8]
 8003e72:	2301      	movs	r3, #1
 8003e74:	9301      	str	r3, [sp, #4]
 8003e76:	1dbb      	adds	r3, r7, #6
 8003e78:	9300      	str	r3, [sp, #0]
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	2219      	movs	r2, #25
 8003e7e:	21d4      	movs	r1, #212	; 0xd4
 8003e80:	4803      	ldr	r0, [pc, #12]	; (8003e90 <lsm6_acc_init+0x48>)
 8003e82:	f002 ffb1 	bl	8006de8 <HAL_I2C_Mem_Write>
 8003e86:	4603      	mov	r3, r0
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	3708      	adds	r7, #8
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bd80      	pop	{r7, pc}
 8003e90:	20000364 	.word	0x20000364

08003e94 <magn_init>:

HAL_StatusTypeDef magn_init(void){
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b086      	sub	sp, #24
 8003e98:	af04      	add	r7, sp, #16
	HAL_StatusTypeDef res = HAL_OK;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	71fb      	strb	r3, [r7, #7]
	uint8_t ctrl1_val = 0x42;
 8003e9e:	2342      	movs	r3, #66	; 0x42
 8003ea0:	71bb      	strb	r3, [r7, #6]
    uint8_t ctrl3_val = 0x00;
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	717b      	strb	r3, [r7, #5]
    uint8_t ctrl4_val = 0x08;
 8003ea6:	2308      	movs	r3, #8
 8003ea8:	713b      	strb	r3, [r7, #4]
    uint8_t ctrl5_val = 0x40;
 8003eaa:	2340      	movs	r3, #64	; 0x40
 8003eac:	70fb      	strb	r3, [r7, #3]
    res = HAL_I2C_Mem_Write(&hi2c2, LIS3_MAGN, CTRL_REG1_MG, I2C_MEMADD_SIZE_8BIT, &ctrl1_val, 1, 50);
 8003eae:	2332      	movs	r3, #50	; 0x32
 8003eb0:	9302      	str	r3, [sp, #8]
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	9301      	str	r3, [sp, #4]
 8003eb6:	1dbb      	adds	r3, r7, #6
 8003eb8:	9300      	str	r3, [sp, #0]
 8003eba:	2301      	movs	r3, #1
 8003ebc:	2220      	movs	r2, #32
 8003ebe:	213c      	movs	r1, #60	; 0x3c
 8003ec0:	4821      	ldr	r0, [pc, #132]	; (8003f48 <magn_init+0xb4>)
 8003ec2:	f002 ff91 	bl	8006de8 <HAL_I2C_Mem_Write>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	71fb      	strb	r3, [r7, #7]
    if (res != HAL_OK)return res;
 8003eca:	79fb      	ldrb	r3, [r7, #7]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d001      	beq.n	8003ed4 <magn_init+0x40>
 8003ed0:	79fb      	ldrb	r3, [r7, #7]
 8003ed2:	e034      	b.n	8003f3e <magn_init+0xaa>
    res = HAL_I2C_Mem_Write(&hi2c2, LIS3_MAGN, CTRL_REG3_MG, I2C_MEMADD_SIZE_8BIT, &ctrl3_val, 1, 50);
 8003ed4:	2332      	movs	r3, #50	; 0x32
 8003ed6:	9302      	str	r3, [sp, #8]
 8003ed8:	2301      	movs	r3, #1
 8003eda:	9301      	str	r3, [sp, #4]
 8003edc:	1d7b      	adds	r3, r7, #5
 8003ede:	9300      	str	r3, [sp, #0]
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	2222      	movs	r2, #34	; 0x22
 8003ee4:	213c      	movs	r1, #60	; 0x3c
 8003ee6:	4818      	ldr	r0, [pc, #96]	; (8003f48 <magn_init+0xb4>)
 8003ee8:	f002 ff7e 	bl	8006de8 <HAL_I2C_Mem_Write>
 8003eec:	4603      	mov	r3, r0
 8003eee:	71fb      	strb	r3, [r7, #7]
    if (res != HAL_OK)return res;
 8003ef0:	79fb      	ldrb	r3, [r7, #7]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d001      	beq.n	8003efa <magn_init+0x66>
 8003ef6:	79fb      	ldrb	r3, [r7, #7]
 8003ef8:	e021      	b.n	8003f3e <magn_init+0xaa>
    res = HAL_I2C_Mem_Write(&hi2c2, LIS3_MAGN, CTRL_REG4_MG, I2C_MEMADD_SIZE_8BIT, &ctrl4_val, 1, 50);
 8003efa:	2332      	movs	r3, #50	; 0x32
 8003efc:	9302      	str	r3, [sp, #8]
 8003efe:	2301      	movs	r3, #1
 8003f00:	9301      	str	r3, [sp, #4]
 8003f02:	1d3b      	adds	r3, r7, #4
 8003f04:	9300      	str	r3, [sp, #0]
 8003f06:	2301      	movs	r3, #1
 8003f08:	2223      	movs	r2, #35	; 0x23
 8003f0a:	213c      	movs	r1, #60	; 0x3c
 8003f0c:	480e      	ldr	r0, [pc, #56]	; (8003f48 <magn_init+0xb4>)
 8003f0e:	f002 ff6b 	bl	8006de8 <HAL_I2C_Mem_Write>
 8003f12:	4603      	mov	r3, r0
 8003f14:	71fb      	strb	r3, [r7, #7]
    if (res != HAL_OK)return res;
 8003f16:	79fb      	ldrb	r3, [r7, #7]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d001      	beq.n	8003f20 <magn_init+0x8c>
 8003f1c:	79fb      	ldrb	r3, [r7, #7]
 8003f1e:	e00e      	b.n	8003f3e <magn_init+0xaa>
    res = HAL_I2C_Mem_Write(&hi2c2, LIS3_MAGN, CTRL_REG5_MG, I2C_MEMADD_SIZE_8BIT, &ctrl5_val, 1, 50);
 8003f20:	2332      	movs	r3, #50	; 0x32
 8003f22:	9302      	str	r3, [sp, #8]
 8003f24:	2301      	movs	r3, #1
 8003f26:	9301      	str	r3, [sp, #4]
 8003f28:	1cfb      	adds	r3, r7, #3
 8003f2a:	9300      	str	r3, [sp, #0]
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	2224      	movs	r2, #36	; 0x24
 8003f30:	213c      	movs	r1, #60	; 0x3c
 8003f32:	4805      	ldr	r0, [pc, #20]	; (8003f48 <magn_init+0xb4>)
 8003f34:	f002 ff58 	bl	8006de8 <HAL_I2C_Mem_Write>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	71fb      	strb	r3, [r7, #7]
    return res;
 8003f3c:	79fb      	ldrb	r3, [r7, #7]
}
 8003f3e:	4618      	mov	r0, r3
 8003f40:	3708      	adds	r7, #8
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}
 8003f46:	bf00      	nop
 8003f48:	20000364 	.word	0x20000364

08003f4c <gyro_read>:

HAL_StatusTypeDef gyro_read(mems_data_t *mems_data){
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b08c      	sub	sp, #48	; 0x30
 8003f50:	af04      	add	r7, sp, #16
 8003f52:	6078      	str	r0, [r7, #4]
	uint8_t data[6]={0};
 8003f54:	2300      	movs	r3, #0
 8003f56:	613b      	str	r3, [r7, #16]
 8003f58:	2300      	movs	r3, #0
 8003f5a:	82bb      	strh	r3, [r7, #20]
	uint8_t ts_data[4]={0};
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	60fb      	str	r3, [r7, #12]
	int16_t gyro_x, gyro_y, gyro_z;
	HAL_StatusTypeDef res = HAL_OK;
 8003f60:	2300      	movs	r3, #0
 8003f62:	77fb      	strb	r3, [r7, #31]
    HAL_I2C_Mem_Read(&hi2c2, LSM6, OUTX_L_G, I2C_MEMADD_SIZE_8BIT, data, 6, 50);
 8003f64:	2332      	movs	r3, #50	; 0x32
 8003f66:	9302      	str	r3, [sp, #8]
 8003f68:	2306      	movs	r3, #6
 8003f6a:	9301      	str	r3, [sp, #4]
 8003f6c:	f107 0310 	add.w	r3, r7, #16
 8003f70:	9300      	str	r3, [sp, #0]
 8003f72:	2301      	movs	r3, #1
 8003f74:	2222      	movs	r2, #34	; 0x22
 8003f76:	21d4      	movs	r1, #212	; 0xd4
 8003f78:	4833      	ldr	r0, [pc, #204]	; (8004048 <gyro_read+0xfc>)
 8003f7a:	f003 f849 	bl	8007010 <HAL_I2C_Mem_Read>
    if (res != HAL_OK){
 8003f7e:	7ffb      	ldrb	r3, [r7, #31]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d001      	beq.n	8003f88 <gyro_read+0x3c>
		return res;
 8003f84:	7ffb      	ldrb	r3, [r7, #31]
 8003f86:	e05a      	b.n	800403e <gyro_read+0xf2>
	}
    HAL_I2C_Mem_Read(&hi2c2, LSM6, TIMESTAMP0, I2C_MEMADD_SIZE_8BIT, ts_data, 4, 50);
 8003f88:	2332      	movs	r3, #50	; 0x32
 8003f8a:	9302      	str	r3, [sp, #8]
 8003f8c:	2304      	movs	r3, #4
 8003f8e:	9301      	str	r3, [sp, #4]
 8003f90:	f107 030c 	add.w	r3, r7, #12
 8003f94:	9300      	str	r3, [sp, #0]
 8003f96:	2301      	movs	r3, #1
 8003f98:	2240      	movs	r2, #64	; 0x40
 8003f9a:	21d4      	movs	r1, #212	; 0xd4
 8003f9c:	482a      	ldr	r0, [pc, #168]	; (8004048 <gyro_read+0xfc>)
 8003f9e:	f003 f837 	bl	8007010 <HAL_I2C_Mem_Read>
    if (res != HAL_OK){
 8003fa2:	7ffb      	ldrb	r3, [r7, #31]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d001      	beq.n	8003fac <gyro_read+0x60>
		return res;
 8003fa8:	7ffb      	ldrb	r3, [r7, #31]
 8003faa:	e048      	b.n	800403e <gyro_read+0xf2>
	}
    gyro_x = ((int16_t)((data[1] << 8) | data[0]));
 8003fac:	7c7b      	ldrb	r3, [r7, #17]
 8003fae:	021b      	lsls	r3, r3, #8
 8003fb0:	b21a      	sxth	r2, r3
 8003fb2:	7c3b      	ldrb	r3, [r7, #16]
 8003fb4:	b21b      	sxth	r3, r3
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	83bb      	strh	r3, [r7, #28]
    gyro_y = ((int16_t)((data[3] << 8) | data[2]));
 8003fba:	7cfb      	ldrb	r3, [r7, #19]
 8003fbc:	021b      	lsls	r3, r3, #8
 8003fbe:	b21a      	sxth	r2, r3
 8003fc0:	7cbb      	ldrb	r3, [r7, #18]
 8003fc2:	b21b      	sxth	r3, r3
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	837b      	strh	r3, [r7, #26]
    gyro_z = ((int16_t)((data[5] << 8) | data[4]));
 8003fc8:	7d7b      	ldrb	r3, [r7, #21]
 8003fca:	021b      	lsls	r3, r3, #8
 8003fcc:	b21a      	sxth	r2, r3
 8003fce:	7d3b      	ldrb	r3, [r7, #20]
 8003fd0:	b21b      	sxth	r3, r3
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	833b      	strh	r3, [r7, #24]
    mems_data->gyro.gyro_x = (gyro_x / -131.1f);// * -1.0f;
 8003fd6:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8003fda:	ee07 3a90 	vmov	s15, r3
 8003fde:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003fe2:	eddf 6a1a 	vldr	s13, [pc, #104]	; 800404c <gyro_read+0x100>
 8003fe6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	edc3 7a00 	vstr	s15, [r3]
    mems_data->gyro.gyro_y = (gyro_y / -131.1f);// * -1.0f;
 8003ff0:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003ff4:	ee07 3a90 	vmov	s15, r3
 8003ff8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003ffc:	eddf 6a13 	vldr	s13, [pc, #76]	; 800404c <gyro_read+0x100>
 8004000:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	edc3 7a01 	vstr	s15, [r3, #4]
    mems_data->gyro.gyro_z = (gyro_z / 131.1f);// * -1.0f;
 800400a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800400e:	ee07 3a90 	vmov	s15, r3
 8004012:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004016:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8004050 <gyro_read+0x104>
 800401a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	edc3 7a02 	vstr	s15, [r3, #8]
    mems_data->timestamp = ((int)((ts_data[3]<<24)|(ts_data[2]<<16)|(ts_data[1]<<8)|(ts_data[0])));
 8004024:	7bfb      	ldrb	r3, [r7, #15]
 8004026:	061a      	lsls	r2, r3, #24
 8004028:	7bbb      	ldrb	r3, [r7, #14]
 800402a:	041b      	lsls	r3, r3, #16
 800402c:	431a      	orrs	r2, r3
 800402e:	7b7b      	ldrb	r3, [r7, #13]
 8004030:	021b      	lsls	r3, r3, #8
 8004032:	4313      	orrs	r3, r2
 8004034:	7b3a      	ldrb	r2, [r7, #12]
 8004036:	431a      	orrs	r2, r3
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	625a      	str	r2, [r3, #36]	; 0x24
    return res;
 800403c:	7ffb      	ldrb	r3, [r7, #31]
}
 800403e:	4618      	mov	r0, r3
 8004040:	3720      	adds	r7, #32
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}
 8004046:	bf00      	nop
 8004048:	20000364 	.word	0x20000364
 800404c:	c303199a 	.word	0xc303199a
 8004050:	4303199a 	.word	0x4303199a

08004054 <lsm6_acc_read>:

HAL_StatusTypeDef lsm6_acc_read(mems_data_t *mems_data){
 8004054:	b580      	push	{r7, lr}
 8004056:	b08a      	sub	sp, #40	; 0x28
 8004058:	af04      	add	r7, sp, #16
 800405a:	6078      	str	r0, [r7, #4]
	uint8_t data[6] = {0};
 800405c:	2300      	movs	r3, #0
 800405e:	60bb      	str	r3, [r7, #8]
 8004060:	2300      	movs	r3, #0
 8004062:	81bb      	strh	r3, [r7, #12]
	int16_t acc_x, acc_y, acc_z;
	HAL_StatusTypeDef res = HAL_OK;
 8004064:	2300      	movs	r3, #0
 8004066:	75fb      	strb	r3, [r7, #23]
	res = HAL_I2C_Mem_Read(&hi2c2, LSM6, OUTX_L_A, I2C_MEMADD_SIZE_8BIT, data, 6, 50);
 8004068:	2332      	movs	r3, #50	; 0x32
 800406a:	9302      	str	r3, [sp, #8]
 800406c:	2306      	movs	r3, #6
 800406e:	9301      	str	r3, [sp, #4]
 8004070:	f107 0308 	add.w	r3, r7, #8
 8004074:	9300      	str	r3, [sp, #0]
 8004076:	2301      	movs	r3, #1
 8004078:	2228      	movs	r2, #40	; 0x28
 800407a:	21d4      	movs	r1, #212	; 0xd4
 800407c:	4825      	ldr	r0, [pc, #148]	; (8004114 <lsm6_acc_read+0xc0>)
 800407e:	f002 ffc7 	bl	8007010 <HAL_I2C_Mem_Read>
 8004082:	4603      	mov	r3, r0
 8004084:	75fb      	strb	r3, [r7, #23]
	if (res != HAL_OK){
 8004086:	7dfb      	ldrb	r3, [r7, #23]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d001      	beq.n	8004090 <lsm6_acc_read+0x3c>
		return res;
 800408c:	7dfb      	ldrb	r3, [r7, #23]
 800408e:	e03c      	b.n	800410a <lsm6_acc_read+0xb6>
	}
    acc_x = ((int16_t)((data[1] << 8) | data[0]));
 8004090:	7a7b      	ldrb	r3, [r7, #9]
 8004092:	021b      	lsls	r3, r3, #8
 8004094:	b21a      	sxth	r2, r3
 8004096:	7a3b      	ldrb	r3, [r7, #8]
 8004098:	b21b      	sxth	r3, r3
 800409a:	4313      	orrs	r3, r2
 800409c:	82bb      	strh	r3, [r7, #20]
    acc_y = ((int16_t)((data[3] << 8) | data[2]));
 800409e:	7afb      	ldrb	r3, [r7, #11]
 80040a0:	021b      	lsls	r3, r3, #8
 80040a2:	b21a      	sxth	r2, r3
 80040a4:	7abb      	ldrb	r3, [r7, #10]
 80040a6:	b21b      	sxth	r3, r3
 80040a8:	4313      	orrs	r3, r2
 80040aa:	827b      	strh	r3, [r7, #18]
    acc_z = ((int16_t)((data[5] << 8) | data[4]));
 80040ac:	7b7b      	ldrb	r3, [r7, #13]
 80040ae:	021b      	lsls	r3, r3, #8
 80040b0:	b21a      	sxth	r2, r3
 80040b2:	7b3b      	ldrb	r3, [r7, #12]
 80040b4:	b21b      	sxth	r3, r3
 80040b6:	4313      	orrs	r3, r2
 80040b8:	823b      	strh	r3, [r7, #16]
    mems_data->acc.acc_x = (acc_x / -16384.0f);//  * -1.0f;
 80040ba:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80040be:	ee07 3a90 	vmov	s15, r3
 80040c2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80040c6:	eddf 6a14 	vldr	s13, [pc, #80]	; 8004118 <lsm6_acc_read+0xc4>
 80040ca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	edc3 7a03 	vstr	s15, [r3, #12]
    mems_data->acc.acc_y = (acc_y / -16384.0f);// * -1.0f;
 80040d4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80040d8:	ee07 3a90 	vmov	s15, r3
 80040dc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80040e0:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8004118 <lsm6_acc_read+0xc4>
 80040e4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	edc3 7a04 	vstr	s15, [r3, #16]
    mems_data->acc.acc_z = (acc_z / 16384.0f);// * -1.0f;
 80040ee:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80040f2:	ee07 3a90 	vmov	s15, r3
 80040f6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80040fa:	eddf 6a08 	vldr	s13, [pc, #32]	; 800411c <lsm6_acc_read+0xc8>
 80040fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	edc3 7a05 	vstr	s15, [r3, #20]
    return res;
 8004108:	7dfb      	ldrb	r3, [r7, #23]
}
 800410a:	4618      	mov	r0, r3
 800410c:	3718      	adds	r7, #24
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}
 8004112:	bf00      	nop
 8004114:	20000364 	.word	0x20000364
 8004118:	c6800000 	.word	0xc6800000
 800411c:	46800000 	.word	0x46800000

08004120 <lis3_magn_read>:

HAL_StatusTypeDef lis3_magn_read(mems_data_t *mems_data){
 8004120:	b580      	push	{r7, lr}
 8004122:	b08a      	sub	sp, #40	; 0x28
 8004124:	af04      	add	r7, sp, #16
 8004126:	6078      	str	r0, [r7, #4]
	uint8_t data[6] = {0};
 8004128:	2300      	movs	r3, #0
 800412a:	60bb      	str	r3, [r7, #8]
 800412c:	2300      	movs	r3, #0
 800412e:	81bb      	strh	r3, [r7, #12]
    int16_t magn_x, magn_y, magn_z;
    HAL_StatusTypeDef res = HAL_OK;
 8004130:	2300      	movs	r3, #0
 8004132:	75fb      	strb	r3, [r7, #23]

    HAL_I2C_Mem_Read(&hi2c2, LIS3_MAGN, OUT_X_L_MG, I2C_MEMADD_SIZE_8BIT, data, 6, 50);
 8004134:	2332      	movs	r3, #50	; 0x32
 8004136:	9302      	str	r3, [sp, #8]
 8004138:	2306      	movs	r3, #6
 800413a:	9301      	str	r3, [sp, #4]
 800413c:	f107 0308 	add.w	r3, r7, #8
 8004140:	9300      	str	r3, [sp, #0]
 8004142:	2301      	movs	r3, #1
 8004144:	2228      	movs	r2, #40	; 0x28
 8004146:	213c      	movs	r1, #60	; 0x3c
 8004148:	4824      	ldr	r0, [pc, #144]	; (80041dc <lis3_magn_read+0xbc>)
 800414a:	f002 ff61 	bl	8007010 <HAL_I2C_Mem_Read>
    if (res != HAL_OK){
 800414e:	7dfb      	ldrb	r3, [r7, #23]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d001      	beq.n	8004158 <lis3_magn_read+0x38>
    	return res;
 8004154:	7dfb      	ldrb	r3, [r7, #23]
 8004156:	e03c      	b.n	80041d2 <lis3_magn_read+0xb2>
	}
    magn_x = ((int16_t)((data[1] << 8) | data[0]));
 8004158:	7a7b      	ldrb	r3, [r7, #9]
 800415a:	021b      	lsls	r3, r3, #8
 800415c:	b21a      	sxth	r2, r3
 800415e:	7a3b      	ldrb	r3, [r7, #8]
 8004160:	b21b      	sxth	r3, r3
 8004162:	4313      	orrs	r3, r2
 8004164:	82bb      	strh	r3, [r7, #20]
    magn_y = ((int16_t)((data[3] << 8) | data[2]));
 8004166:	7afb      	ldrb	r3, [r7, #11]
 8004168:	021b      	lsls	r3, r3, #8
 800416a:	b21a      	sxth	r2, r3
 800416c:	7abb      	ldrb	r3, [r7, #10]
 800416e:	b21b      	sxth	r3, r3
 8004170:	4313      	orrs	r3, r2
 8004172:	827b      	strh	r3, [r7, #18]
    magn_z = ((int16_t)((data[5] << 8) | data[4]));
 8004174:	7b7b      	ldrb	r3, [r7, #13]
 8004176:	021b      	lsls	r3, r3, #8
 8004178:	b21a      	sxth	r2, r3
 800417a:	7b3b      	ldrb	r3, [r7, #12]
 800417c:	b21b      	sxth	r3, r3
 800417e:	4313      	orrs	r3, r2
 8004180:	823b      	strh	r3, [r7, #16]
    mems_data->magn.magn_x = magn_x / 10.0f;
 8004182:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004186:	ee07 3a90 	vmov	s15, r3
 800418a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800418e:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8004192:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	edc3 7a06 	vstr	s15, [r3, #24]
    mems_data->magn.magn_y = magn_y / 10.0f;
 800419c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80041a0:	ee07 3a90 	vmov	s15, r3
 80041a4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80041a8:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80041ac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	edc3 7a07 	vstr	s15, [r3, #28]
    mems_data->magn.magn_z = magn_z / 10.0f;
 80041b6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80041ba:	ee07 3a90 	vmov	s15, r3
 80041be:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80041c2:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80041c6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	edc3 7a08 	vstr	s15, [r3, #32]
    return res;
 80041d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	3718      	adds	r7, #24
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}
 80041da:	bf00      	nop
 80041dc:	20000364 	.word	0x20000364

080041e0 <gyro_offset_calculation>:


uint8_t gyro_offset_calculation(mems_data_t *mems_data){
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b082      	sub	sp, #8
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
	gyro_read(mems_data);
 80041e8:	6878      	ldr	r0, [r7, #4]
 80041ea:	f7ff feaf 	bl	8003f4c <gyro_read>
	gyro_sum.gyro_x += mems_data->gyro.gyro_x;
 80041ee:	4b37      	ldr	r3, [pc, #220]	; (80042cc <gyro_offset_calculation+0xec>)
 80041f0:	ed93 7a00 	vldr	s14, [r3]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	edd3 7a00 	vldr	s15, [r3]
 80041fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80041fe:	4b33      	ldr	r3, [pc, #204]	; (80042cc <gyro_offset_calculation+0xec>)
 8004200:	edc3 7a00 	vstr	s15, [r3]
	gyro_sum.gyro_y += mems_data->gyro.gyro_y;
 8004204:	4b31      	ldr	r3, [pc, #196]	; (80042cc <gyro_offset_calculation+0xec>)
 8004206:	ed93 7a01 	vldr	s14, [r3, #4]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	edd3 7a01 	vldr	s15, [r3, #4]
 8004210:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004214:	4b2d      	ldr	r3, [pc, #180]	; (80042cc <gyro_offset_calculation+0xec>)
 8004216:	edc3 7a01 	vstr	s15, [r3, #4]
	gyro_sum.gyro_z += mems_data->gyro.gyro_z;
 800421a:	4b2c      	ldr	r3, [pc, #176]	; (80042cc <gyro_offset_calculation+0xec>)
 800421c:	ed93 7a02 	vldr	s14, [r3, #8]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	edd3 7a02 	vldr	s15, [r3, #8]
 8004226:	ee77 7a27 	vadd.f32	s15, s14, s15
 800422a:	4b28      	ldr	r3, [pc, #160]	; (80042cc <gyro_offset_calculation+0xec>)
 800422c:	edc3 7a02 	vstr	s15, [r3, #8]
	gyro_offset_counter++;
 8004230:	4b27      	ldr	r3, [pc, #156]	; (80042d0 <gyro_offset_calculation+0xf0>)
 8004232:	881b      	ldrh	r3, [r3, #0]
 8004234:	3301      	adds	r3, #1
 8004236:	b29a      	uxth	r2, r3
 8004238:	4b25      	ldr	r3, [pc, #148]	; (80042d0 <gyro_offset_calculation+0xf0>)
 800423a:	801a      	strh	r2, [r3, #0]
	if (gyro_offset_counter >= 1400){
 800423c:	4b24      	ldr	r3, [pc, #144]	; (80042d0 <gyro_offset_calculation+0xf0>)
 800423e:	881b      	ldrh	r3, [r3, #0]
 8004240:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 8004244:	d33d      	bcc.n	80042c2 <gyro_offset_calculation+0xe2>
		gyro_mean.gyro_x = gyro_sum.gyro_x / gyro_offset_counter;
 8004246:	4b21      	ldr	r3, [pc, #132]	; (80042cc <gyro_offset_calculation+0xec>)
 8004248:	edd3 6a00 	vldr	s13, [r3]
 800424c:	4b20      	ldr	r3, [pc, #128]	; (80042d0 <gyro_offset_calculation+0xf0>)
 800424e:	881b      	ldrh	r3, [r3, #0]
 8004250:	ee07 3a90 	vmov	s15, r3
 8004254:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004258:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800425c:	4b1d      	ldr	r3, [pc, #116]	; (80042d4 <gyro_offset_calculation+0xf4>)
 800425e:	edc3 7a00 	vstr	s15, [r3]
		gyro_mean.gyro_y = gyro_sum.gyro_y / gyro_offset_counter;
 8004262:	4b1a      	ldr	r3, [pc, #104]	; (80042cc <gyro_offset_calculation+0xec>)
 8004264:	edd3 6a01 	vldr	s13, [r3, #4]
 8004268:	4b19      	ldr	r3, [pc, #100]	; (80042d0 <gyro_offset_calculation+0xf0>)
 800426a:	881b      	ldrh	r3, [r3, #0]
 800426c:	ee07 3a90 	vmov	s15, r3
 8004270:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004274:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004278:	4b16      	ldr	r3, [pc, #88]	; (80042d4 <gyro_offset_calculation+0xf4>)
 800427a:	edc3 7a01 	vstr	s15, [r3, #4]
		gyro_mean.gyro_z = gyro_sum.gyro_z / gyro_offset_counter;
 800427e:	4b13      	ldr	r3, [pc, #76]	; (80042cc <gyro_offset_calculation+0xec>)
 8004280:	edd3 6a02 	vldr	s13, [r3, #8]
 8004284:	4b12      	ldr	r3, [pc, #72]	; (80042d0 <gyro_offset_calculation+0xf0>)
 8004286:	881b      	ldrh	r3, [r3, #0]
 8004288:	ee07 3a90 	vmov	s15, r3
 800428c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004290:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004294:	4b0f      	ldr	r3, [pc, #60]	; (80042d4 <gyro_offset_calculation+0xf4>)
 8004296:	edc3 7a02 	vstr	s15, [r3, #8]
		setGyroOffset(gyro_mean);
 800429a:	4b0e      	ldr	r3, [pc, #56]	; (80042d4 <gyro_offset_calculation+0xf4>)
 800429c:	edd3 6a00 	vldr	s13, [r3]
 80042a0:	ed93 7a01 	vldr	s14, [r3, #4]
 80042a4:	edd3 7a02 	vldr	s15, [r3, #8]
 80042a8:	eeb0 0a66 	vmov.f32	s0, s13
 80042ac:	eef0 0a47 	vmov.f32	s1, s14
 80042b0:	eeb0 1a67 	vmov.f32	s2, s15
 80042b4:	f7fd f8ba 	bl	800142c <setGyroOffset>
		gyro_offset_counter = 0;
 80042b8:	4b05      	ldr	r3, [pc, #20]	; (80042d0 <gyro_offset_calculation+0xf0>)
 80042ba:	2200      	movs	r2, #0
 80042bc:	801a      	strh	r2, [r3, #0]
		return 0;
 80042be:	2300      	movs	r3, #0
 80042c0:	e000      	b.n	80042c4 <gyro_offset_calculation+0xe4>
	}
	return 1;
 80042c2:	2301      	movs	r3, #1
}
 80042c4:	4618      	mov	r0, r3
 80042c6:	3708      	adds	r7, #8
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bd80      	pop	{r7, pc}
 80042cc:	200003bc 	.word	0x200003bc
 80042d0:	200003b8 	.word	0x200003b8
 80042d4:	200003c8 	.word	0x200003c8

080042d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80042d8:	b5b0      	push	{r4, r5, r7, lr}
 80042da:	b09c      	sub	sp, #112	; 0x70
 80042dc:	af00      	add	r7, sp, #0

  HAL_Init();
 80042de:	f001 ff28 	bl	8006132 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 80042e2:	f000 fa09 	bl	80046f8 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80042e6:	f000 fa59 	bl	800479c <MX_GPIO_Init>

  MX_USART1_UART_Init();
 80042ea:	f001 fcb5 	bl	8005c58 <MX_USART1_UART_Init>

  MX_UART4_Init();
 80042ee:	f001 fd05 	bl	8005cfc <MX_UART4_Init>


  if (lsm6_bus_init() != 0){
 80042f2:	f7ff fd43 	bl	8003d7c <lsm6_bus_init>
 80042f6:	4603      	mov	r3, r0
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d010      	beq.n	800431e <main+0x46>
	  uint8_t Test[] = "Failed to init I2C bus\r\n";
 80042fc:	4b65      	ldr	r3, [pc, #404]	; (8004494 <main+0x1bc>)
 80042fe:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8004302:	461d      	mov	r5, r3
 8004304:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004306:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004308:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800430c:	c403      	stmia	r4!, {r0, r1}
 800430e:	7022      	strb	r2, [r4, #0]
	  uart_write_debug(Test, 10);
 8004310:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004314:	210a      	movs	r1, #10
 8004316:	4618      	mov	r0, r3
 8004318:	f001 fd7a 	bl	8005e10 <uart_write_debug>
 800431c:	e042      	b.n	80043a4 <main+0xcc>
  }
  else{
		  if (lsm6_acc_init() != HAL_OK){
 800431e:	f7ff fd93 	bl	8003e48 <lsm6_acc_init>
 8004322:	4603      	mov	r3, r0
 8004324:	2b00      	cmp	r3, #0
 8004326:	d00f      	beq.n	8004348 <main+0x70>
			  uint8_t Test[] = "Failed to init LSM6 acc\r\n";
 8004328:	4b5b      	ldr	r3, [pc, #364]	; (8004498 <main+0x1c0>)
 800432a:	f107 0438 	add.w	r4, r7, #56	; 0x38
 800432e:	461d      	mov	r5, r3
 8004330:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004332:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004334:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004338:	c403      	stmia	r4!, {r0, r1}
 800433a:	8022      	strh	r2, [r4, #0]
			  uart_write_debug(Test, 10);
 800433c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004340:	210a      	movs	r1, #10
 8004342:	4618      	mov	r0, r3
 8004344:	f001 fd64 	bl	8005e10 <uart_write_debug>
		  }
		  if (gyro_init() != HAL_OK){
 8004348:	f7ff fd58 	bl	8003dfc <gyro_init>
 800434c:	4603      	mov	r3, r0
 800434e:	2b00      	cmp	r3, #0
 8004350:	d012      	beq.n	8004378 <main+0xa0>
			  uint8_t Test[] = "Failed to init LSM6 gyro\r\n";
 8004352:	4b52      	ldr	r3, [pc, #328]	; (800449c <main+0x1c4>)
 8004354:	f107 041c 	add.w	r4, r7, #28
 8004358:	461d      	mov	r5, r3
 800435a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800435c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800435e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004362:	c403      	stmia	r4!, {r0, r1}
 8004364:	8022      	strh	r2, [r4, #0]
 8004366:	3402      	adds	r4, #2
 8004368:	0c13      	lsrs	r3, r2, #16
 800436a:	7023      	strb	r3, [r4, #0]
			  uart_write_debug(Test, 10);
 800436c:	f107 031c 	add.w	r3, r7, #28
 8004370:	210a      	movs	r1, #10
 8004372:	4618      	mov	r0, r3
 8004374:	f001 fd4c 	bl	8005e10 <uart_write_debug>
		  }
		  if (magn_init() != HAL_OK){
 8004378:	f7ff fd8c 	bl	8003e94 <magn_init>
 800437c:	4603      	mov	r3, r0
 800437e:	2b00      	cmp	r3, #0
 8004380:	d010      	beq.n	80043a4 <main+0xcc>
			  uint8_t Test[] = "Failed to init LIS3 magn\r\n";
 8004382:	4b47      	ldr	r3, [pc, #284]	; (80044a0 <main+0x1c8>)
 8004384:	463c      	mov	r4, r7
 8004386:	461d      	mov	r5, r3
 8004388:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800438a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800438c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004390:	c403      	stmia	r4!, {r0, r1}
 8004392:	8022      	strh	r2, [r4, #0]
 8004394:	3402      	adds	r4, #2
 8004396:	0c13      	lsrs	r3, r2, #16
 8004398:	7023      	strb	r3, [r4, #0]
			  uart_write_debug(Test, 10);
 800439a:	463b      	mov	r3, r7
 800439c:	210a      	movs	r1, #10
 800439e:	4618      	mov	r0, r3
 80043a0:	f001 fd36 	bl	8005e10 <uart_write_debug>
		  }
  }
  if (ublox_i2c_bus_init() != HAL_OK){
 80043a4:	f7ff f9ba 	bl	800371c <ublox_i2c_bus_init>
 80043a8:	4603      	mov	r3, r0
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d004      	beq.n	80043b8 <main+0xe0>
	  uart_write_debug("Failed to Initialize ublox bus\r\n", 10);
 80043ae:	210a      	movs	r1, #10
 80043b0:	483c      	ldr	r0, [pc, #240]	; (80044a4 <main+0x1cc>)
 80043b2:	f001 fd2d 	bl	8005e10 <uart_write_debug>
 80043b6:	e011      	b.n	80043dc <main+0x104>
  }
  else{
	  HAL_StatusTypeDef res;
	  res = ubloxInit();
 80043b8:	f7ff fa5a 	bl	8003870 <ubloxInit>
 80043bc:	4603      	mov	r3, r0
 80043be:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	  if (res != HAL_OK){
 80043c2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d004      	beq.n	80043d4 <main+0xfc>
		  uart_write_debug("Failed to Initialize UBLOX\r\n", 10);
 80043ca:	210a      	movs	r1, #10
 80043cc:	4836      	ldr	r0, [pc, #216]	; (80044a8 <main+0x1d0>)
 80043ce:	f001 fd1f 	bl	8005e10 <uart_write_debug>
 80043d2:	e003      	b.n	80043dc <main+0x104>
	  }
	  else{
		  uart_write_debug("Ublox Initialized!\r\n", 10);
 80043d4:	210a      	movs	r1, #10
 80043d6:	4835      	ldr	r0, [pc, #212]	; (80044ac <main+0x1d4>)
 80043d8:	f001 fd1a 	bl	8005e10 <uart_write_debug>
	  }
  }

  /* Init scheduler */
  osKernelInitialize();
 80043dc:	f007 fb80 	bl	800bae0 <osKernelInitialize>
  /* USER CODE BEGIN RTOS_MUTEX */
  debugUartMutex = osMutexNew(&uartMutex_attributes);
 80043e0:	4833      	ldr	r0, [pc, #204]	; (80044b0 <main+0x1d8>)
 80043e2:	f007 fd9f 	bl	800bf24 <osMutexNew>
 80043e6:	4603      	mov	r3, r0
 80043e8:	4a32      	ldr	r2, [pc, #200]	; (80044b4 <main+0x1dc>)
 80043ea:	6013      	str	r3, [r2, #0]
  i2cMutex = osMutexNew(&i2cMutex_attributes);
 80043ec:	4832      	ldr	r0, [pc, #200]	; (80044b8 <main+0x1e0>)
 80043ee:	f007 fd99 	bl	800bf24 <osMutexNew>
 80043f2:	4603      	mov	r3, r0
 80043f4:	4a31      	ldr	r2, [pc, #196]	; (80044bc <main+0x1e4>)
 80043f6:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_MUTEX */
  memsQueueHandle = osMessageQueueNew (8, sizeof(mems_data_t), &memsQueue_attributes);
 80043f8:	4a31      	ldr	r2, [pc, #196]	; (80044c0 <main+0x1e8>)
 80043fa:	2128      	movs	r1, #40	; 0x28
 80043fc:	2008      	movs	r0, #8
 80043fe:	f007 fe9f 	bl	800c140 <osMessageQueueNew>
 8004402:	4603      	mov	r3, r0
 8004404:	4a2f      	ldr	r2, [pc, #188]	; (80044c4 <main+0x1ec>)
 8004406:	6013      	str	r3, [r2, #0]
  outputQueueHandle = osMessageQueueNew (4, sizeof(FusionEuler), &outputQueue_attributes);
 8004408:	4a2f      	ldr	r2, [pc, #188]	; (80044c8 <main+0x1f0>)
 800440a:	210c      	movs	r1, #12
 800440c:	2004      	movs	r0, #4
 800440e:	f007 fe97 	bl	800c140 <osMessageQueueNew>
 8004412:	4603      	mov	r3, r0
 8004414:	4a2d      	ldr	r2, [pc, #180]	; (80044cc <main+0x1f4>)
 8004416:	6013      	str	r3, [r2, #0]
  messageQueueHandle = osMessageQueueNew (8, RB_SIZE, &messageQueue_attributes);
 8004418:	4a2d      	ldr	r2, [pc, #180]	; (80044d0 <main+0x1f8>)
 800441a:	2128      	movs	r1, #40	; 0x28
 800441c:	2008      	movs	r0, #8
 800441e:	f007 fe8f 	bl	800c140 <osMessageQueueNew>
 8004422:	4603      	mov	r3, r0
 8004424:	4a2b      	ldr	r2, [pc, #172]	; (80044d4 <main+0x1fc>)
 8004426:	6013      	str	r3, [r2, #0]
  /* EVENT FLAG FOR ACK RECEIVE */
  ack_rcvd = osEventFlagsNew(NULL);
 8004428:	2000      	movs	r0, #0
 800442a:	f007 fc92 	bl	800bd52 <osEventFlagsNew>
 800442e:	4603      	mov	r3, r0
 8004430:	4a29      	ldr	r2, [pc, #164]	; (80044d8 <main+0x200>)
 8004432:	6013      	str	r3, [r2, #0]
  //							//

  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8004434:	4a29      	ldr	r2, [pc, #164]	; (80044dc <main+0x204>)
 8004436:	2100      	movs	r1, #0
 8004438:	4829      	ldr	r0, [pc, #164]	; (80044e0 <main+0x208>)
 800443a:	f007 fb9b 	bl	800bb74 <osThreadNew>
 800443e:	4603      	mov	r3, r0
 8004440:	4a28      	ldr	r2, [pc, #160]	; (80044e4 <main+0x20c>)
 8004442:	6013      	str	r3, [r2, #0]

  readMemsTaskHandle = osThreadNew(readMemsTask, NULL, &readMemsTask_attributes);
 8004444:	4a28      	ldr	r2, [pc, #160]	; (80044e8 <main+0x210>)
 8004446:	2100      	movs	r1, #0
 8004448:	4828      	ldr	r0, [pc, #160]	; (80044ec <main+0x214>)
 800444a:	f007 fb93 	bl	800bb74 <osThreadNew>
 800444e:	4603      	mov	r3, r0
 8004450:	4a27      	ldr	r2, [pc, #156]	; (80044f0 <main+0x218>)
 8004452:	6013      	str	r3, [r2, #0]

//  calcHeadingTaskHandle = osThreadNew(calcHeadingTask, NULL, &calcHeadingTask_attributes);

  printOutTaskHandle = osThreadNew(printOutTask, NULL, &printOutTask_attributes);
 8004454:	4a27      	ldr	r2, [pc, #156]	; (80044f4 <main+0x21c>)
 8004456:	2100      	movs	r1, #0
 8004458:	4827      	ldr	r0, [pc, #156]	; (80044f8 <main+0x220>)
 800445a:	f007 fb8b 	bl	800bb74 <osThreadNew>
 800445e:	4603      	mov	r3, r0
 8004460:	4a26      	ldr	r2, [pc, #152]	; (80044fc <main+0x224>)
 8004462:	6013      	str	r3, [r2, #0]

//  getCoorsTaskHandle = osThreadNew(getCoorsTask, NULL, &getCoorsTask_attributes);

//  sendMessageTaskHandle = osThreadNew(sendMessageTask, NULL, &sendMessageTaskHandle_attributes);

  readMessageTaskHandle = osThreadNew(readMessageTask, NULL, &readMessageTaskHandle_attributes);
 8004464:	4a26      	ldr	r2, [pc, #152]	; (8004500 <main+0x228>)
 8004466:	2100      	movs	r1, #0
 8004468:	4826      	ldr	r0, [pc, #152]	; (8004504 <main+0x22c>)
 800446a:	f007 fb83 	bl	800bb74 <osThreadNew>
 800446e:	4603      	mov	r3, r0
 8004470:	4a25      	ldr	r2, [pc, #148]	; (8004508 <main+0x230>)
 8004472:	6013      	str	r3, [r2, #0]

  gyroCalibrationTaskHandle = osThreadNew(gyroCalibrationTask, NULL, &gyroCalibrationTaskHandle_attributes);
 8004474:	4a25      	ldr	r2, [pc, #148]	; (800450c <main+0x234>)
 8004476:	2100      	movs	r1, #0
 8004478:	4825      	ldr	r0, [pc, #148]	; (8004510 <main+0x238>)
 800447a:	f007 fb7b 	bl	800bb74 <osThreadNew>
 800447e:	4603      	mov	r3, r0
 8004480:	4a24      	ldr	r2, [pc, #144]	; (8004514 <main+0x23c>)
 8004482:	6013      	str	r3, [r2, #0]

  /*Suspend the gyro-calibration task*/
  osThreadSuspend(gyroCalibrationTaskHandle);
 8004484:	4b23      	ldr	r3, [pc, #140]	; (8004514 <main+0x23c>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4618      	mov	r0, r3
 800448a:	f007 fc05 	bl	800bc98 <osThreadSuspend>

  /* Start scheduler */
  osKernelStart();
 800448e:	f007 fb4b 	bl	800bb28 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8004492:	e7fe      	b.n	8004492 <main+0x1ba>
 8004494:	080141b4 	.word	0x080141b4
 8004498:	080141d0 	.word	0x080141d0
 800449c:	080141ec 	.word	0x080141ec
 80044a0:	08014208 	.word	0x08014208
 80044a4:	08014158 	.word	0x08014158
 80044a8:	0801417c 	.word	0x0801417c
 80044ac:	0801419c 	.word	0x0801419c
 80044b0:	080143a0 	.word	0x080143a0
 80044b4:	200003e8 	.word	0x200003e8
 80044b8:	080143b0 	.word	0x080143b0
 80044bc:	200003ec 	.word	0x200003ec
 80044c0:	080143c0 	.word	0x080143c0
 80044c4:	200003f0 	.word	0x200003f0
 80044c8:	080143d8 	.word	0x080143d8
 80044cc:	200003f4 	.word	0x200003f4
 80044d0:	080143f0 	.word	0x080143f0
 80044d4:	200003f8 	.word	0x200003f8
 80044d8:	200003fc 	.word	0x200003fc
 80044dc:	080142ec 	.word	0x080142ec
 80044e0:	08004519 	.word	0x08004519
 80044e4:	200003d4 	.word	0x200003d4
 80044e8:	08014334 	.word	0x08014334
 80044ec:	08004541 	.word	0x08004541
 80044f0:	200003d8 	.word	0x200003d8
 80044f4:	08014310 	.word	0x08014310
 80044f8:	08004585 	.word	0x08004585
 80044fc:	200003dc 	.word	0x200003dc
 8004500:	08014358 	.word	0x08014358
 8004504:	08004611 	.word	0x08004611
 8004508:	200003e0 	.word	0x200003e0
 800450c:	0801437c 	.word	0x0801437c
 8004510:	08004681 	.word	0x08004681
 8004514:	200003e4 	.word	0x200003e4

08004518 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b082      	sub	sp, #8
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOB,LED2_Pin);
 8004520:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004524:	4805      	ldr	r0, [pc, #20]	; (800453c <StartDefaultTask+0x24>)
 8004526:	f002 f9a9 	bl	800687c <HAL_GPIO_TogglePin>
	uart_receive_it(UART_NYX);
 800452a:	2001      	movs	r0, #1
 800452c:	f001 fc48 	bl	8005dc0 <uart_receive_it>
    osDelay(500);
 8004530:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004534:	f007 fbf2 	bl	800bd1c <osDelay>
  {
 8004538:	e7f2      	b.n	8004520 <StartDefaultTask+0x8>
 800453a:	bf00      	nop
 800453c:	48000400 	.word	0x48000400

08004540 <readMemsTask>:
		osDelay(30);
	}
}

void readMemsTask(void *argument)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b090      	sub	sp, #64	; 0x40
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
	mems_data_t mems_data;
	FusionEuler euler;
	FusionInit();
 8004548:	f7fc ff90 	bl	800146c <FusionInit>
	for(;;)
	{
//		osMutexAcquire(i2cMutex, osWaitForever);
		tick_gyro(&mems_data);
 800454c:	f107 0318 	add.w	r3, r7, #24
 8004550:	4618      	mov	r0, r3
 8004552:	f7ff fc01 	bl	8003d58 <tick_gyro>
		FusionCalcAngle(&mems_data, &euler);
 8004556:	f107 020c 	add.w	r2, r7, #12
 800455a:	f107 0318 	add.w	r3, r7, #24
 800455e:	4611      	mov	r1, r2
 8004560:	4618      	mov	r0, r3
 8004562:	f7fc ffa3 	bl	80014ac <FusionCalcAngle>
//		osMutexRelease(i2cMutex);
		osMessageQueuePut(outputQueueHandle, &euler, 0U, 0U);
 8004566:	4b06      	ldr	r3, [pc, #24]	; (8004580 <readMemsTask+0x40>)
 8004568:	6818      	ldr	r0, [r3, #0]
 800456a:	f107 010c 	add.w	r1, r7, #12
 800456e:	2300      	movs	r3, #0
 8004570:	2200      	movs	r2, #0
 8004572:	f007 fe59 	bl	800c228 <osMessageQueuePut>
//		osMessageQueuePut(memsQueueHandle, &mems_data, 0U, 5U);
		osDelay(20);
 8004576:	2014      	movs	r0, #20
 8004578:	f007 fbd0 	bl	800bd1c <osDelay>
		tick_gyro(&mems_data);
 800457c:	e7e6      	b.n	800454c <readMemsTask+0xc>
 800457e:	bf00      	nop
 8004580:	200003f4 	.word	0x200003f4

08004584 <printOutTask>:
	}
}


void printOutTask(void *argument)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b094      	sub	sp, #80	; 0x50
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
	mems_data_t mems_data;
	FusionEuler euler;
	uint8_t text[10] = "";
 800458c:	2300      	movs	r3, #0
 800458e:	60fb      	str	r3, [r7, #12]
 8004590:	f107 0310 	add.w	r3, r7, #16
 8004594:	2200      	movs	r2, #0
 8004596:	601a      	str	r2, [r3, #0]
 8004598:	809a      	strh	r2, [r3, #4]
	osStatus_t status;

	for(;;)
	{
		status = osMessageQueueGet(outputQueueHandle, &euler, NULL, 5U);   // wait for message
 800459a:	4b1a      	ldr	r3, [pc, #104]	; (8004604 <printOutTask+0x80>)
 800459c:	6818      	ldr	r0, [r3, #0]
 800459e:	f107 0118 	add.w	r1, r7, #24
 80045a2:	2305      	movs	r3, #5
 80045a4:	2200      	movs	r2, #0
 80045a6:	f007 fe9f 	bl	800c2e8 <osMessageQueueGet>
 80045aa:	64f8      	str	r0, [r7, #76]	; 0x4c
		if (status == osOK) {
 80045ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d123      	bne.n	80045fa <printOutTask+0x76>
			sprintf(text, "\n%f\r", euler.angle.yaw);
 80045b2:	6a3b      	ldr	r3, [r7, #32]
 80045b4:	4618      	mov	r0, r3
 80045b6:	f7fb ffdf 	bl	8000578 <__aeabi_f2d>
 80045ba:	4602      	mov	r2, r0
 80045bc:	460b      	mov	r3, r1
 80045be:	f107 000c 	add.w	r0, r7, #12
 80045c2:	4911      	ldr	r1, [pc, #68]	; (8004608 <printOutTask+0x84>)
 80045c4:	f00c f854 	bl	8010670 <siprintf>
			osMutexAcquire(debugUartMutex, osWaitForever);
 80045c8:	4b10      	ldr	r3, [pc, #64]	; (800460c <printOutTask+0x88>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f04f 31ff 	mov.w	r1, #4294967295
 80045d0:	4618      	mov	r0, r3
 80045d2:	f007 fd2d 	bl	800c030 <osMutexAcquire>
			uart_write_debug(text,50);
 80045d6:	f107 030c 	add.w	r3, r7, #12
 80045da:	2132      	movs	r1, #50	; 0x32
 80045dc:	4618      	mov	r0, r3
 80045de:	f001 fc17 	bl	8005e10 <uart_write_debug>
			osMutexRelease(debugUartMutex);
 80045e2:	4b0a      	ldr	r3, [pc, #40]	; (800460c <printOutTask+0x88>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4618      	mov	r0, r3
 80045e8:	f007 fd6d 	bl	800c0c6 <osMutexRelease>
			memset(text,0,sizeof(text));
 80045ec:	f107 030c 	add.w	r3, r7, #12
 80045f0:	220a      	movs	r2, #10
 80045f2:	2100      	movs	r1, #0
 80045f4:	4618      	mov	r0, r3
 80045f6:	f00b fad9 	bl	800fbac <memset>
		}
		osDelay(70);
 80045fa:	2046      	movs	r0, #70	; 0x46
 80045fc:	f007 fb8e 	bl	800bd1c <osDelay>
		status = osMessageQueueGet(outputQueueHandle, &euler, NULL, 5U);   // wait for message
 8004600:	e7cb      	b.n	800459a <printOutTask+0x16>
 8004602:	bf00      	nop
 8004604:	200003f4 	.word	0x200003f4
 8004608:	08014224 	.word	0x08014224
 800460c:	200003e8 	.word	0x200003e8

08004610 <readMessageTask>:
//		osMutexRelease(debugUartMutex);
		osDelay(1700);
	}
}

void readMessageTask(void *argument){
 8004610:	b580      	push	{r7, lr}
 8004612:	b08e      	sub	sp, #56	; 0x38
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
	osStatus_t status;
	uint32_t ack_flag;
	uint8_t message_buffer[RB_SIZE] = {0};
 8004618:	2300      	movs	r3, #0
 800461a:	60bb      	str	r3, [r7, #8]
 800461c:	f107 030c 	add.w	r3, r7, #12
 8004620:	2224      	movs	r2, #36	; 0x24
 8004622:	2100      	movs	r1, #0
 8004624:	4618      	mov	r0, r3
 8004626:	f00b fac1 	bl	800fbac <memset>
	for(;;){
		status = osMessageQueueGet(messageQueueHandle, message_buffer, NULL, osWaitForever);   // wait for message
 800462a:	4b13      	ldr	r3, [pc, #76]	; (8004678 <readMessageTask+0x68>)
 800462c:	6818      	ldr	r0, [r3, #0]
 800462e:	f107 0108 	add.w	r1, r7, #8
 8004632:	f04f 33ff 	mov.w	r3, #4294967295
 8004636:	2200      	movs	r2, #0
 8004638:	f007 fe56 	bl	800c2e8 <osMessageQueueGet>
 800463c:	6378      	str	r0, [r7, #52]	; 0x34
		if (status == osOK) {
 800463e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004640:	2b00      	cmp	r3, #0
 8004642:	d114      	bne.n	800466e <readMessageTask+0x5e>
			tick_Handler(message_buffer);
 8004644:	f107 0308 	add.w	r3, r7, #8
 8004648:	4618      	mov	r0, r3
 800464a:	f000 fa73 	bl	8004b34 <tick_Handler>
			ack_flag = osEventFlagsWait(ack_rcvd, ACK_FLAG, osFlagsWaitAny, 150);
 800464e:	4b0b      	ldr	r3, [pc, #44]	; (800467c <readMessageTask+0x6c>)
 8004650:	6818      	ldr	r0, [r3, #0]
 8004652:	2396      	movs	r3, #150	; 0x96
 8004654:	2200      	movs	r2, #0
 8004656:	2101      	movs	r1, #1
 8004658:	f007 fbfe 	bl	800be58 <osEventFlagsWait>
 800465c:	6338      	str	r0, [r7, #48]	; 0x30
			if (ack_flag != 1){
 800465e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004660:	2b01      	cmp	r3, #1
 8004662:	d004      	beq.n	800466e <readMessageTask+0x5e>
				tick_Handler(message_buffer);
 8004664:	f107 0308 	add.w	r3, r7, #8
 8004668:	4618      	mov	r0, r3
 800466a:	f000 fa63 	bl	8004b34 <tick_Handler>
			}
		}
		osDelay(200);
 800466e:	20c8      	movs	r0, #200	; 0xc8
 8004670:	f007 fb54 	bl	800bd1c <osDelay>
		status = osMessageQueueGet(messageQueueHandle, message_buffer, NULL, osWaitForever);   // wait for message
 8004674:	e7d9      	b.n	800462a <readMessageTask+0x1a>
 8004676:	bf00      	nop
 8004678:	200003f8 	.word	0x200003f8
 800467c:	200003fc 	.word	0x200003fc

08004680 <gyroCalibrationTask>:
	}
}

void gyroCalibrationTask(void *argument){
 8004680:	b580      	push	{r7, lr}
 8004682:	b08c      	sub	sp, #48	; 0x30
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
	mems_data_t mems_data;
	osThreadSuspend(readMemsTaskHandle);
 8004688:	4b16      	ldr	r3, [pc, #88]	; (80046e4 <gyroCalibrationTask+0x64>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4618      	mov	r0, r3
 800468e:	f007 fb03 	bl	800bc98 <osThreadSuspend>
	osThreadSuspend(printOutTaskHandle);
 8004692:	4b15      	ldr	r3, [pc, #84]	; (80046e8 <gyroCalibrationTask+0x68>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4618      	mov	r0, r3
 8004698:	f007 fafe 	bl	800bc98 <osThreadSuspend>
	uart_write_debug("Gyro Calibration: Hold the device still\r\n", 50);
 800469c:	2132      	movs	r1, #50	; 0x32
 800469e:	4813      	ldr	r0, [pc, #76]	; (80046ec <gyroCalibrationTask+0x6c>)
 80046a0:	f001 fbb6 	bl	8005e10 <uart_write_debug>
	for(;;){
		if (gyro_offset_calculation(&mems_data) == 0){
 80046a4:	f107 0308 	add.w	r3, r7, #8
 80046a8:	4618      	mov	r0, r3
 80046aa:	f7ff fd99 	bl	80041e0 <gyro_offset_calculation>
 80046ae:	4603      	mov	r3, r0
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d112      	bne.n	80046da <gyroCalibrationTask+0x5a>
			osThreadResume(readMemsTaskHandle);
 80046b4:	4b0b      	ldr	r3, [pc, #44]	; (80046e4 <gyroCalibrationTask+0x64>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4618      	mov	r0, r3
 80046ba:	f007 fb0e 	bl	800bcda <osThreadResume>
			osThreadResume(printOutTaskHandle);
 80046be:	4b0a      	ldr	r3, [pc, #40]	; (80046e8 <gyroCalibrationTask+0x68>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4618      	mov	r0, r3
 80046c4:	f007 fb09 	bl	800bcda <osThreadResume>
			uart_write_debug("Gyro Calibration: Finished!\r\n", 50);
 80046c8:	2132      	movs	r1, #50	; 0x32
 80046ca:	4809      	ldr	r0, [pc, #36]	; (80046f0 <gyroCalibrationTask+0x70>)
 80046cc:	f001 fba0 	bl	8005e10 <uart_write_debug>
			osThreadSuspend(gyroCalibrationTaskHandle);
 80046d0:	4b08      	ldr	r3, [pc, #32]	; (80046f4 <gyroCalibrationTask+0x74>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4618      	mov	r0, r3
 80046d6:	f007 fadf 	bl	800bc98 <osThreadSuspend>
		}
		osDelay(5);
 80046da:	2005      	movs	r0, #5
 80046dc:	f007 fb1e 	bl	800bd1c <osDelay>
		if (gyro_offset_calculation(&mems_data) == 0){
 80046e0:	e7e0      	b.n	80046a4 <gyroCalibrationTask+0x24>
 80046e2:	bf00      	nop
 80046e4:	200003d8 	.word	0x200003d8
 80046e8:	200003dc 	.word	0x200003dc
 80046ec:	0801422c 	.word	0x0801422c
 80046f0:	08014258 	.word	0x08014258
 80046f4:	200003e4 	.word	0x200003e4

080046f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b096      	sub	sp, #88	; 0x58
 80046fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80046fe:	f107 0314 	add.w	r3, r7, #20
 8004702:	2244      	movs	r2, #68	; 0x44
 8004704:	2100      	movs	r1, #0
 8004706:	4618      	mov	r0, r3
 8004708:	f00b fa50 	bl	800fbac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800470c:	463b      	mov	r3, r7
 800470e:	2200      	movs	r2, #0
 8004710:	601a      	str	r2, [r3, #0]
 8004712:	605a      	str	r2, [r3, #4]
 8004714:	609a      	str	r2, [r3, #8]
 8004716:	60da      	str	r2, [r3, #12]
 8004718:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 800471a:	2000      	movs	r0, #0
 800471c:	f003 f984 	bl	8007a28 <HAL_PWREx_ControlVoltageScaling>
 8004720:	4603      	mov	r3, r0
 8004722:	2b00      	cmp	r3, #0
 8004724:	d001      	beq.n	800472a <SystemClock_Config+0x32>
  {
    Error_Handler();
 8004726:	f000 f9f5 	bl	8004b14 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800472a:	2310      	movs	r3, #16
 800472c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800472e:	2301      	movs	r3, #1
 8004730:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8004732:	2300      	movs	r3, #0
 8004734:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8004736:	2360      	movs	r3, #96	; 0x60
 8004738:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800473a:	2302      	movs	r3, #2
 800473c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800473e:	2301      	movs	r3, #1
 8004740:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8004742:	2301      	movs	r3, #1
 8004744:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 8004746:	233c      	movs	r3, #60	; 0x3c
 8004748:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800474a:	2302      	movs	r3, #2
 800474c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800474e:	2302      	movs	r3, #2
 8004750:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8004752:	2302      	movs	r3, #2
 8004754:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004756:	f107 0314 	add.w	r3, r7, #20
 800475a:	4618      	mov	r0, r3
 800475c:	f003 fa08 	bl	8007b70 <HAL_RCC_OscConfig>
 8004760:	4603      	mov	r3, r0
 8004762:	2b00      	cmp	r3, #0
 8004764:	d001      	beq.n	800476a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8004766:	f000 f9d5 	bl	8004b14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800476a:	230f      	movs	r3, #15
 800476c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800476e:	2303      	movs	r3, #3
 8004770:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004772:	2300      	movs	r3, #0
 8004774:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004776:	2300      	movs	r3, #0
 8004778:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800477a:	2300      	movs	r3, #0
 800477c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800477e:	463b      	mov	r3, r7
 8004780:	2105      	movs	r1, #5
 8004782:	4618      	mov	r0, r3
 8004784:	f003 fe0e 	bl	80083a4 <HAL_RCC_ClockConfig>
 8004788:	4603      	mov	r3, r0
 800478a:	2b00      	cmp	r3, #0
 800478c:	d001      	beq.n	8004792 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800478e:	f000 f9c1 	bl	8004b14 <Error_Handler>
  }
}
 8004792:	bf00      	nop
 8004794:	3758      	adds	r7, #88	; 0x58
 8004796:	46bd      	mov	sp, r7
 8004798:	bd80      	pop	{r7, pc}
	...

0800479c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b08a      	sub	sp, #40	; 0x28
 80047a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047a2:	f107 0314 	add.w	r3, r7, #20
 80047a6:	2200      	movs	r2, #0
 80047a8:	601a      	str	r2, [r3, #0]
 80047aa:	605a      	str	r2, [r3, #4]
 80047ac:	609a      	str	r2, [r3, #8]
 80047ae:	60da      	str	r2, [r3, #12]
 80047b0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80047b2:	4bbb      	ldr	r3, [pc, #748]	; (8004aa0 <MX_GPIO_Init+0x304>)
 80047b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047b6:	4aba      	ldr	r2, [pc, #744]	; (8004aa0 <MX_GPIO_Init+0x304>)
 80047b8:	f043 0310 	orr.w	r3, r3, #16
 80047bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80047be:	4bb8      	ldr	r3, [pc, #736]	; (8004aa0 <MX_GPIO_Init+0x304>)
 80047c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047c2:	f003 0310 	and.w	r3, r3, #16
 80047c6:	613b      	str	r3, [r7, #16]
 80047c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80047ca:	4bb5      	ldr	r3, [pc, #724]	; (8004aa0 <MX_GPIO_Init+0x304>)
 80047cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047ce:	4ab4      	ldr	r2, [pc, #720]	; (8004aa0 <MX_GPIO_Init+0x304>)
 80047d0:	f043 0304 	orr.w	r3, r3, #4
 80047d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80047d6:	4bb2      	ldr	r3, [pc, #712]	; (8004aa0 <MX_GPIO_Init+0x304>)
 80047d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047da:	f003 0304 	and.w	r3, r3, #4
 80047de:	60fb      	str	r3, [r7, #12]
 80047e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80047e2:	4baf      	ldr	r3, [pc, #700]	; (8004aa0 <MX_GPIO_Init+0x304>)
 80047e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047e6:	4aae      	ldr	r2, [pc, #696]	; (8004aa0 <MX_GPIO_Init+0x304>)
 80047e8:	f043 0301 	orr.w	r3, r3, #1
 80047ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80047ee:	4bac      	ldr	r3, [pc, #688]	; (8004aa0 <MX_GPIO_Init+0x304>)
 80047f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047f2:	f003 0301 	and.w	r3, r3, #1
 80047f6:	60bb      	str	r3, [r7, #8]
 80047f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80047fa:	4ba9      	ldr	r3, [pc, #676]	; (8004aa0 <MX_GPIO_Init+0x304>)
 80047fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047fe:	4aa8      	ldr	r2, [pc, #672]	; (8004aa0 <MX_GPIO_Init+0x304>)
 8004800:	f043 0302 	orr.w	r3, r3, #2
 8004804:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004806:	4ba6      	ldr	r3, [pc, #664]	; (8004aa0 <MX_GPIO_Init+0x304>)
 8004808:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800480a:	f003 0302 	and.w	r3, r3, #2
 800480e:	607b      	str	r3, [r7, #4]
 8004810:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004812:	4ba3      	ldr	r3, [pc, #652]	; (8004aa0 <MX_GPIO_Init+0x304>)
 8004814:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004816:	4aa2      	ldr	r2, [pc, #648]	; (8004aa0 <MX_GPIO_Init+0x304>)
 8004818:	f043 0308 	orr.w	r3, r3, #8
 800481c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800481e:	4ba0      	ldr	r3, [pc, #640]	; (8004aa0 <MX_GPIO_Init+0x304>)
 8004820:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004822:	f003 0308 	and.w	r3, r3, #8
 8004826:	603b      	str	r3, [r7, #0]
 8004828:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ST25DV04K_RF_DISABLE_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin, GPIO_PIN_RESET);
 800482a:	2200      	movs	r2, #0
 800482c:	f240 1105 	movw	r1, #261	; 0x105
 8004830:	489c      	ldr	r0, [pc, #624]	; (8004aa4 <MX_GPIO_Init+0x308>)
 8004832:	f002 f80b 	bl	800684c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|ARD_D4_Pin|ARD_D7_Pin|SPBTLE_RF_RST_Pin
 8004836:	2200      	movs	r2, #0
 8004838:	f248 111c 	movw	r1, #33052	; 0x811c
 800483c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004840:	f002 f804 	bl	800684c <HAL_GPIO_WritePin>
                          |ARD_D9_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8004844:	2200      	movs	r2, #0
 8004846:	f24f 0134 	movw	r1, #61492	; 0xf034
 800484a:	4897      	ldr	r0, [pc, #604]	; (8004aa8 <MX_GPIO_Init+0x30c>)
 800484c:	f001 fffe 	bl	800684c <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|PMOD_SPI2_SCK_Pin|STSAFE_A110_RESET_Pin, GPIO_PIN_RESET);
 8004850:	2200      	movs	r2, #0
 8004852:	f242 0183 	movw	r1, #8323	; 0x2083
 8004856:	4895      	ldr	r0, [pc, #596]	; (8004aac <MX_GPIO_Init+0x310>)
 8004858:	f001 fff8 	bl	800684c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 800485c:	2200      	movs	r2, #0
 800485e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8004862:	4893      	ldr	r0, [pc, #588]	; (8004ab0 <MX_GPIO_Init+0x314>)
 8004864:	f001 fff2 	bl	800684c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ST25DV04K_RF_DISABLE_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ST25DV04K_RF_DISABLE_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8004868:	f240 1305 	movw	r3, #261	; 0x105
 800486c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800486e:	2301      	movs	r3, #1
 8004870:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004872:	2300      	movs	r3, #0
 8004874:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004876:	2300      	movs	r3, #0
 8004878:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800487a:	f107 0314 	add.w	r3, r7, #20
 800487e:	4619      	mov	r1, r3
 8004880:	4888      	ldr	r0, [pc, #544]	; (8004aa4 <MX_GPIO_Init+0x308>)
 8004882:	f001 fe51 	bl	8006528 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin ST25DV04K_GPO_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin
                           ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|ST25DV04K_GPO_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin
 8004886:	237a      	movs	r3, #122	; 0x7a
 8004888:	617b      	str	r3, [r7, #20]
                          |ISM43362_DRDY_EXTI1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800488a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800488e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004890:	2300      	movs	r3, #0
 8004892:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004894:	f107 0314 	add.w	r3, r7, #20
 8004898:	4619      	mov	r1, r3
 800489a:	4882      	ldr	r0, [pc, #520]	; (8004aa4 <MX_GPIO_Init+0x308>)
 800489c:	f001 fe44 	bl	8006528 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_EXTI13_Pin VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin|VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 80048a0:	f44f 5306 	mov.w	r3, #8576	; 0x2180
 80048a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80048a6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80048aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048ac:	2300      	movs	r3, #0
 80048ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80048b0:	f107 0314 	add.w	r3, r7, #20
 80048b4:	4619      	mov	r1, r3
 80048b6:	487e      	ldr	r0, [pc, #504]	; (8004ab0 <MX_GPIO_Init+0x314>)
 80048b8:	f001 fe36 	bl	8006528 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 80048bc:	233f      	movs	r3, #63	; 0x3f
 80048be:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80048c0:	230b      	movs	r3, #11
 80048c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048c4:	2300      	movs	r3, #0
 80048c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80048c8:	f107 0314 	add.w	r3, r7, #20
 80048cc:	4619      	mov	r1, r3
 80048ce:	4878      	ldr	r0, [pc, #480]	; (8004ab0 <MX_GPIO_Init+0x314>)
 80048d0:	f001 fe2a 	bl	8006528 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 80048d4:	2303      	movs	r3, #3
 80048d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048d8:	2302      	movs	r3, #2
 80048da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048dc:	2300      	movs	r3, #0
 80048de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80048e0:	2303      	movs	r3, #3
 80048e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80048e4:	2308      	movs	r3, #8
 80048e6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80048e8:	f107 0314 	add.w	r3, r7, #20
 80048ec:	4619      	mov	r1, r3
 80048ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80048f2:	f001 fe19 	bl	8006528 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin ARD_D4_Pin ARD_D7_Pin SPBTLE_RF_RST_Pin
                           ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|ARD_D4_Pin|ARD_D7_Pin|SPBTLE_RF_RST_Pin
 80048f6:	f248 131c 	movw	r3, #33052	; 0x811c
 80048fa:	617b      	str	r3, [r7, #20]
                          |ARD_D9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80048fc:	2301      	movs	r3, #1
 80048fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004900:	2300      	movs	r3, #0
 8004902:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004904:	2300      	movs	r3, #0
 8004906:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004908:	f107 0314 	add.w	r3, r7, #20
 800490c:	4619      	mov	r1, r3
 800490e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004912:	f001 fe09 	bl	8006528 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8004916:	23e0      	movs	r3, #224	; 0xe0
 8004918:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800491a:	2302      	movs	r3, #2
 800491c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800491e:	2300      	movs	r3, #0
 8004920:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004922:	2303      	movs	r3, #3
 8004924:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004926:	2305      	movs	r3, #5
 8004928:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800492a:	f107 0314 	add.w	r3, r7, #20
 800492e:	4619      	mov	r1, r3
 8004930:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004934:	f001 fdf8 	bl	8006528 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8004938:	2301      	movs	r3, #1
 800493a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800493c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8004940:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004942:	2300      	movs	r3, #0
 8004944:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8004946:	f107 0314 	add.w	r3, r7, #20
 800494a:	4619      	mov	r1, r3
 800494c:	4856      	ldr	r0, [pc, #344]	; (8004aa8 <MX_GPIO_Init+0x30c>)
 800494e:	f001 fdeb 	bl	8006528 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8004952:	2302      	movs	r3, #2
 8004954:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004956:	2302      	movs	r3, #2
 8004958:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800495a:	2300      	movs	r3, #0
 800495c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800495e:	2300      	movs	r3, #0
 8004960:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004962:	2302      	movs	r3, #2
 8004964:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8004966:	f107 0314 	add.w	r3, r7, #20
 800496a:	4619      	mov	r1, r3
 800496c:	484e      	ldr	r0, [pc, #312]	; (8004aa8 <MX_GPIO_Init+0x30c>)
 800496e:	f001 fddb 	bl	8006528 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8004972:	f24f 0334 	movw	r3, #61492	; 0xf034
 8004976:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004978:	2301      	movs	r3, #1
 800497a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800497c:	2300      	movs	r3, #0
 800497e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004980:	2300      	movs	r3, #0
 8004982:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004984:	f107 0314 	add.w	r3, r7, #20
 8004988:	4619      	mov	r1, r3
 800498a:	4847      	ldr	r0, [pc, #284]	; (8004aa8 <MX_GPIO_Init+0x30c>)
 800498c:	f001 fdcc 	bl	8006528 <HAL_GPIO_Init>

  /*Configure GPIO pins : DFSDM1_DATIN2_Pin DFSDM1_CKOUT_Pin */
  GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8004990:	f44f 7320 	mov.w	r3, #640	; 0x280
 8004994:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004996:	2302      	movs	r3, #2
 8004998:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800499a:	2300      	movs	r3, #0
 800499c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800499e:	2300      	movs	r3, #0
 80049a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80049a2:	2306      	movs	r3, #6
 80049a4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80049a6:	f107 0314 	add.w	r3, r7, #20
 80049aa:	4619      	mov	r1, r3
 80049ac:	483d      	ldr	r0, [pc, #244]	; (8004aa4 <MX_GPIO_Init+0x308>)
 80049ae:	f001 fdbb 	bl	8006528 <HAL_GPIO_Init>

  /*Configure GPIO pins : QUADSPI_CLK_Pin QUADSPI_NCS_Pin OQUADSPI_BK1_IO0_Pin QUADSPI_BK1_IO1_Pin
                           QUAD_SPI_BK1_IO2_Pin QUAD_SPI_BK1_IO3_Pin */
  GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 80049b2:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 80049b6:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049b8:	2302      	movs	r3, #2
 80049ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049bc:	2300      	movs	r3, #0
 80049be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80049c0:	2303      	movs	r3, #3
 80049c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 80049c4:	230a      	movs	r3, #10
 80049c6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80049c8:	f107 0314 	add.w	r3, r7, #20
 80049cc:	4619      	mov	r1, r3
 80049ce:	4835      	ldr	r0, [pc, #212]	; (8004aa4 <MX_GPIO_Init+0x308>)
 80049d0:	f001 fdaa 	bl	8006528 <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_UART3_TX_Pin INTERNAL_UART3_RX_Pin */
  GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 80049d4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80049d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049da:	2302      	movs	r3, #2
 80049dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049de:	2300      	movs	r3, #0
 80049e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80049e2:	2303      	movs	r3, #3
 80049e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80049e6:	2307      	movs	r3, #7
 80049e8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80049ea:	f107 0314 	add.w	r3, r7, #20
 80049ee:	4619      	mov	r1, r3
 80049f0:	482e      	ldr	r0, [pc, #184]	; (8004aac <MX_GPIO_Init+0x310>)
 80049f2:	f001 fd99 	bl	8006528 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI10_Pin LSM6DSL_INT1_EXTI11_Pin USB_OTG_FS_PWR_EN_Pin ARD_D2_Pin
                           HTS221_DRDY_EXTI15_Pin PMOD_IRQ_EXTI2_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI10_Pin|LSM6DSL_INT1_EXTI11_Pin|USB_OTG_FS_PWR_EN_Pin|ARD_D2_Pin
 80049f6:	f64d 4304 	movw	r3, #56324	; 0xdc04
 80049fa:	617b      	str	r3, [r7, #20]
                          |HTS221_DRDY_EXTI15_Pin|PMOD_IRQ_EXTI2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80049fc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8004a00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a02:	2300      	movs	r3, #0
 8004a04:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004a06:	f107 0314 	add.w	r3, r7, #20
 8004a0a:	4619      	mov	r1, r3
 8004a0c:	4827      	ldr	r0, [pc, #156]	; (8004aac <MX_GPIO_Init+0x310>)
 8004a0e:	f001 fd8b 	bl	8006528 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin PMOD_SPI2_SCK_Pin STSAFE_A110_RESET_Pin */
  GPIO_InitStruct.Pin = SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|PMOD_SPI2_SCK_Pin|STSAFE_A110_RESET_Pin;
 8004a12:	f242 0383 	movw	r3, #8323	; 0x2083
 8004a16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004a18:	2301      	movs	r3, #1
 8004a1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a20:	2300      	movs	r3, #0
 8004a22:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004a24:	f107 0314 	add.w	r3, r7, #20
 8004a28:	4619      	mov	r1, r3
 8004a2a:	4820      	ldr	r0, [pc, #128]	; (8004aac <MX_GPIO_Init+0x310>)
 8004a2c:	f001 fd7c 	bl	8006528 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8004a30:	f44f 7310 	mov.w	r3, #576	; 0x240
 8004a34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004a36:	2301      	movs	r3, #1
 8004a38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a3e:	2300      	movs	r3, #0
 8004a40:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004a42:	f107 0314 	add.w	r3, r7, #20
 8004a46:	4619      	mov	r1, r3
 8004a48:	4819      	ldr	r0, [pc, #100]	; (8004ab0 <MX_GPIO_Init+0x314>)
 8004a4a:	f001 fd6d 	bl	8006528 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8004a4e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004a52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004a54:	2300      	movs	r3, #0
 8004a56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a58:	2300      	movs	r3, #0
 8004a5a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8004a5c:	f107 0314 	add.w	r3, r7, #20
 8004a60:	4619      	mov	r1, r3
 8004a62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004a66:	f001 fd5f 	bl	8006528 <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_SPI3_SCK_Pin INTERNAL_SPI3_MISO_Pin INTERNAL_SPI3_MOSI_Pin */
  GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8004a6a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8004a6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a70:	2302      	movs	r3, #2
 8004a72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a74:	2300      	movs	r3, #0
 8004a76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a78:	2303      	movs	r3, #3
 8004a7a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8004a7c:	2306      	movs	r3, #6
 8004a7e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004a80:	f107 0314 	add.w	r3, r7, #20
 8004a84:	4619      	mov	r1, r3
 8004a86:	480a      	ldr	r0, [pc, #40]	; (8004ab0 <MX_GPIO_Init+0x314>)
 8004a88:	f001 fd4e 	bl	8006528 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8004a8c:	2378      	movs	r3, #120	; 0x78
 8004a8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a90:	2302      	movs	r3, #2
 8004a92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a94:	2300      	movs	r3, #0
 8004a96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a98:	2303      	movs	r3, #3
 8004a9a:	623b      	str	r3, [r7, #32]
 8004a9c:	e00a      	b.n	8004ab4 <MX_GPIO_Init+0x318>
 8004a9e:	bf00      	nop
 8004aa0:	40021000 	.word	0x40021000
 8004aa4:	48001000 	.word	0x48001000
 8004aa8:	48000400 	.word	0x48000400
 8004aac:	48000c00 	.word	0x48000c00
 8004ab0:	48000800 	.word	0x48000800
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004ab4:	2307      	movs	r3, #7
 8004ab6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004ab8:	f107 0314 	add.w	r3, r7, #20
 8004abc:	4619      	mov	r1, r3
 8004abe:	480b      	ldr	r0, [pc, #44]	; (8004aec <MX_GPIO_Init+0x350>)
 8004ac0:	f001 fd32 	bl	8006528 <HAL_GPIO_Init>
//  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
//  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
//  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	2105      	movs	r1, #5
 8004ac8:	2017      	movs	r0, #23
 8004aca:	f001 fc47 	bl	800635c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8004ace:	2017      	movs	r0, #23
 8004ad0:	f001 fc60 	bl	8006394 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	2105      	movs	r1, #5
 8004ad8:	2028      	movs	r0, #40	; 0x28
 8004ada:	f001 fc3f 	bl	800635c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004ade:	2028      	movs	r0, #40	; 0x28
 8004ae0:	f001 fc58 	bl	8006394 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8004ae4:	bf00      	nop
 8004ae6:	3728      	adds	r7, #40	; 0x28
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bd80      	pop	{r7, pc}
 8004aec:	48000c00 	.word	0x48000c00

08004af0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b082      	sub	sp, #8
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a04      	ldr	r2, [pc, #16]	; (8004b10 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d101      	bne.n	8004b06 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8004b02:	f001 fb2f 	bl	8006164 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8004b06:	bf00      	nop
 8004b08:	3708      	adds	r7, #8
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}
 8004b0e:	bf00      	nop
 8004b10:	40012c00 	.word	0x40012c00

08004b14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004b18:	b672      	cpsid	i
}
 8004b1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOB,LED2_Pin);
 8004b1c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004b20:	4803      	ldr	r0, [pc, #12]	; (8004b30 <Error_Handler+0x1c>)
 8004b22:	f001 feab 	bl	800687c <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 8004b26:	2064      	movs	r0, #100	; 0x64
 8004b28:	f001 fb3c 	bl	80061a4 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOB,LED2_Pin);
 8004b2c:	e7f6      	b.n	8004b1c <Error_Handler+0x8>
 8004b2e:	bf00      	nop
 8004b30:	48000400 	.word	0x48000400

08004b34 <tick_Handler>:
uint8_t flag_connected_toIris = 0;

static uint8_t message_d[25]={0};
static message_t msg;

void tick_Handler(uint8_t *data){
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b084      	sub	sp, #16
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
	uint8_t mess_len = 0;
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	73fb      	strb	r3, [r7, #15]
    init_message_t();
 8004b40:	f000 fbac 	bl	800529c <init_message_t>

	if (!parseMessage(data, UART_NYX)){
 8004b44:	2101      	movs	r1, #1
 8004b46:	6878      	ldr	r0, [r7, #4]
 8004b48:	f000 fa9a 	bl	8005080 <parseMessage>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d102      	bne.n	8004b58 <tick_Handler+0x24>
		handler(UART_NYX);
 8004b52:	2001      	movs	r0, #1
 8004b54:	f000 fb1e 	bl	8005194 <handler>
	}
}
 8004b58:	bf00      	nop
 8004b5a:	3710      	adds	r7, #16
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bd80      	pop	{r7, pc}

08004b60 <sendNack>:
uint8_t send_heartbeat(UART_select device){
    uint8_t data[1] = {0};
    return transmitMessage(data, 1, SBP_CMD_HEARTBEAT, device);
}

uint8_t sendNack(UART_select device){
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b084      	sub	sp, #16
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	4603      	mov	r3, r0
 8004b68:	71fb      	strb	r3, [r7, #7]
    if ((TOKEN == ESC) || (TOKEN == ETX) || (TOKEN == STX)){
 8004b6a:	4b16      	ldr	r3, [pc, #88]	; (8004bc4 <sendNack+0x64>)
 8004b6c:	781b      	ldrb	r3, [r3, #0]
 8004b6e:	2b1b      	cmp	r3, #27
 8004b70:	d007      	beq.n	8004b82 <sendNack+0x22>
 8004b72:	4b14      	ldr	r3, [pc, #80]	; (8004bc4 <sendNack+0x64>)
 8004b74:	781b      	ldrb	r3, [r3, #0]
 8004b76:	2b03      	cmp	r3, #3
 8004b78:	d003      	beq.n	8004b82 <sendNack+0x22>
 8004b7a:	4b12      	ldr	r3, [pc, #72]	; (8004bc4 <sendNack+0x64>)
 8004b7c:	781b      	ldrb	r3, [r3, #0]
 8004b7e:	2b02      	cmp	r3, #2
 8004b80:	d10f      	bne.n	8004ba2 <sendNack+0x42>
        uint8_t msg[3] = {NACK,ESC,TOKEN};
 8004b82:	2315      	movs	r3, #21
 8004b84:	733b      	strb	r3, [r7, #12]
 8004b86:	231b      	movs	r3, #27
 8004b88:	737b      	strb	r3, [r7, #13]
 8004b8a:	4b0e      	ldr	r3, [pc, #56]	; (8004bc4 <sendNack+0x64>)
 8004b8c:	781b      	ldrb	r3, [r3, #0]
 8004b8e:	73bb      	strb	r3, [r7, #14]
        return uart_write(msg, 3, device, 5);
 8004b90:	79fa      	ldrb	r2, [r7, #7]
 8004b92:	f107 000c 	add.w	r0, r7, #12
 8004b96:	2305      	movs	r3, #5
 8004b98:	2103      	movs	r1, #3
 8004b9a:	f001 f94f 	bl	8005e3c <uart_write>
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	e00c      	b.n	8004bbc <sendNack+0x5c>
    }
    else{
        uint8_t msg[2] = {NACK,TOKEN};
 8004ba2:	2315      	movs	r3, #21
 8004ba4:	723b      	strb	r3, [r7, #8]
 8004ba6:	4b07      	ldr	r3, [pc, #28]	; (8004bc4 <sendNack+0x64>)
 8004ba8:	781b      	ldrb	r3, [r3, #0]
 8004baa:	727b      	strb	r3, [r7, #9]
        return uart_write(msg, 2, device, 5);
 8004bac:	79fa      	ldrb	r2, [r7, #7]
 8004bae:	f107 0008 	add.w	r0, r7, #8
 8004bb2:	2305      	movs	r3, #5
 8004bb4:	2102      	movs	r1, #2
 8004bb6:	f001 f941 	bl	8005e3c <uart_write>
 8004bba:	4603      	mov	r3, r0
    }
}
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	3710      	adds	r7, #16
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	bd80      	pop	{r7, pc}
 8004bc4:	20000400 	.word	0x20000400

08004bc8 <sendAck>:

uint8_t sendAck(UART_select device){
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b084      	sub	sp, #16
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	4603      	mov	r3, r0
 8004bd0:	71fb      	strb	r3, [r7, #7]
    if ((TOKEN == ESC) || (TOKEN == ETX) || (TOKEN == STX)){
 8004bd2:	4b16      	ldr	r3, [pc, #88]	; (8004c2c <sendAck+0x64>)
 8004bd4:	781b      	ldrb	r3, [r3, #0]
 8004bd6:	2b1b      	cmp	r3, #27
 8004bd8:	d007      	beq.n	8004bea <sendAck+0x22>
 8004bda:	4b14      	ldr	r3, [pc, #80]	; (8004c2c <sendAck+0x64>)
 8004bdc:	781b      	ldrb	r3, [r3, #0]
 8004bde:	2b03      	cmp	r3, #3
 8004be0:	d003      	beq.n	8004bea <sendAck+0x22>
 8004be2:	4b12      	ldr	r3, [pc, #72]	; (8004c2c <sendAck+0x64>)
 8004be4:	781b      	ldrb	r3, [r3, #0]
 8004be6:	2b02      	cmp	r3, #2
 8004be8:	d10f      	bne.n	8004c0a <sendAck+0x42>
        uint8_t msg[3] = {ACK,ESC,TOKEN};
 8004bea:	2306      	movs	r3, #6
 8004bec:	733b      	strb	r3, [r7, #12]
 8004bee:	231b      	movs	r3, #27
 8004bf0:	737b      	strb	r3, [r7, #13]
 8004bf2:	4b0e      	ldr	r3, [pc, #56]	; (8004c2c <sendAck+0x64>)
 8004bf4:	781b      	ldrb	r3, [r3, #0]
 8004bf6:	73bb      	strb	r3, [r7, #14]
        return uart_write(msg, 3, device, 5);
 8004bf8:	79fa      	ldrb	r2, [r7, #7]
 8004bfa:	f107 000c 	add.w	r0, r7, #12
 8004bfe:	2305      	movs	r3, #5
 8004c00:	2103      	movs	r1, #3
 8004c02:	f001 f91b 	bl	8005e3c <uart_write>
 8004c06:	4603      	mov	r3, r0
 8004c08:	e00c      	b.n	8004c24 <sendAck+0x5c>
    }
    else{
        uint8_t msg[2] = {ACK,TOKEN};
 8004c0a:	2306      	movs	r3, #6
 8004c0c:	723b      	strb	r3, [r7, #8]
 8004c0e:	4b07      	ldr	r3, [pc, #28]	; (8004c2c <sendAck+0x64>)
 8004c10:	781b      	ldrb	r3, [r3, #0]
 8004c12:	727b      	strb	r3, [r7, #9]
        return uart_write(msg, 2, device, 5);
 8004c14:	79fa      	ldrb	r2, [r7, #7]
 8004c16:	f107 0008 	add.w	r0, r7, #8
 8004c1a:	2305      	movs	r3, #5
 8004c1c:	2102      	movs	r1, #2
 8004c1e:	f001 f90d 	bl	8005e3c <uart_write>
 8004c22:	4603      	mov	r3, r0
    }
}
 8004c24:	4618      	mov	r0, r3
 8004c26:	3710      	adds	r7, #16
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bd80      	pop	{r7, pc}
 8004c2c:	20000400 	.word	0x20000400

08004c30 <calcDataSize>:

static uint8_t calcDataSize(uint8_t *data, uint8_t len){
 8004c30:	b480      	push	{r7}
 8004c32:	b085      	sub	sp, #20
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
 8004c38:	460b      	mov	r3, r1
 8004c3a:	70fb      	strb	r3, [r7, #3]
    uint8_t j,i;
    j=0;
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	73fb      	strb	r3, [r7, #15]
    for (i=0;i<len;i++){
 8004c40:	2300      	movs	r3, #0
 8004c42:	73bb      	strb	r3, [r7, #14]
 8004c44:	e01e      	b.n	8004c84 <calcDataSize+0x54>
       if ((data[i] == STX) || (data[i] == ETX) || (data[i] == ESC)){
 8004c46:	7bbb      	ldrb	r3, [r7, #14]
 8004c48:	687a      	ldr	r2, [r7, #4]
 8004c4a:	4413      	add	r3, r2
 8004c4c:	781b      	ldrb	r3, [r3, #0]
 8004c4e:	2b02      	cmp	r3, #2
 8004c50:	d00b      	beq.n	8004c6a <calcDataSize+0x3a>
 8004c52:	7bbb      	ldrb	r3, [r7, #14]
 8004c54:	687a      	ldr	r2, [r7, #4]
 8004c56:	4413      	add	r3, r2
 8004c58:	781b      	ldrb	r3, [r3, #0]
 8004c5a:	2b03      	cmp	r3, #3
 8004c5c:	d005      	beq.n	8004c6a <calcDataSize+0x3a>
 8004c5e:	7bbb      	ldrb	r3, [r7, #14]
 8004c60:	687a      	ldr	r2, [r7, #4]
 8004c62:	4413      	add	r3, r2
 8004c64:	781b      	ldrb	r3, [r3, #0]
 8004c66:	2b1b      	cmp	r3, #27
 8004c68:	d106      	bne.n	8004c78 <calcDataSize+0x48>
           j++;
 8004c6a:	7bfb      	ldrb	r3, [r7, #15]
 8004c6c:	3301      	adds	r3, #1
 8004c6e:	73fb      	strb	r3, [r7, #15]
           j++;
 8004c70:	7bfb      	ldrb	r3, [r7, #15]
 8004c72:	3301      	adds	r3, #1
 8004c74:	73fb      	strb	r3, [r7, #15]
 8004c76:	e002      	b.n	8004c7e <calcDataSize+0x4e>
       }
       else j++;
 8004c78:	7bfb      	ldrb	r3, [r7, #15]
 8004c7a:	3301      	adds	r3, #1
 8004c7c:	73fb      	strb	r3, [r7, #15]
    for (i=0;i<len;i++){
 8004c7e:	7bbb      	ldrb	r3, [r7, #14]
 8004c80:	3301      	adds	r3, #1
 8004c82:	73bb      	strb	r3, [r7, #14]
 8004c84:	7bba      	ldrb	r2, [r7, #14]
 8004c86:	78fb      	ldrb	r3, [r7, #3]
 8004c88:	429a      	cmp	r2, r3
 8004c8a:	d3dc      	bcc.n	8004c46 <calcDataSize+0x16>
    }
    return j;
 8004c8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c8e:	4618      	mov	r0, r3
 8004c90:	3714      	adds	r7, #20
 8004c92:	46bd      	mov	sp, r7
 8004c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c98:	4770      	bx	lr
	...

08004c9c <transmitMessage>:

uint8_t transmitMessage(uint8_t *data, uint8_t data_len, uint8_t cmd, UART_select device){
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b08c      	sub	sp, #48	; 0x30
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
 8004ca4:	4608      	mov	r0, r1
 8004ca6:	4611      	mov	r1, r2
 8004ca8:	461a      	mov	r2, r3
 8004caa:	4603      	mov	r3, r0
 8004cac:	70fb      	strb	r3, [r7, #3]
 8004cae:	460b      	mov	r3, r1
 8004cb0:	70bb      	strb	r3, [r7, #2]
 8004cb2:	4613      	mov	r3, r2
 8004cb4:	707b      	strb	r3, [r7, #1]
    uint8_t message[34];
    uint8_t i,j,index;
    uint8_t tmp_len = 0;
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    tmp_len = calcDataSize(data, data_len);
 8004cbc:	78fb      	ldrb	r3, [r7, #3]
 8004cbe:	4619      	mov	r1, r3
 8004cc0:	6878      	ldr	r0, [r7, #4]
 8004cc2:	f7ff ffb5 	bl	8004c30 <calcDataSize>
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    msg.len = data_len;
 8004ccc:	78fb      	ldrb	r3, [r7, #3]
 8004cce:	b29a      	uxth	r2, r3
 8004cd0:	4bc1      	ldr	r3, [pc, #772]	; (8004fd8 <transmitMessage+0x33c>)
 8004cd2:	80da      	strh	r2, [r3, #6]
    memcpy(msg.data, data, msg.len);
 8004cd4:	4bc0      	ldr	r3, [pc, #768]	; (8004fd8 <transmitMessage+0x33c>)
 8004cd6:	88db      	ldrh	r3, [r3, #6]
 8004cd8:	461a      	mov	r2, r3
 8004cda:	6879      	ldr	r1, [r7, #4]
 8004cdc:	48bf      	ldr	r0, [pc, #764]	; (8004fdc <transmitMessage+0x340>)
 8004cde:	f00a ff57 	bl	800fb90 <memcpy>
    msg.protocol_rev[0] = PROTOCOL_VER;
 8004ce2:	4bbd      	ldr	r3, [pc, #756]	; (8004fd8 <transmitMessage+0x33c>)
 8004ce4:	22fe      	movs	r2, #254	; 0xfe
 8004ce6:	701a      	strb	r2, [r3, #0]
    msg.protocol_rev[1] = COMM_PROTOCOL_REV;
 8004ce8:	4bbb      	ldr	r3, [pc, #748]	; (8004fd8 <transmitMessage+0x33c>)
 8004cea:	2201      	movs	r2, #1
 8004cec:	705a      	strb	r2, [r3, #1]
    if (TOKEN == 255){
 8004cee:	4bbc      	ldr	r3, [pc, #752]	; (8004fe0 <transmitMessage+0x344>)
 8004cf0:	781b      	ldrb	r3, [r3, #0]
 8004cf2:	2bff      	cmp	r3, #255	; 0xff
 8004cf4:	d103      	bne.n	8004cfe <transmitMessage+0x62>
        TOKEN=0;
 8004cf6:	4bba      	ldr	r3, [pc, #744]	; (8004fe0 <transmitMessage+0x344>)
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	701a      	strb	r2, [r3, #0]
 8004cfc:	e005      	b.n	8004d0a <transmitMessage+0x6e>
    }
    else{
        TOKEN++;
 8004cfe:	4bb8      	ldr	r3, [pc, #736]	; (8004fe0 <transmitMessage+0x344>)
 8004d00:	781b      	ldrb	r3, [r3, #0]
 8004d02:	3301      	adds	r3, #1
 8004d04:	b2da      	uxtb	r2, r3
 8004d06:	4bb6      	ldr	r3, [pc, #728]	; (8004fe0 <transmitMessage+0x344>)
 8004d08:	701a      	strb	r2, [r3, #0]
    }
    msg.token = TOKEN;
 8004d0a:	4bb5      	ldr	r3, [pc, #724]	; (8004fe0 <transmitMessage+0x344>)
 8004d0c:	781a      	ldrb	r2, [r3, #0]
 8004d0e:	4bb2      	ldr	r3, [pc, #712]	; (8004fd8 <transmitMessage+0x33c>)
 8004d10:	709a      	strb	r2, [r3, #2]

    msg.cmd = cmd;
 8004d12:	4ab1      	ldr	r2, [pc, #708]	; (8004fd8 <transmitMessage+0x33c>)
 8004d14:	78bb      	ldrb	r3, [r7, #2]
 8004d16:	7153      	strb	r3, [r2, #5]
    msg.senderID[0] = ESC;
 8004d18:	4baf      	ldr	r3, [pc, #700]	; (8004fd8 <transmitMessage+0x33c>)
 8004d1a:	221b      	movs	r2, #27
 8004d1c:	70da      	strb	r2, [r3, #3]
    msg.senderID[1] = SBP_S_ID;
 8004d1e:	4bae      	ldr	r3, [pc, #696]	; (8004fd8 <transmitMessage+0x33c>)
 8004d20:	2232      	movs	r2, #50	; 0x32
 8004d22:	711a      	strb	r2, [r3, #4]
    calcChecksum();
 8004d24:	f000 f95e 	bl	8004fe4 <calcChecksum>
    //CREATE MESSAGE
    index = 0;
 8004d28:	2300      	movs	r3, #0
 8004d2a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    message[index] = STX;
 8004d2e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004d32:	3330      	adds	r3, #48	; 0x30
 8004d34:	443b      	add	r3, r7
 8004d36:	2202      	movs	r2, #2
 8004d38:	f803 2c28 	strb.w	r2, [r3, #-40]
    index++;
 8004d3c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004d40:	3301      	adds	r3, #1
 8004d42:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    message[index] = msg.protocol_rev[0];
 8004d46:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004d4a:	4aa3      	ldr	r2, [pc, #652]	; (8004fd8 <transmitMessage+0x33c>)
 8004d4c:	7812      	ldrb	r2, [r2, #0]
 8004d4e:	3330      	adds	r3, #48	; 0x30
 8004d50:	443b      	add	r3, r7
 8004d52:	f803 2c28 	strb.w	r2, [r3, #-40]
    index++;
 8004d56:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004d5a:	3301      	adds	r3, #1
 8004d5c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    message[index] = msg.protocol_rev[1];
 8004d60:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004d64:	4a9c      	ldr	r2, [pc, #624]	; (8004fd8 <transmitMessage+0x33c>)
 8004d66:	7852      	ldrb	r2, [r2, #1]
 8004d68:	3330      	adds	r3, #48	; 0x30
 8004d6a:	443b      	add	r3, r7
 8004d6c:	f803 2c28 	strb.w	r2, [r3, #-40]
    index++;
 8004d70:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004d74:	3301      	adds	r3, #1
 8004d76:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    if ((msg.token == STX) || (msg.token == ETX) || (msg.token == ESC)){
 8004d7a:	4b97      	ldr	r3, [pc, #604]	; (8004fd8 <transmitMessage+0x33c>)
 8004d7c:	789b      	ldrb	r3, [r3, #2]
 8004d7e:	2b02      	cmp	r3, #2
 8004d80:	d007      	beq.n	8004d92 <transmitMessage+0xf6>
 8004d82:	4b95      	ldr	r3, [pc, #596]	; (8004fd8 <transmitMessage+0x33c>)
 8004d84:	789b      	ldrb	r3, [r3, #2]
 8004d86:	2b03      	cmp	r3, #3
 8004d88:	d003      	beq.n	8004d92 <transmitMessage+0xf6>
 8004d8a:	4b93      	ldr	r3, [pc, #588]	; (8004fd8 <transmitMessage+0x33c>)
 8004d8c:	789b      	ldrb	r3, [r3, #2]
 8004d8e:	2b1b      	cmp	r3, #27
 8004d90:	d119      	bne.n	8004dc6 <transmitMessage+0x12a>
        message[index] = ESC;
 8004d92:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004d96:	3330      	adds	r3, #48	; 0x30
 8004d98:	443b      	add	r3, r7
 8004d9a:	221b      	movs	r2, #27
 8004d9c:	f803 2c28 	strb.w	r2, [r3, #-40]
        index++;
 8004da0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004da4:	3301      	adds	r3, #1
 8004da6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        message[index] = msg.token;
 8004daa:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004dae:	4a8a      	ldr	r2, [pc, #552]	; (8004fd8 <transmitMessage+0x33c>)
 8004db0:	7892      	ldrb	r2, [r2, #2]
 8004db2:	3330      	adds	r3, #48	; 0x30
 8004db4:	443b      	add	r3, r7
 8004db6:	f803 2c28 	strb.w	r2, [r3, #-40]
        index++;
 8004dba:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004dbe:	3301      	adds	r3, #1
 8004dc0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8004dc4:	e00c      	b.n	8004de0 <transmitMessage+0x144>
    }
    else{
        message[index] = msg.token;
 8004dc6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004dca:	4a83      	ldr	r2, [pc, #524]	; (8004fd8 <transmitMessage+0x33c>)
 8004dcc:	7892      	ldrb	r2, [r2, #2]
 8004dce:	3330      	adds	r3, #48	; 0x30
 8004dd0:	443b      	add	r3, r7
 8004dd2:	f803 2c28 	strb.w	r2, [r3, #-40]
        index++;
 8004dd6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004dda:	3301      	adds	r3, #1
 8004ddc:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    }
    message[index] = msg.senderID[0];
 8004de0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004de4:	4a7c      	ldr	r2, [pc, #496]	; (8004fd8 <transmitMessage+0x33c>)
 8004de6:	78d2      	ldrb	r2, [r2, #3]
 8004de8:	3330      	adds	r3, #48	; 0x30
 8004dea:	443b      	add	r3, r7
 8004dec:	f803 2c28 	strb.w	r2, [r3, #-40]
    index++;
 8004df0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004df4:	3301      	adds	r3, #1
 8004df6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    message[index] = msg.senderID[1];
 8004dfa:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004dfe:	4a76      	ldr	r2, [pc, #472]	; (8004fd8 <transmitMessage+0x33c>)
 8004e00:	7912      	ldrb	r2, [r2, #4]
 8004e02:	3330      	adds	r3, #48	; 0x30
 8004e04:	443b      	add	r3, r7
 8004e06:	f803 2c28 	strb.w	r2, [r3, #-40]
    index++;
 8004e0a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004e0e:	3301      	adds	r3, #1
 8004e10:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    message[index] = msg.cmd;
 8004e14:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004e18:	4a6f      	ldr	r2, [pc, #444]	; (8004fd8 <transmitMessage+0x33c>)
 8004e1a:	7952      	ldrb	r2, [r2, #5]
 8004e1c:	3330      	adds	r3, #48	; 0x30
 8004e1e:	443b      	add	r3, r7
 8004e20:	f803 2c28 	strb.w	r2, [r3, #-40]
    index++;
 8004e24:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004e28:	3301      	adds	r3, #1
 8004e2a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    for(i=0; i<msg.len;i++){
 8004e2e:	2300      	movs	r3, #0
 8004e30:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8004e34:	e046      	b.n	8004ec4 <transmitMessage+0x228>
        if ((msg.data[i] == STX) || (msg.data[i] == ETX) || (msg.data[i] == ESC)){
 8004e36:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004e3a:	4a67      	ldr	r2, [pc, #412]	; (8004fd8 <transmitMessage+0x33c>)
 8004e3c:	4413      	add	r3, r2
 8004e3e:	7a1b      	ldrb	r3, [r3, #8]
 8004e40:	2b02      	cmp	r3, #2
 8004e42:	d00d      	beq.n	8004e60 <transmitMessage+0x1c4>
 8004e44:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004e48:	4a63      	ldr	r2, [pc, #396]	; (8004fd8 <transmitMessage+0x33c>)
 8004e4a:	4413      	add	r3, r2
 8004e4c:	7a1b      	ldrb	r3, [r3, #8]
 8004e4e:	2b03      	cmp	r3, #3
 8004e50:	d006      	beq.n	8004e60 <transmitMessage+0x1c4>
 8004e52:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004e56:	4a60      	ldr	r2, [pc, #384]	; (8004fd8 <transmitMessage+0x33c>)
 8004e58:	4413      	add	r3, r2
 8004e5a:	7a1b      	ldrb	r3, [r3, #8]
 8004e5c:	2b1b      	cmp	r3, #27
 8004e5e:	d11c      	bne.n	8004e9a <transmitMessage+0x1fe>
            message[index] = ESC;
 8004e60:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004e64:	3330      	adds	r3, #48	; 0x30
 8004e66:	443b      	add	r3, r7
 8004e68:	221b      	movs	r2, #27
 8004e6a:	f803 2c28 	strb.w	r2, [r3, #-40]
            index++;
 8004e6e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004e72:	3301      	adds	r3, #1
 8004e74:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
            message[index] = msg.data[i];
 8004e78:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8004e7c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004e80:	4955      	ldr	r1, [pc, #340]	; (8004fd8 <transmitMessage+0x33c>)
 8004e82:	440a      	add	r2, r1
 8004e84:	7a12      	ldrb	r2, [r2, #8]
 8004e86:	3330      	adds	r3, #48	; 0x30
 8004e88:	443b      	add	r3, r7
 8004e8a:	f803 2c28 	strb.w	r2, [r3, #-40]
            index++;
 8004e8e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004e92:	3301      	adds	r3, #1
 8004e94:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8004e98:	e00f      	b.n	8004eba <transmitMessage+0x21e>
        }
        else{
            message[index] = msg.data[i];
 8004e9a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8004e9e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004ea2:	494d      	ldr	r1, [pc, #308]	; (8004fd8 <transmitMessage+0x33c>)
 8004ea4:	440a      	add	r2, r1
 8004ea6:	7a12      	ldrb	r2, [r2, #8]
 8004ea8:	3330      	adds	r3, #48	; 0x30
 8004eaa:	443b      	add	r3, r7
 8004eac:	f803 2c28 	strb.w	r2, [r3, #-40]
            index++;
 8004eb0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004eb4:	3301      	adds	r3, #1
 8004eb6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    for(i=0; i<msg.len;i++){
 8004eba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004ebe:	3301      	adds	r3, #1
 8004ec0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8004ec4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004ec8:	b29a      	uxth	r2, r3
 8004eca:	4b43      	ldr	r3, [pc, #268]	; (8004fd8 <transmitMessage+0x33c>)
 8004ecc:	88db      	ldrh	r3, [r3, #6]
 8004ece:	429a      	cmp	r2, r3
 8004ed0:	d3b1      	bcc.n	8004e36 <transmitMessage+0x19a>
        }
    }
    message[index] = msg.checksum[3];
 8004ed2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004ed6:	4a40      	ldr	r2, [pc, #256]	; (8004fd8 <transmitMessage+0x33c>)
 8004ed8:	7fd2      	ldrb	r2, [r2, #31]
 8004eda:	3330      	adds	r3, #48	; 0x30
 8004edc:	443b      	add	r3, r7
 8004ede:	f803 2c28 	strb.w	r2, [r3, #-40]
    index++;
 8004ee2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004ee6:	3301      	adds	r3, #1
 8004ee8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    message[index] = msg.checksum[2];
 8004eec:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004ef0:	4a39      	ldr	r2, [pc, #228]	; (8004fd8 <transmitMessage+0x33c>)
 8004ef2:	7f92      	ldrb	r2, [r2, #30]
 8004ef4:	3330      	adds	r3, #48	; 0x30
 8004ef6:	443b      	add	r3, r7
 8004ef8:	f803 2c28 	strb.w	r2, [r3, #-40]
    index++;
 8004efc:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004f00:	3301      	adds	r3, #1
 8004f02:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    message[index] = msg.checksum[1];
 8004f06:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004f0a:	4a33      	ldr	r2, [pc, #204]	; (8004fd8 <transmitMessage+0x33c>)
 8004f0c:	7f52      	ldrb	r2, [r2, #29]
 8004f0e:	3330      	adds	r3, #48	; 0x30
 8004f10:	443b      	add	r3, r7
 8004f12:	f803 2c28 	strb.w	r2, [r3, #-40]
    index++;
 8004f16:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004f1a:	3301      	adds	r3, #1
 8004f1c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    if (msg.checksum[0] == ESC){
 8004f20:	4b2d      	ldr	r3, [pc, #180]	; (8004fd8 <transmitMessage+0x33c>)
 8004f22:	7f1b      	ldrb	r3, [r3, #28]
 8004f24:	2b1b      	cmp	r3, #27
 8004f26:	d12a      	bne.n	8004f7e <transmitMessage+0x2e2>
        message[index] = ESC;
 8004f28:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004f2c:	3330      	adds	r3, #48	; 0x30
 8004f2e:	443b      	add	r3, r7
 8004f30:	221b      	movs	r2, #27
 8004f32:	f803 2c28 	strb.w	r2, [r3, #-40]
        index++;
 8004f36:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004f3a:	3301      	adds	r3, #1
 8004f3c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        message[index] = msg.checksum[0];
 8004f40:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004f44:	4a24      	ldr	r2, [pc, #144]	; (8004fd8 <transmitMessage+0x33c>)
 8004f46:	7f12      	ldrb	r2, [r2, #28]
 8004f48:	3330      	adds	r3, #48	; 0x30
 8004f4a:	443b      	add	r3, r7
 8004f4c:	f803 2c28 	strb.w	r2, [r3, #-40]
        index++;
 8004f50:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004f54:	3301      	adds	r3, #1
 8004f56:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        message[index] = ETX;
 8004f5a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004f5e:	3330      	adds	r3, #48	; 0x30
 8004f60:	443b      	add	r3, r7
 8004f62:	2203      	movs	r2, #3
 8004f64:	f803 2c28 	strb.w	r2, [r3, #-40]
        index++;
 8004f68:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004f6c:	3301      	adds	r3, #1
 8004f6e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        msg.len = index;
 8004f72:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004f76:	b29a      	uxth	r2, r3
 8004f78:	4b17      	ldr	r3, [pc, #92]	; (8004fd8 <transmitMessage+0x33c>)
 8004f7a:	80da      	strh	r2, [r3, #6]
 8004f7c:	e01d      	b.n	8004fba <transmitMessage+0x31e>
    }
    else{
        message[index] = msg.checksum[0];
 8004f7e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004f82:	4a15      	ldr	r2, [pc, #84]	; (8004fd8 <transmitMessage+0x33c>)
 8004f84:	7f12      	ldrb	r2, [r2, #28]
 8004f86:	3330      	adds	r3, #48	; 0x30
 8004f88:	443b      	add	r3, r7
 8004f8a:	f803 2c28 	strb.w	r2, [r3, #-40]
        index++;
 8004f8e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004f92:	3301      	adds	r3, #1
 8004f94:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        message[index] = ETX;
 8004f98:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004f9c:	3330      	adds	r3, #48	; 0x30
 8004f9e:	443b      	add	r3, r7
 8004fa0:	2203      	movs	r2, #3
 8004fa2:	f803 2c28 	strb.w	r2, [r3, #-40]
        index++;
 8004fa6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004faa:	3301      	adds	r3, #1
 8004fac:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        msg.len = index;
 8004fb0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004fb4:	b29a      	uxth	r2, r3
 8004fb6:	4b08      	ldr	r3, [pc, #32]	; (8004fd8 <transmitMessage+0x33c>)
 8004fb8:	80da      	strh	r2, [r3, #6]
    }

    uart_write(message, msg.len, device, 10);
 8004fba:	4b07      	ldr	r3, [pc, #28]	; (8004fd8 <transmitMessage+0x33c>)
 8004fbc:	88db      	ldrh	r3, [r3, #6]
 8004fbe:	b2d9      	uxtb	r1, r3
 8004fc0:	787a      	ldrb	r2, [r7, #1]
 8004fc2:	f107 0008 	add.w	r0, r7, #8
 8004fc6:	230a      	movs	r3, #10
 8004fc8:	f000 ff38 	bl	8005e3c <uart_write>
    return 1;
 8004fcc:	2301      	movs	r3, #1
}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	3730      	adds	r7, #48	; 0x30
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bd80      	pop	{r7, pc}
 8004fd6:	bf00      	nop
 8004fd8:	20000404 	.word	0x20000404
 8004fdc:	2000040c 	.word	0x2000040c
 8004fe0:	20000400 	.word	0x20000400

08004fe4 <calcChecksum>:

static void calcChecksum(void){
 8004fe4:	b480      	push	{r7}
 8004fe6:	b083      	sub	sp, #12
 8004fe8:	af00      	add	r7, sp, #0
    msg.checksum[0] = msg.protocol_rev[0];
 8004fea:	4b24      	ldr	r3, [pc, #144]	; (800507c <calcChecksum+0x98>)
 8004fec:	781a      	ldrb	r2, [r3, #0]
 8004fee:	4b23      	ldr	r3, [pc, #140]	; (800507c <calcChecksum+0x98>)
 8004ff0:	771a      	strb	r2, [r3, #28]
    msg.checksum[0] ^= msg.protocol_rev[1];
 8004ff2:	4b22      	ldr	r3, [pc, #136]	; (800507c <calcChecksum+0x98>)
 8004ff4:	7f1a      	ldrb	r2, [r3, #28]
 8004ff6:	4b21      	ldr	r3, [pc, #132]	; (800507c <calcChecksum+0x98>)
 8004ff8:	785b      	ldrb	r3, [r3, #1]
 8004ffa:	4053      	eors	r3, r2
 8004ffc:	b2da      	uxtb	r2, r3
 8004ffe:	4b1f      	ldr	r3, [pc, #124]	; (800507c <calcChecksum+0x98>)
 8005000:	771a      	strb	r2, [r3, #28]

    msg.checksum[0] ^= msg.token;
 8005002:	4b1e      	ldr	r3, [pc, #120]	; (800507c <calcChecksum+0x98>)
 8005004:	7f1a      	ldrb	r2, [r3, #28]
 8005006:	4b1d      	ldr	r3, [pc, #116]	; (800507c <calcChecksum+0x98>)
 8005008:	789b      	ldrb	r3, [r3, #2]
 800500a:	4053      	eors	r3, r2
 800500c:	b2da      	uxtb	r2, r3
 800500e:	4b1b      	ldr	r3, [pc, #108]	; (800507c <calcChecksum+0x98>)
 8005010:	771a      	strb	r2, [r3, #28]

    msg.checksum[0] ^= msg.senderID[0];
 8005012:	4b1a      	ldr	r3, [pc, #104]	; (800507c <calcChecksum+0x98>)
 8005014:	7f1a      	ldrb	r2, [r3, #28]
 8005016:	4b19      	ldr	r3, [pc, #100]	; (800507c <calcChecksum+0x98>)
 8005018:	78db      	ldrb	r3, [r3, #3]
 800501a:	4053      	eors	r3, r2
 800501c:	b2da      	uxtb	r2, r3
 800501e:	4b17      	ldr	r3, [pc, #92]	; (800507c <calcChecksum+0x98>)
 8005020:	771a      	strb	r2, [r3, #28]
    msg.checksum[0] ^= msg.senderID[1];
 8005022:	4b16      	ldr	r3, [pc, #88]	; (800507c <calcChecksum+0x98>)
 8005024:	7f1a      	ldrb	r2, [r3, #28]
 8005026:	4b15      	ldr	r3, [pc, #84]	; (800507c <calcChecksum+0x98>)
 8005028:	791b      	ldrb	r3, [r3, #4]
 800502a:	4053      	eors	r3, r2
 800502c:	b2da      	uxtb	r2, r3
 800502e:	4b13      	ldr	r3, [pc, #76]	; (800507c <calcChecksum+0x98>)
 8005030:	771a      	strb	r2, [r3, #28]

    msg.checksum[0] ^= msg.cmd;
 8005032:	4b12      	ldr	r3, [pc, #72]	; (800507c <calcChecksum+0x98>)
 8005034:	7f1a      	ldrb	r2, [r3, #28]
 8005036:	4b11      	ldr	r3, [pc, #68]	; (800507c <calcChecksum+0x98>)
 8005038:	795b      	ldrb	r3, [r3, #5]
 800503a:	4053      	eors	r3, r2
 800503c:	b2da      	uxtb	r2, r3
 800503e:	4b0f      	ldr	r3, [pc, #60]	; (800507c <calcChecksum+0x98>)
 8005040:	771a      	strb	r2, [r3, #28]
    uint8_t i;

    for (i=0; i < msg.len; i++)
 8005042:	2300      	movs	r3, #0
 8005044:	71fb      	strb	r3, [r7, #7]
 8005046:	e00c      	b.n	8005062 <calcChecksum+0x7e>
    {
       msg.checksum[0] ^= msg.data[i];
 8005048:	4b0c      	ldr	r3, [pc, #48]	; (800507c <calcChecksum+0x98>)
 800504a:	7f1a      	ldrb	r2, [r3, #28]
 800504c:	79fb      	ldrb	r3, [r7, #7]
 800504e:	490b      	ldr	r1, [pc, #44]	; (800507c <calcChecksum+0x98>)
 8005050:	440b      	add	r3, r1
 8005052:	7a1b      	ldrb	r3, [r3, #8]
 8005054:	4053      	eors	r3, r2
 8005056:	b2da      	uxtb	r2, r3
 8005058:	4b08      	ldr	r3, [pc, #32]	; (800507c <calcChecksum+0x98>)
 800505a:	771a      	strb	r2, [r3, #28]
    for (i=0; i < msg.len; i++)
 800505c:	79fb      	ldrb	r3, [r7, #7]
 800505e:	3301      	adds	r3, #1
 8005060:	71fb      	strb	r3, [r7, #7]
 8005062:	79fb      	ldrb	r3, [r7, #7]
 8005064:	b29a      	uxth	r2, r3
 8005066:	4b05      	ldr	r3, [pc, #20]	; (800507c <calcChecksum+0x98>)
 8005068:	88db      	ldrh	r3, [r3, #6]
 800506a:	429a      	cmp	r2, r3
 800506c:	d3ec      	bcc.n	8005048 <calcChecksum+0x64>
    }
}
 800506e:	bf00      	nop
 8005070:	bf00      	nop
 8005072:	370c      	adds	r7, #12
 8005074:	46bd      	mov	sp, r7
 8005076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507a:	4770      	bx	lr
 800507c:	20000404 	.word	0x20000404

08005080 <parseMessage>:


uint8_t parseMessage(uint8_t *data, UART_select device){
 8005080:	b580      	push	{r7, lr}
 8005082:	b084      	sub	sp, #16
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
 8005088:	460b      	mov	r3, r1
 800508a:	70fb      	strb	r3, [r7, #3]
    uint8_t chsum = 0;
 800508c:	2300      	movs	r3, #0
 800508e:	73bb      	strb	r3, [r7, #14]
    uint8_t len = data[0];
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	781b      	ldrb	r3, [r3, #0]
 8005094:	737b      	strb	r3, [r7, #13]
    if (len < 11){
 8005096:	7b7b      	ldrb	r3, [r7, #13]
 8005098:	2b0a      	cmp	r3, #10
 800509a:	d805      	bhi.n	80050a8 <parseMessage+0x28>
        sendNack(device);
 800509c:	78fb      	ldrb	r3, [r7, #3]
 800509e:	4618      	mov	r0, r3
 80050a0:	f7ff fd5e 	bl	8004b60 <sendNack>
        return 1;
 80050a4:	2301      	movs	r3, #1
 80050a6:	e06d      	b.n	8005184 <parseMessage+0x104>
    }
    msg.len = len-10;
 80050a8:	7b7b      	ldrb	r3, [r7, #13]
 80050aa:	b29b      	uxth	r3, r3
 80050ac:	3b0a      	subs	r3, #10
 80050ae:	b29a      	uxth	r2, r3
 80050b0:	4b36      	ldr	r3, [pc, #216]	; (800518c <parseMessage+0x10c>)
 80050b2:	80da      	strh	r2, [r3, #6]
    if (!msg.data)return 2;
    msg.protocol_rev[0] = data[1];
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	785a      	ldrb	r2, [r3, #1]
 80050b8:	4b34      	ldr	r3, [pc, #208]	; (800518c <parseMessage+0x10c>)
 80050ba:	701a      	strb	r2, [r3, #0]
    msg.protocol_rev[1] = data[2];
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	789a      	ldrb	r2, [r3, #2]
 80050c0:	4b32      	ldr	r3, [pc, #200]	; (800518c <parseMessage+0x10c>)
 80050c2:	705a      	strb	r2, [r3, #1]
    msg.token = data[3];
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	78da      	ldrb	r2, [r3, #3]
 80050c8:	4b30      	ldr	r3, [pc, #192]	; (800518c <parseMessage+0x10c>)
 80050ca:	709a      	strb	r2, [r3, #2]
    TOKEN = msg.token;
 80050cc:	4b2f      	ldr	r3, [pc, #188]	; (800518c <parseMessage+0x10c>)
 80050ce:	789a      	ldrb	r2, [r3, #2]
 80050d0:	4b2f      	ldr	r3, [pc, #188]	; (8005190 <parseMessage+0x110>)
 80050d2:	701a      	strb	r2, [r3, #0]
    msg.senderID[0] = data[4];
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	791a      	ldrb	r2, [r3, #4]
 80050d8:	4b2c      	ldr	r3, [pc, #176]	; (800518c <parseMessage+0x10c>)
 80050da:	70da      	strb	r2, [r3, #3]
    msg.senderID[1] = data[5];
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	795a      	ldrb	r2, [r3, #5]
 80050e0:	4b2a      	ldr	r3, [pc, #168]	; (800518c <parseMessage+0x10c>)
 80050e2:	711a      	strb	r2, [r3, #4]
    msg.cmd = data[6];
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	799a      	ldrb	r2, [r3, #6]
 80050e8:	4b28      	ldr	r3, [pc, #160]	; (800518c <parseMessage+0x10c>)
 80050ea:	715a      	strb	r2, [r3, #5]
    uint8_t i;
    for (i=0; i<msg.len; i++){
 80050ec:	2300      	movs	r3, #0
 80050ee:	73fb      	strb	r3, [r7, #15]
 80050f0:	e00d      	b.n	800510e <parseMessage+0x8e>
//        if (data[6+i] == ESC) i++;
        msg.data[i] = data[7+i];
 80050f2:	7bfb      	ldrb	r3, [r7, #15]
 80050f4:	3307      	adds	r3, #7
 80050f6:	461a      	mov	r2, r3
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	441a      	add	r2, r3
 80050fc:	7bfb      	ldrb	r3, [r7, #15]
 80050fe:	7811      	ldrb	r1, [r2, #0]
 8005100:	4a22      	ldr	r2, [pc, #136]	; (800518c <parseMessage+0x10c>)
 8005102:	4413      	add	r3, r2
 8005104:	460a      	mov	r2, r1
 8005106:	721a      	strb	r2, [r3, #8]
    for (i=0; i<msg.len; i++){
 8005108:	7bfb      	ldrb	r3, [r7, #15]
 800510a:	3301      	adds	r3, #1
 800510c:	73fb      	strb	r3, [r7, #15]
 800510e:	7bfb      	ldrb	r3, [r7, #15]
 8005110:	b29a      	uxth	r2, r3
 8005112:	4b1e      	ldr	r3, [pc, #120]	; (800518c <parseMessage+0x10c>)
 8005114:	88db      	ldrh	r3, [r3, #6]
 8005116:	429a      	cmp	r2, r3
 8005118:	d3eb      	bcc.n	80050f2 <parseMessage+0x72>
    }
    msg.checksum[3] = data[7+i];
 800511a:	7bfb      	ldrb	r3, [r7, #15]
 800511c:	3307      	adds	r3, #7
 800511e:	461a      	mov	r2, r3
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	4413      	add	r3, r2
 8005124:	781a      	ldrb	r2, [r3, #0]
 8005126:	4b19      	ldr	r3, [pc, #100]	; (800518c <parseMessage+0x10c>)
 8005128:	77da      	strb	r2, [r3, #31]
    msg.checksum[2] = data[8+i];
 800512a:	7bfb      	ldrb	r3, [r7, #15]
 800512c:	3308      	adds	r3, #8
 800512e:	461a      	mov	r2, r3
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	4413      	add	r3, r2
 8005134:	781a      	ldrb	r2, [r3, #0]
 8005136:	4b15      	ldr	r3, [pc, #84]	; (800518c <parseMessage+0x10c>)
 8005138:	779a      	strb	r2, [r3, #30]
    msg.checksum[1] = data[9+i];
 800513a:	7bfb      	ldrb	r3, [r7, #15]
 800513c:	3309      	adds	r3, #9
 800513e:	461a      	mov	r2, r3
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	4413      	add	r3, r2
 8005144:	781a      	ldrb	r2, [r3, #0]
 8005146:	4b11      	ldr	r3, [pc, #68]	; (800518c <parseMessage+0x10c>)
 8005148:	775a      	strb	r2, [r3, #29]
    msg.checksum[0] = data[10+i];
 800514a:	7bfb      	ldrb	r3, [r7, #15]
 800514c:	330a      	adds	r3, #10
 800514e:	461a      	mov	r2, r3
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	4413      	add	r3, r2
 8005154:	781a      	ldrb	r2, [r3, #0]
 8005156:	4b0d      	ldr	r3, [pc, #52]	; (800518c <parseMessage+0x10c>)
 8005158:	771a      	strb	r2, [r3, #28]
    chsum = msg.checksum[0];
 800515a:	4b0c      	ldr	r3, [pc, #48]	; (800518c <parseMessage+0x10c>)
 800515c:	7f1b      	ldrb	r3, [r3, #28]
 800515e:	73bb      	strb	r3, [r7, #14]
    calcChecksum();
 8005160:	f7ff ff40 	bl	8004fe4 <calcChecksum>
    if (chsum != msg.checksum[0]){
 8005164:	4b09      	ldr	r3, [pc, #36]	; (800518c <parseMessage+0x10c>)
 8005166:	7f1b      	ldrb	r3, [r3, #28]
 8005168:	7bba      	ldrb	r2, [r7, #14]
 800516a:	429a      	cmp	r2, r3
 800516c:	d005      	beq.n	800517a <parseMessage+0xfa>
        sendNack(device);
 800516e:	78fb      	ldrb	r3, [r7, #3]
 8005170:	4618      	mov	r0, r3
 8005172:	f7ff fcf5 	bl	8004b60 <sendNack>
        return 1;
 8005176:	2301      	movs	r3, #1
 8005178:	e004      	b.n	8005184 <parseMessage+0x104>
    }
    sendAck(device);
 800517a:	78fb      	ldrb	r3, [r7, #3]
 800517c:	4618      	mov	r0, r3
 800517e:	f7ff fd23 	bl	8004bc8 <sendAck>
//    HAL_Delay(22);
    return 0;                  //Note that after the parsing the escape chars remains in payload.
 8005182:	2300      	movs	r3, #0
}
 8005184:	4618      	mov	r0, r3
 8005186:	3710      	adds	r7, #16
 8005188:	46bd      	mov	sp, r7
 800518a:	bd80      	pop	{r7, pc}
 800518c:	20000404 	.word	0x20000404
 8005190:	20000400 	.word	0x20000400

08005194 <handler>:



void handler(UART_select device){
 8005194:	b580      	push	{r7, lr}
 8005196:	b082      	sub	sp, #8
 8005198:	af00      	add	r7, sp, #0
 800519a:	4603      	mov	r3, r0
 800519c:	71fb      	strb	r3, [r7, #7]
    switch (msg.cmd){
 800519e:	4b3c      	ldr	r3, [pc, #240]	; (8005290 <handler+0xfc>)
 80051a0:	795b      	ldrb	r3, [r3, #5]
 80051a2:	2bc0      	cmp	r3, #192	; 0xc0
 80051a4:	d068      	beq.n	8005278 <handler+0xe4>
 80051a6:	2bc0      	cmp	r3, #192	; 0xc0
 80051a8:	dc6c      	bgt.n	8005284 <handler+0xf0>
 80051aa:	2ba0      	cmp	r3, #160	; 0xa0
 80051ac:	d05f      	beq.n	800526e <handler+0xda>
 80051ae:	2ba0      	cmp	r3, #160	; 0xa0
 80051b0:	dc68      	bgt.n	8005284 <handler+0xf0>
 80051b2:	2b80      	cmp	r3, #128	; 0x80
 80051b4:	d053      	beq.n	800525e <handler+0xca>
 80051b6:	2b80      	cmp	r3, #128	; 0x80
 80051b8:	dc64      	bgt.n	8005284 <handler+0xf0>
 80051ba:	2b65      	cmp	r3, #101	; 0x65
 80051bc:	dc34      	bgt.n	8005228 <handler+0x94>
 80051be:	2b50      	cmp	r3, #80	; 0x50
 80051c0:	db60      	blt.n	8005284 <handler+0xf0>
 80051c2:	3b50      	subs	r3, #80	; 0x50
 80051c4:	2b15      	cmp	r3, #21
 80051c6:	d85d      	bhi.n	8005284 <handler+0xf0>
 80051c8:	a201      	add	r2, pc, #4	; (adr r2, 80051d0 <handler+0x3c>)
 80051ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051ce:	bf00      	nop
 80051d0:	0800522f 	.word	0x0800522f
 80051d4:	08005285 	.word	0x08005285
 80051d8:	08005285 	.word	0x08005285
 80051dc:	08005285 	.word	0x08005285
 80051e0:	08005285 	.word	0x08005285
 80051e4:	08005285 	.word	0x08005285
 80051e8:	08005237 	.word	0x08005237
 80051ec:	08005285 	.word	0x08005285
 80051f0:	08005285 	.word	0x08005285
 80051f4:	08005285 	.word	0x08005285
 80051f8:	08005285 	.word	0x08005285
 80051fc:	08005285 	.word	0x08005285
 8005200:	08005285 	.word	0x08005285
 8005204:	08005285 	.word	0x08005285
 8005208:	08005285 	.word	0x08005285
 800520c:	08005285 	.word	0x08005285
 8005210:	08005285 	.word	0x08005285
 8005214:	08005285 	.word	0x08005285
 8005218:	08005285 	.word	0x08005285
 800521c:	08005285 	.word	0x08005285
 8005220:	08005285 	.word	0x08005285
 8005224:	08005247 	.word	0x08005247
 8005228:	2b78      	cmp	r3, #120	; 0x78
 800522a:	d014      	beq.n	8005256 <handler+0xc2>
        break;
    case 0xC0:
    	osThreadResume(gyroCalibrationTaskHandle);
    	break;
    default:
        break;
 800522c:	e02a      	b.n	8005284 <handler+0xf0>
        flag_connected_toIris = 1;
 800522e:	4b19      	ldr	r3, [pc, #100]	; (8005294 <handler+0x100>)
 8005230:	2201      	movs	r2, #1
 8005232:	701a      	strb	r2, [r3, #0]
        break;
 8005234:	e027      	b.n	8005286 <handler+0xf2>
        ublox_transmit_message(msg.cmd, device);
 8005236:	4b16      	ldr	r3, [pc, #88]	; (8005290 <handler+0xfc>)
 8005238:	795b      	ldrb	r3, [r3, #5]
 800523a:	79fa      	ldrb	r2, [r7, #7]
 800523c:	4611      	mov	r1, r2
 800523e:	4618      	mov	r0, r3
 8005240:	f7fe fac0 	bl	80037c4 <ublox_transmit_message>
        break;
 8005244:	e01f      	b.n	8005286 <handler+0xf2>
        reportFW(msg.cmd, device);
 8005246:	4b12      	ldr	r3, [pc, #72]	; (8005290 <handler+0xfc>)
 8005248:	795b      	ldrb	r3, [r3, #5]
 800524a:	79fa      	ldrb	r2, [r7, #7]
 800524c:	4611      	mov	r1, r2
 800524e:	4618      	mov	r0, r3
 8005250:	f000 f850 	bl	80052f4 <reportFW>
        break;
 8005254:	e017      	b.n	8005286 <handler+0xf2>
    	powerManageCfgSet(0x78);
 8005256:	2078      	movs	r0, #120	; 0x78
 8005258:	f7fe fcee 	bl	8003c38 <powerManageCfgSet>
        break;
 800525c:	e013      	b.n	8005286 <handler+0xf2>
        ublox_transmit_rtc(msg.cmd, device);
 800525e:	4b0c      	ldr	r3, [pc, #48]	; (8005290 <handler+0xfc>)
 8005260:	795b      	ldrb	r3, [r3, #5]
 8005262:	79fa      	ldrb	r2, [r7, #7]
 8005264:	4611      	mov	r1, r2
 8005266:	4618      	mov	r0, r3
 8005268:	f7fe fa98 	bl	800379c <ublox_transmit_rtc>
        break;
 800526c:	e00b      	b.n	8005286 <handler+0xf2>
        HAL_Delay(500);
 800526e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005272:	f000 ff97 	bl	80061a4 <HAL_Delay>
        break;
 8005276:	e006      	b.n	8005286 <handler+0xf2>
    	osThreadResume(gyroCalibrationTaskHandle);
 8005278:	4b07      	ldr	r3, [pc, #28]	; (8005298 <handler+0x104>)
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4618      	mov	r0, r3
 800527e:	f006 fd2c 	bl	800bcda <osThreadResume>
    	break;
 8005282:	e000      	b.n	8005286 <handler+0xf2>
        break;
 8005284:	bf00      	nop
    }
}
 8005286:	bf00      	nop
 8005288:	3708      	adds	r7, #8
 800528a:	46bd      	mov	sp, r7
 800528c:	bd80      	pop	{r7, pc}
 800528e:	bf00      	nop
 8005290:	20000404 	.word	0x20000404
 8005294:	20000401 	.word	0x20000401
 8005298:	200003e4 	.word	0x200003e4

0800529c <init_message_t>:

void init_message_t(void){
 800529c:	b580      	push	{r7, lr}
 800529e:	af00      	add	r7, sp, #0
    msg.protocol_rev[0] = 0;
 80052a0:	4b12      	ldr	r3, [pc, #72]	; (80052ec <init_message_t+0x50>)
 80052a2:	2200      	movs	r2, #0
 80052a4:	701a      	strb	r2, [r3, #0]
    msg.protocol_rev[1] = 0;
 80052a6:	4b11      	ldr	r3, [pc, #68]	; (80052ec <init_message_t+0x50>)
 80052a8:	2200      	movs	r2, #0
 80052aa:	705a      	strb	r2, [r3, #1]
    msg.token = 0;
 80052ac:	4b0f      	ldr	r3, [pc, #60]	; (80052ec <init_message_t+0x50>)
 80052ae:	2200      	movs	r2, #0
 80052b0:	709a      	strb	r2, [r3, #2]
    msg.senderID[0] = 0;
 80052b2:	4b0e      	ldr	r3, [pc, #56]	; (80052ec <init_message_t+0x50>)
 80052b4:	2200      	movs	r2, #0
 80052b6:	70da      	strb	r2, [r3, #3]
    msg.senderID[1] = 0;
 80052b8:	4b0c      	ldr	r3, [pc, #48]	; (80052ec <init_message_t+0x50>)
 80052ba:	2200      	movs	r2, #0
 80052bc:	711a      	strb	r2, [r3, #4]
    msg.cmd = 0;
 80052be:	4b0b      	ldr	r3, [pc, #44]	; (80052ec <init_message_t+0x50>)
 80052c0:	2200      	movs	r2, #0
 80052c2:	715a      	strb	r2, [r3, #5]
    memset(msg.data, 0, 20);
 80052c4:	2214      	movs	r2, #20
 80052c6:	2100      	movs	r1, #0
 80052c8:	4809      	ldr	r0, [pc, #36]	; (80052f0 <init_message_t+0x54>)
 80052ca:	f00a fc6f 	bl	800fbac <memset>
    msg.checksum[0] = 0;
 80052ce:	4b07      	ldr	r3, [pc, #28]	; (80052ec <init_message_t+0x50>)
 80052d0:	2200      	movs	r2, #0
 80052d2:	771a      	strb	r2, [r3, #28]
    msg.checksum[1] = 0;
 80052d4:	4b05      	ldr	r3, [pc, #20]	; (80052ec <init_message_t+0x50>)
 80052d6:	2200      	movs	r2, #0
 80052d8:	775a      	strb	r2, [r3, #29]
    msg.checksum[2] = 0;
 80052da:	4b04      	ldr	r3, [pc, #16]	; (80052ec <init_message_t+0x50>)
 80052dc:	2200      	movs	r2, #0
 80052de:	779a      	strb	r2, [r3, #30]
    msg.checksum[3] = 0;
 80052e0:	4b02      	ldr	r3, [pc, #8]	; (80052ec <init_message_t+0x50>)
 80052e2:	2200      	movs	r2, #0
 80052e4:	77da      	strb	r2, [r3, #31]
}
 80052e6:	bf00      	nop
 80052e8:	bd80      	pop	{r7, pc}
 80052ea:	bf00      	nop
 80052ec:	20000404 	.word	0x20000404
 80052f0:	2000040c 	.word	0x2000040c

080052f4 <reportFW>:

void reportFW(uint8_t cmd, UART_select device){
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b084      	sub	sp, #16
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	4603      	mov	r3, r0
 80052fc:	460a      	mov	r2, r1
 80052fe:	71fb      	strb	r3, [r7, #7]
 8005300:	4613      	mov	r3, r2
 8005302:	71bb      	strb	r3, [r7, #6]
    uint8_t fwv[1] = {FW_VERSION};
 8005304:	236e      	movs	r3, #110	; 0x6e
 8005306:	733b      	strb	r3, [r7, #12]
    transmitMessage(fwv, 1, cmd, device);
 8005308:	79bb      	ldrb	r3, [r7, #6]
 800530a:	79fa      	ldrb	r2, [r7, #7]
 800530c:	f107 000c 	add.w	r0, r7, #12
 8005310:	2101      	movs	r1, #1
 8005312:	f7ff fcc3 	bl	8004c9c <transmitMessage>
}
 8005316:	bf00      	nop
 8005318:	3710      	adds	r7, #16
 800531a:	46bd      	mov	sp, r7
 800531c:	bd80      	pop	{r7, pc}

0800531e <RB_init>:

#include "ring_buffer.h"
#include <string.h>
#include "assert.h"

uint8_t RB_init(RB_t* rb, uint8_t size) {
 800531e:	b580      	push	{r7, lr}
 8005320:	b082      	sub	sp, #8
 8005322:	af00      	add	r7, sp, #0
 8005324:	6078      	str	r0, [r7, #4]
 8005326:	460b      	mov	r3, r1
 8005328:	70fb      	strb	r3, [r7, #3]
  memset(rb->buffer, 0, sizeof(uint8_t)*size);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	78fa      	ldrb	r2, [r7, #3]
 800532e:	2100      	movs	r1, #0
 8005330:	4618      	mov	r0, r3
 8005332:	f00a fc3b 	bl	800fbac <memset>
//  rb->buffer = malloc(size * sizeof(char));
//
  if (!rb->buffer) {
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d101      	bne.n	8005340 <RB_init+0x22>
    return 0;
 800533c:	2300      	movs	r3, #0
 800533e:	e00a      	b.n	8005356 <RB_init+0x38>
  }
  rb->rdpos = 0;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2200      	movs	r2, #0
 8005344:	629a      	str	r2, [r3, #40]	; 0x28
  rb->wrpos = 0;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2200      	movs	r2, #0
 800534a:	62da      	str	r2, [r3, #44]	; 0x2c
  rb->size = size;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	78fa      	ldrb	r2, [r7, #3]
 8005350:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return 1;
 8005354:	2301      	movs	r3, #1
}
 8005356:	4618      	mov	r0, r3
 8005358:	3708      	adds	r7, #8
 800535a:	46bd      	mov	sp, r7
 800535c:	bd80      	pop	{r7, pc}

0800535e <RB_push>:
  rb->rdpos = 0;
  rb->wrpos = 0;
  memset(rb->buffer, 0, sizeof(rb->buffer));
}

void RB_push(RB_t* rb, uint8_t byte) {
 800535e:	b480      	push	{r7}
 8005360:	b083      	sub	sp, #12
 8005362:	af00      	add	r7, sp, #0
 8005364:	6078      	str	r0, [r7, #4]
 8005366:	460b      	mov	r3, r1
 8005368:	70fb      	strb	r3, [r7, #3]
  if ((rb->wrpos + 1) % rb->size == rb->rdpos) {
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800536e:	3301      	adds	r3, #1
 8005370:	687a      	ldr	r2, [r7, #4]
 8005372:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 8005376:	fb93 f1f2 	sdiv	r1, r3, r2
 800537a:	fb01 f202 	mul.w	r2, r1, r2
 800537e:	1a9a      	subs	r2, r3, r2
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005384:	429a      	cmp	r2, r3
 8005386:	d012      	beq.n	80053ae <RB_push+0x50>
    return;
  }

  rb->buffer[rb->wrpos] = byte;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800538c:	687a      	ldr	r2, [r7, #4]
 800538e:	78f9      	ldrb	r1, [r7, #3]
 8005390:	54d1      	strb	r1, [r2, r3]
  rb->wrpos = (rb->wrpos + 1) % rb->size;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005396:	3301      	adds	r3, #1
 8005398:	687a      	ldr	r2, [r7, #4]
 800539a:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 800539e:	fb93 f1f2 	sdiv	r1, r3, r2
 80053a2:	fb01 f202 	mul.w	r2, r1, r2
 80053a6:	1a9a      	subs	r2, r3, r2
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	62da      	str	r2, [r3, #44]	; 0x2c
 80053ac:	e000      	b.n	80053b0 <RB_push+0x52>
    return;
 80053ae:	bf00      	nop
}
 80053b0:	370c      	adds	r7, #12
 80053b2:	46bd      	mov	sp, r7
 80053b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b8:	4770      	bx	lr

080053ba <RB_pop>:

uint8_t RB_pop(RB_t* rb) {
 80053ba:	b480      	push	{r7}
 80053bc:	b085      	sub	sp, #20
 80053be:	af00      	add	r7, sp, #0
 80053c0:	6078      	str	r0, [r7, #4]
  if (rb->rdpos == rb->wrpos) return EOF;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053ca:	429a      	cmp	r2, r3
 80053cc:	d101      	bne.n	80053d2 <RB_pop+0x18>
 80053ce:	23ff      	movs	r3, #255	; 0xff
 80053d0:	e012      	b.n	80053f8 <RB_pop+0x3e>

  uint8_t byte = rb->buffer[rb->rdpos];
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053d6:	687a      	ldr	r2, [r7, #4]
 80053d8:	5cd3      	ldrb	r3, [r2, r3]
 80053da:	73fb      	strb	r3, [r7, #15]
  rb->rdpos = (rb->rdpos + 1) % rb->size;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053e0:	3301      	adds	r3, #1
 80053e2:	687a      	ldr	r2, [r7, #4]
 80053e4:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 80053e8:	fb93 f1f2 	sdiv	r1, r3, r2
 80053ec:	fb01 f202 	mul.w	r2, r1, r2
 80053f0:	1a9a      	subs	r2, r3, r2
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	629a      	str	r2, [r3, #40]	; 0x28

  return byte;
 80053f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80053f8:	4618      	mov	r0, r3
 80053fa:	3714      	adds	r7, #20
 80053fc:	46bd      	mov	sp, r7
 80053fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005402:	4770      	bx	lr

08005404 <RB_pushFront>:

void RB_pushFront(RB_t* rb, uint8_t byte) {
 8005404:	b480      	push	{r7}
 8005406:	b085      	sub	sp, #20
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
 800540c:	460b      	mov	r3, r1
 800540e:	70fb      	strb	r3, [r7, #3]
  uint8_t newrpos = (rb->rdpos - 1) < 0 ? (rb->size - 1) : rb->rdpos - 1;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005414:	2b00      	cmp	r3, #0
 8005416:	dc05      	bgt.n	8005424 <RB_pushFront+0x20>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800541e:	3b01      	subs	r3, #1
 8005420:	b2db      	uxtb	r3, r3
 8005422:	e004      	b.n	800542e <RB_pushFront+0x2a>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005428:	b2db      	uxtb	r3, r3
 800542a:	3b01      	subs	r3, #1
 800542c:	b2db      	uxtb	r3, r3
 800542e:	73fb      	strb	r3, [r7, #15]

  if (newrpos == rb->wrpos) {
 8005430:	7bfa      	ldrb	r2, [r7, #15]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005436:	429a      	cmp	r2, r3
 8005438:	d008      	beq.n	800544c <RB_pushFront+0x48>
    return;
  }

  rb->rdpos = newrpos;
 800543a:	7bfa      	ldrb	r2, [r7, #15]
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	629a      	str	r2, [r3, #40]	; 0x28
  rb->buffer[rb->rdpos] = byte;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005444:	687a      	ldr	r2, [r7, #4]
 8005446:	78f9      	ldrb	r1, [r7, #3]
 8005448:	54d1      	strb	r1, [r2, r3]
 800544a:	e000      	b.n	800544e <RB_pushFront+0x4a>
    return;
 800544c:	bf00      	nop
}
 800544e:	3714      	adds	r7, #20
 8005450:	46bd      	mov	sp, r7
 8005452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005456:	4770      	bx	lr

08005458 <RB_size>:
  return rb->buffer[rb->wrpos];
}

uint8_t RB_capacity(RB_t* rb) { return rb->size; }

uint8_t RB_size(RB_t* rb) {
 8005458:	b480      	push	{r7}
 800545a:	b083      	sub	sp, #12
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
  return (rb->wrpos + rb->size - rb->rdpos) % rb->size;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005464:	687a      	ldr	r2, [r7, #4]
 8005466:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 800546a:	441a      	add	r2, r3
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005470:	1ad3      	subs	r3, r2, r3
 8005472:	687a      	ldr	r2, [r7, #4]
 8005474:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 8005478:	fb93 f1f2 	sdiv	r1, r3, r2
 800547c:	fb01 f202 	mul.w	r2, r1, r2
 8005480:	1a9b      	subs	r3, r3, r2
 8005482:	b2db      	uxtb	r3, r3
}
 8005484:	4618      	mov	r0, r3
 8005486:	370c      	adds	r7, #12
 8005488:	46bd      	mov	sp, r7
 800548a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548e:	4770      	bx	lr

08005490 <RB_clear>:

uint8_t RB_isFull(RB_t* rb) {
  return ((rb->wrpos + 1) % rb->size == rb->rdpos);
}

void RB_clear(RB_t* rb) {
 8005490:	b580      	push	{r7, lr}
 8005492:	b082      	sub	sp, #8
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
  memset(rb->buffer, 0, sizeof(rb->buffer));
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2228      	movs	r2, #40	; 0x28
 800549c:	2100      	movs	r1, #0
 800549e:	4618      	mov	r0, r3
 80054a0:	f00a fb84 	bl	800fbac <memset>
  rb->rdpos = 0;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2200      	movs	r2, #0
 80054a8:	629a      	str	r2, [r3, #40]	; 0x28
  rb->wrpos = 0;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2200      	movs	r2, #0
 80054ae:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80054b0:	bf00      	nop
 80054b2:	3708      	adds	r7, #8
 80054b4:	46bd      	mov	sp, r7
 80054b6:	bd80      	pop	{r7, pc}

080054b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b082      	sub	sp, #8
 80054bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80054be:	4b11      	ldr	r3, [pc, #68]	; (8005504 <HAL_MspInit+0x4c>)
 80054c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054c2:	4a10      	ldr	r2, [pc, #64]	; (8005504 <HAL_MspInit+0x4c>)
 80054c4:	f043 0301 	orr.w	r3, r3, #1
 80054c8:	6613      	str	r3, [r2, #96]	; 0x60
 80054ca:	4b0e      	ldr	r3, [pc, #56]	; (8005504 <HAL_MspInit+0x4c>)
 80054cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054ce:	f003 0301 	and.w	r3, r3, #1
 80054d2:	607b      	str	r3, [r7, #4]
 80054d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80054d6:	4b0b      	ldr	r3, [pc, #44]	; (8005504 <HAL_MspInit+0x4c>)
 80054d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054da:	4a0a      	ldr	r2, [pc, #40]	; (8005504 <HAL_MspInit+0x4c>)
 80054dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054e0:	6593      	str	r3, [r2, #88]	; 0x58
 80054e2:	4b08      	ldr	r3, [pc, #32]	; (8005504 <HAL_MspInit+0x4c>)
 80054e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054ea:	603b      	str	r3, [r7, #0]
 80054ec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80054ee:	2200      	movs	r2, #0
 80054f0:	210f      	movs	r1, #15
 80054f2:	f06f 0001 	mvn.w	r0, #1
 80054f6:	f000 ff31 	bl	800635c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80054fa:	bf00      	nop
 80054fc:	3708      	adds	r7, #8
 80054fe:	46bd      	mov	sp, r7
 8005500:	bd80      	pop	{r7, pc}
 8005502:	bf00      	nop
 8005504:	40021000 	.word	0x40021000

08005508 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b0b0      	sub	sp, #192	; 0xc0
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005510:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8005514:	2200      	movs	r2, #0
 8005516:	601a      	str	r2, [r3, #0]
 8005518:	605a      	str	r2, [r3, #4]
 800551a:	609a      	str	r2, [r3, #8]
 800551c:	60da      	str	r2, [r3, #12]
 800551e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005520:	f107 0318 	add.w	r3, r7, #24
 8005524:	2294      	movs	r2, #148	; 0x94
 8005526:	2100      	movs	r1, #0
 8005528:	4618      	mov	r0, r3
 800552a:	f00a fb3f 	bl	800fbac <memset>
  if(hi2c->Instance==I2C2)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a4a      	ldr	r2, [pc, #296]	; (800565c <HAL_I2C_MspInit+0x154>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d144      	bne.n	80055c2 <HAL_I2C_MspInit+0xba>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8005538:	2380      	movs	r3, #128	; 0x80
 800553a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800553c:	2300      	movs	r3, #0
 800553e:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005540:	f107 0318 	add.w	r3, r7, #24
 8005544:	4618      	mov	r0, r3
 8005546:	f003 fa1d 	bl	8008984 <HAL_RCCEx_PeriphCLKConfig>
 800554a:	4603      	mov	r3, r0
 800554c:	2b00      	cmp	r3, #0
 800554e:	d001      	beq.n	8005554 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8005550:	f7ff fae0 	bl	8004b14 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005554:	4b42      	ldr	r3, [pc, #264]	; (8005660 <HAL_I2C_MspInit+0x158>)
 8005556:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005558:	4a41      	ldr	r2, [pc, #260]	; (8005660 <HAL_I2C_MspInit+0x158>)
 800555a:	f043 0302 	orr.w	r3, r3, #2
 800555e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005560:	4b3f      	ldr	r3, [pc, #252]	; (8005660 <HAL_I2C_MspInit+0x158>)
 8005562:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005564:	f003 0302 	and.w	r3, r3, #2
 8005568:	617b      	str	r3, [r7, #20]
 800556a:	697b      	ldr	r3, [r7, #20]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 800556c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005570:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005574:	2312      	movs	r3, #18
 8005576:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800557a:	2300      	movs	r3, #0
 800557c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005580:	2303      	movs	r3, #3
 8005582:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8005586:	2304      	movs	r3, #4
 8005588:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800558c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8005590:	4619      	mov	r1, r3
 8005592:	4834      	ldr	r0, [pc, #208]	; (8005664 <HAL_I2C_MspInit+0x15c>)
 8005594:	f000 ffc8 	bl	8006528 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8005598:	4b31      	ldr	r3, [pc, #196]	; (8005660 <HAL_I2C_MspInit+0x158>)
 800559a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800559c:	4a30      	ldr	r2, [pc, #192]	; (8005660 <HAL_I2C_MspInit+0x158>)
 800559e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80055a2:	6593      	str	r3, [r2, #88]	; 0x58
 80055a4:	4b2e      	ldr	r3, [pc, #184]	; (8005660 <HAL_I2C_MspInit+0x158>)
 80055a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055ac:	613b      	str	r3, [r7, #16]
 80055ae:	693b      	ldr	r3, [r7, #16]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 5, 0);
 80055b0:	2200      	movs	r2, #0
 80055b2:	2105      	movs	r1, #5
 80055b4:	2021      	movs	r0, #33	; 0x21
 80055b6:	f000 fed1 	bl	800635c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 80055ba:	2021      	movs	r0, #33	; 0x21
 80055bc:	f000 feea 	bl	8006394 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80055c0:	e048      	b.n	8005654 <HAL_I2C_MspInit+0x14c>
  else if(hi2c->Instance==I2C1)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4a28      	ldr	r2, [pc, #160]	; (8005668 <HAL_I2C_MspInit+0x160>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d143      	bne.n	8005654 <HAL_I2C_MspInit+0x14c>
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80055cc:	2340      	movs	r3, #64	; 0x40
 80055ce:	61bb      	str	r3, [r7, #24]
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80055d0:	2300      	movs	r3, #0
 80055d2:	66fb      	str	r3, [r7, #108]	; 0x6c
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80055d4:	f107 0318 	add.w	r3, r7, #24
 80055d8:	4618      	mov	r0, r3
 80055da:	f003 f9d3 	bl	8008984 <HAL_RCCEx_PeriphCLKConfig>
 80055de:	4603      	mov	r3, r0
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d001      	beq.n	80055e8 <HAL_I2C_MspInit+0xe0>
	  Error_Handler();
 80055e4:	f7ff fa96 	bl	8004b14 <Error_Handler>
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80055e8:	4b1d      	ldr	r3, [pc, #116]	; (8005660 <HAL_I2C_MspInit+0x158>)
 80055ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055ec:	4a1c      	ldr	r2, [pc, #112]	; (8005660 <HAL_I2C_MspInit+0x158>)
 80055ee:	f043 0302 	orr.w	r3, r3, #2
 80055f2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80055f4:	4b1a      	ldr	r3, [pc, #104]	; (8005660 <HAL_I2C_MspInit+0x158>)
 80055f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055f8:	f003 0302 	and.w	r3, r3, #2
 80055fc:	60fb      	str	r3, [r7, #12]
 80055fe:	68fb      	ldr	r3, [r7, #12]
	GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8005600:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005604:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005608:	2312      	movs	r3, #18
 800560a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800560e:	2301      	movs	r3, #1
 8005610:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005614:	2303      	movs	r3, #3
 8005616:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800561a:	2304      	movs	r3, #4
 800561c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005620:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8005624:	4619      	mov	r1, r3
 8005626:	480f      	ldr	r0, [pc, #60]	; (8005664 <HAL_I2C_MspInit+0x15c>)
 8005628:	f000 ff7e 	bl	8006528 <HAL_GPIO_Init>
	__HAL_RCC_I2C1_CLK_ENABLE();
 800562c:	4b0c      	ldr	r3, [pc, #48]	; (8005660 <HAL_I2C_MspInit+0x158>)
 800562e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005630:	4a0b      	ldr	r2, [pc, #44]	; (8005660 <HAL_I2C_MspInit+0x158>)
 8005632:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005636:	6593      	str	r3, [r2, #88]	; 0x58
 8005638:	4b09      	ldr	r3, [pc, #36]	; (8005660 <HAL_I2C_MspInit+0x158>)
 800563a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800563c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005640:	60bb      	str	r3, [r7, #8]
 8005642:	68bb      	ldr	r3, [r7, #8]
	HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8005644:	2200      	movs	r2, #0
 8005646:	2105      	movs	r1, #5
 8005648:	201f      	movs	r0, #31
 800564a:	f000 fe87 	bl	800635c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800564e:	201f      	movs	r0, #31
 8005650:	f000 fea0 	bl	8006394 <HAL_NVIC_EnableIRQ>
}
 8005654:	bf00      	nop
 8005656:	37c0      	adds	r7, #192	; 0xc0
 8005658:	46bd      	mov	sp, r7
 800565a:	bd80      	pop	{r7, pc}
 800565c:	40005800 	.word	0x40005800
 8005660:	40021000 	.word	0x40021000
 8005664:	48000400 	.word	0x48000400
 8005668:	40005400 	.word	0x40005400

0800566c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b0b4      	sub	sp, #208	; 0xd0
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005674:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8005678:	2200      	movs	r2, #0
 800567a:	601a      	str	r2, [r3, #0]
 800567c:	605a      	str	r2, [r3, #4]
 800567e:	609a      	str	r2, [r3, #8]
 8005680:	60da      	str	r2, [r3, #12]
 8005682:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005684:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005688:	2294      	movs	r2, #148	; 0x94
 800568a:	2100      	movs	r1, #0
 800568c:	4618      	mov	r0, r3
 800568e:	f00a fa8d 	bl	800fbac <memset>
  if(huart->Instance==UART4)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4a8b      	ldr	r2, [pc, #556]	; (80058c4 <HAL_UART_MspInit+0x258>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d144      	bne.n	8005726 <HAL_UART_MspInit+0xba>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800569c:	2308      	movs	r3, #8
 800569e:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80056a0:	2300      	movs	r3, #0
 80056a2:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80056a4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80056a8:	4618      	mov	r0, r3
 80056aa:	f003 f96b 	bl	8008984 <HAL_RCCEx_PeriphCLKConfig>
 80056ae:	4603      	mov	r3, r0
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d001      	beq.n	80056b8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80056b4:	f7ff fa2e 	bl	8004b14 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80056b8:	4b83      	ldr	r3, [pc, #524]	; (80058c8 <HAL_UART_MspInit+0x25c>)
 80056ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056bc:	4a82      	ldr	r2, [pc, #520]	; (80058c8 <HAL_UART_MspInit+0x25c>)
 80056be:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80056c2:	6593      	str	r3, [r2, #88]	; 0x58
 80056c4:	4b80      	ldr	r3, [pc, #512]	; (80058c8 <HAL_UART_MspInit+0x25c>)
 80056c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80056cc:	627b      	str	r3, [r7, #36]	; 0x24
 80056ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80056d0:	4b7d      	ldr	r3, [pc, #500]	; (80058c8 <HAL_UART_MspInit+0x25c>)
 80056d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056d4:	4a7c      	ldr	r2, [pc, #496]	; (80058c8 <HAL_UART_MspInit+0x25c>)
 80056d6:	f043 0301 	orr.w	r3, r3, #1
 80056da:	64d3      	str	r3, [r2, #76]	; 0x4c
 80056dc:	4b7a      	ldr	r3, [pc, #488]	; (80058c8 <HAL_UART_MspInit+0x25c>)
 80056de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056e0:	f003 0301 	and.w	r3, r3, #1
 80056e4:	623b      	str	r3, [r7, #32]
 80056e6:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 80056e8:	2303      	movs	r3, #3
 80056ea:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80056ee:	2302      	movs	r3, #2
 80056f0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056f4:	2300      	movs	r3, #0
 80056f6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80056fa:	2303      	movs	r3, #3
 80056fc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8005700:	2308      	movs	r3, #8
 8005702:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005706:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800570a:	4619      	mov	r1, r3
 800570c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005710:	f000 ff0a 	bl	8006528 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8005714:	2200      	movs	r2, #0
 8005716:	2105      	movs	r1, #5
 8005718:	2034      	movs	r0, #52	; 0x34
 800571a:	f000 fe1f 	bl	800635c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800571e:	2034      	movs	r0, #52	; 0x34
 8005720:	f000 fe38 	bl	8006394 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8005724:	e0ca      	b.n	80058bc <HAL_UART_MspInit+0x250>
  else if(huart->Instance==USART1)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4a68      	ldr	r2, [pc, #416]	; (80058cc <HAL_UART_MspInit+0x260>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d143      	bne.n	80057b8 <HAL_UART_MspInit+0x14c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8005730:	2301      	movs	r3, #1
 8005732:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8005734:	2300      	movs	r3, #0
 8005736:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005738:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800573c:	4618      	mov	r0, r3
 800573e:	f003 f921 	bl	8008984 <HAL_RCCEx_PeriphCLKConfig>
 8005742:	4603      	mov	r3, r0
 8005744:	2b00      	cmp	r3, #0
 8005746:	d001      	beq.n	800574c <HAL_UART_MspInit+0xe0>
      Error_Handler();
 8005748:	f7ff f9e4 	bl	8004b14 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 800574c:	4b5e      	ldr	r3, [pc, #376]	; (80058c8 <HAL_UART_MspInit+0x25c>)
 800574e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005750:	4a5d      	ldr	r2, [pc, #372]	; (80058c8 <HAL_UART_MspInit+0x25c>)
 8005752:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005756:	6613      	str	r3, [r2, #96]	; 0x60
 8005758:	4b5b      	ldr	r3, [pc, #364]	; (80058c8 <HAL_UART_MspInit+0x25c>)
 800575a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800575c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005760:	61fb      	str	r3, [r7, #28]
 8005762:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005764:	4b58      	ldr	r3, [pc, #352]	; (80058c8 <HAL_UART_MspInit+0x25c>)
 8005766:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005768:	4a57      	ldr	r2, [pc, #348]	; (80058c8 <HAL_UART_MspInit+0x25c>)
 800576a:	f043 0302 	orr.w	r3, r3, #2
 800576e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005770:	4b55      	ldr	r3, [pc, #340]	; (80058c8 <HAL_UART_MspInit+0x25c>)
 8005772:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005774:	f003 0302 	and.w	r3, r3, #2
 8005778:	61bb      	str	r3, [r7, #24]
 800577a:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 800577c:	23c0      	movs	r3, #192	; 0xc0
 800577e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005782:	2302      	movs	r3, #2
 8005784:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005788:	2300      	movs	r3, #0
 800578a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800578e:	2303      	movs	r3, #3
 8005790:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005794:	2307      	movs	r3, #7
 8005796:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800579a:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800579e:	4619      	mov	r1, r3
 80057a0:	484b      	ldr	r0, [pc, #300]	; (80058d0 <HAL_UART_MspInit+0x264>)
 80057a2:	f000 fec1 	bl	8006528 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80057a6:	2200      	movs	r2, #0
 80057a8:	2105      	movs	r1, #5
 80057aa:	2025      	movs	r0, #37	; 0x25
 80057ac:	f000 fdd6 	bl	800635c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART1_IRQn);
 80057b0:	2025      	movs	r0, #37	; 0x25
 80057b2:	f000 fdef 	bl	8006394 <HAL_NVIC_EnableIRQ>
}
 80057b6:	e081      	b.n	80058bc <HAL_UART_MspInit+0x250>
  else if(huart->Instance==USART2)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4a45      	ldr	r2, [pc, #276]	; (80058d4 <HAL_UART_MspInit+0x268>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d13b      	bne.n	800583a <HAL_UART_MspInit+0x1ce>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80057c2:	2302      	movs	r3, #2
 80057c4:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80057c6:	2300      	movs	r3, #0
 80057c8:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80057ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80057ce:	4618      	mov	r0, r3
 80057d0:	f003 f8d8 	bl	8008984 <HAL_RCCEx_PeriphCLKConfig>
 80057d4:	4603      	mov	r3, r0
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d001      	beq.n	80057de <HAL_UART_MspInit+0x172>
      Error_Handler();
 80057da:	f7ff f99b 	bl	8004b14 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80057de:	4b3a      	ldr	r3, [pc, #232]	; (80058c8 <HAL_UART_MspInit+0x25c>)
 80057e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057e2:	4a39      	ldr	r2, [pc, #228]	; (80058c8 <HAL_UART_MspInit+0x25c>)
 80057e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80057e8:	6593      	str	r3, [r2, #88]	; 0x58
 80057ea:	4b37      	ldr	r3, [pc, #220]	; (80058c8 <HAL_UART_MspInit+0x25c>)
 80057ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057f2:	617b      	str	r3, [r7, #20]
 80057f4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80057f6:	4b34      	ldr	r3, [pc, #208]	; (80058c8 <HAL_UART_MspInit+0x25c>)
 80057f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057fa:	4a33      	ldr	r2, [pc, #204]	; (80058c8 <HAL_UART_MspInit+0x25c>)
 80057fc:	f043 0308 	orr.w	r3, r3, #8
 8005800:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005802:	4b31      	ldr	r3, [pc, #196]	; (80058c8 <HAL_UART_MspInit+0x25c>)
 8005804:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005806:	f003 0308 	and.w	r3, r3, #8
 800580a:	613b      	str	r3, [r7, #16]
 800580c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 800580e:	2378      	movs	r3, #120	; 0x78
 8005810:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005814:	2302      	movs	r3, #2
 8005816:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800581a:	2300      	movs	r3, #0
 800581c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005820:	2303      	movs	r3, #3
 8005822:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005826:	2307      	movs	r3, #7
 8005828:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800582c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8005830:	4619      	mov	r1, r3
 8005832:	4829      	ldr	r0, [pc, #164]	; (80058d8 <HAL_UART_MspInit+0x26c>)
 8005834:	f000 fe78 	bl	8006528 <HAL_GPIO_Init>
}
 8005838:	e040      	b.n	80058bc <HAL_UART_MspInit+0x250>
  else if(huart->Instance==USART3)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4a27      	ldr	r2, [pc, #156]	; (80058dc <HAL_UART_MspInit+0x270>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d13b      	bne.n	80058bc <HAL_UART_MspInit+0x250>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8005844:	2304      	movs	r3, #4
 8005846:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8005848:	2300      	movs	r3, #0
 800584a:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800584c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005850:	4618      	mov	r0, r3
 8005852:	f003 f897 	bl	8008984 <HAL_RCCEx_PeriphCLKConfig>
 8005856:	4603      	mov	r3, r0
 8005858:	2b00      	cmp	r3, #0
 800585a:	d001      	beq.n	8005860 <HAL_UART_MspInit+0x1f4>
      Error_Handler();
 800585c:	f7ff f95a 	bl	8004b14 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8005860:	4b19      	ldr	r3, [pc, #100]	; (80058c8 <HAL_UART_MspInit+0x25c>)
 8005862:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005864:	4a18      	ldr	r2, [pc, #96]	; (80058c8 <HAL_UART_MspInit+0x25c>)
 8005866:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800586a:	6593      	str	r3, [r2, #88]	; 0x58
 800586c:	4b16      	ldr	r3, [pc, #88]	; (80058c8 <HAL_UART_MspInit+0x25c>)
 800586e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005870:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005874:	60fb      	str	r3, [r7, #12]
 8005876:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005878:	4b13      	ldr	r3, [pc, #76]	; (80058c8 <HAL_UART_MspInit+0x25c>)
 800587a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800587c:	4a12      	ldr	r2, [pc, #72]	; (80058c8 <HAL_UART_MspInit+0x25c>)
 800587e:	f043 0308 	orr.w	r3, r3, #8
 8005882:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005884:	4b10      	ldr	r3, [pc, #64]	; (80058c8 <HAL_UART_MspInit+0x25c>)
 8005886:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005888:	f003 0308 	and.w	r3, r3, #8
 800588c:	60bb      	str	r3, [r7, #8]
 800588e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8005890:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005894:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005898:	2302      	movs	r3, #2
 800589a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800589e:	2300      	movs	r3, #0
 80058a0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80058a4:	2303      	movs	r3, #3
 80058a6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80058aa:	2307      	movs	r3, #7
 80058ac:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80058b0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80058b4:	4619      	mov	r1, r3
 80058b6:	4808      	ldr	r0, [pc, #32]	; (80058d8 <HAL_UART_MspInit+0x26c>)
 80058b8:	f000 fe36 	bl	8006528 <HAL_GPIO_Init>
}
 80058bc:	bf00      	nop
 80058be:	37d0      	adds	r7, #208	; 0xd0
 80058c0:	46bd      	mov	sp, r7
 80058c2:	bd80      	pop	{r7, pc}
 80058c4:	40004c00 	.word	0x40004c00
 80058c8:	40021000 	.word	0x40021000
 80058cc:	40013800 	.word	0x40013800
 80058d0:	48000400 	.word	0x48000400
 80058d4:	40004400 	.word	0x40004400
 80058d8:	48000c00 	.word	0x48000c00
 80058dc:	40004800 	.word	0x40004800

080058e0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b08c      	sub	sp, #48	; 0x30
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80058e8:	2300      	movs	r3, #0
 80058ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80058ee:	4b2e      	ldr	r3, [pc, #184]	; (80059a8 <HAL_InitTick+0xc8>)
 80058f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058f2:	4a2d      	ldr	r2, [pc, #180]	; (80059a8 <HAL_InitTick+0xc8>)
 80058f4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80058f8:	6613      	str	r3, [r2, #96]	; 0x60
 80058fa:	4b2b      	ldr	r3, [pc, #172]	; (80059a8 <HAL_InitTick+0xc8>)
 80058fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005902:	60bb      	str	r3, [r7, #8]
 8005904:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005906:	f107 020c 	add.w	r2, r7, #12
 800590a:	f107 0310 	add.w	r3, r7, #16
 800590e:	4611      	mov	r1, r2
 8005910:	4618      	mov	r0, r3
 8005912:	f002 ff45 	bl	80087a0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8005916:	f002 ff2d 	bl	8008774 <HAL_RCC_GetPCLK2Freq>
 800591a:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800591c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800591e:	4a23      	ldr	r2, [pc, #140]	; (80059ac <HAL_InitTick+0xcc>)
 8005920:	fba2 2303 	umull	r2, r3, r2, r3
 8005924:	0c9b      	lsrs	r3, r3, #18
 8005926:	3b01      	subs	r3, #1
 8005928:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800592a:	4b21      	ldr	r3, [pc, #132]	; (80059b0 <HAL_InitTick+0xd0>)
 800592c:	4a21      	ldr	r2, [pc, #132]	; (80059b4 <HAL_InitTick+0xd4>)
 800592e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8005930:	4b1f      	ldr	r3, [pc, #124]	; (80059b0 <HAL_InitTick+0xd0>)
 8005932:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005936:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8005938:	4a1d      	ldr	r2, [pc, #116]	; (80059b0 <HAL_InitTick+0xd0>)
 800593a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800593c:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800593e:	4b1c      	ldr	r3, [pc, #112]	; (80059b0 <HAL_InitTick+0xd0>)
 8005940:	2200      	movs	r2, #0
 8005942:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005944:	4b1a      	ldr	r3, [pc, #104]	; (80059b0 <HAL_InitTick+0xd0>)
 8005946:	2200      	movs	r2, #0
 8005948:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800594a:	4b19      	ldr	r3, [pc, #100]	; (80059b0 <HAL_InitTick+0xd0>)
 800594c:	2200      	movs	r2, #0
 800594e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8005950:	4817      	ldr	r0, [pc, #92]	; (80059b0 <HAL_InitTick+0xd0>)
 8005952:	f003 fd2f 	bl	80093b4 <HAL_TIM_Base_Init>
 8005956:	4603      	mov	r3, r0
 8005958:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 800595c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005960:	2b00      	cmp	r3, #0
 8005962:	d11b      	bne.n	800599c <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8005964:	4812      	ldr	r0, [pc, #72]	; (80059b0 <HAL_InitTick+0xd0>)
 8005966:	f003 fd87 	bl	8009478 <HAL_TIM_Base_Start_IT>
 800596a:	4603      	mov	r3, r0
 800596c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8005970:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005974:	2b00      	cmp	r3, #0
 8005976:	d111      	bne.n	800599c <HAL_InitTick+0xbc>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8005978:	2019      	movs	r0, #25
 800597a:	f000 fd0b 	bl	8006394 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2b0f      	cmp	r3, #15
 8005982:	d808      	bhi.n	8005996 <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8005984:	2200      	movs	r2, #0
 8005986:	6879      	ldr	r1, [r7, #4]
 8005988:	2019      	movs	r0, #25
 800598a:	f000 fce7 	bl	800635c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800598e:	4a0a      	ldr	r2, [pc, #40]	; (80059b8 <HAL_InitTick+0xd8>)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6013      	str	r3, [r2, #0]
 8005994:	e002      	b.n	800599c <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 8005996:	2301      	movs	r3, #1
 8005998:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800599c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80059a0:	4618      	mov	r0, r3
 80059a2:	3730      	adds	r7, #48	; 0x30
 80059a4:	46bd      	mov	sp, r7
 80059a6:	bd80      	pop	{r7, pc}
 80059a8:	40021000 	.word	0x40021000
 80059ac:	431bde83 	.word	0x431bde83
 80059b0:	20000424 	.word	0x20000424
 80059b4:	40012c00 	.word	0x40012c00
 80059b8:	20000014 	.word	0x20000014

080059bc <NMI_Handler>:

/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80059bc:	b480      	push	{r7}
 80059be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80059c0:	e7fe      	b.n	80059c0 <NMI_Handler+0x4>

080059c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80059c2:	b480      	push	{r7}
 80059c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80059c6:	e7fe      	b.n	80059c6 <HardFault_Handler+0x4>

080059c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80059c8:	b480      	push	{r7}
 80059ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80059cc:	e7fe      	b.n	80059cc <MemManage_Handler+0x4>

080059ce <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80059ce:	b480      	push	{r7}
 80059d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80059d2:	e7fe      	b.n	80059d2 <BusFault_Handler+0x4>

080059d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80059d4:	b480      	push	{r7}
 80059d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80059d8:	e7fe      	b.n	80059d8 <UsageFault_Handler+0x4>

080059da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80059da:	b480      	push	{r7}
 80059dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80059de:	bf00      	nop
 80059e0:	46bd      	mov	sp, r7
 80059e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e6:	4770      	bx	lr

080059e8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 80059ec:	2020      	movs	r0, #32
 80059ee:	f000 ff5f 	bl	80068b0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 80059f2:	2040      	movs	r0, #64	; 0x40
 80059f4:	f000 ff5c 	bl	80068b0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 80059f8:	2080      	movs	r0, #128	; 0x80
 80059fa:	f000 ff59 	bl	80068b0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 80059fe:	f44f 7080 	mov.w	r0, #256	; 0x100
 8005a02:	f000 ff55 	bl	80068b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8005a06:	bf00      	nop
 8005a08:	bd80      	pop	{r7, pc}
	...

08005a0c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005a10:	4802      	ldr	r0, [pc, #8]	; (8005a1c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8005a12:	f003 fda1 	bl	8009558 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8005a16:	bf00      	nop
 8005a18:	bd80      	pop	{r7, pc}
 8005a1a:	bf00      	nop
 8005a1c:	20000424 	.word	0x20000424

08005a20 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8005a24:	4802      	ldr	r0, [pc, #8]	; (8005a30 <I2C1_EV_IRQHandler+0x10>)
 8005a26:	f001 fc0d 	bl	8007244 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8005a2a:	bf00      	nop
 8005a2c:	bd80      	pop	{r7, pc}
 8005a2e:	bf00      	nop
 8005a30:	20000298 	.word	0x20000298

08005a34 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8005a38:	4802      	ldr	r0, [pc, #8]	; (8005a44 <I2C2_EV_IRQHandler+0x10>)
 8005a3a:	f001 fc03 	bl	8007244 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8005a3e:	bf00      	nop
 8005a40:	bd80      	pop	{r7, pc}
 8005a42:	bf00      	nop
 8005a44:	20000364 	.word	0x20000364

08005a48 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8005a4c:	4802      	ldr	r0, [pc, #8]	; (8005a58 <USART1_IRQHandler+0x10>)
 8005a4e:	f004 f8c1 	bl	8009bd4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8005a52:	bf00      	nop
 8005a54:	bd80      	pop	{r7, pc}
 8005a56:	bf00      	nop
 8005a58:	20000474 	.word	0x20000474

08005a5c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8005a60:	4802      	ldr	r0, [pc, #8]	; (8005a6c <UART4_IRQHandler+0x10>)
 8005a62:	f004 f8b7 	bl	8009bd4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8005a66:	bf00      	nop
 8005a68:	bd80      	pop	{r7, pc}
 8005a6a:	bf00      	nop
 8005a6c:	20000504 	.word	0x20000504

08005a70 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI10_Pin);
 8005a74:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8005a78:	f000 ff1a 	bl	80068b0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8005a7c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005a80:	f000 ff16 	bl	80068b0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(USB_OTG_FS_PWR_EN_Pin);
 8005a84:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8005a88:	f000 ff12 	bl	80068b0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 8005a8c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8005a90:	f000 ff0e 	bl	80068b0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 8005a94:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8005a98:	f000 ff0a 	bl	80068b0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 8005a9c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8005aa0:	f000 ff06 	bl	80068b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8005aa4:	bf00      	nop
 8005aa6:	bd80      	pop	{r7, pc}

08005aa8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	af00      	add	r7, sp, #0
  return 1;
 8005aac:	2301      	movs	r3, #1
}
 8005aae:	4618      	mov	r0, r3
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab6:	4770      	bx	lr

08005ab8 <_kill>:

int _kill(int pid, int sig)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b082      	sub	sp, #8
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
 8005ac0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8005ac2:	f00a f833 	bl	800fb2c <__errno>
 8005ac6:	4603      	mov	r3, r0
 8005ac8:	2216      	movs	r2, #22
 8005aca:	601a      	str	r2, [r3, #0]
  return -1;
 8005acc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	3708      	adds	r7, #8
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	bd80      	pop	{r7, pc}

08005ad8 <_exit>:

void _exit (int status)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b082      	sub	sp, #8
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8005ae0:	f04f 31ff 	mov.w	r1, #4294967295
 8005ae4:	6878      	ldr	r0, [r7, #4]
 8005ae6:	f7ff ffe7 	bl	8005ab8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8005aea:	e7fe      	b.n	8005aea <_exit+0x12>

08005aec <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b086      	sub	sp, #24
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	60f8      	str	r0, [r7, #12]
 8005af4:	60b9      	str	r1, [r7, #8]
 8005af6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005af8:	2300      	movs	r3, #0
 8005afa:	617b      	str	r3, [r7, #20]
 8005afc:	e00a      	b.n	8005b14 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8005afe:	f3af 8000 	nop.w
 8005b02:	4601      	mov	r1, r0
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	1c5a      	adds	r2, r3, #1
 8005b08:	60ba      	str	r2, [r7, #8]
 8005b0a:	b2ca      	uxtb	r2, r1
 8005b0c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005b0e:	697b      	ldr	r3, [r7, #20]
 8005b10:	3301      	adds	r3, #1
 8005b12:	617b      	str	r3, [r7, #20]
 8005b14:	697a      	ldr	r2, [r7, #20]
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	429a      	cmp	r2, r3
 8005b1a:	dbf0      	blt.n	8005afe <_read+0x12>
  }

  return len;
 8005b1c:	687b      	ldr	r3, [r7, #4]
}
 8005b1e:	4618      	mov	r0, r3
 8005b20:	3718      	adds	r7, #24
 8005b22:	46bd      	mov	sp, r7
 8005b24:	bd80      	pop	{r7, pc}

08005b26 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005b26:	b580      	push	{r7, lr}
 8005b28:	b086      	sub	sp, #24
 8005b2a:	af00      	add	r7, sp, #0
 8005b2c:	60f8      	str	r0, [r7, #12]
 8005b2e:	60b9      	str	r1, [r7, #8]
 8005b30:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005b32:	2300      	movs	r3, #0
 8005b34:	617b      	str	r3, [r7, #20]
 8005b36:	e009      	b.n	8005b4c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	1c5a      	adds	r2, r3, #1
 8005b3c:	60ba      	str	r2, [r7, #8]
 8005b3e:	781b      	ldrb	r3, [r3, #0]
 8005b40:	4618      	mov	r0, r3
 8005b42:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005b46:	697b      	ldr	r3, [r7, #20]
 8005b48:	3301      	adds	r3, #1
 8005b4a:	617b      	str	r3, [r7, #20]
 8005b4c:	697a      	ldr	r2, [r7, #20]
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	429a      	cmp	r2, r3
 8005b52:	dbf1      	blt.n	8005b38 <_write+0x12>
  }
  return len;
 8005b54:	687b      	ldr	r3, [r7, #4]
}
 8005b56:	4618      	mov	r0, r3
 8005b58:	3718      	adds	r7, #24
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	bd80      	pop	{r7, pc}

08005b5e <_close>:

int _close(int file)
{
 8005b5e:	b480      	push	{r7}
 8005b60:	b083      	sub	sp, #12
 8005b62:	af00      	add	r7, sp, #0
 8005b64:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8005b66:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	370c      	adds	r7, #12
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b74:	4770      	bx	lr

08005b76 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005b76:	b480      	push	{r7}
 8005b78:	b083      	sub	sp, #12
 8005b7a:	af00      	add	r7, sp, #0
 8005b7c:	6078      	str	r0, [r7, #4]
 8005b7e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005b86:	605a      	str	r2, [r3, #4]
  return 0;
 8005b88:	2300      	movs	r3, #0
}
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	370c      	adds	r7, #12
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b94:	4770      	bx	lr

08005b96 <_isatty>:

int _isatty(int file)
{
 8005b96:	b480      	push	{r7}
 8005b98:	b083      	sub	sp, #12
 8005b9a:	af00      	add	r7, sp, #0
 8005b9c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8005b9e:	2301      	movs	r3, #1
}
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	370c      	adds	r7, #12
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005baa:	4770      	bx	lr

08005bac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005bac:	b480      	push	{r7}
 8005bae:	b085      	sub	sp, #20
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	60f8      	str	r0, [r7, #12]
 8005bb4:	60b9      	str	r1, [r7, #8]
 8005bb6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8005bb8:	2300      	movs	r3, #0
}
 8005bba:	4618      	mov	r0, r3
 8005bbc:	3714      	adds	r7, #20
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc4:	4770      	bx	lr
	...

08005bc8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b086      	sub	sp, #24
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005bd0:	4a14      	ldr	r2, [pc, #80]	; (8005c24 <_sbrk+0x5c>)
 8005bd2:	4b15      	ldr	r3, [pc, #84]	; (8005c28 <_sbrk+0x60>)
 8005bd4:	1ad3      	subs	r3, r2, r3
 8005bd6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005bd8:	697b      	ldr	r3, [r7, #20]
 8005bda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005bdc:	4b13      	ldr	r3, [pc, #76]	; (8005c2c <_sbrk+0x64>)
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d102      	bne.n	8005bea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005be4:	4b11      	ldr	r3, [pc, #68]	; (8005c2c <_sbrk+0x64>)
 8005be6:	4a12      	ldr	r2, [pc, #72]	; (8005c30 <_sbrk+0x68>)
 8005be8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005bea:	4b10      	ldr	r3, [pc, #64]	; (8005c2c <_sbrk+0x64>)
 8005bec:	681a      	ldr	r2, [r3, #0]
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	4413      	add	r3, r2
 8005bf2:	693a      	ldr	r2, [r7, #16]
 8005bf4:	429a      	cmp	r2, r3
 8005bf6:	d207      	bcs.n	8005c08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005bf8:	f009 ff98 	bl	800fb2c <__errno>
 8005bfc:	4603      	mov	r3, r0
 8005bfe:	220c      	movs	r2, #12
 8005c00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005c02:	f04f 33ff 	mov.w	r3, #4294967295
 8005c06:	e009      	b.n	8005c1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005c08:	4b08      	ldr	r3, [pc, #32]	; (8005c2c <_sbrk+0x64>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005c0e:	4b07      	ldr	r3, [pc, #28]	; (8005c2c <_sbrk+0x64>)
 8005c10:	681a      	ldr	r2, [r3, #0]
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	4413      	add	r3, r2
 8005c16:	4a05      	ldr	r2, [pc, #20]	; (8005c2c <_sbrk+0x64>)
 8005c18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
}
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	3718      	adds	r7, #24
 8005c20:	46bd      	mov	sp, r7
 8005c22:	bd80      	pop	{r7, pc}
 8005c24:	200a0000 	.word	0x200a0000
 8005c28:	00000400 	.word	0x00000400
 8005c2c:	20000470 	.word	0x20000470
 8005c30:	20006368 	.word	0x20006368

08005c34 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8005c34:	b480      	push	{r7}
 8005c36:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8005c38:	4b06      	ldr	r3, [pc, #24]	; (8005c54 <SystemInit+0x20>)
 8005c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c3e:	4a05      	ldr	r2, [pc, #20]	; (8005c54 <SystemInit+0x20>)
 8005c40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005c44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8005c48:	bf00      	nop
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c50:	4770      	bx	lr
 8005c52:	bf00      	nop
 8005c54:	e000ed00 	.word	0xe000ed00

08005c58 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	af00      	add	r7, sp, #0
  huart1.Instance = USART1;
 8005c5c:	4b24      	ldr	r3, [pc, #144]	; (8005cf0 <MX_USART1_UART_Init+0x98>)
 8005c5e:	4a25      	ldr	r2, [pc, #148]	; (8005cf4 <MX_USART1_UART_Init+0x9c>)
 8005c60:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 921600;
 8005c62:	4b23      	ldr	r3, [pc, #140]	; (8005cf0 <MX_USART1_UART_Init+0x98>)
 8005c64:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8005c68:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005c6a:	4b21      	ldr	r3, [pc, #132]	; (8005cf0 <MX_USART1_UART_Init+0x98>)
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005c70:	4b1f      	ldr	r3, [pc, #124]	; (8005cf0 <MX_USART1_UART_Init+0x98>)
 8005c72:	2200      	movs	r2, #0
 8005c74:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005c76:	4b1e      	ldr	r3, [pc, #120]	; (8005cf0 <MX_USART1_UART_Init+0x98>)
 8005c78:	2200      	movs	r2, #0
 8005c7a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005c7c:	4b1c      	ldr	r3, [pc, #112]	; (8005cf0 <MX_USART1_UART_Init+0x98>)
 8005c7e:	220c      	movs	r2, #12
 8005c80:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005c82:	4b1b      	ldr	r3, [pc, #108]	; (8005cf0 <MX_USART1_UART_Init+0x98>)
 8005c84:	2200      	movs	r2, #0
 8005c86:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005c88:	4b19      	ldr	r3, [pc, #100]	; (8005cf0 <MX_USART1_UART_Init+0x98>)
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005c8e:	4b18      	ldr	r3, [pc, #96]	; (8005cf0 <MX_USART1_UART_Init+0x98>)
 8005c90:	2200      	movs	r2, #0
 8005c92:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005c94:	4b16      	ldr	r3, [pc, #88]	; (8005cf0 <MX_USART1_UART_Init+0x98>)
 8005c96:	2200      	movs	r2, #0
 8005c98:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005c9a:	4b15      	ldr	r3, [pc, #84]	; (8005cf0 <MX_USART1_UART_Init+0x98>)
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005ca0:	4813      	ldr	r0, [pc, #76]	; (8005cf0 <MX_USART1_UART_Init+0x98>)
 8005ca2:	f003 fe59 	bl	8009958 <HAL_UART_Init>
 8005ca6:	4603      	mov	r3, r0
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d001      	beq.n	8005cb0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8005cac:	f7fe ff32 	bl	8004b14 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005cb0:	2100      	movs	r1, #0
 8005cb2:	480f      	ldr	r0, [pc, #60]	; (8005cf0 <MX_USART1_UART_Init+0x98>)
 8005cb4:	f005 fe05 	bl	800b8c2 <HAL_UARTEx_SetTxFifoThreshold>
 8005cb8:	4603      	mov	r3, r0
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d001      	beq.n	8005cc2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8005cbe:	f7fe ff29 	bl	8004b14 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005cc2:	2100      	movs	r1, #0
 8005cc4:	480a      	ldr	r0, [pc, #40]	; (8005cf0 <MX_USART1_UART_Init+0x98>)
 8005cc6:	f005 fe3a 	bl	800b93e <HAL_UARTEx_SetRxFifoThreshold>
 8005cca:	4603      	mov	r3, r0
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d001      	beq.n	8005cd4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8005cd0:	f7fe ff20 	bl	8004b14 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8005cd4:	4806      	ldr	r0, [pc, #24]	; (8005cf0 <MX_USART1_UART_Init+0x98>)
 8005cd6:	f005 fdbb 	bl	800b850 <HAL_UARTEx_DisableFifoMode>
 8005cda:	4603      	mov	r3, r0
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d001      	beq.n	8005ce4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8005ce0:	f7fe ff18 	bl	8004b14 <Error_Handler>
  }
  RB_init(&uart1RXrb, RB_SIZE);
 8005ce4:	2128      	movs	r1, #40	; 0x28
 8005ce6:	4804      	ldr	r0, [pc, #16]	; (8005cf8 <MX_USART1_UART_Init+0xa0>)
 8005ce8:	f7ff fb19 	bl	800531e <RB_init>

}
 8005cec:	bf00      	nop
 8005cee:	bd80      	pop	{r7, pc}
 8005cf0:	20000474 	.word	0x20000474
 8005cf4:	40013800 	.word	0x40013800
 8005cf8:	200005c8 	.word	0x200005c8

08005cfc <MX_UART4_Init>:

void MX_UART4_Init(void)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	af00      	add	r7, sp, #0

  huart4.Instance = UART4;
 8005d00:	4b26      	ldr	r3, [pc, #152]	; (8005d9c <MX_UART4_Init+0xa0>)
 8005d02:	4a27      	ldr	r2, [pc, #156]	; (8005da0 <MX_UART4_Init+0xa4>)
 8005d04:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 921600;
 8005d06:	4b25      	ldr	r3, [pc, #148]	; (8005d9c <MX_UART4_Init+0xa0>)
 8005d08:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8005d0c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8005d0e:	4b23      	ldr	r3, [pc, #140]	; (8005d9c <MX_UART4_Init+0xa0>)
 8005d10:	2200      	movs	r2, #0
 8005d12:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8005d14:	4b21      	ldr	r3, [pc, #132]	; (8005d9c <MX_UART4_Init+0xa0>)
 8005d16:	2200      	movs	r2, #0
 8005d18:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8005d1a:	4b20      	ldr	r3, [pc, #128]	; (8005d9c <MX_UART4_Init+0xa0>)
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8005d20:	4b1e      	ldr	r3, [pc, #120]	; (8005d9c <MX_UART4_Init+0xa0>)
 8005d22:	220c      	movs	r2, #12
 8005d24:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005d26:	4b1d      	ldr	r3, [pc, #116]	; (8005d9c <MX_UART4_Init+0xa0>)
 8005d28:	2200      	movs	r2, #0
 8005d2a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8005d2c:	4b1b      	ldr	r3, [pc, #108]	; (8005d9c <MX_UART4_Init+0xa0>)
 8005d2e:	2200      	movs	r2, #0
 8005d30:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005d32:	4b1a      	ldr	r3, [pc, #104]	; (8005d9c <MX_UART4_Init+0xa0>)
 8005d34:	2200      	movs	r2, #0
 8005d36:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005d38:	4b18      	ldr	r3, [pc, #96]	; (8005d9c <MX_UART4_Init+0xa0>)
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005d3e:	4b17      	ldr	r3, [pc, #92]	; (8005d9c <MX_UART4_Init+0xa0>)
 8005d40:	2200      	movs	r2, #0
 8005d42:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8005d44:	4815      	ldr	r0, [pc, #84]	; (8005d9c <MX_UART4_Init+0xa0>)
 8005d46:	f003 fe07 	bl	8009958 <HAL_UART_Init>
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d001      	beq.n	8005d54 <MX_UART4_Init+0x58>
  {
    error_Handler();
 8005d50:	f000 f82c 	bl	8005dac <error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005d54:	2100      	movs	r1, #0
 8005d56:	4811      	ldr	r0, [pc, #68]	; (8005d9c <MX_UART4_Init+0xa0>)
 8005d58:	f005 fdb3 	bl	800b8c2 <HAL_UARTEx_SetTxFifoThreshold>
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d001      	beq.n	8005d66 <MX_UART4_Init+0x6a>
  {
    error_Handler();
 8005d62:	f000 f823 	bl	8005dac <error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005d66:	2100      	movs	r1, #0
 8005d68:	480c      	ldr	r0, [pc, #48]	; (8005d9c <MX_UART4_Init+0xa0>)
 8005d6a:	f005 fde8 	bl	800b93e <HAL_UARTEx_SetRxFifoThreshold>
 8005d6e:	4603      	mov	r3, r0
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d001      	beq.n	8005d78 <MX_UART4_Init+0x7c>
  {
    error_Handler();
 8005d74:	f000 f81a 	bl	8005dac <error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8005d78:	4808      	ldr	r0, [pc, #32]	; (8005d9c <MX_UART4_Init+0xa0>)
 8005d7a:	f005 fd69 	bl	800b850 <HAL_UARTEx_DisableFifoMode>
 8005d7e:	4603      	mov	r3, r0
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d001      	beq.n	8005d88 <MX_UART4_Init+0x8c>
  {
    error_Handler();
 8005d84:	f000 f812 	bl	8005dac <error_Handler>
  }
  RB_init(&uart4RXrb, RB_SIZE);
 8005d88:	2128      	movs	r1, #40	; 0x28
 8005d8a:	4806      	ldr	r0, [pc, #24]	; (8005da4 <MX_UART4_Init+0xa8>)
 8005d8c:	f7ff fac7 	bl	800531e <RB_init>
  uart_write_debug("UART4 initialized\r\n", 10);
 8005d90:	210a      	movs	r1, #10
 8005d92:	4805      	ldr	r0, [pc, #20]	; (8005da8 <MX_UART4_Init+0xac>)
 8005d94:	f000 f83c 	bl	8005e10 <uart_write_debug>

}
 8005d98:	bf00      	nop
 8005d9a:	bd80      	pop	{r7, pc}
 8005d9c:	20000504 	.word	0x20000504
 8005da0:	40004c00 	.word	0x40004c00
 8005da4:	20000594 	.word	0x20000594
 8005da8:	08014278 	.word	0x08014278

08005dac <error_Handler>:

void error_Handler(void){
 8005dac:	b580      	push	{r7, lr}
 8005dae:	af00      	add	r7, sp, #0
	uart_write_debug("Failed to Init UART4\r\n", 10);
 8005db0:	210a      	movs	r1, #10
 8005db2:	4802      	ldr	r0, [pc, #8]	; (8005dbc <error_Handler+0x10>)
 8005db4:	f000 f82c 	bl	8005e10 <uart_write_debug>
}
 8005db8:	bf00      	nop
 8005dba:	bd80      	pop	{r7, pc}
 8005dbc:	0801428c 	.word	0x0801428c

08005dc0 <uart_receive_it>:


HAL_StatusTypeDef uart_receive_it(UART_select device){
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b084      	sub	sp, #16
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	71fb      	strb	r3, [r7, #7]
	UART_HandleTypeDef *huart;

	switch (device){
 8005dca:	79fb      	ldrb	r3, [r7, #7]
 8005dcc:	2b02      	cmp	r3, #2
 8005dce:	d00c      	beq.n	8005dea <uart_receive_it+0x2a>
 8005dd0:	2b02      	cmp	r3, #2
 8005dd2:	dc0d      	bgt.n	8005df0 <uart_receive_it+0x30>
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d002      	beq.n	8005dde <uart_receive_it+0x1e>
 8005dd8:	2b01      	cmp	r3, #1
 8005dda:	d003      	beq.n	8005de4 <uart_receive_it+0x24>
 8005ddc:	e008      	b.n	8005df0 <uart_receive_it+0x30>
	case UART_DEBUG:
		huart = &huart1;
 8005dde:	4b09      	ldr	r3, [pc, #36]	; (8005e04 <uart_receive_it+0x44>)
 8005de0:	60fb      	str	r3, [r7, #12]
		break;
 8005de2:	e005      	b.n	8005df0 <uart_receive_it+0x30>
	case UART_NYX:
		huart = &huart4;
 8005de4:	4b08      	ldr	r3, [pc, #32]	; (8005e08 <uart_receive_it+0x48>)
 8005de6:	60fb      	str	r3, [r7, #12]
		break;
 8005de8:	e002      	b.n	8005df0 <uart_receive_it+0x30>
	case UART_IRIS:
		huart = &huart1;
 8005dea:	4b06      	ldr	r3, [pc, #24]	; (8005e04 <uart_receive_it+0x44>)
 8005dec:	60fb      	str	r3, [r7, #12]
		break;
 8005dee:	bf00      	nop
	}
	return HAL_UART_Receive_IT(huart, &rxChar, 1);
 8005df0:	2201      	movs	r2, #1
 8005df2:	4906      	ldr	r1, [pc, #24]	; (8005e0c <uart_receive_it+0x4c>)
 8005df4:	68f8      	ldr	r0, [r7, #12]
 8005df6:	f003 fe97 	bl	8009b28 <HAL_UART_Receive_IT>
 8005dfa:	4603      	mov	r3, r0
}
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	3710      	adds	r7, #16
 8005e00:	46bd      	mov	sp, r7
 8005e02:	bd80      	pop	{r7, pc}
 8005e04:	20000474 	.word	0x20000474
 8005e08:	20000504 	.word	0x20000504
 8005e0c:	200005fc 	.word	0x200005fc

08005e10 <uart_write_debug>:




HAL_StatusTypeDef uart_write_debug(uint8_t *pData, uint32_t Timeout){
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b082      	sub	sp, #8
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
 8005e18:	6039      	str	r1, [r7, #0]
	return HAL_UART_Transmit(&huart1,pData,strlen(pData),Timeout);// Sending in normal mode
 8005e1a:	6878      	ldr	r0, [r7, #4]
 8005e1c:	f7fa f9f0 	bl	8000200 <strlen>
 8005e20:	4603      	mov	r3, r0
 8005e22:	b29a      	uxth	r2, r3
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	6879      	ldr	r1, [r7, #4]
 8005e28:	4803      	ldr	r0, [pc, #12]	; (8005e38 <uart_write_debug+0x28>)
 8005e2a:	f003 fde5 	bl	80099f8 <HAL_UART_Transmit>
 8005e2e:	4603      	mov	r3, r0
}
 8005e30:	4618      	mov	r0, r3
 8005e32:	3708      	adds	r7, #8
 8005e34:	46bd      	mov	sp, r7
 8005e36:	bd80      	pop	{r7, pc}
 8005e38:	20000474 	.word	0x20000474

08005e3c <uart_write>:

HAL_StatusTypeDef uart_write(uint8_t *pData, uint8_t len, UART_select device, uint32_t Timeout){
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b086      	sub	sp, #24
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	60f8      	str	r0, [r7, #12]
 8005e44:	607b      	str	r3, [r7, #4]
 8005e46:	460b      	mov	r3, r1
 8005e48:	72fb      	strb	r3, [r7, #11]
 8005e4a:	4613      	mov	r3, r2
 8005e4c:	72bb      	strb	r3, [r7, #10]
	UART_HandleTypeDef *huart;
	switch (device){
 8005e4e:	7abb      	ldrb	r3, [r7, #10]
 8005e50:	2b02      	cmp	r3, #2
 8005e52:	d00c      	beq.n	8005e6e <uart_write+0x32>
 8005e54:	2b02      	cmp	r3, #2
 8005e56:	dc0d      	bgt.n	8005e74 <uart_write+0x38>
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d002      	beq.n	8005e62 <uart_write+0x26>
 8005e5c:	2b01      	cmp	r3, #1
 8005e5e:	d003      	beq.n	8005e68 <uart_write+0x2c>
 8005e60:	e008      	b.n	8005e74 <uart_write+0x38>
	case UART_DEBUG:
		huart = &huart1;
 8005e62:	4b12      	ldr	r3, [pc, #72]	; (8005eac <uart_write+0x70>)
 8005e64:	617b      	str	r3, [r7, #20]
		break;
 8005e66:	e005      	b.n	8005e74 <uart_write+0x38>
	case UART_NYX:
		huart = &huart4;
 8005e68:	4b11      	ldr	r3, [pc, #68]	; (8005eb0 <uart_write+0x74>)
 8005e6a:	617b      	str	r3, [r7, #20]
		break;
 8005e6c:	e002      	b.n	8005e74 <uart_write+0x38>
	case UART_IRIS:
		huart = &huart1;
 8005e6e:	4b0f      	ldr	r3, [pc, #60]	; (8005eac <uart_write+0x70>)
 8005e70:	617b      	str	r3, [r7, #20]
		break;
 8005e72:	bf00      	nop
	}
	if (len == 0){
 8005e74:	7afb      	ldrb	r3, [r7, #11]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d10b      	bne.n	8005e92 <uart_write+0x56>
		return HAL_UART_Transmit(huart,pData,strlen(pData),Timeout);// Sending in normal mode
 8005e7a:	68f8      	ldr	r0, [r7, #12]
 8005e7c:	f7fa f9c0 	bl	8000200 <strlen>
 8005e80:	4603      	mov	r3, r0
 8005e82:	b29a      	uxth	r2, r3
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	68f9      	ldr	r1, [r7, #12]
 8005e88:	6978      	ldr	r0, [r7, #20]
 8005e8a:	f003 fdb5 	bl	80099f8 <HAL_UART_Transmit>
 8005e8e:	4603      	mov	r3, r0
 8005e90:	e007      	b.n	8005ea2 <uart_write+0x66>
	}
	return HAL_UART_Transmit(huart,pData,len,Timeout);// Sending in normal mode
 8005e92:	7afb      	ldrb	r3, [r7, #11]
 8005e94:	b29a      	uxth	r2, r3
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	68f9      	ldr	r1, [r7, #12]
 8005e9a:	6978      	ldr	r0, [r7, #20]
 8005e9c:	f003 fdac 	bl	80099f8 <HAL_UART_Transmit>
 8005ea0:	4603      	mov	r3, r0
}
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	3718      	adds	r7, #24
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	bd80      	pop	{r7, pc}
 8005eaa:	bf00      	nop
 8005eac:	20000474 	.word	0x20000474
 8005eb0:	20000504 	.word	0x20000504

08005eb4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b084      	sub	sp, #16
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
	if (UartHandle->Instance == UART4)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	4a7c      	ldr	r2, [pc, #496]	; (80060b4 <HAL_UART_RxCpltCallback+0x200>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	f040 80a2 	bne.w	800600c <HAL_UART_RxCpltCallback+0x158>
	{
		if (ack_rcv_flag == 1){
 8005ec8:	4b7b      	ldr	r3, [pc, #492]	; (80060b8 <HAL_UART_RxCpltCallback+0x204>)
 8005eca:	781b      	ldrb	r3, [r3, #0]
 8005ecc:	2b01      	cmp	r3, #1
 8005ece:	d129      	bne.n	8005f24 <HAL_UART_RxCpltCallback+0x70>
			if ((rxChar != ESC) && (prvRxChar == ACK)){
 8005ed0:	4b7a      	ldr	r3, [pc, #488]	; (80060bc <HAL_UART_RxCpltCallback+0x208>)
 8005ed2:	781b      	ldrb	r3, [r3, #0]
 8005ed4:	2b1b      	cmp	r3, #27
 8005ed6:	d010      	beq.n	8005efa <HAL_UART_RxCpltCallback+0x46>
 8005ed8:	4b79      	ldr	r3, [pc, #484]	; (80060c0 <HAL_UART_RxCpltCallback+0x20c>)
 8005eda:	781b      	ldrb	r3, [r3, #0]
 8005edc:	2b06      	cmp	r3, #6
 8005ede:	d10c      	bne.n	8005efa <HAL_UART_RxCpltCallback+0x46>
				osEventFlagsSet(ack_rcvd, ACK_FLAG);
 8005ee0:	4b78      	ldr	r3, [pc, #480]	; (80060c4 <HAL_UART_RxCpltCallback+0x210>)
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	2101      	movs	r1, #1
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	f005 ff72 	bl	800bdd0 <osEventFlagsSet>
				prvRxChar = 0x00;
 8005eec:	4b74      	ldr	r3, [pc, #464]	; (80060c0 <HAL_UART_RxCpltCallback+0x20c>)
 8005eee:	2200      	movs	r2, #0
 8005ef0:	701a      	strb	r2, [r3, #0]
				ack_rcv_flag = 0;
 8005ef2:	4b71      	ldr	r3, [pc, #452]	; (80060b8 <HAL_UART_RxCpltCallback+0x204>)
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	701a      	strb	r2, [r3, #0]
 8005ef8:	e082      	b.n	8006000 <HAL_UART_RxCpltCallback+0x14c>
			}
			else if ((rxChar != ESC) && (prvRxChar == NACK)){
 8005efa:	4b70      	ldr	r3, [pc, #448]	; (80060bc <HAL_UART_RxCpltCallback+0x208>)
 8005efc:	781b      	ldrb	r3, [r3, #0]
 8005efe:	2b1b      	cmp	r3, #27
 8005f00:	d07e      	beq.n	8006000 <HAL_UART_RxCpltCallback+0x14c>
 8005f02:	4b6f      	ldr	r3, [pc, #444]	; (80060c0 <HAL_UART_RxCpltCallback+0x20c>)
 8005f04:	781b      	ldrb	r3, [r3, #0]
 8005f06:	2b15      	cmp	r3, #21
 8005f08:	d17a      	bne.n	8006000 <HAL_UART_RxCpltCallback+0x14c>
				osEventFlagsSet(ack_rcvd, NACK_FLAG);
 8005f0a:	4b6e      	ldr	r3, [pc, #440]	; (80060c4 <HAL_UART_RxCpltCallback+0x210>)
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	2100      	movs	r1, #0
 8005f10:	4618      	mov	r0, r3
 8005f12:	f005 ff5d 	bl	800bdd0 <osEventFlagsSet>
				prvRxChar = 0x00;
 8005f16:	4b6a      	ldr	r3, [pc, #424]	; (80060c0 <HAL_UART_RxCpltCallback+0x20c>)
 8005f18:	2200      	movs	r2, #0
 8005f1a:	701a      	strb	r2, [r3, #0]
				ack_rcv_flag = 0;
 8005f1c:	4b66      	ldr	r3, [pc, #408]	; (80060b8 <HAL_UART_RxCpltCallback+0x204>)
 8005f1e:	2200      	movs	r2, #0
 8005f20:	701a      	strb	r2, [r3, #0]
 8005f22:	e06d      	b.n	8006000 <HAL_UART_RxCpltCallback+0x14c>
			}
		}
		else{
			if (((rxChar == ACK) || (rxChar == NACK)) && (prvRxChar == 0xFF)){
 8005f24:	4b65      	ldr	r3, [pc, #404]	; (80060bc <HAL_UART_RxCpltCallback+0x208>)
 8005f26:	781b      	ldrb	r3, [r3, #0]
 8005f28:	2b06      	cmp	r3, #6
 8005f2a:	d003      	beq.n	8005f34 <HAL_UART_RxCpltCallback+0x80>
 8005f2c:	4b63      	ldr	r3, [pc, #396]	; (80060bc <HAL_UART_RxCpltCallback+0x208>)
 8005f2e:	781b      	ldrb	r3, [r3, #0]
 8005f30:	2b15      	cmp	r3, #21
 8005f32:	d10b      	bne.n	8005f4c <HAL_UART_RxCpltCallback+0x98>
 8005f34:	4b62      	ldr	r3, [pc, #392]	; (80060c0 <HAL_UART_RxCpltCallback+0x20c>)
 8005f36:	781b      	ldrb	r3, [r3, #0]
 8005f38:	2bff      	cmp	r3, #255	; 0xff
 8005f3a:	d107      	bne.n	8005f4c <HAL_UART_RxCpltCallback+0x98>
				ack_rcv_flag = 1;
 8005f3c:	4b5e      	ldr	r3, [pc, #376]	; (80060b8 <HAL_UART_RxCpltCallback+0x204>)
 8005f3e:	2201      	movs	r2, #1
 8005f40:	701a      	strb	r2, [r3, #0]
				prvRxChar = rxChar;
 8005f42:	4b5e      	ldr	r3, [pc, #376]	; (80060bc <HAL_UART_RxCpltCallback+0x208>)
 8005f44:	781a      	ldrb	r2, [r3, #0]
 8005f46:	4b5e      	ldr	r3, [pc, #376]	; (80060c0 <HAL_UART_RxCpltCallback+0x20c>)
 8005f48:	701a      	strb	r2, [r3, #0]
 8005f4a:	e059      	b.n	8006000 <HAL_UART_RxCpltCallback+0x14c>
			}
			else if ((rxChar == ETX) && (prvRxChar != ESC)){
 8005f4c:	4b5b      	ldr	r3, [pc, #364]	; (80060bc <HAL_UART_RxCpltCallback+0x208>)
 8005f4e:	781b      	ldrb	r3, [r3, #0]
 8005f50:	2b03      	cmp	r3, #3
 8005f52:	d125      	bne.n	8005fa0 <HAL_UART_RxCpltCallback+0xec>
 8005f54:	4b5a      	ldr	r3, [pc, #360]	; (80060c0 <HAL_UART_RxCpltCallback+0x20c>)
 8005f56:	781b      	ldrb	r3, [r3, #0]
 8005f58:	2b1b      	cmp	r3, #27
 8005f5a:	d021      	beq.n	8005fa0 <HAL_UART_RxCpltCallback+0xec>
				uint8_t start_ch = 0;
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	73bb      	strb	r3, [r7, #14]
				start_ch = RB_pop(&uart4RXrb);
 8005f60:	4859      	ldr	r0, [pc, #356]	; (80060c8 <HAL_UART_RxCpltCallback+0x214>)
 8005f62:	f7ff fa2a 	bl	80053ba <RB_pop>
 8005f66:	4603      	mov	r3, r0
 8005f68:	73bb      	strb	r3, [r7, #14]
				if (start_ch == STX){
 8005f6a:	7bbb      	ldrb	r3, [r7, #14]
 8005f6c:	2b02      	cmp	r3, #2
 8005f6e:	d113      	bne.n	8005f98 <HAL_UART_RxCpltCallback+0xe4>
					uint8_t rb_len = RB_size(&uart4RXrb);
 8005f70:	4855      	ldr	r0, [pc, #340]	; (80060c8 <HAL_UART_RxCpltCallback+0x214>)
 8005f72:	f7ff fa71 	bl	8005458 <RB_size>
 8005f76:	4603      	mov	r3, r0
 8005f78:	737b      	strb	r3, [r7, #13]
					RB_pushFront(&uart4RXrb, rb_len);
 8005f7a:	7b7b      	ldrb	r3, [r7, #13]
 8005f7c:	4619      	mov	r1, r3
 8005f7e:	4852      	ldr	r0, [pc, #328]	; (80060c8 <HAL_UART_RxCpltCallback+0x214>)
 8005f80:	f7ff fa40 	bl	8005404 <RB_pushFront>
					osMessageQueuePut(messageQueueHandle, uart4RXrb.buffer, 0U, 0U);
 8005f84:	4b51      	ldr	r3, [pc, #324]	; (80060cc <HAL_UART_RxCpltCallback+0x218>)
 8005f86:	6818      	ldr	r0, [r3, #0]
 8005f88:	2300      	movs	r3, #0
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	494e      	ldr	r1, [pc, #312]	; (80060c8 <HAL_UART_RxCpltCallback+0x214>)
 8005f8e:	f006 f94b 	bl	800c228 <osMessageQueuePut>
					prvRxChar = 0xFF;
 8005f92:	4b4b      	ldr	r3, [pc, #300]	; (80060c0 <HAL_UART_RxCpltCallback+0x20c>)
 8005f94:	22ff      	movs	r2, #255	; 0xff
 8005f96:	701a      	strb	r2, [r3, #0]
				}
				RB_clear(&uart4RXrb);
 8005f98:	484b      	ldr	r0, [pc, #300]	; (80060c8 <HAL_UART_RxCpltCallback+0x214>)
 8005f9a:	f7ff fa79 	bl	8005490 <RB_clear>
			else if ((rxChar == ETX) && (prvRxChar != ESC)){
 8005f9e:	e02f      	b.n	8006000 <HAL_UART_RxCpltCallback+0x14c>
			}
			else if ((rxChar == ESC) && (prvRxChar != ESC)){
 8005fa0:	4b46      	ldr	r3, [pc, #280]	; (80060bc <HAL_UART_RxCpltCallback+0x208>)
 8005fa2:	781b      	ldrb	r3, [r3, #0]
 8005fa4:	2b1b      	cmp	r3, #27
 8005fa6:	d108      	bne.n	8005fba <HAL_UART_RxCpltCallback+0x106>
 8005fa8:	4b45      	ldr	r3, [pc, #276]	; (80060c0 <HAL_UART_RxCpltCallback+0x20c>)
 8005faa:	781b      	ldrb	r3, [r3, #0]
 8005fac:	2b1b      	cmp	r3, #27
 8005fae:	d004      	beq.n	8005fba <HAL_UART_RxCpltCallback+0x106>
				 prvRxChar = rxChar;
 8005fb0:	4b42      	ldr	r3, [pc, #264]	; (80060bc <HAL_UART_RxCpltCallback+0x208>)
 8005fb2:	781a      	ldrb	r2, [r3, #0]
 8005fb4:	4b42      	ldr	r3, [pc, #264]	; (80060c0 <HAL_UART_RxCpltCallback+0x20c>)
 8005fb6:	701a      	strb	r2, [r3, #0]
 8005fb8:	e022      	b.n	8006000 <HAL_UART_RxCpltCallback+0x14c>
			}
			else if ((rxChar == ESC) && (prvRxChar == ESC)){
 8005fba:	4b40      	ldr	r3, [pc, #256]	; (80060bc <HAL_UART_RxCpltCallback+0x208>)
 8005fbc:	781b      	ldrb	r3, [r3, #0]
 8005fbe:	2b1b      	cmp	r3, #27
 8005fc0:	d10d      	bne.n	8005fde <HAL_UART_RxCpltCallback+0x12a>
 8005fc2:	4b3f      	ldr	r3, [pc, #252]	; (80060c0 <HAL_UART_RxCpltCallback+0x20c>)
 8005fc4:	781b      	ldrb	r3, [r3, #0]
 8005fc6:	2b1b      	cmp	r3, #27
 8005fc8:	d109      	bne.n	8005fde <HAL_UART_RxCpltCallback+0x12a>
				RB_push(&uart4RXrb, rxChar);
 8005fca:	4b3c      	ldr	r3, [pc, #240]	; (80060bc <HAL_UART_RxCpltCallback+0x208>)
 8005fcc:	781b      	ldrb	r3, [r3, #0]
 8005fce:	4619      	mov	r1, r3
 8005fd0:	483d      	ldr	r0, [pc, #244]	; (80060c8 <HAL_UART_RxCpltCallback+0x214>)
 8005fd2:	f7ff f9c4 	bl	800535e <RB_push>
				prvRxChar = 0x00;
 8005fd6:	4b3a      	ldr	r3, [pc, #232]	; (80060c0 <HAL_UART_RxCpltCallback+0x20c>)
 8005fd8:	2200      	movs	r2, #0
 8005fda:	701a      	strb	r2, [r3, #0]
 8005fdc:	e010      	b.n	8006000 <HAL_UART_RxCpltCallback+0x14c>
			}
			else {
			  RB_push(&uart4RXrb, rxChar);
 8005fde:	4b37      	ldr	r3, [pc, #220]	; (80060bc <HAL_UART_RxCpltCallback+0x208>)
 8005fe0:	781b      	ldrb	r3, [r3, #0]
 8005fe2:	4619      	mov	r1, r3
 8005fe4:	4838      	ldr	r0, [pc, #224]	; (80060c8 <HAL_UART_RxCpltCallback+0x214>)
 8005fe6:	f7ff f9ba 	bl	800535e <RB_push>
			  if (rxChar == 0xFF) prvRxChar = 0x00;
 8005fea:	4b34      	ldr	r3, [pc, #208]	; (80060bc <HAL_UART_RxCpltCallback+0x208>)
 8005fec:	781b      	ldrb	r3, [r3, #0]
 8005fee:	2bff      	cmp	r3, #255	; 0xff
 8005ff0:	d102      	bne.n	8005ff8 <HAL_UART_RxCpltCallback+0x144>
 8005ff2:	4b33      	ldr	r3, [pc, #204]	; (80060c0 <HAL_UART_RxCpltCallback+0x20c>)
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	701a      	strb	r2, [r3, #0]
			  prvRxChar = rxChar;
 8005ff8:	4b30      	ldr	r3, [pc, #192]	; (80060bc <HAL_UART_RxCpltCallback+0x208>)
 8005ffa:	781a      	ldrb	r2, [r3, #0]
 8005ffc:	4b30      	ldr	r3, [pc, #192]	; (80060c0 <HAL_UART_RxCpltCallback+0x20c>)
 8005ffe:	701a      	strb	r2, [r3, #0]
			}
		}
		HAL_UART_Receive_IT(&huart4, &rxChar, 1);
 8006000:	2201      	movs	r2, #1
 8006002:	492e      	ldr	r1, [pc, #184]	; (80060bc <HAL_UART_RxCpltCallback+0x208>)
 8006004:	4832      	ldr	r0, [pc, #200]	; (80060d0 <HAL_UART_RxCpltCallback+0x21c>)
 8006006:	f003 fd8f 	bl	8009b28 <HAL_UART_Receive_IT>
		  prvRxChar = rxChar;
		}
		HAL_UART_Receive_IT(&huart1, &rxChar, 1);
	}

}
 800600a:	e04f      	b.n	80060ac <HAL_UART_RxCpltCallback+0x1f8>
	else if (UartHandle->Instance == USART1){
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4a30      	ldr	r2, [pc, #192]	; (80060d4 <HAL_UART_RxCpltCallback+0x220>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d14a      	bne.n	80060ac <HAL_UART_RxCpltCallback+0x1f8>
		if ((rxChar == ETX) && (prvRxChar != ESC)){
 8006016:	4b29      	ldr	r3, [pc, #164]	; (80060bc <HAL_UART_RxCpltCallback+0x208>)
 8006018:	781b      	ldrb	r3, [r3, #0]
 800601a:	2b03      	cmp	r3, #3
 800601c:	d118      	bne.n	8006050 <HAL_UART_RxCpltCallback+0x19c>
 800601e:	4b28      	ldr	r3, [pc, #160]	; (80060c0 <HAL_UART_RxCpltCallback+0x20c>)
 8006020:	781b      	ldrb	r3, [r3, #0]
 8006022:	2b1b      	cmp	r3, #27
 8006024:	d014      	beq.n	8006050 <HAL_UART_RxCpltCallback+0x19c>
		uint8_t start_ch = 0;
 8006026:	2300      	movs	r3, #0
 8006028:	73fb      	strb	r3, [r7, #15]
		start_ch = RB_pop(&uart1RXrb);
 800602a:	482b      	ldr	r0, [pc, #172]	; (80060d8 <HAL_UART_RxCpltCallback+0x224>)
 800602c:	f7ff f9c5 	bl	80053ba <RB_pop>
 8006030:	4603      	mov	r3, r0
 8006032:	73fb      	strb	r3, [r7, #15]
		if (start_ch == STX){
 8006034:	7bfb      	ldrb	r3, [r7, #15]
 8006036:	2b02      	cmp	r3, #2
 8006038:	d106      	bne.n	8006048 <HAL_UART_RxCpltCallback+0x194>
			osMessageQueuePut(messageQueueHandle, uart1RXrb.buffer, 0U, 0U);
 800603a:	4b24      	ldr	r3, [pc, #144]	; (80060cc <HAL_UART_RxCpltCallback+0x218>)
 800603c:	6818      	ldr	r0, [r3, #0]
 800603e:	2300      	movs	r3, #0
 8006040:	2200      	movs	r2, #0
 8006042:	4925      	ldr	r1, [pc, #148]	; (80060d8 <HAL_UART_RxCpltCallback+0x224>)
 8006044:	f006 f8f0 	bl	800c228 <osMessageQueuePut>
		RB_clear(&uart1RXrb);
 8006048:	4823      	ldr	r0, [pc, #140]	; (80060d8 <HAL_UART_RxCpltCallback+0x224>)
 800604a:	f7ff fa21 	bl	8005490 <RB_clear>
		if ((rxChar == ETX) && (prvRxChar != ESC)){
 800604e:	e028      	b.n	80060a2 <HAL_UART_RxCpltCallback+0x1ee>
		 else if ((rxChar == ESC) && (prvRxChar != ESC)){
 8006050:	4b1a      	ldr	r3, [pc, #104]	; (80060bc <HAL_UART_RxCpltCallback+0x208>)
 8006052:	781b      	ldrb	r3, [r3, #0]
 8006054:	2b1b      	cmp	r3, #27
 8006056:	d108      	bne.n	800606a <HAL_UART_RxCpltCallback+0x1b6>
 8006058:	4b19      	ldr	r3, [pc, #100]	; (80060c0 <HAL_UART_RxCpltCallback+0x20c>)
 800605a:	781b      	ldrb	r3, [r3, #0]
 800605c:	2b1b      	cmp	r3, #27
 800605e:	d004      	beq.n	800606a <HAL_UART_RxCpltCallback+0x1b6>
			 prvRxChar = rxChar;
 8006060:	4b16      	ldr	r3, [pc, #88]	; (80060bc <HAL_UART_RxCpltCallback+0x208>)
 8006062:	781a      	ldrb	r2, [r3, #0]
 8006064:	4b16      	ldr	r3, [pc, #88]	; (80060c0 <HAL_UART_RxCpltCallback+0x20c>)
 8006066:	701a      	strb	r2, [r3, #0]
 8006068:	e01b      	b.n	80060a2 <HAL_UART_RxCpltCallback+0x1ee>
		else if ((rxChar == ESC) && (prvRxChar == ESC)){
 800606a:	4b14      	ldr	r3, [pc, #80]	; (80060bc <HAL_UART_RxCpltCallback+0x208>)
 800606c:	781b      	ldrb	r3, [r3, #0]
 800606e:	2b1b      	cmp	r3, #27
 8006070:	d10d      	bne.n	800608e <HAL_UART_RxCpltCallback+0x1da>
 8006072:	4b13      	ldr	r3, [pc, #76]	; (80060c0 <HAL_UART_RxCpltCallback+0x20c>)
 8006074:	781b      	ldrb	r3, [r3, #0]
 8006076:	2b1b      	cmp	r3, #27
 8006078:	d109      	bne.n	800608e <HAL_UART_RxCpltCallback+0x1da>
			RB_push(&uart1RXrb, rxChar);
 800607a:	4b10      	ldr	r3, [pc, #64]	; (80060bc <HAL_UART_RxCpltCallback+0x208>)
 800607c:	781b      	ldrb	r3, [r3, #0]
 800607e:	4619      	mov	r1, r3
 8006080:	4815      	ldr	r0, [pc, #84]	; (80060d8 <HAL_UART_RxCpltCallback+0x224>)
 8006082:	f7ff f96c 	bl	800535e <RB_push>
			prvRxChar = 0x00;
 8006086:	4b0e      	ldr	r3, [pc, #56]	; (80060c0 <HAL_UART_RxCpltCallback+0x20c>)
 8006088:	2200      	movs	r2, #0
 800608a:	701a      	strb	r2, [r3, #0]
 800608c:	e009      	b.n	80060a2 <HAL_UART_RxCpltCallback+0x1ee>
		  RB_push(&uart1RXrb, rxChar);
 800608e:	4b0b      	ldr	r3, [pc, #44]	; (80060bc <HAL_UART_RxCpltCallback+0x208>)
 8006090:	781b      	ldrb	r3, [r3, #0]
 8006092:	4619      	mov	r1, r3
 8006094:	4810      	ldr	r0, [pc, #64]	; (80060d8 <HAL_UART_RxCpltCallback+0x224>)
 8006096:	f7ff f962 	bl	800535e <RB_push>
		  prvRxChar = rxChar;
 800609a:	4b08      	ldr	r3, [pc, #32]	; (80060bc <HAL_UART_RxCpltCallback+0x208>)
 800609c:	781a      	ldrb	r2, [r3, #0]
 800609e:	4b08      	ldr	r3, [pc, #32]	; (80060c0 <HAL_UART_RxCpltCallback+0x20c>)
 80060a0:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart1, &rxChar, 1);
 80060a2:	2201      	movs	r2, #1
 80060a4:	4905      	ldr	r1, [pc, #20]	; (80060bc <HAL_UART_RxCpltCallback+0x208>)
 80060a6:	480d      	ldr	r0, [pc, #52]	; (80060dc <HAL_UART_RxCpltCallback+0x228>)
 80060a8:	f003 fd3e 	bl	8009b28 <HAL_UART_Receive_IT>
}
 80060ac:	bf00      	nop
 80060ae:	3710      	adds	r7, #16
 80060b0:	46bd      	mov	sp, r7
 80060b2:	bd80      	pop	{r7, pc}
 80060b4:	40004c00 	.word	0x40004c00
 80060b8:	200005fe 	.word	0x200005fe
 80060bc:	200005fc 	.word	0x200005fc
 80060c0:	200005fd 	.word	0x200005fd
 80060c4:	200003fc 	.word	0x200003fc
 80060c8:	20000594 	.word	0x20000594
 80060cc:	200003f8 	.word	0x200003f8
 80060d0:	20000504 	.word	0x20000504
 80060d4:	40013800 	.word	0x40013800
 80060d8:	200005c8 	.word	0x200005c8
 80060dc:	20000474 	.word	0x20000474

080060e0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80060e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006118 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80060e4:	f7ff fda6 	bl	8005c34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80060e8:	480c      	ldr	r0, [pc, #48]	; (800611c <LoopForever+0x6>)
  ldr r1, =_edata
 80060ea:	490d      	ldr	r1, [pc, #52]	; (8006120 <LoopForever+0xa>)
  ldr r2, =_sidata
 80060ec:	4a0d      	ldr	r2, [pc, #52]	; (8006124 <LoopForever+0xe>)
  movs r3, #0
 80060ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80060f0:	e002      	b.n	80060f8 <LoopCopyDataInit>

080060f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80060f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80060f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80060f6:	3304      	adds	r3, #4

080060f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80060f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80060fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80060fc:	d3f9      	bcc.n	80060f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80060fe:	4a0a      	ldr	r2, [pc, #40]	; (8006128 <LoopForever+0x12>)
  ldr r4, =_ebss
 8006100:	4c0a      	ldr	r4, [pc, #40]	; (800612c <LoopForever+0x16>)
  movs r3, #0
 8006102:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006104:	e001      	b.n	800610a <LoopFillZerobss>

08006106 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006106:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006108:	3204      	adds	r2, #4

0800610a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800610a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800610c:	d3fb      	bcc.n	8006106 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800610e:	f009 fd13 	bl	800fb38 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8006112:	f7fe f8e1 	bl	80042d8 <main>

08006116 <LoopForever>:

LoopForever:
    b LoopForever
 8006116:	e7fe      	b.n	8006116 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8006118:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 800611c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006120:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8006124:	08014c84 	.word	0x08014c84
  ldr r2, =_sbss
 8006128:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 800612c:	20006364 	.word	0x20006364

08006130 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8006130:	e7fe      	b.n	8006130 <ADC1_IRQHandler>

08006132 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006132:	b580      	push	{r7, lr}
 8006134:	b082      	sub	sp, #8
 8006136:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8006138:	2300      	movs	r3, #0
 800613a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800613c:	2003      	movs	r0, #3
 800613e:	f000 f902 	bl	8006346 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006142:	200f      	movs	r0, #15
 8006144:	f7ff fbcc 	bl	80058e0 <HAL_InitTick>
 8006148:	4603      	mov	r3, r0
 800614a:	2b00      	cmp	r3, #0
 800614c:	d002      	beq.n	8006154 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800614e:	2301      	movs	r3, #1
 8006150:	71fb      	strb	r3, [r7, #7]
 8006152:	e001      	b.n	8006158 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8006154:	f7ff f9b0 	bl	80054b8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8006158:	79fb      	ldrb	r3, [r7, #7]
}
 800615a:	4618      	mov	r0, r3
 800615c:	3708      	adds	r7, #8
 800615e:	46bd      	mov	sp, r7
 8006160:	bd80      	pop	{r7, pc}
	...

08006164 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006164:	b480      	push	{r7}
 8006166:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8006168:	4b06      	ldr	r3, [pc, #24]	; (8006184 <HAL_IncTick+0x20>)
 800616a:	781b      	ldrb	r3, [r3, #0]
 800616c:	461a      	mov	r2, r3
 800616e:	4b06      	ldr	r3, [pc, #24]	; (8006188 <HAL_IncTick+0x24>)
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4413      	add	r3, r2
 8006174:	4a04      	ldr	r2, [pc, #16]	; (8006188 <HAL_IncTick+0x24>)
 8006176:	6013      	str	r3, [r2, #0]
}
 8006178:	bf00      	nop
 800617a:	46bd      	mov	sp, r7
 800617c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006180:	4770      	bx	lr
 8006182:	bf00      	nop
 8006184:	20000018 	.word	0x20000018
 8006188:	20000600 	.word	0x20000600

0800618c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800618c:	b480      	push	{r7}
 800618e:	af00      	add	r7, sp, #0
  return uwTick;
 8006190:	4b03      	ldr	r3, [pc, #12]	; (80061a0 <HAL_GetTick+0x14>)
 8006192:	681b      	ldr	r3, [r3, #0]
}
 8006194:	4618      	mov	r0, r3
 8006196:	46bd      	mov	sp, r7
 8006198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619c:	4770      	bx	lr
 800619e:	bf00      	nop
 80061a0:	20000600 	.word	0x20000600

080061a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b084      	sub	sp, #16
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80061ac:	f7ff ffee 	bl	800618c <HAL_GetTick>
 80061b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061bc:	d005      	beq.n	80061ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80061be:	4b0a      	ldr	r3, [pc, #40]	; (80061e8 <HAL_Delay+0x44>)
 80061c0:	781b      	ldrb	r3, [r3, #0]
 80061c2:	461a      	mov	r2, r3
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	4413      	add	r3, r2
 80061c8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80061ca:	bf00      	nop
 80061cc:	f7ff ffde 	bl	800618c <HAL_GetTick>
 80061d0:	4602      	mov	r2, r0
 80061d2:	68bb      	ldr	r3, [r7, #8]
 80061d4:	1ad3      	subs	r3, r2, r3
 80061d6:	68fa      	ldr	r2, [r7, #12]
 80061d8:	429a      	cmp	r2, r3
 80061da:	d8f7      	bhi.n	80061cc <HAL_Delay+0x28>
  {
  }
}
 80061dc:	bf00      	nop
 80061de:	bf00      	nop
 80061e0:	3710      	adds	r7, #16
 80061e2:	46bd      	mov	sp, r7
 80061e4:	bd80      	pop	{r7, pc}
 80061e6:	bf00      	nop
 80061e8:	20000018 	.word	0x20000018

080061ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80061ec:	b480      	push	{r7}
 80061ee:	b085      	sub	sp, #20
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	f003 0307 	and.w	r3, r3, #7
 80061fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80061fc:	4b0c      	ldr	r3, [pc, #48]	; (8006230 <__NVIC_SetPriorityGrouping+0x44>)
 80061fe:	68db      	ldr	r3, [r3, #12]
 8006200:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006202:	68ba      	ldr	r2, [r7, #8]
 8006204:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006208:	4013      	ands	r3, r2
 800620a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006210:	68bb      	ldr	r3, [r7, #8]
 8006212:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006214:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006218:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800621c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800621e:	4a04      	ldr	r2, [pc, #16]	; (8006230 <__NVIC_SetPriorityGrouping+0x44>)
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	60d3      	str	r3, [r2, #12]
}
 8006224:	bf00      	nop
 8006226:	3714      	adds	r7, #20
 8006228:	46bd      	mov	sp, r7
 800622a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622e:	4770      	bx	lr
 8006230:	e000ed00 	.word	0xe000ed00

08006234 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006234:	b480      	push	{r7}
 8006236:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006238:	4b04      	ldr	r3, [pc, #16]	; (800624c <__NVIC_GetPriorityGrouping+0x18>)
 800623a:	68db      	ldr	r3, [r3, #12]
 800623c:	0a1b      	lsrs	r3, r3, #8
 800623e:	f003 0307 	and.w	r3, r3, #7
}
 8006242:	4618      	mov	r0, r3
 8006244:	46bd      	mov	sp, r7
 8006246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624a:	4770      	bx	lr
 800624c:	e000ed00 	.word	0xe000ed00

08006250 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006250:	b480      	push	{r7}
 8006252:	b083      	sub	sp, #12
 8006254:	af00      	add	r7, sp, #0
 8006256:	4603      	mov	r3, r0
 8006258:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800625a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800625e:	2b00      	cmp	r3, #0
 8006260:	db0b      	blt.n	800627a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006262:	79fb      	ldrb	r3, [r7, #7]
 8006264:	f003 021f 	and.w	r2, r3, #31
 8006268:	4907      	ldr	r1, [pc, #28]	; (8006288 <__NVIC_EnableIRQ+0x38>)
 800626a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800626e:	095b      	lsrs	r3, r3, #5
 8006270:	2001      	movs	r0, #1
 8006272:	fa00 f202 	lsl.w	r2, r0, r2
 8006276:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800627a:	bf00      	nop
 800627c:	370c      	adds	r7, #12
 800627e:	46bd      	mov	sp, r7
 8006280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006284:	4770      	bx	lr
 8006286:	bf00      	nop
 8006288:	e000e100 	.word	0xe000e100

0800628c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800628c:	b480      	push	{r7}
 800628e:	b083      	sub	sp, #12
 8006290:	af00      	add	r7, sp, #0
 8006292:	4603      	mov	r3, r0
 8006294:	6039      	str	r1, [r7, #0]
 8006296:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006298:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800629c:	2b00      	cmp	r3, #0
 800629e:	db0a      	blt.n	80062b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	b2da      	uxtb	r2, r3
 80062a4:	490c      	ldr	r1, [pc, #48]	; (80062d8 <__NVIC_SetPriority+0x4c>)
 80062a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80062aa:	0112      	lsls	r2, r2, #4
 80062ac:	b2d2      	uxtb	r2, r2
 80062ae:	440b      	add	r3, r1
 80062b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80062b4:	e00a      	b.n	80062cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	b2da      	uxtb	r2, r3
 80062ba:	4908      	ldr	r1, [pc, #32]	; (80062dc <__NVIC_SetPriority+0x50>)
 80062bc:	79fb      	ldrb	r3, [r7, #7]
 80062be:	f003 030f 	and.w	r3, r3, #15
 80062c2:	3b04      	subs	r3, #4
 80062c4:	0112      	lsls	r2, r2, #4
 80062c6:	b2d2      	uxtb	r2, r2
 80062c8:	440b      	add	r3, r1
 80062ca:	761a      	strb	r2, [r3, #24]
}
 80062cc:	bf00      	nop
 80062ce:	370c      	adds	r7, #12
 80062d0:	46bd      	mov	sp, r7
 80062d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d6:	4770      	bx	lr
 80062d8:	e000e100 	.word	0xe000e100
 80062dc:	e000ed00 	.word	0xe000ed00

080062e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80062e0:	b480      	push	{r7}
 80062e2:	b089      	sub	sp, #36	; 0x24
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	60f8      	str	r0, [r7, #12]
 80062e8:	60b9      	str	r1, [r7, #8]
 80062ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	f003 0307 	and.w	r3, r3, #7
 80062f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80062f4:	69fb      	ldr	r3, [r7, #28]
 80062f6:	f1c3 0307 	rsb	r3, r3, #7
 80062fa:	2b04      	cmp	r3, #4
 80062fc:	bf28      	it	cs
 80062fe:	2304      	movcs	r3, #4
 8006300:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006302:	69fb      	ldr	r3, [r7, #28]
 8006304:	3304      	adds	r3, #4
 8006306:	2b06      	cmp	r3, #6
 8006308:	d902      	bls.n	8006310 <NVIC_EncodePriority+0x30>
 800630a:	69fb      	ldr	r3, [r7, #28]
 800630c:	3b03      	subs	r3, #3
 800630e:	e000      	b.n	8006312 <NVIC_EncodePriority+0x32>
 8006310:	2300      	movs	r3, #0
 8006312:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006314:	f04f 32ff 	mov.w	r2, #4294967295
 8006318:	69bb      	ldr	r3, [r7, #24]
 800631a:	fa02 f303 	lsl.w	r3, r2, r3
 800631e:	43da      	mvns	r2, r3
 8006320:	68bb      	ldr	r3, [r7, #8]
 8006322:	401a      	ands	r2, r3
 8006324:	697b      	ldr	r3, [r7, #20]
 8006326:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006328:	f04f 31ff 	mov.w	r1, #4294967295
 800632c:	697b      	ldr	r3, [r7, #20]
 800632e:	fa01 f303 	lsl.w	r3, r1, r3
 8006332:	43d9      	mvns	r1, r3
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006338:	4313      	orrs	r3, r2
         );
}
 800633a:	4618      	mov	r0, r3
 800633c:	3724      	adds	r7, #36	; 0x24
 800633e:	46bd      	mov	sp, r7
 8006340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006344:	4770      	bx	lr

08006346 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006346:	b580      	push	{r7, lr}
 8006348:	b082      	sub	sp, #8
 800634a:	af00      	add	r7, sp, #0
 800634c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800634e:	6878      	ldr	r0, [r7, #4]
 8006350:	f7ff ff4c 	bl	80061ec <__NVIC_SetPriorityGrouping>
}
 8006354:	bf00      	nop
 8006356:	3708      	adds	r7, #8
 8006358:	46bd      	mov	sp, r7
 800635a:	bd80      	pop	{r7, pc}

0800635c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b086      	sub	sp, #24
 8006360:	af00      	add	r7, sp, #0
 8006362:	4603      	mov	r3, r0
 8006364:	60b9      	str	r1, [r7, #8]
 8006366:	607a      	str	r2, [r7, #4]
 8006368:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800636a:	2300      	movs	r3, #0
 800636c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800636e:	f7ff ff61 	bl	8006234 <__NVIC_GetPriorityGrouping>
 8006372:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006374:	687a      	ldr	r2, [r7, #4]
 8006376:	68b9      	ldr	r1, [r7, #8]
 8006378:	6978      	ldr	r0, [r7, #20]
 800637a:	f7ff ffb1 	bl	80062e0 <NVIC_EncodePriority>
 800637e:	4602      	mov	r2, r0
 8006380:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006384:	4611      	mov	r1, r2
 8006386:	4618      	mov	r0, r3
 8006388:	f7ff ff80 	bl	800628c <__NVIC_SetPriority>
}
 800638c:	bf00      	nop
 800638e:	3718      	adds	r7, #24
 8006390:	46bd      	mov	sp, r7
 8006392:	bd80      	pop	{r7, pc}

08006394 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b082      	sub	sp, #8
 8006398:	af00      	add	r7, sp, #0
 800639a:	4603      	mov	r3, r0
 800639c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800639e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80063a2:	4618      	mov	r0, r3
 80063a4:	f7ff ff54 	bl	8006250 <__NVIC_EnableIRQ>
}
 80063a8:	bf00      	nop
 80063aa:	3708      	adds	r7, #8
 80063ac:	46bd      	mov	sp, r7
 80063ae:	bd80      	pop	{r7, pc}

080063b0 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80063b0:	b480      	push	{r7}
 80063b2:	b085      	sub	sp, #20
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80063b8:	2300      	movs	r3, #0
 80063ba:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80063c2:	b2db      	uxtb	r3, r3
 80063c4:	2b02      	cmp	r3, #2
 80063c6:	d008      	beq.n	80063da <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2204      	movs	r2, #4
 80063cc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2200      	movs	r2, #0
 80063d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80063d6:	2301      	movs	r3, #1
 80063d8:	e040      	b.n	800645c <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	681a      	ldr	r2, [r3, #0]
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f022 020e 	bic.w	r2, r2, #14
 80063e8:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063ee:	681a      	ldr	r2, [r3, #0]
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80063f8:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	681a      	ldr	r2, [r3, #0]
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f022 0201 	bic.w	r2, r2, #1
 8006408:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800640e:	f003 021c 	and.w	r2, r3, #28
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006416:	2101      	movs	r1, #1
 8006418:	fa01 f202 	lsl.w	r2, r1, r2
 800641c:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006422:	687a      	ldr	r2, [r7, #4]
 8006424:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006426:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800642c:	2b00      	cmp	r3, #0
 800642e:	d00c      	beq.n	800644a <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006434:	681a      	ldr	r2, [r3, #0]
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800643a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800643e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006444:	687a      	ldr	r2, [r7, #4]
 8006446:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8006448:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2201      	movs	r2, #1
 800644e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2200      	movs	r2, #0
 8006456:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800645a:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800645c:	4618      	mov	r0, r3
 800645e:	3714      	adds	r7, #20
 8006460:	46bd      	mov	sp, r7
 8006462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006466:	4770      	bx	lr

08006468 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b084      	sub	sp, #16
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006470:	2300      	movs	r3, #0
 8006472:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800647a:	b2db      	uxtb	r3, r3
 800647c:	2b02      	cmp	r3, #2
 800647e:	d005      	beq.n	800648c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2204      	movs	r2, #4
 8006484:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8006486:	2301      	movs	r3, #1
 8006488:	73fb      	strb	r3, [r7, #15]
 800648a:	e047      	b.n	800651c <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	681a      	ldr	r2, [r3, #0]
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f022 020e 	bic.w	r2, r2, #14
 800649a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	681a      	ldr	r2, [r3, #0]
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f022 0201 	bic.w	r2, r2, #1
 80064aa:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064b0:	681a      	ldr	r2, [r3, #0]
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064b6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80064ba:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064c0:	f003 021c 	and.w	r2, r3, #28
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064c8:	2101      	movs	r1, #1
 80064ca:	fa01 f202 	lsl.w	r2, r1, r2
 80064ce:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064d4:	687a      	ldr	r2, [r7, #4]
 80064d6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80064d8:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d00c      	beq.n	80064fc <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064e6:	681a      	ldr	r2, [r3, #0]
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80064f0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064f6:	687a      	ldr	r2, [r7, #4]
 80064f8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80064fa:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2201      	movs	r2, #1
 8006500:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2200      	movs	r2, #0
 8006508:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006510:	2b00      	cmp	r3, #0
 8006512:	d003      	beq.n	800651c <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006518:	6878      	ldr	r0, [r7, #4]
 800651a:	4798      	blx	r3
    }
  }
  return status;
 800651c:	7bfb      	ldrb	r3, [r7, #15]
}
 800651e:	4618      	mov	r0, r3
 8006520:	3710      	adds	r7, #16
 8006522:	46bd      	mov	sp, r7
 8006524:	bd80      	pop	{r7, pc}
	...

08006528 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006528:	b480      	push	{r7}
 800652a:	b087      	sub	sp, #28
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
 8006530:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006532:	2300      	movs	r3, #0
 8006534:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006536:	e166      	b.n	8006806 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	681a      	ldr	r2, [r3, #0]
 800653c:	2101      	movs	r1, #1
 800653e:	697b      	ldr	r3, [r7, #20]
 8006540:	fa01 f303 	lsl.w	r3, r1, r3
 8006544:	4013      	ands	r3, r2
 8006546:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	2b00      	cmp	r3, #0
 800654c:	f000 8158 	beq.w	8006800 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	685b      	ldr	r3, [r3, #4]
 8006554:	f003 0303 	and.w	r3, r3, #3
 8006558:	2b01      	cmp	r3, #1
 800655a:	d005      	beq.n	8006568 <HAL_GPIO_Init+0x40>
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	685b      	ldr	r3, [r3, #4]
 8006560:	f003 0303 	and.w	r3, r3, #3
 8006564:	2b02      	cmp	r3, #2
 8006566:	d130      	bne.n	80065ca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	689b      	ldr	r3, [r3, #8]
 800656c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800656e:	697b      	ldr	r3, [r7, #20]
 8006570:	005b      	lsls	r3, r3, #1
 8006572:	2203      	movs	r2, #3
 8006574:	fa02 f303 	lsl.w	r3, r2, r3
 8006578:	43db      	mvns	r3, r3
 800657a:	693a      	ldr	r2, [r7, #16]
 800657c:	4013      	ands	r3, r2
 800657e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	68da      	ldr	r2, [r3, #12]
 8006584:	697b      	ldr	r3, [r7, #20]
 8006586:	005b      	lsls	r3, r3, #1
 8006588:	fa02 f303 	lsl.w	r3, r2, r3
 800658c:	693a      	ldr	r2, [r7, #16]
 800658e:	4313      	orrs	r3, r2
 8006590:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	693a      	ldr	r2, [r7, #16]
 8006596:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	685b      	ldr	r3, [r3, #4]
 800659c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800659e:	2201      	movs	r2, #1
 80065a0:	697b      	ldr	r3, [r7, #20]
 80065a2:	fa02 f303 	lsl.w	r3, r2, r3
 80065a6:	43db      	mvns	r3, r3
 80065a8:	693a      	ldr	r2, [r7, #16]
 80065aa:	4013      	ands	r3, r2
 80065ac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	685b      	ldr	r3, [r3, #4]
 80065b2:	091b      	lsrs	r3, r3, #4
 80065b4:	f003 0201 	and.w	r2, r3, #1
 80065b8:	697b      	ldr	r3, [r7, #20]
 80065ba:	fa02 f303 	lsl.w	r3, r2, r3
 80065be:	693a      	ldr	r2, [r7, #16]
 80065c0:	4313      	orrs	r3, r2
 80065c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	693a      	ldr	r2, [r7, #16]
 80065c8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	685b      	ldr	r3, [r3, #4]
 80065ce:	f003 0303 	and.w	r3, r3, #3
 80065d2:	2b03      	cmp	r3, #3
 80065d4:	d017      	beq.n	8006606 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	68db      	ldr	r3, [r3, #12]
 80065da:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80065dc:	697b      	ldr	r3, [r7, #20]
 80065de:	005b      	lsls	r3, r3, #1
 80065e0:	2203      	movs	r2, #3
 80065e2:	fa02 f303 	lsl.w	r3, r2, r3
 80065e6:	43db      	mvns	r3, r3
 80065e8:	693a      	ldr	r2, [r7, #16]
 80065ea:	4013      	ands	r3, r2
 80065ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	689a      	ldr	r2, [r3, #8]
 80065f2:	697b      	ldr	r3, [r7, #20]
 80065f4:	005b      	lsls	r3, r3, #1
 80065f6:	fa02 f303 	lsl.w	r3, r2, r3
 80065fa:	693a      	ldr	r2, [r7, #16]
 80065fc:	4313      	orrs	r3, r2
 80065fe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	693a      	ldr	r2, [r7, #16]
 8006604:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	685b      	ldr	r3, [r3, #4]
 800660a:	f003 0303 	and.w	r3, r3, #3
 800660e:	2b02      	cmp	r3, #2
 8006610:	d123      	bne.n	800665a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8006612:	697b      	ldr	r3, [r7, #20]
 8006614:	08da      	lsrs	r2, r3, #3
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	3208      	adds	r2, #8
 800661a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800661e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006620:	697b      	ldr	r3, [r7, #20]
 8006622:	f003 0307 	and.w	r3, r3, #7
 8006626:	009b      	lsls	r3, r3, #2
 8006628:	220f      	movs	r2, #15
 800662a:	fa02 f303 	lsl.w	r3, r2, r3
 800662e:	43db      	mvns	r3, r3
 8006630:	693a      	ldr	r2, [r7, #16]
 8006632:	4013      	ands	r3, r2
 8006634:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	691a      	ldr	r2, [r3, #16]
 800663a:	697b      	ldr	r3, [r7, #20]
 800663c:	f003 0307 	and.w	r3, r3, #7
 8006640:	009b      	lsls	r3, r3, #2
 8006642:	fa02 f303 	lsl.w	r3, r2, r3
 8006646:	693a      	ldr	r2, [r7, #16]
 8006648:	4313      	orrs	r3, r2
 800664a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800664c:	697b      	ldr	r3, [r7, #20]
 800664e:	08da      	lsrs	r2, r3, #3
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	3208      	adds	r2, #8
 8006654:	6939      	ldr	r1, [r7, #16]
 8006656:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8006660:	697b      	ldr	r3, [r7, #20]
 8006662:	005b      	lsls	r3, r3, #1
 8006664:	2203      	movs	r2, #3
 8006666:	fa02 f303 	lsl.w	r3, r2, r3
 800666a:	43db      	mvns	r3, r3
 800666c:	693a      	ldr	r2, [r7, #16]
 800666e:	4013      	ands	r3, r2
 8006670:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	685b      	ldr	r3, [r3, #4]
 8006676:	f003 0203 	and.w	r2, r3, #3
 800667a:	697b      	ldr	r3, [r7, #20]
 800667c:	005b      	lsls	r3, r3, #1
 800667e:	fa02 f303 	lsl.w	r3, r2, r3
 8006682:	693a      	ldr	r2, [r7, #16]
 8006684:	4313      	orrs	r3, r2
 8006686:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	693a      	ldr	r2, [r7, #16]
 800668c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	685b      	ldr	r3, [r3, #4]
 8006692:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006696:	2b00      	cmp	r3, #0
 8006698:	f000 80b2 	beq.w	8006800 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800669c:	4b61      	ldr	r3, [pc, #388]	; (8006824 <HAL_GPIO_Init+0x2fc>)
 800669e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066a0:	4a60      	ldr	r2, [pc, #384]	; (8006824 <HAL_GPIO_Init+0x2fc>)
 80066a2:	f043 0301 	orr.w	r3, r3, #1
 80066a6:	6613      	str	r3, [r2, #96]	; 0x60
 80066a8:	4b5e      	ldr	r3, [pc, #376]	; (8006824 <HAL_GPIO_Init+0x2fc>)
 80066aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066ac:	f003 0301 	and.w	r3, r3, #1
 80066b0:	60bb      	str	r3, [r7, #8]
 80066b2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80066b4:	4a5c      	ldr	r2, [pc, #368]	; (8006828 <HAL_GPIO_Init+0x300>)
 80066b6:	697b      	ldr	r3, [r7, #20]
 80066b8:	089b      	lsrs	r3, r3, #2
 80066ba:	3302      	adds	r3, #2
 80066bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80066c0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80066c2:	697b      	ldr	r3, [r7, #20]
 80066c4:	f003 0303 	and.w	r3, r3, #3
 80066c8:	009b      	lsls	r3, r3, #2
 80066ca:	220f      	movs	r2, #15
 80066cc:	fa02 f303 	lsl.w	r3, r2, r3
 80066d0:	43db      	mvns	r3, r3
 80066d2:	693a      	ldr	r2, [r7, #16]
 80066d4:	4013      	ands	r3, r2
 80066d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80066de:	d02b      	beq.n	8006738 <HAL_GPIO_Init+0x210>
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	4a52      	ldr	r2, [pc, #328]	; (800682c <HAL_GPIO_Init+0x304>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d025      	beq.n	8006734 <HAL_GPIO_Init+0x20c>
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	4a51      	ldr	r2, [pc, #324]	; (8006830 <HAL_GPIO_Init+0x308>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d01f      	beq.n	8006730 <HAL_GPIO_Init+0x208>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	4a50      	ldr	r2, [pc, #320]	; (8006834 <HAL_GPIO_Init+0x30c>)
 80066f4:	4293      	cmp	r3, r2
 80066f6:	d019      	beq.n	800672c <HAL_GPIO_Init+0x204>
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	4a4f      	ldr	r2, [pc, #316]	; (8006838 <HAL_GPIO_Init+0x310>)
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d013      	beq.n	8006728 <HAL_GPIO_Init+0x200>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	4a4e      	ldr	r2, [pc, #312]	; (800683c <HAL_GPIO_Init+0x314>)
 8006704:	4293      	cmp	r3, r2
 8006706:	d00d      	beq.n	8006724 <HAL_GPIO_Init+0x1fc>
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	4a4d      	ldr	r2, [pc, #308]	; (8006840 <HAL_GPIO_Init+0x318>)
 800670c:	4293      	cmp	r3, r2
 800670e:	d007      	beq.n	8006720 <HAL_GPIO_Init+0x1f8>
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	4a4c      	ldr	r2, [pc, #304]	; (8006844 <HAL_GPIO_Init+0x31c>)
 8006714:	4293      	cmp	r3, r2
 8006716:	d101      	bne.n	800671c <HAL_GPIO_Init+0x1f4>
 8006718:	2307      	movs	r3, #7
 800671a:	e00e      	b.n	800673a <HAL_GPIO_Init+0x212>
 800671c:	2308      	movs	r3, #8
 800671e:	e00c      	b.n	800673a <HAL_GPIO_Init+0x212>
 8006720:	2306      	movs	r3, #6
 8006722:	e00a      	b.n	800673a <HAL_GPIO_Init+0x212>
 8006724:	2305      	movs	r3, #5
 8006726:	e008      	b.n	800673a <HAL_GPIO_Init+0x212>
 8006728:	2304      	movs	r3, #4
 800672a:	e006      	b.n	800673a <HAL_GPIO_Init+0x212>
 800672c:	2303      	movs	r3, #3
 800672e:	e004      	b.n	800673a <HAL_GPIO_Init+0x212>
 8006730:	2302      	movs	r3, #2
 8006732:	e002      	b.n	800673a <HAL_GPIO_Init+0x212>
 8006734:	2301      	movs	r3, #1
 8006736:	e000      	b.n	800673a <HAL_GPIO_Init+0x212>
 8006738:	2300      	movs	r3, #0
 800673a:	697a      	ldr	r2, [r7, #20]
 800673c:	f002 0203 	and.w	r2, r2, #3
 8006740:	0092      	lsls	r2, r2, #2
 8006742:	4093      	lsls	r3, r2
 8006744:	693a      	ldr	r2, [r7, #16]
 8006746:	4313      	orrs	r3, r2
 8006748:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800674a:	4937      	ldr	r1, [pc, #220]	; (8006828 <HAL_GPIO_Init+0x300>)
 800674c:	697b      	ldr	r3, [r7, #20]
 800674e:	089b      	lsrs	r3, r3, #2
 8006750:	3302      	adds	r3, #2
 8006752:	693a      	ldr	r2, [r7, #16]
 8006754:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006758:	4b3b      	ldr	r3, [pc, #236]	; (8006848 <HAL_GPIO_Init+0x320>)
 800675a:	689b      	ldr	r3, [r3, #8]
 800675c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	43db      	mvns	r3, r3
 8006762:	693a      	ldr	r2, [r7, #16]
 8006764:	4013      	ands	r3, r2
 8006766:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	685b      	ldr	r3, [r3, #4]
 800676c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006770:	2b00      	cmp	r3, #0
 8006772:	d003      	beq.n	800677c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8006774:	693a      	ldr	r2, [r7, #16]
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	4313      	orrs	r3, r2
 800677a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800677c:	4a32      	ldr	r2, [pc, #200]	; (8006848 <HAL_GPIO_Init+0x320>)
 800677e:	693b      	ldr	r3, [r7, #16]
 8006780:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8006782:	4b31      	ldr	r3, [pc, #196]	; (8006848 <HAL_GPIO_Init+0x320>)
 8006784:	68db      	ldr	r3, [r3, #12]
 8006786:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	43db      	mvns	r3, r3
 800678c:	693a      	ldr	r2, [r7, #16]
 800678e:	4013      	ands	r3, r2
 8006790:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	685b      	ldr	r3, [r3, #4]
 8006796:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800679a:	2b00      	cmp	r3, #0
 800679c:	d003      	beq.n	80067a6 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800679e:	693a      	ldr	r2, [r7, #16]
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	4313      	orrs	r3, r2
 80067a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80067a6:	4a28      	ldr	r2, [pc, #160]	; (8006848 <HAL_GPIO_Init+0x320>)
 80067a8:	693b      	ldr	r3, [r7, #16]
 80067aa:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80067ac:	4b26      	ldr	r3, [pc, #152]	; (8006848 <HAL_GPIO_Init+0x320>)
 80067ae:	685b      	ldr	r3, [r3, #4]
 80067b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	43db      	mvns	r3, r3
 80067b6:	693a      	ldr	r2, [r7, #16]
 80067b8:	4013      	ands	r3, r2
 80067ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	685b      	ldr	r3, [r3, #4]
 80067c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d003      	beq.n	80067d0 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80067c8:	693a      	ldr	r2, [r7, #16]
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	4313      	orrs	r3, r2
 80067ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80067d0:	4a1d      	ldr	r2, [pc, #116]	; (8006848 <HAL_GPIO_Init+0x320>)
 80067d2:	693b      	ldr	r3, [r7, #16]
 80067d4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80067d6:	4b1c      	ldr	r3, [pc, #112]	; (8006848 <HAL_GPIO_Init+0x320>)
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	43db      	mvns	r3, r3
 80067e0:	693a      	ldr	r2, [r7, #16]
 80067e2:	4013      	ands	r3, r2
 80067e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	685b      	ldr	r3, [r3, #4]
 80067ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d003      	beq.n	80067fa <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80067f2:	693a      	ldr	r2, [r7, #16]
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	4313      	orrs	r3, r2
 80067f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80067fa:	4a13      	ldr	r2, [pc, #76]	; (8006848 <HAL_GPIO_Init+0x320>)
 80067fc:	693b      	ldr	r3, [r7, #16]
 80067fe:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006800:	697b      	ldr	r3, [r7, #20]
 8006802:	3301      	adds	r3, #1
 8006804:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	681a      	ldr	r2, [r3, #0]
 800680a:	697b      	ldr	r3, [r7, #20]
 800680c:	fa22 f303 	lsr.w	r3, r2, r3
 8006810:	2b00      	cmp	r3, #0
 8006812:	f47f ae91 	bne.w	8006538 <HAL_GPIO_Init+0x10>
  }
}
 8006816:	bf00      	nop
 8006818:	bf00      	nop
 800681a:	371c      	adds	r7, #28
 800681c:	46bd      	mov	sp, r7
 800681e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006822:	4770      	bx	lr
 8006824:	40021000 	.word	0x40021000
 8006828:	40010000 	.word	0x40010000
 800682c:	48000400 	.word	0x48000400
 8006830:	48000800 	.word	0x48000800
 8006834:	48000c00 	.word	0x48000c00
 8006838:	48001000 	.word	0x48001000
 800683c:	48001400 	.word	0x48001400
 8006840:	48001800 	.word	0x48001800
 8006844:	48001c00 	.word	0x48001c00
 8006848:	40010400 	.word	0x40010400

0800684c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800684c:	b480      	push	{r7}
 800684e:	b083      	sub	sp, #12
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
 8006854:	460b      	mov	r3, r1
 8006856:	807b      	strh	r3, [r7, #2]
 8006858:	4613      	mov	r3, r2
 800685a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800685c:	787b      	ldrb	r3, [r7, #1]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d003      	beq.n	800686a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006862:	887a      	ldrh	r2, [r7, #2]
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006868:	e002      	b.n	8006870 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800686a:	887a      	ldrh	r2, [r7, #2]
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006870:	bf00      	nop
 8006872:	370c      	adds	r7, #12
 8006874:	46bd      	mov	sp, r7
 8006876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687a:	4770      	bx	lr

0800687c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800687c:	b480      	push	{r7}
 800687e:	b085      	sub	sp, #20
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
 8006884:	460b      	mov	r3, r1
 8006886:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	695b      	ldr	r3, [r3, #20]
 800688c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800688e:	887a      	ldrh	r2, [r7, #2]
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	4013      	ands	r3, r2
 8006894:	041a      	lsls	r2, r3, #16
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	43d9      	mvns	r1, r3
 800689a:	887b      	ldrh	r3, [r7, #2]
 800689c:	400b      	ands	r3, r1
 800689e:	431a      	orrs	r2, r3
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	619a      	str	r2, [r3, #24]
}
 80068a4:	bf00      	nop
 80068a6:	3714      	adds	r7, #20
 80068a8:	46bd      	mov	sp, r7
 80068aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ae:	4770      	bx	lr

080068b0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b082      	sub	sp, #8
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	4603      	mov	r3, r0
 80068b8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80068ba:	4b08      	ldr	r3, [pc, #32]	; (80068dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80068bc:	695a      	ldr	r2, [r3, #20]
 80068be:	88fb      	ldrh	r3, [r7, #6]
 80068c0:	4013      	ands	r3, r2
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d006      	beq.n	80068d4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80068c6:	4a05      	ldr	r2, [pc, #20]	; (80068dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80068c8:	88fb      	ldrh	r3, [r7, #6]
 80068ca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80068cc:	88fb      	ldrh	r3, [r7, #6]
 80068ce:	4618      	mov	r0, r3
 80068d0:	f000 f806 	bl	80068e0 <HAL_GPIO_EXTI_Callback>
  }
}
 80068d4:	bf00      	nop
 80068d6:	3708      	adds	r7, #8
 80068d8:	46bd      	mov	sp, r7
 80068da:	bd80      	pop	{r7, pc}
 80068dc:	40010400 	.word	0x40010400

080068e0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80068e0:	b480      	push	{r7}
 80068e2:	b083      	sub	sp, #12
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	4603      	mov	r3, r0
 80068e8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80068ea:	bf00      	nop
 80068ec:	370c      	adds	r7, #12
 80068ee:	46bd      	mov	sp, r7
 80068f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f4:	4770      	bx	lr

080068f6 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80068f6:	b580      	push	{r7, lr}
 80068f8:	b082      	sub	sp, #8
 80068fa:	af00      	add	r7, sp, #0
 80068fc:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d101      	bne.n	8006908 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006904:	2301      	movs	r3, #1
 8006906:	e081      	b.n	8006a0c <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800690e:	b2db      	uxtb	r3, r3
 8006910:	2b00      	cmp	r3, #0
 8006912:	d106      	bne.n	8006922 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2200      	movs	r2, #0
 8006918:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800691c:	6878      	ldr	r0, [r7, #4]
 800691e:	f7fe fdf3 	bl	8005508 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2224      	movs	r2, #36	; 0x24
 8006926:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	681a      	ldr	r2, [r3, #0]
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f022 0201 	bic.w	r2, r2, #1
 8006938:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	685a      	ldr	r2, [r3, #4]
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006946:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	689a      	ldr	r2, [r3, #8]
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006956:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	68db      	ldr	r3, [r3, #12]
 800695c:	2b01      	cmp	r3, #1
 800695e:	d107      	bne.n	8006970 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	689a      	ldr	r2, [r3, #8]
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800696c:	609a      	str	r2, [r3, #8]
 800696e:	e006      	b.n	800697e <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	689a      	ldr	r2, [r3, #8]
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800697c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	68db      	ldr	r3, [r3, #12]
 8006982:	2b02      	cmp	r3, #2
 8006984:	d104      	bne.n	8006990 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800698e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	685b      	ldr	r3, [r3, #4]
 8006996:	687a      	ldr	r2, [r7, #4]
 8006998:	6812      	ldr	r2, [r2, #0]
 800699a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800699e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069a2:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	68da      	ldr	r2, [r3, #12]
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80069b2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	691a      	ldr	r2, [r3, #16]
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	695b      	ldr	r3, [r3, #20]
 80069bc:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	699b      	ldr	r3, [r3, #24]
 80069c4:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	430a      	orrs	r2, r1
 80069cc:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	69d9      	ldr	r1, [r3, #28]
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6a1a      	ldr	r2, [r3, #32]
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	430a      	orrs	r2, r1
 80069dc:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	681a      	ldr	r2, [r3, #0]
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f042 0201 	orr.w	r2, r2, #1
 80069ec:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2200      	movs	r2, #0
 80069f2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2220      	movs	r2, #32
 80069f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2200      	movs	r2, #0
 8006a00:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2200      	movs	r2, #0
 8006a06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006a0a:	2300      	movs	r3, #0
}
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	3708      	adds	r7, #8
 8006a10:	46bd      	mov	sp, r7
 8006a12:	bd80      	pop	{r7, pc}

08006a14 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b088      	sub	sp, #32
 8006a18:	af02      	add	r7, sp, #8
 8006a1a:	60f8      	str	r0, [r7, #12]
 8006a1c:	607a      	str	r2, [r7, #4]
 8006a1e:	461a      	mov	r2, r3
 8006a20:	460b      	mov	r3, r1
 8006a22:	817b      	strh	r3, [r7, #10]
 8006a24:	4613      	mov	r3, r2
 8006a26:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006a2e:	b2db      	uxtb	r3, r3
 8006a30:	2b20      	cmp	r3, #32
 8006a32:	f040 80da 	bne.w	8006bea <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006a3c:	2b01      	cmp	r3, #1
 8006a3e:	d101      	bne.n	8006a44 <HAL_I2C_Master_Transmit+0x30>
 8006a40:	2302      	movs	r3, #2
 8006a42:	e0d3      	b.n	8006bec <HAL_I2C_Master_Transmit+0x1d8>
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	2201      	movs	r2, #1
 8006a48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006a4c:	f7ff fb9e 	bl	800618c <HAL_GetTick>
 8006a50:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006a52:	697b      	ldr	r3, [r7, #20]
 8006a54:	9300      	str	r3, [sp, #0]
 8006a56:	2319      	movs	r3, #25
 8006a58:	2201      	movs	r2, #1
 8006a5a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006a5e:	68f8      	ldr	r0, [r7, #12]
 8006a60:	f000 fcd6 	bl	8007410 <I2C_WaitOnFlagUntilTimeout>
 8006a64:	4603      	mov	r3, r0
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d001      	beq.n	8006a6e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8006a6a:	2301      	movs	r3, #1
 8006a6c:	e0be      	b.n	8006bec <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	2221      	movs	r2, #33	; 0x21
 8006a72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	2210      	movs	r2, #16
 8006a7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	2200      	movs	r2, #0
 8006a82:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	687a      	ldr	r2, [r7, #4]
 8006a88:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	893a      	ldrh	r2, [r7, #8]
 8006a8e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	2200      	movs	r2, #0
 8006a94:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a9a:	b29b      	uxth	r3, r3
 8006a9c:	2bff      	cmp	r3, #255	; 0xff
 8006a9e:	d90e      	bls.n	8006abe <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	22ff      	movs	r2, #255	; 0xff
 8006aa4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006aaa:	b2da      	uxtb	r2, r3
 8006aac:	8979      	ldrh	r1, [r7, #10]
 8006aae:	4b51      	ldr	r3, [pc, #324]	; (8006bf4 <HAL_I2C_Master_Transmit+0x1e0>)
 8006ab0:	9300      	str	r3, [sp, #0]
 8006ab2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006ab6:	68f8      	ldr	r0, [r7, #12]
 8006ab8:	f000 fecc 	bl	8007854 <I2C_TransferConfig>
 8006abc:	e06c      	b.n	8006b98 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ac2:	b29a      	uxth	r2, r3
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006acc:	b2da      	uxtb	r2, r3
 8006ace:	8979      	ldrh	r1, [r7, #10]
 8006ad0:	4b48      	ldr	r3, [pc, #288]	; (8006bf4 <HAL_I2C_Master_Transmit+0x1e0>)
 8006ad2:	9300      	str	r3, [sp, #0]
 8006ad4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006ad8:	68f8      	ldr	r0, [r7, #12]
 8006ada:	f000 febb 	bl	8007854 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8006ade:	e05b      	b.n	8006b98 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006ae0:	697a      	ldr	r2, [r7, #20]
 8006ae2:	6a39      	ldr	r1, [r7, #32]
 8006ae4:	68f8      	ldr	r0, [r7, #12]
 8006ae6:	f000 fcd3 	bl	8007490 <I2C_WaitOnTXISFlagUntilTimeout>
 8006aea:	4603      	mov	r3, r0
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d001      	beq.n	8006af4 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8006af0:	2301      	movs	r3, #1
 8006af2:	e07b      	b.n	8006bec <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006af8:	781a      	ldrb	r2, [r3, #0]
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b04:	1c5a      	adds	r2, r3, #1
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b0e:	b29b      	uxth	r3, r3
 8006b10:	3b01      	subs	r3, #1
 8006b12:	b29a      	uxth	r2, r3
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b1c:	3b01      	subs	r3, #1
 8006b1e:	b29a      	uxth	r2, r3
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b28:	b29b      	uxth	r3, r3
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d034      	beq.n	8006b98 <HAL_I2C_Master_Transmit+0x184>
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d130      	bne.n	8006b98 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006b36:	697b      	ldr	r3, [r7, #20]
 8006b38:	9300      	str	r3, [sp, #0]
 8006b3a:	6a3b      	ldr	r3, [r7, #32]
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	2180      	movs	r1, #128	; 0x80
 8006b40:	68f8      	ldr	r0, [r7, #12]
 8006b42:	f000 fc65 	bl	8007410 <I2C_WaitOnFlagUntilTimeout>
 8006b46:	4603      	mov	r3, r0
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d001      	beq.n	8006b50 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8006b4c:	2301      	movs	r3, #1
 8006b4e:	e04d      	b.n	8006bec <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b54:	b29b      	uxth	r3, r3
 8006b56:	2bff      	cmp	r3, #255	; 0xff
 8006b58:	d90e      	bls.n	8006b78 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	22ff      	movs	r2, #255	; 0xff
 8006b5e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b64:	b2da      	uxtb	r2, r3
 8006b66:	8979      	ldrh	r1, [r7, #10]
 8006b68:	2300      	movs	r3, #0
 8006b6a:	9300      	str	r3, [sp, #0]
 8006b6c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006b70:	68f8      	ldr	r0, [r7, #12]
 8006b72:	f000 fe6f 	bl	8007854 <I2C_TransferConfig>
 8006b76:	e00f      	b.n	8006b98 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b7c:	b29a      	uxth	r2, r3
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b86:	b2da      	uxtb	r2, r3
 8006b88:	8979      	ldrh	r1, [r7, #10]
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	9300      	str	r3, [sp, #0]
 8006b8e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006b92:	68f8      	ldr	r0, [r7, #12]
 8006b94:	f000 fe5e 	bl	8007854 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b9c:	b29b      	uxth	r3, r3
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d19e      	bne.n	8006ae0 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006ba2:	697a      	ldr	r2, [r7, #20]
 8006ba4:	6a39      	ldr	r1, [r7, #32]
 8006ba6:	68f8      	ldr	r0, [r7, #12]
 8006ba8:	f000 fcb2 	bl	8007510 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006bac:	4603      	mov	r3, r0
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d001      	beq.n	8006bb6 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8006bb2:	2301      	movs	r3, #1
 8006bb4:	e01a      	b.n	8006bec <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	2220      	movs	r2, #32
 8006bbc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	6859      	ldr	r1, [r3, #4]
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681a      	ldr	r2, [r3, #0]
 8006bc8:	4b0b      	ldr	r3, [pc, #44]	; (8006bf8 <HAL_I2C_Master_Transmit+0x1e4>)
 8006bca:	400b      	ands	r3, r1
 8006bcc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	2220      	movs	r2, #32
 8006bd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	2200      	movs	r2, #0
 8006bda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	2200      	movs	r2, #0
 8006be2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006be6:	2300      	movs	r3, #0
 8006be8:	e000      	b.n	8006bec <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8006bea:	2302      	movs	r3, #2
  }
}
 8006bec:	4618      	mov	r0, r3
 8006bee:	3718      	adds	r7, #24
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	bd80      	pop	{r7, pc}
 8006bf4:	80002000 	.word	0x80002000
 8006bf8:	fe00e800 	.word	0xfe00e800

08006bfc <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b088      	sub	sp, #32
 8006c00:	af02      	add	r7, sp, #8
 8006c02:	60f8      	str	r0, [r7, #12]
 8006c04:	607a      	str	r2, [r7, #4]
 8006c06:	461a      	mov	r2, r3
 8006c08:	460b      	mov	r3, r1
 8006c0a:	817b      	strh	r3, [r7, #10]
 8006c0c:	4613      	mov	r3, r2
 8006c0e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006c16:	b2db      	uxtb	r3, r3
 8006c18:	2b20      	cmp	r3, #32
 8006c1a:	f040 80db 	bne.w	8006dd4 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006c24:	2b01      	cmp	r3, #1
 8006c26:	d101      	bne.n	8006c2c <HAL_I2C_Master_Receive+0x30>
 8006c28:	2302      	movs	r3, #2
 8006c2a:	e0d4      	b.n	8006dd6 <HAL_I2C_Master_Receive+0x1da>
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	2201      	movs	r2, #1
 8006c30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006c34:	f7ff faaa 	bl	800618c <HAL_GetTick>
 8006c38:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006c3a:	697b      	ldr	r3, [r7, #20]
 8006c3c:	9300      	str	r3, [sp, #0]
 8006c3e:	2319      	movs	r3, #25
 8006c40:	2201      	movs	r2, #1
 8006c42:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006c46:	68f8      	ldr	r0, [r7, #12]
 8006c48:	f000 fbe2 	bl	8007410 <I2C_WaitOnFlagUntilTimeout>
 8006c4c:	4603      	mov	r3, r0
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d001      	beq.n	8006c56 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8006c52:	2301      	movs	r3, #1
 8006c54:	e0bf      	b.n	8006dd6 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	2222      	movs	r2, #34	; 0x22
 8006c5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	2210      	movs	r2, #16
 8006c62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	2200      	movs	r2, #0
 8006c6a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	687a      	ldr	r2, [r7, #4]
 8006c70:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	893a      	ldrh	r2, [r7, #8]
 8006c76:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c82:	b29b      	uxth	r3, r3
 8006c84:	2bff      	cmp	r3, #255	; 0xff
 8006c86:	d90e      	bls.n	8006ca6 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	22ff      	movs	r2, #255	; 0xff
 8006c8c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c92:	b2da      	uxtb	r2, r3
 8006c94:	8979      	ldrh	r1, [r7, #10]
 8006c96:	4b52      	ldr	r3, [pc, #328]	; (8006de0 <HAL_I2C_Master_Receive+0x1e4>)
 8006c98:	9300      	str	r3, [sp, #0]
 8006c9a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006c9e:	68f8      	ldr	r0, [r7, #12]
 8006ca0:	f000 fdd8 	bl	8007854 <I2C_TransferConfig>
 8006ca4:	e06d      	b.n	8006d82 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006caa:	b29a      	uxth	r2, r3
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cb4:	b2da      	uxtb	r2, r3
 8006cb6:	8979      	ldrh	r1, [r7, #10]
 8006cb8:	4b49      	ldr	r3, [pc, #292]	; (8006de0 <HAL_I2C_Master_Receive+0x1e4>)
 8006cba:	9300      	str	r3, [sp, #0]
 8006cbc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006cc0:	68f8      	ldr	r0, [r7, #12]
 8006cc2:	f000 fdc7 	bl	8007854 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8006cc6:	e05c      	b.n	8006d82 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006cc8:	697a      	ldr	r2, [r7, #20]
 8006cca:	6a39      	ldr	r1, [r7, #32]
 8006ccc:	68f8      	ldr	r0, [r7, #12]
 8006cce:	f000 fc5b 	bl	8007588 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006cd2:	4603      	mov	r3, r0
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d001      	beq.n	8006cdc <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8006cd8:	2301      	movs	r3, #1
 8006cda:	e07c      	b.n	8006dd6 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ce6:	b2d2      	uxtb	r2, r2
 8006ce8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cee:	1c5a      	adds	r2, r3, #1
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cf8:	3b01      	subs	r3, #1
 8006cfa:	b29a      	uxth	r2, r3
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d04:	b29b      	uxth	r3, r3
 8006d06:	3b01      	subs	r3, #1
 8006d08:	b29a      	uxth	r2, r3
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d12:	b29b      	uxth	r3, r3
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d034      	beq.n	8006d82 <HAL_I2C_Master_Receive+0x186>
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d130      	bne.n	8006d82 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006d20:	697b      	ldr	r3, [r7, #20]
 8006d22:	9300      	str	r3, [sp, #0]
 8006d24:	6a3b      	ldr	r3, [r7, #32]
 8006d26:	2200      	movs	r2, #0
 8006d28:	2180      	movs	r1, #128	; 0x80
 8006d2a:	68f8      	ldr	r0, [r7, #12]
 8006d2c:	f000 fb70 	bl	8007410 <I2C_WaitOnFlagUntilTimeout>
 8006d30:	4603      	mov	r3, r0
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d001      	beq.n	8006d3a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8006d36:	2301      	movs	r3, #1
 8006d38:	e04d      	b.n	8006dd6 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d3e:	b29b      	uxth	r3, r3
 8006d40:	2bff      	cmp	r3, #255	; 0xff
 8006d42:	d90e      	bls.n	8006d62 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	22ff      	movs	r2, #255	; 0xff
 8006d48:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d4e:	b2da      	uxtb	r2, r3
 8006d50:	8979      	ldrh	r1, [r7, #10]
 8006d52:	2300      	movs	r3, #0
 8006d54:	9300      	str	r3, [sp, #0]
 8006d56:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006d5a:	68f8      	ldr	r0, [r7, #12]
 8006d5c:	f000 fd7a 	bl	8007854 <I2C_TransferConfig>
 8006d60:	e00f      	b.n	8006d82 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d66:	b29a      	uxth	r2, r3
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d70:	b2da      	uxtb	r2, r3
 8006d72:	8979      	ldrh	r1, [r7, #10]
 8006d74:	2300      	movs	r3, #0
 8006d76:	9300      	str	r3, [sp, #0]
 8006d78:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006d7c:	68f8      	ldr	r0, [r7, #12]
 8006d7e:	f000 fd69 	bl	8007854 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d86:	b29b      	uxth	r3, r3
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d19d      	bne.n	8006cc8 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006d8c:	697a      	ldr	r2, [r7, #20]
 8006d8e:	6a39      	ldr	r1, [r7, #32]
 8006d90:	68f8      	ldr	r0, [r7, #12]
 8006d92:	f000 fbbd 	bl	8007510 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006d96:	4603      	mov	r3, r0
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d001      	beq.n	8006da0 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8006d9c:	2301      	movs	r3, #1
 8006d9e:	e01a      	b.n	8006dd6 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	2220      	movs	r2, #32
 8006da6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	6859      	ldr	r1, [r3, #4]
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	681a      	ldr	r2, [r3, #0]
 8006db2:	4b0c      	ldr	r3, [pc, #48]	; (8006de4 <HAL_I2C_Master_Receive+0x1e8>)
 8006db4:	400b      	ands	r3, r1
 8006db6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	2220      	movs	r2, #32
 8006dbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	2200      	movs	r2, #0
 8006dcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	e000      	b.n	8006dd6 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8006dd4:	2302      	movs	r3, #2
  }
}
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	3718      	adds	r7, #24
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	bd80      	pop	{r7, pc}
 8006dde:	bf00      	nop
 8006de0:	80002400 	.word	0x80002400
 8006de4:	fe00e800 	.word	0xfe00e800

08006de8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b088      	sub	sp, #32
 8006dec:	af02      	add	r7, sp, #8
 8006dee:	60f8      	str	r0, [r7, #12]
 8006df0:	4608      	mov	r0, r1
 8006df2:	4611      	mov	r1, r2
 8006df4:	461a      	mov	r2, r3
 8006df6:	4603      	mov	r3, r0
 8006df8:	817b      	strh	r3, [r7, #10]
 8006dfa:	460b      	mov	r3, r1
 8006dfc:	813b      	strh	r3, [r7, #8]
 8006dfe:	4613      	mov	r3, r2
 8006e00:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006e08:	b2db      	uxtb	r3, r3
 8006e0a:	2b20      	cmp	r3, #32
 8006e0c:	f040 80f9 	bne.w	8007002 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e10:	6a3b      	ldr	r3, [r7, #32]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d002      	beq.n	8006e1c <HAL_I2C_Mem_Write+0x34>
 8006e16:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d105      	bne.n	8006e28 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006e22:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006e24:	2301      	movs	r3, #1
 8006e26:	e0ed      	b.n	8007004 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006e2e:	2b01      	cmp	r3, #1
 8006e30:	d101      	bne.n	8006e36 <HAL_I2C_Mem_Write+0x4e>
 8006e32:	2302      	movs	r3, #2
 8006e34:	e0e6      	b.n	8007004 <HAL_I2C_Mem_Write+0x21c>
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	2201      	movs	r2, #1
 8006e3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006e3e:	f7ff f9a5 	bl	800618c <HAL_GetTick>
 8006e42:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006e44:	697b      	ldr	r3, [r7, #20]
 8006e46:	9300      	str	r3, [sp, #0]
 8006e48:	2319      	movs	r3, #25
 8006e4a:	2201      	movs	r2, #1
 8006e4c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006e50:	68f8      	ldr	r0, [r7, #12]
 8006e52:	f000 fadd 	bl	8007410 <I2C_WaitOnFlagUntilTimeout>
 8006e56:	4603      	mov	r3, r0
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d001      	beq.n	8006e60 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8006e5c:	2301      	movs	r3, #1
 8006e5e:	e0d1      	b.n	8007004 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	2221      	movs	r2, #33	; 0x21
 8006e64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	2240      	movs	r2, #64	; 0x40
 8006e6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	2200      	movs	r2, #0
 8006e74:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	6a3a      	ldr	r2, [r7, #32]
 8006e7a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006e80:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	2200      	movs	r2, #0
 8006e86:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006e88:	88f8      	ldrh	r0, [r7, #6]
 8006e8a:	893a      	ldrh	r2, [r7, #8]
 8006e8c:	8979      	ldrh	r1, [r7, #10]
 8006e8e:	697b      	ldr	r3, [r7, #20]
 8006e90:	9301      	str	r3, [sp, #4]
 8006e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e94:	9300      	str	r3, [sp, #0]
 8006e96:	4603      	mov	r3, r0
 8006e98:	68f8      	ldr	r0, [r7, #12]
 8006e9a:	f000 f9ed 	bl	8007278 <I2C_RequestMemoryWrite>
 8006e9e:	4603      	mov	r3, r0
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d005      	beq.n	8006eb0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006eac:	2301      	movs	r3, #1
 8006eae:	e0a9      	b.n	8007004 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006eb4:	b29b      	uxth	r3, r3
 8006eb6:	2bff      	cmp	r3, #255	; 0xff
 8006eb8:	d90e      	bls.n	8006ed8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	22ff      	movs	r2, #255	; 0xff
 8006ebe:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ec4:	b2da      	uxtb	r2, r3
 8006ec6:	8979      	ldrh	r1, [r7, #10]
 8006ec8:	2300      	movs	r3, #0
 8006eca:	9300      	str	r3, [sp, #0]
 8006ecc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006ed0:	68f8      	ldr	r0, [r7, #12]
 8006ed2:	f000 fcbf 	bl	8007854 <I2C_TransferConfig>
 8006ed6:	e00f      	b.n	8006ef8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006edc:	b29a      	uxth	r2, r3
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ee6:	b2da      	uxtb	r2, r3
 8006ee8:	8979      	ldrh	r1, [r7, #10]
 8006eea:	2300      	movs	r3, #0
 8006eec:	9300      	str	r3, [sp, #0]
 8006eee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006ef2:	68f8      	ldr	r0, [r7, #12]
 8006ef4:	f000 fcae 	bl	8007854 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006ef8:	697a      	ldr	r2, [r7, #20]
 8006efa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006efc:	68f8      	ldr	r0, [r7, #12]
 8006efe:	f000 fac7 	bl	8007490 <I2C_WaitOnTXISFlagUntilTimeout>
 8006f02:	4603      	mov	r3, r0
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d001      	beq.n	8006f0c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8006f08:	2301      	movs	r3, #1
 8006f0a:	e07b      	b.n	8007004 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f10:	781a      	ldrb	r2, [r3, #0]
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f1c:	1c5a      	adds	r2, r3, #1
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f26:	b29b      	uxth	r3, r3
 8006f28:	3b01      	subs	r3, #1
 8006f2a:	b29a      	uxth	r2, r3
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f34:	3b01      	subs	r3, #1
 8006f36:	b29a      	uxth	r2, r3
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f40:	b29b      	uxth	r3, r3
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d034      	beq.n	8006fb0 <HAL_I2C_Mem_Write+0x1c8>
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d130      	bne.n	8006fb0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006f4e:	697b      	ldr	r3, [r7, #20]
 8006f50:	9300      	str	r3, [sp, #0]
 8006f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f54:	2200      	movs	r2, #0
 8006f56:	2180      	movs	r1, #128	; 0x80
 8006f58:	68f8      	ldr	r0, [r7, #12]
 8006f5a:	f000 fa59 	bl	8007410 <I2C_WaitOnFlagUntilTimeout>
 8006f5e:	4603      	mov	r3, r0
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d001      	beq.n	8006f68 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8006f64:	2301      	movs	r3, #1
 8006f66:	e04d      	b.n	8007004 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f6c:	b29b      	uxth	r3, r3
 8006f6e:	2bff      	cmp	r3, #255	; 0xff
 8006f70:	d90e      	bls.n	8006f90 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	22ff      	movs	r2, #255	; 0xff
 8006f76:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f7c:	b2da      	uxtb	r2, r3
 8006f7e:	8979      	ldrh	r1, [r7, #10]
 8006f80:	2300      	movs	r3, #0
 8006f82:	9300      	str	r3, [sp, #0]
 8006f84:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006f88:	68f8      	ldr	r0, [r7, #12]
 8006f8a:	f000 fc63 	bl	8007854 <I2C_TransferConfig>
 8006f8e:	e00f      	b.n	8006fb0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f94:	b29a      	uxth	r2, r3
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f9e:	b2da      	uxtb	r2, r3
 8006fa0:	8979      	ldrh	r1, [r7, #10]
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	9300      	str	r3, [sp, #0]
 8006fa6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006faa:	68f8      	ldr	r0, [r7, #12]
 8006fac:	f000 fc52 	bl	8007854 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fb4:	b29b      	uxth	r3, r3
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d19e      	bne.n	8006ef8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006fba:	697a      	ldr	r2, [r7, #20]
 8006fbc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006fbe:	68f8      	ldr	r0, [r7, #12]
 8006fc0:	f000 faa6 	bl	8007510 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006fc4:	4603      	mov	r3, r0
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d001      	beq.n	8006fce <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8006fca:	2301      	movs	r3, #1
 8006fcc:	e01a      	b.n	8007004 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	2220      	movs	r2, #32
 8006fd4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	6859      	ldr	r1, [r3, #4]
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	681a      	ldr	r2, [r3, #0]
 8006fe0:	4b0a      	ldr	r3, [pc, #40]	; (800700c <HAL_I2C_Mem_Write+0x224>)
 8006fe2:	400b      	ands	r3, r1
 8006fe4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	2220      	movs	r2, #32
 8006fea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006ffe:	2300      	movs	r3, #0
 8007000:	e000      	b.n	8007004 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8007002:	2302      	movs	r3, #2
  }
}
 8007004:	4618      	mov	r0, r3
 8007006:	3718      	adds	r7, #24
 8007008:	46bd      	mov	sp, r7
 800700a:	bd80      	pop	{r7, pc}
 800700c:	fe00e800 	.word	0xfe00e800

08007010 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007010:	b580      	push	{r7, lr}
 8007012:	b088      	sub	sp, #32
 8007014:	af02      	add	r7, sp, #8
 8007016:	60f8      	str	r0, [r7, #12]
 8007018:	4608      	mov	r0, r1
 800701a:	4611      	mov	r1, r2
 800701c:	461a      	mov	r2, r3
 800701e:	4603      	mov	r3, r0
 8007020:	817b      	strh	r3, [r7, #10]
 8007022:	460b      	mov	r3, r1
 8007024:	813b      	strh	r3, [r7, #8]
 8007026:	4613      	mov	r3, r2
 8007028:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007030:	b2db      	uxtb	r3, r3
 8007032:	2b20      	cmp	r3, #32
 8007034:	f040 80fd 	bne.w	8007232 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8007038:	6a3b      	ldr	r3, [r7, #32]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d002      	beq.n	8007044 <HAL_I2C_Mem_Read+0x34>
 800703e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007040:	2b00      	cmp	r3, #0
 8007042:	d105      	bne.n	8007050 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	f44f 7200 	mov.w	r2, #512	; 0x200
 800704a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800704c:	2301      	movs	r3, #1
 800704e:	e0f1      	b.n	8007234 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007056:	2b01      	cmp	r3, #1
 8007058:	d101      	bne.n	800705e <HAL_I2C_Mem_Read+0x4e>
 800705a:	2302      	movs	r3, #2
 800705c:	e0ea      	b.n	8007234 <HAL_I2C_Mem_Read+0x224>
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	2201      	movs	r2, #1
 8007062:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007066:	f7ff f891 	bl	800618c <HAL_GetTick>
 800706a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800706c:	697b      	ldr	r3, [r7, #20]
 800706e:	9300      	str	r3, [sp, #0]
 8007070:	2319      	movs	r3, #25
 8007072:	2201      	movs	r2, #1
 8007074:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007078:	68f8      	ldr	r0, [r7, #12]
 800707a:	f000 f9c9 	bl	8007410 <I2C_WaitOnFlagUntilTimeout>
 800707e:	4603      	mov	r3, r0
 8007080:	2b00      	cmp	r3, #0
 8007082:	d001      	beq.n	8007088 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8007084:	2301      	movs	r3, #1
 8007086:	e0d5      	b.n	8007234 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	2222      	movs	r2, #34	; 0x22
 800708c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	2240      	movs	r2, #64	; 0x40
 8007094:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	2200      	movs	r2, #0
 800709c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	6a3a      	ldr	r2, [r7, #32]
 80070a2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80070a8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	2200      	movs	r2, #0
 80070ae:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80070b0:	88f8      	ldrh	r0, [r7, #6]
 80070b2:	893a      	ldrh	r2, [r7, #8]
 80070b4:	8979      	ldrh	r1, [r7, #10]
 80070b6:	697b      	ldr	r3, [r7, #20]
 80070b8:	9301      	str	r3, [sp, #4]
 80070ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070bc:	9300      	str	r3, [sp, #0]
 80070be:	4603      	mov	r3, r0
 80070c0:	68f8      	ldr	r0, [r7, #12]
 80070c2:	f000 f92d 	bl	8007320 <I2C_RequestMemoryRead>
 80070c6:	4603      	mov	r3, r0
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d005      	beq.n	80070d8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	2200      	movs	r2, #0
 80070d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80070d4:	2301      	movs	r3, #1
 80070d6:	e0ad      	b.n	8007234 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070dc:	b29b      	uxth	r3, r3
 80070de:	2bff      	cmp	r3, #255	; 0xff
 80070e0:	d90e      	bls.n	8007100 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	22ff      	movs	r2, #255	; 0xff
 80070e6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070ec:	b2da      	uxtb	r2, r3
 80070ee:	8979      	ldrh	r1, [r7, #10]
 80070f0:	4b52      	ldr	r3, [pc, #328]	; (800723c <HAL_I2C_Mem_Read+0x22c>)
 80070f2:	9300      	str	r3, [sp, #0]
 80070f4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80070f8:	68f8      	ldr	r0, [r7, #12]
 80070fa:	f000 fbab 	bl	8007854 <I2C_TransferConfig>
 80070fe:	e00f      	b.n	8007120 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007104:	b29a      	uxth	r2, r3
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800710e:	b2da      	uxtb	r2, r3
 8007110:	8979      	ldrh	r1, [r7, #10]
 8007112:	4b4a      	ldr	r3, [pc, #296]	; (800723c <HAL_I2C_Mem_Read+0x22c>)
 8007114:	9300      	str	r3, [sp, #0]
 8007116:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800711a:	68f8      	ldr	r0, [r7, #12]
 800711c:	f000 fb9a 	bl	8007854 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8007120:	697b      	ldr	r3, [r7, #20]
 8007122:	9300      	str	r3, [sp, #0]
 8007124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007126:	2200      	movs	r2, #0
 8007128:	2104      	movs	r1, #4
 800712a:	68f8      	ldr	r0, [r7, #12]
 800712c:	f000 f970 	bl	8007410 <I2C_WaitOnFlagUntilTimeout>
 8007130:	4603      	mov	r3, r0
 8007132:	2b00      	cmp	r3, #0
 8007134:	d001      	beq.n	800713a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8007136:	2301      	movs	r3, #1
 8007138:	e07c      	b.n	8007234 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007144:	b2d2      	uxtb	r2, r2
 8007146:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800714c:	1c5a      	adds	r2, r3, #1
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007156:	3b01      	subs	r3, #1
 8007158:	b29a      	uxth	r2, r3
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007162:	b29b      	uxth	r3, r3
 8007164:	3b01      	subs	r3, #1
 8007166:	b29a      	uxth	r2, r3
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007170:	b29b      	uxth	r3, r3
 8007172:	2b00      	cmp	r3, #0
 8007174:	d034      	beq.n	80071e0 <HAL_I2C_Mem_Read+0x1d0>
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800717a:	2b00      	cmp	r3, #0
 800717c:	d130      	bne.n	80071e0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800717e:	697b      	ldr	r3, [r7, #20]
 8007180:	9300      	str	r3, [sp, #0]
 8007182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007184:	2200      	movs	r2, #0
 8007186:	2180      	movs	r1, #128	; 0x80
 8007188:	68f8      	ldr	r0, [r7, #12]
 800718a:	f000 f941 	bl	8007410 <I2C_WaitOnFlagUntilTimeout>
 800718e:	4603      	mov	r3, r0
 8007190:	2b00      	cmp	r3, #0
 8007192:	d001      	beq.n	8007198 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8007194:	2301      	movs	r3, #1
 8007196:	e04d      	b.n	8007234 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800719c:	b29b      	uxth	r3, r3
 800719e:	2bff      	cmp	r3, #255	; 0xff
 80071a0:	d90e      	bls.n	80071c0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	22ff      	movs	r2, #255	; 0xff
 80071a6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80071ac:	b2da      	uxtb	r2, r3
 80071ae:	8979      	ldrh	r1, [r7, #10]
 80071b0:	2300      	movs	r3, #0
 80071b2:	9300      	str	r3, [sp, #0]
 80071b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80071b8:	68f8      	ldr	r0, [r7, #12]
 80071ba:	f000 fb4b 	bl	8007854 <I2C_TransferConfig>
 80071be:	e00f      	b.n	80071e0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071c4:	b29a      	uxth	r2, r3
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80071ce:	b2da      	uxtb	r2, r3
 80071d0:	8979      	ldrh	r1, [r7, #10]
 80071d2:	2300      	movs	r3, #0
 80071d4:	9300      	str	r3, [sp, #0]
 80071d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80071da:	68f8      	ldr	r0, [r7, #12]
 80071dc:	f000 fb3a 	bl	8007854 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071e4:	b29b      	uxth	r3, r3
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d19a      	bne.n	8007120 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80071ea:	697a      	ldr	r2, [r7, #20]
 80071ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80071ee:	68f8      	ldr	r0, [r7, #12]
 80071f0:	f000 f98e 	bl	8007510 <I2C_WaitOnSTOPFlagUntilTimeout>
 80071f4:	4603      	mov	r3, r0
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d001      	beq.n	80071fe <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80071fa:	2301      	movs	r3, #1
 80071fc:	e01a      	b.n	8007234 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	2220      	movs	r2, #32
 8007204:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	6859      	ldr	r1, [r3, #4]
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	681a      	ldr	r2, [r3, #0]
 8007210:	4b0b      	ldr	r3, [pc, #44]	; (8007240 <HAL_I2C_Mem_Read+0x230>)
 8007212:	400b      	ands	r3, r1
 8007214:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	2220      	movs	r2, #32
 800721a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	2200      	movs	r2, #0
 8007222:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	2200      	movs	r2, #0
 800722a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800722e:	2300      	movs	r3, #0
 8007230:	e000      	b.n	8007234 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8007232:	2302      	movs	r3, #2
  }
}
 8007234:	4618      	mov	r0, r3
 8007236:	3718      	adds	r7, #24
 8007238:	46bd      	mov	sp, r7
 800723a:	bd80      	pop	{r7, pc}
 800723c:	80002400 	.word	0x80002400
 8007240:	fe00e800 	.word	0xfe00e800

08007244 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8007244:	b580      	push	{r7, lr}
 8007246:	b084      	sub	sp, #16
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	699b      	ldr	r3, [r3, #24]
 8007252:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007260:	2b00      	cmp	r3, #0
 8007262:	d005      	beq.n	8007270 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007268:	68ba      	ldr	r2, [r7, #8]
 800726a:	68f9      	ldr	r1, [r7, #12]
 800726c:	6878      	ldr	r0, [r7, #4]
 800726e:	4798      	blx	r3
  }
}
 8007270:	bf00      	nop
 8007272:	3710      	adds	r7, #16
 8007274:	46bd      	mov	sp, r7
 8007276:	bd80      	pop	{r7, pc}

08007278 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8007278:	b580      	push	{r7, lr}
 800727a:	b086      	sub	sp, #24
 800727c:	af02      	add	r7, sp, #8
 800727e:	60f8      	str	r0, [r7, #12]
 8007280:	4608      	mov	r0, r1
 8007282:	4611      	mov	r1, r2
 8007284:	461a      	mov	r2, r3
 8007286:	4603      	mov	r3, r0
 8007288:	817b      	strh	r3, [r7, #10]
 800728a:	460b      	mov	r3, r1
 800728c:	813b      	strh	r3, [r7, #8]
 800728e:	4613      	mov	r3, r2
 8007290:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8007292:	88fb      	ldrh	r3, [r7, #6]
 8007294:	b2da      	uxtb	r2, r3
 8007296:	8979      	ldrh	r1, [r7, #10]
 8007298:	4b20      	ldr	r3, [pc, #128]	; (800731c <I2C_RequestMemoryWrite+0xa4>)
 800729a:	9300      	str	r3, [sp, #0]
 800729c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80072a0:	68f8      	ldr	r0, [r7, #12]
 80072a2:	f000 fad7 	bl	8007854 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80072a6:	69fa      	ldr	r2, [r7, #28]
 80072a8:	69b9      	ldr	r1, [r7, #24]
 80072aa:	68f8      	ldr	r0, [r7, #12]
 80072ac:	f000 f8f0 	bl	8007490 <I2C_WaitOnTXISFlagUntilTimeout>
 80072b0:	4603      	mov	r3, r0
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d001      	beq.n	80072ba <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80072b6:	2301      	movs	r3, #1
 80072b8:	e02c      	b.n	8007314 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80072ba:	88fb      	ldrh	r3, [r7, #6]
 80072bc:	2b01      	cmp	r3, #1
 80072be:	d105      	bne.n	80072cc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80072c0:	893b      	ldrh	r3, [r7, #8]
 80072c2:	b2da      	uxtb	r2, r3
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	629a      	str	r2, [r3, #40]	; 0x28
 80072ca:	e015      	b.n	80072f8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80072cc:	893b      	ldrh	r3, [r7, #8]
 80072ce:	0a1b      	lsrs	r3, r3, #8
 80072d0:	b29b      	uxth	r3, r3
 80072d2:	b2da      	uxtb	r2, r3
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80072da:	69fa      	ldr	r2, [r7, #28]
 80072dc:	69b9      	ldr	r1, [r7, #24]
 80072de:	68f8      	ldr	r0, [r7, #12]
 80072e0:	f000 f8d6 	bl	8007490 <I2C_WaitOnTXISFlagUntilTimeout>
 80072e4:	4603      	mov	r3, r0
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d001      	beq.n	80072ee <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80072ea:	2301      	movs	r3, #1
 80072ec:	e012      	b.n	8007314 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80072ee:	893b      	ldrh	r3, [r7, #8]
 80072f0:	b2da      	uxtb	r2, r3
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80072f8:	69fb      	ldr	r3, [r7, #28]
 80072fa:	9300      	str	r3, [sp, #0]
 80072fc:	69bb      	ldr	r3, [r7, #24]
 80072fe:	2200      	movs	r2, #0
 8007300:	2180      	movs	r1, #128	; 0x80
 8007302:	68f8      	ldr	r0, [r7, #12]
 8007304:	f000 f884 	bl	8007410 <I2C_WaitOnFlagUntilTimeout>
 8007308:	4603      	mov	r3, r0
 800730a:	2b00      	cmp	r3, #0
 800730c:	d001      	beq.n	8007312 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800730e:	2301      	movs	r3, #1
 8007310:	e000      	b.n	8007314 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8007312:	2300      	movs	r3, #0
}
 8007314:	4618      	mov	r0, r3
 8007316:	3710      	adds	r7, #16
 8007318:	46bd      	mov	sp, r7
 800731a:	bd80      	pop	{r7, pc}
 800731c:	80002000 	.word	0x80002000

08007320 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b086      	sub	sp, #24
 8007324:	af02      	add	r7, sp, #8
 8007326:	60f8      	str	r0, [r7, #12]
 8007328:	4608      	mov	r0, r1
 800732a:	4611      	mov	r1, r2
 800732c:	461a      	mov	r2, r3
 800732e:	4603      	mov	r3, r0
 8007330:	817b      	strh	r3, [r7, #10]
 8007332:	460b      	mov	r3, r1
 8007334:	813b      	strh	r3, [r7, #8]
 8007336:	4613      	mov	r3, r2
 8007338:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800733a:	88fb      	ldrh	r3, [r7, #6]
 800733c:	b2da      	uxtb	r2, r3
 800733e:	8979      	ldrh	r1, [r7, #10]
 8007340:	4b20      	ldr	r3, [pc, #128]	; (80073c4 <I2C_RequestMemoryRead+0xa4>)
 8007342:	9300      	str	r3, [sp, #0]
 8007344:	2300      	movs	r3, #0
 8007346:	68f8      	ldr	r0, [r7, #12]
 8007348:	f000 fa84 	bl	8007854 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800734c:	69fa      	ldr	r2, [r7, #28]
 800734e:	69b9      	ldr	r1, [r7, #24]
 8007350:	68f8      	ldr	r0, [r7, #12]
 8007352:	f000 f89d 	bl	8007490 <I2C_WaitOnTXISFlagUntilTimeout>
 8007356:	4603      	mov	r3, r0
 8007358:	2b00      	cmp	r3, #0
 800735a:	d001      	beq.n	8007360 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800735c:	2301      	movs	r3, #1
 800735e:	e02c      	b.n	80073ba <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007360:	88fb      	ldrh	r3, [r7, #6]
 8007362:	2b01      	cmp	r3, #1
 8007364:	d105      	bne.n	8007372 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007366:	893b      	ldrh	r3, [r7, #8]
 8007368:	b2da      	uxtb	r2, r3
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	629a      	str	r2, [r3, #40]	; 0x28
 8007370:	e015      	b.n	800739e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007372:	893b      	ldrh	r3, [r7, #8]
 8007374:	0a1b      	lsrs	r3, r3, #8
 8007376:	b29b      	uxth	r3, r3
 8007378:	b2da      	uxtb	r2, r3
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007380:	69fa      	ldr	r2, [r7, #28]
 8007382:	69b9      	ldr	r1, [r7, #24]
 8007384:	68f8      	ldr	r0, [r7, #12]
 8007386:	f000 f883 	bl	8007490 <I2C_WaitOnTXISFlagUntilTimeout>
 800738a:	4603      	mov	r3, r0
 800738c:	2b00      	cmp	r3, #0
 800738e:	d001      	beq.n	8007394 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8007390:	2301      	movs	r3, #1
 8007392:	e012      	b.n	80073ba <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007394:	893b      	ldrh	r3, [r7, #8]
 8007396:	b2da      	uxtb	r2, r3
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800739e:	69fb      	ldr	r3, [r7, #28]
 80073a0:	9300      	str	r3, [sp, #0]
 80073a2:	69bb      	ldr	r3, [r7, #24]
 80073a4:	2200      	movs	r2, #0
 80073a6:	2140      	movs	r1, #64	; 0x40
 80073a8:	68f8      	ldr	r0, [r7, #12]
 80073aa:	f000 f831 	bl	8007410 <I2C_WaitOnFlagUntilTimeout>
 80073ae:	4603      	mov	r3, r0
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d001      	beq.n	80073b8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80073b4:	2301      	movs	r3, #1
 80073b6:	e000      	b.n	80073ba <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80073b8:	2300      	movs	r3, #0
}
 80073ba:	4618      	mov	r0, r3
 80073bc:	3710      	adds	r7, #16
 80073be:	46bd      	mov	sp, r7
 80073c0:	bd80      	pop	{r7, pc}
 80073c2:	bf00      	nop
 80073c4:	80002000 	.word	0x80002000

080073c8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80073c8:	b480      	push	{r7}
 80073ca:	b083      	sub	sp, #12
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	699b      	ldr	r3, [r3, #24]
 80073d6:	f003 0302 	and.w	r3, r3, #2
 80073da:	2b02      	cmp	r3, #2
 80073dc:	d103      	bne.n	80073e6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	2200      	movs	r2, #0
 80073e4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	699b      	ldr	r3, [r3, #24]
 80073ec:	f003 0301 	and.w	r3, r3, #1
 80073f0:	2b01      	cmp	r3, #1
 80073f2:	d007      	beq.n	8007404 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	699a      	ldr	r2, [r3, #24]
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f042 0201 	orr.w	r2, r2, #1
 8007402:	619a      	str	r2, [r3, #24]
  }
}
 8007404:	bf00      	nop
 8007406:	370c      	adds	r7, #12
 8007408:	46bd      	mov	sp, r7
 800740a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740e:	4770      	bx	lr

08007410 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b084      	sub	sp, #16
 8007414:	af00      	add	r7, sp, #0
 8007416:	60f8      	str	r0, [r7, #12]
 8007418:	60b9      	str	r1, [r7, #8]
 800741a:	603b      	str	r3, [r7, #0]
 800741c:	4613      	mov	r3, r2
 800741e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007420:	e022      	b.n	8007468 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007428:	d01e      	beq.n	8007468 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800742a:	f7fe feaf 	bl	800618c <HAL_GetTick>
 800742e:	4602      	mov	r2, r0
 8007430:	69bb      	ldr	r3, [r7, #24]
 8007432:	1ad3      	subs	r3, r2, r3
 8007434:	683a      	ldr	r2, [r7, #0]
 8007436:	429a      	cmp	r2, r3
 8007438:	d302      	bcc.n	8007440 <I2C_WaitOnFlagUntilTimeout+0x30>
 800743a:	683b      	ldr	r3, [r7, #0]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d113      	bne.n	8007468 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007444:	f043 0220 	orr.w	r2, r3, #32
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	2220      	movs	r2, #32
 8007450:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	2200      	movs	r2, #0
 8007458:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	2200      	movs	r2, #0
 8007460:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8007464:	2301      	movs	r3, #1
 8007466:	e00f      	b.n	8007488 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	699a      	ldr	r2, [r3, #24]
 800746e:	68bb      	ldr	r3, [r7, #8]
 8007470:	4013      	ands	r3, r2
 8007472:	68ba      	ldr	r2, [r7, #8]
 8007474:	429a      	cmp	r2, r3
 8007476:	bf0c      	ite	eq
 8007478:	2301      	moveq	r3, #1
 800747a:	2300      	movne	r3, #0
 800747c:	b2db      	uxtb	r3, r3
 800747e:	461a      	mov	r2, r3
 8007480:	79fb      	ldrb	r3, [r7, #7]
 8007482:	429a      	cmp	r2, r3
 8007484:	d0cd      	beq.n	8007422 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007486:	2300      	movs	r3, #0
}
 8007488:	4618      	mov	r0, r3
 800748a:	3710      	adds	r7, #16
 800748c:	46bd      	mov	sp, r7
 800748e:	bd80      	pop	{r7, pc}

08007490 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007490:	b580      	push	{r7, lr}
 8007492:	b084      	sub	sp, #16
 8007494:	af00      	add	r7, sp, #0
 8007496:	60f8      	str	r0, [r7, #12]
 8007498:	60b9      	str	r1, [r7, #8]
 800749a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800749c:	e02c      	b.n	80074f8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800749e:	687a      	ldr	r2, [r7, #4]
 80074a0:	68b9      	ldr	r1, [r7, #8]
 80074a2:	68f8      	ldr	r0, [r7, #12]
 80074a4:	f000 f8ea 	bl	800767c <I2C_IsErrorOccurred>
 80074a8:	4603      	mov	r3, r0
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d001      	beq.n	80074b2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80074ae:	2301      	movs	r3, #1
 80074b0:	e02a      	b.n	8007508 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80074b2:	68bb      	ldr	r3, [r7, #8]
 80074b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074b8:	d01e      	beq.n	80074f8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80074ba:	f7fe fe67 	bl	800618c <HAL_GetTick>
 80074be:	4602      	mov	r2, r0
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	1ad3      	subs	r3, r2, r3
 80074c4:	68ba      	ldr	r2, [r7, #8]
 80074c6:	429a      	cmp	r2, r3
 80074c8:	d302      	bcc.n	80074d0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80074ca:	68bb      	ldr	r3, [r7, #8]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d113      	bne.n	80074f8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074d4:	f043 0220 	orr.w	r2, r3, #32
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	2220      	movs	r2, #32
 80074e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	2200      	movs	r2, #0
 80074e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	2200      	movs	r2, #0
 80074f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80074f4:	2301      	movs	r3, #1
 80074f6:	e007      	b.n	8007508 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	699b      	ldr	r3, [r3, #24]
 80074fe:	f003 0302 	and.w	r3, r3, #2
 8007502:	2b02      	cmp	r3, #2
 8007504:	d1cb      	bne.n	800749e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007506:	2300      	movs	r3, #0
}
 8007508:	4618      	mov	r0, r3
 800750a:	3710      	adds	r7, #16
 800750c:	46bd      	mov	sp, r7
 800750e:	bd80      	pop	{r7, pc}

08007510 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b084      	sub	sp, #16
 8007514:	af00      	add	r7, sp, #0
 8007516:	60f8      	str	r0, [r7, #12]
 8007518:	60b9      	str	r1, [r7, #8]
 800751a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800751c:	e028      	b.n	8007570 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800751e:	687a      	ldr	r2, [r7, #4]
 8007520:	68b9      	ldr	r1, [r7, #8]
 8007522:	68f8      	ldr	r0, [r7, #12]
 8007524:	f000 f8aa 	bl	800767c <I2C_IsErrorOccurred>
 8007528:	4603      	mov	r3, r0
 800752a:	2b00      	cmp	r3, #0
 800752c:	d001      	beq.n	8007532 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800752e:	2301      	movs	r3, #1
 8007530:	e026      	b.n	8007580 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007532:	f7fe fe2b 	bl	800618c <HAL_GetTick>
 8007536:	4602      	mov	r2, r0
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	1ad3      	subs	r3, r2, r3
 800753c:	68ba      	ldr	r2, [r7, #8]
 800753e:	429a      	cmp	r2, r3
 8007540:	d302      	bcc.n	8007548 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8007542:	68bb      	ldr	r3, [r7, #8]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d113      	bne.n	8007570 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800754c:	f043 0220 	orr.w	r2, r3, #32
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	2220      	movs	r2, #32
 8007558:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	2200      	movs	r2, #0
 8007560:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	2200      	movs	r2, #0
 8007568:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800756c:	2301      	movs	r3, #1
 800756e:	e007      	b.n	8007580 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	699b      	ldr	r3, [r3, #24]
 8007576:	f003 0320 	and.w	r3, r3, #32
 800757a:	2b20      	cmp	r3, #32
 800757c:	d1cf      	bne.n	800751e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800757e:	2300      	movs	r3, #0
}
 8007580:	4618      	mov	r0, r3
 8007582:	3710      	adds	r7, #16
 8007584:	46bd      	mov	sp, r7
 8007586:	bd80      	pop	{r7, pc}

08007588 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007588:	b580      	push	{r7, lr}
 800758a:	b084      	sub	sp, #16
 800758c:	af00      	add	r7, sp, #0
 800758e:	60f8      	str	r0, [r7, #12]
 8007590:	60b9      	str	r1, [r7, #8]
 8007592:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007594:	e064      	b.n	8007660 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007596:	687a      	ldr	r2, [r7, #4]
 8007598:	68b9      	ldr	r1, [r7, #8]
 800759a:	68f8      	ldr	r0, [r7, #12]
 800759c:	f000 f86e 	bl	800767c <I2C_IsErrorOccurred>
 80075a0:	4603      	mov	r3, r0
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d001      	beq.n	80075aa <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80075a6:	2301      	movs	r3, #1
 80075a8:	e062      	b.n	8007670 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	699b      	ldr	r3, [r3, #24]
 80075b0:	f003 0320 	and.w	r3, r3, #32
 80075b4:	2b20      	cmp	r3, #32
 80075b6:	d138      	bne.n	800762a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	699b      	ldr	r3, [r3, #24]
 80075be:	f003 0304 	and.w	r3, r3, #4
 80075c2:	2b04      	cmp	r3, #4
 80075c4:	d105      	bne.n	80075d2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d001      	beq.n	80075d2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80075ce:	2300      	movs	r3, #0
 80075d0:	e04e      	b.n	8007670 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	699b      	ldr	r3, [r3, #24]
 80075d8:	f003 0310 	and.w	r3, r3, #16
 80075dc:	2b10      	cmp	r3, #16
 80075de:	d107      	bne.n	80075f0 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	2210      	movs	r2, #16
 80075e6:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	2204      	movs	r2, #4
 80075ec:	645a      	str	r2, [r3, #68]	; 0x44
 80075ee:	e002      	b.n	80075f6 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	2200      	movs	r2, #0
 80075f4:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	2220      	movs	r2, #32
 80075fc:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	6859      	ldr	r1, [r3, #4]
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	681a      	ldr	r2, [r3, #0]
 8007608:	4b1b      	ldr	r3, [pc, #108]	; (8007678 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 800760a:	400b      	ands	r3, r1
 800760c:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	2220      	movs	r2, #32
 8007612:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	2200      	movs	r2, #0
 800761a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	2200      	movs	r2, #0
 8007622:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8007626:	2301      	movs	r3, #1
 8007628:	e022      	b.n	8007670 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800762a:	f7fe fdaf 	bl	800618c <HAL_GetTick>
 800762e:	4602      	mov	r2, r0
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	1ad3      	subs	r3, r2, r3
 8007634:	68ba      	ldr	r2, [r7, #8]
 8007636:	429a      	cmp	r2, r3
 8007638:	d302      	bcc.n	8007640 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800763a:	68bb      	ldr	r3, [r7, #8]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d10f      	bne.n	8007660 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007644:	f043 0220 	orr.w	r2, r3, #32
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	2220      	movs	r2, #32
 8007650:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	2200      	movs	r2, #0
 8007658:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800765c:	2301      	movs	r3, #1
 800765e:	e007      	b.n	8007670 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	699b      	ldr	r3, [r3, #24]
 8007666:	f003 0304 	and.w	r3, r3, #4
 800766a:	2b04      	cmp	r3, #4
 800766c:	d193      	bne.n	8007596 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800766e:	2300      	movs	r3, #0
}
 8007670:	4618      	mov	r0, r3
 8007672:	3710      	adds	r7, #16
 8007674:	46bd      	mov	sp, r7
 8007676:	bd80      	pop	{r7, pc}
 8007678:	fe00e800 	.word	0xfe00e800

0800767c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800767c:	b580      	push	{r7, lr}
 800767e:	b08a      	sub	sp, #40	; 0x28
 8007680:	af00      	add	r7, sp, #0
 8007682:	60f8      	str	r0, [r7, #12]
 8007684:	60b9      	str	r1, [r7, #8]
 8007686:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007688:	2300      	movs	r3, #0
 800768a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	699b      	ldr	r3, [r3, #24]
 8007694:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8007696:	2300      	movs	r3, #0
 8007698:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800769e:	69bb      	ldr	r3, [r7, #24]
 80076a0:	f003 0310 	and.w	r3, r3, #16
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d075      	beq.n	8007794 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	2210      	movs	r2, #16
 80076ae:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80076b0:	e056      	b.n	8007760 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80076b2:	68bb      	ldr	r3, [r7, #8]
 80076b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076b8:	d052      	beq.n	8007760 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80076ba:	f7fe fd67 	bl	800618c <HAL_GetTick>
 80076be:	4602      	mov	r2, r0
 80076c0:	69fb      	ldr	r3, [r7, #28]
 80076c2:	1ad3      	subs	r3, r2, r3
 80076c4:	68ba      	ldr	r2, [r7, #8]
 80076c6:	429a      	cmp	r2, r3
 80076c8:	d302      	bcc.n	80076d0 <I2C_IsErrorOccurred+0x54>
 80076ca:	68bb      	ldr	r3, [r7, #8]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d147      	bne.n	8007760 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	685b      	ldr	r3, [r3, #4]
 80076d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80076da:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80076e2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	699b      	ldr	r3, [r3, #24]
 80076ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80076ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80076f2:	d12e      	bne.n	8007752 <I2C_IsErrorOccurred+0xd6>
 80076f4:	697b      	ldr	r3, [r7, #20]
 80076f6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80076fa:	d02a      	beq.n	8007752 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80076fc:	7cfb      	ldrb	r3, [r7, #19]
 80076fe:	2b20      	cmp	r3, #32
 8007700:	d027      	beq.n	8007752 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	685a      	ldr	r2, [r3, #4]
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007710:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8007712:	f7fe fd3b 	bl	800618c <HAL_GetTick>
 8007716:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007718:	e01b      	b.n	8007752 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800771a:	f7fe fd37 	bl	800618c <HAL_GetTick>
 800771e:	4602      	mov	r2, r0
 8007720:	69fb      	ldr	r3, [r7, #28]
 8007722:	1ad3      	subs	r3, r2, r3
 8007724:	2b19      	cmp	r3, #25
 8007726:	d914      	bls.n	8007752 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800772c:	f043 0220 	orr.w	r2, r3, #32
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	2220      	movs	r2, #32
 8007738:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	2200      	movs	r2, #0
 8007740:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	2200      	movs	r2, #0
 8007748:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 800774c:	2301      	movs	r3, #1
 800774e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	699b      	ldr	r3, [r3, #24]
 8007758:	f003 0320 	and.w	r3, r3, #32
 800775c:	2b20      	cmp	r3, #32
 800775e:	d1dc      	bne.n	800771a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	699b      	ldr	r3, [r3, #24]
 8007766:	f003 0320 	and.w	r3, r3, #32
 800776a:	2b20      	cmp	r3, #32
 800776c:	d003      	beq.n	8007776 <I2C_IsErrorOccurred+0xfa>
 800776e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007772:	2b00      	cmp	r3, #0
 8007774:	d09d      	beq.n	80076b2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8007776:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800777a:	2b00      	cmp	r3, #0
 800777c:	d103      	bne.n	8007786 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	2220      	movs	r2, #32
 8007784:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8007786:	6a3b      	ldr	r3, [r7, #32]
 8007788:	f043 0304 	orr.w	r3, r3, #4
 800778c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800778e:	2301      	movs	r3, #1
 8007790:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	699b      	ldr	r3, [r3, #24]
 800779a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800779c:	69bb      	ldr	r3, [r7, #24]
 800779e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d00b      	beq.n	80077be <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80077a6:	6a3b      	ldr	r3, [r7, #32]
 80077a8:	f043 0301 	orr.w	r3, r3, #1
 80077ac:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80077b6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80077b8:	2301      	movs	r3, #1
 80077ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80077be:	69bb      	ldr	r3, [r7, #24]
 80077c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d00b      	beq.n	80077e0 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80077c8:	6a3b      	ldr	r3, [r7, #32]
 80077ca:	f043 0308 	orr.w	r3, r3, #8
 80077ce:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80077d8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80077da:	2301      	movs	r3, #1
 80077dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80077e0:	69bb      	ldr	r3, [r7, #24]
 80077e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d00b      	beq.n	8007802 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80077ea:	6a3b      	ldr	r3, [r7, #32]
 80077ec:	f043 0302 	orr.w	r3, r3, #2
 80077f0:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80077fa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80077fc:	2301      	movs	r3, #1
 80077fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8007802:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007806:	2b00      	cmp	r3, #0
 8007808:	d01c      	beq.n	8007844 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800780a:	68f8      	ldr	r0, [r7, #12]
 800780c:	f7ff fddc 	bl	80073c8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	6859      	ldr	r1, [r3, #4]
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	681a      	ldr	r2, [r3, #0]
 800781a:	4b0d      	ldr	r3, [pc, #52]	; (8007850 <I2C_IsErrorOccurred+0x1d4>)
 800781c:	400b      	ands	r3, r1
 800781e:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007824:	6a3b      	ldr	r3, [r7, #32]
 8007826:	431a      	orrs	r2, r3
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	2220      	movs	r2, #32
 8007830:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	2200      	movs	r2, #0
 8007838:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	2200      	movs	r2, #0
 8007840:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8007844:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8007848:	4618      	mov	r0, r3
 800784a:	3728      	adds	r7, #40	; 0x28
 800784c:	46bd      	mov	sp, r7
 800784e:	bd80      	pop	{r7, pc}
 8007850:	fe00e800 	.word	0xfe00e800

08007854 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007854:	b480      	push	{r7}
 8007856:	b087      	sub	sp, #28
 8007858:	af00      	add	r7, sp, #0
 800785a:	60f8      	str	r0, [r7, #12]
 800785c:	607b      	str	r3, [r7, #4]
 800785e:	460b      	mov	r3, r1
 8007860:	817b      	strh	r3, [r7, #10]
 8007862:	4613      	mov	r3, r2
 8007864:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007866:	897b      	ldrh	r3, [r7, #10]
 8007868:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800786c:	7a7b      	ldrb	r3, [r7, #9]
 800786e:	041b      	lsls	r3, r3, #16
 8007870:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007874:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800787a:	6a3b      	ldr	r3, [r7, #32]
 800787c:	4313      	orrs	r3, r2
 800787e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007882:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	685a      	ldr	r2, [r3, #4]
 800788a:	6a3b      	ldr	r3, [r7, #32]
 800788c:	0d5b      	lsrs	r3, r3, #21
 800788e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8007892:	4b08      	ldr	r3, [pc, #32]	; (80078b4 <I2C_TransferConfig+0x60>)
 8007894:	430b      	orrs	r3, r1
 8007896:	43db      	mvns	r3, r3
 8007898:	ea02 0103 	and.w	r1, r2, r3
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	697a      	ldr	r2, [r7, #20]
 80078a2:	430a      	orrs	r2, r1
 80078a4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80078a6:	bf00      	nop
 80078a8:	371c      	adds	r7, #28
 80078aa:	46bd      	mov	sp, r7
 80078ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b0:	4770      	bx	lr
 80078b2:	bf00      	nop
 80078b4:	03ff63ff 	.word	0x03ff63ff

080078b8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80078b8:	b480      	push	{r7}
 80078ba:	b083      	sub	sp, #12
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
 80078c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80078c8:	b2db      	uxtb	r3, r3
 80078ca:	2b20      	cmp	r3, #32
 80078cc:	d138      	bne.n	8007940 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80078d4:	2b01      	cmp	r3, #1
 80078d6:	d101      	bne.n	80078dc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80078d8:	2302      	movs	r3, #2
 80078da:	e032      	b.n	8007942 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2201      	movs	r2, #1
 80078e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2224      	movs	r2, #36	; 0x24
 80078e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	681a      	ldr	r2, [r3, #0]
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f022 0201 	bic.w	r2, r2, #1
 80078fa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	681a      	ldr	r2, [r3, #0]
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800790a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	6819      	ldr	r1, [r3, #0]
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	683a      	ldr	r2, [r7, #0]
 8007918:	430a      	orrs	r2, r1
 800791a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	681a      	ldr	r2, [r3, #0]
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f042 0201 	orr.w	r2, r2, #1
 800792a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2220      	movs	r2, #32
 8007930:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2200      	movs	r2, #0
 8007938:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800793c:	2300      	movs	r3, #0
 800793e:	e000      	b.n	8007942 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007940:	2302      	movs	r3, #2
  }
}
 8007942:	4618      	mov	r0, r3
 8007944:	370c      	adds	r7, #12
 8007946:	46bd      	mov	sp, r7
 8007948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794c:	4770      	bx	lr

0800794e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800794e:	b480      	push	{r7}
 8007950:	b085      	sub	sp, #20
 8007952:	af00      	add	r7, sp, #0
 8007954:	6078      	str	r0, [r7, #4]
 8007956:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800795e:	b2db      	uxtb	r3, r3
 8007960:	2b20      	cmp	r3, #32
 8007962:	d139      	bne.n	80079d8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800796a:	2b01      	cmp	r3, #1
 800796c:	d101      	bne.n	8007972 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800796e:	2302      	movs	r3, #2
 8007970:	e033      	b.n	80079da <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	2201      	movs	r2, #1
 8007976:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	2224      	movs	r2, #36	; 0x24
 800797e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	681a      	ldr	r2, [r3, #0]
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	f022 0201 	bic.w	r2, r2, #1
 8007990:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80079a0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80079a2:	683b      	ldr	r3, [r7, #0]
 80079a4:	021b      	lsls	r3, r3, #8
 80079a6:	68fa      	ldr	r2, [r7, #12]
 80079a8:	4313      	orrs	r3, r2
 80079aa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	68fa      	ldr	r2, [r7, #12]
 80079b2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	681a      	ldr	r2, [r3, #0]
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f042 0201 	orr.w	r2, r2, #1
 80079c2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2220      	movs	r2, #32
 80079c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2200      	movs	r2, #0
 80079d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80079d4:	2300      	movs	r3, #0
 80079d6:	e000      	b.n	80079da <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80079d8:	2302      	movs	r3, #2
  }
}
 80079da:	4618      	mov	r0, r3
 80079dc:	3714      	adds	r7, #20
 80079de:	46bd      	mov	sp, r7
 80079e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e4:	4770      	bx	lr
	...

080079e8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80079e8:	b480      	push	{r7}
 80079ea:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80079ec:	4b0d      	ldr	r3, [pc, #52]	; (8007a24 <HAL_PWREx_GetVoltageRange+0x3c>)
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80079f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80079f8:	d102      	bne.n	8007a00 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80079fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80079fe:	e00b      	b.n	8007a18 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8007a00:	4b08      	ldr	r3, [pc, #32]	; (8007a24 <HAL_PWREx_GetVoltageRange+0x3c>)
 8007a02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007a06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a0e:	d102      	bne.n	8007a16 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8007a10:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007a14:	e000      	b.n	8007a18 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8007a16:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8007a18:	4618      	mov	r0, r3
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a20:	4770      	bx	lr
 8007a22:	bf00      	nop
 8007a24:	40007000 	.word	0x40007000

08007a28 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007a28:	b480      	push	{r7}
 8007a2a:	b085      	sub	sp, #20
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d141      	bne.n	8007aba <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007a36:	4b4b      	ldr	r3, [pc, #300]	; (8007b64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007a3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a42:	d131      	bne.n	8007aa8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007a44:	4b47      	ldr	r3, [pc, #284]	; (8007b64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007a46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007a4a:	4a46      	ldr	r2, [pc, #280]	; (8007b64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007a4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007a50:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007a54:	4b43      	ldr	r3, [pc, #268]	; (8007b64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007a5c:	4a41      	ldr	r2, [pc, #260]	; (8007b64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007a5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007a62:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8007a64:	4b40      	ldr	r3, [pc, #256]	; (8007b68 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	2232      	movs	r2, #50	; 0x32
 8007a6a:	fb02 f303 	mul.w	r3, r2, r3
 8007a6e:	4a3f      	ldr	r2, [pc, #252]	; (8007b6c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007a70:	fba2 2303 	umull	r2, r3, r2, r3
 8007a74:	0c9b      	lsrs	r3, r3, #18
 8007a76:	3301      	adds	r3, #1
 8007a78:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007a7a:	e002      	b.n	8007a82 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	3b01      	subs	r3, #1
 8007a80:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007a82:	4b38      	ldr	r3, [pc, #224]	; (8007b64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007a84:	695b      	ldr	r3, [r3, #20]
 8007a86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007a8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a8e:	d102      	bne.n	8007a96 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d1f2      	bne.n	8007a7c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007a96:	4b33      	ldr	r3, [pc, #204]	; (8007b64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007a98:	695b      	ldr	r3, [r3, #20]
 8007a9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007a9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007aa2:	d158      	bne.n	8007b56 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007aa4:	2303      	movs	r3, #3
 8007aa6:	e057      	b.n	8007b58 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007aa8:	4b2e      	ldr	r3, [pc, #184]	; (8007b64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007aaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007aae:	4a2d      	ldr	r2, [pc, #180]	; (8007b64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007ab0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007ab4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8007ab8:	e04d      	b.n	8007b56 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ac0:	d141      	bne.n	8007b46 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007ac2:	4b28      	ldr	r3, [pc, #160]	; (8007b64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007aca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ace:	d131      	bne.n	8007b34 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007ad0:	4b24      	ldr	r3, [pc, #144]	; (8007b64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007ad2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007ad6:	4a23      	ldr	r2, [pc, #140]	; (8007b64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007ad8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007adc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007ae0:	4b20      	ldr	r3, [pc, #128]	; (8007b64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007ae8:	4a1e      	ldr	r2, [pc, #120]	; (8007b64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007aea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007aee:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8007af0:	4b1d      	ldr	r3, [pc, #116]	; (8007b68 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	2232      	movs	r2, #50	; 0x32
 8007af6:	fb02 f303 	mul.w	r3, r2, r3
 8007afa:	4a1c      	ldr	r2, [pc, #112]	; (8007b6c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007afc:	fba2 2303 	umull	r2, r3, r2, r3
 8007b00:	0c9b      	lsrs	r3, r3, #18
 8007b02:	3301      	adds	r3, #1
 8007b04:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007b06:	e002      	b.n	8007b0e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	3b01      	subs	r3, #1
 8007b0c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007b0e:	4b15      	ldr	r3, [pc, #84]	; (8007b64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007b10:	695b      	ldr	r3, [r3, #20]
 8007b12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007b16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b1a:	d102      	bne.n	8007b22 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d1f2      	bne.n	8007b08 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007b22:	4b10      	ldr	r3, [pc, #64]	; (8007b64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007b24:	695b      	ldr	r3, [r3, #20]
 8007b26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007b2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b2e:	d112      	bne.n	8007b56 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007b30:	2303      	movs	r3, #3
 8007b32:	e011      	b.n	8007b58 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007b34:	4b0b      	ldr	r3, [pc, #44]	; (8007b64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007b36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007b3a:	4a0a      	ldr	r2, [pc, #40]	; (8007b64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007b3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b40:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8007b44:	e007      	b.n	8007b56 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8007b46:	4b07      	ldr	r3, [pc, #28]	; (8007b64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007b4e:	4a05      	ldr	r2, [pc, #20]	; (8007b64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007b50:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007b54:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8007b56:	2300      	movs	r3, #0
}
 8007b58:	4618      	mov	r0, r3
 8007b5a:	3714      	adds	r7, #20
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b62:	4770      	bx	lr
 8007b64:	40007000 	.word	0x40007000
 8007b68:	20000010 	.word	0x20000010
 8007b6c:	431bde83 	.word	0x431bde83

08007b70 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b088      	sub	sp, #32
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d102      	bne.n	8007b84 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8007b7e:	2301      	movs	r3, #1
 8007b80:	f000 bc08 	b.w	8008394 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007b84:	4b96      	ldr	r3, [pc, #600]	; (8007de0 <HAL_RCC_OscConfig+0x270>)
 8007b86:	689b      	ldr	r3, [r3, #8]
 8007b88:	f003 030c 	and.w	r3, r3, #12
 8007b8c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007b8e:	4b94      	ldr	r3, [pc, #592]	; (8007de0 <HAL_RCC_OscConfig+0x270>)
 8007b90:	68db      	ldr	r3, [r3, #12]
 8007b92:	f003 0303 	and.w	r3, r3, #3
 8007b96:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	f003 0310 	and.w	r3, r3, #16
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	f000 80e4 	beq.w	8007d6e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8007ba6:	69bb      	ldr	r3, [r7, #24]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d007      	beq.n	8007bbc <HAL_RCC_OscConfig+0x4c>
 8007bac:	69bb      	ldr	r3, [r7, #24]
 8007bae:	2b0c      	cmp	r3, #12
 8007bb0:	f040 808b 	bne.w	8007cca <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8007bb4:	697b      	ldr	r3, [r7, #20]
 8007bb6:	2b01      	cmp	r3, #1
 8007bb8:	f040 8087 	bne.w	8007cca <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007bbc:	4b88      	ldr	r3, [pc, #544]	; (8007de0 <HAL_RCC_OscConfig+0x270>)
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	f003 0302 	and.w	r3, r3, #2
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d005      	beq.n	8007bd4 <HAL_RCC_OscConfig+0x64>
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	699b      	ldr	r3, [r3, #24]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d101      	bne.n	8007bd4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8007bd0:	2301      	movs	r3, #1
 8007bd2:	e3df      	b.n	8008394 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	6a1a      	ldr	r2, [r3, #32]
 8007bd8:	4b81      	ldr	r3, [pc, #516]	; (8007de0 <HAL_RCC_OscConfig+0x270>)
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	f003 0308 	and.w	r3, r3, #8
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d004      	beq.n	8007bee <HAL_RCC_OscConfig+0x7e>
 8007be4:	4b7e      	ldr	r3, [pc, #504]	; (8007de0 <HAL_RCC_OscConfig+0x270>)
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007bec:	e005      	b.n	8007bfa <HAL_RCC_OscConfig+0x8a>
 8007bee:	4b7c      	ldr	r3, [pc, #496]	; (8007de0 <HAL_RCC_OscConfig+0x270>)
 8007bf0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007bf4:	091b      	lsrs	r3, r3, #4
 8007bf6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007bfa:	4293      	cmp	r3, r2
 8007bfc:	d223      	bcs.n	8007c46 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	6a1b      	ldr	r3, [r3, #32]
 8007c02:	4618      	mov	r0, r3
 8007c04:	f000 fdfe 	bl	8008804 <RCC_SetFlashLatencyFromMSIRange>
 8007c08:	4603      	mov	r3, r0
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d001      	beq.n	8007c12 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8007c0e:	2301      	movs	r3, #1
 8007c10:	e3c0      	b.n	8008394 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007c12:	4b73      	ldr	r3, [pc, #460]	; (8007de0 <HAL_RCC_OscConfig+0x270>)
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	4a72      	ldr	r2, [pc, #456]	; (8007de0 <HAL_RCC_OscConfig+0x270>)
 8007c18:	f043 0308 	orr.w	r3, r3, #8
 8007c1c:	6013      	str	r3, [r2, #0]
 8007c1e:	4b70      	ldr	r3, [pc, #448]	; (8007de0 <HAL_RCC_OscConfig+0x270>)
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	6a1b      	ldr	r3, [r3, #32]
 8007c2a:	496d      	ldr	r1, [pc, #436]	; (8007de0 <HAL_RCC_OscConfig+0x270>)
 8007c2c:	4313      	orrs	r3, r2
 8007c2e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007c30:	4b6b      	ldr	r3, [pc, #428]	; (8007de0 <HAL_RCC_OscConfig+0x270>)
 8007c32:	685b      	ldr	r3, [r3, #4]
 8007c34:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	69db      	ldr	r3, [r3, #28]
 8007c3c:	021b      	lsls	r3, r3, #8
 8007c3e:	4968      	ldr	r1, [pc, #416]	; (8007de0 <HAL_RCC_OscConfig+0x270>)
 8007c40:	4313      	orrs	r3, r2
 8007c42:	604b      	str	r3, [r1, #4]
 8007c44:	e025      	b.n	8007c92 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007c46:	4b66      	ldr	r3, [pc, #408]	; (8007de0 <HAL_RCC_OscConfig+0x270>)
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	4a65      	ldr	r2, [pc, #404]	; (8007de0 <HAL_RCC_OscConfig+0x270>)
 8007c4c:	f043 0308 	orr.w	r3, r3, #8
 8007c50:	6013      	str	r3, [r2, #0]
 8007c52:	4b63      	ldr	r3, [pc, #396]	; (8007de0 <HAL_RCC_OscConfig+0x270>)
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	6a1b      	ldr	r3, [r3, #32]
 8007c5e:	4960      	ldr	r1, [pc, #384]	; (8007de0 <HAL_RCC_OscConfig+0x270>)
 8007c60:	4313      	orrs	r3, r2
 8007c62:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007c64:	4b5e      	ldr	r3, [pc, #376]	; (8007de0 <HAL_RCC_OscConfig+0x270>)
 8007c66:	685b      	ldr	r3, [r3, #4]
 8007c68:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	69db      	ldr	r3, [r3, #28]
 8007c70:	021b      	lsls	r3, r3, #8
 8007c72:	495b      	ldr	r1, [pc, #364]	; (8007de0 <HAL_RCC_OscConfig+0x270>)
 8007c74:	4313      	orrs	r3, r2
 8007c76:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007c78:	69bb      	ldr	r3, [r7, #24]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d109      	bne.n	8007c92 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	6a1b      	ldr	r3, [r3, #32]
 8007c82:	4618      	mov	r0, r3
 8007c84:	f000 fdbe 	bl	8008804 <RCC_SetFlashLatencyFromMSIRange>
 8007c88:	4603      	mov	r3, r0
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d001      	beq.n	8007c92 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8007c8e:	2301      	movs	r3, #1
 8007c90:	e380      	b.n	8008394 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007c92:	f000 fcc1 	bl	8008618 <HAL_RCC_GetSysClockFreq>
 8007c96:	4602      	mov	r2, r0
 8007c98:	4b51      	ldr	r3, [pc, #324]	; (8007de0 <HAL_RCC_OscConfig+0x270>)
 8007c9a:	689b      	ldr	r3, [r3, #8]
 8007c9c:	091b      	lsrs	r3, r3, #4
 8007c9e:	f003 030f 	and.w	r3, r3, #15
 8007ca2:	4950      	ldr	r1, [pc, #320]	; (8007de4 <HAL_RCC_OscConfig+0x274>)
 8007ca4:	5ccb      	ldrb	r3, [r1, r3]
 8007ca6:	f003 031f 	and.w	r3, r3, #31
 8007caa:	fa22 f303 	lsr.w	r3, r2, r3
 8007cae:	4a4e      	ldr	r2, [pc, #312]	; (8007de8 <HAL_RCC_OscConfig+0x278>)
 8007cb0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8007cb2:	4b4e      	ldr	r3, [pc, #312]	; (8007dec <HAL_RCC_OscConfig+0x27c>)
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	f7fd fe12 	bl	80058e0 <HAL_InitTick>
 8007cbc:	4603      	mov	r3, r0
 8007cbe:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8007cc0:	7bfb      	ldrb	r3, [r7, #15]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d052      	beq.n	8007d6c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8007cc6:	7bfb      	ldrb	r3, [r7, #15]
 8007cc8:	e364      	b.n	8008394 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	699b      	ldr	r3, [r3, #24]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d032      	beq.n	8007d38 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8007cd2:	4b43      	ldr	r3, [pc, #268]	; (8007de0 <HAL_RCC_OscConfig+0x270>)
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	4a42      	ldr	r2, [pc, #264]	; (8007de0 <HAL_RCC_OscConfig+0x270>)
 8007cd8:	f043 0301 	orr.w	r3, r3, #1
 8007cdc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007cde:	f7fe fa55 	bl	800618c <HAL_GetTick>
 8007ce2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007ce4:	e008      	b.n	8007cf8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007ce6:	f7fe fa51 	bl	800618c <HAL_GetTick>
 8007cea:	4602      	mov	r2, r0
 8007cec:	693b      	ldr	r3, [r7, #16]
 8007cee:	1ad3      	subs	r3, r2, r3
 8007cf0:	2b02      	cmp	r3, #2
 8007cf2:	d901      	bls.n	8007cf8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8007cf4:	2303      	movs	r3, #3
 8007cf6:	e34d      	b.n	8008394 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007cf8:	4b39      	ldr	r3, [pc, #228]	; (8007de0 <HAL_RCC_OscConfig+0x270>)
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	f003 0302 	and.w	r3, r3, #2
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d0f0      	beq.n	8007ce6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007d04:	4b36      	ldr	r3, [pc, #216]	; (8007de0 <HAL_RCC_OscConfig+0x270>)
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	4a35      	ldr	r2, [pc, #212]	; (8007de0 <HAL_RCC_OscConfig+0x270>)
 8007d0a:	f043 0308 	orr.w	r3, r3, #8
 8007d0e:	6013      	str	r3, [r2, #0]
 8007d10:	4b33      	ldr	r3, [pc, #204]	; (8007de0 <HAL_RCC_OscConfig+0x270>)
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	6a1b      	ldr	r3, [r3, #32]
 8007d1c:	4930      	ldr	r1, [pc, #192]	; (8007de0 <HAL_RCC_OscConfig+0x270>)
 8007d1e:	4313      	orrs	r3, r2
 8007d20:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007d22:	4b2f      	ldr	r3, [pc, #188]	; (8007de0 <HAL_RCC_OscConfig+0x270>)
 8007d24:	685b      	ldr	r3, [r3, #4]
 8007d26:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	69db      	ldr	r3, [r3, #28]
 8007d2e:	021b      	lsls	r3, r3, #8
 8007d30:	492b      	ldr	r1, [pc, #172]	; (8007de0 <HAL_RCC_OscConfig+0x270>)
 8007d32:	4313      	orrs	r3, r2
 8007d34:	604b      	str	r3, [r1, #4]
 8007d36:	e01a      	b.n	8007d6e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8007d38:	4b29      	ldr	r3, [pc, #164]	; (8007de0 <HAL_RCC_OscConfig+0x270>)
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	4a28      	ldr	r2, [pc, #160]	; (8007de0 <HAL_RCC_OscConfig+0x270>)
 8007d3e:	f023 0301 	bic.w	r3, r3, #1
 8007d42:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007d44:	f7fe fa22 	bl	800618c <HAL_GetTick>
 8007d48:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8007d4a:	e008      	b.n	8007d5e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007d4c:	f7fe fa1e 	bl	800618c <HAL_GetTick>
 8007d50:	4602      	mov	r2, r0
 8007d52:	693b      	ldr	r3, [r7, #16]
 8007d54:	1ad3      	subs	r3, r2, r3
 8007d56:	2b02      	cmp	r3, #2
 8007d58:	d901      	bls.n	8007d5e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8007d5a:	2303      	movs	r3, #3
 8007d5c:	e31a      	b.n	8008394 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8007d5e:	4b20      	ldr	r3, [pc, #128]	; (8007de0 <HAL_RCC_OscConfig+0x270>)
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	f003 0302 	and.w	r3, r3, #2
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d1f0      	bne.n	8007d4c <HAL_RCC_OscConfig+0x1dc>
 8007d6a:	e000      	b.n	8007d6e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007d6c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	f003 0301 	and.w	r3, r3, #1
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d073      	beq.n	8007e62 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8007d7a:	69bb      	ldr	r3, [r7, #24]
 8007d7c:	2b08      	cmp	r3, #8
 8007d7e:	d005      	beq.n	8007d8c <HAL_RCC_OscConfig+0x21c>
 8007d80:	69bb      	ldr	r3, [r7, #24]
 8007d82:	2b0c      	cmp	r3, #12
 8007d84:	d10e      	bne.n	8007da4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8007d86:	697b      	ldr	r3, [r7, #20]
 8007d88:	2b03      	cmp	r3, #3
 8007d8a:	d10b      	bne.n	8007da4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007d8c:	4b14      	ldr	r3, [pc, #80]	; (8007de0 <HAL_RCC_OscConfig+0x270>)
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d063      	beq.n	8007e60 <HAL_RCC_OscConfig+0x2f0>
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	685b      	ldr	r3, [r3, #4]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d15f      	bne.n	8007e60 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8007da0:	2301      	movs	r3, #1
 8007da2:	e2f7      	b.n	8008394 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	685b      	ldr	r3, [r3, #4]
 8007da8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007dac:	d106      	bne.n	8007dbc <HAL_RCC_OscConfig+0x24c>
 8007dae:	4b0c      	ldr	r3, [pc, #48]	; (8007de0 <HAL_RCC_OscConfig+0x270>)
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	4a0b      	ldr	r2, [pc, #44]	; (8007de0 <HAL_RCC_OscConfig+0x270>)
 8007db4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007db8:	6013      	str	r3, [r2, #0]
 8007dba:	e025      	b.n	8007e08 <HAL_RCC_OscConfig+0x298>
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	685b      	ldr	r3, [r3, #4]
 8007dc0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007dc4:	d114      	bne.n	8007df0 <HAL_RCC_OscConfig+0x280>
 8007dc6:	4b06      	ldr	r3, [pc, #24]	; (8007de0 <HAL_RCC_OscConfig+0x270>)
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	4a05      	ldr	r2, [pc, #20]	; (8007de0 <HAL_RCC_OscConfig+0x270>)
 8007dcc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007dd0:	6013      	str	r3, [r2, #0]
 8007dd2:	4b03      	ldr	r3, [pc, #12]	; (8007de0 <HAL_RCC_OscConfig+0x270>)
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	4a02      	ldr	r2, [pc, #8]	; (8007de0 <HAL_RCC_OscConfig+0x270>)
 8007dd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007ddc:	6013      	str	r3, [r2, #0]
 8007dde:	e013      	b.n	8007e08 <HAL_RCC_OscConfig+0x298>
 8007de0:	40021000 	.word	0x40021000
 8007de4:	08014408 	.word	0x08014408
 8007de8:	20000010 	.word	0x20000010
 8007dec:	20000014 	.word	0x20000014
 8007df0:	4ba0      	ldr	r3, [pc, #640]	; (8008074 <HAL_RCC_OscConfig+0x504>)
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	4a9f      	ldr	r2, [pc, #636]	; (8008074 <HAL_RCC_OscConfig+0x504>)
 8007df6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007dfa:	6013      	str	r3, [r2, #0]
 8007dfc:	4b9d      	ldr	r3, [pc, #628]	; (8008074 <HAL_RCC_OscConfig+0x504>)
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	4a9c      	ldr	r2, [pc, #624]	; (8008074 <HAL_RCC_OscConfig+0x504>)
 8007e02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007e06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	685b      	ldr	r3, [r3, #4]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d013      	beq.n	8007e38 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e10:	f7fe f9bc 	bl	800618c <HAL_GetTick>
 8007e14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007e16:	e008      	b.n	8007e2a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007e18:	f7fe f9b8 	bl	800618c <HAL_GetTick>
 8007e1c:	4602      	mov	r2, r0
 8007e1e:	693b      	ldr	r3, [r7, #16]
 8007e20:	1ad3      	subs	r3, r2, r3
 8007e22:	2b64      	cmp	r3, #100	; 0x64
 8007e24:	d901      	bls.n	8007e2a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8007e26:	2303      	movs	r3, #3
 8007e28:	e2b4      	b.n	8008394 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007e2a:	4b92      	ldr	r3, [pc, #584]	; (8008074 <HAL_RCC_OscConfig+0x504>)
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d0f0      	beq.n	8007e18 <HAL_RCC_OscConfig+0x2a8>
 8007e36:	e014      	b.n	8007e62 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e38:	f7fe f9a8 	bl	800618c <HAL_GetTick>
 8007e3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007e3e:	e008      	b.n	8007e52 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007e40:	f7fe f9a4 	bl	800618c <HAL_GetTick>
 8007e44:	4602      	mov	r2, r0
 8007e46:	693b      	ldr	r3, [r7, #16]
 8007e48:	1ad3      	subs	r3, r2, r3
 8007e4a:	2b64      	cmp	r3, #100	; 0x64
 8007e4c:	d901      	bls.n	8007e52 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8007e4e:	2303      	movs	r3, #3
 8007e50:	e2a0      	b.n	8008394 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007e52:	4b88      	ldr	r3, [pc, #544]	; (8008074 <HAL_RCC_OscConfig+0x504>)
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d1f0      	bne.n	8007e40 <HAL_RCC_OscConfig+0x2d0>
 8007e5e:	e000      	b.n	8007e62 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007e60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	f003 0302 	and.w	r3, r3, #2
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d060      	beq.n	8007f30 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8007e6e:	69bb      	ldr	r3, [r7, #24]
 8007e70:	2b04      	cmp	r3, #4
 8007e72:	d005      	beq.n	8007e80 <HAL_RCC_OscConfig+0x310>
 8007e74:	69bb      	ldr	r3, [r7, #24]
 8007e76:	2b0c      	cmp	r3, #12
 8007e78:	d119      	bne.n	8007eae <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8007e7a:	697b      	ldr	r3, [r7, #20]
 8007e7c:	2b02      	cmp	r3, #2
 8007e7e:	d116      	bne.n	8007eae <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007e80:	4b7c      	ldr	r3, [pc, #496]	; (8008074 <HAL_RCC_OscConfig+0x504>)
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d005      	beq.n	8007e98 <HAL_RCC_OscConfig+0x328>
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	68db      	ldr	r3, [r3, #12]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d101      	bne.n	8007e98 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8007e94:	2301      	movs	r3, #1
 8007e96:	e27d      	b.n	8008394 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007e98:	4b76      	ldr	r3, [pc, #472]	; (8008074 <HAL_RCC_OscConfig+0x504>)
 8007e9a:	685b      	ldr	r3, [r3, #4]
 8007e9c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	691b      	ldr	r3, [r3, #16]
 8007ea4:	061b      	lsls	r3, r3, #24
 8007ea6:	4973      	ldr	r1, [pc, #460]	; (8008074 <HAL_RCC_OscConfig+0x504>)
 8007ea8:	4313      	orrs	r3, r2
 8007eaa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007eac:	e040      	b.n	8007f30 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	68db      	ldr	r3, [r3, #12]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d023      	beq.n	8007efe <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007eb6:	4b6f      	ldr	r3, [pc, #444]	; (8008074 <HAL_RCC_OscConfig+0x504>)
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	4a6e      	ldr	r2, [pc, #440]	; (8008074 <HAL_RCC_OscConfig+0x504>)
 8007ebc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007ec0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ec2:	f7fe f963 	bl	800618c <HAL_GetTick>
 8007ec6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007ec8:	e008      	b.n	8007edc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007eca:	f7fe f95f 	bl	800618c <HAL_GetTick>
 8007ece:	4602      	mov	r2, r0
 8007ed0:	693b      	ldr	r3, [r7, #16]
 8007ed2:	1ad3      	subs	r3, r2, r3
 8007ed4:	2b02      	cmp	r3, #2
 8007ed6:	d901      	bls.n	8007edc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8007ed8:	2303      	movs	r3, #3
 8007eda:	e25b      	b.n	8008394 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007edc:	4b65      	ldr	r3, [pc, #404]	; (8008074 <HAL_RCC_OscConfig+0x504>)
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d0f0      	beq.n	8007eca <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007ee8:	4b62      	ldr	r3, [pc, #392]	; (8008074 <HAL_RCC_OscConfig+0x504>)
 8007eea:	685b      	ldr	r3, [r3, #4]
 8007eec:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	691b      	ldr	r3, [r3, #16]
 8007ef4:	061b      	lsls	r3, r3, #24
 8007ef6:	495f      	ldr	r1, [pc, #380]	; (8008074 <HAL_RCC_OscConfig+0x504>)
 8007ef8:	4313      	orrs	r3, r2
 8007efa:	604b      	str	r3, [r1, #4]
 8007efc:	e018      	b.n	8007f30 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007efe:	4b5d      	ldr	r3, [pc, #372]	; (8008074 <HAL_RCC_OscConfig+0x504>)
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	4a5c      	ldr	r2, [pc, #368]	; (8008074 <HAL_RCC_OscConfig+0x504>)
 8007f04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007f08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f0a:	f7fe f93f 	bl	800618c <HAL_GetTick>
 8007f0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007f10:	e008      	b.n	8007f24 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007f12:	f7fe f93b 	bl	800618c <HAL_GetTick>
 8007f16:	4602      	mov	r2, r0
 8007f18:	693b      	ldr	r3, [r7, #16]
 8007f1a:	1ad3      	subs	r3, r2, r3
 8007f1c:	2b02      	cmp	r3, #2
 8007f1e:	d901      	bls.n	8007f24 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8007f20:	2303      	movs	r3, #3
 8007f22:	e237      	b.n	8008394 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007f24:	4b53      	ldr	r3, [pc, #332]	; (8008074 <HAL_RCC_OscConfig+0x504>)
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d1f0      	bne.n	8007f12 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	f003 0308 	and.w	r3, r3, #8
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d03c      	beq.n	8007fb6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	695b      	ldr	r3, [r3, #20]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d01c      	beq.n	8007f7e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007f44:	4b4b      	ldr	r3, [pc, #300]	; (8008074 <HAL_RCC_OscConfig+0x504>)
 8007f46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007f4a:	4a4a      	ldr	r2, [pc, #296]	; (8008074 <HAL_RCC_OscConfig+0x504>)
 8007f4c:	f043 0301 	orr.w	r3, r3, #1
 8007f50:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f54:	f7fe f91a 	bl	800618c <HAL_GetTick>
 8007f58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007f5a:	e008      	b.n	8007f6e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007f5c:	f7fe f916 	bl	800618c <HAL_GetTick>
 8007f60:	4602      	mov	r2, r0
 8007f62:	693b      	ldr	r3, [r7, #16]
 8007f64:	1ad3      	subs	r3, r2, r3
 8007f66:	2b02      	cmp	r3, #2
 8007f68:	d901      	bls.n	8007f6e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8007f6a:	2303      	movs	r3, #3
 8007f6c:	e212      	b.n	8008394 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007f6e:	4b41      	ldr	r3, [pc, #260]	; (8008074 <HAL_RCC_OscConfig+0x504>)
 8007f70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007f74:	f003 0302 	and.w	r3, r3, #2
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d0ef      	beq.n	8007f5c <HAL_RCC_OscConfig+0x3ec>
 8007f7c:	e01b      	b.n	8007fb6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007f7e:	4b3d      	ldr	r3, [pc, #244]	; (8008074 <HAL_RCC_OscConfig+0x504>)
 8007f80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007f84:	4a3b      	ldr	r2, [pc, #236]	; (8008074 <HAL_RCC_OscConfig+0x504>)
 8007f86:	f023 0301 	bic.w	r3, r3, #1
 8007f8a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f8e:	f7fe f8fd 	bl	800618c <HAL_GetTick>
 8007f92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007f94:	e008      	b.n	8007fa8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007f96:	f7fe f8f9 	bl	800618c <HAL_GetTick>
 8007f9a:	4602      	mov	r2, r0
 8007f9c:	693b      	ldr	r3, [r7, #16]
 8007f9e:	1ad3      	subs	r3, r2, r3
 8007fa0:	2b02      	cmp	r3, #2
 8007fa2:	d901      	bls.n	8007fa8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8007fa4:	2303      	movs	r3, #3
 8007fa6:	e1f5      	b.n	8008394 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007fa8:	4b32      	ldr	r3, [pc, #200]	; (8008074 <HAL_RCC_OscConfig+0x504>)
 8007faa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007fae:	f003 0302 	and.w	r3, r3, #2
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d1ef      	bne.n	8007f96 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	f003 0304 	and.w	r3, r3, #4
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	f000 80a6 	beq.w	8008110 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8007fc8:	4b2a      	ldr	r3, [pc, #168]	; (8008074 <HAL_RCC_OscConfig+0x504>)
 8007fca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007fcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d10d      	bne.n	8007ff0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007fd4:	4b27      	ldr	r3, [pc, #156]	; (8008074 <HAL_RCC_OscConfig+0x504>)
 8007fd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007fd8:	4a26      	ldr	r2, [pc, #152]	; (8008074 <HAL_RCC_OscConfig+0x504>)
 8007fda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007fde:	6593      	str	r3, [r2, #88]	; 0x58
 8007fe0:	4b24      	ldr	r3, [pc, #144]	; (8008074 <HAL_RCC_OscConfig+0x504>)
 8007fe2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007fe4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007fe8:	60bb      	str	r3, [r7, #8]
 8007fea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007fec:	2301      	movs	r3, #1
 8007fee:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007ff0:	4b21      	ldr	r3, [pc, #132]	; (8008078 <HAL_RCC_OscConfig+0x508>)
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d118      	bne.n	800802e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007ffc:	4b1e      	ldr	r3, [pc, #120]	; (8008078 <HAL_RCC_OscConfig+0x508>)
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	4a1d      	ldr	r2, [pc, #116]	; (8008078 <HAL_RCC_OscConfig+0x508>)
 8008002:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008006:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008008:	f7fe f8c0 	bl	800618c <HAL_GetTick>
 800800c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800800e:	e008      	b.n	8008022 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008010:	f7fe f8bc 	bl	800618c <HAL_GetTick>
 8008014:	4602      	mov	r2, r0
 8008016:	693b      	ldr	r3, [r7, #16]
 8008018:	1ad3      	subs	r3, r2, r3
 800801a:	2b02      	cmp	r3, #2
 800801c:	d901      	bls.n	8008022 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800801e:	2303      	movs	r3, #3
 8008020:	e1b8      	b.n	8008394 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008022:	4b15      	ldr	r3, [pc, #84]	; (8008078 <HAL_RCC_OscConfig+0x508>)
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800802a:	2b00      	cmp	r3, #0
 800802c:	d0f0      	beq.n	8008010 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	689b      	ldr	r3, [r3, #8]
 8008032:	2b01      	cmp	r3, #1
 8008034:	d108      	bne.n	8008048 <HAL_RCC_OscConfig+0x4d8>
 8008036:	4b0f      	ldr	r3, [pc, #60]	; (8008074 <HAL_RCC_OscConfig+0x504>)
 8008038:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800803c:	4a0d      	ldr	r2, [pc, #52]	; (8008074 <HAL_RCC_OscConfig+0x504>)
 800803e:	f043 0301 	orr.w	r3, r3, #1
 8008042:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008046:	e029      	b.n	800809c <HAL_RCC_OscConfig+0x52c>
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	689b      	ldr	r3, [r3, #8]
 800804c:	2b05      	cmp	r3, #5
 800804e:	d115      	bne.n	800807c <HAL_RCC_OscConfig+0x50c>
 8008050:	4b08      	ldr	r3, [pc, #32]	; (8008074 <HAL_RCC_OscConfig+0x504>)
 8008052:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008056:	4a07      	ldr	r2, [pc, #28]	; (8008074 <HAL_RCC_OscConfig+0x504>)
 8008058:	f043 0304 	orr.w	r3, r3, #4
 800805c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008060:	4b04      	ldr	r3, [pc, #16]	; (8008074 <HAL_RCC_OscConfig+0x504>)
 8008062:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008066:	4a03      	ldr	r2, [pc, #12]	; (8008074 <HAL_RCC_OscConfig+0x504>)
 8008068:	f043 0301 	orr.w	r3, r3, #1
 800806c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008070:	e014      	b.n	800809c <HAL_RCC_OscConfig+0x52c>
 8008072:	bf00      	nop
 8008074:	40021000 	.word	0x40021000
 8008078:	40007000 	.word	0x40007000
 800807c:	4b9d      	ldr	r3, [pc, #628]	; (80082f4 <HAL_RCC_OscConfig+0x784>)
 800807e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008082:	4a9c      	ldr	r2, [pc, #624]	; (80082f4 <HAL_RCC_OscConfig+0x784>)
 8008084:	f023 0301 	bic.w	r3, r3, #1
 8008088:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800808c:	4b99      	ldr	r3, [pc, #612]	; (80082f4 <HAL_RCC_OscConfig+0x784>)
 800808e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008092:	4a98      	ldr	r2, [pc, #608]	; (80082f4 <HAL_RCC_OscConfig+0x784>)
 8008094:	f023 0304 	bic.w	r3, r3, #4
 8008098:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	689b      	ldr	r3, [r3, #8]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d016      	beq.n	80080d2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80080a4:	f7fe f872 	bl	800618c <HAL_GetTick>
 80080a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80080aa:	e00a      	b.n	80080c2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80080ac:	f7fe f86e 	bl	800618c <HAL_GetTick>
 80080b0:	4602      	mov	r2, r0
 80080b2:	693b      	ldr	r3, [r7, #16]
 80080b4:	1ad3      	subs	r3, r2, r3
 80080b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80080ba:	4293      	cmp	r3, r2
 80080bc:	d901      	bls.n	80080c2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80080be:	2303      	movs	r3, #3
 80080c0:	e168      	b.n	8008394 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80080c2:	4b8c      	ldr	r3, [pc, #560]	; (80082f4 <HAL_RCC_OscConfig+0x784>)
 80080c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80080c8:	f003 0302 	and.w	r3, r3, #2
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d0ed      	beq.n	80080ac <HAL_RCC_OscConfig+0x53c>
 80080d0:	e015      	b.n	80080fe <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80080d2:	f7fe f85b 	bl	800618c <HAL_GetTick>
 80080d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80080d8:	e00a      	b.n	80080f0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80080da:	f7fe f857 	bl	800618c <HAL_GetTick>
 80080de:	4602      	mov	r2, r0
 80080e0:	693b      	ldr	r3, [r7, #16]
 80080e2:	1ad3      	subs	r3, r2, r3
 80080e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80080e8:	4293      	cmp	r3, r2
 80080ea:	d901      	bls.n	80080f0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80080ec:	2303      	movs	r3, #3
 80080ee:	e151      	b.n	8008394 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80080f0:	4b80      	ldr	r3, [pc, #512]	; (80082f4 <HAL_RCC_OscConfig+0x784>)
 80080f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80080f6:	f003 0302 	and.w	r3, r3, #2
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d1ed      	bne.n	80080da <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80080fe:	7ffb      	ldrb	r3, [r7, #31]
 8008100:	2b01      	cmp	r3, #1
 8008102:	d105      	bne.n	8008110 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008104:	4b7b      	ldr	r3, [pc, #492]	; (80082f4 <HAL_RCC_OscConfig+0x784>)
 8008106:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008108:	4a7a      	ldr	r2, [pc, #488]	; (80082f4 <HAL_RCC_OscConfig+0x784>)
 800810a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800810e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	f003 0320 	and.w	r3, r3, #32
 8008118:	2b00      	cmp	r3, #0
 800811a:	d03c      	beq.n	8008196 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008120:	2b00      	cmp	r3, #0
 8008122:	d01c      	beq.n	800815e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008124:	4b73      	ldr	r3, [pc, #460]	; (80082f4 <HAL_RCC_OscConfig+0x784>)
 8008126:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800812a:	4a72      	ldr	r2, [pc, #456]	; (80082f4 <HAL_RCC_OscConfig+0x784>)
 800812c:	f043 0301 	orr.w	r3, r3, #1
 8008130:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008134:	f7fe f82a 	bl	800618c <HAL_GetTick>
 8008138:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800813a:	e008      	b.n	800814e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800813c:	f7fe f826 	bl	800618c <HAL_GetTick>
 8008140:	4602      	mov	r2, r0
 8008142:	693b      	ldr	r3, [r7, #16]
 8008144:	1ad3      	subs	r3, r2, r3
 8008146:	2b02      	cmp	r3, #2
 8008148:	d901      	bls.n	800814e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800814a:	2303      	movs	r3, #3
 800814c:	e122      	b.n	8008394 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800814e:	4b69      	ldr	r3, [pc, #420]	; (80082f4 <HAL_RCC_OscConfig+0x784>)
 8008150:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008154:	f003 0302 	and.w	r3, r3, #2
 8008158:	2b00      	cmp	r3, #0
 800815a:	d0ef      	beq.n	800813c <HAL_RCC_OscConfig+0x5cc>
 800815c:	e01b      	b.n	8008196 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800815e:	4b65      	ldr	r3, [pc, #404]	; (80082f4 <HAL_RCC_OscConfig+0x784>)
 8008160:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008164:	4a63      	ldr	r2, [pc, #396]	; (80082f4 <HAL_RCC_OscConfig+0x784>)
 8008166:	f023 0301 	bic.w	r3, r3, #1
 800816a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800816e:	f7fe f80d 	bl	800618c <HAL_GetTick>
 8008172:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008174:	e008      	b.n	8008188 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008176:	f7fe f809 	bl	800618c <HAL_GetTick>
 800817a:	4602      	mov	r2, r0
 800817c:	693b      	ldr	r3, [r7, #16]
 800817e:	1ad3      	subs	r3, r2, r3
 8008180:	2b02      	cmp	r3, #2
 8008182:	d901      	bls.n	8008188 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8008184:	2303      	movs	r3, #3
 8008186:	e105      	b.n	8008394 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008188:	4b5a      	ldr	r3, [pc, #360]	; (80082f4 <HAL_RCC_OscConfig+0x784>)
 800818a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800818e:	f003 0302 	and.w	r3, r3, #2
 8008192:	2b00      	cmp	r3, #0
 8008194:	d1ef      	bne.n	8008176 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800819a:	2b00      	cmp	r3, #0
 800819c:	f000 80f9 	beq.w	8008392 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081a4:	2b02      	cmp	r3, #2
 80081a6:	f040 80cf 	bne.w	8008348 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80081aa:	4b52      	ldr	r3, [pc, #328]	; (80082f4 <HAL_RCC_OscConfig+0x784>)
 80081ac:	68db      	ldr	r3, [r3, #12]
 80081ae:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80081b0:	697b      	ldr	r3, [r7, #20]
 80081b2:	f003 0203 	and.w	r2, r3, #3
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081ba:	429a      	cmp	r2, r3
 80081bc:	d12c      	bne.n	8008218 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80081be:	697b      	ldr	r3, [r7, #20]
 80081c0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081c8:	3b01      	subs	r3, #1
 80081ca:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80081cc:	429a      	cmp	r2, r3
 80081ce:	d123      	bne.n	8008218 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80081d0:	697b      	ldr	r3, [r7, #20]
 80081d2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081da:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80081dc:	429a      	cmp	r2, r3
 80081de:	d11b      	bne.n	8008218 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80081e0:	697b      	ldr	r3, [r7, #20]
 80081e2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081ea:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80081ec:	429a      	cmp	r2, r3
 80081ee:	d113      	bne.n	8008218 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80081f0:	697b      	ldr	r3, [r7, #20]
 80081f2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081fa:	085b      	lsrs	r3, r3, #1
 80081fc:	3b01      	subs	r3, #1
 80081fe:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008200:	429a      	cmp	r2, r3
 8008202:	d109      	bne.n	8008218 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8008204:	697b      	ldr	r3, [r7, #20]
 8008206:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800820e:	085b      	lsrs	r3, r3, #1
 8008210:	3b01      	subs	r3, #1
 8008212:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008214:	429a      	cmp	r2, r3
 8008216:	d071      	beq.n	80082fc <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8008218:	69bb      	ldr	r3, [r7, #24]
 800821a:	2b0c      	cmp	r3, #12
 800821c:	d068      	beq.n	80082f0 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800821e:	4b35      	ldr	r3, [pc, #212]	; (80082f4 <HAL_RCC_OscConfig+0x784>)
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008226:	2b00      	cmp	r3, #0
 8008228:	d105      	bne.n	8008236 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800822a:	4b32      	ldr	r3, [pc, #200]	; (80082f4 <HAL_RCC_OscConfig+0x784>)
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008232:	2b00      	cmp	r3, #0
 8008234:	d001      	beq.n	800823a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8008236:	2301      	movs	r3, #1
 8008238:	e0ac      	b.n	8008394 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800823a:	4b2e      	ldr	r3, [pc, #184]	; (80082f4 <HAL_RCC_OscConfig+0x784>)
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	4a2d      	ldr	r2, [pc, #180]	; (80082f4 <HAL_RCC_OscConfig+0x784>)
 8008240:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008244:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8008246:	f7fd ffa1 	bl	800618c <HAL_GetTick>
 800824a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800824c:	e008      	b.n	8008260 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800824e:	f7fd ff9d 	bl	800618c <HAL_GetTick>
 8008252:	4602      	mov	r2, r0
 8008254:	693b      	ldr	r3, [r7, #16]
 8008256:	1ad3      	subs	r3, r2, r3
 8008258:	2b02      	cmp	r3, #2
 800825a:	d901      	bls.n	8008260 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 800825c:	2303      	movs	r3, #3
 800825e:	e099      	b.n	8008394 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008260:	4b24      	ldr	r3, [pc, #144]	; (80082f4 <HAL_RCC_OscConfig+0x784>)
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008268:	2b00      	cmp	r3, #0
 800826a:	d1f0      	bne.n	800824e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800826c:	4b21      	ldr	r3, [pc, #132]	; (80082f4 <HAL_RCC_OscConfig+0x784>)
 800826e:	68da      	ldr	r2, [r3, #12]
 8008270:	4b21      	ldr	r3, [pc, #132]	; (80082f8 <HAL_RCC_OscConfig+0x788>)
 8008272:	4013      	ands	r3, r2
 8008274:	687a      	ldr	r2, [r7, #4]
 8008276:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8008278:	687a      	ldr	r2, [r7, #4]
 800827a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800827c:	3a01      	subs	r2, #1
 800827e:	0112      	lsls	r2, r2, #4
 8008280:	4311      	orrs	r1, r2
 8008282:	687a      	ldr	r2, [r7, #4]
 8008284:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008286:	0212      	lsls	r2, r2, #8
 8008288:	4311      	orrs	r1, r2
 800828a:	687a      	ldr	r2, [r7, #4]
 800828c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800828e:	0852      	lsrs	r2, r2, #1
 8008290:	3a01      	subs	r2, #1
 8008292:	0552      	lsls	r2, r2, #21
 8008294:	4311      	orrs	r1, r2
 8008296:	687a      	ldr	r2, [r7, #4]
 8008298:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800829a:	0852      	lsrs	r2, r2, #1
 800829c:	3a01      	subs	r2, #1
 800829e:	0652      	lsls	r2, r2, #25
 80082a0:	4311      	orrs	r1, r2
 80082a2:	687a      	ldr	r2, [r7, #4]
 80082a4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80082a6:	06d2      	lsls	r2, r2, #27
 80082a8:	430a      	orrs	r2, r1
 80082aa:	4912      	ldr	r1, [pc, #72]	; (80082f4 <HAL_RCC_OscConfig+0x784>)
 80082ac:	4313      	orrs	r3, r2
 80082ae:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80082b0:	4b10      	ldr	r3, [pc, #64]	; (80082f4 <HAL_RCC_OscConfig+0x784>)
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	4a0f      	ldr	r2, [pc, #60]	; (80082f4 <HAL_RCC_OscConfig+0x784>)
 80082b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80082ba:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80082bc:	4b0d      	ldr	r3, [pc, #52]	; (80082f4 <HAL_RCC_OscConfig+0x784>)
 80082be:	68db      	ldr	r3, [r3, #12]
 80082c0:	4a0c      	ldr	r2, [pc, #48]	; (80082f4 <HAL_RCC_OscConfig+0x784>)
 80082c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80082c6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80082c8:	f7fd ff60 	bl	800618c <HAL_GetTick>
 80082cc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80082ce:	e008      	b.n	80082e2 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80082d0:	f7fd ff5c 	bl	800618c <HAL_GetTick>
 80082d4:	4602      	mov	r2, r0
 80082d6:	693b      	ldr	r3, [r7, #16]
 80082d8:	1ad3      	subs	r3, r2, r3
 80082da:	2b02      	cmp	r3, #2
 80082dc:	d901      	bls.n	80082e2 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80082de:	2303      	movs	r3, #3
 80082e0:	e058      	b.n	8008394 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80082e2:	4b04      	ldr	r3, [pc, #16]	; (80082f4 <HAL_RCC_OscConfig+0x784>)
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d0f0      	beq.n	80082d0 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80082ee:	e050      	b.n	8008392 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80082f0:	2301      	movs	r3, #1
 80082f2:	e04f      	b.n	8008394 <HAL_RCC_OscConfig+0x824>
 80082f4:	40021000 	.word	0x40021000
 80082f8:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80082fc:	4b27      	ldr	r3, [pc, #156]	; (800839c <HAL_RCC_OscConfig+0x82c>)
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008304:	2b00      	cmp	r3, #0
 8008306:	d144      	bne.n	8008392 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8008308:	4b24      	ldr	r3, [pc, #144]	; (800839c <HAL_RCC_OscConfig+0x82c>)
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	4a23      	ldr	r2, [pc, #140]	; (800839c <HAL_RCC_OscConfig+0x82c>)
 800830e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008312:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008314:	4b21      	ldr	r3, [pc, #132]	; (800839c <HAL_RCC_OscConfig+0x82c>)
 8008316:	68db      	ldr	r3, [r3, #12]
 8008318:	4a20      	ldr	r2, [pc, #128]	; (800839c <HAL_RCC_OscConfig+0x82c>)
 800831a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800831e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008320:	f7fd ff34 	bl	800618c <HAL_GetTick>
 8008324:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008326:	e008      	b.n	800833a <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008328:	f7fd ff30 	bl	800618c <HAL_GetTick>
 800832c:	4602      	mov	r2, r0
 800832e:	693b      	ldr	r3, [r7, #16]
 8008330:	1ad3      	subs	r3, r2, r3
 8008332:	2b02      	cmp	r3, #2
 8008334:	d901      	bls.n	800833a <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8008336:	2303      	movs	r3, #3
 8008338:	e02c      	b.n	8008394 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800833a:	4b18      	ldr	r3, [pc, #96]	; (800839c <HAL_RCC_OscConfig+0x82c>)
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008342:	2b00      	cmp	r3, #0
 8008344:	d0f0      	beq.n	8008328 <HAL_RCC_OscConfig+0x7b8>
 8008346:	e024      	b.n	8008392 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8008348:	69bb      	ldr	r3, [r7, #24]
 800834a:	2b0c      	cmp	r3, #12
 800834c:	d01f      	beq.n	800838e <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800834e:	4b13      	ldr	r3, [pc, #76]	; (800839c <HAL_RCC_OscConfig+0x82c>)
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	4a12      	ldr	r2, [pc, #72]	; (800839c <HAL_RCC_OscConfig+0x82c>)
 8008354:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008358:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800835a:	f7fd ff17 	bl	800618c <HAL_GetTick>
 800835e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008360:	e008      	b.n	8008374 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008362:	f7fd ff13 	bl	800618c <HAL_GetTick>
 8008366:	4602      	mov	r2, r0
 8008368:	693b      	ldr	r3, [r7, #16]
 800836a:	1ad3      	subs	r3, r2, r3
 800836c:	2b02      	cmp	r3, #2
 800836e:	d901      	bls.n	8008374 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8008370:	2303      	movs	r3, #3
 8008372:	e00f      	b.n	8008394 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008374:	4b09      	ldr	r3, [pc, #36]	; (800839c <HAL_RCC_OscConfig+0x82c>)
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800837c:	2b00      	cmp	r3, #0
 800837e:	d1f0      	bne.n	8008362 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8008380:	4b06      	ldr	r3, [pc, #24]	; (800839c <HAL_RCC_OscConfig+0x82c>)
 8008382:	68da      	ldr	r2, [r3, #12]
 8008384:	4905      	ldr	r1, [pc, #20]	; (800839c <HAL_RCC_OscConfig+0x82c>)
 8008386:	4b06      	ldr	r3, [pc, #24]	; (80083a0 <HAL_RCC_OscConfig+0x830>)
 8008388:	4013      	ands	r3, r2
 800838a:	60cb      	str	r3, [r1, #12]
 800838c:	e001      	b.n	8008392 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800838e:	2301      	movs	r3, #1
 8008390:	e000      	b.n	8008394 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8008392:	2300      	movs	r3, #0
}
 8008394:	4618      	mov	r0, r3
 8008396:	3720      	adds	r7, #32
 8008398:	46bd      	mov	sp, r7
 800839a:	bd80      	pop	{r7, pc}
 800839c:	40021000 	.word	0x40021000
 80083a0:	feeefffc 	.word	0xfeeefffc

080083a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b086      	sub	sp, #24
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
 80083ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80083ae:	2300      	movs	r3, #0
 80083b0:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d101      	bne.n	80083bc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80083b8:	2301      	movs	r3, #1
 80083ba:	e11d      	b.n	80085f8 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80083bc:	4b90      	ldr	r3, [pc, #576]	; (8008600 <HAL_RCC_ClockConfig+0x25c>)
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	f003 030f 	and.w	r3, r3, #15
 80083c4:	683a      	ldr	r2, [r7, #0]
 80083c6:	429a      	cmp	r2, r3
 80083c8:	d910      	bls.n	80083ec <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80083ca:	4b8d      	ldr	r3, [pc, #564]	; (8008600 <HAL_RCC_ClockConfig+0x25c>)
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	f023 020f 	bic.w	r2, r3, #15
 80083d2:	498b      	ldr	r1, [pc, #556]	; (8008600 <HAL_RCC_ClockConfig+0x25c>)
 80083d4:	683b      	ldr	r3, [r7, #0]
 80083d6:	4313      	orrs	r3, r2
 80083d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80083da:	4b89      	ldr	r3, [pc, #548]	; (8008600 <HAL_RCC_ClockConfig+0x25c>)
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	f003 030f 	and.w	r3, r3, #15
 80083e2:	683a      	ldr	r2, [r7, #0]
 80083e4:	429a      	cmp	r2, r3
 80083e6:	d001      	beq.n	80083ec <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80083e8:	2301      	movs	r3, #1
 80083ea:	e105      	b.n	80085f8 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	f003 0302 	and.w	r3, r3, #2
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d010      	beq.n	800841a <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	689a      	ldr	r2, [r3, #8]
 80083fc:	4b81      	ldr	r3, [pc, #516]	; (8008604 <HAL_RCC_ClockConfig+0x260>)
 80083fe:	689b      	ldr	r3, [r3, #8]
 8008400:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008404:	429a      	cmp	r2, r3
 8008406:	d908      	bls.n	800841a <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008408:	4b7e      	ldr	r3, [pc, #504]	; (8008604 <HAL_RCC_ClockConfig+0x260>)
 800840a:	689b      	ldr	r3, [r3, #8]
 800840c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	689b      	ldr	r3, [r3, #8]
 8008414:	497b      	ldr	r1, [pc, #492]	; (8008604 <HAL_RCC_ClockConfig+0x260>)
 8008416:	4313      	orrs	r3, r2
 8008418:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	f003 0301 	and.w	r3, r3, #1
 8008422:	2b00      	cmp	r3, #0
 8008424:	d079      	beq.n	800851a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	685b      	ldr	r3, [r3, #4]
 800842a:	2b03      	cmp	r3, #3
 800842c:	d11e      	bne.n	800846c <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800842e:	4b75      	ldr	r3, [pc, #468]	; (8008604 <HAL_RCC_ClockConfig+0x260>)
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008436:	2b00      	cmp	r3, #0
 8008438:	d101      	bne.n	800843e <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 800843a:	2301      	movs	r3, #1
 800843c:	e0dc      	b.n	80085f8 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800843e:	f000 fa3b 	bl	80088b8 <RCC_GetSysClockFreqFromPLLSource>
 8008442:	4603      	mov	r3, r0
 8008444:	4a70      	ldr	r2, [pc, #448]	; (8008608 <HAL_RCC_ClockConfig+0x264>)
 8008446:	4293      	cmp	r3, r2
 8008448:	d946      	bls.n	80084d8 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800844a:	4b6e      	ldr	r3, [pc, #440]	; (8008604 <HAL_RCC_ClockConfig+0x260>)
 800844c:	689b      	ldr	r3, [r3, #8]
 800844e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008452:	2b00      	cmp	r3, #0
 8008454:	d140      	bne.n	80084d8 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8008456:	4b6b      	ldr	r3, [pc, #428]	; (8008604 <HAL_RCC_ClockConfig+0x260>)
 8008458:	689b      	ldr	r3, [r3, #8]
 800845a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800845e:	4a69      	ldr	r2, [pc, #420]	; (8008604 <HAL_RCC_ClockConfig+0x260>)
 8008460:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008464:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8008466:	2380      	movs	r3, #128	; 0x80
 8008468:	617b      	str	r3, [r7, #20]
 800846a:	e035      	b.n	80084d8 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	685b      	ldr	r3, [r3, #4]
 8008470:	2b02      	cmp	r3, #2
 8008472:	d107      	bne.n	8008484 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008474:	4b63      	ldr	r3, [pc, #396]	; (8008604 <HAL_RCC_ClockConfig+0x260>)
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800847c:	2b00      	cmp	r3, #0
 800847e:	d115      	bne.n	80084ac <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8008480:	2301      	movs	r3, #1
 8008482:	e0b9      	b.n	80085f8 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	685b      	ldr	r3, [r3, #4]
 8008488:	2b00      	cmp	r3, #0
 800848a:	d107      	bne.n	800849c <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800848c:	4b5d      	ldr	r3, [pc, #372]	; (8008604 <HAL_RCC_ClockConfig+0x260>)
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	f003 0302 	and.w	r3, r3, #2
 8008494:	2b00      	cmp	r3, #0
 8008496:	d109      	bne.n	80084ac <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8008498:	2301      	movs	r3, #1
 800849a:	e0ad      	b.n	80085f8 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800849c:	4b59      	ldr	r3, [pc, #356]	; (8008604 <HAL_RCC_ClockConfig+0x260>)
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d101      	bne.n	80084ac <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80084a8:	2301      	movs	r3, #1
 80084aa:	e0a5      	b.n	80085f8 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80084ac:	f000 f8b4 	bl	8008618 <HAL_RCC_GetSysClockFreq>
 80084b0:	4603      	mov	r3, r0
 80084b2:	4a55      	ldr	r2, [pc, #340]	; (8008608 <HAL_RCC_ClockConfig+0x264>)
 80084b4:	4293      	cmp	r3, r2
 80084b6:	d90f      	bls.n	80084d8 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80084b8:	4b52      	ldr	r3, [pc, #328]	; (8008604 <HAL_RCC_ClockConfig+0x260>)
 80084ba:	689b      	ldr	r3, [r3, #8]
 80084bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d109      	bne.n	80084d8 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80084c4:	4b4f      	ldr	r3, [pc, #316]	; (8008604 <HAL_RCC_ClockConfig+0x260>)
 80084c6:	689b      	ldr	r3, [r3, #8]
 80084c8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80084cc:	4a4d      	ldr	r2, [pc, #308]	; (8008604 <HAL_RCC_ClockConfig+0x260>)
 80084ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084d2:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80084d4:	2380      	movs	r3, #128	; 0x80
 80084d6:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80084d8:	4b4a      	ldr	r3, [pc, #296]	; (8008604 <HAL_RCC_ClockConfig+0x260>)
 80084da:	689b      	ldr	r3, [r3, #8]
 80084dc:	f023 0203 	bic.w	r2, r3, #3
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	685b      	ldr	r3, [r3, #4]
 80084e4:	4947      	ldr	r1, [pc, #284]	; (8008604 <HAL_RCC_ClockConfig+0x260>)
 80084e6:	4313      	orrs	r3, r2
 80084e8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80084ea:	f7fd fe4f 	bl	800618c <HAL_GetTick>
 80084ee:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80084f0:	e00a      	b.n	8008508 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80084f2:	f7fd fe4b 	bl	800618c <HAL_GetTick>
 80084f6:	4602      	mov	r2, r0
 80084f8:	693b      	ldr	r3, [r7, #16]
 80084fa:	1ad3      	subs	r3, r2, r3
 80084fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8008500:	4293      	cmp	r3, r2
 8008502:	d901      	bls.n	8008508 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8008504:	2303      	movs	r3, #3
 8008506:	e077      	b.n	80085f8 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008508:	4b3e      	ldr	r3, [pc, #248]	; (8008604 <HAL_RCC_ClockConfig+0x260>)
 800850a:	689b      	ldr	r3, [r3, #8]
 800850c:	f003 020c 	and.w	r2, r3, #12
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	685b      	ldr	r3, [r3, #4]
 8008514:	009b      	lsls	r3, r3, #2
 8008516:	429a      	cmp	r2, r3
 8008518:	d1eb      	bne.n	80084f2 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 800851a:	697b      	ldr	r3, [r7, #20]
 800851c:	2b80      	cmp	r3, #128	; 0x80
 800851e:	d105      	bne.n	800852c <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8008520:	4b38      	ldr	r3, [pc, #224]	; (8008604 <HAL_RCC_ClockConfig+0x260>)
 8008522:	689b      	ldr	r3, [r3, #8]
 8008524:	4a37      	ldr	r2, [pc, #220]	; (8008604 <HAL_RCC_ClockConfig+0x260>)
 8008526:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800852a:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	f003 0302 	and.w	r3, r3, #2
 8008534:	2b00      	cmp	r3, #0
 8008536:	d010      	beq.n	800855a <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	689a      	ldr	r2, [r3, #8]
 800853c:	4b31      	ldr	r3, [pc, #196]	; (8008604 <HAL_RCC_ClockConfig+0x260>)
 800853e:	689b      	ldr	r3, [r3, #8]
 8008540:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008544:	429a      	cmp	r2, r3
 8008546:	d208      	bcs.n	800855a <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008548:	4b2e      	ldr	r3, [pc, #184]	; (8008604 <HAL_RCC_ClockConfig+0x260>)
 800854a:	689b      	ldr	r3, [r3, #8]
 800854c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	689b      	ldr	r3, [r3, #8]
 8008554:	492b      	ldr	r1, [pc, #172]	; (8008604 <HAL_RCC_ClockConfig+0x260>)
 8008556:	4313      	orrs	r3, r2
 8008558:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800855a:	4b29      	ldr	r3, [pc, #164]	; (8008600 <HAL_RCC_ClockConfig+0x25c>)
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	f003 030f 	and.w	r3, r3, #15
 8008562:	683a      	ldr	r2, [r7, #0]
 8008564:	429a      	cmp	r2, r3
 8008566:	d210      	bcs.n	800858a <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008568:	4b25      	ldr	r3, [pc, #148]	; (8008600 <HAL_RCC_ClockConfig+0x25c>)
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	f023 020f 	bic.w	r2, r3, #15
 8008570:	4923      	ldr	r1, [pc, #140]	; (8008600 <HAL_RCC_ClockConfig+0x25c>)
 8008572:	683b      	ldr	r3, [r7, #0]
 8008574:	4313      	orrs	r3, r2
 8008576:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008578:	4b21      	ldr	r3, [pc, #132]	; (8008600 <HAL_RCC_ClockConfig+0x25c>)
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	f003 030f 	and.w	r3, r3, #15
 8008580:	683a      	ldr	r2, [r7, #0]
 8008582:	429a      	cmp	r2, r3
 8008584:	d001      	beq.n	800858a <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8008586:	2301      	movs	r3, #1
 8008588:	e036      	b.n	80085f8 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	f003 0304 	and.w	r3, r3, #4
 8008592:	2b00      	cmp	r3, #0
 8008594:	d008      	beq.n	80085a8 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008596:	4b1b      	ldr	r3, [pc, #108]	; (8008604 <HAL_RCC_ClockConfig+0x260>)
 8008598:	689b      	ldr	r3, [r3, #8]
 800859a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	68db      	ldr	r3, [r3, #12]
 80085a2:	4918      	ldr	r1, [pc, #96]	; (8008604 <HAL_RCC_ClockConfig+0x260>)
 80085a4:	4313      	orrs	r3, r2
 80085a6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	f003 0308 	and.w	r3, r3, #8
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d009      	beq.n	80085c8 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80085b4:	4b13      	ldr	r3, [pc, #76]	; (8008604 <HAL_RCC_ClockConfig+0x260>)
 80085b6:	689b      	ldr	r3, [r3, #8]
 80085b8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	691b      	ldr	r3, [r3, #16]
 80085c0:	00db      	lsls	r3, r3, #3
 80085c2:	4910      	ldr	r1, [pc, #64]	; (8008604 <HAL_RCC_ClockConfig+0x260>)
 80085c4:	4313      	orrs	r3, r2
 80085c6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80085c8:	f000 f826 	bl	8008618 <HAL_RCC_GetSysClockFreq>
 80085cc:	4602      	mov	r2, r0
 80085ce:	4b0d      	ldr	r3, [pc, #52]	; (8008604 <HAL_RCC_ClockConfig+0x260>)
 80085d0:	689b      	ldr	r3, [r3, #8]
 80085d2:	091b      	lsrs	r3, r3, #4
 80085d4:	f003 030f 	and.w	r3, r3, #15
 80085d8:	490c      	ldr	r1, [pc, #48]	; (800860c <HAL_RCC_ClockConfig+0x268>)
 80085da:	5ccb      	ldrb	r3, [r1, r3]
 80085dc:	f003 031f 	and.w	r3, r3, #31
 80085e0:	fa22 f303 	lsr.w	r3, r2, r3
 80085e4:	4a0a      	ldr	r2, [pc, #40]	; (8008610 <HAL_RCC_ClockConfig+0x26c>)
 80085e6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80085e8:	4b0a      	ldr	r3, [pc, #40]	; (8008614 <HAL_RCC_ClockConfig+0x270>)
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	4618      	mov	r0, r3
 80085ee:	f7fd f977 	bl	80058e0 <HAL_InitTick>
 80085f2:	4603      	mov	r3, r0
 80085f4:	73fb      	strb	r3, [r7, #15]

  return status;
 80085f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80085f8:	4618      	mov	r0, r3
 80085fa:	3718      	adds	r7, #24
 80085fc:	46bd      	mov	sp, r7
 80085fe:	bd80      	pop	{r7, pc}
 8008600:	40022000 	.word	0x40022000
 8008604:	40021000 	.word	0x40021000
 8008608:	04c4b400 	.word	0x04c4b400
 800860c:	08014408 	.word	0x08014408
 8008610:	20000010 	.word	0x20000010
 8008614:	20000014 	.word	0x20000014

08008618 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008618:	b480      	push	{r7}
 800861a:	b089      	sub	sp, #36	; 0x24
 800861c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800861e:	2300      	movs	r3, #0
 8008620:	61fb      	str	r3, [r7, #28]
 8008622:	2300      	movs	r3, #0
 8008624:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008626:	4b3e      	ldr	r3, [pc, #248]	; (8008720 <HAL_RCC_GetSysClockFreq+0x108>)
 8008628:	689b      	ldr	r3, [r3, #8]
 800862a:	f003 030c 	and.w	r3, r3, #12
 800862e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008630:	4b3b      	ldr	r3, [pc, #236]	; (8008720 <HAL_RCC_GetSysClockFreq+0x108>)
 8008632:	68db      	ldr	r3, [r3, #12]
 8008634:	f003 0303 	and.w	r3, r3, #3
 8008638:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800863a:	693b      	ldr	r3, [r7, #16]
 800863c:	2b00      	cmp	r3, #0
 800863e:	d005      	beq.n	800864c <HAL_RCC_GetSysClockFreq+0x34>
 8008640:	693b      	ldr	r3, [r7, #16]
 8008642:	2b0c      	cmp	r3, #12
 8008644:	d121      	bne.n	800868a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	2b01      	cmp	r3, #1
 800864a:	d11e      	bne.n	800868a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800864c:	4b34      	ldr	r3, [pc, #208]	; (8008720 <HAL_RCC_GetSysClockFreq+0x108>)
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	f003 0308 	and.w	r3, r3, #8
 8008654:	2b00      	cmp	r3, #0
 8008656:	d107      	bne.n	8008668 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8008658:	4b31      	ldr	r3, [pc, #196]	; (8008720 <HAL_RCC_GetSysClockFreq+0x108>)
 800865a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800865e:	0a1b      	lsrs	r3, r3, #8
 8008660:	f003 030f 	and.w	r3, r3, #15
 8008664:	61fb      	str	r3, [r7, #28]
 8008666:	e005      	b.n	8008674 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8008668:	4b2d      	ldr	r3, [pc, #180]	; (8008720 <HAL_RCC_GetSysClockFreq+0x108>)
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	091b      	lsrs	r3, r3, #4
 800866e:	f003 030f 	and.w	r3, r3, #15
 8008672:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8008674:	4a2b      	ldr	r2, [pc, #172]	; (8008724 <HAL_RCC_GetSysClockFreq+0x10c>)
 8008676:	69fb      	ldr	r3, [r7, #28]
 8008678:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800867c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800867e:	693b      	ldr	r3, [r7, #16]
 8008680:	2b00      	cmp	r3, #0
 8008682:	d10d      	bne.n	80086a0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8008684:	69fb      	ldr	r3, [r7, #28]
 8008686:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008688:	e00a      	b.n	80086a0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800868a:	693b      	ldr	r3, [r7, #16]
 800868c:	2b04      	cmp	r3, #4
 800868e:	d102      	bne.n	8008696 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8008690:	4b25      	ldr	r3, [pc, #148]	; (8008728 <HAL_RCC_GetSysClockFreq+0x110>)
 8008692:	61bb      	str	r3, [r7, #24]
 8008694:	e004      	b.n	80086a0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8008696:	693b      	ldr	r3, [r7, #16]
 8008698:	2b08      	cmp	r3, #8
 800869a:	d101      	bne.n	80086a0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800869c:	4b23      	ldr	r3, [pc, #140]	; (800872c <HAL_RCC_GetSysClockFreq+0x114>)
 800869e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80086a0:	693b      	ldr	r3, [r7, #16]
 80086a2:	2b0c      	cmp	r3, #12
 80086a4:	d134      	bne.n	8008710 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80086a6:	4b1e      	ldr	r3, [pc, #120]	; (8008720 <HAL_RCC_GetSysClockFreq+0x108>)
 80086a8:	68db      	ldr	r3, [r3, #12]
 80086aa:	f003 0303 	and.w	r3, r3, #3
 80086ae:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80086b0:	68bb      	ldr	r3, [r7, #8]
 80086b2:	2b02      	cmp	r3, #2
 80086b4:	d003      	beq.n	80086be <HAL_RCC_GetSysClockFreq+0xa6>
 80086b6:	68bb      	ldr	r3, [r7, #8]
 80086b8:	2b03      	cmp	r3, #3
 80086ba:	d003      	beq.n	80086c4 <HAL_RCC_GetSysClockFreq+0xac>
 80086bc:	e005      	b.n	80086ca <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80086be:	4b1a      	ldr	r3, [pc, #104]	; (8008728 <HAL_RCC_GetSysClockFreq+0x110>)
 80086c0:	617b      	str	r3, [r7, #20]
      break;
 80086c2:	e005      	b.n	80086d0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80086c4:	4b19      	ldr	r3, [pc, #100]	; (800872c <HAL_RCC_GetSysClockFreq+0x114>)
 80086c6:	617b      	str	r3, [r7, #20]
      break;
 80086c8:	e002      	b.n	80086d0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80086ca:	69fb      	ldr	r3, [r7, #28]
 80086cc:	617b      	str	r3, [r7, #20]
      break;
 80086ce:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80086d0:	4b13      	ldr	r3, [pc, #76]	; (8008720 <HAL_RCC_GetSysClockFreq+0x108>)
 80086d2:	68db      	ldr	r3, [r3, #12]
 80086d4:	091b      	lsrs	r3, r3, #4
 80086d6:	f003 030f 	and.w	r3, r3, #15
 80086da:	3301      	adds	r3, #1
 80086dc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80086de:	4b10      	ldr	r3, [pc, #64]	; (8008720 <HAL_RCC_GetSysClockFreq+0x108>)
 80086e0:	68db      	ldr	r3, [r3, #12]
 80086e2:	0a1b      	lsrs	r3, r3, #8
 80086e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80086e8:	697a      	ldr	r2, [r7, #20]
 80086ea:	fb03 f202 	mul.w	r2, r3, r2
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80086f4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80086f6:	4b0a      	ldr	r3, [pc, #40]	; (8008720 <HAL_RCC_GetSysClockFreq+0x108>)
 80086f8:	68db      	ldr	r3, [r3, #12]
 80086fa:	0e5b      	lsrs	r3, r3, #25
 80086fc:	f003 0303 	and.w	r3, r3, #3
 8008700:	3301      	adds	r3, #1
 8008702:	005b      	lsls	r3, r3, #1
 8008704:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8008706:	697a      	ldr	r2, [r7, #20]
 8008708:	683b      	ldr	r3, [r7, #0]
 800870a:	fbb2 f3f3 	udiv	r3, r2, r3
 800870e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8008710:	69bb      	ldr	r3, [r7, #24]
}
 8008712:	4618      	mov	r0, r3
 8008714:	3724      	adds	r7, #36	; 0x24
 8008716:	46bd      	mov	sp, r7
 8008718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871c:	4770      	bx	lr
 800871e:	bf00      	nop
 8008720:	40021000 	.word	0x40021000
 8008724:	08014420 	.word	0x08014420
 8008728:	00f42400 	.word	0x00f42400
 800872c:	007a1200 	.word	0x007a1200

08008730 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008730:	b480      	push	{r7}
 8008732:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008734:	4b03      	ldr	r3, [pc, #12]	; (8008744 <HAL_RCC_GetHCLKFreq+0x14>)
 8008736:	681b      	ldr	r3, [r3, #0]
}
 8008738:	4618      	mov	r0, r3
 800873a:	46bd      	mov	sp, r7
 800873c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008740:	4770      	bx	lr
 8008742:	bf00      	nop
 8008744:	20000010 	.word	0x20000010

08008748 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008748:	b580      	push	{r7, lr}
 800874a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800874c:	f7ff fff0 	bl	8008730 <HAL_RCC_GetHCLKFreq>
 8008750:	4602      	mov	r2, r0
 8008752:	4b06      	ldr	r3, [pc, #24]	; (800876c <HAL_RCC_GetPCLK1Freq+0x24>)
 8008754:	689b      	ldr	r3, [r3, #8]
 8008756:	0a1b      	lsrs	r3, r3, #8
 8008758:	f003 0307 	and.w	r3, r3, #7
 800875c:	4904      	ldr	r1, [pc, #16]	; (8008770 <HAL_RCC_GetPCLK1Freq+0x28>)
 800875e:	5ccb      	ldrb	r3, [r1, r3]
 8008760:	f003 031f 	and.w	r3, r3, #31
 8008764:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008768:	4618      	mov	r0, r3
 800876a:	bd80      	pop	{r7, pc}
 800876c:	40021000 	.word	0x40021000
 8008770:	08014418 	.word	0x08014418

08008774 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008774:	b580      	push	{r7, lr}
 8008776:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8008778:	f7ff ffda 	bl	8008730 <HAL_RCC_GetHCLKFreq>
 800877c:	4602      	mov	r2, r0
 800877e:	4b06      	ldr	r3, [pc, #24]	; (8008798 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008780:	689b      	ldr	r3, [r3, #8]
 8008782:	0adb      	lsrs	r3, r3, #11
 8008784:	f003 0307 	and.w	r3, r3, #7
 8008788:	4904      	ldr	r1, [pc, #16]	; (800879c <HAL_RCC_GetPCLK2Freq+0x28>)
 800878a:	5ccb      	ldrb	r3, [r1, r3]
 800878c:	f003 031f 	and.w	r3, r3, #31
 8008790:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008794:	4618      	mov	r0, r3
 8008796:	bd80      	pop	{r7, pc}
 8008798:	40021000 	.word	0x40021000
 800879c:	08014418 	.word	0x08014418

080087a0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80087a0:	b480      	push	{r7}
 80087a2:	b083      	sub	sp, #12
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
 80087a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	220f      	movs	r2, #15
 80087ae:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80087b0:	4b12      	ldr	r3, [pc, #72]	; (80087fc <HAL_RCC_GetClockConfig+0x5c>)
 80087b2:	689b      	ldr	r3, [r3, #8]
 80087b4:	f003 0203 	and.w	r2, r3, #3
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80087bc:	4b0f      	ldr	r3, [pc, #60]	; (80087fc <HAL_RCC_GetClockConfig+0x5c>)
 80087be:	689b      	ldr	r3, [r3, #8]
 80087c0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80087c8:	4b0c      	ldr	r3, [pc, #48]	; (80087fc <HAL_RCC_GetClockConfig+0x5c>)
 80087ca:	689b      	ldr	r3, [r3, #8]
 80087cc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80087d4:	4b09      	ldr	r3, [pc, #36]	; (80087fc <HAL_RCC_GetClockConfig+0x5c>)
 80087d6:	689b      	ldr	r3, [r3, #8]
 80087d8:	08db      	lsrs	r3, r3, #3
 80087da:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80087e2:	4b07      	ldr	r3, [pc, #28]	; (8008800 <HAL_RCC_GetClockConfig+0x60>)
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	f003 020f 	and.w	r2, r3, #15
 80087ea:	683b      	ldr	r3, [r7, #0]
 80087ec:	601a      	str	r2, [r3, #0]
}
 80087ee:	bf00      	nop
 80087f0:	370c      	adds	r7, #12
 80087f2:	46bd      	mov	sp, r7
 80087f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f8:	4770      	bx	lr
 80087fa:	bf00      	nop
 80087fc:	40021000 	.word	0x40021000
 8008800:	40022000 	.word	0x40022000

08008804 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8008804:	b580      	push	{r7, lr}
 8008806:	b086      	sub	sp, #24
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800880c:	2300      	movs	r3, #0
 800880e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8008810:	4b27      	ldr	r3, [pc, #156]	; (80088b0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8008812:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008814:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008818:	2b00      	cmp	r3, #0
 800881a:	d003      	beq.n	8008824 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800881c:	f7ff f8e4 	bl	80079e8 <HAL_PWREx_GetVoltageRange>
 8008820:	6178      	str	r0, [r7, #20]
 8008822:	e014      	b.n	800884e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8008824:	4b22      	ldr	r3, [pc, #136]	; (80088b0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8008826:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008828:	4a21      	ldr	r2, [pc, #132]	; (80088b0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800882a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800882e:	6593      	str	r3, [r2, #88]	; 0x58
 8008830:	4b1f      	ldr	r3, [pc, #124]	; (80088b0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8008832:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008834:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008838:	60fb      	str	r3, [r7, #12]
 800883a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800883c:	f7ff f8d4 	bl	80079e8 <HAL_PWREx_GetVoltageRange>
 8008840:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8008842:	4b1b      	ldr	r3, [pc, #108]	; (80088b0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8008844:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008846:	4a1a      	ldr	r2, [pc, #104]	; (80088b0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8008848:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800884c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800884e:	697b      	ldr	r3, [r7, #20]
 8008850:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008854:	d10b      	bne.n	800886e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	2b80      	cmp	r3, #128	; 0x80
 800885a:	d913      	bls.n	8008884 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	2ba0      	cmp	r3, #160	; 0xa0
 8008860:	d902      	bls.n	8008868 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8008862:	2302      	movs	r3, #2
 8008864:	613b      	str	r3, [r7, #16]
 8008866:	e00d      	b.n	8008884 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8008868:	2301      	movs	r3, #1
 800886a:	613b      	str	r3, [r7, #16]
 800886c:	e00a      	b.n	8008884 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	2b7f      	cmp	r3, #127	; 0x7f
 8008872:	d902      	bls.n	800887a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8008874:	2302      	movs	r3, #2
 8008876:	613b      	str	r3, [r7, #16]
 8008878:	e004      	b.n	8008884 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	2b70      	cmp	r3, #112	; 0x70
 800887e:	d101      	bne.n	8008884 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8008880:	2301      	movs	r3, #1
 8008882:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8008884:	4b0b      	ldr	r3, [pc, #44]	; (80088b4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	f023 020f 	bic.w	r2, r3, #15
 800888c:	4909      	ldr	r1, [pc, #36]	; (80088b4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800888e:	693b      	ldr	r3, [r7, #16]
 8008890:	4313      	orrs	r3, r2
 8008892:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8008894:	4b07      	ldr	r3, [pc, #28]	; (80088b4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	f003 030f 	and.w	r3, r3, #15
 800889c:	693a      	ldr	r2, [r7, #16]
 800889e:	429a      	cmp	r2, r3
 80088a0:	d001      	beq.n	80088a6 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80088a2:	2301      	movs	r3, #1
 80088a4:	e000      	b.n	80088a8 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80088a6:	2300      	movs	r3, #0
}
 80088a8:	4618      	mov	r0, r3
 80088aa:	3718      	adds	r7, #24
 80088ac:	46bd      	mov	sp, r7
 80088ae:	bd80      	pop	{r7, pc}
 80088b0:	40021000 	.word	0x40021000
 80088b4:	40022000 	.word	0x40022000

080088b8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80088b8:	b480      	push	{r7}
 80088ba:	b087      	sub	sp, #28
 80088bc:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80088be:	4b2d      	ldr	r3, [pc, #180]	; (8008974 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80088c0:	68db      	ldr	r3, [r3, #12]
 80088c2:	f003 0303 	and.w	r3, r3, #3
 80088c6:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	2b03      	cmp	r3, #3
 80088cc:	d00b      	beq.n	80088e6 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	2b03      	cmp	r3, #3
 80088d2:	d825      	bhi.n	8008920 <RCC_GetSysClockFreqFromPLLSource+0x68>
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	2b01      	cmp	r3, #1
 80088d8:	d008      	beq.n	80088ec <RCC_GetSysClockFreqFromPLLSource+0x34>
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	2b02      	cmp	r3, #2
 80088de:	d11f      	bne.n	8008920 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80088e0:	4b25      	ldr	r3, [pc, #148]	; (8008978 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80088e2:	613b      	str	r3, [r7, #16]
    break;
 80088e4:	e01f      	b.n	8008926 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80088e6:	4b25      	ldr	r3, [pc, #148]	; (800897c <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80088e8:	613b      	str	r3, [r7, #16]
    break;
 80088ea:	e01c      	b.n	8008926 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80088ec:	4b21      	ldr	r3, [pc, #132]	; (8008974 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	f003 0308 	and.w	r3, r3, #8
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d107      	bne.n	8008908 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80088f8:	4b1e      	ldr	r3, [pc, #120]	; (8008974 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80088fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80088fe:	0a1b      	lsrs	r3, r3, #8
 8008900:	f003 030f 	and.w	r3, r3, #15
 8008904:	617b      	str	r3, [r7, #20]
 8008906:	e005      	b.n	8008914 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8008908:	4b1a      	ldr	r3, [pc, #104]	; (8008974 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	091b      	lsrs	r3, r3, #4
 800890e:	f003 030f 	and.w	r3, r3, #15
 8008912:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8008914:	4a1a      	ldr	r2, [pc, #104]	; (8008980 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8008916:	697b      	ldr	r3, [r7, #20]
 8008918:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800891c:	613b      	str	r3, [r7, #16]
    break;
 800891e:	e002      	b.n	8008926 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8008920:	2300      	movs	r3, #0
 8008922:	613b      	str	r3, [r7, #16]
    break;
 8008924:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008926:	4b13      	ldr	r3, [pc, #76]	; (8008974 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8008928:	68db      	ldr	r3, [r3, #12]
 800892a:	091b      	lsrs	r3, r3, #4
 800892c:	f003 030f 	and.w	r3, r3, #15
 8008930:	3301      	adds	r3, #1
 8008932:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8008934:	4b0f      	ldr	r3, [pc, #60]	; (8008974 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8008936:	68db      	ldr	r3, [r3, #12]
 8008938:	0a1b      	lsrs	r3, r3, #8
 800893a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800893e:	693a      	ldr	r2, [r7, #16]
 8008940:	fb03 f202 	mul.w	r2, r3, r2
 8008944:	68bb      	ldr	r3, [r7, #8]
 8008946:	fbb2 f3f3 	udiv	r3, r2, r3
 800894a:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800894c:	4b09      	ldr	r3, [pc, #36]	; (8008974 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800894e:	68db      	ldr	r3, [r3, #12]
 8008950:	0e5b      	lsrs	r3, r3, #25
 8008952:	f003 0303 	and.w	r3, r3, #3
 8008956:	3301      	adds	r3, #1
 8008958:	005b      	lsls	r3, r3, #1
 800895a:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 800895c:	693a      	ldr	r2, [r7, #16]
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	fbb2 f3f3 	udiv	r3, r2, r3
 8008964:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8008966:	683b      	ldr	r3, [r7, #0]
}
 8008968:	4618      	mov	r0, r3
 800896a:	371c      	adds	r7, #28
 800896c:	46bd      	mov	sp, r7
 800896e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008972:	4770      	bx	lr
 8008974:	40021000 	.word	0x40021000
 8008978:	00f42400 	.word	0x00f42400
 800897c:	007a1200 	.word	0x007a1200
 8008980:	08014420 	.word	0x08014420

08008984 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008984:	b580      	push	{r7, lr}
 8008986:	b086      	sub	sp, #24
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800898c:	2300      	movs	r3, #0
 800898e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008990:	2300      	movs	r3, #0
 8008992:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800899c:	2b00      	cmp	r3, #0
 800899e:	d040      	beq.n	8008a22 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80089a4:	2b80      	cmp	r3, #128	; 0x80
 80089a6:	d02a      	beq.n	80089fe <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80089a8:	2b80      	cmp	r3, #128	; 0x80
 80089aa:	d825      	bhi.n	80089f8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80089ac:	2b60      	cmp	r3, #96	; 0x60
 80089ae:	d026      	beq.n	80089fe <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80089b0:	2b60      	cmp	r3, #96	; 0x60
 80089b2:	d821      	bhi.n	80089f8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80089b4:	2b40      	cmp	r3, #64	; 0x40
 80089b6:	d006      	beq.n	80089c6 <HAL_RCCEx_PeriphCLKConfig+0x42>
 80089b8:	2b40      	cmp	r3, #64	; 0x40
 80089ba:	d81d      	bhi.n	80089f8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d009      	beq.n	80089d4 <HAL_RCCEx_PeriphCLKConfig+0x50>
 80089c0:	2b20      	cmp	r3, #32
 80089c2:	d010      	beq.n	80089e6 <HAL_RCCEx_PeriphCLKConfig+0x62>
 80089c4:	e018      	b.n	80089f8 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80089c6:	4b89      	ldr	r3, [pc, #548]	; (8008bec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80089c8:	68db      	ldr	r3, [r3, #12]
 80089ca:	4a88      	ldr	r2, [pc, #544]	; (8008bec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80089cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80089d0:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80089d2:	e015      	b.n	8008a00 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	3304      	adds	r3, #4
 80089d8:	2100      	movs	r1, #0
 80089da:	4618      	mov	r0, r3
 80089dc:	f000 fb02 	bl	8008fe4 <RCCEx_PLLSAI1_Config>
 80089e0:	4603      	mov	r3, r0
 80089e2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80089e4:	e00c      	b.n	8008a00 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	3320      	adds	r3, #32
 80089ea:	2100      	movs	r1, #0
 80089ec:	4618      	mov	r0, r3
 80089ee:	f000 fbed 	bl	80091cc <RCCEx_PLLSAI2_Config>
 80089f2:	4603      	mov	r3, r0
 80089f4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80089f6:	e003      	b.n	8008a00 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80089f8:	2301      	movs	r3, #1
 80089fa:	74fb      	strb	r3, [r7, #19]
      break;
 80089fc:	e000      	b.n	8008a00 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 80089fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008a00:	7cfb      	ldrb	r3, [r7, #19]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d10b      	bne.n	8008a1e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008a06:	4b79      	ldr	r3, [pc, #484]	; (8008bec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008a08:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008a0c:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a14:	4975      	ldr	r1, [pc, #468]	; (8008bec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008a16:	4313      	orrs	r3, r2
 8008a18:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8008a1c:	e001      	b.n	8008a22 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a1e:	7cfb      	ldrb	r3, [r7, #19]
 8008a20:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d047      	beq.n	8008abe <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008a36:	d030      	beq.n	8008a9a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8008a38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008a3c:	d82a      	bhi.n	8008a94 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8008a3e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008a42:	d02a      	beq.n	8008a9a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8008a44:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008a48:	d824      	bhi.n	8008a94 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8008a4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008a4e:	d008      	beq.n	8008a62 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8008a50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008a54:	d81e      	bhi.n	8008a94 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d00a      	beq.n	8008a70 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8008a5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a5e:	d010      	beq.n	8008a82 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8008a60:	e018      	b.n	8008a94 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8008a62:	4b62      	ldr	r3, [pc, #392]	; (8008bec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008a64:	68db      	ldr	r3, [r3, #12]
 8008a66:	4a61      	ldr	r2, [pc, #388]	; (8008bec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008a68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008a6c:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8008a6e:	e015      	b.n	8008a9c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	3304      	adds	r3, #4
 8008a74:	2100      	movs	r1, #0
 8008a76:	4618      	mov	r0, r3
 8008a78:	f000 fab4 	bl	8008fe4 <RCCEx_PLLSAI1_Config>
 8008a7c:	4603      	mov	r3, r0
 8008a7e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8008a80:	e00c      	b.n	8008a9c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	3320      	adds	r3, #32
 8008a86:	2100      	movs	r1, #0
 8008a88:	4618      	mov	r0, r3
 8008a8a:	f000 fb9f 	bl	80091cc <RCCEx_PLLSAI2_Config>
 8008a8e:	4603      	mov	r3, r0
 8008a90:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8008a92:	e003      	b.n	8008a9c <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008a94:	2301      	movs	r3, #1
 8008a96:	74fb      	strb	r3, [r7, #19]
      break;
 8008a98:	e000      	b.n	8008a9c <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8008a9a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008a9c:	7cfb      	ldrb	r3, [r7, #19]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d10b      	bne.n	8008aba <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8008aa2:	4b52      	ldr	r3, [pc, #328]	; (8008bec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008aa4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008aa8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ab0:	494e      	ldr	r1, [pc, #312]	; (8008bec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008ab2:	4313      	orrs	r3, r2
 8008ab4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8008ab8:	e001      	b.n	8008abe <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008aba:	7cfb      	ldrb	r3, [r7, #19]
 8008abc:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	f000 809f 	beq.w	8008c0a <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008acc:	2300      	movs	r3, #0
 8008ace:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8008ad0:	4b46      	ldr	r3, [pc, #280]	; (8008bec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008ad2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ad4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d101      	bne.n	8008ae0 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8008adc:	2301      	movs	r3, #1
 8008ade:	e000      	b.n	8008ae2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d00d      	beq.n	8008b02 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008ae6:	4b41      	ldr	r3, [pc, #260]	; (8008bec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008ae8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008aea:	4a40      	ldr	r2, [pc, #256]	; (8008bec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008aec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008af0:	6593      	str	r3, [r2, #88]	; 0x58
 8008af2:	4b3e      	ldr	r3, [pc, #248]	; (8008bec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008af4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008af6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008afa:	60bb      	str	r3, [r7, #8]
 8008afc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008afe:	2301      	movs	r3, #1
 8008b00:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008b02:	4b3b      	ldr	r3, [pc, #236]	; (8008bf0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	4a3a      	ldr	r2, [pc, #232]	; (8008bf0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8008b08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008b0c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008b0e:	f7fd fb3d 	bl	800618c <HAL_GetTick>
 8008b12:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8008b14:	e009      	b.n	8008b2a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008b16:	f7fd fb39 	bl	800618c <HAL_GetTick>
 8008b1a:	4602      	mov	r2, r0
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	1ad3      	subs	r3, r2, r3
 8008b20:	2b02      	cmp	r3, #2
 8008b22:	d902      	bls.n	8008b2a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8008b24:	2303      	movs	r3, #3
 8008b26:	74fb      	strb	r3, [r7, #19]
        break;
 8008b28:	e005      	b.n	8008b36 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8008b2a:	4b31      	ldr	r3, [pc, #196]	; (8008bf0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d0ef      	beq.n	8008b16 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8008b36:	7cfb      	ldrb	r3, [r7, #19]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d15b      	bne.n	8008bf4 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008b3c:	4b2b      	ldr	r3, [pc, #172]	; (8008bec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008b3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008b46:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008b48:	697b      	ldr	r3, [r7, #20]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d01f      	beq.n	8008b8e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b54:	697a      	ldr	r2, [r7, #20]
 8008b56:	429a      	cmp	r2, r3
 8008b58:	d019      	beq.n	8008b8e <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008b5a:	4b24      	ldr	r3, [pc, #144]	; (8008bec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008b5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008b64:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008b66:	4b21      	ldr	r3, [pc, #132]	; (8008bec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008b68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b6c:	4a1f      	ldr	r2, [pc, #124]	; (8008bec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008b6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008b72:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008b76:	4b1d      	ldr	r3, [pc, #116]	; (8008bec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008b78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b7c:	4a1b      	ldr	r2, [pc, #108]	; (8008bec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008b7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008b82:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008b86:	4a19      	ldr	r2, [pc, #100]	; (8008bec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008b88:	697b      	ldr	r3, [r7, #20]
 8008b8a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008b8e:	697b      	ldr	r3, [r7, #20]
 8008b90:	f003 0301 	and.w	r3, r3, #1
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d016      	beq.n	8008bc6 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b98:	f7fd faf8 	bl	800618c <HAL_GetTick>
 8008b9c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008b9e:	e00b      	b.n	8008bb8 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008ba0:	f7fd faf4 	bl	800618c <HAL_GetTick>
 8008ba4:	4602      	mov	r2, r0
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	1ad3      	subs	r3, r2, r3
 8008baa:	f241 3288 	movw	r2, #5000	; 0x1388
 8008bae:	4293      	cmp	r3, r2
 8008bb0:	d902      	bls.n	8008bb8 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8008bb2:	2303      	movs	r3, #3
 8008bb4:	74fb      	strb	r3, [r7, #19]
            break;
 8008bb6:	e006      	b.n	8008bc6 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008bb8:	4b0c      	ldr	r3, [pc, #48]	; (8008bec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008bba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008bbe:	f003 0302 	and.w	r3, r3, #2
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d0ec      	beq.n	8008ba0 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8008bc6:	7cfb      	ldrb	r3, [r7, #19]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d10c      	bne.n	8008be6 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008bcc:	4b07      	ldr	r3, [pc, #28]	; (8008bec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008bce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008bd2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008bdc:	4903      	ldr	r1, [pc, #12]	; (8008bec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008bde:	4313      	orrs	r3, r2
 8008be0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8008be4:	e008      	b.n	8008bf8 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008be6:	7cfb      	ldrb	r3, [r7, #19]
 8008be8:	74bb      	strb	r3, [r7, #18]
 8008bea:	e005      	b.n	8008bf8 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8008bec:	40021000 	.word	0x40021000
 8008bf0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008bf4:	7cfb      	ldrb	r3, [r7, #19]
 8008bf6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008bf8:	7c7b      	ldrb	r3, [r7, #17]
 8008bfa:	2b01      	cmp	r3, #1
 8008bfc:	d105      	bne.n	8008c0a <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008bfe:	4ba0      	ldr	r3, [pc, #640]	; (8008e80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008c00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c02:	4a9f      	ldr	r2, [pc, #636]	; (8008e80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008c04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008c08:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	f003 0301 	and.w	r3, r3, #1
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d00a      	beq.n	8008c2c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008c16:	4b9a      	ldr	r3, [pc, #616]	; (8008e80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008c18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c1c:	f023 0203 	bic.w	r2, r3, #3
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c24:	4996      	ldr	r1, [pc, #600]	; (8008e80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008c26:	4313      	orrs	r3, r2
 8008c28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	f003 0302 	and.w	r3, r3, #2
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d00a      	beq.n	8008c4e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008c38:	4b91      	ldr	r3, [pc, #580]	; (8008e80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c3e:	f023 020c 	bic.w	r2, r3, #12
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c46:	498e      	ldr	r1, [pc, #568]	; (8008e80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008c48:	4313      	orrs	r3, r2
 8008c4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	f003 0304 	and.w	r3, r3, #4
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d00a      	beq.n	8008c70 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008c5a:	4b89      	ldr	r3, [pc, #548]	; (8008e80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008c5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c60:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c68:	4985      	ldr	r1, [pc, #532]	; (8008e80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008c6a:	4313      	orrs	r3, r2
 8008c6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	f003 0308 	and.w	r3, r3, #8
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d00a      	beq.n	8008c92 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008c7c:	4b80      	ldr	r3, [pc, #512]	; (8008e80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008c7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c82:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c8a:	497d      	ldr	r1, [pc, #500]	; (8008e80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008c8c:	4313      	orrs	r3, r2
 8008c8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	f003 0310 	and.w	r3, r3, #16
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d00a      	beq.n	8008cb4 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008c9e:	4b78      	ldr	r3, [pc, #480]	; (8008e80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008ca0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ca4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008cac:	4974      	ldr	r1, [pc, #464]	; (8008e80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008cae:	4313      	orrs	r3, r2
 8008cb0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	f003 0320 	and.w	r3, r3, #32
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d00a      	beq.n	8008cd6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008cc0:	4b6f      	ldr	r3, [pc, #444]	; (8008e80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008cc6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008cce:	496c      	ldr	r1, [pc, #432]	; (8008e80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008cd0:	4313      	orrs	r3, r2
 8008cd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d00a      	beq.n	8008cf8 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008ce2:	4b67      	ldr	r3, [pc, #412]	; (8008e80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008ce4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ce8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008cf0:	4963      	ldr	r1, [pc, #396]	; (8008e80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008cf2:	4313      	orrs	r3, r2
 8008cf4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d00a      	beq.n	8008d1a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008d04:	4b5e      	ldr	r3, [pc, #376]	; (8008e80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d0a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008d12:	495b      	ldr	r1, [pc, #364]	; (8008e80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008d14:	4313      	orrs	r3, r2
 8008d16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d00a      	beq.n	8008d3c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008d26:	4b56      	ldr	r3, [pc, #344]	; (8008e80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008d28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d2c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d34:	4952      	ldr	r1, [pc, #328]	; (8008e80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008d36:	4313      	orrs	r3, r2
 8008d38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d00a      	beq.n	8008d5e <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008d48:	4b4d      	ldr	r3, [pc, #308]	; (8008e80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008d4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d4e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d56:	494a      	ldr	r1, [pc, #296]	; (8008e80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008d58:	4313      	orrs	r3, r2
 8008d5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d00a      	beq.n	8008d80 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008d6a:	4b45      	ldr	r3, [pc, #276]	; (8008e80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008d6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d70:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d78:	4941      	ldr	r1, [pc, #260]	; (8008e80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008d7a:	4313      	orrs	r3, r2
 8008d7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d00a      	beq.n	8008da2 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008d8c:	4b3c      	ldr	r3, [pc, #240]	; (8008e80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008d8e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008d92:	f023 0203 	bic.w	r2, r3, #3
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008d9a:	4939      	ldr	r1, [pc, #228]	; (8008e80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008d9c:	4313      	orrs	r3, r2
 8008d9e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d028      	beq.n	8008e00 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008dae:	4b34      	ldr	r3, [pc, #208]	; (8008e80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008db0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008db4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008dbc:	4930      	ldr	r1, [pc, #192]	; (8008e80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008dbe:	4313      	orrs	r3, r2
 8008dc0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008dc8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008dcc:	d106      	bne.n	8008ddc <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008dce:	4b2c      	ldr	r3, [pc, #176]	; (8008e80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008dd0:	68db      	ldr	r3, [r3, #12]
 8008dd2:	4a2b      	ldr	r2, [pc, #172]	; (8008e80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008dd4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008dd8:	60d3      	str	r3, [r2, #12]
 8008dda:	e011      	b.n	8008e00 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008de0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008de4:	d10c      	bne.n	8008e00 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	3304      	adds	r3, #4
 8008dea:	2101      	movs	r1, #1
 8008dec:	4618      	mov	r0, r3
 8008dee:	f000 f8f9 	bl	8008fe4 <RCCEx_PLLSAI1_Config>
 8008df2:	4603      	mov	r3, r0
 8008df4:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8008df6:	7cfb      	ldrb	r3, [r7, #19]
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d001      	beq.n	8008e00 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8008dfc:	7cfb      	ldrb	r3, [r7, #19]
 8008dfe:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d04d      	beq.n	8008ea8 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008e10:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008e14:	d108      	bne.n	8008e28 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8008e16:	4b1a      	ldr	r3, [pc, #104]	; (8008e80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008e18:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008e1c:	4a18      	ldr	r2, [pc, #96]	; (8008e80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008e1e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008e22:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8008e26:	e012      	b.n	8008e4e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8008e28:	4b15      	ldr	r3, [pc, #84]	; (8008e80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008e2a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008e2e:	4a14      	ldr	r2, [pc, #80]	; (8008e80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008e30:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008e34:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8008e38:	4b11      	ldr	r3, [pc, #68]	; (8008e80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008e3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e3e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008e46:	490e      	ldr	r1, [pc, #56]	; (8008e80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008e48:	4313      	orrs	r3, r2
 8008e4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008e52:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008e56:	d106      	bne.n	8008e66 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008e58:	4b09      	ldr	r3, [pc, #36]	; (8008e80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008e5a:	68db      	ldr	r3, [r3, #12]
 8008e5c:	4a08      	ldr	r2, [pc, #32]	; (8008e80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008e5e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008e62:	60d3      	str	r3, [r2, #12]
 8008e64:	e020      	b.n	8008ea8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008e6a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008e6e:	d109      	bne.n	8008e84 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8008e70:	4b03      	ldr	r3, [pc, #12]	; (8008e80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008e72:	68db      	ldr	r3, [r3, #12]
 8008e74:	4a02      	ldr	r2, [pc, #8]	; (8008e80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008e76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008e7a:	60d3      	str	r3, [r2, #12]
 8008e7c:	e014      	b.n	8008ea8 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8008e7e:	bf00      	nop
 8008e80:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008e88:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008e8c:	d10c      	bne.n	8008ea8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	3304      	adds	r3, #4
 8008e92:	2101      	movs	r1, #1
 8008e94:	4618      	mov	r0, r3
 8008e96:	f000 f8a5 	bl	8008fe4 <RCCEx_PLLSAI1_Config>
 8008e9a:	4603      	mov	r3, r0
 8008e9c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008e9e:	7cfb      	ldrb	r3, [r7, #19]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d001      	beq.n	8008ea8 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8008ea4:	7cfb      	ldrb	r3, [r7, #19]
 8008ea6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d028      	beq.n	8008f06 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008eb4:	4b4a      	ldr	r3, [pc, #296]	; (8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008eb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008eba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008ec2:	4947      	ldr	r1, [pc, #284]	; (8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008ec4:	4313      	orrs	r3, r2
 8008ec6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008ece:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008ed2:	d106      	bne.n	8008ee2 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008ed4:	4b42      	ldr	r3, [pc, #264]	; (8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008ed6:	68db      	ldr	r3, [r3, #12]
 8008ed8:	4a41      	ldr	r2, [pc, #260]	; (8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008eda:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008ede:	60d3      	str	r3, [r2, #12]
 8008ee0:	e011      	b.n	8008f06 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008ee6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008eea:	d10c      	bne.n	8008f06 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	3304      	adds	r3, #4
 8008ef0:	2101      	movs	r1, #1
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	f000 f876 	bl	8008fe4 <RCCEx_PLLSAI1_Config>
 8008ef8:	4603      	mov	r3, r0
 8008efa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008efc:	7cfb      	ldrb	r3, [r7, #19]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d001      	beq.n	8008f06 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8008f02:	7cfb      	ldrb	r3, [r7, #19]
 8008f04:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d01e      	beq.n	8008f50 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008f12:	4b33      	ldr	r3, [pc, #204]	; (8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008f14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f18:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008f22:	492f      	ldr	r1, [pc, #188]	; (8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008f24:	4313      	orrs	r3, r2
 8008f26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008f30:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008f34:	d10c      	bne.n	8008f50 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	3304      	adds	r3, #4
 8008f3a:	2102      	movs	r1, #2
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	f000 f851 	bl	8008fe4 <RCCEx_PLLSAI1_Config>
 8008f42:	4603      	mov	r3, r0
 8008f44:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008f46:	7cfb      	ldrb	r3, [r7, #19]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d001      	beq.n	8008f50 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8008f4c:	7cfb      	ldrb	r3, [r7, #19]
 8008f4e:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d00b      	beq.n	8008f74 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008f5c:	4b20      	ldr	r3, [pc, #128]	; (8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008f5e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008f62:	f023 0204 	bic.w	r2, r3, #4
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008f6c:	491c      	ldr	r1, [pc, #112]	; (8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008f6e:	4313      	orrs	r3, r2
 8008f70:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d00b      	beq.n	8008f98 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8008f80:	4b17      	ldr	r3, [pc, #92]	; (8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008f82:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008f86:	f023 0218 	bic.w	r2, r3, #24
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f90:	4913      	ldr	r1, [pc, #76]	; (8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008f92:	4313      	orrs	r3, r2
 8008f94:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d017      	beq.n	8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8008fa4:	4b0e      	ldr	r3, [pc, #56]	; (8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008fa6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008faa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008fb4:	490a      	ldr	r1, [pc, #40]	; (8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008fb6:	4313      	orrs	r3, r2
 8008fb8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008fc2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008fc6:	d105      	bne.n	8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008fc8:	4b05      	ldr	r3, [pc, #20]	; (8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008fca:	68db      	ldr	r3, [r3, #12]
 8008fcc:	4a04      	ldr	r2, [pc, #16]	; (8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008fce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008fd2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8008fd4:	7cbb      	ldrb	r3, [r7, #18]
}
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	3718      	adds	r7, #24
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	bd80      	pop	{r7, pc}
 8008fde:	bf00      	nop
 8008fe0:	40021000 	.word	0x40021000

08008fe4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	b084      	sub	sp, #16
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
 8008fec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008fee:	2300      	movs	r3, #0
 8008ff0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8008ff2:	4b72      	ldr	r3, [pc, #456]	; (80091bc <RCCEx_PLLSAI1_Config+0x1d8>)
 8008ff4:	68db      	ldr	r3, [r3, #12]
 8008ff6:	f003 0303 	and.w	r3, r3, #3
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d00e      	beq.n	800901c <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8008ffe:	4b6f      	ldr	r3, [pc, #444]	; (80091bc <RCCEx_PLLSAI1_Config+0x1d8>)
 8009000:	68db      	ldr	r3, [r3, #12]
 8009002:	f003 0203 	and.w	r2, r3, #3
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	429a      	cmp	r2, r3
 800900c:	d103      	bne.n	8009016 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
       ||
 8009012:	2b00      	cmp	r3, #0
 8009014:	d142      	bne.n	800909c <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8009016:	2301      	movs	r3, #1
 8009018:	73fb      	strb	r3, [r7, #15]
 800901a:	e03f      	b.n	800909c <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	2b03      	cmp	r3, #3
 8009022:	d018      	beq.n	8009056 <RCCEx_PLLSAI1_Config+0x72>
 8009024:	2b03      	cmp	r3, #3
 8009026:	d825      	bhi.n	8009074 <RCCEx_PLLSAI1_Config+0x90>
 8009028:	2b01      	cmp	r3, #1
 800902a:	d002      	beq.n	8009032 <RCCEx_PLLSAI1_Config+0x4e>
 800902c:	2b02      	cmp	r3, #2
 800902e:	d009      	beq.n	8009044 <RCCEx_PLLSAI1_Config+0x60>
 8009030:	e020      	b.n	8009074 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8009032:	4b62      	ldr	r3, [pc, #392]	; (80091bc <RCCEx_PLLSAI1_Config+0x1d8>)
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	f003 0302 	and.w	r3, r3, #2
 800903a:	2b00      	cmp	r3, #0
 800903c:	d11d      	bne.n	800907a <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800903e:	2301      	movs	r3, #1
 8009040:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009042:	e01a      	b.n	800907a <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8009044:	4b5d      	ldr	r3, [pc, #372]	; (80091bc <RCCEx_PLLSAI1_Config+0x1d8>)
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800904c:	2b00      	cmp	r3, #0
 800904e:	d116      	bne.n	800907e <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8009050:	2301      	movs	r3, #1
 8009052:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009054:	e013      	b.n	800907e <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8009056:	4b59      	ldr	r3, [pc, #356]	; (80091bc <RCCEx_PLLSAI1_Config+0x1d8>)
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800905e:	2b00      	cmp	r3, #0
 8009060:	d10f      	bne.n	8009082 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8009062:	4b56      	ldr	r3, [pc, #344]	; (80091bc <RCCEx_PLLSAI1_Config+0x1d8>)
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800906a:	2b00      	cmp	r3, #0
 800906c:	d109      	bne.n	8009082 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800906e:	2301      	movs	r3, #1
 8009070:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009072:	e006      	b.n	8009082 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8009074:	2301      	movs	r3, #1
 8009076:	73fb      	strb	r3, [r7, #15]
      break;
 8009078:	e004      	b.n	8009084 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800907a:	bf00      	nop
 800907c:	e002      	b.n	8009084 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800907e:	bf00      	nop
 8009080:	e000      	b.n	8009084 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8009082:	bf00      	nop
    }

    if(status == HAL_OK)
 8009084:	7bfb      	ldrb	r3, [r7, #15]
 8009086:	2b00      	cmp	r3, #0
 8009088:	d108      	bne.n	800909c <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800908a:	4b4c      	ldr	r3, [pc, #304]	; (80091bc <RCCEx_PLLSAI1_Config+0x1d8>)
 800908c:	68db      	ldr	r3, [r3, #12]
 800908e:	f023 0203 	bic.w	r2, r3, #3
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	4949      	ldr	r1, [pc, #292]	; (80091bc <RCCEx_PLLSAI1_Config+0x1d8>)
 8009098:	4313      	orrs	r3, r2
 800909a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800909c:	7bfb      	ldrb	r3, [r7, #15]
 800909e:	2b00      	cmp	r3, #0
 80090a0:	f040 8086 	bne.w	80091b0 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80090a4:	4b45      	ldr	r3, [pc, #276]	; (80091bc <RCCEx_PLLSAI1_Config+0x1d8>)
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	4a44      	ldr	r2, [pc, #272]	; (80091bc <RCCEx_PLLSAI1_Config+0x1d8>)
 80090aa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80090ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80090b0:	f7fd f86c 	bl	800618c <HAL_GetTick>
 80090b4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80090b6:	e009      	b.n	80090cc <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80090b8:	f7fd f868 	bl	800618c <HAL_GetTick>
 80090bc:	4602      	mov	r2, r0
 80090be:	68bb      	ldr	r3, [r7, #8]
 80090c0:	1ad3      	subs	r3, r2, r3
 80090c2:	2b02      	cmp	r3, #2
 80090c4:	d902      	bls.n	80090cc <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80090c6:	2303      	movs	r3, #3
 80090c8:	73fb      	strb	r3, [r7, #15]
        break;
 80090ca:	e005      	b.n	80090d8 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80090cc:	4b3b      	ldr	r3, [pc, #236]	; (80091bc <RCCEx_PLLSAI1_Config+0x1d8>)
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d1ef      	bne.n	80090b8 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80090d8:	7bfb      	ldrb	r3, [r7, #15]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d168      	bne.n	80091b0 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80090de:	683b      	ldr	r3, [r7, #0]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d113      	bne.n	800910c <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80090e4:	4b35      	ldr	r3, [pc, #212]	; (80091bc <RCCEx_PLLSAI1_Config+0x1d8>)
 80090e6:	691a      	ldr	r2, [r3, #16]
 80090e8:	4b35      	ldr	r3, [pc, #212]	; (80091c0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80090ea:	4013      	ands	r3, r2
 80090ec:	687a      	ldr	r2, [r7, #4]
 80090ee:	6892      	ldr	r2, [r2, #8]
 80090f0:	0211      	lsls	r1, r2, #8
 80090f2:	687a      	ldr	r2, [r7, #4]
 80090f4:	68d2      	ldr	r2, [r2, #12]
 80090f6:	06d2      	lsls	r2, r2, #27
 80090f8:	4311      	orrs	r1, r2
 80090fa:	687a      	ldr	r2, [r7, #4]
 80090fc:	6852      	ldr	r2, [r2, #4]
 80090fe:	3a01      	subs	r2, #1
 8009100:	0112      	lsls	r2, r2, #4
 8009102:	430a      	orrs	r2, r1
 8009104:	492d      	ldr	r1, [pc, #180]	; (80091bc <RCCEx_PLLSAI1_Config+0x1d8>)
 8009106:	4313      	orrs	r3, r2
 8009108:	610b      	str	r3, [r1, #16]
 800910a:	e02d      	b.n	8009168 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800910c:	683b      	ldr	r3, [r7, #0]
 800910e:	2b01      	cmp	r3, #1
 8009110:	d115      	bne.n	800913e <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8009112:	4b2a      	ldr	r3, [pc, #168]	; (80091bc <RCCEx_PLLSAI1_Config+0x1d8>)
 8009114:	691a      	ldr	r2, [r3, #16]
 8009116:	4b2b      	ldr	r3, [pc, #172]	; (80091c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009118:	4013      	ands	r3, r2
 800911a:	687a      	ldr	r2, [r7, #4]
 800911c:	6892      	ldr	r2, [r2, #8]
 800911e:	0211      	lsls	r1, r2, #8
 8009120:	687a      	ldr	r2, [r7, #4]
 8009122:	6912      	ldr	r2, [r2, #16]
 8009124:	0852      	lsrs	r2, r2, #1
 8009126:	3a01      	subs	r2, #1
 8009128:	0552      	lsls	r2, r2, #21
 800912a:	4311      	orrs	r1, r2
 800912c:	687a      	ldr	r2, [r7, #4]
 800912e:	6852      	ldr	r2, [r2, #4]
 8009130:	3a01      	subs	r2, #1
 8009132:	0112      	lsls	r2, r2, #4
 8009134:	430a      	orrs	r2, r1
 8009136:	4921      	ldr	r1, [pc, #132]	; (80091bc <RCCEx_PLLSAI1_Config+0x1d8>)
 8009138:	4313      	orrs	r3, r2
 800913a:	610b      	str	r3, [r1, #16]
 800913c:	e014      	b.n	8009168 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800913e:	4b1f      	ldr	r3, [pc, #124]	; (80091bc <RCCEx_PLLSAI1_Config+0x1d8>)
 8009140:	691a      	ldr	r2, [r3, #16]
 8009142:	4b21      	ldr	r3, [pc, #132]	; (80091c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009144:	4013      	ands	r3, r2
 8009146:	687a      	ldr	r2, [r7, #4]
 8009148:	6892      	ldr	r2, [r2, #8]
 800914a:	0211      	lsls	r1, r2, #8
 800914c:	687a      	ldr	r2, [r7, #4]
 800914e:	6952      	ldr	r2, [r2, #20]
 8009150:	0852      	lsrs	r2, r2, #1
 8009152:	3a01      	subs	r2, #1
 8009154:	0652      	lsls	r2, r2, #25
 8009156:	4311      	orrs	r1, r2
 8009158:	687a      	ldr	r2, [r7, #4]
 800915a:	6852      	ldr	r2, [r2, #4]
 800915c:	3a01      	subs	r2, #1
 800915e:	0112      	lsls	r2, r2, #4
 8009160:	430a      	orrs	r2, r1
 8009162:	4916      	ldr	r1, [pc, #88]	; (80091bc <RCCEx_PLLSAI1_Config+0x1d8>)
 8009164:	4313      	orrs	r3, r2
 8009166:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8009168:	4b14      	ldr	r3, [pc, #80]	; (80091bc <RCCEx_PLLSAI1_Config+0x1d8>)
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	4a13      	ldr	r2, [pc, #76]	; (80091bc <RCCEx_PLLSAI1_Config+0x1d8>)
 800916e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009172:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009174:	f7fd f80a 	bl	800618c <HAL_GetTick>
 8009178:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800917a:	e009      	b.n	8009190 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800917c:	f7fd f806 	bl	800618c <HAL_GetTick>
 8009180:	4602      	mov	r2, r0
 8009182:	68bb      	ldr	r3, [r7, #8]
 8009184:	1ad3      	subs	r3, r2, r3
 8009186:	2b02      	cmp	r3, #2
 8009188:	d902      	bls.n	8009190 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800918a:	2303      	movs	r3, #3
 800918c:	73fb      	strb	r3, [r7, #15]
          break;
 800918e:	e005      	b.n	800919c <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8009190:	4b0a      	ldr	r3, [pc, #40]	; (80091bc <RCCEx_PLLSAI1_Config+0x1d8>)
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009198:	2b00      	cmp	r3, #0
 800919a:	d0ef      	beq.n	800917c <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800919c:	7bfb      	ldrb	r3, [r7, #15]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d106      	bne.n	80091b0 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80091a2:	4b06      	ldr	r3, [pc, #24]	; (80091bc <RCCEx_PLLSAI1_Config+0x1d8>)
 80091a4:	691a      	ldr	r2, [r3, #16]
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	699b      	ldr	r3, [r3, #24]
 80091aa:	4904      	ldr	r1, [pc, #16]	; (80091bc <RCCEx_PLLSAI1_Config+0x1d8>)
 80091ac:	4313      	orrs	r3, r2
 80091ae:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80091b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80091b2:	4618      	mov	r0, r3
 80091b4:	3710      	adds	r7, #16
 80091b6:	46bd      	mov	sp, r7
 80091b8:	bd80      	pop	{r7, pc}
 80091ba:	bf00      	nop
 80091bc:	40021000 	.word	0x40021000
 80091c0:	07ff800f 	.word	0x07ff800f
 80091c4:	ff9f800f 	.word	0xff9f800f
 80091c8:	f9ff800f 	.word	0xf9ff800f

080091cc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80091cc:	b580      	push	{r7, lr}
 80091ce:	b084      	sub	sp, #16
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	6078      	str	r0, [r7, #4]
 80091d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80091d6:	2300      	movs	r3, #0
 80091d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80091da:	4b72      	ldr	r3, [pc, #456]	; (80093a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80091dc:	68db      	ldr	r3, [r3, #12]
 80091de:	f003 0303 	and.w	r3, r3, #3
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d00e      	beq.n	8009204 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80091e6:	4b6f      	ldr	r3, [pc, #444]	; (80093a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80091e8:	68db      	ldr	r3, [r3, #12]
 80091ea:	f003 0203 	and.w	r2, r3, #3
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	429a      	cmp	r2, r3
 80091f4:	d103      	bne.n	80091fe <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
       ||
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d142      	bne.n	8009284 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80091fe:	2301      	movs	r3, #1
 8009200:	73fb      	strb	r3, [r7, #15]
 8009202:	e03f      	b.n	8009284 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	2b03      	cmp	r3, #3
 800920a:	d018      	beq.n	800923e <RCCEx_PLLSAI2_Config+0x72>
 800920c:	2b03      	cmp	r3, #3
 800920e:	d825      	bhi.n	800925c <RCCEx_PLLSAI2_Config+0x90>
 8009210:	2b01      	cmp	r3, #1
 8009212:	d002      	beq.n	800921a <RCCEx_PLLSAI2_Config+0x4e>
 8009214:	2b02      	cmp	r3, #2
 8009216:	d009      	beq.n	800922c <RCCEx_PLLSAI2_Config+0x60>
 8009218:	e020      	b.n	800925c <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800921a:	4b62      	ldr	r3, [pc, #392]	; (80093a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	f003 0302 	and.w	r3, r3, #2
 8009222:	2b00      	cmp	r3, #0
 8009224:	d11d      	bne.n	8009262 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8009226:	2301      	movs	r3, #1
 8009228:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800922a:	e01a      	b.n	8009262 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800922c:	4b5d      	ldr	r3, [pc, #372]	; (80093a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009234:	2b00      	cmp	r3, #0
 8009236:	d116      	bne.n	8009266 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8009238:	2301      	movs	r3, #1
 800923a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800923c:	e013      	b.n	8009266 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800923e:	4b59      	ldr	r3, [pc, #356]	; (80093a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009246:	2b00      	cmp	r3, #0
 8009248:	d10f      	bne.n	800926a <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800924a:	4b56      	ldr	r3, [pc, #344]	; (80093a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009252:	2b00      	cmp	r3, #0
 8009254:	d109      	bne.n	800926a <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8009256:	2301      	movs	r3, #1
 8009258:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800925a:	e006      	b.n	800926a <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 800925c:	2301      	movs	r3, #1
 800925e:	73fb      	strb	r3, [r7, #15]
      break;
 8009260:	e004      	b.n	800926c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8009262:	bf00      	nop
 8009264:	e002      	b.n	800926c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8009266:	bf00      	nop
 8009268:	e000      	b.n	800926c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800926a:	bf00      	nop
    }

    if(status == HAL_OK)
 800926c:	7bfb      	ldrb	r3, [r7, #15]
 800926e:	2b00      	cmp	r3, #0
 8009270:	d108      	bne.n	8009284 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8009272:	4b4c      	ldr	r3, [pc, #304]	; (80093a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8009274:	68db      	ldr	r3, [r3, #12]
 8009276:	f023 0203 	bic.w	r2, r3, #3
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	4949      	ldr	r1, [pc, #292]	; (80093a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8009280:	4313      	orrs	r3, r2
 8009282:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8009284:	7bfb      	ldrb	r3, [r7, #15]
 8009286:	2b00      	cmp	r3, #0
 8009288:	f040 8086 	bne.w	8009398 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800928c:	4b45      	ldr	r3, [pc, #276]	; (80093a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	4a44      	ldr	r2, [pc, #272]	; (80093a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8009292:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009296:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009298:	f7fc ff78 	bl	800618c <HAL_GetTick>
 800929c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800929e:	e009      	b.n	80092b4 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80092a0:	f7fc ff74 	bl	800618c <HAL_GetTick>
 80092a4:	4602      	mov	r2, r0
 80092a6:	68bb      	ldr	r3, [r7, #8]
 80092a8:	1ad3      	subs	r3, r2, r3
 80092aa:	2b02      	cmp	r3, #2
 80092ac:	d902      	bls.n	80092b4 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80092ae:	2303      	movs	r3, #3
 80092b0:	73fb      	strb	r3, [r7, #15]
        break;
 80092b2:	e005      	b.n	80092c0 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80092b4:	4b3b      	ldr	r3, [pc, #236]	; (80093a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d1ef      	bne.n	80092a0 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80092c0:	7bfb      	ldrb	r3, [r7, #15]
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d168      	bne.n	8009398 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80092c6:	683b      	ldr	r3, [r7, #0]
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d113      	bne.n	80092f4 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80092cc:	4b35      	ldr	r3, [pc, #212]	; (80093a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80092ce:	695a      	ldr	r2, [r3, #20]
 80092d0:	4b35      	ldr	r3, [pc, #212]	; (80093a8 <RCCEx_PLLSAI2_Config+0x1dc>)
 80092d2:	4013      	ands	r3, r2
 80092d4:	687a      	ldr	r2, [r7, #4]
 80092d6:	6892      	ldr	r2, [r2, #8]
 80092d8:	0211      	lsls	r1, r2, #8
 80092da:	687a      	ldr	r2, [r7, #4]
 80092dc:	68d2      	ldr	r2, [r2, #12]
 80092de:	06d2      	lsls	r2, r2, #27
 80092e0:	4311      	orrs	r1, r2
 80092e2:	687a      	ldr	r2, [r7, #4]
 80092e4:	6852      	ldr	r2, [r2, #4]
 80092e6:	3a01      	subs	r2, #1
 80092e8:	0112      	lsls	r2, r2, #4
 80092ea:	430a      	orrs	r2, r1
 80092ec:	492d      	ldr	r1, [pc, #180]	; (80093a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80092ee:	4313      	orrs	r3, r2
 80092f0:	614b      	str	r3, [r1, #20]
 80092f2:	e02d      	b.n	8009350 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80092f4:	683b      	ldr	r3, [r7, #0]
 80092f6:	2b01      	cmp	r3, #1
 80092f8:	d115      	bne.n	8009326 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80092fa:	4b2a      	ldr	r3, [pc, #168]	; (80093a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80092fc:	695a      	ldr	r2, [r3, #20]
 80092fe:	4b2b      	ldr	r3, [pc, #172]	; (80093ac <RCCEx_PLLSAI2_Config+0x1e0>)
 8009300:	4013      	ands	r3, r2
 8009302:	687a      	ldr	r2, [r7, #4]
 8009304:	6892      	ldr	r2, [r2, #8]
 8009306:	0211      	lsls	r1, r2, #8
 8009308:	687a      	ldr	r2, [r7, #4]
 800930a:	6912      	ldr	r2, [r2, #16]
 800930c:	0852      	lsrs	r2, r2, #1
 800930e:	3a01      	subs	r2, #1
 8009310:	0552      	lsls	r2, r2, #21
 8009312:	4311      	orrs	r1, r2
 8009314:	687a      	ldr	r2, [r7, #4]
 8009316:	6852      	ldr	r2, [r2, #4]
 8009318:	3a01      	subs	r2, #1
 800931a:	0112      	lsls	r2, r2, #4
 800931c:	430a      	orrs	r2, r1
 800931e:	4921      	ldr	r1, [pc, #132]	; (80093a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8009320:	4313      	orrs	r3, r2
 8009322:	614b      	str	r3, [r1, #20]
 8009324:	e014      	b.n	8009350 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8009326:	4b1f      	ldr	r3, [pc, #124]	; (80093a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8009328:	695a      	ldr	r2, [r3, #20]
 800932a:	4b21      	ldr	r3, [pc, #132]	; (80093b0 <RCCEx_PLLSAI2_Config+0x1e4>)
 800932c:	4013      	ands	r3, r2
 800932e:	687a      	ldr	r2, [r7, #4]
 8009330:	6892      	ldr	r2, [r2, #8]
 8009332:	0211      	lsls	r1, r2, #8
 8009334:	687a      	ldr	r2, [r7, #4]
 8009336:	6952      	ldr	r2, [r2, #20]
 8009338:	0852      	lsrs	r2, r2, #1
 800933a:	3a01      	subs	r2, #1
 800933c:	0652      	lsls	r2, r2, #25
 800933e:	4311      	orrs	r1, r2
 8009340:	687a      	ldr	r2, [r7, #4]
 8009342:	6852      	ldr	r2, [r2, #4]
 8009344:	3a01      	subs	r2, #1
 8009346:	0112      	lsls	r2, r2, #4
 8009348:	430a      	orrs	r2, r1
 800934a:	4916      	ldr	r1, [pc, #88]	; (80093a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800934c:	4313      	orrs	r3, r2
 800934e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8009350:	4b14      	ldr	r3, [pc, #80]	; (80093a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	4a13      	ldr	r2, [pc, #76]	; (80093a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8009356:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800935a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800935c:	f7fc ff16 	bl	800618c <HAL_GetTick>
 8009360:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8009362:	e009      	b.n	8009378 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8009364:	f7fc ff12 	bl	800618c <HAL_GetTick>
 8009368:	4602      	mov	r2, r0
 800936a:	68bb      	ldr	r3, [r7, #8]
 800936c:	1ad3      	subs	r3, r2, r3
 800936e:	2b02      	cmp	r3, #2
 8009370:	d902      	bls.n	8009378 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8009372:	2303      	movs	r3, #3
 8009374:	73fb      	strb	r3, [r7, #15]
          break;
 8009376:	e005      	b.n	8009384 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8009378:	4b0a      	ldr	r3, [pc, #40]	; (80093a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009380:	2b00      	cmp	r3, #0
 8009382:	d0ef      	beq.n	8009364 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8009384:	7bfb      	ldrb	r3, [r7, #15]
 8009386:	2b00      	cmp	r3, #0
 8009388:	d106      	bne.n	8009398 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800938a:	4b06      	ldr	r3, [pc, #24]	; (80093a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800938c:	695a      	ldr	r2, [r3, #20]
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	699b      	ldr	r3, [r3, #24]
 8009392:	4904      	ldr	r1, [pc, #16]	; (80093a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8009394:	4313      	orrs	r3, r2
 8009396:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8009398:	7bfb      	ldrb	r3, [r7, #15]
}
 800939a:	4618      	mov	r0, r3
 800939c:	3710      	adds	r7, #16
 800939e:	46bd      	mov	sp, r7
 80093a0:	bd80      	pop	{r7, pc}
 80093a2:	bf00      	nop
 80093a4:	40021000 	.word	0x40021000
 80093a8:	07ff800f 	.word	0x07ff800f
 80093ac:	ff9f800f 	.word	0xff9f800f
 80093b0:	f9ff800f 	.word	0xf9ff800f

080093b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80093b4:	b580      	push	{r7, lr}
 80093b6:	b082      	sub	sp, #8
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d101      	bne.n	80093c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80093c2:	2301      	movs	r3, #1
 80093c4:	e049      	b.n	800945a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80093cc:	b2db      	uxtb	r3, r3
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d106      	bne.n	80093e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	2200      	movs	r2, #0
 80093d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80093da:	6878      	ldr	r0, [r7, #4]
 80093dc:	f000 f841 	bl	8009462 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	2202      	movs	r2, #2
 80093e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681a      	ldr	r2, [r3, #0]
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	3304      	adds	r3, #4
 80093f0:	4619      	mov	r1, r3
 80093f2:	4610      	mov	r0, r2
 80093f4:	f000 f9f8 	bl	80097e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	2201      	movs	r2, #1
 80093fc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	2201      	movs	r2, #1
 8009404:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	2201      	movs	r2, #1
 800940c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	2201      	movs	r2, #1
 8009414:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	2201      	movs	r2, #1
 800941c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	2201      	movs	r2, #1
 8009424:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	2201      	movs	r2, #1
 800942c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	2201      	movs	r2, #1
 8009434:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	2201      	movs	r2, #1
 800943c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	2201      	movs	r2, #1
 8009444:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	2201      	movs	r2, #1
 800944c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	2201      	movs	r2, #1
 8009454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009458:	2300      	movs	r3, #0
}
 800945a:	4618      	mov	r0, r3
 800945c:	3708      	adds	r7, #8
 800945e:	46bd      	mov	sp, r7
 8009460:	bd80      	pop	{r7, pc}

08009462 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8009462:	b480      	push	{r7}
 8009464:	b083      	sub	sp, #12
 8009466:	af00      	add	r7, sp, #0
 8009468:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800946a:	bf00      	nop
 800946c:	370c      	adds	r7, #12
 800946e:	46bd      	mov	sp, r7
 8009470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009474:	4770      	bx	lr
	...

08009478 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009478:	b480      	push	{r7}
 800947a:	b085      	sub	sp, #20
 800947c:	af00      	add	r7, sp, #0
 800947e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009486:	b2db      	uxtb	r3, r3
 8009488:	2b01      	cmp	r3, #1
 800948a:	d001      	beq.n	8009490 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800948c:	2301      	movs	r3, #1
 800948e:	e04f      	b.n	8009530 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	2202      	movs	r2, #2
 8009494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	68da      	ldr	r2, [r3, #12]
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	f042 0201 	orr.w	r2, r2, #1
 80094a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	4a23      	ldr	r2, [pc, #140]	; (800953c <HAL_TIM_Base_Start_IT+0xc4>)
 80094ae:	4293      	cmp	r3, r2
 80094b0:	d01d      	beq.n	80094ee <HAL_TIM_Base_Start_IT+0x76>
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80094ba:	d018      	beq.n	80094ee <HAL_TIM_Base_Start_IT+0x76>
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	4a1f      	ldr	r2, [pc, #124]	; (8009540 <HAL_TIM_Base_Start_IT+0xc8>)
 80094c2:	4293      	cmp	r3, r2
 80094c4:	d013      	beq.n	80094ee <HAL_TIM_Base_Start_IT+0x76>
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	4a1e      	ldr	r2, [pc, #120]	; (8009544 <HAL_TIM_Base_Start_IT+0xcc>)
 80094cc:	4293      	cmp	r3, r2
 80094ce:	d00e      	beq.n	80094ee <HAL_TIM_Base_Start_IT+0x76>
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	4a1c      	ldr	r2, [pc, #112]	; (8009548 <HAL_TIM_Base_Start_IT+0xd0>)
 80094d6:	4293      	cmp	r3, r2
 80094d8:	d009      	beq.n	80094ee <HAL_TIM_Base_Start_IT+0x76>
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	4a1b      	ldr	r2, [pc, #108]	; (800954c <HAL_TIM_Base_Start_IT+0xd4>)
 80094e0:	4293      	cmp	r3, r2
 80094e2:	d004      	beq.n	80094ee <HAL_TIM_Base_Start_IT+0x76>
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	4a19      	ldr	r2, [pc, #100]	; (8009550 <HAL_TIM_Base_Start_IT+0xd8>)
 80094ea:	4293      	cmp	r3, r2
 80094ec:	d115      	bne.n	800951a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	689a      	ldr	r2, [r3, #8]
 80094f4:	4b17      	ldr	r3, [pc, #92]	; (8009554 <HAL_TIM_Base_Start_IT+0xdc>)
 80094f6:	4013      	ands	r3, r2
 80094f8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	2b06      	cmp	r3, #6
 80094fe:	d015      	beq.n	800952c <HAL_TIM_Base_Start_IT+0xb4>
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009506:	d011      	beq.n	800952c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	681a      	ldr	r2, [r3, #0]
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	f042 0201 	orr.w	r2, r2, #1
 8009516:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009518:	e008      	b.n	800952c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	681a      	ldr	r2, [r3, #0]
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	f042 0201 	orr.w	r2, r2, #1
 8009528:	601a      	str	r2, [r3, #0]
 800952a:	e000      	b.n	800952e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800952c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800952e:	2300      	movs	r3, #0
}
 8009530:	4618      	mov	r0, r3
 8009532:	3714      	adds	r7, #20
 8009534:	46bd      	mov	sp, r7
 8009536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953a:	4770      	bx	lr
 800953c:	40012c00 	.word	0x40012c00
 8009540:	40000400 	.word	0x40000400
 8009544:	40000800 	.word	0x40000800
 8009548:	40000c00 	.word	0x40000c00
 800954c:	40013400 	.word	0x40013400
 8009550:	40014000 	.word	0x40014000
 8009554:	00010007 	.word	0x00010007

08009558 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009558:	b580      	push	{r7, lr}
 800955a:	b082      	sub	sp, #8
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	691b      	ldr	r3, [r3, #16]
 8009566:	f003 0302 	and.w	r3, r3, #2
 800956a:	2b02      	cmp	r3, #2
 800956c:	d122      	bne.n	80095b4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	68db      	ldr	r3, [r3, #12]
 8009574:	f003 0302 	and.w	r3, r3, #2
 8009578:	2b02      	cmp	r3, #2
 800957a:	d11b      	bne.n	80095b4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	f06f 0202 	mvn.w	r2, #2
 8009584:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	2201      	movs	r2, #1
 800958a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	699b      	ldr	r3, [r3, #24]
 8009592:	f003 0303 	and.w	r3, r3, #3
 8009596:	2b00      	cmp	r3, #0
 8009598:	d003      	beq.n	80095a2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800959a:	6878      	ldr	r0, [r7, #4]
 800959c:	f000 f905 	bl	80097aa <HAL_TIM_IC_CaptureCallback>
 80095a0:	e005      	b.n	80095ae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80095a2:	6878      	ldr	r0, [r7, #4]
 80095a4:	f000 f8f7 	bl	8009796 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80095a8:	6878      	ldr	r0, [r7, #4]
 80095aa:	f000 f908 	bl	80097be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	2200      	movs	r2, #0
 80095b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	691b      	ldr	r3, [r3, #16]
 80095ba:	f003 0304 	and.w	r3, r3, #4
 80095be:	2b04      	cmp	r3, #4
 80095c0:	d122      	bne.n	8009608 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	68db      	ldr	r3, [r3, #12]
 80095c8:	f003 0304 	and.w	r3, r3, #4
 80095cc:	2b04      	cmp	r3, #4
 80095ce:	d11b      	bne.n	8009608 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	f06f 0204 	mvn.w	r2, #4
 80095d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	2202      	movs	r2, #2
 80095de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	699b      	ldr	r3, [r3, #24]
 80095e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d003      	beq.n	80095f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80095ee:	6878      	ldr	r0, [r7, #4]
 80095f0:	f000 f8db 	bl	80097aa <HAL_TIM_IC_CaptureCallback>
 80095f4:	e005      	b.n	8009602 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80095f6:	6878      	ldr	r0, [r7, #4]
 80095f8:	f000 f8cd 	bl	8009796 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80095fc:	6878      	ldr	r0, [r7, #4]
 80095fe:	f000 f8de 	bl	80097be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	2200      	movs	r2, #0
 8009606:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	691b      	ldr	r3, [r3, #16]
 800960e:	f003 0308 	and.w	r3, r3, #8
 8009612:	2b08      	cmp	r3, #8
 8009614:	d122      	bne.n	800965c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	68db      	ldr	r3, [r3, #12]
 800961c:	f003 0308 	and.w	r3, r3, #8
 8009620:	2b08      	cmp	r3, #8
 8009622:	d11b      	bne.n	800965c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	f06f 0208 	mvn.w	r2, #8
 800962c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	2204      	movs	r2, #4
 8009632:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	69db      	ldr	r3, [r3, #28]
 800963a:	f003 0303 	and.w	r3, r3, #3
 800963e:	2b00      	cmp	r3, #0
 8009640:	d003      	beq.n	800964a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009642:	6878      	ldr	r0, [r7, #4]
 8009644:	f000 f8b1 	bl	80097aa <HAL_TIM_IC_CaptureCallback>
 8009648:	e005      	b.n	8009656 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800964a:	6878      	ldr	r0, [r7, #4]
 800964c:	f000 f8a3 	bl	8009796 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009650:	6878      	ldr	r0, [r7, #4]
 8009652:	f000 f8b4 	bl	80097be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	2200      	movs	r2, #0
 800965a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	691b      	ldr	r3, [r3, #16]
 8009662:	f003 0310 	and.w	r3, r3, #16
 8009666:	2b10      	cmp	r3, #16
 8009668:	d122      	bne.n	80096b0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	68db      	ldr	r3, [r3, #12]
 8009670:	f003 0310 	and.w	r3, r3, #16
 8009674:	2b10      	cmp	r3, #16
 8009676:	d11b      	bne.n	80096b0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	f06f 0210 	mvn.w	r2, #16
 8009680:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	2208      	movs	r2, #8
 8009686:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	69db      	ldr	r3, [r3, #28]
 800968e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009692:	2b00      	cmp	r3, #0
 8009694:	d003      	beq.n	800969e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009696:	6878      	ldr	r0, [r7, #4]
 8009698:	f000 f887 	bl	80097aa <HAL_TIM_IC_CaptureCallback>
 800969c:	e005      	b.n	80096aa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800969e:	6878      	ldr	r0, [r7, #4]
 80096a0:	f000 f879 	bl	8009796 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80096a4:	6878      	ldr	r0, [r7, #4]
 80096a6:	f000 f88a 	bl	80097be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	2200      	movs	r2, #0
 80096ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	691b      	ldr	r3, [r3, #16]
 80096b6:	f003 0301 	and.w	r3, r3, #1
 80096ba:	2b01      	cmp	r3, #1
 80096bc:	d10e      	bne.n	80096dc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	68db      	ldr	r3, [r3, #12]
 80096c4:	f003 0301 	and.w	r3, r3, #1
 80096c8:	2b01      	cmp	r3, #1
 80096ca:	d107      	bne.n	80096dc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	f06f 0201 	mvn.w	r2, #1
 80096d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80096d6:	6878      	ldr	r0, [r7, #4]
 80096d8:	f7fb fa0a 	bl	8004af0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	691b      	ldr	r3, [r3, #16]
 80096e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80096e6:	2b80      	cmp	r3, #128	; 0x80
 80096e8:	d10e      	bne.n	8009708 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	68db      	ldr	r3, [r3, #12]
 80096f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80096f4:	2b80      	cmp	r3, #128	; 0x80
 80096f6:	d107      	bne.n	8009708 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009700:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009702:	6878      	ldr	r0, [r7, #4]
 8009704:	f000 f914 	bl	8009930 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	691b      	ldr	r3, [r3, #16]
 800970e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009712:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009716:	d10e      	bne.n	8009736 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	68db      	ldr	r3, [r3, #12]
 800971e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009722:	2b80      	cmp	r3, #128	; 0x80
 8009724:	d107      	bne.n	8009736 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800972e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009730:	6878      	ldr	r0, [r7, #4]
 8009732:	f000 f907 	bl	8009944 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	691b      	ldr	r3, [r3, #16]
 800973c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009740:	2b40      	cmp	r3, #64	; 0x40
 8009742:	d10e      	bne.n	8009762 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	68db      	ldr	r3, [r3, #12]
 800974a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800974e:	2b40      	cmp	r3, #64	; 0x40
 8009750:	d107      	bne.n	8009762 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800975a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800975c:	6878      	ldr	r0, [r7, #4]
 800975e:	f000 f838 	bl	80097d2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	691b      	ldr	r3, [r3, #16]
 8009768:	f003 0320 	and.w	r3, r3, #32
 800976c:	2b20      	cmp	r3, #32
 800976e:	d10e      	bne.n	800978e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	68db      	ldr	r3, [r3, #12]
 8009776:	f003 0320 	and.w	r3, r3, #32
 800977a:	2b20      	cmp	r3, #32
 800977c:	d107      	bne.n	800978e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	f06f 0220 	mvn.w	r2, #32
 8009786:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009788:	6878      	ldr	r0, [r7, #4]
 800978a:	f000 f8c7 	bl	800991c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800978e:	bf00      	nop
 8009790:	3708      	adds	r7, #8
 8009792:	46bd      	mov	sp, r7
 8009794:	bd80      	pop	{r7, pc}

08009796 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009796:	b480      	push	{r7}
 8009798:	b083      	sub	sp, #12
 800979a:	af00      	add	r7, sp, #0
 800979c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800979e:	bf00      	nop
 80097a0:	370c      	adds	r7, #12
 80097a2:	46bd      	mov	sp, r7
 80097a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a8:	4770      	bx	lr

080097aa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80097aa:	b480      	push	{r7}
 80097ac:	b083      	sub	sp, #12
 80097ae:	af00      	add	r7, sp, #0
 80097b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80097b2:	bf00      	nop
 80097b4:	370c      	adds	r7, #12
 80097b6:	46bd      	mov	sp, r7
 80097b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097bc:	4770      	bx	lr

080097be <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80097be:	b480      	push	{r7}
 80097c0:	b083      	sub	sp, #12
 80097c2:	af00      	add	r7, sp, #0
 80097c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80097c6:	bf00      	nop
 80097c8:	370c      	adds	r7, #12
 80097ca:	46bd      	mov	sp, r7
 80097cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d0:	4770      	bx	lr

080097d2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80097d2:	b480      	push	{r7}
 80097d4:	b083      	sub	sp, #12
 80097d6:	af00      	add	r7, sp, #0
 80097d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80097da:	bf00      	nop
 80097dc:	370c      	adds	r7, #12
 80097de:	46bd      	mov	sp, r7
 80097e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e4:	4770      	bx	lr
	...

080097e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80097e8:	b480      	push	{r7}
 80097ea:	b085      	sub	sp, #20
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	6078      	str	r0, [r7, #4]
 80097f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	4a40      	ldr	r2, [pc, #256]	; (80098fc <TIM_Base_SetConfig+0x114>)
 80097fc:	4293      	cmp	r3, r2
 80097fe:	d013      	beq.n	8009828 <TIM_Base_SetConfig+0x40>
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009806:	d00f      	beq.n	8009828 <TIM_Base_SetConfig+0x40>
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	4a3d      	ldr	r2, [pc, #244]	; (8009900 <TIM_Base_SetConfig+0x118>)
 800980c:	4293      	cmp	r3, r2
 800980e:	d00b      	beq.n	8009828 <TIM_Base_SetConfig+0x40>
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	4a3c      	ldr	r2, [pc, #240]	; (8009904 <TIM_Base_SetConfig+0x11c>)
 8009814:	4293      	cmp	r3, r2
 8009816:	d007      	beq.n	8009828 <TIM_Base_SetConfig+0x40>
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	4a3b      	ldr	r2, [pc, #236]	; (8009908 <TIM_Base_SetConfig+0x120>)
 800981c:	4293      	cmp	r3, r2
 800981e:	d003      	beq.n	8009828 <TIM_Base_SetConfig+0x40>
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	4a3a      	ldr	r2, [pc, #232]	; (800990c <TIM_Base_SetConfig+0x124>)
 8009824:	4293      	cmp	r3, r2
 8009826:	d108      	bne.n	800983a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800982e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009830:	683b      	ldr	r3, [r7, #0]
 8009832:	685b      	ldr	r3, [r3, #4]
 8009834:	68fa      	ldr	r2, [r7, #12]
 8009836:	4313      	orrs	r3, r2
 8009838:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	4a2f      	ldr	r2, [pc, #188]	; (80098fc <TIM_Base_SetConfig+0x114>)
 800983e:	4293      	cmp	r3, r2
 8009840:	d01f      	beq.n	8009882 <TIM_Base_SetConfig+0x9a>
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009848:	d01b      	beq.n	8009882 <TIM_Base_SetConfig+0x9a>
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	4a2c      	ldr	r2, [pc, #176]	; (8009900 <TIM_Base_SetConfig+0x118>)
 800984e:	4293      	cmp	r3, r2
 8009850:	d017      	beq.n	8009882 <TIM_Base_SetConfig+0x9a>
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	4a2b      	ldr	r2, [pc, #172]	; (8009904 <TIM_Base_SetConfig+0x11c>)
 8009856:	4293      	cmp	r3, r2
 8009858:	d013      	beq.n	8009882 <TIM_Base_SetConfig+0x9a>
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	4a2a      	ldr	r2, [pc, #168]	; (8009908 <TIM_Base_SetConfig+0x120>)
 800985e:	4293      	cmp	r3, r2
 8009860:	d00f      	beq.n	8009882 <TIM_Base_SetConfig+0x9a>
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	4a29      	ldr	r2, [pc, #164]	; (800990c <TIM_Base_SetConfig+0x124>)
 8009866:	4293      	cmp	r3, r2
 8009868:	d00b      	beq.n	8009882 <TIM_Base_SetConfig+0x9a>
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	4a28      	ldr	r2, [pc, #160]	; (8009910 <TIM_Base_SetConfig+0x128>)
 800986e:	4293      	cmp	r3, r2
 8009870:	d007      	beq.n	8009882 <TIM_Base_SetConfig+0x9a>
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	4a27      	ldr	r2, [pc, #156]	; (8009914 <TIM_Base_SetConfig+0x12c>)
 8009876:	4293      	cmp	r3, r2
 8009878:	d003      	beq.n	8009882 <TIM_Base_SetConfig+0x9a>
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	4a26      	ldr	r2, [pc, #152]	; (8009918 <TIM_Base_SetConfig+0x130>)
 800987e:	4293      	cmp	r3, r2
 8009880:	d108      	bne.n	8009894 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009888:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800988a:	683b      	ldr	r3, [r7, #0]
 800988c:	68db      	ldr	r3, [r3, #12]
 800988e:	68fa      	ldr	r2, [r7, #12]
 8009890:	4313      	orrs	r3, r2
 8009892:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800989a:	683b      	ldr	r3, [r7, #0]
 800989c:	695b      	ldr	r3, [r3, #20]
 800989e:	4313      	orrs	r3, r2
 80098a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	68fa      	ldr	r2, [r7, #12]
 80098a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80098a8:	683b      	ldr	r3, [r7, #0]
 80098aa:	689a      	ldr	r2, [r3, #8]
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80098b0:	683b      	ldr	r3, [r7, #0]
 80098b2:	681a      	ldr	r2, [r3, #0]
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	4a10      	ldr	r2, [pc, #64]	; (80098fc <TIM_Base_SetConfig+0x114>)
 80098bc:	4293      	cmp	r3, r2
 80098be:	d00f      	beq.n	80098e0 <TIM_Base_SetConfig+0xf8>
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	4a12      	ldr	r2, [pc, #72]	; (800990c <TIM_Base_SetConfig+0x124>)
 80098c4:	4293      	cmp	r3, r2
 80098c6:	d00b      	beq.n	80098e0 <TIM_Base_SetConfig+0xf8>
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	4a11      	ldr	r2, [pc, #68]	; (8009910 <TIM_Base_SetConfig+0x128>)
 80098cc:	4293      	cmp	r3, r2
 80098ce:	d007      	beq.n	80098e0 <TIM_Base_SetConfig+0xf8>
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	4a10      	ldr	r2, [pc, #64]	; (8009914 <TIM_Base_SetConfig+0x12c>)
 80098d4:	4293      	cmp	r3, r2
 80098d6:	d003      	beq.n	80098e0 <TIM_Base_SetConfig+0xf8>
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	4a0f      	ldr	r2, [pc, #60]	; (8009918 <TIM_Base_SetConfig+0x130>)
 80098dc:	4293      	cmp	r3, r2
 80098de:	d103      	bne.n	80098e8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80098e0:	683b      	ldr	r3, [r7, #0]
 80098e2:	691a      	ldr	r2, [r3, #16]
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	2201      	movs	r2, #1
 80098ec:	615a      	str	r2, [r3, #20]
}
 80098ee:	bf00      	nop
 80098f0:	3714      	adds	r7, #20
 80098f2:	46bd      	mov	sp, r7
 80098f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f8:	4770      	bx	lr
 80098fa:	bf00      	nop
 80098fc:	40012c00 	.word	0x40012c00
 8009900:	40000400 	.word	0x40000400
 8009904:	40000800 	.word	0x40000800
 8009908:	40000c00 	.word	0x40000c00
 800990c:	40013400 	.word	0x40013400
 8009910:	40014000 	.word	0x40014000
 8009914:	40014400 	.word	0x40014400
 8009918:	40014800 	.word	0x40014800

0800991c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800991c:	b480      	push	{r7}
 800991e:	b083      	sub	sp, #12
 8009920:	af00      	add	r7, sp, #0
 8009922:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009924:	bf00      	nop
 8009926:	370c      	adds	r7, #12
 8009928:	46bd      	mov	sp, r7
 800992a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800992e:	4770      	bx	lr

08009930 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009930:	b480      	push	{r7}
 8009932:	b083      	sub	sp, #12
 8009934:	af00      	add	r7, sp, #0
 8009936:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009938:	bf00      	nop
 800993a:	370c      	adds	r7, #12
 800993c:	46bd      	mov	sp, r7
 800993e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009942:	4770      	bx	lr

08009944 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009944:	b480      	push	{r7}
 8009946:	b083      	sub	sp, #12
 8009948:	af00      	add	r7, sp, #0
 800994a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800994c:	bf00      	nop
 800994e:	370c      	adds	r7, #12
 8009950:	46bd      	mov	sp, r7
 8009952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009956:	4770      	bx	lr

08009958 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009958:	b580      	push	{r7, lr}
 800995a:	b082      	sub	sp, #8
 800995c:	af00      	add	r7, sp, #0
 800995e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	2b00      	cmp	r3, #0
 8009964:	d101      	bne.n	800996a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009966:	2301      	movs	r3, #1
 8009968:	e042      	b.n	80099f0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009970:	2b00      	cmp	r3, #0
 8009972:	d106      	bne.n	8009982 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	2200      	movs	r2, #0
 8009978:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800997c:	6878      	ldr	r0, [r7, #4]
 800997e:	f7fb fe75 	bl	800566c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	2224      	movs	r2, #36	; 0x24
 8009986:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	681a      	ldr	r2, [r3, #0]
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	f022 0201 	bic.w	r2, r2, #1
 8009998:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800999a:	6878      	ldr	r0, [r7, #4]
 800999c:	f000 fc52 	bl	800a244 <UART_SetConfig>
 80099a0:	4603      	mov	r3, r0
 80099a2:	2b01      	cmp	r3, #1
 80099a4:	d101      	bne.n	80099aa <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80099a6:	2301      	movs	r3, #1
 80099a8:	e022      	b.n	80099f0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d002      	beq.n	80099b8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80099b2:	6878      	ldr	r0, [r7, #4]
 80099b4:	f000 ff42 	bl	800a83c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	685a      	ldr	r2, [r3, #4]
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80099c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	689a      	ldr	r2, [r3, #8]
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80099d6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	681a      	ldr	r2, [r3, #0]
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	f042 0201 	orr.w	r2, r2, #1
 80099e6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80099e8:	6878      	ldr	r0, [r7, #4]
 80099ea:	f000 ffc9 	bl	800a980 <UART_CheckIdleState>
 80099ee:	4603      	mov	r3, r0
}
 80099f0:	4618      	mov	r0, r3
 80099f2:	3708      	adds	r7, #8
 80099f4:	46bd      	mov	sp, r7
 80099f6:	bd80      	pop	{r7, pc}

080099f8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80099f8:	b580      	push	{r7, lr}
 80099fa:	b08a      	sub	sp, #40	; 0x28
 80099fc:	af02      	add	r7, sp, #8
 80099fe:	60f8      	str	r0, [r7, #12]
 8009a00:	60b9      	str	r1, [r7, #8]
 8009a02:	603b      	str	r3, [r7, #0]
 8009a04:	4613      	mov	r3, r2
 8009a06:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009a0e:	2b20      	cmp	r3, #32
 8009a10:	f040 8084 	bne.w	8009b1c <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8009a14:	68bb      	ldr	r3, [r7, #8]
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d002      	beq.n	8009a20 <HAL_UART_Transmit+0x28>
 8009a1a:	88fb      	ldrh	r3, [r7, #6]
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d101      	bne.n	8009a24 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8009a20:	2301      	movs	r3, #1
 8009a22:	e07c      	b.n	8009b1e <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009a2a:	2b01      	cmp	r3, #1
 8009a2c:	d101      	bne.n	8009a32 <HAL_UART_Transmit+0x3a>
 8009a2e:	2302      	movs	r3, #2
 8009a30:	e075      	b.n	8009b1e <HAL_UART_Transmit+0x126>
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	2201      	movs	r2, #1
 8009a36:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	2200      	movs	r2, #0
 8009a3e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	2221      	movs	r2, #33	; 0x21
 8009a46:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009a4a:	f7fc fb9f 	bl	800618c <HAL_GetTick>
 8009a4e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	88fa      	ldrh	r2, [r7, #6]
 8009a54:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	88fa      	ldrh	r2, [r7, #6]
 8009a5c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	689b      	ldr	r3, [r3, #8]
 8009a64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a68:	d108      	bne.n	8009a7c <HAL_UART_Transmit+0x84>
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	691b      	ldr	r3, [r3, #16]
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d104      	bne.n	8009a7c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8009a72:	2300      	movs	r3, #0
 8009a74:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009a76:	68bb      	ldr	r3, [r7, #8]
 8009a78:	61bb      	str	r3, [r7, #24]
 8009a7a:	e003      	b.n	8009a84 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8009a7c:	68bb      	ldr	r3, [r7, #8]
 8009a7e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009a80:	2300      	movs	r3, #0
 8009a82:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	2200      	movs	r2, #0
 8009a88:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8009a8c:	e02d      	b.n	8009aea <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009a8e:	683b      	ldr	r3, [r7, #0]
 8009a90:	9300      	str	r3, [sp, #0]
 8009a92:	697b      	ldr	r3, [r7, #20]
 8009a94:	2200      	movs	r2, #0
 8009a96:	2180      	movs	r1, #128	; 0x80
 8009a98:	68f8      	ldr	r0, [r7, #12]
 8009a9a:	f000 ffbc 	bl	800aa16 <UART_WaitOnFlagUntilTimeout>
 8009a9e:	4603      	mov	r3, r0
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d001      	beq.n	8009aa8 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8009aa4:	2303      	movs	r3, #3
 8009aa6:	e03a      	b.n	8009b1e <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 8009aa8:	69fb      	ldr	r3, [r7, #28]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d10b      	bne.n	8009ac6 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009aae:	69bb      	ldr	r3, [r7, #24]
 8009ab0:	881a      	ldrh	r2, [r3, #0]
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009aba:	b292      	uxth	r2, r2
 8009abc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8009abe:	69bb      	ldr	r3, [r7, #24]
 8009ac0:	3302      	adds	r3, #2
 8009ac2:	61bb      	str	r3, [r7, #24]
 8009ac4:	e008      	b.n	8009ad8 <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009ac6:	69fb      	ldr	r3, [r7, #28]
 8009ac8:	781a      	ldrb	r2, [r3, #0]
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	b292      	uxth	r2, r2
 8009ad0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8009ad2:	69fb      	ldr	r3, [r7, #28]
 8009ad4:	3301      	adds	r3, #1
 8009ad6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009ade:	b29b      	uxth	r3, r3
 8009ae0:	3b01      	subs	r3, #1
 8009ae2:	b29a      	uxth	r2, r3
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009af0:	b29b      	uxth	r3, r3
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d1cb      	bne.n	8009a8e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009af6:	683b      	ldr	r3, [r7, #0]
 8009af8:	9300      	str	r3, [sp, #0]
 8009afa:	697b      	ldr	r3, [r7, #20]
 8009afc:	2200      	movs	r2, #0
 8009afe:	2140      	movs	r1, #64	; 0x40
 8009b00:	68f8      	ldr	r0, [r7, #12]
 8009b02:	f000 ff88 	bl	800aa16 <UART_WaitOnFlagUntilTimeout>
 8009b06:	4603      	mov	r3, r0
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d001      	beq.n	8009b10 <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 8009b0c:	2303      	movs	r3, #3
 8009b0e:	e006      	b.n	8009b1e <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	2220      	movs	r2, #32
 8009b14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8009b18:	2300      	movs	r3, #0
 8009b1a:	e000      	b.n	8009b1e <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 8009b1c:	2302      	movs	r3, #2
  }
}
 8009b1e:	4618      	mov	r0, r3
 8009b20:	3720      	adds	r7, #32
 8009b22:	46bd      	mov	sp, r7
 8009b24:	bd80      	pop	{r7, pc}
	...

08009b28 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009b28:	b580      	push	{r7, lr}
 8009b2a:	b08a      	sub	sp, #40	; 0x28
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	60f8      	str	r0, [r7, #12]
 8009b30:	60b9      	str	r1, [r7, #8]
 8009b32:	4613      	mov	r3, r2
 8009b34:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b3c:	2b20      	cmp	r3, #32
 8009b3e:	d142      	bne.n	8009bc6 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8009b40:	68bb      	ldr	r3, [r7, #8]
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d002      	beq.n	8009b4c <HAL_UART_Receive_IT+0x24>
 8009b46:	88fb      	ldrh	r3, [r7, #6]
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d101      	bne.n	8009b50 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8009b4c:	2301      	movs	r3, #1
 8009b4e:	e03b      	b.n	8009bc8 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009b56:	2b01      	cmp	r3, #1
 8009b58:	d101      	bne.n	8009b5e <HAL_UART_Receive_IT+0x36>
 8009b5a:	2302      	movs	r3, #2
 8009b5c:	e034      	b.n	8009bc8 <HAL_UART_Receive_IT+0xa0>
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	2201      	movs	r2, #1
 8009b62:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	2200      	movs	r2, #0
 8009b6a:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	4a17      	ldr	r2, [pc, #92]	; (8009bd0 <HAL_UART_Receive_IT+0xa8>)
 8009b72:	4293      	cmp	r3, r2
 8009b74:	d01f      	beq.n	8009bb6 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	685b      	ldr	r3, [r3, #4]
 8009b7c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d018      	beq.n	8009bb6 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b8a:	697b      	ldr	r3, [r7, #20]
 8009b8c:	e853 3f00 	ldrex	r3, [r3]
 8009b90:	613b      	str	r3, [r7, #16]
   return(result);
 8009b92:	693b      	ldr	r3, [r7, #16]
 8009b94:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009b98:	627b      	str	r3, [r7, #36]	; 0x24
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	461a      	mov	r2, r3
 8009ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ba2:	623b      	str	r3, [r7, #32]
 8009ba4:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ba6:	69f9      	ldr	r1, [r7, #28]
 8009ba8:	6a3a      	ldr	r2, [r7, #32]
 8009baa:	e841 2300 	strex	r3, r2, [r1]
 8009bae:	61bb      	str	r3, [r7, #24]
   return(result);
 8009bb0:	69bb      	ldr	r3, [r7, #24]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d1e6      	bne.n	8009b84 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8009bb6:	88fb      	ldrh	r3, [r7, #6]
 8009bb8:	461a      	mov	r2, r3
 8009bba:	68b9      	ldr	r1, [r7, #8]
 8009bbc:	68f8      	ldr	r0, [r7, #12]
 8009bbe:	f000 fff3 	bl	800aba8 <UART_Start_Receive_IT>
 8009bc2:	4603      	mov	r3, r0
 8009bc4:	e000      	b.n	8009bc8 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8009bc6:	2302      	movs	r3, #2
  }
}
 8009bc8:	4618      	mov	r0, r3
 8009bca:	3728      	adds	r7, #40	; 0x28
 8009bcc:	46bd      	mov	sp, r7
 8009bce:	bd80      	pop	{r7, pc}
 8009bd0:	40008000 	.word	0x40008000

08009bd4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009bd4:	b580      	push	{r7, lr}
 8009bd6:	b0ba      	sub	sp, #232	; 0xe8
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	69db      	ldr	r3, [r3, #28]
 8009be2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	689b      	ldr	r3, [r3, #8]
 8009bf6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009bfa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8009bfe:	f640 030f 	movw	r3, #2063	; 0x80f
 8009c02:	4013      	ands	r3, r2
 8009c04:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8009c08:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d11b      	bne.n	8009c48 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009c10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009c14:	f003 0320 	and.w	r3, r3, #32
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d015      	beq.n	8009c48 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009c1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009c20:	f003 0320 	and.w	r3, r3, #32
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d105      	bne.n	8009c34 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009c28:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009c2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d009      	beq.n	8009c48 <HAL_UART_IRQHandler+0x74>
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	f000 82d6 	beq.w	800a1ea <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c42:	6878      	ldr	r0, [r7, #4]
 8009c44:	4798      	blx	r3
      }
      return;
 8009c46:	e2d0      	b.n	800a1ea <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
 8009c48:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	f000 811f 	beq.w	8009e90 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009c52:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8009c56:	4b8b      	ldr	r3, [pc, #556]	; (8009e84 <HAL_UART_IRQHandler+0x2b0>)
 8009c58:	4013      	ands	r3, r2
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d106      	bne.n	8009c6c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009c5e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8009c62:	4b89      	ldr	r3, [pc, #548]	; (8009e88 <HAL_UART_IRQHandler+0x2b4>)
 8009c64:	4013      	ands	r3, r2
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	f000 8112 	beq.w	8009e90 <HAL_UART_IRQHandler+0x2bc>
      && (((cr3its & USART_CR3_EIE) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009c6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009c70:	f003 0301 	and.w	r3, r3, #1
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d011      	beq.n	8009c9c <HAL_UART_IRQHandler+0xc8>
 8009c78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009c7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d00b      	beq.n	8009c9c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	2201      	movs	r2, #1
 8009c8a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009c92:	f043 0201 	orr.w	r2, r3, #1
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009c9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009ca0:	f003 0302 	and.w	r3, r3, #2
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d011      	beq.n	8009ccc <HAL_UART_IRQHandler+0xf8>
 8009ca8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009cac:	f003 0301 	and.w	r3, r3, #1
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d00b      	beq.n	8009ccc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	2202      	movs	r2, #2
 8009cba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009cc2:	f043 0204 	orr.w	r2, r3, #4
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009ccc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009cd0:	f003 0304 	and.w	r3, r3, #4
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d011      	beq.n	8009cfc <HAL_UART_IRQHandler+0x128>
 8009cd8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009cdc:	f003 0301 	and.w	r3, r3, #1
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d00b      	beq.n	8009cfc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	2204      	movs	r2, #4
 8009cea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009cf2:	f043 0202 	orr.w	r2, r3, #2
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009cfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d00:	f003 0308 	and.w	r3, r3, #8
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d017      	beq.n	8009d38 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009d08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009d0c:	f003 0320 	and.w	r3, r3, #32
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d105      	bne.n	8009d20 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009d14:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8009d18:	4b5a      	ldr	r3, [pc, #360]	; (8009e84 <HAL_UART_IRQHandler+0x2b0>)
 8009d1a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d00b      	beq.n	8009d38 <HAL_UART_IRQHandler+0x164>
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	2208      	movs	r2, #8
 8009d26:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009d2e:	f043 0208 	orr.w	r2, r3, #8
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009d38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d012      	beq.n	8009d6a <HAL_UART_IRQHandler+0x196>
 8009d44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009d48:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d00c      	beq.n	8009d6a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009d58:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009d60:	f043 0220 	orr.w	r2, r3, #32
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	f000 823c 	beq.w	800a1ee <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009d76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d7a:	f003 0320 	and.w	r3, r3, #32
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d013      	beq.n	8009daa <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009d82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009d86:	f003 0320 	and.w	r3, r3, #32
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d105      	bne.n	8009d9a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009d8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009d92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d007      	beq.n	8009daa <HAL_UART_IRQHandler+0x1d6>
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d003      	beq.n	8009daa <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009da6:	6878      	ldr	r0, [r7, #4]
 8009da8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009db0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	689b      	ldr	r3, [r3, #8]
 8009dba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009dbe:	2b40      	cmp	r3, #64	; 0x40
 8009dc0:	d005      	beq.n	8009dce <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009dc2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009dc6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d04f      	beq.n	8009e6e <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009dce:	6878      	ldr	r0, [r7, #4]
 8009dd0:	f001 f814 	bl	800adfc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	689b      	ldr	r3, [r3, #8]
 8009dda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009dde:	2b40      	cmp	r3, #64	; 0x40
 8009de0:	d141      	bne.n	8009e66 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	3308      	adds	r3, #8
 8009de8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009df0:	e853 3f00 	ldrex	r3, [r3]
 8009df4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009df8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009dfc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009e00:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	3308      	adds	r3, #8
 8009e0a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009e0e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009e12:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e16:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009e1a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009e1e:	e841 2300 	strex	r3, r2, [r1]
 8009e22:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009e26:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d1d9      	bne.n	8009de2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d013      	beq.n	8009e5e <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009e3a:	4a14      	ldr	r2, [pc, #80]	; (8009e8c <HAL_UART_IRQHandler+0x2b8>)
 8009e3c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009e42:	4618      	mov	r0, r3
 8009e44:	f7fc fb10 	bl	8006468 <HAL_DMA_Abort_IT>
 8009e48:	4603      	mov	r3, r0
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d017      	beq.n	8009e7e <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009e52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e54:	687a      	ldr	r2, [r7, #4]
 8009e56:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8009e58:	4610      	mov	r0, r2
 8009e5a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009e5c:	e00f      	b.n	8009e7e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009e5e:	6878      	ldr	r0, [r7, #4]
 8009e60:	f000 f9da 	bl	800a218 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009e64:	e00b      	b.n	8009e7e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009e66:	6878      	ldr	r0, [r7, #4]
 8009e68:	f000 f9d6 	bl	800a218 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009e6c:	e007      	b.n	8009e7e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009e6e:	6878      	ldr	r0, [r7, #4]
 8009e70:	f000 f9d2 	bl	800a218 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	2200      	movs	r2, #0
 8009e78:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8009e7c:	e1b7      	b.n	800a1ee <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009e7e:	bf00      	nop
    return;
 8009e80:	e1b5      	b.n	800a1ee <HAL_UART_IRQHandler+0x61a>
 8009e82:	bf00      	nop
 8009e84:	10000001 	.word	0x10000001
 8009e88:	04000120 	.word	0x04000120
 8009e8c:	0800aec9 	.word	0x0800aec9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009e94:	2b01      	cmp	r3, #1
 8009e96:	f040 814a 	bne.w	800a12e <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009e9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e9e:	f003 0310 	and.w	r3, r3, #16
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	f000 8143 	beq.w	800a12e <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009ea8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009eac:	f003 0310 	and.w	r3, r3, #16
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	f000 813c 	beq.w	800a12e <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	2210      	movs	r2, #16
 8009ebc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	689b      	ldr	r3, [r3, #8]
 8009ec4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ec8:	2b40      	cmp	r3, #64	; 0x40
 8009eca:	f040 80b5 	bne.w	800a038 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	685b      	ldr	r3, [r3, #4]
 8009ed6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009eda:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	f000 8187 	beq.w	800a1f2 <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009eea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009eee:	429a      	cmp	r2, r3
 8009ef0:	f080 817f 	bcs.w	800a1f2 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009efa:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	f003 0320 	and.w	r3, r3, #32
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	f040 8086 	bne.w	800a01c <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f18:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009f1c:	e853 3f00 	ldrex	r3, [r3]
 8009f20:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009f24:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009f28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009f2c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	461a      	mov	r2, r3
 8009f36:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009f3a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009f3e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f42:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009f46:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009f4a:	e841 2300 	strex	r3, r2, [r1]
 8009f4e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009f52:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d1da      	bne.n	8009f10 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	3308      	adds	r3, #8
 8009f60:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009f64:	e853 3f00 	ldrex	r3, [r3]
 8009f68:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009f6a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009f6c:	f023 0301 	bic.w	r3, r3, #1
 8009f70:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	3308      	adds	r3, #8
 8009f7a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009f7e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009f82:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f84:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009f86:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009f8a:	e841 2300 	strex	r3, r2, [r1]
 8009f8e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009f90:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d1e1      	bne.n	8009f5a <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	3308      	adds	r3, #8
 8009f9c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f9e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009fa0:	e853 3f00 	ldrex	r3, [r3]
 8009fa4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009fa6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009fa8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009fac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	3308      	adds	r3, #8
 8009fb6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009fba:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009fbc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fbe:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009fc0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009fc2:	e841 2300 	strex	r3, r2, [r1]
 8009fc6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009fc8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d1e3      	bne.n	8009f96 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	2220      	movs	r2, #32
 8009fd2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	2200      	movs	r2, #0
 8009fda:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fe2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009fe4:	e853 3f00 	ldrex	r3, [r3]
 8009fe8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009fea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009fec:	f023 0310 	bic.w	r3, r3, #16
 8009ff0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	461a      	mov	r2, r3
 8009ffa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009ffe:	65bb      	str	r3, [r7, #88]	; 0x58
 800a000:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a002:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a004:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a006:	e841 2300 	strex	r3, r2, [r1]
 800a00a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a00c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d1e4      	bne.n	8009fdc <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a016:	4618      	mov	r0, r3
 800a018:	f7fc f9ca 	bl	80063b0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a028:	b29b      	uxth	r3, r3
 800a02a:	1ad3      	subs	r3, r2, r3
 800a02c:	b29b      	uxth	r3, r3
 800a02e:	4619      	mov	r1, r3
 800a030:	6878      	ldr	r0, [r7, #4]
 800a032:	f000 f8fb 	bl	800a22c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a036:	e0dc      	b.n	800a1f2 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a044:	b29b      	uxth	r3, r3
 800a046:	1ad3      	subs	r3, r2, r3
 800a048:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a052:	b29b      	uxth	r3, r3
 800a054:	2b00      	cmp	r3, #0
 800a056:	f000 80ce 	beq.w	800a1f6 <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 800a05a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a05e:	2b00      	cmp	r3, #0
 800a060:	f000 80c9 	beq.w	800a1f6 <HAL_UART_IRQHandler+0x622>
      {
#if defined(USART_CR1_FIFOEN)
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a06a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a06c:	e853 3f00 	ldrex	r3, [r3]
 800a070:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a072:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a074:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a078:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	461a      	mov	r2, r3
 800a082:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a086:	647b      	str	r3, [r7, #68]	; 0x44
 800a088:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a08a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a08c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a08e:	e841 2300 	strex	r3, r2, [r1]
 800a092:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a094:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a096:	2b00      	cmp	r3, #0
 800a098:	d1e4      	bne.n	800a064 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	3308      	adds	r3, #8
 800a0a0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0a4:	e853 3f00 	ldrex	r3, [r3]
 800a0a8:	623b      	str	r3, [r7, #32]
   return(result);
 800a0aa:	6a3b      	ldr	r3, [r7, #32]
 800a0ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a0b0:	f023 0301 	bic.w	r3, r3, #1
 800a0b4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	3308      	adds	r3, #8
 800a0be:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a0c2:	633a      	str	r2, [r7, #48]	; 0x30
 800a0c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a0c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a0ca:	e841 2300 	strex	r3, r2, [r1]
 800a0ce:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a0d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d1e1      	bne.n	800a09a <HAL_UART_IRQHandler+0x4c6>
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	2220      	movs	r2, #32
 800a0da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	2200      	movs	r2, #0
 800a0e2:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	2200      	movs	r2, #0
 800a0e8:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0f0:	693b      	ldr	r3, [r7, #16]
 800a0f2:	e853 3f00 	ldrex	r3, [r3]
 800a0f6:	60fb      	str	r3, [r7, #12]
   return(result);
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	f023 0310 	bic.w	r3, r3, #16
 800a0fe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	461a      	mov	r2, r3
 800a108:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a10c:	61fb      	str	r3, [r7, #28]
 800a10e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a110:	69b9      	ldr	r1, [r7, #24]
 800a112:	69fa      	ldr	r2, [r7, #28]
 800a114:	e841 2300 	strex	r3, r2, [r1]
 800a118:	617b      	str	r3, [r7, #20]
   return(result);
 800a11a:	697b      	ldr	r3, [r7, #20]
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d1e4      	bne.n	800a0ea <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a120:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a124:	4619      	mov	r1, r3
 800a126:	6878      	ldr	r0, [r7, #4]
 800a128:	f000 f880 	bl	800a22c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a12c:	e063      	b.n	800a1f6 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a12e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a132:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a136:	2b00      	cmp	r3, #0
 800a138:	d00e      	beq.n	800a158 <HAL_UART_IRQHandler+0x584>
 800a13a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a13e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a142:	2b00      	cmp	r3, #0
 800a144:	d008      	beq.n	800a158 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800a14e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800a150:	6878      	ldr	r0, [r7, #4]
 800a152:	f001 fb5f 	bl	800b814 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a156:	e051      	b.n	800a1fc <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800a158:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a15c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a160:	2b00      	cmp	r3, #0
 800a162:	d014      	beq.n	800a18e <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800a164:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a168:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d105      	bne.n	800a17c <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800a170:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a174:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d008      	beq.n	800a18e <HAL_UART_IRQHandler+0x5ba>
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
      && ((cr1its & USART_CR1_TXEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a180:	2b00      	cmp	r3, #0
 800a182:	d03a      	beq.n	800a1fa <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a188:	6878      	ldr	r0, [r7, #4]
 800a18a:	4798      	blx	r3
    }
    return;
 800a18c:	e035      	b.n	800a1fa <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a18e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a192:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a196:	2b00      	cmp	r3, #0
 800a198:	d009      	beq.n	800a1ae <HAL_UART_IRQHandler+0x5da>
 800a19a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a19e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d003      	beq.n	800a1ae <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 800a1a6:	6878      	ldr	r0, [r7, #4]
 800a1a8:	f000 fea4 	bl	800aef4 <UART_EndTransmit_IT>
    return;
 800a1ac:	e026      	b.n	800a1fc <HAL_UART_IRQHandler+0x628>
  }

#if defined(USART_CR1_FIFOEN)
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800a1ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a1b2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d009      	beq.n	800a1ce <HAL_UART_IRQHandler+0x5fa>
 800a1ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a1be:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d003      	beq.n	800a1ce <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800a1c6:	6878      	ldr	r0, [r7, #4]
 800a1c8:	f001 fb38 	bl	800b83c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a1cc:	e016      	b.n	800a1fc <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800a1ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a1d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d010      	beq.n	800a1fc <HAL_UART_IRQHandler+0x628>
 800a1da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	da0c      	bge.n	800a1fc <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800a1e2:	6878      	ldr	r0, [r7, #4]
 800a1e4:	f001 fb20 	bl	800b828 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a1e8:	e008      	b.n	800a1fc <HAL_UART_IRQHandler+0x628>
      return;
 800a1ea:	bf00      	nop
 800a1ec:	e006      	b.n	800a1fc <HAL_UART_IRQHandler+0x628>
    return;
 800a1ee:	bf00      	nop
 800a1f0:	e004      	b.n	800a1fc <HAL_UART_IRQHandler+0x628>
      return;
 800a1f2:	bf00      	nop
 800a1f4:	e002      	b.n	800a1fc <HAL_UART_IRQHandler+0x628>
      return;
 800a1f6:	bf00      	nop
 800a1f8:	e000      	b.n	800a1fc <HAL_UART_IRQHandler+0x628>
    return;
 800a1fa:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 800a1fc:	37e8      	adds	r7, #232	; 0xe8
 800a1fe:	46bd      	mov	sp, r7
 800a200:	bd80      	pop	{r7, pc}
 800a202:	bf00      	nop

0800a204 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a204:	b480      	push	{r7}
 800a206:	b083      	sub	sp, #12
 800a208:	af00      	add	r7, sp, #0
 800a20a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a20c:	bf00      	nop
 800a20e:	370c      	adds	r7, #12
 800a210:	46bd      	mov	sp, r7
 800a212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a216:	4770      	bx	lr

0800a218 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a218:	b480      	push	{r7}
 800a21a:	b083      	sub	sp, #12
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a220:	bf00      	nop
 800a222:	370c      	adds	r7, #12
 800a224:	46bd      	mov	sp, r7
 800a226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a22a:	4770      	bx	lr

0800a22c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a22c:	b480      	push	{r7}
 800a22e:	b083      	sub	sp, #12
 800a230:	af00      	add	r7, sp, #0
 800a232:	6078      	str	r0, [r7, #4]
 800a234:	460b      	mov	r3, r1
 800a236:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a238:	bf00      	nop
 800a23a:	370c      	adds	r7, #12
 800a23c:	46bd      	mov	sp, r7
 800a23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a242:	4770      	bx	lr

0800a244 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a244:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a248:	b08c      	sub	sp, #48	; 0x30
 800a24a:	af00      	add	r7, sp, #0
 800a24c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a24e:	2300      	movs	r3, #0
 800a250:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a254:	697b      	ldr	r3, [r7, #20]
 800a256:	689a      	ldr	r2, [r3, #8]
 800a258:	697b      	ldr	r3, [r7, #20]
 800a25a:	691b      	ldr	r3, [r3, #16]
 800a25c:	431a      	orrs	r2, r3
 800a25e:	697b      	ldr	r3, [r7, #20]
 800a260:	695b      	ldr	r3, [r3, #20]
 800a262:	431a      	orrs	r2, r3
 800a264:	697b      	ldr	r3, [r7, #20]
 800a266:	69db      	ldr	r3, [r3, #28]
 800a268:	4313      	orrs	r3, r2
 800a26a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a26c:	697b      	ldr	r3, [r7, #20]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	681a      	ldr	r2, [r3, #0]
 800a272:	4baa      	ldr	r3, [pc, #680]	; (800a51c <UART_SetConfig+0x2d8>)
 800a274:	4013      	ands	r3, r2
 800a276:	697a      	ldr	r2, [r7, #20]
 800a278:	6812      	ldr	r2, [r2, #0]
 800a27a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a27c:	430b      	orrs	r3, r1
 800a27e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a280:	697b      	ldr	r3, [r7, #20]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	685b      	ldr	r3, [r3, #4]
 800a286:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a28a:	697b      	ldr	r3, [r7, #20]
 800a28c:	68da      	ldr	r2, [r3, #12]
 800a28e:	697b      	ldr	r3, [r7, #20]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	430a      	orrs	r2, r1
 800a294:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a296:	697b      	ldr	r3, [r7, #20]
 800a298:	699b      	ldr	r3, [r3, #24]
 800a29a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a29c:	697b      	ldr	r3, [r7, #20]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	4a9f      	ldr	r2, [pc, #636]	; (800a520 <UART_SetConfig+0x2dc>)
 800a2a2:	4293      	cmp	r3, r2
 800a2a4:	d004      	beq.n	800a2b0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a2a6:	697b      	ldr	r3, [r7, #20]
 800a2a8:	6a1b      	ldr	r3, [r3, #32]
 800a2aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a2ac:	4313      	orrs	r3, r2
 800a2ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a2b0:	697b      	ldr	r3, [r7, #20]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	689b      	ldr	r3, [r3, #8]
 800a2b6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800a2ba:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800a2be:	697a      	ldr	r2, [r7, #20]
 800a2c0:	6812      	ldr	r2, [r2, #0]
 800a2c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a2c4:	430b      	orrs	r3, r1
 800a2c6:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a2c8:	697b      	ldr	r3, [r7, #20]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2ce:	f023 010f 	bic.w	r1, r3, #15
 800a2d2:	697b      	ldr	r3, [r7, #20]
 800a2d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a2d6:	697b      	ldr	r3, [r7, #20]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	430a      	orrs	r2, r1
 800a2dc:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a2de:	697b      	ldr	r3, [r7, #20]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	4a90      	ldr	r2, [pc, #576]	; (800a524 <UART_SetConfig+0x2e0>)
 800a2e4:	4293      	cmp	r3, r2
 800a2e6:	d125      	bne.n	800a334 <UART_SetConfig+0xf0>
 800a2e8:	4b8f      	ldr	r3, [pc, #572]	; (800a528 <UART_SetConfig+0x2e4>)
 800a2ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2ee:	f003 0303 	and.w	r3, r3, #3
 800a2f2:	2b03      	cmp	r3, #3
 800a2f4:	d81a      	bhi.n	800a32c <UART_SetConfig+0xe8>
 800a2f6:	a201      	add	r2, pc, #4	; (adr r2, 800a2fc <UART_SetConfig+0xb8>)
 800a2f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2fc:	0800a30d 	.word	0x0800a30d
 800a300:	0800a31d 	.word	0x0800a31d
 800a304:	0800a315 	.word	0x0800a315
 800a308:	0800a325 	.word	0x0800a325
 800a30c:	2301      	movs	r3, #1
 800a30e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a312:	e116      	b.n	800a542 <UART_SetConfig+0x2fe>
 800a314:	2302      	movs	r3, #2
 800a316:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a31a:	e112      	b.n	800a542 <UART_SetConfig+0x2fe>
 800a31c:	2304      	movs	r3, #4
 800a31e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a322:	e10e      	b.n	800a542 <UART_SetConfig+0x2fe>
 800a324:	2308      	movs	r3, #8
 800a326:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a32a:	e10a      	b.n	800a542 <UART_SetConfig+0x2fe>
 800a32c:	2310      	movs	r3, #16
 800a32e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a332:	e106      	b.n	800a542 <UART_SetConfig+0x2fe>
 800a334:	697b      	ldr	r3, [r7, #20]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	4a7c      	ldr	r2, [pc, #496]	; (800a52c <UART_SetConfig+0x2e8>)
 800a33a:	4293      	cmp	r3, r2
 800a33c:	d138      	bne.n	800a3b0 <UART_SetConfig+0x16c>
 800a33e:	4b7a      	ldr	r3, [pc, #488]	; (800a528 <UART_SetConfig+0x2e4>)
 800a340:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a344:	f003 030c 	and.w	r3, r3, #12
 800a348:	2b0c      	cmp	r3, #12
 800a34a:	d82d      	bhi.n	800a3a8 <UART_SetConfig+0x164>
 800a34c:	a201      	add	r2, pc, #4	; (adr r2, 800a354 <UART_SetConfig+0x110>)
 800a34e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a352:	bf00      	nop
 800a354:	0800a389 	.word	0x0800a389
 800a358:	0800a3a9 	.word	0x0800a3a9
 800a35c:	0800a3a9 	.word	0x0800a3a9
 800a360:	0800a3a9 	.word	0x0800a3a9
 800a364:	0800a399 	.word	0x0800a399
 800a368:	0800a3a9 	.word	0x0800a3a9
 800a36c:	0800a3a9 	.word	0x0800a3a9
 800a370:	0800a3a9 	.word	0x0800a3a9
 800a374:	0800a391 	.word	0x0800a391
 800a378:	0800a3a9 	.word	0x0800a3a9
 800a37c:	0800a3a9 	.word	0x0800a3a9
 800a380:	0800a3a9 	.word	0x0800a3a9
 800a384:	0800a3a1 	.word	0x0800a3a1
 800a388:	2300      	movs	r3, #0
 800a38a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a38e:	e0d8      	b.n	800a542 <UART_SetConfig+0x2fe>
 800a390:	2302      	movs	r3, #2
 800a392:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a396:	e0d4      	b.n	800a542 <UART_SetConfig+0x2fe>
 800a398:	2304      	movs	r3, #4
 800a39a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a39e:	e0d0      	b.n	800a542 <UART_SetConfig+0x2fe>
 800a3a0:	2308      	movs	r3, #8
 800a3a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a3a6:	e0cc      	b.n	800a542 <UART_SetConfig+0x2fe>
 800a3a8:	2310      	movs	r3, #16
 800a3aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a3ae:	e0c8      	b.n	800a542 <UART_SetConfig+0x2fe>
 800a3b0:	697b      	ldr	r3, [r7, #20]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	4a5e      	ldr	r2, [pc, #376]	; (800a530 <UART_SetConfig+0x2ec>)
 800a3b6:	4293      	cmp	r3, r2
 800a3b8:	d125      	bne.n	800a406 <UART_SetConfig+0x1c2>
 800a3ba:	4b5b      	ldr	r3, [pc, #364]	; (800a528 <UART_SetConfig+0x2e4>)
 800a3bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a3c0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a3c4:	2b30      	cmp	r3, #48	; 0x30
 800a3c6:	d016      	beq.n	800a3f6 <UART_SetConfig+0x1b2>
 800a3c8:	2b30      	cmp	r3, #48	; 0x30
 800a3ca:	d818      	bhi.n	800a3fe <UART_SetConfig+0x1ba>
 800a3cc:	2b20      	cmp	r3, #32
 800a3ce:	d00a      	beq.n	800a3e6 <UART_SetConfig+0x1a2>
 800a3d0:	2b20      	cmp	r3, #32
 800a3d2:	d814      	bhi.n	800a3fe <UART_SetConfig+0x1ba>
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d002      	beq.n	800a3de <UART_SetConfig+0x19a>
 800a3d8:	2b10      	cmp	r3, #16
 800a3da:	d008      	beq.n	800a3ee <UART_SetConfig+0x1aa>
 800a3dc:	e00f      	b.n	800a3fe <UART_SetConfig+0x1ba>
 800a3de:	2300      	movs	r3, #0
 800a3e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a3e4:	e0ad      	b.n	800a542 <UART_SetConfig+0x2fe>
 800a3e6:	2302      	movs	r3, #2
 800a3e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a3ec:	e0a9      	b.n	800a542 <UART_SetConfig+0x2fe>
 800a3ee:	2304      	movs	r3, #4
 800a3f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a3f4:	e0a5      	b.n	800a542 <UART_SetConfig+0x2fe>
 800a3f6:	2308      	movs	r3, #8
 800a3f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a3fc:	e0a1      	b.n	800a542 <UART_SetConfig+0x2fe>
 800a3fe:	2310      	movs	r3, #16
 800a400:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a404:	e09d      	b.n	800a542 <UART_SetConfig+0x2fe>
 800a406:	697b      	ldr	r3, [r7, #20]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	4a4a      	ldr	r2, [pc, #296]	; (800a534 <UART_SetConfig+0x2f0>)
 800a40c:	4293      	cmp	r3, r2
 800a40e:	d125      	bne.n	800a45c <UART_SetConfig+0x218>
 800a410:	4b45      	ldr	r3, [pc, #276]	; (800a528 <UART_SetConfig+0x2e4>)
 800a412:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a416:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a41a:	2bc0      	cmp	r3, #192	; 0xc0
 800a41c:	d016      	beq.n	800a44c <UART_SetConfig+0x208>
 800a41e:	2bc0      	cmp	r3, #192	; 0xc0
 800a420:	d818      	bhi.n	800a454 <UART_SetConfig+0x210>
 800a422:	2b80      	cmp	r3, #128	; 0x80
 800a424:	d00a      	beq.n	800a43c <UART_SetConfig+0x1f8>
 800a426:	2b80      	cmp	r3, #128	; 0x80
 800a428:	d814      	bhi.n	800a454 <UART_SetConfig+0x210>
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d002      	beq.n	800a434 <UART_SetConfig+0x1f0>
 800a42e:	2b40      	cmp	r3, #64	; 0x40
 800a430:	d008      	beq.n	800a444 <UART_SetConfig+0x200>
 800a432:	e00f      	b.n	800a454 <UART_SetConfig+0x210>
 800a434:	2300      	movs	r3, #0
 800a436:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a43a:	e082      	b.n	800a542 <UART_SetConfig+0x2fe>
 800a43c:	2302      	movs	r3, #2
 800a43e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a442:	e07e      	b.n	800a542 <UART_SetConfig+0x2fe>
 800a444:	2304      	movs	r3, #4
 800a446:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a44a:	e07a      	b.n	800a542 <UART_SetConfig+0x2fe>
 800a44c:	2308      	movs	r3, #8
 800a44e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a452:	e076      	b.n	800a542 <UART_SetConfig+0x2fe>
 800a454:	2310      	movs	r3, #16
 800a456:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a45a:	e072      	b.n	800a542 <UART_SetConfig+0x2fe>
 800a45c:	697b      	ldr	r3, [r7, #20]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	4a35      	ldr	r2, [pc, #212]	; (800a538 <UART_SetConfig+0x2f4>)
 800a462:	4293      	cmp	r3, r2
 800a464:	d12a      	bne.n	800a4bc <UART_SetConfig+0x278>
 800a466:	4b30      	ldr	r3, [pc, #192]	; (800a528 <UART_SetConfig+0x2e4>)
 800a468:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a46c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a470:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a474:	d01a      	beq.n	800a4ac <UART_SetConfig+0x268>
 800a476:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a47a:	d81b      	bhi.n	800a4b4 <UART_SetConfig+0x270>
 800a47c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a480:	d00c      	beq.n	800a49c <UART_SetConfig+0x258>
 800a482:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a486:	d815      	bhi.n	800a4b4 <UART_SetConfig+0x270>
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d003      	beq.n	800a494 <UART_SetConfig+0x250>
 800a48c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a490:	d008      	beq.n	800a4a4 <UART_SetConfig+0x260>
 800a492:	e00f      	b.n	800a4b4 <UART_SetConfig+0x270>
 800a494:	2300      	movs	r3, #0
 800a496:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a49a:	e052      	b.n	800a542 <UART_SetConfig+0x2fe>
 800a49c:	2302      	movs	r3, #2
 800a49e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a4a2:	e04e      	b.n	800a542 <UART_SetConfig+0x2fe>
 800a4a4:	2304      	movs	r3, #4
 800a4a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a4aa:	e04a      	b.n	800a542 <UART_SetConfig+0x2fe>
 800a4ac:	2308      	movs	r3, #8
 800a4ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a4b2:	e046      	b.n	800a542 <UART_SetConfig+0x2fe>
 800a4b4:	2310      	movs	r3, #16
 800a4b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a4ba:	e042      	b.n	800a542 <UART_SetConfig+0x2fe>
 800a4bc:	697b      	ldr	r3, [r7, #20]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	4a17      	ldr	r2, [pc, #92]	; (800a520 <UART_SetConfig+0x2dc>)
 800a4c2:	4293      	cmp	r3, r2
 800a4c4:	d13a      	bne.n	800a53c <UART_SetConfig+0x2f8>
 800a4c6:	4b18      	ldr	r3, [pc, #96]	; (800a528 <UART_SetConfig+0x2e4>)
 800a4c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4cc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a4d0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a4d4:	d01a      	beq.n	800a50c <UART_SetConfig+0x2c8>
 800a4d6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a4da:	d81b      	bhi.n	800a514 <UART_SetConfig+0x2d0>
 800a4dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a4e0:	d00c      	beq.n	800a4fc <UART_SetConfig+0x2b8>
 800a4e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a4e6:	d815      	bhi.n	800a514 <UART_SetConfig+0x2d0>
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d003      	beq.n	800a4f4 <UART_SetConfig+0x2b0>
 800a4ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a4f0:	d008      	beq.n	800a504 <UART_SetConfig+0x2c0>
 800a4f2:	e00f      	b.n	800a514 <UART_SetConfig+0x2d0>
 800a4f4:	2300      	movs	r3, #0
 800a4f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a4fa:	e022      	b.n	800a542 <UART_SetConfig+0x2fe>
 800a4fc:	2302      	movs	r3, #2
 800a4fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a502:	e01e      	b.n	800a542 <UART_SetConfig+0x2fe>
 800a504:	2304      	movs	r3, #4
 800a506:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a50a:	e01a      	b.n	800a542 <UART_SetConfig+0x2fe>
 800a50c:	2308      	movs	r3, #8
 800a50e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a512:	e016      	b.n	800a542 <UART_SetConfig+0x2fe>
 800a514:	2310      	movs	r3, #16
 800a516:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a51a:	e012      	b.n	800a542 <UART_SetConfig+0x2fe>
 800a51c:	cfff69f3 	.word	0xcfff69f3
 800a520:	40008000 	.word	0x40008000
 800a524:	40013800 	.word	0x40013800
 800a528:	40021000 	.word	0x40021000
 800a52c:	40004400 	.word	0x40004400
 800a530:	40004800 	.word	0x40004800
 800a534:	40004c00 	.word	0x40004c00
 800a538:	40005000 	.word	0x40005000
 800a53c:	2310      	movs	r3, #16
 800a53e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a542:	697b      	ldr	r3, [r7, #20]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	4aae      	ldr	r2, [pc, #696]	; (800a800 <UART_SetConfig+0x5bc>)
 800a548:	4293      	cmp	r3, r2
 800a54a:	f040 8097 	bne.w	800a67c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a54e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a552:	2b08      	cmp	r3, #8
 800a554:	d823      	bhi.n	800a59e <UART_SetConfig+0x35a>
 800a556:	a201      	add	r2, pc, #4	; (adr r2, 800a55c <UART_SetConfig+0x318>)
 800a558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a55c:	0800a581 	.word	0x0800a581
 800a560:	0800a59f 	.word	0x0800a59f
 800a564:	0800a589 	.word	0x0800a589
 800a568:	0800a59f 	.word	0x0800a59f
 800a56c:	0800a58f 	.word	0x0800a58f
 800a570:	0800a59f 	.word	0x0800a59f
 800a574:	0800a59f 	.word	0x0800a59f
 800a578:	0800a59f 	.word	0x0800a59f
 800a57c:	0800a597 	.word	0x0800a597
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a580:	f7fe f8e2 	bl	8008748 <HAL_RCC_GetPCLK1Freq>
 800a584:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a586:	e010      	b.n	800a5aa <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a588:	4b9e      	ldr	r3, [pc, #632]	; (800a804 <UART_SetConfig+0x5c0>)
 800a58a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a58c:	e00d      	b.n	800a5aa <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a58e:	f7fe f843 	bl	8008618 <HAL_RCC_GetSysClockFreq>
 800a592:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a594:	e009      	b.n	800a5aa <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a596:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a59a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a59c:	e005      	b.n	800a5aa <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800a59e:	2300      	movs	r3, #0
 800a5a0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800a5a2:	2301      	movs	r3, #1
 800a5a4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800a5a8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a5aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	f000 8130 	beq.w	800a812 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a5b2:	697b      	ldr	r3, [r7, #20]
 800a5b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5b6:	4a94      	ldr	r2, [pc, #592]	; (800a808 <UART_SetConfig+0x5c4>)
 800a5b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a5bc:	461a      	mov	r2, r3
 800a5be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5c0:	fbb3 f3f2 	udiv	r3, r3, r2
 800a5c4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a5c6:	697b      	ldr	r3, [r7, #20]
 800a5c8:	685a      	ldr	r2, [r3, #4]
 800a5ca:	4613      	mov	r3, r2
 800a5cc:	005b      	lsls	r3, r3, #1
 800a5ce:	4413      	add	r3, r2
 800a5d0:	69ba      	ldr	r2, [r7, #24]
 800a5d2:	429a      	cmp	r2, r3
 800a5d4:	d305      	bcc.n	800a5e2 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a5d6:	697b      	ldr	r3, [r7, #20]
 800a5d8:	685b      	ldr	r3, [r3, #4]
 800a5da:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a5dc:	69ba      	ldr	r2, [r7, #24]
 800a5de:	429a      	cmp	r2, r3
 800a5e0:	d903      	bls.n	800a5ea <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800a5e2:	2301      	movs	r3, #1
 800a5e4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800a5e8:	e113      	b.n	800a812 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a5ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5ec:	2200      	movs	r2, #0
 800a5ee:	60bb      	str	r3, [r7, #8]
 800a5f0:	60fa      	str	r2, [r7, #12]
 800a5f2:	697b      	ldr	r3, [r7, #20]
 800a5f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5f6:	4a84      	ldr	r2, [pc, #528]	; (800a808 <UART_SetConfig+0x5c4>)
 800a5f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a5fc:	b29b      	uxth	r3, r3
 800a5fe:	2200      	movs	r2, #0
 800a600:	603b      	str	r3, [r7, #0]
 800a602:	607a      	str	r2, [r7, #4]
 800a604:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a608:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a60c:	f7f6 fae4 	bl	8000bd8 <__aeabi_uldivmod>
 800a610:	4602      	mov	r2, r0
 800a612:	460b      	mov	r3, r1
 800a614:	4610      	mov	r0, r2
 800a616:	4619      	mov	r1, r3
 800a618:	f04f 0200 	mov.w	r2, #0
 800a61c:	f04f 0300 	mov.w	r3, #0
 800a620:	020b      	lsls	r3, r1, #8
 800a622:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a626:	0202      	lsls	r2, r0, #8
 800a628:	6979      	ldr	r1, [r7, #20]
 800a62a:	6849      	ldr	r1, [r1, #4]
 800a62c:	0849      	lsrs	r1, r1, #1
 800a62e:	2000      	movs	r0, #0
 800a630:	460c      	mov	r4, r1
 800a632:	4605      	mov	r5, r0
 800a634:	eb12 0804 	adds.w	r8, r2, r4
 800a638:	eb43 0905 	adc.w	r9, r3, r5
 800a63c:	697b      	ldr	r3, [r7, #20]
 800a63e:	685b      	ldr	r3, [r3, #4]
 800a640:	2200      	movs	r2, #0
 800a642:	469a      	mov	sl, r3
 800a644:	4693      	mov	fp, r2
 800a646:	4652      	mov	r2, sl
 800a648:	465b      	mov	r3, fp
 800a64a:	4640      	mov	r0, r8
 800a64c:	4649      	mov	r1, r9
 800a64e:	f7f6 fac3 	bl	8000bd8 <__aeabi_uldivmod>
 800a652:	4602      	mov	r2, r0
 800a654:	460b      	mov	r3, r1
 800a656:	4613      	mov	r3, r2
 800a658:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a65a:	6a3b      	ldr	r3, [r7, #32]
 800a65c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a660:	d308      	bcc.n	800a674 <UART_SetConfig+0x430>
 800a662:	6a3b      	ldr	r3, [r7, #32]
 800a664:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a668:	d204      	bcs.n	800a674 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800a66a:	697b      	ldr	r3, [r7, #20]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	6a3a      	ldr	r2, [r7, #32]
 800a670:	60da      	str	r2, [r3, #12]
 800a672:	e0ce      	b.n	800a812 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800a674:	2301      	movs	r3, #1
 800a676:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800a67a:	e0ca      	b.n	800a812 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a67c:	697b      	ldr	r3, [r7, #20]
 800a67e:	69db      	ldr	r3, [r3, #28]
 800a680:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a684:	d166      	bne.n	800a754 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800a686:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a68a:	2b08      	cmp	r3, #8
 800a68c:	d827      	bhi.n	800a6de <UART_SetConfig+0x49a>
 800a68e:	a201      	add	r2, pc, #4	; (adr r2, 800a694 <UART_SetConfig+0x450>)
 800a690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a694:	0800a6b9 	.word	0x0800a6b9
 800a698:	0800a6c1 	.word	0x0800a6c1
 800a69c:	0800a6c9 	.word	0x0800a6c9
 800a6a0:	0800a6df 	.word	0x0800a6df
 800a6a4:	0800a6cf 	.word	0x0800a6cf
 800a6a8:	0800a6df 	.word	0x0800a6df
 800a6ac:	0800a6df 	.word	0x0800a6df
 800a6b0:	0800a6df 	.word	0x0800a6df
 800a6b4:	0800a6d7 	.word	0x0800a6d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a6b8:	f7fe f846 	bl	8008748 <HAL_RCC_GetPCLK1Freq>
 800a6bc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a6be:	e014      	b.n	800a6ea <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a6c0:	f7fe f858 	bl	8008774 <HAL_RCC_GetPCLK2Freq>
 800a6c4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a6c6:	e010      	b.n	800a6ea <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a6c8:	4b4e      	ldr	r3, [pc, #312]	; (800a804 <UART_SetConfig+0x5c0>)
 800a6ca:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a6cc:	e00d      	b.n	800a6ea <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a6ce:	f7fd ffa3 	bl	8008618 <HAL_RCC_GetSysClockFreq>
 800a6d2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a6d4:	e009      	b.n	800a6ea <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a6d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a6da:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a6dc:	e005      	b.n	800a6ea <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800a6de:	2300      	movs	r3, #0
 800a6e0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800a6e2:	2301      	movs	r3, #1
 800a6e4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800a6e8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a6ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	f000 8090 	beq.w	800a812 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a6f2:	697b      	ldr	r3, [r7, #20]
 800a6f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6f6:	4a44      	ldr	r2, [pc, #272]	; (800a808 <UART_SetConfig+0x5c4>)
 800a6f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a6fc:	461a      	mov	r2, r3
 800a6fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a700:	fbb3 f3f2 	udiv	r3, r3, r2
 800a704:	005a      	lsls	r2, r3, #1
 800a706:	697b      	ldr	r3, [r7, #20]
 800a708:	685b      	ldr	r3, [r3, #4]
 800a70a:	085b      	lsrs	r3, r3, #1
 800a70c:	441a      	add	r2, r3
 800a70e:	697b      	ldr	r3, [r7, #20]
 800a710:	685b      	ldr	r3, [r3, #4]
 800a712:	fbb2 f3f3 	udiv	r3, r2, r3
 800a716:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a718:	6a3b      	ldr	r3, [r7, #32]
 800a71a:	2b0f      	cmp	r3, #15
 800a71c:	d916      	bls.n	800a74c <UART_SetConfig+0x508>
 800a71e:	6a3b      	ldr	r3, [r7, #32]
 800a720:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a724:	d212      	bcs.n	800a74c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a726:	6a3b      	ldr	r3, [r7, #32]
 800a728:	b29b      	uxth	r3, r3
 800a72a:	f023 030f 	bic.w	r3, r3, #15
 800a72e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a730:	6a3b      	ldr	r3, [r7, #32]
 800a732:	085b      	lsrs	r3, r3, #1
 800a734:	b29b      	uxth	r3, r3
 800a736:	f003 0307 	and.w	r3, r3, #7
 800a73a:	b29a      	uxth	r2, r3
 800a73c:	8bfb      	ldrh	r3, [r7, #30]
 800a73e:	4313      	orrs	r3, r2
 800a740:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800a742:	697b      	ldr	r3, [r7, #20]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	8bfa      	ldrh	r2, [r7, #30]
 800a748:	60da      	str	r2, [r3, #12]
 800a74a:	e062      	b.n	800a812 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800a74c:	2301      	movs	r3, #1
 800a74e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800a752:	e05e      	b.n	800a812 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a754:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a758:	2b08      	cmp	r3, #8
 800a75a:	d828      	bhi.n	800a7ae <UART_SetConfig+0x56a>
 800a75c:	a201      	add	r2, pc, #4	; (adr r2, 800a764 <UART_SetConfig+0x520>)
 800a75e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a762:	bf00      	nop
 800a764:	0800a789 	.word	0x0800a789
 800a768:	0800a791 	.word	0x0800a791
 800a76c:	0800a799 	.word	0x0800a799
 800a770:	0800a7af 	.word	0x0800a7af
 800a774:	0800a79f 	.word	0x0800a79f
 800a778:	0800a7af 	.word	0x0800a7af
 800a77c:	0800a7af 	.word	0x0800a7af
 800a780:	0800a7af 	.word	0x0800a7af
 800a784:	0800a7a7 	.word	0x0800a7a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a788:	f7fd ffde 	bl	8008748 <HAL_RCC_GetPCLK1Freq>
 800a78c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a78e:	e014      	b.n	800a7ba <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a790:	f7fd fff0 	bl	8008774 <HAL_RCC_GetPCLK2Freq>
 800a794:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a796:	e010      	b.n	800a7ba <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a798:	4b1a      	ldr	r3, [pc, #104]	; (800a804 <UART_SetConfig+0x5c0>)
 800a79a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a79c:	e00d      	b.n	800a7ba <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a79e:	f7fd ff3b 	bl	8008618 <HAL_RCC_GetSysClockFreq>
 800a7a2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a7a4:	e009      	b.n	800a7ba <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a7a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a7aa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a7ac:	e005      	b.n	800a7ba <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800a7ae:	2300      	movs	r3, #0
 800a7b0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800a7b2:	2301      	movs	r3, #1
 800a7b4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800a7b8:	bf00      	nop
    }

    if (pclk != 0U)
 800a7ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d028      	beq.n	800a812 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a7c0:	697b      	ldr	r3, [r7, #20]
 800a7c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7c4:	4a10      	ldr	r2, [pc, #64]	; (800a808 <UART_SetConfig+0x5c4>)
 800a7c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a7ca:	461a      	mov	r2, r3
 800a7cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7ce:	fbb3 f2f2 	udiv	r2, r3, r2
 800a7d2:	697b      	ldr	r3, [r7, #20]
 800a7d4:	685b      	ldr	r3, [r3, #4]
 800a7d6:	085b      	lsrs	r3, r3, #1
 800a7d8:	441a      	add	r2, r3
 800a7da:	697b      	ldr	r3, [r7, #20]
 800a7dc:	685b      	ldr	r3, [r3, #4]
 800a7de:	fbb2 f3f3 	udiv	r3, r2, r3
 800a7e2:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a7e4:	6a3b      	ldr	r3, [r7, #32]
 800a7e6:	2b0f      	cmp	r3, #15
 800a7e8:	d910      	bls.n	800a80c <UART_SetConfig+0x5c8>
 800a7ea:	6a3b      	ldr	r3, [r7, #32]
 800a7ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a7f0:	d20c      	bcs.n	800a80c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a7f2:	6a3b      	ldr	r3, [r7, #32]
 800a7f4:	b29a      	uxth	r2, r3
 800a7f6:	697b      	ldr	r3, [r7, #20]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	60da      	str	r2, [r3, #12]
 800a7fc:	e009      	b.n	800a812 <UART_SetConfig+0x5ce>
 800a7fe:	bf00      	nop
 800a800:	40008000 	.word	0x40008000
 800a804:	00f42400 	.word	0x00f42400
 800a808:	08014450 	.word	0x08014450
      }
      else
      {
        ret = HAL_ERROR;
 800a80c:	2301      	movs	r3, #1
 800a80e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a812:	697b      	ldr	r3, [r7, #20]
 800a814:	2201      	movs	r2, #1
 800a816:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a81a:	697b      	ldr	r3, [r7, #20]
 800a81c:	2201      	movs	r2, #1
 800a81e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a822:	697b      	ldr	r3, [r7, #20]
 800a824:	2200      	movs	r2, #0
 800a826:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800a828:	697b      	ldr	r3, [r7, #20]
 800a82a:	2200      	movs	r2, #0
 800a82c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800a82e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800a832:	4618      	mov	r0, r3
 800a834:	3730      	adds	r7, #48	; 0x30
 800a836:	46bd      	mov	sp, r7
 800a838:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800a83c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a83c:	b480      	push	{r7}
 800a83e:	b083      	sub	sp, #12
 800a840:	af00      	add	r7, sp, #0
 800a842:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a848:	f003 0301 	and.w	r3, r3, #1
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d00a      	beq.n	800a866 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	685b      	ldr	r3, [r3, #4]
 800a856:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	430a      	orrs	r2, r1
 800a864:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a86a:	f003 0302 	and.w	r3, r3, #2
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d00a      	beq.n	800a888 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	685b      	ldr	r3, [r3, #4]
 800a878:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	430a      	orrs	r2, r1
 800a886:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a88c:	f003 0304 	and.w	r3, r3, #4
 800a890:	2b00      	cmp	r3, #0
 800a892:	d00a      	beq.n	800a8aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	685b      	ldr	r3, [r3, #4]
 800a89a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	430a      	orrs	r2, r1
 800a8a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8ae:	f003 0308 	and.w	r3, r3, #8
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d00a      	beq.n	800a8cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	685b      	ldr	r3, [r3, #4]
 800a8bc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	430a      	orrs	r2, r1
 800a8ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8d0:	f003 0310 	and.w	r3, r3, #16
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d00a      	beq.n	800a8ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	689b      	ldr	r3, [r3, #8]
 800a8de:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	430a      	orrs	r2, r1
 800a8ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8f2:	f003 0320 	and.w	r3, r3, #32
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d00a      	beq.n	800a910 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	689b      	ldr	r3, [r3, #8]
 800a900:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	430a      	orrs	r2, r1
 800a90e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a914:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d01a      	beq.n	800a952 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	685b      	ldr	r3, [r3, #4]
 800a922:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	430a      	orrs	r2, r1
 800a930:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a936:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a93a:	d10a      	bne.n	800a952 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	685b      	ldr	r3, [r3, #4]
 800a942:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	430a      	orrs	r2, r1
 800a950:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a956:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d00a      	beq.n	800a974 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	685b      	ldr	r3, [r3, #4]
 800a964:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	430a      	orrs	r2, r1
 800a972:	605a      	str	r2, [r3, #4]
  }
}
 800a974:	bf00      	nop
 800a976:	370c      	adds	r7, #12
 800a978:	46bd      	mov	sp, r7
 800a97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a97e:	4770      	bx	lr

0800a980 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a980:	b580      	push	{r7, lr}
 800a982:	b086      	sub	sp, #24
 800a984:	af02      	add	r7, sp, #8
 800a986:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	2200      	movs	r2, #0
 800a98c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a990:	f7fb fbfc 	bl	800618c <HAL_GetTick>
 800a994:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	f003 0308 	and.w	r3, r3, #8
 800a9a0:	2b08      	cmp	r3, #8
 800a9a2:	d10e      	bne.n	800a9c2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a9a4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a9a8:	9300      	str	r3, [sp, #0]
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	2200      	movs	r2, #0
 800a9ae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a9b2:	6878      	ldr	r0, [r7, #4]
 800a9b4:	f000 f82f 	bl	800aa16 <UART_WaitOnFlagUntilTimeout>
 800a9b8:	4603      	mov	r3, r0
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d001      	beq.n	800a9c2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a9be:	2303      	movs	r3, #3
 800a9c0:	e025      	b.n	800aa0e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	f003 0304 	and.w	r3, r3, #4
 800a9cc:	2b04      	cmp	r3, #4
 800a9ce:	d10e      	bne.n	800a9ee <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a9d0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a9d4:	9300      	str	r3, [sp, #0]
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	2200      	movs	r2, #0
 800a9da:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a9de:	6878      	ldr	r0, [r7, #4]
 800a9e0:	f000 f819 	bl	800aa16 <UART_WaitOnFlagUntilTimeout>
 800a9e4:	4603      	mov	r3, r0
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d001      	beq.n	800a9ee <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a9ea:	2303      	movs	r3, #3
 800a9ec:	e00f      	b.n	800aa0e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	2220      	movs	r2, #32
 800a9f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	2220      	movs	r2, #32
 800a9fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	2200      	movs	r2, #0
 800aa02:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	2200      	movs	r2, #0
 800aa08:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800aa0c:	2300      	movs	r3, #0
}
 800aa0e:	4618      	mov	r0, r3
 800aa10:	3710      	adds	r7, #16
 800aa12:	46bd      	mov	sp, r7
 800aa14:	bd80      	pop	{r7, pc}

0800aa16 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800aa16:	b580      	push	{r7, lr}
 800aa18:	b09c      	sub	sp, #112	; 0x70
 800aa1a:	af00      	add	r7, sp, #0
 800aa1c:	60f8      	str	r0, [r7, #12]
 800aa1e:	60b9      	str	r1, [r7, #8]
 800aa20:	603b      	str	r3, [r7, #0]
 800aa22:	4613      	mov	r3, r2
 800aa24:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aa26:	e0a9      	b.n	800ab7c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aa28:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800aa2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa2e:	f000 80a5 	beq.w	800ab7c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aa32:	f7fb fbab 	bl	800618c <HAL_GetTick>
 800aa36:	4602      	mov	r2, r0
 800aa38:	683b      	ldr	r3, [r7, #0]
 800aa3a:	1ad3      	subs	r3, r2, r3
 800aa3c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800aa3e:	429a      	cmp	r2, r3
 800aa40:	d302      	bcc.n	800aa48 <UART_WaitOnFlagUntilTimeout+0x32>
 800aa42:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d140      	bne.n	800aaca <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aa50:	e853 3f00 	ldrex	r3, [r3]
 800aa54:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800aa56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aa58:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800aa5c:	667b      	str	r3, [r7, #100]	; 0x64
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	461a      	mov	r2, r3
 800aa64:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aa66:	65fb      	str	r3, [r7, #92]	; 0x5c
 800aa68:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa6a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800aa6c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800aa6e:	e841 2300 	strex	r3, r2, [r1]
 800aa72:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800aa74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d1e6      	bne.n	800aa48 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	3308      	adds	r3, #8
 800aa80:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa84:	e853 3f00 	ldrex	r3, [r3]
 800aa88:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800aa8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa8c:	f023 0301 	bic.w	r3, r3, #1
 800aa90:	663b      	str	r3, [r7, #96]	; 0x60
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	3308      	adds	r3, #8
 800aa98:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800aa9a:	64ba      	str	r2, [r7, #72]	; 0x48
 800aa9c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa9e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800aaa0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800aaa2:	e841 2300 	strex	r3, r2, [r1]
 800aaa6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800aaa8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d1e5      	bne.n	800aa7a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	2220      	movs	r2, #32
 800aab2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	2220      	movs	r2, #32
 800aaba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	2200      	movs	r2, #0
 800aac2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800aac6:	2303      	movs	r3, #3
 800aac8:	e069      	b.n	800ab9e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	f003 0304 	and.w	r3, r3, #4
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d051      	beq.n	800ab7c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	69db      	ldr	r3, [r3, #28]
 800aade:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800aae2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800aae6:	d149      	bne.n	800ab7c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800aaf0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aaf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aafa:	e853 3f00 	ldrex	r3, [r3]
 800aafe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ab00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab02:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ab06:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	461a      	mov	r2, r3
 800ab0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ab10:	637b      	str	r3, [r7, #52]	; 0x34
 800ab12:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab14:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ab16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ab18:	e841 2300 	strex	r3, r2, [r1]
 800ab1c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ab1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d1e6      	bne.n	800aaf2 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	3308      	adds	r3, #8
 800ab2a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab2c:	697b      	ldr	r3, [r7, #20]
 800ab2e:	e853 3f00 	ldrex	r3, [r3]
 800ab32:	613b      	str	r3, [r7, #16]
   return(result);
 800ab34:	693b      	ldr	r3, [r7, #16]
 800ab36:	f023 0301 	bic.w	r3, r3, #1
 800ab3a:	66bb      	str	r3, [r7, #104]	; 0x68
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	3308      	adds	r3, #8
 800ab42:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ab44:	623a      	str	r2, [r7, #32]
 800ab46:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab48:	69f9      	ldr	r1, [r7, #28]
 800ab4a:	6a3a      	ldr	r2, [r7, #32]
 800ab4c:	e841 2300 	strex	r3, r2, [r1]
 800ab50:	61bb      	str	r3, [r7, #24]
   return(result);
 800ab52:	69bb      	ldr	r3, [r7, #24]
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d1e5      	bne.n	800ab24 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	2220      	movs	r2, #32
 800ab5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	2220      	movs	r2, #32
 800ab64:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	2220      	movs	r2, #32
 800ab6c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	2200      	movs	r2, #0
 800ab74:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800ab78:	2303      	movs	r3, #3
 800ab7a:	e010      	b.n	800ab9e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	69da      	ldr	r2, [r3, #28]
 800ab82:	68bb      	ldr	r3, [r7, #8]
 800ab84:	4013      	ands	r3, r2
 800ab86:	68ba      	ldr	r2, [r7, #8]
 800ab88:	429a      	cmp	r2, r3
 800ab8a:	bf0c      	ite	eq
 800ab8c:	2301      	moveq	r3, #1
 800ab8e:	2300      	movne	r3, #0
 800ab90:	b2db      	uxtb	r3, r3
 800ab92:	461a      	mov	r2, r3
 800ab94:	79fb      	ldrb	r3, [r7, #7]
 800ab96:	429a      	cmp	r2, r3
 800ab98:	f43f af46 	beq.w	800aa28 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ab9c:	2300      	movs	r3, #0
}
 800ab9e:	4618      	mov	r0, r3
 800aba0:	3770      	adds	r7, #112	; 0x70
 800aba2:	46bd      	mov	sp, r7
 800aba4:	bd80      	pop	{r7, pc}
	...

0800aba8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800aba8:	b480      	push	{r7}
 800abaa:	b0a3      	sub	sp, #140	; 0x8c
 800abac:	af00      	add	r7, sp, #0
 800abae:	60f8      	str	r0, [r7, #12]
 800abb0:	60b9      	str	r1, [r7, #8]
 800abb2:	4613      	mov	r3, r2
 800abb4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	68ba      	ldr	r2, [r7, #8]
 800abba:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	88fa      	ldrh	r2, [r7, #6]
 800abc0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	88fa      	ldrh	r2, [r7, #6]
 800abc8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	2200      	movs	r2, #0
 800abd0:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	689b      	ldr	r3, [r3, #8]
 800abd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800abda:	d10e      	bne.n	800abfa <UART_Start_Receive_IT+0x52>
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	691b      	ldr	r3, [r3, #16]
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d105      	bne.n	800abf0 <UART_Start_Receive_IT+0x48>
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	f240 12ff 	movw	r2, #511	; 0x1ff
 800abea:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800abee:	e02d      	b.n	800ac4c <UART_Start_Receive_IT+0xa4>
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	22ff      	movs	r2, #255	; 0xff
 800abf4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800abf8:	e028      	b.n	800ac4c <UART_Start_Receive_IT+0xa4>
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	689b      	ldr	r3, [r3, #8]
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d10d      	bne.n	800ac1e <UART_Start_Receive_IT+0x76>
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	691b      	ldr	r3, [r3, #16]
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d104      	bne.n	800ac14 <UART_Start_Receive_IT+0x6c>
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	22ff      	movs	r2, #255	; 0xff
 800ac0e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ac12:	e01b      	b.n	800ac4c <UART_Start_Receive_IT+0xa4>
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	227f      	movs	r2, #127	; 0x7f
 800ac18:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ac1c:	e016      	b.n	800ac4c <UART_Start_Receive_IT+0xa4>
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	689b      	ldr	r3, [r3, #8]
 800ac22:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ac26:	d10d      	bne.n	800ac44 <UART_Start_Receive_IT+0x9c>
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	691b      	ldr	r3, [r3, #16]
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d104      	bne.n	800ac3a <UART_Start_Receive_IT+0x92>
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	227f      	movs	r2, #127	; 0x7f
 800ac34:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ac38:	e008      	b.n	800ac4c <UART_Start_Receive_IT+0xa4>
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	223f      	movs	r2, #63	; 0x3f
 800ac3e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ac42:	e003      	b.n	800ac4c <UART_Start_Receive_IT+0xa4>
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	2200      	movs	r2, #0
 800ac48:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	2200      	movs	r2, #0
 800ac50:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	2222      	movs	r2, #34	; 0x22
 800ac58:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	3308      	adds	r3, #8
 800ac62:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac64:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ac66:	e853 3f00 	ldrex	r3, [r3]
 800ac6a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800ac6c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ac6e:	f043 0301 	orr.w	r3, r3, #1
 800ac72:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	3308      	adds	r3, #8
 800ac7c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800ac80:	673a      	str	r2, [r7, #112]	; 0x70
 800ac82:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac84:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800ac86:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800ac88:	e841 2300 	strex	r3, r2, [r1]
 800ac8c:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800ac8e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d1e3      	bne.n	800ac5c <UART_Start_Receive_IT+0xb4>

#if defined(USART_CR1_FIFOEN)
  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ac98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ac9c:	d153      	bne.n	800ad46 <UART_Start_Receive_IT+0x19e>
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800aca4:	88fa      	ldrh	r2, [r7, #6]
 800aca6:	429a      	cmp	r2, r3
 800aca8:	d34d      	bcc.n	800ad46 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	689b      	ldr	r3, [r3, #8]
 800acae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800acb2:	d107      	bne.n	800acc4 <UART_Start_Receive_IT+0x11c>
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	691b      	ldr	r3, [r3, #16]
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d103      	bne.n	800acc4 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	4a4b      	ldr	r2, [pc, #300]	; (800adec <UART_Start_Receive_IT+0x244>)
 800acc0:	671a      	str	r2, [r3, #112]	; 0x70
 800acc2:	e002      	b.n	800acca <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	4a4a      	ldr	r2, [pc, #296]	; (800adf0 <UART_Start_Receive_IT+0x248>)
 800acc8:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	2200      	movs	r2, #0
 800acce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	691b      	ldr	r3, [r3, #16]
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d01a      	beq.n	800ad10 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ace0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ace2:	e853 3f00 	ldrex	r3, [r3]
 800ace6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800ace8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800acea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800acee:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	461a      	mov	r2, r3
 800acf8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800acfc:	65fb      	str	r3, [r7, #92]	; 0x5c
 800acfe:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad00:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ad02:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ad04:	e841 2300 	strex	r3, r2, [r1]
 800ad08:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800ad0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d1e4      	bne.n	800acda <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	3308      	adds	r3, #8
 800ad16:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad1a:	e853 3f00 	ldrex	r3, [r3]
 800ad1e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ad20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ad26:	67fb      	str	r3, [r7, #124]	; 0x7c
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	3308      	adds	r3, #8
 800ad2e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800ad30:	64ba      	str	r2, [r7, #72]	; 0x48
 800ad32:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad34:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ad36:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ad38:	e841 2300 	strex	r3, r2, [r1]
 800ad3c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800ad3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d1e5      	bne.n	800ad10 <UART_Start_Receive_IT+0x168>
 800ad44:	e04a      	b.n	800addc <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	689b      	ldr	r3, [r3, #8]
 800ad4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ad4e:	d107      	bne.n	800ad60 <UART_Start_Receive_IT+0x1b8>
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	691b      	ldr	r3, [r3, #16]
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d103      	bne.n	800ad60 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	4a26      	ldr	r2, [pc, #152]	; (800adf4 <UART_Start_Receive_IT+0x24c>)
 800ad5c:	671a      	str	r2, [r3, #112]	; 0x70
 800ad5e:	e002      	b.n	800ad66 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	4a25      	ldr	r2, [pc, #148]	; (800adf8 <UART_Start_Receive_IT+0x250>)
 800ad64:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	2200      	movs	r2, #0
 800ad6a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	691b      	ldr	r3, [r3, #16]
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d019      	beq.n	800adaa <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad7e:	e853 3f00 	ldrex	r3, [r3]
 800ad82:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ad84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad86:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800ad8a:	677b      	str	r3, [r7, #116]	; 0x74
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	461a      	mov	r2, r3
 800ad92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ad94:	637b      	str	r3, [r7, #52]	; 0x34
 800ad96:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad98:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ad9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ad9c:	e841 2300 	strex	r3, r2, [r1]
 800ada0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ada2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d1e6      	bne.n	800ad76 <UART_Start_Receive_IT+0x1ce>
 800ada8:	e018      	b.n	800addc <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adb0:	697b      	ldr	r3, [r7, #20]
 800adb2:	e853 3f00 	ldrex	r3, [r3]
 800adb6:	613b      	str	r3, [r7, #16]
   return(result);
 800adb8:	693b      	ldr	r3, [r7, #16]
 800adba:	f043 0320 	orr.w	r3, r3, #32
 800adbe:	67bb      	str	r3, [r7, #120]	; 0x78
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	461a      	mov	r2, r3
 800adc6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800adc8:	623b      	str	r3, [r7, #32]
 800adca:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adcc:	69f9      	ldr	r1, [r7, #28]
 800adce:	6a3a      	ldr	r2, [r7, #32]
 800add0:	e841 2300 	strex	r3, r2, [r1]
 800add4:	61bb      	str	r3, [r7, #24]
   return(result);
 800add6:	69bb      	ldr	r3, [r7, #24]
 800add8:	2b00      	cmp	r3, #0
 800adda:	d1e6      	bne.n	800adaa <UART_Start_Receive_IT+0x202>
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800addc:	2300      	movs	r3, #0
}
 800adde:	4618      	mov	r0, r3
 800ade0:	378c      	adds	r7, #140	; 0x8c
 800ade2:	46bd      	mov	sp, r7
 800ade4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade8:	4770      	bx	lr
 800adea:	bf00      	nop
 800adec:	0800b511 	.word	0x0800b511
 800adf0:	0800b215 	.word	0x0800b215
 800adf4:	0800b0af 	.word	0x0800b0af
 800adf8:	0800af4b 	.word	0x0800af4b

0800adfc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800adfc:	b480      	push	{r7}
 800adfe:	b095      	sub	sp, #84	; 0x54
 800ae00:	af00      	add	r7, sp, #0
 800ae02:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae0c:	e853 3f00 	ldrex	r3, [r3]
 800ae10:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ae12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae14:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ae18:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	461a      	mov	r2, r3
 800ae20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ae22:	643b      	str	r3, [r7, #64]	; 0x40
 800ae24:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae26:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ae28:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ae2a:	e841 2300 	strex	r3, r2, [r1]
 800ae2e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ae30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d1e6      	bne.n	800ae04 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	3308      	adds	r3, #8
 800ae3c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae3e:	6a3b      	ldr	r3, [r7, #32]
 800ae40:	e853 3f00 	ldrex	r3, [r3]
 800ae44:	61fb      	str	r3, [r7, #28]
   return(result);
 800ae46:	69fb      	ldr	r3, [r7, #28]
 800ae48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ae4c:	f023 0301 	bic.w	r3, r3, #1
 800ae50:	64bb      	str	r3, [r7, #72]	; 0x48
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	3308      	adds	r3, #8
 800ae58:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ae5a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ae5c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae5e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ae60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ae62:	e841 2300 	strex	r3, r2, [r1]
 800ae66:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ae68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d1e3      	bne.n	800ae36 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ae72:	2b01      	cmp	r3, #1
 800ae74:	d118      	bne.n	800aea8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	e853 3f00 	ldrex	r3, [r3]
 800ae82:	60bb      	str	r3, [r7, #8]
   return(result);
 800ae84:	68bb      	ldr	r3, [r7, #8]
 800ae86:	f023 0310 	bic.w	r3, r3, #16
 800ae8a:	647b      	str	r3, [r7, #68]	; 0x44
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	461a      	mov	r2, r3
 800ae92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ae94:	61bb      	str	r3, [r7, #24]
 800ae96:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae98:	6979      	ldr	r1, [r7, #20]
 800ae9a:	69ba      	ldr	r2, [r7, #24]
 800ae9c:	e841 2300 	strex	r3, r2, [r1]
 800aea0:	613b      	str	r3, [r7, #16]
   return(result);
 800aea2:	693b      	ldr	r3, [r7, #16]
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d1e6      	bne.n	800ae76 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	2220      	movs	r2, #32
 800aeac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	2200      	movs	r2, #0
 800aeb4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	2200      	movs	r2, #0
 800aeba:	671a      	str	r2, [r3, #112]	; 0x70
}
 800aebc:	bf00      	nop
 800aebe:	3754      	adds	r7, #84	; 0x54
 800aec0:	46bd      	mov	sp, r7
 800aec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec6:	4770      	bx	lr

0800aec8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800aec8:	b580      	push	{r7, lr}
 800aeca:	b084      	sub	sp, #16
 800aecc:	af00      	add	r7, sp, #0
 800aece:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aed4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	2200      	movs	r2, #0
 800aeda:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	2200      	movs	r2, #0
 800aee2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800aee6:	68f8      	ldr	r0, [r7, #12]
 800aee8:	f7ff f996 	bl	800a218 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800aeec:	bf00      	nop
 800aeee:	3710      	adds	r7, #16
 800aef0:	46bd      	mov	sp, r7
 800aef2:	bd80      	pop	{r7, pc}

0800aef4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800aef4:	b580      	push	{r7, lr}
 800aef6:	b088      	sub	sp, #32
 800aef8:	af00      	add	r7, sp, #0
 800aefa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	e853 3f00 	ldrex	r3, [r3]
 800af08:	60bb      	str	r3, [r7, #8]
   return(result);
 800af0a:	68bb      	ldr	r3, [r7, #8]
 800af0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800af10:	61fb      	str	r3, [r7, #28]
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	461a      	mov	r2, r3
 800af18:	69fb      	ldr	r3, [r7, #28]
 800af1a:	61bb      	str	r3, [r7, #24]
 800af1c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af1e:	6979      	ldr	r1, [r7, #20]
 800af20:	69ba      	ldr	r2, [r7, #24]
 800af22:	e841 2300 	strex	r3, r2, [r1]
 800af26:	613b      	str	r3, [r7, #16]
   return(result);
 800af28:	693b      	ldr	r3, [r7, #16]
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d1e6      	bne.n	800aefc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	2220      	movs	r2, #32
 800af32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	2200      	movs	r2, #0
 800af3a:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800af3c:	6878      	ldr	r0, [r7, #4]
 800af3e:	f7ff f961 	bl	800a204 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800af42:	bf00      	nop
 800af44:	3720      	adds	r7, #32
 800af46:	46bd      	mov	sp, r7
 800af48:	bd80      	pop	{r7, pc}

0800af4a <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800af4a:	b580      	push	{r7, lr}
 800af4c:	b096      	sub	sp, #88	; 0x58
 800af4e:	af00      	add	r7, sp, #0
 800af50:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800af58:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af62:	2b22      	cmp	r3, #34	; 0x22
 800af64:	f040 8095 	bne.w	800b092 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800af6e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800af72:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800af76:	b2d9      	uxtb	r1, r3
 800af78:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800af7c:	b2da      	uxtb	r2, r3
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af82:	400a      	ands	r2, r1
 800af84:	b2d2      	uxtb	r2, r2
 800af86:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af8c:	1c5a      	adds	r2, r3, #1
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800af98:	b29b      	uxth	r3, r3
 800af9a:	3b01      	subs	r3, #1
 800af9c:	b29a      	uxth	r2, r3
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800afaa:	b29b      	uxth	r3, r3
 800afac:	2b00      	cmp	r3, #0
 800afae:	d17a      	bne.n	800b0a6 <UART_RxISR_8BIT+0x15c>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afb8:	e853 3f00 	ldrex	r3, [r3]
 800afbc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800afbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800afc0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800afc4:	653b      	str	r3, [r7, #80]	; 0x50
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	461a      	mov	r2, r3
 800afcc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800afce:	647b      	str	r3, [r7, #68]	; 0x44
 800afd0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afd2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800afd4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800afd6:	e841 2300 	strex	r3, r2, [r1]
 800afda:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800afdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d1e6      	bne.n	800afb0 <UART_RxISR_8BIT+0x66>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	3308      	adds	r3, #8
 800afe8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afec:	e853 3f00 	ldrex	r3, [r3]
 800aff0:	623b      	str	r3, [r7, #32]
   return(result);
 800aff2:	6a3b      	ldr	r3, [r7, #32]
 800aff4:	f023 0301 	bic.w	r3, r3, #1
 800aff8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	3308      	adds	r3, #8
 800b000:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b002:	633a      	str	r2, [r7, #48]	; 0x30
 800b004:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b006:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b008:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b00a:	e841 2300 	strex	r3, r2, [r1]
 800b00e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b012:	2b00      	cmp	r3, #0
 800b014:	d1e5      	bne.n	800afe2 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	2220      	movs	r2, #32
 800b01a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	2200      	movs	r2, #0
 800b022:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b028:	2b01      	cmp	r3, #1
 800b02a:	d12e      	bne.n	800b08a <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	2200      	movs	r2, #0
 800b030:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b038:	693b      	ldr	r3, [r7, #16]
 800b03a:	e853 3f00 	ldrex	r3, [r3]
 800b03e:	60fb      	str	r3, [r7, #12]
   return(result);
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	f023 0310 	bic.w	r3, r3, #16
 800b046:	64bb      	str	r3, [r7, #72]	; 0x48
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	461a      	mov	r2, r3
 800b04e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b050:	61fb      	str	r3, [r7, #28]
 800b052:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b054:	69b9      	ldr	r1, [r7, #24]
 800b056:	69fa      	ldr	r2, [r7, #28]
 800b058:	e841 2300 	strex	r3, r2, [r1]
 800b05c:	617b      	str	r3, [r7, #20]
   return(result);
 800b05e:	697b      	ldr	r3, [r7, #20]
 800b060:	2b00      	cmp	r3, #0
 800b062:	d1e6      	bne.n	800b032 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	69db      	ldr	r3, [r3, #28]
 800b06a:	f003 0310 	and.w	r3, r3, #16
 800b06e:	2b10      	cmp	r3, #16
 800b070:	d103      	bne.n	800b07a <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	2210      	movs	r2, #16
 800b078:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b080:	4619      	mov	r1, r3
 800b082:	6878      	ldr	r0, [r7, #4]
 800b084:	f7ff f8d2 	bl	800a22c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b088:	e00d      	b.n	800b0a6 <UART_RxISR_8BIT+0x15c>
        HAL_UART_RxCpltCallback(huart);
 800b08a:	6878      	ldr	r0, [r7, #4]
 800b08c:	f7fa ff12 	bl	8005eb4 <HAL_UART_RxCpltCallback>
}
 800b090:	e009      	b.n	800b0a6 <UART_RxISR_8BIT+0x15c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	8b1b      	ldrh	r3, [r3, #24]
 800b098:	b29a      	uxth	r2, r3
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	f042 0208 	orr.w	r2, r2, #8
 800b0a2:	b292      	uxth	r2, r2
 800b0a4:	831a      	strh	r2, [r3, #24]
}
 800b0a6:	bf00      	nop
 800b0a8:	3758      	adds	r7, #88	; 0x58
 800b0aa:	46bd      	mov	sp, r7
 800b0ac:	bd80      	pop	{r7, pc}

0800b0ae <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800b0ae:	b580      	push	{r7, lr}
 800b0b0:	b096      	sub	sp, #88	; 0x58
 800b0b2:	af00      	add	r7, sp, #0
 800b0b4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b0bc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b0c6:	2b22      	cmp	r3, #34	; 0x22
 800b0c8:	f040 8095 	bne.w	800b1f6 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800b0d2:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b0da:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800b0dc:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800b0e0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800b0e4:	4013      	ands	r3, r2
 800b0e6:	b29a      	uxth	r2, r3
 800b0e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b0ea:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b0f0:	1c9a      	adds	r2, r3, #2
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b0fc:	b29b      	uxth	r3, r3
 800b0fe:	3b01      	subs	r3, #1
 800b100:	b29a      	uxth	r2, r3
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b10e:	b29b      	uxth	r3, r3
 800b110:	2b00      	cmp	r3, #0
 800b112:	d17a      	bne.n	800b20a <UART_RxISR_16BIT+0x15c>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b11a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b11c:	e853 3f00 	ldrex	r3, [r3]
 800b120:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b124:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b128:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	461a      	mov	r2, r3
 800b130:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b132:	643b      	str	r3, [r7, #64]	; 0x40
 800b134:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b136:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b138:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b13a:	e841 2300 	strex	r3, r2, [r1]
 800b13e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b142:	2b00      	cmp	r3, #0
 800b144:	d1e6      	bne.n	800b114 <UART_RxISR_16BIT+0x66>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	3308      	adds	r3, #8
 800b14c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b14e:	6a3b      	ldr	r3, [r7, #32]
 800b150:	e853 3f00 	ldrex	r3, [r3]
 800b154:	61fb      	str	r3, [r7, #28]
   return(result);
 800b156:	69fb      	ldr	r3, [r7, #28]
 800b158:	f023 0301 	bic.w	r3, r3, #1
 800b15c:	64bb      	str	r3, [r7, #72]	; 0x48
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	3308      	adds	r3, #8
 800b164:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b166:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b168:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b16a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b16c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b16e:	e841 2300 	strex	r3, r2, [r1]
 800b172:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b176:	2b00      	cmp	r3, #0
 800b178:	d1e5      	bne.n	800b146 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	2220      	movs	r2, #32
 800b17e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	2200      	movs	r2, #0
 800b186:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b18c:	2b01      	cmp	r3, #1
 800b18e:	d12e      	bne.n	800b1ee <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	2200      	movs	r2, #0
 800b194:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	e853 3f00 	ldrex	r3, [r3]
 800b1a2:	60bb      	str	r3, [r7, #8]
   return(result);
 800b1a4:	68bb      	ldr	r3, [r7, #8]
 800b1a6:	f023 0310 	bic.w	r3, r3, #16
 800b1aa:	647b      	str	r3, [r7, #68]	; 0x44
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	461a      	mov	r2, r3
 800b1b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b1b4:	61bb      	str	r3, [r7, #24]
 800b1b6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1b8:	6979      	ldr	r1, [r7, #20]
 800b1ba:	69ba      	ldr	r2, [r7, #24]
 800b1bc:	e841 2300 	strex	r3, r2, [r1]
 800b1c0:	613b      	str	r3, [r7, #16]
   return(result);
 800b1c2:	693b      	ldr	r3, [r7, #16]
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d1e6      	bne.n	800b196 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	69db      	ldr	r3, [r3, #28]
 800b1ce:	f003 0310 	and.w	r3, r3, #16
 800b1d2:	2b10      	cmp	r3, #16
 800b1d4:	d103      	bne.n	800b1de <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	2210      	movs	r2, #16
 800b1dc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b1e4:	4619      	mov	r1, r3
 800b1e6:	6878      	ldr	r0, [r7, #4]
 800b1e8:	f7ff f820 	bl	800a22c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b1ec:	e00d      	b.n	800b20a <UART_RxISR_16BIT+0x15c>
        HAL_UART_RxCpltCallback(huart);
 800b1ee:	6878      	ldr	r0, [r7, #4]
 800b1f0:	f7fa fe60 	bl	8005eb4 <HAL_UART_RxCpltCallback>
}
 800b1f4:	e009      	b.n	800b20a <UART_RxISR_16BIT+0x15c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	8b1b      	ldrh	r3, [r3, #24]
 800b1fc:	b29a      	uxth	r2, r3
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	f042 0208 	orr.w	r2, r2, #8
 800b206:	b292      	uxth	r2, r2
 800b208:	831a      	strh	r2, [r3, #24]
}
 800b20a:	bf00      	nop
 800b20c:	3758      	adds	r7, #88	; 0x58
 800b20e:	46bd      	mov	sp, r7
 800b210:	bd80      	pop	{r7, pc}
	...

0800b214 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800b214:	b580      	push	{r7, lr}
 800b216:	b0a6      	sub	sp, #152	; 0x98
 800b218:	af00      	add	r7, sp, #0
 800b21a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b222:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	69db      	ldr	r3, [r3, #28]
 800b22c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	689b      	ldr	r3, [r3, #8]
 800b240:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b24a:	2b22      	cmp	r3, #34	; 0x22
 800b24c:	f040 814f 	bne.w	800b4ee <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b256:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b25a:	e0f6      	b.n	800b44a <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800b262:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800b266:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800b26a:	b2d9      	uxtb	r1, r3
 800b26c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800b270:	b2da      	uxtb	r2, r3
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b276:	400a      	ands	r2, r1
 800b278:	b2d2      	uxtb	r2, r2
 800b27a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b280:	1c5a      	adds	r2, r3, #1
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b28c:	b29b      	uxth	r3, r3
 800b28e:	3b01      	subs	r3, #1
 800b290:	b29a      	uxth	r2, r3
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	69db      	ldr	r3, [r3, #28]
 800b29e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800b2a2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b2a6:	f003 0307 	and.w	r3, r3, #7
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d053      	beq.n	800b356 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b2ae:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b2b2:	f003 0301 	and.w	r3, r3, #1
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d011      	beq.n	800b2de <UART_RxISR_8BIT_FIFOEN+0xca>
 800b2ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b2be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d00b      	beq.n	800b2de <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	2201      	movs	r2, #1
 800b2cc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b2d4:	f043 0201 	orr.w	r2, r3, #1
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b2de:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b2e2:	f003 0302 	and.w	r3, r3, #2
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d011      	beq.n	800b30e <UART_RxISR_8BIT_FIFOEN+0xfa>
 800b2ea:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b2ee:	f003 0301 	and.w	r3, r3, #1
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d00b      	beq.n	800b30e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	2202      	movs	r2, #2
 800b2fc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b304:	f043 0204 	orr.w	r2, r3, #4
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b30e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b312:	f003 0304 	and.w	r3, r3, #4
 800b316:	2b00      	cmp	r3, #0
 800b318:	d011      	beq.n	800b33e <UART_RxISR_8BIT_FIFOEN+0x12a>
 800b31a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b31e:	f003 0301 	and.w	r3, r3, #1
 800b322:	2b00      	cmp	r3, #0
 800b324:	d00b      	beq.n	800b33e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	2204      	movs	r2, #4
 800b32c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b334:	f043 0202 	orr.w	r2, r3, #2
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b344:	2b00      	cmp	r3, #0
 800b346:	d006      	beq.n	800b356 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b348:	6878      	ldr	r0, [r7, #4]
 800b34a:	f7fe ff65 	bl	800a218 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	2200      	movs	r2, #0
 800b352:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b35c:	b29b      	uxth	r3, r3
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d173      	bne.n	800b44a <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b368:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b36a:	e853 3f00 	ldrex	r3, [r3]
 800b36e:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800b370:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b372:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b376:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	461a      	mov	r2, r3
 800b380:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b384:	66bb      	str	r3, [r7, #104]	; 0x68
 800b386:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b388:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800b38a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b38c:	e841 2300 	strex	r3, r2, [r1]
 800b390:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800b392:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b394:	2b00      	cmp	r3, #0
 800b396:	d1e4      	bne.n	800b362 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	3308      	adds	r3, #8
 800b39e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b3a2:	e853 3f00 	ldrex	r3, [r3]
 800b3a6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800b3a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b3aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b3ae:	f023 0301 	bic.w	r3, r3, #1
 800b3b2:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	3308      	adds	r3, #8
 800b3ba:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800b3bc:	657a      	str	r2, [r7, #84]	; 0x54
 800b3be:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3c0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b3c2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b3c4:	e841 2300 	strex	r3, r2, [r1]
 800b3c8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b3ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d1e3      	bne.n	800b398 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	2220      	movs	r2, #32
 800b3d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	2200      	movs	r2, #0
 800b3dc:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b3e2:	2b01      	cmp	r3, #1
 800b3e4:	d12e      	bne.n	800b444 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	2200      	movs	r2, #0
 800b3ea:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3f4:	e853 3f00 	ldrex	r3, [r3]
 800b3f8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b3fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3fc:	f023 0310 	bic.w	r3, r3, #16
 800b400:	67bb      	str	r3, [r7, #120]	; 0x78
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	461a      	mov	r2, r3
 800b408:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b40a:	643b      	str	r3, [r7, #64]	; 0x40
 800b40c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b40e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b410:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b412:	e841 2300 	strex	r3, r2, [r1]
 800b416:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d1e6      	bne.n	800b3ec <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	69db      	ldr	r3, [r3, #28]
 800b424:	f003 0310 	and.w	r3, r3, #16
 800b428:	2b10      	cmp	r3, #16
 800b42a:	d103      	bne.n	800b434 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	2210      	movs	r2, #16
 800b432:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b43a:	4619      	mov	r1, r3
 800b43c:	6878      	ldr	r0, [r7, #4]
 800b43e:	f7fe fef5 	bl	800a22c <HAL_UARTEx_RxEventCallback>
 800b442:	e002      	b.n	800b44a <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800b444:	6878      	ldr	r0, [r7, #4]
 800b446:	f7fa fd35 	bl	8005eb4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b44a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d006      	beq.n	800b460 <UART_RxISR_8BIT_FIFOEN+0x24c>
 800b452:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b456:	f003 0320 	and.w	r3, r3, #32
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	f47f aefe 	bne.w	800b25c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b466:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800b46a:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d047      	beq.n	800b502 <UART_RxISR_8BIT_FIFOEN+0x2ee>
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b478:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800b47c:	429a      	cmp	r2, r3
 800b47e:	d240      	bcs.n	800b502 <UART_RxISR_8BIT_FIFOEN+0x2ee>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	3308      	adds	r3, #8
 800b486:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b488:	6a3b      	ldr	r3, [r7, #32]
 800b48a:	e853 3f00 	ldrex	r3, [r3]
 800b48e:	61fb      	str	r3, [r7, #28]
   return(result);
 800b490:	69fb      	ldr	r3, [r7, #28]
 800b492:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b496:	673b      	str	r3, [r7, #112]	; 0x70
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	3308      	adds	r3, #8
 800b49e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800b4a0:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b4a2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b4a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b4a8:	e841 2300 	strex	r3, r2, [r1]
 800b4ac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b4ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d1e5      	bne.n	800b480 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	4a15      	ldr	r2, [pc, #84]	; (800b50c <UART_RxISR_8BIT_FIFOEN+0x2f8>)
 800b4b8:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	e853 3f00 	ldrex	r3, [r3]
 800b4c6:	60bb      	str	r3, [r7, #8]
   return(result);
 800b4c8:	68bb      	ldr	r3, [r7, #8]
 800b4ca:	f043 0320 	orr.w	r3, r3, #32
 800b4ce:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	461a      	mov	r2, r3
 800b4d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b4d8:	61bb      	str	r3, [r7, #24]
 800b4da:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4dc:	6979      	ldr	r1, [r7, #20]
 800b4de:	69ba      	ldr	r2, [r7, #24]
 800b4e0:	e841 2300 	strex	r3, r2, [r1]
 800b4e4:	613b      	str	r3, [r7, #16]
   return(result);
 800b4e6:	693b      	ldr	r3, [r7, #16]
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d1e6      	bne.n	800b4ba <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b4ec:	e009      	b.n	800b502 <UART_RxISR_8BIT_FIFOEN+0x2ee>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	8b1b      	ldrh	r3, [r3, #24]
 800b4f4:	b29a      	uxth	r2, r3
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	f042 0208 	orr.w	r2, r2, #8
 800b4fe:	b292      	uxth	r2, r2
 800b500:	831a      	strh	r2, [r3, #24]
}
 800b502:	bf00      	nop
 800b504:	3798      	adds	r7, #152	; 0x98
 800b506:	46bd      	mov	sp, r7
 800b508:	bd80      	pop	{r7, pc}
 800b50a:	bf00      	nop
 800b50c:	0800af4b 	.word	0x0800af4b

0800b510 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800b510:	b580      	push	{r7, lr}
 800b512:	b0a8      	sub	sp, #160	; 0xa0
 800b514:	af00      	add	r7, sp, #0
 800b516:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b51e:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	69db      	ldr	r3, [r3, #28]
 800b528:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	689b      	ldr	r3, [r3, #8]
 800b53c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b546:	2b22      	cmp	r3, #34	; 0x22
 800b548:	f040 8153 	bne.w	800b7f2 <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b552:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b556:	e0fa      	b.n	800b74e <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800b55e:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b566:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 800b56a:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 800b56e:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800b572:	4013      	ands	r3, r2
 800b574:	b29a      	uxth	r2, r3
 800b576:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b57a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b580:	1c9a      	adds	r2, r3, #2
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b58c:	b29b      	uxth	r3, r3
 800b58e:	3b01      	subs	r3, #1
 800b590:	b29a      	uxth	r2, r3
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	69db      	ldr	r3, [r3, #28]
 800b59e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800b5a2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b5a6:	f003 0307 	and.w	r3, r3, #7
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d053      	beq.n	800b656 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b5ae:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b5b2:	f003 0301 	and.w	r3, r3, #1
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d011      	beq.n	800b5de <UART_RxISR_16BIT_FIFOEN+0xce>
 800b5ba:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b5be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d00b      	beq.n	800b5de <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	2201      	movs	r2, #1
 800b5cc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b5d4:	f043 0201 	orr.w	r2, r3, #1
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b5de:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b5e2:	f003 0302 	and.w	r3, r3, #2
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d011      	beq.n	800b60e <UART_RxISR_16BIT_FIFOEN+0xfe>
 800b5ea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b5ee:	f003 0301 	and.w	r3, r3, #1
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d00b      	beq.n	800b60e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	2202      	movs	r2, #2
 800b5fc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b604:	f043 0204 	orr.w	r2, r3, #4
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b60e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b612:	f003 0304 	and.w	r3, r3, #4
 800b616:	2b00      	cmp	r3, #0
 800b618:	d011      	beq.n	800b63e <UART_RxISR_16BIT_FIFOEN+0x12e>
 800b61a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b61e:	f003 0301 	and.w	r3, r3, #1
 800b622:	2b00      	cmp	r3, #0
 800b624:	d00b      	beq.n	800b63e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	2204      	movs	r2, #4
 800b62c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b634:	f043 0202 	orr.w	r2, r3, #2
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b644:	2b00      	cmp	r3, #0
 800b646:	d006      	beq.n	800b656 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b648:	6878      	ldr	r0, [r7, #4]
 800b64a:	f7fe fde5 	bl	800a218 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	2200      	movs	r2, #0
 800b652:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b65c:	b29b      	uxth	r3, r3
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d175      	bne.n	800b74e <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b668:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b66a:	e853 3f00 	ldrex	r3, [r3]
 800b66e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b670:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b672:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b676:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	461a      	mov	r2, r3
 800b680:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b684:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b686:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b688:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b68a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b68c:	e841 2300 	strex	r3, r2, [r1]
 800b690:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b692:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b694:	2b00      	cmp	r3, #0
 800b696:	d1e4      	bne.n	800b662 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	3308      	adds	r3, #8
 800b69e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b6a2:	e853 3f00 	ldrex	r3, [r3]
 800b6a6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b6a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b6aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b6ae:	f023 0301 	bic.w	r3, r3, #1
 800b6b2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	3308      	adds	r3, #8
 800b6bc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b6c0:	65ba      	str	r2, [r7, #88]	; 0x58
 800b6c2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6c4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b6c6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b6c8:	e841 2300 	strex	r3, r2, [r1]
 800b6cc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b6ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d1e1      	bne.n	800b698 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	2220      	movs	r2, #32
 800b6d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	2200      	movs	r2, #0
 800b6e0:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b6e6:	2b01      	cmp	r3, #1
 800b6e8:	d12e      	bne.n	800b748 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	2200      	movs	r2, #0
 800b6ee:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6f8:	e853 3f00 	ldrex	r3, [r3]
 800b6fc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b6fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b700:	f023 0310 	bic.w	r3, r3, #16
 800b704:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	461a      	mov	r2, r3
 800b70c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b70e:	647b      	str	r3, [r7, #68]	; 0x44
 800b710:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b712:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b714:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b716:	e841 2300 	strex	r3, r2, [r1]
 800b71a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b71c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d1e6      	bne.n	800b6f0 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	69db      	ldr	r3, [r3, #28]
 800b728:	f003 0310 	and.w	r3, r3, #16
 800b72c:	2b10      	cmp	r3, #16
 800b72e:	d103      	bne.n	800b738 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	2210      	movs	r2, #16
 800b736:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b73e:	4619      	mov	r1, r3
 800b740:	6878      	ldr	r0, [r7, #4]
 800b742:	f7fe fd73 	bl	800a22c <HAL_UARTEx_RxEventCallback>
 800b746:	e002      	b.n	800b74e <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800b748:	6878      	ldr	r0, [r7, #4]
 800b74a:	f7fa fbb3 	bl	8005eb4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b74e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800b752:	2b00      	cmp	r3, #0
 800b754:	d006      	beq.n	800b764 <UART_RxISR_16BIT_FIFOEN+0x254>
 800b756:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b75a:	f003 0320 	and.w	r3, r3, #32
 800b75e:	2b00      	cmp	r3, #0
 800b760:	f47f aefa 	bne.w	800b558 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b76a:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800b76e:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800b772:	2b00      	cmp	r3, #0
 800b774:	d047      	beq.n	800b806 <UART_RxISR_16BIT_FIFOEN+0x2f6>
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b77c:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 800b780:	429a      	cmp	r2, r3
 800b782:	d240      	bcs.n	800b806 <UART_RxISR_16BIT_FIFOEN+0x2f6>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	3308      	adds	r3, #8
 800b78a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b78c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b78e:	e853 3f00 	ldrex	r3, [r3]
 800b792:	623b      	str	r3, [r7, #32]
   return(result);
 800b794:	6a3b      	ldr	r3, [r7, #32]
 800b796:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b79a:	677b      	str	r3, [r7, #116]	; 0x74
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	3308      	adds	r3, #8
 800b7a2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800b7a4:	633a      	str	r2, [r7, #48]	; 0x30
 800b7a6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7a8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b7aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b7ac:	e841 2300 	strex	r3, r2, [r1]
 800b7b0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b7b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d1e5      	bne.n	800b784 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	4a15      	ldr	r2, [pc, #84]	; (800b810 <UART_RxISR_16BIT_FIFOEN+0x300>)
 800b7bc:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7c4:	693b      	ldr	r3, [r7, #16]
 800b7c6:	e853 3f00 	ldrex	r3, [r3]
 800b7ca:	60fb      	str	r3, [r7, #12]
   return(result);
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	f043 0320 	orr.w	r3, r3, #32
 800b7d2:	673b      	str	r3, [r7, #112]	; 0x70
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	461a      	mov	r2, r3
 800b7da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b7dc:	61fb      	str	r3, [r7, #28]
 800b7de:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7e0:	69b9      	ldr	r1, [r7, #24]
 800b7e2:	69fa      	ldr	r2, [r7, #28]
 800b7e4:	e841 2300 	strex	r3, r2, [r1]
 800b7e8:	617b      	str	r3, [r7, #20]
   return(result);
 800b7ea:	697b      	ldr	r3, [r7, #20]
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d1e6      	bne.n	800b7be <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b7f0:	e009      	b.n	800b806 <UART_RxISR_16BIT_FIFOEN+0x2f6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	8b1b      	ldrh	r3, [r3, #24]
 800b7f8:	b29a      	uxth	r2, r3
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	f042 0208 	orr.w	r2, r2, #8
 800b802:	b292      	uxth	r2, r2
 800b804:	831a      	strh	r2, [r3, #24]
}
 800b806:	bf00      	nop
 800b808:	37a0      	adds	r7, #160	; 0xa0
 800b80a:	46bd      	mov	sp, r7
 800b80c:	bd80      	pop	{r7, pc}
 800b80e:	bf00      	nop
 800b810:	0800b0af 	.word	0x0800b0af

0800b814 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b814:	b480      	push	{r7}
 800b816:	b083      	sub	sp, #12
 800b818:	af00      	add	r7, sp, #0
 800b81a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b81c:	bf00      	nop
 800b81e:	370c      	adds	r7, #12
 800b820:	46bd      	mov	sp, r7
 800b822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b826:	4770      	bx	lr

0800b828 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b828:	b480      	push	{r7}
 800b82a:	b083      	sub	sp, #12
 800b82c:	af00      	add	r7, sp, #0
 800b82e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b830:	bf00      	nop
 800b832:	370c      	adds	r7, #12
 800b834:	46bd      	mov	sp, r7
 800b836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b83a:	4770      	bx	lr

0800b83c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b83c:	b480      	push	{r7}
 800b83e:	b083      	sub	sp, #12
 800b840:	af00      	add	r7, sp, #0
 800b842:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b844:	bf00      	nop
 800b846:	370c      	adds	r7, #12
 800b848:	46bd      	mov	sp, r7
 800b84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b84e:	4770      	bx	lr

0800b850 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b850:	b480      	push	{r7}
 800b852:	b085      	sub	sp, #20
 800b854:	af00      	add	r7, sp, #0
 800b856:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b85e:	2b01      	cmp	r3, #1
 800b860:	d101      	bne.n	800b866 <HAL_UARTEx_DisableFifoMode+0x16>
 800b862:	2302      	movs	r3, #2
 800b864:	e027      	b.n	800b8b6 <HAL_UARTEx_DisableFifoMode+0x66>
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	2201      	movs	r2, #1
 800b86a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	2224      	movs	r2, #36	; 0x24
 800b872:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	681a      	ldr	r2, [r3, #0]
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	f022 0201 	bic.w	r2, r2, #1
 800b88c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800b894:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	2200      	movs	r2, #0
 800b89a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	68fa      	ldr	r2, [r7, #12]
 800b8a2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	2220      	movs	r2, #32
 800b8a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	2200      	movs	r2, #0
 800b8b0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b8b4:	2300      	movs	r3, #0
}
 800b8b6:	4618      	mov	r0, r3
 800b8b8:	3714      	adds	r7, #20
 800b8ba:	46bd      	mov	sp, r7
 800b8bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c0:	4770      	bx	lr

0800b8c2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b8c2:	b580      	push	{r7, lr}
 800b8c4:	b084      	sub	sp, #16
 800b8c6:	af00      	add	r7, sp, #0
 800b8c8:	6078      	str	r0, [r7, #4]
 800b8ca:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b8d2:	2b01      	cmp	r3, #1
 800b8d4:	d101      	bne.n	800b8da <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b8d6:	2302      	movs	r3, #2
 800b8d8:	e02d      	b.n	800b936 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	2201      	movs	r2, #1
 800b8de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	2224      	movs	r2, #36	; 0x24
 800b8e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	681a      	ldr	r2, [r3, #0]
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	f022 0201 	bic.w	r2, r2, #1
 800b900:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	689b      	ldr	r3, [r3, #8]
 800b908:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	683a      	ldr	r2, [r7, #0]
 800b912:	430a      	orrs	r2, r1
 800b914:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b916:	6878      	ldr	r0, [r7, #4]
 800b918:	f000 f850 	bl	800b9bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	68fa      	ldr	r2, [r7, #12]
 800b922:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	2220      	movs	r2, #32
 800b928:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	2200      	movs	r2, #0
 800b930:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b934:	2300      	movs	r3, #0
}
 800b936:	4618      	mov	r0, r3
 800b938:	3710      	adds	r7, #16
 800b93a:	46bd      	mov	sp, r7
 800b93c:	bd80      	pop	{r7, pc}

0800b93e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b93e:	b580      	push	{r7, lr}
 800b940:	b084      	sub	sp, #16
 800b942:	af00      	add	r7, sp, #0
 800b944:	6078      	str	r0, [r7, #4]
 800b946:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b94e:	2b01      	cmp	r3, #1
 800b950:	d101      	bne.n	800b956 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b952:	2302      	movs	r3, #2
 800b954:	e02d      	b.n	800b9b2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	2201      	movs	r2, #1
 800b95a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	2224      	movs	r2, #36	; 0x24
 800b962:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	681a      	ldr	r2, [r3, #0]
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	f022 0201 	bic.w	r2, r2, #1
 800b97c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	689b      	ldr	r3, [r3, #8]
 800b984:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	683a      	ldr	r2, [r7, #0]
 800b98e:	430a      	orrs	r2, r1
 800b990:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b992:	6878      	ldr	r0, [r7, #4]
 800b994:	f000 f812 	bl	800b9bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	68fa      	ldr	r2, [r7, #12]
 800b99e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	2220      	movs	r2, #32
 800b9a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	2200      	movs	r2, #0
 800b9ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b9b0:	2300      	movs	r3, #0
}
 800b9b2:	4618      	mov	r0, r3
 800b9b4:	3710      	adds	r7, #16
 800b9b6:	46bd      	mov	sp, r7
 800b9b8:	bd80      	pop	{r7, pc}
	...

0800b9bc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b9bc:	b480      	push	{r7}
 800b9be:	b085      	sub	sp, #20
 800b9c0:	af00      	add	r7, sp, #0
 800b9c2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d108      	bne.n	800b9de <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	2201      	movs	r2, #1
 800b9d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	2201      	movs	r2, #1
 800b9d8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b9dc:	e031      	b.n	800ba42 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b9de:	2308      	movs	r3, #8
 800b9e0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b9e2:	2308      	movs	r3, #8
 800b9e4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	689b      	ldr	r3, [r3, #8]
 800b9ec:	0e5b      	lsrs	r3, r3, #25
 800b9ee:	b2db      	uxtb	r3, r3
 800b9f0:	f003 0307 	and.w	r3, r3, #7
 800b9f4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	689b      	ldr	r3, [r3, #8]
 800b9fc:	0f5b      	lsrs	r3, r3, #29
 800b9fe:	b2db      	uxtb	r3, r3
 800ba00:	f003 0307 	and.w	r3, r3, #7
 800ba04:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ba06:	7bbb      	ldrb	r3, [r7, #14]
 800ba08:	7b3a      	ldrb	r2, [r7, #12]
 800ba0a:	4911      	ldr	r1, [pc, #68]	; (800ba50 <UARTEx_SetNbDataToProcess+0x94>)
 800ba0c:	5c8a      	ldrb	r2, [r1, r2]
 800ba0e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ba12:	7b3a      	ldrb	r2, [r7, #12]
 800ba14:	490f      	ldr	r1, [pc, #60]	; (800ba54 <UARTEx_SetNbDataToProcess+0x98>)
 800ba16:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ba18:	fb93 f3f2 	sdiv	r3, r3, r2
 800ba1c:	b29a      	uxth	r2, r3
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ba24:	7bfb      	ldrb	r3, [r7, #15]
 800ba26:	7b7a      	ldrb	r2, [r7, #13]
 800ba28:	4909      	ldr	r1, [pc, #36]	; (800ba50 <UARTEx_SetNbDataToProcess+0x94>)
 800ba2a:	5c8a      	ldrb	r2, [r1, r2]
 800ba2c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ba30:	7b7a      	ldrb	r2, [r7, #13]
 800ba32:	4908      	ldr	r1, [pc, #32]	; (800ba54 <UARTEx_SetNbDataToProcess+0x98>)
 800ba34:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ba36:	fb93 f3f2 	sdiv	r3, r3, r2
 800ba3a:	b29a      	uxth	r2, r3
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800ba42:	bf00      	nop
 800ba44:	3714      	adds	r7, #20
 800ba46:	46bd      	mov	sp, r7
 800ba48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba4c:	4770      	bx	lr
 800ba4e:	bf00      	nop
 800ba50:	08014468 	.word	0x08014468
 800ba54:	08014470 	.word	0x08014470

0800ba58 <__NVIC_SetPriority>:
{
 800ba58:	b480      	push	{r7}
 800ba5a:	b083      	sub	sp, #12
 800ba5c:	af00      	add	r7, sp, #0
 800ba5e:	4603      	mov	r3, r0
 800ba60:	6039      	str	r1, [r7, #0]
 800ba62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ba64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	db0a      	blt.n	800ba82 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ba6c:	683b      	ldr	r3, [r7, #0]
 800ba6e:	b2da      	uxtb	r2, r3
 800ba70:	490c      	ldr	r1, [pc, #48]	; (800baa4 <__NVIC_SetPriority+0x4c>)
 800ba72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ba76:	0112      	lsls	r2, r2, #4
 800ba78:	b2d2      	uxtb	r2, r2
 800ba7a:	440b      	add	r3, r1
 800ba7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800ba80:	e00a      	b.n	800ba98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ba82:	683b      	ldr	r3, [r7, #0]
 800ba84:	b2da      	uxtb	r2, r3
 800ba86:	4908      	ldr	r1, [pc, #32]	; (800baa8 <__NVIC_SetPriority+0x50>)
 800ba88:	79fb      	ldrb	r3, [r7, #7]
 800ba8a:	f003 030f 	and.w	r3, r3, #15
 800ba8e:	3b04      	subs	r3, #4
 800ba90:	0112      	lsls	r2, r2, #4
 800ba92:	b2d2      	uxtb	r2, r2
 800ba94:	440b      	add	r3, r1
 800ba96:	761a      	strb	r2, [r3, #24]
}
 800ba98:	bf00      	nop
 800ba9a:	370c      	adds	r7, #12
 800ba9c:	46bd      	mov	sp, r7
 800ba9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baa2:	4770      	bx	lr
 800baa4:	e000e100 	.word	0xe000e100
 800baa8:	e000ed00 	.word	0xe000ed00

0800baac <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800baac:	b580      	push	{r7, lr}
 800baae:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800bab0:	4b05      	ldr	r3, [pc, #20]	; (800bac8 <SysTick_Handler+0x1c>)
 800bab2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800bab4:	f002 fe9e 	bl	800e7f4 <xTaskGetSchedulerState>
 800bab8:	4603      	mov	r3, r0
 800baba:	2b01      	cmp	r3, #1
 800babc:	d001      	beq.n	800bac2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800babe:	f003 fdbb 	bl	800f638 <xPortSysTickHandler>
  }
}
 800bac2:	bf00      	nop
 800bac4:	bd80      	pop	{r7, pc}
 800bac6:	bf00      	nop
 800bac8:	e000e010 	.word	0xe000e010

0800bacc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800bacc:	b580      	push	{r7, lr}
 800bace:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800bad0:	2100      	movs	r1, #0
 800bad2:	f06f 0004 	mvn.w	r0, #4
 800bad6:	f7ff ffbf 	bl	800ba58 <__NVIC_SetPriority>
#endif
}
 800bada:	bf00      	nop
 800badc:	bd80      	pop	{r7, pc}
	...

0800bae0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800bae0:	b480      	push	{r7}
 800bae2:	b083      	sub	sp, #12
 800bae4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bae6:	f3ef 8305 	mrs	r3, IPSR
 800baea:	603b      	str	r3, [r7, #0]
  return(result);
 800baec:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d003      	beq.n	800bafa <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800baf2:	f06f 0305 	mvn.w	r3, #5
 800baf6:	607b      	str	r3, [r7, #4]
 800baf8:	e00c      	b.n	800bb14 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800bafa:	4b0a      	ldr	r3, [pc, #40]	; (800bb24 <osKernelInitialize+0x44>)
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d105      	bne.n	800bb0e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800bb02:	4b08      	ldr	r3, [pc, #32]	; (800bb24 <osKernelInitialize+0x44>)
 800bb04:	2201      	movs	r2, #1
 800bb06:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800bb08:	2300      	movs	r3, #0
 800bb0a:	607b      	str	r3, [r7, #4]
 800bb0c:	e002      	b.n	800bb14 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800bb0e:	f04f 33ff 	mov.w	r3, #4294967295
 800bb12:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800bb14:	687b      	ldr	r3, [r7, #4]
}
 800bb16:	4618      	mov	r0, r3
 800bb18:	370c      	adds	r7, #12
 800bb1a:	46bd      	mov	sp, r7
 800bb1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb20:	4770      	bx	lr
 800bb22:	bf00      	nop
 800bb24:	20000604 	.word	0x20000604

0800bb28 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800bb28:	b580      	push	{r7, lr}
 800bb2a:	b082      	sub	sp, #8
 800bb2c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bb2e:	f3ef 8305 	mrs	r3, IPSR
 800bb32:	603b      	str	r3, [r7, #0]
  return(result);
 800bb34:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d003      	beq.n	800bb42 <osKernelStart+0x1a>
    stat = osErrorISR;
 800bb3a:	f06f 0305 	mvn.w	r3, #5
 800bb3e:	607b      	str	r3, [r7, #4]
 800bb40:	e010      	b.n	800bb64 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800bb42:	4b0b      	ldr	r3, [pc, #44]	; (800bb70 <osKernelStart+0x48>)
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	2b01      	cmp	r3, #1
 800bb48:	d109      	bne.n	800bb5e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800bb4a:	f7ff ffbf 	bl	800bacc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800bb4e:	4b08      	ldr	r3, [pc, #32]	; (800bb70 <osKernelStart+0x48>)
 800bb50:	2202      	movs	r2, #2
 800bb52:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800bb54:	f002 f958 	bl	800de08 <vTaskStartScheduler>
      stat = osOK;
 800bb58:	2300      	movs	r3, #0
 800bb5a:	607b      	str	r3, [r7, #4]
 800bb5c:	e002      	b.n	800bb64 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800bb5e:	f04f 33ff 	mov.w	r3, #4294967295
 800bb62:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800bb64:	687b      	ldr	r3, [r7, #4]
}
 800bb66:	4618      	mov	r0, r3
 800bb68:	3708      	adds	r7, #8
 800bb6a:	46bd      	mov	sp, r7
 800bb6c:	bd80      	pop	{r7, pc}
 800bb6e:	bf00      	nop
 800bb70:	20000604 	.word	0x20000604

0800bb74 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800bb74:	b580      	push	{r7, lr}
 800bb76:	b08e      	sub	sp, #56	; 0x38
 800bb78:	af04      	add	r7, sp, #16
 800bb7a:	60f8      	str	r0, [r7, #12]
 800bb7c:	60b9      	str	r1, [r7, #8]
 800bb7e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800bb80:	2300      	movs	r3, #0
 800bb82:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bb84:	f3ef 8305 	mrs	r3, IPSR
 800bb88:	617b      	str	r3, [r7, #20]
  return(result);
 800bb8a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d17e      	bne.n	800bc8e <osThreadNew+0x11a>
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d07b      	beq.n	800bc8e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800bb96:	2380      	movs	r3, #128	; 0x80
 800bb98:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800bb9a:	2318      	movs	r3, #24
 800bb9c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800bb9e:	2300      	movs	r3, #0
 800bba0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800bba2:	f04f 33ff 	mov.w	r3, #4294967295
 800bba6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d045      	beq.n	800bc3a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d002      	beq.n	800bbbc <osThreadNew+0x48>
        name = attr->name;
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	699b      	ldr	r3, [r3, #24]
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d002      	beq.n	800bbca <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	699b      	ldr	r3, [r3, #24]
 800bbc8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800bbca:	69fb      	ldr	r3, [r7, #28]
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d008      	beq.n	800bbe2 <osThreadNew+0x6e>
 800bbd0:	69fb      	ldr	r3, [r7, #28]
 800bbd2:	2b38      	cmp	r3, #56	; 0x38
 800bbd4:	d805      	bhi.n	800bbe2 <osThreadNew+0x6e>
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	685b      	ldr	r3, [r3, #4]
 800bbda:	f003 0301 	and.w	r3, r3, #1
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d001      	beq.n	800bbe6 <osThreadNew+0x72>
        return (NULL);
 800bbe2:	2300      	movs	r3, #0
 800bbe4:	e054      	b.n	800bc90 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	695b      	ldr	r3, [r3, #20]
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d003      	beq.n	800bbf6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	695b      	ldr	r3, [r3, #20]
 800bbf2:	089b      	lsrs	r3, r3, #2
 800bbf4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	689b      	ldr	r3, [r3, #8]
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d00e      	beq.n	800bc1c <osThreadNew+0xa8>
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	68db      	ldr	r3, [r3, #12]
 800bc02:	2b5b      	cmp	r3, #91	; 0x5b
 800bc04:	d90a      	bls.n	800bc1c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d006      	beq.n	800bc1c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	695b      	ldr	r3, [r3, #20]
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d002      	beq.n	800bc1c <osThreadNew+0xa8>
        mem = 1;
 800bc16:	2301      	movs	r3, #1
 800bc18:	61bb      	str	r3, [r7, #24]
 800bc1a:	e010      	b.n	800bc3e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	689b      	ldr	r3, [r3, #8]
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d10c      	bne.n	800bc3e <osThreadNew+0xca>
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	68db      	ldr	r3, [r3, #12]
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d108      	bne.n	800bc3e <osThreadNew+0xca>
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	691b      	ldr	r3, [r3, #16]
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d104      	bne.n	800bc3e <osThreadNew+0xca>
          mem = 0;
 800bc34:	2300      	movs	r3, #0
 800bc36:	61bb      	str	r3, [r7, #24]
 800bc38:	e001      	b.n	800bc3e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800bc3a:	2300      	movs	r3, #0
 800bc3c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800bc3e:	69bb      	ldr	r3, [r7, #24]
 800bc40:	2b01      	cmp	r3, #1
 800bc42:	d110      	bne.n	800bc66 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800bc48:	687a      	ldr	r2, [r7, #4]
 800bc4a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800bc4c:	9202      	str	r2, [sp, #8]
 800bc4e:	9301      	str	r3, [sp, #4]
 800bc50:	69fb      	ldr	r3, [r7, #28]
 800bc52:	9300      	str	r3, [sp, #0]
 800bc54:	68bb      	ldr	r3, [r7, #8]
 800bc56:	6a3a      	ldr	r2, [r7, #32]
 800bc58:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bc5a:	68f8      	ldr	r0, [r7, #12]
 800bc5c:	f001 fdf8 	bl	800d850 <xTaskCreateStatic>
 800bc60:	4603      	mov	r3, r0
 800bc62:	613b      	str	r3, [r7, #16]
 800bc64:	e013      	b.n	800bc8e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800bc66:	69bb      	ldr	r3, [r7, #24]
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d110      	bne.n	800bc8e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800bc6c:	6a3b      	ldr	r3, [r7, #32]
 800bc6e:	b29a      	uxth	r2, r3
 800bc70:	f107 0310 	add.w	r3, r7, #16
 800bc74:	9301      	str	r3, [sp, #4]
 800bc76:	69fb      	ldr	r3, [r7, #28]
 800bc78:	9300      	str	r3, [sp, #0]
 800bc7a:	68bb      	ldr	r3, [r7, #8]
 800bc7c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bc7e:	68f8      	ldr	r0, [r7, #12]
 800bc80:	f001 fe43 	bl	800d90a <xTaskCreate>
 800bc84:	4603      	mov	r3, r0
 800bc86:	2b01      	cmp	r3, #1
 800bc88:	d001      	beq.n	800bc8e <osThreadNew+0x11a>
            hTask = NULL;
 800bc8a:	2300      	movs	r3, #0
 800bc8c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800bc8e:	693b      	ldr	r3, [r7, #16]
}
 800bc90:	4618      	mov	r0, r3
 800bc92:	3728      	adds	r7, #40	; 0x28
 800bc94:	46bd      	mov	sp, r7
 800bc96:	bd80      	pop	{r7, pc}

0800bc98 <osThreadSuspend>:

  return (stat);
}

#if (configUSE_OS2_THREAD_SUSPEND_RESUME == 1)
osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 800bc98:	b580      	push	{r7, lr}
 800bc9a:	b086      	sub	sp, #24
 800bc9c:	af00      	add	r7, sp, #0
 800bc9e:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bca4:	f3ef 8305 	mrs	r3, IPSR
 800bca8:	60fb      	str	r3, [r7, #12]
  return(result);
 800bcaa:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d003      	beq.n	800bcb8 <osThreadSuspend+0x20>
    stat = osErrorISR;
 800bcb0:	f06f 0305 	mvn.w	r3, #5
 800bcb4:	617b      	str	r3, [r7, #20]
 800bcb6:	e00b      	b.n	800bcd0 <osThreadSuspend+0x38>
  }
  else if (hTask == NULL) {
 800bcb8:	693b      	ldr	r3, [r7, #16]
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d103      	bne.n	800bcc6 <osThreadSuspend+0x2e>
    stat = osErrorParameter;
 800bcbe:	f06f 0303 	mvn.w	r3, #3
 800bcc2:	617b      	str	r3, [r7, #20]
 800bcc4:	e004      	b.n	800bcd0 <osThreadSuspend+0x38>
  }
  else {
    stat = osOK;
 800bcc6:	2300      	movs	r3, #0
 800bcc8:	617b      	str	r3, [r7, #20]
    vTaskSuspend (hTask);
 800bcca:	6938      	ldr	r0, [r7, #16]
 800bccc:	f001 ff96 	bl	800dbfc <vTaskSuspend>
  }

  return (stat);
 800bcd0:	697b      	ldr	r3, [r7, #20]
}
 800bcd2:	4618      	mov	r0, r3
 800bcd4:	3718      	adds	r7, #24
 800bcd6:	46bd      	mov	sp, r7
 800bcd8:	bd80      	pop	{r7, pc}

0800bcda <osThreadResume>:

osStatus_t osThreadResume (osThreadId_t thread_id) {
 800bcda:	b580      	push	{r7, lr}
 800bcdc:	b086      	sub	sp, #24
 800bcde:	af00      	add	r7, sp, #0
 800bce0:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bce6:	f3ef 8305 	mrs	r3, IPSR
 800bcea:	60fb      	str	r3, [r7, #12]
  return(result);
 800bcec:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d003      	beq.n	800bcfa <osThreadResume+0x20>
    stat = osErrorISR;
 800bcf2:	f06f 0305 	mvn.w	r3, #5
 800bcf6:	617b      	str	r3, [r7, #20]
 800bcf8:	e00b      	b.n	800bd12 <osThreadResume+0x38>
  }
  else if (hTask == NULL) {
 800bcfa:	693b      	ldr	r3, [r7, #16]
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d103      	bne.n	800bd08 <osThreadResume+0x2e>
    stat = osErrorParameter;
 800bd00:	f06f 0303 	mvn.w	r3, #3
 800bd04:	617b      	str	r3, [r7, #20]
 800bd06:	e004      	b.n	800bd12 <osThreadResume+0x38>
  }
  else {
    stat = osOK;
 800bd08:	2300      	movs	r3, #0
 800bd0a:	617b      	str	r3, [r7, #20]
    vTaskResume (hTask);
 800bd0c:	6938      	ldr	r0, [r7, #16]
 800bd0e:	f002 f81d 	bl	800dd4c <vTaskResume>
  }

  return (stat);
 800bd12:	697b      	ldr	r3, [r7, #20]
}
 800bd14:	4618      	mov	r0, r3
 800bd16:	3718      	adds	r7, #24
 800bd18:	46bd      	mov	sp, r7
 800bd1a:	bd80      	pop	{r7, pc}

0800bd1c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800bd1c:	b580      	push	{r7, lr}
 800bd1e:	b084      	sub	sp, #16
 800bd20:	af00      	add	r7, sp, #0
 800bd22:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bd24:	f3ef 8305 	mrs	r3, IPSR
 800bd28:	60bb      	str	r3, [r7, #8]
  return(result);
 800bd2a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d003      	beq.n	800bd38 <osDelay+0x1c>
    stat = osErrorISR;
 800bd30:	f06f 0305 	mvn.w	r3, #5
 800bd34:	60fb      	str	r3, [r7, #12]
 800bd36:	e007      	b.n	800bd48 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800bd38:	2300      	movs	r3, #0
 800bd3a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d002      	beq.n	800bd48 <osDelay+0x2c>
      vTaskDelay(ticks);
 800bd42:	6878      	ldr	r0, [r7, #4]
 800bd44:	f001 ff26 	bl	800db94 <vTaskDelay>
    }
  }

  return (stat);
 800bd48:	68fb      	ldr	r3, [r7, #12]
}
 800bd4a:	4618      	mov	r0, r3
 800bd4c:	3710      	adds	r7, #16
 800bd4e:	46bd      	mov	sp, r7
 800bd50:	bd80      	pop	{r7, pc}

0800bd52 <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 800bd52:	b580      	push	{r7, lr}
 800bd54:	b086      	sub	sp, #24
 800bd56:	af00      	add	r7, sp, #0
 800bd58:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 800bd5a:	2300      	movs	r3, #0
 800bd5c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bd5e:	f3ef 8305 	mrs	r3, IPSR
 800bd62:	60fb      	str	r3, [r7, #12]
  return(result);
 800bd64:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d12d      	bne.n	800bdc6 <osEventFlagsNew+0x74>
    mem = -1;
 800bd6a:	f04f 33ff 	mov.w	r3, #4294967295
 800bd6e:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d015      	beq.n	800bda2 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	689b      	ldr	r3, [r3, #8]
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d006      	beq.n	800bd8c <osEventFlagsNew+0x3a>
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	68db      	ldr	r3, [r3, #12]
 800bd82:	2b1f      	cmp	r3, #31
 800bd84:	d902      	bls.n	800bd8c <osEventFlagsNew+0x3a>
        mem = 1;
 800bd86:	2301      	movs	r3, #1
 800bd88:	613b      	str	r3, [r7, #16]
 800bd8a:	e00c      	b.n	800bda6 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	689b      	ldr	r3, [r3, #8]
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d108      	bne.n	800bda6 <osEventFlagsNew+0x54>
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	68db      	ldr	r3, [r3, #12]
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d104      	bne.n	800bda6 <osEventFlagsNew+0x54>
          mem = 0;
 800bd9c:	2300      	movs	r3, #0
 800bd9e:	613b      	str	r3, [r7, #16]
 800bda0:	e001      	b.n	800bda6 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 800bda2:	2300      	movs	r3, #0
 800bda4:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 800bda6:	693b      	ldr	r3, [r7, #16]
 800bda8:	2b01      	cmp	r3, #1
 800bdaa:	d106      	bne.n	800bdba <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	689b      	ldr	r3, [r3, #8]
 800bdb0:	4618      	mov	r0, r3
 800bdb2:	f000 fb2b 	bl	800c40c <xEventGroupCreateStatic>
 800bdb6:	6178      	str	r0, [r7, #20]
 800bdb8:	e005      	b.n	800bdc6 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 800bdba:	693b      	ldr	r3, [r7, #16]
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d102      	bne.n	800bdc6 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 800bdc0:	f000 fb5b 	bl	800c47a <xEventGroupCreate>
 800bdc4:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 800bdc6:	697b      	ldr	r3, [r7, #20]
}
 800bdc8:	4618      	mov	r0, r3
 800bdca:	3718      	adds	r7, #24
 800bdcc:	46bd      	mov	sp, r7
 800bdce:	bd80      	pop	{r7, pc}

0800bdd0 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 800bdd0:	b580      	push	{r7, lr}
 800bdd2:	b086      	sub	sp, #24
 800bdd4:	af00      	add	r7, sp, #0
 800bdd6:	6078      	str	r0, [r7, #4]
 800bdd8:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800bdde:	693b      	ldr	r3, [r7, #16]
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d004      	beq.n	800bdee <osEventFlagsSet+0x1e>
 800bde4:	683b      	ldr	r3, [r7, #0]
 800bde6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d003      	beq.n	800bdf6 <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 800bdee:	f06f 0303 	mvn.w	r3, #3
 800bdf2:	617b      	str	r3, [r7, #20]
 800bdf4:	e028      	b.n	800be48 <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bdf6:	f3ef 8305 	mrs	r3, IPSR
 800bdfa:	60fb      	str	r3, [r7, #12]
  return(result);
 800bdfc:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d01d      	beq.n	800be3e <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 800be02:	2300      	movs	r3, #0
 800be04:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 800be06:	f107 0308 	add.w	r3, r7, #8
 800be0a:	461a      	mov	r2, r3
 800be0c:	6839      	ldr	r1, [r7, #0]
 800be0e:	6938      	ldr	r0, [r7, #16]
 800be10:	f000 fcd6 	bl	800c7c0 <xEventGroupSetBitsFromISR>
 800be14:	4603      	mov	r3, r0
 800be16:	2b00      	cmp	r3, #0
 800be18:	d103      	bne.n	800be22 <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 800be1a:	f06f 0302 	mvn.w	r3, #2
 800be1e:	617b      	str	r3, [r7, #20]
 800be20:	e012      	b.n	800be48 <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 800be22:	683b      	ldr	r3, [r7, #0]
 800be24:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 800be26:	68bb      	ldr	r3, [r7, #8]
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d00d      	beq.n	800be48 <osEventFlagsSet+0x78>
 800be2c:	4b09      	ldr	r3, [pc, #36]	; (800be54 <osEventFlagsSet+0x84>)
 800be2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be32:	601a      	str	r2, [r3, #0]
 800be34:	f3bf 8f4f 	dsb	sy
 800be38:	f3bf 8f6f 	isb	sy
 800be3c:	e004      	b.n	800be48 <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 800be3e:	6839      	ldr	r1, [r7, #0]
 800be40:	6938      	ldr	r0, [r7, #16]
 800be42:	f000 fc03 	bl	800c64c <xEventGroupSetBits>
 800be46:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 800be48:	697b      	ldr	r3, [r7, #20]
}
 800be4a:	4618      	mov	r0, r3
 800be4c:	3718      	adds	r7, #24
 800be4e:	46bd      	mov	sp, r7
 800be50:	bd80      	pop	{r7, pc}
 800be52:	bf00      	nop
 800be54:	e000ed04 	.word	0xe000ed04

0800be58 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 800be58:	b580      	push	{r7, lr}
 800be5a:	b08c      	sub	sp, #48	; 0x30
 800be5c:	af02      	add	r7, sp, #8
 800be5e:	60f8      	str	r0, [r7, #12]
 800be60:	60b9      	str	r1, [r7, #8]
 800be62:	607a      	str	r2, [r7, #4]
 800be64:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800be6a:	69bb      	ldr	r3, [r7, #24]
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d004      	beq.n	800be7a <osEventFlagsWait+0x22>
 800be70:	68bb      	ldr	r3, [r7, #8]
 800be72:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800be76:	2b00      	cmp	r3, #0
 800be78:	d003      	beq.n	800be82 <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 800be7a:	f06f 0303 	mvn.w	r3, #3
 800be7e:	61fb      	str	r3, [r7, #28]
 800be80:	e04b      	b.n	800bf1a <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800be82:	f3ef 8305 	mrs	r3, IPSR
 800be86:	617b      	str	r3, [r7, #20]
  return(result);
 800be88:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d003      	beq.n	800be96 <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 800be8e:	f06f 0305 	mvn.w	r3, #5
 800be92:	61fb      	str	r3, [r7, #28]
 800be94:	e041      	b.n	800bf1a <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	f003 0301 	and.w	r3, r3, #1
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d002      	beq.n	800bea6 <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 800bea0:	2301      	movs	r3, #1
 800bea2:	627b      	str	r3, [r7, #36]	; 0x24
 800bea4:	e001      	b.n	800beaa <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 800bea6:	2300      	movs	r3, #0
 800bea8:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	f003 0302 	and.w	r3, r3, #2
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d002      	beq.n	800beba <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 800beb4:	2300      	movs	r3, #0
 800beb6:	623b      	str	r3, [r7, #32]
 800beb8:	e001      	b.n	800bebe <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 800beba:	2301      	movs	r3, #1
 800bebc:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 800bebe:	683b      	ldr	r3, [r7, #0]
 800bec0:	9300      	str	r3, [sp, #0]
 800bec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bec4:	6a3a      	ldr	r2, [r7, #32]
 800bec6:	68b9      	ldr	r1, [r7, #8]
 800bec8:	69b8      	ldr	r0, [r7, #24]
 800beca:	f000 faf1 	bl	800c4b0 <xEventGroupWaitBits>
 800bece:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	f003 0301 	and.w	r3, r3, #1
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d010      	beq.n	800befc <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 800beda:	68ba      	ldr	r2, [r7, #8]
 800bedc:	69fb      	ldr	r3, [r7, #28]
 800bede:	4013      	ands	r3, r2
 800bee0:	68ba      	ldr	r2, [r7, #8]
 800bee2:	429a      	cmp	r2, r3
 800bee4:	d019      	beq.n	800bf1a <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 800bee6:	683b      	ldr	r3, [r7, #0]
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d003      	beq.n	800bef4 <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 800beec:	f06f 0301 	mvn.w	r3, #1
 800bef0:	61fb      	str	r3, [r7, #28]
 800bef2:	e012      	b.n	800bf1a <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 800bef4:	f06f 0302 	mvn.w	r3, #2
 800bef8:	61fb      	str	r3, [r7, #28]
 800befa:	e00e      	b.n	800bf1a <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 800befc:	68ba      	ldr	r2, [r7, #8]
 800befe:	69fb      	ldr	r3, [r7, #28]
 800bf00:	4013      	ands	r3, r2
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d109      	bne.n	800bf1a <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 800bf06:	683b      	ldr	r3, [r7, #0]
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d003      	beq.n	800bf14 <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 800bf0c:	f06f 0301 	mvn.w	r3, #1
 800bf10:	61fb      	str	r3, [r7, #28]
 800bf12:	e002      	b.n	800bf1a <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 800bf14:	f06f 0302 	mvn.w	r3, #2
 800bf18:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 800bf1a:	69fb      	ldr	r3, [r7, #28]
}
 800bf1c:	4618      	mov	r0, r3
 800bf1e:	3728      	adds	r7, #40	; 0x28
 800bf20:	46bd      	mov	sp, r7
 800bf22:	bd80      	pop	{r7, pc}

0800bf24 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800bf24:	b580      	push	{r7, lr}
 800bf26:	b088      	sub	sp, #32
 800bf28:	af00      	add	r7, sp, #0
 800bf2a:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800bf2c:	2300      	movs	r3, #0
 800bf2e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bf30:	f3ef 8305 	mrs	r3, IPSR
 800bf34:	60bb      	str	r3, [r7, #8]
  return(result);
 800bf36:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d174      	bne.n	800c026 <osMutexNew+0x102>
    if (attr != NULL) {
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d003      	beq.n	800bf4a <osMutexNew+0x26>
      type = attr->attr_bits;
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	685b      	ldr	r3, [r3, #4]
 800bf46:	61bb      	str	r3, [r7, #24]
 800bf48:	e001      	b.n	800bf4e <osMutexNew+0x2a>
    } else {
      type = 0U;
 800bf4a:	2300      	movs	r3, #0
 800bf4c:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800bf4e:	69bb      	ldr	r3, [r7, #24]
 800bf50:	f003 0301 	and.w	r3, r3, #1
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d002      	beq.n	800bf5e <osMutexNew+0x3a>
      rmtx = 1U;
 800bf58:	2301      	movs	r3, #1
 800bf5a:	617b      	str	r3, [r7, #20]
 800bf5c:	e001      	b.n	800bf62 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800bf5e:	2300      	movs	r3, #0
 800bf60:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800bf62:	69bb      	ldr	r3, [r7, #24]
 800bf64:	f003 0308 	and.w	r3, r3, #8
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d15c      	bne.n	800c026 <osMutexNew+0x102>
      mem = -1;
 800bf6c:	f04f 33ff 	mov.w	r3, #4294967295
 800bf70:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d015      	beq.n	800bfa4 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	689b      	ldr	r3, [r3, #8]
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d006      	beq.n	800bf8e <osMutexNew+0x6a>
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	68db      	ldr	r3, [r3, #12]
 800bf84:	2b4f      	cmp	r3, #79	; 0x4f
 800bf86:	d902      	bls.n	800bf8e <osMutexNew+0x6a>
          mem = 1;
 800bf88:	2301      	movs	r3, #1
 800bf8a:	613b      	str	r3, [r7, #16]
 800bf8c:	e00c      	b.n	800bfa8 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	689b      	ldr	r3, [r3, #8]
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d108      	bne.n	800bfa8 <osMutexNew+0x84>
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	68db      	ldr	r3, [r3, #12]
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d104      	bne.n	800bfa8 <osMutexNew+0x84>
            mem = 0;
 800bf9e:	2300      	movs	r3, #0
 800bfa0:	613b      	str	r3, [r7, #16]
 800bfa2:	e001      	b.n	800bfa8 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800bfa4:	2300      	movs	r3, #0
 800bfa6:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800bfa8:	693b      	ldr	r3, [r7, #16]
 800bfaa:	2b01      	cmp	r3, #1
 800bfac:	d112      	bne.n	800bfd4 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800bfae:	697b      	ldr	r3, [r7, #20]
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d007      	beq.n	800bfc4 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	689b      	ldr	r3, [r3, #8]
 800bfb8:	4619      	mov	r1, r3
 800bfba:	2004      	movs	r0, #4
 800bfbc:	f000 fe37 	bl	800cc2e <xQueueCreateMutexStatic>
 800bfc0:	61f8      	str	r0, [r7, #28]
 800bfc2:	e016      	b.n	800bff2 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	689b      	ldr	r3, [r3, #8]
 800bfc8:	4619      	mov	r1, r3
 800bfca:	2001      	movs	r0, #1
 800bfcc:	f000 fe2f 	bl	800cc2e <xQueueCreateMutexStatic>
 800bfd0:	61f8      	str	r0, [r7, #28]
 800bfd2:	e00e      	b.n	800bff2 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800bfd4:	693b      	ldr	r3, [r7, #16]
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d10b      	bne.n	800bff2 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800bfda:	697b      	ldr	r3, [r7, #20]
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d004      	beq.n	800bfea <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800bfe0:	2004      	movs	r0, #4
 800bfe2:	f000 fe0c 	bl	800cbfe <xQueueCreateMutex>
 800bfe6:	61f8      	str	r0, [r7, #28]
 800bfe8:	e003      	b.n	800bff2 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800bfea:	2001      	movs	r0, #1
 800bfec:	f000 fe07 	bl	800cbfe <xQueueCreateMutex>
 800bff0:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800bff2:	69fb      	ldr	r3, [r7, #28]
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d00c      	beq.n	800c012 <osMutexNew+0xee>
        if (attr != NULL) {
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d003      	beq.n	800c006 <osMutexNew+0xe2>
          name = attr->name;
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	60fb      	str	r3, [r7, #12]
 800c004:	e001      	b.n	800c00a <osMutexNew+0xe6>
        } else {
          name = NULL;
 800c006:	2300      	movs	r3, #0
 800c008:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800c00a:	68f9      	ldr	r1, [r7, #12]
 800c00c:	69f8      	ldr	r0, [r7, #28]
 800c00e:	f001 fbc1 	bl	800d794 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800c012:	69fb      	ldr	r3, [r7, #28]
 800c014:	2b00      	cmp	r3, #0
 800c016:	d006      	beq.n	800c026 <osMutexNew+0x102>
 800c018:	697b      	ldr	r3, [r7, #20]
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d003      	beq.n	800c026 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800c01e:	69fb      	ldr	r3, [r7, #28]
 800c020:	f043 0301 	orr.w	r3, r3, #1
 800c024:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800c026:	69fb      	ldr	r3, [r7, #28]
}
 800c028:	4618      	mov	r0, r3
 800c02a:	3720      	adds	r7, #32
 800c02c:	46bd      	mov	sp, r7
 800c02e:	bd80      	pop	{r7, pc}

0800c030 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800c030:	b580      	push	{r7, lr}
 800c032:	b086      	sub	sp, #24
 800c034:	af00      	add	r7, sp, #0
 800c036:	6078      	str	r0, [r7, #4]
 800c038:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	f023 0301 	bic.w	r3, r3, #1
 800c040:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	f003 0301 	and.w	r3, r3, #1
 800c048:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800c04a:	2300      	movs	r3, #0
 800c04c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c04e:	f3ef 8305 	mrs	r3, IPSR
 800c052:	60bb      	str	r3, [r7, #8]
  return(result);
 800c054:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800c056:	2b00      	cmp	r3, #0
 800c058:	d003      	beq.n	800c062 <osMutexAcquire+0x32>
    stat = osErrorISR;
 800c05a:	f06f 0305 	mvn.w	r3, #5
 800c05e:	617b      	str	r3, [r7, #20]
 800c060:	e02c      	b.n	800c0bc <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800c062:	693b      	ldr	r3, [r7, #16]
 800c064:	2b00      	cmp	r3, #0
 800c066:	d103      	bne.n	800c070 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800c068:	f06f 0303 	mvn.w	r3, #3
 800c06c:	617b      	str	r3, [r7, #20]
 800c06e:	e025      	b.n	800c0bc <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	2b00      	cmp	r3, #0
 800c074:	d011      	beq.n	800c09a <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800c076:	6839      	ldr	r1, [r7, #0]
 800c078:	6938      	ldr	r0, [r7, #16]
 800c07a:	f000 fe27 	bl	800cccc <xQueueTakeMutexRecursive>
 800c07e:	4603      	mov	r3, r0
 800c080:	2b01      	cmp	r3, #1
 800c082:	d01b      	beq.n	800c0bc <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800c084:	683b      	ldr	r3, [r7, #0]
 800c086:	2b00      	cmp	r3, #0
 800c088:	d003      	beq.n	800c092 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800c08a:	f06f 0301 	mvn.w	r3, #1
 800c08e:	617b      	str	r3, [r7, #20]
 800c090:	e014      	b.n	800c0bc <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800c092:	f06f 0302 	mvn.w	r3, #2
 800c096:	617b      	str	r3, [r7, #20]
 800c098:	e010      	b.n	800c0bc <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800c09a:	6839      	ldr	r1, [r7, #0]
 800c09c:	6938      	ldr	r0, [r7, #16]
 800c09e:	f001 f8c5 	bl	800d22c <xQueueSemaphoreTake>
 800c0a2:	4603      	mov	r3, r0
 800c0a4:	2b01      	cmp	r3, #1
 800c0a6:	d009      	beq.n	800c0bc <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800c0a8:	683b      	ldr	r3, [r7, #0]
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d003      	beq.n	800c0b6 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800c0ae:	f06f 0301 	mvn.w	r3, #1
 800c0b2:	617b      	str	r3, [r7, #20]
 800c0b4:	e002      	b.n	800c0bc <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800c0b6:	f06f 0302 	mvn.w	r3, #2
 800c0ba:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800c0bc:	697b      	ldr	r3, [r7, #20]
}
 800c0be:	4618      	mov	r0, r3
 800c0c0:	3718      	adds	r7, #24
 800c0c2:	46bd      	mov	sp, r7
 800c0c4:	bd80      	pop	{r7, pc}

0800c0c6 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800c0c6:	b580      	push	{r7, lr}
 800c0c8:	b086      	sub	sp, #24
 800c0ca:	af00      	add	r7, sp, #0
 800c0cc:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	f023 0301 	bic.w	r3, r3, #1
 800c0d4:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	f003 0301 	and.w	r3, r3, #1
 800c0dc:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800c0de:	2300      	movs	r3, #0
 800c0e0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c0e2:	f3ef 8305 	mrs	r3, IPSR
 800c0e6:	60bb      	str	r3, [r7, #8]
  return(result);
 800c0e8:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d003      	beq.n	800c0f6 <osMutexRelease+0x30>
    stat = osErrorISR;
 800c0ee:	f06f 0305 	mvn.w	r3, #5
 800c0f2:	617b      	str	r3, [r7, #20]
 800c0f4:	e01f      	b.n	800c136 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800c0f6:	693b      	ldr	r3, [r7, #16]
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d103      	bne.n	800c104 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800c0fc:	f06f 0303 	mvn.w	r3, #3
 800c100:	617b      	str	r3, [r7, #20]
 800c102:	e018      	b.n	800c136 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	2b00      	cmp	r3, #0
 800c108:	d009      	beq.n	800c11e <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800c10a:	6938      	ldr	r0, [r7, #16]
 800c10c:	f000 fdaa 	bl	800cc64 <xQueueGiveMutexRecursive>
 800c110:	4603      	mov	r3, r0
 800c112:	2b01      	cmp	r3, #1
 800c114:	d00f      	beq.n	800c136 <osMutexRelease+0x70>
        stat = osErrorResource;
 800c116:	f06f 0302 	mvn.w	r3, #2
 800c11a:	617b      	str	r3, [r7, #20]
 800c11c:	e00b      	b.n	800c136 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800c11e:	2300      	movs	r3, #0
 800c120:	2200      	movs	r2, #0
 800c122:	2100      	movs	r1, #0
 800c124:	6938      	ldr	r0, [r7, #16]
 800c126:	f000 fe07 	bl	800cd38 <xQueueGenericSend>
 800c12a:	4603      	mov	r3, r0
 800c12c:	2b01      	cmp	r3, #1
 800c12e:	d002      	beq.n	800c136 <osMutexRelease+0x70>
        stat = osErrorResource;
 800c130:	f06f 0302 	mvn.w	r3, #2
 800c134:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800c136:	697b      	ldr	r3, [r7, #20]
}
 800c138:	4618      	mov	r0, r3
 800c13a:	3718      	adds	r7, #24
 800c13c:	46bd      	mov	sp, r7
 800c13e:	bd80      	pop	{r7, pc}

0800c140 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800c140:	b580      	push	{r7, lr}
 800c142:	b08a      	sub	sp, #40	; 0x28
 800c144:	af02      	add	r7, sp, #8
 800c146:	60f8      	str	r0, [r7, #12]
 800c148:	60b9      	str	r1, [r7, #8]
 800c14a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800c14c:	2300      	movs	r3, #0
 800c14e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c150:	f3ef 8305 	mrs	r3, IPSR
 800c154:	613b      	str	r3, [r7, #16]
  return(result);
 800c156:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d15f      	bne.n	800c21c <osMessageQueueNew+0xdc>
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d05c      	beq.n	800c21c <osMessageQueueNew+0xdc>
 800c162:	68bb      	ldr	r3, [r7, #8]
 800c164:	2b00      	cmp	r3, #0
 800c166:	d059      	beq.n	800c21c <osMessageQueueNew+0xdc>
    mem = -1;
 800c168:	f04f 33ff 	mov.w	r3, #4294967295
 800c16c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	2b00      	cmp	r3, #0
 800c172:	d029      	beq.n	800c1c8 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	689b      	ldr	r3, [r3, #8]
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d012      	beq.n	800c1a2 <osMessageQueueNew+0x62>
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	68db      	ldr	r3, [r3, #12]
 800c180:	2b4f      	cmp	r3, #79	; 0x4f
 800c182:	d90e      	bls.n	800c1a2 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d00a      	beq.n	800c1a2 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	695a      	ldr	r2, [r3, #20]
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	68b9      	ldr	r1, [r7, #8]
 800c194:	fb01 f303 	mul.w	r3, r1, r3
 800c198:	429a      	cmp	r2, r3
 800c19a:	d302      	bcc.n	800c1a2 <osMessageQueueNew+0x62>
        mem = 1;
 800c19c:	2301      	movs	r3, #1
 800c19e:	61bb      	str	r3, [r7, #24]
 800c1a0:	e014      	b.n	800c1cc <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	689b      	ldr	r3, [r3, #8]
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d110      	bne.n	800c1cc <osMessageQueueNew+0x8c>
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	68db      	ldr	r3, [r3, #12]
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d10c      	bne.n	800c1cc <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d108      	bne.n	800c1cc <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	695b      	ldr	r3, [r3, #20]
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d104      	bne.n	800c1cc <osMessageQueueNew+0x8c>
          mem = 0;
 800c1c2:	2300      	movs	r3, #0
 800c1c4:	61bb      	str	r3, [r7, #24]
 800c1c6:	e001      	b.n	800c1cc <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800c1c8:	2300      	movs	r3, #0
 800c1ca:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800c1cc:	69bb      	ldr	r3, [r7, #24]
 800c1ce:	2b01      	cmp	r3, #1
 800c1d0:	d10b      	bne.n	800c1ea <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	691a      	ldr	r2, [r3, #16]
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	689b      	ldr	r3, [r3, #8]
 800c1da:	2100      	movs	r1, #0
 800c1dc:	9100      	str	r1, [sp, #0]
 800c1de:	68b9      	ldr	r1, [r7, #8]
 800c1e0:	68f8      	ldr	r0, [r7, #12]
 800c1e2:	f000 fc1d 	bl	800ca20 <xQueueGenericCreateStatic>
 800c1e6:	61f8      	str	r0, [r7, #28]
 800c1e8:	e008      	b.n	800c1fc <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800c1ea:	69bb      	ldr	r3, [r7, #24]
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d105      	bne.n	800c1fc <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800c1f0:	2200      	movs	r2, #0
 800c1f2:	68b9      	ldr	r1, [r7, #8]
 800c1f4:	68f8      	ldr	r0, [r7, #12]
 800c1f6:	f000 fc8b 	bl	800cb10 <xQueueGenericCreate>
 800c1fa:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800c1fc:	69fb      	ldr	r3, [r7, #28]
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d00c      	beq.n	800c21c <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	2b00      	cmp	r3, #0
 800c206:	d003      	beq.n	800c210 <osMessageQueueNew+0xd0>
        name = attr->name;
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	617b      	str	r3, [r7, #20]
 800c20e:	e001      	b.n	800c214 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800c210:	2300      	movs	r3, #0
 800c212:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800c214:	6979      	ldr	r1, [r7, #20]
 800c216:	69f8      	ldr	r0, [r7, #28]
 800c218:	f001 fabc 	bl	800d794 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800c21c:	69fb      	ldr	r3, [r7, #28]
}
 800c21e:	4618      	mov	r0, r3
 800c220:	3720      	adds	r7, #32
 800c222:	46bd      	mov	sp, r7
 800c224:	bd80      	pop	{r7, pc}
	...

0800c228 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800c228:	b580      	push	{r7, lr}
 800c22a:	b088      	sub	sp, #32
 800c22c:	af00      	add	r7, sp, #0
 800c22e:	60f8      	str	r0, [r7, #12]
 800c230:	60b9      	str	r1, [r7, #8]
 800c232:	603b      	str	r3, [r7, #0]
 800c234:	4613      	mov	r3, r2
 800c236:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800c23c:	2300      	movs	r3, #0
 800c23e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c240:	f3ef 8305 	mrs	r3, IPSR
 800c244:	617b      	str	r3, [r7, #20]
  return(result);
 800c246:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d028      	beq.n	800c29e <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800c24c:	69bb      	ldr	r3, [r7, #24]
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d005      	beq.n	800c25e <osMessageQueuePut+0x36>
 800c252:	68bb      	ldr	r3, [r7, #8]
 800c254:	2b00      	cmp	r3, #0
 800c256:	d002      	beq.n	800c25e <osMessageQueuePut+0x36>
 800c258:	683b      	ldr	r3, [r7, #0]
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d003      	beq.n	800c266 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800c25e:	f06f 0303 	mvn.w	r3, #3
 800c262:	61fb      	str	r3, [r7, #28]
 800c264:	e038      	b.n	800c2d8 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800c266:	2300      	movs	r3, #0
 800c268:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800c26a:	f107 0210 	add.w	r2, r7, #16
 800c26e:	2300      	movs	r3, #0
 800c270:	68b9      	ldr	r1, [r7, #8]
 800c272:	69b8      	ldr	r0, [r7, #24]
 800c274:	f000 fe5e 	bl	800cf34 <xQueueGenericSendFromISR>
 800c278:	4603      	mov	r3, r0
 800c27a:	2b01      	cmp	r3, #1
 800c27c:	d003      	beq.n	800c286 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800c27e:	f06f 0302 	mvn.w	r3, #2
 800c282:	61fb      	str	r3, [r7, #28]
 800c284:	e028      	b.n	800c2d8 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800c286:	693b      	ldr	r3, [r7, #16]
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d025      	beq.n	800c2d8 <osMessageQueuePut+0xb0>
 800c28c:	4b15      	ldr	r3, [pc, #84]	; (800c2e4 <osMessageQueuePut+0xbc>)
 800c28e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c292:	601a      	str	r2, [r3, #0]
 800c294:	f3bf 8f4f 	dsb	sy
 800c298:	f3bf 8f6f 	isb	sy
 800c29c:	e01c      	b.n	800c2d8 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800c29e:	69bb      	ldr	r3, [r7, #24]
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d002      	beq.n	800c2aa <osMessageQueuePut+0x82>
 800c2a4:	68bb      	ldr	r3, [r7, #8]
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d103      	bne.n	800c2b2 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800c2aa:	f06f 0303 	mvn.w	r3, #3
 800c2ae:	61fb      	str	r3, [r7, #28]
 800c2b0:	e012      	b.n	800c2d8 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800c2b2:	2300      	movs	r3, #0
 800c2b4:	683a      	ldr	r2, [r7, #0]
 800c2b6:	68b9      	ldr	r1, [r7, #8]
 800c2b8:	69b8      	ldr	r0, [r7, #24]
 800c2ba:	f000 fd3d 	bl	800cd38 <xQueueGenericSend>
 800c2be:	4603      	mov	r3, r0
 800c2c0:	2b01      	cmp	r3, #1
 800c2c2:	d009      	beq.n	800c2d8 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800c2c4:	683b      	ldr	r3, [r7, #0]
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d003      	beq.n	800c2d2 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800c2ca:	f06f 0301 	mvn.w	r3, #1
 800c2ce:	61fb      	str	r3, [r7, #28]
 800c2d0:	e002      	b.n	800c2d8 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800c2d2:	f06f 0302 	mvn.w	r3, #2
 800c2d6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800c2d8:	69fb      	ldr	r3, [r7, #28]
}
 800c2da:	4618      	mov	r0, r3
 800c2dc:	3720      	adds	r7, #32
 800c2de:	46bd      	mov	sp, r7
 800c2e0:	bd80      	pop	{r7, pc}
 800c2e2:	bf00      	nop
 800c2e4:	e000ed04 	.word	0xe000ed04

0800c2e8 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800c2e8:	b580      	push	{r7, lr}
 800c2ea:	b088      	sub	sp, #32
 800c2ec:	af00      	add	r7, sp, #0
 800c2ee:	60f8      	str	r0, [r7, #12]
 800c2f0:	60b9      	str	r1, [r7, #8]
 800c2f2:	607a      	str	r2, [r7, #4]
 800c2f4:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800c2fa:	2300      	movs	r3, #0
 800c2fc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c2fe:	f3ef 8305 	mrs	r3, IPSR
 800c302:	617b      	str	r3, [r7, #20]
  return(result);
 800c304:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800c306:	2b00      	cmp	r3, #0
 800c308:	d028      	beq.n	800c35c <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800c30a:	69bb      	ldr	r3, [r7, #24]
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d005      	beq.n	800c31c <osMessageQueueGet+0x34>
 800c310:	68bb      	ldr	r3, [r7, #8]
 800c312:	2b00      	cmp	r3, #0
 800c314:	d002      	beq.n	800c31c <osMessageQueueGet+0x34>
 800c316:	683b      	ldr	r3, [r7, #0]
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d003      	beq.n	800c324 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800c31c:	f06f 0303 	mvn.w	r3, #3
 800c320:	61fb      	str	r3, [r7, #28]
 800c322:	e037      	b.n	800c394 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800c324:	2300      	movs	r3, #0
 800c326:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800c328:	f107 0310 	add.w	r3, r7, #16
 800c32c:	461a      	mov	r2, r3
 800c32e:	68b9      	ldr	r1, [r7, #8]
 800c330:	69b8      	ldr	r0, [r7, #24]
 800c332:	f001 f887 	bl	800d444 <xQueueReceiveFromISR>
 800c336:	4603      	mov	r3, r0
 800c338:	2b01      	cmp	r3, #1
 800c33a:	d003      	beq.n	800c344 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800c33c:	f06f 0302 	mvn.w	r3, #2
 800c340:	61fb      	str	r3, [r7, #28]
 800c342:	e027      	b.n	800c394 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800c344:	693b      	ldr	r3, [r7, #16]
 800c346:	2b00      	cmp	r3, #0
 800c348:	d024      	beq.n	800c394 <osMessageQueueGet+0xac>
 800c34a:	4b15      	ldr	r3, [pc, #84]	; (800c3a0 <osMessageQueueGet+0xb8>)
 800c34c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c350:	601a      	str	r2, [r3, #0]
 800c352:	f3bf 8f4f 	dsb	sy
 800c356:	f3bf 8f6f 	isb	sy
 800c35a:	e01b      	b.n	800c394 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800c35c:	69bb      	ldr	r3, [r7, #24]
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d002      	beq.n	800c368 <osMessageQueueGet+0x80>
 800c362:	68bb      	ldr	r3, [r7, #8]
 800c364:	2b00      	cmp	r3, #0
 800c366:	d103      	bne.n	800c370 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800c368:	f06f 0303 	mvn.w	r3, #3
 800c36c:	61fb      	str	r3, [r7, #28]
 800c36e:	e011      	b.n	800c394 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800c370:	683a      	ldr	r2, [r7, #0]
 800c372:	68b9      	ldr	r1, [r7, #8]
 800c374:	69b8      	ldr	r0, [r7, #24]
 800c376:	f000 fe79 	bl	800d06c <xQueueReceive>
 800c37a:	4603      	mov	r3, r0
 800c37c:	2b01      	cmp	r3, #1
 800c37e:	d009      	beq.n	800c394 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800c380:	683b      	ldr	r3, [r7, #0]
 800c382:	2b00      	cmp	r3, #0
 800c384:	d003      	beq.n	800c38e <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800c386:	f06f 0301 	mvn.w	r3, #1
 800c38a:	61fb      	str	r3, [r7, #28]
 800c38c:	e002      	b.n	800c394 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800c38e:	f06f 0302 	mvn.w	r3, #2
 800c392:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800c394:	69fb      	ldr	r3, [r7, #28]
}
 800c396:	4618      	mov	r0, r3
 800c398:	3720      	adds	r7, #32
 800c39a:	46bd      	mov	sp, r7
 800c39c:	bd80      	pop	{r7, pc}
 800c39e:	bf00      	nop
 800c3a0:	e000ed04 	.word	0xe000ed04

0800c3a4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800c3a4:	b480      	push	{r7}
 800c3a6:	b085      	sub	sp, #20
 800c3a8:	af00      	add	r7, sp, #0
 800c3aa:	60f8      	str	r0, [r7, #12]
 800c3ac:	60b9      	str	r1, [r7, #8]
 800c3ae:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	4a07      	ldr	r2, [pc, #28]	; (800c3d0 <vApplicationGetIdleTaskMemory+0x2c>)
 800c3b4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800c3b6:	68bb      	ldr	r3, [r7, #8]
 800c3b8:	4a06      	ldr	r2, [pc, #24]	; (800c3d4 <vApplicationGetIdleTaskMemory+0x30>)
 800c3ba:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	2280      	movs	r2, #128	; 0x80
 800c3c0:	601a      	str	r2, [r3, #0]
}
 800c3c2:	bf00      	nop
 800c3c4:	3714      	adds	r7, #20
 800c3c6:	46bd      	mov	sp, r7
 800c3c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3cc:	4770      	bx	lr
 800c3ce:	bf00      	nop
 800c3d0:	20000608 	.word	0x20000608
 800c3d4:	20000664 	.word	0x20000664

0800c3d8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800c3d8:	b480      	push	{r7}
 800c3da:	b085      	sub	sp, #20
 800c3dc:	af00      	add	r7, sp, #0
 800c3de:	60f8      	str	r0, [r7, #12]
 800c3e0:	60b9      	str	r1, [r7, #8]
 800c3e2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	4a07      	ldr	r2, [pc, #28]	; (800c404 <vApplicationGetTimerTaskMemory+0x2c>)
 800c3e8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800c3ea:	68bb      	ldr	r3, [r7, #8]
 800c3ec:	4a06      	ldr	r2, [pc, #24]	; (800c408 <vApplicationGetTimerTaskMemory+0x30>)
 800c3ee:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c3f6:	601a      	str	r2, [r3, #0]
}
 800c3f8:	bf00      	nop
 800c3fa:	3714      	adds	r7, #20
 800c3fc:	46bd      	mov	sp, r7
 800c3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c402:	4770      	bx	lr
 800c404:	20000864 	.word	0x20000864
 800c408:	200008c0 	.word	0x200008c0

0800c40c <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 800c40c:	b580      	push	{r7, lr}
 800c40e:	b086      	sub	sp, #24
 800c410:	af00      	add	r7, sp, #0
 800c412:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	2b00      	cmp	r3, #0
 800c418:	d10a      	bne.n	800c430 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c41a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c41e:	f383 8811 	msr	BASEPRI, r3
 800c422:	f3bf 8f6f 	isb	sy
 800c426:	f3bf 8f4f 	dsb	sy
 800c42a:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800c42c:	bf00      	nop
 800c42e:	e7fe      	b.n	800c42e <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 800c430:	2320      	movs	r3, #32
 800c432:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 800c434:	68bb      	ldr	r3, [r7, #8]
 800c436:	2b20      	cmp	r3, #32
 800c438:	d00a      	beq.n	800c450 <xEventGroupCreateStatic+0x44>
	__asm volatile
 800c43a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c43e:	f383 8811 	msr	BASEPRI, r3
 800c442:	f3bf 8f6f 	isb	sy
 800c446:	f3bf 8f4f 	dsb	sy
 800c44a:	60fb      	str	r3, [r7, #12]
}
 800c44c:	bf00      	nop
 800c44e:	e7fe      	b.n	800c44e <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 800c454:	697b      	ldr	r3, [r7, #20]
 800c456:	2b00      	cmp	r3, #0
 800c458:	d00a      	beq.n	800c470 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 800c45a:	697b      	ldr	r3, [r7, #20]
 800c45c:	2200      	movs	r2, #0
 800c45e:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800c460:	697b      	ldr	r3, [r7, #20]
 800c462:	3304      	adds	r3, #4
 800c464:	4618      	mov	r0, r3
 800c466:	f000 f9bf 	bl	800c7e8 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 800c46a:	697b      	ldr	r3, [r7, #20]
 800c46c:	2201      	movs	r2, #1
 800c46e:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 800c470:	697b      	ldr	r3, [r7, #20]
	}
 800c472:	4618      	mov	r0, r3
 800c474:	3718      	adds	r7, #24
 800c476:	46bd      	mov	sp, r7
 800c478:	bd80      	pop	{r7, pc}

0800c47a <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 800c47a:	b580      	push	{r7, lr}
 800c47c:	b082      	sub	sp, #8
 800c47e:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 800c480:	2020      	movs	r0, #32
 800c482:	f003 f969 	bl	800f758 <pvPortMalloc>
 800c486:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d00a      	beq.n	800c4a4 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	2200      	movs	r2, #0
 800c492:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	3304      	adds	r3, #4
 800c498:	4618      	mov	r0, r3
 800c49a:	f000 f9a5 	bl	800c7e8 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	2200      	movs	r2, #0
 800c4a2:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 800c4a4:	687b      	ldr	r3, [r7, #4]
	}
 800c4a6:	4618      	mov	r0, r3
 800c4a8:	3708      	adds	r7, #8
 800c4aa:	46bd      	mov	sp, r7
 800c4ac:	bd80      	pop	{r7, pc}
	...

0800c4b0 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 800c4b0:	b580      	push	{r7, lr}
 800c4b2:	b090      	sub	sp, #64	; 0x40
 800c4b4:	af00      	add	r7, sp, #0
 800c4b6:	60f8      	str	r0, [r7, #12]
 800c4b8:	60b9      	str	r1, [r7, #8]
 800c4ba:	607a      	str	r2, [r7, #4]
 800c4bc:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 800c4c2:	2300      	movs	r3, #0
 800c4c4:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 800c4c6:	2300      	movs	r3, #0
 800c4c8:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 800c4ca:	68fb      	ldr	r3, [r7, #12]
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d10a      	bne.n	800c4e6 <xEventGroupWaitBits+0x36>
	__asm volatile
 800c4d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4d4:	f383 8811 	msr	BASEPRI, r3
 800c4d8:	f3bf 8f6f 	isb	sy
 800c4dc:	f3bf 8f4f 	dsb	sy
 800c4e0:	623b      	str	r3, [r7, #32]
}
 800c4e2:	bf00      	nop
 800c4e4:	e7fe      	b.n	800c4e4 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800c4e6:	68bb      	ldr	r3, [r7, #8]
 800c4e8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d00a      	beq.n	800c506 <xEventGroupWaitBits+0x56>
	__asm volatile
 800c4f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4f4:	f383 8811 	msr	BASEPRI, r3
 800c4f8:	f3bf 8f6f 	isb	sy
 800c4fc:	f3bf 8f4f 	dsb	sy
 800c500:	61fb      	str	r3, [r7, #28]
}
 800c502:	bf00      	nop
 800c504:	e7fe      	b.n	800c504 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 800c506:	68bb      	ldr	r3, [r7, #8]
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d10a      	bne.n	800c522 <xEventGroupWaitBits+0x72>
	__asm volatile
 800c50c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c510:	f383 8811 	msr	BASEPRI, r3
 800c514:	f3bf 8f6f 	isb	sy
 800c518:	f3bf 8f4f 	dsb	sy
 800c51c:	61bb      	str	r3, [r7, #24]
}
 800c51e:	bf00      	nop
 800c520:	e7fe      	b.n	800c520 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c522:	f002 f967 	bl	800e7f4 <xTaskGetSchedulerState>
 800c526:	4603      	mov	r3, r0
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d102      	bne.n	800c532 <xEventGroupWaitBits+0x82>
 800c52c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d101      	bne.n	800c536 <xEventGroupWaitBits+0x86>
 800c532:	2301      	movs	r3, #1
 800c534:	e000      	b.n	800c538 <xEventGroupWaitBits+0x88>
 800c536:	2300      	movs	r3, #0
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d10a      	bne.n	800c552 <xEventGroupWaitBits+0xa2>
	__asm volatile
 800c53c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c540:	f383 8811 	msr	BASEPRI, r3
 800c544:	f3bf 8f6f 	isb	sy
 800c548:	f3bf 8f4f 	dsb	sy
 800c54c:	617b      	str	r3, [r7, #20]
}
 800c54e:	bf00      	nop
 800c550:	e7fe      	b.n	800c550 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 800c552:	f001 fcbf 	bl	800ded4 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 800c556:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 800c55c:	683a      	ldr	r2, [r7, #0]
 800c55e:	68b9      	ldr	r1, [r7, #8]
 800c560:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c562:	f000 f90b 	bl	800c77c <prvTestWaitCondition>
 800c566:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 800c568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d00e      	beq.n	800c58c <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 800c56e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c570:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 800c572:	2300      	movs	r3, #0
 800c574:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d028      	beq.n	800c5ce <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800c57c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c57e:	681a      	ldr	r2, [r3, #0]
 800c580:	68bb      	ldr	r3, [r7, #8]
 800c582:	43db      	mvns	r3, r3
 800c584:	401a      	ands	r2, r3
 800c586:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c588:	601a      	str	r2, [r3, #0]
 800c58a:	e020      	b.n	800c5ce <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 800c58c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d104      	bne.n	800c59c <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 800c592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c594:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 800c596:	2301      	movs	r3, #1
 800c598:	633b      	str	r3, [r7, #48]	; 0x30
 800c59a:	e018      	b.n	800c5ce <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d003      	beq.n	800c5aa <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 800c5a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5a4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c5a8:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 800c5aa:	683b      	ldr	r3, [r7, #0]
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d003      	beq.n	800c5b8 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 800c5b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5b2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c5b6:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 800c5b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5ba:	1d18      	adds	r0, r3, #4
 800c5bc:	68ba      	ldr	r2, [r7, #8]
 800c5be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5c0:	4313      	orrs	r3, r2
 800c5c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c5c4:	4619      	mov	r1, r3
 800c5c6:	f001 fe7d 	bl	800e2c4 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 800c5ca:	2300      	movs	r3, #0
 800c5cc:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 800c5ce:	f001 fc8f 	bl	800def0 <xTaskResumeAll>
 800c5d2:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 800c5d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d031      	beq.n	800c63e <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 800c5da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d107      	bne.n	800c5f0 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 800c5e0:	4b19      	ldr	r3, [pc, #100]	; (800c648 <xEventGroupWaitBits+0x198>)
 800c5e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c5e6:	601a      	str	r2, [r3, #0]
 800c5e8:	f3bf 8f4f 	dsb	sy
 800c5ec:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 800c5f0:	f002 fa76 	bl	800eae0 <uxTaskResetEventItemValue>
 800c5f4:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 800c5f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c5f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d11a      	bne.n	800c636 <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 800c600:	f002 ff88 	bl	800f514 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 800c604:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 800c60a:	683a      	ldr	r2, [r7, #0]
 800c60c:	68b9      	ldr	r1, [r7, #8]
 800c60e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800c610:	f000 f8b4 	bl	800c77c <prvTestWaitCondition>
 800c614:	4603      	mov	r3, r0
 800c616:	2b00      	cmp	r3, #0
 800c618:	d009      	beq.n	800c62e <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d006      	beq.n	800c62e <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800c620:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c622:	681a      	ldr	r2, [r3, #0]
 800c624:	68bb      	ldr	r3, [r7, #8]
 800c626:	43db      	mvns	r3, r3
 800c628:	401a      	ands	r2, r3
 800c62a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c62c:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 800c62e:	2301      	movs	r3, #1
 800c630:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 800c632:	f002 ff9f 	bl	800f574 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 800c636:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c638:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800c63c:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 800c63e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c640:	4618      	mov	r0, r3
 800c642:	3740      	adds	r7, #64	; 0x40
 800c644:	46bd      	mov	sp, r7
 800c646:	bd80      	pop	{r7, pc}
 800c648:	e000ed04 	.word	0xe000ed04

0800c64c <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 800c64c:	b580      	push	{r7, lr}
 800c64e:	b08e      	sub	sp, #56	; 0x38
 800c650:	af00      	add	r7, sp, #0
 800c652:	6078      	str	r0, [r7, #4]
 800c654:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 800c656:	2300      	movs	r3, #0
 800c658:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 800c65e:	2300      	movs	r3, #0
 800c660:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	2b00      	cmp	r3, #0
 800c666:	d10a      	bne.n	800c67e <xEventGroupSetBits+0x32>
	__asm volatile
 800c668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c66c:	f383 8811 	msr	BASEPRI, r3
 800c670:	f3bf 8f6f 	isb	sy
 800c674:	f3bf 8f4f 	dsb	sy
 800c678:	613b      	str	r3, [r7, #16]
}
 800c67a:	bf00      	nop
 800c67c:	e7fe      	b.n	800c67c <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800c67e:	683b      	ldr	r3, [r7, #0]
 800c680:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800c684:	2b00      	cmp	r3, #0
 800c686:	d00a      	beq.n	800c69e <xEventGroupSetBits+0x52>
	__asm volatile
 800c688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c68c:	f383 8811 	msr	BASEPRI, r3
 800c690:	f3bf 8f6f 	isb	sy
 800c694:	f3bf 8f4f 	dsb	sy
 800c698:	60fb      	str	r3, [r7, #12]
}
 800c69a:	bf00      	nop
 800c69c:	e7fe      	b.n	800c69c <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 800c69e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6a0:	3304      	adds	r3, #4
 800c6a2:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c6a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6a6:	3308      	adds	r3, #8
 800c6a8:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 800c6aa:	f001 fc13 	bl	800ded4 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 800c6ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6b0:	68db      	ldr	r3, [r3, #12]
 800c6b2:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 800c6b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6b6:	681a      	ldr	r2, [r3, #0]
 800c6b8:	683b      	ldr	r3, [r7, #0]
 800c6ba:	431a      	orrs	r2, r3
 800c6bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6be:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 800c6c0:	e03c      	b.n	800c73c <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 800c6c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6c4:	685b      	ldr	r3, [r3, #4]
 800c6c6:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 800c6c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 800c6ce:	2300      	movs	r3, #0
 800c6d0:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 800c6d2:	69bb      	ldr	r3, [r7, #24]
 800c6d4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800c6d8:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 800c6da:	69bb      	ldr	r3, [r7, #24]
 800c6dc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800c6e0:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800c6e2:	697b      	ldr	r3, [r7, #20]
 800c6e4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	d108      	bne.n	800c6fe <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 800c6ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6ee:	681a      	ldr	r2, [r3, #0]
 800c6f0:	69bb      	ldr	r3, [r7, #24]
 800c6f2:	4013      	ands	r3, r2
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d00b      	beq.n	800c710 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 800c6f8:	2301      	movs	r3, #1
 800c6fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c6fc:	e008      	b.n	800c710 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 800c6fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c700:	681a      	ldr	r2, [r3, #0]
 800c702:	69bb      	ldr	r3, [r7, #24]
 800c704:	4013      	ands	r3, r2
 800c706:	69ba      	ldr	r2, [r7, #24]
 800c708:	429a      	cmp	r2, r3
 800c70a:	d101      	bne.n	800c710 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 800c70c:	2301      	movs	r3, #1
 800c70e:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 800c710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c712:	2b00      	cmp	r3, #0
 800c714:	d010      	beq.n	800c738 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800c716:	697b      	ldr	r3, [r7, #20]
 800c718:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d003      	beq.n	800c728 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 800c720:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c722:	69bb      	ldr	r3, [r7, #24]
 800c724:	4313      	orrs	r3, r2
 800c726:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 800c728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800c730:	4619      	mov	r1, r3
 800c732:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c734:	f001 fe92 	bl	800e45c <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 800c738:	69fb      	ldr	r3, [r7, #28]
 800c73a:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 800c73c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c73e:	6a3b      	ldr	r3, [r7, #32]
 800c740:	429a      	cmp	r2, r3
 800c742:	d1be      	bne.n	800c6c2 <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800c744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c746:	681a      	ldr	r2, [r3, #0]
 800c748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c74a:	43db      	mvns	r3, r3
 800c74c:	401a      	ands	r2, r3
 800c74e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c750:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 800c752:	f001 fbcd 	bl	800def0 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 800c756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c758:	681b      	ldr	r3, [r3, #0]
}
 800c75a:	4618      	mov	r0, r3
 800c75c:	3738      	adds	r7, #56	; 0x38
 800c75e:	46bd      	mov	sp, r7
 800c760:	bd80      	pop	{r7, pc}

0800c762 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 800c762:	b580      	push	{r7, lr}
 800c764:	b082      	sub	sp, #8
 800c766:	af00      	add	r7, sp, #0
 800c768:	6078      	str	r0, [r7, #4]
 800c76a:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 800c76c:	6839      	ldr	r1, [r7, #0]
 800c76e:	6878      	ldr	r0, [r7, #4]
 800c770:	f7ff ff6c 	bl	800c64c <xEventGroupSetBits>
}
 800c774:	bf00      	nop
 800c776:	3708      	adds	r7, #8
 800c778:	46bd      	mov	sp, r7
 800c77a:	bd80      	pop	{r7, pc}

0800c77c <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 800c77c:	b480      	push	{r7}
 800c77e:	b087      	sub	sp, #28
 800c780:	af00      	add	r7, sp, #0
 800c782:	60f8      	str	r0, [r7, #12]
 800c784:	60b9      	str	r1, [r7, #8]
 800c786:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 800c788:	2300      	movs	r3, #0
 800c78a:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d107      	bne.n	800c7a2 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 800c792:	68fa      	ldr	r2, [r7, #12]
 800c794:	68bb      	ldr	r3, [r7, #8]
 800c796:	4013      	ands	r3, r2
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d00a      	beq.n	800c7b2 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800c79c:	2301      	movs	r3, #1
 800c79e:	617b      	str	r3, [r7, #20]
 800c7a0:	e007      	b.n	800c7b2 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 800c7a2:	68fa      	ldr	r2, [r7, #12]
 800c7a4:	68bb      	ldr	r3, [r7, #8]
 800c7a6:	4013      	ands	r3, r2
 800c7a8:	68ba      	ldr	r2, [r7, #8]
 800c7aa:	429a      	cmp	r2, r3
 800c7ac:	d101      	bne.n	800c7b2 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800c7ae:	2301      	movs	r3, #1
 800c7b0:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 800c7b2:	697b      	ldr	r3, [r7, #20]
}
 800c7b4:	4618      	mov	r0, r3
 800c7b6:	371c      	adds	r7, #28
 800c7b8:	46bd      	mov	sp, r7
 800c7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7be:	4770      	bx	lr

0800c7c0 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800c7c0:	b580      	push	{r7, lr}
 800c7c2:	b086      	sub	sp, #24
 800c7c4:	af00      	add	r7, sp, #0
 800c7c6:	60f8      	str	r0, [r7, #12]
 800c7c8:	60b9      	str	r1, [r7, #8]
 800c7ca:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	68ba      	ldr	r2, [r7, #8]
 800c7d0:	68f9      	ldr	r1, [r7, #12]
 800c7d2:	4804      	ldr	r0, [pc, #16]	; (800c7e4 <xEventGroupSetBitsFromISR+0x24>)
 800c7d4:	f002 fd52 	bl	800f27c <xTimerPendFunctionCallFromISR>
 800c7d8:	6178      	str	r0, [r7, #20]

		return xReturn;
 800c7da:	697b      	ldr	r3, [r7, #20]
	}
 800c7dc:	4618      	mov	r0, r3
 800c7de:	3718      	adds	r7, #24
 800c7e0:	46bd      	mov	sp, r7
 800c7e2:	bd80      	pop	{r7, pc}
 800c7e4:	0800c763 	.word	0x0800c763

0800c7e8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c7e8:	b480      	push	{r7}
 800c7ea:	b083      	sub	sp, #12
 800c7ec:	af00      	add	r7, sp, #0
 800c7ee:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	f103 0208 	add.w	r2, r3, #8
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	f04f 32ff 	mov.w	r2, #4294967295
 800c800:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	f103 0208 	add.w	r2, r3, #8
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	f103 0208 	add.w	r2, r3, #8
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	2200      	movs	r2, #0
 800c81a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c81c:	bf00      	nop
 800c81e:	370c      	adds	r7, #12
 800c820:	46bd      	mov	sp, r7
 800c822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c826:	4770      	bx	lr

0800c828 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c828:	b480      	push	{r7}
 800c82a:	b083      	sub	sp, #12
 800c82c:	af00      	add	r7, sp, #0
 800c82e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	2200      	movs	r2, #0
 800c834:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c836:	bf00      	nop
 800c838:	370c      	adds	r7, #12
 800c83a:	46bd      	mov	sp, r7
 800c83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c840:	4770      	bx	lr

0800c842 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c842:	b480      	push	{r7}
 800c844:	b085      	sub	sp, #20
 800c846:	af00      	add	r7, sp, #0
 800c848:	6078      	str	r0, [r7, #4]
 800c84a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	685b      	ldr	r3, [r3, #4]
 800c850:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c852:	683b      	ldr	r3, [r7, #0]
 800c854:	68fa      	ldr	r2, [r7, #12]
 800c856:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	689a      	ldr	r2, [r3, #8]
 800c85c:	683b      	ldr	r3, [r7, #0]
 800c85e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c860:	68fb      	ldr	r3, [r7, #12]
 800c862:	689b      	ldr	r3, [r3, #8]
 800c864:	683a      	ldr	r2, [r7, #0]
 800c866:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c868:	68fb      	ldr	r3, [r7, #12]
 800c86a:	683a      	ldr	r2, [r7, #0]
 800c86c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c86e:	683b      	ldr	r3, [r7, #0]
 800c870:	687a      	ldr	r2, [r7, #4]
 800c872:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	1c5a      	adds	r2, r3, #1
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	601a      	str	r2, [r3, #0]
}
 800c87e:	bf00      	nop
 800c880:	3714      	adds	r7, #20
 800c882:	46bd      	mov	sp, r7
 800c884:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c888:	4770      	bx	lr

0800c88a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c88a:	b480      	push	{r7}
 800c88c:	b085      	sub	sp, #20
 800c88e:	af00      	add	r7, sp, #0
 800c890:	6078      	str	r0, [r7, #4]
 800c892:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c894:	683b      	ldr	r3, [r7, #0]
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c89a:	68bb      	ldr	r3, [r7, #8]
 800c89c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8a0:	d103      	bne.n	800c8aa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	691b      	ldr	r3, [r3, #16]
 800c8a6:	60fb      	str	r3, [r7, #12]
 800c8a8:	e00c      	b.n	800c8c4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	3308      	adds	r3, #8
 800c8ae:	60fb      	str	r3, [r7, #12]
 800c8b0:	e002      	b.n	800c8b8 <vListInsert+0x2e>
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	685b      	ldr	r3, [r3, #4]
 800c8b6:	60fb      	str	r3, [r7, #12]
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	685b      	ldr	r3, [r3, #4]
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	68ba      	ldr	r2, [r7, #8]
 800c8c0:	429a      	cmp	r2, r3
 800c8c2:	d2f6      	bcs.n	800c8b2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c8c4:	68fb      	ldr	r3, [r7, #12]
 800c8c6:	685a      	ldr	r2, [r3, #4]
 800c8c8:	683b      	ldr	r3, [r7, #0]
 800c8ca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c8cc:	683b      	ldr	r3, [r7, #0]
 800c8ce:	685b      	ldr	r3, [r3, #4]
 800c8d0:	683a      	ldr	r2, [r7, #0]
 800c8d2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c8d4:	683b      	ldr	r3, [r7, #0]
 800c8d6:	68fa      	ldr	r2, [r7, #12]
 800c8d8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c8da:	68fb      	ldr	r3, [r7, #12]
 800c8dc:	683a      	ldr	r2, [r7, #0]
 800c8de:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c8e0:	683b      	ldr	r3, [r7, #0]
 800c8e2:	687a      	ldr	r2, [r7, #4]
 800c8e4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	1c5a      	adds	r2, r3, #1
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	601a      	str	r2, [r3, #0]
}
 800c8f0:	bf00      	nop
 800c8f2:	3714      	adds	r7, #20
 800c8f4:	46bd      	mov	sp, r7
 800c8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8fa:	4770      	bx	lr

0800c8fc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c8fc:	b480      	push	{r7}
 800c8fe:	b085      	sub	sp, #20
 800c900:	af00      	add	r7, sp, #0
 800c902:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	691b      	ldr	r3, [r3, #16]
 800c908:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	685b      	ldr	r3, [r3, #4]
 800c90e:	687a      	ldr	r2, [r7, #4]
 800c910:	6892      	ldr	r2, [r2, #8]
 800c912:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	689b      	ldr	r3, [r3, #8]
 800c918:	687a      	ldr	r2, [r7, #4]
 800c91a:	6852      	ldr	r2, [r2, #4]
 800c91c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	685b      	ldr	r3, [r3, #4]
 800c922:	687a      	ldr	r2, [r7, #4]
 800c924:	429a      	cmp	r2, r3
 800c926:	d103      	bne.n	800c930 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	689a      	ldr	r2, [r3, #8]
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	2200      	movs	r2, #0
 800c934:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	1e5a      	subs	r2, r3, #1
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	681b      	ldr	r3, [r3, #0]
}
 800c944:	4618      	mov	r0, r3
 800c946:	3714      	adds	r7, #20
 800c948:	46bd      	mov	sp, r7
 800c94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c94e:	4770      	bx	lr

0800c950 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c950:	b580      	push	{r7, lr}
 800c952:	b084      	sub	sp, #16
 800c954:	af00      	add	r7, sp, #0
 800c956:	6078      	str	r0, [r7, #4]
 800c958:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	2b00      	cmp	r3, #0
 800c962:	d10a      	bne.n	800c97a <xQueueGenericReset+0x2a>
	__asm volatile
 800c964:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c968:	f383 8811 	msr	BASEPRI, r3
 800c96c:	f3bf 8f6f 	isb	sy
 800c970:	f3bf 8f4f 	dsb	sy
 800c974:	60bb      	str	r3, [r7, #8]
}
 800c976:	bf00      	nop
 800c978:	e7fe      	b.n	800c978 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800c97a:	f002 fdcb 	bl	800f514 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c97e:	68fb      	ldr	r3, [r7, #12]
 800c980:	681a      	ldr	r2, [r3, #0]
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c986:	68f9      	ldr	r1, [r7, #12]
 800c988:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c98a:	fb01 f303 	mul.w	r3, r1, r3
 800c98e:	441a      	add	r2, r3
 800c990:	68fb      	ldr	r3, [r7, #12]
 800c992:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c994:	68fb      	ldr	r3, [r7, #12]
 800c996:	2200      	movs	r2, #0
 800c998:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c99a:	68fb      	ldr	r3, [r7, #12]
 800c99c:	681a      	ldr	r2, [r3, #0]
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	681a      	ldr	r2, [r3, #0]
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c9aa:	3b01      	subs	r3, #1
 800c9ac:	68f9      	ldr	r1, [r7, #12]
 800c9ae:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c9b0:	fb01 f303 	mul.w	r3, r1, r3
 800c9b4:	441a      	add	r2, r3
 800c9b6:	68fb      	ldr	r3, [r7, #12]
 800c9b8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	22ff      	movs	r2, #255	; 0xff
 800c9be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c9c2:	68fb      	ldr	r3, [r7, #12]
 800c9c4:	22ff      	movs	r2, #255	; 0xff
 800c9c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800c9ca:	683b      	ldr	r3, [r7, #0]
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d114      	bne.n	800c9fa <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	691b      	ldr	r3, [r3, #16]
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d01a      	beq.n	800ca0e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	3310      	adds	r3, #16
 800c9dc:	4618      	mov	r0, r3
 800c9de:	f001 fcd9 	bl	800e394 <xTaskRemoveFromEventList>
 800c9e2:	4603      	mov	r3, r0
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d012      	beq.n	800ca0e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c9e8:	4b0c      	ldr	r3, [pc, #48]	; (800ca1c <xQueueGenericReset+0xcc>)
 800c9ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c9ee:	601a      	str	r2, [r3, #0]
 800c9f0:	f3bf 8f4f 	dsb	sy
 800c9f4:	f3bf 8f6f 	isb	sy
 800c9f8:	e009      	b.n	800ca0e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c9fa:	68fb      	ldr	r3, [r7, #12]
 800c9fc:	3310      	adds	r3, #16
 800c9fe:	4618      	mov	r0, r3
 800ca00:	f7ff fef2 	bl	800c7e8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ca04:	68fb      	ldr	r3, [r7, #12]
 800ca06:	3324      	adds	r3, #36	; 0x24
 800ca08:	4618      	mov	r0, r3
 800ca0a:	f7ff feed 	bl	800c7e8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800ca0e:	f002 fdb1 	bl	800f574 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800ca12:	2301      	movs	r3, #1
}
 800ca14:	4618      	mov	r0, r3
 800ca16:	3710      	adds	r7, #16
 800ca18:	46bd      	mov	sp, r7
 800ca1a:	bd80      	pop	{r7, pc}
 800ca1c:	e000ed04 	.word	0xe000ed04

0800ca20 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800ca20:	b580      	push	{r7, lr}
 800ca22:	b08e      	sub	sp, #56	; 0x38
 800ca24:	af02      	add	r7, sp, #8
 800ca26:	60f8      	str	r0, [r7, #12]
 800ca28:	60b9      	str	r1, [r7, #8]
 800ca2a:	607a      	str	r2, [r7, #4]
 800ca2c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	d10a      	bne.n	800ca4a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800ca34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca38:	f383 8811 	msr	BASEPRI, r3
 800ca3c:	f3bf 8f6f 	isb	sy
 800ca40:	f3bf 8f4f 	dsb	sy
 800ca44:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ca46:	bf00      	nop
 800ca48:	e7fe      	b.n	800ca48 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800ca4a:	683b      	ldr	r3, [r7, #0]
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d10a      	bne.n	800ca66 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800ca50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca54:	f383 8811 	msr	BASEPRI, r3
 800ca58:	f3bf 8f6f 	isb	sy
 800ca5c:	f3bf 8f4f 	dsb	sy
 800ca60:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ca62:	bf00      	nop
 800ca64:	e7fe      	b.n	800ca64 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d002      	beq.n	800ca72 <xQueueGenericCreateStatic+0x52>
 800ca6c:	68bb      	ldr	r3, [r7, #8]
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d001      	beq.n	800ca76 <xQueueGenericCreateStatic+0x56>
 800ca72:	2301      	movs	r3, #1
 800ca74:	e000      	b.n	800ca78 <xQueueGenericCreateStatic+0x58>
 800ca76:	2300      	movs	r3, #0
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d10a      	bne.n	800ca92 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800ca7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca80:	f383 8811 	msr	BASEPRI, r3
 800ca84:	f3bf 8f6f 	isb	sy
 800ca88:	f3bf 8f4f 	dsb	sy
 800ca8c:	623b      	str	r3, [r7, #32]
}
 800ca8e:	bf00      	nop
 800ca90:	e7fe      	b.n	800ca90 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d102      	bne.n	800ca9e <xQueueGenericCreateStatic+0x7e>
 800ca98:	68bb      	ldr	r3, [r7, #8]
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d101      	bne.n	800caa2 <xQueueGenericCreateStatic+0x82>
 800ca9e:	2301      	movs	r3, #1
 800caa0:	e000      	b.n	800caa4 <xQueueGenericCreateStatic+0x84>
 800caa2:	2300      	movs	r3, #0
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d10a      	bne.n	800cabe <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800caa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800caac:	f383 8811 	msr	BASEPRI, r3
 800cab0:	f3bf 8f6f 	isb	sy
 800cab4:	f3bf 8f4f 	dsb	sy
 800cab8:	61fb      	str	r3, [r7, #28]
}
 800caba:	bf00      	nop
 800cabc:	e7fe      	b.n	800cabc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800cabe:	2350      	movs	r3, #80	; 0x50
 800cac0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800cac2:	697b      	ldr	r3, [r7, #20]
 800cac4:	2b50      	cmp	r3, #80	; 0x50
 800cac6:	d00a      	beq.n	800cade <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800cac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cacc:	f383 8811 	msr	BASEPRI, r3
 800cad0:	f3bf 8f6f 	isb	sy
 800cad4:	f3bf 8f4f 	dsb	sy
 800cad8:	61bb      	str	r3, [r7, #24]
}
 800cada:	bf00      	nop
 800cadc:	e7fe      	b.n	800cadc <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800cade:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cae0:	683b      	ldr	r3, [r7, #0]
 800cae2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800cae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d00d      	beq.n	800cb06 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800caea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800caec:	2201      	movs	r2, #1
 800caee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800caf2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800caf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800caf8:	9300      	str	r3, [sp, #0]
 800cafa:	4613      	mov	r3, r2
 800cafc:	687a      	ldr	r2, [r7, #4]
 800cafe:	68b9      	ldr	r1, [r7, #8]
 800cb00:	68f8      	ldr	r0, [r7, #12]
 800cb02:	f000 f83f 	bl	800cb84 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800cb06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800cb08:	4618      	mov	r0, r3
 800cb0a:	3730      	adds	r7, #48	; 0x30
 800cb0c:	46bd      	mov	sp, r7
 800cb0e:	bd80      	pop	{r7, pc}

0800cb10 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800cb10:	b580      	push	{r7, lr}
 800cb12:	b08a      	sub	sp, #40	; 0x28
 800cb14:	af02      	add	r7, sp, #8
 800cb16:	60f8      	str	r0, [r7, #12]
 800cb18:	60b9      	str	r1, [r7, #8]
 800cb1a:	4613      	mov	r3, r2
 800cb1c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d10a      	bne.n	800cb3a <xQueueGenericCreate+0x2a>
	__asm volatile
 800cb24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb28:	f383 8811 	msr	BASEPRI, r3
 800cb2c:	f3bf 8f6f 	isb	sy
 800cb30:	f3bf 8f4f 	dsb	sy
 800cb34:	613b      	str	r3, [r7, #16]
}
 800cb36:	bf00      	nop
 800cb38:	e7fe      	b.n	800cb38 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	68ba      	ldr	r2, [r7, #8]
 800cb3e:	fb02 f303 	mul.w	r3, r2, r3
 800cb42:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800cb44:	69fb      	ldr	r3, [r7, #28]
 800cb46:	3350      	adds	r3, #80	; 0x50
 800cb48:	4618      	mov	r0, r3
 800cb4a:	f002 fe05 	bl	800f758 <pvPortMalloc>
 800cb4e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800cb50:	69bb      	ldr	r3, [r7, #24]
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d011      	beq.n	800cb7a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800cb56:	69bb      	ldr	r3, [r7, #24]
 800cb58:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cb5a:	697b      	ldr	r3, [r7, #20]
 800cb5c:	3350      	adds	r3, #80	; 0x50
 800cb5e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800cb60:	69bb      	ldr	r3, [r7, #24]
 800cb62:	2200      	movs	r2, #0
 800cb64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800cb68:	79fa      	ldrb	r2, [r7, #7]
 800cb6a:	69bb      	ldr	r3, [r7, #24]
 800cb6c:	9300      	str	r3, [sp, #0]
 800cb6e:	4613      	mov	r3, r2
 800cb70:	697a      	ldr	r2, [r7, #20]
 800cb72:	68b9      	ldr	r1, [r7, #8]
 800cb74:	68f8      	ldr	r0, [r7, #12]
 800cb76:	f000 f805 	bl	800cb84 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800cb7a:	69bb      	ldr	r3, [r7, #24]
	}
 800cb7c:	4618      	mov	r0, r3
 800cb7e:	3720      	adds	r7, #32
 800cb80:	46bd      	mov	sp, r7
 800cb82:	bd80      	pop	{r7, pc}

0800cb84 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800cb84:	b580      	push	{r7, lr}
 800cb86:	b084      	sub	sp, #16
 800cb88:	af00      	add	r7, sp, #0
 800cb8a:	60f8      	str	r0, [r7, #12]
 800cb8c:	60b9      	str	r1, [r7, #8]
 800cb8e:	607a      	str	r2, [r7, #4]
 800cb90:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800cb92:	68bb      	ldr	r3, [r7, #8]
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d103      	bne.n	800cba0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800cb98:	69bb      	ldr	r3, [r7, #24]
 800cb9a:	69ba      	ldr	r2, [r7, #24]
 800cb9c:	601a      	str	r2, [r3, #0]
 800cb9e:	e002      	b.n	800cba6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800cba0:	69bb      	ldr	r3, [r7, #24]
 800cba2:	687a      	ldr	r2, [r7, #4]
 800cba4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800cba6:	69bb      	ldr	r3, [r7, #24]
 800cba8:	68fa      	ldr	r2, [r7, #12]
 800cbaa:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800cbac:	69bb      	ldr	r3, [r7, #24]
 800cbae:	68ba      	ldr	r2, [r7, #8]
 800cbb0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800cbb2:	2101      	movs	r1, #1
 800cbb4:	69b8      	ldr	r0, [r7, #24]
 800cbb6:	f7ff fecb 	bl	800c950 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800cbba:	69bb      	ldr	r3, [r7, #24]
 800cbbc:	78fa      	ldrb	r2, [r7, #3]
 800cbbe:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800cbc2:	bf00      	nop
 800cbc4:	3710      	adds	r7, #16
 800cbc6:	46bd      	mov	sp, r7
 800cbc8:	bd80      	pop	{r7, pc}

0800cbca <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800cbca:	b580      	push	{r7, lr}
 800cbcc:	b082      	sub	sp, #8
 800cbce:	af00      	add	r7, sp, #0
 800cbd0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	d00e      	beq.n	800cbf6 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	2200      	movs	r2, #0
 800cbdc:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	2200      	movs	r2, #0
 800cbe2:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	2200      	movs	r2, #0
 800cbe8:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800cbea:	2300      	movs	r3, #0
 800cbec:	2200      	movs	r2, #0
 800cbee:	2100      	movs	r1, #0
 800cbf0:	6878      	ldr	r0, [r7, #4]
 800cbf2:	f000 f8a1 	bl	800cd38 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800cbf6:	bf00      	nop
 800cbf8:	3708      	adds	r7, #8
 800cbfa:	46bd      	mov	sp, r7
 800cbfc:	bd80      	pop	{r7, pc}

0800cbfe <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800cbfe:	b580      	push	{r7, lr}
 800cc00:	b086      	sub	sp, #24
 800cc02:	af00      	add	r7, sp, #0
 800cc04:	4603      	mov	r3, r0
 800cc06:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800cc08:	2301      	movs	r3, #1
 800cc0a:	617b      	str	r3, [r7, #20]
 800cc0c:	2300      	movs	r3, #0
 800cc0e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800cc10:	79fb      	ldrb	r3, [r7, #7]
 800cc12:	461a      	mov	r2, r3
 800cc14:	6939      	ldr	r1, [r7, #16]
 800cc16:	6978      	ldr	r0, [r7, #20]
 800cc18:	f7ff ff7a 	bl	800cb10 <xQueueGenericCreate>
 800cc1c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800cc1e:	68f8      	ldr	r0, [r7, #12]
 800cc20:	f7ff ffd3 	bl	800cbca <prvInitialiseMutex>

		return xNewQueue;
 800cc24:	68fb      	ldr	r3, [r7, #12]
	}
 800cc26:	4618      	mov	r0, r3
 800cc28:	3718      	adds	r7, #24
 800cc2a:	46bd      	mov	sp, r7
 800cc2c:	bd80      	pop	{r7, pc}

0800cc2e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800cc2e:	b580      	push	{r7, lr}
 800cc30:	b088      	sub	sp, #32
 800cc32:	af02      	add	r7, sp, #8
 800cc34:	4603      	mov	r3, r0
 800cc36:	6039      	str	r1, [r7, #0]
 800cc38:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800cc3a:	2301      	movs	r3, #1
 800cc3c:	617b      	str	r3, [r7, #20]
 800cc3e:	2300      	movs	r3, #0
 800cc40:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800cc42:	79fb      	ldrb	r3, [r7, #7]
 800cc44:	9300      	str	r3, [sp, #0]
 800cc46:	683b      	ldr	r3, [r7, #0]
 800cc48:	2200      	movs	r2, #0
 800cc4a:	6939      	ldr	r1, [r7, #16]
 800cc4c:	6978      	ldr	r0, [r7, #20]
 800cc4e:	f7ff fee7 	bl	800ca20 <xQueueGenericCreateStatic>
 800cc52:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800cc54:	68f8      	ldr	r0, [r7, #12]
 800cc56:	f7ff ffb8 	bl	800cbca <prvInitialiseMutex>

		return xNewQueue;
 800cc5a:	68fb      	ldr	r3, [r7, #12]
	}
 800cc5c:	4618      	mov	r0, r3
 800cc5e:	3718      	adds	r7, #24
 800cc60:	46bd      	mov	sp, r7
 800cc62:	bd80      	pop	{r7, pc}

0800cc64 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800cc64:	b590      	push	{r4, r7, lr}
 800cc66:	b087      	sub	sp, #28
 800cc68:	af00      	add	r7, sp, #0
 800cc6a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800cc70:	693b      	ldr	r3, [r7, #16]
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d10a      	bne.n	800cc8c <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 800cc76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc7a:	f383 8811 	msr	BASEPRI, r3
 800cc7e:	f3bf 8f6f 	isb	sy
 800cc82:	f3bf 8f4f 	dsb	sy
 800cc86:	60fb      	str	r3, [r7, #12]
}
 800cc88:	bf00      	nop
 800cc8a:	e7fe      	b.n	800cc8a <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800cc8c:	693b      	ldr	r3, [r7, #16]
 800cc8e:	689c      	ldr	r4, [r3, #8]
 800cc90:	f001 fda0 	bl	800e7d4 <xTaskGetCurrentTaskHandle>
 800cc94:	4603      	mov	r3, r0
 800cc96:	429c      	cmp	r4, r3
 800cc98:	d111      	bne.n	800ccbe <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800cc9a:	693b      	ldr	r3, [r7, #16]
 800cc9c:	68db      	ldr	r3, [r3, #12]
 800cc9e:	1e5a      	subs	r2, r3, #1
 800cca0:	693b      	ldr	r3, [r7, #16]
 800cca2:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800cca4:	693b      	ldr	r3, [r7, #16]
 800cca6:	68db      	ldr	r3, [r3, #12]
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d105      	bne.n	800ccb8 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800ccac:	2300      	movs	r3, #0
 800ccae:	2200      	movs	r2, #0
 800ccb0:	2100      	movs	r1, #0
 800ccb2:	6938      	ldr	r0, [r7, #16]
 800ccb4:	f000 f840 	bl	800cd38 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800ccb8:	2301      	movs	r3, #1
 800ccba:	617b      	str	r3, [r7, #20]
 800ccbc:	e001      	b.n	800ccc2 <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800ccbe:	2300      	movs	r3, #0
 800ccc0:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800ccc2:	697b      	ldr	r3, [r7, #20]
	}
 800ccc4:	4618      	mov	r0, r3
 800ccc6:	371c      	adds	r7, #28
 800ccc8:	46bd      	mov	sp, r7
 800ccca:	bd90      	pop	{r4, r7, pc}

0800cccc <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800cccc:	b590      	push	{r4, r7, lr}
 800ccce:	b087      	sub	sp, #28
 800ccd0:	af00      	add	r7, sp, #0
 800ccd2:	6078      	str	r0, [r7, #4]
 800ccd4:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800ccda:	693b      	ldr	r3, [r7, #16]
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d10a      	bne.n	800ccf6 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 800cce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cce4:	f383 8811 	msr	BASEPRI, r3
 800cce8:	f3bf 8f6f 	isb	sy
 800ccec:	f3bf 8f4f 	dsb	sy
 800ccf0:	60fb      	str	r3, [r7, #12]
}
 800ccf2:	bf00      	nop
 800ccf4:	e7fe      	b.n	800ccf4 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800ccf6:	693b      	ldr	r3, [r7, #16]
 800ccf8:	689c      	ldr	r4, [r3, #8]
 800ccfa:	f001 fd6b 	bl	800e7d4 <xTaskGetCurrentTaskHandle>
 800ccfe:	4603      	mov	r3, r0
 800cd00:	429c      	cmp	r4, r3
 800cd02:	d107      	bne.n	800cd14 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800cd04:	693b      	ldr	r3, [r7, #16]
 800cd06:	68db      	ldr	r3, [r3, #12]
 800cd08:	1c5a      	adds	r2, r3, #1
 800cd0a:	693b      	ldr	r3, [r7, #16]
 800cd0c:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800cd0e:	2301      	movs	r3, #1
 800cd10:	617b      	str	r3, [r7, #20]
 800cd12:	e00c      	b.n	800cd2e <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800cd14:	6839      	ldr	r1, [r7, #0]
 800cd16:	6938      	ldr	r0, [r7, #16]
 800cd18:	f000 fa88 	bl	800d22c <xQueueSemaphoreTake>
 800cd1c:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800cd1e:	697b      	ldr	r3, [r7, #20]
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d004      	beq.n	800cd2e <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800cd24:	693b      	ldr	r3, [r7, #16]
 800cd26:	68db      	ldr	r3, [r3, #12]
 800cd28:	1c5a      	adds	r2, r3, #1
 800cd2a:	693b      	ldr	r3, [r7, #16]
 800cd2c:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800cd2e:	697b      	ldr	r3, [r7, #20]
	}
 800cd30:	4618      	mov	r0, r3
 800cd32:	371c      	adds	r7, #28
 800cd34:	46bd      	mov	sp, r7
 800cd36:	bd90      	pop	{r4, r7, pc}

0800cd38 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800cd38:	b580      	push	{r7, lr}
 800cd3a:	b08e      	sub	sp, #56	; 0x38
 800cd3c:	af00      	add	r7, sp, #0
 800cd3e:	60f8      	str	r0, [r7, #12]
 800cd40:	60b9      	str	r1, [r7, #8]
 800cd42:	607a      	str	r2, [r7, #4]
 800cd44:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800cd46:	2300      	movs	r3, #0
 800cd48:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cd4a:	68fb      	ldr	r3, [r7, #12]
 800cd4c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800cd4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d10a      	bne.n	800cd6a <xQueueGenericSend+0x32>
	__asm volatile
 800cd54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd58:	f383 8811 	msr	BASEPRI, r3
 800cd5c:	f3bf 8f6f 	isb	sy
 800cd60:	f3bf 8f4f 	dsb	sy
 800cd64:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800cd66:	bf00      	nop
 800cd68:	e7fe      	b.n	800cd68 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cd6a:	68bb      	ldr	r3, [r7, #8]
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d103      	bne.n	800cd78 <xQueueGenericSend+0x40>
 800cd70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d101      	bne.n	800cd7c <xQueueGenericSend+0x44>
 800cd78:	2301      	movs	r3, #1
 800cd7a:	e000      	b.n	800cd7e <xQueueGenericSend+0x46>
 800cd7c:	2300      	movs	r3, #0
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d10a      	bne.n	800cd98 <xQueueGenericSend+0x60>
	__asm volatile
 800cd82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd86:	f383 8811 	msr	BASEPRI, r3
 800cd8a:	f3bf 8f6f 	isb	sy
 800cd8e:	f3bf 8f4f 	dsb	sy
 800cd92:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cd94:	bf00      	nop
 800cd96:	e7fe      	b.n	800cd96 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cd98:	683b      	ldr	r3, [r7, #0]
 800cd9a:	2b02      	cmp	r3, #2
 800cd9c:	d103      	bne.n	800cda6 <xQueueGenericSend+0x6e>
 800cd9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cda0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cda2:	2b01      	cmp	r3, #1
 800cda4:	d101      	bne.n	800cdaa <xQueueGenericSend+0x72>
 800cda6:	2301      	movs	r3, #1
 800cda8:	e000      	b.n	800cdac <xQueueGenericSend+0x74>
 800cdaa:	2300      	movs	r3, #0
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d10a      	bne.n	800cdc6 <xQueueGenericSend+0x8e>
	__asm volatile
 800cdb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdb4:	f383 8811 	msr	BASEPRI, r3
 800cdb8:	f3bf 8f6f 	isb	sy
 800cdbc:	f3bf 8f4f 	dsb	sy
 800cdc0:	623b      	str	r3, [r7, #32]
}
 800cdc2:	bf00      	nop
 800cdc4:	e7fe      	b.n	800cdc4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cdc6:	f001 fd15 	bl	800e7f4 <xTaskGetSchedulerState>
 800cdca:	4603      	mov	r3, r0
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d102      	bne.n	800cdd6 <xQueueGenericSend+0x9e>
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d101      	bne.n	800cdda <xQueueGenericSend+0xa2>
 800cdd6:	2301      	movs	r3, #1
 800cdd8:	e000      	b.n	800cddc <xQueueGenericSend+0xa4>
 800cdda:	2300      	movs	r3, #0
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d10a      	bne.n	800cdf6 <xQueueGenericSend+0xbe>
	__asm volatile
 800cde0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cde4:	f383 8811 	msr	BASEPRI, r3
 800cde8:	f3bf 8f6f 	isb	sy
 800cdec:	f3bf 8f4f 	dsb	sy
 800cdf0:	61fb      	str	r3, [r7, #28]
}
 800cdf2:	bf00      	nop
 800cdf4:	e7fe      	b.n	800cdf4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cdf6:	f002 fb8d 	bl	800f514 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cdfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdfc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cdfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ce02:	429a      	cmp	r2, r3
 800ce04:	d302      	bcc.n	800ce0c <xQueueGenericSend+0xd4>
 800ce06:	683b      	ldr	r3, [r7, #0]
 800ce08:	2b02      	cmp	r3, #2
 800ce0a:	d129      	bne.n	800ce60 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ce0c:	683a      	ldr	r2, [r7, #0]
 800ce0e:	68b9      	ldr	r1, [r7, #8]
 800ce10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ce12:	f000 fbaf 	bl	800d574 <prvCopyDataToQueue>
 800ce16:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ce18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d010      	beq.n	800ce42 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ce20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce22:	3324      	adds	r3, #36	; 0x24
 800ce24:	4618      	mov	r0, r3
 800ce26:	f001 fab5 	bl	800e394 <xTaskRemoveFromEventList>
 800ce2a:	4603      	mov	r3, r0
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	d013      	beq.n	800ce58 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ce30:	4b3f      	ldr	r3, [pc, #252]	; (800cf30 <xQueueGenericSend+0x1f8>)
 800ce32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ce36:	601a      	str	r2, [r3, #0]
 800ce38:	f3bf 8f4f 	dsb	sy
 800ce3c:	f3bf 8f6f 	isb	sy
 800ce40:	e00a      	b.n	800ce58 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ce42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d007      	beq.n	800ce58 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ce48:	4b39      	ldr	r3, [pc, #228]	; (800cf30 <xQueueGenericSend+0x1f8>)
 800ce4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ce4e:	601a      	str	r2, [r3, #0]
 800ce50:	f3bf 8f4f 	dsb	sy
 800ce54:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ce58:	f002 fb8c 	bl	800f574 <vPortExitCritical>
				return pdPASS;
 800ce5c:	2301      	movs	r3, #1
 800ce5e:	e063      	b.n	800cf28 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	d103      	bne.n	800ce6e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ce66:	f002 fb85 	bl	800f574 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ce6a:	2300      	movs	r3, #0
 800ce6c:	e05c      	b.n	800cf28 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ce6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	d106      	bne.n	800ce82 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ce74:	f107 0314 	add.w	r3, r7, #20
 800ce78:	4618      	mov	r0, r3
 800ce7a:	f001 fb51 	bl	800e520 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ce7e:	2301      	movs	r3, #1
 800ce80:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ce82:	f002 fb77 	bl	800f574 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ce86:	f001 f825 	bl	800ded4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ce8a:	f002 fb43 	bl	800f514 <vPortEnterCritical>
 800ce8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce90:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ce94:	b25b      	sxtb	r3, r3
 800ce96:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce9a:	d103      	bne.n	800cea4 <xQueueGenericSend+0x16c>
 800ce9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce9e:	2200      	movs	r2, #0
 800cea0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cea6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ceaa:	b25b      	sxtb	r3, r3
 800ceac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ceb0:	d103      	bne.n	800ceba <xQueueGenericSend+0x182>
 800ceb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ceb4:	2200      	movs	r2, #0
 800ceb6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ceba:	f002 fb5b 	bl	800f574 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cebe:	1d3a      	adds	r2, r7, #4
 800cec0:	f107 0314 	add.w	r3, r7, #20
 800cec4:	4611      	mov	r1, r2
 800cec6:	4618      	mov	r0, r3
 800cec8:	f001 fb40 	bl	800e54c <xTaskCheckForTimeOut>
 800cecc:	4603      	mov	r3, r0
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d124      	bne.n	800cf1c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ced2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ced4:	f000 fc46 	bl	800d764 <prvIsQueueFull>
 800ced8:	4603      	mov	r3, r0
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	d018      	beq.n	800cf10 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800cede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cee0:	3310      	adds	r3, #16
 800cee2:	687a      	ldr	r2, [r7, #4]
 800cee4:	4611      	mov	r1, r2
 800cee6:	4618      	mov	r0, r3
 800cee8:	f001 f9c8 	bl	800e27c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800ceec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ceee:	f000 fbd1 	bl	800d694 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800cef2:	f000 fffd 	bl	800def0 <xTaskResumeAll>
 800cef6:	4603      	mov	r3, r0
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	f47f af7c 	bne.w	800cdf6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800cefe:	4b0c      	ldr	r3, [pc, #48]	; (800cf30 <xQueueGenericSend+0x1f8>)
 800cf00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cf04:	601a      	str	r2, [r3, #0]
 800cf06:	f3bf 8f4f 	dsb	sy
 800cf0a:	f3bf 8f6f 	isb	sy
 800cf0e:	e772      	b.n	800cdf6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800cf10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cf12:	f000 fbbf 	bl	800d694 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cf16:	f000 ffeb 	bl	800def0 <xTaskResumeAll>
 800cf1a:	e76c      	b.n	800cdf6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800cf1c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cf1e:	f000 fbb9 	bl	800d694 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cf22:	f000 ffe5 	bl	800def0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800cf26:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800cf28:	4618      	mov	r0, r3
 800cf2a:	3738      	adds	r7, #56	; 0x38
 800cf2c:	46bd      	mov	sp, r7
 800cf2e:	bd80      	pop	{r7, pc}
 800cf30:	e000ed04 	.word	0xe000ed04

0800cf34 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800cf34:	b580      	push	{r7, lr}
 800cf36:	b090      	sub	sp, #64	; 0x40
 800cf38:	af00      	add	r7, sp, #0
 800cf3a:	60f8      	str	r0, [r7, #12]
 800cf3c:	60b9      	str	r1, [r7, #8]
 800cf3e:	607a      	str	r2, [r7, #4]
 800cf40:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800cf42:	68fb      	ldr	r3, [r7, #12]
 800cf44:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800cf46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d10a      	bne.n	800cf62 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800cf4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf50:	f383 8811 	msr	BASEPRI, r3
 800cf54:	f3bf 8f6f 	isb	sy
 800cf58:	f3bf 8f4f 	dsb	sy
 800cf5c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800cf5e:	bf00      	nop
 800cf60:	e7fe      	b.n	800cf60 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cf62:	68bb      	ldr	r3, [r7, #8]
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d103      	bne.n	800cf70 <xQueueGenericSendFromISR+0x3c>
 800cf68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	d101      	bne.n	800cf74 <xQueueGenericSendFromISR+0x40>
 800cf70:	2301      	movs	r3, #1
 800cf72:	e000      	b.n	800cf76 <xQueueGenericSendFromISR+0x42>
 800cf74:	2300      	movs	r3, #0
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d10a      	bne.n	800cf90 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800cf7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf7e:	f383 8811 	msr	BASEPRI, r3
 800cf82:	f3bf 8f6f 	isb	sy
 800cf86:	f3bf 8f4f 	dsb	sy
 800cf8a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cf8c:	bf00      	nop
 800cf8e:	e7fe      	b.n	800cf8e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cf90:	683b      	ldr	r3, [r7, #0]
 800cf92:	2b02      	cmp	r3, #2
 800cf94:	d103      	bne.n	800cf9e <xQueueGenericSendFromISR+0x6a>
 800cf96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf9a:	2b01      	cmp	r3, #1
 800cf9c:	d101      	bne.n	800cfa2 <xQueueGenericSendFromISR+0x6e>
 800cf9e:	2301      	movs	r3, #1
 800cfa0:	e000      	b.n	800cfa4 <xQueueGenericSendFromISR+0x70>
 800cfa2:	2300      	movs	r3, #0
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d10a      	bne.n	800cfbe <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800cfa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfac:	f383 8811 	msr	BASEPRI, r3
 800cfb0:	f3bf 8f6f 	isb	sy
 800cfb4:	f3bf 8f4f 	dsb	sy
 800cfb8:	623b      	str	r3, [r7, #32]
}
 800cfba:	bf00      	nop
 800cfbc:	e7fe      	b.n	800cfbc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cfbe:	f002 fb8b 	bl	800f6d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800cfc2:	f3ef 8211 	mrs	r2, BASEPRI
 800cfc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfca:	f383 8811 	msr	BASEPRI, r3
 800cfce:	f3bf 8f6f 	isb	sy
 800cfd2:	f3bf 8f4f 	dsb	sy
 800cfd6:	61fa      	str	r2, [r7, #28]
 800cfd8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800cfda:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cfdc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cfde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfe0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cfe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfe4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cfe6:	429a      	cmp	r2, r3
 800cfe8:	d302      	bcc.n	800cff0 <xQueueGenericSendFromISR+0xbc>
 800cfea:	683b      	ldr	r3, [r7, #0]
 800cfec:	2b02      	cmp	r3, #2
 800cfee:	d12f      	bne.n	800d050 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800cff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cff2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cff6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cffc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cffe:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d000:	683a      	ldr	r2, [r7, #0]
 800d002:	68b9      	ldr	r1, [r7, #8]
 800d004:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d006:	f000 fab5 	bl	800d574 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d00a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800d00e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d012:	d112      	bne.n	800d03a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d018:	2b00      	cmp	r3, #0
 800d01a:	d016      	beq.n	800d04a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d01c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d01e:	3324      	adds	r3, #36	; 0x24
 800d020:	4618      	mov	r0, r3
 800d022:	f001 f9b7 	bl	800e394 <xTaskRemoveFromEventList>
 800d026:	4603      	mov	r3, r0
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d00e      	beq.n	800d04a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d00b      	beq.n	800d04a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	2201      	movs	r2, #1
 800d036:	601a      	str	r2, [r3, #0]
 800d038:	e007      	b.n	800d04a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d03a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d03e:	3301      	adds	r3, #1
 800d040:	b2db      	uxtb	r3, r3
 800d042:	b25a      	sxtb	r2, r3
 800d044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d046:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d04a:	2301      	movs	r3, #1
 800d04c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800d04e:	e001      	b.n	800d054 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d050:	2300      	movs	r3, #0
 800d052:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d054:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d056:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d058:	697b      	ldr	r3, [r7, #20]
 800d05a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800d05e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d060:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800d062:	4618      	mov	r0, r3
 800d064:	3740      	adds	r7, #64	; 0x40
 800d066:	46bd      	mov	sp, r7
 800d068:	bd80      	pop	{r7, pc}
	...

0800d06c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d06c:	b580      	push	{r7, lr}
 800d06e:	b08c      	sub	sp, #48	; 0x30
 800d070:	af00      	add	r7, sp, #0
 800d072:	60f8      	str	r0, [r7, #12]
 800d074:	60b9      	str	r1, [r7, #8]
 800d076:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d078:	2300      	movs	r3, #0
 800d07a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d07c:	68fb      	ldr	r3, [r7, #12]
 800d07e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d082:	2b00      	cmp	r3, #0
 800d084:	d10a      	bne.n	800d09c <xQueueReceive+0x30>
	__asm volatile
 800d086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d08a:	f383 8811 	msr	BASEPRI, r3
 800d08e:	f3bf 8f6f 	isb	sy
 800d092:	f3bf 8f4f 	dsb	sy
 800d096:	623b      	str	r3, [r7, #32]
}
 800d098:	bf00      	nop
 800d09a:	e7fe      	b.n	800d09a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d09c:	68bb      	ldr	r3, [r7, #8]
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d103      	bne.n	800d0aa <xQueueReceive+0x3e>
 800d0a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d101      	bne.n	800d0ae <xQueueReceive+0x42>
 800d0aa:	2301      	movs	r3, #1
 800d0ac:	e000      	b.n	800d0b0 <xQueueReceive+0x44>
 800d0ae:	2300      	movs	r3, #0
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d10a      	bne.n	800d0ca <xQueueReceive+0x5e>
	__asm volatile
 800d0b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0b8:	f383 8811 	msr	BASEPRI, r3
 800d0bc:	f3bf 8f6f 	isb	sy
 800d0c0:	f3bf 8f4f 	dsb	sy
 800d0c4:	61fb      	str	r3, [r7, #28]
}
 800d0c6:	bf00      	nop
 800d0c8:	e7fe      	b.n	800d0c8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d0ca:	f001 fb93 	bl	800e7f4 <xTaskGetSchedulerState>
 800d0ce:	4603      	mov	r3, r0
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d102      	bne.n	800d0da <xQueueReceive+0x6e>
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d101      	bne.n	800d0de <xQueueReceive+0x72>
 800d0da:	2301      	movs	r3, #1
 800d0dc:	e000      	b.n	800d0e0 <xQueueReceive+0x74>
 800d0de:	2300      	movs	r3, #0
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	d10a      	bne.n	800d0fa <xQueueReceive+0x8e>
	__asm volatile
 800d0e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0e8:	f383 8811 	msr	BASEPRI, r3
 800d0ec:	f3bf 8f6f 	isb	sy
 800d0f0:	f3bf 8f4f 	dsb	sy
 800d0f4:	61bb      	str	r3, [r7, #24]
}
 800d0f6:	bf00      	nop
 800d0f8:	e7fe      	b.n	800d0f8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d0fa:	f002 fa0b 	bl	800f514 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d0fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d102:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d106:	2b00      	cmp	r3, #0
 800d108:	d01f      	beq.n	800d14a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d10a:	68b9      	ldr	r1, [r7, #8]
 800d10c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d10e:	f000 fa9b 	bl	800d648 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d114:	1e5a      	subs	r2, r3, #1
 800d116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d118:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d11a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d11c:	691b      	ldr	r3, [r3, #16]
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d00f      	beq.n	800d142 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d124:	3310      	adds	r3, #16
 800d126:	4618      	mov	r0, r3
 800d128:	f001 f934 	bl	800e394 <xTaskRemoveFromEventList>
 800d12c:	4603      	mov	r3, r0
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d007      	beq.n	800d142 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d132:	4b3d      	ldr	r3, [pc, #244]	; (800d228 <xQueueReceive+0x1bc>)
 800d134:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d138:	601a      	str	r2, [r3, #0]
 800d13a:	f3bf 8f4f 	dsb	sy
 800d13e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d142:	f002 fa17 	bl	800f574 <vPortExitCritical>
				return pdPASS;
 800d146:	2301      	movs	r3, #1
 800d148:	e069      	b.n	800d21e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d103      	bne.n	800d158 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d150:	f002 fa10 	bl	800f574 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d154:	2300      	movs	r3, #0
 800d156:	e062      	b.n	800d21e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	d106      	bne.n	800d16c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d15e:	f107 0310 	add.w	r3, r7, #16
 800d162:	4618      	mov	r0, r3
 800d164:	f001 f9dc 	bl	800e520 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d168:	2301      	movs	r3, #1
 800d16a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d16c:	f002 fa02 	bl	800f574 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d170:	f000 feb0 	bl	800ded4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d174:	f002 f9ce 	bl	800f514 <vPortEnterCritical>
 800d178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d17a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d17e:	b25b      	sxtb	r3, r3
 800d180:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d184:	d103      	bne.n	800d18e <xQueueReceive+0x122>
 800d186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d188:	2200      	movs	r2, #0
 800d18a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d18e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d190:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d194:	b25b      	sxtb	r3, r3
 800d196:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d19a:	d103      	bne.n	800d1a4 <xQueueReceive+0x138>
 800d19c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d19e:	2200      	movs	r2, #0
 800d1a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d1a4:	f002 f9e6 	bl	800f574 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d1a8:	1d3a      	adds	r2, r7, #4
 800d1aa:	f107 0310 	add.w	r3, r7, #16
 800d1ae:	4611      	mov	r1, r2
 800d1b0:	4618      	mov	r0, r3
 800d1b2:	f001 f9cb 	bl	800e54c <xTaskCheckForTimeOut>
 800d1b6:	4603      	mov	r3, r0
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	d123      	bne.n	800d204 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d1bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d1be:	f000 fabb 	bl	800d738 <prvIsQueueEmpty>
 800d1c2:	4603      	mov	r3, r0
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d017      	beq.n	800d1f8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d1c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1ca:	3324      	adds	r3, #36	; 0x24
 800d1cc:	687a      	ldr	r2, [r7, #4]
 800d1ce:	4611      	mov	r1, r2
 800d1d0:	4618      	mov	r0, r3
 800d1d2:	f001 f853 	bl	800e27c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d1d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d1d8:	f000 fa5c 	bl	800d694 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d1dc:	f000 fe88 	bl	800def0 <xTaskResumeAll>
 800d1e0:	4603      	mov	r3, r0
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d189      	bne.n	800d0fa <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800d1e6:	4b10      	ldr	r3, [pc, #64]	; (800d228 <xQueueReceive+0x1bc>)
 800d1e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d1ec:	601a      	str	r2, [r3, #0]
 800d1ee:	f3bf 8f4f 	dsb	sy
 800d1f2:	f3bf 8f6f 	isb	sy
 800d1f6:	e780      	b.n	800d0fa <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d1f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d1fa:	f000 fa4b 	bl	800d694 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d1fe:	f000 fe77 	bl	800def0 <xTaskResumeAll>
 800d202:	e77a      	b.n	800d0fa <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d204:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d206:	f000 fa45 	bl	800d694 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d20a:	f000 fe71 	bl	800def0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d20e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d210:	f000 fa92 	bl	800d738 <prvIsQueueEmpty>
 800d214:	4603      	mov	r3, r0
 800d216:	2b00      	cmp	r3, #0
 800d218:	f43f af6f 	beq.w	800d0fa <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d21c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d21e:	4618      	mov	r0, r3
 800d220:	3730      	adds	r7, #48	; 0x30
 800d222:	46bd      	mov	sp, r7
 800d224:	bd80      	pop	{r7, pc}
 800d226:	bf00      	nop
 800d228:	e000ed04 	.word	0xe000ed04

0800d22c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800d22c:	b580      	push	{r7, lr}
 800d22e:	b08e      	sub	sp, #56	; 0x38
 800d230:	af00      	add	r7, sp, #0
 800d232:	6078      	str	r0, [r7, #4]
 800d234:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800d236:	2300      	movs	r3, #0
 800d238:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800d23e:	2300      	movs	r3, #0
 800d240:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d244:	2b00      	cmp	r3, #0
 800d246:	d10a      	bne.n	800d25e <xQueueSemaphoreTake+0x32>
	__asm volatile
 800d248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d24c:	f383 8811 	msr	BASEPRI, r3
 800d250:	f3bf 8f6f 	isb	sy
 800d254:	f3bf 8f4f 	dsb	sy
 800d258:	623b      	str	r3, [r7, #32]
}
 800d25a:	bf00      	nop
 800d25c:	e7fe      	b.n	800d25c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d25e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d262:	2b00      	cmp	r3, #0
 800d264:	d00a      	beq.n	800d27c <xQueueSemaphoreTake+0x50>
	__asm volatile
 800d266:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d26a:	f383 8811 	msr	BASEPRI, r3
 800d26e:	f3bf 8f6f 	isb	sy
 800d272:	f3bf 8f4f 	dsb	sy
 800d276:	61fb      	str	r3, [r7, #28]
}
 800d278:	bf00      	nop
 800d27a:	e7fe      	b.n	800d27a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d27c:	f001 faba 	bl	800e7f4 <xTaskGetSchedulerState>
 800d280:	4603      	mov	r3, r0
 800d282:	2b00      	cmp	r3, #0
 800d284:	d102      	bne.n	800d28c <xQueueSemaphoreTake+0x60>
 800d286:	683b      	ldr	r3, [r7, #0]
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d101      	bne.n	800d290 <xQueueSemaphoreTake+0x64>
 800d28c:	2301      	movs	r3, #1
 800d28e:	e000      	b.n	800d292 <xQueueSemaphoreTake+0x66>
 800d290:	2300      	movs	r3, #0
 800d292:	2b00      	cmp	r3, #0
 800d294:	d10a      	bne.n	800d2ac <xQueueSemaphoreTake+0x80>
	__asm volatile
 800d296:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d29a:	f383 8811 	msr	BASEPRI, r3
 800d29e:	f3bf 8f6f 	isb	sy
 800d2a2:	f3bf 8f4f 	dsb	sy
 800d2a6:	61bb      	str	r3, [r7, #24]
}
 800d2a8:	bf00      	nop
 800d2aa:	e7fe      	b.n	800d2aa <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d2ac:	f002 f932 	bl	800f514 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800d2b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d2b4:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800d2b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d024      	beq.n	800d306 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800d2bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2be:	1e5a      	subs	r2, r3, #1
 800d2c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2c2:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d2c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	d104      	bne.n	800d2d6 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800d2cc:	f001 fc20 	bl	800eb10 <pvTaskIncrementMutexHeldCount>
 800d2d0:	4602      	mov	r2, r0
 800d2d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2d4:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d2d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2d8:	691b      	ldr	r3, [r3, #16]
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d00f      	beq.n	800d2fe <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d2de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2e0:	3310      	adds	r3, #16
 800d2e2:	4618      	mov	r0, r3
 800d2e4:	f001 f856 	bl	800e394 <xTaskRemoveFromEventList>
 800d2e8:	4603      	mov	r3, r0
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	d007      	beq.n	800d2fe <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d2ee:	4b54      	ldr	r3, [pc, #336]	; (800d440 <xQueueSemaphoreTake+0x214>)
 800d2f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d2f4:	601a      	str	r2, [r3, #0]
 800d2f6:	f3bf 8f4f 	dsb	sy
 800d2fa:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d2fe:	f002 f939 	bl	800f574 <vPortExitCritical>
				return pdPASS;
 800d302:	2301      	movs	r3, #1
 800d304:	e097      	b.n	800d436 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d306:	683b      	ldr	r3, [r7, #0]
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d111      	bne.n	800d330 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800d30c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d00a      	beq.n	800d328 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800d312:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d316:	f383 8811 	msr	BASEPRI, r3
 800d31a:	f3bf 8f6f 	isb	sy
 800d31e:	f3bf 8f4f 	dsb	sy
 800d322:	617b      	str	r3, [r7, #20]
}
 800d324:	bf00      	nop
 800d326:	e7fe      	b.n	800d326 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800d328:	f002 f924 	bl	800f574 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d32c:	2300      	movs	r3, #0
 800d32e:	e082      	b.n	800d436 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d330:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d332:	2b00      	cmp	r3, #0
 800d334:	d106      	bne.n	800d344 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d336:	f107 030c 	add.w	r3, r7, #12
 800d33a:	4618      	mov	r0, r3
 800d33c:	f001 f8f0 	bl	800e520 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d340:	2301      	movs	r3, #1
 800d342:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d344:	f002 f916 	bl	800f574 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d348:	f000 fdc4 	bl	800ded4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d34c:	f002 f8e2 	bl	800f514 <vPortEnterCritical>
 800d350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d352:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d356:	b25b      	sxtb	r3, r3
 800d358:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d35c:	d103      	bne.n	800d366 <xQueueSemaphoreTake+0x13a>
 800d35e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d360:	2200      	movs	r2, #0
 800d362:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d368:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d36c:	b25b      	sxtb	r3, r3
 800d36e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d372:	d103      	bne.n	800d37c <xQueueSemaphoreTake+0x150>
 800d374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d376:	2200      	movs	r2, #0
 800d378:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d37c:	f002 f8fa 	bl	800f574 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d380:	463a      	mov	r2, r7
 800d382:	f107 030c 	add.w	r3, r7, #12
 800d386:	4611      	mov	r1, r2
 800d388:	4618      	mov	r0, r3
 800d38a:	f001 f8df 	bl	800e54c <xTaskCheckForTimeOut>
 800d38e:	4603      	mov	r3, r0
 800d390:	2b00      	cmp	r3, #0
 800d392:	d132      	bne.n	800d3fa <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d394:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d396:	f000 f9cf 	bl	800d738 <prvIsQueueEmpty>
 800d39a:	4603      	mov	r3, r0
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d026      	beq.n	800d3ee <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d3a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3a2:	681b      	ldr	r3, [r3, #0]
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	d109      	bne.n	800d3bc <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800d3a8:	f002 f8b4 	bl	800f514 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d3ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3ae:	689b      	ldr	r3, [r3, #8]
 800d3b0:	4618      	mov	r0, r3
 800d3b2:	f001 fa3d 	bl	800e830 <xTaskPriorityInherit>
 800d3b6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800d3b8:	f002 f8dc 	bl	800f574 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d3bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3be:	3324      	adds	r3, #36	; 0x24
 800d3c0:	683a      	ldr	r2, [r7, #0]
 800d3c2:	4611      	mov	r1, r2
 800d3c4:	4618      	mov	r0, r3
 800d3c6:	f000 ff59 	bl	800e27c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d3ca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d3cc:	f000 f962 	bl	800d694 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d3d0:	f000 fd8e 	bl	800def0 <xTaskResumeAll>
 800d3d4:	4603      	mov	r3, r0
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	f47f af68 	bne.w	800d2ac <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800d3dc:	4b18      	ldr	r3, [pc, #96]	; (800d440 <xQueueSemaphoreTake+0x214>)
 800d3de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d3e2:	601a      	str	r2, [r3, #0]
 800d3e4:	f3bf 8f4f 	dsb	sy
 800d3e8:	f3bf 8f6f 	isb	sy
 800d3ec:	e75e      	b.n	800d2ac <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800d3ee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d3f0:	f000 f950 	bl	800d694 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d3f4:	f000 fd7c 	bl	800def0 <xTaskResumeAll>
 800d3f8:	e758      	b.n	800d2ac <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800d3fa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d3fc:	f000 f94a 	bl	800d694 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d400:	f000 fd76 	bl	800def0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d404:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d406:	f000 f997 	bl	800d738 <prvIsQueueEmpty>
 800d40a:	4603      	mov	r3, r0
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	f43f af4d 	beq.w	800d2ac <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800d412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d414:	2b00      	cmp	r3, #0
 800d416:	d00d      	beq.n	800d434 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800d418:	f002 f87c 	bl	800f514 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800d41c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d41e:	f000 f891 	bl	800d544 <prvGetDisinheritPriorityAfterTimeout>
 800d422:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800d424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d426:	689b      	ldr	r3, [r3, #8]
 800d428:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d42a:	4618      	mov	r0, r3
 800d42c:	f001 fad6 	bl	800e9dc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800d430:	f002 f8a0 	bl	800f574 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d434:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d436:	4618      	mov	r0, r3
 800d438:	3738      	adds	r7, #56	; 0x38
 800d43a:	46bd      	mov	sp, r7
 800d43c:	bd80      	pop	{r7, pc}
 800d43e:	bf00      	nop
 800d440:	e000ed04 	.word	0xe000ed04

0800d444 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d444:	b580      	push	{r7, lr}
 800d446:	b08e      	sub	sp, #56	; 0x38
 800d448:	af00      	add	r7, sp, #0
 800d44a:	60f8      	str	r0, [r7, #12]
 800d44c:	60b9      	str	r1, [r7, #8]
 800d44e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d450:	68fb      	ldr	r3, [r7, #12]
 800d452:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d456:	2b00      	cmp	r3, #0
 800d458:	d10a      	bne.n	800d470 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800d45a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d45e:	f383 8811 	msr	BASEPRI, r3
 800d462:	f3bf 8f6f 	isb	sy
 800d466:	f3bf 8f4f 	dsb	sy
 800d46a:	623b      	str	r3, [r7, #32]
}
 800d46c:	bf00      	nop
 800d46e:	e7fe      	b.n	800d46e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d470:	68bb      	ldr	r3, [r7, #8]
 800d472:	2b00      	cmp	r3, #0
 800d474:	d103      	bne.n	800d47e <xQueueReceiveFromISR+0x3a>
 800d476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	d101      	bne.n	800d482 <xQueueReceiveFromISR+0x3e>
 800d47e:	2301      	movs	r3, #1
 800d480:	e000      	b.n	800d484 <xQueueReceiveFromISR+0x40>
 800d482:	2300      	movs	r3, #0
 800d484:	2b00      	cmp	r3, #0
 800d486:	d10a      	bne.n	800d49e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800d488:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d48c:	f383 8811 	msr	BASEPRI, r3
 800d490:	f3bf 8f6f 	isb	sy
 800d494:	f3bf 8f4f 	dsb	sy
 800d498:	61fb      	str	r3, [r7, #28]
}
 800d49a:	bf00      	nop
 800d49c:	e7fe      	b.n	800d49c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d49e:	f002 f91b 	bl	800f6d8 <vPortValidateInterruptPriority>
	__asm volatile
 800d4a2:	f3ef 8211 	mrs	r2, BASEPRI
 800d4a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4aa:	f383 8811 	msr	BASEPRI, r3
 800d4ae:	f3bf 8f6f 	isb	sy
 800d4b2:	f3bf 8f4f 	dsb	sy
 800d4b6:	61ba      	str	r2, [r7, #24]
 800d4b8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800d4ba:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d4bc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d4be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4c2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d4c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d02f      	beq.n	800d52a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800d4ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4cc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d4d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d4d4:	68b9      	ldr	r1, [r7, #8]
 800d4d6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d4d8:	f000 f8b6 	bl	800d648 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d4dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4de:	1e5a      	subs	r2, r3, #1
 800d4e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4e2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800d4e4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d4e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4ec:	d112      	bne.n	800d514 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d4ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4f0:	691b      	ldr	r3, [r3, #16]
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	d016      	beq.n	800d524 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d4f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4f8:	3310      	adds	r3, #16
 800d4fa:	4618      	mov	r0, r3
 800d4fc:	f000 ff4a 	bl	800e394 <xTaskRemoveFromEventList>
 800d500:	4603      	mov	r3, r0
 800d502:	2b00      	cmp	r3, #0
 800d504:	d00e      	beq.n	800d524 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	2b00      	cmp	r3, #0
 800d50a:	d00b      	beq.n	800d524 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	2201      	movs	r2, #1
 800d510:	601a      	str	r2, [r3, #0]
 800d512:	e007      	b.n	800d524 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800d514:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d518:	3301      	adds	r3, #1
 800d51a:	b2db      	uxtb	r3, r3
 800d51c:	b25a      	sxtb	r2, r3
 800d51e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d520:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800d524:	2301      	movs	r3, #1
 800d526:	637b      	str	r3, [r7, #52]	; 0x34
 800d528:	e001      	b.n	800d52e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800d52a:	2300      	movs	r3, #0
 800d52c:	637b      	str	r3, [r7, #52]	; 0x34
 800d52e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d530:	613b      	str	r3, [r7, #16]
	__asm volatile
 800d532:	693b      	ldr	r3, [r7, #16]
 800d534:	f383 8811 	msr	BASEPRI, r3
}
 800d538:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d53a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d53c:	4618      	mov	r0, r3
 800d53e:	3738      	adds	r7, #56	; 0x38
 800d540:	46bd      	mov	sp, r7
 800d542:	bd80      	pop	{r7, pc}

0800d544 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800d544:	b480      	push	{r7}
 800d546:	b085      	sub	sp, #20
 800d548:	af00      	add	r7, sp, #0
 800d54a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d550:	2b00      	cmp	r3, #0
 800d552:	d006      	beq.n	800d562 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d558:	681b      	ldr	r3, [r3, #0]
 800d55a:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800d55e:	60fb      	str	r3, [r7, #12]
 800d560:	e001      	b.n	800d566 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800d562:	2300      	movs	r3, #0
 800d564:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800d566:	68fb      	ldr	r3, [r7, #12]
	}
 800d568:	4618      	mov	r0, r3
 800d56a:	3714      	adds	r7, #20
 800d56c:	46bd      	mov	sp, r7
 800d56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d572:	4770      	bx	lr

0800d574 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d574:	b580      	push	{r7, lr}
 800d576:	b086      	sub	sp, #24
 800d578:	af00      	add	r7, sp, #0
 800d57a:	60f8      	str	r0, [r7, #12]
 800d57c:	60b9      	str	r1, [r7, #8]
 800d57e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d580:	2300      	movs	r3, #0
 800d582:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d584:	68fb      	ldr	r3, [r7, #12]
 800d586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d588:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d58a:	68fb      	ldr	r3, [r7, #12]
 800d58c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d58e:	2b00      	cmp	r3, #0
 800d590:	d10d      	bne.n	800d5ae <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d592:	68fb      	ldr	r3, [r7, #12]
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	2b00      	cmp	r3, #0
 800d598:	d14d      	bne.n	800d636 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d59a:	68fb      	ldr	r3, [r7, #12]
 800d59c:	689b      	ldr	r3, [r3, #8]
 800d59e:	4618      	mov	r0, r3
 800d5a0:	f001 f9ae 	bl	800e900 <xTaskPriorityDisinherit>
 800d5a4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d5a6:	68fb      	ldr	r3, [r7, #12]
 800d5a8:	2200      	movs	r2, #0
 800d5aa:	609a      	str	r2, [r3, #8]
 800d5ac:	e043      	b.n	800d636 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	d119      	bne.n	800d5e8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d5b4:	68fb      	ldr	r3, [r7, #12]
 800d5b6:	6858      	ldr	r0, [r3, #4]
 800d5b8:	68fb      	ldr	r3, [r7, #12]
 800d5ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5bc:	461a      	mov	r2, r3
 800d5be:	68b9      	ldr	r1, [r7, #8]
 800d5c0:	f002 fae6 	bl	800fb90 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d5c4:	68fb      	ldr	r3, [r7, #12]
 800d5c6:	685a      	ldr	r2, [r3, #4]
 800d5c8:	68fb      	ldr	r3, [r7, #12]
 800d5ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5cc:	441a      	add	r2, r3
 800d5ce:	68fb      	ldr	r3, [r7, #12]
 800d5d0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d5d2:	68fb      	ldr	r3, [r7, #12]
 800d5d4:	685a      	ldr	r2, [r3, #4]
 800d5d6:	68fb      	ldr	r3, [r7, #12]
 800d5d8:	689b      	ldr	r3, [r3, #8]
 800d5da:	429a      	cmp	r2, r3
 800d5dc:	d32b      	bcc.n	800d636 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d5de:	68fb      	ldr	r3, [r7, #12]
 800d5e0:	681a      	ldr	r2, [r3, #0]
 800d5e2:	68fb      	ldr	r3, [r7, #12]
 800d5e4:	605a      	str	r2, [r3, #4]
 800d5e6:	e026      	b.n	800d636 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d5e8:	68fb      	ldr	r3, [r7, #12]
 800d5ea:	68d8      	ldr	r0, [r3, #12]
 800d5ec:	68fb      	ldr	r3, [r7, #12]
 800d5ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5f0:	461a      	mov	r2, r3
 800d5f2:	68b9      	ldr	r1, [r7, #8]
 800d5f4:	f002 facc 	bl	800fb90 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d5f8:	68fb      	ldr	r3, [r7, #12]
 800d5fa:	68da      	ldr	r2, [r3, #12]
 800d5fc:	68fb      	ldr	r3, [r7, #12]
 800d5fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d600:	425b      	negs	r3, r3
 800d602:	441a      	add	r2, r3
 800d604:	68fb      	ldr	r3, [r7, #12]
 800d606:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d608:	68fb      	ldr	r3, [r7, #12]
 800d60a:	68da      	ldr	r2, [r3, #12]
 800d60c:	68fb      	ldr	r3, [r7, #12]
 800d60e:	681b      	ldr	r3, [r3, #0]
 800d610:	429a      	cmp	r2, r3
 800d612:	d207      	bcs.n	800d624 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d614:	68fb      	ldr	r3, [r7, #12]
 800d616:	689a      	ldr	r2, [r3, #8]
 800d618:	68fb      	ldr	r3, [r7, #12]
 800d61a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d61c:	425b      	negs	r3, r3
 800d61e:	441a      	add	r2, r3
 800d620:	68fb      	ldr	r3, [r7, #12]
 800d622:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	2b02      	cmp	r3, #2
 800d628:	d105      	bne.n	800d636 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d62a:	693b      	ldr	r3, [r7, #16]
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	d002      	beq.n	800d636 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d630:	693b      	ldr	r3, [r7, #16]
 800d632:	3b01      	subs	r3, #1
 800d634:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d636:	693b      	ldr	r3, [r7, #16]
 800d638:	1c5a      	adds	r2, r3, #1
 800d63a:	68fb      	ldr	r3, [r7, #12]
 800d63c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800d63e:	697b      	ldr	r3, [r7, #20]
}
 800d640:	4618      	mov	r0, r3
 800d642:	3718      	adds	r7, #24
 800d644:	46bd      	mov	sp, r7
 800d646:	bd80      	pop	{r7, pc}

0800d648 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d648:	b580      	push	{r7, lr}
 800d64a:	b082      	sub	sp, #8
 800d64c:	af00      	add	r7, sp, #0
 800d64e:	6078      	str	r0, [r7, #4]
 800d650:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d656:	2b00      	cmp	r3, #0
 800d658:	d018      	beq.n	800d68c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	68da      	ldr	r2, [r3, #12]
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d662:	441a      	add	r2, r3
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	68da      	ldr	r2, [r3, #12]
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	689b      	ldr	r3, [r3, #8]
 800d670:	429a      	cmp	r2, r3
 800d672:	d303      	bcc.n	800d67c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	681a      	ldr	r2, [r3, #0]
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	68d9      	ldr	r1, [r3, #12]
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d684:	461a      	mov	r2, r3
 800d686:	6838      	ldr	r0, [r7, #0]
 800d688:	f002 fa82 	bl	800fb90 <memcpy>
	}
}
 800d68c:	bf00      	nop
 800d68e:	3708      	adds	r7, #8
 800d690:	46bd      	mov	sp, r7
 800d692:	bd80      	pop	{r7, pc}

0800d694 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d694:	b580      	push	{r7, lr}
 800d696:	b084      	sub	sp, #16
 800d698:	af00      	add	r7, sp, #0
 800d69a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d69c:	f001 ff3a 	bl	800f514 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d6a6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d6a8:	e011      	b.n	800d6ce <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d012      	beq.n	800d6d8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	3324      	adds	r3, #36	; 0x24
 800d6b6:	4618      	mov	r0, r3
 800d6b8:	f000 fe6c 	bl	800e394 <xTaskRemoveFromEventList>
 800d6bc:	4603      	mov	r3, r0
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	d001      	beq.n	800d6c6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d6c2:	f000 ffa5 	bl	800e610 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d6c6:	7bfb      	ldrb	r3, [r7, #15]
 800d6c8:	3b01      	subs	r3, #1
 800d6ca:	b2db      	uxtb	r3, r3
 800d6cc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d6ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	dce9      	bgt.n	800d6aa <prvUnlockQueue+0x16>
 800d6d6:	e000      	b.n	800d6da <prvUnlockQueue+0x46>
					break;
 800d6d8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	22ff      	movs	r2, #255	; 0xff
 800d6de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800d6e2:	f001 ff47 	bl	800f574 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d6e6:	f001 ff15 	bl	800f514 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d6f0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d6f2:	e011      	b.n	800d718 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	691b      	ldr	r3, [r3, #16]
 800d6f8:	2b00      	cmp	r3, #0
 800d6fa:	d012      	beq.n	800d722 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	3310      	adds	r3, #16
 800d700:	4618      	mov	r0, r3
 800d702:	f000 fe47 	bl	800e394 <xTaskRemoveFromEventList>
 800d706:	4603      	mov	r3, r0
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d001      	beq.n	800d710 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d70c:	f000 ff80 	bl	800e610 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d710:	7bbb      	ldrb	r3, [r7, #14]
 800d712:	3b01      	subs	r3, #1
 800d714:	b2db      	uxtb	r3, r3
 800d716:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d718:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	dce9      	bgt.n	800d6f4 <prvUnlockQueue+0x60>
 800d720:	e000      	b.n	800d724 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d722:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	22ff      	movs	r2, #255	; 0xff
 800d728:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800d72c:	f001 ff22 	bl	800f574 <vPortExitCritical>
}
 800d730:	bf00      	nop
 800d732:	3710      	adds	r7, #16
 800d734:	46bd      	mov	sp, r7
 800d736:	bd80      	pop	{r7, pc}

0800d738 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d738:	b580      	push	{r7, lr}
 800d73a:	b084      	sub	sp, #16
 800d73c:	af00      	add	r7, sp, #0
 800d73e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d740:	f001 fee8 	bl	800f514 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d102      	bne.n	800d752 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d74c:	2301      	movs	r3, #1
 800d74e:	60fb      	str	r3, [r7, #12]
 800d750:	e001      	b.n	800d756 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d752:	2300      	movs	r3, #0
 800d754:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d756:	f001 ff0d 	bl	800f574 <vPortExitCritical>

	return xReturn;
 800d75a:	68fb      	ldr	r3, [r7, #12]
}
 800d75c:	4618      	mov	r0, r3
 800d75e:	3710      	adds	r7, #16
 800d760:	46bd      	mov	sp, r7
 800d762:	bd80      	pop	{r7, pc}

0800d764 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d764:	b580      	push	{r7, lr}
 800d766:	b084      	sub	sp, #16
 800d768:	af00      	add	r7, sp, #0
 800d76a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d76c:	f001 fed2 	bl	800f514 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d778:	429a      	cmp	r2, r3
 800d77a:	d102      	bne.n	800d782 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d77c:	2301      	movs	r3, #1
 800d77e:	60fb      	str	r3, [r7, #12]
 800d780:	e001      	b.n	800d786 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d782:	2300      	movs	r3, #0
 800d784:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d786:	f001 fef5 	bl	800f574 <vPortExitCritical>

	return xReturn;
 800d78a:	68fb      	ldr	r3, [r7, #12]
}
 800d78c:	4618      	mov	r0, r3
 800d78e:	3710      	adds	r7, #16
 800d790:	46bd      	mov	sp, r7
 800d792:	bd80      	pop	{r7, pc}

0800d794 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800d794:	b480      	push	{r7}
 800d796:	b085      	sub	sp, #20
 800d798:	af00      	add	r7, sp, #0
 800d79a:	6078      	str	r0, [r7, #4]
 800d79c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d79e:	2300      	movs	r3, #0
 800d7a0:	60fb      	str	r3, [r7, #12]
 800d7a2:	e014      	b.n	800d7ce <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800d7a4:	4a0f      	ldr	r2, [pc, #60]	; (800d7e4 <vQueueAddToRegistry+0x50>)
 800d7a6:	68fb      	ldr	r3, [r7, #12]
 800d7a8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	d10b      	bne.n	800d7c8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800d7b0:	490c      	ldr	r1, [pc, #48]	; (800d7e4 <vQueueAddToRegistry+0x50>)
 800d7b2:	68fb      	ldr	r3, [r7, #12]
 800d7b4:	683a      	ldr	r2, [r7, #0]
 800d7b6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800d7ba:	4a0a      	ldr	r2, [pc, #40]	; (800d7e4 <vQueueAddToRegistry+0x50>)
 800d7bc:	68fb      	ldr	r3, [r7, #12]
 800d7be:	00db      	lsls	r3, r3, #3
 800d7c0:	4413      	add	r3, r2
 800d7c2:	687a      	ldr	r2, [r7, #4]
 800d7c4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800d7c6:	e006      	b.n	800d7d6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d7c8:	68fb      	ldr	r3, [r7, #12]
 800d7ca:	3301      	adds	r3, #1
 800d7cc:	60fb      	str	r3, [r7, #12]
 800d7ce:	68fb      	ldr	r3, [r7, #12]
 800d7d0:	2b07      	cmp	r3, #7
 800d7d2:	d9e7      	bls.n	800d7a4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800d7d4:	bf00      	nop
 800d7d6:	bf00      	nop
 800d7d8:	3714      	adds	r7, #20
 800d7da:	46bd      	mov	sp, r7
 800d7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7e0:	4770      	bx	lr
 800d7e2:	bf00      	nop
 800d7e4:	20000cc0 	.word	0x20000cc0

0800d7e8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d7e8:	b580      	push	{r7, lr}
 800d7ea:	b086      	sub	sp, #24
 800d7ec:	af00      	add	r7, sp, #0
 800d7ee:	60f8      	str	r0, [r7, #12]
 800d7f0:	60b9      	str	r1, [r7, #8]
 800d7f2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800d7f4:	68fb      	ldr	r3, [r7, #12]
 800d7f6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800d7f8:	f001 fe8c 	bl	800f514 <vPortEnterCritical>
 800d7fc:	697b      	ldr	r3, [r7, #20]
 800d7fe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d802:	b25b      	sxtb	r3, r3
 800d804:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d808:	d103      	bne.n	800d812 <vQueueWaitForMessageRestricted+0x2a>
 800d80a:	697b      	ldr	r3, [r7, #20]
 800d80c:	2200      	movs	r2, #0
 800d80e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d812:	697b      	ldr	r3, [r7, #20]
 800d814:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d818:	b25b      	sxtb	r3, r3
 800d81a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d81e:	d103      	bne.n	800d828 <vQueueWaitForMessageRestricted+0x40>
 800d820:	697b      	ldr	r3, [r7, #20]
 800d822:	2200      	movs	r2, #0
 800d824:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d828:	f001 fea4 	bl	800f574 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800d82c:	697b      	ldr	r3, [r7, #20]
 800d82e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d830:	2b00      	cmp	r3, #0
 800d832:	d106      	bne.n	800d842 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800d834:	697b      	ldr	r3, [r7, #20]
 800d836:	3324      	adds	r3, #36	; 0x24
 800d838:	687a      	ldr	r2, [r7, #4]
 800d83a:	68b9      	ldr	r1, [r7, #8]
 800d83c:	4618      	mov	r0, r3
 800d83e:	f000 fd7d 	bl	800e33c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800d842:	6978      	ldr	r0, [r7, #20]
 800d844:	f7ff ff26 	bl	800d694 <prvUnlockQueue>
	}
 800d848:	bf00      	nop
 800d84a:	3718      	adds	r7, #24
 800d84c:	46bd      	mov	sp, r7
 800d84e:	bd80      	pop	{r7, pc}

0800d850 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d850:	b580      	push	{r7, lr}
 800d852:	b08e      	sub	sp, #56	; 0x38
 800d854:	af04      	add	r7, sp, #16
 800d856:	60f8      	str	r0, [r7, #12]
 800d858:	60b9      	str	r1, [r7, #8]
 800d85a:	607a      	str	r2, [r7, #4]
 800d85c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d85e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d860:	2b00      	cmp	r3, #0
 800d862:	d10a      	bne.n	800d87a <xTaskCreateStatic+0x2a>
	__asm volatile
 800d864:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d868:	f383 8811 	msr	BASEPRI, r3
 800d86c:	f3bf 8f6f 	isb	sy
 800d870:	f3bf 8f4f 	dsb	sy
 800d874:	623b      	str	r3, [r7, #32]
}
 800d876:	bf00      	nop
 800d878:	e7fe      	b.n	800d878 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800d87a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	d10a      	bne.n	800d896 <xTaskCreateStatic+0x46>
	__asm volatile
 800d880:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d884:	f383 8811 	msr	BASEPRI, r3
 800d888:	f3bf 8f6f 	isb	sy
 800d88c:	f3bf 8f4f 	dsb	sy
 800d890:	61fb      	str	r3, [r7, #28]
}
 800d892:	bf00      	nop
 800d894:	e7fe      	b.n	800d894 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d896:	235c      	movs	r3, #92	; 0x5c
 800d898:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d89a:	693b      	ldr	r3, [r7, #16]
 800d89c:	2b5c      	cmp	r3, #92	; 0x5c
 800d89e:	d00a      	beq.n	800d8b6 <xTaskCreateStatic+0x66>
	__asm volatile
 800d8a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8a4:	f383 8811 	msr	BASEPRI, r3
 800d8a8:	f3bf 8f6f 	isb	sy
 800d8ac:	f3bf 8f4f 	dsb	sy
 800d8b0:	61bb      	str	r3, [r7, #24]
}
 800d8b2:	bf00      	nop
 800d8b4:	e7fe      	b.n	800d8b4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d8b6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d8b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8ba:	2b00      	cmp	r3, #0
 800d8bc:	d01e      	beq.n	800d8fc <xTaskCreateStatic+0xac>
 800d8be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d01b      	beq.n	800d8fc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d8c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8c6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d8c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d8cc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d8ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8d0:	2202      	movs	r2, #2
 800d8d2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d8d6:	2300      	movs	r3, #0
 800d8d8:	9303      	str	r3, [sp, #12]
 800d8da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8dc:	9302      	str	r3, [sp, #8]
 800d8de:	f107 0314 	add.w	r3, r7, #20
 800d8e2:	9301      	str	r3, [sp, #4]
 800d8e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8e6:	9300      	str	r3, [sp, #0]
 800d8e8:	683b      	ldr	r3, [r7, #0]
 800d8ea:	687a      	ldr	r2, [r7, #4]
 800d8ec:	68b9      	ldr	r1, [r7, #8]
 800d8ee:	68f8      	ldr	r0, [r7, #12]
 800d8f0:	f000 f850 	bl	800d994 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d8f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d8f6:	f000 f8dd 	bl	800dab4 <prvAddNewTaskToReadyList>
 800d8fa:	e001      	b.n	800d900 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800d8fc:	2300      	movs	r3, #0
 800d8fe:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d900:	697b      	ldr	r3, [r7, #20]
	}
 800d902:	4618      	mov	r0, r3
 800d904:	3728      	adds	r7, #40	; 0x28
 800d906:	46bd      	mov	sp, r7
 800d908:	bd80      	pop	{r7, pc}

0800d90a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d90a:	b580      	push	{r7, lr}
 800d90c:	b08c      	sub	sp, #48	; 0x30
 800d90e:	af04      	add	r7, sp, #16
 800d910:	60f8      	str	r0, [r7, #12]
 800d912:	60b9      	str	r1, [r7, #8]
 800d914:	603b      	str	r3, [r7, #0]
 800d916:	4613      	mov	r3, r2
 800d918:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d91a:	88fb      	ldrh	r3, [r7, #6]
 800d91c:	009b      	lsls	r3, r3, #2
 800d91e:	4618      	mov	r0, r3
 800d920:	f001 ff1a 	bl	800f758 <pvPortMalloc>
 800d924:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d926:	697b      	ldr	r3, [r7, #20]
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d00e      	beq.n	800d94a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d92c:	205c      	movs	r0, #92	; 0x5c
 800d92e:	f001 ff13 	bl	800f758 <pvPortMalloc>
 800d932:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d934:	69fb      	ldr	r3, [r7, #28]
 800d936:	2b00      	cmp	r3, #0
 800d938:	d003      	beq.n	800d942 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d93a:	69fb      	ldr	r3, [r7, #28]
 800d93c:	697a      	ldr	r2, [r7, #20]
 800d93e:	631a      	str	r2, [r3, #48]	; 0x30
 800d940:	e005      	b.n	800d94e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d942:	6978      	ldr	r0, [r7, #20]
 800d944:	f001 ffd4 	bl	800f8f0 <vPortFree>
 800d948:	e001      	b.n	800d94e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d94a:	2300      	movs	r3, #0
 800d94c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d94e:	69fb      	ldr	r3, [r7, #28]
 800d950:	2b00      	cmp	r3, #0
 800d952:	d017      	beq.n	800d984 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d954:	69fb      	ldr	r3, [r7, #28]
 800d956:	2200      	movs	r2, #0
 800d958:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d95c:	88fa      	ldrh	r2, [r7, #6]
 800d95e:	2300      	movs	r3, #0
 800d960:	9303      	str	r3, [sp, #12]
 800d962:	69fb      	ldr	r3, [r7, #28]
 800d964:	9302      	str	r3, [sp, #8]
 800d966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d968:	9301      	str	r3, [sp, #4]
 800d96a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d96c:	9300      	str	r3, [sp, #0]
 800d96e:	683b      	ldr	r3, [r7, #0]
 800d970:	68b9      	ldr	r1, [r7, #8]
 800d972:	68f8      	ldr	r0, [r7, #12]
 800d974:	f000 f80e 	bl	800d994 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d978:	69f8      	ldr	r0, [r7, #28]
 800d97a:	f000 f89b 	bl	800dab4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d97e:	2301      	movs	r3, #1
 800d980:	61bb      	str	r3, [r7, #24]
 800d982:	e002      	b.n	800d98a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d984:	f04f 33ff 	mov.w	r3, #4294967295
 800d988:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d98a:	69bb      	ldr	r3, [r7, #24]
	}
 800d98c:	4618      	mov	r0, r3
 800d98e:	3720      	adds	r7, #32
 800d990:	46bd      	mov	sp, r7
 800d992:	bd80      	pop	{r7, pc}

0800d994 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d994:	b580      	push	{r7, lr}
 800d996:	b088      	sub	sp, #32
 800d998:	af00      	add	r7, sp, #0
 800d99a:	60f8      	str	r0, [r7, #12]
 800d99c:	60b9      	str	r1, [r7, #8]
 800d99e:	607a      	str	r2, [r7, #4]
 800d9a0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d9a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9a4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	009b      	lsls	r3, r3, #2
 800d9aa:	461a      	mov	r2, r3
 800d9ac:	21a5      	movs	r1, #165	; 0xa5
 800d9ae:	f002 f8fd 	bl	800fbac <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d9b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800d9bc:	3b01      	subs	r3, #1
 800d9be:	009b      	lsls	r3, r3, #2
 800d9c0:	4413      	add	r3, r2
 800d9c2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d9c4:	69bb      	ldr	r3, [r7, #24]
 800d9c6:	f023 0307 	bic.w	r3, r3, #7
 800d9ca:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d9cc:	69bb      	ldr	r3, [r7, #24]
 800d9ce:	f003 0307 	and.w	r3, r3, #7
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	d00a      	beq.n	800d9ec <prvInitialiseNewTask+0x58>
	__asm volatile
 800d9d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9da:	f383 8811 	msr	BASEPRI, r3
 800d9de:	f3bf 8f6f 	isb	sy
 800d9e2:	f3bf 8f4f 	dsb	sy
 800d9e6:	617b      	str	r3, [r7, #20]
}
 800d9e8:	bf00      	nop
 800d9ea:	e7fe      	b.n	800d9ea <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d9ec:	68bb      	ldr	r3, [r7, #8]
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d01f      	beq.n	800da32 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d9f2:	2300      	movs	r3, #0
 800d9f4:	61fb      	str	r3, [r7, #28]
 800d9f6:	e012      	b.n	800da1e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d9f8:	68ba      	ldr	r2, [r7, #8]
 800d9fa:	69fb      	ldr	r3, [r7, #28]
 800d9fc:	4413      	add	r3, r2
 800d9fe:	7819      	ldrb	r1, [r3, #0]
 800da00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800da02:	69fb      	ldr	r3, [r7, #28]
 800da04:	4413      	add	r3, r2
 800da06:	3334      	adds	r3, #52	; 0x34
 800da08:	460a      	mov	r2, r1
 800da0a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800da0c:	68ba      	ldr	r2, [r7, #8]
 800da0e:	69fb      	ldr	r3, [r7, #28]
 800da10:	4413      	add	r3, r2
 800da12:	781b      	ldrb	r3, [r3, #0]
 800da14:	2b00      	cmp	r3, #0
 800da16:	d006      	beq.n	800da26 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800da18:	69fb      	ldr	r3, [r7, #28]
 800da1a:	3301      	adds	r3, #1
 800da1c:	61fb      	str	r3, [r7, #28]
 800da1e:	69fb      	ldr	r3, [r7, #28]
 800da20:	2b0f      	cmp	r3, #15
 800da22:	d9e9      	bls.n	800d9f8 <prvInitialiseNewTask+0x64>
 800da24:	e000      	b.n	800da28 <prvInitialiseNewTask+0x94>
			{
				break;
 800da26:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800da28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da2a:	2200      	movs	r2, #0
 800da2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800da30:	e003      	b.n	800da3a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800da32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da34:	2200      	movs	r2, #0
 800da36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800da3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da3c:	2b37      	cmp	r3, #55	; 0x37
 800da3e:	d901      	bls.n	800da44 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800da40:	2337      	movs	r3, #55	; 0x37
 800da42:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800da44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800da48:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800da4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800da4e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800da50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da52:	2200      	movs	r2, #0
 800da54:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800da56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da58:	3304      	adds	r3, #4
 800da5a:	4618      	mov	r0, r3
 800da5c:	f7fe fee4 	bl	800c828 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800da60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da62:	3318      	adds	r3, #24
 800da64:	4618      	mov	r0, r3
 800da66:	f7fe fedf 	bl	800c828 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800da6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800da6e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800da70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da72:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800da76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da78:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800da7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800da7e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800da80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da82:	2200      	movs	r2, #0
 800da84:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800da86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da88:	2200      	movs	r2, #0
 800da8a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800da8e:	683a      	ldr	r2, [r7, #0]
 800da90:	68f9      	ldr	r1, [r7, #12]
 800da92:	69b8      	ldr	r0, [r7, #24]
 800da94:	f001 fc12 	bl	800f2bc <pxPortInitialiseStack>
 800da98:	4602      	mov	r2, r0
 800da9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da9c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800da9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	d002      	beq.n	800daaa <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800daa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800daa6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800daa8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800daaa:	bf00      	nop
 800daac:	3720      	adds	r7, #32
 800daae:	46bd      	mov	sp, r7
 800dab0:	bd80      	pop	{r7, pc}
	...

0800dab4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800dab4:	b580      	push	{r7, lr}
 800dab6:	b082      	sub	sp, #8
 800dab8:	af00      	add	r7, sp, #0
 800daba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800dabc:	f001 fd2a 	bl	800f514 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800dac0:	4b2d      	ldr	r3, [pc, #180]	; (800db78 <prvAddNewTaskToReadyList+0xc4>)
 800dac2:	681b      	ldr	r3, [r3, #0]
 800dac4:	3301      	adds	r3, #1
 800dac6:	4a2c      	ldr	r2, [pc, #176]	; (800db78 <prvAddNewTaskToReadyList+0xc4>)
 800dac8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800daca:	4b2c      	ldr	r3, [pc, #176]	; (800db7c <prvAddNewTaskToReadyList+0xc8>)
 800dacc:	681b      	ldr	r3, [r3, #0]
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d109      	bne.n	800dae6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800dad2:	4a2a      	ldr	r2, [pc, #168]	; (800db7c <prvAddNewTaskToReadyList+0xc8>)
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800dad8:	4b27      	ldr	r3, [pc, #156]	; (800db78 <prvAddNewTaskToReadyList+0xc4>)
 800dada:	681b      	ldr	r3, [r3, #0]
 800dadc:	2b01      	cmp	r3, #1
 800dade:	d110      	bne.n	800db02 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800dae0:	f000 fdba 	bl	800e658 <prvInitialiseTaskLists>
 800dae4:	e00d      	b.n	800db02 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800dae6:	4b26      	ldr	r3, [pc, #152]	; (800db80 <prvAddNewTaskToReadyList+0xcc>)
 800dae8:	681b      	ldr	r3, [r3, #0]
 800daea:	2b00      	cmp	r3, #0
 800daec:	d109      	bne.n	800db02 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800daee:	4b23      	ldr	r3, [pc, #140]	; (800db7c <prvAddNewTaskToReadyList+0xc8>)
 800daf0:	681b      	ldr	r3, [r3, #0]
 800daf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800daf8:	429a      	cmp	r2, r3
 800dafa:	d802      	bhi.n	800db02 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800dafc:	4a1f      	ldr	r2, [pc, #124]	; (800db7c <prvAddNewTaskToReadyList+0xc8>)
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800db02:	4b20      	ldr	r3, [pc, #128]	; (800db84 <prvAddNewTaskToReadyList+0xd0>)
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	3301      	adds	r3, #1
 800db08:	4a1e      	ldr	r2, [pc, #120]	; (800db84 <prvAddNewTaskToReadyList+0xd0>)
 800db0a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800db0c:	4b1d      	ldr	r3, [pc, #116]	; (800db84 <prvAddNewTaskToReadyList+0xd0>)
 800db0e:	681a      	ldr	r2, [r3, #0]
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db18:	4b1b      	ldr	r3, [pc, #108]	; (800db88 <prvAddNewTaskToReadyList+0xd4>)
 800db1a:	681b      	ldr	r3, [r3, #0]
 800db1c:	429a      	cmp	r2, r3
 800db1e:	d903      	bls.n	800db28 <prvAddNewTaskToReadyList+0x74>
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db24:	4a18      	ldr	r2, [pc, #96]	; (800db88 <prvAddNewTaskToReadyList+0xd4>)
 800db26:	6013      	str	r3, [r2, #0]
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db2c:	4613      	mov	r3, r2
 800db2e:	009b      	lsls	r3, r3, #2
 800db30:	4413      	add	r3, r2
 800db32:	009b      	lsls	r3, r3, #2
 800db34:	4a15      	ldr	r2, [pc, #84]	; (800db8c <prvAddNewTaskToReadyList+0xd8>)
 800db36:	441a      	add	r2, r3
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	3304      	adds	r3, #4
 800db3c:	4619      	mov	r1, r3
 800db3e:	4610      	mov	r0, r2
 800db40:	f7fe fe7f 	bl	800c842 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800db44:	f001 fd16 	bl	800f574 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800db48:	4b0d      	ldr	r3, [pc, #52]	; (800db80 <prvAddNewTaskToReadyList+0xcc>)
 800db4a:	681b      	ldr	r3, [r3, #0]
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	d00e      	beq.n	800db6e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800db50:	4b0a      	ldr	r3, [pc, #40]	; (800db7c <prvAddNewTaskToReadyList+0xc8>)
 800db52:	681b      	ldr	r3, [r3, #0]
 800db54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db5a:	429a      	cmp	r2, r3
 800db5c:	d207      	bcs.n	800db6e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800db5e:	4b0c      	ldr	r3, [pc, #48]	; (800db90 <prvAddNewTaskToReadyList+0xdc>)
 800db60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800db64:	601a      	str	r2, [r3, #0]
 800db66:	f3bf 8f4f 	dsb	sy
 800db6a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800db6e:	bf00      	nop
 800db70:	3708      	adds	r7, #8
 800db72:	46bd      	mov	sp, r7
 800db74:	bd80      	pop	{r7, pc}
 800db76:	bf00      	nop
 800db78:	200011d4 	.word	0x200011d4
 800db7c:	20000d00 	.word	0x20000d00
 800db80:	200011e0 	.word	0x200011e0
 800db84:	200011f0 	.word	0x200011f0
 800db88:	200011dc 	.word	0x200011dc
 800db8c:	20000d04 	.word	0x20000d04
 800db90:	e000ed04 	.word	0xe000ed04

0800db94 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800db94:	b580      	push	{r7, lr}
 800db96:	b084      	sub	sp, #16
 800db98:	af00      	add	r7, sp, #0
 800db9a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800db9c:	2300      	movs	r3, #0
 800db9e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	d017      	beq.n	800dbd6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800dba6:	4b13      	ldr	r3, [pc, #76]	; (800dbf4 <vTaskDelay+0x60>)
 800dba8:	681b      	ldr	r3, [r3, #0]
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	d00a      	beq.n	800dbc4 <vTaskDelay+0x30>
	__asm volatile
 800dbae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbb2:	f383 8811 	msr	BASEPRI, r3
 800dbb6:	f3bf 8f6f 	isb	sy
 800dbba:	f3bf 8f4f 	dsb	sy
 800dbbe:	60bb      	str	r3, [r7, #8]
}
 800dbc0:	bf00      	nop
 800dbc2:	e7fe      	b.n	800dbc2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800dbc4:	f000 f986 	bl	800ded4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800dbc8:	2100      	movs	r1, #0
 800dbca:	6878      	ldr	r0, [r7, #4]
 800dbcc:	f000 ffb4 	bl	800eb38 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800dbd0:	f000 f98e 	bl	800def0 <xTaskResumeAll>
 800dbd4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800dbd6:	68fb      	ldr	r3, [r7, #12]
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	d107      	bne.n	800dbec <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800dbdc:	4b06      	ldr	r3, [pc, #24]	; (800dbf8 <vTaskDelay+0x64>)
 800dbde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dbe2:	601a      	str	r2, [r3, #0]
 800dbe4:	f3bf 8f4f 	dsb	sy
 800dbe8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800dbec:	bf00      	nop
 800dbee:	3710      	adds	r7, #16
 800dbf0:	46bd      	mov	sp, r7
 800dbf2:	bd80      	pop	{r7, pc}
 800dbf4:	200011fc 	.word	0x200011fc
 800dbf8:	e000ed04 	.word	0xe000ed04

0800dbfc <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800dbfc:	b580      	push	{r7, lr}
 800dbfe:	b084      	sub	sp, #16
 800dc00:	af00      	add	r7, sp, #0
 800dc02:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800dc04:	f001 fc86 	bl	800f514 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	d102      	bne.n	800dc14 <vTaskSuspend+0x18>
 800dc0e:	4b30      	ldr	r3, [pc, #192]	; (800dcd0 <vTaskSuspend+0xd4>)
 800dc10:	681b      	ldr	r3, [r3, #0]
 800dc12:	e000      	b.n	800dc16 <vTaskSuspend+0x1a>
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dc18:	68fb      	ldr	r3, [r7, #12]
 800dc1a:	3304      	adds	r3, #4
 800dc1c:	4618      	mov	r0, r3
 800dc1e:	f7fe fe6d 	bl	800c8fc <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d004      	beq.n	800dc34 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800dc2a:	68fb      	ldr	r3, [r7, #12]
 800dc2c:	3318      	adds	r3, #24
 800dc2e:	4618      	mov	r0, r3
 800dc30:	f7fe fe64 	bl	800c8fc <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800dc34:	68fb      	ldr	r3, [r7, #12]
 800dc36:	3304      	adds	r3, #4
 800dc38:	4619      	mov	r1, r3
 800dc3a:	4826      	ldr	r0, [pc, #152]	; (800dcd4 <vTaskSuspend+0xd8>)
 800dc3c:	f7fe fe01 	bl	800c842 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800dc40:	68fb      	ldr	r3, [r7, #12]
 800dc42:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800dc46:	b2db      	uxtb	r3, r3
 800dc48:	2b01      	cmp	r3, #1
 800dc4a:	d103      	bne.n	800dc54 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800dc4c:	68fb      	ldr	r3, [r7, #12]
 800dc4e:	2200      	movs	r2, #0
 800dc50:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800dc54:	f001 fc8e 	bl	800f574 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800dc58:	4b1f      	ldr	r3, [pc, #124]	; (800dcd8 <vTaskSuspend+0xdc>)
 800dc5a:	681b      	ldr	r3, [r3, #0]
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d005      	beq.n	800dc6c <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800dc60:	f001 fc58 	bl	800f514 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800dc64:	f000 fd96 	bl	800e794 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800dc68:	f001 fc84 	bl	800f574 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800dc6c:	4b18      	ldr	r3, [pc, #96]	; (800dcd0 <vTaskSuspend+0xd4>)
 800dc6e:	681b      	ldr	r3, [r3, #0]
 800dc70:	68fa      	ldr	r2, [r7, #12]
 800dc72:	429a      	cmp	r2, r3
 800dc74:	d127      	bne.n	800dcc6 <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 800dc76:	4b18      	ldr	r3, [pc, #96]	; (800dcd8 <vTaskSuspend+0xdc>)
 800dc78:	681b      	ldr	r3, [r3, #0]
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	d017      	beq.n	800dcae <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800dc7e:	4b17      	ldr	r3, [pc, #92]	; (800dcdc <vTaskSuspend+0xe0>)
 800dc80:	681b      	ldr	r3, [r3, #0]
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d00a      	beq.n	800dc9c <vTaskSuspend+0xa0>
	__asm volatile
 800dc86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc8a:	f383 8811 	msr	BASEPRI, r3
 800dc8e:	f3bf 8f6f 	isb	sy
 800dc92:	f3bf 8f4f 	dsb	sy
 800dc96:	60bb      	str	r3, [r7, #8]
}
 800dc98:	bf00      	nop
 800dc9a:	e7fe      	b.n	800dc9a <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 800dc9c:	4b10      	ldr	r3, [pc, #64]	; (800dce0 <vTaskSuspend+0xe4>)
 800dc9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dca2:	601a      	str	r2, [r3, #0]
 800dca4:	f3bf 8f4f 	dsb	sy
 800dca8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800dcac:	e00b      	b.n	800dcc6 <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800dcae:	4b09      	ldr	r3, [pc, #36]	; (800dcd4 <vTaskSuspend+0xd8>)
 800dcb0:	681a      	ldr	r2, [r3, #0]
 800dcb2:	4b0c      	ldr	r3, [pc, #48]	; (800dce4 <vTaskSuspend+0xe8>)
 800dcb4:	681b      	ldr	r3, [r3, #0]
 800dcb6:	429a      	cmp	r2, r3
 800dcb8:	d103      	bne.n	800dcc2 <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 800dcba:	4b05      	ldr	r3, [pc, #20]	; (800dcd0 <vTaskSuspend+0xd4>)
 800dcbc:	2200      	movs	r2, #0
 800dcbe:	601a      	str	r2, [r3, #0]
	}
 800dcc0:	e001      	b.n	800dcc6 <vTaskSuspend+0xca>
					vTaskSwitchContext();
 800dcc2:	f000 fa7d 	bl	800e1c0 <vTaskSwitchContext>
	}
 800dcc6:	bf00      	nop
 800dcc8:	3710      	adds	r7, #16
 800dcca:	46bd      	mov	sp, r7
 800dccc:	bd80      	pop	{r7, pc}
 800dcce:	bf00      	nop
 800dcd0:	20000d00 	.word	0x20000d00
 800dcd4:	200011c0 	.word	0x200011c0
 800dcd8:	200011e0 	.word	0x200011e0
 800dcdc:	200011fc 	.word	0x200011fc
 800dce0:	e000ed04 	.word	0xe000ed04
 800dce4:	200011d4 	.word	0x200011d4

0800dce8 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 800dce8:	b480      	push	{r7}
 800dcea:	b087      	sub	sp, #28
 800dcec:	af00      	add	r7, sp, #0
 800dcee:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 800dcf0:	2300      	movs	r3, #0
 800dcf2:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	d10a      	bne.n	800dd14 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 800dcfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd02:	f383 8811 	msr	BASEPRI, r3
 800dd06:	f3bf 8f6f 	isb	sy
 800dd0a:	f3bf 8f4f 	dsb	sy
 800dd0e:	60fb      	str	r3, [r7, #12]
}
 800dd10:	bf00      	nop
 800dd12:	e7fe      	b.n	800dd12 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800dd14:	693b      	ldr	r3, [r7, #16]
 800dd16:	695b      	ldr	r3, [r3, #20]
 800dd18:	4a0a      	ldr	r2, [pc, #40]	; (800dd44 <prvTaskIsTaskSuspended+0x5c>)
 800dd1a:	4293      	cmp	r3, r2
 800dd1c:	d10a      	bne.n	800dd34 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800dd1e:	693b      	ldr	r3, [r7, #16]
 800dd20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd22:	4a09      	ldr	r2, [pc, #36]	; (800dd48 <prvTaskIsTaskSuspended+0x60>)
 800dd24:	4293      	cmp	r3, r2
 800dd26:	d005      	beq.n	800dd34 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800dd28:	693b      	ldr	r3, [r7, #16]
 800dd2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	d101      	bne.n	800dd34 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 800dd30:	2301      	movs	r3, #1
 800dd32:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800dd34:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800dd36:	4618      	mov	r0, r3
 800dd38:	371c      	adds	r7, #28
 800dd3a:	46bd      	mov	sp, r7
 800dd3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd40:	4770      	bx	lr
 800dd42:	bf00      	nop
 800dd44:	200011c0 	.word	0x200011c0
 800dd48:	20001194 	.word	0x20001194

0800dd4c <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 800dd4c:	b580      	push	{r7, lr}
 800dd4e:	b084      	sub	sp, #16
 800dd50:	af00      	add	r7, sp, #0
 800dd52:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	d10a      	bne.n	800dd74 <vTaskResume+0x28>
	__asm volatile
 800dd5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd62:	f383 8811 	msr	BASEPRI, r3
 800dd66:	f3bf 8f6f 	isb	sy
 800dd6a:	f3bf 8f4f 	dsb	sy
 800dd6e:	60bb      	str	r3, [r7, #8]
}
 800dd70:	bf00      	nop
 800dd72:	e7fe      	b.n	800dd72 <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 800dd74:	4b20      	ldr	r3, [pc, #128]	; (800ddf8 <vTaskResume+0xac>)
 800dd76:	681b      	ldr	r3, [r3, #0]
 800dd78:	68fa      	ldr	r2, [r7, #12]
 800dd7a:	429a      	cmp	r2, r3
 800dd7c:	d038      	beq.n	800ddf0 <vTaskResume+0xa4>
 800dd7e:	68fb      	ldr	r3, [r7, #12]
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	d035      	beq.n	800ddf0 <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 800dd84:	f001 fbc6 	bl	800f514 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800dd88:	68f8      	ldr	r0, [r7, #12]
 800dd8a:	f7ff ffad 	bl	800dce8 <prvTaskIsTaskSuspended>
 800dd8e:	4603      	mov	r3, r0
 800dd90:	2b00      	cmp	r3, #0
 800dd92:	d02b      	beq.n	800ddec <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 800dd94:	68fb      	ldr	r3, [r7, #12]
 800dd96:	3304      	adds	r3, #4
 800dd98:	4618      	mov	r0, r3
 800dd9a:	f7fe fdaf 	bl	800c8fc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800dd9e:	68fb      	ldr	r3, [r7, #12]
 800dda0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dda2:	4b16      	ldr	r3, [pc, #88]	; (800ddfc <vTaskResume+0xb0>)
 800dda4:	681b      	ldr	r3, [r3, #0]
 800dda6:	429a      	cmp	r2, r3
 800dda8:	d903      	bls.n	800ddb2 <vTaskResume+0x66>
 800ddaa:	68fb      	ldr	r3, [r7, #12]
 800ddac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ddae:	4a13      	ldr	r2, [pc, #76]	; (800ddfc <vTaskResume+0xb0>)
 800ddb0:	6013      	str	r3, [r2, #0]
 800ddb2:	68fb      	ldr	r3, [r7, #12]
 800ddb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ddb6:	4613      	mov	r3, r2
 800ddb8:	009b      	lsls	r3, r3, #2
 800ddba:	4413      	add	r3, r2
 800ddbc:	009b      	lsls	r3, r3, #2
 800ddbe:	4a10      	ldr	r2, [pc, #64]	; (800de00 <vTaskResume+0xb4>)
 800ddc0:	441a      	add	r2, r3
 800ddc2:	68fb      	ldr	r3, [r7, #12]
 800ddc4:	3304      	adds	r3, #4
 800ddc6:	4619      	mov	r1, r3
 800ddc8:	4610      	mov	r0, r2
 800ddca:	f7fe fd3a 	bl	800c842 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ddce:	68fb      	ldr	r3, [r7, #12]
 800ddd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ddd2:	4b09      	ldr	r3, [pc, #36]	; (800ddf8 <vTaskResume+0xac>)
 800ddd4:	681b      	ldr	r3, [r3, #0]
 800ddd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ddd8:	429a      	cmp	r2, r3
 800ddda:	d307      	bcc.n	800ddec <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 800dddc:	4b09      	ldr	r3, [pc, #36]	; (800de04 <vTaskResume+0xb8>)
 800ddde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dde2:	601a      	str	r2, [r3, #0]
 800dde4:	f3bf 8f4f 	dsb	sy
 800dde8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800ddec:	f001 fbc2 	bl	800f574 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ddf0:	bf00      	nop
 800ddf2:	3710      	adds	r7, #16
 800ddf4:	46bd      	mov	sp, r7
 800ddf6:	bd80      	pop	{r7, pc}
 800ddf8:	20000d00 	.word	0x20000d00
 800ddfc:	200011dc 	.word	0x200011dc
 800de00:	20000d04 	.word	0x20000d04
 800de04:	e000ed04 	.word	0xe000ed04

0800de08 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800de08:	b580      	push	{r7, lr}
 800de0a:	b08a      	sub	sp, #40	; 0x28
 800de0c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800de0e:	2300      	movs	r3, #0
 800de10:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800de12:	2300      	movs	r3, #0
 800de14:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800de16:	463a      	mov	r2, r7
 800de18:	1d39      	adds	r1, r7, #4
 800de1a:	f107 0308 	add.w	r3, r7, #8
 800de1e:	4618      	mov	r0, r3
 800de20:	f7fe fac0 	bl	800c3a4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800de24:	6839      	ldr	r1, [r7, #0]
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	68ba      	ldr	r2, [r7, #8]
 800de2a:	9202      	str	r2, [sp, #8]
 800de2c:	9301      	str	r3, [sp, #4]
 800de2e:	2300      	movs	r3, #0
 800de30:	9300      	str	r3, [sp, #0]
 800de32:	2300      	movs	r3, #0
 800de34:	460a      	mov	r2, r1
 800de36:	4921      	ldr	r1, [pc, #132]	; (800debc <vTaskStartScheduler+0xb4>)
 800de38:	4821      	ldr	r0, [pc, #132]	; (800dec0 <vTaskStartScheduler+0xb8>)
 800de3a:	f7ff fd09 	bl	800d850 <xTaskCreateStatic>
 800de3e:	4603      	mov	r3, r0
 800de40:	4a20      	ldr	r2, [pc, #128]	; (800dec4 <vTaskStartScheduler+0xbc>)
 800de42:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800de44:	4b1f      	ldr	r3, [pc, #124]	; (800dec4 <vTaskStartScheduler+0xbc>)
 800de46:	681b      	ldr	r3, [r3, #0]
 800de48:	2b00      	cmp	r3, #0
 800de4a:	d002      	beq.n	800de52 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800de4c:	2301      	movs	r3, #1
 800de4e:	617b      	str	r3, [r7, #20]
 800de50:	e001      	b.n	800de56 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800de52:	2300      	movs	r3, #0
 800de54:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800de56:	697b      	ldr	r3, [r7, #20]
 800de58:	2b01      	cmp	r3, #1
 800de5a:	d102      	bne.n	800de62 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800de5c:	f000 fec0 	bl	800ebe0 <xTimerCreateTimerTask>
 800de60:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800de62:	697b      	ldr	r3, [r7, #20]
 800de64:	2b01      	cmp	r3, #1
 800de66:	d116      	bne.n	800de96 <vTaskStartScheduler+0x8e>
	__asm volatile
 800de68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de6c:	f383 8811 	msr	BASEPRI, r3
 800de70:	f3bf 8f6f 	isb	sy
 800de74:	f3bf 8f4f 	dsb	sy
 800de78:	613b      	str	r3, [r7, #16]
}
 800de7a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800de7c:	4b12      	ldr	r3, [pc, #72]	; (800dec8 <vTaskStartScheduler+0xc0>)
 800de7e:	f04f 32ff 	mov.w	r2, #4294967295
 800de82:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800de84:	4b11      	ldr	r3, [pc, #68]	; (800decc <vTaskStartScheduler+0xc4>)
 800de86:	2201      	movs	r2, #1
 800de88:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800de8a:	4b11      	ldr	r3, [pc, #68]	; (800ded0 <vTaskStartScheduler+0xc8>)
 800de8c:	2200      	movs	r2, #0
 800de8e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800de90:	f001 fa9e 	bl	800f3d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800de94:	e00e      	b.n	800deb4 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800de96:	697b      	ldr	r3, [r7, #20]
 800de98:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de9c:	d10a      	bne.n	800deb4 <vTaskStartScheduler+0xac>
	__asm volatile
 800de9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dea2:	f383 8811 	msr	BASEPRI, r3
 800dea6:	f3bf 8f6f 	isb	sy
 800deaa:	f3bf 8f4f 	dsb	sy
 800deae:	60fb      	str	r3, [r7, #12]
}
 800deb0:	bf00      	nop
 800deb2:	e7fe      	b.n	800deb2 <vTaskStartScheduler+0xaa>
}
 800deb4:	bf00      	nop
 800deb6:	3718      	adds	r7, #24
 800deb8:	46bd      	mov	sp, r7
 800deba:	bd80      	pop	{r7, pc}
 800debc:	080142a4 	.word	0x080142a4
 800dec0:	0800e629 	.word	0x0800e629
 800dec4:	200011f8 	.word	0x200011f8
 800dec8:	200011f4 	.word	0x200011f4
 800decc:	200011e0 	.word	0x200011e0
 800ded0:	200011d8 	.word	0x200011d8

0800ded4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ded4:	b480      	push	{r7}
 800ded6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800ded8:	4b04      	ldr	r3, [pc, #16]	; (800deec <vTaskSuspendAll+0x18>)
 800deda:	681b      	ldr	r3, [r3, #0]
 800dedc:	3301      	adds	r3, #1
 800dede:	4a03      	ldr	r2, [pc, #12]	; (800deec <vTaskSuspendAll+0x18>)
 800dee0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800dee2:	bf00      	nop
 800dee4:	46bd      	mov	sp, r7
 800dee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deea:	4770      	bx	lr
 800deec:	200011fc 	.word	0x200011fc

0800def0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800def0:	b580      	push	{r7, lr}
 800def2:	b084      	sub	sp, #16
 800def4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800def6:	2300      	movs	r3, #0
 800def8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800defa:	2300      	movs	r3, #0
 800defc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800defe:	4b42      	ldr	r3, [pc, #264]	; (800e008 <xTaskResumeAll+0x118>)
 800df00:	681b      	ldr	r3, [r3, #0]
 800df02:	2b00      	cmp	r3, #0
 800df04:	d10a      	bne.n	800df1c <xTaskResumeAll+0x2c>
	__asm volatile
 800df06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df0a:	f383 8811 	msr	BASEPRI, r3
 800df0e:	f3bf 8f6f 	isb	sy
 800df12:	f3bf 8f4f 	dsb	sy
 800df16:	603b      	str	r3, [r7, #0]
}
 800df18:	bf00      	nop
 800df1a:	e7fe      	b.n	800df1a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800df1c:	f001 fafa 	bl	800f514 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800df20:	4b39      	ldr	r3, [pc, #228]	; (800e008 <xTaskResumeAll+0x118>)
 800df22:	681b      	ldr	r3, [r3, #0]
 800df24:	3b01      	subs	r3, #1
 800df26:	4a38      	ldr	r2, [pc, #224]	; (800e008 <xTaskResumeAll+0x118>)
 800df28:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800df2a:	4b37      	ldr	r3, [pc, #220]	; (800e008 <xTaskResumeAll+0x118>)
 800df2c:	681b      	ldr	r3, [r3, #0]
 800df2e:	2b00      	cmp	r3, #0
 800df30:	d162      	bne.n	800dff8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800df32:	4b36      	ldr	r3, [pc, #216]	; (800e00c <xTaskResumeAll+0x11c>)
 800df34:	681b      	ldr	r3, [r3, #0]
 800df36:	2b00      	cmp	r3, #0
 800df38:	d05e      	beq.n	800dff8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800df3a:	e02f      	b.n	800df9c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800df3c:	4b34      	ldr	r3, [pc, #208]	; (800e010 <xTaskResumeAll+0x120>)
 800df3e:	68db      	ldr	r3, [r3, #12]
 800df40:	68db      	ldr	r3, [r3, #12]
 800df42:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800df44:	68fb      	ldr	r3, [r7, #12]
 800df46:	3318      	adds	r3, #24
 800df48:	4618      	mov	r0, r3
 800df4a:	f7fe fcd7 	bl	800c8fc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800df4e:	68fb      	ldr	r3, [r7, #12]
 800df50:	3304      	adds	r3, #4
 800df52:	4618      	mov	r0, r3
 800df54:	f7fe fcd2 	bl	800c8fc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800df58:	68fb      	ldr	r3, [r7, #12]
 800df5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df5c:	4b2d      	ldr	r3, [pc, #180]	; (800e014 <xTaskResumeAll+0x124>)
 800df5e:	681b      	ldr	r3, [r3, #0]
 800df60:	429a      	cmp	r2, r3
 800df62:	d903      	bls.n	800df6c <xTaskResumeAll+0x7c>
 800df64:	68fb      	ldr	r3, [r7, #12]
 800df66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df68:	4a2a      	ldr	r2, [pc, #168]	; (800e014 <xTaskResumeAll+0x124>)
 800df6a:	6013      	str	r3, [r2, #0]
 800df6c:	68fb      	ldr	r3, [r7, #12]
 800df6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df70:	4613      	mov	r3, r2
 800df72:	009b      	lsls	r3, r3, #2
 800df74:	4413      	add	r3, r2
 800df76:	009b      	lsls	r3, r3, #2
 800df78:	4a27      	ldr	r2, [pc, #156]	; (800e018 <xTaskResumeAll+0x128>)
 800df7a:	441a      	add	r2, r3
 800df7c:	68fb      	ldr	r3, [r7, #12]
 800df7e:	3304      	adds	r3, #4
 800df80:	4619      	mov	r1, r3
 800df82:	4610      	mov	r0, r2
 800df84:	f7fe fc5d 	bl	800c842 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800df88:	68fb      	ldr	r3, [r7, #12]
 800df8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df8c:	4b23      	ldr	r3, [pc, #140]	; (800e01c <xTaskResumeAll+0x12c>)
 800df8e:	681b      	ldr	r3, [r3, #0]
 800df90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df92:	429a      	cmp	r2, r3
 800df94:	d302      	bcc.n	800df9c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800df96:	4b22      	ldr	r3, [pc, #136]	; (800e020 <xTaskResumeAll+0x130>)
 800df98:	2201      	movs	r2, #1
 800df9a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800df9c:	4b1c      	ldr	r3, [pc, #112]	; (800e010 <xTaskResumeAll+0x120>)
 800df9e:	681b      	ldr	r3, [r3, #0]
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d1cb      	bne.n	800df3c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800dfa4:	68fb      	ldr	r3, [r7, #12]
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	d001      	beq.n	800dfae <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800dfaa:	f000 fbf3 	bl	800e794 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800dfae:	4b1d      	ldr	r3, [pc, #116]	; (800e024 <xTaskResumeAll+0x134>)
 800dfb0:	681b      	ldr	r3, [r3, #0]
 800dfb2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	d010      	beq.n	800dfdc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800dfba:	f000 f847 	bl	800e04c <xTaskIncrementTick>
 800dfbe:	4603      	mov	r3, r0
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	d002      	beq.n	800dfca <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800dfc4:	4b16      	ldr	r3, [pc, #88]	; (800e020 <xTaskResumeAll+0x130>)
 800dfc6:	2201      	movs	r2, #1
 800dfc8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	3b01      	subs	r3, #1
 800dfce:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	2b00      	cmp	r3, #0
 800dfd4:	d1f1      	bne.n	800dfba <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800dfd6:	4b13      	ldr	r3, [pc, #76]	; (800e024 <xTaskResumeAll+0x134>)
 800dfd8:	2200      	movs	r2, #0
 800dfda:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800dfdc:	4b10      	ldr	r3, [pc, #64]	; (800e020 <xTaskResumeAll+0x130>)
 800dfde:	681b      	ldr	r3, [r3, #0]
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	d009      	beq.n	800dff8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800dfe4:	2301      	movs	r3, #1
 800dfe6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800dfe8:	4b0f      	ldr	r3, [pc, #60]	; (800e028 <xTaskResumeAll+0x138>)
 800dfea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dfee:	601a      	str	r2, [r3, #0]
 800dff0:	f3bf 8f4f 	dsb	sy
 800dff4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800dff8:	f001 fabc 	bl	800f574 <vPortExitCritical>

	return xAlreadyYielded;
 800dffc:	68bb      	ldr	r3, [r7, #8]
}
 800dffe:	4618      	mov	r0, r3
 800e000:	3710      	adds	r7, #16
 800e002:	46bd      	mov	sp, r7
 800e004:	bd80      	pop	{r7, pc}
 800e006:	bf00      	nop
 800e008:	200011fc 	.word	0x200011fc
 800e00c:	200011d4 	.word	0x200011d4
 800e010:	20001194 	.word	0x20001194
 800e014:	200011dc 	.word	0x200011dc
 800e018:	20000d04 	.word	0x20000d04
 800e01c:	20000d00 	.word	0x20000d00
 800e020:	200011e8 	.word	0x200011e8
 800e024:	200011e4 	.word	0x200011e4
 800e028:	e000ed04 	.word	0xe000ed04

0800e02c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800e02c:	b480      	push	{r7}
 800e02e:	b083      	sub	sp, #12
 800e030:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800e032:	4b05      	ldr	r3, [pc, #20]	; (800e048 <xTaskGetTickCount+0x1c>)
 800e034:	681b      	ldr	r3, [r3, #0]
 800e036:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800e038:	687b      	ldr	r3, [r7, #4]
}
 800e03a:	4618      	mov	r0, r3
 800e03c:	370c      	adds	r7, #12
 800e03e:	46bd      	mov	sp, r7
 800e040:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e044:	4770      	bx	lr
 800e046:	bf00      	nop
 800e048:	200011d8 	.word	0x200011d8

0800e04c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e04c:	b580      	push	{r7, lr}
 800e04e:	b086      	sub	sp, #24
 800e050:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e052:	2300      	movs	r3, #0
 800e054:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e056:	4b4f      	ldr	r3, [pc, #316]	; (800e194 <xTaskIncrementTick+0x148>)
 800e058:	681b      	ldr	r3, [r3, #0]
 800e05a:	2b00      	cmp	r3, #0
 800e05c:	f040 808f 	bne.w	800e17e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e060:	4b4d      	ldr	r3, [pc, #308]	; (800e198 <xTaskIncrementTick+0x14c>)
 800e062:	681b      	ldr	r3, [r3, #0]
 800e064:	3301      	adds	r3, #1
 800e066:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e068:	4a4b      	ldr	r2, [pc, #300]	; (800e198 <xTaskIncrementTick+0x14c>)
 800e06a:	693b      	ldr	r3, [r7, #16]
 800e06c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e06e:	693b      	ldr	r3, [r7, #16]
 800e070:	2b00      	cmp	r3, #0
 800e072:	d120      	bne.n	800e0b6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800e074:	4b49      	ldr	r3, [pc, #292]	; (800e19c <xTaskIncrementTick+0x150>)
 800e076:	681b      	ldr	r3, [r3, #0]
 800e078:	681b      	ldr	r3, [r3, #0]
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	d00a      	beq.n	800e094 <xTaskIncrementTick+0x48>
	__asm volatile
 800e07e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e082:	f383 8811 	msr	BASEPRI, r3
 800e086:	f3bf 8f6f 	isb	sy
 800e08a:	f3bf 8f4f 	dsb	sy
 800e08e:	603b      	str	r3, [r7, #0]
}
 800e090:	bf00      	nop
 800e092:	e7fe      	b.n	800e092 <xTaskIncrementTick+0x46>
 800e094:	4b41      	ldr	r3, [pc, #260]	; (800e19c <xTaskIncrementTick+0x150>)
 800e096:	681b      	ldr	r3, [r3, #0]
 800e098:	60fb      	str	r3, [r7, #12]
 800e09a:	4b41      	ldr	r3, [pc, #260]	; (800e1a0 <xTaskIncrementTick+0x154>)
 800e09c:	681b      	ldr	r3, [r3, #0]
 800e09e:	4a3f      	ldr	r2, [pc, #252]	; (800e19c <xTaskIncrementTick+0x150>)
 800e0a0:	6013      	str	r3, [r2, #0]
 800e0a2:	4a3f      	ldr	r2, [pc, #252]	; (800e1a0 <xTaskIncrementTick+0x154>)
 800e0a4:	68fb      	ldr	r3, [r7, #12]
 800e0a6:	6013      	str	r3, [r2, #0]
 800e0a8:	4b3e      	ldr	r3, [pc, #248]	; (800e1a4 <xTaskIncrementTick+0x158>)
 800e0aa:	681b      	ldr	r3, [r3, #0]
 800e0ac:	3301      	adds	r3, #1
 800e0ae:	4a3d      	ldr	r2, [pc, #244]	; (800e1a4 <xTaskIncrementTick+0x158>)
 800e0b0:	6013      	str	r3, [r2, #0]
 800e0b2:	f000 fb6f 	bl	800e794 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e0b6:	4b3c      	ldr	r3, [pc, #240]	; (800e1a8 <xTaskIncrementTick+0x15c>)
 800e0b8:	681b      	ldr	r3, [r3, #0]
 800e0ba:	693a      	ldr	r2, [r7, #16]
 800e0bc:	429a      	cmp	r2, r3
 800e0be:	d349      	bcc.n	800e154 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e0c0:	4b36      	ldr	r3, [pc, #216]	; (800e19c <xTaskIncrementTick+0x150>)
 800e0c2:	681b      	ldr	r3, [r3, #0]
 800e0c4:	681b      	ldr	r3, [r3, #0]
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	d104      	bne.n	800e0d4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e0ca:	4b37      	ldr	r3, [pc, #220]	; (800e1a8 <xTaskIncrementTick+0x15c>)
 800e0cc:	f04f 32ff 	mov.w	r2, #4294967295
 800e0d0:	601a      	str	r2, [r3, #0]
					break;
 800e0d2:	e03f      	b.n	800e154 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e0d4:	4b31      	ldr	r3, [pc, #196]	; (800e19c <xTaskIncrementTick+0x150>)
 800e0d6:	681b      	ldr	r3, [r3, #0]
 800e0d8:	68db      	ldr	r3, [r3, #12]
 800e0da:	68db      	ldr	r3, [r3, #12]
 800e0dc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e0de:	68bb      	ldr	r3, [r7, #8]
 800e0e0:	685b      	ldr	r3, [r3, #4]
 800e0e2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e0e4:	693a      	ldr	r2, [r7, #16]
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	429a      	cmp	r2, r3
 800e0ea:	d203      	bcs.n	800e0f4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e0ec:	4a2e      	ldr	r2, [pc, #184]	; (800e1a8 <xTaskIncrementTick+0x15c>)
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e0f2:	e02f      	b.n	800e154 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e0f4:	68bb      	ldr	r3, [r7, #8]
 800e0f6:	3304      	adds	r3, #4
 800e0f8:	4618      	mov	r0, r3
 800e0fa:	f7fe fbff 	bl	800c8fc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e0fe:	68bb      	ldr	r3, [r7, #8]
 800e100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e102:	2b00      	cmp	r3, #0
 800e104:	d004      	beq.n	800e110 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e106:	68bb      	ldr	r3, [r7, #8]
 800e108:	3318      	adds	r3, #24
 800e10a:	4618      	mov	r0, r3
 800e10c:	f7fe fbf6 	bl	800c8fc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e110:	68bb      	ldr	r3, [r7, #8]
 800e112:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e114:	4b25      	ldr	r3, [pc, #148]	; (800e1ac <xTaskIncrementTick+0x160>)
 800e116:	681b      	ldr	r3, [r3, #0]
 800e118:	429a      	cmp	r2, r3
 800e11a:	d903      	bls.n	800e124 <xTaskIncrementTick+0xd8>
 800e11c:	68bb      	ldr	r3, [r7, #8]
 800e11e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e120:	4a22      	ldr	r2, [pc, #136]	; (800e1ac <xTaskIncrementTick+0x160>)
 800e122:	6013      	str	r3, [r2, #0]
 800e124:	68bb      	ldr	r3, [r7, #8]
 800e126:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e128:	4613      	mov	r3, r2
 800e12a:	009b      	lsls	r3, r3, #2
 800e12c:	4413      	add	r3, r2
 800e12e:	009b      	lsls	r3, r3, #2
 800e130:	4a1f      	ldr	r2, [pc, #124]	; (800e1b0 <xTaskIncrementTick+0x164>)
 800e132:	441a      	add	r2, r3
 800e134:	68bb      	ldr	r3, [r7, #8]
 800e136:	3304      	adds	r3, #4
 800e138:	4619      	mov	r1, r3
 800e13a:	4610      	mov	r0, r2
 800e13c:	f7fe fb81 	bl	800c842 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e140:	68bb      	ldr	r3, [r7, #8]
 800e142:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e144:	4b1b      	ldr	r3, [pc, #108]	; (800e1b4 <xTaskIncrementTick+0x168>)
 800e146:	681b      	ldr	r3, [r3, #0]
 800e148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e14a:	429a      	cmp	r2, r3
 800e14c:	d3b8      	bcc.n	800e0c0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800e14e:	2301      	movs	r3, #1
 800e150:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e152:	e7b5      	b.n	800e0c0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e154:	4b17      	ldr	r3, [pc, #92]	; (800e1b4 <xTaskIncrementTick+0x168>)
 800e156:	681b      	ldr	r3, [r3, #0]
 800e158:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e15a:	4915      	ldr	r1, [pc, #84]	; (800e1b0 <xTaskIncrementTick+0x164>)
 800e15c:	4613      	mov	r3, r2
 800e15e:	009b      	lsls	r3, r3, #2
 800e160:	4413      	add	r3, r2
 800e162:	009b      	lsls	r3, r3, #2
 800e164:	440b      	add	r3, r1
 800e166:	681b      	ldr	r3, [r3, #0]
 800e168:	2b01      	cmp	r3, #1
 800e16a:	d901      	bls.n	800e170 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800e16c:	2301      	movs	r3, #1
 800e16e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800e170:	4b11      	ldr	r3, [pc, #68]	; (800e1b8 <xTaskIncrementTick+0x16c>)
 800e172:	681b      	ldr	r3, [r3, #0]
 800e174:	2b00      	cmp	r3, #0
 800e176:	d007      	beq.n	800e188 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800e178:	2301      	movs	r3, #1
 800e17a:	617b      	str	r3, [r7, #20]
 800e17c:	e004      	b.n	800e188 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800e17e:	4b0f      	ldr	r3, [pc, #60]	; (800e1bc <xTaskIncrementTick+0x170>)
 800e180:	681b      	ldr	r3, [r3, #0]
 800e182:	3301      	adds	r3, #1
 800e184:	4a0d      	ldr	r2, [pc, #52]	; (800e1bc <xTaskIncrementTick+0x170>)
 800e186:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800e188:	697b      	ldr	r3, [r7, #20]
}
 800e18a:	4618      	mov	r0, r3
 800e18c:	3718      	adds	r7, #24
 800e18e:	46bd      	mov	sp, r7
 800e190:	bd80      	pop	{r7, pc}
 800e192:	bf00      	nop
 800e194:	200011fc 	.word	0x200011fc
 800e198:	200011d8 	.word	0x200011d8
 800e19c:	2000118c 	.word	0x2000118c
 800e1a0:	20001190 	.word	0x20001190
 800e1a4:	200011ec 	.word	0x200011ec
 800e1a8:	200011f4 	.word	0x200011f4
 800e1ac:	200011dc 	.word	0x200011dc
 800e1b0:	20000d04 	.word	0x20000d04
 800e1b4:	20000d00 	.word	0x20000d00
 800e1b8:	200011e8 	.word	0x200011e8
 800e1bc:	200011e4 	.word	0x200011e4

0800e1c0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e1c0:	b480      	push	{r7}
 800e1c2:	b085      	sub	sp, #20
 800e1c4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e1c6:	4b28      	ldr	r3, [pc, #160]	; (800e268 <vTaskSwitchContext+0xa8>)
 800e1c8:	681b      	ldr	r3, [r3, #0]
 800e1ca:	2b00      	cmp	r3, #0
 800e1cc:	d003      	beq.n	800e1d6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e1ce:	4b27      	ldr	r3, [pc, #156]	; (800e26c <vTaskSwitchContext+0xac>)
 800e1d0:	2201      	movs	r2, #1
 800e1d2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e1d4:	e041      	b.n	800e25a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800e1d6:	4b25      	ldr	r3, [pc, #148]	; (800e26c <vTaskSwitchContext+0xac>)
 800e1d8:	2200      	movs	r2, #0
 800e1da:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e1dc:	4b24      	ldr	r3, [pc, #144]	; (800e270 <vTaskSwitchContext+0xb0>)
 800e1de:	681b      	ldr	r3, [r3, #0]
 800e1e0:	60fb      	str	r3, [r7, #12]
 800e1e2:	e010      	b.n	800e206 <vTaskSwitchContext+0x46>
 800e1e4:	68fb      	ldr	r3, [r7, #12]
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	d10a      	bne.n	800e200 <vTaskSwitchContext+0x40>
	__asm volatile
 800e1ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1ee:	f383 8811 	msr	BASEPRI, r3
 800e1f2:	f3bf 8f6f 	isb	sy
 800e1f6:	f3bf 8f4f 	dsb	sy
 800e1fa:	607b      	str	r3, [r7, #4]
}
 800e1fc:	bf00      	nop
 800e1fe:	e7fe      	b.n	800e1fe <vTaskSwitchContext+0x3e>
 800e200:	68fb      	ldr	r3, [r7, #12]
 800e202:	3b01      	subs	r3, #1
 800e204:	60fb      	str	r3, [r7, #12]
 800e206:	491b      	ldr	r1, [pc, #108]	; (800e274 <vTaskSwitchContext+0xb4>)
 800e208:	68fa      	ldr	r2, [r7, #12]
 800e20a:	4613      	mov	r3, r2
 800e20c:	009b      	lsls	r3, r3, #2
 800e20e:	4413      	add	r3, r2
 800e210:	009b      	lsls	r3, r3, #2
 800e212:	440b      	add	r3, r1
 800e214:	681b      	ldr	r3, [r3, #0]
 800e216:	2b00      	cmp	r3, #0
 800e218:	d0e4      	beq.n	800e1e4 <vTaskSwitchContext+0x24>
 800e21a:	68fa      	ldr	r2, [r7, #12]
 800e21c:	4613      	mov	r3, r2
 800e21e:	009b      	lsls	r3, r3, #2
 800e220:	4413      	add	r3, r2
 800e222:	009b      	lsls	r3, r3, #2
 800e224:	4a13      	ldr	r2, [pc, #76]	; (800e274 <vTaskSwitchContext+0xb4>)
 800e226:	4413      	add	r3, r2
 800e228:	60bb      	str	r3, [r7, #8]
 800e22a:	68bb      	ldr	r3, [r7, #8]
 800e22c:	685b      	ldr	r3, [r3, #4]
 800e22e:	685a      	ldr	r2, [r3, #4]
 800e230:	68bb      	ldr	r3, [r7, #8]
 800e232:	605a      	str	r2, [r3, #4]
 800e234:	68bb      	ldr	r3, [r7, #8]
 800e236:	685a      	ldr	r2, [r3, #4]
 800e238:	68bb      	ldr	r3, [r7, #8]
 800e23a:	3308      	adds	r3, #8
 800e23c:	429a      	cmp	r2, r3
 800e23e:	d104      	bne.n	800e24a <vTaskSwitchContext+0x8a>
 800e240:	68bb      	ldr	r3, [r7, #8]
 800e242:	685b      	ldr	r3, [r3, #4]
 800e244:	685a      	ldr	r2, [r3, #4]
 800e246:	68bb      	ldr	r3, [r7, #8]
 800e248:	605a      	str	r2, [r3, #4]
 800e24a:	68bb      	ldr	r3, [r7, #8]
 800e24c:	685b      	ldr	r3, [r3, #4]
 800e24e:	68db      	ldr	r3, [r3, #12]
 800e250:	4a09      	ldr	r2, [pc, #36]	; (800e278 <vTaskSwitchContext+0xb8>)
 800e252:	6013      	str	r3, [r2, #0]
 800e254:	4a06      	ldr	r2, [pc, #24]	; (800e270 <vTaskSwitchContext+0xb0>)
 800e256:	68fb      	ldr	r3, [r7, #12]
 800e258:	6013      	str	r3, [r2, #0]
}
 800e25a:	bf00      	nop
 800e25c:	3714      	adds	r7, #20
 800e25e:	46bd      	mov	sp, r7
 800e260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e264:	4770      	bx	lr
 800e266:	bf00      	nop
 800e268:	200011fc 	.word	0x200011fc
 800e26c:	200011e8 	.word	0x200011e8
 800e270:	200011dc 	.word	0x200011dc
 800e274:	20000d04 	.word	0x20000d04
 800e278:	20000d00 	.word	0x20000d00

0800e27c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e27c:	b580      	push	{r7, lr}
 800e27e:	b084      	sub	sp, #16
 800e280:	af00      	add	r7, sp, #0
 800e282:	6078      	str	r0, [r7, #4]
 800e284:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	2b00      	cmp	r3, #0
 800e28a:	d10a      	bne.n	800e2a2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800e28c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e290:	f383 8811 	msr	BASEPRI, r3
 800e294:	f3bf 8f6f 	isb	sy
 800e298:	f3bf 8f4f 	dsb	sy
 800e29c:	60fb      	str	r3, [r7, #12]
}
 800e29e:	bf00      	nop
 800e2a0:	e7fe      	b.n	800e2a0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e2a2:	4b07      	ldr	r3, [pc, #28]	; (800e2c0 <vTaskPlaceOnEventList+0x44>)
 800e2a4:	681b      	ldr	r3, [r3, #0]
 800e2a6:	3318      	adds	r3, #24
 800e2a8:	4619      	mov	r1, r3
 800e2aa:	6878      	ldr	r0, [r7, #4]
 800e2ac:	f7fe faed 	bl	800c88a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e2b0:	2101      	movs	r1, #1
 800e2b2:	6838      	ldr	r0, [r7, #0]
 800e2b4:	f000 fc40 	bl	800eb38 <prvAddCurrentTaskToDelayedList>
}
 800e2b8:	bf00      	nop
 800e2ba:	3710      	adds	r7, #16
 800e2bc:	46bd      	mov	sp, r7
 800e2be:	bd80      	pop	{r7, pc}
 800e2c0:	20000d00 	.word	0x20000d00

0800e2c4 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 800e2c4:	b580      	push	{r7, lr}
 800e2c6:	b086      	sub	sp, #24
 800e2c8:	af00      	add	r7, sp, #0
 800e2ca:	60f8      	str	r0, [r7, #12]
 800e2cc:	60b9      	str	r1, [r7, #8]
 800e2ce:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 800e2d0:	68fb      	ldr	r3, [r7, #12]
 800e2d2:	2b00      	cmp	r3, #0
 800e2d4:	d10a      	bne.n	800e2ec <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 800e2d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2da:	f383 8811 	msr	BASEPRI, r3
 800e2de:	f3bf 8f6f 	isb	sy
 800e2e2:	f3bf 8f4f 	dsb	sy
 800e2e6:	617b      	str	r3, [r7, #20]
}
 800e2e8:	bf00      	nop
 800e2ea:	e7fe      	b.n	800e2ea <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 800e2ec:	4b11      	ldr	r3, [pc, #68]	; (800e334 <vTaskPlaceOnUnorderedEventList+0x70>)
 800e2ee:	681b      	ldr	r3, [r3, #0]
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	d10a      	bne.n	800e30a <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 800e2f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2f8:	f383 8811 	msr	BASEPRI, r3
 800e2fc:	f3bf 8f6f 	isb	sy
 800e300:	f3bf 8f4f 	dsb	sy
 800e304:	613b      	str	r3, [r7, #16]
}
 800e306:	bf00      	nop
 800e308:	e7fe      	b.n	800e308 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800e30a:	4b0b      	ldr	r3, [pc, #44]	; (800e338 <vTaskPlaceOnUnorderedEventList+0x74>)
 800e30c:	681b      	ldr	r3, [r3, #0]
 800e30e:	68ba      	ldr	r2, [r7, #8]
 800e310:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800e314:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e316:	4b08      	ldr	r3, [pc, #32]	; (800e338 <vTaskPlaceOnUnorderedEventList+0x74>)
 800e318:	681b      	ldr	r3, [r3, #0]
 800e31a:	3318      	adds	r3, #24
 800e31c:	4619      	mov	r1, r3
 800e31e:	68f8      	ldr	r0, [r7, #12]
 800e320:	f7fe fa8f 	bl	800c842 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e324:	2101      	movs	r1, #1
 800e326:	6878      	ldr	r0, [r7, #4]
 800e328:	f000 fc06 	bl	800eb38 <prvAddCurrentTaskToDelayedList>
}
 800e32c:	bf00      	nop
 800e32e:	3718      	adds	r7, #24
 800e330:	46bd      	mov	sp, r7
 800e332:	bd80      	pop	{r7, pc}
 800e334:	200011fc 	.word	0x200011fc
 800e338:	20000d00 	.word	0x20000d00

0800e33c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e33c:	b580      	push	{r7, lr}
 800e33e:	b086      	sub	sp, #24
 800e340:	af00      	add	r7, sp, #0
 800e342:	60f8      	str	r0, [r7, #12]
 800e344:	60b9      	str	r1, [r7, #8]
 800e346:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800e348:	68fb      	ldr	r3, [r7, #12]
 800e34a:	2b00      	cmp	r3, #0
 800e34c:	d10a      	bne.n	800e364 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800e34e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e352:	f383 8811 	msr	BASEPRI, r3
 800e356:	f3bf 8f6f 	isb	sy
 800e35a:	f3bf 8f4f 	dsb	sy
 800e35e:	617b      	str	r3, [r7, #20]
}
 800e360:	bf00      	nop
 800e362:	e7fe      	b.n	800e362 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e364:	4b0a      	ldr	r3, [pc, #40]	; (800e390 <vTaskPlaceOnEventListRestricted+0x54>)
 800e366:	681b      	ldr	r3, [r3, #0]
 800e368:	3318      	adds	r3, #24
 800e36a:	4619      	mov	r1, r3
 800e36c:	68f8      	ldr	r0, [r7, #12]
 800e36e:	f7fe fa68 	bl	800c842 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	2b00      	cmp	r3, #0
 800e376:	d002      	beq.n	800e37e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800e378:	f04f 33ff 	mov.w	r3, #4294967295
 800e37c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800e37e:	6879      	ldr	r1, [r7, #4]
 800e380:	68b8      	ldr	r0, [r7, #8]
 800e382:	f000 fbd9 	bl	800eb38 <prvAddCurrentTaskToDelayedList>
	}
 800e386:	bf00      	nop
 800e388:	3718      	adds	r7, #24
 800e38a:	46bd      	mov	sp, r7
 800e38c:	bd80      	pop	{r7, pc}
 800e38e:	bf00      	nop
 800e390:	20000d00 	.word	0x20000d00

0800e394 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e394:	b580      	push	{r7, lr}
 800e396:	b086      	sub	sp, #24
 800e398:	af00      	add	r7, sp, #0
 800e39a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	68db      	ldr	r3, [r3, #12]
 800e3a0:	68db      	ldr	r3, [r3, #12]
 800e3a2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e3a4:	693b      	ldr	r3, [r7, #16]
 800e3a6:	2b00      	cmp	r3, #0
 800e3a8:	d10a      	bne.n	800e3c0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800e3aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3ae:	f383 8811 	msr	BASEPRI, r3
 800e3b2:	f3bf 8f6f 	isb	sy
 800e3b6:	f3bf 8f4f 	dsb	sy
 800e3ba:	60fb      	str	r3, [r7, #12]
}
 800e3bc:	bf00      	nop
 800e3be:	e7fe      	b.n	800e3be <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e3c0:	693b      	ldr	r3, [r7, #16]
 800e3c2:	3318      	adds	r3, #24
 800e3c4:	4618      	mov	r0, r3
 800e3c6:	f7fe fa99 	bl	800c8fc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e3ca:	4b1e      	ldr	r3, [pc, #120]	; (800e444 <xTaskRemoveFromEventList+0xb0>)
 800e3cc:	681b      	ldr	r3, [r3, #0]
 800e3ce:	2b00      	cmp	r3, #0
 800e3d0:	d11d      	bne.n	800e40e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e3d2:	693b      	ldr	r3, [r7, #16]
 800e3d4:	3304      	adds	r3, #4
 800e3d6:	4618      	mov	r0, r3
 800e3d8:	f7fe fa90 	bl	800c8fc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e3dc:	693b      	ldr	r3, [r7, #16]
 800e3de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e3e0:	4b19      	ldr	r3, [pc, #100]	; (800e448 <xTaskRemoveFromEventList+0xb4>)
 800e3e2:	681b      	ldr	r3, [r3, #0]
 800e3e4:	429a      	cmp	r2, r3
 800e3e6:	d903      	bls.n	800e3f0 <xTaskRemoveFromEventList+0x5c>
 800e3e8:	693b      	ldr	r3, [r7, #16]
 800e3ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3ec:	4a16      	ldr	r2, [pc, #88]	; (800e448 <xTaskRemoveFromEventList+0xb4>)
 800e3ee:	6013      	str	r3, [r2, #0]
 800e3f0:	693b      	ldr	r3, [r7, #16]
 800e3f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e3f4:	4613      	mov	r3, r2
 800e3f6:	009b      	lsls	r3, r3, #2
 800e3f8:	4413      	add	r3, r2
 800e3fa:	009b      	lsls	r3, r3, #2
 800e3fc:	4a13      	ldr	r2, [pc, #76]	; (800e44c <xTaskRemoveFromEventList+0xb8>)
 800e3fe:	441a      	add	r2, r3
 800e400:	693b      	ldr	r3, [r7, #16]
 800e402:	3304      	adds	r3, #4
 800e404:	4619      	mov	r1, r3
 800e406:	4610      	mov	r0, r2
 800e408:	f7fe fa1b 	bl	800c842 <vListInsertEnd>
 800e40c:	e005      	b.n	800e41a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e40e:	693b      	ldr	r3, [r7, #16]
 800e410:	3318      	adds	r3, #24
 800e412:	4619      	mov	r1, r3
 800e414:	480e      	ldr	r0, [pc, #56]	; (800e450 <xTaskRemoveFromEventList+0xbc>)
 800e416:	f7fe fa14 	bl	800c842 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e41a:	693b      	ldr	r3, [r7, #16]
 800e41c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e41e:	4b0d      	ldr	r3, [pc, #52]	; (800e454 <xTaskRemoveFromEventList+0xc0>)
 800e420:	681b      	ldr	r3, [r3, #0]
 800e422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e424:	429a      	cmp	r2, r3
 800e426:	d905      	bls.n	800e434 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e428:	2301      	movs	r3, #1
 800e42a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e42c:	4b0a      	ldr	r3, [pc, #40]	; (800e458 <xTaskRemoveFromEventList+0xc4>)
 800e42e:	2201      	movs	r2, #1
 800e430:	601a      	str	r2, [r3, #0]
 800e432:	e001      	b.n	800e438 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800e434:	2300      	movs	r3, #0
 800e436:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e438:	697b      	ldr	r3, [r7, #20]
}
 800e43a:	4618      	mov	r0, r3
 800e43c:	3718      	adds	r7, #24
 800e43e:	46bd      	mov	sp, r7
 800e440:	bd80      	pop	{r7, pc}
 800e442:	bf00      	nop
 800e444:	200011fc 	.word	0x200011fc
 800e448:	200011dc 	.word	0x200011dc
 800e44c:	20000d04 	.word	0x20000d04
 800e450:	20001194 	.word	0x20001194
 800e454:	20000d00 	.word	0x20000d00
 800e458:	200011e8 	.word	0x200011e8

0800e45c <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 800e45c:	b580      	push	{r7, lr}
 800e45e:	b086      	sub	sp, #24
 800e460:	af00      	add	r7, sp, #0
 800e462:	6078      	str	r0, [r7, #4]
 800e464:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 800e466:	4b29      	ldr	r3, [pc, #164]	; (800e50c <vTaskRemoveFromUnorderedEventList+0xb0>)
 800e468:	681b      	ldr	r3, [r3, #0]
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	d10a      	bne.n	800e484 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 800e46e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e472:	f383 8811 	msr	BASEPRI, r3
 800e476:	f3bf 8f6f 	isb	sy
 800e47a:	f3bf 8f4f 	dsb	sy
 800e47e:	613b      	str	r3, [r7, #16]
}
 800e480:	bf00      	nop
 800e482:	e7fe      	b.n	800e482 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800e484:	683b      	ldr	r3, [r7, #0]
 800e486:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	68db      	ldr	r3, [r3, #12]
 800e492:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 800e494:	697b      	ldr	r3, [r7, #20]
 800e496:	2b00      	cmp	r3, #0
 800e498:	d10a      	bne.n	800e4b0 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 800e49a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e49e:	f383 8811 	msr	BASEPRI, r3
 800e4a2:	f3bf 8f6f 	isb	sy
 800e4a6:	f3bf 8f4f 	dsb	sy
 800e4aa:	60fb      	str	r3, [r7, #12]
}
 800e4ac:	bf00      	nop
 800e4ae:	e7fe      	b.n	800e4ae <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 800e4b0:	6878      	ldr	r0, [r7, #4]
 800e4b2:	f7fe fa23 	bl	800c8fc <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e4b6:	697b      	ldr	r3, [r7, #20]
 800e4b8:	3304      	adds	r3, #4
 800e4ba:	4618      	mov	r0, r3
 800e4bc:	f7fe fa1e 	bl	800c8fc <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 800e4c0:	697b      	ldr	r3, [r7, #20]
 800e4c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e4c4:	4b12      	ldr	r3, [pc, #72]	; (800e510 <vTaskRemoveFromUnorderedEventList+0xb4>)
 800e4c6:	681b      	ldr	r3, [r3, #0]
 800e4c8:	429a      	cmp	r2, r3
 800e4ca:	d903      	bls.n	800e4d4 <vTaskRemoveFromUnorderedEventList+0x78>
 800e4cc:	697b      	ldr	r3, [r7, #20]
 800e4ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e4d0:	4a0f      	ldr	r2, [pc, #60]	; (800e510 <vTaskRemoveFromUnorderedEventList+0xb4>)
 800e4d2:	6013      	str	r3, [r2, #0]
 800e4d4:	697b      	ldr	r3, [r7, #20]
 800e4d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e4d8:	4613      	mov	r3, r2
 800e4da:	009b      	lsls	r3, r3, #2
 800e4dc:	4413      	add	r3, r2
 800e4de:	009b      	lsls	r3, r3, #2
 800e4e0:	4a0c      	ldr	r2, [pc, #48]	; (800e514 <vTaskRemoveFromUnorderedEventList+0xb8>)
 800e4e2:	441a      	add	r2, r3
 800e4e4:	697b      	ldr	r3, [r7, #20]
 800e4e6:	3304      	adds	r3, #4
 800e4e8:	4619      	mov	r1, r3
 800e4ea:	4610      	mov	r0, r2
 800e4ec:	f7fe f9a9 	bl	800c842 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e4f0:	697b      	ldr	r3, [r7, #20]
 800e4f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e4f4:	4b08      	ldr	r3, [pc, #32]	; (800e518 <vTaskRemoveFromUnorderedEventList+0xbc>)
 800e4f6:	681b      	ldr	r3, [r3, #0]
 800e4f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e4fa:	429a      	cmp	r2, r3
 800e4fc:	d902      	bls.n	800e504 <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 800e4fe:	4b07      	ldr	r3, [pc, #28]	; (800e51c <vTaskRemoveFromUnorderedEventList+0xc0>)
 800e500:	2201      	movs	r2, #1
 800e502:	601a      	str	r2, [r3, #0]
	}
}
 800e504:	bf00      	nop
 800e506:	3718      	adds	r7, #24
 800e508:	46bd      	mov	sp, r7
 800e50a:	bd80      	pop	{r7, pc}
 800e50c:	200011fc 	.word	0x200011fc
 800e510:	200011dc 	.word	0x200011dc
 800e514:	20000d04 	.word	0x20000d04
 800e518:	20000d00 	.word	0x20000d00
 800e51c:	200011e8 	.word	0x200011e8

0800e520 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e520:	b480      	push	{r7}
 800e522:	b083      	sub	sp, #12
 800e524:	af00      	add	r7, sp, #0
 800e526:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e528:	4b06      	ldr	r3, [pc, #24]	; (800e544 <vTaskInternalSetTimeOutState+0x24>)
 800e52a:	681a      	ldr	r2, [r3, #0]
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e530:	4b05      	ldr	r3, [pc, #20]	; (800e548 <vTaskInternalSetTimeOutState+0x28>)
 800e532:	681a      	ldr	r2, [r3, #0]
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	605a      	str	r2, [r3, #4]
}
 800e538:	bf00      	nop
 800e53a:	370c      	adds	r7, #12
 800e53c:	46bd      	mov	sp, r7
 800e53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e542:	4770      	bx	lr
 800e544:	200011ec 	.word	0x200011ec
 800e548:	200011d8 	.word	0x200011d8

0800e54c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e54c:	b580      	push	{r7, lr}
 800e54e:	b088      	sub	sp, #32
 800e550:	af00      	add	r7, sp, #0
 800e552:	6078      	str	r0, [r7, #4]
 800e554:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	2b00      	cmp	r3, #0
 800e55a:	d10a      	bne.n	800e572 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800e55c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e560:	f383 8811 	msr	BASEPRI, r3
 800e564:	f3bf 8f6f 	isb	sy
 800e568:	f3bf 8f4f 	dsb	sy
 800e56c:	613b      	str	r3, [r7, #16]
}
 800e56e:	bf00      	nop
 800e570:	e7fe      	b.n	800e570 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800e572:	683b      	ldr	r3, [r7, #0]
 800e574:	2b00      	cmp	r3, #0
 800e576:	d10a      	bne.n	800e58e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800e578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e57c:	f383 8811 	msr	BASEPRI, r3
 800e580:	f3bf 8f6f 	isb	sy
 800e584:	f3bf 8f4f 	dsb	sy
 800e588:	60fb      	str	r3, [r7, #12]
}
 800e58a:	bf00      	nop
 800e58c:	e7fe      	b.n	800e58c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800e58e:	f000 ffc1 	bl	800f514 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e592:	4b1d      	ldr	r3, [pc, #116]	; (800e608 <xTaskCheckForTimeOut+0xbc>)
 800e594:	681b      	ldr	r3, [r3, #0]
 800e596:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	685b      	ldr	r3, [r3, #4]
 800e59c:	69ba      	ldr	r2, [r7, #24]
 800e59e:	1ad3      	subs	r3, r2, r3
 800e5a0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e5a2:	683b      	ldr	r3, [r7, #0]
 800e5a4:	681b      	ldr	r3, [r3, #0]
 800e5a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e5aa:	d102      	bne.n	800e5b2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e5ac:	2300      	movs	r3, #0
 800e5ae:	61fb      	str	r3, [r7, #28]
 800e5b0:	e023      	b.n	800e5fa <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	681a      	ldr	r2, [r3, #0]
 800e5b6:	4b15      	ldr	r3, [pc, #84]	; (800e60c <xTaskCheckForTimeOut+0xc0>)
 800e5b8:	681b      	ldr	r3, [r3, #0]
 800e5ba:	429a      	cmp	r2, r3
 800e5bc:	d007      	beq.n	800e5ce <xTaskCheckForTimeOut+0x82>
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	685b      	ldr	r3, [r3, #4]
 800e5c2:	69ba      	ldr	r2, [r7, #24]
 800e5c4:	429a      	cmp	r2, r3
 800e5c6:	d302      	bcc.n	800e5ce <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e5c8:	2301      	movs	r3, #1
 800e5ca:	61fb      	str	r3, [r7, #28]
 800e5cc:	e015      	b.n	800e5fa <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e5ce:	683b      	ldr	r3, [r7, #0]
 800e5d0:	681b      	ldr	r3, [r3, #0]
 800e5d2:	697a      	ldr	r2, [r7, #20]
 800e5d4:	429a      	cmp	r2, r3
 800e5d6:	d20b      	bcs.n	800e5f0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e5d8:	683b      	ldr	r3, [r7, #0]
 800e5da:	681a      	ldr	r2, [r3, #0]
 800e5dc:	697b      	ldr	r3, [r7, #20]
 800e5de:	1ad2      	subs	r2, r2, r3
 800e5e0:	683b      	ldr	r3, [r7, #0]
 800e5e2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e5e4:	6878      	ldr	r0, [r7, #4]
 800e5e6:	f7ff ff9b 	bl	800e520 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e5ea:	2300      	movs	r3, #0
 800e5ec:	61fb      	str	r3, [r7, #28]
 800e5ee:	e004      	b.n	800e5fa <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800e5f0:	683b      	ldr	r3, [r7, #0]
 800e5f2:	2200      	movs	r2, #0
 800e5f4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e5f6:	2301      	movs	r3, #1
 800e5f8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e5fa:	f000 ffbb 	bl	800f574 <vPortExitCritical>

	return xReturn;
 800e5fe:	69fb      	ldr	r3, [r7, #28]
}
 800e600:	4618      	mov	r0, r3
 800e602:	3720      	adds	r7, #32
 800e604:	46bd      	mov	sp, r7
 800e606:	bd80      	pop	{r7, pc}
 800e608:	200011d8 	.word	0x200011d8
 800e60c:	200011ec 	.word	0x200011ec

0800e610 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e610:	b480      	push	{r7}
 800e612:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e614:	4b03      	ldr	r3, [pc, #12]	; (800e624 <vTaskMissedYield+0x14>)
 800e616:	2201      	movs	r2, #1
 800e618:	601a      	str	r2, [r3, #0]
}
 800e61a:	bf00      	nop
 800e61c:	46bd      	mov	sp, r7
 800e61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e622:	4770      	bx	lr
 800e624:	200011e8 	.word	0x200011e8

0800e628 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e628:	b580      	push	{r7, lr}
 800e62a:	b082      	sub	sp, #8
 800e62c:	af00      	add	r7, sp, #0
 800e62e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e630:	f000 f852 	bl	800e6d8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e634:	4b06      	ldr	r3, [pc, #24]	; (800e650 <prvIdleTask+0x28>)
 800e636:	681b      	ldr	r3, [r3, #0]
 800e638:	2b01      	cmp	r3, #1
 800e63a:	d9f9      	bls.n	800e630 <prvIdleTask+0x8>
			{
				taskYIELD();
 800e63c:	4b05      	ldr	r3, [pc, #20]	; (800e654 <prvIdleTask+0x2c>)
 800e63e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e642:	601a      	str	r2, [r3, #0]
 800e644:	f3bf 8f4f 	dsb	sy
 800e648:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e64c:	e7f0      	b.n	800e630 <prvIdleTask+0x8>
 800e64e:	bf00      	nop
 800e650:	20000d04 	.word	0x20000d04
 800e654:	e000ed04 	.word	0xe000ed04

0800e658 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e658:	b580      	push	{r7, lr}
 800e65a:	b082      	sub	sp, #8
 800e65c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e65e:	2300      	movs	r3, #0
 800e660:	607b      	str	r3, [r7, #4]
 800e662:	e00c      	b.n	800e67e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e664:	687a      	ldr	r2, [r7, #4]
 800e666:	4613      	mov	r3, r2
 800e668:	009b      	lsls	r3, r3, #2
 800e66a:	4413      	add	r3, r2
 800e66c:	009b      	lsls	r3, r3, #2
 800e66e:	4a12      	ldr	r2, [pc, #72]	; (800e6b8 <prvInitialiseTaskLists+0x60>)
 800e670:	4413      	add	r3, r2
 800e672:	4618      	mov	r0, r3
 800e674:	f7fe f8b8 	bl	800c7e8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	3301      	adds	r3, #1
 800e67c:	607b      	str	r3, [r7, #4]
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	2b37      	cmp	r3, #55	; 0x37
 800e682:	d9ef      	bls.n	800e664 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e684:	480d      	ldr	r0, [pc, #52]	; (800e6bc <prvInitialiseTaskLists+0x64>)
 800e686:	f7fe f8af 	bl	800c7e8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e68a:	480d      	ldr	r0, [pc, #52]	; (800e6c0 <prvInitialiseTaskLists+0x68>)
 800e68c:	f7fe f8ac 	bl	800c7e8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e690:	480c      	ldr	r0, [pc, #48]	; (800e6c4 <prvInitialiseTaskLists+0x6c>)
 800e692:	f7fe f8a9 	bl	800c7e8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e696:	480c      	ldr	r0, [pc, #48]	; (800e6c8 <prvInitialiseTaskLists+0x70>)
 800e698:	f7fe f8a6 	bl	800c7e8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e69c:	480b      	ldr	r0, [pc, #44]	; (800e6cc <prvInitialiseTaskLists+0x74>)
 800e69e:	f7fe f8a3 	bl	800c7e8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e6a2:	4b0b      	ldr	r3, [pc, #44]	; (800e6d0 <prvInitialiseTaskLists+0x78>)
 800e6a4:	4a05      	ldr	r2, [pc, #20]	; (800e6bc <prvInitialiseTaskLists+0x64>)
 800e6a6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e6a8:	4b0a      	ldr	r3, [pc, #40]	; (800e6d4 <prvInitialiseTaskLists+0x7c>)
 800e6aa:	4a05      	ldr	r2, [pc, #20]	; (800e6c0 <prvInitialiseTaskLists+0x68>)
 800e6ac:	601a      	str	r2, [r3, #0]
}
 800e6ae:	bf00      	nop
 800e6b0:	3708      	adds	r7, #8
 800e6b2:	46bd      	mov	sp, r7
 800e6b4:	bd80      	pop	{r7, pc}
 800e6b6:	bf00      	nop
 800e6b8:	20000d04 	.word	0x20000d04
 800e6bc:	20001164 	.word	0x20001164
 800e6c0:	20001178 	.word	0x20001178
 800e6c4:	20001194 	.word	0x20001194
 800e6c8:	200011a8 	.word	0x200011a8
 800e6cc:	200011c0 	.word	0x200011c0
 800e6d0:	2000118c 	.word	0x2000118c
 800e6d4:	20001190 	.word	0x20001190

0800e6d8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e6d8:	b580      	push	{r7, lr}
 800e6da:	b082      	sub	sp, #8
 800e6dc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e6de:	e019      	b.n	800e714 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e6e0:	f000 ff18 	bl	800f514 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e6e4:	4b10      	ldr	r3, [pc, #64]	; (800e728 <prvCheckTasksWaitingTermination+0x50>)
 800e6e6:	68db      	ldr	r3, [r3, #12]
 800e6e8:	68db      	ldr	r3, [r3, #12]
 800e6ea:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	3304      	adds	r3, #4
 800e6f0:	4618      	mov	r0, r3
 800e6f2:	f7fe f903 	bl	800c8fc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e6f6:	4b0d      	ldr	r3, [pc, #52]	; (800e72c <prvCheckTasksWaitingTermination+0x54>)
 800e6f8:	681b      	ldr	r3, [r3, #0]
 800e6fa:	3b01      	subs	r3, #1
 800e6fc:	4a0b      	ldr	r2, [pc, #44]	; (800e72c <prvCheckTasksWaitingTermination+0x54>)
 800e6fe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e700:	4b0b      	ldr	r3, [pc, #44]	; (800e730 <prvCheckTasksWaitingTermination+0x58>)
 800e702:	681b      	ldr	r3, [r3, #0]
 800e704:	3b01      	subs	r3, #1
 800e706:	4a0a      	ldr	r2, [pc, #40]	; (800e730 <prvCheckTasksWaitingTermination+0x58>)
 800e708:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e70a:	f000 ff33 	bl	800f574 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e70e:	6878      	ldr	r0, [r7, #4]
 800e710:	f000 f810 	bl	800e734 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e714:	4b06      	ldr	r3, [pc, #24]	; (800e730 <prvCheckTasksWaitingTermination+0x58>)
 800e716:	681b      	ldr	r3, [r3, #0]
 800e718:	2b00      	cmp	r3, #0
 800e71a:	d1e1      	bne.n	800e6e0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e71c:	bf00      	nop
 800e71e:	bf00      	nop
 800e720:	3708      	adds	r7, #8
 800e722:	46bd      	mov	sp, r7
 800e724:	bd80      	pop	{r7, pc}
 800e726:	bf00      	nop
 800e728:	200011a8 	.word	0x200011a8
 800e72c:	200011d4 	.word	0x200011d4
 800e730:	200011bc 	.word	0x200011bc

0800e734 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e734:	b580      	push	{r7, lr}
 800e736:	b084      	sub	sp, #16
 800e738:	af00      	add	r7, sp, #0
 800e73a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800e742:	2b00      	cmp	r3, #0
 800e744:	d108      	bne.n	800e758 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e74a:	4618      	mov	r0, r3
 800e74c:	f001 f8d0 	bl	800f8f0 <vPortFree>
				vPortFree( pxTCB );
 800e750:	6878      	ldr	r0, [r7, #4]
 800e752:	f001 f8cd 	bl	800f8f0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e756:	e018      	b.n	800e78a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800e75e:	2b01      	cmp	r3, #1
 800e760:	d103      	bne.n	800e76a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800e762:	6878      	ldr	r0, [r7, #4]
 800e764:	f001 f8c4 	bl	800f8f0 <vPortFree>
	}
 800e768:	e00f      	b.n	800e78a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800e770:	2b02      	cmp	r3, #2
 800e772:	d00a      	beq.n	800e78a <prvDeleteTCB+0x56>
	__asm volatile
 800e774:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e778:	f383 8811 	msr	BASEPRI, r3
 800e77c:	f3bf 8f6f 	isb	sy
 800e780:	f3bf 8f4f 	dsb	sy
 800e784:	60fb      	str	r3, [r7, #12]
}
 800e786:	bf00      	nop
 800e788:	e7fe      	b.n	800e788 <prvDeleteTCB+0x54>
	}
 800e78a:	bf00      	nop
 800e78c:	3710      	adds	r7, #16
 800e78e:	46bd      	mov	sp, r7
 800e790:	bd80      	pop	{r7, pc}
	...

0800e794 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e794:	b480      	push	{r7}
 800e796:	b083      	sub	sp, #12
 800e798:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e79a:	4b0c      	ldr	r3, [pc, #48]	; (800e7cc <prvResetNextTaskUnblockTime+0x38>)
 800e79c:	681b      	ldr	r3, [r3, #0]
 800e79e:	681b      	ldr	r3, [r3, #0]
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	d104      	bne.n	800e7ae <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e7a4:	4b0a      	ldr	r3, [pc, #40]	; (800e7d0 <prvResetNextTaskUnblockTime+0x3c>)
 800e7a6:	f04f 32ff 	mov.w	r2, #4294967295
 800e7aa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e7ac:	e008      	b.n	800e7c0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e7ae:	4b07      	ldr	r3, [pc, #28]	; (800e7cc <prvResetNextTaskUnblockTime+0x38>)
 800e7b0:	681b      	ldr	r3, [r3, #0]
 800e7b2:	68db      	ldr	r3, [r3, #12]
 800e7b4:	68db      	ldr	r3, [r3, #12]
 800e7b6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	685b      	ldr	r3, [r3, #4]
 800e7bc:	4a04      	ldr	r2, [pc, #16]	; (800e7d0 <prvResetNextTaskUnblockTime+0x3c>)
 800e7be:	6013      	str	r3, [r2, #0]
}
 800e7c0:	bf00      	nop
 800e7c2:	370c      	adds	r7, #12
 800e7c4:	46bd      	mov	sp, r7
 800e7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7ca:	4770      	bx	lr
 800e7cc:	2000118c 	.word	0x2000118c
 800e7d0:	200011f4 	.word	0x200011f4

0800e7d4 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800e7d4:	b480      	push	{r7}
 800e7d6:	b083      	sub	sp, #12
 800e7d8:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800e7da:	4b05      	ldr	r3, [pc, #20]	; (800e7f0 <xTaskGetCurrentTaskHandle+0x1c>)
 800e7dc:	681b      	ldr	r3, [r3, #0]
 800e7de:	607b      	str	r3, [r7, #4]

		return xReturn;
 800e7e0:	687b      	ldr	r3, [r7, #4]
	}
 800e7e2:	4618      	mov	r0, r3
 800e7e4:	370c      	adds	r7, #12
 800e7e6:	46bd      	mov	sp, r7
 800e7e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7ec:	4770      	bx	lr
 800e7ee:	bf00      	nop
 800e7f0:	20000d00 	.word	0x20000d00

0800e7f4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e7f4:	b480      	push	{r7}
 800e7f6:	b083      	sub	sp, #12
 800e7f8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e7fa:	4b0b      	ldr	r3, [pc, #44]	; (800e828 <xTaskGetSchedulerState+0x34>)
 800e7fc:	681b      	ldr	r3, [r3, #0]
 800e7fe:	2b00      	cmp	r3, #0
 800e800:	d102      	bne.n	800e808 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e802:	2301      	movs	r3, #1
 800e804:	607b      	str	r3, [r7, #4]
 800e806:	e008      	b.n	800e81a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e808:	4b08      	ldr	r3, [pc, #32]	; (800e82c <xTaskGetSchedulerState+0x38>)
 800e80a:	681b      	ldr	r3, [r3, #0]
 800e80c:	2b00      	cmp	r3, #0
 800e80e:	d102      	bne.n	800e816 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e810:	2302      	movs	r3, #2
 800e812:	607b      	str	r3, [r7, #4]
 800e814:	e001      	b.n	800e81a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e816:	2300      	movs	r3, #0
 800e818:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e81a:	687b      	ldr	r3, [r7, #4]
	}
 800e81c:	4618      	mov	r0, r3
 800e81e:	370c      	adds	r7, #12
 800e820:	46bd      	mov	sp, r7
 800e822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e826:	4770      	bx	lr
 800e828:	200011e0 	.word	0x200011e0
 800e82c:	200011fc 	.word	0x200011fc

0800e830 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800e830:	b580      	push	{r7, lr}
 800e832:	b084      	sub	sp, #16
 800e834:	af00      	add	r7, sp, #0
 800e836:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800e83c:	2300      	movs	r3, #0
 800e83e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	2b00      	cmp	r3, #0
 800e844:	d051      	beq.n	800e8ea <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800e846:	68bb      	ldr	r3, [r7, #8]
 800e848:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e84a:	4b2a      	ldr	r3, [pc, #168]	; (800e8f4 <xTaskPriorityInherit+0xc4>)
 800e84c:	681b      	ldr	r3, [r3, #0]
 800e84e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e850:	429a      	cmp	r2, r3
 800e852:	d241      	bcs.n	800e8d8 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e854:	68bb      	ldr	r3, [r7, #8]
 800e856:	699b      	ldr	r3, [r3, #24]
 800e858:	2b00      	cmp	r3, #0
 800e85a:	db06      	blt.n	800e86a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e85c:	4b25      	ldr	r3, [pc, #148]	; (800e8f4 <xTaskPriorityInherit+0xc4>)
 800e85e:	681b      	ldr	r3, [r3, #0]
 800e860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e862:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e866:	68bb      	ldr	r3, [r7, #8]
 800e868:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800e86a:	68bb      	ldr	r3, [r7, #8]
 800e86c:	6959      	ldr	r1, [r3, #20]
 800e86e:	68bb      	ldr	r3, [r7, #8]
 800e870:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e872:	4613      	mov	r3, r2
 800e874:	009b      	lsls	r3, r3, #2
 800e876:	4413      	add	r3, r2
 800e878:	009b      	lsls	r3, r3, #2
 800e87a:	4a1f      	ldr	r2, [pc, #124]	; (800e8f8 <xTaskPriorityInherit+0xc8>)
 800e87c:	4413      	add	r3, r2
 800e87e:	4299      	cmp	r1, r3
 800e880:	d122      	bne.n	800e8c8 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e882:	68bb      	ldr	r3, [r7, #8]
 800e884:	3304      	adds	r3, #4
 800e886:	4618      	mov	r0, r3
 800e888:	f7fe f838 	bl	800c8fc <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e88c:	4b19      	ldr	r3, [pc, #100]	; (800e8f4 <xTaskPriorityInherit+0xc4>)
 800e88e:	681b      	ldr	r3, [r3, #0]
 800e890:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e892:	68bb      	ldr	r3, [r7, #8]
 800e894:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800e896:	68bb      	ldr	r3, [r7, #8]
 800e898:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e89a:	4b18      	ldr	r3, [pc, #96]	; (800e8fc <xTaskPriorityInherit+0xcc>)
 800e89c:	681b      	ldr	r3, [r3, #0]
 800e89e:	429a      	cmp	r2, r3
 800e8a0:	d903      	bls.n	800e8aa <xTaskPriorityInherit+0x7a>
 800e8a2:	68bb      	ldr	r3, [r7, #8]
 800e8a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e8a6:	4a15      	ldr	r2, [pc, #84]	; (800e8fc <xTaskPriorityInherit+0xcc>)
 800e8a8:	6013      	str	r3, [r2, #0]
 800e8aa:	68bb      	ldr	r3, [r7, #8]
 800e8ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e8ae:	4613      	mov	r3, r2
 800e8b0:	009b      	lsls	r3, r3, #2
 800e8b2:	4413      	add	r3, r2
 800e8b4:	009b      	lsls	r3, r3, #2
 800e8b6:	4a10      	ldr	r2, [pc, #64]	; (800e8f8 <xTaskPriorityInherit+0xc8>)
 800e8b8:	441a      	add	r2, r3
 800e8ba:	68bb      	ldr	r3, [r7, #8]
 800e8bc:	3304      	adds	r3, #4
 800e8be:	4619      	mov	r1, r3
 800e8c0:	4610      	mov	r0, r2
 800e8c2:	f7fd ffbe 	bl	800c842 <vListInsertEnd>
 800e8c6:	e004      	b.n	800e8d2 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e8c8:	4b0a      	ldr	r3, [pc, #40]	; (800e8f4 <xTaskPriorityInherit+0xc4>)
 800e8ca:	681b      	ldr	r3, [r3, #0]
 800e8cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e8ce:	68bb      	ldr	r3, [r7, #8]
 800e8d0:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800e8d2:	2301      	movs	r3, #1
 800e8d4:	60fb      	str	r3, [r7, #12]
 800e8d6:	e008      	b.n	800e8ea <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800e8d8:	68bb      	ldr	r3, [r7, #8]
 800e8da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e8dc:	4b05      	ldr	r3, [pc, #20]	; (800e8f4 <xTaskPriorityInherit+0xc4>)
 800e8de:	681b      	ldr	r3, [r3, #0]
 800e8e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e8e2:	429a      	cmp	r2, r3
 800e8e4:	d201      	bcs.n	800e8ea <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800e8e6:	2301      	movs	r3, #1
 800e8e8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e8ea:	68fb      	ldr	r3, [r7, #12]
	}
 800e8ec:	4618      	mov	r0, r3
 800e8ee:	3710      	adds	r7, #16
 800e8f0:	46bd      	mov	sp, r7
 800e8f2:	bd80      	pop	{r7, pc}
 800e8f4:	20000d00 	.word	0x20000d00
 800e8f8:	20000d04 	.word	0x20000d04
 800e8fc:	200011dc 	.word	0x200011dc

0800e900 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e900:	b580      	push	{r7, lr}
 800e902:	b086      	sub	sp, #24
 800e904:	af00      	add	r7, sp, #0
 800e906:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e90c:	2300      	movs	r3, #0
 800e90e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	2b00      	cmp	r3, #0
 800e914:	d056      	beq.n	800e9c4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e916:	4b2e      	ldr	r3, [pc, #184]	; (800e9d0 <xTaskPriorityDisinherit+0xd0>)
 800e918:	681b      	ldr	r3, [r3, #0]
 800e91a:	693a      	ldr	r2, [r7, #16]
 800e91c:	429a      	cmp	r2, r3
 800e91e:	d00a      	beq.n	800e936 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800e920:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e924:	f383 8811 	msr	BASEPRI, r3
 800e928:	f3bf 8f6f 	isb	sy
 800e92c:	f3bf 8f4f 	dsb	sy
 800e930:	60fb      	str	r3, [r7, #12]
}
 800e932:	bf00      	nop
 800e934:	e7fe      	b.n	800e934 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800e936:	693b      	ldr	r3, [r7, #16]
 800e938:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e93a:	2b00      	cmp	r3, #0
 800e93c:	d10a      	bne.n	800e954 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800e93e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e942:	f383 8811 	msr	BASEPRI, r3
 800e946:	f3bf 8f6f 	isb	sy
 800e94a:	f3bf 8f4f 	dsb	sy
 800e94e:	60bb      	str	r3, [r7, #8]
}
 800e950:	bf00      	nop
 800e952:	e7fe      	b.n	800e952 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800e954:	693b      	ldr	r3, [r7, #16]
 800e956:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e958:	1e5a      	subs	r2, r3, #1
 800e95a:	693b      	ldr	r3, [r7, #16]
 800e95c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e95e:	693b      	ldr	r3, [r7, #16]
 800e960:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e962:	693b      	ldr	r3, [r7, #16]
 800e964:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e966:	429a      	cmp	r2, r3
 800e968:	d02c      	beq.n	800e9c4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e96a:	693b      	ldr	r3, [r7, #16]
 800e96c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e96e:	2b00      	cmp	r3, #0
 800e970:	d128      	bne.n	800e9c4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e972:	693b      	ldr	r3, [r7, #16]
 800e974:	3304      	adds	r3, #4
 800e976:	4618      	mov	r0, r3
 800e978:	f7fd ffc0 	bl	800c8fc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e97c:	693b      	ldr	r3, [r7, #16]
 800e97e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e980:	693b      	ldr	r3, [r7, #16]
 800e982:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e984:	693b      	ldr	r3, [r7, #16]
 800e986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e988:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e98c:	693b      	ldr	r3, [r7, #16]
 800e98e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e990:	693b      	ldr	r3, [r7, #16]
 800e992:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e994:	4b0f      	ldr	r3, [pc, #60]	; (800e9d4 <xTaskPriorityDisinherit+0xd4>)
 800e996:	681b      	ldr	r3, [r3, #0]
 800e998:	429a      	cmp	r2, r3
 800e99a:	d903      	bls.n	800e9a4 <xTaskPriorityDisinherit+0xa4>
 800e99c:	693b      	ldr	r3, [r7, #16]
 800e99e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e9a0:	4a0c      	ldr	r2, [pc, #48]	; (800e9d4 <xTaskPriorityDisinherit+0xd4>)
 800e9a2:	6013      	str	r3, [r2, #0]
 800e9a4:	693b      	ldr	r3, [r7, #16]
 800e9a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e9a8:	4613      	mov	r3, r2
 800e9aa:	009b      	lsls	r3, r3, #2
 800e9ac:	4413      	add	r3, r2
 800e9ae:	009b      	lsls	r3, r3, #2
 800e9b0:	4a09      	ldr	r2, [pc, #36]	; (800e9d8 <xTaskPriorityDisinherit+0xd8>)
 800e9b2:	441a      	add	r2, r3
 800e9b4:	693b      	ldr	r3, [r7, #16]
 800e9b6:	3304      	adds	r3, #4
 800e9b8:	4619      	mov	r1, r3
 800e9ba:	4610      	mov	r0, r2
 800e9bc:	f7fd ff41 	bl	800c842 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e9c0:	2301      	movs	r3, #1
 800e9c2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e9c4:	697b      	ldr	r3, [r7, #20]
	}
 800e9c6:	4618      	mov	r0, r3
 800e9c8:	3718      	adds	r7, #24
 800e9ca:	46bd      	mov	sp, r7
 800e9cc:	bd80      	pop	{r7, pc}
 800e9ce:	bf00      	nop
 800e9d0:	20000d00 	.word	0x20000d00
 800e9d4:	200011dc 	.word	0x200011dc
 800e9d8:	20000d04 	.word	0x20000d04

0800e9dc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800e9dc:	b580      	push	{r7, lr}
 800e9de:	b088      	sub	sp, #32
 800e9e0:	af00      	add	r7, sp, #0
 800e9e2:	6078      	str	r0, [r7, #4]
 800e9e4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800e9ea:	2301      	movs	r3, #1
 800e9ec:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	d06a      	beq.n	800eaca <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800e9f4:	69bb      	ldr	r3, [r7, #24]
 800e9f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e9f8:	2b00      	cmp	r3, #0
 800e9fa:	d10a      	bne.n	800ea12 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800e9fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea00:	f383 8811 	msr	BASEPRI, r3
 800ea04:	f3bf 8f6f 	isb	sy
 800ea08:	f3bf 8f4f 	dsb	sy
 800ea0c:	60fb      	str	r3, [r7, #12]
}
 800ea0e:	bf00      	nop
 800ea10:	e7fe      	b.n	800ea10 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800ea12:	69bb      	ldr	r3, [r7, #24]
 800ea14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ea16:	683a      	ldr	r2, [r7, #0]
 800ea18:	429a      	cmp	r2, r3
 800ea1a:	d902      	bls.n	800ea22 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800ea1c:	683b      	ldr	r3, [r7, #0]
 800ea1e:	61fb      	str	r3, [r7, #28]
 800ea20:	e002      	b.n	800ea28 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800ea22:	69bb      	ldr	r3, [r7, #24]
 800ea24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ea26:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800ea28:	69bb      	ldr	r3, [r7, #24]
 800ea2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea2c:	69fa      	ldr	r2, [r7, #28]
 800ea2e:	429a      	cmp	r2, r3
 800ea30:	d04b      	beq.n	800eaca <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800ea32:	69bb      	ldr	r3, [r7, #24]
 800ea34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ea36:	697a      	ldr	r2, [r7, #20]
 800ea38:	429a      	cmp	r2, r3
 800ea3a:	d146      	bne.n	800eaca <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800ea3c:	4b25      	ldr	r3, [pc, #148]	; (800ead4 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800ea3e:	681b      	ldr	r3, [r3, #0]
 800ea40:	69ba      	ldr	r2, [r7, #24]
 800ea42:	429a      	cmp	r2, r3
 800ea44:	d10a      	bne.n	800ea5c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800ea46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea4a:	f383 8811 	msr	BASEPRI, r3
 800ea4e:	f3bf 8f6f 	isb	sy
 800ea52:	f3bf 8f4f 	dsb	sy
 800ea56:	60bb      	str	r3, [r7, #8]
}
 800ea58:	bf00      	nop
 800ea5a:	e7fe      	b.n	800ea5a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800ea5c:	69bb      	ldr	r3, [r7, #24]
 800ea5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea60:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800ea62:	69bb      	ldr	r3, [r7, #24]
 800ea64:	69fa      	ldr	r2, [r7, #28]
 800ea66:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ea68:	69bb      	ldr	r3, [r7, #24]
 800ea6a:	699b      	ldr	r3, [r3, #24]
 800ea6c:	2b00      	cmp	r3, #0
 800ea6e:	db04      	blt.n	800ea7a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ea70:	69fb      	ldr	r3, [r7, #28]
 800ea72:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ea76:	69bb      	ldr	r3, [r7, #24]
 800ea78:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ea7a:	69bb      	ldr	r3, [r7, #24]
 800ea7c:	6959      	ldr	r1, [r3, #20]
 800ea7e:	693a      	ldr	r2, [r7, #16]
 800ea80:	4613      	mov	r3, r2
 800ea82:	009b      	lsls	r3, r3, #2
 800ea84:	4413      	add	r3, r2
 800ea86:	009b      	lsls	r3, r3, #2
 800ea88:	4a13      	ldr	r2, [pc, #76]	; (800ead8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800ea8a:	4413      	add	r3, r2
 800ea8c:	4299      	cmp	r1, r3
 800ea8e:	d11c      	bne.n	800eaca <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ea90:	69bb      	ldr	r3, [r7, #24]
 800ea92:	3304      	adds	r3, #4
 800ea94:	4618      	mov	r0, r3
 800ea96:	f7fd ff31 	bl	800c8fc <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800ea9a:	69bb      	ldr	r3, [r7, #24]
 800ea9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea9e:	4b0f      	ldr	r3, [pc, #60]	; (800eadc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800eaa0:	681b      	ldr	r3, [r3, #0]
 800eaa2:	429a      	cmp	r2, r3
 800eaa4:	d903      	bls.n	800eaae <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800eaa6:	69bb      	ldr	r3, [r7, #24]
 800eaa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eaaa:	4a0c      	ldr	r2, [pc, #48]	; (800eadc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800eaac:	6013      	str	r3, [r2, #0]
 800eaae:	69bb      	ldr	r3, [r7, #24]
 800eab0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eab2:	4613      	mov	r3, r2
 800eab4:	009b      	lsls	r3, r3, #2
 800eab6:	4413      	add	r3, r2
 800eab8:	009b      	lsls	r3, r3, #2
 800eaba:	4a07      	ldr	r2, [pc, #28]	; (800ead8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800eabc:	441a      	add	r2, r3
 800eabe:	69bb      	ldr	r3, [r7, #24]
 800eac0:	3304      	adds	r3, #4
 800eac2:	4619      	mov	r1, r3
 800eac4:	4610      	mov	r0, r2
 800eac6:	f7fd febc 	bl	800c842 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800eaca:	bf00      	nop
 800eacc:	3720      	adds	r7, #32
 800eace:	46bd      	mov	sp, r7
 800ead0:	bd80      	pop	{r7, pc}
 800ead2:	bf00      	nop
 800ead4:	20000d00 	.word	0x20000d00
 800ead8:	20000d04 	.word	0x20000d04
 800eadc:	200011dc 	.word	0x200011dc

0800eae0 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 800eae0:	b480      	push	{r7}
 800eae2:	b083      	sub	sp, #12
 800eae4:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800eae6:	4b09      	ldr	r3, [pc, #36]	; (800eb0c <uxTaskResetEventItemValue+0x2c>)
 800eae8:	681b      	ldr	r3, [r3, #0]
 800eaea:	699b      	ldr	r3, [r3, #24]
 800eaec:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800eaee:	4b07      	ldr	r3, [pc, #28]	; (800eb0c <uxTaskResetEventItemValue+0x2c>)
 800eaf0:	681b      	ldr	r3, [r3, #0]
 800eaf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eaf4:	4b05      	ldr	r3, [pc, #20]	; (800eb0c <uxTaskResetEventItemValue+0x2c>)
 800eaf6:	681b      	ldr	r3, [r3, #0]
 800eaf8:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 800eafc:	619a      	str	r2, [r3, #24]

	return uxReturn;
 800eafe:	687b      	ldr	r3, [r7, #4]
}
 800eb00:	4618      	mov	r0, r3
 800eb02:	370c      	adds	r7, #12
 800eb04:	46bd      	mov	sp, r7
 800eb06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb0a:	4770      	bx	lr
 800eb0c:	20000d00 	.word	0x20000d00

0800eb10 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800eb10:	b480      	push	{r7}
 800eb12:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800eb14:	4b07      	ldr	r3, [pc, #28]	; (800eb34 <pvTaskIncrementMutexHeldCount+0x24>)
 800eb16:	681b      	ldr	r3, [r3, #0]
 800eb18:	2b00      	cmp	r3, #0
 800eb1a:	d004      	beq.n	800eb26 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800eb1c:	4b05      	ldr	r3, [pc, #20]	; (800eb34 <pvTaskIncrementMutexHeldCount+0x24>)
 800eb1e:	681b      	ldr	r3, [r3, #0]
 800eb20:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800eb22:	3201      	adds	r2, #1
 800eb24:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800eb26:	4b03      	ldr	r3, [pc, #12]	; (800eb34 <pvTaskIncrementMutexHeldCount+0x24>)
 800eb28:	681b      	ldr	r3, [r3, #0]
	}
 800eb2a:	4618      	mov	r0, r3
 800eb2c:	46bd      	mov	sp, r7
 800eb2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb32:	4770      	bx	lr
 800eb34:	20000d00 	.word	0x20000d00

0800eb38 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800eb38:	b580      	push	{r7, lr}
 800eb3a:	b084      	sub	sp, #16
 800eb3c:	af00      	add	r7, sp, #0
 800eb3e:	6078      	str	r0, [r7, #4]
 800eb40:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800eb42:	4b21      	ldr	r3, [pc, #132]	; (800ebc8 <prvAddCurrentTaskToDelayedList+0x90>)
 800eb44:	681b      	ldr	r3, [r3, #0]
 800eb46:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800eb48:	4b20      	ldr	r3, [pc, #128]	; (800ebcc <prvAddCurrentTaskToDelayedList+0x94>)
 800eb4a:	681b      	ldr	r3, [r3, #0]
 800eb4c:	3304      	adds	r3, #4
 800eb4e:	4618      	mov	r0, r3
 800eb50:	f7fd fed4 	bl	800c8fc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb5a:	d10a      	bne.n	800eb72 <prvAddCurrentTaskToDelayedList+0x3a>
 800eb5c:	683b      	ldr	r3, [r7, #0]
 800eb5e:	2b00      	cmp	r3, #0
 800eb60:	d007      	beq.n	800eb72 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800eb62:	4b1a      	ldr	r3, [pc, #104]	; (800ebcc <prvAddCurrentTaskToDelayedList+0x94>)
 800eb64:	681b      	ldr	r3, [r3, #0]
 800eb66:	3304      	adds	r3, #4
 800eb68:	4619      	mov	r1, r3
 800eb6a:	4819      	ldr	r0, [pc, #100]	; (800ebd0 <prvAddCurrentTaskToDelayedList+0x98>)
 800eb6c:	f7fd fe69 	bl	800c842 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800eb70:	e026      	b.n	800ebc0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800eb72:	68fa      	ldr	r2, [r7, #12]
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	4413      	add	r3, r2
 800eb78:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800eb7a:	4b14      	ldr	r3, [pc, #80]	; (800ebcc <prvAddCurrentTaskToDelayedList+0x94>)
 800eb7c:	681b      	ldr	r3, [r3, #0]
 800eb7e:	68ba      	ldr	r2, [r7, #8]
 800eb80:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800eb82:	68ba      	ldr	r2, [r7, #8]
 800eb84:	68fb      	ldr	r3, [r7, #12]
 800eb86:	429a      	cmp	r2, r3
 800eb88:	d209      	bcs.n	800eb9e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800eb8a:	4b12      	ldr	r3, [pc, #72]	; (800ebd4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800eb8c:	681a      	ldr	r2, [r3, #0]
 800eb8e:	4b0f      	ldr	r3, [pc, #60]	; (800ebcc <prvAddCurrentTaskToDelayedList+0x94>)
 800eb90:	681b      	ldr	r3, [r3, #0]
 800eb92:	3304      	adds	r3, #4
 800eb94:	4619      	mov	r1, r3
 800eb96:	4610      	mov	r0, r2
 800eb98:	f7fd fe77 	bl	800c88a <vListInsert>
}
 800eb9c:	e010      	b.n	800ebc0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800eb9e:	4b0e      	ldr	r3, [pc, #56]	; (800ebd8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800eba0:	681a      	ldr	r2, [r3, #0]
 800eba2:	4b0a      	ldr	r3, [pc, #40]	; (800ebcc <prvAddCurrentTaskToDelayedList+0x94>)
 800eba4:	681b      	ldr	r3, [r3, #0]
 800eba6:	3304      	adds	r3, #4
 800eba8:	4619      	mov	r1, r3
 800ebaa:	4610      	mov	r0, r2
 800ebac:	f7fd fe6d 	bl	800c88a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ebb0:	4b0a      	ldr	r3, [pc, #40]	; (800ebdc <prvAddCurrentTaskToDelayedList+0xa4>)
 800ebb2:	681b      	ldr	r3, [r3, #0]
 800ebb4:	68ba      	ldr	r2, [r7, #8]
 800ebb6:	429a      	cmp	r2, r3
 800ebb8:	d202      	bcs.n	800ebc0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800ebba:	4a08      	ldr	r2, [pc, #32]	; (800ebdc <prvAddCurrentTaskToDelayedList+0xa4>)
 800ebbc:	68bb      	ldr	r3, [r7, #8]
 800ebbe:	6013      	str	r3, [r2, #0]
}
 800ebc0:	bf00      	nop
 800ebc2:	3710      	adds	r7, #16
 800ebc4:	46bd      	mov	sp, r7
 800ebc6:	bd80      	pop	{r7, pc}
 800ebc8:	200011d8 	.word	0x200011d8
 800ebcc:	20000d00 	.word	0x20000d00
 800ebd0:	200011c0 	.word	0x200011c0
 800ebd4:	20001190 	.word	0x20001190
 800ebd8:	2000118c 	.word	0x2000118c
 800ebdc:	200011f4 	.word	0x200011f4

0800ebe0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800ebe0:	b580      	push	{r7, lr}
 800ebe2:	b08a      	sub	sp, #40	; 0x28
 800ebe4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800ebe6:	2300      	movs	r3, #0
 800ebe8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800ebea:	f000 fb07 	bl	800f1fc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800ebee:	4b1c      	ldr	r3, [pc, #112]	; (800ec60 <xTimerCreateTimerTask+0x80>)
 800ebf0:	681b      	ldr	r3, [r3, #0]
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	d021      	beq.n	800ec3a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800ebf6:	2300      	movs	r3, #0
 800ebf8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800ebfa:	2300      	movs	r3, #0
 800ebfc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ebfe:	1d3a      	adds	r2, r7, #4
 800ec00:	f107 0108 	add.w	r1, r7, #8
 800ec04:	f107 030c 	add.w	r3, r7, #12
 800ec08:	4618      	mov	r0, r3
 800ec0a:	f7fd fbe5 	bl	800c3d8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ec0e:	6879      	ldr	r1, [r7, #4]
 800ec10:	68bb      	ldr	r3, [r7, #8]
 800ec12:	68fa      	ldr	r2, [r7, #12]
 800ec14:	9202      	str	r2, [sp, #8]
 800ec16:	9301      	str	r3, [sp, #4]
 800ec18:	2302      	movs	r3, #2
 800ec1a:	9300      	str	r3, [sp, #0]
 800ec1c:	2300      	movs	r3, #0
 800ec1e:	460a      	mov	r2, r1
 800ec20:	4910      	ldr	r1, [pc, #64]	; (800ec64 <xTimerCreateTimerTask+0x84>)
 800ec22:	4811      	ldr	r0, [pc, #68]	; (800ec68 <xTimerCreateTimerTask+0x88>)
 800ec24:	f7fe fe14 	bl	800d850 <xTaskCreateStatic>
 800ec28:	4603      	mov	r3, r0
 800ec2a:	4a10      	ldr	r2, [pc, #64]	; (800ec6c <xTimerCreateTimerTask+0x8c>)
 800ec2c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800ec2e:	4b0f      	ldr	r3, [pc, #60]	; (800ec6c <xTimerCreateTimerTask+0x8c>)
 800ec30:	681b      	ldr	r3, [r3, #0]
 800ec32:	2b00      	cmp	r3, #0
 800ec34:	d001      	beq.n	800ec3a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800ec36:	2301      	movs	r3, #1
 800ec38:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ec3a:	697b      	ldr	r3, [r7, #20]
 800ec3c:	2b00      	cmp	r3, #0
 800ec3e:	d10a      	bne.n	800ec56 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800ec40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec44:	f383 8811 	msr	BASEPRI, r3
 800ec48:	f3bf 8f6f 	isb	sy
 800ec4c:	f3bf 8f4f 	dsb	sy
 800ec50:	613b      	str	r3, [r7, #16]
}
 800ec52:	bf00      	nop
 800ec54:	e7fe      	b.n	800ec54 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800ec56:	697b      	ldr	r3, [r7, #20]
}
 800ec58:	4618      	mov	r0, r3
 800ec5a:	3718      	adds	r7, #24
 800ec5c:	46bd      	mov	sp, r7
 800ec5e:	bd80      	pop	{r7, pc}
 800ec60:	20001230 	.word	0x20001230
 800ec64:	080142ac 	.word	0x080142ac
 800ec68:	0800eda5 	.word	0x0800eda5
 800ec6c:	20001234 	.word	0x20001234

0800ec70 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ec70:	b580      	push	{r7, lr}
 800ec72:	b08a      	sub	sp, #40	; 0x28
 800ec74:	af00      	add	r7, sp, #0
 800ec76:	60f8      	str	r0, [r7, #12]
 800ec78:	60b9      	str	r1, [r7, #8]
 800ec7a:	607a      	str	r2, [r7, #4]
 800ec7c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ec7e:	2300      	movs	r3, #0
 800ec80:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ec82:	68fb      	ldr	r3, [r7, #12]
 800ec84:	2b00      	cmp	r3, #0
 800ec86:	d10a      	bne.n	800ec9e <xTimerGenericCommand+0x2e>
	__asm volatile
 800ec88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec8c:	f383 8811 	msr	BASEPRI, r3
 800ec90:	f3bf 8f6f 	isb	sy
 800ec94:	f3bf 8f4f 	dsb	sy
 800ec98:	623b      	str	r3, [r7, #32]
}
 800ec9a:	bf00      	nop
 800ec9c:	e7fe      	b.n	800ec9c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800ec9e:	4b1a      	ldr	r3, [pc, #104]	; (800ed08 <xTimerGenericCommand+0x98>)
 800eca0:	681b      	ldr	r3, [r3, #0]
 800eca2:	2b00      	cmp	r3, #0
 800eca4:	d02a      	beq.n	800ecfc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800eca6:	68bb      	ldr	r3, [r7, #8]
 800eca8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ecae:	68fb      	ldr	r3, [r7, #12]
 800ecb0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ecb2:	68bb      	ldr	r3, [r7, #8]
 800ecb4:	2b05      	cmp	r3, #5
 800ecb6:	dc18      	bgt.n	800ecea <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ecb8:	f7ff fd9c 	bl	800e7f4 <xTaskGetSchedulerState>
 800ecbc:	4603      	mov	r3, r0
 800ecbe:	2b02      	cmp	r3, #2
 800ecc0:	d109      	bne.n	800ecd6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ecc2:	4b11      	ldr	r3, [pc, #68]	; (800ed08 <xTimerGenericCommand+0x98>)
 800ecc4:	6818      	ldr	r0, [r3, #0]
 800ecc6:	f107 0110 	add.w	r1, r7, #16
 800ecca:	2300      	movs	r3, #0
 800eccc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ecce:	f7fe f833 	bl	800cd38 <xQueueGenericSend>
 800ecd2:	6278      	str	r0, [r7, #36]	; 0x24
 800ecd4:	e012      	b.n	800ecfc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ecd6:	4b0c      	ldr	r3, [pc, #48]	; (800ed08 <xTimerGenericCommand+0x98>)
 800ecd8:	6818      	ldr	r0, [r3, #0]
 800ecda:	f107 0110 	add.w	r1, r7, #16
 800ecde:	2300      	movs	r3, #0
 800ece0:	2200      	movs	r2, #0
 800ece2:	f7fe f829 	bl	800cd38 <xQueueGenericSend>
 800ece6:	6278      	str	r0, [r7, #36]	; 0x24
 800ece8:	e008      	b.n	800ecfc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ecea:	4b07      	ldr	r3, [pc, #28]	; (800ed08 <xTimerGenericCommand+0x98>)
 800ecec:	6818      	ldr	r0, [r3, #0]
 800ecee:	f107 0110 	add.w	r1, r7, #16
 800ecf2:	2300      	movs	r3, #0
 800ecf4:	683a      	ldr	r2, [r7, #0]
 800ecf6:	f7fe f91d 	bl	800cf34 <xQueueGenericSendFromISR>
 800ecfa:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ecfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ecfe:	4618      	mov	r0, r3
 800ed00:	3728      	adds	r7, #40	; 0x28
 800ed02:	46bd      	mov	sp, r7
 800ed04:	bd80      	pop	{r7, pc}
 800ed06:	bf00      	nop
 800ed08:	20001230 	.word	0x20001230

0800ed0c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800ed0c:	b580      	push	{r7, lr}
 800ed0e:	b088      	sub	sp, #32
 800ed10:	af02      	add	r7, sp, #8
 800ed12:	6078      	str	r0, [r7, #4]
 800ed14:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ed16:	4b22      	ldr	r3, [pc, #136]	; (800eda0 <prvProcessExpiredTimer+0x94>)
 800ed18:	681b      	ldr	r3, [r3, #0]
 800ed1a:	68db      	ldr	r3, [r3, #12]
 800ed1c:	68db      	ldr	r3, [r3, #12]
 800ed1e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ed20:	697b      	ldr	r3, [r7, #20]
 800ed22:	3304      	adds	r3, #4
 800ed24:	4618      	mov	r0, r3
 800ed26:	f7fd fde9 	bl	800c8fc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ed2a:	697b      	ldr	r3, [r7, #20]
 800ed2c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ed30:	f003 0304 	and.w	r3, r3, #4
 800ed34:	2b00      	cmp	r3, #0
 800ed36:	d022      	beq.n	800ed7e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ed38:	697b      	ldr	r3, [r7, #20]
 800ed3a:	699a      	ldr	r2, [r3, #24]
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	18d1      	adds	r1, r2, r3
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	683a      	ldr	r2, [r7, #0]
 800ed44:	6978      	ldr	r0, [r7, #20]
 800ed46:	f000 f8d1 	bl	800eeec <prvInsertTimerInActiveList>
 800ed4a:	4603      	mov	r3, r0
 800ed4c:	2b00      	cmp	r3, #0
 800ed4e:	d01f      	beq.n	800ed90 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ed50:	2300      	movs	r3, #0
 800ed52:	9300      	str	r3, [sp, #0]
 800ed54:	2300      	movs	r3, #0
 800ed56:	687a      	ldr	r2, [r7, #4]
 800ed58:	2100      	movs	r1, #0
 800ed5a:	6978      	ldr	r0, [r7, #20]
 800ed5c:	f7ff ff88 	bl	800ec70 <xTimerGenericCommand>
 800ed60:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800ed62:	693b      	ldr	r3, [r7, #16]
 800ed64:	2b00      	cmp	r3, #0
 800ed66:	d113      	bne.n	800ed90 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800ed68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed6c:	f383 8811 	msr	BASEPRI, r3
 800ed70:	f3bf 8f6f 	isb	sy
 800ed74:	f3bf 8f4f 	dsb	sy
 800ed78:	60fb      	str	r3, [r7, #12]
}
 800ed7a:	bf00      	nop
 800ed7c:	e7fe      	b.n	800ed7c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ed7e:	697b      	ldr	r3, [r7, #20]
 800ed80:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ed84:	f023 0301 	bic.w	r3, r3, #1
 800ed88:	b2da      	uxtb	r2, r3
 800ed8a:	697b      	ldr	r3, [r7, #20]
 800ed8c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ed90:	697b      	ldr	r3, [r7, #20]
 800ed92:	6a1b      	ldr	r3, [r3, #32]
 800ed94:	6978      	ldr	r0, [r7, #20]
 800ed96:	4798      	blx	r3
}
 800ed98:	bf00      	nop
 800ed9a:	3718      	adds	r7, #24
 800ed9c:	46bd      	mov	sp, r7
 800ed9e:	bd80      	pop	{r7, pc}
 800eda0:	20001228 	.word	0x20001228

0800eda4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800eda4:	b580      	push	{r7, lr}
 800eda6:	b084      	sub	sp, #16
 800eda8:	af00      	add	r7, sp, #0
 800edaa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800edac:	f107 0308 	add.w	r3, r7, #8
 800edb0:	4618      	mov	r0, r3
 800edb2:	f000 f857 	bl	800ee64 <prvGetNextExpireTime>
 800edb6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800edb8:	68bb      	ldr	r3, [r7, #8]
 800edba:	4619      	mov	r1, r3
 800edbc:	68f8      	ldr	r0, [r7, #12]
 800edbe:	f000 f803 	bl	800edc8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800edc2:	f000 f8d5 	bl	800ef70 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800edc6:	e7f1      	b.n	800edac <prvTimerTask+0x8>

0800edc8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800edc8:	b580      	push	{r7, lr}
 800edca:	b084      	sub	sp, #16
 800edcc:	af00      	add	r7, sp, #0
 800edce:	6078      	str	r0, [r7, #4]
 800edd0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800edd2:	f7ff f87f 	bl	800ded4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800edd6:	f107 0308 	add.w	r3, r7, #8
 800edda:	4618      	mov	r0, r3
 800eddc:	f000 f866 	bl	800eeac <prvSampleTimeNow>
 800ede0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800ede2:	68bb      	ldr	r3, [r7, #8]
 800ede4:	2b00      	cmp	r3, #0
 800ede6:	d130      	bne.n	800ee4a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ede8:	683b      	ldr	r3, [r7, #0]
 800edea:	2b00      	cmp	r3, #0
 800edec:	d10a      	bne.n	800ee04 <prvProcessTimerOrBlockTask+0x3c>
 800edee:	687a      	ldr	r2, [r7, #4]
 800edf0:	68fb      	ldr	r3, [r7, #12]
 800edf2:	429a      	cmp	r2, r3
 800edf4:	d806      	bhi.n	800ee04 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800edf6:	f7ff f87b 	bl	800def0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800edfa:	68f9      	ldr	r1, [r7, #12]
 800edfc:	6878      	ldr	r0, [r7, #4]
 800edfe:	f7ff ff85 	bl	800ed0c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800ee02:	e024      	b.n	800ee4e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800ee04:	683b      	ldr	r3, [r7, #0]
 800ee06:	2b00      	cmp	r3, #0
 800ee08:	d008      	beq.n	800ee1c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ee0a:	4b13      	ldr	r3, [pc, #76]	; (800ee58 <prvProcessTimerOrBlockTask+0x90>)
 800ee0c:	681b      	ldr	r3, [r3, #0]
 800ee0e:	681b      	ldr	r3, [r3, #0]
 800ee10:	2b00      	cmp	r3, #0
 800ee12:	d101      	bne.n	800ee18 <prvProcessTimerOrBlockTask+0x50>
 800ee14:	2301      	movs	r3, #1
 800ee16:	e000      	b.n	800ee1a <prvProcessTimerOrBlockTask+0x52>
 800ee18:	2300      	movs	r3, #0
 800ee1a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ee1c:	4b0f      	ldr	r3, [pc, #60]	; (800ee5c <prvProcessTimerOrBlockTask+0x94>)
 800ee1e:	6818      	ldr	r0, [r3, #0]
 800ee20:	687a      	ldr	r2, [r7, #4]
 800ee22:	68fb      	ldr	r3, [r7, #12]
 800ee24:	1ad3      	subs	r3, r2, r3
 800ee26:	683a      	ldr	r2, [r7, #0]
 800ee28:	4619      	mov	r1, r3
 800ee2a:	f7fe fcdd 	bl	800d7e8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ee2e:	f7ff f85f 	bl	800def0 <xTaskResumeAll>
 800ee32:	4603      	mov	r3, r0
 800ee34:	2b00      	cmp	r3, #0
 800ee36:	d10a      	bne.n	800ee4e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800ee38:	4b09      	ldr	r3, [pc, #36]	; (800ee60 <prvProcessTimerOrBlockTask+0x98>)
 800ee3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ee3e:	601a      	str	r2, [r3, #0]
 800ee40:	f3bf 8f4f 	dsb	sy
 800ee44:	f3bf 8f6f 	isb	sy
}
 800ee48:	e001      	b.n	800ee4e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800ee4a:	f7ff f851 	bl	800def0 <xTaskResumeAll>
}
 800ee4e:	bf00      	nop
 800ee50:	3710      	adds	r7, #16
 800ee52:	46bd      	mov	sp, r7
 800ee54:	bd80      	pop	{r7, pc}
 800ee56:	bf00      	nop
 800ee58:	2000122c 	.word	0x2000122c
 800ee5c:	20001230 	.word	0x20001230
 800ee60:	e000ed04 	.word	0xe000ed04

0800ee64 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800ee64:	b480      	push	{r7}
 800ee66:	b085      	sub	sp, #20
 800ee68:	af00      	add	r7, sp, #0
 800ee6a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ee6c:	4b0e      	ldr	r3, [pc, #56]	; (800eea8 <prvGetNextExpireTime+0x44>)
 800ee6e:	681b      	ldr	r3, [r3, #0]
 800ee70:	681b      	ldr	r3, [r3, #0]
 800ee72:	2b00      	cmp	r3, #0
 800ee74:	d101      	bne.n	800ee7a <prvGetNextExpireTime+0x16>
 800ee76:	2201      	movs	r2, #1
 800ee78:	e000      	b.n	800ee7c <prvGetNextExpireTime+0x18>
 800ee7a:	2200      	movs	r2, #0
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	681b      	ldr	r3, [r3, #0]
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	d105      	bne.n	800ee94 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ee88:	4b07      	ldr	r3, [pc, #28]	; (800eea8 <prvGetNextExpireTime+0x44>)
 800ee8a:	681b      	ldr	r3, [r3, #0]
 800ee8c:	68db      	ldr	r3, [r3, #12]
 800ee8e:	681b      	ldr	r3, [r3, #0]
 800ee90:	60fb      	str	r3, [r7, #12]
 800ee92:	e001      	b.n	800ee98 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800ee94:	2300      	movs	r3, #0
 800ee96:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800ee98:	68fb      	ldr	r3, [r7, #12]
}
 800ee9a:	4618      	mov	r0, r3
 800ee9c:	3714      	adds	r7, #20
 800ee9e:	46bd      	mov	sp, r7
 800eea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eea4:	4770      	bx	lr
 800eea6:	bf00      	nop
 800eea8:	20001228 	.word	0x20001228

0800eeac <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800eeac:	b580      	push	{r7, lr}
 800eeae:	b084      	sub	sp, #16
 800eeb0:	af00      	add	r7, sp, #0
 800eeb2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800eeb4:	f7ff f8ba 	bl	800e02c <xTaskGetTickCount>
 800eeb8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800eeba:	4b0b      	ldr	r3, [pc, #44]	; (800eee8 <prvSampleTimeNow+0x3c>)
 800eebc:	681b      	ldr	r3, [r3, #0]
 800eebe:	68fa      	ldr	r2, [r7, #12]
 800eec0:	429a      	cmp	r2, r3
 800eec2:	d205      	bcs.n	800eed0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800eec4:	f000 f936 	bl	800f134 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	2201      	movs	r2, #1
 800eecc:	601a      	str	r2, [r3, #0]
 800eece:	e002      	b.n	800eed6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	2200      	movs	r2, #0
 800eed4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800eed6:	4a04      	ldr	r2, [pc, #16]	; (800eee8 <prvSampleTimeNow+0x3c>)
 800eed8:	68fb      	ldr	r3, [r7, #12]
 800eeda:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800eedc:	68fb      	ldr	r3, [r7, #12]
}
 800eede:	4618      	mov	r0, r3
 800eee0:	3710      	adds	r7, #16
 800eee2:	46bd      	mov	sp, r7
 800eee4:	bd80      	pop	{r7, pc}
 800eee6:	bf00      	nop
 800eee8:	20001238 	.word	0x20001238

0800eeec <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800eeec:	b580      	push	{r7, lr}
 800eeee:	b086      	sub	sp, #24
 800eef0:	af00      	add	r7, sp, #0
 800eef2:	60f8      	str	r0, [r7, #12]
 800eef4:	60b9      	str	r1, [r7, #8]
 800eef6:	607a      	str	r2, [r7, #4]
 800eef8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800eefa:	2300      	movs	r3, #0
 800eefc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800eefe:	68fb      	ldr	r3, [r7, #12]
 800ef00:	68ba      	ldr	r2, [r7, #8]
 800ef02:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ef04:	68fb      	ldr	r3, [r7, #12]
 800ef06:	68fa      	ldr	r2, [r7, #12]
 800ef08:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ef0a:	68ba      	ldr	r2, [r7, #8]
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	429a      	cmp	r2, r3
 800ef10:	d812      	bhi.n	800ef38 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ef12:	687a      	ldr	r2, [r7, #4]
 800ef14:	683b      	ldr	r3, [r7, #0]
 800ef16:	1ad2      	subs	r2, r2, r3
 800ef18:	68fb      	ldr	r3, [r7, #12]
 800ef1a:	699b      	ldr	r3, [r3, #24]
 800ef1c:	429a      	cmp	r2, r3
 800ef1e:	d302      	bcc.n	800ef26 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ef20:	2301      	movs	r3, #1
 800ef22:	617b      	str	r3, [r7, #20]
 800ef24:	e01b      	b.n	800ef5e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ef26:	4b10      	ldr	r3, [pc, #64]	; (800ef68 <prvInsertTimerInActiveList+0x7c>)
 800ef28:	681a      	ldr	r2, [r3, #0]
 800ef2a:	68fb      	ldr	r3, [r7, #12]
 800ef2c:	3304      	adds	r3, #4
 800ef2e:	4619      	mov	r1, r3
 800ef30:	4610      	mov	r0, r2
 800ef32:	f7fd fcaa 	bl	800c88a <vListInsert>
 800ef36:	e012      	b.n	800ef5e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ef38:	687a      	ldr	r2, [r7, #4]
 800ef3a:	683b      	ldr	r3, [r7, #0]
 800ef3c:	429a      	cmp	r2, r3
 800ef3e:	d206      	bcs.n	800ef4e <prvInsertTimerInActiveList+0x62>
 800ef40:	68ba      	ldr	r2, [r7, #8]
 800ef42:	683b      	ldr	r3, [r7, #0]
 800ef44:	429a      	cmp	r2, r3
 800ef46:	d302      	bcc.n	800ef4e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800ef48:	2301      	movs	r3, #1
 800ef4a:	617b      	str	r3, [r7, #20]
 800ef4c:	e007      	b.n	800ef5e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ef4e:	4b07      	ldr	r3, [pc, #28]	; (800ef6c <prvInsertTimerInActiveList+0x80>)
 800ef50:	681a      	ldr	r2, [r3, #0]
 800ef52:	68fb      	ldr	r3, [r7, #12]
 800ef54:	3304      	adds	r3, #4
 800ef56:	4619      	mov	r1, r3
 800ef58:	4610      	mov	r0, r2
 800ef5a:	f7fd fc96 	bl	800c88a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800ef5e:	697b      	ldr	r3, [r7, #20]
}
 800ef60:	4618      	mov	r0, r3
 800ef62:	3718      	adds	r7, #24
 800ef64:	46bd      	mov	sp, r7
 800ef66:	bd80      	pop	{r7, pc}
 800ef68:	2000122c 	.word	0x2000122c
 800ef6c:	20001228 	.word	0x20001228

0800ef70 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800ef70:	b580      	push	{r7, lr}
 800ef72:	b08e      	sub	sp, #56	; 0x38
 800ef74:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ef76:	e0ca      	b.n	800f10e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	2b00      	cmp	r3, #0
 800ef7c:	da18      	bge.n	800efb0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800ef7e:	1d3b      	adds	r3, r7, #4
 800ef80:	3304      	adds	r3, #4
 800ef82:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800ef84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef86:	2b00      	cmp	r3, #0
 800ef88:	d10a      	bne.n	800efa0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800ef8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef8e:	f383 8811 	msr	BASEPRI, r3
 800ef92:	f3bf 8f6f 	isb	sy
 800ef96:	f3bf 8f4f 	dsb	sy
 800ef9a:	61fb      	str	r3, [r7, #28]
}
 800ef9c:	bf00      	nop
 800ef9e:	e7fe      	b.n	800ef9e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800efa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efa2:	681b      	ldr	r3, [r3, #0]
 800efa4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800efa6:	6850      	ldr	r0, [r2, #4]
 800efa8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800efaa:	6892      	ldr	r2, [r2, #8]
 800efac:	4611      	mov	r1, r2
 800efae:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	2b00      	cmp	r3, #0
 800efb4:	f2c0 80aa 	blt.w	800f10c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800efb8:	68fb      	ldr	r3, [r7, #12]
 800efba:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800efbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efbe:	695b      	ldr	r3, [r3, #20]
 800efc0:	2b00      	cmp	r3, #0
 800efc2:	d004      	beq.n	800efce <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800efc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efc6:	3304      	adds	r3, #4
 800efc8:	4618      	mov	r0, r3
 800efca:	f7fd fc97 	bl	800c8fc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800efce:	463b      	mov	r3, r7
 800efd0:	4618      	mov	r0, r3
 800efd2:	f7ff ff6b 	bl	800eeac <prvSampleTimeNow>
 800efd6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	2b09      	cmp	r3, #9
 800efdc:	f200 8097 	bhi.w	800f10e <prvProcessReceivedCommands+0x19e>
 800efe0:	a201      	add	r2, pc, #4	; (adr r2, 800efe8 <prvProcessReceivedCommands+0x78>)
 800efe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800efe6:	bf00      	nop
 800efe8:	0800f011 	.word	0x0800f011
 800efec:	0800f011 	.word	0x0800f011
 800eff0:	0800f011 	.word	0x0800f011
 800eff4:	0800f085 	.word	0x0800f085
 800eff8:	0800f099 	.word	0x0800f099
 800effc:	0800f0e3 	.word	0x0800f0e3
 800f000:	0800f011 	.word	0x0800f011
 800f004:	0800f011 	.word	0x0800f011
 800f008:	0800f085 	.word	0x0800f085
 800f00c:	0800f099 	.word	0x0800f099
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f012:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f016:	f043 0301 	orr.w	r3, r3, #1
 800f01a:	b2da      	uxtb	r2, r3
 800f01c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f01e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800f022:	68ba      	ldr	r2, [r7, #8]
 800f024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f026:	699b      	ldr	r3, [r3, #24]
 800f028:	18d1      	adds	r1, r2, r3
 800f02a:	68bb      	ldr	r3, [r7, #8]
 800f02c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f02e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f030:	f7ff ff5c 	bl	800eeec <prvInsertTimerInActiveList>
 800f034:	4603      	mov	r3, r0
 800f036:	2b00      	cmp	r3, #0
 800f038:	d069      	beq.n	800f10e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f03a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f03c:	6a1b      	ldr	r3, [r3, #32]
 800f03e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f040:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f044:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f048:	f003 0304 	and.w	r3, r3, #4
 800f04c:	2b00      	cmp	r3, #0
 800f04e:	d05e      	beq.n	800f10e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800f050:	68ba      	ldr	r2, [r7, #8]
 800f052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f054:	699b      	ldr	r3, [r3, #24]
 800f056:	441a      	add	r2, r3
 800f058:	2300      	movs	r3, #0
 800f05a:	9300      	str	r3, [sp, #0]
 800f05c:	2300      	movs	r3, #0
 800f05e:	2100      	movs	r1, #0
 800f060:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f062:	f7ff fe05 	bl	800ec70 <xTimerGenericCommand>
 800f066:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800f068:	6a3b      	ldr	r3, [r7, #32]
 800f06a:	2b00      	cmp	r3, #0
 800f06c:	d14f      	bne.n	800f10e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800f06e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f072:	f383 8811 	msr	BASEPRI, r3
 800f076:	f3bf 8f6f 	isb	sy
 800f07a:	f3bf 8f4f 	dsb	sy
 800f07e:	61bb      	str	r3, [r7, #24]
}
 800f080:	bf00      	nop
 800f082:	e7fe      	b.n	800f082 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f086:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f08a:	f023 0301 	bic.w	r3, r3, #1
 800f08e:	b2da      	uxtb	r2, r3
 800f090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f092:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800f096:	e03a      	b.n	800f10e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f09a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f09e:	f043 0301 	orr.w	r3, r3, #1
 800f0a2:	b2da      	uxtb	r2, r3
 800f0a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800f0aa:	68ba      	ldr	r2, [r7, #8]
 800f0ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0ae:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800f0b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0b2:	699b      	ldr	r3, [r3, #24]
 800f0b4:	2b00      	cmp	r3, #0
 800f0b6:	d10a      	bne.n	800f0ce <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800f0b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0bc:	f383 8811 	msr	BASEPRI, r3
 800f0c0:	f3bf 8f6f 	isb	sy
 800f0c4:	f3bf 8f4f 	dsb	sy
 800f0c8:	617b      	str	r3, [r7, #20]
}
 800f0ca:	bf00      	nop
 800f0cc:	e7fe      	b.n	800f0cc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800f0ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0d0:	699a      	ldr	r2, [r3, #24]
 800f0d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0d4:	18d1      	adds	r1, r2, r3
 800f0d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f0da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f0dc:	f7ff ff06 	bl	800eeec <prvInsertTimerInActiveList>
					break;
 800f0e0:	e015      	b.n	800f10e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800f0e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f0e8:	f003 0302 	and.w	r3, r3, #2
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	d103      	bne.n	800f0f8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800f0f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f0f2:	f000 fbfd 	bl	800f8f0 <vPortFree>
 800f0f6:	e00a      	b.n	800f10e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f0f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f0fe:	f023 0301 	bic.w	r3, r3, #1
 800f102:	b2da      	uxtb	r2, r3
 800f104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f106:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800f10a:	e000      	b.n	800f10e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800f10c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f10e:	4b08      	ldr	r3, [pc, #32]	; (800f130 <prvProcessReceivedCommands+0x1c0>)
 800f110:	681b      	ldr	r3, [r3, #0]
 800f112:	1d39      	adds	r1, r7, #4
 800f114:	2200      	movs	r2, #0
 800f116:	4618      	mov	r0, r3
 800f118:	f7fd ffa8 	bl	800d06c <xQueueReceive>
 800f11c:	4603      	mov	r3, r0
 800f11e:	2b00      	cmp	r3, #0
 800f120:	f47f af2a 	bne.w	800ef78 <prvProcessReceivedCommands+0x8>
	}
}
 800f124:	bf00      	nop
 800f126:	bf00      	nop
 800f128:	3730      	adds	r7, #48	; 0x30
 800f12a:	46bd      	mov	sp, r7
 800f12c:	bd80      	pop	{r7, pc}
 800f12e:	bf00      	nop
 800f130:	20001230 	.word	0x20001230

0800f134 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800f134:	b580      	push	{r7, lr}
 800f136:	b088      	sub	sp, #32
 800f138:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f13a:	e048      	b.n	800f1ce <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f13c:	4b2d      	ldr	r3, [pc, #180]	; (800f1f4 <prvSwitchTimerLists+0xc0>)
 800f13e:	681b      	ldr	r3, [r3, #0]
 800f140:	68db      	ldr	r3, [r3, #12]
 800f142:	681b      	ldr	r3, [r3, #0]
 800f144:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f146:	4b2b      	ldr	r3, [pc, #172]	; (800f1f4 <prvSwitchTimerLists+0xc0>)
 800f148:	681b      	ldr	r3, [r3, #0]
 800f14a:	68db      	ldr	r3, [r3, #12]
 800f14c:	68db      	ldr	r3, [r3, #12]
 800f14e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f150:	68fb      	ldr	r3, [r7, #12]
 800f152:	3304      	adds	r3, #4
 800f154:	4618      	mov	r0, r3
 800f156:	f7fd fbd1 	bl	800c8fc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f15a:	68fb      	ldr	r3, [r7, #12]
 800f15c:	6a1b      	ldr	r3, [r3, #32]
 800f15e:	68f8      	ldr	r0, [r7, #12]
 800f160:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f162:	68fb      	ldr	r3, [r7, #12]
 800f164:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f168:	f003 0304 	and.w	r3, r3, #4
 800f16c:	2b00      	cmp	r3, #0
 800f16e:	d02e      	beq.n	800f1ce <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800f170:	68fb      	ldr	r3, [r7, #12]
 800f172:	699b      	ldr	r3, [r3, #24]
 800f174:	693a      	ldr	r2, [r7, #16]
 800f176:	4413      	add	r3, r2
 800f178:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800f17a:	68ba      	ldr	r2, [r7, #8]
 800f17c:	693b      	ldr	r3, [r7, #16]
 800f17e:	429a      	cmp	r2, r3
 800f180:	d90e      	bls.n	800f1a0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800f182:	68fb      	ldr	r3, [r7, #12]
 800f184:	68ba      	ldr	r2, [r7, #8]
 800f186:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f188:	68fb      	ldr	r3, [r7, #12]
 800f18a:	68fa      	ldr	r2, [r7, #12]
 800f18c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f18e:	4b19      	ldr	r3, [pc, #100]	; (800f1f4 <prvSwitchTimerLists+0xc0>)
 800f190:	681a      	ldr	r2, [r3, #0]
 800f192:	68fb      	ldr	r3, [r7, #12]
 800f194:	3304      	adds	r3, #4
 800f196:	4619      	mov	r1, r3
 800f198:	4610      	mov	r0, r2
 800f19a:	f7fd fb76 	bl	800c88a <vListInsert>
 800f19e:	e016      	b.n	800f1ce <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f1a0:	2300      	movs	r3, #0
 800f1a2:	9300      	str	r3, [sp, #0]
 800f1a4:	2300      	movs	r3, #0
 800f1a6:	693a      	ldr	r2, [r7, #16]
 800f1a8:	2100      	movs	r1, #0
 800f1aa:	68f8      	ldr	r0, [r7, #12]
 800f1ac:	f7ff fd60 	bl	800ec70 <xTimerGenericCommand>
 800f1b0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	2b00      	cmp	r3, #0
 800f1b6:	d10a      	bne.n	800f1ce <prvSwitchTimerLists+0x9a>
	__asm volatile
 800f1b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1bc:	f383 8811 	msr	BASEPRI, r3
 800f1c0:	f3bf 8f6f 	isb	sy
 800f1c4:	f3bf 8f4f 	dsb	sy
 800f1c8:	603b      	str	r3, [r7, #0]
}
 800f1ca:	bf00      	nop
 800f1cc:	e7fe      	b.n	800f1cc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f1ce:	4b09      	ldr	r3, [pc, #36]	; (800f1f4 <prvSwitchTimerLists+0xc0>)
 800f1d0:	681b      	ldr	r3, [r3, #0]
 800f1d2:	681b      	ldr	r3, [r3, #0]
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	d1b1      	bne.n	800f13c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800f1d8:	4b06      	ldr	r3, [pc, #24]	; (800f1f4 <prvSwitchTimerLists+0xc0>)
 800f1da:	681b      	ldr	r3, [r3, #0]
 800f1dc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800f1de:	4b06      	ldr	r3, [pc, #24]	; (800f1f8 <prvSwitchTimerLists+0xc4>)
 800f1e0:	681b      	ldr	r3, [r3, #0]
 800f1e2:	4a04      	ldr	r2, [pc, #16]	; (800f1f4 <prvSwitchTimerLists+0xc0>)
 800f1e4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800f1e6:	4a04      	ldr	r2, [pc, #16]	; (800f1f8 <prvSwitchTimerLists+0xc4>)
 800f1e8:	697b      	ldr	r3, [r7, #20]
 800f1ea:	6013      	str	r3, [r2, #0]
}
 800f1ec:	bf00      	nop
 800f1ee:	3718      	adds	r7, #24
 800f1f0:	46bd      	mov	sp, r7
 800f1f2:	bd80      	pop	{r7, pc}
 800f1f4:	20001228 	.word	0x20001228
 800f1f8:	2000122c 	.word	0x2000122c

0800f1fc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800f1fc:	b580      	push	{r7, lr}
 800f1fe:	b082      	sub	sp, #8
 800f200:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800f202:	f000 f987 	bl	800f514 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800f206:	4b15      	ldr	r3, [pc, #84]	; (800f25c <prvCheckForValidListAndQueue+0x60>)
 800f208:	681b      	ldr	r3, [r3, #0]
 800f20a:	2b00      	cmp	r3, #0
 800f20c:	d120      	bne.n	800f250 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800f20e:	4814      	ldr	r0, [pc, #80]	; (800f260 <prvCheckForValidListAndQueue+0x64>)
 800f210:	f7fd faea 	bl	800c7e8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800f214:	4813      	ldr	r0, [pc, #76]	; (800f264 <prvCheckForValidListAndQueue+0x68>)
 800f216:	f7fd fae7 	bl	800c7e8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800f21a:	4b13      	ldr	r3, [pc, #76]	; (800f268 <prvCheckForValidListAndQueue+0x6c>)
 800f21c:	4a10      	ldr	r2, [pc, #64]	; (800f260 <prvCheckForValidListAndQueue+0x64>)
 800f21e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800f220:	4b12      	ldr	r3, [pc, #72]	; (800f26c <prvCheckForValidListAndQueue+0x70>)
 800f222:	4a10      	ldr	r2, [pc, #64]	; (800f264 <prvCheckForValidListAndQueue+0x68>)
 800f224:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800f226:	2300      	movs	r3, #0
 800f228:	9300      	str	r3, [sp, #0]
 800f22a:	4b11      	ldr	r3, [pc, #68]	; (800f270 <prvCheckForValidListAndQueue+0x74>)
 800f22c:	4a11      	ldr	r2, [pc, #68]	; (800f274 <prvCheckForValidListAndQueue+0x78>)
 800f22e:	2110      	movs	r1, #16
 800f230:	200a      	movs	r0, #10
 800f232:	f7fd fbf5 	bl	800ca20 <xQueueGenericCreateStatic>
 800f236:	4603      	mov	r3, r0
 800f238:	4a08      	ldr	r2, [pc, #32]	; (800f25c <prvCheckForValidListAndQueue+0x60>)
 800f23a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800f23c:	4b07      	ldr	r3, [pc, #28]	; (800f25c <prvCheckForValidListAndQueue+0x60>)
 800f23e:	681b      	ldr	r3, [r3, #0]
 800f240:	2b00      	cmp	r3, #0
 800f242:	d005      	beq.n	800f250 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800f244:	4b05      	ldr	r3, [pc, #20]	; (800f25c <prvCheckForValidListAndQueue+0x60>)
 800f246:	681b      	ldr	r3, [r3, #0]
 800f248:	490b      	ldr	r1, [pc, #44]	; (800f278 <prvCheckForValidListAndQueue+0x7c>)
 800f24a:	4618      	mov	r0, r3
 800f24c:	f7fe faa2 	bl	800d794 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f250:	f000 f990 	bl	800f574 <vPortExitCritical>
}
 800f254:	bf00      	nop
 800f256:	46bd      	mov	sp, r7
 800f258:	bd80      	pop	{r7, pc}
 800f25a:	bf00      	nop
 800f25c:	20001230 	.word	0x20001230
 800f260:	20001200 	.word	0x20001200
 800f264:	20001214 	.word	0x20001214
 800f268:	20001228 	.word	0x20001228
 800f26c:	2000122c 	.word	0x2000122c
 800f270:	200012dc 	.word	0x200012dc
 800f274:	2000123c 	.word	0x2000123c
 800f278:	080142b4 	.word	0x080142b4

0800f27c <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800f27c:	b580      	push	{r7, lr}
 800f27e:	b08a      	sub	sp, #40	; 0x28
 800f280:	af00      	add	r7, sp, #0
 800f282:	60f8      	str	r0, [r7, #12]
 800f284:	60b9      	str	r1, [r7, #8]
 800f286:	607a      	str	r2, [r7, #4]
 800f288:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 800f28a:	f06f 0301 	mvn.w	r3, #1
 800f28e:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 800f290:	68fb      	ldr	r3, [r7, #12]
 800f292:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 800f294:	68bb      	ldr	r3, [r7, #8]
 800f296:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800f29c:	4b06      	ldr	r3, [pc, #24]	; (800f2b8 <xTimerPendFunctionCallFromISR+0x3c>)
 800f29e:	6818      	ldr	r0, [r3, #0]
 800f2a0:	f107 0114 	add.w	r1, r7, #20
 800f2a4:	2300      	movs	r3, #0
 800f2a6:	683a      	ldr	r2, [r7, #0]
 800f2a8:	f7fd fe44 	bl	800cf34 <xQueueGenericSendFromISR>
 800f2ac:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 800f2ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800f2b0:	4618      	mov	r0, r3
 800f2b2:	3728      	adds	r7, #40	; 0x28
 800f2b4:	46bd      	mov	sp, r7
 800f2b6:	bd80      	pop	{r7, pc}
 800f2b8:	20001230 	.word	0x20001230

0800f2bc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800f2bc:	b480      	push	{r7}
 800f2be:	b085      	sub	sp, #20
 800f2c0:	af00      	add	r7, sp, #0
 800f2c2:	60f8      	str	r0, [r7, #12]
 800f2c4:	60b9      	str	r1, [r7, #8]
 800f2c6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800f2c8:	68fb      	ldr	r3, [r7, #12]
 800f2ca:	3b04      	subs	r3, #4
 800f2cc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f2ce:	68fb      	ldr	r3, [r7, #12]
 800f2d0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800f2d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f2d6:	68fb      	ldr	r3, [r7, #12]
 800f2d8:	3b04      	subs	r3, #4
 800f2da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800f2dc:	68bb      	ldr	r3, [r7, #8]
 800f2de:	f023 0201 	bic.w	r2, r3, #1
 800f2e2:	68fb      	ldr	r3, [r7, #12]
 800f2e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f2e6:	68fb      	ldr	r3, [r7, #12]
 800f2e8:	3b04      	subs	r3, #4
 800f2ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f2ec:	4a0c      	ldr	r2, [pc, #48]	; (800f320 <pxPortInitialiseStack+0x64>)
 800f2ee:	68fb      	ldr	r3, [r7, #12]
 800f2f0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800f2f2:	68fb      	ldr	r3, [r7, #12]
 800f2f4:	3b14      	subs	r3, #20
 800f2f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f2f8:	687a      	ldr	r2, [r7, #4]
 800f2fa:	68fb      	ldr	r3, [r7, #12]
 800f2fc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800f2fe:	68fb      	ldr	r3, [r7, #12]
 800f300:	3b04      	subs	r3, #4
 800f302:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800f304:	68fb      	ldr	r3, [r7, #12]
 800f306:	f06f 0202 	mvn.w	r2, #2
 800f30a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800f30c:	68fb      	ldr	r3, [r7, #12]
 800f30e:	3b20      	subs	r3, #32
 800f310:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800f312:	68fb      	ldr	r3, [r7, #12]
}
 800f314:	4618      	mov	r0, r3
 800f316:	3714      	adds	r7, #20
 800f318:	46bd      	mov	sp, r7
 800f31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f31e:	4770      	bx	lr
 800f320:	0800f325 	.word	0x0800f325

0800f324 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800f324:	b480      	push	{r7}
 800f326:	b085      	sub	sp, #20
 800f328:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800f32a:	2300      	movs	r3, #0
 800f32c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800f32e:	4b12      	ldr	r3, [pc, #72]	; (800f378 <prvTaskExitError+0x54>)
 800f330:	681b      	ldr	r3, [r3, #0]
 800f332:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f336:	d00a      	beq.n	800f34e <prvTaskExitError+0x2a>
	__asm volatile
 800f338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f33c:	f383 8811 	msr	BASEPRI, r3
 800f340:	f3bf 8f6f 	isb	sy
 800f344:	f3bf 8f4f 	dsb	sy
 800f348:	60fb      	str	r3, [r7, #12]
}
 800f34a:	bf00      	nop
 800f34c:	e7fe      	b.n	800f34c <prvTaskExitError+0x28>
	__asm volatile
 800f34e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f352:	f383 8811 	msr	BASEPRI, r3
 800f356:	f3bf 8f6f 	isb	sy
 800f35a:	f3bf 8f4f 	dsb	sy
 800f35e:	60bb      	str	r3, [r7, #8]
}
 800f360:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800f362:	bf00      	nop
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	2b00      	cmp	r3, #0
 800f368:	d0fc      	beq.n	800f364 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800f36a:	bf00      	nop
 800f36c:	bf00      	nop
 800f36e:	3714      	adds	r7, #20
 800f370:	46bd      	mov	sp, r7
 800f372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f376:	4770      	bx	lr
 800f378:	2000001c 	.word	0x2000001c
 800f37c:	00000000 	.word	0x00000000

0800f380 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800f380:	4b07      	ldr	r3, [pc, #28]	; (800f3a0 <pxCurrentTCBConst2>)
 800f382:	6819      	ldr	r1, [r3, #0]
 800f384:	6808      	ldr	r0, [r1, #0]
 800f386:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f38a:	f380 8809 	msr	PSP, r0
 800f38e:	f3bf 8f6f 	isb	sy
 800f392:	f04f 0000 	mov.w	r0, #0
 800f396:	f380 8811 	msr	BASEPRI, r0
 800f39a:	4770      	bx	lr
 800f39c:	f3af 8000 	nop.w

0800f3a0 <pxCurrentTCBConst2>:
 800f3a0:	20000d00 	.word	0x20000d00
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800f3a4:	bf00      	nop
 800f3a6:	bf00      	nop

0800f3a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800f3a8:	4808      	ldr	r0, [pc, #32]	; (800f3cc <prvPortStartFirstTask+0x24>)
 800f3aa:	6800      	ldr	r0, [r0, #0]
 800f3ac:	6800      	ldr	r0, [r0, #0]
 800f3ae:	f380 8808 	msr	MSP, r0
 800f3b2:	f04f 0000 	mov.w	r0, #0
 800f3b6:	f380 8814 	msr	CONTROL, r0
 800f3ba:	b662      	cpsie	i
 800f3bc:	b661      	cpsie	f
 800f3be:	f3bf 8f4f 	dsb	sy
 800f3c2:	f3bf 8f6f 	isb	sy
 800f3c6:	df00      	svc	0
 800f3c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800f3ca:	bf00      	nop
 800f3cc:	e000ed08 	.word	0xe000ed08

0800f3d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800f3d0:	b580      	push	{r7, lr}
 800f3d2:	b086      	sub	sp, #24
 800f3d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800f3d6:	4b46      	ldr	r3, [pc, #280]	; (800f4f0 <xPortStartScheduler+0x120>)
 800f3d8:	681b      	ldr	r3, [r3, #0]
 800f3da:	4a46      	ldr	r2, [pc, #280]	; (800f4f4 <xPortStartScheduler+0x124>)
 800f3dc:	4293      	cmp	r3, r2
 800f3de:	d10a      	bne.n	800f3f6 <xPortStartScheduler+0x26>
	__asm volatile
 800f3e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3e4:	f383 8811 	msr	BASEPRI, r3
 800f3e8:	f3bf 8f6f 	isb	sy
 800f3ec:	f3bf 8f4f 	dsb	sy
 800f3f0:	613b      	str	r3, [r7, #16]
}
 800f3f2:	bf00      	nop
 800f3f4:	e7fe      	b.n	800f3f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800f3f6:	4b3e      	ldr	r3, [pc, #248]	; (800f4f0 <xPortStartScheduler+0x120>)
 800f3f8:	681b      	ldr	r3, [r3, #0]
 800f3fa:	4a3f      	ldr	r2, [pc, #252]	; (800f4f8 <xPortStartScheduler+0x128>)
 800f3fc:	4293      	cmp	r3, r2
 800f3fe:	d10a      	bne.n	800f416 <xPortStartScheduler+0x46>
	__asm volatile
 800f400:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f404:	f383 8811 	msr	BASEPRI, r3
 800f408:	f3bf 8f6f 	isb	sy
 800f40c:	f3bf 8f4f 	dsb	sy
 800f410:	60fb      	str	r3, [r7, #12]
}
 800f412:	bf00      	nop
 800f414:	e7fe      	b.n	800f414 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800f416:	4b39      	ldr	r3, [pc, #228]	; (800f4fc <xPortStartScheduler+0x12c>)
 800f418:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f41a:	697b      	ldr	r3, [r7, #20]
 800f41c:	781b      	ldrb	r3, [r3, #0]
 800f41e:	b2db      	uxtb	r3, r3
 800f420:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f422:	697b      	ldr	r3, [r7, #20]
 800f424:	22ff      	movs	r2, #255	; 0xff
 800f426:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f428:	697b      	ldr	r3, [r7, #20]
 800f42a:	781b      	ldrb	r3, [r3, #0]
 800f42c:	b2db      	uxtb	r3, r3
 800f42e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f430:	78fb      	ldrb	r3, [r7, #3]
 800f432:	b2db      	uxtb	r3, r3
 800f434:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800f438:	b2da      	uxtb	r2, r3
 800f43a:	4b31      	ldr	r3, [pc, #196]	; (800f500 <xPortStartScheduler+0x130>)
 800f43c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800f43e:	4b31      	ldr	r3, [pc, #196]	; (800f504 <xPortStartScheduler+0x134>)
 800f440:	2207      	movs	r2, #7
 800f442:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f444:	e009      	b.n	800f45a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800f446:	4b2f      	ldr	r3, [pc, #188]	; (800f504 <xPortStartScheduler+0x134>)
 800f448:	681b      	ldr	r3, [r3, #0]
 800f44a:	3b01      	subs	r3, #1
 800f44c:	4a2d      	ldr	r2, [pc, #180]	; (800f504 <xPortStartScheduler+0x134>)
 800f44e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800f450:	78fb      	ldrb	r3, [r7, #3]
 800f452:	b2db      	uxtb	r3, r3
 800f454:	005b      	lsls	r3, r3, #1
 800f456:	b2db      	uxtb	r3, r3
 800f458:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f45a:	78fb      	ldrb	r3, [r7, #3]
 800f45c:	b2db      	uxtb	r3, r3
 800f45e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f462:	2b80      	cmp	r3, #128	; 0x80
 800f464:	d0ef      	beq.n	800f446 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800f466:	4b27      	ldr	r3, [pc, #156]	; (800f504 <xPortStartScheduler+0x134>)
 800f468:	681b      	ldr	r3, [r3, #0]
 800f46a:	f1c3 0307 	rsb	r3, r3, #7
 800f46e:	2b04      	cmp	r3, #4
 800f470:	d00a      	beq.n	800f488 <xPortStartScheduler+0xb8>
	__asm volatile
 800f472:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f476:	f383 8811 	msr	BASEPRI, r3
 800f47a:	f3bf 8f6f 	isb	sy
 800f47e:	f3bf 8f4f 	dsb	sy
 800f482:	60bb      	str	r3, [r7, #8]
}
 800f484:	bf00      	nop
 800f486:	e7fe      	b.n	800f486 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800f488:	4b1e      	ldr	r3, [pc, #120]	; (800f504 <xPortStartScheduler+0x134>)
 800f48a:	681b      	ldr	r3, [r3, #0]
 800f48c:	021b      	lsls	r3, r3, #8
 800f48e:	4a1d      	ldr	r2, [pc, #116]	; (800f504 <xPortStartScheduler+0x134>)
 800f490:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f492:	4b1c      	ldr	r3, [pc, #112]	; (800f504 <xPortStartScheduler+0x134>)
 800f494:	681b      	ldr	r3, [r3, #0]
 800f496:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f49a:	4a1a      	ldr	r2, [pc, #104]	; (800f504 <xPortStartScheduler+0x134>)
 800f49c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	b2da      	uxtb	r2, r3
 800f4a2:	697b      	ldr	r3, [r7, #20]
 800f4a4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f4a6:	4b18      	ldr	r3, [pc, #96]	; (800f508 <xPortStartScheduler+0x138>)
 800f4a8:	681b      	ldr	r3, [r3, #0]
 800f4aa:	4a17      	ldr	r2, [pc, #92]	; (800f508 <xPortStartScheduler+0x138>)
 800f4ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800f4b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f4b2:	4b15      	ldr	r3, [pc, #84]	; (800f508 <xPortStartScheduler+0x138>)
 800f4b4:	681b      	ldr	r3, [r3, #0]
 800f4b6:	4a14      	ldr	r2, [pc, #80]	; (800f508 <xPortStartScheduler+0x138>)
 800f4b8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800f4bc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800f4be:	f000 f8dd 	bl	800f67c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800f4c2:	4b12      	ldr	r3, [pc, #72]	; (800f50c <xPortStartScheduler+0x13c>)
 800f4c4:	2200      	movs	r2, #0
 800f4c6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800f4c8:	f000 f8fc 	bl	800f6c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800f4cc:	4b10      	ldr	r3, [pc, #64]	; (800f510 <xPortStartScheduler+0x140>)
 800f4ce:	681b      	ldr	r3, [r3, #0]
 800f4d0:	4a0f      	ldr	r2, [pc, #60]	; (800f510 <xPortStartScheduler+0x140>)
 800f4d2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800f4d6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800f4d8:	f7ff ff66 	bl	800f3a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800f4dc:	f7fe fe70 	bl	800e1c0 <vTaskSwitchContext>
	prvTaskExitError();
 800f4e0:	f7ff ff20 	bl	800f324 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800f4e4:	2300      	movs	r3, #0
}
 800f4e6:	4618      	mov	r0, r3
 800f4e8:	3718      	adds	r7, #24
 800f4ea:	46bd      	mov	sp, r7
 800f4ec:	bd80      	pop	{r7, pc}
 800f4ee:	bf00      	nop
 800f4f0:	e000ed00 	.word	0xe000ed00
 800f4f4:	410fc271 	.word	0x410fc271
 800f4f8:	410fc270 	.word	0x410fc270
 800f4fc:	e000e400 	.word	0xe000e400
 800f500:	2000132c 	.word	0x2000132c
 800f504:	20001330 	.word	0x20001330
 800f508:	e000ed20 	.word	0xe000ed20
 800f50c:	2000001c 	.word	0x2000001c
 800f510:	e000ef34 	.word	0xe000ef34

0800f514 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800f514:	b480      	push	{r7}
 800f516:	b083      	sub	sp, #12
 800f518:	af00      	add	r7, sp, #0
	__asm volatile
 800f51a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f51e:	f383 8811 	msr	BASEPRI, r3
 800f522:	f3bf 8f6f 	isb	sy
 800f526:	f3bf 8f4f 	dsb	sy
 800f52a:	607b      	str	r3, [r7, #4]
}
 800f52c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800f52e:	4b0f      	ldr	r3, [pc, #60]	; (800f56c <vPortEnterCritical+0x58>)
 800f530:	681b      	ldr	r3, [r3, #0]
 800f532:	3301      	adds	r3, #1
 800f534:	4a0d      	ldr	r2, [pc, #52]	; (800f56c <vPortEnterCritical+0x58>)
 800f536:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800f538:	4b0c      	ldr	r3, [pc, #48]	; (800f56c <vPortEnterCritical+0x58>)
 800f53a:	681b      	ldr	r3, [r3, #0]
 800f53c:	2b01      	cmp	r3, #1
 800f53e:	d10f      	bne.n	800f560 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800f540:	4b0b      	ldr	r3, [pc, #44]	; (800f570 <vPortEnterCritical+0x5c>)
 800f542:	681b      	ldr	r3, [r3, #0]
 800f544:	b2db      	uxtb	r3, r3
 800f546:	2b00      	cmp	r3, #0
 800f548:	d00a      	beq.n	800f560 <vPortEnterCritical+0x4c>
	__asm volatile
 800f54a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f54e:	f383 8811 	msr	BASEPRI, r3
 800f552:	f3bf 8f6f 	isb	sy
 800f556:	f3bf 8f4f 	dsb	sy
 800f55a:	603b      	str	r3, [r7, #0]
}
 800f55c:	bf00      	nop
 800f55e:	e7fe      	b.n	800f55e <vPortEnterCritical+0x4a>
	}
}
 800f560:	bf00      	nop
 800f562:	370c      	adds	r7, #12
 800f564:	46bd      	mov	sp, r7
 800f566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f56a:	4770      	bx	lr
 800f56c:	2000001c 	.word	0x2000001c
 800f570:	e000ed04 	.word	0xe000ed04

0800f574 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800f574:	b480      	push	{r7}
 800f576:	b083      	sub	sp, #12
 800f578:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800f57a:	4b12      	ldr	r3, [pc, #72]	; (800f5c4 <vPortExitCritical+0x50>)
 800f57c:	681b      	ldr	r3, [r3, #0]
 800f57e:	2b00      	cmp	r3, #0
 800f580:	d10a      	bne.n	800f598 <vPortExitCritical+0x24>
	__asm volatile
 800f582:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f586:	f383 8811 	msr	BASEPRI, r3
 800f58a:	f3bf 8f6f 	isb	sy
 800f58e:	f3bf 8f4f 	dsb	sy
 800f592:	607b      	str	r3, [r7, #4]
}
 800f594:	bf00      	nop
 800f596:	e7fe      	b.n	800f596 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800f598:	4b0a      	ldr	r3, [pc, #40]	; (800f5c4 <vPortExitCritical+0x50>)
 800f59a:	681b      	ldr	r3, [r3, #0]
 800f59c:	3b01      	subs	r3, #1
 800f59e:	4a09      	ldr	r2, [pc, #36]	; (800f5c4 <vPortExitCritical+0x50>)
 800f5a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800f5a2:	4b08      	ldr	r3, [pc, #32]	; (800f5c4 <vPortExitCritical+0x50>)
 800f5a4:	681b      	ldr	r3, [r3, #0]
 800f5a6:	2b00      	cmp	r3, #0
 800f5a8:	d105      	bne.n	800f5b6 <vPortExitCritical+0x42>
 800f5aa:	2300      	movs	r3, #0
 800f5ac:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f5ae:	683b      	ldr	r3, [r7, #0]
 800f5b0:	f383 8811 	msr	BASEPRI, r3
}
 800f5b4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800f5b6:	bf00      	nop
 800f5b8:	370c      	adds	r7, #12
 800f5ba:	46bd      	mov	sp, r7
 800f5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5c0:	4770      	bx	lr
 800f5c2:	bf00      	nop
 800f5c4:	2000001c 	.word	0x2000001c
	...

0800f5d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800f5d0:	f3ef 8009 	mrs	r0, PSP
 800f5d4:	f3bf 8f6f 	isb	sy
 800f5d8:	4b15      	ldr	r3, [pc, #84]	; (800f630 <pxCurrentTCBConst>)
 800f5da:	681a      	ldr	r2, [r3, #0]
 800f5dc:	f01e 0f10 	tst.w	lr, #16
 800f5e0:	bf08      	it	eq
 800f5e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f5e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f5ea:	6010      	str	r0, [r2, #0]
 800f5ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800f5f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800f5f4:	f380 8811 	msr	BASEPRI, r0
 800f5f8:	f3bf 8f4f 	dsb	sy
 800f5fc:	f3bf 8f6f 	isb	sy
 800f600:	f7fe fdde 	bl	800e1c0 <vTaskSwitchContext>
 800f604:	f04f 0000 	mov.w	r0, #0
 800f608:	f380 8811 	msr	BASEPRI, r0
 800f60c:	bc09      	pop	{r0, r3}
 800f60e:	6819      	ldr	r1, [r3, #0]
 800f610:	6808      	ldr	r0, [r1, #0]
 800f612:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f616:	f01e 0f10 	tst.w	lr, #16
 800f61a:	bf08      	it	eq
 800f61c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f620:	f380 8809 	msr	PSP, r0
 800f624:	f3bf 8f6f 	isb	sy
 800f628:	4770      	bx	lr
 800f62a:	bf00      	nop
 800f62c:	f3af 8000 	nop.w

0800f630 <pxCurrentTCBConst>:
 800f630:	20000d00 	.word	0x20000d00
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800f634:	bf00      	nop
 800f636:	bf00      	nop

0800f638 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800f638:	b580      	push	{r7, lr}
 800f63a:	b082      	sub	sp, #8
 800f63c:	af00      	add	r7, sp, #0
	__asm volatile
 800f63e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f642:	f383 8811 	msr	BASEPRI, r3
 800f646:	f3bf 8f6f 	isb	sy
 800f64a:	f3bf 8f4f 	dsb	sy
 800f64e:	607b      	str	r3, [r7, #4]
}
 800f650:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800f652:	f7fe fcfb 	bl	800e04c <xTaskIncrementTick>
 800f656:	4603      	mov	r3, r0
 800f658:	2b00      	cmp	r3, #0
 800f65a:	d003      	beq.n	800f664 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800f65c:	4b06      	ldr	r3, [pc, #24]	; (800f678 <xPortSysTickHandler+0x40>)
 800f65e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f662:	601a      	str	r2, [r3, #0]
 800f664:	2300      	movs	r3, #0
 800f666:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f668:	683b      	ldr	r3, [r7, #0]
 800f66a:	f383 8811 	msr	BASEPRI, r3
}
 800f66e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800f670:	bf00      	nop
 800f672:	3708      	adds	r7, #8
 800f674:	46bd      	mov	sp, r7
 800f676:	bd80      	pop	{r7, pc}
 800f678:	e000ed04 	.word	0xe000ed04

0800f67c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800f67c:	b480      	push	{r7}
 800f67e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800f680:	4b0b      	ldr	r3, [pc, #44]	; (800f6b0 <vPortSetupTimerInterrupt+0x34>)
 800f682:	2200      	movs	r2, #0
 800f684:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800f686:	4b0b      	ldr	r3, [pc, #44]	; (800f6b4 <vPortSetupTimerInterrupt+0x38>)
 800f688:	2200      	movs	r2, #0
 800f68a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f68c:	4b0a      	ldr	r3, [pc, #40]	; (800f6b8 <vPortSetupTimerInterrupt+0x3c>)
 800f68e:	681b      	ldr	r3, [r3, #0]
 800f690:	4a0a      	ldr	r2, [pc, #40]	; (800f6bc <vPortSetupTimerInterrupt+0x40>)
 800f692:	fba2 2303 	umull	r2, r3, r2, r3
 800f696:	099b      	lsrs	r3, r3, #6
 800f698:	4a09      	ldr	r2, [pc, #36]	; (800f6c0 <vPortSetupTimerInterrupt+0x44>)
 800f69a:	3b01      	subs	r3, #1
 800f69c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800f69e:	4b04      	ldr	r3, [pc, #16]	; (800f6b0 <vPortSetupTimerInterrupt+0x34>)
 800f6a0:	2207      	movs	r2, #7
 800f6a2:	601a      	str	r2, [r3, #0]
}
 800f6a4:	bf00      	nop
 800f6a6:	46bd      	mov	sp, r7
 800f6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ac:	4770      	bx	lr
 800f6ae:	bf00      	nop
 800f6b0:	e000e010 	.word	0xe000e010
 800f6b4:	e000e018 	.word	0xe000e018
 800f6b8:	20000010 	.word	0x20000010
 800f6bc:	10624dd3 	.word	0x10624dd3
 800f6c0:	e000e014 	.word	0xe000e014

0800f6c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800f6c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800f6d4 <vPortEnableVFP+0x10>
 800f6c8:	6801      	ldr	r1, [r0, #0]
 800f6ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800f6ce:	6001      	str	r1, [r0, #0]
 800f6d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800f6d2:	bf00      	nop
 800f6d4:	e000ed88 	.word	0xe000ed88

0800f6d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800f6d8:	b480      	push	{r7}
 800f6da:	b085      	sub	sp, #20
 800f6dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800f6de:	f3ef 8305 	mrs	r3, IPSR
 800f6e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800f6e4:	68fb      	ldr	r3, [r7, #12]
 800f6e6:	2b0f      	cmp	r3, #15
 800f6e8:	d914      	bls.n	800f714 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800f6ea:	4a17      	ldr	r2, [pc, #92]	; (800f748 <vPortValidateInterruptPriority+0x70>)
 800f6ec:	68fb      	ldr	r3, [r7, #12]
 800f6ee:	4413      	add	r3, r2
 800f6f0:	781b      	ldrb	r3, [r3, #0]
 800f6f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800f6f4:	4b15      	ldr	r3, [pc, #84]	; (800f74c <vPortValidateInterruptPriority+0x74>)
 800f6f6:	781b      	ldrb	r3, [r3, #0]
 800f6f8:	7afa      	ldrb	r2, [r7, #11]
 800f6fa:	429a      	cmp	r2, r3
 800f6fc:	d20a      	bcs.n	800f714 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800f6fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f702:	f383 8811 	msr	BASEPRI, r3
 800f706:	f3bf 8f6f 	isb	sy
 800f70a:	f3bf 8f4f 	dsb	sy
 800f70e:	607b      	str	r3, [r7, #4]
}
 800f710:	bf00      	nop
 800f712:	e7fe      	b.n	800f712 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800f714:	4b0e      	ldr	r3, [pc, #56]	; (800f750 <vPortValidateInterruptPriority+0x78>)
 800f716:	681b      	ldr	r3, [r3, #0]
 800f718:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800f71c:	4b0d      	ldr	r3, [pc, #52]	; (800f754 <vPortValidateInterruptPriority+0x7c>)
 800f71e:	681b      	ldr	r3, [r3, #0]
 800f720:	429a      	cmp	r2, r3
 800f722:	d90a      	bls.n	800f73a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800f724:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f728:	f383 8811 	msr	BASEPRI, r3
 800f72c:	f3bf 8f6f 	isb	sy
 800f730:	f3bf 8f4f 	dsb	sy
 800f734:	603b      	str	r3, [r7, #0]
}
 800f736:	bf00      	nop
 800f738:	e7fe      	b.n	800f738 <vPortValidateInterruptPriority+0x60>
	}
 800f73a:	bf00      	nop
 800f73c:	3714      	adds	r7, #20
 800f73e:	46bd      	mov	sp, r7
 800f740:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f744:	4770      	bx	lr
 800f746:	bf00      	nop
 800f748:	e000e3f0 	.word	0xe000e3f0
 800f74c:	2000132c 	.word	0x2000132c
 800f750:	e000ed0c 	.word	0xe000ed0c
 800f754:	20001330 	.word	0x20001330

0800f758 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800f758:	b580      	push	{r7, lr}
 800f75a:	b08a      	sub	sp, #40	; 0x28
 800f75c:	af00      	add	r7, sp, #0
 800f75e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800f760:	2300      	movs	r3, #0
 800f762:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800f764:	f7fe fbb6 	bl	800ded4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800f768:	4b5b      	ldr	r3, [pc, #364]	; (800f8d8 <pvPortMalloc+0x180>)
 800f76a:	681b      	ldr	r3, [r3, #0]
 800f76c:	2b00      	cmp	r3, #0
 800f76e:	d101      	bne.n	800f774 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800f770:	f000 f920 	bl	800f9b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f774:	4b59      	ldr	r3, [pc, #356]	; (800f8dc <pvPortMalloc+0x184>)
 800f776:	681a      	ldr	r2, [r3, #0]
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	4013      	ands	r3, r2
 800f77c:	2b00      	cmp	r3, #0
 800f77e:	f040 8093 	bne.w	800f8a8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	2b00      	cmp	r3, #0
 800f786:	d01d      	beq.n	800f7c4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800f788:	2208      	movs	r2, #8
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	4413      	add	r3, r2
 800f78e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	f003 0307 	and.w	r3, r3, #7
 800f796:	2b00      	cmp	r3, #0
 800f798:	d014      	beq.n	800f7c4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	f023 0307 	bic.w	r3, r3, #7
 800f7a0:	3308      	adds	r3, #8
 800f7a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	f003 0307 	and.w	r3, r3, #7
 800f7aa:	2b00      	cmp	r3, #0
 800f7ac:	d00a      	beq.n	800f7c4 <pvPortMalloc+0x6c>
	__asm volatile
 800f7ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7b2:	f383 8811 	msr	BASEPRI, r3
 800f7b6:	f3bf 8f6f 	isb	sy
 800f7ba:	f3bf 8f4f 	dsb	sy
 800f7be:	617b      	str	r3, [r7, #20]
}
 800f7c0:	bf00      	nop
 800f7c2:	e7fe      	b.n	800f7c2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	2b00      	cmp	r3, #0
 800f7c8:	d06e      	beq.n	800f8a8 <pvPortMalloc+0x150>
 800f7ca:	4b45      	ldr	r3, [pc, #276]	; (800f8e0 <pvPortMalloc+0x188>)
 800f7cc:	681b      	ldr	r3, [r3, #0]
 800f7ce:	687a      	ldr	r2, [r7, #4]
 800f7d0:	429a      	cmp	r2, r3
 800f7d2:	d869      	bhi.n	800f8a8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800f7d4:	4b43      	ldr	r3, [pc, #268]	; (800f8e4 <pvPortMalloc+0x18c>)
 800f7d6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800f7d8:	4b42      	ldr	r3, [pc, #264]	; (800f8e4 <pvPortMalloc+0x18c>)
 800f7da:	681b      	ldr	r3, [r3, #0]
 800f7dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f7de:	e004      	b.n	800f7ea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800f7e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7e2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800f7e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7e6:	681b      	ldr	r3, [r3, #0]
 800f7e8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f7ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7ec:	685b      	ldr	r3, [r3, #4]
 800f7ee:	687a      	ldr	r2, [r7, #4]
 800f7f0:	429a      	cmp	r2, r3
 800f7f2:	d903      	bls.n	800f7fc <pvPortMalloc+0xa4>
 800f7f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7f6:	681b      	ldr	r3, [r3, #0]
 800f7f8:	2b00      	cmp	r3, #0
 800f7fa:	d1f1      	bne.n	800f7e0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800f7fc:	4b36      	ldr	r3, [pc, #216]	; (800f8d8 <pvPortMalloc+0x180>)
 800f7fe:	681b      	ldr	r3, [r3, #0]
 800f800:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f802:	429a      	cmp	r2, r3
 800f804:	d050      	beq.n	800f8a8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f806:	6a3b      	ldr	r3, [r7, #32]
 800f808:	681b      	ldr	r3, [r3, #0]
 800f80a:	2208      	movs	r2, #8
 800f80c:	4413      	add	r3, r2
 800f80e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f812:	681a      	ldr	r2, [r3, #0]
 800f814:	6a3b      	ldr	r3, [r7, #32]
 800f816:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f81a:	685a      	ldr	r2, [r3, #4]
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	1ad2      	subs	r2, r2, r3
 800f820:	2308      	movs	r3, #8
 800f822:	005b      	lsls	r3, r3, #1
 800f824:	429a      	cmp	r2, r3
 800f826:	d91f      	bls.n	800f868 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f828:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	4413      	add	r3, r2
 800f82e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f830:	69bb      	ldr	r3, [r7, #24]
 800f832:	f003 0307 	and.w	r3, r3, #7
 800f836:	2b00      	cmp	r3, #0
 800f838:	d00a      	beq.n	800f850 <pvPortMalloc+0xf8>
	__asm volatile
 800f83a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f83e:	f383 8811 	msr	BASEPRI, r3
 800f842:	f3bf 8f6f 	isb	sy
 800f846:	f3bf 8f4f 	dsb	sy
 800f84a:	613b      	str	r3, [r7, #16]
}
 800f84c:	bf00      	nop
 800f84e:	e7fe      	b.n	800f84e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800f850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f852:	685a      	ldr	r2, [r3, #4]
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	1ad2      	subs	r2, r2, r3
 800f858:	69bb      	ldr	r3, [r7, #24]
 800f85a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800f85c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f85e:	687a      	ldr	r2, [r7, #4]
 800f860:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800f862:	69b8      	ldr	r0, [r7, #24]
 800f864:	f000 f908 	bl	800fa78 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f868:	4b1d      	ldr	r3, [pc, #116]	; (800f8e0 <pvPortMalloc+0x188>)
 800f86a:	681a      	ldr	r2, [r3, #0]
 800f86c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f86e:	685b      	ldr	r3, [r3, #4]
 800f870:	1ad3      	subs	r3, r2, r3
 800f872:	4a1b      	ldr	r2, [pc, #108]	; (800f8e0 <pvPortMalloc+0x188>)
 800f874:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f876:	4b1a      	ldr	r3, [pc, #104]	; (800f8e0 <pvPortMalloc+0x188>)
 800f878:	681a      	ldr	r2, [r3, #0]
 800f87a:	4b1b      	ldr	r3, [pc, #108]	; (800f8e8 <pvPortMalloc+0x190>)
 800f87c:	681b      	ldr	r3, [r3, #0]
 800f87e:	429a      	cmp	r2, r3
 800f880:	d203      	bcs.n	800f88a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800f882:	4b17      	ldr	r3, [pc, #92]	; (800f8e0 <pvPortMalloc+0x188>)
 800f884:	681b      	ldr	r3, [r3, #0]
 800f886:	4a18      	ldr	r2, [pc, #96]	; (800f8e8 <pvPortMalloc+0x190>)
 800f888:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f88a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f88c:	685a      	ldr	r2, [r3, #4]
 800f88e:	4b13      	ldr	r3, [pc, #76]	; (800f8dc <pvPortMalloc+0x184>)
 800f890:	681b      	ldr	r3, [r3, #0]
 800f892:	431a      	orrs	r2, r3
 800f894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f896:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800f898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f89a:	2200      	movs	r2, #0
 800f89c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800f89e:	4b13      	ldr	r3, [pc, #76]	; (800f8ec <pvPortMalloc+0x194>)
 800f8a0:	681b      	ldr	r3, [r3, #0]
 800f8a2:	3301      	adds	r3, #1
 800f8a4:	4a11      	ldr	r2, [pc, #68]	; (800f8ec <pvPortMalloc+0x194>)
 800f8a6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800f8a8:	f7fe fb22 	bl	800def0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800f8ac:	69fb      	ldr	r3, [r7, #28]
 800f8ae:	f003 0307 	and.w	r3, r3, #7
 800f8b2:	2b00      	cmp	r3, #0
 800f8b4:	d00a      	beq.n	800f8cc <pvPortMalloc+0x174>
	__asm volatile
 800f8b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8ba:	f383 8811 	msr	BASEPRI, r3
 800f8be:	f3bf 8f6f 	isb	sy
 800f8c2:	f3bf 8f4f 	dsb	sy
 800f8c6:	60fb      	str	r3, [r7, #12]
}
 800f8c8:	bf00      	nop
 800f8ca:	e7fe      	b.n	800f8ca <pvPortMalloc+0x172>
	return pvReturn;
 800f8cc:	69fb      	ldr	r3, [r7, #28]
}
 800f8ce:	4618      	mov	r0, r3
 800f8d0:	3728      	adds	r7, #40	; 0x28
 800f8d2:	46bd      	mov	sp, r7
 800f8d4:	bd80      	pop	{r7, pc}
 800f8d6:	bf00      	nop
 800f8d8:	2000633c 	.word	0x2000633c
 800f8dc:	20006350 	.word	0x20006350
 800f8e0:	20006340 	.word	0x20006340
 800f8e4:	20006334 	.word	0x20006334
 800f8e8:	20006344 	.word	0x20006344
 800f8ec:	20006348 	.word	0x20006348

0800f8f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800f8f0:	b580      	push	{r7, lr}
 800f8f2:	b086      	sub	sp, #24
 800f8f4:	af00      	add	r7, sp, #0
 800f8f6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	2b00      	cmp	r3, #0
 800f900:	d04d      	beq.n	800f99e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800f902:	2308      	movs	r3, #8
 800f904:	425b      	negs	r3, r3
 800f906:	697a      	ldr	r2, [r7, #20]
 800f908:	4413      	add	r3, r2
 800f90a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800f90c:	697b      	ldr	r3, [r7, #20]
 800f90e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800f910:	693b      	ldr	r3, [r7, #16]
 800f912:	685a      	ldr	r2, [r3, #4]
 800f914:	4b24      	ldr	r3, [pc, #144]	; (800f9a8 <vPortFree+0xb8>)
 800f916:	681b      	ldr	r3, [r3, #0]
 800f918:	4013      	ands	r3, r2
 800f91a:	2b00      	cmp	r3, #0
 800f91c:	d10a      	bne.n	800f934 <vPortFree+0x44>
	__asm volatile
 800f91e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f922:	f383 8811 	msr	BASEPRI, r3
 800f926:	f3bf 8f6f 	isb	sy
 800f92a:	f3bf 8f4f 	dsb	sy
 800f92e:	60fb      	str	r3, [r7, #12]
}
 800f930:	bf00      	nop
 800f932:	e7fe      	b.n	800f932 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800f934:	693b      	ldr	r3, [r7, #16]
 800f936:	681b      	ldr	r3, [r3, #0]
 800f938:	2b00      	cmp	r3, #0
 800f93a:	d00a      	beq.n	800f952 <vPortFree+0x62>
	__asm volatile
 800f93c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f940:	f383 8811 	msr	BASEPRI, r3
 800f944:	f3bf 8f6f 	isb	sy
 800f948:	f3bf 8f4f 	dsb	sy
 800f94c:	60bb      	str	r3, [r7, #8]
}
 800f94e:	bf00      	nop
 800f950:	e7fe      	b.n	800f950 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800f952:	693b      	ldr	r3, [r7, #16]
 800f954:	685a      	ldr	r2, [r3, #4]
 800f956:	4b14      	ldr	r3, [pc, #80]	; (800f9a8 <vPortFree+0xb8>)
 800f958:	681b      	ldr	r3, [r3, #0]
 800f95a:	4013      	ands	r3, r2
 800f95c:	2b00      	cmp	r3, #0
 800f95e:	d01e      	beq.n	800f99e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800f960:	693b      	ldr	r3, [r7, #16]
 800f962:	681b      	ldr	r3, [r3, #0]
 800f964:	2b00      	cmp	r3, #0
 800f966:	d11a      	bne.n	800f99e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f968:	693b      	ldr	r3, [r7, #16]
 800f96a:	685a      	ldr	r2, [r3, #4]
 800f96c:	4b0e      	ldr	r3, [pc, #56]	; (800f9a8 <vPortFree+0xb8>)
 800f96e:	681b      	ldr	r3, [r3, #0]
 800f970:	43db      	mvns	r3, r3
 800f972:	401a      	ands	r2, r3
 800f974:	693b      	ldr	r3, [r7, #16]
 800f976:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800f978:	f7fe faac 	bl	800ded4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f97c:	693b      	ldr	r3, [r7, #16]
 800f97e:	685a      	ldr	r2, [r3, #4]
 800f980:	4b0a      	ldr	r3, [pc, #40]	; (800f9ac <vPortFree+0xbc>)
 800f982:	681b      	ldr	r3, [r3, #0]
 800f984:	4413      	add	r3, r2
 800f986:	4a09      	ldr	r2, [pc, #36]	; (800f9ac <vPortFree+0xbc>)
 800f988:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f98a:	6938      	ldr	r0, [r7, #16]
 800f98c:	f000 f874 	bl	800fa78 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800f990:	4b07      	ldr	r3, [pc, #28]	; (800f9b0 <vPortFree+0xc0>)
 800f992:	681b      	ldr	r3, [r3, #0]
 800f994:	3301      	adds	r3, #1
 800f996:	4a06      	ldr	r2, [pc, #24]	; (800f9b0 <vPortFree+0xc0>)
 800f998:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800f99a:	f7fe faa9 	bl	800def0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800f99e:	bf00      	nop
 800f9a0:	3718      	adds	r7, #24
 800f9a2:	46bd      	mov	sp, r7
 800f9a4:	bd80      	pop	{r7, pc}
 800f9a6:	bf00      	nop
 800f9a8:	20006350 	.word	0x20006350
 800f9ac:	20006340 	.word	0x20006340
 800f9b0:	2000634c 	.word	0x2000634c

0800f9b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800f9b4:	b480      	push	{r7}
 800f9b6:	b085      	sub	sp, #20
 800f9b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800f9ba:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 800f9be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800f9c0:	4b27      	ldr	r3, [pc, #156]	; (800fa60 <prvHeapInit+0xac>)
 800f9c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f9c4:	68fb      	ldr	r3, [r7, #12]
 800f9c6:	f003 0307 	and.w	r3, r3, #7
 800f9ca:	2b00      	cmp	r3, #0
 800f9cc:	d00c      	beq.n	800f9e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800f9ce:	68fb      	ldr	r3, [r7, #12]
 800f9d0:	3307      	adds	r3, #7
 800f9d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f9d4:	68fb      	ldr	r3, [r7, #12]
 800f9d6:	f023 0307 	bic.w	r3, r3, #7
 800f9da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800f9dc:	68ba      	ldr	r2, [r7, #8]
 800f9de:	68fb      	ldr	r3, [r7, #12]
 800f9e0:	1ad3      	subs	r3, r2, r3
 800f9e2:	4a1f      	ldr	r2, [pc, #124]	; (800fa60 <prvHeapInit+0xac>)
 800f9e4:	4413      	add	r3, r2
 800f9e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800f9e8:	68fb      	ldr	r3, [r7, #12]
 800f9ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f9ec:	4a1d      	ldr	r2, [pc, #116]	; (800fa64 <prvHeapInit+0xb0>)
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800f9f2:	4b1c      	ldr	r3, [pc, #112]	; (800fa64 <prvHeapInit+0xb0>)
 800f9f4:	2200      	movs	r2, #0
 800f9f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	68ba      	ldr	r2, [r7, #8]
 800f9fc:	4413      	add	r3, r2
 800f9fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800fa00:	2208      	movs	r2, #8
 800fa02:	68fb      	ldr	r3, [r7, #12]
 800fa04:	1a9b      	subs	r3, r3, r2
 800fa06:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800fa08:	68fb      	ldr	r3, [r7, #12]
 800fa0a:	f023 0307 	bic.w	r3, r3, #7
 800fa0e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800fa10:	68fb      	ldr	r3, [r7, #12]
 800fa12:	4a15      	ldr	r2, [pc, #84]	; (800fa68 <prvHeapInit+0xb4>)
 800fa14:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800fa16:	4b14      	ldr	r3, [pc, #80]	; (800fa68 <prvHeapInit+0xb4>)
 800fa18:	681b      	ldr	r3, [r3, #0]
 800fa1a:	2200      	movs	r2, #0
 800fa1c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800fa1e:	4b12      	ldr	r3, [pc, #72]	; (800fa68 <prvHeapInit+0xb4>)
 800fa20:	681b      	ldr	r3, [r3, #0]
 800fa22:	2200      	movs	r2, #0
 800fa24:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800fa2a:	683b      	ldr	r3, [r7, #0]
 800fa2c:	68fa      	ldr	r2, [r7, #12]
 800fa2e:	1ad2      	subs	r2, r2, r3
 800fa30:	683b      	ldr	r3, [r7, #0]
 800fa32:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800fa34:	4b0c      	ldr	r3, [pc, #48]	; (800fa68 <prvHeapInit+0xb4>)
 800fa36:	681a      	ldr	r2, [r3, #0]
 800fa38:	683b      	ldr	r3, [r7, #0]
 800fa3a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800fa3c:	683b      	ldr	r3, [r7, #0]
 800fa3e:	685b      	ldr	r3, [r3, #4]
 800fa40:	4a0a      	ldr	r2, [pc, #40]	; (800fa6c <prvHeapInit+0xb8>)
 800fa42:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800fa44:	683b      	ldr	r3, [r7, #0]
 800fa46:	685b      	ldr	r3, [r3, #4]
 800fa48:	4a09      	ldr	r2, [pc, #36]	; (800fa70 <prvHeapInit+0xbc>)
 800fa4a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800fa4c:	4b09      	ldr	r3, [pc, #36]	; (800fa74 <prvHeapInit+0xc0>)
 800fa4e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800fa52:	601a      	str	r2, [r3, #0]
}
 800fa54:	bf00      	nop
 800fa56:	3714      	adds	r7, #20
 800fa58:	46bd      	mov	sp, r7
 800fa5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa5e:	4770      	bx	lr
 800fa60:	20001334 	.word	0x20001334
 800fa64:	20006334 	.word	0x20006334
 800fa68:	2000633c 	.word	0x2000633c
 800fa6c:	20006344 	.word	0x20006344
 800fa70:	20006340 	.word	0x20006340
 800fa74:	20006350 	.word	0x20006350

0800fa78 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800fa78:	b480      	push	{r7}
 800fa7a:	b085      	sub	sp, #20
 800fa7c:	af00      	add	r7, sp, #0
 800fa7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800fa80:	4b28      	ldr	r3, [pc, #160]	; (800fb24 <prvInsertBlockIntoFreeList+0xac>)
 800fa82:	60fb      	str	r3, [r7, #12]
 800fa84:	e002      	b.n	800fa8c <prvInsertBlockIntoFreeList+0x14>
 800fa86:	68fb      	ldr	r3, [r7, #12]
 800fa88:	681b      	ldr	r3, [r3, #0]
 800fa8a:	60fb      	str	r3, [r7, #12]
 800fa8c:	68fb      	ldr	r3, [r7, #12]
 800fa8e:	681b      	ldr	r3, [r3, #0]
 800fa90:	687a      	ldr	r2, [r7, #4]
 800fa92:	429a      	cmp	r2, r3
 800fa94:	d8f7      	bhi.n	800fa86 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800fa96:	68fb      	ldr	r3, [r7, #12]
 800fa98:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800fa9a:	68fb      	ldr	r3, [r7, #12]
 800fa9c:	685b      	ldr	r3, [r3, #4]
 800fa9e:	68ba      	ldr	r2, [r7, #8]
 800faa0:	4413      	add	r3, r2
 800faa2:	687a      	ldr	r2, [r7, #4]
 800faa4:	429a      	cmp	r2, r3
 800faa6:	d108      	bne.n	800faba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800faa8:	68fb      	ldr	r3, [r7, #12]
 800faaa:	685a      	ldr	r2, [r3, #4]
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	685b      	ldr	r3, [r3, #4]
 800fab0:	441a      	add	r2, r3
 800fab2:	68fb      	ldr	r3, [r7, #12]
 800fab4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800fab6:	68fb      	ldr	r3, [r7, #12]
 800fab8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	685b      	ldr	r3, [r3, #4]
 800fac2:	68ba      	ldr	r2, [r7, #8]
 800fac4:	441a      	add	r2, r3
 800fac6:	68fb      	ldr	r3, [r7, #12]
 800fac8:	681b      	ldr	r3, [r3, #0]
 800faca:	429a      	cmp	r2, r3
 800facc:	d118      	bne.n	800fb00 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800face:	68fb      	ldr	r3, [r7, #12]
 800fad0:	681a      	ldr	r2, [r3, #0]
 800fad2:	4b15      	ldr	r3, [pc, #84]	; (800fb28 <prvInsertBlockIntoFreeList+0xb0>)
 800fad4:	681b      	ldr	r3, [r3, #0]
 800fad6:	429a      	cmp	r2, r3
 800fad8:	d00d      	beq.n	800faf6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	685a      	ldr	r2, [r3, #4]
 800fade:	68fb      	ldr	r3, [r7, #12]
 800fae0:	681b      	ldr	r3, [r3, #0]
 800fae2:	685b      	ldr	r3, [r3, #4]
 800fae4:	441a      	add	r2, r3
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800faea:	68fb      	ldr	r3, [r7, #12]
 800faec:	681b      	ldr	r3, [r3, #0]
 800faee:	681a      	ldr	r2, [r3, #0]
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	601a      	str	r2, [r3, #0]
 800faf4:	e008      	b.n	800fb08 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800faf6:	4b0c      	ldr	r3, [pc, #48]	; (800fb28 <prvInsertBlockIntoFreeList+0xb0>)
 800faf8:	681a      	ldr	r2, [r3, #0]
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	601a      	str	r2, [r3, #0]
 800fafe:	e003      	b.n	800fb08 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800fb00:	68fb      	ldr	r3, [r7, #12]
 800fb02:	681a      	ldr	r2, [r3, #0]
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800fb08:	68fa      	ldr	r2, [r7, #12]
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	429a      	cmp	r2, r3
 800fb0e:	d002      	beq.n	800fb16 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800fb10:	68fb      	ldr	r3, [r7, #12]
 800fb12:	687a      	ldr	r2, [r7, #4]
 800fb14:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fb16:	bf00      	nop
 800fb18:	3714      	adds	r7, #20
 800fb1a:	46bd      	mov	sp, r7
 800fb1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb20:	4770      	bx	lr
 800fb22:	bf00      	nop
 800fb24:	20006334 	.word	0x20006334
 800fb28:	2000633c 	.word	0x2000633c

0800fb2c <__errno>:
 800fb2c:	4b01      	ldr	r3, [pc, #4]	; (800fb34 <__errno+0x8>)
 800fb2e:	6818      	ldr	r0, [r3, #0]
 800fb30:	4770      	bx	lr
 800fb32:	bf00      	nop
 800fb34:	20000020 	.word	0x20000020

0800fb38 <__libc_init_array>:
 800fb38:	b570      	push	{r4, r5, r6, lr}
 800fb3a:	4d0d      	ldr	r5, [pc, #52]	; (800fb70 <__libc_init_array+0x38>)
 800fb3c:	4c0d      	ldr	r4, [pc, #52]	; (800fb74 <__libc_init_array+0x3c>)
 800fb3e:	1b64      	subs	r4, r4, r5
 800fb40:	10a4      	asrs	r4, r4, #2
 800fb42:	2600      	movs	r6, #0
 800fb44:	42a6      	cmp	r6, r4
 800fb46:	d109      	bne.n	800fb5c <__libc_init_array+0x24>
 800fb48:	4d0b      	ldr	r5, [pc, #44]	; (800fb78 <__libc_init_array+0x40>)
 800fb4a:	4c0c      	ldr	r4, [pc, #48]	; (800fb7c <__libc_init_array+0x44>)
 800fb4c:	f004 fa88 	bl	8014060 <_init>
 800fb50:	1b64      	subs	r4, r4, r5
 800fb52:	10a4      	asrs	r4, r4, #2
 800fb54:	2600      	movs	r6, #0
 800fb56:	42a6      	cmp	r6, r4
 800fb58:	d105      	bne.n	800fb66 <__libc_init_array+0x2e>
 800fb5a:	bd70      	pop	{r4, r5, r6, pc}
 800fb5c:	f855 3b04 	ldr.w	r3, [r5], #4
 800fb60:	4798      	blx	r3
 800fb62:	3601      	adds	r6, #1
 800fb64:	e7ee      	b.n	800fb44 <__libc_init_array+0xc>
 800fb66:	f855 3b04 	ldr.w	r3, [r5], #4
 800fb6a:	4798      	blx	r3
 800fb6c:	3601      	adds	r6, #1
 800fb6e:	e7f2      	b.n	800fb56 <__libc_init_array+0x1e>
 800fb70:	08014c7c 	.word	0x08014c7c
 800fb74:	08014c7c 	.word	0x08014c7c
 800fb78:	08014c7c 	.word	0x08014c7c
 800fb7c:	08014c80 	.word	0x08014c80

0800fb80 <malloc>:
 800fb80:	4b02      	ldr	r3, [pc, #8]	; (800fb8c <malloc+0xc>)
 800fb82:	4601      	mov	r1, r0
 800fb84:	6818      	ldr	r0, [r3, #0]
 800fb86:	f000 b885 	b.w	800fc94 <_malloc_r>
 800fb8a:	bf00      	nop
 800fb8c:	20000020 	.word	0x20000020

0800fb90 <memcpy>:
 800fb90:	440a      	add	r2, r1
 800fb92:	4291      	cmp	r1, r2
 800fb94:	f100 33ff 	add.w	r3, r0, #4294967295
 800fb98:	d100      	bne.n	800fb9c <memcpy+0xc>
 800fb9a:	4770      	bx	lr
 800fb9c:	b510      	push	{r4, lr}
 800fb9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fba2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fba6:	4291      	cmp	r1, r2
 800fba8:	d1f9      	bne.n	800fb9e <memcpy+0xe>
 800fbaa:	bd10      	pop	{r4, pc}

0800fbac <memset>:
 800fbac:	4402      	add	r2, r0
 800fbae:	4603      	mov	r3, r0
 800fbb0:	4293      	cmp	r3, r2
 800fbb2:	d100      	bne.n	800fbb6 <memset+0xa>
 800fbb4:	4770      	bx	lr
 800fbb6:	f803 1b01 	strb.w	r1, [r3], #1
 800fbba:	e7f9      	b.n	800fbb0 <memset+0x4>

0800fbbc <_free_r>:
 800fbbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fbbe:	2900      	cmp	r1, #0
 800fbc0:	d044      	beq.n	800fc4c <_free_r+0x90>
 800fbc2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fbc6:	9001      	str	r0, [sp, #4]
 800fbc8:	2b00      	cmp	r3, #0
 800fbca:	f1a1 0404 	sub.w	r4, r1, #4
 800fbce:	bfb8      	it	lt
 800fbd0:	18e4      	addlt	r4, r4, r3
 800fbd2:	f001 fbeb 	bl	80113ac <__malloc_lock>
 800fbd6:	4a1e      	ldr	r2, [pc, #120]	; (800fc50 <_free_r+0x94>)
 800fbd8:	9801      	ldr	r0, [sp, #4]
 800fbda:	6813      	ldr	r3, [r2, #0]
 800fbdc:	b933      	cbnz	r3, 800fbec <_free_r+0x30>
 800fbde:	6063      	str	r3, [r4, #4]
 800fbe0:	6014      	str	r4, [r2, #0]
 800fbe2:	b003      	add	sp, #12
 800fbe4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fbe8:	f001 bbe6 	b.w	80113b8 <__malloc_unlock>
 800fbec:	42a3      	cmp	r3, r4
 800fbee:	d908      	bls.n	800fc02 <_free_r+0x46>
 800fbf0:	6825      	ldr	r5, [r4, #0]
 800fbf2:	1961      	adds	r1, r4, r5
 800fbf4:	428b      	cmp	r3, r1
 800fbf6:	bf01      	itttt	eq
 800fbf8:	6819      	ldreq	r1, [r3, #0]
 800fbfa:	685b      	ldreq	r3, [r3, #4]
 800fbfc:	1949      	addeq	r1, r1, r5
 800fbfe:	6021      	streq	r1, [r4, #0]
 800fc00:	e7ed      	b.n	800fbde <_free_r+0x22>
 800fc02:	461a      	mov	r2, r3
 800fc04:	685b      	ldr	r3, [r3, #4]
 800fc06:	b10b      	cbz	r3, 800fc0c <_free_r+0x50>
 800fc08:	42a3      	cmp	r3, r4
 800fc0a:	d9fa      	bls.n	800fc02 <_free_r+0x46>
 800fc0c:	6811      	ldr	r1, [r2, #0]
 800fc0e:	1855      	adds	r5, r2, r1
 800fc10:	42a5      	cmp	r5, r4
 800fc12:	d10b      	bne.n	800fc2c <_free_r+0x70>
 800fc14:	6824      	ldr	r4, [r4, #0]
 800fc16:	4421      	add	r1, r4
 800fc18:	1854      	adds	r4, r2, r1
 800fc1a:	42a3      	cmp	r3, r4
 800fc1c:	6011      	str	r1, [r2, #0]
 800fc1e:	d1e0      	bne.n	800fbe2 <_free_r+0x26>
 800fc20:	681c      	ldr	r4, [r3, #0]
 800fc22:	685b      	ldr	r3, [r3, #4]
 800fc24:	6053      	str	r3, [r2, #4]
 800fc26:	4421      	add	r1, r4
 800fc28:	6011      	str	r1, [r2, #0]
 800fc2a:	e7da      	b.n	800fbe2 <_free_r+0x26>
 800fc2c:	d902      	bls.n	800fc34 <_free_r+0x78>
 800fc2e:	230c      	movs	r3, #12
 800fc30:	6003      	str	r3, [r0, #0]
 800fc32:	e7d6      	b.n	800fbe2 <_free_r+0x26>
 800fc34:	6825      	ldr	r5, [r4, #0]
 800fc36:	1961      	adds	r1, r4, r5
 800fc38:	428b      	cmp	r3, r1
 800fc3a:	bf04      	itt	eq
 800fc3c:	6819      	ldreq	r1, [r3, #0]
 800fc3e:	685b      	ldreq	r3, [r3, #4]
 800fc40:	6063      	str	r3, [r4, #4]
 800fc42:	bf04      	itt	eq
 800fc44:	1949      	addeq	r1, r1, r5
 800fc46:	6021      	streq	r1, [r4, #0]
 800fc48:	6054      	str	r4, [r2, #4]
 800fc4a:	e7ca      	b.n	800fbe2 <_free_r+0x26>
 800fc4c:	b003      	add	sp, #12
 800fc4e:	bd30      	pop	{r4, r5, pc}
 800fc50:	20006354 	.word	0x20006354

0800fc54 <sbrk_aligned>:
 800fc54:	b570      	push	{r4, r5, r6, lr}
 800fc56:	4e0e      	ldr	r6, [pc, #56]	; (800fc90 <sbrk_aligned+0x3c>)
 800fc58:	460c      	mov	r4, r1
 800fc5a:	6831      	ldr	r1, [r6, #0]
 800fc5c:	4605      	mov	r5, r0
 800fc5e:	b911      	cbnz	r1, 800fc66 <sbrk_aligned+0x12>
 800fc60:	f000 fcf6 	bl	8010650 <_sbrk_r>
 800fc64:	6030      	str	r0, [r6, #0]
 800fc66:	4621      	mov	r1, r4
 800fc68:	4628      	mov	r0, r5
 800fc6a:	f000 fcf1 	bl	8010650 <_sbrk_r>
 800fc6e:	1c43      	adds	r3, r0, #1
 800fc70:	d00a      	beq.n	800fc88 <sbrk_aligned+0x34>
 800fc72:	1cc4      	adds	r4, r0, #3
 800fc74:	f024 0403 	bic.w	r4, r4, #3
 800fc78:	42a0      	cmp	r0, r4
 800fc7a:	d007      	beq.n	800fc8c <sbrk_aligned+0x38>
 800fc7c:	1a21      	subs	r1, r4, r0
 800fc7e:	4628      	mov	r0, r5
 800fc80:	f000 fce6 	bl	8010650 <_sbrk_r>
 800fc84:	3001      	adds	r0, #1
 800fc86:	d101      	bne.n	800fc8c <sbrk_aligned+0x38>
 800fc88:	f04f 34ff 	mov.w	r4, #4294967295
 800fc8c:	4620      	mov	r0, r4
 800fc8e:	bd70      	pop	{r4, r5, r6, pc}
 800fc90:	20006358 	.word	0x20006358

0800fc94 <_malloc_r>:
 800fc94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fc98:	1ccd      	adds	r5, r1, #3
 800fc9a:	f025 0503 	bic.w	r5, r5, #3
 800fc9e:	3508      	adds	r5, #8
 800fca0:	2d0c      	cmp	r5, #12
 800fca2:	bf38      	it	cc
 800fca4:	250c      	movcc	r5, #12
 800fca6:	2d00      	cmp	r5, #0
 800fca8:	4607      	mov	r7, r0
 800fcaa:	db01      	blt.n	800fcb0 <_malloc_r+0x1c>
 800fcac:	42a9      	cmp	r1, r5
 800fcae:	d905      	bls.n	800fcbc <_malloc_r+0x28>
 800fcb0:	230c      	movs	r3, #12
 800fcb2:	603b      	str	r3, [r7, #0]
 800fcb4:	2600      	movs	r6, #0
 800fcb6:	4630      	mov	r0, r6
 800fcb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fcbc:	4e2e      	ldr	r6, [pc, #184]	; (800fd78 <_malloc_r+0xe4>)
 800fcbe:	f001 fb75 	bl	80113ac <__malloc_lock>
 800fcc2:	6833      	ldr	r3, [r6, #0]
 800fcc4:	461c      	mov	r4, r3
 800fcc6:	bb34      	cbnz	r4, 800fd16 <_malloc_r+0x82>
 800fcc8:	4629      	mov	r1, r5
 800fcca:	4638      	mov	r0, r7
 800fccc:	f7ff ffc2 	bl	800fc54 <sbrk_aligned>
 800fcd0:	1c43      	adds	r3, r0, #1
 800fcd2:	4604      	mov	r4, r0
 800fcd4:	d14d      	bne.n	800fd72 <_malloc_r+0xde>
 800fcd6:	6834      	ldr	r4, [r6, #0]
 800fcd8:	4626      	mov	r6, r4
 800fcda:	2e00      	cmp	r6, #0
 800fcdc:	d140      	bne.n	800fd60 <_malloc_r+0xcc>
 800fcde:	6823      	ldr	r3, [r4, #0]
 800fce0:	4631      	mov	r1, r6
 800fce2:	4638      	mov	r0, r7
 800fce4:	eb04 0803 	add.w	r8, r4, r3
 800fce8:	f000 fcb2 	bl	8010650 <_sbrk_r>
 800fcec:	4580      	cmp	r8, r0
 800fcee:	d13a      	bne.n	800fd66 <_malloc_r+0xd2>
 800fcf0:	6821      	ldr	r1, [r4, #0]
 800fcf2:	3503      	adds	r5, #3
 800fcf4:	1a6d      	subs	r5, r5, r1
 800fcf6:	f025 0503 	bic.w	r5, r5, #3
 800fcfa:	3508      	adds	r5, #8
 800fcfc:	2d0c      	cmp	r5, #12
 800fcfe:	bf38      	it	cc
 800fd00:	250c      	movcc	r5, #12
 800fd02:	4629      	mov	r1, r5
 800fd04:	4638      	mov	r0, r7
 800fd06:	f7ff ffa5 	bl	800fc54 <sbrk_aligned>
 800fd0a:	3001      	adds	r0, #1
 800fd0c:	d02b      	beq.n	800fd66 <_malloc_r+0xd2>
 800fd0e:	6823      	ldr	r3, [r4, #0]
 800fd10:	442b      	add	r3, r5
 800fd12:	6023      	str	r3, [r4, #0]
 800fd14:	e00e      	b.n	800fd34 <_malloc_r+0xa0>
 800fd16:	6822      	ldr	r2, [r4, #0]
 800fd18:	1b52      	subs	r2, r2, r5
 800fd1a:	d41e      	bmi.n	800fd5a <_malloc_r+0xc6>
 800fd1c:	2a0b      	cmp	r2, #11
 800fd1e:	d916      	bls.n	800fd4e <_malloc_r+0xba>
 800fd20:	1961      	adds	r1, r4, r5
 800fd22:	42a3      	cmp	r3, r4
 800fd24:	6025      	str	r5, [r4, #0]
 800fd26:	bf18      	it	ne
 800fd28:	6059      	strne	r1, [r3, #4]
 800fd2a:	6863      	ldr	r3, [r4, #4]
 800fd2c:	bf08      	it	eq
 800fd2e:	6031      	streq	r1, [r6, #0]
 800fd30:	5162      	str	r2, [r4, r5]
 800fd32:	604b      	str	r3, [r1, #4]
 800fd34:	4638      	mov	r0, r7
 800fd36:	f104 060b 	add.w	r6, r4, #11
 800fd3a:	f001 fb3d 	bl	80113b8 <__malloc_unlock>
 800fd3e:	f026 0607 	bic.w	r6, r6, #7
 800fd42:	1d23      	adds	r3, r4, #4
 800fd44:	1af2      	subs	r2, r6, r3
 800fd46:	d0b6      	beq.n	800fcb6 <_malloc_r+0x22>
 800fd48:	1b9b      	subs	r3, r3, r6
 800fd4a:	50a3      	str	r3, [r4, r2]
 800fd4c:	e7b3      	b.n	800fcb6 <_malloc_r+0x22>
 800fd4e:	6862      	ldr	r2, [r4, #4]
 800fd50:	42a3      	cmp	r3, r4
 800fd52:	bf0c      	ite	eq
 800fd54:	6032      	streq	r2, [r6, #0]
 800fd56:	605a      	strne	r2, [r3, #4]
 800fd58:	e7ec      	b.n	800fd34 <_malloc_r+0xa0>
 800fd5a:	4623      	mov	r3, r4
 800fd5c:	6864      	ldr	r4, [r4, #4]
 800fd5e:	e7b2      	b.n	800fcc6 <_malloc_r+0x32>
 800fd60:	4634      	mov	r4, r6
 800fd62:	6876      	ldr	r6, [r6, #4]
 800fd64:	e7b9      	b.n	800fcda <_malloc_r+0x46>
 800fd66:	230c      	movs	r3, #12
 800fd68:	603b      	str	r3, [r7, #0]
 800fd6a:	4638      	mov	r0, r7
 800fd6c:	f001 fb24 	bl	80113b8 <__malloc_unlock>
 800fd70:	e7a1      	b.n	800fcb6 <_malloc_r+0x22>
 800fd72:	6025      	str	r5, [r4, #0]
 800fd74:	e7de      	b.n	800fd34 <_malloc_r+0xa0>
 800fd76:	bf00      	nop
 800fd78:	20006354 	.word	0x20006354

0800fd7c <__cvt>:
 800fd7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fd80:	ec55 4b10 	vmov	r4, r5, d0
 800fd84:	2d00      	cmp	r5, #0
 800fd86:	460e      	mov	r6, r1
 800fd88:	4619      	mov	r1, r3
 800fd8a:	462b      	mov	r3, r5
 800fd8c:	bfbb      	ittet	lt
 800fd8e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800fd92:	461d      	movlt	r5, r3
 800fd94:	2300      	movge	r3, #0
 800fd96:	232d      	movlt	r3, #45	; 0x2d
 800fd98:	700b      	strb	r3, [r1, #0]
 800fd9a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fd9c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800fda0:	4691      	mov	r9, r2
 800fda2:	f023 0820 	bic.w	r8, r3, #32
 800fda6:	bfbc      	itt	lt
 800fda8:	4622      	movlt	r2, r4
 800fdaa:	4614      	movlt	r4, r2
 800fdac:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800fdb0:	d005      	beq.n	800fdbe <__cvt+0x42>
 800fdb2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800fdb6:	d100      	bne.n	800fdba <__cvt+0x3e>
 800fdb8:	3601      	adds	r6, #1
 800fdba:	2102      	movs	r1, #2
 800fdbc:	e000      	b.n	800fdc0 <__cvt+0x44>
 800fdbe:	2103      	movs	r1, #3
 800fdc0:	ab03      	add	r3, sp, #12
 800fdc2:	9301      	str	r3, [sp, #4]
 800fdc4:	ab02      	add	r3, sp, #8
 800fdc6:	9300      	str	r3, [sp, #0]
 800fdc8:	ec45 4b10 	vmov	d0, r4, r5
 800fdcc:	4653      	mov	r3, sl
 800fdce:	4632      	mov	r2, r6
 800fdd0:	f000 fcfa 	bl	80107c8 <_dtoa_r>
 800fdd4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800fdd8:	4607      	mov	r7, r0
 800fdda:	d102      	bne.n	800fde2 <__cvt+0x66>
 800fddc:	f019 0f01 	tst.w	r9, #1
 800fde0:	d022      	beq.n	800fe28 <__cvt+0xac>
 800fde2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800fde6:	eb07 0906 	add.w	r9, r7, r6
 800fdea:	d110      	bne.n	800fe0e <__cvt+0x92>
 800fdec:	783b      	ldrb	r3, [r7, #0]
 800fdee:	2b30      	cmp	r3, #48	; 0x30
 800fdf0:	d10a      	bne.n	800fe08 <__cvt+0x8c>
 800fdf2:	2200      	movs	r2, #0
 800fdf4:	2300      	movs	r3, #0
 800fdf6:	4620      	mov	r0, r4
 800fdf8:	4629      	mov	r1, r5
 800fdfa:	f7f0 fe7d 	bl	8000af8 <__aeabi_dcmpeq>
 800fdfe:	b918      	cbnz	r0, 800fe08 <__cvt+0x8c>
 800fe00:	f1c6 0601 	rsb	r6, r6, #1
 800fe04:	f8ca 6000 	str.w	r6, [sl]
 800fe08:	f8da 3000 	ldr.w	r3, [sl]
 800fe0c:	4499      	add	r9, r3
 800fe0e:	2200      	movs	r2, #0
 800fe10:	2300      	movs	r3, #0
 800fe12:	4620      	mov	r0, r4
 800fe14:	4629      	mov	r1, r5
 800fe16:	f7f0 fe6f 	bl	8000af8 <__aeabi_dcmpeq>
 800fe1a:	b108      	cbz	r0, 800fe20 <__cvt+0xa4>
 800fe1c:	f8cd 900c 	str.w	r9, [sp, #12]
 800fe20:	2230      	movs	r2, #48	; 0x30
 800fe22:	9b03      	ldr	r3, [sp, #12]
 800fe24:	454b      	cmp	r3, r9
 800fe26:	d307      	bcc.n	800fe38 <__cvt+0xbc>
 800fe28:	9b03      	ldr	r3, [sp, #12]
 800fe2a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800fe2c:	1bdb      	subs	r3, r3, r7
 800fe2e:	4638      	mov	r0, r7
 800fe30:	6013      	str	r3, [r2, #0]
 800fe32:	b004      	add	sp, #16
 800fe34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fe38:	1c59      	adds	r1, r3, #1
 800fe3a:	9103      	str	r1, [sp, #12]
 800fe3c:	701a      	strb	r2, [r3, #0]
 800fe3e:	e7f0      	b.n	800fe22 <__cvt+0xa6>

0800fe40 <__exponent>:
 800fe40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fe42:	4603      	mov	r3, r0
 800fe44:	2900      	cmp	r1, #0
 800fe46:	bfb8      	it	lt
 800fe48:	4249      	neglt	r1, r1
 800fe4a:	f803 2b02 	strb.w	r2, [r3], #2
 800fe4e:	bfb4      	ite	lt
 800fe50:	222d      	movlt	r2, #45	; 0x2d
 800fe52:	222b      	movge	r2, #43	; 0x2b
 800fe54:	2909      	cmp	r1, #9
 800fe56:	7042      	strb	r2, [r0, #1]
 800fe58:	dd2a      	ble.n	800feb0 <__exponent+0x70>
 800fe5a:	f10d 0407 	add.w	r4, sp, #7
 800fe5e:	46a4      	mov	ip, r4
 800fe60:	270a      	movs	r7, #10
 800fe62:	46a6      	mov	lr, r4
 800fe64:	460a      	mov	r2, r1
 800fe66:	fb91 f6f7 	sdiv	r6, r1, r7
 800fe6a:	fb07 1516 	mls	r5, r7, r6, r1
 800fe6e:	3530      	adds	r5, #48	; 0x30
 800fe70:	2a63      	cmp	r2, #99	; 0x63
 800fe72:	f104 34ff 	add.w	r4, r4, #4294967295
 800fe76:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800fe7a:	4631      	mov	r1, r6
 800fe7c:	dcf1      	bgt.n	800fe62 <__exponent+0x22>
 800fe7e:	3130      	adds	r1, #48	; 0x30
 800fe80:	f1ae 0502 	sub.w	r5, lr, #2
 800fe84:	f804 1c01 	strb.w	r1, [r4, #-1]
 800fe88:	1c44      	adds	r4, r0, #1
 800fe8a:	4629      	mov	r1, r5
 800fe8c:	4561      	cmp	r1, ip
 800fe8e:	d30a      	bcc.n	800fea6 <__exponent+0x66>
 800fe90:	f10d 0209 	add.w	r2, sp, #9
 800fe94:	eba2 020e 	sub.w	r2, r2, lr
 800fe98:	4565      	cmp	r5, ip
 800fe9a:	bf88      	it	hi
 800fe9c:	2200      	movhi	r2, #0
 800fe9e:	4413      	add	r3, r2
 800fea0:	1a18      	subs	r0, r3, r0
 800fea2:	b003      	add	sp, #12
 800fea4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fea6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800feaa:	f804 2f01 	strb.w	r2, [r4, #1]!
 800feae:	e7ed      	b.n	800fe8c <__exponent+0x4c>
 800feb0:	2330      	movs	r3, #48	; 0x30
 800feb2:	3130      	adds	r1, #48	; 0x30
 800feb4:	7083      	strb	r3, [r0, #2]
 800feb6:	70c1      	strb	r1, [r0, #3]
 800feb8:	1d03      	adds	r3, r0, #4
 800feba:	e7f1      	b.n	800fea0 <__exponent+0x60>

0800febc <_printf_float>:
 800febc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fec0:	ed2d 8b02 	vpush	{d8}
 800fec4:	b08d      	sub	sp, #52	; 0x34
 800fec6:	460c      	mov	r4, r1
 800fec8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800fecc:	4616      	mov	r6, r2
 800fece:	461f      	mov	r7, r3
 800fed0:	4605      	mov	r5, r0
 800fed2:	f001 fa67 	bl	80113a4 <_localeconv_r>
 800fed6:	f8d0 a000 	ldr.w	sl, [r0]
 800feda:	4650      	mov	r0, sl
 800fedc:	f7f0 f990 	bl	8000200 <strlen>
 800fee0:	2300      	movs	r3, #0
 800fee2:	930a      	str	r3, [sp, #40]	; 0x28
 800fee4:	6823      	ldr	r3, [r4, #0]
 800fee6:	9305      	str	r3, [sp, #20]
 800fee8:	f8d8 3000 	ldr.w	r3, [r8]
 800feec:	f894 b018 	ldrb.w	fp, [r4, #24]
 800fef0:	3307      	adds	r3, #7
 800fef2:	f023 0307 	bic.w	r3, r3, #7
 800fef6:	f103 0208 	add.w	r2, r3, #8
 800fefa:	f8c8 2000 	str.w	r2, [r8]
 800fefe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff02:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800ff06:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800ff0a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ff0e:	9307      	str	r3, [sp, #28]
 800ff10:	f8cd 8018 	str.w	r8, [sp, #24]
 800ff14:	ee08 0a10 	vmov	s16, r0
 800ff18:	4b9f      	ldr	r3, [pc, #636]	; (8010198 <_printf_float+0x2dc>)
 800ff1a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ff1e:	f04f 32ff 	mov.w	r2, #4294967295
 800ff22:	f7f0 fe1b 	bl	8000b5c <__aeabi_dcmpun>
 800ff26:	bb88      	cbnz	r0, 800ff8c <_printf_float+0xd0>
 800ff28:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ff2c:	4b9a      	ldr	r3, [pc, #616]	; (8010198 <_printf_float+0x2dc>)
 800ff2e:	f04f 32ff 	mov.w	r2, #4294967295
 800ff32:	f7f0 fdf5 	bl	8000b20 <__aeabi_dcmple>
 800ff36:	bb48      	cbnz	r0, 800ff8c <_printf_float+0xd0>
 800ff38:	2200      	movs	r2, #0
 800ff3a:	2300      	movs	r3, #0
 800ff3c:	4640      	mov	r0, r8
 800ff3e:	4649      	mov	r1, r9
 800ff40:	f7f0 fde4 	bl	8000b0c <__aeabi_dcmplt>
 800ff44:	b110      	cbz	r0, 800ff4c <_printf_float+0x90>
 800ff46:	232d      	movs	r3, #45	; 0x2d
 800ff48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ff4c:	4b93      	ldr	r3, [pc, #588]	; (801019c <_printf_float+0x2e0>)
 800ff4e:	4894      	ldr	r0, [pc, #592]	; (80101a0 <_printf_float+0x2e4>)
 800ff50:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800ff54:	bf94      	ite	ls
 800ff56:	4698      	movls	r8, r3
 800ff58:	4680      	movhi	r8, r0
 800ff5a:	2303      	movs	r3, #3
 800ff5c:	6123      	str	r3, [r4, #16]
 800ff5e:	9b05      	ldr	r3, [sp, #20]
 800ff60:	f023 0204 	bic.w	r2, r3, #4
 800ff64:	6022      	str	r2, [r4, #0]
 800ff66:	f04f 0900 	mov.w	r9, #0
 800ff6a:	9700      	str	r7, [sp, #0]
 800ff6c:	4633      	mov	r3, r6
 800ff6e:	aa0b      	add	r2, sp, #44	; 0x2c
 800ff70:	4621      	mov	r1, r4
 800ff72:	4628      	mov	r0, r5
 800ff74:	f000 f9d8 	bl	8010328 <_printf_common>
 800ff78:	3001      	adds	r0, #1
 800ff7a:	f040 8090 	bne.w	801009e <_printf_float+0x1e2>
 800ff7e:	f04f 30ff 	mov.w	r0, #4294967295
 800ff82:	b00d      	add	sp, #52	; 0x34
 800ff84:	ecbd 8b02 	vpop	{d8}
 800ff88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff8c:	4642      	mov	r2, r8
 800ff8e:	464b      	mov	r3, r9
 800ff90:	4640      	mov	r0, r8
 800ff92:	4649      	mov	r1, r9
 800ff94:	f7f0 fde2 	bl	8000b5c <__aeabi_dcmpun>
 800ff98:	b140      	cbz	r0, 800ffac <_printf_float+0xf0>
 800ff9a:	464b      	mov	r3, r9
 800ff9c:	2b00      	cmp	r3, #0
 800ff9e:	bfbc      	itt	lt
 800ffa0:	232d      	movlt	r3, #45	; 0x2d
 800ffa2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800ffa6:	487f      	ldr	r0, [pc, #508]	; (80101a4 <_printf_float+0x2e8>)
 800ffa8:	4b7f      	ldr	r3, [pc, #508]	; (80101a8 <_printf_float+0x2ec>)
 800ffaa:	e7d1      	b.n	800ff50 <_printf_float+0x94>
 800ffac:	6863      	ldr	r3, [r4, #4]
 800ffae:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800ffb2:	9206      	str	r2, [sp, #24]
 800ffb4:	1c5a      	adds	r2, r3, #1
 800ffb6:	d13f      	bne.n	8010038 <_printf_float+0x17c>
 800ffb8:	2306      	movs	r3, #6
 800ffba:	6063      	str	r3, [r4, #4]
 800ffbc:	9b05      	ldr	r3, [sp, #20]
 800ffbe:	6861      	ldr	r1, [r4, #4]
 800ffc0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800ffc4:	2300      	movs	r3, #0
 800ffc6:	9303      	str	r3, [sp, #12]
 800ffc8:	ab0a      	add	r3, sp, #40	; 0x28
 800ffca:	e9cd b301 	strd	fp, r3, [sp, #4]
 800ffce:	ab09      	add	r3, sp, #36	; 0x24
 800ffd0:	ec49 8b10 	vmov	d0, r8, r9
 800ffd4:	9300      	str	r3, [sp, #0]
 800ffd6:	6022      	str	r2, [r4, #0]
 800ffd8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800ffdc:	4628      	mov	r0, r5
 800ffde:	f7ff fecd 	bl	800fd7c <__cvt>
 800ffe2:	9b06      	ldr	r3, [sp, #24]
 800ffe4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ffe6:	2b47      	cmp	r3, #71	; 0x47
 800ffe8:	4680      	mov	r8, r0
 800ffea:	d108      	bne.n	800fffe <_printf_float+0x142>
 800ffec:	1cc8      	adds	r0, r1, #3
 800ffee:	db02      	blt.n	800fff6 <_printf_float+0x13a>
 800fff0:	6863      	ldr	r3, [r4, #4]
 800fff2:	4299      	cmp	r1, r3
 800fff4:	dd41      	ble.n	801007a <_printf_float+0x1be>
 800fff6:	f1ab 0b02 	sub.w	fp, fp, #2
 800fffa:	fa5f fb8b 	uxtb.w	fp, fp
 800fffe:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8010002:	d820      	bhi.n	8010046 <_printf_float+0x18a>
 8010004:	3901      	subs	r1, #1
 8010006:	465a      	mov	r2, fp
 8010008:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801000c:	9109      	str	r1, [sp, #36]	; 0x24
 801000e:	f7ff ff17 	bl	800fe40 <__exponent>
 8010012:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010014:	1813      	adds	r3, r2, r0
 8010016:	2a01      	cmp	r2, #1
 8010018:	4681      	mov	r9, r0
 801001a:	6123      	str	r3, [r4, #16]
 801001c:	dc02      	bgt.n	8010024 <_printf_float+0x168>
 801001e:	6822      	ldr	r2, [r4, #0]
 8010020:	07d2      	lsls	r2, r2, #31
 8010022:	d501      	bpl.n	8010028 <_printf_float+0x16c>
 8010024:	3301      	adds	r3, #1
 8010026:	6123      	str	r3, [r4, #16]
 8010028:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801002c:	2b00      	cmp	r3, #0
 801002e:	d09c      	beq.n	800ff6a <_printf_float+0xae>
 8010030:	232d      	movs	r3, #45	; 0x2d
 8010032:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010036:	e798      	b.n	800ff6a <_printf_float+0xae>
 8010038:	9a06      	ldr	r2, [sp, #24]
 801003a:	2a47      	cmp	r2, #71	; 0x47
 801003c:	d1be      	bne.n	800ffbc <_printf_float+0x100>
 801003e:	2b00      	cmp	r3, #0
 8010040:	d1bc      	bne.n	800ffbc <_printf_float+0x100>
 8010042:	2301      	movs	r3, #1
 8010044:	e7b9      	b.n	800ffba <_printf_float+0xfe>
 8010046:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801004a:	d118      	bne.n	801007e <_printf_float+0x1c2>
 801004c:	2900      	cmp	r1, #0
 801004e:	6863      	ldr	r3, [r4, #4]
 8010050:	dd0b      	ble.n	801006a <_printf_float+0x1ae>
 8010052:	6121      	str	r1, [r4, #16]
 8010054:	b913      	cbnz	r3, 801005c <_printf_float+0x1a0>
 8010056:	6822      	ldr	r2, [r4, #0]
 8010058:	07d0      	lsls	r0, r2, #31
 801005a:	d502      	bpl.n	8010062 <_printf_float+0x1a6>
 801005c:	3301      	adds	r3, #1
 801005e:	440b      	add	r3, r1
 8010060:	6123      	str	r3, [r4, #16]
 8010062:	65a1      	str	r1, [r4, #88]	; 0x58
 8010064:	f04f 0900 	mov.w	r9, #0
 8010068:	e7de      	b.n	8010028 <_printf_float+0x16c>
 801006a:	b913      	cbnz	r3, 8010072 <_printf_float+0x1b6>
 801006c:	6822      	ldr	r2, [r4, #0]
 801006e:	07d2      	lsls	r2, r2, #31
 8010070:	d501      	bpl.n	8010076 <_printf_float+0x1ba>
 8010072:	3302      	adds	r3, #2
 8010074:	e7f4      	b.n	8010060 <_printf_float+0x1a4>
 8010076:	2301      	movs	r3, #1
 8010078:	e7f2      	b.n	8010060 <_printf_float+0x1a4>
 801007a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801007e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010080:	4299      	cmp	r1, r3
 8010082:	db05      	blt.n	8010090 <_printf_float+0x1d4>
 8010084:	6823      	ldr	r3, [r4, #0]
 8010086:	6121      	str	r1, [r4, #16]
 8010088:	07d8      	lsls	r0, r3, #31
 801008a:	d5ea      	bpl.n	8010062 <_printf_float+0x1a6>
 801008c:	1c4b      	adds	r3, r1, #1
 801008e:	e7e7      	b.n	8010060 <_printf_float+0x1a4>
 8010090:	2900      	cmp	r1, #0
 8010092:	bfd4      	ite	le
 8010094:	f1c1 0202 	rsble	r2, r1, #2
 8010098:	2201      	movgt	r2, #1
 801009a:	4413      	add	r3, r2
 801009c:	e7e0      	b.n	8010060 <_printf_float+0x1a4>
 801009e:	6823      	ldr	r3, [r4, #0]
 80100a0:	055a      	lsls	r2, r3, #21
 80100a2:	d407      	bmi.n	80100b4 <_printf_float+0x1f8>
 80100a4:	6923      	ldr	r3, [r4, #16]
 80100a6:	4642      	mov	r2, r8
 80100a8:	4631      	mov	r1, r6
 80100aa:	4628      	mov	r0, r5
 80100ac:	47b8      	blx	r7
 80100ae:	3001      	adds	r0, #1
 80100b0:	d12c      	bne.n	801010c <_printf_float+0x250>
 80100b2:	e764      	b.n	800ff7e <_printf_float+0xc2>
 80100b4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80100b8:	f240 80e0 	bls.w	801027c <_printf_float+0x3c0>
 80100bc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80100c0:	2200      	movs	r2, #0
 80100c2:	2300      	movs	r3, #0
 80100c4:	f7f0 fd18 	bl	8000af8 <__aeabi_dcmpeq>
 80100c8:	2800      	cmp	r0, #0
 80100ca:	d034      	beq.n	8010136 <_printf_float+0x27a>
 80100cc:	4a37      	ldr	r2, [pc, #220]	; (80101ac <_printf_float+0x2f0>)
 80100ce:	2301      	movs	r3, #1
 80100d0:	4631      	mov	r1, r6
 80100d2:	4628      	mov	r0, r5
 80100d4:	47b8      	blx	r7
 80100d6:	3001      	adds	r0, #1
 80100d8:	f43f af51 	beq.w	800ff7e <_printf_float+0xc2>
 80100dc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80100e0:	429a      	cmp	r2, r3
 80100e2:	db02      	blt.n	80100ea <_printf_float+0x22e>
 80100e4:	6823      	ldr	r3, [r4, #0]
 80100e6:	07d8      	lsls	r0, r3, #31
 80100e8:	d510      	bpl.n	801010c <_printf_float+0x250>
 80100ea:	ee18 3a10 	vmov	r3, s16
 80100ee:	4652      	mov	r2, sl
 80100f0:	4631      	mov	r1, r6
 80100f2:	4628      	mov	r0, r5
 80100f4:	47b8      	blx	r7
 80100f6:	3001      	adds	r0, #1
 80100f8:	f43f af41 	beq.w	800ff7e <_printf_float+0xc2>
 80100fc:	f04f 0800 	mov.w	r8, #0
 8010100:	f104 091a 	add.w	r9, r4, #26
 8010104:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010106:	3b01      	subs	r3, #1
 8010108:	4543      	cmp	r3, r8
 801010a:	dc09      	bgt.n	8010120 <_printf_float+0x264>
 801010c:	6823      	ldr	r3, [r4, #0]
 801010e:	079b      	lsls	r3, r3, #30
 8010110:	f100 8105 	bmi.w	801031e <_printf_float+0x462>
 8010114:	68e0      	ldr	r0, [r4, #12]
 8010116:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010118:	4298      	cmp	r0, r3
 801011a:	bfb8      	it	lt
 801011c:	4618      	movlt	r0, r3
 801011e:	e730      	b.n	800ff82 <_printf_float+0xc6>
 8010120:	2301      	movs	r3, #1
 8010122:	464a      	mov	r2, r9
 8010124:	4631      	mov	r1, r6
 8010126:	4628      	mov	r0, r5
 8010128:	47b8      	blx	r7
 801012a:	3001      	adds	r0, #1
 801012c:	f43f af27 	beq.w	800ff7e <_printf_float+0xc2>
 8010130:	f108 0801 	add.w	r8, r8, #1
 8010134:	e7e6      	b.n	8010104 <_printf_float+0x248>
 8010136:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010138:	2b00      	cmp	r3, #0
 801013a:	dc39      	bgt.n	80101b0 <_printf_float+0x2f4>
 801013c:	4a1b      	ldr	r2, [pc, #108]	; (80101ac <_printf_float+0x2f0>)
 801013e:	2301      	movs	r3, #1
 8010140:	4631      	mov	r1, r6
 8010142:	4628      	mov	r0, r5
 8010144:	47b8      	blx	r7
 8010146:	3001      	adds	r0, #1
 8010148:	f43f af19 	beq.w	800ff7e <_printf_float+0xc2>
 801014c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010150:	4313      	orrs	r3, r2
 8010152:	d102      	bne.n	801015a <_printf_float+0x29e>
 8010154:	6823      	ldr	r3, [r4, #0]
 8010156:	07d9      	lsls	r1, r3, #31
 8010158:	d5d8      	bpl.n	801010c <_printf_float+0x250>
 801015a:	ee18 3a10 	vmov	r3, s16
 801015e:	4652      	mov	r2, sl
 8010160:	4631      	mov	r1, r6
 8010162:	4628      	mov	r0, r5
 8010164:	47b8      	blx	r7
 8010166:	3001      	adds	r0, #1
 8010168:	f43f af09 	beq.w	800ff7e <_printf_float+0xc2>
 801016c:	f04f 0900 	mov.w	r9, #0
 8010170:	f104 0a1a 	add.w	sl, r4, #26
 8010174:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010176:	425b      	negs	r3, r3
 8010178:	454b      	cmp	r3, r9
 801017a:	dc01      	bgt.n	8010180 <_printf_float+0x2c4>
 801017c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801017e:	e792      	b.n	80100a6 <_printf_float+0x1ea>
 8010180:	2301      	movs	r3, #1
 8010182:	4652      	mov	r2, sl
 8010184:	4631      	mov	r1, r6
 8010186:	4628      	mov	r0, r5
 8010188:	47b8      	blx	r7
 801018a:	3001      	adds	r0, #1
 801018c:	f43f aef7 	beq.w	800ff7e <_printf_float+0xc2>
 8010190:	f109 0901 	add.w	r9, r9, #1
 8010194:	e7ee      	b.n	8010174 <_printf_float+0x2b8>
 8010196:	bf00      	nop
 8010198:	7fefffff 	.word	0x7fefffff
 801019c:	0801447c 	.word	0x0801447c
 80101a0:	08014480 	.word	0x08014480
 80101a4:	08014488 	.word	0x08014488
 80101a8:	08014484 	.word	0x08014484
 80101ac:	0801448c 	.word	0x0801448c
 80101b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80101b2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80101b4:	429a      	cmp	r2, r3
 80101b6:	bfa8      	it	ge
 80101b8:	461a      	movge	r2, r3
 80101ba:	2a00      	cmp	r2, #0
 80101bc:	4691      	mov	r9, r2
 80101be:	dc37      	bgt.n	8010230 <_printf_float+0x374>
 80101c0:	f04f 0b00 	mov.w	fp, #0
 80101c4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80101c8:	f104 021a 	add.w	r2, r4, #26
 80101cc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80101ce:	9305      	str	r3, [sp, #20]
 80101d0:	eba3 0309 	sub.w	r3, r3, r9
 80101d4:	455b      	cmp	r3, fp
 80101d6:	dc33      	bgt.n	8010240 <_printf_float+0x384>
 80101d8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80101dc:	429a      	cmp	r2, r3
 80101de:	db3b      	blt.n	8010258 <_printf_float+0x39c>
 80101e0:	6823      	ldr	r3, [r4, #0]
 80101e2:	07da      	lsls	r2, r3, #31
 80101e4:	d438      	bmi.n	8010258 <_printf_float+0x39c>
 80101e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80101e8:	9a05      	ldr	r2, [sp, #20]
 80101ea:	9909      	ldr	r1, [sp, #36]	; 0x24
 80101ec:	1a9a      	subs	r2, r3, r2
 80101ee:	eba3 0901 	sub.w	r9, r3, r1
 80101f2:	4591      	cmp	r9, r2
 80101f4:	bfa8      	it	ge
 80101f6:	4691      	movge	r9, r2
 80101f8:	f1b9 0f00 	cmp.w	r9, #0
 80101fc:	dc35      	bgt.n	801026a <_printf_float+0x3ae>
 80101fe:	f04f 0800 	mov.w	r8, #0
 8010202:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010206:	f104 0a1a 	add.w	sl, r4, #26
 801020a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801020e:	1a9b      	subs	r3, r3, r2
 8010210:	eba3 0309 	sub.w	r3, r3, r9
 8010214:	4543      	cmp	r3, r8
 8010216:	f77f af79 	ble.w	801010c <_printf_float+0x250>
 801021a:	2301      	movs	r3, #1
 801021c:	4652      	mov	r2, sl
 801021e:	4631      	mov	r1, r6
 8010220:	4628      	mov	r0, r5
 8010222:	47b8      	blx	r7
 8010224:	3001      	adds	r0, #1
 8010226:	f43f aeaa 	beq.w	800ff7e <_printf_float+0xc2>
 801022a:	f108 0801 	add.w	r8, r8, #1
 801022e:	e7ec      	b.n	801020a <_printf_float+0x34e>
 8010230:	4613      	mov	r3, r2
 8010232:	4631      	mov	r1, r6
 8010234:	4642      	mov	r2, r8
 8010236:	4628      	mov	r0, r5
 8010238:	47b8      	blx	r7
 801023a:	3001      	adds	r0, #1
 801023c:	d1c0      	bne.n	80101c0 <_printf_float+0x304>
 801023e:	e69e      	b.n	800ff7e <_printf_float+0xc2>
 8010240:	2301      	movs	r3, #1
 8010242:	4631      	mov	r1, r6
 8010244:	4628      	mov	r0, r5
 8010246:	9205      	str	r2, [sp, #20]
 8010248:	47b8      	blx	r7
 801024a:	3001      	adds	r0, #1
 801024c:	f43f ae97 	beq.w	800ff7e <_printf_float+0xc2>
 8010250:	9a05      	ldr	r2, [sp, #20]
 8010252:	f10b 0b01 	add.w	fp, fp, #1
 8010256:	e7b9      	b.n	80101cc <_printf_float+0x310>
 8010258:	ee18 3a10 	vmov	r3, s16
 801025c:	4652      	mov	r2, sl
 801025e:	4631      	mov	r1, r6
 8010260:	4628      	mov	r0, r5
 8010262:	47b8      	blx	r7
 8010264:	3001      	adds	r0, #1
 8010266:	d1be      	bne.n	80101e6 <_printf_float+0x32a>
 8010268:	e689      	b.n	800ff7e <_printf_float+0xc2>
 801026a:	9a05      	ldr	r2, [sp, #20]
 801026c:	464b      	mov	r3, r9
 801026e:	4442      	add	r2, r8
 8010270:	4631      	mov	r1, r6
 8010272:	4628      	mov	r0, r5
 8010274:	47b8      	blx	r7
 8010276:	3001      	adds	r0, #1
 8010278:	d1c1      	bne.n	80101fe <_printf_float+0x342>
 801027a:	e680      	b.n	800ff7e <_printf_float+0xc2>
 801027c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801027e:	2a01      	cmp	r2, #1
 8010280:	dc01      	bgt.n	8010286 <_printf_float+0x3ca>
 8010282:	07db      	lsls	r3, r3, #31
 8010284:	d538      	bpl.n	80102f8 <_printf_float+0x43c>
 8010286:	2301      	movs	r3, #1
 8010288:	4642      	mov	r2, r8
 801028a:	4631      	mov	r1, r6
 801028c:	4628      	mov	r0, r5
 801028e:	47b8      	blx	r7
 8010290:	3001      	adds	r0, #1
 8010292:	f43f ae74 	beq.w	800ff7e <_printf_float+0xc2>
 8010296:	ee18 3a10 	vmov	r3, s16
 801029a:	4652      	mov	r2, sl
 801029c:	4631      	mov	r1, r6
 801029e:	4628      	mov	r0, r5
 80102a0:	47b8      	blx	r7
 80102a2:	3001      	adds	r0, #1
 80102a4:	f43f ae6b 	beq.w	800ff7e <_printf_float+0xc2>
 80102a8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80102ac:	2200      	movs	r2, #0
 80102ae:	2300      	movs	r3, #0
 80102b0:	f7f0 fc22 	bl	8000af8 <__aeabi_dcmpeq>
 80102b4:	b9d8      	cbnz	r0, 80102ee <_printf_float+0x432>
 80102b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80102b8:	f108 0201 	add.w	r2, r8, #1
 80102bc:	3b01      	subs	r3, #1
 80102be:	4631      	mov	r1, r6
 80102c0:	4628      	mov	r0, r5
 80102c2:	47b8      	blx	r7
 80102c4:	3001      	adds	r0, #1
 80102c6:	d10e      	bne.n	80102e6 <_printf_float+0x42a>
 80102c8:	e659      	b.n	800ff7e <_printf_float+0xc2>
 80102ca:	2301      	movs	r3, #1
 80102cc:	4652      	mov	r2, sl
 80102ce:	4631      	mov	r1, r6
 80102d0:	4628      	mov	r0, r5
 80102d2:	47b8      	blx	r7
 80102d4:	3001      	adds	r0, #1
 80102d6:	f43f ae52 	beq.w	800ff7e <_printf_float+0xc2>
 80102da:	f108 0801 	add.w	r8, r8, #1
 80102de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80102e0:	3b01      	subs	r3, #1
 80102e2:	4543      	cmp	r3, r8
 80102e4:	dcf1      	bgt.n	80102ca <_printf_float+0x40e>
 80102e6:	464b      	mov	r3, r9
 80102e8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80102ec:	e6dc      	b.n	80100a8 <_printf_float+0x1ec>
 80102ee:	f04f 0800 	mov.w	r8, #0
 80102f2:	f104 0a1a 	add.w	sl, r4, #26
 80102f6:	e7f2      	b.n	80102de <_printf_float+0x422>
 80102f8:	2301      	movs	r3, #1
 80102fa:	4642      	mov	r2, r8
 80102fc:	e7df      	b.n	80102be <_printf_float+0x402>
 80102fe:	2301      	movs	r3, #1
 8010300:	464a      	mov	r2, r9
 8010302:	4631      	mov	r1, r6
 8010304:	4628      	mov	r0, r5
 8010306:	47b8      	blx	r7
 8010308:	3001      	adds	r0, #1
 801030a:	f43f ae38 	beq.w	800ff7e <_printf_float+0xc2>
 801030e:	f108 0801 	add.w	r8, r8, #1
 8010312:	68e3      	ldr	r3, [r4, #12]
 8010314:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010316:	1a5b      	subs	r3, r3, r1
 8010318:	4543      	cmp	r3, r8
 801031a:	dcf0      	bgt.n	80102fe <_printf_float+0x442>
 801031c:	e6fa      	b.n	8010114 <_printf_float+0x258>
 801031e:	f04f 0800 	mov.w	r8, #0
 8010322:	f104 0919 	add.w	r9, r4, #25
 8010326:	e7f4      	b.n	8010312 <_printf_float+0x456>

08010328 <_printf_common>:
 8010328:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801032c:	4616      	mov	r6, r2
 801032e:	4699      	mov	r9, r3
 8010330:	688a      	ldr	r2, [r1, #8]
 8010332:	690b      	ldr	r3, [r1, #16]
 8010334:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010338:	4293      	cmp	r3, r2
 801033a:	bfb8      	it	lt
 801033c:	4613      	movlt	r3, r2
 801033e:	6033      	str	r3, [r6, #0]
 8010340:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010344:	4607      	mov	r7, r0
 8010346:	460c      	mov	r4, r1
 8010348:	b10a      	cbz	r2, 801034e <_printf_common+0x26>
 801034a:	3301      	adds	r3, #1
 801034c:	6033      	str	r3, [r6, #0]
 801034e:	6823      	ldr	r3, [r4, #0]
 8010350:	0699      	lsls	r1, r3, #26
 8010352:	bf42      	ittt	mi
 8010354:	6833      	ldrmi	r3, [r6, #0]
 8010356:	3302      	addmi	r3, #2
 8010358:	6033      	strmi	r3, [r6, #0]
 801035a:	6825      	ldr	r5, [r4, #0]
 801035c:	f015 0506 	ands.w	r5, r5, #6
 8010360:	d106      	bne.n	8010370 <_printf_common+0x48>
 8010362:	f104 0a19 	add.w	sl, r4, #25
 8010366:	68e3      	ldr	r3, [r4, #12]
 8010368:	6832      	ldr	r2, [r6, #0]
 801036a:	1a9b      	subs	r3, r3, r2
 801036c:	42ab      	cmp	r3, r5
 801036e:	dc26      	bgt.n	80103be <_printf_common+0x96>
 8010370:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010374:	1e13      	subs	r3, r2, #0
 8010376:	6822      	ldr	r2, [r4, #0]
 8010378:	bf18      	it	ne
 801037a:	2301      	movne	r3, #1
 801037c:	0692      	lsls	r2, r2, #26
 801037e:	d42b      	bmi.n	80103d8 <_printf_common+0xb0>
 8010380:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010384:	4649      	mov	r1, r9
 8010386:	4638      	mov	r0, r7
 8010388:	47c0      	blx	r8
 801038a:	3001      	adds	r0, #1
 801038c:	d01e      	beq.n	80103cc <_printf_common+0xa4>
 801038e:	6823      	ldr	r3, [r4, #0]
 8010390:	68e5      	ldr	r5, [r4, #12]
 8010392:	6832      	ldr	r2, [r6, #0]
 8010394:	f003 0306 	and.w	r3, r3, #6
 8010398:	2b04      	cmp	r3, #4
 801039a:	bf08      	it	eq
 801039c:	1aad      	subeq	r5, r5, r2
 801039e:	68a3      	ldr	r3, [r4, #8]
 80103a0:	6922      	ldr	r2, [r4, #16]
 80103a2:	bf0c      	ite	eq
 80103a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80103a8:	2500      	movne	r5, #0
 80103aa:	4293      	cmp	r3, r2
 80103ac:	bfc4      	itt	gt
 80103ae:	1a9b      	subgt	r3, r3, r2
 80103b0:	18ed      	addgt	r5, r5, r3
 80103b2:	2600      	movs	r6, #0
 80103b4:	341a      	adds	r4, #26
 80103b6:	42b5      	cmp	r5, r6
 80103b8:	d11a      	bne.n	80103f0 <_printf_common+0xc8>
 80103ba:	2000      	movs	r0, #0
 80103bc:	e008      	b.n	80103d0 <_printf_common+0xa8>
 80103be:	2301      	movs	r3, #1
 80103c0:	4652      	mov	r2, sl
 80103c2:	4649      	mov	r1, r9
 80103c4:	4638      	mov	r0, r7
 80103c6:	47c0      	blx	r8
 80103c8:	3001      	adds	r0, #1
 80103ca:	d103      	bne.n	80103d4 <_printf_common+0xac>
 80103cc:	f04f 30ff 	mov.w	r0, #4294967295
 80103d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80103d4:	3501      	adds	r5, #1
 80103d6:	e7c6      	b.n	8010366 <_printf_common+0x3e>
 80103d8:	18e1      	adds	r1, r4, r3
 80103da:	1c5a      	adds	r2, r3, #1
 80103dc:	2030      	movs	r0, #48	; 0x30
 80103de:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80103e2:	4422      	add	r2, r4
 80103e4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80103e8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80103ec:	3302      	adds	r3, #2
 80103ee:	e7c7      	b.n	8010380 <_printf_common+0x58>
 80103f0:	2301      	movs	r3, #1
 80103f2:	4622      	mov	r2, r4
 80103f4:	4649      	mov	r1, r9
 80103f6:	4638      	mov	r0, r7
 80103f8:	47c0      	blx	r8
 80103fa:	3001      	adds	r0, #1
 80103fc:	d0e6      	beq.n	80103cc <_printf_common+0xa4>
 80103fe:	3601      	adds	r6, #1
 8010400:	e7d9      	b.n	80103b6 <_printf_common+0x8e>
	...

08010404 <_printf_i>:
 8010404:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010408:	7e0f      	ldrb	r7, [r1, #24]
 801040a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801040c:	2f78      	cmp	r7, #120	; 0x78
 801040e:	4691      	mov	r9, r2
 8010410:	4680      	mov	r8, r0
 8010412:	460c      	mov	r4, r1
 8010414:	469a      	mov	sl, r3
 8010416:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801041a:	d807      	bhi.n	801042c <_printf_i+0x28>
 801041c:	2f62      	cmp	r7, #98	; 0x62
 801041e:	d80a      	bhi.n	8010436 <_printf_i+0x32>
 8010420:	2f00      	cmp	r7, #0
 8010422:	f000 80d8 	beq.w	80105d6 <_printf_i+0x1d2>
 8010426:	2f58      	cmp	r7, #88	; 0x58
 8010428:	f000 80a3 	beq.w	8010572 <_printf_i+0x16e>
 801042c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010430:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010434:	e03a      	b.n	80104ac <_printf_i+0xa8>
 8010436:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801043a:	2b15      	cmp	r3, #21
 801043c:	d8f6      	bhi.n	801042c <_printf_i+0x28>
 801043e:	a101      	add	r1, pc, #4	; (adr r1, 8010444 <_printf_i+0x40>)
 8010440:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010444:	0801049d 	.word	0x0801049d
 8010448:	080104b1 	.word	0x080104b1
 801044c:	0801042d 	.word	0x0801042d
 8010450:	0801042d 	.word	0x0801042d
 8010454:	0801042d 	.word	0x0801042d
 8010458:	0801042d 	.word	0x0801042d
 801045c:	080104b1 	.word	0x080104b1
 8010460:	0801042d 	.word	0x0801042d
 8010464:	0801042d 	.word	0x0801042d
 8010468:	0801042d 	.word	0x0801042d
 801046c:	0801042d 	.word	0x0801042d
 8010470:	080105bd 	.word	0x080105bd
 8010474:	080104e1 	.word	0x080104e1
 8010478:	0801059f 	.word	0x0801059f
 801047c:	0801042d 	.word	0x0801042d
 8010480:	0801042d 	.word	0x0801042d
 8010484:	080105df 	.word	0x080105df
 8010488:	0801042d 	.word	0x0801042d
 801048c:	080104e1 	.word	0x080104e1
 8010490:	0801042d 	.word	0x0801042d
 8010494:	0801042d 	.word	0x0801042d
 8010498:	080105a7 	.word	0x080105a7
 801049c:	682b      	ldr	r3, [r5, #0]
 801049e:	1d1a      	adds	r2, r3, #4
 80104a0:	681b      	ldr	r3, [r3, #0]
 80104a2:	602a      	str	r2, [r5, #0]
 80104a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80104a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80104ac:	2301      	movs	r3, #1
 80104ae:	e0a3      	b.n	80105f8 <_printf_i+0x1f4>
 80104b0:	6820      	ldr	r0, [r4, #0]
 80104b2:	6829      	ldr	r1, [r5, #0]
 80104b4:	0606      	lsls	r6, r0, #24
 80104b6:	f101 0304 	add.w	r3, r1, #4
 80104ba:	d50a      	bpl.n	80104d2 <_printf_i+0xce>
 80104bc:	680e      	ldr	r6, [r1, #0]
 80104be:	602b      	str	r3, [r5, #0]
 80104c0:	2e00      	cmp	r6, #0
 80104c2:	da03      	bge.n	80104cc <_printf_i+0xc8>
 80104c4:	232d      	movs	r3, #45	; 0x2d
 80104c6:	4276      	negs	r6, r6
 80104c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80104cc:	485e      	ldr	r0, [pc, #376]	; (8010648 <_printf_i+0x244>)
 80104ce:	230a      	movs	r3, #10
 80104d0:	e019      	b.n	8010506 <_printf_i+0x102>
 80104d2:	680e      	ldr	r6, [r1, #0]
 80104d4:	602b      	str	r3, [r5, #0]
 80104d6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80104da:	bf18      	it	ne
 80104dc:	b236      	sxthne	r6, r6
 80104de:	e7ef      	b.n	80104c0 <_printf_i+0xbc>
 80104e0:	682b      	ldr	r3, [r5, #0]
 80104e2:	6820      	ldr	r0, [r4, #0]
 80104e4:	1d19      	adds	r1, r3, #4
 80104e6:	6029      	str	r1, [r5, #0]
 80104e8:	0601      	lsls	r1, r0, #24
 80104ea:	d501      	bpl.n	80104f0 <_printf_i+0xec>
 80104ec:	681e      	ldr	r6, [r3, #0]
 80104ee:	e002      	b.n	80104f6 <_printf_i+0xf2>
 80104f0:	0646      	lsls	r6, r0, #25
 80104f2:	d5fb      	bpl.n	80104ec <_printf_i+0xe8>
 80104f4:	881e      	ldrh	r6, [r3, #0]
 80104f6:	4854      	ldr	r0, [pc, #336]	; (8010648 <_printf_i+0x244>)
 80104f8:	2f6f      	cmp	r7, #111	; 0x6f
 80104fa:	bf0c      	ite	eq
 80104fc:	2308      	moveq	r3, #8
 80104fe:	230a      	movne	r3, #10
 8010500:	2100      	movs	r1, #0
 8010502:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010506:	6865      	ldr	r5, [r4, #4]
 8010508:	60a5      	str	r5, [r4, #8]
 801050a:	2d00      	cmp	r5, #0
 801050c:	bfa2      	ittt	ge
 801050e:	6821      	ldrge	r1, [r4, #0]
 8010510:	f021 0104 	bicge.w	r1, r1, #4
 8010514:	6021      	strge	r1, [r4, #0]
 8010516:	b90e      	cbnz	r6, 801051c <_printf_i+0x118>
 8010518:	2d00      	cmp	r5, #0
 801051a:	d04d      	beq.n	80105b8 <_printf_i+0x1b4>
 801051c:	4615      	mov	r5, r2
 801051e:	fbb6 f1f3 	udiv	r1, r6, r3
 8010522:	fb03 6711 	mls	r7, r3, r1, r6
 8010526:	5dc7      	ldrb	r7, [r0, r7]
 8010528:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801052c:	4637      	mov	r7, r6
 801052e:	42bb      	cmp	r3, r7
 8010530:	460e      	mov	r6, r1
 8010532:	d9f4      	bls.n	801051e <_printf_i+0x11a>
 8010534:	2b08      	cmp	r3, #8
 8010536:	d10b      	bne.n	8010550 <_printf_i+0x14c>
 8010538:	6823      	ldr	r3, [r4, #0]
 801053a:	07de      	lsls	r6, r3, #31
 801053c:	d508      	bpl.n	8010550 <_printf_i+0x14c>
 801053e:	6923      	ldr	r3, [r4, #16]
 8010540:	6861      	ldr	r1, [r4, #4]
 8010542:	4299      	cmp	r1, r3
 8010544:	bfde      	ittt	le
 8010546:	2330      	movle	r3, #48	; 0x30
 8010548:	f805 3c01 	strble.w	r3, [r5, #-1]
 801054c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8010550:	1b52      	subs	r2, r2, r5
 8010552:	6122      	str	r2, [r4, #16]
 8010554:	f8cd a000 	str.w	sl, [sp]
 8010558:	464b      	mov	r3, r9
 801055a:	aa03      	add	r2, sp, #12
 801055c:	4621      	mov	r1, r4
 801055e:	4640      	mov	r0, r8
 8010560:	f7ff fee2 	bl	8010328 <_printf_common>
 8010564:	3001      	adds	r0, #1
 8010566:	d14c      	bne.n	8010602 <_printf_i+0x1fe>
 8010568:	f04f 30ff 	mov.w	r0, #4294967295
 801056c:	b004      	add	sp, #16
 801056e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010572:	4835      	ldr	r0, [pc, #212]	; (8010648 <_printf_i+0x244>)
 8010574:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8010578:	6829      	ldr	r1, [r5, #0]
 801057a:	6823      	ldr	r3, [r4, #0]
 801057c:	f851 6b04 	ldr.w	r6, [r1], #4
 8010580:	6029      	str	r1, [r5, #0]
 8010582:	061d      	lsls	r5, r3, #24
 8010584:	d514      	bpl.n	80105b0 <_printf_i+0x1ac>
 8010586:	07df      	lsls	r7, r3, #31
 8010588:	bf44      	itt	mi
 801058a:	f043 0320 	orrmi.w	r3, r3, #32
 801058e:	6023      	strmi	r3, [r4, #0]
 8010590:	b91e      	cbnz	r6, 801059a <_printf_i+0x196>
 8010592:	6823      	ldr	r3, [r4, #0]
 8010594:	f023 0320 	bic.w	r3, r3, #32
 8010598:	6023      	str	r3, [r4, #0]
 801059a:	2310      	movs	r3, #16
 801059c:	e7b0      	b.n	8010500 <_printf_i+0xfc>
 801059e:	6823      	ldr	r3, [r4, #0]
 80105a0:	f043 0320 	orr.w	r3, r3, #32
 80105a4:	6023      	str	r3, [r4, #0]
 80105a6:	2378      	movs	r3, #120	; 0x78
 80105a8:	4828      	ldr	r0, [pc, #160]	; (801064c <_printf_i+0x248>)
 80105aa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80105ae:	e7e3      	b.n	8010578 <_printf_i+0x174>
 80105b0:	0659      	lsls	r1, r3, #25
 80105b2:	bf48      	it	mi
 80105b4:	b2b6      	uxthmi	r6, r6
 80105b6:	e7e6      	b.n	8010586 <_printf_i+0x182>
 80105b8:	4615      	mov	r5, r2
 80105ba:	e7bb      	b.n	8010534 <_printf_i+0x130>
 80105bc:	682b      	ldr	r3, [r5, #0]
 80105be:	6826      	ldr	r6, [r4, #0]
 80105c0:	6961      	ldr	r1, [r4, #20]
 80105c2:	1d18      	adds	r0, r3, #4
 80105c4:	6028      	str	r0, [r5, #0]
 80105c6:	0635      	lsls	r5, r6, #24
 80105c8:	681b      	ldr	r3, [r3, #0]
 80105ca:	d501      	bpl.n	80105d0 <_printf_i+0x1cc>
 80105cc:	6019      	str	r1, [r3, #0]
 80105ce:	e002      	b.n	80105d6 <_printf_i+0x1d2>
 80105d0:	0670      	lsls	r0, r6, #25
 80105d2:	d5fb      	bpl.n	80105cc <_printf_i+0x1c8>
 80105d4:	8019      	strh	r1, [r3, #0]
 80105d6:	2300      	movs	r3, #0
 80105d8:	6123      	str	r3, [r4, #16]
 80105da:	4615      	mov	r5, r2
 80105dc:	e7ba      	b.n	8010554 <_printf_i+0x150>
 80105de:	682b      	ldr	r3, [r5, #0]
 80105e0:	1d1a      	adds	r2, r3, #4
 80105e2:	602a      	str	r2, [r5, #0]
 80105e4:	681d      	ldr	r5, [r3, #0]
 80105e6:	6862      	ldr	r2, [r4, #4]
 80105e8:	2100      	movs	r1, #0
 80105ea:	4628      	mov	r0, r5
 80105ec:	f7ef fe10 	bl	8000210 <memchr>
 80105f0:	b108      	cbz	r0, 80105f6 <_printf_i+0x1f2>
 80105f2:	1b40      	subs	r0, r0, r5
 80105f4:	6060      	str	r0, [r4, #4]
 80105f6:	6863      	ldr	r3, [r4, #4]
 80105f8:	6123      	str	r3, [r4, #16]
 80105fa:	2300      	movs	r3, #0
 80105fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010600:	e7a8      	b.n	8010554 <_printf_i+0x150>
 8010602:	6923      	ldr	r3, [r4, #16]
 8010604:	462a      	mov	r2, r5
 8010606:	4649      	mov	r1, r9
 8010608:	4640      	mov	r0, r8
 801060a:	47d0      	blx	sl
 801060c:	3001      	adds	r0, #1
 801060e:	d0ab      	beq.n	8010568 <_printf_i+0x164>
 8010610:	6823      	ldr	r3, [r4, #0]
 8010612:	079b      	lsls	r3, r3, #30
 8010614:	d413      	bmi.n	801063e <_printf_i+0x23a>
 8010616:	68e0      	ldr	r0, [r4, #12]
 8010618:	9b03      	ldr	r3, [sp, #12]
 801061a:	4298      	cmp	r0, r3
 801061c:	bfb8      	it	lt
 801061e:	4618      	movlt	r0, r3
 8010620:	e7a4      	b.n	801056c <_printf_i+0x168>
 8010622:	2301      	movs	r3, #1
 8010624:	4632      	mov	r2, r6
 8010626:	4649      	mov	r1, r9
 8010628:	4640      	mov	r0, r8
 801062a:	47d0      	blx	sl
 801062c:	3001      	adds	r0, #1
 801062e:	d09b      	beq.n	8010568 <_printf_i+0x164>
 8010630:	3501      	adds	r5, #1
 8010632:	68e3      	ldr	r3, [r4, #12]
 8010634:	9903      	ldr	r1, [sp, #12]
 8010636:	1a5b      	subs	r3, r3, r1
 8010638:	42ab      	cmp	r3, r5
 801063a:	dcf2      	bgt.n	8010622 <_printf_i+0x21e>
 801063c:	e7eb      	b.n	8010616 <_printf_i+0x212>
 801063e:	2500      	movs	r5, #0
 8010640:	f104 0619 	add.w	r6, r4, #25
 8010644:	e7f5      	b.n	8010632 <_printf_i+0x22e>
 8010646:	bf00      	nop
 8010648:	0801448e 	.word	0x0801448e
 801064c:	0801449f 	.word	0x0801449f

08010650 <_sbrk_r>:
 8010650:	b538      	push	{r3, r4, r5, lr}
 8010652:	4d06      	ldr	r5, [pc, #24]	; (801066c <_sbrk_r+0x1c>)
 8010654:	2300      	movs	r3, #0
 8010656:	4604      	mov	r4, r0
 8010658:	4608      	mov	r0, r1
 801065a:	602b      	str	r3, [r5, #0]
 801065c:	f7f5 fab4 	bl	8005bc8 <_sbrk>
 8010660:	1c43      	adds	r3, r0, #1
 8010662:	d102      	bne.n	801066a <_sbrk_r+0x1a>
 8010664:	682b      	ldr	r3, [r5, #0]
 8010666:	b103      	cbz	r3, 801066a <_sbrk_r+0x1a>
 8010668:	6023      	str	r3, [r4, #0]
 801066a:	bd38      	pop	{r3, r4, r5, pc}
 801066c:	2000635c 	.word	0x2000635c

08010670 <siprintf>:
 8010670:	b40e      	push	{r1, r2, r3}
 8010672:	b500      	push	{lr}
 8010674:	b09c      	sub	sp, #112	; 0x70
 8010676:	ab1d      	add	r3, sp, #116	; 0x74
 8010678:	9002      	str	r0, [sp, #8]
 801067a:	9006      	str	r0, [sp, #24]
 801067c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010680:	4809      	ldr	r0, [pc, #36]	; (80106a8 <siprintf+0x38>)
 8010682:	9107      	str	r1, [sp, #28]
 8010684:	9104      	str	r1, [sp, #16]
 8010686:	4909      	ldr	r1, [pc, #36]	; (80106ac <siprintf+0x3c>)
 8010688:	f853 2b04 	ldr.w	r2, [r3], #4
 801068c:	9105      	str	r1, [sp, #20]
 801068e:	6800      	ldr	r0, [r0, #0]
 8010690:	9301      	str	r3, [sp, #4]
 8010692:	a902      	add	r1, sp, #8
 8010694:	f001 fa8c 	bl	8011bb0 <_svfiprintf_r>
 8010698:	9b02      	ldr	r3, [sp, #8]
 801069a:	2200      	movs	r2, #0
 801069c:	701a      	strb	r2, [r3, #0]
 801069e:	b01c      	add	sp, #112	; 0x70
 80106a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80106a4:	b003      	add	sp, #12
 80106a6:	4770      	bx	lr
 80106a8:	20000020 	.word	0x20000020
 80106ac:	ffff0208 	.word	0xffff0208

080106b0 <quorem>:
 80106b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80106b4:	6903      	ldr	r3, [r0, #16]
 80106b6:	690c      	ldr	r4, [r1, #16]
 80106b8:	42a3      	cmp	r3, r4
 80106ba:	4607      	mov	r7, r0
 80106bc:	f2c0 8081 	blt.w	80107c2 <quorem+0x112>
 80106c0:	3c01      	subs	r4, #1
 80106c2:	f101 0814 	add.w	r8, r1, #20
 80106c6:	f100 0514 	add.w	r5, r0, #20
 80106ca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80106ce:	9301      	str	r3, [sp, #4]
 80106d0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80106d4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80106d8:	3301      	adds	r3, #1
 80106da:	429a      	cmp	r2, r3
 80106dc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80106e0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80106e4:	fbb2 f6f3 	udiv	r6, r2, r3
 80106e8:	d331      	bcc.n	801074e <quorem+0x9e>
 80106ea:	f04f 0e00 	mov.w	lr, #0
 80106ee:	4640      	mov	r0, r8
 80106f0:	46ac      	mov	ip, r5
 80106f2:	46f2      	mov	sl, lr
 80106f4:	f850 2b04 	ldr.w	r2, [r0], #4
 80106f8:	b293      	uxth	r3, r2
 80106fa:	fb06 e303 	mla	r3, r6, r3, lr
 80106fe:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8010702:	b29b      	uxth	r3, r3
 8010704:	ebaa 0303 	sub.w	r3, sl, r3
 8010708:	f8dc a000 	ldr.w	sl, [ip]
 801070c:	0c12      	lsrs	r2, r2, #16
 801070e:	fa13 f38a 	uxtah	r3, r3, sl
 8010712:	fb06 e202 	mla	r2, r6, r2, lr
 8010716:	9300      	str	r3, [sp, #0]
 8010718:	9b00      	ldr	r3, [sp, #0]
 801071a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801071e:	b292      	uxth	r2, r2
 8010720:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8010724:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010728:	f8bd 3000 	ldrh.w	r3, [sp]
 801072c:	4581      	cmp	r9, r0
 801072e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010732:	f84c 3b04 	str.w	r3, [ip], #4
 8010736:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801073a:	d2db      	bcs.n	80106f4 <quorem+0x44>
 801073c:	f855 300b 	ldr.w	r3, [r5, fp]
 8010740:	b92b      	cbnz	r3, 801074e <quorem+0x9e>
 8010742:	9b01      	ldr	r3, [sp, #4]
 8010744:	3b04      	subs	r3, #4
 8010746:	429d      	cmp	r5, r3
 8010748:	461a      	mov	r2, r3
 801074a:	d32e      	bcc.n	80107aa <quorem+0xfa>
 801074c:	613c      	str	r4, [r7, #16]
 801074e:	4638      	mov	r0, r7
 8010750:	f001 f8ba 	bl	80118c8 <__mcmp>
 8010754:	2800      	cmp	r0, #0
 8010756:	db24      	blt.n	80107a2 <quorem+0xf2>
 8010758:	3601      	adds	r6, #1
 801075a:	4628      	mov	r0, r5
 801075c:	f04f 0c00 	mov.w	ip, #0
 8010760:	f858 2b04 	ldr.w	r2, [r8], #4
 8010764:	f8d0 e000 	ldr.w	lr, [r0]
 8010768:	b293      	uxth	r3, r2
 801076a:	ebac 0303 	sub.w	r3, ip, r3
 801076e:	0c12      	lsrs	r2, r2, #16
 8010770:	fa13 f38e 	uxtah	r3, r3, lr
 8010774:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8010778:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801077c:	b29b      	uxth	r3, r3
 801077e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010782:	45c1      	cmp	r9, r8
 8010784:	f840 3b04 	str.w	r3, [r0], #4
 8010788:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801078c:	d2e8      	bcs.n	8010760 <quorem+0xb0>
 801078e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010792:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010796:	b922      	cbnz	r2, 80107a2 <quorem+0xf2>
 8010798:	3b04      	subs	r3, #4
 801079a:	429d      	cmp	r5, r3
 801079c:	461a      	mov	r2, r3
 801079e:	d30a      	bcc.n	80107b6 <quorem+0x106>
 80107a0:	613c      	str	r4, [r7, #16]
 80107a2:	4630      	mov	r0, r6
 80107a4:	b003      	add	sp, #12
 80107a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80107aa:	6812      	ldr	r2, [r2, #0]
 80107ac:	3b04      	subs	r3, #4
 80107ae:	2a00      	cmp	r2, #0
 80107b0:	d1cc      	bne.n	801074c <quorem+0x9c>
 80107b2:	3c01      	subs	r4, #1
 80107b4:	e7c7      	b.n	8010746 <quorem+0x96>
 80107b6:	6812      	ldr	r2, [r2, #0]
 80107b8:	3b04      	subs	r3, #4
 80107ba:	2a00      	cmp	r2, #0
 80107bc:	d1f0      	bne.n	80107a0 <quorem+0xf0>
 80107be:	3c01      	subs	r4, #1
 80107c0:	e7eb      	b.n	801079a <quorem+0xea>
 80107c2:	2000      	movs	r0, #0
 80107c4:	e7ee      	b.n	80107a4 <quorem+0xf4>
	...

080107c8 <_dtoa_r>:
 80107c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80107cc:	ed2d 8b04 	vpush	{d8-d9}
 80107d0:	ec57 6b10 	vmov	r6, r7, d0
 80107d4:	b093      	sub	sp, #76	; 0x4c
 80107d6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80107d8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80107dc:	9106      	str	r1, [sp, #24]
 80107de:	ee10 aa10 	vmov	sl, s0
 80107e2:	4604      	mov	r4, r0
 80107e4:	9209      	str	r2, [sp, #36]	; 0x24
 80107e6:	930c      	str	r3, [sp, #48]	; 0x30
 80107e8:	46bb      	mov	fp, r7
 80107ea:	b975      	cbnz	r5, 801080a <_dtoa_r+0x42>
 80107ec:	2010      	movs	r0, #16
 80107ee:	f7ff f9c7 	bl	800fb80 <malloc>
 80107f2:	4602      	mov	r2, r0
 80107f4:	6260      	str	r0, [r4, #36]	; 0x24
 80107f6:	b920      	cbnz	r0, 8010802 <_dtoa_r+0x3a>
 80107f8:	4ba7      	ldr	r3, [pc, #668]	; (8010a98 <_dtoa_r+0x2d0>)
 80107fa:	21ea      	movs	r1, #234	; 0xea
 80107fc:	48a7      	ldr	r0, [pc, #668]	; (8010a9c <_dtoa_r+0x2d4>)
 80107fe:	f001 fad7 	bl	8011db0 <__assert_func>
 8010802:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8010806:	6005      	str	r5, [r0, #0]
 8010808:	60c5      	str	r5, [r0, #12]
 801080a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801080c:	6819      	ldr	r1, [r3, #0]
 801080e:	b151      	cbz	r1, 8010826 <_dtoa_r+0x5e>
 8010810:	685a      	ldr	r2, [r3, #4]
 8010812:	604a      	str	r2, [r1, #4]
 8010814:	2301      	movs	r3, #1
 8010816:	4093      	lsls	r3, r2
 8010818:	608b      	str	r3, [r1, #8]
 801081a:	4620      	mov	r0, r4
 801081c:	f000 fe12 	bl	8011444 <_Bfree>
 8010820:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010822:	2200      	movs	r2, #0
 8010824:	601a      	str	r2, [r3, #0]
 8010826:	1e3b      	subs	r3, r7, #0
 8010828:	bfaa      	itet	ge
 801082a:	2300      	movge	r3, #0
 801082c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8010830:	f8c8 3000 	strge.w	r3, [r8]
 8010834:	4b9a      	ldr	r3, [pc, #616]	; (8010aa0 <_dtoa_r+0x2d8>)
 8010836:	bfbc      	itt	lt
 8010838:	2201      	movlt	r2, #1
 801083a:	f8c8 2000 	strlt.w	r2, [r8]
 801083e:	ea33 030b 	bics.w	r3, r3, fp
 8010842:	d11b      	bne.n	801087c <_dtoa_r+0xb4>
 8010844:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010846:	f242 730f 	movw	r3, #9999	; 0x270f
 801084a:	6013      	str	r3, [r2, #0]
 801084c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010850:	4333      	orrs	r3, r6
 8010852:	f000 8592 	beq.w	801137a <_dtoa_r+0xbb2>
 8010856:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010858:	b963      	cbnz	r3, 8010874 <_dtoa_r+0xac>
 801085a:	4b92      	ldr	r3, [pc, #584]	; (8010aa4 <_dtoa_r+0x2dc>)
 801085c:	e022      	b.n	80108a4 <_dtoa_r+0xdc>
 801085e:	4b92      	ldr	r3, [pc, #584]	; (8010aa8 <_dtoa_r+0x2e0>)
 8010860:	9301      	str	r3, [sp, #4]
 8010862:	3308      	adds	r3, #8
 8010864:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8010866:	6013      	str	r3, [r2, #0]
 8010868:	9801      	ldr	r0, [sp, #4]
 801086a:	b013      	add	sp, #76	; 0x4c
 801086c:	ecbd 8b04 	vpop	{d8-d9}
 8010870:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010874:	4b8b      	ldr	r3, [pc, #556]	; (8010aa4 <_dtoa_r+0x2dc>)
 8010876:	9301      	str	r3, [sp, #4]
 8010878:	3303      	adds	r3, #3
 801087a:	e7f3      	b.n	8010864 <_dtoa_r+0x9c>
 801087c:	2200      	movs	r2, #0
 801087e:	2300      	movs	r3, #0
 8010880:	4650      	mov	r0, sl
 8010882:	4659      	mov	r1, fp
 8010884:	f7f0 f938 	bl	8000af8 <__aeabi_dcmpeq>
 8010888:	ec4b ab19 	vmov	d9, sl, fp
 801088c:	4680      	mov	r8, r0
 801088e:	b158      	cbz	r0, 80108a8 <_dtoa_r+0xe0>
 8010890:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010892:	2301      	movs	r3, #1
 8010894:	6013      	str	r3, [r2, #0]
 8010896:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010898:	2b00      	cmp	r3, #0
 801089a:	f000 856b 	beq.w	8011374 <_dtoa_r+0xbac>
 801089e:	4883      	ldr	r0, [pc, #524]	; (8010aac <_dtoa_r+0x2e4>)
 80108a0:	6018      	str	r0, [r3, #0]
 80108a2:	1e43      	subs	r3, r0, #1
 80108a4:	9301      	str	r3, [sp, #4]
 80108a6:	e7df      	b.n	8010868 <_dtoa_r+0xa0>
 80108a8:	ec4b ab10 	vmov	d0, sl, fp
 80108ac:	aa10      	add	r2, sp, #64	; 0x40
 80108ae:	a911      	add	r1, sp, #68	; 0x44
 80108b0:	4620      	mov	r0, r4
 80108b2:	f001 f8af 	bl	8011a14 <__d2b>
 80108b6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80108ba:	ee08 0a10 	vmov	s16, r0
 80108be:	2d00      	cmp	r5, #0
 80108c0:	f000 8084 	beq.w	80109cc <_dtoa_r+0x204>
 80108c4:	ee19 3a90 	vmov	r3, s19
 80108c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80108cc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80108d0:	4656      	mov	r6, sl
 80108d2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80108d6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80108da:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80108de:	4b74      	ldr	r3, [pc, #464]	; (8010ab0 <_dtoa_r+0x2e8>)
 80108e0:	2200      	movs	r2, #0
 80108e2:	4630      	mov	r0, r6
 80108e4:	4639      	mov	r1, r7
 80108e6:	f7ef fce7 	bl	80002b8 <__aeabi_dsub>
 80108ea:	a365      	add	r3, pc, #404	; (adr r3, 8010a80 <_dtoa_r+0x2b8>)
 80108ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108f0:	f7ef fe9a 	bl	8000628 <__aeabi_dmul>
 80108f4:	a364      	add	r3, pc, #400	; (adr r3, 8010a88 <_dtoa_r+0x2c0>)
 80108f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108fa:	f7ef fcdf 	bl	80002bc <__adddf3>
 80108fe:	4606      	mov	r6, r0
 8010900:	4628      	mov	r0, r5
 8010902:	460f      	mov	r7, r1
 8010904:	f7ef fe26 	bl	8000554 <__aeabi_i2d>
 8010908:	a361      	add	r3, pc, #388	; (adr r3, 8010a90 <_dtoa_r+0x2c8>)
 801090a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801090e:	f7ef fe8b 	bl	8000628 <__aeabi_dmul>
 8010912:	4602      	mov	r2, r0
 8010914:	460b      	mov	r3, r1
 8010916:	4630      	mov	r0, r6
 8010918:	4639      	mov	r1, r7
 801091a:	f7ef fccf 	bl	80002bc <__adddf3>
 801091e:	4606      	mov	r6, r0
 8010920:	460f      	mov	r7, r1
 8010922:	f7f0 f931 	bl	8000b88 <__aeabi_d2iz>
 8010926:	2200      	movs	r2, #0
 8010928:	9000      	str	r0, [sp, #0]
 801092a:	2300      	movs	r3, #0
 801092c:	4630      	mov	r0, r6
 801092e:	4639      	mov	r1, r7
 8010930:	f7f0 f8ec 	bl	8000b0c <__aeabi_dcmplt>
 8010934:	b150      	cbz	r0, 801094c <_dtoa_r+0x184>
 8010936:	9800      	ldr	r0, [sp, #0]
 8010938:	f7ef fe0c 	bl	8000554 <__aeabi_i2d>
 801093c:	4632      	mov	r2, r6
 801093e:	463b      	mov	r3, r7
 8010940:	f7f0 f8da 	bl	8000af8 <__aeabi_dcmpeq>
 8010944:	b910      	cbnz	r0, 801094c <_dtoa_r+0x184>
 8010946:	9b00      	ldr	r3, [sp, #0]
 8010948:	3b01      	subs	r3, #1
 801094a:	9300      	str	r3, [sp, #0]
 801094c:	9b00      	ldr	r3, [sp, #0]
 801094e:	2b16      	cmp	r3, #22
 8010950:	d85a      	bhi.n	8010a08 <_dtoa_r+0x240>
 8010952:	9a00      	ldr	r2, [sp, #0]
 8010954:	4b57      	ldr	r3, [pc, #348]	; (8010ab4 <_dtoa_r+0x2ec>)
 8010956:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801095a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801095e:	ec51 0b19 	vmov	r0, r1, d9
 8010962:	f7f0 f8d3 	bl	8000b0c <__aeabi_dcmplt>
 8010966:	2800      	cmp	r0, #0
 8010968:	d050      	beq.n	8010a0c <_dtoa_r+0x244>
 801096a:	9b00      	ldr	r3, [sp, #0]
 801096c:	3b01      	subs	r3, #1
 801096e:	9300      	str	r3, [sp, #0]
 8010970:	2300      	movs	r3, #0
 8010972:	930b      	str	r3, [sp, #44]	; 0x2c
 8010974:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010976:	1b5d      	subs	r5, r3, r5
 8010978:	1e6b      	subs	r3, r5, #1
 801097a:	9305      	str	r3, [sp, #20]
 801097c:	bf45      	ittet	mi
 801097e:	f1c5 0301 	rsbmi	r3, r5, #1
 8010982:	9304      	strmi	r3, [sp, #16]
 8010984:	2300      	movpl	r3, #0
 8010986:	2300      	movmi	r3, #0
 8010988:	bf4c      	ite	mi
 801098a:	9305      	strmi	r3, [sp, #20]
 801098c:	9304      	strpl	r3, [sp, #16]
 801098e:	9b00      	ldr	r3, [sp, #0]
 8010990:	2b00      	cmp	r3, #0
 8010992:	db3d      	blt.n	8010a10 <_dtoa_r+0x248>
 8010994:	9b05      	ldr	r3, [sp, #20]
 8010996:	9a00      	ldr	r2, [sp, #0]
 8010998:	920a      	str	r2, [sp, #40]	; 0x28
 801099a:	4413      	add	r3, r2
 801099c:	9305      	str	r3, [sp, #20]
 801099e:	2300      	movs	r3, #0
 80109a0:	9307      	str	r3, [sp, #28]
 80109a2:	9b06      	ldr	r3, [sp, #24]
 80109a4:	2b09      	cmp	r3, #9
 80109a6:	f200 8089 	bhi.w	8010abc <_dtoa_r+0x2f4>
 80109aa:	2b05      	cmp	r3, #5
 80109ac:	bfc4      	itt	gt
 80109ae:	3b04      	subgt	r3, #4
 80109b0:	9306      	strgt	r3, [sp, #24]
 80109b2:	9b06      	ldr	r3, [sp, #24]
 80109b4:	f1a3 0302 	sub.w	r3, r3, #2
 80109b8:	bfcc      	ite	gt
 80109ba:	2500      	movgt	r5, #0
 80109bc:	2501      	movle	r5, #1
 80109be:	2b03      	cmp	r3, #3
 80109c0:	f200 8087 	bhi.w	8010ad2 <_dtoa_r+0x30a>
 80109c4:	e8df f003 	tbb	[pc, r3]
 80109c8:	59383a2d 	.word	0x59383a2d
 80109cc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80109d0:	441d      	add	r5, r3
 80109d2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80109d6:	2b20      	cmp	r3, #32
 80109d8:	bfc1      	itttt	gt
 80109da:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80109de:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80109e2:	fa0b f303 	lslgt.w	r3, fp, r3
 80109e6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80109ea:	bfda      	itte	le
 80109ec:	f1c3 0320 	rsble	r3, r3, #32
 80109f0:	fa06 f003 	lslle.w	r0, r6, r3
 80109f4:	4318      	orrgt	r0, r3
 80109f6:	f7ef fd9d 	bl	8000534 <__aeabi_ui2d>
 80109fa:	2301      	movs	r3, #1
 80109fc:	4606      	mov	r6, r0
 80109fe:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8010a02:	3d01      	subs	r5, #1
 8010a04:	930e      	str	r3, [sp, #56]	; 0x38
 8010a06:	e76a      	b.n	80108de <_dtoa_r+0x116>
 8010a08:	2301      	movs	r3, #1
 8010a0a:	e7b2      	b.n	8010972 <_dtoa_r+0x1aa>
 8010a0c:	900b      	str	r0, [sp, #44]	; 0x2c
 8010a0e:	e7b1      	b.n	8010974 <_dtoa_r+0x1ac>
 8010a10:	9b04      	ldr	r3, [sp, #16]
 8010a12:	9a00      	ldr	r2, [sp, #0]
 8010a14:	1a9b      	subs	r3, r3, r2
 8010a16:	9304      	str	r3, [sp, #16]
 8010a18:	4253      	negs	r3, r2
 8010a1a:	9307      	str	r3, [sp, #28]
 8010a1c:	2300      	movs	r3, #0
 8010a1e:	930a      	str	r3, [sp, #40]	; 0x28
 8010a20:	e7bf      	b.n	80109a2 <_dtoa_r+0x1da>
 8010a22:	2300      	movs	r3, #0
 8010a24:	9308      	str	r3, [sp, #32]
 8010a26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010a28:	2b00      	cmp	r3, #0
 8010a2a:	dc55      	bgt.n	8010ad8 <_dtoa_r+0x310>
 8010a2c:	2301      	movs	r3, #1
 8010a2e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8010a32:	461a      	mov	r2, r3
 8010a34:	9209      	str	r2, [sp, #36]	; 0x24
 8010a36:	e00c      	b.n	8010a52 <_dtoa_r+0x28a>
 8010a38:	2301      	movs	r3, #1
 8010a3a:	e7f3      	b.n	8010a24 <_dtoa_r+0x25c>
 8010a3c:	2300      	movs	r3, #0
 8010a3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010a40:	9308      	str	r3, [sp, #32]
 8010a42:	9b00      	ldr	r3, [sp, #0]
 8010a44:	4413      	add	r3, r2
 8010a46:	9302      	str	r3, [sp, #8]
 8010a48:	3301      	adds	r3, #1
 8010a4a:	2b01      	cmp	r3, #1
 8010a4c:	9303      	str	r3, [sp, #12]
 8010a4e:	bfb8      	it	lt
 8010a50:	2301      	movlt	r3, #1
 8010a52:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8010a54:	2200      	movs	r2, #0
 8010a56:	6042      	str	r2, [r0, #4]
 8010a58:	2204      	movs	r2, #4
 8010a5a:	f102 0614 	add.w	r6, r2, #20
 8010a5e:	429e      	cmp	r6, r3
 8010a60:	6841      	ldr	r1, [r0, #4]
 8010a62:	d93d      	bls.n	8010ae0 <_dtoa_r+0x318>
 8010a64:	4620      	mov	r0, r4
 8010a66:	f000 fcad 	bl	80113c4 <_Balloc>
 8010a6a:	9001      	str	r0, [sp, #4]
 8010a6c:	2800      	cmp	r0, #0
 8010a6e:	d13b      	bne.n	8010ae8 <_dtoa_r+0x320>
 8010a70:	4b11      	ldr	r3, [pc, #68]	; (8010ab8 <_dtoa_r+0x2f0>)
 8010a72:	4602      	mov	r2, r0
 8010a74:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8010a78:	e6c0      	b.n	80107fc <_dtoa_r+0x34>
 8010a7a:	2301      	movs	r3, #1
 8010a7c:	e7df      	b.n	8010a3e <_dtoa_r+0x276>
 8010a7e:	bf00      	nop
 8010a80:	636f4361 	.word	0x636f4361
 8010a84:	3fd287a7 	.word	0x3fd287a7
 8010a88:	8b60c8b3 	.word	0x8b60c8b3
 8010a8c:	3fc68a28 	.word	0x3fc68a28
 8010a90:	509f79fb 	.word	0x509f79fb
 8010a94:	3fd34413 	.word	0x3fd34413
 8010a98:	080144bd 	.word	0x080144bd
 8010a9c:	080144d4 	.word	0x080144d4
 8010aa0:	7ff00000 	.word	0x7ff00000
 8010aa4:	080144b9 	.word	0x080144b9
 8010aa8:	080144b0 	.word	0x080144b0
 8010aac:	0801448d 	.word	0x0801448d
 8010ab0:	3ff80000 	.word	0x3ff80000
 8010ab4:	080145c8 	.word	0x080145c8
 8010ab8:	0801452f 	.word	0x0801452f
 8010abc:	2501      	movs	r5, #1
 8010abe:	2300      	movs	r3, #0
 8010ac0:	9306      	str	r3, [sp, #24]
 8010ac2:	9508      	str	r5, [sp, #32]
 8010ac4:	f04f 33ff 	mov.w	r3, #4294967295
 8010ac8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8010acc:	2200      	movs	r2, #0
 8010ace:	2312      	movs	r3, #18
 8010ad0:	e7b0      	b.n	8010a34 <_dtoa_r+0x26c>
 8010ad2:	2301      	movs	r3, #1
 8010ad4:	9308      	str	r3, [sp, #32]
 8010ad6:	e7f5      	b.n	8010ac4 <_dtoa_r+0x2fc>
 8010ad8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010ada:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8010ade:	e7b8      	b.n	8010a52 <_dtoa_r+0x28a>
 8010ae0:	3101      	adds	r1, #1
 8010ae2:	6041      	str	r1, [r0, #4]
 8010ae4:	0052      	lsls	r2, r2, #1
 8010ae6:	e7b8      	b.n	8010a5a <_dtoa_r+0x292>
 8010ae8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010aea:	9a01      	ldr	r2, [sp, #4]
 8010aec:	601a      	str	r2, [r3, #0]
 8010aee:	9b03      	ldr	r3, [sp, #12]
 8010af0:	2b0e      	cmp	r3, #14
 8010af2:	f200 809d 	bhi.w	8010c30 <_dtoa_r+0x468>
 8010af6:	2d00      	cmp	r5, #0
 8010af8:	f000 809a 	beq.w	8010c30 <_dtoa_r+0x468>
 8010afc:	9b00      	ldr	r3, [sp, #0]
 8010afe:	2b00      	cmp	r3, #0
 8010b00:	dd32      	ble.n	8010b68 <_dtoa_r+0x3a0>
 8010b02:	4ab7      	ldr	r2, [pc, #732]	; (8010de0 <_dtoa_r+0x618>)
 8010b04:	f003 030f 	and.w	r3, r3, #15
 8010b08:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8010b0c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010b10:	9b00      	ldr	r3, [sp, #0]
 8010b12:	05d8      	lsls	r0, r3, #23
 8010b14:	ea4f 1723 	mov.w	r7, r3, asr #4
 8010b18:	d516      	bpl.n	8010b48 <_dtoa_r+0x380>
 8010b1a:	4bb2      	ldr	r3, [pc, #712]	; (8010de4 <_dtoa_r+0x61c>)
 8010b1c:	ec51 0b19 	vmov	r0, r1, d9
 8010b20:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010b24:	f7ef feaa 	bl	800087c <__aeabi_ddiv>
 8010b28:	f007 070f 	and.w	r7, r7, #15
 8010b2c:	4682      	mov	sl, r0
 8010b2e:	468b      	mov	fp, r1
 8010b30:	2503      	movs	r5, #3
 8010b32:	4eac      	ldr	r6, [pc, #688]	; (8010de4 <_dtoa_r+0x61c>)
 8010b34:	b957      	cbnz	r7, 8010b4c <_dtoa_r+0x384>
 8010b36:	4642      	mov	r2, r8
 8010b38:	464b      	mov	r3, r9
 8010b3a:	4650      	mov	r0, sl
 8010b3c:	4659      	mov	r1, fp
 8010b3e:	f7ef fe9d 	bl	800087c <__aeabi_ddiv>
 8010b42:	4682      	mov	sl, r0
 8010b44:	468b      	mov	fp, r1
 8010b46:	e028      	b.n	8010b9a <_dtoa_r+0x3d2>
 8010b48:	2502      	movs	r5, #2
 8010b4a:	e7f2      	b.n	8010b32 <_dtoa_r+0x36a>
 8010b4c:	07f9      	lsls	r1, r7, #31
 8010b4e:	d508      	bpl.n	8010b62 <_dtoa_r+0x39a>
 8010b50:	4640      	mov	r0, r8
 8010b52:	4649      	mov	r1, r9
 8010b54:	e9d6 2300 	ldrd	r2, r3, [r6]
 8010b58:	f7ef fd66 	bl	8000628 <__aeabi_dmul>
 8010b5c:	3501      	adds	r5, #1
 8010b5e:	4680      	mov	r8, r0
 8010b60:	4689      	mov	r9, r1
 8010b62:	107f      	asrs	r7, r7, #1
 8010b64:	3608      	adds	r6, #8
 8010b66:	e7e5      	b.n	8010b34 <_dtoa_r+0x36c>
 8010b68:	f000 809b 	beq.w	8010ca2 <_dtoa_r+0x4da>
 8010b6c:	9b00      	ldr	r3, [sp, #0]
 8010b6e:	4f9d      	ldr	r7, [pc, #628]	; (8010de4 <_dtoa_r+0x61c>)
 8010b70:	425e      	negs	r6, r3
 8010b72:	4b9b      	ldr	r3, [pc, #620]	; (8010de0 <_dtoa_r+0x618>)
 8010b74:	f006 020f 	and.w	r2, r6, #15
 8010b78:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b80:	ec51 0b19 	vmov	r0, r1, d9
 8010b84:	f7ef fd50 	bl	8000628 <__aeabi_dmul>
 8010b88:	1136      	asrs	r6, r6, #4
 8010b8a:	4682      	mov	sl, r0
 8010b8c:	468b      	mov	fp, r1
 8010b8e:	2300      	movs	r3, #0
 8010b90:	2502      	movs	r5, #2
 8010b92:	2e00      	cmp	r6, #0
 8010b94:	d17a      	bne.n	8010c8c <_dtoa_r+0x4c4>
 8010b96:	2b00      	cmp	r3, #0
 8010b98:	d1d3      	bne.n	8010b42 <_dtoa_r+0x37a>
 8010b9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010b9c:	2b00      	cmp	r3, #0
 8010b9e:	f000 8082 	beq.w	8010ca6 <_dtoa_r+0x4de>
 8010ba2:	4b91      	ldr	r3, [pc, #580]	; (8010de8 <_dtoa_r+0x620>)
 8010ba4:	2200      	movs	r2, #0
 8010ba6:	4650      	mov	r0, sl
 8010ba8:	4659      	mov	r1, fp
 8010baa:	f7ef ffaf 	bl	8000b0c <__aeabi_dcmplt>
 8010bae:	2800      	cmp	r0, #0
 8010bb0:	d079      	beq.n	8010ca6 <_dtoa_r+0x4de>
 8010bb2:	9b03      	ldr	r3, [sp, #12]
 8010bb4:	2b00      	cmp	r3, #0
 8010bb6:	d076      	beq.n	8010ca6 <_dtoa_r+0x4de>
 8010bb8:	9b02      	ldr	r3, [sp, #8]
 8010bba:	2b00      	cmp	r3, #0
 8010bbc:	dd36      	ble.n	8010c2c <_dtoa_r+0x464>
 8010bbe:	9b00      	ldr	r3, [sp, #0]
 8010bc0:	4650      	mov	r0, sl
 8010bc2:	4659      	mov	r1, fp
 8010bc4:	1e5f      	subs	r7, r3, #1
 8010bc6:	2200      	movs	r2, #0
 8010bc8:	4b88      	ldr	r3, [pc, #544]	; (8010dec <_dtoa_r+0x624>)
 8010bca:	f7ef fd2d 	bl	8000628 <__aeabi_dmul>
 8010bce:	9e02      	ldr	r6, [sp, #8]
 8010bd0:	4682      	mov	sl, r0
 8010bd2:	468b      	mov	fp, r1
 8010bd4:	3501      	adds	r5, #1
 8010bd6:	4628      	mov	r0, r5
 8010bd8:	f7ef fcbc 	bl	8000554 <__aeabi_i2d>
 8010bdc:	4652      	mov	r2, sl
 8010bde:	465b      	mov	r3, fp
 8010be0:	f7ef fd22 	bl	8000628 <__aeabi_dmul>
 8010be4:	4b82      	ldr	r3, [pc, #520]	; (8010df0 <_dtoa_r+0x628>)
 8010be6:	2200      	movs	r2, #0
 8010be8:	f7ef fb68 	bl	80002bc <__adddf3>
 8010bec:	46d0      	mov	r8, sl
 8010bee:	46d9      	mov	r9, fp
 8010bf0:	4682      	mov	sl, r0
 8010bf2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8010bf6:	2e00      	cmp	r6, #0
 8010bf8:	d158      	bne.n	8010cac <_dtoa_r+0x4e4>
 8010bfa:	4b7e      	ldr	r3, [pc, #504]	; (8010df4 <_dtoa_r+0x62c>)
 8010bfc:	2200      	movs	r2, #0
 8010bfe:	4640      	mov	r0, r8
 8010c00:	4649      	mov	r1, r9
 8010c02:	f7ef fb59 	bl	80002b8 <__aeabi_dsub>
 8010c06:	4652      	mov	r2, sl
 8010c08:	465b      	mov	r3, fp
 8010c0a:	4680      	mov	r8, r0
 8010c0c:	4689      	mov	r9, r1
 8010c0e:	f7ef ff9b 	bl	8000b48 <__aeabi_dcmpgt>
 8010c12:	2800      	cmp	r0, #0
 8010c14:	f040 8295 	bne.w	8011142 <_dtoa_r+0x97a>
 8010c18:	4652      	mov	r2, sl
 8010c1a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8010c1e:	4640      	mov	r0, r8
 8010c20:	4649      	mov	r1, r9
 8010c22:	f7ef ff73 	bl	8000b0c <__aeabi_dcmplt>
 8010c26:	2800      	cmp	r0, #0
 8010c28:	f040 8289 	bne.w	801113e <_dtoa_r+0x976>
 8010c2c:	ec5b ab19 	vmov	sl, fp, d9
 8010c30:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010c32:	2b00      	cmp	r3, #0
 8010c34:	f2c0 8148 	blt.w	8010ec8 <_dtoa_r+0x700>
 8010c38:	9a00      	ldr	r2, [sp, #0]
 8010c3a:	2a0e      	cmp	r2, #14
 8010c3c:	f300 8144 	bgt.w	8010ec8 <_dtoa_r+0x700>
 8010c40:	4b67      	ldr	r3, [pc, #412]	; (8010de0 <_dtoa_r+0x618>)
 8010c42:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010c46:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010c4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010c4c:	2b00      	cmp	r3, #0
 8010c4e:	f280 80d5 	bge.w	8010dfc <_dtoa_r+0x634>
 8010c52:	9b03      	ldr	r3, [sp, #12]
 8010c54:	2b00      	cmp	r3, #0
 8010c56:	f300 80d1 	bgt.w	8010dfc <_dtoa_r+0x634>
 8010c5a:	f040 826f 	bne.w	801113c <_dtoa_r+0x974>
 8010c5e:	4b65      	ldr	r3, [pc, #404]	; (8010df4 <_dtoa_r+0x62c>)
 8010c60:	2200      	movs	r2, #0
 8010c62:	4640      	mov	r0, r8
 8010c64:	4649      	mov	r1, r9
 8010c66:	f7ef fcdf 	bl	8000628 <__aeabi_dmul>
 8010c6a:	4652      	mov	r2, sl
 8010c6c:	465b      	mov	r3, fp
 8010c6e:	f7ef ff61 	bl	8000b34 <__aeabi_dcmpge>
 8010c72:	9e03      	ldr	r6, [sp, #12]
 8010c74:	4637      	mov	r7, r6
 8010c76:	2800      	cmp	r0, #0
 8010c78:	f040 8245 	bne.w	8011106 <_dtoa_r+0x93e>
 8010c7c:	9d01      	ldr	r5, [sp, #4]
 8010c7e:	2331      	movs	r3, #49	; 0x31
 8010c80:	f805 3b01 	strb.w	r3, [r5], #1
 8010c84:	9b00      	ldr	r3, [sp, #0]
 8010c86:	3301      	adds	r3, #1
 8010c88:	9300      	str	r3, [sp, #0]
 8010c8a:	e240      	b.n	801110e <_dtoa_r+0x946>
 8010c8c:	07f2      	lsls	r2, r6, #31
 8010c8e:	d505      	bpl.n	8010c9c <_dtoa_r+0x4d4>
 8010c90:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010c94:	f7ef fcc8 	bl	8000628 <__aeabi_dmul>
 8010c98:	3501      	adds	r5, #1
 8010c9a:	2301      	movs	r3, #1
 8010c9c:	1076      	asrs	r6, r6, #1
 8010c9e:	3708      	adds	r7, #8
 8010ca0:	e777      	b.n	8010b92 <_dtoa_r+0x3ca>
 8010ca2:	2502      	movs	r5, #2
 8010ca4:	e779      	b.n	8010b9a <_dtoa_r+0x3d2>
 8010ca6:	9f00      	ldr	r7, [sp, #0]
 8010ca8:	9e03      	ldr	r6, [sp, #12]
 8010caa:	e794      	b.n	8010bd6 <_dtoa_r+0x40e>
 8010cac:	9901      	ldr	r1, [sp, #4]
 8010cae:	4b4c      	ldr	r3, [pc, #304]	; (8010de0 <_dtoa_r+0x618>)
 8010cb0:	4431      	add	r1, r6
 8010cb2:	910d      	str	r1, [sp, #52]	; 0x34
 8010cb4:	9908      	ldr	r1, [sp, #32]
 8010cb6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8010cba:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8010cbe:	2900      	cmp	r1, #0
 8010cc0:	d043      	beq.n	8010d4a <_dtoa_r+0x582>
 8010cc2:	494d      	ldr	r1, [pc, #308]	; (8010df8 <_dtoa_r+0x630>)
 8010cc4:	2000      	movs	r0, #0
 8010cc6:	f7ef fdd9 	bl	800087c <__aeabi_ddiv>
 8010cca:	4652      	mov	r2, sl
 8010ccc:	465b      	mov	r3, fp
 8010cce:	f7ef faf3 	bl	80002b8 <__aeabi_dsub>
 8010cd2:	9d01      	ldr	r5, [sp, #4]
 8010cd4:	4682      	mov	sl, r0
 8010cd6:	468b      	mov	fp, r1
 8010cd8:	4649      	mov	r1, r9
 8010cda:	4640      	mov	r0, r8
 8010cdc:	f7ef ff54 	bl	8000b88 <__aeabi_d2iz>
 8010ce0:	4606      	mov	r6, r0
 8010ce2:	f7ef fc37 	bl	8000554 <__aeabi_i2d>
 8010ce6:	4602      	mov	r2, r0
 8010ce8:	460b      	mov	r3, r1
 8010cea:	4640      	mov	r0, r8
 8010cec:	4649      	mov	r1, r9
 8010cee:	f7ef fae3 	bl	80002b8 <__aeabi_dsub>
 8010cf2:	3630      	adds	r6, #48	; 0x30
 8010cf4:	f805 6b01 	strb.w	r6, [r5], #1
 8010cf8:	4652      	mov	r2, sl
 8010cfa:	465b      	mov	r3, fp
 8010cfc:	4680      	mov	r8, r0
 8010cfe:	4689      	mov	r9, r1
 8010d00:	f7ef ff04 	bl	8000b0c <__aeabi_dcmplt>
 8010d04:	2800      	cmp	r0, #0
 8010d06:	d163      	bne.n	8010dd0 <_dtoa_r+0x608>
 8010d08:	4642      	mov	r2, r8
 8010d0a:	464b      	mov	r3, r9
 8010d0c:	4936      	ldr	r1, [pc, #216]	; (8010de8 <_dtoa_r+0x620>)
 8010d0e:	2000      	movs	r0, #0
 8010d10:	f7ef fad2 	bl	80002b8 <__aeabi_dsub>
 8010d14:	4652      	mov	r2, sl
 8010d16:	465b      	mov	r3, fp
 8010d18:	f7ef fef8 	bl	8000b0c <__aeabi_dcmplt>
 8010d1c:	2800      	cmp	r0, #0
 8010d1e:	f040 80b5 	bne.w	8010e8c <_dtoa_r+0x6c4>
 8010d22:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010d24:	429d      	cmp	r5, r3
 8010d26:	d081      	beq.n	8010c2c <_dtoa_r+0x464>
 8010d28:	4b30      	ldr	r3, [pc, #192]	; (8010dec <_dtoa_r+0x624>)
 8010d2a:	2200      	movs	r2, #0
 8010d2c:	4650      	mov	r0, sl
 8010d2e:	4659      	mov	r1, fp
 8010d30:	f7ef fc7a 	bl	8000628 <__aeabi_dmul>
 8010d34:	4b2d      	ldr	r3, [pc, #180]	; (8010dec <_dtoa_r+0x624>)
 8010d36:	4682      	mov	sl, r0
 8010d38:	468b      	mov	fp, r1
 8010d3a:	4640      	mov	r0, r8
 8010d3c:	4649      	mov	r1, r9
 8010d3e:	2200      	movs	r2, #0
 8010d40:	f7ef fc72 	bl	8000628 <__aeabi_dmul>
 8010d44:	4680      	mov	r8, r0
 8010d46:	4689      	mov	r9, r1
 8010d48:	e7c6      	b.n	8010cd8 <_dtoa_r+0x510>
 8010d4a:	4650      	mov	r0, sl
 8010d4c:	4659      	mov	r1, fp
 8010d4e:	f7ef fc6b 	bl	8000628 <__aeabi_dmul>
 8010d52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010d54:	9d01      	ldr	r5, [sp, #4]
 8010d56:	930f      	str	r3, [sp, #60]	; 0x3c
 8010d58:	4682      	mov	sl, r0
 8010d5a:	468b      	mov	fp, r1
 8010d5c:	4649      	mov	r1, r9
 8010d5e:	4640      	mov	r0, r8
 8010d60:	f7ef ff12 	bl	8000b88 <__aeabi_d2iz>
 8010d64:	4606      	mov	r6, r0
 8010d66:	f7ef fbf5 	bl	8000554 <__aeabi_i2d>
 8010d6a:	3630      	adds	r6, #48	; 0x30
 8010d6c:	4602      	mov	r2, r0
 8010d6e:	460b      	mov	r3, r1
 8010d70:	4640      	mov	r0, r8
 8010d72:	4649      	mov	r1, r9
 8010d74:	f7ef faa0 	bl	80002b8 <__aeabi_dsub>
 8010d78:	f805 6b01 	strb.w	r6, [r5], #1
 8010d7c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010d7e:	429d      	cmp	r5, r3
 8010d80:	4680      	mov	r8, r0
 8010d82:	4689      	mov	r9, r1
 8010d84:	f04f 0200 	mov.w	r2, #0
 8010d88:	d124      	bne.n	8010dd4 <_dtoa_r+0x60c>
 8010d8a:	4b1b      	ldr	r3, [pc, #108]	; (8010df8 <_dtoa_r+0x630>)
 8010d8c:	4650      	mov	r0, sl
 8010d8e:	4659      	mov	r1, fp
 8010d90:	f7ef fa94 	bl	80002bc <__adddf3>
 8010d94:	4602      	mov	r2, r0
 8010d96:	460b      	mov	r3, r1
 8010d98:	4640      	mov	r0, r8
 8010d9a:	4649      	mov	r1, r9
 8010d9c:	f7ef fed4 	bl	8000b48 <__aeabi_dcmpgt>
 8010da0:	2800      	cmp	r0, #0
 8010da2:	d173      	bne.n	8010e8c <_dtoa_r+0x6c4>
 8010da4:	4652      	mov	r2, sl
 8010da6:	465b      	mov	r3, fp
 8010da8:	4913      	ldr	r1, [pc, #76]	; (8010df8 <_dtoa_r+0x630>)
 8010daa:	2000      	movs	r0, #0
 8010dac:	f7ef fa84 	bl	80002b8 <__aeabi_dsub>
 8010db0:	4602      	mov	r2, r0
 8010db2:	460b      	mov	r3, r1
 8010db4:	4640      	mov	r0, r8
 8010db6:	4649      	mov	r1, r9
 8010db8:	f7ef fea8 	bl	8000b0c <__aeabi_dcmplt>
 8010dbc:	2800      	cmp	r0, #0
 8010dbe:	f43f af35 	beq.w	8010c2c <_dtoa_r+0x464>
 8010dc2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8010dc4:	1e6b      	subs	r3, r5, #1
 8010dc6:	930f      	str	r3, [sp, #60]	; 0x3c
 8010dc8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8010dcc:	2b30      	cmp	r3, #48	; 0x30
 8010dce:	d0f8      	beq.n	8010dc2 <_dtoa_r+0x5fa>
 8010dd0:	9700      	str	r7, [sp, #0]
 8010dd2:	e049      	b.n	8010e68 <_dtoa_r+0x6a0>
 8010dd4:	4b05      	ldr	r3, [pc, #20]	; (8010dec <_dtoa_r+0x624>)
 8010dd6:	f7ef fc27 	bl	8000628 <__aeabi_dmul>
 8010dda:	4680      	mov	r8, r0
 8010ddc:	4689      	mov	r9, r1
 8010dde:	e7bd      	b.n	8010d5c <_dtoa_r+0x594>
 8010de0:	080145c8 	.word	0x080145c8
 8010de4:	080145a0 	.word	0x080145a0
 8010de8:	3ff00000 	.word	0x3ff00000
 8010dec:	40240000 	.word	0x40240000
 8010df0:	401c0000 	.word	0x401c0000
 8010df4:	40140000 	.word	0x40140000
 8010df8:	3fe00000 	.word	0x3fe00000
 8010dfc:	9d01      	ldr	r5, [sp, #4]
 8010dfe:	4656      	mov	r6, sl
 8010e00:	465f      	mov	r7, fp
 8010e02:	4642      	mov	r2, r8
 8010e04:	464b      	mov	r3, r9
 8010e06:	4630      	mov	r0, r6
 8010e08:	4639      	mov	r1, r7
 8010e0a:	f7ef fd37 	bl	800087c <__aeabi_ddiv>
 8010e0e:	f7ef febb 	bl	8000b88 <__aeabi_d2iz>
 8010e12:	4682      	mov	sl, r0
 8010e14:	f7ef fb9e 	bl	8000554 <__aeabi_i2d>
 8010e18:	4642      	mov	r2, r8
 8010e1a:	464b      	mov	r3, r9
 8010e1c:	f7ef fc04 	bl	8000628 <__aeabi_dmul>
 8010e20:	4602      	mov	r2, r0
 8010e22:	460b      	mov	r3, r1
 8010e24:	4630      	mov	r0, r6
 8010e26:	4639      	mov	r1, r7
 8010e28:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8010e2c:	f7ef fa44 	bl	80002b8 <__aeabi_dsub>
 8010e30:	f805 6b01 	strb.w	r6, [r5], #1
 8010e34:	9e01      	ldr	r6, [sp, #4]
 8010e36:	9f03      	ldr	r7, [sp, #12]
 8010e38:	1bae      	subs	r6, r5, r6
 8010e3a:	42b7      	cmp	r7, r6
 8010e3c:	4602      	mov	r2, r0
 8010e3e:	460b      	mov	r3, r1
 8010e40:	d135      	bne.n	8010eae <_dtoa_r+0x6e6>
 8010e42:	f7ef fa3b 	bl	80002bc <__adddf3>
 8010e46:	4642      	mov	r2, r8
 8010e48:	464b      	mov	r3, r9
 8010e4a:	4606      	mov	r6, r0
 8010e4c:	460f      	mov	r7, r1
 8010e4e:	f7ef fe7b 	bl	8000b48 <__aeabi_dcmpgt>
 8010e52:	b9d0      	cbnz	r0, 8010e8a <_dtoa_r+0x6c2>
 8010e54:	4642      	mov	r2, r8
 8010e56:	464b      	mov	r3, r9
 8010e58:	4630      	mov	r0, r6
 8010e5a:	4639      	mov	r1, r7
 8010e5c:	f7ef fe4c 	bl	8000af8 <__aeabi_dcmpeq>
 8010e60:	b110      	cbz	r0, 8010e68 <_dtoa_r+0x6a0>
 8010e62:	f01a 0f01 	tst.w	sl, #1
 8010e66:	d110      	bne.n	8010e8a <_dtoa_r+0x6c2>
 8010e68:	4620      	mov	r0, r4
 8010e6a:	ee18 1a10 	vmov	r1, s16
 8010e6e:	f000 fae9 	bl	8011444 <_Bfree>
 8010e72:	2300      	movs	r3, #0
 8010e74:	9800      	ldr	r0, [sp, #0]
 8010e76:	702b      	strb	r3, [r5, #0]
 8010e78:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010e7a:	3001      	adds	r0, #1
 8010e7c:	6018      	str	r0, [r3, #0]
 8010e7e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010e80:	2b00      	cmp	r3, #0
 8010e82:	f43f acf1 	beq.w	8010868 <_dtoa_r+0xa0>
 8010e86:	601d      	str	r5, [r3, #0]
 8010e88:	e4ee      	b.n	8010868 <_dtoa_r+0xa0>
 8010e8a:	9f00      	ldr	r7, [sp, #0]
 8010e8c:	462b      	mov	r3, r5
 8010e8e:	461d      	mov	r5, r3
 8010e90:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010e94:	2a39      	cmp	r2, #57	; 0x39
 8010e96:	d106      	bne.n	8010ea6 <_dtoa_r+0x6de>
 8010e98:	9a01      	ldr	r2, [sp, #4]
 8010e9a:	429a      	cmp	r2, r3
 8010e9c:	d1f7      	bne.n	8010e8e <_dtoa_r+0x6c6>
 8010e9e:	9901      	ldr	r1, [sp, #4]
 8010ea0:	2230      	movs	r2, #48	; 0x30
 8010ea2:	3701      	adds	r7, #1
 8010ea4:	700a      	strb	r2, [r1, #0]
 8010ea6:	781a      	ldrb	r2, [r3, #0]
 8010ea8:	3201      	adds	r2, #1
 8010eaa:	701a      	strb	r2, [r3, #0]
 8010eac:	e790      	b.n	8010dd0 <_dtoa_r+0x608>
 8010eae:	4ba6      	ldr	r3, [pc, #664]	; (8011148 <_dtoa_r+0x980>)
 8010eb0:	2200      	movs	r2, #0
 8010eb2:	f7ef fbb9 	bl	8000628 <__aeabi_dmul>
 8010eb6:	2200      	movs	r2, #0
 8010eb8:	2300      	movs	r3, #0
 8010eba:	4606      	mov	r6, r0
 8010ebc:	460f      	mov	r7, r1
 8010ebe:	f7ef fe1b 	bl	8000af8 <__aeabi_dcmpeq>
 8010ec2:	2800      	cmp	r0, #0
 8010ec4:	d09d      	beq.n	8010e02 <_dtoa_r+0x63a>
 8010ec6:	e7cf      	b.n	8010e68 <_dtoa_r+0x6a0>
 8010ec8:	9a08      	ldr	r2, [sp, #32]
 8010eca:	2a00      	cmp	r2, #0
 8010ecc:	f000 80d7 	beq.w	801107e <_dtoa_r+0x8b6>
 8010ed0:	9a06      	ldr	r2, [sp, #24]
 8010ed2:	2a01      	cmp	r2, #1
 8010ed4:	f300 80ba 	bgt.w	801104c <_dtoa_r+0x884>
 8010ed8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010eda:	2a00      	cmp	r2, #0
 8010edc:	f000 80b2 	beq.w	8011044 <_dtoa_r+0x87c>
 8010ee0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8010ee4:	9e07      	ldr	r6, [sp, #28]
 8010ee6:	9d04      	ldr	r5, [sp, #16]
 8010ee8:	9a04      	ldr	r2, [sp, #16]
 8010eea:	441a      	add	r2, r3
 8010eec:	9204      	str	r2, [sp, #16]
 8010eee:	9a05      	ldr	r2, [sp, #20]
 8010ef0:	2101      	movs	r1, #1
 8010ef2:	441a      	add	r2, r3
 8010ef4:	4620      	mov	r0, r4
 8010ef6:	9205      	str	r2, [sp, #20]
 8010ef8:	f000 fb5c 	bl	80115b4 <__i2b>
 8010efc:	4607      	mov	r7, r0
 8010efe:	2d00      	cmp	r5, #0
 8010f00:	dd0c      	ble.n	8010f1c <_dtoa_r+0x754>
 8010f02:	9b05      	ldr	r3, [sp, #20]
 8010f04:	2b00      	cmp	r3, #0
 8010f06:	dd09      	ble.n	8010f1c <_dtoa_r+0x754>
 8010f08:	42ab      	cmp	r3, r5
 8010f0a:	9a04      	ldr	r2, [sp, #16]
 8010f0c:	bfa8      	it	ge
 8010f0e:	462b      	movge	r3, r5
 8010f10:	1ad2      	subs	r2, r2, r3
 8010f12:	9204      	str	r2, [sp, #16]
 8010f14:	9a05      	ldr	r2, [sp, #20]
 8010f16:	1aed      	subs	r5, r5, r3
 8010f18:	1ad3      	subs	r3, r2, r3
 8010f1a:	9305      	str	r3, [sp, #20]
 8010f1c:	9b07      	ldr	r3, [sp, #28]
 8010f1e:	b31b      	cbz	r3, 8010f68 <_dtoa_r+0x7a0>
 8010f20:	9b08      	ldr	r3, [sp, #32]
 8010f22:	2b00      	cmp	r3, #0
 8010f24:	f000 80af 	beq.w	8011086 <_dtoa_r+0x8be>
 8010f28:	2e00      	cmp	r6, #0
 8010f2a:	dd13      	ble.n	8010f54 <_dtoa_r+0x78c>
 8010f2c:	4639      	mov	r1, r7
 8010f2e:	4632      	mov	r2, r6
 8010f30:	4620      	mov	r0, r4
 8010f32:	f000 fbff 	bl	8011734 <__pow5mult>
 8010f36:	ee18 2a10 	vmov	r2, s16
 8010f3a:	4601      	mov	r1, r0
 8010f3c:	4607      	mov	r7, r0
 8010f3e:	4620      	mov	r0, r4
 8010f40:	f000 fb4e 	bl	80115e0 <__multiply>
 8010f44:	ee18 1a10 	vmov	r1, s16
 8010f48:	4680      	mov	r8, r0
 8010f4a:	4620      	mov	r0, r4
 8010f4c:	f000 fa7a 	bl	8011444 <_Bfree>
 8010f50:	ee08 8a10 	vmov	s16, r8
 8010f54:	9b07      	ldr	r3, [sp, #28]
 8010f56:	1b9a      	subs	r2, r3, r6
 8010f58:	d006      	beq.n	8010f68 <_dtoa_r+0x7a0>
 8010f5a:	ee18 1a10 	vmov	r1, s16
 8010f5e:	4620      	mov	r0, r4
 8010f60:	f000 fbe8 	bl	8011734 <__pow5mult>
 8010f64:	ee08 0a10 	vmov	s16, r0
 8010f68:	2101      	movs	r1, #1
 8010f6a:	4620      	mov	r0, r4
 8010f6c:	f000 fb22 	bl	80115b4 <__i2b>
 8010f70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010f72:	2b00      	cmp	r3, #0
 8010f74:	4606      	mov	r6, r0
 8010f76:	f340 8088 	ble.w	801108a <_dtoa_r+0x8c2>
 8010f7a:	461a      	mov	r2, r3
 8010f7c:	4601      	mov	r1, r0
 8010f7e:	4620      	mov	r0, r4
 8010f80:	f000 fbd8 	bl	8011734 <__pow5mult>
 8010f84:	9b06      	ldr	r3, [sp, #24]
 8010f86:	2b01      	cmp	r3, #1
 8010f88:	4606      	mov	r6, r0
 8010f8a:	f340 8081 	ble.w	8011090 <_dtoa_r+0x8c8>
 8010f8e:	f04f 0800 	mov.w	r8, #0
 8010f92:	6933      	ldr	r3, [r6, #16]
 8010f94:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8010f98:	6918      	ldr	r0, [r3, #16]
 8010f9a:	f000 fabb 	bl	8011514 <__hi0bits>
 8010f9e:	f1c0 0020 	rsb	r0, r0, #32
 8010fa2:	9b05      	ldr	r3, [sp, #20]
 8010fa4:	4418      	add	r0, r3
 8010fa6:	f010 001f 	ands.w	r0, r0, #31
 8010faa:	f000 8092 	beq.w	80110d2 <_dtoa_r+0x90a>
 8010fae:	f1c0 0320 	rsb	r3, r0, #32
 8010fb2:	2b04      	cmp	r3, #4
 8010fb4:	f340 808a 	ble.w	80110cc <_dtoa_r+0x904>
 8010fb8:	f1c0 001c 	rsb	r0, r0, #28
 8010fbc:	9b04      	ldr	r3, [sp, #16]
 8010fbe:	4403      	add	r3, r0
 8010fc0:	9304      	str	r3, [sp, #16]
 8010fc2:	9b05      	ldr	r3, [sp, #20]
 8010fc4:	4403      	add	r3, r0
 8010fc6:	4405      	add	r5, r0
 8010fc8:	9305      	str	r3, [sp, #20]
 8010fca:	9b04      	ldr	r3, [sp, #16]
 8010fcc:	2b00      	cmp	r3, #0
 8010fce:	dd07      	ble.n	8010fe0 <_dtoa_r+0x818>
 8010fd0:	ee18 1a10 	vmov	r1, s16
 8010fd4:	461a      	mov	r2, r3
 8010fd6:	4620      	mov	r0, r4
 8010fd8:	f000 fc06 	bl	80117e8 <__lshift>
 8010fdc:	ee08 0a10 	vmov	s16, r0
 8010fe0:	9b05      	ldr	r3, [sp, #20]
 8010fe2:	2b00      	cmp	r3, #0
 8010fe4:	dd05      	ble.n	8010ff2 <_dtoa_r+0x82a>
 8010fe6:	4631      	mov	r1, r6
 8010fe8:	461a      	mov	r2, r3
 8010fea:	4620      	mov	r0, r4
 8010fec:	f000 fbfc 	bl	80117e8 <__lshift>
 8010ff0:	4606      	mov	r6, r0
 8010ff2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010ff4:	2b00      	cmp	r3, #0
 8010ff6:	d06e      	beq.n	80110d6 <_dtoa_r+0x90e>
 8010ff8:	ee18 0a10 	vmov	r0, s16
 8010ffc:	4631      	mov	r1, r6
 8010ffe:	f000 fc63 	bl	80118c8 <__mcmp>
 8011002:	2800      	cmp	r0, #0
 8011004:	da67      	bge.n	80110d6 <_dtoa_r+0x90e>
 8011006:	9b00      	ldr	r3, [sp, #0]
 8011008:	3b01      	subs	r3, #1
 801100a:	ee18 1a10 	vmov	r1, s16
 801100e:	9300      	str	r3, [sp, #0]
 8011010:	220a      	movs	r2, #10
 8011012:	2300      	movs	r3, #0
 8011014:	4620      	mov	r0, r4
 8011016:	f000 fa37 	bl	8011488 <__multadd>
 801101a:	9b08      	ldr	r3, [sp, #32]
 801101c:	ee08 0a10 	vmov	s16, r0
 8011020:	2b00      	cmp	r3, #0
 8011022:	f000 81b1 	beq.w	8011388 <_dtoa_r+0xbc0>
 8011026:	2300      	movs	r3, #0
 8011028:	4639      	mov	r1, r7
 801102a:	220a      	movs	r2, #10
 801102c:	4620      	mov	r0, r4
 801102e:	f000 fa2b 	bl	8011488 <__multadd>
 8011032:	9b02      	ldr	r3, [sp, #8]
 8011034:	2b00      	cmp	r3, #0
 8011036:	4607      	mov	r7, r0
 8011038:	f300 808e 	bgt.w	8011158 <_dtoa_r+0x990>
 801103c:	9b06      	ldr	r3, [sp, #24]
 801103e:	2b02      	cmp	r3, #2
 8011040:	dc51      	bgt.n	80110e6 <_dtoa_r+0x91e>
 8011042:	e089      	b.n	8011158 <_dtoa_r+0x990>
 8011044:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011046:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801104a:	e74b      	b.n	8010ee4 <_dtoa_r+0x71c>
 801104c:	9b03      	ldr	r3, [sp, #12]
 801104e:	1e5e      	subs	r6, r3, #1
 8011050:	9b07      	ldr	r3, [sp, #28]
 8011052:	42b3      	cmp	r3, r6
 8011054:	bfbf      	itttt	lt
 8011056:	9b07      	ldrlt	r3, [sp, #28]
 8011058:	9607      	strlt	r6, [sp, #28]
 801105a:	1af2      	sublt	r2, r6, r3
 801105c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 801105e:	bfb6      	itet	lt
 8011060:	189b      	addlt	r3, r3, r2
 8011062:	1b9e      	subge	r6, r3, r6
 8011064:	930a      	strlt	r3, [sp, #40]	; 0x28
 8011066:	9b03      	ldr	r3, [sp, #12]
 8011068:	bfb8      	it	lt
 801106a:	2600      	movlt	r6, #0
 801106c:	2b00      	cmp	r3, #0
 801106e:	bfb7      	itett	lt
 8011070:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8011074:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8011078:	1a9d      	sublt	r5, r3, r2
 801107a:	2300      	movlt	r3, #0
 801107c:	e734      	b.n	8010ee8 <_dtoa_r+0x720>
 801107e:	9e07      	ldr	r6, [sp, #28]
 8011080:	9d04      	ldr	r5, [sp, #16]
 8011082:	9f08      	ldr	r7, [sp, #32]
 8011084:	e73b      	b.n	8010efe <_dtoa_r+0x736>
 8011086:	9a07      	ldr	r2, [sp, #28]
 8011088:	e767      	b.n	8010f5a <_dtoa_r+0x792>
 801108a:	9b06      	ldr	r3, [sp, #24]
 801108c:	2b01      	cmp	r3, #1
 801108e:	dc18      	bgt.n	80110c2 <_dtoa_r+0x8fa>
 8011090:	f1ba 0f00 	cmp.w	sl, #0
 8011094:	d115      	bne.n	80110c2 <_dtoa_r+0x8fa>
 8011096:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801109a:	b993      	cbnz	r3, 80110c2 <_dtoa_r+0x8fa>
 801109c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80110a0:	0d1b      	lsrs	r3, r3, #20
 80110a2:	051b      	lsls	r3, r3, #20
 80110a4:	b183      	cbz	r3, 80110c8 <_dtoa_r+0x900>
 80110a6:	9b04      	ldr	r3, [sp, #16]
 80110a8:	3301      	adds	r3, #1
 80110aa:	9304      	str	r3, [sp, #16]
 80110ac:	9b05      	ldr	r3, [sp, #20]
 80110ae:	3301      	adds	r3, #1
 80110b0:	9305      	str	r3, [sp, #20]
 80110b2:	f04f 0801 	mov.w	r8, #1
 80110b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80110b8:	2b00      	cmp	r3, #0
 80110ba:	f47f af6a 	bne.w	8010f92 <_dtoa_r+0x7ca>
 80110be:	2001      	movs	r0, #1
 80110c0:	e76f      	b.n	8010fa2 <_dtoa_r+0x7da>
 80110c2:	f04f 0800 	mov.w	r8, #0
 80110c6:	e7f6      	b.n	80110b6 <_dtoa_r+0x8ee>
 80110c8:	4698      	mov	r8, r3
 80110ca:	e7f4      	b.n	80110b6 <_dtoa_r+0x8ee>
 80110cc:	f43f af7d 	beq.w	8010fca <_dtoa_r+0x802>
 80110d0:	4618      	mov	r0, r3
 80110d2:	301c      	adds	r0, #28
 80110d4:	e772      	b.n	8010fbc <_dtoa_r+0x7f4>
 80110d6:	9b03      	ldr	r3, [sp, #12]
 80110d8:	2b00      	cmp	r3, #0
 80110da:	dc37      	bgt.n	801114c <_dtoa_r+0x984>
 80110dc:	9b06      	ldr	r3, [sp, #24]
 80110de:	2b02      	cmp	r3, #2
 80110e0:	dd34      	ble.n	801114c <_dtoa_r+0x984>
 80110e2:	9b03      	ldr	r3, [sp, #12]
 80110e4:	9302      	str	r3, [sp, #8]
 80110e6:	9b02      	ldr	r3, [sp, #8]
 80110e8:	b96b      	cbnz	r3, 8011106 <_dtoa_r+0x93e>
 80110ea:	4631      	mov	r1, r6
 80110ec:	2205      	movs	r2, #5
 80110ee:	4620      	mov	r0, r4
 80110f0:	f000 f9ca 	bl	8011488 <__multadd>
 80110f4:	4601      	mov	r1, r0
 80110f6:	4606      	mov	r6, r0
 80110f8:	ee18 0a10 	vmov	r0, s16
 80110fc:	f000 fbe4 	bl	80118c8 <__mcmp>
 8011100:	2800      	cmp	r0, #0
 8011102:	f73f adbb 	bgt.w	8010c7c <_dtoa_r+0x4b4>
 8011106:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011108:	9d01      	ldr	r5, [sp, #4]
 801110a:	43db      	mvns	r3, r3
 801110c:	9300      	str	r3, [sp, #0]
 801110e:	f04f 0800 	mov.w	r8, #0
 8011112:	4631      	mov	r1, r6
 8011114:	4620      	mov	r0, r4
 8011116:	f000 f995 	bl	8011444 <_Bfree>
 801111a:	2f00      	cmp	r7, #0
 801111c:	f43f aea4 	beq.w	8010e68 <_dtoa_r+0x6a0>
 8011120:	f1b8 0f00 	cmp.w	r8, #0
 8011124:	d005      	beq.n	8011132 <_dtoa_r+0x96a>
 8011126:	45b8      	cmp	r8, r7
 8011128:	d003      	beq.n	8011132 <_dtoa_r+0x96a>
 801112a:	4641      	mov	r1, r8
 801112c:	4620      	mov	r0, r4
 801112e:	f000 f989 	bl	8011444 <_Bfree>
 8011132:	4639      	mov	r1, r7
 8011134:	4620      	mov	r0, r4
 8011136:	f000 f985 	bl	8011444 <_Bfree>
 801113a:	e695      	b.n	8010e68 <_dtoa_r+0x6a0>
 801113c:	2600      	movs	r6, #0
 801113e:	4637      	mov	r7, r6
 8011140:	e7e1      	b.n	8011106 <_dtoa_r+0x93e>
 8011142:	9700      	str	r7, [sp, #0]
 8011144:	4637      	mov	r7, r6
 8011146:	e599      	b.n	8010c7c <_dtoa_r+0x4b4>
 8011148:	40240000 	.word	0x40240000
 801114c:	9b08      	ldr	r3, [sp, #32]
 801114e:	2b00      	cmp	r3, #0
 8011150:	f000 80ca 	beq.w	80112e8 <_dtoa_r+0xb20>
 8011154:	9b03      	ldr	r3, [sp, #12]
 8011156:	9302      	str	r3, [sp, #8]
 8011158:	2d00      	cmp	r5, #0
 801115a:	dd05      	ble.n	8011168 <_dtoa_r+0x9a0>
 801115c:	4639      	mov	r1, r7
 801115e:	462a      	mov	r2, r5
 8011160:	4620      	mov	r0, r4
 8011162:	f000 fb41 	bl	80117e8 <__lshift>
 8011166:	4607      	mov	r7, r0
 8011168:	f1b8 0f00 	cmp.w	r8, #0
 801116c:	d05b      	beq.n	8011226 <_dtoa_r+0xa5e>
 801116e:	6879      	ldr	r1, [r7, #4]
 8011170:	4620      	mov	r0, r4
 8011172:	f000 f927 	bl	80113c4 <_Balloc>
 8011176:	4605      	mov	r5, r0
 8011178:	b928      	cbnz	r0, 8011186 <_dtoa_r+0x9be>
 801117a:	4b87      	ldr	r3, [pc, #540]	; (8011398 <_dtoa_r+0xbd0>)
 801117c:	4602      	mov	r2, r0
 801117e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8011182:	f7ff bb3b 	b.w	80107fc <_dtoa_r+0x34>
 8011186:	693a      	ldr	r2, [r7, #16]
 8011188:	3202      	adds	r2, #2
 801118a:	0092      	lsls	r2, r2, #2
 801118c:	f107 010c 	add.w	r1, r7, #12
 8011190:	300c      	adds	r0, #12
 8011192:	f7fe fcfd 	bl	800fb90 <memcpy>
 8011196:	2201      	movs	r2, #1
 8011198:	4629      	mov	r1, r5
 801119a:	4620      	mov	r0, r4
 801119c:	f000 fb24 	bl	80117e8 <__lshift>
 80111a0:	9b01      	ldr	r3, [sp, #4]
 80111a2:	f103 0901 	add.w	r9, r3, #1
 80111a6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80111aa:	4413      	add	r3, r2
 80111ac:	9305      	str	r3, [sp, #20]
 80111ae:	f00a 0301 	and.w	r3, sl, #1
 80111b2:	46b8      	mov	r8, r7
 80111b4:	9304      	str	r3, [sp, #16]
 80111b6:	4607      	mov	r7, r0
 80111b8:	4631      	mov	r1, r6
 80111ba:	ee18 0a10 	vmov	r0, s16
 80111be:	f7ff fa77 	bl	80106b0 <quorem>
 80111c2:	4641      	mov	r1, r8
 80111c4:	9002      	str	r0, [sp, #8]
 80111c6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80111ca:	ee18 0a10 	vmov	r0, s16
 80111ce:	f000 fb7b 	bl	80118c8 <__mcmp>
 80111d2:	463a      	mov	r2, r7
 80111d4:	9003      	str	r0, [sp, #12]
 80111d6:	4631      	mov	r1, r6
 80111d8:	4620      	mov	r0, r4
 80111da:	f000 fb91 	bl	8011900 <__mdiff>
 80111de:	68c2      	ldr	r2, [r0, #12]
 80111e0:	f109 3bff 	add.w	fp, r9, #4294967295
 80111e4:	4605      	mov	r5, r0
 80111e6:	bb02      	cbnz	r2, 801122a <_dtoa_r+0xa62>
 80111e8:	4601      	mov	r1, r0
 80111ea:	ee18 0a10 	vmov	r0, s16
 80111ee:	f000 fb6b 	bl	80118c8 <__mcmp>
 80111f2:	4602      	mov	r2, r0
 80111f4:	4629      	mov	r1, r5
 80111f6:	4620      	mov	r0, r4
 80111f8:	9207      	str	r2, [sp, #28]
 80111fa:	f000 f923 	bl	8011444 <_Bfree>
 80111fe:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8011202:	ea43 0102 	orr.w	r1, r3, r2
 8011206:	9b04      	ldr	r3, [sp, #16]
 8011208:	430b      	orrs	r3, r1
 801120a:	464d      	mov	r5, r9
 801120c:	d10f      	bne.n	801122e <_dtoa_r+0xa66>
 801120e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8011212:	d02a      	beq.n	801126a <_dtoa_r+0xaa2>
 8011214:	9b03      	ldr	r3, [sp, #12]
 8011216:	2b00      	cmp	r3, #0
 8011218:	dd02      	ble.n	8011220 <_dtoa_r+0xa58>
 801121a:	9b02      	ldr	r3, [sp, #8]
 801121c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8011220:	f88b a000 	strb.w	sl, [fp]
 8011224:	e775      	b.n	8011112 <_dtoa_r+0x94a>
 8011226:	4638      	mov	r0, r7
 8011228:	e7ba      	b.n	80111a0 <_dtoa_r+0x9d8>
 801122a:	2201      	movs	r2, #1
 801122c:	e7e2      	b.n	80111f4 <_dtoa_r+0xa2c>
 801122e:	9b03      	ldr	r3, [sp, #12]
 8011230:	2b00      	cmp	r3, #0
 8011232:	db04      	blt.n	801123e <_dtoa_r+0xa76>
 8011234:	9906      	ldr	r1, [sp, #24]
 8011236:	430b      	orrs	r3, r1
 8011238:	9904      	ldr	r1, [sp, #16]
 801123a:	430b      	orrs	r3, r1
 801123c:	d122      	bne.n	8011284 <_dtoa_r+0xabc>
 801123e:	2a00      	cmp	r2, #0
 8011240:	ddee      	ble.n	8011220 <_dtoa_r+0xa58>
 8011242:	ee18 1a10 	vmov	r1, s16
 8011246:	2201      	movs	r2, #1
 8011248:	4620      	mov	r0, r4
 801124a:	f000 facd 	bl	80117e8 <__lshift>
 801124e:	4631      	mov	r1, r6
 8011250:	ee08 0a10 	vmov	s16, r0
 8011254:	f000 fb38 	bl	80118c8 <__mcmp>
 8011258:	2800      	cmp	r0, #0
 801125a:	dc03      	bgt.n	8011264 <_dtoa_r+0xa9c>
 801125c:	d1e0      	bne.n	8011220 <_dtoa_r+0xa58>
 801125e:	f01a 0f01 	tst.w	sl, #1
 8011262:	d0dd      	beq.n	8011220 <_dtoa_r+0xa58>
 8011264:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8011268:	d1d7      	bne.n	801121a <_dtoa_r+0xa52>
 801126a:	2339      	movs	r3, #57	; 0x39
 801126c:	f88b 3000 	strb.w	r3, [fp]
 8011270:	462b      	mov	r3, r5
 8011272:	461d      	mov	r5, r3
 8011274:	3b01      	subs	r3, #1
 8011276:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801127a:	2a39      	cmp	r2, #57	; 0x39
 801127c:	d071      	beq.n	8011362 <_dtoa_r+0xb9a>
 801127e:	3201      	adds	r2, #1
 8011280:	701a      	strb	r2, [r3, #0]
 8011282:	e746      	b.n	8011112 <_dtoa_r+0x94a>
 8011284:	2a00      	cmp	r2, #0
 8011286:	dd07      	ble.n	8011298 <_dtoa_r+0xad0>
 8011288:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801128c:	d0ed      	beq.n	801126a <_dtoa_r+0xaa2>
 801128e:	f10a 0301 	add.w	r3, sl, #1
 8011292:	f88b 3000 	strb.w	r3, [fp]
 8011296:	e73c      	b.n	8011112 <_dtoa_r+0x94a>
 8011298:	9b05      	ldr	r3, [sp, #20]
 801129a:	f809 ac01 	strb.w	sl, [r9, #-1]
 801129e:	4599      	cmp	r9, r3
 80112a0:	d047      	beq.n	8011332 <_dtoa_r+0xb6a>
 80112a2:	ee18 1a10 	vmov	r1, s16
 80112a6:	2300      	movs	r3, #0
 80112a8:	220a      	movs	r2, #10
 80112aa:	4620      	mov	r0, r4
 80112ac:	f000 f8ec 	bl	8011488 <__multadd>
 80112b0:	45b8      	cmp	r8, r7
 80112b2:	ee08 0a10 	vmov	s16, r0
 80112b6:	f04f 0300 	mov.w	r3, #0
 80112ba:	f04f 020a 	mov.w	r2, #10
 80112be:	4641      	mov	r1, r8
 80112c0:	4620      	mov	r0, r4
 80112c2:	d106      	bne.n	80112d2 <_dtoa_r+0xb0a>
 80112c4:	f000 f8e0 	bl	8011488 <__multadd>
 80112c8:	4680      	mov	r8, r0
 80112ca:	4607      	mov	r7, r0
 80112cc:	f109 0901 	add.w	r9, r9, #1
 80112d0:	e772      	b.n	80111b8 <_dtoa_r+0x9f0>
 80112d2:	f000 f8d9 	bl	8011488 <__multadd>
 80112d6:	4639      	mov	r1, r7
 80112d8:	4680      	mov	r8, r0
 80112da:	2300      	movs	r3, #0
 80112dc:	220a      	movs	r2, #10
 80112de:	4620      	mov	r0, r4
 80112e0:	f000 f8d2 	bl	8011488 <__multadd>
 80112e4:	4607      	mov	r7, r0
 80112e6:	e7f1      	b.n	80112cc <_dtoa_r+0xb04>
 80112e8:	9b03      	ldr	r3, [sp, #12]
 80112ea:	9302      	str	r3, [sp, #8]
 80112ec:	9d01      	ldr	r5, [sp, #4]
 80112ee:	ee18 0a10 	vmov	r0, s16
 80112f2:	4631      	mov	r1, r6
 80112f4:	f7ff f9dc 	bl	80106b0 <quorem>
 80112f8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80112fc:	9b01      	ldr	r3, [sp, #4]
 80112fe:	f805 ab01 	strb.w	sl, [r5], #1
 8011302:	1aea      	subs	r2, r5, r3
 8011304:	9b02      	ldr	r3, [sp, #8]
 8011306:	4293      	cmp	r3, r2
 8011308:	dd09      	ble.n	801131e <_dtoa_r+0xb56>
 801130a:	ee18 1a10 	vmov	r1, s16
 801130e:	2300      	movs	r3, #0
 8011310:	220a      	movs	r2, #10
 8011312:	4620      	mov	r0, r4
 8011314:	f000 f8b8 	bl	8011488 <__multadd>
 8011318:	ee08 0a10 	vmov	s16, r0
 801131c:	e7e7      	b.n	80112ee <_dtoa_r+0xb26>
 801131e:	9b02      	ldr	r3, [sp, #8]
 8011320:	2b00      	cmp	r3, #0
 8011322:	bfc8      	it	gt
 8011324:	461d      	movgt	r5, r3
 8011326:	9b01      	ldr	r3, [sp, #4]
 8011328:	bfd8      	it	le
 801132a:	2501      	movle	r5, #1
 801132c:	441d      	add	r5, r3
 801132e:	f04f 0800 	mov.w	r8, #0
 8011332:	ee18 1a10 	vmov	r1, s16
 8011336:	2201      	movs	r2, #1
 8011338:	4620      	mov	r0, r4
 801133a:	f000 fa55 	bl	80117e8 <__lshift>
 801133e:	4631      	mov	r1, r6
 8011340:	ee08 0a10 	vmov	s16, r0
 8011344:	f000 fac0 	bl	80118c8 <__mcmp>
 8011348:	2800      	cmp	r0, #0
 801134a:	dc91      	bgt.n	8011270 <_dtoa_r+0xaa8>
 801134c:	d102      	bne.n	8011354 <_dtoa_r+0xb8c>
 801134e:	f01a 0f01 	tst.w	sl, #1
 8011352:	d18d      	bne.n	8011270 <_dtoa_r+0xaa8>
 8011354:	462b      	mov	r3, r5
 8011356:	461d      	mov	r5, r3
 8011358:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801135c:	2a30      	cmp	r2, #48	; 0x30
 801135e:	d0fa      	beq.n	8011356 <_dtoa_r+0xb8e>
 8011360:	e6d7      	b.n	8011112 <_dtoa_r+0x94a>
 8011362:	9a01      	ldr	r2, [sp, #4]
 8011364:	429a      	cmp	r2, r3
 8011366:	d184      	bne.n	8011272 <_dtoa_r+0xaaa>
 8011368:	9b00      	ldr	r3, [sp, #0]
 801136a:	3301      	adds	r3, #1
 801136c:	9300      	str	r3, [sp, #0]
 801136e:	2331      	movs	r3, #49	; 0x31
 8011370:	7013      	strb	r3, [r2, #0]
 8011372:	e6ce      	b.n	8011112 <_dtoa_r+0x94a>
 8011374:	4b09      	ldr	r3, [pc, #36]	; (801139c <_dtoa_r+0xbd4>)
 8011376:	f7ff ba95 	b.w	80108a4 <_dtoa_r+0xdc>
 801137a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801137c:	2b00      	cmp	r3, #0
 801137e:	f47f aa6e 	bne.w	801085e <_dtoa_r+0x96>
 8011382:	4b07      	ldr	r3, [pc, #28]	; (80113a0 <_dtoa_r+0xbd8>)
 8011384:	f7ff ba8e 	b.w	80108a4 <_dtoa_r+0xdc>
 8011388:	9b02      	ldr	r3, [sp, #8]
 801138a:	2b00      	cmp	r3, #0
 801138c:	dcae      	bgt.n	80112ec <_dtoa_r+0xb24>
 801138e:	9b06      	ldr	r3, [sp, #24]
 8011390:	2b02      	cmp	r3, #2
 8011392:	f73f aea8 	bgt.w	80110e6 <_dtoa_r+0x91e>
 8011396:	e7a9      	b.n	80112ec <_dtoa_r+0xb24>
 8011398:	0801452f 	.word	0x0801452f
 801139c:	0801448c 	.word	0x0801448c
 80113a0:	080144b0 	.word	0x080144b0

080113a4 <_localeconv_r>:
 80113a4:	4800      	ldr	r0, [pc, #0]	; (80113a8 <_localeconv_r+0x4>)
 80113a6:	4770      	bx	lr
 80113a8:	20000174 	.word	0x20000174

080113ac <__malloc_lock>:
 80113ac:	4801      	ldr	r0, [pc, #4]	; (80113b4 <__malloc_lock+0x8>)
 80113ae:	f000 bd30 	b.w	8011e12 <__retarget_lock_acquire_recursive>
 80113b2:	bf00      	nop
 80113b4:	20006360 	.word	0x20006360

080113b8 <__malloc_unlock>:
 80113b8:	4801      	ldr	r0, [pc, #4]	; (80113c0 <__malloc_unlock+0x8>)
 80113ba:	f000 bd2b 	b.w	8011e14 <__retarget_lock_release_recursive>
 80113be:	bf00      	nop
 80113c0:	20006360 	.word	0x20006360

080113c4 <_Balloc>:
 80113c4:	b570      	push	{r4, r5, r6, lr}
 80113c6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80113c8:	4604      	mov	r4, r0
 80113ca:	460d      	mov	r5, r1
 80113cc:	b976      	cbnz	r6, 80113ec <_Balloc+0x28>
 80113ce:	2010      	movs	r0, #16
 80113d0:	f7fe fbd6 	bl	800fb80 <malloc>
 80113d4:	4602      	mov	r2, r0
 80113d6:	6260      	str	r0, [r4, #36]	; 0x24
 80113d8:	b920      	cbnz	r0, 80113e4 <_Balloc+0x20>
 80113da:	4b18      	ldr	r3, [pc, #96]	; (801143c <_Balloc+0x78>)
 80113dc:	4818      	ldr	r0, [pc, #96]	; (8011440 <_Balloc+0x7c>)
 80113de:	2166      	movs	r1, #102	; 0x66
 80113e0:	f000 fce6 	bl	8011db0 <__assert_func>
 80113e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80113e8:	6006      	str	r6, [r0, #0]
 80113ea:	60c6      	str	r6, [r0, #12]
 80113ec:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80113ee:	68f3      	ldr	r3, [r6, #12]
 80113f0:	b183      	cbz	r3, 8011414 <_Balloc+0x50>
 80113f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80113f4:	68db      	ldr	r3, [r3, #12]
 80113f6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80113fa:	b9b8      	cbnz	r0, 801142c <_Balloc+0x68>
 80113fc:	2101      	movs	r1, #1
 80113fe:	fa01 f605 	lsl.w	r6, r1, r5
 8011402:	1d72      	adds	r2, r6, #5
 8011404:	0092      	lsls	r2, r2, #2
 8011406:	4620      	mov	r0, r4
 8011408:	f000 fb60 	bl	8011acc <_calloc_r>
 801140c:	b160      	cbz	r0, 8011428 <_Balloc+0x64>
 801140e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8011412:	e00e      	b.n	8011432 <_Balloc+0x6e>
 8011414:	2221      	movs	r2, #33	; 0x21
 8011416:	2104      	movs	r1, #4
 8011418:	4620      	mov	r0, r4
 801141a:	f000 fb57 	bl	8011acc <_calloc_r>
 801141e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011420:	60f0      	str	r0, [r6, #12]
 8011422:	68db      	ldr	r3, [r3, #12]
 8011424:	2b00      	cmp	r3, #0
 8011426:	d1e4      	bne.n	80113f2 <_Balloc+0x2e>
 8011428:	2000      	movs	r0, #0
 801142a:	bd70      	pop	{r4, r5, r6, pc}
 801142c:	6802      	ldr	r2, [r0, #0]
 801142e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011432:	2300      	movs	r3, #0
 8011434:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011438:	e7f7      	b.n	801142a <_Balloc+0x66>
 801143a:	bf00      	nop
 801143c:	080144bd 	.word	0x080144bd
 8011440:	08014540 	.word	0x08014540

08011444 <_Bfree>:
 8011444:	b570      	push	{r4, r5, r6, lr}
 8011446:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8011448:	4605      	mov	r5, r0
 801144a:	460c      	mov	r4, r1
 801144c:	b976      	cbnz	r6, 801146c <_Bfree+0x28>
 801144e:	2010      	movs	r0, #16
 8011450:	f7fe fb96 	bl	800fb80 <malloc>
 8011454:	4602      	mov	r2, r0
 8011456:	6268      	str	r0, [r5, #36]	; 0x24
 8011458:	b920      	cbnz	r0, 8011464 <_Bfree+0x20>
 801145a:	4b09      	ldr	r3, [pc, #36]	; (8011480 <_Bfree+0x3c>)
 801145c:	4809      	ldr	r0, [pc, #36]	; (8011484 <_Bfree+0x40>)
 801145e:	218a      	movs	r1, #138	; 0x8a
 8011460:	f000 fca6 	bl	8011db0 <__assert_func>
 8011464:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011468:	6006      	str	r6, [r0, #0]
 801146a:	60c6      	str	r6, [r0, #12]
 801146c:	b13c      	cbz	r4, 801147e <_Bfree+0x3a>
 801146e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8011470:	6862      	ldr	r2, [r4, #4]
 8011472:	68db      	ldr	r3, [r3, #12]
 8011474:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011478:	6021      	str	r1, [r4, #0]
 801147a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801147e:	bd70      	pop	{r4, r5, r6, pc}
 8011480:	080144bd 	.word	0x080144bd
 8011484:	08014540 	.word	0x08014540

08011488 <__multadd>:
 8011488:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801148c:	690d      	ldr	r5, [r1, #16]
 801148e:	4607      	mov	r7, r0
 8011490:	460c      	mov	r4, r1
 8011492:	461e      	mov	r6, r3
 8011494:	f101 0c14 	add.w	ip, r1, #20
 8011498:	2000      	movs	r0, #0
 801149a:	f8dc 3000 	ldr.w	r3, [ip]
 801149e:	b299      	uxth	r1, r3
 80114a0:	fb02 6101 	mla	r1, r2, r1, r6
 80114a4:	0c1e      	lsrs	r6, r3, #16
 80114a6:	0c0b      	lsrs	r3, r1, #16
 80114a8:	fb02 3306 	mla	r3, r2, r6, r3
 80114ac:	b289      	uxth	r1, r1
 80114ae:	3001      	adds	r0, #1
 80114b0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80114b4:	4285      	cmp	r5, r0
 80114b6:	f84c 1b04 	str.w	r1, [ip], #4
 80114ba:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80114be:	dcec      	bgt.n	801149a <__multadd+0x12>
 80114c0:	b30e      	cbz	r6, 8011506 <__multadd+0x7e>
 80114c2:	68a3      	ldr	r3, [r4, #8]
 80114c4:	42ab      	cmp	r3, r5
 80114c6:	dc19      	bgt.n	80114fc <__multadd+0x74>
 80114c8:	6861      	ldr	r1, [r4, #4]
 80114ca:	4638      	mov	r0, r7
 80114cc:	3101      	adds	r1, #1
 80114ce:	f7ff ff79 	bl	80113c4 <_Balloc>
 80114d2:	4680      	mov	r8, r0
 80114d4:	b928      	cbnz	r0, 80114e2 <__multadd+0x5a>
 80114d6:	4602      	mov	r2, r0
 80114d8:	4b0c      	ldr	r3, [pc, #48]	; (801150c <__multadd+0x84>)
 80114da:	480d      	ldr	r0, [pc, #52]	; (8011510 <__multadd+0x88>)
 80114dc:	21b5      	movs	r1, #181	; 0xb5
 80114de:	f000 fc67 	bl	8011db0 <__assert_func>
 80114e2:	6922      	ldr	r2, [r4, #16]
 80114e4:	3202      	adds	r2, #2
 80114e6:	f104 010c 	add.w	r1, r4, #12
 80114ea:	0092      	lsls	r2, r2, #2
 80114ec:	300c      	adds	r0, #12
 80114ee:	f7fe fb4f 	bl	800fb90 <memcpy>
 80114f2:	4621      	mov	r1, r4
 80114f4:	4638      	mov	r0, r7
 80114f6:	f7ff ffa5 	bl	8011444 <_Bfree>
 80114fa:	4644      	mov	r4, r8
 80114fc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8011500:	3501      	adds	r5, #1
 8011502:	615e      	str	r6, [r3, #20]
 8011504:	6125      	str	r5, [r4, #16]
 8011506:	4620      	mov	r0, r4
 8011508:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801150c:	0801452f 	.word	0x0801452f
 8011510:	08014540 	.word	0x08014540

08011514 <__hi0bits>:
 8011514:	0c03      	lsrs	r3, r0, #16
 8011516:	041b      	lsls	r3, r3, #16
 8011518:	b9d3      	cbnz	r3, 8011550 <__hi0bits+0x3c>
 801151a:	0400      	lsls	r0, r0, #16
 801151c:	2310      	movs	r3, #16
 801151e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8011522:	bf04      	itt	eq
 8011524:	0200      	lsleq	r0, r0, #8
 8011526:	3308      	addeq	r3, #8
 8011528:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801152c:	bf04      	itt	eq
 801152e:	0100      	lsleq	r0, r0, #4
 8011530:	3304      	addeq	r3, #4
 8011532:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8011536:	bf04      	itt	eq
 8011538:	0080      	lsleq	r0, r0, #2
 801153a:	3302      	addeq	r3, #2
 801153c:	2800      	cmp	r0, #0
 801153e:	db05      	blt.n	801154c <__hi0bits+0x38>
 8011540:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8011544:	f103 0301 	add.w	r3, r3, #1
 8011548:	bf08      	it	eq
 801154a:	2320      	moveq	r3, #32
 801154c:	4618      	mov	r0, r3
 801154e:	4770      	bx	lr
 8011550:	2300      	movs	r3, #0
 8011552:	e7e4      	b.n	801151e <__hi0bits+0xa>

08011554 <__lo0bits>:
 8011554:	6803      	ldr	r3, [r0, #0]
 8011556:	f013 0207 	ands.w	r2, r3, #7
 801155a:	4601      	mov	r1, r0
 801155c:	d00b      	beq.n	8011576 <__lo0bits+0x22>
 801155e:	07da      	lsls	r2, r3, #31
 8011560:	d423      	bmi.n	80115aa <__lo0bits+0x56>
 8011562:	0798      	lsls	r0, r3, #30
 8011564:	bf49      	itett	mi
 8011566:	085b      	lsrmi	r3, r3, #1
 8011568:	089b      	lsrpl	r3, r3, #2
 801156a:	2001      	movmi	r0, #1
 801156c:	600b      	strmi	r3, [r1, #0]
 801156e:	bf5c      	itt	pl
 8011570:	600b      	strpl	r3, [r1, #0]
 8011572:	2002      	movpl	r0, #2
 8011574:	4770      	bx	lr
 8011576:	b298      	uxth	r0, r3
 8011578:	b9a8      	cbnz	r0, 80115a6 <__lo0bits+0x52>
 801157a:	0c1b      	lsrs	r3, r3, #16
 801157c:	2010      	movs	r0, #16
 801157e:	b2da      	uxtb	r2, r3
 8011580:	b90a      	cbnz	r2, 8011586 <__lo0bits+0x32>
 8011582:	3008      	adds	r0, #8
 8011584:	0a1b      	lsrs	r3, r3, #8
 8011586:	071a      	lsls	r2, r3, #28
 8011588:	bf04      	itt	eq
 801158a:	091b      	lsreq	r3, r3, #4
 801158c:	3004      	addeq	r0, #4
 801158e:	079a      	lsls	r2, r3, #30
 8011590:	bf04      	itt	eq
 8011592:	089b      	lsreq	r3, r3, #2
 8011594:	3002      	addeq	r0, #2
 8011596:	07da      	lsls	r2, r3, #31
 8011598:	d403      	bmi.n	80115a2 <__lo0bits+0x4e>
 801159a:	085b      	lsrs	r3, r3, #1
 801159c:	f100 0001 	add.w	r0, r0, #1
 80115a0:	d005      	beq.n	80115ae <__lo0bits+0x5a>
 80115a2:	600b      	str	r3, [r1, #0]
 80115a4:	4770      	bx	lr
 80115a6:	4610      	mov	r0, r2
 80115a8:	e7e9      	b.n	801157e <__lo0bits+0x2a>
 80115aa:	2000      	movs	r0, #0
 80115ac:	4770      	bx	lr
 80115ae:	2020      	movs	r0, #32
 80115b0:	4770      	bx	lr
	...

080115b4 <__i2b>:
 80115b4:	b510      	push	{r4, lr}
 80115b6:	460c      	mov	r4, r1
 80115b8:	2101      	movs	r1, #1
 80115ba:	f7ff ff03 	bl	80113c4 <_Balloc>
 80115be:	4602      	mov	r2, r0
 80115c0:	b928      	cbnz	r0, 80115ce <__i2b+0x1a>
 80115c2:	4b05      	ldr	r3, [pc, #20]	; (80115d8 <__i2b+0x24>)
 80115c4:	4805      	ldr	r0, [pc, #20]	; (80115dc <__i2b+0x28>)
 80115c6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80115ca:	f000 fbf1 	bl	8011db0 <__assert_func>
 80115ce:	2301      	movs	r3, #1
 80115d0:	6144      	str	r4, [r0, #20]
 80115d2:	6103      	str	r3, [r0, #16]
 80115d4:	bd10      	pop	{r4, pc}
 80115d6:	bf00      	nop
 80115d8:	0801452f 	.word	0x0801452f
 80115dc:	08014540 	.word	0x08014540

080115e0 <__multiply>:
 80115e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80115e4:	4691      	mov	r9, r2
 80115e6:	690a      	ldr	r2, [r1, #16]
 80115e8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80115ec:	429a      	cmp	r2, r3
 80115ee:	bfb8      	it	lt
 80115f0:	460b      	movlt	r3, r1
 80115f2:	460c      	mov	r4, r1
 80115f4:	bfbc      	itt	lt
 80115f6:	464c      	movlt	r4, r9
 80115f8:	4699      	movlt	r9, r3
 80115fa:	6927      	ldr	r7, [r4, #16]
 80115fc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8011600:	68a3      	ldr	r3, [r4, #8]
 8011602:	6861      	ldr	r1, [r4, #4]
 8011604:	eb07 060a 	add.w	r6, r7, sl
 8011608:	42b3      	cmp	r3, r6
 801160a:	b085      	sub	sp, #20
 801160c:	bfb8      	it	lt
 801160e:	3101      	addlt	r1, #1
 8011610:	f7ff fed8 	bl	80113c4 <_Balloc>
 8011614:	b930      	cbnz	r0, 8011624 <__multiply+0x44>
 8011616:	4602      	mov	r2, r0
 8011618:	4b44      	ldr	r3, [pc, #272]	; (801172c <__multiply+0x14c>)
 801161a:	4845      	ldr	r0, [pc, #276]	; (8011730 <__multiply+0x150>)
 801161c:	f240 115d 	movw	r1, #349	; 0x15d
 8011620:	f000 fbc6 	bl	8011db0 <__assert_func>
 8011624:	f100 0514 	add.w	r5, r0, #20
 8011628:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801162c:	462b      	mov	r3, r5
 801162e:	2200      	movs	r2, #0
 8011630:	4543      	cmp	r3, r8
 8011632:	d321      	bcc.n	8011678 <__multiply+0x98>
 8011634:	f104 0314 	add.w	r3, r4, #20
 8011638:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801163c:	f109 0314 	add.w	r3, r9, #20
 8011640:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8011644:	9202      	str	r2, [sp, #8]
 8011646:	1b3a      	subs	r2, r7, r4
 8011648:	3a15      	subs	r2, #21
 801164a:	f022 0203 	bic.w	r2, r2, #3
 801164e:	3204      	adds	r2, #4
 8011650:	f104 0115 	add.w	r1, r4, #21
 8011654:	428f      	cmp	r7, r1
 8011656:	bf38      	it	cc
 8011658:	2204      	movcc	r2, #4
 801165a:	9201      	str	r2, [sp, #4]
 801165c:	9a02      	ldr	r2, [sp, #8]
 801165e:	9303      	str	r3, [sp, #12]
 8011660:	429a      	cmp	r2, r3
 8011662:	d80c      	bhi.n	801167e <__multiply+0x9e>
 8011664:	2e00      	cmp	r6, #0
 8011666:	dd03      	ble.n	8011670 <__multiply+0x90>
 8011668:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801166c:	2b00      	cmp	r3, #0
 801166e:	d05a      	beq.n	8011726 <__multiply+0x146>
 8011670:	6106      	str	r6, [r0, #16]
 8011672:	b005      	add	sp, #20
 8011674:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011678:	f843 2b04 	str.w	r2, [r3], #4
 801167c:	e7d8      	b.n	8011630 <__multiply+0x50>
 801167e:	f8b3 a000 	ldrh.w	sl, [r3]
 8011682:	f1ba 0f00 	cmp.w	sl, #0
 8011686:	d024      	beq.n	80116d2 <__multiply+0xf2>
 8011688:	f104 0e14 	add.w	lr, r4, #20
 801168c:	46a9      	mov	r9, r5
 801168e:	f04f 0c00 	mov.w	ip, #0
 8011692:	f85e 2b04 	ldr.w	r2, [lr], #4
 8011696:	f8d9 1000 	ldr.w	r1, [r9]
 801169a:	fa1f fb82 	uxth.w	fp, r2
 801169e:	b289      	uxth	r1, r1
 80116a0:	fb0a 110b 	mla	r1, sl, fp, r1
 80116a4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80116a8:	f8d9 2000 	ldr.w	r2, [r9]
 80116ac:	4461      	add	r1, ip
 80116ae:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80116b2:	fb0a c20b 	mla	r2, sl, fp, ip
 80116b6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80116ba:	b289      	uxth	r1, r1
 80116bc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80116c0:	4577      	cmp	r7, lr
 80116c2:	f849 1b04 	str.w	r1, [r9], #4
 80116c6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80116ca:	d8e2      	bhi.n	8011692 <__multiply+0xb2>
 80116cc:	9a01      	ldr	r2, [sp, #4]
 80116ce:	f845 c002 	str.w	ip, [r5, r2]
 80116d2:	9a03      	ldr	r2, [sp, #12]
 80116d4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80116d8:	3304      	adds	r3, #4
 80116da:	f1b9 0f00 	cmp.w	r9, #0
 80116de:	d020      	beq.n	8011722 <__multiply+0x142>
 80116e0:	6829      	ldr	r1, [r5, #0]
 80116e2:	f104 0c14 	add.w	ip, r4, #20
 80116e6:	46ae      	mov	lr, r5
 80116e8:	f04f 0a00 	mov.w	sl, #0
 80116ec:	f8bc b000 	ldrh.w	fp, [ip]
 80116f0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80116f4:	fb09 220b 	mla	r2, r9, fp, r2
 80116f8:	4492      	add	sl, r2
 80116fa:	b289      	uxth	r1, r1
 80116fc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8011700:	f84e 1b04 	str.w	r1, [lr], #4
 8011704:	f85c 2b04 	ldr.w	r2, [ip], #4
 8011708:	f8be 1000 	ldrh.w	r1, [lr]
 801170c:	0c12      	lsrs	r2, r2, #16
 801170e:	fb09 1102 	mla	r1, r9, r2, r1
 8011712:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8011716:	4567      	cmp	r7, ip
 8011718:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801171c:	d8e6      	bhi.n	80116ec <__multiply+0x10c>
 801171e:	9a01      	ldr	r2, [sp, #4]
 8011720:	50a9      	str	r1, [r5, r2]
 8011722:	3504      	adds	r5, #4
 8011724:	e79a      	b.n	801165c <__multiply+0x7c>
 8011726:	3e01      	subs	r6, #1
 8011728:	e79c      	b.n	8011664 <__multiply+0x84>
 801172a:	bf00      	nop
 801172c:	0801452f 	.word	0x0801452f
 8011730:	08014540 	.word	0x08014540

08011734 <__pow5mult>:
 8011734:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011738:	4615      	mov	r5, r2
 801173a:	f012 0203 	ands.w	r2, r2, #3
 801173e:	4606      	mov	r6, r0
 8011740:	460f      	mov	r7, r1
 8011742:	d007      	beq.n	8011754 <__pow5mult+0x20>
 8011744:	4c25      	ldr	r4, [pc, #148]	; (80117dc <__pow5mult+0xa8>)
 8011746:	3a01      	subs	r2, #1
 8011748:	2300      	movs	r3, #0
 801174a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801174e:	f7ff fe9b 	bl	8011488 <__multadd>
 8011752:	4607      	mov	r7, r0
 8011754:	10ad      	asrs	r5, r5, #2
 8011756:	d03d      	beq.n	80117d4 <__pow5mult+0xa0>
 8011758:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801175a:	b97c      	cbnz	r4, 801177c <__pow5mult+0x48>
 801175c:	2010      	movs	r0, #16
 801175e:	f7fe fa0f 	bl	800fb80 <malloc>
 8011762:	4602      	mov	r2, r0
 8011764:	6270      	str	r0, [r6, #36]	; 0x24
 8011766:	b928      	cbnz	r0, 8011774 <__pow5mult+0x40>
 8011768:	4b1d      	ldr	r3, [pc, #116]	; (80117e0 <__pow5mult+0xac>)
 801176a:	481e      	ldr	r0, [pc, #120]	; (80117e4 <__pow5mult+0xb0>)
 801176c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8011770:	f000 fb1e 	bl	8011db0 <__assert_func>
 8011774:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011778:	6004      	str	r4, [r0, #0]
 801177a:	60c4      	str	r4, [r0, #12]
 801177c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8011780:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011784:	b94c      	cbnz	r4, 801179a <__pow5mult+0x66>
 8011786:	f240 2171 	movw	r1, #625	; 0x271
 801178a:	4630      	mov	r0, r6
 801178c:	f7ff ff12 	bl	80115b4 <__i2b>
 8011790:	2300      	movs	r3, #0
 8011792:	f8c8 0008 	str.w	r0, [r8, #8]
 8011796:	4604      	mov	r4, r0
 8011798:	6003      	str	r3, [r0, #0]
 801179a:	f04f 0900 	mov.w	r9, #0
 801179e:	07eb      	lsls	r3, r5, #31
 80117a0:	d50a      	bpl.n	80117b8 <__pow5mult+0x84>
 80117a2:	4639      	mov	r1, r7
 80117a4:	4622      	mov	r2, r4
 80117a6:	4630      	mov	r0, r6
 80117a8:	f7ff ff1a 	bl	80115e0 <__multiply>
 80117ac:	4639      	mov	r1, r7
 80117ae:	4680      	mov	r8, r0
 80117b0:	4630      	mov	r0, r6
 80117b2:	f7ff fe47 	bl	8011444 <_Bfree>
 80117b6:	4647      	mov	r7, r8
 80117b8:	106d      	asrs	r5, r5, #1
 80117ba:	d00b      	beq.n	80117d4 <__pow5mult+0xa0>
 80117bc:	6820      	ldr	r0, [r4, #0]
 80117be:	b938      	cbnz	r0, 80117d0 <__pow5mult+0x9c>
 80117c0:	4622      	mov	r2, r4
 80117c2:	4621      	mov	r1, r4
 80117c4:	4630      	mov	r0, r6
 80117c6:	f7ff ff0b 	bl	80115e0 <__multiply>
 80117ca:	6020      	str	r0, [r4, #0]
 80117cc:	f8c0 9000 	str.w	r9, [r0]
 80117d0:	4604      	mov	r4, r0
 80117d2:	e7e4      	b.n	801179e <__pow5mult+0x6a>
 80117d4:	4638      	mov	r0, r7
 80117d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80117da:	bf00      	nop
 80117dc:	08014690 	.word	0x08014690
 80117e0:	080144bd 	.word	0x080144bd
 80117e4:	08014540 	.word	0x08014540

080117e8 <__lshift>:
 80117e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80117ec:	460c      	mov	r4, r1
 80117ee:	6849      	ldr	r1, [r1, #4]
 80117f0:	6923      	ldr	r3, [r4, #16]
 80117f2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80117f6:	68a3      	ldr	r3, [r4, #8]
 80117f8:	4607      	mov	r7, r0
 80117fa:	4691      	mov	r9, r2
 80117fc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011800:	f108 0601 	add.w	r6, r8, #1
 8011804:	42b3      	cmp	r3, r6
 8011806:	db0b      	blt.n	8011820 <__lshift+0x38>
 8011808:	4638      	mov	r0, r7
 801180a:	f7ff fddb 	bl	80113c4 <_Balloc>
 801180e:	4605      	mov	r5, r0
 8011810:	b948      	cbnz	r0, 8011826 <__lshift+0x3e>
 8011812:	4602      	mov	r2, r0
 8011814:	4b2a      	ldr	r3, [pc, #168]	; (80118c0 <__lshift+0xd8>)
 8011816:	482b      	ldr	r0, [pc, #172]	; (80118c4 <__lshift+0xdc>)
 8011818:	f240 11d9 	movw	r1, #473	; 0x1d9
 801181c:	f000 fac8 	bl	8011db0 <__assert_func>
 8011820:	3101      	adds	r1, #1
 8011822:	005b      	lsls	r3, r3, #1
 8011824:	e7ee      	b.n	8011804 <__lshift+0x1c>
 8011826:	2300      	movs	r3, #0
 8011828:	f100 0114 	add.w	r1, r0, #20
 801182c:	f100 0210 	add.w	r2, r0, #16
 8011830:	4618      	mov	r0, r3
 8011832:	4553      	cmp	r3, sl
 8011834:	db37      	blt.n	80118a6 <__lshift+0xbe>
 8011836:	6920      	ldr	r0, [r4, #16]
 8011838:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801183c:	f104 0314 	add.w	r3, r4, #20
 8011840:	f019 091f 	ands.w	r9, r9, #31
 8011844:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011848:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801184c:	d02f      	beq.n	80118ae <__lshift+0xc6>
 801184e:	f1c9 0e20 	rsb	lr, r9, #32
 8011852:	468a      	mov	sl, r1
 8011854:	f04f 0c00 	mov.w	ip, #0
 8011858:	681a      	ldr	r2, [r3, #0]
 801185a:	fa02 f209 	lsl.w	r2, r2, r9
 801185e:	ea42 020c 	orr.w	r2, r2, ip
 8011862:	f84a 2b04 	str.w	r2, [sl], #4
 8011866:	f853 2b04 	ldr.w	r2, [r3], #4
 801186a:	4298      	cmp	r0, r3
 801186c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8011870:	d8f2      	bhi.n	8011858 <__lshift+0x70>
 8011872:	1b03      	subs	r3, r0, r4
 8011874:	3b15      	subs	r3, #21
 8011876:	f023 0303 	bic.w	r3, r3, #3
 801187a:	3304      	adds	r3, #4
 801187c:	f104 0215 	add.w	r2, r4, #21
 8011880:	4290      	cmp	r0, r2
 8011882:	bf38      	it	cc
 8011884:	2304      	movcc	r3, #4
 8011886:	f841 c003 	str.w	ip, [r1, r3]
 801188a:	f1bc 0f00 	cmp.w	ip, #0
 801188e:	d001      	beq.n	8011894 <__lshift+0xac>
 8011890:	f108 0602 	add.w	r6, r8, #2
 8011894:	3e01      	subs	r6, #1
 8011896:	4638      	mov	r0, r7
 8011898:	612e      	str	r6, [r5, #16]
 801189a:	4621      	mov	r1, r4
 801189c:	f7ff fdd2 	bl	8011444 <_Bfree>
 80118a0:	4628      	mov	r0, r5
 80118a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80118a6:	f842 0f04 	str.w	r0, [r2, #4]!
 80118aa:	3301      	adds	r3, #1
 80118ac:	e7c1      	b.n	8011832 <__lshift+0x4a>
 80118ae:	3904      	subs	r1, #4
 80118b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80118b4:	f841 2f04 	str.w	r2, [r1, #4]!
 80118b8:	4298      	cmp	r0, r3
 80118ba:	d8f9      	bhi.n	80118b0 <__lshift+0xc8>
 80118bc:	e7ea      	b.n	8011894 <__lshift+0xac>
 80118be:	bf00      	nop
 80118c0:	0801452f 	.word	0x0801452f
 80118c4:	08014540 	.word	0x08014540

080118c8 <__mcmp>:
 80118c8:	b530      	push	{r4, r5, lr}
 80118ca:	6902      	ldr	r2, [r0, #16]
 80118cc:	690c      	ldr	r4, [r1, #16]
 80118ce:	1b12      	subs	r2, r2, r4
 80118d0:	d10e      	bne.n	80118f0 <__mcmp+0x28>
 80118d2:	f100 0314 	add.w	r3, r0, #20
 80118d6:	3114      	adds	r1, #20
 80118d8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80118dc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80118e0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80118e4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80118e8:	42a5      	cmp	r5, r4
 80118ea:	d003      	beq.n	80118f4 <__mcmp+0x2c>
 80118ec:	d305      	bcc.n	80118fa <__mcmp+0x32>
 80118ee:	2201      	movs	r2, #1
 80118f0:	4610      	mov	r0, r2
 80118f2:	bd30      	pop	{r4, r5, pc}
 80118f4:	4283      	cmp	r3, r0
 80118f6:	d3f3      	bcc.n	80118e0 <__mcmp+0x18>
 80118f8:	e7fa      	b.n	80118f0 <__mcmp+0x28>
 80118fa:	f04f 32ff 	mov.w	r2, #4294967295
 80118fe:	e7f7      	b.n	80118f0 <__mcmp+0x28>

08011900 <__mdiff>:
 8011900:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011904:	460c      	mov	r4, r1
 8011906:	4606      	mov	r6, r0
 8011908:	4611      	mov	r1, r2
 801190a:	4620      	mov	r0, r4
 801190c:	4690      	mov	r8, r2
 801190e:	f7ff ffdb 	bl	80118c8 <__mcmp>
 8011912:	1e05      	subs	r5, r0, #0
 8011914:	d110      	bne.n	8011938 <__mdiff+0x38>
 8011916:	4629      	mov	r1, r5
 8011918:	4630      	mov	r0, r6
 801191a:	f7ff fd53 	bl	80113c4 <_Balloc>
 801191e:	b930      	cbnz	r0, 801192e <__mdiff+0x2e>
 8011920:	4b3a      	ldr	r3, [pc, #232]	; (8011a0c <__mdiff+0x10c>)
 8011922:	4602      	mov	r2, r0
 8011924:	f240 2132 	movw	r1, #562	; 0x232
 8011928:	4839      	ldr	r0, [pc, #228]	; (8011a10 <__mdiff+0x110>)
 801192a:	f000 fa41 	bl	8011db0 <__assert_func>
 801192e:	2301      	movs	r3, #1
 8011930:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011934:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011938:	bfa4      	itt	ge
 801193a:	4643      	movge	r3, r8
 801193c:	46a0      	movge	r8, r4
 801193e:	4630      	mov	r0, r6
 8011940:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8011944:	bfa6      	itte	ge
 8011946:	461c      	movge	r4, r3
 8011948:	2500      	movge	r5, #0
 801194a:	2501      	movlt	r5, #1
 801194c:	f7ff fd3a 	bl	80113c4 <_Balloc>
 8011950:	b920      	cbnz	r0, 801195c <__mdiff+0x5c>
 8011952:	4b2e      	ldr	r3, [pc, #184]	; (8011a0c <__mdiff+0x10c>)
 8011954:	4602      	mov	r2, r0
 8011956:	f44f 7110 	mov.w	r1, #576	; 0x240
 801195a:	e7e5      	b.n	8011928 <__mdiff+0x28>
 801195c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8011960:	6926      	ldr	r6, [r4, #16]
 8011962:	60c5      	str	r5, [r0, #12]
 8011964:	f104 0914 	add.w	r9, r4, #20
 8011968:	f108 0514 	add.w	r5, r8, #20
 801196c:	f100 0e14 	add.w	lr, r0, #20
 8011970:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8011974:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8011978:	f108 0210 	add.w	r2, r8, #16
 801197c:	46f2      	mov	sl, lr
 801197e:	2100      	movs	r1, #0
 8011980:	f859 3b04 	ldr.w	r3, [r9], #4
 8011984:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8011988:	fa1f f883 	uxth.w	r8, r3
 801198c:	fa11 f18b 	uxtah	r1, r1, fp
 8011990:	0c1b      	lsrs	r3, r3, #16
 8011992:	eba1 0808 	sub.w	r8, r1, r8
 8011996:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801199a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801199e:	fa1f f888 	uxth.w	r8, r8
 80119a2:	1419      	asrs	r1, r3, #16
 80119a4:	454e      	cmp	r6, r9
 80119a6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80119aa:	f84a 3b04 	str.w	r3, [sl], #4
 80119ae:	d8e7      	bhi.n	8011980 <__mdiff+0x80>
 80119b0:	1b33      	subs	r3, r6, r4
 80119b2:	3b15      	subs	r3, #21
 80119b4:	f023 0303 	bic.w	r3, r3, #3
 80119b8:	3304      	adds	r3, #4
 80119ba:	3415      	adds	r4, #21
 80119bc:	42a6      	cmp	r6, r4
 80119be:	bf38      	it	cc
 80119c0:	2304      	movcc	r3, #4
 80119c2:	441d      	add	r5, r3
 80119c4:	4473      	add	r3, lr
 80119c6:	469e      	mov	lr, r3
 80119c8:	462e      	mov	r6, r5
 80119ca:	4566      	cmp	r6, ip
 80119cc:	d30e      	bcc.n	80119ec <__mdiff+0xec>
 80119ce:	f10c 0203 	add.w	r2, ip, #3
 80119d2:	1b52      	subs	r2, r2, r5
 80119d4:	f022 0203 	bic.w	r2, r2, #3
 80119d8:	3d03      	subs	r5, #3
 80119da:	45ac      	cmp	ip, r5
 80119dc:	bf38      	it	cc
 80119de:	2200      	movcc	r2, #0
 80119e0:	441a      	add	r2, r3
 80119e2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80119e6:	b17b      	cbz	r3, 8011a08 <__mdiff+0x108>
 80119e8:	6107      	str	r7, [r0, #16]
 80119ea:	e7a3      	b.n	8011934 <__mdiff+0x34>
 80119ec:	f856 8b04 	ldr.w	r8, [r6], #4
 80119f0:	fa11 f288 	uxtah	r2, r1, r8
 80119f4:	1414      	asrs	r4, r2, #16
 80119f6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80119fa:	b292      	uxth	r2, r2
 80119fc:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8011a00:	f84e 2b04 	str.w	r2, [lr], #4
 8011a04:	1421      	asrs	r1, r4, #16
 8011a06:	e7e0      	b.n	80119ca <__mdiff+0xca>
 8011a08:	3f01      	subs	r7, #1
 8011a0a:	e7ea      	b.n	80119e2 <__mdiff+0xe2>
 8011a0c:	0801452f 	.word	0x0801452f
 8011a10:	08014540 	.word	0x08014540

08011a14 <__d2b>:
 8011a14:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011a18:	4689      	mov	r9, r1
 8011a1a:	2101      	movs	r1, #1
 8011a1c:	ec57 6b10 	vmov	r6, r7, d0
 8011a20:	4690      	mov	r8, r2
 8011a22:	f7ff fccf 	bl	80113c4 <_Balloc>
 8011a26:	4604      	mov	r4, r0
 8011a28:	b930      	cbnz	r0, 8011a38 <__d2b+0x24>
 8011a2a:	4602      	mov	r2, r0
 8011a2c:	4b25      	ldr	r3, [pc, #148]	; (8011ac4 <__d2b+0xb0>)
 8011a2e:	4826      	ldr	r0, [pc, #152]	; (8011ac8 <__d2b+0xb4>)
 8011a30:	f240 310a 	movw	r1, #778	; 0x30a
 8011a34:	f000 f9bc 	bl	8011db0 <__assert_func>
 8011a38:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8011a3c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8011a40:	bb35      	cbnz	r5, 8011a90 <__d2b+0x7c>
 8011a42:	2e00      	cmp	r6, #0
 8011a44:	9301      	str	r3, [sp, #4]
 8011a46:	d028      	beq.n	8011a9a <__d2b+0x86>
 8011a48:	4668      	mov	r0, sp
 8011a4a:	9600      	str	r6, [sp, #0]
 8011a4c:	f7ff fd82 	bl	8011554 <__lo0bits>
 8011a50:	9900      	ldr	r1, [sp, #0]
 8011a52:	b300      	cbz	r0, 8011a96 <__d2b+0x82>
 8011a54:	9a01      	ldr	r2, [sp, #4]
 8011a56:	f1c0 0320 	rsb	r3, r0, #32
 8011a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8011a5e:	430b      	orrs	r3, r1
 8011a60:	40c2      	lsrs	r2, r0
 8011a62:	6163      	str	r3, [r4, #20]
 8011a64:	9201      	str	r2, [sp, #4]
 8011a66:	9b01      	ldr	r3, [sp, #4]
 8011a68:	61a3      	str	r3, [r4, #24]
 8011a6a:	2b00      	cmp	r3, #0
 8011a6c:	bf14      	ite	ne
 8011a6e:	2202      	movne	r2, #2
 8011a70:	2201      	moveq	r2, #1
 8011a72:	6122      	str	r2, [r4, #16]
 8011a74:	b1d5      	cbz	r5, 8011aac <__d2b+0x98>
 8011a76:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8011a7a:	4405      	add	r5, r0
 8011a7c:	f8c9 5000 	str.w	r5, [r9]
 8011a80:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8011a84:	f8c8 0000 	str.w	r0, [r8]
 8011a88:	4620      	mov	r0, r4
 8011a8a:	b003      	add	sp, #12
 8011a8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011a90:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011a94:	e7d5      	b.n	8011a42 <__d2b+0x2e>
 8011a96:	6161      	str	r1, [r4, #20]
 8011a98:	e7e5      	b.n	8011a66 <__d2b+0x52>
 8011a9a:	a801      	add	r0, sp, #4
 8011a9c:	f7ff fd5a 	bl	8011554 <__lo0bits>
 8011aa0:	9b01      	ldr	r3, [sp, #4]
 8011aa2:	6163      	str	r3, [r4, #20]
 8011aa4:	2201      	movs	r2, #1
 8011aa6:	6122      	str	r2, [r4, #16]
 8011aa8:	3020      	adds	r0, #32
 8011aaa:	e7e3      	b.n	8011a74 <__d2b+0x60>
 8011aac:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011ab0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8011ab4:	f8c9 0000 	str.w	r0, [r9]
 8011ab8:	6918      	ldr	r0, [r3, #16]
 8011aba:	f7ff fd2b 	bl	8011514 <__hi0bits>
 8011abe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011ac2:	e7df      	b.n	8011a84 <__d2b+0x70>
 8011ac4:	0801452f 	.word	0x0801452f
 8011ac8:	08014540 	.word	0x08014540

08011acc <_calloc_r>:
 8011acc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011ace:	fba1 2402 	umull	r2, r4, r1, r2
 8011ad2:	b94c      	cbnz	r4, 8011ae8 <_calloc_r+0x1c>
 8011ad4:	4611      	mov	r1, r2
 8011ad6:	9201      	str	r2, [sp, #4]
 8011ad8:	f7fe f8dc 	bl	800fc94 <_malloc_r>
 8011adc:	9a01      	ldr	r2, [sp, #4]
 8011ade:	4605      	mov	r5, r0
 8011ae0:	b930      	cbnz	r0, 8011af0 <_calloc_r+0x24>
 8011ae2:	4628      	mov	r0, r5
 8011ae4:	b003      	add	sp, #12
 8011ae6:	bd30      	pop	{r4, r5, pc}
 8011ae8:	220c      	movs	r2, #12
 8011aea:	6002      	str	r2, [r0, #0]
 8011aec:	2500      	movs	r5, #0
 8011aee:	e7f8      	b.n	8011ae2 <_calloc_r+0x16>
 8011af0:	4621      	mov	r1, r4
 8011af2:	f7fe f85b 	bl	800fbac <memset>
 8011af6:	e7f4      	b.n	8011ae2 <_calloc_r+0x16>

08011af8 <__ssputs_r>:
 8011af8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011afc:	688e      	ldr	r6, [r1, #8]
 8011afe:	429e      	cmp	r6, r3
 8011b00:	4682      	mov	sl, r0
 8011b02:	460c      	mov	r4, r1
 8011b04:	4690      	mov	r8, r2
 8011b06:	461f      	mov	r7, r3
 8011b08:	d838      	bhi.n	8011b7c <__ssputs_r+0x84>
 8011b0a:	898a      	ldrh	r2, [r1, #12]
 8011b0c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011b10:	d032      	beq.n	8011b78 <__ssputs_r+0x80>
 8011b12:	6825      	ldr	r5, [r4, #0]
 8011b14:	6909      	ldr	r1, [r1, #16]
 8011b16:	eba5 0901 	sub.w	r9, r5, r1
 8011b1a:	6965      	ldr	r5, [r4, #20]
 8011b1c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011b20:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011b24:	3301      	adds	r3, #1
 8011b26:	444b      	add	r3, r9
 8011b28:	106d      	asrs	r5, r5, #1
 8011b2a:	429d      	cmp	r5, r3
 8011b2c:	bf38      	it	cc
 8011b2e:	461d      	movcc	r5, r3
 8011b30:	0553      	lsls	r3, r2, #21
 8011b32:	d531      	bpl.n	8011b98 <__ssputs_r+0xa0>
 8011b34:	4629      	mov	r1, r5
 8011b36:	f7fe f8ad 	bl	800fc94 <_malloc_r>
 8011b3a:	4606      	mov	r6, r0
 8011b3c:	b950      	cbnz	r0, 8011b54 <__ssputs_r+0x5c>
 8011b3e:	230c      	movs	r3, #12
 8011b40:	f8ca 3000 	str.w	r3, [sl]
 8011b44:	89a3      	ldrh	r3, [r4, #12]
 8011b46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011b4a:	81a3      	strh	r3, [r4, #12]
 8011b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8011b50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011b54:	6921      	ldr	r1, [r4, #16]
 8011b56:	464a      	mov	r2, r9
 8011b58:	f7fe f81a 	bl	800fb90 <memcpy>
 8011b5c:	89a3      	ldrh	r3, [r4, #12]
 8011b5e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8011b62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011b66:	81a3      	strh	r3, [r4, #12]
 8011b68:	6126      	str	r6, [r4, #16]
 8011b6a:	6165      	str	r5, [r4, #20]
 8011b6c:	444e      	add	r6, r9
 8011b6e:	eba5 0509 	sub.w	r5, r5, r9
 8011b72:	6026      	str	r6, [r4, #0]
 8011b74:	60a5      	str	r5, [r4, #8]
 8011b76:	463e      	mov	r6, r7
 8011b78:	42be      	cmp	r6, r7
 8011b7a:	d900      	bls.n	8011b7e <__ssputs_r+0x86>
 8011b7c:	463e      	mov	r6, r7
 8011b7e:	6820      	ldr	r0, [r4, #0]
 8011b80:	4632      	mov	r2, r6
 8011b82:	4641      	mov	r1, r8
 8011b84:	f000 f959 	bl	8011e3a <memmove>
 8011b88:	68a3      	ldr	r3, [r4, #8]
 8011b8a:	1b9b      	subs	r3, r3, r6
 8011b8c:	60a3      	str	r3, [r4, #8]
 8011b8e:	6823      	ldr	r3, [r4, #0]
 8011b90:	4433      	add	r3, r6
 8011b92:	6023      	str	r3, [r4, #0]
 8011b94:	2000      	movs	r0, #0
 8011b96:	e7db      	b.n	8011b50 <__ssputs_r+0x58>
 8011b98:	462a      	mov	r2, r5
 8011b9a:	f000 f968 	bl	8011e6e <_realloc_r>
 8011b9e:	4606      	mov	r6, r0
 8011ba0:	2800      	cmp	r0, #0
 8011ba2:	d1e1      	bne.n	8011b68 <__ssputs_r+0x70>
 8011ba4:	6921      	ldr	r1, [r4, #16]
 8011ba6:	4650      	mov	r0, sl
 8011ba8:	f7fe f808 	bl	800fbbc <_free_r>
 8011bac:	e7c7      	b.n	8011b3e <__ssputs_r+0x46>
	...

08011bb0 <_svfiprintf_r>:
 8011bb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011bb4:	4698      	mov	r8, r3
 8011bb6:	898b      	ldrh	r3, [r1, #12]
 8011bb8:	061b      	lsls	r3, r3, #24
 8011bba:	b09d      	sub	sp, #116	; 0x74
 8011bbc:	4607      	mov	r7, r0
 8011bbe:	460d      	mov	r5, r1
 8011bc0:	4614      	mov	r4, r2
 8011bc2:	d50e      	bpl.n	8011be2 <_svfiprintf_r+0x32>
 8011bc4:	690b      	ldr	r3, [r1, #16]
 8011bc6:	b963      	cbnz	r3, 8011be2 <_svfiprintf_r+0x32>
 8011bc8:	2140      	movs	r1, #64	; 0x40
 8011bca:	f7fe f863 	bl	800fc94 <_malloc_r>
 8011bce:	6028      	str	r0, [r5, #0]
 8011bd0:	6128      	str	r0, [r5, #16]
 8011bd2:	b920      	cbnz	r0, 8011bde <_svfiprintf_r+0x2e>
 8011bd4:	230c      	movs	r3, #12
 8011bd6:	603b      	str	r3, [r7, #0]
 8011bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8011bdc:	e0d1      	b.n	8011d82 <_svfiprintf_r+0x1d2>
 8011bde:	2340      	movs	r3, #64	; 0x40
 8011be0:	616b      	str	r3, [r5, #20]
 8011be2:	2300      	movs	r3, #0
 8011be4:	9309      	str	r3, [sp, #36]	; 0x24
 8011be6:	2320      	movs	r3, #32
 8011be8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011bec:	f8cd 800c 	str.w	r8, [sp, #12]
 8011bf0:	2330      	movs	r3, #48	; 0x30
 8011bf2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8011d9c <_svfiprintf_r+0x1ec>
 8011bf6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011bfa:	f04f 0901 	mov.w	r9, #1
 8011bfe:	4623      	mov	r3, r4
 8011c00:	469a      	mov	sl, r3
 8011c02:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011c06:	b10a      	cbz	r2, 8011c0c <_svfiprintf_r+0x5c>
 8011c08:	2a25      	cmp	r2, #37	; 0x25
 8011c0a:	d1f9      	bne.n	8011c00 <_svfiprintf_r+0x50>
 8011c0c:	ebba 0b04 	subs.w	fp, sl, r4
 8011c10:	d00b      	beq.n	8011c2a <_svfiprintf_r+0x7a>
 8011c12:	465b      	mov	r3, fp
 8011c14:	4622      	mov	r2, r4
 8011c16:	4629      	mov	r1, r5
 8011c18:	4638      	mov	r0, r7
 8011c1a:	f7ff ff6d 	bl	8011af8 <__ssputs_r>
 8011c1e:	3001      	adds	r0, #1
 8011c20:	f000 80aa 	beq.w	8011d78 <_svfiprintf_r+0x1c8>
 8011c24:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011c26:	445a      	add	r2, fp
 8011c28:	9209      	str	r2, [sp, #36]	; 0x24
 8011c2a:	f89a 3000 	ldrb.w	r3, [sl]
 8011c2e:	2b00      	cmp	r3, #0
 8011c30:	f000 80a2 	beq.w	8011d78 <_svfiprintf_r+0x1c8>
 8011c34:	2300      	movs	r3, #0
 8011c36:	f04f 32ff 	mov.w	r2, #4294967295
 8011c3a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011c3e:	f10a 0a01 	add.w	sl, sl, #1
 8011c42:	9304      	str	r3, [sp, #16]
 8011c44:	9307      	str	r3, [sp, #28]
 8011c46:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011c4a:	931a      	str	r3, [sp, #104]	; 0x68
 8011c4c:	4654      	mov	r4, sl
 8011c4e:	2205      	movs	r2, #5
 8011c50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011c54:	4851      	ldr	r0, [pc, #324]	; (8011d9c <_svfiprintf_r+0x1ec>)
 8011c56:	f7ee fadb 	bl	8000210 <memchr>
 8011c5a:	9a04      	ldr	r2, [sp, #16]
 8011c5c:	b9d8      	cbnz	r0, 8011c96 <_svfiprintf_r+0xe6>
 8011c5e:	06d0      	lsls	r0, r2, #27
 8011c60:	bf44      	itt	mi
 8011c62:	2320      	movmi	r3, #32
 8011c64:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011c68:	0711      	lsls	r1, r2, #28
 8011c6a:	bf44      	itt	mi
 8011c6c:	232b      	movmi	r3, #43	; 0x2b
 8011c6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011c72:	f89a 3000 	ldrb.w	r3, [sl]
 8011c76:	2b2a      	cmp	r3, #42	; 0x2a
 8011c78:	d015      	beq.n	8011ca6 <_svfiprintf_r+0xf6>
 8011c7a:	9a07      	ldr	r2, [sp, #28]
 8011c7c:	4654      	mov	r4, sl
 8011c7e:	2000      	movs	r0, #0
 8011c80:	f04f 0c0a 	mov.w	ip, #10
 8011c84:	4621      	mov	r1, r4
 8011c86:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011c8a:	3b30      	subs	r3, #48	; 0x30
 8011c8c:	2b09      	cmp	r3, #9
 8011c8e:	d94e      	bls.n	8011d2e <_svfiprintf_r+0x17e>
 8011c90:	b1b0      	cbz	r0, 8011cc0 <_svfiprintf_r+0x110>
 8011c92:	9207      	str	r2, [sp, #28]
 8011c94:	e014      	b.n	8011cc0 <_svfiprintf_r+0x110>
 8011c96:	eba0 0308 	sub.w	r3, r0, r8
 8011c9a:	fa09 f303 	lsl.w	r3, r9, r3
 8011c9e:	4313      	orrs	r3, r2
 8011ca0:	9304      	str	r3, [sp, #16]
 8011ca2:	46a2      	mov	sl, r4
 8011ca4:	e7d2      	b.n	8011c4c <_svfiprintf_r+0x9c>
 8011ca6:	9b03      	ldr	r3, [sp, #12]
 8011ca8:	1d19      	adds	r1, r3, #4
 8011caa:	681b      	ldr	r3, [r3, #0]
 8011cac:	9103      	str	r1, [sp, #12]
 8011cae:	2b00      	cmp	r3, #0
 8011cb0:	bfbb      	ittet	lt
 8011cb2:	425b      	neglt	r3, r3
 8011cb4:	f042 0202 	orrlt.w	r2, r2, #2
 8011cb8:	9307      	strge	r3, [sp, #28]
 8011cba:	9307      	strlt	r3, [sp, #28]
 8011cbc:	bfb8      	it	lt
 8011cbe:	9204      	strlt	r2, [sp, #16]
 8011cc0:	7823      	ldrb	r3, [r4, #0]
 8011cc2:	2b2e      	cmp	r3, #46	; 0x2e
 8011cc4:	d10c      	bne.n	8011ce0 <_svfiprintf_r+0x130>
 8011cc6:	7863      	ldrb	r3, [r4, #1]
 8011cc8:	2b2a      	cmp	r3, #42	; 0x2a
 8011cca:	d135      	bne.n	8011d38 <_svfiprintf_r+0x188>
 8011ccc:	9b03      	ldr	r3, [sp, #12]
 8011cce:	1d1a      	adds	r2, r3, #4
 8011cd0:	681b      	ldr	r3, [r3, #0]
 8011cd2:	9203      	str	r2, [sp, #12]
 8011cd4:	2b00      	cmp	r3, #0
 8011cd6:	bfb8      	it	lt
 8011cd8:	f04f 33ff 	movlt.w	r3, #4294967295
 8011cdc:	3402      	adds	r4, #2
 8011cde:	9305      	str	r3, [sp, #20]
 8011ce0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8011dac <_svfiprintf_r+0x1fc>
 8011ce4:	7821      	ldrb	r1, [r4, #0]
 8011ce6:	2203      	movs	r2, #3
 8011ce8:	4650      	mov	r0, sl
 8011cea:	f7ee fa91 	bl	8000210 <memchr>
 8011cee:	b140      	cbz	r0, 8011d02 <_svfiprintf_r+0x152>
 8011cf0:	2340      	movs	r3, #64	; 0x40
 8011cf2:	eba0 000a 	sub.w	r0, r0, sl
 8011cf6:	fa03 f000 	lsl.w	r0, r3, r0
 8011cfa:	9b04      	ldr	r3, [sp, #16]
 8011cfc:	4303      	orrs	r3, r0
 8011cfe:	3401      	adds	r4, #1
 8011d00:	9304      	str	r3, [sp, #16]
 8011d02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011d06:	4826      	ldr	r0, [pc, #152]	; (8011da0 <_svfiprintf_r+0x1f0>)
 8011d08:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011d0c:	2206      	movs	r2, #6
 8011d0e:	f7ee fa7f 	bl	8000210 <memchr>
 8011d12:	2800      	cmp	r0, #0
 8011d14:	d038      	beq.n	8011d88 <_svfiprintf_r+0x1d8>
 8011d16:	4b23      	ldr	r3, [pc, #140]	; (8011da4 <_svfiprintf_r+0x1f4>)
 8011d18:	bb1b      	cbnz	r3, 8011d62 <_svfiprintf_r+0x1b2>
 8011d1a:	9b03      	ldr	r3, [sp, #12]
 8011d1c:	3307      	adds	r3, #7
 8011d1e:	f023 0307 	bic.w	r3, r3, #7
 8011d22:	3308      	adds	r3, #8
 8011d24:	9303      	str	r3, [sp, #12]
 8011d26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011d28:	4433      	add	r3, r6
 8011d2a:	9309      	str	r3, [sp, #36]	; 0x24
 8011d2c:	e767      	b.n	8011bfe <_svfiprintf_r+0x4e>
 8011d2e:	fb0c 3202 	mla	r2, ip, r2, r3
 8011d32:	460c      	mov	r4, r1
 8011d34:	2001      	movs	r0, #1
 8011d36:	e7a5      	b.n	8011c84 <_svfiprintf_r+0xd4>
 8011d38:	2300      	movs	r3, #0
 8011d3a:	3401      	adds	r4, #1
 8011d3c:	9305      	str	r3, [sp, #20]
 8011d3e:	4619      	mov	r1, r3
 8011d40:	f04f 0c0a 	mov.w	ip, #10
 8011d44:	4620      	mov	r0, r4
 8011d46:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011d4a:	3a30      	subs	r2, #48	; 0x30
 8011d4c:	2a09      	cmp	r2, #9
 8011d4e:	d903      	bls.n	8011d58 <_svfiprintf_r+0x1a8>
 8011d50:	2b00      	cmp	r3, #0
 8011d52:	d0c5      	beq.n	8011ce0 <_svfiprintf_r+0x130>
 8011d54:	9105      	str	r1, [sp, #20]
 8011d56:	e7c3      	b.n	8011ce0 <_svfiprintf_r+0x130>
 8011d58:	fb0c 2101 	mla	r1, ip, r1, r2
 8011d5c:	4604      	mov	r4, r0
 8011d5e:	2301      	movs	r3, #1
 8011d60:	e7f0      	b.n	8011d44 <_svfiprintf_r+0x194>
 8011d62:	ab03      	add	r3, sp, #12
 8011d64:	9300      	str	r3, [sp, #0]
 8011d66:	462a      	mov	r2, r5
 8011d68:	4b0f      	ldr	r3, [pc, #60]	; (8011da8 <_svfiprintf_r+0x1f8>)
 8011d6a:	a904      	add	r1, sp, #16
 8011d6c:	4638      	mov	r0, r7
 8011d6e:	f7fe f8a5 	bl	800febc <_printf_float>
 8011d72:	1c42      	adds	r2, r0, #1
 8011d74:	4606      	mov	r6, r0
 8011d76:	d1d6      	bne.n	8011d26 <_svfiprintf_r+0x176>
 8011d78:	89ab      	ldrh	r3, [r5, #12]
 8011d7a:	065b      	lsls	r3, r3, #25
 8011d7c:	f53f af2c 	bmi.w	8011bd8 <_svfiprintf_r+0x28>
 8011d80:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011d82:	b01d      	add	sp, #116	; 0x74
 8011d84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d88:	ab03      	add	r3, sp, #12
 8011d8a:	9300      	str	r3, [sp, #0]
 8011d8c:	462a      	mov	r2, r5
 8011d8e:	4b06      	ldr	r3, [pc, #24]	; (8011da8 <_svfiprintf_r+0x1f8>)
 8011d90:	a904      	add	r1, sp, #16
 8011d92:	4638      	mov	r0, r7
 8011d94:	f7fe fb36 	bl	8010404 <_printf_i>
 8011d98:	e7eb      	b.n	8011d72 <_svfiprintf_r+0x1c2>
 8011d9a:	bf00      	nop
 8011d9c:	0801469c 	.word	0x0801469c
 8011da0:	080146a6 	.word	0x080146a6
 8011da4:	0800febd 	.word	0x0800febd
 8011da8:	08011af9 	.word	0x08011af9
 8011dac:	080146a2 	.word	0x080146a2

08011db0 <__assert_func>:
 8011db0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011db2:	4614      	mov	r4, r2
 8011db4:	461a      	mov	r2, r3
 8011db6:	4b09      	ldr	r3, [pc, #36]	; (8011ddc <__assert_func+0x2c>)
 8011db8:	681b      	ldr	r3, [r3, #0]
 8011dba:	4605      	mov	r5, r0
 8011dbc:	68d8      	ldr	r0, [r3, #12]
 8011dbe:	b14c      	cbz	r4, 8011dd4 <__assert_func+0x24>
 8011dc0:	4b07      	ldr	r3, [pc, #28]	; (8011de0 <__assert_func+0x30>)
 8011dc2:	9100      	str	r1, [sp, #0]
 8011dc4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011dc8:	4906      	ldr	r1, [pc, #24]	; (8011de4 <__assert_func+0x34>)
 8011dca:	462b      	mov	r3, r5
 8011dcc:	f000 f80e 	bl	8011dec <fiprintf>
 8011dd0:	f000 faa4 	bl	801231c <abort>
 8011dd4:	4b04      	ldr	r3, [pc, #16]	; (8011de8 <__assert_func+0x38>)
 8011dd6:	461c      	mov	r4, r3
 8011dd8:	e7f3      	b.n	8011dc2 <__assert_func+0x12>
 8011dda:	bf00      	nop
 8011ddc:	20000020 	.word	0x20000020
 8011de0:	080146ad 	.word	0x080146ad
 8011de4:	080146ba 	.word	0x080146ba
 8011de8:	080146e8 	.word	0x080146e8

08011dec <fiprintf>:
 8011dec:	b40e      	push	{r1, r2, r3}
 8011dee:	b503      	push	{r0, r1, lr}
 8011df0:	4601      	mov	r1, r0
 8011df2:	ab03      	add	r3, sp, #12
 8011df4:	4805      	ldr	r0, [pc, #20]	; (8011e0c <fiprintf+0x20>)
 8011df6:	f853 2b04 	ldr.w	r2, [r3], #4
 8011dfa:	6800      	ldr	r0, [r0, #0]
 8011dfc:	9301      	str	r3, [sp, #4]
 8011dfe:	f000 f88f 	bl	8011f20 <_vfiprintf_r>
 8011e02:	b002      	add	sp, #8
 8011e04:	f85d eb04 	ldr.w	lr, [sp], #4
 8011e08:	b003      	add	sp, #12
 8011e0a:	4770      	bx	lr
 8011e0c:	20000020 	.word	0x20000020

08011e10 <__retarget_lock_init_recursive>:
 8011e10:	4770      	bx	lr

08011e12 <__retarget_lock_acquire_recursive>:
 8011e12:	4770      	bx	lr

08011e14 <__retarget_lock_release_recursive>:
 8011e14:	4770      	bx	lr

08011e16 <__ascii_mbtowc>:
 8011e16:	b082      	sub	sp, #8
 8011e18:	b901      	cbnz	r1, 8011e1c <__ascii_mbtowc+0x6>
 8011e1a:	a901      	add	r1, sp, #4
 8011e1c:	b142      	cbz	r2, 8011e30 <__ascii_mbtowc+0x1a>
 8011e1e:	b14b      	cbz	r3, 8011e34 <__ascii_mbtowc+0x1e>
 8011e20:	7813      	ldrb	r3, [r2, #0]
 8011e22:	600b      	str	r3, [r1, #0]
 8011e24:	7812      	ldrb	r2, [r2, #0]
 8011e26:	1e10      	subs	r0, r2, #0
 8011e28:	bf18      	it	ne
 8011e2a:	2001      	movne	r0, #1
 8011e2c:	b002      	add	sp, #8
 8011e2e:	4770      	bx	lr
 8011e30:	4610      	mov	r0, r2
 8011e32:	e7fb      	b.n	8011e2c <__ascii_mbtowc+0x16>
 8011e34:	f06f 0001 	mvn.w	r0, #1
 8011e38:	e7f8      	b.n	8011e2c <__ascii_mbtowc+0x16>

08011e3a <memmove>:
 8011e3a:	4288      	cmp	r0, r1
 8011e3c:	b510      	push	{r4, lr}
 8011e3e:	eb01 0402 	add.w	r4, r1, r2
 8011e42:	d902      	bls.n	8011e4a <memmove+0x10>
 8011e44:	4284      	cmp	r4, r0
 8011e46:	4623      	mov	r3, r4
 8011e48:	d807      	bhi.n	8011e5a <memmove+0x20>
 8011e4a:	1e43      	subs	r3, r0, #1
 8011e4c:	42a1      	cmp	r1, r4
 8011e4e:	d008      	beq.n	8011e62 <memmove+0x28>
 8011e50:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011e54:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011e58:	e7f8      	b.n	8011e4c <memmove+0x12>
 8011e5a:	4402      	add	r2, r0
 8011e5c:	4601      	mov	r1, r0
 8011e5e:	428a      	cmp	r2, r1
 8011e60:	d100      	bne.n	8011e64 <memmove+0x2a>
 8011e62:	bd10      	pop	{r4, pc}
 8011e64:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011e68:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011e6c:	e7f7      	b.n	8011e5e <memmove+0x24>

08011e6e <_realloc_r>:
 8011e6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011e72:	4680      	mov	r8, r0
 8011e74:	4614      	mov	r4, r2
 8011e76:	460e      	mov	r6, r1
 8011e78:	b921      	cbnz	r1, 8011e84 <_realloc_r+0x16>
 8011e7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011e7e:	4611      	mov	r1, r2
 8011e80:	f7fd bf08 	b.w	800fc94 <_malloc_r>
 8011e84:	b92a      	cbnz	r2, 8011e92 <_realloc_r+0x24>
 8011e86:	f7fd fe99 	bl	800fbbc <_free_r>
 8011e8a:	4625      	mov	r5, r4
 8011e8c:	4628      	mov	r0, r5
 8011e8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011e92:	f000 fc67 	bl	8012764 <_malloc_usable_size_r>
 8011e96:	4284      	cmp	r4, r0
 8011e98:	4607      	mov	r7, r0
 8011e9a:	d802      	bhi.n	8011ea2 <_realloc_r+0x34>
 8011e9c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8011ea0:	d812      	bhi.n	8011ec8 <_realloc_r+0x5a>
 8011ea2:	4621      	mov	r1, r4
 8011ea4:	4640      	mov	r0, r8
 8011ea6:	f7fd fef5 	bl	800fc94 <_malloc_r>
 8011eaa:	4605      	mov	r5, r0
 8011eac:	2800      	cmp	r0, #0
 8011eae:	d0ed      	beq.n	8011e8c <_realloc_r+0x1e>
 8011eb0:	42bc      	cmp	r4, r7
 8011eb2:	4622      	mov	r2, r4
 8011eb4:	4631      	mov	r1, r6
 8011eb6:	bf28      	it	cs
 8011eb8:	463a      	movcs	r2, r7
 8011eba:	f7fd fe69 	bl	800fb90 <memcpy>
 8011ebe:	4631      	mov	r1, r6
 8011ec0:	4640      	mov	r0, r8
 8011ec2:	f7fd fe7b 	bl	800fbbc <_free_r>
 8011ec6:	e7e1      	b.n	8011e8c <_realloc_r+0x1e>
 8011ec8:	4635      	mov	r5, r6
 8011eca:	e7df      	b.n	8011e8c <_realloc_r+0x1e>

08011ecc <__sfputc_r>:
 8011ecc:	6893      	ldr	r3, [r2, #8]
 8011ece:	3b01      	subs	r3, #1
 8011ed0:	2b00      	cmp	r3, #0
 8011ed2:	b410      	push	{r4}
 8011ed4:	6093      	str	r3, [r2, #8]
 8011ed6:	da08      	bge.n	8011eea <__sfputc_r+0x1e>
 8011ed8:	6994      	ldr	r4, [r2, #24]
 8011eda:	42a3      	cmp	r3, r4
 8011edc:	db01      	blt.n	8011ee2 <__sfputc_r+0x16>
 8011ede:	290a      	cmp	r1, #10
 8011ee0:	d103      	bne.n	8011eea <__sfputc_r+0x1e>
 8011ee2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011ee6:	f000 b94b 	b.w	8012180 <__swbuf_r>
 8011eea:	6813      	ldr	r3, [r2, #0]
 8011eec:	1c58      	adds	r0, r3, #1
 8011eee:	6010      	str	r0, [r2, #0]
 8011ef0:	7019      	strb	r1, [r3, #0]
 8011ef2:	4608      	mov	r0, r1
 8011ef4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011ef8:	4770      	bx	lr

08011efa <__sfputs_r>:
 8011efa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011efc:	4606      	mov	r6, r0
 8011efe:	460f      	mov	r7, r1
 8011f00:	4614      	mov	r4, r2
 8011f02:	18d5      	adds	r5, r2, r3
 8011f04:	42ac      	cmp	r4, r5
 8011f06:	d101      	bne.n	8011f0c <__sfputs_r+0x12>
 8011f08:	2000      	movs	r0, #0
 8011f0a:	e007      	b.n	8011f1c <__sfputs_r+0x22>
 8011f0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011f10:	463a      	mov	r2, r7
 8011f12:	4630      	mov	r0, r6
 8011f14:	f7ff ffda 	bl	8011ecc <__sfputc_r>
 8011f18:	1c43      	adds	r3, r0, #1
 8011f1a:	d1f3      	bne.n	8011f04 <__sfputs_r+0xa>
 8011f1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011f20 <_vfiprintf_r>:
 8011f20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f24:	460d      	mov	r5, r1
 8011f26:	b09d      	sub	sp, #116	; 0x74
 8011f28:	4614      	mov	r4, r2
 8011f2a:	4698      	mov	r8, r3
 8011f2c:	4606      	mov	r6, r0
 8011f2e:	b118      	cbz	r0, 8011f38 <_vfiprintf_r+0x18>
 8011f30:	6983      	ldr	r3, [r0, #24]
 8011f32:	b90b      	cbnz	r3, 8011f38 <_vfiprintf_r+0x18>
 8011f34:	f000 fb14 	bl	8012560 <__sinit>
 8011f38:	4b89      	ldr	r3, [pc, #548]	; (8012160 <_vfiprintf_r+0x240>)
 8011f3a:	429d      	cmp	r5, r3
 8011f3c:	d11b      	bne.n	8011f76 <_vfiprintf_r+0x56>
 8011f3e:	6875      	ldr	r5, [r6, #4]
 8011f40:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011f42:	07d9      	lsls	r1, r3, #31
 8011f44:	d405      	bmi.n	8011f52 <_vfiprintf_r+0x32>
 8011f46:	89ab      	ldrh	r3, [r5, #12]
 8011f48:	059a      	lsls	r2, r3, #22
 8011f4a:	d402      	bmi.n	8011f52 <_vfiprintf_r+0x32>
 8011f4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011f4e:	f7ff ff60 	bl	8011e12 <__retarget_lock_acquire_recursive>
 8011f52:	89ab      	ldrh	r3, [r5, #12]
 8011f54:	071b      	lsls	r3, r3, #28
 8011f56:	d501      	bpl.n	8011f5c <_vfiprintf_r+0x3c>
 8011f58:	692b      	ldr	r3, [r5, #16]
 8011f5a:	b9eb      	cbnz	r3, 8011f98 <_vfiprintf_r+0x78>
 8011f5c:	4629      	mov	r1, r5
 8011f5e:	4630      	mov	r0, r6
 8011f60:	f000 f96e 	bl	8012240 <__swsetup_r>
 8011f64:	b1c0      	cbz	r0, 8011f98 <_vfiprintf_r+0x78>
 8011f66:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011f68:	07dc      	lsls	r4, r3, #31
 8011f6a:	d50e      	bpl.n	8011f8a <_vfiprintf_r+0x6a>
 8011f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8011f70:	b01d      	add	sp, #116	; 0x74
 8011f72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f76:	4b7b      	ldr	r3, [pc, #492]	; (8012164 <_vfiprintf_r+0x244>)
 8011f78:	429d      	cmp	r5, r3
 8011f7a:	d101      	bne.n	8011f80 <_vfiprintf_r+0x60>
 8011f7c:	68b5      	ldr	r5, [r6, #8]
 8011f7e:	e7df      	b.n	8011f40 <_vfiprintf_r+0x20>
 8011f80:	4b79      	ldr	r3, [pc, #484]	; (8012168 <_vfiprintf_r+0x248>)
 8011f82:	429d      	cmp	r5, r3
 8011f84:	bf08      	it	eq
 8011f86:	68f5      	ldreq	r5, [r6, #12]
 8011f88:	e7da      	b.n	8011f40 <_vfiprintf_r+0x20>
 8011f8a:	89ab      	ldrh	r3, [r5, #12]
 8011f8c:	0598      	lsls	r0, r3, #22
 8011f8e:	d4ed      	bmi.n	8011f6c <_vfiprintf_r+0x4c>
 8011f90:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011f92:	f7ff ff3f 	bl	8011e14 <__retarget_lock_release_recursive>
 8011f96:	e7e9      	b.n	8011f6c <_vfiprintf_r+0x4c>
 8011f98:	2300      	movs	r3, #0
 8011f9a:	9309      	str	r3, [sp, #36]	; 0x24
 8011f9c:	2320      	movs	r3, #32
 8011f9e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011fa2:	f8cd 800c 	str.w	r8, [sp, #12]
 8011fa6:	2330      	movs	r3, #48	; 0x30
 8011fa8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801216c <_vfiprintf_r+0x24c>
 8011fac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011fb0:	f04f 0901 	mov.w	r9, #1
 8011fb4:	4623      	mov	r3, r4
 8011fb6:	469a      	mov	sl, r3
 8011fb8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011fbc:	b10a      	cbz	r2, 8011fc2 <_vfiprintf_r+0xa2>
 8011fbe:	2a25      	cmp	r2, #37	; 0x25
 8011fc0:	d1f9      	bne.n	8011fb6 <_vfiprintf_r+0x96>
 8011fc2:	ebba 0b04 	subs.w	fp, sl, r4
 8011fc6:	d00b      	beq.n	8011fe0 <_vfiprintf_r+0xc0>
 8011fc8:	465b      	mov	r3, fp
 8011fca:	4622      	mov	r2, r4
 8011fcc:	4629      	mov	r1, r5
 8011fce:	4630      	mov	r0, r6
 8011fd0:	f7ff ff93 	bl	8011efa <__sfputs_r>
 8011fd4:	3001      	adds	r0, #1
 8011fd6:	f000 80aa 	beq.w	801212e <_vfiprintf_r+0x20e>
 8011fda:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011fdc:	445a      	add	r2, fp
 8011fde:	9209      	str	r2, [sp, #36]	; 0x24
 8011fe0:	f89a 3000 	ldrb.w	r3, [sl]
 8011fe4:	2b00      	cmp	r3, #0
 8011fe6:	f000 80a2 	beq.w	801212e <_vfiprintf_r+0x20e>
 8011fea:	2300      	movs	r3, #0
 8011fec:	f04f 32ff 	mov.w	r2, #4294967295
 8011ff0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011ff4:	f10a 0a01 	add.w	sl, sl, #1
 8011ff8:	9304      	str	r3, [sp, #16]
 8011ffa:	9307      	str	r3, [sp, #28]
 8011ffc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012000:	931a      	str	r3, [sp, #104]	; 0x68
 8012002:	4654      	mov	r4, sl
 8012004:	2205      	movs	r2, #5
 8012006:	f814 1b01 	ldrb.w	r1, [r4], #1
 801200a:	4858      	ldr	r0, [pc, #352]	; (801216c <_vfiprintf_r+0x24c>)
 801200c:	f7ee f900 	bl	8000210 <memchr>
 8012010:	9a04      	ldr	r2, [sp, #16]
 8012012:	b9d8      	cbnz	r0, 801204c <_vfiprintf_r+0x12c>
 8012014:	06d1      	lsls	r1, r2, #27
 8012016:	bf44      	itt	mi
 8012018:	2320      	movmi	r3, #32
 801201a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801201e:	0713      	lsls	r3, r2, #28
 8012020:	bf44      	itt	mi
 8012022:	232b      	movmi	r3, #43	; 0x2b
 8012024:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012028:	f89a 3000 	ldrb.w	r3, [sl]
 801202c:	2b2a      	cmp	r3, #42	; 0x2a
 801202e:	d015      	beq.n	801205c <_vfiprintf_r+0x13c>
 8012030:	9a07      	ldr	r2, [sp, #28]
 8012032:	4654      	mov	r4, sl
 8012034:	2000      	movs	r0, #0
 8012036:	f04f 0c0a 	mov.w	ip, #10
 801203a:	4621      	mov	r1, r4
 801203c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012040:	3b30      	subs	r3, #48	; 0x30
 8012042:	2b09      	cmp	r3, #9
 8012044:	d94e      	bls.n	80120e4 <_vfiprintf_r+0x1c4>
 8012046:	b1b0      	cbz	r0, 8012076 <_vfiprintf_r+0x156>
 8012048:	9207      	str	r2, [sp, #28]
 801204a:	e014      	b.n	8012076 <_vfiprintf_r+0x156>
 801204c:	eba0 0308 	sub.w	r3, r0, r8
 8012050:	fa09 f303 	lsl.w	r3, r9, r3
 8012054:	4313      	orrs	r3, r2
 8012056:	9304      	str	r3, [sp, #16]
 8012058:	46a2      	mov	sl, r4
 801205a:	e7d2      	b.n	8012002 <_vfiprintf_r+0xe2>
 801205c:	9b03      	ldr	r3, [sp, #12]
 801205e:	1d19      	adds	r1, r3, #4
 8012060:	681b      	ldr	r3, [r3, #0]
 8012062:	9103      	str	r1, [sp, #12]
 8012064:	2b00      	cmp	r3, #0
 8012066:	bfbb      	ittet	lt
 8012068:	425b      	neglt	r3, r3
 801206a:	f042 0202 	orrlt.w	r2, r2, #2
 801206e:	9307      	strge	r3, [sp, #28]
 8012070:	9307      	strlt	r3, [sp, #28]
 8012072:	bfb8      	it	lt
 8012074:	9204      	strlt	r2, [sp, #16]
 8012076:	7823      	ldrb	r3, [r4, #0]
 8012078:	2b2e      	cmp	r3, #46	; 0x2e
 801207a:	d10c      	bne.n	8012096 <_vfiprintf_r+0x176>
 801207c:	7863      	ldrb	r3, [r4, #1]
 801207e:	2b2a      	cmp	r3, #42	; 0x2a
 8012080:	d135      	bne.n	80120ee <_vfiprintf_r+0x1ce>
 8012082:	9b03      	ldr	r3, [sp, #12]
 8012084:	1d1a      	adds	r2, r3, #4
 8012086:	681b      	ldr	r3, [r3, #0]
 8012088:	9203      	str	r2, [sp, #12]
 801208a:	2b00      	cmp	r3, #0
 801208c:	bfb8      	it	lt
 801208e:	f04f 33ff 	movlt.w	r3, #4294967295
 8012092:	3402      	adds	r4, #2
 8012094:	9305      	str	r3, [sp, #20]
 8012096:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801217c <_vfiprintf_r+0x25c>
 801209a:	7821      	ldrb	r1, [r4, #0]
 801209c:	2203      	movs	r2, #3
 801209e:	4650      	mov	r0, sl
 80120a0:	f7ee f8b6 	bl	8000210 <memchr>
 80120a4:	b140      	cbz	r0, 80120b8 <_vfiprintf_r+0x198>
 80120a6:	2340      	movs	r3, #64	; 0x40
 80120a8:	eba0 000a 	sub.w	r0, r0, sl
 80120ac:	fa03 f000 	lsl.w	r0, r3, r0
 80120b0:	9b04      	ldr	r3, [sp, #16]
 80120b2:	4303      	orrs	r3, r0
 80120b4:	3401      	adds	r4, #1
 80120b6:	9304      	str	r3, [sp, #16]
 80120b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80120bc:	482c      	ldr	r0, [pc, #176]	; (8012170 <_vfiprintf_r+0x250>)
 80120be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80120c2:	2206      	movs	r2, #6
 80120c4:	f7ee f8a4 	bl	8000210 <memchr>
 80120c8:	2800      	cmp	r0, #0
 80120ca:	d03f      	beq.n	801214c <_vfiprintf_r+0x22c>
 80120cc:	4b29      	ldr	r3, [pc, #164]	; (8012174 <_vfiprintf_r+0x254>)
 80120ce:	bb1b      	cbnz	r3, 8012118 <_vfiprintf_r+0x1f8>
 80120d0:	9b03      	ldr	r3, [sp, #12]
 80120d2:	3307      	adds	r3, #7
 80120d4:	f023 0307 	bic.w	r3, r3, #7
 80120d8:	3308      	adds	r3, #8
 80120da:	9303      	str	r3, [sp, #12]
 80120dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80120de:	443b      	add	r3, r7
 80120e0:	9309      	str	r3, [sp, #36]	; 0x24
 80120e2:	e767      	b.n	8011fb4 <_vfiprintf_r+0x94>
 80120e4:	fb0c 3202 	mla	r2, ip, r2, r3
 80120e8:	460c      	mov	r4, r1
 80120ea:	2001      	movs	r0, #1
 80120ec:	e7a5      	b.n	801203a <_vfiprintf_r+0x11a>
 80120ee:	2300      	movs	r3, #0
 80120f0:	3401      	adds	r4, #1
 80120f2:	9305      	str	r3, [sp, #20]
 80120f4:	4619      	mov	r1, r3
 80120f6:	f04f 0c0a 	mov.w	ip, #10
 80120fa:	4620      	mov	r0, r4
 80120fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012100:	3a30      	subs	r2, #48	; 0x30
 8012102:	2a09      	cmp	r2, #9
 8012104:	d903      	bls.n	801210e <_vfiprintf_r+0x1ee>
 8012106:	2b00      	cmp	r3, #0
 8012108:	d0c5      	beq.n	8012096 <_vfiprintf_r+0x176>
 801210a:	9105      	str	r1, [sp, #20]
 801210c:	e7c3      	b.n	8012096 <_vfiprintf_r+0x176>
 801210e:	fb0c 2101 	mla	r1, ip, r1, r2
 8012112:	4604      	mov	r4, r0
 8012114:	2301      	movs	r3, #1
 8012116:	e7f0      	b.n	80120fa <_vfiprintf_r+0x1da>
 8012118:	ab03      	add	r3, sp, #12
 801211a:	9300      	str	r3, [sp, #0]
 801211c:	462a      	mov	r2, r5
 801211e:	4b16      	ldr	r3, [pc, #88]	; (8012178 <_vfiprintf_r+0x258>)
 8012120:	a904      	add	r1, sp, #16
 8012122:	4630      	mov	r0, r6
 8012124:	f7fd feca 	bl	800febc <_printf_float>
 8012128:	4607      	mov	r7, r0
 801212a:	1c78      	adds	r0, r7, #1
 801212c:	d1d6      	bne.n	80120dc <_vfiprintf_r+0x1bc>
 801212e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012130:	07d9      	lsls	r1, r3, #31
 8012132:	d405      	bmi.n	8012140 <_vfiprintf_r+0x220>
 8012134:	89ab      	ldrh	r3, [r5, #12]
 8012136:	059a      	lsls	r2, r3, #22
 8012138:	d402      	bmi.n	8012140 <_vfiprintf_r+0x220>
 801213a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801213c:	f7ff fe6a 	bl	8011e14 <__retarget_lock_release_recursive>
 8012140:	89ab      	ldrh	r3, [r5, #12]
 8012142:	065b      	lsls	r3, r3, #25
 8012144:	f53f af12 	bmi.w	8011f6c <_vfiprintf_r+0x4c>
 8012148:	9809      	ldr	r0, [sp, #36]	; 0x24
 801214a:	e711      	b.n	8011f70 <_vfiprintf_r+0x50>
 801214c:	ab03      	add	r3, sp, #12
 801214e:	9300      	str	r3, [sp, #0]
 8012150:	462a      	mov	r2, r5
 8012152:	4b09      	ldr	r3, [pc, #36]	; (8012178 <_vfiprintf_r+0x258>)
 8012154:	a904      	add	r1, sp, #16
 8012156:	4630      	mov	r0, r6
 8012158:	f7fe f954 	bl	8010404 <_printf_i>
 801215c:	e7e4      	b.n	8012128 <_vfiprintf_r+0x208>
 801215e:	bf00      	nop
 8012160:	08014814 	.word	0x08014814
 8012164:	08014834 	.word	0x08014834
 8012168:	080147f4 	.word	0x080147f4
 801216c:	0801469c 	.word	0x0801469c
 8012170:	080146a6 	.word	0x080146a6
 8012174:	0800febd 	.word	0x0800febd
 8012178:	08011efb 	.word	0x08011efb
 801217c:	080146a2 	.word	0x080146a2

08012180 <__swbuf_r>:
 8012180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012182:	460e      	mov	r6, r1
 8012184:	4614      	mov	r4, r2
 8012186:	4605      	mov	r5, r0
 8012188:	b118      	cbz	r0, 8012192 <__swbuf_r+0x12>
 801218a:	6983      	ldr	r3, [r0, #24]
 801218c:	b90b      	cbnz	r3, 8012192 <__swbuf_r+0x12>
 801218e:	f000 f9e7 	bl	8012560 <__sinit>
 8012192:	4b21      	ldr	r3, [pc, #132]	; (8012218 <__swbuf_r+0x98>)
 8012194:	429c      	cmp	r4, r3
 8012196:	d12b      	bne.n	80121f0 <__swbuf_r+0x70>
 8012198:	686c      	ldr	r4, [r5, #4]
 801219a:	69a3      	ldr	r3, [r4, #24]
 801219c:	60a3      	str	r3, [r4, #8]
 801219e:	89a3      	ldrh	r3, [r4, #12]
 80121a0:	071a      	lsls	r2, r3, #28
 80121a2:	d52f      	bpl.n	8012204 <__swbuf_r+0x84>
 80121a4:	6923      	ldr	r3, [r4, #16]
 80121a6:	b36b      	cbz	r3, 8012204 <__swbuf_r+0x84>
 80121a8:	6923      	ldr	r3, [r4, #16]
 80121aa:	6820      	ldr	r0, [r4, #0]
 80121ac:	1ac0      	subs	r0, r0, r3
 80121ae:	6963      	ldr	r3, [r4, #20]
 80121b0:	b2f6      	uxtb	r6, r6
 80121b2:	4283      	cmp	r3, r0
 80121b4:	4637      	mov	r7, r6
 80121b6:	dc04      	bgt.n	80121c2 <__swbuf_r+0x42>
 80121b8:	4621      	mov	r1, r4
 80121ba:	4628      	mov	r0, r5
 80121bc:	f000 f93c 	bl	8012438 <_fflush_r>
 80121c0:	bb30      	cbnz	r0, 8012210 <__swbuf_r+0x90>
 80121c2:	68a3      	ldr	r3, [r4, #8]
 80121c4:	3b01      	subs	r3, #1
 80121c6:	60a3      	str	r3, [r4, #8]
 80121c8:	6823      	ldr	r3, [r4, #0]
 80121ca:	1c5a      	adds	r2, r3, #1
 80121cc:	6022      	str	r2, [r4, #0]
 80121ce:	701e      	strb	r6, [r3, #0]
 80121d0:	6963      	ldr	r3, [r4, #20]
 80121d2:	3001      	adds	r0, #1
 80121d4:	4283      	cmp	r3, r0
 80121d6:	d004      	beq.n	80121e2 <__swbuf_r+0x62>
 80121d8:	89a3      	ldrh	r3, [r4, #12]
 80121da:	07db      	lsls	r3, r3, #31
 80121dc:	d506      	bpl.n	80121ec <__swbuf_r+0x6c>
 80121de:	2e0a      	cmp	r6, #10
 80121e0:	d104      	bne.n	80121ec <__swbuf_r+0x6c>
 80121e2:	4621      	mov	r1, r4
 80121e4:	4628      	mov	r0, r5
 80121e6:	f000 f927 	bl	8012438 <_fflush_r>
 80121ea:	b988      	cbnz	r0, 8012210 <__swbuf_r+0x90>
 80121ec:	4638      	mov	r0, r7
 80121ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80121f0:	4b0a      	ldr	r3, [pc, #40]	; (801221c <__swbuf_r+0x9c>)
 80121f2:	429c      	cmp	r4, r3
 80121f4:	d101      	bne.n	80121fa <__swbuf_r+0x7a>
 80121f6:	68ac      	ldr	r4, [r5, #8]
 80121f8:	e7cf      	b.n	801219a <__swbuf_r+0x1a>
 80121fa:	4b09      	ldr	r3, [pc, #36]	; (8012220 <__swbuf_r+0xa0>)
 80121fc:	429c      	cmp	r4, r3
 80121fe:	bf08      	it	eq
 8012200:	68ec      	ldreq	r4, [r5, #12]
 8012202:	e7ca      	b.n	801219a <__swbuf_r+0x1a>
 8012204:	4621      	mov	r1, r4
 8012206:	4628      	mov	r0, r5
 8012208:	f000 f81a 	bl	8012240 <__swsetup_r>
 801220c:	2800      	cmp	r0, #0
 801220e:	d0cb      	beq.n	80121a8 <__swbuf_r+0x28>
 8012210:	f04f 37ff 	mov.w	r7, #4294967295
 8012214:	e7ea      	b.n	80121ec <__swbuf_r+0x6c>
 8012216:	bf00      	nop
 8012218:	08014814 	.word	0x08014814
 801221c:	08014834 	.word	0x08014834
 8012220:	080147f4 	.word	0x080147f4

08012224 <__ascii_wctomb>:
 8012224:	b149      	cbz	r1, 801223a <__ascii_wctomb+0x16>
 8012226:	2aff      	cmp	r2, #255	; 0xff
 8012228:	bf85      	ittet	hi
 801222a:	238a      	movhi	r3, #138	; 0x8a
 801222c:	6003      	strhi	r3, [r0, #0]
 801222e:	700a      	strbls	r2, [r1, #0]
 8012230:	f04f 30ff 	movhi.w	r0, #4294967295
 8012234:	bf98      	it	ls
 8012236:	2001      	movls	r0, #1
 8012238:	4770      	bx	lr
 801223a:	4608      	mov	r0, r1
 801223c:	4770      	bx	lr
	...

08012240 <__swsetup_r>:
 8012240:	4b32      	ldr	r3, [pc, #200]	; (801230c <__swsetup_r+0xcc>)
 8012242:	b570      	push	{r4, r5, r6, lr}
 8012244:	681d      	ldr	r5, [r3, #0]
 8012246:	4606      	mov	r6, r0
 8012248:	460c      	mov	r4, r1
 801224a:	b125      	cbz	r5, 8012256 <__swsetup_r+0x16>
 801224c:	69ab      	ldr	r3, [r5, #24]
 801224e:	b913      	cbnz	r3, 8012256 <__swsetup_r+0x16>
 8012250:	4628      	mov	r0, r5
 8012252:	f000 f985 	bl	8012560 <__sinit>
 8012256:	4b2e      	ldr	r3, [pc, #184]	; (8012310 <__swsetup_r+0xd0>)
 8012258:	429c      	cmp	r4, r3
 801225a:	d10f      	bne.n	801227c <__swsetup_r+0x3c>
 801225c:	686c      	ldr	r4, [r5, #4]
 801225e:	89a3      	ldrh	r3, [r4, #12]
 8012260:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012264:	0719      	lsls	r1, r3, #28
 8012266:	d42c      	bmi.n	80122c2 <__swsetup_r+0x82>
 8012268:	06dd      	lsls	r5, r3, #27
 801226a:	d411      	bmi.n	8012290 <__swsetup_r+0x50>
 801226c:	2309      	movs	r3, #9
 801226e:	6033      	str	r3, [r6, #0]
 8012270:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8012274:	81a3      	strh	r3, [r4, #12]
 8012276:	f04f 30ff 	mov.w	r0, #4294967295
 801227a:	e03e      	b.n	80122fa <__swsetup_r+0xba>
 801227c:	4b25      	ldr	r3, [pc, #148]	; (8012314 <__swsetup_r+0xd4>)
 801227e:	429c      	cmp	r4, r3
 8012280:	d101      	bne.n	8012286 <__swsetup_r+0x46>
 8012282:	68ac      	ldr	r4, [r5, #8]
 8012284:	e7eb      	b.n	801225e <__swsetup_r+0x1e>
 8012286:	4b24      	ldr	r3, [pc, #144]	; (8012318 <__swsetup_r+0xd8>)
 8012288:	429c      	cmp	r4, r3
 801228a:	bf08      	it	eq
 801228c:	68ec      	ldreq	r4, [r5, #12]
 801228e:	e7e6      	b.n	801225e <__swsetup_r+0x1e>
 8012290:	0758      	lsls	r0, r3, #29
 8012292:	d512      	bpl.n	80122ba <__swsetup_r+0x7a>
 8012294:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012296:	b141      	cbz	r1, 80122aa <__swsetup_r+0x6a>
 8012298:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801229c:	4299      	cmp	r1, r3
 801229e:	d002      	beq.n	80122a6 <__swsetup_r+0x66>
 80122a0:	4630      	mov	r0, r6
 80122a2:	f7fd fc8b 	bl	800fbbc <_free_r>
 80122a6:	2300      	movs	r3, #0
 80122a8:	6363      	str	r3, [r4, #52]	; 0x34
 80122aa:	89a3      	ldrh	r3, [r4, #12]
 80122ac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80122b0:	81a3      	strh	r3, [r4, #12]
 80122b2:	2300      	movs	r3, #0
 80122b4:	6063      	str	r3, [r4, #4]
 80122b6:	6923      	ldr	r3, [r4, #16]
 80122b8:	6023      	str	r3, [r4, #0]
 80122ba:	89a3      	ldrh	r3, [r4, #12]
 80122bc:	f043 0308 	orr.w	r3, r3, #8
 80122c0:	81a3      	strh	r3, [r4, #12]
 80122c2:	6923      	ldr	r3, [r4, #16]
 80122c4:	b94b      	cbnz	r3, 80122da <__swsetup_r+0x9a>
 80122c6:	89a3      	ldrh	r3, [r4, #12]
 80122c8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80122cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80122d0:	d003      	beq.n	80122da <__swsetup_r+0x9a>
 80122d2:	4621      	mov	r1, r4
 80122d4:	4630      	mov	r0, r6
 80122d6:	f000 fa05 	bl	80126e4 <__smakebuf_r>
 80122da:	89a0      	ldrh	r0, [r4, #12]
 80122dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80122e0:	f010 0301 	ands.w	r3, r0, #1
 80122e4:	d00a      	beq.n	80122fc <__swsetup_r+0xbc>
 80122e6:	2300      	movs	r3, #0
 80122e8:	60a3      	str	r3, [r4, #8]
 80122ea:	6963      	ldr	r3, [r4, #20]
 80122ec:	425b      	negs	r3, r3
 80122ee:	61a3      	str	r3, [r4, #24]
 80122f0:	6923      	ldr	r3, [r4, #16]
 80122f2:	b943      	cbnz	r3, 8012306 <__swsetup_r+0xc6>
 80122f4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80122f8:	d1ba      	bne.n	8012270 <__swsetup_r+0x30>
 80122fa:	bd70      	pop	{r4, r5, r6, pc}
 80122fc:	0781      	lsls	r1, r0, #30
 80122fe:	bf58      	it	pl
 8012300:	6963      	ldrpl	r3, [r4, #20]
 8012302:	60a3      	str	r3, [r4, #8]
 8012304:	e7f4      	b.n	80122f0 <__swsetup_r+0xb0>
 8012306:	2000      	movs	r0, #0
 8012308:	e7f7      	b.n	80122fa <__swsetup_r+0xba>
 801230a:	bf00      	nop
 801230c:	20000020 	.word	0x20000020
 8012310:	08014814 	.word	0x08014814
 8012314:	08014834 	.word	0x08014834
 8012318:	080147f4 	.word	0x080147f4

0801231c <abort>:
 801231c:	b508      	push	{r3, lr}
 801231e:	2006      	movs	r0, #6
 8012320:	f000 fa50 	bl	80127c4 <raise>
 8012324:	2001      	movs	r0, #1
 8012326:	f7f3 fbd7 	bl	8005ad8 <_exit>
	...

0801232c <__sflush_r>:
 801232c:	898a      	ldrh	r2, [r1, #12]
 801232e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012332:	4605      	mov	r5, r0
 8012334:	0710      	lsls	r0, r2, #28
 8012336:	460c      	mov	r4, r1
 8012338:	d458      	bmi.n	80123ec <__sflush_r+0xc0>
 801233a:	684b      	ldr	r3, [r1, #4]
 801233c:	2b00      	cmp	r3, #0
 801233e:	dc05      	bgt.n	801234c <__sflush_r+0x20>
 8012340:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8012342:	2b00      	cmp	r3, #0
 8012344:	dc02      	bgt.n	801234c <__sflush_r+0x20>
 8012346:	2000      	movs	r0, #0
 8012348:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801234c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801234e:	2e00      	cmp	r6, #0
 8012350:	d0f9      	beq.n	8012346 <__sflush_r+0x1a>
 8012352:	2300      	movs	r3, #0
 8012354:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012358:	682f      	ldr	r7, [r5, #0]
 801235a:	602b      	str	r3, [r5, #0]
 801235c:	d032      	beq.n	80123c4 <__sflush_r+0x98>
 801235e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012360:	89a3      	ldrh	r3, [r4, #12]
 8012362:	075a      	lsls	r2, r3, #29
 8012364:	d505      	bpl.n	8012372 <__sflush_r+0x46>
 8012366:	6863      	ldr	r3, [r4, #4]
 8012368:	1ac0      	subs	r0, r0, r3
 801236a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801236c:	b10b      	cbz	r3, 8012372 <__sflush_r+0x46>
 801236e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012370:	1ac0      	subs	r0, r0, r3
 8012372:	2300      	movs	r3, #0
 8012374:	4602      	mov	r2, r0
 8012376:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012378:	6a21      	ldr	r1, [r4, #32]
 801237a:	4628      	mov	r0, r5
 801237c:	47b0      	blx	r6
 801237e:	1c43      	adds	r3, r0, #1
 8012380:	89a3      	ldrh	r3, [r4, #12]
 8012382:	d106      	bne.n	8012392 <__sflush_r+0x66>
 8012384:	6829      	ldr	r1, [r5, #0]
 8012386:	291d      	cmp	r1, #29
 8012388:	d82c      	bhi.n	80123e4 <__sflush_r+0xb8>
 801238a:	4a2a      	ldr	r2, [pc, #168]	; (8012434 <__sflush_r+0x108>)
 801238c:	40ca      	lsrs	r2, r1
 801238e:	07d6      	lsls	r6, r2, #31
 8012390:	d528      	bpl.n	80123e4 <__sflush_r+0xb8>
 8012392:	2200      	movs	r2, #0
 8012394:	6062      	str	r2, [r4, #4]
 8012396:	04d9      	lsls	r1, r3, #19
 8012398:	6922      	ldr	r2, [r4, #16]
 801239a:	6022      	str	r2, [r4, #0]
 801239c:	d504      	bpl.n	80123a8 <__sflush_r+0x7c>
 801239e:	1c42      	adds	r2, r0, #1
 80123a0:	d101      	bne.n	80123a6 <__sflush_r+0x7a>
 80123a2:	682b      	ldr	r3, [r5, #0]
 80123a4:	b903      	cbnz	r3, 80123a8 <__sflush_r+0x7c>
 80123a6:	6560      	str	r0, [r4, #84]	; 0x54
 80123a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80123aa:	602f      	str	r7, [r5, #0]
 80123ac:	2900      	cmp	r1, #0
 80123ae:	d0ca      	beq.n	8012346 <__sflush_r+0x1a>
 80123b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80123b4:	4299      	cmp	r1, r3
 80123b6:	d002      	beq.n	80123be <__sflush_r+0x92>
 80123b8:	4628      	mov	r0, r5
 80123ba:	f7fd fbff 	bl	800fbbc <_free_r>
 80123be:	2000      	movs	r0, #0
 80123c0:	6360      	str	r0, [r4, #52]	; 0x34
 80123c2:	e7c1      	b.n	8012348 <__sflush_r+0x1c>
 80123c4:	6a21      	ldr	r1, [r4, #32]
 80123c6:	2301      	movs	r3, #1
 80123c8:	4628      	mov	r0, r5
 80123ca:	47b0      	blx	r6
 80123cc:	1c41      	adds	r1, r0, #1
 80123ce:	d1c7      	bne.n	8012360 <__sflush_r+0x34>
 80123d0:	682b      	ldr	r3, [r5, #0]
 80123d2:	2b00      	cmp	r3, #0
 80123d4:	d0c4      	beq.n	8012360 <__sflush_r+0x34>
 80123d6:	2b1d      	cmp	r3, #29
 80123d8:	d001      	beq.n	80123de <__sflush_r+0xb2>
 80123da:	2b16      	cmp	r3, #22
 80123dc:	d101      	bne.n	80123e2 <__sflush_r+0xb6>
 80123de:	602f      	str	r7, [r5, #0]
 80123e0:	e7b1      	b.n	8012346 <__sflush_r+0x1a>
 80123e2:	89a3      	ldrh	r3, [r4, #12]
 80123e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80123e8:	81a3      	strh	r3, [r4, #12]
 80123ea:	e7ad      	b.n	8012348 <__sflush_r+0x1c>
 80123ec:	690f      	ldr	r7, [r1, #16]
 80123ee:	2f00      	cmp	r7, #0
 80123f0:	d0a9      	beq.n	8012346 <__sflush_r+0x1a>
 80123f2:	0793      	lsls	r3, r2, #30
 80123f4:	680e      	ldr	r6, [r1, #0]
 80123f6:	bf08      	it	eq
 80123f8:	694b      	ldreq	r3, [r1, #20]
 80123fa:	600f      	str	r7, [r1, #0]
 80123fc:	bf18      	it	ne
 80123fe:	2300      	movne	r3, #0
 8012400:	eba6 0807 	sub.w	r8, r6, r7
 8012404:	608b      	str	r3, [r1, #8]
 8012406:	f1b8 0f00 	cmp.w	r8, #0
 801240a:	dd9c      	ble.n	8012346 <__sflush_r+0x1a>
 801240c:	6a21      	ldr	r1, [r4, #32]
 801240e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012410:	4643      	mov	r3, r8
 8012412:	463a      	mov	r2, r7
 8012414:	4628      	mov	r0, r5
 8012416:	47b0      	blx	r6
 8012418:	2800      	cmp	r0, #0
 801241a:	dc06      	bgt.n	801242a <__sflush_r+0xfe>
 801241c:	89a3      	ldrh	r3, [r4, #12]
 801241e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012422:	81a3      	strh	r3, [r4, #12]
 8012424:	f04f 30ff 	mov.w	r0, #4294967295
 8012428:	e78e      	b.n	8012348 <__sflush_r+0x1c>
 801242a:	4407      	add	r7, r0
 801242c:	eba8 0800 	sub.w	r8, r8, r0
 8012430:	e7e9      	b.n	8012406 <__sflush_r+0xda>
 8012432:	bf00      	nop
 8012434:	20400001 	.word	0x20400001

08012438 <_fflush_r>:
 8012438:	b538      	push	{r3, r4, r5, lr}
 801243a:	690b      	ldr	r3, [r1, #16]
 801243c:	4605      	mov	r5, r0
 801243e:	460c      	mov	r4, r1
 8012440:	b913      	cbnz	r3, 8012448 <_fflush_r+0x10>
 8012442:	2500      	movs	r5, #0
 8012444:	4628      	mov	r0, r5
 8012446:	bd38      	pop	{r3, r4, r5, pc}
 8012448:	b118      	cbz	r0, 8012452 <_fflush_r+0x1a>
 801244a:	6983      	ldr	r3, [r0, #24]
 801244c:	b90b      	cbnz	r3, 8012452 <_fflush_r+0x1a>
 801244e:	f000 f887 	bl	8012560 <__sinit>
 8012452:	4b14      	ldr	r3, [pc, #80]	; (80124a4 <_fflush_r+0x6c>)
 8012454:	429c      	cmp	r4, r3
 8012456:	d11b      	bne.n	8012490 <_fflush_r+0x58>
 8012458:	686c      	ldr	r4, [r5, #4]
 801245a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801245e:	2b00      	cmp	r3, #0
 8012460:	d0ef      	beq.n	8012442 <_fflush_r+0xa>
 8012462:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012464:	07d0      	lsls	r0, r2, #31
 8012466:	d404      	bmi.n	8012472 <_fflush_r+0x3a>
 8012468:	0599      	lsls	r1, r3, #22
 801246a:	d402      	bmi.n	8012472 <_fflush_r+0x3a>
 801246c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801246e:	f7ff fcd0 	bl	8011e12 <__retarget_lock_acquire_recursive>
 8012472:	4628      	mov	r0, r5
 8012474:	4621      	mov	r1, r4
 8012476:	f7ff ff59 	bl	801232c <__sflush_r>
 801247a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801247c:	07da      	lsls	r2, r3, #31
 801247e:	4605      	mov	r5, r0
 8012480:	d4e0      	bmi.n	8012444 <_fflush_r+0xc>
 8012482:	89a3      	ldrh	r3, [r4, #12]
 8012484:	059b      	lsls	r3, r3, #22
 8012486:	d4dd      	bmi.n	8012444 <_fflush_r+0xc>
 8012488:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801248a:	f7ff fcc3 	bl	8011e14 <__retarget_lock_release_recursive>
 801248e:	e7d9      	b.n	8012444 <_fflush_r+0xc>
 8012490:	4b05      	ldr	r3, [pc, #20]	; (80124a8 <_fflush_r+0x70>)
 8012492:	429c      	cmp	r4, r3
 8012494:	d101      	bne.n	801249a <_fflush_r+0x62>
 8012496:	68ac      	ldr	r4, [r5, #8]
 8012498:	e7df      	b.n	801245a <_fflush_r+0x22>
 801249a:	4b04      	ldr	r3, [pc, #16]	; (80124ac <_fflush_r+0x74>)
 801249c:	429c      	cmp	r4, r3
 801249e:	bf08      	it	eq
 80124a0:	68ec      	ldreq	r4, [r5, #12]
 80124a2:	e7da      	b.n	801245a <_fflush_r+0x22>
 80124a4:	08014814 	.word	0x08014814
 80124a8:	08014834 	.word	0x08014834
 80124ac:	080147f4 	.word	0x080147f4

080124b0 <std>:
 80124b0:	2300      	movs	r3, #0
 80124b2:	b510      	push	{r4, lr}
 80124b4:	4604      	mov	r4, r0
 80124b6:	e9c0 3300 	strd	r3, r3, [r0]
 80124ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80124be:	6083      	str	r3, [r0, #8]
 80124c0:	8181      	strh	r1, [r0, #12]
 80124c2:	6643      	str	r3, [r0, #100]	; 0x64
 80124c4:	81c2      	strh	r2, [r0, #14]
 80124c6:	6183      	str	r3, [r0, #24]
 80124c8:	4619      	mov	r1, r3
 80124ca:	2208      	movs	r2, #8
 80124cc:	305c      	adds	r0, #92	; 0x5c
 80124ce:	f7fd fb6d 	bl	800fbac <memset>
 80124d2:	4b05      	ldr	r3, [pc, #20]	; (80124e8 <std+0x38>)
 80124d4:	6263      	str	r3, [r4, #36]	; 0x24
 80124d6:	4b05      	ldr	r3, [pc, #20]	; (80124ec <std+0x3c>)
 80124d8:	62a3      	str	r3, [r4, #40]	; 0x28
 80124da:	4b05      	ldr	r3, [pc, #20]	; (80124f0 <std+0x40>)
 80124dc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80124de:	4b05      	ldr	r3, [pc, #20]	; (80124f4 <std+0x44>)
 80124e0:	6224      	str	r4, [r4, #32]
 80124e2:	6323      	str	r3, [r4, #48]	; 0x30
 80124e4:	bd10      	pop	{r4, pc}
 80124e6:	bf00      	nop
 80124e8:	080127fd 	.word	0x080127fd
 80124ec:	0801281f 	.word	0x0801281f
 80124f0:	08012857 	.word	0x08012857
 80124f4:	0801287b 	.word	0x0801287b

080124f8 <_cleanup_r>:
 80124f8:	4901      	ldr	r1, [pc, #4]	; (8012500 <_cleanup_r+0x8>)
 80124fa:	f000 b8af 	b.w	801265c <_fwalk_reent>
 80124fe:	bf00      	nop
 8012500:	08012439 	.word	0x08012439

08012504 <__sfmoreglue>:
 8012504:	b570      	push	{r4, r5, r6, lr}
 8012506:	2268      	movs	r2, #104	; 0x68
 8012508:	1e4d      	subs	r5, r1, #1
 801250a:	4355      	muls	r5, r2
 801250c:	460e      	mov	r6, r1
 801250e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8012512:	f7fd fbbf 	bl	800fc94 <_malloc_r>
 8012516:	4604      	mov	r4, r0
 8012518:	b140      	cbz	r0, 801252c <__sfmoreglue+0x28>
 801251a:	2100      	movs	r1, #0
 801251c:	e9c0 1600 	strd	r1, r6, [r0]
 8012520:	300c      	adds	r0, #12
 8012522:	60a0      	str	r0, [r4, #8]
 8012524:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8012528:	f7fd fb40 	bl	800fbac <memset>
 801252c:	4620      	mov	r0, r4
 801252e:	bd70      	pop	{r4, r5, r6, pc}

08012530 <__sfp_lock_acquire>:
 8012530:	4801      	ldr	r0, [pc, #4]	; (8012538 <__sfp_lock_acquire+0x8>)
 8012532:	f7ff bc6e 	b.w	8011e12 <__retarget_lock_acquire_recursive>
 8012536:	bf00      	nop
 8012538:	20006361 	.word	0x20006361

0801253c <__sfp_lock_release>:
 801253c:	4801      	ldr	r0, [pc, #4]	; (8012544 <__sfp_lock_release+0x8>)
 801253e:	f7ff bc69 	b.w	8011e14 <__retarget_lock_release_recursive>
 8012542:	bf00      	nop
 8012544:	20006361 	.word	0x20006361

08012548 <__sinit_lock_acquire>:
 8012548:	4801      	ldr	r0, [pc, #4]	; (8012550 <__sinit_lock_acquire+0x8>)
 801254a:	f7ff bc62 	b.w	8011e12 <__retarget_lock_acquire_recursive>
 801254e:	bf00      	nop
 8012550:	20006362 	.word	0x20006362

08012554 <__sinit_lock_release>:
 8012554:	4801      	ldr	r0, [pc, #4]	; (801255c <__sinit_lock_release+0x8>)
 8012556:	f7ff bc5d 	b.w	8011e14 <__retarget_lock_release_recursive>
 801255a:	bf00      	nop
 801255c:	20006362 	.word	0x20006362

08012560 <__sinit>:
 8012560:	b510      	push	{r4, lr}
 8012562:	4604      	mov	r4, r0
 8012564:	f7ff fff0 	bl	8012548 <__sinit_lock_acquire>
 8012568:	69a3      	ldr	r3, [r4, #24]
 801256a:	b11b      	cbz	r3, 8012574 <__sinit+0x14>
 801256c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012570:	f7ff bff0 	b.w	8012554 <__sinit_lock_release>
 8012574:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8012578:	6523      	str	r3, [r4, #80]	; 0x50
 801257a:	4b13      	ldr	r3, [pc, #76]	; (80125c8 <__sinit+0x68>)
 801257c:	4a13      	ldr	r2, [pc, #76]	; (80125cc <__sinit+0x6c>)
 801257e:	681b      	ldr	r3, [r3, #0]
 8012580:	62a2      	str	r2, [r4, #40]	; 0x28
 8012582:	42a3      	cmp	r3, r4
 8012584:	bf04      	itt	eq
 8012586:	2301      	moveq	r3, #1
 8012588:	61a3      	streq	r3, [r4, #24]
 801258a:	4620      	mov	r0, r4
 801258c:	f000 f820 	bl	80125d0 <__sfp>
 8012590:	6060      	str	r0, [r4, #4]
 8012592:	4620      	mov	r0, r4
 8012594:	f000 f81c 	bl	80125d0 <__sfp>
 8012598:	60a0      	str	r0, [r4, #8]
 801259a:	4620      	mov	r0, r4
 801259c:	f000 f818 	bl	80125d0 <__sfp>
 80125a0:	2200      	movs	r2, #0
 80125a2:	60e0      	str	r0, [r4, #12]
 80125a4:	2104      	movs	r1, #4
 80125a6:	6860      	ldr	r0, [r4, #4]
 80125a8:	f7ff ff82 	bl	80124b0 <std>
 80125ac:	68a0      	ldr	r0, [r4, #8]
 80125ae:	2201      	movs	r2, #1
 80125b0:	2109      	movs	r1, #9
 80125b2:	f7ff ff7d 	bl	80124b0 <std>
 80125b6:	68e0      	ldr	r0, [r4, #12]
 80125b8:	2202      	movs	r2, #2
 80125ba:	2112      	movs	r1, #18
 80125bc:	f7ff ff78 	bl	80124b0 <std>
 80125c0:	2301      	movs	r3, #1
 80125c2:	61a3      	str	r3, [r4, #24]
 80125c4:	e7d2      	b.n	801256c <__sinit+0xc>
 80125c6:	bf00      	nop
 80125c8:	08014478 	.word	0x08014478
 80125cc:	080124f9 	.word	0x080124f9

080125d0 <__sfp>:
 80125d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80125d2:	4607      	mov	r7, r0
 80125d4:	f7ff ffac 	bl	8012530 <__sfp_lock_acquire>
 80125d8:	4b1e      	ldr	r3, [pc, #120]	; (8012654 <__sfp+0x84>)
 80125da:	681e      	ldr	r6, [r3, #0]
 80125dc:	69b3      	ldr	r3, [r6, #24]
 80125de:	b913      	cbnz	r3, 80125e6 <__sfp+0x16>
 80125e0:	4630      	mov	r0, r6
 80125e2:	f7ff ffbd 	bl	8012560 <__sinit>
 80125e6:	3648      	adds	r6, #72	; 0x48
 80125e8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80125ec:	3b01      	subs	r3, #1
 80125ee:	d503      	bpl.n	80125f8 <__sfp+0x28>
 80125f0:	6833      	ldr	r3, [r6, #0]
 80125f2:	b30b      	cbz	r3, 8012638 <__sfp+0x68>
 80125f4:	6836      	ldr	r6, [r6, #0]
 80125f6:	e7f7      	b.n	80125e8 <__sfp+0x18>
 80125f8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80125fc:	b9d5      	cbnz	r5, 8012634 <__sfp+0x64>
 80125fe:	4b16      	ldr	r3, [pc, #88]	; (8012658 <__sfp+0x88>)
 8012600:	60e3      	str	r3, [r4, #12]
 8012602:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8012606:	6665      	str	r5, [r4, #100]	; 0x64
 8012608:	f7ff fc02 	bl	8011e10 <__retarget_lock_init_recursive>
 801260c:	f7ff ff96 	bl	801253c <__sfp_lock_release>
 8012610:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8012614:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8012618:	6025      	str	r5, [r4, #0]
 801261a:	61a5      	str	r5, [r4, #24]
 801261c:	2208      	movs	r2, #8
 801261e:	4629      	mov	r1, r5
 8012620:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8012624:	f7fd fac2 	bl	800fbac <memset>
 8012628:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801262c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8012630:	4620      	mov	r0, r4
 8012632:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012634:	3468      	adds	r4, #104	; 0x68
 8012636:	e7d9      	b.n	80125ec <__sfp+0x1c>
 8012638:	2104      	movs	r1, #4
 801263a:	4638      	mov	r0, r7
 801263c:	f7ff ff62 	bl	8012504 <__sfmoreglue>
 8012640:	4604      	mov	r4, r0
 8012642:	6030      	str	r0, [r6, #0]
 8012644:	2800      	cmp	r0, #0
 8012646:	d1d5      	bne.n	80125f4 <__sfp+0x24>
 8012648:	f7ff ff78 	bl	801253c <__sfp_lock_release>
 801264c:	230c      	movs	r3, #12
 801264e:	603b      	str	r3, [r7, #0]
 8012650:	e7ee      	b.n	8012630 <__sfp+0x60>
 8012652:	bf00      	nop
 8012654:	08014478 	.word	0x08014478
 8012658:	ffff0001 	.word	0xffff0001

0801265c <_fwalk_reent>:
 801265c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012660:	4606      	mov	r6, r0
 8012662:	4688      	mov	r8, r1
 8012664:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8012668:	2700      	movs	r7, #0
 801266a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801266e:	f1b9 0901 	subs.w	r9, r9, #1
 8012672:	d505      	bpl.n	8012680 <_fwalk_reent+0x24>
 8012674:	6824      	ldr	r4, [r4, #0]
 8012676:	2c00      	cmp	r4, #0
 8012678:	d1f7      	bne.n	801266a <_fwalk_reent+0xe>
 801267a:	4638      	mov	r0, r7
 801267c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012680:	89ab      	ldrh	r3, [r5, #12]
 8012682:	2b01      	cmp	r3, #1
 8012684:	d907      	bls.n	8012696 <_fwalk_reent+0x3a>
 8012686:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801268a:	3301      	adds	r3, #1
 801268c:	d003      	beq.n	8012696 <_fwalk_reent+0x3a>
 801268e:	4629      	mov	r1, r5
 8012690:	4630      	mov	r0, r6
 8012692:	47c0      	blx	r8
 8012694:	4307      	orrs	r7, r0
 8012696:	3568      	adds	r5, #104	; 0x68
 8012698:	e7e9      	b.n	801266e <_fwalk_reent+0x12>

0801269a <__swhatbuf_r>:
 801269a:	b570      	push	{r4, r5, r6, lr}
 801269c:	460e      	mov	r6, r1
 801269e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80126a2:	2900      	cmp	r1, #0
 80126a4:	b096      	sub	sp, #88	; 0x58
 80126a6:	4614      	mov	r4, r2
 80126a8:	461d      	mov	r5, r3
 80126aa:	da08      	bge.n	80126be <__swhatbuf_r+0x24>
 80126ac:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80126b0:	2200      	movs	r2, #0
 80126b2:	602a      	str	r2, [r5, #0]
 80126b4:	061a      	lsls	r2, r3, #24
 80126b6:	d410      	bmi.n	80126da <__swhatbuf_r+0x40>
 80126b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80126bc:	e00e      	b.n	80126dc <__swhatbuf_r+0x42>
 80126be:	466a      	mov	r2, sp
 80126c0:	f000 f902 	bl	80128c8 <_fstat_r>
 80126c4:	2800      	cmp	r0, #0
 80126c6:	dbf1      	blt.n	80126ac <__swhatbuf_r+0x12>
 80126c8:	9a01      	ldr	r2, [sp, #4]
 80126ca:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80126ce:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80126d2:	425a      	negs	r2, r3
 80126d4:	415a      	adcs	r2, r3
 80126d6:	602a      	str	r2, [r5, #0]
 80126d8:	e7ee      	b.n	80126b8 <__swhatbuf_r+0x1e>
 80126da:	2340      	movs	r3, #64	; 0x40
 80126dc:	2000      	movs	r0, #0
 80126de:	6023      	str	r3, [r4, #0]
 80126e0:	b016      	add	sp, #88	; 0x58
 80126e2:	bd70      	pop	{r4, r5, r6, pc}

080126e4 <__smakebuf_r>:
 80126e4:	898b      	ldrh	r3, [r1, #12]
 80126e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80126e8:	079d      	lsls	r5, r3, #30
 80126ea:	4606      	mov	r6, r0
 80126ec:	460c      	mov	r4, r1
 80126ee:	d507      	bpl.n	8012700 <__smakebuf_r+0x1c>
 80126f0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80126f4:	6023      	str	r3, [r4, #0]
 80126f6:	6123      	str	r3, [r4, #16]
 80126f8:	2301      	movs	r3, #1
 80126fa:	6163      	str	r3, [r4, #20]
 80126fc:	b002      	add	sp, #8
 80126fe:	bd70      	pop	{r4, r5, r6, pc}
 8012700:	ab01      	add	r3, sp, #4
 8012702:	466a      	mov	r2, sp
 8012704:	f7ff ffc9 	bl	801269a <__swhatbuf_r>
 8012708:	9900      	ldr	r1, [sp, #0]
 801270a:	4605      	mov	r5, r0
 801270c:	4630      	mov	r0, r6
 801270e:	f7fd fac1 	bl	800fc94 <_malloc_r>
 8012712:	b948      	cbnz	r0, 8012728 <__smakebuf_r+0x44>
 8012714:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012718:	059a      	lsls	r2, r3, #22
 801271a:	d4ef      	bmi.n	80126fc <__smakebuf_r+0x18>
 801271c:	f023 0303 	bic.w	r3, r3, #3
 8012720:	f043 0302 	orr.w	r3, r3, #2
 8012724:	81a3      	strh	r3, [r4, #12]
 8012726:	e7e3      	b.n	80126f0 <__smakebuf_r+0xc>
 8012728:	4b0d      	ldr	r3, [pc, #52]	; (8012760 <__smakebuf_r+0x7c>)
 801272a:	62b3      	str	r3, [r6, #40]	; 0x28
 801272c:	89a3      	ldrh	r3, [r4, #12]
 801272e:	6020      	str	r0, [r4, #0]
 8012730:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012734:	81a3      	strh	r3, [r4, #12]
 8012736:	9b00      	ldr	r3, [sp, #0]
 8012738:	6163      	str	r3, [r4, #20]
 801273a:	9b01      	ldr	r3, [sp, #4]
 801273c:	6120      	str	r0, [r4, #16]
 801273e:	b15b      	cbz	r3, 8012758 <__smakebuf_r+0x74>
 8012740:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012744:	4630      	mov	r0, r6
 8012746:	f000 f8d1 	bl	80128ec <_isatty_r>
 801274a:	b128      	cbz	r0, 8012758 <__smakebuf_r+0x74>
 801274c:	89a3      	ldrh	r3, [r4, #12]
 801274e:	f023 0303 	bic.w	r3, r3, #3
 8012752:	f043 0301 	orr.w	r3, r3, #1
 8012756:	81a3      	strh	r3, [r4, #12]
 8012758:	89a0      	ldrh	r0, [r4, #12]
 801275a:	4305      	orrs	r5, r0
 801275c:	81a5      	strh	r5, [r4, #12]
 801275e:	e7cd      	b.n	80126fc <__smakebuf_r+0x18>
 8012760:	080124f9 	.word	0x080124f9

08012764 <_malloc_usable_size_r>:
 8012764:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012768:	1f18      	subs	r0, r3, #4
 801276a:	2b00      	cmp	r3, #0
 801276c:	bfbc      	itt	lt
 801276e:	580b      	ldrlt	r3, [r1, r0]
 8012770:	18c0      	addlt	r0, r0, r3
 8012772:	4770      	bx	lr

08012774 <_raise_r>:
 8012774:	291f      	cmp	r1, #31
 8012776:	b538      	push	{r3, r4, r5, lr}
 8012778:	4604      	mov	r4, r0
 801277a:	460d      	mov	r5, r1
 801277c:	d904      	bls.n	8012788 <_raise_r+0x14>
 801277e:	2316      	movs	r3, #22
 8012780:	6003      	str	r3, [r0, #0]
 8012782:	f04f 30ff 	mov.w	r0, #4294967295
 8012786:	bd38      	pop	{r3, r4, r5, pc}
 8012788:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801278a:	b112      	cbz	r2, 8012792 <_raise_r+0x1e>
 801278c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012790:	b94b      	cbnz	r3, 80127a6 <_raise_r+0x32>
 8012792:	4620      	mov	r0, r4
 8012794:	f000 f830 	bl	80127f8 <_getpid_r>
 8012798:	462a      	mov	r2, r5
 801279a:	4601      	mov	r1, r0
 801279c:	4620      	mov	r0, r4
 801279e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80127a2:	f000 b817 	b.w	80127d4 <_kill_r>
 80127a6:	2b01      	cmp	r3, #1
 80127a8:	d00a      	beq.n	80127c0 <_raise_r+0x4c>
 80127aa:	1c59      	adds	r1, r3, #1
 80127ac:	d103      	bne.n	80127b6 <_raise_r+0x42>
 80127ae:	2316      	movs	r3, #22
 80127b0:	6003      	str	r3, [r0, #0]
 80127b2:	2001      	movs	r0, #1
 80127b4:	e7e7      	b.n	8012786 <_raise_r+0x12>
 80127b6:	2400      	movs	r4, #0
 80127b8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80127bc:	4628      	mov	r0, r5
 80127be:	4798      	blx	r3
 80127c0:	2000      	movs	r0, #0
 80127c2:	e7e0      	b.n	8012786 <_raise_r+0x12>

080127c4 <raise>:
 80127c4:	4b02      	ldr	r3, [pc, #8]	; (80127d0 <raise+0xc>)
 80127c6:	4601      	mov	r1, r0
 80127c8:	6818      	ldr	r0, [r3, #0]
 80127ca:	f7ff bfd3 	b.w	8012774 <_raise_r>
 80127ce:	bf00      	nop
 80127d0:	20000020 	.word	0x20000020

080127d4 <_kill_r>:
 80127d4:	b538      	push	{r3, r4, r5, lr}
 80127d6:	4d07      	ldr	r5, [pc, #28]	; (80127f4 <_kill_r+0x20>)
 80127d8:	2300      	movs	r3, #0
 80127da:	4604      	mov	r4, r0
 80127dc:	4608      	mov	r0, r1
 80127de:	4611      	mov	r1, r2
 80127e0:	602b      	str	r3, [r5, #0]
 80127e2:	f7f3 f969 	bl	8005ab8 <_kill>
 80127e6:	1c43      	adds	r3, r0, #1
 80127e8:	d102      	bne.n	80127f0 <_kill_r+0x1c>
 80127ea:	682b      	ldr	r3, [r5, #0]
 80127ec:	b103      	cbz	r3, 80127f0 <_kill_r+0x1c>
 80127ee:	6023      	str	r3, [r4, #0]
 80127f0:	bd38      	pop	{r3, r4, r5, pc}
 80127f2:	bf00      	nop
 80127f4:	2000635c 	.word	0x2000635c

080127f8 <_getpid_r>:
 80127f8:	f7f3 b956 	b.w	8005aa8 <_getpid>

080127fc <__sread>:
 80127fc:	b510      	push	{r4, lr}
 80127fe:	460c      	mov	r4, r1
 8012800:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012804:	f000 f894 	bl	8012930 <_read_r>
 8012808:	2800      	cmp	r0, #0
 801280a:	bfab      	itete	ge
 801280c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801280e:	89a3      	ldrhlt	r3, [r4, #12]
 8012810:	181b      	addge	r3, r3, r0
 8012812:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8012816:	bfac      	ite	ge
 8012818:	6563      	strge	r3, [r4, #84]	; 0x54
 801281a:	81a3      	strhlt	r3, [r4, #12]
 801281c:	bd10      	pop	{r4, pc}

0801281e <__swrite>:
 801281e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012822:	461f      	mov	r7, r3
 8012824:	898b      	ldrh	r3, [r1, #12]
 8012826:	05db      	lsls	r3, r3, #23
 8012828:	4605      	mov	r5, r0
 801282a:	460c      	mov	r4, r1
 801282c:	4616      	mov	r6, r2
 801282e:	d505      	bpl.n	801283c <__swrite+0x1e>
 8012830:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012834:	2302      	movs	r3, #2
 8012836:	2200      	movs	r2, #0
 8012838:	f000 f868 	bl	801290c <_lseek_r>
 801283c:	89a3      	ldrh	r3, [r4, #12]
 801283e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012842:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012846:	81a3      	strh	r3, [r4, #12]
 8012848:	4632      	mov	r2, r6
 801284a:	463b      	mov	r3, r7
 801284c:	4628      	mov	r0, r5
 801284e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012852:	f000 b817 	b.w	8012884 <_write_r>

08012856 <__sseek>:
 8012856:	b510      	push	{r4, lr}
 8012858:	460c      	mov	r4, r1
 801285a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801285e:	f000 f855 	bl	801290c <_lseek_r>
 8012862:	1c43      	adds	r3, r0, #1
 8012864:	89a3      	ldrh	r3, [r4, #12]
 8012866:	bf15      	itete	ne
 8012868:	6560      	strne	r0, [r4, #84]	; 0x54
 801286a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801286e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8012872:	81a3      	strheq	r3, [r4, #12]
 8012874:	bf18      	it	ne
 8012876:	81a3      	strhne	r3, [r4, #12]
 8012878:	bd10      	pop	{r4, pc}

0801287a <__sclose>:
 801287a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801287e:	f000 b813 	b.w	80128a8 <_close_r>
	...

08012884 <_write_r>:
 8012884:	b538      	push	{r3, r4, r5, lr}
 8012886:	4d07      	ldr	r5, [pc, #28]	; (80128a4 <_write_r+0x20>)
 8012888:	4604      	mov	r4, r0
 801288a:	4608      	mov	r0, r1
 801288c:	4611      	mov	r1, r2
 801288e:	2200      	movs	r2, #0
 8012890:	602a      	str	r2, [r5, #0]
 8012892:	461a      	mov	r2, r3
 8012894:	f7f3 f947 	bl	8005b26 <_write>
 8012898:	1c43      	adds	r3, r0, #1
 801289a:	d102      	bne.n	80128a2 <_write_r+0x1e>
 801289c:	682b      	ldr	r3, [r5, #0]
 801289e:	b103      	cbz	r3, 80128a2 <_write_r+0x1e>
 80128a0:	6023      	str	r3, [r4, #0]
 80128a2:	bd38      	pop	{r3, r4, r5, pc}
 80128a4:	2000635c 	.word	0x2000635c

080128a8 <_close_r>:
 80128a8:	b538      	push	{r3, r4, r5, lr}
 80128aa:	4d06      	ldr	r5, [pc, #24]	; (80128c4 <_close_r+0x1c>)
 80128ac:	2300      	movs	r3, #0
 80128ae:	4604      	mov	r4, r0
 80128b0:	4608      	mov	r0, r1
 80128b2:	602b      	str	r3, [r5, #0]
 80128b4:	f7f3 f953 	bl	8005b5e <_close>
 80128b8:	1c43      	adds	r3, r0, #1
 80128ba:	d102      	bne.n	80128c2 <_close_r+0x1a>
 80128bc:	682b      	ldr	r3, [r5, #0]
 80128be:	b103      	cbz	r3, 80128c2 <_close_r+0x1a>
 80128c0:	6023      	str	r3, [r4, #0]
 80128c2:	bd38      	pop	{r3, r4, r5, pc}
 80128c4:	2000635c 	.word	0x2000635c

080128c8 <_fstat_r>:
 80128c8:	b538      	push	{r3, r4, r5, lr}
 80128ca:	4d07      	ldr	r5, [pc, #28]	; (80128e8 <_fstat_r+0x20>)
 80128cc:	2300      	movs	r3, #0
 80128ce:	4604      	mov	r4, r0
 80128d0:	4608      	mov	r0, r1
 80128d2:	4611      	mov	r1, r2
 80128d4:	602b      	str	r3, [r5, #0]
 80128d6:	f7f3 f94e 	bl	8005b76 <_fstat>
 80128da:	1c43      	adds	r3, r0, #1
 80128dc:	d102      	bne.n	80128e4 <_fstat_r+0x1c>
 80128de:	682b      	ldr	r3, [r5, #0]
 80128e0:	b103      	cbz	r3, 80128e4 <_fstat_r+0x1c>
 80128e2:	6023      	str	r3, [r4, #0]
 80128e4:	bd38      	pop	{r3, r4, r5, pc}
 80128e6:	bf00      	nop
 80128e8:	2000635c 	.word	0x2000635c

080128ec <_isatty_r>:
 80128ec:	b538      	push	{r3, r4, r5, lr}
 80128ee:	4d06      	ldr	r5, [pc, #24]	; (8012908 <_isatty_r+0x1c>)
 80128f0:	2300      	movs	r3, #0
 80128f2:	4604      	mov	r4, r0
 80128f4:	4608      	mov	r0, r1
 80128f6:	602b      	str	r3, [r5, #0]
 80128f8:	f7f3 f94d 	bl	8005b96 <_isatty>
 80128fc:	1c43      	adds	r3, r0, #1
 80128fe:	d102      	bne.n	8012906 <_isatty_r+0x1a>
 8012900:	682b      	ldr	r3, [r5, #0]
 8012902:	b103      	cbz	r3, 8012906 <_isatty_r+0x1a>
 8012904:	6023      	str	r3, [r4, #0]
 8012906:	bd38      	pop	{r3, r4, r5, pc}
 8012908:	2000635c 	.word	0x2000635c

0801290c <_lseek_r>:
 801290c:	b538      	push	{r3, r4, r5, lr}
 801290e:	4d07      	ldr	r5, [pc, #28]	; (801292c <_lseek_r+0x20>)
 8012910:	4604      	mov	r4, r0
 8012912:	4608      	mov	r0, r1
 8012914:	4611      	mov	r1, r2
 8012916:	2200      	movs	r2, #0
 8012918:	602a      	str	r2, [r5, #0]
 801291a:	461a      	mov	r2, r3
 801291c:	f7f3 f946 	bl	8005bac <_lseek>
 8012920:	1c43      	adds	r3, r0, #1
 8012922:	d102      	bne.n	801292a <_lseek_r+0x1e>
 8012924:	682b      	ldr	r3, [r5, #0]
 8012926:	b103      	cbz	r3, 801292a <_lseek_r+0x1e>
 8012928:	6023      	str	r3, [r4, #0]
 801292a:	bd38      	pop	{r3, r4, r5, pc}
 801292c:	2000635c 	.word	0x2000635c

08012930 <_read_r>:
 8012930:	b538      	push	{r3, r4, r5, lr}
 8012932:	4d07      	ldr	r5, [pc, #28]	; (8012950 <_read_r+0x20>)
 8012934:	4604      	mov	r4, r0
 8012936:	4608      	mov	r0, r1
 8012938:	4611      	mov	r1, r2
 801293a:	2200      	movs	r2, #0
 801293c:	602a      	str	r2, [r5, #0]
 801293e:	461a      	mov	r2, r3
 8012940:	f7f3 f8d4 	bl	8005aec <_read>
 8012944:	1c43      	adds	r3, r0, #1
 8012946:	d102      	bne.n	801294e <_read_r+0x1e>
 8012948:	682b      	ldr	r3, [r5, #0]
 801294a:	b103      	cbz	r3, 801294e <_read_r+0x1e>
 801294c:	6023      	str	r3, [r4, #0]
 801294e:	bd38      	pop	{r3, r4, r5, pc}
 8012950:	2000635c 	.word	0x2000635c

08012954 <cosf>:
 8012954:	ee10 3a10 	vmov	r3, s0
 8012958:	b507      	push	{r0, r1, r2, lr}
 801295a:	4a1e      	ldr	r2, [pc, #120]	; (80129d4 <cosf+0x80>)
 801295c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012960:	4293      	cmp	r3, r2
 8012962:	dc06      	bgt.n	8012972 <cosf+0x1e>
 8012964:	eddf 0a1c 	vldr	s1, [pc, #112]	; 80129d8 <cosf+0x84>
 8012968:	b003      	add	sp, #12
 801296a:	f85d eb04 	ldr.w	lr, [sp], #4
 801296e:	f000 be95 	b.w	801369c <__kernel_cosf>
 8012972:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8012976:	db04      	blt.n	8012982 <cosf+0x2e>
 8012978:	ee30 0a40 	vsub.f32	s0, s0, s0
 801297c:	b003      	add	sp, #12
 801297e:	f85d fb04 	ldr.w	pc, [sp], #4
 8012982:	4668      	mov	r0, sp
 8012984:	f000 fd4a 	bl	801341c <__ieee754_rem_pio2f>
 8012988:	f000 0003 	and.w	r0, r0, #3
 801298c:	2801      	cmp	r0, #1
 801298e:	d009      	beq.n	80129a4 <cosf+0x50>
 8012990:	2802      	cmp	r0, #2
 8012992:	d010      	beq.n	80129b6 <cosf+0x62>
 8012994:	b9b0      	cbnz	r0, 80129c4 <cosf+0x70>
 8012996:	eddd 0a01 	vldr	s1, [sp, #4]
 801299a:	ed9d 0a00 	vldr	s0, [sp]
 801299e:	f000 fe7d 	bl	801369c <__kernel_cosf>
 80129a2:	e7eb      	b.n	801297c <cosf+0x28>
 80129a4:	eddd 0a01 	vldr	s1, [sp, #4]
 80129a8:	ed9d 0a00 	vldr	s0, [sp]
 80129ac:	f001 f94c 	bl	8013c48 <__kernel_sinf>
 80129b0:	eeb1 0a40 	vneg.f32	s0, s0
 80129b4:	e7e2      	b.n	801297c <cosf+0x28>
 80129b6:	eddd 0a01 	vldr	s1, [sp, #4]
 80129ba:	ed9d 0a00 	vldr	s0, [sp]
 80129be:	f000 fe6d 	bl	801369c <__kernel_cosf>
 80129c2:	e7f5      	b.n	80129b0 <cosf+0x5c>
 80129c4:	eddd 0a01 	vldr	s1, [sp, #4]
 80129c8:	ed9d 0a00 	vldr	s0, [sp]
 80129cc:	2001      	movs	r0, #1
 80129ce:	f001 f93b 	bl	8013c48 <__kernel_sinf>
 80129d2:	e7d3      	b.n	801297c <cosf+0x28>
 80129d4:	3f490fd8 	.word	0x3f490fd8
 80129d8:	00000000 	.word	0x00000000

080129dc <sinf>:
 80129dc:	ee10 3a10 	vmov	r3, s0
 80129e0:	b507      	push	{r0, r1, r2, lr}
 80129e2:	4a1f      	ldr	r2, [pc, #124]	; (8012a60 <sinf+0x84>)
 80129e4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80129e8:	4293      	cmp	r3, r2
 80129ea:	dc07      	bgt.n	80129fc <sinf+0x20>
 80129ec:	eddf 0a1d 	vldr	s1, [pc, #116]	; 8012a64 <sinf+0x88>
 80129f0:	2000      	movs	r0, #0
 80129f2:	b003      	add	sp, #12
 80129f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80129f8:	f001 b926 	b.w	8013c48 <__kernel_sinf>
 80129fc:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8012a00:	db04      	blt.n	8012a0c <sinf+0x30>
 8012a02:	ee30 0a40 	vsub.f32	s0, s0, s0
 8012a06:	b003      	add	sp, #12
 8012a08:	f85d fb04 	ldr.w	pc, [sp], #4
 8012a0c:	4668      	mov	r0, sp
 8012a0e:	f000 fd05 	bl	801341c <__ieee754_rem_pio2f>
 8012a12:	f000 0003 	and.w	r0, r0, #3
 8012a16:	2801      	cmp	r0, #1
 8012a18:	d00a      	beq.n	8012a30 <sinf+0x54>
 8012a1a:	2802      	cmp	r0, #2
 8012a1c:	d00f      	beq.n	8012a3e <sinf+0x62>
 8012a1e:	b9c0      	cbnz	r0, 8012a52 <sinf+0x76>
 8012a20:	eddd 0a01 	vldr	s1, [sp, #4]
 8012a24:	ed9d 0a00 	vldr	s0, [sp]
 8012a28:	2001      	movs	r0, #1
 8012a2a:	f001 f90d 	bl	8013c48 <__kernel_sinf>
 8012a2e:	e7ea      	b.n	8012a06 <sinf+0x2a>
 8012a30:	eddd 0a01 	vldr	s1, [sp, #4]
 8012a34:	ed9d 0a00 	vldr	s0, [sp]
 8012a38:	f000 fe30 	bl	801369c <__kernel_cosf>
 8012a3c:	e7e3      	b.n	8012a06 <sinf+0x2a>
 8012a3e:	eddd 0a01 	vldr	s1, [sp, #4]
 8012a42:	ed9d 0a00 	vldr	s0, [sp]
 8012a46:	2001      	movs	r0, #1
 8012a48:	f001 f8fe 	bl	8013c48 <__kernel_sinf>
 8012a4c:	eeb1 0a40 	vneg.f32	s0, s0
 8012a50:	e7d9      	b.n	8012a06 <sinf+0x2a>
 8012a52:	eddd 0a01 	vldr	s1, [sp, #4]
 8012a56:	ed9d 0a00 	vldr	s0, [sp]
 8012a5a:	f000 fe1f 	bl	801369c <__kernel_cosf>
 8012a5e:	e7f5      	b.n	8012a4c <sinf+0x70>
 8012a60:	3f490fd8 	.word	0x3f490fd8
 8012a64:	00000000 	.word	0x00000000

08012a68 <asinf>:
 8012a68:	b508      	push	{r3, lr}
 8012a6a:	ed2d 8b02 	vpush	{d8}
 8012a6e:	eeb0 8a40 	vmov.f32	s16, s0
 8012a72:	f000 f87f 	bl	8012b74 <__ieee754_asinf>
 8012a76:	eeb4 8a48 	vcmp.f32	s16, s16
 8012a7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a7e:	eef0 8a40 	vmov.f32	s17, s0
 8012a82:	d615      	bvs.n	8012ab0 <asinf+0x48>
 8012a84:	eeb0 0a48 	vmov.f32	s0, s16
 8012a88:	f001 fa1c 	bl	8013ec4 <fabsf>
 8012a8c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8012a90:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8012a94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a98:	dd0a      	ble.n	8012ab0 <asinf+0x48>
 8012a9a:	f7fd f847 	bl	800fb2c <__errno>
 8012a9e:	ecbd 8b02 	vpop	{d8}
 8012aa2:	2321      	movs	r3, #33	; 0x21
 8012aa4:	6003      	str	r3, [r0, #0]
 8012aa6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8012aaa:	4804      	ldr	r0, [pc, #16]	; (8012abc <asinf+0x54>)
 8012aac:	f001 ba60 	b.w	8013f70 <nanf>
 8012ab0:	eeb0 0a68 	vmov.f32	s0, s17
 8012ab4:	ecbd 8b02 	vpop	{d8}
 8012ab8:	bd08      	pop	{r3, pc}
 8012aba:	bf00      	nop
 8012abc:	080146e8 	.word	0x080146e8

08012ac0 <atan2f>:
 8012ac0:	f000 b93e 	b.w	8012d40 <__ieee754_atan2f>

08012ac4 <powf>:
 8012ac4:	b508      	push	{r3, lr}
 8012ac6:	ed2d 8b04 	vpush	{d8-d9}
 8012aca:	eeb0 8a60 	vmov.f32	s16, s1
 8012ace:	eeb0 9a40 	vmov.f32	s18, s0
 8012ad2:	f000 f9d5 	bl	8012e80 <__ieee754_powf>
 8012ad6:	eeb4 8a48 	vcmp.f32	s16, s16
 8012ada:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ade:	eef0 8a40 	vmov.f32	s17, s0
 8012ae2:	d63e      	bvs.n	8012b62 <powf+0x9e>
 8012ae4:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8012ae8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012aec:	d112      	bne.n	8012b14 <powf+0x50>
 8012aee:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8012af2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012af6:	d039      	beq.n	8012b6c <powf+0xa8>
 8012af8:	eeb0 0a48 	vmov.f32	s0, s16
 8012afc:	f001 f9e9 	bl	8013ed2 <finitef>
 8012b00:	b378      	cbz	r0, 8012b62 <powf+0x9e>
 8012b02:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8012b06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b0a:	d52a      	bpl.n	8012b62 <powf+0x9e>
 8012b0c:	f7fd f80e 	bl	800fb2c <__errno>
 8012b10:	2322      	movs	r3, #34	; 0x22
 8012b12:	e014      	b.n	8012b3e <powf+0x7a>
 8012b14:	f001 f9dd 	bl	8013ed2 <finitef>
 8012b18:	b998      	cbnz	r0, 8012b42 <powf+0x7e>
 8012b1a:	eeb0 0a49 	vmov.f32	s0, s18
 8012b1e:	f001 f9d8 	bl	8013ed2 <finitef>
 8012b22:	b170      	cbz	r0, 8012b42 <powf+0x7e>
 8012b24:	eeb0 0a48 	vmov.f32	s0, s16
 8012b28:	f001 f9d3 	bl	8013ed2 <finitef>
 8012b2c:	b148      	cbz	r0, 8012b42 <powf+0x7e>
 8012b2e:	eef4 8a68 	vcmp.f32	s17, s17
 8012b32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b36:	d7e9      	bvc.n	8012b0c <powf+0x48>
 8012b38:	f7fc fff8 	bl	800fb2c <__errno>
 8012b3c:	2321      	movs	r3, #33	; 0x21
 8012b3e:	6003      	str	r3, [r0, #0]
 8012b40:	e00f      	b.n	8012b62 <powf+0x9e>
 8012b42:	eef5 8a40 	vcmp.f32	s17, #0.0
 8012b46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b4a:	d10a      	bne.n	8012b62 <powf+0x9e>
 8012b4c:	eeb0 0a49 	vmov.f32	s0, s18
 8012b50:	f001 f9bf 	bl	8013ed2 <finitef>
 8012b54:	b128      	cbz	r0, 8012b62 <powf+0x9e>
 8012b56:	eeb0 0a48 	vmov.f32	s0, s16
 8012b5a:	f001 f9ba 	bl	8013ed2 <finitef>
 8012b5e:	2800      	cmp	r0, #0
 8012b60:	d1d4      	bne.n	8012b0c <powf+0x48>
 8012b62:	eeb0 0a68 	vmov.f32	s0, s17
 8012b66:	ecbd 8b04 	vpop	{d8-d9}
 8012b6a:	bd08      	pop	{r3, pc}
 8012b6c:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8012b70:	e7f7      	b.n	8012b62 <powf+0x9e>
	...

08012b74 <__ieee754_asinf>:
 8012b74:	b538      	push	{r3, r4, r5, lr}
 8012b76:	ee10 5a10 	vmov	r5, s0
 8012b7a:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8012b7e:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8012b82:	ed2d 8b04 	vpush	{d8-d9}
 8012b86:	d10c      	bne.n	8012ba2 <__ieee754_asinf+0x2e>
 8012b88:	eddf 7a5d 	vldr	s15, [pc, #372]	; 8012d00 <__ieee754_asinf+0x18c>
 8012b8c:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8012d04 <__ieee754_asinf+0x190>
 8012b90:	ee60 7a27 	vmul.f32	s15, s0, s15
 8012b94:	eee0 7a07 	vfma.f32	s15, s0, s14
 8012b98:	eeb0 0a67 	vmov.f32	s0, s15
 8012b9c:	ecbd 8b04 	vpop	{d8-d9}
 8012ba0:	bd38      	pop	{r3, r4, r5, pc}
 8012ba2:	dd04      	ble.n	8012bae <__ieee754_asinf+0x3a>
 8012ba4:	ee70 7a40 	vsub.f32	s15, s0, s0
 8012ba8:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8012bac:	e7f6      	b.n	8012b9c <__ieee754_asinf+0x28>
 8012bae:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8012bb2:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8012bb6:	da0b      	bge.n	8012bd0 <__ieee754_asinf+0x5c>
 8012bb8:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 8012bbc:	da52      	bge.n	8012c64 <__ieee754_asinf+0xf0>
 8012bbe:	eddf 7a52 	vldr	s15, [pc, #328]	; 8012d08 <__ieee754_asinf+0x194>
 8012bc2:	ee70 7a27 	vadd.f32	s15, s0, s15
 8012bc6:	eef4 7ae8 	vcmpe.f32	s15, s17
 8012bca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012bce:	dce5      	bgt.n	8012b9c <__ieee754_asinf+0x28>
 8012bd0:	f001 f978 	bl	8013ec4 <fabsf>
 8012bd4:	ee38 0ac0 	vsub.f32	s0, s17, s0
 8012bd8:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 8012bdc:	ee20 8a08 	vmul.f32	s16, s0, s16
 8012be0:	eddf 7a4a 	vldr	s15, [pc, #296]	; 8012d0c <__ieee754_asinf+0x198>
 8012be4:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8012d10 <__ieee754_asinf+0x19c>
 8012be8:	ed9f 9a4a 	vldr	s18, [pc, #296]	; 8012d14 <__ieee754_asinf+0x1a0>
 8012bec:	eea8 7a27 	vfma.f32	s14, s16, s15
 8012bf0:	eddf 7a49 	vldr	s15, [pc, #292]	; 8012d18 <__ieee754_asinf+0x1a4>
 8012bf4:	eee7 7a08 	vfma.f32	s15, s14, s16
 8012bf8:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8012d1c <__ieee754_asinf+0x1a8>
 8012bfc:	eea7 7a88 	vfma.f32	s14, s15, s16
 8012c00:	eddf 7a47 	vldr	s15, [pc, #284]	; 8012d20 <__ieee754_asinf+0x1ac>
 8012c04:	eee7 7a08 	vfma.f32	s15, s14, s16
 8012c08:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8012d24 <__ieee754_asinf+0x1b0>
 8012c0c:	eea7 9a88 	vfma.f32	s18, s15, s16
 8012c10:	eddf 7a45 	vldr	s15, [pc, #276]	; 8012d28 <__ieee754_asinf+0x1b4>
 8012c14:	eee8 7a07 	vfma.f32	s15, s16, s14
 8012c18:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8012d2c <__ieee754_asinf+0x1b8>
 8012c1c:	eea7 7a88 	vfma.f32	s14, s15, s16
 8012c20:	eddf 7a43 	vldr	s15, [pc, #268]	; 8012d30 <__ieee754_asinf+0x1bc>
 8012c24:	eee7 7a08 	vfma.f32	s15, s14, s16
 8012c28:	eeb0 0a48 	vmov.f32	s0, s16
 8012c2c:	eee7 8a88 	vfma.f32	s17, s15, s16
 8012c30:	f000 fd30 	bl	8013694 <__ieee754_sqrtf>
 8012c34:	4b3f      	ldr	r3, [pc, #252]	; (8012d34 <__ieee754_asinf+0x1c0>)
 8012c36:	ee29 9a08 	vmul.f32	s18, s18, s16
 8012c3a:	429c      	cmp	r4, r3
 8012c3c:	ee89 6a28 	vdiv.f32	s12, s18, s17
 8012c40:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8012c44:	dd3d      	ble.n	8012cc2 <__ieee754_asinf+0x14e>
 8012c46:	eea0 0a06 	vfma.f32	s0, s0, s12
 8012c4a:	eddf 7a3b 	vldr	s15, [pc, #236]	; 8012d38 <__ieee754_asinf+0x1c4>
 8012c4e:	eee0 7a26 	vfma.f32	s15, s0, s13
 8012c52:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8012d04 <__ieee754_asinf+0x190>
 8012c56:	ee30 0a67 	vsub.f32	s0, s0, s15
 8012c5a:	2d00      	cmp	r5, #0
 8012c5c:	bfd8      	it	le
 8012c5e:	eeb1 0a40 	vnegle.f32	s0, s0
 8012c62:	e79b      	b.n	8012b9c <__ieee754_asinf+0x28>
 8012c64:	ee60 7a00 	vmul.f32	s15, s0, s0
 8012c68:	eddf 6a28 	vldr	s13, [pc, #160]	; 8012d0c <__ieee754_asinf+0x198>
 8012c6c:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8012d10 <__ieee754_asinf+0x19c>
 8012c70:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 8012d24 <__ieee754_asinf+0x1b0>
 8012c74:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8012c78:	eddf 6a27 	vldr	s13, [pc, #156]	; 8012d18 <__ieee754_asinf+0x1a4>
 8012c7c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8012c80:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8012d1c <__ieee754_asinf+0x1a8>
 8012c84:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8012c88:	eddf 6a25 	vldr	s13, [pc, #148]	; 8012d20 <__ieee754_asinf+0x1ac>
 8012c8c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8012c90:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8012d14 <__ieee754_asinf+0x1a0>
 8012c94:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8012c98:	eddf 6a23 	vldr	s13, [pc, #140]	; 8012d28 <__ieee754_asinf+0x1b4>
 8012c9c:	eee7 6a86 	vfma.f32	s13, s15, s12
 8012ca0:	ed9f 6a22 	vldr	s12, [pc, #136]	; 8012d2c <__ieee754_asinf+0x1b8>
 8012ca4:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8012ca8:	eddf 6a21 	vldr	s13, [pc, #132]	; 8012d30 <__ieee754_asinf+0x1bc>
 8012cac:	eee6 6a27 	vfma.f32	s13, s12, s15
 8012cb0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012cb4:	eee6 8aa7 	vfma.f32	s17, s13, s15
 8012cb8:	eec7 7a28 	vdiv.f32	s15, s14, s17
 8012cbc:	eea0 0a27 	vfma.f32	s0, s0, s15
 8012cc0:	e76c      	b.n	8012b9c <__ieee754_asinf+0x28>
 8012cc2:	ee10 3a10 	vmov	r3, s0
 8012cc6:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8012cca:	f023 030f 	bic.w	r3, r3, #15
 8012cce:	ee07 3a10 	vmov	s14, r3
 8012cd2:	eea7 8a47 	vfms.f32	s16, s14, s14
 8012cd6:	ee70 7a07 	vadd.f32	s15, s0, s14
 8012cda:	ee30 0a00 	vadd.f32	s0, s0, s0
 8012cde:	eec8 5a27 	vdiv.f32	s11, s16, s15
 8012ce2:	eddf 7a07 	vldr	s15, [pc, #28]	; 8012d00 <__ieee754_asinf+0x18c>
 8012ce6:	eee5 7ae6 	vfms.f32	s15, s11, s13
 8012cea:	eed0 7a06 	vfnms.f32	s15, s0, s12
 8012cee:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8012d3c <__ieee754_asinf+0x1c8>
 8012cf2:	eeb0 6a40 	vmov.f32	s12, s0
 8012cf6:	eea7 6a66 	vfms.f32	s12, s14, s13
 8012cfa:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8012cfe:	e7aa      	b.n	8012c56 <__ieee754_asinf+0xe2>
 8012d00:	b33bbd2e 	.word	0xb33bbd2e
 8012d04:	3fc90fdb 	.word	0x3fc90fdb
 8012d08:	7149f2ca 	.word	0x7149f2ca
 8012d0c:	3811ef08 	.word	0x3811ef08
 8012d10:	3a4f7f04 	.word	0x3a4f7f04
 8012d14:	3e2aaaab 	.word	0x3e2aaaab
 8012d18:	bd241146 	.word	0xbd241146
 8012d1c:	3e4e0aa8 	.word	0x3e4e0aa8
 8012d20:	bea6b090 	.word	0xbea6b090
 8012d24:	3d9dc62e 	.word	0x3d9dc62e
 8012d28:	bf303361 	.word	0xbf303361
 8012d2c:	4001572d 	.word	0x4001572d
 8012d30:	c019d139 	.word	0xc019d139
 8012d34:	3f799999 	.word	0x3f799999
 8012d38:	333bbd2e 	.word	0x333bbd2e
 8012d3c:	3f490fdb 	.word	0x3f490fdb

08012d40 <__ieee754_atan2f>:
 8012d40:	ee10 2a90 	vmov	r2, s1
 8012d44:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8012d48:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8012d4c:	b510      	push	{r4, lr}
 8012d4e:	eef0 7a40 	vmov.f32	s15, s0
 8012d52:	dc06      	bgt.n	8012d62 <__ieee754_atan2f+0x22>
 8012d54:	ee10 0a10 	vmov	r0, s0
 8012d58:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8012d5c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8012d60:	dd04      	ble.n	8012d6c <__ieee754_atan2f+0x2c>
 8012d62:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8012d66:	eeb0 0a67 	vmov.f32	s0, s15
 8012d6a:	bd10      	pop	{r4, pc}
 8012d6c:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8012d70:	d103      	bne.n	8012d7a <__ieee754_atan2f+0x3a>
 8012d72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012d76:	f000 bfd1 	b.w	8013d1c <atanf>
 8012d7a:	1794      	asrs	r4, r2, #30
 8012d7c:	f004 0402 	and.w	r4, r4, #2
 8012d80:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8012d84:	b943      	cbnz	r3, 8012d98 <__ieee754_atan2f+0x58>
 8012d86:	2c02      	cmp	r4, #2
 8012d88:	d05e      	beq.n	8012e48 <__ieee754_atan2f+0x108>
 8012d8a:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8012e5c <__ieee754_atan2f+0x11c>
 8012d8e:	2c03      	cmp	r4, #3
 8012d90:	bf08      	it	eq
 8012d92:	eef0 7a47 	vmoveq.f32	s15, s14
 8012d96:	e7e6      	b.n	8012d66 <__ieee754_atan2f+0x26>
 8012d98:	b941      	cbnz	r1, 8012dac <__ieee754_atan2f+0x6c>
 8012d9a:	eddf 7a31 	vldr	s15, [pc, #196]	; 8012e60 <__ieee754_atan2f+0x120>
 8012d9e:	ed9f 0a31 	vldr	s0, [pc, #196]	; 8012e64 <__ieee754_atan2f+0x124>
 8012da2:	2800      	cmp	r0, #0
 8012da4:	bfb8      	it	lt
 8012da6:	eef0 7a40 	vmovlt.f32	s15, s0
 8012daa:	e7dc      	b.n	8012d66 <__ieee754_atan2f+0x26>
 8012dac:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8012db0:	d110      	bne.n	8012dd4 <__ieee754_atan2f+0x94>
 8012db2:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8012db6:	f104 34ff 	add.w	r4, r4, #4294967295
 8012dba:	d107      	bne.n	8012dcc <__ieee754_atan2f+0x8c>
 8012dbc:	2c02      	cmp	r4, #2
 8012dbe:	d846      	bhi.n	8012e4e <__ieee754_atan2f+0x10e>
 8012dc0:	4b29      	ldr	r3, [pc, #164]	; (8012e68 <__ieee754_atan2f+0x128>)
 8012dc2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8012dc6:	edd4 7a00 	vldr	s15, [r4]
 8012dca:	e7cc      	b.n	8012d66 <__ieee754_atan2f+0x26>
 8012dcc:	2c02      	cmp	r4, #2
 8012dce:	d841      	bhi.n	8012e54 <__ieee754_atan2f+0x114>
 8012dd0:	4b26      	ldr	r3, [pc, #152]	; (8012e6c <__ieee754_atan2f+0x12c>)
 8012dd2:	e7f6      	b.n	8012dc2 <__ieee754_atan2f+0x82>
 8012dd4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8012dd8:	d0df      	beq.n	8012d9a <__ieee754_atan2f+0x5a>
 8012dda:	1a5b      	subs	r3, r3, r1
 8012ddc:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 8012de0:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8012de4:	da1a      	bge.n	8012e1c <__ieee754_atan2f+0xdc>
 8012de6:	2a00      	cmp	r2, #0
 8012de8:	da01      	bge.n	8012dee <__ieee754_atan2f+0xae>
 8012dea:	313c      	adds	r1, #60	; 0x3c
 8012dec:	db19      	blt.n	8012e22 <__ieee754_atan2f+0xe2>
 8012dee:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8012df2:	f001 f867 	bl	8013ec4 <fabsf>
 8012df6:	f000 ff91 	bl	8013d1c <atanf>
 8012dfa:	eef0 7a40 	vmov.f32	s15, s0
 8012dfe:	2c01      	cmp	r4, #1
 8012e00:	d012      	beq.n	8012e28 <__ieee754_atan2f+0xe8>
 8012e02:	2c02      	cmp	r4, #2
 8012e04:	d017      	beq.n	8012e36 <__ieee754_atan2f+0xf6>
 8012e06:	2c00      	cmp	r4, #0
 8012e08:	d0ad      	beq.n	8012d66 <__ieee754_atan2f+0x26>
 8012e0a:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8012e70 <__ieee754_atan2f+0x130>
 8012e0e:	ee77 7a80 	vadd.f32	s15, s15, s0
 8012e12:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8012e74 <__ieee754_atan2f+0x134>
 8012e16:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8012e1a:	e7a4      	b.n	8012d66 <__ieee754_atan2f+0x26>
 8012e1c:	eddf 7a10 	vldr	s15, [pc, #64]	; 8012e60 <__ieee754_atan2f+0x120>
 8012e20:	e7ed      	b.n	8012dfe <__ieee754_atan2f+0xbe>
 8012e22:	eddf 7a15 	vldr	s15, [pc, #84]	; 8012e78 <__ieee754_atan2f+0x138>
 8012e26:	e7ea      	b.n	8012dfe <__ieee754_atan2f+0xbe>
 8012e28:	ee17 3a90 	vmov	r3, s15
 8012e2c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8012e30:	ee07 3a90 	vmov	s15, r3
 8012e34:	e797      	b.n	8012d66 <__ieee754_atan2f+0x26>
 8012e36:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8012e70 <__ieee754_atan2f+0x130>
 8012e3a:	ee77 7a80 	vadd.f32	s15, s15, s0
 8012e3e:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8012e74 <__ieee754_atan2f+0x134>
 8012e42:	ee70 7a67 	vsub.f32	s15, s0, s15
 8012e46:	e78e      	b.n	8012d66 <__ieee754_atan2f+0x26>
 8012e48:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8012e74 <__ieee754_atan2f+0x134>
 8012e4c:	e78b      	b.n	8012d66 <__ieee754_atan2f+0x26>
 8012e4e:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8012e7c <__ieee754_atan2f+0x13c>
 8012e52:	e788      	b.n	8012d66 <__ieee754_atan2f+0x26>
 8012e54:	eddf 7a08 	vldr	s15, [pc, #32]	; 8012e78 <__ieee754_atan2f+0x138>
 8012e58:	e785      	b.n	8012d66 <__ieee754_atan2f+0x26>
 8012e5a:	bf00      	nop
 8012e5c:	c0490fdb 	.word	0xc0490fdb
 8012e60:	3fc90fdb 	.word	0x3fc90fdb
 8012e64:	bfc90fdb 	.word	0xbfc90fdb
 8012e68:	08014854 	.word	0x08014854
 8012e6c:	08014860 	.word	0x08014860
 8012e70:	33bbbd2e 	.word	0x33bbbd2e
 8012e74:	40490fdb 	.word	0x40490fdb
 8012e78:	00000000 	.word	0x00000000
 8012e7c:	3f490fdb 	.word	0x3f490fdb

08012e80 <__ieee754_powf>:
 8012e80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012e84:	ee10 4a90 	vmov	r4, s1
 8012e88:	f034 4800 	bics.w	r8, r4, #2147483648	; 0x80000000
 8012e8c:	ed2d 8b02 	vpush	{d8}
 8012e90:	ee10 6a10 	vmov	r6, s0
 8012e94:	eeb0 8a40 	vmov.f32	s16, s0
 8012e98:	eef0 8a60 	vmov.f32	s17, s1
 8012e9c:	d10c      	bne.n	8012eb8 <__ieee754_powf+0x38>
 8012e9e:	f486 0680 	eor.w	r6, r6, #4194304	; 0x400000
 8012ea2:	0076      	lsls	r6, r6, #1
 8012ea4:	f516 0f00 	cmn.w	r6, #8388608	; 0x800000
 8012ea8:	f240 8296 	bls.w	80133d8 <__ieee754_powf+0x558>
 8012eac:	ee38 0a28 	vadd.f32	s0, s16, s17
 8012eb0:	ecbd 8b02 	vpop	{d8}
 8012eb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012eb8:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8012ebc:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8012ec0:	dcf4      	bgt.n	8012eac <__ieee754_powf+0x2c>
 8012ec2:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 8012ec6:	dd08      	ble.n	8012eda <__ieee754_powf+0x5a>
 8012ec8:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
 8012ecc:	d1ee      	bne.n	8012eac <__ieee754_powf+0x2c>
 8012ece:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 8012ed2:	0064      	lsls	r4, r4, #1
 8012ed4:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 8012ed8:	e7e6      	b.n	8012ea8 <__ieee754_powf+0x28>
 8012eda:	2e00      	cmp	r6, #0
 8012edc:	da20      	bge.n	8012f20 <__ieee754_powf+0xa0>
 8012ede:	f1b8 4f97 	cmp.w	r8, #1266679808	; 0x4b800000
 8012ee2:	da2d      	bge.n	8012f40 <__ieee754_powf+0xc0>
 8012ee4:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 8012ee8:	f2c0 827f 	blt.w	80133ea <__ieee754_powf+0x56a>
 8012eec:	ea4f 53e8 	mov.w	r3, r8, asr #23
 8012ef0:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8012ef4:	fa48 f703 	asr.w	r7, r8, r3
 8012ef8:	fa07 f303 	lsl.w	r3, r7, r3
 8012efc:	4543      	cmp	r3, r8
 8012efe:	f040 8274 	bne.w	80133ea <__ieee754_powf+0x56a>
 8012f02:	f007 0701 	and.w	r7, r7, #1
 8012f06:	f1c7 0702 	rsb	r7, r7, #2
 8012f0a:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 8012f0e:	d11f      	bne.n	8012f50 <__ieee754_powf+0xd0>
 8012f10:	2c00      	cmp	r4, #0
 8012f12:	f280 8267 	bge.w	80133e4 <__ieee754_powf+0x564>
 8012f16:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8012f1a:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8012f1e:	e7c7      	b.n	8012eb0 <__ieee754_powf+0x30>
 8012f20:	2700      	movs	r7, #0
 8012f22:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 8012f26:	d1f0      	bne.n	8012f0a <__ieee754_powf+0x8a>
 8012f28:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 8012f2c:	f000 8254 	beq.w	80133d8 <__ieee754_powf+0x558>
 8012f30:	dd08      	ble.n	8012f44 <__ieee754_powf+0xc4>
 8012f32:	ed9f 0ac2 	vldr	s0, [pc, #776]	; 801323c <__ieee754_powf+0x3bc>
 8012f36:	2c00      	cmp	r4, #0
 8012f38:	bfa8      	it	ge
 8012f3a:	eeb0 0a68 	vmovge.f32	s0, s17
 8012f3e:	e7b7      	b.n	8012eb0 <__ieee754_powf+0x30>
 8012f40:	2702      	movs	r7, #2
 8012f42:	e7ee      	b.n	8012f22 <__ieee754_powf+0xa2>
 8012f44:	2c00      	cmp	r4, #0
 8012f46:	f280 824a 	bge.w	80133de <__ieee754_powf+0x55e>
 8012f4a:	eeb1 0a68 	vneg.f32	s0, s17
 8012f4e:	e7af      	b.n	8012eb0 <__ieee754_powf+0x30>
 8012f50:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 8012f54:	d102      	bne.n	8012f5c <__ieee754_powf+0xdc>
 8012f56:	ee28 0a08 	vmul.f32	s0, s16, s16
 8012f5a:	e7a9      	b.n	8012eb0 <__ieee754_powf+0x30>
 8012f5c:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8012f60:	eeb0 0a48 	vmov.f32	s0, s16
 8012f64:	d107      	bne.n	8012f76 <__ieee754_powf+0xf6>
 8012f66:	2e00      	cmp	r6, #0
 8012f68:	db05      	blt.n	8012f76 <__ieee754_powf+0xf6>
 8012f6a:	ecbd 8b02 	vpop	{d8}
 8012f6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012f72:	f000 bb8f 	b.w	8013694 <__ieee754_sqrtf>
 8012f76:	f000 ffa5 	bl	8013ec4 <fabsf>
 8012f7a:	b125      	cbz	r5, 8012f86 <__ieee754_powf+0x106>
 8012f7c:	f026 4340 	bic.w	r3, r6, #3221225472	; 0xc0000000
 8012f80:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8012f84:	d116      	bne.n	8012fb4 <__ieee754_powf+0x134>
 8012f86:	2c00      	cmp	r4, #0
 8012f88:	bfbc      	itt	lt
 8012f8a:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 8012f8e:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8012f92:	2e00      	cmp	r6, #0
 8012f94:	da8c      	bge.n	8012eb0 <__ieee754_powf+0x30>
 8012f96:	f1a5 557e 	sub.w	r5, r5, #1065353216	; 0x3f800000
 8012f9a:	ea55 0307 	orrs.w	r3, r5, r7
 8012f9e:	d104      	bne.n	8012faa <__ieee754_powf+0x12a>
 8012fa0:	ee70 7a40 	vsub.f32	s15, s0, s0
 8012fa4:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8012fa8:	e782      	b.n	8012eb0 <__ieee754_powf+0x30>
 8012faa:	2f01      	cmp	r7, #1
 8012fac:	d180      	bne.n	8012eb0 <__ieee754_powf+0x30>
 8012fae:	eeb1 0a40 	vneg.f32	s0, s0
 8012fb2:	e77d      	b.n	8012eb0 <__ieee754_powf+0x30>
 8012fb4:	0ff0      	lsrs	r0, r6, #31
 8012fb6:	3801      	subs	r0, #1
 8012fb8:	ea57 0300 	orrs.w	r3, r7, r0
 8012fbc:	d104      	bne.n	8012fc8 <__ieee754_powf+0x148>
 8012fbe:	ee38 8a48 	vsub.f32	s16, s16, s16
 8012fc2:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8012fc6:	e773      	b.n	8012eb0 <__ieee754_powf+0x30>
 8012fc8:	f1b8 4f9a 	cmp.w	r8, #1291845632	; 0x4d000000
 8012fcc:	dd74      	ble.n	80130b8 <__ieee754_powf+0x238>
 8012fce:	4b9c      	ldr	r3, [pc, #624]	; (8013240 <__ieee754_powf+0x3c0>)
 8012fd0:	429d      	cmp	r5, r3
 8012fd2:	dc08      	bgt.n	8012fe6 <__ieee754_powf+0x166>
 8012fd4:	2c00      	cmp	r4, #0
 8012fd6:	da0b      	bge.n	8012ff0 <__ieee754_powf+0x170>
 8012fd8:	2000      	movs	r0, #0
 8012fda:	ecbd 8b02 	vpop	{d8}
 8012fde:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012fe2:	f000 be95 	b.w	8013d10 <__math_oflowf>
 8012fe6:	4b97      	ldr	r3, [pc, #604]	; (8013244 <__ieee754_powf+0x3c4>)
 8012fe8:	429d      	cmp	r5, r3
 8012fea:	dd08      	ble.n	8012ffe <__ieee754_powf+0x17e>
 8012fec:	2c00      	cmp	r4, #0
 8012fee:	dcf3      	bgt.n	8012fd8 <__ieee754_powf+0x158>
 8012ff0:	2000      	movs	r0, #0
 8012ff2:	ecbd 8b02 	vpop	{d8}
 8012ff6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012ffa:	f000 be83 	b.w	8013d04 <__math_uflowf>
 8012ffe:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8013002:	ee30 0a67 	vsub.f32	s0, s0, s15
 8013006:	eddf 6a90 	vldr	s13, [pc, #576]	; 8013248 <__ieee754_powf+0x3c8>
 801300a:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 801300e:	eee0 6a67 	vfms.f32	s13, s0, s15
 8013012:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8013016:	eee6 7ac0 	vfms.f32	s15, s13, s0
 801301a:	ee20 7a00 	vmul.f32	s14, s0, s0
 801301e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013022:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 801324c <__ieee754_powf+0x3cc>
 8013026:	ee67 7a67 	vnmul.f32	s15, s14, s15
 801302a:	ed9f 7a89 	vldr	s14, [pc, #548]	; 8013250 <__ieee754_powf+0x3d0>
 801302e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8013032:	ed9f 7a88 	vldr	s14, [pc, #544]	; 8013254 <__ieee754_powf+0x3d4>
 8013036:	eef0 6a67 	vmov.f32	s13, s15
 801303a:	eee0 6a07 	vfma.f32	s13, s0, s14
 801303e:	ee16 3a90 	vmov	r3, s13
 8013042:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8013046:	f023 030f 	bic.w	r3, r3, #15
 801304a:	ee00 3a90 	vmov	s1, r3
 801304e:	eee0 0a47 	vfms.f32	s1, s0, s14
 8013052:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8013056:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 801305a:	f024 040f 	bic.w	r4, r4, #15
 801305e:	ee07 4a10 	vmov	s14, r4
 8013062:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8013066:	ee38 7ac7 	vsub.f32	s14, s17, s14
 801306a:	ee07 3a90 	vmov	s15, r3
 801306e:	eee7 0a27 	vfma.f32	s1, s14, s15
 8013072:	3f01      	subs	r7, #1
 8013074:	ea57 0200 	orrs.w	r2, r7, r0
 8013078:	ee07 4a10 	vmov	s14, r4
 801307c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013080:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8013084:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8013088:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 801308c:	ee17 4a10 	vmov	r4, s14
 8013090:	bf08      	it	eq
 8013092:	eeb0 8a40 	vmoveq.f32	s16, s0
 8013096:	2c00      	cmp	r4, #0
 8013098:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801309c:	f340 817e 	ble.w	801339c <__ieee754_powf+0x51c>
 80130a0:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 80130a4:	f340 80f8 	ble.w	8013298 <__ieee754_powf+0x418>
 80130a8:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80130ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80130b0:	bf4c      	ite	mi
 80130b2:	2001      	movmi	r0, #1
 80130b4:	2000      	movpl	r0, #0
 80130b6:	e790      	b.n	8012fda <__ieee754_powf+0x15a>
 80130b8:	f016 4fff 	tst.w	r6, #2139095040	; 0x7f800000
 80130bc:	bf01      	itttt	eq
 80130be:	eddf 7a66 	vldreq	s15, [pc, #408]	; 8013258 <__ieee754_powf+0x3d8>
 80130c2:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 80130c6:	f06f 0217 	mvneq.w	r2, #23
 80130ca:	ee17 5a90 	vmoveq	r5, s15
 80130ce:	ea4f 53e5 	mov.w	r3, r5, asr #23
 80130d2:	bf18      	it	ne
 80130d4:	2200      	movne	r2, #0
 80130d6:	3b7f      	subs	r3, #127	; 0x7f
 80130d8:	4413      	add	r3, r2
 80130da:	4a60      	ldr	r2, [pc, #384]	; (801325c <__ieee754_powf+0x3dc>)
 80130dc:	f3c5 0516 	ubfx	r5, r5, #0, #23
 80130e0:	4295      	cmp	r5, r2
 80130e2:	f045 517e 	orr.w	r1, r5, #1065353216	; 0x3f800000
 80130e6:	dd06      	ble.n	80130f6 <__ieee754_powf+0x276>
 80130e8:	4a5d      	ldr	r2, [pc, #372]	; (8013260 <__ieee754_powf+0x3e0>)
 80130ea:	4295      	cmp	r5, r2
 80130ec:	f340 80a4 	ble.w	8013238 <__ieee754_powf+0x3b8>
 80130f0:	3301      	adds	r3, #1
 80130f2:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 80130f6:	2500      	movs	r5, #0
 80130f8:	4a5a      	ldr	r2, [pc, #360]	; (8013264 <__ieee754_powf+0x3e4>)
 80130fa:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 80130fe:	ee07 1a90 	vmov	s15, r1
 8013102:	ed92 7a00 	vldr	s14, [r2]
 8013106:	4a58      	ldr	r2, [pc, #352]	; (8013268 <__ieee754_powf+0x3e8>)
 8013108:	ee37 6a27 	vadd.f32	s12, s14, s15
 801310c:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8013110:	eec5 6a86 	vdiv.f32	s13, s11, s12
 8013114:	1049      	asrs	r1, r1, #1
 8013116:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 801311a:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 801311e:	eb01 5145 	add.w	r1, r1, r5, lsl #21
 8013122:	ee37 5ac7 	vsub.f32	s10, s15, s14
 8013126:	ee06 1a10 	vmov	s12, r1
 801312a:	ee65 4a26 	vmul.f32	s9, s10, s13
 801312e:	ee36 7a47 	vsub.f32	s14, s12, s14
 8013132:	ee14 6a90 	vmov	r6, s9
 8013136:	4016      	ands	r6, r2
 8013138:	ee05 6a90 	vmov	s11, r6
 801313c:	eea5 5ac6 	vfms.f32	s10, s11, s12
 8013140:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013144:	ed9f 7a49 	vldr	s14, [pc, #292]	; 801326c <__ieee754_powf+0x3ec>
 8013148:	eea5 5ae7 	vfms.f32	s10, s11, s15
 801314c:	ee64 7aa4 	vmul.f32	s15, s9, s9
 8013150:	ee25 6a26 	vmul.f32	s12, s10, s13
 8013154:	eddf 6a46 	vldr	s13, [pc, #280]	; 8013270 <__ieee754_powf+0x3f0>
 8013158:	eea7 7aa6 	vfma.f32	s14, s15, s13
 801315c:	eddf 6a45 	vldr	s13, [pc, #276]	; 8013274 <__ieee754_powf+0x3f4>
 8013160:	eee7 6a27 	vfma.f32	s13, s14, s15
 8013164:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8013248 <__ieee754_powf+0x3c8>
 8013168:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801316c:	eddf 6a42 	vldr	s13, [pc, #264]	; 8013278 <__ieee754_powf+0x3f8>
 8013170:	eee7 6a27 	vfma.f32	s13, s14, s15
 8013174:	ed9f 7a41 	vldr	s14, [pc, #260]	; 801327c <__ieee754_powf+0x3fc>
 8013178:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801317c:	ee74 6aa5 	vadd.f32	s13, s9, s11
 8013180:	ee27 5aa7 	vmul.f32	s10, s15, s15
 8013184:	ee66 6a86 	vmul.f32	s13, s13, s12
 8013188:	eee5 6a07 	vfma.f32	s13, s10, s14
 801318c:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 8013190:	eef0 7a45 	vmov.f32	s15, s10
 8013194:	eee5 7aa5 	vfma.f32	s15, s11, s11
 8013198:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801319c:	ee17 1a90 	vmov	r1, s15
 80131a0:	4011      	ands	r1, r2
 80131a2:	ee07 1a90 	vmov	s15, r1
 80131a6:	ee37 7ac5 	vsub.f32	s14, s15, s10
 80131aa:	eea5 7ae5 	vfms.f32	s14, s11, s11
 80131ae:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80131b2:	ee27 7a24 	vmul.f32	s14, s14, s9
 80131b6:	eea6 7a27 	vfma.f32	s14, s12, s15
 80131ba:	eeb0 6a47 	vmov.f32	s12, s14
 80131be:	eea5 6aa7 	vfma.f32	s12, s11, s15
 80131c2:	ee16 1a10 	vmov	r1, s12
 80131c6:	4011      	ands	r1, r2
 80131c8:	ee06 1a90 	vmov	s13, r1
 80131cc:	eee5 6ae7 	vfms.f32	s13, s11, s15
 80131d0:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8013280 <__ieee754_powf+0x400>
 80131d4:	eddf 5a2b 	vldr	s11, [pc, #172]	; 8013284 <__ieee754_powf+0x404>
 80131d8:	ee37 7a66 	vsub.f32	s14, s14, s13
 80131dc:	ee06 1a10 	vmov	s12, r1
 80131e0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80131e4:	eddf 7a28 	vldr	s15, [pc, #160]	; 8013288 <__ieee754_powf+0x408>
 80131e8:	4928      	ldr	r1, [pc, #160]	; (801328c <__ieee754_powf+0x40c>)
 80131ea:	eea6 7a27 	vfma.f32	s14, s12, s15
 80131ee:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 80131f2:	edd1 7a00 	vldr	s15, [r1]
 80131f6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80131fa:	ee07 3a90 	vmov	s15, r3
 80131fe:	4b24      	ldr	r3, [pc, #144]	; (8013290 <__ieee754_powf+0x410>)
 8013200:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8013204:	eef0 7a47 	vmov.f32	s15, s14
 8013208:	eee6 7a25 	vfma.f32	s15, s12, s11
 801320c:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8013210:	edd5 0a00 	vldr	s1, [r5]
 8013214:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8013218:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801321c:	ee17 3a90 	vmov	r3, s15
 8013220:	4013      	ands	r3, r2
 8013222:	ee07 3a90 	vmov	s15, r3
 8013226:	ee77 6ae6 	vsub.f32	s13, s15, s13
 801322a:	ee76 6ae0 	vsub.f32	s13, s13, s1
 801322e:	eee6 6a65 	vfms.f32	s13, s12, s11
 8013232:	ee77 7a66 	vsub.f32	s15, s14, s13
 8013236:	e70e      	b.n	8013056 <__ieee754_powf+0x1d6>
 8013238:	2501      	movs	r5, #1
 801323a:	e75d      	b.n	80130f8 <__ieee754_powf+0x278>
 801323c:	00000000 	.word	0x00000000
 8013240:	3f7ffff3 	.word	0x3f7ffff3
 8013244:	3f800007 	.word	0x3f800007
 8013248:	3eaaaaab 	.word	0x3eaaaaab
 801324c:	3fb8aa3b 	.word	0x3fb8aa3b
 8013250:	36eca570 	.word	0x36eca570
 8013254:	3fb8aa00 	.word	0x3fb8aa00
 8013258:	4b800000 	.word	0x4b800000
 801325c:	001cc471 	.word	0x001cc471
 8013260:	005db3d6 	.word	0x005db3d6
 8013264:	0801486c 	.word	0x0801486c
 8013268:	fffff000 	.word	0xfffff000
 801326c:	3e6c3255 	.word	0x3e6c3255
 8013270:	3e53f142 	.word	0x3e53f142
 8013274:	3e8ba305 	.word	0x3e8ba305
 8013278:	3edb6db7 	.word	0x3edb6db7
 801327c:	3f19999a 	.word	0x3f19999a
 8013280:	3f76384f 	.word	0x3f76384f
 8013284:	3f763800 	.word	0x3f763800
 8013288:	369dc3a0 	.word	0x369dc3a0
 801328c:	0801487c 	.word	0x0801487c
 8013290:	08014874 	.word	0x08014874
 8013294:	3338aa3c 	.word	0x3338aa3c
 8013298:	f040 8095 	bne.w	80133c6 <__ieee754_powf+0x546>
 801329c:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 8013294 <__ieee754_powf+0x414>
 80132a0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80132a4:	ee70 6aa6 	vadd.f32	s13, s1, s13
 80132a8:	eef4 6ac7 	vcmpe.f32	s13, s14
 80132ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80132b0:	f73f aefa 	bgt.w	80130a8 <__ieee754_powf+0x228>
 80132b4:	15db      	asrs	r3, r3, #23
 80132b6:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 80132ba:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80132be:	4103      	asrs	r3, r0
 80132c0:	4423      	add	r3, r4
 80132c2:	494b      	ldr	r1, [pc, #300]	; (80133f0 <__ieee754_powf+0x570>)
 80132c4:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80132c8:	3a7f      	subs	r2, #127	; 0x7f
 80132ca:	4111      	asrs	r1, r2
 80132cc:	ea23 0101 	bic.w	r1, r3, r1
 80132d0:	ee07 1a10 	vmov	s14, r1
 80132d4:	f3c3 0016 	ubfx	r0, r3, #0, #23
 80132d8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80132dc:	f1c2 0217 	rsb	r2, r2, #23
 80132e0:	4110      	asrs	r0, r2
 80132e2:	2c00      	cmp	r4, #0
 80132e4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80132e8:	bfb8      	it	lt
 80132ea:	4240      	neglt	r0, r0
 80132ec:	ee37 7aa0 	vadd.f32	s14, s15, s1
 80132f0:	ed9f 0a40 	vldr	s0, [pc, #256]	; 80133f4 <__ieee754_powf+0x574>
 80132f4:	eddf 6a40 	vldr	s13, [pc, #256]	; 80133f8 <__ieee754_powf+0x578>
 80132f8:	ee17 3a10 	vmov	r3, s14
 80132fc:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8013300:	f023 030f 	bic.w	r3, r3, #15
 8013304:	ee07 3a10 	vmov	s14, r3
 8013308:	ee77 7a67 	vsub.f32	s15, s14, s15
 801330c:	ee27 0a00 	vmul.f32	s0, s14, s0
 8013310:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8013314:	eddf 7a39 	vldr	s15, [pc, #228]	; 80133fc <__ieee754_powf+0x57c>
 8013318:	eea0 0aa7 	vfma.f32	s0, s1, s15
 801331c:	eef0 7a40 	vmov.f32	s15, s0
 8013320:	eee7 7a26 	vfma.f32	s15, s14, s13
 8013324:	eeb0 6a67 	vmov.f32	s12, s15
 8013328:	eea7 6a66 	vfms.f32	s12, s14, s13
 801332c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8013330:	ee30 0a46 	vsub.f32	s0, s0, s12
 8013334:	eddf 6a32 	vldr	s13, [pc, #200]	; 8013400 <__ieee754_powf+0x580>
 8013338:	ed9f 6a32 	vldr	s12, [pc, #200]	; 8013404 <__ieee754_powf+0x584>
 801333c:	eee7 6a06 	vfma.f32	s13, s14, s12
 8013340:	ed9f 6a31 	vldr	s12, [pc, #196]	; 8013408 <__ieee754_powf+0x588>
 8013344:	eea6 6a87 	vfma.f32	s12, s13, s14
 8013348:	eddf 6a30 	vldr	s13, [pc, #192]	; 801340c <__ieee754_powf+0x58c>
 801334c:	eee6 6a07 	vfma.f32	s13, s12, s14
 8013350:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 8013410 <__ieee754_powf+0x590>
 8013354:	eea6 6a87 	vfma.f32	s12, s13, s14
 8013358:	eef0 6a67 	vmov.f32	s13, s15
 801335c:	eee6 6a47 	vfms.f32	s13, s12, s14
 8013360:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8013364:	ee27 6aa6 	vmul.f32	s12, s15, s13
 8013368:	ee76 6ac7 	vsub.f32	s13, s13, s14
 801336c:	eea7 0a80 	vfma.f32	s0, s15, s0
 8013370:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8013374:	ee37 0a40 	vsub.f32	s0, s14, s0
 8013378:	ee70 7a67 	vsub.f32	s15, s0, s15
 801337c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8013380:	ee30 0a67 	vsub.f32	s0, s0, s15
 8013384:	ee10 3a10 	vmov	r3, s0
 8013388:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 801338c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8013390:	da1f      	bge.n	80133d2 <__ieee754_powf+0x552>
 8013392:	f000 fdf3 	bl	8013f7c <scalbnf>
 8013396:	ee20 0a08 	vmul.f32	s0, s0, s16
 801339a:	e589      	b.n	8012eb0 <__ieee754_powf+0x30>
 801339c:	4a1d      	ldr	r2, [pc, #116]	; (8013414 <__ieee754_powf+0x594>)
 801339e:	4293      	cmp	r3, r2
 80133a0:	dd07      	ble.n	80133b2 <__ieee754_powf+0x532>
 80133a2:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80133a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80133aa:	bf4c      	ite	mi
 80133ac:	2001      	movmi	r0, #1
 80133ae:	2000      	movpl	r0, #0
 80133b0:	e61f      	b.n	8012ff2 <__ieee754_powf+0x172>
 80133b2:	d108      	bne.n	80133c6 <__ieee754_powf+0x546>
 80133b4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80133b8:	eeb4 7ae0 	vcmpe.f32	s14, s1
 80133bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80133c0:	f6ff af78 	blt.w	80132b4 <__ieee754_powf+0x434>
 80133c4:	e7ed      	b.n	80133a2 <__ieee754_powf+0x522>
 80133c6:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 80133ca:	f73f af73 	bgt.w	80132b4 <__ieee754_powf+0x434>
 80133ce:	2000      	movs	r0, #0
 80133d0:	e78c      	b.n	80132ec <__ieee754_powf+0x46c>
 80133d2:	ee00 3a10 	vmov	s0, r3
 80133d6:	e7de      	b.n	8013396 <__ieee754_powf+0x516>
 80133d8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80133dc:	e568      	b.n	8012eb0 <__ieee754_powf+0x30>
 80133de:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8013418 <__ieee754_powf+0x598>
 80133e2:	e565      	b.n	8012eb0 <__ieee754_powf+0x30>
 80133e4:	eeb0 0a48 	vmov.f32	s0, s16
 80133e8:	e562      	b.n	8012eb0 <__ieee754_powf+0x30>
 80133ea:	2700      	movs	r7, #0
 80133ec:	e58d      	b.n	8012f0a <__ieee754_powf+0x8a>
 80133ee:	bf00      	nop
 80133f0:	007fffff 	.word	0x007fffff
 80133f4:	35bfbe8c 	.word	0x35bfbe8c
 80133f8:	3f317200 	.word	0x3f317200
 80133fc:	3f317218 	.word	0x3f317218
 8013400:	b5ddea0e 	.word	0xb5ddea0e
 8013404:	3331bb4c 	.word	0x3331bb4c
 8013408:	388ab355 	.word	0x388ab355
 801340c:	bb360b61 	.word	0xbb360b61
 8013410:	3e2aaaab 	.word	0x3e2aaaab
 8013414:	43160000 	.word	0x43160000
 8013418:	00000000 	.word	0x00000000

0801341c <__ieee754_rem_pio2f>:
 801341c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801341e:	ee10 6a10 	vmov	r6, s0
 8013422:	4b8e      	ldr	r3, [pc, #568]	; (801365c <__ieee754_rem_pio2f+0x240>)
 8013424:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8013428:	429d      	cmp	r5, r3
 801342a:	b087      	sub	sp, #28
 801342c:	eef0 7a40 	vmov.f32	s15, s0
 8013430:	4604      	mov	r4, r0
 8013432:	dc05      	bgt.n	8013440 <__ieee754_rem_pio2f+0x24>
 8013434:	2300      	movs	r3, #0
 8013436:	ed80 0a00 	vstr	s0, [r0]
 801343a:	6043      	str	r3, [r0, #4]
 801343c:	2000      	movs	r0, #0
 801343e:	e01a      	b.n	8013476 <__ieee754_rem_pio2f+0x5a>
 8013440:	4b87      	ldr	r3, [pc, #540]	; (8013660 <__ieee754_rem_pio2f+0x244>)
 8013442:	429d      	cmp	r5, r3
 8013444:	dc46      	bgt.n	80134d4 <__ieee754_rem_pio2f+0xb8>
 8013446:	2e00      	cmp	r6, #0
 8013448:	ed9f 0a86 	vldr	s0, [pc, #536]	; 8013664 <__ieee754_rem_pio2f+0x248>
 801344c:	4b86      	ldr	r3, [pc, #536]	; (8013668 <__ieee754_rem_pio2f+0x24c>)
 801344e:	f025 050f 	bic.w	r5, r5, #15
 8013452:	dd1f      	ble.n	8013494 <__ieee754_rem_pio2f+0x78>
 8013454:	429d      	cmp	r5, r3
 8013456:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801345a:	d00e      	beq.n	801347a <__ieee754_rem_pio2f+0x5e>
 801345c:	ed9f 7a83 	vldr	s14, [pc, #524]	; 801366c <__ieee754_rem_pio2f+0x250>
 8013460:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8013464:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8013468:	ed80 0a00 	vstr	s0, [r0]
 801346c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013470:	2001      	movs	r0, #1
 8013472:	edc4 7a01 	vstr	s15, [r4, #4]
 8013476:	b007      	add	sp, #28
 8013478:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801347a:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 8013670 <__ieee754_rem_pio2f+0x254>
 801347e:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8013674 <__ieee754_rem_pio2f+0x258>
 8013482:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8013486:	ee77 6ac7 	vsub.f32	s13, s15, s14
 801348a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801348e:	edc0 6a00 	vstr	s13, [r0]
 8013492:	e7eb      	b.n	801346c <__ieee754_rem_pio2f+0x50>
 8013494:	429d      	cmp	r5, r3
 8013496:	ee77 7a80 	vadd.f32	s15, s15, s0
 801349a:	d00e      	beq.n	80134ba <__ieee754_rem_pio2f+0x9e>
 801349c:	ed9f 7a73 	vldr	s14, [pc, #460]	; 801366c <__ieee754_rem_pio2f+0x250>
 80134a0:	ee37 0a87 	vadd.f32	s0, s15, s14
 80134a4:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80134a8:	ed80 0a00 	vstr	s0, [r0]
 80134ac:	ee77 7a87 	vadd.f32	s15, s15, s14
 80134b0:	f04f 30ff 	mov.w	r0, #4294967295
 80134b4:	edc4 7a01 	vstr	s15, [r4, #4]
 80134b8:	e7dd      	b.n	8013476 <__ieee754_rem_pio2f+0x5a>
 80134ba:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 8013670 <__ieee754_rem_pio2f+0x254>
 80134be:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8013674 <__ieee754_rem_pio2f+0x258>
 80134c2:	ee77 7a80 	vadd.f32	s15, s15, s0
 80134c6:	ee77 6a87 	vadd.f32	s13, s15, s14
 80134ca:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80134ce:	edc0 6a00 	vstr	s13, [r0]
 80134d2:	e7eb      	b.n	80134ac <__ieee754_rem_pio2f+0x90>
 80134d4:	4b68      	ldr	r3, [pc, #416]	; (8013678 <__ieee754_rem_pio2f+0x25c>)
 80134d6:	429d      	cmp	r5, r3
 80134d8:	dc72      	bgt.n	80135c0 <__ieee754_rem_pio2f+0x1a4>
 80134da:	f000 fcf3 	bl	8013ec4 <fabsf>
 80134de:	ed9f 7a67 	vldr	s14, [pc, #412]	; 801367c <__ieee754_rem_pio2f+0x260>
 80134e2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80134e6:	eee0 7a07 	vfma.f32	s15, s0, s14
 80134ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80134ee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80134f2:	ee17 0a90 	vmov	r0, s15
 80134f6:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8013664 <__ieee754_rem_pio2f+0x248>
 80134fa:	eea7 0a67 	vfms.f32	s0, s14, s15
 80134fe:	281f      	cmp	r0, #31
 8013500:	eddf 7a5a 	vldr	s15, [pc, #360]	; 801366c <__ieee754_rem_pio2f+0x250>
 8013504:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013508:	eeb1 6a47 	vneg.f32	s12, s14
 801350c:	ee70 6a67 	vsub.f32	s13, s0, s15
 8013510:	ee16 2a90 	vmov	r2, s13
 8013514:	dc1c      	bgt.n	8013550 <__ieee754_rem_pio2f+0x134>
 8013516:	495a      	ldr	r1, [pc, #360]	; (8013680 <__ieee754_rem_pio2f+0x264>)
 8013518:	1e47      	subs	r7, r0, #1
 801351a:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 801351e:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8013522:	428b      	cmp	r3, r1
 8013524:	d014      	beq.n	8013550 <__ieee754_rem_pio2f+0x134>
 8013526:	6022      	str	r2, [r4, #0]
 8013528:	ed94 7a00 	vldr	s14, [r4]
 801352c:	ee30 0a47 	vsub.f32	s0, s0, s14
 8013530:	2e00      	cmp	r6, #0
 8013532:	ee30 0a67 	vsub.f32	s0, s0, s15
 8013536:	ed84 0a01 	vstr	s0, [r4, #4]
 801353a:	da9c      	bge.n	8013476 <__ieee754_rem_pio2f+0x5a>
 801353c:	eeb1 7a47 	vneg.f32	s14, s14
 8013540:	eeb1 0a40 	vneg.f32	s0, s0
 8013544:	ed84 7a00 	vstr	s14, [r4]
 8013548:	ed84 0a01 	vstr	s0, [r4, #4]
 801354c:	4240      	negs	r0, r0
 801354e:	e792      	b.n	8013476 <__ieee754_rem_pio2f+0x5a>
 8013550:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8013554:	15eb      	asrs	r3, r5, #23
 8013556:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 801355a:	2d08      	cmp	r5, #8
 801355c:	dde3      	ble.n	8013526 <__ieee754_rem_pio2f+0x10a>
 801355e:	eddf 7a44 	vldr	s15, [pc, #272]	; 8013670 <__ieee754_rem_pio2f+0x254>
 8013562:	eddf 5a44 	vldr	s11, [pc, #272]	; 8013674 <__ieee754_rem_pio2f+0x258>
 8013566:	eef0 6a40 	vmov.f32	s13, s0
 801356a:	eee6 6a27 	vfma.f32	s13, s12, s15
 801356e:	ee30 0a66 	vsub.f32	s0, s0, s13
 8013572:	eea6 0a27 	vfma.f32	s0, s12, s15
 8013576:	eef0 7a40 	vmov.f32	s15, s0
 801357a:	eed7 7a25 	vfnms.f32	s15, s14, s11
 801357e:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8013582:	ee15 2a90 	vmov	r2, s11
 8013586:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 801358a:	1a5b      	subs	r3, r3, r1
 801358c:	2b19      	cmp	r3, #25
 801358e:	dc04      	bgt.n	801359a <__ieee754_rem_pio2f+0x17e>
 8013590:	edc4 5a00 	vstr	s11, [r4]
 8013594:	eeb0 0a66 	vmov.f32	s0, s13
 8013598:	e7c6      	b.n	8013528 <__ieee754_rem_pio2f+0x10c>
 801359a:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8013684 <__ieee754_rem_pio2f+0x268>
 801359e:	eeb0 0a66 	vmov.f32	s0, s13
 80135a2:	eea6 0a25 	vfma.f32	s0, s12, s11
 80135a6:	ee76 7ac0 	vsub.f32	s15, s13, s0
 80135aa:	eddf 6a37 	vldr	s13, [pc, #220]	; 8013688 <__ieee754_rem_pio2f+0x26c>
 80135ae:	eee6 7a25 	vfma.f32	s15, s12, s11
 80135b2:	eed7 7a26 	vfnms.f32	s15, s14, s13
 80135b6:	ee30 7a67 	vsub.f32	s14, s0, s15
 80135ba:	ed84 7a00 	vstr	s14, [r4]
 80135be:	e7b3      	b.n	8013528 <__ieee754_rem_pio2f+0x10c>
 80135c0:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 80135c4:	db06      	blt.n	80135d4 <__ieee754_rem_pio2f+0x1b8>
 80135c6:	ee70 7a40 	vsub.f32	s15, s0, s0
 80135ca:	edc0 7a01 	vstr	s15, [r0, #4]
 80135ce:	edc0 7a00 	vstr	s15, [r0]
 80135d2:	e733      	b.n	801343c <__ieee754_rem_pio2f+0x20>
 80135d4:	15ea      	asrs	r2, r5, #23
 80135d6:	3a86      	subs	r2, #134	; 0x86
 80135d8:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 80135dc:	ee07 3a90 	vmov	s15, r3
 80135e0:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80135e4:	eddf 6a29 	vldr	s13, [pc, #164]	; 801368c <__ieee754_rem_pio2f+0x270>
 80135e8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80135ec:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80135f0:	ed8d 7a03 	vstr	s14, [sp, #12]
 80135f4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80135f8:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80135fc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013600:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013604:	ed8d 7a04 	vstr	s14, [sp, #16]
 8013608:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801360c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8013610:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013614:	edcd 7a05 	vstr	s15, [sp, #20]
 8013618:	d11e      	bne.n	8013658 <__ieee754_rem_pio2f+0x23c>
 801361a:	eeb5 7a40 	vcmp.f32	s14, #0.0
 801361e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013622:	bf14      	ite	ne
 8013624:	2302      	movne	r3, #2
 8013626:	2301      	moveq	r3, #1
 8013628:	4919      	ldr	r1, [pc, #100]	; (8013690 <__ieee754_rem_pio2f+0x274>)
 801362a:	9101      	str	r1, [sp, #4]
 801362c:	2102      	movs	r1, #2
 801362e:	9100      	str	r1, [sp, #0]
 8013630:	a803      	add	r0, sp, #12
 8013632:	4621      	mov	r1, r4
 8013634:	f000 f892 	bl	801375c <__kernel_rem_pio2f>
 8013638:	2e00      	cmp	r6, #0
 801363a:	f6bf af1c 	bge.w	8013476 <__ieee754_rem_pio2f+0x5a>
 801363e:	edd4 7a00 	vldr	s15, [r4]
 8013642:	eef1 7a67 	vneg.f32	s15, s15
 8013646:	edc4 7a00 	vstr	s15, [r4]
 801364a:	edd4 7a01 	vldr	s15, [r4, #4]
 801364e:	eef1 7a67 	vneg.f32	s15, s15
 8013652:	edc4 7a01 	vstr	s15, [r4, #4]
 8013656:	e779      	b.n	801354c <__ieee754_rem_pio2f+0x130>
 8013658:	2303      	movs	r3, #3
 801365a:	e7e5      	b.n	8013628 <__ieee754_rem_pio2f+0x20c>
 801365c:	3f490fd8 	.word	0x3f490fd8
 8013660:	4016cbe3 	.word	0x4016cbe3
 8013664:	3fc90f80 	.word	0x3fc90f80
 8013668:	3fc90fd0 	.word	0x3fc90fd0
 801366c:	37354443 	.word	0x37354443
 8013670:	37354400 	.word	0x37354400
 8013674:	2e85a308 	.word	0x2e85a308
 8013678:	43490f80 	.word	0x43490f80
 801367c:	3f22f984 	.word	0x3f22f984
 8013680:	08014884 	.word	0x08014884
 8013684:	2e85a300 	.word	0x2e85a300
 8013688:	248d3132 	.word	0x248d3132
 801368c:	43800000 	.word	0x43800000
 8013690:	08014904 	.word	0x08014904

08013694 <__ieee754_sqrtf>:
 8013694:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8013698:	4770      	bx	lr
	...

0801369c <__kernel_cosf>:
 801369c:	ee10 3a10 	vmov	r3, s0
 80136a0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80136a4:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80136a8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80136ac:	da05      	bge.n	80136ba <__kernel_cosf+0x1e>
 80136ae:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80136b2:	ee17 2a90 	vmov	r2, s15
 80136b6:	2a00      	cmp	r2, #0
 80136b8:	d03d      	beq.n	8013736 <__kernel_cosf+0x9a>
 80136ba:	ee60 5a00 	vmul.f32	s11, s0, s0
 80136be:	eddf 7a1f 	vldr	s15, [pc, #124]	; 801373c <__kernel_cosf+0xa0>
 80136c2:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8013740 <__kernel_cosf+0xa4>
 80136c6:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8013744 <__kernel_cosf+0xa8>
 80136ca:	4a1f      	ldr	r2, [pc, #124]	; (8013748 <__kernel_cosf+0xac>)
 80136cc:	eea5 7aa7 	vfma.f32	s14, s11, s15
 80136d0:	4293      	cmp	r3, r2
 80136d2:	eddf 7a1e 	vldr	s15, [pc, #120]	; 801374c <__kernel_cosf+0xb0>
 80136d6:	eee7 7a25 	vfma.f32	s15, s14, s11
 80136da:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8013750 <__kernel_cosf+0xb4>
 80136de:	eea7 7aa5 	vfma.f32	s14, s15, s11
 80136e2:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8013754 <__kernel_cosf+0xb8>
 80136e6:	eee7 7a25 	vfma.f32	s15, s14, s11
 80136ea:	eeb0 7a66 	vmov.f32	s14, s13
 80136ee:	eea7 7aa5 	vfma.f32	s14, s15, s11
 80136f2:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80136f6:	ee65 7aa6 	vmul.f32	s15, s11, s13
 80136fa:	ee67 6a25 	vmul.f32	s13, s14, s11
 80136fe:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 8013702:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8013706:	dc04      	bgt.n	8013712 <__kernel_cosf+0x76>
 8013708:	ee37 7ac7 	vsub.f32	s14, s15, s14
 801370c:	ee36 0a47 	vsub.f32	s0, s12, s14
 8013710:	4770      	bx	lr
 8013712:	4a11      	ldr	r2, [pc, #68]	; (8013758 <__kernel_cosf+0xbc>)
 8013714:	4293      	cmp	r3, r2
 8013716:	bfda      	itte	le
 8013718:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 801371c:	ee06 3a90 	vmovle	s13, r3
 8013720:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 8013724:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8013728:	ee36 0a66 	vsub.f32	s0, s12, s13
 801372c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013730:	ee30 0a67 	vsub.f32	s0, s0, s15
 8013734:	4770      	bx	lr
 8013736:	eeb0 0a46 	vmov.f32	s0, s12
 801373a:	4770      	bx	lr
 801373c:	ad47d74e 	.word	0xad47d74e
 8013740:	310f74f6 	.word	0x310f74f6
 8013744:	3d2aaaab 	.word	0x3d2aaaab
 8013748:	3e999999 	.word	0x3e999999
 801374c:	b493f27c 	.word	0xb493f27c
 8013750:	37d00d01 	.word	0x37d00d01
 8013754:	bab60b61 	.word	0xbab60b61
 8013758:	3f480000 	.word	0x3f480000

0801375c <__kernel_rem_pio2f>:
 801375c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013760:	ed2d 8b04 	vpush	{d8-d9}
 8013764:	b0d9      	sub	sp, #356	; 0x164
 8013766:	4688      	mov	r8, r1
 8013768:	9002      	str	r0, [sp, #8]
 801376a:	49bb      	ldr	r1, [pc, #748]	; (8013a58 <__kernel_rem_pio2f+0x2fc>)
 801376c:	9866      	ldr	r0, [sp, #408]	; 0x198
 801376e:	9301      	str	r3, [sp, #4]
 8013770:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 8013774:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 8013778:	1e59      	subs	r1, r3, #1
 801377a:	1d13      	adds	r3, r2, #4
 801377c:	db27      	blt.n	80137ce <__kernel_rem_pio2f+0x72>
 801377e:	f1b2 0b03 	subs.w	fp, r2, #3
 8013782:	bf48      	it	mi
 8013784:	f102 0b04 	addmi.w	fp, r2, #4
 8013788:	ea4f 00eb 	mov.w	r0, fp, asr #3
 801378c:	1c45      	adds	r5, r0, #1
 801378e:	00ec      	lsls	r4, r5, #3
 8013790:	1a47      	subs	r7, r0, r1
 8013792:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 8013a68 <__kernel_rem_pio2f+0x30c>
 8013796:	9403      	str	r4, [sp, #12]
 8013798:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 801379c:	eb0a 0c01 	add.w	ip, sl, r1
 80137a0:	ae1c      	add	r6, sp, #112	; 0x70
 80137a2:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 80137a6:	2400      	movs	r4, #0
 80137a8:	4564      	cmp	r4, ip
 80137aa:	dd12      	ble.n	80137d2 <__kernel_rem_pio2f+0x76>
 80137ac:	9b01      	ldr	r3, [sp, #4]
 80137ae:	ac1c      	add	r4, sp, #112	; 0x70
 80137b0:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 80137b4:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 80137b8:	f04f 0c00 	mov.w	ip, #0
 80137bc:	45d4      	cmp	ip, sl
 80137be:	dc27      	bgt.n	8013810 <__kernel_rem_pio2f+0xb4>
 80137c0:	f8dd 9008 	ldr.w	r9, [sp, #8]
 80137c4:	eddf 7aa8 	vldr	s15, [pc, #672]	; 8013a68 <__kernel_rem_pio2f+0x30c>
 80137c8:	4627      	mov	r7, r4
 80137ca:	2600      	movs	r6, #0
 80137cc:	e016      	b.n	80137fc <__kernel_rem_pio2f+0xa0>
 80137ce:	2000      	movs	r0, #0
 80137d0:	e7dc      	b.n	801378c <__kernel_rem_pio2f+0x30>
 80137d2:	42e7      	cmn	r7, r4
 80137d4:	bf5d      	ittte	pl
 80137d6:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 80137da:	ee07 3a90 	vmovpl	s15, r3
 80137de:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 80137e2:	eef0 7a47 	vmovmi.f32	s15, s14
 80137e6:	ece6 7a01 	vstmia	r6!, {s15}
 80137ea:	3401      	adds	r4, #1
 80137ec:	e7dc      	b.n	80137a8 <__kernel_rem_pio2f+0x4c>
 80137ee:	ecf9 6a01 	vldmia	r9!, {s13}
 80137f2:	ed97 7a00 	vldr	s14, [r7]
 80137f6:	eee6 7a87 	vfma.f32	s15, s13, s14
 80137fa:	3601      	adds	r6, #1
 80137fc:	428e      	cmp	r6, r1
 80137fe:	f1a7 0704 	sub.w	r7, r7, #4
 8013802:	ddf4      	ble.n	80137ee <__kernel_rem_pio2f+0x92>
 8013804:	eceb 7a01 	vstmia	fp!, {s15}
 8013808:	f10c 0c01 	add.w	ip, ip, #1
 801380c:	3404      	adds	r4, #4
 801380e:	e7d5      	b.n	80137bc <__kernel_rem_pio2f+0x60>
 8013810:	ab08      	add	r3, sp, #32
 8013812:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8013816:	eddf 8a93 	vldr	s17, [pc, #588]	; 8013a64 <__kernel_rem_pio2f+0x308>
 801381a:	ed9f 9a91 	vldr	s18, [pc, #580]	; 8013a60 <__kernel_rem_pio2f+0x304>
 801381e:	9304      	str	r3, [sp, #16]
 8013820:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 8013824:	4656      	mov	r6, sl
 8013826:	00b3      	lsls	r3, r6, #2
 8013828:	9305      	str	r3, [sp, #20]
 801382a:	ab58      	add	r3, sp, #352	; 0x160
 801382c:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8013830:	ac08      	add	r4, sp, #32
 8013832:	ab44      	add	r3, sp, #272	; 0x110
 8013834:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 8013838:	46a4      	mov	ip, r4
 801383a:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 801383e:	4637      	mov	r7, r6
 8013840:	2f00      	cmp	r7, #0
 8013842:	f1a0 0004 	sub.w	r0, r0, #4
 8013846:	dc4f      	bgt.n	80138e8 <__kernel_rem_pio2f+0x18c>
 8013848:	4628      	mov	r0, r5
 801384a:	e9cd 1206 	strd	r1, r2, [sp, #24]
 801384e:	f000 fb95 	bl	8013f7c <scalbnf>
 8013852:	eeb0 8a40 	vmov.f32	s16, s0
 8013856:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 801385a:	ee28 0a00 	vmul.f32	s0, s16, s0
 801385e:	f000 fb45 	bl	8013eec <floorf>
 8013862:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8013866:	eea0 8a67 	vfms.f32	s16, s0, s15
 801386a:	2d00      	cmp	r5, #0
 801386c:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8013870:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8013874:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8013878:	ee17 9a90 	vmov	r9, s15
 801387c:	ee38 8a40 	vsub.f32	s16, s16, s0
 8013880:	dd44      	ble.n	801390c <__kernel_rem_pio2f+0x1b0>
 8013882:	f106 3cff 	add.w	ip, r6, #4294967295
 8013886:	ab08      	add	r3, sp, #32
 8013888:	f1c5 0e08 	rsb	lr, r5, #8
 801388c:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 8013890:	fa47 f00e 	asr.w	r0, r7, lr
 8013894:	4481      	add	r9, r0
 8013896:	fa00 f00e 	lsl.w	r0, r0, lr
 801389a:	1a3f      	subs	r7, r7, r0
 801389c:	f1c5 0007 	rsb	r0, r5, #7
 80138a0:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 80138a4:	4107      	asrs	r7, r0
 80138a6:	2f00      	cmp	r7, #0
 80138a8:	dd3f      	ble.n	801392a <__kernel_rem_pio2f+0x1ce>
 80138aa:	f04f 0e00 	mov.w	lr, #0
 80138ae:	f109 0901 	add.w	r9, r9, #1
 80138b2:	4673      	mov	r3, lr
 80138b4:	4576      	cmp	r6, lr
 80138b6:	dc6b      	bgt.n	8013990 <__kernel_rem_pio2f+0x234>
 80138b8:	2d00      	cmp	r5, #0
 80138ba:	dd04      	ble.n	80138c6 <__kernel_rem_pio2f+0x16a>
 80138bc:	2d01      	cmp	r5, #1
 80138be:	d078      	beq.n	80139b2 <__kernel_rem_pio2f+0x256>
 80138c0:	2d02      	cmp	r5, #2
 80138c2:	f000 8081 	beq.w	80139c8 <__kernel_rem_pio2f+0x26c>
 80138c6:	2f02      	cmp	r7, #2
 80138c8:	d12f      	bne.n	801392a <__kernel_rem_pio2f+0x1ce>
 80138ca:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80138ce:	ee30 8a48 	vsub.f32	s16, s0, s16
 80138d2:	b353      	cbz	r3, 801392a <__kernel_rem_pio2f+0x1ce>
 80138d4:	4628      	mov	r0, r5
 80138d6:	e9cd 1206 	strd	r1, r2, [sp, #24]
 80138da:	f000 fb4f 	bl	8013f7c <scalbnf>
 80138de:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 80138e2:	ee38 8a40 	vsub.f32	s16, s16, s0
 80138e6:	e020      	b.n	801392a <__kernel_rem_pio2f+0x1ce>
 80138e8:	ee60 7a28 	vmul.f32	s15, s0, s17
 80138ec:	3f01      	subs	r7, #1
 80138ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80138f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80138f6:	eea7 0ac9 	vfms.f32	s0, s15, s18
 80138fa:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80138fe:	ecac 0a01 	vstmia	ip!, {s0}
 8013902:	ed90 0a00 	vldr	s0, [r0]
 8013906:	ee37 0a80 	vadd.f32	s0, s15, s0
 801390a:	e799      	b.n	8013840 <__kernel_rem_pio2f+0xe4>
 801390c:	d105      	bne.n	801391a <__kernel_rem_pio2f+0x1be>
 801390e:	1e70      	subs	r0, r6, #1
 8013910:	ab08      	add	r3, sp, #32
 8013912:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 8013916:	11ff      	asrs	r7, r7, #7
 8013918:	e7c5      	b.n	80138a6 <__kernel_rem_pio2f+0x14a>
 801391a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801391e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8013922:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013926:	da31      	bge.n	801398c <__kernel_rem_pio2f+0x230>
 8013928:	2700      	movs	r7, #0
 801392a:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801392e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013932:	f040 809b 	bne.w	8013a6c <__kernel_rem_pio2f+0x310>
 8013936:	1e74      	subs	r4, r6, #1
 8013938:	46a4      	mov	ip, r4
 801393a:	2000      	movs	r0, #0
 801393c:	45d4      	cmp	ip, sl
 801393e:	da4a      	bge.n	80139d6 <__kernel_rem_pio2f+0x27a>
 8013940:	2800      	cmp	r0, #0
 8013942:	d07a      	beq.n	8013a3a <__kernel_rem_pio2f+0x2de>
 8013944:	ab08      	add	r3, sp, #32
 8013946:	3d08      	subs	r5, #8
 8013948:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 801394c:	2b00      	cmp	r3, #0
 801394e:	f000 8081 	beq.w	8013a54 <__kernel_rem_pio2f+0x2f8>
 8013952:	4628      	mov	r0, r5
 8013954:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8013958:	00a5      	lsls	r5, r4, #2
 801395a:	f000 fb0f 	bl	8013f7c <scalbnf>
 801395e:	aa44      	add	r2, sp, #272	; 0x110
 8013960:	1d2b      	adds	r3, r5, #4
 8013962:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8013a64 <__kernel_rem_pio2f+0x308>
 8013966:	18d1      	adds	r1, r2, r3
 8013968:	4622      	mov	r2, r4
 801396a:	2a00      	cmp	r2, #0
 801396c:	f280 80ae 	bge.w	8013acc <__kernel_rem_pio2f+0x370>
 8013970:	4622      	mov	r2, r4
 8013972:	2a00      	cmp	r2, #0
 8013974:	f2c0 80cc 	blt.w	8013b10 <__kernel_rem_pio2f+0x3b4>
 8013978:	a944      	add	r1, sp, #272	; 0x110
 801397a:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 801397e:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 8013a5c <__kernel_rem_pio2f+0x300>
 8013982:	eddf 7a39 	vldr	s15, [pc, #228]	; 8013a68 <__kernel_rem_pio2f+0x30c>
 8013986:	2000      	movs	r0, #0
 8013988:	1aa1      	subs	r1, r4, r2
 801398a:	e0b6      	b.n	8013afa <__kernel_rem_pio2f+0x39e>
 801398c:	2702      	movs	r7, #2
 801398e:	e78c      	b.n	80138aa <__kernel_rem_pio2f+0x14e>
 8013990:	6820      	ldr	r0, [r4, #0]
 8013992:	b94b      	cbnz	r3, 80139a8 <__kernel_rem_pio2f+0x24c>
 8013994:	b118      	cbz	r0, 801399e <__kernel_rem_pio2f+0x242>
 8013996:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 801399a:	6020      	str	r0, [r4, #0]
 801399c:	2001      	movs	r0, #1
 801399e:	f10e 0e01 	add.w	lr, lr, #1
 80139a2:	3404      	adds	r4, #4
 80139a4:	4603      	mov	r3, r0
 80139a6:	e785      	b.n	80138b4 <__kernel_rem_pio2f+0x158>
 80139a8:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 80139ac:	6020      	str	r0, [r4, #0]
 80139ae:	4618      	mov	r0, r3
 80139b0:	e7f5      	b.n	801399e <__kernel_rem_pio2f+0x242>
 80139b2:	1e74      	subs	r4, r6, #1
 80139b4:	a808      	add	r0, sp, #32
 80139b6:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 80139ba:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 80139be:	f10d 0c20 	add.w	ip, sp, #32
 80139c2:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 80139c6:	e77e      	b.n	80138c6 <__kernel_rem_pio2f+0x16a>
 80139c8:	1e74      	subs	r4, r6, #1
 80139ca:	a808      	add	r0, sp, #32
 80139cc:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 80139d0:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 80139d4:	e7f3      	b.n	80139be <__kernel_rem_pio2f+0x262>
 80139d6:	ab08      	add	r3, sp, #32
 80139d8:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 80139dc:	f10c 3cff 	add.w	ip, ip, #4294967295
 80139e0:	4318      	orrs	r0, r3
 80139e2:	e7ab      	b.n	801393c <__kernel_rem_pio2f+0x1e0>
 80139e4:	f10c 0c01 	add.w	ip, ip, #1
 80139e8:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 80139ec:	2c00      	cmp	r4, #0
 80139ee:	d0f9      	beq.n	80139e4 <__kernel_rem_pio2f+0x288>
 80139f0:	9b05      	ldr	r3, [sp, #20]
 80139f2:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 80139f6:	eb0d 0003 	add.w	r0, sp, r3
 80139fa:	9b01      	ldr	r3, [sp, #4]
 80139fc:	18f4      	adds	r4, r6, r3
 80139fe:	ab1c      	add	r3, sp, #112	; 0x70
 8013a00:	1c77      	adds	r7, r6, #1
 8013a02:	384c      	subs	r0, #76	; 0x4c
 8013a04:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8013a08:	4466      	add	r6, ip
 8013a0a:	42be      	cmp	r6, r7
 8013a0c:	f6ff af0b 	blt.w	8013826 <__kernel_rem_pio2f+0xca>
 8013a10:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 8013a14:	f8dd e008 	ldr.w	lr, [sp, #8]
 8013a18:	ee07 3a90 	vmov	s15, r3
 8013a1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013a20:	f04f 0c00 	mov.w	ip, #0
 8013a24:	ece4 7a01 	vstmia	r4!, {s15}
 8013a28:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8013a68 <__kernel_rem_pio2f+0x30c>
 8013a2c:	46a1      	mov	r9, r4
 8013a2e:	458c      	cmp	ip, r1
 8013a30:	dd07      	ble.n	8013a42 <__kernel_rem_pio2f+0x2e6>
 8013a32:	ece0 7a01 	vstmia	r0!, {s15}
 8013a36:	3701      	adds	r7, #1
 8013a38:	e7e7      	b.n	8013a0a <__kernel_rem_pio2f+0x2ae>
 8013a3a:	9804      	ldr	r0, [sp, #16]
 8013a3c:	f04f 0c01 	mov.w	ip, #1
 8013a40:	e7d2      	b.n	80139e8 <__kernel_rem_pio2f+0x28c>
 8013a42:	ecfe 6a01 	vldmia	lr!, {s13}
 8013a46:	ed39 7a01 	vldmdb	r9!, {s14}
 8013a4a:	f10c 0c01 	add.w	ip, ip, #1
 8013a4e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8013a52:	e7ec      	b.n	8013a2e <__kernel_rem_pio2f+0x2d2>
 8013a54:	3c01      	subs	r4, #1
 8013a56:	e775      	b.n	8013944 <__kernel_rem_pio2f+0x1e8>
 8013a58:	08014c48 	.word	0x08014c48
 8013a5c:	08014c1c 	.word	0x08014c1c
 8013a60:	43800000 	.word	0x43800000
 8013a64:	3b800000 	.word	0x3b800000
 8013a68:	00000000 	.word	0x00000000
 8013a6c:	9b03      	ldr	r3, [sp, #12]
 8013a6e:	eeb0 0a48 	vmov.f32	s0, s16
 8013a72:	1a98      	subs	r0, r3, r2
 8013a74:	f000 fa82 	bl	8013f7c <scalbnf>
 8013a78:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8013a60 <__kernel_rem_pio2f+0x304>
 8013a7c:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8013a80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013a84:	db19      	blt.n	8013aba <__kernel_rem_pio2f+0x35e>
 8013a86:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8013a64 <__kernel_rem_pio2f+0x308>
 8013a8a:	ee60 7a27 	vmul.f32	s15, s0, s15
 8013a8e:	aa08      	add	r2, sp, #32
 8013a90:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013a94:	1c74      	adds	r4, r6, #1
 8013a96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013a9a:	3508      	adds	r5, #8
 8013a9c:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8013aa0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013aa4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8013aa8:	ee10 3a10 	vmov	r3, s0
 8013aac:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8013ab0:	ee17 3a90 	vmov	r3, s15
 8013ab4:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8013ab8:	e74b      	b.n	8013952 <__kernel_rem_pio2f+0x1f6>
 8013aba:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8013abe:	aa08      	add	r2, sp, #32
 8013ac0:	ee10 3a10 	vmov	r3, s0
 8013ac4:	4634      	mov	r4, r6
 8013ac6:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8013aca:	e742      	b.n	8013952 <__kernel_rem_pio2f+0x1f6>
 8013acc:	a808      	add	r0, sp, #32
 8013ace:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 8013ad2:	9001      	str	r0, [sp, #4]
 8013ad4:	ee07 0a90 	vmov	s15, r0
 8013ad8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013adc:	3a01      	subs	r2, #1
 8013ade:	ee67 7a80 	vmul.f32	s15, s15, s0
 8013ae2:	ee20 0a07 	vmul.f32	s0, s0, s14
 8013ae6:	ed61 7a01 	vstmdb	r1!, {s15}
 8013aea:	e73e      	b.n	801396a <__kernel_rem_pio2f+0x20e>
 8013aec:	ecfc 6a01 	vldmia	ip!, {s13}
 8013af0:	ecb6 7a01 	vldmia	r6!, {s14}
 8013af4:	eee6 7a87 	vfma.f32	s15, s13, s14
 8013af8:	3001      	adds	r0, #1
 8013afa:	4550      	cmp	r0, sl
 8013afc:	dc01      	bgt.n	8013b02 <__kernel_rem_pio2f+0x3a6>
 8013afe:	4288      	cmp	r0, r1
 8013b00:	ddf4      	ble.n	8013aec <__kernel_rem_pio2f+0x390>
 8013b02:	a858      	add	r0, sp, #352	; 0x160
 8013b04:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8013b08:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 8013b0c:	3a01      	subs	r2, #1
 8013b0e:	e730      	b.n	8013972 <__kernel_rem_pio2f+0x216>
 8013b10:	9a66      	ldr	r2, [sp, #408]	; 0x198
 8013b12:	2a02      	cmp	r2, #2
 8013b14:	dc09      	bgt.n	8013b2a <__kernel_rem_pio2f+0x3ce>
 8013b16:	2a00      	cmp	r2, #0
 8013b18:	dc2a      	bgt.n	8013b70 <__kernel_rem_pio2f+0x414>
 8013b1a:	d043      	beq.n	8013ba4 <__kernel_rem_pio2f+0x448>
 8013b1c:	f009 0007 	and.w	r0, r9, #7
 8013b20:	b059      	add	sp, #356	; 0x164
 8013b22:	ecbd 8b04 	vpop	{d8-d9}
 8013b26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013b2a:	9b66      	ldr	r3, [sp, #408]	; 0x198
 8013b2c:	2b03      	cmp	r3, #3
 8013b2e:	d1f5      	bne.n	8013b1c <__kernel_rem_pio2f+0x3c0>
 8013b30:	ab30      	add	r3, sp, #192	; 0xc0
 8013b32:	442b      	add	r3, r5
 8013b34:	461a      	mov	r2, r3
 8013b36:	4619      	mov	r1, r3
 8013b38:	4620      	mov	r0, r4
 8013b3a:	2800      	cmp	r0, #0
 8013b3c:	f1a1 0104 	sub.w	r1, r1, #4
 8013b40:	dc51      	bgt.n	8013be6 <__kernel_rem_pio2f+0x48a>
 8013b42:	4621      	mov	r1, r4
 8013b44:	2901      	cmp	r1, #1
 8013b46:	f1a2 0204 	sub.w	r2, r2, #4
 8013b4a:	dc5c      	bgt.n	8013c06 <__kernel_rem_pio2f+0x4aa>
 8013b4c:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 8013a68 <__kernel_rem_pio2f+0x30c>
 8013b50:	3304      	adds	r3, #4
 8013b52:	2c01      	cmp	r4, #1
 8013b54:	dc67      	bgt.n	8013c26 <__kernel_rem_pio2f+0x4ca>
 8013b56:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8013b5a:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 8013b5e:	2f00      	cmp	r7, #0
 8013b60:	d167      	bne.n	8013c32 <__kernel_rem_pio2f+0x4d6>
 8013b62:	edc8 6a00 	vstr	s13, [r8]
 8013b66:	ed88 7a01 	vstr	s14, [r8, #4]
 8013b6a:	edc8 7a02 	vstr	s15, [r8, #8]
 8013b6e:	e7d5      	b.n	8013b1c <__kernel_rem_pio2f+0x3c0>
 8013b70:	aa30      	add	r2, sp, #192	; 0xc0
 8013b72:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 8013a68 <__kernel_rem_pio2f+0x30c>
 8013b76:	4413      	add	r3, r2
 8013b78:	4622      	mov	r2, r4
 8013b7a:	2a00      	cmp	r2, #0
 8013b7c:	da24      	bge.n	8013bc8 <__kernel_rem_pio2f+0x46c>
 8013b7e:	b34f      	cbz	r7, 8013bd4 <__kernel_rem_pio2f+0x478>
 8013b80:	eef1 7a47 	vneg.f32	s15, s14
 8013b84:	edc8 7a00 	vstr	s15, [r8]
 8013b88:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 8013b8c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013b90:	aa31      	add	r2, sp, #196	; 0xc4
 8013b92:	2301      	movs	r3, #1
 8013b94:	429c      	cmp	r4, r3
 8013b96:	da20      	bge.n	8013bda <__kernel_rem_pio2f+0x47e>
 8013b98:	b10f      	cbz	r7, 8013b9e <__kernel_rem_pio2f+0x442>
 8013b9a:	eef1 7a67 	vneg.f32	s15, s15
 8013b9e:	edc8 7a01 	vstr	s15, [r8, #4]
 8013ba2:	e7bb      	b.n	8013b1c <__kernel_rem_pio2f+0x3c0>
 8013ba4:	aa30      	add	r2, sp, #192	; 0xc0
 8013ba6:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 8013a68 <__kernel_rem_pio2f+0x30c>
 8013baa:	4413      	add	r3, r2
 8013bac:	2c00      	cmp	r4, #0
 8013bae:	da05      	bge.n	8013bbc <__kernel_rem_pio2f+0x460>
 8013bb0:	b10f      	cbz	r7, 8013bb6 <__kernel_rem_pio2f+0x45a>
 8013bb2:	eef1 7a67 	vneg.f32	s15, s15
 8013bb6:	edc8 7a00 	vstr	s15, [r8]
 8013bba:	e7af      	b.n	8013b1c <__kernel_rem_pio2f+0x3c0>
 8013bbc:	ed33 7a01 	vldmdb	r3!, {s14}
 8013bc0:	3c01      	subs	r4, #1
 8013bc2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013bc6:	e7f1      	b.n	8013bac <__kernel_rem_pio2f+0x450>
 8013bc8:	ed73 7a01 	vldmdb	r3!, {s15}
 8013bcc:	3a01      	subs	r2, #1
 8013bce:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013bd2:	e7d2      	b.n	8013b7a <__kernel_rem_pio2f+0x41e>
 8013bd4:	eef0 7a47 	vmov.f32	s15, s14
 8013bd8:	e7d4      	b.n	8013b84 <__kernel_rem_pio2f+0x428>
 8013bda:	ecb2 7a01 	vldmia	r2!, {s14}
 8013bde:	3301      	adds	r3, #1
 8013be0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013be4:	e7d6      	b.n	8013b94 <__kernel_rem_pio2f+0x438>
 8013be6:	edd1 7a00 	vldr	s15, [r1]
 8013bea:	edd1 6a01 	vldr	s13, [r1, #4]
 8013bee:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8013bf2:	3801      	subs	r0, #1
 8013bf4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013bf8:	ed81 7a00 	vstr	s14, [r1]
 8013bfc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013c00:	edc1 7a01 	vstr	s15, [r1, #4]
 8013c04:	e799      	b.n	8013b3a <__kernel_rem_pio2f+0x3de>
 8013c06:	edd2 7a00 	vldr	s15, [r2]
 8013c0a:	edd2 6a01 	vldr	s13, [r2, #4]
 8013c0e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8013c12:	3901      	subs	r1, #1
 8013c14:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013c18:	ed82 7a00 	vstr	s14, [r2]
 8013c1c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013c20:	edc2 7a01 	vstr	s15, [r2, #4]
 8013c24:	e78e      	b.n	8013b44 <__kernel_rem_pio2f+0x3e8>
 8013c26:	ed33 7a01 	vldmdb	r3!, {s14}
 8013c2a:	3c01      	subs	r4, #1
 8013c2c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013c30:	e78f      	b.n	8013b52 <__kernel_rem_pio2f+0x3f6>
 8013c32:	eef1 6a66 	vneg.f32	s13, s13
 8013c36:	eeb1 7a47 	vneg.f32	s14, s14
 8013c3a:	edc8 6a00 	vstr	s13, [r8]
 8013c3e:	ed88 7a01 	vstr	s14, [r8, #4]
 8013c42:	eef1 7a67 	vneg.f32	s15, s15
 8013c46:	e790      	b.n	8013b6a <__kernel_rem_pio2f+0x40e>

08013c48 <__kernel_sinf>:
 8013c48:	ee10 3a10 	vmov	r3, s0
 8013c4c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013c50:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8013c54:	da04      	bge.n	8013c60 <__kernel_sinf+0x18>
 8013c56:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8013c5a:	ee17 3a90 	vmov	r3, s15
 8013c5e:	b35b      	cbz	r3, 8013cb8 <__kernel_sinf+0x70>
 8013c60:	ee20 7a00 	vmul.f32	s14, s0, s0
 8013c64:	eddf 7a15 	vldr	s15, [pc, #84]	; 8013cbc <__kernel_sinf+0x74>
 8013c68:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8013cc0 <__kernel_sinf+0x78>
 8013c6c:	eea7 6a27 	vfma.f32	s12, s14, s15
 8013c70:	eddf 7a14 	vldr	s15, [pc, #80]	; 8013cc4 <__kernel_sinf+0x7c>
 8013c74:	eee6 7a07 	vfma.f32	s15, s12, s14
 8013c78:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8013cc8 <__kernel_sinf+0x80>
 8013c7c:	eea7 6a87 	vfma.f32	s12, s15, s14
 8013c80:	eddf 7a12 	vldr	s15, [pc, #72]	; 8013ccc <__kernel_sinf+0x84>
 8013c84:	ee60 6a07 	vmul.f32	s13, s0, s14
 8013c88:	eee6 7a07 	vfma.f32	s15, s12, s14
 8013c8c:	b930      	cbnz	r0, 8013c9c <__kernel_sinf+0x54>
 8013c8e:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8013cd0 <__kernel_sinf+0x88>
 8013c92:	eea7 6a27 	vfma.f32	s12, s14, s15
 8013c96:	eea6 0a26 	vfma.f32	s0, s12, s13
 8013c9a:	4770      	bx	lr
 8013c9c:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8013ca0:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8013ca4:	eee0 7a86 	vfma.f32	s15, s1, s12
 8013ca8:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8013cac:	eddf 7a09 	vldr	s15, [pc, #36]	; 8013cd4 <__kernel_sinf+0x8c>
 8013cb0:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8013cb4:	ee30 0a60 	vsub.f32	s0, s0, s1
 8013cb8:	4770      	bx	lr
 8013cba:	bf00      	nop
 8013cbc:	2f2ec9d3 	.word	0x2f2ec9d3
 8013cc0:	b2d72f34 	.word	0xb2d72f34
 8013cc4:	3638ef1b 	.word	0x3638ef1b
 8013cc8:	b9500d01 	.word	0xb9500d01
 8013ccc:	3c088889 	.word	0x3c088889
 8013cd0:	be2aaaab 	.word	0xbe2aaaab
 8013cd4:	3e2aaaab 	.word	0x3e2aaaab

08013cd8 <with_errnof>:
 8013cd8:	b513      	push	{r0, r1, r4, lr}
 8013cda:	4604      	mov	r4, r0
 8013cdc:	ed8d 0a01 	vstr	s0, [sp, #4]
 8013ce0:	f7fb ff24 	bl	800fb2c <__errno>
 8013ce4:	ed9d 0a01 	vldr	s0, [sp, #4]
 8013ce8:	6004      	str	r4, [r0, #0]
 8013cea:	b002      	add	sp, #8
 8013cec:	bd10      	pop	{r4, pc}

08013cee <xflowf>:
 8013cee:	b130      	cbz	r0, 8013cfe <xflowf+0x10>
 8013cf0:	eef1 7a40 	vneg.f32	s15, s0
 8013cf4:	ee27 0a80 	vmul.f32	s0, s15, s0
 8013cf8:	2022      	movs	r0, #34	; 0x22
 8013cfa:	f7ff bfed 	b.w	8013cd8 <with_errnof>
 8013cfe:	eef0 7a40 	vmov.f32	s15, s0
 8013d02:	e7f7      	b.n	8013cf4 <xflowf+0x6>

08013d04 <__math_uflowf>:
 8013d04:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8013d0c <__math_uflowf+0x8>
 8013d08:	f7ff bff1 	b.w	8013cee <xflowf>
 8013d0c:	10000000 	.word	0x10000000

08013d10 <__math_oflowf>:
 8013d10:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8013d18 <__math_oflowf+0x8>
 8013d14:	f7ff bfeb 	b.w	8013cee <xflowf>
 8013d18:	70000000 	.word	0x70000000

08013d1c <atanf>:
 8013d1c:	b538      	push	{r3, r4, r5, lr}
 8013d1e:	ee10 5a10 	vmov	r5, s0
 8013d22:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8013d26:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 8013d2a:	eef0 7a40 	vmov.f32	s15, s0
 8013d2e:	db10      	blt.n	8013d52 <atanf+0x36>
 8013d30:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8013d34:	dd04      	ble.n	8013d40 <atanf+0x24>
 8013d36:	ee70 7a00 	vadd.f32	s15, s0, s0
 8013d3a:	eeb0 0a67 	vmov.f32	s0, s15
 8013d3e:	bd38      	pop	{r3, r4, r5, pc}
 8013d40:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8013e78 <atanf+0x15c>
 8013d44:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 8013e7c <atanf+0x160>
 8013d48:	2d00      	cmp	r5, #0
 8013d4a:	bfd8      	it	le
 8013d4c:	eef0 7a40 	vmovle.f32	s15, s0
 8013d50:	e7f3      	b.n	8013d3a <atanf+0x1e>
 8013d52:	4b4b      	ldr	r3, [pc, #300]	; (8013e80 <atanf+0x164>)
 8013d54:	429c      	cmp	r4, r3
 8013d56:	dc10      	bgt.n	8013d7a <atanf+0x5e>
 8013d58:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8013d5c:	da0a      	bge.n	8013d74 <atanf+0x58>
 8013d5e:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8013e84 <atanf+0x168>
 8013d62:	ee30 7a07 	vadd.f32	s14, s0, s14
 8013d66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8013d6a:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8013d6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013d72:	dce2      	bgt.n	8013d3a <atanf+0x1e>
 8013d74:	f04f 33ff 	mov.w	r3, #4294967295
 8013d78:	e013      	b.n	8013da2 <atanf+0x86>
 8013d7a:	f000 f8a3 	bl	8013ec4 <fabsf>
 8013d7e:	4b42      	ldr	r3, [pc, #264]	; (8013e88 <atanf+0x16c>)
 8013d80:	429c      	cmp	r4, r3
 8013d82:	dc4f      	bgt.n	8013e24 <atanf+0x108>
 8013d84:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8013d88:	429c      	cmp	r4, r3
 8013d8a:	dc41      	bgt.n	8013e10 <atanf+0xf4>
 8013d8c:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8013d90:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8013d94:	eea0 7a27 	vfma.f32	s14, s0, s15
 8013d98:	2300      	movs	r3, #0
 8013d9a:	ee30 0a27 	vadd.f32	s0, s0, s15
 8013d9e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8013da2:	1c5a      	adds	r2, r3, #1
 8013da4:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8013da8:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8013e8c <atanf+0x170>
 8013dac:	eddf 5a38 	vldr	s11, [pc, #224]	; 8013e90 <atanf+0x174>
 8013db0:	ed9f 5a38 	vldr	s10, [pc, #224]	; 8013e94 <atanf+0x178>
 8013db4:	ee66 6a06 	vmul.f32	s13, s12, s12
 8013db8:	eee6 5a87 	vfma.f32	s11, s13, s14
 8013dbc:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8013e98 <atanf+0x17c>
 8013dc0:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8013dc4:	eddf 5a35 	vldr	s11, [pc, #212]	; 8013e9c <atanf+0x180>
 8013dc8:	eee7 5a26 	vfma.f32	s11, s14, s13
 8013dcc:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8013ea0 <atanf+0x184>
 8013dd0:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8013dd4:	eddf 5a33 	vldr	s11, [pc, #204]	; 8013ea4 <atanf+0x188>
 8013dd8:	eee7 5a26 	vfma.f32	s11, s14, s13
 8013ddc:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8013ea8 <atanf+0x18c>
 8013de0:	eea6 5a87 	vfma.f32	s10, s13, s14
 8013de4:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8013eac <atanf+0x190>
 8013de8:	eea5 7a26 	vfma.f32	s14, s10, s13
 8013dec:	ed9f 5a30 	vldr	s10, [pc, #192]	; 8013eb0 <atanf+0x194>
 8013df0:	eea7 5a26 	vfma.f32	s10, s14, s13
 8013df4:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8013eb4 <atanf+0x198>
 8013df8:	eea5 7a26 	vfma.f32	s14, s10, s13
 8013dfc:	ee27 7a26 	vmul.f32	s14, s14, s13
 8013e00:	eea5 7a86 	vfma.f32	s14, s11, s12
 8013e04:	ee27 7a87 	vmul.f32	s14, s15, s14
 8013e08:	d121      	bne.n	8013e4e <atanf+0x132>
 8013e0a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013e0e:	e794      	b.n	8013d3a <atanf+0x1e>
 8013e10:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8013e14:	ee30 7a67 	vsub.f32	s14, s0, s15
 8013e18:	ee30 0a27 	vadd.f32	s0, s0, s15
 8013e1c:	2301      	movs	r3, #1
 8013e1e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8013e22:	e7be      	b.n	8013da2 <atanf+0x86>
 8013e24:	4b24      	ldr	r3, [pc, #144]	; (8013eb8 <atanf+0x19c>)
 8013e26:	429c      	cmp	r4, r3
 8013e28:	dc0b      	bgt.n	8013e42 <atanf+0x126>
 8013e2a:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8013e2e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8013e32:	eea0 7a27 	vfma.f32	s14, s0, s15
 8013e36:	2302      	movs	r3, #2
 8013e38:	ee70 6a67 	vsub.f32	s13, s0, s15
 8013e3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013e40:	e7af      	b.n	8013da2 <atanf+0x86>
 8013e42:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8013e46:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8013e4a:	2303      	movs	r3, #3
 8013e4c:	e7a9      	b.n	8013da2 <atanf+0x86>
 8013e4e:	4a1b      	ldr	r2, [pc, #108]	; (8013ebc <atanf+0x1a0>)
 8013e50:	491b      	ldr	r1, [pc, #108]	; (8013ec0 <atanf+0x1a4>)
 8013e52:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8013e56:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8013e5a:	ed93 0a00 	vldr	s0, [r3]
 8013e5e:	ee37 7a40 	vsub.f32	s14, s14, s0
 8013e62:	ed92 0a00 	vldr	s0, [r2]
 8013e66:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013e6a:	2d00      	cmp	r5, #0
 8013e6c:	ee70 7a67 	vsub.f32	s15, s0, s15
 8013e70:	bfb8      	it	lt
 8013e72:	eef1 7a67 	vneglt.f32	s15, s15
 8013e76:	e760      	b.n	8013d3a <atanf+0x1e>
 8013e78:	3fc90fdb 	.word	0x3fc90fdb
 8013e7c:	bfc90fdb 	.word	0xbfc90fdb
 8013e80:	3edfffff 	.word	0x3edfffff
 8013e84:	7149f2ca 	.word	0x7149f2ca
 8013e88:	3f97ffff 	.word	0x3f97ffff
 8013e8c:	3c8569d7 	.word	0x3c8569d7
 8013e90:	3d4bda59 	.word	0x3d4bda59
 8013e94:	bd6ef16b 	.word	0xbd6ef16b
 8013e98:	3d886b35 	.word	0x3d886b35
 8013e9c:	3dba2e6e 	.word	0x3dba2e6e
 8013ea0:	3e124925 	.word	0x3e124925
 8013ea4:	3eaaaaab 	.word	0x3eaaaaab
 8013ea8:	bd15a221 	.word	0xbd15a221
 8013eac:	bd9d8795 	.word	0xbd9d8795
 8013eb0:	bde38e38 	.word	0xbde38e38
 8013eb4:	be4ccccd 	.word	0xbe4ccccd
 8013eb8:	401bffff 	.word	0x401bffff
 8013ebc:	08014c54 	.word	0x08014c54
 8013ec0:	08014c64 	.word	0x08014c64

08013ec4 <fabsf>:
 8013ec4:	ee10 3a10 	vmov	r3, s0
 8013ec8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013ecc:	ee00 3a10 	vmov	s0, r3
 8013ed0:	4770      	bx	lr

08013ed2 <finitef>:
 8013ed2:	b082      	sub	sp, #8
 8013ed4:	ed8d 0a01 	vstr	s0, [sp, #4]
 8013ed8:	9801      	ldr	r0, [sp, #4]
 8013eda:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8013ede:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8013ee2:	bfac      	ite	ge
 8013ee4:	2000      	movge	r0, #0
 8013ee6:	2001      	movlt	r0, #1
 8013ee8:	b002      	add	sp, #8
 8013eea:	4770      	bx	lr

08013eec <floorf>:
 8013eec:	ee10 3a10 	vmov	r3, s0
 8013ef0:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8013ef4:	3a7f      	subs	r2, #127	; 0x7f
 8013ef6:	2a16      	cmp	r2, #22
 8013ef8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8013efc:	dc2a      	bgt.n	8013f54 <floorf+0x68>
 8013efe:	2a00      	cmp	r2, #0
 8013f00:	da11      	bge.n	8013f26 <floorf+0x3a>
 8013f02:	eddf 7a18 	vldr	s15, [pc, #96]	; 8013f64 <floorf+0x78>
 8013f06:	ee30 0a27 	vadd.f32	s0, s0, s15
 8013f0a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8013f0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f12:	dd05      	ble.n	8013f20 <floorf+0x34>
 8013f14:	2b00      	cmp	r3, #0
 8013f16:	da23      	bge.n	8013f60 <floorf+0x74>
 8013f18:	4a13      	ldr	r2, [pc, #76]	; (8013f68 <floorf+0x7c>)
 8013f1a:	2900      	cmp	r1, #0
 8013f1c:	bf18      	it	ne
 8013f1e:	4613      	movne	r3, r2
 8013f20:	ee00 3a10 	vmov	s0, r3
 8013f24:	4770      	bx	lr
 8013f26:	4911      	ldr	r1, [pc, #68]	; (8013f6c <floorf+0x80>)
 8013f28:	4111      	asrs	r1, r2
 8013f2a:	420b      	tst	r3, r1
 8013f2c:	d0fa      	beq.n	8013f24 <floorf+0x38>
 8013f2e:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8013f64 <floorf+0x78>
 8013f32:	ee30 0a27 	vadd.f32	s0, s0, s15
 8013f36:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8013f3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f3e:	ddef      	ble.n	8013f20 <floorf+0x34>
 8013f40:	2b00      	cmp	r3, #0
 8013f42:	bfbe      	ittt	lt
 8013f44:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8013f48:	fa40 f202 	asrlt.w	r2, r0, r2
 8013f4c:	189b      	addlt	r3, r3, r2
 8013f4e:	ea23 0301 	bic.w	r3, r3, r1
 8013f52:	e7e5      	b.n	8013f20 <floorf+0x34>
 8013f54:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8013f58:	d3e4      	bcc.n	8013f24 <floorf+0x38>
 8013f5a:	ee30 0a00 	vadd.f32	s0, s0, s0
 8013f5e:	4770      	bx	lr
 8013f60:	2300      	movs	r3, #0
 8013f62:	e7dd      	b.n	8013f20 <floorf+0x34>
 8013f64:	7149f2ca 	.word	0x7149f2ca
 8013f68:	bf800000 	.word	0xbf800000
 8013f6c:	007fffff 	.word	0x007fffff

08013f70 <nanf>:
 8013f70:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8013f78 <nanf+0x8>
 8013f74:	4770      	bx	lr
 8013f76:	bf00      	nop
 8013f78:	7fc00000 	.word	0x7fc00000

08013f7c <scalbnf>:
 8013f7c:	ee10 3a10 	vmov	r3, s0
 8013f80:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8013f84:	d025      	beq.n	8013fd2 <scalbnf+0x56>
 8013f86:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8013f8a:	d302      	bcc.n	8013f92 <scalbnf+0x16>
 8013f8c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8013f90:	4770      	bx	lr
 8013f92:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8013f96:	d122      	bne.n	8013fde <scalbnf+0x62>
 8013f98:	4b2a      	ldr	r3, [pc, #168]	; (8014044 <scalbnf+0xc8>)
 8013f9a:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8014048 <scalbnf+0xcc>
 8013f9e:	4298      	cmp	r0, r3
 8013fa0:	ee20 0a27 	vmul.f32	s0, s0, s15
 8013fa4:	db16      	blt.n	8013fd4 <scalbnf+0x58>
 8013fa6:	ee10 3a10 	vmov	r3, s0
 8013faa:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8013fae:	3a19      	subs	r2, #25
 8013fb0:	4402      	add	r2, r0
 8013fb2:	2afe      	cmp	r2, #254	; 0xfe
 8013fb4:	dd15      	ble.n	8013fe2 <scalbnf+0x66>
 8013fb6:	ee10 3a10 	vmov	r3, s0
 8013fba:	eddf 7a24 	vldr	s15, [pc, #144]	; 801404c <scalbnf+0xd0>
 8013fbe:	eddf 6a24 	vldr	s13, [pc, #144]	; 8014050 <scalbnf+0xd4>
 8013fc2:	2b00      	cmp	r3, #0
 8013fc4:	eeb0 7a67 	vmov.f32	s14, s15
 8013fc8:	bfb8      	it	lt
 8013fca:	eef0 7a66 	vmovlt.f32	s15, s13
 8013fce:	ee27 0a27 	vmul.f32	s0, s14, s15
 8013fd2:	4770      	bx	lr
 8013fd4:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8014054 <scalbnf+0xd8>
 8013fd8:	ee20 0a27 	vmul.f32	s0, s0, s15
 8013fdc:	4770      	bx	lr
 8013fde:	0dd2      	lsrs	r2, r2, #23
 8013fe0:	e7e6      	b.n	8013fb0 <scalbnf+0x34>
 8013fe2:	2a00      	cmp	r2, #0
 8013fe4:	dd06      	ble.n	8013ff4 <scalbnf+0x78>
 8013fe6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8013fea:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8013fee:	ee00 3a10 	vmov	s0, r3
 8013ff2:	4770      	bx	lr
 8013ff4:	f112 0f16 	cmn.w	r2, #22
 8013ff8:	da1a      	bge.n	8014030 <scalbnf+0xb4>
 8013ffa:	f24c 3350 	movw	r3, #50000	; 0xc350
 8013ffe:	4298      	cmp	r0, r3
 8014000:	ee10 3a10 	vmov	r3, s0
 8014004:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8014008:	dd0a      	ble.n	8014020 <scalbnf+0xa4>
 801400a:	ed9f 0a10 	vldr	s0, [pc, #64]	; 801404c <scalbnf+0xd0>
 801400e:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8014050 <scalbnf+0xd4>
 8014012:	eef0 7a40 	vmov.f32	s15, s0
 8014016:	2b00      	cmp	r3, #0
 8014018:	bf18      	it	ne
 801401a:	eeb0 0a47 	vmovne.f32	s0, s14
 801401e:	e7db      	b.n	8013fd8 <scalbnf+0x5c>
 8014020:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8014054 <scalbnf+0xd8>
 8014024:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8014058 <scalbnf+0xdc>
 8014028:	eef0 7a40 	vmov.f32	s15, s0
 801402c:	2b00      	cmp	r3, #0
 801402e:	e7f3      	b.n	8014018 <scalbnf+0x9c>
 8014030:	3219      	adds	r2, #25
 8014032:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8014036:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 801403a:	eddf 7a08 	vldr	s15, [pc, #32]	; 801405c <scalbnf+0xe0>
 801403e:	ee07 3a10 	vmov	s14, r3
 8014042:	e7c4      	b.n	8013fce <scalbnf+0x52>
 8014044:	ffff3cb0 	.word	0xffff3cb0
 8014048:	4c000000 	.word	0x4c000000
 801404c:	7149f2ca 	.word	0x7149f2ca
 8014050:	f149f2ca 	.word	0xf149f2ca
 8014054:	0da24260 	.word	0x0da24260
 8014058:	8da24260 	.word	0x8da24260
 801405c:	33000000 	.word	0x33000000

08014060 <_init>:
 8014060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014062:	bf00      	nop
 8014064:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014066:	bc08      	pop	{r3}
 8014068:	469e      	mov	lr, r3
 801406a:	4770      	bx	lr

0801406c <_fini>:
 801406c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801406e:	bf00      	nop
 8014070:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014072:	bc08      	pop	{r3}
 8014074:	469e      	mov	lr, r3
 8014076:	4770      	bx	lr
