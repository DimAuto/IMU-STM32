
stm32_devboard_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013fe0  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c2c  080141a0  080141a0  000241a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014dcc  08014dcc  00030234  2**0
                  CONTENTS
  4 .ARM          00000008  08014dcc  08014dcc  00024dcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014dd4  08014dd4  00030234  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014dd4  08014dd4  00024dd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014dd8  08014dd8  00024dd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000234  20000000  08014ddc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000062d0  20000234  08015010  00030234  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20006504  08015010  00036504  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030234  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030264  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002875f  00000000  00000000  000302a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005f5c  00000000  00000000  00058a06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000022b8  00000000  00000000  0005e968  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001aff  00000000  00000000  00060c20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003198b  00000000  00000000  0006271f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002b835  00000000  00000000  000940aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0011e439  00000000  00000000  000bf8df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000a7d0  00000000  00000000  001ddd18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  001e84e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000234 	.word	0x20000234
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08014188 	.word	0x08014188

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000238 	.word	0x20000238
 80001fc:	08014188 	.word	0x08014188

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2f>:
 8000bd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bdc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000be0:	bf24      	itt	cs
 8000be2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000be6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bea:	d90d      	bls.n	8000c08 <__aeabi_d2f+0x30>
 8000bec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bf0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bf4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bf8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bfc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c00:	bf08      	it	eq
 8000c02:	f020 0001 	biceq.w	r0, r0, #1
 8000c06:	4770      	bx	lr
 8000c08:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c0c:	d121      	bne.n	8000c52 <__aeabi_d2f+0x7a>
 8000c0e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c12:	bfbc      	itt	lt
 8000c14:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c18:	4770      	bxlt	lr
 8000c1a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c22:	f1c2 0218 	rsb	r2, r2, #24
 8000c26:	f1c2 0c20 	rsb	ip, r2, #32
 8000c2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c32:	bf18      	it	ne
 8000c34:	f040 0001 	orrne.w	r0, r0, #1
 8000c38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c44:	ea40 000c 	orr.w	r0, r0, ip
 8000c48:	fa23 f302 	lsr.w	r3, r3, r2
 8000c4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c50:	e7cc      	b.n	8000bec <__aeabi_d2f+0x14>
 8000c52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c56:	d107      	bne.n	8000c68 <__aeabi_d2f+0x90>
 8000c58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c5c:	bf1e      	ittt	ne
 8000c5e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c62:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c66:	4770      	bxne	lr
 8000c68:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <__aeabi_uldivmod>:
 8000c78:	b953      	cbnz	r3, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7a:	b94a      	cbnz	r2, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7c:	2900      	cmp	r1, #0
 8000c7e:	bf08      	it	eq
 8000c80:	2800      	cmpeq	r0, #0
 8000c82:	bf1c      	itt	ne
 8000c84:	f04f 31ff 	movne.w	r1, #4294967295
 8000c88:	f04f 30ff 	movne.w	r0, #4294967295
 8000c8c:	f000 b970 	b.w	8000f70 <__aeabi_idiv0>
 8000c90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c98:	f000 f806 	bl	8000ca8 <__udivmoddi4>
 8000c9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca4:	b004      	add	sp, #16
 8000ca6:	4770      	bx	lr

08000ca8 <__udivmoddi4>:
 8000ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cac:	9e08      	ldr	r6, [sp, #32]
 8000cae:	460d      	mov	r5, r1
 8000cb0:	4604      	mov	r4, r0
 8000cb2:	460f      	mov	r7, r1
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d14a      	bne.n	8000d4e <__udivmoddi4+0xa6>
 8000cb8:	428a      	cmp	r2, r1
 8000cba:	4694      	mov	ip, r2
 8000cbc:	d965      	bls.n	8000d8a <__udivmoddi4+0xe2>
 8000cbe:	fab2 f382 	clz	r3, r2
 8000cc2:	b143      	cbz	r3, 8000cd6 <__udivmoddi4+0x2e>
 8000cc4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cc8:	f1c3 0220 	rsb	r2, r3, #32
 8000ccc:	409f      	lsls	r7, r3
 8000cce:	fa20 f202 	lsr.w	r2, r0, r2
 8000cd2:	4317      	orrs	r7, r2
 8000cd4:	409c      	lsls	r4, r3
 8000cd6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cda:	fa1f f58c 	uxth.w	r5, ip
 8000cde:	fbb7 f1fe 	udiv	r1, r7, lr
 8000ce2:	0c22      	lsrs	r2, r4, #16
 8000ce4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000ce8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cec:	fb01 f005 	mul.w	r0, r1, r5
 8000cf0:	4290      	cmp	r0, r2
 8000cf2:	d90a      	bls.n	8000d0a <__udivmoddi4+0x62>
 8000cf4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cf8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000cfc:	f080 811c 	bcs.w	8000f38 <__udivmoddi4+0x290>
 8000d00:	4290      	cmp	r0, r2
 8000d02:	f240 8119 	bls.w	8000f38 <__udivmoddi4+0x290>
 8000d06:	3902      	subs	r1, #2
 8000d08:	4462      	add	r2, ip
 8000d0a:	1a12      	subs	r2, r2, r0
 8000d0c:	b2a4      	uxth	r4, r4
 8000d0e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d12:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d16:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d1a:	fb00 f505 	mul.w	r5, r0, r5
 8000d1e:	42a5      	cmp	r5, r4
 8000d20:	d90a      	bls.n	8000d38 <__udivmoddi4+0x90>
 8000d22:	eb1c 0404 	adds.w	r4, ip, r4
 8000d26:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d2a:	f080 8107 	bcs.w	8000f3c <__udivmoddi4+0x294>
 8000d2e:	42a5      	cmp	r5, r4
 8000d30:	f240 8104 	bls.w	8000f3c <__udivmoddi4+0x294>
 8000d34:	4464      	add	r4, ip
 8000d36:	3802      	subs	r0, #2
 8000d38:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d3c:	1b64      	subs	r4, r4, r5
 8000d3e:	2100      	movs	r1, #0
 8000d40:	b11e      	cbz	r6, 8000d4a <__udivmoddi4+0xa2>
 8000d42:	40dc      	lsrs	r4, r3
 8000d44:	2300      	movs	r3, #0
 8000d46:	e9c6 4300 	strd	r4, r3, [r6]
 8000d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d908      	bls.n	8000d64 <__udivmoddi4+0xbc>
 8000d52:	2e00      	cmp	r6, #0
 8000d54:	f000 80ed 	beq.w	8000f32 <__udivmoddi4+0x28a>
 8000d58:	2100      	movs	r1, #0
 8000d5a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d5e:	4608      	mov	r0, r1
 8000d60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d64:	fab3 f183 	clz	r1, r3
 8000d68:	2900      	cmp	r1, #0
 8000d6a:	d149      	bne.n	8000e00 <__udivmoddi4+0x158>
 8000d6c:	42ab      	cmp	r3, r5
 8000d6e:	d302      	bcc.n	8000d76 <__udivmoddi4+0xce>
 8000d70:	4282      	cmp	r2, r0
 8000d72:	f200 80f8 	bhi.w	8000f66 <__udivmoddi4+0x2be>
 8000d76:	1a84      	subs	r4, r0, r2
 8000d78:	eb65 0203 	sbc.w	r2, r5, r3
 8000d7c:	2001      	movs	r0, #1
 8000d7e:	4617      	mov	r7, r2
 8000d80:	2e00      	cmp	r6, #0
 8000d82:	d0e2      	beq.n	8000d4a <__udivmoddi4+0xa2>
 8000d84:	e9c6 4700 	strd	r4, r7, [r6]
 8000d88:	e7df      	b.n	8000d4a <__udivmoddi4+0xa2>
 8000d8a:	b902      	cbnz	r2, 8000d8e <__udivmoddi4+0xe6>
 8000d8c:	deff      	udf	#255	; 0xff
 8000d8e:	fab2 f382 	clz	r3, r2
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	f040 8090 	bne.w	8000eb8 <__udivmoddi4+0x210>
 8000d98:	1a8a      	subs	r2, r1, r2
 8000d9a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d9e:	fa1f fe8c 	uxth.w	lr, ip
 8000da2:	2101      	movs	r1, #1
 8000da4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000da8:	fb07 2015 	mls	r0, r7, r5, r2
 8000dac:	0c22      	lsrs	r2, r4, #16
 8000dae:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000db2:	fb0e f005 	mul.w	r0, lr, r5
 8000db6:	4290      	cmp	r0, r2
 8000db8:	d908      	bls.n	8000dcc <__udivmoddi4+0x124>
 8000dba:	eb1c 0202 	adds.w	r2, ip, r2
 8000dbe:	f105 38ff 	add.w	r8, r5, #4294967295
 8000dc2:	d202      	bcs.n	8000dca <__udivmoddi4+0x122>
 8000dc4:	4290      	cmp	r0, r2
 8000dc6:	f200 80cb 	bhi.w	8000f60 <__udivmoddi4+0x2b8>
 8000dca:	4645      	mov	r5, r8
 8000dcc:	1a12      	subs	r2, r2, r0
 8000dce:	b2a4      	uxth	r4, r4
 8000dd0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000dd4:	fb07 2210 	mls	r2, r7, r0, r2
 8000dd8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ddc:	fb0e fe00 	mul.w	lr, lr, r0
 8000de0:	45a6      	cmp	lr, r4
 8000de2:	d908      	bls.n	8000df6 <__udivmoddi4+0x14e>
 8000de4:	eb1c 0404 	adds.w	r4, ip, r4
 8000de8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dec:	d202      	bcs.n	8000df4 <__udivmoddi4+0x14c>
 8000dee:	45a6      	cmp	lr, r4
 8000df0:	f200 80bb 	bhi.w	8000f6a <__udivmoddi4+0x2c2>
 8000df4:	4610      	mov	r0, r2
 8000df6:	eba4 040e 	sub.w	r4, r4, lr
 8000dfa:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dfe:	e79f      	b.n	8000d40 <__udivmoddi4+0x98>
 8000e00:	f1c1 0720 	rsb	r7, r1, #32
 8000e04:	408b      	lsls	r3, r1
 8000e06:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e0a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e0e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e12:	fa20 f307 	lsr.w	r3, r0, r7
 8000e16:	40fd      	lsrs	r5, r7
 8000e18:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e1c:	4323      	orrs	r3, r4
 8000e1e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	fb09 5518 	mls	r5, r9, r8, r5
 8000e2a:	0c1c      	lsrs	r4, r3, #16
 8000e2c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e30:	fb08 f50e 	mul.w	r5, r8, lr
 8000e34:	42a5      	cmp	r5, r4
 8000e36:	fa02 f201 	lsl.w	r2, r2, r1
 8000e3a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e3e:	d90b      	bls.n	8000e58 <__udivmoddi4+0x1b0>
 8000e40:	eb1c 0404 	adds.w	r4, ip, r4
 8000e44:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e48:	f080 8088 	bcs.w	8000f5c <__udivmoddi4+0x2b4>
 8000e4c:	42a5      	cmp	r5, r4
 8000e4e:	f240 8085 	bls.w	8000f5c <__udivmoddi4+0x2b4>
 8000e52:	f1a8 0802 	sub.w	r8, r8, #2
 8000e56:	4464      	add	r4, ip
 8000e58:	1b64      	subs	r4, r4, r5
 8000e5a:	b29d      	uxth	r5, r3
 8000e5c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e60:	fb09 4413 	mls	r4, r9, r3, r4
 8000e64:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e68:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e6c:	45a6      	cmp	lr, r4
 8000e6e:	d908      	bls.n	8000e82 <__udivmoddi4+0x1da>
 8000e70:	eb1c 0404 	adds.w	r4, ip, r4
 8000e74:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e78:	d26c      	bcs.n	8000f54 <__udivmoddi4+0x2ac>
 8000e7a:	45a6      	cmp	lr, r4
 8000e7c:	d96a      	bls.n	8000f54 <__udivmoddi4+0x2ac>
 8000e7e:	3b02      	subs	r3, #2
 8000e80:	4464      	add	r4, ip
 8000e82:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e86:	fba3 9502 	umull	r9, r5, r3, r2
 8000e8a:	eba4 040e 	sub.w	r4, r4, lr
 8000e8e:	42ac      	cmp	r4, r5
 8000e90:	46c8      	mov	r8, r9
 8000e92:	46ae      	mov	lr, r5
 8000e94:	d356      	bcc.n	8000f44 <__udivmoddi4+0x29c>
 8000e96:	d053      	beq.n	8000f40 <__udivmoddi4+0x298>
 8000e98:	b156      	cbz	r6, 8000eb0 <__udivmoddi4+0x208>
 8000e9a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e9e:	eb64 040e 	sbc.w	r4, r4, lr
 8000ea2:	fa04 f707 	lsl.w	r7, r4, r7
 8000ea6:	40ca      	lsrs	r2, r1
 8000ea8:	40cc      	lsrs	r4, r1
 8000eaa:	4317      	orrs	r7, r2
 8000eac:	e9c6 7400 	strd	r7, r4, [r6]
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eb8:	f1c3 0120 	rsb	r1, r3, #32
 8000ebc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ec0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ec4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ec8:	409d      	lsls	r5, r3
 8000eca:	432a      	orrs	r2, r5
 8000ecc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ed0:	fa1f fe8c 	uxth.w	lr, ip
 8000ed4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ed8:	fb07 1510 	mls	r5, r7, r0, r1
 8000edc:	0c11      	lsrs	r1, r2, #16
 8000ede:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ee2:	fb00 f50e 	mul.w	r5, r0, lr
 8000ee6:	428d      	cmp	r5, r1
 8000ee8:	fa04 f403 	lsl.w	r4, r4, r3
 8000eec:	d908      	bls.n	8000f00 <__udivmoddi4+0x258>
 8000eee:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ef6:	d22f      	bcs.n	8000f58 <__udivmoddi4+0x2b0>
 8000ef8:	428d      	cmp	r5, r1
 8000efa:	d92d      	bls.n	8000f58 <__udivmoddi4+0x2b0>
 8000efc:	3802      	subs	r0, #2
 8000efe:	4461      	add	r1, ip
 8000f00:	1b49      	subs	r1, r1, r5
 8000f02:	b292      	uxth	r2, r2
 8000f04:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f08:	fb07 1115 	mls	r1, r7, r5, r1
 8000f0c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f10:	fb05 f10e 	mul.w	r1, r5, lr
 8000f14:	4291      	cmp	r1, r2
 8000f16:	d908      	bls.n	8000f2a <__udivmoddi4+0x282>
 8000f18:	eb1c 0202 	adds.w	r2, ip, r2
 8000f1c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f20:	d216      	bcs.n	8000f50 <__udivmoddi4+0x2a8>
 8000f22:	4291      	cmp	r1, r2
 8000f24:	d914      	bls.n	8000f50 <__udivmoddi4+0x2a8>
 8000f26:	3d02      	subs	r5, #2
 8000f28:	4462      	add	r2, ip
 8000f2a:	1a52      	subs	r2, r2, r1
 8000f2c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f30:	e738      	b.n	8000da4 <__udivmoddi4+0xfc>
 8000f32:	4631      	mov	r1, r6
 8000f34:	4630      	mov	r0, r6
 8000f36:	e708      	b.n	8000d4a <__udivmoddi4+0xa2>
 8000f38:	4639      	mov	r1, r7
 8000f3a:	e6e6      	b.n	8000d0a <__udivmoddi4+0x62>
 8000f3c:	4610      	mov	r0, r2
 8000f3e:	e6fb      	b.n	8000d38 <__udivmoddi4+0x90>
 8000f40:	4548      	cmp	r0, r9
 8000f42:	d2a9      	bcs.n	8000e98 <__udivmoddi4+0x1f0>
 8000f44:	ebb9 0802 	subs.w	r8, r9, r2
 8000f48:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f4c:	3b01      	subs	r3, #1
 8000f4e:	e7a3      	b.n	8000e98 <__udivmoddi4+0x1f0>
 8000f50:	4645      	mov	r5, r8
 8000f52:	e7ea      	b.n	8000f2a <__udivmoddi4+0x282>
 8000f54:	462b      	mov	r3, r5
 8000f56:	e794      	b.n	8000e82 <__udivmoddi4+0x1da>
 8000f58:	4640      	mov	r0, r8
 8000f5a:	e7d1      	b.n	8000f00 <__udivmoddi4+0x258>
 8000f5c:	46d0      	mov	r8, sl
 8000f5e:	e77b      	b.n	8000e58 <__udivmoddi4+0x1b0>
 8000f60:	3d02      	subs	r5, #2
 8000f62:	4462      	add	r2, ip
 8000f64:	e732      	b.n	8000dcc <__udivmoddi4+0x124>
 8000f66:	4608      	mov	r0, r1
 8000f68:	e70a      	b.n	8000d80 <__udivmoddi4+0xd8>
 8000f6a:	4464      	add	r4, ip
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	e742      	b.n	8000df6 <__udivmoddi4+0x14e>

08000f70 <__aeabi_idiv0>:
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop

08000f74 <FusionRadiansToDegrees>:
/**
 * @brief Converts radians to degrees.
 * @param radians Radians.
 * @return Degrees.
 */
static inline float FusionRadiansToDegrees(const float radians) {
 8000f74:	b480      	push	{r7}
 8000f76:	b083      	sub	sp, #12
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	ed87 0a01 	vstr	s0, [r7, #4]
    return radians * (180.0f / (float) M_PI);
 8000f7e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f82:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8000f98 <FusionRadiansToDegrees+0x24>
 8000f86:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8000f8a:	eeb0 0a67 	vmov.f32	s0, s15
 8000f8e:	370c      	adds	r7, #12
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr
 8000f98:	42652ee0 	.word	0x42652ee0

08000f9c <FusionAsin>:
/**
 * @brief Returns the arc sine of the value.
 * @param value Value.
 * @return Arc sine of the value.
 */
static inline float FusionAsin(const float value) {
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	ed87 0a01 	vstr	s0, [r7, #4]
    if (value <= -1.0f) {
 8000fa6:	edd7 7a01 	vldr	s15, [r7, #4]
 8000faa:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8000fae:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000fb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fb6:	d802      	bhi.n	8000fbe <FusionAsin+0x22>
        return (float) M_PI / -2.0f;
 8000fb8:	eddf 7a0c 	vldr	s15, [pc, #48]	; 8000fec <FusionAsin+0x50>
 8000fbc:	e011      	b.n	8000fe2 <FusionAsin+0x46>
    }
    if (value >= 1.0f) {
 8000fbe:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fc2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000fc6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000fca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fce:	db02      	blt.n	8000fd6 <FusionAsin+0x3a>
        return (float) M_PI / 2.0f;
 8000fd0:	eddf 7a07 	vldr	s15, [pc, #28]	; 8000ff0 <FusionAsin+0x54>
 8000fd4:	e005      	b.n	8000fe2 <FusionAsin+0x46>
    }
    return asinf(value);
 8000fd6:	ed97 0a01 	vldr	s0, [r7, #4]
 8000fda:	f011 fd73 	bl	8012ac4 <asinf>
 8000fde:	eef0 7a40 	vmov.f32	s15, s0
}
 8000fe2:	eeb0 0a67 	vmov.f32	s0, s15
 8000fe6:	3708      	adds	r7, #8
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	bfc90fdb 	.word	0xbfc90fdb
 8000ff0:	3fc90fdb 	.word	0x3fc90fdb

08000ff4 <FusionVectorSubtract>:
 * @brief Returns vector B subtracted from vector A.
 * @param vectorA Vector A.
 * @param vectorB Vector B.
 * @return Vector B subtracted from vector A.
 */
static inline FusionVector FusionVectorSubtract(const FusionVector vectorA, const FusionVector vectorB) {
 8000ff4:	b480      	push	{r7}
 8000ff6:	b091      	sub	sp, #68	; 0x44
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	eeb0 5a40 	vmov.f32	s10, s0
 8000ffe:	eef0 5a60 	vmov.f32	s11, s1
 8001002:	eeb0 6a41 	vmov.f32	s12, s2
 8001006:	eef0 6a61 	vmov.f32	s13, s3
 800100a:	eeb0 7a42 	vmov.f32	s14, s4
 800100e:	eef0 7a62 	vmov.f32	s15, s5
 8001012:	ed87 5a07 	vstr	s10, [r7, #28]
 8001016:	edc7 5a08 	vstr	s11, [r7, #32]
 800101a:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 800101e:	edc7 6a04 	vstr	s13, [r7, #16]
 8001022:	ed87 7a05 	vstr	s14, [r7, #20]
 8001026:	edc7 7a06 	vstr	s15, [r7, #24]
    const FusionVector result = {.axis = {
            .x = vectorA.axis.x - vectorB.axis.x,
 800102a:	ed97 7a07 	vldr	s14, [r7, #28]
 800102e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001032:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8001036:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = vectorA.axis.y - vectorB.axis.y,
 800103a:	ed97 7a08 	vldr	s14, [r7, #32]
 800103e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001042:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8001046:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = vectorA.axis.z - vectorB.axis.z,
 800104a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800104e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001052:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8001056:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    }};
    return result;
 800105a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800105e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001062:	ca07      	ldmia	r2, {r0, r1, r2}
 8001064:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001068:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800106a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800106c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800106e:	ee06 1a90 	vmov	s13, r1
 8001072:	ee07 2a10 	vmov	s14, r2
 8001076:	ee07 3a90 	vmov	s15, r3
}
 800107a:	eeb0 0a66 	vmov.f32	s0, s13
 800107e:	eef0 0a47 	vmov.f32	s1, s14
 8001082:	eeb0 1a67 	vmov.f32	s2, s15
 8001086:	3744      	adds	r7, #68	; 0x44
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr

08001090 <FusionQuaternionToEuler>:
/**
 * @brief Converts a quaternion to ZYX Euler angles in degrees.
 * @param quaternion Quaternion.
 * @return Euler angles in degrees.
 */
static inline FusionEuler FusionQuaternionToEuler(const FusionQuaternion quaternion) {
 8001090:	b580      	push	{r7, lr}
 8001092:	b090      	sub	sp, #64	; 0x40
 8001094:	af00      	add	r7, sp, #0
 8001096:	eeb0 6a40 	vmov.f32	s12, s0
 800109a:	eef0 6a60 	vmov.f32	s13, s1
 800109e:	eeb0 7a41 	vmov.f32	s14, s2
 80010a2:	eef0 7a61 	vmov.f32	s15, s3
 80010a6:	ed87 6a04 	vstr	s12, [r7, #16]
 80010aa:	edc7 6a05 	vstr	s13, [r7, #20]
 80010ae:	ed87 7a06 	vstr	s14, [r7, #24]
 80010b2:	edc7 7a07 	vstr	s15, [r7, #28]
#define Q quaternion.element
    const float halfMinusQySquared = 0.5f - Q.y * Q.y; // calculate common terms to avoid repeated operations
 80010b6:	ed97 7a06 	vldr	s14, [r7, #24]
 80010ba:	edd7 7a06 	vldr	s15, [r7, #24]
 80010be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010c2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80010c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010ca:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    const FusionEuler euler = {.angle = {
            .roll = FusionRadiansToDegrees(atan2f(Q.w * Q.x + Q.y * Q.z, halfMinusQySquared - Q.x * Q.x)),
 80010ce:	ed97 7a04 	vldr	s14, [r7, #16]
 80010d2:	edd7 7a05 	vldr	s15, [r7, #20]
 80010d6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010da:	edd7 6a06 	vldr	s13, [r7, #24]
 80010de:	edd7 7a07 	vldr	s15, [r7, #28]
 80010e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010e6:	ee77 6a27 	vadd.f32	s13, s14, s15
 80010ea:	ed97 7a05 	vldr	s14, [r7, #20]
 80010ee:	edd7 7a05 	vldr	s15, [r7, #20]
 80010f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010f6:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80010fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010fe:	eef0 0a67 	vmov.f32	s1, s15
 8001102:	eeb0 0a66 	vmov.f32	s0, s13
 8001106:	f011 fd09 	bl	8012b1c <atan2f>
 800110a:	eef0 7a40 	vmov.f32	s15, s0
 800110e:	eeb0 0a67 	vmov.f32	s0, s15
 8001112:	f7ff ff2f 	bl	8000f74 <FusionRadiansToDegrees>
 8001116:	eef0 7a40 	vmov.f32	s15, s0
    const FusionEuler euler = {.angle = {
 800111a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            .pitch = FusionRadiansToDegrees(FusionAsin(2.0f * (Q.w * Q.y - Q.z * Q.x))),
 800111e:	ed97 7a04 	vldr	s14, [r7, #16]
 8001122:	edd7 7a06 	vldr	s15, [r7, #24]
 8001126:	ee27 7a27 	vmul.f32	s14, s14, s15
 800112a:	edd7 6a07 	vldr	s13, [r7, #28]
 800112e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001132:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001136:	ee77 7a67 	vsub.f32	s15, s14, s15
 800113a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800113e:	eeb0 0a67 	vmov.f32	s0, s15
 8001142:	f7ff ff2b 	bl	8000f9c <FusionAsin>
 8001146:	eef0 7a40 	vmov.f32	s15, s0
 800114a:	eeb0 0a67 	vmov.f32	s0, s15
 800114e:	f7ff ff11 	bl	8000f74 <FusionRadiansToDegrees>
 8001152:	eef0 7a40 	vmov.f32	s15, s0
    const FusionEuler euler = {.angle = {
 8001156:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .yaw = FusionRadiansToDegrees(atan2f(Q.w * Q.z + Q.x * Q.y, halfMinusQySquared - Q.z * Q.z)),
 800115a:	ed97 7a04 	vldr	s14, [r7, #16]
 800115e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001162:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001166:	edd7 6a05 	vldr	s13, [r7, #20]
 800116a:	edd7 7a06 	vldr	s15, [r7, #24]
 800116e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001172:	ee77 6a27 	vadd.f32	s13, s14, s15
 8001176:	ed97 7a07 	vldr	s14, [r7, #28]
 800117a:	edd7 7a07 	vldr	s15, [r7, #28]
 800117e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001182:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8001186:	ee77 7a67 	vsub.f32	s15, s14, s15
 800118a:	eef0 0a67 	vmov.f32	s1, s15
 800118e:	eeb0 0a66 	vmov.f32	s0, s13
 8001192:	f011 fcc3 	bl	8012b1c <atan2f>
 8001196:	eef0 7a40 	vmov.f32	s15, s0
 800119a:	eeb0 0a67 	vmov.f32	s0, s15
 800119e:	f7ff fee9 	bl	8000f74 <FusionRadiansToDegrees>
 80011a2:	eef0 7a40 	vmov.f32	s15, s0
    const FusionEuler euler = {.angle = {
 80011a6:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    }};
    return euler;
 80011aa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80011ae:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80011b2:	ca07      	ldmia	r2, {r0, r1, r2}
 80011b4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80011b8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80011ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80011bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80011be:	ee06 1a90 	vmov	s13, r1
 80011c2:	ee07 2a10 	vmov	s14, r2
 80011c6:	ee07 3a90 	vmov	s15, r3
#undef Q
}
 80011ca:	eeb0 0a66 	vmov.f32	s0, s13
 80011ce:	eef0 0a47 	vmov.f32	s1, s14
 80011d2:	eeb0 1a67 	vmov.f32	s2, s15
 80011d6:	3740      	adds	r7, #64	; 0x40
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}

080011dc <setGyroOffset>:
static uint32_t update_duration = 0;

FusionAhrs ahrs;
FusionOffset offset;

void setGyroOffset(gyro_data_t values){
 80011dc:	b480      	push	{r7}
 80011de:	b085      	sub	sp, #20
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	eef0 6a40 	vmov.f32	s13, s0
 80011e6:	eeb0 7a60 	vmov.f32	s14, s1
 80011ea:	eef0 7a41 	vmov.f32	s15, s2
 80011ee:	edc7 6a01 	vstr	s13, [r7, #4]
 80011f2:	ed87 7a02 	vstr	s14, [r7, #8]
 80011f6:	edc7 7a03 	vstr	s15, [r7, #12]
	gyroscopeOffset.array[0] = values.gyro_x;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	4a06      	ldr	r2, [pc, #24]	; (8001218 <setGyroOffset+0x3c>)
 80011fe:	6013      	str	r3, [r2, #0]
	gyroscopeOffset.array[1] = values.gyro_y;
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	4a05      	ldr	r2, [pc, #20]	; (8001218 <setGyroOffset+0x3c>)
 8001204:	6053      	str	r3, [r2, #4]
	gyroscopeOffset.array[2] = values.gyro_z;
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	4a03      	ldr	r2, [pc, #12]	; (8001218 <setGyroOffset+0x3c>)
 800120a:	6093      	str	r3, [r2, #8]
}
 800120c:	bf00      	nop
 800120e:	3714      	adds	r7, #20
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr
 8001218:	20000250 	.word	0x20000250

0800121c <FusionInit>:

/* Initialize Fusion algorithm. */
void FusionInit(void){
 800121c:	b5b0      	push	{r4, r5, r7, lr}
 800121e:	b08a      	sub	sp, #40	; 0x28
 8001220:	af00      	add	r7, sp, #0
	gyro_data_t values = {0};
 8001222:	f107 031c 	add.w	r3, r7, #28
 8001226:	2200      	movs	r2, #0
 8001228:	601a      	str	r2, [r3, #0]
 800122a:	605a      	str	r2, [r3, #4]
 800122c:	609a      	str	r2, [r3, #8]
	FusionOffsetInitialise(&offset, SAMPLE_RATE);
 800122e:	2164      	movs	r1, #100	; 0x64
 8001230:	4815      	ldr	r0, [pc, #84]	; (8001288 <FusionInit+0x6c>)
 8001232:	f001 fea1 	bl	8002f78 <FusionOffsetInitialise>
	FusionAhrsInitialise(&ahrs);
 8001236:	4815      	ldr	r0, [pc, #84]	; (800128c <FusionInit+0x70>)
 8001238:	f000 fe2c 	bl	8001e94 <FusionAhrsInitialise>
	const FusionAhrsSettings settings = {
 800123c:	4b14      	ldr	r3, [pc, #80]	; (8001290 <FusionInit+0x74>)
 800123e:	1d3c      	adds	r4, r7, #4
 8001240:	461d      	mov	r5, r3
 8001242:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001244:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001246:	e895 0003 	ldmia.w	r5, {r0, r1}
 800124a:	e884 0003 	stmia.w	r4, {r0, r1}
	            .gyroscopeRange = 500.0f,
	            .accelerationRejection = 10.0f,
	            .magneticRejection = 10.0f,
	            .recoveryTriggerPeriod = 30 * SAMPLE_RATE,
	    };
	FusionAhrsSetSettings(&ahrs, &settings);
 800124e:	1d3b      	adds	r3, r7, #4
 8001250:	4619      	mov	r1, r3
 8001252:	480e      	ldr	r0, [pc, #56]	; (800128c <FusionInit+0x70>)
 8001254:	f000 fea0 	bl	8001f98 <FusionAhrsSetSettings>
//	if (!Flash_isWritten (GYRO_OFFSET_ADDR)){	// Check if the specific memory addr is written, in order not to cause HRDFAULT
	Flash_Read_CalTable(GYRO_OFFSET_ADDR, &values);
 8001258:	f107 031c 	add.w	r3, r7, #28
 800125c:	4619      	mov	r1, r3
 800125e:	480d      	ldr	r0, [pc, #52]	; (8001294 <FusionInit+0x78>)
 8001260:	f001 ffe8 	bl	8003234 <Flash_Read_CalTable>
	setGyroOffset(values);
 8001264:	edd7 6a07 	vldr	s13, [r7, #28]
 8001268:	ed97 7a08 	vldr	s14, [r7, #32]
 800126c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001270:	eeb0 0a66 	vmov.f32	s0, s13
 8001274:	eef0 0a47 	vmov.f32	s1, s14
 8001278:	eeb0 1a67 	vmov.f32	s2, s15
 800127c:	f7ff ffae 	bl	80011dc <setGyroOffset>
//	}
}
 8001280:	bf00      	nop
 8001282:	3728      	adds	r7, #40	; 0x28
 8001284:	46bd      	mov	sp, r7
 8001286:	bdb0      	pop	{r4, r5, r7, pc}
 8001288:	200002d4 	.word	0x200002d4
 800128c:	20000260 	.word	0x20000260
 8001290:	080141a0 	.word	0x080141a0
 8001294:	080fb000 	.word	0x080fb000

08001298 <FusionCalcAngle>:

/* Calculate angle based only on Accelerometer and gyroscope.*/
void FusionCalcAngle(mems_data_t *memsData, FusionEuler *output_angles){
 8001298:	b580      	push	{r7, lr}
 800129a:	b08e      	sub	sp, #56	; 0x38
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
 80012a0:	6039      	str	r1, [r7, #0]
	FusionVector gyroscope = {memsData->gyro.gyro_x, memsData->gyro.gyro_y, memsData->gyro.gyro_z};
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	61bb      	str	r3, [r7, #24]
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	61fb      	str	r3, [r7, #28]
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	689b      	ldr	r3, [r3, #8]
 80012b2:	623b      	str	r3, [r7, #32]
	const FusionVector accelerometer = {memsData->acc.acc_x, memsData->acc.acc_y, memsData->acc.acc_z};
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	68db      	ldr	r3, [r3, #12]
 80012b8:	60fb      	str	r3, [r7, #12]
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	691b      	ldr	r3, [r3, #16]
 80012be:	613b      	str	r3, [r7, #16]
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	695b      	ldr	r3, [r3, #20]
 80012c4:	617b      	str	r3, [r7, #20]
	gyroscope = FusionVectorSubtract(gyroscope, gyroscopeOffset);
 80012c6:	4b6b      	ldr	r3, [pc, #428]	; (8001474 <FusionCalcAngle+0x1dc>)
 80012c8:	ed93 5a00 	vldr	s10, [r3]
 80012cc:	edd3 5a01 	vldr	s11, [r3, #4]
 80012d0:	ed93 6a02 	vldr	s12, [r3, #8]
 80012d4:	edd7 6a06 	vldr	s13, [r7, #24]
 80012d8:	ed97 7a07 	vldr	s14, [r7, #28]
 80012dc:	edd7 7a08 	vldr	s15, [r7, #32]
 80012e0:	eef0 1a45 	vmov.f32	s3, s10
 80012e4:	eeb0 2a65 	vmov.f32	s4, s11
 80012e8:	eef0 2a46 	vmov.f32	s5, s12
 80012ec:	eeb0 0a66 	vmov.f32	s0, s13
 80012f0:	eef0 0a47 	vmov.f32	s1, s14
 80012f4:	eeb0 1a67 	vmov.f32	s2, s15
 80012f8:	f7ff fe7c 	bl	8000ff4 <FusionVectorSubtract>
 80012fc:	eef0 6a40 	vmov.f32	s13, s0
 8001300:	eeb0 7a60 	vmov.f32	s14, s1
 8001304:	eef0 7a41 	vmov.f32	s15, s2
 8001308:	edc7 6a06 	vstr	s13, [r7, #24]
 800130c:	ed87 7a07 	vstr	s14, [r7, #28]
 8001310:	edc7 7a08 	vstr	s15, [r7, #32]
#ifndef GYRO_TS
	float delta = (float)(memsData->timestamp - prv_tick) / 1000.0f;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001318:	4b57      	ldr	r3, [pc, #348]	; (8001478 <FusionCalcAngle+0x1e0>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	1ad3      	subs	r3, r2, r3
 800131e:	ee07 3a90 	vmov	s15, r3
 8001322:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001326:	eddf 6a55 	vldr	s13, [pc, #340]	; 800147c <FusionCalcAngle+0x1e4>
 800132a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800132e:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	prv_tick = memsData->timestamp;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001336:	4a50      	ldr	r2, [pc, #320]	; (8001478 <FusionCalcAngle+0x1e0>)
 8001338:	6013      	str	r3, [r2, #0]
#else
	float delta = (float) ( memsData->timestamp - previousTimestamp) * (float) GYRO_TIMESTAMP_LSB_USEC / (float) 1000000;
	previousTimestamp = memsData->timestamp;
#endif
//	delta += 0.006; //Add a const offset.
	if ((delta >= MEMS_SR_SEC - 7) && (delta <= MEMS_SR_SEC + 7)){
 800133a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800133e:	eeb9 7a0c 	vmov.f32	s14, #156	; 0xc0e00000 -7.0
 8001342:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001346:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800134a:	db25      	blt.n	8001398 <FusionCalcAngle+0x100>
 800134c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001350:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 8001354:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001358:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800135c:	d81c      	bhi.n	8001398 <FusionCalcAngle+0x100>
		FusionAhrsUpdateNoMagnetometer(&ahrs, gyroscope, accelerometer, delta);
 800135e:	ed97 5a03 	vldr	s10, [r7, #12]
 8001362:	edd7 5a04 	vldr	s11, [r7, #16]
 8001366:	ed97 6a05 	vldr	s12, [r7, #20]
 800136a:	edd7 6a06 	vldr	s13, [r7, #24]
 800136e:	ed97 7a07 	vldr	s14, [r7, #28]
 8001372:	edd7 7a08 	vldr	s15, [r7, #32]
 8001376:	ed97 3a0d 	vldr	s6, [r7, #52]	; 0x34
 800137a:	eef0 1a45 	vmov.f32	s3, s10
 800137e:	eeb0 2a65 	vmov.f32	s4, s11
 8001382:	eef0 2a46 	vmov.f32	s5, s12
 8001386:	eeb0 0a66 	vmov.f32	s0, s13
 800138a:	eef0 0a47 	vmov.f32	s1, s14
 800138e:	eeb0 1a67 	vmov.f32	s2, s15
 8001392:	483b      	ldr	r0, [pc, #236]	; (8001480 <FusionCalcAngle+0x1e8>)
 8001394:	f001 fcdc 	bl	8002d50 <FusionAhrsUpdateNoMagnetometer>
//
//	uint8_t text[20] = {0};
//	sprintf(text, "%f\r\n,", delta);
//	uart_write_debug(text, 20);

	*output_angles = FusionQuaternionToEuler(FusionAhrsGetQuaternion(&ahrs));
 8001398:	4839      	ldr	r0, [pc, #228]	; (8001480 <FusionCalcAngle+0x1e8>)
 800139a:	f001 fd33 	bl	8002e04 <FusionAhrsGetQuaternion>
 800139e:	eeb0 6a40 	vmov.f32	s12, s0
 80013a2:	eef0 6a60 	vmov.f32	s13, s1
 80013a6:	eeb0 7a41 	vmov.f32	s14, s2
 80013aa:	eef0 7a61 	vmov.f32	s15, s3
 80013ae:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 80013b2:	edc7 6a0a 	vstr	s13, [r7, #40]	; 0x28
 80013b6:	ed87 7a0b 	vstr	s14, [r7, #44]	; 0x2c
 80013ba:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 80013be:	ed97 6a09 	vldr	s12, [r7, #36]	; 0x24
 80013c2:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 80013c6:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80013ca:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80013ce:	eeb0 0a46 	vmov.f32	s0, s12
 80013d2:	eef0 0a66 	vmov.f32	s1, s13
 80013d6:	eeb0 1a47 	vmov.f32	s2, s14
 80013da:	eef0 1a67 	vmov.f32	s3, s15
 80013de:	f7ff fe57 	bl	8001090 <FusionQuaternionToEuler>
 80013e2:	eef0 6a40 	vmov.f32	s13, s0
 80013e6:	eeb0 7a60 	vmov.f32	s14, s1
 80013ea:	eef0 7a41 	vmov.f32	s15, s2
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	edc3 6a00 	vstr	s13, [r3]
 80013f4:	ed83 7a01 	vstr	s14, [r3, #4]
 80013f8:	edc3 7a02 	vstr	s15, [r3, #8]
	if (output_angles->angle.yaw < 0){
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	edd3 7a02 	vldr	s15, [r3, #8]
 8001402:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001406:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800140a:	d509      	bpl.n	8001420 <FusionCalcAngle+0x188>
		output_angles->angle.yaw += 360;
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001412:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8001484 <FusionCalcAngle+0x1ec>
 8001416:	ee77 7a87 	vadd.f32	s15, s15, s14
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	edc3 7a02 	vstr	s15, [r3, #8]
	}
	if (output_angles->angle.roll < 0){
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	edd3 7a00 	vldr	s15, [r3]
 8001426:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800142a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800142e:	d509      	bpl.n	8001444 <FusionCalcAngle+0x1ac>
		output_angles->angle.roll += 360;
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	edd3 7a00 	vldr	s15, [r3]
 8001436:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8001484 <FusionCalcAngle+0x1ec>
 800143a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	edc3 7a00 	vstr	s15, [r3]
	}
	if (output_angles->angle.pitch < 0){
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	edd3 7a01 	vldr	s15, [r3, #4]
 800144a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800144e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001452:	d400      	bmi.n	8001456 <FusionCalcAngle+0x1be>
		output_angles->angle.pitch += 360;
	}
	//	const FusionVect = FusionQuaternionToEuler(FusionAhrsGetQuaternion(&ahrs));
}
 8001454:	e009      	b.n	800146a <FusionCalcAngle+0x1d2>
		output_angles->angle.pitch += 360;
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	edd3 7a01 	vldr	s15, [r3, #4]
 800145c:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8001484 <FusionCalcAngle+0x1ec>
 8001460:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	edc3 7a01 	vstr	s15, [r3, #4]
}
 800146a:	bf00      	nop
 800146c:	3738      	adds	r7, #56	; 0x38
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	20000250 	.word	0x20000250
 8001478:	2000025c 	.word	0x2000025c
 800147c:	447a0000 	.word	0x447a0000
 8001480:	20000260 	.word	0x20000260
 8001484:	43b40000 	.word	0x43b40000

08001488 <FusionDegreesToRadians>:
static inline float FusionDegreesToRadians(const float degrees) {
 8001488:	b480      	push	{r7}
 800148a:	b083      	sub	sp, #12
 800148c:	af00      	add	r7, sp, #0
 800148e:	ed87 0a01 	vstr	s0, [r7, #4]
    return degrees * ((float) M_PI / 180.0f);
 8001492:	edd7 7a01 	vldr	s15, [r7, #4]
 8001496:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80014ac <FusionDegreesToRadians+0x24>
 800149a:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800149e:	eeb0 0a67 	vmov.f32	s0, s15
 80014a2:	370c      	adds	r7, #12
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr
 80014ac:	3c8efa35 	.word	0x3c8efa35

080014b0 <FusionFastInverseSqrt>:
static inline float FusionFastInverseSqrt(const float x) {
 80014b0:	b480      	push	{r7}
 80014b2:	b085      	sub	sp, #20
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	ed87 0a01 	vstr	s0, [r7, #4]
    Union32 union32 = {.f = x};
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	60fb      	str	r3, [r7, #12]
    union32.i = 0x5F1F1412 - (union32.i >> 1);
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	105a      	asrs	r2, r3, #1
 80014c2:	4b10      	ldr	r3, [pc, #64]	; (8001504 <FusionFastInverseSqrt+0x54>)
 80014c4:	1a9b      	subs	r3, r3, r2
 80014c6:	60fb      	str	r3, [r7, #12]
    return union32.f * (1.69000231f - 0.714158168f * x * union32.f * union32.f);
 80014c8:	ed97 7a03 	vldr	s14, [r7, #12]
 80014cc:	edd7 7a01 	vldr	s15, [r7, #4]
 80014d0:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8001508 <FusionFastInverseSqrt+0x58>
 80014d4:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80014d8:	edd7 7a03 	vldr	s15, [r7, #12]
 80014dc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80014e0:	edd7 7a03 	vldr	s15, [r7, #12]
 80014e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014e8:	eddf 6a08 	vldr	s13, [pc, #32]	; 800150c <FusionFastInverseSqrt+0x5c>
 80014ec:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80014f0:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 80014f4:	eeb0 0a67 	vmov.f32	s0, s15
 80014f8:	3714      	adds	r7, #20
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr
 8001502:	bf00      	nop
 8001504:	5f1f1412 	.word	0x5f1f1412
 8001508:	3f36d312 	.word	0x3f36d312
 800150c:	3fd851ff 	.word	0x3fd851ff

08001510 <FusionVectorIsZero>:
static inline bool FusionVectorIsZero(const FusionVector vector) {
 8001510:	b480      	push	{r7}
 8001512:	b085      	sub	sp, #20
 8001514:	af00      	add	r7, sp, #0
 8001516:	eef0 6a40 	vmov.f32	s13, s0
 800151a:	eeb0 7a60 	vmov.f32	s14, s1
 800151e:	eef0 7a41 	vmov.f32	s15, s2
 8001522:	edc7 6a01 	vstr	s13, [r7, #4]
 8001526:	ed87 7a02 	vstr	s14, [r7, #8]
 800152a:	edc7 7a03 	vstr	s15, [r7, #12]
    return (vector.axis.x == 0.0f) && (vector.axis.y == 0.0f) && (vector.axis.z == 0.0f);
 800152e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001532:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001536:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800153a:	d10f      	bne.n	800155c <FusionVectorIsZero+0x4c>
 800153c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001540:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001544:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001548:	d108      	bne.n	800155c <FusionVectorIsZero+0x4c>
 800154a:	edd7 7a03 	vldr	s15, [r7, #12]
 800154e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001552:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001556:	d101      	bne.n	800155c <FusionVectorIsZero+0x4c>
 8001558:	2301      	movs	r3, #1
 800155a:	e000      	b.n	800155e <FusionVectorIsZero+0x4e>
 800155c:	2300      	movs	r3, #0
 800155e:	f003 0301 	and.w	r3, r3, #1
 8001562:	b2db      	uxtb	r3, r3
}
 8001564:	4618      	mov	r0, r3
 8001566:	3714      	adds	r7, #20
 8001568:	46bd      	mov	sp, r7
 800156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156e:	4770      	bx	lr

08001570 <FusionVectorAdd>:
static inline FusionVector FusionVectorAdd(const FusionVector vectorA, const FusionVector vectorB) {
 8001570:	b480      	push	{r7}
 8001572:	b091      	sub	sp, #68	; 0x44
 8001574:	af00      	add	r7, sp, #0
 8001576:	eeb0 5a40 	vmov.f32	s10, s0
 800157a:	eef0 5a60 	vmov.f32	s11, s1
 800157e:	eeb0 6a41 	vmov.f32	s12, s2
 8001582:	eef0 6a61 	vmov.f32	s13, s3
 8001586:	eeb0 7a42 	vmov.f32	s14, s4
 800158a:	eef0 7a62 	vmov.f32	s15, s5
 800158e:	ed87 5a07 	vstr	s10, [r7, #28]
 8001592:	edc7 5a08 	vstr	s11, [r7, #32]
 8001596:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 800159a:	edc7 6a04 	vstr	s13, [r7, #16]
 800159e:	ed87 7a05 	vstr	s14, [r7, #20]
 80015a2:	edc7 7a06 	vstr	s15, [r7, #24]
            .x = vectorA.axis.x + vectorB.axis.x,
 80015a6:	ed97 7a07 	vldr	s14, [r7, #28]
 80015aa:	edd7 7a04 	vldr	s15, [r7, #16]
 80015ae:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80015b2:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = vectorA.axis.y + vectorB.axis.y,
 80015b6:	ed97 7a08 	vldr	s14, [r7, #32]
 80015ba:	edd7 7a05 	vldr	s15, [r7, #20]
 80015be:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80015c2:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = vectorA.axis.z + vectorB.axis.z,
 80015c6:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80015ca:	edd7 7a06 	vldr	s15, [r7, #24]
 80015ce:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80015d2:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    return result;
 80015d6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80015da:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80015de:	ca07      	ldmia	r2, {r0, r1, r2}
 80015e0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80015e4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80015e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80015e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80015ea:	ee06 1a90 	vmov	s13, r1
 80015ee:	ee07 2a10 	vmov	s14, r2
 80015f2:	ee07 3a90 	vmov	s15, r3
}
 80015f6:	eeb0 0a66 	vmov.f32	s0, s13
 80015fa:	eef0 0a47 	vmov.f32	s1, s14
 80015fe:	eeb0 1a67 	vmov.f32	s2, s15
 8001602:	3744      	adds	r7, #68	; 0x44
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr

0800160c <FusionVectorSum>:
static inline float FusionVectorSum(const FusionVector vector) {
 800160c:	b480      	push	{r7}
 800160e:	b085      	sub	sp, #20
 8001610:	af00      	add	r7, sp, #0
 8001612:	eef0 6a40 	vmov.f32	s13, s0
 8001616:	eeb0 7a60 	vmov.f32	s14, s1
 800161a:	eef0 7a41 	vmov.f32	s15, s2
 800161e:	edc7 6a01 	vstr	s13, [r7, #4]
 8001622:	ed87 7a02 	vstr	s14, [r7, #8]
 8001626:	edc7 7a03 	vstr	s15, [r7, #12]
    return vector.axis.x + vector.axis.y + vector.axis.z;
 800162a:	ed97 7a01 	vldr	s14, [r7, #4]
 800162e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001632:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001636:	edd7 7a03 	vldr	s15, [r7, #12]
 800163a:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 800163e:	eeb0 0a67 	vmov.f32	s0, s15
 8001642:	3714      	adds	r7, #20
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr

0800164c <FusionVectorMultiplyScalar>:
static inline FusionVector FusionVectorMultiplyScalar(const FusionVector vector, const float scalar) {
 800164c:	b480      	push	{r7}
 800164e:	b08f      	sub	sp, #60	; 0x3c
 8001650:	af00      	add	r7, sp, #0
 8001652:	eef0 6a40 	vmov.f32	s13, s0
 8001656:	eeb0 7a60 	vmov.f32	s14, s1
 800165a:	eef0 7a41 	vmov.f32	s15, s2
 800165e:	edc7 1a04 	vstr	s3, [r7, #16]
 8001662:	edc7 6a05 	vstr	s13, [r7, #20]
 8001666:	ed87 7a06 	vstr	s14, [r7, #24]
 800166a:	edc7 7a07 	vstr	s15, [r7, #28]
            .x = vector.axis.x * scalar,
 800166e:	ed97 7a05 	vldr	s14, [r7, #20]
 8001672:	edd7 7a04 	vldr	s15, [r7, #16]
 8001676:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800167a:	edc7 7a08 	vstr	s15, [r7, #32]
            .y = vector.axis.y * scalar,
 800167e:	ed97 7a06 	vldr	s14, [r7, #24]
 8001682:	edd7 7a04 	vldr	s15, [r7, #16]
 8001686:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800168a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            .z = vector.axis.z * scalar,
 800168e:	ed97 7a07 	vldr	s14, [r7, #28]
 8001692:	edd7 7a04 	vldr	s15, [r7, #16]
 8001696:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800169a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    return result;
 800169e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016a2:	f107 0220 	add.w	r2, r7, #32
 80016a6:	ca07      	ldmia	r2, {r0, r1, r2}
 80016a8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80016ac:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80016ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80016b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016b2:	ee06 1a90 	vmov	s13, r1
 80016b6:	ee07 2a10 	vmov	s14, r2
 80016ba:	ee07 3a90 	vmov	s15, r3
}
 80016be:	eeb0 0a66 	vmov.f32	s0, s13
 80016c2:	eef0 0a47 	vmov.f32	s1, s14
 80016c6:	eeb0 1a67 	vmov.f32	s2, s15
 80016ca:	373c      	adds	r7, #60	; 0x3c
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr

080016d4 <FusionVectorHadamardProduct>:
static inline FusionVector FusionVectorHadamardProduct(const FusionVector vectorA, const FusionVector vectorB) {
 80016d4:	b480      	push	{r7}
 80016d6:	b091      	sub	sp, #68	; 0x44
 80016d8:	af00      	add	r7, sp, #0
 80016da:	eeb0 5a40 	vmov.f32	s10, s0
 80016de:	eef0 5a60 	vmov.f32	s11, s1
 80016e2:	eeb0 6a41 	vmov.f32	s12, s2
 80016e6:	eef0 6a61 	vmov.f32	s13, s3
 80016ea:	eeb0 7a42 	vmov.f32	s14, s4
 80016ee:	eef0 7a62 	vmov.f32	s15, s5
 80016f2:	ed87 5a07 	vstr	s10, [r7, #28]
 80016f6:	edc7 5a08 	vstr	s11, [r7, #32]
 80016fa:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 80016fe:	edc7 6a04 	vstr	s13, [r7, #16]
 8001702:	ed87 7a05 	vstr	s14, [r7, #20]
 8001706:	edc7 7a06 	vstr	s15, [r7, #24]
            .x = vectorA.axis.x * vectorB.axis.x,
 800170a:	ed97 7a07 	vldr	s14, [r7, #28]
 800170e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001712:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8001716:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = vectorA.axis.y * vectorB.axis.y,
 800171a:	ed97 7a08 	vldr	s14, [r7, #32]
 800171e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001722:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8001726:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = vectorA.axis.z * vectorB.axis.z,
 800172a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800172e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001732:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8001736:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    return result;
 800173a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800173e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001742:	ca07      	ldmia	r2, {r0, r1, r2}
 8001744:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001748:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800174a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800174c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800174e:	ee06 1a90 	vmov	s13, r1
 8001752:	ee07 2a10 	vmov	s14, r2
 8001756:	ee07 3a90 	vmov	s15, r3
}
 800175a:	eeb0 0a66 	vmov.f32	s0, s13
 800175e:	eef0 0a47 	vmov.f32	s1, s14
 8001762:	eeb0 1a67 	vmov.f32	s2, s15
 8001766:	3744      	adds	r7, #68	; 0x44
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr

08001770 <FusionVectorCrossProduct>:
static inline FusionVector FusionVectorCrossProduct(const FusionVector vectorA, const FusionVector vectorB) {
 8001770:	b480      	push	{r7}
 8001772:	b091      	sub	sp, #68	; 0x44
 8001774:	af00      	add	r7, sp, #0
 8001776:	eeb0 5a40 	vmov.f32	s10, s0
 800177a:	eef0 5a60 	vmov.f32	s11, s1
 800177e:	eeb0 6a41 	vmov.f32	s12, s2
 8001782:	eef0 6a61 	vmov.f32	s13, s3
 8001786:	eeb0 7a42 	vmov.f32	s14, s4
 800178a:	eef0 7a62 	vmov.f32	s15, s5
 800178e:	ed87 5a07 	vstr	s10, [r7, #28]
 8001792:	edc7 5a08 	vstr	s11, [r7, #32]
 8001796:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 800179a:	edc7 6a04 	vstr	s13, [r7, #16]
 800179e:	ed87 7a05 	vstr	s14, [r7, #20]
 80017a2:	edc7 7a06 	vstr	s15, [r7, #24]
            .x = A.y * B.z - A.z * B.y,
 80017a6:	ed97 7a08 	vldr	s14, [r7, #32]
 80017aa:	edd7 7a06 	vldr	s15, [r7, #24]
 80017ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017b2:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80017b6:	edd7 7a05 	vldr	s15, [r7, #20]
 80017ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017be:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80017c2:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = A.z * B.x - A.x * B.z,
 80017c6:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80017ca:	edd7 7a04 	vldr	s15, [r7, #16]
 80017ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017d2:	edd7 6a07 	vldr	s13, [r7, #28]
 80017d6:	edd7 7a06 	vldr	s15, [r7, #24]
 80017da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017de:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80017e2:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = A.x * B.y - A.y * B.x,
 80017e6:	ed97 7a07 	vldr	s14, [r7, #28]
 80017ea:	edd7 7a05 	vldr	s15, [r7, #20]
 80017ee:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017f2:	edd7 6a08 	vldr	s13, [r7, #32]
 80017f6:	edd7 7a04 	vldr	s15, [r7, #16]
 80017fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017fe:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8001802:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    return result;
 8001806:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800180a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800180e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001810:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001814:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001816:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001818:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800181a:	ee06 1a90 	vmov	s13, r1
 800181e:	ee07 2a10 	vmov	s14, r2
 8001822:	ee07 3a90 	vmov	s15, r3
}
 8001826:	eeb0 0a66 	vmov.f32	s0, s13
 800182a:	eef0 0a47 	vmov.f32	s1, s14
 800182e:	eeb0 1a67 	vmov.f32	s2, s15
 8001832:	3744      	adds	r7, #68	; 0x44
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr

0800183c <FusionVectorDotProduct>:
static inline float FusionVectorDotProduct(const FusionVector vectorA, const FusionVector vectorB) {
 800183c:	b580      	push	{r7, lr}
 800183e:	b08a      	sub	sp, #40	; 0x28
 8001840:	af00      	add	r7, sp, #0
 8001842:	eeb0 5a40 	vmov.f32	s10, s0
 8001846:	eef0 5a60 	vmov.f32	s11, s1
 800184a:	eeb0 6a41 	vmov.f32	s12, s2
 800184e:	eef0 6a61 	vmov.f32	s13, s3
 8001852:	eeb0 7a42 	vmov.f32	s14, s4
 8001856:	eef0 7a62 	vmov.f32	s15, s5
 800185a:	ed87 5a03 	vstr	s10, [r7, #12]
 800185e:	edc7 5a04 	vstr	s11, [r7, #16]
 8001862:	ed87 6a05 	vstr	s12, [r7, #20]
 8001866:	edc7 6a00 	vstr	s13, [r7]
 800186a:	ed87 7a01 	vstr	s14, [r7, #4]
 800186e:	edc7 7a02 	vstr	s15, [r7, #8]
    return FusionVectorSum(FusionVectorHadamardProduct(vectorA, vectorB));
 8001872:	ed97 5a00 	vldr	s10, [r7]
 8001876:	edd7 5a01 	vldr	s11, [r7, #4]
 800187a:	ed97 6a02 	vldr	s12, [r7, #8]
 800187e:	edd7 6a03 	vldr	s13, [r7, #12]
 8001882:	ed97 7a04 	vldr	s14, [r7, #16]
 8001886:	edd7 7a05 	vldr	s15, [r7, #20]
 800188a:	eef0 1a45 	vmov.f32	s3, s10
 800188e:	eeb0 2a65 	vmov.f32	s4, s11
 8001892:	eef0 2a46 	vmov.f32	s5, s12
 8001896:	eeb0 0a66 	vmov.f32	s0, s13
 800189a:	eef0 0a47 	vmov.f32	s1, s14
 800189e:	eeb0 1a67 	vmov.f32	s2, s15
 80018a2:	f7ff ff17 	bl	80016d4 <FusionVectorHadamardProduct>
 80018a6:	eef0 6a40 	vmov.f32	s13, s0
 80018aa:	eeb0 7a60 	vmov.f32	s14, s1
 80018ae:	eef0 7a41 	vmov.f32	s15, s2
 80018b2:	edc7 6a07 	vstr	s13, [r7, #28]
 80018b6:	ed87 7a08 	vstr	s14, [r7, #32]
 80018ba:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 80018be:	edd7 6a07 	vldr	s13, [r7, #28]
 80018c2:	ed97 7a08 	vldr	s14, [r7, #32]
 80018c6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80018ca:	eeb0 0a66 	vmov.f32	s0, s13
 80018ce:	eef0 0a47 	vmov.f32	s1, s14
 80018d2:	eeb0 1a67 	vmov.f32	s2, s15
 80018d6:	f7ff fe99 	bl	800160c <FusionVectorSum>
 80018da:	eef0 7a40 	vmov.f32	s15, s0
}
 80018de:	eeb0 0a67 	vmov.f32	s0, s15
 80018e2:	3728      	adds	r7, #40	; 0x28
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}

080018e8 <FusionVectorMagnitudeSquared>:
static inline float FusionVectorMagnitudeSquared(const FusionVector vector) {
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b088      	sub	sp, #32
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	eef0 6a40 	vmov.f32	s13, s0
 80018f2:	eeb0 7a60 	vmov.f32	s14, s1
 80018f6:	eef0 7a41 	vmov.f32	s15, s2
 80018fa:	edc7 6a01 	vstr	s13, [r7, #4]
 80018fe:	ed87 7a02 	vstr	s14, [r7, #8]
 8001902:	edc7 7a03 	vstr	s15, [r7, #12]
    return FusionVectorSum(FusionVectorHadamardProduct(vector, vector));
 8001906:	ed97 5a01 	vldr	s10, [r7, #4]
 800190a:	edd7 5a02 	vldr	s11, [r7, #8]
 800190e:	ed97 6a03 	vldr	s12, [r7, #12]
 8001912:	edd7 6a01 	vldr	s13, [r7, #4]
 8001916:	ed97 7a02 	vldr	s14, [r7, #8]
 800191a:	edd7 7a03 	vldr	s15, [r7, #12]
 800191e:	eef0 1a45 	vmov.f32	s3, s10
 8001922:	eeb0 2a65 	vmov.f32	s4, s11
 8001926:	eef0 2a46 	vmov.f32	s5, s12
 800192a:	eeb0 0a66 	vmov.f32	s0, s13
 800192e:	eef0 0a47 	vmov.f32	s1, s14
 8001932:	eeb0 1a67 	vmov.f32	s2, s15
 8001936:	f7ff fecd 	bl	80016d4 <FusionVectorHadamardProduct>
 800193a:	eef0 6a40 	vmov.f32	s13, s0
 800193e:	eeb0 7a60 	vmov.f32	s14, s1
 8001942:	eef0 7a41 	vmov.f32	s15, s2
 8001946:	edc7 6a05 	vstr	s13, [r7, #20]
 800194a:	ed87 7a06 	vstr	s14, [r7, #24]
 800194e:	edc7 7a07 	vstr	s15, [r7, #28]
 8001952:	edd7 6a05 	vldr	s13, [r7, #20]
 8001956:	ed97 7a06 	vldr	s14, [r7, #24]
 800195a:	edd7 7a07 	vldr	s15, [r7, #28]
 800195e:	eeb0 0a66 	vmov.f32	s0, s13
 8001962:	eef0 0a47 	vmov.f32	s1, s14
 8001966:	eeb0 1a67 	vmov.f32	s2, s15
 800196a:	f7ff fe4f 	bl	800160c <FusionVectorSum>
 800196e:	eef0 7a40 	vmov.f32	s15, s0
}
 8001972:	eeb0 0a67 	vmov.f32	s0, s15
 8001976:	3720      	adds	r7, #32
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}

0800197c <FusionVectorNormalise>:
static inline FusionVector FusionVectorNormalise(const FusionVector vector) {
 800197c:	b580      	push	{r7, lr}
 800197e:	b08c      	sub	sp, #48	; 0x30
 8001980:	af00      	add	r7, sp, #0
 8001982:	eef0 6a40 	vmov.f32	s13, s0
 8001986:	eeb0 7a60 	vmov.f32	s14, s1
 800198a:	eef0 7a41 	vmov.f32	s15, s2
 800198e:	edc7 6a05 	vstr	s13, [r7, #20]
 8001992:	ed87 7a06 	vstr	s14, [r7, #24]
 8001996:	edc7 7a07 	vstr	s15, [r7, #28]
    const float magnitudeReciprocal = FusionFastInverseSqrt(FusionVectorMagnitudeSquared(vector));
 800199a:	edd7 6a05 	vldr	s13, [r7, #20]
 800199e:	ed97 7a06 	vldr	s14, [r7, #24]
 80019a2:	edd7 7a07 	vldr	s15, [r7, #28]
 80019a6:	eeb0 0a66 	vmov.f32	s0, s13
 80019aa:	eef0 0a47 	vmov.f32	s1, s14
 80019ae:	eeb0 1a67 	vmov.f32	s2, s15
 80019b2:	f7ff ff99 	bl	80018e8 <FusionVectorMagnitudeSquared>
 80019b6:	eef0 7a40 	vmov.f32	s15, s0
 80019ba:	eeb0 0a67 	vmov.f32	s0, s15
 80019be:	f7ff fd77 	bl	80014b0 <FusionFastInverseSqrt>
 80019c2:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
    return FusionVectorMultiplyScalar(vector, magnitudeReciprocal);
 80019c6:	edd7 6a05 	vldr	s13, [r7, #20]
 80019ca:	ed97 7a06 	vldr	s14, [r7, #24]
 80019ce:	edd7 7a07 	vldr	s15, [r7, #28]
 80019d2:	edd7 1a0b 	vldr	s3, [r7, #44]	; 0x2c
 80019d6:	eeb0 0a66 	vmov.f32	s0, s13
 80019da:	eef0 0a47 	vmov.f32	s1, s14
 80019de:	eeb0 1a67 	vmov.f32	s2, s15
 80019e2:	f7ff fe33 	bl	800164c <FusionVectorMultiplyScalar>
 80019e6:	eef0 6a40 	vmov.f32	s13, s0
 80019ea:	eeb0 7a60 	vmov.f32	s14, s1
 80019ee:	eef0 7a41 	vmov.f32	s15, s2
 80019f2:	edc7 6a08 	vstr	s13, [r7, #32]
 80019f6:	ed87 7a09 	vstr	s14, [r7, #36]	; 0x24
 80019fa:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 80019fe:	6a39      	ldr	r1, [r7, #32]
 8001a00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a04:	ee06 1a90 	vmov	s13, r1
 8001a08:	ee07 2a10 	vmov	s14, r2
 8001a0c:	ee07 3a90 	vmov	s15, r3
}
 8001a10:	eeb0 0a66 	vmov.f32	s0, s13
 8001a14:	eef0 0a47 	vmov.f32	s1, s14
 8001a18:	eeb0 1a67 	vmov.f32	s2, s15
 8001a1c:	3730      	adds	r7, #48	; 0x30
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}

08001a22 <FusionQuaternionAdd>:
static inline FusionQuaternion FusionQuaternionAdd(const FusionQuaternion quaternionA, const FusionQuaternion quaternionB) {
 8001a22:	b490      	push	{r4, r7}
 8001a24:	b094      	sub	sp, #80	; 0x50
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	eeb0 4a40 	vmov.f32	s8, s0
 8001a2c:	eef0 4a60 	vmov.f32	s9, s1
 8001a30:	eeb0 5a41 	vmov.f32	s10, s2
 8001a34:	eef0 5a61 	vmov.f32	s11, s3
 8001a38:	eeb0 6a42 	vmov.f32	s12, s4
 8001a3c:	eef0 6a62 	vmov.f32	s13, s5
 8001a40:	eeb0 7a43 	vmov.f32	s14, s6
 8001a44:	eef0 7a63 	vmov.f32	s15, s7
 8001a48:	ed87 4a08 	vstr	s8, [r7, #32]
 8001a4c:	edc7 4a09 	vstr	s9, [r7, #36]	; 0x24
 8001a50:	ed87 5a0a 	vstr	s10, [r7, #40]	; 0x28
 8001a54:	edc7 5a0b 	vstr	s11, [r7, #44]	; 0x2c
 8001a58:	ed87 6a04 	vstr	s12, [r7, #16]
 8001a5c:	edc7 6a05 	vstr	s13, [r7, #20]
 8001a60:	ed87 7a06 	vstr	s14, [r7, #24]
 8001a64:	edc7 7a07 	vstr	s15, [r7, #28]
            .w = quaternionA.element.w + quaternionB.element.w,
 8001a68:	ed97 7a08 	vldr	s14, [r7, #32]
 8001a6c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a70:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8001a74:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
            .x = quaternionA.element.x + quaternionB.element.x,
 8001a78:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001a7c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001a80:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8001a84:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
            .y = quaternionA.element.y + quaternionB.element.y,
 8001a88:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001a8c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001a90:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8001a94:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
            .z = quaternionA.element.z + quaternionB.element.z,
 8001a98:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8001a9c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001aa0:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8001aa4:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    return result;
 8001aa8:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8001aac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001ab0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ab2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001ab6:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001ab8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001aba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001abc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001abe:	ee06 0a10 	vmov	s12, r0
 8001ac2:	ee06 1a90 	vmov	s13, r1
 8001ac6:	ee07 2a10 	vmov	s14, r2
 8001aca:	ee07 3a90 	vmov	s15, r3
}
 8001ace:	eeb0 0a46 	vmov.f32	s0, s12
 8001ad2:	eef0 0a66 	vmov.f32	s1, s13
 8001ad6:	eeb0 1a47 	vmov.f32	s2, s14
 8001ada:	eef0 1a67 	vmov.f32	s3, s15
 8001ade:	3750      	adds	r7, #80	; 0x50
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bc90      	pop	{r4, r7}
 8001ae4:	4770      	bx	lr

08001ae6 <FusionQuaternionMultiply>:
static inline FusionQuaternion FusionQuaternionMultiply(const FusionQuaternion quaternionA, const FusionQuaternion quaternionB) {
 8001ae6:	b490      	push	{r4, r7}
 8001ae8:	b094      	sub	sp, #80	; 0x50
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	eeb0 4a40 	vmov.f32	s8, s0
 8001af0:	eef0 4a60 	vmov.f32	s9, s1
 8001af4:	eeb0 5a41 	vmov.f32	s10, s2
 8001af8:	eef0 5a61 	vmov.f32	s11, s3
 8001afc:	eeb0 6a42 	vmov.f32	s12, s4
 8001b00:	eef0 6a62 	vmov.f32	s13, s5
 8001b04:	eeb0 7a43 	vmov.f32	s14, s6
 8001b08:	eef0 7a63 	vmov.f32	s15, s7
 8001b0c:	ed87 4a08 	vstr	s8, [r7, #32]
 8001b10:	edc7 4a09 	vstr	s9, [r7, #36]	; 0x24
 8001b14:	ed87 5a0a 	vstr	s10, [r7, #40]	; 0x28
 8001b18:	edc7 5a0b 	vstr	s11, [r7, #44]	; 0x2c
 8001b1c:	ed87 6a04 	vstr	s12, [r7, #16]
 8001b20:	edc7 6a05 	vstr	s13, [r7, #20]
 8001b24:	ed87 7a06 	vstr	s14, [r7, #24]
 8001b28:	edc7 7a07 	vstr	s15, [r7, #28]
            .w = A.w * B.w - A.x * B.x - A.y * B.y - A.z * B.z,
 8001b2c:	ed97 7a08 	vldr	s14, [r7, #32]
 8001b30:	edd7 7a04 	vldr	s15, [r7, #16]
 8001b34:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b38:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8001b3c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001b40:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b44:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001b48:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8001b4c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001b50:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b54:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001b58:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8001b5c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001b60:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b64:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8001b68:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
            .x = A.w * B.x + A.x * B.w + A.y * B.z - A.z * B.y,
 8001b6c:	ed97 7a08 	vldr	s14, [r7, #32]
 8001b70:	edd7 7a05 	vldr	s15, [r7, #20]
 8001b74:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b78:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8001b7c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001b80:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b84:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b88:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8001b8c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001b90:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b94:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b98:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8001b9c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001ba0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ba4:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8001ba8:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
            .y = A.w * B.y - A.x * B.z + A.y * B.w + A.z * B.x,
 8001bac:	ed97 7a08 	vldr	s14, [r7, #32]
 8001bb0:	edd7 7a06 	vldr	s15, [r7, #24]
 8001bb4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001bb8:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8001bbc:	edd7 7a07 	vldr	s15, [r7, #28]
 8001bc0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bc4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001bc8:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8001bcc:	edd7 7a04 	vldr	s15, [r7, #16]
 8001bd0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bd4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001bd8:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8001bdc:	edd7 7a05 	vldr	s15, [r7, #20]
 8001be0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001be4:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8001be8:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
            .z = A.w * B.z + A.x * B.y - A.y * B.x + A.z * B.w,
 8001bec:	ed97 7a08 	vldr	s14, [r7, #32]
 8001bf0:	edd7 7a07 	vldr	s15, [r7, #28]
 8001bf4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001bf8:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8001bfc:	edd7 7a06 	vldr	s15, [r7, #24]
 8001c00:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c04:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c08:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8001c0c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c10:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c14:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001c18:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8001c1c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001c20:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c24:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8001c28:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    return result;
 8001c2c:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8001c30:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001c34:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c36:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001c3a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001c3c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001c3e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001c40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c42:	ee06 0a10 	vmov	s12, r0
 8001c46:	ee06 1a90 	vmov	s13, r1
 8001c4a:	ee07 2a10 	vmov	s14, r2
 8001c4e:	ee07 3a90 	vmov	s15, r3
}
 8001c52:	eeb0 0a46 	vmov.f32	s0, s12
 8001c56:	eef0 0a66 	vmov.f32	s1, s13
 8001c5a:	eeb0 1a47 	vmov.f32	s2, s14
 8001c5e:	eef0 1a67 	vmov.f32	s3, s15
 8001c62:	3750      	adds	r7, #80	; 0x50
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bc90      	pop	{r4, r7}
 8001c68:	4770      	bx	lr

08001c6a <FusionQuaternionMultiplyVector>:
static inline FusionQuaternion FusionQuaternionMultiplyVector(const FusionQuaternion quaternion, const FusionVector vector) {
 8001c6a:	b490      	push	{r4, r7}
 8001c6c:	b094      	sub	sp, #80	; 0x50
 8001c6e:	af00      	add	r7, sp, #0
 8001c70:	eef0 4a40 	vmov.f32	s9, s0
 8001c74:	eeb0 5a60 	vmov.f32	s10, s1
 8001c78:	eef0 5a41 	vmov.f32	s11, s2
 8001c7c:	eeb0 6a61 	vmov.f32	s12, s3
 8001c80:	eef0 6a42 	vmov.f32	s13, s4
 8001c84:	eeb0 7a62 	vmov.f32	s14, s5
 8001c88:	eef0 7a43 	vmov.f32	s15, s6
 8001c8c:	edc7 4a08 	vstr	s9, [r7, #32]
 8001c90:	ed87 5a09 	vstr	s10, [r7, #36]	; 0x24
 8001c94:	edc7 5a0a 	vstr	s11, [r7, #40]	; 0x28
 8001c98:	ed87 6a0b 	vstr	s12, [r7, #44]	; 0x2c
 8001c9c:	edc7 6a05 	vstr	s13, [r7, #20]
 8001ca0:	ed87 7a06 	vstr	s14, [r7, #24]
 8001ca4:	edc7 7a07 	vstr	s15, [r7, #28]
            .w = -Q.x * V.x - Q.y * V.y - Q.z * V.z,
 8001ca8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001cac:	eeb1 7a67 	vneg.f32	s14, s15
 8001cb0:	edd7 7a05 	vldr	s15, [r7, #20]
 8001cb4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001cb8:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8001cbc:	edd7 7a06 	vldr	s15, [r7, #24]
 8001cc0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001cc4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001cc8:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8001ccc:	edd7 7a07 	vldr	s15, [r7, #28]
 8001cd0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001cd4:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8001cd8:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
            .x = Q.w * V.x + Q.y * V.z - Q.z * V.y,
 8001cdc:	ed97 7a08 	vldr	s14, [r7, #32]
 8001ce0:	edd7 7a05 	vldr	s15, [r7, #20]
 8001ce4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ce8:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8001cec:	edd7 7a07 	vldr	s15, [r7, #28]
 8001cf0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001cf4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001cf8:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8001cfc:	edd7 7a06 	vldr	s15, [r7, #24]
 8001d00:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d04:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8001d08:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
            .y = Q.w * V.y - Q.x * V.z + Q.z * V.x,
 8001d0c:	ed97 7a08 	vldr	s14, [r7, #32]
 8001d10:	edd7 7a06 	vldr	s15, [r7, #24]
 8001d14:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d18:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8001d1c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001d20:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d24:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d28:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8001d2c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d30:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d34:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8001d38:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
            .z = Q.w * V.z + Q.x * V.y - Q.y * V.x,
 8001d3c:	ed97 7a08 	vldr	s14, [r7, #32]
 8001d40:	edd7 7a07 	vldr	s15, [r7, #28]
 8001d44:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d48:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8001d4c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001d50:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d54:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d58:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8001d5c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d60:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d64:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8001d68:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    return result;
 8001d6c:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8001d70:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001d74:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d76:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001d7a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001d7c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001d7e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001d80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d82:	ee06 0a10 	vmov	s12, r0
 8001d86:	ee06 1a90 	vmov	s13, r1
 8001d8a:	ee07 2a10 	vmov	s14, r2
 8001d8e:	ee07 3a90 	vmov	s15, r3
}
 8001d92:	eeb0 0a46 	vmov.f32	s0, s12
 8001d96:	eef0 0a66 	vmov.f32	s1, s13
 8001d9a:	eeb0 1a47 	vmov.f32	s2, s14
 8001d9e:	eef0 1a67 	vmov.f32	s3, s15
 8001da2:	3750      	adds	r7, #80	; 0x50
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bc90      	pop	{r4, r7}
 8001da8:	4770      	bx	lr

08001daa <FusionQuaternionNormalise>:
static inline FusionQuaternion FusionQuaternionNormalise(const FusionQuaternion quaternion) {
 8001daa:	b590      	push	{r4, r7, lr}
 8001dac:	b093      	sub	sp, #76	; 0x4c
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	eeb0 6a40 	vmov.f32	s12, s0
 8001db4:	eef0 6a60 	vmov.f32	s13, s1
 8001db8:	eeb0 7a41 	vmov.f32	s14, s2
 8001dbc:	eef0 7a61 	vmov.f32	s15, s3
 8001dc0:	ed87 6a04 	vstr	s12, [r7, #16]
 8001dc4:	edc7 6a05 	vstr	s13, [r7, #20]
 8001dc8:	ed87 7a06 	vstr	s14, [r7, #24]
 8001dcc:	edc7 7a07 	vstr	s15, [r7, #28]
    const float magnitudeReciprocal = FusionFastInverseSqrt(Q.w * Q.w + Q.x * Q.x + Q.y * Q.y + Q.z * Q.z);
 8001dd0:	ed97 7a04 	vldr	s14, [r7, #16]
 8001dd4:	edd7 7a04 	vldr	s15, [r7, #16]
 8001dd8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ddc:	edd7 6a05 	vldr	s13, [r7, #20]
 8001de0:	edd7 7a05 	vldr	s15, [r7, #20]
 8001de4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001de8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001dec:	edd7 6a06 	vldr	s13, [r7, #24]
 8001df0:	edd7 7a06 	vldr	s15, [r7, #24]
 8001df4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001df8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001dfc:	edd7 6a07 	vldr	s13, [r7, #28]
 8001e00:	edd7 7a07 	vldr	s15, [r7, #28]
 8001e04:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e08:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e0c:	eeb0 0a67 	vmov.f32	s0, s15
 8001e10:	f7ff fb4e 	bl	80014b0 <FusionFastInverseSqrt>
 8001e14:	ed87 0a11 	vstr	s0, [r7, #68]	; 0x44
            .w = Q.w * magnitudeReciprocal,
 8001e18:	ed97 7a04 	vldr	s14, [r7, #16]
 8001e1c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001e20:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8001e24:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            .x = Q.x * magnitudeReciprocal,
 8001e28:	ed97 7a05 	vldr	s14, [r7, #20]
 8001e2c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001e30:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8001e34:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = Q.y * magnitudeReciprocal,
 8001e38:	ed97 7a06 	vldr	s14, [r7, #24]
 8001e3c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001e40:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8001e44:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = Q.z * magnitudeReciprocal,
 8001e48:	ed97 7a07 	vldr	s14, [r7, #28]
 8001e4c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001e50:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8001e54:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    return result;
 8001e58:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8001e5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e60:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e62:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001e66:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001e68:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001e6a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001e6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e6e:	ee06 0a10 	vmov	s12, r0
 8001e72:	ee06 1a90 	vmov	s13, r1
 8001e76:	ee07 2a10 	vmov	s14, r2
 8001e7a:	ee07 3a90 	vmov	s15, r3
}
 8001e7e:	eeb0 0a46 	vmov.f32	s0, s12
 8001e82:	eef0 0a66 	vmov.f32	s1, s13
 8001e86:	eeb0 1a47 	vmov.f32	s2, s14
 8001e8a:	eef0 1a67 	vmov.f32	s3, s15
 8001e8e:	374c      	adds	r7, #76	; 0x4c
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd90      	pop	{r4, r7, pc}

08001e94 <FusionAhrsInitialise>:

/**
 * @brief Initialises the AHRS algorithm structure.
 * @param ahrs AHRS algorithm structure.
 */
void FusionAhrsInitialise(FusionAhrs *const ahrs) {
 8001e94:	b5b0      	push	{r4, r5, r7, lr}
 8001e96:	b088      	sub	sp, #32
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
    const FusionAhrsSettings settings = {
 8001e9c:	4b0b      	ldr	r3, [pc, #44]	; (8001ecc <FusionAhrsInitialise+0x38>)
 8001e9e:	f107 0408 	add.w	r4, r7, #8
 8001ea2:	461d      	mov	r5, r3
 8001ea4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ea6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ea8:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001eac:	e884 0003 	stmia.w	r4, {r0, r1}
            .gyroscopeRange = 0.0f,
            .accelerationRejection = 90.0f,
            .magneticRejection = 90.0f,
            .recoveryTriggerPeriod = 0,
    };
    FusionAhrsSetSettings(ahrs, &settings);
 8001eb0:	f107 0308 	add.w	r3, r7, #8
 8001eb4:	4619      	mov	r1, r3
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	f000 f86e 	bl	8001f98 <FusionAhrsSetSettings>
    FusionAhrsReset(ahrs);
 8001ebc:	6878      	ldr	r0, [r7, #4]
 8001ebe:	f000 f807 	bl	8001ed0 <FusionAhrsReset>
}
 8001ec2:	bf00      	nop
 8001ec4:	3720      	adds	r7, #32
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bdb0      	pop	{r4, r5, r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	080141b8 	.word	0x080141b8

08001ed0 <FusionAhrsReset>:
/**
 * @brief Resets the AHRS algorithm.  This is equivalent to reinitialising the
 * algorithm while maintaining the current settings.
 * @param ahrs AHRS algorithm structure.
 */
void FusionAhrsReset(FusionAhrs *const ahrs) {
 8001ed0:	b480      	push	{r7}
 8001ed2:	b091      	sub	sp, #68	; 0x44
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
    ahrs->quaternion = FUSION_IDENTITY_QUATERNION;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001ede:	619a      	str	r2, [r3, #24]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	f04f 0200 	mov.w	r2, #0
 8001ee6:	61da      	str	r2, [r3, #28]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	f04f 0200 	mov.w	r2, #0
 8001eee:	621a      	str	r2, [r3, #32]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	f04f 0200 	mov.w	r2, #0
 8001ef6:	625a      	str	r2, [r3, #36]	; 0x24
    ahrs->accelerometer = FUSION_VECTOR_ZERO;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	f04f 0200 	mov.w	r2, #0
 8001efe:	629a      	str	r2, [r3, #40]	; 0x28
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	f04f 0200 	mov.w	r2, #0
 8001f06:	62da      	str	r2, [r3, #44]	; 0x2c
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	f04f 0200 	mov.w	r2, #0
 8001f0e:	631a      	str	r2, [r3, #48]	; 0x30
    ahrs->initialising = true;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2201      	movs	r2, #1
 8001f14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    ahrs->rampedGain = INITIAL_GAIN;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	4a1e      	ldr	r2, [pc, #120]	; (8001f94 <FusionAhrsReset+0xc4>)
 8001f1c:	639a      	str	r2, [r3, #56]	; 0x38
    ahrs->angularRateRecovery = false;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2200      	movs	r2, #0
 8001f22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    ahrs->halfAccelerometerFeedback = FUSION_VECTOR_ZERO;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	f04f 0200 	mov.w	r2, #0
 8001f2c:	645a      	str	r2, [r3, #68]	; 0x44
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	f04f 0200 	mov.w	r2, #0
 8001f34:	649a      	str	r2, [r3, #72]	; 0x48
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	f04f 0200 	mov.w	r2, #0
 8001f3c:	64da      	str	r2, [r3, #76]	; 0x4c
    ahrs->halfMagnetometerFeedback = FUSION_VECTOR_ZERO;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	f04f 0200 	mov.w	r2, #0
 8001f44:	651a      	str	r2, [r3, #80]	; 0x50
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	f04f 0200 	mov.w	r2, #0
 8001f4c:	655a      	str	r2, [r3, #84]	; 0x54
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	f04f 0200 	mov.w	r2, #0
 8001f54:	659a      	str	r2, [r3, #88]	; 0x58
    ahrs->accelerometerIgnored = false;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
    ahrs->accelerationRecoveryTrigger = 0;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2200      	movs	r2, #0
 8001f62:	661a      	str	r2, [r3, #96]	; 0x60
    ahrs->accelerationRecoveryTimeout = ahrs->settings.recoveryTriggerPeriod;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	695b      	ldr	r3, [r3, #20]
 8001f68:	461a      	mov	r2, r3
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	665a      	str	r2, [r3, #100]	; 0x64
    ahrs->magnetometerIgnored = false;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2200      	movs	r2, #0
 8001f72:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    ahrs->magneticRecoveryTrigger = 0;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	66da      	str	r2, [r3, #108]	; 0x6c
    ahrs->magneticRecoveryTimeout = ahrs->settings.recoveryTriggerPeriod;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	695b      	ldr	r3, [r3, #20]
 8001f80:	461a      	mov	r2, r3
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	671a      	str	r2, [r3, #112]	; 0x70
}
 8001f86:	bf00      	nop
 8001f88:	3744      	adds	r7, #68	; 0x44
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr
 8001f92:	bf00      	nop
 8001f94:	41200000 	.word	0x41200000

08001f98 <FusionAhrsSetSettings>:
/**
 * @brief Sets the AHRS algorithm settings.
 * @param ahrs AHRS algorithm structure.
 * @param settings Settings.
 */
void FusionAhrsSetSettings(FusionAhrs *const ahrs, const FusionAhrsSettings *const settings) {
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b082      	sub	sp, #8
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
 8001fa0:	6039      	str	r1, [r7, #0]
    ahrs->settings.convention = settings->convention;
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	781a      	ldrb	r2, [r3, #0]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	701a      	strb	r2, [r3, #0]
    ahrs->settings.gain = settings->gain;
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	685a      	ldr	r2, [r3, #4]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	605a      	str	r2, [r3, #4]
    ahrs->settings.gyroscopeRange = settings->gyroscopeRange == 0.0f ? FLT_MAX : 0.98f * settings->gyroscopeRange;
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	edd3 7a02 	vldr	s15, [r3, #8]
 8001fb8:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001fbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fc0:	d007      	beq.n	8001fd2 <FusionAhrsSetSettings+0x3a>
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	edd3 7a02 	vldr	s15, [r3, #8]
 8001fc8:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 80020fc <FusionAhrsSetSettings+0x164>
 8001fcc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001fd0:	e001      	b.n	8001fd6 <FusionAhrsSetSettings+0x3e>
 8001fd2:	eddf 7a4b 	vldr	s15, [pc, #300]	; 8002100 <FusionAhrsSetSettings+0x168>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	edc3 7a02 	vstr	s15, [r3, #8]
    ahrs->settings.accelerationRejection = settings->accelerationRejection == 0.0f ? FLT_MAX : powf(0.5f * sinf(FusionDegreesToRadians(settings->accelerationRejection)), 2);
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	edd3 7a03 	vldr	s15, [r3, #12]
 8001fe2:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001fe6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fea:	d01b      	beq.n	8002024 <FusionAhrsSetSettings+0x8c>
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	edd3 7a03 	vldr	s15, [r3, #12]
 8001ff2:	eeb0 0a67 	vmov.f32	s0, s15
 8001ff6:	f7ff fa47 	bl	8001488 <FusionDegreesToRadians>
 8001ffa:	eef0 7a40 	vmov.f32	s15, s0
 8001ffe:	eeb0 0a67 	vmov.f32	s0, s15
 8002002:	f010 fe31 	bl	8012c68 <sinf>
 8002006:	eef0 7a40 	vmov.f32	s15, s0
 800200a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800200e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002012:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8002016:	eeb0 0a67 	vmov.f32	s0, s15
 800201a:	f010 fd81 	bl	8012b20 <powf>
 800201e:	eef0 7a40 	vmov.f32	s15, s0
 8002022:	e001      	b.n	8002028 <FusionAhrsSetSettings+0x90>
 8002024:	eddf 7a36 	vldr	s15, [pc, #216]	; 8002100 <FusionAhrsSetSettings+0x168>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	edc3 7a03 	vstr	s15, [r3, #12]
    ahrs->settings.magneticRejection = settings->magneticRejection == 0.0f ? FLT_MAX : powf(0.5f * sinf(FusionDegreesToRadians(settings->magneticRejection)), 2);
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	edd3 7a04 	vldr	s15, [r3, #16]
 8002034:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002038:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800203c:	d01b      	beq.n	8002076 <FusionAhrsSetSettings+0xde>
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	edd3 7a04 	vldr	s15, [r3, #16]
 8002044:	eeb0 0a67 	vmov.f32	s0, s15
 8002048:	f7ff fa1e 	bl	8001488 <FusionDegreesToRadians>
 800204c:	eef0 7a40 	vmov.f32	s15, s0
 8002050:	eeb0 0a67 	vmov.f32	s0, s15
 8002054:	f010 fe08 	bl	8012c68 <sinf>
 8002058:	eef0 7a40 	vmov.f32	s15, s0
 800205c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002060:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002064:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8002068:	eeb0 0a67 	vmov.f32	s0, s15
 800206c:	f010 fd58 	bl	8012b20 <powf>
 8002070:	eef0 7a40 	vmov.f32	s15, s0
 8002074:	e001      	b.n	800207a <FusionAhrsSetSettings+0xe2>
 8002076:	eddf 7a22 	vldr	s15, [pc, #136]	; 8002100 <FusionAhrsSetSettings+0x168>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	edc3 7a04 	vstr	s15, [r3, #16]
    ahrs->settings.recoveryTriggerPeriod = settings->recoveryTriggerPeriod;
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	695a      	ldr	r2, [r3, #20]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	615a      	str	r2, [r3, #20]
    ahrs->accelerationRecoveryTimeout = ahrs->settings.recoveryTriggerPeriod;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	695b      	ldr	r3, [r3, #20]
 800208c:	461a      	mov	r2, r3
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	665a      	str	r2, [r3, #100]	; 0x64
    ahrs->magneticRecoveryTimeout = ahrs->settings.recoveryTriggerPeriod;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	695b      	ldr	r3, [r3, #20]
 8002096:	461a      	mov	r2, r3
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	671a      	str	r2, [r3, #112]	; 0x70
    if ((settings->gain == 0.0f) || (settings->recoveryTriggerPeriod == 0)) { // disable acceleration and magnetic rejection features if gain is zero
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	edd3 7a01 	vldr	s15, [r3, #4]
 80020a2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80020a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020aa:	d003      	beq.n	80020b4 <FusionAhrsSetSettings+0x11c>
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	695b      	ldr	r3, [r3, #20]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d105      	bne.n	80020c0 <FusionAhrsSetSettings+0x128>
        ahrs->settings.accelerationRejection = FLT_MAX;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	4a13      	ldr	r2, [pc, #76]	; (8002104 <FusionAhrsSetSettings+0x16c>)
 80020b8:	60da      	str	r2, [r3, #12]
        ahrs->settings.magneticRejection = FLT_MAX;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	4a11      	ldr	r2, [pc, #68]	; (8002104 <FusionAhrsSetSettings+0x16c>)
 80020be:	611a      	str	r2, [r3, #16]
    }
    if (ahrs->initialising == false) {
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80020c6:	f083 0301 	eor.w	r3, r3, #1
 80020ca:	b2db      	uxtb	r3, r3
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d003      	beq.n	80020d8 <FusionAhrsSetSettings+0x140>
        ahrs->rampedGain = ahrs->settings.gain;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	685a      	ldr	r2, [r3, #4]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	639a      	str	r2, [r3, #56]	; 0x38
    }
    ahrs->rampedGainStep = (INITIAL_GAIN - ahrs->settings.gain) / INITIALISATION_PERIOD;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	edd3 7a01 	vldr	s15, [r3, #4]
 80020de:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80020e2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80020e6:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 80020ea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
}
 80020f4:	bf00      	nop
 80020f6:	3708      	adds	r7, #8
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	3f7ae148 	.word	0x3f7ae148
 8002100:	7f7fffff 	.word	0x7f7fffff
 8002104:	7f7fffff 	.word	0x7f7fffff

08002108 <FusionAhrsUpdate>:
 * @param gyroscope Gyroscope measurement in degrees per second.
 * @param accelerometer Accelerometer measurement in g.
 * @param magnetometer Magnetometer measurement in arbitrary units.
 * @param deltaTime Delta time in seconds.
 */
void FusionAhrsUpdate(FusionAhrs *const ahrs, const FusionVector gyroscope, const FusionVector accelerometer, const FusionVector magnetometer, const float deltaTime) {
 8002108:	b590      	push	{r4, r7, lr}
 800210a:	b0bf      	sub	sp, #252	; 0xfc
 800210c:	af00      	add	r7, sp, #0
 800210e:	62f8      	str	r0, [r7, #44]	; 0x2c
 8002110:	eeb0 5a61 	vmov.f32	s10, s3
 8002114:	eef0 5a42 	vmov.f32	s11, s4
 8002118:	eeb0 6a62 	vmov.f32	s12, s5
 800211c:	eef0 6a43 	vmov.f32	s13, s6
 8002120:	eeb0 7a63 	vmov.f32	s14, s7
 8002124:	eef0 7a44 	vmov.f32	s15, s8
 8002128:	edc7 4a01 	vstr	s9, [r7, #4]
 800212c:	ed87 0a08 	vstr	s0, [r7, #32]
 8002130:	edc7 0a09 	vstr	s1, [r7, #36]	; 0x24
 8002134:	ed87 1a0a 	vstr	s2, [r7, #40]	; 0x28
 8002138:	ed87 5a05 	vstr	s10, [r7, #20]
 800213c:	edc7 5a06 	vstr	s11, [r7, #24]
 8002140:	ed87 6a07 	vstr	s12, [r7, #28]
 8002144:	edc7 6a02 	vstr	s13, [r7, #8]
 8002148:	ed87 7a03 	vstr	s14, [r7, #12]
 800214c:	edc7 7a04 	vstr	s15, [r7, #16]
#define Q ahrs->quaternion.element

    // Store accelerometer
    ahrs->accelerometer = accelerometer;
 8002150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002152:	3328      	adds	r3, #40	; 0x28
 8002154:	f107 0214 	add.w	r2, r7, #20
 8002158:	ca07      	ldmia	r2, {r0, r1, r2}
 800215a:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    // Reinitialise if gyroscope range exceeded
    if ((fabs(gyroscope.axis.x) > ahrs->settings.gyroscopeRange) || (fabs(gyroscope.axis.y) > ahrs->settings.gyroscopeRange) || (fabs(gyroscope.axis.z) > ahrs->settings.gyroscopeRange)) {
 800215e:	edd7 7a08 	vldr	s15, [r7, #32]
 8002162:	eeb0 7ae7 	vabs.f32	s14, s15
 8002166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002168:	edd3 7a02 	vldr	s15, [r3, #8]
 800216c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002170:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002174:	dc17      	bgt.n	80021a6 <FusionAhrsUpdate+0x9e>
 8002176:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800217a:	eeb0 7ae7 	vabs.f32	s14, s15
 800217e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002180:	edd3 7a02 	vldr	s15, [r3, #8]
 8002184:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002188:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800218c:	dc0b      	bgt.n	80021a6 <FusionAhrsUpdate+0x9e>
 800218e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002192:	eeb0 7ae7 	vabs.f32	s14, s15
 8002196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002198:	edd3 7a02 	vldr	s15, [r3, #8]
 800219c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80021a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021a4:	dd15      	ble.n	80021d2 <FusionAhrsUpdate+0xca>
        const FusionQuaternion quaternion = ahrs->quaternion;
 80021a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021a8:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80021ac:	3318      	adds	r3, #24
 80021ae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80021b0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        FusionAhrsReset(ahrs);
 80021b4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80021b6:	f7ff fe8b 	bl	8001ed0 <FusionAhrsReset>
        ahrs->quaternion = quaternion;
 80021ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021bc:	f103 0418 	add.w	r4, r3, #24
 80021c0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80021c4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80021c6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        ahrs->angularRateRecovery = true;
 80021ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021cc:	2201      	movs	r2, #1
 80021ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    }

    // Ramp down gain during initialisation
    if (ahrs->initialising == true) {
 80021d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021d4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d02d      	beq.n	8002238 <FusionAhrsUpdate+0x130>
        ahrs->rampedGain -= ahrs->rampedGainStep * deltaTime;
 80021dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021de:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 80021e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021e4:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 80021e8:	edd7 7a01 	vldr	s15, [r7, #4]
 80021ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021f6:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
        if ((ahrs->rampedGain < ahrs->settings.gain) || (ahrs->settings.gain == 0.0f)) {
 80021fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021fc:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8002200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002202:	edd3 7a01 	vldr	s15, [r3, #4]
 8002206:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800220a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800220e:	d407      	bmi.n	8002220 <FusionAhrsUpdate+0x118>
 8002210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002212:	edd3 7a01 	vldr	s15, [r3, #4]
 8002216:	eef5 7a40 	vcmp.f32	s15, #0.0
 800221a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800221e:	d10b      	bne.n	8002238 <FusionAhrsUpdate+0x130>
            ahrs->rampedGain = ahrs->settings.gain;
 8002220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002222:	685a      	ldr	r2, [r3, #4]
 8002224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002226:	639a      	str	r2, [r3, #56]	; 0x38
            ahrs->initialising = false;
 8002228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800222a:	2200      	movs	r2, #0
 800222c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
            ahrs->angularRateRecovery = false;
 8002230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002232:	2200      	movs	r2, #0
 8002234:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        }
    }

    // Calculate direction of gravity indicated by algorithm
    const FusionVector halfGravity = HalfGravity(ahrs);
 8002238:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800223a:	f000 faf4 	bl	8002826 <HalfGravity>
 800223e:	eef0 6a40 	vmov.f32	s13, s0
 8002242:	eeb0 7a60 	vmov.f32	s14, s1
 8002246:	eef0 7a41 	vmov.f32	s15, s2
 800224a:	edc7 6a25 	vstr	s13, [r7, #148]	; 0x94
 800224e:	ed87 7a26 	vstr	s14, [r7, #152]	; 0x98
 8002252:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c

    // Calculate accelerometer feedback
    FusionVector halfAccelerometerFeedback = FUSION_VECTOR_ZERO;
 8002256:	f04f 0300 	mov.w	r3, #0
 800225a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800225e:	f04f 0300 	mov.w	r3, #0
 8002262:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002266:	f04f 0300 	mov.w	r3, #0
 800226a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    ahrs->accelerometerIgnored = true;
 800226e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002270:	2201      	movs	r2, #1
 8002272:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
    if (FusionVectorIsZero(accelerometer) == false) {
 8002276:	edd7 6a05 	vldr	s13, [r7, #20]
 800227a:	ed97 7a06 	vldr	s14, [r7, #24]
 800227e:	edd7 7a07 	vldr	s15, [r7, #28]
 8002282:	eeb0 0a66 	vmov.f32	s0, s13
 8002286:	eef0 0a47 	vmov.f32	s1, s14
 800228a:	eeb0 1a67 	vmov.f32	s2, s15
 800228e:	f7ff f93f 	bl	8001510 <FusionVectorIsZero>
 8002292:	4603      	mov	r3, r0
 8002294:	f083 0301 	eor.w	r3, r3, #1
 8002298:	b2db      	uxtb	r3, r3
 800229a:	2b00      	cmp	r3, #0
 800229c:	f000 809c 	beq.w	80023d8 <FusionAhrsUpdate+0x2d0>

        // Calculate accelerometer feedback scaled by 0.5
        ahrs->halfAccelerometerFeedback = Feedback(FusionVectorNormalise(accelerometer), halfGravity);
 80022a0:	edd7 6a05 	vldr	s13, [r7, #20]
 80022a4:	ed97 7a06 	vldr	s14, [r7, #24]
 80022a8:	edd7 7a07 	vldr	s15, [r7, #28]
 80022ac:	eeb0 0a66 	vmov.f32	s0, s13
 80022b0:	eef0 0a47 	vmov.f32	s1, s14
 80022b4:	eeb0 1a67 	vmov.f32	s2, s15
 80022b8:	f7ff fb60 	bl	800197c <FusionVectorNormalise>
 80022bc:	eef0 6a40 	vmov.f32	s13, s0
 80022c0:	eeb0 7a60 	vmov.f32	s14, s1
 80022c4:	eef0 7a41 	vmov.f32	s15, s2
 80022c8:	edc7 6a28 	vstr	s13, [r7, #160]	; 0xa0
 80022cc:	ed87 7a29 	vstr	s14, [r7, #164]	; 0xa4
 80022d0:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
 80022d4:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 80022d6:	ed97 5a25 	vldr	s10, [r7, #148]	; 0x94
 80022da:	edd7 5a26 	vldr	s11, [r7, #152]	; 0x98
 80022de:	ed97 6a27 	vldr	s12, [r7, #156]	; 0x9c
 80022e2:	edd7 6a28 	vldr	s13, [r7, #160]	; 0xa0
 80022e6:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 80022ea:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80022ee:	eef0 1a45 	vmov.f32	s3, s10
 80022f2:	eeb0 2a65 	vmov.f32	s4, s11
 80022f6:	eef0 2a46 	vmov.f32	s5, s12
 80022fa:	eeb0 0a66 	vmov.f32	s0, s13
 80022fe:	eef0 0a47 	vmov.f32	s1, s14
 8002302:	eeb0 1a67 	vmov.f32	s2, s15
 8002306:	f000 fc55 	bl	8002bb4 <Feedback>
 800230a:	eef0 6a40 	vmov.f32	s13, s0
 800230e:	eeb0 7a60 	vmov.f32	s14, s1
 8002312:	eef0 7a41 	vmov.f32	s15, s2
 8002316:	edc4 6a11 	vstr	s13, [r4, #68]	; 0x44
 800231a:	ed84 7a12 	vstr	s14, [r4, #72]	; 0x48
 800231e:	edc4 7a13 	vstr	s15, [r4, #76]	; 0x4c

        // Don't ignore accelerometer if acceleration error below threshold
        if ((ahrs->initialising == true) || ((FusionVectorMagnitudeSquared(ahrs->halfAccelerometerFeedback) <= ahrs->settings.accelerationRejection))) {
 8002322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002324:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002328:	2b00      	cmp	r3, #0
 800232a:	d118      	bne.n	800235e <FusionAhrsUpdate+0x256>
 800232c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800232e:	edd3 6a11 	vldr	s13, [r3, #68]	; 0x44
 8002332:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 8002336:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 800233a:	eeb0 0a66 	vmov.f32	s0, s13
 800233e:	eef0 0a47 	vmov.f32	s1, s14
 8002342:	eeb0 1a67 	vmov.f32	s2, s15
 8002346:	f7ff facf 	bl	80018e8 <FusionVectorMagnitudeSquared>
 800234a:	eeb0 7a40 	vmov.f32	s14, s0
 800234e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002350:	edd3 7a03 	vldr	s15, [r3, #12]
 8002354:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002358:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800235c:	d80a      	bhi.n	8002374 <FusionAhrsUpdate+0x26c>
            ahrs->accelerometerIgnored = false;
 800235e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002360:	2200      	movs	r2, #0
 8002362:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
            ahrs->accelerationRecoveryTrigger -= 9;
 8002366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002368:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800236a:	f1a3 0209 	sub.w	r2, r3, #9
 800236e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002370:	661a      	str	r2, [r3, #96]	; 0x60
 8002372:	e004      	b.n	800237e <FusionAhrsUpdate+0x276>
        } else {
            ahrs->accelerationRecoveryTrigger += 1;
 8002374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002376:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002378:	1c5a      	adds	r2, r3, #1
 800237a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800237c:	661a      	str	r2, [r3, #96]	; 0x60
        }

        // Don't ignore accelerometer during acceleration recovery
        if (ahrs->accelerationRecoveryTrigger > ahrs->accelerationRecoveryTimeout) {
 800237e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002380:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002384:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002386:	429a      	cmp	r2, r3
 8002388:	dd07      	ble.n	800239a <FusionAhrsUpdate+0x292>
            ahrs->accelerationRecoveryTimeout = 0;
 800238a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800238c:	2200      	movs	r2, #0
 800238e:	665a      	str	r2, [r3, #100]	; 0x64
            ahrs->accelerometerIgnored = false;
 8002390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002392:	2200      	movs	r2, #0
 8002394:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 8002398:	e004      	b.n	80023a4 <FusionAhrsUpdate+0x29c>
        } else {
            ahrs->accelerationRecoveryTimeout = ahrs->settings.recoveryTriggerPeriod;
 800239a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800239c:	695b      	ldr	r3, [r3, #20]
 800239e:	461a      	mov	r2, r3
 80023a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023a2:	665a      	str	r2, [r3, #100]	; 0x64
        }
        ahrs->accelerationRecoveryTrigger = Clamp(ahrs->accelerationRecoveryTrigger, 0, ahrs->settings.recoveryTriggerPeriod);
 80023a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023a6:	6e18      	ldr	r0, [r3, #96]	; 0x60
 80023a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023aa:	695b      	ldr	r3, [r3, #20]
 80023ac:	461a      	mov	r2, r3
 80023ae:	2100      	movs	r1, #0
 80023b0:	f000 fcb5 	bl	8002d1e <Clamp>
 80023b4:	4602      	mov	r2, r0
 80023b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023b8:	661a      	str	r2, [r3, #96]	; 0x60

        // Apply accelerometer feedback
        if (ahrs->accelerometerIgnored == false) {
 80023ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023bc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80023c0:	f083 0301 	eor.w	r3, r3, #1
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d006      	beq.n	80023d8 <FusionAhrsUpdate+0x2d0>
            halfAccelerometerFeedback = ahrs->halfAccelerometerFeedback;
 80023ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023cc:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80023d0:	3244      	adds	r2, #68	; 0x44
 80023d2:	ca07      	ldmia	r2, {r0, r1, r2}
 80023d4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        }
    }

    // Calculate magnetometer feedback
    FusionVector halfMagnetometerFeedback = FUSION_VECTOR_ZERO;
 80023d8:	f04f 0300 	mov.w	r3, #0
 80023dc:	673b      	str	r3, [r7, #112]	; 0x70
 80023de:	f04f 0300 	mov.w	r3, #0
 80023e2:	677b      	str	r3, [r7, #116]	; 0x74
 80023e4:	f04f 0300 	mov.w	r3, #0
 80023e8:	67bb      	str	r3, [r7, #120]	; 0x78
    ahrs->magnetometerIgnored = true;
 80023ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023ec:	2201      	movs	r2, #1
 80023ee:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    if (FusionVectorIsZero(magnetometer) == false) {
 80023f2:	edd7 6a02 	vldr	s13, [r7, #8]
 80023f6:	ed97 7a03 	vldr	s14, [r7, #12]
 80023fa:	edd7 7a04 	vldr	s15, [r7, #16]
 80023fe:	eeb0 0a66 	vmov.f32	s0, s13
 8002402:	eef0 0a47 	vmov.f32	s1, s14
 8002406:	eeb0 1a67 	vmov.f32	s2, s15
 800240a:	f7ff f881 	bl	8001510 <FusionVectorIsZero>
 800240e:	4603      	mov	r3, r0
 8002410:	f083 0301 	eor.w	r3, r3, #1
 8002414:	b2db      	uxtb	r3, r3
 8002416:	2b00      	cmp	r3, #0
 8002418:	f000 80d1 	beq.w	80025be <FusionAhrsUpdate+0x4b6>

        // Calculate direction of magnetic field indicated by algorithm
        const FusionVector halfMagnetic = HalfMagnetic(ahrs);
 800241c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800241e:	f000 fabf 	bl	80029a0 <HalfMagnetic>
 8002422:	eef0 6a40 	vmov.f32	s13, s0
 8002426:	eeb0 7a60 	vmov.f32	s14, s1
 800242a:	eef0 7a41 	vmov.f32	s15, s2
 800242e:	edc7 6a0c 	vstr	s13, [r7, #48]	; 0x30
 8002432:	ed87 7a0d 	vstr	s14, [r7, #52]	; 0x34
 8002436:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38

        // Calculate magnetometer feedback scaled by 0.5
        ahrs->halfMagnetometerFeedback = Feedback(FusionVectorNormalise(FusionVectorCrossProduct(halfGravity, magnetometer)), halfMagnetic);
 800243a:	ed97 5a02 	vldr	s10, [r7, #8]
 800243e:	edd7 5a03 	vldr	s11, [r7, #12]
 8002442:	ed97 6a04 	vldr	s12, [r7, #16]
 8002446:	edd7 6a25 	vldr	s13, [r7, #148]	; 0x94
 800244a:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800244e:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8002452:	eef0 1a45 	vmov.f32	s3, s10
 8002456:	eeb0 2a65 	vmov.f32	s4, s11
 800245a:	eef0 2a46 	vmov.f32	s5, s12
 800245e:	eeb0 0a66 	vmov.f32	s0, s13
 8002462:	eef0 0a47 	vmov.f32	s1, s14
 8002466:	eeb0 1a67 	vmov.f32	s2, s15
 800246a:	f7ff f981 	bl	8001770 <FusionVectorCrossProduct>
 800246e:	eef0 6a40 	vmov.f32	s13, s0
 8002472:	eeb0 7a60 	vmov.f32	s14, s1
 8002476:	eef0 7a41 	vmov.f32	s15, s2
 800247a:	edc7 6a2b 	vstr	s13, [r7, #172]	; 0xac
 800247e:	ed87 7a2c 	vstr	s14, [r7, #176]	; 0xb0
 8002482:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
 8002486:	edd7 6a2b 	vldr	s13, [r7, #172]	; 0xac
 800248a:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 800248e:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8002492:	eeb0 0a66 	vmov.f32	s0, s13
 8002496:	eef0 0a47 	vmov.f32	s1, s14
 800249a:	eeb0 1a67 	vmov.f32	s2, s15
 800249e:	f7ff fa6d 	bl	800197c <FusionVectorNormalise>
 80024a2:	eef0 6a40 	vmov.f32	s13, s0
 80024a6:	eeb0 7a60 	vmov.f32	s14, s1
 80024aa:	eef0 7a41 	vmov.f32	s15, s2
 80024ae:	edc7 6a2e 	vstr	s13, [r7, #184]	; 0xb8
 80024b2:	ed87 7a2f 	vstr	s14, [r7, #188]	; 0xbc
 80024b6:	edc7 7a30 	vstr	s15, [r7, #192]	; 0xc0
 80024ba:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 80024bc:	ed97 5a0c 	vldr	s10, [r7, #48]	; 0x30
 80024c0:	edd7 5a0d 	vldr	s11, [r7, #52]	; 0x34
 80024c4:	ed97 6a0e 	vldr	s12, [r7, #56]	; 0x38
 80024c8:	edd7 6a2e 	vldr	s13, [r7, #184]	; 0xb8
 80024cc:	ed97 7a2f 	vldr	s14, [r7, #188]	; 0xbc
 80024d0:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 80024d4:	eef0 1a45 	vmov.f32	s3, s10
 80024d8:	eeb0 2a65 	vmov.f32	s4, s11
 80024dc:	eef0 2a46 	vmov.f32	s5, s12
 80024e0:	eeb0 0a66 	vmov.f32	s0, s13
 80024e4:	eef0 0a47 	vmov.f32	s1, s14
 80024e8:	eeb0 1a67 	vmov.f32	s2, s15
 80024ec:	f000 fb62 	bl	8002bb4 <Feedback>
 80024f0:	eef0 6a40 	vmov.f32	s13, s0
 80024f4:	eeb0 7a60 	vmov.f32	s14, s1
 80024f8:	eef0 7a41 	vmov.f32	s15, s2
 80024fc:	edc4 6a14 	vstr	s13, [r4, #80]	; 0x50
 8002500:	ed84 7a15 	vstr	s14, [r4, #84]	; 0x54
 8002504:	edc4 7a16 	vstr	s15, [r4, #88]	; 0x58

        // Don't ignore magnetometer if magnetic error below threshold
        if ((ahrs->initialising == true) || ((FusionVectorMagnitudeSquared(ahrs->halfMagnetometerFeedback) <= ahrs->settings.magneticRejection))) {
 8002508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800250a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800250e:	2b00      	cmp	r3, #0
 8002510:	d118      	bne.n	8002544 <FusionAhrsUpdate+0x43c>
 8002512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002514:	edd3 6a14 	vldr	s13, [r3, #80]	; 0x50
 8002518:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 800251c:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8002520:	eeb0 0a66 	vmov.f32	s0, s13
 8002524:	eef0 0a47 	vmov.f32	s1, s14
 8002528:	eeb0 1a67 	vmov.f32	s2, s15
 800252c:	f7ff f9dc 	bl	80018e8 <FusionVectorMagnitudeSquared>
 8002530:	eeb0 7a40 	vmov.f32	s14, s0
 8002534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002536:	edd3 7a04 	vldr	s15, [r3, #16]
 800253a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800253e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002542:	d80a      	bhi.n	800255a <FusionAhrsUpdate+0x452>
            ahrs->magnetometerIgnored = false;
 8002544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002546:	2200      	movs	r2, #0
 8002548:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
            ahrs->magneticRecoveryTrigger -= 9;
 800254c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800254e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002550:	f1a3 0209 	sub.w	r2, r3, #9
 8002554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002556:	66da      	str	r2, [r3, #108]	; 0x6c
 8002558:	e004      	b.n	8002564 <FusionAhrsUpdate+0x45c>
        } else {
            ahrs->magneticRecoveryTrigger += 1;
 800255a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800255c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800255e:	1c5a      	adds	r2, r3, #1
 8002560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002562:	66da      	str	r2, [r3, #108]	; 0x6c
        }

        // Don't ignore magnetometer during magnetic recovery
        if (ahrs->magneticRecoveryTrigger > ahrs->magneticRecoveryTimeout) {
 8002564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002566:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800256a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800256c:	429a      	cmp	r2, r3
 800256e:	dd07      	ble.n	8002580 <FusionAhrsUpdate+0x478>
            ahrs->magneticRecoveryTimeout = 0;
 8002570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002572:	2200      	movs	r2, #0
 8002574:	671a      	str	r2, [r3, #112]	; 0x70
            ahrs->magnetometerIgnored = false;
 8002576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002578:	2200      	movs	r2, #0
 800257a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 800257e:	e004      	b.n	800258a <FusionAhrsUpdate+0x482>
        } else {
            ahrs->magneticRecoveryTimeout = ahrs->settings.recoveryTriggerPeriod;
 8002580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002582:	695b      	ldr	r3, [r3, #20]
 8002584:	461a      	mov	r2, r3
 8002586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002588:	671a      	str	r2, [r3, #112]	; 0x70
        }
        ahrs->magneticRecoveryTrigger = Clamp(ahrs->magneticRecoveryTrigger, 0, ahrs->settings.recoveryTriggerPeriod);
 800258a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800258c:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800258e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002590:	695b      	ldr	r3, [r3, #20]
 8002592:	461a      	mov	r2, r3
 8002594:	2100      	movs	r1, #0
 8002596:	f000 fbc2 	bl	8002d1e <Clamp>
 800259a:	4602      	mov	r2, r0
 800259c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800259e:	66da      	str	r2, [r3, #108]	; 0x6c

        // Apply magnetometer feedback
        if (ahrs->magnetometerIgnored == false) {
 80025a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025a2:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 80025a6:	f083 0301 	eor.w	r3, r3, #1
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d006      	beq.n	80025be <FusionAhrsUpdate+0x4b6>
            halfMagnetometerFeedback = ahrs->halfMagnetometerFeedback;
 80025b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025b2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80025b6:	3250      	adds	r2, #80	; 0x50
 80025b8:	ca07      	ldmia	r2, {r0, r1, r2}
 80025ba:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        }
    }

    // Convert gyroscope to radians per second scaled by 0.5
    const FusionVector halfGyroscope = FusionVectorMultiplyScalar(gyroscope, FusionDegreesToRadians(0.5f));
 80025be:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 80025c2:	f7fe ff61 	bl	8001488 <FusionDegreesToRadians>
 80025c6:	eeb0 6a40 	vmov.f32	s12, s0
 80025ca:	edd7 6a08 	vldr	s13, [r7, #32]
 80025ce:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80025d2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80025d6:	eef0 1a46 	vmov.f32	s3, s12
 80025da:	eeb0 0a66 	vmov.f32	s0, s13
 80025de:	eef0 0a47 	vmov.f32	s1, s14
 80025e2:	eeb0 1a67 	vmov.f32	s2, s15
 80025e6:	f7ff f831 	bl	800164c <FusionVectorMultiplyScalar>
 80025ea:	eef0 6a40 	vmov.f32	s13, s0
 80025ee:	eeb0 7a60 	vmov.f32	s14, s1
 80025f2:	eef0 7a41 	vmov.f32	s15, s2
 80025f6:	edc7 6a16 	vstr	s13, [r7, #88]	; 0x58
 80025fa:	ed87 7a17 	vstr	s14, [r7, #92]	; 0x5c
 80025fe:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60

    // Apply feedback to gyroscope
    const FusionVector adjustedHalfGyroscope = FusionVectorAdd(halfGyroscope, FusionVectorMultiplyScalar(FusionVectorAdd(halfAccelerometerFeedback, halfMagnetometerFeedback), ahrs->rampedGain));
 8002602:	ed97 5a1c 	vldr	s10, [r7, #112]	; 0x70
 8002606:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 800260a:	ed97 6a1e 	vldr	s12, [r7, #120]	; 0x78
 800260e:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 8002612:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 8002616:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800261a:	eef0 1a45 	vmov.f32	s3, s10
 800261e:	eeb0 2a65 	vmov.f32	s4, s11
 8002622:	eef0 2a46 	vmov.f32	s5, s12
 8002626:	eeb0 0a66 	vmov.f32	s0, s13
 800262a:	eef0 0a47 	vmov.f32	s1, s14
 800262e:	eeb0 1a67 	vmov.f32	s2, s15
 8002632:	f7fe ff9d 	bl	8001570 <FusionVectorAdd>
 8002636:	eef0 6a40 	vmov.f32	s13, s0
 800263a:	eeb0 7a60 	vmov.f32	s14, s1
 800263e:	eef0 7a41 	vmov.f32	s15, s2
 8002642:	edc7 6a31 	vstr	s13, [r7, #196]	; 0xc4
 8002646:	ed87 7a32 	vstr	s14, [r7, #200]	; 0xc8
 800264a:	edc7 7a33 	vstr	s15, [r7, #204]	; 0xcc
 800264e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002650:	ed93 6a0e 	vldr	s12, [r3, #56]	; 0x38
 8002654:	edd7 6a31 	vldr	s13, [r7, #196]	; 0xc4
 8002658:	ed97 7a32 	vldr	s14, [r7, #200]	; 0xc8
 800265c:	edd7 7a33 	vldr	s15, [r7, #204]	; 0xcc
 8002660:	eef0 1a46 	vmov.f32	s3, s12
 8002664:	eeb0 0a66 	vmov.f32	s0, s13
 8002668:	eef0 0a47 	vmov.f32	s1, s14
 800266c:	eeb0 1a67 	vmov.f32	s2, s15
 8002670:	f7fe ffec 	bl	800164c <FusionVectorMultiplyScalar>
 8002674:	eef0 6a40 	vmov.f32	s13, s0
 8002678:	eeb0 7a60 	vmov.f32	s14, s1
 800267c:	eef0 7a41 	vmov.f32	s15, s2
 8002680:	edc7 6a34 	vstr	s13, [r7, #208]	; 0xd0
 8002684:	ed87 7a35 	vstr	s14, [r7, #212]	; 0xd4
 8002688:	edc7 7a36 	vstr	s15, [r7, #216]	; 0xd8
 800268c:	ed97 5a34 	vldr	s10, [r7, #208]	; 0xd0
 8002690:	edd7 5a35 	vldr	s11, [r7, #212]	; 0xd4
 8002694:	ed97 6a36 	vldr	s12, [r7, #216]	; 0xd8
 8002698:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 800269c:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80026a0:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80026a4:	eef0 1a45 	vmov.f32	s3, s10
 80026a8:	eeb0 2a65 	vmov.f32	s4, s11
 80026ac:	eef0 2a46 	vmov.f32	s5, s12
 80026b0:	eeb0 0a66 	vmov.f32	s0, s13
 80026b4:	eef0 0a47 	vmov.f32	s1, s14
 80026b8:	eeb0 1a67 	vmov.f32	s2, s15
 80026bc:	f7fe ff58 	bl	8001570 <FusionVectorAdd>
 80026c0:	eef0 6a40 	vmov.f32	s13, s0
 80026c4:	eeb0 7a60 	vmov.f32	s14, s1
 80026c8:	eef0 7a41 	vmov.f32	s15, s2
 80026cc:	edc7 6a13 	vstr	s13, [r7, #76]	; 0x4c
 80026d0:	ed87 7a14 	vstr	s14, [r7, #80]	; 0x50
 80026d4:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    // Integrate rate of change of quaternion
    ahrs->quaternion = FusionQuaternionAdd(ahrs->quaternion, FusionQuaternionMultiplyVector(ahrs->quaternion, FusionVectorMultiplyScalar(adjustedHalfGyroscope, deltaTime)));
 80026d8:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 80026dc:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80026e0:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80026e4:	edd7 1a01 	vldr	s3, [r7, #4]
 80026e8:	eeb0 0a66 	vmov.f32	s0, s13
 80026ec:	eef0 0a47 	vmov.f32	s1, s14
 80026f0:	eeb0 1a67 	vmov.f32	s2, s15
 80026f4:	f7fe ffaa 	bl	800164c <FusionVectorMultiplyScalar>
 80026f8:	eef0 6a40 	vmov.f32	s13, s0
 80026fc:	eeb0 7a60 	vmov.f32	s14, s1
 8002700:	eef0 7a41 	vmov.f32	s15, s2
 8002704:	edc7 6a37 	vstr	s13, [r7, #220]	; 0xdc
 8002708:	ed87 7a38 	vstr	s14, [r7, #224]	; 0xe0
 800270c:	edc7 7a39 	vstr	s15, [r7, #228]	; 0xe4
 8002710:	edd7 4a37 	vldr	s9, [r7, #220]	; 0xdc
 8002714:	ed97 5a38 	vldr	s10, [r7, #224]	; 0xe0
 8002718:	edd7 5a39 	vldr	s11, [r7, #228]	; 0xe4
 800271c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800271e:	ed93 6a06 	vldr	s12, [r3, #24]
 8002722:	edd3 6a07 	vldr	s13, [r3, #28]
 8002726:	ed93 7a08 	vldr	s14, [r3, #32]
 800272a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800272e:	eeb0 2a64 	vmov.f32	s4, s9
 8002732:	eef0 2a45 	vmov.f32	s5, s10
 8002736:	eeb0 3a65 	vmov.f32	s6, s11
 800273a:	eeb0 0a46 	vmov.f32	s0, s12
 800273e:	eef0 0a66 	vmov.f32	s1, s13
 8002742:	eeb0 1a47 	vmov.f32	s2, s14
 8002746:	eef0 1a67 	vmov.f32	s3, s15
 800274a:	f7ff fa8e 	bl	8001c6a <FusionQuaternionMultiplyVector>
 800274e:	eeb0 6a40 	vmov.f32	s12, s0
 8002752:	eef0 6a60 	vmov.f32	s13, s1
 8002756:	eeb0 7a41 	vmov.f32	s14, s2
 800275a:	eef0 7a61 	vmov.f32	s15, s3
 800275e:	ed87 6a3a 	vstr	s12, [r7, #232]	; 0xe8
 8002762:	edc7 6a3b 	vstr	s13, [r7, #236]	; 0xec
 8002766:	ed87 7a3c 	vstr	s14, [r7, #240]	; 0xf0
 800276a:	edc7 7a3d 	vstr	s15, [r7, #244]	; 0xf4
 800276e:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 8002770:	ed97 4a3a 	vldr	s8, [r7, #232]	; 0xe8
 8002774:	edd7 4a3b 	vldr	s9, [r7, #236]	; 0xec
 8002778:	ed97 5a3c 	vldr	s10, [r7, #240]	; 0xf0
 800277c:	edd7 5a3d 	vldr	s11, [r7, #244]	; 0xf4
 8002780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002782:	ed93 6a06 	vldr	s12, [r3, #24]
 8002786:	edd3 6a07 	vldr	s13, [r3, #28]
 800278a:	ed93 7a08 	vldr	s14, [r3, #32]
 800278e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002792:	eeb0 2a44 	vmov.f32	s4, s8
 8002796:	eef0 2a64 	vmov.f32	s5, s9
 800279a:	eeb0 3a45 	vmov.f32	s6, s10
 800279e:	eef0 3a65 	vmov.f32	s7, s11
 80027a2:	eeb0 0a46 	vmov.f32	s0, s12
 80027a6:	eef0 0a66 	vmov.f32	s1, s13
 80027aa:	eeb0 1a47 	vmov.f32	s2, s14
 80027ae:	eef0 1a67 	vmov.f32	s3, s15
 80027b2:	f7ff f936 	bl	8001a22 <FusionQuaternionAdd>
 80027b6:	eeb0 6a40 	vmov.f32	s12, s0
 80027ba:	eef0 6a60 	vmov.f32	s13, s1
 80027be:	eeb0 7a41 	vmov.f32	s14, s2
 80027c2:	eef0 7a61 	vmov.f32	s15, s3
 80027c6:	ed84 6a06 	vstr	s12, [r4, #24]
 80027ca:	edc4 6a07 	vstr	s13, [r4, #28]
 80027ce:	ed84 7a08 	vstr	s14, [r4, #32]
 80027d2:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24

    // Normalise quaternion
    ahrs->quaternion = FusionQuaternionNormalise(ahrs->quaternion);
 80027d6:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 80027d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027da:	ed93 6a06 	vldr	s12, [r3, #24]
 80027de:	edd3 6a07 	vldr	s13, [r3, #28]
 80027e2:	ed93 7a08 	vldr	s14, [r3, #32]
 80027e6:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80027ea:	eeb0 0a46 	vmov.f32	s0, s12
 80027ee:	eef0 0a66 	vmov.f32	s1, s13
 80027f2:	eeb0 1a47 	vmov.f32	s2, s14
 80027f6:	eef0 1a67 	vmov.f32	s3, s15
 80027fa:	f7ff fad6 	bl	8001daa <FusionQuaternionNormalise>
 80027fe:	eeb0 6a40 	vmov.f32	s12, s0
 8002802:	eef0 6a60 	vmov.f32	s13, s1
 8002806:	eeb0 7a41 	vmov.f32	s14, s2
 800280a:	eef0 7a61 	vmov.f32	s15, s3
 800280e:	ed84 6a06 	vstr	s12, [r4, #24]
 8002812:	edc4 6a07 	vstr	s13, [r4, #28]
 8002816:	ed84 7a08 	vstr	s14, [r4, #32]
 800281a:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
#undef Q
}
 800281e:	bf00      	nop
 8002820:	37fc      	adds	r7, #252	; 0xfc
 8002822:	46bd      	mov	sp, r7
 8002824:	bd90      	pop	{r4, r7, pc}

08002826 <HalfGravity>:
/**
 * @brief Returns the direction of gravity scaled by 0.5.
 * @param ahrs AHRS algorithm structure.
 * @return Direction of gravity scaled by 0.5.
 */
static inline FusionVector HalfGravity(const FusionAhrs *const ahrs) {
 8002826:	b480      	push	{r7}
 8002828:	b093      	sub	sp, #76	; 0x4c
 800282a:	af00      	add	r7, sp, #0
 800282c:	6178      	str	r0, [r7, #20]
#define Q ahrs->quaternion.element
    switch (ahrs->settings.convention) {
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	781b      	ldrb	r3, [r3, #0]
 8002832:	2b01      	cmp	r3, #1
 8002834:	dc02      	bgt.n	800283c <HalfGravity+0x16>
 8002836:	2b00      	cmp	r3, #0
 8002838:	da03      	bge.n	8002842 <HalfGravity+0x1c>
 800283a:	e094      	b.n	8002966 <HalfGravity+0x140>
 800283c:	2b02      	cmp	r3, #2
 800283e:	d048      	beq.n	80028d2 <HalfGravity+0xac>
 8002840:	e091      	b.n	8002966 <HalfGravity+0x140>
        case FusionConventionNwu:
        case FusionConventionEnu: {
            const FusionVector halfGravity = {.axis = {
                    .x = Q.x * Q.z - Q.w * Q.y,
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	ed93 7a07 	vldr	s14, [r3, #28]
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800284e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	edd3 6a06 	vldr	s13, [r3, #24]
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	edd3 7a08 	vldr	s15, [r3, #32]
 800285e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002862:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfGravity = {.axis = {
 8002866:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                    .y = Q.y * Q.z + Q.w * Q.x,
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	ed93 7a08 	vldr	s14, [r3, #32]
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002876:	ee27 7a27 	vmul.f32	s14, s14, s15
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	edd3 6a06 	vldr	s13, [r3, #24]
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	edd3 7a07 	vldr	s15, [r3, #28]
 8002886:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800288a:	ee77 7a27 	vadd.f32	s15, s14, s15
            const FusionVector halfGravity = {.axis = {
 800288e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
                    .z = Q.w * Q.w - 0.5f + Q.z * Q.z,
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	ed93 7a06 	vldr	s14, [r3, #24]
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	edd3 7a06 	vldr	s15, [r3, #24]
 800289e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028a2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80028a6:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80028b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80028ba:	ee77 7a27 	vadd.f32	s15, s14, s15
            const FusionVector halfGravity = {.axis = {
 80028be:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            }}; // third column of transposed rotation matrix scaled by 0.5
            return halfGravity;
 80028c2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80028c6:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80028ca:	ca07      	ldmia	r2, {r0, r1, r2}
 80028cc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80028d0:	e052      	b.n	8002978 <HalfGravity+0x152>
        }
        case FusionConventionNed: {
            const FusionVector halfGravity = {.axis = {
                    .x = Q.w * Q.y - Q.x * Q.z,
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	ed93 7a06 	vldr	s14, [r3, #24]
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	edd3 7a08 	vldr	s15, [r3, #32]
 80028de:	ee27 7a27 	vmul.f32	s14, s14, s15
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	edd3 6a07 	vldr	s13, [r3, #28]
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80028ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80028f2:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfGravity = {.axis = {
 80028f6:	edc7 7a06 	vstr	s15, [r7, #24]
                    .y = -1.0f * (Q.y * Q.z + Q.w * Q.x),
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	ed93 7a08 	vldr	s14, [r3, #32]
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002906:	ee27 7a27 	vmul.f32	s14, s14, s15
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	edd3 6a06 	vldr	s13, [r3, #24]
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	edd3 7a07 	vldr	s15, [r3, #28]
 8002916:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800291a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800291e:	eef1 7a67 	vneg.f32	s15, s15
            const FusionVector halfGravity = {.axis = {
 8002922:	edc7 7a07 	vstr	s15, [r7, #28]
                    .z = 0.5f - Q.w * Q.w - Q.z * Q.z,
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	ed93 7a06 	vldr	s14, [r3, #24]
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	edd3 7a06 	vldr	s15, [r3, #24]
 8002932:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002936:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800293a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800294a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800294e:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfGravity = {.axis = {
 8002952:	edc7 7a08 	vstr	s15, [r7, #32]
            }}; // third column of transposed rotation matrix scaled by -0.5
            return halfGravity;
 8002956:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800295a:	f107 0218 	add.w	r2, r7, #24
 800295e:	ca07      	ldmia	r2, {r0, r1, r2}
 8002960:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002964:	e008      	b.n	8002978 <HalfGravity+0x152>
        }
    }
    return FUSION_VECTOR_ZERO; // avoid compiler warning
 8002966:	f04f 0300 	mov.w	r3, #0
 800296a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800296c:	f04f 0300 	mov.w	r3, #0
 8002970:	643b      	str	r3, [r7, #64]	; 0x40
 8002972:	f04f 0300 	mov.w	r3, #0
 8002976:	647b      	str	r3, [r7, #68]	; 0x44
#undef Q
}
 8002978:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800297a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800297c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800297e:	ee06 1a90 	vmov	s13, r1
 8002982:	ee07 2a10 	vmov	s14, r2
 8002986:	ee07 3a90 	vmov	s15, r3
 800298a:	eeb0 0a66 	vmov.f32	s0, s13
 800298e:	eef0 0a47 	vmov.f32	s1, s14
 8002992:	eeb0 1a67 	vmov.f32	s2, s15
 8002996:	374c      	adds	r7, #76	; 0x4c
 8002998:	46bd      	mov	sp, r7
 800299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299e:	4770      	bx	lr

080029a0 <HalfMagnetic>:
/**
 * @brief Returns the direction of the magnetic field scaled by 0.5.
 * @param ahrs AHRS algorithm structure.
 * @return Direction of the magnetic field scaled by 0.5.
 */
static inline FusionVector HalfMagnetic(const FusionAhrs *const ahrs) {
 80029a0:	b480      	push	{r7}
 80029a2:	b097      	sub	sp, #92	; 0x5c
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6178      	str	r0, [r7, #20]
#define Q ahrs->quaternion.element
    switch (ahrs->settings.convention) {
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	781b      	ldrb	r3, [r3, #0]
 80029ac:	2b02      	cmp	r3, #2
 80029ae:	f000 809a 	beq.w	8002ae6 <HalfMagnetic+0x146>
 80029b2:	2b02      	cmp	r3, #2
 80029b4:	f300 80e1 	bgt.w	8002b7a <HalfMagnetic+0x1da>
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d002      	beq.n	80029c2 <HalfMagnetic+0x22>
 80029bc:	2b01      	cmp	r3, #1
 80029be:	d048      	beq.n	8002a52 <HalfMagnetic+0xb2>
 80029c0:	e0db      	b.n	8002b7a <HalfMagnetic+0x1da>
        case FusionConventionNwu: {
            const FusionVector halfMagnetic = {.axis = {
                    .x = Q.x * Q.y + Q.w * Q.z,
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	ed93 7a07 	vldr	s14, [r3, #28]
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	edd3 7a08 	vldr	s15, [r3, #32]
 80029ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	edd3 6a06 	vldr	s13, [r3, #24]
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80029de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029e2:	ee77 7a27 	vadd.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 80029e6:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
                    .y = Q.w * Q.w - 0.5f + Q.y * Q.y,
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	ed93 7a06 	vldr	s14, [r3, #24]
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	edd3 7a06 	vldr	s15, [r3, #24]
 80029f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029fa:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80029fe:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	edd3 6a08 	vldr	s13, [r3, #32]
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	edd3 7a08 	vldr	s15, [r3, #32]
 8002a0e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a12:	ee77 7a27 	vadd.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 8002a16:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
                    .z = Q.y * Q.z - Q.w * Q.x,
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	ed93 7a08 	vldr	s14, [r3, #32]
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002a26:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	edd3 6a06 	vldr	s13, [r3, #24]
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	edd3 7a07 	vldr	s15, [r3, #28]
 8002a36:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a3a:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 8002a3e:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
            }}; // second column of transposed rotation matrix scaled by 0.5
            return halfMagnetic;
 8002a42:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002a46:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002a4a:	ca07      	ldmia	r2, {r0, r1, r2}
 8002a4c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002a50:	e09c      	b.n	8002b8c <HalfMagnetic+0x1ec>
        }
        case FusionConventionEnu: {
            const FusionVector halfMagnetic = {.axis = {
                    .x = 0.5f - Q.w * Q.w - Q.x * Q.x,
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	ed93 7a06 	vldr	s14, [r3, #24]
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	edd3 7a06 	vldr	s15, [r3, #24]
 8002a5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a62:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002a66:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	edd3 6a07 	vldr	s13, [r3, #28]
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	edd3 7a07 	vldr	s15, [r3, #28]
 8002a76:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a7a:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 8002a7e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
                    .y = Q.w * Q.z - Q.x * Q.y,
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	ed93 7a06 	vldr	s14, [r3, #24]
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002a8e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	edd3 6a07 	vldr	s13, [r3, #28]
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	edd3 7a08 	vldr	s15, [r3, #32]
 8002a9e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002aa2:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 8002aa6:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
                    .z = -1.0f * (Q.x * Q.z + Q.w * Q.y),
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	ed93 7a07 	vldr	s14, [r3, #28]
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002ab6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	edd3 6a06 	vldr	s13, [r3, #24]
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	edd3 7a08 	vldr	s15, [r3, #32]
 8002ac6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002aca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ace:	eef1 7a67 	vneg.f32	s15, s15
            const FusionVector halfMagnetic = {.axis = {
 8002ad2:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
            }}; // first column of transposed rotation matrix scaled by -0.5
            return halfMagnetic;
 8002ad6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002ada:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002ade:	ca07      	ldmia	r2, {r0, r1, r2}
 8002ae0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002ae4:	e052      	b.n	8002b8c <HalfMagnetic+0x1ec>
        }
        case FusionConventionNed: {
            const FusionVector halfMagnetic = {.axis = {
                    .x = -1.0f * (Q.x * Q.y + Q.w * Q.z),
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	ed93 7a07 	vldr	s14, [r3, #28]
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	edd3 7a08 	vldr	s15, [r3, #32]
 8002af2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	edd3 6a06 	vldr	s13, [r3, #24]
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002b02:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b0a:	eef1 7a67 	vneg.f32	s15, s15
            const FusionVector halfMagnetic = {.axis = {
 8002b0e:	edc7 7a07 	vstr	s15, [r7, #28]
                    .y = 0.5f - Q.w * Q.w - Q.y * Q.y,
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	ed93 7a06 	vldr	s14, [r3, #24]
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	edd3 7a06 	vldr	s15, [r3, #24]
 8002b1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b22:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002b26:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	edd3 6a08 	vldr	s13, [r3, #32]
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	edd3 7a08 	vldr	s15, [r3, #32]
 8002b36:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b3a:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 8002b3e:	edc7 7a08 	vstr	s15, [r7, #32]
                    .z = Q.w * Q.x - Q.y * Q.z,
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	ed93 7a06 	vldr	s14, [r3, #24]
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	edd3 7a07 	vldr	s15, [r3, #28]
 8002b4e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	edd3 6a08 	vldr	s13, [r3, #32]
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002b5e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b62:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 8002b66:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            }}; // second column of transposed rotation matrix scaled by -0.5
            return halfMagnetic;
 8002b6a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002b6e:	f107 021c 	add.w	r2, r7, #28
 8002b72:	ca07      	ldmia	r2, {r0, r1, r2}
 8002b74:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002b78:	e008      	b.n	8002b8c <HalfMagnetic+0x1ec>
        }
    }
    return FUSION_VECTOR_ZERO; // avoid compiler warning
 8002b7a:	f04f 0300 	mov.w	r3, #0
 8002b7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b80:	f04f 0300 	mov.w	r3, #0
 8002b84:	653b      	str	r3, [r7, #80]	; 0x50
 8002b86:	f04f 0300 	mov.w	r3, #0
 8002b8a:	657b      	str	r3, [r7, #84]	; 0x54
#undef Q
}
 8002b8c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002b8e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002b90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b92:	ee06 1a90 	vmov	s13, r1
 8002b96:	ee07 2a10 	vmov	s14, r2
 8002b9a:	ee07 3a90 	vmov	s15, r3
 8002b9e:	eeb0 0a66 	vmov.f32	s0, s13
 8002ba2:	eef0 0a47 	vmov.f32	s1, s14
 8002ba6:	eeb0 1a67 	vmov.f32	s2, s15
 8002baa:	375c      	adds	r7, #92	; 0x5c
 8002bac:	46bd      	mov	sp, r7
 8002bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb2:	4770      	bx	lr

08002bb4 <Feedback>:
 * @brief Returns the feedback.
 * @param sensor Sensor.
 * @param reference Reference.
 * @return Feedback.
 */
static inline FusionVector Feedback(const FusionVector sensor, const FusionVector reference) {
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b090      	sub	sp, #64	; 0x40
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	eeb0 5a40 	vmov.f32	s10, s0
 8002bbe:	eef0 5a60 	vmov.f32	s11, s1
 8002bc2:	eeb0 6a41 	vmov.f32	s12, s2
 8002bc6:	eef0 6a61 	vmov.f32	s13, s3
 8002bca:	eeb0 7a42 	vmov.f32	s14, s4
 8002bce:	eef0 7a62 	vmov.f32	s15, s5
 8002bd2:	ed87 5a07 	vstr	s10, [r7, #28]
 8002bd6:	edc7 5a08 	vstr	s11, [r7, #32]
 8002bda:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 8002bde:	edc7 6a04 	vstr	s13, [r7, #16]
 8002be2:	ed87 7a05 	vstr	s14, [r7, #20]
 8002be6:	edc7 7a06 	vstr	s15, [r7, #24]
    if (FusionVectorDotProduct(sensor, reference) < 0.0f) { // if error is >90 degrees
 8002bea:	ed97 5a04 	vldr	s10, [r7, #16]
 8002bee:	edd7 5a05 	vldr	s11, [r7, #20]
 8002bf2:	ed97 6a06 	vldr	s12, [r7, #24]
 8002bf6:	edd7 6a07 	vldr	s13, [r7, #28]
 8002bfa:	ed97 7a08 	vldr	s14, [r7, #32]
 8002bfe:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002c02:	eef0 1a45 	vmov.f32	s3, s10
 8002c06:	eeb0 2a65 	vmov.f32	s4, s11
 8002c0a:	eef0 2a46 	vmov.f32	s5, s12
 8002c0e:	eeb0 0a66 	vmov.f32	s0, s13
 8002c12:	eef0 0a47 	vmov.f32	s1, s14
 8002c16:	eeb0 1a67 	vmov.f32	s2, s15
 8002c1a:	f7fe fe0f 	bl	800183c <FusionVectorDotProduct>
 8002c1e:	eef0 7a40 	vmov.f32	s15, s0
 8002c22:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002c26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c2a:	d540      	bpl.n	8002cae <Feedback+0xfa>
        return FusionVectorNormalise(FusionVectorCrossProduct(sensor, reference));
 8002c2c:	ed97 5a04 	vldr	s10, [r7, #16]
 8002c30:	edd7 5a05 	vldr	s11, [r7, #20]
 8002c34:	ed97 6a06 	vldr	s12, [r7, #24]
 8002c38:	edd7 6a07 	vldr	s13, [r7, #28]
 8002c3c:	ed97 7a08 	vldr	s14, [r7, #32]
 8002c40:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002c44:	eef0 1a45 	vmov.f32	s3, s10
 8002c48:	eeb0 2a65 	vmov.f32	s4, s11
 8002c4c:	eef0 2a46 	vmov.f32	s5, s12
 8002c50:	eeb0 0a66 	vmov.f32	s0, s13
 8002c54:	eef0 0a47 	vmov.f32	s1, s14
 8002c58:	eeb0 1a67 	vmov.f32	s2, s15
 8002c5c:	f7fe fd88 	bl	8001770 <FusionVectorCrossProduct>
 8002c60:	eef0 6a40 	vmov.f32	s13, s0
 8002c64:	eeb0 7a60 	vmov.f32	s14, s1
 8002c68:	eef0 7a41 	vmov.f32	s15, s2
 8002c6c:	edc7 6a0d 	vstr	s13, [r7, #52]	; 0x34
 8002c70:	ed87 7a0e 	vstr	s14, [r7, #56]	; 0x38
 8002c74:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
 8002c78:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8002c7c:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8002c80:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002c84:	eeb0 0a66 	vmov.f32	s0, s13
 8002c88:	eef0 0a47 	vmov.f32	s1, s14
 8002c8c:	eeb0 1a67 	vmov.f32	s2, s15
 8002c90:	f7fe fe74 	bl	800197c <FusionVectorNormalise>
 8002c94:	eef0 6a40 	vmov.f32	s13, s0
 8002c98:	eeb0 7a60 	vmov.f32	s14, s1
 8002c9c:	eef0 7a41 	vmov.f32	s15, s2
 8002ca0:	edc7 6a0a 	vstr	s13, [r7, #40]	; 0x28
 8002ca4:	ed87 7a0b 	vstr	s14, [r7, #44]	; 0x2c
 8002ca8:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 8002cac:	e025      	b.n	8002cfa <Feedback+0x146>
    }
    return FusionVectorCrossProduct(sensor, reference);
 8002cae:	ed97 5a04 	vldr	s10, [r7, #16]
 8002cb2:	edd7 5a05 	vldr	s11, [r7, #20]
 8002cb6:	ed97 6a06 	vldr	s12, [r7, #24]
 8002cba:	edd7 6a07 	vldr	s13, [r7, #28]
 8002cbe:	ed97 7a08 	vldr	s14, [r7, #32]
 8002cc2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002cc6:	eef0 1a45 	vmov.f32	s3, s10
 8002cca:	eeb0 2a65 	vmov.f32	s4, s11
 8002cce:	eef0 2a46 	vmov.f32	s5, s12
 8002cd2:	eeb0 0a66 	vmov.f32	s0, s13
 8002cd6:	eef0 0a47 	vmov.f32	s1, s14
 8002cda:	eeb0 1a67 	vmov.f32	s2, s15
 8002cde:	f7fe fd47 	bl	8001770 <FusionVectorCrossProduct>
 8002ce2:	eef0 6a40 	vmov.f32	s13, s0
 8002ce6:	eeb0 7a60 	vmov.f32	s14, s1
 8002cea:	eef0 7a41 	vmov.f32	s15, s2
 8002cee:	edc7 6a0a 	vstr	s13, [r7, #40]	; 0x28
 8002cf2:	ed87 7a0b 	vstr	s14, [r7, #44]	; 0x2c
 8002cf6:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
}
 8002cfa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002cfc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d00:	ee06 1a90 	vmov	s13, r1
 8002d04:	ee07 2a10 	vmov	s14, r2
 8002d08:	ee07 3a90 	vmov	s15, r3
 8002d0c:	eeb0 0a66 	vmov.f32	s0, s13
 8002d10:	eef0 0a47 	vmov.f32	s1, s14
 8002d14:	eeb0 1a67 	vmov.f32	s2, s15
 8002d18:	3740      	adds	r7, #64	; 0x40
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}

08002d1e <Clamp>:
 * @param value Value.
 * @param min Minimum value.
 * @param max Maximum value.
 * @return Value limited to maximum and minimum.
 */
static inline int Clamp(const int value, const int min, const int max) {
 8002d1e:	b480      	push	{r7}
 8002d20:	b085      	sub	sp, #20
 8002d22:	af00      	add	r7, sp, #0
 8002d24:	60f8      	str	r0, [r7, #12]
 8002d26:	60b9      	str	r1, [r7, #8]
 8002d28:	607a      	str	r2, [r7, #4]
    if (value < min) {
 8002d2a:	68fa      	ldr	r2, [r7, #12]
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	429a      	cmp	r2, r3
 8002d30:	da01      	bge.n	8002d36 <Clamp+0x18>
        return min;
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	e006      	b.n	8002d44 <Clamp+0x26>
    }
    if (value > max) {
 8002d36:	68fa      	ldr	r2, [r7, #12]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	dd01      	ble.n	8002d42 <Clamp+0x24>
        return max;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	e000      	b.n	8002d44 <Clamp+0x26>
    }
    return value;
 8002d42:	68fb      	ldr	r3, [r7, #12]
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	3714      	adds	r7, #20
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4e:	4770      	bx	lr

08002d50 <FusionAhrsUpdateNoMagnetometer>:
 * @param ahrs AHRS algorithm structure.
 * @param gyroscope Gyroscope measurement in degrees per second.
 * @param accelerometer Accelerometer measurement in g.
 * @param deltaTime Delta time in seconds.
 */
void FusionAhrsUpdateNoMagnetometer(FusionAhrs *const ahrs, const FusionVector gyroscope, const FusionVector accelerometer, const float deltaTime) {
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b08c      	sub	sp, #48	; 0x30
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	61f8      	str	r0, [r7, #28]
 8002d58:	eeb0 5a40 	vmov.f32	s10, s0
 8002d5c:	eef0 5a60 	vmov.f32	s11, s1
 8002d60:	eeb0 6a41 	vmov.f32	s12, s2
 8002d64:	eef0 6a61 	vmov.f32	s13, s3
 8002d68:	eeb0 7a42 	vmov.f32	s14, s4
 8002d6c:	eef0 7a62 	vmov.f32	s15, s5
 8002d70:	ed87 3a00 	vstr	s6, [r7]
 8002d74:	ed87 5a04 	vstr	s10, [r7, #16]
 8002d78:	edc7 5a05 	vstr	s11, [r7, #20]
 8002d7c:	ed87 6a06 	vstr	s12, [r7, #24]
 8002d80:	edc7 6a01 	vstr	s13, [r7, #4]
 8002d84:	ed87 7a02 	vstr	s14, [r7, #8]
 8002d88:	edc7 7a03 	vstr	s15, [r7, #12]

    // Update AHRS algorithm
    FusionAhrsUpdate(ahrs, gyroscope, accelerometer, FUSION_VECTOR_ZERO, deltaTime);
 8002d8c:	f04f 0300 	mov.w	r3, #0
 8002d90:	627b      	str	r3, [r7, #36]	; 0x24
 8002d92:	f04f 0300 	mov.w	r3, #0
 8002d96:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d98:	f04f 0300 	mov.w	r3, #0
 8002d9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d9e:	ed97 3a09 	vldr	s6, [r7, #36]	; 0x24
 8002da2:	edd7 3a0a 	vldr	s7, [r7, #40]	; 0x28
 8002da6:	ed97 4a0b 	vldr	s8, [r7, #44]	; 0x2c
 8002daa:	ed97 5a01 	vldr	s10, [r7, #4]
 8002dae:	edd7 5a02 	vldr	s11, [r7, #8]
 8002db2:	ed97 6a03 	vldr	s12, [r7, #12]
 8002db6:	edd7 6a04 	vldr	s13, [r7, #16]
 8002dba:	ed97 7a05 	vldr	s14, [r7, #20]
 8002dbe:	edd7 7a06 	vldr	s15, [r7, #24]
 8002dc2:	edd7 4a00 	vldr	s9, [r7]
 8002dc6:	eef0 1a45 	vmov.f32	s3, s10
 8002dca:	eeb0 2a65 	vmov.f32	s4, s11
 8002dce:	eef0 2a46 	vmov.f32	s5, s12
 8002dd2:	eeb0 0a66 	vmov.f32	s0, s13
 8002dd6:	eef0 0a47 	vmov.f32	s1, s14
 8002dda:	eeb0 1a67 	vmov.f32	s2, s15
 8002dde:	69f8      	ldr	r0, [r7, #28]
 8002de0:	f7ff f992 	bl	8002108 <FusionAhrsUpdate>

    // Zero heading during initialisation
    if (ahrs->initialising == true) {
 8002de4:	69fb      	ldr	r3, [r7, #28]
 8002de6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d004      	beq.n	8002df8 <FusionAhrsUpdateNoMagnetometer+0xa8>
        FusionAhrsSetHeading(ahrs, 0.0f);
 8002dee:	ed9f 0a04 	vldr	s0, [pc, #16]	; 8002e00 <FusionAhrsUpdateNoMagnetometer+0xb0>
 8002df2:	69f8      	ldr	r0, [r7, #28]
 8002df4:	f000 f829 	bl	8002e4a <FusionAhrsSetHeading>
    }
}
 8002df8:	bf00      	nop
 8002dfa:	3730      	adds	r7, #48	; 0x30
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}
 8002e00:	00000000 	.word	0x00000000

08002e04 <FusionAhrsGetQuaternion>:
/**
 * @brief Returns the quaternion describing the sensor relative to the Earth.
 * @param ahrs AHRS algorithm structure.
 * @return Quaternion describing the sensor relative to the Earth.
 */
FusionQuaternion FusionAhrsGetQuaternion(const FusionAhrs *const ahrs) {
 8002e04:	b490      	push	{r4, r7}
 8002e06:	b08a      	sub	sp, #40	; 0x28
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6178      	str	r0, [r7, #20]
    return ahrs->quaternion;
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	f107 0418 	add.w	r4, r7, #24
 8002e12:	3318      	adds	r3, #24
 8002e14:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002e16:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002e1a:	69b8      	ldr	r0, [r7, #24]
 8002e1c:	69f9      	ldr	r1, [r7, #28]
 8002e1e:	6a3a      	ldr	r2, [r7, #32]
 8002e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e22:	ee06 0a10 	vmov	s12, r0
 8002e26:	ee06 1a90 	vmov	s13, r1
 8002e2a:	ee07 2a10 	vmov	s14, r2
 8002e2e:	ee07 3a90 	vmov	s15, r3
}
 8002e32:	eeb0 0a46 	vmov.f32	s0, s12
 8002e36:	eef0 0a66 	vmov.f32	s1, s13
 8002e3a:	eeb0 1a47 	vmov.f32	s2, s14
 8002e3e:	eef0 1a67 	vmov.f32	s3, s15
 8002e42:	3728      	adds	r7, #40	; 0x28
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bc90      	pop	{r4, r7}
 8002e48:	4770      	bx	lr

08002e4a <FusionAhrsSetHeading>:
 * algorithm.  This function can be used to reset drift in heading when the AHRS
 * algorithm is being used without a magnetometer.
 * @param ahrs AHRS algorithm structure.
 * @param heading Heading angle in degrees.
 */
void FusionAhrsSetHeading(FusionAhrs *const ahrs, const float heading) {
 8002e4a:	b590      	push	{r4, r7, lr}
 8002e4c:	b089      	sub	sp, #36	; 0x24
 8002e4e:	af00      	add	r7, sp, #0
 8002e50:	6078      	str	r0, [r7, #4]
 8002e52:	ed87 0a00 	vstr	s0, [r7]
#define Q ahrs->quaternion.element
    const float yaw = atan2f(Q.w * Q.z + Q.x * Q.y, 0.5f - Q.y * Q.y - Q.z * Q.z);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	ed93 7a06 	vldr	s14, [r3, #24]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002e62:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	edd3 6a07 	vldr	s13, [r3, #28]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	edd3 7a08 	vldr	s15, [r3, #32]
 8002e72:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e76:	ee37 6a27 	vadd.f32	s12, s14, s15
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	ed93 7a08 	vldr	s14, [r3, #32]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	edd3 7a08 	vldr	s15, [r3, #32]
 8002e86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e8a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002e8e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002e9e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ea2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ea6:	eef0 0a67 	vmov.f32	s1, s15
 8002eaa:	eeb0 0a46 	vmov.f32	s0, s12
 8002eae:	f00f fe35 	bl	8012b1c <atan2f>
 8002eb2:	ed87 0a07 	vstr	s0, [r7, #28]
    const float halfYawMinusHeading = 0.5f * (yaw - FusionDegreesToRadians(heading));
 8002eb6:	ed97 0a00 	vldr	s0, [r7]
 8002eba:	f7fe fae5 	bl	8001488 <FusionDegreesToRadians>
 8002ebe:	eeb0 7a40 	vmov.f32	s14, s0
 8002ec2:	edd7 7a07 	vldr	s15, [r7, #28]
 8002ec6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002eca:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002ece:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ed2:	edc7 7a06 	vstr	s15, [r7, #24]
    const FusionQuaternion rotation = {.element = {
            .w = cosf(halfYawMinusHeading),
 8002ed6:	ed97 0a06 	vldr	s0, [r7, #24]
 8002eda:	f00f fe79 	bl	8012bd0 <cosf>
 8002ede:	eef0 7a40 	vmov.f32	s15, s0
    const FusionQuaternion rotation = {.element = {
 8002ee2:	edc7 7a02 	vstr	s15, [r7, #8]
 8002ee6:	f04f 0300 	mov.w	r3, #0
 8002eea:	60fb      	str	r3, [r7, #12]
 8002eec:	f04f 0300 	mov.w	r3, #0
 8002ef0:	613b      	str	r3, [r7, #16]
            .x = 0.0f,
            .y = 0.0f,
            .z = -1.0f * sinf(halfYawMinusHeading),
 8002ef2:	ed97 0a06 	vldr	s0, [r7, #24]
 8002ef6:	f00f feb7 	bl	8012c68 <sinf>
 8002efa:	eef0 7a40 	vmov.f32	s15, s0
 8002efe:	eef1 7a67 	vneg.f32	s15, s15
    const FusionQuaternion rotation = {.element = {
 8002f02:	edc7 7a05 	vstr	s15, [r7, #20]
    }};
    ahrs->quaternion = FusionQuaternionMultiply(rotation, ahrs->quaternion);
 8002f06:	687c      	ldr	r4, [r7, #4]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	ed93 4a06 	vldr	s8, [r3, #24]
 8002f0e:	edd3 4a07 	vldr	s9, [r3, #28]
 8002f12:	ed93 5a08 	vldr	s10, [r3, #32]
 8002f16:	edd3 5a09 	vldr	s11, [r3, #36]	; 0x24
 8002f1a:	ed97 6a02 	vldr	s12, [r7, #8]
 8002f1e:	edd7 6a03 	vldr	s13, [r7, #12]
 8002f22:	ed97 7a04 	vldr	s14, [r7, #16]
 8002f26:	edd7 7a05 	vldr	s15, [r7, #20]
 8002f2a:	eeb0 2a44 	vmov.f32	s4, s8
 8002f2e:	eef0 2a64 	vmov.f32	s5, s9
 8002f32:	eeb0 3a45 	vmov.f32	s6, s10
 8002f36:	eef0 3a65 	vmov.f32	s7, s11
 8002f3a:	eeb0 0a46 	vmov.f32	s0, s12
 8002f3e:	eef0 0a66 	vmov.f32	s1, s13
 8002f42:	eeb0 1a47 	vmov.f32	s2, s14
 8002f46:	eef0 1a67 	vmov.f32	s3, s15
 8002f4a:	f7fe fdcc 	bl	8001ae6 <FusionQuaternionMultiply>
 8002f4e:	eeb0 6a40 	vmov.f32	s12, s0
 8002f52:	eef0 6a60 	vmov.f32	s13, s1
 8002f56:	eeb0 7a41 	vmov.f32	s14, s2
 8002f5a:	eef0 7a61 	vmov.f32	s15, s3
 8002f5e:	ed84 6a06 	vstr	s12, [r4, #24]
 8002f62:	edc4 6a07 	vstr	s13, [r4, #28]
 8002f66:	ed84 7a08 	vstr	s14, [r4, #32]
 8002f6a:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
#undef Q
}
 8002f6e:	bf00      	nop
 8002f70:	3724      	adds	r7, #36	; 0x24
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd90      	pop	{r4, r7, pc}
	...

08002f78 <FusionOffsetInitialise>:
/**
 * @brief Initialises the gyroscope offset algorithm.
 * @param offset Gyroscope offset algorithm structure.
 * @param sampleRate Sample rate in Hz.
 */
void FusionOffsetInitialise(FusionOffset *const offset, const unsigned int sampleRate) {
 8002f78:	b480      	push	{r7}
 8002f7a:	b087      	sub	sp, #28
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
 8002f80:	6039      	str	r1, [r7, #0]
    offset->filterCoefficient = 2.0f * (float) M_PI * CUTOFF_FREQUENCY * (1.0f / (float) sampleRate);
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	ee07 3a90 	vmov	s15, r3
 8002f88:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002f8c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002f90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002f94:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8002fd8 <FusionOffsetInitialise+0x60>
 8002f98:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	edc3 7a00 	vstr	s15, [r3]
    offset->timeout = TIMEOUT * sampleRate;
 8002fa2:	683a      	ldr	r2, [r7, #0]
 8002fa4:	4613      	mov	r3, r2
 8002fa6:	009b      	lsls	r3, r3, #2
 8002fa8:	441a      	add	r2, r3
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	605a      	str	r2, [r3, #4]
    offset->timer = 0;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	609a      	str	r2, [r3, #8]
    offset->gyroscopeOffset = FUSION_VECTOR_ZERO;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	f04f 0200 	mov.w	r2, #0
 8002fba:	60da      	str	r2, [r3, #12]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	f04f 0200 	mov.w	r2, #0
 8002fc2:	611a      	str	r2, [r3, #16]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	f04f 0200 	mov.w	r2, #0
 8002fca:	615a      	str	r2, [r3, #20]
}
 8002fcc:	bf00      	nop
 8002fce:	371c      	adds	r7, #28
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd6:	4770      	bx	lr
 8002fd8:	3e00adfd 	.word	0x3e00adfd

08002fdc <GetPage>:




static uint32_t GetPage(uint32_t Address)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b085      	sub	sp, #20
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  for (int indx=0; indx<256; indx++)
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	60fb      	str	r3, [r7, #12]
 8002fe8:	e016      	b.n	8003018 <GetPage+0x3c>
  {
	  if((Address < (FLASH_BASE + (FLASH_PAGE_SIZE *(indx+1))) ) && (Address >= (FLASH_BASE + FLASH_PAGE_SIZE*indx)))
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002ff0:	3301      	adds	r3, #1
 8002ff2:	031b      	lsls	r3, r3, #12
 8002ff4:	687a      	ldr	r2, [r7, #4]
 8002ff6:	429a      	cmp	r2, r3
 8002ff8:	d20b      	bcs.n	8003012 <GetPage+0x36>
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8003000:	031b      	lsls	r3, r3, #12
 8003002:	687a      	ldr	r2, [r7, #4]
 8003004:	429a      	cmp	r2, r3
 8003006:	d304      	bcc.n	8003012 <GetPage+0x36>
	  {
		  return (FLASH_BASE + FLASH_PAGE_SIZE*indx);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800300e:	031b      	lsls	r3, r3, #12
 8003010:	e006      	b.n	8003020 <GetPage+0x44>
  for (int indx=0; indx<256; indx++)
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	3301      	adds	r3, #1
 8003016:	60fb      	str	r3, [r7, #12]
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2bff      	cmp	r3, #255	; 0xff
 800301c:	dde5      	ble.n	8002fea <GetPage+0xe>
	  }
  }
  return 0;
 800301e:	2300      	movs	r3, #0
}
 8003020:	4618      	mov	r0, r3
 8003022:	3714      	adds	r7, #20
 8003024:	46bd      	mov	sp, r7
 8003026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302a:	4770      	bx	lr

0800302c <FlashReadData>:
}



void FlashReadData (uint32_t StartPageAddress, uint64_t *RxBuf, uint16_t numberofwords)
{
 800302c:	b480      	push	{r7}
 800302e:	b085      	sub	sp, #20
 8003030:	af00      	add	r7, sp, #0
 8003032:	60f8      	str	r0, [r7, #12]
 8003034:	60b9      	str	r1, [r7, #8]
 8003036:	4613      	mov	r3, r2
 8003038:	80fb      	strh	r3, [r7, #6]
	while (1)
	{

		*RxBuf = *(__IO uint64_t *)StartPageAddress;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003040:	68b9      	ldr	r1, [r7, #8]
 8003042:	e9c1 2300 	strd	r2, r3, [r1]
		StartPageAddress += 8;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	3308      	adds	r3, #8
 800304a:	60fb      	str	r3, [r7, #12]
		RxBuf++;
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	3308      	adds	r3, #8
 8003050:	60bb      	str	r3, [r7, #8]
		if (!(numberofwords--)){
 8003052:	88fb      	ldrh	r3, [r7, #6]
 8003054:	1e5a      	subs	r2, r3, #1
 8003056:	80fa      	strh	r2, [r7, #6]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d000      	beq.n	800305e <FlashReadData+0x32>
		*RxBuf = *(__IO uint64_t *)StartPageAddress;
 800305c:	e7ed      	b.n	800303a <FlashReadData+0xe>
			break;
 800305e:	bf00      	nop
		}
	}
}
 8003060:	bf00      	nop
 8003062:	3714      	adds	r7, #20
 8003064:	46bd      	mov	sp, r7
 8003066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306a:	4770      	bx	lr

0800306c <FlashWriteData>:
   return 0;
}


uint32_t FlashWriteData (uint32_t StartPageAddress, uint64_t *Data, uint16_t numberofwords)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b08a      	sub	sp, #40	; 0x28
 8003070:	af00      	add	r7, sp, #0
 8003072:	60f8      	str	r0, [r7, #12]
 8003074:	60b9      	str	r1, [r7, #8]
 8003076:	4613      	mov	r3, r2
 8003078:	80fb      	strh	r3, [r7, #6]
	static FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t PAGEError;
	int sofar=0;
 800307a:	2300      	movs	r3, #0
 800307c:	627b      	str	r3, [r7, #36]	; 0x24

	  /* Unlock the Flash to enable the flash control register access *************/
	   HAL_FLASH_Unlock();
 800307e:	f003 f91b 	bl	80062b8 <HAL_FLASH_Unlock>

	   /* Erase the user Flash area*/

	  uint32_t StartPage = GetPage(StartPageAddress);
 8003082:	68f8      	ldr	r0, [r7, #12]
 8003084:	f7ff ffaa 	bl	8002fdc <GetPage>
 8003088:	6238      	str	r0, [r7, #32]
	  uint32_t EndPageAdress = StartPageAddress + numberofwords * 8;
 800308a:	88fb      	ldrh	r3, [r7, #6]
 800308c:	00db      	lsls	r3, r3, #3
 800308e:	461a      	mov	r2, r3
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	4413      	add	r3, r2
 8003094:	61fb      	str	r3, [r7, #28]
	  uint32_t EndPage = GetPage(EndPageAdress);
 8003096:	69f8      	ldr	r0, [r7, #28]
 8003098:	f7ff ffa0 	bl	8002fdc <GetPage>
 800309c:	61b8      	str	r0, [r7, #24]

	   /* Fill EraseInit structure*/
	   EraseInitStruct.Banks = FLASH_BANK_1;
 800309e:	4b27      	ldr	r3, [pc, #156]	; (800313c <FlashWriteData+0xd0>)
 80030a0:	2201      	movs	r2, #1
 80030a2:	605a      	str	r2, [r3, #4]
	   EraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;
 80030a4:	4b25      	ldr	r3, [pc, #148]	; (800313c <FlashWriteData+0xd0>)
 80030a6:	2200      	movs	r2, #0
 80030a8:	601a      	str	r2, [r3, #0]
	   EraseInitStruct.Page = ((StartPage - FLASH_BASE) / FLASH_PAGE_SIZE);
 80030aa:	6a3b      	ldr	r3, [r7, #32]
 80030ac:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 80030b0:	0b1b      	lsrs	r3, r3, #12
 80030b2:	4a22      	ldr	r2, [pc, #136]	; (800313c <FlashWriteData+0xd0>)
 80030b4:	6093      	str	r3, [r2, #8]
	   EraseInitStruct.NbPages = ((EndPage - StartPage)/FLASH_PAGE_SIZE) + 1;
 80030b6:	69ba      	ldr	r2, [r7, #24]
 80030b8:	6a3b      	ldr	r3, [r7, #32]
 80030ba:	1ad3      	subs	r3, r2, r3
 80030bc:	0b1b      	lsrs	r3, r3, #12
 80030be:	3301      	adds	r3, #1
 80030c0:	4a1e      	ldr	r2, [pc, #120]	; (800313c <FlashWriteData+0xd0>)
 80030c2:	60d3      	str	r3, [r2, #12]

	   if (HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) != HAL_OK)
 80030c4:	f107 0314 	add.w	r3, r7, #20
 80030c8:	4619      	mov	r1, r3
 80030ca:	481c      	ldr	r0, [pc, #112]	; (800313c <FlashWriteData+0xd0>)
 80030cc:	f003 f9e6 	bl	800649c <HAL_FLASHEx_Erase>
 80030d0:	4603      	mov	r3, r0
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d027      	beq.n	8003126 <FlashWriteData+0xba>
	   {
	     /*Error occurred while page erase.*/
		   uart_write_debug("Failed to erase flash\r\n",UART_NYX);
 80030d6:	2101      	movs	r1, #1
 80030d8:	4819      	ldr	r0, [pc, #100]	; (8003140 <FlashWriteData+0xd4>)
 80030da:	f002 fcf5 	bl	8005ac8 <uart_write_debug>
		   HAL_FLASH_Lock();
 80030de:	f003 f90d 	bl	80062fc <HAL_FLASH_Lock>
		   return HAL_FLASH_GetError ();
 80030e2:	f003 f91b 	bl	800631c <HAL_FLASH_GetError>
 80030e6:	4603      	mov	r3, r0
 80030e8:	e024      	b.n	8003134 <FlashWriteData+0xc8>

	   /* Program the user Flash area word by word*/

	   while (sofar<numberofwords)
	   {
	     if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, StartPageAddress, Data[sofar]) == HAL_OK)
 80030ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ec:	00db      	lsls	r3, r3, #3
 80030ee:	68ba      	ldr	r2, [r7, #8]
 80030f0:	4413      	add	r3, r2
 80030f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030f6:	68f9      	ldr	r1, [r7, #12]
 80030f8:	2000      	movs	r0, #0
 80030fa:	f003 f871 	bl	80061e0 <HAL_FLASH_Program>
 80030fe:	4603      	mov	r3, r0
 8003100:	2b00      	cmp	r3, #0
 8003102:	d106      	bne.n	8003112 <FlashWriteData+0xa6>
	     {
	    	 StartPageAddress += 8;  // use StartPageAddress += 2 for half word and 8 for double word
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	3308      	adds	r3, #8
 8003108:	60fb      	str	r3, [r7, #12]
	    	 sofar++;
 800310a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800310c:	3301      	adds	r3, #1
 800310e:	627b      	str	r3, [r7, #36]	; 0x24
 8003110:	e009      	b.n	8003126 <FlashWriteData+0xba>
	     }
	     else
	     {
	       /* Error occurred while writing data in Flash memory*/
	    	 uart_write_debug("Failed to write flash\r\n",UART_NYX);
 8003112:	2101      	movs	r1, #1
 8003114:	480b      	ldr	r0, [pc, #44]	; (8003144 <FlashWriteData+0xd8>)
 8003116:	f002 fcd7 	bl	8005ac8 <uart_write_debug>
	    	 HAL_FLASH_Lock();
 800311a:	f003 f8ef 	bl	80062fc <HAL_FLASH_Lock>
	    	 return HAL_FLASH_GetError ();
 800311e:	f003 f8fd 	bl	800631c <HAL_FLASH_GetError>
 8003122:	4603      	mov	r3, r0
 8003124:	e006      	b.n	8003134 <FlashWriteData+0xc8>
	   while (sofar<numberofwords)
 8003126:	88fb      	ldrh	r3, [r7, #6]
 8003128:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800312a:	429a      	cmp	r2, r3
 800312c:	dbdd      	blt.n	80030ea <FlashWriteData+0x7e>
	     }
	   }

	   /* Lock the Flash to disable the flash control register access (recommended
	      to protect the FLASH memory against possible unwanted operation) *********/
	   HAL_FLASH_Lock();
 800312e:	f003 f8e5 	bl	80062fc <HAL_FLASH_Lock>
	   return 0;
 8003132:	2300      	movs	r3, #0
}
 8003134:	4618      	mov	r0, r3
 8003136:	3728      	adds	r7, #40	; 0x28
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}
 800313c:	200002ec 	.word	0x200002ec
 8003140:	080141d0 	.word	0x080141d0
 8003144:	080141e8 	.word	0x080141e8

08003148 <Flash_Write_CalTable>:
	return 1;
}


uint32_t Flash_Write_CalTable (uint32_t StartSectorAddress, gyro_data_t *data)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b08c      	sub	sp, #48	; 0x30
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
 8003150:	6039      	str	r1, [r7, #0]
	uint32_t res;
	float temp[3] = {0.0f};
 8003152:	f107 031c 	add.w	r3, r7, #28
 8003156:	2200      	movs	r2, #0
 8003158:	601a      	str	r2, [r3, #0]
 800315a:	605a      	str	r2, [r3, #4]
 800315c:	609a      	str	r2, [r3, #8]
	temp[0] = data->gyro_x;
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	61fb      	str	r3, [r7, #28]
	temp[1] = data->gyro_y;
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	623b      	str	r3, [r7, #32]
	temp[2] = data->gyro_z;
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t bytes_temp[16] = {0};
 8003170:	2300      	movs	r3, #0
 8003172:	60fb      	str	r3, [r7, #12]
 8003174:	f107 0310 	add.w	r3, r7, #16
 8003178:	2200      	movs	r2, #0
 800317a:	601a      	str	r2, [r3, #0]
 800317c:	605a      	str	r2, [r3, #4]
 800317e:	609a      	str	r2, [r3, #8]
	union {
	  float a;
	  uint8_t bytes[4];
	} thing;

	uint8_t j,v=0;
 8003180:	2300      	movs	r3, #0
 8003182:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	for (uint8_t i = 0; i < 3; i++){
 8003186:	2300      	movs	r3, #0
 8003188:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 800318c:	e02d      	b.n	80031ea <Flash_Write_CalTable+0xa2>
		thing.a = temp[i];
 800318e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003192:	009b      	lsls	r3, r3, #2
 8003194:	3330      	adds	r3, #48	; 0x30
 8003196:	443b      	add	r3, r7
 8003198:	3b14      	subs	r3, #20
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	60bb      	str	r3, [r7, #8]

		for (j = 0; j < 4; j++) {
 800319e:	2300      	movs	r3, #0
 80031a0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80031a4:	e013      	b.n	80031ce <Flash_Write_CalTable+0x86>
		  bytes_temp[v+j] = thing.bytes[j];
 80031a6:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80031aa:	f897 102e 	ldrb.w	r1, [r7, #46]	; 0x2e
 80031ae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80031b2:	440b      	add	r3, r1
 80031b4:	3230      	adds	r2, #48	; 0x30
 80031b6:	443a      	add	r2, r7
 80031b8:	f812 2c28 	ldrb.w	r2, [r2, #-40]
 80031bc:	3330      	adds	r3, #48	; 0x30
 80031be:	443b      	add	r3, r7
 80031c0:	f803 2c24 	strb.w	r2, [r3, #-36]
		for (j = 0; j < 4; j++) {
 80031c4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80031c8:	3301      	adds	r3, #1
 80031ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80031ce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80031d2:	2b03      	cmp	r3, #3
 80031d4:	d9e7      	bls.n	80031a6 <Flash_Write_CalTable+0x5e>
		}
		v+=4;
 80031d6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80031da:	3304      	adds	r3, #4
 80031dc:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	for (uint8_t i = 0; i < 3; i++){
 80031e0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80031e4:	3301      	adds	r3, #1
 80031e6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 80031ea:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80031ee:	2b02      	cmp	r3, #2
 80031f0:	d9cd      	bls.n	800318e <Flash_Write_CalTable+0x46>
	}
	for (uint8_t i = 12; i < 16; i++){
 80031f2:	230c      	movs	r3, #12
 80031f4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 80031f8:	e00b      	b.n	8003212 <Flash_Write_CalTable+0xca>
		bytes_temp[i] = 0xFF;
 80031fa:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80031fe:	3330      	adds	r3, #48	; 0x30
 8003200:	443b      	add	r3, r7
 8003202:	22ff      	movs	r2, #255	; 0xff
 8003204:	f803 2c24 	strb.w	r2, [r3, #-36]
	for (uint8_t i = 12; i < 16; i++){
 8003208:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800320c:	3301      	adds	r3, #1
 800320e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8003212:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003216:	2b0f      	cmp	r3, #15
 8003218:	d9ef      	bls.n	80031fa <Flash_Write_CalTable+0xb2>
	}
	res = FlashWriteData (StartSectorAddress, (uint64_t *)bytes_temp, 2);
 800321a:	f107 030c 	add.w	r3, r7, #12
 800321e:	2202      	movs	r2, #2
 8003220:	4619      	mov	r1, r3
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	f7ff ff22 	bl	800306c <FlashWriteData>
 8003228:	62b8      	str	r0, [r7, #40]	; 0x28
	return res;
 800322a:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800322c:	4618      	mov	r0, r3
 800322e:	3730      	adds	r7, #48	; 0x30
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}

08003234 <Flash_Read_CalTable>:

uint32_t Flash_Read_CalTable (uint32_t StartSectorAddress, gyro_data_t *data)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b08c      	sub	sp, #48	; 0x30
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
 800323c:	6039      	str	r1, [r7, #0]
	uint8_t buffer[20] = {0};
 800323e:	2300      	movs	r3, #0
 8003240:	61bb      	str	r3, [r7, #24]
 8003242:	f107 031c 	add.w	r3, r7, #28
 8003246:	2200      	movs	r2, #0
 8003248:	601a      	str	r2, [r3, #0]
 800324a:	605a      	str	r2, [r3, #4]
 800324c:	609a      	str	r2, [r3, #8]
 800324e:	60da      	str	r2, [r3, #12]
	float temp[3] = {0.0f};
 8003250:	f107 030c 	add.w	r3, r7, #12
 8003254:	2200      	movs	r2, #0
 8003256:	601a      	str	r2, [r3, #0]
 8003258:	605a      	str	r2, [r3, #4]
 800325a:	609a      	str	r2, [r3, #8]

	FlashReadData(StartSectorAddress, (uint64_t *)buffer, 2);
 800325c:	f107 0318 	add.w	r3, r7, #24
 8003260:	2202      	movs	r2, #2
 8003262:	4619      	mov	r1, r3
 8003264:	6878      	ldr	r0, [r7, #4]
 8003266:	f7ff fee1 	bl	800302c <FlashReadData>

	if ((buffer[0] == 255) && (buffer[1] == 255)){
 800326a:	7e3b      	ldrb	r3, [r7, #24]
 800326c:	2bff      	cmp	r3, #255	; 0xff
 800326e:	d104      	bne.n	800327a <Flash_Read_CalTable+0x46>
 8003270:	7e7b      	ldrb	r3, [r7, #25]
 8003272:	2bff      	cmp	r3, #255	; 0xff
 8003274:	d101      	bne.n	800327a <Flash_Read_CalTable+0x46>
		return 1;
 8003276:	2301      	movs	r3, #1
 8003278:	e04d      	b.n	8003316 <Flash_Read_CalTable+0xe2>
	union {
	  float a;
	  uint8_t bytes[4];
	} thing;

	uint8_t v=0;
 800327a:	2300      	movs	r3, #0
 800327c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	for (uint8_t j = 0; j < 3; j++){
 8003280:	2300      	movs	r3, #0
 8003282:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8003286:	e02d      	b.n	80032e4 <Flash_Read_CalTable+0xb0>
		for (uint8_t i = 0; i < 4; i++) {
 8003288:	2300      	movs	r3, #0
 800328a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 800328e:	e013      	b.n	80032b8 <Flash_Read_CalTable+0x84>
			thing.bytes[i] = buffer[v+i];
 8003290:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8003294:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003298:	441a      	add	r2, r3
 800329a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800329e:	3230      	adds	r2, #48	; 0x30
 80032a0:	443a      	add	r2, r7
 80032a2:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 80032a6:	3330      	adds	r3, #48	; 0x30
 80032a8:	443b      	add	r3, r7
 80032aa:	f803 2c28 	strb.w	r2, [r3, #-40]
		for (uint8_t i = 0; i < 4; i++) {
 80032ae:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80032b2:	3301      	adds	r3, #1
 80032b4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 80032b8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80032bc:	2b03      	cmp	r3, #3
 80032be:	d9e7      	bls.n	8003290 <Flash_Read_CalTable+0x5c>
		}
		v+=4;
 80032c0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80032c4:	3304      	adds	r3, #4
 80032c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		temp[j] =  thing.a;
 80032ca:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80032ce:	68ba      	ldr	r2, [r7, #8]
 80032d0:	009b      	lsls	r3, r3, #2
 80032d2:	3330      	adds	r3, #48	; 0x30
 80032d4:	443b      	add	r3, r7
 80032d6:	3b24      	subs	r3, #36	; 0x24
 80032d8:	601a      	str	r2, [r3, #0]
	for (uint8_t j = 0; j < 3; j++){
 80032da:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80032de:	3301      	adds	r3, #1
 80032e0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80032e4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80032e8:	2b02      	cmp	r3, #2
 80032ea:	d9cd      	bls.n	8003288 <Flash_Read_CalTable+0x54>
	}
	data->gyro_x = temp[0];
 80032ec:	68fa      	ldr	r2, [r7, #12]
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	601a      	str	r2, [r3, #0]
	data->gyro_y = temp[1];
 80032f2:	693a      	ldr	r2, [r7, #16]
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	605a      	str	r2, [r3, #4]
	data->gyro_z = temp[2];
 80032f8:	697a      	ldr	r2, [r7, #20]
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	609a      	str	r2, [r3, #8]

	if (temp[0] == 0.0f){
 80032fe:	edd7 7a03 	vldr	s15, [r7, #12]
 8003302:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003306:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800330a:	d103      	bne.n	8003314 <Flash_Read_CalTable+0xe0>
		uart_write_debug("Failed to read flash\r\n",UART_NYX);
 800330c:	2101      	movs	r1, #1
 800330e:	4804      	ldr	r0, [pc, #16]	; (8003320 <Flash_Read_CalTable+0xec>)
 8003310:	f002 fbda 	bl	8005ac8 <uart_write_debug>
	}
	return 0;
 8003314:	2300      	movs	r3, #0
}
 8003316:	4618      	mov	r0, r3
 8003318:	3730      	adds	r7, #48	; 0x30
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}
 800331e:	bf00      	nop
 8003320:	08014218 	.word	0x08014218

08003324 <ublox_i2c_bus_init>:
static uint8_t gps_loss_count = 0;

uint8_t gps_data_backup_flag = 0;   //Flag to enable gps data backup only on boot.


uint8_t ublox_i2c_bus_init(void){
 8003324:	b580      	push	{r7, lr}
 8003326:	af00      	add	r7, sp, #0
	hi2c1.Instance = I2C1;
 8003328:	4b1b      	ldr	r3, [pc, #108]	; (8003398 <ublox_i2c_bus_init+0x74>)
 800332a:	4a1c      	ldr	r2, [pc, #112]	; (800339c <ublox_i2c_bus_init+0x78>)
 800332c:	601a      	str	r2, [r3, #0]
//	hi2c1.Init.Timing = 0x00B03FDB; 400KB i2c speed
	hi2c1.Init.Timing = 0x307075B1;	//100KB i2c speed
 800332e:	4b1a      	ldr	r3, [pc, #104]	; (8003398 <ublox_i2c_bus_init+0x74>)
 8003330:	4a1b      	ldr	r2, [pc, #108]	; (80033a0 <ublox_i2c_bus_init+0x7c>)
 8003332:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 8003334:	4b18      	ldr	r3, [pc, #96]	; (8003398 <ublox_i2c_bus_init+0x74>)
 8003336:	2200      	movs	r2, #0
 8003338:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800333a:	4b17      	ldr	r3, [pc, #92]	; (8003398 <ublox_i2c_bus_init+0x74>)
 800333c:	2201      	movs	r2, #1
 800333e:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003340:	4b15      	ldr	r3, [pc, #84]	; (8003398 <ublox_i2c_bus_init+0x74>)
 8003342:	2200      	movs	r2, #0
 8003344:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 8003346:	4b14      	ldr	r3, [pc, #80]	; (8003398 <ublox_i2c_bus_init+0x74>)
 8003348:	2200      	movs	r2, #0
 800334a:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800334c:	4b12      	ldr	r3, [pc, #72]	; (8003398 <ublox_i2c_bus_init+0x74>)
 800334e:	2200      	movs	r2, #0
 8003350:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003352:	4b11      	ldr	r3, [pc, #68]	; (8003398 <ublox_i2c_bus_init+0x74>)
 8003354:	2200      	movs	r2, #0
 8003356:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003358:	4b0f      	ldr	r3, [pc, #60]	; (8003398 <ublox_i2c_bus_init+0x74>)
 800335a:	2200      	movs	r2, #0
 800335c:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800335e:	480e      	ldr	r0, [pc, #56]	; (8003398 <ublox_i2c_bus_init+0x74>)
 8003360:	f003 fbe5 	bl	8006b2e <HAL_I2C_Init>
 8003364:	4603      	mov	r3, r0
 8003366:	2b00      	cmp	r3, #0
 8003368:	d001      	beq.n	800336e <ublox_i2c_bus_init+0x4a>
	{
	return 1;
 800336a:	2301      	movs	r3, #1
 800336c:	e012      	b.n	8003394 <ublox_i2c_bus_init+0x70>
	}

	/** Configure Analogue filter
	*/
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800336e:	2100      	movs	r1, #0
 8003370:	4809      	ldr	r0, [pc, #36]	; (8003398 <ublox_i2c_bus_init+0x74>)
 8003372:	f004 fbbd 	bl	8007af0 <HAL_I2CEx_ConfigAnalogFilter>
 8003376:	4603      	mov	r3, r0
 8003378:	2b00      	cmp	r3, #0
 800337a:	d001      	beq.n	8003380 <ublox_i2c_bus_init+0x5c>
	{
	return 2;
 800337c:	2302      	movs	r3, #2
 800337e:	e009      	b.n	8003394 <ublox_i2c_bus_init+0x70>
	}

	/** Configure Digital filter
	*/
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003380:	2100      	movs	r1, #0
 8003382:	4805      	ldr	r0, [pc, #20]	; (8003398 <ublox_i2c_bus_init+0x74>)
 8003384:	f004 fbff 	bl	8007b86 <HAL_I2CEx_ConfigDigitalFilter>
 8003388:	4603      	mov	r3, r0
 800338a:	2b00      	cmp	r3, #0
 800338c:	d001      	beq.n	8003392 <ublox_i2c_bus_init+0x6e>
	{
	return 3;
 800338e:	2303      	movs	r3, #3
 8003390:	e000      	b.n	8003394 <ublox_i2c_bus_init+0x70>
	}
	return 0;
 8003392:	2300      	movs	r3, #0
}
 8003394:	4618      	mov	r0, r3
 8003396:	bd80      	pop	{r7, pc}
 8003398:	200002fc 	.word	0x200002fc
 800339c:	40005400 	.word	0x40005400
 80033a0:	307075b1 	.word	0x307075b1

080033a4 <ublox_transmit_rtc>:
    else{
        parseNMEA();
    }
}

void ublox_transmit_rtc(uint8_t cmd, UART_select device){
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b082      	sub	sp, #8
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	4603      	mov	r3, r0
 80033ac:	460a      	mov	r2, r1
 80033ae:	71fb      	strb	r3, [r7, #7]
 80033b0:	4613      	mov	r3, r2
 80033b2:	71bb      	strb	r3, [r7, #6]
    transmitMessage(gps_data.timestamp, 9, cmd, device);
 80033b4:	79fa      	ldrb	r2, [r7, #7]
 80033b6:	79bb      	ldrb	r3, [r7, #6]
 80033b8:	2109      	movs	r1, #9
 80033ba:	4803      	ldr	r0, [pc, #12]	; (80033c8 <ublox_transmit_rtc+0x24>)
 80033bc:	f001 faca 	bl	8004954 <transmitMessage>
}
 80033c0:	bf00      	nop
 80033c2:	3708      	adds	r7, #8
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}
 80033c8:	2000039b 	.word	0x2000039b

080033cc <ublox_transmit_message>:

void ublox_transmit_message(uint8_t cmd, UART_select device){
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b086      	sub	sp, #24
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	4603      	mov	r3, r0
 80033d4:	460a      	mov	r2, r1
 80033d6:	71fb      	strb	r3, [r7, #7]
 80033d8:	4613      	mov	r3, r2
 80033da:	71bb      	strb	r3, [r7, #6]
    uint8_t message[12] = {0};
 80033dc:	2300      	movs	r3, #0
 80033de:	60fb      	str	r3, [r7, #12]
 80033e0:	f107 0310 	add.w	r3, r7, #16
 80033e4:	2200      	movs	r2, #0
 80033e6:	601a      	str	r2, [r3, #0]
 80033e8:	605a      	str	r2, [r3, #4]
    message[0] = (gps_data.latitude & 0xFF000000) >> 24;
 80033ea:	4b22      	ldr	r3, [pc, #136]	; (8003474 <ublox_transmit_message+0xa8>)
 80033ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033ee:	0e1b      	lsrs	r3, r3, #24
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	733b      	strb	r3, [r7, #12]
    message[1] = (gps_data.latitude & 0x00FF0000) >> 16;
 80033f4:	4b1f      	ldr	r3, [pc, #124]	; (8003474 <ublox_transmit_message+0xa8>)
 80033f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033f8:	141b      	asrs	r3, r3, #16
 80033fa:	b2db      	uxtb	r3, r3
 80033fc:	737b      	strb	r3, [r7, #13]
    message[2] = (gps_data.latitude & 0x0000FF00) >> 8;
 80033fe:	4b1d      	ldr	r3, [pc, #116]	; (8003474 <ublox_transmit_message+0xa8>)
 8003400:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003402:	121b      	asrs	r3, r3, #8
 8003404:	b2db      	uxtb	r3, r3
 8003406:	73bb      	strb	r3, [r7, #14]
    message[3] = (gps_data.latitude & 0x000000FF);
 8003408:	4b1a      	ldr	r3, [pc, #104]	; (8003474 <ublox_transmit_message+0xa8>)
 800340a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800340c:	b2db      	uxtb	r3, r3
 800340e:	73fb      	strb	r3, [r7, #15]
    message[4] = (gps_data.longtitude & 0xFF000000) >> 24;
 8003410:	4b18      	ldr	r3, [pc, #96]	; (8003474 <ublox_transmit_message+0xa8>)
 8003412:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003414:	0e1b      	lsrs	r3, r3, #24
 8003416:	b2db      	uxtb	r3, r3
 8003418:	743b      	strb	r3, [r7, #16]
    message[5] = (gps_data.longtitude & 0x00FF0000) >> 16;
 800341a:	4b16      	ldr	r3, [pc, #88]	; (8003474 <ublox_transmit_message+0xa8>)
 800341c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800341e:	141b      	asrs	r3, r3, #16
 8003420:	b2db      	uxtb	r3, r3
 8003422:	747b      	strb	r3, [r7, #17]
    message[6] = (gps_data.longtitude & 0x0000FF00) >> 8;
 8003424:	4b13      	ldr	r3, [pc, #76]	; (8003474 <ublox_transmit_message+0xa8>)
 8003426:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003428:	121b      	asrs	r3, r3, #8
 800342a:	b2db      	uxtb	r3, r3
 800342c:	74bb      	strb	r3, [r7, #18]
    message[7] = (gps_data.longtitude & 0x000000FF);
 800342e:	4b11      	ldr	r3, [pc, #68]	; (8003474 <ublox_transmit_message+0xa8>)
 8003430:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003432:	b2db      	uxtb	r3, r3
 8003434:	74fb      	strb	r3, [r7, #19]
    message[8] = (gps_data.altitude & 0xFF000000) >> 24;
 8003436:	4b0f      	ldr	r3, [pc, #60]	; (8003474 <ublox_transmit_message+0xa8>)
 8003438:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800343a:	0e1b      	lsrs	r3, r3, #24
 800343c:	b2db      	uxtb	r3, r3
 800343e:	753b      	strb	r3, [r7, #20]
    message[9] = (gps_data.altitude & 0x00FF0000) >> 16;
 8003440:	4b0c      	ldr	r3, [pc, #48]	; (8003474 <ublox_transmit_message+0xa8>)
 8003442:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003444:	141b      	asrs	r3, r3, #16
 8003446:	b2db      	uxtb	r3, r3
 8003448:	757b      	strb	r3, [r7, #21]
    message[10] = (gps_data.altitude & 0x0000FF00) >> 8;
 800344a:	4b0a      	ldr	r3, [pc, #40]	; (8003474 <ublox_transmit_message+0xa8>)
 800344c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800344e:	121b      	asrs	r3, r3, #8
 8003450:	b2db      	uxtb	r3, r3
 8003452:	75bb      	strb	r3, [r7, #22]
    message[11] = (gps_data.altitude & 0x000000FF);
 8003454:	4b07      	ldr	r3, [pc, #28]	; (8003474 <ublox_transmit_message+0xa8>)
 8003456:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003458:	b2db      	uxtb	r3, r3
 800345a:	75fb      	strb	r3, [r7, #23]
    transmitMessage(message, 12, cmd, device);
 800345c:	79fa      	ldrb	r2, [r7, #7]
 800345e:	79bb      	ldrb	r3, [r7, #6]
 8003460:	f107 000c 	add.w	r0, r7, #12
 8003464:	210c      	movs	r1, #12
 8003466:	f001 fa75 	bl	8004954 <transmitMessage>
}
 800346a:	bf00      	nop
 800346c:	3718      	adds	r7, #24
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}
 8003472:	bf00      	nop
 8003474:	20000350 	.word	0x20000350

08003478 <ubloxInit>:

UBLOX_transResult ubloxInit(void){
 8003478:	b580      	push	{r7, lr}
 800347a:	b084      	sub	sp, #16
 800347c:	af00      	add	r7, sp, #0
	UBLOX_transResult ret;
	uint8_t res[10] = {0};
 800347e:	2300      	movs	r3, #0
 8003480:	607b      	str	r3, [r7, #4]
 8003482:	f107 0308 	add.w	r3, r7, #8
 8003486:	2200      	movs	r2, #0
 8003488:	601a      	str	r2, [r3, #0]
 800348a:	809a      	strh	r2, [r3, #4]
    ret = setPortOutput(COM_PORT_I2C, COM_TYPE_NMEA);
 800348c:	2102      	movs	r1, #2
 800348e:	2000      	movs	r0, #0
 8003490:	f000 f9e0 	bl	8003854 <setPortOutput>
 8003494:	4603      	mov	r3, r0
 8003496:	73fb      	strb	r3, [r7, #15]
    if (ret != ACK){
 8003498:	7bfb      	ldrb	r3, [r7, #15]
 800349a:	2b01      	cmp	r3, #1
 800349c:	d00a      	beq.n	80034b4 <ubloxInit+0x3c>
    	sprintf(res, " POUT:%d\r\n,", ret);
 800349e:	7bfa      	ldrb	r2, [r7, #15]
 80034a0:	1d3b      	adds	r3, r7, #4
 80034a2:	495d      	ldr	r1, [pc, #372]	; (8003618 <ubloxInit+0x1a0>)
 80034a4:	4618      	mov	r0, r3
 80034a6:	f00d fa65 	bl	8010974 <siprintf>
		uart_write_debug(res, 50);
 80034aa:	1d3b      	adds	r3, r7, #4
 80034ac:	2132      	movs	r1, #50	; 0x32
 80034ae:	4618      	mov	r0, r3
 80034b0:	f002 fb0a 	bl	8005ac8 <uart_write_debug>
    }
    HAL_Delay(10);
 80034b4:	200a      	movs	r0, #10
 80034b6:	f002 fcd1 	bl	8005e5c <HAL_Delay>
    ret = configureNMEA(UBX_CLASS_NMEA, UBX_NMEA_GLL, NMEA_GGL_RATE, COM_PORT_I2C);
 80034ba:	2300      	movs	r3, #0
 80034bc:	2200      	movs	r2, #0
 80034be:	2101      	movs	r1, #1
 80034c0:	20f0      	movs	r0, #240	; 0xf0
 80034c2:	f000 f9f7 	bl	80038b4 <configureNMEA>
 80034c6:	4603      	mov	r3, r0
 80034c8:	73fb      	strb	r3, [r7, #15]
    if (ret != ACK){
 80034ca:	7bfb      	ldrb	r3, [r7, #15]
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d00a      	beq.n	80034e6 <ubloxInit+0x6e>
    	sprintf(res, " GGL:%d\r\n,", ret);
 80034d0:	7bfa      	ldrb	r2, [r7, #15]
 80034d2:	1d3b      	adds	r3, r7, #4
 80034d4:	4951      	ldr	r1, [pc, #324]	; (800361c <ubloxInit+0x1a4>)
 80034d6:	4618      	mov	r0, r3
 80034d8:	f00d fa4c 	bl	8010974 <siprintf>
    	uart_write_debug(res, 50);
 80034dc:	1d3b      	adds	r3, r7, #4
 80034de:	2132      	movs	r1, #50	; 0x32
 80034e0:	4618      	mov	r0, r3
 80034e2:	f002 faf1 	bl	8005ac8 <uart_write_debug>
    }
    HAL_Delay(10);
 80034e6:	200a      	movs	r0, #10
 80034e8:	f002 fcb8 	bl	8005e5c <HAL_Delay>
    ret = configureNMEA(UBX_CLASS_NMEA, UBX_NMEA_GSA, NMEA_GSA_RATE, COM_PORT_I2C);
 80034ec:	2300      	movs	r3, #0
 80034ee:	2200      	movs	r2, #0
 80034f0:	2102      	movs	r1, #2
 80034f2:	20f0      	movs	r0, #240	; 0xf0
 80034f4:	f000 f9de 	bl	80038b4 <configureNMEA>
 80034f8:	4603      	mov	r3, r0
 80034fa:	73fb      	strb	r3, [r7, #15]
    if (ret != ACK){
 80034fc:	7bfb      	ldrb	r3, [r7, #15]
 80034fe:	2b01      	cmp	r3, #1
 8003500:	d00a      	beq.n	8003518 <ubloxInit+0xa0>
    	sprintf(res, " GSA:%d\r\n,", ret);
 8003502:	7bfa      	ldrb	r2, [r7, #15]
 8003504:	1d3b      	adds	r3, r7, #4
 8003506:	4946      	ldr	r1, [pc, #280]	; (8003620 <ubloxInit+0x1a8>)
 8003508:	4618      	mov	r0, r3
 800350a:	f00d fa33 	bl	8010974 <siprintf>
		uart_write_debug(res, 50);
 800350e:	1d3b      	adds	r3, r7, #4
 8003510:	2132      	movs	r1, #50	; 0x32
 8003512:	4618      	mov	r0, r3
 8003514:	f002 fad8 	bl	8005ac8 <uart_write_debug>
    }
    HAL_Delay(10);
 8003518:	200a      	movs	r0, #10
 800351a:	f002 fc9f 	bl	8005e5c <HAL_Delay>
    ret = configureNMEA(UBX_CLASS_NMEA, UBX_NMEA_GSV, NMEA_GSV_RATE, COM_PORT_I2C);
 800351e:	2300      	movs	r3, #0
 8003520:	2200      	movs	r2, #0
 8003522:	2103      	movs	r1, #3
 8003524:	20f0      	movs	r0, #240	; 0xf0
 8003526:	f000 f9c5 	bl	80038b4 <configureNMEA>
 800352a:	4603      	mov	r3, r0
 800352c:	73fb      	strb	r3, [r7, #15]
    if (ret != ACK){
 800352e:	7bfb      	ldrb	r3, [r7, #15]
 8003530:	2b01      	cmp	r3, #1
 8003532:	d00a      	beq.n	800354a <ubloxInit+0xd2>
    	sprintf(res, " GSV:%d\r\n,", ret);
 8003534:	7bfa      	ldrb	r2, [r7, #15]
 8003536:	1d3b      	adds	r3, r7, #4
 8003538:	493a      	ldr	r1, [pc, #232]	; (8003624 <ubloxInit+0x1ac>)
 800353a:	4618      	mov	r0, r3
 800353c:	f00d fa1a 	bl	8010974 <siprintf>
		uart_write_debug(res, 50);
 8003540:	1d3b      	adds	r3, r7, #4
 8003542:	2132      	movs	r1, #50	; 0x32
 8003544:	4618      	mov	r0, r3
 8003546:	f002 fabf 	bl	8005ac8 <uart_write_debug>
    }
    HAL_Delay(10);
 800354a:	200a      	movs	r0, #10
 800354c:	f002 fc86 	bl	8005e5c <HAL_Delay>
    ret = configureNMEA(UBX_CLASS_NMEA, UBX_NMEA_RMC, NMEA_RMC_RATE, COM_PORT_I2C);
 8003550:	2300      	movs	r3, #0
 8003552:	2200      	movs	r2, #0
 8003554:	2104      	movs	r1, #4
 8003556:	20f0      	movs	r0, #240	; 0xf0
 8003558:	f000 f9ac 	bl	80038b4 <configureNMEA>
 800355c:	4603      	mov	r3, r0
 800355e:	73fb      	strb	r3, [r7, #15]
    if (ret != ACK){
 8003560:	7bfb      	ldrb	r3, [r7, #15]
 8003562:	2b01      	cmp	r3, #1
 8003564:	d00a      	beq.n	800357c <ubloxInit+0x104>
    	sprintf(res, " RMC:%d\r\n,", ret);
 8003566:	7bfa      	ldrb	r2, [r7, #15]
 8003568:	1d3b      	adds	r3, r7, #4
 800356a:	492f      	ldr	r1, [pc, #188]	; (8003628 <ubloxInit+0x1b0>)
 800356c:	4618      	mov	r0, r3
 800356e:	f00d fa01 	bl	8010974 <siprintf>
		uart_write_debug(res, 50);
 8003572:	1d3b      	adds	r3, r7, #4
 8003574:	2132      	movs	r1, #50	; 0x32
 8003576:	4618      	mov	r0, r3
 8003578:	f002 faa6 	bl	8005ac8 <uart_write_debug>
    }
    HAL_Delay(10);
 800357c:	200a      	movs	r0, #10
 800357e:	f002 fc6d 	bl	8005e5c <HAL_Delay>
    ret = configureNMEA(UBX_CLASS_NMEA, UBX_NMEA_VTG, NMEA_VTG_RATE, COM_PORT_I2C);
 8003582:	2300      	movs	r3, #0
 8003584:	2200      	movs	r2, #0
 8003586:	2105      	movs	r1, #5
 8003588:	20f0      	movs	r0, #240	; 0xf0
 800358a:	f000 f993 	bl	80038b4 <configureNMEA>
 800358e:	4603      	mov	r3, r0
 8003590:	73fb      	strb	r3, [r7, #15]
    if (ret != ACK){
 8003592:	7bfb      	ldrb	r3, [r7, #15]
 8003594:	2b01      	cmp	r3, #1
 8003596:	d00a      	beq.n	80035ae <ubloxInit+0x136>
    	sprintf(res, " VTG:%d\r\n,", ret);
 8003598:	7bfa      	ldrb	r2, [r7, #15]
 800359a:	1d3b      	adds	r3, r7, #4
 800359c:	4923      	ldr	r1, [pc, #140]	; (800362c <ubloxInit+0x1b4>)
 800359e:	4618      	mov	r0, r3
 80035a0:	f00d f9e8 	bl	8010974 <siprintf>
		uart_write_debug(res, 50);
 80035a4:	1d3b      	adds	r3, r7, #4
 80035a6:	2132      	movs	r1, #50	; 0x32
 80035a8:	4618      	mov	r0, r3
 80035aa:	f002 fa8d 	bl	8005ac8 <uart_write_debug>
    }
    HAL_Delay(10);
 80035ae:	200a      	movs	r0, #10
 80035b0:	f002 fc54 	bl	8005e5c <HAL_Delay>
    ret = configureNMEA(UBX_CLASS_NMEA, UBX_NMEA_GGA, NMEA_GGA_RATE, COM_PORT_I2C);
 80035b4:	2300      	movs	r3, #0
 80035b6:	2202      	movs	r2, #2
 80035b8:	2100      	movs	r1, #0
 80035ba:	20f0      	movs	r0, #240	; 0xf0
 80035bc:	f000 f97a 	bl	80038b4 <configureNMEA>
 80035c0:	4603      	mov	r3, r0
 80035c2:	73fb      	strb	r3, [r7, #15]
    if (ret != ACK){
 80035c4:	7bfb      	ldrb	r3, [r7, #15]
 80035c6:	2b01      	cmp	r3, #1
 80035c8:	d00a      	beq.n	80035e0 <ubloxInit+0x168>
    	sprintf(res, " GGA:%d\r\n,", ret);
 80035ca:	7bfa      	ldrb	r2, [r7, #15]
 80035cc:	1d3b      	adds	r3, r7, #4
 80035ce:	4918      	ldr	r1, [pc, #96]	; (8003630 <ubloxInit+0x1b8>)
 80035d0:	4618      	mov	r0, r3
 80035d2:	f00d f9cf 	bl	8010974 <siprintf>
		uart_write_debug(res, 50);
 80035d6:	1d3b      	adds	r3, r7, #4
 80035d8:	2132      	movs	r1, #50	; 0x32
 80035da:	4618      	mov	r0, r3
 80035dc:	f002 fa74 	bl	8005ac8 <uart_write_debug>
    }
    HAL_Delay(10);
 80035e0:	200a      	movs	r0, #10
 80035e2:	f002 fc3b 	bl	8005e5c <HAL_Delay>
    ret = powerManageCfgSet(120);
 80035e6:	2078      	movs	r0, #120	; 0x78
 80035e8:	f000 f996 	bl	8003918 <powerManageCfgSet>
 80035ec:	4603      	mov	r3, r0
 80035ee:	73fb      	strb	r3, [r7, #15]
    if (ret != ACK){
 80035f0:	7bfb      	ldrb	r3, [r7, #15]
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	d00a      	beq.n	800360c <ubloxInit+0x194>
		sprintf(res, " PM2:%d\r\n,", ret);
 80035f6:	7bfa      	ldrb	r2, [r7, #15]
 80035f8:	1d3b      	adds	r3, r7, #4
 80035fa:	490e      	ldr	r1, [pc, #56]	; (8003634 <ubloxInit+0x1bc>)
 80035fc:	4618      	mov	r0, r3
 80035fe:	f00d f9b9 	bl	8010974 <siprintf>
		uart_write_debug(res, 50);
 8003602:	1d3b      	adds	r3, r7, #4
 8003604:	2132      	movs	r1, #50	; 0x32
 8003606:	4618      	mov	r0, r3
 8003608:	f002 fa5e 	bl	8005ac8 <uart_write_debug>
    }
	return ret;
 800360c:	7bfb      	ldrb	r3, [r7, #15]
}
 800360e:	4618      	mov	r0, r3
 8003610:	3710      	adds	r7, #16
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}
 8003616:	bf00      	nop
 8003618:	08014230 	.word	0x08014230
 800361c:	0801423c 	.word	0x0801423c
 8003620:	08014248 	.word	0x08014248
 8003624:	08014254 	.word	0x08014254
 8003628:	08014260 	.word	0x08014260
 800362c:	0801426c 	.word	0x0801426c
 8003630:	08014278 	.word	0x08014278
 8003634:	08014284 	.word	0x08014284

08003638 <calcChecksum>:
    memset(gps_data.sentence, 0, 75);
    return 0;
}


static void calcChecksum(messageCFG_t *msg){
 8003638:	b480      	push	{r7}
 800363a:	b085      	sub	sp, #20
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
    msg->checksumA = 0;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2200      	movs	r2, #0
 8003644:	731a      	strb	r2, [r3, #12]
    msg->checksumB = 0;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2200      	movs	r2, #0
 800364a:	735a      	strb	r2, [r3, #13]

    msg->checksumA += msg->cls;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	7b1a      	ldrb	r2, [r3, #12]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	781b      	ldrb	r3, [r3, #0]
 8003654:	4413      	add	r3, r2
 8003656:	b2da      	uxtb	r2, r3
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	731a      	strb	r2, [r3, #12]
    msg->checksumB += msg->checksumA;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	7b5a      	ldrb	r2, [r3, #13]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	7b1b      	ldrb	r3, [r3, #12]
 8003664:	4413      	add	r3, r2
 8003666:	b2da      	uxtb	r2, r3
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	735a      	strb	r2, [r3, #13]

    msg->checksumA += msg->id;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	7b1a      	ldrb	r2, [r3, #12]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	785b      	ldrb	r3, [r3, #1]
 8003674:	4413      	add	r3, r2
 8003676:	b2da      	uxtb	r2, r3
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	731a      	strb	r2, [r3, #12]
    msg->checksumB += msg->checksumA;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	7b5a      	ldrb	r2, [r3, #13]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	7b1b      	ldrb	r3, [r3, #12]
 8003684:	4413      	add	r3, r2
 8003686:	b2da      	uxtb	r2, r3
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	735a      	strb	r2, [r3, #13]

    msg->checksumA += (msg->len & 0xFF);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	7b1a      	ldrb	r2, [r3, #12]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	885b      	ldrh	r3, [r3, #2]
 8003694:	b2db      	uxtb	r3, r3
 8003696:	4413      	add	r3, r2
 8003698:	b2da      	uxtb	r2, r3
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	731a      	strb	r2, [r3, #12]
    msg->checksumB += msg->checksumA;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	7b5a      	ldrb	r2, [r3, #13]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	7b1b      	ldrb	r3, [r3, #12]
 80036a6:	4413      	add	r3, r2
 80036a8:	b2da      	uxtb	r2, r3
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	735a      	strb	r2, [r3, #13]

    msg->checksumA += (msg->len >> 8);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	7b1a      	ldrb	r2, [r3, #12]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	885b      	ldrh	r3, [r3, #2]
 80036b6:	0a1b      	lsrs	r3, r3, #8
 80036b8:	b29b      	uxth	r3, r3
 80036ba:	b2db      	uxtb	r3, r3
 80036bc:	4413      	add	r3, r2
 80036be:	b2da      	uxtb	r2, r3
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	731a      	strb	r2, [r3, #12]
    msg->checksumB += msg->checksumA;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	7b5a      	ldrb	r2, [r3, #13]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	7b1b      	ldrb	r3, [r3, #12]
 80036cc:	4413      	add	r3, r2
 80036ce:	b2da      	uxtb	r2, r3
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	735a      	strb	r2, [r3, #13]

    uint8_t i;
    for (i=0; i < msg->len; i++)
 80036d4:	2300      	movs	r3, #0
 80036d6:	73fb      	strb	r3, [r7, #15]
 80036d8:	e015      	b.n	8003706 <calcChecksum+0xce>
    {
        msg->checksumA += msg->payload[i];
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	7b1a      	ldrb	r2, [r3, #12]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6899      	ldr	r1, [r3, #8]
 80036e2:	7bfb      	ldrb	r3, [r7, #15]
 80036e4:	440b      	add	r3, r1
 80036e6:	781b      	ldrb	r3, [r3, #0]
 80036e8:	4413      	add	r3, r2
 80036ea:	b2da      	uxtb	r2, r3
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	731a      	strb	r2, [r3, #12]
        msg->checksumB += msg->checksumA;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	7b5a      	ldrb	r2, [r3, #13]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	7b1b      	ldrb	r3, [r3, #12]
 80036f8:	4413      	add	r3, r2
 80036fa:	b2da      	uxtb	r2, r3
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	735a      	strb	r2, [r3, #13]
    for (i=0; i < msg->len; i++)
 8003700:	7bfb      	ldrb	r3, [r7, #15]
 8003702:	3301      	adds	r3, #1
 8003704:	73fb      	strb	r3, [r7, #15]
 8003706:	7bfb      	ldrb	r3, [r7, #15]
 8003708:	b29a      	uxth	r2, r3
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	885b      	ldrh	r3, [r3, #2]
 800370e:	429a      	cmp	r2, r3
 8003710:	d3e3      	bcc.n	80036da <calcChecksum+0xa2>
    }
}
 8003712:	bf00      	nop
 8003714:	bf00      	nop
 8003716:	3714      	adds	r7, #20
 8003718:	46bd      	mov	sp, r7
 800371a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371e:	4770      	bx	lr

08003720 <sendI2Cmessage>:

UBLOX_transResult sendI2Cmessage(void){
 8003720:	b580      	push	{r7, lr}
 8003722:	b098      	sub	sp, #96	; 0x60
 8003724:	af02      	add	r7, sp, #8
	UBLOX_transResult res;
    uint8_t message[60] = {0};
 8003726:	2300      	movs	r3, #0
 8003728:	61bb      	str	r3, [r7, #24]
 800372a:	f107 031c 	add.w	r3, r7, #28
 800372e:	2238      	movs	r2, #56	; 0x38
 8003730:	2100      	movs	r1, #0
 8003732:	4618      	mov	r0, r3
 8003734:	f00d f981 	bl	8010a3a <memset>
    uint8_t rx_message[20] = {0};
 8003738:	2300      	movs	r3, #0
 800373a:	607b      	str	r3, [r7, #4]
 800373c:	f107 0308 	add.w	r3, r7, #8
 8003740:	2200      	movs	r2, #0
 8003742:	601a      	str	r2, [r3, #0]
 8003744:	605a      	str	r2, [r3, #4]
 8003746:	609a      	str	r2, [r3, #8]
 8003748:	60da      	str	r2, [r3, #12]
    uint8_t len = config_message.len + 8;
 800374a:	4b41      	ldr	r3, [pc, #260]	; (8003850 <sendI2Cmessage+0x130>)
 800374c:	885b      	ldrh	r3, [r3, #2]
 800374e:	b2db      	uxtb	r3, r3
 8003750:	3308      	adds	r3, #8
 8003752:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
    message[0] = UBX_SYNCH_1;
 8003756:	23b5      	movs	r3, #181	; 0xb5
 8003758:	763b      	strb	r3, [r7, #24]
    message[1] = UBX_SYNCH_2;
 800375a:	2362      	movs	r3, #98	; 0x62
 800375c:	767b      	strb	r3, [r7, #25]
    message[2] = config_message.cls;
 800375e:	4b3c      	ldr	r3, [pc, #240]	; (8003850 <sendI2Cmessage+0x130>)
 8003760:	781b      	ldrb	r3, [r3, #0]
 8003762:	76bb      	strb	r3, [r7, #26]
    message[3] = config_message.id;
 8003764:	4b3a      	ldr	r3, [pc, #232]	; (8003850 <sendI2Cmessage+0x130>)
 8003766:	785b      	ldrb	r3, [r3, #1]
 8003768:	76fb      	strb	r3, [r7, #27]
    message[4] = (config_message.len & 0xFF);
 800376a:	4b39      	ldr	r3, [pc, #228]	; (8003850 <sendI2Cmessage+0x130>)
 800376c:	885b      	ldrh	r3, [r3, #2]
 800376e:	b2db      	uxtb	r3, r3
 8003770:	773b      	strb	r3, [r7, #28]
    message[5] = (config_message.len >> 8);
 8003772:	4b37      	ldr	r3, [pc, #220]	; (8003850 <sendI2Cmessage+0x130>)
 8003774:	885b      	ldrh	r3, [r3, #2]
 8003776:	0a1b      	lsrs	r3, r3, #8
 8003778:	b29b      	uxth	r3, r3
 800377a:	b2db      	uxtb	r3, r3
 800377c:	777b      	strb	r3, [r7, #29]
    uint8_t i;
    for ( i=0 ; i < config_message.len ; i++){
 800377e:	2300      	movs	r3, #0
 8003780:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8003784:	e011      	b.n	80037aa <sendI2Cmessage+0x8a>
        message[6+i] = config_message.payload[i];
 8003786:	4b32      	ldr	r3, [pc, #200]	; (8003850 <sendI2Cmessage+0x130>)
 8003788:	689a      	ldr	r2, [r3, #8]
 800378a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800378e:	441a      	add	r2, r3
 8003790:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003794:	3306      	adds	r3, #6
 8003796:	7812      	ldrb	r2, [r2, #0]
 8003798:	3358      	adds	r3, #88	; 0x58
 800379a:	443b      	add	r3, r7
 800379c:	f803 2c40 	strb.w	r2, [r3, #-64]
    for ( i=0 ; i < config_message.len ; i++){
 80037a0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80037a4:	3301      	adds	r3, #1
 80037a6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 80037aa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80037ae:	b29a      	uxth	r2, r3
 80037b0:	4b27      	ldr	r3, [pc, #156]	; (8003850 <sendI2Cmessage+0x130>)
 80037b2:	885b      	ldrh	r3, [r3, #2]
 80037b4:	429a      	cmp	r2, r3
 80037b6:	d3e6      	bcc.n	8003786 <sendI2Cmessage+0x66>
    }
    message[6+i] = config_message.checksumA;
 80037b8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80037bc:	3306      	adds	r3, #6
 80037be:	4a24      	ldr	r2, [pc, #144]	; (8003850 <sendI2Cmessage+0x130>)
 80037c0:	7b12      	ldrb	r2, [r2, #12]
 80037c2:	3358      	adds	r3, #88	; 0x58
 80037c4:	443b      	add	r3, r7
 80037c6:	f803 2c40 	strb.w	r2, [r3, #-64]
    message[7+i] = config_message.checksumB;
 80037ca:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80037ce:	3307      	adds	r3, #7
 80037d0:	4a1f      	ldr	r2, [pc, #124]	; (8003850 <sendI2Cmessage+0x130>)
 80037d2:	7b52      	ldrb	r2, [r2, #13]
 80037d4:	3358      	adds	r3, #88	; 0x58
 80037d6:	443b      	add	r3, r7
 80037d8:	f803 2c40 	strb.w	r2, [r3, #-64]
    res = UbloxI2CWriteReadPolling(UBLOX_M9N, message, len, rx_message, 20, 50);
 80037dc:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 80037e0:	b29a      	uxth	r2, r3
 80037e2:	1d3b      	adds	r3, r7, #4
 80037e4:	f107 0118 	add.w	r1, r7, #24
 80037e8:	2032      	movs	r0, #50	; 0x32
 80037ea:	9001      	str	r0, [sp, #4]
 80037ec:	2014      	movs	r0, #20
 80037ee:	9000      	str	r0, [sp, #0]
 80037f0:	2084      	movs	r0, #132	; 0x84
 80037f2:	f000 f8b1 	bl	8003958 <UbloxI2CWriteReadPolling>
 80037f6:	4603      	mov	r3, r0
 80037f8:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
    if (res == TRANS_OK){
 80037fc:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8003800:	2b04      	cmp	r3, #4
 8003802:	d11e      	bne.n	8003842 <sendI2Cmessage+0x122>
    	for(i=0; i<20;i++){
 8003804:	2300      	movs	r3, #0
 8003806:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 800380a:	e00c      	b.n	8003826 <sendI2Cmessage+0x106>
    		if(rx_message[i] == UBX_SYNCH_1){
 800380c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003810:	3358      	adds	r3, #88	; 0x58
 8003812:	443b      	add	r3, r7
 8003814:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 8003818:	2bb5      	cmp	r3, #181	; 0xb5
 800381a:	d009      	beq.n	8003830 <sendI2Cmessage+0x110>
    	for(i=0; i<20;i++){
 800381c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003820:	3301      	adds	r3, #1
 8003822:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8003826:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800382a:	2b13      	cmp	r3, #19
 800382c:	d9ee      	bls.n	800380c <sendI2Cmessage+0xec>
 800382e:	e000      	b.n	8003832 <sendI2Cmessage+0x112>
    			break;
 8003830:	bf00      	nop
    		}
    	}
    	return rx_message[i+3];  //UBLOX returns 1 for ACK and 0 for NACK
 8003832:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003836:	3303      	adds	r3, #3
 8003838:	3358      	adds	r3, #88	; 0x58
 800383a:	443b      	add	r3, r7
 800383c:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 8003840:	e001      	b.n	8003846 <sendI2Cmessage+0x126>
    }
    return res;
 8003842:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
}
 8003846:	4618      	mov	r0, r3
 8003848:	3758      	adds	r7, #88	; 0x58
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}
 800384e:	bf00      	nop
 8003850:	2000002c 	.word	0x2000002c

08003854 <setPortOutput>:

UBLOX_transResult setPortOutput(uint8_t portSelect, uint8_t streamSettings){
 8003854:	b580      	push	{r7, lr}
 8003856:	b088      	sub	sp, #32
 8003858:	af00      	add	r7, sp, #0
 800385a:	4603      	mov	r3, r0
 800385c:	460a      	mov	r2, r1
 800385e:	71fb      	strb	r3, [r7, #7]
 8003860:	4613      	mov	r3, r2
 8003862:	71bb      	strb	r3, [r7, #6]
    config_message.cls = UBX_CLASS_CFG;
 8003864:	4b12      	ldr	r3, [pc, #72]	; (80038b0 <setPortOutput+0x5c>)
 8003866:	2206      	movs	r2, #6
 8003868:	701a      	strb	r2, [r3, #0]
    config_message.id =  UBX_CFG_PRT;
 800386a:	4b11      	ldr	r3, [pc, #68]	; (80038b0 <setPortOutput+0x5c>)
 800386c:	2200      	movs	r2, #0
 800386e:	705a      	strb	r2, [r3, #1]
    config_message.len = 20;
 8003870:	4b0f      	ldr	r3, [pc, #60]	; (80038b0 <setPortOutput+0x5c>)
 8003872:	2214      	movs	r2, #20
 8003874:	805a      	strh	r2, [r3, #2]
    uint8_t payloadCfg[20] = {0};
 8003876:	2300      	movs	r3, #0
 8003878:	60fb      	str	r3, [r7, #12]
 800387a:	f107 0310 	add.w	r3, r7, #16
 800387e:	2200      	movs	r2, #0
 8003880:	601a      	str	r2, [r3, #0]
 8003882:	605a      	str	r2, [r3, #4]
 8003884:	609a      	str	r2, [r3, #8]
 8003886:	60da      	str	r2, [r3, #12]
    payloadCfg[4] = 0x84;
 8003888:	2384      	movs	r3, #132	; 0x84
 800388a:	743b      	strb	r3, [r7, #16]
    payloadCfg[12] = 0x23;
 800388c:	2323      	movs	r3, #35	; 0x23
 800388e:	763b      	strb	r3, [r7, #24]
    payloadCfg[14] = streamSettings;
 8003890:	79bb      	ldrb	r3, [r7, #6]
 8003892:	76bb      	strb	r3, [r7, #26]
    config_message.payload = payloadCfg;
 8003894:	4a06      	ldr	r2, [pc, #24]	; (80038b0 <setPortOutput+0x5c>)
 8003896:	f107 030c 	add.w	r3, r7, #12
 800389a:	6093      	str	r3, [r2, #8]
    calcChecksum(&config_message);
 800389c:	4804      	ldr	r0, [pc, #16]	; (80038b0 <setPortOutput+0x5c>)
 800389e:	f7ff fecb 	bl	8003638 <calcChecksum>
    return sendI2Cmessage();
 80038a2:	f7ff ff3d 	bl	8003720 <sendI2Cmessage>
 80038a6:	4603      	mov	r3, r0
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	3720      	adds	r7, #32
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}
 80038b0:	2000002c 	.word	0x2000002c

080038b4 <configureNMEA>:
    message[8] = config_message.checksumA;
    message[9] = config_message.checksumB;
    return UbloxI2CWriteReadPolling(UBLOX_M9N, message, 10, rx_mes, 11, 100);
}

UBLOX_transResult configureNMEA(uint8_t msgClass, uint8_t msgID, uint8_t rate, uint8_t portID){
 80038b4:	b590      	push	{r4, r7, lr}
 80038b6:	b085      	sub	sp, #20
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	4604      	mov	r4, r0
 80038bc:	4608      	mov	r0, r1
 80038be:	4611      	mov	r1, r2
 80038c0:	461a      	mov	r2, r3
 80038c2:	4623      	mov	r3, r4
 80038c4:	71fb      	strb	r3, [r7, #7]
 80038c6:	4603      	mov	r3, r0
 80038c8:	71bb      	strb	r3, [r7, #6]
 80038ca:	460b      	mov	r3, r1
 80038cc:	717b      	strb	r3, [r7, #5]
 80038ce:	4613      	mov	r3, r2
 80038d0:	713b      	strb	r3, [r7, #4]
    config_message.cls = UBX_CLASS_CFG;
 80038d2:	4b10      	ldr	r3, [pc, #64]	; (8003914 <configureNMEA+0x60>)
 80038d4:	2206      	movs	r2, #6
 80038d6:	701a      	strb	r2, [r3, #0]
    config_message.id = UBX_CFG_MSG;
 80038d8:	4b0e      	ldr	r3, [pc, #56]	; (8003914 <configureNMEA+0x60>)
 80038da:	2201      	movs	r2, #1
 80038dc:	705a      	strb	r2, [r3, #1]
    config_message.len = 8;
 80038de:	4b0d      	ldr	r3, [pc, #52]	; (8003914 <configureNMEA+0x60>)
 80038e0:	2208      	movs	r2, #8
 80038e2:	805a      	strh	r2, [r3, #2]
    uint8_t payloadCfg[8] = {0};
 80038e4:	2300      	movs	r3, #0
 80038e6:	60bb      	str	r3, [r7, #8]
 80038e8:	2300      	movs	r3, #0
 80038ea:	60fb      	str	r3, [r7, #12]
    payloadCfg[0] = msgClass;
 80038ec:	79fb      	ldrb	r3, [r7, #7]
 80038ee:	723b      	strb	r3, [r7, #8]
    payloadCfg[1] = msgID;
 80038f0:	79bb      	ldrb	r3, [r7, #6]
 80038f2:	727b      	strb	r3, [r7, #9]
    payloadCfg[2] = rate;
 80038f4:	797b      	ldrb	r3, [r7, #5]
 80038f6:	72bb      	strb	r3, [r7, #10]
    config_message.payload = payloadCfg;
 80038f8:	4a06      	ldr	r2, [pc, #24]	; (8003914 <configureNMEA+0x60>)
 80038fa:	f107 0308 	add.w	r3, r7, #8
 80038fe:	6093      	str	r3, [r2, #8]
    calcChecksum(&config_message);
 8003900:	4804      	ldr	r0, [pc, #16]	; (8003914 <configureNMEA+0x60>)
 8003902:	f7ff fe99 	bl	8003638 <calcChecksum>
    return sendI2Cmessage();
 8003906:	f7ff ff0b 	bl	8003720 <sendI2Cmessage>
 800390a:	4603      	mov	r3, r0
}
 800390c:	4618      	mov	r0, r3
 800390e:	3714      	adds	r7, #20
 8003910:	46bd      	mov	sp, r7
 8003912:	bd90      	pop	{r4, r7, pc}
 8003914:	2000002c 	.word	0x2000002c

08003918 <powerManageCfgSet>:
    message[7] = config_message.checksumB;
    return UbloxI2CWriteReadPolling(UBLOX_M9N, message, 8, payload, 56, 200);
}


UBLOX_transResult powerManageCfgSet(uint8_t maxAckTime){
 8003918:	b580      	push	{r7, lr}
 800391a:	b082      	sub	sp, #8
 800391c:	af00      	add	r7, sp, #0
 800391e:	4603      	mov	r3, r0
 8003920:	71fb      	strb	r3, [r7, #7]
    config_message.cls = UBX_CLASS_CFG;
 8003922:	4b0b      	ldr	r3, [pc, #44]	; (8003950 <powerManageCfgSet+0x38>)
 8003924:	2206      	movs	r2, #6
 8003926:	701a      	strb	r2, [r3, #0]
    config_message.id =  UBX_CFG_PM2;
 8003928:	4b09      	ldr	r3, [pc, #36]	; (8003950 <powerManageCfgSet+0x38>)
 800392a:	223b      	movs	r2, #59	; 0x3b
 800392c:	705a      	strb	r2, [r3, #1]
    config_message.len = 44;
 800392e:	4b08      	ldr	r3, [pc, #32]	; (8003950 <powerManageCfgSet+0x38>)
 8003930:	222c      	movs	r2, #44	; 0x2c
 8003932:	805a      	strh	r2, [r3, #2]
    config_message.payload = powerModesetPld;
 8003934:	4b06      	ldr	r3, [pc, #24]	; (8003950 <powerManageCfgSet+0x38>)
 8003936:	4a07      	ldr	r2, [pc, #28]	; (8003954 <powerManageCfgSet+0x3c>)
 8003938:	609a      	str	r2, [r3, #8]
    calcChecksum(&config_message);
 800393a:	4805      	ldr	r0, [pc, #20]	; (8003950 <powerManageCfgSet+0x38>)
 800393c:	f7ff fe7c 	bl	8003638 <calcChecksum>
    return sendI2Cmessage();
 8003940:	f7ff feee 	bl	8003720 <sendI2Cmessage>
 8003944:	4603      	mov	r3, r0
}
 8003946:	4618      	mov	r0, r3
 8003948:	3708      	adds	r7, #8
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}
 800394e:	bf00      	nop
 8003950:	2000002c 	.word	0x2000002c
 8003954:	20000000 	.word	0x20000000

08003958 <UbloxI2CWriteReadPolling>:
}


UBLOX_transResult UbloxI2CWriteReadPolling(uint16_t DevAddress, uint8_t *TData, uint16_t TDataLen,
										uint8_t *RData, uint16_t RDataLen, uint32_t Timeout)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b088      	sub	sp, #32
 800395c:	af02      	add	r7, sp, #8
 800395e:	60b9      	str	r1, [r7, #8]
 8003960:	607b      	str	r3, [r7, #4]
 8003962:	4603      	mov	r3, r0
 8003964:	81fb      	strh	r3, [r7, #14]
 8003966:	4613      	mov	r3, r2
 8003968:	81bb      	strh	r3, [r7, #12]
	HAL_StatusTypeDef ret = 0x00;
 800396a:	2300      	movs	r3, #0
 800396c:	75fb      	strb	r3, [r7, #23]

	if (HAL_I2C_Master_Transmit(&hi2c1, DevAddress, TData, TDataLen, Timeout)!= HAL_OK ){
 800396e:	89ba      	ldrh	r2, [r7, #12]
 8003970:	89f9      	ldrh	r1, [r7, #14]
 8003972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003974:	9300      	str	r3, [sp, #0]
 8003976:	4613      	mov	r3, r2
 8003978:	68ba      	ldr	r2, [r7, #8]
 800397a:	480d      	ldr	r0, [pc, #52]	; (80039b0 <UbloxI2CWriteReadPolling+0x58>)
 800397c:	f003 f966 	bl	8006c4c <HAL_I2C_Master_Transmit>
 8003980:	4603      	mov	r3, r0
 8003982:	2b00      	cmp	r3, #0
 8003984:	d001      	beq.n	800398a <UbloxI2CWriteReadPolling+0x32>
		return TRANS_ERROR;
 8003986:	2302      	movs	r3, #2
 8003988:	e00e      	b.n	80039a8 <UbloxI2CWriteReadPolling+0x50>
	}
	// Read Response
	if (HAL_I2C_Master_Receive(&hi2c1, DevAddress, RData, RDataLen, Timeout) != HAL_OK){
 800398a:	8c3a      	ldrh	r2, [r7, #32]
 800398c:	89f9      	ldrh	r1, [r7, #14]
 800398e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003990:	9300      	str	r3, [sp, #0]
 8003992:	4613      	mov	r3, r2
 8003994:	687a      	ldr	r2, [r7, #4]
 8003996:	4806      	ldr	r0, [pc, #24]	; (80039b0 <UbloxI2CWriteReadPolling+0x58>)
 8003998:	f003 fa4c 	bl	8006e34 <HAL_I2C_Master_Receive>
 800399c:	4603      	mov	r3, r0
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d001      	beq.n	80039a6 <UbloxI2CWriteReadPolling+0x4e>
		return RECEIVE_ERROR;
 80039a2:	2303      	movs	r3, #3
 80039a4:	e000      	b.n	80039a8 <UbloxI2CWriteReadPolling+0x50>
	}
	return TRANS_OK;
 80039a6:	2304      	movs	r3, #4
}
 80039a8:	4618      	mov	r0, r3
 80039aa:	3718      	adds	r7, #24
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}
 80039b0:	200002fc 	.word	0x200002fc

080039b4 <tick_gyro>:

uint16_t gyro_offset_counter = 0;
gyro_data_t gyro_sum;
gyro_data_t gyro_mean;

void tick_gyro(mems_data_t * mems_data){
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b082      	sub	sp, #8
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]

    lsm6_acc_read(mems_data);
 80039bc:	6878      	ldr	r0, [r7, #4]
 80039be:	f000 f99b 	bl	8003cf8 <lsm6_acc_read>
    lis3_magn_read(mems_data);
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	f000 fa00 	bl	8003dc8 <lis3_magn_read>
    gyro_read(mems_data);
 80039c8:	6878      	ldr	r0, [r7, #4]
 80039ca:	f000 f909 	bl	8003be0 <gyro_read>
//    debugPrintMEMS(mems_data);
}
 80039ce:	bf00      	nop
 80039d0:	3708      	adds	r7, #8
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}
	...

080039d8 <lsm6_bus_init>:


uint8_t lsm6_bus_init(void)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 80039dc:	4b1b      	ldr	r3, [pc, #108]	; (8003a4c <lsm6_bus_init+0x74>)
 80039de:	4a1c      	ldr	r2, [pc, #112]	; (8003a50 <lsm6_bus_init+0x78>)
 80039e0:	601a      	str	r2, [r3, #0]
//hi2c2.Init.Timing = 0x00B03FDB;
  hi2c2.Init.Timing = 0x307075B1;
 80039e2:	4b1a      	ldr	r3, [pc, #104]	; (8003a4c <lsm6_bus_init+0x74>)
 80039e4:	4a1b      	ldr	r2, [pc, #108]	; (8003a54 <lsm6_bus_init+0x7c>)
 80039e6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80039e8:	4b18      	ldr	r3, [pc, #96]	; (8003a4c <lsm6_bus_init+0x74>)
 80039ea:	2200      	movs	r2, #0
 80039ec:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80039ee:	4b17      	ldr	r3, [pc, #92]	; (8003a4c <lsm6_bus_init+0x74>)
 80039f0:	2201      	movs	r2, #1
 80039f2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80039f4:	4b15      	ldr	r3, [pc, #84]	; (8003a4c <lsm6_bus_init+0x74>)
 80039f6:	2200      	movs	r2, #0
 80039f8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80039fa:	4b14      	ldr	r3, [pc, #80]	; (8003a4c <lsm6_bus_init+0x74>)
 80039fc:	2200      	movs	r2, #0
 80039fe:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003a00:	4b12      	ldr	r3, [pc, #72]	; (8003a4c <lsm6_bus_init+0x74>)
 8003a02:	2200      	movs	r2, #0
 8003a04:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003a06:	4b11      	ldr	r3, [pc, #68]	; (8003a4c <lsm6_bus_init+0x74>)
 8003a08:	2200      	movs	r2, #0
 8003a0a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003a0c:	4b0f      	ldr	r3, [pc, #60]	; (8003a4c <lsm6_bus_init+0x74>)
 8003a0e:	2200      	movs	r2, #0
 8003a10:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8003a12:	480e      	ldr	r0, [pc, #56]	; (8003a4c <lsm6_bus_init+0x74>)
 8003a14:	f003 f88b 	bl	8006b2e <HAL_I2C_Init>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d001      	beq.n	8003a22 <lsm6_bus_init+0x4a>
  {
    return 1;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	e012      	b.n	8003a48 <lsm6_bus_init+0x70>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003a22:	2100      	movs	r1, #0
 8003a24:	4809      	ldr	r0, [pc, #36]	; (8003a4c <lsm6_bus_init+0x74>)
 8003a26:	f004 f863 	bl	8007af0 <HAL_I2CEx_ConfigAnalogFilter>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d001      	beq.n	8003a34 <lsm6_bus_init+0x5c>
  {
    return 2;
 8003a30:	2302      	movs	r3, #2
 8003a32:	e009      	b.n	8003a48 <lsm6_bus_init+0x70>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8003a34:	2100      	movs	r1, #0
 8003a36:	4805      	ldr	r0, [pc, #20]	; (8003a4c <lsm6_bus_init+0x74>)
 8003a38:	f004 f8a5 	bl	8007b86 <HAL_I2CEx_ConfigDigitalFilter>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d001      	beq.n	8003a46 <lsm6_bus_init+0x6e>
  {
    return 3;
 8003a42:	2303      	movs	r3, #3
 8003a44:	e000      	b.n	8003a48 <lsm6_bus_init+0x70>
  }
  return 0;
 8003a46:	2300      	movs	r3, #0

}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	bd80      	pop	{r7, pc}
 8003a4c:	200003c8 	.word	0x200003c8
 8003a50:	40005800 	.word	0x40005800
 8003a54:	307075b1 	.word	0x307075b1

08003a58 <gyro_init>:
		return res;
	}
	return addr;
}

HAL_StatusTypeDef gyro_init(void){
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b086      	sub	sp, #24
 8003a5c:	af04      	add	r7, sp, #16
    uint8_t ctrl2_val = 0x54;   //gyro 208Hz-500dps
 8003a5e:	2354      	movs	r3, #84	; 0x54
 8003a60:	71fb      	strb	r3, [r7, #7]
    uint8_t ctrl3_val = 0x04;   // block data update - reg addr auto incr
 8003a62:	2304      	movs	r3, #4
 8003a64:	71bb      	strb	r3, [r7, #6]
    uint8_t wakeUp = 0x10;
 8003a66:	2310      	movs	r3, #16
 8003a68:	717b      	strb	r3, [r7, #5]
    uint8_t ctrl7_val = 0xE0;	//HPF and HighPerf on
 8003a6a:	23e0      	movs	r3, #224	; 0xe0
 8003a6c:	713b      	strb	r3, [r7, #4]
    HAL_I2C_Mem_Write(&hi2c2, LSM6, WAKE_UP_DUR, I2C_MEMADD_SIZE_8BIT, &wakeUp, 1, 20);
 8003a6e:	2314      	movs	r3, #20
 8003a70:	9302      	str	r3, [sp, #8]
 8003a72:	2301      	movs	r3, #1
 8003a74:	9301      	str	r3, [sp, #4]
 8003a76:	1d7b      	adds	r3, r7, #5
 8003a78:	9300      	str	r3, [sp, #0]
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	225c      	movs	r2, #92	; 0x5c
 8003a7e:	21d4      	movs	r1, #212	; 0xd4
 8003a80:	4815      	ldr	r0, [pc, #84]	; (8003ad8 <gyro_init+0x80>)
 8003a82:	f003 facd 	bl	8007020 <HAL_I2C_Mem_Write>
    HAL_I2C_Mem_Write(&hi2c2, LSM6, CTRL2_G, I2C_MEMADD_SIZE_8BIT, &ctrl2_val, 1, 20);
 8003a86:	2314      	movs	r3, #20
 8003a88:	9302      	str	r3, [sp, #8]
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	9301      	str	r3, [sp, #4]
 8003a8e:	1dfb      	adds	r3, r7, #7
 8003a90:	9300      	str	r3, [sp, #0]
 8003a92:	2301      	movs	r3, #1
 8003a94:	2211      	movs	r2, #17
 8003a96:	21d4      	movs	r1, #212	; 0xd4
 8003a98:	480f      	ldr	r0, [pc, #60]	; (8003ad8 <gyro_init+0x80>)
 8003a9a:	f003 fac1 	bl	8007020 <HAL_I2C_Mem_Write>
    HAL_I2C_Mem_Write(&hi2c2 , LSM6, CTRL7_G, I2C_MEMADD_SIZE_8BIT, &ctrl7_val, 1, 20);
 8003a9e:	2314      	movs	r3, #20
 8003aa0:	9302      	str	r3, [sp, #8]
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	9301      	str	r3, [sp, #4]
 8003aa6:	1d3b      	adds	r3, r7, #4
 8003aa8:	9300      	str	r3, [sp, #0]
 8003aaa:	2301      	movs	r3, #1
 8003aac:	2216      	movs	r2, #22
 8003aae:	21d4      	movs	r1, #212	; 0xd4
 8003ab0:	4809      	ldr	r0, [pc, #36]	; (8003ad8 <gyro_init+0x80>)
 8003ab2:	f003 fab5 	bl	8007020 <HAL_I2C_Mem_Write>
    return HAL_I2C_Mem_Write(&hi2c2, LSM6, CTRL3_C, I2C_MEMADD_SIZE_8BIT, &ctrl3_val, 1, 20);
 8003ab6:	2314      	movs	r3, #20
 8003ab8:	9302      	str	r3, [sp, #8]
 8003aba:	2301      	movs	r3, #1
 8003abc:	9301      	str	r3, [sp, #4]
 8003abe:	1dbb      	adds	r3, r7, #6
 8003ac0:	9300      	str	r3, [sp, #0]
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	2212      	movs	r2, #18
 8003ac6:	21d4      	movs	r1, #212	; 0xd4
 8003ac8:	4803      	ldr	r0, [pc, #12]	; (8003ad8 <gyro_init+0x80>)
 8003aca:	f003 faa9 	bl	8007020 <HAL_I2C_Mem_Write>
 8003ace:	4603      	mov	r3, r0
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	3708      	adds	r7, #8
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}
 8003ad8:	200003c8 	.word	0x200003c8

08003adc <lsm6_acc_init>:

HAL_StatusTypeDef lsm6_acc_init(void){
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b086      	sub	sp, #24
 8003ae0:	af04      	add	r7, sp, #16
    uint8_t ctrl1_val = 0x50;   //acc off
 8003ae2:	2350      	movs	r3, #80	; 0x50
 8003ae4:	71fb      	strb	r3, [r7, #7]
    uint8_t ctrl10_val = 0x20; //Enable timestamp
 8003ae6:	2320      	movs	r3, #32
 8003ae8:	71bb      	strb	r3, [r7, #6]
    HAL_I2C_Mem_Write(&hi2c2, LSM6, CTRL1_XL, I2C_MEMADD_SIZE_8BIT, &ctrl1_val, 1, 20);
 8003aea:	2314      	movs	r3, #20
 8003aec:	9302      	str	r3, [sp, #8]
 8003aee:	2301      	movs	r3, #1
 8003af0:	9301      	str	r3, [sp, #4]
 8003af2:	1dfb      	adds	r3, r7, #7
 8003af4:	9300      	str	r3, [sp, #0]
 8003af6:	2301      	movs	r3, #1
 8003af8:	2210      	movs	r2, #16
 8003afa:	21d4      	movs	r1, #212	; 0xd4
 8003afc:	4809      	ldr	r0, [pc, #36]	; (8003b24 <lsm6_acc_init+0x48>)
 8003afe:	f003 fa8f 	bl	8007020 <HAL_I2C_Mem_Write>
    return HAL_I2C_Mem_Write(&hi2c2, LSM6, CTRL10_C, I2C_MEMADD_SIZE_8BIT, &ctrl10_val, 1, 20);
 8003b02:	2314      	movs	r3, #20
 8003b04:	9302      	str	r3, [sp, #8]
 8003b06:	2301      	movs	r3, #1
 8003b08:	9301      	str	r3, [sp, #4]
 8003b0a:	1dbb      	adds	r3, r7, #6
 8003b0c:	9300      	str	r3, [sp, #0]
 8003b0e:	2301      	movs	r3, #1
 8003b10:	2219      	movs	r2, #25
 8003b12:	21d4      	movs	r1, #212	; 0xd4
 8003b14:	4803      	ldr	r0, [pc, #12]	; (8003b24 <lsm6_acc_init+0x48>)
 8003b16:	f003 fa83 	bl	8007020 <HAL_I2C_Mem_Write>
 8003b1a:	4603      	mov	r3, r0
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	3708      	adds	r7, #8
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}
 8003b24:	200003c8 	.word	0x200003c8

08003b28 <magn_init>:

HAL_StatusTypeDef magn_init(void){
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b086      	sub	sp, #24
 8003b2c:	af04      	add	r7, sp, #16
	HAL_StatusTypeDef res = HAL_OK;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	71fb      	strb	r3, [r7, #7]
	uint8_t ctrl1_val = 0x42;
 8003b32:	2342      	movs	r3, #66	; 0x42
 8003b34:	71bb      	strb	r3, [r7, #6]
    uint8_t ctrl3_val = 0x00;
 8003b36:	2300      	movs	r3, #0
 8003b38:	717b      	strb	r3, [r7, #5]
    uint8_t ctrl4_val = 0x08;
 8003b3a:	2308      	movs	r3, #8
 8003b3c:	713b      	strb	r3, [r7, #4]
    uint8_t ctrl5_val = 0x40;
 8003b3e:	2340      	movs	r3, #64	; 0x40
 8003b40:	70fb      	strb	r3, [r7, #3]
    res = HAL_I2C_Mem_Write(&hi2c2, LIS3_MAGN, CTRL_REG1_MG, I2C_MEMADD_SIZE_8BIT, &ctrl1_val, 1, 50);
 8003b42:	2332      	movs	r3, #50	; 0x32
 8003b44:	9302      	str	r3, [sp, #8]
 8003b46:	2301      	movs	r3, #1
 8003b48:	9301      	str	r3, [sp, #4]
 8003b4a:	1dbb      	adds	r3, r7, #6
 8003b4c:	9300      	str	r3, [sp, #0]
 8003b4e:	2301      	movs	r3, #1
 8003b50:	2220      	movs	r2, #32
 8003b52:	213c      	movs	r1, #60	; 0x3c
 8003b54:	4821      	ldr	r0, [pc, #132]	; (8003bdc <magn_init+0xb4>)
 8003b56:	f003 fa63 	bl	8007020 <HAL_I2C_Mem_Write>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	71fb      	strb	r3, [r7, #7]
    if (res != HAL_OK)return res;
 8003b5e:	79fb      	ldrb	r3, [r7, #7]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d001      	beq.n	8003b68 <magn_init+0x40>
 8003b64:	79fb      	ldrb	r3, [r7, #7]
 8003b66:	e034      	b.n	8003bd2 <magn_init+0xaa>
    res = HAL_I2C_Mem_Write(&hi2c2, LIS3_MAGN, CTRL_REG3_MG, I2C_MEMADD_SIZE_8BIT, &ctrl3_val, 1, 50);
 8003b68:	2332      	movs	r3, #50	; 0x32
 8003b6a:	9302      	str	r3, [sp, #8]
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	9301      	str	r3, [sp, #4]
 8003b70:	1d7b      	adds	r3, r7, #5
 8003b72:	9300      	str	r3, [sp, #0]
 8003b74:	2301      	movs	r3, #1
 8003b76:	2222      	movs	r2, #34	; 0x22
 8003b78:	213c      	movs	r1, #60	; 0x3c
 8003b7a:	4818      	ldr	r0, [pc, #96]	; (8003bdc <magn_init+0xb4>)
 8003b7c:	f003 fa50 	bl	8007020 <HAL_I2C_Mem_Write>
 8003b80:	4603      	mov	r3, r0
 8003b82:	71fb      	strb	r3, [r7, #7]
    if (res != HAL_OK)return res;
 8003b84:	79fb      	ldrb	r3, [r7, #7]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d001      	beq.n	8003b8e <magn_init+0x66>
 8003b8a:	79fb      	ldrb	r3, [r7, #7]
 8003b8c:	e021      	b.n	8003bd2 <magn_init+0xaa>
    res = HAL_I2C_Mem_Write(&hi2c2, LIS3_MAGN, CTRL_REG4_MG, I2C_MEMADD_SIZE_8BIT, &ctrl4_val, 1, 50);
 8003b8e:	2332      	movs	r3, #50	; 0x32
 8003b90:	9302      	str	r3, [sp, #8]
 8003b92:	2301      	movs	r3, #1
 8003b94:	9301      	str	r3, [sp, #4]
 8003b96:	1d3b      	adds	r3, r7, #4
 8003b98:	9300      	str	r3, [sp, #0]
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	2223      	movs	r2, #35	; 0x23
 8003b9e:	213c      	movs	r1, #60	; 0x3c
 8003ba0:	480e      	ldr	r0, [pc, #56]	; (8003bdc <magn_init+0xb4>)
 8003ba2:	f003 fa3d 	bl	8007020 <HAL_I2C_Mem_Write>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	71fb      	strb	r3, [r7, #7]
    if (res != HAL_OK)return res;
 8003baa:	79fb      	ldrb	r3, [r7, #7]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d001      	beq.n	8003bb4 <magn_init+0x8c>
 8003bb0:	79fb      	ldrb	r3, [r7, #7]
 8003bb2:	e00e      	b.n	8003bd2 <magn_init+0xaa>
    res = HAL_I2C_Mem_Write(&hi2c2, LIS3_MAGN, CTRL_REG5_MG, I2C_MEMADD_SIZE_8BIT, &ctrl5_val, 1, 50);
 8003bb4:	2332      	movs	r3, #50	; 0x32
 8003bb6:	9302      	str	r3, [sp, #8]
 8003bb8:	2301      	movs	r3, #1
 8003bba:	9301      	str	r3, [sp, #4]
 8003bbc:	1cfb      	adds	r3, r7, #3
 8003bbe:	9300      	str	r3, [sp, #0]
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	2224      	movs	r2, #36	; 0x24
 8003bc4:	213c      	movs	r1, #60	; 0x3c
 8003bc6:	4805      	ldr	r0, [pc, #20]	; (8003bdc <magn_init+0xb4>)
 8003bc8:	f003 fa2a 	bl	8007020 <HAL_I2C_Mem_Write>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	71fb      	strb	r3, [r7, #7]
    return res;
 8003bd0:	79fb      	ldrb	r3, [r7, #7]
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3708      	adds	r7, #8
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}
 8003bda:	bf00      	nop
 8003bdc:	200003c8 	.word	0x200003c8

08003be0 <gyro_read>:

HAL_StatusTypeDef gyro_read(mems_data_t *mems_data){
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b08c      	sub	sp, #48	; 0x30
 8003be4:	af04      	add	r7, sp, #16
 8003be6:	6078      	str	r0, [r7, #4]
	uint8_t data[6]={0};
 8003be8:	2300      	movs	r3, #0
 8003bea:	613b      	str	r3, [r7, #16]
 8003bec:	2300      	movs	r3, #0
 8003bee:	82bb      	strh	r3, [r7, #20]
	uint8_t ts_data[4]={0};
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	60fb      	str	r3, [r7, #12]
	int16_t gyro_x, gyro_y, gyro_z;
	HAL_StatusTypeDef res = HAL_OK;
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	77fb      	strb	r3, [r7, #31]
    HAL_I2C_Mem_Read(&hi2c2, LSM6, OUTX_L_G, I2C_MEMADD_SIZE_8BIT, data, 6, 50);
 8003bf8:	2332      	movs	r3, #50	; 0x32
 8003bfa:	9302      	str	r3, [sp, #8]
 8003bfc:	2306      	movs	r3, #6
 8003bfe:	9301      	str	r3, [sp, #4]
 8003c00:	f107 0310 	add.w	r3, r7, #16
 8003c04:	9300      	str	r3, [sp, #0]
 8003c06:	2301      	movs	r3, #1
 8003c08:	2222      	movs	r2, #34	; 0x22
 8003c0a:	21d4      	movs	r1, #212	; 0xd4
 8003c0c:	4838      	ldr	r0, [pc, #224]	; (8003cf0 <gyro_read+0x110>)
 8003c0e:	f003 fb1b 	bl	8007248 <HAL_I2C_Mem_Read>
    if (res != HAL_OK){
 8003c12:	7ffb      	ldrb	r3, [r7, #31]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d001      	beq.n	8003c1c <gyro_read+0x3c>
		return res;
 8003c18:	7ffb      	ldrb	r3, [r7, #31]
 8003c1a:	e060      	b.n	8003cde <gyro_read+0xfe>
	}
    HAL_I2C_Mem_Read(&hi2c2, LSM6, TIMESTAMP0, I2C_MEMADD_SIZE_8BIT, ts_data, 3, 50);
 8003c1c:	2332      	movs	r3, #50	; 0x32
 8003c1e:	9302      	str	r3, [sp, #8]
 8003c20:	2303      	movs	r3, #3
 8003c22:	9301      	str	r3, [sp, #4]
 8003c24:	f107 030c 	add.w	r3, r7, #12
 8003c28:	9300      	str	r3, [sp, #0]
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	2240      	movs	r2, #64	; 0x40
 8003c2e:	21d4      	movs	r1, #212	; 0xd4
 8003c30:	482f      	ldr	r0, [pc, #188]	; (8003cf0 <gyro_read+0x110>)
 8003c32:	f003 fb09 	bl	8007248 <HAL_I2C_Mem_Read>
    if (res != HAL_OK){
 8003c36:	7ffb      	ldrb	r3, [r7, #31]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d001      	beq.n	8003c40 <gyro_read+0x60>
		return res;
 8003c3c:	7ffb      	ldrb	r3, [r7, #31]
 8003c3e:	e04e      	b.n	8003cde <gyro_read+0xfe>
	}
    gyro_x = ((int16_t)((data[1] << 8) | data[0]));
 8003c40:	7c7b      	ldrb	r3, [r7, #17]
 8003c42:	021b      	lsls	r3, r3, #8
 8003c44:	b21a      	sxth	r2, r3
 8003c46:	7c3b      	ldrb	r3, [r7, #16]
 8003c48:	b21b      	sxth	r3, r3
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	83bb      	strh	r3, [r7, #28]
    gyro_y = ((int16_t)((data[3] << 8) | data[2]));
 8003c4e:	7cfb      	ldrb	r3, [r7, #19]
 8003c50:	021b      	lsls	r3, r3, #8
 8003c52:	b21a      	sxth	r2, r3
 8003c54:	7cbb      	ldrb	r3, [r7, #18]
 8003c56:	b21b      	sxth	r3, r3
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	837b      	strh	r3, [r7, #26]
    gyro_z = ((int16_t)((data[5] << 8) | data[4]));
 8003c5c:	7d7b      	ldrb	r3, [r7, #21]
 8003c5e:	021b      	lsls	r3, r3, #8
 8003c60:	b21a      	sxth	r2, r3
 8003c62:	7d3b      	ldrb	r3, [r7, #20]
 8003c64:	b21b      	sxth	r3, r3
 8003c66:	4313      	orrs	r3, r2
 8003c68:	833b      	strh	r3, [r7, #24]
#ifndef GYRO_TS
    mems_data->timestamp = osKernelGetTickCount();
 8003c6a:	f008 f89f 	bl	800bdac <osKernelGetTickCount>
 8003c6e:	4602      	mov	r2, r0
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	625a      	str	r2, [r3, #36]	; 0x24
#else
    mems_data->timestamp = (uint32_t) ((ts_data[2]<<16)|(ts_data[1]<<8)|(ts_data[0]));
#endif
    mems_data->gyro.gyro_x = - (float)(gyro_x * 0.0177f);// * -1.0f;
 8003c74:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8003c78:	ee07 3a90 	vmov	s15, r3
 8003c7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003c80:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8003cf4 <gyro_read+0x114>
 8003c84:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003c88:	eef1 7a67 	vneg.f32	s15, s15
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	edc3 7a00 	vstr	s15, [r3]
    mems_data->gyro.gyro_y = - (float)(gyro_y * 0.0177);// * -1.0f;
 8003c92:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003c96:	4618      	mov	r0, r3
 8003c98:	f7fc fc5c 	bl	8000554 <__aeabi_i2d>
 8003c9c:	a312      	add	r3, pc, #72	; (adr r3, 8003ce8 <gyro_read+0x108>)
 8003c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ca2:	f7fc fcc1 	bl	8000628 <__aeabi_dmul>
 8003ca6:	4602      	mov	r2, r0
 8003ca8:	460b      	mov	r3, r1
 8003caa:	4610      	mov	r0, r2
 8003cac:	4619      	mov	r1, r3
 8003cae:	f7fc ff93 	bl	8000bd8 <__aeabi_d2f>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	ee07 3a90 	vmov	s15, r3
 8003cb8:	eef1 7a67 	vneg.f32	s15, s15
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	edc3 7a01 	vstr	s15, [r3, #4]
    mems_data->gyro.gyro_z =   (float)(gyro_z * 0.0177f);// * -1.0f;
 8003cc2:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8003cc6:	ee07 3a90 	vmov	s15, r3
 8003cca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003cce:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8003cf4 <gyro_read+0x114>
 8003cd2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	edc3 7a02 	vstr	s15, [r3, #8]
    return res;
 8003cdc:	7ffb      	ldrb	r3, [r7, #31]
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	3720      	adds	r7, #32
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}
 8003ce6:	bf00      	nop
 8003ce8:	e48e8a72 	.word	0xe48e8a72
 8003cec:	3f921ff2 	.word	0x3f921ff2
 8003cf0:	200003c8 	.word	0x200003c8
 8003cf4:	3c90ff97 	.word	0x3c90ff97

08003cf8 <lsm6_acc_read>:

//HAL_StatusTypeDef gyroReadTS(mems_data_t){
//
//}

HAL_StatusTypeDef lsm6_acc_read(mems_data_t *mems_data){
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b08a      	sub	sp, #40	; 0x28
 8003cfc:	af04      	add	r7, sp, #16
 8003cfe:	6078      	str	r0, [r7, #4]
	uint8_t data[6] = {0};
 8003d00:	2300      	movs	r3, #0
 8003d02:	60bb      	str	r3, [r7, #8]
 8003d04:	2300      	movs	r3, #0
 8003d06:	81bb      	strh	r3, [r7, #12]
	int16_t acc_x, acc_y, acc_z;
	HAL_StatusTypeDef res = HAL_OK;
 8003d08:	2300      	movs	r3, #0
 8003d0a:	75fb      	strb	r3, [r7, #23]
	res = HAL_I2C_Mem_Read(&hi2c2, LSM6, OUTX_L_A, I2C_MEMADD_SIZE_8BIT, data, 6, 50);
 8003d0c:	2332      	movs	r3, #50	; 0x32
 8003d0e:	9302      	str	r3, [sp, #8]
 8003d10:	2306      	movs	r3, #6
 8003d12:	9301      	str	r3, [sp, #4]
 8003d14:	f107 0308 	add.w	r3, r7, #8
 8003d18:	9300      	str	r3, [sp, #0]
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	2228      	movs	r2, #40	; 0x28
 8003d1e:	21d4      	movs	r1, #212	; 0xd4
 8003d20:	4827      	ldr	r0, [pc, #156]	; (8003dc0 <lsm6_acc_read+0xc8>)
 8003d22:	f003 fa91 	bl	8007248 <HAL_I2C_Mem_Read>
 8003d26:	4603      	mov	r3, r0
 8003d28:	75fb      	strb	r3, [r7, #23]
	if (res != HAL_OK){
 8003d2a:	7dfb      	ldrb	r3, [r7, #23]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d001      	beq.n	8003d34 <lsm6_acc_read+0x3c>
		return res;
 8003d30:	7dfb      	ldrb	r3, [r7, #23]
 8003d32:	e040      	b.n	8003db6 <lsm6_acc_read+0xbe>
	}
    acc_x = ((int16_t)((data[1] << 8) | data[0]));
 8003d34:	7a7b      	ldrb	r3, [r7, #9]
 8003d36:	021b      	lsls	r3, r3, #8
 8003d38:	b21a      	sxth	r2, r3
 8003d3a:	7a3b      	ldrb	r3, [r7, #8]
 8003d3c:	b21b      	sxth	r3, r3
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	82bb      	strh	r3, [r7, #20]
    acc_y = ((int16_t)((data[3] << 8) | data[2]));
 8003d42:	7afb      	ldrb	r3, [r7, #11]
 8003d44:	021b      	lsls	r3, r3, #8
 8003d46:	b21a      	sxth	r2, r3
 8003d48:	7abb      	ldrb	r3, [r7, #10]
 8003d4a:	b21b      	sxth	r3, r3
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	827b      	strh	r3, [r7, #18]
    acc_z = ((int16_t)((data[5] << 8) | data[4]));
 8003d50:	7b7b      	ldrb	r3, [r7, #13]
 8003d52:	021b      	lsls	r3, r3, #8
 8003d54:	b21a      	sxth	r2, r3
 8003d56:	7b3b      	ldrb	r3, [r7, #12]
 8003d58:	b21b      	sxth	r3, r3
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	823b      	strh	r3, [r7, #16]
    mems_data->acc.acc_x = - (float)(acc_x / 16384.0f);//  * -1.0f;
 8003d5e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003d62:	ee07 3a90 	vmov	s15, r3
 8003d66:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003d6a:	eddf 6a16 	vldr	s13, [pc, #88]	; 8003dc4 <lsm6_acc_read+0xcc>
 8003d6e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003d72:	eef1 7a67 	vneg.f32	s15, s15
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	edc3 7a03 	vstr	s15, [r3, #12]
    mems_data->acc.acc_y = - (float)(acc_y / 16384.0f);// * -1.0f;
 8003d7c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003d80:	ee07 3a90 	vmov	s15, r3
 8003d84:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003d88:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8003dc4 <lsm6_acc_read+0xcc>
 8003d8c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003d90:	eef1 7a67 	vneg.f32	s15, s15
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	edc3 7a04 	vstr	s15, [r3, #16]
    mems_data->acc.acc_z =	(float)(acc_z / 16384.0f);// * -1.0f;
 8003d9a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003d9e:	ee07 3a90 	vmov	s15, r3
 8003da2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003da6:	eddf 6a07 	vldr	s13, [pc, #28]	; 8003dc4 <lsm6_acc_read+0xcc>
 8003daa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	edc3 7a05 	vstr	s15, [r3, #20]
    return res;
 8003db4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	3718      	adds	r7, #24
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd80      	pop	{r7, pc}
 8003dbe:	bf00      	nop
 8003dc0:	200003c8 	.word	0x200003c8
 8003dc4:	46800000 	.word	0x46800000

08003dc8 <lis3_magn_read>:

HAL_StatusTypeDef lis3_magn_read(mems_data_t *mems_data){
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b08a      	sub	sp, #40	; 0x28
 8003dcc:	af04      	add	r7, sp, #16
 8003dce:	6078      	str	r0, [r7, #4]
	uint8_t data[6] = {0};
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	60bb      	str	r3, [r7, #8]
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	81bb      	strh	r3, [r7, #12]
    int16_t magn_x, magn_y, magn_z;
    HAL_StatusTypeDef res = HAL_OK;
 8003dd8:	2300      	movs	r3, #0
 8003dda:	75fb      	strb	r3, [r7, #23]

    HAL_I2C_Mem_Read(&hi2c2, LIS3_MAGN, OUT_X_L_MG, I2C_MEMADD_SIZE_8BIT, data, 6, 50);
 8003ddc:	2332      	movs	r3, #50	; 0x32
 8003dde:	9302      	str	r3, [sp, #8]
 8003de0:	2306      	movs	r3, #6
 8003de2:	9301      	str	r3, [sp, #4]
 8003de4:	f107 0308 	add.w	r3, r7, #8
 8003de8:	9300      	str	r3, [sp, #0]
 8003dea:	2301      	movs	r3, #1
 8003dec:	2228      	movs	r2, #40	; 0x28
 8003dee:	213c      	movs	r1, #60	; 0x3c
 8003df0:	4824      	ldr	r0, [pc, #144]	; (8003e84 <lis3_magn_read+0xbc>)
 8003df2:	f003 fa29 	bl	8007248 <HAL_I2C_Mem_Read>
    if (res != HAL_OK){
 8003df6:	7dfb      	ldrb	r3, [r7, #23]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d001      	beq.n	8003e00 <lis3_magn_read+0x38>
    	return res;
 8003dfc:	7dfb      	ldrb	r3, [r7, #23]
 8003dfe:	e03c      	b.n	8003e7a <lis3_magn_read+0xb2>
	}
    magn_x = ((int16_t)((data[1] << 8) | data[0]));
 8003e00:	7a7b      	ldrb	r3, [r7, #9]
 8003e02:	021b      	lsls	r3, r3, #8
 8003e04:	b21a      	sxth	r2, r3
 8003e06:	7a3b      	ldrb	r3, [r7, #8]
 8003e08:	b21b      	sxth	r3, r3
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	82bb      	strh	r3, [r7, #20]
    magn_y = ((int16_t)((data[3] << 8) | data[2]));
 8003e0e:	7afb      	ldrb	r3, [r7, #11]
 8003e10:	021b      	lsls	r3, r3, #8
 8003e12:	b21a      	sxth	r2, r3
 8003e14:	7abb      	ldrb	r3, [r7, #10]
 8003e16:	b21b      	sxth	r3, r3
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	827b      	strh	r3, [r7, #18]
    magn_z = ((int16_t)((data[5] << 8) | data[4]));
 8003e1c:	7b7b      	ldrb	r3, [r7, #13]
 8003e1e:	021b      	lsls	r3, r3, #8
 8003e20:	b21a      	sxth	r2, r3
 8003e22:	7b3b      	ldrb	r3, [r7, #12]
 8003e24:	b21b      	sxth	r3, r3
 8003e26:	4313      	orrs	r3, r2
 8003e28:	823b      	strh	r3, [r7, #16]
    mems_data->magn.magn_x = (float)(magn_x / 10.0f);
 8003e2a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003e2e:	ee07 3a90 	vmov	s15, r3
 8003e32:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003e36:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8003e3a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	edc3 7a06 	vstr	s15, [r3, #24]
    mems_data->magn.magn_y = (float)(magn_y / 10.0f);
 8003e44:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003e48:	ee07 3a90 	vmov	s15, r3
 8003e4c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003e50:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8003e54:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	edc3 7a07 	vstr	s15, [r3, #28]
    mems_data->magn.magn_z = (float)(magn_z / 10.0f);
 8003e5e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003e62:	ee07 3a90 	vmov	s15, r3
 8003e66:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003e6a:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8003e6e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	edc3 7a08 	vstr	s15, [r3, #32]
    return res;
 8003e78:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	3718      	adds	r7, #24
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}
 8003e82:	bf00      	nop
 8003e84:	200003c8 	.word	0x200003c8

08003e88 <gyro_offset_calculation>:


uint8_t gyro_offset_calculation(mems_data_t *mems_data){
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b082      	sub	sp, #8
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
	gyro_read(mems_data);
 8003e90:	6878      	ldr	r0, [r7, #4]
 8003e92:	f7ff fea5 	bl	8003be0 <gyro_read>
	gyro_sum.gyro_x += mems_data->gyro.gyro_x;
 8003e96:	4b39      	ldr	r3, [pc, #228]	; (8003f7c <gyro_offset_calculation+0xf4>)
 8003e98:	ed93 7a00 	vldr	s14, [r3]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	edd3 7a00 	vldr	s15, [r3]
 8003ea2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ea6:	4b35      	ldr	r3, [pc, #212]	; (8003f7c <gyro_offset_calculation+0xf4>)
 8003ea8:	edc3 7a00 	vstr	s15, [r3]
	gyro_sum.gyro_y += mems_data->gyro.gyro_y;
 8003eac:	4b33      	ldr	r3, [pc, #204]	; (8003f7c <gyro_offset_calculation+0xf4>)
 8003eae:	ed93 7a01 	vldr	s14, [r3, #4]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	edd3 7a01 	vldr	s15, [r3, #4]
 8003eb8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ebc:	4b2f      	ldr	r3, [pc, #188]	; (8003f7c <gyro_offset_calculation+0xf4>)
 8003ebe:	edc3 7a01 	vstr	s15, [r3, #4]
	gyro_sum.gyro_z += mems_data->gyro.gyro_z;
 8003ec2:	4b2e      	ldr	r3, [pc, #184]	; (8003f7c <gyro_offset_calculation+0xf4>)
 8003ec4:	ed93 7a02 	vldr	s14, [r3, #8]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	edd3 7a02 	vldr	s15, [r3, #8]
 8003ece:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ed2:	4b2a      	ldr	r3, [pc, #168]	; (8003f7c <gyro_offset_calculation+0xf4>)
 8003ed4:	edc3 7a02 	vstr	s15, [r3, #8]
	gyro_offset_counter++;
 8003ed8:	4b29      	ldr	r3, [pc, #164]	; (8003f80 <gyro_offset_calculation+0xf8>)
 8003eda:	881b      	ldrh	r3, [r3, #0]
 8003edc:	3301      	adds	r3, #1
 8003ede:	b29a      	uxth	r2, r3
 8003ee0:	4b27      	ldr	r3, [pc, #156]	; (8003f80 <gyro_offset_calculation+0xf8>)
 8003ee2:	801a      	strh	r2, [r3, #0]
	if (gyro_offset_counter >= 1400){
 8003ee4:	4b26      	ldr	r3, [pc, #152]	; (8003f80 <gyro_offset_calculation+0xf8>)
 8003ee6:	881b      	ldrh	r3, [r3, #0]
 8003ee8:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 8003eec:	d341      	bcc.n	8003f72 <gyro_offset_calculation+0xea>
		gyro_mean.gyro_x = gyro_sum.gyro_x / gyro_offset_counter;
 8003eee:	4b23      	ldr	r3, [pc, #140]	; (8003f7c <gyro_offset_calculation+0xf4>)
 8003ef0:	edd3 6a00 	vldr	s13, [r3]
 8003ef4:	4b22      	ldr	r3, [pc, #136]	; (8003f80 <gyro_offset_calculation+0xf8>)
 8003ef6:	881b      	ldrh	r3, [r3, #0]
 8003ef8:	ee07 3a90 	vmov	s15, r3
 8003efc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003f00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f04:	4b1f      	ldr	r3, [pc, #124]	; (8003f84 <gyro_offset_calculation+0xfc>)
 8003f06:	edc3 7a00 	vstr	s15, [r3]
		gyro_mean.gyro_y = gyro_sum.gyro_y / gyro_offset_counter;
 8003f0a:	4b1c      	ldr	r3, [pc, #112]	; (8003f7c <gyro_offset_calculation+0xf4>)
 8003f0c:	edd3 6a01 	vldr	s13, [r3, #4]
 8003f10:	4b1b      	ldr	r3, [pc, #108]	; (8003f80 <gyro_offset_calculation+0xf8>)
 8003f12:	881b      	ldrh	r3, [r3, #0]
 8003f14:	ee07 3a90 	vmov	s15, r3
 8003f18:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003f1c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f20:	4b18      	ldr	r3, [pc, #96]	; (8003f84 <gyro_offset_calculation+0xfc>)
 8003f22:	edc3 7a01 	vstr	s15, [r3, #4]
		gyro_mean.gyro_z = gyro_sum.gyro_z / gyro_offset_counter;
 8003f26:	4b15      	ldr	r3, [pc, #84]	; (8003f7c <gyro_offset_calculation+0xf4>)
 8003f28:	edd3 6a02 	vldr	s13, [r3, #8]
 8003f2c:	4b14      	ldr	r3, [pc, #80]	; (8003f80 <gyro_offset_calculation+0xf8>)
 8003f2e:	881b      	ldrh	r3, [r3, #0]
 8003f30:	ee07 3a90 	vmov	s15, r3
 8003f34:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003f38:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f3c:	4b11      	ldr	r3, [pc, #68]	; (8003f84 <gyro_offset_calculation+0xfc>)
 8003f3e:	edc3 7a02 	vstr	s15, [r3, #8]
		setGyroOffset(gyro_mean);
 8003f42:	4b10      	ldr	r3, [pc, #64]	; (8003f84 <gyro_offset_calculation+0xfc>)
 8003f44:	edd3 6a00 	vldr	s13, [r3]
 8003f48:	ed93 7a01 	vldr	s14, [r3, #4]
 8003f4c:	edd3 7a02 	vldr	s15, [r3, #8]
 8003f50:	eeb0 0a66 	vmov.f32	s0, s13
 8003f54:	eef0 0a47 	vmov.f32	s1, s14
 8003f58:	eeb0 1a67 	vmov.f32	s2, s15
 8003f5c:	f7fd f93e 	bl	80011dc <setGyroOffset>
		gyro_offset_counter = 0;
 8003f60:	4b07      	ldr	r3, [pc, #28]	; (8003f80 <gyro_offset_calculation+0xf8>)
 8003f62:	2200      	movs	r2, #0
 8003f64:	801a      	strh	r2, [r3, #0]
		Flash_Write_CalTable(GYRO_OFFSET_ADDR, &gyro_mean);
 8003f66:	4907      	ldr	r1, [pc, #28]	; (8003f84 <gyro_offset_calculation+0xfc>)
 8003f68:	4807      	ldr	r0, [pc, #28]	; (8003f88 <gyro_offset_calculation+0x100>)
 8003f6a:	f7ff f8ed 	bl	8003148 <Flash_Write_CalTable>
		return 0;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	e000      	b.n	8003f74 <gyro_offset_calculation+0xec>
	}
	return 1;
 8003f72:	2301      	movs	r3, #1
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	3708      	adds	r7, #8
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd80      	pop	{r7, pc}
 8003f7c:	20000420 	.word	0x20000420
 8003f80:	2000041c 	.word	0x2000041c
 8003f84:	2000042c 	.word	0x2000042c
 8003f88:	080fb000 	.word	0x080fb000

08003f8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003f8c:	b5b0      	push	{r4, r5, r7, lr}
 8003f8e:	b09c      	sub	sp, #112	; 0x70
 8003f90:	af00      	add	r7, sp, #0

  HAL_Init();
 8003f92:	f001 ff2a 	bl	8005dea <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8003f96:	f000 fa0b 	bl	80043b0 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003f9a:	f000 fa5b 	bl	8004454 <MX_GPIO_Init>



  MX_USART1_UART_Init();
 8003f9e:	f001 fcb7 	bl	8005910 <MX_USART1_UART_Init>

  MX_UART4_Init();
 8003fa2:	f001 fd07 	bl	80059b4 <MX_UART4_Init>

  FusionInit();
 8003fa6:	f7fd f939 	bl	800121c <FusionInit>


  if (lsm6_bus_init() != 0){
 8003faa:	f7ff fd15 	bl	80039d8 <lsm6_bus_init>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d010      	beq.n	8003fd6 <main+0x4a>
	  uint8_t Test[] = "Failed to init I2C bus\r\n";
 8003fb4:	4b65      	ldr	r3, [pc, #404]	; (800414c <main+0x1c0>)
 8003fb6:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8003fba:	461d      	mov	r5, r3
 8003fbc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003fbe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003fc0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003fc4:	c403      	stmia	r4!, {r0, r1}
 8003fc6:	7022      	strb	r2, [r4, #0]
	  uart_write_debug(Test, 10);
 8003fc8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003fcc:	210a      	movs	r1, #10
 8003fce:	4618      	mov	r0, r3
 8003fd0:	f001 fd7a 	bl	8005ac8 <uart_write_debug>
 8003fd4:	e042      	b.n	800405c <main+0xd0>
  }
  else{
		  if (lsm6_acc_init() != HAL_OK){
 8003fd6:	f7ff fd81 	bl	8003adc <lsm6_acc_init>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d00f      	beq.n	8004000 <main+0x74>
			  uint8_t Test[] = "Failed to init LSM6 acc\r\n";
 8003fe0:	4b5b      	ldr	r3, [pc, #364]	; (8004150 <main+0x1c4>)
 8003fe2:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8003fe6:	461d      	mov	r5, r3
 8003fe8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003fea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003fec:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003ff0:	c403      	stmia	r4!, {r0, r1}
 8003ff2:	8022      	strh	r2, [r4, #0]
			  uart_write_debug(Test, 10);
 8003ff4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003ff8:	210a      	movs	r1, #10
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f001 fd64 	bl	8005ac8 <uart_write_debug>
		  }
		  if (gyro_init() != HAL_OK){
 8004000:	f7ff fd2a 	bl	8003a58 <gyro_init>
 8004004:	4603      	mov	r3, r0
 8004006:	2b00      	cmp	r3, #0
 8004008:	d012      	beq.n	8004030 <main+0xa4>
			  uint8_t Test[] = "Failed to init LSM6 gyro\r\n";
 800400a:	4b52      	ldr	r3, [pc, #328]	; (8004154 <main+0x1c8>)
 800400c:	f107 041c 	add.w	r4, r7, #28
 8004010:	461d      	mov	r5, r3
 8004012:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004014:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004016:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800401a:	c403      	stmia	r4!, {r0, r1}
 800401c:	8022      	strh	r2, [r4, #0]
 800401e:	3402      	adds	r4, #2
 8004020:	0c13      	lsrs	r3, r2, #16
 8004022:	7023      	strb	r3, [r4, #0]
			  uart_write_debug(Test, 10);
 8004024:	f107 031c 	add.w	r3, r7, #28
 8004028:	210a      	movs	r1, #10
 800402a:	4618      	mov	r0, r3
 800402c:	f001 fd4c 	bl	8005ac8 <uart_write_debug>
		  }
		  if (magn_init() != HAL_OK){
 8004030:	f7ff fd7a 	bl	8003b28 <magn_init>
 8004034:	4603      	mov	r3, r0
 8004036:	2b00      	cmp	r3, #0
 8004038:	d010      	beq.n	800405c <main+0xd0>
			  uint8_t Test[] = "Failed to init LIS3 magn\r\n";
 800403a:	4b47      	ldr	r3, [pc, #284]	; (8004158 <main+0x1cc>)
 800403c:	463c      	mov	r4, r7
 800403e:	461d      	mov	r5, r3
 8004040:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004042:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004044:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004048:	c403      	stmia	r4!, {r0, r1}
 800404a:	8022      	strh	r2, [r4, #0]
 800404c:	3402      	adds	r4, #2
 800404e:	0c13      	lsrs	r3, r2, #16
 8004050:	7023      	strb	r3, [r4, #0]
			  uart_write_debug(Test, 10);
 8004052:	463b      	mov	r3, r7
 8004054:	210a      	movs	r1, #10
 8004056:	4618      	mov	r0, r3
 8004058:	f001 fd36 	bl	8005ac8 <uart_write_debug>
		  }
  }
  if (ublox_i2c_bus_init() != HAL_OK){
 800405c:	f7ff f962 	bl	8003324 <ublox_i2c_bus_init>
 8004060:	4603      	mov	r3, r0
 8004062:	2b00      	cmp	r3, #0
 8004064:	d004      	beq.n	8004070 <main+0xe4>
	  uart_write_debug("Failed to Initialize ublox bus\r\n", 10);
 8004066:	210a      	movs	r1, #10
 8004068:	483c      	ldr	r0, [pc, #240]	; (800415c <main+0x1d0>)
 800406a:	f001 fd2d 	bl	8005ac8 <uart_write_debug>
 800406e:	e011      	b.n	8004094 <main+0x108>
  }
  else{
	  HAL_StatusTypeDef res;
	  res = ubloxInit();
 8004070:	f7ff fa02 	bl	8003478 <ubloxInit>
 8004074:	4603      	mov	r3, r0
 8004076:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	  if (res != HAL_OK){
 800407a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800407e:	2b00      	cmp	r3, #0
 8004080:	d004      	beq.n	800408c <main+0x100>
		  uart_write_debug("Failed to Initialize UBLOX\r\n", 10);
 8004082:	210a      	movs	r1, #10
 8004084:	4836      	ldr	r0, [pc, #216]	; (8004160 <main+0x1d4>)
 8004086:	f001 fd1f 	bl	8005ac8 <uart_write_debug>
 800408a:	e003      	b.n	8004094 <main+0x108>
	  }
	  else{
		  uart_write_debug("Ublox Initialized!\r\n", 10);
 800408c:	210a      	movs	r1, #10
 800408e:	4835      	ldr	r0, [pc, #212]	; (8004164 <main+0x1d8>)
 8004090:	f001 fd1a 	bl	8005ac8 <uart_write_debug>
	  }
  }

  /* Init scheduler */
  osKernelInitialize();
 8004094:	f007 fe40 	bl	800bd18 <osKernelInitialize>
  /* USER CODE BEGIN RTOS_MUTEX */
  debugUartMutex = osMutexNew(&uartMutex_attributes);
 8004098:	4833      	ldr	r0, [pc, #204]	; (8004168 <main+0x1dc>)
 800409a:	f008 f875 	bl	800c188 <osMutexNew>
 800409e:	4603      	mov	r3, r0
 80040a0:	4a32      	ldr	r2, [pc, #200]	; (800416c <main+0x1e0>)
 80040a2:	6013      	str	r3, [r2, #0]
  i2cMutex = osMutexNew(&i2cMutex_attributes);
 80040a4:	4832      	ldr	r0, [pc, #200]	; (8004170 <main+0x1e4>)
 80040a6:	f008 f86f 	bl	800c188 <osMutexNew>
 80040aa:	4603      	mov	r3, r0
 80040ac:	4a31      	ldr	r2, [pc, #196]	; (8004174 <main+0x1e8>)
 80040ae:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_MUTEX */
  memsQueueHandle = osMessageQueueNew (8, sizeof(mems_data_t), &memsQueue_attributes);
 80040b0:	4a31      	ldr	r2, [pc, #196]	; (8004178 <main+0x1ec>)
 80040b2:	2128      	movs	r1, #40	; 0x28
 80040b4:	2008      	movs	r0, #8
 80040b6:	f008 f975 	bl	800c3a4 <osMessageQueueNew>
 80040ba:	4603      	mov	r3, r0
 80040bc:	4a2f      	ldr	r2, [pc, #188]	; (800417c <main+0x1f0>)
 80040be:	6013      	str	r3, [r2, #0]
  outputQueueHandle = osMessageQueueNew (4, sizeof(FusionEuler), &outputQueue_attributes);
 80040c0:	4a2f      	ldr	r2, [pc, #188]	; (8004180 <main+0x1f4>)
 80040c2:	210c      	movs	r1, #12
 80040c4:	2004      	movs	r0, #4
 80040c6:	f008 f96d 	bl	800c3a4 <osMessageQueueNew>
 80040ca:	4603      	mov	r3, r0
 80040cc:	4a2d      	ldr	r2, [pc, #180]	; (8004184 <main+0x1f8>)
 80040ce:	6013      	str	r3, [r2, #0]
  messageQueueHandle = osMessageQueueNew (8, RB_SIZE, &messageQueue_attributes);
 80040d0:	4a2d      	ldr	r2, [pc, #180]	; (8004188 <main+0x1fc>)
 80040d2:	2128      	movs	r1, #40	; 0x28
 80040d4:	2008      	movs	r0, #8
 80040d6:	f008 f965 	bl	800c3a4 <osMessageQueueNew>
 80040da:	4603      	mov	r3, r0
 80040dc:	4a2b      	ldr	r2, [pc, #172]	; (800418c <main+0x200>)
 80040de:	6013      	str	r3, [r2, #0]
  /* EVENT FLAG FOR ACK RECEIVE */
  ack_rcvd = osEventFlagsNew(NULL);
 80040e0:	2000      	movs	r0, #0
 80040e2:	f007 ff67 	bl	800bfb4 <osEventFlagsNew>
 80040e6:	4603      	mov	r3, r0
 80040e8:	4a29      	ldr	r2, [pc, #164]	; (8004190 <main+0x204>)
 80040ea:	6013      	str	r3, [r2, #0]
  //							//

  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80040ec:	4a29      	ldr	r2, [pc, #164]	; (8004194 <main+0x208>)
 80040ee:	2100      	movs	r1, #0
 80040f0:	4829      	ldr	r0, [pc, #164]	; (8004198 <main+0x20c>)
 80040f2:	f007 fe70 	bl	800bdd6 <osThreadNew>
 80040f6:	4603      	mov	r3, r0
 80040f8:	4a28      	ldr	r2, [pc, #160]	; (800419c <main+0x210>)
 80040fa:	6013      	str	r3, [r2, #0]

  readMemsTaskHandle = osThreadNew(readMemsTask, NULL, &readMemsTask_attributes);
 80040fc:	4a28      	ldr	r2, [pc, #160]	; (80041a0 <main+0x214>)
 80040fe:	2100      	movs	r1, #0
 8004100:	4828      	ldr	r0, [pc, #160]	; (80041a4 <main+0x218>)
 8004102:	f007 fe68 	bl	800bdd6 <osThreadNew>
 8004106:	4603      	mov	r3, r0
 8004108:	4a27      	ldr	r2, [pc, #156]	; (80041a8 <main+0x21c>)
 800410a:	6013      	str	r3, [r2, #0]

//  calcHeadingTaskHandle = osThreadNew(calcHeadingTask, NULL, &calcHeadingTask_attributes);

  printOutTaskHandle = osThreadNew(printOutTask, NULL, &printOutTask_attributes);
 800410c:	4a27      	ldr	r2, [pc, #156]	; (80041ac <main+0x220>)
 800410e:	2100      	movs	r1, #0
 8004110:	4827      	ldr	r0, [pc, #156]	; (80041b0 <main+0x224>)
 8004112:	f007 fe60 	bl	800bdd6 <osThreadNew>
 8004116:	4603      	mov	r3, r0
 8004118:	4a26      	ldr	r2, [pc, #152]	; (80041b4 <main+0x228>)
 800411a:	6013      	str	r3, [r2, #0]

//  getCoorsTaskHandle = osThreadNew(getCoorsTask, NULL, &getCoorsTask_attributes);

//  sendMessageTaskHandle = osThreadNew(sendMessageTask, NULL, &sendMessageTaskHandle_attributes);

  readMessageTaskHandle = osThreadNew(readMessageTask, NULL, &readMessageTaskHandle_attributes);
 800411c:	4a26      	ldr	r2, [pc, #152]	; (80041b8 <main+0x22c>)
 800411e:	2100      	movs	r1, #0
 8004120:	4826      	ldr	r0, [pc, #152]	; (80041bc <main+0x230>)
 8004122:	f007 fe58 	bl	800bdd6 <osThreadNew>
 8004126:	4603      	mov	r3, r0
 8004128:	4a25      	ldr	r2, [pc, #148]	; (80041c0 <main+0x234>)
 800412a:	6013      	str	r3, [r2, #0]

  gyroCalibrationTaskHandle = osThreadNew(gyroCalibrationTask, NULL, &gyroCalibrationTaskHandle_attributes);
 800412c:	4a25      	ldr	r2, [pc, #148]	; (80041c4 <main+0x238>)
 800412e:	2100      	movs	r1, #0
 8004130:	4825      	ldr	r0, [pc, #148]	; (80041c8 <main+0x23c>)
 8004132:	f007 fe50 	bl	800bdd6 <osThreadNew>
 8004136:	4603      	mov	r3, r0
 8004138:	4a24      	ldr	r2, [pc, #144]	; (80041cc <main+0x240>)
 800413a:	6013      	str	r3, [r2, #0]

  /*Suspend the gyro-calibration task*/
  osThreadSuspend(gyroCalibrationTaskHandle);
 800413c:	4b23      	ldr	r3, [pc, #140]	; (80041cc <main+0x240>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4618      	mov	r0, r3
 8004142:	f007 feda 	bl	800befa <osThreadSuspend>

  /* Start scheduler */
  osKernelStart();
 8004146:	f007 fe0b 	bl	800bd60 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800414a:	e7fe      	b.n	800414a <main+0x1be>
 800414c:	080143a8 	.word	0x080143a8
 8004150:	080143c4 	.word	0x080143c4
 8004154:	080143e0 	.word	0x080143e0
 8004158:	080143fc 	.word	0x080143fc
 800415c:	0801434c 	.word	0x0801434c
 8004160:	08014370 	.word	0x08014370
 8004164:	08014390 	.word	0x08014390
 8004168:	08014564 	.word	0x08014564
 800416c:	2000044c 	.word	0x2000044c
 8004170:	08014574 	.word	0x08014574
 8004174:	20000450 	.word	0x20000450
 8004178:	08014584 	.word	0x08014584
 800417c:	20000454 	.word	0x20000454
 8004180:	0801459c 	.word	0x0801459c
 8004184:	20000458 	.word	0x20000458
 8004188:	080145b4 	.word	0x080145b4
 800418c:	2000045c 	.word	0x2000045c
 8004190:	20000460 	.word	0x20000460
 8004194:	080144b0 	.word	0x080144b0
 8004198:	080041d1 	.word	0x080041d1
 800419c:	20000438 	.word	0x20000438
 80041a0:	080144f8 	.word	0x080144f8
 80041a4:	080041f9 	.word	0x080041f9
 80041a8:	2000043c 	.word	0x2000043c
 80041ac:	080144d4 	.word	0x080144d4
 80041b0:	08004239 	.word	0x08004239
 80041b4:	20000440 	.word	0x20000440
 80041b8:	0801451c 	.word	0x0801451c
 80041bc:	080042c5 	.word	0x080042c5
 80041c0:	20000444 	.word	0x20000444
 80041c4:	08014540 	.word	0x08014540
 80041c8:	08004335 	.word	0x08004335
 80041cc:	20000448 	.word	0x20000448

080041d0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b082      	sub	sp, #8
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOB,LED2_Pin);
 80041d8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80041dc:	4805      	ldr	r0, [pc, #20]	; (80041f4 <StartDefaultTask+0x24>)
 80041de:	f002 fc69 	bl	8006ab4 <HAL_GPIO_TogglePin>
	uart_receive_it(UART_NYX);
 80041e2:	2001      	movs	r0, #1
 80041e4:	f001 fc48 	bl	8005a78 <uart_receive_it>
    osDelay(500);
 80041e8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80041ec:	f007 fec7 	bl	800bf7e <osDelay>
  {
 80041f0:	e7f2      	b.n	80041d8 <StartDefaultTask+0x8>
 80041f2:	bf00      	nop
 80041f4:	48000400 	.word	0x48000400

080041f8 <readMemsTask>:
		osDelay(30);
	}
}

void readMemsTask(void *argument)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b090      	sub	sp, #64	; 0x40
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
	mems_data_t mems_data;
	FusionEuler euler;
	for(;;)
	{
//		osMutexAcquire(i2cMutex, osWaitForever);
		tick_gyro(&mems_data);
 8004200:	f107 0318 	add.w	r3, r7, #24
 8004204:	4618      	mov	r0, r3
 8004206:	f7ff fbd5 	bl	80039b4 <tick_gyro>
		FusionCalcAngle(&mems_data, &euler);
 800420a:	f107 020c 	add.w	r2, r7, #12
 800420e:	f107 0318 	add.w	r3, r7, #24
 8004212:	4611      	mov	r1, r2
 8004214:	4618      	mov	r0, r3
 8004216:	f7fd f83f 	bl	8001298 <FusionCalcAngle>
//		osMutexRelease(i2cMutex);
		osMessageQueuePut(outputQueueHandle, &euler, 0U, 0U);
 800421a:	4b06      	ldr	r3, [pc, #24]	; (8004234 <readMemsTask+0x3c>)
 800421c:	6818      	ldr	r0, [r3, #0]
 800421e:	f107 010c 	add.w	r1, r7, #12
 8004222:	2300      	movs	r3, #0
 8004224:	2200      	movs	r2, #0
 8004226:	f008 f931 	bl	800c48c <osMessageQueuePut>
		osDelay(MEMS_SR);
 800422a:	200a      	movs	r0, #10
 800422c:	f007 fea7 	bl	800bf7e <osDelay>
	{
 8004230:	e7e6      	b.n	8004200 <readMemsTask+0x8>
 8004232:	bf00      	nop
 8004234:	20000458 	.word	0x20000458

08004238 <printOutTask>:
	}
}


void printOutTask(void *argument)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b094      	sub	sp, #80	; 0x50
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
	mems_data_t mems_data;
	FusionEuler euler;
	uint8_t text[10] = "";
 8004240:	2300      	movs	r3, #0
 8004242:	60fb      	str	r3, [r7, #12]
 8004244:	f107 0310 	add.w	r3, r7, #16
 8004248:	2200      	movs	r2, #0
 800424a:	601a      	str	r2, [r3, #0]
 800424c:	809a      	strh	r2, [r3, #4]
	osStatus_t status;

	for(;;)
	{
		status = osMessageQueueGet(outputQueueHandle, &euler, NULL, 5U);   // wait for message
 800424e:	4b1a      	ldr	r3, [pc, #104]	; (80042b8 <printOutTask+0x80>)
 8004250:	6818      	ldr	r0, [r3, #0]
 8004252:	f107 0118 	add.w	r1, r7, #24
 8004256:	2305      	movs	r3, #5
 8004258:	2200      	movs	r2, #0
 800425a:	f008 f977 	bl	800c54c <osMessageQueueGet>
 800425e:	64f8      	str	r0, [r7, #76]	; 0x4c
		if (status == osOK) {
 8004260:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004262:	2b00      	cmp	r3, #0
 8004264:	d123      	bne.n	80042ae <printOutTask+0x76>
			sprintf(text, "\n%f\r", euler.angle.yaw);
 8004266:	6a3b      	ldr	r3, [r7, #32]
 8004268:	4618      	mov	r0, r3
 800426a:	f7fc f985 	bl	8000578 <__aeabi_f2d>
 800426e:	4602      	mov	r2, r0
 8004270:	460b      	mov	r3, r1
 8004272:	f107 000c 	add.w	r0, r7, #12
 8004276:	4911      	ldr	r1, [pc, #68]	; (80042bc <printOutTask+0x84>)
 8004278:	f00c fb7c 	bl	8010974 <siprintf>
			osMutexAcquire(debugUartMutex, osWaitForever);
 800427c:	4b10      	ldr	r3, [pc, #64]	; (80042c0 <printOutTask+0x88>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f04f 31ff 	mov.w	r1, #4294967295
 8004284:	4618      	mov	r0, r3
 8004286:	f008 f805 	bl	800c294 <osMutexAcquire>
			uart_write_debug(text,50);
 800428a:	f107 030c 	add.w	r3, r7, #12
 800428e:	2132      	movs	r1, #50	; 0x32
 8004290:	4618      	mov	r0, r3
 8004292:	f001 fc19 	bl	8005ac8 <uart_write_debug>
			osMutexRelease(debugUartMutex);
 8004296:	4b0a      	ldr	r3, [pc, #40]	; (80042c0 <printOutTask+0x88>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4618      	mov	r0, r3
 800429c:	f008 f845 	bl	800c32a <osMutexRelease>
			memset(text,0,sizeof(text));
 80042a0:	f107 030c 	add.w	r3, r7, #12
 80042a4:	220a      	movs	r2, #10
 80042a6:	2100      	movs	r1, #0
 80042a8:	4618      	mov	r0, r3
 80042aa:	f00c fbc6 	bl	8010a3a <memset>
		}
		osDelay(70);
 80042ae:	2046      	movs	r0, #70	; 0x46
 80042b0:	f007 fe65 	bl	800bf7e <osDelay>
		status = osMessageQueueGet(outputQueueHandle, &euler, NULL, 5U);   // wait for message
 80042b4:	e7cb      	b.n	800424e <printOutTask+0x16>
 80042b6:	bf00      	nop
 80042b8:	20000458 	.word	0x20000458
 80042bc:	08014418 	.word	0x08014418
 80042c0:	2000044c 	.word	0x2000044c

080042c4 <readMessageTask>:
//		osMutexRelease(debugUartMutex);
		osDelay(1700);
	}
}

void readMessageTask(void *argument){
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b08e      	sub	sp, #56	; 0x38
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
	osStatus_t status;
	uint32_t ack_flag;
	uint8_t message_buffer[RB_SIZE] = {0};
 80042cc:	2300      	movs	r3, #0
 80042ce:	60bb      	str	r3, [r7, #8]
 80042d0:	f107 030c 	add.w	r3, r7, #12
 80042d4:	2224      	movs	r2, #36	; 0x24
 80042d6:	2100      	movs	r1, #0
 80042d8:	4618      	mov	r0, r3
 80042da:	f00c fbae 	bl	8010a3a <memset>
	for(;;){
		status = osMessageQueueGet(messageQueueHandle, message_buffer, NULL, osWaitForever);   // wait for message
 80042de:	4b13      	ldr	r3, [pc, #76]	; (800432c <readMessageTask+0x68>)
 80042e0:	6818      	ldr	r0, [r3, #0]
 80042e2:	f107 0108 	add.w	r1, r7, #8
 80042e6:	f04f 33ff 	mov.w	r3, #4294967295
 80042ea:	2200      	movs	r2, #0
 80042ec:	f008 f92e 	bl	800c54c <osMessageQueueGet>
 80042f0:	6378      	str	r0, [r7, #52]	; 0x34
		if (status == osOK) {
 80042f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d114      	bne.n	8004322 <readMessageTask+0x5e>
			tick_Handler(message_buffer);
 80042f8:	f107 0308 	add.w	r3, r7, #8
 80042fc:	4618      	mov	r0, r3
 80042fe:	f000 fa75 	bl	80047ec <tick_Handler>
			ack_flag = osEventFlagsWait(ack_rcvd, ACK_FLAG, osFlagsWaitAny, 150);
 8004302:	4b0b      	ldr	r3, [pc, #44]	; (8004330 <readMessageTask+0x6c>)
 8004304:	6818      	ldr	r0, [r3, #0]
 8004306:	2396      	movs	r3, #150	; 0x96
 8004308:	2200      	movs	r2, #0
 800430a:	2101      	movs	r1, #1
 800430c:	f007 fed6 	bl	800c0bc <osEventFlagsWait>
 8004310:	6338      	str	r0, [r7, #48]	; 0x30
			if (ack_flag != 1){
 8004312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004314:	2b01      	cmp	r3, #1
 8004316:	d004      	beq.n	8004322 <readMessageTask+0x5e>
				tick_Handler(message_buffer);
 8004318:	f107 0308 	add.w	r3, r7, #8
 800431c:	4618      	mov	r0, r3
 800431e:	f000 fa65 	bl	80047ec <tick_Handler>
			}
		}
		osDelay(200);
 8004322:	20c8      	movs	r0, #200	; 0xc8
 8004324:	f007 fe2b 	bl	800bf7e <osDelay>
		status = osMessageQueueGet(messageQueueHandle, message_buffer, NULL, osWaitForever);   // wait for message
 8004328:	e7d9      	b.n	80042de <readMessageTask+0x1a>
 800432a:	bf00      	nop
 800432c:	2000045c 	.word	0x2000045c
 8004330:	20000460 	.word	0x20000460

08004334 <gyroCalibrationTask>:
	}
}

void gyroCalibrationTask(void *argument){
 8004334:	b580      	push	{r7, lr}
 8004336:	b08c      	sub	sp, #48	; 0x30
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
	mems_data_t mems_data;
	osThreadSuspend(readMemsTaskHandle);
 800433c:	4b17      	ldr	r3, [pc, #92]	; (800439c <gyroCalibrationTask+0x68>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4618      	mov	r0, r3
 8004342:	f007 fdda 	bl	800befa <osThreadSuspend>
	osThreadSuspend(printOutTaskHandle);
 8004346:	4b16      	ldr	r3, [pc, #88]	; (80043a0 <gyroCalibrationTask+0x6c>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4618      	mov	r0, r3
 800434c:	f007 fdd5 	bl	800befa <osThreadSuspend>
	osDelay(100);
 8004350:	2064      	movs	r0, #100	; 0x64
 8004352:	f007 fe14 	bl	800bf7e <osDelay>
	uart_write_debug("Gyro Calibration: Hold the device still\r\n", 50);
 8004356:	2132      	movs	r1, #50	; 0x32
 8004358:	4812      	ldr	r0, [pc, #72]	; (80043a4 <gyroCalibrationTask+0x70>)
 800435a:	f001 fbb5 	bl	8005ac8 <uart_write_debug>
	for(;;){
		if (gyro_offset_calculation(&mems_data) == 0){
 800435e:	f107 0308 	add.w	r3, r7, #8
 8004362:	4618      	mov	r0, r3
 8004364:	f7ff fd90 	bl	8003e88 <gyro_offset_calculation>
 8004368:	4603      	mov	r3, r0
 800436a:	2b00      	cmp	r3, #0
 800436c:	d112      	bne.n	8004394 <gyroCalibrationTask+0x60>
			uart_write_debug("Gyro Calibration: Finished!\r\n", 50);
 800436e:	2132      	movs	r1, #50	; 0x32
 8004370:	480d      	ldr	r0, [pc, #52]	; (80043a8 <gyroCalibrationTask+0x74>)
 8004372:	f001 fba9 	bl	8005ac8 <uart_write_debug>
			osThreadResume(readMemsTaskHandle);
 8004376:	4b09      	ldr	r3, [pc, #36]	; (800439c <gyroCalibrationTask+0x68>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4618      	mov	r0, r3
 800437c:	f007 fdde 	bl	800bf3c <osThreadResume>
			osThreadResume(printOutTaskHandle);
 8004380:	4b07      	ldr	r3, [pc, #28]	; (80043a0 <gyroCalibrationTask+0x6c>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4618      	mov	r0, r3
 8004386:	f007 fdd9 	bl	800bf3c <osThreadResume>
			osThreadSuspend(gyroCalibrationTaskHandle);
 800438a:	4b08      	ldr	r3, [pc, #32]	; (80043ac <gyroCalibrationTask+0x78>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4618      	mov	r0, r3
 8004390:	f007 fdb3 	bl	800befa <osThreadSuspend>
		}
		osDelay(5);
 8004394:	2005      	movs	r0, #5
 8004396:	f007 fdf2 	bl	800bf7e <osDelay>
		if (gyro_offset_calculation(&mems_data) == 0){
 800439a:	e7e0      	b.n	800435e <gyroCalibrationTask+0x2a>
 800439c:	2000043c 	.word	0x2000043c
 80043a0:	20000440 	.word	0x20000440
 80043a4:	08014420 	.word	0x08014420
 80043a8:	0801444c 	.word	0x0801444c
 80043ac:	20000448 	.word	0x20000448

080043b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b096      	sub	sp, #88	; 0x58
 80043b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80043b6:	f107 0314 	add.w	r3, r7, #20
 80043ba:	2244      	movs	r2, #68	; 0x44
 80043bc:	2100      	movs	r1, #0
 80043be:	4618      	mov	r0, r3
 80043c0:	f00c fb3b 	bl	8010a3a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80043c4:	463b      	mov	r3, r7
 80043c6:	2200      	movs	r2, #0
 80043c8:	601a      	str	r2, [r3, #0]
 80043ca:	605a      	str	r2, [r3, #4]
 80043cc:	609a      	str	r2, [r3, #8]
 80043ce:	60da      	str	r2, [r3, #12]
 80043d0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 80043d2:	2000      	movs	r0, #0
 80043d4:	f003 fc44 	bl	8007c60 <HAL_PWREx_ControlVoltageScaling>
 80043d8:	4603      	mov	r3, r0
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d001      	beq.n	80043e2 <SystemClock_Config+0x32>
  {
    Error_Handler();
 80043de:	f000 f9f5 	bl	80047cc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80043e2:	2310      	movs	r3, #16
 80043e4:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80043e6:	2301      	movs	r3, #1
 80043e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80043ea:	2300      	movs	r3, #0
 80043ec:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80043ee:	2360      	movs	r3, #96	; 0x60
 80043f0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80043f2:	2302      	movs	r3, #2
 80043f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80043f6:	2301      	movs	r3, #1
 80043f8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80043fa:	2301      	movs	r3, #1
 80043fc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 80043fe:	233c      	movs	r3, #60	; 0x3c
 8004400:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004402:	2302      	movs	r3, #2
 8004404:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8004406:	2302      	movs	r3, #2
 8004408:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800440a:	2302      	movs	r3, #2
 800440c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800440e:	f107 0314 	add.w	r3, r7, #20
 8004412:	4618      	mov	r0, r3
 8004414:	f003 fcc8 	bl	8007da8 <HAL_RCC_OscConfig>
 8004418:	4603      	mov	r3, r0
 800441a:	2b00      	cmp	r3, #0
 800441c:	d001      	beq.n	8004422 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800441e:	f000 f9d5 	bl	80047cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004422:	230f      	movs	r3, #15
 8004424:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004426:	2303      	movs	r3, #3
 8004428:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800442a:	2300      	movs	r3, #0
 800442c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800442e:	2300      	movs	r3, #0
 8004430:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004432:	2300      	movs	r3, #0
 8004434:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8004436:	463b      	mov	r3, r7
 8004438:	2105      	movs	r1, #5
 800443a:	4618      	mov	r0, r3
 800443c:	f004 f8ce 	bl	80085dc <HAL_RCC_ClockConfig>
 8004440:	4603      	mov	r3, r0
 8004442:	2b00      	cmp	r3, #0
 8004444:	d001      	beq.n	800444a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8004446:	f000 f9c1 	bl	80047cc <Error_Handler>
  }
}
 800444a:	bf00      	nop
 800444c:	3758      	adds	r7, #88	; 0x58
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}
	...

08004454 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b08a      	sub	sp, #40	; 0x28
 8004458:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800445a:	f107 0314 	add.w	r3, r7, #20
 800445e:	2200      	movs	r2, #0
 8004460:	601a      	str	r2, [r3, #0]
 8004462:	605a      	str	r2, [r3, #4]
 8004464:	609a      	str	r2, [r3, #8]
 8004466:	60da      	str	r2, [r3, #12]
 8004468:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800446a:	4bbb      	ldr	r3, [pc, #748]	; (8004758 <MX_GPIO_Init+0x304>)
 800446c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800446e:	4aba      	ldr	r2, [pc, #744]	; (8004758 <MX_GPIO_Init+0x304>)
 8004470:	f043 0310 	orr.w	r3, r3, #16
 8004474:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004476:	4bb8      	ldr	r3, [pc, #736]	; (8004758 <MX_GPIO_Init+0x304>)
 8004478:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800447a:	f003 0310 	and.w	r3, r3, #16
 800447e:	613b      	str	r3, [r7, #16]
 8004480:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004482:	4bb5      	ldr	r3, [pc, #724]	; (8004758 <MX_GPIO_Init+0x304>)
 8004484:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004486:	4ab4      	ldr	r2, [pc, #720]	; (8004758 <MX_GPIO_Init+0x304>)
 8004488:	f043 0304 	orr.w	r3, r3, #4
 800448c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800448e:	4bb2      	ldr	r3, [pc, #712]	; (8004758 <MX_GPIO_Init+0x304>)
 8004490:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004492:	f003 0304 	and.w	r3, r3, #4
 8004496:	60fb      	str	r3, [r7, #12]
 8004498:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800449a:	4baf      	ldr	r3, [pc, #700]	; (8004758 <MX_GPIO_Init+0x304>)
 800449c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800449e:	4aae      	ldr	r2, [pc, #696]	; (8004758 <MX_GPIO_Init+0x304>)
 80044a0:	f043 0301 	orr.w	r3, r3, #1
 80044a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80044a6:	4bac      	ldr	r3, [pc, #688]	; (8004758 <MX_GPIO_Init+0x304>)
 80044a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044aa:	f003 0301 	and.w	r3, r3, #1
 80044ae:	60bb      	str	r3, [r7, #8]
 80044b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80044b2:	4ba9      	ldr	r3, [pc, #676]	; (8004758 <MX_GPIO_Init+0x304>)
 80044b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044b6:	4aa8      	ldr	r2, [pc, #672]	; (8004758 <MX_GPIO_Init+0x304>)
 80044b8:	f043 0302 	orr.w	r3, r3, #2
 80044bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80044be:	4ba6      	ldr	r3, [pc, #664]	; (8004758 <MX_GPIO_Init+0x304>)
 80044c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044c2:	f003 0302 	and.w	r3, r3, #2
 80044c6:	607b      	str	r3, [r7, #4]
 80044c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80044ca:	4ba3      	ldr	r3, [pc, #652]	; (8004758 <MX_GPIO_Init+0x304>)
 80044cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044ce:	4aa2      	ldr	r2, [pc, #648]	; (8004758 <MX_GPIO_Init+0x304>)
 80044d0:	f043 0308 	orr.w	r3, r3, #8
 80044d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80044d6:	4ba0      	ldr	r3, [pc, #640]	; (8004758 <MX_GPIO_Init+0x304>)
 80044d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044da:	f003 0308 	and.w	r3, r3, #8
 80044de:	603b      	str	r3, [r7, #0]
 80044e0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ST25DV04K_RF_DISABLE_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin, GPIO_PIN_RESET);
 80044e2:	2200      	movs	r2, #0
 80044e4:	f240 1105 	movw	r1, #261	; 0x105
 80044e8:	489c      	ldr	r0, [pc, #624]	; (800475c <MX_GPIO_Init+0x308>)
 80044ea:	f002 facb 	bl	8006a84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|ARD_D4_Pin|ARD_D7_Pin|SPBTLE_RF_RST_Pin
 80044ee:	2200      	movs	r2, #0
 80044f0:	f248 111c 	movw	r1, #33052	; 0x811c
 80044f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80044f8:	f002 fac4 	bl	8006a84 <HAL_GPIO_WritePin>
                          |ARD_D9_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 80044fc:	2200      	movs	r2, #0
 80044fe:	f24f 0134 	movw	r1, #61492	; 0xf034
 8004502:	4897      	ldr	r0, [pc, #604]	; (8004760 <MX_GPIO_Init+0x30c>)
 8004504:	f002 fabe 	bl	8006a84 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|PMOD_SPI2_SCK_Pin|STSAFE_A110_RESET_Pin, GPIO_PIN_RESET);
 8004508:	2200      	movs	r2, #0
 800450a:	f242 0183 	movw	r1, #8323	; 0x2083
 800450e:	4895      	ldr	r0, [pc, #596]	; (8004764 <MX_GPIO_Init+0x310>)
 8004510:	f002 fab8 	bl	8006a84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8004514:	2200      	movs	r2, #0
 8004516:	f44f 7110 	mov.w	r1, #576	; 0x240
 800451a:	4893      	ldr	r0, [pc, #588]	; (8004768 <MX_GPIO_Init+0x314>)
 800451c:	f002 fab2 	bl	8006a84 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ST25DV04K_RF_DISABLE_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ST25DV04K_RF_DISABLE_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8004520:	f240 1305 	movw	r3, #261	; 0x105
 8004524:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004526:	2301      	movs	r3, #1
 8004528:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800452a:	2300      	movs	r3, #0
 800452c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800452e:	2300      	movs	r3, #0
 8004530:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004532:	f107 0314 	add.w	r3, r7, #20
 8004536:	4619      	mov	r1, r3
 8004538:	4888      	ldr	r0, [pc, #544]	; (800475c <MX_GPIO_Init+0x308>)
 800453a:	f002 f911 	bl	8006760 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin ST25DV04K_GPO_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin
                           ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|ST25DV04K_GPO_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin
 800453e:	237a      	movs	r3, #122	; 0x7a
 8004540:	617b      	str	r3, [r7, #20]
                          |ISM43362_DRDY_EXTI1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004542:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8004546:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004548:	2300      	movs	r3, #0
 800454a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800454c:	f107 0314 	add.w	r3, r7, #20
 8004550:	4619      	mov	r1, r3
 8004552:	4882      	ldr	r0, [pc, #520]	; (800475c <MX_GPIO_Init+0x308>)
 8004554:	f002 f904 	bl	8006760 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_EXTI13_Pin VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin|VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8004558:	f44f 5306 	mov.w	r3, #8576	; 0x2180
 800455c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800455e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8004562:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004564:	2300      	movs	r3, #0
 8004566:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004568:	f107 0314 	add.w	r3, r7, #20
 800456c:	4619      	mov	r1, r3
 800456e:	487e      	ldr	r0, [pc, #504]	; (8004768 <MX_GPIO_Init+0x314>)
 8004570:	f002 f8f6 	bl	8006760 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8004574:	233f      	movs	r3, #63	; 0x3f
 8004576:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8004578:	230b      	movs	r3, #11
 800457a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800457c:	2300      	movs	r3, #0
 800457e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004580:	f107 0314 	add.w	r3, r7, #20
 8004584:	4619      	mov	r1, r3
 8004586:	4878      	ldr	r0, [pc, #480]	; (8004768 <MX_GPIO_Init+0x314>)
 8004588:	f002 f8ea 	bl	8006760 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 800458c:	2303      	movs	r3, #3
 800458e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004590:	2302      	movs	r3, #2
 8004592:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004594:	2300      	movs	r3, #0
 8004596:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004598:	2303      	movs	r3, #3
 800459a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800459c:	2308      	movs	r3, #8
 800459e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045a0:	f107 0314 	add.w	r3, r7, #20
 80045a4:	4619      	mov	r1, r3
 80045a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80045aa:	f002 f8d9 	bl	8006760 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin ARD_D4_Pin ARD_D7_Pin SPBTLE_RF_RST_Pin
                           ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|ARD_D4_Pin|ARD_D7_Pin|SPBTLE_RF_RST_Pin
 80045ae:	f248 131c 	movw	r3, #33052	; 0x811c
 80045b2:	617b      	str	r3, [r7, #20]
                          |ARD_D9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80045b4:	2301      	movs	r3, #1
 80045b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045b8:	2300      	movs	r3, #0
 80045ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045bc:	2300      	movs	r3, #0
 80045be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045c0:	f107 0314 	add.w	r3, r7, #20
 80045c4:	4619      	mov	r1, r3
 80045c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80045ca:	f002 f8c9 	bl	8006760 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 80045ce:	23e0      	movs	r3, #224	; 0xe0
 80045d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045d2:	2302      	movs	r3, #2
 80045d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045d6:	2300      	movs	r3, #0
 80045d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80045da:	2303      	movs	r3, #3
 80045dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80045de:	2305      	movs	r3, #5
 80045e0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045e2:	f107 0314 	add.w	r3, r7, #20
 80045e6:	4619      	mov	r1, r3
 80045e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80045ec:	f002 f8b8 	bl	8006760 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 80045f0:	2301      	movs	r3, #1
 80045f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80045f4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80045f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045fa:	2300      	movs	r3, #0
 80045fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 80045fe:	f107 0314 	add.w	r3, r7, #20
 8004602:	4619      	mov	r1, r3
 8004604:	4856      	ldr	r0, [pc, #344]	; (8004760 <MX_GPIO_Init+0x30c>)
 8004606:	f002 f8ab 	bl	8006760 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 800460a:	2302      	movs	r3, #2
 800460c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800460e:	2302      	movs	r3, #2
 8004610:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004612:	2300      	movs	r3, #0
 8004614:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004616:	2300      	movs	r3, #0
 8004618:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800461a:	2302      	movs	r3, #2
 800461c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 800461e:	f107 0314 	add.w	r3, r7, #20
 8004622:	4619      	mov	r1, r3
 8004624:	484e      	ldr	r0, [pc, #312]	; (8004760 <MX_GPIO_Init+0x30c>)
 8004626:	f002 f89b 	bl	8006760 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 800462a:	f24f 0334 	movw	r3, #61492	; 0xf034
 800462e:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004630:	2301      	movs	r3, #1
 8004632:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004634:	2300      	movs	r3, #0
 8004636:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004638:	2300      	movs	r3, #0
 800463a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800463c:	f107 0314 	add.w	r3, r7, #20
 8004640:	4619      	mov	r1, r3
 8004642:	4847      	ldr	r0, [pc, #284]	; (8004760 <MX_GPIO_Init+0x30c>)
 8004644:	f002 f88c 	bl	8006760 <HAL_GPIO_Init>

  /*Configure GPIO pins : DFSDM1_DATIN2_Pin DFSDM1_CKOUT_Pin */
  GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8004648:	f44f 7320 	mov.w	r3, #640	; 0x280
 800464c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800464e:	2302      	movs	r3, #2
 8004650:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004652:	2300      	movs	r3, #0
 8004654:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004656:	2300      	movs	r3, #0
 8004658:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800465a:	2306      	movs	r3, #6
 800465c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800465e:	f107 0314 	add.w	r3, r7, #20
 8004662:	4619      	mov	r1, r3
 8004664:	483d      	ldr	r0, [pc, #244]	; (800475c <MX_GPIO_Init+0x308>)
 8004666:	f002 f87b 	bl	8006760 <HAL_GPIO_Init>

  /*Configure GPIO pins : QUADSPI_CLK_Pin QUADSPI_NCS_Pin OQUADSPI_BK1_IO0_Pin QUADSPI_BK1_IO1_Pin
                           QUAD_SPI_BK1_IO2_Pin QUAD_SPI_BK1_IO3_Pin */
  GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 800466a:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 800466e:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004670:	2302      	movs	r3, #2
 8004672:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004674:	2300      	movs	r3, #0
 8004676:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004678:	2303      	movs	r3, #3
 800467a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 800467c:	230a      	movs	r3, #10
 800467e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004680:	f107 0314 	add.w	r3, r7, #20
 8004684:	4619      	mov	r1, r3
 8004686:	4835      	ldr	r0, [pc, #212]	; (800475c <MX_GPIO_Init+0x308>)
 8004688:	f002 f86a 	bl	8006760 <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_UART3_TX_Pin INTERNAL_UART3_RX_Pin */
  GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 800468c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004690:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004692:	2302      	movs	r3, #2
 8004694:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004696:	2300      	movs	r3, #0
 8004698:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800469a:	2303      	movs	r3, #3
 800469c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800469e:	2307      	movs	r3, #7
 80046a0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80046a2:	f107 0314 	add.w	r3, r7, #20
 80046a6:	4619      	mov	r1, r3
 80046a8:	482e      	ldr	r0, [pc, #184]	; (8004764 <MX_GPIO_Init+0x310>)
 80046aa:	f002 f859 	bl	8006760 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI10_Pin LSM6DSL_INT1_EXTI11_Pin USB_OTG_FS_PWR_EN_Pin ARD_D2_Pin
                           HTS221_DRDY_EXTI15_Pin PMOD_IRQ_EXTI2_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI10_Pin|LSM6DSL_INT1_EXTI11_Pin|USB_OTG_FS_PWR_EN_Pin|ARD_D2_Pin
 80046ae:	f64d 4304 	movw	r3, #56324	; 0xdc04
 80046b2:	617b      	str	r3, [r7, #20]
                          |HTS221_DRDY_EXTI15_Pin|PMOD_IRQ_EXTI2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80046b4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80046b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046ba:	2300      	movs	r3, #0
 80046bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80046be:	f107 0314 	add.w	r3, r7, #20
 80046c2:	4619      	mov	r1, r3
 80046c4:	4827      	ldr	r0, [pc, #156]	; (8004764 <MX_GPIO_Init+0x310>)
 80046c6:	f002 f84b 	bl	8006760 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin PMOD_SPI2_SCK_Pin STSAFE_A110_RESET_Pin */
  GPIO_InitStruct.Pin = SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|PMOD_SPI2_SCK_Pin|STSAFE_A110_RESET_Pin;
 80046ca:	f242 0383 	movw	r3, #8323	; 0x2083
 80046ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80046d0:	2301      	movs	r3, #1
 80046d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046d4:	2300      	movs	r3, #0
 80046d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046d8:	2300      	movs	r3, #0
 80046da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80046dc:	f107 0314 	add.w	r3, r7, #20
 80046e0:	4619      	mov	r1, r3
 80046e2:	4820      	ldr	r0, [pc, #128]	; (8004764 <MX_GPIO_Init+0x310>)
 80046e4:	f002 f83c 	bl	8006760 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 80046e8:	f44f 7310 	mov.w	r3, #576	; 0x240
 80046ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80046ee:	2301      	movs	r3, #1
 80046f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046f2:	2300      	movs	r3, #0
 80046f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046f6:	2300      	movs	r3, #0
 80046f8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80046fa:	f107 0314 	add.w	r3, r7, #20
 80046fe:	4619      	mov	r1, r3
 8004700:	4819      	ldr	r0, [pc, #100]	; (8004768 <MX_GPIO_Init+0x314>)
 8004702:	f002 f82d 	bl	8006760 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8004706:	f44f 7300 	mov.w	r3, #512	; 0x200
 800470a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800470c:	2300      	movs	r3, #0
 800470e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004710:	2300      	movs	r3, #0
 8004712:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8004714:	f107 0314 	add.w	r3, r7, #20
 8004718:	4619      	mov	r1, r3
 800471a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800471e:	f002 f81f 	bl	8006760 <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_SPI3_SCK_Pin INTERNAL_SPI3_MISO_Pin INTERNAL_SPI3_MOSI_Pin */
  GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8004722:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8004726:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004728:	2302      	movs	r3, #2
 800472a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800472c:	2300      	movs	r3, #0
 800472e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004730:	2303      	movs	r3, #3
 8004732:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8004734:	2306      	movs	r3, #6
 8004736:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004738:	f107 0314 	add.w	r3, r7, #20
 800473c:	4619      	mov	r1, r3
 800473e:	480a      	ldr	r0, [pc, #40]	; (8004768 <MX_GPIO_Init+0x314>)
 8004740:	f002 f80e 	bl	8006760 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8004744:	2378      	movs	r3, #120	; 0x78
 8004746:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004748:	2302      	movs	r3, #2
 800474a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800474c:	2300      	movs	r3, #0
 800474e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004750:	2303      	movs	r3, #3
 8004752:	623b      	str	r3, [r7, #32]
 8004754:	e00a      	b.n	800476c <MX_GPIO_Init+0x318>
 8004756:	bf00      	nop
 8004758:	40021000 	.word	0x40021000
 800475c:	48001000 	.word	0x48001000
 8004760:	48000400 	.word	0x48000400
 8004764:	48000c00 	.word	0x48000c00
 8004768:	48000800 	.word	0x48000800
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800476c:	2307      	movs	r3, #7
 800476e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004770:	f107 0314 	add.w	r3, r7, #20
 8004774:	4619      	mov	r1, r3
 8004776:	480b      	ldr	r0, [pc, #44]	; (80047a4 <MX_GPIO_Init+0x350>)
 8004778:	f001 fff2 	bl	8006760 <HAL_GPIO_Init>
//  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
//  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
//  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 800477c:	2200      	movs	r2, #0
 800477e:	2105      	movs	r1, #5
 8004780:	2017      	movs	r0, #23
 8004782:	f001 fc47 	bl	8006014 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8004786:	2017      	movs	r0, #23
 8004788:	f001 fc60 	bl	800604c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800478c:	2200      	movs	r2, #0
 800478e:	2105      	movs	r1, #5
 8004790:	2028      	movs	r0, #40	; 0x28
 8004792:	f001 fc3f 	bl	8006014 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004796:	2028      	movs	r0, #40	; 0x28
 8004798:	f001 fc58 	bl	800604c <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800479c:	bf00      	nop
 800479e:	3728      	adds	r7, #40	; 0x28
 80047a0:	46bd      	mov	sp, r7
 80047a2:	bd80      	pop	{r7, pc}
 80047a4:	48000c00 	.word	0x48000c00

080047a8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b082      	sub	sp, #8
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a04      	ldr	r2, [pc, #16]	; (80047c8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d101      	bne.n	80047be <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80047ba:	f001 fb2f 	bl	8005e1c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80047be:	bf00      	nop
 80047c0:	3708      	adds	r7, #8
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}
 80047c6:	bf00      	nop
 80047c8:	40012c00 	.word	0x40012c00

080047cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80047d0:	b672      	cpsid	i
}
 80047d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOB,LED2_Pin);
 80047d4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80047d8:	4803      	ldr	r0, [pc, #12]	; (80047e8 <Error_Handler+0x1c>)
 80047da:	f002 f96b 	bl	8006ab4 <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 80047de:	2064      	movs	r0, #100	; 0x64
 80047e0:	f001 fb3c 	bl	8005e5c <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOB,LED2_Pin);
 80047e4:	e7f6      	b.n	80047d4 <Error_Handler+0x8>
 80047e6:	bf00      	nop
 80047e8:	48000400 	.word	0x48000400

080047ec <tick_Handler>:
uint8_t flag_connected_toIris = 0;

static uint8_t message_d[25]={0};
static message_t msg;

void tick_Handler(uint8_t *data){
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b084      	sub	sp, #16
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
	uint8_t mess_len = 0;
 80047f4:	2300      	movs	r3, #0
 80047f6:	73fb      	strb	r3, [r7, #15]
    init_message_t();
 80047f8:	f000 fbac 	bl	8004f54 <init_message_t>

	if (!parseMessage(data, UART_NYX)){
 80047fc:	2101      	movs	r1, #1
 80047fe:	6878      	ldr	r0, [r7, #4]
 8004800:	f000 fa9a 	bl	8004d38 <parseMessage>
 8004804:	4603      	mov	r3, r0
 8004806:	2b00      	cmp	r3, #0
 8004808:	d102      	bne.n	8004810 <tick_Handler+0x24>
		handler(UART_NYX);
 800480a:	2001      	movs	r0, #1
 800480c:	f000 fb1e 	bl	8004e4c <handler>
	}
}
 8004810:	bf00      	nop
 8004812:	3710      	adds	r7, #16
 8004814:	46bd      	mov	sp, r7
 8004816:	bd80      	pop	{r7, pc}

08004818 <sendNack>:
uint8_t send_heartbeat(UART_select device){
    uint8_t data[1] = {0};
    return transmitMessage(data, 1, SBP_CMD_HEARTBEAT, device);
}

uint8_t sendNack(UART_select device){
 8004818:	b580      	push	{r7, lr}
 800481a:	b084      	sub	sp, #16
 800481c:	af00      	add	r7, sp, #0
 800481e:	4603      	mov	r3, r0
 8004820:	71fb      	strb	r3, [r7, #7]
    if ((TOKEN == ESC) || (TOKEN == ETX) || (TOKEN == STX)){
 8004822:	4b16      	ldr	r3, [pc, #88]	; (800487c <sendNack+0x64>)
 8004824:	781b      	ldrb	r3, [r3, #0]
 8004826:	2b1b      	cmp	r3, #27
 8004828:	d007      	beq.n	800483a <sendNack+0x22>
 800482a:	4b14      	ldr	r3, [pc, #80]	; (800487c <sendNack+0x64>)
 800482c:	781b      	ldrb	r3, [r3, #0]
 800482e:	2b03      	cmp	r3, #3
 8004830:	d003      	beq.n	800483a <sendNack+0x22>
 8004832:	4b12      	ldr	r3, [pc, #72]	; (800487c <sendNack+0x64>)
 8004834:	781b      	ldrb	r3, [r3, #0]
 8004836:	2b02      	cmp	r3, #2
 8004838:	d10f      	bne.n	800485a <sendNack+0x42>
        uint8_t msg[3] = {NACK,ESC,TOKEN};
 800483a:	2315      	movs	r3, #21
 800483c:	733b      	strb	r3, [r7, #12]
 800483e:	231b      	movs	r3, #27
 8004840:	737b      	strb	r3, [r7, #13]
 8004842:	4b0e      	ldr	r3, [pc, #56]	; (800487c <sendNack+0x64>)
 8004844:	781b      	ldrb	r3, [r3, #0]
 8004846:	73bb      	strb	r3, [r7, #14]
        return uart_write(msg, 3, device, 5);
 8004848:	79fa      	ldrb	r2, [r7, #7]
 800484a:	f107 000c 	add.w	r0, r7, #12
 800484e:	2305      	movs	r3, #5
 8004850:	2103      	movs	r1, #3
 8004852:	f001 f94f 	bl	8005af4 <uart_write>
 8004856:	4603      	mov	r3, r0
 8004858:	e00c      	b.n	8004874 <sendNack+0x5c>
    }
    else{
        uint8_t msg[2] = {NACK,TOKEN};
 800485a:	2315      	movs	r3, #21
 800485c:	723b      	strb	r3, [r7, #8]
 800485e:	4b07      	ldr	r3, [pc, #28]	; (800487c <sendNack+0x64>)
 8004860:	781b      	ldrb	r3, [r3, #0]
 8004862:	727b      	strb	r3, [r7, #9]
        return uart_write(msg, 2, device, 5);
 8004864:	79fa      	ldrb	r2, [r7, #7]
 8004866:	f107 0008 	add.w	r0, r7, #8
 800486a:	2305      	movs	r3, #5
 800486c:	2102      	movs	r1, #2
 800486e:	f001 f941 	bl	8005af4 <uart_write>
 8004872:	4603      	mov	r3, r0
    }
}
 8004874:	4618      	mov	r0, r3
 8004876:	3710      	adds	r7, #16
 8004878:	46bd      	mov	sp, r7
 800487a:	bd80      	pop	{r7, pc}
 800487c:	20000464 	.word	0x20000464

08004880 <sendAck>:

uint8_t sendAck(UART_select device){
 8004880:	b580      	push	{r7, lr}
 8004882:	b084      	sub	sp, #16
 8004884:	af00      	add	r7, sp, #0
 8004886:	4603      	mov	r3, r0
 8004888:	71fb      	strb	r3, [r7, #7]
    if ((TOKEN == ESC) || (TOKEN == ETX) || (TOKEN == STX)){
 800488a:	4b16      	ldr	r3, [pc, #88]	; (80048e4 <sendAck+0x64>)
 800488c:	781b      	ldrb	r3, [r3, #0]
 800488e:	2b1b      	cmp	r3, #27
 8004890:	d007      	beq.n	80048a2 <sendAck+0x22>
 8004892:	4b14      	ldr	r3, [pc, #80]	; (80048e4 <sendAck+0x64>)
 8004894:	781b      	ldrb	r3, [r3, #0]
 8004896:	2b03      	cmp	r3, #3
 8004898:	d003      	beq.n	80048a2 <sendAck+0x22>
 800489a:	4b12      	ldr	r3, [pc, #72]	; (80048e4 <sendAck+0x64>)
 800489c:	781b      	ldrb	r3, [r3, #0]
 800489e:	2b02      	cmp	r3, #2
 80048a0:	d10f      	bne.n	80048c2 <sendAck+0x42>
        uint8_t msg[3] = {ACK,ESC,TOKEN};
 80048a2:	2306      	movs	r3, #6
 80048a4:	733b      	strb	r3, [r7, #12]
 80048a6:	231b      	movs	r3, #27
 80048a8:	737b      	strb	r3, [r7, #13]
 80048aa:	4b0e      	ldr	r3, [pc, #56]	; (80048e4 <sendAck+0x64>)
 80048ac:	781b      	ldrb	r3, [r3, #0]
 80048ae:	73bb      	strb	r3, [r7, #14]
        return uart_write(msg, 3, device, 5);
 80048b0:	79fa      	ldrb	r2, [r7, #7]
 80048b2:	f107 000c 	add.w	r0, r7, #12
 80048b6:	2305      	movs	r3, #5
 80048b8:	2103      	movs	r1, #3
 80048ba:	f001 f91b 	bl	8005af4 <uart_write>
 80048be:	4603      	mov	r3, r0
 80048c0:	e00c      	b.n	80048dc <sendAck+0x5c>
    }
    else{
        uint8_t msg[2] = {ACK,TOKEN};
 80048c2:	2306      	movs	r3, #6
 80048c4:	723b      	strb	r3, [r7, #8]
 80048c6:	4b07      	ldr	r3, [pc, #28]	; (80048e4 <sendAck+0x64>)
 80048c8:	781b      	ldrb	r3, [r3, #0]
 80048ca:	727b      	strb	r3, [r7, #9]
        return uart_write(msg, 2, device, 5);
 80048cc:	79fa      	ldrb	r2, [r7, #7]
 80048ce:	f107 0008 	add.w	r0, r7, #8
 80048d2:	2305      	movs	r3, #5
 80048d4:	2102      	movs	r1, #2
 80048d6:	f001 f90d 	bl	8005af4 <uart_write>
 80048da:	4603      	mov	r3, r0
    }
}
 80048dc:	4618      	mov	r0, r3
 80048de:	3710      	adds	r7, #16
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd80      	pop	{r7, pc}
 80048e4:	20000464 	.word	0x20000464

080048e8 <calcDataSize>:

static uint8_t calcDataSize(uint8_t *data, uint8_t len){
 80048e8:	b480      	push	{r7}
 80048ea:	b085      	sub	sp, #20
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
 80048f0:	460b      	mov	r3, r1
 80048f2:	70fb      	strb	r3, [r7, #3]
    uint8_t j,i;
    j=0;
 80048f4:	2300      	movs	r3, #0
 80048f6:	73fb      	strb	r3, [r7, #15]
    for (i=0;i<len;i++){
 80048f8:	2300      	movs	r3, #0
 80048fa:	73bb      	strb	r3, [r7, #14]
 80048fc:	e01e      	b.n	800493c <calcDataSize+0x54>
       if ((data[i] == STX) || (data[i] == ETX) || (data[i] == ESC)){
 80048fe:	7bbb      	ldrb	r3, [r7, #14]
 8004900:	687a      	ldr	r2, [r7, #4]
 8004902:	4413      	add	r3, r2
 8004904:	781b      	ldrb	r3, [r3, #0]
 8004906:	2b02      	cmp	r3, #2
 8004908:	d00b      	beq.n	8004922 <calcDataSize+0x3a>
 800490a:	7bbb      	ldrb	r3, [r7, #14]
 800490c:	687a      	ldr	r2, [r7, #4]
 800490e:	4413      	add	r3, r2
 8004910:	781b      	ldrb	r3, [r3, #0]
 8004912:	2b03      	cmp	r3, #3
 8004914:	d005      	beq.n	8004922 <calcDataSize+0x3a>
 8004916:	7bbb      	ldrb	r3, [r7, #14]
 8004918:	687a      	ldr	r2, [r7, #4]
 800491a:	4413      	add	r3, r2
 800491c:	781b      	ldrb	r3, [r3, #0]
 800491e:	2b1b      	cmp	r3, #27
 8004920:	d106      	bne.n	8004930 <calcDataSize+0x48>
           j++;
 8004922:	7bfb      	ldrb	r3, [r7, #15]
 8004924:	3301      	adds	r3, #1
 8004926:	73fb      	strb	r3, [r7, #15]
           j++;
 8004928:	7bfb      	ldrb	r3, [r7, #15]
 800492a:	3301      	adds	r3, #1
 800492c:	73fb      	strb	r3, [r7, #15]
 800492e:	e002      	b.n	8004936 <calcDataSize+0x4e>
       }
       else j++;
 8004930:	7bfb      	ldrb	r3, [r7, #15]
 8004932:	3301      	adds	r3, #1
 8004934:	73fb      	strb	r3, [r7, #15]
    for (i=0;i<len;i++){
 8004936:	7bbb      	ldrb	r3, [r7, #14]
 8004938:	3301      	adds	r3, #1
 800493a:	73bb      	strb	r3, [r7, #14]
 800493c:	7bba      	ldrb	r2, [r7, #14]
 800493e:	78fb      	ldrb	r3, [r7, #3]
 8004940:	429a      	cmp	r2, r3
 8004942:	d3dc      	bcc.n	80048fe <calcDataSize+0x16>
    }
    return j;
 8004944:	7bfb      	ldrb	r3, [r7, #15]
}
 8004946:	4618      	mov	r0, r3
 8004948:	3714      	adds	r7, #20
 800494a:	46bd      	mov	sp, r7
 800494c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004950:	4770      	bx	lr
	...

08004954 <transmitMessage>:

uint8_t transmitMessage(uint8_t *data, uint8_t data_len, uint8_t cmd, UART_select device){
 8004954:	b580      	push	{r7, lr}
 8004956:	b08c      	sub	sp, #48	; 0x30
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
 800495c:	4608      	mov	r0, r1
 800495e:	4611      	mov	r1, r2
 8004960:	461a      	mov	r2, r3
 8004962:	4603      	mov	r3, r0
 8004964:	70fb      	strb	r3, [r7, #3]
 8004966:	460b      	mov	r3, r1
 8004968:	70bb      	strb	r3, [r7, #2]
 800496a:	4613      	mov	r3, r2
 800496c:	707b      	strb	r3, [r7, #1]
    uint8_t message[34];
    uint8_t i,j,index;
    uint8_t tmp_len = 0;
 800496e:	2300      	movs	r3, #0
 8004970:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    tmp_len = calcDataSize(data, data_len);
 8004974:	78fb      	ldrb	r3, [r7, #3]
 8004976:	4619      	mov	r1, r3
 8004978:	6878      	ldr	r0, [r7, #4]
 800497a:	f7ff ffb5 	bl	80048e8 <calcDataSize>
 800497e:	4603      	mov	r3, r0
 8004980:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    msg.len = data_len;
 8004984:	78fb      	ldrb	r3, [r7, #3]
 8004986:	b29a      	uxth	r2, r3
 8004988:	4bc1      	ldr	r3, [pc, #772]	; (8004c90 <transmitMessage+0x33c>)
 800498a:	80da      	strh	r2, [r3, #6]
    memcpy(msg.data, data, msg.len);
 800498c:	4bc0      	ldr	r3, [pc, #768]	; (8004c90 <transmitMessage+0x33c>)
 800498e:	88db      	ldrh	r3, [r3, #6]
 8004990:	461a      	mov	r2, r3
 8004992:	6879      	ldr	r1, [r7, #4]
 8004994:	48bf      	ldr	r0, [pc, #764]	; (8004c94 <transmitMessage+0x340>)
 8004996:	f00c f8e0 	bl	8010b5a <memcpy>
    msg.protocol_rev[0] = PROTOCOL_VER;
 800499a:	4bbd      	ldr	r3, [pc, #756]	; (8004c90 <transmitMessage+0x33c>)
 800499c:	22fe      	movs	r2, #254	; 0xfe
 800499e:	701a      	strb	r2, [r3, #0]
    msg.protocol_rev[1] = COMM_PROTOCOL_REV;
 80049a0:	4bbb      	ldr	r3, [pc, #748]	; (8004c90 <transmitMessage+0x33c>)
 80049a2:	2201      	movs	r2, #1
 80049a4:	705a      	strb	r2, [r3, #1]
    if (TOKEN == 255){
 80049a6:	4bbc      	ldr	r3, [pc, #752]	; (8004c98 <transmitMessage+0x344>)
 80049a8:	781b      	ldrb	r3, [r3, #0]
 80049aa:	2bff      	cmp	r3, #255	; 0xff
 80049ac:	d103      	bne.n	80049b6 <transmitMessage+0x62>
        TOKEN=0;
 80049ae:	4bba      	ldr	r3, [pc, #744]	; (8004c98 <transmitMessage+0x344>)
 80049b0:	2200      	movs	r2, #0
 80049b2:	701a      	strb	r2, [r3, #0]
 80049b4:	e005      	b.n	80049c2 <transmitMessage+0x6e>
    }
    else{
        TOKEN++;
 80049b6:	4bb8      	ldr	r3, [pc, #736]	; (8004c98 <transmitMessage+0x344>)
 80049b8:	781b      	ldrb	r3, [r3, #0]
 80049ba:	3301      	adds	r3, #1
 80049bc:	b2da      	uxtb	r2, r3
 80049be:	4bb6      	ldr	r3, [pc, #728]	; (8004c98 <transmitMessage+0x344>)
 80049c0:	701a      	strb	r2, [r3, #0]
    }
    msg.token = TOKEN;
 80049c2:	4bb5      	ldr	r3, [pc, #724]	; (8004c98 <transmitMessage+0x344>)
 80049c4:	781a      	ldrb	r2, [r3, #0]
 80049c6:	4bb2      	ldr	r3, [pc, #712]	; (8004c90 <transmitMessage+0x33c>)
 80049c8:	709a      	strb	r2, [r3, #2]

    msg.cmd = cmd;
 80049ca:	4ab1      	ldr	r2, [pc, #708]	; (8004c90 <transmitMessage+0x33c>)
 80049cc:	78bb      	ldrb	r3, [r7, #2]
 80049ce:	7153      	strb	r3, [r2, #5]
    msg.senderID[0] = ESC;
 80049d0:	4baf      	ldr	r3, [pc, #700]	; (8004c90 <transmitMessage+0x33c>)
 80049d2:	221b      	movs	r2, #27
 80049d4:	70da      	strb	r2, [r3, #3]
    msg.senderID[1] = SBP_S_ID;
 80049d6:	4bae      	ldr	r3, [pc, #696]	; (8004c90 <transmitMessage+0x33c>)
 80049d8:	2232      	movs	r2, #50	; 0x32
 80049da:	711a      	strb	r2, [r3, #4]
    calcChecksum();
 80049dc:	f000 f95e 	bl	8004c9c <calcChecksum>
    //CREATE MESSAGE
    index = 0;
 80049e0:	2300      	movs	r3, #0
 80049e2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    message[index] = STX;
 80049e6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80049ea:	3330      	adds	r3, #48	; 0x30
 80049ec:	443b      	add	r3, r7
 80049ee:	2202      	movs	r2, #2
 80049f0:	f803 2c28 	strb.w	r2, [r3, #-40]
    index++;
 80049f4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80049f8:	3301      	adds	r3, #1
 80049fa:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    message[index] = msg.protocol_rev[0];
 80049fe:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004a02:	4aa3      	ldr	r2, [pc, #652]	; (8004c90 <transmitMessage+0x33c>)
 8004a04:	7812      	ldrb	r2, [r2, #0]
 8004a06:	3330      	adds	r3, #48	; 0x30
 8004a08:	443b      	add	r3, r7
 8004a0a:	f803 2c28 	strb.w	r2, [r3, #-40]
    index++;
 8004a0e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004a12:	3301      	adds	r3, #1
 8004a14:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    message[index] = msg.protocol_rev[1];
 8004a18:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004a1c:	4a9c      	ldr	r2, [pc, #624]	; (8004c90 <transmitMessage+0x33c>)
 8004a1e:	7852      	ldrb	r2, [r2, #1]
 8004a20:	3330      	adds	r3, #48	; 0x30
 8004a22:	443b      	add	r3, r7
 8004a24:	f803 2c28 	strb.w	r2, [r3, #-40]
    index++;
 8004a28:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004a2c:	3301      	adds	r3, #1
 8004a2e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    if ((msg.token == STX) || (msg.token == ETX) || (msg.token == ESC)){
 8004a32:	4b97      	ldr	r3, [pc, #604]	; (8004c90 <transmitMessage+0x33c>)
 8004a34:	789b      	ldrb	r3, [r3, #2]
 8004a36:	2b02      	cmp	r3, #2
 8004a38:	d007      	beq.n	8004a4a <transmitMessage+0xf6>
 8004a3a:	4b95      	ldr	r3, [pc, #596]	; (8004c90 <transmitMessage+0x33c>)
 8004a3c:	789b      	ldrb	r3, [r3, #2]
 8004a3e:	2b03      	cmp	r3, #3
 8004a40:	d003      	beq.n	8004a4a <transmitMessage+0xf6>
 8004a42:	4b93      	ldr	r3, [pc, #588]	; (8004c90 <transmitMessage+0x33c>)
 8004a44:	789b      	ldrb	r3, [r3, #2]
 8004a46:	2b1b      	cmp	r3, #27
 8004a48:	d119      	bne.n	8004a7e <transmitMessage+0x12a>
        message[index] = ESC;
 8004a4a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004a4e:	3330      	adds	r3, #48	; 0x30
 8004a50:	443b      	add	r3, r7
 8004a52:	221b      	movs	r2, #27
 8004a54:	f803 2c28 	strb.w	r2, [r3, #-40]
        index++;
 8004a58:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004a5c:	3301      	adds	r3, #1
 8004a5e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        message[index] = msg.token;
 8004a62:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004a66:	4a8a      	ldr	r2, [pc, #552]	; (8004c90 <transmitMessage+0x33c>)
 8004a68:	7892      	ldrb	r2, [r2, #2]
 8004a6a:	3330      	adds	r3, #48	; 0x30
 8004a6c:	443b      	add	r3, r7
 8004a6e:	f803 2c28 	strb.w	r2, [r3, #-40]
        index++;
 8004a72:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004a76:	3301      	adds	r3, #1
 8004a78:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8004a7c:	e00c      	b.n	8004a98 <transmitMessage+0x144>
    }
    else{
        message[index] = msg.token;
 8004a7e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004a82:	4a83      	ldr	r2, [pc, #524]	; (8004c90 <transmitMessage+0x33c>)
 8004a84:	7892      	ldrb	r2, [r2, #2]
 8004a86:	3330      	adds	r3, #48	; 0x30
 8004a88:	443b      	add	r3, r7
 8004a8a:	f803 2c28 	strb.w	r2, [r3, #-40]
        index++;
 8004a8e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004a92:	3301      	adds	r3, #1
 8004a94:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    }
    message[index] = msg.senderID[0];
 8004a98:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004a9c:	4a7c      	ldr	r2, [pc, #496]	; (8004c90 <transmitMessage+0x33c>)
 8004a9e:	78d2      	ldrb	r2, [r2, #3]
 8004aa0:	3330      	adds	r3, #48	; 0x30
 8004aa2:	443b      	add	r3, r7
 8004aa4:	f803 2c28 	strb.w	r2, [r3, #-40]
    index++;
 8004aa8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004aac:	3301      	adds	r3, #1
 8004aae:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    message[index] = msg.senderID[1];
 8004ab2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004ab6:	4a76      	ldr	r2, [pc, #472]	; (8004c90 <transmitMessage+0x33c>)
 8004ab8:	7912      	ldrb	r2, [r2, #4]
 8004aba:	3330      	adds	r3, #48	; 0x30
 8004abc:	443b      	add	r3, r7
 8004abe:	f803 2c28 	strb.w	r2, [r3, #-40]
    index++;
 8004ac2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004ac6:	3301      	adds	r3, #1
 8004ac8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    message[index] = msg.cmd;
 8004acc:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004ad0:	4a6f      	ldr	r2, [pc, #444]	; (8004c90 <transmitMessage+0x33c>)
 8004ad2:	7952      	ldrb	r2, [r2, #5]
 8004ad4:	3330      	adds	r3, #48	; 0x30
 8004ad6:	443b      	add	r3, r7
 8004ad8:	f803 2c28 	strb.w	r2, [r3, #-40]
    index++;
 8004adc:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004ae0:	3301      	adds	r3, #1
 8004ae2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    for(i=0; i<msg.len;i++){
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8004aec:	e046      	b.n	8004b7c <transmitMessage+0x228>
        if ((msg.data[i] == STX) || (msg.data[i] == ETX) || (msg.data[i] == ESC)){
 8004aee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004af2:	4a67      	ldr	r2, [pc, #412]	; (8004c90 <transmitMessage+0x33c>)
 8004af4:	4413      	add	r3, r2
 8004af6:	7a1b      	ldrb	r3, [r3, #8]
 8004af8:	2b02      	cmp	r3, #2
 8004afa:	d00d      	beq.n	8004b18 <transmitMessage+0x1c4>
 8004afc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004b00:	4a63      	ldr	r2, [pc, #396]	; (8004c90 <transmitMessage+0x33c>)
 8004b02:	4413      	add	r3, r2
 8004b04:	7a1b      	ldrb	r3, [r3, #8]
 8004b06:	2b03      	cmp	r3, #3
 8004b08:	d006      	beq.n	8004b18 <transmitMessage+0x1c4>
 8004b0a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004b0e:	4a60      	ldr	r2, [pc, #384]	; (8004c90 <transmitMessage+0x33c>)
 8004b10:	4413      	add	r3, r2
 8004b12:	7a1b      	ldrb	r3, [r3, #8]
 8004b14:	2b1b      	cmp	r3, #27
 8004b16:	d11c      	bne.n	8004b52 <transmitMessage+0x1fe>
            message[index] = ESC;
 8004b18:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004b1c:	3330      	adds	r3, #48	; 0x30
 8004b1e:	443b      	add	r3, r7
 8004b20:	221b      	movs	r2, #27
 8004b22:	f803 2c28 	strb.w	r2, [r3, #-40]
            index++;
 8004b26:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004b2a:	3301      	adds	r3, #1
 8004b2c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
            message[index] = msg.data[i];
 8004b30:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8004b34:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004b38:	4955      	ldr	r1, [pc, #340]	; (8004c90 <transmitMessage+0x33c>)
 8004b3a:	440a      	add	r2, r1
 8004b3c:	7a12      	ldrb	r2, [r2, #8]
 8004b3e:	3330      	adds	r3, #48	; 0x30
 8004b40:	443b      	add	r3, r7
 8004b42:	f803 2c28 	strb.w	r2, [r3, #-40]
            index++;
 8004b46:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004b4a:	3301      	adds	r3, #1
 8004b4c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8004b50:	e00f      	b.n	8004b72 <transmitMessage+0x21e>
        }
        else{
            message[index] = msg.data[i];
 8004b52:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8004b56:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004b5a:	494d      	ldr	r1, [pc, #308]	; (8004c90 <transmitMessage+0x33c>)
 8004b5c:	440a      	add	r2, r1
 8004b5e:	7a12      	ldrb	r2, [r2, #8]
 8004b60:	3330      	adds	r3, #48	; 0x30
 8004b62:	443b      	add	r3, r7
 8004b64:	f803 2c28 	strb.w	r2, [r3, #-40]
            index++;
 8004b68:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004b6c:	3301      	adds	r3, #1
 8004b6e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    for(i=0; i<msg.len;i++){
 8004b72:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004b76:	3301      	adds	r3, #1
 8004b78:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8004b7c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004b80:	b29a      	uxth	r2, r3
 8004b82:	4b43      	ldr	r3, [pc, #268]	; (8004c90 <transmitMessage+0x33c>)
 8004b84:	88db      	ldrh	r3, [r3, #6]
 8004b86:	429a      	cmp	r2, r3
 8004b88:	d3b1      	bcc.n	8004aee <transmitMessage+0x19a>
        }
    }
    message[index] = msg.checksum[3];
 8004b8a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004b8e:	4a40      	ldr	r2, [pc, #256]	; (8004c90 <transmitMessage+0x33c>)
 8004b90:	7fd2      	ldrb	r2, [r2, #31]
 8004b92:	3330      	adds	r3, #48	; 0x30
 8004b94:	443b      	add	r3, r7
 8004b96:	f803 2c28 	strb.w	r2, [r3, #-40]
    index++;
 8004b9a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004b9e:	3301      	adds	r3, #1
 8004ba0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    message[index] = msg.checksum[2];
 8004ba4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004ba8:	4a39      	ldr	r2, [pc, #228]	; (8004c90 <transmitMessage+0x33c>)
 8004baa:	7f92      	ldrb	r2, [r2, #30]
 8004bac:	3330      	adds	r3, #48	; 0x30
 8004bae:	443b      	add	r3, r7
 8004bb0:	f803 2c28 	strb.w	r2, [r3, #-40]
    index++;
 8004bb4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004bb8:	3301      	adds	r3, #1
 8004bba:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    message[index] = msg.checksum[1];
 8004bbe:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004bc2:	4a33      	ldr	r2, [pc, #204]	; (8004c90 <transmitMessage+0x33c>)
 8004bc4:	7f52      	ldrb	r2, [r2, #29]
 8004bc6:	3330      	adds	r3, #48	; 0x30
 8004bc8:	443b      	add	r3, r7
 8004bca:	f803 2c28 	strb.w	r2, [r3, #-40]
    index++;
 8004bce:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004bd2:	3301      	adds	r3, #1
 8004bd4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    if (msg.checksum[0] == ESC){
 8004bd8:	4b2d      	ldr	r3, [pc, #180]	; (8004c90 <transmitMessage+0x33c>)
 8004bda:	7f1b      	ldrb	r3, [r3, #28]
 8004bdc:	2b1b      	cmp	r3, #27
 8004bde:	d12a      	bne.n	8004c36 <transmitMessage+0x2e2>
        message[index] = ESC;
 8004be0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004be4:	3330      	adds	r3, #48	; 0x30
 8004be6:	443b      	add	r3, r7
 8004be8:	221b      	movs	r2, #27
 8004bea:	f803 2c28 	strb.w	r2, [r3, #-40]
        index++;
 8004bee:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004bf2:	3301      	adds	r3, #1
 8004bf4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        message[index] = msg.checksum[0];
 8004bf8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004bfc:	4a24      	ldr	r2, [pc, #144]	; (8004c90 <transmitMessage+0x33c>)
 8004bfe:	7f12      	ldrb	r2, [r2, #28]
 8004c00:	3330      	adds	r3, #48	; 0x30
 8004c02:	443b      	add	r3, r7
 8004c04:	f803 2c28 	strb.w	r2, [r3, #-40]
        index++;
 8004c08:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004c0c:	3301      	adds	r3, #1
 8004c0e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        message[index] = ETX;
 8004c12:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004c16:	3330      	adds	r3, #48	; 0x30
 8004c18:	443b      	add	r3, r7
 8004c1a:	2203      	movs	r2, #3
 8004c1c:	f803 2c28 	strb.w	r2, [r3, #-40]
        index++;
 8004c20:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004c24:	3301      	adds	r3, #1
 8004c26:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        msg.len = index;
 8004c2a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004c2e:	b29a      	uxth	r2, r3
 8004c30:	4b17      	ldr	r3, [pc, #92]	; (8004c90 <transmitMessage+0x33c>)
 8004c32:	80da      	strh	r2, [r3, #6]
 8004c34:	e01d      	b.n	8004c72 <transmitMessage+0x31e>
    }
    else{
        message[index] = msg.checksum[0];
 8004c36:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004c3a:	4a15      	ldr	r2, [pc, #84]	; (8004c90 <transmitMessage+0x33c>)
 8004c3c:	7f12      	ldrb	r2, [r2, #28]
 8004c3e:	3330      	adds	r3, #48	; 0x30
 8004c40:	443b      	add	r3, r7
 8004c42:	f803 2c28 	strb.w	r2, [r3, #-40]
        index++;
 8004c46:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004c4a:	3301      	adds	r3, #1
 8004c4c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        message[index] = ETX;
 8004c50:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004c54:	3330      	adds	r3, #48	; 0x30
 8004c56:	443b      	add	r3, r7
 8004c58:	2203      	movs	r2, #3
 8004c5a:	f803 2c28 	strb.w	r2, [r3, #-40]
        index++;
 8004c5e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004c62:	3301      	adds	r3, #1
 8004c64:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        msg.len = index;
 8004c68:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004c6c:	b29a      	uxth	r2, r3
 8004c6e:	4b08      	ldr	r3, [pc, #32]	; (8004c90 <transmitMessage+0x33c>)
 8004c70:	80da      	strh	r2, [r3, #6]
    }

    uart_write(message, msg.len, device, 10);
 8004c72:	4b07      	ldr	r3, [pc, #28]	; (8004c90 <transmitMessage+0x33c>)
 8004c74:	88db      	ldrh	r3, [r3, #6]
 8004c76:	b2d9      	uxtb	r1, r3
 8004c78:	787a      	ldrb	r2, [r7, #1]
 8004c7a:	f107 0008 	add.w	r0, r7, #8
 8004c7e:	230a      	movs	r3, #10
 8004c80:	f000 ff38 	bl	8005af4 <uart_write>
    return 1;
 8004c84:	2301      	movs	r3, #1
}
 8004c86:	4618      	mov	r0, r3
 8004c88:	3730      	adds	r7, #48	; 0x30
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}
 8004c8e:	bf00      	nop
 8004c90:	20000468 	.word	0x20000468
 8004c94:	20000470 	.word	0x20000470
 8004c98:	20000464 	.word	0x20000464

08004c9c <calcChecksum>:

static void calcChecksum(void){
 8004c9c:	b480      	push	{r7}
 8004c9e:	b083      	sub	sp, #12
 8004ca0:	af00      	add	r7, sp, #0
    msg.checksum[0] = msg.protocol_rev[0];
 8004ca2:	4b24      	ldr	r3, [pc, #144]	; (8004d34 <calcChecksum+0x98>)
 8004ca4:	781a      	ldrb	r2, [r3, #0]
 8004ca6:	4b23      	ldr	r3, [pc, #140]	; (8004d34 <calcChecksum+0x98>)
 8004ca8:	771a      	strb	r2, [r3, #28]
    msg.checksum[0] ^= msg.protocol_rev[1];
 8004caa:	4b22      	ldr	r3, [pc, #136]	; (8004d34 <calcChecksum+0x98>)
 8004cac:	7f1a      	ldrb	r2, [r3, #28]
 8004cae:	4b21      	ldr	r3, [pc, #132]	; (8004d34 <calcChecksum+0x98>)
 8004cb0:	785b      	ldrb	r3, [r3, #1]
 8004cb2:	4053      	eors	r3, r2
 8004cb4:	b2da      	uxtb	r2, r3
 8004cb6:	4b1f      	ldr	r3, [pc, #124]	; (8004d34 <calcChecksum+0x98>)
 8004cb8:	771a      	strb	r2, [r3, #28]

    msg.checksum[0] ^= msg.token;
 8004cba:	4b1e      	ldr	r3, [pc, #120]	; (8004d34 <calcChecksum+0x98>)
 8004cbc:	7f1a      	ldrb	r2, [r3, #28]
 8004cbe:	4b1d      	ldr	r3, [pc, #116]	; (8004d34 <calcChecksum+0x98>)
 8004cc0:	789b      	ldrb	r3, [r3, #2]
 8004cc2:	4053      	eors	r3, r2
 8004cc4:	b2da      	uxtb	r2, r3
 8004cc6:	4b1b      	ldr	r3, [pc, #108]	; (8004d34 <calcChecksum+0x98>)
 8004cc8:	771a      	strb	r2, [r3, #28]

    msg.checksum[0] ^= msg.senderID[0];
 8004cca:	4b1a      	ldr	r3, [pc, #104]	; (8004d34 <calcChecksum+0x98>)
 8004ccc:	7f1a      	ldrb	r2, [r3, #28]
 8004cce:	4b19      	ldr	r3, [pc, #100]	; (8004d34 <calcChecksum+0x98>)
 8004cd0:	78db      	ldrb	r3, [r3, #3]
 8004cd2:	4053      	eors	r3, r2
 8004cd4:	b2da      	uxtb	r2, r3
 8004cd6:	4b17      	ldr	r3, [pc, #92]	; (8004d34 <calcChecksum+0x98>)
 8004cd8:	771a      	strb	r2, [r3, #28]
    msg.checksum[0] ^= msg.senderID[1];
 8004cda:	4b16      	ldr	r3, [pc, #88]	; (8004d34 <calcChecksum+0x98>)
 8004cdc:	7f1a      	ldrb	r2, [r3, #28]
 8004cde:	4b15      	ldr	r3, [pc, #84]	; (8004d34 <calcChecksum+0x98>)
 8004ce0:	791b      	ldrb	r3, [r3, #4]
 8004ce2:	4053      	eors	r3, r2
 8004ce4:	b2da      	uxtb	r2, r3
 8004ce6:	4b13      	ldr	r3, [pc, #76]	; (8004d34 <calcChecksum+0x98>)
 8004ce8:	771a      	strb	r2, [r3, #28]

    msg.checksum[0] ^= msg.cmd;
 8004cea:	4b12      	ldr	r3, [pc, #72]	; (8004d34 <calcChecksum+0x98>)
 8004cec:	7f1a      	ldrb	r2, [r3, #28]
 8004cee:	4b11      	ldr	r3, [pc, #68]	; (8004d34 <calcChecksum+0x98>)
 8004cf0:	795b      	ldrb	r3, [r3, #5]
 8004cf2:	4053      	eors	r3, r2
 8004cf4:	b2da      	uxtb	r2, r3
 8004cf6:	4b0f      	ldr	r3, [pc, #60]	; (8004d34 <calcChecksum+0x98>)
 8004cf8:	771a      	strb	r2, [r3, #28]
    uint8_t i;

    for (i=0; i < msg.len; i++)
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	71fb      	strb	r3, [r7, #7]
 8004cfe:	e00c      	b.n	8004d1a <calcChecksum+0x7e>
    {
       msg.checksum[0] ^= msg.data[i];
 8004d00:	4b0c      	ldr	r3, [pc, #48]	; (8004d34 <calcChecksum+0x98>)
 8004d02:	7f1a      	ldrb	r2, [r3, #28]
 8004d04:	79fb      	ldrb	r3, [r7, #7]
 8004d06:	490b      	ldr	r1, [pc, #44]	; (8004d34 <calcChecksum+0x98>)
 8004d08:	440b      	add	r3, r1
 8004d0a:	7a1b      	ldrb	r3, [r3, #8]
 8004d0c:	4053      	eors	r3, r2
 8004d0e:	b2da      	uxtb	r2, r3
 8004d10:	4b08      	ldr	r3, [pc, #32]	; (8004d34 <calcChecksum+0x98>)
 8004d12:	771a      	strb	r2, [r3, #28]
    for (i=0; i < msg.len; i++)
 8004d14:	79fb      	ldrb	r3, [r7, #7]
 8004d16:	3301      	adds	r3, #1
 8004d18:	71fb      	strb	r3, [r7, #7]
 8004d1a:	79fb      	ldrb	r3, [r7, #7]
 8004d1c:	b29a      	uxth	r2, r3
 8004d1e:	4b05      	ldr	r3, [pc, #20]	; (8004d34 <calcChecksum+0x98>)
 8004d20:	88db      	ldrh	r3, [r3, #6]
 8004d22:	429a      	cmp	r2, r3
 8004d24:	d3ec      	bcc.n	8004d00 <calcChecksum+0x64>
    }
}
 8004d26:	bf00      	nop
 8004d28:	bf00      	nop
 8004d2a:	370c      	adds	r7, #12
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d32:	4770      	bx	lr
 8004d34:	20000468 	.word	0x20000468

08004d38 <parseMessage>:


uint8_t parseMessage(uint8_t *data, UART_select device){
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b084      	sub	sp, #16
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
 8004d40:	460b      	mov	r3, r1
 8004d42:	70fb      	strb	r3, [r7, #3]
    uint8_t chsum = 0;
 8004d44:	2300      	movs	r3, #0
 8004d46:	73bb      	strb	r3, [r7, #14]
    uint8_t len = data[0];
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	781b      	ldrb	r3, [r3, #0]
 8004d4c:	737b      	strb	r3, [r7, #13]
    if (len < 11){
 8004d4e:	7b7b      	ldrb	r3, [r7, #13]
 8004d50:	2b0a      	cmp	r3, #10
 8004d52:	d805      	bhi.n	8004d60 <parseMessage+0x28>
        sendNack(device);
 8004d54:	78fb      	ldrb	r3, [r7, #3]
 8004d56:	4618      	mov	r0, r3
 8004d58:	f7ff fd5e 	bl	8004818 <sendNack>
        return 1;
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	e06d      	b.n	8004e3c <parseMessage+0x104>
    }
    msg.len = len-10;
 8004d60:	7b7b      	ldrb	r3, [r7, #13]
 8004d62:	b29b      	uxth	r3, r3
 8004d64:	3b0a      	subs	r3, #10
 8004d66:	b29a      	uxth	r2, r3
 8004d68:	4b36      	ldr	r3, [pc, #216]	; (8004e44 <parseMessage+0x10c>)
 8004d6a:	80da      	strh	r2, [r3, #6]
    if (!msg.data)return 2;
    msg.protocol_rev[0] = data[1];
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	785a      	ldrb	r2, [r3, #1]
 8004d70:	4b34      	ldr	r3, [pc, #208]	; (8004e44 <parseMessage+0x10c>)
 8004d72:	701a      	strb	r2, [r3, #0]
    msg.protocol_rev[1] = data[2];
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	789a      	ldrb	r2, [r3, #2]
 8004d78:	4b32      	ldr	r3, [pc, #200]	; (8004e44 <parseMessage+0x10c>)
 8004d7a:	705a      	strb	r2, [r3, #1]
    msg.token = data[3];
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	78da      	ldrb	r2, [r3, #3]
 8004d80:	4b30      	ldr	r3, [pc, #192]	; (8004e44 <parseMessage+0x10c>)
 8004d82:	709a      	strb	r2, [r3, #2]
    TOKEN = msg.token;
 8004d84:	4b2f      	ldr	r3, [pc, #188]	; (8004e44 <parseMessage+0x10c>)
 8004d86:	789a      	ldrb	r2, [r3, #2]
 8004d88:	4b2f      	ldr	r3, [pc, #188]	; (8004e48 <parseMessage+0x110>)
 8004d8a:	701a      	strb	r2, [r3, #0]
    msg.senderID[0] = data[4];
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	791a      	ldrb	r2, [r3, #4]
 8004d90:	4b2c      	ldr	r3, [pc, #176]	; (8004e44 <parseMessage+0x10c>)
 8004d92:	70da      	strb	r2, [r3, #3]
    msg.senderID[1] = data[5];
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	795a      	ldrb	r2, [r3, #5]
 8004d98:	4b2a      	ldr	r3, [pc, #168]	; (8004e44 <parseMessage+0x10c>)
 8004d9a:	711a      	strb	r2, [r3, #4]
    msg.cmd = data[6];
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	799a      	ldrb	r2, [r3, #6]
 8004da0:	4b28      	ldr	r3, [pc, #160]	; (8004e44 <parseMessage+0x10c>)
 8004da2:	715a      	strb	r2, [r3, #5]
    uint8_t i;
    for (i=0; i<msg.len; i++){
 8004da4:	2300      	movs	r3, #0
 8004da6:	73fb      	strb	r3, [r7, #15]
 8004da8:	e00d      	b.n	8004dc6 <parseMessage+0x8e>
//        if (data[6+i] == ESC) i++;
        msg.data[i] = data[7+i];
 8004daa:	7bfb      	ldrb	r3, [r7, #15]
 8004dac:	3307      	adds	r3, #7
 8004dae:	461a      	mov	r2, r3
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	441a      	add	r2, r3
 8004db4:	7bfb      	ldrb	r3, [r7, #15]
 8004db6:	7811      	ldrb	r1, [r2, #0]
 8004db8:	4a22      	ldr	r2, [pc, #136]	; (8004e44 <parseMessage+0x10c>)
 8004dba:	4413      	add	r3, r2
 8004dbc:	460a      	mov	r2, r1
 8004dbe:	721a      	strb	r2, [r3, #8]
    for (i=0; i<msg.len; i++){
 8004dc0:	7bfb      	ldrb	r3, [r7, #15]
 8004dc2:	3301      	adds	r3, #1
 8004dc4:	73fb      	strb	r3, [r7, #15]
 8004dc6:	7bfb      	ldrb	r3, [r7, #15]
 8004dc8:	b29a      	uxth	r2, r3
 8004dca:	4b1e      	ldr	r3, [pc, #120]	; (8004e44 <parseMessage+0x10c>)
 8004dcc:	88db      	ldrh	r3, [r3, #6]
 8004dce:	429a      	cmp	r2, r3
 8004dd0:	d3eb      	bcc.n	8004daa <parseMessage+0x72>
    }
    msg.checksum[3] = data[7+i];
 8004dd2:	7bfb      	ldrb	r3, [r7, #15]
 8004dd4:	3307      	adds	r3, #7
 8004dd6:	461a      	mov	r2, r3
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	4413      	add	r3, r2
 8004ddc:	781a      	ldrb	r2, [r3, #0]
 8004dde:	4b19      	ldr	r3, [pc, #100]	; (8004e44 <parseMessage+0x10c>)
 8004de0:	77da      	strb	r2, [r3, #31]
    msg.checksum[2] = data[8+i];
 8004de2:	7bfb      	ldrb	r3, [r7, #15]
 8004de4:	3308      	adds	r3, #8
 8004de6:	461a      	mov	r2, r3
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	4413      	add	r3, r2
 8004dec:	781a      	ldrb	r2, [r3, #0]
 8004dee:	4b15      	ldr	r3, [pc, #84]	; (8004e44 <parseMessage+0x10c>)
 8004df0:	779a      	strb	r2, [r3, #30]
    msg.checksum[1] = data[9+i];
 8004df2:	7bfb      	ldrb	r3, [r7, #15]
 8004df4:	3309      	adds	r3, #9
 8004df6:	461a      	mov	r2, r3
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	4413      	add	r3, r2
 8004dfc:	781a      	ldrb	r2, [r3, #0]
 8004dfe:	4b11      	ldr	r3, [pc, #68]	; (8004e44 <parseMessage+0x10c>)
 8004e00:	775a      	strb	r2, [r3, #29]
    msg.checksum[0] = data[10+i];
 8004e02:	7bfb      	ldrb	r3, [r7, #15]
 8004e04:	330a      	adds	r3, #10
 8004e06:	461a      	mov	r2, r3
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	4413      	add	r3, r2
 8004e0c:	781a      	ldrb	r2, [r3, #0]
 8004e0e:	4b0d      	ldr	r3, [pc, #52]	; (8004e44 <parseMessage+0x10c>)
 8004e10:	771a      	strb	r2, [r3, #28]
    chsum = msg.checksum[0];
 8004e12:	4b0c      	ldr	r3, [pc, #48]	; (8004e44 <parseMessage+0x10c>)
 8004e14:	7f1b      	ldrb	r3, [r3, #28]
 8004e16:	73bb      	strb	r3, [r7, #14]
    calcChecksum();
 8004e18:	f7ff ff40 	bl	8004c9c <calcChecksum>
    if (chsum != msg.checksum[0]){
 8004e1c:	4b09      	ldr	r3, [pc, #36]	; (8004e44 <parseMessage+0x10c>)
 8004e1e:	7f1b      	ldrb	r3, [r3, #28]
 8004e20:	7bba      	ldrb	r2, [r7, #14]
 8004e22:	429a      	cmp	r2, r3
 8004e24:	d005      	beq.n	8004e32 <parseMessage+0xfa>
        sendNack(device);
 8004e26:	78fb      	ldrb	r3, [r7, #3]
 8004e28:	4618      	mov	r0, r3
 8004e2a:	f7ff fcf5 	bl	8004818 <sendNack>
        return 1;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	e004      	b.n	8004e3c <parseMessage+0x104>
    }
    sendAck(device);
 8004e32:	78fb      	ldrb	r3, [r7, #3]
 8004e34:	4618      	mov	r0, r3
 8004e36:	f7ff fd23 	bl	8004880 <sendAck>
//    HAL_Delay(22);
    return 0;                  //Note that after the parsing the escape chars remains in payload.
 8004e3a:	2300      	movs	r3, #0
}
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	3710      	adds	r7, #16
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bd80      	pop	{r7, pc}
 8004e44:	20000468 	.word	0x20000468
 8004e48:	20000464 	.word	0x20000464

08004e4c <handler>:



void handler(UART_select device){
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b082      	sub	sp, #8
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	4603      	mov	r3, r0
 8004e54:	71fb      	strb	r3, [r7, #7]
    switch (msg.cmd){
 8004e56:	4b3c      	ldr	r3, [pc, #240]	; (8004f48 <handler+0xfc>)
 8004e58:	795b      	ldrb	r3, [r3, #5]
 8004e5a:	2bc0      	cmp	r3, #192	; 0xc0
 8004e5c:	d068      	beq.n	8004f30 <handler+0xe4>
 8004e5e:	2bc0      	cmp	r3, #192	; 0xc0
 8004e60:	dc6c      	bgt.n	8004f3c <handler+0xf0>
 8004e62:	2ba0      	cmp	r3, #160	; 0xa0
 8004e64:	d05f      	beq.n	8004f26 <handler+0xda>
 8004e66:	2ba0      	cmp	r3, #160	; 0xa0
 8004e68:	dc68      	bgt.n	8004f3c <handler+0xf0>
 8004e6a:	2b80      	cmp	r3, #128	; 0x80
 8004e6c:	d053      	beq.n	8004f16 <handler+0xca>
 8004e6e:	2b80      	cmp	r3, #128	; 0x80
 8004e70:	dc64      	bgt.n	8004f3c <handler+0xf0>
 8004e72:	2b65      	cmp	r3, #101	; 0x65
 8004e74:	dc34      	bgt.n	8004ee0 <handler+0x94>
 8004e76:	2b50      	cmp	r3, #80	; 0x50
 8004e78:	db60      	blt.n	8004f3c <handler+0xf0>
 8004e7a:	3b50      	subs	r3, #80	; 0x50
 8004e7c:	2b15      	cmp	r3, #21
 8004e7e:	d85d      	bhi.n	8004f3c <handler+0xf0>
 8004e80:	a201      	add	r2, pc, #4	; (adr r2, 8004e88 <handler+0x3c>)
 8004e82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e86:	bf00      	nop
 8004e88:	08004ee7 	.word	0x08004ee7
 8004e8c:	08004f3d 	.word	0x08004f3d
 8004e90:	08004f3d 	.word	0x08004f3d
 8004e94:	08004f3d 	.word	0x08004f3d
 8004e98:	08004f3d 	.word	0x08004f3d
 8004e9c:	08004f3d 	.word	0x08004f3d
 8004ea0:	08004eef 	.word	0x08004eef
 8004ea4:	08004f3d 	.word	0x08004f3d
 8004ea8:	08004f3d 	.word	0x08004f3d
 8004eac:	08004f3d 	.word	0x08004f3d
 8004eb0:	08004f3d 	.word	0x08004f3d
 8004eb4:	08004f3d 	.word	0x08004f3d
 8004eb8:	08004f3d 	.word	0x08004f3d
 8004ebc:	08004f3d 	.word	0x08004f3d
 8004ec0:	08004f3d 	.word	0x08004f3d
 8004ec4:	08004f3d 	.word	0x08004f3d
 8004ec8:	08004f3d 	.word	0x08004f3d
 8004ecc:	08004f3d 	.word	0x08004f3d
 8004ed0:	08004f3d 	.word	0x08004f3d
 8004ed4:	08004f3d 	.word	0x08004f3d
 8004ed8:	08004f3d 	.word	0x08004f3d
 8004edc:	08004eff 	.word	0x08004eff
 8004ee0:	2b78      	cmp	r3, #120	; 0x78
 8004ee2:	d014      	beq.n	8004f0e <handler+0xc2>
        break;
    case 0xC0:
    	osThreadResume(gyroCalibrationTaskHandle);
    	break;
    default:
        break;
 8004ee4:	e02a      	b.n	8004f3c <handler+0xf0>
        flag_connected_toIris = 1;
 8004ee6:	4b19      	ldr	r3, [pc, #100]	; (8004f4c <handler+0x100>)
 8004ee8:	2201      	movs	r2, #1
 8004eea:	701a      	strb	r2, [r3, #0]
        break;
 8004eec:	e027      	b.n	8004f3e <handler+0xf2>
        ublox_transmit_message(msg.cmd, device);
 8004eee:	4b16      	ldr	r3, [pc, #88]	; (8004f48 <handler+0xfc>)
 8004ef0:	795b      	ldrb	r3, [r3, #5]
 8004ef2:	79fa      	ldrb	r2, [r7, #7]
 8004ef4:	4611      	mov	r1, r2
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	f7fe fa68 	bl	80033cc <ublox_transmit_message>
        break;
 8004efc:	e01f      	b.n	8004f3e <handler+0xf2>
        reportFW(msg.cmd, device);
 8004efe:	4b12      	ldr	r3, [pc, #72]	; (8004f48 <handler+0xfc>)
 8004f00:	795b      	ldrb	r3, [r3, #5]
 8004f02:	79fa      	ldrb	r2, [r7, #7]
 8004f04:	4611      	mov	r1, r2
 8004f06:	4618      	mov	r0, r3
 8004f08:	f000 f850 	bl	8004fac <reportFW>
        break;
 8004f0c:	e017      	b.n	8004f3e <handler+0xf2>
    	powerManageCfgSet(0x78);
 8004f0e:	2078      	movs	r0, #120	; 0x78
 8004f10:	f7fe fd02 	bl	8003918 <powerManageCfgSet>
        break;
 8004f14:	e013      	b.n	8004f3e <handler+0xf2>
        ublox_transmit_rtc(msg.cmd, device);
 8004f16:	4b0c      	ldr	r3, [pc, #48]	; (8004f48 <handler+0xfc>)
 8004f18:	795b      	ldrb	r3, [r3, #5]
 8004f1a:	79fa      	ldrb	r2, [r7, #7]
 8004f1c:	4611      	mov	r1, r2
 8004f1e:	4618      	mov	r0, r3
 8004f20:	f7fe fa40 	bl	80033a4 <ublox_transmit_rtc>
        break;
 8004f24:	e00b      	b.n	8004f3e <handler+0xf2>
        HAL_Delay(500);
 8004f26:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004f2a:	f000 ff97 	bl	8005e5c <HAL_Delay>
        break;
 8004f2e:	e006      	b.n	8004f3e <handler+0xf2>
    	osThreadResume(gyroCalibrationTaskHandle);
 8004f30:	4b07      	ldr	r3, [pc, #28]	; (8004f50 <handler+0x104>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4618      	mov	r0, r3
 8004f36:	f007 f801 	bl	800bf3c <osThreadResume>
    	break;
 8004f3a:	e000      	b.n	8004f3e <handler+0xf2>
        break;
 8004f3c:	bf00      	nop
    }
}
 8004f3e:	bf00      	nop
 8004f40:	3708      	adds	r7, #8
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd80      	pop	{r7, pc}
 8004f46:	bf00      	nop
 8004f48:	20000468 	.word	0x20000468
 8004f4c:	20000465 	.word	0x20000465
 8004f50:	20000448 	.word	0x20000448

08004f54 <init_message_t>:

void init_message_t(void){
 8004f54:	b580      	push	{r7, lr}
 8004f56:	af00      	add	r7, sp, #0
    msg.protocol_rev[0] = 0;
 8004f58:	4b12      	ldr	r3, [pc, #72]	; (8004fa4 <init_message_t+0x50>)
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	701a      	strb	r2, [r3, #0]
    msg.protocol_rev[1] = 0;
 8004f5e:	4b11      	ldr	r3, [pc, #68]	; (8004fa4 <init_message_t+0x50>)
 8004f60:	2200      	movs	r2, #0
 8004f62:	705a      	strb	r2, [r3, #1]
    msg.token = 0;
 8004f64:	4b0f      	ldr	r3, [pc, #60]	; (8004fa4 <init_message_t+0x50>)
 8004f66:	2200      	movs	r2, #0
 8004f68:	709a      	strb	r2, [r3, #2]
    msg.senderID[0] = 0;
 8004f6a:	4b0e      	ldr	r3, [pc, #56]	; (8004fa4 <init_message_t+0x50>)
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	70da      	strb	r2, [r3, #3]
    msg.senderID[1] = 0;
 8004f70:	4b0c      	ldr	r3, [pc, #48]	; (8004fa4 <init_message_t+0x50>)
 8004f72:	2200      	movs	r2, #0
 8004f74:	711a      	strb	r2, [r3, #4]
    msg.cmd = 0;
 8004f76:	4b0b      	ldr	r3, [pc, #44]	; (8004fa4 <init_message_t+0x50>)
 8004f78:	2200      	movs	r2, #0
 8004f7a:	715a      	strb	r2, [r3, #5]
    memset(msg.data, 0, 20);
 8004f7c:	2214      	movs	r2, #20
 8004f7e:	2100      	movs	r1, #0
 8004f80:	4809      	ldr	r0, [pc, #36]	; (8004fa8 <init_message_t+0x54>)
 8004f82:	f00b fd5a 	bl	8010a3a <memset>
    msg.checksum[0] = 0;
 8004f86:	4b07      	ldr	r3, [pc, #28]	; (8004fa4 <init_message_t+0x50>)
 8004f88:	2200      	movs	r2, #0
 8004f8a:	771a      	strb	r2, [r3, #28]
    msg.checksum[1] = 0;
 8004f8c:	4b05      	ldr	r3, [pc, #20]	; (8004fa4 <init_message_t+0x50>)
 8004f8e:	2200      	movs	r2, #0
 8004f90:	775a      	strb	r2, [r3, #29]
    msg.checksum[2] = 0;
 8004f92:	4b04      	ldr	r3, [pc, #16]	; (8004fa4 <init_message_t+0x50>)
 8004f94:	2200      	movs	r2, #0
 8004f96:	779a      	strb	r2, [r3, #30]
    msg.checksum[3] = 0;
 8004f98:	4b02      	ldr	r3, [pc, #8]	; (8004fa4 <init_message_t+0x50>)
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	77da      	strb	r2, [r3, #31]
}
 8004f9e:	bf00      	nop
 8004fa0:	bd80      	pop	{r7, pc}
 8004fa2:	bf00      	nop
 8004fa4:	20000468 	.word	0x20000468
 8004fa8:	20000470 	.word	0x20000470

08004fac <reportFW>:

void reportFW(uint8_t cmd, UART_select device){
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b084      	sub	sp, #16
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	460a      	mov	r2, r1
 8004fb6:	71fb      	strb	r3, [r7, #7]
 8004fb8:	4613      	mov	r3, r2
 8004fba:	71bb      	strb	r3, [r7, #6]
    uint8_t fwv[1] = {FW_VERSION};
 8004fbc:	236e      	movs	r3, #110	; 0x6e
 8004fbe:	733b      	strb	r3, [r7, #12]
    transmitMessage(fwv, 1, cmd, device);
 8004fc0:	79bb      	ldrb	r3, [r7, #6]
 8004fc2:	79fa      	ldrb	r2, [r7, #7]
 8004fc4:	f107 000c 	add.w	r0, r7, #12
 8004fc8:	2101      	movs	r1, #1
 8004fca:	f7ff fcc3 	bl	8004954 <transmitMessage>
}
 8004fce:	bf00      	nop
 8004fd0:	3710      	adds	r7, #16
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bd80      	pop	{r7, pc}

08004fd6 <RB_init>:

#include "ring_buffer.h"
#include <string.h>
#include "assert.h"

uint8_t RB_init(RB_t* rb, uint8_t size) {
 8004fd6:	b580      	push	{r7, lr}
 8004fd8:	b082      	sub	sp, #8
 8004fda:	af00      	add	r7, sp, #0
 8004fdc:	6078      	str	r0, [r7, #4]
 8004fde:	460b      	mov	r3, r1
 8004fe0:	70fb      	strb	r3, [r7, #3]
  memset(rb->buffer, 0, sizeof(uint8_t)*size);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	78fa      	ldrb	r2, [r7, #3]
 8004fe6:	2100      	movs	r1, #0
 8004fe8:	4618      	mov	r0, r3
 8004fea:	f00b fd26 	bl	8010a3a <memset>
//  rb->buffer = malloc(size * sizeof(char));
//
  if (!rb->buffer) {
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d101      	bne.n	8004ff8 <RB_init+0x22>
    return 0;
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	e00a      	b.n	800500e <RB_init+0x38>
  }
  rb->rdpos = 0;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	629a      	str	r2, [r3, #40]	; 0x28
  rb->wrpos = 0;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2200      	movs	r2, #0
 8005002:	62da      	str	r2, [r3, #44]	; 0x2c
  rb->size = size;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	78fa      	ldrb	r2, [r7, #3]
 8005008:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return 1;
 800500c:	2301      	movs	r3, #1
}
 800500e:	4618      	mov	r0, r3
 8005010:	3708      	adds	r7, #8
 8005012:	46bd      	mov	sp, r7
 8005014:	bd80      	pop	{r7, pc}

08005016 <RB_push>:
  rb->rdpos = 0;
  rb->wrpos = 0;
  memset(rb->buffer, 0, sizeof(rb->buffer));
}

void RB_push(RB_t* rb, uint8_t byte) {
 8005016:	b480      	push	{r7}
 8005018:	b083      	sub	sp, #12
 800501a:	af00      	add	r7, sp, #0
 800501c:	6078      	str	r0, [r7, #4]
 800501e:	460b      	mov	r3, r1
 8005020:	70fb      	strb	r3, [r7, #3]
  if ((rb->wrpos + 1) % rb->size == rb->rdpos) {
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005026:	3301      	adds	r3, #1
 8005028:	687a      	ldr	r2, [r7, #4]
 800502a:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 800502e:	fb93 f1f2 	sdiv	r1, r3, r2
 8005032:	fb01 f202 	mul.w	r2, r1, r2
 8005036:	1a9a      	subs	r2, r3, r2
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800503c:	429a      	cmp	r2, r3
 800503e:	d012      	beq.n	8005066 <RB_push+0x50>
    return;
  }

  rb->buffer[rb->wrpos] = byte;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005044:	687a      	ldr	r2, [r7, #4]
 8005046:	78f9      	ldrb	r1, [r7, #3]
 8005048:	54d1      	strb	r1, [r2, r3]
  rb->wrpos = (rb->wrpos + 1) % rb->size;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800504e:	3301      	adds	r3, #1
 8005050:	687a      	ldr	r2, [r7, #4]
 8005052:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 8005056:	fb93 f1f2 	sdiv	r1, r3, r2
 800505a:	fb01 f202 	mul.w	r2, r1, r2
 800505e:	1a9a      	subs	r2, r3, r2
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	62da      	str	r2, [r3, #44]	; 0x2c
 8005064:	e000      	b.n	8005068 <RB_push+0x52>
    return;
 8005066:	bf00      	nop
}
 8005068:	370c      	adds	r7, #12
 800506a:	46bd      	mov	sp, r7
 800506c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005070:	4770      	bx	lr

08005072 <RB_pop>:

uint8_t RB_pop(RB_t* rb) {
 8005072:	b480      	push	{r7}
 8005074:	b085      	sub	sp, #20
 8005076:	af00      	add	r7, sp, #0
 8005078:	6078      	str	r0, [r7, #4]
  if (rb->rdpos == rb->wrpos) return EOF;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005082:	429a      	cmp	r2, r3
 8005084:	d101      	bne.n	800508a <RB_pop+0x18>
 8005086:	23ff      	movs	r3, #255	; 0xff
 8005088:	e012      	b.n	80050b0 <RB_pop+0x3e>

  uint8_t byte = rb->buffer[rb->rdpos];
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800508e:	687a      	ldr	r2, [r7, #4]
 8005090:	5cd3      	ldrb	r3, [r2, r3]
 8005092:	73fb      	strb	r3, [r7, #15]
  rb->rdpos = (rb->rdpos + 1) % rb->size;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005098:	3301      	adds	r3, #1
 800509a:	687a      	ldr	r2, [r7, #4]
 800509c:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 80050a0:	fb93 f1f2 	sdiv	r1, r3, r2
 80050a4:	fb01 f202 	mul.w	r2, r1, r2
 80050a8:	1a9a      	subs	r2, r3, r2
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	629a      	str	r2, [r3, #40]	; 0x28

  return byte;
 80050ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80050b0:	4618      	mov	r0, r3
 80050b2:	3714      	adds	r7, #20
 80050b4:	46bd      	mov	sp, r7
 80050b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ba:	4770      	bx	lr

080050bc <RB_pushFront>:

void RB_pushFront(RB_t* rb, uint8_t byte) {
 80050bc:	b480      	push	{r7}
 80050be:	b085      	sub	sp, #20
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
 80050c4:	460b      	mov	r3, r1
 80050c6:	70fb      	strb	r3, [r7, #3]
  uint8_t newrpos = (rb->rdpos - 1) < 0 ? (rb->size - 1) : rb->rdpos - 1;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	dc05      	bgt.n	80050dc <RB_pushFront+0x20>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80050d6:	3b01      	subs	r3, #1
 80050d8:	b2db      	uxtb	r3, r3
 80050da:	e004      	b.n	80050e6 <RB_pushFront+0x2a>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050e0:	b2db      	uxtb	r3, r3
 80050e2:	3b01      	subs	r3, #1
 80050e4:	b2db      	uxtb	r3, r3
 80050e6:	73fb      	strb	r3, [r7, #15]

  if (newrpos == rb->wrpos) {
 80050e8:	7bfa      	ldrb	r2, [r7, #15]
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050ee:	429a      	cmp	r2, r3
 80050f0:	d008      	beq.n	8005104 <RB_pushFront+0x48>
    return;
  }

  rb->rdpos = newrpos;
 80050f2:	7bfa      	ldrb	r2, [r7, #15]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	629a      	str	r2, [r3, #40]	; 0x28
  rb->buffer[rb->rdpos] = byte;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050fc:	687a      	ldr	r2, [r7, #4]
 80050fe:	78f9      	ldrb	r1, [r7, #3]
 8005100:	54d1      	strb	r1, [r2, r3]
 8005102:	e000      	b.n	8005106 <RB_pushFront+0x4a>
    return;
 8005104:	bf00      	nop
}
 8005106:	3714      	adds	r7, #20
 8005108:	46bd      	mov	sp, r7
 800510a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510e:	4770      	bx	lr

08005110 <RB_size>:
  return rb->buffer[rb->wrpos];
}

uint8_t RB_capacity(RB_t* rb) { return rb->size; }

uint8_t RB_size(RB_t* rb) {
 8005110:	b480      	push	{r7}
 8005112:	b083      	sub	sp, #12
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
  return (rb->wrpos + rb->size - rb->rdpos) % rb->size;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800511c:	687a      	ldr	r2, [r7, #4]
 800511e:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 8005122:	441a      	add	r2, r3
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005128:	1ad3      	subs	r3, r2, r3
 800512a:	687a      	ldr	r2, [r7, #4]
 800512c:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 8005130:	fb93 f1f2 	sdiv	r1, r3, r2
 8005134:	fb01 f202 	mul.w	r2, r1, r2
 8005138:	1a9b      	subs	r3, r3, r2
 800513a:	b2db      	uxtb	r3, r3
}
 800513c:	4618      	mov	r0, r3
 800513e:	370c      	adds	r7, #12
 8005140:	46bd      	mov	sp, r7
 8005142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005146:	4770      	bx	lr

08005148 <RB_clear>:

uint8_t RB_isFull(RB_t* rb) {
  return ((rb->wrpos + 1) % rb->size == rb->rdpos);
}

void RB_clear(RB_t* rb) {
 8005148:	b580      	push	{r7, lr}
 800514a:	b082      	sub	sp, #8
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
  memset(rb->buffer, 0, sizeof(rb->buffer));
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2228      	movs	r2, #40	; 0x28
 8005154:	2100      	movs	r1, #0
 8005156:	4618      	mov	r0, r3
 8005158:	f00b fc6f 	bl	8010a3a <memset>
  rb->rdpos = 0;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2200      	movs	r2, #0
 8005160:	629a      	str	r2, [r3, #40]	; 0x28
  rb->wrpos = 0;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2200      	movs	r2, #0
 8005166:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005168:	bf00      	nop
 800516a:	3708      	adds	r7, #8
 800516c:	46bd      	mov	sp, r7
 800516e:	bd80      	pop	{r7, pc}

08005170 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b082      	sub	sp, #8
 8005174:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005176:	4b11      	ldr	r3, [pc, #68]	; (80051bc <HAL_MspInit+0x4c>)
 8005178:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800517a:	4a10      	ldr	r2, [pc, #64]	; (80051bc <HAL_MspInit+0x4c>)
 800517c:	f043 0301 	orr.w	r3, r3, #1
 8005180:	6613      	str	r3, [r2, #96]	; 0x60
 8005182:	4b0e      	ldr	r3, [pc, #56]	; (80051bc <HAL_MspInit+0x4c>)
 8005184:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005186:	f003 0301 	and.w	r3, r3, #1
 800518a:	607b      	str	r3, [r7, #4]
 800518c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800518e:	4b0b      	ldr	r3, [pc, #44]	; (80051bc <HAL_MspInit+0x4c>)
 8005190:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005192:	4a0a      	ldr	r2, [pc, #40]	; (80051bc <HAL_MspInit+0x4c>)
 8005194:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005198:	6593      	str	r3, [r2, #88]	; 0x58
 800519a:	4b08      	ldr	r3, [pc, #32]	; (80051bc <HAL_MspInit+0x4c>)
 800519c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800519e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051a2:	603b      	str	r3, [r7, #0]
 80051a4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80051a6:	2200      	movs	r2, #0
 80051a8:	210f      	movs	r1, #15
 80051aa:	f06f 0001 	mvn.w	r0, #1
 80051ae:	f000 ff31 	bl	8006014 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80051b2:	bf00      	nop
 80051b4:	3708      	adds	r7, #8
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bd80      	pop	{r7, pc}
 80051ba:	bf00      	nop
 80051bc:	40021000 	.word	0x40021000

080051c0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b0b0      	sub	sp, #192	; 0xc0
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80051c8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80051cc:	2200      	movs	r2, #0
 80051ce:	601a      	str	r2, [r3, #0]
 80051d0:	605a      	str	r2, [r3, #4]
 80051d2:	609a      	str	r2, [r3, #8]
 80051d4:	60da      	str	r2, [r3, #12]
 80051d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80051d8:	f107 0318 	add.w	r3, r7, #24
 80051dc:	2294      	movs	r2, #148	; 0x94
 80051de:	2100      	movs	r1, #0
 80051e0:	4618      	mov	r0, r3
 80051e2:	f00b fc2a 	bl	8010a3a <memset>
  if(hi2c->Instance==I2C2)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4a4a      	ldr	r2, [pc, #296]	; (8005314 <HAL_I2C_MspInit+0x154>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d144      	bne.n	800527a <HAL_I2C_MspInit+0xba>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80051f0:	2380      	movs	r3, #128	; 0x80
 80051f2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80051f4:	2300      	movs	r3, #0
 80051f6:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80051f8:	f107 0318 	add.w	r3, r7, #24
 80051fc:	4618      	mov	r0, r3
 80051fe:	f003 fcdd 	bl	8008bbc <HAL_RCCEx_PeriphCLKConfig>
 8005202:	4603      	mov	r3, r0
 8005204:	2b00      	cmp	r3, #0
 8005206:	d001      	beq.n	800520c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8005208:	f7ff fae0 	bl	80047cc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800520c:	4b42      	ldr	r3, [pc, #264]	; (8005318 <HAL_I2C_MspInit+0x158>)
 800520e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005210:	4a41      	ldr	r2, [pc, #260]	; (8005318 <HAL_I2C_MspInit+0x158>)
 8005212:	f043 0302 	orr.w	r3, r3, #2
 8005216:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005218:	4b3f      	ldr	r3, [pc, #252]	; (8005318 <HAL_I2C_MspInit+0x158>)
 800521a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800521c:	f003 0302 	and.w	r3, r3, #2
 8005220:	617b      	str	r3, [r7, #20]
 8005222:	697b      	ldr	r3, [r7, #20]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8005224:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005228:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800522c:	2312      	movs	r3, #18
 800522e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005232:	2300      	movs	r3, #0
 8005234:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005238:	2303      	movs	r3, #3
 800523a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800523e:	2304      	movs	r3, #4
 8005240:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005244:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8005248:	4619      	mov	r1, r3
 800524a:	4834      	ldr	r0, [pc, #208]	; (800531c <HAL_I2C_MspInit+0x15c>)
 800524c:	f001 fa88 	bl	8006760 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8005250:	4b31      	ldr	r3, [pc, #196]	; (8005318 <HAL_I2C_MspInit+0x158>)
 8005252:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005254:	4a30      	ldr	r2, [pc, #192]	; (8005318 <HAL_I2C_MspInit+0x158>)
 8005256:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800525a:	6593      	str	r3, [r2, #88]	; 0x58
 800525c:	4b2e      	ldr	r3, [pc, #184]	; (8005318 <HAL_I2C_MspInit+0x158>)
 800525e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005260:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005264:	613b      	str	r3, [r7, #16]
 8005266:	693b      	ldr	r3, [r7, #16]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 5, 0);
 8005268:	2200      	movs	r2, #0
 800526a:	2105      	movs	r1, #5
 800526c:	2021      	movs	r0, #33	; 0x21
 800526e:	f000 fed1 	bl	8006014 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8005272:	2021      	movs	r0, #33	; 0x21
 8005274:	f000 feea 	bl	800604c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8005278:	e048      	b.n	800530c <HAL_I2C_MspInit+0x14c>
  else if(hi2c->Instance==I2C1)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a28      	ldr	r2, [pc, #160]	; (8005320 <HAL_I2C_MspInit+0x160>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d143      	bne.n	800530c <HAL_I2C_MspInit+0x14c>
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8005284:	2340      	movs	r3, #64	; 0x40
 8005286:	61bb      	str	r3, [r7, #24]
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8005288:	2300      	movs	r3, #0
 800528a:	66fb      	str	r3, [r7, #108]	; 0x6c
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800528c:	f107 0318 	add.w	r3, r7, #24
 8005290:	4618      	mov	r0, r3
 8005292:	f003 fc93 	bl	8008bbc <HAL_RCCEx_PeriphCLKConfig>
 8005296:	4603      	mov	r3, r0
 8005298:	2b00      	cmp	r3, #0
 800529a:	d001      	beq.n	80052a0 <HAL_I2C_MspInit+0xe0>
	  Error_Handler();
 800529c:	f7ff fa96 	bl	80047cc <Error_Handler>
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80052a0:	4b1d      	ldr	r3, [pc, #116]	; (8005318 <HAL_I2C_MspInit+0x158>)
 80052a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052a4:	4a1c      	ldr	r2, [pc, #112]	; (8005318 <HAL_I2C_MspInit+0x158>)
 80052a6:	f043 0302 	orr.w	r3, r3, #2
 80052aa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80052ac:	4b1a      	ldr	r3, [pc, #104]	; (8005318 <HAL_I2C_MspInit+0x158>)
 80052ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052b0:	f003 0302 	and.w	r3, r3, #2
 80052b4:	60fb      	str	r3, [r7, #12]
 80052b6:	68fb      	ldr	r3, [r7, #12]
	GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 80052b8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80052bc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80052c0:	2312      	movs	r3, #18
 80052c2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80052c6:	2301      	movs	r3, #1
 80052c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80052cc:	2303      	movs	r3, #3
 80052ce:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80052d2:	2304      	movs	r3, #4
 80052d4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80052d8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80052dc:	4619      	mov	r1, r3
 80052de:	480f      	ldr	r0, [pc, #60]	; (800531c <HAL_I2C_MspInit+0x15c>)
 80052e0:	f001 fa3e 	bl	8006760 <HAL_GPIO_Init>
	__HAL_RCC_I2C1_CLK_ENABLE();
 80052e4:	4b0c      	ldr	r3, [pc, #48]	; (8005318 <HAL_I2C_MspInit+0x158>)
 80052e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052e8:	4a0b      	ldr	r2, [pc, #44]	; (8005318 <HAL_I2C_MspInit+0x158>)
 80052ea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80052ee:	6593      	str	r3, [r2, #88]	; 0x58
 80052f0:	4b09      	ldr	r3, [pc, #36]	; (8005318 <HAL_I2C_MspInit+0x158>)
 80052f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80052f8:	60bb      	str	r3, [r7, #8]
 80052fa:	68bb      	ldr	r3, [r7, #8]
	HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 80052fc:	2200      	movs	r2, #0
 80052fe:	2105      	movs	r1, #5
 8005300:	201f      	movs	r0, #31
 8005302:	f000 fe87 	bl	8006014 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8005306:	201f      	movs	r0, #31
 8005308:	f000 fea0 	bl	800604c <HAL_NVIC_EnableIRQ>
}
 800530c:	bf00      	nop
 800530e:	37c0      	adds	r7, #192	; 0xc0
 8005310:	46bd      	mov	sp, r7
 8005312:	bd80      	pop	{r7, pc}
 8005314:	40005800 	.word	0x40005800
 8005318:	40021000 	.word	0x40021000
 800531c:	48000400 	.word	0x48000400
 8005320:	40005400 	.word	0x40005400

08005324 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b0b4      	sub	sp, #208	; 0xd0
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800532c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8005330:	2200      	movs	r2, #0
 8005332:	601a      	str	r2, [r3, #0]
 8005334:	605a      	str	r2, [r3, #4]
 8005336:	609a      	str	r2, [r3, #8]
 8005338:	60da      	str	r2, [r3, #12]
 800533a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800533c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005340:	2294      	movs	r2, #148	; 0x94
 8005342:	2100      	movs	r1, #0
 8005344:	4618      	mov	r0, r3
 8005346:	f00b fb78 	bl	8010a3a <memset>
  if(huart->Instance==UART4)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4a8b      	ldr	r2, [pc, #556]	; (800557c <HAL_UART_MspInit+0x258>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d144      	bne.n	80053de <HAL_UART_MspInit+0xba>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8005354:	2308      	movs	r3, #8
 8005356:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8005358:	2300      	movs	r3, #0
 800535a:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800535c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005360:	4618      	mov	r0, r3
 8005362:	f003 fc2b 	bl	8008bbc <HAL_RCCEx_PeriphCLKConfig>
 8005366:	4603      	mov	r3, r0
 8005368:	2b00      	cmp	r3, #0
 800536a:	d001      	beq.n	8005370 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800536c:	f7ff fa2e 	bl	80047cc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8005370:	4b83      	ldr	r3, [pc, #524]	; (8005580 <HAL_UART_MspInit+0x25c>)
 8005372:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005374:	4a82      	ldr	r2, [pc, #520]	; (8005580 <HAL_UART_MspInit+0x25c>)
 8005376:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800537a:	6593      	str	r3, [r2, #88]	; 0x58
 800537c:	4b80      	ldr	r3, [pc, #512]	; (8005580 <HAL_UART_MspInit+0x25c>)
 800537e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005380:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005384:	627b      	str	r3, [r7, #36]	; 0x24
 8005386:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005388:	4b7d      	ldr	r3, [pc, #500]	; (8005580 <HAL_UART_MspInit+0x25c>)
 800538a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800538c:	4a7c      	ldr	r2, [pc, #496]	; (8005580 <HAL_UART_MspInit+0x25c>)
 800538e:	f043 0301 	orr.w	r3, r3, #1
 8005392:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005394:	4b7a      	ldr	r3, [pc, #488]	; (8005580 <HAL_UART_MspInit+0x25c>)
 8005396:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005398:	f003 0301 	and.w	r3, r3, #1
 800539c:	623b      	str	r3, [r7, #32]
 800539e:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 80053a0:	2303      	movs	r3, #3
 80053a2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053a6:	2302      	movs	r3, #2
 80053a8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053ac:	2300      	movs	r3, #0
 80053ae:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80053b2:	2303      	movs	r3, #3
 80053b4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80053b8:	2308      	movs	r3, #8
 80053ba:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80053be:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80053c2:	4619      	mov	r1, r3
 80053c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80053c8:	f001 f9ca 	bl	8006760 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 80053cc:	2200      	movs	r2, #0
 80053ce:	2105      	movs	r1, #5
 80053d0:	2034      	movs	r0, #52	; 0x34
 80053d2:	f000 fe1f 	bl	8006014 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80053d6:	2034      	movs	r0, #52	; 0x34
 80053d8:	f000 fe38 	bl	800604c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80053dc:	e0ca      	b.n	8005574 <HAL_UART_MspInit+0x250>
  else if(huart->Instance==USART1)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4a68      	ldr	r2, [pc, #416]	; (8005584 <HAL_UART_MspInit+0x260>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d143      	bne.n	8005470 <HAL_UART_MspInit+0x14c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80053e8:	2301      	movs	r3, #1
 80053ea:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80053ec:	2300      	movs	r3, #0
 80053ee:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80053f0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80053f4:	4618      	mov	r0, r3
 80053f6:	f003 fbe1 	bl	8008bbc <HAL_RCCEx_PeriphCLKConfig>
 80053fa:	4603      	mov	r3, r0
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d001      	beq.n	8005404 <HAL_UART_MspInit+0xe0>
      Error_Handler();
 8005400:	f7ff f9e4 	bl	80047cc <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8005404:	4b5e      	ldr	r3, [pc, #376]	; (8005580 <HAL_UART_MspInit+0x25c>)
 8005406:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005408:	4a5d      	ldr	r2, [pc, #372]	; (8005580 <HAL_UART_MspInit+0x25c>)
 800540a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800540e:	6613      	str	r3, [r2, #96]	; 0x60
 8005410:	4b5b      	ldr	r3, [pc, #364]	; (8005580 <HAL_UART_MspInit+0x25c>)
 8005412:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005414:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005418:	61fb      	str	r3, [r7, #28]
 800541a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800541c:	4b58      	ldr	r3, [pc, #352]	; (8005580 <HAL_UART_MspInit+0x25c>)
 800541e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005420:	4a57      	ldr	r2, [pc, #348]	; (8005580 <HAL_UART_MspInit+0x25c>)
 8005422:	f043 0302 	orr.w	r3, r3, #2
 8005426:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005428:	4b55      	ldr	r3, [pc, #340]	; (8005580 <HAL_UART_MspInit+0x25c>)
 800542a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800542c:	f003 0302 	and.w	r3, r3, #2
 8005430:	61bb      	str	r3, [r7, #24]
 8005432:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8005434:	23c0      	movs	r3, #192	; 0xc0
 8005436:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800543a:	2302      	movs	r3, #2
 800543c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005440:	2300      	movs	r3, #0
 8005442:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005446:	2303      	movs	r3, #3
 8005448:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800544c:	2307      	movs	r3, #7
 800544e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005452:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8005456:	4619      	mov	r1, r3
 8005458:	484b      	ldr	r0, [pc, #300]	; (8005588 <HAL_UART_MspInit+0x264>)
 800545a:	f001 f981 	bl	8006760 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800545e:	2200      	movs	r2, #0
 8005460:	2105      	movs	r1, #5
 8005462:	2025      	movs	r0, #37	; 0x25
 8005464:	f000 fdd6 	bl	8006014 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005468:	2025      	movs	r0, #37	; 0x25
 800546a:	f000 fdef 	bl	800604c <HAL_NVIC_EnableIRQ>
}
 800546e:	e081      	b.n	8005574 <HAL_UART_MspInit+0x250>
  else if(huart->Instance==USART2)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a45      	ldr	r2, [pc, #276]	; (800558c <HAL_UART_MspInit+0x268>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d13b      	bne.n	80054f2 <HAL_UART_MspInit+0x1ce>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800547a:	2302      	movs	r3, #2
 800547c:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800547e:	2300      	movs	r3, #0
 8005480:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005482:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005486:	4618      	mov	r0, r3
 8005488:	f003 fb98 	bl	8008bbc <HAL_RCCEx_PeriphCLKConfig>
 800548c:	4603      	mov	r3, r0
 800548e:	2b00      	cmp	r3, #0
 8005490:	d001      	beq.n	8005496 <HAL_UART_MspInit+0x172>
      Error_Handler();
 8005492:	f7ff f99b 	bl	80047cc <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8005496:	4b3a      	ldr	r3, [pc, #232]	; (8005580 <HAL_UART_MspInit+0x25c>)
 8005498:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800549a:	4a39      	ldr	r2, [pc, #228]	; (8005580 <HAL_UART_MspInit+0x25c>)
 800549c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80054a0:	6593      	str	r3, [r2, #88]	; 0x58
 80054a2:	4b37      	ldr	r3, [pc, #220]	; (8005580 <HAL_UART_MspInit+0x25c>)
 80054a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054aa:	617b      	str	r3, [r7, #20]
 80054ac:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80054ae:	4b34      	ldr	r3, [pc, #208]	; (8005580 <HAL_UART_MspInit+0x25c>)
 80054b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054b2:	4a33      	ldr	r2, [pc, #204]	; (8005580 <HAL_UART_MspInit+0x25c>)
 80054b4:	f043 0308 	orr.w	r3, r3, #8
 80054b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80054ba:	4b31      	ldr	r3, [pc, #196]	; (8005580 <HAL_UART_MspInit+0x25c>)
 80054bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054be:	f003 0308 	and.w	r3, r3, #8
 80054c2:	613b      	str	r3, [r7, #16]
 80054c4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 80054c6:	2378      	movs	r3, #120	; 0x78
 80054c8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054cc:	2302      	movs	r3, #2
 80054ce:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054d2:	2300      	movs	r3, #0
 80054d4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80054d8:	2303      	movs	r3, #3
 80054da:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80054de:	2307      	movs	r3, #7
 80054e0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80054e4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80054e8:	4619      	mov	r1, r3
 80054ea:	4829      	ldr	r0, [pc, #164]	; (8005590 <HAL_UART_MspInit+0x26c>)
 80054ec:	f001 f938 	bl	8006760 <HAL_GPIO_Init>
}
 80054f0:	e040      	b.n	8005574 <HAL_UART_MspInit+0x250>
  else if(huart->Instance==USART3)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4a27      	ldr	r2, [pc, #156]	; (8005594 <HAL_UART_MspInit+0x270>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d13b      	bne.n	8005574 <HAL_UART_MspInit+0x250>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80054fc:	2304      	movs	r3, #4
 80054fe:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8005500:	2300      	movs	r3, #0
 8005502:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005504:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005508:	4618      	mov	r0, r3
 800550a:	f003 fb57 	bl	8008bbc <HAL_RCCEx_PeriphCLKConfig>
 800550e:	4603      	mov	r3, r0
 8005510:	2b00      	cmp	r3, #0
 8005512:	d001      	beq.n	8005518 <HAL_UART_MspInit+0x1f4>
      Error_Handler();
 8005514:	f7ff f95a 	bl	80047cc <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8005518:	4b19      	ldr	r3, [pc, #100]	; (8005580 <HAL_UART_MspInit+0x25c>)
 800551a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800551c:	4a18      	ldr	r2, [pc, #96]	; (8005580 <HAL_UART_MspInit+0x25c>)
 800551e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005522:	6593      	str	r3, [r2, #88]	; 0x58
 8005524:	4b16      	ldr	r3, [pc, #88]	; (8005580 <HAL_UART_MspInit+0x25c>)
 8005526:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005528:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800552c:	60fb      	str	r3, [r7, #12]
 800552e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005530:	4b13      	ldr	r3, [pc, #76]	; (8005580 <HAL_UART_MspInit+0x25c>)
 8005532:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005534:	4a12      	ldr	r2, [pc, #72]	; (8005580 <HAL_UART_MspInit+0x25c>)
 8005536:	f043 0308 	orr.w	r3, r3, #8
 800553a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800553c:	4b10      	ldr	r3, [pc, #64]	; (8005580 <HAL_UART_MspInit+0x25c>)
 800553e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005540:	f003 0308 	and.w	r3, r3, #8
 8005544:	60bb      	str	r3, [r7, #8]
 8005546:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8005548:	f44f 7340 	mov.w	r3, #768	; 0x300
 800554c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005550:	2302      	movs	r3, #2
 8005552:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005556:	2300      	movs	r3, #0
 8005558:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800555c:	2303      	movs	r3, #3
 800555e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005562:	2307      	movs	r3, #7
 8005564:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005568:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800556c:	4619      	mov	r1, r3
 800556e:	4808      	ldr	r0, [pc, #32]	; (8005590 <HAL_UART_MspInit+0x26c>)
 8005570:	f001 f8f6 	bl	8006760 <HAL_GPIO_Init>
}
 8005574:	bf00      	nop
 8005576:	37d0      	adds	r7, #208	; 0xd0
 8005578:	46bd      	mov	sp, r7
 800557a:	bd80      	pop	{r7, pc}
 800557c:	40004c00 	.word	0x40004c00
 8005580:	40021000 	.word	0x40021000
 8005584:	40013800 	.word	0x40013800
 8005588:	48000400 	.word	0x48000400
 800558c:	40004400 	.word	0x40004400
 8005590:	48000c00 	.word	0x48000c00
 8005594:	40004800 	.word	0x40004800

08005598 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b08c      	sub	sp, #48	; 0x30
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80055a0:	2300      	movs	r3, #0
 80055a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80055a6:	4b2e      	ldr	r3, [pc, #184]	; (8005660 <HAL_InitTick+0xc8>)
 80055a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055aa:	4a2d      	ldr	r2, [pc, #180]	; (8005660 <HAL_InitTick+0xc8>)
 80055ac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80055b0:	6613      	str	r3, [r2, #96]	; 0x60
 80055b2:	4b2b      	ldr	r3, [pc, #172]	; (8005660 <HAL_InitTick+0xc8>)
 80055b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055ba:	60bb      	str	r3, [r7, #8]
 80055bc:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80055be:	f107 020c 	add.w	r2, r7, #12
 80055c2:	f107 0310 	add.w	r3, r7, #16
 80055c6:	4611      	mov	r1, r2
 80055c8:	4618      	mov	r0, r3
 80055ca:	f003 fa05 	bl	80089d8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80055ce:	f003 f9ed 	bl	80089ac <HAL_RCC_GetPCLK2Freq>
 80055d2:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80055d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055d6:	4a23      	ldr	r2, [pc, #140]	; (8005664 <HAL_InitTick+0xcc>)
 80055d8:	fba2 2303 	umull	r2, r3, r2, r3
 80055dc:	0c9b      	lsrs	r3, r3, #18
 80055de:	3b01      	subs	r3, #1
 80055e0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80055e2:	4b21      	ldr	r3, [pc, #132]	; (8005668 <HAL_InitTick+0xd0>)
 80055e4:	4a21      	ldr	r2, [pc, #132]	; (800566c <HAL_InitTick+0xd4>)
 80055e6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80055e8:	4b1f      	ldr	r3, [pc, #124]	; (8005668 <HAL_InitTick+0xd0>)
 80055ea:	f240 32e7 	movw	r2, #999	; 0x3e7
 80055ee:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80055f0:	4a1d      	ldr	r2, [pc, #116]	; (8005668 <HAL_InitTick+0xd0>)
 80055f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f4:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80055f6:	4b1c      	ldr	r3, [pc, #112]	; (8005668 <HAL_InitTick+0xd0>)
 80055f8:	2200      	movs	r2, #0
 80055fa:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80055fc:	4b1a      	ldr	r3, [pc, #104]	; (8005668 <HAL_InitTick+0xd0>)
 80055fe:	2200      	movs	r2, #0
 8005600:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005602:	4b19      	ldr	r3, [pc, #100]	; (8005668 <HAL_InitTick+0xd0>)
 8005604:	2200      	movs	r2, #0
 8005606:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8005608:	4817      	ldr	r0, [pc, #92]	; (8005668 <HAL_InitTick+0xd0>)
 800560a:	f003 ffef 	bl	80095ec <HAL_TIM_Base_Init>
 800560e:	4603      	mov	r3, r0
 8005610:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8005614:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005618:	2b00      	cmp	r3, #0
 800561a:	d11b      	bne.n	8005654 <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800561c:	4812      	ldr	r0, [pc, #72]	; (8005668 <HAL_InitTick+0xd0>)
 800561e:	f004 f847 	bl	80096b0 <HAL_TIM_Base_Start_IT>
 8005622:	4603      	mov	r3, r0
 8005624:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8005628:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800562c:	2b00      	cmp	r3, #0
 800562e:	d111      	bne.n	8005654 <HAL_InitTick+0xbc>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8005630:	2019      	movs	r0, #25
 8005632:	f000 fd0b 	bl	800604c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2b0f      	cmp	r3, #15
 800563a:	d808      	bhi.n	800564e <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 800563c:	2200      	movs	r2, #0
 800563e:	6879      	ldr	r1, [r7, #4]
 8005640:	2019      	movs	r0, #25
 8005642:	f000 fce7 	bl	8006014 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005646:	4a0a      	ldr	r2, [pc, #40]	; (8005670 <HAL_InitTick+0xd8>)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6013      	str	r3, [r2, #0]
 800564c:	e002      	b.n	8005654 <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 800564e:	2301      	movs	r3, #1
 8005650:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8005654:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8005658:	4618      	mov	r0, r3
 800565a:	3730      	adds	r7, #48	; 0x30
 800565c:	46bd      	mov	sp, r7
 800565e:	bd80      	pop	{r7, pc}
 8005660:	40021000 	.word	0x40021000
 8005664:	431bde83 	.word	0x431bde83
 8005668:	20000488 	.word	0x20000488
 800566c:	40012c00 	.word	0x40012c00
 8005670:	20000040 	.word	0x20000040

08005674 <NMI_Handler>:

/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005674:	b480      	push	{r7}
 8005676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005678:	e7fe      	b.n	8005678 <NMI_Handler+0x4>

0800567a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800567a:	b480      	push	{r7}
 800567c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800567e:	e7fe      	b.n	800567e <HardFault_Handler+0x4>

08005680 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005680:	b480      	push	{r7}
 8005682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005684:	e7fe      	b.n	8005684 <MemManage_Handler+0x4>

08005686 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005686:	b480      	push	{r7}
 8005688:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800568a:	e7fe      	b.n	800568a <BusFault_Handler+0x4>

0800568c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800568c:	b480      	push	{r7}
 800568e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005690:	e7fe      	b.n	8005690 <UsageFault_Handler+0x4>

08005692 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005692:	b480      	push	{r7}
 8005694:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005696:	bf00      	nop
 8005698:	46bd      	mov	sp, r7
 800569a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569e:	4770      	bx	lr

080056a0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 80056a4:	2020      	movs	r0, #32
 80056a6:	f001 fa1f 	bl	8006ae8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 80056aa:	2040      	movs	r0, #64	; 0x40
 80056ac:	f001 fa1c 	bl	8006ae8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 80056b0:	2080      	movs	r0, #128	; 0x80
 80056b2:	f001 fa19 	bl	8006ae8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 80056b6:	f44f 7080 	mov.w	r0, #256	; 0x100
 80056ba:	f001 fa15 	bl	8006ae8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80056be:	bf00      	nop
 80056c0:	bd80      	pop	{r7, pc}
	...

080056c4 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80056c8:	4802      	ldr	r0, [pc, #8]	; (80056d4 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80056ca:	f004 f861 	bl	8009790 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80056ce:	bf00      	nop
 80056d0:	bd80      	pop	{r7, pc}
 80056d2:	bf00      	nop
 80056d4:	20000488 	.word	0x20000488

080056d8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80056dc:	4802      	ldr	r0, [pc, #8]	; (80056e8 <I2C1_EV_IRQHandler+0x10>)
 80056de:	f001 fecd 	bl	800747c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80056e2:	bf00      	nop
 80056e4:	bd80      	pop	{r7, pc}
 80056e6:	bf00      	nop
 80056e8:	200002fc 	.word	0x200002fc

080056ec <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 80056f0:	4802      	ldr	r0, [pc, #8]	; (80056fc <I2C2_EV_IRQHandler+0x10>)
 80056f2:	f001 fec3 	bl	800747c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 80056f6:	bf00      	nop
 80056f8:	bd80      	pop	{r7, pc}
 80056fa:	bf00      	nop
 80056fc:	200003c8 	.word	0x200003c8

08005700 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8005704:	4802      	ldr	r0, [pc, #8]	; (8005710 <USART1_IRQHandler+0x10>)
 8005706:	f004 fb81 	bl	8009e0c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800570a:	bf00      	nop
 800570c:	bd80      	pop	{r7, pc}
 800570e:	bf00      	nop
 8005710:	200004d8 	.word	0x200004d8

08005714 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8005718:	4802      	ldr	r0, [pc, #8]	; (8005724 <UART4_IRQHandler+0x10>)
 800571a:	f004 fb77 	bl	8009e0c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800571e:	bf00      	nop
 8005720:	bd80      	pop	{r7, pc}
 8005722:	bf00      	nop
 8005724:	20000568 	.word	0x20000568

08005728 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI10_Pin);
 800572c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8005730:	f001 f9da 	bl	8006ae8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8005734:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005738:	f001 f9d6 	bl	8006ae8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(USB_OTG_FS_PWR_EN_Pin);
 800573c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8005740:	f001 f9d2 	bl	8006ae8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 8005744:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8005748:	f001 f9ce 	bl	8006ae8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 800574c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8005750:	f001 f9ca 	bl	8006ae8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 8005754:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8005758:	f001 f9c6 	bl	8006ae8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800575c:	bf00      	nop
 800575e:	bd80      	pop	{r7, pc}

08005760 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005760:	b480      	push	{r7}
 8005762:	af00      	add	r7, sp, #0
  return 1;
 8005764:	2301      	movs	r3, #1
}
 8005766:	4618      	mov	r0, r3
 8005768:	46bd      	mov	sp, r7
 800576a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576e:	4770      	bx	lr

08005770 <_kill>:

int _kill(int pid, int sig)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b082      	sub	sp, #8
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
 8005778:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800577a:	f00b f9c1 	bl	8010b00 <__errno>
 800577e:	4603      	mov	r3, r0
 8005780:	2216      	movs	r2, #22
 8005782:	601a      	str	r2, [r3, #0]
  return -1;
 8005784:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005788:	4618      	mov	r0, r3
 800578a:	3708      	adds	r7, #8
 800578c:	46bd      	mov	sp, r7
 800578e:	bd80      	pop	{r7, pc}

08005790 <_exit>:

void _exit (int status)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b082      	sub	sp, #8
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8005798:	f04f 31ff 	mov.w	r1, #4294967295
 800579c:	6878      	ldr	r0, [r7, #4]
 800579e:	f7ff ffe7 	bl	8005770 <_kill>
  while (1) {}    /* Make sure we hang here */
 80057a2:	e7fe      	b.n	80057a2 <_exit+0x12>

080057a4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b086      	sub	sp, #24
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	60f8      	str	r0, [r7, #12]
 80057ac:	60b9      	str	r1, [r7, #8]
 80057ae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80057b0:	2300      	movs	r3, #0
 80057b2:	617b      	str	r3, [r7, #20]
 80057b4:	e00a      	b.n	80057cc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80057b6:	f3af 8000 	nop.w
 80057ba:	4601      	mov	r1, r0
 80057bc:	68bb      	ldr	r3, [r7, #8]
 80057be:	1c5a      	adds	r2, r3, #1
 80057c0:	60ba      	str	r2, [r7, #8]
 80057c2:	b2ca      	uxtb	r2, r1
 80057c4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80057c6:	697b      	ldr	r3, [r7, #20]
 80057c8:	3301      	adds	r3, #1
 80057ca:	617b      	str	r3, [r7, #20]
 80057cc:	697a      	ldr	r2, [r7, #20]
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	429a      	cmp	r2, r3
 80057d2:	dbf0      	blt.n	80057b6 <_read+0x12>
  }

  return len;
 80057d4:	687b      	ldr	r3, [r7, #4]
}
 80057d6:	4618      	mov	r0, r3
 80057d8:	3718      	adds	r7, #24
 80057da:	46bd      	mov	sp, r7
 80057dc:	bd80      	pop	{r7, pc}

080057de <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80057de:	b580      	push	{r7, lr}
 80057e0:	b086      	sub	sp, #24
 80057e2:	af00      	add	r7, sp, #0
 80057e4:	60f8      	str	r0, [r7, #12]
 80057e6:	60b9      	str	r1, [r7, #8]
 80057e8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80057ea:	2300      	movs	r3, #0
 80057ec:	617b      	str	r3, [r7, #20]
 80057ee:	e009      	b.n	8005804 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	1c5a      	adds	r2, r3, #1
 80057f4:	60ba      	str	r2, [r7, #8]
 80057f6:	781b      	ldrb	r3, [r3, #0]
 80057f8:	4618      	mov	r0, r3
 80057fa:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80057fe:	697b      	ldr	r3, [r7, #20]
 8005800:	3301      	adds	r3, #1
 8005802:	617b      	str	r3, [r7, #20]
 8005804:	697a      	ldr	r2, [r7, #20]
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	429a      	cmp	r2, r3
 800580a:	dbf1      	blt.n	80057f0 <_write+0x12>
  }
  return len;
 800580c:	687b      	ldr	r3, [r7, #4]
}
 800580e:	4618      	mov	r0, r3
 8005810:	3718      	adds	r7, #24
 8005812:	46bd      	mov	sp, r7
 8005814:	bd80      	pop	{r7, pc}

08005816 <_close>:

int _close(int file)
{
 8005816:	b480      	push	{r7}
 8005818:	b083      	sub	sp, #12
 800581a:	af00      	add	r7, sp, #0
 800581c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800581e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005822:	4618      	mov	r0, r3
 8005824:	370c      	adds	r7, #12
 8005826:	46bd      	mov	sp, r7
 8005828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582c:	4770      	bx	lr

0800582e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800582e:	b480      	push	{r7}
 8005830:	b083      	sub	sp, #12
 8005832:	af00      	add	r7, sp, #0
 8005834:	6078      	str	r0, [r7, #4]
 8005836:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800583e:	605a      	str	r2, [r3, #4]
  return 0;
 8005840:	2300      	movs	r3, #0
}
 8005842:	4618      	mov	r0, r3
 8005844:	370c      	adds	r7, #12
 8005846:	46bd      	mov	sp, r7
 8005848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584c:	4770      	bx	lr

0800584e <_isatty>:

int _isatty(int file)
{
 800584e:	b480      	push	{r7}
 8005850:	b083      	sub	sp, #12
 8005852:	af00      	add	r7, sp, #0
 8005854:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8005856:	2301      	movs	r3, #1
}
 8005858:	4618      	mov	r0, r3
 800585a:	370c      	adds	r7, #12
 800585c:	46bd      	mov	sp, r7
 800585e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005862:	4770      	bx	lr

08005864 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005864:	b480      	push	{r7}
 8005866:	b085      	sub	sp, #20
 8005868:	af00      	add	r7, sp, #0
 800586a:	60f8      	str	r0, [r7, #12]
 800586c:	60b9      	str	r1, [r7, #8]
 800586e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8005870:	2300      	movs	r3, #0
}
 8005872:	4618      	mov	r0, r3
 8005874:	3714      	adds	r7, #20
 8005876:	46bd      	mov	sp, r7
 8005878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587c:	4770      	bx	lr
	...

08005880 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b086      	sub	sp, #24
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005888:	4a14      	ldr	r2, [pc, #80]	; (80058dc <_sbrk+0x5c>)
 800588a:	4b15      	ldr	r3, [pc, #84]	; (80058e0 <_sbrk+0x60>)
 800588c:	1ad3      	subs	r3, r2, r3
 800588e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005890:	697b      	ldr	r3, [r7, #20]
 8005892:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005894:	4b13      	ldr	r3, [pc, #76]	; (80058e4 <_sbrk+0x64>)
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d102      	bne.n	80058a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800589c:	4b11      	ldr	r3, [pc, #68]	; (80058e4 <_sbrk+0x64>)
 800589e:	4a12      	ldr	r2, [pc, #72]	; (80058e8 <_sbrk+0x68>)
 80058a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80058a2:	4b10      	ldr	r3, [pc, #64]	; (80058e4 <_sbrk+0x64>)
 80058a4:	681a      	ldr	r2, [r3, #0]
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	4413      	add	r3, r2
 80058aa:	693a      	ldr	r2, [r7, #16]
 80058ac:	429a      	cmp	r2, r3
 80058ae:	d207      	bcs.n	80058c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80058b0:	f00b f926 	bl	8010b00 <__errno>
 80058b4:	4603      	mov	r3, r0
 80058b6:	220c      	movs	r2, #12
 80058b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80058ba:	f04f 33ff 	mov.w	r3, #4294967295
 80058be:	e009      	b.n	80058d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80058c0:	4b08      	ldr	r3, [pc, #32]	; (80058e4 <_sbrk+0x64>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80058c6:	4b07      	ldr	r3, [pc, #28]	; (80058e4 <_sbrk+0x64>)
 80058c8:	681a      	ldr	r2, [r3, #0]
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	4413      	add	r3, r2
 80058ce:	4a05      	ldr	r2, [pc, #20]	; (80058e4 <_sbrk+0x64>)
 80058d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80058d2:	68fb      	ldr	r3, [r7, #12]
}
 80058d4:	4618      	mov	r0, r3
 80058d6:	3718      	adds	r7, #24
 80058d8:	46bd      	mov	sp, r7
 80058da:	bd80      	pop	{r7, pc}
 80058dc:	200a0000 	.word	0x200a0000
 80058e0:	00000400 	.word	0x00000400
 80058e4:	200004d4 	.word	0x200004d4
 80058e8:	20006508 	.word	0x20006508

080058ec <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80058ec:	b480      	push	{r7}
 80058ee:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80058f0:	4b06      	ldr	r3, [pc, #24]	; (800590c <SystemInit+0x20>)
 80058f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058f6:	4a05      	ldr	r2, [pc, #20]	; (800590c <SystemInit+0x20>)
 80058f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80058fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8005900:	bf00      	nop
 8005902:	46bd      	mov	sp, r7
 8005904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005908:	4770      	bx	lr
 800590a:	bf00      	nop
 800590c:	e000ed00 	.word	0xe000ed00

08005910 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	af00      	add	r7, sp, #0
  huart1.Instance = USART1;
 8005914:	4b24      	ldr	r3, [pc, #144]	; (80059a8 <MX_USART1_UART_Init+0x98>)
 8005916:	4a25      	ldr	r2, [pc, #148]	; (80059ac <MX_USART1_UART_Init+0x9c>)
 8005918:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 921600;
 800591a:	4b23      	ldr	r3, [pc, #140]	; (80059a8 <MX_USART1_UART_Init+0x98>)
 800591c:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8005920:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005922:	4b21      	ldr	r3, [pc, #132]	; (80059a8 <MX_USART1_UART_Init+0x98>)
 8005924:	2200      	movs	r2, #0
 8005926:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005928:	4b1f      	ldr	r3, [pc, #124]	; (80059a8 <MX_USART1_UART_Init+0x98>)
 800592a:	2200      	movs	r2, #0
 800592c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800592e:	4b1e      	ldr	r3, [pc, #120]	; (80059a8 <MX_USART1_UART_Init+0x98>)
 8005930:	2200      	movs	r2, #0
 8005932:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005934:	4b1c      	ldr	r3, [pc, #112]	; (80059a8 <MX_USART1_UART_Init+0x98>)
 8005936:	220c      	movs	r2, #12
 8005938:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800593a:	4b1b      	ldr	r3, [pc, #108]	; (80059a8 <MX_USART1_UART_Init+0x98>)
 800593c:	2200      	movs	r2, #0
 800593e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005940:	4b19      	ldr	r3, [pc, #100]	; (80059a8 <MX_USART1_UART_Init+0x98>)
 8005942:	2200      	movs	r2, #0
 8005944:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005946:	4b18      	ldr	r3, [pc, #96]	; (80059a8 <MX_USART1_UART_Init+0x98>)
 8005948:	2200      	movs	r2, #0
 800594a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800594c:	4b16      	ldr	r3, [pc, #88]	; (80059a8 <MX_USART1_UART_Init+0x98>)
 800594e:	2200      	movs	r2, #0
 8005950:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005952:	4b15      	ldr	r3, [pc, #84]	; (80059a8 <MX_USART1_UART_Init+0x98>)
 8005954:	2200      	movs	r2, #0
 8005956:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005958:	4813      	ldr	r0, [pc, #76]	; (80059a8 <MX_USART1_UART_Init+0x98>)
 800595a:	f004 f919 	bl	8009b90 <HAL_UART_Init>
 800595e:	4603      	mov	r3, r0
 8005960:	2b00      	cmp	r3, #0
 8005962:	d001      	beq.n	8005968 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8005964:	f7fe ff32 	bl	80047cc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005968:	2100      	movs	r1, #0
 800596a:	480f      	ldr	r0, [pc, #60]	; (80059a8 <MX_USART1_UART_Init+0x98>)
 800596c:	f006 f8c5 	bl	800bafa <HAL_UARTEx_SetTxFifoThreshold>
 8005970:	4603      	mov	r3, r0
 8005972:	2b00      	cmp	r3, #0
 8005974:	d001      	beq.n	800597a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8005976:	f7fe ff29 	bl	80047cc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800597a:	2100      	movs	r1, #0
 800597c:	480a      	ldr	r0, [pc, #40]	; (80059a8 <MX_USART1_UART_Init+0x98>)
 800597e:	f006 f8fa 	bl	800bb76 <HAL_UARTEx_SetRxFifoThreshold>
 8005982:	4603      	mov	r3, r0
 8005984:	2b00      	cmp	r3, #0
 8005986:	d001      	beq.n	800598c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8005988:	f7fe ff20 	bl	80047cc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800598c:	4806      	ldr	r0, [pc, #24]	; (80059a8 <MX_USART1_UART_Init+0x98>)
 800598e:	f006 f87b 	bl	800ba88 <HAL_UARTEx_DisableFifoMode>
 8005992:	4603      	mov	r3, r0
 8005994:	2b00      	cmp	r3, #0
 8005996:	d001      	beq.n	800599c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8005998:	f7fe ff18 	bl	80047cc <Error_Handler>
  }
  RB_init(&uart1RXrb, RB_SIZE);
 800599c:	2128      	movs	r1, #40	; 0x28
 800599e:	4804      	ldr	r0, [pc, #16]	; (80059b0 <MX_USART1_UART_Init+0xa0>)
 80059a0:	f7ff fb19 	bl	8004fd6 <RB_init>

}
 80059a4:	bf00      	nop
 80059a6:	bd80      	pop	{r7, pc}
 80059a8:	200004d8 	.word	0x200004d8
 80059ac:	40013800 	.word	0x40013800
 80059b0:	2000062c 	.word	0x2000062c

080059b4 <MX_UART4_Init>:

void MX_UART4_Init(void)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	af00      	add	r7, sp, #0

  huart4.Instance = UART4;
 80059b8:	4b26      	ldr	r3, [pc, #152]	; (8005a54 <MX_UART4_Init+0xa0>)
 80059ba:	4a27      	ldr	r2, [pc, #156]	; (8005a58 <MX_UART4_Init+0xa4>)
 80059bc:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 921600;
 80059be:	4b25      	ldr	r3, [pc, #148]	; (8005a54 <MX_UART4_Init+0xa0>)
 80059c0:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 80059c4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80059c6:	4b23      	ldr	r3, [pc, #140]	; (8005a54 <MX_UART4_Init+0xa0>)
 80059c8:	2200      	movs	r2, #0
 80059ca:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80059cc:	4b21      	ldr	r3, [pc, #132]	; (8005a54 <MX_UART4_Init+0xa0>)
 80059ce:	2200      	movs	r2, #0
 80059d0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80059d2:	4b20      	ldr	r3, [pc, #128]	; (8005a54 <MX_UART4_Init+0xa0>)
 80059d4:	2200      	movs	r2, #0
 80059d6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80059d8:	4b1e      	ldr	r3, [pc, #120]	; (8005a54 <MX_UART4_Init+0xa0>)
 80059da:	220c      	movs	r2, #12
 80059dc:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80059de:	4b1d      	ldr	r3, [pc, #116]	; (8005a54 <MX_UART4_Init+0xa0>)
 80059e0:	2200      	movs	r2, #0
 80059e2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80059e4:	4b1b      	ldr	r3, [pc, #108]	; (8005a54 <MX_UART4_Init+0xa0>)
 80059e6:	2200      	movs	r2, #0
 80059e8:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80059ea:	4b1a      	ldr	r3, [pc, #104]	; (8005a54 <MX_UART4_Init+0xa0>)
 80059ec:	2200      	movs	r2, #0
 80059ee:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80059f0:	4b18      	ldr	r3, [pc, #96]	; (8005a54 <MX_UART4_Init+0xa0>)
 80059f2:	2200      	movs	r2, #0
 80059f4:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80059f6:	4b17      	ldr	r3, [pc, #92]	; (8005a54 <MX_UART4_Init+0xa0>)
 80059f8:	2200      	movs	r2, #0
 80059fa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80059fc:	4815      	ldr	r0, [pc, #84]	; (8005a54 <MX_UART4_Init+0xa0>)
 80059fe:	f004 f8c7 	bl	8009b90 <HAL_UART_Init>
 8005a02:	4603      	mov	r3, r0
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d001      	beq.n	8005a0c <MX_UART4_Init+0x58>
  {
    error_Handler();
 8005a08:	f000 f82c 	bl	8005a64 <error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005a0c:	2100      	movs	r1, #0
 8005a0e:	4811      	ldr	r0, [pc, #68]	; (8005a54 <MX_UART4_Init+0xa0>)
 8005a10:	f006 f873 	bl	800bafa <HAL_UARTEx_SetTxFifoThreshold>
 8005a14:	4603      	mov	r3, r0
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d001      	beq.n	8005a1e <MX_UART4_Init+0x6a>
  {
    error_Handler();
 8005a1a:	f000 f823 	bl	8005a64 <error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005a1e:	2100      	movs	r1, #0
 8005a20:	480c      	ldr	r0, [pc, #48]	; (8005a54 <MX_UART4_Init+0xa0>)
 8005a22:	f006 f8a8 	bl	800bb76 <HAL_UARTEx_SetRxFifoThreshold>
 8005a26:	4603      	mov	r3, r0
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d001      	beq.n	8005a30 <MX_UART4_Init+0x7c>
  {
    error_Handler();
 8005a2c:	f000 f81a 	bl	8005a64 <error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8005a30:	4808      	ldr	r0, [pc, #32]	; (8005a54 <MX_UART4_Init+0xa0>)
 8005a32:	f006 f829 	bl	800ba88 <HAL_UARTEx_DisableFifoMode>
 8005a36:	4603      	mov	r3, r0
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d001      	beq.n	8005a40 <MX_UART4_Init+0x8c>
  {
    error_Handler();
 8005a3c:	f000 f812 	bl	8005a64 <error_Handler>
  }
  RB_init(&uart4RXrb, RB_SIZE);
 8005a40:	2128      	movs	r1, #40	; 0x28
 8005a42:	4806      	ldr	r0, [pc, #24]	; (8005a5c <MX_UART4_Init+0xa8>)
 8005a44:	f7ff fac7 	bl	8004fd6 <RB_init>
  uart_write_debug("UART4 initialized\r\n", 10);
 8005a48:	210a      	movs	r1, #10
 8005a4a:	4805      	ldr	r0, [pc, #20]	; (8005a60 <MX_UART4_Init+0xac>)
 8005a4c:	f000 f83c 	bl	8005ac8 <uart_write_debug>

}
 8005a50:	bf00      	nop
 8005a52:	bd80      	pop	{r7, pc}
 8005a54:	20000568 	.word	0x20000568
 8005a58:	40004c00 	.word	0x40004c00
 8005a5c:	200005f8 	.word	0x200005f8
 8005a60:	0801446c 	.word	0x0801446c

08005a64 <error_Handler>:

void error_Handler(void){
 8005a64:	b580      	push	{r7, lr}
 8005a66:	af00      	add	r7, sp, #0
	uart_write_debug("Failed to Init UART4\r\n", 10);
 8005a68:	210a      	movs	r1, #10
 8005a6a:	4802      	ldr	r0, [pc, #8]	; (8005a74 <error_Handler+0x10>)
 8005a6c:	f000 f82c 	bl	8005ac8 <uart_write_debug>
}
 8005a70:	bf00      	nop
 8005a72:	bd80      	pop	{r7, pc}
 8005a74:	08014480 	.word	0x08014480

08005a78 <uart_receive_it>:


HAL_StatusTypeDef uart_receive_it(UART_select device){
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b084      	sub	sp, #16
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	4603      	mov	r3, r0
 8005a80:	71fb      	strb	r3, [r7, #7]
	UART_HandleTypeDef *huart;

	switch (device){
 8005a82:	79fb      	ldrb	r3, [r7, #7]
 8005a84:	2b02      	cmp	r3, #2
 8005a86:	d00c      	beq.n	8005aa2 <uart_receive_it+0x2a>
 8005a88:	2b02      	cmp	r3, #2
 8005a8a:	dc0d      	bgt.n	8005aa8 <uart_receive_it+0x30>
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d002      	beq.n	8005a96 <uart_receive_it+0x1e>
 8005a90:	2b01      	cmp	r3, #1
 8005a92:	d003      	beq.n	8005a9c <uart_receive_it+0x24>
 8005a94:	e008      	b.n	8005aa8 <uart_receive_it+0x30>
	case UART_DEBUG:
		huart = &huart1;
 8005a96:	4b09      	ldr	r3, [pc, #36]	; (8005abc <uart_receive_it+0x44>)
 8005a98:	60fb      	str	r3, [r7, #12]
		break;
 8005a9a:	e005      	b.n	8005aa8 <uart_receive_it+0x30>
	case UART_NYX:
		huart = &huart4;
 8005a9c:	4b08      	ldr	r3, [pc, #32]	; (8005ac0 <uart_receive_it+0x48>)
 8005a9e:	60fb      	str	r3, [r7, #12]
		break;
 8005aa0:	e002      	b.n	8005aa8 <uart_receive_it+0x30>
	case UART_IRIS:
		huart = &huart1;
 8005aa2:	4b06      	ldr	r3, [pc, #24]	; (8005abc <uart_receive_it+0x44>)
 8005aa4:	60fb      	str	r3, [r7, #12]
		break;
 8005aa6:	bf00      	nop
	}
	return HAL_UART_Receive_IT(huart, &rxChar, 1);
 8005aa8:	2201      	movs	r2, #1
 8005aaa:	4906      	ldr	r1, [pc, #24]	; (8005ac4 <uart_receive_it+0x4c>)
 8005aac:	68f8      	ldr	r0, [r7, #12]
 8005aae:	f004 f957 	bl	8009d60 <HAL_UART_Receive_IT>
 8005ab2:	4603      	mov	r3, r0
}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	3710      	adds	r7, #16
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bd80      	pop	{r7, pc}
 8005abc:	200004d8 	.word	0x200004d8
 8005ac0:	20000568 	.word	0x20000568
 8005ac4:	20000660 	.word	0x20000660

08005ac8 <uart_write_debug>:




HAL_StatusTypeDef uart_write_debug(uint8_t *pData, uint32_t Timeout){
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b082      	sub	sp, #8
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
 8005ad0:	6039      	str	r1, [r7, #0]
	return HAL_UART_Transmit(&huart1,pData,strlen(pData),Timeout);// Sending in normal mode
 8005ad2:	6878      	ldr	r0, [r7, #4]
 8005ad4:	f7fa fbe4 	bl	80002a0 <strlen>
 8005ad8:	4603      	mov	r3, r0
 8005ada:	b29a      	uxth	r2, r3
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	6879      	ldr	r1, [r7, #4]
 8005ae0:	4803      	ldr	r0, [pc, #12]	; (8005af0 <uart_write_debug+0x28>)
 8005ae2:	f004 f8a5 	bl	8009c30 <HAL_UART_Transmit>
 8005ae6:	4603      	mov	r3, r0
}
 8005ae8:	4618      	mov	r0, r3
 8005aea:	3708      	adds	r7, #8
 8005aec:	46bd      	mov	sp, r7
 8005aee:	bd80      	pop	{r7, pc}
 8005af0:	200004d8 	.word	0x200004d8

08005af4 <uart_write>:

HAL_StatusTypeDef uart_write(uint8_t *pData, uint8_t len, UART_select device, uint32_t Timeout){
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b086      	sub	sp, #24
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	60f8      	str	r0, [r7, #12]
 8005afc:	607b      	str	r3, [r7, #4]
 8005afe:	460b      	mov	r3, r1
 8005b00:	72fb      	strb	r3, [r7, #11]
 8005b02:	4613      	mov	r3, r2
 8005b04:	72bb      	strb	r3, [r7, #10]
	UART_HandleTypeDef *huart;
	switch (device){
 8005b06:	7abb      	ldrb	r3, [r7, #10]
 8005b08:	2b02      	cmp	r3, #2
 8005b0a:	d00c      	beq.n	8005b26 <uart_write+0x32>
 8005b0c:	2b02      	cmp	r3, #2
 8005b0e:	dc0d      	bgt.n	8005b2c <uart_write+0x38>
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d002      	beq.n	8005b1a <uart_write+0x26>
 8005b14:	2b01      	cmp	r3, #1
 8005b16:	d003      	beq.n	8005b20 <uart_write+0x2c>
 8005b18:	e008      	b.n	8005b2c <uart_write+0x38>
	case UART_DEBUG:
		huart = &huart1;
 8005b1a:	4b12      	ldr	r3, [pc, #72]	; (8005b64 <uart_write+0x70>)
 8005b1c:	617b      	str	r3, [r7, #20]
		break;
 8005b1e:	e005      	b.n	8005b2c <uart_write+0x38>
	case UART_NYX:
		huart = &huart4;
 8005b20:	4b11      	ldr	r3, [pc, #68]	; (8005b68 <uart_write+0x74>)
 8005b22:	617b      	str	r3, [r7, #20]
		break;
 8005b24:	e002      	b.n	8005b2c <uart_write+0x38>
	case UART_IRIS:
		huart = &huart1;
 8005b26:	4b0f      	ldr	r3, [pc, #60]	; (8005b64 <uart_write+0x70>)
 8005b28:	617b      	str	r3, [r7, #20]
		break;
 8005b2a:	bf00      	nop
	}
	if (len == 0){
 8005b2c:	7afb      	ldrb	r3, [r7, #11]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d10b      	bne.n	8005b4a <uart_write+0x56>
		return HAL_UART_Transmit(huart,pData,strlen(pData),Timeout);// Sending in normal mode
 8005b32:	68f8      	ldr	r0, [r7, #12]
 8005b34:	f7fa fbb4 	bl	80002a0 <strlen>
 8005b38:	4603      	mov	r3, r0
 8005b3a:	b29a      	uxth	r2, r3
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	68f9      	ldr	r1, [r7, #12]
 8005b40:	6978      	ldr	r0, [r7, #20]
 8005b42:	f004 f875 	bl	8009c30 <HAL_UART_Transmit>
 8005b46:	4603      	mov	r3, r0
 8005b48:	e007      	b.n	8005b5a <uart_write+0x66>
	}
	return HAL_UART_Transmit(huart,pData,len,Timeout);// Sending in normal mode
 8005b4a:	7afb      	ldrb	r3, [r7, #11]
 8005b4c:	b29a      	uxth	r2, r3
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	68f9      	ldr	r1, [r7, #12]
 8005b52:	6978      	ldr	r0, [r7, #20]
 8005b54:	f004 f86c 	bl	8009c30 <HAL_UART_Transmit>
 8005b58:	4603      	mov	r3, r0
}
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	3718      	adds	r7, #24
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	bd80      	pop	{r7, pc}
 8005b62:	bf00      	nop
 8005b64:	200004d8 	.word	0x200004d8
 8005b68:	20000568 	.word	0x20000568

08005b6c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b084      	sub	sp, #16
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
	if (UartHandle->Instance == UART4)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4a7c      	ldr	r2, [pc, #496]	; (8005d6c <HAL_UART_RxCpltCallback+0x200>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	f040 80a2 	bne.w	8005cc4 <HAL_UART_RxCpltCallback+0x158>
	{
		if (ack_rcv_flag == 1){
 8005b80:	4b7b      	ldr	r3, [pc, #492]	; (8005d70 <HAL_UART_RxCpltCallback+0x204>)
 8005b82:	781b      	ldrb	r3, [r3, #0]
 8005b84:	2b01      	cmp	r3, #1
 8005b86:	d129      	bne.n	8005bdc <HAL_UART_RxCpltCallback+0x70>
			if ((rxChar != ESC) && (prvRxChar == ACK)){
 8005b88:	4b7a      	ldr	r3, [pc, #488]	; (8005d74 <HAL_UART_RxCpltCallback+0x208>)
 8005b8a:	781b      	ldrb	r3, [r3, #0]
 8005b8c:	2b1b      	cmp	r3, #27
 8005b8e:	d010      	beq.n	8005bb2 <HAL_UART_RxCpltCallback+0x46>
 8005b90:	4b79      	ldr	r3, [pc, #484]	; (8005d78 <HAL_UART_RxCpltCallback+0x20c>)
 8005b92:	781b      	ldrb	r3, [r3, #0]
 8005b94:	2b06      	cmp	r3, #6
 8005b96:	d10c      	bne.n	8005bb2 <HAL_UART_RxCpltCallback+0x46>
				osEventFlagsSet(ack_rcvd, ACK_FLAG);
 8005b98:	4b78      	ldr	r3, [pc, #480]	; (8005d7c <HAL_UART_RxCpltCallback+0x210>)
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	2101      	movs	r1, #1
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	f006 fa48 	bl	800c034 <osEventFlagsSet>
				prvRxChar = 0x00;
 8005ba4:	4b74      	ldr	r3, [pc, #464]	; (8005d78 <HAL_UART_RxCpltCallback+0x20c>)
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	701a      	strb	r2, [r3, #0]
				ack_rcv_flag = 0;
 8005baa:	4b71      	ldr	r3, [pc, #452]	; (8005d70 <HAL_UART_RxCpltCallback+0x204>)
 8005bac:	2200      	movs	r2, #0
 8005bae:	701a      	strb	r2, [r3, #0]
 8005bb0:	e082      	b.n	8005cb8 <HAL_UART_RxCpltCallback+0x14c>
			}
			else if ((rxChar != ESC) && (prvRxChar == NACK)){
 8005bb2:	4b70      	ldr	r3, [pc, #448]	; (8005d74 <HAL_UART_RxCpltCallback+0x208>)
 8005bb4:	781b      	ldrb	r3, [r3, #0]
 8005bb6:	2b1b      	cmp	r3, #27
 8005bb8:	d07e      	beq.n	8005cb8 <HAL_UART_RxCpltCallback+0x14c>
 8005bba:	4b6f      	ldr	r3, [pc, #444]	; (8005d78 <HAL_UART_RxCpltCallback+0x20c>)
 8005bbc:	781b      	ldrb	r3, [r3, #0]
 8005bbe:	2b15      	cmp	r3, #21
 8005bc0:	d17a      	bne.n	8005cb8 <HAL_UART_RxCpltCallback+0x14c>
				osEventFlagsSet(ack_rcvd, NACK_FLAG);
 8005bc2:	4b6e      	ldr	r3, [pc, #440]	; (8005d7c <HAL_UART_RxCpltCallback+0x210>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	2100      	movs	r1, #0
 8005bc8:	4618      	mov	r0, r3
 8005bca:	f006 fa33 	bl	800c034 <osEventFlagsSet>
				prvRxChar = 0x00;
 8005bce:	4b6a      	ldr	r3, [pc, #424]	; (8005d78 <HAL_UART_RxCpltCallback+0x20c>)
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	701a      	strb	r2, [r3, #0]
				ack_rcv_flag = 0;
 8005bd4:	4b66      	ldr	r3, [pc, #408]	; (8005d70 <HAL_UART_RxCpltCallback+0x204>)
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	701a      	strb	r2, [r3, #0]
 8005bda:	e06d      	b.n	8005cb8 <HAL_UART_RxCpltCallback+0x14c>
			}
		}
		else{
			if (((rxChar == ACK) || (rxChar == NACK)) && (prvRxChar == 0xFF)){
 8005bdc:	4b65      	ldr	r3, [pc, #404]	; (8005d74 <HAL_UART_RxCpltCallback+0x208>)
 8005bde:	781b      	ldrb	r3, [r3, #0]
 8005be0:	2b06      	cmp	r3, #6
 8005be2:	d003      	beq.n	8005bec <HAL_UART_RxCpltCallback+0x80>
 8005be4:	4b63      	ldr	r3, [pc, #396]	; (8005d74 <HAL_UART_RxCpltCallback+0x208>)
 8005be6:	781b      	ldrb	r3, [r3, #0]
 8005be8:	2b15      	cmp	r3, #21
 8005bea:	d10b      	bne.n	8005c04 <HAL_UART_RxCpltCallback+0x98>
 8005bec:	4b62      	ldr	r3, [pc, #392]	; (8005d78 <HAL_UART_RxCpltCallback+0x20c>)
 8005bee:	781b      	ldrb	r3, [r3, #0]
 8005bf0:	2bff      	cmp	r3, #255	; 0xff
 8005bf2:	d107      	bne.n	8005c04 <HAL_UART_RxCpltCallback+0x98>
				ack_rcv_flag = 1;
 8005bf4:	4b5e      	ldr	r3, [pc, #376]	; (8005d70 <HAL_UART_RxCpltCallback+0x204>)
 8005bf6:	2201      	movs	r2, #1
 8005bf8:	701a      	strb	r2, [r3, #0]
				prvRxChar = rxChar;
 8005bfa:	4b5e      	ldr	r3, [pc, #376]	; (8005d74 <HAL_UART_RxCpltCallback+0x208>)
 8005bfc:	781a      	ldrb	r2, [r3, #0]
 8005bfe:	4b5e      	ldr	r3, [pc, #376]	; (8005d78 <HAL_UART_RxCpltCallback+0x20c>)
 8005c00:	701a      	strb	r2, [r3, #0]
 8005c02:	e059      	b.n	8005cb8 <HAL_UART_RxCpltCallback+0x14c>
			}
			else if ((rxChar == ETX) && (prvRxChar != ESC)){
 8005c04:	4b5b      	ldr	r3, [pc, #364]	; (8005d74 <HAL_UART_RxCpltCallback+0x208>)
 8005c06:	781b      	ldrb	r3, [r3, #0]
 8005c08:	2b03      	cmp	r3, #3
 8005c0a:	d125      	bne.n	8005c58 <HAL_UART_RxCpltCallback+0xec>
 8005c0c:	4b5a      	ldr	r3, [pc, #360]	; (8005d78 <HAL_UART_RxCpltCallback+0x20c>)
 8005c0e:	781b      	ldrb	r3, [r3, #0]
 8005c10:	2b1b      	cmp	r3, #27
 8005c12:	d021      	beq.n	8005c58 <HAL_UART_RxCpltCallback+0xec>
				uint8_t start_ch = 0;
 8005c14:	2300      	movs	r3, #0
 8005c16:	73bb      	strb	r3, [r7, #14]
				start_ch = RB_pop(&uart4RXrb);
 8005c18:	4859      	ldr	r0, [pc, #356]	; (8005d80 <HAL_UART_RxCpltCallback+0x214>)
 8005c1a:	f7ff fa2a 	bl	8005072 <RB_pop>
 8005c1e:	4603      	mov	r3, r0
 8005c20:	73bb      	strb	r3, [r7, #14]
				if (start_ch == STX){
 8005c22:	7bbb      	ldrb	r3, [r7, #14]
 8005c24:	2b02      	cmp	r3, #2
 8005c26:	d113      	bne.n	8005c50 <HAL_UART_RxCpltCallback+0xe4>
					uint8_t rb_len = RB_size(&uart4RXrb);
 8005c28:	4855      	ldr	r0, [pc, #340]	; (8005d80 <HAL_UART_RxCpltCallback+0x214>)
 8005c2a:	f7ff fa71 	bl	8005110 <RB_size>
 8005c2e:	4603      	mov	r3, r0
 8005c30:	737b      	strb	r3, [r7, #13]
					RB_pushFront(&uart4RXrb, rb_len);
 8005c32:	7b7b      	ldrb	r3, [r7, #13]
 8005c34:	4619      	mov	r1, r3
 8005c36:	4852      	ldr	r0, [pc, #328]	; (8005d80 <HAL_UART_RxCpltCallback+0x214>)
 8005c38:	f7ff fa40 	bl	80050bc <RB_pushFront>
					osMessageQueuePut(messageQueueHandle, uart4RXrb.buffer, 0U, 0U);
 8005c3c:	4b51      	ldr	r3, [pc, #324]	; (8005d84 <HAL_UART_RxCpltCallback+0x218>)
 8005c3e:	6818      	ldr	r0, [r3, #0]
 8005c40:	2300      	movs	r3, #0
 8005c42:	2200      	movs	r2, #0
 8005c44:	494e      	ldr	r1, [pc, #312]	; (8005d80 <HAL_UART_RxCpltCallback+0x214>)
 8005c46:	f006 fc21 	bl	800c48c <osMessageQueuePut>
					prvRxChar = 0xFF;
 8005c4a:	4b4b      	ldr	r3, [pc, #300]	; (8005d78 <HAL_UART_RxCpltCallback+0x20c>)
 8005c4c:	22ff      	movs	r2, #255	; 0xff
 8005c4e:	701a      	strb	r2, [r3, #0]
				}
				RB_clear(&uart4RXrb);
 8005c50:	484b      	ldr	r0, [pc, #300]	; (8005d80 <HAL_UART_RxCpltCallback+0x214>)
 8005c52:	f7ff fa79 	bl	8005148 <RB_clear>
			else if ((rxChar == ETX) && (prvRxChar != ESC)){
 8005c56:	e02f      	b.n	8005cb8 <HAL_UART_RxCpltCallback+0x14c>
			}
			else if ((rxChar == ESC) && (prvRxChar != ESC)){
 8005c58:	4b46      	ldr	r3, [pc, #280]	; (8005d74 <HAL_UART_RxCpltCallback+0x208>)
 8005c5a:	781b      	ldrb	r3, [r3, #0]
 8005c5c:	2b1b      	cmp	r3, #27
 8005c5e:	d108      	bne.n	8005c72 <HAL_UART_RxCpltCallback+0x106>
 8005c60:	4b45      	ldr	r3, [pc, #276]	; (8005d78 <HAL_UART_RxCpltCallback+0x20c>)
 8005c62:	781b      	ldrb	r3, [r3, #0]
 8005c64:	2b1b      	cmp	r3, #27
 8005c66:	d004      	beq.n	8005c72 <HAL_UART_RxCpltCallback+0x106>
				 prvRxChar = rxChar;
 8005c68:	4b42      	ldr	r3, [pc, #264]	; (8005d74 <HAL_UART_RxCpltCallback+0x208>)
 8005c6a:	781a      	ldrb	r2, [r3, #0]
 8005c6c:	4b42      	ldr	r3, [pc, #264]	; (8005d78 <HAL_UART_RxCpltCallback+0x20c>)
 8005c6e:	701a      	strb	r2, [r3, #0]
 8005c70:	e022      	b.n	8005cb8 <HAL_UART_RxCpltCallback+0x14c>
			}
			else if ((rxChar == ESC) && (prvRxChar == ESC)){
 8005c72:	4b40      	ldr	r3, [pc, #256]	; (8005d74 <HAL_UART_RxCpltCallback+0x208>)
 8005c74:	781b      	ldrb	r3, [r3, #0]
 8005c76:	2b1b      	cmp	r3, #27
 8005c78:	d10d      	bne.n	8005c96 <HAL_UART_RxCpltCallback+0x12a>
 8005c7a:	4b3f      	ldr	r3, [pc, #252]	; (8005d78 <HAL_UART_RxCpltCallback+0x20c>)
 8005c7c:	781b      	ldrb	r3, [r3, #0]
 8005c7e:	2b1b      	cmp	r3, #27
 8005c80:	d109      	bne.n	8005c96 <HAL_UART_RxCpltCallback+0x12a>
				RB_push(&uart4RXrb, rxChar);
 8005c82:	4b3c      	ldr	r3, [pc, #240]	; (8005d74 <HAL_UART_RxCpltCallback+0x208>)
 8005c84:	781b      	ldrb	r3, [r3, #0]
 8005c86:	4619      	mov	r1, r3
 8005c88:	483d      	ldr	r0, [pc, #244]	; (8005d80 <HAL_UART_RxCpltCallback+0x214>)
 8005c8a:	f7ff f9c4 	bl	8005016 <RB_push>
				prvRxChar = 0x00;
 8005c8e:	4b3a      	ldr	r3, [pc, #232]	; (8005d78 <HAL_UART_RxCpltCallback+0x20c>)
 8005c90:	2200      	movs	r2, #0
 8005c92:	701a      	strb	r2, [r3, #0]
 8005c94:	e010      	b.n	8005cb8 <HAL_UART_RxCpltCallback+0x14c>
			}
			else {
			  RB_push(&uart4RXrb, rxChar);
 8005c96:	4b37      	ldr	r3, [pc, #220]	; (8005d74 <HAL_UART_RxCpltCallback+0x208>)
 8005c98:	781b      	ldrb	r3, [r3, #0]
 8005c9a:	4619      	mov	r1, r3
 8005c9c:	4838      	ldr	r0, [pc, #224]	; (8005d80 <HAL_UART_RxCpltCallback+0x214>)
 8005c9e:	f7ff f9ba 	bl	8005016 <RB_push>
			  if (rxChar == 0xFF) prvRxChar = 0x00;
 8005ca2:	4b34      	ldr	r3, [pc, #208]	; (8005d74 <HAL_UART_RxCpltCallback+0x208>)
 8005ca4:	781b      	ldrb	r3, [r3, #0]
 8005ca6:	2bff      	cmp	r3, #255	; 0xff
 8005ca8:	d102      	bne.n	8005cb0 <HAL_UART_RxCpltCallback+0x144>
 8005caa:	4b33      	ldr	r3, [pc, #204]	; (8005d78 <HAL_UART_RxCpltCallback+0x20c>)
 8005cac:	2200      	movs	r2, #0
 8005cae:	701a      	strb	r2, [r3, #0]
			  prvRxChar = rxChar;
 8005cb0:	4b30      	ldr	r3, [pc, #192]	; (8005d74 <HAL_UART_RxCpltCallback+0x208>)
 8005cb2:	781a      	ldrb	r2, [r3, #0]
 8005cb4:	4b30      	ldr	r3, [pc, #192]	; (8005d78 <HAL_UART_RxCpltCallback+0x20c>)
 8005cb6:	701a      	strb	r2, [r3, #0]
			}
		}
		HAL_UART_Receive_IT(&huart4, &rxChar, 1);
 8005cb8:	2201      	movs	r2, #1
 8005cba:	492e      	ldr	r1, [pc, #184]	; (8005d74 <HAL_UART_RxCpltCallback+0x208>)
 8005cbc:	4832      	ldr	r0, [pc, #200]	; (8005d88 <HAL_UART_RxCpltCallback+0x21c>)
 8005cbe:	f004 f84f 	bl	8009d60 <HAL_UART_Receive_IT>
		  prvRxChar = rxChar;
		}
		HAL_UART_Receive_IT(&huart1, &rxChar, 1);
	}

}
 8005cc2:	e04f      	b.n	8005d64 <HAL_UART_RxCpltCallback+0x1f8>
	else if (UartHandle->Instance == USART1){
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4a30      	ldr	r2, [pc, #192]	; (8005d8c <HAL_UART_RxCpltCallback+0x220>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d14a      	bne.n	8005d64 <HAL_UART_RxCpltCallback+0x1f8>
		if ((rxChar == ETX) && (prvRxChar != ESC)){
 8005cce:	4b29      	ldr	r3, [pc, #164]	; (8005d74 <HAL_UART_RxCpltCallback+0x208>)
 8005cd0:	781b      	ldrb	r3, [r3, #0]
 8005cd2:	2b03      	cmp	r3, #3
 8005cd4:	d118      	bne.n	8005d08 <HAL_UART_RxCpltCallback+0x19c>
 8005cd6:	4b28      	ldr	r3, [pc, #160]	; (8005d78 <HAL_UART_RxCpltCallback+0x20c>)
 8005cd8:	781b      	ldrb	r3, [r3, #0]
 8005cda:	2b1b      	cmp	r3, #27
 8005cdc:	d014      	beq.n	8005d08 <HAL_UART_RxCpltCallback+0x19c>
		uint8_t start_ch = 0;
 8005cde:	2300      	movs	r3, #0
 8005ce0:	73fb      	strb	r3, [r7, #15]
		start_ch = RB_pop(&uart1RXrb);
 8005ce2:	482b      	ldr	r0, [pc, #172]	; (8005d90 <HAL_UART_RxCpltCallback+0x224>)
 8005ce4:	f7ff f9c5 	bl	8005072 <RB_pop>
 8005ce8:	4603      	mov	r3, r0
 8005cea:	73fb      	strb	r3, [r7, #15]
		if (start_ch == STX){
 8005cec:	7bfb      	ldrb	r3, [r7, #15]
 8005cee:	2b02      	cmp	r3, #2
 8005cf0:	d106      	bne.n	8005d00 <HAL_UART_RxCpltCallback+0x194>
			osMessageQueuePut(messageQueueHandle, uart1RXrb.buffer, 0U, 0U);
 8005cf2:	4b24      	ldr	r3, [pc, #144]	; (8005d84 <HAL_UART_RxCpltCallback+0x218>)
 8005cf4:	6818      	ldr	r0, [r3, #0]
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	4925      	ldr	r1, [pc, #148]	; (8005d90 <HAL_UART_RxCpltCallback+0x224>)
 8005cfc:	f006 fbc6 	bl	800c48c <osMessageQueuePut>
		RB_clear(&uart1RXrb);
 8005d00:	4823      	ldr	r0, [pc, #140]	; (8005d90 <HAL_UART_RxCpltCallback+0x224>)
 8005d02:	f7ff fa21 	bl	8005148 <RB_clear>
		if ((rxChar == ETX) && (prvRxChar != ESC)){
 8005d06:	e028      	b.n	8005d5a <HAL_UART_RxCpltCallback+0x1ee>
		 else if ((rxChar == ESC) && (prvRxChar != ESC)){
 8005d08:	4b1a      	ldr	r3, [pc, #104]	; (8005d74 <HAL_UART_RxCpltCallback+0x208>)
 8005d0a:	781b      	ldrb	r3, [r3, #0]
 8005d0c:	2b1b      	cmp	r3, #27
 8005d0e:	d108      	bne.n	8005d22 <HAL_UART_RxCpltCallback+0x1b6>
 8005d10:	4b19      	ldr	r3, [pc, #100]	; (8005d78 <HAL_UART_RxCpltCallback+0x20c>)
 8005d12:	781b      	ldrb	r3, [r3, #0]
 8005d14:	2b1b      	cmp	r3, #27
 8005d16:	d004      	beq.n	8005d22 <HAL_UART_RxCpltCallback+0x1b6>
			 prvRxChar = rxChar;
 8005d18:	4b16      	ldr	r3, [pc, #88]	; (8005d74 <HAL_UART_RxCpltCallback+0x208>)
 8005d1a:	781a      	ldrb	r2, [r3, #0]
 8005d1c:	4b16      	ldr	r3, [pc, #88]	; (8005d78 <HAL_UART_RxCpltCallback+0x20c>)
 8005d1e:	701a      	strb	r2, [r3, #0]
 8005d20:	e01b      	b.n	8005d5a <HAL_UART_RxCpltCallback+0x1ee>
		else if ((rxChar == ESC) && (prvRxChar == ESC)){
 8005d22:	4b14      	ldr	r3, [pc, #80]	; (8005d74 <HAL_UART_RxCpltCallback+0x208>)
 8005d24:	781b      	ldrb	r3, [r3, #0]
 8005d26:	2b1b      	cmp	r3, #27
 8005d28:	d10d      	bne.n	8005d46 <HAL_UART_RxCpltCallback+0x1da>
 8005d2a:	4b13      	ldr	r3, [pc, #76]	; (8005d78 <HAL_UART_RxCpltCallback+0x20c>)
 8005d2c:	781b      	ldrb	r3, [r3, #0]
 8005d2e:	2b1b      	cmp	r3, #27
 8005d30:	d109      	bne.n	8005d46 <HAL_UART_RxCpltCallback+0x1da>
			RB_push(&uart1RXrb, rxChar);
 8005d32:	4b10      	ldr	r3, [pc, #64]	; (8005d74 <HAL_UART_RxCpltCallback+0x208>)
 8005d34:	781b      	ldrb	r3, [r3, #0]
 8005d36:	4619      	mov	r1, r3
 8005d38:	4815      	ldr	r0, [pc, #84]	; (8005d90 <HAL_UART_RxCpltCallback+0x224>)
 8005d3a:	f7ff f96c 	bl	8005016 <RB_push>
			prvRxChar = 0x00;
 8005d3e:	4b0e      	ldr	r3, [pc, #56]	; (8005d78 <HAL_UART_RxCpltCallback+0x20c>)
 8005d40:	2200      	movs	r2, #0
 8005d42:	701a      	strb	r2, [r3, #0]
 8005d44:	e009      	b.n	8005d5a <HAL_UART_RxCpltCallback+0x1ee>
		  RB_push(&uart1RXrb, rxChar);
 8005d46:	4b0b      	ldr	r3, [pc, #44]	; (8005d74 <HAL_UART_RxCpltCallback+0x208>)
 8005d48:	781b      	ldrb	r3, [r3, #0]
 8005d4a:	4619      	mov	r1, r3
 8005d4c:	4810      	ldr	r0, [pc, #64]	; (8005d90 <HAL_UART_RxCpltCallback+0x224>)
 8005d4e:	f7ff f962 	bl	8005016 <RB_push>
		  prvRxChar = rxChar;
 8005d52:	4b08      	ldr	r3, [pc, #32]	; (8005d74 <HAL_UART_RxCpltCallback+0x208>)
 8005d54:	781a      	ldrb	r2, [r3, #0]
 8005d56:	4b08      	ldr	r3, [pc, #32]	; (8005d78 <HAL_UART_RxCpltCallback+0x20c>)
 8005d58:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart1, &rxChar, 1);
 8005d5a:	2201      	movs	r2, #1
 8005d5c:	4905      	ldr	r1, [pc, #20]	; (8005d74 <HAL_UART_RxCpltCallback+0x208>)
 8005d5e:	480d      	ldr	r0, [pc, #52]	; (8005d94 <HAL_UART_RxCpltCallback+0x228>)
 8005d60:	f003 fffe 	bl	8009d60 <HAL_UART_Receive_IT>
}
 8005d64:	bf00      	nop
 8005d66:	3710      	adds	r7, #16
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	bd80      	pop	{r7, pc}
 8005d6c:	40004c00 	.word	0x40004c00
 8005d70:	20000662 	.word	0x20000662
 8005d74:	20000660 	.word	0x20000660
 8005d78:	20000661 	.word	0x20000661
 8005d7c:	20000460 	.word	0x20000460
 8005d80:	200005f8 	.word	0x200005f8
 8005d84:	2000045c 	.word	0x2000045c
 8005d88:	20000568 	.word	0x20000568
 8005d8c:	40013800 	.word	0x40013800
 8005d90:	2000062c 	.word	0x2000062c
 8005d94:	200004d8 	.word	0x200004d8

08005d98 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8005d98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005dd0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8005d9c:	f7ff fda6 	bl	80058ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005da0:	480c      	ldr	r0, [pc, #48]	; (8005dd4 <LoopForever+0x6>)
  ldr r1, =_edata
 8005da2:	490d      	ldr	r1, [pc, #52]	; (8005dd8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8005da4:	4a0d      	ldr	r2, [pc, #52]	; (8005ddc <LoopForever+0xe>)
  movs r3, #0
 8005da6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005da8:	e002      	b.n	8005db0 <LoopCopyDataInit>

08005daa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005daa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005dac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005dae:	3304      	adds	r3, #4

08005db0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005db0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005db2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005db4:	d3f9      	bcc.n	8005daa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005db6:	4a0a      	ldr	r2, [pc, #40]	; (8005de0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005db8:	4c0a      	ldr	r4, [pc, #40]	; (8005de4 <LoopForever+0x16>)
  movs r3, #0
 8005dba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005dbc:	e001      	b.n	8005dc2 <LoopFillZerobss>

08005dbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005dbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005dc0:	3204      	adds	r2, #4

08005dc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005dc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005dc4:	d3fb      	bcc.n	8005dbe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005dc6:	f00a fea1 	bl	8010b0c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005dca:	f7fe f8df 	bl	8003f8c <main>

08005dce <LoopForever>:

LoopForever:
    b LoopForever
 8005dce:	e7fe      	b.n	8005dce <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8005dd0:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8005dd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005dd8:	20000234 	.word	0x20000234
  ldr r2, =_sidata
 8005ddc:	08014ddc 	.word	0x08014ddc
  ldr r2, =_sbss
 8005de0:	20000234 	.word	0x20000234
  ldr r4, =_ebss
 8005de4:	20006504 	.word	0x20006504

08005de8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005de8:	e7fe      	b.n	8005de8 <ADC1_IRQHandler>

08005dea <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005dea:	b580      	push	{r7, lr}
 8005dec:	b082      	sub	sp, #8
 8005dee:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005df0:	2300      	movs	r3, #0
 8005df2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005df4:	2003      	movs	r0, #3
 8005df6:	f000 f902 	bl	8005ffe <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005dfa:	200f      	movs	r0, #15
 8005dfc:	f7ff fbcc 	bl	8005598 <HAL_InitTick>
 8005e00:	4603      	mov	r3, r0
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d002      	beq.n	8005e0c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8005e06:	2301      	movs	r3, #1
 8005e08:	71fb      	strb	r3, [r7, #7]
 8005e0a:	e001      	b.n	8005e10 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005e0c:	f7ff f9b0 	bl	8005170 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005e10:	79fb      	ldrb	r3, [r7, #7]
}
 8005e12:	4618      	mov	r0, r3
 8005e14:	3708      	adds	r7, #8
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bd80      	pop	{r7, pc}
	...

08005e1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005e20:	4b06      	ldr	r3, [pc, #24]	; (8005e3c <HAL_IncTick+0x20>)
 8005e22:	781b      	ldrb	r3, [r3, #0]
 8005e24:	461a      	mov	r2, r3
 8005e26:	4b06      	ldr	r3, [pc, #24]	; (8005e40 <HAL_IncTick+0x24>)
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	4413      	add	r3, r2
 8005e2c:	4a04      	ldr	r2, [pc, #16]	; (8005e40 <HAL_IncTick+0x24>)
 8005e2e:	6013      	str	r3, [r2, #0]
}
 8005e30:	bf00      	nop
 8005e32:	46bd      	mov	sp, r7
 8005e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e38:	4770      	bx	lr
 8005e3a:	bf00      	nop
 8005e3c:	20000044 	.word	0x20000044
 8005e40:	20000664 	.word	0x20000664

08005e44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005e44:	b480      	push	{r7}
 8005e46:	af00      	add	r7, sp, #0
  return uwTick;
 8005e48:	4b03      	ldr	r3, [pc, #12]	; (8005e58 <HAL_GetTick+0x14>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
}
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e54:	4770      	bx	lr
 8005e56:	bf00      	nop
 8005e58:	20000664 	.word	0x20000664

08005e5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b084      	sub	sp, #16
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005e64:	f7ff ffee 	bl	8005e44 <HAL_GetTick>
 8005e68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e74:	d005      	beq.n	8005e82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8005e76:	4b0a      	ldr	r3, [pc, #40]	; (8005ea0 <HAL_Delay+0x44>)
 8005e78:	781b      	ldrb	r3, [r3, #0]
 8005e7a:	461a      	mov	r2, r3
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	4413      	add	r3, r2
 8005e80:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005e82:	bf00      	nop
 8005e84:	f7ff ffde 	bl	8005e44 <HAL_GetTick>
 8005e88:	4602      	mov	r2, r0
 8005e8a:	68bb      	ldr	r3, [r7, #8]
 8005e8c:	1ad3      	subs	r3, r2, r3
 8005e8e:	68fa      	ldr	r2, [r7, #12]
 8005e90:	429a      	cmp	r2, r3
 8005e92:	d8f7      	bhi.n	8005e84 <HAL_Delay+0x28>
  {
  }
}
 8005e94:	bf00      	nop
 8005e96:	bf00      	nop
 8005e98:	3710      	adds	r7, #16
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	bd80      	pop	{r7, pc}
 8005e9e:	bf00      	nop
 8005ea0:	20000044 	.word	0x20000044

08005ea4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	b085      	sub	sp, #20
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	f003 0307 	and.w	r3, r3, #7
 8005eb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005eb4:	4b0c      	ldr	r3, [pc, #48]	; (8005ee8 <__NVIC_SetPriorityGrouping+0x44>)
 8005eb6:	68db      	ldr	r3, [r3, #12]
 8005eb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005eba:	68ba      	ldr	r2, [r7, #8]
 8005ebc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005ec0:	4013      	ands	r3, r2
 8005ec2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005ecc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005ed0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ed4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005ed6:	4a04      	ldr	r2, [pc, #16]	; (8005ee8 <__NVIC_SetPriorityGrouping+0x44>)
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	60d3      	str	r3, [r2, #12]
}
 8005edc:	bf00      	nop
 8005ede:	3714      	adds	r7, #20
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee6:	4770      	bx	lr
 8005ee8:	e000ed00 	.word	0xe000ed00

08005eec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005eec:	b480      	push	{r7}
 8005eee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005ef0:	4b04      	ldr	r3, [pc, #16]	; (8005f04 <__NVIC_GetPriorityGrouping+0x18>)
 8005ef2:	68db      	ldr	r3, [r3, #12]
 8005ef4:	0a1b      	lsrs	r3, r3, #8
 8005ef6:	f003 0307 	and.w	r3, r3, #7
}
 8005efa:	4618      	mov	r0, r3
 8005efc:	46bd      	mov	sp, r7
 8005efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f02:	4770      	bx	lr
 8005f04:	e000ed00 	.word	0xe000ed00

08005f08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005f08:	b480      	push	{r7}
 8005f0a:	b083      	sub	sp, #12
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	4603      	mov	r3, r0
 8005f10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005f12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	db0b      	blt.n	8005f32 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005f1a:	79fb      	ldrb	r3, [r7, #7]
 8005f1c:	f003 021f 	and.w	r2, r3, #31
 8005f20:	4907      	ldr	r1, [pc, #28]	; (8005f40 <__NVIC_EnableIRQ+0x38>)
 8005f22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f26:	095b      	lsrs	r3, r3, #5
 8005f28:	2001      	movs	r0, #1
 8005f2a:	fa00 f202 	lsl.w	r2, r0, r2
 8005f2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005f32:	bf00      	nop
 8005f34:	370c      	adds	r7, #12
 8005f36:	46bd      	mov	sp, r7
 8005f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3c:	4770      	bx	lr
 8005f3e:	bf00      	nop
 8005f40:	e000e100 	.word	0xe000e100

08005f44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005f44:	b480      	push	{r7}
 8005f46:	b083      	sub	sp, #12
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	4603      	mov	r3, r0
 8005f4c:	6039      	str	r1, [r7, #0]
 8005f4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005f50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	db0a      	blt.n	8005f6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	b2da      	uxtb	r2, r3
 8005f5c:	490c      	ldr	r1, [pc, #48]	; (8005f90 <__NVIC_SetPriority+0x4c>)
 8005f5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f62:	0112      	lsls	r2, r2, #4
 8005f64:	b2d2      	uxtb	r2, r2
 8005f66:	440b      	add	r3, r1
 8005f68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005f6c:	e00a      	b.n	8005f84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	b2da      	uxtb	r2, r3
 8005f72:	4908      	ldr	r1, [pc, #32]	; (8005f94 <__NVIC_SetPriority+0x50>)
 8005f74:	79fb      	ldrb	r3, [r7, #7]
 8005f76:	f003 030f 	and.w	r3, r3, #15
 8005f7a:	3b04      	subs	r3, #4
 8005f7c:	0112      	lsls	r2, r2, #4
 8005f7e:	b2d2      	uxtb	r2, r2
 8005f80:	440b      	add	r3, r1
 8005f82:	761a      	strb	r2, [r3, #24]
}
 8005f84:	bf00      	nop
 8005f86:	370c      	adds	r7, #12
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8e:	4770      	bx	lr
 8005f90:	e000e100 	.word	0xe000e100
 8005f94:	e000ed00 	.word	0xe000ed00

08005f98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005f98:	b480      	push	{r7}
 8005f9a:	b089      	sub	sp, #36	; 0x24
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	60f8      	str	r0, [r7, #12]
 8005fa0:	60b9      	str	r1, [r7, #8]
 8005fa2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	f003 0307 	and.w	r3, r3, #7
 8005faa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005fac:	69fb      	ldr	r3, [r7, #28]
 8005fae:	f1c3 0307 	rsb	r3, r3, #7
 8005fb2:	2b04      	cmp	r3, #4
 8005fb4:	bf28      	it	cs
 8005fb6:	2304      	movcs	r3, #4
 8005fb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005fba:	69fb      	ldr	r3, [r7, #28]
 8005fbc:	3304      	adds	r3, #4
 8005fbe:	2b06      	cmp	r3, #6
 8005fc0:	d902      	bls.n	8005fc8 <NVIC_EncodePriority+0x30>
 8005fc2:	69fb      	ldr	r3, [r7, #28]
 8005fc4:	3b03      	subs	r3, #3
 8005fc6:	e000      	b.n	8005fca <NVIC_EncodePriority+0x32>
 8005fc8:	2300      	movs	r3, #0
 8005fca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005fcc:	f04f 32ff 	mov.w	r2, #4294967295
 8005fd0:	69bb      	ldr	r3, [r7, #24]
 8005fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8005fd6:	43da      	mvns	r2, r3
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	401a      	ands	r2, r3
 8005fdc:	697b      	ldr	r3, [r7, #20]
 8005fde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005fe0:	f04f 31ff 	mov.w	r1, #4294967295
 8005fe4:	697b      	ldr	r3, [r7, #20]
 8005fe6:	fa01 f303 	lsl.w	r3, r1, r3
 8005fea:	43d9      	mvns	r1, r3
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005ff0:	4313      	orrs	r3, r2
         );
}
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	3724      	adds	r7, #36	; 0x24
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffc:	4770      	bx	lr

08005ffe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005ffe:	b580      	push	{r7, lr}
 8006000:	b082      	sub	sp, #8
 8006002:	af00      	add	r7, sp, #0
 8006004:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006006:	6878      	ldr	r0, [r7, #4]
 8006008:	f7ff ff4c 	bl	8005ea4 <__NVIC_SetPriorityGrouping>
}
 800600c:	bf00      	nop
 800600e:	3708      	adds	r7, #8
 8006010:	46bd      	mov	sp, r7
 8006012:	bd80      	pop	{r7, pc}

08006014 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b086      	sub	sp, #24
 8006018:	af00      	add	r7, sp, #0
 800601a:	4603      	mov	r3, r0
 800601c:	60b9      	str	r1, [r7, #8]
 800601e:	607a      	str	r2, [r7, #4]
 8006020:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8006022:	2300      	movs	r3, #0
 8006024:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006026:	f7ff ff61 	bl	8005eec <__NVIC_GetPriorityGrouping>
 800602a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800602c:	687a      	ldr	r2, [r7, #4]
 800602e:	68b9      	ldr	r1, [r7, #8]
 8006030:	6978      	ldr	r0, [r7, #20]
 8006032:	f7ff ffb1 	bl	8005f98 <NVIC_EncodePriority>
 8006036:	4602      	mov	r2, r0
 8006038:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800603c:	4611      	mov	r1, r2
 800603e:	4618      	mov	r0, r3
 8006040:	f7ff ff80 	bl	8005f44 <__NVIC_SetPriority>
}
 8006044:	bf00      	nop
 8006046:	3718      	adds	r7, #24
 8006048:	46bd      	mov	sp, r7
 800604a:	bd80      	pop	{r7, pc}

0800604c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b082      	sub	sp, #8
 8006050:	af00      	add	r7, sp, #0
 8006052:	4603      	mov	r3, r0
 8006054:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800605a:	4618      	mov	r0, r3
 800605c:	f7ff ff54 	bl	8005f08 <__NVIC_EnableIRQ>
}
 8006060:	bf00      	nop
 8006062:	3708      	adds	r7, #8
 8006064:	46bd      	mov	sp, r7
 8006066:	bd80      	pop	{r7, pc}

08006068 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006068:	b480      	push	{r7}
 800606a:	b085      	sub	sp, #20
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006070:	2300      	movs	r3, #0
 8006072:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800607a:	b2db      	uxtb	r3, r3
 800607c:	2b02      	cmp	r3, #2
 800607e:	d008      	beq.n	8006092 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2204      	movs	r2, #4
 8006084:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2200      	movs	r2, #0
 800608a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800608e:	2301      	movs	r3, #1
 8006090:	e040      	b.n	8006114 <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	681a      	ldr	r2, [r3, #0]
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f022 020e 	bic.w	r2, r2, #14
 80060a0:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060a6:	681a      	ldr	r2, [r3, #0]
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80060b0:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	681a      	ldr	r2, [r3, #0]
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f022 0201 	bic.w	r2, r2, #1
 80060c0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060c6:	f003 021c 	and.w	r2, r3, #28
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ce:	2101      	movs	r1, #1
 80060d0:	fa01 f202 	lsl.w	r2, r1, r2
 80060d4:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060da:	687a      	ldr	r2, [r7, #4]
 80060dc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80060de:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d00c      	beq.n	8006102 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060ec:	681a      	ldr	r2, [r3, #0]
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060f2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80060f6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060fc:	687a      	ldr	r2, [r7, #4]
 80060fe:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8006100:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2201      	movs	r2, #1
 8006106:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2200      	movs	r2, #0
 800610e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8006112:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8006114:	4618      	mov	r0, r3
 8006116:	3714      	adds	r7, #20
 8006118:	46bd      	mov	sp, r7
 800611a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611e:	4770      	bx	lr

08006120 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b084      	sub	sp, #16
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006128:	2300      	movs	r3, #0
 800612a:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006132:	b2db      	uxtb	r3, r3
 8006134:	2b02      	cmp	r3, #2
 8006136:	d005      	beq.n	8006144 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2204      	movs	r2, #4
 800613c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800613e:	2301      	movs	r3, #1
 8006140:	73fb      	strb	r3, [r7, #15]
 8006142:	e047      	b.n	80061d4 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	681a      	ldr	r2, [r3, #0]
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f022 020e 	bic.w	r2, r2, #14
 8006152:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	681a      	ldr	r2, [r3, #0]
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f022 0201 	bic.w	r2, r2, #1
 8006162:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006168:	681a      	ldr	r2, [r3, #0]
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800616e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006172:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006178:	f003 021c 	and.w	r2, r3, #28
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006180:	2101      	movs	r1, #1
 8006182:	fa01 f202 	lsl.w	r2, r1, r2
 8006186:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800618c:	687a      	ldr	r2, [r7, #4]
 800618e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006190:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006196:	2b00      	cmp	r3, #0
 8006198:	d00c      	beq.n	80061b4 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800619e:	681a      	ldr	r2, [r3, #0]
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80061a8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061ae:	687a      	ldr	r2, [r7, #4]
 80061b0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80061b2:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2201      	movs	r2, #1
 80061b8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2200      	movs	r2, #0
 80061c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d003      	beq.n	80061d4 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061d0:	6878      	ldr	r0, [r7, #4]
 80061d2:	4798      	blx	r3
    }
  }
  return status;
 80061d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80061d6:	4618      	mov	r0, r3
 80061d8:	3710      	adds	r7, #16
 80061da:	46bd      	mov	sp, r7
 80061dc:	bd80      	pop	{r7, pc}
	...

080061e0 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b086      	sub	sp, #24
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	60f8      	str	r0, [r7, #12]
 80061e8:	60b9      	str	r1, [r7, #8]
 80061ea:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 80061ee:	2300      	movs	r3, #0
 80061f0:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80061f2:	4b2f      	ldr	r3, [pc, #188]	; (80062b0 <HAL_FLASH_Program+0xd0>)
 80061f4:	781b      	ldrb	r3, [r3, #0]
 80061f6:	2b01      	cmp	r3, #1
 80061f8:	d101      	bne.n	80061fe <HAL_FLASH_Program+0x1e>
 80061fa:	2302      	movs	r3, #2
 80061fc:	e053      	b.n	80062a6 <HAL_FLASH_Program+0xc6>
 80061fe:	4b2c      	ldr	r3, [pc, #176]	; (80062b0 <HAL_FLASH_Program+0xd0>)
 8006200:	2201      	movs	r2, #1
 8006202:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006204:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006208:	f000 f894 	bl	8006334 <FLASH_WaitForLastOperation>
 800620c:	4603      	mov	r3, r0
 800620e:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 8006210:	7dfb      	ldrb	r3, [r7, #23]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d143      	bne.n	800629e <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8006216:	4b26      	ldr	r3, [pc, #152]	; (80062b0 <HAL_FLASH_Program+0xd0>)
 8006218:	2200      	movs	r2, #0
 800621a:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800621c:	4b25      	ldr	r3, [pc, #148]	; (80062b4 <HAL_FLASH_Program+0xd4>)
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006224:	2b00      	cmp	r3, #0
 8006226:	d009      	beq.n	800623c <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8006228:	4b22      	ldr	r3, [pc, #136]	; (80062b4 <HAL_FLASH_Program+0xd4>)
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4a21      	ldr	r2, [pc, #132]	; (80062b4 <HAL_FLASH_Program+0xd4>)
 800622e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006232:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8006234:	4b1e      	ldr	r3, [pc, #120]	; (80062b0 <HAL_FLASH_Program+0xd0>)
 8006236:	2202      	movs	r2, #2
 8006238:	771a      	strb	r2, [r3, #28]
 800623a:	e002      	b.n	8006242 <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800623c:	4b1c      	ldr	r3, [pc, #112]	; (80062b0 <HAL_FLASH_Program+0xd0>)
 800623e:	2200      	movs	r2, #0
 8006240:	771a      	strb	r2, [r3, #28]
    }

    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d107      	bne.n	8006258 <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8006248:	e9d7 2300 	ldrd	r2, r3, [r7]
 800624c:	68b8      	ldr	r0, [r7, #8]
 800624e:	f000 f8c9 	bl	80063e4 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 8006252:	2301      	movs	r3, #1
 8006254:	613b      	str	r3, [r7, #16]
 8006256:	e010      	b.n	800627a <HAL_FLASH_Program+0x9a>
    }
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	2b01      	cmp	r3, #1
 800625c:	d002      	beq.n	8006264 <HAL_FLASH_Program+0x84>
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	2b02      	cmp	r3, #2
 8006262:	d10a      	bne.n	800627a <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	4619      	mov	r1, r3
 8006268:	68b8      	ldr	r0, [r7, #8]
 800626a:	f000 f8e1 	bl	8006430 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	2b02      	cmp	r3, #2
 8006272:	d102      	bne.n	800627a <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 8006274:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006278:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800627a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800627e:	f000 f859 	bl	8006334 <FLASH_WaitForLastOperation>
 8006282:	4603      	mov	r3, r0
 8006284:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 8006286:	693b      	ldr	r3, [r7, #16]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d006      	beq.n	800629a <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 800628c:	4b09      	ldr	r3, [pc, #36]	; (80062b4 <HAL_FLASH_Program+0xd4>)
 800628e:	695a      	ldr	r2, [r3, #20]
 8006290:	693b      	ldr	r3, [r7, #16]
 8006292:	43db      	mvns	r3, r3
 8006294:	4907      	ldr	r1, [pc, #28]	; (80062b4 <HAL_FLASH_Program+0xd4>)
 8006296:	4013      	ands	r3, r2
 8006298:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800629a:	f000 fa17 	bl	80066cc <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800629e:	4b04      	ldr	r3, [pc, #16]	; (80062b0 <HAL_FLASH_Program+0xd0>)
 80062a0:	2200      	movs	r2, #0
 80062a2:	701a      	strb	r2, [r3, #0]

  return status;
 80062a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80062a6:	4618      	mov	r0, r3
 80062a8:	3718      	adds	r7, #24
 80062aa:	46bd      	mov	sp, r7
 80062ac:	bd80      	pop	{r7, pc}
 80062ae:	bf00      	nop
 80062b0:	20000048 	.word	0x20000048
 80062b4:	40022000 	.word	0x40022000

080062b8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80062b8:	b480      	push	{r7}
 80062ba:	b083      	sub	sp, #12
 80062bc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80062be:	2300      	movs	r3, #0
 80062c0:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80062c2:	4b0b      	ldr	r3, [pc, #44]	; (80062f0 <HAL_FLASH_Unlock+0x38>)
 80062c4:	695b      	ldr	r3, [r3, #20]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	da0b      	bge.n	80062e2 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80062ca:	4b09      	ldr	r3, [pc, #36]	; (80062f0 <HAL_FLASH_Unlock+0x38>)
 80062cc:	4a09      	ldr	r2, [pc, #36]	; (80062f4 <HAL_FLASH_Unlock+0x3c>)
 80062ce:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80062d0:	4b07      	ldr	r3, [pc, #28]	; (80062f0 <HAL_FLASH_Unlock+0x38>)
 80062d2:	4a09      	ldr	r2, [pc, #36]	; (80062f8 <HAL_FLASH_Unlock+0x40>)
 80062d4:	609a      	str	r2, [r3, #8]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80062d6:	4b06      	ldr	r3, [pc, #24]	; (80062f0 <HAL_FLASH_Unlock+0x38>)
 80062d8:	695b      	ldr	r3, [r3, #20]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	da01      	bge.n	80062e2 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80062de:	2301      	movs	r3, #1
 80062e0:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80062e2:	79fb      	ldrb	r3, [r7, #7]
}
 80062e4:	4618      	mov	r0, r3
 80062e6:	370c      	adds	r7, #12
 80062e8:	46bd      	mov	sp, r7
 80062ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ee:	4770      	bx	lr
 80062f0:	40022000 	.word	0x40022000
 80062f4:	45670123 	.word	0x45670123
 80062f8:	cdef89ab 	.word	0xcdef89ab

080062fc <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80062fc:	b480      	push	{r7}
 80062fe:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8006300:	4b05      	ldr	r3, [pc, #20]	; (8006318 <HAL_FLASH_Lock+0x1c>)
 8006302:	695b      	ldr	r3, [r3, #20]
 8006304:	4a04      	ldr	r2, [pc, #16]	; (8006318 <HAL_FLASH_Lock+0x1c>)
 8006306:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800630a:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 800630c:	2300      	movs	r3, #0
}
 800630e:	4618      	mov	r0, r3
 8006310:	46bd      	mov	sp, r7
 8006312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006316:	4770      	bx	lr
 8006318:	40022000 	.word	0x40022000

0800631c <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_RD: FLASH PCROP read error
  *            @arg HAL_FLASH_ERROR_OPTV: FLASH Option validity error
  *            @arg FLASH_FLAG_PEMPTY : FLASH Boot from not programmed flash (apply only for STM32L43x/STM32L44x devices)
  */
uint32_t HAL_FLASH_GetError(void)
{
 800631c:	b480      	push	{r7}
 800631e:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 8006320:	4b03      	ldr	r3, [pc, #12]	; (8006330 <HAL_FLASH_GetError+0x14>)
 8006322:	685b      	ldr	r3, [r3, #4]
}
 8006324:	4618      	mov	r0, r3
 8006326:	46bd      	mov	sp, r7
 8006328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632c:	4770      	bx	lr
 800632e:	bf00      	nop
 8006330:	20000048 	.word	0x20000048

08006334 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b084      	sub	sp, #16
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 800633c:	f7ff fd82 	bl	8005e44 <HAL_GetTick>
 8006340:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8006342:	e00d      	b.n	8006360 <FLASH_WaitForLastOperation+0x2c>
  {
    if(Timeout != HAL_MAX_DELAY)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	f1b3 3fff 	cmp.w	r3, #4294967295
 800634a:	d009      	beq.n	8006360 <FLASH_WaitForLastOperation+0x2c>
    {
      if((HAL_GetTick() - tickstart) >= Timeout)
 800634c:	f7ff fd7a 	bl	8005e44 <HAL_GetTick>
 8006350:	4602      	mov	r2, r0
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	1ad3      	subs	r3, r2, r3
 8006356:	687a      	ldr	r2, [r7, #4]
 8006358:	429a      	cmp	r2, r3
 800635a:	d801      	bhi.n	8006360 <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
 800635c:	2303      	movs	r3, #3
 800635e:	e036      	b.n	80063ce <FLASH_WaitForLastOperation+0x9a>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8006360:	4b1d      	ldr	r3, [pc, #116]	; (80063d8 <FLASH_WaitForLastOperation+0xa4>)
 8006362:	691b      	ldr	r3, [r3, #16]
 8006364:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006368:	2b00      	cmp	r3, #0
 800636a:	d1eb      	bne.n	8006344 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }

  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 800636c:	4b1a      	ldr	r3, [pc, #104]	; (80063d8 <FLASH_WaitForLastOperation+0xa4>)
 800636e:	691a      	ldr	r2, [r3, #16]
 8006370:	4b1a      	ldr	r3, [pc, #104]	; (80063dc <FLASH_WaitForLastOperation+0xa8>)
 8006372:	4013      	ands	r3, r2
 8006374:	60bb      	str	r3, [r7, #8]

  if(error != 0u)
 8006376:	68bb      	ldr	r3, [r7, #8]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d01e      	beq.n	80063ba <FLASH_WaitForLastOperation+0x86>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 800637c:	4b18      	ldr	r3, [pc, #96]	; (80063e0 <FLASH_WaitForLastOperation+0xac>)
 800637e:	685a      	ldr	r2, [r3, #4]
 8006380:	68bb      	ldr	r3, [r7, #8]
 8006382:	4313      	orrs	r3, r2
 8006384:	4a16      	ldr	r2, [pc, #88]	; (80063e0 <FLASH_WaitForLastOperation+0xac>)
 8006386:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8006388:	68bb      	ldr	r3, [r7, #8]
 800638a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800638e:	2b00      	cmp	r3, #0
 8006390:	d007      	beq.n	80063a2 <FLASH_WaitForLastOperation+0x6e>
 8006392:	4b11      	ldr	r3, [pc, #68]	; (80063d8 <FLASH_WaitForLastOperation+0xa4>)
 8006394:	699a      	ldr	r2, [r3, #24]
 8006396:	68bb      	ldr	r3, [r7, #8]
 8006398:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800639c:	490e      	ldr	r1, [pc, #56]	; (80063d8 <FLASH_WaitForLastOperation+0xa4>)
 800639e:	4313      	orrs	r3, r2
 80063a0:	618b      	str	r3, [r1, #24]
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d004      	beq.n	80063b6 <FLASH_WaitForLastOperation+0x82>
 80063ac:	4a0a      	ldr	r2, [pc, #40]	; (80063d8 <FLASH_WaitForLastOperation+0xa4>)
 80063ae:	68bb      	ldr	r3, [r7, #8]
 80063b0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80063b4:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 80063b6:	2301      	movs	r3, #1
 80063b8:	e009      	b.n	80063ce <FLASH_WaitForLastOperation+0x9a>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80063ba:	4b07      	ldr	r3, [pc, #28]	; (80063d8 <FLASH_WaitForLastOperation+0xa4>)
 80063bc:	691b      	ldr	r3, [r3, #16]
 80063be:	f003 0301 	and.w	r3, r3, #1
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d002      	beq.n	80063cc <FLASH_WaitForLastOperation+0x98>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80063c6:	4b04      	ldr	r3, [pc, #16]	; (80063d8 <FLASH_WaitForLastOperation+0xa4>)
 80063c8:	2201      	movs	r2, #1
 80063ca:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 80063cc:	2300      	movs	r3, #0
}
 80063ce:	4618      	mov	r0, r3
 80063d0:	3710      	adds	r7, #16
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bd80      	pop	{r7, pc}
 80063d6:	bf00      	nop
 80063d8:	40022000 	.word	0x40022000
 80063dc:	0002c3fa 	.word	0x0002c3fa
 80063e0:	20000048 	.word	0x20000048

080063e4 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80063e4:	b480      	push	{r7}
 80063e6:	b085      	sub	sp, #20
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	60f8      	str	r0, [r7, #12]
 80063ec:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 80063f0:	4b0e      	ldr	r3, [pc, #56]	; (800642c <FLASH_Program_DoubleWord+0x48>)
 80063f2:	695b      	ldr	r3, [r3, #20]
 80063f4:	4a0d      	ldr	r2, [pc, #52]	; (800642c <FLASH_Program_DoubleWord+0x48>)
 80063f6:	f043 0301 	orr.w	r3, r3, #1
 80063fa:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	683a      	ldr	r2, [r7, #0]
 8006400:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8006402:	f3bf 8f6f 	isb	sy
}
 8006406:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 8006408:	e9d7 0100 	ldrd	r0, r1, [r7]
 800640c:	f04f 0200 	mov.w	r2, #0
 8006410:	f04f 0300 	mov.w	r3, #0
 8006414:	000a      	movs	r2, r1
 8006416:	2300      	movs	r3, #0
 8006418:	68f9      	ldr	r1, [r7, #12]
 800641a:	3104      	adds	r1, #4
 800641c:	4613      	mov	r3, r2
 800641e:	600b      	str	r3, [r1, #0]
}
 8006420:	bf00      	nop
 8006422:	3714      	adds	r7, #20
 8006424:	46bd      	mov	sp, r7
 8006426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642a:	4770      	bx	lr
 800642c:	40022000 	.word	0x40022000

08006430 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 8006430:	b480      	push	{r7}
 8006432:	b089      	sub	sp, #36	; 0x24
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
 8006438:	6039      	str	r1, [r7, #0]
  uint32_t primask_bit;
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
 800643a:	2380      	movs	r3, #128	; 0x80
 800643c:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t*)Address;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8006446:	4b14      	ldr	r3, [pc, #80]	; (8006498 <FLASH_Program_Fast+0x68>)
 8006448:	695b      	ldr	r3, [r3, #20]
 800644a:	4a13      	ldr	r2, [pc, #76]	; (8006498 <FLASH_Program_Fast+0x68>)
 800644c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006450:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006452:	f3ef 8310 	mrs	r3, PRIMASK
 8006456:	60fb      	str	r3, [r7, #12]
  return(result);
 8006458:	68fb      	ldr	r3, [r7, #12]

  /* Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 800645a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800645c:	b672      	cpsid	i
}
 800645e:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8006460:	697b      	ldr	r3, [r7, #20]
 8006462:	681a      	ldr	r2, [r3, #0]
 8006464:	69bb      	ldr	r3, [r7, #24]
 8006466:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8006468:	69bb      	ldr	r3, [r7, #24]
 800646a:	3304      	adds	r3, #4
 800646c:	61bb      	str	r3, [r7, #24]
    src_addr++;
 800646e:	697b      	ldr	r3, [r7, #20]
 8006470:	3304      	adds	r3, #4
 8006472:	617b      	str	r3, [r7, #20]
    row_index--;
 8006474:	7ffb      	ldrb	r3, [r7, #31]
 8006476:	3b01      	subs	r3, #1
 8006478:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
 800647a:	7ffb      	ldrb	r3, [r7, #31]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d1ef      	bne.n	8006460 <FLASH_Program_Fast+0x30>
 8006480:	693b      	ldr	r3, [r7, #16]
 8006482:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	f383 8810 	msr	PRIMASK, r3
}
 800648a:	bf00      	nop

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 800648c:	bf00      	nop
 800648e:	3724      	adds	r7, #36	; 0x24
 8006490:	46bd      	mov	sp, r7
 8006492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006496:	4770      	bx	lr
 8006498:	40022000 	.word	0x40022000

0800649c <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b084      	sub	sp, #16
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
 80064a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t page_index;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80064a6:	4b49      	ldr	r3, [pc, #292]	; (80065cc <HAL_FLASHEx_Erase+0x130>)
 80064a8:	781b      	ldrb	r3, [r3, #0]
 80064aa:	2b01      	cmp	r3, #1
 80064ac:	d101      	bne.n	80064b2 <HAL_FLASHEx_Erase+0x16>
 80064ae:	2302      	movs	r3, #2
 80064b0:	e087      	b.n	80065c2 <HAL_FLASHEx_Erase+0x126>
 80064b2:	4b46      	ldr	r3, [pc, #280]	; (80065cc <HAL_FLASHEx_Erase+0x130>)
 80064b4:	2201      	movs	r2, #1
 80064b6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80064b8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80064bc:	f7ff ff3a 	bl	8006334 <FLASH_WaitForLastOperation>
 80064c0:	4603      	mov	r3, r0
 80064c2:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80064c4:	7bfb      	ldrb	r3, [r7, #15]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d177      	bne.n	80065ba <HAL_FLASHEx_Erase+0x11e>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80064ca:	4b40      	ldr	r3, [pc, #256]	; (80065cc <HAL_FLASHEx_Erase+0x130>)
 80064cc:	2200      	movs	r2, #0
 80064ce:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 80064d0:	4b3f      	ldr	r3, [pc, #252]	; (80065d0 <HAL_FLASHEx_Erase+0x134>)
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d013      	beq.n	8006504 <HAL_FLASHEx_Erase+0x68>
    {
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 80064dc:	4b3c      	ldr	r3, [pc, #240]	; (80065d0 <HAL_FLASHEx_Erase+0x134>)
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d009      	beq.n	80064fc <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 80064e8:	4b39      	ldr	r3, [pc, #228]	; (80065d0 <HAL_FLASHEx_Erase+0x134>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	4a38      	ldr	r2, [pc, #224]	; (80065d0 <HAL_FLASHEx_Erase+0x134>)
 80064ee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80064f2:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 80064f4:	4b35      	ldr	r3, [pc, #212]	; (80065cc <HAL_FLASHEx_Erase+0x130>)
 80064f6:	2203      	movs	r2, #3
 80064f8:	771a      	strb	r2, [r3, #28]
 80064fa:	e016      	b.n	800652a <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 80064fc:	4b33      	ldr	r3, [pc, #204]	; (80065cc <HAL_FLASHEx_Erase+0x130>)
 80064fe:	2201      	movs	r2, #1
 8006500:	771a      	strb	r2, [r3, #28]
 8006502:	e012      	b.n	800652a <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8006504:	4b32      	ldr	r3, [pc, #200]	; (80065d0 <HAL_FLASHEx_Erase+0x134>)
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800650c:	2b00      	cmp	r3, #0
 800650e:	d009      	beq.n	8006524 <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8006510:	4b2f      	ldr	r3, [pc, #188]	; (80065d0 <HAL_FLASHEx_Erase+0x134>)
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	4a2e      	ldr	r2, [pc, #184]	; (80065d0 <HAL_FLASHEx_Erase+0x134>)
 8006516:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800651a:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 800651c:	4b2b      	ldr	r3, [pc, #172]	; (80065cc <HAL_FLASHEx_Erase+0x130>)
 800651e:	2202      	movs	r2, #2
 8006520:	771a      	strb	r2, [r3, #28]
 8006522:	e002      	b.n	800652a <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8006524:	4b29      	ldr	r3, [pc, #164]	; (80065cc <HAL_FLASHEx_Erase+0x130>)
 8006526:	2200      	movs	r2, #0
 8006528:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	2b01      	cmp	r3, #1
 8006530:	d113      	bne.n	800655a <HAL_FLASHEx_Erase+0xbe>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	685b      	ldr	r3, [r3, #4]
 8006536:	4618      	mov	r0, r3
 8006538:	f000 f84c 	bl	80065d4 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800653c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006540:	f7ff fef8 	bl	8006334 <FLASH_WaitForLastOperation>
 8006544:	4603      	mov	r3, r0
 8006546:	73fb      	strb	r3, [r7, #15]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 8006548:	4b21      	ldr	r3, [pc, #132]	; (80065d0 <HAL_FLASHEx_Erase+0x134>)
 800654a:	695b      	ldr	r3, [r3, #20]
 800654c:	4a20      	ldr	r2, [pc, #128]	; (80065d0 <HAL_FLASHEx_Erase+0x134>)
 800654e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006552:	f023 0304 	bic.w	r3, r3, #4
 8006556:	6153      	str	r3, [r2, #20]
 8006558:	e02d      	b.n	80065b6 <HAL_FLASHEx_Erase+0x11a>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	f04f 32ff 	mov.w	r2, #4294967295
 8006560:	601a      	str	r2, [r3, #0]

      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	689b      	ldr	r3, [r3, #8]
 8006566:	60bb      	str	r3, [r7, #8]
 8006568:	e01d      	b.n	80065a6 <HAL_FLASHEx_Erase+0x10a>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	685b      	ldr	r3, [r3, #4]
 800656e:	4619      	mov	r1, r3
 8006570:	68b8      	ldr	r0, [r7, #8]
 8006572:	f000 f867 	bl	8006644 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006576:	f24c 3050 	movw	r0, #50000	; 0xc350
 800657a:	f7ff fedb 	bl	8006334 <FLASH_WaitForLastOperation>
 800657e:	4603      	mov	r3, r0
 8006580:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8006582:	4b13      	ldr	r3, [pc, #76]	; (80065d0 <HAL_FLASHEx_Erase+0x134>)
 8006584:	695b      	ldr	r3, [r3, #20]
 8006586:	4a12      	ldr	r2, [pc, #72]	; (80065d0 <HAL_FLASHEx_Erase+0x134>)
 8006588:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800658c:	f023 0302 	bic.w	r3, r3, #2
 8006590:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 8006592:	7bfb      	ldrb	r3, [r7, #15]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d003      	beq.n	80065a0 <HAL_FLASHEx_Erase+0x104>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = page_index;
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	68ba      	ldr	r2, [r7, #8]
 800659c:	601a      	str	r2, [r3, #0]
          break;
 800659e:	e00a      	b.n	80065b6 <HAL_FLASHEx_Erase+0x11a>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	3301      	adds	r3, #1
 80065a4:	60bb      	str	r3, [r7, #8]
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	689a      	ldr	r2, [r3, #8]
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	68db      	ldr	r3, [r3, #12]
 80065ae:	4413      	add	r3, r2
 80065b0:	68ba      	ldr	r2, [r7, #8]
 80065b2:	429a      	cmp	r2, r3
 80065b4:	d3d9      	bcc.n	800656a <HAL_FLASHEx_Erase+0xce>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80065b6:	f000 f889 	bl	80066cc <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80065ba:	4b04      	ldr	r3, [pc, #16]	; (80065cc <HAL_FLASHEx_Erase+0x130>)
 80065bc:	2200      	movs	r2, #0
 80065be:	701a      	strb	r2, [r3, #0]

  return status;
 80065c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80065c2:	4618      	mov	r0, r3
 80065c4:	3710      	adds	r7, #16
 80065c6:	46bd      	mov	sp, r7
 80065c8:	bd80      	pop	{r7, pc}
 80065ca:	bf00      	nop
 80065cc:	20000048 	.word	0x20000048
 80065d0:	40022000 	.word	0x40022000

080065d4 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80065d4:	b480      	push	{r7}
 80065d6:	b083      	sub	sp, #12
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
  if (READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) != 0U)
 80065dc:	4b18      	ldr	r3, [pc, #96]	; (8006640 <FLASH_MassErase+0x6c>)
 80065de:	6a1b      	ldr	r3, [r3, #32]
 80065e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d016      	beq.n	8006616 <FLASH_MassErase+0x42>
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	f003 0301 	and.w	r3, r3, #1
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d005      	beq.n	80065fe <FLASH_MassErase+0x2a>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 80065f2:	4b13      	ldr	r3, [pc, #76]	; (8006640 <FLASH_MassErase+0x6c>)
 80065f4:	695b      	ldr	r3, [r3, #20]
 80065f6:	4a12      	ldr	r2, [pc, #72]	; (8006640 <FLASH_MassErase+0x6c>)
 80065f8:	f043 0304 	orr.w	r3, r3, #4
 80065fc:	6153      	str	r3, [r2, #20]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    /* Set the Mass Erase Bit for the bank 2 if requested */
    if((Banks & FLASH_BANK_2) != 0U)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	f003 0302 	and.w	r3, r3, #2
 8006604:	2b00      	cmp	r3, #0
 8006606:	d00e      	beq.n	8006626 <FLASH_MassErase+0x52>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER2);
 8006608:	4b0d      	ldr	r3, [pc, #52]	; (8006640 <FLASH_MassErase+0x6c>)
 800660a:	695b      	ldr	r3, [r3, #20]
 800660c:	4a0c      	ldr	r2, [pc, #48]	; (8006640 <FLASH_MassErase+0x6c>)
 800660e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006612:	6153      	str	r3, [r2, #20]
 8006614:	e007      	b.n	8006626 <FLASH_MassErase+0x52>
#endif
  }
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
  else
  {
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 8006616:	4b0a      	ldr	r3, [pc, #40]	; (8006640 <FLASH_MassErase+0x6c>)
 8006618:	695b      	ldr	r3, [r3, #20]
 800661a:	4a09      	ldr	r2, [pc, #36]	; (8006640 <FLASH_MassErase+0x6c>)
 800661c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006620:	f043 0304 	orr.w	r3, r3, #4
 8006624:	6153      	str	r3, [r2, #20]
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8006626:	4b06      	ldr	r3, [pc, #24]	; (8006640 <FLASH_MassErase+0x6c>)
 8006628:	695b      	ldr	r3, [r3, #20]
 800662a:	4a05      	ldr	r2, [pc, #20]	; (8006640 <FLASH_MassErase+0x6c>)
 800662c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006630:	6153      	str	r3, [r2, #20]
}
 8006632:	bf00      	nop
 8006634:	370c      	adds	r7, #12
 8006636:	46bd      	mov	sp, r7
 8006638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663c:	4770      	bx	lr
 800663e:	bf00      	nop
 8006640:	40022000 	.word	0x40022000

08006644 <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 8006644:	b480      	push	{r7}
 8006646:	b083      	sub	sp, #12
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
 800664c:	6039      	str	r1, [r7, #0]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
  if(READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) == 0U)
 800664e:	4b1e      	ldr	r3, [pc, #120]	; (80066c8 <FLASH_PageErase+0x84>)
 8006650:	6a1b      	ldr	r3, [r3, #32]
 8006652:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006656:	2b00      	cmp	r3, #0
 8006658:	d106      	bne.n	8006668 <FLASH_PageErase+0x24>
  {
    CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 800665a:	4b1b      	ldr	r3, [pc, #108]	; (80066c8 <FLASH_PageErase+0x84>)
 800665c:	695b      	ldr	r3, [r3, #20]
 800665e:	4a1a      	ldr	r2, [pc, #104]	; (80066c8 <FLASH_PageErase+0x84>)
 8006660:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006664:	6153      	str	r3, [r2, #20]
 8006666:	e011      	b.n	800668c <FLASH_PageErase+0x48>
  else
#endif
  {
    assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

    if((Banks & FLASH_BANK_1) != 0U)
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	f003 0301 	and.w	r3, r3, #1
 800666e:	2b00      	cmp	r3, #0
 8006670:	d006      	beq.n	8006680 <FLASH_PageErase+0x3c>
    {
      CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 8006672:	4b15      	ldr	r3, [pc, #84]	; (80066c8 <FLASH_PageErase+0x84>)
 8006674:	695b      	ldr	r3, [r3, #20]
 8006676:	4a14      	ldr	r2, [pc, #80]	; (80066c8 <FLASH_PageErase+0x84>)
 8006678:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800667c:	6153      	str	r3, [r2, #20]
 800667e:	e005      	b.n	800668c <FLASH_PageErase+0x48>
    }
    else
    {
      SET_BIT(FLASH->CR, FLASH_CR_BKER);
 8006680:	4b11      	ldr	r3, [pc, #68]	; (80066c8 <FLASH_PageErase+0x84>)
 8006682:	695b      	ldr	r3, [r3, #20]
 8006684:	4a10      	ldr	r2, [pc, #64]	; (80066c8 <FLASH_PageErase+0x84>)
 8006686:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800668a:	6153      	str	r3, [r2, #20]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 800668c:	4b0e      	ldr	r3, [pc, #56]	; (80066c8 <FLASH_PageErase+0x84>)
 800668e:	695b      	ldr	r3, [r3, #20]
 8006690:	f423 62ff 	bic.w	r2, r3, #2040	; 0x7f8
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	00db      	lsls	r3, r3, #3
 8006698:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 800669c:	490a      	ldr	r1, [pc, #40]	; (80066c8 <FLASH_PageErase+0x84>)
 800669e:	4313      	orrs	r3, r2
 80066a0:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 80066a2:	4b09      	ldr	r3, [pc, #36]	; (80066c8 <FLASH_PageErase+0x84>)
 80066a4:	695b      	ldr	r3, [r3, #20]
 80066a6:	4a08      	ldr	r2, [pc, #32]	; (80066c8 <FLASH_PageErase+0x84>)
 80066a8:	f043 0302 	orr.w	r3, r3, #2
 80066ac:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80066ae:	4b06      	ldr	r3, [pc, #24]	; (80066c8 <FLASH_PageErase+0x84>)
 80066b0:	695b      	ldr	r3, [r3, #20]
 80066b2:	4a05      	ldr	r2, [pc, #20]	; (80066c8 <FLASH_PageErase+0x84>)
 80066b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80066b8:	6153      	str	r3, [r2, #20]
}
 80066ba:	bf00      	nop
 80066bc:	370c      	adds	r7, #12
 80066be:	46bd      	mov	sp, r7
 80066c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c4:	4770      	bx	lr
 80066c6:	bf00      	nop
 80066c8:	40022000 	.word	0x40022000

080066cc <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80066cc:	b480      	push	{r7}
 80066ce:	b083      	sub	sp, #12
 80066d0:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 80066d2:	4b21      	ldr	r3, [pc, #132]	; (8006758 <FLASH_FlushCaches+0x8c>)
 80066d4:	7f1b      	ldrb	r3, [r3, #28]
 80066d6:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 80066d8:	79fb      	ldrb	r3, [r7, #7]
 80066da:	2b01      	cmp	r3, #1
 80066dc:	d002      	beq.n	80066e4 <FLASH_FlushCaches+0x18>
 80066de:	79fb      	ldrb	r3, [r7, #7]
 80066e0:	2b03      	cmp	r3, #3
 80066e2:	d117      	bne.n	8006714 <FLASH_FlushCaches+0x48>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80066e4:	4b1d      	ldr	r3, [pc, #116]	; (800675c <FLASH_FlushCaches+0x90>)
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	4a1c      	ldr	r2, [pc, #112]	; (800675c <FLASH_FlushCaches+0x90>)
 80066ea:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80066ee:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80066f0:	4b1a      	ldr	r3, [pc, #104]	; (800675c <FLASH_FlushCaches+0x90>)
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	4a19      	ldr	r2, [pc, #100]	; (800675c <FLASH_FlushCaches+0x90>)
 80066f6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80066fa:	6013      	str	r3, [r2, #0]
 80066fc:	4b17      	ldr	r3, [pc, #92]	; (800675c <FLASH_FlushCaches+0x90>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	4a16      	ldr	r2, [pc, #88]	; (800675c <FLASH_FlushCaches+0x90>)
 8006702:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006706:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006708:	4b14      	ldr	r3, [pc, #80]	; (800675c <FLASH_FlushCaches+0x90>)
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	4a13      	ldr	r2, [pc, #76]	; (800675c <FLASH_FlushCaches+0x90>)
 800670e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006712:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 8006714:	79fb      	ldrb	r3, [r7, #7]
 8006716:	2b02      	cmp	r3, #2
 8006718:	d002      	beq.n	8006720 <FLASH_FlushCaches+0x54>
 800671a:	79fb      	ldrb	r3, [r7, #7]
 800671c:	2b03      	cmp	r3, #3
 800671e:	d111      	bne.n	8006744 <FLASH_FlushCaches+0x78>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8006720:	4b0e      	ldr	r3, [pc, #56]	; (800675c <FLASH_FlushCaches+0x90>)
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	4a0d      	ldr	r2, [pc, #52]	; (800675c <FLASH_FlushCaches+0x90>)
 8006726:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800672a:	6013      	str	r3, [r2, #0]
 800672c:	4b0b      	ldr	r3, [pc, #44]	; (800675c <FLASH_FlushCaches+0x90>)
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	4a0a      	ldr	r2, [pc, #40]	; (800675c <FLASH_FlushCaches+0x90>)
 8006732:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006736:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8006738:	4b08      	ldr	r3, [pc, #32]	; (800675c <FLASH_FlushCaches+0x90>)
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	4a07      	ldr	r2, [pc, #28]	; (800675c <FLASH_FlushCaches+0x90>)
 800673e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006742:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8006744:	4b04      	ldr	r3, [pc, #16]	; (8006758 <FLASH_FlushCaches+0x8c>)
 8006746:	2200      	movs	r2, #0
 8006748:	771a      	strb	r2, [r3, #28]
}
 800674a:	bf00      	nop
 800674c:	370c      	adds	r7, #12
 800674e:	46bd      	mov	sp, r7
 8006750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006754:	4770      	bx	lr
 8006756:	bf00      	nop
 8006758:	20000048 	.word	0x20000048
 800675c:	40022000 	.word	0x40022000

08006760 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006760:	b480      	push	{r7}
 8006762:	b087      	sub	sp, #28
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
 8006768:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800676a:	2300      	movs	r3, #0
 800676c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800676e:	e166      	b.n	8006a3e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	681a      	ldr	r2, [r3, #0]
 8006774:	2101      	movs	r1, #1
 8006776:	697b      	ldr	r3, [r7, #20]
 8006778:	fa01 f303 	lsl.w	r3, r1, r3
 800677c:	4013      	ands	r3, r2
 800677e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	2b00      	cmp	r3, #0
 8006784:	f000 8158 	beq.w	8006a38 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	685b      	ldr	r3, [r3, #4]
 800678c:	f003 0303 	and.w	r3, r3, #3
 8006790:	2b01      	cmp	r3, #1
 8006792:	d005      	beq.n	80067a0 <HAL_GPIO_Init+0x40>
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	685b      	ldr	r3, [r3, #4]
 8006798:	f003 0303 	and.w	r3, r3, #3
 800679c:	2b02      	cmp	r3, #2
 800679e:	d130      	bne.n	8006802 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	689b      	ldr	r3, [r3, #8]
 80067a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80067a6:	697b      	ldr	r3, [r7, #20]
 80067a8:	005b      	lsls	r3, r3, #1
 80067aa:	2203      	movs	r2, #3
 80067ac:	fa02 f303 	lsl.w	r3, r2, r3
 80067b0:	43db      	mvns	r3, r3
 80067b2:	693a      	ldr	r2, [r7, #16]
 80067b4:	4013      	ands	r3, r2
 80067b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	68da      	ldr	r2, [r3, #12]
 80067bc:	697b      	ldr	r3, [r7, #20]
 80067be:	005b      	lsls	r3, r3, #1
 80067c0:	fa02 f303 	lsl.w	r3, r2, r3
 80067c4:	693a      	ldr	r2, [r7, #16]
 80067c6:	4313      	orrs	r3, r2
 80067c8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	693a      	ldr	r2, [r7, #16]
 80067ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	685b      	ldr	r3, [r3, #4]
 80067d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80067d6:	2201      	movs	r2, #1
 80067d8:	697b      	ldr	r3, [r7, #20]
 80067da:	fa02 f303 	lsl.w	r3, r2, r3
 80067de:	43db      	mvns	r3, r3
 80067e0:	693a      	ldr	r2, [r7, #16]
 80067e2:	4013      	ands	r3, r2
 80067e4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	685b      	ldr	r3, [r3, #4]
 80067ea:	091b      	lsrs	r3, r3, #4
 80067ec:	f003 0201 	and.w	r2, r3, #1
 80067f0:	697b      	ldr	r3, [r7, #20]
 80067f2:	fa02 f303 	lsl.w	r3, r2, r3
 80067f6:	693a      	ldr	r2, [r7, #16]
 80067f8:	4313      	orrs	r3, r2
 80067fa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	693a      	ldr	r2, [r7, #16]
 8006800:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	685b      	ldr	r3, [r3, #4]
 8006806:	f003 0303 	and.w	r3, r3, #3
 800680a:	2b03      	cmp	r3, #3
 800680c:	d017      	beq.n	800683e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	68db      	ldr	r3, [r3, #12]
 8006812:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006814:	697b      	ldr	r3, [r7, #20]
 8006816:	005b      	lsls	r3, r3, #1
 8006818:	2203      	movs	r2, #3
 800681a:	fa02 f303 	lsl.w	r3, r2, r3
 800681e:	43db      	mvns	r3, r3
 8006820:	693a      	ldr	r2, [r7, #16]
 8006822:	4013      	ands	r3, r2
 8006824:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	689a      	ldr	r2, [r3, #8]
 800682a:	697b      	ldr	r3, [r7, #20]
 800682c:	005b      	lsls	r3, r3, #1
 800682e:	fa02 f303 	lsl.w	r3, r2, r3
 8006832:	693a      	ldr	r2, [r7, #16]
 8006834:	4313      	orrs	r3, r2
 8006836:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	693a      	ldr	r2, [r7, #16]
 800683c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	685b      	ldr	r3, [r3, #4]
 8006842:	f003 0303 	and.w	r3, r3, #3
 8006846:	2b02      	cmp	r3, #2
 8006848:	d123      	bne.n	8006892 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800684a:	697b      	ldr	r3, [r7, #20]
 800684c:	08da      	lsrs	r2, r3, #3
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	3208      	adds	r2, #8
 8006852:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006856:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006858:	697b      	ldr	r3, [r7, #20]
 800685a:	f003 0307 	and.w	r3, r3, #7
 800685e:	009b      	lsls	r3, r3, #2
 8006860:	220f      	movs	r2, #15
 8006862:	fa02 f303 	lsl.w	r3, r2, r3
 8006866:	43db      	mvns	r3, r3
 8006868:	693a      	ldr	r2, [r7, #16]
 800686a:	4013      	ands	r3, r2
 800686c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	691a      	ldr	r2, [r3, #16]
 8006872:	697b      	ldr	r3, [r7, #20]
 8006874:	f003 0307 	and.w	r3, r3, #7
 8006878:	009b      	lsls	r3, r3, #2
 800687a:	fa02 f303 	lsl.w	r3, r2, r3
 800687e:	693a      	ldr	r2, [r7, #16]
 8006880:	4313      	orrs	r3, r2
 8006882:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006884:	697b      	ldr	r3, [r7, #20]
 8006886:	08da      	lsrs	r2, r3, #3
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	3208      	adds	r2, #8
 800688c:	6939      	ldr	r1, [r7, #16]
 800688e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8006898:	697b      	ldr	r3, [r7, #20]
 800689a:	005b      	lsls	r3, r3, #1
 800689c:	2203      	movs	r2, #3
 800689e:	fa02 f303 	lsl.w	r3, r2, r3
 80068a2:	43db      	mvns	r3, r3
 80068a4:	693a      	ldr	r2, [r7, #16]
 80068a6:	4013      	ands	r3, r2
 80068a8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	685b      	ldr	r3, [r3, #4]
 80068ae:	f003 0203 	and.w	r2, r3, #3
 80068b2:	697b      	ldr	r3, [r7, #20]
 80068b4:	005b      	lsls	r3, r3, #1
 80068b6:	fa02 f303 	lsl.w	r3, r2, r3
 80068ba:	693a      	ldr	r2, [r7, #16]
 80068bc:	4313      	orrs	r3, r2
 80068be:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	693a      	ldr	r2, [r7, #16]
 80068c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	685b      	ldr	r3, [r3, #4]
 80068ca:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	f000 80b2 	beq.w	8006a38 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80068d4:	4b61      	ldr	r3, [pc, #388]	; (8006a5c <HAL_GPIO_Init+0x2fc>)
 80068d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068d8:	4a60      	ldr	r2, [pc, #384]	; (8006a5c <HAL_GPIO_Init+0x2fc>)
 80068da:	f043 0301 	orr.w	r3, r3, #1
 80068de:	6613      	str	r3, [r2, #96]	; 0x60
 80068e0:	4b5e      	ldr	r3, [pc, #376]	; (8006a5c <HAL_GPIO_Init+0x2fc>)
 80068e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068e4:	f003 0301 	and.w	r3, r3, #1
 80068e8:	60bb      	str	r3, [r7, #8]
 80068ea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80068ec:	4a5c      	ldr	r2, [pc, #368]	; (8006a60 <HAL_GPIO_Init+0x300>)
 80068ee:	697b      	ldr	r3, [r7, #20]
 80068f0:	089b      	lsrs	r3, r3, #2
 80068f2:	3302      	adds	r3, #2
 80068f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80068f8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80068fa:	697b      	ldr	r3, [r7, #20]
 80068fc:	f003 0303 	and.w	r3, r3, #3
 8006900:	009b      	lsls	r3, r3, #2
 8006902:	220f      	movs	r2, #15
 8006904:	fa02 f303 	lsl.w	r3, r2, r3
 8006908:	43db      	mvns	r3, r3
 800690a:	693a      	ldr	r2, [r7, #16]
 800690c:	4013      	ands	r3, r2
 800690e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8006916:	d02b      	beq.n	8006970 <HAL_GPIO_Init+0x210>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	4a52      	ldr	r2, [pc, #328]	; (8006a64 <HAL_GPIO_Init+0x304>)
 800691c:	4293      	cmp	r3, r2
 800691e:	d025      	beq.n	800696c <HAL_GPIO_Init+0x20c>
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	4a51      	ldr	r2, [pc, #324]	; (8006a68 <HAL_GPIO_Init+0x308>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d01f      	beq.n	8006968 <HAL_GPIO_Init+0x208>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	4a50      	ldr	r2, [pc, #320]	; (8006a6c <HAL_GPIO_Init+0x30c>)
 800692c:	4293      	cmp	r3, r2
 800692e:	d019      	beq.n	8006964 <HAL_GPIO_Init+0x204>
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	4a4f      	ldr	r2, [pc, #316]	; (8006a70 <HAL_GPIO_Init+0x310>)
 8006934:	4293      	cmp	r3, r2
 8006936:	d013      	beq.n	8006960 <HAL_GPIO_Init+0x200>
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	4a4e      	ldr	r2, [pc, #312]	; (8006a74 <HAL_GPIO_Init+0x314>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d00d      	beq.n	800695c <HAL_GPIO_Init+0x1fc>
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	4a4d      	ldr	r2, [pc, #308]	; (8006a78 <HAL_GPIO_Init+0x318>)
 8006944:	4293      	cmp	r3, r2
 8006946:	d007      	beq.n	8006958 <HAL_GPIO_Init+0x1f8>
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	4a4c      	ldr	r2, [pc, #304]	; (8006a7c <HAL_GPIO_Init+0x31c>)
 800694c:	4293      	cmp	r3, r2
 800694e:	d101      	bne.n	8006954 <HAL_GPIO_Init+0x1f4>
 8006950:	2307      	movs	r3, #7
 8006952:	e00e      	b.n	8006972 <HAL_GPIO_Init+0x212>
 8006954:	2308      	movs	r3, #8
 8006956:	e00c      	b.n	8006972 <HAL_GPIO_Init+0x212>
 8006958:	2306      	movs	r3, #6
 800695a:	e00a      	b.n	8006972 <HAL_GPIO_Init+0x212>
 800695c:	2305      	movs	r3, #5
 800695e:	e008      	b.n	8006972 <HAL_GPIO_Init+0x212>
 8006960:	2304      	movs	r3, #4
 8006962:	e006      	b.n	8006972 <HAL_GPIO_Init+0x212>
 8006964:	2303      	movs	r3, #3
 8006966:	e004      	b.n	8006972 <HAL_GPIO_Init+0x212>
 8006968:	2302      	movs	r3, #2
 800696a:	e002      	b.n	8006972 <HAL_GPIO_Init+0x212>
 800696c:	2301      	movs	r3, #1
 800696e:	e000      	b.n	8006972 <HAL_GPIO_Init+0x212>
 8006970:	2300      	movs	r3, #0
 8006972:	697a      	ldr	r2, [r7, #20]
 8006974:	f002 0203 	and.w	r2, r2, #3
 8006978:	0092      	lsls	r2, r2, #2
 800697a:	4093      	lsls	r3, r2
 800697c:	693a      	ldr	r2, [r7, #16]
 800697e:	4313      	orrs	r3, r2
 8006980:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8006982:	4937      	ldr	r1, [pc, #220]	; (8006a60 <HAL_GPIO_Init+0x300>)
 8006984:	697b      	ldr	r3, [r7, #20]
 8006986:	089b      	lsrs	r3, r3, #2
 8006988:	3302      	adds	r3, #2
 800698a:	693a      	ldr	r2, [r7, #16]
 800698c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006990:	4b3b      	ldr	r3, [pc, #236]	; (8006a80 <HAL_GPIO_Init+0x320>)
 8006992:	689b      	ldr	r3, [r3, #8]
 8006994:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	43db      	mvns	r3, r3
 800699a:	693a      	ldr	r2, [r7, #16]
 800699c:	4013      	ands	r3, r2
 800699e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	685b      	ldr	r3, [r3, #4]
 80069a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d003      	beq.n	80069b4 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80069ac:	693a      	ldr	r2, [r7, #16]
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	4313      	orrs	r3, r2
 80069b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80069b4:	4a32      	ldr	r2, [pc, #200]	; (8006a80 <HAL_GPIO_Init+0x320>)
 80069b6:	693b      	ldr	r3, [r7, #16]
 80069b8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80069ba:	4b31      	ldr	r3, [pc, #196]	; (8006a80 <HAL_GPIO_Init+0x320>)
 80069bc:	68db      	ldr	r3, [r3, #12]
 80069be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	43db      	mvns	r3, r3
 80069c4:	693a      	ldr	r2, [r7, #16]
 80069c6:	4013      	ands	r3, r2
 80069c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	685b      	ldr	r3, [r3, #4]
 80069ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d003      	beq.n	80069de <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80069d6:	693a      	ldr	r2, [r7, #16]
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	4313      	orrs	r3, r2
 80069dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80069de:	4a28      	ldr	r2, [pc, #160]	; (8006a80 <HAL_GPIO_Init+0x320>)
 80069e0:	693b      	ldr	r3, [r7, #16]
 80069e2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80069e4:	4b26      	ldr	r3, [pc, #152]	; (8006a80 <HAL_GPIO_Init+0x320>)
 80069e6:	685b      	ldr	r3, [r3, #4]
 80069e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	43db      	mvns	r3, r3
 80069ee:	693a      	ldr	r2, [r7, #16]
 80069f0:	4013      	ands	r3, r2
 80069f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	685b      	ldr	r3, [r3, #4]
 80069f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d003      	beq.n	8006a08 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8006a00:	693a      	ldr	r2, [r7, #16]
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	4313      	orrs	r3, r2
 8006a06:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006a08:	4a1d      	ldr	r2, [pc, #116]	; (8006a80 <HAL_GPIO_Init+0x320>)
 8006a0a:	693b      	ldr	r3, [r7, #16]
 8006a0c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8006a0e:	4b1c      	ldr	r3, [pc, #112]	; (8006a80 <HAL_GPIO_Init+0x320>)
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	43db      	mvns	r3, r3
 8006a18:	693a      	ldr	r2, [r7, #16]
 8006a1a:	4013      	ands	r3, r2
 8006a1c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	685b      	ldr	r3, [r3, #4]
 8006a22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d003      	beq.n	8006a32 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8006a2a:	693a      	ldr	r2, [r7, #16]
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	4313      	orrs	r3, r2
 8006a30:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006a32:	4a13      	ldr	r2, [pc, #76]	; (8006a80 <HAL_GPIO_Init+0x320>)
 8006a34:	693b      	ldr	r3, [r7, #16]
 8006a36:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006a38:	697b      	ldr	r3, [r7, #20]
 8006a3a:	3301      	adds	r3, #1
 8006a3c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	681a      	ldr	r2, [r3, #0]
 8006a42:	697b      	ldr	r3, [r7, #20]
 8006a44:	fa22 f303 	lsr.w	r3, r2, r3
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	f47f ae91 	bne.w	8006770 <HAL_GPIO_Init+0x10>
  }
}
 8006a4e:	bf00      	nop
 8006a50:	bf00      	nop
 8006a52:	371c      	adds	r7, #28
 8006a54:	46bd      	mov	sp, r7
 8006a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5a:	4770      	bx	lr
 8006a5c:	40021000 	.word	0x40021000
 8006a60:	40010000 	.word	0x40010000
 8006a64:	48000400 	.word	0x48000400
 8006a68:	48000800 	.word	0x48000800
 8006a6c:	48000c00 	.word	0x48000c00
 8006a70:	48001000 	.word	0x48001000
 8006a74:	48001400 	.word	0x48001400
 8006a78:	48001800 	.word	0x48001800
 8006a7c:	48001c00 	.word	0x48001c00
 8006a80:	40010400 	.word	0x40010400

08006a84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006a84:	b480      	push	{r7}
 8006a86:	b083      	sub	sp, #12
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
 8006a8c:	460b      	mov	r3, r1
 8006a8e:	807b      	strh	r3, [r7, #2]
 8006a90:	4613      	mov	r3, r2
 8006a92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006a94:	787b      	ldrb	r3, [r7, #1]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d003      	beq.n	8006aa2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006a9a:	887a      	ldrh	r2, [r7, #2]
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006aa0:	e002      	b.n	8006aa8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006aa2:	887a      	ldrh	r2, [r7, #2]
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006aa8:	bf00      	nop
 8006aaa:	370c      	adds	r7, #12
 8006aac:	46bd      	mov	sp, r7
 8006aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab2:	4770      	bx	lr

08006ab4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006ab4:	b480      	push	{r7}
 8006ab6:	b085      	sub	sp, #20
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
 8006abc:	460b      	mov	r3, r1
 8006abe:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	695b      	ldr	r3, [r3, #20]
 8006ac4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006ac6:	887a      	ldrh	r2, [r7, #2]
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	4013      	ands	r3, r2
 8006acc:	041a      	lsls	r2, r3, #16
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	43d9      	mvns	r1, r3
 8006ad2:	887b      	ldrh	r3, [r7, #2]
 8006ad4:	400b      	ands	r3, r1
 8006ad6:	431a      	orrs	r2, r3
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	619a      	str	r2, [r3, #24]
}
 8006adc:	bf00      	nop
 8006ade:	3714      	adds	r7, #20
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae6:	4770      	bx	lr

08006ae8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b082      	sub	sp, #8
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	4603      	mov	r3, r0
 8006af0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8006af2:	4b08      	ldr	r3, [pc, #32]	; (8006b14 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006af4:	695a      	ldr	r2, [r3, #20]
 8006af6:	88fb      	ldrh	r3, [r7, #6]
 8006af8:	4013      	ands	r3, r2
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d006      	beq.n	8006b0c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006afe:	4a05      	ldr	r2, [pc, #20]	; (8006b14 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006b00:	88fb      	ldrh	r3, [r7, #6]
 8006b02:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006b04:	88fb      	ldrh	r3, [r7, #6]
 8006b06:	4618      	mov	r0, r3
 8006b08:	f000 f806 	bl	8006b18 <HAL_GPIO_EXTI_Callback>
  }
}
 8006b0c:	bf00      	nop
 8006b0e:	3708      	adds	r7, #8
 8006b10:	46bd      	mov	sp, r7
 8006b12:	bd80      	pop	{r7, pc}
 8006b14:	40010400 	.word	0x40010400

08006b18 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006b18:	b480      	push	{r7}
 8006b1a:	b083      	sub	sp, #12
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	4603      	mov	r3, r0
 8006b20:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8006b22:	bf00      	nop
 8006b24:	370c      	adds	r7, #12
 8006b26:	46bd      	mov	sp, r7
 8006b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2c:	4770      	bx	lr

08006b2e <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006b2e:	b580      	push	{r7, lr}
 8006b30:	b082      	sub	sp, #8
 8006b32:	af00      	add	r7, sp, #0
 8006b34:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d101      	bne.n	8006b40 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006b3c:	2301      	movs	r3, #1
 8006b3e:	e081      	b.n	8006c44 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006b46:	b2db      	uxtb	r3, r3
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d106      	bne.n	8006b5a <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2200      	movs	r2, #0
 8006b50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006b54:	6878      	ldr	r0, [r7, #4]
 8006b56:	f7fe fb33 	bl	80051c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2224      	movs	r2, #36	; 0x24
 8006b5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	681a      	ldr	r2, [r3, #0]
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f022 0201 	bic.w	r2, r2, #1
 8006b70:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	685a      	ldr	r2, [r3, #4]
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006b7e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	689a      	ldr	r2, [r3, #8]
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006b8e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	68db      	ldr	r3, [r3, #12]
 8006b94:	2b01      	cmp	r3, #1
 8006b96:	d107      	bne.n	8006ba8 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	689a      	ldr	r2, [r3, #8]
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006ba4:	609a      	str	r2, [r3, #8]
 8006ba6:	e006      	b.n	8006bb6 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	689a      	ldr	r2, [r3, #8]
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8006bb4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	68db      	ldr	r3, [r3, #12]
 8006bba:	2b02      	cmp	r3, #2
 8006bbc:	d104      	bne.n	8006bc8 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006bc6:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	685b      	ldr	r3, [r3, #4]
 8006bce:	687a      	ldr	r2, [r7, #4]
 8006bd0:	6812      	ldr	r2, [r2, #0]
 8006bd2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006bd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006bda:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	68da      	ldr	r2, [r3, #12]
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006bea:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	691a      	ldr	r2, [r3, #16]
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	695b      	ldr	r3, [r3, #20]
 8006bf4:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	699b      	ldr	r3, [r3, #24]
 8006bfc:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	430a      	orrs	r2, r1
 8006c04:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	69d9      	ldr	r1, [r3, #28]
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6a1a      	ldr	r2, [r3, #32]
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	430a      	orrs	r2, r1
 8006c14:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	681a      	ldr	r2, [r3, #0]
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f042 0201 	orr.w	r2, r2, #1
 8006c24:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2200      	movs	r2, #0
 8006c2a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2220      	movs	r2, #32
 8006c30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2200      	movs	r2, #0
 8006c38:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006c42:	2300      	movs	r3, #0
}
 8006c44:	4618      	mov	r0, r3
 8006c46:	3708      	adds	r7, #8
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	bd80      	pop	{r7, pc}

08006c4c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b088      	sub	sp, #32
 8006c50:	af02      	add	r7, sp, #8
 8006c52:	60f8      	str	r0, [r7, #12]
 8006c54:	607a      	str	r2, [r7, #4]
 8006c56:	461a      	mov	r2, r3
 8006c58:	460b      	mov	r3, r1
 8006c5a:	817b      	strh	r3, [r7, #10]
 8006c5c:	4613      	mov	r3, r2
 8006c5e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006c66:	b2db      	uxtb	r3, r3
 8006c68:	2b20      	cmp	r3, #32
 8006c6a:	f040 80da 	bne.w	8006e22 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006c74:	2b01      	cmp	r3, #1
 8006c76:	d101      	bne.n	8006c7c <HAL_I2C_Master_Transmit+0x30>
 8006c78:	2302      	movs	r3, #2
 8006c7a:	e0d3      	b.n	8006e24 <HAL_I2C_Master_Transmit+0x1d8>
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	2201      	movs	r2, #1
 8006c80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006c84:	f7ff f8de 	bl	8005e44 <HAL_GetTick>
 8006c88:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006c8a:	697b      	ldr	r3, [r7, #20]
 8006c8c:	9300      	str	r3, [sp, #0]
 8006c8e:	2319      	movs	r3, #25
 8006c90:	2201      	movs	r2, #1
 8006c92:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006c96:	68f8      	ldr	r0, [r7, #12]
 8006c98:	f000 fcd6 	bl	8007648 <I2C_WaitOnFlagUntilTimeout>
 8006c9c:	4603      	mov	r3, r0
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d001      	beq.n	8006ca6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8006ca2:	2301      	movs	r3, #1
 8006ca4:	e0be      	b.n	8006e24 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	2221      	movs	r2, #33	; 0x21
 8006caa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	2210      	movs	r2, #16
 8006cb2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	2200      	movs	r2, #0
 8006cba:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	687a      	ldr	r2, [r7, #4]
 8006cc0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	893a      	ldrh	r2, [r7, #8]
 8006cc6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	2200      	movs	r2, #0
 8006ccc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cd2:	b29b      	uxth	r3, r3
 8006cd4:	2bff      	cmp	r3, #255	; 0xff
 8006cd6:	d90e      	bls.n	8006cf6 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	22ff      	movs	r2, #255	; 0xff
 8006cdc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ce2:	b2da      	uxtb	r2, r3
 8006ce4:	8979      	ldrh	r1, [r7, #10]
 8006ce6:	4b51      	ldr	r3, [pc, #324]	; (8006e2c <HAL_I2C_Master_Transmit+0x1e0>)
 8006ce8:	9300      	str	r3, [sp, #0]
 8006cea:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006cee:	68f8      	ldr	r0, [r7, #12]
 8006cf0:	f000 fecc 	bl	8007a8c <I2C_TransferConfig>
 8006cf4:	e06c      	b.n	8006dd0 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cfa:	b29a      	uxth	r2, r3
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d04:	b2da      	uxtb	r2, r3
 8006d06:	8979      	ldrh	r1, [r7, #10]
 8006d08:	4b48      	ldr	r3, [pc, #288]	; (8006e2c <HAL_I2C_Master_Transmit+0x1e0>)
 8006d0a:	9300      	str	r3, [sp, #0]
 8006d0c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006d10:	68f8      	ldr	r0, [r7, #12]
 8006d12:	f000 febb 	bl	8007a8c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8006d16:	e05b      	b.n	8006dd0 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006d18:	697a      	ldr	r2, [r7, #20]
 8006d1a:	6a39      	ldr	r1, [r7, #32]
 8006d1c:	68f8      	ldr	r0, [r7, #12]
 8006d1e:	f000 fcd3 	bl	80076c8 <I2C_WaitOnTXISFlagUntilTimeout>
 8006d22:	4603      	mov	r3, r0
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d001      	beq.n	8006d2c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8006d28:	2301      	movs	r3, #1
 8006d2a:	e07b      	b.n	8006e24 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d30:	781a      	ldrb	r2, [r3, #0]
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d3c:	1c5a      	adds	r2, r3, #1
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d46:	b29b      	uxth	r3, r3
 8006d48:	3b01      	subs	r3, #1
 8006d4a:	b29a      	uxth	r2, r3
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d54:	3b01      	subs	r3, #1
 8006d56:	b29a      	uxth	r2, r3
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d60:	b29b      	uxth	r3, r3
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d034      	beq.n	8006dd0 <HAL_I2C_Master_Transmit+0x184>
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d130      	bne.n	8006dd0 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006d6e:	697b      	ldr	r3, [r7, #20]
 8006d70:	9300      	str	r3, [sp, #0]
 8006d72:	6a3b      	ldr	r3, [r7, #32]
 8006d74:	2200      	movs	r2, #0
 8006d76:	2180      	movs	r1, #128	; 0x80
 8006d78:	68f8      	ldr	r0, [r7, #12]
 8006d7a:	f000 fc65 	bl	8007648 <I2C_WaitOnFlagUntilTimeout>
 8006d7e:	4603      	mov	r3, r0
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d001      	beq.n	8006d88 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8006d84:	2301      	movs	r3, #1
 8006d86:	e04d      	b.n	8006e24 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d8c:	b29b      	uxth	r3, r3
 8006d8e:	2bff      	cmp	r3, #255	; 0xff
 8006d90:	d90e      	bls.n	8006db0 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	22ff      	movs	r2, #255	; 0xff
 8006d96:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d9c:	b2da      	uxtb	r2, r3
 8006d9e:	8979      	ldrh	r1, [r7, #10]
 8006da0:	2300      	movs	r3, #0
 8006da2:	9300      	str	r3, [sp, #0]
 8006da4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006da8:	68f8      	ldr	r0, [r7, #12]
 8006daa:	f000 fe6f 	bl	8007a8c <I2C_TransferConfig>
 8006dae:	e00f      	b.n	8006dd0 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006db4:	b29a      	uxth	r2, r3
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006dbe:	b2da      	uxtb	r2, r3
 8006dc0:	8979      	ldrh	r1, [r7, #10]
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	9300      	str	r3, [sp, #0]
 8006dc6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006dca:	68f8      	ldr	r0, [r7, #12]
 8006dcc:	f000 fe5e 	bl	8007a8c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006dd4:	b29b      	uxth	r3, r3
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d19e      	bne.n	8006d18 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006dda:	697a      	ldr	r2, [r7, #20]
 8006ddc:	6a39      	ldr	r1, [r7, #32]
 8006dde:	68f8      	ldr	r0, [r7, #12]
 8006de0:	f000 fcb2 	bl	8007748 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006de4:	4603      	mov	r3, r0
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d001      	beq.n	8006dee <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8006dea:	2301      	movs	r3, #1
 8006dec:	e01a      	b.n	8006e24 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	2220      	movs	r2, #32
 8006df4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	6859      	ldr	r1, [r3, #4]
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	681a      	ldr	r2, [r3, #0]
 8006e00:	4b0b      	ldr	r3, [pc, #44]	; (8006e30 <HAL_I2C_Master_Transmit+0x1e4>)
 8006e02:	400b      	ands	r3, r1
 8006e04:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	2220      	movs	r2, #32
 8006e0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	2200      	movs	r2, #0
 8006e12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	2200      	movs	r2, #0
 8006e1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006e1e:	2300      	movs	r3, #0
 8006e20:	e000      	b.n	8006e24 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8006e22:	2302      	movs	r3, #2
  }
}
 8006e24:	4618      	mov	r0, r3
 8006e26:	3718      	adds	r7, #24
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	bd80      	pop	{r7, pc}
 8006e2c:	80002000 	.word	0x80002000
 8006e30:	fe00e800 	.word	0xfe00e800

08006e34 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b088      	sub	sp, #32
 8006e38:	af02      	add	r7, sp, #8
 8006e3a:	60f8      	str	r0, [r7, #12]
 8006e3c:	607a      	str	r2, [r7, #4]
 8006e3e:	461a      	mov	r2, r3
 8006e40:	460b      	mov	r3, r1
 8006e42:	817b      	strh	r3, [r7, #10]
 8006e44:	4613      	mov	r3, r2
 8006e46:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006e4e:	b2db      	uxtb	r3, r3
 8006e50:	2b20      	cmp	r3, #32
 8006e52:	f040 80db 	bne.w	800700c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006e5c:	2b01      	cmp	r3, #1
 8006e5e:	d101      	bne.n	8006e64 <HAL_I2C_Master_Receive+0x30>
 8006e60:	2302      	movs	r3, #2
 8006e62:	e0d4      	b.n	800700e <HAL_I2C_Master_Receive+0x1da>
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	2201      	movs	r2, #1
 8006e68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006e6c:	f7fe ffea 	bl	8005e44 <HAL_GetTick>
 8006e70:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006e72:	697b      	ldr	r3, [r7, #20]
 8006e74:	9300      	str	r3, [sp, #0]
 8006e76:	2319      	movs	r3, #25
 8006e78:	2201      	movs	r2, #1
 8006e7a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006e7e:	68f8      	ldr	r0, [r7, #12]
 8006e80:	f000 fbe2 	bl	8007648 <I2C_WaitOnFlagUntilTimeout>
 8006e84:	4603      	mov	r3, r0
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d001      	beq.n	8006e8e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8006e8a:	2301      	movs	r3, #1
 8006e8c:	e0bf      	b.n	800700e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	2222      	movs	r2, #34	; 0x22
 8006e92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	2210      	movs	r2, #16
 8006e9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	687a      	ldr	r2, [r7, #4]
 8006ea8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	893a      	ldrh	r2, [r7, #8]
 8006eae:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006eba:	b29b      	uxth	r3, r3
 8006ebc:	2bff      	cmp	r3, #255	; 0xff
 8006ebe:	d90e      	bls.n	8006ede <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	22ff      	movs	r2, #255	; 0xff
 8006ec4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006eca:	b2da      	uxtb	r2, r3
 8006ecc:	8979      	ldrh	r1, [r7, #10]
 8006ece:	4b52      	ldr	r3, [pc, #328]	; (8007018 <HAL_I2C_Master_Receive+0x1e4>)
 8006ed0:	9300      	str	r3, [sp, #0]
 8006ed2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006ed6:	68f8      	ldr	r0, [r7, #12]
 8006ed8:	f000 fdd8 	bl	8007a8c <I2C_TransferConfig>
 8006edc:	e06d      	b.n	8006fba <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ee2:	b29a      	uxth	r2, r3
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006eec:	b2da      	uxtb	r2, r3
 8006eee:	8979      	ldrh	r1, [r7, #10]
 8006ef0:	4b49      	ldr	r3, [pc, #292]	; (8007018 <HAL_I2C_Master_Receive+0x1e4>)
 8006ef2:	9300      	str	r3, [sp, #0]
 8006ef4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006ef8:	68f8      	ldr	r0, [r7, #12]
 8006efa:	f000 fdc7 	bl	8007a8c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8006efe:	e05c      	b.n	8006fba <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006f00:	697a      	ldr	r2, [r7, #20]
 8006f02:	6a39      	ldr	r1, [r7, #32]
 8006f04:	68f8      	ldr	r0, [r7, #12]
 8006f06:	f000 fc5b 	bl	80077c0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006f0a:	4603      	mov	r3, r0
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d001      	beq.n	8006f14 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8006f10:	2301      	movs	r3, #1
 8006f12:	e07c      	b.n	800700e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f1e:	b2d2      	uxtb	r2, r2
 8006f20:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f26:	1c5a      	adds	r2, r3, #1
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f30:	3b01      	subs	r3, #1
 8006f32:	b29a      	uxth	r2, r3
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f3c:	b29b      	uxth	r3, r3
 8006f3e:	3b01      	subs	r3, #1
 8006f40:	b29a      	uxth	r2, r3
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f4a:	b29b      	uxth	r3, r3
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d034      	beq.n	8006fba <HAL_I2C_Master_Receive+0x186>
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d130      	bne.n	8006fba <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006f58:	697b      	ldr	r3, [r7, #20]
 8006f5a:	9300      	str	r3, [sp, #0]
 8006f5c:	6a3b      	ldr	r3, [r7, #32]
 8006f5e:	2200      	movs	r2, #0
 8006f60:	2180      	movs	r1, #128	; 0x80
 8006f62:	68f8      	ldr	r0, [r7, #12]
 8006f64:	f000 fb70 	bl	8007648 <I2C_WaitOnFlagUntilTimeout>
 8006f68:	4603      	mov	r3, r0
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d001      	beq.n	8006f72 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8006f6e:	2301      	movs	r3, #1
 8006f70:	e04d      	b.n	800700e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f76:	b29b      	uxth	r3, r3
 8006f78:	2bff      	cmp	r3, #255	; 0xff
 8006f7a:	d90e      	bls.n	8006f9a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	22ff      	movs	r2, #255	; 0xff
 8006f80:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f86:	b2da      	uxtb	r2, r3
 8006f88:	8979      	ldrh	r1, [r7, #10]
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	9300      	str	r3, [sp, #0]
 8006f8e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006f92:	68f8      	ldr	r0, [r7, #12]
 8006f94:	f000 fd7a 	bl	8007a8c <I2C_TransferConfig>
 8006f98:	e00f      	b.n	8006fba <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f9e:	b29a      	uxth	r2, r3
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006fa8:	b2da      	uxtb	r2, r3
 8006faa:	8979      	ldrh	r1, [r7, #10]
 8006fac:	2300      	movs	r3, #0
 8006fae:	9300      	str	r3, [sp, #0]
 8006fb0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006fb4:	68f8      	ldr	r0, [r7, #12]
 8006fb6:	f000 fd69 	bl	8007a8c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fbe:	b29b      	uxth	r3, r3
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d19d      	bne.n	8006f00 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006fc4:	697a      	ldr	r2, [r7, #20]
 8006fc6:	6a39      	ldr	r1, [r7, #32]
 8006fc8:	68f8      	ldr	r0, [r7, #12]
 8006fca:	f000 fbbd 	bl	8007748 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006fce:	4603      	mov	r3, r0
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d001      	beq.n	8006fd8 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8006fd4:	2301      	movs	r3, #1
 8006fd6:	e01a      	b.n	800700e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	2220      	movs	r2, #32
 8006fde:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	6859      	ldr	r1, [r3, #4]
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	681a      	ldr	r2, [r3, #0]
 8006fea:	4b0c      	ldr	r3, [pc, #48]	; (800701c <HAL_I2C_Master_Receive+0x1e8>)
 8006fec:	400b      	ands	r3, r1
 8006fee:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	2220      	movs	r2, #32
 8006ff4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	2200      	movs	r2, #0
 8007004:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007008:	2300      	movs	r3, #0
 800700a:	e000      	b.n	800700e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800700c:	2302      	movs	r3, #2
  }
}
 800700e:	4618      	mov	r0, r3
 8007010:	3718      	adds	r7, #24
 8007012:	46bd      	mov	sp, r7
 8007014:	bd80      	pop	{r7, pc}
 8007016:	bf00      	nop
 8007018:	80002400 	.word	0x80002400
 800701c:	fe00e800 	.word	0xfe00e800

08007020 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007020:	b580      	push	{r7, lr}
 8007022:	b088      	sub	sp, #32
 8007024:	af02      	add	r7, sp, #8
 8007026:	60f8      	str	r0, [r7, #12]
 8007028:	4608      	mov	r0, r1
 800702a:	4611      	mov	r1, r2
 800702c:	461a      	mov	r2, r3
 800702e:	4603      	mov	r3, r0
 8007030:	817b      	strh	r3, [r7, #10]
 8007032:	460b      	mov	r3, r1
 8007034:	813b      	strh	r3, [r7, #8]
 8007036:	4613      	mov	r3, r2
 8007038:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007040:	b2db      	uxtb	r3, r3
 8007042:	2b20      	cmp	r3, #32
 8007044:	f040 80f9 	bne.w	800723a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007048:	6a3b      	ldr	r3, [r7, #32]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d002      	beq.n	8007054 <HAL_I2C_Mem_Write+0x34>
 800704e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007050:	2b00      	cmp	r3, #0
 8007052:	d105      	bne.n	8007060 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	f44f 7200 	mov.w	r2, #512	; 0x200
 800705a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800705c:	2301      	movs	r3, #1
 800705e:	e0ed      	b.n	800723c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007066:	2b01      	cmp	r3, #1
 8007068:	d101      	bne.n	800706e <HAL_I2C_Mem_Write+0x4e>
 800706a:	2302      	movs	r3, #2
 800706c:	e0e6      	b.n	800723c <HAL_I2C_Mem_Write+0x21c>
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	2201      	movs	r2, #1
 8007072:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007076:	f7fe fee5 	bl	8005e44 <HAL_GetTick>
 800707a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800707c:	697b      	ldr	r3, [r7, #20]
 800707e:	9300      	str	r3, [sp, #0]
 8007080:	2319      	movs	r3, #25
 8007082:	2201      	movs	r2, #1
 8007084:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007088:	68f8      	ldr	r0, [r7, #12]
 800708a:	f000 fadd 	bl	8007648 <I2C_WaitOnFlagUntilTimeout>
 800708e:	4603      	mov	r3, r0
 8007090:	2b00      	cmp	r3, #0
 8007092:	d001      	beq.n	8007098 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8007094:	2301      	movs	r3, #1
 8007096:	e0d1      	b.n	800723c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	2221      	movs	r2, #33	; 0x21
 800709c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	2240      	movs	r2, #64	; 0x40
 80070a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	2200      	movs	r2, #0
 80070ac:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	6a3a      	ldr	r2, [r7, #32]
 80070b2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80070b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	2200      	movs	r2, #0
 80070be:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80070c0:	88f8      	ldrh	r0, [r7, #6]
 80070c2:	893a      	ldrh	r2, [r7, #8]
 80070c4:	8979      	ldrh	r1, [r7, #10]
 80070c6:	697b      	ldr	r3, [r7, #20]
 80070c8:	9301      	str	r3, [sp, #4]
 80070ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070cc:	9300      	str	r3, [sp, #0]
 80070ce:	4603      	mov	r3, r0
 80070d0:	68f8      	ldr	r0, [r7, #12]
 80070d2:	f000 f9ed 	bl	80074b0 <I2C_RequestMemoryWrite>
 80070d6:	4603      	mov	r3, r0
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d005      	beq.n	80070e8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	2200      	movs	r2, #0
 80070e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80070e4:	2301      	movs	r3, #1
 80070e6:	e0a9      	b.n	800723c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070ec:	b29b      	uxth	r3, r3
 80070ee:	2bff      	cmp	r3, #255	; 0xff
 80070f0:	d90e      	bls.n	8007110 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	22ff      	movs	r2, #255	; 0xff
 80070f6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070fc:	b2da      	uxtb	r2, r3
 80070fe:	8979      	ldrh	r1, [r7, #10]
 8007100:	2300      	movs	r3, #0
 8007102:	9300      	str	r3, [sp, #0]
 8007104:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007108:	68f8      	ldr	r0, [r7, #12]
 800710a:	f000 fcbf 	bl	8007a8c <I2C_TransferConfig>
 800710e:	e00f      	b.n	8007130 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007114:	b29a      	uxth	r2, r3
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800711e:	b2da      	uxtb	r2, r3
 8007120:	8979      	ldrh	r1, [r7, #10]
 8007122:	2300      	movs	r3, #0
 8007124:	9300      	str	r3, [sp, #0]
 8007126:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800712a:	68f8      	ldr	r0, [r7, #12]
 800712c:	f000 fcae 	bl	8007a8c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007130:	697a      	ldr	r2, [r7, #20]
 8007132:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007134:	68f8      	ldr	r0, [r7, #12]
 8007136:	f000 fac7 	bl	80076c8 <I2C_WaitOnTXISFlagUntilTimeout>
 800713a:	4603      	mov	r3, r0
 800713c:	2b00      	cmp	r3, #0
 800713e:	d001      	beq.n	8007144 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8007140:	2301      	movs	r3, #1
 8007142:	e07b      	b.n	800723c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007148:	781a      	ldrb	r2, [r3, #0]
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007154:	1c5a      	adds	r2, r3, #1
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800715e:	b29b      	uxth	r3, r3
 8007160:	3b01      	subs	r3, #1
 8007162:	b29a      	uxth	r2, r3
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800716c:	3b01      	subs	r3, #1
 800716e:	b29a      	uxth	r2, r3
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007178:	b29b      	uxth	r3, r3
 800717a:	2b00      	cmp	r3, #0
 800717c:	d034      	beq.n	80071e8 <HAL_I2C_Mem_Write+0x1c8>
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007182:	2b00      	cmp	r3, #0
 8007184:	d130      	bne.n	80071e8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007186:	697b      	ldr	r3, [r7, #20]
 8007188:	9300      	str	r3, [sp, #0]
 800718a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800718c:	2200      	movs	r2, #0
 800718e:	2180      	movs	r1, #128	; 0x80
 8007190:	68f8      	ldr	r0, [r7, #12]
 8007192:	f000 fa59 	bl	8007648 <I2C_WaitOnFlagUntilTimeout>
 8007196:	4603      	mov	r3, r0
 8007198:	2b00      	cmp	r3, #0
 800719a:	d001      	beq.n	80071a0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800719c:	2301      	movs	r3, #1
 800719e:	e04d      	b.n	800723c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071a4:	b29b      	uxth	r3, r3
 80071a6:	2bff      	cmp	r3, #255	; 0xff
 80071a8:	d90e      	bls.n	80071c8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	22ff      	movs	r2, #255	; 0xff
 80071ae:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80071b4:	b2da      	uxtb	r2, r3
 80071b6:	8979      	ldrh	r1, [r7, #10]
 80071b8:	2300      	movs	r3, #0
 80071ba:	9300      	str	r3, [sp, #0]
 80071bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80071c0:	68f8      	ldr	r0, [r7, #12]
 80071c2:	f000 fc63 	bl	8007a8c <I2C_TransferConfig>
 80071c6:	e00f      	b.n	80071e8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071cc:	b29a      	uxth	r2, r3
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80071d6:	b2da      	uxtb	r2, r3
 80071d8:	8979      	ldrh	r1, [r7, #10]
 80071da:	2300      	movs	r3, #0
 80071dc:	9300      	str	r3, [sp, #0]
 80071de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80071e2:	68f8      	ldr	r0, [r7, #12]
 80071e4:	f000 fc52 	bl	8007a8c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071ec:	b29b      	uxth	r3, r3
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d19e      	bne.n	8007130 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80071f2:	697a      	ldr	r2, [r7, #20]
 80071f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80071f6:	68f8      	ldr	r0, [r7, #12]
 80071f8:	f000 faa6 	bl	8007748 <I2C_WaitOnSTOPFlagUntilTimeout>
 80071fc:	4603      	mov	r3, r0
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d001      	beq.n	8007206 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8007202:	2301      	movs	r3, #1
 8007204:	e01a      	b.n	800723c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	2220      	movs	r2, #32
 800720c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	6859      	ldr	r1, [r3, #4]
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	681a      	ldr	r2, [r3, #0]
 8007218:	4b0a      	ldr	r3, [pc, #40]	; (8007244 <HAL_I2C_Mem_Write+0x224>)
 800721a:	400b      	ands	r3, r1
 800721c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	2220      	movs	r2, #32
 8007222:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	2200      	movs	r2, #0
 800722a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	2200      	movs	r2, #0
 8007232:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007236:	2300      	movs	r3, #0
 8007238:	e000      	b.n	800723c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800723a:	2302      	movs	r3, #2
  }
}
 800723c:	4618      	mov	r0, r3
 800723e:	3718      	adds	r7, #24
 8007240:	46bd      	mov	sp, r7
 8007242:	bd80      	pop	{r7, pc}
 8007244:	fe00e800 	.word	0xfe00e800

08007248 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007248:	b580      	push	{r7, lr}
 800724a:	b088      	sub	sp, #32
 800724c:	af02      	add	r7, sp, #8
 800724e:	60f8      	str	r0, [r7, #12]
 8007250:	4608      	mov	r0, r1
 8007252:	4611      	mov	r1, r2
 8007254:	461a      	mov	r2, r3
 8007256:	4603      	mov	r3, r0
 8007258:	817b      	strh	r3, [r7, #10]
 800725a:	460b      	mov	r3, r1
 800725c:	813b      	strh	r3, [r7, #8]
 800725e:	4613      	mov	r3, r2
 8007260:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007268:	b2db      	uxtb	r3, r3
 800726a:	2b20      	cmp	r3, #32
 800726c:	f040 80fd 	bne.w	800746a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8007270:	6a3b      	ldr	r3, [r7, #32]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d002      	beq.n	800727c <HAL_I2C_Mem_Read+0x34>
 8007276:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007278:	2b00      	cmp	r3, #0
 800727a:	d105      	bne.n	8007288 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007282:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8007284:	2301      	movs	r3, #1
 8007286:	e0f1      	b.n	800746c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800728e:	2b01      	cmp	r3, #1
 8007290:	d101      	bne.n	8007296 <HAL_I2C_Mem_Read+0x4e>
 8007292:	2302      	movs	r3, #2
 8007294:	e0ea      	b.n	800746c <HAL_I2C_Mem_Read+0x224>
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	2201      	movs	r2, #1
 800729a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800729e:	f7fe fdd1 	bl	8005e44 <HAL_GetTick>
 80072a2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80072a4:	697b      	ldr	r3, [r7, #20]
 80072a6:	9300      	str	r3, [sp, #0]
 80072a8:	2319      	movs	r3, #25
 80072aa:	2201      	movs	r2, #1
 80072ac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80072b0:	68f8      	ldr	r0, [r7, #12]
 80072b2:	f000 f9c9 	bl	8007648 <I2C_WaitOnFlagUntilTimeout>
 80072b6:	4603      	mov	r3, r0
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d001      	beq.n	80072c0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80072bc:	2301      	movs	r3, #1
 80072be:	e0d5      	b.n	800746c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	2222      	movs	r2, #34	; 0x22
 80072c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	2240      	movs	r2, #64	; 0x40
 80072cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	2200      	movs	r2, #0
 80072d4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	6a3a      	ldr	r2, [r7, #32]
 80072da:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80072e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	2200      	movs	r2, #0
 80072e6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80072e8:	88f8      	ldrh	r0, [r7, #6]
 80072ea:	893a      	ldrh	r2, [r7, #8]
 80072ec:	8979      	ldrh	r1, [r7, #10]
 80072ee:	697b      	ldr	r3, [r7, #20]
 80072f0:	9301      	str	r3, [sp, #4]
 80072f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072f4:	9300      	str	r3, [sp, #0]
 80072f6:	4603      	mov	r3, r0
 80072f8:	68f8      	ldr	r0, [r7, #12]
 80072fa:	f000 f92d 	bl	8007558 <I2C_RequestMemoryRead>
 80072fe:	4603      	mov	r3, r0
 8007300:	2b00      	cmp	r3, #0
 8007302:	d005      	beq.n	8007310 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	2200      	movs	r2, #0
 8007308:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800730c:	2301      	movs	r3, #1
 800730e:	e0ad      	b.n	800746c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007314:	b29b      	uxth	r3, r3
 8007316:	2bff      	cmp	r3, #255	; 0xff
 8007318:	d90e      	bls.n	8007338 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	22ff      	movs	r2, #255	; 0xff
 800731e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007324:	b2da      	uxtb	r2, r3
 8007326:	8979      	ldrh	r1, [r7, #10]
 8007328:	4b52      	ldr	r3, [pc, #328]	; (8007474 <HAL_I2C_Mem_Read+0x22c>)
 800732a:	9300      	str	r3, [sp, #0]
 800732c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007330:	68f8      	ldr	r0, [r7, #12]
 8007332:	f000 fbab 	bl	8007a8c <I2C_TransferConfig>
 8007336:	e00f      	b.n	8007358 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800733c:	b29a      	uxth	r2, r3
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007346:	b2da      	uxtb	r2, r3
 8007348:	8979      	ldrh	r1, [r7, #10]
 800734a:	4b4a      	ldr	r3, [pc, #296]	; (8007474 <HAL_I2C_Mem_Read+0x22c>)
 800734c:	9300      	str	r3, [sp, #0]
 800734e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007352:	68f8      	ldr	r0, [r7, #12]
 8007354:	f000 fb9a 	bl	8007a8c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8007358:	697b      	ldr	r3, [r7, #20]
 800735a:	9300      	str	r3, [sp, #0]
 800735c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800735e:	2200      	movs	r2, #0
 8007360:	2104      	movs	r1, #4
 8007362:	68f8      	ldr	r0, [r7, #12]
 8007364:	f000 f970 	bl	8007648 <I2C_WaitOnFlagUntilTimeout>
 8007368:	4603      	mov	r3, r0
 800736a:	2b00      	cmp	r3, #0
 800736c:	d001      	beq.n	8007372 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800736e:	2301      	movs	r3, #1
 8007370:	e07c      	b.n	800746c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800737c:	b2d2      	uxtb	r2, r2
 800737e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007384:	1c5a      	adds	r2, r3, #1
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800738e:	3b01      	subs	r3, #1
 8007390:	b29a      	uxth	r2, r3
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800739a:	b29b      	uxth	r3, r3
 800739c:	3b01      	subs	r3, #1
 800739e:	b29a      	uxth	r2, r3
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073a8:	b29b      	uxth	r3, r3
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d034      	beq.n	8007418 <HAL_I2C_Mem_Read+0x1d0>
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d130      	bne.n	8007418 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80073b6:	697b      	ldr	r3, [r7, #20]
 80073b8:	9300      	str	r3, [sp, #0]
 80073ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073bc:	2200      	movs	r2, #0
 80073be:	2180      	movs	r1, #128	; 0x80
 80073c0:	68f8      	ldr	r0, [r7, #12]
 80073c2:	f000 f941 	bl	8007648 <I2C_WaitOnFlagUntilTimeout>
 80073c6:	4603      	mov	r3, r0
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d001      	beq.n	80073d0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80073cc:	2301      	movs	r3, #1
 80073ce:	e04d      	b.n	800746c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073d4:	b29b      	uxth	r3, r3
 80073d6:	2bff      	cmp	r3, #255	; 0xff
 80073d8:	d90e      	bls.n	80073f8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	22ff      	movs	r2, #255	; 0xff
 80073de:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073e4:	b2da      	uxtb	r2, r3
 80073e6:	8979      	ldrh	r1, [r7, #10]
 80073e8:	2300      	movs	r3, #0
 80073ea:	9300      	str	r3, [sp, #0]
 80073ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80073f0:	68f8      	ldr	r0, [r7, #12]
 80073f2:	f000 fb4b 	bl	8007a8c <I2C_TransferConfig>
 80073f6:	e00f      	b.n	8007418 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073fc:	b29a      	uxth	r2, r3
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007406:	b2da      	uxtb	r2, r3
 8007408:	8979      	ldrh	r1, [r7, #10]
 800740a:	2300      	movs	r3, #0
 800740c:	9300      	str	r3, [sp, #0]
 800740e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007412:	68f8      	ldr	r0, [r7, #12]
 8007414:	f000 fb3a 	bl	8007a8c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800741c:	b29b      	uxth	r3, r3
 800741e:	2b00      	cmp	r3, #0
 8007420:	d19a      	bne.n	8007358 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007422:	697a      	ldr	r2, [r7, #20]
 8007424:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007426:	68f8      	ldr	r0, [r7, #12]
 8007428:	f000 f98e 	bl	8007748 <I2C_WaitOnSTOPFlagUntilTimeout>
 800742c:	4603      	mov	r3, r0
 800742e:	2b00      	cmp	r3, #0
 8007430:	d001      	beq.n	8007436 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8007432:	2301      	movs	r3, #1
 8007434:	e01a      	b.n	800746c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	2220      	movs	r2, #32
 800743c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	6859      	ldr	r1, [r3, #4]
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	681a      	ldr	r2, [r3, #0]
 8007448:	4b0b      	ldr	r3, [pc, #44]	; (8007478 <HAL_I2C_Mem_Read+0x230>)
 800744a:	400b      	ands	r3, r1
 800744c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	2220      	movs	r2, #32
 8007452:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	2200      	movs	r2, #0
 800745a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	2200      	movs	r2, #0
 8007462:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007466:	2300      	movs	r3, #0
 8007468:	e000      	b.n	800746c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800746a:	2302      	movs	r3, #2
  }
}
 800746c:	4618      	mov	r0, r3
 800746e:	3718      	adds	r7, #24
 8007470:	46bd      	mov	sp, r7
 8007472:	bd80      	pop	{r7, pc}
 8007474:	80002400 	.word	0x80002400
 8007478:	fe00e800 	.word	0xfe00e800

0800747c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b084      	sub	sp, #16
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	699b      	ldr	r3, [r3, #24]
 800748a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007498:	2b00      	cmp	r3, #0
 800749a:	d005      	beq.n	80074a8 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074a0:	68ba      	ldr	r2, [r7, #8]
 80074a2:	68f9      	ldr	r1, [r7, #12]
 80074a4:	6878      	ldr	r0, [r7, #4]
 80074a6:	4798      	blx	r3
  }
}
 80074a8:	bf00      	nop
 80074aa:	3710      	adds	r7, #16
 80074ac:	46bd      	mov	sp, r7
 80074ae:	bd80      	pop	{r7, pc}

080074b0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b086      	sub	sp, #24
 80074b4:	af02      	add	r7, sp, #8
 80074b6:	60f8      	str	r0, [r7, #12]
 80074b8:	4608      	mov	r0, r1
 80074ba:	4611      	mov	r1, r2
 80074bc:	461a      	mov	r2, r3
 80074be:	4603      	mov	r3, r0
 80074c0:	817b      	strh	r3, [r7, #10]
 80074c2:	460b      	mov	r3, r1
 80074c4:	813b      	strh	r3, [r7, #8]
 80074c6:	4613      	mov	r3, r2
 80074c8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80074ca:	88fb      	ldrh	r3, [r7, #6]
 80074cc:	b2da      	uxtb	r2, r3
 80074ce:	8979      	ldrh	r1, [r7, #10]
 80074d0:	4b20      	ldr	r3, [pc, #128]	; (8007554 <I2C_RequestMemoryWrite+0xa4>)
 80074d2:	9300      	str	r3, [sp, #0]
 80074d4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80074d8:	68f8      	ldr	r0, [r7, #12]
 80074da:	f000 fad7 	bl	8007a8c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80074de:	69fa      	ldr	r2, [r7, #28]
 80074e0:	69b9      	ldr	r1, [r7, #24]
 80074e2:	68f8      	ldr	r0, [r7, #12]
 80074e4:	f000 f8f0 	bl	80076c8 <I2C_WaitOnTXISFlagUntilTimeout>
 80074e8:	4603      	mov	r3, r0
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d001      	beq.n	80074f2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80074ee:	2301      	movs	r3, #1
 80074f0:	e02c      	b.n	800754c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80074f2:	88fb      	ldrh	r3, [r7, #6]
 80074f4:	2b01      	cmp	r3, #1
 80074f6:	d105      	bne.n	8007504 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80074f8:	893b      	ldrh	r3, [r7, #8]
 80074fa:	b2da      	uxtb	r2, r3
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	629a      	str	r2, [r3, #40]	; 0x28
 8007502:	e015      	b.n	8007530 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007504:	893b      	ldrh	r3, [r7, #8]
 8007506:	0a1b      	lsrs	r3, r3, #8
 8007508:	b29b      	uxth	r3, r3
 800750a:	b2da      	uxtb	r2, r3
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007512:	69fa      	ldr	r2, [r7, #28]
 8007514:	69b9      	ldr	r1, [r7, #24]
 8007516:	68f8      	ldr	r0, [r7, #12]
 8007518:	f000 f8d6 	bl	80076c8 <I2C_WaitOnTXISFlagUntilTimeout>
 800751c:	4603      	mov	r3, r0
 800751e:	2b00      	cmp	r3, #0
 8007520:	d001      	beq.n	8007526 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8007522:	2301      	movs	r3, #1
 8007524:	e012      	b.n	800754c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007526:	893b      	ldrh	r3, [r7, #8]
 8007528:	b2da      	uxtb	r2, r3
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8007530:	69fb      	ldr	r3, [r7, #28]
 8007532:	9300      	str	r3, [sp, #0]
 8007534:	69bb      	ldr	r3, [r7, #24]
 8007536:	2200      	movs	r2, #0
 8007538:	2180      	movs	r1, #128	; 0x80
 800753a:	68f8      	ldr	r0, [r7, #12]
 800753c:	f000 f884 	bl	8007648 <I2C_WaitOnFlagUntilTimeout>
 8007540:	4603      	mov	r3, r0
 8007542:	2b00      	cmp	r3, #0
 8007544:	d001      	beq.n	800754a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8007546:	2301      	movs	r3, #1
 8007548:	e000      	b.n	800754c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800754a:	2300      	movs	r3, #0
}
 800754c:	4618      	mov	r0, r3
 800754e:	3710      	adds	r7, #16
 8007550:	46bd      	mov	sp, r7
 8007552:	bd80      	pop	{r7, pc}
 8007554:	80002000 	.word	0x80002000

08007558 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b086      	sub	sp, #24
 800755c:	af02      	add	r7, sp, #8
 800755e:	60f8      	str	r0, [r7, #12]
 8007560:	4608      	mov	r0, r1
 8007562:	4611      	mov	r1, r2
 8007564:	461a      	mov	r2, r3
 8007566:	4603      	mov	r3, r0
 8007568:	817b      	strh	r3, [r7, #10]
 800756a:	460b      	mov	r3, r1
 800756c:	813b      	strh	r3, [r7, #8]
 800756e:	4613      	mov	r3, r2
 8007570:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8007572:	88fb      	ldrh	r3, [r7, #6]
 8007574:	b2da      	uxtb	r2, r3
 8007576:	8979      	ldrh	r1, [r7, #10]
 8007578:	4b20      	ldr	r3, [pc, #128]	; (80075fc <I2C_RequestMemoryRead+0xa4>)
 800757a:	9300      	str	r3, [sp, #0]
 800757c:	2300      	movs	r3, #0
 800757e:	68f8      	ldr	r0, [r7, #12]
 8007580:	f000 fa84 	bl	8007a8c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007584:	69fa      	ldr	r2, [r7, #28]
 8007586:	69b9      	ldr	r1, [r7, #24]
 8007588:	68f8      	ldr	r0, [r7, #12]
 800758a:	f000 f89d 	bl	80076c8 <I2C_WaitOnTXISFlagUntilTimeout>
 800758e:	4603      	mov	r3, r0
 8007590:	2b00      	cmp	r3, #0
 8007592:	d001      	beq.n	8007598 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8007594:	2301      	movs	r3, #1
 8007596:	e02c      	b.n	80075f2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007598:	88fb      	ldrh	r3, [r7, #6]
 800759a:	2b01      	cmp	r3, #1
 800759c:	d105      	bne.n	80075aa <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800759e:	893b      	ldrh	r3, [r7, #8]
 80075a0:	b2da      	uxtb	r2, r3
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	629a      	str	r2, [r3, #40]	; 0x28
 80075a8:	e015      	b.n	80075d6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80075aa:	893b      	ldrh	r3, [r7, #8]
 80075ac:	0a1b      	lsrs	r3, r3, #8
 80075ae:	b29b      	uxth	r3, r3
 80075b0:	b2da      	uxtb	r2, r3
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80075b8:	69fa      	ldr	r2, [r7, #28]
 80075ba:	69b9      	ldr	r1, [r7, #24]
 80075bc:	68f8      	ldr	r0, [r7, #12]
 80075be:	f000 f883 	bl	80076c8 <I2C_WaitOnTXISFlagUntilTimeout>
 80075c2:	4603      	mov	r3, r0
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d001      	beq.n	80075cc <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80075c8:	2301      	movs	r3, #1
 80075ca:	e012      	b.n	80075f2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80075cc:	893b      	ldrh	r3, [r7, #8]
 80075ce:	b2da      	uxtb	r2, r3
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80075d6:	69fb      	ldr	r3, [r7, #28]
 80075d8:	9300      	str	r3, [sp, #0]
 80075da:	69bb      	ldr	r3, [r7, #24]
 80075dc:	2200      	movs	r2, #0
 80075de:	2140      	movs	r1, #64	; 0x40
 80075e0:	68f8      	ldr	r0, [r7, #12]
 80075e2:	f000 f831 	bl	8007648 <I2C_WaitOnFlagUntilTimeout>
 80075e6:	4603      	mov	r3, r0
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d001      	beq.n	80075f0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80075ec:	2301      	movs	r3, #1
 80075ee:	e000      	b.n	80075f2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80075f0:	2300      	movs	r3, #0
}
 80075f2:	4618      	mov	r0, r3
 80075f4:	3710      	adds	r7, #16
 80075f6:	46bd      	mov	sp, r7
 80075f8:	bd80      	pop	{r7, pc}
 80075fa:	bf00      	nop
 80075fc:	80002000 	.word	0x80002000

08007600 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007600:	b480      	push	{r7}
 8007602:	b083      	sub	sp, #12
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	699b      	ldr	r3, [r3, #24]
 800760e:	f003 0302 	and.w	r3, r3, #2
 8007612:	2b02      	cmp	r3, #2
 8007614:	d103      	bne.n	800761e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	2200      	movs	r2, #0
 800761c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	699b      	ldr	r3, [r3, #24]
 8007624:	f003 0301 	and.w	r3, r3, #1
 8007628:	2b01      	cmp	r3, #1
 800762a:	d007      	beq.n	800763c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	699a      	ldr	r2, [r3, #24]
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f042 0201 	orr.w	r2, r2, #1
 800763a:	619a      	str	r2, [r3, #24]
  }
}
 800763c:	bf00      	nop
 800763e:	370c      	adds	r7, #12
 8007640:	46bd      	mov	sp, r7
 8007642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007646:	4770      	bx	lr

08007648 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007648:	b580      	push	{r7, lr}
 800764a:	b084      	sub	sp, #16
 800764c:	af00      	add	r7, sp, #0
 800764e:	60f8      	str	r0, [r7, #12]
 8007650:	60b9      	str	r1, [r7, #8]
 8007652:	603b      	str	r3, [r7, #0]
 8007654:	4613      	mov	r3, r2
 8007656:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007658:	e022      	b.n	80076a0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800765a:	683b      	ldr	r3, [r7, #0]
 800765c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007660:	d01e      	beq.n	80076a0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007662:	f7fe fbef 	bl	8005e44 <HAL_GetTick>
 8007666:	4602      	mov	r2, r0
 8007668:	69bb      	ldr	r3, [r7, #24]
 800766a:	1ad3      	subs	r3, r2, r3
 800766c:	683a      	ldr	r2, [r7, #0]
 800766e:	429a      	cmp	r2, r3
 8007670:	d302      	bcc.n	8007678 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d113      	bne.n	80076a0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800767c:	f043 0220 	orr.w	r2, r3, #32
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	2220      	movs	r2, #32
 8007688:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	2200      	movs	r2, #0
 8007690:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	2200      	movs	r2, #0
 8007698:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800769c:	2301      	movs	r3, #1
 800769e:	e00f      	b.n	80076c0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	699a      	ldr	r2, [r3, #24]
 80076a6:	68bb      	ldr	r3, [r7, #8]
 80076a8:	4013      	ands	r3, r2
 80076aa:	68ba      	ldr	r2, [r7, #8]
 80076ac:	429a      	cmp	r2, r3
 80076ae:	bf0c      	ite	eq
 80076b0:	2301      	moveq	r3, #1
 80076b2:	2300      	movne	r3, #0
 80076b4:	b2db      	uxtb	r3, r3
 80076b6:	461a      	mov	r2, r3
 80076b8:	79fb      	ldrb	r3, [r7, #7]
 80076ba:	429a      	cmp	r2, r3
 80076bc:	d0cd      	beq.n	800765a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80076be:	2300      	movs	r3, #0
}
 80076c0:	4618      	mov	r0, r3
 80076c2:	3710      	adds	r7, #16
 80076c4:	46bd      	mov	sp, r7
 80076c6:	bd80      	pop	{r7, pc}

080076c8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b084      	sub	sp, #16
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	60f8      	str	r0, [r7, #12]
 80076d0:	60b9      	str	r1, [r7, #8]
 80076d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80076d4:	e02c      	b.n	8007730 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80076d6:	687a      	ldr	r2, [r7, #4]
 80076d8:	68b9      	ldr	r1, [r7, #8]
 80076da:	68f8      	ldr	r0, [r7, #12]
 80076dc:	f000 f8ea 	bl	80078b4 <I2C_IsErrorOccurred>
 80076e0:	4603      	mov	r3, r0
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d001      	beq.n	80076ea <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80076e6:	2301      	movs	r3, #1
 80076e8:	e02a      	b.n	8007740 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80076ea:	68bb      	ldr	r3, [r7, #8]
 80076ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076f0:	d01e      	beq.n	8007730 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80076f2:	f7fe fba7 	bl	8005e44 <HAL_GetTick>
 80076f6:	4602      	mov	r2, r0
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	1ad3      	subs	r3, r2, r3
 80076fc:	68ba      	ldr	r2, [r7, #8]
 80076fe:	429a      	cmp	r2, r3
 8007700:	d302      	bcc.n	8007708 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8007702:	68bb      	ldr	r3, [r7, #8]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d113      	bne.n	8007730 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800770c:	f043 0220 	orr.w	r2, r3, #32
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	2220      	movs	r2, #32
 8007718:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	2200      	movs	r2, #0
 8007720:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	2200      	movs	r2, #0
 8007728:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800772c:	2301      	movs	r3, #1
 800772e:	e007      	b.n	8007740 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	699b      	ldr	r3, [r3, #24]
 8007736:	f003 0302 	and.w	r3, r3, #2
 800773a:	2b02      	cmp	r3, #2
 800773c:	d1cb      	bne.n	80076d6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800773e:	2300      	movs	r3, #0
}
 8007740:	4618      	mov	r0, r3
 8007742:	3710      	adds	r7, #16
 8007744:	46bd      	mov	sp, r7
 8007746:	bd80      	pop	{r7, pc}

08007748 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b084      	sub	sp, #16
 800774c:	af00      	add	r7, sp, #0
 800774e:	60f8      	str	r0, [r7, #12]
 8007750:	60b9      	str	r1, [r7, #8]
 8007752:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007754:	e028      	b.n	80077a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007756:	687a      	ldr	r2, [r7, #4]
 8007758:	68b9      	ldr	r1, [r7, #8]
 800775a:	68f8      	ldr	r0, [r7, #12]
 800775c:	f000 f8aa 	bl	80078b4 <I2C_IsErrorOccurred>
 8007760:	4603      	mov	r3, r0
 8007762:	2b00      	cmp	r3, #0
 8007764:	d001      	beq.n	800776a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007766:	2301      	movs	r3, #1
 8007768:	e026      	b.n	80077b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800776a:	f7fe fb6b 	bl	8005e44 <HAL_GetTick>
 800776e:	4602      	mov	r2, r0
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	1ad3      	subs	r3, r2, r3
 8007774:	68ba      	ldr	r2, [r7, #8]
 8007776:	429a      	cmp	r2, r3
 8007778:	d302      	bcc.n	8007780 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800777a:	68bb      	ldr	r3, [r7, #8]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d113      	bne.n	80077a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007784:	f043 0220 	orr.w	r2, r3, #32
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	2220      	movs	r2, #32
 8007790:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	2200      	movs	r2, #0
 8007798:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	2200      	movs	r2, #0
 80077a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80077a4:	2301      	movs	r3, #1
 80077a6:	e007      	b.n	80077b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	699b      	ldr	r3, [r3, #24]
 80077ae:	f003 0320 	and.w	r3, r3, #32
 80077b2:	2b20      	cmp	r3, #32
 80077b4:	d1cf      	bne.n	8007756 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80077b6:	2300      	movs	r3, #0
}
 80077b8:	4618      	mov	r0, r3
 80077ba:	3710      	adds	r7, #16
 80077bc:	46bd      	mov	sp, r7
 80077be:	bd80      	pop	{r7, pc}

080077c0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80077c0:	b580      	push	{r7, lr}
 80077c2:	b084      	sub	sp, #16
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	60f8      	str	r0, [r7, #12]
 80077c8:	60b9      	str	r1, [r7, #8]
 80077ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80077cc:	e064      	b.n	8007898 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80077ce:	687a      	ldr	r2, [r7, #4]
 80077d0:	68b9      	ldr	r1, [r7, #8]
 80077d2:	68f8      	ldr	r0, [r7, #12]
 80077d4:	f000 f86e 	bl	80078b4 <I2C_IsErrorOccurred>
 80077d8:	4603      	mov	r3, r0
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d001      	beq.n	80077e2 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80077de:	2301      	movs	r3, #1
 80077e0:	e062      	b.n	80078a8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	699b      	ldr	r3, [r3, #24]
 80077e8:	f003 0320 	and.w	r3, r3, #32
 80077ec:	2b20      	cmp	r3, #32
 80077ee:	d138      	bne.n	8007862 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	699b      	ldr	r3, [r3, #24]
 80077f6:	f003 0304 	and.w	r3, r3, #4
 80077fa:	2b04      	cmp	r3, #4
 80077fc:	d105      	bne.n	800780a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007802:	2b00      	cmp	r3, #0
 8007804:	d001      	beq.n	800780a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8007806:	2300      	movs	r3, #0
 8007808:	e04e      	b.n	80078a8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	699b      	ldr	r3, [r3, #24]
 8007810:	f003 0310 	and.w	r3, r3, #16
 8007814:	2b10      	cmp	r3, #16
 8007816:	d107      	bne.n	8007828 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	2210      	movs	r2, #16
 800781e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	2204      	movs	r2, #4
 8007824:	645a      	str	r2, [r3, #68]	; 0x44
 8007826:	e002      	b.n	800782e <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	2200      	movs	r2, #0
 800782c:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	2220      	movs	r2, #32
 8007834:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	6859      	ldr	r1, [r3, #4]
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	681a      	ldr	r2, [r3, #0]
 8007840:	4b1b      	ldr	r3, [pc, #108]	; (80078b0 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8007842:	400b      	ands	r3, r1
 8007844:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	2220      	movs	r2, #32
 800784a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	2200      	movs	r2, #0
 8007852:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	2200      	movs	r2, #0
 800785a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800785e:	2301      	movs	r3, #1
 8007860:	e022      	b.n	80078a8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007862:	f7fe faef 	bl	8005e44 <HAL_GetTick>
 8007866:	4602      	mov	r2, r0
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	1ad3      	subs	r3, r2, r3
 800786c:	68ba      	ldr	r2, [r7, #8]
 800786e:	429a      	cmp	r2, r3
 8007870:	d302      	bcc.n	8007878 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8007872:	68bb      	ldr	r3, [r7, #8]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d10f      	bne.n	8007898 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800787c:	f043 0220 	orr.w	r2, r3, #32
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	2220      	movs	r2, #32
 8007888:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	2200      	movs	r2, #0
 8007890:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007894:	2301      	movs	r3, #1
 8007896:	e007      	b.n	80078a8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	699b      	ldr	r3, [r3, #24]
 800789e:	f003 0304 	and.w	r3, r3, #4
 80078a2:	2b04      	cmp	r3, #4
 80078a4:	d193      	bne.n	80077ce <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80078a6:	2300      	movs	r3, #0
}
 80078a8:	4618      	mov	r0, r3
 80078aa:	3710      	adds	r7, #16
 80078ac:	46bd      	mov	sp, r7
 80078ae:	bd80      	pop	{r7, pc}
 80078b0:	fe00e800 	.word	0xfe00e800

080078b4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80078b4:	b580      	push	{r7, lr}
 80078b6:	b08a      	sub	sp, #40	; 0x28
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	60f8      	str	r0, [r7, #12]
 80078bc:	60b9      	str	r1, [r7, #8]
 80078be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80078c0:	2300      	movs	r3, #0
 80078c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	699b      	ldr	r3, [r3, #24]
 80078cc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80078ce:	2300      	movs	r3, #0
 80078d0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80078d6:	69bb      	ldr	r3, [r7, #24]
 80078d8:	f003 0310 	and.w	r3, r3, #16
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d075      	beq.n	80079cc <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	2210      	movs	r2, #16
 80078e6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80078e8:	e056      	b.n	8007998 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80078ea:	68bb      	ldr	r3, [r7, #8]
 80078ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078f0:	d052      	beq.n	8007998 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80078f2:	f7fe faa7 	bl	8005e44 <HAL_GetTick>
 80078f6:	4602      	mov	r2, r0
 80078f8:	69fb      	ldr	r3, [r7, #28]
 80078fa:	1ad3      	subs	r3, r2, r3
 80078fc:	68ba      	ldr	r2, [r7, #8]
 80078fe:	429a      	cmp	r2, r3
 8007900:	d302      	bcc.n	8007908 <I2C_IsErrorOccurred+0x54>
 8007902:	68bb      	ldr	r3, [r7, #8]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d147      	bne.n	8007998 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	685b      	ldr	r3, [r3, #4]
 800790e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007912:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800791a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	699b      	ldr	r3, [r3, #24]
 8007922:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007926:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800792a:	d12e      	bne.n	800798a <I2C_IsErrorOccurred+0xd6>
 800792c:	697b      	ldr	r3, [r7, #20]
 800792e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007932:	d02a      	beq.n	800798a <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8007934:	7cfb      	ldrb	r3, [r7, #19]
 8007936:	2b20      	cmp	r3, #32
 8007938:	d027      	beq.n	800798a <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	685a      	ldr	r2, [r3, #4]
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007948:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800794a:	f7fe fa7b 	bl	8005e44 <HAL_GetTick>
 800794e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007950:	e01b      	b.n	800798a <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8007952:	f7fe fa77 	bl	8005e44 <HAL_GetTick>
 8007956:	4602      	mov	r2, r0
 8007958:	69fb      	ldr	r3, [r7, #28]
 800795a:	1ad3      	subs	r3, r2, r3
 800795c:	2b19      	cmp	r3, #25
 800795e:	d914      	bls.n	800798a <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007964:	f043 0220 	orr.w	r2, r3, #32
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	2220      	movs	r2, #32
 8007970:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	2200      	movs	r2, #0
 8007978:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	2200      	movs	r2, #0
 8007980:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8007984:	2301      	movs	r3, #1
 8007986:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	699b      	ldr	r3, [r3, #24]
 8007990:	f003 0320 	and.w	r3, r3, #32
 8007994:	2b20      	cmp	r3, #32
 8007996:	d1dc      	bne.n	8007952 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	699b      	ldr	r3, [r3, #24]
 800799e:	f003 0320 	and.w	r3, r3, #32
 80079a2:	2b20      	cmp	r3, #32
 80079a4:	d003      	beq.n	80079ae <I2C_IsErrorOccurred+0xfa>
 80079a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d09d      	beq.n	80078ea <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80079ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d103      	bne.n	80079be <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	2220      	movs	r2, #32
 80079bc:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80079be:	6a3b      	ldr	r3, [r7, #32]
 80079c0:	f043 0304 	orr.w	r3, r3, #4
 80079c4:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80079c6:	2301      	movs	r3, #1
 80079c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	699b      	ldr	r3, [r3, #24]
 80079d2:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80079d4:	69bb      	ldr	r3, [r7, #24]
 80079d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d00b      	beq.n	80079f6 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80079de:	6a3b      	ldr	r3, [r7, #32]
 80079e0:	f043 0301 	orr.w	r3, r3, #1
 80079e4:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80079ee:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80079f0:	2301      	movs	r3, #1
 80079f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80079f6:	69bb      	ldr	r3, [r7, #24]
 80079f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d00b      	beq.n	8007a18 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8007a00:	6a3b      	ldr	r3, [r7, #32]
 8007a02:	f043 0308 	orr.w	r3, r3, #8
 8007a06:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007a10:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007a12:	2301      	movs	r3, #1
 8007a14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8007a18:	69bb      	ldr	r3, [r7, #24]
 8007a1a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d00b      	beq.n	8007a3a <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8007a22:	6a3b      	ldr	r3, [r7, #32]
 8007a24:	f043 0302 	orr.w	r3, r3, #2
 8007a28:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007a32:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007a34:	2301      	movs	r3, #1
 8007a36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8007a3a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d01c      	beq.n	8007a7c <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007a42:	68f8      	ldr	r0, [r7, #12]
 8007a44:	f7ff fddc 	bl	8007600 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	6859      	ldr	r1, [r3, #4]
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	681a      	ldr	r2, [r3, #0]
 8007a52:	4b0d      	ldr	r3, [pc, #52]	; (8007a88 <I2C_IsErrorOccurred+0x1d4>)
 8007a54:	400b      	ands	r3, r1
 8007a56:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007a5c:	6a3b      	ldr	r3, [r7, #32]
 8007a5e:	431a      	orrs	r2, r3
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	2220      	movs	r2, #32
 8007a68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	2200      	movs	r2, #0
 8007a70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	2200      	movs	r2, #0
 8007a78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8007a7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8007a80:	4618      	mov	r0, r3
 8007a82:	3728      	adds	r7, #40	; 0x28
 8007a84:	46bd      	mov	sp, r7
 8007a86:	bd80      	pop	{r7, pc}
 8007a88:	fe00e800 	.word	0xfe00e800

08007a8c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007a8c:	b480      	push	{r7}
 8007a8e:	b087      	sub	sp, #28
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	60f8      	str	r0, [r7, #12]
 8007a94:	607b      	str	r3, [r7, #4]
 8007a96:	460b      	mov	r3, r1
 8007a98:	817b      	strh	r3, [r7, #10]
 8007a9a:	4613      	mov	r3, r2
 8007a9c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007a9e:	897b      	ldrh	r3, [r7, #10]
 8007aa0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007aa4:	7a7b      	ldrb	r3, [r7, #9]
 8007aa6:	041b      	lsls	r3, r3, #16
 8007aa8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007aac:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007ab2:	6a3b      	ldr	r3, [r7, #32]
 8007ab4:	4313      	orrs	r3, r2
 8007ab6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007aba:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	685a      	ldr	r2, [r3, #4]
 8007ac2:	6a3b      	ldr	r3, [r7, #32]
 8007ac4:	0d5b      	lsrs	r3, r3, #21
 8007ac6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8007aca:	4b08      	ldr	r3, [pc, #32]	; (8007aec <I2C_TransferConfig+0x60>)
 8007acc:	430b      	orrs	r3, r1
 8007ace:	43db      	mvns	r3, r3
 8007ad0:	ea02 0103 	and.w	r1, r2, r3
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	697a      	ldr	r2, [r7, #20]
 8007ada:	430a      	orrs	r2, r1
 8007adc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8007ade:	bf00      	nop
 8007ae0:	371c      	adds	r7, #28
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae8:	4770      	bx	lr
 8007aea:	bf00      	nop
 8007aec:	03ff63ff 	.word	0x03ff63ff

08007af0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007af0:	b480      	push	{r7}
 8007af2:	b083      	sub	sp, #12
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
 8007af8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007b00:	b2db      	uxtb	r3, r3
 8007b02:	2b20      	cmp	r3, #32
 8007b04:	d138      	bne.n	8007b78 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007b0c:	2b01      	cmp	r3, #1
 8007b0e:	d101      	bne.n	8007b14 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007b10:	2302      	movs	r3, #2
 8007b12:	e032      	b.n	8007b7a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2201      	movs	r2, #1
 8007b18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2224      	movs	r2, #36	; 0x24
 8007b20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	681a      	ldr	r2, [r3, #0]
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	f022 0201 	bic.w	r2, r2, #1
 8007b32:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	681a      	ldr	r2, [r3, #0]
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007b42:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	6819      	ldr	r1, [r3, #0]
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	683a      	ldr	r2, [r7, #0]
 8007b50:	430a      	orrs	r2, r1
 8007b52:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	681a      	ldr	r2, [r3, #0]
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	f042 0201 	orr.w	r2, r2, #1
 8007b62:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	2220      	movs	r2, #32
 8007b68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2200      	movs	r2, #0
 8007b70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007b74:	2300      	movs	r3, #0
 8007b76:	e000      	b.n	8007b7a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007b78:	2302      	movs	r3, #2
  }
}
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	370c      	adds	r7, #12
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b84:	4770      	bx	lr

08007b86 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007b86:	b480      	push	{r7}
 8007b88:	b085      	sub	sp, #20
 8007b8a:	af00      	add	r7, sp, #0
 8007b8c:	6078      	str	r0, [r7, #4]
 8007b8e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007b96:	b2db      	uxtb	r3, r3
 8007b98:	2b20      	cmp	r3, #32
 8007b9a:	d139      	bne.n	8007c10 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007ba2:	2b01      	cmp	r3, #1
 8007ba4:	d101      	bne.n	8007baa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007ba6:	2302      	movs	r3, #2
 8007ba8:	e033      	b.n	8007c12 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	2201      	movs	r2, #1
 8007bae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	2224      	movs	r2, #36	; 0x24
 8007bb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	681a      	ldr	r2, [r3, #0]
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	f022 0201 	bic.w	r2, r2, #1
 8007bc8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007bd8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007bda:	683b      	ldr	r3, [r7, #0]
 8007bdc:	021b      	lsls	r3, r3, #8
 8007bde:	68fa      	ldr	r2, [r7, #12]
 8007be0:	4313      	orrs	r3, r2
 8007be2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	68fa      	ldr	r2, [r7, #12]
 8007bea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	681a      	ldr	r2, [r3, #0]
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	f042 0201 	orr.w	r2, r2, #1
 8007bfa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2220      	movs	r2, #32
 8007c00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2200      	movs	r2, #0
 8007c08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	e000      	b.n	8007c12 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007c10:	2302      	movs	r3, #2
  }
}
 8007c12:	4618      	mov	r0, r3
 8007c14:	3714      	adds	r7, #20
 8007c16:	46bd      	mov	sp, r7
 8007c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1c:	4770      	bx	lr
	...

08007c20 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8007c20:	b480      	push	{r7}
 8007c22:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007c24:	4b0d      	ldr	r3, [pc, #52]	; (8007c5c <HAL_PWREx_GetVoltageRange+0x3c>)
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007c2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c30:	d102      	bne.n	8007c38 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8007c32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007c36:	e00b      	b.n	8007c50 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8007c38:	4b08      	ldr	r3, [pc, #32]	; (8007c5c <HAL_PWREx_GetVoltageRange+0x3c>)
 8007c3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007c3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c46:	d102      	bne.n	8007c4e <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8007c48:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007c4c:	e000      	b.n	8007c50 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8007c4e:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8007c50:	4618      	mov	r0, r3
 8007c52:	46bd      	mov	sp, r7
 8007c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c58:	4770      	bx	lr
 8007c5a:	bf00      	nop
 8007c5c:	40007000 	.word	0x40007000

08007c60 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007c60:	b480      	push	{r7}
 8007c62:	b085      	sub	sp, #20
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d141      	bne.n	8007cf2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007c6e:	4b4b      	ldr	r3, [pc, #300]	; (8007d9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007c76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c7a:	d131      	bne.n	8007ce0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007c7c:	4b47      	ldr	r3, [pc, #284]	; (8007d9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007c7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007c82:	4a46      	ldr	r2, [pc, #280]	; (8007d9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007c84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007c88:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007c8c:	4b43      	ldr	r3, [pc, #268]	; (8007d9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007c94:	4a41      	ldr	r2, [pc, #260]	; (8007d9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007c96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007c9a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8007c9c:	4b40      	ldr	r3, [pc, #256]	; (8007da0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	2232      	movs	r2, #50	; 0x32
 8007ca2:	fb02 f303 	mul.w	r3, r2, r3
 8007ca6:	4a3f      	ldr	r2, [pc, #252]	; (8007da4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007ca8:	fba2 2303 	umull	r2, r3, r2, r3
 8007cac:	0c9b      	lsrs	r3, r3, #18
 8007cae:	3301      	adds	r3, #1
 8007cb0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007cb2:	e002      	b.n	8007cba <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	3b01      	subs	r3, #1
 8007cb8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007cba:	4b38      	ldr	r3, [pc, #224]	; (8007d9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007cbc:	695b      	ldr	r3, [r3, #20]
 8007cbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007cc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007cc6:	d102      	bne.n	8007cce <HAL_PWREx_ControlVoltageScaling+0x6e>
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d1f2      	bne.n	8007cb4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007cce:	4b33      	ldr	r3, [pc, #204]	; (8007d9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007cd0:	695b      	ldr	r3, [r3, #20]
 8007cd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007cd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007cda:	d158      	bne.n	8007d8e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007cdc:	2303      	movs	r3, #3
 8007cde:	e057      	b.n	8007d90 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007ce0:	4b2e      	ldr	r3, [pc, #184]	; (8007d9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007ce2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007ce6:	4a2d      	ldr	r2, [pc, #180]	; (8007d9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007ce8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007cec:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8007cf0:	e04d      	b.n	8007d8e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007cf8:	d141      	bne.n	8007d7e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007cfa:	4b28      	ldr	r3, [pc, #160]	; (8007d9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007d02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d06:	d131      	bne.n	8007d6c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007d08:	4b24      	ldr	r3, [pc, #144]	; (8007d9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007d0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007d0e:	4a23      	ldr	r2, [pc, #140]	; (8007d9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007d10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007d14:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007d18:	4b20      	ldr	r3, [pc, #128]	; (8007d9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007d20:	4a1e      	ldr	r2, [pc, #120]	; (8007d9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007d22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007d26:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8007d28:	4b1d      	ldr	r3, [pc, #116]	; (8007da0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	2232      	movs	r2, #50	; 0x32
 8007d2e:	fb02 f303 	mul.w	r3, r2, r3
 8007d32:	4a1c      	ldr	r2, [pc, #112]	; (8007da4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007d34:	fba2 2303 	umull	r2, r3, r2, r3
 8007d38:	0c9b      	lsrs	r3, r3, #18
 8007d3a:	3301      	adds	r3, #1
 8007d3c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007d3e:	e002      	b.n	8007d46 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	3b01      	subs	r3, #1
 8007d44:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007d46:	4b15      	ldr	r3, [pc, #84]	; (8007d9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007d48:	695b      	ldr	r3, [r3, #20]
 8007d4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d52:	d102      	bne.n	8007d5a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d1f2      	bne.n	8007d40 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007d5a:	4b10      	ldr	r3, [pc, #64]	; (8007d9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007d5c:	695b      	ldr	r3, [r3, #20]
 8007d5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d66:	d112      	bne.n	8007d8e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007d68:	2303      	movs	r3, #3
 8007d6a:	e011      	b.n	8007d90 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007d6c:	4b0b      	ldr	r3, [pc, #44]	; (8007d9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007d6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007d72:	4a0a      	ldr	r2, [pc, #40]	; (8007d9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007d74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007d78:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8007d7c:	e007      	b.n	8007d8e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8007d7e:	4b07      	ldr	r3, [pc, #28]	; (8007d9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007d86:	4a05      	ldr	r2, [pc, #20]	; (8007d9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007d88:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007d8c:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8007d8e:	2300      	movs	r3, #0
}
 8007d90:	4618      	mov	r0, r3
 8007d92:	3714      	adds	r7, #20
 8007d94:	46bd      	mov	sp, r7
 8007d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9a:	4770      	bx	lr
 8007d9c:	40007000 	.word	0x40007000
 8007da0:	2000003c 	.word	0x2000003c
 8007da4:	431bde83 	.word	0x431bde83

08007da8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b088      	sub	sp, #32
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d102      	bne.n	8007dbc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8007db6:	2301      	movs	r3, #1
 8007db8:	f000 bc08 	b.w	80085cc <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007dbc:	4b96      	ldr	r3, [pc, #600]	; (8008018 <HAL_RCC_OscConfig+0x270>)
 8007dbe:	689b      	ldr	r3, [r3, #8]
 8007dc0:	f003 030c 	and.w	r3, r3, #12
 8007dc4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007dc6:	4b94      	ldr	r3, [pc, #592]	; (8008018 <HAL_RCC_OscConfig+0x270>)
 8007dc8:	68db      	ldr	r3, [r3, #12]
 8007dca:	f003 0303 	and.w	r3, r3, #3
 8007dce:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	f003 0310 	and.w	r3, r3, #16
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	f000 80e4 	beq.w	8007fa6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8007dde:	69bb      	ldr	r3, [r7, #24]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d007      	beq.n	8007df4 <HAL_RCC_OscConfig+0x4c>
 8007de4:	69bb      	ldr	r3, [r7, #24]
 8007de6:	2b0c      	cmp	r3, #12
 8007de8:	f040 808b 	bne.w	8007f02 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8007dec:	697b      	ldr	r3, [r7, #20]
 8007dee:	2b01      	cmp	r3, #1
 8007df0:	f040 8087 	bne.w	8007f02 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007df4:	4b88      	ldr	r3, [pc, #544]	; (8008018 <HAL_RCC_OscConfig+0x270>)
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	f003 0302 	and.w	r3, r3, #2
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d005      	beq.n	8007e0c <HAL_RCC_OscConfig+0x64>
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	699b      	ldr	r3, [r3, #24]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d101      	bne.n	8007e0c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8007e08:	2301      	movs	r3, #1
 8007e0a:	e3df      	b.n	80085cc <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	6a1a      	ldr	r2, [r3, #32]
 8007e10:	4b81      	ldr	r3, [pc, #516]	; (8008018 <HAL_RCC_OscConfig+0x270>)
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	f003 0308 	and.w	r3, r3, #8
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d004      	beq.n	8007e26 <HAL_RCC_OscConfig+0x7e>
 8007e1c:	4b7e      	ldr	r3, [pc, #504]	; (8008018 <HAL_RCC_OscConfig+0x270>)
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007e24:	e005      	b.n	8007e32 <HAL_RCC_OscConfig+0x8a>
 8007e26:	4b7c      	ldr	r3, [pc, #496]	; (8008018 <HAL_RCC_OscConfig+0x270>)
 8007e28:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007e2c:	091b      	lsrs	r3, r3, #4
 8007e2e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007e32:	4293      	cmp	r3, r2
 8007e34:	d223      	bcs.n	8007e7e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	6a1b      	ldr	r3, [r3, #32]
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	f000 fdfe 	bl	8008a3c <RCC_SetFlashLatencyFromMSIRange>
 8007e40:	4603      	mov	r3, r0
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d001      	beq.n	8007e4a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8007e46:	2301      	movs	r3, #1
 8007e48:	e3c0      	b.n	80085cc <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007e4a:	4b73      	ldr	r3, [pc, #460]	; (8008018 <HAL_RCC_OscConfig+0x270>)
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	4a72      	ldr	r2, [pc, #456]	; (8008018 <HAL_RCC_OscConfig+0x270>)
 8007e50:	f043 0308 	orr.w	r3, r3, #8
 8007e54:	6013      	str	r3, [r2, #0]
 8007e56:	4b70      	ldr	r3, [pc, #448]	; (8008018 <HAL_RCC_OscConfig+0x270>)
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	6a1b      	ldr	r3, [r3, #32]
 8007e62:	496d      	ldr	r1, [pc, #436]	; (8008018 <HAL_RCC_OscConfig+0x270>)
 8007e64:	4313      	orrs	r3, r2
 8007e66:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007e68:	4b6b      	ldr	r3, [pc, #428]	; (8008018 <HAL_RCC_OscConfig+0x270>)
 8007e6a:	685b      	ldr	r3, [r3, #4]
 8007e6c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	69db      	ldr	r3, [r3, #28]
 8007e74:	021b      	lsls	r3, r3, #8
 8007e76:	4968      	ldr	r1, [pc, #416]	; (8008018 <HAL_RCC_OscConfig+0x270>)
 8007e78:	4313      	orrs	r3, r2
 8007e7a:	604b      	str	r3, [r1, #4]
 8007e7c:	e025      	b.n	8007eca <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007e7e:	4b66      	ldr	r3, [pc, #408]	; (8008018 <HAL_RCC_OscConfig+0x270>)
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	4a65      	ldr	r2, [pc, #404]	; (8008018 <HAL_RCC_OscConfig+0x270>)
 8007e84:	f043 0308 	orr.w	r3, r3, #8
 8007e88:	6013      	str	r3, [r2, #0]
 8007e8a:	4b63      	ldr	r3, [pc, #396]	; (8008018 <HAL_RCC_OscConfig+0x270>)
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	6a1b      	ldr	r3, [r3, #32]
 8007e96:	4960      	ldr	r1, [pc, #384]	; (8008018 <HAL_RCC_OscConfig+0x270>)
 8007e98:	4313      	orrs	r3, r2
 8007e9a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007e9c:	4b5e      	ldr	r3, [pc, #376]	; (8008018 <HAL_RCC_OscConfig+0x270>)
 8007e9e:	685b      	ldr	r3, [r3, #4]
 8007ea0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	69db      	ldr	r3, [r3, #28]
 8007ea8:	021b      	lsls	r3, r3, #8
 8007eaa:	495b      	ldr	r1, [pc, #364]	; (8008018 <HAL_RCC_OscConfig+0x270>)
 8007eac:	4313      	orrs	r3, r2
 8007eae:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007eb0:	69bb      	ldr	r3, [r7, #24]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d109      	bne.n	8007eca <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	6a1b      	ldr	r3, [r3, #32]
 8007eba:	4618      	mov	r0, r3
 8007ebc:	f000 fdbe 	bl	8008a3c <RCC_SetFlashLatencyFromMSIRange>
 8007ec0:	4603      	mov	r3, r0
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d001      	beq.n	8007eca <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8007ec6:	2301      	movs	r3, #1
 8007ec8:	e380      	b.n	80085cc <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007eca:	f000 fcc1 	bl	8008850 <HAL_RCC_GetSysClockFreq>
 8007ece:	4602      	mov	r2, r0
 8007ed0:	4b51      	ldr	r3, [pc, #324]	; (8008018 <HAL_RCC_OscConfig+0x270>)
 8007ed2:	689b      	ldr	r3, [r3, #8]
 8007ed4:	091b      	lsrs	r3, r3, #4
 8007ed6:	f003 030f 	and.w	r3, r3, #15
 8007eda:	4950      	ldr	r1, [pc, #320]	; (800801c <HAL_RCC_OscConfig+0x274>)
 8007edc:	5ccb      	ldrb	r3, [r1, r3]
 8007ede:	f003 031f 	and.w	r3, r3, #31
 8007ee2:	fa22 f303 	lsr.w	r3, r2, r3
 8007ee6:	4a4e      	ldr	r2, [pc, #312]	; (8008020 <HAL_RCC_OscConfig+0x278>)
 8007ee8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8007eea:	4b4e      	ldr	r3, [pc, #312]	; (8008024 <HAL_RCC_OscConfig+0x27c>)
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	4618      	mov	r0, r3
 8007ef0:	f7fd fb52 	bl	8005598 <HAL_InitTick>
 8007ef4:	4603      	mov	r3, r0
 8007ef6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8007ef8:	7bfb      	ldrb	r3, [r7, #15]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d052      	beq.n	8007fa4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8007efe:	7bfb      	ldrb	r3, [r7, #15]
 8007f00:	e364      	b.n	80085cc <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	699b      	ldr	r3, [r3, #24]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d032      	beq.n	8007f70 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8007f0a:	4b43      	ldr	r3, [pc, #268]	; (8008018 <HAL_RCC_OscConfig+0x270>)
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	4a42      	ldr	r2, [pc, #264]	; (8008018 <HAL_RCC_OscConfig+0x270>)
 8007f10:	f043 0301 	orr.w	r3, r3, #1
 8007f14:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007f16:	f7fd ff95 	bl	8005e44 <HAL_GetTick>
 8007f1a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007f1c:	e008      	b.n	8007f30 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007f1e:	f7fd ff91 	bl	8005e44 <HAL_GetTick>
 8007f22:	4602      	mov	r2, r0
 8007f24:	693b      	ldr	r3, [r7, #16]
 8007f26:	1ad3      	subs	r3, r2, r3
 8007f28:	2b02      	cmp	r3, #2
 8007f2a:	d901      	bls.n	8007f30 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8007f2c:	2303      	movs	r3, #3
 8007f2e:	e34d      	b.n	80085cc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007f30:	4b39      	ldr	r3, [pc, #228]	; (8008018 <HAL_RCC_OscConfig+0x270>)
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	f003 0302 	and.w	r3, r3, #2
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d0f0      	beq.n	8007f1e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007f3c:	4b36      	ldr	r3, [pc, #216]	; (8008018 <HAL_RCC_OscConfig+0x270>)
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	4a35      	ldr	r2, [pc, #212]	; (8008018 <HAL_RCC_OscConfig+0x270>)
 8007f42:	f043 0308 	orr.w	r3, r3, #8
 8007f46:	6013      	str	r3, [r2, #0]
 8007f48:	4b33      	ldr	r3, [pc, #204]	; (8008018 <HAL_RCC_OscConfig+0x270>)
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	6a1b      	ldr	r3, [r3, #32]
 8007f54:	4930      	ldr	r1, [pc, #192]	; (8008018 <HAL_RCC_OscConfig+0x270>)
 8007f56:	4313      	orrs	r3, r2
 8007f58:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007f5a:	4b2f      	ldr	r3, [pc, #188]	; (8008018 <HAL_RCC_OscConfig+0x270>)
 8007f5c:	685b      	ldr	r3, [r3, #4]
 8007f5e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	69db      	ldr	r3, [r3, #28]
 8007f66:	021b      	lsls	r3, r3, #8
 8007f68:	492b      	ldr	r1, [pc, #172]	; (8008018 <HAL_RCC_OscConfig+0x270>)
 8007f6a:	4313      	orrs	r3, r2
 8007f6c:	604b      	str	r3, [r1, #4]
 8007f6e:	e01a      	b.n	8007fa6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8007f70:	4b29      	ldr	r3, [pc, #164]	; (8008018 <HAL_RCC_OscConfig+0x270>)
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	4a28      	ldr	r2, [pc, #160]	; (8008018 <HAL_RCC_OscConfig+0x270>)
 8007f76:	f023 0301 	bic.w	r3, r3, #1
 8007f7a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007f7c:	f7fd ff62 	bl	8005e44 <HAL_GetTick>
 8007f80:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8007f82:	e008      	b.n	8007f96 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007f84:	f7fd ff5e 	bl	8005e44 <HAL_GetTick>
 8007f88:	4602      	mov	r2, r0
 8007f8a:	693b      	ldr	r3, [r7, #16]
 8007f8c:	1ad3      	subs	r3, r2, r3
 8007f8e:	2b02      	cmp	r3, #2
 8007f90:	d901      	bls.n	8007f96 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8007f92:	2303      	movs	r3, #3
 8007f94:	e31a      	b.n	80085cc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8007f96:	4b20      	ldr	r3, [pc, #128]	; (8008018 <HAL_RCC_OscConfig+0x270>)
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	f003 0302 	and.w	r3, r3, #2
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d1f0      	bne.n	8007f84 <HAL_RCC_OscConfig+0x1dc>
 8007fa2:	e000      	b.n	8007fa6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007fa4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	f003 0301 	and.w	r3, r3, #1
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d073      	beq.n	800809a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8007fb2:	69bb      	ldr	r3, [r7, #24]
 8007fb4:	2b08      	cmp	r3, #8
 8007fb6:	d005      	beq.n	8007fc4 <HAL_RCC_OscConfig+0x21c>
 8007fb8:	69bb      	ldr	r3, [r7, #24]
 8007fba:	2b0c      	cmp	r3, #12
 8007fbc:	d10e      	bne.n	8007fdc <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8007fbe:	697b      	ldr	r3, [r7, #20]
 8007fc0:	2b03      	cmp	r3, #3
 8007fc2:	d10b      	bne.n	8007fdc <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007fc4:	4b14      	ldr	r3, [pc, #80]	; (8008018 <HAL_RCC_OscConfig+0x270>)
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d063      	beq.n	8008098 <HAL_RCC_OscConfig+0x2f0>
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	685b      	ldr	r3, [r3, #4]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d15f      	bne.n	8008098 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8007fd8:	2301      	movs	r3, #1
 8007fda:	e2f7      	b.n	80085cc <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	685b      	ldr	r3, [r3, #4]
 8007fe0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007fe4:	d106      	bne.n	8007ff4 <HAL_RCC_OscConfig+0x24c>
 8007fe6:	4b0c      	ldr	r3, [pc, #48]	; (8008018 <HAL_RCC_OscConfig+0x270>)
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	4a0b      	ldr	r2, [pc, #44]	; (8008018 <HAL_RCC_OscConfig+0x270>)
 8007fec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007ff0:	6013      	str	r3, [r2, #0]
 8007ff2:	e025      	b.n	8008040 <HAL_RCC_OscConfig+0x298>
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	685b      	ldr	r3, [r3, #4]
 8007ff8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007ffc:	d114      	bne.n	8008028 <HAL_RCC_OscConfig+0x280>
 8007ffe:	4b06      	ldr	r3, [pc, #24]	; (8008018 <HAL_RCC_OscConfig+0x270>)
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	4a05      	ldr	r2, [pc, #20]	; (8008018 <HAL_RCC_OscConfig+0x270>)
 8008004:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008008:	6013      	str	r3, [r2, #0]
 800800a:	4b03      	ldr	r3, [pc, #12]	; (8008018 <HAL_RCC_OscConfig+0x270>)
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	4a02      	ldr	r2, [pc, #8]	; (8008018 <HAL_RCC_OscConfig+0x270>)
 8008010:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008014:	6013      	str	r3, [r2, #0]
 8008016:	e013      	b.n	8008040 <HAL_RCC_OscConfig+0x298>
 8008018:	40021000 	.word	0x40021000
 800801c:	080145cc 	.word	0x080145cc
 8008020:	2000003c 	.word	0x2000003c
 8008024:	20000040 	.word	0x20000040
 8008028:	4ba0      	ldr	r3, [pc, #640]	; (80082ac <HAL_RCC_OscConfig+0x504>)
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	4a9f      	ldr	r2, [pc, #636]	; (80082ac <HAL_RCC_OscConfig+0x504>)
 800802e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008032:	6013      	str	r3, [r2, #0]
 8008034:	4b9d      	ldr	r3, [pc, #628]	; (80082ac <HAL_RCC_OscConfig+0x504>)
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	4a9c      	ldr	r2, [pc, #624]	; (80082ac <HAL_RCC_OscConfig+0x504>)
 800803a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800803e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	685b      	ldr	r3, [r3, #4]
 8008044:	2b00      	cmp	r3, #0
 8008046:	d013      	beq.n	8008070 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008048:	f7fd fefc 	bl	8005e44 <HAL_GetTick>
 800804c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800804e:	e008      	b.n	8008062 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008050:	f7fd fef8 	bl	8005e44 <HAL_GetTick>
 8008054:	4602      	mov	r2, r0
 8008056:	693b      	ldr	r3, [r7, #16]
 8008058:	1ad3      	subs	r3, r2, r3
 800805a:	2b64      	cmp	r3, #100	; 0x64
 800805c:	d901      	bls.n	8008062 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800805e:	2303      	movs	r3, #3
 8008060:	e2b4      	b.n	80085cc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008062:	4b92      	ldr	r3, [pc, #584]	; (80082ac <HAL_RCC_OscConfig+0x504>)
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800806a:	2b00      	cmp	r3, #0
 800806c:	d0f0      	beq.n	8008050 <HAL_RCC_OscConfig+0x2a8>
 800806e:	e014      	b.n	800809a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008070:	f7fd fee8 	bl	8005e44 <HAL_GetTick>
 8008074:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008076:	e008      	b.n	800808a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008078:	f7fd fee4 	bl	8005e44 <HAL_GetTick>
 800807c:	4602      	mov	r2, r0
 800807e:	693b      	ldr	r3, [r7, #16]
 8008080:	1ad3      	subs	r3, r2, r3
 8008082:	2b64      	cmp	r3, #100	; 0x64
 8008084:	d901      	bls.n	800808a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8008086:	2303      	movs	r3, #3
 8008088:	e2a0      	b.n	80085cc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800808a:	4b88      	ldr	r3, [pc, #544]	; (80082ac <HAL_RCC_OscConfig+0x504>)
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008092:	2b00      	cmp	r3, #0
 8008094:	d1f0      	bne.n	8008078 <HAL_RCC_OscConfig+0x2d0>
 8008096:	e000      	b.n	800809a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008098:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	f003 0302 	and.w	r3, r3, #2
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d060      	beq.n	8008168 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80080a6:	69bb      	ldr	r3, [r7, #24]
 80080a8:	2b04      	cmp	r3, #4
 80080aa:	d005      	beq.n	80080b8 <HAL_RCC_OscConfig+0x310>
 80080ac:	69bb      	ldr	r3, [r7, #24]
 80080ae:	2b0c      	cmp	r3, #12
 80080b0:	d119      	bne.n	80080e6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80080b2:	697b      	ldr	r3, [r7, #20]
 80080b4:	2b02      	cmp	r3, #2
 80080b6:	d116      	bne.n	80080e6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80080b8:	4b7c      	ldr	r3, [pc, #496]	; (80082ac <HAL_RCC_OscConfig+0x504>)
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d005      	beq.n	80080d0 <HAL_RCC_OscConfig+0x328>
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	68db      	ldr	r3, [r3, #12]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d101      	bne.n	80080d0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80080cc:	2301      	movs	r3, #1
 80080ce:	e27d      	b.n	80085cc <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80080d0:	4b76      	ldr	r3, [pc, #472]	; (80082ac <HAL_RCC_OscConfig+0x504>)
 80080d2:	685b      	ldr	r3, [r3, #4]
 80080d4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	691b      	ldr	r3, [r3, #16]
 80080dc:	061b      	lsls	r3, r3, #24
 80080de:	4973      	ldr	r1, [pc, #460]	; (80082ac <HAL_RCC_OscConfig+0x504>)
 80080e0:	4313      	orrs	r3, r2
 80080e2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80080e4:	e040      	b.n	8008168 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	68db      	ldr	r3, [r3, #12]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d023      	beq.n	8008136 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80080ee:	4b6f      	ldr	r3, [pc, #444]	; (80082ac <HAL_RCC_OscConfig+0x504>)
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	4a6e      	ldr	r2, [pc, #440]	; (80082ac <HAL_RCC_OscConfig+0x504>)
 80080f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80080f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080fa:	f7fd fea3 	bl	8005e44 <HAL_GetTick>
 80080fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008100:	e008      	b.n	8008114 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008102:	f7fd fe9f 	bl	8005e44 <HAL_GetTick>
 8008106:	4602      	mov	r2, r0
 8008108:	693b      	ldr	r3, [r7, #16]
 800810a:	1ad3      	subs	r3, r2, r3
 800810c:	2b02      	cmp	r3, #2
 800810e:	d901      	bls.n	8008114 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8008110:	2303      	movs	r3, #3
 8008112:	e25b      	b.n	80085cc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008114:	4b65      	ldr	r3, [pc, #404]	; (80082ac <HAL_RCC_OscConfig+0x504>)
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800811c:	2b00      	cmp	r3, #0
 800811e:	d0f0      	beq.n	8008102 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008120:	4b62      	ldr	r3, [pc, #392]	; (80082ac <HAL_RCC_OscConfig+0x504>)
 8008122:	685b      	ldr	r3, [r3, #4]
 8008124:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	691b      	ldr	r3, [r3, #16]
 800812c:	061b      	lsls	r3, r3, #24
 800812e:	495f      	ldr	r1, [pc, #380]	; (80082ac <HAL_RCC_OscConfig+0x504>)
 8008130:	4313      	orrs	r3, r2
 8008132:	604b      	str	r3, [r1, #4]
 8008134:	e018      	b.n	8008168 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008136:	4b5d      	ldr	r3, [pc, #372]	; (80082ac <HAL_RCC_OscConfig+0x504>)
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	4a5c      	ldr	r2, [pc, #368]	; (80082ac <HAL_RCC_OscConfig+0x504>)
 800813c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008140:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008142:	f7fd fe7f 	bl	8005e44 <HAL_GetTick>
 8008146:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008148:	e008      	b.n	800815c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800814a:	f7fd fe7b 	bl	8005e44 <HAL_GetTick>
 800814e:	4602      	mov	r2, r0
 8008150:	693b      	ldr	r3, [r7, #16]
 8008152:	1ad3      	subs	r3, r2, r3
 8008154:	2b02      	cmp	r3, #2
 8008156:	d901      	bls.n	800815c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8008158:	2303      	movs	r3, #3
 800815a:	e237      	b.n	80085cc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800815c:	4b53      	ldr	r3, [pc, #332]	; (80082ac <HAL_RCC_OscConfig+0x504>)
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008164:	2b00      	cmp	r3, #0
 8008166:	d1f0      	bne.n	800814a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	f003 0308 	and.w	r3, r3, #8
 8008170:	2b00      	cmp	r3, #0
 8008172:	d03c      	beq.n	80081ee <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	695b      	ldr	r3, [r3, #20]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d01c      	beq.n	80081b6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800817c:	4b4b      	ldr	r3, [pc, #300]	; (80082ac <HAL_RCC_OscConfig+0x504>)
 800817e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008182:	4a4a      	ldr	r2, [pc, #296]	; (80082ac <HAL_RCC_OscConfig+0x504>)
 8008184:	f043 0301 	orr.w	r3, r3, #1
 8008188:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800818c:	f7fd fe5a 	bl	8005e44 <HAL_GetTick>
 8008190:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008192:	e008      	b.n	80081a6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008194:	f7fd fe56 	bl	8005e44 <HAL_GetTick>
 8008198:	4602      	mov	r2, r0
 800819a:	693b      	ldr	r3, [r7, #16]
 800819c:	1ad3      	subs	r3, r2, r3
 800819e:	2b02      	cmp	r3, #2
 80081a0:	d901      	bls.n	80081a6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80081a2:	2303      	movs	r3, #3
 80081a4:	e212      	b.n	80085cc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80081a6:	4b41      	ldr	r3, [pc, #260]	; (80082ac <HAL_RCC_OscConfig+0x504>)
 80081a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80081ac:	f003 0302 	and.w	r3, r3, #2
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d0ef      	beq.n	8008194 <HAL_RCC_OscConfig+0x3ec>
 80081b4:	e01b      	b.n	80081ee <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80081b6:	4b3d      	ldr	r3, [pc, #244]	; (80082ac <HAL_RCC_OscConfig+0x504>)
 80081b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80081bc:	4a3b      	ldr	r2, [pc, #236]	; (80082ac <HAL_RCC_OscConfig+0x504>)
 80081be:	f023 0301 	bic.w	r3, r3, #1
 80081c2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80081c6:	f7fd fe3d 	bl	8005e44 <HAL_GetTick>
 80081ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80081cc:	e008      	b.n	80081e0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80081ce:	f7fd fe39 	bl	8005e44 <HAL_GetTick>
 80081d2:	4602      	mov	r2, r0
 80081d4:	693b      	ldr	r3, [r7, #16]
 80081d6:	1ad3      	subs	r3, r2, r3
 80081d8:	2b02      	cmp	r3, #2
 80081da:	d901      	bls.n	80081e0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80081dc:	2303      	movs	r3, #3
 80081de:	e1f5      	b.n	80085cc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80081e0:	4b32      	ldr	r3, [pc, #200]	; (80082ac <HAL_RCC_OscConfig+0x504>)
 80081e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80081e6:	f003 0302 	and.w	r3, r3, #2
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d1ef      	bne.n	80081ce <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	f003 0304 	and.w	r3, r3, #4
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	f000 80a6 	beq.w	8008348 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80081fc:	2300      	movs	r3, #0
 80081fe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8008200:	4b2a      	ldr	r3, [pc, #168]	; (80082ac <HAL_RCC_OscConfig+0x504>)
 8008202:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008204:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008208:	2b00      	cmp	r3, #0
 800820a:	d10d      	bne.n	8008228 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800820c:	4b27      	ldr	r3, [pc, #156]	; (80082ac <HAL_RCC_OscConfig+0x504>)
 800820e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008210:	4a26      	ldr	r2, [pc, #152]	; (80082ac <HAL_RCC_OscConfig+0x504>)
 8008212:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008216:	6593      	str	r3, [r2, #88]	; 0x58
 8008218:	4b24      	ldr	r3, [pc, #144]	; (80082ac <HAL_RCC_OscConfig+0x504>)
 800821a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800821c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008220:	60bb      	str	r3, [r7, #8]
 8008222:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008224:	2301      	movs	r3, #1
 8008226:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008228:	4b21      	ldr	r3, [pc, #132]	; (80082b0 <HAL_RCC_OscConfig+0x508>)
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008230:	2b00      	cmp	r3, #0
 8008232:	d118      	bne.n	8008266 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008234:	4b1e      	ldr	r3, [pc, #120]	; (80082b0 <HAL_RCC_OscConfig+0x508>)
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	4a1d      	ldr	r2, [pc, #116]	; (80082b0 <HAL_RCC_OscConfig+0x508>)
 800823a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800823e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008240:	f7fd fe00 	bl	8005e44 <HAL_GetTick>
 8008244:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008246:	e008      	b.n	800825a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008248:	f7fd fdfc 	bl	8005e44 <HAL_GetTick>
 800824c:	4602      	mov	r2, r0
 800824e:	693b      	ldr	r3, [r7, #16]
 8008250:	1ad3      	subs	r3, r2, r3
 8008252:	2b02      	cmp	r3, #2
 8008254:	d901      	bls.n	800825a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8008256:	2303      	movs	r3, #3
 8008258:	e1b8      	b.n	80085cc <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800825a:	4b15      	ldr	r3, [pc, #84]	; (80082b0 <HAL_RCC_OscConfig+0x508>)
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008262:	2b00      	cmp	r3, #0
 8008264:	d0f0      	beq.n	8008248 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	689b      	ldr	r3, [r3, #8]
 800826a:	2b01      	cmp	r3, #1
 800826c:	d108      	bne.n	8008280 <HAL_RCC_OscConfig+0x4d8>
 800826e:	4b0f      	ldr	r3, [pc, #60]	; (80082ac <HAL_RCC_OscConfig+0x504>)
 8008270:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008274:	4a0d      	ldr	r2, [pc, #52]	; (80082ac <HAL_RCC_OscConfig+0x504>)
 8008276:	f043 0301 	orr.w	r3, r3, #1
 800827a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800827e:	e029      	b.n	80082d4 <HAL_RCC_OscConfig+0x52c>
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	689b      	ldr	r3, [r3, #8]
 8008284:	2b05      	cmp	r3, #5
 8008286:	d115      	bne.n	80082b4 <HAL_RCC_OscConfig+0x50c>
 8008288:	4b08      	ldr	r3, [pc, #32]	; (80082ac <HAL_RCC_OscConfig+0x504>)
 800828a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800828e:	4a07      	ldr	r2, [pc, #28]	; (80082ac <HAL_RCC_OscConfig+0x504>)
 8008290:	f043 0304 	orr.w	r3, r3, #4
 8008294:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008298:	4b04      	ldr	r3, [pc, #16]	; (80082ac <HAL_RCC_OscConfig+0x504>)
 800829a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800829e:	4a03      	ldr	r2, [pc, #12]	; (80082ac <HAL_RCC_OscConfig+0x504>)
 80082a0:	f043 0301 	orr.w	r3, r3, #1
 80082a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80082a8:	e014      	b.n	80082d4 <HAL_RCC_OscConfig+0x52c>
 80082aa:	bf00      	nop
 80082ac:	40021000 	.word	0x40021000
 80082b0:	40007000 	.word	0x40007000
 80082b4:	4b9d      	ldr	r3, [pc, #628]	; (800852c <HAL_RCC_OscConfig+0x784>)
 80082b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082ba:	4a9c      	ldr	r2, [pc, #624]	; (800852c <HAL_RCC_OscConfig+0x784>)
 80082bc:	f023 0301 	bic.w	r3, r3, #1
 80082c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80082c4:	4b99      	ldr	r3, [pc, #612]	; (800852c <HAL_RCC_OscConfig+0x784>)
 80082c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082ca:	4a98      	ldr	r2, [pc, #608]	; (800852c <HAL_RCC_OscConfig+0x784>)
 80082cc:	f023 0304 	bic.w	r3, r3, #4
 80082d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	689b      	ldr	r3, [r3, #8]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d016      	beq.n	800830a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80082dc:	f7fd fdb2 	bl	8005e44 <HAL_GetTick>
 80082e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80082e2:	e00a      	b.n	80082fa <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80082e4:	f7fd fdae 	bl	8005e44 <HAL_GetTick>
 80082e8:	4602      	mov	r2, r0
 80082ea:	693b      	ldr	r3, [r7, #16]
 80082ec:	1ad3      	subs	r3, r2, r3
 80082ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80082f2:	4293      	cmp	r3, r2
 80082f4:	d901      	bls.n	80082fa <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80082f6:	2303      	movs	r3, #3
 80082f8:	e168      	b.n	80085cc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80082fa:	4b8c      	ldr	r3, [pc, #560]	; (800852c <HAL_RCC_OscConfig+0x784>)
 80082fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008300:	f003 0302 	and.w	r3, r3, #2
 8008304:	2b00      	cmp	r3, #0
 8008306:	d0ed      	beq.n	80082e4 <HAL_RCC_OscConfig+0x53c>
 8008308:	e015      	b.n	8008336 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800830a:	f7fd fd9b 	bl	8005e44 <HAL_GetTick>
 800830e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008310:	e00a      	b.n	8008328 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008312:	f7fd fd97 	bl	8005e44 <HAL_GetTick>
 8008316:	4602      	mov	r2, r0
 8008318:	693b      	ldr	r3, [r7, #16]
 800831a:	1ad3      	subs	r3, r2, r3
 800831c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008320:	4293      	cmp	r3, r2
 8008322:	d901      	bls.n	8008328 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8008324:	2303      	movs	r3, #3
 8008326:	e151      	b.n	80085cc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008328:	4b80      	ldr	r3, [pc, #512]	; (800852c <HAL_RCC_OscConfig+0x784>)
 800832a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800832e:	f003 0302 	and.w	r3, r3, #2
 8008332:	2b00      	cmp	r3, #0
 8008334:	d1ed      	bne.n	8008312 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008336:	7ffb      	ldrb	r3, [r7, #31]
 8008338:	2b01      	cmp	r3, #1
 800833a:	d105      	bne.n	8008348 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800833c:	4b7b      	ldr	r3, [pc, #492]	; (800852c <HAL_RCC_OscConfig+0x784>)
 800833e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008340:	4a7a      	ldr	r2, [pc, #488]	; (800852c <HAL_RCC_OscConfig+0x784>)
 8008342:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008346:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	f003 0320 	and.w	r3, r3, #32
 8008350:	2b00      	cmp	r3, #0
 8008352:	d03c      	beq.n	80083ce <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008358:	2b00      	cmp	r3, #0
 800835a:	d01c      	beq.n	8008396 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800835c:	4b73      	ldr	r3, [pc, #460]	; (800852c <HAL_RCC_OscConfig+0x784>)
 800835e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008362:	4a72      	ldr	r2, [pc, #456]	; (800852c <HAL_RCC_OscConfig+0x784>)
 8008364:	f043 0301 	orr.w	r3, r3, #1
 8008368:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800836c:	f7fd fd6a 	bl	8005e44 <HAL_GetTick>
 8008370:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008372:	e008      	b.n	8008386 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008374:	f7fd fd66 	bl	8005e44 <HAL_GetTick>
 8008378:	4602      	mov	r2, r0
 800837a:	693b      	ldr	r3, [r7, #16]
 800837c:	1ad3      	subs	r3, r2, r3
 800837e:	2b02      	cmp	r3, #2
 8008380:	d901      	bls.n	8008386 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8008382:	2303      	movs	r3, #3
 8008384:	e122      	b.n	80085cc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008386:	4b69      	ldr	r3, [pc, #420]	; (800852c <HAL_RCC_OscConfig+0x784>)
 8008388:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800838c:	f003 0302 	and.w	r3, r3, #2
 8008390:	2b00      	cmp	r3, #0
 8008392:	d0ef      	beq.n	8008374 <HAL_RCC_OscConfig+0x5cc>
 8008394:	e01b      	b.n	80083ce <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008396:	4b65      	ldr	r3, [pc, #404]	; (800852c <HAL_RCC_OscConfig+0x784>)
 8008398:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800839c:	4a63      	ldr	r2, [pc, #396]	; (800852c <HAL_RCC_OscConfig+0x784>)
 800839e:	f023 0301 	bic.w	r3, r3, #1
 80083a2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80083a6:	f7fd fd4d 	bl	8005e44 <HAL_GetTick>
 80083aa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80083ac:	e008      	b.n	80083c0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80083ae:	f7fd fd49 	bl	8005e44 <HAL_GetTick>
 80083b2:	4602      	mov	r2, r0
 80083b4:	693b      	ldr	r3, [r7, #16]
 80083b6:	1ad3      	subs	r3, r2, r3
 80083b8:	2b02      	cmp	r3, #2
 80083ba:	d901      	bls.n	80083c0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80083bc:	2303      	movs	r3, #3
 80083be:	e105      	b.n	80085cc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80083c0:	4b5a      	ldr	r3, [pc, #360]	; (800852c <HAL_RCC_OscConfig+0x784>)
 80083c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80083c6:	f003 0302 	and.w	r3, r3, #2
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d1ef      	bne.n	80083ae <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	f000 80f9 	beq.w	80085ca <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083dc:	2b02      	cmp	r3, #2
 80083de:	f040 80cf 	bne.w	8008580 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80083e2:	4b52      	ldr	r3, [pc, #328]	; (800852c <HAL_RCC_OscConfig+0x784>)
 80083e4:	68db      	ldr	r3, [r3, #12]
 80083e6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80083e8:	697b      	ldr	r3, [r7, #20]
 80083ea:	f003 0203 	and.w	r2, r3, #3
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083f2:	429a      	cmp	r2, r3
 80083f4:	d12c      	bne.n	8008450 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80083f6:	697b      	ldr	r3, [r7, #20]
 80083f8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008400:	3b01      	subs	r3, #1
 8008402:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8008404:	429a      	cmp	r2, r3
 8008406:	d123      	bne.n	8008450 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008408:	697b      	ldr	r3, [r7, #20]
 800840a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008412:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008414:	429a      	cmp	r2, r3
 8008416:	d11b      	bne.n	8008450 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008418:	697b      	ldr	r3, [r7, #20]
 800841a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008422:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008424:	429a      	cmp	r2, r3
 8008426:	d113      	bne.n	8008450 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008428:	697b      	ldr	r3, [r7, #20]
 800842a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008432:	085b      	lsrs	r3, r3, #1
 8008434:	3b01      	subs	r3, #1
 8008436:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008438:	429a      	cmp	r2, r3
 800843a:	d109      	bne.n	8008450 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800843c:	697b      	ldr	r3, [r7, #20]
 800843e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008446:	085b      	lsrs	r3, r3, #1
 8008448:	3b01      	subs	r3, #1
 800844a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800844c:	429a      	cmp	r2, r3
 800844e:	d071      	beq.n	8008534 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8008450:	69bb      	ldr	r3, [r7, #24]
 8008452:	2b0c      	cmp	r3, #12
 8008454:	d068      	beq.n	8008528 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8008456:	4b35      	ldr	r3, [pc, #212]	; (800852c <HAL_RCC_OscConfig+0x784>)
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800845e:	2b00      	cmp	r3, #0
 8008460:	d105      	bne.n	800846e <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8008462:	4b32      	ldr	r3, [pc, #200]	; (800852c <HAL_RCC_OscConfig+0x784>)
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800846a:	2b00      	cmp	r3, #0
 800846c:	d001      	beq.n	8008472 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800846e:	2301      	movs	r3, #1
 8008470:	e0ac      	b.n	80085cc <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8008472:	4b2e      	ldr	r3, [pc, #184]	; (800852c <HAL_RCC_OscConfig+0x784>)
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	4a2d      	ldr	r2, [pc, #180]	; (800852c <HAL_RCC_OscConfig+0x784>)
 8008478:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800847c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800847e:	f7fd fce1 	bl	8005e44 <HAL_GetTick>
 8008482:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008484:	e008      	b.n	8008498 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008486:	f7fd fcdd 	bl	8005e44 <HAL_GetTick>
 800848a:	4602      	mov	r2, r0
 800848c:	693b      	ldr	r3, [r7, #16]
 800848e:	1ad3      	subs	r3, r2, r3
 8008490:	2b02      	cmp	r3, #2
 8008492:	d901      	bls.n	8008498 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8008494:	2303      	movs	r3, #3
 8008496:	e099      	b.n	80085cc <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008498:	4b24      	ldr	r3, [pc, #144]	; (800852c <HAL_RCC_OscConfig+0x784>)
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d1f0      	bne.n	8008486 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80084a4:	4b21      	ldr	r3, [pc, #132]	; (800852c <HAL_RCC_OscConfig+0x784>)
 80084a6:	68da      	ldr	r2, [r3, #12]
 80084a8:	4b21      	ldr	r3, [pc, #132]	; (8008530 <HAL_RCC_OscConfig+0x788>)
 80084aa:	4013      	ands	r3, r2
 80084ac:	687a      	ldr	r2, [r7, #4]
 80084ae:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80084b0:	687a      	ldr	r2, [r7, #4]
 80084b2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80084b4:	3a01      	subs	r2, #1
 80084b6:	0112      	lsls	r2, r2, #4
 80084b8:	4311      	orrs	r1, r2
 80084ba:	687a      	ldr	r2, [r7, #4]
 80084bc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80084be:	0212      	lsls	r2, r2, #8
 80084c0:	4311      	orrs	r1, r2
 80084c2:	687a      	ldr	r2, [r7, #4]
 80084c4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80084c6:	0852      	lsrs	r2, r2, #1
 80084c8:	3a01      	subs	r2, #1
 80084ca:	0552      	lsls	r2, r2, #21
 80084cc:	4311      	orrs	r1, r2
 80084ce:	687a      	ldr	r2, [r7, #4]
 80084d0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80084d2:	0852      	lsrs	r2, r2, #1
 80084d4:	3a01      	subs	r2, #1
 80084d6:	0652      	lsls	r2, r2, #25
 80084d8:	4311      	orrs	r1, r2
 80084da:	687a      	ldr	r2, [r7, #4]
 80084dc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80084de:	06d2      	lsls	r2, r2, #27
 80084e0:	430a      	orrs	r2, r1
 80084e2:	4912      	ldr	r1, [pc, #72]	; (800852c <HAL_RCC_OscConfig+0x784>)
 80084e4:	4313      	orrs	r3, r2
 80084e6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80084e8:	4b10      	ldr	r3, [pc, #64]	; (800852c <HAL_RCC_OscConfig+0x784>)
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	4a0f      	ldr	r2, [pc, #60]	; (800852c <HAL_RCC_OscConfig+0x784>)
 80084ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80084f2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80084f4:	4b0d      	ldr	r3, [pc, #52]	; (800852c <HAL_RCC_OscConfig+0x784>)
 80084f6:	68db      	ldr	r3, [r3, #12]
 80084f8:	4a0c      	ldr	r2, [pc, #48]	; (800852c <HAL_RCC_OscConfig+0x784>)
 80084fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80084fe:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8008500:	f7fd fca0 	bl	8005e44 <HAL_GetTick>
 8008504:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008506:	e008      	b.n	800851a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008508:	f7fd fc9c 	bl	8005e44 <HAL_GetTick>
 800850c:	4602      	mov	r2, r0
 800850e:	693b      	ldr	r3, [r7, #16]
 8008510:	1ad3      	subs	r3, r2, r3
 8008512:	2b02      	cmp	r3, #2
 8008514:	d901      	bls.n	800851a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8008516:	2303      	movs	r3, #3
 8008518:	e058      	b.n	80085cc <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800851a:	4b04      	ldr	r3, [pc, #16]	; (800852c <HAL_RCC_OscConfig+0x784>)
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008522:	2b00      	cmp	r3, #0
 8008524:	d0f0      	beq.n	8008508 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8008526:	e050      	b.n	80085ca <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8008528:	2301      	movs	r3, #1
 800852a:	e04f      	b.n	80085cc <HAL_RCC_OscConfig+0x824>
 800852c:	40021000 	.word	0x40021000
 8008530:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008534:	4b27      	ldr	r3, [pc, #156]	; (80085d4 <HAL_RCC_OscConfig+0x82c>)
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800853c:	2b00      	cmp	r3, #0
 800853e:	d144      	bne.n	80085ca <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8008540:	4b24      	ldr	r3, [pc, #144]	; (80085d4 <HAL_RCC_OscConfig+0x82c>)
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	4a23      	ldr	r2, [pc, #140]	; (80085d4 <HAL_RCC_OscConfig+0x82c>)
 8008546:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800854a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800854c:	4b21      	ldr	r3, [pc, #132]	; (80085d4 <HAL_RCC_OscConfig+0x82c>)
 800854e:	68db      	ldr	r3, [r3, #12]
 8008550:	4a20      	ldr	r2, [pc, #128]	; (80085d4 <HAL_RCC_OscConfig+0x82c>)
 8008552:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008556:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008558:	f7fd fc74 	bl	8005e44 <HAL_GetTick>
 800855c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800855e:	e008      	b.n	8008572 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008560:	f7fd fc70 	bl	8005e44 <HAL_GetTick>
 8008564:	4602      	mov	r2, r0
 8008566:	693b      	ldr	r3, [r7, #16]
 8008568:	1ad3      	subs	r3, r2, r3
 800856a:	2b02      	cmp	r3, #2
 800856c:	d901      	bls.n	8008572 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 800856e:	2303      	movs	r3, #3
 8008570:	e02c      	b.n	80085cc <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008572:	4b18      	ldr	r3, [pc, #96]	; (80085d4 <HAL_RCC_OscConfig+0x82c>)
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800857a:	2b00      	cmp	r3, #0
 800857c:	d0f0      	beq.n	8008560 <HAL_RCC_OscConfig+0x7b8>
 800857e:	e024      	b.n	80085ca <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8008580:	69bb      	ldr	r3, [r7, #24]
 8008582:	2b0c      	cmp	r3, #12
 8008584:	d01f      	beq.n	80085c6 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008586:	4b13      	ldr	r3, [pc, #76]	; (80085d4 <HAL_RCC_OscConfig+0x82c>)
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	4a12      	ldr	r2, [pc, #72]	; (80085d4 <HAL_RCC_OscConfig+0x82c>)
 800858c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008590:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008592:	f7fd fc57 	bl	8005e44 <HAL_GetTick>
 8008596:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008598:	e008      	b.n	80085ac <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800859a:	f7fd fc53 	bl	8005e44 <HAL_GetTick>
 800859e:	4602      	mov	r2, r0
 80085a0:	693b      	ldr	r3, [r7, #16]
 80085a2:	1ad3      	subs	r3, r2, r3
 80085a4:	2b02      	cmp	r3, #2
 80085a6:	d901      	bls.n	80085ac <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80085a8:	2303      	movs	r3, #3
 80085aa:	e00f      	b.n	80085cc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80085ac:	4b09      	ldr	r3, [pc, #36]	; (80085d4 <HAL_RCC_OscConfig+0x82c>)
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d1f0      	bne.n	800859a <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80085b8:	4b06      	ldr	r3, [pc, #24]	; (80085d4 <HAL_RCC_OscConfig+0x82c>)
 80085ba:	68da      	ldr	r2, [r3, #12]
 80085bc:	4905      	ldr	r1, [pc, #20]	; (80085d4 <HAL_RCC_OscConfig+0x82c>)
 80085be:	4b06      	ldr	r3, [pc, #24]	; (80085d8 <HAL_RCC_OscConfig+0x830>)
 80085c0:	4013      	ands	r3, r2
 80085c2:	60cb      	str	r3, [r1, #12]
 80085c4:	e001      	b.n	80085ca <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80085c6:	2301      	movs	r3, #1
 80085c8:	e000      	b.n	80085cc <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80085ca:	2300      	movs	r3, #0
}
 80085cc:	4618      	mov	r0, r3
 80085ce:	3720      	adds	r7, #32
 80085d0:	46bd      	mov	sp, r7
 80085d2:	bd80      	pop	{r7, pc}
 80085d4:	40021000 	.word	0x40021000
 80085d8:	feeefffc 	.word	0xfeeefffc

080085dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80085dc:	b580      	push	{r7, lr}
 80085de:	b086      	sub	sp, #24
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
 80085e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80085e6:	2300      	movs	r3, #0
 80085e8:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d101      	bne.n	80085f4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80085f0:	2301      	movs	r3, #1
 80085f2:	e11d      	b.n	8008830 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80085f4:	4b90      	ldr	r3, [pc, #576]	; (8008838 <HAL_RCC_ClockConfig+0x25c>)
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	f003 030f 	and.w	r3, r3, #15
 80085fc:	683a      	ldr	r2, [r7, #0]
 80085fe:	429a      	cmp	r2, r3
 8008600:	d910      	bls.n	8008624 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008602:	4b8d      	ldr	r3, [pc, #564]	; (8008838 <HAL_RCC_ClockConfig+0x25c>)
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	f023 020f 	bic.w	r2, r3, #15
 800860a:	498b      	ldr	r1, [pc, #556]	; (8008838 <HAL_RCC_ClockConfig+0x25c>)
 800860c:	683b      	ldr	r3, [r7, #0]
 800860e:	4313      	orrs	r3, r2
 8008610:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008612:	4b89      	ldr	r3, [pc, #548]	; (8008838 <HAL_RCC_ClockConfig+0x25c>)
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	f003 030f 	and.w	r3, r3, #15
 800861a:	683a      	ldr	r2, [r7, #0]
 800861c:	429a      	cmp	r2, r3
 800861e:	d001      	beq.n	8008624 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8008620:	2301      	movs	r3, #1
 8008622:	e105      	b.n	8008830 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	f003 0302 	and.w	r3, r3, #2
 800862c:	2b00      	cmp	r3, #0
 800862e:	d010      	beq.n	8008652 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	689a      	ldr	r2, [r3, #8]
 8008634:	4b81      	ldr	r3, [pc, #516]	; (800883c <HAL_RCC_ClockConfig+0x260>)
 8008636:	689b      	ldr	r3, [r3, #8]
 8008638:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800863c:	429a      	cmp	r2, r3
 800863e:	d908      	bls.n	8008652 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008640:	4b7e      	ldr	r3, [pc, #504]	; (800883c <HAL_RCC_ClockConfig+0x260>)
 8008642:	689b      	ldr	r3, [r3, #8]
 8008644:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	689b      	ldr	r3, [r3, #8]
 800864c:	497b      	ldr	r1, [pc, #492]	; (800883c <HAL_RCC_ClockConfig+0x260>)
 800864e:	4313      	orrs	r3, r2
 8008650:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	f003 0301 	and.w	r3, r3, #1
 800865a:	2b00      	cmp	r3, #0
 800865c:	d079      	beq.n	8008752 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	685b      	ldr	r3, [r3, #4]
 8008662:	2b03      	cmp	r3, #3
 8008664:	d11e      	bne.n	80086a4 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008666:	4b75      	ldr	r3, [pc, #468]	; (800883c <HAL_RCC_ClockConfig+0x260>)
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800866e:	2b00      	cmp	r3, #0
 8008670:	d101      	bne.n	8008676 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8008672:	2301      	movs	r3, #1
 8008674:	e0dc      	b.n	8008830 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8008676:	f000 fa3b 	bl	8008af0 <RCC_GetSysClockFreqFromPLLSource>
 800867a:	4603      	mov	r3, r0
 800867c:	4a70      	ldr	r2, [pc, #448]	; (8008840 <HAL_RCC_ClockConfig+0x264>)
 800867e:	4293      	cmp	r3, r2
 8008680:	d946      	bls.n	8008710 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8008682:	4b6e      	ldr	r3, [pc, #440]	; (800883c <HAL_RCC_ClockConfig+0x260>)
 8008684:	689b      	ldr	r3, [r3, #8]
 8008686:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800868a:	2b00      	cmp	r3, #0
 800868c:	d140      	bne.n	8008710 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800868e:	4b6b      	ldr	r3, [pc, #428]	; (800883c <HAL_RCC_ClockConfig+0x260>)
 8008690:	689b      	ldr	r3, [r3, #8]
 8008692:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008696:	4a69      	ldr	r2, [pc, #420]	; (800883c <HAL_RCC_ClockConfig+0x260>)
 8008698:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800869c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800869e:	2380      	movs	r3, #128	; 0x80
 80086a0:	617b      	str	r3, [r7, #20]
 80086a2:	e035      	b.n	8008710 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	685b      	ldr	r3, [r3, #4]
 80086a8:	2b02      	cmp	r3, #2
 80086aa:	d107      	bne.n	80086bc <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80086ac:	4b63      	ldr	r3, [pc, #396]	; (800883c <HAL_RCC_ClockConfig+0x260>)
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d115      	bne.n	80086e4 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80086b8:	2301      	movs	r3, #1
 80086ba:	e0b9      	b.n	8008830 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	685b      	ldr	r3, [r3, #4]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d107      	bne.n	80086d4 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80086c4:	4b5d      	ldr	r3, [pc, #372]	; (800883c <HAL_RCC_ClockConfig+0x260>)
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	f003 0302 	and.w	r3, r3, #2
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d109      	bne.n	80086e4 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80086d0:	2301      	movs	r3, #1
 80086d2:	e0ad      	b.n	8008830 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80086d4:	4b59      	ldr	r3, [pc, #356]	; (800883c <HAL_RCC_ClockConfig+0x260>)
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d101      	bne.n	80086e4 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80086e0:	2301      	movs	r3, #1
 80086e2:	e0a5      	b.n	8008830 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80086e4:	f000 f8b4 	bl	8008850 <HAL_RCC_GetSysClockFreq>
 80086e8:	4603      	mov	r3, r0
 80086ea:	4a55      	ldr	r2, [pc, #340]	; (8008840 <HAL_RCC_ClockConfig+0x264>)
 80086ec:	4293      	cmp	r3, r2
 80086ee:	d90f      	bls.n	8008710 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80086f0:	4b52      	ldr	r3, [pc, #328]	; (800883c <HAL_RCC_ClockConfig+0x260>)
 80086f2:	689b      	ldr	r3, [r3, #8]
 80086f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d109      	bne.n	8008710 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80086fc:	4b4f      	ldr	r3, [pc, #316]	; (800883c <HAL_RCC_ClockConfig+0x260>)
 80086fe:	689b      	ldr	r3, [r3, #8]
 8008700:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008704:	4a4d      	ldr	r2, [pc, #308]	; (800883c <HAL_RCC_ClockConfig+0x260>)
 8008706:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800870a:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800870c:	2380      	movs	r3, #128	; 0x80
 800870e:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008710:	4b4a      	ldr	r3, [pc, #296]	; (800883c <HAL_RCC_ClockConfig+0x260>)
 8008712:	689b      	ldr	r3, [r3, #8]
 8008714:	f023 0203 	bic.w	r2, r3, #3
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	685b      	ldr	r3, [r3, #4]
 800871c:	4947      	ldr	r1, [pc, #284]	; (800883c <HAL_RCC_ClockConfig+0x260>)
 800871e:	4313      	orrs	r3, r2
 8008720:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008722:	f7fd fb8f 	bl	8005e44 <HAL_GetTick>
 8008726:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008728:	e00a      	b.n	8008740 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800872a:	f7fd fb8b 	bl	8005e44 <HAL_GetTick>
 800872e:	4602      	mov	r2, r0
 8008730:	693b      	ldr	r3, [r7, #16]
 8008732:	1ad3      	subs	r3, r2, r3
 8008734:	f241 3288 	movw	r2, #5000	; 0x1388
 8008738:	4293      	cmp	r3, r2
 800873a:	d901      	bls.n	8008740 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 800873c:	2303      	movs	r3, #3
 800873e:	e077      	b.n	8008830 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008740:	4b3e      	ldr	r3, [pc, #248]	; (800883c <HAL_RCC_ClockConfig+0x260>)
 8008742:	689b      	ldr	r3, [r3, #8]
 8008744:	f003 020c 	and.w	r2, r3, #12
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	685b      	ldr	r3, [r3, #4]
 800874c:	009b      	lsls	r3, r3, #2
 800874e:	429a      	cmp	r2, r3
 8008750:	d1eb      	bne.n	800872a <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8008752:	697b      	ldr	r3, [r7, #20]
 8008754:	2b80      	cmp	r3, #128	; 0x80
 8008756:	d105      	bne.n	8008764 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8008758:	4b38      	ldr	r3, [pc, #224]	; (800883c <HAL_RCC_ClockConfig+0x260>)
 800875a:	689b      	ldr	r3, [r3, #8]
 800875c:	4a37      	ldr	r2, [pc, #220]	; (800883c <HAL_RCC_ClockConfig+0x260>)
 800875e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008762:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	f003 0302 	and.w	r3, r3, #2
 800876c:	2b00      	cmp	r3, #0
 800876e:	d010      	beq.n	8008792 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	689a      	ldr	r2, [r3, #8]
 8008774:	4b31      	ldr	r3, [pc, #196]	; (800883c <HAL_RCC_ClockConfig+0x260>)
 8008776:	689b      	ldr	r3, [r3, #8]
 8008778:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800877c:	429a      	cmp	r2, r3
 800877e:	d208      	bcs.n	8008792 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008780:	4b2e      	ldr	r3, [pc, #184]	; (800883c <HAL_RCC_ClockConfig+0x260>)
 8008782:	689b      	ldr	r3, [r3, #8]
 8008784:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	689b      	ldr	r3, [r3, #8]
 800878c:	492b      	ldr	r1, [pc, #172]	; (800883c <HAL_RCC_ClockConfig+0x260>)
 800878e:	4313      	orrs	r3, r2
 8008790:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008792:	4b29      	ldr	r3, [pc, #164]	; (8008838 <HAL_RCC_ClockConfig+0x25c>)
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	f003 030f 	and.w	r3, r3, #15
 800879a:	683a      	ldr	r2, [r7, #0]
 800879c:	429a      	cmp	r2, r3
 800879e:	d210      	bcs.n	80087c2 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80087a0:	4b25      	ldr	r3, [pc, #148]	; (8008838 <HAL_RCC_ClockConfig+0x25c>)
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	f023 020f 	bic.w	r2, r3, #15
 80087a8:	4923      	ldr	r1, [pc, #140]	; (8008838 <HAL_RCC_ClockConfig+0x25c>)
 80087aa:	683b      	ldr	r3, [r7, #0]
 80087ac:	4313      	orrs	r3, r2
 80087ae:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80087b0:	4b21      	ldr	r3, [pc, #132]	; (8008838 <HAL_RCC_ClockConfig+0x25c>)
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	f003 030f 	and.w	r3, r3, #15
 80087b8:	683a      	ldr	r2, [r7, #0]
 80087ba:	429a      	cmp	r2, r3
 80087bc:	d001      	beq.n	80087c2 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 80087be:	2301      	movs	r3, #1
 80087c0:	e036      	b.n	8008830 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	f003 0304 	and.w	r3, r3, #4
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d008      	beq.n	80087e0 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80087ce:	4b1b      	ldr	r3, [pc, #108]	; (800883c <HAL_RCC_ClockConfig+0x260>)
 80087d0:	689b      	ldr	r3, [r3, #8]
 80087d2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	68db      	ldr	r3, [r3, #12]
 80087da:	4918      	ldr	r1, [pc, #96]	; (800883c <HAL_RCC_ClockConfig+0x260>)
 80087dc:	4313      	orrs	r3, r2
 80087de:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	f003 0308 	and.w	r3, r3, #8
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d009      	beq.n	8008800 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80087ec:	4b13      	ldr	r3, [pc, #76]	; (800883c <HAL_RCC_ClockConfig+0x260>)
 80087ee:	689b      	ldr	r3, [r3, #8]
 80087f0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	691b      	ldr	r3, [r3, #16]
 80087f8:	00db      	lsls	r3, r3, #3
 80087fa:	4910      	ldr	r1, [pc, #64]	; (800883c <HAL_RCC_ClockConfig+0x260>)
 80087fc:	4313      	orrs	r3, r2
 80087fe:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008800:	f000 f826 	bl	8008850 <HAL_RCC_GetSysClockFreq>
 8008804:	4602      	mov	r2, r0
 8008806:	4b0d      	ldr	r3, [pc, #52]	; (800883c <HAL_RCC_ClockConfig+0x260>)
 8008808:	689b      	ldr	r3, [r3, #8]
 800880a:	091b      	lsrs	r3, r3, #4
 800880c:	f003 030f 	and.w	r3, r3, #15
 8008810:	490c      	ldr	r1, [pc, #48]	; (8008844 <HAL_RCC_ClockConfig+0x268>)
 8008812:	5ccb      	ldrb	r3, [r1, r3]
 8008814:	f003 031f 	and.w	r3, r3, #31
 8008818:	fa22 f303 	lsr.w	r3, r2, r3
 800881c:	4a0a      	ldr	r2, [pc, #40]	; (8008848 <HAL_RCC_ClockConfig+0x26c>)
 800881e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8008820:	4b0a      	ldr	r3, [pc, #40]	; (800884c <HAL_RCC_ClockConfig+0x270>)
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	4618      	mov	r0, r3
 8008826:	f7fc feb7 	bl	8005598 <HAL_InitTick>
 800882a:	4603      	mov	r3, r0
 800882c:	73fb      	strb	r3, [r7, #15]

  return status;
 800882e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008830:	4618      	mov	r0, r3
 8008832:	3718      	adds	r7, #24
 8008834:	46bd      	mov	sp, r7
 8008836:	bd80      	pop	{r7, pc}
 8008838:	40022000 	.word	0x40022000
 800883c:	40021000 	.word	0x40021000
 8008840:	04c4b400 	.word	0x04c4b400
 8008844:	080145cc 	.word	0x080145cc
 8008848:	2000003c 	.word	0x2000003c
 800884c:	20000040 	.word	0x20000040

08008850 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008850:	b480      	push	{r7}
 8008852:	b089      	sub	sp, #36	; 0x24
 8008854:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8008856:	2300      	movs	r3, #0
 8008858:	61fb      	str	r3, [r7, #28]
 800885a:	2300      	movs	r3, #0
 800885c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800885e:	4b3e      	ldr	r3, [pc, #248]	; (8008958 <HAL_RCC_GetSysClockFreq+0x108>)
 8008860:	689b      	ldr	r3, [r3, #8]
 8008862:	f003 030c 	and.w	r3, r3, #12
 8008866:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008868:	4b3b      	ldr	r3, [pc, #236]	; (8008958 <HAL_RCC_GetSysClockFreq+0x108>)
 800886a:	68db      	ldr	r3, [r3, #12]
 800886c:	f003 0303 	and.w	r3, r3, #3
 8008870:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8008872:	693b      	ldr	r3, [r7, #16]
 8008874:	2b00      	cmp	r3, #0
 8008876:	d005      	beq.n	8008884 <HAL_RCC_GetSysClockFreq+0x34>
 8008878:	693b      	ldr	r3, [r7, #16]
 800887a:	2b0c      	cmp	r3, #12
 800887c:	d121      	bne.n	80088c2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	2b01      	cmp	r3, #1
 8008882:	d11e      	bne.n	80088c2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8008884:	4b34      	ldr	r3, [pc, #208]	; (8008958 <HAL_RCC_GetSysClockFreq+0x108>)
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	f003 0308 	and.w	r3, r3, #8
 800888c:	2b00      	cmp	r3, #0
 800888e:	d107      	bne.n	80088a0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8008890:	4b31      	ldr	r3, [pc, #196]	; (8008958 <HAL_RCC_GetSysClockFreq+0x108>)
 8008892:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008896:	0a1b      	lsrs	r3, r3, #8
 8008898:	f003 030f 	and.w	r3, r3, #15
 800889c:	61fb      	str	r3, [r7, #28]
 800889e:	e005      	b.n	80088ac <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80088a0:	4b2d      	ldr	r3, [pc, #180]	; (8008958 <HAL_RCC_GetSysClockFreq+0x108>)
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	091b      	lsrs	r3, r3, #4
 80088a6:	f003 030f 	and.w	r3, r3, #15
 80088aa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80088ac:	4a2b      	ldr	r2, [pc, #172]	; (800895c <HAL_RCC_GetSysClockFreq+0x10c>)
 80088ae:	69fb      	ldr	r3, [r7, #28]
 80088b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80088b4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80088b6:	693b      	ldr	r3, [r7, #16]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d10d      	bne.n	80088d8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80088bc:	69fb      	ldr	r3, [r7, #28]
 80088be:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80088c0:	e00a      	b.n	80088d8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80088c2:	693b      	ldr	r3, [r7, #16]
 80088c4:	2b04      	cmp	r3, #4
 80088c6:	d102      	bne.n	80088ce <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80088c8:	4b25      	ldr	r3, [pc, #148]	; (8008960 <HAL_RCC_GetSysClockFreq+0x110>)
 80088ca:	61bb      	str	r3, [r7, #24]
 80088cc:	e004      	b.n	80088d8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80088ce:	693b      	ldr	r3, [r7, #16]
 80088d0:	2b08      	cmp	r3, #8
 80088d2:	d101      	bne.n	80088d8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80088d4:	4b23      	ldr	r3, [pc, #140]	; (8008964 <HAL_RCC_GetSysClockFreq+0x114>)
 80088d6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80088d8:	693b      	ldr	r3, [r7, #16]
 80088da:	2b0c      	cmp	r3, #12
 80088dc:	d134      	bne.n	8008948 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80088de:	4b1e      	ldr	r3, [pc, #120]	; (8008958 <HAL_RCC_GetSysClockFreq+0x108>)
 80088e0:	68db      	ldr	r3, [r3, #12]
 80088e2:	f003 0303 	and.w	r3, r3, #3
 80088e6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80088e8:	68bb      	ldr	r3, [r7, #8]
 80088ea:	2b02      	cmp	r3, #2
 80088ec:	d003      	beq.n	80088f6 <HAL_RCC_GetSysClockFreq+0xa6>
 80088ee:	68bb      	ldr	r3, [r7, #8]
 80088f0:	2b03      	cmp	r3, #3
 80088f2:	d003      	beq.n	80088fc <HAL_RCC_GetSysClockFreq+0xac>
 80088f4:	e005      	b.n	8008902 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80088f6:	4b1a      	ldr	r3, [pc, #104]	; (8008960 <HAL_RCC_GetSysClockFreq+0x110>)
 80088f8:	617b      	str	r3, [r7, #20]
      break;
 80088fa:	e005      	b.n	8008908 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80088fc:	4b19      	ldr	r3, [pc, #100]	; (8008964 <HAL_RCC_GetSysClockFreq+0x114>)
 80088fe:	617b      	str	r3, [r7, #20]
      break;
 8008900:	e002      	b.n	8008908 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8008902:	69fb      	ldr	r3, [r7, #28]
 8008904:	617b      	str	r3, [r7, #20]
      break;
 8008906:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008908:	4b13      	ldr	r3, [pc, #76]	; (8008958 <HAL_RCC_GetSysClockFreq+0x108>)
 800890a:	68db      	ldr	r3, [r3, #12]
 800890c:	091b      	lsrs	r3, r3, #4
 800890e:	f003 030f 	and.w	r3, r3, #15
 8008912:	3301      	adds	r3, #1
 8008914:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8008916:	4b10      	ldr	r3, [pc, #64]	; (8008958 <HAL_RCC_GetSysClockFreq+0x108>)
 8008918:	68db      	ldr	r3, [r3, #12]
 800891a:	0a1b      	lsrs	r3, r3, #8
 800891c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008920:	697a      	ldr	r2, [r7, #20]
 8008922:	fb03 f202 	mul.w	r2, r3, r2
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	fbb2 f3f3 	udiv	r3, r2, r3
 800892c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800892e:	4b0a      	ldr	r3, [pc, #40]	; (8008958 <HAL_RCC_GetSysClockFreq+0x108>)
 8008930:	68db      	ldr	r3, [r3, #12]
 8008932:	0e5b      	lsrs	r3, r3, #25
 8008934:	f003 0303 	and.w	r3, r3, #3
 8008938:	3301      	adds	r3, #1
 800893a:	005b      	lsls	r3, r3, #1
 800893c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800893e:	697a      	ldr	r2, [r7, #20]
 8008940:	683b      	ldr	r3, [r7, #0]
 8008942:	fbb2 f3f3 	udiv	r3, r2, r3
 8008946:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8008948:	69bb      	ldr	r3, [r7, #24]
}
 800894a:	4618      	mov	r0, r3
 800894c:	3724      	adds	r7, #36	; 0x24
 800894e:	46bd      	mov	sp, r7
 8008950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008954:	4770      	bx	lr
 8008956:	bf00      	nop
 8008958:	40021000 	.word	0x40021000
 800895c:	080145e4 	.word	0x080145e4
 8008960:	00f42400 	.word	0x00f42400
 8008964:	007a1200 	.word	0x007a1200

08008968 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008968:	b480      	push	{r7}
 800896a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800896c:	4b03      	ldr	r3, [pc, #12]	; (800897c <HAL_RCC_GetHCLKFreq+0x14>)
 800896e:	681b      	ldr	r3, [r3, #0]
}
 8008970:	4618      	mov	r0, r3
 8008972:	46bd      	mov	sp, r7
 8008974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008978:	4770      	bx	lr
 800897a:	bf00      	nop
 800897c:	2000003c 	.word	0x2000003c

08008980 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008980:	b580      	push	{r7, lr}
 8008982:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8008984:	f7ff fff0 	bl	8008968 <HAL_RCC_GetHCLKFreq>
 8008988:	4602      	mov	r2, r0
 800898a:	4b06      	ldr	r3, [pc, #24]	; (80089a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800898c:	689b      	ldr	r3, [r3, #8]
 800898e:	0a1b      	lsrs	r3, r3, #8
 8008990:	f003 0307 	and.w	r3, r3, #7
 8008994:	4904      	ldr	r1, [pc, #16]	; (80089a8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008996:	5ccb      	ldrb	r3, [r1, r3]
 8008998:	f003 031f 	and.w	r3, r3, #31
 800899c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80089a0:	4618      	mov	r0, r3
 80089a2:	bd80      	pop	{r7, pc}
 80089a4:	40021000 	.word	0x40021000
 80089a8:	080145dc 	.word	0x080145dc

080089ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80089ac:	b580      	push	{r7, lr}
 80089ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80089b0:	f7ff ffda 	bl	8008968 <HAL_RCC_GetHCLKFreq>
 80089b4:	4602      	mov	r2, r0
 80089b6:	4b06      	ldr	r3, [pc, #24]	; (80089d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80089b8:	689b      	ldr	r3, [r3, #8]
 80089ba:	0adb      	lsrs	r3, r3, #11
 80089bc:	f003 0307 	and.w	r3, r3, #7
 80089c0:	4904      	ldr	r1, [pc, #16]	; (80089d4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80089c2:	5ccb      	ldrb	r3, [r1, r3]
 80089c4:	f003 031f 	and.w	r3, r3, #31
 80089c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80089cc:	4618      	mov	r0, r3
 80089ce:	bd80      	pop	{r7, pc}
 80089d0:	40021000 	.word	0x40021000
 80089d4:	080145dc 	.word	0x080145dc

080089d8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80089d8:	b480      	push	{r7}
 80089da:	b083      	sub	sp, #12
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
 80089e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	220f      	movs	r2, #15
 80089e6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80089e8:	4b12      	ldr	r3, [pc, #72]	; (8008a34 <HAL_RCC_GetClockConfig+0x5c>)
 80089ea:	689b      	ldr	r3, [r3, #8]
 80089ec:	f003 0203 	and.w	r2, r3, #3
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80089f4:	4b0f      	ldr	r3, [pc, #60]	; (8008a34 <HAL_RCC_GetClockConfig+0x5c>)
 80089f6:	689b      	ldr	r3, [r3, #8]
 80089f8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8008a00:	4b0c      	ldr	r3, [pc, #48]	; (8008a34 <HAL_RCC_GetClockConfig+0x5c>)
 8008a02:	689b      	ldr	r3, [r3, #8]
 8008a04:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8008a0c:	4b09      	ldr	r3, [pc, #36]	; (8008a34 <HAL_RCC_GetClockConfig+0x5c>)
 8008a0e:	689b      	ldr	r3, [r3, #8]
 8008a10:	08db      	lsrs	r3, r3, #3
 8008a12:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8008a1a:	4b07      	ldr	r3, [pc, #28]	; (8008a38 <HAL_RCC_GetClockConfig+0x60>)
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	f003 020f 	and.w	r2, r3, #15
 8008a22:	683b      	ldr	r3, [r7, #0]
 8008a24:	601a      	str	r2, [r3, #0]
}
 8008a26:	bf00      	nop
 8008a28:	370c      	adds	r7, #12
 8008a2a:	46bd      	mov	sp, r7
 8008a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a30:	4770      	bx	lr
 8008a32:	bf00      	nop
 8008a34:	40021000 	.word	0x40021000
 8008a38:	40022000 	.word	0x40022000

08008a3c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8008a3c:	b580      	push	{r7, lr}
 8008a3e:	b086      	sub	sp, #24
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8008a44:	2300      	movs	r3, #0
 8008a46:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8008a48:	4b27      	ldr	r3, [pc, #156]	; (8008ae8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8008a4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d003      	beq.n	8008a5c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8008a54:	f7ff f8e4 	bl	8007c20 <HAL_PWREx_GetVoltageRange>
 8008a58:	6178      	str	r0, [r7, #20]
 8008a5a:	e014      	b.n	8008a86 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8008a5c:	4b22      	ldr	r3, [pc, #136]	; (8008ae8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8008a5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a60:	4a21      	ldr	r2, [pc, #132]	; (8008ae8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8008a62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008a66:	6593      	str	r3, [r2, #88]	; 0x58
 8008a68:	4b1f      	ldr	r3, [pc, #124]	; (8008ae8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8008a6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008a70:	60fb      	str	r3, [r7, #12]
 8008a72:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8008a74:	f7ff f8d4 	bl	8007c20 <HAL_PWREx_GetVoltageRange>
 8008a78:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8008a7a:	4b1b      	ldr	r3, [pc, #108]	; (8008ae8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8008a7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a7e:	4a1a      	ldr	r2, [pc, #104]	; (8008ae8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8008a80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008a84:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008a86:	697b      	ldr	r3, [r7, #20]
 8008a88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008a8c:	d10b      	bne.n	8008aa6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	2b80      	cmp	r3, #128	; 0x80
 8008a92:	d913      	bls.n	8008abc <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	2ba0      	cmp	r3, #160	; 0xa0
 8008a98:	d902      	bls.n	8008aa0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8008a9a:	2302      	movs	r3, #2
 8008a9c:	613b      	str	r3, [r7, #16]
 8008a9e:	e00d      	b.n	8008abc <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8008aa0:	2301      	movs	r3, #1
 8008aa2:	613b      	str	r3, [r7, #16]
 8008aa4:	e00a      	b.n	8008abc <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	2b7f      	cmp	r3, #127	; 0x7f
 8008aaa:	d902      	bls.n	8008ab2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8008aac:	2302      	movs	r3, #2
 8008aae:	613b      	str	r3, [r7, #16]
 8008ab0:	e004      	b.n	8008abc <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	2b70      	cmp	r3, #112	; 0x70
 8008ab6:	d101      	bne.n	8008abc <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8008ab8:	2301      	movs	r3, #1
 8008aba:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8008abc:	4b0b      	ldr	r3, [pc, #44]	; (8008aec <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	f023 020f 	bic.w	r2, r3, #15
 8008ac4:	4909      	ldr	r1, [pc, #36]	; (8008aec <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8008ac6:	693b      	ldr	r3, [r7, #16]
 8008ac8:	4313      	orrs	r3, r2
 8008aca:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8008acc:	4b07      	ldr	r3, [pc, #28]	; (8008aec <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	f003 030f 	and.w	r3, r3, #15
 8008ad4:	693a      	ldr	r2, [r7, #16]
 8008ad6:	429a      	cmp	r2, r3
 8008ad8:	d001      	beq.n	8008ade <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8008ada:	2301      	movs	r3, #1
 8008adc:	e000      	b.n	8008ae0 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8008ade:	2300      	movs	r3, #0
}
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	3718      	adds	r7, #24
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	bd80      	pop	{r7, pc}
 8008ae8:	40021000 	.word	0x40021000
 8008aec:	40022000 	.word	0x40022000

08008af0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8008af0:	b480      	push	{r7}
 8008af2:	b087      	sub	sp, #28
 8008af4:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008af6:	4b2d      	ldr	r3, [pc, #180]	; (8008bac <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8008af8:	68db      	ldr	r3, [r3, #12]
 8008afa:	f003 0303 	and.w	r3, r3, #3
 8008afe:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	2b03      	cmp	r3, #3
 8008b04:	d00b      	beq.n	8008b1e <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	2b03      	cmp	r3, #3
 8008b0a:	d825      	bhi.n	8008b58 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	2b01      	cmp	r3, #1
 8008b10:	d008      	beq.n	8008b24 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	2b02      	cmp	r3, #2
 8008b16:	d11f      	bne.n	8008b58 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8008b18:	4b25      	ldr	r3, [pc, #148]	; (8008bb0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8008b1a:	613b      	str	r3, [r7, #16]
    break;
 8008b1c:	e01f      	b.n	8008b5e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8008b1e:	4b25      	ldr	r3, [pc, #148]	; (8008bb4 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8008b20:	613b      	str	r3, [r7, #16]
    break;
 8008b22:	e01c      	b.n	8008b5e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8008b24:	4b21      	ldr	r3, [pc, #132]	; (8008bac <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	f003 0308 	and.w	r3, r3, #8
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d107      	bne.n	8008b40 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8008b30:	4b1e      	ldr	r3, [pc, #120]	; (8008bac <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8008b32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008b36:	0a1b      	lsrs	r3, r3, #8
 8008b38:	f003 030f 	and.w	r3, r3, #15
 8008b3c:	617b      	str	r3, [r7, #20]
 8008b3e:	e005      	b.n	8008b4c <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8008b40:	4b1a      	ldr	r3, [pc, #104]	; (8008bac <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	091b      	lsrs	r3, r3, #4
 8008b46:	f003 030f 	and.w	r3, r3, #15
 8008b4a:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8008b4c:	4a1a      	ldr	r2, [pc, #104]	; (8008bb8 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8008b4e:	697b      	ldr	r3, [r7, #20]
 8008b50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008b54:	613b      	str	r3, [r7, #16]
    break;
 8008b56:	e002      	b.n	8008b5e <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8008b58:	2300      	movs	r3, #0
 8008b5a:	613b      	str	r3, [r7, #16]
    break;
 8008b5c:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008b5e:	4b13      	ldr	r3, [pc, #76]	; (8008bac <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8008b60:	68db      	ldr	r3, [r3, #12]
 8008b62:	091b      	lsrs	r3, r3, #4
 8008b64:	f003 030f 	and.w	r3, r3, #15
 8008b68:	3301      	adds	r3, #1
 8008b6a:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8008b6c:	4b0f      	ldr	r3, [pc, #60]	; (8008bac <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8008b6e:	68db      	ldr	r3, [r3, #12]
 8008b70:	0a1b      	lsrs	r3, r3, #8
 8008b72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b76:	693a      	ldr	r2, [r7, #16]
 8008b78:	fb03 f202 	mul.w	r2, r3, r2
 8008b7c:	68bb      	ldr	r3, [r7, #8]
 8008b7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b82:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008b84:	4b09      	ldr	r3, [pc, #36]	; (8008bac <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8008b86:	68db      	ldr	r3, [r3, #12]
 8008b88:	0e5b      	lsrs	r3, r3, #25
 8008b8a:	f003 0303 	and.w	r3, r3, #3
 8008b8e:	3301      	adds	r3, #1
 8008b90:	005b      	lsls	r3, r3, #1
 8008b92:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8008b94:	693a      	ldr	r2, [r7, #16]
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b9c:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8008b9e:	683b      	ldr	r3, [r7, #0]
}
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	371c      	adds	r7, #28
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008baa:	4770      	bx	lr
 8008bac:	40021000 	.word	0x40021000
 8008bb0:	00f42400 	.word	0x00f42400
 8008bb4:	007a1200 	.word	0x007a1200
 8008bb8:	080145e4 	.word	0x080145e4

08008bbc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	b086      	sub	sp, #24
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008bc8:	2300      	movs	r3, #0
 8008bca:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d040      	beq.n	8008c5a <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008bdc:	2b80      	cmp	r3, #128	; 0x80
 8008bde:	d02a      	beq.n	8008c36 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8008be0:	2b80      	cmp	r3, #128	; 0x80
 8008be2:	d825      	bhi.n	8008c30 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8008be4:	2b60      	cmp	r3, #96	; 0x60
 8008be6:	d026      	beq.n	8008c36 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8008be8:	2b60      	cmp	r3, #96	; 0x60
 8008bea:	d821      	bhi.n	8008c30 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8008bec:	2b40      	cmp	r3, #64	; 0x40
 8008bee:	d006      	beq.n	8008bfe <HAL_RCCEx_PeriphCLKConfig+0x42>
 8008bf0:	2b40      	cmp	r3, #64	; 0x40
 8008bf2:	d81d      	bhi.n	8008c30 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d009      	beq.n	8008c0c <HAL_RCCEx_PeriphCLKConfig+0x50>
 8008bf8:	2b20      	cmp	r3, #32
 8008bfa:	d010      	beq.n	8008c1e <HAL_RCCEx_PeriphCLKConfig+0x62>
 8008bfc:	e018      	b.n	8008c30 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8008bfe:	4b89      	ldr	r3, [pc, #548]	; (8008e24 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008c00:	68db      	ldr	r3, [r3, #12]
 8008c02:	4a88      	ldr	r2, [pc, #544]	; (8008e24 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008c04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008c08:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8008c0a:	e015      	b.n	8008c38 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	3304      	adds	r3, #4
 8008c10:	2100      	movs	r1, #0
 8008c12:	4618      	mov	r0, r3
 8008c14:	f000 fb02 	bl	800921c <RCCEx_PLLSAI1_Config>
 8008c18:	4603      	mov	r3, r0
 8008c1a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8008c1c:	e00c      	b.n	8008c38 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	3320      	adds	r3, #32
 8008c22:	2100      	movs	r1, #0
 8008c24:	4618      	mov	r0, r3
 8008c26:	f000 fbed 	bl	8009404 <RCCEx_PLLSAI2_Config>
 8008c2a:	4603      	mov	r3, r0
 8008c2c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8008c2e:	e003      	b.n	8008c38 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008c30:	2301      	movs	r3, #1
 8008c32:	74fb      	strb	r3, [r7, #19]
      break;
 8008c34:	e000      	b.n	8008c38 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8008c36:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008c38:	7cfb      	ldrb	r3, [r7, #19]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d10b      	bne.n	8008c56 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008c3e:	4b79      	ldr	r3, [pc, #484]	; (8008e24 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008c40:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008c44:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c4c:	4975      	ldr	r1, [pc, #468]	; (8008e24 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008c4e:	4313      	orrs	r3, r2
 8008c50:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8008c54:	e001      	b.n	8008c5a <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c56:	7cfb      	ldrb	r3, [r7, #19]
 8008c58:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d047      	beq.n	8008cf6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008c6e:	d030      	beq.n	8008cd2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8008c70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008c74:	d82a      	bhi.n	8008ccc <HAL_RCCEx_PeriphCLKConfig+0x110>
 8008c76:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008c7a:	d02a      	beq.n	8008cd2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8008c7c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008c80:	d824      	bhi.n	8008ccc <HAL_RCCEx_PeriphCLKConfig+0x110>
 8008c82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008c86:	d008      	beq.n	8008c9a <HAL_RCCEx_PeriphCLKConfig+0xde>
 8008c88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008c8c:	d81e      	bhi.n	8008ccc <HAL_RCCEx_PeriphCLKConfig+0x110>
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d00a      	beq.n	8008ca8 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8008c92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c96:	d010      	beq.n	8008cba <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8008c98:	e018      	b.n	8008ccc <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8008c9a:	4b62      	ldr	r3, [pc, #392]	; (8008e24 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008c9c:	68db      	ldr	r3, [r3, #12]
 8008c9e:	4a61      	ldr	r2, [pc, #388]	; (8008e24 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008ca0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008ca4:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8008ca6:	e015      	b.n	8008cd4 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	3304      	adds	r3, #4
 8008cac:	2100      	movs	r1, #0
 8008cae:	4618      	mov	r0, r3
 8008cb0:	f000 fab4 	bl	800921c <RCCEx_PLLSAI1_Config>
 8008cb4:	4603      	mov	r3, r0
 8008cb6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8008cb8:	e00c      	b.n	8008cd4 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	3320      	adds	r3, #32
 8008cbe:	2100      	movs	r1, #0
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	f000 fb9f 	bl	8009404 <RCCEx_PLLSAI2_Config>
 8008cc6:	4603      	mov	r3, r0
 8008cc8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8008cca:	e003      	b.n	8008cd4 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008ccc:	2301      	movs	r3, #1
 8008cce:	74fb      	strb	r3, [r7, #19]
      break;
 8008cd0:	e000      	b.n	8008cd4 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8008cd2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008cd4:	7cfb      	ldrb	r3, [r7, #19]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d10b      	bne.n	8008cf2 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8008cda:	4b52      	ldr	r3, [pc, #328]	; (8008e24 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008cdc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008ce0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ce8:	494e      	ldr	r1, [pc, #312]	; (8008e24 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008cea:	4313      	orrs	r3, r2
 8008cec:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8008cf0:	e001      	b.n	8008cf6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008cf2:	7cfb      	ldrb	r3, [r7, #19]
 8008cf4:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	f000 809f 	beq.w	8008e42 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008d04:	2300      	movs	r3, #0
 8008d06:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8008d08:	4b46      	ldr	r3, [pc, #280]	; (8008e24 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008d0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d101      	bne.n	8008d18 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8008d14:	2301      	movs	r3, #1
 8008d16:	e000      	b.n	8008d1a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8008d18:	2300      	movs	r3, #0
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d00d      	beq.n	8008d3a <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008d1e:	4b41      	ldr	r3, [pc, #260]	; (8008e24 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008d20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d22:	4a40      	ldr	r2, [pc, #256]	; (8008e24 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008d24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008d28:	6593      	str	r3, [r2, #88]	; 0x58
 8008d2a:	4b3e      	ldr	r3, [pc, #248]	; (8008e24 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008d2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008d32:	60bb      	str	r3, [r7, #8]
 8008d34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008d36:	2301      	movs	r3, #1
 8008d38:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008d3a:	4b3b      	ldr	r3, [pc, #236]	; (8008e28 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	4a3a      	ldr	r2, [pc, #232]	; (8008e28 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8008d40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008d44:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008d46:	f7fd f87d 	bl	8005e44 <HAL_GetTick>
 8008d4a:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8008d4c:	e009      	b.n	8008d62 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008d4e:	f7fd f879 	bl	8005e44 <HAL_GetTick>
 8008d52:	4602      	mov	r2, r0
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	1ad3      	subs	r3, r2, r3
 8008d58:	2b02      	cmp	r3, #2
 8008d5a:	d902      	bls.n	8008d62 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8008d5c:	2303      	movs	r3, #3
 8008d5e:	74fb      	strb	r3, [r7, #19]
        break;
 8008d60:	e005      	b.n	8008d6e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8008d62:	4b31      	ldr	r3, [pc, #196]	; (8008e28 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d0ef      	beq.n	8008d4e <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8008d6e:	7cfb      	ldrb	r3, [r7, #19]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d15b      	bne.n	8008e2c <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008d74:	4b2b      	ldr	r3, [pc, #172]	; (8008e24 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008d76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008d7e:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008d80:	697b      	ldr	r3, [r7, #20]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d01f      	beq.n	8008dc6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d8c:	697a      	ldr	r2, [r7, #20]
 8008d8e:	429a      	cmp	r2, r3
 8008d90:	d019      	beq.n	8008dc6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008d92:	4b24      	ldr	r3, [pc, #144]	; (8008e24 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008d94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008d9c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008d9e:	4b21      	ldr	r3, [pc, #132]	; (8008e24 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008da0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008da4:	4a1f      	ldr	r2, [pc, #124]	; (8008e24 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008da6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008daa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008dae:	4b1d      	ldr	r3, [pc, #116]	; (8008e24 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008db0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008db4:	4a1b      	ldr	r2, [pc, #108]	; (8008e24 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008db6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008dba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008dbe:	4a19      	ldr	r2, [pc, #100]	; (8008e24 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008dc0:	697b      	ldr	r3, [r7, #20]
 8008dc2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008dc6:	697b      	ldr	r3, [r7, #20]
 8008dc8:	f003 0301 	and.w	r3, r3, #1
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d016      	beq.n	8008dfe <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008dd0:	f7fd f838 	bl	8005e44 <HAL_GetTick>
 8008dd4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008dd6:	e00b      	b.n	8008df0 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008dd8:	f7fd f834 	bl	8005e44 <HAL_GetTick>
 8008ddc:	4602      	mov	r2, r0
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	1ad3      	subs	r3, r2, r3
 8008de2:	f241 3288 	movw	r2, #5000	; 0x1388
 8008de6:	4293      	cmp	r3, r2
 8008de8:	d902      	bls.n	8008df0 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8008dea:	2303      	movs	r3, #3
 8008dec:	74fb      	strb	r3, [r7, #19]
            break;
 8008dee:	e006      	b.n	8008dfe <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008df0:	4b0c      	ldr	r3, [pc, #48]	; (8008e24 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008df2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008df6:	f003 0302 	and.w	r3, r3, #2
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d0ec      	beq.n	8008dd8 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8008dfe:	7cfb      	ldrb	r3, [r7, #19]
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d10c      	bne.n	8008e1e <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008e04:	4b07      	ldr	r3, [pc, #28]	; (8008e24 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008e06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e0a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e14:	4903      	ldr	r1, [pc, #12]	; (8008e24 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008e16:	4313      	orrs	r3, r2
 8008e18:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8008e1c:	e008      	b.n	8008e30 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008e1e:	7cfb      	ldrb	r3, [r7, #19]
 8008e20:	74bb      	strb	r3, [r7, #18]
 8008e22:	e005      	b.n	8008e30 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8008e24:	40021000 	.word	0x40021000
 8008e28:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e2c:	7cfb      	ldrb	r3, [r7, #19]
 8008e2e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008e30:	7c7b      	ldrb	r3, [r7, #17]
 8008e32:	2b01      	cmp	r3, #1
 8008e34:	d105      	bne.n	8008e42 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008e36:	4ba0      	ldr	r3, [pc, #640]	; (80090b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008e38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e3a:	4a9f      	ldr	r2, [pc, #636]	; (80090b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008e3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008e40:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	f003 0301 	and.w	r3, r3, #1
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d00a      	beq.n	8008e64 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008e4e:	4b9a      	ldr	r3, [pc, #616]	; (80090b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008e50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e54:	f023 0203 	bic.w	r2, r3, #3
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e5c:	4996      	ldr	r1, [pc, #600]	; (80090b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008e5e:	4313      	orrs	r3, r2
 8008e60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	f003 0302 	and.w	r3, r3, #2
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d00a      	beq.n	8008e86 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008e70:	4b91      	ldr	r3, [pc, #580]	; (80090b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008e72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e76:	f023 020c 	bic.w	r2, r3, #12
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e7e:	498e      	ldr	r1, [pc, #568]	; (80090b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008e80:	4313      	orrs	r3, r2
 8008e82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	f003 0304 	and.w	r3, r3, #4
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d00a      	beq.n	8008ea8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008e92:	4b89      	ldr	r3, [pc, #548]	; (80090b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008e94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e98:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ea0:	4985      	ldr	r1, [pc, #532]	; (80090b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008ea2:	4313      	orrs	r3, r2
 8008ea4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	f003 0308 	and.w	r3, r3, #8
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d00a      	beq.n	8008eca <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008eb4:	4b80      	ldr	r3, [pc, #512]	; (80090b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008eb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008eba:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008ec2:	497d      	ldr	r1, [pc, #500]	; (80090b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008ec4:	4313      	orrs	r3, r2
 8008ec6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	f003 0310 	and.w	r3, r3, #16
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d00a      	beq.n	8008eec <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008ed6:	4b78      	ldr	r3, [pc, #480]	; (80090b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008ed8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008edc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ee4:	4974      	ldr	r1, [pc, #464]	; (80090b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008ee6:	4313      	orrs	r3, r2
 8008ee8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	f003 0320 	and.w	r3, r3, #32
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d00a      	beq.n	8008f0e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008ef8:	4b6f      	ldr	r3, [pc, #444]	; (80090b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008efa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008efe:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f06:	496c      	ldr	r1, [pc, #432]	; (80090b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008f08:	4313      	orrs	r3, r2
 8008f0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d00a      	beq.n	8008f30 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008f1a:	4b67      	ldr	r3, [pc, #412]	; (80090b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008f1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f20:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008f28:	4963      	ldr	r1, [pc, #396]	; (80090b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008f2a:	4313      	orrs	r3, r2
 8008f2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d00a      	beq.n	8008f52 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008f3c:	4b5e      	ldr	r3, [pc, #376]	; (80090b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f42:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008f4a:	495b      	ldr	r1, [pc, #364]	; (80090b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008f4c:	4313      	orrs	r3, r2
 8008f4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d00a      	beq.n	8008f74 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008f5e:	4b56      	ldr	r3, [pc, #344]	; (80090b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008f60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f64:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f6c:	4952      	ldr	r1, [pc, #328]	; (80090b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008f6e:	4313      	orrs	r3, r2
 8008f70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d00a      	beq.n	8008f96 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008f80:	4b4d      	ldr	r3, [pc, #308]	; (80090b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008f82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f86:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f8e:	494a      	ldr	r1, [pc, #296]	; (80090b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008f90:	4313      	orrs	r3, r2
 8008f92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d00a      	beq.n	8008fb8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008fa2:	4b45      	ldr	r3, [pc, #276]	; (80090b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008fa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008fa8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008fb0:	4941      	ldr	r1, [pc, #260]	; (80090b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008fb2:	4313      	orrs	r3, r2
 8008fb4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d00a      	beq.n	8008fda <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008fc4:	4b3c      	ldr	r3, [pc, #240]	; (80090b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008fc6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008fca:	f023 0203 	bic.w	r2, r3, #3
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008fd2:	4939      	ldr	r1, [pc, #228]	; (80090b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008fd4:	4313      	orrs	r3, r2
 8008fd6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d028      	beq.n	8009038 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008fe6:	4b34      	ldr	r3, [pc, #208]	; (80090b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008fe8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008fec:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008ff4:	4930      	ldr	r1, [pc, #192]	; (80090b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008ff6:	4313      	orrs	r3, r2
 8008ff8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009000:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009004:	d106      	bne.n	8009014 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009006:	4b2c      	ldr	r3, [pc, #176]	; (80090b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009008:	68db      	ldr	r3, [r3, #12]
 800900a:	4a2b      	ldr	r2, [pc, #172]	; (80090b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800900c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009010:	60d3      	str	r3, [r2, #12]
 8009012:	e011      	b.n	8009038 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009018:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800901c:	d10c      	bne.n	8009038 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	3304      	adds	r3, #4
 8009022:	2101      	movs	r1, #1
 8009024:	4618      	mov	r0, r3
 8009026:	f000 f8f9 	bl	800921c <RCCEx_PLLSAI1_Config>
 800902a:	4603      	mov	r3, r0
 800902c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800902e:	7cfb      	ldrb	r3, [r7, #19]
 8009030:	2b00      	cmp	r3, #0
 8009032:	d001      	beq.n	8009038 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8009034:	7cfb      	ldrb	r3, [r7, #19]
 8009036:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009040:	2b00      	cmp	r3, #0
 8009042:	d04d      	beq.n	80090e0 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009048:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800904c:	d108      	bne.n	8009060 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800904e:	4b1a      	ldr	r3, [pc, #104]	; (80090b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009050:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009054:	4a18      	ldr	r2, [pc, #96]	; (80090b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009056:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800905a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800905e:	e012      	b.n	8009086 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8009060:	4b15      	ldr	r3, [pc, #84]	; (80090b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009062:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009066:	4a14      	ldr	r2, [pc, #80]	; (80090b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009068:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800906c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8009070:	4b11      	ldr	r3, [pc, #68]	; (80090b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009072:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009076:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800907e:	490e      	ldr	r1, [pc, #56]	; (80090b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009080:	4313      	orrs	r3, r2
 8009082:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800908a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800908e:	d106      	bne.n	800909e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009090:	4b09      	ldr	r3, [pc, #36]	; (80090b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009092:	68db      	ldr	r3, [r3, #12]
 8009094:	4a08      	ldr	r2, [pc, #32]	; (80090b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009096:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800909a:	60d3      	str	r3, [r2, #12]
 800909c:	e020      	b.n	80090e0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80090a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80090a6:	d109      	bne.n	80090bc <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80090a8:	4b03      	ldr	r3, [pc, #12]	; (80090b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80090aa:	68db      	ldr	r3, [r3, #12]
 80090ac:	4a02      	ldr	r2, [pc, #8]	; (80090b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80090ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80090b2:	60d3      	str	r3, [r2, #12]
 80090b4:	e014      	b.n	80090e0 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80090b6:	bf00      	nop
 80090b8:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80090c0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80090c4:	d10c      	bne.n	80090e0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	3304      	adds	r3, #4
 80090ca:	2101      	movs	r1, #1
 80090cc:	4618      	mov	r0, r3
 80090ce:	f000 f8a5 	bl	800921c <RCCEx_PLLSAI1_Config>
 80090d2:	4603      	mov	r3, r0
 80090d4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80090d6:	7cfb      	ldrb	r3, [r7, #19]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d001      	beq.n	80090e0 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 80090dc:	7cfb      	ldrb	r3, [r7, #19]
 80090de:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d028      	beq.n	800913e <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80090ec:	4b4a      	ldr	r3, [pc, #296]	; (8009218 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80090ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80090f2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80090fa:	4947      	ldr	r1, [pc, #284]	; (8009218 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80090fc:	4313      	orrs	r3, r2
 80090fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009106:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800910a:	d106      	bne.n	800911a <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800910c:	4b42      	ldr	r3, [pc, #264]	; (8009218 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800910e:	68db      	ldr	r3, [r3, #12]
 8009110:	4a41      	ldr	r2, [pc, #260]	; (8009218 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009112:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009116:	60d3      	str	r3, [r2, #12]
 8009118:	e011      	b.n	800913e <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800911e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009122:	d10c      	bne.n	800913e <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	3304      	adds	r3, #4
 8009128:	2101      	movs	r1, #1
 800912a:	4618      	mov	r0, r3
 800912c:	f000 f876 	bl	800921c <RCCEx_PLLSAI1_Config>
 8009130:	4603      	mov	r3, r0
 8009132:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8009134:	7cfb      	ldrb	r3, [r7, #19]
 8009136:	2b00      	cmp	r3, #0
 8009138:	d001      	beq.n	800913e <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800913a:	7cfb      	ldrb	r3, [r7, #19]
 800913c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009146:	2b00      	cmp	r3, #0
 8009148:	d01e      	beq.n	8009188 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800914a:	4b33      	ldr	r3, [pc, #204]	; (8009218 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800914c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009150:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800915a:	492f      	ldr	r1, [pc, #188]	; (8009218 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800915c:	4313      	orrs	r3, r2
 800915e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009168:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800916c:	d10c      	bne.n	8009188 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	3304      	adds	r3, #4
 8009172:	2102      	movs	r1, #2
 8009174:	4618      	mov	r0, r3
 8009176:	f000 f851 	bl	800921c <RCCEx_PLLSAI1_Config>
 800917a:	4603      	mov	r3, r0
 800917c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800917e:	7cfb      	ldrb	r3, [r7, #19]
 8009180:	2b00      	cmp	r3, #0
 8009182:	d001      	beq.n	8009188 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8009184:	7cfb      	ldrb	r3, [r7, #19]
 8009186:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009190:	2b00      	cmp	r3, #0
 8009192:	d00b      	beq.n	80091ac <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009194:	4b20      	ldr	r3, [pc, #128]	; (8009218 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009196:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800919a:	f023 0204 	bic.w	r2, r3, #4
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80091a4:	491c      	ldr	r1, [pc, #112]	; (8009218 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80091a6:	4313      	orrs	r3, r2
 80091a8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d00b      	beq.n	80091d0 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80091b8:	4b17      	ldr	r3, [pc, #92]	; (8009218 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80091ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80091be:	f023 0218 	bic.w	r2, r3, #24
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80091c8:	4913      	ldr	r1, [pc, #76]	; (8009218 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80091ca:	4313      	orrs	r3, r2
 80091cc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d017      	beq.n	800920c <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80091dc:	4b0e      	ldr	r3, [pc, #56]	; (8009218 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80091de:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80091e2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80091ec:	490a      	ldr	r1, [pc, #40]	; (8009218 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80091ee:	4313      	orrs	r3, r2
 80091f0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80091fa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80091fe:	d105      	bne.n	800920c <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009200:	4b05      	ldr	r3, [pc, #20]	; (8009218 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009202:	68db      	ldr	r3, [r3, #12]
 8009204:	4a04      	ldr	r2, [pc, #16]	; (8009218 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009206:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800920a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800920c:	7cbb      	ldrb	r3, [r7, #18]
}
 800920e:	4618      	mov	r0, r3
 8009210:	3718      	adds	r7, #24
 8009212:	46bd      	mov	sp, r7
 8009214:	bd80      	pop	{r7, pc}
 8009216:	bf00      	nop
 8009218:	40021000 	.word	0x40021000

0800921c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800921c:	b580      	push	{r7, lr}
 800921e:	b084      	sub	sp, #16
 8009220:	af00      	add	r7, sp, #0
 8009222:	6078      	str	r0, [r7, #4]
 8009224:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009226:	2300      	movs	r3, #0
 8009228:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800922a:	4b72      	ldr	r3, [pc, #456]	; (80093f4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800922c:	68db      	ldr	r3, [r3, #12]
 800922e:	f003 0303 	and.w	r3, r3, #3
 8009232:	2b00      	cmp	r3, #0
 8009234:	d00e      	beq.n	8009254 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8009236:	4b6f      	ldr	r3, [pc, #444]	; (80093f4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8009238:	68db      	ldr	r3, [r3, #12]
 800923a:	f003 0203 	and.w	r2, r3, #3
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	429a      	cmp	r2, r3
 8009244:	d103      	bne.n	800924e <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
       ||
 800924a:	2b00      	cmp	r3, #0
 800924c:	d142      	bne.n	80092d4 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800924e:	2301      	movs	r3, #1
 8009250:	73fb      	strb	r3, [r7, #15]
 8009252:	e03f      	b.n	80092d4 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	2b03      	cmp	r3, #3
 800925a:	d018      	beq.n	800928e <RCCEx_PLLSAI1_Config+0x72>
 800925c:	2b03      	cmp	r3, #3
 800925e:	d825      	bhi.n	80092ac <RCCEx_PLLSAI1_Config+0x90>
 8009260:	2b01      	cmp	r3, #1
 8009262:	d002      	beq.n	800926a <RCCEx_PLLSAI1_Config+0x4e>
 8009264:	2b02      	cmp	r3, #2
 8009266:	d009      	beq.n	800927c <RCCEx_PLLSAI1_Config+0x60>
 8009268:	e020      	b.n	80092ac <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800926a:	4b62      	ldr	r3, [pc, #392]	; (80093f4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	f003 0302 	and.w	r3, r3, #2
 8009272:	2b00      	cmp	r3, #0
 8009274:	d11d      	bne.n	80092b2 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8009276:	2301      	movs	r3, #1
 8009278:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800927a:	e01a      	b.n	80092b2 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800927c:	4b5d      	ldr	r3, [pc, #372]	; (80093f4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009284:	2b00      	cmp	r3, #0
 8009286:	d116      	bne.n	80092b6 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8009288:	2301      	movs	r3, #1
 800928a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800928c:	e013      	b.n	80092b6 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800928e:	4b59      	ldr	r3, [pc, #356]	; (80093f4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009296:	2b00      	cmp	r3, #0
 8009298:	d10f      	bne.n	80092ba <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800929a:	4b56      	ldr	r3, [pc, #344]	; (80093f4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d109      	bne.n	80092ba <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 80092a6:	2301      	movs	r3, #1
 80092a8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80092aa:	e006      	b.n	80092ba <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80092ac:	2301      	movs	r3, #1
 80092ae:	73fb      	strb	r3, [r7, #15]
      break;
 80092b0:	e004      	b.n	80092bc <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80092b2:	bf00      	nop
 80092b4:	e002      	b.n	80092bc <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80092b6:	bf00      	nop
 80092b8:	e000      	b.n	80092bc <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80092ba:	bf00      	nop
    }

    if(status == HAL_OK)
 80092bc:	7bfb      	ldrb	r3, [r7, #15]
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d108      	bne.n	80092d4 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80092c2:	4b4c      	ldr	r3, [pc, #304]	; (80093f4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80092c4:	68db      	ldr	r3, [r3, #12]
 80092c6:	f023 0203 	bic.w	r2, r3, #3
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	4949      	ldr	r1, [pc, #292]	; (80093f4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80092d0:	4313      	orrs	r3, r2
 80092d2:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80092d4:	7bfb      	ldrb	r3, [r7, #15]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	f040 8086 	bne.w	80093e8 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80092dc:	4b45      	ldr	r3, [pc, #276]	; (80093f4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	4a44      	ldr	r2, [pc, #272]	; (80093f4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80092e2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80092e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80092e8:	f7fc fdac 	bl	8005e44 <HAL_GetTick>
 80092ec:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80092ee:	e009      	b.n	8009304 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80092f0:	f7fc fda8 	bl	8005e44 <HAL_GetTick>
 80092f4:	4602      	mov	r2, r0
 80092f6:	68bb      	ldr	r3, [r7, #8]
 80092f8:	1ad3      	subs	r3, r2, r3
 80092fa:	2b02      	cmp	r3, #2
 80092fc:	d902      	bls.n	8009304 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80092fe:	2303      	movs	r3, #3
 8009300:	73fb      	strb	r3, [r7, #15]
        break;
 8009302:	e005      	b.n	8009310 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8009304:	4b3b      	ldr	r3, [pc, #236]	; (80093f4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800930c:	2b00      	cmp	r3, #0
 800930e:	d1ef      	bne.n	80092f0 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8009310:	7bfb      	ldrb	r3, [r7, #15]
 8009312:	2b00      	cmp	r3, #0
 8009314:	d168      	bne.n	80093e8 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8009316:	683b      	ldr	r3, [r7, #0]
 8009318:	2b00      	cmp	r3, #0
 800931a:	d113      	bne.n	8009344 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800931c:	4b35      	ldr	r3, [pc, #212]	; (80093f4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800931e:	691a      	ldr	r2, [r3, #16]
 8009320:	4b35      	ldr	r3, [pc, #212]	; (80093f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8009322:	4013      	ands	r3, r2
 8009324:	687a      	ldr	r2, [r7, #4]
 8009326:	6892      	ldr	r2, [r2, #8]
 8009328:	0211      	lsls	r1, r2, #8
 800932a:	687a      	ldr	r2, [r7, #4]
 800932c:	68d2      	ldr	r2, [r2, #12]
 800932e:	06d2      	lsls	r2, r2, #27
 8009330:	4311      	orrs	r1, r2
 8009332:	687a      	ldr	r2, [r7, #4]
 8009334:	6852      	ldr	r2, [r2, #4]
 8009336:	3a01      	subs	r2, #1
 8009338:	0112      	lsls	r2, r2, #4
 800933a:	430a      	orrs	r2, r1
 800933c:	492d      	ldr	r1, [pc, #180]	; (80093f4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800933e:	4313      	orrs	r3, r2
 8009340:	610b      	str	r3, [r1, #16]
 8009342:	e02d      	b.n	80093a0 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8009344:	683b      	ldr	r3, [r7, #0]
 8009346:	2b01      	cmp	r3, #1
 8009348:	d115      	bne.n	8009376 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800934a:	4b2a      	ldr	r3, [pc, #168]	; (80093f4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800934c:	691a      	ldr	r2, [r3, #16]
 800934e:	4b2b      	ldr	r3, [pc, #172]	; (80093fc <RCCEx_PLLSAI1_Config+0x1e0>)
 8009350:	4013      	ands	r3, r2
 8009352:	687a      	ldr	r2, [r7, #4]
 8009354:	6892      	ldr	r2, [r2, #8]
 8009356:	0211      	lsls	r1, r2, #8
 8009358:	687a      	ldr	r2, [r7, #4]
 800935a:	6912      	ldr	r2, [r2, #16]
 800935c:	0852      	lsrs	r2, r2, #1
 800935e:	3a01      	subs	r2, #1
 8009360:	0552      	lsls	r2, r2, #21
 8009362:	4311      	orrs	r1, r2
 8009364:	687a      	ldr	r2, [r7, #4]
 8009366:	6852      	ldr	r2, [r2, #4]
 8009368:	3a01      	subs	r2, #1
 800936a:	0112      	lsls	r2, r2, #4
 800936c:	430a      	orrs	r2, r1
 800936e:	4921      	ldr	r1, [pc, #132]	; (80093f4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8009370:	4313      	orrs	r3, r2
 8009372:	610b      	str	r3, [r1, #16]
 8009374:	e014      	b.n	80093a0 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8009376:	4b1f      	ldr	r3, [pc, #124]	; (80093f4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8009378:	691a      	ldr	r2, [r3, #16]
 800937a:	4b21      	ldr	r3, [pc, #132]	; (8009400 <RCCEx_PLLSAI1_Config+0x1e4>)
 800937c:	4013      	ands	r3, r2
 800937e:	687a      	ldr	r2, [r7, #4]
 8009380:	6892      	ldr	r2, [r2, #8]
 8009382:	0211      	lsls	r1, r2, #8
 8009384:	687a      	ldr	r2, [r7, #4]
 8009386:	6952      	ldr	r2, [r2, #20]
 8009388:	0852      	lsrs	r2, r2, #1
 800938a:	3a01      	subs	r2, #1
 800938c:	0652      	lsls	r2, r2, #25
 800938e:	4311      	orrs	r1, r2
 8009390:	687a      	ldr	r2, [r7, #4]
 8009392:	6852      	ldr	r2, [r2, #4]
 8009394:	3a01      	subs	r2, #1
 8009396:	0112      	lsls	r2, r2, #4
 8009398:	430a      	orrs	r2, r1
 800939a:	4916      	ldr	r1, [pc, #88]	; (80093f4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800939c:	4313      	orrs	r3, r2
 800939e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80093a0:	4b14      	ldr	r3, [pc, #80]	; (80093f4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	4a13      	ldr	r2, [pc, #76]	; (80093f4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80093a6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80093aa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80093ac:	f7fc fd4a 	bl	8005e44 <HAL_GetTick>
 80093b0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80093b2:	e009      	b.n	80093c8 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80093b4:	f7fc fd46 	bl	8005e44 <HAL_GetTick>
 80093b8:	4602      	mov	r2, r0
 80093ba:	68bb      	ldr	r3, [r7, #8]
 80093bc:	1ad3      	subs	r3, r2, r3
 80093be:	2b02      	cmp	r3, #2
 80093c0:	d902      	bls.n	80093c8 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80093c2:	2303      	movs	r3, #3
 80093c4:	73fb      	strb	r3, [r7, #15]
          break;
 80093c6:	e005      	b.n	80093d4 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80093c8:	4b0a      	ldr	r3, [pc, #40]	; (80093f4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d0ef      	beq.n	80093b4 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80093d4:	7bfb      	ldrb	r3, [r7, #15]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d106      	bne.n	80093e8 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80093da:	4b06      	ldr	r3, [pc, #24]	; (80093f4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80093dc:	691a      	ldr	r2, [r3, #16]
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	699b      	ldr	r3, [r3, #24]
 80093e2:	4904      	ldr	r1, [pc, #16]	; (80093f4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80093e4:	4313      	orrs	r3, r2
 80093e6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80093e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80093ea:	4618      	mov	r0, r3
 80093ec:	3710      	adds	r7, #16
 80093ee:	46bd      	mov	sp, r7
 80093f0:	bd80      	pop	{r7, pc}
 80093f2:	bf00      	nop
 80093f4:	40021000 	.word	0x40021000
 80093f8:	07ff800f 	.word	0x07ff800f
 80093fc:	ff9f800f 	.word	0xff9f800f
 8009400:	f9ff800f 	.word	0xf9ff800f

08009404 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8009404:	b580      	push	{r7, lr}
 8009406:	b084      	sub	sp, #16
 8009408:	af00      	add	r7, sp, #0
 800940a:	6078      	str	r0, [r7, #4]
 800940c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800940e:	2300      	movs	r3, #0
 8009410:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8009412:	4b72      	ldr	r3, [pc, #456]	; (80095dc <RCCEx_PLLSAI2_Config+0x1d8>)
 8009414:	68db      	ldr	r3, [r3, #12]
 8009416:	f003 0303 	and.w	r3, r3, #3
 800941a:	2b00      	cmp	r3, #0
 800941c:	d00e      	beq.n	800943c <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800941e:	4b6f      	ldr	r3, [pc, #444]	; (80095dc <RCCEx_PLLSAI2_Config+0x1d8>)
 8009420:	68db      	ldr	r3, [r3, #12]
 8009422:	f003 0203 	and.w	r2, r3, #3
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	429a      	cmp	r2, r3
 800942c:	d103      	bne.n	8009436 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
       ||
 8009432:	2b00      	cmp	r3, #0
 8009434:	d142      	bne.n	80094bc <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8009436:	2301      	movs	r3, #1
 8009438:	73fb      	strb	r3, [r7, #15]
 800943a:	e03f      	b.n	80094bc <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	2b03      	cmp	r3, #3
 8009442:	d018      	beq.n	8009476 <RCCEx_PLLSAI2_Config+0x72>
 8009444:	2b03      	cmp	r3, #3
 8009446:	d825      	bhi.n	8009494 <RCCEx_PLLSAI2_Config+0x90>
 8009448:	2b01      	cmp	r3, #1
 800944a:	d002      	beq.n	8009452 <RCCEx_PLLSAI2_Config+0x4e>
 800944c:	2b02      	cmp	r3, #2
 800944e:	d009      	beq.n	8009464 <RCCEx_PLLSAI2_Config+0x60>
 8009450:	e020      	b.n	8009494 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8009452:	4b62      	ldr	r3, [pc, #392]	; (80095dc <RCCEx_PLLSAI2_Config+0x1d8>)
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	f003 0302 	and.w	r3, r3, #2
 800945a:	2b00      	cmp	r3, #0
 800945c:	d11d      	bne.n	800949a <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 800945e:	2301      	movs	r3, #1
 8009460:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009462:	e01a      	b.n	800949a <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8009464:	4b5d      	ldr	r3, [pc, #372]	; (80095dc <RCCEx_PLLSAI2_Config+0x1d8>)
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800946c:	2b00      	cmp	r3, #0
 800946e:	d116      	bne.n	800949e <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8009470:	2301      	movs	r3, #1
 8009472:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009474:	e013      	b.n	800949e <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8009476:	4b59      	ldr	r3, [pc, #356]	; (80095dc <RCCEx_PLLSAI2_Config+0x1d8>)
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800947e:	2b00      	cmp	r3, #0
 8009480:	d10f      	bne.n	80094a2 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8009482:	4b56      	ldr	r3, [pc, #344]	; (80095dc <RCCEx_PLLSAI2_Config+0x1d8>)
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800948a:	2b00      	cmp	r3, #0
 800948c:	d109      	bne.n	80094a2 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 800948e:	2301      	movs	r3, #1
 8009490:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009492:	e006      	b.n	80094a2 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8009494:	2301      	movs	r3, #1
 8009496:	73fb      	strb	r3, [r7, #15]
      break;
 8009498:	e004      	b.n	80094a4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800949a:	bf00      	nop
 800949c:	e002      	b.n	80094a4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800949e:	bf00      	nop
 80094a0:	e000      	b.n	80094a4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80094a2:	bf00      	nop
    }

    if(status == HAL_OK)
 80094a4:	7bfb      	ldrb	r3, [r7, #15]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d108      	bne.n	80094bc <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80094aa:	4b4c      	ldr	r3, [pc, #304]	; (80095dc <RCCEx_PLLSAI2_Config+0x1d8>)
 80094ac:	68db      	ldr	r3, [r3, #12]
 80094ae:	f023 0203 	bic.w	r2, r3, #3
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	4949      	ldr	r1, [pc, #292]	; (80095dc <RCCEx_PLLSAI2_Config+0x1d8>)
 80094b8:	4313      	orrs	r3, r2
 80094ba:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80094bc:	7bfb      	ldrb	r3, [r7, #15]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	f040 8086 	bne.w	80095d0 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80094c4:	4b45      	ldr	r3, [pc, #276]	; (80095dc <RCCEx_PLLSAI2_Config+0x1d8>)
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	4a44      	ldr	r2, [pc, #272]	; (80095dc <RCCEx_PLLSAI2_Config+0x1d8>)
 80094ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80094ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80094d0:	f7fc fcb8 	bl	8005e44 <HAL_GetTick>
 80094d4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80094d6:	e009      	b.n	80094ec <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80094d8:	f7fc fcb4 	bl	8005e44 <HAL_GetTick>
 80094dc:	4602      	mov	r2, r0
 80094de:	68bb      	ldr	r3, [r7, #8]
 80094e0:	1ad3      	subs	r3, r2, r3
 80094e2:	2b02      	cmp	r3, #2
 80094e4:	d902      	bls.n	80094ec <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80094e6:	2303      	movs	r3, #3
 80094e8:	73fb      	strb	r3, [r7, #15]
        break;
 80094ea:	e005      	b.n	80094f8 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80094ec:	4b3b      	ldr	r3, [pc, #236]	; (80095dc <RCCEx_PLLSAI2_Config+0x1d8>)
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d1ef      	bne.n	80094d8 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80094f8:	7bfb      	ldrb	r3, [r7, #15]
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d168      	bne.n	80095d0 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80094fe:	683b      	ldr	r3, [r7, #0]
 8009500:	2b00      	cmp	r3, #0
 8009502:	d113      	bne.n	800952c <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8009504:	4b35      	ldr	r3, [pc, #212]	; (80095dc <RCCEx_PLLSAI2_Config+0x1d8>)
 8009506:	695a      	ldr	r2, [r3, #20]
 8009508:	4b35      	ldr	r3, [pc, #212]	; (80095e0 <RCCEx_PLLSAI2_Config+0x1dc>)
 800950a:	4013      	ands	r3, r2
 800950c:	687a      	ldr	r2, [r7, #4]
 800950e:	6892      	ldr	r2, [r2, #8]
 8009510:	0211      	lsls	r1, r2, #8
 8009512:	687a      	ldr	r2, [r7, #4]
 8009514:	68d2      	ldr	r2, [r2, #12]
 8009516:	06d2      	lsls	r2, r2, #27
 8009518:	4311      	orrs	r1, r2
 800951a:	687a      	ldr	r2, [r7, #4]
 800951c:	6852      	ldr	r2, [r2, #4]
 800951e:	3a01      	subs	r2, #1
 8009520:	0112      	lsls	r2, r2, #4
 8009522:	430a      	orrs	r2, r1
 8009524:	492d      	ldr	r1, [pc, #180]	; (80095dc <RCCEx_PLLSAI2_Config+0x1d8>)
 8009526:	4313      	orrs	r3, r2
 8009528:	614b      	str	r3, [r1, #20]
 800952a:	e02d      	b.n	8009588 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 800952c:	683b      	ldr	r3, [r7, #0]
 800952e:	2b01      	cmp	r3, #1
 8009530:	d115      	bne.n	800955e <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8009532:	4b2a      	ldr	r3, [pc, #168]	; (80095dc <RCCEx_PLLSAI2_Config+0x1d8>)
 8009534:	695a      	ldr	r2, [r3, #20]
 8009536:	4b2b      	ldr	r3, [pc, #172]	; (80095e4 <RCCEx_PLLSAI2_Config+0x1e0>)
 8009538:	4013      	ands	r3, r2
 800953a:	687a      	ldr	r2, [r7, #4]
 800953c:	6892      	ldr	r2, [r2, #8]
 800953e:	0211      	lsls	r1, r2, #8
 8009540:	687a      	ldr	r2, [r7, #4]
 8009542:	6912      	ldr	r2, [r2, #16]
 8009544:	0852      	lsrs	r2, r2, #1
 8009546:	3a01      	subs	r2, #1
 8009548:	0552      	lsls	r2, r2, #21
 800954a:	4311      	orrs	r1, r2
 800954c:	687a      	ldr	r2, [r7, #4]
 800954e:	6852      	ldr	r2, [r2, #4]
 8009550:	3a01      	subs	r2, #1
 8009552:	0112      	lsls	r2, r2, #4
 8009554:	430a      	orrs	r2, r1
 8009556:	4921      	ldr	r1, [pc, #132]	; (80095dc <RCCEx_PLLSAI2_Config+0x1d8>)
 8009558:	4313      	orrs	r3, r2
 800955a:	614b      	str	r3, [r1, #20]
 800955c:	e014      	b.n	8009588 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800955e:	4b1f      	ldr	r3, [pc, #124]	; (80095dc <RCCEx_PLLSAI2_Config+0x1d8>)
 8009560:	695a      	ldr	r2, [r3, #20]
 8009562:	4b21      	ldr	r3, [pc, #132]	; (80095e8 <RCCEx_PLLSAI2_Config+0x1e4>)
 8009564:	4013      	ands	r3, r2
 8009566:	687a      	ldr	r2, [r7, #4]
 8009568:	6892      	ldr	r2, [r2, #8]
 800956a:	0211      	lsls	r1, r2, #8
 800956c:	687a      	ldr	r2, [r7, #4]
 800956e:	6952      	ldr	r2, [r2, #20]
 8009570:	0852      	lsrs	r2, r2, #1
 8009572:	3a01      	subs	r2, #1
 8009574:	0652      	lsls	r2, r2, #25
 8009576:	4311      	orrs	r1, r2
 8009578:	687a      	ldr	r2, [r7, #4]
 800957a:	6852      	ldr	r2, [r2, #4]
 800957c:	3a01      	subs	r2, #1
 800957e:	0112      	lsls	r2, r2, #4
 8009580:	430a      	orrs	r2, r1
 8009582:	4916      	ldr	r1, [pc, #88]	; (80095dc <RCCEx_PLLSAI2_Config+0x1d8>)
 8009584:	4313      	orrs	r3, r2
 8009586:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8009588:	4b14      	ldr	r3, [pc, #80]	; (80095dc <RCCEx_PLLSAI2_Config+0x1d8>)
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	4a13      	ldr	r2, [pc, #76]	; (80095dc <RCCEx_PLLSAI2_Config+0x1d8>)
 800958e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009592:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009594:	f7fc fc56 	bl	8005e44 <HAL_GetTick>
 8009598:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800959a:	e009      	b.n	80095b0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800959c:	f7fc fc52 	bl	8005e44 <HAL_GetTick>
 80095a0:	4602      	mov	r2, r0
 80095a2:	68bb      	ldr	r3, [r7, #8]
 80095a4:	1ad3      	subs	r3, r2, r3
 80095a6:	2b02      	cmp	r3, #2
 80095a8:	d902      	bls.n	80095b0 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80095aa:	2303      	movs	r3, #3
 80095ac:	73fb      	strb	r3, [r7, #15]
          break;
 80095ae:	e005      	b.n	80095bc <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80095b0:	4b0a      	ldr	r3, [pc, #40]	; (80095dc <RCCEx_PLLSAI2_Config+0x1d8>)
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d0ef      	beq.n	800959c <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80095bc:	7bfb      	ldrb	r3, [r7, #15]
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d106      	bne.n	80095d0 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80095c2:	4b06      	ldr	r3, [pc, #24]	; (80095dc <RCCEx_PLLSAI2_Config+0x1d8>)
 80095c4:	695a      	ldr	r2, [r3, #20]
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	699b      	ldr	r3, [r3, #24]
 80095ca:	4904      	ldr	r1, [pc, #16]	; (80095dc <RCCEx_PLLSAI2_Config+0x1d8>)
 80095cc:	4313      	orrs	r3, r2
 80095ce:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80095d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80095d2:	4618      	mov	r0, r3
 80095d4:	3710      	adds	r7, #16
 80095d6:	46bd      	mov	sp, r7
 80095d8:	bd80      	pop	{r7, pc}
 80095da:	bf00      	nop
 80095dc:	40021000 	.word	0x40021000
 80095e0:	07ff800f 	.word	0x07ff800f
 80095e4:	ff9f800f 	.word	0xff9f800f
 80095e8:	f9ff800f 	.word	0xf9ff800f

080095ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80095ec:	b580      	push	{r7, lr}
 80095ee:	b082      	sub	sp, #8
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d101      	bne.n	80095fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80095fa:	2301      	movs	r3, #1
 80095fc:	e049      	b.n	8009692 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009604:	b2db      	uxtb	r3, r3
 8009606:	2b00      	cmp	r3, #0
 8009608:	d106      	bne.n	8009618 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	2200      	movs	r2, #0
 800960e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009612:	6878      	ldr	r0, [r7, #4]
 8009614:	f000 f841 	bl	800969a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	2202      	movs	r2, #2
 800961c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681a      	ldr	r2, [r3, #0]
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	3304      	adds	r3, #4
 8009628:	4619      	mov	r1, r3
 800962a:	4610      	mov	r0, r2
 800962c:	f000 f9f8 	bl	8009a20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	2201      	movs	r2, #1
 8009634:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	2201      	movs	r2, #1
 800963c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	2201      	movs	r2, #1
 8009644:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	2201      	movs	r2, #1
 800964c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	2201      	movs	r2, #1
 8009654:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	2201      	movs	r2, #1
 800965c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	2201      	movs	r2, #1
 8009664:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	2201      	movs	r2, #1
 800966c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	2201      	movs	r2, #1
 8009674:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	2201      	movs	r2, #1
 800967c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	2201      	movs	r2, #1
 8009684:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	2201      	movs	r2, #1
 800968c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009690:	2300      	movs	r3, #0
}
 8009692:	4618      	mov	r0, r3
 8009694:	3708      	adds	r7, #8
 8009696:	46bd      	mov	sp, r7
 8009698:	bd80      	pop	{r7, pc}

0800969a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800969a:	b480      	push	{r7}
 800969c:	b083      	sub	sp, #12
 800969e:	af00      	add	r7, sp, #0
 80096a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80096a2:	bf00      	nop
 80096a4:	370c      	adds	r7, #12
 80096a6:	46bd      	mov	sp, r7
 80096a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ac:	4770      	bx	lr
	...

080096b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80096b0:	b480      	push	{r7}
 80096b2:	b085      	sub	sp, #20
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80096be:	b2db      	uxtb	r3, r3
 80096c0:	2b01      	cmp	r3, #1
 80096c2:	d001      	beq.n	80096c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80096c4:	2301      	movs	r3, #1
 80096c6:	e04f      	b.n	8009768 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	2202      	movs	r2, #2
 80096cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	68da      	ldr	r2, [r3, #12]
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	f042 0201 	orr.w	r2, r2, #1
 80096de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	4a23      	ldr	r2, [pc, #140]	; (8009774 <HAL_TIM_Base_Start_IT+0xc4>)
 80096e6:	4293      	cmp	r3, r2
 80096e8:	d01d      	beq.n	8009726 <HAL_TIM_Base_Start_IT+0x76>
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80096f2:	d018      	beq.n	8009726 <HAL_TIM_Base_Start_IT+0x76>
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	4a1f      	ldr	r2, [pc, #124]	; (8009778 <HAL_TIM_Base_Start_IT+0xc8>)
 80096fa:	4293      	cmp	r3, r2
 80096fc:	d013      	beq.n	8009726 <HAL_TIM_Base_Start_IT+0x76>
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	4a1e      	ldr	r2, [pc, #120]	; (800977c <HAL_TIM_Base_Start_IT+0xcc>)
 8009704:	4293      	cmp	r3, r2
 8009706:	d00e      	beq.n	8009726 <HAL_TIM_Base_Start_IT+0x76>
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	4a1c      	ldr	r2, [pc, #112]	; (8009780 <HAL_TIM_Base_Start_IT+0xd0>)
 800970e:	4293      	cmp	r3, r2
 8009710:	d009      	beq.n	8009726 <HAL_TIM_Base_Start_IT+0x76>
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	4a1b      	ldr	r2, [pc, #108]	; (8009784 <HAL_TIM_Base_Start_IT+0xd4>)
 8009718:	4293      	cmp	r3, r2
 800971a:	d004      	beq.n	8009726 <HAL_TIM_Base_Start_IT+0x76>
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	4a19      	ldr	r2, [pc, #100]	; (8009788 <HAL_TIM_Base_Start_IT+0xd8>)
 8009722:	4293      	cmp	r3, r2
 8009724:	d115      	bne.n	8009752 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	689a      	ldr	r2, [r3, #8]
 800972c:	4b17      	ldr	r3, [pc, #92]	; (800978c <HAL_TIM_Base_Start_IT+0xdc>)
 800972e:	4013      	ands	r3, r2
 8009730:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	2b06      	cmp	r3, #6
 8009736:	d015      	beq.n	8009764 <HAL_TIM_Base_Start_IT+0xb4>
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800973e:	d011      	beq.n	8009764 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	681a      	ldr	r2, [r3, #0]
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	f042 0201 	orr.w	r2, r2, #1
 800974e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009750:	e008      	b.n	8009764 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	681a      	ldr	r2, [r3, #0]
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	f042 0201 	orr.w	r2, r2, #1
 8009760:	601a      	str	r2, [r3, #0]
 8009762:	e000      	b.n	8009766 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009764:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009766:	2300      	movs	r3, #0
}
 8009768:	4618      	mov	r0, r3
 800976a:	3714      	adds	r7, #20
 800976c:	46bd      	mov	sp, r7
 800976e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009772:	4770      	bx	lr
 8009774:	40012c00 	.word	0x40012c00
 8009778:	40000400 	.word	0x40000400
 800977c:	40000800 	.word	0x40000800
 8009780:	40000c00 	.word	0x40000c00
 8009784:	40013400 	.word	0x40013400
 8009788:	40014000 	.word	0x40014000
 800978c:	00010007 	.word	0x00010007

08009790 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009790:	b580      	push	{r7, lr}
 8009792:	b082      	sub	sp, #8
 8009794:	af00      	add	r7, sp, #0
 8009796:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	691b      	ldr	r3, [r3, #16]
 800979e:	f003 0302 	and.w	r3, r3, #2
 80097a2:	2b02      	cmp	r3, #2
 80097a4:	d122      	bne.n	80097ec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	68db      	ldr	r3, [r3, #12]
 80097ac:	f003 0302 	and.w	r3, r3, #2
 80097b0:	2b02      	cmp	r3, #2
 80097b2:	d11b      	bne.n	80097ec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	f06f 0202 	mvn.w	r2, #2
 80097bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	2201      	movs	r2, #1
 80097c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	699b      	ldr	r3, [r3, #24]
 80097ca:	f003 0303 	and.w	r3, r3, #3
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d003      	beq.n	80097da <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80097d2:	6878      	ldr	r0, [r7, #4]
 80097d4:	f000 f905 	bl	80099e2 <HAL_TIM_IC_CaptureCallback>
 80097d8:	e005      	b.n	80097e6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80097da:	6878      	ldr	r0, [r7, #4]
 80097dc:	f000 f8f7 	bl	80099ce <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80097e0:	6878      	ldr	r0, [r7, #4]
 80097e2:	f000 f908 	bl	80099f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	2200      	movs	r2, #0
 80097ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	691b      	ldr	r3, [r3, #16]
 80097f2:	f003 0304 	and.w	r3, r3, #4
 80097f6:	2b04      	cmp	r3, #4
 80097f8:	d122      	bne.n	8009840 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	68db      	ldr	r3, [r3, #12]
 8009800:	f003 0304 	and.w	r3, r3, #4
 8009804:	2b04      	cmp	r3, #4
 8009806:	d11b      	bne.n	8009840 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	f06f 0204 	mvn.w	r2, #4
 8009810:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	2202      	movs	r2, #2
 8009816:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	699b      	ldr	r3, [r3, #24]
 800981e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009822:	2b00      	cmp	r3, #0
 8009824:	d003      	beq.n	800982e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009826:	6878      	ldr	r0, [r7, #4]
 8009828:	f000 f8db 	bl	80099e2 <HAL_TIM_IC_CaptureCallback>
 800982c:	e005      	b.n	800983a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800982e:	6878      	ldr	r0, [r7, #4]
 8009830:	f000 f8cd 	bl	80099ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009834:	6878      	ldr	r0, [r7, #4]
 8009836:	f000 f8de 	bl	80099f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	2200      	movs	r2, #0
 800983e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	691b      	ldr	r3, [r3, #16]
 8009846:	f003 0308 	and.w	r3, r3, #8
 800984a:	2b08      	cmp	r3, #8
 800984c:	d122      	bne.n	8009894 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	68db      	ldr	r3, [r3, #12]
 8009854:	f003 0308 	and.w	r3, r3, #8
 8009858:	2b08      	cmp	r3, #8
 800985a:	d11b      	bne.n	8009894 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	f06f 0208 	mvn.w	r2, #8
 8009864:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	2204      	movs	r2, #4
 800986a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	69db      	ldr	r3, [r3, #28]
 8009872:	f003 0303 	and.w	r3, r3, #3
 8009876:	2b00      	cmp	r3, #0
 8009878:	d003      	beq.n	8009882 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800987a:	6878      	ldr	r0, [r7, #4]
 800987c:	f000 f8b1 	bl	80099e2 <HAL_TIM_IC_CaptureCallback>
 8009880:	e005      	b.n	800988e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009882:	6878      	ldr	r0, [r7, #4]
 8009884:	f000 f8a3 	bl	80099ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009888:	6878      	ldr	r0, [r7, #4]
 800988a:	f000 f8b4 	bl	80099f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	2200      	movs	r2, #0
 8009892:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	691b      	ldr	r3, [r3, #16]
 800989a:	f003 0310 	and.w	r3, r3, #16
 800989e:	2b10      	cmp	r3, #16
 80098a0:	d122      	bne.n	80098e8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	68db      	ldr	r3, [r3, #12]
 80098a8:	f003 0310 	and.w	r3, r3, #16
 80098ac:	2b10      	cmp	r3, #16
 80098ae:	d11b      	bne.n	80098e8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	f06f 0210 	mvn.w	r2, #16
 80098b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	2208      	movs	r2, #8
 80098be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	69db      	ldr	r3, [r3, #28]
 80098c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d003      	beq.n	80098d6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80098ce:	6878      	ldr	r0, [r7, #4]
 80098d0:	f000 f887 	bl	80099e2 <HAL_TIM_IC_CaptureCallback>
 80098d4:	e005      	b.n	80098e2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80098d6:	6878      	ldr	r0, [r7, #4]
 80098d8:	f000 f879 	bl	80099ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80098dc:	6878      	ldr	r0, [r7, #4]
 80098de:	f000 f88a 	bl	80099f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	2200      	movs	r2, #0
 80098e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	691b      	ldr	r3, [r3, #16]
 80098ee:	f003 0301 	and.w	r3, r3, #1
 80098f2:	2b01      	cmp	r3, #1
 80098f4:	d10e      	bne.n	8009914 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	68db      	ldr	r3, [r3, #12]
 80098fc:	f003 0301 	and.w	r3, r3, #1
 8009900:	2b01      	cmp	r3, #1
 8009902:	d107      	bne.n	8009914 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	f06f 0201 	mvn.w	r2, #1
 800990c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800990e:	6878      	ldr	r0, [r7, #4]
 8009910:	f7fa ff4a 	bl	80047a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	691b      	ldr	r3, [r3, #16]
 800991a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800991e:	2b80      	cmp	r3, #128	; 0x80
 8009920:	d10e      	bne.n	8009940 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	68db      	ldr	r3, [r3, #12]
 8009928:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800992c:	2b80      	cmp	r3, #128	; 0x80
 800992e:	d107      	bne.n	8009940 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009938:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800993a:	6878      	ldr	r0, [r7, #4]
 800993c:	f000 f914 	bl	8009b68 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	691b      	ldr	r3, [r3, #16]
 8009946:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800994a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800994e:	d10e      	bne.n	800996e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	68db      	ldr	r3, [r3, #12]
 8009956:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800995a:	2b80      	cmp	r3, #128	; 0x80
 800995c:	d107      	bne.n	800996e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009966:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009968:	6878      	ldr	r0, [r7, #4]
 800996a:	f000 f907 	bl	8009b7c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	691b      	ldr	r3, [r3, #16]
 8009974:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009978:	2b40      	cmp	r3, #64	; 0x40
 800997a:	d10e      	bne.n	800999a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	68db      	ldr	r3, [r3, #12]
 8009982:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009986:	2b40      	cmp	r3, #64	; 0x40
 8009988:	d107      	bne.n	800999a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009992:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009994:	6878      	ldr	r0, [r7, #4]
 8009996:	f000 f838 	bl	8009a0a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	691b      	ldr	r3, [r3, #16]
 80099a0:	f003 0320 	and.w	r3, r3, #32
 80099a4:	2b20      	cmp	r3, #32
 80099a6:	d10e      	bne.n	80099c6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	68db      	ldr	r3, [r3, #12]
 80099ae:	f003 0320 	and.w	r3, r3, #32
 80099b2:	2b20      	cmp	r3, #32
 80099b4:	d107      	bne.n	80099c6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	f06f 0220 	mvn.w	r2, #32
 80099be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80099c0:	6878      	ldr	r0, [r7, #4]
 80099c2:	f000 f8c7 	bl	8009b54 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80099c6:	bf00      	nop
 80099c8:	3708      	adds	r7, #8
 80099ca:	46bd      	mov	sp, r7
 80099cc:	bd80      	pop	{r7, pc}

080099ce <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80099ce:	b480      	push	{r7}
 80099d0:	b083      	sub	sp, #12
 80099d2:	af00      	add	r7, sp, #0
 80099d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80099d6:	bf00      	nop
 80099d8:	370c      	adds	r7, #12
 80099da:	46bd      	mov	sp, r7
 80099dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e0:	4770      	bx	lr

080099e2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80099e2:	b480      	push	{r7}
 80099e4:	b083      	sub	sp, #12
 80099e6:	af00      	add	r7, sp, #0
 80099e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80099ea:	bf00      	nop
 80099ec:	370c      	adds	r7, #12
 80099ee:	46bd      	mov	sp, r7
 80099f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f4:	4770      	bx	lr

080099f6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80099f6:	b480      	push	{r7}
 80099f8:	b083      	sub	sp, #12
 80099fa:	af00      	add	r7, sp, #0
 80099fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80099fe:	bf00      	nop
 8009a00:	370c      	adds	r7, #12
 8009a02:	46bd      	mov	sp, r7
 8009a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a08:	4770      	bx	lr

08009a0a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009a0a:	b480      	push	{r7}
 8009a0c:	b083      	sub	sp, #12
 8009a0e:	af00      	add	r7, sp, #0
 8009a10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009a12:	bf00      	nop
 8009a14:	370c      	adds	r7, #12
 8009a16:	46bd      	mov	sp, r7
 8009a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a1c:	4770      	bx	lr
	...

08009a20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009a20:	b480      	push	{r7}
 8009a22:	b085      	sub	sp, #20
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	6078      	str	r0, [r7, #4]
 8009a28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	4a40      	ldr	r2, [pc, #256]	; (8009b34 <TIM_Base_SetConfig+0x114>)
 8009a34:	4293      	cmp	r3, r2
 8009a36:	d013      	beq.n	8009a60 <TIM_Base_SetConfig+0x40>
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a3e:	d00f      	beq.n	8009a60 <TIM_Base_SetConfig+0x40>
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	4a3d      	ldr	r2, [pc, #244]	; (8009b38 <TIM_Base_SetConfig+0x118>)
 8009a44:	4293      	cmp	r3, r2
 8009a46:	d00b      	beq.n	8009a60 <TIM_Base_SetConfig+0x40>
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	4a3c      	ldr	r2, [pc, #240]	; (8009b3c <TIM_Base_SetConfig+0x11c>)
 8009a4c:	4293      	cmp	r3, r2
 8009a4e:	d007      	beq.n	8009a60 <TIM_Base_SetConfig+0x40>
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	4a3b      	ldr	r2, [pc, #236]	; (8009b40 <TIM_Base_SetConfig+0x120>)
 8009a54:	4293      	cmp	r3, r2
 8009a56:	d003      	beq.n	8009a60 <TIM_Base_SetConfig+0x40>
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	4a3a      	ldr	r2, [pc, #232]	; (8009b44 <TIM_Base_SetConfig+0x124>)
 8009a5c:	4293      	cmp	r3, r2
 8009a5e:	d108      	bne.n	8009a72 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009a68:	683b      	ldr	r3, [r7, #0]
 8009a6a:	685b      	ldr	r3, [r3, #4]
 8009a6c:	68fa      	ldr	r2, [r7, #12]
 8009a6e:	4313      	orrs	r3, r2
 8009a70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	4a2f      	ldr	r2, [pc, #188]	; (8009b34 <TIM_Base_SetConfig+0x114>)
 8009a76:	4293      	cmp	r3, r2
 8009a78:	d01f      	beq.n	8009aba <TIM_Base_SetConfig+0x9a>
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a80:	d01b      	beq.n	8009aba <TIM_Base_SetConfig+0x9a>
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	4a2c      	ldr	r2, [pc, #176]	; (8009b38 <TIM_Base_SetConfig+0x118>)
 8009a86:	4293      	cmp	r3, r2
 8009a88:	d017      	beq.n	8009aba <TIM_Base_SetConfig+0x9a>
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	4a2b      	ldr	r2, [pc, #172]	; (8009b3c <TIM_Base_SetConfig+0x11c>)
 8009a8e:	4293      	cmp	r3, r2
 8009a90:	d013      	beq.n	8009aba <TIM_Base_SetConfig+0x9a>
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	4a2a      	ldr	r2, [pc, #168]	; (8009b40 <TIM_Base_SetConfig+0x120>)
 8009a96:	4293      	cmp	r3, r2
 8009a98:	d00f      	beq.n	8009aba <TIM_Base_SetConfig+0x9a>
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	4a29      	ldr	r2, [pc, #164]	; (8009b44 <TIM_Base_SetConfig+0x124>)
 8009a9e:	4293      	cmp	r3, r2
 8009aa0:	d00b      	beq.n	8009aba <TIM_Base_SetConfig+0x9a>
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	4a28      	ldr	r2, [pc, #160]	; (8009b48 <TIM_Base_SetConfig+0x128>)
 8009aa6:	4293      	cmp	r3, r2
 8009aa8:	d007      	beq.n	8009aba <TIM_Base_SetConfig+0x9a>
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	4a27      	ldr	r2, [pc, #156]	; (8009b4c <TIM_Base_SetConfig+0x12c>)
 8009aae:	4293      	cmp	r3, r2
 8009ab0:	d003      	beq.n	8009aba <TIM_Base_SetConfig+0x9a>
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	4a26      	ldr	r2, [pc, #152]	; (8009b50 <TIM_Base_SetConfig+0x130>)
 8009ab6:	4293      	cmp	r3, r2
 8009ab8:	d108      	bne.n	8009acc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009ac0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009ac2:	683b      	ldr	r3, [r7, #0]
 8009ac4:	68db      	ldr	r3, [r3, #12]
 8009ac6:	68fa      	ldr	r2, [r7, #12]
 8009ac8:	4313      	orrs	r3, r2
 8009aca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009ad2:	683b      	ldr	r3, [r7, #0]
 8009ad4:	695b      	ldr	r3, [r3, #20]
 8009ad6:	4313      	orrs	r3, r2
 8009ad8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	68fa      	ldr	r2, [r7, #12]
 8009ade:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009ae0:	683b      	ldr	r3, [r7, #0]
 8009ae2:	689a      	ldr	r2, [r3, #8]
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009ae8:	683b      	ldr	r3, [r7, #0]
 8009aea:	681a      	ldr	r2, [r3, #0]
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	4a10      	ldr	r2, [pc, #64]	; (8009b34 <TIM_Base_SetConfig+0x114>)
 8009af4:	4293      	cmp	r3, r2
 8009af6:	d00f      	beq.n	8009b18 <TIM_Base_SetConfig+0xf8>
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	4a12      	ldr	r2, [pc, #72]	; (8009b44 <TIM_Base_SetConfig+0x124>)
 8009afc:	4293      	cmp	r3, r2
 8009afe:	d00b      	beq.n	8009b18 <TIM_Base_SetConfig+0xf8>
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	4a11      	ldr	r2, [pc, #68]	; (8009b48 <TIM_Base_SetConfig+0x128>)
 8009b04:	4293      	cmp	r3, r2
 8009b06:	d007      	beq.n	8009b18 <TIM_Base_SetConfig+0xf8>
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	4a10      	ldr	r2, [pc, #64]	; (8009b4c <TIM_Base_SetConfig+0x12c>)
 8009b0c:	4293      	cmp	r3, r2
 8009b0e:	d003      	beq.n	8009b18 <TIM_Base_SetConfig+0xf8>
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	4a0f      	ldr	r2, [pc, #60]	; (8009b50 <TIM_Base_SetConfig+0x130>)
 8009b14:	4293      	cmp	r3, r2
 8009b16:	d103      	bne.n	8009b20 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009b18:	683b      	ldr	r3, [r7, #0]
 8009b1a:	691a      	ldr	r2, [r3, #16]
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	2201      	movs	r2, #1
 8009b24:	615a      	str	r2, [r3, #20]
}
 8009b26:	bf00      	nop
 8009b28:	3714      	adds	r7, #20
 8009b2a:	46bd      	mov	sp, r7
 8009b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b30:	4770      	bx	lr
 8009b32:	bf00      	nop
 8009b34:	40012c00 	.word	0x40012c00
 8009b38:	40000400 	.word	0x40000400
 8009b3c:	40000800 	.word	0x40000800
 8009b40:	40000c00 	.word	0x40000c00
 8009b44:	40013400 	.word	0x40013400
 8009b48:	40014000 	.word	0x40014000
 8009b4c:	40014400 	.word	0x40014400
 8009b50:	40014800 	.word	0x40014800

08009b54 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009b54:	b480      	push	{r7}
 8009b56:	b083      	sub	sp, #12
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009b5c:	bf00      	nop
 8009b5e:	370c      	adds	r7, #12
 8009b60:	46bd      	mov	sp, r7
 8009b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b66:	4770      	bx	lr

08009b68 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009b68:	b480      	push	{r7}
 8009b6a:	b083      	sub	sp, #12
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009b70:	bf00      	nop
 8009b72:	370c      	adds	r7, #12
 8009b74:	46bd      	mov	sp, r7
 8009b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b7a:	4770      	bx	lr

08009b7c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009b7c:	b480      	push	{r7}
 8009b7e:	b083      	sub	sp, #12
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009b84:	bf00      	nop
 8009b86:	370c      	adds	r7, #12
 8009b88:	46bd      	mov	sp, r7
 8009b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b8e:	4770      	bx	lr

08009b90 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009b90:	b580      	push	{r7, lr}
 8009b92:	b082      	sub	sp, #8
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d101      	bne.n	8009ba2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009b9e:	2301      	movs	r3, #1
 8009ba0:	e042      	b.n	8009c28 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d106      	bne.n	8009bba <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	2200      	movs	r2, #0
 8009bb0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009bb4:	6878      	ldr	r0, [r7, #4]
 8009bb6:	f7fb fbb5 	bl	8005324 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	2224      	movs	r2, #36	; 0x24
 8009bbe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	681a      	ldr	r2, [r3, #0]
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	f022 0201 	bic.w	r2, r2, #1
 8009bd0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009bd2:	6878      	ldr	r0, [r7, #4]
 8009bd4:	f000 fc52 	bl	800a47c <UART_SetConfig>
 8009bd8:	4603      	mov	r3, r0
 8009bda:	2b01      	cmp	r3, #1
 8009bdc:	d101      	bne.n	8009be2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8009bde:	2301      	movs	r3, #1
 8009be0:	e022      	b.n	8009c28 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d002      	beq.n	8009bf0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8009bea:	6878      	ldr	r0, [r7, #4]
 8009bec:	f000 ff42 	bl	800aa74 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	685a      	ldr	r2, [r3, #4]
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009bfe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	689a      	ldr	r2, [r3, #8]
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009c0e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	681a      	ldr	r2, [r3, #0]
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	f042 0201 	orr.w	r2, r2, #1
 8009c1e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009c20:	6878      	ldr	r0, [r7, #4]
 8009c22:	f000 ffc9 	bl	800abb8 <UART_CheckIdleState>
 8009c26:	4603      	mov	r3, r0
}
 8009c28:	4618      	mov	r0, r3
 8009c2a:	3708      	adds	r7, #8
 8009c2c:	46bd      	mov	sp, r7
 8009c2e:	bd80      	pop	{r7, pc}

08009c30 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009c30:	b580      	push	{r7, lr}
 8009c32:	b08a      	sub	sp, #40	; 0x28
 8009c34:	af02      	add	r7, sp, #8
 8009c36:	60f8      	str	r0, [r7, #12]
 8009c38:	60b9      	str	r1, [r7, #8]
 8009c3a:	603b      	str	r3, [r7, #0]
 8009c3c:	4613      	mov	r3, r2
 8009c3e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009c46:	2b20      	cmp	r3, #32
 8009c48:	f040 8084 	bne.w	8009d54 <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8009c4c:	68bb      	ldr	r3, [r7, #8]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d002      	beq.n	8009c58 <HAL_UART_Transmit+0x28>
 8009c52:	88fb      	ldrh	r3, [r7, #6]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d101      	bne.n	8009c5c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8009c58:	2301      	movs	r3, #1
 8009c5a:	e07c      	b.n	8009d56 <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009c62:	2b01      	cmp	r3, #1
 8009c64:	d101      	bne.n	8009c6a <HAL_UART_Transmit+0x3a>
 8009c66:	2302      	movs	r3, #2
 8009c68:	e075      	b.n	8009d56 <HAL_UART_Transmit+0x126>
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	2201      	movs	r2, #1
 8009c6e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	2200      	movs	r2, #0
 8009c76:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	2221      	movs	r2, #33	; 0x21
 8009c7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009c82:	f7fc f8df 	bl	8005e44 <HAL_GetTick>
 8009c86:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	88fa      	ldrh	r2, [r7, #6]
 8009c8c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	88fa      	ldrh	r2, [r7, #6]
 8009c94:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	689b      	ldr	r3, [r3, #8]
 8009c9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ca0:	d108      	bne.n	8009cb4 <HAL_UART_Transmit+0x84>
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	691b      	ldr	r3, [r3, #16]
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d104      	bne.n	8009cb4 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8009caa:	2300      	movs	r3, #0
 8009cac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009cae:	68bb      	ldr	r3, [r7, #8]
 8009cb0:	61bb      	str	r3, [r7, #24]
 8009cb2:	e003      	b.n	8009cbc <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8009cb4:	68bb      	ldr	r3, [r7, #8]
 8009cb6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009cb8:	2300      	movs	r3, #0
 8009cba:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	2200      	movs	r2, #0
 8009cc0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8009cc4:	e02d      	b.n	8009d22 <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009cc6:	683b      	ldr	r3, [r7, #0]
 8009cc8:	9300      	str	r3, [sp, #0]
 8009cca:	697b      	ldr	r3, [r7, #20]
 8009ccc:	2200      	movs	r2, #0
 8009cce:	2180      	movs	r1, #128	; 0x80
 8009cd0:	68f8      	ldr	r0, [r7, #12]
 8009cd2:	f000 ffbc 	bl	800ac4e <UART_WaitOnFlagUntilTimeout>
 8009cd6:	4603      	mov	r3, r0
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d001      	beq.n	8009ce0 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8009cdc:	2303      	movs	r3, #3
 8009cde:	e03a      	b.n	8009d56 <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 8009ce0:	69fb      	ldr	r3, [r7, #28]
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d10b      	bne.n	8009cfe <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009ce6:	69bb      	ldr	r3, [r7, #24]
 8009ce8:	881a      	ldrh	r2, [r3, #0]
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009cf2:	b292      	uxth	r2, r2
 8009cf4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8009cf6:	69bb      	ldr	r3, [r7, #24]
 8009cf8:	3302      	adds	r3, #2
 8009cfa:	61bb      	str	r3, [r7, #24]
 8009cfc:	e008      	b.n	8009d10 <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009cfe:	69fb      	ldr	r3, [r7, #28]
 8009d00:	781a      	ldrb	r2, [r3, #0]
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	b292      	uxth	r2, r2
 8009d08:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8009d0a:	69fb      	ldr	r3, [r7, #28]
 8009d0c:	3301      	adds	r3, #1
 8009d0e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009d16:	b29b      	uxth	r3, r3
 8009d18:	3b01      	subs	r3, #1
 8009d1a:	b29a      	uxth	r2, r3
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009d28:	b29b      	uxth	r3, r3
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d1cb      	bne.n	8009cc6 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009d2e:	683b      	ldr	r3, [r7, #0]
 8009d30:	9300      	str	r3, [sp, #0]
 8009d32:	697b      	ldr	r3, [r7, #20]
 8009d34:	2200      	movs	r2, #0
 8009d36:	2140      	movs	r1, #64	; 0x40
 8009d38:	68f8      	ldr	r0, [r7, #12]
 8009d3a:	f000 ff88 	bl	800ac4e <UART_WaitOnFlagUntilTimeout>
 8009d3e:	4603      	mov	r3, r0
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d001      	beq.n	8009d48 <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 8009d44:	2303      	movs	r3, #3
 8009d46:	e006      	b.n	8009d56 <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	2220      	movs	r2, #32
 8009d4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8009d50:	2300      	movs	r3, #0
 8009d52:	e000      	b.n	8009d56 <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 8009d54:	2302      	movs	r3, #2
  }
}
 8009d56:	4618      	mov	r0, r3
 8009d58:	3720      	adds	r7, #32
 8009d5a:	46bd      	mov	sp, r7
 8009d5c:	bd80      	pop	{r7, pc}
	...

08009d60 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009d60:	b580      	push	{r7, lr}
 8009d62:	b08a      	sub	sp, #40	; 0x28
 8009d64:	af00      	add	r7, sp, #0
 8009d66:	60f8      	str	r0, [r7, #12]
 8009d68:	60b9      	str	r1, [r7, #8]
 8009d6a:	4613      	mov	r3, r2
 8009d6c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d74:	2b20      	cmp	r3, #32
 8009d76:	d142      	bne.n	8009dfe <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8009d78:	68bb      	ldr	r3, [r7, #8]
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d002      	beq.n	8009d84 <HAL_UART_Receive_IT+0x24>
 8009d7e:	88fb      	ldrh	r3, [r7, #6]
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d101      	bne.n	8009d88 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8009d84:	2301      	movs	r3, #1
 8009d86:	e03b      	b.n	8009e00 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009d8e:	2b01      	cmp	r3, #1
 8009d90:	d101      	bne.n	8009d96 <HAL_UART_Receive_IT+0x36>
 8009d92:	2302      	movs	r3, #2
 8009d94:	e034      	b.n	8009e00 <HAL_UART_Receive_IT+0xa0>
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	2201      	movs	r2, #1
 8009d9a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	2200      	movs	r2, #0
 8009da2:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	4a17      	ldr	r2, [pc, #92]	; (8009e08 <HAL_UART_Receive_IT+0xa8>)
 8009daa:	4293      	cmp	r3, r2
 8009dac:	d01f      	beq.n	8009dee <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	685b      	ldr	r3, [r3, #4]
 8009db4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d018      	beq.n	8009dee <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dc2:	697b      	ldr	r3, [r7, #20]
 8009dc4:	e853 3f00 	ldrex	r3, [r3]
 8009dc8:	613b      	str	r3, [r7, #16]
   return(result);
 8009dca:	693b      	ldr	r3, [r7, #16]
 8009dcc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009dd0:	627b      	str	r3, [r7, #36]	; 0x24
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	461a      	mov	r2, r3
 8009dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dda:	623b      	str	r3, [r7, #32]
 8009ddc:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dde:	69f9      	ldr	r1, [r7, #28]
 8009de0:	6a3a      	ldr	r2, [r7, #32]
 8009de2:	e841 2300 	strex	r3, r2, [r1]
 8009de6:	61bb      	str	r3, [r7, #24]
   return(result);
 8009de8:	69bb      	ldr	r3, [r7, #24]
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d1e6      	bne.n	8009dbc <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8009dee:	88fb      	ldrh	r3, [r7, #6]
 8009df0:	461a      	mov	r2, r3
 8009df2:	68b9      	ldr	r1, [r7, #8]
 8009df4:	68f8      	ldr	r0, [r7, #12]
 8009df6:	f000 fff3 	bl	800ade0 <UART_Start_Receive_IT>
 8009dfa:	4603      	mov	r3, r0
 8009dfc:	e000      	b.n	8009e00 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8009dfe:	2302      	movs	r3, #2
  }
}
 8009e00:	4618      	mov	r0, r3
 8009e02:	3728      	adds	r7, #40	; 0x28
 8009e04:	46bd      	mov	sp, r7
 8009e06:	bd80      	pop	{r7, pc}
 8009e08:	40008000 	.word	0x40008000

08009e0c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009e0c:	b580      	push	{r7, lr}
 8009e0e:	b0ba      	sub	sp, #232	; 0xe8
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	69db      	ldr	r3, [r3, #28]
 8009e1a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	689b      	ldr	r3, [r3, #8]
 8009e2e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009e32:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8009e36:	f640 030f 	movw	r3, #2063	; 0x80f
 8009e3a:	4013      	ands	r3, r2
 8009e3c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8009e40:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d11b      	bne.n	8009e80 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009e48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e4c:	f003 0320 	and.w	r3, r3, #32
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d015      	beq.n	8009e80 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009e54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009e58:	f003 0320 	and.w	r3, r3, #32
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d105      	bne.n	8009e6c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009e60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009e64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d009      	beq.n	8009e80 <HAL_UART_IRQHandler+0x74>
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	f000 82d6 	beq.w	800a422 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e7a:	6878      	ldr	r0, [r7, #4]
 8009e7c:	4798      	blx	r3
      }
      return;
 8009e7e:	e2d0      	b.n	800a422 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
 8009e80:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	f000 811f 	beq.w	800a0c8 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009e8a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8009e8e:	4b8b      	ldr	r3, [pc, #556]	; (800a0bc <HAL_UART_IRQHandler+0x2b0>)
 8009e90:	4013      	ands	r3, r2
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d106      	bne.n	8009ea4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009e96:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8009e9a:	4b89      	ldr	r3, [pc, #548]	; (800a0c0 <HAL_UART_IRQHandler+0x2b4>)
 8009e9c:	4013      	ands	r3, r2
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	f000 8112 	beq.w	800a0c8 <HAL_UART_IRQHandler+0x2bc>
      && (((cr3its & USART_CR3_EIE) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009ea4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009ea8:	f003 0301 	and.w	r3, r3, #1
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d011      	beq.n	8009ed4 <HAL_UART_IRQHandler+0xc8>
 8009eb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009eb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d00b      	beq.n	8009ed4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	2201      	movs	r2, #1
 8009ec2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009eca:	f043 0201 	orr.w	r2, r3, #1
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009ed4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009ed8:	f003 0302 	and.w	r3, r3, #2
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d011      	beq.n	8009f04 <HAL_UART_IRQHandler+0xf8>
 8009ee0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009ee4:	f003 0301 	and.w	r3, r3, #1
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d00b      	beq.n	8009f04 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	2202      	movs	r2, #2
 8009ef2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009efa:	f043 0204 	orr.w	r2, r3, #4
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009f04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009f08:	f003 0304 	and.w	r3, r3, #4
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d011      	beq.n	8009f34 <HAL_UART_IRQHandler+0x128>
 8009f10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009f14:	f003 0301 	and.w	r3, r3, #1
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d00b      	beq.n	8009f34 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	2204      	movs	r2, #4
 8009f22:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009f2a:	f043 0202 	orr.w	r2, r3, #2
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009f34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009f38:	f003 0308 	and.w	r3, r3, #8
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d017      	beq.n	8009f70 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009f40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009f44:	f003 0320 	and.w	r3, r3, #32
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d105      	bne.n	8009f58 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009f4c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8009f50:	4b5a      	ldr	r3, [pc, #360]	; (800a0bc <HAL_UART_IRQHandler+0x2b0>)
 8009f52:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d00b      	beq.n	8009f70 <HAL_UART_IRQHandler+0x164>
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	2208      	movs	r2, #8
 8009f5e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009f66:	f043 0208 	orr.w	r2, r3, #8
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009f70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009f74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d012      	beq.n	8009fa2 <HAL_UART_IRQHandler+0x196>
 8009f7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009f80:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d00c      	beq.n	8009fa2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009f90:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009f98:	f043 0220 	orr.w	r2, r3, #32
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	f000 823c 	beq.w	800a426 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009fae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009fb2:	f003 0320 	and.w	r3, r3, #32
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d013      	beq.n	8009fe2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009fba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009fbe:	f003 0320 	and.w	r3, r3, #32
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d105      	bne.n	8009fd2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009fc6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009fca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d007      	beq.n	8009fe2 <HAL_UART_IRQHandler+0x1d6>
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d003      	beq.n	8009fe2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009fde:	6878      	ldr	r0, [r7, #4]
 8009fe0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009fe8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	689b      	ldr	r3, [r3, #8]
 8009ff2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ff6:	2b40      	cmp	r3, #64	; 0x40
 8009ff8:	d005      	beq.n	800a006 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009ffa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009ffe:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a002:	2b00      	cmp	r3, #0
 800a004:	d04f      	beq.n	800a0a6 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a006:	6878      	ldr	r0, [r7, #4]
 800a008:	f001 f814 	bl	800b034 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	689b      	ldr	r3, [r3, #8]
 800a012:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a016:	2b40      	cmp	r3, #64	; 0x40
 800a018:	d141      	bne.n	800a09e <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	3308      	adds	r3, #8
 800a020:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a024:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a028:	e853 3f00 	ldrex	r3, [r3]
 800a02c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800a030:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a034:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a038:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	3308      	adds	r3, #8
 800a042:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a046:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a04a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a04e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a052:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a056:	e841 2300 	strex	r3, r2, [r1]
 800a05a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800a05e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a062:	2b00      	cmp	r3, #0
 800a064:	d1d9      	bne.n	800a01a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d013      	beq.n	800a096 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a072:	4a14      	ldr	r2, [pc, #80]	; (800a0c4 <HAL_UART_IRQHandler+0x2b8>)
 800a074:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a07a:	4618      	mov	r0, r3
 800a07c:	f7fc f850 	bl	8006120 <HAL_DMA_Abort_IT>
 800a080:	4603      	mov	r3, r0
 800a082:	2b00      	cmp	r3, #0
 800a084:	d017      	beq.n	800a0b6 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a08a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a08c:	687a      	ldr	r2, [r7, #4]
 800a08e:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800a090:	4610      	mov	r0, r2
 800a092:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a094:	e00f      	b.n	800a0b6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a096:	6878      	ldr	r0, [r7, #4]
 800a098:	f000 f9da 	bl	800a450 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a09c:	e00b      	b.n	800a0b6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a09e:	6878      	ldr	r0, [r7, #4]
 800a0a0:	f000 f9d6 	bl	800a450 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a0a4:	e007      	b.n	800a0b6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a0a6:	6878      	ldr	r0, [r7, #4]
 800a0a8:	f000 f9d2 	bl	800a450 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	2200      	movs	r2, #0
 800a0b0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800a0b4:	e1b7      	b.n	800a426 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a0b6:	bf00      	nop
    return;
 800a0b8:	e1b5      	b.n	800a426 <HAL_UART_IRQHandler+0x61a>
 800a0ba:	bf00      	nop
 800a0bc:	10000001 	.word	0x10000001
 800a0c0:	04000120 	.word	0x04000120
 800a0c4:	0800b101 	.word	0x0800b101

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a0cc:	2b01      	cmp	r3, #1
 800a0ce:	f040 814a 	bne.w	800a366 <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a0d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a0d6:	f003 0310 	and.w	r3, r3, #16
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	f000 8143 	beq.w	800a366 <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a0e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a0e4:	f003 0310 	and.w	r3, r3, #16
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	f000 813c 	beq.w	800a366 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	2210      	movs	r2, #16
 800a0f4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	689b      	ldr	r3, [r3, #8]
 800a0fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a100:	2b40      	cmp	r3, #64	; 0x40
 800a102:	f040 80b5 	bne.w	800a270 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	685b      	ldr	r3, [r3, #4]
 800a10e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a112:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a116:	2b00      	cmp	r3, #0
 800a118:	f000 8187 	beq.w	800a42a <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a122:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a126:	429a      	cmp	r2, r3
 800a128:	f080 817f 	bcs.w	800a42a <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a132:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	f003 0320 	and.w	r3, r3, #32
 800a142:	2b00      	cmp	r3, #0
 800a144:	f040 8086 	bne.w	800a254 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a150:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a154:	e853 3f00 	ldrex	r3, [r3]
 800a158:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a15c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a160:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a164:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	461a      	mov	r2, r3
 800a16e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a172:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a176:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a17a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a17e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a182:	e841 2300 	strex	r3, r2, [r1]
 800a186:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a18a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d1da      	bne.n	800a148 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	3308      	adds	r3, #8
 800a198:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a19a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a19c:	e853 3f00 	ldrex	r3, [r3]
 800a1a0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a1a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a1a4:	f023 0301 	bic.w	r3, r3, #1
 800a1a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	3308      	adds	r3, #8
 800a1b2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a1b6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a1ba:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1bc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a1be:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a1c2:	e841 2300 	strex	r3, r2, [r1]
 800a1c6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a1c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d1e1      	bne.n	800a192 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	3308      	adds	r3, #8
 800a1d4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a1d8:	e853 3f00 	ldrex	r3, [r3]
 800a1dc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a1de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a1e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a1e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	3308      	adds	r3, #8
 800a1ee:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a1f2:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a1f4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1f6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a1f8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a1fa:	e841 2300 	strex	r3, r2, [r1]
 800a1fe:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a200:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a202:	2b00      	cmp	r3, #0
 800a204:	d1e3      	bne.n	800a1ce <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	2220      	movs	r2, #32
 800a20a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	2200      	movs	r2, #0
 800a212:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a21a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a21c:	e853 3f00 	ldrex	r3, [r3]
 800a220:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a222:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a224:	f023 0310 	bic.w	r3, r3, #16
 800a228:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	461a      	mov	r2, r3
 800a232:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a236:	65bb      	str	r3, [r7, #88]	; 0x58
 800a238:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a23a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a23c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a23e:	e841 2300 	strex	r3, r2, [r1]
 800a242:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a244:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a246:	2b00      	cmp	r3, #0
 800a248:	d1e4      	bne.n	800a214 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a24e:	4618      	mov	r0, r3
 800a250:	f7fb ff0a 	bl	8006068 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a260:	b29b      	uxth	r3, r3
 800a262:	1ad3      	subs	r3, r2, r3
 800a264:	b29b      	uxth	r3, r3
 800a266:	4619      	mov	r1, r3
 800a268:	6878      	ldr	r0, [r7, #4]
 800a26a:	f000 f8fb 	bl	800a464 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a26e:	e0dc      	b.n	800a42a <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a27c:	b29b      	uxth	r3, r3
 800a27e:	1ad3      	subs	r3, r2, r3
 800a280:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a28a:	b29b      	uxth	r3, r3
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	f000 80ce 	beq.w	800a42e <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 800a292:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a296:	2b00      	cmp	r3, #0
 800a298:	f000 80c9 	beq.w	800a42e <HAL_UART_IRQHandler+0x622>
      {
#if defined(USART_CR1_FIFOEN)
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2a4:	e853 3f00 	ldrex	r3, [r3]
 800a2a8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a2aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2ac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a2b0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	461a      	mov	r2, r3
 800a2ba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a2be:	647b      	str	r3, [r7, #68]	; 0x44
 800a2c0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2c2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a2c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a2c6:	e841 2300 	strex	r3, r2, [r1]
 800a2ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a2cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d1e4      	bne.n	800a29c <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	3308      	adds	r3, #8
 800a2d8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2dc:	e853 3f00 	ldrex	r3, [r3]
 800a2e0:	623b      	str	r3, [r7, #32]
   return(result);
 800a2e2:	6a3b      	ldr	r3, [r7, #32]
 800a2e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a2e8:	f023 0301 	bic.w	r3, r3, #1
 800a2ec:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	3308      	adds	r3, #8
 800a2f6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a2fa:	633a      	str	r2, [r7, #48]	; 0x30
 800a2fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a300:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a302:	e841 2300 	strex	r3, r2, [r1]
 800a306:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d1e1      	bne.n	800a2d2 <HAL_UART_IRQHandler+0x4c6>
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	2220      	movs	r2, #32
 800a312:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	2200      	movs	r2, #0
 800a31a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	2200      	movs	r2, #0
 800a320:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a328:	693b      	ldr	r3, [r7, #16]
 800a32a:	e853 3f00 	ldrex	r3, [r3]
 800a32e:	60fb      	str	r3, [r7, #12]
   return(result);
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	f023 0310 	bic.w	r3, r3, #16
 800a336:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	461a      	mov	r2, r3
 800a340:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a344:	61fb      	str	r3, [r7, #28]
 800a346:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a348:	69b9      	ldr	r1, [r7, #24]
 800a34a:	69fa      	ldr	r2, [r7, #28]
 800a34c:	e841 2300 	strex	r3, r2, [r1]
 800a350:	617b      	str	r3, [r7, #20]
   return(result);
 800a352:	697b      	ldr	r3, [r7, #20]
 800a354:	2b00      	cmp	r3, #0
 800a356:	d1e4      	bne.n	800a322 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a358:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a35c:	4619      	mov	r1, r3
 800a35e:	6878      	ldr	r0, [r7, #4]
 800a360:	f000 f880 	bl	800a464 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a364:	e063      	b.n	800a42e <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a366:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a36a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d00e      	beq.n	800a390 <HAL_UART_IRQHandler+0x584>
 800a372:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a376:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d008      	beq.n	800a390 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800a386:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800a388:	6878      	ldr	r0, [r7, #4]
 800a38a:	f001 fb5f 	bl	800ba4c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a38e:	e051      	b.n	800a434 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800a390:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a394:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d014      	beq.n	800a3c6 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800a39c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a3a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d105      	bne.n	800a3b4 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800a3a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a3ac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d008      	beq.n	800a3c6 <HAL_UART_IRQHandler+0x5ba>
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
      && ((cr1its & USART_CR1_TXEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d03a      	beq.n	800a432 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a3c0:	6878      	ldr	r0, [r7, #4]
 800a3c2:	4798      	blx	r3
    }
    return;
 800a3c4:	e035      	b.n	800a432 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a3c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a3ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d009      	beq.n	800a3e6 <HAL_UART_IRQHandler+0x5da>
 800a3d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a3d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d003      	beq.n	800a3e6 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 800a3de:	6878      	ldr	r0, [r7, #4]
 800a3e0:	f000 fea4 	bl	800b12c <UART_EndTransmit_IT>
    return;
 800a3e4:	e026      	b.n	800a434 <HAL_UART_IRQHandler+0x628>
  }

#if defined(USART_CR1_FIFOEN)
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800a3e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a3ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d009      	beq.n	800a406 <HAL_UART_IRQHandler+0x5fa>
 800a3f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a3f6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d003      	beq.n	800a406 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800a3fe:	6878      	ldr	r0, [r7, #4]
 800a400:	f001 fb38 	bl	800ba74 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a404:	e016      	b.n	800a434 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800a406:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a40a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d010      	beq.n	800a434 <HAL_UART_IRQHandler+0x628>
 800a412:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a416:	2b00      	cmp	r3, #0
 800a418:	da0c      	bge.n	800a434 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800a41a:	6878      	ldr	r0, [r7, #4]
 800a41c:	f001 fb20 	bl	800ba60 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a420:	e008      	b.n	800a434 <HAL_UART_IRQHandler+0x628>
      return;
 800a422:	bf00      	nop
 800a424:	e006      	b.n	800a434 <HAL_UART_IRQHandler+0x628>
    return;
 800a426:	bf00      	nop
 800a428:	e004      	b.n	800a434 <HAL_UART_IRQHandler+0x628>
      return;
 800a42a:	bf00      	nop
 800a42c:	e002      	b.n	800a434 <HAL_UART_IRQHandler+0x628>
      return;
 800a42e:	bf00      	nop
 800a430:	e000      	b.n	800a434 <HAL_UART_IRQHandler+0x628>
    return;
 800a432:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 800a434:	37e8      	adds	r7, #232	; 0xe8
 800a436:	46bd      	mov	sp, r7
 800a438:	bd80      	pop	{r7, pc}
 800a43a:	bf00      	nop

0800a43c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a43c:	b480      	push	{r7}
 800a43e:	b083      	sub	sp, #12
 800a440:	af00      	add	r7, sp, #0
 800a442:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a444:	bf00      	nop
 800a446:	370c      	adds	r7, #12
 800a448:	46bd      	mov	sp, r7
 800a44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a44e:	4770      	bx	lr

0800a450 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a450:	b480      	push	{r7}
 800a452:	b083      	sub	sp, #12
 800a454:	af00      	add	r7, sp, #0
 800a456:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a458:	bf00      	nop
 800a45a:	370c      	adds	r7, #12
 800a45c:	46bd      	mov	sp, r7
 800a45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a462:	4770      	bx	lr

0800a464 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a464:	b480      	push	{r7}
 800a466:	b083      	sub	sp, #12
 800a468:	af00      	add	r7, sp, #0
 800a46a:	6078      	str	r0, [r7, #4]
 800a46c:	460b      	mov	r3, r1
 800a46e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a470:	bf00      	nop
 800a472:	370c      	adds	r7, #12
 800a474:	46bd      	mov	sp, r7
 800a476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a47a:	4770      	bx	lr

0800a47c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a47c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a480:	b08c      	sub	sp, #48	; 0x30
 800a482:	af00      	add	r7, sp, #0
 800a484:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a486:	2300      	movs	r3, #0
 800a488:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a48c:	697b      	ldr	r3, [r7, #20]
 800a48e:	689a      	ldr	r2, [r3, #8]
 800a490:	697b      	ldr	r3, [r7, #20]
 800a492:	691b      	ldr	r3, [r3, #16]
 800a494:	431a      	orrs	r2, r3
 800a496:	697b      	ldr	r3, [r7, #20]
 800a498:	695b      	ldr	r3, [r3, #20]
 800a49a:	431a      	orrs	r2, r3
 800a49c:	697b      	ldr	r3, [r7, #20]
 800a49e:	69db      	ldr	r3, [r3, #28]
 800a4a0:	4313      	orrs	r3, r2
 800a4a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a4a4:	697b      	ldr	r3, [r7, #20]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	681a      	ldr	r2, [r3, #0]
 800a4aa:	4baa      	ldr	r3, [pc, #680]	; (800a754 <UART_SetConfig+0x2d8>)
 800a4ac:	4013      	ands	r3, r2
 800a4ae:	697a      	ldr	r2, [r7, #20]
 800a4b0:	6812      	ldr	r2, [r2, #0]
 800a4b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a4b4:	430b      	orrs	r3, r1
 800a4b6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a4b8:	697b      	ldr	r3, [r7, #20]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	685b      	ldr	r3, [r3, #4]
 800a4be:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a4c2:	697b      	ldr	r3, [r7, #20]
 800a4c4:	68da      	ldr	r2, [r3, #12]
 800a4c6:	697b      	ldr	r3, [r7, #20]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	430a      	orrs	r2, r1
 800a4cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a4ce:	697b      	ldr	r3, [r7, #20]
 800a4d0:	699b      	ldr	r3, [r3, #24]
 800a4d2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a4d4:	697b      	ldr	r3, [r7, #20]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	4a9f      	ldr	r2, [pc, #636]	; (800a758 <UART_SetConfig+0x2dc>)
 800a4da:	4293      	cmp	r3, r2
 800a4dc:	d004      	beq.n	800a4e8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a4de:	697b      	ldr	r3, [r7, #20]
 800a4e0:	6a1b      	ldr	r3, [r3, #32]
 800a4e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a4e4:	4313      	orrs	r3, r2
 800a4e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a4e8:	697b      	ldr	r3, [r7, #20]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	689b      	ldr	r3, [r3, #8]
 800a4ee:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800a4f2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800a4f6:	697a      	ldr	r2, [r7, #20]
 800a4f8:	6812      	ldr	r2, [r2, #0]
 800a4fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a4fc:	430b      	orrs	r3, r1
 800a4fe:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a500:	697b      	ldr	r3, [r7, #20]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a506:	f023 010f 	bic.w	r1, r3, #15
 800a50a:	697b      	ldr	r3, [r7, #20]
 800a50c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a50e:	697b      	ldr	r3, [r7, #20]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	430a      	orrs	r2, r1
 800a514:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a516:	697b      	ldr	r3, [r7, #20]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	4a90      	ldr	r2, [pc, #576]	; (800a75c <UART_SetConfig+0x2e0>)
 800a51c:	4293      	cmp	r3, r2
 800a51e:	d125      	bne.n	800a56c <UART_SetConfig+0xf0>
 800a520:	4b8f      	ldr	r3, [pc, #572]	; (800a760 <UART_SetConfig+0x2e4>)
 800a522:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a526:	f003 0303 	and.w	r3, r3, #3
 800a52a:	2b03      	cmp	r3, #3
 800a52c:	d81a      	bhi.n	800a564 <UART_SetConfig+0xe8>
 800a52e:	a201      	add	r2, pc, #4	; (adr r2, 800a534 <UART_SetConfig+0xb8>)
 800a530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a534:	0800a545 	.word	0x0800a545
 800a538:	0800a555 	.word	0x0800a555
 800a53c:	0800a54d 	.word	0x0800a54d
 800a540:	0800a55d 	.word	0x0800a55d
 800a544:	2301      	movs	r3, #1
 800a546:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a54a:	e116      	b.n	800a77a <UART_SetConfig+0x2fe>
 800a54c:	2302      	movs	r3, #2
 800a54e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a552:	e112      	b.n	800a77a <UART_SetConfig+0x2fe>
 800a554:	2304      	movs	r3, #4
 800a556:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a55a:	e10e      	b.n	800a77a <UART_SetConfig+0x2fe>
 800a55c:	2308      	movs	r3, #8
 800a55e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a562:	e10a      	b.n	800a77a <UART_SetConfig+0x2fe>
 800a564:	2310      	movs	r3, #16
 800a566:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a56a:	e106      	b.n	800a77a <UART_SetConfig+0x2fe>
 800a56c:	697b      	ldr	r3, [r7, #20]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	4a7c      	ldr	r2, [pc, #496]	; (800a764 <UART_SetConfig+0x2e8>)
 800a572:	4293      	cmp	r3, r2
 800a574:	d138      	bne.n	800a5e8 <UART_SetConfig+0x16c>
 800a576:	4b7a      	ldr	r3, [pc, #488]	; (800a760 <UART_SetConfig+0x2e4>)
 800a578:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a57c:	f003 030c 	and.w	r3, r3, #12
 800a580:	2b0c      	cmp	r3, #12
 800a582:	d82d      	bhi.n	800a5e0 <UART_SetConfig+0x164>
 800a584:	a201      	add	r2, pc, #4	; (adr r2, 800a58c <UART_SetConfig+0x110>)
 800a586:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a58a:	bf00      	nop
 800a58c:	0800a5c1 	.word	0x0800a5c1
 800a590:	0800a5e1 	.word	0x0800a5e1
 800a594:	0800a5e1 	.word	0x0800a5e1
 800a598:	0800a5e1 	.word	0x0800a5e1
 800a59c:	0800a5d1 	.word	0x0800a5d1
 800a5a0:	0800a5e1 	.word	0x0800a5e1
 800a5a4:	0800a5e1 	.word	0x0800a5e1
 800a5a8:	0800a5e1 	.word	0x0800a5e1
 800a5ac:	0800a5c9 	.word	0x0800a5c9
 800a5b0:	0800a5e1 	.word	0x0800a5e1
 800a5b4:	0800a5e1 	.word	0x0800a5e1
 800a5b8:	0800a5e1 	.word	0x0800a5e1
 800a5bc:	0800a5d9 	.word	0x0800a5d9
 800a5c0:	2300      	movs	r3, #0
 800a5c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a5c6:	e0d8      	b.n	800a77a <UART_SetConfig+0x2fe>
 800a5c8:	2302      	movs	r3, #2
 800a5ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a5ce:	e0d4      	b.n	800a77a <UART_SetConfig+0x2fe>
 800a5d0:	2304      	movs	r3, #4
 800a5d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a5d6:	e0d0      	b.n	800a77a <UART_SetConfig+0x2fe>
 800a5d8:	2308      	movs	r3, #8
 800a5da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a5de:	e0cc      	b.n	800a77a <UART_SetConfig+0x2fe>
 800a5e0:	2310      	movs	r3, #16
 800a5e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a5e6:	e0c8      	b.n	800a77a <UART_SetConfig+0x2fe>
 800a5e8:	697b      	ldr	r3, [r7, #20]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	4a5e      	ldr	r2, [pc, #376]	; (800a768 <UART_SetConfig+0x2ec>)
 800a5ee:	4293      	cmp	r3, r2
 800a5f0:	d125      	bne.n	800a63e <UART_SetConfig+0x1c2>
 800a5f2:	4b5b      	ldr	r3, [pc, #364]	; (800a760 <UART_SetConfig+0x2e4>)
 800a5f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5f8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a5fc:	2b30      	cmp	r3, #48	; 0x30
 800a5fe:	d016      	beq.n	800a62e <UART_SetConfig+0x1b2>
 800a600:	2b30      	cmp	r3, #48	; 0x30
 800a602:	d818      	bhi.n	800a636 <UART_SetConfig+0x1ba>
 800a604:	2b20      	cmp	r3, #32
 800a606:	d00a      	beq.n	800a61e <UART_SetConfig+0x1a2>
 800a608:	2b20      	cmp	r3, #32
 800a60a:	d814      	bhi.n	800a636 <UART_SetConfig+0x1ba>
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d002      	beq.n	800a616 <UART_SetConfig+0x19a>
 800a610:	2b10      	cmp	r3, #16
 800a612:	d008      	beq.n	800a626 <UART_SetConfig+0x1aa>
 800a614:	e00f      	b.n	800a636 <UART_SetConfig+0x1ba>
 800a616:	2300      	movs	r3, #0
 800a618:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a61c:	e0ad      	b.n	800a77a <UART_SetConfig+0x2fe>
 800a61e:	2302      	movs	r3, #2
 800a620:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a624:	e0a9      	b.n	800a77a <UART_SetConfig+0x2fe>
 800a626:	2304      	movs	r3, #4
 800a628:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a62c:	e0a5      	b.n	800a77a <UART_SetConfig+0x2fe>
 800a62e:	2308      	movs	r3, #8
 800a630:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a634:	e0a1      	b.n	800a77a <UART_SetConfig+0x2fe>
 800a636:	2310      	movs	r3, #16
 800a638:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a63c:	e09d      	b.n	800a77a <UART_SetConfig+0x2fe>
 800a63e:	697b      	ldr	r3, [r7, #20]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	4a4a      	ldr	r2, [pc, #296]	; (800a76c <UART_SetConfig+0x2f0>)
 800a644:	4293      	cmp	r3, r2
 800a646:	d125      	bne.n	800a694 <UART_SetConfig+0x218>
 800a648:	4b45      	ldr	r3, [pc, #276]	; (800a760 <UART_SetConfig+0x2e4>)
 800a64a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a64e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a652:	2bc0      	cmp	r3, #192	; 0xc0
 800a654:	d016      	beq.n	800a684 <UART_SetConfig+0x208>
 800a656:	2bc0      	cmp	r3, #192	; 0xc0
 800a658:	d818      	bhi.n	800a68c <UART_SetConfig+0x210>
 800a65a:	2b80      	cmp	r3, #128	; 0x80
 800a65c:	d00a      	beq.n	800a674 <UART_SetConfig+0x1f8>
 800a65e:	2b80      	cmp	r3, #128	; 0x80
 800a660:	d814      	bhi.n	800a68c <UART_SetConfig+0x210>
 800a662:	2b00      	cmp	r3, #0
 800a664:	d002      	beq.n	800a66c <UART_SetConfig+0x1f0>
 800a666:	2b40      	cmp	r3, #64	; 0x40
 800a668:	d008      	beq.n	800a67c <UART_SetConfig+0x200>
 800a66a:	e00f      	b.n	800a68c <UART_SetConfig+0x210>
 800a66c:	2300      	movs	r3, #0
 800a66e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a672:	e082      	b.n	800a77a <UART_SetConfig+0x2fe>
 800a674:	2302      	movs	r3, #2
 800a676:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a67a:	e07e      	b.n	800a77a <UART_SetConfig+0x2fe>
 800a67c:	2304      	movs	r3, #4
 800a67e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a682:	e07a      	b.n	800a77a <UART_SetConfig+0x2fe>
 800a684:	2308      	movs	r3, #8
 800a686:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a68a:	e076      	b.n	800a77a <UART_SetConfig+0x2fe>
 800a68c:	2310      	movs	r3, #16
 800a68e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a692:	e072      	b.n	800a77a <UART_SetConfig+0x2fe>
 800a694:	697b      	ldr	r3, [r7, #20]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	4a35      	ldr	r2, [pc, #212]	; (800a770 <UART_SetConfig+0x2f4>)
 800a69a:	4293      	cmp	r3, r2
 800a69c:	d12a      	bne.n	800a6f4 <UART_SetConfig+0x278>
 800a69e:	4b30      	ldr	r3, [pc, #192]	; (800a760 <UART_SetConfig+0x2e4>)
 800a6a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a6a8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a6ac:	d01a      	beq.n	800a6e4 <UART_SetConfig+0x268>
 800a6ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a6b2:	d81b      	bhi.n	800a6ec <UART_SetConfig+0x270>
 800a6b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a6b8:	d00c      	beq.n	800a6d4 <UART_SetConfig+0x258>
 800a6ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a6be:	d815      	bhi.n	800a6ec <UART_SetConfig+0x270>
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d003      	beq.n	800a6cc <UART_SetConfig+0x250>
 800a6c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a6c8:	d008      	beq.n	800a6dc <UART_SetConfig+0x260>
 800a6ca:	e00f      	b.n	800a6ec <UART_SetConfig+0x270>
 800a6cc:	2300      	movs	r3, #0
 800a6ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a6d2:	e052      	b.n	800a77a <UART_SetConfig+0x2fe>
 800a6d4:	2302      	movs	r3, #2
 800a6d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a6da:	e04e      	b.n	800a77a <UART_SetConfig+0x2fe>
 800a6dc:	2304      	movs	r3, #4
 800a6de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a6e2:	e04a      	b.n	800a77a <UART_SetConfig+0x2fe>
 800a6e4:	2308      	movs	r3, #8
 800a6e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a6ea:	e046      	b.n	800a77a <UART_SetConfig+0x2fe>
 800a6ec:	2310      	movs	r3, #16
 800a6ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a6f2:	e042      	b.n	800a77a <UART_SetConfig+0x2fe>
 800a6f4:	697b      	ldr	r3, [r7, #20]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	4a17      	ldr	r2, [pc, #92]	; (800a758 <UART_SetConfig+0x2dc>)
 800a6fa:	4293      	cmp	r3, r2
 800a6fc:	d13a      	bne.n	800a774 <UART_SetConfig+0x2f8>
 800a6fe:	4b18      	ldr	r3, [pc, #96]	; (800a760 <UART_SetConfig+0x2e4>)
 800a700:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a704:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a708:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a70c:	d01a      	beq.n	800a744 <UART_SetConfig+0x2c8>
 800a70e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a712:	d81b      	bhi.n	800a74c <UART_SetConfig+0x2d0>
 800a714:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a718:	d00c      	beq.n	800a734 <UART_SetConfig+0x2b8>
 800a71a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a71e:	d815      	bhi.n	800a74c <UART_SetConfig+0x2d0>
 800a720:	2b00      	cmp	r3, #0
 800a722:	d003      	beq.n	800a72c <UART_SetConfig+0x2b0>
 800a724:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a728:	d008      	beq.n	800a73c <UART_SetConfig+0x2c0>
 800a72a:	e00f      	b.n	800a74c <UART_SetConfig+0x2d0>
 800a72c:	2300      	movs	r3, #0
 800a72e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a732:	e022      	b.n	800a77a <UART_SetConfig+0x2fe>
 800a734:	2302      	movs	r3, #2
 800a736:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a73a:	e01e      	b.n	800a77a <UART_SetConfig+0x2fe>
 800a73c:	2304      	movs	r3, #4
 800a73e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a742:	e01a      	b.n	800a77a <UART_SetConfig+0x2fe>
 800a744:	2308      	movs	r3, #8
 800a746:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a74a:	e016      	b.n	800a77a <UART_SetConfig+0x2fe>
 800a74c:	2310      	movs	r3, #16
 800a74e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a752:	e012      	b.n	800a77a <UART_SetConfig+0x2fe>
 800a754:	cfff69f3 	.word	0xcfff69f3
 800a758:	40008000 	.word	0x40008000
 800a75c:	40013800 	.word	0x40013800
 800a760:	40021000 	.word	0x40021000
 800a764:	40004400 	.word	0x40004400
 800a768:	40004800 	.word	0x40004800
 800a76c:	40004c00 	.word	0x40004c00
 800a770:	40005000 	.word	0x40005000
 800a774:	2310      	movs	r3, #16
 800a776:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a77a:	697b      	ldr	r3, [r7, #20]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	4aae      	ldr	r2, [pc, #696]	; (800aa38 <UART_SetConfig+0x5bc>)
 800a780:	4293      	cmp	r3, r2
 800a782:	f040 8097 	bne.w	800a8b4 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a786:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a78a:	2b08      	cmp	r3, #8
 800a78c:	d823      	bhi.n	800a7d6 <UART_SetConfig+0x35a>
 800a78e:	a201      	add	r2, pc, #4	; (adr r2, 800a794 <UART_SetConfig+0x318>)
 800a790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a794:	0800a7b9 	.word	0x0800a7b9
 800a798:	0800a7d7 	.word	0x0800a7d7
 800a79c:	0800a7c1 	.word	0x0800a7c1
 800a7a0:	0800a7d7 	.word	0x0800a7d7
 800a7a4:	0800a7c7 	.word	0x0800a7c7
 800a7a8:	0800a7d7 	.word	0x0800a7d7
 800a7ac:	0800a7d7 	.word	0x0800a7d7
 800a7b0:	0800a7d7 	.word	0x0800a7d7
 800a7b4:	0800a7cf 	.word	0x0800a7cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a7b8:	f7fe f8e2 	bl	8008980 <HAL_RCC_GetPCLK1Freq>
 800a7bc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a7be:	e010      	b.n	800a7e2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a7c0:	4b9e      	ldr	r3, [pc, #632]	; (800aa3c <UART_SetConfig+0x5c0>)
 800a7c2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a7c4:	e00d      	b.n	800a7e2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a7c6:	f7fe f843 	bl	8008850 <HAL_RCC_GetSysClockFreq>
 800a7ca:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a7cc:	e009      	b.n	800a7e2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a7ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a7d2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a7d4:	e005      	b.n	800a7e2 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800a7d6:	2300      	movs	r3, #0
 800a7d8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800a7da:	2301      	movs	r3, #1
 800a7dc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800a7e0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a7e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	f000 8130 	beq.w	800aa4a <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a7ea:	697b      	ldr	r3, [r7, #20]
 800a7ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7ee:	4a94      	ldr	r2, [pc, #592]	; (800aa40 <UART_SetConfig+0x5c4>)
 800a7f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a7f4:	461a      	mov	r2, r3
 800a7f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7f8:	fbb3 f3f2 	udiv	r3, r3, r2
 800a7fc:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a7fe:	697b      	ldr	r3, [r7, #20]
 800a800:	685a      	ldr	r2, [r3, #4]
 800a802:	4613      	mov	r3, r2
 800a804:	005b      	lsls	r3, r3, #1
 800a806:	4413      	add	r3, r2
 800a808:	69ba      	ldr	r2, [r7, #24]
 800a80a:	429a      	cmp	r2, r3
 800a80c:	d305      	bcc.n	800a81a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a80e:	697b      	ldr	r3, [r7, #20]
 800a810:	685b      	ldr	r3, [r3, #4]
 800a812:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a814:	69ba      	ldr	r2, [r7, #24]
 800a816:	429a      	cmp	r2, r3
 800a818:	d903      	bls.n	800a822 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800a81a:	2301      	movs	r3, #1
 800a81c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800a820:	e113      	b.n	800aa4a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a824:	2200      	movs	r2, #0
 800a826:	60bb      	str	r3, [r7, #8]
 800a828:	60fa      	str	r2, [r7, #12]
 800a82a:	697b      	ldr	r3, [r7, #20]
 800a82c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a82e:	4a84      	ldr	r2, [pc, #528]	; (800aa40 <UART_SetConfig+0x5c4>)
 800a830:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a834:	b29b      	uxth	r3, r3
 800a836:	2200      	movs	r2, #0
 800a838:	603b      	str	r3, [r7, #0]
 800a83a:	607a      	str	r2, [r7, #4]
 800a83c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a840:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a844:	f7f6 fa18 	bl	8000c78 <__aeabi_uldivmod>
 800a848:	4602      	mov	r2, r0
 800a84a:	460b      	mov	r3, r1
 800a84c:	4610      	mov	r0, r2
 800a84e:	4619      	mov	r1, r3
 800a850:	f04f 0200 	mov.w	r2, #0
 800a854:	f04f 0300 	mov.w	r3, #0
 800a858:	020b      	lsls	r3, r1, #8
 800a85a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a85e:	0202      	lsls	r2, r0, #8
 800a860:	6979      	ldr	r1, [r7, #20]
 800a862:	6849      	ldr	r1, [r1, #4]
 800a864:	0849      	lsrs	r1, r1, #1
 800a866:	2000      	movs	r0, #0
 800a868:	460c      	mov	r4, r1
 800a86a:	4605      	mov	r5, r0
 800a86c:	eb12 0804 	adds.w	r8, r2, r4
 800a870:	eb43 0905 	adc.w	r9, r3, r5
 800a874:	697b      	ldr	r3, [r7, #20]
 800a876:	685b      	ldr	r3, [r3, #4]
 800a878:	2200      	movs	r2, #0
 800a87a:	469a      	mov	sl, r3
 800a87c:	4693      	mov	fp, r2
 800a87e:	4652      	mov	r2, sl
 800a880:	465b      	mov	r3, fp
 800a882:	4640      	mov	r0, r8
 800a884:	4649      	mov	r1, r9
 800a886:	f7f6 f9f7 	bl	8000c78 <__aeabi_uldivmod>
 800a88a:	4602      	mov	r2, r0
 800a88c:	460b      	mov	r3, r1
 800a88e:	4613      	mov	r3, r2
 800a890:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a892:	6a3b      	ldr	r3, [r7, #32]
 800a894:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a898:	d308      	bcc.n	800a8ac <UART_SetConfig+0x430>
 800a89a:	6a3b      	ldr	r3, [r7, #32]
 800a89c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a8a0:	d204      	bcs.n	800a8ac <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800a8a2:	697b      	ldr	r3, [r7, #20]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	6a3a      	ldr	r2, [r7, #32]
 800a8a8:	60da      	str	r2, [r3, #12]
 800a8aa:	e0ce      	b.n	800aa4a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800a8ac:	2301      	movs	r3, #1
 800a8ae:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800a8b2:	e0ca      	b.n	800aa4a <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a8b4:	697b      	ldr	r3, [r7, #20]
 800a8b6:	69db      	ldr	r3, [r3, #28]
 800a8b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a8bc:	d166      	bne.n	800a98c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800a8be:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a8c2:	2b08      	cmp	r3, #8
 800a8c4:	d827      	bhi.n	800a916 <UART_SetConfig+0x49a>
 800a8c6:	a201      	add	r2, pc, #4	; (adr r2, 800a8cc <UART_SetConfig+0x450>)
 800a8c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8cc:	0800a8f1 	.word	0x0800a8f1
 800a8d0:	0800a8f9 	.word	0x0800a8f9
 800a8d4:	0800a901 	.word	0x0800a901
 800a8d8:	0800a917 	.word	0x0800a917
 800a8dc:	0800a907 	.word	0x0800a907
 800a8e0:	0800a917 	.word	0x0800a917
 800a8e4:	0800a917 	.word	0x0800a917
 800a8e8:	0800a917 	.word	0x0800a917
 800a8ec:	0800a90f 	.word	0x0800a90f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a8f0:	f7fe f846 	bl	8008980 <HAL_RCC_GetPCLK1Freq>
 800a8f4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a8f6:	e014      	b.n	800a922 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a8f8:	f7fe f858 	bl	80089ac <HAL_RCC_GetPCLK2Freq>
 800a8fc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a8fe:	e010      	b.n	800a922 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a900:	4b4e      	ldr	r3, [pc, #312]	; (800aa3c <UART_SetConfig+0x5c0>)
 800a902:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a904:	e00d      	b.n	800a922 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a906:	f7fd ffa3 	bl	8008850 <HAL_RCC_GetSysClockFreq>
 800a90a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a90c:	e009      	b.n	800a922 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a90e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a912:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a914:	e005      	b.n	800a922 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800a916:	2300      	movs	r3, #0
 800a918:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800a91a:	2301      	movs	r3, #1
 800a91c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800a920:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a924:	2b00      	cmp	r3, #0
 800a926:	f000 8090 	beq.w	800aa4a <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a92a:	697b      	ldr	r3, [r7, #20]
 800a92c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a92e:	4a44      	ldr	r2, [pc, #272]	; (800aa40 <UART_SetConfig+0x5c4>)
 800a930:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a934:	461a      	mov	r2, r3
 800a936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a938:	fbb3 f3f2 	udiv	r3, r3, r2
 800a93c:	005a      	lsls	r2, r3, #1
 800a93e:	697b      	ldr	r3, [r7, #20]
 800a940:	685b      	ldr	r3, [r3, #4]
 800a942:	085b      	lsrs	r3, r3, #1
 800a944:	441a      	add	r2, r3
 800a946:	697b      	ldr	r3, [r7, #20]
 800a948:	685b      	ldr	r3, [r3, #4]
 800a94a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a94e:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a950:	6a3b      	ldr	r3, [r7, #32]
 800a952:	2b0f      	cmp	r3, #15
 800a954:	d916      	bls.n	800a984 <UART_SetConfig+0x508>
 800a956:	6a3b      	ldr	r3, [r7, #32]
 800a958:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a95c:	d212      	bcs.n	800a984 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a95e:	6a3b      	ldr	r3, [r7, #32]
 800a960:	b29b      	uxth	r3, r3
 800a962:	f023 030f 	bic.w	r3, r3, #15
 800a966:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a968:	6a3b      	ldr	r3, [r7, #32]
 800a96a:	085b      	lsrs	r3, r3, #1
 800a96c:	b29b      	uxth	r3, r3
 800a96e:	f003 0307 	and.w	r3, r3, #7
 800a972:	b29a      	uxth	r2, r3
 800a974:	8bfb      	ldrh	r3, [r7, #30]
 800a976:	4313      	orrs	r3, r2
 800a978:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800a97a:	697b      	ldr	r3, [r7, #20]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	8bfa      	ldrh	r2, [r7, #30]
 800a980:	60da      	str	r2, [r3, #12]
 800a982:	e062      	b.n	800aa4a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800a984:	2301      	movs	r3, #1
 800a986:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800a98a:	e05e      	b.n	800aa4a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a98c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a990:	2b08      	cmp	r3, #8
 800a992:	d828      	bhi.n	800a9e6 <UART_SetConfig+0x56a>
 800a994:	a201      	add	r2, pc, #4	; (adr r2, 800a99c <UART_SetConfig+0x520>)
 800a996:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a99a:	bf00      	nop
 800a99c:	0800a9c1 	.word	0x0800a9c1
 800a9a0:	0800a9c9 	.word	0x0800a9c9
 800a9a4:	0800a9d1 	.word	0x0800a9d1
 800a9a8:	0800a9e7 	.word	0x0800a9e7
 800a9ac:	0800a9d7 	.word	0x0800a9d7
 800a9b0:	0800a9e7 	.word	0x0800a9e7
 800a9b4:	0800a9e7 	.word	0x0800a9e7
 800a9b8:	0800a9e7 	.word	0x0800a9e7
 800a9bc:	0800a9df 	.word	0x0800a9df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a9c0:	f7fd ffde 	bl	8008980 <HAL_RCC_GetPCLK1Freq>
 800a9c4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a9c6:	e014      	b.n	800a9f2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a9c8:	f7fd fff0 	bl	80089ac <HAL_RCC_GetPCLK2Freq>
 800a9cc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a9ce:	e010      	b.n	800a9f2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a9d0:	4b1a      	ldr	r3, [pc, #104]	; (800aa3c <UART_SetConfig+0x5c0>)
 800a9d2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a9d4:	e00d      	b.n	800a9f2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a9d6:	f7fd ff3b 	bl	8008850 <HAL_RCC_GetSysClockFreq>
 800a9da:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a9dc:	e009      	b.n	800a9f2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a9de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a9e2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a9e4:	e005      	b.n	800a9f2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800a9e6:	2300      	movs	r3, #0
 800a9e8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800a9ea:	2301      	movs	r3, #1
 800a9ec:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800a9f0:	bf00      	nop
    }

    if (pclk != 0U)
 800a9f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d028      	beq.n	800aa4a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a9f8:	697b      	ldr	r3, [r7, #20]
 800a9fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9fc:	4a10      	ldr	r2, [pc, #64]	; (800aa40 <UART_SetConfig+0x5c4>)
 800a9fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aa02:	461a      	mov	r2, r3
 800aa04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa06:	fbb3 f2f2 	udiv	r2, r3, r2
 800aa0a:	697b      	ldr	r3, [r7, #20]
 800aa0c:	685b      	ldr	r3, [r3, #4]
 800aa0e:	085b      	lsrs	r3, r3, #1
 800aa10:	441a      	add	r2, r3
 800aa12:	697b      	ldr	r3, [r7, #20]
 800aa14:	685b      	ldr	r3, [r3, #4]
 800aa16:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa1a:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800aa1c:	6a3b      	ldr	r3, [r7, #32]
 800aa1e:	2b0f      	cmp	r3, #15
 800aa20:	d910      	bls.n	800aa44 <UART_SetConfig+0x5c8>
 800aa22:	6a3b      	ldr	r3, [r7, #32]
 800aa24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aa28:	d20c      	bcs.n	800aa44 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800aa2a:	6a3b      	ldr	r3, [r7, #32]
 800aa2c:	b29a      	uxth	r2, r3
 800aa2e:	697b      	ldr	r3, [r7, #20]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	60da      	str	r2, [r3, #12]
 800aa34:	e009      	b.n	800aa4a <UART_SetConfig+0x5ce>
 800aa36:	bf00      	nop
 800aa38:	40008000 	.word	0x40008000
 800aa3c:	00f42400 	.word	0x00f42400
 800aa40:	08014614 	.word	0x08014614
      }
      else
      {
        ret = HAL_ERROR;
 800aa44:	2301      	movs	r3, #1
 800aa46:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800aa4a:	697b      	ldr	r3, [r7, #20]
 800aa4c:	2201      	movs	r2, #1
 800aa4e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800aa52:	697b      	ldr	r3, [r7, #20]
 800aa54:	2201      	movs	r2, #1
 800aa56:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800aa5a:	697b      	ldr	r3, [r7, #20]
 800aa5c:	2200      	movs	r2, #0
 800aa5e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800aa60:	697b      	ldr	r3, [r7, #20]
 800aa62:	2200      	movs	r2, #0
 800aa64:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800aa66:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800aa6a:	4618      	mov	r0, r3
 800aa6c:	3730      	adds	r7, #48	; 0x30
 800aa6e:	46bd      	mov	sp, r7
 800aa70:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800aa74 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800aa74:	b480      	push	{r7}
 800aa76:	b083      	sub	sp, #12
 800aa78:	af00      	add	r7, sp, #0
 800aa7a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa80:	f003 0301 	and.w	r3, r3, #1
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d00a      	beq.n	800aa9e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	685b      	ldr	r3, [r3, #4]
 800aa8e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	430a      	orrs	r2, r1
 800aa9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aaa2:	f003 0302 	and.w	r3, r3, #2
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d00a      	beq.n	800aac0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	685b      	ldr	r3, [r3, #4]
 800aab0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	430a      	orrs	r2, r1
 800aabe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aac4:	f003 0304 	and.w	r3, r3, #4
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d00a      	beq.n	800aae2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	685b      	ldr	r3, [r3, #4]
 800aad2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	430a      	orrs	r2, r1
 800aae0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aae6:	f003 0308 	and.w	r3, r3, #8
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d00a      	beq.n	800ab04 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	685b      	ldr	r3, [r3, #4]
 800aaf4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	430a      	orrs	r2, r1
 800ab02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab08:	f003 0310 	and.w	r3, r3, #16
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d00a      	beq.n	800ab26 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	689b      	ldr	r3, [r3, #8]
 800ab16:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	430a      	orrs	r2, r1
 800ab24:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab2a:	f003 0320 	and.w	r3, r3, #32
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d00a      	beq.n	800ab48 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	689b      	ldr	r3, [r3, #8]
 800ab38:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	430a      	orrs	r2, r1
 800ab46:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d01a      	beq.n	800ab8a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	685b      	ldr	r3, [r3, #4]
 800ab5a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	430a      	orrs	r2, r1
 800ab68:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ab72:	d10a      	bne.n	800ab8a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	685b      	ldr	r3, [r3, #4]
 800ab7a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	430a      	orrs	r2, r1
 800ab88:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d00a      	beq.n	800abac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	685b      	ldr	r3, [r3, #4]
 800ab9c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	430a      	orrs	r2, r1
 800abaa:	605a      	str	r2, [r3, #4]
  }
}
 800abac:	bf00      	nop
 800abae:	370c      	adds	r7, #12
 800abb0:	46bd      	mov	sp, r7
 800abb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb6:	4770      	bx	lr

0800abb8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800abb8:	b580      	push	{r7, lr}
 800abba:	b086      	sub	sp, #24
 800abbc:	af02      	add	r7, sp, #8
 800abbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	2200      	movs	r2, #0
 800abc4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800abc8:	f7fb f93c 	bl	8005e44 <HAL_GetTick>
 800abcc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	f003 0308 	and.w	r3, r3, #8
 800abd8:	2b08      	cmp	r3, #8
 800abda:	d10e      	bne.n	800abfa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800abdc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800abe0:	9300      	str	r3, [sp, #0]
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	2200      	movs	r2, #0
 800abe6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800abea:	6878      	ldr	r0, [r7, #4]
 800abec:	f000 f82f 	bl	800ac4e <UART_WaitOnFlagUntilTimeout>
 800abf0:	4603      	mov	r3, r0
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d001      	beq.n	800abfa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800abf6:	2303      	movs	r3, #3
 800abf8:	e025      	b.n	800ac46 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	f003 0304 	and.w	r3, r3, #4
 800ac04:	2b04      	cmp	r3, #4
 800ac06:	d10e      	bne.n	800ac26 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ac08:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ac0c:	9300      	str	r3, [sp, #0]
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	2200      	movs	r2, #0
 800ac12:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ac16:	6878      	ldr	r0, [r7, #4]
 800ac18:	f000 f819 	bl	800ac4e <UART_WaitOnFlagUntilTimeout>
 800ac1c:	4603      	mov	r3, r0
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d001      	beq.n	800ac26 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ac22:	2303      	movs	r3, #3
 800ac24:	e00f      	b.n	800ac46 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	2220      	movs	r2, #32
 800ac2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	2220      	movs	r2, #32
 800ac32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	2200      	movs	r2, #0
 800ac3a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	2200      	movs	r2, #0
 800ac40:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ac44:	2300      	movs	r3, #0
}
 800ac46:	4618      	mov	r0, r3
 800ac48:	3710      	adds	r7, #16
 800ac4a:	46bd      	mov	sp, r7
 800ac4c:	bd80      	pop	{r7, pc}

0800ac4e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ac4e:	b580      	push	{r7, lr}
 800ac50:	b09c      	sub	sp, #112	; 0x70
 800ac52:	af00      	add	r7, sp, #0
 800ac54:	60f8      	str	r0, [r7, #12]
 800ac56:	60b9      	str	r1, [r7, #8]
 800ac58:	603b      	str	r3, [r7, #0]
 800ac5a:	4613      	mov	r3, r2
 800ac5c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ac5e:	e0a9      	b.n	800adb4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ac60:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ac62:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac66:	f000 80a5 	beq.w	800adb4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ac6a:	f7fb f8eb 	bl	8005e44 <HAL_GetTick>
 800ac6e:	4602      	mov	r2, r0
 800ac70:	683b      	ldr	r3, [r7, #0]
 800ac72:	1ad3      	subs	r3, r2, r3
 800ac74:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800ac76:	429a      	cmp	r2, r3
 800ac78:	d302      	bcc.n	800ac80 <UART_WaitOnFlagUntilTimeout+0x32>
 800ac7a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d140      	bne.n	800ad02 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ac88:	e853 3f00 	ldrex	r3, [r3]
 800ac8c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800ac8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ac90:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ac94:	667b      	str	r3, [r7, #100]	; 0x64
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	461a      	mov	r2, r3
 800ac9c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ac9e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800aca0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aca2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800aca4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800aca6:	e841 2300 	strex	r3, r2, [r1]
 800acaa:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800acac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d1e6      	bne.n	800ac80 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	3308      	adds	r3, #8
 800acb8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800acbc:	e853 3f00 	ldrex	r3, [r3]
 800acc0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800acc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acc4:	f023 0301 	bic.w	r3, r3, #1
 800acc8:	663b      	str	r3, [r7, #96]	; 0x60
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	3308      	adds	r3, #8
 800acd0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800acd2:	64ba      	str	r2, [r7, #72]	; 0x48
 800acd4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acd6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800acd8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800acda:	e841 2300 	strex	r3, r2, [r1]
 800acde:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800ace0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d1e5      	bne.n	800acb2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	2220      	movs	r2, #32
 800acea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	2220      	movs	r2, #32
 800acf2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	2200      	movs	r2, #0
 800acfa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800acfe:	2303      	movs	r3, #3
 800ad00:	e069      	b.n	800add6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	f003 0304 	and.w	r3, r3, #4
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d051      	beq.n	800adb4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	69db      	ldr	r3, [r3, #28]
 800ad16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ad1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ad1e:	d149      	bne.n	800adb4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ad28:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad32:	e853 3f00 	ldrex	r3, [r3]
 800ad36:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ad38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad3a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ad3e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	461a      	mov	r2, r3
 800ad46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ad48:	637b      	str	r3, [r7, #52]	; 0x34
 800ad4a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad4c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ad4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ad50:	e841 2300 	strex	r3, r2, [r1]
 800ad54:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ad56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d1e6      	bne.n	800ad2a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	3308      	adds	r3, #8
 800ad62:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad64:	697b      	ldr	r3, [r7, #20]
 800ad66:	e853 3f00 	ldrex	r3, [r3]
 800ad6a:	613b      	str	r3, [r7, #16]
   return(result);
 800ad6c:	693b      	ldr	r3, [r7, #16]
 800ad6e:	f023 0301 	bic.w	r3, r3, #1
 800ad72:	66bb      	str	r3, [r7, #104]	; 0x68
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	3308      	adds	r3, #8
 800ad7a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ad7c:	623a      	str	r2, [r7, #32]
 800ad7e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad80:	69f9      	ldr	r1, [r7, #28]
 800ad82:	6a3a      	ldr	r2, [r7, #32]
 800ad84:	e841 2300 	strex	r3, r2, [r1]
 800ad88:	61bb      	str	r3, [r7, #24]
   return(result);
 800ad8a:	69bb      	ldr	r3, [r7, #24]
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d1e5      	bne.n	800ad5c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	2220      	movs	r2, #32
 800ad94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	2220      	movs	r2, #32
 800ad9c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	2220      	movs	r2, #32
 800ada4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	2200      	movs	r2, #0
 800adac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800adb0:	2303      	movs	r3, #3
 800adb2:	e010      	b.n	800add6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	69da      	ldr	r2, [r3, #28]
 800adba:	68bb      	ldr	r3, [r7, #8]
 800adbc:	4013      	ands	r3, r2
 800adbe:	68ba      	ldr	r2, [r7, #8]
 800adc0:	429a      	cmp	r2, r3
 800adc2:	bf0c      	ite	eq
 800adc4:	2301      	moveq	r3, #1
 800adc6:	2300      	movne	r3, #0
 800adc8:	b2db      	uxtb	r3, r3
 800adca:	461a      	mov	r2, r3
 800adcc:	79fb      	ldrb	r3, [r7, #7]
 800adce:	429a      	cmp	r2, r3
 800add0:	f43f af46 	beq.w	800ac60 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800add4:	2300      	movs	r3, #0
}
 800add6:	4618      	mov	r0, r3
 800add8:	3770      	adds	r7, #112	; 0x70
 800adda:	46bd      	mov	sp, r7
 800addc:	bd80      	pop	{r7, pc}
	...

0800ade0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ade0:	b480      	push	{r7}
 800ade2:	b0a3      	sub	sp, #140	; 0x8c
 800ade4:	af00      	add	r7, sp, #0
 800ade6:	60f8      	str	r0, [r7, #12]
 800ade8:	60b9      	str	r1, [r7, #8]
 800adea:	4613      	mov	r3, r2
 800adec:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	68ba      	ldr	r2, [r7, #8]
 800adf2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	88fa      	ldrh	r2, [r7, #6]
 800adf8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	88fa      	ldrh	r2, [r7, #6]
 800ae00:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	2200      	movs	r2, #0
 800ae08:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	689b      	ldr	r3, [r3, #8]
 800ae0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ae12:	d10e      	bne.n	800ae32 <UART_Start_Receive_IT+0x52>
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	691b      	ldr	r3, [r3, #16]
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d105      	bne.n	800ae28 <UART_Start_Receive_IT+0x48>
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	f240 12ff 	movw	r2, #511	; 0x1ff
 800ae22:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ae26:	e02d      	b.n	800ae84 <UART_Start_Receive_IT+0xa4>
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	22ff      	movs	r2, #255	; 0xff
 800ae2c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ae30:	e028      	b.n	800ae84 <UART_Start_Receive_IT+0xa4>
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	689b      	ldr	r3, [r3, #8]
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d10d      	bne.n	800ae56 <UART_Start_Receive_IT+0x76>
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	691b      	ldr	r3, [r3, #16]
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d104      	bne.n	800ae4c <UART_Start_Receive_IT+0x6c>
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	22ff      	movs	r2, #255	; 0xff
 800ae46:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ae4a:	e01b      	b.n	800ae84 <UART_Start_Receive_IT+0xa4>
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	227f      	movs	r2, #127	; 0x7f
 800ae50:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ae54:	e016      	b.n	800ae84 <UART_Start_Receive_IT+0xa4>
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	689b      	ldr	r3, [r3, #8]
 800ae5a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ae5e:	d10d      	bne.n	800ae7c <UART_Start_Receive_IT+0x9c>
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	691b      	ldr	r3, [r3, #16]
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d104      	bne.n	800ae72 <UART_Start_Receive_IT+0x92>
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	227f      	movs	r2, #127	; 0x7f
 800ae6c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ae70:	e008      	b.n	800ae84 <UART_Start_Receive_IT+0xa4>
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	223f      	movs	r2, #63	; 0x3f
 800ae76:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ae7a:	e003      	b.n	800ae84 <UART_Start_Receive_IT+0xa4>
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	2200      	movs	r2, #0
 800ae80:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	2200      	movs	r2, #0
 800ae88:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	2222      	movs	r2, #34	; 0x22
 800ae90:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	3308      	adds	r3, #8
 800ae9a:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae9c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ae9e:	e853 3f00 	ldrex	r3, [r3]
 800aea2:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800aea4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800aea6:	f043 0301 	orr.w	r3, r3, #1
 800aeaa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	3308      	adds	r3, #8
 800aeb4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800aeb8:	673a      	str	r2, [r7, #112]	; 0x70
 800aeba:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aebc:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800aebe:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800aec0:	e841 2300 	strex	r3, r2, [r1]
 800aec4:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800aec6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d1e3      	bne.n	800ae94 <UART_Start_Receive_IT+0xb4>

#if defined(USART_CR1_FIFOEN)
  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aed0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aed4:	d153      	bne.n	800af7e <UART_Start_Receive_IT+0x19e>
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800aedc:	88fa      	ldrh	r2, [r7, #6]
 800aede:	429a      	cmp	r2, r3
 800aee0:	d34d      	bcc.n	800af7e <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	689b      	ldr	r3, [r3, #8]
 800aee6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aeea:	d107      	bne.n	800aefc <UART_Start_Receive_IT+0x11c>
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	691b      	ldr	r3, [r3, #16]
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d103      	bne.n	800aefc <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	4a4b      	ldr	r2, [pc, #300]	; (800b024 <UART_Start_Receive_IT+0x244>)
 800aef8:	671a      	str	r2, [r3, #112]	; 0x70
 800aefa:	e002      	b.n	800af02 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	4a4a      	ldr	r2, [pc, #296]	; (800b028 <UART_Start_Receive_IT+0x248>)
 800af00:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	2200      	movs	r2, #0
 800af06:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	691b      	ldr	r3, [r3, #16]
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d01a      	beq.n	800af48 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800af1a:	e853 3f00 	ldrex	r3, [r3]
 800af1e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800af20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800af22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800af26:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	461a      	mov	r2, r3
 800af30:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800af34:	65fb      	str	r3, [r7, #92]	; 0x5c
 800af36:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af38:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800af3a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800af3c:	e841 2300 	strex	r3, r2, [r1]
 800af40:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800af42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800af44:	2b00      	cmp	r3, #0
 800af46:	d1e4      	bne.n	800af12 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	3308      	adds	r3, #8
 800af4e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af52:	e853 3f00 	ldrex	r3, [r3]
 800af56:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800af58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800af5e:	67fb      	str	r3, [r7, #124]	; 0x7c
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	3308      	adds	r3, #8
 800af66:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800af68:	64ba      	str	r2, [r7, #72]	; 0x48
 800af6a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af6c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800af6e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800af70:	e841 2300 	strex	r3, r2, [r1]
 800af74:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800af76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d1e5      	bne.n	800af48 <UART_Start_Receive_IT+0x168>
 800af7c:	e04a      	b.n	800b014 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	689b      	ldr	r3, [r3, #8]
 800af82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800af86:	d107      	bne.n	800af98 <UART_Start_Receive_IT+0x1b8>
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	691b      	ldr	r3, [r3, #16]
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d103      	bne.n	800af98 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	4a26      	ldr	r2, [pc, #152]	; (800b02c <UART_Start_Receive_IT+0x24c>)
 800af94:	671a      	str	r2, [r3, #112]	; 0x70
 800af96:	e002      	b.n	800af9e <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	4a25      	ldr	r2, [pc, #148]	; (800b030 <UART_Start_Receive_IT+0x250>)
 800af9c:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	2200      	movs	r2, #0
 800afa2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	691b      	ldr	r3, [r3, #16]
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d019      	beq.n	800afe2 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afb6:	e853 3f00 	ldrex	r3, [r3]
 800afba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800afbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afbe:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800afc2:	677b      	str	r3, [r7, #116]	; 0x74
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	461a      	mov	r2, r3
 800afca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800afcc:	637b      	str	r3, [r7, #52]	; 0x34
 800afce:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afd0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800afd2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800afd4:	e841 2300 	strex	r3, r2, [r1]
 800afd8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800afda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d1e6      	bne.n	800afae <UART_Start_Receive_IT+0x1ce>
 800afe0:	e018      	b.n	800b014 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afe8:	697b      	ldr	r3, [r7, #20]
 800afea:	e853 3f00 	ldrex	r3, [r3]
 800afee:	613b      	str	r3, [r7, #16]
   return(result);
 800aff0:	693b      	ldr	r3, [r7, #16]
 800aff2:	f043 0320 	orr.w	r3, r3, #32
 800aff6:	67bb      	str	r3, [r7, #120]	; 0x78
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	461a      	mov	r2, r3
 800affe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b000:	623b      	str	r3, [r7, #32]
 800b002:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b004:	69f9      	ldr	r1, [r7, #28]
 800b006:	6a3a      	ldr	r2, [r7, #32]
 800b008:	e841 2300 	strex	r3, r2, [r1]
 800b00c:	61bb      	str	r3, [r7, #24]
   return(result);
 800b00e:	69bb      	ldr	r3, [r7, #24]
 800b010:	2b00      	cmp	r3, #0
 800b012:	d1e6      	bne.n	800afe2 <UART_Start_Receive_IT+0x202>
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800b014:	2300      	movs	r3, #0
}
 800b016:	4618      	mov	r0, r3
 800b018:	378c      	adds	r7, #140	; 0x8c
 800b01a:	46bd      	mov	sp, r7
 800b01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b020:	4770      	bx	lr
 800b022:	bf00      	nop
 800b024:	0800b749 	.word	0x0800b749
 800b028:	0800b44d 	.word	0x0800b44d
 800b02c:	0800b2e7 	.word	0x0800b2e7
 800b030:	0800b183 	.word	0x0800b183

0800b034 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b034:	b480      	push	{r7}
 800b036:	b095      	sub	sp, #84	; 0x54
 800b038:	af00      	add	r7, sp, #0
 800b03a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b042:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b044:	e853 3f00 	ldrex	r3, [r3]
 800b048:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b04a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b04c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b050:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	461a      	mov	r2, r3
 800b058:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b05a:	643b      	str	r3, [r7, #64]	; 0x40
 800b05c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b05e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b060:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b062:	e841 2300 	strex	r3, r2, [r1]
 800b066:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d1e6      	bne.n	800b03c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	3308      	adds	r3, #8
 800b074:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b076:	6a3b      	ldr	r3, [r7, #32]
 800b078:	e853 3f00 	ldrex	r3, [r3]
 800b07c:	61fb      	str	r3, [r7, #28]
   return(result);
 800b07e:	69fb      	ldr	r3, [r7, #28]
 800b080:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b084:	f023 0301 	bic.w	r3, r3, #1
 800b088:	64bb      	str	r3, [r7, #72]	; 0x48
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	3308      	adds	r3, #8
 800b090:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b092:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b094:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b096:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b098:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b09a:	e841 2300 	strex	r3, r2, [r1]
 800b09e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b0a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d1e3      	bne.n	800b06e <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b0aa:	2b01      	cmp	r3, #1
 800b0ac:	d118      	bne.n	800b0e0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	e853 3f00 	ldrex	r3, [r3]
 800b0ba:	60bb      	str	r3, [r7, #8]
   return(result);
 800b0bc:	68bb      	ldr	r3, [r7, #8]
 800b0be:	f023 0310 	bic.w	r3, r3, #16
 800b0c2:	647b      	str	r3, [r7, #68]	; 0x44
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	461a      	mov	r2, r3
 800b0ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b0cc:	61bb      	str	r3, [r7, #24]
 800b0ce:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0d0:	6979      	ldr	r1, [r7, #20]
 800b0d2:	69ba      	ldr	r2, [r7, #24]
 800b0d4:	e841 2300 	strex	r3, r2, [r1]
 800b0d8:	613b      	str	r3, [r7, #16]
   return(result);
 800b0da:	693b      	ldr	r3, [r7, #16]
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d1e6      	bne.n	800b0ae <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	2220      	movs	r2, #32
 800b0e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	2200      	movs	r2, #0
 800b0ec:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	2200      	movs	r2, #0
 800b0f2:	671a      	str	r2, [r3, #112]	; 0x70
}
 800b0f4:	bf00      	nop
 800b0f6:	3754      	adds	r7, #84	; 0x54
 800b0f8:	46bd      	mov	sp, r7
 800b0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0fe:	4770      	bx	lr

0800b100 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b100:	b580      	push	{r7, lr}
 800b102:	b084      	sub	sp, #16
 800b104:	af00      	add	r7, sp, #0
 800b106:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b10c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	2200      	movs	r2, #0
 800b112:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	2200      	movs	r2, #0
 800b11a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b11e:	68f8      	ldr	r0, [r7, #12]
 800b120:	f7ff f996 	bl	800a450 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b124:	bf00      	nop
 800b126:	3710      	adds	r7, #16
 800b128:	46bd      	mov	sp, r7
 800b12a:	bd80      	pop	{r7, pc}

0800b12c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b12c:	b580      	push	{r7, lr}
 800b12e:	b088      	sub	sp, #32
 800b130:	af00      	add	r7, sp, #0
 800b132:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	e853 3f00 	ldrex	r3, [r3]
 800b140:	60bb      	str	r3, [r7, #8]
   return(result);
 800b142:	68bb      	ldr	r3, [r7, #8]
 800b144:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b148:	61fb      	str	r3, [r7, #28]
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	461a      	mov	r2, r3
 800b150:	69fb      	ldr	r3, [r7, #28]
 800b152:	61bb      	str	r3, [r7, #24]
 800b154:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b156:	6979      	ldr	r1, [r7, #20]
 800b158:	69ba      	ldr	r2, [r7, #24]
 800b15a:	e841 2300 	strex	r3, r2, [r1]
 800b15e:	613b      	str	r3, [r7, #16]
   return(result);
 800b160:	693b      	ldr	r3, [r7, #16]
 800b162:	2b00      	cmp	r3, #0
 800b164:	d1e6      	bne.n	800b134 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	2220      	movs	r2, #32
 800b16a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	2200      	movs	r2, #0
 800b172:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b174:	6878      	ldr	r0, [r7, #4]
 800b176:	f7ff f961 	bl	800a43c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b17a:	bf00      	nop
 800b17c:	3720      	adds	r7, #32
 800b17e:	46bd      	mov	sp, r7
 800b180:	bd80      	pop	{r7, pc}

0800b182 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800b182:	b580      	push	{r7, lr}
 800b184:	b096      	sub	sp, #88	; 0x58
 800b186:	af00      	add	r7, sp, #0
 800b188:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b190:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b19a:	2b22      	cmp	r3, #34	; 0x22
 800b19c:	f040 8095 	bne.w	800b2ca <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800b1a6:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800b1aa:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800b1ae:	b2d9      	uxtb	r1, r3
 800b1b0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800b1b4:	b2da      	uxtb	r2, r3
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b1ba:	400a      	ands	r2, r1
 800b1bc:	b2d2      	uxtb	r2, r2
 800b1be:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b1c4:	1c5a      	adds	r2, r3, #1
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b1d0:	b29b      	uxth	r3, r3
 800b1d2:	3b01      	subs	r3, #1
 800b1d4:	b29a      	uxth	r2, r3
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b1e2:	b29b      	uxth	r3, r3
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d17a      	bne.n	800b2de <UART_RxISR_8BIT+0x15c>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1f0:	e853 3f00 	ldrex	r3, [r3]
 800b1f4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b1f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1f8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b1fc:	653b      	str	r3, [r7, #80]	; 0x50
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	461a      	mov	r2, r3
 800b204:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b206:	647b      	str	r3, [r7, #68]	; 0x44
 800b208:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b20a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b20c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b20e:	e841 2300 	strex	r3, r2, [r1]
 800b212:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b214:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b216:	2b00      	cmp	r3, #0
 800b218:	d1e6      	bne.n	800b1e8 <UART_RxISR_8BIT+0x66>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	3308      	adds	r3, #8
 800b220:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b224:	e853 3f00 	ldrex	r3, [r3]
 800b228:	623b      	str	r3, [r7, #32]
   return(result);
 800b22a:	6a3b      	ldr	r3, [r7, #32]
 800b22c:	f023 0301 	bic.w	r3, r3, #1
 800b230:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	3308      	adds	r3, #8
 800b238:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b23a:	633a      	str	r2, [r7, #48]	; 0x30
 800b23c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b23e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b240:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b242:	e841 2300 	strex	r3, r2, [r1]
 800b246:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d1e5      	bne.n	800b21a <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	2220      	movs	r2, #32
 800b252:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	2200      	movs	r2, #0
 800b25a:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b260:	2b01      	cmp	r3, #1
 800b262:	d12e      	bne.n	800b2c2 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	2200      	movs	r2, #0
 800b268:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b270:	693b      	ldr	r3, [r7, #16]
 800b272:	e853 3f00 	ldrex	r3, [r3]
 800b276:	60fb      	str	r3, [r7, #12]
   return(result);
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	f023 0310 	bic.w	r3, r3, #16
 800b27e:	64bb      	str	r3, [r7, #72]	; 0x48
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	461a      	mov	r2, r3
 800b286:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b288:	61fb      	str	r3, [r7, #28]
 800b28a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b28c:	69b9      	ldr	r1, [r7, #24]
 800b28e:	69fa      	ldr	r2, [r7, #28]
 800b290:	e841 2300 	strex	r3, r2, [r1]
 800b294:	617b      	str	r3, [r7, #20]
   return(result);
 800b296:	697b      	ldr	r3, [r7, #20]
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d1e6      	bne.n	800b26a <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	69db      	ldr	r3, [r3, #28]
 800b2a2:	f003 0310 	and.w	r3, r3, #16
 800b2a6:	2b10      	cmp	r3, #16
 800b2a8:	d103      	bne.n	800b2b2 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	2210      	movs	r2, #16
 800b2b0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b2b8:	4619      	mov	r1, r3
 800b2ba:	6878      	ldr	r0, [r7, #4]
 800b2bc:	f7ff f8d2 	bl	800a464 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b2c0:	e00d      	b.n	800b2de <UART_RxISR_8BIT+0x15c>
        HAL_UART_RxCpltCallback(huart);
 800b2c2:	6878      	ldr	r0, [r7, #4]
 800b2c4:	f7fa fc52 	bl	8005b6c <HAL_UART_RxCpltCallback>
}
 800b2c8:	e009      	b.n	800b2de <UART_RxISR_8BIT+0x15c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	8b1b      	ldrh	r3, [r3, #24]
 800b2d0:	b29a      	uxth	r2, r3
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	f042 0208 	orr.w	r2, r2, #8
 800b2da:	b292      	uxth	r2, r2
 800b2dc:	831a      	strh	r2, [r3, #24]
}
 800b2de:	bf00      	nop
 800b2e0:	3758      	adds	r7, #88	; 0x58
 800b2e2:	46bd      	mov	sp, r7
 800b2e4:	bd80      	pop	{r7, pc}

0800b2e6 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800b2e6:	b580      	push	{r7, lr}
 800b2e8:	b096      	sub	sp, #88	; 0x58
 800b2ea:	af00      	add	r7, sp, #0
 800b2ec:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b2f4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b2fe:	2b22      	cmp	r3, #34	; 0x22
 800b300:	f040 8095 	bne.w	800b42e <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800b30a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b312:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800b314:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800b318:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800b31c:	4013      	ands	r3, r2
 800b31e:	b29a      	uxth	r2, r3
 800b320:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b322:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b328:	1c9a      	adds	r2, r3, #2
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b334:	b29b      	uxth	r3, r3
 800b336:	3b01      	subs	r3, #1
 800b338:	b29a      	uxth	r2, r3
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b346:	b29b      	uxth	r3, r3
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d17a      	bne.n	800b442 <UART_RxISR_16BIT+0x15c>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b352:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b354:	e853 3f00 	ldrex	r3, [r3]
 800b358:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b35a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b35c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b360:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	461a      	mov	r2, r3
 800b368:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b36a:	643b      	str	r3, [r7, #64]	; 0x40
 800b36c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b36e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b370:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b372:	e841 2300 	strex	r3, r2, [r1]
 800b376:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d1e6      	bne.n	800b34c <UART_RxISR_16BIT+0x66>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	3308      	adds	r3, #8
 800b384:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b386:	6a3b      	ldr	r3, [r7, #32]
 800b388:	e853 3f00 	ldrex	r3, [r3]
 800b38c:	61fb      	str	r3, [r7, #28]
   return(result);
 800b38e:	69fb      	ldr	r3, [r7, #28]
 800b390:	f023 0301 	bic.w	r3, r3, #1
 800b394:	64bb      	str	r3, [r7, #72]	; 0x48
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	3308      	adds	r3, #8
 800b39c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b39e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b3a0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3a2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b3a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b3a6:	e841 2300 	strex	r3, r2, [r1]
 800b3aa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b3ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d1e5      	bne.n	800b37e <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	2220      	movs	r2, #32
 800b3b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	2200      	movs	r2, #0
 800b3be:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b3c4:	2b01      	cmp	r3, #1
 800b3c6:	d12e      	bne.n	800b426 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	2200      	movs	r2, #0
 800b3cc:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	e853 3f00 	ldrex	r3, [r3]
 800b3da:	60bb      	str	r3, [r7, #8]
   return(result);
 800b3dc:	68bb      	ldr	r3, [r7, #8]
 800b3de:	f023 0310 	bic.w	r3, r3, #16
 800b3e2:	647b      	str	r3, [r7, #68]	; 0x44
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	461a      	mov	r2, r3
 800b3ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b3ec:	61bb      	str	r3, [r7, #24]
 800b3ee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3f0:	6979      	ldr	r1, [r7, #20]
 800b3f2:	69ba      	ldr	r2, [r7, #24]
 800b3f4:	e841 2300 	strex	r3, r2, [r1]
 800b3f8:	613b      	str	r3, [r7, #16]
   return(result);
 800b3fa:	693b      	ldr	r3, [r7, #16]
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d1e6      	bne.n	800b3ce <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	69db      	ldr	r3, [r3, #28]
 800b406:	f003 0310 	and.w	r3, r3, #16
 800b40a:	2b10      	cmp	r3, #16
 800b40c:	d103      	bne.n	800b416 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	2210      	movs	r2, #16
 800b414:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b41c:	4619      	mov	r1, r3
 800b41e:	6878      	ldr	r0, [r7, #4]
 800b420:	f7ff f820 	bl	800a464 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b424:	e00d      	b.n	800b442 <UART_RxISR_16BIT+0x15c>
        HAL_UART_RxCpltCallback(huart);
 800b426:	6878      	ldr	r0, [r7, #4]
 800b428:	f7fa fba0 	bl	8005b6c <HAL_UART_RxCpltCallback>
}
 800b42c:	e009      	b.n	800b442 <UART_RxISR_16BIT+0x15c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	8b1b      	ldrh	r3, [r3, #24]
 800b434:	b29a      	uxth	r2, r3
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	f042 0208 	orr.w	r2, r2, #8
 800b43e:	b292      	uxth	r2, r2
 800b440:	831a      	strh	r2, [r3, #24]
}
 800b442:	bf00      	nop
 800b444:	3758      	adds	r7, #88	; 0x58
 800b446:	46bd      	mov	sp, r7
 800b448:	bd80      	pop	{r7, pc}
	...

0800b44c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800b44c:	b580      	push	{r7, lr}
 800b44e:	b0a6      	sub	sp, #152	; 0x98
 800b450:	af00      	add	r7, sp, #0
 800b452:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b45a:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	69db      	ldr	r3, [r3, #28]
 800b464:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	689b      	ldr	r3, [r3, #8]
 800b478:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b482:	2b22      	cmp	r3, #34	; 0x22
 800b484:	f040 814f 	bne.w	800b726 <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b48e:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b492:	e0f6      	b.n	800b682 <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800b49a:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800b49e:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800b4a2:	b2d9      	uxtb	r1, r3
 800b4a4:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800b4a8:	b2da      	uxtb	r2, r3
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b4ae:	400a      	ands	r2, r1
 800b4b0:	b2d2      	uxtb	r2, r2
 800b4b2:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b4b8:	1c5a      	adds	r2, r3, #1
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b4c4:	b29b      	uxth	r3, r3
 800b4c6:	3b01      	subs	r3, #1
 800b4c8:	b29a      	uxth	r2, r3
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	69db      	ldr	r3, [r3, #28]
 800b4d6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800b4da:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b4de:	f003 0307 	and.w	r3, r3, #7
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d053      	beq.n	800b58e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b4e6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b4ea:	f003 0301 	and.w	r3, r3, #1
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d011      	beq.n	800b516 <UART_RxISR_8BIT_FIFOEN+0xca>
 800b4f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b4f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d00b      	beq.n	800b516 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	2201      	movs	r2, #1
 800b504:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b50c:	f043 0201 	orr.w	r2, r3, #1
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b516:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b51a:	f003 0302 	and.w	r3, r3, #2
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d011      	beq.n	800b546 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800b522:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b526:	f003 0301 	and.w	r3, r3, #1
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d00b      	beq.n	800b546 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	2202      	movs	r2, #2
 800b534:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b53c:	f043 0204 	orr.w	r2, r3, #4
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b546:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b54a:	f003 0304 	and.w	r3, r3, #4
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d011      	beq.n	800b576 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800b552:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b556:	f003 0301 	and.w	r3, r3, #1
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d00b      	beq.n	800b576 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	2204      	movs	r2, #4
 800b564:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b56c:	f043 0202 	orr.w	r2, r3, #2
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d006      	beq.n	800b58e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b580:	6878      	ldr	r0, [r7, #4]
 800b582:	f7fe ff65 	bl	800a450 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	2200      	movs	r2, #0
 800b58a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b594:	b29b      	uxth	r3, r3
 800b596:	2b00      	cmp	r3, #0
 800b598:	d173      	bne.n	800b682 <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b5a2:	e853 3f00 	ldrex	r3, [r3]
 800b5a6:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800b5a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b5aa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b5ae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	461a      	mov	r2, r3
 800b5b8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b5bc:	66bb      	str	r3, [r7, #104]	; 0x68
 800b5be:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5c0:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800b5c2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b5c4:	e841 2300 	strex	r3, r2, [r1]
 800b5c8:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800b5ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d1e4      	bne.n	800b59a <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	3308      	adds	r3, #8
 800b5d6:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b5da:	e853 3f00 	ldrex	r3, [r3]
 800b5de:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800b5e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b5e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b5e6:	f023 0301 	bic.w	r3, r3, #1
 800b5ea:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	3308      	adds	r3, #8
 800b5f2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800b5f4:	657a      	str	r2, [r7, #84]	; 0x54
 800b5f6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5f8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b5fa:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b5fc:	e841 2300 	strex	r3, r2, [r1]
 800b600:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b602:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b604:	2b00      	cmp	r3, #0
 800b606:	d1e3      	bne.n	800b5d0 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	2220      	movs	r2, #32
 800b60c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	2200      	movs	r2, #0
 800b614:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b61a:	2b01      	cmp	r3, #1
 800b61c:	d12e      	bne.n	800b67c <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	2200      	movs	r2, #0
 800b622:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b62a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b62c:	e853 3f00 	ldrex	r3, [r3]
 800b630:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b634:	f023 0310 	bic.w	r3, r3, #16
 800b638:	67bb      	str	r3, [r7, #120]	; 0x78
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	461a      	mov	r2, r3
 800b640:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b642:	643b      	str	r3, [r7, #64]	; 0x40
 800b644:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b646:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b648:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b64a:	e841 2300 	strex	r3, r2, [r1]
 800b64e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b652:	2b00      	cmp	r3, #0
 800b654:	d1e6      	bne.n	800b624 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	69db      	ldr	r3, [r3, #28]
 800b65c:	f003 0310 	and.w	r3, r3, #16
 800b660:	2b10      	cmp	r3, #16
 800b662:	d103      	bne.n	800b66c <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	2210      	movs	r2, #16
 800b66a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b672:	4619      	mov	r1, r3
 800b674:	6878      	ldr	r0, [r7, #4]
 800b676:	f7fe fef5 	bl	800a464 <HAL_UARTEx_RxEventCallback>
 800b67a:	e002      	b.n	800b682 <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800b67c:	6878      	ldr	r0, [r7, #4]
 800b67e:	f7fa fa75 	bl	8005b6c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b682:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800b686:	2b00      	cmp	r3, #0
 800b688:	d006      	beq.n	800b698 <UART_RxISR_8BIT_FIFOEN+0x24c>
 800b68a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b68e:	f003 0320 	and.w	r3, r3, #32
 800b692:	2b00      	cmp	r3, #0
 800b694:	f47f aefe 	bne.w	800b494 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b69e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800b6a2:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d047      	beq.n	800b73a <UART_RxISR_8BIT_FIFOEN+0x2ee>
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b6b0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800b6b4:	429a      	cmp	r2, r3
 800b6b6:	d240      	bcs.n	800b73a <UART_RxISR_8BIT_FIFOEN+0x2ee>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	3308      	adds	r3, #8
 800b6be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6c0:	6a3b      	ldr	r3, [r7, #32]
 800b6c2:	e853 3f00 	ldrex	r3, [r3]
 800b6c6:	61fb      	str	r3, [r7, #28]
   return(result);
 800b6c8:	69fb      	ldr	r3, [r7, #28]
 800b6ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b6ce:	673b      	str	r3, [r7, #112]	; 0x70
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	3308      	adds	r3, #8
 800b6d6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800b6d8:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b6da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b6de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b6e0:	e841 2300 	strex	r3, r2, [r1]
 800b6e4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b6e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d1e5      	bne.n	800b6b8 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	4a15      	ldr	r2, [pc, #84]	; (800b744 <UART_RxISR_8BIT_FIFOEN+0x2f8>)
 800b6f0:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	e853 3f00 	ldrex	r3, [r3]
 800b6fe:	60bb      	str	r3, [r7, #8]
   return(result);
 800b700:	68bb      	ldr	r3, [r7, #8]
 800b702:	f043 0320 	orr.w	r3, r3, #32
 800b706:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	461a      	mov	r2, r3
 800b70e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b710:	61bb      	str	r3, [r7, #24]
 800b712:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b714:	6979      	ldr	r1, [r7, #20]
 800b716:	69ba      	ldr	r2, [r7, #24]
 800b718:	e841 2300 	strex	r3, r2, [r1]
 800b71c:	613b      	str	r3, [r7, #16]
   return(result);
 800b71e:	693b      	ldr	r3, [r7, #16]
 800b720:	2b00      	cmp	r3, #0
 800b722:	d1e6      	bne.n	800b6f2 <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b724:	e009      	b.n	800b73a <UART_RxISR_8BIT_FIFOEN+0x2ee>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	8b1b      	ldrh	r3, [r3, #24]
 800b72c:	b29a      	uxth	r2, r3
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	f042 0208 	orr.w	r2, r2, #8
 800b736:	b292      	uxth	r2, r2
 800b738:	831a      	strh	r2, [r3, #24]
}
 800b73a:	bf00      	nop
 800b73c:	3798      	adds	r7, #152	; 0x98
 800b73e:	46bd      	mov	sp, r7
 800b740:	bd80      	pop	{r7, pc}
 800b742:	bf00      	nop
 800b744:	0800b183 	.word	0x0800b183

0800b748 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800b748:	b580      	push	{r7, lr}
 800b74a:	b0a8      	sub	sp, #160	; 0xa0
 800b74c:	af00      	add	r7, sp, #0
 800b74e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b756:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	69db      	ldr	r3, [r3, #28]
 800b760:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	689b      	ldr	r3, [r3, #8]
 800b774:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b77e:	2b22      	cmp	r3, #34	; 0x22
 800b780:	f040 8153 	bne.w	800ba2a <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b78a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b78e:	e0fa      	b.n	800b986 <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800b796:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b79e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 800b7a2:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 800b7a6:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800b7aa:	4013      	ands	r3, r2
 800b7ac:	b29a      	uxth	r2, r3
 800b7ae:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b7b2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b7b8:	1c9a      	adds	r2, r3, #2
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b7c4:	b29b      	uxth	r3, r3
 800b7c6:	3b01      	subs	r3, #1
 800b7c8:	b29a      	uxth	r2, r3
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	69db      	ldr	r3, [r3, #28]
 800b7d6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800b7da:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b7de:	f003 0307 	and.w	r3, r3, #7
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d053      	beq.n	800b88e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b7e6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b7ea:	f003 0301 	and.w	r3, r3, #1
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d011      	beq.n	800b816 <UART_RxISR_16BIT_FIFOEN+0xce>
 800b7f2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b7f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d00b      	beq.n	800b816 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	2201      	movs	r2, #1
 800b804:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b80c:	f043 0201 	orr.w	r2, r3, #1
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b816:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b81a:	f003 0302 	and.w	r3, r3, #2
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d011      	beq.n	800b846 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800b822:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b826:	f003 0301 	and.w	r3, r3, #1
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d00b      	beq.n	800b846 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	2202      	movs	r2, #2
 800b834:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b83c:	f043 0204 	orr.w	r2, r3, #4
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b846:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b84a:	f003 0304 	and.w	r3, r3, #4
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d011      	beq.n	800b876 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800b852:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b856:	f003 0301 	and.w	r3, r3, #1
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d00b      	beq.n	800b876 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	2204      	movs	r2, #4
 800b864:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b86c:	f043 0202 	orr.w	r2, r3, #2
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d006      	beq.n	800b88e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b880:	6878      	ldr	r0, [r7, #4]
 800b882:	f7fe fde5 	bl	800a450 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	2200      	movs	r2, #0
 800b88a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b894:	b29b      	uxth	r3, r3
 800b896:	2b00      	cmp	r3, #0
 800b898:	d175      	bne.n	800b986 <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8a0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b8a2:	e853 3f00 	ldrex	r3, [r3]
 800b8a6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b8a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b8aa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b8ae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	461a      	mov	r2, r3
 800b8b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b8bc:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b8be:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8c0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b8c2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b8c4:	e841 2300 	strex	r3, r2, [r1]
 800b8c8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b8ca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d1e4      	bne.n	800b89a <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	3308      	adds	r3, #8
 800b8d6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b8da:	e853 3f00 	ldrex	r3, [r3]
 800b8de:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b8e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b8e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b8e6:	f023 0301 	bic.w	r3, r3, #1
 800b8ea:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	3308      	adds	r3, #8
 800b8f4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b8f8:	65ba      	str	r2, [r7, #88]	; 0x58
 800b8fa:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8fc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b8fe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b900:	e841 2300 	strex	r3, r2, [r1]
 800b904:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b906:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d1e1      	bne.n	800b8d0 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	2220      	movs	r2, #32
 800b910:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	2200      	movs	r2, #0
 800b918:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b91e:	2b01      	cmp	r3, #1
 800b920:	d12e      	bne.n	800b980 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	2200      	movs	r2, #0
 800b926:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b92e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b930:	e853 3f00 	ldrex	r3, [r3]
 800b934:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b936:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b938:	f023 0310 	bic.w	r3, r3, #16
 800b93c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	461a      	mov	r2, r3
 800b944:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b946:	647b      	str	r3, [r7, #68]	; 0x44
 800b948:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b94a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b94c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b94e:	e841 2300 	strex	r3, r2, [r1]
 800b952:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b954:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b956:	2b00      	cmp	r3, #0
 800b958:	d1e6      	bne.n	800b928 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	69db      	ldr	r3, [r3, #28]
 800b960:	f003 0310 	and.w	r3, r3, #16
 800b964:	2b10      	cmp	r3, #16
 800b966:	d103      	bne.n	800b970 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	2210      	movs	r2, #16
 800b96e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b976:	4619      	mov	r1, r3
 800b978:	6878      	ldr	r0, [r7, #4]
 800b97a:	f7fe fd73 	bl	800a464 <HAL_UARTEx_RxEventCallback>
 800b97e:	e002      	b.n	800b986 <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800b980:	6878      	ldr	r0, [r7, #4]
 800b982:	f7fa f8f3 	bl	8005b6c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b986:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d006      	beq.n	800b99c <UART_RxISR_16BIT_FIFOEN+0x254>
 800b98e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b992:	f003 0320 	and.w	r3, r3, #32
 800b996:	2b00      	cmp	r3, #0
 800b998:	f47f aefa 	bne.w	800b790 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b9a2:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800b9a6:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d047      	beq.n	800ba3e <UART_RxISR_16BIT_FIFOEN+0x2f6>
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b9b4:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 800b9b8:	429a      	cmp	r2, r3
 800b9ba:	d240      	bcs.n	800ba3e <UART_RxISR_16BIT_FIFOEN+0x2f6>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	3308      	adds	r3, #8
 800b9c2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9c6:	e853 3f00 	ldrex	r3, [r3]
 800b9ca:	623b      	str	r3, [r7, #32]
   return(result);
 800b9cc:	6a3b      	ldr	r3, [r7, #32]
 800b9ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b9d2:	677b      	str	r3, [r7, #116]	; 0x74
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	3308      	adds	r3, #8
 800b9da:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800b9dc:	633a      	str	r2, [r7, #48]	; 0x30
 800b9de:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9e0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b9e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b9e4:	e841 2300 	strex	r3, r2, [r1]
 800b9e8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b9ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d1e5      	bne.n	800b9bc <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	4a15      	ldr	r2, [pc, #84]	; (800ba48 <UART_RxISR_16BIT_FIFOEN+0x300>)
 800b9f4:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9fc:	693b      	ldr	r3, [r7, #16]
 800b9fe:	e853 3f00 	ldrex	r3, [r3]
 800ba02:	60fb      	str	r3, [r7, #12]
   return(result);
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	f043 0320 	orr.w	r3, r3, #32
 800ba0a:	673b      	str	r3, [r7, #112]	; 0x70
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	461a      	mov	r2, r3
 800ba12:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ba14:	61fb      	str	r3, [r7, #28]
 800ba16:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba18:	69b9      	ldr	r1, [r7, #24]
 800ba1a:	69fa      	ldr	r2, [r7, #28]
 800ba1c:	e841 2300 	strex	r3, r2, [r1]
 800ba20:	617b      	str	r3, [r7, #20]
   return(result);
 800ba22:	697b      	ldr	r3, [r7, #20]
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d1e6      	bne.n	800b9f6 <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ba28:	e009      	b.n	800ba3e <UART_RxISR_16BIT_FIFOEN+0x2f6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	8b1b      	ldrh	r3, [r3, #24]
 800ba30:	b29a      	uxth	r2, r3
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	f042 0208 	orr.w	r2, r2, #8
 800ba3a:	b292      	uxth	r2, r2
 800ba3c:	831a      	strh	r2, [r3, #24]
}
 800ba3e:	bf00      	nop
 800ba40:	37a0      	adds	r7, #160	; 0xa0
 800ba42:	46bd      	mov	sp, r7
 800ba44:	bd80      	pop	{r7, pc}
 800ba46:	bf00      	nop
 800ba48:	0800b2e7 	.word	0x0800b2e7

0800ba4c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ba4c:	b480      	push	{r7}
 800ba4e:	b083      	sub	sp, #12
 800ba50:	af00      	add	r7, sp, #0
 800ba52:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ba54:	bf00      	nop
 800ba56:	370c      	adds	r7, #12
 800ba58:	46bd      	mov	sp, r7
 800ba5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba5e:	4770      	bx	lr

0800ba60 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800ba60:	b480      	push	{r7}
 800ba62:	b083      	sub	sp, #12
 800ba64:	af00      	add	r7, sp, #0
 800ba66:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800ba68:	bf00      	nop
 800ba6a:	370c      	adds	r7, #12
 800ba6c:	46bd      	mov	sp, r7
 800ba6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba72:	4770      	bx	lr

0800ba74 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800ba74:	b480      	push	{r7}
 800ba76:	b083      	sub	sp, #12
 800ba78:	af00      	add	r7, sp, #0
 800ba7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800ba7c:	bf00      	nop
 800ba7e:	370c      	adds	r7, #12
 800ba80:	46bd      	mov	sp, r7
 800ba82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba86:	4770      	bx	lr

0800ba88 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ba88:	b480      	push	{r7}
 800ba8a:	b085      	sub	sp, #20
 800ba8c:	af00      	add	r7, sp, #0
 800ba8e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ba96:	2b01      	cmp	r3, #1
 800ba98:	d101      	bne.n	800ba9e <HAL_UARTEx_DisableFifoMode+0x16>
 800ba9a:	2302      	movs	r3, #2
 800ba9c:	e027      	b.n	800baee <HAL_UARTEx_DisableFifoMode+0x66>
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	2201      	movs	r2, #1
 800baa2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	2224      	movs	r2, #36	; 0x24
 800baaa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	681a      	ldr	r2, [r3, #0]
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	f022 0201 	bic.w	r2, r2, #1
 800bac4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800bacc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	2200      	movs	r2, #0
 800bad2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	68fa      	ldr	r2, [r7, #12]
 800bada:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	2220      	movs	r2, #32
 800bae0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	2200      	movs	r2, #0
 800bae8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800baec:	2300      	movs	r3, #0
}
 800baee:	4618      	mov	r0, r3
 800baf0:	3714      	adds	r7, #20
 800baf2:	46bd      	mov	sp, r7
 800baf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baf8:	4770      	bx	lr

0800bafa <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bafa:	b580      	push	{r7, lr}
 800bafc:	b084      	sub	sp, #16
 800bafe:	af00      	add	r7, sp, #0
 800bb00:	6078      	str	r0, [r7, #4]
 800bb02:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bb0a:	2b01      	cmp	r3, #1
 800bb0c:	d101      	bne.n	800bb12 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800bb0e:	2302      	movs	r3, #2
 800bb10:	e02d      	b.n	800bb6e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	2201      	movs	r2, #1
 800bb16:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	2224      	movs	r2, #36	; 0x24
 800bb1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	681a      	ldr	r2, [r3, #0]
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	f022 0201 	bic.w	r2, r2, #1
 800bb38:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	689b      	ldr	r3, [r3, #8]
 800bb40:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	683a      	ldr	r2, [r7, #0]
 800bb4a:	430a      	orrs	r2, r1
 800bb4c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bb4e:	6878      	ldr	r0, [r7, #4]
 800bb50:	f000 f850 	bl	800bbf4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	68fa      	ldr	r2, [r7, #12]
 800bb5a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	2220      	movs	r2, #32
 800bb60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	2200      	movs	r2, #0
 800bb68:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800bb6c:	2300      	movs	r3, #0
}
 800bb6e:	4618      	mov	r0, r3
 800bb70:	3710      	adds	r7, #16
 800bb72:	46bd      	mov	sp, r7
 800bb74:	bd80      	pop	{r7, pc}

0800bb76 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bb76:	b580      	push	{r7, lr}
 800bb78:	b084      	sub	sp, #16
 800bb7a:	af00      	add	r7, sp, #0
 800bb7c:	6078      	str	r0, [r7, #4]
 800bb7e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bb86:	2b01      	cmp	r3, #1
 800bb88:	d101      	bne.n	800bb8e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800bb8a:	2302      	movs	r3, #2
 800bb8c:	e02d      	b.n	800bbea <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	2201      	movs	r2, #1
 800bb92:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	2224      	movs	r2, #36	; 0x24
 800bb9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	681a      	ldr	r2, [r3, #0]
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	f022 0201 	bic.w	r2, r2, #1
 800bbb4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	689b      	ldr	r3, [r3, #8]
 800bbbc:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	683a      	ldr	r2, [r7, #0]
 800bbc6:	430a      	orrs	r2, r1
 800bbc8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bbca:	6878      	ldr	r0, [r7, #4]
 800bbcc:	f000 f812 	bl	800bbf4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	68fa      	ldr	r2, [r7, #12]
 800bbd6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	2220      	movs	r2, #32
 800bbdc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	2200      	movs	r2, #0
 800bbe4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800bbe8:	2300      	movs	r3, #0
}
 800bbea:	4618      	mov	r0, r3
 800bbec:	3710      	adds	r7, #16
 800bbee:	46bd      	mov	sp, r7
 800bbf0:	bd80      	pop	{r7, pc}
	...

0800bbf4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800bbf4:	b480      	push	{r7}
 800bbf6:	b085      	sub	sp, #20
 800bbf8:	af00      	add	r7, sp, #0
 800bbfa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d108      	bne.n	800bc16 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	2201      	movs	r2, #1
 800bc08:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	2201      	movs	r2, #1
 800bc10:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800bc14:	e031      	b.n	800bc7a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800bc16:	2308      	movs	r3, #8
 800bc18:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800bc1a:	2308      	movs	r3, #8
 800bc1c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	689b      	ldr	r3, [r3, #8]
 800bc24:	0e5b      	lsrs	r3, r3, #25
 800bc26:	b2db      	uxtb	r3, r3
 800bc28:	f003 0307 	and.w	r3, r3, #7
 800bc2c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	689b      	ldr	r3, [r3, #8]
 800bc34:	0f5b      	lsrs	r3, r3, #29
 800bc36:	b2db      	uxtb	r3, r3
 800bc38:	f003 0307 	and.w	r3, r3, #7
 800bc3c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bc3e:	7bbb      	ldrb	r3, [r7, #14]
 800bc40:	7b3a      	ldrb	r2, [r7, #12]
 800bc42:	4911      	ldr	r1, [pc, #68]	; (800bc88 <UARTEx_SetNbDataToProcess+0x94>)
 800bc44:	5c8a      	ldrb	r2, [r1, r2]
 800bc46:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800bc4a:	7b3a      	ldrb	r2, [r7, #12]
 800bc4c:	490f      	ldr	r1, [pc, #60]	; (800bc8c <UARTEx_SetNbDataToProcess+0x98>)
 800bc4e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bc50:	fb93 f3f2 	sdiv	r3, r3, r2
 800bc54:	b29a      	uxth	r2, r3
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bc5c:	7bfb      	ldrb	r3, [r7, #15]
 800bc5e:	7b7a      	ldrb	r2, [r7, #13]
 800bc60:	4909      	ldr	r1, [pc, #36]	; (800bc88 <UARTEx_SetNbDataToProcess+0x94>)
 800bc62:	5c8a      	ldrb	r2, [r1, r2]
 800bc64:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800bc68:	7b7a      	ldrb	r2, [r7, #13]
 800bc6a:	4908      	ldr	r1, [pc, #32]	; (800bc8c <UARTEx_SetNbDataToProcess+0x98>)
 800bc6c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bc6e:	fb93 f3f2 	sdiv	r3, r3, r2
 800bc72:	b29a      	uxth	r2, r3
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800bc7a:	bf00      	nop
 800bc7c:	3714      	adds	r7, #20
 800bc7e:	46bd      	mov	sp, r7
 800bc80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc84:	4770      	bx	lr
 800bc86:	bf00      	nop
 800bc88:	0801462c 	.word	0x0801462c
 800bc8c:	08014634 	.word	0x08014634

0800bc90 <__NVIC_SetPriority>:
{
 800bc90:	b480      	push	{r7}
 800bc92:	b083      	sub	sp, #12
 800bc94:	af00      	add	r7, sp, #0
 800bc96:	4603      	mov	r3, r0
 800bc98:	6039      	str	r1, [r7, #0]
 800bc9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800bc9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	db0a      	blt.n	800bcba <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bca4:	683b      	ldr	r3, [r7, #0]
 800bca6:	b2da      	uxtb	r2, r3
 800bca8:	490c      	ldr	r1, [pc, #48]	; (800bcdc <__NVIC_SetPriority+0x4c>)
 800bcaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bcae:	0112      	lsls	r2, r2, #4
 800bcb0:	b2d2      	uxtb	r2, r2
 800bcb2:	440b      	add	r3, r1
 800bcb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800bcb8:	e00a      	b.n	800bcd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bcba:	683b      	ldr	r3, [r7, #0]
 800bcbc:	b2da      	uxtb	r2, r3
 800bcbe:	4908      	ldr	r1, [pc, #32]	; (800bce0 <__NVIC_SetPriority+0x50>)
 800bcc0:	79fb      	ldrb	r3, [r7, #7]
 800bcc2:	f003 030f 	and.w	r3, r3, #15
 800bcc6:	3b04      	subs	r3, #4
 800bcc8:	0112      	lsls	r2, r2, #4
 800bcca:	b2d2      	uxtb	r2, r2
 800bccc:	440b      	add	r3, r1
 800bcce:	761a      	strb	r2, [r3, #24]
}
 800bcd0:	bf00      	nop
 800bcd2:	370c      	adds	r7, #12
 800bcd4:	46bd      	mov	sp, r7
 800bcd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcda:	4770      	bx	lr
 800bcdc:	e000e100 	.word	0xe000e100
 800bce0:	e000ed00 	.word	0xe000ed00

0800bce4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800bce4:	b580      	push	{r7, lr}
 800bce6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800bce8:	4b05      	ldr	r3, [pc, #20]	; (800bd00 <SysTick_Handler+0x1c>)
 800bcea:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800bcec:	f002 fec6 	bl	800ea7c <xTaskGetSchedulerState>
 800bcf0:	4603      	mov	r3, r0
 800bcf2:	2b01      	cmp	r3, #1
 800bcf4:	d001      	beq.n	800bcfa <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800bcf6:	f003 fde7 	bl	800f8c8 <xPortSysTickHandler>
  }
}
 800bcfa:	bf00      	nop
 800bcfc:	bd80      	pop	{r7, pc}
 800bcfe:	bf00      	nop
 800bd00:	e000e010 	.word	0xe000e010

0800bd04 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800bd04:	b580      	push	{r7, lr}
 800bd06:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800bd08:	2100      	movs	r1, #0
 800bd0a:	f06f 0004 	mvn.w	r0, #4
 800bd0e:	f7ff ffbf 	bl	800bc90 <__NVIC_SetPriority>
#endif
}
 800bd12:	bf00      	nop
 800bd14:	bd80      	pop	{r7, pc}
	...

0800bd18 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800bd18:	b480      	push	{r7}
 800bd1a:	b083      	sub	sp, #12
 800bd1c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bd1e:	f3ef 8305 	mrs	r3, IPSR
 800bd22:	603b      	str	r3, [r7, #0]
  return(result);
 800bd24:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d003      	beq.n	800bd32 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800bd2a:	f06f 0305 	mvn.w	r3, #5
 800bd2e:	607b      	str	r3, [r7, #4]
 800bd30:	e00c      	b.n	800bd4c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800bd32:	4b0a      	ldr	r3, [pc, #40]	; (800bd5c <osKernelInitialize+0x44>)
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d105      	bne.n	800bd46 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800bd3a:	4b08      	ldr	r3, [pc, #32]	; (800bd5c <osKernelInitialize+0x44>)
 800bd3c:	2201      	movs	r2, #1
 800bd3e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800bd40:	2300      	movs	r3, #0
 800bd42:	607b      	str	r3, [r7, #4]
 800bd44:	e002      	b.n	800bd4c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800bd46:	f04f 33ff 	mov.w	r3, #4294967295
 800bd4a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800bd4c:	687b      	ldr	r3, [r7, #4]
}
 800bd4e:	4618      	mov	r0, r3
 800bd50:	370c      	adds	r7, #12
 800bd52:	46bd      	mov	sp, r7
 800bd54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd58:	4770      	bx	lr
 800bd5a:	bf00      	nop
 800bd5c:	20000668 	.word	0x20000668

0800bd60 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800bd60:	b580      	push	{r7, lr}
 800bd62:	b082      	sub	sp, #8
 800bd64:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bd66:	f3ef 8305 	mrs	r3, IPSR
 800bd6a:	603b      	str	r3, [r7, #0]
  return(result);
 800bd6c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d003      	beq.n	800bd7a <osKernelStart+0x1a>
    stat = osErrorISR;
 800bd72:	f06f 0305 	mvn.w	r3, #5
 800bd76:	607b      	str	r3, [r7, #4]
 800bd78:	e010      	b.n	800bd9c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800bd7a:	4b0b      	ldr	r3, [pc, #44]	; (800bda8 <osKernelStart+0x48>)
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	2b01      	cmp	r3, #1
 800bd80:	d109      	bne.n	800bd96 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800bd82:	f7ff ffbf 	bl	800bd04 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800bd86:	4b08      	ldr	r3, [pc, #32]	; (800bda8 <osKernelStart+0x48>)
 800bd88:	2202      	movs	r2, #2
 800bd8a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800bd8c:	f002 f96e 	bl	800e06c <vTaskStartScheduler>
      stat = osOK;
 800bd90:	2300      	movs	r3, #0
 800bd92:	607b      	str	r3, [r7, #4]
 800bd94:	e002      	b.n	800bd9c <osKernelStart+0x3c>
    } else {
      stat = osError;
 800bd96:	f04f 33ff 	mov.w	r3, #4294967295
 800bd9a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800bd9c:	687b      	ldr	r3, [r7, #4]
}
 800bd9e:	4618      	mov	r0, r3
 800bda0:	3708      	adds	r7, #8
 800bda2:	46bd      	mov	sp, r7
 800bda4:	bd80      	pop	{r7, pc}
 800bda6:	bf00      	nop
 800bda8:	20000668 	.word	0x20000668

0800bdac <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800bdac:	b580      	push	{r7, lr}
 800bdae:	b082      	sub	sp, #8
 800bdb0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bdb2:	f3ef 8305 	mrs	r3, IPSR
 800bdb6:	603b      	str	r3, [r7, #0]
  return(result);
 800bdb8:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d003      	beq.n	800bdc6 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800bdbe:	f002 fa77 	bl	800e2b0 <xTaskGetTickCountFromISR>
 800bdc2:	6078      	str	r0, [r7, #4]
 800bdc4:	e002      	b.n	800bdcc <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800bdc6:	f002 fa63 	bl	800e290 <xTaskGetTickCount>
 800bdca:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 800bdcc:	687b      	ldr	r3, [r7, #4]
}
 800bdce:	4618      	mov	r0, r3
 800bdd0:	3708      	adds	r7, #8
 800bdd2:	46bd      	mov	sp, r7
 800bdd4:	bd80      	pop	{r7, pc}

0800bdd6 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800bdd6:	b580      	push	{r7, lr}
 800bdd8:	b08e      	sub	sp, #56	; 0x38
 800bdda:	af04      	add	r7, sp, #16
 800bddc:	60f8      	str	r0, [r7, #12]
 800bdde:	60b9      	str	r1, [r7, #8]
 800bde0:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800bde2:	2300      	movs	r3, #0
 800bde4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bde6:	f3ef 8305 	mrs	r3, IPSR
 800bdea:	617b      	str	r3, [r7, #20]
  return(result);
 800bdec:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d17e      	bne.n	800bef0 <osThreadNew+0x11a>
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d07b      	beq.n	800bef0 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800bdf8:	2380      	movs	r3, #128	; 0x80
 800bdfa:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800bdfc:	2318      	movs	r3, #24
 800bdfe:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800be00:	2300      	movs	r3, #0
 800be02:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800be04:	f04f 33ff 	mov.w	r3, #4294967295
 800be08:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d045      	beq.n	800be9c <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	2b00      	cmp	r3, #0
 800be16:	d002      	beq.n	800be1e <osThreadNew+0x48>
        name = attr->name;
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	699b      	ldr	r3, [r3, #24]
 800be22:	2b00      	cmp	r3, #0
 800be24:	d002      	beq.n	800be2c <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	699b      	ldr	r3, [r3, #24]
 800be2a:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800be2c:	69fb      	ldr	r3, [r7, #28]
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d008      	beq.n	800be44 <osThreadNew+0x6e>
 800be32:	69fb      	ldr	r3, [r7, #28]
 800be34:	2b38      	cmp	r3, #56	; 0x38
 800be36:	d805      	bhi.n	800be44 <osThreadNew+0x6e>
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	685b      	ldr	r3, [r3, #4]
 800be3c:	f003 0301 	and.w	r3, r3, #1
 800be40:	2b00      	cmp	r3, #0
 800be42:	d001      	beq.n	800be48 <osThreadNew+0x72>
        return (NULL);
 800be44:	2300      	movs	r3, #0
 800be46:	e054      	b.n	800bef2 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	695b      	ldr	r3, [r3, #20]
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d003      	beq.n	800be58 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	695b      	ldr	r3, [r3, #20]
 800be54:	089b      	lsrs	r3, r3, #2
 800be56:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	689b      	ldr	r3, [r3, #8]
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d00e      	beq.n	800be7e <osThreadNew+0xa8>
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	68db      	ldr	r3, [r3, #12]
 800be64:	2b5b      	cmp	r3, #91	; 0x5b
 800be66:	d90a      	bls.n	800be7e <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d006      	beq.n	800be7e <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	695b      	ldr	r3, [r3, #20]
 800be74:	2b00      	cmp	r3, #0
 800be76:	d002      	beq.n	800be7e <osThreadNew+0xa8>
        mem = 1;
 800be78:	2301      	movs	r3, #1
 800be7a:	61bb      	str	r3, [r7, #24]
 800be7c:	e010      	b.n	800bea0 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	689b      	ldr	r3, [r3, #8]
 800be82:	2b00      	cmp	r3, #0
 800be84:	d10c      	bne.n	800bea0 <osThreadNew+0xca>
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	68db      	ldr	r3, [r3, #12]
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d108      	bne.n	800bea0 <osThreadNew+0xca>
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	691b      	ldr	r3, [r3, #16]
 800be92:	2b00      	cmp	r3, #0
 800be94:	d104      	bne.n	800bea0 <osThreadNew+0xca>
          mem = 0;
 800be96:	2300      	movs	r3, #0
 800be98:	61bb      	str	r3, [r7, #24]
 800be9a:	e001      	b.n	800bea0 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800be9c:	2300      	movs	r3, #0
 800be9e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800bea0:	69bb      	ldr	r3, [r7, #24]
 800bea2:	2b01      	cmp	r3, #1
 800bea4:	d110      	bne.n	800bec8 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800beaa:	687a      	ldr	r2, [r7, #4]
 800beac:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800beae:	9202      	str	r2, [sp, #8]
 800beb0:	9301      	str	r3, [sp, #4]
 800beb2:	69fb      	ldr	r3, [r7, #28]
 800beb4:	9300      	str	r3, [sp, #0]
 800beb6:	68bb      	ldr	r3, [r7, #8]
 800beb8:	6a3a      	ldr	r2, [r7, #32]
 800beba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bebc:	68f8      	ldr	r0, [r7, #12]
 800bebe:	f001 fdf9 	bl	800dab4 <xTaskCreateStatic>
 800bec2:	4603      	mov	r3, r0
 800bec4:	613b      	str	r3, [r7, #16]
 800bec6:	e013      	b.n	800bef0 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800bec8:	69bb      	ldr	r3, [r7, #24]
 800beca:	2b00      	cmp	r3, #0
 800becc:	d110      	bne.n	800bef0 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800bece:	6a3b      	ldr	r3, [r7, #32]
 800bed0:	b29a      	uxth	r2, r3
 800bed2:	f107 0310 	add.w	r3, r7, #16
 800bed6:	9301      	str	r3, [sp, #4]
 800bed8:	69fb      	ldr	r3, [r7, #28]
 800beda:	9300      	str	r3, [sp, #0]
 800bedc:	68bb      	ldr	r3, [r7, #8]
 800bede:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bee0:	68f8      	ldr	r0, [r7, #12]
 800bee2:	f001 fe44 	bl	800db6e <xTaskCreate>
 800bee6:	4603      	mov	r3, r0
 800bee8:	2b01      	cmp	r3, #1
 800beea:	d001      	beq.n	800bef0 <osThreadNew+0x11a>
            hTask = NULL;
 800beec:	2300      	movs	r3, #0
 800beee:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800bef0:	693b      	ldr	r3, [r7, #16]
}
 800bef2:	4618      	mov	r0, r3
 800bef4:	3728      	adds	r7, #40	; 0x28
 800bef6:	46bd      	mov	sp, r7
 800bef8:	bd80      	pop	{r7, pc}

0800befa <osThreadSuspend>:

  return (stat);
}

#if (configUSE_OS2_THREAD_SUSPEND_RESUME == 1)
osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 800befa:	b580      	push	{r7, lr}
 800befc:	b086      	sub	sp, #24
 800befe:	af00      	add	r7, sp, #0
 800bf00:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bf06:	f3ef 8305 	mrs	r3, IPSR
 800bf0a:	60fb      	str	r3, [r7, #12]
  return(result);
 800bf0c:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d003      	beq.n	800bf1a <osThreadSuspend+0x20>
    stat = osErrorISR;
 800bf12:	f06f 0305 	mvn.w	r3, #5
 800bf16:	617b      	str	r3, [r7, #20]
 800bf18:	e00b      	b.n	800bf32 <osThreadSuspend+0x38>
  }
  else if (hTask == NULL) {
 800bf1a:	693b      	ldr	r3, [r7, #16]
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d103      	bne.n	800bf28 <osThreadSuspend+0x2e>
    stat = osErrorParameter;
 800bf20:	f06f 0303 	mvn.w	r3, #3
 800bf24:	617b      	str	r3, [r7, #20]
 800bf26:	e004      	b.n	800bf32 <osThreadSuspend+0x38>
  }
  else {
    stat = osOK;
 800bf28:	2300      	movs	r3, #0
 800bf2a:	617b      	str	r3, [r7, #20]
    vTaskSuspend (hTask);
 800bf2c:	6938      	ldr	r0, [r7, #16]
 800bf2e:	f001 ff97 	bl	800de60 <vTaskSuspend>
  }

  return (stat);
 800bf32:	697b      	ldr	r3, [r7, #20]
}
 800bf34:	4618      	mov	r0, r3
 800bf36:	3718      	adds	r7, #24
 800bf38:	46bd      	mov	sp, r7
 800bf3a:	bd80      	pop	{r7, pc}

0800bf3c <osThreadResume>:

osStatus_t osThreadResume (osThreadId_t thread_id) {
 800bf3c:	b580      	push	{r7, lr}
 800bf3e:	b086      	sub	sp, #24
 800bf40:	af00      	add	r7, sp, #0
 800bf42:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bf48:	f3ef 8305 	mrs	r3, IPSR
 800bf4c:	60fb      	str	r3, [r7, #12]
  return(result);
 800bf4e:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d003      	beq.n	800bf5c <osThreadResume+0x20>
    stat = osErrorISR;
 800bf54:	f06f 0305 	mvn.w	r3, #5
 800bf58:	617b      	str	r3, [r7, #20]
 800bf5a:	e00b      	b.n	800bf74 <osThreadResume+0x38>
  }
  else if (hTask == NULL) {
 800bf5c:	693b      	ldr	r3, [r7, #16]
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d103      	bne.n	800bf6a <osThreadResume+0x2e>
    stat = osErrorParameter;
 800bf62:	f06f 0303 	mvn.w	r3, #3
 800bf66:	617b      	str	r3, [r7, #20]
 800bf68:	e004      	b.n	800bf74 <osThreadResume+0x38>
  }
  else {
    stat = osOK;
 800bf6a:	2300      	movs	r3, #0
 800bf6c:	617b      	str	r3, [r7, #20]
    vTaskResume (hTask);
 800bf6e:	6938      	ldr	r0, [r7, #16]
 800bf70:	f002 f81e 	bl	800dfb0 <vTaskResume>
  }

  return (stat);
 800bf74:	697b      	ldr	r3, [r7, #20]
}
 800bf76:	4618      	mov	r0, r3
 800bf78:	3718      	adds	r7, #24
 800bf7a:	46bd      	mov	sp, r7
 800bf7c:	bd80      	pop	{r7, pc}

0800bf7e <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800bf7e:	b580      	push	{r7, lr}
 800bf80:	b084      	sub	sp, #16
 800bf82:	af00      	add	r7, sp, #0
 800bf84:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bf86:	f3ef 8305 	mrs	r3, IPSR
 800bf8a:	60bb      	str	r3, [r7, #8]
  return(result);
 800bf8c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d003      	beq.n	800bf9a <osDelay+0x1c>
    stat = osErrorISR;
 800bf92:	f06f 0305 	mvn.w	r3, #5
 800bf96:	60fb      	str	r3, [r7, #12]
 800bf98:	e007      	b.n	800bfaa <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800bf9a:	2300      	movs	r3, #0
 800bf9c:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d002      	beq.n	800bfaa <osDelay+0x2c>
      vTaskDelay(ticks);
 800bfa4:	6878      	ldr	r0, [r7, #4]
 800bfa6:	f001 ff27 	bl	800ddf8 <vTaskDelay>
    }
  }

  return (stat);
 800bfaa:	68fb      	ldr	r3, [r7, #12]
}
 800bfac:	4618      	mov	r0, r3
 800bfae:	3710      	adds	r7, #16
 800bfb0:	46bd      	mov	sp, r7
 800bfb2:	bd80      	pop	{r7, pc}

0800bfb4 <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 800bfb4:	b580      	push	{r7, lr}
 800bfb6:	b086      	sub	sp, #24
 800bfb8:	af00      	add	r7, sp, #0
 800bfba:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 800bfbc:	2300      	movs	r3, #0
 800bfbe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bfc0:	f3ef 8305 	mrs	r3, IPSR
 800bfc4:	60fb      	str	r3, [r7, #12]
  return(result);
 800bfc6:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d12d      	bne.n	800c028 <osEventFlagsNew+0x74>
    mem = -1;
 800bfcc:	f04f 33ff 	mov.w	r3, #4294967295
 800bfd0:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d015      	beq.n	800c004 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	689b      	ldr	r3, [r3, #8]
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d006      	beq.n	800bfee <osEventFlagsNew+0x3a>
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	68db      	ldr	r3, [r3, #12]
 800bfe4:	2b1f      	cmp	r3, #31
 800bfe6:	d902      	bls.n	800bfee <osEventFlagsNew+0x3a>
        mem = 1;
 800bfe8:	2301      	movs	r3, #1
 800bfea:	613b      	str	r3, [r7, #16]
 800bfec:	e00c      	b.n	800c008 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	689b      	ldr	r3, [r3, #8]
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d108      	bne.n	800c008 <osEventFlagsNew+0x54>
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	68db      	ldr	r3, [r3, #12]
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d104      	bne.n	800c008 <osEventFlagsNew+0x54>
          mem = 0;
 800bffe:	2300      	movs	r3, #0
 800c000:	613b      	str	r3, [r7, #16]
 800c002:	e001      	b.n	800c008 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 800c004:	2300      	movs	r3, #0
 800c006:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 800c008:	693b      	ldr	r3, [r7, #16]
 800c00a:	2b01      	cmp	r3, #1
 800c00c:	d106      	bne.n	800c01c <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	689b      	ldr	r3, [r3, #8]
 800c012:	4618      	mov	r0, r3
 800c014:	f000 fb2c 	bl	800c670 <xEventGroupCreateStatic>
 800c018:	6178      	str	r0, [r7, #20]
 800c01a:	e005      	b.n	800c028 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 800c01c:	693b      	ldr	r3, [r7, #16]
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d102      	bne.n	800c028 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 800c022:	f000 fb5c 	bl	800c6de <xEventGroupCreate>
 800c026:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 800c028:	697b      	ldr	r3, [r7, #20]
}
 800c02a:	4618      	mov	r0, r3
 800c02c:	3718      	adds	r7, #24
 800c02e:	46bd      	mov	sp, r7
 800c030:	bd80      	pop	{r7, pc}
	...

0800c034 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 800c034:	b580      	push	{r7, lr}
 800c036:	b086      	sub	sp, #24
 800c038:	af00      	add	r7, sp, #0
 800c03a:	6078      	str	r0, [r7, #4]
 800c03c:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800c042:	693b      	ldr	r3, [r7, #16]
 800c044:	2b00      	cmp	r3, #0
 800c046:	d004      	beq.n	800c052 <osEventFlagsSet+0x1e>
 800c048:	683b      	ldr	r3, [r7, #0]
 800c04a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d003      	beq.n	800c05a <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 800c052:	f06f 0303 	mvn.w	r3, #3
 800c056:	617b      	str	r3, [r7, #20]
 800c058:	e028      	b.n	800c0ac <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c05a:	f3ef 8305 	mrs	r3, IPSR
 800c05e:	60fb      	str	r3, [r7, #12]
  return(result);
 800c060:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800c062:	2b00      	cmp	r3, #0
 800c064:	d01d      	beq.n	800c0a2 <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 800c066:	2300      	movs	r3, #0
 800c068:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 800c06a:	f107 0308 	add.w	r3, r7, #8
 800c06e:	461a      	mov	r2, r3
 800c070:	6839      	ldr	r1, [r7, #0]
 800c072:	6938      	ldr	r0, [r7, #16]
 800c074:	f000 fcd6 	bl	800ca24 <xEventGroupSetBitsFromISR>
 800c078:	4603      	mov	r3, r0
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d103      	bne.n	800c086 <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 800c07e:	f06f 0302 	mvn.w	r3, #2
 800c082:	617b      	str	r3, [r7, #20]
 800c084:	e012      	b.n	800c0ac <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 800c086:	683b      	ldr	r3, [r7, #0]
 800c088:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 800c08a:	68bb      	ldr	r3, [r7, #8]
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d00d      	beq.n	800c0ac <osEventFlagsSet+0x78>
 800c090:	4b09      	ldr	r3, [pc, #36]	; (800c0b8 <osEventFlagsSet+0x84>)
 800c092:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c096:	601a      	str	r2, [r3, #0]
 800c098:	f3bf 8f4f 	dsb	sy
 800c09c:	f3bf 8f6f 	isb	sy
 800c0a0:	e004      	b.n	800c0ac <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 800c0a2:	6839      	ldr	r1, [r7, #0]
 800c0a4:	6938      	ldr	r0, [r7, #16]
 800c0a6:	f000 fc03 	bl	800c8b0 <xEventGroupSetBits>
 800c0aa:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 800c0ac:	697b      	ldr	r3, [r7, #20]
}
 800c0ae:	4618      	mov	r0, r3
 800c0b0:	3718      	adds	r7, #24
 800c0b2:	46bd      	mov	sp, r7
 800c0b4:	bd80      	pop	{r7, pc}
 800c0b6:	bf00      	nop
 800c0b8:	e000ed04 	.word	0xe000ed04

0800c0bc <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 800c0bc:	b580      	push	{r7, lr}
 800c0be:	b08c      	sub	sp, #48	; 0x30
 800c0c0:	af02      	add	r7, sp, #8
 800c0c2:	60f8      	str	r0, [r7, #12]
 800c0c4:	60b9      	str	r1, [r7, #8]
 800c0c6:	607a      	str	r2, [r7, #4]
 800c0c8:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800c0ce:	69bb      	ldr	r3, [r7, #24]
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d004      	beq.n	800c0de <osEventFlagsWait+0x22>
 800c0d4:	68bb      	ldr	r3, [r7, #8]
 800c0d6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d003      	beq.n	800c0e6 <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 800c0de:	f06f 0303 	mvn.w	r3, #3
 800c0e2:	61fb      	str	r3, [r7, #28]
 800c0e4:	e04b      	b.n	800c17e <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c0e6:	f3ef 8305 	mrs	r3, IPSR
 800c0ea:	617b      	str	r3, [r7, #20]
  return(result);
 800c0ec:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d003      	beq.n	800c0fa <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 800c0f2:	f06f 0305 	mvn.w	r3, #5
 800c0f6:	61fb      	str	r3, [r7, #28]
 800c0f8:	e041      	b.n	800c17e <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	f003 0301 	and.w	r3, r3, #1
 800c100:	2b00      	cmp	r3, #0
 800c102:	d002      	beq.n	800c10a <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 800c104:	2301      	movs	r3, #1
 800c106:	627b      	str	r3, [r7, #36]	; 0x24
 800c108:	e001      	b.n	800c10e <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 800c10a:	2300      	movs	r3, #0
 800c10c:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	f003 0302 	and.w	r3, r3, #2
 800c114:	2b00      	cmp	r3, #0
 800c116:	d002      	beq.n	800c11e <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 800c118:	2300      	movs	r3, #0
 800c11a:	623b      	str	r3, [r7, #32]
 800c11c:	e001      	b.n	800c122 <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 800c11e:	2301      	movs	r3, #1
 800c120:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 800c122:	683b      	ldr	r3, [r7, #0]
 800c124:	9300      	str	r3, [sp, #0]
 800c126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c128:	6a3a      	ldr	r2, [r7, #32]
 800c12a:	68b9      	ldr	r1, [r7, #8]
 800c12c:	69b8      	ldr	r0, [r7, #24]
 800c12e:	f000 faf1 	bl	800c714 <xEventGroupWaitBits>
 800c132:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	f003 0301 	and.w	r3, r3, #1
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d010      	beq.n	800c160 <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 800c13e:	68ba      	ldr	r2, [r7, #8]
 800c140:	69fb      	ldr	r3, [r7, #28]
 800c142:	4013      	ands	r3, r2
 800c144:	68ba      	ldr	r2, [r7, #8]
 800c146:	429a      	cmp	r2, r3
 800c148:	d019      	beq.n	800c17e <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 800c14a:	683b      	ldr	r3, [r7, #0]
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d003      	beq.n	800c158 <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 800c150:	f06f 0301 	mvn.w	r3, #1
 800c154:	61fb      	str	r3, [r7, #28]
 800c156:	e012      	b.n	800c17e <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 800c158:	f06f 0302 	mvn.w	r3, #2
 800c15c:	61fb      	str	r3, [r7, #28]
 800c15e:	e00e      	b.n	800c17e <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 800c160:	68ba      	ldr	r2, [r7, #8]
 800c162:	69fb      	ldr	r3, [r7, #28]
 800c164:	4013      	ands	r3, r2
 800c166:	2b00      	cmp	r3, #0
 800c168:	d109      	bne.n	800c17e <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 800c16a:	683b      	ldr	r3, [r7, #0]
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d003      	beq.n	800c178 <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 800c170:	f06f 0301 	mvn.w	r3, #1
 800c174:	61fb      	str	r3, [r7, #28]
 800c176:	e002      	b.n	800c17e <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 800c178:	f06f 0302 	mvn.w	r3, #2
 800c17c:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 800c17e:	69fb      	ldr	r3, [r7, #28]
}
 800c180:	4618      	mov	r0, r3
 800c182:	3728      	adds	r7, #40	; 0x28
 800c184:	46bd      	mov	sp, r7
 800c186:	bd80      	pop	{r7, pc}

0800c188 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800c188:	b580      	push	{r7, lr}
 800c18a:	b088      	sub	sp, #32
 800c18c:	af00      	add	r7, sp, #0
 800c18e:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800c190:	2300      	movs	r3, #0
 800c192:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c194:	f3ef 8305 	mrs	r3, IPSR
 800c198:	60bb      	str	r3, [r7, #8]
  return(result);
 800c19a:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d174      	bne.n	800c28a <osMutexNew+0x102>
    if (attr != NULL) {
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d003      	beq.n	800c1ae <osMutexNew+0x26>
      type = attr->attr_bits;
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	685b      	ldr	r3, [r3, #4]
 800c1aa:	61bb      	str	r3, [r7, #24]
 800c1ac:	e001      	b.n	800c1b2 <osMutexNew+0x2a>
    } else {
      type = 0U;
 800c1ae:	2300      	movs	r3, #0
 800c1b0:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800c1b2:	69bb      	ldr	r3, [r7, #24]
 800c1b4:	f003 0301 	and.w	r3, r3, #1
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d002      	beq.n	800c1c2 <osMutexNew+0x3a>
      rmtx = 1U;
 800c1bc:	2301      	movs	r3, #1
 800c1be:	617b      	str	r3, [r7, #20]
 800c1c0:	e001      	b.n	800c1c6 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800c1c2:	2300      	movs	r3, #0
 800c1c4:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800c1c6:	69bb      	ldr	r3, [r7, #24]
 800c1c8:	f003 0308 	and.w	r3, r3, #8
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d15c      	bne.n	800c28a <osMutexNew+0x102>
      mem = -1;
 800c1d0:	f04f 33ff 	mov.w	r3, #4294967295
 800c1d4:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d015      	beq.n	800c208 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	689b      	ldr	r3, [r3, #8]
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d006      	beq.n	800c1f2 <osMutexNew+0x6a>
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	68db      	ldr	r3, [r3, #12]
 800c1e8:	2b4f      	cmp	r3, #79	; 0x4f
 800c1ea:	d902      	bls.n	800c1f2 <osMutexNew+0x6a>
          mem = 1;
 800c1ec:	2301      	movs	r3, #1
 800c1ee:	613b      	str	r3, [r7, #16]
 800c1f0:	e00c      	b.n	800c20c <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	689b      	ldr	r3, [r3, #8]
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d108      	bne.n	800c20c <osMutexNew+0x84>
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	68db      	ldr	r3, [r3, #12]
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d104      	bne.n	800c20c <osMutexNew+0x84>
            mem = 0;
 800c202:	2300      	movs	r3, #0
 800c204:	613b      	str	r3, [r7, #16]
 800c206:	e001      	b.n	800c20c <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800c208:	2300      	movs	r3, #0
 800c20a:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800c20c:	693b      	ldr	r3, [r7, #16]
 800c20e:	2b01      	cmp	r3, #1
 800c210:	d112      	bne.n	800c238 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800c212:	697b      	ldr	r3, [r7, #20]
 800c214:	2b00      	cmp	r3, #0
 800c216:	d007      	beq.n	800c228 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	689b      	ldr	r3, [r3, #8]
 800c21c:	4619      	mov	r1, r3
 800c21e:	2004      	movs	r0, #4
 800c220:	f000 fe37 	bl	800ce92 <xQueueCreateMutexStatic>
 800c224:	61f8      	str	r0, [r7, #28]
 800c226:	e016      	b.n	800c256 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	689b      	ldr	r3, [r3, #8]
 800c22c:	4619      	mov	r1, r3
 800c22e:	2001      	movs	r0, #1
 800c230:	f000 fe2f 	bl	800ce92 <xQueueCreateMutexStatic>
 800c234:	61f8      	str	r0, [r7, #28]
 800c236:	e00e      	b.n	800c256 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800c238:	693b      	ldr	r3, [r7, #16]
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d10b      	bne.n	800c256 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800c23e:	697b      	ldr	r3, [r7, #20]
 800c240:	2b00      	cmp	r3, #0
 800c242:	d004      	beq.n	800c24e <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800c244:	2004      	movs	r0, #4
 800c246:	f000 fe0c 	bl	800ce62 <xQueueCreateMutex>
 800c24a:	61f8      	str	r0, [r7, #28]
 800c24c:	e003      	b.n	800c256 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800c24e:	2001      	movs	r0, #1
 800c250:	f000 fe07 	bl	800ce62 <xQueueCreateMutex>
 800c254:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800c256:	69fb      	ldr	r3, [r7, #28]
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d00c      	beq.n	800c276 <osMutexNew+0xee>
        if (attr != NULL) {
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d003      	beq.n	800c26a <osMutexNew+0xe2>
          name = attr->name;
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	60fb      	str	r3, [r7, #12]
 800c268:	e001      	b.n	800c26e <osMutexNew+0xe6>
        } else {
          name = NULL;
 800c26a:	2300      	movs	r3, #0
 800c26c:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800c26e:	68f9      	ldr	r1, [r7, #12]
 800c270:	69f8      	ldr	r0, [r7, #28]
 800c272:	f001 fbc1 	bl	800d9f8 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800c276:	69fb      	ldr	r3, [r7, #28]
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d006      	beq.n	800c28a <osMutexNew+0x102>
 800c27c:	697b      	ldr	r3, [r7, #20]
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d003      	beq.n	800c28a <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800c282:	69fb      	ldr	r3, [r7, #28]
 800c284:	f043 0301 	orr.w	r3, r3, #1
 800c288:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800c28a:	69fb      	ldr	r3, [r7, #28]
}
 800c28c:	4618      	mov	r0, r3
 800c28e:	3720      	adds	r7, #32
 800c290:	46bd      	mov	sp, r7
 800c292:	bd80      	pop	{r7, pc}

0800c294 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800c294:	b580      	push	{r7, lr}
 800c296:	b086      	sub	sp, #24
 800c298:	af00      	add	r7, sp, #0
 800c29a:	6078      	str	r0, [r7, #4]
 800c29c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	f023 0301 	bic.w	r3, r3, #1
 800c2a4:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	f003 0301 	and.w	r3, r3, #1
 800c2ac:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800c2ae:	2300      	movs	r3, #0
 800c2b0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c2b2:	f3ef 8305 	mrs	r3, IPSR
 800c2b6:	60bb      	str	r3, [r7, #8]
  return(result);
 800c2b8:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d003      	beq.n	800c2c6 <osMutexAcquire+0x32>
    stat = osErrorISR;
 800c2be:	f06f 0305 	mvn.w	r3, #5
 800c2c2:	617b      	str	r3, [r7, #20]
 800c2c4:	e02c      	b.n	800c320 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800c2c6:	693b      	ldr	r3, [r7, #16]
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d103      	bne.n	800c2d4 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800c2cc:	f06f 0303 	mvn.w	r3, #3
 800c2d0:	617b      	str	r3, [r7, #20]
 800c2d2:	e025      	b.n	800c320 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d011      	beq.n	800c2fe <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800c2da:	6839      	ldr	r1, [r7, #0]
 800c2dc:	6938      	ldr	r0, [r7, #16]
 800c2de:	f000 fe27 	bl	800cf30 <xQueueTakeMutexRecursive>
 800c2e2:	4603      	mov	r3, r0
 800c2e4:	2b01      	cmp	r3, #1
 800c2e6:	d01b      	beq.n	800c320 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800c2e8:	683b      	ldr	r3, [r7, #0]
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d003      	beq.n	800c2f6 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800c2ee:	f06f 0301 	mvn.w	r3, #1
 800c2f2:	617b      	str	r3, [r7, #20]
 800c2f4:	e014      	b.n	800c320 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800c2f6:	f06f 0302 	mvn.w	r3, #2
 800c2fa:	617b      	str	r3, [r7, #20]
 800c2fc:	e010      	b.n	800c320 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800c2fe:	6839      	ldr	r1, [r7, #0]
 800c300:	6938      	ldr	r0, [r7, #16]
 800c302:	f001 f8c5 	bl	800d490 <xQueueSemaphoreTake>
 800c306:	4603      	mov	r3, r0
 800c308:	2b01      	cmp	r3, #1
 800c30a:	d009      	beq.n	800c320 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800c30c:	683b      	ldr	r3, [r7, #0]
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d003      	beq.n	800c31a <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800c312:	f06f 0301 	mvn.w	r3, #1
 800c316:	617b      	str	r3, [r7, #20]
 800c318:	e002      	b.n	800c320 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800c31a:	f06f 0302 	mvn.w	r3, #2
 800c31e:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800c320:	697b      	ldr	r3, [r7, #20]
}
 800c322:	4618      	mov	r0, r3
 800c324:	3718      	adds	r7, #24
 800c326:	46bd      	mov	sp, r7
 800c328:	bd80      	pop	{r7, pc}

0800c32a <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800c32a:	b580      	push	{r7, lr}
 800c32c:	b086      	sub	sp, #24
 800c32e:	af00      	add	r7, sp, #0
 800c330:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	f023 0301 	bic.w	r3, r3, #1
 800c338:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	f003 0301 	and.w	r3, r3, #1
 800c340:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800c342:	2300      	movs	r3, #0
 800c344:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c346:	f3ef 8305 	mrs	r3, IPSR
 800c34a:	60bb      	str	r3, [r7, #8]
  return(result);
 800c34c:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d003      	beq.n	800c35a <osMutexRelease+0x30>
    stat = osErrorISR;
 800c352:	f06f 0305 	mvn.w	r3, #5
 800c356:	617b      	str	r3, [r7, #20]
 800c358:	e01f      	b.n	800c39a <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800c35a:	693b      	ldr	r3, [r7, #16]
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d103      	bne.n	800c368 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800c360:	f06f 0303 	mvn.w	r3, #3
 800c364:	617b      	str	r3, [r7, #20]
 800c366:	e018      	b.n	800c39a <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d009      	beq.n	800c382 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800c36e:	6938      	ldr	r0, [r7, #16]
 800c370:	f000 fdaa 	bl	800cec8 <xQueueGiveMutexRecursive>
 800c374:	4603      	mov	r3, r0
 800c376:	2b01      	cmp	r3, #1
 800c378:	d00f      	beq.n	800c39a <osMutexRelease+0x70>
        stat = osErrorResource;
 800c37a:	f06f 0302 	mvn.w	r3, #2
 800c37e:	617b      	str	r3, [r7, #20]
 800c380:	e00b      	b.n	800c39a <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800c382:	2300      	movs	r3, #0
 800c384:	2200      	movs	r2, #0
 800c386:	2100      	movs	r1, #0
 800c388:	6938      	ldr	r0, [r7, #16]
 800c38a:	f000 fe07 	bl	800cf9c <xQueueGenericSend>
 800c38e:	4603      	mov	r3, r0
 800c390:	2b01      	cmp	r3, #1
 800c392:	d002      	beq.n	800c39a <osMutexRelease+0x70>
        stat = osErrorResource;
 800c394:	f06f 0302 	mvn.w	r3, #2
 800c398:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800c39a:	697b      	ldr	r3, [r7, #20]
}
 800c39c:	4618      	mov	r0, r3
 800c39e:	3718      	adds	r7, #24
 800c3a0:	46bd      	mov	sp, r7
 800c3a2:	bd80      	pop	{r7, pc}

0800c3a4 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800c3a4:	b580      	push	{r7, lr}
 800c3a6:	b08a      	sub	sp, #40	; 0x28
 800c3a8:	af02      	add	r7, sp, #8
 800c3aa:	60f8      	str	r0, [r7, #12]
 800c3ac:	60b9      	str	r1, [r7, #8]
 800c3ae:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800c3b0:	2300      	movs	r3, #0
 800c3b2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c3b4:	f3ef 8305 	mrs	r3, IPSR
 800c3b8:	613b      	str	r3, [r7, #16]
  return(result);
 800c3ba:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d15f      	bne.n	800c480 <osMessageQueueNew+0xdc>
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d05c      	beq.n	800c480 <osMessageQueueNew+0xdc>
 800c3c6:	68bb      	ldr	r3, [r7, #8]
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d059      	beq.n	800c480 <osMessageQueueNew+0xdc>
    mem = -1;
 800c3cc:	f04f 33ff 	mov.w	r3, #4294967295
 800c3d0:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d029      	beq.n	800c42c <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	689b      	ldr	r3, [r3, #8]
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d012      	beq.n	800c406 <osMessageQueueNew+0x62>
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	68db      	ldr	r3, [r3, #12]
 800c3e4:	2b4f      	cmp	r3, #79	; 0x4f
 800c3e6:	d90e      	bls.n	800c406 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d00a      	beq.n	800c406 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	695a      	ldr	r2, [r3, #20]
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	68b9      	ldr	r1, [r7, #8]
 800c3f8:	fb01 f303 	mul.w	r3, r1, r3
 800c3fc:	429a      	cmp	r2, r3
 800c3fe:	d302      	bcc.n	800c406 <osMessageQueueNew+0x62>
        mem = 1;
 800c400:	2301      	movs	r3, #1
 800c402:	61bb      	str	r3, [r7, #24]
 800c404:	e014      	b.n	800c430 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	689b      	ldr	r3, [r3, #8]
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d110      	bne.n	800c430 <osMessageQueueNew+0x8c>
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	68db      	ldr	r3, [r3, #12]
 800c412:	2b00      	cmp	r3, #0
 800c414:	d10c      	bne.n	800c430 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d108      	bne.n	800c430 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	695b      	ldr	r3, [r3, #20]
 800c422:	2b00      	cmp	r3, #0
 800c424:	d104      	bne.n	800c430 <osMessageQueueNew+0x8c>
          mem = 0;
 800c426:	2300      	movs	r3, #0
 800c428:	61bb      	str	r3, [r7, #24]
 800c42a:	e001      	b.n	800c430 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800c42c:	2300      	movs	r3, #0
 800c42e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800c430:	69bb      	ldr	r3, [r7, #24]
 800c432:	2b01      	cmp	r3, #1
 800c434:	d10b      	bne.n	800c44e <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	691a      	ldr	r2, [r3, #16]
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	689b      	ldr	r3, [r3, #8]
 800c43e:	2100      	movs	r1, #0
 800c440:	9100      	str	r1, [sp, #0]
 800c442:	68b9      	ldr	r1, [r7, #8]
 800c444:	68f8      	ldr	r0, [r7, #12]
 800c446:	f000 fc1d 	bl	800cc84 <xQueueGenericCreateStatic>
 800c44a:	61f8      	str	r0, [r7, #28]
 800c44c:	e008      	b.n	800c460 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800c44e:	69bb      	ldr	r3, [r7, #24]
 800c450:	2b00      	cmp	r3, #0
 800c452:	d105      	bne.n	800c460 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800c454:	2200      	movs	r2, #0
 800c456:	68b9      	ldr	r1, [r7, #8]
 800c458:	68f8      	ldr	r0, [r7, #12]
 800c45a:	f000 fc8b 	bl	800cd74 <xQueueGenericCreate>
 800c45e:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800c460:	69fb      	ldr	r3, [r7, #28]
 800c462:	2b00      	cmp	r3, #0
 800c464:	d00c      	beq.n	800c480 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d003      	beq.n	800c474 <osMessageQueueNew+0xd0>
        name = attr->name;
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	617b      	str	r3, [r7, #20]
 800c472:	e001      	b.n	800c478 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800c474:	2300      	movs	r3, #0
 800c476:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800c478:	6979      	ldr	r1, [r7, #20]
 800c47a:	69f8      	ldr	r0, [r7, #28]
 800c47c:	f001 fabc 	bl	800d9f8 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800c480:	69fb      	ldr	r3, [r7, #28]
}
 800c482:	4618      	mov	r0, r3
 800c484:	3720      	adds	r7, #32
 800c486:	46bd      	mov	sp, r7
 800c488:	bd80      	pop	{r7, pc}
	...

0800c48c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800c48c:	b580      	push	{r7, lr}
 800c48e:	b088      	sub	sp, #32
 800c490:	af00      	add	r7, sp, #0
 800c492:	60f8      	str	r0, [r7, #12]
 800c494:	60b9      	str	r1, [r7, #8]
 800c496:	603b      	str	r3, [r7, #0]
 800c498:	4613      	mov	r3, r2
 800c49a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800c49c:	68fb      	ldr	r3, [r7, #12]
 800c49e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800c4a0:	2300      	movs	r3, #0
 800c4a2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c4a4:	f3ef 8305 	mrs	r3, IPSR
 800c4a8:	617b      	str	r3, [r7, #20]
  return(result);
 800c4aa:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d028      	beq.n	800c502 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800c4b0:	69bb      	ldr	r3, [r7, #24]
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d005      	beq.n	800c4c2 <osMessageQueuePut+0x36>
 800c4b6:	68bb      	ldr	r3, [r7, #8]
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d002      	beq.n	800c4c2 <osMessageQueuePut+0x36>
 800c4bc:	683b      	ldr	r3, [r7, #0]
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d003      	beq.n	800c4ca <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800c4c2:	f06f 0303 	mvn.w	r3, #3
 800c4c6:	61fb      	str	r3, [r7, #28]
 800c4c8:	e038      	b.n	800c53c <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800c4ca:	2300      	movs	r3, #0
 800c4cc:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800c4ce:	f107 0210 	add.w	r2, r7, #16
 800c4d2:	2300      	movs	r3, #0
 800c4d4:	68b9      	ldr	r1, [r7, #8]
 800c4d6:	69b8      	ldr	r0, [r7, #24]
 800c4d8:	f000 fe5e 	bl	800d198 <xQueueGenericSendFromISR>
 800c4dc:	4603      	mov	r3, r0
 800c4de:	2b01      	cmp	r3, #1
 800c4e0:	d003      	beq.n	800c4ea <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800c4e2:	f06f 0302 	mvn.w	r3, #2
 800c4e6:	61fb      	str	r3, [r7, #28]
 800c4e8:	e028      	b.n	800c53c <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800c4ea:	693b      	ldr	r3, [r7, #16]
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d025      	beq.n	800c53c <osMessageQueuePut+0xb0>
 800c4f0:	4b15      	ldr	r3, [pc, #84]	; (800c548 <osMessageQueuePut+0xbc>)
 800c4f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c4f6:	601a      	str	r2, [r3, #0]
 800c4f8:	f3bf 8f4f 	dsb	sy
 800c4fc:	f3bf 8f6f 	isb	sy
 800c500:	e01c      	b.n	800c53c <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800c502:	69bb      	ldr	r3, [r7, #24]
 800c504:	2b00      	cmp	r3, #0
 800c506:	d002      	beq.n	800c50e <osMessageQueuePut+0x82>
 800c508:	68bb      	ldr	r3, [r7, #8]
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d103      	bne.n	800c516 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800c50e:	f06f 0303 	mvn.w	r3, #3
 800c512:	61fb      	str	r3, [r7, #28]
 800c514:	e012      	b.n	800c53c <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800c516:	2300      	movs	r3, #0
 800c518:	683a      	ldr	r2, [r7, #0]
 800c51a:	68b9      	ldr	r1, [r7, #8]
 800c51c:	69b8      	ldr	r0, [r7, #24]
 800c51e:	f000 fd3d 	bl	800cf9c <xQueueGenericSend>
 800c522:	4603      	mov	r3, r0
 800c524:	2b01      	cmp	r3, #1
 800c526:	d009      	beq.n	800c53c <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800c528:	683b      	ldr	r3, [r7, #0]
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d003      	beq.n	800c536 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800c52e:	f06f 0301 	mvn.w	r3, #1
 800c532:	61fb      	str	r3, [r7, #28]
 800c534:	e002      	b.n	800c53c <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800c536:	f06f 0302 	mvn.w	r3, #2
 800c53a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800c53c:	69fb      	ldr	r3, [r7, #28]
}
 800c53e:	4618      	mov	r0, r3
 800c540:	3720      	adds	r7, #32
 800c542:	46bd      	mov	sp, r7
 800c544:	bd80      	pop	{r7, pc}
 800c546:	bf00      	nop
 800c548:	e000ed04 	.word	0xe000ed04

0800c54c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800c54c:	b580      	push	{r7, lr}
 800c54e:	b088      	sub	sp, #32
 800c550:	af00      	add	r7, sp, #0
 800c552:	60f8      	str	r0, [r7, #12]
 800c554:	60b9      	str	r1, [r7, #8]
 800c556:	607a      	str	r2, [r7, #4]
 800c558:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800c55e:	2300      	movs	r3, #0
 800c560:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c562:	f3ef 8305 	mrs	r3, IPSR
 800c566:	617b      	str	r3, [r7, #20]
  return(result);
 800c568:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d028      	beq.n	800c5c0 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800c56e:	69bb      	ldr	r3, [r7, #24]
 800c570:	2b00      	cmp	r3, #0
 800c572:	d005      	beq.n	800c580 <osMessageQueueGet+0x34>
 800c574:	68bb      	ldr	r3, [r7, #8]
 800c576:	2b00      	cmp	r3, #0
 800c578:	d002      	beq.n	800c580 <osMessageQueueGet+0x34>
 800c57a:	683b      	ldr	r3, [r7, #0]
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d003      	beq.n	800c588 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800c580:	f06f 0303 	mvn.w	r3, #3
 800c584:	61fb      	str	r3, [r7, #28]
 800c586:	e037      	b.n	800c5f8 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800c588:	2300      	movs	r3, #0
 800c58a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800c58c:	f107 0310 	add.w	r3, r7, #16
 800c590:	461a      	mov	r2, r3
 800c592:	68b9      	ldr	r1, [r7, #8]
 800c594:	69b8      	ldr	r0, [r7, #24]
 800c596:	f001 f887 	bl	800d6a8 <xQueueReceiveFromISR>
 800c59a:	4603      	mov	r3, r0
 800c59c:	2b01      	cmp	r3, #1
 800c59e:	d003      	beq.n	800c5a8 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800c5a0:	f06f 0302 	mvn.w	r3, #2
 800c5a4:	61fb      	str	r3, [r7, #28]
 800c5a6:	e027      	b.n	800c5f8 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800c5a8:	693b      	ldr	r3, [r7, #16]
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d024      	beq.n	800c5f8 <osMessageQueueGet+0xac>
 800c5ae:	4b15      	ldr	r3, [pc, #84]	; (800c604 <osMessageQueueGet+0xb8>)
 800c5b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c5b4:	601a      	str	r2, [r3, #0]
 800c5b6:	f3bf 8f4f 	dsb	sy
 800c5ba:	f3bf 8f6f 	isb	sy
 800c5be:	e01b      	b.n	800c5f8 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800c5c0:	69bb      	ldr	r3, [r7, #24]
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d002      	beq.n	800c5cc <osMessageQueueGet+0x80>
 800c5c6:	68bb      	ldr	r3, [r7, #8]
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d103      	bne.n	800c5d4 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800c5cc:	f06f 0303 	mvn.w	r3, #3
 800c5d0:	61fb      	str	r3, [r7, #28]
 800c5d2:	e011      	b.n	800c5f8 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800c5d4:	683a      	ldr	r2, [r7, #0]
 800c5d6:	68b9      	ldr	r1, [r7, #8]
 800c5d8:	69b8      	ldr	r0, [r7, #24]
 800c5da:	f000 fe79 	bl	800d2d0 <xQueueReceive>
 800c5de:	4603      	mov	r3, r0
 800c5e0:	2b01      	cmp	r3, #1
 800c5e2:	d009      	beq.n	800c5f8 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800c5e4:	683b      	ldr	r3, [r7, #0]
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d003      	beq.n	800c5f2 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800c5ea:	f06f 0301 	mvn.w	r3, #1
 800c5ee:	61fb      	str	r3, [r7, #28]
 800c5f0:	e002      	b.n	800c5f8 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800c5f2:	f06f 0302 	mvn.w	r3, #2
 800c5f6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800c5f8:	69fb      	ldr	r3, [r7, #28]
}
 800c5fa:	4618      	mov	r0, r3
 800c5fc:	3720      	adds	r7, #32
 800c5fe:	46bd      	mov	sp, r7
 800c600:	bd80      	pop	{r7, pc}
 800c602:	bf00      	nop
 800c604:	e000ed04 	.word	0xe000ed04

0800c608 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800c608:	b480      	push	{r7}
 800c60a:	b085      	sub	sp, #20
 800c60c:	af00      	add	r7, sp, #0
 800c60e:	60f8      	str	r0, [r7, #12]
 800c610:	60b9      	str	r1, [r7, #8]
 800c612:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	4a07      	ldr	r2, [pc, #28]	; (800c634 <vApplicationGetIdleTaskMemory+0x2c>)
 800c618:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800c61a:	68bb      	ldr	r3, [r7, #8]
 800c61c:	4a06      	ldr	r2, [pc, #24]	; (800c638 <vApplicationGetIdleTaskMemory+0x30>)
 800c61e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	2280      	movs	r2, #128	; 0x80
 800c624:	601a      	str	r2, [r3, #0]
}
 800c626:	bf00      	nop
 800c628:	3714      	adds	r7, #20
 800c62a:	46bd      	mov	sp, r7
 800c62c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c630:	4770      	bx	lr
 800c632:	bf00      	nop
 800c634:	2000066c 	.word	0x2000066c
 800c638:	200006c8 	.word	0x200006c8

0800c63c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800c63c:	b480      	push	{r7}
 800c63e:	b085      	sub	sp, #20
 800c640:	af00      	add	r7, sp, #0
 800c642:	60f8      	str	r0, [r7, #12]
 800c644:	60b9      	str	r1, [r7, #8]
 800c646:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	4a07      	ldr	r2, [pc, #28]	; (800c668 <vApplicationGetTimerTaskMemory+0x2c>)
 800c64c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800c64e:	68bb      	ldr	r3, [r7, #8]
 800c650:	4a06      	ldr	r2, [pc, #24]	; (800c66c <vApplicationGetTimerTaskMemory+0x30>)
 800c652:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c65a:	601a      	str	r2, [r3, #0]
}
 800c65c:	bf00      	nop
 800c65e:	3714      	adds	r7, #20
 800c660:	46bd      	mov	sp, r7
 800c662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c666:	4770      	bx	lr
 800c668:	200008c8 	.word	0x200008c8
 800c66c:	20000924 	.word	0x20000924

0800c670 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 800c670:	b580      	push	{r7, lr}
 800c672:	b086      	sub	sp, #24
 800c674:	af00      	add	r7, sp, #0
 800c676:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d10a      	bne.n	800c694 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c67e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c682:	f383 8811 	msr	BASEPRI, r3
 800c686:	f3bf 8f6f 	isb	sy
 800c68a:	f3bf 8f4f 	dsb	sy
 800c68e:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800c690:	bf00      	nop
 800c692:	e7fe      	b.n	800c692 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 800c694:	2320      	movs	r3, #32
 800c696:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 800c698:	68bb      	ldr	r3, [r7, #8]
 800c69a:	2b20      	cmp	r3, #32
 800c69c:	d00a      	beq.n	800c6b4 <xEventGroupCreateStatic+0x44>
	__asm volatile
 800c69e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6a2:	f383 8811 	msr	BASEPRI, r3
 800c6a6:	f3bf 8f6f 	isb	sy
 800c6aa:	f3bf 8f4f 	dsb	sy
 800c6ae:	60fb      	str	r3, [r7, #12]
}
 800c6b0:	bf00      	nop
 800c6b2:	e7fe      	b.n	800c6b2 <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 800c6b8:	697b      	ldr	r3, [r7, #20]
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d00a      	beq.n	800c6d4 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 800c6be:	697b      	ldr	r3, [r7, #20]
 800c6c0:	2200      	movs	r2, #0
 800c6c2:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800c6c4:	697b      	ldr	r3, [r7, #20]
 800c6c6:	3304      	adds	r3, #4
 800c6c8:	4618      	mov	r0, r3
 800c6ca:	f000 f9bf 	bl	800ca4c <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 800c6ce:	697b      	ldr	r3, [r7, #20]
 800c6d0:	2201      	movs	r2, #1
 800c6d2:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 800c6d4:	697b      	ldr	r3, [r7, #20]
	}
 800c6d6:	4618      	mov	r0, r3
 800c6d8:	3718      	adds	r7, #24
 800c6da:	46bd      	mov	sp, r7
 800c6dc:	bd80      	pop	{r7, pc}

0800c6de <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 800c6de:	b580      	push	{r7, lr}
 800c6e0:	b082      	sub	sp, #8
 800c6e2:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 800c6e4:	2020      	movs	r0, #32
 800c6e6:	f003 f97f 	bl	800f9e8 <pvPortMalloc>
 800c6ea:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d00a      	beq.n	800c708 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	2200      	movs	r2, #0
 800c6f6:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	3304      	adds	r3, #4
 800c6fc:	4618      	mov	r0, r3
 800c6fe:	f000 f9a5 	bl	800ca4c <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	2200      	movs	r2, #0
 800c706:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 800c708:	687b      	ldr	r3, [r7, #4]
	}
 800c70a:	4618      	mov	r0, r3
 800c70c:	3708      	adds	r7, #8
 800c70e:	46bd      	mov	sp, r7
 800c710:	bd80      	pop	{r7, pc}
	...

0800c714 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 800c714:	b580      	push	{r7, lr}
 800c716:	b090      	sub	sp, #64	; 0x40
 800c718:	af00      	add	r7, sp, #0
 800c71a:	60f8      	str	r0, [r7, #12]
 800c71c:	60b9      	str	r1, [r7, #8]
 800c71e:	607a      	str	r2, [r7, #4]
 800c720:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 800c726:	2300      	movs	r3, #0
 800c728:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 800c72a:	2300      	movs	r3, #0
 800c72c:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	2b00      	cmp	r3, #0
 800c732:	d10a      	bne.n	800c74a <xEventGroupWaitBits+0x36>
	__asm volatile
 800c734:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c738:	f383 8811 	msr	BASEPRI, r3
 800c73c:	f3bf 8f6f 	isb	sy
 800c740:	f3bf 8f4f 	dsb	sy
 800c744:	623b      	str	r3, [r7, #32]
}
 800c746:	bf00      	nop
 800c748:	e7fe      	b.n	800c748 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800c74a:	68bb      	ldr	r3, [r7, #8]
 800c74c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800c750:	2b00      	cmp	r3, #0
 800c752:	d00a      	beq.n	800c76a <xEventGroupWaitBits+0x56>
	__asm volatile
 800c754:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c758:	f383 8811 	msr	BASEPRI, r3
 800c75c:	f3bf 8f6f 	isb	sy
 800c760:	f3bf 8f4f 	dsb	sy
 800c764:	61fb      	str	r3, [r7, #28]
}
 800c766:	bf00      	nop
 800c768:	e7fe      	b.n	800c768 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 800c76a:	68bb      	ldr	r3, [r7, #8]
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d10a      	bne.n	800c786 <xEventGroupWaitBits+0x72>
	__asm volatile
 800c770:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c774:	f383 8811 	msr	BASEPRI, r3
 800c778:	f3bf 8f6f 	isb	sy
 800c77c:	f3bf 8f4f 	dsb	sy
 800c780:	61bb      	str	r3, [r7, #24]
}
 800c782:	bf00      	nop
 800c784:	e7fe      	b.n	800c784 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c786:	f002 f979 	bl	800ea7c <xTaskGetSchedulerState>
 800c78a:	4603      	mov	r3, r0
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d102      	bne.n	800c796 <xEventGroupWaitBits+0x82>
 800c790:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c792:	2b00      	cmp	r3, #0
 800c794:	d101      	bne.n	800c79a <xEventGroupWaitBits+0x86>
 800c796:	2301      	movs	r3, #1
 800c798:	e000      	b.n	800c79c <xEventGroupWaitBits+0x88>
 800c79a:	2300      	movs	r3, #0
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d10a      	bne.n	800c7b6 <xEventGroupWaitBits+0xa2>
	__asm volatile
 800c7a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7a4:	f383 8811 	msr	BASEPRI, r3
 800c7a8:	f3bf 8f6f 	isb	sy
 800c7ac:	f3bf 8f4f 	dsb	sy
 800c7b0:	617b      	str	r3, [r7, #20]
}
 800c7b2:	bf00      	nop
 800c7b4:	e7fe      	b.n	800c7b4 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 800c7b6:	f001 fcbf 	bl	800e138 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 800c7ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 800c7c0:	683a      	ldr	r2, [r7, #0]
 800c7c2:	68b9      	ldr	r1, [r7, #8]
 800c7c4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c7c6:	f000 f90b 	bl	800c9e0 <prvTestWaitCondition>
 800c7ca:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 800c7cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d00e      	beq.n	800c7f0 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 800c7d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7d4:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 800c7d6:	2300      	movs	r3, #0
 800c7d8:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d028      	beq.n	800c832 <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800c7e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c7e2:	681a      	ldr	r2, [r3, #0]
 800c7e4:	68bb      	ldr	r3, [r7, #8]
 800c7e6:	43db      	mvns	r3, r3
 800c7e8:	401a      	ands	r2, r3
 800c7ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c7ec:	601a      	str	r2, [r3, #0]
 800c7ee:	e020      	b.n	800c832 <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 800c7f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d104      	bne.n	800c800 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 800c7f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7f8:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 800c7fa:	2301      	movs	r3, #1
 800c7fc:	633b      	str	r3, [r7, #48]	; 0x30
 800c7fe:	e018      	b.n	800c832 <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	2b00      	cmp	r3, #0
 800c804:	d003      	beq.n	800c80e <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 800c806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c808:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c80c:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 800c80e:	683b      	ldr	r3, [r7, #0]
 800c810:	2b00      	cmp	r3, #0
 800c812:	d003      	beq.n	800c81c <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 800c814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c816:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c81a:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 800c81c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c81e:	1d18      	adds	r0, r3, #4
 800c820:	68ba      	ldr	r2, [r7, #8]
 800c822:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c824:	4313      	orrs	r3, r2
 800c826:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c828:	4619      	mov	r1, r3
 800c82a:	f001 fe8f 	bl	800e54c <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 800c82e:	2300      	movs	r3, #0
 800c830:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 800c832:	f001 fc8f 	bl	800e154 <xTaskResumeAll>
 800c836:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 800c838:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d031      	beq.n	800c8a2 <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 800c83e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c840:	2b00      	cmp	r3, #0
 800c842:	d107      	bne.n	800c854 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 800c844:	4b19      	ldr	r3, [pc, #100]	; (800c8ac <xEventGroupWaitBits+0x198>)
 800c846:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c84a:	601a      	str	r2, [r3, #0]
 800c84c:	f3bf 8f4f 	dsb	sy
 800c850:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 800c854:	f002 fa88 	bl	800ed68 <uxTaskResetEventItemValue>
 800c858:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 800c85a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c85c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c860:	2b00      	cmp	r3, #0
 800c862:	d11a      	bne.n	800c89a <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 800c864:	f002 ff9e 	bl	800f7a4 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 800c868:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 800c86e:	683a      	ldr	r2, [r7, #0]
 800c870:	68b9      	ldr	r1, [r7, #8]
 800c872:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800c874:	f000 f8b4 	bl	800c9e0 <prvTestWaitCondition>
 800c878:	4603      	mov	r3, r0
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d009      	beq.n	800c892 <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	2b00      	cmp	r3, #0
 800c882:	d006      	beq.n	800c892 <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800c884:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c886:	681a      	ldr	r2, [r3, #0]
 800c888:	68bb      	ldr	r3, [r7, #8]
 800c88a:	43db      	mvns	r3, r3
 800c88c:	401a      	ands	r2, r3
 800c88e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c890:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 800c892:	2301      	movs	r3, #1
 800c894:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 800c896:	f002 ffb5 	bl	800f804 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 800c89a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c89c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800c8a0:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 800c8a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c8a4:	4618      	mov	r0, r3
 800c8a6:	3740      	adds	r7, #64	; 0x40
 800c8a8:	46bd      	mov	sp, r7
 800c8aa:	bd80      	pop	{r7, pc}
 800c8ac:	e000ed04 	.word	0xe000ed04

0800c8b0 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 800c8b0:	b580      	push	{r7, lr}
 800c8b2:	b08e      	sub	sp, #56	; 0x38
 800c8b4:	af00      	add	r7, sp, #0
 800c8b6:	6078      	str	r0, [r7, #4]
 800c8b8:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 800c8ba:	2300      	movs	r3, #0
 800c8bc:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 800c8c2:	2300      	movs	r3, #0
 800c8c4:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d10a      	bne.n	800c8e2 <xEventGroupSetBits+0x32>
	__asm volatile
 800c8cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8d0:	f383 8811 	msr	BASEPRI, r3
 800c8d4:	f3bf 8f6f 	isb	sy
 800c8d8:	f3bf 8f4f 	dsb	sy
 800c8dc:	613b      	str	r3, [r7, #16]
}
 800c8de:	bf00      	nop
 800c8e0:	e7fe      	b.n	800c8e0 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800c8e2:	683b      	ldr	r3, [r7, #0]
 800c8e4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d00a      	beq.n	800c902 <xEventGroupSetBits+0x52>
	__asm volatile
 800c8ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8f0:	f383 8811 	msr	BASEPRI, r3
 800c8f4:	f3bf 8f6f 	isb	sy
 800c8f8:	f3bf 8f4f 	dsb	sy
 800c8fc:	60fb      	str	r3, [r7, #12]
}
 800c8fe:	bf00      	nop
 800c900:	e7fe      	b.n	800c900 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 800c902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c904:	3304      	adds	r3, #4
 800c906:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c90a:	3308      	adds	r3, #8
 800c90c:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 800c90e:	f001 fc13 	bl	800e138 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 800c912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c914:	68db      	ldr	r3, [r3, #12]
 800c916:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 800c918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c91a:	681a      	ldr	r2, [r3, #0]
 800c91c:	683b      	ldr	r3, [r7, #0]
 800c91e:	431a      	orrs	r2, r3
 800c920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c922:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 800c924:	e03c      	b.n	800c9a0 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 800c926:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c928:	685b      	ldr	r3, [r3, #4]
 800c92a:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 800c92c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 800c932:	2300      	movs	r3, #0
 800c934:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 800c936:	69bb      	ldr	r3, [r7, #24]
 800c938:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800c93c:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 800c93e:	69bb      	ldr	r3, [r7, #24]
 800c940:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800c944:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800c946:	697b      	ldr	r3, [r7, #20]
 800c948:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	d108      	bne.n	800c962 <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 800c950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c952:	681a      	ldr	r2, [r3, #0]
 800c954:	69bb      	ldr	r3, [r7, #24]
 800c956:	4013      	ands	r3, r2
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d00b      	beq.n	800c974 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 800c95c:	2301      	movs	r3, #1
 800c95e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c960:	e008      	b.n	800c974 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 800c962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c964:	681a      	ldr	r2, [r3, #0]
 800c966:	69bb      	ldr	r3, [r7, #24]
 800c968:	4013      	ands	r3, r2
 800c96a:	69ba      	ldr	r2, [r7, #24]
 800c96c:	429a      	cmp	r2, r3
 800c96e:	d101      	bne.n	800c974 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 800c970:	2301      	movs	r3, #1
 800c972:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 800c974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c976:	2b00      	cmp	r3, #0
 800c978:	d010      	beq.n	800c99c <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800c97a:	697b      	ldr	r3, [r7, #20]
 800c97c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c980:	2b00      	cmp	r3, #0
 800c982:	d003      	beq.n	800c98c <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 800c984:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c986:	69bb      	ldr	r3, [r7, #24]
 800c988:	4313      	orrs	r3, r2
 800c98a:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 800c98c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800c994:	4619      	mov	r1, r3
 800c996:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c998:	f001 fea4 	bl	800e6e4 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 800c99c:	69fb      	ldr	r3, [r7, #28]
 800c99e:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 800c9a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c9a2:	6a3b      	ldr	r3, [r7, #32]
 800c9a4:	429a      	cmp	r2, r3
 800c9a6:	d1be      	bne.n	800c926 <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800c9a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9aa:	681a      	ldr	r2, [r3, #0]
 800c9ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9ae:	43db      	mvns	r3, r3
 800c9b0:	401a      	ands	r2, r3
 800c9b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9b4:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 800c9b6:	f001 fbcd 	bl	800e154 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 800c9ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9bc:	681b      	ldr	r3, [r3, #0]
}
 800c9be:	4618      	mov	r0, r3
 800c9c0:	3738      	adds	r7, #56	; 0x38
 800c9c2:	46bd      	mov	sp, r7
 800c9c4:	bd80      	pop	{r7, pc}

0800c9c6 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 800c9c6:	b580      	push	{r7, lr}
 800c9c8:	b082      	sub	sp, #8
 800c9ca:	af00      	add	r7, sp, #0
 800c9cc:	6078      	str	r0, [r7, #4]
 800c9ce:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 800c9d0:	6839      	ldr	r1, [r7, #0]
 800c9d2:	6878      	ldr	r0, [r7, #4]
 800c9d4:	f7ff ff6c 	bl	800c8b0 <xEventGroupSetBits>
}
 800c9d8:	bf00      	nop
 800c9da:	3708      	adds	r7, #8
 800c9dc:	46bd      	mov	sp, r7
 800c9de:	bd80      	pop	{r7, pc}

0800c9e0 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 800c9e0:	b480      	push	{r7}
 800c9e2:	b087      	sub	sp, #28
 800c9e4:	af00      	add	r7, sp, #0
 800c9e6:	60f8      	str	r0, [r7, #12]
 800c9e8:	60b9      	str	r1, [r7, #8]
 800c9ea:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 800c9ec:	2300      	movs	r3, #0
 800c9ee:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d107      	bne.n	800ca06 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 800c9f6:	68fa      	ldr	r2, [r7, #12]
 800c9f8:	68bb      	ldr	r3, [r7, #8]
 800c9fa:	4013      	ands	r3, r2
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d00a      	beq.n	800ca16 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800ca00:	2301      	movs	r3, #1
 800ca02:	617b      	str	r3, [r7, #20]
 800ca04:	e007      	b.n	800ca16 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 800ca06:	68fa      	ldr	r2, [r7, #12]
 800ca08:	68bb      	ldr	r3, [r7, #8]
 800ca0a:	4013      	ands	r3, r2
 800ca0c:	68ba      	ldr	r2, [r7, #8]
 800ca0e:	429a      	cmp	r2, r3
 800ca10:	d101      	bne.n	800ca16 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800ca12:	2301      	movs	r3, #1
 800ca14:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 800ca16:	697b      	ldr	r3, [r7, #20]
}
 800ca18:	4618      	mov	r0, r3
 800ca1a:	371c      	adds	r7, #28
 800ca1c:	46bd      	mov	sp, r7
 800ca1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca22:	4770      	bx	lr

0800ca24 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800ca24:	b580      	push	{r7, lr}
 800ca26:	b086      	sub	sp, #24
 800ca28:	af00      	add	r7, sp, #0
 800ca2a:	60f8      	str	r0, [r7, #12]
 800ca2c:	60b9      	str	r1, [r7, #8]
 800ca2e:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	68ba      	ldr	r2, [r7, #8]
 800ca34:	68f9      	ldr	r1, [r7, #12]
 800ca36:	4804      	ldr	r0, [pc, #16]	; (800ca48 <xEventGroupSetBitsFromISR+0x24>)
 800ca38:	f002 fd64 	bl	800f504 <xTimerPendFunctionCallFromISR>
 800ca3c:	6178      	str	r0, [r7, #20]

		return xReturn;
 800ca3e:	697b      	ldr	r3, [r7, #20]
	}
 800ca40:	4618      	mov	r0, r3
 800ca42:	3718      	adds	r7, #24
 800ca44:	46bd      	mov	sp, r7
 800ca46:	bd80      	pop	{r7, pc}
 800ca48:	0800c9c7 	.word	0x0800c9c7

0800ca4c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800ca4c:	b480      	push	{r7}
 800ca4e:	b083      	sub	sp, #12
 800ca50:	af00      	add	r7, sp, #0
 800ca52:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	f103 0208 	add.w	r2, r3, #8
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	f04f 32ff 	mov.w	r2, #4294967295
 800ca64:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	f103 0208 	add.w	r2, r3, #8
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	f103 0208 	add.w	r2, r3, #8
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	2200      	movs	r2, #0
 800ca7e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800ca80:	bf00      	nop
 800ca82:	370c      	adds	r7, #12
 800ca84:	46bd      	mov	sp, r7
 800ca86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca8a:	4770      	bx	lr

0800ca8c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800ca8c:	b480      	push	{r7}
 800ca8e:	b083      	sub	sp, #12
 800ca90:	af00      	add	r7, sp, #0
 800ca92:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	2200      	movs	r2, #0
 800ca98:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ca9a:	bf00      	nop
 800ca9c:	370c      	adds	r7, #12
 800ca9e:	46bd      	mov	sp, r7
 800caa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caa4:	4770      	bx	lr

0800caa6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800caa6:	b480      	push	{r7}
 800caa8:	b085      	sub	sp, #20
 800caaa:	af00      	add	r7, sp, #0
 800caac:	6078      	str	r0, [r7, #4]
 800caae:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	685b      	ldr	r3, [r3, #4]
 800cab4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800cab6:	683b      	ldr	r3, [r7, #0]
 800cab8:	68fa      	ldr	r2, [r7, #12]
 800caba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	689a      	ldr	r2, [r3, #8]
 800cac0:	683b      	ldr	r3, [r7, #0]
 800cac2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	689b      	ldr	r3, [r3, #8]
 800cac8:	683a      	ldr	r2, [r7, #0]
 800caca:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800cacc:	68fb      	ldr	r3, [r7, #12]
 800cace:	683a      	ldr	r2, [r7, #0]
 800cad0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800cad2:	683b      	ldr	r3, [r7, #0]
 800cad4:	687a      	ldr	r2, [r7, #4]
 800cad6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	1c5a      	adds	r2, r3, #1
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	601a      	str	r2, [r3, #0]
}
 800cae2:	bf00      	nop
 800cae4:	3714      	adds	r7, #20
 800cae6:	46bd      	mov	sp, r7
 800cae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caec:	4770      	bx	lr

0800caee <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800caee:	b480      	push	{r7}
 800caf0:	b085      	sub	sp, #20
 800caf2:	af00      	add	r7, sp, #0
 800caf4:	6078      	str	r0, [r7, #4]
 800caf6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800caf8:	683b      	ldr	r3, [r7, #0]
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800cafe:	68bb      	ldr	r3, [r7, #8]
 800cb00:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb04:	d103      	bne.n	800cb0e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	691b      	ldr	r3, [r3, #16]
 800cb0a:	60fb      	str	r3, [r7, #12]
 800cb0c:	e00c      	b.n	800cb28 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	3308      	adds	r3, #8
 800cb12:	60fb      	str	r3, [r7, #12]
 800cb14:	e002      	b.n	800cb1c <vListInsert+0x2e>
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	685b      	ldr	r3, [r3, #4]
 800cb1a:	60fb      	str	r3, [r7, #12]
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	685b      	ldr	r3, [r3, #4]
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	68ba      	ldr	r2, [r7, #8]
 800cb24:	429a      	cmp	r2, r3
 800cb26:	d2f6      	bcs.n	800cb16 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	685a      	ldr	r2, [r3, #4]
 800cb2c:	683b      	ldr	r3, [r7, #0]
 800cb2e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800cb30:	683b      	ldr	r3, [r7, #0]
 800cb32:	685b      	ldr	r3, [r3, #4]
 800cb34:	683a      	ldr	r2, [r7, #0]
 800cb36:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800cb38:	683b      	ldr	r3, [r7, #0]
 800cb3a:	68fa      	ldr	r2, [r7, #12]
 800cb3c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800cb3e:	68fb      	ldr	r3, [r7, #12]
 800cb40:	683a      	ldr	r2, [r7, #0]
 800cb42:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800cb44:	683b      	ldr	r3, [r7, #0]
 800cb46:	687a      	ldr	r2, [r7, #4]
 800cb48:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	1c5a      	adds	r2, r3, #1
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	601a      	str	r2, [r3, #0]
}
 800cb54:	bf00      	nop
 800cb56:	3714      	adds	r7, #20
 800cb58:	46bd      	mov	sp, r7
 800cb5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb5e:	4770      	bx	lr

0800cb60 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800cb60:	b480      	push	{r7}
 800cb62:	b085      	sub	sp, #20
 800cb64:	af00      	add	r7, sp, #0
 800cb66:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	691b      	ldr	r3, [r3, #16]
 800cb6c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	685b      	ldr	r3, [r3, #4]
 800cb72:	687a      	ldr	r2, [r7, #4]
 800cb74:	6892      	ldr	r2, [r2, #8]
 800cb76:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	689b      	ldr	r3, [r3, #8]
 800cb7c:	687a      	ldr	r2, [r7, #4]
 800cb7e:	6852      	ldr	r2, [r2, #4]
 800cb80:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	685b      	ldr	r3, [r3, #4]
 800cb86:	687a      	ldr	r2, [r7, #4]
 800cb88:	429a      	cmp	r2, r3
 800cb8a:	d103      	bne.n	800cb94 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	689a      	ldr	r2, [r3, #8]
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	2200      	movs	r2, #0
 800cb98:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	1e5a      	subs	r2, r3, #1
 800cba0:	68fb      	ldr	r3, [r7, #12]
 800cba2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	681b      	ldr	r3, [r3, #0]
}
 800cba8:	4618      	mov	r0, r3
 800cbaa:	3714      	adds	r7, #20
 800cbac:	46bd      	mov	sp, r7
 800cbae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbb2:	4770      	bx	lr

0800cbb4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800cbb4:	b580      	push	{r7, lr}
 800cbb6:	b084      	sub	sp, #16
 800cbb8:	af00      	add	r7, sp, #0
 800cbba:	6078      	str	r0, [r7, #4]
 800cbbc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800cbc2:	68fb      	ldr	r3, [r7, #12]
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d10a      	bne.n	800cbde <xQueueGenericReset+0x2a>
	__asm volatile
 800cbc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbcc:	f383 8811 	msr	BASEPRI, r3
 800cbd0:	f3bf 8f6f 	isb	sy
 800cbd4:	f3bf 8f4f 	dsb	sy
 800cbd8:	60bb      	str	r3, [r7, #8]
}
 800cbda:	bf00      	nop
 800cbdc:	e7fe      	b.n	800cbdc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800cbde:	f002 fde1 	bl	800f7a4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cbe2:	68fb      	ldr	r3, [r7, #12]
 800cbe4:	681a      	ldr	r2, [r3, #0]
 800cbe6:	68fb      	ldr	r3, [r7, #12]
 800cbe8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cbea:	68f9      	ldr	r1, [r7, #12]
 800cbec:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800cbee:	fb01 f303 	mul.w	r3, r1, r3
 800cbf2:	441a      	add	r2, r3
 800cbf4:	68fb      	ldr	r3, [r7, #12]
 800cbf6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800cbf8:	68fb      	ldr	r3, [r7, #12]
 800cbfa:	2200      	movs	r2, #0
 800cbfc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	681a      	ldr	r2, [r3, #0]
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	681a      	ldr	r2, [r3, #0]
 800cc0a:	68fb      	ldr	r3, [r7, #12]
 800cc0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc0e:	3b01      	subs	r3, #1
 800cc10:	68f9      	ldr	r1, [r7, #12]
 800cc12:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800cc14:	fb01 f303 	mul.w	r3, r1, r3
 800cc18:	441a      	add	r2, r3
 800cc1a:	68fb      	ldr	r3, [r7, #12]
 800cc1c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800cc1e:	68fb      	ldr	r3, [r7, #12]
 800cc20:	22ff      	movs	r2, #255	; 0xff
 800cc22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800cc26:	68fb      	ldr	r3, [r7, #12]
 800cc28:	22ff      	movs	r2, #255	; 0xff
 800cc2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800cc2e:	683b      	ldr	r3, [r7, #0]
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	d114      	bne.n	800cc5e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cc34:	68fb      	ldr	r3, [r7, #12]
 800cc36:	691b      	ldr	r3, [r3, #16]
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d01a      	beq.n	800cc72 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cc3c:	68fb      	ldr	r3, [r7, #12]
 800cc3e:	3310      	adds	r3, #16
 800cc40:	4618      	mov	r0, r3
 800cc42:	f001 fceb 	bl	800e61c <xTaskRemoveFromEventList>
 800cc46:	4603      	mov	r3, r0
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d012      	beq.n	800cc72 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800cc4c:	4b0c      	ldr	r3, [pc, #48]	; (800cc80 <xQueueGenericReset+0xcc>)
 800cc4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cc52:	601a      	str	r2, [r3, #0]
 800cc54:	f3bf 8f4f 	dsb	sy
 800cc58:	f3bf 8f6f 	isb	sy
 800cc5c:	e009      	b.n	800cc72 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800cc5e:	68fb      	ldr	r3, [r7, #12]
 800cc60:	3310      	adds	r3, #16
 800cc62:	4618      	mov	r0, r3
 800cc64:	f7ff fef2 	bl	800ca4c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800cc68:	68fb      	ldr	r3, [r7, #12]
 800cc6a:	3324      	adds	r3, #36	; 0x24
 800cc6c:	4618      	mov	r0, r3
 800cc6e:	f7ff feed 	bl	800ca4c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800cc72:	f002 fdc7 	bl	800f804 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800cc76:	2301      	movs	r3, #1
}
 800cc78:	4618      	mov	r0, r3
 800cc7a:	3710      	adds	r7, #16
 800cc7c:	46bd      	mov	sp, r7
 800cc7e:	bd80      	pop	{r7, pc}
 800cc80:	e000ed04 	.word	0xe000ed04

0800cc84 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800cc84:	b580      	push	{r7, lr}
 800cc86:	b08e      	sub	sp, #56	; 0x38
 800cc88:	af02      	add	r7, sp, #8
 800cc8a:	60f8      	str	r0, [r7, #12]
 800cc8c:	60b9      	str	r1, [r7, #8]
 800cc8e:	607a      	str	r2, [r7, #4]
 800cc90:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800cc92:	68fb      	ldr	r3, [r7, #12]
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d10a      	bne.n	800ccae <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800cc98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc9c:	f383 8811 	msr	BASEPRI, r3
 800cca0:	f3bf 8f6f 	isb	sy
 800cca4:	f3bf 8f4f 	dsb	sy
 800cca8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ccaa:	bf00      	nop
 800ccac:	e7fe      	b.n	800ccac <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800ccae:	683b      	ldr	r3, [r7, #0]
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d10a      	bne.n	800ccca <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800ccb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccb8:	f383 8811 	msr	BASEPRI, r3
 800ccbc:	f3bf 8f6f 	isb	sy
 800ccc0:	f3bf 8f4f 	dsb	sy
 800ccc4:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ccc6:	bf00      	nop
 800ccc8:	e7fe      	b.n	800ccc8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d002      	beq.n	800ccd6 <xQueueGenericCreateStatic+0x52>
 800ccd0:	68bb      	ldr	r3, [r7, #8]
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	d001      	beq.n	800ccda <xQueueGenericCreateStatic+0x56>
 800ccd6:	2301      	movs	r3, #1
 800ccd8:	e000      	b.n	800ccdc <xQueueGenericCreateStatic+0x58>
 800ccda:	2300      	movs	r3, #0
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d10a      	bne.n	800ccf6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800cce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cce4:	f383 8811 	msr	BASEPRI, r3
 800cce8:	f3bf 8f6f 	isb	sy
 800ccec:	f3bf 8f4f 	dsb	sy
 800ccf0:	623b      	str	r3, [r7, #32]
}
 800ccf2:	bf00      	nop
 800ccf4:	e7fe      	b.n	800ccf4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d102      	bne.n	800cd02 <xQueueGenericCreateStatic+0x7e>
 800ccfc:	68bb      	ldr	r3, [r7, #8]
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d101      	bne.n	800cd06 <xQueueGenericCreateStatic+0x82>
 800cd02:	2301      	movs	r3, #1
 800cd04:	e000      	b.n	800cd08 <xQueueGenericCreateStatic+0x84>
 800cd06:	2300      	movs	r3, #0
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d10a      	bne.n	800cd22 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800cd0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd10:	f383 8811 	msr	BASEPRI, r3
 800cd14:	f3bf 8f6f 	isb	sy
 800cd18:	f3bf 8f4f 	dsb	sy
 800cd1c:	61fb      	str	r3, [r7, #28]
}
 800cd1e:	bf00      	nop
 800cd20:	e7fe      	b.n	800cd20 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800cd22:	2350      	movs	r3, #80	; 0x50
 800cd24:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800cd26:	697b      	ldr	r3, [r7, #20]
 800cd28:	2b50      	cmp	r3, #80	; 0x50
 800cd2a:	d00a      	beq.n	800cd42 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800cd2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd30:	f383 8811 	msr	BASEPRI, r3
 800cd34:	f3bf 8f6f 	isb	sy
 800cd38:	f3bf 8f4f 	dsb	sy
 800cd3c:	61bb      	str	r3, [r7, #24]
}
 800cd3e:	bf00      	nop
 800cd40:	e7fe      	b.n	800cd40 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800cd42:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cd44:	683b      	ldr	r3, [r7, #0]
 800cd46:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800cd48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d00d      	beq.n	800cd6a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800cd4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd50:	2201      	movs	r2, #1
 800cd52:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800cd56:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800cd5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd5c:	9300      	str	r3, [sp, #0]
 800cd5e:	4613      	mov	r3, r2
 800cd60:	687a      	ldr	r2, [r7, #4]
 800cd62:	68b9      	ldr	r1, [r7, #8]
 800cd64:	68f8      	ldr	r0, [r7, #12]
 800cd66:	f000 f83f 	bl	800cde8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800cd6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800cd6c:	4618      	mov	r0, r3
 800cd6e:	3730      	adds	r7, #48	; 0x30
 800cd70:	46bd      	mov	sp, r7
 800cd72:	bd80      	pop	{r7, pc}

0800cd74 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800cd74:	b580      	push	{r7, lr}
 800cd76:	b08a      	sub	sp, #40	; 0x28
 800cd78:	af02      	add	r7, sp, #8
 800cd7a:	60f8      	str	r0, [r7, #12]
 800cd7c:	60b9      	str	r1, [r7, #8]
 800cd7e:	4613      	mov	r3, r2
 800cd80:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800cd82:	68fb      	ldr	r3, [r7, #12]
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d10a      	bne.n	800cd9e <xQueueGenericCreate+0x2a>
	__asm volatile
 800cd88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd8c:	f383 8811 	msr	BASEPRI, r3
 800cd90:	f3bf 8f6f 	isb	sy
 800cd94:	f3bf 8f4f 	dsb	sy
 800cd98:	613b      	str	r3, [r7, #16]
}
 800cd9a:	bf00      	nop
 800cd9c:	e7fe      	b.n	800cd9c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cd9e:	68fb      	ldr	r3, [r7, #12]
 800cda0:	68ba      	ldr	r2, [r7, #8]
 800cda2:	fb02 f303 	mul.w	r3, r2, r3
 800cda6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800cda8:	69fb      	ldr	r3, [r7, #28]
 800cdaa:	3350      	adds	r3, #80	; 0x50
 800cdac:	4618      	mov	r0, r3
 800cdae:	f002 fe1b 	bl	800f9e8 <pvPortMalloc>
 800cdb2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800cdb4:	69bb      	ldr	r3, [r7, #24]
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d011      	beq.n	800cdde <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800cdba:	69bb      	ldr	r3, [r7, #24]
 800cdbc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cdbe:	697b      	ldr	r3, [r7, #20]
 800cdc0:	3350      	adds	r3, #80	; 0x50
 800cdc2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800cdc4:	69bb      	ldr	r3, [r7, #24]
 800cdc6:	2200      	movs	r2, #0
 800cdc8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800cdcc:	79fa      	ldrb	r2, [r7, #7]
 800cdce:	69bb      	ldr	r3, [r7, #24]
 800cdd0:	9300      	str	r3, [sp, #0]
 800cdd2:	4613      	mov	r3, r2
 800cdd4:	697a      	ldr	r2, [r7, #20]
 800cdd6:	68b9      	ldr	r1, [r7, #8]
 800cdd8:	68f8      	ldr	r0, [r7, #12]
 800cdda:	f000 f805 	bl	800cde8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800cdde:	69bb      	ldr	r3, [r7, #24]
	}
 800cde0:	4618      	mov	r0, r3
 800cde2:	3720      	adds	r7, #32
 800cde4:	46bd      	mov	sp, r7
 800cde6:	bd80      	pop	{r7, pc}

0800cde8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800cde8:	b580      	push	{r7, lr}
 800cdea:	b084      	sub	sp, #16
 800cdec:	af00      	add	r7, sp, #0
 800cdee:	60f8      	str	r0, [r7, #12]
 800cdf0:	60b9      	str	r1, [r7, #8]
 800cdf2:	607a      	str	r2, [r7, #4]
 800cdf4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800cdf6:	68bb      	ldr	r3, [r7, #8]
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d103      	bne.n	800ce04 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800cdfc:	69bb      	ldr	r3, [r7, #24]
 800cdfe:	69ba      	ldr	r2, [r7, #24]
 800ce00:	601a      	str	r2, [r3, #0]
 800ce02:	e002      	b.n	800ce0a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ce04:	69bb      	ldr	r3, [r7, #24]
 800ce06:	687a      	ldr	r2, [r7, #4]
 800ce08:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ce0a:	69bb      	ldr	r3, [r7, #24]
 800ce0c:	68fa      	ldr	r2, [r7, #12]
 800ce0e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ce10:	69bb      	ldr	r3, [r7, #24]
 800ce12:	68ba      	ldr	r2, [r7, #8]
 800ce14:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ce16:	2101      	movs	r1, #1
 800ce18:	69b8      	ldr	r0, [r7, #24]
 800ce1a:	f7ff fecb 	bl	800cbb4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800ce1e:	69bb      	ldr	r3, [r7, #24]
 800ce20:	78fa      	ldrb	r2, [r7, #3]
 800ce22:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ce26:	bf00      	nop
 800ce28:	3710      	adds	r7, #16
 800ce2a:	46bd      	mov	sp, r7
 800ce2c:	bd80      	pop	{r7, pc}

0800ce2e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800ce2e:	b580      	push	{r7, lr}
 800ce30:	b082      	sub	sp, #8
 800ce32:	af00      	add	r7, sp, #0
 800ce34:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d00e      	beq.n	800ce5a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	2200      	movs	r2, #0
 800ce40:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	2200      	movs	r2, #0
 800ce46:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	2200      	movs	r2, #0
 800ce4c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800ce4e:	2300      	movs	r3, #0
 800ce50:	2200      	movs	r2, #0
 800ce52:	2100      	movs	r1, #0
 800ce54:	6878      	ldr	r0, [r7, #4]
 800ce56:	f000 f8a1 	bl	800cf9c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800ce5a:	bf00      	nop
 800ce5c:	3708      	adds	r7, #8
 800ce5e:	46bd      	mov	sp, r7
 800ce60:	bd80      	pop	{r7, pc}

0800ce62 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800ce62:	b580      	push	{r7, lr}
 800ce64:	b086      	sub	sp, #24
 800ce66:	af00      	add	r7, sp, #0
 800ce68:	4603      	mov	r3, r0
 800ce6a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800ce6c:	2301      	movs	r3, #1
 800ce6e:	617b      	str	r3, [r7, #20]
 800ce70:	2300      	movs	r3, #0
 800ce72:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800ce74:	79fb      	ldrb	r3, [r7, #7]
 800ce76:	461a      	mov	r2, r3
 800ce78:	6939      	ldr	r1, [r7, #16]
 800ce7a:	6978      	ldr	r0, [r7, #20]
 800ce7c:	f7ff ff7a 	bl	800cd74 <xQueueGenericCreate>
 800ce80:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800ce82:	68f8      	ldr	r0, [r7, #12]
 800ce84:	f7ff ffd3 	bl	800ce2e <prvInitialiseMutex>

		return xNewQueue;
 800ce88:	68fb      	ldr	r3, [r7, #12]
	}
 800ce8a:	4618      	mov	r0, r3
 800ce8c:	3718      	adds	r7, #24
 800ce8e:	46bd      	mov	sp, r7
 800ce90:	bd80      	pop	{r7, pc}

0800ce92 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800ce92:	b580      	push	{r7, lr}
 800ce94:	b088      	sub	sp, #32
 800ce96:	af02      	add	r7, sp, #8
 800ce98:	4603      	mov	r3, r0
 800ce9a:	6039      	str	r1, [r7, #0]
 800ce9c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800ce9e:	2301      	movs	r3, #1
 800cea0:	617b      	str	r3, [r7, #20]
 800cea2:	2300      	movs	r3, #0
 800cea4:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800cea6:	79fb      	ldrb	r3, [r7, #7]
 800cea8:	9300      	str	r3, [sp, #0]
 800ceaa:	683b      	ldr	r3, [r7, #0]
 800ceac:	2200      	movs	r2, #0
 800ceae:	6939      	ldr	r1, [r7, #16]
 800ceb0:	6978      	ldr	r0, [r7, #20]
 800ceb2:	f7ff fee7 	bl	800cc84 <xQueueGenericCreateStatic>
 800ceb6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800ceb8:	68f8      	ldr	r0, [r7, #12]
 800ceba:	f7ff ffb8 	bl	800ce2e <prvInitialiseMutex>

		return xNewQueue;
 800cebe:	68fb      	ldr	r3, [r7, #12]
	}
 800cec0:	4618      	mov	r0, r3
 800cec2:	3718      	adds	r7, #24
 800cec4:	46bd      	mov	sp, r7
 800cec6:	bd80      	pop	{r7, pc}

0800cec8 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800cec8:	b590      	push	{r4, r7, lr}
 800ceca:	b087      	sub	sp, #28
 800cecc:	af00      	add	r7, sp, #0
 800cece:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800ced4:	693b      	ldr	r3, [r7, #16]
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d10a      	bne.n	800cef0 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 800ceda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cede:	f383 8811 	msr	BASEPRI, r3
 800cee2:	f3bf 8f6f 	isb	sy
 800cee6:	f3bf 8f4f 	dsb	sy
 800ceea:	60fb      	str	r3, [r7, #12]
}
 800ceec:	bf00      	nop
 800ceee:	e7fe      	b.n	800ceee <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800cef0:	693b      	ldr	r3, [r7, #16]
 800cef2:	689c      	ldr	r4, [r3, #8]
 800cef4:	f001 fdb2 	bl	800ea5c <xTaskGetCurrentTaskHandle>
 800cef8:	4603      	mov	r3, r0
 800cefa:	429c      	cmp	r4, r3
 800cefc:	d111      	bne.n	800cf22 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800cefe:	693b      	ldr	r3, [r7, #16]
 800cf00:	68db      	ldr	r3, [r3, #12]
 800cf02:	1e5a      	subs	r2, r3, #1
 800cf04:	693b      	ldr	r3, [r7, #16]
 800cf06:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800cf08:	693b      	ldr	r3, [r7, #16]
 800cf0a:	68db      	ldr	r3, [r3, #12]
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d105      	bne.n	800cf1c <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800cf10:	2300      	movs	r3, #0
 800cf12:	2200      	movs	r2, #0
 800cf14:	2100      	movs	r1, #0
 800cf16:	6938      	ldr	r0, [r7, #16]
 800cf18:	f000 f840 	bl	800cf9c <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800cf1c:	2301      	movs	r3, #1
 800cf1e:	617b      	str	r3, [r7, #20]
 800cf20:	e001      	b.n	800cf26 <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800cf22:	2300      	movs	r3, #0
 800cf24:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800cf26:	697b      	ldr	r3, [r7, #20]
	}
 800cf28:	4618      	mov	r0, r3
 800cf2a:	371c      	adds	r7, #28
 800cf2c:	46bd      	mov	sp, r7
 800cf2e:	bd90      	pop	{r4, r7, pc}

0800cf30 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800cf30:	b590      	push	{r4, r7, lr}
 800cf32:	b087      	sub	sp, #28
 800cf34:	af00      	add	r7, sp, #0
 800cf36:	6078      	str	r0, [r7, #4]
 800cf38:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800cf3e:	693b      	ldr	r3, [r7, #16]
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d10a      	bne.n	800cf5a <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 800cf44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf48:	f383 8811 	msr	BASEPRI, r3
 800cf4c:	f3bf 8f6f 	isb	sy
 800cf50:	f3bf 8f4f 	dsb	sy
 800cf54:	60fb      	str	r3, [r7, #12]
}
 800cf56:	bf00      	nop
 800cf58:	e7fe      	b.n	800cf58 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800cf5a:	693b      	ldr	r3, [r7, #16]
 800cf5c:	689c      	ldr	r4, [r3, #8]
 800cf5e:	f001 fd7d 	bl	800ea5c <xTaskGetCurrentTaskHandle>
 800cf62:	4603      	mov	r3, r0
 800cf64:	429c      	cmp	r4, r3
 800cf66:	d107      	bne.n	800cf78 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800cf68:	693b      	ldr	r3, [r7, #16]
 800cf6a:	68db      	ldr	r3, [r3, #12]
 800cf6c:	1c5a      	adds	r2, r3, #1
 800cf6e:	693b      	ldr	r3, [r7, #16]
 800cf70:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800cf72:	2301      	movs	r3, #1
 800cf74:	617b      	str	r3, [r7, #20]
 800cf76:	e00c      	b.n	800cf92 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800cf78:	6839      	ldr	r1, [r7, #0]
 800cf7a:	6938      	ldr	r0, [r7, #16]
 800cf7c:	f000 fa88 	bl	800d490 <xQueueSemaphoreTake>
 800cf80:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800cf82:	697b      	ldr	r3, [r7, #20]
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d004      	beq.n	800cf92 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800cf88:	693b      	ldr	r3, [r7, #16]
 800cf8a:	68db      	ldr	r3, [r3, #12]
 800cf8c:	1c5a      	adds	r2, r3, #1
 800cf8e:	693b      	ldr	r3, [r7, #16]
 800cf90:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800cf92:	697b      	ldr	r3, [r7, #20]
	}
 800cf94:	4618      	mov	r0, r3
 800cf96:	371c      	adds	r7, #28
 800cf98:	46bd      	mov	sp, r7
 800cf9a:	bd90      	pop	{r4, r7, pc}

0800cf9c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800cf9c:	b580      	push	{r7, lr}
 800cf9e:	b08e      	sub	sp, #56	; 0x38
 800cfa0:	af00      	add	r7, sp, #0
 800cfa2:	60f8      	str	r0, [r7, #12]
 800cfa4:	60b9      	str	r1, [r7, #8]
 800cfa6:	607a      	str	r2, [r7, #4]
 800cfa8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800cfaa:	2300      	movs	r3, #0
 800cfac:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cfae:	68fb      	ldr	r3, [r7, #12]
 800cfb0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800cfb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	d10a      	bne.n	800cfce <xQueueGenericSend+0x32>
	__asm volatile
 800cfb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfbc:	f383 8811 	msr	BASEPRI, r3
 800cfc0:	f3bf 8f6f 	isb	sy
 800cfc4:	f3bf 8f4f 	dsb	sy
 800cfc8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800cfca:	bf00      	nop
 800cfcc:	e7fe      	b.n	800cfcc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cfce:	68bb      	ldr	r3, [r7, #8]
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	d103      	bne.n	800cfdc <xQueueGenericSend+0x40>
 800cfd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	d101      	bne.n	800cfe0 <xQueueGenericSend+0x44>
 800cfdc:	2301      	movs	r3, #1
 800cfde:	e000      	b.n	800cfe2 <xQueueGenericSend+0x46>
 800cfe0:	2300      	movs	r3, #0
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d10a      	bne.n	800cffc <xQueueGenericSend+0x60>
	__asm volatile
 800cfe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfea:	f383 8811 	msr	BASEPRI, r3
 800cfee:	f3bf 8f6f 	isb	sy
 800cff2:	f3bf 8f4f 	dsb	sy
 800cff6:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cff8:	bf00      	nop
 800cffa:	e7fe      	b.n	800cffa <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cffc:	683b      	ldr	r3, [r7, #0]
 800cffe:	2b02      	cmp	r3, #2
 800d000:	d103      	bne.n	800d00a <xQueueGenericSend+0x6e>
 800d002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d004:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d006:	2b01      	cmp	r3, #1
 800d008:	d101      	bne.n	800d00e <xQueueGenericSend+0x72>
 800d00a:	2301      	movs	r3, #1
 800d00c:	e000      	b.n	800d010 <xQueueGenericSend+0x74>
 800d00e:	2300      	movs	r3, #0
 800d010:	2b00      	cmp	r3, #0
 800d012:	d10a      	bne.n	800d02a <xQueueGenericSend+0x8e>
	__asm volatile
 800d014:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d018:	f383 8811 	msr	BASEPRI, r3
 800d01c:	f3bf 8f6f 	isb	sy
 800d020:	f3bf 8f4f 	dsb	sy
 800d024:	623b      	str	r3, [r7, #32]
}
 800d026:	bf00      	nop
 800d028:	e7fe      	b.n	800d028 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d02a:	f001 fd27 	bl	800ea7c <xTaskGetSchedulerState>
 800d02e:	4603      	mov	r3, r0
 800d030:	2b00      	cmp	r3, #0
 800d032:	d102      	bne.n	800d03a <xQueueGenericSend+0x9e>
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	2b00      	cmp	r3, #0
 800d038:	d101      	bne.n	800d03e <xQueueGenericSend+0xa2>
 800d03a:	2301      	movs	r3, #1
 800d03c:	e000      	b.n	800d040 <xQueueGenericSend+0xa4>
 800d03e:	2300      	movs	r3, #0
 800d040:	2b00      	cmp	r3, #0
 800d042:	d10a      	bne.n	800d05a <xQueueGenericSend+0xbe>
	__asm volatile
 800d044:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d048:	f383 8811 	msr	BASEPRI, r3
 800d04c:	f3bf 8f6f 	isb	sy
 800d050:	f3bf 8f4f 	dsb	sy
 800d054:	61fb      	str	r3, [r7, #28]
}
 800d056:	bf00      	nop
 800d058:	e7fe      	b.n	800d058 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d05a:	f002 fba3 	bl	800f7a4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d05e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d060:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d064:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d066:	429a      	cmp	r2, r3
 800d068:	d302      	bcc.n	800d070 <xQueueGenericSend+0xd4>
 800d06a:	683b      	ldr	r3, [r7, #0]
 800d06c:	2b02      	cmp	r3, #2
 800d06e:	d129      	bne.n	800d0c4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d070:	683a      	ldr	r2, [r7, #0]
 800d072:	68b9      	ldr	r1, [r7, #8]
 800d074:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d076:	f000 fbaf 	bl	800d7d8 <prvCopyDataToQueue>
 800d07a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d07c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d07e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d080:	2b00      	cmp	r3, #0
 800d082:	d010      	beq.n	800d0a6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d086:	3324      	adds	r3, #36	; 0x24
 800d088:	4618      	mov	r0, r3
 800d08a:	f001 fac7 	bl	800e61c <xTaskRemoveFromEventList>
 800d08e:	4603      	mov	r3, r0
 800d090:	2b00      	cmp	r3, #0
 800d092:	d013      	beq.n	800d0bc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d094:	4b3f      	ldr	r3, [pc, #252]	; (800d194 <xQueueGenericSend+0x1f8>)
 800d096:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d09a:	601a      	str	r2, [r3, #0]
 800d09c:	f3bf 8f4f 	dsb	sy
 800d0a0:	f3bf 8f6f 	isb	sy
 800d0a4:	e00a      	b.n	800d0bc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d0a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d007      	beq.n	800d0bc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d0ac:	4b39      	ldr	r3, [pc, #228]	; (800d194 <xQueueGenericSend+0x1f8>)
 800d0ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d0b2:	601a      	str	r2, [r3, #0]
 800d0b4:	f3bf 8f4f 	dsb	sy
 800d0b8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d0bc:	f002 fba2 	bl	800f804 <vPortExitCritical>
				return pdPASS;
 800d0c0:	2301      	movs	r3, #1
 800d0c2:	e063      	b.n	800d18c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d103      	bne.n	800d0d2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d0ca:	f002 fb9b 	bl	800f804 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d0ce:	2300      	movs	r3, #0
 800d0d0:	e05c      	b.n	800d18c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d0d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	d106      	bne.n	800d0e6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d0d8:	f107 0314 	add.w	r3, r7, #20
 800d0dc:	4618      	mov	r0, r3
 800d0de:	f001 fb63 	bl	800e7a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d0e2:	2301      	movs	r3, #1
 800d0e4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d0e6:	f002 fb8d 	bl	800f804 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d0ea:	f001 f825 	bl	800e138 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d0ee:	f002 fb59 	bl	800f7a4 <vPortEnterCritical>
 800d0f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d0f8:	b25b      	sxtb	r3, r3
 800d0fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d0fe:	d103      	bne.n	800d108 <xQueueGenericSend+0x16c>
 800d100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d102:	2200      	movs	r2, #0
 800d104:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d10a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d10e:	b25b      	sxtb	r3, r3
 800d110:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d114:	d103      	bne.n	800d11e <xQueueGenericSend+0x182>
 800d116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d118:	2200      	movs	r2, #0
 800d11a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d11e:	f002 fb71 	bl	800f804 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d122:	1d3a      	adds	r2, r7, #4
 800d124:	f107 0314 	add.w	r3, r7, #20
 800d128:	4611      	mov	r1, r2
 800d12a:	4618      	mov	r0, r3
 800d12c:	f001 fb52 	bl	800e7d4 <xTaskCheckForTimeOut>
 800d130:	4603      	mov	r3, r0
 800d132:	2b00      	cmp	r3, #0
 800d134:	d124      	bne.n	800d180 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d136:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d138:	f000 fc46 	bl	800d9c8 <prvIsQueueFull>
 800d13c:	4603      	mov	r3, r0
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d018      	beq.n	800d174 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d144:	3310      	adds	r3, #16
 800d146:	687a      	ldr	r2, [r7, #4]
 800d148:	4611      	mov	r1, r2
 800d14a:	4618      	mov	r0, r3
 800d14c:	f001 f9da 	bl	800e504 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d150:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d152:	f000 fbd1 	bl	800d8f8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d156:	f000 fffd 	bl	800e154 <xTaskResumeAll>
 800d15a:	4603      	mov	r3, r0
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	f47f af7c 	bne.w	800d05a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800d162:	4b0c      	ldr	r3, [pc, #48]	; (800d194 <xQueueGenericSend+0x1f8>)
 800d164:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d168:	601a      	str	r2, [r3, #0]
 800d16a:	f3bf 8f4f 	dsb	sy
 800d16e:	f3bf 8f6f 	isb	sy
 800d172:	e772      	b.n	800d05a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d174:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d176:	f000 fbbf 	bl	800d8f8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d17a:	f000 ffeb 	bl	800e154 <xTaskResumeAll>
 800d17e:	e76c      	b.n	800d05a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d180:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d182:	f000 fbb9 	bl	800d8f8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d186:	f000 ffe5 	bl	800e154 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d18a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d18c:	4618      	mov	r0, r3
 800d18e:	3738      	adds	r7, #56	; 0x38
 800d190:	46bd      	mov	sp, r7
 800d192:	bd80      	pop	{r7, pc}
 800d194:	e000ed04 	.word	0xe000ed04

0800d198 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800d198:	b580      	push	{r7, lr}
 800d19a:	b090      	sub	sp, #64	; 0x40
 800d19c:	af00      	add	r7, sp, #0
 800d19e:	60f8      	str	r0, [r7, #12]
 800d1a0:	60b9      	str	r1, [r7, #8]
 800d1a2:	607a      	str	r2, [r7, #4]
 800d1a4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d1a6:	68fb      	ldr	r3, [r7, #12]
 800d1a8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800d1aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d10a      	bne.n	800d1c6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800d1b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1b4:	f383 8811 	msr	BASEPRI, r3
 800d1b8:	f3bf 8f6f 	isb	sy
 800d1bc:	f3bf 8f4f 	dsb	sy
 800d1c0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d1c2:	bf00      	nop
 800d1c4:	e7fe      	b.n	800d1c4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d1c6:	68bb      	ldr	r3, [r7, #8]
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	d103      	bne.n	800d1d4 <xQueueGenericSendFromISR+0x3c>
 800d1cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d101      	bne.n	800d1d8 <xQueueGenericSendFromISR+0x40>
 800d1d4:	2301      	movs	r3, #1
 800d1d6:	e000      	b.n	800d1da <xQueueGenericSendFromISR+0x42>
 800d1d8:	2300      	movs	r3, #0
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d10a      	bne.n	800d1f4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800d1de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1e2:	f383 8811 	msr	BASEPRI, r3
 800d1e6:	f3bf 8f6f 	isb	sy
 800d1ea:	f3bf 8f4f 	dsb	sy
 800d1ee:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d1f0:	bf00      	nop
 800d1f2:	e7fe      	b.n	800d1f2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d1f4:	683b      	ldr	r3, [r7, #0]
 800d1f6:	2b02      	cmp	r3, #2
 800d1f8:	d103      	bne.n	800d202 <xQueueGenericSendFromISR+0x6a>
 800d1fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d1fe:	2b01      	cmp	r3, #1
 800d200:	d101      	bne.n	800d206 <xQueueGenericSendFromISR+0x6e>
 800d202:	2301      	movs	r3, #1
 800d204:	e000      	b.n	800d208 <xQueueGenericSendFromISR+0x70>
 800d206:	2300      	movs	r3, #0
 800d208:	2b00      	cmp	r3, #0
 800d20a:	d10a      	bne.n	800d222 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800d20c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d210:	f383 8811 	msr	BASEPRI, r3
 800d214:	f3bf 8f6f 	isb	sy
 800d218:	f3bf 8f4f 	dsb	sy
 800d21c:	623b      	str	r3, [r7, #32]
}
 800d21e:	bf00      	nop
 800d220:	e7fe      	b.n	800d220 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d222:	f002 fba1 	bl	800f968 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800d226:	f3ef 8211 	mrs	r2, BASEPRI
 800d22a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d22e:	f383 8811 	msr	BASEPRI, r3
 800d232:	f3bf 8f6f 	isb	sy
 800d236:	f3bf 8f4f 	dsb	sy
 800d23a:	61fa      	str	r2, [r7, #28]
 800d23c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800d23e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d240:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d244:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d248:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d24a:	429a      	cmp	r2, r3
 800d24c:	d302      	bcc.n	800d254 <xQueueGenericSendFromISR+0xbc>
 800d24e:	683b      	ldr	r3, [r7, #0]
 800d250:	2b02      	cmp	r3, #2
 800d252:	d12f      	bne.n	800d2b4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d256:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d25a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d25e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d262:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d264:	683a      	ldr	r2, [r7, #0]
 800d266:	68b9      	ldr	r1, [r7, #8]
 800d268:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d26a:	f000 fab5 	bl	800d7d8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d26e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800d272:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d276:	d112      	bne.n	800d29e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d27a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	d016      	beq.n	800d2ae <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d282:	3324      	adds	r3, #36	; 0x24
 800d284:	4618      	mov	r0, r3
 800d286:	f001 f9c9 	bl	800e61c <xTaskRemoveFromEventList>
 800d28a:	4603      	mov	r3, r0
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	d00e      	beq.n	800d2ae <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	2b00      	cmp	r3, #0
 800d294:	d00b      	beq.n	800d2ae <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	2201      	movs	r2, #1
 800d29a:	601a      	str	r2, [r3, #0]
 800d29c:	e007      	b.n	800d2ae <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d29e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d2a2:	3301      	adds	r3, #1
 800d2a4:	b2db      	uxtb	r3, r3
 800d2a6:	b25a      	sxtb	r2, r3
 800d2a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d2ae:	2301      	movs	r3, #1
 800d2b0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800d2b2:	e001      	b.n	800d2b8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d2b4:	2300      	movs	r3, #0
 800d2b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d2b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d2ba:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d2bc:	697b      	ldr	r3, [r7, #20]
 800d2be:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800d2c2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d2c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800d2c6:	4618      	mov	r0, r3
 800d2c8:	3740      	adds	r7, #64	; 0x40
 800d2ca:	46bd      	mov	sp, r7
 800d2cc:	bd80      	pop	{r7, pc}
	...

0800d2d0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d2d0:	b580      	push	{r7, lr}
 800d2d2:	b08c      	sub	sp, #48	; 0x30
 800d2d4:	af00      	add	r7, sp, #0
 800d2d6:	60f8      	str	r0, [r7, #12]
 800d2d8:	60b9      	str	r1, [r7, #8]
 800d2da:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d2dc:	2300      	movs	r3, #0
 800d2de:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d2e0:	68fb      	ldr	r3, [r7, #12]
 800d2e2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d2e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d10a      	bne.n	800d300 <xQueueReceive+0x30>
	__asm volatile
 800d2ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2ee:	f383 8811 	msr	BASEPRI, r3
 800d2f2:	f3bf 8f6f 	isb	sy
 800d2f6:	f3bf 8f4f 	dsb	sy
 800d2fa:	623b      	str	r3, [r7, #32]
}
 800d2fc:	bf00      	nop
 800d2fe:	e7fe      	b.n	800d2fe <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d300:	68bb      	ldr	r3, [r7, #8]
 800d302:	2b00      	cmp	r3, #0
 800d304:	d103      	bne.n	800d30e <xQueueReceive+0x3e>
 800d306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	d101      	bne.n	800d312 <xQueueReceive+0x42>
 800d30e:	2301      	movs	r3, #1
 800d310:	e000      	b.n	800d314 <xQueueReceive+0x44>
 800d312:	2300      	movs	r3, #0
 800d314:	2b00      	cmp	r3, #0
 800d316:	d10a      	bne.n	800d32e <xQueueReceive+0x5e>
	__asm volatile
 800d318:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d31c:	f383 8811 	msr	BASEPRI, r3
 800d320:	f3bf 8f6f 	isb	sy
 800d324:	f3bf 8f4f 	dsb	sy
 800d328:	61fb      	str	r3, [r7, #28]
}
 800d32a:	bf00      	nop
 800d32c:	e7fe      	b.n	800d32c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d32e:	f001 fba5 	bl	800ea7c <xTaskGetSchedulerState>
 800d332:	4603      	mov	r3, r0
 800d334:	2b00      	cmp	r3, #0
 800d336:	d102      	bne.n	800d33e <xQueueReceive+0x6e>
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	d101      	bne.n	800d342 <xQueueReceive+0x72>
 800d33e:	2301      	movs	r3, #1
 800d340:	e000      	b.n	800d344 <xQueueReceive+0x74>
 800d342:	2300      	movs	r3, #0
 800d344:	2b00      	cmp	r3, #0
 800d346:	d10a      	bne.n	800d35e <xQueueReceive+0x8e>
	__asm volatile
 800d348:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d34c:	f383 8811 	msr	BASEPRI, r3
 800d350:	f3bf 8f6f 	isb	sy
 800d354:	f3bf 8f4f 	dsb	sy
 800d358:	61bb      	str	r3, [r7, #24]
}
 800d35a:	bf00      	nop
 800d35c:	e7fe      	b.n	800d35c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d35e:	f002 fa21 	bl	800f7a4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d366:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	d01f      	beq.n	800d3ae <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d36e:	68b9      	ldr	r1, [r7, #8]
 800d370:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d372:	f000 fa9b 	bl	800d8ac <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d378:	1e5a      	subs	r2, r3, #1
 800d37a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d37c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d37e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d380:	691b      	ldr	r3, [r3, #16]
 800d382:	2b00      	cmp	r3, #0
 800d384:	d00f      	beq.n	800d3a6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d388:	3310      	adds	r3, #16
 800d38a:	4618      	mov	r0, r3
 800d38c:	f001 f946 	bl	800e61c <xTaskRemoveFromEventList>
 800d390:	4603      	mov	r3, r0
 800d392:	2b00      	cmp	r3, #0
 800d394:	d007      	beq.n	800d3a6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d396:	4b3d      	ldr	r3, [pc, #244]	; (800d48c <xQueueReceive+0x1bc>)
 800d398:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d39c:	601a      	str	r2, [r3, #0]
 800d39e:	f3bf 8f4f 	dsb	sy
 800d3a2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d3a6:	f002 fa2d 	bl	800f804 <vPortExitCritical>
				return pdPASS;
 800d3aa:	2301      	movs	r3, #1
 800d3ac:	e069      	b.n	800d482 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d103      	bne.n	800d3bc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d3b4:	f002 fa26 	bl	800f804 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d3b8:	2300      	movs	r3, #0
 800d3ba:	e062      	b.n	800d482 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d3bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	d106      	bne.n	800d3d0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d3c2:	f107 0310 	add.w	r3, r7, #16
 800d3c6:	4618      	mov	r0, r3
 800d3c8:	f001 f9ee 	bl	800e7a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d3cc:	2301      	movs	r3, #1
 800d3ce:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d3d0:	f002 fa18 	bl	800f804 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d3d4:	f000 feb0 	bl	800e138 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d3d8:	f002 f9e4 	bl	800f7a4 <vPortEnterCritical>
 800d3dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3de:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d3e2:	b25b      	sxtb	r3, r3
 800d3e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d3e8:	d103      	bne.n	800d3f2 <xQueueReceive+0x122>
 800d3ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3ec:	2200      	movs	r2, #0
 800d3ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d3f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d3f8:	b25b      	sxtb	r3, r3
 800d3fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d3fe:	d103      	bne.n	800d408 <xQueueReceive+0x138>
 800d400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d402:	2200      	movs	r2, #0
 800d404:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d408:	f002 f9fc 	bl	800f804 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d40c:	1d3a      	adds	r2, r7, #4
 800d40e:	f107 0310 	add.w	r3, r7, #16
 800d412:	4611      	mov	r1, r2
 800d414:	4618      	mov	r0, r3
 800d416:	f001 f9dd 	bl	800e7d4 <xTaskCheckForTimeOut>
 800d41a:	4603      	mov	r3, r0
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d123      	bne.n	800d468 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d420:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d422:	f000 fabb 	bl	800d99c <prvIsQueueEmpty>
 800d426:	4603      	mov	r3, r0
 800d428:	2b00      	cmp	r3, #0
 800d42a:	d017      	beq.n	800d45c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d42c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d42e:	3324      	adds	r3, #36	; 0x24
 800d430:	687a      	ldr	r2, [r7, #4]
 800d432:	4611      	mov	r1, r2
 800d434:	4618      	mov	r0, r3
 800d436:	f001 f865 	bl	800e504 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d43a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d43c:	f000 fa5c 	bl	800d8f8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d440:	f000 fe88 	bl	800e154 <xTaskResumeAll>
 800d444:	4603      	mov	r3, r0
 800d446:	2b00      	cmp	r3, #0
 800d448:	d189      	bne.n	800d35e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800d44a:	4b10      	ldr	r3, [pc, #64]	; (800d48c <xQueueReceive+0x1bc>)
 800d44c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d450:	601a      	str	r2, [r3, #0]
 800d452:	f3bf 8f4f 	dsb	sy
 800d456:	f3bf 8f6f 	isb	sy
 800d45a:	e780      	b.n	800d35e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d45c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d45e:	f000 fa4b 	bl	800d8f8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d462:	f000 fe77 	bl	800e154 <xTaskResumeAll>
 800d466:	e77a      	b.n	800d35e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d468:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d46a:	f000 fa45 	bl	800d8f8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d46e:	f000 fe71 	bl	800e154 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d472:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d474:	f000 fa92 	bl	800d99c <prvIsQueueEmpty>
 800d478:	4603      	mov	r3, r0
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	f43f af6f 	beq.w	800d35e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d480:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d482:	4618      	mov	r0, r3
 800d484:	3730      	adds	r7, #48	; 0x30
 800d486:	46bd      	mov	sp, r7
 800d488:	bd80      	pop	{r7, pc}
 800d48a:	bf00      	nop
 800d48c:	e000ed04 	.word	0xe000ed04

0800d490 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800d490:	b580      	push	{r7, lr}
 800d492:	b08e      	sub	sp, #56	; 0x38
 800d494:	af00      	add	r7, sp, #0
 800d496:	6078      	str	r0, [r7, #4]
 800d498:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800d49a:	2300      	movs	r3, #0
 800d49c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800d4a2:	2300      	movs	r3, #0
 800d4a4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d4a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d10a      	bne.n	800d4c2 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800d4ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4b0:	f383 8811 	msr	BASEPRI, r3
 800d4b4:	f3bf 8f6f 	isb	sy
 800d4b8:	f3bf 8f4f 	dsb	sy
 800d4bc:	623b      	str	r3, [r7, #32]
}
 800d4be:	bf00      	nop
 800d4c0:	e7fe      	b.n	800d4c0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d4c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d00a      	beq.n	800d4e0 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800d4ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4ce:	f383 8811 	msr	BASEPRI, r3
 800d4d2:	f3bf 8f6f 	isb	sy
 800d4d6:	f3bf 8f4f 	dsb	sy
 800d4da:	61fb      	str	r3, [r7, #28]
}
 800d4dc:	bf00      	nop
 800d4de:	e7fe      	b.n	800d4de <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d4e0:	f001 facc 	bl	800ea7c <xTaskGetSchedulerState>
 800d4e4:	4603      	mov	r3, r0
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d102      	bne.n	800d4f0 <xQueueSemaphoreTake+0x60>
 800d4ea:	683b      	ldr	r3, [r7, #0]
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d101      	bne.n	800d4f4 <xQueueSemaphoreTake+0x64>
 800d4f0:	2301      	movs	r3, #1
 800d4f2:	e000      	b.n	800d4f6 <xQueueSemaphoreTake+0x66>
 800d4f4:	2300      	movs	r3, #0
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d10a      	bne.n	800d510 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800d4fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4fe:	f383 8811 	msr	BASEPRI, r3
 800d502:	f3bf 8f6f 	isb	sy
 800d506:	f3bf 8f4f 	dsb	sy
 800d50a:	61bb      	str	r3, [r7, #24]
}
 800d50c:	bf00      	nop
 800d50e:	e7fe      	b.n	800d50e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d510:	f002 f948 	bl	800f7a4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800d514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d518:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800d51a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d024      	beq.n	800d56a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800d520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d522:	1e5a      	subs	r2, r3, #1
 800d524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d526:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d104      	bne.n	800d53a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800d530:	f001 fc32 	bl	800ed98 <pvTaskIncrementMutexHeldCount>
 800d534:	4602      	mov	r2, r0
 800d536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d538:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d53a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d53c:	691b      	ldr	r3, [r3, #16]
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d00f      	beq.n	800d562 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d544:	3310      	adds	r3, #16
 800d546:	4618      	mov	r0, r3
 800d548:	f001 f868 	bl	800e61c <xTaskRemoveFromEventList>
 800d54c:	4603      	mov	r3, r0
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d007      	beq.n	800d562 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d552:	4b54      	ldr	r3, [pc, #336]	; (800d6a4 <xQueueSemaphoreTake+0x214>)
 800d554:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d558:	601a      	str	r2, [r3, #0]
 800d55a:	f3bf 8f4f 	dsb	sy
 800d55e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d562:	f002 f94f 	bl	800f804 <vPortExitCritical>
				return pdPASS;
 800d566:	2301      	movs	r3, #1
 800d568:	e097      	b.n	800d69a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d56a:	683b      	ldr	r3, [r7, #0]
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	d111      	bne.n	800d594 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800d570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d572:	2b00      	cmp	r3, #0
 800d574:	d00a      	beq.n	800d58c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800d576:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d57a:	f383 8811 	msr	BASEPRI, r3
 800d57e:	f3bf 8f6f 	isb	sy
 800d582:	f3bf 8f4f 	dsb	sy
 800d586:	617b      	str	r3, [r7, #20]
}
 800d588:	bf00      	nop
 800d58a:	e7fe      	b.n	800d58a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800d58c:	f002 f93a 	bl	800f804 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d590:	2300      	movs	r3, #0
 800d592:	e082      	b.n	800d69a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d594:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d596:	2b00      	cmp	r3, #0
 800d598:	d106      	bne.n	800d5a8 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d59a:	f107 030c 	add.w	r3, r7, #12
 800d59e:	4618      	mov	r0, r3
 800d5a0:	f001 f902 	bl	800e7a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d5a4:	2301      	movs	r3, #1
 800d5a6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d5a8:	f002 f92c 	bl	800f804 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d5ac:	f000 fdc4 	bl	800e138 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d5b0:	f002 f8f8 	bl	800f7a4 <vPortEnterCritical>
 800d5b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5b6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d5ba:	b25b      	sxtb	r3, r3
 800d5bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d5c0:	d103      	bne.n	800d5ca <xQueueSemaphoreTake+0x13a>
 800d5c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5c4:	2200      	movs	r2, #0
 800d5c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d5ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d5d0:	b25b      	sxtb	r3, r3
 800d5d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d5d6:	d103      	bne.n	800d5e0 <xQueueSemaphoreTake+0x150>
 800d5d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5da:	2200      	movs	r2, #0
 800d5dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d5e0:	f002 f910 	bl	800f804 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d5e4:	463a      	mov	r2, r7
 800d5e6:	f107 030c 	add.w	r3, r7, #12
 800d5ea:	4611      	mov	r1, r2
 800d5ec:	4618      	mov	r0, r3
 800d5ee:	f001 f8f1 	bl	800e7d4 <xTaskCheckForTimeOut>
 800d5f2:	4603      	mov	r3, r0
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	d132      	bne.n	800d65e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d5f8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d5fa:	f000 f9cf 	bl	800d99c <prvIsQueueEmpty>
 800d5fe:	4603      	mov	r3, r0
 800d600:	2b00      	cmp	r3, #0
 800d602:	d026      	beq.n	800d652 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d109      	bne.n	800d620 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800d60c:	f002 f8ca 	bl	800f7a4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d612:	689b      	ldr	r3, [r3, #8]
 800d614:	4618      	mov	r0, r3
 800d616:	f001 fa4f 	bl	800eab8 <xTaskPriorityInherit>
 800d61a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800d61c:	f002 f8f2 	bl	800f804 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d622:	3324      	adds	r3, #36	; 0x24
 800d624:	683a      	ldr	r2, [r7, #0]
 800d626:	4611      	mov	r1, r2
 800d628:	4618      	mov	r0, r3
 800d62a:	f000 ff6b 	bl	800e504 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d62e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d630:	f000 f962 	bl	800d8f8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d634:	f000 fd8e 	bl	800e154 <xTaskResumeAll>
 800d638:	4603      	mov	r3, r0
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	f47f af68 	bne.w	800d510 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800d640:	4b18      	ldr	r3, [pc, #96]	; (800d6a4 <xQueueSemaphoreTake+0x214>)
 800d642:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d646:	601a      	str	r2, [r3, #0]
 800d648:	f3bf 8f4f 	dsb	sy
 800d64c:	f3bf 8f6f 	isb	sy
 800d650:	e75e      	b.n	800d510 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800d652:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d654:	f000 f950 	bl	800d8f8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d658:	f000 fd7c 	bl	800e154 <xTaskResumeAll>
 800d65c:	e758      	b.n	800d510 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800d65e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d660:	f000 f94a 	bl	800d8f8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d664:	f000 fd76 	bl	800e154 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d668:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d66a:	f000 f997 	bl	800d99c <prvIsQueueEmpty>
 800d66e:	4603      	mov	r3, r0
 800d670:	2b00      	cmp	r3, #0
 800d672:	f43f af4d 	beq.w	800d510 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800d676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d678:	2b00      	cmp	r3, #0
 800d67a:	d00d      	beq.n	800d698 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800d67c:	f002 f892 	bl	800f7a4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800d680:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d682:	f000 f891 	bl	800d7a8 <prvGetDisinheritPriorityAfterTimeout>
 800d686:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800d688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d68a:	689b      	ldr	r3, [r3, #8]
 800d68c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d68e:	4618      	mov	r0, r3
 800d690:	f001 fae8 	bl	800ec64 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800d694:	f002 f8b6 	bl	800f804 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d698:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d69a:	4618      	mov	r0, r3
 800d69c:	3738      	adds	r7, #56	; 0x38
 800d69e:	46bd      	mov	sp, r7
 800d6a0:	bd80      	pop	{r7, pc}
 800d6a2:	bf00      	nop
 800d6a4:	e000ed04 	.word	0xe000ed04

0800d6a8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d6a8:	b580      	push	{r7, lr}
 800d6aa:	b08e      	sub	sp, #56	; 0x38
 800d6ac:	af00      	add	r7, sp, #0
 800d6ae:	60f8      	str	r0, [r7, #12]
 800d6b0:	60b9      	str	r1, [r7, #8]
 800d6b2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d6b4:	68fb      	ldr	r3, [r7, #12]
 800d6b6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d6b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d10a      	bne.n	800d6d4 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800d6be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6c2:	f383 8811 	msr	BASEPRI, r3
 800d6c6:	f3bf 8f6f 	isb	sy
 800d6ca:	f3bf 8f4f 	dsb	sy
 800d6ce:	623b      	str	r3, [r7, #32]
}
 800d6d0:	bf00      	nop
 800d6d2:	e7fe      	b.n	800d6d2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d6d4:	68bb      	ldr	r3, [r7, #8]
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d103      	bne.n	800d6e2 <xQueueReceiveFromISR+0x3a>
 800d6da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d101      	bne.n	800d6e6 <xQueueReceiveFromISR+0x3e>
 800d6e2:	2301      	movs	r3, #1
 800d6e4:	e000      	b.n	800d6e8 <xQueueReceiveFromISR+0x40>
 800d6e6:	2300      	movs	r3, #0
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d10a      	bne.n	800d702 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800d6ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6f0:	f383 8811 	msr	BASEPRI, r3
 800d6f4:	f3bf 8f6f 	isb	sy
 800d6f8:	f3bf 8f4f 	dsb	sy
 800d6fc:	61fb      	str	r3, [r7, #28]
}
 800d6fe:	bf00      	nop
 800d700:	e7fe      	b.n	800d700 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d702:	f002 f931 	bl	800f968 <vPortValidateInterruptPriority>
	__asm volatile
 800d706:	f3ef 8211 	mrs	r2, BASEPRI
 800d70a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d70e:	f383 8811 	msr	BASEPRI, r3
 800d712:	f3bf 8f6f 	isb	sy
 800d716:	f3bf 8f4f 	dsb	sy
 800d71a:	61ba      	str	r2, [r7, #24]
 800d71c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800d71e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d720:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d726:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d02f      	beq.n	800d78e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800d72e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d730:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d734:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d738:	68b9      	ldr	r1, [r7, #8]
 800d73a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d73c:	f000 f8b6 	bl	800d8ac <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d742:	1e5a      	subs	r2, r3, #1
 800d744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d746:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800d748:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d74c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d750:	d112      	bne.n	800d778 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d754:	691b      	ldr	r3, [r3, #16]
 800d756:	2b00      	cmp	r3, #0
 800d758:	d016      	beq.n	800d788 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d75a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d75c:	3310      	adds	r3, #16
 800d75e:	4618      	mov	r0, r3
 800d760:	f000 ff5c 	bl	800e61c <xTaskRemoveFromEventList>
 800d764:	4603      	mov	r3, r0
 800d766:	2b00      	cmp	r3, #0
 800d768:	d00e      	beq.n	800d788 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	d00b      	beq.n	800d788 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	2201      	movs	r2, #1
 800d774:	601a      	str	r2, [r3, #0]
 800d776:	e007      	b.n	800d788 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800d778:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d77c:	3301      	adds	r3, #1
 800d77e:	b2db      	uxtb	r3, r3
 800d780:	b25a      	sxtb	r2, r3
 800d782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d784:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800d788:	2301      	movs	r3, #1
 800d78a:	637b      	str	r3, [r7, #52]	; 0x34
 800d78c:	e001      	b.n	800d792 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800d78e:	2300      	movs	r3, #0
 800d790:	637b      	str	r3, [r7, #52]	; 0x34
 800d792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d794:	613b      	str	r3, [r7, #16]
	__asm volatile
 800d796:	693b      	ldr	r3, [r7, #16]
 800d798:	f383 8811 	msr	BASEPRI, r3
}
 800d79c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d79e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d7a0:	4618      	mov	r0, r3
 800d7a2:	3738      	adds	r7, #56	; 0x38
 800d7a4:	46bd      	mov	sp, r7
 800d7a6:	bd80      	pop	{r7, pc}

0800d7a8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800d7a8:	b480      	push	{r7}
 800d7aa:	b085      	sub	sp, #20
 800d7ac:	af00      	add	r7, sp, #0
 800d7ae:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	d006      	beq.n	800d7c6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d7bc:	681b      	ldr	r3, [r3, #0]
 800d7be:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800d7c2:	60fb      	str	r3, [r7, #12]
 800d7c4:	e001      	b.n	800d7ca <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800d7c6:	2300      	movs	r3, #0
 800d7c8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800d7ca:	68fb      	ldr	r3, [r7, #12]
	}
 800d7cc:	4618      	mov	r0, r3
 800d7ce:	3714      	adds	r7, #20
 800d7d0:	46bd      	mov	sp, r7
 800d7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7d6:	4770      	bx	lr

0800d7d8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d7d8:	b580      	push	{r7, lr}
 800d7da:	b086      	sub	sp, #24
 800d7dc:	af00      	add	r7, sp, #0
 800d7de:	60f8      	str	r0, [r7, #12]
 800d7e0:	60b9      	str	r1, [r7, #8]
 800d7e2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d7e4:	2300      	movs	r3, #0
 800d7e6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d7e8:	68fb      	ldr	r3, [r7, #12]
 800d7ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7ec:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d7ee:	68fb      	ldr	r3, [r7, #12]
 800d7f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	d10d      	bne.n	800d812 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d7f6:	68fb      	ldr	r3, [r7, #12]
 800d7f8:	681b      	ldr	r3, [r3, #0]
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	d14d      	bne.n	800d89a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d7fe:	68fb      	ldr	r3, [r7, #12]
 800d800:	689b      	ldr	r3, [r3, #8]
 800d802:	4618      	mov	r0, r3
 800d804:	f001 f9c0 	bl	800eb88 <xTaskPriorityDisinherit>
 800d808:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d80a:	68fb      	ldr	r3, [r7, #12]
 800d80c:	2200      	movs	r2, #0
 800d80e:	609a      	str	r2, [r3, #8]
 800d810:	e043      	b.n	800d89a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	2b00      	cmp	r3, #0
 800d816:	d119      	bne.n	800d84c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d818:	68fb      	ldr	r3, [r7, #12]
 800d81a:	6858      	ldr	r0, [r3, #4]
 800d81c:	68fb      	ldr	r3, [r7, #12]
 800d81e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d820:	461a      	mov	r2, r3
 800d822:	68b9      	ldr	r1, [r7, #8]
 800d824:	f003 f999 	bl	8010b5a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d828:	68fb      	ldr	r3, [r7, #12]
 800d82a:	685a      	ldr	r2, [r3, #4]
 800d82c:	68fb      	ldr	r3, [r7, #12]
 800d82e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d830:	441a      	add	r2, r3
 800d832:	68fb      	ldr	r3, [r7, #12]
 800d834:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d836:	68fb      	ldr	r3, [r7, #12]
 800d838:	685a      	ldr	r2, [r3, #4]
 800d83a:	68fb      	ldr	r3, [r7, #12]
 800d83c:	689b      	ldr	r3, [r3, #8]
 800d83e:	429a      	cmp	r2, r3
 800d840:	d32b      	bcc.n	800d89a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d842:	68fb      	ldr	r3, [r7, #12]
 800d844:	681a      	ldr	r2, [r3, #0]
 800d846:	68fb      	ldr	r3, [r7, #12]
 800d848:	605a      	str	r2, [r3, #4]
 800d84a:	e026      	b.n	800d89a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d84c:	68fb      	ldr	r3, [r7, #12]
 800d84e:	68d8      	ldr	r0, [r3, #12]
 800d850:	68fb      	ldr	r3, [r7, #12]
 800d852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d854:	461a      	mov	r2, r3
 800d856:	68b9      	ldr	r1, [r7, #8]
 800d858:	f003 f97f 	bl	8010b5a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d85c:	68fb      	ldr	r3, [r7, #12]
 800d85e:	68da      	ldr	r2, [r3, #12]
 800d860:	68fb      	ldr	r3, [r7, #12]
 800d862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d864:	425b      	negs	r3, r3
 800d866:	441a      	add	r2, r3
 800d868:	68fb      	ldr	r3, [r7, #12]
 800d86a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d86c:	68fb      	ldr	r3, [r7, #12]
 800d86e:	68da      	ldr	r2, [r3, #12]
 800d870:	68fb      	ldr	r3, [r7, #12]
 800d872:	681b      	ldr	r3, [r3, #0]
 800d874:	429a      	cmp	r2, r3
 800d876:	d207      	bcs.n	800d888 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d878:	68fb      	ldr	r3, [r7, #12]
 800d87a:	689a      	ldr	r2, [r3, #8]
 800d87c:	68fb      	ldr	r3, [r7, #12]
 800d87e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d880:	425b      	negs	r3, r3
 800d882:	441a      	add	r2, r3
 800d884:	68fb      	ldr	r3, [r7, #12]
 800d886:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	2b02      	cmp	r3, #2
 800d88c:	d105      	bne.n	800d89a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d88e:	693b      	ldr	r3, [r7, #16]
 800d890:	2b00      	cmp	r3, #0
 800d892:	d002      	beq.n	800d89a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d894:	693b      	ldr	r3, [r7, #16]
 800d896:	3b01      	subs	r3, #1
 800d898:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d89a:	693b      	ldr	r3, [r7, #16]
 800d89c:	1c5a      	adds	r2, r3, #1
 800d89e:	68fb      	ldr	r3, [r7, #12]
 800d8a0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800d8a2:	697b      	ldr	r3, [r7, #20]
}
 800d8a4:	4618      	mov	r0, r3
 800d8a6:	3718      	adds	r7, #24
 800d8a8:	46bd      	mov	sp, r7
 800d8aa:	bd80      	pop	{r7, pc}

0800d8ac <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d8ac:	b580      	push	{r7, lr}
 800d8ae:	b082      	sub	sp, #8
 800d8b0:	af00      	add	r7, sp, #0
 800d8b2:	6078      	str	r0, [r7, #4]
 800d8b4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d8ba:	2b00      	cmp	r3, #0
 800d8bc:	d018      	beq.n	800d8f0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	68da      	ldr	r2, [r3, #12]
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d8c6:	441a      	add	r2, r3
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	68da      	ldr	r2, [r3, #12]
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	689b      	ldr	r3, [r3, #8]
 800d8d4:	429a      	cmp	r2, r3
 800d8d6:	d303      	bcc.n	800d8e0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	681a      	ldr	r2, [r3, #0]
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	68d9      	ldr	r1, [r3, #12]
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d8e8:	461a      	mov	r2, r3
 800d8ea:	6838      	ldr	r0, [r7, #0]
 800d8ec:	f003 f935 	bl	8010b5a <memcpy>
	}
}
 800d8f0:	bf00      	nop
 800d8f2:	3708      	adds	r7, #8
 800d8f4:	46bd      	mov	sp, r7
 800d8f6:	bd80      	pop	{r7, pc}

0800d8f8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d8f8:	b580      	push	{r7, lr}
 800d8fa:	b084      	sub	sp, #16
 800d8fc:	af00      	add	r7, sp, #0
 800d8fe:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d900:	f001 ff50 	bl	800f7a4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d90a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d90c:	e011      	b.n	800d932 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d912:	2b00      	cmp	r3, #0
 800d914:	d012      	beq.n	800d93c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	3324      	adds	r3, #36	; 0x24
 800d91a:	4618      	mov	r0, r3
 800d91c:	f000 fe7e 	bl	800e61c <xTaskRemoveFromEventList>
 800d920:	4603      	mov	r3, r0
 800d922:	2b00      	cmp	r3, #0
 800d924:	d001      	beq.n	800d92a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d926:	f000 ffb7 	bl	800e898 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d92a:	7bfb      	ldrb	r3, [r7, #15]
 800d92c:	3b01      	subs	r3, #1
 800d92e:	b2db      	uxtb	r3, r3
 800d930:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d932:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d936:	2b00      	cmp	r3, #0
 800d938:	dce9      	bgt.n	800d90e <prvUnlockQueue+0x16>
 800d93a:	e000      	b.n	800d93e <prvUnlockQueue+0x46>
					break;
 800d93c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	22ff      	movs	r2, #255	; 0xff
 800d942:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800d946:	f001 ff5d 	bl	800f804 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d94a:	f001 ff2b 	bl	800f7a4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d954:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d956:	e011      	b.n	800d97c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	691b      	ldr	r3, [r3, #16]
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	d012      	beq.n	800d986 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	3310      	adds	r3, #16
 800d964:	4618      	mov	r0, r3
 800d966:	f000 fe59 	bl	800e61c <xTaskRemoveFromEventList>
 800d96a:	4603      	mov	r3, r0
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d001      	beq.n	800d974 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d970:	f000 ff92 	bl	800e898 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d974:	7bbb      	ldrb	r3, [r7, #14]
 800d976:	3b01      	subs	r3, #1
 800d978:	b2db      	uxtb	r3, r3
 800d97a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d97c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d980:	2b00      	cmp	r3, #0
 800d982:	dce9      	bgt.n	800d958 <prvUnlockQueue+0x60>
 800d984:	e000      	b.n	800d988 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d986:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	22ff      	movs	r2, #255	; 0xff
 800d98c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800d990:	f001 ff38 	bl	800f804 <vPortExitCritical>
}
 800d994:	bf00      	nop
 800d996:	3710      	adds	r7, #16
 800d998:	46bd      	mov	sp, r7
 800d99a:	bd80      	pop	{r7, pc}

0800d99c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d99c:	b580      	push	{r7, lr}
 800d99e:	b084      	sub	sp, #16
 800d9a0:	af00      	add	r7, sp, #0
 800d9a2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d9a4:	f001 fefe 	bl	800f7a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d102      	bne.n	800d9b6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d9b0:	2301      	movs	r3, #1
 800d9b2:	60fb      	str	r3, [r7, #12]
 800d9b4:	e001      	b.n	800d9ba <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d9b6:	2300      	movs	r3, #0
 800d9b8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d9ba:	f001 ff23 	bl	800f804 <vPortExitCritical>

	return xReturn;
 800d9be:	68fb      	ldr	r3, [r7, #12]
}
 800d9c0:	4618      	mov	r0, r3
 800d9c2:	3710      	adds	r7, #16
 800d9c4:	46bd      	mov	sp, r7
 800d9c6:	bd80      	pop	{r7, pc}

0800d9c8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d9c8:	b580      	push	{r7, lr}
 800d9ca:	b084      	sub	sp, #16
 800d9cc:	af00      	add	r7, sp, #0
 800d9ce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d9d0:	f001 fee8 	bl	800f7a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d9dc:	429a      	cmp	r2, r3
 800d9de:	d102      	bne.n	800d9e6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d9e0:	2301      	movs	r3, #1
 800d9e2:	60fb      	str	r3, [r7, #12]
 800d9e4:	e001      	b.n	800d9ea <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d9e6:	2300      	movs	r3, #0
 800d9e8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d9ea:	f001 ff0b 	bl	800f804 <vPortExitCritical>

	return xReturn;
 800d9ee:	68fb      	ldr	r3, [r7, #12]
}
 800d9f0:	4618      	mov	r0, r3
 800d9f2:	3710      	adds	r7, #16
 800d9f4:	46bd      	mov	sp, r7
 800d9f6:	bd80      	pop	{r7, pc}

0800d9f8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800d9f8:	b480      	push	{r7}
 800d9fa:	b085      	sub	sp, #20
 800d9fc:	af00      	add	r7, sp, #0
 800d9fe:	6078      	str	r0, [r7, #4]
 800da00:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800da02:	2300      	movs	r3, #0
 800da04:	60fb      	str	r3, [r7, #12]
 800da06:	e014      	b.n	800da32 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800da08:	4a0f      	ldr	r2, [pc, #60]	; (800da48 <vQueueAddToRegistry+0x50>)
 800da0a:	68fb      	ldr	r3, [r7, #12]
 800da0c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800da10:	2b00      	cmp	r3, #0
 800da12:	d10b      	bne.n	800da2c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800da14:	490c      	ldr	r1, [pc, #48]	; (800da48 <vQueueAddToRegistry+0x50>)
 800da16:	68fb      	ldr	r3, [r7, #12]
 800da18:	683a      	ldr	r2, [r7, #0]
 800da1a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800da1e:	4a0a      	ldr	r2, [pc, #40]	; (800da48 <vQueueAddToRegistry+0x50>)
 800da20:	68fb      	ldr	r3, [r7, #12]
 800da22:	00db      	lsls	r3, r3, #3
 800da24:	4413      	add	r3, r2
 800da26:	687a      	ldr	r2, [r7, #4]
 800da28:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800da2a:	e006      	b.n	800da3a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800da2c:	68fb      	ldr	r3, [r7, #12]
 800da2e:	3301      	adds	r3, #1
 800da30:	60fb      	str	r3, [r7, #12]
 800da32:	68fb      	ldr	r3, [r7, #12]
 800da34:	2b07      	cmp	r3, #7
 800da36:	d9e7      	bls.n	800da08 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800da38:	bf00      	nop
 800da3a:	bf00      	nop
 800da3c:	3714      	adds	r7, #20
 800da3e:	46bd      	mov	sp, r7
 800da40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da44:	4770      	bx	lr
 800da46:	bf00      	nop
 800da48:	20000d24 	.word	0x20000d24

0800da4c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800da4c:	b580      	push	{r7, lr}
 800da4e:	b086      	sub	sp, #24
 800da50:	af00      	add	r7, sp, #0
 800da52:	60f8      	str	r0, [r7, #12]
 800da54:	60b9      	str	r1, [r7, #8]
 800da56:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800da58:	68fb      	ldr	r3, [r7, #12]
 800da5a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800da5c:	f001 fea2 	bl	800f7a4 <vPortEnterCritical>
 800da60:	697b      	ldr	r3, [r7, #20]
 800da62:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800da66:	b25b      	sxtb	r3, r3
 800da68:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da6c:	d103      	bne.n	800da76 <vQueueWaitForMessageRestricted+0x2a>
 800da6e:	697b      	ldr	r3, [r7, #20]
 800da70:	2200      	movs	r2, #0
 800da72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800da76:	697b      	ldr	r3, [r7, #20]
 800da78:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800da7c:	b25b      	sxtb	r3, r3
 800da7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da82:	d103      	bne.n	800da8c <vQueueWaitForMessageRestricted+0x40>
 800da84:	697b      	ldr	r3, [r7, #20]
 800da86:	2200      	movs	r2, #0
 800da88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800da8c:	f001 feba 	bl	800f804 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800da90:	697b      	ldr	r3, [r7, #20]
 800da92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da94:	2b00      	cmp	r3, #0
 800da96:	d106      	bne.n	800daa6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800da98:	697b      	ldr	r3, [r7, #20]
 800da9a:	3324      	adds	r3, #36	; 0x24
 800da9c:	687a      	ldr	r2, [r7, #4]
 800da9e:	68b9      	ldr	r1, [r7, #8]
 800daa0:	4618      	mov	r0, r3
 800daa2:	f000 fd8f 	bl	800e5c4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800daa6:	6978      	ldr	r0, [r7, #20]
 800daa8:	f7ff ff26 	bl	800d8f8 <prvUnlockQueue>
	}
 800daac:	bf00      	nop
 800daae:	3718      	adds	r7, #24
 800dab0:	46bd      	mov	sp, r7
 800dab2:	bd80      	pop	{r7, pc}

0800dab4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800dab4:	b580      	push	{r7, lr}
 800dab6:	b08e      	sub	sp, #56	; 0x38
 800dab8:	af04      	add	r7, sp, #16
 800daba:	60f8      	str	r0, [r7, #12]
 800dabc:	60b9      	str	r1, [r7, #8]
 800dabe:	607a      	str	r2, [r7, #4]
 800dac0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800dac2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d10a      	bne.n	800dade <xTaskCreateStatic+0x2a>
	__asm volatile
 800dac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dacc:	f383 8811 	msr	BASEPRI, r3
 800dad0:	f3bf 8f6f 	isb	sy
 800dad4:	f3bf 8f4f 	dsb	sy
 800dad8:	623b      	str	r3, [r7, #32]
}
 800dada:	bf00      	nop
 800dadc:	e7fe      	b.n	800dadc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800dade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	d10a      	bne.n	800dafa <xTaskCreateStatic+0x46>
	__asm volatile
 800dae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dae8:	f383 8811 	msr	BASEPRI, r3
 800daec:	f3bf 8f6f 	isb	sy
 800daf0:	f3bf 8f4f 	dsb	sy
 800daf4:	61fb      	str	r3, [r7, #28]
}
 800daf6:	bf00      	nop
 800daf8:	e7fe      	b.n	800daf8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800dafa:	235c      	movs	r3, #92	; 0x5c
 800dafc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800dafe:	693b      	ldr	r3, [r7, #16]
 800db00:	2b5c      	cmp	r3, #92	; 0x5c
 800db02:	d00a      	beq.n	800db1a <xTaskCreateStatic+0x66>
	__asm volatile
 800db04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db08:	f383 8811 	msr	BASEPRI, r3
 800db0c:	f3bf 8f6f 	isb	sy
 800db10:	f3bf 8f4f 	dsb	sy
 800db14:	61bb      	str	r3, [r7, #24]
}
 800db16:	bf00      	nop
 800db18:	e7fe      	b.n	800db18 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800db1a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800db1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d01e      	beq.n	800db60 <xTaskCreateStatic+0xac>
 800db22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db24:	2b00      	cmp	r3, #0
 800db26:	d01b      	beq.n	800db60 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800db28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db2a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800db2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db2e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800db30:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800db32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db34:	2202      	movs	r2, #2
 800db36:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800db3a:	2300      	movs	r3, #0
 800db3c:	9303      	str	r3, [sp, #12]
 800db3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db40:	9302      	str	r3, [sp, #8]
 800db42:	f107 0314 	add.w	r3, r7, #20
 800db46:	9301      	str	r3, [sp, #4]
 800db48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db4a:	9300      	str	r3, [sp, #0]
 800db4c:	683b      	ldr	r3, [r7, #0]
 800db4e:	687a      	ldr	r2, [r7, #4]
 800db50:	68b9      	ldr	r1, [r7, #8]
 800db52:	68f8      	ldr	r0, [r7, #12]
 800db54:	f000 f850 	bl	800dbf8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800db58:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800db5a:	f000 f8dd 	bl	800dd18 <prvAddNewTaskToReadyList>
 800db5e:	e001      	b.n	800db64 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800db60:	2300      	movs	r3, #0
 800db62:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800db64:	697b      	ldr	r3, [r7, #20]
	}
 800db66:	4618      	mov	r0, r3
 800db68:	3728      	adds	r7, #40	; 0x28
 800db6a:	46bd      	mov	sp, r7
 800db6c:	bd80      	pop	{r7, pc}

0800db6e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800db6e:	b580      	push	{r7, lr}
 800db70:	b08c      	sub	sp, #48	; 0x30
 800db72:	af04      	add	r7, sp, #16
 800db74:	60f8      	str	r0, [r7, #12]
 800db76:	60b9      	str	r1, [r7, #8]
 800db78:	603b      	str	r3, [r7, #0]
 800db7a:	4613      	mov	r3, r2
 800db7c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800db7e:	88fb      	ldrh	r3, [r7, #6]
 800db80:	009b      	lsls	r3, r3, #2
 800db82:	4618      	mov	r0, r3
 800db84:	f001 ff30 	bl	800f9e8 <pvPortMalloc>
 800db88:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800db8a:	697b      	ldr	r3, [r7, #20]
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	d00e      	beq.n	800dbae <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800db90:	205c      	movs	r0, #92	; 0x5c
 800db92:	f001 ff29 	bl	800f9e8 <pvPortMalloc>
 800db96:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800db98:	69fb      	ldr	r3, [r7, #28]
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	d003      	beq.n	800dba6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800db9e:	69fb      	ldr	r3, [r7, #28]
 800dba0:	697a      	ldr	r2, [r7, #20]
 800dba2:	631a      	str	r2, [r3, #48]	; 0x30
 800dba4:	e005      	b.n	800dbb2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800dba6:	6978      	ldr	r0, [r7, #20]
 800dba8:	f001 ffea 	bl	800fb80 <vPortFree>
 800dbac:	e001      	b.n	800dbb2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800dbae:	2300      	movs	r3, #0
 800dbb0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800dbb2:	69fb      	ldr	r3, [r7, #28]
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	d017      	beq.n	800dbe8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800dbb8:	69fb      	ldr	r3, [r7, #28]
 800dbba:	2200      	movs	r2, #0
 800dbbc:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800dbc0:	88fa      	ldrh	r2, [r7, #6]
 800dbc2:	2300      	movs	r3, #0
 800dbc4:	9303      	str	r3, [sp, #12]
 800dbc6:	69fb      	ldr	r3, [r7, #28]
 800dbc8:	9302      	str	r3, [sp, #8]
 800dbca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbcc:	9301      	str	r3, [sp, #4]
 800dbce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbd0:	9300      	str	r3, [sp, #0]
 800dbd2:	683b      	ldr	r3, [r7, #0]
 800dbd4:	68b9      	ldr	r1, [r7, #8]
 800dbd6:	68f8      	ldr	r0, [r7, #12]
 800dbd8:	f000 f80e 	bl	800dbf8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800dbdc:	69f8      	ldr	r0, [r7, #28]
 800dbde:	f000 f89b 	bl	800dd18 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800dbe2:	2301      	movs	r3, #1
 800dbe4:	61bb      	str	r3, [r7, #24]
 800dbe6:	e002      	b.n	800dbee <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800dbe8:	f04f 33ff 	mov.w	r3, #4294967295
 800dbec:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800dbee:	69bb      	ldr	r3, [r7, #24]
	}
 800dbf0:	4618      	mov	r0, r3
 800dbf2:	3720      	adds	r7, #32
 800dbf4:	46bd      	mov	sp, r7
 800dbf6:	bd80      	pop	{r7, pc}

0800dbf8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800dbf8:	b580      	push	{r7, lr}
 800dbfa:	b088      	sub	sp, #32
 800dbfc:	af00      	add	r7, sp, #0
 800dbfe:	60f8      	str	r0, [r7, #12]
 800dc00:	60b9      	str	r1, [r7, #8]
 800dc02:	607a      	str	r2, [r7, #4]
 800dc04:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800dc06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc08:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	009b      	lsls	r3, r3, #2
 800dc0e:	461a      	mov	r2, r3
 800dc10:	21a5      	movs	r1, #165	; 0xa5
 800dc12:	f002 ff12 	bl	8010a3a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800dc16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800dc20:	3b01      	subs	r3, #1
 800dc22:	009b      	lsls	r3, r3, #2
 800dc24:	4413      	add	r3, r2
 800dc26:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800dc28:	69bb      	ldr	r3, [r7, #24]
 800dc2a:	f023 0307 	bic.w	r3, r3, #7
 800dc2e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800dc30:	69bb      	ldr	r3, [r7, #24]
 800dc32:	f003 0307 	and.w	r3, r3, #7
 800dc36:	2b00      	cmp	r3, #0
 800dc38:	d00a      	beq.n	800dc50 <prvInitialiseNewTask+0x58>
	__asm volatile
 800dc3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc3e:	f383 8811 	msr	BASEPRI, r3
 800dc42:	f3bf 8f6f 	isb	sy
 800dc46:	f3bf 8f4f 	dsb	sy
 800dc4a:	617b      	str	r3, [r7, #20]
}
 800dc4c:	bf00      	nop
 800dc4e:	e7fe      	b.n	800dc4e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800dc50:	68bb      	ldr	r3, [r7, #8]
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	d01f      	beq.n	800dc96 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800dc56:	2300      	movs	r3, #0
 800dc58:	61fb      	str	r3, [r7, #28]
 800dc5a:	e012      	b.n	800dc82 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800dc5c:	68ba      	ldr	r2, [r7, #8]
 800dc5e:	69fb      	ldr	r3, [r7, #28]
 800dc60:	4413      	add	r3, r2
 800dc62:	7819      	ldrb	r1, [r3, #0]
 800dc64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dc66:	69fb      	ldr	r3, [r7, #28]
 800dc68:	4413      	add	r3, r2
 800dc6a:	3334      	adds	r3, #52	; 0x34
 800dc6c:	460a      	mov	r2, r1
 800dc6e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800dc70:	68ba      	ldr	r2, [r7, #8]
 800dc72:	69fb      	ldr	r3, [r7, #28]
 800dc74:	4413      	add	r3, r2
 800dc76:	781b      	ldrb	r3, [r3, #0]
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d006      	beq.n	800dc8a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800dc7c:	69fb      	ldr	r3, [r7, #28]
 800dc7e:	3301      	adds	r3, #1
 800dc80:	61fb      	str	r3, [r7, #28]
 800dc82:	69fb      	ldr	r3, [r7, #28]
 800dc84:	2b0f      	cmp	r3, #15
 800dc86:	d9e9      	bls.n	800dc5c <prvInitialiseNewTask+0x64>
 800dc88:	e000      	b.n	800dc8c <prvInitialiseNewTask+0x94>
			{
				break;
 800dc8a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800dc8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc8e:	2200      	movs	r2, #0
 800dc90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800dc94:	e003      	b.n	800dc9e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800dc96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc98:	2200      	movs	r2, #0
 800dc9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800dc9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dca0:	2b37      	cmp	r3, #55	; 0x37
 800dca2:	d901      	bls.n	800dca8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800dca4:	2337      	movs	r3, #55	; 0x37
 800dca6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800dca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcaa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dcac:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800dcae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcb0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dcb2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800dcb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcb6:	2200      	movs	r2, #0
 800dcb8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800dcba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcbc:	3304      	adds	r3, #4
 800dcbe:	4618      	mov	r0, r3
 800dcc0:	f7fe fee4 	bl	800ca8c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800dcc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcc6:	3318      	adds	r3, #24
 800dcc8:	4618      	mov	r0, r3
 800dcca:	f7fe fedf 	bl	800ca8c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800dcce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dcd2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dcd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcd6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800dcda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcdc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800dcde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dce0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dce2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800dce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dce6:	2200      	movs	r2, #0
 800dce8:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800dcea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcec:	2200      	movs	r2, #0
 800dcee:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800dcf2:	683a      	ldr	r2, [r7, #0]
 800dcf4:	68f9      	ldr	r1, [r7, #12]
 800dcf6:	69b8      	ldr	r0, [r7, #24]
 800dcf8:	f001 fc24 	bl	800f544 <pxPortInitialiseStack>
 800dcfc:	4602      	mov	r2, r0
 800dcfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd00:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800dd02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d002      	beq.n	800dd0e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800dd08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dd0c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dd0e:	bf00      	nop
 800dd10:	3720      	adds	r7, #32
 800dd12:	46bd      	mov	sp, r7
 800dd14:	bd80      	pop	{r7, pc}
	...

0800dd18 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800dd18:	b580      	push	{r7, lr}
 800dd1a:	b082      	sub	sp, #8
 800dd1c:	af00      	add	r7, sp, #0
 800dd1e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800dd20:	f001 fd40 	bl	800f7a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800dd24:	4b2d      	ldr	r3, [pc, #180]	; (800dddc <prvAddNewTaskToReadyList+0xc4>)
 800dd26:	681b      	ldr	r3, [r3, #0]
 800dd28:	3301      	adds	r3, #1
 800dd2a:	4a2c      	ldr	r2, [pc, #176]	; (800dddc <prvAddNewTaskToReadyList+0xc4>)
 800dd2c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800dd2e:	4b2c      	ldr	r3, [pc, #176]	; (800dde0 <prvAddNewTaskToReadyList+0xc8>)
 800dd30:	681b      	ldr	r3, [r3, #0]
 800dd32:	2b00      	cmp	r3, #0
 800dd34:	d109      	bne.n	800dd4a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800dd36:	4a2a      	ldr	r2, [pc, #168]	; (800dde0 <prvAddNewTaskToReadyList+0xc8>)
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800dd3c:	4b27      	ldr	r3, [pc, #156]	; (800dddc <prvAddNewTaskToReadyList+0xc4>)
 800dd3e:	681b      	ldr	r3, [r3, #0]
 800dd40:	2b01      	cmp	r3, #1
 800dd42:	d110      	bne.n	800dd66 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800dd44:	f000 fdcc 	bl	800e8e0 <prvInitialiseTaskLists>
 800dd48:	e00d      	b.n	800dd66 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800dd4a:	4b26      	ldr	r3, [pc, #152]	; (800dde4 <prvAddNewTaskToReadyList+0xcc>)
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	d109      	bne.n	800dd66 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800dd52:	4b23      	ldr	r3, [pc, #140]	; (800dde0 <prvAddNewTaskToReadyList+0xc8>)
 800dd54:	681b      	ldr	r3, [r3, #0]
 800dd56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd5c:	429a      	cmp	r2, r3
 800dd5e:	d802      	bhi.n	800dd66 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800dd60:	4a1f      	ldr	r2, [pc, #124]	; (800dde0 <prvAddNewTaskToReadyList+0xc8>)
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800dd66:	4b20      	ldr	r3, [pc, #128]	; (800dde8 <prvAddNewTaskToReadyList+0xd0>)
 800dd68:	681b      	ldr	r3, [r3, #0]
 800dd6a:	3301      	adds	r3, #1
 800dd6c:	4a1e      	ldr	r2, [pc, #120]	; (800dde8 <prvAddNewTaskToReadyList+0xd0>)
 800dd6e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800dd70:	4b1d      	ldr	r3, [pc, #116]	; (800dde8 <prvAddNewTaskToReadyList+0xd0>)
 800dd72:	681a      	ldr	r2, [r3, #0]
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd7c:	4b1b      	ldr	r3, [pc, #108]	; (800ddec <prvAddNewTaskToReadyList+0xd4>)
 800dd7e:	681b      	ldr	r3, [r3, #0]
 800dd80:	429a      	cmp	r2, r3
 800dd82:	d903      	bls.n	800dd8c <prvAddNewTaskToReadyList+0x74>
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd88:	4a18      	ldr	r2, [pc, #96]	; (800ddec <prvAddNewTaskToReadyList+0xd4>)
 800dd8a:	6013      	str	r3, [r2, #0]
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd90:	4613      	mov	r3, r2
 800dd92:	009b      	lsls	r3, r3, #2
 800dd94:	4413      	add	r3, r2
 800dd96:	009b      	lsls	r3, r3, #2
 800dd98:	4a15      	ldr	r2, [pc, #84]	; (800ddf0 <prvAddNewTaskToReadyList+0xd8>)
 800dd9a:	441a      	add	r2, r3
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	3304      	adds	r3, #4
 800dda0:	4619      	mov	r1, r3
 800dda2:	4610      	mov	r0, r2
 800dda4:	f7fe fe7f 	bl	800caa6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800dda8:	f001 fd2c 	bl	800f804 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ddac:	4b0d      	ldr	r3, [pc, #52]	; (800dde4 <prvAddNewTaskToReadyList+0xcc>)
 800ddae:	681b      	ldr	r3, [r3, #0]
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	d00e      	beq.n	800ddd2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ddb4:	4b0a      	ldr	r3, [pc, #40]	; (800dde0 <prvAddNewTaskToReadyList+0xc8>)
 800ddb6:	681b      	ldr	r3, [r3, #0]
 800ddb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ddbe:	429a      	cmp	r2, r3
 800ddc0:	d207      	bcs.n	800ddd2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ddc2:	4b0c      	ldr	r3, [pc, #48]	; (800ddf4 <prvAddNewTaskToReadyList+0xdc>)
 800ddc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ddc8:	601a      	str	r2, [r3, #0]
 800ddca:	f3bf 8f4f 	dsb	sy
 800ddce:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ddd2:	bf00      	nop
 800ddd4:	3708      	adds	r7, #8
 800ddd6:	46bd      	mov	sp, r7
 800ddd8:	bd80      	pop	{r7, pc}
 800ddda:	bf00      	nop
 800dddc:	20001238 	.word	0x20001238
 800dde0:	20000d64 	.word	0x20000d64
 800dde4:	20001244 	.word	0x20001244
 800dde8:	20001254 	.word	0x20001254
 800ddec:	20001240 	.word	0x20001240
 800ddf0:	20000d68 	.word	0x20000d68
 800ddf4:	e000ed04 	.word	0xe000ed04

0800ddf8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ddf8:	b580      	push	{r7, lr}
 800ddfa:	b084      	sub	sp, #16
 800ddfc:	af00      	add	r7, sp, #0
 800ddfe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800de00:	2300      	movs	r3, #0
 800de02:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	2b00      	cmp	r3, #0
 800de08:	d017      	beq.n	800de3a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800de0a:	4b13      	ldr	r3, [pc, #76]	; (800de58 <vTaskDelay+0x60>)
 800de0c:	681b      	ldr	r3, [r3, #0]
 800de0e:	2b00      	cmp	r3, #0
 800de10:	d00a      	beq.n	800de28 <vTaskDelay+0x30>
	__asm volatile
 800de12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de16:	f383 8811 	msr	BASEPRI, r3
 800de1a:	f3bf 8f6f 	isb	sy
 800de1e:	f3bf 8f4f 	dsb	sy
 800de22:	60bb      	str	r3, [r7, #8]
}
 800de24:	bf00      	nop
 800de26:	e7fe      	b.n	800de26 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800de28:	f000 f986 	bl	800e138 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800de2c:	2100      	movs	r1, #0
 800de2e:	6878      	ldr	r0, [r7, #4]
 800de30:	f000 ffc6 	bl	800edc0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800de34:	f000 f98e 	bl	800e154 <xTaskResumeAll>
 800de38:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800de3a:	68fb      	ldr	r3, [r7, #12]
 800de3c:	2b00      	cmp	r3, #0
 800de3e:	d107      	bne.n	800de50 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800de40:	4b06      	ldr	r3, [pc, #24]	; (800de5c <vTaskDelay+0x64>)
 800de42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800de46:	601a      	str	r2, [r3, #0]
 800de48:	f3bf 8f4f 	dsb	sy
 800de4c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800de50:	bf00      	nop
 800de52:	3710      	adds	r7, #16
 800de54:	46bd      	mov	sp, r7
 800de56:	bd80      	pop	{r7, pc}
 800de58:	20001260 	.word	0x20001260
 800de5c:	e000ed04 	.word	0xe000ed04

0800de60 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800de60:	b580      	push	{r7, lr}
 800de62:	b084      	sub	sp, #16
 800de64:	af00      	add	r7, sp, #0
 800de66:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800de68:	f001 fc9c 	bl	800f7a4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	2b00      	cmp	r3, #0
 800de70:	d102      	bne.n	800de78 <vTaskSuspend+0x18>
 800de72:	4b30      	ldr	r3, [pc, #192]	; (800df34 <vTaskSuspend+0xd4>)
 800de74:	681b      	ldr	r3, [r3, #0]
 800de76:	e000      	b.n	800de7a <vTaskSuspend+0x1a>
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800de7c:	68fb      	ldr	r3, [r7, #12]
 800de7e:	3304      	adds	r3, #4
 800de80:	4618      	mov	r0, r3
 800de82:	f7fe fe6d 	bl	800cb60 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800de86:	68fb      	ldr	r3, [r7, #12]
 800de88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800de8a:	2b00      	cmp	r3, #0
 800de8c:	d004      	beq.n	800de98 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800de8e:	68fb      	ldr	r3, [r7, #12]
 800de90:	3318      	adds	r3, #24
 800de92:	4618      	mov	r0, r3
 800de94:	f7fe fe64 	bl	800cb60 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800de98:	68fb      	ldr	r3, [r7, #12]
 800de9a:	3304      	adds	r3, #4
 800de9c:	4619      	mov	r1, r3
 800de9e:	4826      	ldr	r0, [pc, #152]	; (800df38 <vTaskSuspend+0xd8>)
 800dea0:	f7fe fe01 	bl	800caa6 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800dea4:	68fb      	ldr	r3, [r7, #12]
 800dea6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800deaa:	b2db      	uxtb	r3, r3
 800deac:	2b01      	cmp	r3, #1
 800deae:	d103      	bne.n	800deb8 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800deb0:	68fb      	ldr	r3, [r7, #12]
 800deb2:	2200      	movs	r2, #0
 800deb4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800deb8:	f001 fca4 	bl	800f804 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800debc:	4b1f      	ldr	r3, [pc, #124]	; (800df3c <vTaskSuspend+0xdc>)
 800debe:	681b      	ldr	r3, [r3, #0]
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d005      	beq.n	800ded0 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800dec4:	f001 fc6e 	bl	800f7a4 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800dec8:	f000 fda8 	bl	800ea1c <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800decc:	f001 fc9a 	bl	800f804 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800ded0:	4b18      	ldr	r3, [pc, #96]	; (800df34 <vTaskSuspend+0xd4>)
 800ded2:	681b      	ldr	r3, [r3, #0]
 800ded4:	68fa      	ldr	r2, [r7, #12]
 800ded6:	429a      	cmp	r2, r3
 800ded8:	d127      	bne.n	800df2a <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 800deda:	4b18      	ldr	r3, [pc, #96]	; (800df3c <vTaskSuspend+0xdc>)
 800dedc:	681b      	ldr	r3, [r3, #0]
 800dede:	2b00      	cmp	r3, #0
 800dee0:	d017      	beq.n	800df12 <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800dee2:	4b17      	ldr	r3, [pc, #92]	; (800df40 <vTaskSuspend+0xe0>)
 800dee4:	681b      	ldr	r3, [r3, #0]
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	d00a      	beq.n	800df00 <vTaskSuspend+0xa0>
	__asm volatile
 800deea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800deee:	f383 8811 	msr	BASEPRI, r3
 800def2:	f3bf 8f6f 	isb	sy
 800def6:	f3bf 8f4f 	dsb	sy
 800defa:	60bb      	str	r3, [r7, #8]
}
 800defc:	bf00      	nop
 800defe:	e7fe      	b.n	800defe <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 800df00:	4b10      	ldr	r3, [pc, #64]	; (800df44 <vTaskSuspend+0xe4>)
 800df02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800df06:	601a      	str	r2, [r3, #0]
 800df08:	f3bf 8f4f 	dsb	sy
 800df0c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800df10:	e00b      	b.n	800df2a <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800df12:	4b09      	ldr	r3, [pc, #36]	; (800df38 <vTaskSuspend+0xd8>)
 800df14:	681a      	ldr	r2, [r3, #0]
 800df16:	4b0c      	ldr	r3, [pc, #48]	; (800df48 <vTaskSuspend+0xe8>)
 800df18:	681b      	ldr	r3, [r3, #0]
 800df1a:	429a      	cmp	r2, r3
 800df1c:	d103      	bne.n	800df26 <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 800df1e:	4b05      	ldr	r3, [pc, #20]	; (800df34 <vTaskSuspend+0xd4>)
 800df20:	2200      	movs	r2, #0
 800df22:	601a      	str	r2, [r3, #0]
	}
 800df24:	e001      	b.n	800df2a <vTaskSuspend+0xca>
					vTaskSwitchContext();
 800df26:	f000 fa8f 	bl	800e448 <vTaskSwitchContext>
	}
 800df2a:	bf00      	nop
 800df2c:	3710      	adds	r7, #16
 800df2e:	46bd      	mov	sp, r7
 800df30:	bd80      	pop	{r7, pc}
 800df32:	bf00      	nop
 800df34:	20000d64 	.word	0x20000d64
 800df38:	20001224 	.word	0x20001224
 800df3c:	20001244 	.word	0x20001244
 800df40:	20001260 	.word	0x20001260
 800df44:	e000ed04 	.word	0xe000ed04
 800df48:	20001238 	.word	0x20001238

0800df4c <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 800df4c:	b480      	push	{r7}
 800df4e:	b087      	sub	sp, #28
 800df50:	af00      	add	r7, sp, #0
 800df52:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 800df54:	2300      	movs	r3, #0
 800df56:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	2b00      	cmp	r3, #0
 800df60:	d10a      	bne.n	800df78 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 800df62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df66:	f383 8811 	msr	BASEPRI, r3
 800df6a:	f3bf 8f6f 	isb	sy
 800df6e:	f3bf 8f4f 	dsb	sy
 800df72:	60fb      	str	r3, [r7, #12]
}
 800df74:	bf00      	nop
 800df76:	e7fe      	b.n	800df76 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800df78:	693b      	ldr	r3, [r7, #16]
 800df7a:	695b      	ldr	r3, [r3, #20]
 800df7c:	4a0a      	ldr	r2, [pc, #40]	; (800dfa8 <prvTaskIsTaskSuspended+0x5c>)
 800df7e:	4293      	cmp	r3, r2
 800df80:	d10a      	bne.n	800df98 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800df82:	693b      	ldr	r3, [r7, #16]
 800df84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800df86:	4a09      	ldr	r2, [pc, #36]	; (800dfac <prvTaskIsTaskSuspended+0x60>)
 800df88:	4293      	cmp	r3, r2
 800df8a:	d005      	beq.n	800df98 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800df8c:	693b      	ldr	r3, [r7, #16]
 800df8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800df90:	2b00      	cmp	r3, #0
 800df92:	d101      	bne.n	800df98 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 800df94:	2301      	movs	r3, #1
 800df96:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800df98:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800df9a:	4618      	mov	r0, r3
 800df9c:	371c      	adds	r7, #28
 800df9e:	46bd      	mov	sp, r7
 800dfa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfa4:	4770      	bx	lr
 800dfa6:	bf00      	nop
 800dfa8:	20001224 	.word	0x20001224
 800dfac:	200011f8 	.word	0x200011f8

0800dfb0 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 800dfb0:	b580      	push	{r7, lr}
 800dfb2:	b084      	sub	sp, #16
 800dfb4:	af00      	add	r7, sp, #0
 800dfb6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	d10a      	bne.n	800dfd8 <vTaskResume+0x28>
	__asm volatile
 800dfc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfc6:	f383 8811 	msr	BASEPRI, r3
 800dfca:	f3bf 8f6f 	isb	sy
 800dfce:	f3bf 8f4f 	dsb	sy
 800dfd2:	60bb      	str	r3, [r7, #8]
}
 800dfd4:	bf00      	nop
 800dfd6:	e7fe      	b.n	800dfd6 <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 800dfd8:	4b20      	ldr	r3, [pc, #128]	; (800e05c <vTaskResume+0xac>)
 800dfda:	681b      	ldr	r3, [r3, #0]
 800dfdc:	68fa      	ldr	r2, [r7, #12]
 800dfde:	429a      	cmp	r2, r3
 800dfe0:	d038      	beq.n	800e054 <vTaskResume+0xa4>
 800dfe2:	68fb      	ldr	r3, [r7, #12]
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	d035      	beq.n	800e054 <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 800dfe8:	f001 fbdc 	bl	800f7a4 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800dfec:	68f8      	ldr	r0, [r7, #12]
 800dfee:	f7ff ffad 	bl	800df4c <prvTaskIsTaskSuspended>
 800dff2:	4603      	mov	r3, r0
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	d02b      	beq.n	800e050 <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 800dff8:	68fb      	ldr	r3, [r7, #12]
 800dffa:	3304      	adds	r3, #4
 800dffc:	4618      	mov	r0, r3
 800dffe:	f7fe fdaf 	bl	800cb60 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e002:	68fb      	ldr	r3, [r7, #12]
 800e004:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e006:	4b16      	ldr	r3, [pc, #88]	; (800e060 <vTaskResume+0xb0>)
 800e008:	681b      	ldr	r3, [r3, #0]
 800e00a:	429a      	cmp	r2, r3
 800e00c:	d903      	bls.n	800e016 <vTaskResume+0x66>
 800e00e:	68fb      	ldr	r3, [r7, #12]
 800e010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e012:	4a13      	ldr	r2, [pc, #76]	; (800e060 <vTaskResume+0xb0>)
 800e014:	6013      	str	r3, [r2, #0]
 800e016:	68fb      	ldr	r3, [r7, #12]
 800e018:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e01a:	4613      	mov	r3, r2
 800e01c:	009b      	lsls	r3, r3, #2
 800e01e:	4413      	add	r3, r2
 800e020:	009b      	lsls	r3, r3, #2
 800e022:	4a10      	ldr	r2, [pc, #64]	; (800e064 <vTaskResume+0xb4>)
 800e024:	441a      	add	r2, r3
 800e026:	68fb      	ldr	r3, [r7, #12]
 800e028:	3304      	adds	r3, #4
 800e02a:	4619      	mov	r1, r3
 800e02c:	4610      	mov	r0, r2
 800e02e:	f7fe fd3a 	bl	800caa6 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e032:	68fb      	ldr	r3, [r7, #12]
 800e034:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e036:	4b09      	ldr	r3, [pc, #36]	; (800e05c <vTaskResume+0xac>)
 800e038:	681b      	ldr	r3, [r3, #0]
 800e03a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e03c:	429a      	cmp	r2, r3
 800e03e:	d307      	bcc.n	800e050 <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 800e040:	4b09      	ldr	r3, [pc, #36]	; (800e068 <vTaskResume+0xb8>)
 800e042:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e046:	601a      	str	r2, [r3, #0]
 800e048:	f3bf 8f4f 	dsb	sy
 800e04c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800e050:	f001 fbd8 	bl	800f804 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e054:	bf00      	nop
 800e056:	3710      	adds	r7, #16
 800e058:	46bd      	mov	sp, r7
 800e05a:	bd80      	pop	{r7, pc}
 800e05c:	20000d64 	.word	0x20000d64
 800e060:	20001240 	.word	0x20001240
 800e064:	20000d68 	.word	0x20000d68
 800e068:	e000ed04 	.word	0xe000ed04

0800e06c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800e06c:	b580      	push	{r7, lr}
 800e06e:	b08a      	sub	sp, #40	; 0x28
 800e070:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800e072:	2300      	movs	r3, #0
 800e074:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800e076:	2300      	movs	r3, #0
 800e078:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e07a:	463a      	mov	r2, r7
 800e07c:	1d39      	adds	r1, r7, #4
 800e07e:	f107 0308 	add.w	r3, r7, #8
 800e082:	4618      	mov	r0, r3
 800e084:	f7fe fac0 	bl	800c608 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800e088:	6839      	ldr	r1, [r7, #0]
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	68ba      	ldr	r2, [r7, #8]
 800e08e:	9202      	str	r2, [sp, #8]
 800e090:	9301      	str	r3, [sp, #4]
 800e092:	2300      	movs	r3, #0
 800e094:	9300      	str	r3, [sp, #0]
 800e096:	2300      	movs	r3, #0
 800e098:	460a      	mov	r2, r1
 800e09a:	4921      	ldr	r1, [pc, #132]	; (800e120 <vTaskStartScheduler+0xb4>)
 800e09c:	4821      	ldr	r0, [pc, #132]	; (800e124 <vTaskStartScheduler+0xb8>)
 800e09e:	f7ff fd09 	bl	800dab4 <xTaskCreateStatic>
 800e0a2:	4603      	mov	r3, r0
 800e0a4:	4a20      	ldr	r2, [pc, #128]	; (800e128 <vTaskStartScheduler+0xbc>)
 800e0a6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800e0a8:	4b1f      	ldr	r3, [pc, #124]	; (800e128 <vTaskStartScheduler+0xbc>)
 800e0aa:	681b      	ldr	r3, [r3, #0]
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	d002      	beq.n	800e0b6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800e0b0:	2301      	movs	r3, #1
 800e0b2:	617b      	str	r3, [r7, #20]
 800e0b4:	e001      	b.n	800e0ba <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800e0b6:	2300      	movs	r3, #0
 800e0b8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800e0ba:	697b      	ldr	r3, [r7, #20]
 800e0bc:	2b01      	cmp	r3, #1
 800e0be:	d102      	bne.n	800e0c6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800e0c0:	f000 fed2 	bl	800ee68 <xTimerCreateTimerTask>
 800e0c4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800e0c6:	697b      	ldr	r3, [r7, #20]
 800e0c8:	2b01      	cmp	r3, #1
 800e0ca:	d116      	bne.n	800e0fa <vTaskStartScheduler+0x8e>
	__asm volatile
 800e0cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0d0:	f383 8811 	msr	BASEPRI, r3
 800e0d4:	f3bf 8f6f 	isb	sy
 800e0d8:	f3bf 8f4f 	dsb	sy
 800e0dc:	613b      	str	r3, [r7, #16]
}
 800e0de:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800e0e0:	4b12      	ldr	r3, [pc, #72]	; (800e12c <vTaskStartScheduler+0xc0>)
 800e0e2:	f04f 32ff 	mov.w	r2, #4294967295
 800e0e6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e0e8:	4b11      	ldr	r3, [pc, #68]	; (800e130 <vTaskStartScheduler+0xc4>)
 800e0ea:	2201      	movs	r2, #1
 800e0ec:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e0ee:	4b11      	ldr	r3, [pc, #68]	; (800e134 <vTaskStartScheduler+0xc8>)
 800e0f0:	2200      	movs	r2, #0
 800e0f2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800e0f4:	f001 fab4 	bl	800f660 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800e0f8:	e00e      	b.n	800e118 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e0fa:	697b      	ldr	r3, [r7, #20]
 800e0fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e100:	d10a      	bne.n	800e118 <vTaskStartScheduler+0xac>
	__asm volatile
 800e102:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e106:	f383 8811 	msr	BASEPRI, r3
 800e10a:	f3bf 8f6f 	isb	sy
 800e10e:	f3bf 8f4f 	dsb	sy
 800e112:	60fb      	str	r3, [r7, #12]
}
 800e114:	bf00      	nop
 800e116:	e7fe      	b.n	800e116 <vTaskStartScheduler+0xaa>
}
 800e118:	bf00      	nop
 800e11a:	3718      	adds	r7, #24
 800e11c:	46bd      	mov	sp, r7
 800e11e:	bd80      	pop	{r7, pc}
 800e120:	08014498 	.word	0x08014498
 800e124:	0800e8b1 	.word	0x0800e8b1
 800e128:	2000125c 	.word	0x2000125c
 800e12c:	20001258 	.word	0x20001258
 800e130:	20001244 	.word	0x20001244
 800e134:	2000123c 	.word	0x2000123c

0800e138 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800e138:	b480      	push	{r7}
 800e13a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800e13c:	4b04      	ldr	r3, [pc, #16]	; (800e150 <vTaskSuspendAll+0x18>)
 800e13e:	681b      	ldr	r3, [r3, #0]
 800e140:	3301      	adds	r3, #1
 800e142:	4a03      	ldr	r2, [pc, #12]	; (800e150 <vTaskSuspendAll+0x18>)
 800e144:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800e146:	bf00      	nop
 800e148:	46bd      	mov	sp, r7
 800e14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e14e:	4770      	bx	lr
 800e150:	20001260 	.word	0x20001260

0800e154 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e154:	b580      	push	{r7, lr}
 800e156:	b084      	sub	sp, #16
 800e158:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e15a:	2300      	movs	r3, #0
 800e15c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e15e:	2300      	movs	r3, #0
 800e160:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800e162:	4b42      	ldr	r3, [pc, #264]	; (800e26c <xTaskResumeAll+0x118>)
 800e164:	681b      	ldr	r3, [r3, #0]
 800e166:	2b00      	cmp	r3, #0
 800e168:	d10a      	bne.n	800e180 <xTaskResumeAll+0x2c>
	__asm volatile
 800e16a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e16e:	f383 8811 	msr	BASEPRI, r3
 800e172:	f3bf 8f6f 	isb	sy
 800e176:	f3bf 8f4f 	dsb	sy
 800e17a:	603b      	str	r3, [r7, #0]
}
 800e17c:	bf00      	nop
 800e17e:	e7fe      	b.n	800e17e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800e180:	f001 fb10 	bl	800f7a4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800e184:	4b39      	ldr	r3, [pc, #228]	; (800e26c <xTaskResumeAll+0x118>)
 800e186:	681b      	ldr	r3, [r3, #0]
 800e188:	3b01      	subs	r3, #1
 800e18a:	4a38      	ldr	r2, [pc, #224]	; (800e26c <xTaskResumeAll+0x118>)
 800e18c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e18e:	4b37      	ldr	r3, [pc, #220]	; (800e26c <xTaskResumeAll+0x118>)
 800e190:	681b      	ldr	r3, [r3, #0]
 800e192:	2b00      	cmp	r3, #0
 800e194:	d162      	bne.n	800e25c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e196:	4b36      	ldr	r3, [pc, #216]	; (800e270 <xTaskResumeAll+0x11c>)
 800e198:	681b      	ldr	r3, [r3, #0]
 800e19a:	2b00      	cmp	r3, #0
 800e19c:	d05e      	beq.n	800e25c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e19e:	e02f      	b.n	800e200 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e1a0:	4b34      	ldr	r3, [pc, #208]	; (800e274 <xTaskResumeAll+0x120>)
 800e1a2:	68db      	ldr	r3, [r3, #12]
 800e1a4:	68db      	ldr	r3, [r3, #12]
 800e1a6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e1a8:	68fb      	ldr	r3, [r7, #12]
 800e1aa:	3318      	adds	r3, #24
 800e1ac:	4618      	mov	r0, r3
 800e1ae:	f7fe fcd7 	bl	800cb60 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e1b2:	68fb      	ldr	r3, [r7, #12]
 800e1b4:	3304      	adds	r3, #4
 800e1b6:	4618      	mov	r0, r3
 800e1b8:	f7fe fcd2 	bl	800cb60 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e1bc:	68fb      	ldr	r3, [r7, #12]
 800e1be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e1c0:	4b2d      	ldr	r3, [pc, #180]	; (800e278 <xTaskResumeAll+0x124>)
 800e1c2:	681b      	ldr	r3, [r3, #0]
 800e1c4:	429a      	cmp	r2, r3
 800e1c6:	d903      	bls.n	800e1d0 <xTaskResumeAll+0x7c>
 800e1c8:	68fb      	ldr	r3, [r7, #12]
 800e1ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1cc:	4a2a      	ldr	r2, [pc, #168]	; (800e278 <xTaskResumeAll+0x124>)
 800e1ce:	6013      	str	r3, [r2, #0]
 800e1d0:	68fb      	ldr	r3, [r7, #12]
 800e1d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e1d4:	4613      	mov	r3, r2
 800e1d6:	009b      	lsls	r3, r3, #2
 800e1d8:	4413      	add	r3, r2
 800e1da:	009b      	lsls	r3, r3, #2
 800e1dc:	4a27      	ldr	r2, [pc, #156]	; (800e27c <xTaskResumeAll+0x128>)
 800e1de:	441a      	add	r2, r3
 800e1e0:	68fb      	ldr	r3, [r7, #12]
 800e1e2:	3304      	adds	r3, #4
 800e1e4:	4619      	mov	r1, r3
 800e1e6:	4610      	mov	r0, r2
 800e1e8:	f7fe fc5d 	bl	800caa6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e1ec:	68fb      	ldr	r3, [r7, #12]
 800e1ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e1f0:	4b23      	ldr	r3, [pc, #140]	; (800e280 <xTaskResumeAll+0x12c>)
 800e1f2:	681b      	ldr	r3, [r3, #0]
 800e1f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1f6:	429a      	cmp	r2, r3
 800e1f8:	d302      	bcc.n	800e200 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800e1fa:	4b22      	ldr	r3, [pc, #136]	; (800e284 <xTaskResumeAll+0x130>)
 800e1fc:	2201      	movs	r2, #1
 800e1fe:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e200:	4b1c      	ldr	r3, [pc, #112]	; (800e274 <xTaskResumeAll+0x120>)
 800e202:	681b      	ldr	r3, [r3, #0]
 800e204:	2b00      	cmp	r3, #0
 800e206:	d1cb      	bne.n	800e1a0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e208:	68fb      	ldr	r3, [r7, #12]
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	d001      	beq.n	800e212 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e20e:	f000 fc05 	bl	800ea1c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800e212:	4b1d      	ldr	r3, [pc, #116]	; (800e288 <xTaskResumeAll+0x134>)
 800e214:	681b      	ldr	r3, [r3, #0]
 800e216:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	d010      	beq.n	800e240 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e21e:	f000 f859 	bl	800e2d4 <xTaskIncrementTick>
 800e222:	4603      	mov	r3, r0
 800e224:	2b00      	cmp	r3, #0
 800e226:	d002      	beq.n	800e22e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800e228:	4b16      	ldr	r3, [pc, #88]	; (800e284 <xTaskResumeAll+0x130>)
 800e22a:	2201      	movs	r2, #1
 800e22c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	3b01      	subs	r3, #1
 800e232:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	2b00      	cmp	r3, #0
 800e238:	d1f1      	bne.n	800e21e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800e23a:	4b13      	ldr	r3, [pc, #76]	; (800e288 <xTaskResumeAll+0x134>)
 800e23c:	2200      	movs	r2, #0
 800e23e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e240:	4b10      	ldr	r3, [pc, #64]	; (800e284 <xTaskResumeAll+0x130>)
 800e242:	681b      	ldr	r3, [r3, #0]
 800e244:	2b00      	cmp	r3, #0
 800e246:	d009      	beq.n	800e25c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e248:	2301      	movs	r3, #1
 800e24a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e24c:	4b0f      	ldr	r3, [pc, #60]	; (800e28c <xTaskResumeAll+0x138>)
 800e24e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e252:	601a      	str	r2, [r3, #0]
 800e254:	f3bf 8f4f 	dsb	sy
 800e258:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e25c:	f001 fad2 	bl	800f804 <vPortExitCritical>

	return xAlreadyYielded;
 800e260:	68bb      	ldr	r3, [r7, #8]
}
 800e262:	4618      	mov	r0, r3
 800e264:	3710      	adds	r7, #16
 800e266:	46bd      	mov	sp, r7
 800e268:	bd80      	pop	{r7, pc}
 800e26a:	bf00      	nop
 800e26c:	20001260 	.word	0x20001260
 800e270:	20001238 	.word	0x20001238
 800e274:	200011f8 	.word	0x200011f8
 800e278:	20001240 	.word	0x20001240
 800e27c:	20000d68 	.word	0x20000d68
 800e280:	20000d64 	.word	0x20000d64
 800e284:	2000124c 	.word	0x2000124c
 800e288:	20001248 	.word	0x20001248
 800e28c:	e000ed04 	.word	0xe000ed04

0800e290 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800e290:	b480      	push	{r7}
 800e292:	b083      	sub	sp, #12
 800e294:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800e296:	4b05      	ldr	r3, [pc, #20]	; (800e2ac <xTaskGetTickCount+0x1c>)
 800e298:	681b      	ldr	r3, [r3, #0]
 800e29a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800e29c:	687b      	ldr	r3, [r7, #4]
}
 800e29e:	4618      	mov	r0, r3
 800e2a0:	370c      	adds	r7, #12
 800e2a2:	46bd      	mov	sp, r7
 800e2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2a8:	4770      	bx	lr
 800e2aa:	bf00      	nop
 800e2ac:	2000123c 	.word	0x2000123c

0800e2b0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800e2b0:	b580      	push	{r7, lr}
 800e2b2:	b082      	sub	sp, #8
 800e2b4:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e2b6:	f001 fb57 	bl	800f968 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800e2ba:	2300      	movs	r3, #0
 800e2bc:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800e2be:	4b04      	ldr	r3, [pc, #16]	; (800e2d0 <xTaskGetTickCountFromISR+0x20>)
 800e2c0:	681b      	ldr	r3, [r3, #0]
 800e2c2:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e2c4:	683b      	ldr	r3, [r7, #0]
}
 800e2c6:	4618      	mov	r0, r3
 800e2c8:	3708      	adds	r7, #8
 800e2ca:	46bd      	mov	sp, r7
 800e2cc:	bd80      	pop	{r7, pc}
 800e2ce:	bf00      	nop
 800e2d0:	2000123c 	.word	0x2000123c

0800e2d4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e2d4:	b580      	push	{r7, lr}
 800e2d6:	b086      	sub	sp, #24
 800e2d8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e2da:	2300      	movs	r3, #0
 800e2dc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e2de:	4b4f      	ldr	r3, [pc, #316]	; (800e41c <xTaskIncrementTick+0x148>)
 800e2e0:	681b      	ldr	r3, [r3, #0]
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	f040 808f 	bne.w	800e406 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e2e8:	4b4d      	ldr	r3, [pc, #308]	; (800e420 <xTaskIncrementTick+0x14c>)
 800e2ea:	681b      	ldr	r3, [r3, #0]
 800e2ec:	3301      	adds	r3, #1
 800e2ee:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e2f0:	4a4b      	ldr	r2, [pc, #300]	; (800e420 <xTaskIncrementTick+0x14c>)
 800e2f2:	693b      	ldr	r3, [r7, #16]
 800e2f4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e2f6:	693b      	ldr	r3, [r7, #16]
 800e2f8:	2b00      	cmp	r3, #0
 800e2fa:	d120      	bne.n	800e33e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800e2fc:	4b49      	ldr	r3, [pc, #292]	; (800e424 <xTaskIncrementTick+0x150>)
 800e2fe:	681b      	ldr	r3, [r3, #0]
 800e300:	681b      	ldr	r3, [r3, #0]
 800e302:	2b00      	cmp	r3, #0
 800e304:	d00a      	beq.n	800e31c <xTaskIncrementTick+0x48>
	__asm volatile
 800e306:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e30a:	f383 8811 	msr	BASEPRI, r3
 800e30e:	f3bf 8f6f 	isb	sy
 800e312:	f3bf 8f4f 	dsb	sy
 800e316:	603b      	str	r3, [r7, #0]
}
 800e318:	bf00      	nop
 800e31a:	e7fe      	b.n	800e31a <xTaskIncrementTick+0x46>
 800e31c:	4b41      	ldr	r3, [pc, #260]	; (800e424 <xTaskIncrementTick+0x150>)
 800e31e:	681b      	ldr	r3, [r3, #0]
 800e320:	60fb      	str	r3, [r7, #12]
 800e322:	4b41      	ldr	r3, [pc, #260]	; (800e428 <xTaskIncrementTick+0x154>)
 800e324:	681b      	ldr	r3, [r3, #0]
 800e326:	4a3f      	ldr	r2, [pc, #252]	; (800e424 <xTaskIncrementTick+0x150>)
 800e328:	6013      	str	r3, [r2, #0]
 800e32a:	4a3f      	ldr	r2, [pc, #252]	; (800e428 <xTaskIncrementTick+0x154>)
 800e32c:	68fb      	ldr	r3, [r7, #12]
 800e32e:	6013      	str	r3, [r2, #0]
 800e330:	4b3e      	ldr	r3, [pc, #248]	; (800e42c <xTaskIncrementTick+0x158>)
 800e332:	681b      	ldr	r3, [r3, #0]
 800e334:	3301      	adds	r3, #1
 800e336:	4a3d      	ldr	r2, [pc, #244]	; (800e42c <xTaskIncrementTick+0x158>)
 800e338:	6013      	str	r3, [r2, #0]
 800e33a:	f000 fb6f 	bl	800ea1c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e33e:	4b3c      	ldr	r3, [pc, #240]	; (800e430 <xTaskIncrementTick+0x15c>)
 800e340:	681b      	ldr	r3, [r3, #0]
 800e342:	693a      	ldr	r2, [r7, #16]
 800e344:	429a      	cmp	r2, r3
 800e346:	d349      	bcc.n	800e3dc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e348:	4b36      	ldr	r3, [pc, #216]	; (800e424 <xTaskIncrementTick+0x150>)
 800e34a:	681b      	ldr	r3, [r3, #0]
 800e34c:	681b      	ldr	r3, [r3, #0]
 800e34e:	2b00      	cmp	r3, #0
 800e350:	d104      	bne.n	800e35c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e352:	4b37      	ldr	r3, [pc, #220]	; (800e430 <xTaskIncrementTick+0x15c>)
 800e354:	f04f 32ff 	mov.w	r2, #4294967295
 800e358:	601a      	str	r2, [r3, #0]
					break;
 800e35a:	e03f      	b.n	800e3dc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e35c:	4b31      	ldr	r3, [pc, #196]	; (800e424 <xTaskIncrementTick+0x150>)
 800e35e:	681b      	ldr	r3, [r3, #0]
 800e360:	68db      	ldr	r3, [r3, #12]
 800e362:	68db      	ldr	r3, [r3, #12]
 800e364:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e366:	68bb      	ldr	r3, [r7, #8]
 800e368:	685b      	ldr	r3, [r3, #4]
 800e36a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e36c:	693a      	ldr	r2, [r7, #16]
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	429a      	cmp	r2, r3
 800e372:	d203      	bcs.n	800e37c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e374:	4a2e      	ldr	r2, [pc, #184]	; (800e430 <xTaskIncrementTick+0x15c>)
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e37a:	e02f      	b.n	800e3dc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e37c:	68bb      	ldr	r3, [r7, #8]
 800e37e:	3304      	adds	r3, #4
 800e380:	4618      	mov	r0, r3
 800e382:	f7fe fbed 	bl	800cb60 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e386:	68bb      	ldr	r3, [r7, #8]
 800e388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	d004      	beq.n	800e398 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e38e:	68bb      	ldr	r3, [r7, #8]
 800e390:	3318      	adds	r3, #24
 800e392:	4618      	mov	r0, r3
 800e394:	f7fe fbe4 	bl	800cb60 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e398:	68bb      	ldr	r3, [r7, #8]
 800e39a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e39c:	4b25      	ldr	r3, [pc, #148]	; (800e434 <xTaskIncrementTick+0x160>)
 800e39e:	681b      	ldr	r3, [r3, #0]
 800e3a0:	429a      	cmp	r2, r3
 800e3a2:	d903      	bls.n	800e3ac <xTaskIncrementTick+0xd8>
 800e3a4:	68bb      	ldr	r3, [r7, #8]
 800e3a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3a8:	4a22      	ldr	r2, [pc, #136]	; (800e434 <xTaskIncrementTick+0x160>)
 800e3aa:	6013      	str	r3, [r2, #0]
 800e3ac:	68bb      	ldr	r3, [r7, #8]
 800e3ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e3b0:	4613      	mov	r3, r2
 800e3b2:	009b      	lsls	r3, r3, #2
 800e3b4:	4413      	add	r3, r2
 800e3b6:	009b      	lsls	r3, r3, #2
 800e3b8:	4a1f      	ldr	r2, [pc, #124]	; (800e438 <xTaskIncrementTick+0x164>)
 800e3ba:	441a      	add	r2, r3
 800e3bc:	68bb      	ldr	r3, [r7, #8]
 800e3be:	3304      	adds	r3, #4
 800e3c0:	4619      	mov	r1, r3
 800e3c2:	4610      	mov	r0, r2
 800e3c4:	f7fe fb6f 	bl	800caa6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e3c8:	68bb      	ldr	r3, [r7, #8]
 800e3ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e3cc:	4b1b      	ldr	r3, [pc, #108]	; (800e43c <xTaskIncrementTick+0x168>)
 800e3ce:	681b      	ldr	r3, [r3, #0]
 800e3d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3d2:	429a      	cmp	r2, r3
 800e3d4:	d3b8      	bcc.n	800e348 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800e3d6:	2301      	movs	r3, #1
 800e3d8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e3da:	e7b5      	b.n	800e348 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e3dc:	4b17      	ldr	r3, [pc, #92]	; (800e43c <xTaskIncrementTick+0x168>)
 800e3de:	681b      	ldr	r3, [r3, #0]
 800e3e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e3e2:	4915      	ldr	r1, [pc, #84]	; (800e438 <xTaskIncrementTick+0x164>)
 800e3e4:	4613      	mov	r3, r2
 800e3e6:	009b      	lsls	r3, r3, #2
 800e3e8:	4413      	add	r3, r2
 800e3ea:	009b      	lsls	r3, r3, #2
 800e3ec:	440b      	add	r3, r1
 800e3ee:	681b      	ldr	r3, [r3, #0]
 800e3f0:	2b01      	cmp	r3, #1
 800e3f2:	d901      	bls.n	800e3f8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800e3f4:	2301      	movs	r3, #1
 800e3f6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800e3f8:	4b11      	ldr	r3, [pc, #68]	; (800e440 <xTaskIncrementTick+0x16c>)
 800e3fa:	681b      	ldr	r3, [r3, #0]
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	d007      	beq.n	800e410 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800e400:	2301      	movs	r3, #1
 800e402:	617b      	str	r3, [r7, #20]
 800e404:	e004      	b.n	800e410 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800e406:	4b0f      	ldr	r3, [pc, #60]	; (800e444 <xTaskIncrementTick+0x170>)
 800e408:	681b      	ldr	r3, [r3, #0]
 800e40a:	3301      	adds	r3, #1
 800e40c:	4a0d      	ldr	r2, [pc, #52]	; (800e444 <xTaskIncrementTick+0x170>)
 800e40e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800e410:	697b      	ldr	r3, [r7, #20]
}
 800e412:	4618      	mov	r0, r3
 800e414:	3718      	adds	r7, #24
 800e416:	46bd      	mov	sp, r7
 800e418:	bd80      	pop	{r7, pc}
 800e41a:	bf00      	nop
 800e41c:	20001260 	.word	0x20001260
 800e420:	2000123c 	.word	0x2000123c
 800e424:	200011f0 	.word	0x200011f0
 800e428:	200011f4 	.word	0x200011f4
 800e42c:	20001250 	.word	0x20001250
 800e430:	20001258 	.word	0x20001258
 800e434:	20001240 	.word	0x20001240
 800e438:	20000d68 	.word	0x20000d68
 800e43c:	20000d64 	.word	0x20000d64
 800e440:	2000124c 	.word	0x2000124c
 800e444:	20001248 	.word	0x20001248

0800e448 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e448:	b480      	push	{r7}
 800e44a:	b085      	sub	sp, #20
 800e44c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e44e:	4b28      	ldr	r3, [pc, #160]	; (800e4f0 <vTaskSwitchContext+0xa8>)
 800e450:	681b      	ldr	r3, [r3, #0]
 800e452:	2b00      	cmp	r3, #0
 800e454:	d003      	beq.n	800e45e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e456:	4b27      	ldr	r3, [pc, #156]	; (800e4f4 <vTaskSwitchContext+0xac>)
 800e458:	2201      	movs	r2, #1
 800e45a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e45c:	e041      	b.n	800e4e2 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800e45e:	4b25      	ldr	r3, [pc, #148]	; (800e4f4 <vTaskSwitchContext+0xac>)
 800e460:	2200      	movs	r2, #0
 800e462:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e464:	4b24      	ldr	r3, [pc, #144]	; (800e4f8 <vTaskSwitchContext+0xb0>)
 800e466:	681b      	ldr	r3, [r3, #0]
 800e468:	60fb      	str	r3, [r7, #12]
 800e46a:	e010      	b.n	800e48e <vTaskSwitchContext+0x46>
 800e46c:	68fb      	ldr	r3, [r7, #12]
 800e46e:	2b00      	cmp	r3, #0
 800e470:	d10a      	bne.n	800e488 <vTaskSwitchContext+0x40>
	__asm volatile
 800e472:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e476:	f383 8811 	msr	BASEPRI, r3
 800e47a:	f3bf 8f6f 	isb	sy
 800e47e:	f3bf 8f4f 	dsb	sy
 800e482:	607b      	str	r3, [r7, #4]
}
 800e484:	bf00      	nop
 800e486:	e7fe      	b.n	800e486 <vTaskSwitchContext+0x3e>
 800e488:	68fb      	ldr	r3, [r7, #12]
 800e48a:	3b01      	subs	r3, #1
 800e48c:	60fb      	str	r3, [r7, #12]
 800e48e:	491b      	ldr	r1, [pc, #108]	; (800e4fc <vTaskSwitchContext+0xb4>)
 800e490:	68fa      	ldr	r2, [r7, #12]
 800e492:	4613      	mov	r3, r2
 800e494:	009b      	lsls	r3, r3, #2
 800e496:	4413      	add	r3, r2
 800e498:	009b      	lsls	r3, r3, #2
 800e49a:	440b      	add	r3, r1
 800e49c:	681b      	ldr	r3, [r3, #0]
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	d0e4      	beq.n	800e46c <vTaskSwitchContext+0x24>
 800e4a2:	68fa      	ldr	r2, [r7, #12]
 800e4a4:	4613      	mov	r3, r2
 800e4a6:	009b      	lsls	r3, r3, #2
 800e4a8:	4413      	add	r3, r2
 800e4aa:	009b      	lsls	r3, r3, #2
 800e4ac:	4a13      	ldr	r2, [pc, #76]	; (800e4fc <vTaskSwitchContext+0xb4>)
 800e4ae:	4413      	add	r3, r2
 800e4b0:	60bb      	str	r3, [r7, #8]
 800e4b2:	68bb      	ldr	r3, [r7, #8]
 800e4b4:	685b      	ldr	r3, [r3, #4]
 800e4b6:	685a      	ldr	r2, [r3, #4]
 800e4b8:	68bb      	ldr	r3, [r7, #8]
 800e4ba:	605a      	str	r2, [r3, #4]
 800e4bc:	68bb      	ldr	r3, [r7, #8]
 800e4be:	685a      	ldr	r2, [r3, #4]
 800e4c0:	68bb      	ldr	r3, [r7, #8]
 800e4c2:	3308      	adds	r3, #8
 800e4c4:	429a      	cmp	r2, r3
 800e4c6:	d104      	bne.n	800e4d2 <vTaskSwitchContext+0x8a>
 800e4c8:	68bb      	ldr	r3, [r7, #8]
 800e4ca:	685b      	ldr	r3, [r3, #4]
 800e4cc:	685a      	ldr	r2, [r3, #4]
 800e4ce:	68bb      	ldr	r3, [r7, #8]
 800e4d0:	605a      	str	r2, [r3, #4]
 800e4d2:	68bb      	ldr	r3, [r7, #8]
 800e4d4:	685b      	ldr	r3, [r3, #4]
 800e4d6:	68db      	ldr	r3, [r3, #12]
 800e4d8:	4a09      	ldr	r2, [pc, #36]	; (800e500 <vTaskSwitchContext+0xb8>)
 800e4da:	6013      	str	r3, [r2, #0]
 800e4dc:	4a06      	ldr	r2, [pc, #24]	; (800e4f8 <vTaskSwitchContext+0xb0>)
 800e4de:	68fb      	ldr	r3, [r7, #12]
 800e4e0:	6013      	str	r3, [r2, #0]
}
 800e4e2:	bf00      	nop
 800e4e4:	3714      	adds	r7, #20
 800e4e6:	46bd      	mov	sp, r7
 800e4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4ec:	4770      	bx	lr
 800e4ee:	bf00      	nop
 800e4f0:	20001260 	.word	0x20001260
 800e4f4:	2000124c 	.word	0x2000124c
 800e4f8:	20001240 	.word	0x20001240
 800e4fc:	20000d68 	.word	0x20000d68
 800e500:	20000d64 	.word	0x20000d64

0800e504 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e504:	b580      	push	{r7, lr}
 800e506:	b084      	sub	sp, #16
 800e508:	af00      	add	r7, sp, #0
 800e50a:	6078      	str	r0, [r7, #4]
 800e50c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	2b00      	cmp	r3, #0
 800e512:	d10a      	bne.n	800e52a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800e514:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e518:	f383 8811 	msr	BASEPRI, r3
 800e51c:	f3bf 8f6f 	isb	sy
 800e520:	f3bf 8f4f 	dsb	sy
 800e524:	60fb      	str	r3, [r7, #12]
}
 800e526:	bf00      	nop
 800e528:	e7fe      	b.n	800e528 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e52a:	4b07      	ldr	r3, [pc, #28]	; (800e548 <vTaskPlaceOnEventList+0x44>)
 800e52c:	681b      	ldr	r3, [r3, #0]
 800e52e:	3318      	adds	r3, #24
 800e530:	4619      	mov	r1, r3
 800e532:	6878      	ldr	r0, [r7, #4]
 800e534:	f7fe fadb 	bl	800caee <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e538:	2101      	movs	r1, #1
 800e53a:	6838      	ldr	r0, [r7, #0]
 800e53c:	f000 fc40 	bl	800edc0 <prvAddCurrentTaskToDelayedList>
}
 800e540:	bf00      	nop
 800e542:	3710      	adds	r7, #16
 800e544:	46bd      	mov	sp, r7
 800e546:	bd80      	pop	{r7, pc}
 800e548:	20000d64 	.word	0x20000d64

0800e54c <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 800e54c:	b580      	push	{r7, lr}
 800e54e:	b086      	sub	sp, #24
 800e550:	af00      	add	r7, sp, #0
 800e552:	60f8      	str	r0, [r7, #12]
 800e554:	60b9      	str	r1, [r7, #8]
 800e556:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 800e558:	68fb      	ldr	r3, [r7, #12]
 800e55a:	2b00      	cmp	r3, #0
 800e55c:	d10a      	bne.n	800e574 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 800e55e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e562:	f383 8811 	msr	BASEPRI, r3
 800e566:	f3bf 8f6f 	isb	sy
 800e56a:	f3bf 8f4f 	dsb	sy
 800e56e:	617b      	str	r3, [r7, #20]
}
 800e570:	bf00      	nop
 800e572:	e7fe      	b.n	800e572 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 800e574:	4b11      	ldr	r3, [pc, #68]	; (800e5bc <vTaskPlaceOnUnorderedEventList+0x70>)
 800e576:	681b      	ldr	r3, [r3, #0]
 800e578:	2b00      	cmp	r3, #0
 800e57a:	d10a      	bne.n	800e592 <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 800e57c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e580:	f383 8811 	msr	BASEPRI, r3
 800e584:	f3bf 8f6f 	isb	sy
 800e588:	f3bf 8f4f 	dsb	sy
 800e58c:	613b      	str	r3, [r7, #16]
}
 800e58e:	bf00      	nop
 800e590:	e7fe      	b.n	800e590 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800e592:	4b0b      	ldr	r3, [pc, #44]	; (800e5c0 <vTaskPlaceOnUnorderedEventList+0x74>)
 800e594:	681b      	ldr	r3, [r3, #0]
 800e596:	68ba      	ldr	r2, [r7, #8]
 800e598:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800e59c:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e59e:	4b08      	ldr	r3, [pc, #32]	; (800e5c0 <vTaskPlaceOnUnorderedEventList+0x74>)
 800e5a0:	681b      	ldr	r3, [r3, #0]
 800e5a2:	3318      	adds	r3, #24
 800e5a4:	4619      	mov	r1, r3
 800e5a6:	68f8      	ldr	r0, [r7, #12]
 800e5a8:	f7fe fa7d 	bl	800caa6 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e5ac:	2101      	movs	r1, #1
 800e5ae:	6878      	ldr	r0, [r7, #4]
 800e5b0:	f000 fc06 	bl	800edc0 <prvAddCurrentTaskToDelayedList>
}
 800e5b4:	bf00      	nop
 800e5b6:	3718      	adds	r7, #24
 800e5b8:	46bd      	mov	sp, r7
 800e5ba:	bd80      	pop	{r7, pc}
 800e5bc:	20001260 	.word	0x20001260
 800e5c0:	20000d64 	.word	0x20000d64

0800e5c4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e5c4:	b580      	push	{r7, lr}
 800e5c6:	b086      	sub	sp, #24
 800e5c8:	af00      	add	r7, sp, #0
 800e5ca:	60f8      	str	r0, [r7, #12]
 800e5cc:	60b9      	str	r1, [r7, #8]
 800e5ce:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800e5d0:	68fb      	ldr	r3, [r7, #12]
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	d10a      	bne.n	800e5ec <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800e5d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5da:	f383 8811 	msr	BASEPRI, r3
 800e5de:	f3bf 8f6f 	isb	sy
 800e5e2:	f3bf 8f4f 	dsb	sy
 800e5e6:	617b      	str	r3, [r7, #20]
}
 800e5e8:	bf00      	nop
 800e5ea:	e7fe      	b.n	800e5ea <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e5ec:	4b0a      	ldr	r3, [pc, #40]	; (800e618 <vTaskPlaceOnEventListRestricted+0x54>)
 800e5ee:	681b      	ldr	r3, [r3, #0]
 800e5f0:	3318      	adds	r3, #24
 800e5f2:	4619      	mov	r1, r3
 800e5f4:	68f8      	ldr	r0, [r7, #12]
 800e5f6:	f7fe fa56 	bl	800caa6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	d002      	beq.n	800e606 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800e600:	f04f 33ff 	mov.w	r3, #4294967295
 800e604:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800e606:	6879      	ldr	r1, [r7, #4]
 800e608:	68b8      	ldr	r0, [r7, #8]
 800e60a:	f000 fbd9 	bl	800edc0 <prvAddCurrentTaskToDelayedList>
	}
 800e60e:	bf00      	nop
 800e610:	3718      	adds	r7, #24
 800e612:	46bd      	mov	sp, r7
 800e614:	bd80      	pop	{r7, pc}
 800e616:	bf00      	nop
 800e618:	20000d64 	.word	0x20000d64

0800e61c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e61c:	b580      	push	{r7, lr}
 800e61e:	b086      	sub	sp, #24
 800e620:	af00      	add	r7, sp, #0
 800e622:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	68db      	ldr	r3, [r3, #12]
 800e628:	68db      	ldr	r3, [r3, #12]
 800e62a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e62c:	693b      	ldr	r3, [r7, #16]
 800e62e:	2b00      	cmp	r3, #0
 800e630:	d10a      	bne.n	800e648 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800e632:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e636:	f383 8811 	msr	BASEPRI, r3
 800e63a:	f3bf 8f6f 	isb	sy
 800e63e:	f3bf 8f4f 	dsb	sy
 800e642:	60fb      	str	r3, [r7, #12]
}
 800e644:	bf00      	nop
 800e646:	e7fe      	b.n	800e646 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e648:	693b      	ldr	r3, [r7, #16]
 800e64a:	3318      	adds	r3, #24
 800e64c:	4618      	mov	r0, r3
 800e64e:	f7fe fa87 	bl	800cb60 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e652:	4b1e      	ldr	r3, [pc, #120]	; (800e6cc <xTaskRemoveFromEventList+0xb0>)
 800e654:	681b      	ldr	r3, [r3, #0]
 800e656:	2b00      	cmp	r3, #0
 800e658:	d11d      	bne.n	800e696 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e65a:	693b      	ldr	r3, [r7, #16]
 800e65c:	3304      	adds	r3, #4
 800e65e:	4618      	mov	r0, r3
 800e660:	f7fe fa7e 	bl	800cb60 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e664:	693b      	ldr	r3, [r7, #16]
 800e666:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e668:	4b19      	ldr	r3, [pc, #100]	; (800e6d0 <xTaskRemoveFromEventList+0xb4>)
 800e66a:	681b      	ldr	r3, [r3, #0]
 800e66c:	429a      	cmp	r2, r3
 800e66e:	d903      	bls.n	800e678 <xTaskRemoveFromEventList+0x5c>
 800e670:	693b      	ldr	r3, [r7, #16]
 800e672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e674:	4a16      	ldr	r2, [pc, #88]	; (800e6d0 <xTaskRemoveFromEventList+0xb4>)
 800e676:	6013      	str	r3, [r2, #0]
 800e678:	693b      	ldr	r3, [r7, #16]
 800e67a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e67c:	4613      	mov	r3, r2
 800e67e:	009b      	lsls	r3, r3, #2
 800e680:	4413      	add	r3, r2
 800e682:	009b      	lsls	r3, r3, #2
 800e684:	4a13      	ldr	r2, [pc, #76]	; (800e6d4 <xTaskRemoveFromEventList+0xb8>)
 800e686:	441a      	add	r2, r3
 800e688:	693b      	ldr	r3, [r7, #16]
 800e68a:	3304      	adds	r3, #4
 800e68c:	4619      	mov	r1, r3
 800e68e:	4610      	mov	r0, r2
 800e690:	f7fe fa09 	bl	800caa6 <vListInsertEnd>
 800e694:	e005      	b.n	800e6a2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e696:	693b      	ldr	r3, [r7, #16]
 800e698:	3318      	adds	r3, #24
 800e69a:	4619      	mov	r1, r3
 800e69c:	480e      	ldr	r0, [pc, #56]	; (800e6d8 <xTaskRemoveFromEventList+0xbc>)
 800e69e:	f7fe fa02 	bl	800caa6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e6a2:	693b      	ldr	r3, [r7, #16]
 800e6a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e6a6:	4b0d      	ldr	r3, [pc, #52]	; (800e6dc <xTaskRemoveFromEventList+0xc0>)
 800e6a8:	681b      	ldr	r3, [r3, #0]
 800e6aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6ac:	429a      	cmp	r2, r3
 800e6ae:	d905      	bls.n	800e6bc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e6b0:	2301      	movs	r3, #1
 800e6b2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e6b4:	4b0a      	ldr	r3, [pc, #40]	; (800e6e0 <xTaskRemoveFromEventList+0xc4>)
 800e6b6:	2201      	movs	r2, #1
 800e6b8:	601a      	str	r2, [r3, #0]
 800e6ba:	e001      	b.n	800e6c0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800e6bc:	2300      	movs	r3, #0
 800e6be:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e6c0:	697b      	ldr	r3, [r7, #20]
}
 800e6c2:	4618      	mov	r0, r3
 800e6c4:	3718      	adds	r7, #24
 800e6c6:	46bd      	mov	sp, r7
 800e6c8:	bd80      	pop	{r7, pc}
 800e6ca:	bf00      	nop
 800e6cc:	20001260 	.word	0x20001260
 800e6d0:	20001240 	.word	0x20001240
 800e6d4:	20000d68 	.word	0x20000d68
 800e6d8:	200011f8 	.word	0x200011f8
 800e6dc:	20000d64 	.word	0x20000d64
 800e6e0:	2000124c 	.word	0x2000124c

0800e6e4 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 800e6e4:	b580      	push	{r7, lr}
 800e6e6:	b086      	sub	sp, #24
 800e6e8:	af00      	add	r7, sp, #0
 800e6ea:	6078      	str	r0, [r7, #4]
 800e6ec:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 800e6ee:	4b29      	ldr	r3, [pc, #164]	; (800e794 <vTaskRemoveFromUnorderedEventList+0xb0>)
 800e6f0:	681b      	ldr	r3, [r3, #0]
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	d10a      	bne.n	800e70c <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 800e6f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6fa:	f383 8811 	msr	BASEPRI, r3
 800e6fe:	f3bf 8f6f 	isb	sy
 800e702:	f3bf 8f4f 	dsb	sy
 800e706:	613b      	str	r3, [r7, #16]
}
 800e708:	bf00      	nop
 800e70a:	e7fe      	b.n	800e70a <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800e70c:	683b      	ldr	r3, [r7, #0]
 800e70e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	68db      	ldr	r3, [r3, #12]
 800e71a:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 800e71c:	697b      	ldr	r3, [r7, #20]
 800e71e:	2b00      	cmp	r3, #0
 800e720:	d10a      	bne.n	800e738 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 800e722:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e726:	f383 8811 	msr	BASEPRI, r3
 800e72a:	f3bf 8f6f 	isb	sy
 800e72e:	f3bf 8f4f 	dsb	sy
 800e732:	60fb      	str	r3, [r7, #12]
}
 800e734:	bf00      	nop
 800e736:	e7fe      	b.n	800e736 <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 800e738:	6878      	ldr	r0, [r7, #4]
 800e73a:	f7fe fa11 	bl	800cb60 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e73e:	697b      	ldr	r3, [r7, #20]
 800e740:	3304      	adds	r3, #4
 800e742:	4618      	mov	r0, r3
 800e744:	f7fe fa0c 	bl	800cb60 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 800e748:	697b      	ldr	r3, [r7, #20]
 800e74a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e74c:	4b12      	ldr	r3, [pc, #72]	; (800e798 <vTaskRemoveFromUnorderedEventList+0xb4>)
 800e74e:	681b      	ldr	r3, [r3, #0]
 800e750:	429a      	cmp	r2, r3
 800e752:	d903      	bls.n	800e75c <vTaskRemoveFromUnorderedEventList+0x78>
 800e754:	697b      	ldr	r3, [r7, #20]
 800e756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e758:	4a0f      	ldr	r2, [pc, #60]	; (800e798 <vTaskRemoveFromUnorderedEventList+0xb4>)
 800e75a:	6013      	str	r3, [r2, #0]
 800e75c:	697b      	ldr	r3, [r7, #20]
 800e75e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e760:	4613      	mov	r3, r2
 800e762:	009b      	lsls	r3, r3, #2
 800e764:	4413      	add	r3, r2
 800e766:	009b      	lsls	r3, r3, #2
 800e768:	4a0c      	ldr	r2, [pc, #48]	; (800e79c <vTaskRemoveFromUnorderedEventList+0xb8>)
 800e76a:	441a      	add	r2, r3
 800e76c:	697b      	ldr	r3, [r7, #20]
 800e76e:	3304      	adds	r3, #4
 800e770:	4619      	mov	r1, r3
 800e772:	4610      	mov	r0, r2
 800e774:	f7fe f997 	bl	800caa6 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e778:	697b      	ldr	r3, [r7, #20]
 800e77a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e77c:	4b08      	ldr	r3, [pc, #32]	; (800e7a0 <vTaskRemoveFromUnorderedEventList+0xbc>)
 800e77e:	681b      	ldr	r3, [r3, #0]
 800e780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e782:	429a      	cmp	r2, r3
 800e784:	d902      	bls.n	800e78c <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 800e786:	4b07      	ldr	r3, [pc, #28]	; (800e7a4 <vTaskRemoveFromUnorderedEventList+0xc0>)
 800e788:	2201      	movs	r2, #1
 800e78a:	601a      	str	r2, [r3, #0]
	}
}
 800e78c:	bf00      	nop
 800e78e:	3718      	adds	r7, #24
 800e790:	46bd      	mov	sp, r7
 800e792:	bd80      	pop	{r7, pc}
 800e794:	20001260 	.word	0x20001260
 800e798:	20001240 	.word	0x20001240
 800e79c:	20000d68 	.word	0x20000d68
 800e7a0:	20000d64 	.word	0x20000d64
 800e7a4:	2000124c 	.word	0x2000124c

0800e7a8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e7a8:	b480      	push	{r7}
 800e7aa:	b083      	sub	sp, #12
 800e7ac:	af00      	add	r7, sp, #0
 800e7ae:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e7b0:	4b06      	ldr	r3, [pc, #24]	; (800e7cc <vTaskInternalSetTimeOutState+0x24>)
 800e7b2:	681a      	ldr	r2, [r3, #0]
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e7b8:	4b05      	ldr	r3, [pc, #20]	; (800e7d0 <vTaskInternalSetTimeOutState+0x28>)
 800e7ba:	681a      	ldr	r2, [r3, #0]
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	605a      	str	r2, [r3, #4]
}
 800e7c0:	bf00      	nop
 800e7c2:	370c      	adds	r7, #12
 800e7c4:	46bd      	mov	sp, r7
 800e7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7ca:	4770      	bx	lr
 800e7cc:	20001250 	.word	0x20001250
 800e7d0:	2000123c 	.word	0x2000123c

0800e7d4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e7d4:	b580      	push	{r7, lr}
 800e7d6:	b088      	sub	sp, #32
 800e7d8:	af00      	add	r7, sp, #0
 800e7da:	6078      	str	r0, [r7, #4]
 800e7dc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	2b00      	cmp	r3, #0
 800e7e2:	d10a      	bne.n	800e7fa <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800e7e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7e8:	f383 8811 	msr	BASEPRI, r3
 800e7ec:	f3bf 8f6f 	isb	sy
 800e7f0:	f3bf 8f4f 	dsb	sy
 800e7f4:	613b      	str	r3, [r7, #16]
}
 800e7f6:	bf00      	nop
 800e7f8:	e7fe      	b.n	800e7f8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800e7fa:	683b      	ldr	r3, [r7, #0]
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	d10a      	bne.n	800e816 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800e800:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e804:	f383 8811 	msr	BASEPRI, r3
 800e808:	f3bf 8f6f 	isb	sy
 800e80c:	f3bf 8f4f 	dsb	sy
 800e810:	60fb      	str	r3, [r7, #12]
}
 800e812:	bf00      	nop
 800e814:	e7fe      	b.n	800e814 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800e816:	f000 ffc5 	bl	800f7a4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e81a:	4b1d      	ldr	r3, [pc, #116]	; (800e890 <xTaskCheckForTimeOut+0xbc>)
 800e81c:	681b      	ldr	r3, [r3, #0]
 800e81e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	685b      	ldr	r3, [r3, #4]
 800e824:	69ba      	ldr	r2, [r7, #24]
 800e826:	1ad3      	subs	r3, r2, r3
 800e828:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e82a:	683b      	ldr	r3, [r7, #0]
 800e82c:	681b      	ldr	r3, [r3, #0]
 800e82e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e832:	d102      	bne.n	800e83a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e834:	2300      	movs	r3, #0
 800e836:	61fb      	str	r3, [r7, #28]
 800e838:	e023      	b.n	800e882 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	681a      	ldr	r2, [r3, #0]
 800e83e:	4b15      	ldr	r3, [pc, #84]	; (800e894 <xTaskCheckForTimeOut+0xc0>)
 800e840:	681b      	ldr	r3, [r3, #0]
 800e842:	429a      	cmp	r2, r3
 800e844:	d007      	beq.n	800e856 <xTaskCheckForTimeOut+0x82>
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	685b      	ldr	r3, [r3, #4]
 800e84a:	69ba      	ldr	r2, [r7, #24]
 800e84c:	429a      	cmp	r2, r3
 800e84e:	d302      	bcc.n	800e856 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e850:	2301      	movs	r3, #1
 800e852:	61fb      	str	r3, [r7, #28]
 800e854:	e015      	b.n	800e882 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e856:	683b      	ldr	r3, [r7, #0]
 800e858:	681b      	ldr	r3, [r3, #0]
 800e85a:	697a      	ldr	r2, [r7, #20]
 800e85c:	429a      	cmp	r2, r3
 800e85e:	d20b      	bcs.n	800e878 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e860:	683b      	ldr	r3, [r7, #0]
 800e862:	681a      	ldr	r2, [r3, #0]
 800e864:	697b      	ldr	r3, [r7, #20]
 800e866:	1ad2      	subs	r2, r2, r3
 800e868:	683b      	ldr	r3, [r7, #0]
 800e86a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e86c:	6878      	ldr	r0, [r7, #4]
 800e86e:	f7ff ff9b 	bl	800e7a8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e872:	2300      	movs	r3, #0
 800e874:	61fb      	str	r3, [r7, #28]
 800e876:	e004      	b.n	800e882 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800e878:	683b      	ldr	r3, [r7, #0]
 800e87a:	2200      	movs	r2, #0
 800e87c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e87e:	2301      	movs	r3, #1
 800e880:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e882:	f000 ffbf 	bl	800f804 <vPortExitCritical>

	return xReturn;
 800e886:	69fb      	ldr	r3, [r7, #28]
}
 800e888:	4618      	mov	r0, r3
 800e88a:	3720      	adds	r7, #32
 800e88c:	46bd      	mov	sp, r7
 800e88e:	bd80      	pop	{r7, pc}
 800e890:	2000123c 	.word	0x2000123c
 800e894:	20001250 	.word	0x20001250

0800e898 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e898:	b480      	push	{r7}
 800e89a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e89c:	4b03      	ldr	r3, [pc, #12]	; (800e8ac <vTaskMissedYield+0x14>)
 800e89e:	2201      	movs	r2, #1
 800e8a0:	601a      	str	r2, [r3, #0]
}
 800e8a2:	bf00      	nop
 800e8a4:	46bd      	mov	sp, r7
 800e8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8aa:	4770      	bx	lr
 800e8ac:	2000124c 	.word	0x2000124c

0800e8b0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e8b0:	b580      	push	{r7, lr}
 800e8b2:	b082      	sub	sp, #8
 800e8b4:	af00      	add	r7, sp, #0
 800e8b6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e8b8:	f000 f852 	bl	800e960 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e8bc:	4b06      	ldr	r3, [pc, #24]	; (800e8d8 <prvIdleTask+0x28>)
 800e8be:	681b      	ldr	r3, [r3, #0]
 800e8c0:	2b01      	cmp	r3, #1
 800e8c2:	d9f9      	bls.n	800e8b8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800e8c4:	4b05      	ldr	r3, [pc, #20]	; (800e8dc <prvIdleTask+0x2c>)
 800e8c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e8ca:	601a      	str	r2, [r3, #0]
 800e8cc:	f3bf 8f4f 	dsb	sy
 800e8d0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e8d4:	e7f0      	b.n	800e8b8 <prvIdleTask+0x8>
 800e8d6:	bf00      	nop
 800e8d8:	20000d68 	.word	0x20000d68
 800e8dc:	e000ed04 	.word	0xe000ed04

0800e8e0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e8e0:	b580      	push	{r7, lr}
 800e8e2:	b082      	sub	sp, #8
 800e8e4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e8e6:	2300      	movs	r3, #0
 800e8e8:	607b      	str	r3, [r7, #4]
 800e8ea:	e00c      	b.n	800e906 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e8ec:	687a      	ldr	r2, [r7, #4]
 800e8ee:	4613      	mov	r3, r2
 800e8f0:	009b      	lsls	r3, r3, #2
 800e8f2:	4413      	add	r3, r2
 800e8f4:	009b      	lsls	r3, r3, #2
 800e8f6:	4a12      	ldr	r2, [pc, #72]	; (800e940 <prvInitialiseTaskLists+0x60>)
 800e8f8:	4413      	add	r3, r2
 800e8fa:	4618      	mov	r0, r3
 800e8fc:	f7fe f8a6 	bl	800ca4c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	3301      	adds	r3, #1
 800e904:	607b      	str	r3, [r7, #4]
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	2b37      	cmp	r3, #55	; 0x37
 800e90a:	d9ef      	bls.n	800e8ec <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e90c:	480d      	ldr	r0, [pc, #52]	; (800e944 <prvInitialiseTaskLists+0x64>)
 800e90e:	f7fe f89d 	bl	800ca4c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e912:	480d      	ldr	r0, [pc, #52]	; (800e948 <prvInitialiseTaskLists+0x68>)
 800e914:	f7fe f89a 	bl	800ca4c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e918:	480c      	ldr	r0, [pc, #48]	; (800e94c <prvInitialiseTaskLists+0x6c>)
 800e91a:	f7fe f897 	bl	800ca4c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e91e:	480c      	ldr	r0, [pc, #48]	; (800e950 <prvInitialiseTaskLists+0x70>)
 800e920:	f7fe f894 	bl	800ca4c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e924:	480b      	ldr	r0, [pc, #44]	; (800e954 <prvInitialiseTaskLists+0x74>)
 800e926:	f7fe f891 	bl	800ca4c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e92a:	4b0b      	ldr	r3, [pc, #44]	; (800e958 <prvInitialiseTaskLists+0x78>)
 800e92c:	4a05      	ldr	r2, [pc, #20]	; (800e944 <prvInitialiseTaskLists+0x64>)
 800e92e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e930:	4b0a      	ldr	r3, [pc, #40]	; (800e95c <prvInitialiseTaskLists+0x7c>)
 800e932:	4a05      	ldr	r2, [pc, #20]	; (800e948 <prvInitialiseTaskLists+0x68>)
 800e934:	601a      	str	r2, [r3, #0]
}
 800e936:	bf00      	nop
 800e938:	3708      	adds	r7, #8
 800e93a:	46bd      	mov	sp, r7
 800e93c:	bd80      	pop	{r7, pc}
 800e93e:	bf00      	nop
 800e940:	20000d68 	.word	0x20000d68
 800e944:	200011c8 	.word	0x200011c8
 800e948:	200011dc 	.word	0x200011dc
 800e94c:	200011f8 	.word	0x200011f8
 800e950:	2000120c 	.word	0x2000120c
 800e954:	20001224 	.word	0x20001224
 800e958:	200011f0 	.word	0x200011f0
 800e95c:	200011f4 	.word	0x200011f4

0800e960 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e960:	b580      	push	{r7, lr}
 800e962:	b082      	sub	sp, #8
 800e964:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e966:	e019      	b.n	800e99c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e968:	f000 ff1c 	bl	800f7a4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e96c:	4b10      	ldr	r3, [pc, #64]	; (800e9b0 <prvCheckTasksWaitingTermination+0x50>)
 800e96e:	68db      	ldr	r3, [r3, #12]
 800e970:	68db      	ldr	r3, [r3, #12]
 800e972:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	3304      	adds	r3, #4
 800e978:	4618      	mov	r0, r3
 800e97a:	f7fe f8f1 	bl	800cb60 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e97e:	4b0d      	ldr	r3, [pc, #52]	; (800e9b4 <prvCheckTasksWaitingTermination+0x54>)
 800e980:	681b      	ldr	r3, [r3, #0]
 800e982:	3b01      	subs	r3, #1
 800e984:	4a0b      	ldr	r2, [pc, #44]	; (800e9b4 <prvCheckTasksWaitingTermination+0x54>)
 800e986:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e988:	4b0b      	ldr	r3, [pc, #44]	; (800e9b8 <prvCheckTasksWaitingTermination+0x58>)
 800e98a:	681b      	ldr	r3, [r3, #0]
 800e98c:	3b01      	subs	r3, #1
 800e98e:	4a0a      	ldr	r2, [pc, #40]	; (800e9b8 <prvCheckTasksWaitingTermination+0x58>)
 800e990:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e992:	f000 ff37 	bl	800f804 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e996:	6878      	ldr	r0, [r7, #4]
 800e998:	f000 f810 	bl	800e9bc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e99c:	4b06      	ldr	r3, [pc, #24]	; (800e9b8 <prvCheckTasksWaitingTermination+0x58>)
 800e99e:	681b      	ldr	r3, [r3, #0]
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	d1e1      	bne.n	800e968 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e9a4:	bf00      	nop
 800e9a6:	bf00      	nop
 800e9a8:	3708      	adds	r7, #8
 800e9aa:	46bd      	mov	sp, r7
 800e9ac:	bd80      	pop	{r7, pc}
 800e9ae:	bf00      	nop
 800e9b0:	2000120c 	.word	0x2000120c
 800e9b4:	20001238 	.word	0x20001238
 800e9b8:	20001220 	.word	0x20001220

0800e9bc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e9bc:	b580      	push	{r7, lr}
 800e9be:	b084      	sub	sp, #16
 800e9c0:	af00      	add	r7, sp, #0
 800e9c2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800e9ca:	2b00      	cmp	r3, #0
 800e9cc:	d108      	bne.n	800e9e0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e9d2:	4618      	mov	r0, r3
 800e9d4:	f001 f8d4 	bl	800fb80 <vPortFree>
				vPortFree( pxTCB );
 800e9d8:	6878      	ldr	r0, [r7, #4]
 800e9da:	f001 f8d1 	bl	800fb80 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e9de:	e018      	b.n	800ea12 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800e9e6:	2b01      	cmp	r3, #1
 800e9e8:	d103      	bne.n	800e9f2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800e9ea:	6878      	ldr	r0, [r7, #4]
 800e9ec:	f001 f8c8 	bl	800fb80 <vPortFree>
	}
 800e9f0:	e00f      	b.n	800ea12 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800e9f8:	2b02      	cmp	r3, #2
 800e9fa:	d00a      	beq.n	800ea12 <prvDeleteTCB+0x56>
	__asm volatile
 800e9fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea00:	f383 8811 	msr	BASEPRI, r3
 800ea04:	f3bf 8f6f 	isb	sy
 800ea08:	f3bf 8f4f 	dsb	sy
 800ea0c:	60fb      	str	r3, [r7, #12]
}
 800ea0e:	bf00      	nop
 800ea10:	e7fe      	b.n	800ea10 <prvDeleteTCB+0x54>
	}
 800ea12:	bf00      	nop
 800ea14:	3710      	adds	r7, #16
 800ea16:	46bd      	mov	sp, r7
 800ea18:	bd80      	pop	{r7, pc}
	...

0800ea1c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ea1c:	b480      	push	{r7}
 800ea1e:	b083      	sub	sp, #12
 800ea20:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ea22:	4b0c      	ldr	r3, [pc, #48]	; (800ea54 <prvResetNextTaskUnblockTime+0x38>)
 800ea24:	681b      	ldr	r3, [r3, #0]
 800ea26:	681b      	ldr	r3, [r3, #0]
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	d104      	bne.n	800ea36 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ea2c:	4b0a      	ldr	r3, [pc, #40]	; (800ea58 <prvResetNextTaskUnblockTime+0x3c>)
 800ea2e:	f04f 32ff 	mov.w	r2, #4294967295
 800ea32:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ea34:	e008      	b.n	800ea48 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ea36:	4b07      	ldr	r3, [pc, #28]	; (800ea54 <prvResetNextTaskUnblockTime+0x38>)
 800ea38:	681b      	ldr	r3, [r3, #0]
 800ea3a:	68db      	ldr	r3, [r3, #12]
 800ea3c:	68db      	ldr	r3, [r3, #12]
 800ea3e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	685b      	ldr	r3, [r3, #4]
 800ea44:	4a04      	ldr	r2, [pc, #16]	; (800ea58 <prvResetNextTaskUnblockTime+0x3c>)
 800ea46:	6013      	str	r3, [r2, #0]
}
 800ea48:	bf00      	nop
 800ea4a:	370c      	adds	r7, #12
 800ea4c:	46bd      	mov	sp, r7
 800ea4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea52:	4770      	bx	lr
 800ea54:	200011f0 	.word	0x200011f0
 800ea58:	20001258 	.word	0x20001258

0800ea5c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800ea5c:	b480      	push	{r7}
 800ea5e:	b083      	sub	sp, #12
 800ea60:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800ea62:	4b05      	ldr	r3, [pc, #20]	; (800ea78 <xTaskGetCurrentTaskHandle+0x1c>)
 800ea64:	681b      	ldr	r3, [r3, #0]
 800ea66:	607b      	str	r3, [r7, #4]

		return xReturn;
 800ea68:	687b      	ldr	r3, [r7, #4]
	}
 800ea6a:	4618      	mov	r0, r3
 800ea6c:	370c      	adds	r7, #12
 800ea6e:	46bd      	mov	sp, r7
 800ea70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea74:	4770      	bx	lr
 800ea76:	bf00      	nop
 800ea78:	20000d64 	.word	0x20000d64

0800ea7c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ea7c:	b480      	push	{r7}
 800ea7e:	b083      	sub	sp, #12
 800ea80:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ea82:	4b0b      	ldr	r3, [pc, #44]	; (800eab0 <xTaskGetSchedulerState+0x34>)
 800ea84:	681b      	ldr	r3, [r3, #0]
 800ea86:	2b00      	cmp	r3, #0
 800ea88:	d102      	bne.n	800ea90 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ea8a:	2301      	movs	r3, #1
 800ea8c:	607b      	str	r3, [r7, #4]
 800ea8e:	e008      	b.n	800eaa2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ea90:	4b08      	ldr	r3, [pc, #32]	; (800eab4 <xTaskGetSchedulerState+0x38>)
 800ea92:	681b      	ldr	r3, [r3, #0]
 800ea94:	2b00      	cmp	r3, #0
 800ea96:	d102      	bne.n	800ea9e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ea98:	2302      	movs	r3, #2
 800ea9a:	607b      	str	r3, [r7, #4]
 800ea9c:	e001      	b.n	800eaa2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ea9e:	2300      	movs	r3, #0
 800eaa0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800eaa2:	687b      	ldr	r3, [r7, #4]
	}
 800eaa4:	4618      	mov	r0, r3
 800eaa6:	370c      	adds	r7, #12
 800eaa8:	46bd      	mov	sp, r7
 800eaaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaae:	4770      	bx	lr
 800eab0:	20001244 	.word	0x20001244
 800eab4:	20001260 	.word	0x20001260

0800eab8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800eab8:	b580      	push	{r7, lr}
 800eaba:	b084      	sub	sp, #16
 800eabc:	af00      	add	r7, sp, #0
 800eabe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800eac4:	2300      	movs	r3, #0
 800eac6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	2b00      	cmp	r3, #0
 800eacc:	d051      	beq.n	800eb72 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800eace:	68bb      	ldr	r3, [r7, #8]
 800ead0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ead2:	4b2a      	ldr	r3, [pc, #168]	; (800eb7c <xTaskPriorityInherit+0xc4>)
 800ead4:	681b      	ldr	r3, [r3, #0]
 800ead6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ead8:	429a      	cmp	r2, r3
 800eada:	d241      	bcs.n	800eb60 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800eadc:	68bb      	ldr	r3, [r7, #8]
 800eade:	699b      	ldr	r3, [r3, #24]
 800eae0:	2b00      	cmp	r3, #0
 800eae2:	db06      	blt.n	800eaf2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800eae4:	4b25      	ldr	r3, [pc, #148]	; (800eb7c <xTaskPriorityInherit+0xc4>)
 800eae6:	681b      	ldr	r3, [r3, #0]
 800eae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eaea:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800eaee:	68bb      	ldr	r3, [r7, #8]
 800eaf0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800eaf2:	68bb      	ldr	r3, [r7, #8]
 800eaf4:	6959      	ldr	r1, [r3, #20]
 800eaf6:	68bb      	ldr	r3, [r7, #8]
 800eaf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eafa:	4613      	mov	r3, r2
 800eafc:	009b      	lsls	r3, r3, #2
 800eafe:	4413      	add	r3, r2
 800eb00:	009b      	lsls	r3, r3, #2
 800eb02:	4a1f      	ldr	r2, [pc, #124]	; (800eb80 <xTaskPriorityInherit+0xc8>)
 800eb04:	4413      	add	r3, r2
 800eb06:	4299      	cmp	r1, r3
 800eb08:	d122      	bne.n	800eb50 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800eb0a:	68bb      	ldr	r3, [r7, #8]
 800eb0c:	3304      	adds	r3, #4
 800eb0e:	4618      	mov	r0, r3
 800eb10:	f7fe f826 	bl	800cb60 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800eb14:	4b19      	ldr	r3, [pc, #100]	; (800eb7c <xTaskPriorityInherit+0xc4>)
 800eb16:	681b      	ldr	r3, [r3, #0]
 800eb18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb1a:	68bb      	ldr	r3, [r7, #8]
 800eb1c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800eb1e:	68bb      	ldr	r3, [r7, #8]
 800eb20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb22:	4b18      	ldr	r3, [pc, #96]	; (800eb84 <xTaskPriorityInherit+0xcc>)
 800eb24:	681b      	ldr	r3, [r3, #0]
 800eb26:	429a      	cmp	r2, r3
 800eb28:	d903      	bls.n	800eb32 <xTaskPriorityInherit+0x7a>
 800eb2a:	68bb      	ldr	r3, [r7, #8]
 800eb2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb2e:	4a15      	ldr	r2, [pc, #84]	; (800eb84 <xTaskPriorityInherit+0xcc>)
 800eb30:	6013      	str	r3, [r2, #0]
 800eb32:	68bb      	ldr	r3, [r7, #8]
 800eb34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb36:	4613      	mov	r3, r2
 800eb38:	009b      	lsls	r3, r3, #2
 800eb3a:	4413      	add	r3, r2
 800eb3c:	009b      	lsls	r3, r3, #2
 800eb3e:	4a10      	ldr	r2, [pc, #64]	; (800eb80 <xTaskPriorityInherit+0xc8>)
 800eb40:	441a      	add	r2, r3
 800eb42:	68bb      	ldr	r3, [r7, #8]
 800eb44:	3304      	adds	r3, #4
 800eb46:	4619      	mov	r1, r3
 800eb48:	4610      	mov	r0, r2
 800eb4a:	f7fd ffac 	bl	800caa6 <vListInsertEnd>
 800eb4e:	e004      	b.n	800eb5a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800eb50:	4b0a      	ldr	r3, [pc, #40]	; (800eb7c <xTaskPriorityInherit+0xc4>)
 800eb52:	681b      	ldr	r3, [r3, #0]
 800eb54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb56:	68bb      	ldr	r3, [r7, #8]
 800eb58:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800eb5a:	2301      	movs	r3, #1
 800eb5c:	60fb      	str	r3, [r7, #12]
 800eb5e:	e008      	b.n	800eb72 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800eb60:	68bb      	ldr	r3, [r7, #8]
 800eb62:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800eb64:	4b05      	ldr	r3, [pc, #20]	; (800eb7c <xTaskPriorityInherit+0xc4>)
 800eb66:	681b      	ldr	r3, [r3, #0]
 800eb68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb6a:	429a      	cmp	r2, r3
 800eb6c:	d201      	bcs.n	800eb72 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800eb6e:	2301      	movs	r3, #1
 800eb70:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800eb72:	68fb      	ldr	r3, [r7, #12]
	}
 800eb74:	4618      	mov	r0, r3
 800eb76:	3710      	adds	r7, #16
 800eb78:	46bd      	mov	sp, r7
 800eb7a:	bd80      	pop	{r7, pc}
 800eb7c:	20000d64 	.word	0x20000d64
 800eb80:	20000d68 	.word	0x20000d68
 800eb84:	20001240 	.word	0x20001240

0800eb88 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800eb88:	b580      	push	{r7, lr}
 800eb8a:	b086      	sub	sp, #24
 800eb8c:	af00      	add	r7, sp, #0
 800eb8e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800eb94:	2300      	movs	r3, #0
 800eb96:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	2b00      	cmp	r3, #0
 800eb9c:	d056      	beq.n	800ec4c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800eb9e:	4b2e      	ldr	r3, [pc, #184]	; (800ec58 <xTaskPriorityDisinherit+0xd0>)
 800eba0:	681b      	ldr	r3, [r3, #0]
 800eba2:	693a      	ldr	r2, [r7, #16]
 800eba4:	429a      	cmp	r2, r3
 800eba6:	d00a      	beq.n	800ebbe <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800eba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebac:	f383 8811 	msr	BASEPRI, r3
 800ebb0:	f3bf 8f6f 	isb	sy
 800ebb4:	f3bf 8f4f 	dsb	sy
 800ebb8:	60fb      	str	r3, [r7, #12]
}
 800ebba:	bf00      	nop
 800ebbc:	e7fe      	b.n	800ebbc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800ebbe:	693b      	ldr	r3, [r7, #16]
 800ebc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ebc2:	2b00      	cmp	r3, #0
 800ebc4:	d10a      	bne.n	800ebdc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800ebc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebca:	f383 8811 	msr	BASEPRI, r3
 800ebce:	f3bf 8f6f 	isb	sy
 800ebd2:	f3bf 8f4f 	dsb	sy
 800ebd6:	60bb      	str	r3, [r7, #8]
}
 800ebd8:	bf00      	nop
 800ebda:	e7fe      	b.n	800ebda <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800ebdc:	693b      	ldr	r3, [r7, #16]
 800ebde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ebe0:	1e5a      	subs	r2, r3, #1
 800ebe2:	693b      	ldr	r3, [r7, #16]
 800ebe4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ebe6:	693b      	ldr	r3, [r7, #16]
 800ebe8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ebea:	693b      	ldr	r3, [r7, #16]
 800ebec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ebee:	429a      	cmp	r2, r3
 800ebf0:	d02c      	beq.n	800ec4c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ebf2:	693b      	ldr	r3, [r7, #16]
 800ebf4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ebf6:	2b00      	cmp	r3, #0
 800ebf8:	d128      	bne.n	800ec4c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ebfa:	693b      	ldr	r3, [r7, #16]
 800ebfc:	3304      	adds	r3, #4
 800ebfe:	4618      	mov	r0, r3
 800ec00:	f7fd ffae 	bl	800cb60 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ec04:	693b      	ldr	r3, [r7, #16]
 800ec06:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ec08:	693b      	ldr	r3, [r7, #16]
 800ec0a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ec0c:	693b      	ldr	r3, [r7, #16]
 800ec0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec10:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ec14:	693b      	ldr	r3, [r7, #16]
 800ec16:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ec18:	693b      	ldr	r3, [r7, #16]
 800ec1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec1c:	4b0f      	ldr	r3, [pc, #60]	; (800ec5c <xTaskPriorityDisinherit+0xd4>)
 800ec1e:	681b      	ldr	r3, [r3, #0]
 800ec20:	429a      	cmp	r2, r3
 800ec22:	d903      	bls.n	800ec2c <xTaskPriorityDisinherit+0xa4>
 800ec24:	693b      	ldr	r3, [r7, #16]
 800ec26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec28:	4a0c      	ldr	r2, [pc, #48]	; (800ec5c <xTaskPriorityDisinherit+0xd4>)
 800ec2a:	6013      	str	r3, [r2, #0]
 800ec2c:	693b      	ldr	r3, [r7, #16]
 800ec2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec30:	4613      	mov	r3, r2
 800ec32:	009b      	lsls	r3, r3, #2
 800ec34:	4413      	add	r3, r2
 800ec36:	009b      	lsls	r3, r3, #2
 800ec38:	4a09      	ldr	r2, [pc, #36]	; (800ec60 <xTaskPriorityDisinherit+0xd8>)
 800ec3a:	441a      	add	r2, r3
 800ec3c:	693b      	ldr	r3, [r7, #16]
 800ec3e:	3304      	adds	r3, #4
 800ec40:	4619      	mov	r1, r3
 800ec42:	4610      	mov	r0, r2
 800ec44:	f7fd ff2f 	bl	800caa6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ec48:	2301      	movs	r3, #1
 800ec4a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ec4c:	697b      	ldr	r3, [r7, #20]
	}
 800ec4e:	4618      	mov	r0, r3
 800ec50:	3718      	adds	r7, #24
 800ec52:	46bd      	mov	sp, r7
 800ec54:	bd80      	pop	{r7, pc}
 800ec56:	bf00      	nop
 800ec58:	20000d64 	.word	0x20000d64
 800ec5c:	20001240 	.word	0x20001240
 800ec60:	20000d68 	.word	0x20000d68

0800ec64 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800ec64:	b580      	push	{r7, lr}
 800ec66:	b088      	sub	sp, #32
 800ec68:	af00      	add	r7, sp, #0
 800ec6a:	6078      	str	r0, [r7, #4]
 800ec6c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800ec72:	2301      	movs	r3, #1
 800ec74:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	d06a      	beq.n	800ed52 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800ec7c:	69bb      	ldr	r3, [r7, #24]
 800ec7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ec80:	2b00      	cmp	r3, #0
 800ec82:	d10a      	bne.n	800ec9a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800ec84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec88:	f383 8811 	msr	BASEPRI, r3
 800ec8c:	f3bf 8f6f 	isb	sy
 800ec90:	f3bf 8f4f 	dsb	sy
 800ec94:	60fb      	str	r3, [r7, #12]
}
 800ec96:	bf00      	nop
 800ec98:	e7fe      	b.n	800ec98 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800ec9a:	69bb      	ldr	r3, [r7, #24]
 800ec9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ec9e:	683a      	ldr	r2, [r7, #0]
 800eca0:	429a      	cmp	r2, r3
 800eca2:	d902      	bls.n	800ecaa <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800eca4:	683b      	ldr	r3, [r7, #0]
 800eca6:	61fb      	str	r3, [r7, #28]
 800eca8:	e002      	b.n	800ecb0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800ecaa:	69bb      	ldr	r3, [r7, #24]
 800ecac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ecae:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800ecb0:	69bb      	ldr	r3, [r7, #24]
 800ecb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ecb4:	69fa      	ldr	r2, [r7, #28]
 800ecb6:	429a      	cmp	r2, r3
 800ecb8:	d04b      	beq.n	800ed52 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800ecba:	69bb      	ldr	r3, [r7, #24]
 800ecbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ecbe:	697a      	ldr	r2, [r7, #20]
 800ecc0:	429a      	cmp	r2, r3
 800ecc2:	d146      	bne.n	800ed52 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800ecc4:	4b25      	ldr	r3, [pc, #148]	; (800ed5c <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800ecc6:	681b      	ldr	r3, [r3, #0]
 800ecc8:	69ba      	ldr	r2, [r7, #24]
 800ecca:	429a      	cmp	r2, r3
 800eccc:	d10a      	bne.n	800ece4 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800ecce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecd2:	f383 8811 	msr	BASEPRI, r3
 800ecd6:	f3bf 8f6f 	isb	sy
 800ecda:	f3bf 8f4f 	dsb	sy
 800ecde:	60bb      	str	r3, [r7, #8]
}
 800ece0:	bf00      	nop
 800ece2:	e7fe      	b.n	800ece2 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800ece4:	69bb      	ldr	r3, [r7, #24]
 800ece6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ece8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800ecea:	69bb      	ldr	r3, [r7, #24]
 800ecec:	69fa      	ldr	r2, [r7, #28]
 800ecee:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ecf0:	69bb      	ldr	r3, [r7, #24]
 800ecf2:	699b      	ldr	r3, [r3, #24]
 800ecf4:	2b00      	cmp	r3, #0
 800ecf6:	db04      	blt.n	800ed02 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ecf8:	69fb      	ldr	r3, [r7, #28]
 800ecfa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ecfe:	69bb      	ldr	r3, [r7, #24]
 800ed00:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ed02:	69bb      	ldr	r3, [r7, #24]
 800ed04:	6959      	ldr	r1, [r3, #20]
 800ed06:	693a      	ldr	r2, [r7, #16]
 800ed08:	4613      	mov	r3, r2
 800ed0a:	009b      	lsls	r3, r3, #2
 800ed0c:	4413      	add	r3, r2
 800ed0e:	009b      	lsls	r3, r3, #2
 800ed10:	4a13      	ldr	r2, [pc, #76]	; (800ed60 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800ed12:	4413      	add	r3, r2
 800ed14:	4299      	cmp	r1, r3
 800ed16:	d11c      	bne.n	800ed52 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ed18:	69bb      	ldr	r3, [r7, #24]
 800ed1a:	3304      	adds	r3, #4
 800ed1c:	4618      	mov	r0, r3
 800ed1e:	f7fd ff1f 	bl	800cb60 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800ed22:	69bb      	ldr	r3, [r7, #24]
 800ed24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed26:	4b0f      	ldr	r3, [pc, #60]	; (800ed64 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800ed28:	681b      	ldr	r3, [r3, #0]
 800ed2a:	429a      	cmp	r2, r3
 800ed2c:	d903      	bls.n	800ed36 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800ed2e:	69bb      	ldr	r3, [r7, #24]
 800ed30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed32:	4a0c      	ldr	r2, [pc, #48]	; (800ed64 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800ed34:	6013      	str	r3, [r2, #0]
 800ed36:	69bb      	ldr	r3, [r7, #24]
 800ed38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed3a:	4613      	mov	r3, r2
 800ed3c:	009b      	lsls	r3, r3, #2
 800ed3e:	4413      	add	r3, r2
 800ed40:	009b      	lsls	r3, r3, #2
 800ed42:	4a07      	ldr	r2, [pc, #28]	; (800ed60 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800ed44:	441a      	add	r2, r3
 800ed46:	69bb      	ldr	r3, [r7, #24]
 800ed48:	3304      	adds	r3, #4
 800ed4a:	4619      	mov	r1, r3
 800ed4c:	4610      	mov	r0, r2
 800ed4e:	f7fd feaa 	bl	800caa6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ed52:	bf00      	nop
 800ed54:	3720      	adds	r7, #32
 800ed56:	46bd      	mov	sp, r7
 800ed58:	bd80      	pop	{r7, pc}
 800ed5a:	bf00      	nop
 800ed5c:	20000d64 	.word	0x20000d64
 800ed60:	20000d68 	.word	0x20000d68
 800ed64:	20001240 	.word	0x20001240

0800ed68 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 800ed68:	b480      	push	{r7}
 800ed6a:	b083      	sub	sp, #12
 800ed6c:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800ed6e:	4b09      	ldr	r3, [pc, #36]	; (800ed94 <uxTaskResetEventItemValue+0x2c>)
 800ed70:	681b      	ldr	r3, [r3, #0]
 800ed72:	699b      	ldr	r3, [r3, #24]
 800ed74:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ed76:	4b07      	ldr	r3, [pc, #28]	; (800ed94 <uxTaskResetEventItemValue+0x2c>)
 800ed78:	681b      	ldr	r3, [r3, #0]
 800ed7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed7c:	4b05      	ldr	r3, [pc, #20]	; (800ed94 <uxTaskResetEventItemValue+0x2c>)
 800ed7e:	681b      	ldr	r3, [r3, #0]
 800ed80:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 800ed84:	619a      	str	r2, [r3, #24]

	return uxReturn;
 800ed86:	687b      	ldr	r3, [r7, #4]
}
 800ed88:	4618      	mov	r0, r3
 800ed8a:	370c      	adds	r7, #12
 800ed8c:	46bd      	mov	sp, r7
 800ed8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed92:	4770      	bx	lr
 800ed94:	20000d64 	.word	0x20000d64

0800ed98 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800ed98:	b480      	push	{r7}
 800ed9a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800ed9c:	4b07      	ldr	r3, [pc, #28]	; (800edbc <pvTaskIncrementMutexHeldCount+0x24>)
 800ed9e:	681b      	ldr	r3, [r3, #0]
 800eda0:	2b00      	cmp	r3, #0
 800eda2:	d004      	beq.n	800edae <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800eda4:	4b05      	ldr	r3, [pc, #20]	; (800edbc <pvTaskIncrementMutexHeldCount+0x24>)
 800eda6:	681b      	ldr	r3, [r3, #0]
 800eda8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800edaa:	3201      	adds	r2, #1
 800edac:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800edae:	4b03      	ldr	r3, [pc, #12]	; (800edbc <pvTaskIncrementMutexHeldCount+0x24>)
 800edb0:	681b      	ldr	r3, [r3, #0]
	}
 800edb2:	4618      	mov	r0, r3
 800edb4:	46bd      	mov	sp, r7
 800edb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edba:	4770      	bx	lr
 800edbc:	20000d64 	.word	0x20000d64

0800edc0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800edc0:	b580      	push	{r7, lr}
 800edc2:	b084      	sub	sp, #16
 800edc4:	af00      	add	r7, sp, #0
 800edc6:	6078      	str	r0, [r7, #4]
 800edc8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800edca:	4b21      	ldr	r3, [pc, #132]	; (800ee50 <prvAddCurrentTaskToDelayedList+0x90>)
 800edcc:	681b      	ldr	r3, [r3, #0]
 800edce:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800edd0:	4b20      	ldr	r3, [pc, #128]	; (800ee54 <prvAddCurrentTaskToDelayedList+0x94>)
 800edd2:	681b      	ldr	r3, [r3, #0]
 800edd4:	3304      	adds	r3, #4
 800edd6:	4618      	mov	r0, r3
 800edd8:	f7fd fec2 	bl	800cb60 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ede2:	d10a      	bne.n	800edfa <prvAddCurrentTaskToDelayedList+0x3a>
 800ede4:	683b      	ldr	r3, [r7, #0]
 800ede6:	2b00      	cmp	r3, #0
 800ede8:	d007      	beq.n	800edfa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800edea:	4b1a      	ldr	r3, [pc, #104]	; (800ee54 <prvAddCurrentTaskToDelayedList+0x94>)
 800edec:	681b      	ldr	r3, [r3, #0]
 800edee:	3304      	adds	r3, #4
 800edf0:	4619      	mov	r1, r3
 800edf2:	4819      	ldr	r0, [pc, #100]	; (800ee58 <prvAddCurrentTaskToDelayedList+0x98>)
 800edf4:	f7fd fe57 	bl	800caa6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800edf8:	e026      	b.n	800ee48 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800edfa:	68fa      	ldr	r2, [r7, #12]
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	4413      	add	r3, r2
 800ee00:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ee02:	4b14      	ldr	r3, [pc, #80]	; (800ee54 <prvAddCurrentTaskToDelayedList+0x94>)
 800ee04:	681b      	ldr	r3, [r3, #0]
 800ee06:	68ba      	ldr	r2, [r7, #8]
 800ee08:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ee0a:	68ba      	ldr	r2, [r7, #8]
 800ee0c:	68fb      	ldr	r3, [r7, #12]
 800ee0e:	429a      	cmp	r2, r3
 800ee10:	d209      	bcs.n	800ee26 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ee12:	4b12      	ldr	r3, [pc, #72]	; (800ee5c <prvAddCurrentTaskToDelayedList+0x9c>)
 800ee14:	681a      	ldr	r2, [r3, #0]
 800ee16:	4b0f      	ldr	r3, [pc, #60]	; (800ee54 <prvAddCurrentTaskToDelayedList+0x94>)
 800ee18:	681b      	ldr	r3, [r3, #0]
 800ee1a:	3304      	adds	r3, #4
 800ee1c:	4619      	mov	r1, r3
 800ee1e:	4610      	mov	r0, r2
 800ee20:	f7fd fe65 	bl	800caee <vListInsert>
}
 800ee24:	e010      	b.n	800ee48 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ee26:	4b0e      	ldr	r3, [pc, #56]	; (800ee60 <prvAddCurrentTaskToDelayedList+0xa0>)
 800ee28:	681a      	ldr	r2, [r3, #0]
 800ee2a:	4b0a      	ldr	r3, [pc, #40]	; (800ee54 <prvAddCurrentTaskToDelayedList+0x94>)
 800ee2c:	681b      	ldr	r3, [r3, #0]
 800ee2e:	3304      	adds	r3, #4
 800ee30:	4619      	mov	r1, r3
 800ee32:	4610      	mov	r0, r2
 800ee34:	f7fd fe5b 	bl	800caee <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ee38:	4b0a      	ldr	r3, [pc, #40]	; (800ee64 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ee3a:	681b      	ldr	r3, [r3, #0]
 800ee3c:	68ba      	ldr	r2, [r7, #8]
 800ee3e:	429a      	cmp	r2, r3
 800ee40:	d202      	bcs.n	800ee48 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800ee42:	4a08      	ldr	r2, [pc, #32]	; (800ee64 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ee44:	68bb      	ldr	r3, [r7, #8]
 800ee46:	6013      	str	r3, [r2, #0]
}
 800ee48:	bf00      	nop
 800ee4a:	3710      	adds	r7, #16
 800ee4c:	46bd      	mov	sp, r7
 800ee4e:	bd80      	pop	{r7, pc}
 800ee50:	2000123c 	.word	0x2000123c
 800ee54:	20000d64 	.word	0x20000d64
 800ee58:	20001224 	.word	0x20001224
 800ee5c:	200011f4 	.word	0x200011f4
 800ee60:	200011f0 	.word	0x200011f0
 800ee64:	20001258 	.word	0x20001258

0800ee68 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800ee68:	b580      	push	{r7, lr}
 800ee6a:	b08a      	sub	sp, #40	; 0x28
 800ee6c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800ee6e:	2300      	movs	r3, #0
 800ee70:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800ee72:	f000 fb07 	bl	800f484 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800ee76:	4b1c      	ldr	r3, [pc, #112]	; (800eee8 <xTimerCreateTimerTask+0x80>)
 800ee78:	681b      	ldr	r3, [r3, #0]
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	d021      	beq.n	800eec2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800ee7e:	2300      	movs	r3, #0
 800ee80:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800ee82:	2300      	movs	r3, #0
 800ee84:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ee86:	1d3a      	adds	r2, r7, #4
 800ee88:	f107 0108 	add.w	r1, r7, #8
 800ee8c:	f107 030c 	add.w	r3, r7, #12
 800ee90:	4618      	mov	r0, r3
 800ee92:	f7fd fbd3 	bl	800c63c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ee96:	6879      	ldr	r1, [r7, #4]
 800ee98:	68bb      	ldr	r3, [r7, #8]
 800ee9a:	68fa      	ldr	r2, [r7, #12]
 800ee9c:	9202      	str	r2, [sp, #8]
 800ee9e:	9301      	str	r3, [sp, #4]
 800eea0:	2302      	movs	r3, #2
 800eea2:	9300      	str	r3, [sp, #0]
 800eea4:	2300      	movs	r3, #0
 800eea6:	460a      	mov	r2, r1
 800eea8:	4910      	ldr	r1, [pc, #64]	; (800eeec <xTimerCreateTimerTask+0x84>)
 800eeaa:	4811      	ldr	r0, [pc, #68]	; (800eef0 <xTimerCreateTimerTask+0x88>)
 800eeac:	f7fe fe02 	bl	800dab4 <xTaskCreateStatic>
 800eeb0:	4603      	mov	r3, r0
 800eeb2:	4a10      	ldr	r2, [pc, #64]	; (800eef4 <xTimerCreateTimerTask+0x8c>)
 800eeb4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800eeb6:	4b0f      	ldr	r3, [pc, #60]	; (800eef4 <xTimerCreateTimerTask+0x8c>)
 800eeb8:	681b      	ldr	r3, [r3, #0]
 800eeba:	2b00      	cmp	r3, #0
 800eebc:	d001      	beq.n	800eec2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800eebe:	2301      	movs	r3, #1
 800eec0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800eec2:	697b      	ldr	r3, [r7, #20]
 800eec4:	2b00      	cmp	r3, #0
 800eec6:	d10a      	bne.n	800eede <xTimerCreateTimerTask+0x76>
	__asm volatile
 800eec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eecc:	f383 8811 	msr	BASEPRI, r3
 800eed0:	f3bf 8f6f 	isb	sy
 800eed4:	f3bf 8f4f 	dsb	sy
 800eed8:	613b      	str	r3, [r7, #16]
}
 800eeda:	bf00      	nop
 800eedc:	e7fe      	b.n	800eedc <xTimerCreateTimerTask+0x74>
	return xReturn;
 800eede:	697b      	ldr	r3, [r7, #20]
}
 800eee0:	4618      	mov	r0, r3
 800eee2:	3718      	adds	r7, #24
 800eee4:	46bd      	mov	sp, r7
 800eee6:	bd80      	pop	{r7, pc}
 800eee8:	20001294 	.word	0x20001294
 800eeec:	080144a0 	.word	0x080144a0
 800eef0:	0800f02d 	.word	0x0800f02d
 800eef4:	20001298 	.word	0x20001298

0800eef8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800eef8:	b580      	push	{r7, lr}
 800eefa:	b08a      	sub	sp, #40	; 0x28
 800eefc:	af00      	add	r7, sp, #0
 800eefe:	60f8      	str	r0, [r7, #12]
 800ef00:	60b9      	str	r1, [r7, #8]
 800ef02:	607a      	str	r2, [r7, #4]
 800ef04:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ef06:	2300      	movs	r3, #0
 800ef08:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ef0a:	68fb      	ldr	r3, [r7, #12]
 800ef0c:	2b00      	cmp	r3, #0
 800ef0e:	d10a      	bne.n	800ef26 <xTimerGenericCommand+0x2e>
	__asm volatile
 800ef10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef14:	f383 8811 	msr	BASEPRI, r3
 800ef18:	f3bf 8f6f 	isb	sy
 800ef1c:	f3bf 8f4f 	dsb	sy
 800ef20:	623b      	str	r3, [r7, #32]
}
 800ef22:	bf00      	nop
 800ef24:	e7fe      	b.n	800ef24 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800ef26:	4b1a      	ldr	r3, [pc, #104]	; (800ef90 <xTimerGenericCommand+0x98>)
 800ef28:	681b      	ldr	r3, [r3, #0]
 800ef2a:	2b00      	cmp	r3, #0
 800ef2c:	d02a      	beq.n	800ef84 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800ef2e:	68bb      	ldr	r3, [r7, #8]
 800ef30:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ef36:	68fb      	ldr	r3, [r7, #12]
 800ef38:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ef3a:	68bb      	ldr	r3, [r7, #8]
 800ef3c:	2b05      	cmp	r3, #5
 800ef3e:	dc18      	bgt.n	800ef72 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ef40:	f7ff fd9c 	bl	800ea7c <xTaskGetSchedulerState>
 800ef44:	4603      	mov	r3, r0
 800ef46:	2b02      	cmp	r3, #2
 800ef48:	d109      	bne.n	800ef5e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ef4a:	4b11      	ldr	r3, [pc, #68]	; (800ef90 <xTimerGenericCommand+0x98>)
 800ef4c:	6818      	ldr	r0, [r3, #0]
 800ef4e:	f107 0110 	add.w	r1, r7, #16
 800ef52:	2300      	movs	r3, #0
 800ef54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ef56:	f7fe f821 	bl	800cf9c <xQueueGenericSend>
 800ef5a:	6278      	str	r0, [r7, #36]	; 0x24
 800ef5c:	e012      	b.n	800ef84 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ef5e:	4b0c      	ldr	r3, [pc, #48]	; (800ef90 <xTimerGenericCommand+0x98>)
 800ef60:	6818      	ldr	r0, [r3, #0]
 800ef62:	f107 0110 	add.w	r1, r7, #16
 800ef66:	2300      	movs	r3, #0
 800ef68:	2200      	movs	r2, #0
 800ef6a:	f7fe f817 	bl	800cf9c <xQueueGenericSend>
 800ef6e:	6278      	str	r0, [r7, #36]	; 0x24
 800ef70:	e008      	b.n	800ef84 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ef72:	4b07      	ldr	r3, [pc, #28]	; (800ef90 <xTimerGenericCommand+0x98>)
 800ef74:	6818      	ldr	r0, [r3, #0]
 800ef76:	f107 0110 	add.w	r1, r7, #16
 800ef7a:	2300      	movs	r3, #0
 800ef7c:	683a      	ldr	r2, [r7, #0]
 800ef7e:	f7fe f90b 	bl	800d198 <xQueueGenericSendFromISR>
 800ef82:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ef84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ef86:	4618      	mov	r0, r3
 800ef88:	3728      	adds	r7, #40	; 0x28
 800ef8a:	46bd      	mov	sp, r7
 800ef8c:	bd80      	pop	{r7, pc}
 800ef8e:	bf00      	nop
 800ef90:	20001294 	.word	0x20001294

0800ef94 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800ef94:	b580      	push	{r7, lr}
 800ef96:	b088      	sub	sp, #32
 800ef98:	af02      	add	r7, sp, #8
 800ef9a:	6078      	str	r0, [r7, #4]
 800ef9c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ef9e:	4b22      	ldr	r3, [pc, #136]	; (800f028 <prvProcessExpiredTimer+0x94>)
 800efa0:	681b      	ldr	r3, [r3, #0]
 800efa2:	68db      	ldr	r3, [r3, #12]
 800efa4:	68db      	ldr	r3, [r3, #12]
 800efa6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800efa8:	697b      	ldr	r3, [r7, #20]
 800efaa:	3304      	adds	r3, #4
 800efac:	4618      	mov	r0, r3
 800efae:	f7fd fdd7 	bl	800cb60 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800efb2:	697b      	ldr	r3, [r7, #20]
 800efb4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800efb8:	f003 0304 	and.w	r3, r3, #4
 800efbc:	2b00      	cmp	r3, #0
 800efbe:	d022      	beq.n	800f006 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800efc0:	697b      	ldr	r3, [r7, #20]
 800efc2:	699a      	ldr	r2, [r3, #24]
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	18d1      	adds	r1, r2, r3
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	683a      	ldr	r2, [r7, #0]
 800efcc:	6978      	ldr	r0, [r7, #20]
 800efce:	f000 f8d1 	bl	800f174 <prvInsertTimerInActiveList>
 800efd2:	4603      	mov	r3, r0
 800efd4:	2b00      	cmp	r3, #0
 800efd6:	d01f      	beq.n	800f018 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800efd8:	2300      	movs	r3, #0
 800efda:	9300      	str	r3, [sp, #0]
 800efdc:	2300      	movs	r3, #0
 800efde:	687a      	ldr	r2, [r7, #4]
 800efe0:	2100      	movs	r1, #0
 800efe2:	6978      	ldr	r0, [r7, #20]
 800efe4:	f7ff ff88 	bl	800eef8 <xTimerGenericCommand>
 800efe8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800efea:	693b      	ldr	r3, [r7, #16]
 800efec:	2b00      	cmp	r3, #0
 800efee:	d113      	bne.n	800f018 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800eff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eff4:	f383 8811 	msr	BASEPRI, r3
 800eff8:	f3bf 8f6f 	isb	sy
 800effc:	f3bf 8f4f 	dsb	sy
 800f000:	60fb      	str	r3, [r7, #12]
}
 800f002:	bf00      	nop
 800f004:	e7fe      	b.n	800f004 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f006:	697b      	ldr	r3, [r7, #20]
 800f008:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f00c:	f023 0301 	bic.w	r3, r3, #1
 800f010:	b2da      	uxtb	r2, r3
 800f012:	697b      	ldr	r3, [r7, #20]
 800f014:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f018:	697b      	ldr	r3, [r7, #20]
 800f01a:	6a1b      	ldr	r3, [r3, #32]
 800f01c:	6978      	ldr	r0, [r7, #20]
 800f01e:	4798      	blx	r3
}
 800f020:	bf00      	nop
 800f022:	3718      	adds	r7, #24
 800f024:	46bd      	mov	sp, r7
 800f026:	bd80      	pop	{r7, pc}
 800f028:	2000128c 	.word	0x2000128c

0800f02c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800f02c:	b580      	push	{r7, lr}
 800f02e:	b084      	sub	sp, #16
 800f030:	af00      	add	r7, sp, #0
 800f032:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f034:	f107 0308 	add.w	r3, r7, #8
 800f038:	4618      	mov	r0, r3
 800f03a:	f000 f857 	bl	800f0ec <prvGetNextExpireTime>
 800f03e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800f040:	68bb      	ldr	r3, [r7, #8]
 800f042:	4619      	mov	r1, r3
 800f044:	68f8      	ldr	r0, [r7, #12]
 800f046:	f000 f803 	bl	800f050 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800f04a:	f000 f8d5 	bl	800f1f8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f04e:	e7f1      	b.n	800f034 <prvTimerTask+0x8>

0800f050 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800f050:	b580      	push	{r7, lr}
 800f052:	b084      	sub	sp, #16
 800f054:	af00      	add	r7, sp, #0
 800f056:	6078      	str	r0, [r7, #4]
 800f058:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800f05a:	f7ff f86d 	bl	800e138 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f05e:	f107 0308 	add.w	r3, r7, #8
 800f062:	4618      	mov	r0, r3
 800f064:	f000 f866 	bl	800f134 <prvSampleTimeNow>
 800f068:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800f06a:	68bb      	ldr	r3, [r7, #8]
 800f06c:	2b00      	cmp	r3, #0
 800f06e:	d130      	bne.n	800f0d2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800f070:	683b      	ldr	r3, [r7, #0]
 800f072:	2b00      	cmp	r3, #0
 800f074:	d10a      	bne.n	800f08c <prvProcessTimerOrBlockTask+0x3c>
 800f076:	687a      	ldr	r2, [r7, #4]
 800f078:	68fb      	ldr	r3, [r7, #12]
 800f07a:	429a      	cmp	r2, r3
 800f07c:	d806      	bhi.n	800f08c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800f07e:	f7ff f869 	bl	800e154 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800f082:	68f9      	ldr	r1, [r7, #12]
 800f084:	6878      	ldr	r0, [r7, #4]
 800f086:	f7ff ff85 	bl	800ef94 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800f08a:	e024      	b.n	800f0d6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800f08c:	683b      	ldr	r3, [r7, #0]
 800f08e:	2b00      	cmp	r3, #0
 800f090:	d008      	beq.n	800f0a4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800f092:	4b13      	ldr	r3, [pc, #76]	; (800f0e0 <prvProcessTimerOrBlockTask+0x90>)
 800f094:	681b      	ldr	r3, [r3, #0]
 800f096:	681b      	ldr	r3, [r3, #0]
 800f098:	2b00      	cmp	r3, #0
 800f09a:	d101      	bne.n	800f0a0 <prvProcessTimerOrBlockTask+0x50>
 800f09c:	2301      	movs	r3, #1
 800f09e:	e000      	b.n	800f0a2 <prvProcessTimerOrBlockTask+0x52>
 800f0a0:	2300      	movs	r3, #0
 800f0a2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800f0a4:	4b0f      	ldr	r3, [pc, #60]	; (800f0e4 <prvProcessTimerOrBlockTask+0x94>)
 800f0a6:	6818      	ldr	r0, [r3, #0]
 800f0a8:	687a      	ldr	r2, [r7, #4]
 800f0aa:	68fb      	ldr	r3, [r7, #12]
 800f0ac:	1ad3      	subs	r3, r2, r3
 800f0ae:	683a      	ldr	r2, [r7, #0]
 800f0b0:	4619      	mov	r1, r3
 800f0b2:	f7fe fccb 	bl	800da4c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800f0b6:	f7ff f84d 	bl	800e154 <xTaskResumeAll>
 800f0ba:	4603      	mov	r3, r0
 800f0bc:	2b00      	cmp	r3, #0
 800f0be:	d10a      	bne.n	800f0d6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800f0c0:	4b09      	ldr	r3, [pc, #36]	; (800f0e8 <prvProcessTimerOrBlockTask+0x98>)
 800f0c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f0c6:	601a      	str	r2, [r3, #0]
 800f0c8:	f3bf 8f4f 	dsb	sy
 800f0cc:	f3bf 8f6f 	isb	sy
}
 800f0d0:	e001      	b.n	800f0d6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800f0d2:	f7ff f83f 	bl	800e154 <xTaskResumeAll>
}
 800f0d6:	bf00      	nop
 800f0d8:	3710      	adds	r7, #16
 800f0da:	46bd      	mov	sp, r7
 800f0dc:	bd80      	pop	{r7, pc}
 800f0de:	bf00      	nop
 800f0e0:	20001290 	.word	0x20001290
 800f0e4:	20001294 	.word	0x20001294
 800f0e8:	e000ed04 	.word	0xe000ed04

0800f0ec <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800f0ec:	b480      	push	{r7}
 800f0ee:	b085      	sub	sp, #20
 800f0f0:	af00      	add	r7, sp, #0
 800f0f2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800f0f4:	4b0e      	ldr	r3, [pc, #56]	; (800f130 <prvGetNextExpireTime+0x44>)
 800f0f6:	681b      	ldr	r3, [r3, #0]
 800f0f8:	681b      	ldr	r3, [r3, #0]
 800f0fa:	2b00      	cmp	r3, #0
 800f0fc:	d101      	bne.n	800f102 <prvGetNextExpireTime+0x16>
 800f0fe:	2201      	movs	r2, #1
 800f100:	e000      	b.n	800f104 <prvGetNextExpireTime+0x18>
 800f102:	2200      	movs	r2, #0
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	681b      	ldr	r3, [r3, #0]
 800f10c:	2b00      	cmp	r3, #0
 800f10e:	d105      	bne.n	800f11c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f110:	4b07      	ldr	r3, [pc, #28]	; (800f130 <prvGetNextExpireTime+0x44>)
 800f112:	681b      	ldr	r3, [r3, #0]
 800f114:	68db      	ldr	r3, [r3, #12]
 800f116:	681b      	ldr	r3, [r3, #0]
 800f118:	60fb      	str	r3, [r7, #12]
 800f11a:	e001      	b.n	800f120 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800f11c:	2300      	movs	r3, #0
 800f11e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800f120:	68fb      	ldr	r3, [r7, #12]
}
 800f122:	4618      	mov	r0, r3
 800f124:	3714      	adds	r7, #20
 800f126:	46bd      	mov	sp, r7
 800f128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f12c:	4770      	bx	lr
 800f12e:	bf00      	nop
 800f130:	2000128c 	.word	0x2000128c

0800f134 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800f134:	b580      	push	{r7, lr}
 800f136:	b084      	sub	sp, #16
 800f138:	af00      	add	r7, sp, #0
 800f13a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800f13c:	f7ff f8a8 	bl	800e290 <xTaskGetTickCount>
 800f140:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800f142:	4b0b      	ldr	r3, [pc, #44]	; (800f170 <prvSampleTimeNow+0x3c>)
 800f144:	681b      	ldr	r3, [r3, #0]
 800f146:	68fa      	ldr	r2, [r7, #12]
 800f148:	429a      	cmp	r2, r3
 800f14a:	d205      	bcs.n	800f158 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800f14c:	f000 f936 	bl	800f3bc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	2201      	movs	r2, #1
 800f154:	601a      	str	r2, [r3, #0]
 800f156:	e002      	b.n	800f15e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	2200      	movs	r2, #0
 800f15c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800f15e:	4a04      	ldr	r2, [pc, #16]	; (800f170 <prvSampleTimeNow+0x3c>)
 800f160:	68fb      	ldr	r3, [r7, #12]
 800f162:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800f164:	68fb      	ldr	r3, [r7, #12]
}
 800f166:	4618      	mov	r0, r3
 800f168:	3710      	adds	r7, #16
 800f16a:	46bd      	mov	sp, r7
 800f16c:	bd80      	pop	{r7, pc}
 800f16e:	bf00      	nop
 800f170:	2000129c 	.word	0x2000129c

0800f174 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800f174:	b580      	push	{r7, lr}
 800f176:	b086      	sub	sp, #24
 800f178:	af00      	add	r7, sp, #0
 800f17a:	60f8      	str	r0, [r7, #12]
 800f17c:	60b9      	str	r1, [r7, #8]
 800f17e:	607a      	str	r2, [r7, #4]
 800f180:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800f182:	2300      	movs	r3, #0
 800f184:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800f186:	68fb      	ldr	r3, [r7, #12]
 800f188:	68ba      	ldr	r2, [r7, #8]
 800f18a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f18c:	68fb      	ldr	r3, [r7, #12]
 800f18e:	68fa      	ldr	r2, [r7, #12]
 800f190:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800f192:	68ba      	ldr	r2, [r7, #8]
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	429a      	cmp	r2, r3
 800f198:	d812      	bhi.n	800f1c0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f19a:	687a      	ldr	r2, [r7, #4]
 800f19c:	683b      	ldr	r3, [r7, #0]
 800f19e:	1ad2      	subs	r2, r2, r3
 800f1a0:	68fb      	ldr	r3, [r7, #12]
 800f1a2:	699b      	ldr	r3, [r3, #24]
 800f1a4:	429a      	cmp	r2, r3
 800f1a6:	d302      	bcc.n	800f1ae <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800f1a8:	2301      	movs	r3, #1
 800f1aa:	617b      	str	r3, [r7, #20]
 800f1ac:	e01b      	b.n	800f1e6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800f1ae:	4b10      	ldr	r3, [pc, #64]	; (800f1f0 <prvInsertTimerInActiveList+0x7c>)
 800f1b0:	681a      	ldr	r2, [r3, #0]
 800f1b2:	68fb      	ldr	r3, [r7, #12]
 800f1b4:	3304      	adds	r3, #4
 800f1b6:	4619      	mov	r1, r3
 800f1b8:	4610      	mov	r0, r2
 800f1ba:	f7fd fc98 	bl	800caee <vListInsert>
 800f1be:	e012      	b.n	800f1e6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800f1c0:	687a      	ldr	r2, [r7, #4]
 800f1c2:	683b      	ldr	r3, [r7, #0]
 800f1c4:	429a      	cmp	r2, r3
 800f1c6:	d206      	bcs.n	800f1d6 <prvInsertTimerInActiveList+0x62>
 800f1c8:	68ba      	ldr	r2, [r7, #8]
 800f1ca:	683b      	ldr	r3, [r7, #0]
 800f1cc:	429a      	cmp	r2, r3
 800f1ce:	d302      	bcc.n	800f1d6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800f1d0:	2301      	movs	r3, #1
 800f1d2:	617b      	str	r3, [r7, #20]
 800f1d4:	e007      	b.n	800f1e6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f1d6:	4b07      	ldr	r3, [pc, #28]	; (800f1f4 <prvInsertTimerInActiveList+0x80>)
 800f1d8:	681a      	ldr	r2, [r3, #0]
 800f1da:	68fb      	ldr	r3, [r7, #12]
 800f1dc:	3304      	adds	r3, #4
 800f1de:	4619      	mov	r1, r3
 800f1e0:	4610      	mov	r0, r2
 800f1e2:	f7fd fc84 	bl	800caee <vListInsert>
		}
	}

	return xProcessTimerNow;
 800f1e6:	697b      	ldr	r3, [r7, #20]
}
 800f1e8:	4618      	mov	r0, r3
 800f1ea:	3718      	adds	r7, #24
 800f1ec:	46bd      	mov	sp, r7
 800f1ee:	bd80      	pop	{r7, pc}
 800f1f0:	20001290 	.word	0x20001290
 800f1f4:	2000128c 	.word	0x2000128c

0800f1f8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800f1f8:	b580      	push	{r7, lr}
 800f1fa:	b08e      	sub	sp, #56	; 0x38
 800f1fc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f1fe:	e0ca      	b.n	800f396 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	2b00      	cmp	r3, #0
 800f204:	da18      	bge.n	800f238 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800f206:	1d3b      	adds	r3, r7, #4
 800f208:	3304      	adds	r3, #4
 800f20a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800f20c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f20e:	2b00      	cmp	r3, #0
 800f210:	d10a      	bne.n	800f228 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800f212:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f216:	f383 8811 	msr	BASEPRI, r3
 800f21a:	f3bf 8f6f 	isb	sy
 800f21e:	f3bf 8f4f 	dsb	sy
 800f222:	61fb      	str	r3, [r7, #28]
}
 800f224:	bf00      	nop
 800f226:	e7fe      	b.n	800f226 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800f228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f22a:	681b      	ldr	r3, [r3, #0]
 800f22c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f22e:	6850      	ldr	r0, [r2, #4]
 800f230:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f232:	6892      	ldr	r2, [r2, #8]
 800f234:	4611      	mov	r1, r2
 800f236:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	2b00      	cmp	r3, #0
 800f23c:	f2c0 80ab 	blt.w	800f396 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800f240:	68fb      	ldr	r3, [r7, #12]
 800f242:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800f244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f246:	695b      	ldr	r3, [r3, #20]
 800f248:	2b00      	cmp	r3, #0
 800f24a:	d004      	beq.n	800f256 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f24c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f24e:	3304      	adds	r3, #4
 800f250:	4618      	mov	r0, r3
 800f252:	f7fd fc85 	bl	800cb60 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f256:	463b      	mov	r3, r7
 800f258:	4618      	mov	r0, r3
 800f25a:	f7ff ff6b 	bl	800f134 <prvSampleTimeNow>
 800f25e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	2b09      	cmp	r3, #9
 800f264:	f200 8096 	bhi.w	800f394 <prvProcessReceivedCommands+0x19c>
 800f268:	a201      	add	r2, pc, #4	; (adr r2, 800f270 <prvProcessReceivedCommands+0x78>)
 800f26a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f26e:	bf00      	nop
 800f270:	0800f299 	.word	0x0800f299
 800f274:	0800f299 	.word	0x0800f299
 800f278:	0800f299 	.word	0x0800f299
 800f27c:	0800f30d 	.word	0x0800f30d
 800f280:	0800f321 	.word	0x0800f321
 800f284:	0800f36b 	.word	0x0800f36b
 800f288:	0800f299 	.word	0x0800f299
 800f28c:	0800f299 	.word	0x0800f299
 800f290:	0800f30d 	.word	0x0800f30d
 800f294:	0800f321 	.word	0x0800f321
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f29a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f29e:	f043 0301 	orr.w	r3, r3, #1
 800f2a2:	b2da      	uxtb	r2, r3
 800f2a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800f2aa:	68ba      	ldr	r2, [r7, #8]
 800f2ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2ae:	699b      	ldr	r3, [r3, #24]
 800f2b0:	18d1      	adds	r1, r2, r3
 800f2b2:	68bb      	ldr	r3, [r7, #8]
 800f2b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f2b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f2b8:	f7ff ff5c 	bl	800f174 <prvInsertTimerInActiveList>
 800f2bc:	4603      	mov	r3, r0
 800f2be:	2b00      	cmp	r3, #0
 800f2c0:	d069      	beq.n	800f396 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f2c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2c4:	6a1b      	ldr	r3, [r3, #32]
 800f2c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f2c8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f2ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f2d0:	f003 0304 	and.w	r3, r3, #4
 800f2d4:	2b00      	cmp	r3, #0
 800f2d6:	d05e      	beq.n	800f396 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800f2d8:	68ba      	ldr	r2, [r7, #8]
 800f2da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2dc:	699b      	ldr	r3, [r3, #24]
 800f2de:	441a      	add	r2, r3
 800f2e0:	2300      	movs	r3, #0
 800f2e2:	9300      	str	r3, [sp, #0]
 800f2e4:	2300      	movs	r3, #0
 800f2e6:	2100      	movs	r1, #0
 800f2e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f2ea:	f7ff fe05 	bl	800eef8 <xTimerGenericCommand>
 800f2ee:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800f2f0:	6a3b      	ldr	r3, [r7, #32]
 800f2f2:	2b00      	cmp	r3, #0
 800f2f4:	d14f      	bne.n	800f396 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800f2f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2fa:	f383 8811 	msr	BASEPRI, r3
 800f2fe:	f3bf 8f6f 	isb	sy
 800f302:	f3bf 8f4f 	dsb	sy
 800f306:	61bb      	str	r3, [r7, #24]
}
 800f308:	bf00      	nop
 800f30a:	e7fe      	b.n	800f30a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f30c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f30e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f312:	f023 0301 	bic.w	r3, r3, #1
 800f316:	b2da      	uxtb	r2, r3
 800f318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f31a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800f31e:	e03a      	b.n	800f396 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f322:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f326:	f043 0301 	orr.w	r3, r3, #1
 800f32a:	b2da      	uxtb	r2, r3
 800f32c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f32e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800f332:	68ba      	ldr	r2, [r7, #8]
 800f334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f336:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800f338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f33a:	699b      	ldr	r3, [r3, #24]
 800f33c:	2b00      	cmp	r3, #0
 800f33e:	d10a      	bne.n	800f356 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800f340:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f344:	f383 8811 	msr	BASEPRI, r3
 800f348:	f3bf 8f6f 	isb	sy
 800f34c:	f3bf 8f4f 	dsb	sy
 800f350:	617b      	str	r3, [r7, #20]
}
 800f352:	bf00      	nop
 800f354:	e7fe      	b.n	800f354 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800f356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f358:	699a      	ldr	r2, [r3, #24]
 800f35a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f35c:	18d1      	adds	r1, r2, r3
 800f35e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f360:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f362:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f364:	f7ff ff06 	bl	800f174 <prvInsertTimerInActiveList>
					break;
 800f368:	e015      	b.n	800f396 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800f36a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f36c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f370:	f003 0302 	and.w	r3, r3, #2
 800f374:	2b00      	cmp	r3, #0
 800f376:	d103      	bne.n	800f380 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800f378:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f37a:	f000 fc01 	bl	800fb80 <vPortFree>
 800f37e:	e00a      	b.n	800f396 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f382:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f386:	f023 0301 	bic.w	r3, r3, #1
 800f38a:	b2da      	uxtb	r2, r3
 800f38c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f38e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800f392:	e000      	b.n	800f396 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800f394:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f396:	4b08      	ldr	r3, [pc, #32]	; (800f3b8 <prvProcessReceivedCommands+0x1c0>)
 800f398:	681b      	ldr	r3, [r3, #0]
 800f39a:	1d39      	adds	r1, r7, #4
 800f39c:	2200      	movs	r2, #0
 800f39e:	4618      	mov	r0, r3
 800f3a0:	f7fd ff96 	bl	800d2d0 <xQueueReceive>
 800f3a4:	4603      	mov	r3, r0
 800f3a6:	2b00      	cmp	r3, #0
 800f3a8:	f47f af2a 	bne.w	800f200 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800f3ac:	bf00      	nop
 800f3ae:	bf00      	nop
 800f3b0:	3730      	adds	r7, #48	; 0x30
 800f3b2:	46bd      	mov	sp, r7
 800f3b4:	bd80      	pop	{r7, pc}
 800f3b6:	bf00      	nop
 800f3b8:	20001294 	.word	0x20001294

0800f3bc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800f3bc:	b580      	push	{r7, lr}
 800f3be:	b088      	sub	sp, #32
 800f3c0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f3c2:	e048      	b.n	800f456 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f3c4:	4b2d      	ldr	r3, [pc, #180]	; (800f47c <prvSwitchTimerLists+0xc0>)
 800f3c6:	681b      	ldr	r3, [r3, #0]
 800f3c8:	68db      	ldr	r3, [r3, #12]
 800f3ca:	681b      	ldr	r3, [r3, #0]
 800f3cc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f3ce:	4b2b      	ldr	r3, [pc, #172]	; (800f47c <prvSwitchTimerLists+0xc0>)
 800f3d0:	681b      	ldr	r3, [r3, #0]
 800f3d2:	68db      	ldr	r3, [r3, #12]
 800f3d4:	68db      	ldr	r3, [r3, #12]
 800f3d6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f3d8:	68fb      	ldr	r3, [r7, #12]
 800f3da:	3304      	adds	r3, #4
 800f3dc:	4618      	mov	r0, r3
 800f3de:	f7fd fbbf 	bl	800cb60 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f3e2:	68fb      	ldr	r3, [r7, #12]
 800f3e4:	6a1b      	ldr	r3, [r3, #32]
 800f3e6:	68f8      	ldr	r0, [r7, #12]
 800f3e8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f3ea:	68fb      	ldr	r3, [r7, #12]
 800f3ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f3f0:	f003 0304 	and.w	r3, r3, #4
 800f3f4:	2b00      	cmp	r3, #0
 800f3f6:	d02e      	beq.n	800f456 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800f3f8:	68fb      	ldr	r3, [r7, #12]
 800f3fa:	699b      	ldr	r3, [r3, #24]
 800f3fc:	693a      	ldr	r2, [r7, #16]
 800f3fe:	4413      	add	r3, r2
 800f400:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800f402:	68ba      	ldr	r2, [r7, #8]
 800f404:	693b      	ldr	r3, [r7, #16]
 800f406:	429a      	cmp	r2, r3
 800f408:	d90e      	bls.n	800f428 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800f40a:	68fb      	ldr	r3, [r7, #12]
 800f40c:	68ba      	ldr	r2, [r7, #8]
 800f40e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f410:	68fb      	ldr	r3, [r7, #12]
 800f412:	68fa      	ldr	r2, [r7, #12]
 800f414:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f416:	4b19      	ldr	r3, [pc, #100]	; (800f47c <prvSwitchTimerLists+0xc0>)
 800f418:	681a      	ldr	r2, [r3, #0]
 800f41a:	68fb      	ldr	r3, [r7, #12]
 800f41c:	3304      	adds	r3, #4
 800f41e:	4619      	mov	r1, r3
 800f420:	4610      	mov	r0, r2
 800f422:	f7fd fb64 	bl	800caee <vListInsert>
 800f426:	e016      	b.n	800f456 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f428:	2300      	movs	r3, #0
 800f42a:	9300      	str	r3, [sp, #0]
 800f42c:	2300      	movs	r3, #0
 800f42e:	693a      	ldr	r2, [r7, #16]
 800f430:	2100      	movs	r1, #0
 800f432:	68f8      	ldr	r0, [r7, #12]
 800f434:	f7ff fd60 	bl	800eef8 <xTimerGenericCommand>
 800f438:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	2b00      	cmp	r3, #0
 800f43e:	d10a      	bne.n	800f456 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800f440:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f444:	f383 8811 	msr	BASEPRI, r3
 800f448:	f3bf 8f6f 	isb	sy
 800f44c:	f3bf 8f4f 	dsb	sy
 800f450:	603b      	str	r3, [r7, #0]
}
 800f452:	bf00      	nop
 800f454:	e7fe      	b.n	800f454 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f456:	4b09      	ldr	r3, [pc, #36]	; (800f47c <prvSwitchTimerLists+0xc0>)
 800f458:	681b      	ldr	r3, [r3, #0]
 800f45a:	681b      	ldr	r3, [r3, #0]
 800f45c:	2b00      	cmp	r3, #0
 800f45e:	d1b1      	bne.n	800f3c4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800f460:	4b06      	ldr	r3, [pc, #24]	; (800f47c <prvSwitchTimerLists+0xc0>)
 800f462:	681b      	ldr	r3, [r3, #0]
 800f464:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800f466:	4b06      	ldr	r3, [pc, #24]	; (800f480 <prvSwitchTimerLists+0xc4>)
 800f468:	681b      	ldr	r3, [r3, #0]
 800f46a:	4a04      	ldr	r2, [pc, #16]	; (800f47c <prvSwitchTimerLists+0xc0>)
 800f46c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800f46e:	4a04      	ldr	r2, [pc, #16]	; (800f480 <prvSwitchTimerLists+0xc4>)
 800f470:	697b      	ldr	r3, [r7, #20]
 800f472:	6013      	str	r3, [r2, #0]
}
 800f474:	bf00      	nop
 800f476:	3718      	adds	r7, #24
 800f478:	46bd      	mov	sp, r7
 800f47a:	bd80      	pop	{r7, pc}
 800f47c:	2000128c 	.word	0x2000128c
 800f480:	20001290 	.word	0x20001290

0800f484 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800f484:	b580      	push	{r7, lr}
 800f486:	b082      	sub	sp, #8
 800f488:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800f48a:	f000 f98b 	bl	800f7a4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800f48e:	4b15      	ldr	r3, [pc, #84]	; (800f4e4 <prvCheckForValidListAndQueue+0x60>)
 800f490:	681b      	ldr	r3, [r3, #0]
 800f492:	2b00      	cmp	r3, #0
 800f494:	d120      	bne.n	800f4d8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800f496:	4814      	ldr	r0, [pc, #80]	; (800f4e8 <prvCheckForValidListAndQueue+0x64>)
 800f498:	f7fd fad8 	bl	800ca4c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800f49c:	4813      	ldr	r0, [pc, #76]	; (800f4ec <prvCheckForValidListAndQueue+0x68>)
 800f49e:	f7fd fad5 	bl	800ca4c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800f4a2:	4b13      	ldr	r3, [pc, #76]	; (800f4f0 <prvCheckForValidListAndQueue+0x6c>)
 800f4a4:	4a10      	ldr	r2, [pc, #64]	; (800f4e8 <prvCheckForValidListAndQueue+0x64>)
 800f4a6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800f4a8:	4b12      	ldr	r3, [pc, #72]	; (800f4f4 <prvCheckForValidListAndQueue+0x70>)
 800f4aa:	4a10      	ldr	r2, [pc, #64]	; (800f4ec <prvCheckForValidListAndQueue+0x68>)
 800f4ac:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800f4ae:	2300      	movs	r3, #0
 800f4b0:	9300      	str	r3, [sp, #0]
 800f4b2:	4b11      	ldr	r3, [pc, #68]	; (800f4f8 <prvCheckForValidListAndQueue+0x74>)
 800f4b4:	4a11      	ldr	r2, [pc, #68]	; (800f4fc <prvCheckForValidListAndQueue+0x78>)
 800f4b6:	2110      	movs	r1, #16
 800f4b8:	200a      	movs	r0, #10
 800f4ba:	f7fd fbe3 	bl	800cc84 <xQueueGenericCreateStatic>
 800f4be:	4603      	mov	r3, r0
 800f4c0:	4a08      	ldr	r2, [pc, #32]	; (800f4e4 <prvCheckForValidListAndQueue+0x60>)
 800f4c2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800f4c4:	4b07      	ldr	r3, [pc, #28]	; (800f4e4 <prvCheckForValidListAndQueue+0x60>)
 800f4c6:	681b      	ldr	r3, [r3, #0]
 800f4c8:	2b00      	cmp	r3, #0
 800f4ca:	d005      	beq.n	800f4d8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800f4cc:	4b05      	ldr	r3, [pc, #20]	; (800f4e4 <prvCheckForValidListAndQueue+0x60>)
 800f4ce:	681b      	ldr	r3, [r3, #0]
 800f4d0:	490b      	ldr	r1, [pc, #44]	; (800f500 <prvCheckForValidListAndQueue+0x7c>)
 800f4d2:	4618      	mov	r0, r3
 800f4d4:	f7fe fa90 	bl	800d9f8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f4d8:	f000 f994 	bl	800f804 <vPortExitCritical>
}
 800f4dc:	bf00      	nop
 800f4de:	46bd      	mov	sp, r7
 800f4e0:	bd80      	pop	{r7, pc}
 800f4e2:	bf00      	nop
 800f4e4:	20001294 	.word	0x20001294
 800f4e8:	20001264 	.word	0x20001264
 800f4ec:	20001278 	.word	0x20001278
 800f4f0:	2000128c 	.word	0x2000128c
 800f4f4:	20001290 	.word	0x20001290
 800f4f8:	20001340 	.word	0x20001340
 800f4fc:	200012a0 	.word	0x200012a0
 800f500:	080144a8 	.word	0x080144a8

0800f504 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800f504:	b580      	push	{r7, lr}
 800f506:	b08a      	sub	sp, #40	; 0x28
 800f508:	af00      	add	r7, sp, #0
 800f50a:	60f8      	str	r0, [r7, #12]
 800f50c:	60b9      	str	r1, [r7, #8]
 800f50e:	607a      	str	r2, [r7, #4]
 800f510:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 800f512:	f06f 0301 	mvn.w	r3, #1
 800f516:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 800f518:	68fb      	ldr	r3, [r7, #12]
 800f51a:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 800f51c:	68bb      	ldr	r3, [r7, #8]
 800f51e:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800f524:	4b06      	ldr	r3, [pc, #24]	; (800f540 <xTimerPendFunctionCallFromISR+0x3c>)
 800f526:	6818      	ldr	r0, [r3, #0]
 800f528:	f107 0114 	add.w	r1, r7, #20
 800f52c:	2300      	movs	r3, #0
 800f52e:	683a      	ldr	r2, [r7, #0]
 800f530:	f7fd fe32 	bl	800d198 <xQueueGenericSendFromISR>
 800f534:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 800f536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800f538:	4618      	mov	r0, r3
 800f53a:	3728      	adds	r7, #40	; 0x28
 800f53c:	46bd      	mov	sp, r7
 800f53e:	bd80      	pop	{r7, pc}
 800f540:	20001294 	.word	0x20001294

0800f544 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800f544:	b480      	push	{r7}
 800f546:	b085      	sub	sp, #20
 800f548:	af00      	add	r7, sp, #0
 800f54a:	60f8      	str	r0, [r7, #12]
 800f54c:	60b9      	str	r1, [r7, #8]
 800f54e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800f550:	68fb      	ldr	r3, [r7, #12]
 800f552:	3b04      	subs	r3, #4
 800f554:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f556:	68fb      	ldr	r3, [r7, #12]
 800f558:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800f55c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f55e:	68fb      	ldr	r3, [r7, #12]
 800f560:	3b04      	subs	r3, #4
 800f562:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800f564:	68bb      	ldr	r3, [r7, #8]
 800f566:	f023 0201 	bic.w	r2, r3, #1
 800f56a:	68fb      	ldr	r3, [r7, #12]
 800f56c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f56e:	68fb      	ldr	r3, [r7, #12]
 800f570:	3b04      	subs	r3, #4
 800f572:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f574:	4a0c      	ldr	r2, [pc, #48]	; (800f5a8 <pxPortInitialiseStack+0x64>)
 800f576:	68fb      	ldr	r3, [r7, #12]
 800f578:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800f57a:	68fb      	ldr	r3, [r7, #12]
 800f57c:	3b14      	subs	r3, #20
 800f57e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f580:	687a      	ldr	r2, [r7, #4]
 800f582:	68fb      	ldr	r3, [r7, #12]
 800f584:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800f586:	68fb      	ldr	r3, [r7, #12]
 800f588:	3b04      	subs	r3, #4
 800f58a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800f58c:	68fb      	ldr	r3, [r7, #12]
 800f58e:	f06f 0202 	mvn.w	r2, #2
 800f592:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800f594:	68fb      	ldr	r3, [r7, #12]
 800f596:	3b20      	subs	r3, #32
 800f598:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800f59a:	68fb      	ldr	r3, [r7, #12]
}
 800f59c:	4618      	mov	r0, r3
 800f59e:	3714      	adds	r7, #20
 800f5a0:	46bd      	mov	sp, r7
 800f5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5a6:	4770      	bx	lr
 800f5a8:	0800f5ad 	.word	0x0800f5ad

0800f5ac <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800f5ac:	b480      	push	{r7}
 800f5ae:	b085      	sub	sp, #20
 800f5b0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800f5b2:	2300      	movs	r3, #0
 800f5b4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800f5b6:	4b12      	ldr	r3, [pc, #72]	; (800f600 <prvTaskExitError+0x54>)
 800f5b8:	681b      	ldr	r3, [r3, #0]
 800f5ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f5be:	d00a      	beq.n	800f5d6 <prvTaskExitError+0x2a>
	__asm volatile
 800f5c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5c4:	f383 8811 	msr	BASEPRI, r3
 800f5c8:	f3bf 8f6f 	isb	sy
 800f5cc:	f3bf 8f4f 	dsb	sy
 800f5d0:	60fb      	str	r3, [r7, #12]
}
 800f5d2:	bf00      	nop
 800f5d4:	e7fe      	b.n	800f5d4 <prvTaskExitError+0x28>
	__asm volatile
 800f5d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5da:	f383 8811 	msr	BASEPRI, r3
 800f5de:	f3bf 8f6f 	isb	sy
 800f5e2:	f3bf 8f4f 	dsb	sy
 800f5e6:	60bb      	str	r3, [r7, #8]
}
 800f5e8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800f5ea:	bf00      	nop
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	2b00      	cmp	r3, #0
 800f5f0:	d0fc      	beq.n	800f5ec <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800f5f2:	bf00      	nop
 800f5f4:	bf00      	nop
 800f5f6:	3714      	adds	r7, #20
 800f5f8:	46bd      	mov	sp, r7
 800f5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5fe:	4770      	bx	lr
 800f600:	20000068 	.word	0x20000068
	...

0800f610 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800f610:	4b07      	ldr	r3, [pc, #28]	; (800f630 <pxCurrentTCBConst2>)
 800f612:	6819      	ldr	r1, [r3, #0]
 800f614:	6808      	ldr	r0, [r1, #0]
 800f616:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f61a:	f380 8809 	msr	PSP, r0
 800f61e:	f3bf 8f6f 	isb	sy
 800f622:	f04f 0000 	mov.w	r0, #0
 800f626:	f380 8811 	msr	BASEPRI, r0
 800f62a:	4770      	bx	lr
 800f62c:	f3af 8000 	nop.w

0800f630 <pxCurrentTCBConst2>:
 800f630:	20000d64 	.word	0x20000d64
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800f634:	bf00      	nop
 800f636:	bf00      	nop

0800f638 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800f638:	4808      	ldr	r0, [pc, #32]	; (800f65c <prvPortStartFirstTask+0x24>)
 800f63a:	6800      	ldr	r0, [r0, #0]
 800f63c:	6800      	ldr	r0, [r0, #0]
 800f63e:	f380 8808 	msr	MSP, r0
 800f642:	f04f 0000 	mov.w	r0, #0
 800f646:	f380 8814 	msr	CONTROL, r0
 800f64a:	b662      	cpsie	i
 800f64c:	b661      	cpsie	f
 800f64e:	f3bf 8f4f 	dsb	sy
 800f652:	f3bf 8f6f 	isb	sy
 800f656:	df00      	svc	0
 800f658:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800f65a:	bf00      	nop
 800f65c:	e000ed08 	.word	0xe000ed08

0800f660 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800f660:	b580      	push	{r7, lr}
 800f662:	b086      	sub	sp, #24
 800f664:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800f666:	4b46      	ldr	r3, [pc, #280]	; (800f780 <xPortStartScheduler+0x120>)
 800f668:	681b      	ldr	r3, [r3, #0]
 800f66a:	4a46      	ldr	r2, [pc, #280]	; (800f784 <xPortStartScheduler+0x124>)
 800f66c:	4293      	cmp	r3, r2
 800f66e:	d10a      	bne.n	800f686 <xPortStartScheduler+0x26>
	__asm volatile
 800f670:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f674:	f383 8811 	msr	BASEPRI, r3
 800f678:	f3bf 8f6f 	isb	sy
 800f67c:	f3bf 8f4f 	dsb	sy
 800f680:	613b      	str	r3, [r7, #16]
}
 800f682:	bf00      	nop
 800f684:	e7fe      	b.n	800f684 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800f686:	4b3e      	ldr	r3, [pc, #248]	; (800f780 <xPortStartScheduler+0x120>)
 800f688:	681b      	ldr	r3, [r3, #0]
 800f68a:	4a3f      	ldr	r2, [pc, #252]	; (800f788 <xPortStartScheduler+0x128>)
 800f68c:	4293      	cmp	r3, r2
 800f68e:	d10a      	bne.n	800f6a6 <xPortStartScheduler+0x46>
	__asm volatile
 800f690:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f694:	f383 8811 	msr	BASEPRI, r3
 800f698:	f3bf 8f6f 	isb	sy
 800f69c:	f3bf 8f4f 	dsb	sy
 800f6a0:	60fb      	str	r3, [r7, #12]
}
 800f6a2:	bf00      	nop
 800f6a4:	e7fe      	b.n	800f6a4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800f6a6:	4b39      	ldr	r3, [pc, #228]	; (800f78c <xPortStartScheduler+0x12c>)
 800f6a8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f6aa:	697b      	ldr	r3, [r7, #20]
 800f6ac:	781b      	ldrb	r3, [r3, #0]
 800f6ae:	b2db      	uxtb	r3, r3
 800f6b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f6b2:	697b      	ldr	r3, [r7, #20]
 800f6b4:	22ff      	movs	r2, #255	; 0xff
 800f6b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f6b8:	697b      	ldr	r3, [r7, #20]
 800f6ba:	781b      	ldrb	r3, [r3, #0]
 800f6bc:	b2db      	uxtb	r3, r3
 800f6be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f6c0:	78fb      	ldrb	r3, [r7, #3]
 800f6c2:	b2db      	uxtb	r3, r3
 800f6c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800f6c8:	b2da      	uxtb	r2, r3
 800f6ca:	4b31      	ldr	r3, [pc, #196]	; (800f790 <xPortStartScheduler+0x130>)
 800f6cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800f6ce:	4b31      	ldr	r3, [pc, #196]	; (800f794 <xPortStartScheduler+0x134>)
 800f6d0:	2207      	movs	r2, #7
 800f6d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f6d4:	e009      	b.n	800f6ea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800f6d6:	4b2f      	ldr	r3, [pc, #188]	; (800f794 <xPortStartScheduler+0x134>)
 800f6d8:	681b      	ldr	r3, [r3, #0]
 800f6da:	3b01      	subs	r3, #1
 800f6dc:	4a2d      	ldr	r2, [pc, #180]	; (800f794 <xPortStartScheduler+0x134>)
 800f6de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800f6e0:	78fb      	ldrb	r3, [r7, #3]
 800f6e2:	b2db      	uxtb	r3, r3
 800f6e4:	005b      	lsls	r3, r3, #1
 800f6e6:	b2db      	uxtb	r3, r3
 800f6e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f6ea:	78fb      	ldrb	r3, [r7, #3]
 800f6ec:	b2db      	uxtb	r3, r3
 800f6ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f6f2:	2b80      	cmp	r3, #128	; 0x80
 800f6f4:	d0ef      	beq.n	800f6d6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800f6f6:	4b27      	ldr	r3, [pc, #156]	; (800f794 <xPortStartScheduler+0x134>)
 800f6f8:	681b      	ldr	r3, [r3, #0]
 800f6fa:	f1c3 0307 	rsb	r3, r3, #7
 800f6fe:	2b04      	cmp	r3, #4
 800f700:	d00a      	beq.n	800f718 <xPortStartScheduler+0xb8>
	__asm volatile
 800f702:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f706:	f383 8811 	msr	BASEPRI, r3
 800f70a:	f3bf 8f6f 	isb	sy
 800f70e:	f3bf 8f4f 	dsb	sy
 800f712:	60bb      	str	r3, [r7, #8]
}
 800f714:	bf00      	nop
 800f716:	e7fe      	b.n	800f716 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800f718:	4b1e      	ldr	r3, [pc, #120]	; (800f794 <xPortStartScheduler+0x134>)
 800f71a:	681b      	ldr	r3, [r3, #0]
 800f71c:	021b      	lsls	r3, r3, #8
 800f71e:	4a1d      	ldr	r2, [pc, #116]	; (800f794 <xPortStartScheduler+0x134>)
 800f720:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f722:	4b1c      	ldr	r3, [pc, #112]	; (800f794 <xPortStartScheduler+0x134>)
 800f724:	681b      	ldr	r3, [r3, #0]
 800f726:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f72a:	4a1a      	ldr	r2, [pc, #104]	; (800f794 <xPortStartScheduler+0x134>)
 800f72c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	b2da      	uxtb	r2, r3
 800f732:	697b      	ldr	r3, [r7, #20]
 800f734:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f736:	4b18      	ldr	r3, [pc, #96]	; (800f798 <xPortStartScheduler+0x138>)
 800f738:	681b      	ldr	r3, [r3, #0]
 800f73a:	4a17      	ldr	r2, [pc, #92]	; (800f798 <xPortStartScheduler+0x138>)
 800f73c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800f740:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f742:	4b15      	ldr	r3, [pc, #84]	; (800f798 <xPortStartScheduler+0x138>)
 800f744:	681b      	ldr	r3, [r3, #0]
 800f746:	4a14      	ldr	r2, [pc, #80]	; (800f798 <xPortStartScheduler+0x138>)
 800f748:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800f74c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800f74e:	f000 f8dd 	bl	800f90c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800f752:	4b12      	ldr	r3, [pc, #72]	; (800f79c <xPortStartScheduler+0x13c>)
 800f754:	2200      	movs	r2, #0
 800f756:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800f758:	f000 f8fc 	bl	800f954 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800f75c:	4b10      	ldr	r3, [pc, #64]	; (800f7a0 <xPortStartScheduler+0x140>)
 800f75e:	681b      	ldr	r3, [r3, #0]
 800f760:	4a0f      	ldr	r2, [pc, #60]	; (800f7a0 <xPortStartScheduler+0x140>)
 800f762:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800f766:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800f768:	f7ff ff66 	bl	800f638 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800f76c:	f7fe fe6c 	bl	800e448 <vTaskSwitchContext>
	prvTaskExitError();
 800f770:	f7ff ff1c 	bl	800f5ac <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800f774:	2300      	movs	r3, #0
}
 800f776:	4618      	mov	r0, r3
 800f778:	3718      	adds	r7, #24
 800f77a:	46bd      	mov	sp, r7
 800f77c:	bd80      	pop	{r7, pc}
 800f77e:	bf00      	nop
 800f780:	e000ed00 	.word	0xe000ed00
 800f784:	410fc271 	.word	0x410fc271
 800f788:	410fc270 	.word	0x410fc270
 800f78c:	e000e400 	.word	0xe000e400
 800f790:	20001390 	.word	0x20001390
 800f794:	20001394 	.word	0x20001394
 800f798:	e000ed20 	.word	0xe000ed20
 800f79c:	20000068 	.word	0x20000068
 800f7a0:	e000ef34 	.word	0xe000ef34

0800f7a4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800f7a4:	b480      	push	{r7}
 800f7a6:	b083      	sub	sp, #12
 800f7a8:	af00      	add	r7, sp, #0
	__asm volatile
 800f7aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7ae:	f383 8811 	msr	BASEPRI, r3
 800f7b2:	f3bf 8f6f 	isb	sy
 800f7b6:	f3bf 8f4f 	dsb	sy
 800f7ba:	607b      	str	r3, [r7, #4]
}
 800f7bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800f7be:	4b0f      	ldr	r3, [pc, #60]	; (800f7fc <vPortEnterCritical+0x58>)
 800f7c0:	681b      	ldr	r3, [r3, #0]
 800f7c2:	3301      	adds	r3, #1
 800f7c4:	4a0d      	ldr	r2, [pc, #52]	; (800f7fc <vPortEnterCritical+0x58>)
 800f7c6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800f7c8:	4b0c      	ldr	r3, [pc, #48]	; (800f7fc <vPortEnterCritical+0x58>)
 800f7ca:	681b      	ldr	r3, [r3, #0]
 800f7cc:	2b01      	cmp	r3, #1
 800f7ce:	d10f      	bne.n	800f7f0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800f7d0:	4b0b      	ldr	r3, [pc, #44]	; (800f800 <vPortEnterCritical+0x5c>)
 800f7d2:	681b      	ldr	r3, [r3, #0]
 800f7d4:	b2db      	uxtb	r3, r3
 800f7d6:	2b00      	cmp	r3, #0
 800f7d8:	d00a      	beq.n	800f7f0 <vPortEnterCritical+0x4c>
	__asm volatile
 800f7da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7de:	f383 8811 	msr	BASEPRI, r3
 800f7e2:	f3bf 8f6f 	isb	sy
 800f7e6:	f3bf 8f4f 	dsb	sy
 800f7ea:	603b      	str	r3, [r7, #0]
}
 800f7ec:	bf00      	nop
 800f7ee:	e7fe      	b.n	800f7ee <vPortEnterCritical+0x4a>
	}
}
 800f7f0:	bf00      	nop
 800f7f2:	370c      	adds	r7, #12
 800f7f4:	46bd      	mov	sp, r7
 800f7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7fa:	4770      	bx	lr
 800f7fc:	20000068 	.word	0x20000068
 800f800:	e000ed04 	.word	0xe000ed04

0800f804 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800f804:	b480      	push	{r7}
 800f806:	b083      	sub	sp, #12
 800f808:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800f80a:	4b12      	ldr	r3, [pc, #72]	; (800f854 <vPortExitCritical+0x50>)
 800f80c:	681b      	ldr	r3, [r3, #0]
 800f80e:	2b00      	cmp	r3, #0
 800f810:	d10a      	bne.n	800f828 <vPortExitCritical+0x24>
	__asm volatile
 800f812:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f816:	f383 8811 	msr	BASEPRI, r3
 800f81a:	f3bf 8f6f 	isb	sy
 800f81e:	f3bf 8f4f 	dsb	sy
 800f822:	607b      	str	r3, [r7, #4]
}
 800f824:	bf00      	nop
 800f826:	e7fe      	b.n	800f826 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800f828:	4b0a      	ldr	r3, [pc, #40]	; (800f854 <vPortExitCritical+0x50>)
 800f82a:	681b      	ldr	r3, [r3, #0]
 800f82c:	3b01      	subs	r3, #1
 800f82e:	4a09      	ldr	r2, [pc, #36]	; (800f854 <vPortExitCritical+0x50>)
 800f830:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800f832:	4b08      	ldr	r3, [pc, #32]	; (800f854 <vPortExitCritical+0x50>)
 800f834:	681b      	ldr	r3, [r3, #0]
 800f836:	2b00      	cmp	r3, #0
 800f838:	d105      	bne.n	800f846 <vPortExitCritical+0x42>
 800f83a:	2300      	movs	r3, #0
 800f83c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f83e:	683b      	ldr	r3, [r7, #0]
 800f840:	f383 8811 	msr	BASEPRI, r3
}
 800f844:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800f846:	bf00      	nop
 800f848:	370c      	adds	r7, #12
 800f84a:	46bd      	mov	sp, r7
 800f84c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f850:	4770      	bx	lr
 800f852:	bf00      	nop
 800f854:	20000068 	.word	0x20000068
	...

0800f860 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800f860:	f3ef 8009 	mrs	r0, PSP
 800f864:	f3bf 8f6f 	isb	sy
 800f868:	4b15      	ldr	r3, [pc, #84]	; (800f8c0 <pxCurrentTCBConst>)
 800f86a:	681a      	ldr	r2, [r3, #0]
 800f86c:	f01e 0f10 	tst.w	lr, #16
 800f870:	bf08      	it	eq
 800f872:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f876:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f87a:	6010      	str	r0, [r2, #0]
 800f87c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800f880:	f04f 0050 	mov.w	r0, #80	; 0x50
 800f884:	f380 8811 	msr	BASEPRI, r0
 800f888:	f3bf 8f4f 	dsb	sy
 800f88c:	f3bf 8f6f 	isb	sy
 800f890:	f7fe fdda 	bl	800e448 <vTaskSwitchContext>
 800f894:	f04f 0000 	mov.w	r0, #0
 800f898:	f380 8811 	msr	BASEPRI, r0
 800f89c:	bc09      	pop	{r0, r3}
 800f89e:	6819      	ldr	r1, [r3, #0]
 800f8a0:	6808      	ldr	r0, [r1, #0]
 800f8a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8a6:	f01e 0f10 	tst.w	lr, #16
 800f8aa:	bf08      	it	eq
 800f8ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f8b0:	f380 8809 	msr	PSP, r0
 800f8b4:	f3bf 8f6f 	isb	sy
 800f8b8:	4770      	bx	lr
 800f8ba:	bf00      	nop
 800f8bc:	f3af 8000 	nop.w

0800f8c0 <pxCurrentTCBConst>:
 800f8c0:	20000d64 	.word	0x20000d64
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800f8c4:	bf00      	nop
 800f8c6:	bf00      	nop

0800f8c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800f8c8:	b580      	push	{r7, lr}
 800f8ca:	b082      	sub	sp, #8
 800f8cc:	af00      	add	r7, sp, #0
	__asm volatile
 800f8ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8d2:	f383 8811 	msr	BASEPRI, r3
 800f8d6:	f3bf 8f6f 	isb	sy
 800f8da:	f3bf 8f4f 	dsb	sy
 800f8de:	607b      	str	r3, [r7, #4]
}
 800f8e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800f8e2:	f7fe fcf7 	bl	800e2d4 <xTaskIncrementTick>
 800f8e6:	4603      	mov	r3, r0
 800f8e8:	2b00      	cmp	r3, #0
 800f8ea:	d003      	beq.n	800f8f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800f8ec:	4b06      	ldr	r3, [pc, #24]	; (800f908 <xPortSysTickHandler+0x40>)
 800f8ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f8f2:	601a      	str	r2, [r3, #0]
 800f8f4:	2300      	movs	r3, #0
 800f8f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f8f8:	683b      	ldr	r3, [r7, #0]
 800f8fa:	f383 8811 	msr	BASEPRI, r3
}
 800f8fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800f900:	bf00      	nop
 800f902:	3708      	adds	r7, #8
 800f904:	46bd      	mov	sp, r7
 800f906:	bd80      	pop	{r7, pc}
 800f908:	e000ed04 	.word	0xe000ed04

0800f90c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800f90c:	b480      	push	{r7}
 800f90e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800f910:	4b0b      	ldr	r3, [pc, #44]	; (800f940 <vPortSetupTimerInterrupt+0x34>)
 800f912:	2200      	movs	r2, #0
 800f914:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800f916:	4b0b      	ldr	r3, [pc, #44]	; (800f944 <vPortSetupTimerInterrupt+0x38>)
 800f918:	2200      	movs	r2, #0
 800f91a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f91c:	4b0a      	ldr	r3, [pc, #40]	; (800f948 <vPortSetupTimerInterrupt+0x3c>)
 800f91e:	681b      	ldr	r3, [r3, #0]
 800f920:	4a0a      	ldr	r2, [pc, #40]	; (800f94c <vPortSetupTimerInterrupt+0x40>)
 800f922:	fba2 2303 	umull	r2, r3, r2, r3
 800f926:	099b      	lsrs	r3, r3, #6
 800f928:	4a09      	ldr	r2, [pc, #36]	; (800f950 <vPortSetupTimerInterrupt+0x44>)
 800f92a:	3b01      	subs	r3, #1
 800f92c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800f92e:	4b04      	ldr	r3, [pc, #16]	; (800f940 <vPortSetupTimerInterrupt+0x34>)
 800f930:	2207      	movs	r2, #7
 800f932:	601a      	str	r2, [r3, #0]
}
 800f934:	bf00      	nop
 800f936:	46bd      	mov	sp, r7
 800f938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f93c:	4770      	bx	lr
 800f93e:	bf00      	nop
 800f940:	e000e010 	.word	0xe000e010
 800f944:	e000e018 	.word	0xe000e018
 800f948:	2000003c 	.word	0x2000003c
 800f94c:	10624dd3 	.word	0x10624dd3
 800f950:	e000e014 	.word	0xe000e014

0800f954 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800f954:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800f964 <vPortEnableVFP+0x10>
 800f958:	6801      	ldr	r1, [r0, #0]
 800f95a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800f95e:	6001      	str	r1, [r0, #0]
 800f960:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800f962:	bf00      	nop
 800f964:	e000ed88 	.word	0xe000ed88

0800f968 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800f968:	b480      	push	{r7}
 800f96a:	b085      	sub	sp, #20
 800f96c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800f96e:	f3ef 8305 	mrs	r3, IPSR
 800f972:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800f974:	68fb      	ldr	r3, [r7, #12]
 800f976:	2b0f      	cmp	r3, #15
 800f978:	d914      	bls.n	800f9a4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800f97a:	4a17      	ldr	r2, [pc, #92]	; (800f9d8 <vPortValidateInterruptPriority+0x70>)
 800f97c:	68fb      	ldr	r3, [r7, #12]
 800f97e:	4413      	add	r3, r2
 800f980:	781b      	ldrb	r3, [r3, #0]
 800f982:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800f984:	4b15      	ldr	r3, [pc, #84]	; (800f9dc <vPortValidateInterruptPriority+0x74>)
 800f986:	781b      	ldrb	r3, [r3, #0]
 800f988:	7afa      	ldrb	r2, [r7, #11]
 800f98a:	429a      	cmp	r2, r3
 800f98c:	d20a      	bcs.n	800f9a4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800f98e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f992:	f383 8811 	msr	BASEPRI, r3
 800f996:	f3bf 8f6f 	isb	sy
 800f99a:	f3bf 8f4f 	dsb	sy
 800f99e:	607b      	str	r3, [r7, #4]
}
 800f9a0:	bf00      	nop
 800f9a2:	e7fe      	b.n	800f9a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800f9a4:	4b0e      	ldr	r3, [pc, #56]	; (800f9e0 <vPortValidateInterruptPriority+0x78>)
 800f9a6:	681b      	ldr	r3, [r3, #0]
 800f9a8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800f9ac:	4b0d      	ldr	r3, [pc, #52]	; (800f9e4 <vPortValidateInterruptPriority+0x7c>)
 800f9ae:	681b      	ldr	r3, [r3, #0]
 800f9b0:	429a      	cmp	r2, r3
 800f9b2:	d90a      	bls.n	800f9ca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800f9b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9b8:	f383 8811 	msr	BASEPRI, r3
 800f9bc:	f3bf 8f6f 	isb	sy
 800f9c0:	f3bf 8f4f 	dsb	sy
 800f9c4:	603b      	str	r3, [r7, #0]
}
 800f9c6:	bf00      	nop
 800f9c8:	e7fe      	b.n	800f9c8 <vPortValidateInterruptPriority+0x60>
	}
 800f9ca:	bf00      	nop
 800f9cc:	3714      	adds	r7, #20
 800f9ce:	46bd      	mov	sp, r7
 800f9d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9d4:	4770      	bx	lr
 800f9d6:	bf00      	nop
 800f9d8:	e000e3f0 	.word	0xe000e3f0
 800f9dc:	20001390 	.word	0x20001390
 800f9e0:	e000ed0c 	.word	0xe000ed0c
 800f9e4:	20001394 	.word	0x20001394

0800f9e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800f9e8:	b580      	push	{r7, lr}
 800f9ea:	b08a      	sub	sp, #40	; 0x28
 800f9ec:	af00      	add	r7, sp, #0
 800f9ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800f9f0:	2300      	movs	r3, #0
 800f9f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800f9f4:	f7fe fba0 	bl	800e138 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800f9f8:	4b5b      	ldr	r3, [pc, #364]	; (800fb68 <pvPortMalloc+0x180>)
 800f9fa:	681b      	ldr	r3, [r3, #0]
 800f9fc:	2b00      	cmp	r3, #0
 800f9fe:	d101      	bne.n	800fa04 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800fa00:	f000 f920 	bl	800fc44 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800fa04:	4b59      	ldr	r3, [pc, #356]	; (800fb6c <pvPortMalloc+0x184>)
 800fa06:	681a      	ldr	r2, [r3, #0]
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	4013      	ands	r3, r2
 800fa0c:	2b00      	cmp	r3, #0
 800fa0e:	f040 8093 	bne.w	800fb38 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	2b00      	cmp	r3, #0
 800fa16:	d01d      	beq.n	800fa54 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800fa18:	2208      	movs	r2, #8
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	4413      	add	r3, r2
 800fa1e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	f003 0307 	and.w	r3, r3, #7
 800fa26:	2b00      	cmp	r3, #0
 800fa28:	d014      	beq.n	800fa54 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	f023 0307 	bic.w	r3, r3, #7
 800fa30:	3308      	adds	r3, #8
 800fa32:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	f003 0307 	and.w	r3, r3, #7
 800fa3a:	2b00      	cmp	r3, #0
 800fa3c:	d00a      	beq.n	800fa54 <pvPortMalloc+0x6c>
	__asm volatile
 800fa3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa42:	f383 8811 	msr	BASEPRI, r3
 800fa46:	f3bf 8f6f 	isb	sy
 800fa4a:	f3bf 8f4f 	dsb	sy
 800fa4e:	617b      	str	r3, [r7, #20]
}
 800fa50:	bf00      	nop
 800fa52:	e7fe      	b.n	800fa52 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	2b00      	cmp	r3, #0
 800fa58:	d06e      	beq.n	800fb38 <pvPortMalloc+0x150>
 800fa5a:	4b45      	ldr	r3, [pc, #276]	; (800fb70 <pvPortMalloc+0x188>)
 800fa5c:	681b      	ldr	r3, [r3, #0]
 800fa5e:	687a      	ldr	r2, [r7, #4]
 800fa60:	429a      	cmp	r2, r3
 800fa62:	d869      	bhi.n	800fb38 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800fa64:	4b43      	ldr	r3, [pc, #268]	; (800fb74 <pvPortMalloc+0x18c>)
 800fa66:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800fa68:	4b42      	ldr	r3, [pc, #264]	; (800fb74 <pvPortMalloc+0x18c>)
 800fa6a:	681b      	ldr	r3, [r3, #0]
 800fa6c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800fa6e:	e004      	b.n	800fa7a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800fa70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa72:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800fa74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa76:	681b      	ldr	r3, [r3, #0]
 800fa78:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800fa7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa7c:	685b      	ldr	r3, [r3, #4]
 800fa7e:	687a      	ldr	r2, [r7, #4]
 800fa80:	429a      	cmp	r2, r3
 800fa82:	d903      	bls.n	800fa8c <pvPortMalloc+0xa4>
 800fa84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa86:	681b      	ldr	r3, [r3, #0]
 800fa88:	2b00      	cmp	r3, #0
 800fa8a:	d1f1      	bne.n	800fa70 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800fa8c:	4b36      	ldr	r3, [pc, #216]	; (800fb68 <pvPortMalloc+0x180>)
 800fa8e:	681b      	ldr	r3, [r3, #0]
 800fa90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fa92:	429a      	cmp	r2, r3
 800fa94:	d050      	beq.n	800fb38 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800fa96:	6a3b      	ldr	r3, [r7, #32]
 800fa98:	681b      	ldr	r3, [r3, #0]
 800fa9a:	2208      	movs	r2, #8
 800fa9c:	4413      	add	r3, r2
 800fa9e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800faa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800faa2:	681a      	ldr	r2, [r3, #0]
 800faa4:	6a3b      	ldr	r3, [r7, #32]
 800faa6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800faa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800faaa:	685a      	ldr	r2, [r3, #4]
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	1ad2      	subs	r2, r2, r3
 800fab0:	2308      	movs	r3, #8
 800fab2:	005b      	lsls	r3, r3, #1
 800fab4:	429a      	cmp	r2, r3
 800fab6:	d91f      	bls.n	800faf8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800fab8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	4413      	add	r3, r2
 800fabe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800fac0:	69bb      	ldr	r3, [r7, #24]
 800fac2:	f003 0307 	and.w	r3, r3, #7
 800fac6:	2b00      	cmp	r3, #0
 800fac8:	d00a      	beq.n	800fae0 <pvPortMalloc+0xf8>
	__asm volatile
 800faca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800face:	f383 8811 	msr	BASEPRI, r3
 800fad2:	f3bf 8f6f 	isb	sy
 800fad6:	f3bf 8f4f 	dsb	sy
 800fada:	613b      	str	r3, [r7, #16]
}
 800fadc:	bf00      	nop
 800fade:	e7fe      	b.n	800fade <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800fae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fae2:	685a      	ldr	r2, [r3, #4]
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	1ad2      	subs	r2, r2, r3
 800fae8:	69bb      	ldr	r3, [r7, #24]
 800faea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800faec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800faee:	687a      	ldr	r2, [r7, #4]
 800faf0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800faf2:	69b8      	ldr	r0, [r7, #24]
 800faf4:	f000 f908 	bl	800fd08 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800faf8:	4b1d      	ldr	r3, [pc, #116]	; (800fb70 <pvPortMalloc+0x188>)
 800fafa:	681a      	ldr	r2, [r3, #0]
 800fafc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fafe:	685b      	ldr	r3, [r3, #4]
 800fb00:	1ad3      	subs	r3, r2, r3
 800fb02:	4a1b      	ldr	r2, [pc, #108]	; (800fb70 <pvPortMalloc+0x188>)
 800fb04:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800fb06:	4b1a      	ldr	r3, [pc, #104]	; (800fb70 <pvPortMalloc+0x188>)
 800fb08:	681a      	ldr	r2, [r3, #0]
 800fb0a:	4b1b      	ldr	r3, [pc, #108]	; (800fb78 <pvPortMalloc+0x190>)
 800fb0c:	681b      	ldr	r3, [r3, #0]
 800fb0e:	429a      	cmp	r2, r3
 800fb10:	d203      	bcs.n	800fb1a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800fb12:	4b17      	ldr	r3, [pc, #92]	; (800fb70 <pvPortMalloc+0x188>)
 800fb14:	681b      	ldr	r3, [r3, #0]
 800fb16:	4a18      	ldr	r2, [pc, #96]	; (800fb78 <pvPortMalloc+0x190>)
 800fb18:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800fb1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb1c:	685a      	ldr	r2, [r3, #4]
 800fb1e:	4b13      	ldr	r3, [pc, #76]	; (800fb6c <pvPortMalloc+0x184>)
 800fb20:	681b      	ldr	r3, [r3, #0]
 800fb22:	431a      	orrs	r2, r3
 800fb24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb26:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800fb28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb2a:	2200      	movs	r2, #0
 800fb2c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800fb2e:	4b13      	ldr	r3, [pc, #76]	; (800fb7c <pvPortMalloc+0x194>)
 800fb30:	681b      	ldr	r3, [r3, #0]
 800fb32:	3301      	adds	r3, #1
 800fb34:	4a11      	ldr	r2, [pc, #68]	; (800fb7c <pvPortMalloc+0x194>)
 800fb36:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800fb38:	f7fe fb0c 	bl	800e154 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800fb3c:	69fb      	ldr	r3, [r7, #28]
 800fb3e:	f003 0307 	and.w	r3, r3, #7
 800fb42:	2b00      	cmp	r3, #0
 800fb44:	d00a      	beq.n	800fb5c <pvPortMalloc+0x174>
	__asm volatile
 800fb46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb4a:	f383 8811 	msr	BASEPRI, r3
 800fb4e:	f3bf 8f6f 	isb	sy
 800fb52:	f3bf 8f4f 	dsb	sy
 800fb56:	60fb      	str	r3, [r7, #12]
}
 800fb58:	bf00      	nop
 800fb5a:	e7fe      	b.n	800fb5a <pvPortMalloc+0x172>
	return pvReturn;
 800fb5c:	69fb      	ldr	r3, [r7, #28]
}
 800fb5e:	4618      	mov	r0, r3
 800fb60:	3728      	adds	r7, #40	; 0x28
 800fb62:	46bd      	mov	sp, r7
 800fb64:	bd80      	pop	{r7, pc}
 800fb66:	bf00      	nop
 800fb68:	200063a0 	.word	0x200063a0
 800fb6c:	200063b4 	.word	0x200063b4
 800fb70:	200063a4 	.word	0x200063a4
 800fb74:	20006398 	.word	0x20006398
 800fb78:	200063a8 	.word	0x200063a8
 800fb7c:	200063ac 	.word	0x200063ac

0800fb80 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800fb80:	b580      	push	{r7, lr}
 800fb82:	b086      	sub	sp, #24
 800fb84:	af00      	add	r7, sp, #0
 800fb86:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	2b00      	cmp	r3, #0
 800fb90:	d04d      	beq.n	800fc2e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800fb92:	2308      	movs	r3, #8
 800fb94:	425b      	negs	r3, r3
 800fb96:	697a      	ldr	r2, [r7, #20]
 800fb98:	4413      	add	r3, r2
 800fb9a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800fb9c:	697b      	ldr	r3, [r7, #20]
 800fb9e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800fba0:	693b      	ldr	r3, [r7, #16]
 800fba2:	685a      	ldr	r2, [r3, #4]
 800fba4:	4b24      	ldr	r3, [pc, #144]	; (800fc38 <vPortFree+0xb8>)
 800fba6:	681b      	ldr	r3, [r3, #0]
 800fba8:	4013      	ands	r3, r2
 800fbaa:	2b00      	cmp	r3, #0
 800fbac:	d10a      	bne.n	800fbc4 <vPortFree+0x44>
	__asm volatile
 800fbae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbb2:	f383 8811 	msr	BASEPRI, r3
 800fbb6:	f3bf 8f6f 	isb	sy
 800fbba:	f3bf 8f4f 	dsb	sy
 800fbbe:	60fb      	str	r3, [r7, #12]
}
 800fbc0:	bf00      	nop
 800fbc2:	e7fe      	b.n	800fbc2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800fbc4:	693b      	ldr	r3, [r7, #16]
 800fbc6:	681b      	ldr	r3, [r3, #0]
 800fbc8:	2b00      	cmp	r3, #0
 800fbca:	d00a      	beq.n	800fbe2 <vPortFree+0x62>
	__asm volatile
 800fbcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbd0:	f383 8811 	msr	BASEPRI, r3
 800fbd4:	f3bf 8f6f 	isb	sy
 800fbd8:	f3bf 8f4f 	dsb	sy
 800fbdc:	60bb      	str	r3, [r7, #8]
}
 800fbde:	bf00      	nop
 800fbe0:	e7fe      	b.n	800fbe0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800fbe2:	693b      	ldr	r3, [r7, #16]
 800fbe4:	685a      	ldr	r2, [r3, #4]
 800fbe6:	4b14      	ldr	r3, [pc, #80]	; (800fc38 <vPortFree+0xb8>)
 800fbe8:	681b      	ldr	r3, [r3, #0]
 800fbea:	4013      	ands	r3, r2
 800fbec:	2b00      	cmp	r3, #0
 800fbee:	d01e      	beq.n	800fc2e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800fbf0:	693b      	ldr	r3, [r7, #16]
 800fbf2:	681b      	ldr	r3, [r3, #0]
 800fbf4:	2b00      	cmp	r3, #0
 800fbf6:	d11a      	bne.n	800fc2e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800fbf8:	693b      	ldr	r3, [r7, #16]
 800fbfa:	685a      	ldr	r2, [r3, #4]
 800fbfc:	4b0e      	ldr	r3, [pc, #56]	; (800fc38 <vPortFree+0xb8>)
 800fbfe:	681b      	ldr	r3, [r3, #0]
 800fc00:	43db      	mvns	r3, r3
 800fc02:	401a      	ands	r2, r3
 800fc04:	693b      	ldr	r3, [r7, #16]
 800fc06:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800fc08:	f7fe fa96 	bl	800e138 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800fc0c:	693b      	ldr	r3, [r7, #16]
 800fc0e:	685a      	ldr	r2, [r3, #4]
 800fc10:	4b0a      	ldr	r3, [pc, #40]	; (800fc3c <vPortFree+0xbc>)
 800fc12:	681b      	ldr	r3, [r3, #0]
 800fc14:	4413      	add	r3, r2
 800fc16:	4a09      	ldr	r2, [pc, #36]	; (800fc3c <vPortFree+0xbc>)
 800fc18:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800fc1a:	6938      	ldr	r0, [r7, #16]
 800fc1c:	f000 f874 	bl	800fd08 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800fc20:	4b07      	ldr	r3, [pc, #28]	; (800fc40 <vPortFree+0xc0>)
 800fc22:	681b      	ldr	r3, [r3, #0]
 800fc24:	3301      	adds	r3, #1
 800fc26:	4a06      	ldr	r2, [pc, #24]	; (800fc40 <vPortFree+0xc0>)
 800fc28:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800fc2a:	f7fe fa93 	bl	800e154 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800fc2e:	bf00      	nop
 800fc30:	3718      	adds	r7, #24
 800fc32:	46bd      	mov	sp, r7
 800fc34:	bd80      	pop	{r7, pc}
 800fc36:	bf00      	nop
 800fc38:	200063b4 	.word	0x200063b4
 800fc3c:	200063a4 	.word	0x200063a4
 800fc40:	200063b0 	.word	0x200063b0

0800fc44 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800fc44:	b480      	push	{r7}
 800fc46:	b085      	sub	sp, #20
 800fc48:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800fc4a:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 800fc4e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800fc50:	4b27      	ldr	r3, [pc, #156]	; (800fcf0 <prvHeapInit+0xac>)
 800fc52:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800fc54:	68fb      	ldr	r3, [r7, #12]
 800fc56:	f003 0307 	and.w	r3, r3, #7
 800fc5a:	2b00      	cmp	r3, #0
 800fc5c:	d00c      	beq.n	800fc78 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800fc5e:	68fb      	ldr	r3, [r7, #12]
 800fc60:	3307      	adds	r3, #7
 800fc62:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800fc64:	68fb      	ldr	r3, [r7, #12]
 800fc66:	f023 0307 	bic.w	r3, r3, #7
 800fc6a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800fc6c:	68ba      	ldr	r2, [r7, #8]
 800fc6e:	68fb      	ldr	r3, [r7, #12]
 800fc70:	1ad3      	subs	r3, r2, r3
 800fc72:	4a1f      	ldr	r2, [pc, #124]	; (800fcf0 <prvHeapInit+0xac>)
 800fc74:	4413      	add	r3, r2
 800fc76:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800fc78:	68fb      	ldr	r3, [r7, #12]
 800fc7a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800fc7c:	4a1d      	ldr	r2, [pc, #116]	; (800fcf4 <prvHeapInit+0xb0>)
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800fc82:	4b1c      	ldr	r3, [pc, #112]	; (800fcf4 <prvHeapInit+0xb0>)
 800fc84:	2200      	movs	r2, #0
 800fc86:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	68ba      	ldr	r2, [r7, #8]
 800fc8c:	4413      	add	r3, r2
 800fc8e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800fc90:	2208      	movs	r2, #8
 800fc92:	68fb      	ldr	r3, [r7, #12]
 800fc94:	1a9b      	subs	r3, r3, r2
 800fc96:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800fc98:	68fb      	ldr	r3, [r7, #12]
 800fc9a:	f023 0307 	bic.w	r3, r3, #7
 800fc9e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800fca0:	68fb      	ldr	r3, [r7, #12]
 800fca2:	4a15      	ldr	r2, [pc, #84]	; (800fcf8 <prvHeapInit+0xb4>)
 800fca4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800fca6:	4b14      	ldr	r3, [pc, #80]	; (800fcf8 <prvHeapInit+0xb4>)
 800fca8:	681b      	ldr	r3, [r3, #0]
 800fcaa:	2200      	movs	r2, #0
 800fcac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800fcae:	4b12      	ldr	r3, [pc, #72]	; (800fcf8 <prvHeapInit+0xb4>)
 800fcb0:	681b      	ldr	r3, [r3, #0]
 800fcb2:	2200      	movs	r2, #0
 800fcb4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800fcba:	683b      	ldr	r3, [r7, #0]
 800fcbc:	68fa      	ldr	r2, [r7, #12]
 800fcbe:	1ad2      	subs	r2, r2, r3
 800fcc0:	683b      	ldr	r3, [r7, #0]
 800fcc2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800fcc4:	4b0c      	ldr	r3, [pc, #48]	; (800fcf8 <prvHeapInit+0xb4>)
 800fcc6:	681a      	ldr	r2, [r3, #0]
 800fcc8:	683b      	ldr	r3, [r7, #0]
 800fcca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800fccc:	683b      	ldr	r3, [r7, #0]
 800fcce:	685b      	ldr	r3, [r3, #4]
 800fcd0:	4a0a      	ldr	r2, [pc, #40]	; (800fcfc <prvHeapInit+0xb8>)
 800fcd2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800fcd4:	683b      	ldr	r3, [r7, #0]
 800fcd6:	685b      	ldr	r3, [r3, #4]
 800fcd8:	4a09      	ldr	r2, [pc, #36]	; (800fd00 <prvHeapInit+0xbc>)
 800fcda:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800fcdc:	4b09      	ldr	r3, [pc, #36]	; (800fd04 <prvHeapInit+0xc0>)
 800fcde:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800fce2:	601a      	str	r2, [r3, #0]
}
 800fce4:	bf00      	nop
 800fce6:	3714      	adds	r7, #20
 800fce8:	46bd      	mov	sp, r7
 800fcea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcee:	4770      	bx	lr
 800fcf0:	20001398 	.word	0x20001398
 800fcf4:	20006398 	.word	0x20006398
 800fcf8:	200063a0 	.word	0x200063a0
 800fcfc:	200063a8 	.word	0x200063a8
 800fd00:	200063a4 	.word	0x200063a4
 800fd04:	200063b4 	.word	0x200063b4

0800fd08 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800fd08:	b480      	push	{r7}
 800fd0a:	b085      	sub	sp, #20
 800fd0c:	af00      	add	r7, sp, #0
 800fd0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800fd10:	4b28      	ldr	r3, [pc, #160]	; (800fdb4 <prvInsertBlockIntoFreeList+0xac>)
 800fd12:	60fb      	str	r3, [r7, #12]
 800fd14:	e002      	b.n	800fd1c <prvInsertBlockIntoFreeList+0x14>
 800fd16:	68fb      	ldr	r3, [r7, #12]
 800fd18:	681b      	ldr	r3, [r3, #0]
 800fd1a:	60fb      	str	r3, [r7, #12]
 800fd1c:	68fb      	ldr	r3, [r7, #12]
 800fd1e:	681b      	ldr	r3, [r3, #0]
 800fd20:	687a      	ldr	r2, [r7, #4]
 800fd22:	429a      	cmp	r2, r3
 800fd24:	d8f7      	bhi.n	800fd16 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800fd26:	68fb      	ldr	r3, [r7, #12]
 800fd28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800fd2a:	68fb      	ldr	r3, [r7, #12]
 800fd2c:	685b      	ldr	r3, [r3, #4]
 800fd2e:	68ba      	ldr	r2, [r7, #8]
 800fd30:	4413      	add	r3, r2
 800fd32:	687a      	ldr	r2, [r7, #4]
 800fd34:	429a      	cmp	r2, r3
 800fd36:	d108      	bne.n	800fd4a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800fd38:	68fb      	ldr	r3, [r7, #12]
 800fd3a:	685a      	ldr	r2, [r3, #4]
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	685b      	ldr	r3, [r3, #4]
 800fd40:	441a      	add	r2, r3
 800fd42:	68fb      	ldr	r3, [r7, #12]
 800fd44:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800fd46:	68fb      	ldr	r3, [r7, #12]
 800fd48:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	685b      	ldr	r3, [r3, #4]
 800fd52:	68ba      	ldr	r2, [r7, #8]
 800fd54:	441a      	add	r2, r3
 800fd56:	68fb      	ldr	r3, [r7, #12]
 800fd58:	681b      	ldr	r3, [r3, #0]
 800fd5a:	429a      	cmp	r2, r3
 800fd5c:	d118      	bne.n	800fd90 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800fd5e:	68fb      	ldr	r3, [r7, #12]
 800fd60:	681a      	ldr	r2, [r3, #0]
 800fd62:	4b15      	ldr	r3, [pc, #84]	; (800fdb8 <prvInsertBlockIntoFreeList+0xb0>)
 800fd64:	681b      	ldr	r3, [r3, #0]
 800fd66:	429a      	cmp	r2, r3
 800fd68:	d00d      	beq.n	800fd86 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800fd6a:	687b      	ldr	r3, [r7, #4]
 800fd6c:	685a      	ldr	r2, [r3, #4]
 800fd6e:	68fb      	ldr	r3, [r7, #12]
 800fd70:	681b      	ldr	r3, [r3, #0]
 800fd72:	685b      	ldr	r3, [r3, #4]
 800fd74:	441a      	add	r2, r3
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800fd7a:	68fb      	ldr	r3, [r7, #12]
 800fd7c:	681b      	ldr	r3, [r3, #0]
 800fd7e:	681a      	ldr	r2, [r3, #0]
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	601a      	str	r2, [r3, #0]
 800fd84:	e008      	b.n	800fd98 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800fd86:	4b0c      	ldr	r3, [pc, #48]	; (800fdb8 <prvInsertBlockIntoFreeList+0xb0>)
 800fd88:	681a      	ldr	r2, [r3, #0]
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	601a      	str	r2, [r3, #0]
 800fd8e:	e003      	b.n	800fd98 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800fd90:	68fb      	ldr	r3, [r7, #12]
 800fd92:	681a      	ldr	r2, [r3, #0]
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800fd98:	68fa      	ldr	r2, [r7, #12]
 800fd9a:	687b      	ldr	r3, [r7, #4]
 800fd9c:	429a      	cmp	r2, r3
 800fd9e:	d002      	beq.n	800fda6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800fda0:	68fb      	ldr	r3, [r7, #12]
 800fda2:	687a      	ldr	r2, [r7, #4]
 800fda4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fda6:	bf00      	nop
 800fda8:	3714      	adds	r7, #20
 800fdaa:	46bd      	mov	sp, r7
 800fdac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdb0:	4770      	bx	lr
 800fdb2:	bf00      	nop
 800fdb4:	20006398 	.word	0x20006398
 800fdb8:	200063a0 	.word	0x200063a0

0800fdbc <malloc>:
 800fdbc:	4b02      	ldr	r3, [pc, #8]	; (800fdc8 <malloc+0xc>)
 800fdbe:	4601      	mov	r1, r0
 800fdc0:	6818      	ldr	r0, [r3, #0]
 800fdc2:	f000 b823 	b.w	800fe0c <_malloc_r>
 800fdc6:	bf00      	nop
 800fdc8:	200000c4 	.word	0x200000c4

0800fdcc <sbrk_aligned>:
 800fdcc:	b570      	push	{r4, r5, r6, lr}
 800fdce:	4e0e      	ldr	r6, [pc, #56]	; (800fe08 <sbrk_aligned+0x3c>)
 800fdd0:	460c      	mov	r4, r1
 800fdd2:	6831      	ldr	r1, [r6, #0]
 800fdd4:	4605      	mov	r5, r0
 800fdd6:	b911      	cbnz	r1, 800fdde <sbrk_aligned+0x12>
 800fdd8:	f000 fe70 	bl	8010abc <_sbrk_r>
 800fddc:	6030      	str	r0, [r6, #0]
 800fdde:	4621      	mov	r1, r4
 800fde0:	4628      	mov	r0, r5
 800fde2:	f000 fe6b 	bl	8010abc <_sbrk_r>
 800fde6:	1c43      	adds	r3, r0, #1
 800fde8:	d00a      	beq.n	800fe00 <sbrk_aligned+0x34>
 800fdea:	1cc4      	adds	r4, r0, #3
 800fdec:	f024 0403 	bic.w	r4, r4, #3
 800fdf0:	42a0      	cmp	r0, r4
 800fdf2:	d007      	beq.n	800fe04 <sbrk_aligned+0x38>
 800fdf4:	1a21      	subs	r1, r4, r0
 800fdf6:	4628      	mov	r0, r5
 800fdf8:	f000 fe60 	bl	8010abc <_sbrk_r>
 800fdfc:	3001      	adds	r0, #1
 800fdfe:	d101      	bne.n	800fe04 <sbrk_aligned+0x38>
 800fe00:	f04f 34ff 	mov.w	r4, #4294967295
 800fe04:	4620      	mov	r0, r4
 800fe06:	bd70      	pop	{r4, r5, r6, pc}
 800fe08:	200063bc 	.word	0x200063bc

0800fe0c <_malloc_r>:
 800fe0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fe10:	1ccd      	adds	r5, r1, #3
 800fe12:	f025 0503 	bic.w	r5, r5, #3
 800fe16:	3508      	adds	r5, #8
 800fe18:	2d0c      	cmp	r5, #12
 800fe1a:	bf38      	it	cc
 800fe1c:	250c      	movcc	r5, #12
 800fe1e:	2d00      	cmp	r5, #0
 800fe20:	4607      	mov	r7, r0
 800fe22:	db01      	blt.n	800fe28 <_malloc_r+0x1c>
 800fe24:	42a9      	cmp	r1, r5
 800fe26:	d905      	bls.n	800fe34 <_malloc_r+0x28>
 800fe28:	230c      	movs	r3, #12
 800fe2a:	603b      	str	r3, [r7, #0]
 800fe2c:	2600      	movs	r6, #0
 800fe2e:	4630      	mov	r0, r6
 800fe30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fe34:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800ff08 <_malloc_r+0xfc>
 800fe38:	f000 f868 	bl	800ff0c <__malloc_lock>
 800fe3c:	f8d8 3000 	ldr.w	r3, [r8]
 800fe40:	461c      	mov	r4, r3
 800fe42:	bb5c      	cbnz	r4, 800fe9c <_malloc_r+0x90>
 800fe44:	4629      	mov	r1, r5
 800fe46:	4638      	mov	r0, r7
 800fe48:	f7ff ffc0 	bl	800fdcc <sbrk_aligned>
 800fe4c:	1c43      	adds	r3, r0, #1
 800fe4e:	4604      	mov	r4, r0
 800fe50:	d155      	bne.n	800fefe <_malloc_r+0xf2>
 800fe52:	f8d8 4000 	ldr.w	r4, [r8]
 800fe56:	4626      	mov	r6, r4
 800fe58:	2e00      	cmp	r6, #0
 800fe5a:	d145      	bne.n	800fee8 <_malloc_r+0xdc>
 800fe5c:	2c00      	cmp	r4, #0
 800fe5e:	d048      	beq.n	800fef2 <_malloc_r+0xe6>
 800fe60:	6823      	ldr	r3, [r4, #0]
 800fe62:	4631      	mov	r1, r6
 800fe64:	4638      	mov	r0, r7
 800fe66:	eb04 0903 	add.w	r9, r4, r3
 800fe6a:	f000 fe27 	bl	8010abc <_sbrk_r>
 800fe6e:	4581      	cmp	r9, r0
 800fe70:	d13f      	bne.n	800fef2 <_malloc_r+0xe6>
 800fe72:	6821      	ldr	r1, [r4, #0]
 800fe74:	1a6d      	subs	r5, r5, r1
 800fe76:	4629      	mov	r1, r5
 800fe78:	4638      	mov	r0, r7
 800fe7a:	f7ff ffa7 	bl	800fdcc <sbrk_aligned>
 800fe7e:	3001      	adds	r0, #1
 800fe80:	d037      	beq.n	800fef2 <_malloc_r+0xe6>
 800fe82:	6823      	ldr	r3, [r4, #0]
 800fe84:	442b      	add	r3, r5
 800fe86:	6023      	str	r3, [r4, #0]
 800fe88:	f8d8 3000 	ldr.w	r3, [r8]
 800fe8c:	2b00      	cmp	r3, #0
 800fe8e:	d038      	beq.n	800ff02 <_malloc_r+0xf6>
 800fe90:	685a      	ldr	r2, [r3, #4]
 800fe92:	42a2      	cmp	r2, r4
 800fe94:	d12b      	bne.n	800feee <_malloc_r+0xe2>
 800fe96:	2200      	movs	r2, #0
 800fe98:	605a      	str	r2, [r3, #4]
 800fe9a:	e00f      	b.n	800febc <_malloc_r+0xb0>
 800fe9c:	6822      	ldr	r2, [r4, #0]
 800fe9e:	1b52      	subs	r2, r2, r5
 800fea0:	d41f      	bmi.n	800fee2 <_malloc_r+0xd6>
 800fea2:	2a0b      	cmp	r2, #11
 800fea4:	d917      	bls.n	800fed6 <_malloc_r+0xca>
 800fea6:	1961      	adds	r1, r4, r5
 800fea8:	42a3      	cmp	r3, r4
 800feaa:	6025      	str	r5, [r4, #0]
 800feac:	bf18      	it	ne
 800feae:	6059      	strne	r1, [r3, #4]
 800feb0:	6863      	ldr	r3, [r4, #4]
 800feb2:	bf08      	it	eq
 800feb4:	f8c8 1000 	streq.w	r1, [r8]
 800feb8:	5162      	str	r2, [r4, r5]
 800feba:	604b      	str	r3, [r1, #4]
 800febc:	4638      	mov	r0, r7
 800febe:	f104 060b 	add.w	r6, r4, #11
 800fec2:	f000 f829 	bl	800ff18 <__malloc_unlock>
 800fec6:	f026 0607 	bic.w	r6, r6, #7
 800feca:	1d23      	adds	r3, r4, #4
 800fecc:	1af2      	subs	r2, r6, r3
 800fece:	d0ae      	beq.n	800fe2e <_malloc_r+0x22>
 800fed0:	1b9b      	subs	r3, r3, r6
 800fed2:	50a3      	str	r3, [r4, r2]
 800fed4:	e7ab      	b.n	800fe2e <_malloc_r+0x22>
 800fed6:	42a3      	cmp	r3, r4
 800fed8:	6862      	ldr	r2, [r4, #4]
 800feda:	d1dd      	bne.n	800fe98 <_malloc_r+0x8c>
 800fedc:	f8c8 2000 	str.w	r2, [r8]
 800fee0:	e7ec      	b.n	800febc <_malloc_r+0xb0>
 800fee2:	4623      	mov	r3, r4
 800fee4:	6864      	ldr	r4, [r4, #4]
 800fee6:	e7ac      	b.n	800fe42 <_malloc_r+0x36>
 800fee8:	4634      	mov	r4, r6
 800feea:	6876      	ldr	r6, [r6, #4]
 800feec:	e7b4      	b.n	800fe58 <_malloc_r+0x4c>
 800feee:	4613      	mov	r3, r2
 800fef0:	e7cc      	b.n	800fe8c <_malloc_r+0x80>
 800fef2:	230c      	movs	r3, #12
 800fef4:	603b      	str	r3, [r7, #0]
 800fef6:	4638      	mov	r0, r7
 800fef8:	f000 f80e 	bl	800ff18 <__malloc_unlock>
 800fefc:	e797      	b.n	800fe2e <_malloc_r+0x22>
 800fefe:	6025      	str	r5, [r4, #0]
 800ff00:	e7dc      	b.n	800febc <_malloc_r+0xb0>
 800ff02:	605b      	str	r3, [r3, #4]
 800ff04:	deff      	udf	#255	; 0xff
 800ff06:	bf00      	nop
 800ff08:	200063b8 	.word	0x200063b8

0800ff0c <__malloc_lock>:
 800ff0c:	4801      	ldr	r0, [pc, #4]	; (800ff14 <__malloc_lock+0x8>)
 800ff0e:	f000 be22 	b.w	8010b56 <__retarget_lock_acquire_recursive>
 800ff12:	bf00      	nop
 800ff14:	20006500 	.word	0x20006500

0800ff18 <__malloc_unlock>:
 800ff18:	4801      	ldr	r0, [pc, #4]	; (800ff20 <__malloc_unlock+0x8>)
 800ff1a:	f000 be1d 	b.w	8010b58 <__retarget_lock_release_recursive>
 800ff1e:	bf00      	nop
 800ff20:	20006500 	.word	0x20006500

0800ff24 <__cvt>:
 800ff24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ff28:	ec55 4b10 	vmov	r4, r5, d0
 800ff2c:	2d00      	cmp	r5, #0
 800ff2e:	460e      	mov	r6, r1
 800ff30:	4619      	mov	r1, r3
 800ff32:	462b      	mov	r3, r5
 800ff34:	bfbb      	ittet	lt
 800ff36:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800ff3a:	461d      	movlt	r5, r3
 800ff3c:	2300      	movge	r3, #0
 800ff3e:	232d      	movlt	r3, #45	; 0x2d
 800ff40:	700b      	strb	r3, [r1, #0]
 800ff42:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ff44:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800ff48:	4691      	mov	r9, r2
 800ff4a:	f023 0820 	bic.w	r8, r3, #32
 800ff4e:	bfbc      	itt	lt
 800ff50:	4622      	movlt	r2, r4
 800ff52:	4614      	movlt	r4, r2
 800ff54:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ff58:	d005      	beq.n	800ff66 <__cvt+0x42>
 800ff5a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800ff5e:	d100      	bne.n	800ff62 <__cvt+0x3e>
 800ff60:	3601      	adds	r6, #1
 800ff62:	2102      	movs	r1, #2
 800ff64:	e000      	b.n	800ff68 <__cvt+0x44>
 800ff66:	2103      	movs	r1, #3
 800ff68:	ab03      	add	r3, sp, #12
 800ff6a:	9301      	str	r3, [sp, #4]
 800ff6c:	ab02      	add	r3, sp, #8
 800ff6e:	9300      	str	r3, [sp, #0]
 800ff70:	ec45 4b10 	vmov	d0, r4, r5
 800ff74:	4653      	mov	r3, sl
 800ff76:	4632      	mov	r2, r6
 800ff78:	f000 fe86 	bl	8010c88 <_dtoa_r>
 800ff7c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800ff80:	4607      	mov	r7, r0
 800ff82:	d102      	bne.n	800ff8a <__cvt+0x66>
 800ff84:	f019 0f01 	tst.w	r9, #1
 800ff88:	d022      	beq.n	800ffd0 <__cvt+0xac>
 800ff8a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ff8e:	eb07 0906 	add.w	r9, r7, r6
 800ff92:	d110      	bne.n	800ffb6 <__cvt+0x92>
 800ff94:	783b      	ldrb	r3, [r7, #0]
 800ff96:	2b30      	cmp	r3, #48	; 0x30
 800ff98:	d10a      	bne.n	800ffb0 <__cvt+0x8c>
 800ff9a:	2200      	movs	r2, #0
 800ff9c:	2300      	movs	r3, #0
 800ff9e:	4620      	mov	r0, r4
 800ffa0:	4629      	mov	r1, r5
 800ffa2:	f7f0 fda9 	bl	8000af8 <__aeabi_dcmpeq>
 800ffa6:	b918      	cbnz	r0, 800ffb0 <__cvt+0x8c>
 800ffa8:	f1c6 0601 	rsb	r6, r6, #1
 800ffac:	f8ca 6000 	str.w	r6, [sl]
 800ffb0:	f8da 3000 	ldr.w	r3, [sl]
 800ffb4:	4499      	add	r9, r3
 800ffb6:	2200      	movs	r2, #0
 800ffb8:	2300      	movs	r3, #0
 800ffba:	4620      	mov	r0, r4
 800ffbc:	4629      	mov	r1, r5
 800ffbe:	f7f0 fd9b 	bl	8000af8 <__aeabi_dcmpeq>
 800ffc2:	b108      	cbz	r0, 800ffc8 <__cvt+0xa4>
 800ffc4:	f8cd 900c 	str.w	r9, [sp, #12]
 800ffc8:	2230      	movs	r2, #48	; 0x30
 800ffca:	9b03      	ldr	r3, [sp, #12]
 800ffcc:	454b      	cmp	r3, r9
 800ffce:	d307      	bcc.n	800ffe0 <__cvt+0xbc>
 800ffd0:	9b03      	ldr	r3, [sp, #12]
 800ffd2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ffd4:	1bdb      	subs	r3, r3, r7
 800ffd6:	4638      	mov	r0, r7
 800ffd8:	6013      	str	r3, [r2, #0]
 800ffda:	b004      	add	sp, #16
 800ffdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ffe0:	1c59      	adds	r1, r3, #1
 800ffe2:	9103      	str	r1, [sp, #12]
 800ffe4:	701a      	strb	r2, [r3, #0]
 800ffe6:	e7f0      	b.n	800ffca <__cvt+0xa6>

0800ffe8 <__exponent>:
 800ffe8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ffea:	4603      	mov	r3, r0
 800ffec:	2900      	cmp	r1, #0
 800ffee:	bfb8      	it	lt
 800fff0:	4249      	neglt	r1, r1
 800fff2:	f803 2b02 	strb.w	r2, [r3], #2
 800fff6:	bfb4      	ite	lt
 800fff8:	222d      	movlt	r2, #45	; 0x2d
 800fffa:	222b      	movge	r2, #43	; 0x2b
 800fffc:	2909      	cmp	r1, #9
 800fffe:	7042      	strb	r2, [r0, #1]
 8010000:	dd2a      	ble.n	8010058 <__exponent+0x70>
 8010002:	f10d 0207 	add.w	r2, sp, #7
 8010006:	4617      	mov	r7, r2
 8010008:	260a      	movs	r6, #10
 801000a:	4694      	mov	ip, r2
 801000c:	fb91 f5f6 	sdiv	r5, r1, r6
 8010010:	fb06 1415 	mls	r4, r6, r5, r1
 8010014:	3430      	adds	r4, #48	; 0x30
 8010016:	f80c 4c01 	strb.w	r4, [ip, #-1]
 801001a:	460c      	mov	r4, r1
 801001c:	2c63      	cmp	r4, #99	; 0x63
 801001e:	f102 32ff 	add.w	r2, r2, #4294967295
 8010022:	4629      	mov	r1, r5
 8010024:	dcf1      	bgt.n	801000a <__exponent+0x22>
 8010026:	3130      	adds	r1, #48	; 0x30
 8010028:	f1ac 0402 	sub.w	r4, ip, #2
 801002c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8010030:	1c41      	adds	r1, r0, #1
 8010032:	4622      	mov	r2, r4
 8010034:	42ba      	cmp	r2, r7
 8010036:	d30a      	bcc.n	801004e <__exponent+0x66>
 8010038:	f10d 0209 	add.w	r2, sp, #9
 801003c:	eba2 020c 	sub.w	r2, r2, ip
 8010040:	42bc      	cmp	r4, r7
 8010042:	bf88      	it	hi
 8010044:	2200      	movhi	r2, #0
 8010046:	4413      	add	r3, r2
 8010048:	1a18      	subs	r0, r3, r0
 801004a:	b003      	add	sp, #12
 801004c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801004e:	f812 5b01 	ldrb.w	r5, [r2], #1
 8010052:	f801 5f01 	strb.w	r5, [r1, #1]!
 8010056:	e7ed      	b.n	8010034 <__exponent+0x4c>
 8010058:	2330      	movs	r3, #48	; 0x30
 801005a:	3130      	adds	r1, #48	; 0x30
 801005c:	7083      	strb	r3, [r0, #2]
 801005e:	70c1      	strb	r1, [r0, #3]
 8010060:	1d03      	adds	r3, r0, #4
 8010062:	e7f1      	b.n	8010048 <__exponent+0x60>

08010064 <_printf_float>:
 8010064:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010068:	ed2d 8b02 	vpush	{d8}
 801006c:	b08d      	sub	sp, #52	; 0x34
 801006e:	460c      	mov	r4, r1
 8010070:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8010074:	4616      	mov	r6, r2
 8010076:	461f      	mov	r7, r3
 8010078:	4605      	mov	r5, r0
 801007a:	f000 fce7 	bl	8010a4c <_localeconv_r>
 801007e:	f8d0 a000 	ldr.w	sl, [r0]
 8010082:	4650      	mov	r0, sl
 8010084:	f7f0 f90c 	bl	80002a0 <strlen>
 8010088:	2300      	movs	r3, #0
 801008a:	930a      	str	r3, [sp, #40]	; 0x28
 801008c:	6823      	ldr	r3, [r4, #0]
 801008e:	9305      	str	r3, [sp, #20]
 8010090:	f8d8 3000 	ldr.w	r3, [r8]
 8010094:	f894 b018 	ldrb.w	fp, [r4, #24]
 8010098:	3307      	adds	r3, #7
 801009a:	f023 0307 	bic.w	r3, r3, #7
 801009e:	f103 0208 	add.w	r2, r3, #8
 80100a2:	f8c8 2000 	str.w	r2, [r8]
 80100a6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80100aa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80100ae:	9307      	str	r3, [sp, #28]
 80100b0:	f8cd 8018 	str.w	r8, [sp, #24]
 80100b4:	ee08 0a10 	vmov	s16, r0
 80100b8:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80100bc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80100c0:	4b9e      	ldr	r3, [pc, #632]	; (801033c <_printf_float+0x2d8>)
 80100c2:	f04f 32ff 	mov.w	r2, #4294967295
 80100c6:	f7f0 fd49 	bl	8000b5c <__aeabi_dcmpun>
 80100ca:	bb88      	cbnz	r0, 8010130 <_printf_float+0xcc>
 80100cc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80100d0:	4b9a      	ldr	r3, [pc, #616]	; (801033c <_printf_float+0x2d8>)
 80100d2:	f04f 32ff 	mov.w	r2, #4294967295
 80100d6:	f7f0 fd23 	bl	8000b20 <__aeabi_dcmple>
 80100da:	bb48      	cbnz	r0, 8010130 <_printf_float+0xcc>
 80100dc:	2200      	movs	r2, #0
 80100de:	2300      	movs	r3, #0
 80100e0:	4640      	mov	r0, r8
 80100e2:	4649      	mov	r1, r9
 80100e4:	f7f0 fd12 	bl	8000b0c <__aeabi_dcmplt>
 80100e8:	b110      	cbz	r0, 80100f0 <_printf_float+0x8c>
 80100ea:	232d      	movs	r3, #45	; 0x2d
 80100ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80100f0:	4a93      	ldr	r2, [pc, #588]	; (8010340 <_printf_float+0x2dc>)
 80100f2:	4b94      	ldr	r3, [pc, #592]	; (8010344 <_printf_float+0x2e0>)
 80100f4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80100f8:	bf94      	ite	ls
 80100fa:	4690      	movls	r8, r2
 80100fc:	4698      	movhi	r8, r3
 80100fe:	2303      	movs	r3, #3
 8010100:	6123      	str	r3, [r4, #16]
 8010102:	9b05      	ldr	r3, [sp, #20]
 8010104:	f023 0304 	bic.w	r3, r3, #4
 8010108:	6023      	str	r3, [r4, #0]
 801010a:	f04f 0900 	mov.w	r9, #0
 801010e:	9700      	str	r7, [sp, #0]
 8010110:	4633      	mov	r3, r6
 8010112:	aa0b      	add	r2, sp, #44	; 0x2c
 8010114:	4621      	mov	r1, r4
 8010116:	4628      	mov	r0, r5
 8010118:	f000 f9da 	bl	80104d0 <_printf_common>
 801011c:	3001      	adds	r0, #1
 801011e:	f040 8090 	bne.w	8010242 <_printf_float+0x1de>
 8010122:	f04f 30ff 	mov.w	r0, #4294967295
 8010126:	b00d      	add	sp, #52	; 0x34
 8010128:	ecbd 8b02 	vpop	{d8}
 801012c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010130:	4642      	mov	r2, r8
 8010132:	464b      	mov	r3, r9
 8010134:	4640      	mov	r0, r8
 8010136:	4649      	mov	r1, r9
 8010138:	f7f0 fd10 	bl	8000b5c <__aeabi_dcmpun>
 801013c:	b140      	cbz	r0, 8010150 <_printf_float+0xec>
 801013e:	464b      	mov	r3, r9
 8010140:	2b00      	cmp	r3, #0
 8010142:	bfbc      	itt	lt
 8010144:	232d      	movlt	r3, #45	; 0x2d
 8010146:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801014a:	4a7f      	ldr	r2, [pc, #508]	; (8010348 <_printf_float+0x2e4>)
 801014c:	4b7f      	ldr	r3, [pc, #508]	; (801034c <_printf_float+0x2e8>)
 801014e:	e7d1      	b.n	80100f4 <_printf_float+0x90>
 8010150:	6863      	ldr	r3, [r4, #4]
 8010152:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8010156:	9206      	str	r2, [sp, #24]
 8010158:	1c5a      	adds	r2, r3, #1
 801015a:	d13f      	bne.n	80101dc <_printf_float+0x178>
 801015c:	2306      	movs	r3, #6
 801015e:	6063      	str	r3, [r4, #4]
 8010160:	9b05      	ldr	r3, [sp, #20]
 8010162:	6861      	ldr	r1, [r4, #4]
 8010164:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8010168:	2300      	movs	r3, #0
 801016a:	9303      	str	r3, [sp, #12]
 801016c:	ab0a      	add	r3, sp, #40	; 0x28
 801016e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8010172:	ab09      	add	r3, sp, #36	; 0x24
 8010174:	ec49 8b10 	vmov	d0, r8, r9
 8010178:	9300      	str	r3, [sp, #0]
 801017a:	6022      	str	r2, [r4, #0]
 801017c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8010180:	4628      	mov	r0, r5
 8010182:	f7ff fecf 	bl	800ff24 <__cvt>
 8010186:	9b06      	ldr	r3, [sp, #24]
 8010188:	9909      	ldr	r1, [sp, #36]	; 0x24
 801018a:	2b47      	cmp	r3, #71	; 0x47
 801018c:	4680      	mov	r8, r0
 801018e:	d108      	bne.n	80101a2 <_printf_float+0x13e>
 8010190:	1cc8      	adds	r0, r1, #3
 8010192:	db02      	blt.n	801019a <_printf_float+0x136>
 8010194:	6863      	ldr	r3, [r4, #4]
 8010196:	4299      	cmp	r1, r3
 8010198:	dd41      	ble.n	801021e <_printf_float+0x1ba>
 801019a:	f1ab 0302 	sub.w	r3, fp, #2
 801019e:	fa5f fb83 	uxtb.w	fp, r3
 80101a2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80101a6:	d820      	bhi.n	80101ea <_printf_float+0x186>
 80101a8:	3901      	subs	r1, #1
 80101aa:	465a      	mov	r2, fp
 80101ac:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80101b0:	9109      	str	r1, [sp, #36]	; 0x24
 80101b2:	f7ff ff19 	bl	800ffe8 <__exponent>
 80101b6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80101b8:	1813      	adds	r3, r2, r0
 80101ba:	2a01      	cmp	r2, #1
 80101bc:	4681      	mov	r9, r0
 80101be:	6123      	str	r3, [r4, #16]
 80101c0:	dc02      	bgt.n	80101c8 <_printf_float+0x164>
 80101c2:	6822      	ldr	r2, [r4, #0]
 80101c4:	07d2      	lsls	r2, r2, #31
 80101c6:	d501      	bpl.n	80101cc <_printf_float+0x168>
 80101c8:	3301      	adds	r3, #1
 80101ca:	6123      	str	r3, [r4, #16]
 80101cc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80101d0:	2b00      	cmp	r3, #0
 80101d2:	d09c      	beq.n	801010e <_printf_float+0xaa>
 80101d4:	232d      	movs	r3, #45	; 0x2d
 80101d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80101da:	e798      	b.n	801010e <_printf_float+0xaa>
 80101dc:	9a06      	ldr	r2, [sp, #24]
 80101de:	2a47      	cmp	r2, #71	; 0x47
 80101e0:	d1be      	bne.n	8010160 <_printf_float+0xfc>
 80101e2:	2b00      	cmp	r3, #0
 80101e4:	d1bc      	bne.n	8010160 <_printf_float+0xfc>
 80101e6:	2301      	movs	r3, #1
 80101e8:	e7b9      	b.n	801015e <_printf_float+0xfa>
 80101ea:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80101ee:	d118      	bne.n	8010222 <_printf_float+0x1be>
 80101f0:	2900      	cmp	r1, #0
 80101f2:	6863      	ldr	r3, [r4, #4]
 80101f4:	dd0b      	ble.n	801020e <_printf_float+0x1aa>
 80101f6:	6121      	str	r1, [r4, #16]
 80101f8:	b913      	cbnz	r3, 8010200 <_printf_float+0x19c>
 80101fa:	6822      	ldr	r2, [r4, #0]
 80101fc:	07d0      	lsls	r0, r2, #31
 80101fe:	d502      	bpl.n	8010206 <_printf_float+0x1a2>
 8010200:	3301      	adds	r3, #1
 8010202:	440b      	add	r3, r1
 8010204:	6123      	str	r3, [r4, #16]
 8010206:	65a1      	str	r1, [r4, #88]	; 0x58
 8010208:	f04f 0900 	mov.w	r9, #0
 801020c:	e7de      	b.n	80101cc <_printf_float+0x168>
 801020e:	b913      	cbnz	r3, 8010216 <_printf_float+0x1b2>
 8010210:	6822      	ldr	r2, [r4, #0]
 8010212:	07d2      	lsls	r2, r2, #31
 8010214:	d501      	bpl.n	801021a <_printf_float+0x1b6>
 8010216:	3302      	adds	r3, #2
 8010218:	e7f4      	b.n	8010204 <_printf_float+0x1a0>
 801021a:	2301      	movs	r3, #1
 801021c:	e7f2      	b.n	8010204 <_printf_float+0x1a0>
 801021e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8010222:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010224:	4299      	cmp	r1, r3
 8010226:	db05      	blt.n	8010234 <_printf_float+0x1d0>
 8010228:	6823      	ldr	r3, [r4, #0]
 801022a:	6121      	str	r1, [r4, #16]
 801022c:	07d8      	lsls	r0, r3, #31
 801022e:	d5ea      	bpl.n	8010206 <_printf_float+0x1a2>
 8010230:	1c4b      	adds	r3, r1, #1
 8010232:	e7e7      	b.n	8010204 <_printf_float+0x1a0>
 8010234:	2900      	cmp	r1, #0
 8010236:	bfd4      	ite	le
 8010238:	f1c1 0202 	rsble	r2, r1, #2
 801023c:	2201      	movgt	r2, #1
 801023e:	4413      	add	r3, r2
 8010240:	e7e0      	b.n	8010204 <_printf_float+0x1a0>
 8010242:	6823      	ldr	r3, [r4, #0]
 8010244:	055a      	lsls	r2, r3, #21
 8010246:	d407      	bmi.n	8010258 <_printf_float+0x1f4>
 8010248:	6923      	ldr	r3, [r4, #16]
 801024a:	4642      	mov	r2, r8
 801024c:	4631      	mov	r1, r6
 801024e:	4628      	mov	r0, r5
 8010250:	47b8      	blx	r7
 8010252:	3001      	adds	r0, #1
 8010254:	d12c      	bne.n	80102b0 <_printf_float+0x24c>
 8010256:	e764      	b.n	8010122 <_printf_float+0xbe>
 8010258:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801025c:	f240 80e0 	bls.w	8010420 <_printf_float+0x3bc>
 8010260:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010264:	2200      	movs	r2, #0
 8010266:	2300      	movs	r3, #0
 8010268:	f7f0 fc46 	bl	8000af8 <__aeabi_dcmpeq>
 801026c:	2800      	cmp	r0, #0
 801026e:	d034      	beq.n	80102da <_printf_float+0x276>
 8010270:	4a37      	ldr	r2, [pc, #220]	; (8010350 <_printf_float+0x2ec>)
 8010272:	2301      	movs	r3, #1
 8010274:	4631      	mov	r1, r6
 8010276:	4628      	mov	r0, r5
 8010278:	47b8      	blx	r7
 801027a:	3001      	adds	r0, #1
 801027c:	f43f af51 	beq.w	8010122 <_printf_float+0xbe>
 8010280:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010284:	429a      	cmp	r2, r3
 8010286:	db02      	blt.n	801028e <_printf_float+0x22a>
 8010288:	6823      	ldr	r3, [r4, #0]
 801028a:	07d8      	lsls	r0, r3, #31
 801028c:	d510      	bpl.n	80102b0 <_printf_float+0x24c>
 801028e:	ee18 3a10 	vmov	r3, s16
 8010292:	4652      	mov	r2, sl
 8010294:	4631      	mov	r1, r6
 8010296:	4628      	mov	r0, r5
 8010298:	47b8      	blx	r7
 801029a:	3001      	adds	r0, #1
 801029c:	f43f af41 	beq.w	8010122 <_printf_float+0xbe>
 80102a0:	f04f 0800 	mov.w	r8, #0
 80102a4:	f104 091a 	add.w	r9, r4, #26
 80102a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80102aa:	3b01      	subs	r3, #1
 80102ac:	4543      	cmp	r3, r8
 80102ae:	dc09      	bgt.n	80102c4 <_printf_float+0x260>
 80102b0:	6823      	ldr	r3, [r4, #0]
 80102b2:	079b      	lsls	r3, r3, #30
 80102b4:	f100 8107 	bmi.w	80104c6 <_printf_float+0x462>
 80102b8:	68e0      	ldr	r0, [r4, #12]
 80102ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80102bc:	4298      	cmp	r0, r3
 80102be:	bfb8      	it	lt
 80102c0:	4618      	movlt	r0, r3
 80102c2:	e730      	b.n	8010126 <_printf_float+0xc2>
 80102c4:	2301      	movs	r3, #1
 80102c6:	464a      	mov	r2, r9
 80102c8:	4631      	mov	r1, r6
 80102ca:	4628      	mov	r0, r5
 80102cc:	47b8      	blx	r7
 80102ce:	3001      	adds	r0, #1
 80102d0:	f43f af27 	beq.w	8010122 <_printf_float+0xbe>
 80102d4:	f108 0801 	add.w	r8, r8, #1
 80102d8:	e7e6      	b.n	80102a8 <_printf_float+0x244>
 80102da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80102dc:	2b00      	cmp	r3, #0
 80102de:	dc39      	bgt.n	8010354 <_printf_float+0x2f0>
 80102e0:	4a1b      	ldr	r2, [pc, #108]	; (8010350 <_printf_float+0x2ec>)
 80102e2:	2301      	movs	r3, #1
 80102e4:	4631      	mov	r1, r6
 80102e6:	4628      	mov	r0, r5
 80102e8:	47b8      	blx	r7
 80102ea:	3001      	adds	r0, #1
 80102ec:	f43f af19 	beq.w	8010122 <_printf_float+0xbe>
 80102f0:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80102f4:	4313      	orrs	r3, r2
 80102f6:	d102      	bne.n	80102fe <_printf_float+0x29a>
 80102f8:	6823      	ldr	r3, [r4, #0]
 80102fa:	07d9      	lsls	r1, r3, #31
 80102fc:	d5d8      	bpl.n	80102b0 <_printf_float+0x24c>
 80102fe:	ee18 3a10 	vmov	r3, s16
 8010302:	4652      	mov	r2, sl
 8010304:	4631      	mov	r1, r6
 8010306:	4628      	mov	r0, r5
 8010308:	47b8      	blx	r7
 801030a:	3001      	adds	r0, #1
 801030c:	f43f af09 	beq.w	8010122 <_printf_float+0xbe>
 8010310:	f04f 0900 	mov.w	r9, #0
 8010314:	f104 0a1a 	add.w	sl, r4, #26
 8010318:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801031a:	425b      	negs	r3, r3
 801031c:	454b      	cmp	r3, r9
 801031e:	dc01      	bgt.n	8010324 <_printf_float+0x2c0>
 8010320:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010322:	e792      	b.n	801024a <_printf_float+0x1e6>
 8010324:	2301      	movs	r3, #1
 8010326:	4652      	mov	r2, sl
 8010328:	4631      	mov	r1, r6
 801032a:	4628      	mov	r0, r5
 801032c:	47b8      	blx	r7
 801032e:	3001      	adds	r0, #1
 8010330:	f43f aef7 	beq.w	8010122 <_printf_float+0xbe>
 8010334:	f109 0901 	add.w	r9, r9, #1
 8010338:	e7ee      	b.n	8010318 <_printf_float+0x2b4>
 801033a:	bf00      	nop
 801033c:	7fefffff 	.word	0x7fefffff
 8010340:	0801463c 	.word	0x0801463c
 8010344:	08014640 	.word	0x08014640
 8010348:	08014644 	.word	0x08014644
 801034c:	08014648 	.word	0x08014648
 8010350:	0801464c 	.word	0x0801464c
 8010354:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010356:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010358:	429a      	cmp	r2, r3
 801035a:	bfa8      	it	ge
 801035c:	461a      	movge	r2, r3
 801035e:	2a00      	cmp	r2, #0
 8010360:	4691      	mov	r9, r2
 8010362:	dc37      	bgt.n	80103d4 <_printf_float+0x370>
 8010364:	f04f 0b00 	mov.w	fp, #0
 8010368:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801036c:	f104 021a 	add.w	r2, r4, #26
 8010370:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010372:	9305      	str	r3, [sp, #20]
 8010374:	eba3 0309 	sub.w	r3, r3, r9
 8010378:	455b      	cmp	r3, fp
 801037a:	dc33      	bgt.n	80103e4 <_printf_float+0x380>
 801037c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010380:	429a      	cmp	r2, r3
 8010382:	db3b      	blt.n	80103fc <_printf_float+0x398>
 8010384:	6823      	ldr	r3, [r4, #0]
 8010386:	07da      	lsls	r2, r3, #31
 8010388:	d438      	bmi.n	80103fc <_printf_float+0x398>
 801038a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 801038e:	eba2 0903 	sub.w	r9, r2, r3
 8010392:	9b05      	ldr	r3, [sp, #20]
 8010394:	1ad2      	subs	r2, r2, r3
 8010396:	4591      	cmp	r9, r2
 8010398:	bfa8      	it	ge
 801039a:	4691      	movge	r9, r2
 801039c:	f1b9 0f00 	cmp.w	r9, #0
 80103a0:	dc35      	bgt.n	801040e <_printf_float+0x3aa>
 80103a2:	f04f 0800 	mov.w	r8, #0
 80103a6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80103aa:	f104 0a1a 	add.w	sl, r4, #26
 80103ae:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80103b2:	1a9b      	subs	r3, r3, r2
 80103b4:	eba3 0309 	sub.w	r3, r3, r9
 80103b8:	4543      	cmp	r3, r8
 80103ba:	f77f af79 	ble.w	80102b0 <_printf_float+0x24c>
 80103be:	2301      	movs	r3, #1
 80103c0:	4652      	mov	r2, sl
 80103c2:	4631      	mov	r1, r6
 80103c4:	4628      	mov	r0, r5
 80103c6:	47b8      	blx	r7
 80103c8:	3001      	adds	r0, #1
 80103ca:	f43f aeaa 	beq.w	8010122 <_printf_float+0xbe>
 80103ce:	f108 0801 	add.w	r8, r8, #1
 80103d2:	e7ec      	b.n	80103ae <_printf_float+0x34a>
 80103d4:	4613      	mov	r3, r2
 80103d6:	4631      	mov	r1, r6
 80103d8:	4642      	mov	r2, r8
 80103da:	4628      	mov	r0, r5
 80103dc:	47b8      	blx	r7
 80103de:	3001      	adds	r0, #1
 80103e0:	d1c0      	bne.n	8010364 <_printf_float+0x300>
 80103e2:	e69e      	b.n	8010122 <_printf_float+0xbe>
 80103e4:	2301      	movs	r3, #1
 80103e6:	4631      	mov	r1, r6
 80103e8:	4628      	mov	r0, r5
 80103ea:	9205      	str	r2, [sp, #20]
 80103ec:	47b8      	blx	r7
 80103ee:	3001      	adds	r0, #1
 80103f0:	f43f ae97 	beq.w	8010122 <_printf_float+0xbe>
 80103f4:	9a05      	ldr	r2, [sp, #20]
 80103f6:	f10b 0b01 	add.w	fp, fp, #1
 80103fa:	e7b9      	b.n	8010370 <_printf_float+0x30c>
 80103fc:	ee18 3a10 	vmov	r3, s16
 8010400:	4652      	mov	r2, sl
 8010402:	4631      	mov	r1, r6
 8010404:	4628      	mov	r0, r5
 8010406:	47b8      	blx	r7
 8010408:	3001      	adds	r0, #1
 801040a:	d1be      	bne.n	801038a <_printf_float+0x326>
 801040c:	e689      	b.n	8010122 <_printf_float+0xbe>
 801040e:	9a05      	ldr	r2, [sp, #20]
 8010410:	464b      	mov	r3, r9
 8010412:	4442      	add	r2, r8
 8010414:	4631      	mov	r1, r6
 8010416:	4628      	mov	r0, r5
 8010418:	47b8      	blx	r7
 801041a:	3001      	adds	r0, #1
 801041c:	d1c1      	bne.n	80103a2 <_printf_float+0x33e>
 801041e:	e680      	b.n	8010122 <_printf_float+0xbe>
 8010420:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010422:	2a01      	cmp	r2, #1
 8010424:	dc01      	bgt.n	801042a <_printf_float+0x3c6>
 8010426:	07db      	lsls	r3, r3, #31
 8010428:	d53a      	bpl.n	80104a0 <_printf_float+0x43c>
 801042a:	2301      	movs	r3, #1
 801042c:	4642      	mov	r2, r8
 801042e:	4631      	mov	r1, r6
 8010430:	4628      	mov	r0, r5
 8010432:	47b8      	blx	r7
 8010434:	3001      	adds	r0, #1
 8010436:	f43f ae74 	beq.w	8010122 <_printf_float+0xbe>
 801043a:	ee18 3a10 	vmov	r3, s16
 801043e:	4652      	mov	r2, sl
 8010440:	4631      	mov	r1, r6
 8010442:	4628      	mov	r0, r5
 8010444:	47b8      	blx	r7
 8010446:	3001      	adds	r0, #1
 8010448:	f43f ae6b 	beq.w	8010122 <_printf_float+0xbe>
 801044c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010450:	2200      	movs	r2, #0
 8010452:	2300      	movs	r3, #0
 8010454:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8010458:	f7f0 fb4e 	bl	8000af8 <__aeabi_dcmpeq>
 801045c:	b9d8      	cbnz	r0, 8010496 <_printf_float+0x432>
 801045e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8010462:	f108 0201 	add.w	r2, r8, #1
 8010466:	4631      	mov	r1, r6
 8010468:	4628      	mov	r0, r5
 801046a:	47b8      	blx	r7
 801046c:	3001      	adds	r0, #1
 801046e:	d10e      	bne.n	801048e <_printf_float+0x42a>
 8010470:	e657      	b.n	8010122 <_printf_float+0xbe>
 8010472:	2301      	movs	r3, #1
 8010474:	4652      	mov	r2, sl
 8010476:	4631      	mov	r1, r6
 8010478:	4628      	mov	r0, r5
 801047a:	47b8      	blx	r7
 801047c:	3001      	adds	r0, #1
 801047e:	f43f ae50 	beq.w	8010122 <_printf_float+0xbe>
 8010482:	f108 0801 	add.w	r8, r8, #1
 8010486:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010488:	3b01      	subs	r3, #1
 801048a:	4543      	cmp	r3, r8
 801048c:	dcf1      	bgt.n	8010472 <_printf_float+0x40e>
 801048e:	464b      	mov	r3, r9
 8010490:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8010494:	e6da      	b.n	801024c <_printf_float+0x1e8>
 8010496:	f04f 0800 	mov.w	r8, #0
 801049a:	f104 0a1a 	add.w	sl, r4, #26
 801049e:	e7f2      	b.n	8010486 <_printf_float+0x422>
 80104a0:	2301      	movs	r3, #1
 80104a2:	4642      	mov	r2, r8
 80104a4:	e7df      	b.n	8010466 <_printf_float+0x402>
 80104a6:	2301      	movs	r3, #1
 80104a8:	464a      	mov	r2, r9
 80104aa:	4631      	mov	r1, r6
 80104ac:	4628      	mov	r0, r5
 80104ae:	47b8      	blx	r7
 80104b0:	3001      	adds	r0, #1
 80104b2:	f43f ae36 	beq.w	8010122 <_printf_float+0xbe>
 80104b6:	f108 0801 	add.w	r8, r8, #1
 80104ba:	68e3      	ldr	r3, [r4, #12]
 80104bc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80104be:	1a5b      	subs	r3, r3, r1
 80104c0:	4543      	cmp	r3, r8
 80104c2:	dcf0      	bgt.n	80104a6 <_printf_float+0x442>
 80104c4:	e6f8      	b.n	80102b8 <_printf_float+0x254>
 80104c6:	f04f 0800 	mov.w	r8, #0
 80104ca:	f104 0919 	add.w	r9, r4, #25
 80104ce:	e7f4      	b.n	80104ba <_printf_float+0x456>

080104d0 <_printf_common>:
 80104d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80104d4:	4616      	mov	r6, r2
 80104d6:	4699      	mov	r9, r3
 80104d8:	688a      	ldr	r2, [r1, #8]
 80104da:	690b      	ldr	r3, [r1, #16]
 80104dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80104e0:	4293      	cmp	r3, r2
 80104e2:	bfb8      	it	lt
 80104e4:	4613      	movlt	r3, r2
 80104e6:	6033      	str	r3, [r6, #0]
 80104e8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80104ec:	4607      	mov	r7, r0
 80104ee:	460c      	mov	r4, r1
 80104f0:	b10a      	cbz	r2, 80104f6 <_printf_common+0x26>
 80104f2:	3301      	adds	r3, #1
 80104f4:	6033      	str	r3, [r6, #0]
 80104f6:	6823      	ldr	r3, [r4, #0]
 80104f8:	0699      	lsls	r1, r3, #26
 80104fa:	bf42      	ittt	mi
 80104fc:	6833      	ldrmi	r3, [r6, #0]
 80104fe:	3302      	addmi	r3, #2
 8010500:	6033      	strmi	r3, [r6, #0]
 8010502:	6825      	ldr	r5, [r4, #0]
 8010504:	f015 0506 	ands.w	r5, r5, #6
 8010508:	d106      	bne.n	8010518 <_printf_common+0x48>
 801050a:	f104 0a19 	add.w	sl, r4, #25
 801050e:	68e3      	ldr	r3, [r4, #12]
 8010510:	6832      	ldr	r2, [r6, #0]
 8010512:	1a9b      	subs	r3, r3, r2
 8010514:	42ab      	cmp	r3, r5
 8010516:	dc26      	bgt.n	8010566 <_printf_common+0x96>
 8010518:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801051c:	1e13      	subs	r3, r2, #0
 801051e:	6822      	ldr	r2, [r4, #0]
 8010520:	bf18      	it	ne
 8010522:	2301      	movne	r3, #1
 8010524:	0692      	lsls	r2, r2, #26
 8010526:	d42b      	bmi.n	8010580 <_printf_common+0xb0>
 8010528:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801052c:	4649      	mov	r1, r9
 801052e:	4638      	mov	r0, r7
 8010530:	47c0      	blx	r8
 8010532:	3001      	adds	r0, #1
 8010534:	d01e      	beq.n	8010574 <_printf_common+0xa4>
 8010536:	6823      	ldr	r3, [r4, #0]
 8010538:	6922      	ldr	r2, [r4, #16]
 801053a:	f003 0306 	and.w	r3, r3, #6
 801053e:	2b04      	cmp	r3, #4
 8010540:	bf02      	ittt	eq
 8010542:	68e5      	ldreq	r5, [r4, #12]
 8010544:	6833      	ldreq	r3, [r6, #0]
 8010546:	1aed      	subeq	r5, r5, r3
 8010548:	68a3      	ldr	r3, [r4, #8]
 801054a:	bf0c      	ite	eq
 801054c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010550:	2500      	movne	r5, #0
 8010552:	4293      	cmp	r3, r2
 8010554:	bfc4      	itt	gt
 8010556:	1a9b      	subgt	r3, r3, r2
 8010558:	18ed      	addgt	r5, r5, r3
 801055a:	2600      	movs	r6, #0
 801055c:	341a      	adds	r4, #26
 801055e:	42b5      	cmp	r5, r6
 8010560:	d11a      	bne.n	8010598 <_printf_common+0xc8>
 8010562:	2000      	movs	r0, #0
 8010564:	e008      	b.n	8010578 <_printf_common+0xa8>
 8010566:	2301      	movs	r3, #1
 8010568:	4652      	mov	r2, sl
 801056a:	4649      	mov	r1, r9
 801056c:	4638      	mov	r0, r7
 801056e:	47c0      	blx	r8
 8010570:	3001      	adds	r0, #1
 8010572:	d103      	bne.n	801057c <_printf_common+0xac>
 8010574:	f04f 30ff 	mov.w	r0, #4294967295
 8010578:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801057c:	3501      	adds	r5, #1
 801057e:	e7c6      	b.n	801050e <_printf_common+0x3e>
 8010580:	18e1      	adds	r1, r4, r3
 8010582:	1c5a      	adds	r2, r3, #1
 8010584:	2030      	movs	r0, #48	; 0x30
 8010586:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801058a:	4422      	add	r2, r4
 801058c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010590:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010594:	3302      	adds	r3, #2
 8010596:	e7c7      	b.n	8010528 <_printf_common+0x58>
 8010598:	2301      	movs	r3, #1
 801059a:	4622      	mov	r2, r4
 801059c:	4649      	mov	r1, r9
 801059e:	4638      	mov	r0, r7
 80105a0:	47c0      	blx	r8
 80105a2:	3001      	adds	r0, #1
 80105a4:	d0e6      	beq.n	8010574 <_printf_common+0xa4>
 80105a6:	3601      	adds	r6, #1
 80105a8:	e7d9      	b.n	801055e <_printf_common+0x8e>
	...

080105ac <_printf_i>:
 80105ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80105b0:	7e0f      	ldrb	r7, [r1, #24]
 80105b2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80105b4:	2f78      	cmp	r7, #120	; 0x78
 80105b6:	4691      	mov	r9, r2
 80105b8:	4680      	mov	r8, r0
 80105ba:	460c      	mov	r4, r1
 80105bc:	469a      	mov	sl, r3
 80105be:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80105c2:	d807      	bhi.n	80105d4 <_printf_i+0x28>
 80105c4:	2f62      	cmp	r7, #98	; 0x62
 80105c6:	d80a      	bhi.n	80105de <_printf_i+0x32>
 80105c8:	2f00      	cmp	r7, #0
 80105ca:	f000 80d4 	beq.w	8010776 <_printf_i+0x1ca>
 80105ce:	2f58      	cmp	r7, #88	; 0x58
 80105d0:	f000 80c0 	beq.w	8010754 <_printf_i+0x1a8>
 80105d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80105d8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80105dc:	e03a      	b.n	8010654 <_printf_i+0xa8>
 80105de:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80105e2:	2b15      	cmp	r3, #21
 80105e4:	d8f6      	bhi.n	80105d4 <_printf_i+0x28>
 80105e6:	a101      	add	r1, pc, #4	; (adr r1, 80105ec <_printf_i+0x40>)
 80105e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80105ec:	08010645 	.word	0x08010645
 80105f0:	08010659 	.word	0x08010659
 80105f4:	080105d5 	.word	0x080105d5
 80105f8:	080105d5 	.word	0x080105d5
 80105fc:	080105d5 	.word	0x080105d5
 8010600:	080105d5 	.word	0x080105d5
 8010604:	08010659 	.word	0x08010659
 8010608:	080105d5 	.word	0x080105d5
 801060c:	080105d5 	.word	0x080105d5
 8010610:	080105d5 	.word	0x080105d5
 8010614:	080105d5 	.word	0x080105d5
 8010618:	0801075d 	.word	0x0801075d
 801061c:	08010685 	.word	0x08010685
 8010620:	08010717 	.word	0x08010717
 8010624:	080105d5 	.word	0x080105d5
 8010628:	080105d5 	.word	0x080105d5
 801062c:	0801077f 	.word	0x0801077f
 8010630:	080105d5 	.word	0x080105d5
 8010634:	08010685 	.word	0x08010685
 8010638:	080105d5 	.word	0x080105d5
 801063c:	080105d5 	.word	0x080105d5
 8010640:	0801071f 	.word	0x0801071f
 8010644:	682b      	ldr	r3, [r5, #0]
 8010646:	1d1a      	adds	r2, r3, #4
 8010648:	681b      	ldr	r3, [r3, #0]
 801064a:	602a      	str	r2, [r5, #0]
 801064c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010650:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010654:	2301      	movs	r3, #1
 8010656:	e09f      	b.n	8010798 <_printf_i+0x1ec>
 8010658:	6820      	ldr	r0, [r4, #0]
 801065a:	682b      	ldr	r3, [r5, #0]
 801065c:	0607      	lsls	r7, r0, #24
 801065e:	f103 0104 	add.w	r1, r3, #4
 8010662:	6029      	str	r1, [r5, #0]
 8010664:	d501      	bpl.n	801066a <_printf_i+0xbe>
 8010666:	681e      	ldr	r6, [r3, #0]
 8010668:	e003      	b.n	8010672 <_printf_i+0xc6>
 801066a:	0646      	lsls	r6, r0, #25
 801066c:	d5fb      	bpl.n	8010666 <_printf_i+0xba>
 801066e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8010672:	2e00      	cmp	r6, #0
 8010674:	da03      	bge.n	801067e <_printf_i+0xd2>
 8010676:	232d      	movs	r3, #45	; 0x2d
 8010678:	4276      	negs	r6, r6
 801067a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801067e:	485a      	ldr	r0, [pc, #360]	; (80107e8 <_printf_i+0x23c>)
 8010680:	230a      	movs	r3, #10
 8010682:	e012      	b.n	80106aa <_printf_i+0xfe>
 8010684:	682b      	ldr	r3, [r5, #0]
 8010686:	6820      	ldr	r0, [r4, #0]
 8010688:	1d19      	adds	r1, r3, #4
 801068a:	6029      	str	r1, [r5, #0]
 801068c:	0605      	lsls	r5, r0, #24
 801068e:	d501      	bpl.n	8010694 <_printf_i+0xe8>
 8010690:	681e      	ldr	r6, [r3, #0]
 8010692:	e002      	b.n	801069a <_printf_i+0xee>
 8010694:	0641      	lsls	r1, r0, #25
 8010696:	d5fb      	bpl.n	8010690 <_printf_i+0xe4>
 8010698:	881e      	ldrh	r6, [r3, #0]
 801069a:	4853      	ldr	r0, [pc, #332]	; (80107e8 <_printf_i+0x23c>)
 801069c:	2f6f      	cmp	r7, #111	; 0x6f
 801069e:	bf0c      	ite	eq
 80106a0:	2308      	moveq	r3, #8
 80106a2:	230a      	movne	r3, #10
 80106a4:	2100      	movs	r1, #0
 80106a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80106aa:	6865      	ldr	r5, [r4, #4]
 80106ac:	60a5      	str	r5, [r4, #8]
 80106ae:	2d00      	cmp	r5, #0
 80106b0:	bfa2      	ittt	ge
 80106b2:	6821      	ldrge	r1, [r4, #0]
 80106b4:	f021 0104 	bicge.w	r1, r1, #4
 80106b8:	6021      	strge	r1, [r4, #0]
 80106ba:	b90e      	cbnz	r6, 80106c0 <_printf_i+0x114>
 80106bc:	2d00      	cmp	r5, #0
 80106be:	d04b      	beq.n	8010758 <_printf_i+0x1ac>
 80106c0:	4615      	mov	r5, r2
 80106c2:	fbb6 f1f3 	udiv	r1, r6, r3
 80106c6:	fb03 6711 	mls	r7, r3, r1, r6
 80106ca:	5dc7      	ldrb	r7, [r0, r7]
 80106cc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80106d0:	4637      	mov	r7, r6
 80106d2:	42bb      	cmp	r3, r7
 80106d4:	460e      	mov	r6, r1
 80106d6:	d9f4      	bls.n	80106c2 <_printf_i+0x116>
 80106d8:	2b08      	cmp	r3, #8
 80106da:	d10b      	bne.n	80106f4 <_printf_i+0x148>
 80106dc:	6823      	ldr	r3, [r4, #0]
 80106de:	07de      	lsls	r6, r3, #31
 80106e0:	d508      	bpl.n	80106f4 <_printf_i+0x148>
 80106e2:	6923      	ldr	r3, [r4, #16]
 80106e4:	6861      	ldr	r1, [r4, #4]
 80106e6:	4299      	cmp	r1, r3
 80106e8:	bfde      	ittt	le
 80106ea:	2330      	movle	r3, #48	; 0x30
 80106ec:	f805 3c01 	strble.w	r3, [r5, #-1]
 80106f0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80106f4:	1b52      	subs	r2, r2, r5
 80106f6:	6122      	str	r2, [r4, #16]
 80106f8:	f8cd a000 	str.w	sl, [sp]
 80106fc:	464b      	mov	r3, r9
 80106fe:	aa03      	add	r2, sp, #12
 8010700:	4621      	mov	r1, r4
 8010702:	4640      	mov	r0, r8
 8010704:	f7ff fee4 	bl	80104d0 <_printf_common>
 8010708:	3001      	adds	r0, #1
 801070a:	d14a      	bne.n	80107a2 <_printf_i+0x1f6>
 801070c:	f04f 30ff 	mov.w	r0, #4294967295
 8010710:	b004      	add	sp, #16
 8010712:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010716:	6823      	ldr	r3, [r4, #0]
 8010718:	f043 0320 	orr.w	r3, r3, #32
 801071c:	6023      	str	r3, [r4, #0]
 801071e:	4833      	ldr	r0, [pc, #204]	; (80107ec <_printf_i+0x240>)
 8010720:	2778      	movs	r7, #120	; 0x78
 8010722:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8010726:	6823      	ldr	r3, [r4, #0]
 8010728:	6829      	ldr	r1, [r5, #0]
 801072a:	061f      	lsls	r7, r3, #24
 801072c:	f851 6b04 	ldr.w	r6, [r1], #4
 8010730:	d402      	bmi.n	8010738 <_printf_i+0x18c>
 8010732:	065f      	lsls	r7, r3, #25
 8010734:	bf48      	it	mi
 8010736:	b2b6      	uxthmi	r6, r6
 8010738:	07df      	lsls	r7, r3, #31
 801073a:	bf48      	it	mi
 801073c:	f043 0320 	orrmi.w	r3, r3, #32
 8010740:	6029      	str	r1, [r5, #0]
 8010742:	bf48      	it	mi
 8010744:	6023      	strmi	r3, [r4, #0]
 8010746:	b91e      	cbnz	r6, 8010750 <_printf_i+0x1a4>
 8010748:	6823      	ldr	r3, [r4, #0]
 801074a:	f023 0320 	bic.w	r3, r3, #32
 801074e:	6023      	str	r3, [r4, #0]
 8010750:	2310      	movs	r3, #16
 8010752:	e7a7      	b.n	80106a4 <_printf_i+0xf8>
 8010754:	4824      	ldr	r0, [pc, #144]	; (80107e8 <_printf_i+0x23c>)
 8010756:	e7e4      	b.n	8010722 <_printf_i+0x176>
 8010758:	4615      	mov	r5, r2
 801075a:	e7bd      	b.n	80106d8 <_printf_i+0x12c>
 801075c:	682b      	ldr	r3, [r5, #0]
 801075e:	6826      	ldr	r6, [r4, #0]
 8010760:	6961      	ldr	r1, [r4, #20]
 8010762:	1d18      	adds	r0, r3, #4
 8010764:	6028      	str	r0, [r5, #0]
 8010766:	0635      	lsls	r5, r6, #24
 8010768:	681b      	ldr	r3, [r3, #0]
 801076a:	d501      	bpl.n	8010770 <_printf_i+0x1c4>
 801076c:	6019      	str	r1, [r3, #0]
 801076e:	e002      	b.n	8010776 <_printf_i+0x1ca>
 8010770:	0670      	lsls	r0, r6, #25
 8010772:	d5fb      	bpl.n	801076c <_printf_i+0x1c0>
 8010774:	8019      	strh	r1, [r3, #0]
 8010776:	2300      	movs	r3, #0
 8010778:	6123      	str	r3, [r4, #16]
 801077a:	4615      	mov	r5, r2
 801077c:	e7bc      	b.n	80106f8 <_printf_i+0x14c>
 801077e:	682b      	ldr	r3, [r5, #0]
 8010780:	1d1a      	adds	r2, r3, #4
 8010782:	602a      	str	r2, [r5, #0]
 8010784:	681d      	ldr	r5, [r3, #0]
 8010786:	6862      	ldr	r2, [r4, #4]
 8010788:	2100      	movs	r1, #0
 801078a:	4628      	mov	r0, r5
 801078c:	f7ef fd38 	bl	8000200 <memchr>
 8010790:	b108      	cbz	r0, 8010796 <_printf_i+0x1ea>
 8010792:	1b40      	subs	r0, r0, r5
 8010794:	6060      	str	r0, [r4, #4]
 8010796:	6863      	ldr	r3, [r4, #4]
 8010798:	6123      	str	r3, [r4, #16]
 801079a:	2300      	movs	r3, #0
 801079c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80107a0:	e7aa      	b.n	80106f8 <_printf_i+0x14c>
 80107a2:	6923      	ldr	r3, [r4, #16]
 80107a4:	462a      	mov	r2, r5
 80107a6:	4649      	mov	r1, r9
 80107a8:	4640      	mov	r0, r8
 80107aa:	47d0      	blx	sl
 80107ac:	3001      	adds	r0, #1
 80107ae:	d0ad      	beq.n	801070c <_printf_i+0x160>
 80107b0:	6823      	ldr	r3, [r4, #0]
 80107b2:	079b      	lsls	r3, r3, #30
 80107b4:	d413      	bmi.n	80107de <_printf_i+0x232>
 80107b6:	68e0      	ldr	r0, [r4, #12]
 80107b8:	9b03      	ldr	r3, [sp, #12]
 80107ba:	4298      	cmp	r0, r3
 80107bc:	bfb8      	it	lt
 80107be:	4618      	movlt	r0, r3
 80107c0:	e7a6      	b.n	8010710 <_printf_i+0x164>
 80107c2:	2301      	movs	r3, #1
 80107c4:	4632      	mov	r2, r6
 80107c6:	4649      	mov	r1, r9
 80107c8:	4640      	mov	r0, r8
 80107ca:	47d0      	blx	sl
 80107cc:	3001      	adds	r0, #1
 80107ce:	d09d      	beq.n	801070c <_printf_i+0x160>
 80107d0:	3501      	adds	r5, #1
 80107d2:	68e3      	ldr	r3, [r4, #12]
 80107d4:	9903      	ldr	r1, [sp, #12]
 80107d6:	1a5b      	subs	r3, r3, r1
 80107d8:	42ab      	cmp	r3, r5
 80107da:	dcf2      	bgt.n	80107c2 <_printf_i+0x216>
 80107dc:	e7eb      	b.n	80107b6 <_printf_i+0x20a>
 80107de:	2500      	movs	r5, #0
 80107e0:	f104 0619 	add.w	r6, r4, #25
 80107e4:	e7f5      	b.n	80107d2 <_printf_i+0x226>
 80107e6:	bf00      	nop
 80107e8:	0801464e 	.word	0x0801464e
 80107ec:	0801465f 	.word	0x0801465f

080107f0 <std>:
 80107f0:	2300      	movs	r3, #0
 80107f2:	b510      	push	{r4, lr}
 80107f4:	4604      	mov	r4, r0
 80107f6:	e9c0 3300 	strd	r3, r3, [r0]
 80107fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80107fe:	6083      	str	r3, [r0, #8]
 8010800:	8181      	strh	r1, [r0, #12]
 8010802:	6643      	str	r3, [r0, #100]	; 0x64
 8010804:	81c2      	strh	r2, [r0, #14]
 8010806:	6183      	str	r3, [r0, #24]
 8010808:	4619      	mov	r1, r3
 801080a:	2208      	movs	r2, #8
 801080c:	305c      	adds	r0, #92	; 0x5c
 801080e:	f000 f914 	bl	8010a3a <memset>
 8010812:	4b0d      	ldr	r3, [pc, #52]	; (8010848 <std+0x58>)
 8010814:	6263      	str	r3, [r4, #36]	; 0x24
 8010816:	4b0d      	ldr	r3, [pc, #52]	; (801084c <std+0x5c>)
 8010818:	62a3      	str	r3, [r4, #40]	; 0x28
 801081a:	4b0d      	ldr	r3, [pc, #52]	; (8010850 <std+0x60>)
 801081c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801081e:	4b0d      	ldr	r3, [pc, #52]	; (8010854 <std+0x64>)
 8010820:	6323      	str	r3, [r4, #48]	; 0x30
 8010822:	4b0d      	ldr	r3, [pc, #52]	; (8010858 <std+0x68>)
 8010824:	6224      	str	r4, [r4, #32]
 8010826:	429c      	cmp	r4, r3
 8010828:	d006      	beq.n	8010838 <std+0x48>
 801082a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 801082e:	4294      	cmp	r4, r2
 8010830:	d002      	beq.n	8010838 <std+0x48>
 8010832:	33d0      	adds	r3, #208	; 0xd0
 8010834:	429c      	cmp	r4, r3
 8010836:	d105      	bne.n	8010844 <std+0x54>
 8010838:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801083c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010840:	f000 b988 	b.w	8010b54 <__retarget_lock_init_recursive>
 8010844:	bd10      	pop	{r4, pc}
 8010846:	bf00      	nop
 8010848:	080109b5 	.word	0x080109b5
 801084c:	080109d7 	.word	0x080109d7
 8010850:	08010a0f 	.word	0x08010a0f
 8010854:	08010a33 	.word	0x08010a33
 8010858:	200063c0 	.word	0x200063c0

0801085c <stdio_exit_handler>:
 801085c:	4a02      	ldr	r2, [pc, #8]	; (8010868 <stdio_exit_handler+0xc>)
 801085e:	4903      	ldr	r1, [pc, #12]	; (801086c <stdio_exit_handler+0x10>)
 8010860:	4803      	ldr	r0, [pc, #12]	; (8010870 <stdio_exit_handler+0x14>)
 8010862:	f000 b869 	b.w	8010938 <_fwalk_sglue>
 8010866:	bf00      	nop
 8010868:	2000006c 	.word	0x2000006c
 801086c:	080123b9 	.word	0x080123b9
 8010870:	20000078 	.word	0x20000078

08010874 <cleanup_stdio>:
 8010874:	6841      	ldr	r1, [r0, #4]
 8010876:	4b0c      	ldr	r3, [pc, #48]	; (80108a8 <cleanup_stdio+0x34>)
 8010878:	4299      	cmp	r1, r3
 801087a:	b510      	push	{r4, lr}
 801087c:	4604      	mov	r4, r0
 801087e:	d001      	beq.n	8010884 <cleanup_stdio+0x10>
 8010880:	f001 fd9a 	bl	80123b8 <_fflush_r>
 8010884:	68a1      	ldr	r1, [r4, #8]
 8010886:	4b09      	ldr	r3, [pc, #36]	; (80108ac <cleanup_stdio+0x38>)
 8010888:	4299      	cmp	r1, r3
 801088a:	d002      	beq.n	8010892 <cleanup_stdio+0x1e>
 801088c:	4620      	mov	r0, r4
 801088e:	f001 fd93 	bl	80123b8 <_fflush_r>
 8010892:	68e1      	ldr	r1, [r4, #12]
 8010894:	4b06      	ldr	r3, [pc, #24]	; (80108b0 <cleanup_stdio+0x3c>)
 8010896:	4299      	cmp	r1, r3
 8010898:	d004      	beq.n	80108a4 <cleanup_stdio+0x30>
 801089a:	4620      	mov	r0, r4
 801089c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80108a0:	f001 bd8a 	b.w	80123b8 <_fflush_r>
 80108a4:	bd10      	pop	{r4, pc}
 80108a6:	bf00      	nop
 80108a8:	200063c0 	.word	0x200063c0
 80108ac:	20006428 	.word	0x20006428
 80108b0:	20006490 	.word	0x20006490

080108b4 <global_stdio_init.part.0>:
 80108b4:	b510      	push	{r4, lr}
 80108b6:	4b0b      	ldr	r3, [pc, #44]	; (80108e4 <global_stdio_init.part.0+0x30>)
 80108b8:	4c0b      	ldr	r4, [pc, #44]	; (80108e8 <global_stdio_init.part.0+0x34>)
 80108ba:	4a0c      	ldr	r2, [pc, #48]	; (80108ec <global_stdio_init.part.0+0x38>)
 80108bc:	601a      	str	r2, [r3, #0]
 80108be:	4620      	mov	r0, r4
 80108c0:	2200      	movs	r2, #0
 80108c2:	2104      	movs	r1, #4
 80108c4:	f7ff ff94 	bl	80107f0 <std>
 80108c8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80108cc:	2201      	movs	r2, #1
 80108ce:	2109      	movs	r1, #9
 80108d0:	f7ff ff8e 	bl	80107f0 <std>
 80108d4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80108d8:	2202      	movs	r2, #2
 80108da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80108de:	2112      	movs	r1, #18
 80108e0:	f7ff bf86 	b.w	80107f0 <std>
 80108e4:	200064f8 	.word	0x200064f8
 80108e8:	200063c0 	.word	0x200063c0
 80108ec:	0801085d 	.word	0x0801085d

080108f0 <__sfp_lock_acquire>:
 80108f0:	4801      	ldr	r0, [pc, #4]	; (80108f8 <__sfp_lock_acquire+0x8>)
 80108f2:	f000 b930 	b.w	8010b56 <__retarget_lock_acquire_recursive>
 80108f6:	bf00      	nop
 80108f8:	20006501 	.word	0x20006501

080108fc <__sfp_lock_release>:
 80108fc:	4801      	ldr	r0, [pc, #4]	; (8010904 <__sfp_lock_release+0x8>)
 80108fe:	f000 b92b 	b.w	8010b58 <__retarget_lock_release_recursive>
 8010902:	bf00      	nop
 8010904:	20006501 	.word	0x20006501

08010908 <__sinit>:
 8010908:	b510      	push	{r4, lr}
 801090a:	4604      	mov	r4, r0
 801090c:	f7ff fff0 	bl	80108f0 <__sfp_lock_acquire>
 8010910:	6a23      	ldr	r3, [r4, #32]
 8010912:	b11b      	cbz	r3, 801091c <__sinit+0x14>
 8010914:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010918:	f7ff bff0 	b.w	80108fc <__sfp_lock_release>
 801091c:	4b04      	ldr	r3, [pc, #16]	; (8010930 <__sinit+0x28>)
 801091e:	6223      	str	r3, [r4, #32]
 8010920:	4b04      	ldr	r3, [pc, #16]	; (8010934 <__sinit+0x2c>)
 8010922:	681b      	ldr	r3, [r3, #0]
 8010924:	2b00      	cmp	r3, #0
 8010926:	d1f5      	bne.n	8010914 <__sinit+0xc>
 8010928:	f7ff ffc4 	bl	80108b4 <global_stdio_init.part.0>
 801092c:	e7f2      	b.n	8010914 <__sinit+0xc>
 801092e:	bf00      	nop
 8010930:	08010875 	.word	0x08010875
 8010934:	200064f8 	.word	0x200064f8

08010938 <_fwalk_sglue>:
 8010938:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801093c:	4607      	mov	r7, r0
 801093e:	4688      	mov	r8, r1
 8010940:	4614      	mov	r4, r2
 8010942:	2600      	movs	r6, #0
 8010944:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010948:	f1b9 0901 	subs.w	r9, r9, #1
 801094c:	d505      	bpl.n	801095a <_fwalk_sglue+0x22>
 801094e:	6824      	ldr	r4, [r4, #0]
 8010950:	2c00      	cmp	r4, #0
 8010952:	d1f7      	bne.n	8010944 <_fwalk_sglue+0xc>
 8010954:	4630      	mov	r0, r6
 8010956:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801095a:	89ab      	ldrh	r3, [r5, #12]
 801095c:	2b01      	cmp	r3, #1
 801095e:	d907      	bls.n	8010970 <_fwalk_sglue+0x38>
 8010960:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010964:	3301      	adds	r3, #1
 8010966:	d003      	beq.n	8010970 <_fwalk_sglue+0x38>
 8010968:	4629      	mov	r1, r5
 801096a:	4638      	mov	r0, r7
 801096c:	47c0      	blx	r8
 801096e:	4306      	orrs	r6, r0
 8010970:	3568      	adds	r5, #104	; 0x68
 8010972:	e7e9      	b.n	8010948 <_fwalk_sglue+0x10>

08010974 <siprintf>:
 8010974:	b40e      	push	{r1, r2, r3}
 8010976:	b500      	push	{lr}
 8010978:	b09c      	sub	sp, #112	; 0x70
 801097a:	ab1d      	add	r3, sp, #116	; 0x74
 801097c:	9002      	str	r0, [sp, #8]
 801097e:	9006      	str	r0, [sp, #24]
 8010980:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010984:	4809      	ldr	r0, [pc, #36]	; (80109ac <siprintf+0x38>)
 8010986:	9107      	str	r1, [sp, #28]
 8010988:	9104      	str	r1, [sp, #16]
 801098a:	4909      	ldr	r1, [pc, #36]	; (80109b0 <siprintf+0x3c>)
 801098c:	f853 2b04 	ldr.w	r2, [r3], #4
 8010990:	9105      	str	r1, [sp, #20]
 8010992:	6800      	ldr	r0, [r0, #0]
 8010994:	9301      	str	r3, [sp, #4]
 8010996:	a902      	add	r1, sp, #8
 8010998:	f001 fb8a 	bl	80120b0 <_svfiprintf_r>
 801099c:	9b02      	ldr	r3, [sp, #8]
 801099e:	2200      	movs	r2, #0
 80109a0:	701a      	strb	r2, [r3, #0]
 80109a2:	b01c      	add	sp, #112	; 0x70
 80109a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80109a8:	b003      	add	sp, #12
 80109aa:	4770      	bx	lr
 80109ac:	200000c4 	.word	0x200000c4
 80109b0:	ffff0208 	.word	0xffff0208

080109b4 <__sread>:
 80109b4:	b510      	push	{r4, lr}
 80109b6:	460c      	mov	r4, r1
 80109b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80109bc:	f000 f86c 	bl	8010a98 <_read_r>
 80109c0:	2800      	cmp	r0, #0
 80109c2:	bfab      	itete	ge
 80109c4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80109c6:	89a3      	ldrhlt	r3, [r4, #12]
 80109c8:	181b      	addge	r3, r3, r0
 80109ca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80109ce:	bfac      	ite	ge
 80109d0:	6563      	strge	r3, [r4, #84]	; 0x54
 80109d2:	81a3      	strhlt	r3, [r4, #12]
 80109d4:	bd10      	pop	{r4, pc}

080109d6 <__swrite>:
 80109d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80109da:	461f      	mov	r7, r3
 80109dc:	898b      	ldrh	r3, [r1, #12]
 80109de:	05db      	lsls	r3, r3, #23
 80109e0:	4605      	mov	r5, r0
 80109e2:	460c      	mov	r4, r1
 80109e4:	4616      	mov	r6, r2
 80109e6:	d505      	bpl.n	80109f4 <__swrite+0x1e>
 80109e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80109ec:	2302      	movs	r3, #2
 80109ee:	2200      	movs	r2, #0
 80109f0:	f000 f840 	bl	8010a74 <_lseek_r>
 80109f4:	89a3      	ldrh	r3, [r4, #12]
 80109f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80109fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80109fe:	81a3      	strh	r3, [r4, #12]
 8010a00:	4632      	mov	r2, r6
 8010a02:	463b      	mov	r3, r7
 8010a04:	4628      	mov	r0, r5
 8010a06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010a0a:	f000 b867 	b.w	8010adc <_write_r>

08010a0e <__sseek>:
 8010a0e:	b510      	push	{r4, lr}
 8010a10:	460c      	mov	r4, r1
 8010a12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010a16:	f000 f82d 	bl	8010a74 <_lseek_r>
 8010a1a:	1c43      	adds	r3, r0, #1
 8010a1c:	89a3      	ldrh	r3, [r4, #12]
 8010a1e:	bf15      	itete	ne
 8010a20:	6560      	strne	r0, [r4, #84]	; 0x54
 8010a22:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010a26:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010a2a:	81a3      	strheq	r3, [r4, #12]
 8010a2c:	bf18      	it	ne
 8010a2e:	81a3      	strhne	r3, [r4, #12]
 8010a30:	bd10      	pop	{r4, pc}

08010a32 <__sclose>:
 8010a32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010a36:	f000 b80d 	b.w	8010a54 <_close_r>

08010a3a <memset>:
 8010a3a:	4402      	add	r2, r0
 8010a3c:	4603      	mov	r3, r0
 8010a3e:	4293      	cmp	r3, r2
 8010a40:	d100      	bne.n	8010a44 <memset+0xa>
 8010a42:	4770      	bx	lr
 8010a44:	f803 1b01 	strb.w	r1, [r3], #1
 8010a48:	e7f9      	b.n	8010a3e <memset+0x4>
	...

08010a4c <_localeconv_r>:
 8010a4c:	4800      	ldr	r0, [pc, #0]	; (8010a50 <_localeconv_r+0x4>)
 8010a4e:	4770      	bx	lr
 8010a50:	200001b8 	.word	0x200001b8

08010a54 <_close_r>:
 8010a54:	b538      	push	{r3, r4, r5, lr}
 8010a56:	4d06      	ldr	r5, [pc, #24]	; (8010a70 <_close_r+0x1c>)
 8010a58:	2300      	movs	r3, #0
 8010a5a:	4604      	mov	r4, r0
 8010a5c:	4608      	mov	r0, r1
 8010a5e:	602b      	str	r3, [r5, #0]
 8010a60:	f7f4 fed9 	bl	8005816 <_close>
 8010a64:	1c43      	adds	r3, r0, #1
 8010a66:	d102      	bne.n	8010a6e <_close_r+0x1a>
 8010a68:	682b      	ldr	r3, [r5, #0]
 8010a6a:	b103      	cbz	r3, 8010a6e <_close_r+0x1a>
 8010a6c:	6023      	str	r3, [r4, #0]
 8010a6e:	bd38      	pop	{r3, r4, r5, pc}
 8010a70:	200064fc 	.word	0x200064fc

08010a74 <_lseek_r>:
 8010a74:	b538      	push	{r3, r4, r5, lr}
 8010a76:	4d07      	ldr	r5, [pc, #28]	; (8010a94 <_lseek_r+0x20>)
 8010a78:	4604      	mov	r4, r0
 8010a7a:	4608      	mov	r0, r1
 8010a7c:	4611      	mov	r1, r2
 8010a7e:	2200      	movs	r2, #0
 8010a80:	602a      	str	r2, [r5, #0]
 8010a82:	461a      	mov	r2, r3
 8010a84:	f7f4 feee 	bl	8005864 <_lseek>
 8010a88:	1c43      	adds	r3, r0, #1
 8010a8a:	d102      	bne.n	8010a92 <_lseek_r+0x1e>
 8010a8c:	682b      	ldr	r3, [r5, #0]
 8010a8e:	b103      	cbz	r3, 8010a92 <_lseek_r+0x1e>
 8010a90:	6023      	str	r3, [r4, #0]
 8010a92:	bd38      	pop	{r3, r4, r5, pc}
 8010a94:	200064fc 	.word	0x200064fc

08010a98 <_read_r>:
 8010a98:	b538      	push	{r3, r4, r5, lr}
 8010a9a:	4d07      	ldr	r5, [pc, #28]	; (8010ab8 <_read_r+0x20>)
 8010a9c:	4604      	mov	r4, r0
 8010a9e:	4608      	mov	r0, r1
 8010aa0:	4611      	mov	r1, r2
 8010aa2:	2200      	movs	r2, #0
 8010aa4:	602a      	str	r2, [r5, #0]
 8010aa6:	461a      	mov	r2, r3
 8010aa8:	f7f4 fe7c 	bl	80057a4 <_read>
 8010aac:	1c43      	adds	r3, r0, #1
 8010aae:	d102      	bne.n	8010ab6 <_read_r+0x1e>
 8010ab0:	682b      	ldr	r3, [r5, #0]
 8010ab2:	b103      	cbz	r3, 8010ab6 <_read_r+0x1e>
 8010ab4:	6023      	str	r3, [r4, #0]
 8010ab6:	bd38      	pop	{r3, r4, r5, pc}
 8010ab8:	200064fc 	.word	0x200064fc

08010abc <_sbrk_r>:
 8010abc:	b538      	push	{r3, r4, r5, lr}
 8010abe:	4d06      	ldr	r5, [pc, #24]	; (8010ad8 <_sbrk_r+0x1c>)
 8010ac0:	2300      	movs	r3, #0
 8010ac2:	4604      	mov	r4, r0
 8010ac4:	4608      	mov	r0, r1
 8010ac6:	602b      	str	r3, [r5, #0]
 8010ac8:	f7f4 feda 	bl	8005880 <_sbrk>
 8010acc:	1c43      	adds	r3, r0, #1
 8010ace:	d102      	bne.n	8010ad6 <_sbrk_r+0x1a>
 8010ad0:	682b      	ldr	r3, [r5, #0]
 8010ad2:	b103      	cbz	r3, 8010ad6 <_sbrk_r+0x1a>
 8010ad4:	6023      	str	r3, [r4, #0]
 8010ad6:	bd38      	pop	{r3, r4, r5, pc}
 8010ad8:	200064fc 	.word	0x200064fc

08010adc <_write_r>:
 8010adc:	b538      	push	{r3, r4, r5, lr}
 8010ade:	4d07      	ldr	r5, [pc, #28]	; (8010afc <_write_r+0x20>)
 8010ae0:	4604      	mov	r4, r0
 8010ae2:	4608      	mov	r0, r1
 8010ae4:	4611      	mov	r1, r2
 8010ae6:	2200      	movs	r2, #0
 8010ae8:	602a      	str	r2, [r5, #0]
 8010aea:	461a      	mov	r2, r3
 8010aec:	f7f4 fe77 	bl	80057de <_write>
 8010af0:	1c43      	adds	r3, r0, #1
 8010af2:	d102      	bne.n	8010afa <_write_r+0x1e>
 8010af4:	682b      	ldr	r3, [r5, #0]
 8010af6:	b103      	cbz	r3, 8010afa <_write_r+0x1e>
 8010af8:	6023      	str	r3, [r4, #0]
 8010afa:	bd38      	pop	{r3, r4, r5, pc}
 8010afc:	200064fc 	.word	0x200064fc

08010b00 <__errno>:
 8010b00:	4b01      	ldr	r3, [pc, #4]	; (8010b08 <__errno+0x8>)
 8010b02:	6818      	ldr	r0, [r3, #0]
 8010b04:	4770      	bx	lr
 8010b06:	bf00      	nop
 8010b08:	200000c4 	.word	0x200000c4

08010b0c <__libc_init_array>:
 8010b0c:	b570      	push	{r4, r5, r6, lr}
 8010b0e:	4d0d      	ldr	r5, [pc, #52]	; (8010b44 <__libc_init_array+0x38>)
 8010b10:	4c0d      	ldr	r4, [pc, #52]	; (8010b48 <__libc_init_array+0x3c>)
 8010b12:	1b64      	subs	r4, r4, r5
 8010b14:	10a4      	asrs	r4, r4, #2
 8010b16:	2600      	movs	r6, #0
 8010b18:	42a6      	cmp	r6, r4
 8010b1a:	d109      	bne.n	8010b30 <__libc_init_array+0x24>
 8010b1c:	4d0b      	ldr	r5, [pc, #44]	; (8010b4c <__libc_init_array+0x40>)
 8010b1e:	4c0c      	ldr	r4, [pc, #48]	; (8010b50 <__libc_init_array+0x44>)
 8010b20:	f003 fb32 	bl	8014188 <_init>
 8010b24:	1b64      	subs	r4, r4, r5
 8010b26:	10a4      	asrs	r4, r4, #2
 8010b28:	2600      	movs	r6, #0
 8010b2a:	42a6      	cmp	r6, r4
 8010b2c:	d105      	bne.n	8010b3a <__libc_init_array+0x2e>
 8010b2e:	bd70      	pop	{r4, r5, r6, pc}
 8010b30:	f855 3b04 	ldr.w	r3, [r5], #4
 8010b34:	4798      	blx	r3
 8010b36:	3601      	adds	r6, #1
 8010b38:	e7ee      	b.n	8010b18 <__libc_init_array+0xc>
 8010b3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8010b3e:	4798      	blx	r3
 8010b40:	3601      	adds	r6, #1
 8010b42:	e7f2      	b.n	8010b2a <__libc_init_array+0x1e>
 8010b44:	08014dd4 	.word	0x08014dd4
 8010b48:	08014dd4 	.word	0x08014dd4
 8010b4c:	08014dd4 	.word	0x08014dd4
 8010b50:	08014dd8 	.word	0x08014dd8

08010b54 <__retarget_lock_init_recursive>:
 8010b54:	4770      	bx	lr

08010b56 <__retarget_lock_acquire_recursive>:
 8010b56:	4770      	bx	lr

08010b58 <__retarget_lock_release_recursive>:
 8010b58:	4770      	bx	lr

08010b5a <memcpy>:
 8010b5a:	440a      	add	r2, r1
 8010b5c:	4291      	cmp	r1, r2
 8010b5e:	f100 33ff 	add.w	r3, r0, #4294967295
 8010b62:	d100      	bne.n	8010b66 <memcpy+0xc>
 8010b64:	4770      	bx	lr
 8010b66:	b510      	push	{r4, lr}
 8010b68:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010b6c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010b70:	4291      	cmp	r1, r2
 8010b72:	d1f9      	bne.n	8010b68 <memcpy+0xe>
 8010b74:	bd10      	pop	{r4, pc}

08010b76 <quorem>:
 8010b76:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b7a:	6903      	ldr	r3, [r0, #16]
 8010b7c:	690c      	ldr	r4, [r1, #16]
 8010b7e:	42a3      	cmp	r3, r4
 8010b80:	4607      	mov	r7, r0
 8010b82:	db7e      	blt.n	8010c82 <quorem+0x10c>
 8010b84:	3c01      	subs	r4, #1
 8010b86:	f101 0814 	add.w	r8, r1, #20
 8010b8a:	f100 0514 	add.w	r5, r0, #20
 8010b8e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010b92:	9301      	str	r3, [sp, #4]
 8010b94:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8010b98:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010b9c:	3301      	adds	r3, #1
 8010b9e:	429a      	cmp	r2, r3
 8010ba0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8010ba4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8010ba8:	fbb2 f6f3 	udiv	r6, r2, r3
 8010bac:	d331      	bcc.n	8010c12 <quorem+0x9c>
 8010bae:	f04f 0e00 	mov.w	lr, #0
 8010bb2:	4640      	mov	r0, r8
 8010bb4:	46ac      	mov	ip, r5
 8010bb6:	46f2      	mov	sl, lr
 8010bb8:	f850 2b04 	ldr.w	r2, [r0], #4
 8010bbc:	b293      	uxth	r3, r2
 8010bbe:	fb06 e303 	mla	r3, r6, r3, lr
 8010bc2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8010bc6:	0c1a      	lsrs	r2, r3, #16
 8010bc8:	b29b      	uxth	r3, r3
 8010bca:	ebaa 0303 	sub.w	r3, sl, r3
 8010bce:	f8dc a000 	ldr.w	sl, [ip]
 8010bd2:	fa13 f38a 	uxtah	r3, r3, sl
 8010bd6:	fb06 220e 	mla	r2, r6, lr, r2
 8010bda:	9300      	str	r3, [sp, #0]
 8010bdc:	9b00      	ldr	r3, [sp, #0]
 8010bde:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8010be2:	b292      	uxth	r2, r2
 8010be4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8010be8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010bec:	f8bd 3000 	ldrh.w	r3, [sp]
 8010bf0:	4581      	cmp	r9, r0
 8010bf2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010bf6:	f84c 3b04 	str.w	r3, [ip], #4
 8010bfa:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8010bfe:	d2db      	bcs.n	8010bb8 <quorem+0x42>
 8010c00:	f855 300b 	ldr.w	r3, [r5, fp]
 8010c04:	b92b      	cbnz	r3, 8010c12 <quorem+0x9c>
 8010c06:	9b01      	ldr	r3, [sp, #4]
 8010c08:	3b04      	subs	r3, #4
 8010c0a:	429d      	cmp	r5, r3
 8010c0c:	461a      	mov	r2, r3
 8010c0e:	d32c      	bcc.n	8010c6a <quorem+0xf4>
 8010c10:	613c      	str	r4, [r7, #16]
 8010c12:	4638      	mov	r0, r7
 8010c14:	f001 f8f2 	bl	8011dfc <__mcmp>
 8010c18:	2800      	cmp	r0, #0
 8010c1a:	db22      	blt.n	8010c62 <quorem+0xec>
 8010c1c:	3601      	adds	r6, #1
 8010c1e:	4629      	mov	r1, r5
 8010c20:	2000      	movs	r0, #0
 8010c22:	f858 2b04 	ldr.w	r2, [r8], #4
 8010c26:	f8d1 c000 	ldr.w	ip, [r1]
 8010c2a:	b293      	uxth	r3, r2
 8010c2c:	1ac3      	subs	r3, r0, r3
 8010c2e:	0c12      	lsrs	r2, r2, #16
 8010c30:	fa13 f38c 	uxtah	r3, r3, ip
 8010c34:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8010c38:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010c3c:	b29b      	uxth	r3, r3
 8010c3e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010c42:	45c1      	cmp	r9, r8
 8010c44:	f841 3b04 	str.w	r3, [r1], #4
 8010c48:	ea4f 4022 	mov.w	r0, r2, asr #16
 8010c4c:	d2e9      	bcs.n	8010c22 <quorem+0xac>
 8010c4e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010c52:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010c56:	b922      	cbnz	r2, 8010c62 <quorem+0xec>
 8010c58:	3b04      	subs	r3, #4
 8010c5a:	429d      	cmp	r5, r3
 8010c5c:	461a      	mov	r2, r3
 8010c5e:	d30a      	bcc.n	8010c76 <quorem+0x100>
 8010c60:	613c      	str	r4, [r7, #16]
 8010c62:	4630      	mov	r0, r6
 8010c64:	b003      	add	sp, #12
 8010c66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c6a:	6812      	ldr	r2, [r2, #0]
 8010c6c:	3b04      	subs	r3, #4
 8010c6e:	2a00      	cmp	r2, #0
 8010c70:	d1ce      	bne.n	8010c10 <quorem+0x9a>
 8010c72:	3c01      	subs	r4, #1
 8010c74:	e7c9      	b.n	8010c0a <quorem+0x94>
 8010c76:	6812      	ldr	r2, [r2, #0]
 8010c78:	3b04      	subs	r3, #4
 8010c7a:	2a00      	cmp	r2, #0
 8010c7c:	d1f0      	bne.n	8010c60 <quorem+0xea>
 8010c7e:	3c01      	subs	r4, #1
 8010c80:	e7eb      	b.n	8010c5a <quorem+0xe4>
 8010c82:	2000      	movs	r0, #0
 8010c84:	e7ee      	b.n	8010c64 <quorem+0xee>
	...

08010c88 <_dtoa_r>:
 8010c88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c8c:	ed2d 8b04 	vpush	{d8-d9}
 8010c90:	69c5      	ldr	r5, [r0, #28]
 8010c92:	b093      	sub	sp, #76	; 0x4c
 8010c94:	ed8d 0b02 	vstr	d0, [sp, #8]
 8010c98:	ec57 6b10 	vmov	r6, r7, d0
 8010c9c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8010ca0:	9107      	str	r1, [sp, #28]
 8010ca2:	4604      	mov	r4, r0
 8010ca4:	920a      	str	r2, [sp, #40]	; 0x28
 8010ca6:	930d      	str	r3, [sp, #52]	; 0x34
 8010ca8:	b975      	cbnz	r5, 8010cc8 <_dtoa_r+0x40>
 8010caa:	2010      	movs	r0, #16
 8010cac:	f7ff f886 	bl	800fdbc <malloc>
 8010cb0:	4602      	mov	r2, r0
 8010cb2:	61e0      	str	r0, [r4, #28]
 8010cb4:	b920      	cbnz	r0, 8010cc0 <_dtoa_r+0x38>
 8010cb6:	4bae      	ldr	r3, [pc, #696]	; (8010f70 <_dtoa_r+0x2e8>)
 8010cb8:	21ef      	movs	r1, #239	; 0xef
 8010cba:	48ae      	ldr	r0, [pc, #696]	; (8010f74 <_dtoa_r+0x2ec>)
 8010cbc:	f001 fbbe 	bl	801243c <__assert_func>
 8010cc0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8010cc4:	6005      	str	r5, [r0, #0]
 8010cc6:	60c5      	str	r5, [r0, #12]
 8010cc8:	69e3      	ldr	r3, [r4, #28]
 8010cca:	6819      	ldr	r1, [r3, #0]
 8010ccc:	b151      	cbz	r1, 8010ce4 <_dtoa_r+0x5c>
 8010cce:	685a      	ldr	r2, [r3, #4]
 8010cd0:	604a      	str	r2, [r1, #4]
 8010cd2:	2301      	movs	r3, #1
 8010cd4:	4093      	lsls	r3, r2
 8010cd6:	608b      	str	r3, [r1, #8]
 8010cd8:	4620      	mov	r0, r4
 8010cda:	f000 fe53 	bl	8011984 <_Bfree>
 8010cde:	69e3      	ldr	r3, [r4, #28]
 8010ce0:	2200      	movs	r2, #0
 8010ce2:	601a      	str	r2, [r3, #0]
 8010ce4:	1e3b      	subs	r3, r7, #0
 8010ce6:	bfbb      	ittet	lt
 8010ce8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8010cec:	9303      	strlt	r3, [sp, #12]
 8010cee:	2300      	movge	r3, #0
 8010cf0:	2201      	movlt	r2, #1
 8010cf2:	bfac      	ite	ge
 8010cf4:	f8c8 3000 	strge.w	r3, [r8]
 8010cf8:	f8c8 2000 	strlt.w	r2, [r8]
 8010cfc:	4b9e      	ldr	r3, [pc, #632]	; (8010f78 <_dtoa_r+0x2f0>)
 8010cfe:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8010d02:	ea33 0308 	bics.w	r3, r3, r8
 8010d06:	d11b      	bne.n	8010d40 <_dtoa_r+0xb8>
 8010d08:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010d0a:	f242 730f 	movw	r3, #9999	; 0x270f
 8010d0e:	6013      	str	r3, [r2, #0]
 8010d10:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8010d14:	4333      	orrs	r3, r6
 8010d16:	f000 8593 	beq.w	8011840 <_dtoa_r+0xbb8>
 8010d1a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010d1c:	b963      	cbnz	r3, 8010d38 <_dtoa_r+0xb0>
 8010d1e:	4b97      	ldr	r3, [pc, #604]	; (8010f7c <_dtoa_r+0x2f4>)
 8010d20:	e027      	b.n	8010d72 <_dtoa_r+0xea>
 8010d22:	4b97      	ldr	r3, [pc, #604]	; (8010f80 <_dtoa_r+0x2f8>)
 8010d24:	9300      	str	r3, [sp, #0]
 8010d26:	3308      	adds	r3, #8
 8010d28:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8010d2a:	6013      	str	r3, [r2, #0]
 8010d2c:	9800      	ldr	r0, [sp, #0]
 8010d2e:	b013      	add	sp, #76	; 0x4c
 8010d30:	ecbd 8b04 	vpop	{d8-d9}
 8010d34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d38:	4b90      	ldr	r3, [pc, #576]	; (8010f7c <_dtoa_r+0x2f4>)
 8010d3a:	9300      	str	r3, [sp, #0]
 8010d3c:	3303      	adds	r3, #3
 8010d3e:	e7f3      	b.n	8010d28 <_dtoa_r+0xa0>
 8010d40:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010d44:	2200      	movs	r2, #0
 8010d46:	ec51 0b17 	vmov	r0, r1, d7
 8010d4a:	eeb0 8a47 	vmov.f32	s16, s14
 8010d4e:	eef0 8a67 	vmov.f32	s17, s15
 8010d52:	2300      	movs	r3, #0
 8010d54:	f7ef fed0 	bl	8000af8 <__aeabi_dcmpeq>
 8010d58:	4681      	mov	r9, r0
 8010d5a:	b160      	cbz	r0, 8010d76 <_dtoa_r+0xee>
 8010d5c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010d5e:	2301      	movs	r3, #1
 8010d60:	6013      	str	r3, [r2, #0]
 8010d62:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010d64:	2b00      	cmp	r3, #0
 8010d66:	f000 8568 	beq.w	801183a <_dtoa_r+0xbb2>
 8010d6a:	4b86      	ldr	r3, [pc, #536]	; (8010f84 <_dtoa_r+0x2fc>)
 8010d6c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8010d6e:	6013      	str	r3, [r2, #0]
 8010d70:	3b01      	subs	r3, #1
 8010d72:	9300      	str	r3, [sp, #0]
 8010d74:	e7da      	b.n	8010d2c <_dtoa_r+0xa4>
 8010d76:	aa10      	add	r2, sp, #64	; 0x40
 8010d78:	a911      	add	r1, sp, #68	; 0x44
 8010d7a:	4620      	mov	r0, r4
 8010d7c:	eeb0 0a48 	vmov.f32	s0, s16
 8010d80:	eef0 0a68 	vmov.f32	s1, s17
 8010d84:	f001 f8e0 	bl	8011f48 <__d2b>
 8010d88:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8010d8c:	4682      	mov	sl, r0
 8010d8e:	2d00      	cmp	r5, #0
 8010d90:	d07f      	beq.n	8010e92 <_dtoa_r+0x20a>
 8010d92:	ee18 3a90 	vmov	r3, s17
 8010d96:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010d9a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8010d9e:	ec51 0b18 	vmov	r0, r1, d8
 8010da2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8010da6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8010daa:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8010dae:	4619      	mov	r1, r3
 8010db0:	2200      	movs	r2, #0
 8010db2:	4b75      	ldr	r3, [pc, #468]	; (8010f88 <_dtoa_r+0x300>)
 8010db4:	f7ef fa80 	bl	80002b8 <__aeabi_dsub>
 8010db8:	a367      	add	r3, pc, #412	; (adr r3, 8010f58 <_dtoa_r+0x2d0>)
 8010dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010dbe:	f7ef fc33 	bl	8000628 <__aeabi_dmul>
 8010dc2:	a367      	add	r3, pc, #412	; (adr r3, 8010f60 <_dtoa_r+0x2d8>)
 8010dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010dc8:	f7ef fa78 	bl	80002bc <__adddf3>
 8010dcc:	4606      	mov	r6, r0
 8010dce:	4628      	mov	r0, r5
 8010dd0:	460f      	mov	r7, r1
 8010dd2:	f7ef fbbf 	bl	8000554 <__aeabi_i2d>
 8010dd6:	a364      	add	r3, pc, #400	; (adr r3, 8010f68 <_dtoa_r+0x2e0>)
 8010dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ddc:	f7ef fc24 	bl	8000628 <__aeabi_dmul>
 8010de0:	4602      	mov	r2, r0
 8010de2:	460b      	mov	r3, r1
 8010de4:	4630      	mov	r0, r6
 8010de6:	4639      	mov	r1, r7
 8010de8:	f7ef fa68 	bl	80002bc <__adddf3>
 8010dec:	4606      	mov	r6, r0
 8010dee:	460f      	mov	r7, r1
 8010df0:	f7ef feca 	bl	8000b88 <__aeabi_d2iz>
 8010df4:	2200      	movs	r2, #0
 8010df6:	4683      	mov	fp, r0
 8010df8:	2300      	movs	r3, #0
 8010dfa:	4630      	mov	r0, r6
 8010dfc:	4639      	mov	r1, r7
 8010dfe:	f7ef fe85 	bl	8000b0c <__aeabi_dcmplt>
 8010e02:	b148      	cbz	r0, 8010e18 <_dtoa_r+0x190>
 8010e04:	4658      	mov	r0, fp
 8010e06:	f7ef fba5 	bl	8000554 <__aeabi_i2d>
 8010e0a:	4632      	mov	r2, r6
 8010e0c:	463b      	mov	r3, r7
 8010e0e:	f7ef fe73 	bl	8000af8 <__aeabi_dcmpeq>
 8010e12:	b908      	cbnz	r0, 8010e18 <_dtoa_r+0x190>
 8010e14:	f10b 3bff 	add.w	fp, fp, #4294967295
 8010e18:	f1bb 0f16 	cmp.w	fp, #22
 8010e1c:	d857      	bhi.n	8010ece <_dtoa_r+0x246>
 8010e1e:	4b5b      	ldr	r3, [pc, #364]	; (8010f8c <_dtoa_r+0x304>)
 8010e20:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8010e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e28:	ec51 0b18 	vmov	r0, r1, d8
 8010e2c:	f7ef fe6e 	bl	8000b0c <__aeabi_dcmplt>
 8010e30:	2800      	cmp	r0, #0
 8010e32:	d04e      	beq.n	8010ed2 <_dtoa_r+0x24a>
 8010e34:	f10b 3bff 	add.w	fp, fp, #4294967295
 8010e38:	2300      	movs	r3, #0
 8010e3a:	930c      	str	r3, [sp, #48]	; 0x30
 8010e3c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010e3e:	1b5b      	subs	r3, r3, r5
 8010e40:	1e5a      	subs	r2, r3, #1
 8010e42:	bf45      	ittet	mi
 8010e44:	f1c3 0301 	rsbmi	r3, r3, #1
 8010e48:	9305      	strmi	r3, [sp, #20]
 8010e4a:	2300      	movpl	r3, #0
 8010e4c:	2300      	movmi	r3, #0
 8010e4e:	9206      	str	r2, [sp, #24]
 8010e50:	bf54      	ite	pl
 8010e52:	9305      	strpl	r3, [sp, #20]
 8010e54:	9306      	strmi	r3, [sp, #24]
 8010e56:	f1bb 0f00 	cmp.w	fp, #0
 8010e5a:	db3c      	blt.n	8010ed6 <_dtoa_r+0x24e>
 8010e5c:	9b06      	ldr	r3, [sp, #24]
 8010e5e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8010e62:	445b      	add	r3, fp
 8010e64:	9306      	str	r3, [sp, #24]
 8010e66:	2300      	movs	r3, #0
 8010e68:	9308      	str	r3, [sp, #32]
 8010e6a:	9b07      	ldr	r3, [sp, #28]
 8010e6c:	2b09      	cmp	r3, #9
 8010e6e:	d868      	bhi.n	8010f42 <_dtoa_r+0x2ba>
 8010e70:	2b05      	cmp	r3, #5
 8010e72:	bfc4      	itt	gt
 8010e74:	3b04      	subgt	r3, #4
 8010e76:	9307      	strgt	r3, [sp, #28]
 8010e78:	9b07      	ldr	r3, [sp, #28]
 8010e7a:	f1a3 0302 	sub.w	r3, r3, #2
 8010e7e:	bfcc      	ite	gt
 8010e80:	2500      	movgt	r5, #0
 8010e82:	2501      	movle	r5, #1
 8010e84:	2b03      	cmp	r3, #3
 8010e86:	f200 8085 	bhi.w	8010f94 <_dtoa_r+0x30c>
 8010e8a:	e8df f003 	tbb	[pc, r3]
 8010e8e:	3b2e      	.short	0x3b2e
 8010e90:	5839      	.short	0x5839
 8010e92:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8010e96:	441d      	add	r5, r3
 8010e98:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8010e9c:	2b20      	cmp	r3, #32
 8010e9e:	bfc1      	itttt	gt
 8010ea0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8010ea4:	fa08 f803 	lslgt.w	r8, r8, r3
 8010ea8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8010eac:	fa26 f303 	lsrgt.w	r3, r6, r3
 8010eb0:	bfd6      	itet	le
 8010eb2:	f1c3 0320 	rsble	r3, r3, #32
 8010eb6:	ea48 0003 	orrgt.w	r0, r8, r3
 8010eba:	fa06 f003 	lslle.w	r0, r6, r3
 8010ebe:	f7ef fb39 	bl	8000534 <__aeabi_ui2d>
 8010ec2:	2201      	movs	r2, #1
 8010ec4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8010ec8:	3d01      	subs	r5, #1
 8010eca:	920e      	str	r2, [sp, #56]	; 0x38
 8010ecc:	e76f      	b.n	8010dae <_dtoa_r+0x126>
 8010ece:	2301      	movs	r3, #1
 8010ed0:	e7b3      	b.n	8010e3a <_dtoa_r+0x1b2>
 8010ed2:	900c      	str	r0, [sp, #48]	; 0x30
 8010ed4:	e7b2      	b.n	8010e3c <_dtoa_r+0x1b4>
 8010ed6:	9b05      	ldr	r3, [sp, #20]
 8010ed8:	eba3 030b 	sub.w	r3, r3, fp
 8010edc:	9305      	str	r3, [sp, #20]
 8010ede:	f1cb 0300 	rsb	r3, fp, #0
 8010ee2:	9308      	str	r3, [sp, #32]
 8010ee4:	2300      	movs	r3, #0
 8010ee6:	930b      	str	r3, [sp, #44]	; 0x2c
 8010ee8:	e7bf      	b.n	8010e6a <_dtoa_r+0x1e2>
 8010eea:	2300      	movs	r3, #0
 8010eec:	9309      	str	r3, [sp, #36]	; 0x24
 8010eee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010ef0:	2b00      	cmp	r3, #0
 8010ef2:	dc52      	bgt.n	8010f9a <_dtoa_r+0x312>
 8010ef4:	2301      	movs	r3, #1
 8010ef6:	9301      	str	r3, [sp, #4]
 8010ef8:	9304      	str	r3, [sp, #16]
 8010efa:	461a      	mov	r2, r3
 8010efc:	920a      	str	r2, [sp, #40]	; 0x28
 8010efe:	e00b      	b.n	8010f18 <_dtoa_r+0x290>
 8010f00:	2301      	movs	r3, #1
 8010f02:	e7f3      	b.n	8010eec <_dtoa_r+0x264>
 8010f04:	2300      	movs	r3, #0
 8010f06:	9309      	str	r3, [sp, #36]	; 0x24
 8010f08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010f0a:	445b      	add	r3, fp
 8010f0c:	9301      	str	r3, [sp, #4]
 8010f0e:	3301      	adds	r3, #1
 8010f10:	2b01      	cmp	r3, #1
 8010f12:	9304      	str	r3, [sp, #16]
 8010f14:	bfb8      	it	lt
 8010f16:	2301      	movlt	r3, #1
 8010f18:	69e0      	ldr	r0, [r4, #28]
 8010f1a:	2100      	movs	r1, #0
 8010f1c:	2204      	movs	r2, #4
 8010f1e:	f102 0614 	add.w	r6, r2, #20
 8010f22:	429e      	cmp	r6, r3
 8010f24:	d93d      	bls.n	8010fa2 <_dtoa_r+0x31a>
 8010f26:	6041      	str	r1, [r0, #4]
 8010f28:	4620      	mov	r0, r4
 8010f2a:	f000 fceb 	bl	8011904 <_Balloc>
 8010f2e:	9000      	str	r0, [sp, #0]
 8010f30:	2800      	cmp	r0, #0
 8010f32:	d139      	bne.n	8010fa8 <_dtoa_r+0x320>
 8010f34:	4b16      	ldr	r3, [pc, #88]	; (8010f90 <_dtoa_r+0x308>)
 8010f36:	4602      	mov	r2, r0
 8010f38:	f240 11af 	movw	r1, #431	; 0x1af
 8010f3c:	e6bd      	b.n	8010cba <_dtoa_r+0x32>
 8010f3e:	2301      	movs	r3, #1
 8010f40:	e7e1      	b.n	8010f06 <_dtoa_r+0x27e>
 8010f42:	2501      	movs	r5, #1
 8010f44:	2300      	movs	r3, #0
 8010f46:	9307      	str	r3, [sp, #28]
 8010f48:	9509      	str	r5, [sp, #36]	; 0x24
 8010f4a:	f04f 33ff 	mov.w	r3, #4294967295
 8010f4e:	9301      	str	r3, [sp, #4]
 8010f50:	9304      	str	r3, [sp, #16]
 8010f52:	2200      	movs	r2, #0
 8010f54:	2312      	movs	r3, #18
 8010f56:	e7d1      	b.n	8010efc <_dtoa_r+0x274>
 8010f58:	636f4361 	.word	0x636f4361
 8010f5c:	3fd287a7 	.word	0x3fd287a7
 8010f60:	8b60c8b3 	.word	0x8b60c8b3
 8010f64:	3fc68a28 	.word	0x3fc68a28
 8010f68:	509f79fb 	.word	0x509f79fb
 8010f6c:	3fd34413 	.word	0x3fd34413
 8010f70:	0801467d 	.word	0x0801467d
 8010f74:	08014694 	.word	0x08014694
 8010f78:	7ff00000 	.word	0x7ff00000
 8010f7c:	08014679 	.word	0x08014679
 8010f80:	08014670 	.word	0x08014670
 8010f84:	0801464d 	.word	0x0801464d
 8010f88:	3ff80000 	.word	0x3ff80000
 8010f8c:	08014780 	.word	0x08014780
 8010f90:	080146ec 	.word	0x080146ec
 8010f94:	2301      	movs	r3, #1
 8010f96:	9309      	str	r3, [sp, #36]	; 0x24
 8010f98:	e7d7      	b.n	8010f4a <_dtoa_r+0x2c2>
 8010f9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010f9c:	9301      	str	r3, [sp, #4]
 8010f9e:	9304      	str	r3, [sp, #16]
 8010fa0:	e7ba      	b.n	8010f18 <_dtoa_r+0x290>
 8010fa2:	3101      	adds	r1, #1
 8010fa4:	0052      	lsls	r2, r2, #1
 8010fa6:	e7ba      	b.n	8010f1e <_dtoa_r+0x296>
 8010fa8:	69e3      	ldr	r3, [r4, #28]
 8010faa:	9a00      	ldr	r2, [sp, #0]
 8010fac:	601a      	str	r2, [r3, #0]
 8010fae:	9b04      	ldr	r3, [sp, #16]
 8010fb0:	2b0e      	cmp	r3, #14
 8010fb2:	f200 80a8 	bhi.w	8011106 <_dtoa_r+0x47e>
 8010fb6:	2d00      	cmp	r5, #0
 8010fb8:	f000 80a5 	beq.w	8011106 <_dtoa_r+0x47e>
 8010fbc:	f1bb 0f00 	cmp.w	fp, #0
 8010fc0:	dd38      	ble.n	8011034 <_dtoa_r+0x3ac>
 8010fc2:	4bc0      	ldr	r3, [pc, #768]	; (80112c4 <_dtoa_r+0x63c>)
 8010fc4:	f00b 020f 	and.w	r2, fp, #15
 8010fc8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010fcc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8010fd0:	e9d3 6700 	ldrd	r6, r7, [r3]
 8010fd4:	ea4f 182b 	mov.w	r8, fp, asr #4
 8010fd8:	d019      	beq.n	801100e <_dtoa_r+0x386>
 8010fda:	4bbb      	ldr	r3, [pc, #748]	; (80112c8 <_dtoa_r+0x640>)
 8010fdc:	ec51 0b18 	vmov	r0, r1, d8
 8010fe0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010fe4:	f7ef fc4a 	bl	800087c <__aeabi_ddiv>
 8010fe8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010fec:	f008 080f 	and.w	r8, r8, #15
 8010ff0:	2503      	movs	r5, #3
 8010ff2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80112c8 <_dtoa_r+0x640>
 8010ff6:	f1b8 0f00 	cmp.w	r8, #0
 8010ffa:	d10a      	bne.n	8011012 <_dtoa_r+0x38a>
 8010ffc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011000:	4632      	mov	r2, r6
 8011002:	463b      	mov	r3, r7
 8011004:	f7ef fc3a 	bl	800087c <__aeabi_ddiv>
 8011008:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801100c:	e02b      	b.n	8011066 <_dtoa_r+0x3de>
 801100e:	2502      	movs	r5, #2
 8011010:	e7ef      	b.n	8010ff2 <_dtoa_r+0x36a>
 8011012:	f018 0f01 	tst.w	r8, #1
 8011016:	d008      	beq.n	801102a <_dtoa_r+0x3a2>
 8011018:	4630      	mov	r0, r6
 801101a:	4639      	mov	r1, r7
 801101c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8011020:	f7ef fb02 	bl	8000628 <__aeabi_dmul>
 8011024:	3501      	adds	r5, #1
 8011026:	4606      	mov	r6, r0
 8011028:	460f      	mov	r7, r1
 801102a:	ea4f 0868 	mov.w	r8, r8, asr #1
 801102e:	f109 0908 	add.w	r9, r9, #8
 8011032:	e7e0      	b.n	8010ff6 <_dtoa_r+0x36e>
 8011034:	f000 809f 	beq.w	8011176 <_dtoa_r+0x4ee>
 8011038:	f1cb 0600 	rsb	r6, fp, #0
 801103c:	4ba1      	ldr	r3, [pc, #644]	; (80112c4 <_dtoa_r+0x63c>)
 801103e:	4fa2      	ldr	r7, [pc, #648]	; (80112c8 <_dtoa_r+0x640>)
 8011040:	f006 020f 	and.w	r2, r6, #15
 8011044:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011048:	e9d3 2300 	ldrd	r2, r3, [r3]
 801104c:	ec51 0b18 	vmov	r0, r1, d8
 8011050:	f7ef faea 	bl	8000628 <__aeabi_dmul>
 8011054:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011058:	1136      	asrs	r6, r6, #4
 801105a:	2300      	movs	r3, #0
 801105c:	2502      	movs	r5, #2
 801105e:	2e00      	cmp	r6, #0
 8011060:	d17e      	bne.n	8011160 <_dtoa_r+0x4d8>
 8011062:	2b00      	cmp	r3, #0
 8011064:	d1d0      	bne.n	8011008 <_dtoa_r+0x380>
 8011066:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011068:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801106c:	2b00      	cmp	r3, #0
 801106e:	f000 8084 	beq.w	801117a <_dtoa_r+0x4f2>
 8011072:	4b96      	ldr	r3, [pc, #600]	; (80112cc <_dtoa_r+0x644>)
 8011074:	2200      	movs	r2, #0
 8011076:	4640      	mov	r0, r8
 8011078:	4649      	mov	r1, r9
 801107a:	f7ef fd47 	bl	8000b0c <__aeabi_dcmplt>
 801107e:	2800      	cmp	r0, #0
 8011080:	d07b      	beq.n	801117a <_dtoa_r+0x4f2>
 8011082:	9b04      	ldr	r3, [sp, #16]
 8011084:	2b00      	cmp	r3, #0
 8011086:	d078      	beq.n	801117a <_dtoa_r+0x4f2>
 8011088:	9b01      	ldr	r3, [sp, #4]
 801108a:	2b00      	cmp	r3, #0
 801108c:	dd39      	ble.n	8011102 <_dtoa_r+0x47a>
 801108e:	4b90      	ldr	r3, [pc, #576]	; (80112d0 <_dtoa_r+0x648>)
 8011090:	2200      	movs	r2, #0
 8011092:	4640      	mov	r0, r8
 8011094:	4649      	mov	r1, r9
 8011096:	f7ef fac7 	bl	8000628 <__aeabi_dmul>
 801109a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801109e:	9e01      	ldr	r6, [sp, #4]
 80110a0:	f10b 37ff 	add.w	r7, fp, #4294967295
 80110a4:	3501      	adds	r5, #1
 80110a6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80110aa:	4628      	mov	r0, r5
 80110ac:	f7ef fa52 	bl	8000554 <__aeabi_i2d>
 80110b0:	4642      	mov	r2, r8
 80110b2:	464b      	mov	r3, r9
 80110b4:	f7ef fab8 	bl	8000628 <__aeabi_dmul>
 80110b8:	4b86      	ldr	r3, [pc, #536]	; (80112d4 <_dtoa_r+0x64c>)
 80110ba:	2200      	movs	r2, #0
 80110bc:	f7ef f8fe 	bl	80002bc <__adddf3>
 80110c0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80110c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80110c8:	9303      	str	r3, [sp, #12]
 80110ca:	2e00      	cmp	r6, #0
 80110cc:	d158      	bne.n	8011180 <_dtoa_r+0x4f8>
 80110ce:	4b82      	ldr	r3, [pc, #520]	; (80112d8 <_dtoa_r+0x650>)
 80110d0:	2200      	movs	r2, #0
 80110d2:	4640      	mov	r0, r8
 80110d4:	4649      	mov	r1, r9
 80110d6:	f7ef f8ef 	bl	80002b8 <__aeabi_dsub>
 80110da:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80110de:	4680      	mov	r8, r0
 80110e0:	4689      	mov	r9, r1
 80110e2:	f7ef fd31 	bl	8000b48 <__aeabi_dcmpgt>
 80110e6:	2800      	cmp	r0, #0
 80110e8:	f040 8296 	bne.w	8011618 <_dtoa_r+0x990>
 80110ec:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80110f0:	4640      	mov	r0, r8
 80110f2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80110f6:	4649      	mov	r1, r9
 80110f8:	f7ef fd08 	bl	8000b0c <__aeabi_dcmplt>
 80110fc:	2800      	cmp	r0, #0
 80110fe:	f040 8289 	bne.w	8011614 <_dtoa_r+0x98c>
 8011102:	ed8d 8b02 	vstr	d8, [sp, #8]
 8011106:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011108:	2b00      	cmp	r3, #0
 801110a:	f2c0 814e 	blt.w	80113aa <_dtoa_r+0x722>
 801110e:	f1bb 0f0e 	cmp.w	fp, #14
 8011112:	f300 814a 	bgt.w	80113aa <_dtoa_r+0x722>
 8011116:	4b6b      	ldr	r3, [pc, #428]	; (80112c4 <_dtoa_r+0x63c>)
 8011118:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801111c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011120:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011122:	2b00      	cmp	r3, #0
 8011124:	f280 80dc 	bge.w	80112e0 <_dtoa_r+0x658>
 8011128:	9b04      	ldr	r3, [sp, #16]
 801112a:	2b00      	cmp	r3, #0
 801112c:	f300 80d8 	bgt.w	80112e0 <_dtoa_r+0x658>
 8011130:	f040 826f 	bne.w	8011612 <_dtoa_r+0x98a>
 8011134:	4b68      	ldr	r3, [pc, #416]	; (80112d8 <_dtoa_r+0x650>)
 8011136:	2200      	movs	r2, #0
 8011138:	4640      	mov	r0, r8
 801113a:	4649      	mov	r1, r9
 801113c:	f7ef fa74 	bl	8000628 <__aeabi_dmul>
 8011140:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011144:	f7ef fcf6 	bl	8000b34 <__aeabi_dcmpge>
 8011148:	9e04      	ldr	r6, [sp, #16]
 801114a:	4637      	mov	r7, r6
 801114c:	2800      	cmp	r0, #0
 801114e:	f040 8245 	bne.w	80115dc <_dtoa_r+0x954>
 8011152:	9d00      	ldr	r5, [sp, #0]
 8011154:	2331      	movs	r3, #49	; 0x31
 8011156:	f805 3b01 	strb.w	r3, [r5], #1
 801115a:	f10b 0b01 	add.w	fp, fp, #1
 801115e:	e241      	b.n	80115e4 <_dtoa_r+0x95c>
 8011160:	07f2      	lsls	r2, r6, #31
 8011162:	d505      	bpl.n	8011170 <_dtoa_r+0x4e8>
 8011164:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011168:	f7ef fa5e 	bl	8000628 <__aeabi_dmul>
 801116c:	3501      	adds	r5, #1
 801116e:	2301      	movs	r3, #1
 8011170:	1076      	asrs	r6, r6, #1
 8011172:	3708      	adds	r7, #8
 8011174:	e773      	b.n	801105e <_dtoa_r+0x3d6>
 8011176:	2502      	movs	r5, #2
 8011178:	e775      	b.n	8011066 <_dtoa_r+0x3de>
 801117a:	9e04      	ldr	r6, [sp, #16]
 801117c:	465f      	mov	r7, fp
 801117e:	e792      	b.n	80110a6 <_dtoa_r+0x41e>
 8011180:	9900      	ldr	r1, [sp, #0]
 8011182:	4b50      	ldr	r3, [pc, #320]	; (80112c4 <_dtoa_r+0x63c>)
 8011184:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011188:	4431      	add	r1, r6
 801118a:	9102      	str	r1, [sp, #8]
 801118c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801118e:	eeb0 9a47 	vmov.f32	s18, s14
 8011192:	eef0 9a67 	vmov.f32	s19, s15
 8011196:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801119a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801119e:	2900      	cmp	r1, #0
 80111a0:	d044      	beq.n	801122c <_dtoa_r+0x5a4>
 80111a2:	494e      	ldr	r1, [pc, #312]	; (80112dc <_dtoa_r+0x654>)
 80111a4:	2000      	movs	r0, #0
 80111a6:	f7ef fb69 	bl	800087c <__aeabi_ddiv>
 80111aa:	ec53 2b19 	vmov	r2, r3, d9
 80111ae:	f7ef f883 	bl	80002b8 <__aeabi_dsub>
 80111b2:	9d00      	ldr	r5, [sp, #0]
 80111b4:	ec41 0b19 	vmov	d9, r0, r1
 80111b8:	4649      	mov	r1, r9
 80111ba:	4640      	mov	r0, r8
 80111bc:	f7ef fce4 	bl	8000b88 <__aeabi_d2iz>
 80111c0:	4606      	mov	r6, r0
 80111c2:	f7ef f9c7 	bl	8000554 <__aeabi_i2d>
 80111c6:	4602      	mov	r2, r0
 80111c8:	460b      	mov	r3, r1
 80111ca:	4640      	mov	r0, r8
 80111cc:	4649      	mov	r1, r9
 80111ce:	f7ef f873 	bl	80002b8 <__aeabi_dsub>
 80111d2:	3630      	adds	r6, #48	; 0x30
 80111d4:	f805 6b01 	strb.w	r6, [r5], #1
 80111d8:	ec53 2b19 	vmov	r2, r3, d9
 80111dc:	4680      	mov	r8, r0
 80111de:	4689      	mov	r9, r1
 80111e0:	f7ef fc94 	bl	8000b0c <__aeabi_dcmplt>
 80111e4:	2800      	cmp	r0, #0
 80111e6:	d164      	bne.n	80112b2 <_dtoa_r+0x62a>
 80111e8:	4642      	mov	r2, r8
 80111ea:	464b      	mov	r3, r9
 80111ec:	4937      	ldr	r1, [pc, #220]	; (80112cc <_dtoa_r+0x644>)
 80111ee:	2000      	movs	r0, #0
 80111f0:	f7ef f862 	bl	80002b8 <__aeabi_dsub>
 80111f4:	ec53 2b19 	vmov	r2, r3, d9
 80111f8:	f7ef fc88 	bl	8000b0c <__aeabi_dcmplt>
 80111fc:	2800      	cmp	r0, #0
 80111fe:	f040 80b6 	bne.w	801136e <_dtoa_r+0x6e6>
 8011202:	9b02      	ldr	r3, [sp, #8]
 8011204:	429d      	cmp	r5, r3
 8011206:	f43f af7c 	beq.w	8011102 <_dtoa_r+0x47a>
 801120a:	4b31      	ldr	r3, [pc, #196]	; (80112d0 <_dtoa_r+0x648>)
 801120c:	ec51 0b19 	vmov	r0, r1, d9
 8011210:	2200      	movs	r2, #0
 8011212:	f7ef fa09 	bl	8000628 <__aeabi_dmul>
 8011216:	4b2e      	ldr	r3, [pc, #184]	; (80112d0 <_dtoa_r+0x648>)
 8011218:	ec41 0b19 	vmov	d9, r0, r1
 801121c:	2200      	movs	r2, #0
 801121e:	4640      	mov	r0, r8
 8011220:	4649      	mov	r1, r9
 8011222:	f7ef fa01 	bl	8000628 <__aeabi_dmul>
 8011226:	4680      	mov	r8, r0
 8011228:	4689      	mov	r9, r1
 801122a:	e7c5      	b.n	80111b8 <_dtoa_r+0x530>
 801122c:	ec51 0b17 	vmov	r0, r1, d7
 8011230:	f7ef f9fa 	bl	8000628 <__aeabi_dmul>
 8011234:	9b02      	ldr	r3, [sp, #8]
 8011236:	9d00      	ldr	r5, [sp, #0]
 8011238:	930f      	str	r3, [sp, #60]	; 0x3c
 801123a:	ec41 0b19 	vmov	d9, r0, r1
 801123e:	4649      	mov	r1, r9
 8011240:	4640      	mov	r0, r8
 8011242:	f7ef fca1 	bl	8000b88 <__aeabi_d2iz>
 8011246:	4606      	mov	r6, r0
 8011248:	f7ef f984 	bl	8000554 <__aeabi_i2d>
 801124c:	3630      	adds	r6, #48	; 0x30
 801124e:	4602      	mov	r2, r0
 8011250:	460b      	mov	r3, r1
 8011252:	4640      	mov	r0, r8
 8011254:	4649      	mov	r1, r9
 8011256:	f7ef f82f 	bl	80002b8 <__aeabi_dsub>
 801125a:	f805 6b01 	strb.w	r6, [r5], #1
 801125e:	9b02      	ldr	r3, [sp, #8]
 8011260:	429d      	cmp	r5, r3
 8011262:	4680      	mov	r8, r0
 8011264:	4689      	mov	r9, r1
 8011266:	f04f 0200 	mov.w	r2, #0
 801126a:	d124      	bne.n	80112b6 <_dtoa_r+0x62e>
 801126c:	4b1b      	ldr	r3, [pc, #108]	; (80112dc <_dtoa_r+0x654>)
 801126e:	ec51 0b19 	vmov	r0, r1, d9
 8011272:	f7ef f823 	bl	80002bc <__adddf3>
 8011276:	4602      	mov	r2, r0
 8011278:	460b      	mov	r3, r1
 801127a:	4640      	mov	r0, r8
 801127c:	4649      	mov	r1, r9
 801127e:	f7ef fc63 	bl	8000b48 <__aeabi_dcmpgt>
 8011282:	2800      	cmp	r0, #0
 8011284:	d173      	bne.n	801136e <_dtoa_r+0x6e6>
 8011286:	ec53 2b19 	vmov	r2, r3, d9
 801128a:	4914      	ldr	r1, [pc, #80]	; (80112dc <_dtoa_r+0x654>)
 801128c:	2000      	movs	r0, #0
 801128e:	f7ef f813 	bl	80002b8 <__aeabi_dsub>
 8011292:	4602      	mov	r2, r0
 8011294:	460b      	mov	r3, r1
 8011296:	4640      	mov	r0, r8
 8011298:	4649      	mov	r1, r9
 801129a:	f7ef fc37 	bl	8000b0c <__aeabi_dcmplt>
 801129e:	2800      	cmp	r0, #0
 80112a0:	f43f af2f 	beq.w	8011102 <_dtoa_r+0x47a>
 80112a4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80112a6:	1e6b      	subs	r3, r5, #1
 80112a8:	930f      	str	r3, [sp, #60]	; 0x3c
 80112aa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80112ae:	2b30      	cmp	r3, #48	; 0x30
 80112b0:	d0f8      	beq.n	80112a4 <_dtoa_r+0x61c>
 80112b2:	46bb      	mov	fp, r7
 80112b4:	e04a      	b.n	801134c <_dtoa_r+0x6c4>
 80112b6:	4b06      	ldr	r3, [pc, #24]	; (80112d0 <_dtoa_r+0x648>)
 80112b8:	f7ef f9b6 	bl	8000628 <__aeabi_dmul>
 80112bc:	4680      	mov	r8, r0
 80112be:	4689      	mov	r9, r1
 80112c0:	e7bd      	b.n	801123e <_dtoa_r+0x5b6>
 80112c2:	bf00      	nop
 80112c4:	08014780 	.word	0x08014780
 80112c8:	08014758 	.word	0x08014758
 80112cc:	3ff00000 	.word	0x3ff00000
 80112d0:	40240000 	.word	0x40240000
 80112d4:	401c0000 	.word	0x401c0000
 80112d8:	40140000 	.word	0x40140000
 80112dc:	3fe00000 	.word	0x3fe00000
 80112e0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80112e4:	9d00      	ldr	r5, [sp, #0]
 80112e6:	4642      	mov	r2, r8
 80112e8:	464b      	mov	r3, r9
 80112ea:	4630      	mov	r0, r6
 80112ec:	4639      	mov	r1, r7
 80112ee:	f7ef fac5 	bl	800087c <__aeabi_ddiv>
 80112f2:	f7ef fc49 	bl	8000b88 <__aeabi_d2iz>
 80112f6:	9001      	str	r0, [sp, #4]
 80112f8:	f7ef f92c 	bl	8000554 <__aeabi_i2d>
 80112fc:	4642      	mov	r2, r8
 80112fe:	464b      	mov	r3, r9
 8011300:	f7ef f992 	bl	8000628 <__aeabi_dmul>
 8011304:	4602      	mov	r2, r0
 8011306:	460b      	mov	r3, r1
 8011308:	4630      	mov	r0, r6
 801130a:	4639      	mov	r1, r7
 801130c:	f7ee ffd4 	bl	80002b8 <__aeabi_dsub>
 8011310:	9e01      	ldr	r6, [sp, #4]
 8011312:	9f04      	ldr	r7, [sp, #16]
 8011314:	3630      	adds	r6, #48	; 0x30
 8011316:	f805 6b01 	strb.w	r6, [r5], #1
 801131a:	9e00      	ldr	r6, [sp, #0]
 801131c:	1bae      	subs	r6, r5, r6
 801131e:	42b7      	cmp	r7, r6
 8011320:	4602      	mov	r2, r0
 8011322:	460b      	mov	r3, r1
 8011324:	d134      	bne.n	8011390 <_dtoa_r+0x708>
 8011326:	f7ee ffc9 	bl	80002bc <__adddf3>
 801132a:	4642      	mov	r2, r8
 801132c:	464b      	mov	r3, r9
 801132e:	4606      	mov	r6, r0
 8011330:	460f      	mov	r7, r1
 8011332:	f7ef fc09 	bl	8000b48 <__aeabi_dcmpgt>
 8011336:	b9c8      	cbnz	r0, 801136c <_dtoa_r+0x6e4>
 8011338:	4642      	mov	r2, r8
 801133a:	464b      	mov	r3, r9
 801133c:	4630      	mov	r0, r6
 801133e:	4639      	mov	r1, r7
 8011340:	f7ef fbda 	bl	8000af8 <__aeabi_dcmpeq>
 8011344:	b110      	cbz	r0, 801134c <_dtoa_r+0x6c4>
 8011346:	9b01      	ldr	r3, [sp, #4]
 8011348:	07db      	lsls	r3, r3, #31
 801134a:	d40f      	bmi.n	801136c <_dtoa_r+0x6e4>
 801134c:	4651      	mov	r1, sl
 801134e:	4620      	mov	r0, r4
 8011350:	f000 fb18 	bl	8011984 <_Bfree>
 8011354:	2300      	movs	r3, #0
 8011356:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011358:	702b      	strb	r3, [r5, #0]
 801135a:	f10b 0301 	add.w	r3, fp, #1
 801135e:	6013      	str	r3, [r2, #0]
 8011360:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011362:	2b00      	cmp	r3, #0
 8011364:	f43f ace2 	beq.w	8010d2c <_dtoa_r+0xa4>
 8011368:	601d      	str	r5, [r3, #0]
 801136a:	e4df      	b.n	8010d2c <_dtoa_r+0xa4>
 801136c:	465f      	mov	r7, fp
 801136e:	462b      	mov	r3, r5
 8011370:	461d      	mov	r5, r3
 8011372:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011376:	2a39      	cmp	r2, #57	; 0x39
 8011378:	d106      	bne.n	8011388 <_dtoa_r+0x700>
 801137a:	9a00      	ldr	r2, [sp, #0]
 801137c:	429a      	cmp	r2, r3
 801137e:	d1f7      	bne.n	8011370 <_dtoa_r+0x6e8>
 8011380:	9900      	ldr	r1, [sp, #0]
 8011382:	2230      	movs	r2, #48	; 0x30
 8011384:	3701      	adds	r7, #1
 8011386:	700a      	strb	r2, [r1, #0]
 8011388:	781a      	ldrb	r2, [r3, #0]
 801138a:	3201      	adds	r2, #1
 801138c:	701a      	strb	r2, [r3, #0]
 801138e:	e790      	b.n	80112b2 <_dtoa_r+0x62a>
 8011390:	4ba3      	ldr	r3, [pc, #652]	; (8011620 <_dtoa_r+0x998>)
 8011392:	2200      	movs	r2, #0
 8011394:	f7ef f948 	bl	8000628 <__aeabi_dmul>
 8011398:	2200      	movs	r2, #0
 801139a:	2300      	movs	r3, #0
 801139c:	4606      	mov	r6, r0
 801139e:	460f      	mov	r7, r1
 80113a0:	f7ef fbaa 	bl	8000af8 <__aeabi_dcmpeq>
 80113a4:	2800      	cmp	r0, #0
 80113a6:	d09e      	beq.n	80112e6 <_dtoa_r+0x65e>
 80113a8:	e7d0      	b.n	801134c <_dtoa_r+0x6c4>
 80113aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80113ac:	2a00      	cmp	r2, #0
 80113ae:	f000 80ca 	beq.w	8011546 <_dtoa_r+0x8be>
 80113b2:	9a07      	ldr	r2, [sp, #28]
 80113b4:	2a01      	cmp	r2, #1
 80113b6:	f300 80ad 	bgt.w	8011514 <_dtoa_r+0x88c>
 80113ba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80113bc:	2a00      	cmp	r2, #0
 80113be:	f000 80a5 	beq.w	801150c <_dtoa_r+0x884>
 80113c2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80113c6:	9e08      	ldr	r6, [sp, #32]
 80113c8:	9d05      	ldr	r5, [sp, #20]
 80113ca:	9a05      	ldr	r2, [sp, #20]
 80113cc:	441a      	add	r2, r3
 80113ce:	9205      	str	r2, [sp, #20]
 80113d0:	9a06      	ldr	r2, [sp, #24]
 80113d2:	2101      	movs	r1, #1
 80113d4:	441a      	add	r2, r3
 80113d6:	4620      	mov	r0, r4
 80113d8:	9206      	str	r2, [sp, #24]
 80113da:	f000 fb89 	bl	8011af0 <__i2b>
 80113de:	4607      	mov	r7, r0
 80113e0:	b165      	cbz	r5, 80113fc <_dtoa_r+0x774>
 80113e2:	9b06      	ldr	r3, [sp, #24]
 80113e4:	2b00      	cmp	r3, #0
 80113e6:	dd09      	ble.n	80113fc <_dtoa_r+0x774>
 80113e8:	42ab      	cmp	r3, r5
 80113ea:	9a05      	ldr	r2, [sp, #20]
 80113ec:	bfa8      	it	ge
 80113ee:	462b      	movge	r3, r5
 80113f0:	1ad2      	subs	r2, r2, r3
 80113f2:	9205      	str	r2, [sp, #20]
 80113f4:	9a06      	ldr	r2, [sp, #24]
 80113f6:	1aed      	subs	r5, r5, r3
 80113f8:	1ad3      	subs	r3, r2, r3
 80113fa:	9306      	str	r3, [sp, #24]
 80113fc:	9b08      	ldr	r3, [sp, #32]
 80113fe:	b1f3      	cbz	r3, 801143e <_dtoa_r+0x7b6>
 8011400:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011402:	2b00      	cmp	r3, #0
 8011404:	f000 80a3 	beq.w	801154e <_dtoa_r+0x8c6>
 8011408:	2e00      	cmp	r6, #0
 801140a:	dd10      	ble.n	801142e <_dtoa_r+0x7a6>
 801140c:	4639      	mov	r1, r7
 801140e:	4632      	mov	r2, r6
 8011410:	4620      	mov	r0, r4
 8011412:	f000 fc2d 	bl	8011c70 <__pow5mult>
 8011416:	4652      	mov	r2, sl
 8011418:	4601      	mov	r1, r0
 801141a:	4607      	mov	r7, r0
 801141c:	4620      	mov	r0, r4
 801141e:	f000 fb7d 	bl	8011b1c <__multiply>
 8011422:	4651      	mov	r1, sl
 8011424:	4680      	mov	r8, r0
 8011426:	4620      	mov	r0, r4
 8011428:	f000 faac 	bl	8011984 <_Bfree>
 801142c:	46c2      	mov	sl, r8
 801142e:	9b08      	ldr	r3, [sp, #32]
 8011430:	1b9a      	subs	r2, r3, r6
 8011432:	d004      	beq.n	801143e <_dtoa_r+0x7b6>
 8011434:	4651      	mov	r1, sl
 8011436:	4620      	mov	r0, r4
 8011438:	f000 fc1a 	bl	8011c70 <__pow5mult>
 801143c:	4682      	mov	sl, r0
 801143e:	2101      	movs	r1, #1
 8011440:	4620      	mov	r0, r4
 8011442:	f000 fb55 	bl	8011af0 <__i2b>
 8011446:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011448:	2b00      	cmp	r3, #0
 801144a:	4606      	mov	r6, r0
 801144c:	f340 8081 	ble.w	8011552 <_dtoa_r+0x8ca>
 8011450:	461a      	mov	r2, r3
 8011452:	4601      	mov	r1, r0
 8011454:	4620      	mov	r0, r4
 8011456:	f000 fc0b 	bl	8011c70 <__pow5mult>
 801145a:	9b07      	ldr	r3, [sp, #28]
 801145c:	2b01      	cmp	r3, #1
 801145e:	4606      	mov	r6, r0
 8011460:	dd7a      	ble.n	8011558 <_dtoa_r+0x8d0>
 8011462:	f04f 0800 	mov.w	r8, #0
 8011466:	6933      	ldr	r3, [r6, #16]
 8011468:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801146c:	6918      	ldr	r0, [r3, #16]
 801146e:	f000 faf1 	bl	8011a54 <__hi0bits>
 8011472:	f1c0 0020 	rsb	r0, r0, #32
 8011476:	9b06      	ldr	r3, [sp, #24]
 8011478:	4418      	add	r0, r3
 801147a:	f010 001f 	ands.w	r0, r0, #31
 801147e:	f000 8094 	beq.w	80115aa <_dtoa_r+0x922>
 8011482:	f1c0 0320 	rsb	r3, r0, #32
 8011486:	2b04      	cmp	r3, #4
 8011488:	f340 8085 	ble.w	8011596 <_dtoa_r+0x90e>
 801148c:	9b05      	ldr	r3, [sp, #20]
 801148e:	f1c0 001c 	rsb	r0, r0, #28
 8011492:	4403      	add	r3, r0
 8011494:	9305      	str	r3, [sp, #20]
 8011496:	9b06      	ldr	r3, [sp, #24]
 8011498:	4403      	add	r3, r0
 801149a:	4405      	add	r5, r0
 801149c:	9306      	str	r3, [sp, #24]
 801149e:	9b05      	ldr	r3, [sp, #20]
 80114a0:	2b00      	cmp	r3, #0
 80114a2:	dd05      	ble.n	80114b0 <_dtoa_r+0x828>
 80114a4:	4651      	mov	r1, sl
 80114a6:	461a      	mov	r2, r3
 80114a8:	4620      	mov	r0, r4
 80114aa:	f000 fc3b 	bl	8011d24 <__lshift>
 80114ae:	4682      	mov	sl, r0
 80114b0:	9b06      	ldr	r3, [sp, #24]
 80114b2:	2b00      	cmp	r3, #0
 80114b4:	dd05      	ble.n	80114c2 <_dtoa_r+0x83a>
 80114b6:	4631      	mov	r1, r6
 80114b8:	461a      	mov	r2, r3
 80114ba:	4620      	mov	r0, r4
 80114bc:	f000 fc32 	bl	8011d24 <__lshift>
 80114c0:	4606      	mov	r6, r0
 80114c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80114c4:	2b00      	cmp	r3, #0
 80114c6:	d072      	beq.n	80115ae <_dtoa_r+0x926>
 80114c8:	4631      	mov	r1, r6
 80114ca:	4650      	mov	r0, sl
 80114cc:	f000 fc96 	bl	8011dfc <__mcmp>
 80114d0:	2800      	cmp	r0, #0
 80114d2:	da6c      	bge.n	80115ae <_dtoa_r+0x926>
 80114d4:	2300      	movs	r3, #0
 80114d6:	4651      	mov	r1, sl
 80114d8:	220a      	movs	r2, #10
 80114da:	4620      	mov	r0, r4
 80114dc:	f000 fa74 	bl	80119c8 <__multadd>
 80114e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80114e2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80114e6:	4682      	mov	sl, r0
 80114e8:	2b00      	cmp	r3, #0
 80114ea:	f000 81b0 	beq.w	801184e <_dtoa_r+0xbc6>
 80114ee:	2300      	movs	r3, #0
 80114f0:	4639      	mov	r1, r7
 80114f2:	220a      	movs	r2, #10
 80114f4:	4620      	mov	r0, r4
 80114f6:	f000 fa67 	bl	80119c8 <__multadd>
 80114fa:	9b01      	ldr	r3, [sp, #4]
 80114fc:	2b00      	cmp	r3, #0
 80114fe:	4607      	mov	r7, r0
 8011500:	f300 8096 	bgt.w	8011630 <_dtoa_r+0x9a8>
 8011504:	9b07      	ldr	r3, [sp, #28]
 8011506:	2b02      	cmp	r3, #2
 8011508:	dc59      	bgt.n	80115be <_dtoa_r+0x936>
 801150a:	e091      	b.n	8011630 <_dtoa_r+0x9a8>
 801150c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801150e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8011512:	e758      	b.n	80113c6 <_dtoa_r+0x73e>
 8011514:	9b04      	ldr	r3, [sp, #16]
 8011516:	1e5e      	subs	r6, r3, #1
 8011518:	9b08      	ldr	r3, [sp, #32]
 801151a:	42b3      	cmp	r3, r6
 801151c:	bfbf      	itttt	lt
 801151e:	9b08      	ldrlt	r3, [sp, #32]
 8011520:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8011522:	9608      	strlt	r6, [sp, #32]
 8011524:	1af3      	sublt	r3, r6, r3
 8011526:	bfb4      	ite	lt
 8011528:	18d2      	addlt	r2, r2, r3
 801152a:	1b9e      	subge	r6, r3, r6
 801152c:	9b04      	ldr	r3, [sp, #16]
 801152e:	bfbc      	itt	lt
 8011530:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8011532:	2600      	movlt	r6, #0
 8011534:	2b00      	cmp	r3, #0
 8011536:	bfb7      	itett	lt
 8011538:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 801153c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8011540:	1a9d      	sublt	r5, r3, r2
 8011542:	2300      	movlt	r3, #0
 8011544:	e741      	b.n	80113ca <_dtoa_r+0x742>
 8011546:	9e08      	ldr	r6, [sp, #32]
 8011548:	9d05      	ldr	r5, [sp, #20]
 801154a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801154c:	e748      	b.n	80113e0 <_dtoa_r+0x758>
 801154e:	9a08      	ldr	r2, [sp, #32]
 8011550:	e770      	b.n	8011434 <_dtoa_r+0x7ac>
 8011552:	9b07      	ldr	r3, [sp, #28]
 8011554:	2b01      	cmp	r3, #1
 8011556:	dc19      	bgt.n	801158c <_dtoa_r+0x904>
 8011558:	9b02      	ldr	r3, [sp, #8]
 801155a:	b9bb      	cbnz	r3, 801158c <_dtoa_r+0x904>
 801155c:	9b03      	ldr	r3, [sp, #12]
 801155e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011562:	b99b      	cbnz	r3, 801158c <_dtoa_r+0x904>
 8011564:	9b03      	ldr	r3, [sp, #12]
 8011566:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801156a:	0d1b      	lsrs	r3, r3, #20
 801156c:	051b      	lsls	r3, r3, #20
 801156e:	b183      	cbz	r3, 8011592 <_dtoa_r+0x90a>
 8011570:	9b05      	ldr	r3, [sp, #20]
 8011572:	3301      	adds	r3, #1
 8011574:	9305      	str	r3, [sp, #20]
 8011576:	9b06      	ldr	r3, [sp, #24]
 8011578:	3301      	adds	r3, #1
 801157a:	9306      	str	r3, [sp, #24]
 801157c:	f04f 0801 	mov.w	r8, #1
 8011580:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011582:	2b00      	cmp	r3, #0
 8011584:	f47f af6f 	bne.w	8011466 <_dtoa_r+0x7de>
 8011588:	2001      	movs	r0, #1
 801158a:	e774      	b.n	8011476 <_dtoa_r+0x7ee>
 801158c:	f04f 0800 	mov.w	r8, #0
 8011590:	e7f6      	b.n	8011580 <_dtoa_r+0x8f8>
 8011592:	4698      	mov	r8, r3
 8011594:	e7f4      	b.n	8011580 <_dtoa_r+0x8f8>
 8011596:	d082      	beq.n	801149e <_dtoa_r+0x816>
 8011598:	9a05      	ldr	r2, [sp, #20]
 801159a:	331c      	adds	r3, #28
 801159c:	441a      	add	r2, r3
 801159e:	9205      	str	r2, [sp, #20]
 80115a0:	9a06      	ldr	r2, [sp, #24]
 80115a2:	441a      	add	r2, r3
 80115a4:	441d      	add	r5, r3
 80115a6:	9206      	str	r2, [sp, #24]
 80115a8:	e779      	b.n	801149e <_dtoa_r+0x816>
 80115aa:	4603      	mov	r3, r0
 80115ac:	e7f4      	b.n	8011598 <_dtoa_r+0x910>
 80115ae:	9b04      	ldr	r3, [sp, #16]
 80115b0:	2b00      	cmp	r3, #0
 80115b2:	dc37      	bgt.n	8011624 <_dtoa_r+0x99c>
 80115b4:	9b07      	ldr	r3, [sp, #28]
 80115b6:	2b02      	cmp	r3, #2
 80115b8:	dd34      	ble.n	8011624 <_dtoa_r+0x99c>
 80115ba:	9b04      	ldr	r3, [sp, #16]
 80115bc:	9301      	str	r3, [sp, #4]
 80115be:	9b01      	ldr	r3, [sp, #4]
 80115c0:	b963      	cbnz	r3, 80115dc <_dtoa_r+0x954>
 80115c2:	4631      	mov	r1, r6
 80115c4:	2205      	movs	r2, #5
 80115c6:	4620      	mov	r0, r4
 80115c8:	f000 f9fe 	bl	80119c8 <__multadd>
 80115cc:	4601      	mov	r1, r0
 80115ce:	4606      	mov	r6, r0
 80115d0:	4650      	mov	r0, sl
 80115d2:	f000 fc13 	bl	8011dfc <__mcmp>
 80115d6:	2800      	cmp	r0, #0
 80115d8:	f73f adbb 	bgt.w	8011152 <_dtoa_r+0x4ca>
 80115dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80115de:	9d00      	ldr	r5, [sp, #0]
 80115e0:	ea6f 0b03 	mvn.w	fp, r3
 80115e4:	f04f 0800 	mov.w	r8, #0
 80115e8:	4631      	mov	r1, r6
 80115ea:	4620      	mov	r0, r4
 80115ec:	f000 f9ca 	bl	8011984 <_Bfree>
 80115f0:	2f00      	cmp	r7, #0
 80115f2:	f43f aeab 	beq.w	801134c <_dtoa_r+0x6c4>
 80115f6:	f1b8 0f00 	cmp.w	r8, #0
 80115fa:	d005      	beq.n	8011608 <_dtoa_r+0x980>
 80115fc:	45b8      	cmp	r8, r7
 80115fe:	d003      	beq.n	8011608 <_dtoa_r+0x980>
 8011600:	4641      	mov	r1, r8
 8011602:	4620      	mov	r0, r4
 8011604:	f000 f9be 	bl	8011984 <_Bfree>
 8011608:	4639      	mov	r1, r7
 801160a:	4620      	mov	r0, r4
 801160c:	f000 f9ba 	bl	8011984 <_Bfree>
 8011610:	e69c      	b.n	801134c <_dtoa_r+0x6c4>
 8011612:	2600      	movs	r6, #0
 8011614:	4637      	mov	r7, r6
 8011616:	e7e1      	b.n	80115dc <_dtoa_r+0x954>
 8011618:	46bb      	mov	fp, r7
 801161a:	4637      	mov	r7, r6
 801161c:	e599      	b.n	8011152 <_dtoa_r+0x4ca>
 801161e:	bf00      	nop
 8011620:	40240000 	.word	0x40240000
 8011624:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011626:	2b00      	cmp	r3, #0
 8011628:	f000 80c8 	beq.w	80117bc <_dtoa_r+0xb34>
 801162c:	9b04      	ldr	r3, [sp, #16]
 801162e:	9301      	str	r3, [sp, #4]
 8011630:	2d00      	cmp	r5, #0
 8011632:	dd05      	ble.n	8011640 <_dtoa_r+0x9b8>
 8011634:	4639      	mov	r1, r7
 8011636:	462a      	mov	r2, r5
 8011638:	4620      	mov	r0, r4
 801163a:	f000 fb73 	bl	8011d24 <__lshift>
 801163e:	4607      	mov	r7, r0
 8011640:	f1b8 0f00 	cmp.w	r8, #0
 8011644:	d05b      	beq.n	80116fe <_dtoa_r+0xa76>
 8011646:	6879      	ldr	r1, [r7, #4]
 8011648:	4620      	mov	r0, r4
 801164a:	f000 f95b 	bl	8011904 <_Balloc>
 801164e:	4605      	mov	r5, r0
 8011650:	b928      	cbnz	r0, 801165e <_dtoa_r+0x9d6>
 8011652:	4b83      	ldr	r3, [pc, #524]	; (8011860 <_dtoa_r+0xbd8>)
 8011654:	4602      	mov	r2, r0
 8011656:	f240 21ef 	movw	r1, #751	; 0x2ef
 801165a:	f7ff bb2e 	b.w	8010cba <_dtoa_r+0x32>
 801165e:	693a      	ldr	r2, [r7, #16]
 8011660:	3202      	adds	r2, #2
 8011662:	0092      	lsls	r2, r2, #2
 8011664:	f107 010c 	add.w	r1, r7, #12
 8011668:	300c      	adds	r0, #12
 801166a:	f7ff fa76 	bl	8010b5a <memcpy>
 801166e:	2201      	movs	r2, #1
 8011670:	4629      	mov	r1, r5
 8011672:	4620      	mov	r0, r4
 8011674:	f000 fb56 	bl	8011d24 <__lshift>
 8011678:	9b00      	ldr	r3, [sp, #0]
 801167a:	3301      	adds	r3, #1
 801167c:	9304      	str	r3, [sp, #16]
 801167e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011682:	4413      	add	r3, r2
 8011684:	9308      	str	r3, [sp, #32]
 8011686:	9b02      	ldr	r3, [sp, #8]
 8011688:	f003 0301 	and.w	r3, r3, #1
 801168c:	46b8      	mov	r8, r7
 801168e:	9306      	str	r3, [sp, #24]
 8011690:	4607      	mov	r7, r0
 8011692:	9b04      	ldr	r3, [sp, #16]
 8011694:	4631      	mov	r1, r6
 8011696:	3b01      	subs	r3, #1
 8011698:	4650      	mov	r0, sl
 801169a:	9301      	str	r3, [sp, #4]
 801169c:	f7ff fa6b 	bl	8010b76 <quorem>
 80116a0:	4641      	mov	r1, r8
 80116a2:	9002      	str	r0, [sp, #8]
 80116a4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80116a8:	4650      	mov	r0, sl
 80116aa:	f000 fba7 	bl	8011dfc <__mcmp>
 80116ae:	463a      	mov	r2, r7
 80116b0:	9005      	str	r0, [sp, #20]
 80116b2:	4631      	mov	r1, r6
 80116b4:	4620      	mov	r0, r4
 80116b6:	f000 fbbd 	bl	8011e34 <__mdiff>
 80116ba:	68c2      	ldr	r2, [r0, #12]
 80116bc:	4605      	mov	r5, r0
 80116be:	bb02      	cbnz	r2, 8011702 <_dtoa_r+0xa7a>
 80116c0:	4601      	mov	r1, r0
 80116c2:	4650      	mov	r0, sl
 80116c4:	f000 fb9a 	bl	8011dfc <__mcmp>
 80116c8:	4602      	mov	r2, r0
 80116ca:	4629      	mov	r1, r5
 80116cc:	4620      	mov	r0, r4
 80116ce:	9209      	str	r2, [sp, #36]	; 0x24
 80116d0:	f000 f958 	bl	8011984 <_Bfree>
 80116d4:	9b07      	ldr	r3, [sp, #28]
 80116d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80116d8:	9d04      	ldr	r5, [sp, #16]
 80116da:	ea43 0102 	orr.w	r1, r3, r2
 80116de:	9b06      	ldr	r3, [sp, #24]
 80116e0:	4319      	orrs	r1, r3
 80116e2:	d110      	bne.n	8011706 <_dtoa_r+0xa7e>
 80116e4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80116e8:	d029      	beq.n	801173e <_dtoa_r+0xab6>
 80116ea:	9b05      	ldr	r3, [sp, #20]
 80116ec:	2b00      	cmp	r3, #0
 80116ee:	dd02      	ble.n	80116f6 <_dtoa_r+0xa6e>
 80116f0:	9b02      	ldr	r3, [sp, #8]
 80116f2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80116f6:	9b01      	ldr	r3, [sp, #4]
 80116f8:	f883 9000 	strb.w	r9, [r3]
 80116fc:	e774      	b.n	80115e8 <_dtoa_r+0x960>
 80116fe:	4638      	mov	r0, r7
 8011700:	e7ba      	b.n	8011678 <_dtoa_r+0x9f0>
 8011702:	2201      	movs	r2, #1
 8011704:	e7e1      	b.n	80116ca <_dtoa_r+0xa42>
 8011706:	9b05      	ldr	r3, [sp, #20]
 8011708:	2b00      	cmp	r3, #0
 801170a:	db04      	blt.n	8011716 <_dtoa_r+0xa8e>
 801170c:	9907      	ldr	r1, [sp, #28]
 801170e:	430b      	orrs	r3, r1
 8011710:	9906      	ldr	r1, [sp, #24]
 8011712:	430b      	orrs	r3, r1
 8011714:	d120      	bne.n	8011758 <_dtoa_r+0xad0>
 8011716:	2a00      	cmp	r2, #0
 8011718:	dded      	ble.n	80116f6 <_dtoa_r+0xa6e>
 801171a:	4651      	mov	r1, sl
 801171c:	2201      	movs	r2, #1
 801171e:	4620      	mov	r0, r4
 8011720:	f000 fb00 	bl	8011d24 <__lshift>
 8011724:	4631      	mov	r1, r6
 8011726:	4682      	mov	sl, r0
 8011728:	f000 fb68 	bl	8011dfc <__mcmp>
 801172c:	2800      	cmp	r0, #0
 801172e:	dc03      	bgt.n	8011738 <_dtoa_r+0xab0>
 8011730:	d1e1      	bne.n	80116f6 <_dtoa_r+0xa6e>
 8011732:	f019 0f01 	tst.w	r9, #1
 8011736:	d0de      	beq.n	80116f6 <_dtoa_r+0xa6e>
 8011738:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 801173c:	d1d8      	bne.n	80116f0 <_dtoa_r+0xa68>
 801173e:	9a01      	ldr	r2, [sp, #4]
 8011740:	2339      	movs	r3, #57	; 0x39
 8011742:	7013      	strb	r3, [r2, #0]
 8011744:	462b      	mov	r3, r5
 8011746:	461d      	mov	r5, r3
 8011748:	3b01      	subs	r3, #1
 801174a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801174e:	2a39      	cmp	r2, #57	; 0x39
 8011750:	d06c      	beq.n	801182c <_dtoa_r+0xba4>
 8011752:	3201      	adds	r2, #1
 8011754:	701a      	strb	r2, [r3, #0]
 8011756:	e747      	b.n	80115e8 <_dtoa_r+0x960>
 8011758:	2a00      	cmp	r2, #0
 801175a:	dd07      	ble.n	801176c <_dtoa_r+0xae4>
 801175c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8011760:	d0ed      	beq.n	801173e <_dtoa_r+0xab6>
 8011762:	9a01      	ldr	r2, [sp, #4]
 8011764:	f109 0301 	add.w	r3, r9, #1
 8011768:	7013      	strb	r3, [r2, #0]
 801176a:	e73d      	b.n	80115e8 <_dtoa_r+0x960>
 801176c:	9b04      	ldr	r3, [sp, #16]
 801176e:	9a08      	ldr	r2, [sp, #32]
 8011770:	f803 9c01 	strb.w	r9, [r3, #-1]
 8011774:	4293      	cmp	r3, r2
 8011776:	d043      	beq.n	8011800 <_dtoa_r+0xb78>
 8011778:	4651      	mov	r1, sl
 801177a:	2300      	movs	r3, #0
 801177c:	220a      	movs	r2, #10
 801177e:	4620      	mov	r0, r4
 8011780:	f000 f922 	bl	80119c8 <__multadd>
 8011784:	45b8      	cmp	r8, r7
 8011786:	4682      	mov	sl, r0
 8011788:	f04f 0300 	mov.w	r3, #0
 801178c:	f04f 020a 	mov.w	r2, #10
 8011790:	4641      	mov	r1, r8
 8011792:	4620      	mov	r0, r4
 8011794:	d107      	bne.n	80117a6 <_dtoa_r+0xb1e>
 8011796:	f000 f917 	bl	80119c8 <__multadd>
 801179a:	4680      	mov	r8, r0
 801179c:	4607      	mov	r7, r0
 801179e:	9b04      	ldr	r3, [sp, #16]
 80117a0:	3301      	adds	r3, #1
 80117a2:	9304      	str	r3, [sp, #16]
 80117a4:	e775      	b.n	8011692 <_dtoa_r+0xa0a>
 80117a6:	f000 f90f 	bl	80119c8 <__multadd>
 80117aa:	4639      	mov	r1, r7
 80117ac:	4680      	mov	r8, r0
 80117ae:	2300      	movs	r3, #0
 80117b0:	220a      	movs	r2, #10
 80117b2:	4620      	mov	r0, r4
 80117b4:	f000 f908 	bl	80119c8 <__multadd>
 80117b8:	4607      	mov	r7, r0
 80117ba:	e7f0      	b.n	801179e <_dtoa_r+0xb16>
 80117bc:	9b04      	ldr	r3, [sp, #16]
 80117be:	9301      	str	r3, [sp, #4]
 80117c0:	9d00      	ldr	r5, [sp, #0]
 80117c2:	4631      	mov	r1, r6
 80117c4:	4650      	mov	r0, sl
 80117c6:	f7ff f9d6 	bl	8010b76 <quorem>
 80117ca:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80117ce:	9b00      	ldr	r3, [sp, #0]
 80117d0:	f805 9b01 	strb.w	r9, [r5], #1
 80117d4:	1aea      	subs	r2, r5, r3
 80117d6:	9b01      	ldr	r3, [sp, #4]
 80117d8:	4293      	cmp	r3, r2
 80117da:	dd07      	ble.n	80117ec <_dtoa_r+0xb64>
 80117dc:	4651      	mov	r1, sl
 80117de:	2300      	movs	r3, #0
 80117e0:	220a      	movs	r2, #10
 80117e2:	4620      	mov	r0, r4
 80117e4:	f000 f8f0 	bl	80119c8 <__multadd>
 80117e8:	4682      	mov	sl, r0
 80117ea:	e7ea      	b.n	80117c2 <_dtoa_r+0xb3a>
 80117ec:	9b01      	ldr	r3, [sp, #4]
 80117ee:	2b00      	cmp	r3, #0
 80117f0:	bfc8      	it	gt
 80117f2:	461d      	movgt	r5, r3
 80117f4:	9b00      	ldr	r3, [sp, #0]
 80117f6:	bfd8      	it	le
 80117f8:	2501      	movle	r5, #1
 80117fa:	441d      	add	r5, r3
 80117fc:	f04f 0800 	mov.w	r8, #0
 8011800:	4651      	mov	r1, sl
 8011802:	2201      	movs	r2, #1
 8011804:	4620      	mov	r0, r4
 8011806:	f000 fa8d 	bl	8011d24 <__lshift>
 801180a:	4631      	mov	r1, r6
 801180c:	4682      	mov	sl, r0
 801180e:	f000 faf5 	bl	8011dfc <__mcmp>
 8011812:	2800      	cmp	r0, #0
 8011814:	dc96      	bgt.n	8011744 <_dtoa_r+0xabc>
 8011816:	d102      	bne.n	801181e <_dtoa_r+0xb96>
 8011818:	f019 0f01 	tst.w	r9, #1
 801181c:	d192      	bne.n	8011744 <_dtoa_r+0xabc>
 801181e:	462b      	mov	r3, r5
 8011820:	461d      	mov	r5, r3
 8011822:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011826:	2a30      	cmp	r2, #48	; 0x30
 8011828:	d0fa      	beq.n	8011820 <_dtoa_r+0xb98>
 801182a:	e6dd      	b.n	80115e8 <_dtoa_r+0x960>
 801182c:	9a00      	ldr	r2, [sp, #0]
 801182e:	429a      	cmp	r2, r3
 8011830:	d189      	bne.n	8011746 <_dtoa_r+0xabe>
 8011832:	f10b 0b01 	add.w	fp, fp, #1
 8011836:	2331      	movs	r3, #49	; 0x31
 8011838:	e796      	b.n	8011768 <_dtoa_r+0xae0>
 801183a:	4b0a      	ldr	r3, [pc, #40]	; (8011864 <_dtoa_r+0xbdc>)
 801183c:	f7ff ba99 	b.w	8010d72 <_dtoa_r+0xea>
 8011840:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011842:	2b00      	cmp	r3, #0
 8011844:	f47f aa6d 	bne.w	8010d22 <_dtoa_r+0x9a>
 8011848:	4b07      	ldr	r3, [pc, #28]	; (8011868 <_dtoa_r+0xbe0>)
 801184a:	f7ff ba92 	b.w	8010d72 <_dtoa_r+0xea>
 801184e:	9b01      	ldr	r3, [sp, #4]
 8011850:	2b00      	cmp	r3, #0
 8011852:	dcb5      	bgt.n	80117c0 <_dtoa_r+0xb38>
 8011854:	9b07      	ldr	r3, [sp, #28]
 8011856:	2b02      	cmp	r3, #2
 8011858:	f73f aeb1 	bgt.w	80115be <_dtoa_r+0x936>
 801185c:	e7b0      	b.n	80117c0 <_dtoa_r+0xb38>
 801185e:	bf00      	nop
 8011860:	080146ec 	.word	0x080146ec
 8011864:	0801464c 	.word	0x0801464c
 8011868:	08014670 	.word	0x08014670

0801186c <_free_r>:
 801186c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801186e:	2900      	cmp	r1, #0
 8011870:	d044      	beq.n	80118fc <_free_r+0x90>
 8011872:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011876:	9001      	str	r0, [sp, #4]
 8011878:	2b00      	cmp	r3, #0
 801187a:	f1a1 0404 	sub.w	r4, r1, #4
 801187e:	bfb8      	it	lt
 8011880:	18e4      	addlt	r4, r4, r3
 8011882:	f7fe fb43 	bl	800ff0c <__malloc_lock>
 8011886:	4a1e      	ldr	r2, [pc, #120]	; (8011900 <_free_r+0x94>)
 8011888:	9801      	ldr	r0, [sp, #4]
 801188a:	6813      	ldr	r3, [r2, #0]
 801188c:	b933      	cbnz	r3, 801189c <_free_r+0x30>
 801188e:	6063      	str	r3, [r4, #4]
 8011890:	6014      	str	r4, [r2, #0]
 8011892:	b003      	add	sp, #12
 8011894:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011898:	f7fe bb3e 	b.w	800ff18 <__malloc_unlock>
 801189c:	42a3      	cmp	r3, r4
 801189e:	d908      	bls.n	80118b2 <_free_r+0x46>
 80118a0:	6825      	ldr	r5, [r4, #0]
 80118a2:	1961      	adds	r1, r4, r5
 80118a4:	428b      	cmp	r3, r1
 80118a6:	bf01      	itttt	eq
 80118a8:	6819      	ldreq	r1, [r3, #0]
 80118aa:	685b      	ldreq	r3, [r3, #4]
 80118ac:	1949      	addeq	r1, r1, r5
 80118ae:	6021      	streq	r1, [r4, #0]
 80118b0:	e7ed      	b.n	801188e <_free_r+0x22>
 80118b2:	461a      	mov	r2, r3
 80118b4:	685b      	ldr	r3, [r3, #4]
 80118b6:	b10b      	cbz	r3, 80118bc <_free_r+0x50>
 80118b8:	42a3      	cmp	r3, r4
 80118ba:	d9fa      	bls.n	80118b2 <_free_r+0x46>
 80118bc:	6811      	ldr	r1, [r2, #0]
 80118be:	1855      	adds	r5, r2, r1
 80118c0:	42a5      	cmp	r5, r4
 80118c2:	d10b      	bne.n	80118dc <_free_r+0x70>
 80118c4:	6824      	ldr	r4, [r4, #0]
 80118c6:	4421      	add	r1, r4
 80118c8:	1854      	adds	r4, r2, r1
 80118ca:	42a3      	cmp	r3, r4
 80118cc:	6011      	str	r1, [r2, #0]
 80118ce:	d1e0      	bne.n	8011892 <_free_r+0x26>
 80118d0:	681c      	ldr	r4, [r3, #0]
 80118d2:	685b      	ldr	r3, [r3, #4]
 80118d4:	6053      	str	r3, [r2, #4]
 80118d6:	440c      	add	r4, r1
 80118d8:	6014      	str	r4, [r2, #0]
 80118da:	e7da      	b.n	8011892 <_free_r+0x26>
 80118dc:	d902      	bls.n	80118e4 <_free_r+0x78>
 80118de:	230c      	movs	r3, #12
 80118e0:	6003      	str	r3, [r0, #0]
 80118e2:	e7d6      	b.n	8011892 <_free_r+0x26>
 80118e4:	6825      	ldr	r5, [r4, #0]
 80118e6:	1961      	adds	r1, r4, r5
 80118e8:	428b      	cmp	r3, r1
 80118ea:	bf04      	itt	eq
 80118ec:	6819      	ldreq	r1, [r3, #0]
 80118ee:	685b      	ldreq	r3, [r3, #4]
 80118f0:	6063      	str	r3, [r4, #4]
 80118f2:	bf04      	itt	eq
 80118f4:	1949      	addeq	r1, r1, r5
 80118f6:	6021      	streq	r1, [r4, #0]
 80118f8:	6054      	str	r4, [r2, #4]
 80118fa:	e7ca      	b.n	8011892 <_free_r+0x26>
 80118fc:	b003      	add	sp, #12
 80118fe:	bd30      	pop	{r4, r5, pc}
 8011900:	200063b8 	.word	0x200063b8

08011904 <_Balloc>:
 8011904:	b570      	push	{r4, r5, r6, lr}
 8011906:	69c6      	ldr	r6, [r0, #28]
 8011908:	4604      	mov	r4, r0
 801190a:	460d      	mov	r5, r1
 801190c:	b976      	cbnz	r6, 801192c <_Balloc+0x28>
 801190e:	2010      	movs	r0, #16
 8011910:	f7fe fa54 	bl	800fdbc <malloc>
 8011914:	4602      	mov	r2, r0
 8011916:	61e0      	str	r0, [r4, #28]
 8011918:	b920      	cbnz	r0, 8011924 <_Balloc+0x20>
 801191a:	4b18      	ldr	r3, [pc, #96]	; (801197c <_Balloc+0x78>)
 801191c:	4818      	ldr	r0, [pc, #96]	; (8011980 <_Balloc+0x7c>)
 801191e:	216b      	movs	r1, #107	; 0x6b
 8011920:	f000 fd8c 	bl	801243c <__assert_func>
 8011924:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011928:	6006      	str	r6, [r0, #0]
 801192a:	60c6      	str	r6, [r0, #12]
 801192c:	69e6      	ldr	r6, [r4, #28]
 801192e:	68f3      	ldr	r3, [r6, #12]
 8011930:	b183      	cbz	r3, 8011954 <_Balloc+0x50>
 8011932:	69e3      	ldr	r3, [r4, #28]
 8011934:	68db      	ldr	r3, [r3, #12]
 8011936:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801193a:	b9b8      	cbnz	r0, 801196c <_Balloc+0x68>
 801193c:	2101      	movs	r1, #1
 801193e:	fa01 f605 	lsl.w	r6, r1, r5
 8011942:	1d72      	adds	r2, r6, #5
 8011944:	0092      	lsls	r2, r2, #2
 8011946:	4620      	mov	r0, r4
 8011948:	f000 fd96 	bl	8012478 <_calloc_r>
 801194c:	b160      	cbz	r0, 8011968 <_Balloc+0x64>
 801194e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8011952:	e00e      	b.n	8011972 <_Balloc+0x6e>
 8011954:	2221      	movs	r2, #33	; 0x21
 8011956:	2104      	movs	r1, #4
 8011958:	4620      	mov	r0, r4
 801195a:	f000 fd8d 	bl	8012478 <_calloc_r>
 801195e:	69e3      	ldr	r3, [r4, #28]
 8011960:	60f0      	str	r0, [r6, #12]
 8011962:	68db      	ldr	r3, [r3, #12]
 8011964:	2b00      	cmp	r3, #0
 8011966:	d1e4      	bne.n	8011932 <_Balloc+0x2e>
 8011968:	2000      	movs	r0, #0
 801196a:	bd70      	pop	{r4, r5, r6, pc}
 801196c:	6802      	ldr	r2, [r0, #0]
 801196e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011972:	2300      	movs	r3, #0
 8011974:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011978:	e7f7      	b.n	801196a <_Balloc+0x66>
 801197a:	bf00      	nop
 801197c:	0801467d 	.word	0x0801467d
 8011980:	080146fd 	.word	0x080146fd

08011984 <_Bfree>:
 8011984:	b570      	push	{r4, r5, r6, lr}
 8011986:	69c6      	ldr	r6, [r0, #28]
 8011988:	4605      	mov	r5, r0
 801198a:	460c      	mov	r4, r1
 801198c:	b976      	cbnz	r6, 80119ac <_Bfree+0x28>
 801198e:	2010      	movs	r0, #16
 8011990:	f7fe fa14 	bl	800fdbc <malloc>
 8011994:	4602      	mov	r2, r0
 8011996:	61e8      	str	r0, [r5, #28]
 8011998:	b920      	cbnz	r0, 80119a4 <_Bfree+0x20>
 801199a:	4b09      	ldr	r3, [pc, #36]	; (80119c0 <_Bfree+0x3c>)
 801199c:	4809      	ldr	r0, [pc, #36]	; (80119c4 <_Bfree+0x40>)
 801199e:	218f      	movs	r1, #143	; 0x8f
 80119a0:	f000 fd4c 	bl	801243c <__assert_func>
 80119a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80119a8:	6006      	str	r6, [r0, #0]
 80119aa:	60c6      	str	r6, [r0, #12]
 80119ac:	b13c      	cbz	r4, 80119be <_Bfree+0x3a>
 80119ae:	69eb      	ldr	r3, [r5, #28]
 80119b0:	6862      	ldr	r2, [r4, #4]
 80119b2:	68db      	ldr	r3, [r3, #12]
 80119b4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80119b8:	6021      	str	r1, [r4, #0]
 80119ba:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80119be:	bd70      	pop	{r4, r5, r6, pc}
 80119c0:	0801467d 	.word	0x0801467d
 80119c4:	080146fd 	.word	0x080146fd

080119c8 <__multadd>:
 80119c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80119cc:	690d      	ldr	r5, [r1, #16]
 80119ce:	4607      	mov	r7, r0
 80119d0:	460c      	mov	r4, r1
 80119d2:	461e      	mov	r6, r3
 80119d4:	f101 0c14 	add.w	ip, r1, #20
 80119d8:	2000      	movs	r0, #0
 80119da:	f8dc 3000 	ldr.w	r3, [ip]
 80119de:	b299      	uxth	r1, r3
 80119e0:	fb02 6101 	mla	r1, r2, r1, r6
 80119e4:	0c1e      	lsrs	r6, r3, #16
 80119e6:	0c0b      	lsrs	r3, r1, #16
 80119e8:	fb02 3306 	mla	r3, r2, r6, r3
 80119ec:	b289      	uxth	r1, r1
 80119ee:	3001      	adds	r0, #1
 80119f0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80119f4:	4285      	cmp	r5, r0
 80119f6:	f84c 1b04 	str.w	r1, [ip], #4
 80119fa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80119fe:	dcec      	bgt.n	80119da <__multadd+0x12>
 8011a00:	b30e      	cbz	r6, 8011a46 <__multadd+0x7e>
 8011a02:	68a3      	ldr	r3, [r4, #8]
 8011a04:	42ab      	cmp	r3, r5
 8011a06:	dc19      	bgt.n	8011a3c <__multadd+0x74>
 8011a08:	6861      	ldr	r1, [r4, #4]
 8011a0a:	4638      	mov	r0, r7
 8011a0c:	3101      	adds	r1, #1
 8011a0e:	f7ff ff79 	bl	8011904 <_Balloc>
 8011a12:	4680      	mov	r8, r0
 8011a14:	b928      	cbnz	r0, 8011a22 <__multadd+0x5a>
 8011a16:	4602      	mov	r2, r0
 8011a18:	4b0c      	ldr	r3, [pc, #48]	; (8011a4c <__multadd+0x84>)
 8011a1a:	480d      	ldr	r0, [pc, #52]	; (8011a50 <__multadd+0x88>)
 8011a1c:	21ba      	movs	r1, #186	; 0xba
 8011a1e:	f000 fd0d 	bl	801243c <__assert_func>
 8011a22:	6922      	ldr	r2, [r4, #16]
 8011a24:	3202      	adds	r2, #2
 8011a26:	f104 010c 	add.w	r1, r4, #12
 8011a2a:	0092      	lsls	r2, r2, #2
 8011a2c:	300c      	adds	r0, #12
 8011a2e:	f7ff f894 	bl	8010b5a <memcpy>
 8011a32:	4621      	mov	r1, r4
 8011a34:	4638      	mov	r0, r7
 8011a36:	f7ff ffa5 	bl	8011984 <_Bfree>
 8011a3a:	4644      	mov	r4, r8
 8011a3c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8011a40:	3501      	adds	r5, #1
 8011a42:	615e      	str	r6, [r3, #20]
 8011a44:	6125      	str	r5, [r4, #16]
 8011a46:	4620      	mov	r0, r4
 8011a48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011a4c:	080146ec 	.word	0x080146ec
 8011a50:	080146fd 	.word	0x080146fd

08011a54 <__hi0bits>:
 8011a54:	0c03      	lsrs	r3, r0, #16
 8011a56:	041b      	lsls	r3, r3, #16
 8011a58:	b9d3      	cbnz	r3, 8011a90 <__hi0bits+0x3c>
 8011a5a:	0400      	lsls	r0, r0, #16
 8011a5c:	2310      	movs	r3, #16
 8011a5e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8011a62:	bf04      	itt	eq
 8011a64:	0200      	lsleq	r0, r0, #8
 8011a66:	3308      	addeq	r3, #8
 8011a68:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8011a6c:	bf04      	itt	eq
 8011a6e:	0100      	lsleq	r0, r0, #4
 8011a70:	3304      	addeq	r3, #4
 8011a72:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8011a76:	bf04      	itt	eq
 8011a78:	0080      	lsleq	r0, r0, #2
 8011a7a:	3302      	addeq	r3, #2
 8011a7c:	2800      	cmp	r0, #0
 8011a7e:	db05      	blt.n	8011a8c <__hi0bits+0x38>
 8011a80:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8011a84:	f103 0301 	add.w	r3, r3, #1
 8011a88:	bf08      	it	eq
 8011a8a:	2320      	moveq	r3, #32
 8011a8c:	4618      	mov	r0, r3
 8011a8e:	4770      	bx	lr
 8011a90:	2300      	movs	r3, #0
 8011a92:	e7e4      	b.n	8011a5e <__hi0bits+0xa>

08011a94 <__lo0bits>:
 8011a94:	6803      	ldr	r3, [r0, #0]
 8011a96:	f013 0207 	ands.w	r2, r3, #7
 8011a9a:	d00c      	beq.n	8011ab6 <__lo0bits+0x22>
 8011a9c:	07d9      	lsls	r1, r3, #31
 8011a9e:	d422      	bmi.n	8011ae6 <__lo0bits+0x52>
 8011aa0:	079a      	lsls	r2, r3, #30
 8011aa2:	bf49      	itett	mi
 8011aa4:	085b      	lsrmi	r3, r3, #1
 8011aa6:	089b      	lsrpl	r3, r3, #2
 8011aa8:	6003      	strmi	r3, [r0, #0]
 8011aaa:	2201      	movmi	r2, #1
 8011aac:	bf5c      	itt	pl
 8011aae:	6003      	strpl	r3, [r0, #0]
 8011ab0:	2202      	movpl	r2, #2
 8011ab2:	4610      	mov	r0, r2
 8011ab4:	4770      	bx	lr
 8011ab6:	b299      	uxth	r1, r3
 8011ab8:	b909      	cbnz	r1, 8011abe <__lo0bits+0x2a>
 8011aba:	0c1b      	lsrs	r3, r3, #16
 8011abc:	2210      	movs	r2, #16
 8011abe:	b2d9      	uxtb	r1, r3
 8011ac0:	b909      	cbnz	r1, 8011ac6 <__lo0bits+0x32>
 8011ac2:	3208      	adds	r2, #8
 8011ac4:	0a1b      	lsrs	r3, r3, #8
 8011ac6:	0719      	lsls	r1, r3, #28
 8011ac8:	bf04      	itt	eq
 8011aca:	091b      	lsreq	r3, r3, #4
 8011acc:	3204      	addeq	r2, #4
 8011ace:	0799      	lsls	r1, r3, #30
 8011ad0:	bf04      	itt	eq
 8011ad2:	089b      	lsreq	r3, r3, #2
 8011ad4:	3202      	addeq	r2, #2
 8011ad6:	07d9      	lsls	r1, r3, #31
 8011ad8:	d403      	bmi.n	8011ae2 <__lo0bits+0x4e>
 8011ada:	085b      	lsrs	r3, r3, #1
 8011adc:	f102 0201 	add.w	r2, r2, #1
 8011ae0:	d003      	beq.n	8011aea <__lo0bits+0x56>
 8011ae2:	6003      	str	r3, [r0, #0]
 8011ae4:	e7e5      	b.n	8011ab2 <__lo0bits+0x1e>
 8011ae6:	2200      	movs	r2, #0
 8011ae8:	e7e3      	b.n	8011ab2 <__lo0bits+0x1e>
 8011aea:	2220      	movs	r2, #32
 8011aec:	e7e1      	b.n	8011ab2 <__lo0bits+0x1e>
	...

08011af0 <__i2b>:
 8011af0:	b510      	push	{r4, lr}
 8011af2:	460c      	mov	r4, r1
 8011af4:	2101      	movs	r1, #1
 8011af6:	f7ff ff05 	bl	8011904 <_Balloc>
 8011afa:	4602      	mov	r2, r0
 8011afc:	b928      	cbnz	r0, 8011b0a <__i2b+0x1a>
 8011afe:	4b05      	ldr	r3, [pc, #20]	; (8011b14 <__i2b+0x24>)
 8011b00:	4805      	ldr	r0, [pc, #20]	; (8011b18 <__i2b+0x28>)
 8011b02:	f240 1145 	movw	r1, #325	; 0x145
 8011b06:	f000 fc99 	bl	801243c <__assert_func>
 8011b0a:	2301      	movs	r3, #1
 8011b0c:	6144      	str	r4, [r0, #20]
 8011b0e:	6103      	str	r3, [r0, #16]
 8011b10:	bd10      	pop	{r4, pc}
 8011b12:	bf00      	nop
 8011b14:	080146ec 	.word	0x080146ec
 8011b18:	080146fd 	.word	0x080146fd

08011b1c <__multiply>:
 8011b1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b20:	4691      	mov	r9, r2
 8011b22:	690a      	ldr	r2, [r1, #16]
 8011b24:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011b28:	429a      	cmp	r2, r3
 8011b2a:	bfb8      	it	lt
 8011b2c:	460b      	movlt	r3, r1
 8011b2e:	460c      	mov	r4, r1
 8011b30:	bfbc      	itt	lt
 8011b32:	464c      	movlt	r4, r9
 8011b34:	4699      	movlt	r9, r3
 8011b36:	6927      	ldr	r7, [r4, #16]
 8011b38:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8011b3c:	68a3      	ldr	r3, [r4, #8]
 8011b3e:	6861      	ldr	r1, [r4, #4]
 8011b40:	eb07 060a 	add.w	r6, r7, sl
 8011b44:	42b3      	cmp	r3, r6
 8011b46:	b085      	sub	sp, #20
 8011b48:	bfb8      	it	lt
 8011b4a:	3101      	addlt	r1, #1
 8011b4c:	f7ff feda 	bl	8011904 <_Balloc>
 8011b50:	b930      	cbnz	r0, 8011b60 <__multiply+0x44>
 8011b52:	4602      	mov	r2, r0
 8011b54:	4b44      	ldr	r3, [pc, #272]	; (8011c68 <__multiply+0x14c>)
 8011b56:	4845      	ldr	r0, [pc, #276]	; (8011c6c <__multiply+0x150>)
 8011b58:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8011b5c:	f000 fc6e 	bl	801243c <__assert_func>
 8011b60:	f100 0514 	add.w	r5, r0, #20
 8011b64:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8011b68:	462b      	mov	r3, r5
 8011b6a:	2200      	movs	r2, #0
 8011b6c:	4543      	cmp	r3, r8
 8011b6e:	d321      	bcc.n	8011bb4 <__multiply+0x98>
 8011b70:	f104 0314 	add.w	r3, r4, #20
 8011b74:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8011b78:	f109 0314 	add.w	r3, r9, #20
 8011b7c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8011b80:	9202      	str	r2, [sp, #8]
 8011b82:	1b3a      	subs	r2, r7, r4
 8011b84:	3a15      	subs	r2, #21
 8011b86:	f022 0203 	bic.w	r2, r2, #3
 8011b8a:	3204      	adds	r2, #4
 8011b8c:	f104 0115 	add.w	r1, r4, #21
 8011b90:	428f      	cmp	r7, r1
 8011b92:	bf38      	it	cc
 8011b94:	2204      	movcc	r2, #4
 8011b96:	9201      	str	r2, [sp, #4]
 8011b98:	9a02      	ldr	r2, [sp, #8]
 8011b9a:	9303      	str	r3, [sp, #12]
 8011b9c:	429a      	cmp	r2, r3
 8011b9e:	d80c      	bhi.n	8011bba <__multiply+0x9e>
 8011ba0:	2e00      	cmp	r6, #0
 8011ba2:	dd03      	ble.n	8011bac <__multiply+0x90>
 8011ba4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8011ba8:	2b00      	cmp	r3, #0
 8011baa:	d05b      	beq.n	8011c64 <__multiply+0x148>
 8011bac:	6106      	str	r6, [r0, #16]
 8011bae:	b005      	add	sp, #20
 8011bb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011bb4:	f843 2b04 	str.w	r2, [r3], #4
 8011bb8:	e7d8      	b.n	8011b6c <__multiply+0x50>
 8011bba:	f8b3 a000 	ldrh.w	sl, [r3]
 8011bbe:	f1ba 0f00 	cmp.w	sl, #0
 8011bc2:	d024      	beq.n	8011c0e <__multiply+0xf2>
 8011bc4:	f104 0e14 	add.w	lr, r4, #20
 8011bc8:	46a9      	mov	r9, r5
 8011bca:	f04f 0c00 	mov.w	ip, #0
 8011bce:	f85e 2b04 	ldr.w	r2, [lr], #4
 8011bd2:	f8d9 1000 	ldr.w	r1, [r9]
 8011bd6:	fa1f fb82 	uxth.w	fp, r2
 8011bda:	b289      	uxth	r1, r1
 8011bdc:	fb0a 110b 	mla	r1, sl, fp, r1
 8011be0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8011be4:	f8d9 2000 	ldr.w	r2, [r9]
 8011be8:	4461      	add	r1, ip
 8011bea:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8011bee:	fb0a c20b 	mla	r2, sl, fp, ip
 8011bf2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8011bf6:	b289      	uxth	r1, r1
 8011bf8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8011bfc:	4577      	cmp	r7, lr
 8011bfe:	f849 1b04 	str.w	r1, [r9], #4
 8011c02:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8011c06:	d8e2      	bhi.n	8011bce <__multiply+0xb2>
 8011c08:	9a01      	ldr	r2, [sp, #4]
 8011c0a:	f845 c002 	str.w	ip, [r5, r2]
 8011c0e:	9a03      	ldr	r2, [sp, #12]
 8011c10:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8011c14:	3304      	adds	r3, #4
 8011c16:	f1b9 0f00 	cmp.w	r9, #0
 8011c1a:	d021      	beq.n	8011c60 <__multiply+0x144>
 8011c1c:	6829      	ldr	r1, [r5, #0]
 8011c1e:	f104 0c14 	add.w	ip, r4, #20
 8011c22:	46ae      	mov	lr, r5
 8011c24:	f04f 0a00 	mov.w	sl, #0
 8011c28:	f8bc b000 	ldrh.w	fp, [ip]
 8011c2c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8011c30:	fb09 220b 	mla	r2, r9, fp, r2
 8011c34:	4452      	add	r2, sl
 8011c36:	b289      	uxth	r1, r1
 8011c38:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8011c3c:	f84e 1b04 	str.w	r1, [lr], #4
 8011c40:	f85c 1b04 	ldr.w	r1, [ip], #4
 8011c44:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8011c48:	f8be 1000 	ldrh.w	r1, [lr]
 8011c4c:	fb09 110a 	mla	r1, r9, sl, r1
 8011c50:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8011c54:	4567      	cmp	r7, ip
 8011c56:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8011c5a:	d8e5      	bhi.n	8011c28 <__multiply+0x10c>
 8011c5c:	9a01      	ldr	r2, [sp, #4]
 8011c5e:	50a9      	str	r1, [r5, r2]
 8011c60:	3504      	adds	r5, #4
 8011c62:	e799      	b.n	8011b98 <__multiply+0x7c>
 8011c64:	3e01      	subs	r6, #1
 8011c66:	e79b      	b.n	8011ba0 <__multiply+0x84>
 8011c68:	080146ec 	.word	0x080146ec
 8011c6c:	080146fd 	.word	0x080146fd

08011c70 <__pow5mult>:
 8011c70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011c74:	4615      	mov	r5, r2
 8011c76:	f012 0203 	ands.w	r2, r2, #3
 8011c7a:	4606      	mov	r6, r0
 8011c7c:	460f      	mov	r7, r1
 8011c7e:	d007      	beq.n	8011c90 <__pow5mult+0x20>
 8011c80:	4c25      	ldr	r4, [pc, #148]	; (8011d18 <__pow5mult+0xa8>)
 8011c82:	3a01      	subs	r2, #1
 8011c84:	2300      	movs	r3, #0
 8011c86:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011c8a:	f7ff fe9d 	bl	80119c8 <__multadd>
 8011c8e:	4607      	mov	r7, r0
 8011c90:	10ad      	asrs	r5, r5, #2
 8011c92:	d03d      	beq.n	8011d10 <__pow5mult+0xa0>
 8011c94:	69f4      	ldr	r4, [r6, #28]
 8011c96:	b97c      	cbnz	r4, 8011cb8 <__pow5mult+0x48>
 8011c98:	2010      	movs	r0, #16
 8011c9a:	f7fe f88f 	bl	800fdbc <malloc>
 8011c9e:	4602      	mov	r2, r0
 8011ca0:	61f0      	str	r0, [r6, #28]
 8011ca2:	b928      	cbnz	r0, 8011cb0 <__pow5mult+0x40>
 8011ca4:	4b1d      	ldr	r3, [pc, #116]	; (8011d1c <__pow5mult+0xac>)
 8011ca6:	481e      	ldr	r0, [pc, #120]	; (8011d20 <__pow5mult+0xb0>)
 8011ca8:	f240 11b3 	movw	r1, #435	; 0x1b3
 8011cac:	f000 fbc6 	bl	801243c <__assert_func>
 8011cb0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011cb4:	6004      	str	r4, [r0, #0]
 8011cb6:	60c4      	str	r4, [r0, #12]
 8011cb8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8011cbc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011cc0:	b94c      	cbnz	r4, 8011cd6 <__pow5mult+0x66>
 8011cc2:	f240 2171 	movw	r1, #625	; 0x271
 8011cc6:	4630      	mov	r0, r6
 8011cc8:	f7ff ff12 	bl	8011af0 <__i2b>
 8011ccc:	2300      	movs	r3, #0
 8011cce:	f8c8 0008 	str.w	r0, [r8, #8]
 8011cd2:	4604      	mov	r4, r0
 8011cd4:	6003      	str	r3, [r0, #0]
 8011cd6:	f04f 0900 	mov.w	r9, #0
 8011cda:	07eb      	lsls	r3, r5, #31
 8011cdc:	d50a      	bpl.n	8011cf4 <__pow5mult+0x84>
 8011cde:	4639      	mov	r1, r7
 8011ce0:	4622      	mov	r2, r4
 8011ce2:	4630      	mov	r0, r6
 8011ce4:	f7ff ff1a 	bl	8011b1c <__multiply>
 8011ce8:	4639      	mov	r1, r7
 8011cea:	4680      	mov	r8, r0
 8011cec:	4630      	mov	r0, r6
 8011cee:	f7ff fe49 	bl	8011984 <_Bfree>
 8011cf2:	4647      	mov	r7, r8
 8011cf4:	106d      	asrs	r5, r5, #1
 8011cf6:	d00b      	beq.n	8011d10 <__pow5mult+0xa0>
 8011cf8:	6820      	ldr	r0, [r4, #0]
 8011cfa:	b938      	cbnz	r0, 8011d0c <__pow5mult+0x9c>
 8011cfc:	4622      	mov	r2, r4
 8011cfe:	4621      	mov	r1, r4
 8011d00:	4630      	mov	r0, r6
 8011d02:	f7ff ff0b 	bl	8011b1c <__multiply>
 8011d06:	6020      	str	r0, [r4, #0]
 8011d08:	f8c0 9000 	str.w	r9, [r0]
 8011d0c:	4604      	mov	r4, r0
 8011d0e:	e7e4      	b.n	8011cda <__pow5mult+0x6a>
 8011d10:	4638      	mov	r0, r7
 8011d12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011d16:	bf00      	nop
 8011d18:	08014848 	.word	0x08014848
 8011d1c:	0801467d 	.word	0x0801467d
 8011d20:	080146fd 	.word	0x080146fd

08011d24 <__lshift>:
 8011d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011d28:	460c      	mov	r4, r1
 8011d2a:	6849      	ldr	r1, [r1, #4]
 8011d2c:	6923      	ldr	r3, [r4, #16]
 8011d2e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8011d32:	68a3      	ldr	r3, [r4, #8]
 8011d34:	4607      	mov	r7, r0
 8011d36:	4691      	mov	r9, r2
 8011d38:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011d3c:	f108 0601 	add.w	r6, r8, #1
 8011d40:	42b3      	cmp	r3, r6
 8011d42:	db0b      	blt.n	8011d5c <__lshift+0x38>
 8011d44:	4638      	mov	r0, r7
 8011d46:	f7ff fddd 	bl	8011904 <_Balloc>
 8011d4a:	4605      	mov	r5, r0
 8011d4c:	b948      	cbnz	r0, 8011d62 <__lshift+0x3e>
 8011d4e:	4602      	mov	r2, r0
 8011d50:	4b28      	ldr	r3, [pc, #160]	; (8011df4 <__lshift+0xd0>)
 8011d52:	4829      	ldr	r0, [pc, #164]	; (8011df8 <__lshift+0xd4>)
 8011d54:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8011d58:	f000 fb70 	bl	801243c <__assert_func>
 8011d5c:	3101      	adds	r1, #1
 8011d5e:	005b      	lsls	r3, r3, #1
 8011d60:	e7ee      	b.n	8011d40 <__lshift+0x1c>
 8011d62:	2300      	movs	r3, #0
 8011d64:	f100 0114 	add.w	r1, r0, #20
 8011d68:	f100 0210 	add.w	r2, r0, #16
 8011d6c:	4618      	mov	r0, r3
 8011d6e:	4553      	cmp	r3, sl
 8011d70:	db33      	blt.n	8011dda <__lshift+0xb6>
 8011d72:	6920      	ldr	r0, [r4, #16]
 8011d74:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011d78:	f104 0314 	add.w	r3, r4, #20
 8011d7c:	f019 091f 	ands.w	r9, r9, #31
 8011d80:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011d84:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8011d88:	d02b      	beq.n	8011de2 <__lshift+0xbe>
 8011d8a:	f1c9 0e20 	rsb	lr, r9, #32
 8011d8e:	468a      	mov	sl, r1
 8011d90:	2200      	movs	r2, #0
 8011d92:	6818      	ldr	r0, [r3, #0]
 8011d94:	fa00 f009 	lsl.w	r0, r0, r9
 8011d98:	4310      	orrs	r0, r2
 8011d9a:	f84a 0b04 	str.w	r0, [sl], #4
 8011d9e:	f853 2b04 	ldr.w	r2, [r3], #4
 8011da2:	459c      	cmp	ip, r3
 8011da4:	fa22 f20e 	lsr.w	r2, r2, lr
 8011da8:	d8f3      	bhi.n	8011d92 <__lshift+0x6e>
 8011daa:	ebac 0304 	sub.w	r3, ip, r4
 8011dae:	3b15      	subs	r3, #21
 8011db0:	f023 0303 	bic.w	r3, r3, #3
 8011db4:	3304      	adds	r3, #4
 8011db6:	f104 0015 	add.w	r0, r4, #21
 8011dba:	4584      	cmp	ip, r0
 8011dbc:	bf38      	it	cc
 8011dbe:	2304      	movcc	r3, #4
 8011dc0:	50ca      	str	r2, [r1, r3]
 8011dc2:	b10a      	cbz	r2, 8011dc8 <__lshift+0xa4>
 8011dc4:	f108 0602 	add.w	r6, r8, #2
 8011dc8:	3e01      	subs	r6, #1
 8011dca:	4638      	mov	r0, r7
 8011dcc:	612e      	str	r6, [r5, #16]
 8011dce:	4621      	mov	r1, r4
 8011dd0:	f7ff fdd8 	bl	8011984 <_Bfree>
 8011dd4:	4628      	mov	r0, r5
 8011dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011dda:	f842 0f04 	str.w	r0, [r2, #4]!
 8011dde:	3301      	adds	r3, #1
 8011de0:	e7c5      	b.n	8011d6e <__lshift+0x4a>
 8011de2:	3904      	subs	r1, #4
 8011de4:	f853 2b04 	ldr.w	r2, [r3], #4
 8011de8:	f841 2f04 	str.w	r2, [r1, #4]!
 8011dec:	459c      	cmp	ip, r3
 8011dee:	d8f9      	bhi.n	8011de4 <__lshift+0xc0>
 8011df0:	e7ea      	b.n	8011dc8 <__lshift+0xa4>
 8011df2:	bf00      	nop
 8011df4:	080146ec 	.word	0x080146ec
 8011df8:	080146fd 	.word	0x080146fd

08011dfc <__mcmp>:
 8011dfc:	b530      	push	{r4, r5, lr}
 8011dfe:	6902      	ldr	r2, [r0, #16]
 8011e00:	690c      	ldr	r4, [r1, #16]
 8011e02:	1b12      	subs	r2, r2, r4
 8011e04:	d10e      	bne.n	8011e24 <__mcmp+0x28>
 8011e06:	f100 0314 	add.w	r3, r0, #20
 8011e0a:	3114      	adds	r1, #20
 8011e0c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8011e10:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8011e14:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8011e18:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8011e1c:	42a5      	cmp	r5, r4
 8011e1e:	d003      	beq.n	8011e28 <__mcmp+0x2c>
 8011e20:	d305      	bcc.n	8011e2e <__mcmp+0x32>
 8011e22:	2201      	movs	r2, #1
 8011e24:	4610      	mov	r0, r2
 8011e26:	bd30      	pop	{r4, r5, pc}
 8011e28:	4283      	cmp	r3, r0
 8011e2a:	d3f3      	bcc.n	8011e14 <__mcmp+0x18>
 8011e2c:	e7fa      	b.n	8011e24 <__mcmp+0x28>
 8011e2e:	f04f 32ff 	mov.w	r2, #4294967295
 8011e32:	e7f7      	b.n	8011e24 <__mcmp+0x28>

08011e34 <__mdiff>:
 8011e34:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e38:	460c      	mov	r4, r1
 8011e3a:	4606      	mov	r6, r0
 8011e3c:	4611      	mov	r1, r2
 8011e3e:	4620      	mov	r0, r4
 8011e40:	4690      	mov	r8, r2
 8011e42:	f7ff ffdb 	bl	8011dfc <__mcmp>
 8011e46:	1e05      	subs	r5, r0, #0
 8011e48:	d110      	bne.n	8011e6c <__mdiff+0x38>
 8011e4a:	4629      	mov	r1, r5
 8011e4c:	4630      	mov	r0, r6
 8011e4e:	f7ff fd59 	bl	8011904 <_Balloc>
 8011e52:	b930      	cbnz	r0, 8011e62 <__mdiff+0x2e>
 8011e54:	4b3a      	ldr	r3, [pc, #232]	; (8011f40 <__mdiff+0x10c>)
 8011e56:	4602      	mov	r2, r0
 8011e58:	f240 2137 	movw	r1, #567	; 0x237
 8011e5c:	4839      	ldr	r0, [pc, #228]	; (8011f44 <__mdiff+0x110>)
 8011e5e:	f000 faed 	bl	801243c <__assert_func>
 8011e62:	2301      	movs	r3, #1
 8011e64:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011e68:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011e6c:	bfa4      	itt	ge
 8011e6e:	4643      	movge	r3, r8
 8011e70:	46a0      	movge	r8, r4
 8011e72:	4630      	mov	r0, r6
 8011e74:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8011e78:	bfa6      	itte	ge
 8011e7a:	461c      	movge	r4, r3
 8011e7c:	2500      	movge	r5, #0
 8011e7e:	2501      	movlt	r5, #1
 8011e80:	f7ff fd40 	bl	8011904 <_Balloc>
 8011e84:	b920      	cbnz	r0, 8011e90 <__mdiff+0x5c>
 8011e86:	4b2e      	ldr	r3, [pc, #184]	; (8011f40 <__mdiff+0x10c>)
 8011e88:	4602      	mov	r2, r0
 8011e8a:	f240 2145 	movw	r1, #581	; 0x245
 8011e8e:	e7e5      	b.n	8011e5c <__mdiff+0x28>
 8011e90:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8011e94:	6926      	ldr	r6, [r4, #16]
 8011e96:	60c5      	str	r5, [r0, #12]
 8011e98:	f104 0914 	add.w	r9, r4, #20
 8011e9c:	f108 0514 	add.w	r5, r8, #20
 8011ea0:	f100 0e14 	add.w	lr, r0, #20
 8011ea4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8011ea8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8011eac:	f108 0210 	add.w	r2, r8, #16
 8011eb0:	46f2      	mov	sl, lr
 8011eb2:	2100      	movs	r1, #0
 8011eb4:	f859 3b04 	ldr.w	r3, [r9], #4
 8011eb8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8011ebc:	fa11 f88b 	uxtah	r8, r1, fp
 8011ec0:	b299      	uxth	r1, r3
 8011ec2:	0c1b      	lsrs	r3, r3, #16
 8011ec4:	eba8 0801 	sub.w	r8, r8, r1
 8011ec8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8011ecc:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8011ed0:	fa1f f888 	uxth.w	r8, r8
 8011ed4:	1419      	asrs	r1, r3, #16
 8011ed6:	454e      	cmp	r6, r9
 8011ed8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8011edc:	f84a 3b04 	str.w	r3, [sl], #4
 8011ee0:	d8e8      	bhi.n	8011eb4 <__mdiff+0x80>
 8011ee2:	1b33      	subs	r3, r6, r4
 8011ee4:	3b15      	subs	r3, #21
 8011ee6:	f023 0303 	bic.w	r3, r3, #3
 8011eea:	3304      	adds	r3, #4
 8011eec:	3415      	adds	r4, #21
 8011eee:	42a6      	cmp	r6, r4
 8011ef0:	bf38      	it	cc
 8011ef2:	2304      	movcc	r3, #4
 8011ef4:	441d      	add	r5, r3
 8011ef6:	4473      	add	r3, lr
 8011ef8:	469e      	mov	lr, r3
 8011efa:	462e      	mov	r6, r5
 8011efc:	4566      	cmp	r6, ip
 8011efe:	d30e      	bcc.n	8011f1e <__mdiff+0xea>
 8011f00:	f10c 0203 	add.w	r2, ip, #3
 8011f04:	1b52      	subs	r2, r2, r5
 8011f06:	f022 0203 	bic.w	r2, r2, #3
 8011f0a:	3d03      	subs	r5, #3
 8011f0c:	45ac      	cmp	ip, r5
 8011f0e:	bf38      	it	cc
 8011f10:	2200      	movcc	r2, #0
 8011f12:	4413      	add	r3, r2
 8011f14:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8011f18:	b17a      	cbz	r2, 8011f3a <__mdiff+0x106>
 8011f1a:	6107      	str	r7, [r0, #16]
 8011f1c:	e7a4      	b.n	8011e68 <__mdiff+0x34>
 8011f1e:	f856 8b04 	ldr.w	r8, [r6], #4
 8011f22:	fa11 f288 	uxtah	r2, r1, r8
 8011f26:	1414      	asrs	r4, r2, #16
 8011f28:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8011f2c:	b292      	uxth	r2, r2
 8011f2e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8011f32:	f84e 2b04 	str.w	r2, [lr], #4
 8011f36:	1421      	asrs	r1, r4, #16
 8011f38:	e7e0      	b.n	8011efc <__mdiff+0xc8>
 8011f3a:	3f01      	subs	r7, #1
 8011f3c:	e7ea      	b.n	8011f14 <__mdiff+0xe0>
 8011f3e:	bf00      	nop
 8011f40:	080146ec 	.word	0x080146ec
 8011f44:	080146fd 	.word	0x080146fd

08011f48 <__d2b>:
 8011f48:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011f4c:	460f      	mov	r7, r1
 8011f4e:	2101      	movs	r1, #1
 8011f50:	ec59 8b10 	vmov	r8, r9, d0
 8011f54:	4616      	mov	r6, r2
 8011f56:	f7ff fcd5 	bl	8011904 <_Balloc>
 8011f5a:	4604      	mov	r4, r0
 8011f5c:	b930      	cbnz	r0, 8011f6c <__d2b+0x24>
 8011f5e:	4602      	mov	r2, r0
 8011f60:	4b24      	ldr	r3, [pc, #144]	; (8011ff4 <__d2b+0xac>)
 8011f62:	4825      	ldr	r0, [pc, #148]	; (8011ff8 <__d2b+0xb0>)
 8011f64:	f240 310f 	movw	r1, #783	; 0x30f
 8011f68:	f000 fa68 	bl	801243c <__assert_func>
 8011f6c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8011f70:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011f74:	bb2d      	cbnz	r5, 8011fc2 <__d2b+0x7a>
 8011f76:	9301      	str	r3, [sp, #4]
 8011f78:	f1b8 0300 	subs.w	r3, r8, #0
 8011f7c:	d026      	beq.n	8011fcc <__d2b+0x84>
 8011f7e:	4668      	mov	r0, sp
 8011f80:	9300      	str	r3, [sp, #0]
 8011f82:	f7ff fd87 	bl	8011a94 <__lo0bits>
 8011f86:	e9dd 1200 	ldrd	r1, r2, [sp]
 8011f8a:	b1e8      	cbz	r0, 8011fc8 <__d2b+0x80>
 8011f8c:	f1c0 0320 	rsb	r3, r0, #32
 8011f90:	fa02 f303 	lsl.w	r3, r2, r3
 8011f94:	430b      	orrs	r3, r1
 8011f96:	40c2      	lsrs	r2, r0
 8011f98:	6163      	str	r3, [r4, #20]
 8011f9a:	9201      	str	r2, [sp, #4]
 8011f9c:	9b01      	ldr	r3, [sp, #4]
 8011f9e:	61a3      	str	r3, [r4, #24]
 8011fa0:	2b00      	cmp	r3, #0
 8011fa2:	bf14      	ite	ne
 8011fa4:	2202      	movne	r2, #2
 8011fa6:	2201      	moveq	r2, #1
 8011fa8:	6122      	str	r2, [r4, #16]
 8011faa:	b1bd      	cbz	r5, 8011fdc <__d2b+0x94>
 8011fac:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8011fb0:	4405      	add	r5, r0
 8011fb2:	603d      	str	r5, [r7, #0]
 8011fb4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8011fb8:	6030      	str	r0, [r6, #0]
 8011fba:	4620      	mov	r0, r4
 8011fbc:	b003      	add	sp, #12
 8011fbe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011fc2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011fc6:	e7d6      	b.n	8011f76 <__d2b+0x2e>
 8011fc8:	6161      	str	r1, [r4, #20]
 8011fca:	e7e7      	b.n	8011f9c <__d2b+0x54>
 8011fcc:	a801      	add	r0, sp, #4
 8011fce:	f7ff fd61 	bl	8011a94 <__lo0bits>
 8011fd2:	9b01      	ldr	r3, [sp, #4]
 8011fd4:	6163      	str	r3, [r4, #20]
 8011fd6:	3020      	adds	r0, #32
 8011fd8:	2201      	movs	r2, #1
 8011fda:	e7e5      	b.n	8011fa8 <__d2b+0x60>
 8011fdc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011fe0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8011fe4:	6038      	str	r0, [r7, #0]
 8011fe6:	6918      	ldr	r0, [r3, #16]
 8011fe8:	f7ff fd34 	bl	8011a54 <__hi0bits>
 8011fec:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011ff0:	e7e2      	b.n	8011fb8 <__d2b+0x70>
 8011ff2:	bf00      	nop
 8011ff4:	080146ec 	.word	0x080146ec
 8011ff8:	080146fd 	.word	0x080146fd

08011ffc <__ssputs_r>:
 8011ffc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012000:	688e      	ldr	r6, [r1, #8]
 8012002:	461f      	mov	r7, r3
 8012004:	42be      	cmp	r6, r7
 8012006:	680b      	ldr	r3, [r1, #0]
 8012008:	4682      	mov	sl, r0
 801200a:	460c      	mov	r4, r1
 801200c:	4690      	mov	r8, r2
 801200e:	d82c      	bhi.n	801206a <__ssputs_r+0x6e>
 8012010:	898a      	ldrh	r2, [r1, #12]
 8012012:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8012016:	d026      	beq.n	8012066 <__ssputs_r+0x6a>
 8012018:	6965      	ldr	r5, [r4, #20]
 801201a:	6909      	ldr	r1, [r1, #16]
 801201c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012020:	eba3 0901 	sub.w	r9, r3, r1
 8012024:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012028:	1c7b      	adds	r3, r7, #1
 801202a:	444b      	add	r3, r9
 801202c:	106d      	asrs	r5, r5, #1
 801202e:	429d      	cmp	r5, r3
 8012030:	bf38      	it	cc
 8012032:	461d      	movcc	r5, r3
 8012034:	0553      	lsls	r3, r2, #21
 8012036:	d527      	bpl.n	8012088 <__ssputs_r+0x8c>
 8012038:	4629      	mov	r1, r5
 801203a:	f7fd fee7 	bl	800fe0c <_malloc_r>
 801203e:	4606      	mov	r6, r0
 8012040:	b360      	cbz	r0, 801209c <__ssputs_r+0xa0>
 8012042:	6921      	ldr	r1, [r4, #16]
 8012044:	464a      	mov	r2, r9
 8012046:	f7fe fd88 	bl	8010b5a <memcpy>
 801204a:	89a3      	ldrh	r3, [r4, #12]
 801204c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8012050:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012054:	81a3      	strh	r3, [r4, #12]
 8012056:	6126      	str	r6, [r4, #16]
 8012058:	6165      	str	r5, [r4, #20]
 801205a:	444e      	add	r6, r9
 801205c:	eba5 0509 	sub.w	r5, r5, r9
 8012060:	6026      	str	r6, [r4, #0]
 8012062:	60a5      	str	r5, [r4, #8]
 8012064:	463e      	mov	r6, r7
 8012066:	42be      	cmp	r6, r7
 8012068:	d900      	bls.n	801206c <__ssputs_r+0x70>
 801206a:	463e      	mov	r6, r7
 801206c:	6820      	ldr	r0, [r4, #0]
 801206e:	4632      	mov	r2, r6
 8012070:	4641      	mov	r1, r8
 8012072:	f000 f9c9 	bl	8012408 <memmove>
 8012076:	68a3      	ldr	r3, [r4, #8]
 8012078:	1b9b      	subs	r3, r3, r6
 801207a:	60a3      	str	r3, [r4, #8]
 801207c:	6823      	ldr	r3, [r4, #0]
 801207e:	4433      	add	r3, r6
 8012080:	6023      	str	r3, [r4, #0]
 8012082:	2000      	movs	r0, #0
 8012084:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012088:	462a      	mov	r2, r5
 801208a:	f000 fa1d 	bl	80124c8 <_realloc_r>
 801208e:	4606      	mov	r6, r0
 8012090:	2800      	cmp	r0, #0
 8012092:	d1e0      	bne.n	8012056 <__ssputs_r+0x5a>
 8012094:	6921      	ldr	r1, [r4, #16]
 8012096:	4650      	mov	r0, sl
 8012098:	f7ff fbe8 	bl	801186c <_free_r>
 801209c:	230c      	movs	r3, #12
 801209e:	f8ca 3000 	str.w	r3, [sl]
 80120a2:	89a3      	ldrh	r3, [r4, #12]
 80120a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80120a8:	81a3      	strh	r3, [r4, #12]
 80120aa:	f04f 30ff 	mov.w	r0, #4294967295
 80120ae:	e7e9      	b.n	8012084 <__ssputs_r+0x88>

080120b0 <_svfiprintf_r>:
 80120b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80120b4:	4698      	mov	r8, r3
 80120b6:	898b      	ldrh	r3, [r1, #12]
 80120b8:	061b      	lsls	r3, r3, #24
 80120ba:	b09d      	sub	sp, #116	; 0x74
 80120bc:	4607      	mov	r7, r0
 80120be:	460d      	mov	r5, r1
 80120c0:	4614      	mov	r4, r2
 80120c2:	d50e      	bpl.n	80120e2 <_svfiprintf_r+0x32>
 80120c4:	690b      	ldr	r3, [r1, #16]
 80120c6:	b963      	cbnz	r3, 80120e2 <_svfiprintf_r+0x32>
 80120c8:	2140      	movs	r1, #64	; 0x40
 80120ca:	f7fd fe9f 	bl	800fe0c <_malloc_r>
 80120ce:	6028      	str	r0, [r5, #0]
 80120d0:	6128      	str	r0, [r5, #16]
 80120d2:	b920      	cbnz	r0, 80120de <_svfiprintf_r+0x2e>
 80120d4:	230c      	movs	r3, #12
 80120d6:	603b      	str	r3, [r7, #0]
 80120d8:	f04f 30ff 	mov.w	r0, #4294967295
 80120dc:	e0d0      	b.n	8012280 <_svfiprintf_r+0x1d0>
 80120de:	2340      	movs	r3, #64	; 0x40
 80120e0:	616b      	str	r3, [r5, #20]
 80120e2:	2300      	movs	r3, #0
 80120e4:	9309      	str	r3, [sp, #36]	; 0x24
 80120e6:	2320      	movs	r3, #32
 80120e8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80120ec:	f8cd 800c 	str.w	r8, [sp, #12]
 80120f0:	2330      	movs	r3, #48	; 0x30
 80120f2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8012298 <_svfiprintf_r+0x1e8>
 80120f6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80120fa:	f04f 0901 	mov.w	r9, #1
 80120fe:	4623      	mov	r3, r4
 8012100:	469a      	mov	sl, r3
 8012102:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012106:	b10a      	cbz	r2, 801210c <_svfiprintf_r+0x5c>
 8012108:	2a25      	cmp	r2, #37	; 0x25
 801210a:	d1f9      	bne.n	8012100 <_svfiprintf_r+0x50>
 801210c:	ebba 0b04 	subs.w	fp, sl, r4
 8012110:	d00b      	beq.n	801212a <_svfiprintf_r+0x7a>
 8012112:	465b      	mov	r3, fp
 8012114:	4622      	mov	r2, r4
 8012116:	4629      	mov	r1, r5
 8012118:	4638      	mov	r0, r7
 801211a:	f7ff ff6f 	bl	8011ffc <__ssputs_r>
 801211e:	3001      	adds	r0, #1
 8012120:	f000 80a9 	beq.w	8012276 <_svfiprintf_r+0x1c6>
 8012124:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012126:	445a      	add	r2, fp
 8012128:	9209      	str	r2, [sp, #36]	; 0x24
 801212a:	f89a 3000 	ldrb.w	r3, [sl]
 801212e:	2b00      	cmp	r3, #0
 8012130:	f000 80a1 	beq.w	8012276 <_svfiprintf_r+0x1c6>
 8012134:	2300      	movs	r3, #0
 8012136:	f04f 32ff 	mov.w	r2, #4294967295
 801213a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801213e:	f10a 0a01 	add.w	sl, sl, #1
 8012142:	9304      	str	r3, [sp, #16]
 8012144:	9307      	str	r3, [sp, #28]
 8012146:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801214a:	931a      	str	r3, [sp, #104]	; 0x68
 801214c:	4654      	mov	r4, sl
 801214e:	2205      	movs	r2, #5
 8012150:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012154:	4850      	ldr	r0, [pc, #320]	; (8012298 <_svfiprintf_r+0x1e8>)
 8012156:	f7ee f853 	bl	8000200 <memchr>
 801215a:	9a04      	ldr	r2, [sp, #16]
 801215c:	b9d8      	cbnz	r0, 8012196 <_svfiprintf_r+0xe6>
 801215e:	06d0      	lsls	r0, r2, #27
 8012160:	bf44      	itt	mi
 8012162:	2320      	movmi	r3, #32
 8012164:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012168:	0711      	lsls	r1, r2, #28
 801216a:	bf44      	itt	mi
 801216c:	232b      	movmi	r3, #43	; 0x2b
 801216e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012172:	f89a 3000 	ldrb.w	r3, [sl]
 8012176:	2b2a      	cmp	r3, #42	; 0x2a
 8012178:	d015      	beq.n	80121a6 <_svfiprintf_r+0xf6>
 801217a:	9a07      	ldr	r2, [sp, #28]
 801217c:	4654      	mov	r4, sl
 801217e:	2000      	movs	r0, #0
 8012180:	f04f 0c0a 	mov.w	ip, #10
 8012184:	4621      	mov	r1, r4
 8012186:	f811 3b01 	ldrb.w	r3, [r1], #1
 801218a:	3b30      	subs	r3, #48	; 0x30
 801218c:	2b09      	cmp	r3, #9
 801218e:	d94d      	bls.n	801222c <_svfiprintf_r+0x17c>
 8012190:	b1b0      	cbz	r0, 80121c0 <_svfiprintf_r+0x110>
 8012192:	9207      	str	r2, [sp, #28]
 8012194:	e014      	b.n	80121c0 <_svfiprintf_r+0x110>
 8012196:	eba0 0308 	sub.w	r3, r0, r8
 801219a:	fa09 f303 	lsl.w	r3, r9, r3
 801219e:	4313      	orrs	r3, r2
 80121a0:	9304      	str	r3, [sp, #16]
 80121a2:	46a2      	mov	sl, r4
 80121a4:	e7d2      	b.n	801214c <_svfiprintf_r+0x9c>
 80121a6:	9b03      	ldr	r3, [sp, #12]
 80121a8:	1d19      	adds	r1, r3, #4
 80121aa:	681b      	ldr	r3, [r3, #0]
 80121ac:	9103      	str	r1, [sp, #12]
 80121ae:	2b00      	cmp	r3, #0
 80121b0:	bfbb      	ittet	lt
 80121b2:	425b      	neglt	r3, r3
 80121b4:	f042 0202 	orrlt.w	r2, r2, #2
 80121b8:	9307      	strge	r3, [sp, #28]
 80121ba:	9307      	strlt	r3, [sp, #28]
 80121bc:	bfb8      	it	lt
 80121be:	9204      	strlt	r2, [sp, #16]
 80121c0:	7823      	ldrb	r3, [r4, #0]
 80121c2:	2b2e      	cmp	r3, #46	; 0x2e
 80121c4:	d10c      	bne.n	80121e0 <_svfiprintf_r+0x130>
 80121c6:	7863      	ldrb	r3, [r4, #1]
 80121c8:	2b2a      	cmp	r3, #42	; 0x2a
 80121ca:	d134      	bne.n	8012236 <_svfiprintf_r+0x186>
 80121cc:	9b03      	ldr	r3, [sp, #12]
 80121ce:	1d1a      	adds	r2, r3, #4
 80121d0:	681b      	ldr	r3, [r3, #0]
 80121d2:	9203      	str	r2, [sp, #12]
 80121d4:	2b00      	cmp	r3, #0
 80121d6:	bfb8      	it	lt
 80121d8:	f04f 33ff 	movlt.w	r3, #4294967295
 80121dc:	3402      	adds	r4, #2
 80121de:	9305      	str	r3, [sp, #20]
 80121e0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80122a8 <_svfiprintf_r+0x1f8>
 80121e4:	7821      	ldrb	r1, [r4, #0]
 80121e6:	2203      	movs	r2, #3
 80121e8:	4650      	mov	r0, sl
 80121ea:	f7ee f809 	bl	8000200 <memchr>
 80121ee:	b138      	cbz	r0, 8012200 <_svfiprintf_r+0x150>
 80121f0:	9b04      	ldr	r3, [sp, #16]
 80121f2:	eba0 000a 	sub.w	r0, r0, sl
 80121f6:	2240      	movs	r2, #64	; 0x40
 80121f8:	4082      	lsls	r2, r0
 80121fa:	4313      	orrs	r3, r2
 80121fc:	3401      	adds	r4, #1
 80121fe:	9304      	str	r3, [sp, #16]
 8012200:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012204:	4825      	ldr	r0, [pc, #148]	; (801229c <_svfiprintf_r+0x1ec>)
 8012206:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801220a:	2206      	movs	r2, #6
 801220c:	f7ed fff8 	bl	8000200 <memchr>
 8012210:	2800      	cmp	r0, #0
 8012212:	d038      	beq.n	8012286 <_svfiprintf_r+0x1d6>
 8012214:	4b22      	ldr	r3, [pc, #136]	; (80122a0 <_svfiprintf_r+0x1f0>)
 8012216:	bb1b      	cbnz	r3, 8012260 <_svfiprintf_r+0x1b0>
 8012218:	9b03      	ldr	r3, [sp, #12]
 801221a:	3307      	adds	r3, #7
 801221c:	f023 0307 	bic.w	r3, r3, #7
 8012220:	3308      	adds	r3, #8
 8012222:	9303      	str	r3, [sp, #12]
 8012224:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012226:	4433      	add	r3, r6
 8012228:	9309      	str	r3, [sp, #36]	; 0x24
 801222a:	e768      	b.n	80120fe <_svfiprintf_r+0x4e>
 801222c:	fb0c 3202 	mla	r2, ip, r2, r3
 8012230:	460c      	mov	r4, r1
 8012232:	2001      	movs	r0, #1
 8012234:	e7a6      	b.n	8012184 <_svfiprintf_r+0xd4>
 8012236:	2300      	movs	r3, #0
 8012238:	3401      	adds	r4, #1
 801223a:	9305      	str	r3, [sp, #20]
 801223c:	4619      	mov	r1, r3
 801223e:	f04f 0c0a 	mov.w	ip, #10
 8012242:	4620      	mov	r0, r4
 8012244:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012248:	3a30      	subs	r2, #48	; 0x30
 801224a:	2a09      	cmp	r2, #9
 801224c:	d903      	bls.n	8012256 <_svfiprintf_r+0x1a6>
 801224e:	2b00      	cmp	r3, #0
 8012250:	d0c6      	beq.n	80121e0 <_svfiprintf_r+0x130>
 8012252:	9105      	str	r1, [sp, #20]
 8012254:	e7c4      	b.n	80121e0 <_svfiprintf_r+0x130>
 8012256:	fb0c 2101 	mla	r1, ip, r1, r2
 801225a:	4604      	mov	r4, r0
 801225c:	2301      	movs	r3, #1
 801225e:	e7f0      	b.n	8012242 <_svfiprintf_r+0x192>
 8012260:	ab03      	add	r3, sp, #12
 8012262:	9300      	str	r3, [sp, #0]
 8012264:	462a      	mov	r2, r5
 8012266:	4b0f      	ldr	r3, [pc, #60]	; (80122a4 <_svfiprintf_r+0x1f4>)
 8012268:	a904      	add	r1, sp, #16
 801226a:	4638      	mov	r0, r7
 801226c:	f7fd fefa 	bl	8010064 <_printf_float>
 8012270:	1c42      	adds	r2, r0, #1
 8012272:	4606      	mov	r6, r0
 8012274:	d1d6      	bne.n	8012224 <_svfiprintf_r+0x174>
 8012276:	89ab      	ldrh	r3, [r5, #12]
 8012278:	065b      	lsls	r3, r3, #25
 801227a:	f53f af2d 	bmi.w	80120d8 <_svfiprintf_r+0x28>
 801227e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012280:	b01d      	add	sp, #116	; 0x74
 8012282:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012286:	ab03      	add	r3, sp, #12
 8012288:	9300      	str	r3, [sp, #0]
 801228a:	462a      	mov	r2, r5
 801228c:	4b05      	ldr	r3, [pc, #20]	; (80122a4 <_svfiprintf_r+0x1f4>)
 801228e:	a904      	add	r1, sp, #16
 8012290:	4638      	mov	r0, r7
 8012292:	f7fe f98b 	bl	80105ac <_printf_i>
 8012296:	e7eb      	b.n	8012270 <_svfiprintf_r+0x1c0>
 8012298:	08014854 	.word	0x08014854
 801229c:	0801485e 	.word	0x0801485e
 80122a0:	08010065 	.word	0x08010065
 80122a4:	08011ffd 	.word	0x08011ffd
 80122a8:	0801485a 	.word	0x0801485a

080122ac <__sflush_r>:
 80122ac:	898a      	ldrh	r2, [r1, #12]
 80122ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80122b2:	4605      	mov	r5, r0
 80122b4:	0710      	lsls	r0, r2, #28
 80122b6:	460c      	mov	r4, r1
 80122b8:	d458      	bmi.n	801236c <__sflush_r+0xc0>
 80122ba:	684b      	ldr	r3, [r1, #4]
 80122bc:	2b00      	cmp	r3, #0
 80122be:	dc05      	bgt.n	80122cc <__sflush_r+0x20>
 80122c0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80122c2:	2b00      	cmp	r3, #0
 80122c4:	dc02      	bgt.n	80122cc <__sflush_r+0x20>
 80122c6:	2000      	movs	r0, #0
 80122c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80122cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80122ce:	2e00      	cmp	r6, #0
 80122d0:	d0f9      	beq.n	80122c6 <__sflush_r+0x1a>
 80122d2:	2300      	movs	r3, #0
 80122d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80122d8:	682f      	ldr	r7, [r5, #0]
 80122da:	6a21      	ldr	r1, [r4, #32]
 80122dc:	602b      	str	r3, [r5, #0]
 80122de:	d032      	beq.n	8012346 <__sflush_r+0x9a>
 80122e0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80122e2:	89a3      	ldrh	r3, [r4, #12]
 80122e4:	075a      	lsls	r2, r3, #29
 80122e6:	d505      	bpl.n	80122f4 <__sflush_r+0x48>
 80122e8:	6863      	ldr	r3, [r4, #4]
 80122ea:	1ac0      	subs	r0, r0, r3
 80122ec:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80122ee:	b10b      	cbz	r3, 80122f4 <__sflush_r+0x48>
 80122f0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80122f2:	1ac0      	subs	r0, r0, r3
 80122f4:	2300      	movs	r3, #0
 80122f6:	4602      	mov	r2, r0
 80122f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80122fa:	6a21      	ldr	r1, [r4, #32]
 80122fc:	4628      	mov	r0, r5
 80122fe:	47b0      	blx	r6
 8012300:	1c43      	adds	r3, r0, #1
 8012302:	89a3      	ldrh	r3, [r4, #12]
 8012304:	d106      	bne.n	8012314 <__sflush_r+0x68>
 8012306:	6829      	ldr	r1, [r5, #0]
 8012308:	291d      	cmp	r1, #29
 801230a:	d82b      	bhi.n	8012364 <__sflush_r+0xb8>
 801230c:	4a29      	ldr	r2, [pc, #164]	; (80123b4 <__sflush_r+0x108>)
 801230e:	410a      	asrs	r2, r1
 8012310:	07d6      	lsls	r6, r2, #31
 8012312:	d427      	bmi.n	8012364 <__sflush_r+0xb8>
 8012314:	2200      	movs	r2, #0
 8012316:	6062      	str	r2, [r4, #4]
 8012318:	04d9      	lsls	r1, r3, #19
 801231a:	6922      	ldr	r2, [r4, #16]
 801231c:	6022      	str	r2, [r4, #0]
 801231e:	d504      	bpl.n	801232a <__sflush_r+0x7e>
 8012320:	1c42      	adds	r2, r0, #1
 8012322:	d101      	bne.n	8012328 <__sflush_r+0x7c>
 8012324:	682b      	ldr	r3, [r5, #0]
 8012326:	b903      	cbnz	r3, 801232a <__sflush_r+0x7e>
 8012328:	6560      	str	r0, [r4, #84]	; 0x54
 801232a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801232c:	602f      	str	r7, [r5, #0]
 801232e:	2900      	cmp	r1, #0
 8012330:	d0c9      	beq.n	80122c6 <__sflush_r+0x1a>
 8012332:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012336:	4299      	cmp	r1, r3
 8012338:	d002      	beq.n	8012340 <__sflush_r+0x94>
 801233a:	4628      	mov	r0, r5
 801233c:	f7ff fa96 	bl	801186c <_free_r>
 8012340:	2000      	movs	r0, #0
 8012342:	6360      	str	r0, [r4, #52]	; 0x34
 8012344:	e7c0      	b.n	80122c8 <__sflush_r+0x1c>
 8012346:	2301      	movs	r3, #1
 8012348:	4628      	mov	r0, r5
 801234a:	47b0      	blx	r6
 801234c:	1c41      	adds	r1, r0, #1
 801234e:	d1c8      	bne.n	80122e2 <__sflush_r+0x36>
 8012350:	682b      	ldr	r3, [r5, #0]
 8012352:	2b00      	cmp	r3, #0
 8012354:	d0c5      	beq.n	80122e2 <__sflush_r+0x36>
 8012356:	2b1d      	cmp	r3, #29
 8012358:	d001      	beq.n	801235e <__sflush_r+0xb2>
 801235a:	2b16      	cmp	r3, #22
 801235c:	d101      	bne.n	8012362 <__sflush_r+0xb6>
 801235e:	602f      	str	r7, [r5, #0]
 8012360:	e7b1      	b.n	80122c6 <__sflush_r+0x1a>
 8012362:	89a3      	ldrh	r3, [r4, #12]
 8012364:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012368:	81a3      	strh	r3, [r4, #12]
 801236a:	e7ad      	b.n	80122c8 <__sflush_r+0x1c>
 801236c:	690f      	ldr	r7, [r1, #16]
 801236e:	2f00      	cmp	r7, #0
 8012370:	d0a9      	beq.n	80122c6 <__sflush_r+0x1a>
 8012372:	0793      	lsls	r3, r2, #30
 8012374:	680e      	ldr	r6, [r1, #0]
 8012376:	bf08      	it	eq
 8012378:	694b      	ldreq	r3, [r1, #20]
 801237a:	600f      	str	r7, [r1, #0]
 801237c:	bf18      	it	ne
 801237e:	2300      	movne	r3, #0
 8012380:	eba6 0807 	sub.w	r8, r6, r7
 8012384:	608b      	str	r3, [r1, #8]
 8012386:	f1b8 0f00 	cmp.w	r8, #0
 801238a:	dd9c      	ble.n	80122c6 <__sflush_r+0x1a>
 801238c:	6a21      	ldr	r1, [r4, #32]
 801238e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012390:	4643      	mov	r3, r8
 8012392:	463a      	mov	r2, r7
 8012394:	4628      	mov	r0, r5
 8012396:	47b0      	blx	r6
 8012398:	2800      	cmp	r0, #0
 801239a:	dc06      	bgt.n	80123aa <__sflush_r+0xfe>
 801239c:	89a3      	ldrh	r3, [r4, #12]
 801239e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80123a2:	81a3      	strh	r3, [r4, #12]
 80123a4:	f04f 30ff 	mov.w	r0, #4294967295
 80123a8:	e78e      	b.n	80122c8 <__sflush_r+0x1c>
 80123aa:	4407      	add	r7, r0
 80123ac:	eba8 0800 	sub.w	r8, r8, r0
 80123b0:	e7e9      	b.n	8012386 <__sflush_r+0xda>
 80123b2:	bf00      	nop
 80123b4:	dfbffffe 	.word	0xdfbffffe

080123b8 <_fflush_r>:
 80123b8:	b538      	push	{r3, r4, r5, lr}
 80123ba:	690b      	ldr	r3, [r1, #16]
 80123bc:	4605      	mov	r5, r0
 80123be:	460c      	mov	r4, r1
 80123c0:	b913      	cbnz	r3, 80123c8 <_fflush_r+0x10>
 80123c2:	2500      	movs	r5, #0
 80123c4:	4628      	mov	r0, r5
 80123c6:	bd38      	pop	{r3, r4, r5, pc}
 80123c8:	b118      	cbz	r0, 80123d2 <_fflush_r+0x1a>
 80123ca:	6a03      	ldr	r3, [r0, #32]
 80123cc:	b90b      	cbnz	r3, 80123d2 <_fflush_r+0x1a>
 80123ce:	f7fe fa9b 	bl	8010908 <__sinit>
 80123d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80123d6:	2b00      	cmp	r3, #0
 80123d8:	d0f3      	beq.n	80123c2 <_fflush_r+0xa>
 80123da:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80123dc:	07d0      	lsls	r0, r2, #31
 80123de:	d404      	bmi.n	80123ea <_fflush_r+0x32>
 80123e0:	0599      	lsls	r1, r3, #22
 80123e2:	d402      	bmi.n	80123ea <_fflush_r+0x32>
 80123e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80123e6:	f7fe fbb6 	bl	8010b56 <__retarget_lock_acquire_recursive>
 80123ea:	4628      	mov	r0, r5
 80123ec:	4621      	mov	r1, r4
 80123ee:	f7ff ff5d 	bl	80122ac <__sflush_r>
 80123f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80123f4:	07da      	lsls	r2, r3, #31
 80123f6:	4605      	mov	r5, r0
 80123f8:	d4e4      	bmi.n	80123c4 <_fflush_r+0xc>
 80123fa:	89a3      	ldrh	r3, [r4, #12]
 80123fc:	059b      	lsls	r3, r3, #22
 80123fe:	d4e1      	bmi.n	80123c4 <_fflush_r+0xc>
 8012400:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012402:	f7fe fba9 	bl	8010b58 <__retarget_lock_release_recursive>
 8012406:	e7dd      	b.n	80123c4 <_fflush_r+0xc>

08012408 <memmove>:
 8012408:	4288      	cmp	r0, r1
 801240a:	b510      	push	{r4, lr}
 801240c:	eb01 0402 	add.w	r4, r1, r2
 8012410:	d902      	bls.n	8012418 <memmove+0x10>
 8012412:	4284      	cmp	r4, r0
 8012414:	4623      	mov	r3, r4
 8012416:	d807      	bhi.n	8012428 <memmove+0x20>
 8012418:	1e43      	subs	r3, r0, #1
 801241a:	42a1      	cmp	r1, r4
 801241c:	d008      	beq.n	8012430 <memmove+0x28>
 801241e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012422:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012426:	e7f8      	b.n	801241a <memmove+0x12>
 8012428:	4402      	add	r2, r0
 801242a:	4601      	mov	r1, r0
 801242c:	428a      	cmp	r2, r1
 801242e:	d100      	bne.n	8012432 <memmove+0x2a>
 8012430:	bd10      	pop	{r4, pc}
 8012432:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012436:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801243a:	e7f7      	b.n	801242c <memmove+0x24>

0801243c <__assert_func>:
 801243c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801243e:	4614      	mov	r4, r2
 8012440:	461a      	mov	r2, r3
 8012442:	4b09      	ldr	r3, [pc, #36]	; (8012468 <__assert_func+0x2c>)
 8012444:	681b      	ldr	r3, [r3, #0]
 8012446:	4605      	mov	r5, r0
 8012448:	68d8      	ldr	r0, [r3, #12]
 801244a:	b14c      	cbz	r4, 8012460 <__assert_func+0x24>
 801244c:	4b07      	ldr	r3, [pc, #28]	; (801246c <__assert_func+0x30>)
 801244e:	9100      	str	r1, [sp, #0]
 8012450:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012454:	4906      	ldr	r1, [pc, #24]	; (8012470 <__assert_func+0x34>)
 8012456:	462b      	mov	r3, r5
 8012458:	f000 f872 	bl	8012540 <fiprintf>
 801245c:	f000 f882 	bl	8012564 <abort>
 8012460:	4b04      	ldr	r3, [pc, #16]	; (8012474 <__assert_func+0x38>)
 8012462:	461c      	mov	r4, r3
 8012464:	e7f3      	b.n	801244e <__assert_func+0x12>
 8012466:	bf00      	nop
 8012468:	200000c4 	.word	0x200000c4
 801246c:	0801486f 	.word	0x0801486f
 8012470:	0801487c 	.word	0x0801487c
 8012474:	080148aa 	.word	0x080148aa

08012478 <_calloc_r>:
 8012478:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801247a:	fba1 2402 	umull	r2, r4, r1, r2
 801247e:	b94c      	cbnz	r4, 8012494 <_calloc_r+0x1c>
 8012480:	4611      	mov	r1, r2
 8012482:	9201      	str	r2, [sp, #4]
 8012484:	f7fd fcc2 	bl	800fe0c <_malloc_r>
 8012488:	9a01      	ldr	r2, [sp, #4]
 801248a:	4605      	mov	r5, r0
 801248c:	b930      	cbnz	r0, 801249c <_calloc_r+0x24>
 801248e:	4628      	mov	r0, r5
 8012490:	b003      	add	sp, #12
 8012492:	bd30      	pop	{r4, r5, pc}
 8012494:	220c      	movs	r2, #12
 8012496:	6002      	str	r2, [r0, #0]
 8012498:	2500      	movs	r5, #0
 801249a:	e7f8      	b.n	801248e <_calloc_r+0x16>
 801249c:	4621      	mov	r1, r4
 801249e:	f7fe facc 	bl	8010a3a <memset>
 80124a2:	e7f4      	b.n	801248e <_calloc_r+0x16>

080124a4 <__ascii_mbtowc>:
 80124a4:	b082      	sub	sp, #8
 80124a6:	b901      	cbnz	r1, 80124aa <__ascii_mbtowc+0x6>
 80124a8:	a901      	add	r1, sp, #4
 80124aa:	b142      	cbz	r2, 80124be <__ascii_mbtowc+0x1a>
 80124ac:	b14b      	cbz	r3, 80124c2 <__ascii_mbtowc+0x1e>
 80124ae:	7813      	ldrb	r3, [r2, #0]
 80124b0:	600b      	str	r3, [r1, #0]
 80124b2:	7812      	ldrb	r2, [r2, #0]
 80124b4:	1e10      	subs	r0, r2, #0
 80124b6:	bf18      	it	ne
 80124b8:	2001      	movne	r0, #1
 80124ba:	b002      	add	sp, #8
 80124bc:	4770      	bx	lr
 80124be:	4610      	mov	r0, r2
 80124c0:	e7fb      	b.n	80124ba <__ascii_mbtowc+0x16>
 80124c2:	f06f 0001 	mvn.w	r0, #1
 80124c6:	e7f8      	b.n	80124ba <__ascii_mbtowc+0x16>

080124c8 <_realloc_r>:
 80124c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80124cc:	4680      	mov	r8, r0
 80124ce:	4614      	mov	r4, r2
 80124d0:	460e      	mov	r6, r1
 80124d2:	b921      	cbnz	r1, 80124de <_realloc_r+0x16>
 80124d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80124d8:	4611      	mov	r1, r2
 80124da:	f7fd bc97 	b.w	800fe0c <_malloc_r>
 80124de:	b92a      	cbnz	r2, 80124ec <_realloc_r+0x24>
 80124e0:	f7ff f9c4 	bl	801186c <_free_r>
 80124e4:	4625      	mov	r5, r4
 80124e6:	4628      	mov	r0, r5
 80124e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80124ec:	f000 f841 	bl	8012572 <_malloc_usable_size_r>
 80124f0:	4284      	cmp	r4, r0
 80124f2:	4607      	mov	r7, r0
 80124f4:	d802      	bhi.n	80124fc <_realloc_r+0x34>
 80124f6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80124fa:	d812      	bhi.n	8012522 <_realloc_r+0x5a>
 80124fc:	4621      	mov	r1, r4
 80124fe:	4640      	mov	r0, r8
 8012500:	f7fd fc84 	bl	800fe0c <_malloc_r>
 8012504:	4605      	mov	r5, r0
 8012506:	2800      	cmp	r0, #0
 8012508:	d0ed      	beq.n	80124e6 <_realloc_r+0x1e>
 801250a:	42bc      	cmp	r4, r7
 801250c:	4622      	mov	r2, r4
 801250e:	4631      	mov	r1, r6
 8012510:	bf28      	it	cs
 8012512:	463a      	movcs	r2, r7
 8012514:	f7fe fb21 	bl	8010b5a <memcpy>
 8012518:	4631      	mov	r1, r6
 801251a:	4640      	mov	r0, r8
 801251c:	f7ff f9a6 	bl	801186c <_free_r>
 8012520:	e7e1      	b.n	80124e6 <_realloc_r+0x1e>
 8012522:	4635      	mov	r5, r6
 8012524:	e7df      	b.n	80124e6 <_realloc_r+0x1e>

08012526 <__ascii_wctomb>:
 8012526:	b149      	cbz	r1, 801253c <__ascii_wctomb+0x16>
 8012528:	2aff      	cmp	r2, #255	; 0xff
 801252a:	bf85      	ittet	hi
 801252c:	238a      	movhi	r3, #138	; 0x8a
 801252e:	6003      	strhi	r3, [r0, #0]
 8012530:	700a      	strbls	r2, [r1, #0]
 8012532:	f04f 30ff 	movhi.w	r0, #4294967295
 8012536:	bf98      	it	ls
 8012538:	2001      	movls	r0, #1
 801253a:	4770      	bx	lr
 801253c:	4608      	mov	r0, r1
 801253e:	4770      	bx	lr

08012540 <fiprintf>:
 8012540:	b40e      	push	{r1, r2, r3}
 8012542:	b503      	push	{r0, r1, lr}
 8012544:	4601      	mov	r1, r0
 8012546:	ab03      	add	r3, sp, #12
 8012548:	4805      	ldr	r0, [pc, #20]	; (8012560 <fiprintf+0x20>)
 801254a:	f853 2b04 	ldr.w	r2, [r3], #4
 801254e:	6800      	ldr	r0, [r0, #0]
 8012550:	9301      	str	r3, [sp, #4]
 8012552:	f000 f83f 	bl	80125d4 <_vfiprintf_r>
 8012556:	b002      	add	sp, #8
 8012558:	f85d eb04 	ldr.w	lr, [sp], #4
 801255c:	b003      	add	sp, #12
 801255e:	4770      	bx	lr
 8012560:	200000c4 	.word	0x200000c4

08012564 <abort>:
 8012564:	b508      	push	{r3, lr}
 8012566:	2006      	movs	r0, #6
 8012568:	f000 fa0c 	bl	8012984 <raise>
 801256c:	2001      	movs	r0, #1
 801256e:	f7f3 f90f 	bl	8005790 <_exit>

08012572 <_malloc_usable_size_r>:
 8012572:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012576:	1f18      	subs	r0, r3, #4
 8012578:	2b00      	cmp	r3, #0
 801257a:	bfbc      	itt	lt
 801257c:	580b      	ldrlt	r3, [r1, r0]
 801257e:	18c0      	addlt	r0, r0, r3
 8012580:	4770      	bx	lr

08012582 <__sfputc_r>:
 8012582:	6893      	ldr	r3, [r2, #8]
 8012584:	3b01      	subs	r3, #1
 8012586:	2b00      	cmp	r3, #0
 8012588:	b410      	push	{r4}
 801258a:	6093      	str	r3, [r2, #8]
 801258c:	da08      	bge.n	80125a0 <__sfputc_r+0x1e>
 801258e:	6994      	ldr	r4, [r2, #24]
 8012590:	42a3      	cmp	r3, r4
 8012592:	db01      	blt.n	8012598 <__sfputc_r+0x16>
 8012594:	290a      	cmp	r1, #10
 8012596:	d103      	bne.n	80125a0 <__sfputc_r+0x1e>
 8012598:	f85d 4b04 	ldr.w	r4, [sp], #4
 801259c:	f000 b934 	b.w	8012808 <__swbuf_r>
 80125a0:	6813      	ldr	r3, [r2, #0]
 80125a2:	1c58      	adds	r0, r3, #1
 80125a4:	6010      	str	r0, [r2, #0]
 80125a6:	7019      	strb	r1, [r3, #0]
 80125a8:	4608      	mov	r0, r1
 80125aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80125ae:	4770      	bx	lr

080125b0 <__sfputs_r>:
 80125b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80125b2:	4606      	mov	r6, r0
 80125b4:	460f      	mov	r7, r1
 80125b6:	4614      	mov	r4, r2
 80125b8:	18d5      	adds	r5, r2, r3
 80125ba:	42ac      	cmp	r4, r5
 80125bc:	d101      	bne.n	80125c2 <__sfputs_r+0x12>
 80125be:	2000      	movs	r0, #0
 80125c0:	e007      	b.n	80125d2 <__sfputs_r+0x22>
 80125c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80125c6:	463a      	mov	r2, r7
 80125c8:	4630      	mov	r0, r6
 80125ca:	f7ff ffda 	bl	8012582 <__sfputc_r>
 80125ce:	1c43      	adds	r3, r0, #1
 80125d0:	d1f3      	bne.n	80125ba <__sfputs_r+0xa>
 80125d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080125d4 <_vfiprintf_r>:
 80125d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80125d8:	460d      	mov	r5, r1
 80125da:	b09d      	sub	sp, #116	; 0x74
 80125dc:	4614      	mov	r4, r2
 80125de:	4698      	mov	r8, r3
 80125e0:	4606      	mov	r6, r0
 80125e2:	b118      	cbz	r0, 80125ec <_vfiprintf_r+0x18>
 80125e4:	6a03      	ldr	r3, [r0, #32]
 80125e6:	b90b      	cbnz	r3, 80125ec <_vfiprintf_r+0x18>
 80125e8:	f7fe f98e 	bl	8010908 <__sinit>
 80125ec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80125ee:	07d9      	lsls	r1, r3, #31
 80125f0:	d405      	bmi.n	80125fe <_vfiprintf_r+0x2a>
 80125f2:	89ab      	ldrh	r3, [r5, #12]
 80125f4:	059a      	lsls	r2, r3, #22
 80125f6:	d402      	bmi.n	80125fe <_vfiprintf_r+0x2a>
 80125f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80125fa:	f7fe faac 	bl	8010b56 <__retarget_lock_acquire_recursive>
 80125fe:	89ab      	ldrh	r3, [r5, #12]
 8012600:	071b      	lsls	r3, r3, #28
 8012602:	d501      	bpl.n	8012608 <_vfiprintf_r+0x34>
 8012604:	692b      	ldr	r3, [r5, #16]
 8012606:	b99b      	cbnz	r3, 8012630 <_vfiprintf_r+0x5c>
 8012608:	4629      	mov	r1, r5
 801260a:	4630      	mov	r0, r6
 801260c:	f000 f93a 	bl	8012884 <__swsetup_r>
 8012610:	b170      	cbz	r0, 8012630 <_vfiprintf_r+0x5c>
 8012612:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012614:	07dc      	lsls	r4, r3, #31
 8012616:	d504      	bpl.n	8012622 <_vfiprintf_r+0x4e>
 8012618:	f04f 30ff 	mov.w	r0, #4294967295
 801261c:	b01d      	add	sp, #116	; 0x74
 801261e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012622:	89ab      	ldrh	r3, [r5, #12]
 8012624:	0598      	lsls	r0, r3, #22
 8012626:	d4f7      	bmi.n	8012618 <_vfiprintf_r+0x44>
 8012628:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801262a:	f7fe fa95 	bl	8010b58 <__retarget_lock_release_recursive>
 801262e:	e7f3      	b.n	8012618 <_vfiprintf_r+0x44>
 8012630:	2300      	movs	r3, #0
 8012632:	9309      	str	r3, [sp, #36]	; 0x24
 8012634:	2320      	movs	r3, #32
 8012636:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801263a:	f8cd 800c 	str.w	r8, [sp, #12]
 801263e:	2330      	movs	r3, #48	; 0x30
 8012640:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80127f4 <_vfiprintf_r+0x220>
 8012644:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012648:	f04f 0901 	mov.w	r9, #1
 801264c:	4623      	mov	r3, r4
 801264e:	469a      	mov	sl, r3
 8012650:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012654:	b10a      	cbz	r2, 801265a <_vfiprintf_r+0x86>
 8012656:	2a25      	cmp	r2, #37	; 0x25
 8012658:	d1f9      	bne.n	801264e <_vfiprintf_r+0x7a>
 801265a:	ebba 0b04 	subs.w	fp, sl, r4
 801265e:	d00b      	beq.n	8012678 <_vfiprintf_r+0xa4>
 8012660:	465b      	mov	r3, fp
 8012662:	4622      	mov	r2, r4
 8012664:	4629      	mov	r1, r5
 8012666:	4630      	mov	r0, r6
 8012668:	f7ff ffa2 	bl	80125b0 <__sfputs_r>
 801266c:	3001      	adds	r0, #1
 801266e:	f000 80a9 	beq.w	80127c4 <_vfiprintf_r+0x1f0>
 8012672:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012674:	445a      	add	r2, fp
 8012676:	9209      	str	r2, [sp, #36]	; 0x24
 8012678:	f89a 3000 	ldrb.w	r3, [sl]
 801267c:	2b00      	cmp	r3, #0
 801267e:	f000 80a1 	beq.w	80127c4 <_vfiprintf_r+0x1f0>
 8012682:	2300      	movs	r3, #0
 8012684:	f04f 32ff 	mov.w	r2, #4294967295
 8012688:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801268c:	f10a 0a01 	add.w	sl, sl, #1
 8012690:	9304      	str	r3, [sp, #16]
 8012692:	9307      	str	r3, [sp, #28]
 8012694:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012698:	931a      	str	r3, [sp, #104]	; 0x68
 801269a:	4654      	mov	r4, sl
 801269c:	2205      	movs	r2, #5
 801269e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80126a2:	4854      	ldr	r0, [pc, #336]	; (80127f4 <_vfiprintf_r+0x220>)
 80126a4:	f7ed fdac 	bl	8000200 <memchr>
 80126a8:	9a04      	ldr	r2, [sp, #16]
 80126aa:	b9d8      	cbnz	r0, 80126e4 <_vfiprintf_r+0x110>
 80126ac:	06d1      	lsls	r1, r2, #27
 80126ae:	bf44      	itt	mi
 80126b0:	2320      	movmi	r3, #32
 80126b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80126b6:	0713      	lsls	r3, r2, #28
 80126b8:	bf44      	itt	mi
 80126ba:	232b      	movmi	r3, #43	; 0x2b
 80126bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80126c0:	f89a 3000 	ldrb.w	r3, [sl]
 80126c4:	2b2a      	cmp	r3, #42	; 0x2a
 80126c6:	d015      	beq.n	80126f4 <_vfiprintf_r+0x120>
 80126c8:	9a07      	ldr	r2, [sp, #28]
 80126ca:	4654      	mov	r4, sl
 80126cc:	2000      	movs	r0, #0
 80126ce:	f04f 0c0a 	mov.w	ip, #10
 80126d2:	4621      	mov	r1, r4
 80126d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80126d8:	3b30      	subs	r3, #48	; 0x30
 80126da:	2b09      	cmp	r3, #9
 80126dc:	d94d      	bls.n	801277a <_vfiprintf_r+0x1a6>
 80126de:	b1b0      	cbz	r0, 801270e <_vfiprintf_r+0x13a>
 80126e0:	9207      	str	r2, [sp, #28]
 80126e2:	e014      	b.n	801270e <_vfiprintf_r+0x13a>
 80126e4:	eba0 0308 	sub.w	r3, r0, r8
 80126e8:	fa09 f303 	lsl.w	r3, r9, r3
 80126ec:	4313      	orrs	r3, r2
 80126ee:	9304      	str	r3, [sp, #16]
 80126f0:	46a2      	mov	sl, r4
 80126f2:	e7d2      	b.n	801269a <_vfiprintf_r+0xc6>
 80126f4:	9b03      	ldr	r3, [sp, #12]
 80126f6:	1d19      	adds	r1, r3, #4
 80126f8:	681b      	ldr	r3, [r3, #0]
 80126fa:	9103      	str	r1, [sp, #12]
 80126fc:	2b00      	cmp	r3, #0
 80126fe:	bfbb      	ittet	lt
 8012700:	425b      	neglt	r3, r3
 8012702:	f042 0202 	orrlt.w	r2, r2, #2
 8012706:	9307      	strge	r3, [sp, #28]
 8012708:	9307      	strlt	r3, [sp, #28]
 801270a:	bfb8      	it	lt
 801270c:	9204      	strlt	r2, [sp, #16]
 801270e:	7823      	ldrb	r3, [r4, #0]
 8012710:	2b2e      	cmp	r3, #46	; 0x2e
 8012712:	d10c      	bne.n	801272e <_vfiprintf_r+0x15a>
 8012714:	7863      	ldrb	r3, [r4, #1]
 8012716:	2b2a      	cmp	r3, #42	; 0x2a
 8012718:	d134      	bne.n	8012784 <_vfiprintf_r+0x1b0>
 801271a:	9b03      	ldr	r3, [sp, #12]
 801271c:	1d1a      	adds	r2, r3, #4
 801271e:	681b      	ldr	r3, [r3, #0]
 8012720:	9203      	str	r2, [sp, #12]
 8012722:	2b00      	cmp	r3, #0
 8012724:	bfb8      	it	lt
 8012726:	f04f 33ff 	movlt.w	r3, #4294967295
 801272a:	3402      	adds	r4, #2
 801272c:	9305      	str	r3, [sp, #20]
 801272e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8012804 <_vfiprintf_r+0x230>
 8012732:	7821      	ldrb	r1, [r4, #0]
 8012734:	2203      	movs	r2, #3
 8012736:	4650      	mov	r0, sl
 8012738:	f7ed fd62 	bl	8000200 <memchr>
 801273c:	b138      	cbz	r0, 801274e <_vfiprintf_r+0x17a>
 801273e:	9b04      	ldr	r3, [sp, #16]
 8012740:	eba0 000a 	sub.w	r0, r0, sl
 8012744:	2240      	movs	r2, #64	; 0x40
 8012746:	4082      	lsls	r2, r0
 8012748:	4313      	orrs	r3, r2
 801274a:	3401      	adds	r4, #1
 801274c:	9304      	str	r3, [sp, #16]
 801274e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012752:	4829      	ldr	r0, [pc, #164]	; (80127f8 <_vfiprintf_r+0x224>)
 8012754:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012758:	2206      	movs	r2, #6
 801275a:	f7ed fd51 	bl	8000200 <memchr>
 801275e:	2800      	cmp	r0, #0
 8012760:	d03f      	beq.n	80127e2 <_vfiprintf_r+0x20e>
 8012762:	4b26      	ldr	r3, [pc, #152]	; (80127fc <_vfiprintf_r+0x228>)
 8012764:	bb1b      	cbnz	r3, 80127ae <_vfiprintf_r+0x1da>
 8012766:	9b03      	ldr	r3, [sp, #12]
 8012768:	3307      	adds	r3, #7
 801276a:	f023 0307 	bic.w	r3, r3, #7
 801276e:	3308      	adds	r3, #8
 8012770:	9303      	str	r3, [sp, #12]
 8012772:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012774:	443b      	add	r3, r7
 8012776:	9309      	str	r3, [sp, #36]	; 0x24
 8012778:	e768      	b.n	801264c <_vfiprintf_r+0x78>
 801277a:	fb0c 3202 	mla	r2, ip, r2, r3
 801277e:	460c      	mov	r4, r1
 8012780:	2001      	movs	r0, #1
 8012782:	e7a6      	b.n	80126d2 <_vfiprintf_r+0xfe>
 8012784:	2300      	movs	r3, #0
 8012786:	3401      	adds	r4, #1
 8012788:	9305      	str	r3, [sp, #20]
 801278a:	4619      	mov	r1, r3
 801278c:	f04f 0c0a 	mov.w	ip, #10
 8012790:	4620      	mov	r0, r4
 8012792:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012796:	3a30      	subs	r2, #48	; 0x30
 8012798:	2a09      	cmp	r2, #9
 801279a:	d903      	bls.n	80127a4 <_vfiprintf_r+0x1d0>
 801279c:	2b00      	cmp	r3, #0
 801279e:	d0c6      	beq.n	801272e <_vfiprintf_r+0x15a>
 80127a0:	9105      	str	r1, [sp, #20]
 80127a2:	e7c4      	b.n	801272e <_vfiprintf_r+0x15a>
 80127a4:	fb0c 2101 	mla	r1, ip, r1, r2
 80127a8:	4604      	mov	r4, r0
 80127aa:	2301      	movs	r3, #1
 80127ac:	e7f0      	b.n	8012790 <_vfiprintf_r+0x1bc>
 80127ae:	ab03      	add	r3, sp, #12
 80127b0:	9300      	str	r3, [sp, #0]
 80127b2:	462a      	mov	r2, r5
 80127b4:	4b12      	ldr	r3, [pc, #72]	; (8012800 <_vfiprintf_r+0x22c>)
 80127b6:	a904      	add	r1, sp, #16
 80127b8:	4630      	mov	r0, r6
 80127ba:	f7fd fc53 	bl	8010064 <_printf_float>
 80127be:	4607      	mov	r7, r0
 80127c0:	1c78      	adds	r0, r7, #1
 80127c2:	d1d6      	bne.n	8012772 <_vfiprintf_r+0x19e>
 80127c4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80127c6:	07d9      	lsls	r1, r3, #31
 80127c8:	d405      	bmi.n	80127d6 <_vfiprintf_r+0x202>
 80127ca:	89ab      	ldrh	r3, [r5, #12]
 80127cc:	059a      	lsls	r2, r3, #22
 80127ce:	d402      	bmi.n	80127d6 <_vfiprintf_r+0x202>
 80127d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80127d2:	f7fe f9c1 	bl	8010b58 <__retarget_lock_release_recursive>
 80127d6:	89ab      	ldrh	r3, [r5, #12]
 80127d8:	065b      	lsls	r3, r3, #25
 80127da:	f53f af1d 	bmi.w	8012618 <_vfiprintf_r+0x44>
 80127de:	9809      	ldr	r0, [sp, #36]	; 0x24
 80127e0:	e71c      	b.n	801261c <_vfiprintf_r+0x48>
 80127e2:	ab03      	add	r3, sp, #12
 80127e4:	9300      	str	r3, [sp, #0]
 80127e6:	462a      	mov	r2, r5
 80127e8:	4b05      	ldr	r3, [pc, #20]	; (8012800 <_vfiprintf_r+0x22c>)
 80127ea:	a904      	add	r1, sp, #16
 80127ec:	4630      	mov	r0, r6
 80127ee:	f7fd fedd 	bl	80105ac <_printf_i>
 80127f2:	e7e4      	b.n	80127be <_vfiprintf_r+0x1ea>
 80127f4:	08014854 	.word	0x08014854
 80127f8:	0801485e 	.word	0x0801485e
 80127fc:	08010065 	.word	0x08010065
 8012800:	080125b1 	.word	0x080125b1
 8012804:	0801485a 	.word	0x0801485a

08012808 <__swbuf_r>:
 8012808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801280a:	460e      	mov	r6, r1
 801280c:	4614      	mov	r4, r2
 801280e:	4605      	mov	r5, r0
 8012810:	b118      	cbz	r0, 801281a <__swbuf_r+0x12>
 8012812:	6a03      	ldr	r3, [r0, #32]
 8012814:	b90b      	cbnz	r3, 801281a <__swbuf_r+0x12>
 8012816:	f7fe f877 	bl	8010908 <__sinit>
 801281a:	69a3      	ldr	r3, [r4, #24]
 801281c:	60a3      	str	r3, [r4, #8]
 801281e:	89a3      	ldrh	r3, [r4, #12]
 8012820:	071a      	lsls	r2, r3, #28
 8012822:	d525      	bpl.n	8012870 <__swbuf_r+0x68>
 8012824:	6923      	ldr	r3, [r4, #16]
 8012826:	b31b      	cbz	r3, 8012870 <__swbuf_r+0x68>
 8012828:	6823      	ldr	r3, [r4, #0]
 801282a:	6922      	ldr	r2, [r4, #16]
 801282c:	1a98      	subs	r0, r3, r2
 801282e:	6963      	ldr	r3, [r4, #20]
 8012830:	b2f6      	uxtb	r6, r6
 8012832:	4283      	cmp	r3, r0
 8012834:	4637      	mov	r7, r6
 8012836:	dc04      	bgt.n	8012842 <__swbuf_r+0x3a>
 8012838:	4621      	mov	r1, r4
 801283a:	4628      	mov	r0, r5
 801283c:	f7ff fdbc 	bl	80123b8 <_fflush_r>
 8012840:	b9e0      	cbnz	r0, 801287c <__swbuf_r+0x74>
 8012842:	68a3      	ldr	r3, [r4, #8]
 8012844:	3b01      	subs	r3, #1
 8012846:	60a3      	str	r3, [r4, #8]
 8012848:	6823      	ldr	r3, [r4, #0]
 801284a:	1c5a      	adds	r2, r3, #1
 801284c:	6022      	str	r2, [r4, #0]
 801284e:	701e      	strb	r6, [r3, #0]
 8012850:	6962      	ldr	r2, [r4, #20]
 8012852:	1c43      	adds	r3, r0, #1
 8012854:	429a      	cmp	r2, r3
 8012856:	d004      	beq.n	8012862 <__swbuf_r+0x5a>
 8012858:	89a3      	ldrh	r3, [r4, #12]
 801285a:	07db      	lsls	r3, r3, #31
 801285c:	d506      	bpl.n	801286c <__swbuf_r+0x64>
 801285e:	2e0a      	cmp	r6, #10
 8012860:	d104      	bne.n	801286c <__swbuf_r+0x64>
 8012862:	4621      	mov	r1, r4
 8012864:	4628      	mov	r0, r5
 8012866:	f7ff fda7 	bl	80123b8 <_fflush_r>
 801286a:	b938      	cbnz	r0, 801287c <__swbuf_r+0x74>
 801286c:	4638      	mov	r0, r7
 801286e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012870:	4621      	mov	r1, r4
 8012872:	4628      	mov	r0, r5
 8012874:	f000 f806 	bl	8012884 <__swsetup_r>
 8012878:	2800      	cmp	r0, #0
 801287a:	d0d5      	beq.n	8012828 <__swbuf_r+0x20>
 801287c:	f04f 37ff 	mov.w	r7, #4294967295
 8012880:	e7f4      	b.n	801286c <__swbuf_r+0x64>
	...

08012884 <__swsetup_r>:
 8012884:	b538      	push	{r3, r4, r5, lr}
 8012886:	4b2a      	ldr	r3, [pc, #168]	; (8012930 <__swsetup_r+0xac>)
 8012888:	4605      	mov	r5, r0
 801288a:	6818      	ldr	r0, [r3, #0]
 801288c:	460c      	mov	r4, r1
 801288e:	b118      	cbz	r0, 8012898 <__swsetup_r+0x14>
 8012890:	6a03      	ldr	r3, [r0, #32]
 8012892:	b90b      	cbnz	r3, 8012898 <__swsetup_r+0x14>
 8012894:	f7fe f838 	bl	8010908 <__sinit>
 8012898:	89a3      	ldrh	r3, [r4, #12]
 801289a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801289e:	0718      	lsls	r0, r3, #28
 80128a0:	d422      	bmi.n	80128e8 <__swsetup_r+0x64>
 80128a2:	06d9      	lsls	r1, r3, #27
 80128a4:	d407      	bmi.n	80128b6 <__swsetup_r+0x32>
 80128a6:	2309      	movs	r3, #9
 80128a8:	602b      	str	r3, [r5, #0]
 80128aa:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80128ae:	81a3      	strh	r3, [r4, #12]
 80128b0:	f04f 30ff 	mov.w	r0, #4294967295
 80128b4:	e034      	b.n	8012920 <__swsetup_r+0x9c>
 80128b6:	0758      	lsls	r0, r3, #29
 80128b8:	d512      	bpl.n	80128e0 <__swsetup_r+0x5c>
 80128ba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80128bc:	b141      	cbz	r1, 80128d0 <__swsetup_r+0x4c>
 80128be:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80128c2:	4299      	cmp	r1, r3
 80128c4:	d002      	beq.n	80128cc <__swsetup_r+0x48>
 80128c6:	4628      	mov	r0, r5
 80128c8:	f7fe ffd0 	bl	801186c <_free_r>
 80128cc:	2300      	movs	r3, #0
 80128ce:	6363      	str	r3, [r4, #52]	; 0x34
 80128d0:	89a3      	ldrh	r3, [r4, #12]
 80128d2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80128d6:	81a3      	strh	r3, [r4, #12]
 80128d8:	2300      	movs	r3, #0
 80128da:	6063      	str	r3, [r4, #4]
 80128dc:	6923      	ldr	r3, [r4, #16]
 80128de:	6023      	str	r3, [r4, #0]
 80128e0:	89a3      	ldrh	r3, [r4, #12]
 80128e2:	f043 0308 	orr.w	r3, r3, #8
 80128e6:	81a3      	strh	r3, [r4, #12]
 80128e8:	6923      	ldr	r3, [r4, #16]
 80128ea:	b94b      	cbnz	r3, 8012900 <__swsetup_r+0x7c>
 80128ec:	89a3      	ldrh	r3, [r4, #12]
 80128ee:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80128f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80128f6:	d003      	beq.n	8012900 <__swsetup_r+0x7c>
 80128f8:	4621      	mov	r1, r4
 80128fa:	4628      	mov	r0, r5
 80128fc:	f000 f884 	bl	8012a08 <__smakebuf_r>
 8012900:	89a0      	ldrh	r0, [r4, #12]
 8012902:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012906:	f010 0301 	ands.w	r3, r0, #1
 801290a:	d00a      	beq.n	8012922 <__swsetup_r+0x9e>
 801290c:	2300      	movs	r3, #0
 801290e:	60a3      	str	r3, [r4, #8]
 8012910:	6963      	ldr	r3, [r4, #20]
 8012912:	425b      	negs	r3, r3
 8012914:	61a3      	str	r3, [r4, #24]
 8012916:	6923      	ldr	r3, [r4, #16]
 8012918:	b943      	cbnz	r3, 801292c <__swsetup_r+0xa8>
 801291a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801291e:	d1c4      	bne.n	80128aa <__swsetup_r+0x26>
 8012920:	bd38      	pop	{r3, r4, r5, pc}
 8012922:	0781      	lsls	r1, r0, #30
 8012924:	bf58      	it	pl
 8012926:	6963      	ldrpl	r3, [r4, #20]
 8012928:	60a3      	str	r3, [r4, #8]
 801292a:	e7f4      	b.n	8012916 <__swsetup_r+0x92>
 801292c:	2000      	movs	r0, #0
 801292e:	e7f7      	b.n	8012920 <__swsetup_r+0x9c>
 8012930:	200000c4 	.word	0x200000c4

08012934 <_raise_r>:
 8012934:	291f      	cmp	r1, #31
 8012936:	b538      	push	{r3, r4, r5, lr}
 8012938:	4604      	mov	r4, r0
 801293a:	460d      	mov	r5, r1
 801293c:	d904      	bls.n	8012948 <_raise_r+0x14>
 801293e:	2316      	movs	r3, #22
 8012940:	6003      	str	r3, [r0, #0]
 8012942:	f04f 30ff 	mov.w	r0, #4294967295
 8012946:	bd38      	pop	{r3, r4, r5, pc}
 8012948:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801294a:	b112      	cbz	r2, 8012952 <_raise_r+0x1e>
 801294c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012950:	b94b      	cbnz	r3, 8012966 <_raise_r+0x32>
 8012952:	4620      	mov	r0, r4
 8012954:	f000 f830 	bl	80129b8 <_getpid_r>
 8012958:	462a      	mov	r2, r5
 801295a:	4601      	mov	r1, r0
 801295c:	4620      	mov	r0, r4
 801295e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012962:	f000 b817 	b.w	8012994 <_kill_r>
 8012966:	2b01      	cmp	r3, #1
 8012968:	d00a      	beq.n	8012980 <_raise_r+0x4c>
 801296a:	1c59      	adds	r1, r3, #1
 801296c:	d103      	bne.n	8012976 <_raise_r+0x42>
 801296e:	2316      	movs	r3, #22
 8012970:	6003      	str	r3, [r0, #0]
 8012972:	2001      	movs	r0, #1
 8012974:	e7e7      	b.n	8012946 <_raise_r+0x12>
 8012976:	2400      	movs	r4, #0
 8012978:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801297c:	4628      	mov	r0, r5
 801297e:	4798      	blx	r3
 8012980:	2000      	movs	r0, #0
 8012982:	e7e0      	b.n	8012946 <_raise_r+0x12>

08012984 <raise>:
 8012984:	4b02      	ldr	r3, [pc, #8]	; (8012990 <raise+0xc>)
 8012986:	4601      	mov	r1, r0
 8012988:	6818      	ldr	r0, [r3, #0]
 801298a:	f7ff bfd3 	b.w	8012934 <_raise_r>
 801298e:	bf00      	nop
 8012990:	200000c4 	.word	0x200000c4

08012994 <_kill_r>:
 8012994:	b538      	push	{r3, r4, r5, lr}
 8012996:	4d07      	ldr	r5, [pc, #28]	; (80129b4 <_kill_r+0x20>)
 8012998:	2300      	movs	r3, #0
 801299a:	4604      	mov	r4, r0
 801299c:	4608      	mov	r0, r1
 801299e:	4611      	mov	r1, r2
 80129a0:	602b      	str	r3, [r5, #0]
 80129a2:	f7f2 fee5 	bl	8005770 <_kill>
 80129a6:	1c43      	adds	r3, r0, #1
 80129a8:	d102      	bne.n	80129b0 <_kill_r+0x1c>
 80129aa:	682b      	ldr	r3, [r5, #0]
 80129ac:	b103      	cbz	r3, 80129b0 <_kill_r+0x1c>
 80129ae:	6023      	str	r3, [r4, #0]
 80129b0:	bd38      	pop	{r3, r4, r5, pc}
 80129b2:	bf00      	nop
 80129b4:	200064fc 	.word	0x200064fc

080129b8 <_getpid_r>:
 80129b8:	f7f2 bed2 	b.w	8005760 <_getpid>

080129bc <__swhatbuf_r>:
 80129bc:	b570      	push	{r4, r5, r6, lr}
 80129be:	460c      	mov	r4, r1
 80129c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80129c4:	2900      	cmp	r1, #0
 80129c6:	b096      	sub	sp, #88	; 0x58
 80129c8:	4615      	mov	r5, r2
 80129ca:	461e      	mov	r6, r3
 80129cc:	da0d      	bge.n	80129ea <__swhatbuf_r+0x2e>
 80129ce:	89a3      	ldrh	r3, [r4, #12]
 80129d0:	f013 0f80 	tst.w	r3, #128	; 0x80
 80129d4:	f04f 0100 	mov.w	r1, #0
 80129d8:	bf0c      	ite	eq
 80129da:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80129de:	2340      	movne	r3, #64	; 0x40
 80129e0:	2000      	movs	r0, #0
 80129e2:	6031      	str	r1, [r6, #0]
 80129e4:	602b      	str	r3, [r5, #0]
 80129e6:	b016      	add	sp, #88	; 0x58
 80129e8:	bd70      	pop	{r4, r5, r6, pc}
 80129ea:	466a      	mov	r2, sp
 80129ec:	f000 f848 	bl	8012a80 <_fstat_r>
 80129f0:	2800      	cmp	r0, #0
 80129f2:	dbec      	blt.n	80129ce <__swhatbuf_r+0x12>
 80129f4:	9901      	ldr	r1, [sp, #4]
 80129f6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80129fa:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80129fe:	4259      	negs	r1, r3
 8012a00:	4159      	adcs	r1, r3
 8012a02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012a06:	e7eb      	b.n	80129e0 <__swhatbuf_r+0x24>

08012a08 <__smakebuf_r>:
 8012a08:	898b      	ldrh	r3, [r1, #12]
 8012a0a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012a0c:	079d      	lsls	r5, r3, #30
 8012a0e:	4606      	mov	r6, r0
 8012a10:	460c      	mov	r4, r1
 8012a12:	d507      	bpl.n	8012a24 <__smakebuf_r+0x1c>
 8012a14:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012a18:	6023      	str	r3, [r4, #0]
 8012a1a:	6123      	str	r3, [r4, #16]
 8012a1c:	2301      	movs	r3, #1
 8012a1e:	6163      	str	r3, [r4, #20]
 8012a20:	b002      	add	sp, #8
 8012a22:	bd70      	pop	{r4, r5, r6, pc}
 8012a24:	ab01      	add	r3, sp, #4
 8012a26:	466a      	mov	r2, sp
 8012a28:	f7ff ffc8 	bl	80129bc <__swhatbuf_r>
 8012a2c:	9900      	ldr	r1, [sp, #0]
 8012a2e:	4605      	mov	r5, r0
 8012a30:	4630      	mov	r0, r6
 8012a32:	f7fd f9eb 	bl	800fe0c <_malloc_r>
 8012a36:	b948      	cbnz	r0, 8012a4c <__smakebuf_r+0x44>
 8012a38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012a3c:	059a      	lsls	r2, r3, #22
 8012a3e:	d4ef      	bmi.n	8012a20 <__smakebuf_r+0x18>
 8012a40:	f023 0303 	bic.w	r3, r3, #3
 8012a44:	f043 0302 	orr.w	r3, r3, #2
 8012a48:	81a3      	strh	r3, [r4, #12]
 8012a4a:	e7e3      	b.n	8012a14 <__smakebuf_r+0xc>
 8012a4c:	89a3      	ldrh	r3, [r4, #12]
 8012a4e:	6020      	str	r0, [r4, #0]
 8012a50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012a54:	81a3      	strh	r3, [r4, #12]
 8012a56:	9b00      	ldr	r3, [sp, #0]
 8012a58:	6163      	str	r3, [r4, #20]
 8012a5a:	9b01      	ldr	r3, [sp, #4]
 8012a5c:	6120      	str	r0, [r4, #16]
 8012a5e:	b15b      	cbz	r3, 8012a78 <__smakebuf_r+0x70>
 8012a60:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012a64:	4630      	mov	r0, r6
 8012a66:	f000 f81d 	bl	8012aa4 <_isatty_r>
 8012a6a:	b128      	cbz	r0, 8012a78 <__smakebuf_r+0x70>
 8012a6c:	89a3      	ldrh	r3, [r4, #12]
 8012a6e:	f023 0303 	bic.w	r3, r3, #3
 8012a72:	f043 0301 	orr.w	r3, r3, #1
 8012a76:	81a3      	strh	r3, [r4, #12]
 8012a78:	89a3      	ldrh	r3, [r4, #12]
 8012a7a:	431d      	orrs	r5, r3
 8012a7c:	81a5      	strh	r5, [r4, #12]
 8012a7e:	e7cf      	b.n	8012a20 <__smakebuf_r+0x18>

08012a80 <_fstat_r>:
 8012a80:	b538      	push	{r3, r4, r5, lr}
 8012a82:	4d07      	ldr	r5, [pc, #28]	; (8012aa0 <_fstat_r+0x20>)
 8012a84:	2300      	movs	r3, #0
 8012a86:	4604      	mov	r4, r0
 8012a88:	4608      	mov	r0, r1
 8012a8a:	4611      	mov	r1, r2
 8012a8c:	602b      	str	r3, [r5, #0]
 8012a8e:	f7f2 fece 	bl	800582e <_fstat>
 8012a92:	1c43      	adds	r3, r0, #1
 8012a94:	d102      	bne.n	8012a9c <_fstat_r+0x1c>
 8012a96:	682b      	ldr	r3, [r5, #0]
 8012a98:	b103      	cbz	r3, 8012a9c <_fstat_r+0x1c>
 8012a9a:	6023      	str	r3, [r4, #0]
 8012a9c:	bd38      	pop	{r3, r4, r5, pc}
 8012a9e:	bf00      	nop
 8012aa0:	200064fc 	.word	0x200064fc

08012aa4 <_isatty_r>:
 8012aa4:	b538      	push	{r3, r4, r5, lr}
 8012aa6:	4d06      	ldr	r5, [pc, #24]	; (8012ac0 <_isatty_r+0x1c>)
 8012aa8:	2300      	movs	r3, #0
 8012aaa:	4604      	mov	r4, r0
 8012aac:	4608      	mov	r0, r1
 8012aae:	602b      	str	r3, [r5, #0]
 8012ab0:	f7f2 fecd 	bl	800584e <_isatty>
 8012ab4:	1c43      	adds	r3, r0, #1
 8012ab6:	d102      	bne.n	8012abe <_isatty_r+0x1a>
 8012ab8:	682b      	ldr	r3, [r5, #0]
 8012aba:	b103      	cbz	r3, 8012abe <_isatty_r+0x1a>
 8012abc:	6023      	str	r3, [r4, #0]
 8012abe:	bd38      	pop	{r3, r4, r5, pc}
 8012ac0:	200064fc 	.word	0x200064fc

08012ac4 <asinf>:
 8012ac4:	b508      	push	{r3, lr}
 8012ac6:	ed2d 8b02 	vpush	{d8}
 8012aca:	eeb0 8a40 	vmov.f32	s16, s0
 8012ace:	f000 f9cf 	bl	8012e70 <__ieee754_asinf>
 8012ad2:	eeb4 8a48 	vcmp.f32	s16, s16
 8012ad6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ada:	eef0 8a40 	vmov.f32	s17, s0
 8012ade:	d615      	bvs.n	8012b0c <asinf+0x48>
 8012ae0:	eeb0 0a48 	vmov.f32	s0, s16
 8012ae4:	f000 f8b8 	bl	8012c58 <fabsf>
 8012ae8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8012aec:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8012af0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012af4:	dd0a      	ble.n	8012b0c <asinf+0x48>
 8012af6:	f7fe f803 	bl	8010b00 <__errno>
 8012afa:	ecbd 8b02 	vpop	{d8}
 8012afe:	2321      	movs	r3, #33	; 0x21
 8012b00:	6003      	str	r3, [r0, #0]
 8012b02:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8012b06:	4804      	ldr	r0, [pc, #16]	; (8012b18 <asinf+0x54>)
 8012b08:	f000 b902 	b.w	8012d10 <nanf>
 8012b0c:	eeb0 0a68 	vmov.f32	s0, s17
 8012b10:	ecbd 8b02 	vpop	{d8}
 8012b14:	bd08      	pop	{r3, pc}
 8012b16:	bf00      	nop
 8012b18:	080148aa 	.word	0x080148aa

08012b1c <atan2f>:
 8012b1c:	f000 ba8e 	b.w	801303c <__ieee754_atan2f>

08012b20 <powf>:
 8012b20:	b508      	push	{r3, lr}
 8012b22:	ed2d 8b04 	vpush	{d8-d9}
 8012b26:	eeb0 8a60 	vmov.f32	s16, s1
 8012b2a:	eeb0 9a40 	vmov.f32	s18, s0
 8012b2e:	f000 fb25 	bl	801317c <__ieee754_powf>
 8012b32:	eeb4 8a48 	vcmp.f32	s16, s16
 8012b36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b3a:	eef0 8a40 	vmov.f32	s17, s0
 8012b3e:	d63e      	bvs.n	8012bbe <powf+0x9e>
 8012b40:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8012b44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b48:	d112      	bne.n	8012b70 <powf+0x50>
 8012b4a:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8012b4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b52:	d039      	beq.n	8012bc8 <powf+0xa8>
 8012b54:	eeb0 0a48 	vmov.f32	s0, s16
 8012b58:	f000 f8cc 	bl	8012cf4 <finitef>
 8012b5c:	b378      	cbz	r0, 8012bbe <powf+0x9e>
 8012b5e:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8012b62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b66:	d52a      	bpl.n	8012bbe <powf+0x9e>
 8012b68:	f7fd ffca 	bl	8010b00 <__errno>
 8012b6c:	2322      	movs	r3, #34	; 0x22
 8012b6e:	e014      	b.n	8012b9a <powf+0x7a>
 8012b70:	f000 f8c0 	bl	8012cf4 <finitef>
 8012b74:	b998      	cbnz	r0, 8012b9e <powf+0x7e>
 8012b76:	eeb0 0a49 	vmov.f32	s0, s18
 8012b7a:	f000 f8bb 	bl	8012cf4 <finitef>
 8012b7e:	b170      	cbz	r0, 8012b9e <powf+0x7e>
 8012b80:	eeb0 0a48 	vmov.f32	s0, s16
 8012b84:	f000 f8b6 	bl	8012cf4 <finitef>
 8012b88:	b148      	cbz	r0, 8012b9e <powf+0x7e>
 8012b8a:	eef4 8a68 	vcmp.f32	s17, s17
 8012b8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b92:	d7e9      	bvc.n	8012b68 <powf+0x48>
 8012b94:	f7fd ffb4 	bl	8010b00 <__errno>
 8012b98:	2321      	movs	r3, #33	; 0x21
 8012b9a:	6003      	str	r3, [r0, #0]
 8012b9c:	e00f      	b.n	8012bbe <powf+0x9e>
 8012b9e:	eef5 8a40 	vcmp.f32	s17, #0.0
 8012ba2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ba6:	d10a      	bne.n	8012bbe <powf+0x9e>
 8012ba8:	eeb0 0a49 	vmov.f32	s0, s18
 8012bac:	f000 f8a2 	bl	8012cf4 <finitef>
 8012bb0:	b128      	cbz	r0, 8012bbe <powf+0x9e>
 8012bb2:	eeb0 0a48 	vmov.f32	s0, s16
 8012bb6:	f000 f89d 	bl	8012cf4 <finitef>
 8012bba:	2800      	cmp	r0, #0
 8012bbc:	d1d4      	bne.n	8012b68 <powf+0x48>
 8012bbe:	eeb0 0a68 	vmov.f32	s0, s17
 8012bc2:	ecbd 8b04 	vpop	{d8-d9}
 8012bc6:	bd08      	pop	{r3, pc}
 8012bc8:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8012bcc:	e7f7      	b.n	8012bbe <powf+0x9e>
	...

08012bd0 <cosf>:
 8012bd0:	ee10 3a10 	vmov	r3, s0
 8012bd4:	b507      	push	{r0, r1, r2, lr}
 8012bd6:	4a1e      	ldr	r2, [pc, #120]	; (8012c50 <cosf+0x80>)
 8012bd8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012bdc:	4293      	cmp	r3, r2
 8012bde:	dc06      	bgt.n	8012bee <cosf+0x1e>
 8012be0:	eddf 0a1c 	vldr	s1, [pc, #112]	; 8012c54 <cosf+0x84>
 8012be4:	b003      	add	sp, #12
 8012be6:	f85d eb04 	ldr.w	lr, [sp], #4
 8012bea:	f000 b89b 	b.w	8012d24 <__kernel_cosf>
 8012bee:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8012bf2:	db04      	blt.n	8012bfe <cosf+0x2e>
 8012bf4:	ee30 0a40 	vsub.f32	s0, s0, s0
 8012bf8:	b003      	add	sp, #12
 8012bfa:	f85d fb04 	ldr.w	pc, [sp], #4
 8012bfe:	4668      	mov	r0, sp
 8012c00:	f000 fd86 	bl	8013710 <__ieee754_rem_pio2f>
 8012c04:	f000 0003 	and.w	r0, r0, #3
 8012c08:	2801      	cmp	r0, #1
 8012c0a:	d009      	beq.n	8012c20 <cosf+0x50>
 8012c0c:	2802      	cmp	r0, #2
 8012c0e:	d010      	beq.n	8012c32 <cosf+0x62>
 8012c10:	b9b0      	cbnz	r0, 8012c40 <cosf+0x70>
 8012c12:	eddd 0a01 	vldr	s1, [sp, #4]
 8012c16:	ed9d 0a00 	vldr	s0, [sp]
 8012c1a:	f000 f883 	bl	8012d24 <__kernel_cosf>
 8012c1e:	e7eb      	b.n	8012bf8 <cosf+0x28>
 8012c20:	eddd 0a01 	vldr	s1, [sp, #4]
 8012c24:	ed9d 0a00 	vldr	s0, [sp]
 8012c28:	f000 f8da 	bl	8012de0 <__kernel_sinf>
 8012c2c:	eeb1 0a40 	vneg.f32	s0, s0
 8012c30:	e7e2      	b.n	8012bf8 <cosf+0x28>
 8012c32:	eddd 0a01 	vldr	s1, [sp, #4]
 8012c36:	ed9d 0a00 	vldr	s0, [sp]
 8012c3a:	f000 f873 	bl	8012d24 <__kernel_cosf>
 8012c3e:	e7f5      	b.n	8012c2c <cosf+0x5c>
 8012c40:	eddd 0a01 	vldr	s1, [sp, #4]
 8012c44:	ed9d 0a00 	vldr	s0, [sp]
 8012c48:	2001      	movs	r0, #1
 8012c4a:	f000 f8c9 	bl	8012de0 <__kernel_sinf>
 8012c4e:	e7d3      	b.n	8012bf8 <cosf+0x28>
 8012c50:	3f490fd8 	.word	0x3f490fd8
 8012c54:	00000000 	.word	0x00000000

08012c58 <fabsf>:
 8012c58:	ee10 3a10 	vmov	r3, s0
 8012c5c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012c60:	ee00 3a10 	vmov	s0, r3
 8012c64:	4770      	bx	lr
	...

08012c68 <sinf>:
 8012c68:	ee10 3a10 	vmov	r3, s0
 8012c6c:	b507      	push	{r0, r1, r2, lr}
 8012c6e:	4a1f      	ldr	r2, [pc, #124]	; (8012cec <sinf+0x84>)
 8012c70:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012c74:	4293      	cmp	r3, r2
 8012c76:	dc07      	bgt.n	8012c88 <sinf+0x20>
 8012c78:	eddf 0a1d 	vldr	s1, [pc, #116]	; 8012cf0 <sinf+0x88>
 8012c7c:	2000      	movs	r0, #0
 8012c7e:	b003      	add	sp, #12
 8012c80:	f85d eb04 	ldr.w	lr, [sp], #4
 8012c84:	f000 b8ac 	b.w	8012de0 <__kernel_sinf>
 8012c88:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8012c8c:	db04      	blt.n	8012c98 <sinf+0x30>
 8012c8e:	ee30 0a40 	vsub.f32	s0, s0, s0
 8012c92:	b003      	add	sp, #12
 8012c94:	f85d fb04 	ldr.w	pc, [sp], #4
 8012c98:	4668      	mov	r0, sp
 8012c9a:	f000 fd39 	bl	8013710 <__ieee754_rem_pio2f>
 8012c9e:	f000 0003 	and.w	r0, r0, #3
 8012ca2:	2801      	cmp	r0, #1
 8012ca4:	d00a      	beq.n	8012cbc <sinf+0x54>
 8012ca6:	2802      	cmp	r0, #2
 8012ca8:	d00f      	beq.n	8012cca <sinf+0x62>
 8012caa:	b9c0      	cbnz	r0, 8012cde <sinf+0x76>
 8012cac:	eddd 0a01 	vldr	s1, [sp, #4]
 8012cb0:	ed9d 0a00 	vldr	s0, [sp]
 8012cb4:	2001      	movs	r0, #1
 8012cb6:	f000 f893 	bl	8012de0 <__kernel_sinf>
 8012cba:	e7ea      	b.n	8012c92 <sinf+0x2a>
 8012cbc:	eddd 0a01 	vldr	s1, [sp, #4]
 8012cc0:	ed9d 0a00 	vldr	s0, [sp]
 8012cc4:	f000 f82e 	bl	8012d24 <__kernel_cosf>
 8012cc8:	e7e3      	b.n	8012c92 <sinf+0x2a>
 8012cca:	eddd 0a01 	vldr	s1, [sp, #4]
 8012cce:	ed9d 0a00 	vldr	s0, [sp]
 8012cd2:	2001      	movs	r0, #1
 8012cd4:	f000 f884 	bl	8012de0 <__kernel_sinf>
 8012cd8:	eeb1 0a40 	vneg.f32	s0, s0
 8012cdc:	e7d9      	b.n	8012c92 <sinf+0x2a>
 8012cde:	eddd 0a01 	vldr	s1, [sp, #4]
 8012ce2:	ed9d 0a00 	vldr	s0, [sp]
 8012ce6:	f000 f81d 	bl	8012d24 <__kernel_cosf>
 8012cea:	e7f5      	b.n	8012cd8 <sinf+0x70>
 8012cec:	3f490fd8 	.word	0x3f490fd8
 8012cf0:	00000000 	.word	0x00000000

08012cf4 <finitef>:
 8012cf4:	b082      	sub	sp, #8
 8012cf6:	ed8d 0a01 	vstr	s0, [sp, #4]
 8012cfa:	9801      	ldr	r0, [sp, #4]
 8012cfc:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8012d00:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8012d04:	bfac      	ite	ge
 8012d06:	2000      	movge	r0, #0
 8012d08:	2001      	movlt	r0, #1
 8012d0a:	b002      	add	sp, #8
 8012d0c:	4770      	bx	lr
	...

08012d10 <nanf>:
 8012d10:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8012d18 <nanf+0x8>
 8012d14:	4770      	bx	lr
 8012d16:	bf00      	nop
 8012d18:	7fc00000 	.word	0x7fc00000

08012d1c <__ieee754_sqrtf>:
 8012d1c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8012d20:	4770      	bx	lr
	...

08012d24 <__kernel_cosf>:
 8012d24:	ee10 3a10 	vmov	r3, s0
 8012d28:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012d2c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8012d30:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8012d34:	da05      	bge.n	8012d42 <__kernel_cosf+0x1e>
 8012d36:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8012d3a:	ee17 2a90 	vmov	r2, s15
 8012d3e:	2a00      	cmp	r2, #0
 8012d40:	d03b      	beq.n	8012dba <__kernel_cosf+0x96>
 8012d42:	ee20 7a00 	vmul.f32	s14, s0, s0
 8012d46:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8012dc0 <__kernel_cosf+0x9c>
 8012d4a:	ed9f 6a1e 	vldr	s12, [pc, #120]	; 8012dc4 <__kernel_cosf+0xa0>
 8012d4e:	4a1e      	ldr	r2, [pc, #120]	; (8012dc8 <__kernel_cosf+0xa4>)
 8012d50:	eea7 6a27 	vfma.f32	s12, s14, s15
 8012d54:	4293      	cmp	r3, r2
 8012d56:	eddf 7a1d 	vldr	s15, [pc, #116]	; 8012dcc <__kernel_cosf+0xa8>
 8012d5a:	eee6 7a07 	vfma.f32	s15, s12, s14
 8012d5e:	ed9f 6a1c 	vldr	s12, [pc, #112]	; 8012dd0 <__kernel_cosf+0xac>
 8012d62:	eea7 6a87 	vfma.f32	s12, s15, s14
 8012d66:	eddf 7a1b 	vldr	s15, [pc, #108]	; 8012dd4 <__kernel_cosf+0xb0>
 8012d6a:	eee6 7a07 	vfma.f32	s15, s12, s14
 8012d6e:	ed9f 6a1a 	vldr	s12, [pc, #104]	; 8012dd8 <__kernel_cosf+0xb4>
 8012d72:	eea7 6a87 	vfma.f32	s12, s15, s14
 8012d76:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 8012d7a:	ee26 6a07 	vmul.f32	s12, s12, s14
 8012d7e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8012d82:	eee7 0a06 	vfma.f32	s1, s14, s12
 8012d86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012d8a:	dc04      	bgt.n	8012d96 <__kernel_cosf+0x72>
 8012d8c:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8012d90:	ee36 0ae7 	vsub.f32	s0, s13, s15
 8012d94:	4770      	bx	lr
 8012d96:	4a11      	ldr	r2, [pc, #68]	; (8012ddc <__kernel_cosf+0xb8>)
 8012d98:	4293      	cmp	r3, r2
 8012d9a:	bfda      	itte	le
 8012d9c:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8012da0:	ee07 3a10 	vmovle	s14, r3
 8012da4:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 8012da8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012dac:	ee36 0ac7 	vsub.f32	s0, s13, s14
 8012db0:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8012db4:	ee30 0a67 	vsub.f32	s0, s0, s15
 8012db8:	4770      	bx	lr
 8012dba:	eeb0 0a66 	vmov.f32	s0, s13
 8012dbe:	4770      	bx	lr
 8012dc0:	ad47d74e 	.word	0xad47d74e
 8012dc4:	310f74f6 	.word	0x310f74f6
 8012dc8:	3e999999 	.word	0x3e999999
 8012dcc:	b493f27c 	.word	0xb493f27c
 8012dd0:	37d00d01 	.word	0x37d00d01
 8012dd4:	bab60b61 	.word	0xbab60b61
 8012dd8:	3d2aaaab 	.word	0x3d2aaaab
 8012ddc:	3f480000 	.word	0x3f480000

08012de0 <__kernel_sinf>:
 8012de0:	ee10 3a10 	vmov	r3, s0
 8012de4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012de8:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8012dec:	da04      	bge.n	8012df8 <__kernel_sinf+0x18>
 8012dee:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8012df2:	ee17 3a90 	vmov	r3, s15
 8012df6:	b35b      	cbz	r3, 8012e50 <__kernel_sinf+0x70>
 8012df8:	ee20 7a00 	vmul.f32	s14, s0, s0
 8012dfc:	eddf 7a15 	vldr	s15, [pc, #84]	; 8012e54 <__kernel_sinf+0x74>
 8012e00:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8012e58 <__kernel_sinf+0x78>
 8012e04:	eea7 6a27 	vfma.f32	s12, s14, s15
 8012e08:	eddf 7a14 	vldr	s15, [pc, #80]	; 8012e5c <__kernel_sinf+0x7c>
 8012e0c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8012e10:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8012e60 <__kernel_sinf+0x80>
 8012e14:	eea7 6a87 	vfma.f32	s12, s15, s14
 8012e18:	eddf 7a12 	vldr	s15, [pc, #72]	; 8012e64 <__kernel_sinf+0x84>
 8012e1c:	ee60 6a07 	vmul.f32	s13, s0, s14
 8012e20:	eee6 7a07 	vfma.f32	s15, s12, s14
 8012e24:	b930      	cbnz	r0, 8012e34 <__kernel_sinf+0x54>
 8012e26:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8012e68 <__kernel_sinf+0x88>
 8012e2a:	eea7 6a27 	vfma.f32	s12, s14, s15
 8012e2e:	eea6 0a26 	vfma.f32	s0, s12, s13
 8012e32:	4770      	bx	lr
 8012e34:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8012e38:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8012e3c:	eee0 7a86 	vfma.f32	s15, s1, s12
 8012e40:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8012e44:	eddf 7a09 	vldr	s15, [pc, #36]	; 8012e6c <__kernel_sinf+0x8c>
 8012e48:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8012e4c:	ee30 0a60 	vsub.f32	s0, s0, s1
 8012e50:	4770      	bx	lr
 8012e52:	bf00      	nop
 8012e54:	2f2ec9d3 	.word	0x2f2ec9d3
 8012e58:	b2d72f34 	.word	0xb2d72f34
 8012e5c:	3638ef1b 	.word	0x3638ef1b
 8012e60:	b9500d01 	.word	0xb9500d01
 8012e64:	3c088889 	.word	0x3c088889
 8012e68:	be2aaaab 	.word	0xbe2aaaab
 8012e6c:	3e2aaaab 	.word	0x3e2aaaab

08012e70 <__ieee754_asinf>:
 8012e70:	b538      	push	{r3, r4, r5, lr}
 8012e72:	ee10 5a10 	vmov	r5, s0
 8012e76:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8012e7a:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8012e7e:	ed2d 8b04 	vpush	{d8-d9}
 8012e82:	d10c      	bne.n	8012e9e <__ieee754_asinf+0x2e>
 8012e84:	eddf 7a5d 	vldr	s15, [pc, #372]	; 8012ffc <__ieee754_asinf+0x18c>
 8012e88:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8013000 <__ieee754_asinf+0x190>
 8012e8c:	ee60 7a27 	vmul.f32	s15, s0, s15
 8012e90:	eee0 7a07 	vfma.f32	s15, s0, s14
 8012e94:	eeb0 0a67 	vmov.f32	s0, s15
 8012e98:	ecbd 8b04 	vpop	{d8-d9}
 8012e9c:	bd38      	pop	{r3, r4, r5, pc}
 8012e9e:	dd04      	ble.n	8012eaa <__ieee754_asinf+0x3a>
 8012ea0:	ee70 7a40 	vsub.f32	s15, s0, s0
 8012ea4:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8012ea8:	e7f6      	b.n	8012e98 <__ieee754_asinf+0x28>
 8012eaa:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8012eae:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8012eb2:	da0b      	bge.n	8012ecc <__ieee754_asinf+0x5c>
 8012eb4:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 8012eb8:	da52      	bge.n	8012f60 <__ieee754_asinf+0xf0>
 8012eba:	eddf 7a52 	vldr	s15, [pc, #328]	; 8013004 <__ieee754_asinf+0x194>
 8012ebe:	ee70 7a27 	vadd.f32	s15, s0, s15
 8012ec2:	eef4 7ae8 	vcmpe.f32	s15, s17
 8012ec6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012eca:	dce5      	bgt.n	8012e98 <__ieee754_asinf+0x28>
 8012ecc:	f7ff fec4 	bl	8012c58 <fabsf>
 8012ed0:	ee38 0ac0 	vsub.f32	s0, s17, s0
 8012ed4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8012ed8:	ee20 8a27 	vmul.f32	s16, s0, s15
 8012edc:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8013008 <__ieee754_asinf+0x198>
 8012ee0:	eddf 7a4a 	vldr	s15, [pc, #296]	; 801300c <__ieee754_asinf+0x19c>
 8012ee4:	ed9f 9a4a 	vldr	s18, [pc, #296]	; 8013010 <__ieee754_asinf+0x1a0>
 8012ee8:	eea8 7a27 	vfma.f32	s14, s16, s15
 8012eec:	eddf 7a49 	vldr	s15, [pc, #292]	; 8013014 <__ieee754_asinf+0x1a4>
 8012ef0:	eee7 7a08 	vfma.f32	s15, s14, s16
 8012ef4:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8013018 <__ieee754_asinf+0x1a8>
 8012ef8:	eea7 7a88 	vfma.f32	s14, s15, s16
 8012efc:	eddf 7a47 	vldr	s15, [pc, #284]	; 801301c <__ieee754_asinf+0x1ac>
 8012f00:	eee7 7a08 	vfma.f32	s15, s14, s16
 8012f04:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8013020 <__ieee754_asinf+0x1b0>
 8012f08:	eea7 9a88 	vfma.f32	s18, s15, s16
 8012f0c:	eddf 7a45 	vldr	s15, [pc, #276]	; 8013024 <__ieee754_asinf+0x1b4>
 8012f10:	eee8 7a07 	vfma.f32	s15, s16, s14
 8012f14:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8013028 <__ieee754_asinf+0x1b8>
 8012f18:	eea7 7a88 	vfma.f32	s14, s15, s16
 8012f1c:	eddf 7a43 	vldr	s15, [pc, #268]	; 801302c <__ieee754_asinf+0x1bc>
 8012f20:	eee7 7a08 	vfma.f32	s15, s14, s16
 8012f24:	eeb0 0a48 	vmov.f32	s0, s16
 8012f28:	eee7 8a88 	vfma.f32	s17, s15, s16
 8012f2c:	f7ff fef6 	bl	8012d1c <__ieee754_sqrtf>
 8012f30:	4b3f      	ldr	r3, [pc, #252]	; (8013030 <__ieee754_asinf+0x1c0>)
 8012f32:	ee29 9a08 	vmul.f32	s18, s18, s16
 8012f36:	429c      	cmp	r4, r3
 8012f38:	ee89 6a28 	vdiv.f32	s12, s18, s17
 8012f3c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8012f40:	dd3d      	ble.n	8012fbe <__ieee754_asinf+0x14e>
 8012f42:	eea0 0a06 	vfma.f32	s0, s0, s12
 8012f46:	eddf 7a3b 	vldr	s15, [pc, #236]	; 8013034 <__ieee754_asinf+0x1c4>
 8012f4a:	eee0 7a26 	vfma.f32	s15, s0, s13
 8012f4e:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8013000 <__ieee754_asinf+0x190>
 8012f52:	ee30 0a67 	vsub.f32	s0, s0, s15
 8012f56:	2d00      	cmp	r5, #0
 8012f58:	bfd8      	it	le
 8012f5a:	eeb1 0a40 	vnegle.f32	s0, s0
 8012f5e:	e79b      	b.n	8012e98 <__ieee754_asinf+0x28>
 8012f60:	ee60 7a00 	vmul.f32	s15, s0, s0
 8012f64:	eddf 6a29 	vldr	s13, [pc, #164]	; 801300c <__ieee754_asinf+0x19c>
 8012f68:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8013008 <__ieee754_asinf+0x198>
 8012f6c:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 8013020 <__ieee754_asinf+0x1b0>
 8012f70:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8012f74:	eddf 6a27 	vldr	s13, [pc, #156]	; 8013014 <__ieee754_asinf+0x1a4>
 8012f78:	eee7 6a27 	vfma.f32	s13, s14, s15
 8012f7c:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8013018 <__ieee754_asinf+0x1a8>
 8012f80:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8012f84:	eddf 6a25 	vldr	s13, [pc, #148]	; 801301c <__ieee754_asinf+0x1ac>
 8012f88:	eee7 6a27 	vfma.f32	s13, s14, s15
 8012f8c:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8013010 <__ieee754_asinf+0x1a0>
 8012f90:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8012f94:	eddf 6a23 	vldr	s13, [pc, #140]	; 8013024 <__ieee754_asinf+0x1b4>
 8012f98:	eee7 6a86 	vfma.f32	s13, s15, s12
 8012f9c:	ed9f 6a22 	vldr	s12, [pc, #136]	; 8013028 <__ieee754_asinf+0x1b8>
 8012fa0:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8012fa4:	eddf 6a21 	vldr	s13, [pc, #132]	; 801302c <__ieee754_asinf+0x1bc>
 8012fa8:	eee6 6a27 	vfma.f32	s13, s12, s15
 8012fac:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012fb0:	eee6 8aa7 	vfma.f32	s17, s13, s15
 8012fb4:	eec7 7a28 	vdiv.f32	s15, s14, s17
 8012fb8:	eea0 0a27 	vfma.f32	s0, s0, s15
 8012fbc:	e76c      	b.n	8012e98 <__ieee754_asinf+0x28>
 8012fbe:	ee10 3a10 	vmov	r3, s0
 8012fc2:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8012fc6:	f023 030f 	bic.w	r3, r3, #15
 8012fca:	ee07 3a10 	vmov	s14, r3
 8012fce:	eea7 8a47 	vfms.f32	s16, s14, s14
 8012fd2:	ee70 7a07 	vadd.f32	s15, s0, s14
 8012fd6:	ee30 0a00 	vadd.f32	s0, s0, s0
 8012fda:	eec8 5a27 	vdiv.f32	s11, s16, s15
 8012fde:	eddf 7a07 	vldr	s15, [pc, #28]	; 8012ffc <__ieee754_asinf+0x18c>
 8012fe2:	eee5 7ae6 	vfms.f32	s15, s11, s13
 8012fe6:	eed0 7a06 	vfnms.f32	s15, s0, s12
 8012fea:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8013038 <__ieee754_asinf+0x1c8>
 8012fee:	eeb0 6a40 	vmov.f32	s12, s0
 8012ff2:	eea7 6a66 	vfms.f32	s12, s14, s13
 8012ff6:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8012ffa:	e7aa      	b.n	8012f52 <__ieee754_asinf+0xe2>
 8012ffc:	b33bbd2e 	.word	0xb33bbd2e
 8013000:	3fc90fdb 	.word	0x3fc90fdb
 8013004:	7149f2ca 	.word	0x7149f2ca
 8013008:	3a4f7f04 	.word	0x3a4f7f04
 801300c:	3811ef08 	.word	0x3811ef08
 8013010:	3e2aaaab 	.word	0x3e2aaaab
 8013014:	bd241146 	.word	0xbd241146
 8013018:	3e4e0aa8 	.word	0x3e4e0aa8
 801301c:	bea6b090 	.word	0xbea6b090
 8013020:	3d9dc62e 	.word	0x3d9dc62e
 8013024:	bf303361 	.word	0xbf303361
 8013028:	4001572d 	.word	0x4001572d
 801302c:	c019d139 	.word	0xc019d139
 8013030:	3f799999 	.word	0x3f799999
 8013034:	333bbd2e 	.word	0x333bbd2e
 8013038:	3f490fdb 	.word	0x3f490fdb

0801303c <__ieee754_atan2f>:
 801303c:	ee10 2a90 	vmov	r2, s1
 8013040:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8013044:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8013048:	b510      	push	{r4, lr}
 801304a:	eef0 7a40 	vmov.f32	s15, s0
 801304e:	dc06      	bgt.n	801305e <__ieee754_atan2f+0x22>
 8013050:	ee10 0a10 	vmov	r0, s0
 8013054:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8013058:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801305c:	dd04      	ble.n	8013068 <__ieee754_atan2f+0x2c>
 801305e:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8013062:	eeb0 0a67 	vmov.f32	s0, s15
 8013066:	bd10      	pop	{r4, pc}
 8013068:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 801306c:	d103      	bne.n	8013076 <__ieee754_atan2f+0x3a>
 801306e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013072:	f000 bc79 	b.w	8013968 <atanf>
 8013076:	1794      	asrs	r4, r2, #30
 8013078:	f004 0402 	and.w	r4, r4, #2
 801307c:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8013080:	b943      	cbnz	r3, 8013094 <__ieee754_atan2f+0x58>
 8013082:	2c02      	cmp	r4, #2
 8013084:	d05e      	beq.n	8013144 <__ieee754_atan2f+0x108>
 8013086:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8013158 <__ieee754_atan2f+0x11c>
 801308a:	2c03      	cmp	r4, #3
 801308c:	bf08      	it	eq
 801308e:	eef0 7a47 	vmoveq.f32	s15, s14
 8013092:	e7e6      	b.n	8013062 <__ieee754_atan2f+0x26>
 8013094:	b941      	cbnz	r1, 80130a8 <__ieee754_atan2f+0x6c>
 8013096:	eddf 7a31 	vldr	s15, [pc, #196]	; 801315c <__ieee754_atan2f+0x120>
 801309a:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8013160 <__ieee754_atan2f+0x124>
 801309e:	2800      	cmp	r0, #0
 80130a0:	bfb8      	it	lt
 80130a2:	eef0 7a47 	vmovlt.f32	s15, s14
 80130a6:	e7dc      	b.n	8013062 <__ieee754_atan2f+0x26>
 80130a8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80130ac:	d110      	bne.n	80130d0 <__ieee754_atan2f+0x94>
 80130ae:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80130b2:	f104 34ff 	add.w	r4, r4, #4294967295
 80130b6:	d107      	bne.n	80130c8 <__ieee754_atan2f+0x8c>
 80130b8:	2c02      	cmp	r4, #2
 80130ba:	d846      	bhi.n	801314a <__ieee754_atan2f+0x10e>
 80130bc:	4b29      	ldr	r3, [pc, #164]	; (8013164 <__ieee754_atan2f+0x128>)
 80130be:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80130c2:	edd3 7a00 	vldr	s15, [r3]
 80130c6:	e7cc      	b.n	8013062 <__ieee754_atan2f+0x26>
 80130c8:	2c02      	cmp	r4, #2
 80130ca:	d841      	bhi.n	8013150 <__ieee754_atan2f+0x114>
 80130cc:	4b26      	ldr	r3, [pc, #152]	; (8013168 <__ieee754_atan2f+0x12c>)
 80130ce:	e7f6      	b.n	80130be <__ieee754_atan2f+0x82>
 80130d0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80130d4:	d0df      	beq.n	8013096 <__ieee754_atan2f+0x5a>
 80130d6:	1a5b      	subs	r3, r3, r1
 80130d8:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 80130dc:	ea4f 51e3 	mov.w	r1, r3, asr #23
 80130e0:	da1a      	bge.n	8013118 <__ieee754_atan2f+0xdc>
 80130e2:	2a00      	cmp	r2, #0
 80130e4:	da01      	bge.n	80130ea <__ieee754_atan2f+0xae>
 80130e6:	313c      	adds	r1, #60	; 0x3c
 80130e8:	db19      	blt.n	801311e <__ieee754_atan2f+0xe2>
 80130ea:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 80130ee:	f7ff fdb3 	bl	8012c58 <fabsf>
 80130f2:	f000 fc39 	bl	8013968 <atanf>
 80130f6:	eef0 7a40 	vmov.f32	s15, s0
 80130fa:	2c01      	cmp	r4, #1
 80130fc:	d012      	beq.n	8013124 <__ieee754_atan2f+0xe8>
 80130fe:	2c02      	cmp	r4, #2
 8013100:	d017      	beq.n	8013132 <__ieee754_atan2f+0xf6>
 8013102:	2c00      	cmp	r4, #0
 8013104:	d0ad      	beq.n	8013062 <__ieee754_atan2f+0x26>
 8013106:	ed9f 7a19 	vldr	s14, [pc, #100]	; 801316c <__ieee754_atan2f+0x130>
 801310a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801310e:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8013170 <__ieee754_atan2f+0x134>
 8013112:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013116:	e7a4      	b.n	8013062 <__ieee754_atan2f+0x26>
 8013118:	eddf 7a10 	vldr	s15, [pc, #64]	; 801315c <__ieee754_atan2f+0x120>
 801311c:	e7ed      	b.n	80130fa <__ieee754_atan2f+0xbe>
 801311e:	eddf 7a15 	vldr	s15, [pc, #84]	; 8013174 <__ieee754_atan2f+0x138>
 8013122:	e7ea      	b.n	80130fa <__ieee754_atan2f+0xbe>
 8013124:	ee17 3a90 	vmov	r3, s15
 8013128:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801312c:	ee07 3a90 	vmov	s15, r3
 8013130:	e797      	b.n	8013062 <__ieee754_atan2f+0x26>
 8013132:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 801316c <__ieee754_atan2f+0x130>
 8013136:	ee77 7a87 	vadd.f32	s15, s15, s14
 801313a:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8013170 <__ieee754_atan2f+0x134>
 801313e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013142:	e78e      	b.n	8013062 <__ieee754_atan2f+0x26>
 8013144:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8013170 <__ieee754_atan2f+0x134>
 8013148:	e78b      	b.n	8013062 <__ieee754_atan2f+0x26>
 801314a:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8013178 <__ieee754_atan2f+0x13c>
 801314e:	e788      	b.n	8013062 <__ieee754_atan2f+0x26>
 8013150:	eddf 7a08 	vldr	s15, [pc, #32]	; 8013174 <__ieee754_atan2f+0x138>
 8013154:	e785      	b.n	8013062 <__ieee754_atan2f+0x26>
 8013156:	bf00      	nop
 8013158:	c0490fdb 	.word	0xc0490fdb
 801315c:	3fc90fdb 	.word	0x3fc90fdb
 8013160:	bfc90fdb 	.word	0xbfc90fdb
 8013164:	080149ac 	.word	0x080149ac
 8013168:	080149b8 	.word	0x080149b8
 801316c:	33bbbd2e 	.word	0x33bbbd2e
 8013170:	40490fdb 	.word	0x40490fdb
 8013174:	00000000 	.word	0x00000000
 8013178:	3f490fdb 	.word	0x3f490fdb

0801317c <__ieee754_powf>:
 801317c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013180:	ee10 4a90 	vmov	r4, s1
 8013184:	f034 4800 	bics.w	r8, r4, #2147483648	; 0x80000000
 8013188:	ed2d 8b02 	vpush	{d8}
 801318c:	ee10 7a10 	vmov	r7, s0
 8013190:	eeb0 8a40 	vmov.f32	s16, s0
 8013194:	eef0 8a60 	vmov.f32	s17, s1
 8013198:	d10c      	bne.n	80131b4 <__ieee754_powf+0x38>
 801319a:	f487 0780 	eor.w	r7, r7, #4194304	; 0x400000
 801319e:	007f      	lsls	r7, r7, #1
 80131a0:	f517 0f00 	cmn.w	r7, #8388608	; 0x800000
 80131a4:	f240 8292 	bls.w	80136cc <__ieee754_powf+0x550>
 80131a8:	ee38 0a28 	vadd.f32	s0, s16, s17
 80131ac:	ecbd 8b02 	vpop	{d8}
 80131b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80131b4:	f027 4500 	bic.w	r5, r7, #2147483648	; 0x80000000
 80131b8:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 80131bc:	dcf4      	bgt.n	80131a8 <__ieee754_powf+0x2c>
 80131be:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 80131c2:	dd08      	ble.n	80131d6 <__ieee754_powf+0x5a>
 80131c4:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 80131c8:	d1ee      	bne.n	80131a8 <__ieee754_powf+0x2c>
 80131ca:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 80131ce:	0064      	lsls	r4, r4, #1
 80131d0:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 80131d4:	e7e6      	b.n	80131a4 <__ieee754_powf+0x28>
 80131d6:	2f00      	cmp	r7, #0
 80131d8:	da20      	bge.n	801321c <__ieee754_powf+0xa0>
 80131da:	f1b8 4f97 	cmp.w	r8, #1266679808	; 0x4b800000
 80131de:	da2d      	bge.n	801323c <__ieee754_powf+0xc0>
 80131e0:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 80131e4:	f2c0 827b 	blt.w	80136de <__ieee754_powf+0x562>
 80131e8:	ea4f 53e8 	mov.w	r3, r8, asr #23
 80131ec:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 80131f0:	fa48 f603 	asr.w	r6, r8, r3
 80131f4:	fa06 f303 	lsl.w	r3, r6, r3
 80131f8:	4543      	cmp	r3, r8
 80131fa:	f040 8270 	bne.w	80136de <__ieee754_powf+0x562>
 80131fe:	f006 0601 	and.w	r6, r6, #1
 8013202:	f1c6 0602 	rsb	r6, r6, #2
 8013206:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 801320a:	d11f      	bne.n	801324c <__ieee754_powf+0xd0>
 801320c:	2c00      	cmp	r4, #0
 801320e:	f280 8263 	bge.w	80136d8 <__ieee754_powf+0x55c>
 8013212:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8013216:	ee87 0a88 	vdiv.f32	s0, s15, s16
 801321a:	e7c7      	b.n	80131ac <__ieee754_powf+0x30>
 801321c:	2600      	movs	r6, #0
 801321e:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 8013222:	d1f0      	bne.n	8013206 <__ieee754_powf+0x8a>
 8013224:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 8013228:	f000 8250 	beq.w	80136cc <__ieee754_powf+0x550>
 801322c:	dd08      	ble.n	8013240 <__ieee754_powf+0xc4>
 801322e:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 8013534 <__ieee754_powf+0x3b8>
 8013232:	2c00      	cmp	r4, #0
 8013234:	bfa8      	it	ge
 8013236:	eeb0 0a68 	vmovge.f32	s0, s17
 801323a:	e7b7      	b.n	80131ac <__ieee754_powf+0x30>
 801323c:	2602      	movs	r6, #2
 801323e:	e7ee      	b.n	801321e <__ieee754_powf+0xa2>
 8013240:	2c00      	cmp	r4, #0
 8013242:	f280 8246 	bge.w	80136d2 <__ieee754_powf+0x556>
 8013246:	eeb1 0a68 	vneg.f32	s0, s17
 801324a:	e7af      	b.n	80131ac <__ieee754_powf+0x30>
 801324c:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 8013250:	d102      	bne.n	8013258 <__ieee754_powf+0xdc>
 8013252:	ee28 0a08 	vmul.f32	s0, s16, s16
 8013256:	e7a9      	b.n	80131ac <__ieee754_powf+0x30>
 8013258:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 801325c:	eeb0 0a48 	vmov.f32	s0, s16
 8013260:	d107      	bne.n	8013272 <__ieee754_powf+0xf6>
 8013262:	2f00      	cmp	r7, #0
 8013264:	db05      	blt.n	8013272 <__ieee754_powf+0xf6>
 8013266:	ecbd 8b02 	vpop	{d8}
 801326a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801326e:	f7ff bd55 	b.w	8012d1c <__ieee754_sqrtf>
 8013272:	f7ff fcf1 	bl	8012c58 <fabsf>
 8013276:	b125      	cbz	r5, 8013282 <__ieee754_powf+0x106>
 8013278:	f027 4340 	bic.w	r3, r7, #3221225472	; 0xc0000000
 801327c:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8013280:	d115      	bne.n	80132ae <__ieee754_powf+0x132>
 8013282:	2c00      	cmp	r4, #0
 8013284:	bfbc      	itt	lt
 8013286:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 801328a:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 801328e:	2f00      	cmp	r7, #0
 8013290:	da8c      	bge.n	80131ac <__ieee754_powf+0x30>
 8013292:	f1a5 557e 	sub.w	r5, r5, #1065353216	; 0x3f800000
 8013296:	4335      	orrs	r5, r6
 8013298:	d104      	bne.n	80132a4 <__ieee754_powf+0x128>
 801329a:	ee70 7a40 	vsub.f32	s15, s0, s0
 801329e:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 80132a2:	e783      	b.n	80131ac <__ieee754_powf+0x30>
 80132a4:	2e01      	cmp	r6, #1
 80132a6:	d181      	bne.n	80131ac <__ieee754_powf+0x30>
 80132a8:	eeb1 0a40 	vneg.f32	s0, s0
 80132ac:	e77e      	b.n	80131ac <__ieee754_powf+0x30>
 80132ae:	0ff8      	lsrs	r0, r7, #31
 80132b0:	3801      	subs	r0, #1
 80132b2:	ea56 0300 	orrs.w	r3, r6, r0
 80132b6:	d104      	bne.n	80132c2 <__ieee754_powf+0x146>
 80132b8:	ee38 8a48 	vsub.f32	s16, s16, s16
 80132bc:	ee88 0a08 	vdiv.f32	s0, s16, s16
 80132c0:	e774      	b.n	80131ac <__ieee754_powf+0x30>
 80132c2:	f1b8 4f9a 	cmp.w	r8, #1291845632	; 0x4d000000
 80132c6:	dd73      	ble.n	80133b0 <__ieee754_powf+0x234>
 80132c8:	4b9b      	ldr	r3, [pc, #620]	; (8013538 <__ieee754_powf+0x3bc>)
 80132ca:	429d      	cmp	r5, r3
 80132cc:	dc08      	bgt.n	80132e0 <__ieee754_powf+0x164>
 80132ce:	2c00      	cmp	r4, #0
 80132d0:	da0b      	bge.n	80132ea <__ieee754_powf+0x16e>
 80132d2:	2000      	movs	r0, #0
 80132d4:	ecbd 8b02 	vpop	{d8}
 80132d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80132dc:	f000 bc9a 	b.w	8013c14 <__math_oflowf>
 80132e0:	4b96      	ldr	r3, [pc, #600]	; (801353c <__ieee754_powf+0x3c0>)
 80132e2:	429d      	cmp	r5, r3
 80132e4:	dd08      	ble.n	80132f8 <__ieee754_powf+0x17c>
 80132e6:	2c00      	cmp	r4, #0
 80132e8:	dcf3      	bgt.n	80132d2 <__ieee754_powf+0x156>
 80132ea:	2000      	movs	r0, #0
 80132ec:	ecbd 8b02 	vpop	{d8}
 80132f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80132f4:	f000 bc88 	b.w	8013c08 <__math_uflowf>
 80132f8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80132fc:	ee30 0a67 	vsub.f32	s0, s0, s15
 8013300:	eddf 6a8f 	vldr	s13, [pc, #572]	; 8013540 <__ieee754_powf+0x3c4>
 8013304:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8013308:	eee0 6a67 	vfms.f32	s13, s0, s15
 801330c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8013310:	eee6 7ac0 	vfms.f32	s15, s13, s0
 8013314:	ee20 7a00 	vmul.f32	s14, s0, s0
 8013318:	ee27 7a27 	vmul.f32	s14, s14, s15
 801331c:	eddf 7a89 	vldr	s15, [pc, #548]	; 8013544 <__ieee754_powf+0x3c8>
 8013320:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 8013324:	ed9f 7a88 	vldr	s14, [pc, #544]	; 8013548 <__ieee754_powf+0x3cc>
 8013328:	eee0 7a07 	vfma.f32	s15, s0, s14
 801332c:	ed9f 7a87 	vldr	s14, [pc, #540]	; 801354c <__ieee754_powf+0x3d0>
 8013330:	eef0 6a67 	vmov.f32	s13, s15
 8013334:	eee0 6a07 	vfma.f32	s13, s0, s14
 8013338:	ee16 3a90 	vmov	r3, s13
 801333c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8013340:	f023 030f 	bic.w	r3, r3, #15
 8013344:	ee06 3a90 	vmov	s13, r3
 8013348:	eee0 6a47 	vfms.f32	s13, s0, s14
 801334c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8013350:	3e01      	subs	r6, #1
 8013352:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 8013356:	4306      	orrs	r6, r0
 8013358:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801335c:	f024 040f 	bic.w	r4, r4, #15
 8013360:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8013364:	bf08      	it	eq
 8013366:	eeb0 8a47 	vmoveq.f32	s16, s14
 801336a:	ee07 4a10 	vmov	s14, r4
 801336e:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8013372:	ee38 7ac7 	vsub.f32	s14, s17, s14
 8013376:	ee07 3a90 	vmov	s15, r3
 801337a:	eee7 0a27 	vfma.f32	s1, s14, s15
 801337e:	ee07 4a10 	vmov	s14, r4
 8013382:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013386:	ee30 7aa7 	vadd.f32	s14, s1, s15
 801338a:	ee17 1a10 	vmov	r1, s14
 801338e:	2900      	cmp	r1, #0
 8013390:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8013394:	f340 817c 	ble.w	8013690 <__ieee754_powf+0x514>
 8013398:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 801339c:	f340 80f8 	ble.w	8013590 <__ieee754_powf+0x414>
 80133a0:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80133a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80133a8:	bf4c      	ite	mi
 80133aa:	2001      	movmi	r0, #1
 80133ac:	2000      	movpl	r0, #0
 80133ae:	e791      	b.n	80132d4 <__ieee754_powf+0x158>
 80133b0:	f017 4fff 	tst.w	r7, #2139095040	; 0x7f800000
 80133b4:	bf01      	itttt	eq
 80133b6:	eddf 7a66 	vldreq	s15, [pc, #408]	; 8013550 <__ieee754_powf+0x3d4>
 80133ba:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 80133be:	f06f 0317 	mvneq.w	r3, #23
 80133c2:	ee17 5a90 	vmoveq	r5, s15
 80133c6:	ea4f 52e5 	mov.w	r2, r5, asr #23
 80133ca:	bf18      	it	ne
 80133cc:	2300      	movne	r3, #0
 80133ce:	3a7f      	subs	r2, #127	; 0x7f
 80133d0:	441a      	add	r2, r3
 80133d2:	4b60      	ldr	r3, [pc, #384]	; (8013554 <__ieee754_powf+0x3d8>)
 80133d4:	f3c5 0516 	ubfx	r5, r5, #0, #23
 80133d8:	429d      	cmp	r5, r3
 80133da:	f045 517e 	orr.w	r1, r5, #1065353216	; 0x3f800000
 80133de:	dd06      	ble.n	80133ee <__ieee754_powf+0x272>
 80133e0:	4b5d      	ldr	r3, [pc, #372]	; (8013558 <__ieee754_powf+0x3dc>)
 80133e2:	429d      	cmp	r5, r3
 80133e4:	f340 80a4 	ble.w	8013530 <__ieee754_powf+0x3b4>
 80133e8:	3201      	adds	r2, #1
 80133ea:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 80133ee:	2500      	movs	r5, #0
 80133f0:	4b5a      	ldr	r3, [pc, #360]	; (801355c <__ieee754_powf+0x3e0>)
 80133f2:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 80133f6:	ee07 1a10 	vmov	s14, r1
 80133fa:	edd3 5a00 	vldr	s11, [r3]
 80133fe:	4b58      	ldr	r3, [pc, #352]	; (8013560 <__ieee754_powf+0x3e4>)
 8013400:	ee75 7a87 	vadd.f32	s15, s11, s14
 8013404:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8013408:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 801340c:	1049      	asrs	r1, r1, #1
 801340e:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8013412:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 8013416:	eb01 5145 	add.w	r1, r1, r5, lsl #21
 801341a:	ee37 6a65 	vsub.f32	s12, s14, s11
 801341e:	ee07 1a90 	vmov	s15, r1
 8013422:	ee26 5a24 	vmul.f32	s10, s12, s9
 8013426:	ee77 5ae5 	vsub.f32	s11, s15, s11
 801342a:	ee15 7a10 	vmov	r7, s10
 801342e:	401f      	ands	r7, r3
 8013430:	ee06 7a90 	vmov	s13, r7
 8013434:	eea6 6ae7 	vfms.f32	s12, s13, s15
 8013438:	ee37 7a65 	vsub.f32	s14, s14, s11
 801343c:	ee65 7a05 	vmul.f32	s15, s10, s10
 8013440:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8013444:	eddf 5a47 	vldr	s11, [pc, #284]	; 8013564 <__ieee754_powf+0x3e8>
 8013448:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8013568 <__ieee754_powf+0x3ec>
 801344c:	eee7 5a87 	vfma.f32	s11, s15, s14
 8013450:	ed9f 7a46 	vldr	s14, [pc, #280]	; 801356c <__ieee754_powf+0x3f0>
 8013454:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8013458:	eddf 5a39 	vldr	s11, [pc, #228]	; 8013540 <__ieee754_powf+0x3c4>
 801345c:	eee7 5a27 	vfma.f32	s11, s14, s15
 8013460:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8013570 <__ieee754_powf+0x3f4>
 8013464:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8013468:	eddf 5a42 	vldr	s11, [pc, #264]	; 8013574 <__ieee754_powf+0x3f8>
 801346c:	ee26 6a24 	vmul.f32	s12, s12, s9
 8013470:	eee7 5a27 	vfma.f32	s11, s14, s15
 8013474:	ee35 7a26 	vadd.f32	s14, s10, s13
 8013478:	ee67 4aa7 	vmul.f32	s9, s15, s15
 801347c:	ee27 7a06 	vmul.f32	s14, s14, s12
 8013480:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 8013484:	eea4 7aa5 	vfma.f32	s14, s9, s11
 8013488:	eef0 5a67 	vmov.f32	s11, s15
 801348c:	eee6 5aa6 	vfma.f32	s11, s13, s13
 8013490:	ee75 5a87 	vadd.f32	s11, s11, s14
 8013494:	ee15 1a90 	vmov	r1, s11
 8013498:	4019      	ands	r1, r3
 801349a:	ee05 1a90 	vmov	s11, r1
 801349e:	ee75 7ae7 	vsub.f32	s15, s11, s15
 80134a2:	eee6 7ae6 	vfms.f32	s15, s13, s13
 80134a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80134aa:	ee67 7a85 	vmul.f32	s15, s15, s10
 80134ae:	eee6 7a25 	vfma.f32	s15, s12, s11
 80134b2:	eeb0 6a67 	vmov.f32	s12, s15
 80134b6:	eea6 6aa5 	vfma.f32	s12, s13, s11
 80134ba:	ee16 1a10 	vmov	r1, s12
 80134be:	4019      	ands	r1, r3
 80134c0:	ee07 1a10 	vmov	s14, r1
 80134c4:	eea6 7ae5 	vfms.f32	s14, s13, s11
 80134c8:	ee06 1a10 	vmov	s12, r1
 80134cc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80134d0:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8013578 <__ieee754_powf+0x3fc>
 80134d4:	4929      	ldr	r1, [pc, #164]	; (801357c <__ieee754_powf+0x400>)
 80134d6:	eddf 5a2a 	vldr	s11, [pc, #168]	; 8013580 <__ieee754_powf+0x404>
 80134da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80134de:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8013584 <__ieee754_powf+0x408>
 80134e2:	eee6 7a07 	vfma.f32	s15, s12, s14
 80134e6:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 80134ea:	ed91 7a00 	vldr	s14, [r1]
 80134ee:	ee77 7a87 	vadd.f32	s15, s15, s14
 80134f2:	ee07 2a10 	vmov	s14, r2
 80134f6:	eef0 6a67 	vmov.f32	s13, s15
 80134fa:	4a23      	ldr	r2, [pc, #140]	; (8013588 <__ieee754_powf+0x40c>)
 80134fc:	eee6 6a25 	vfma.f32	s13, s12, s11
 8013500:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 8013504:	ed92 5a00 	vldr	s10, [r2]
 8013508:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801350c:	ee76 6a85 	vadd.f32	s13, s13, s10
 8013510:	ee76 6a87 	vadd.f32	s13, s13, s14
 8013514:	ee16 2a90 	vmov	r2, s13
 8013518:	4013      	ands	r3, r2
 801351a:	ee06 3a90 	vmov	s13, r3
 801351e:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8013522:	ee37 7a45 	vsub.f32	s14, s14, s10
 8013526:	eea6 7a65 	vfms.f32	s14, s12, s11
 801352a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801352e:	e70f      	b.n	8013350 <__ieee754_powf+0x1d4>
 8013530:	2501      	movs	r5, #1
 8013532:	e75d      	b.n	80133f0 <__ieee754_powf+0x274>
 8013534:	00000000 	.word	0x00000000
 8013538:	3f7ffff3 	.word	0x3f7ffff3
 801353c:	3f800007 	.word	0x3f800007
 8013540:	3eaaaaab 	.word	0x3eaaaaab
 8013544:	3fb8aa3b 	.word	0x3fb8aa3b
 8013548:	36eca570 	.word	0x36eca570
 801354c:	3fb8aa00 	.word	0x3fb8aa00
 8013550:	4b800000 	.word	0x4b800000
 8013554:	001cc471 	.word	0x001cc471
 8013558:	005db3d6 	.word	0x005db3d6
 801355c:	080149c4 	.word	0x080149c4
 8013560:	fffff000 	.word	0xfffff000
 8013564:	3e6c3255 	.word	0x3e6c3255
 8013568:	3e53f142 	.word	0x3e53f142
 801356c:	3e8ba305 	.word	0x3e8ba305
 8013570:	3edb6db7 	.word	0x3edb6db7
 8013574:	3f19999a 	.word	0x3f19999a
 8013578:	3f76384f 	.word	0x3f76384f
 801357c:	080149d4 	.word	0x080149d4
 8013580:	3f763800 	.word	0x3f763800
 8013584:	369dc3a0 	.word	0x369dc3a0
 8013588:	080149cc 	.word	0x080149cc
 801358c:	3338aa3c 	.word	0x3338aa3c
 8013590:	f040 8093 	bne.w	80136ba <__ieee754_powf+0x53e>
 8013594:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 801358c <__ieee754_powf+0x410>
 8013598:	ee37 7a67 	vsub.f32	s14, s14, s15
 801359c:	ee70 6aa6 	vadd.f32	s13, s1, s13
 80135a0:	eef4 6ac7 	vcmpe.f32	s13, s14
 80135a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80135a8:	f73f aefa 	bgt.w	80133a0 <__ieee754_powf+0x224>
 80135ac:	15db      	asrs	r3, r3, #23
 80135ae:	3b7e      	subs	r3, #126	; 0x7e
 80135b0:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80135b4:	4118      	asrs	r0, r3
 80135b6:	4408      	add	r0, r1
 80135b8:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 80135bc:	4a49      	ldr	r2, [pc, #292]	; (80136e4 <__ieee754_powf+0x568>)
 80135be:	3b7f      	subs	r3, #127	; 0x7f
 80135c0:	411a      	asrs	r2, r3
 80135c2:	4002      	ands	r2, r0
 80135c4:	ee07 2a10 	vmov	s14, r2
 80135c8:	f3c0 0016 	ubfx	r0, r0, #0, #23
 80135cc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80135d0:	f1c3 0317 	rsb	r3, r3, #23
 80135d4:	4118      	asrs	r0, r3
 80135d6:	2900      	cmp	r1, #0
 80135d8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80135dc:	bfb8      	it	lt
 80135de:	4240      	neglt	r0, r0
 80135e0:	ee37 7aa0 	vadd.f32	s14, s15, s1
 80135e4:	eddf 6a40 	vldr	s13, [pc, #256]	; 80136e8 <__ieee754_powf+0x56c>
 80135e8:	ed9f 6a40 	vldr	s12, [pc, #256]	; 80136ec <__ieee754_powf+0x570>
 80135ec:	ee17 3a10 	vmov	r3, s14
 80135f0:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80135f4:	f023 030f 	bic.w	r3, r3, #15
 80135f8:	ee07 3a10 	vmov	s14, r3
 80135fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013600:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8013604:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8013608:	eddf 7a39 	vldr	s15, [pc, #228]	; 80136f0 <__ieee754_powf+0x574>
 801360c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013610:	eee0 7aa6 	vfma.f32	s15, s1, s13
 8013614:	eef0 6a67 	vmov.f32	s13, s15
 8013618:	eee7 6a06 	vfma.f32	s13, s14, s12
 801361c:	eef0 5a66 	vmov.f32	s11, s13
 8013620:	eee7 5a46 	vfms.f32	s11, s14, s12
 8013624:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8013628:	ee77 7ae5 	vsub.f32	s15, s15, s11
 801362c:	ed9f 6a31 	vldr	s12, [pc, #196]	; 80136f4 <__ieee754_powf+0x578>
 8013630:	eddf 5a31 	vldr	s11, [pc, #196]	; 80136f8 <__ieee754_powf+0x57c>
 8013634:	eea7 6a25 	vfma.f32	s12, s14, s11
 8013638:	eddf 5a30 	vldr	s11, [pc, #192]	; 80136fc <__ieee754_powf+0x580>
 801363c:	eee6 5a07 	vfma.f32	s11, s12, s14
 8013640:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 8013700 <__ieee754_powf+0x584>
 8013644:	eea5 6a87 	vfma.f32	s12, s11, s14
 8013648:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8013704 <__ieee754_powf+0x588>
 801364c:	eee6 5a07 	vfma.f32	s11, s12, s14
 8013650:	eeb0 6a66 	vmov.f32	s12, s13
 8013654:	eea5 6ac7 	vfms.f32	s12, s11, s14
 8013658:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 801365c:	ee66 5a86 	vmul.f32	s11, s13, s12
 8013660:	ee36 6a47 	vsub.f32	s12, s12, s14
 8013664:	eee6 7aa7 	vfma.f32	s15, s13, s15
 8013668:	ee85 7a86 	vdiv.f32	s14, s11, s12
 801366c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013670:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8013674:	ee30 0a67 	vsub.f32	s0, s0, s15
 8013678:	ee10 3a10 	vmov	r3, s0
 801367c:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8013680:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8013684:	da1f      	bge.n	80136c6 <__ieee754_powf+0x54a>
 8013686:	f000 fa43 	bl	8013b10 <scalbnf>
 801368a:	ee20 0a08 	vmul.f32	s0, s0, s16
 801368e:	e58d      	b.n	80131ac <__ieee754_powf+0x30>
 8013690:	4a1d      	ldr	r2, [pc, #116]	; (8013708 <__ieee754_powf+0x58c>)
 8013692:	4293      	cmp	r3, r2
 8013694:	dd07      	ble.n	80136a6 <__ieee754_powf+0x52a>
 8013696:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801369a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801369e:	bf4c      	ite	mi
 80136a0:	2001      	movmi	r0, #1
 80136a2:	2000      	movpl	r0, #0
 80136a4:	e622      	b.n	80132ec <__ieee754_powf+0x170>
 80136a6:	d108      	bne.n	80136ba <__ieee754_powf+0x53e>
 80136a8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80136ac:	eeb4 7ae0 	vcmpe.f32	s14, s1
 80136b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80136b4:	f6ff af7a 	blt.w	80135ac <__ieee754_powf+0x430>
 80136b8:	e7ed      	b.n	8013696 <__ieee754_powf+0x51a>
 80136ba:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 80136be:	f73f af75 	bgt.w	80135ac <__ieee754_powf+0x430>
 80136c2:	2000      	movs	r0, #0
 80136c4:	e78c      	b.n	80135e0 <__ieee754_powf+0x464>
 80136c6:	ee00 3a10 	vmov	s0, r3
 80136ca:	e7de      	b.n	801368a <__ieee754_powf+0x50e>
 80136cc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80136d0:	e56c      	b.n	80131ac <__ieee754_powf+0x30>
 80136d2:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 801370c <__ieee754_powf+0x590>
 80136d6:	e569      	b.n	80131ac <__ieee754_powf+0x30>
 80136d8:	eeb0 0a48 	vmov.f32	s0, s16
 80136dc:	e566      	b.n	80131ac <__ieee754_powf+0x30>
 80136de:	2600      	movs	r6, #0
 80136e0:	e591      	b.n	8013206 <__ieee754_powf+0x8a>
 80136e2:	bf00      	nop
 80136e4:	ff800000 	.word	0xff800000
 80136e8:	3f317218 	.word	0x3f317218
 80136ec:	3f317200 	.word	0x3f317200
 80136f0:	35bfbe8c 	.word	0x35bfbe8c
 80136f4:	b5ddea0e 	.word	0xb5ddea0e
 80136f8:	3331bb4c 	.word	0x3331bb4c
 80136fc:	388ab355 	.word	0x388ab355
 8013700:	bb360b61 	.word	0xbb360b61
 8013704:	3e2aaaab 	.word	0x3e2aaaab
 8013708:	43160000 	.word	0x43160000
 801370c:	00000000 	.word	0x00000000

08013710 <__ieee754_rem_pio2f>:
 8013710:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013712:	ee10 6a10 	vmov	r6, s0
 8013716:	4b86      	ldr	r3, [pc, #536]	; (8013930 <__ieee754_rem_pio2f+0x220>)
 8013718:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 801371c:	429d      	cmp	r5, r3
 801371e:	b087      	sub	sp, #28
 8013720:	4604      	mov	r4, r0
 8013722:	dc05      	bgt.n	8013730 <__ieee754_rem_pio2f+0x20>
 8013724:	2300      	movs	r3, #0
 8013726:	ed80 0a00 	vstr	s0, [r0]
 801372a:	6043      	str	r3, [r0, #4]
 801372c:	2000      	movs	r0, #0
 801372e:	e020      	b.n	8013772 <__ieee754_rem_pio2f+0x62>
 8013730:	4b80      	ldr	r3, [pc, #512]	; (8013934 <__ieee754_rem_pio2f+0x224>)
 8013732:	429d      	cmp	r5, r3
 8013734:	dc38      	bgt.n	80137a8 <__ieee754_rem_pio2f+0x98>
 8013736:	2e00      	cmp	r6, #0
 8013738:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 8013938 <__ieee754_rem_pio2f+0x228>
 801373c:	4b7f      	ldr	r3, [pc, #508]	; (801393c <__ieee754_rem_pio2f+0x22c>)
 801373e:	f025 050f 	bic.w	r5, r5, #15
 8013742:	dd18      	ble.n	8013776 <__ieee754_rem_pio2f+0x66>
 8013744:	429d      	cmp	r5, r3
 8013746:	ee70 7a47 	vsub.f32	s15, s0, s14
 801374a:	bf09      	itett	eq
 801374c:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 8013940 <__ieee754_rem_pio2f+0x230>
 8013750:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 8013944 <__ieee754_rem_pio2f+0x234>
 8013754:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8013758:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 8013948 <__ieee754_rem_pio2f+0x238>
 801375c:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8013760:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8013764:	edc0 6a00 	vstr	s13, [r0]
 8013768:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801376c:	edc0 7a01 	vstr	s15, [r0, #4]
 8013770:	2001      	movs	r0, #1
 8013772:	b007      	add	sp, #28
 8013774:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013776:	429d      	cmp	r5, r3
 8013778:	ee70 7a07 	vadd.f32	s15, s0, s14
 801377c:	bf09      	itett	eq
 801377e:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 8013940 <__ieee754_rem_pio2f+0x230>
 8013782:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 8013944 <__ieee754_rem_pio2f+0x234>
 8013786:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 801378a:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 8013948 <__ieee754_rem_pio2f+0x238>
 801378e:	ee77 6a87 	vadd.f32	s13, s15, s14
 8013792:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8013796:	edc0 6a00 	vstr	s13, [r0]
 801379a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801379e:	edc0 7a01 	vstr	s15, [r0, #4]
 80137a2:	f04f 30ff 	mov.w	r0, #4294967295
 80137a6:	e7e4      	b.n	8013772 <__ieee754_rem_pio2f+0x62>
 80137a8:	4b68      	ldr	r3, [pc, #416]	; (801394c <__ieee754_rem_pio2f+0x23c>)
 80137aa:	429d      	cmp	r5, r3
 80137ac:	dc71      	bgt.n	8013892 <__ieee754_rem_pio2f+0x182>
 80137ae:	f7ff fa53 	bl	8012c58 <fabsf>
 80137b2:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8013950 <__ieee754_rem_pio2f+0x240>
 80137b6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80137ba:	eee0 7a07 	vfma.f32	s15, s0, s14
 80137be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80137c2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80137c6:	ee17 0a90 	vmov	r0, s15
 80137ca:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8013938 <__ieee754_rem_pio2f+0x228>
 80137ce:	eea7 0a67 	vfms.f32	s0, s14, s15
 80137d2:	281f      	cmp	r0, #31
 80137d4:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8013944 <__ieee754_rem_pio2f+0x234>
 80137d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80137dc:	eeb1 6a47 	vneg.f32	s12, s14
 80137e0:	ee70 6a67 	vsub.f32	s13, s0, s15
 80137e4:	ee16 2a90 	vmov	r2, s13
 80137e8:	dc1c      	bgt.n	8013824 <__ieee754_rem_pio2f+0x114>
 80137ea:	495a      	ldr	r1, [pc, #360]	; (8013954 <__ieee754_rem_pio2f+0x244>)
 80137ec:	1e47      	subs	r7, r0, #1
 80137ee:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 80137f2:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 80137f6:	428b      	cmp	r3, r1
 80137f8:	d014      	beq.n	8013824 <__ieee754_rem_pio2f+0x114>
 80137fa:	6022      	str	r2, [r4, #0]
 80137fc:	ed94 7a00 	vldr	s14, [r4]
 8013800:	ee30 0a47 	vsub.f32	s0, s0, s14
 8013804:	2e00      	cmp	r6, #0
 8013806:	ee30 0a67 	vsub.f32	s0, s0, s15
 801380a:	ed84 0a01 	vstr	s0, [r4, #4]
 801380e:	dab0      	bge.n	8013772 <__ieee754_rem_pio2f+0x62>
 8013810:	eeb1 7a47 	vneg.f32	s14, s14
 8013814:	eeb1 0a40 	vneg.f32	s0, s0
 8013818:	ed84 7a00 	vstr	s14, [r4]
 801381c:	ed84 0a01 	vstr	s0, [r4, #4]
 8013820:	4240      	negs	r0, r0
 8013822:	e7a6      	b.n	8013772 <__ieee754_rem_pio2f+0x62>
 8013824:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8013828:	ebc1 51d5 	rsb	r1, r1, r5, lsr #23
 801382c:	2908      	cmp	r1, #8
 801382e:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8013832:	dde2      	ble.n	80137fa <__ieee754_rem_pio2f+0xea>
 8013834:	eddf 5a42 	vldr	s11, [pc, #264]	; 8013940 <__ieee754_rem_pio2f+0x230>
 8013838:	eef0 6a40 	vmov.f32	s13, s0
 801383c:	eee6 6a25 	vfma.f32	s13, s12, s11
 8013840:	ee70 7a66 	vsub.f32	s15, s0, s13
 8013844:	eee6 7a25 	vfma.f32	s15, s12, s11
 8013848:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8013948 <__ieee754_rem_pio2f+0x238>
 801384c:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8013850:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8013854:	ee15 2a90 	vmov	r2, s11
 8013858:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 801385c:	1a5b      	subs	r3, r3, r1
 801385e:	2b19      	cmp	r3, #25
 8013860:	dc04      	bgt.n	801386c <__ieee754_rem_pio2f+0x15c>
 8013862:	edc4 5a00 	vstr	s11, [r4]
 8013866:	eeb0 0a66 	vmov.f32	s0, s13
 801386a:	e7c7      	b.n	80137fc <__ieee754_rem_pio2f+0xec>
 801386c:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8013958 <__ieee754_rem_pio2f+0x248>
 8013870:	eeb0 0a66 	vmov.f32	s0, s13
 8013874:	eea6 0a25 	vfma.f32	s0, s12, s11
 8013878:	ee76 7ac0 	vsub.f32	s15, s13, s0
 801387c:	eddf 6a37 	vldr	s13, [pc, #220]	; 801395c <__ieee754_rem_pio2f+0x24c>
 8013880:	eee6 7a25 	vfma.f32	s15, s12, s11
 8013884:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8013888:	ee30 7a67 	vsub.f32	s14, s0, s15
 801388c:	ed84 7a00 	vstr	s14, [r4]
 8013890:	e7b4      	b.n	80137fc <__ieee754_rem_pio2f+0xec>
 8013892:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8013896:	db06      	blt.n	80138a6 <__ieee754_rem_pio2f+0x196>
 8013898:	ee70 7a40 	vsub.f32	s15, s0, s0
 801389c:	edc0 7a01 	vstr	s15, [r0, #4]
 80138a0:	edc0 7a00 	vstr	s15, [r0]
 80138a4:	e742      	b.n	801372c <__ieee754_rem_pio2f+0x1c>
 80138a6:	15ea      	asrs	r2, r5, #23
 80138a8:	3a86      	subs	r2, #134	; 0x86
 80138aa:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 80138ae:	ee07 3a90 	vmov	s15, r3
 80138b2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80138b6:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8013960 <__ieee754_rem_pio2f+0x250>
 80138ba:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80138be:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80138c2:	ed8d 7a03 	vstr	s14, [sp, #12]
 80138c6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80138ca:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80138ce:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80138d2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80138d6:	ed8d 7a04 	vstr	s14, [sp, #16]
 80138da:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80138de:	eef5 7a40 	vcmp.f32	s15, #0.0
 80138e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80138e6:	edcd 7a05 	vstr	s15, [sp, #20]
 80138ea:	d11e      	bne.n	801392a <__ieee754_rem_pio2f+0x21a>
 80138ec:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80138f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80138f4:	bf14      	ite	ne
 80138f6:	2302      	movne	r3, #2
 80138f8:	2301      	moveq	r3, #1
 80138fa:	491a      	ldr	r1, [pc, #104]	; (8013964 <__ieee754_rem_pio2f+0x254>)
 80138fc:	9101      	str	r1, [sp, #4]
 80138fe:	2102      	movs	r1, #2
 8013900:	9100      	str	r1, [sp, #0]
 8013902:	a803      	add	r0, sp, #12
 8013904:	4621      	mov	r1, r4
 8013906:	f000 f98b 	bl	8013c20 <__kernel_rem_pio2f>
 801390a:	2e00      	cmp	r6, #0
 801390c:	f6bf af31 	bge.w	8013772 <__ieee754_rem_pio2f+0x62>
 8013910:	edd4 7a00 	vldr	s15, [r4]
 8013914:	eef1 7a67 	vneg.f32	s15, s15
 8013918:	edc4 7a00 	vstr	s15, [r4]
 801391c:	edd4 7a01 	vldr	s15, [r4, #4]
 8013920:	eef1 7a67 	vneg.f32	s15, s15
 8013924:	edc4 7a01 	vstr	s15, [r4, #4]
 8013928:	e77a      	b.n	8013820 <__ieee754_rem_pio2f+0x110>
 801392a:	2303      	movs	r3, #3
 801392c:	e7e5      	b.n	80138fa <__ieee754_rem_pio2f+0x1ea>
 801392e:	bf00      	nop
 8013930:	3f490fd8 	.word	0x3f490fd8
 8013934:	4016cbe3 	.word	0x4016cbe3
 8013938:	3fc90f80 	.word	0x3fc90f80
 801393c:	3fc90fd0 	.word	0x3fc90fd0
 8013940:	37354400 	.word	0x37354400
 8013944:	37354443 	.word	0x37354443
 8013948:	2e85a308 	.word	0x2e85a308
 801394c:	43490f80 	.word	0x43490f80
 8013950:	3f22f984 	.word	0x3f22f984
 8013954:	080149dc 	.word	0x080149dc
 8013958:	2e85a300 	.word	0x2e85a300
 801395c:	248d3132 	.word	0x248d3132
 8013960:	43800000 	.word	0x43800000
 8013964:	08014a5c 	.word	0x08014a5c

08013968 <atanf>:
 8013968:	b538      	push	{r3, r4, r5, lr}
 801396a:	ee10 5a10 	vmov	r5, s0
 801396e:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8013972:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 8013976:	eef0 7a40 	vmov.f32	s15, s0
 801397a:	db10      	blt.n	801399e <atanf+0x36>
 801397c:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8013980:	dd04      	ble.n	801398c <atanf+0x24>
 8013982:	ee70 7a00 	vadd.f32	s15, s0, s0
 8013986:	eeb0 0a67 	vmov.f32	s0, s15
 801398a:	bd38      	pop	{r3, r4, r5, pc}
 801398c:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8013ac4 <atanf+0x15c>
 8013990:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8013ac8 <atanf+0x160>
 8013994:	2d00      	cmp	r5, #0
 8013996:	bfd8      	it	le
 8013998:	eef0 7a47 	vmovle.f32	s15, s14
 801399c:	e7f3      	b.n	8013986 <atanf+0x1e>
 801399e:	4b4b      	ldr	r3, [pc, #300]	; (8013acc <atanf+0x164>)
 80139a0:	429c      	cmp	r4, r3
 80139a2:	dc10      	bgt.n	80139c6 <atanf+0x5e>
 80139a4:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 80139a8:	da0a      	bge.n	80139c0 <atanf+0x58>
 80139aa:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8013ad0 <atanf+0x168>
 80139ae:	ee30 7a07 	vadd.f32	s14, s0, s14
 80139b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80139b6:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80139ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80139be:	dce2      	bgt.n	8013986 <atanf+0x1e>
 80139c0:	f04f 33ff 	mov.w	r3, #4294967295
 80139c4:	e013      	b.n	80139ee <atanf+0x86>
 80139c6:	f7ff f947 	bl	8012c58 <fabsf>
 80139ca:	4b42      	ldr	r3, [pc, #264]	; (8013ad4 <atanf+0x16c>)
 80139cc:	429c      	cmp	r4, r3
 80139ce:	dc4f      	bgt.n	8013a70 <atanf+0x108>
 80139d0:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 80139d4:	429c      	cmp	r4, r3
 80139d6:	dc41      	bgt.n	8013a5c <atanf+0xf4>
 80139d8:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 80139dc:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80139e0:	eea0 7a27 	vfma.f32	s14, s0, s15
 80139e4:	2300      	movs	r3, #0
 80139e6:	ee30 0a27 	vadd.f32	s0, s0, s15
 80139ea:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80139ee:	1c5a      	adds	r2, r3, #1
 80139f0:	ee27 6aa7 	vmul.f32	s12, s15, s15
 80139f4:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8013ad8 <atanf+0x170>
 80139f8:	eddf 5a38 	vldr	s11, [pc, #224]	; 8013adc <atanf+0x174>
 80139fc:	ed9f 5a38 	vldr	s10, [pc, #224]	; 8013ae0 <atanf+0x178>
 8013a00:	ee66 6a06 	vmul.f32	s13, s12, s12
 8013a04:	eee6 5a87 	vfma.f32	s11, s13, s14
 8013a08:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8013ae4 <atanf+0x17c>
 8013a0c:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8013a10:	eddf 5a35 	vldr	s11, [pc, #212]	; 8013ae8 <atanf+0x180>
 8013a14:	eee7 5a26 	vfma.f32	s11, s14, s13
 8013a18:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8013aec <atanf+0x184>
 8013a1c:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8013a20:	eddf 5a33 	vldr	s11, [pc, #204]	; 8013af0 <atanf+0x188>
 8013a24:	eee7 5a26 	vfma.f32	s11, s14, s13
 8013a28:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8013af4 <atanf+0x18c>
 8013a2c:	eea6 5a87 	vfma.f32	s10, s13, s14
 8013a30:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8013af8 <atanf+0x190>
 8013a34:	eea5 7a26 	vfma.f32	s14, s10, s13
 8013a38:	ed9f 5a30 	vldr	s10, [pc, #192]	; 8013afc <atanf+0x194>
 8013a3c:	eea7 5a26 	vfma.f32	s10, s14, s13
 8013a40:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8013b00 <atanf+0x198>
 8013a44:	eea5 7a26 	vfma.f32	s14, s10, s13
 8013a48:	ee27 7a26 	vmul.f32	s14, s14, s13
 8013a4c:	eea5 7a86 	vfma.f32	s14, s11, s12
 8013a50:	ee27 7a87 	vmul.f32	s14, s15, s14
 8013a54:	d121      	bne.n	8013a9a <atanf+0x132>
 8013a56:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013a5a:	e794      	b.n	8013986 <atanf+0x1e>
 8013a5c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8013a60:	ee30 7a67 	vsub.f32	s14, s0, s15
 8013a64:	ee30 0a27 	vadd.f32	s0, s0, s15
 8013a68:	2301      	movs	r3, #1
 8013a6a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8013a6e:	e7be      	b.n	80139ee <atanf+0x86>
 8013a70:	4b24      	ldr	r3, [pc, #144]	; (8013b04 <atanf+0x19c>)
 8013a72:	429c      	cmp	r4, r3
 8013a74:	dc0b      	bgt.n	8013a8e <atanf+0x126>
 8013a76:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8013a7a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8013a7e:	eea0 7a27 	vfma.f32	s14, s0, s15
 8013a82:	2302      	movs	r3, #2
 8013a84:	ee70 6a67 	vsub.f32	s13, s0, s15
 8013a88:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013a8c:	e7af      	b.n	80139ee <atanf+0x86>
 8013a8e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8013a92:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8013a96:	2303      	movs	r3, #3
 8013a98:	e7a9      	b.n	80139ee <atanf+0x86>
 8013a9a:	4a1b      	ldr	r2, [pc, #108]	; (8013b08 <atanf+0x1a0>)
 8013a9c:	491b      	ldr	r1, [pc, #108]	; (8013b0c <atanf+0x1a4>)
 8013a9e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8013aa2:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8013aa6:	edd3 6a00 	vldr	s13, [r3]
 8013aaa:	ee37 7a66 	vsub.f32	s14, s14, s13
 8013aae:	2d00      	cmp	r5, #0
 8013ab0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8013ab4:	edd2 7a00 	vldr	s15, [r2]
 8013ab8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013abc:	bfb8      	it	lt
 8013abe:	eef1 7a67 	vneglt.f32	s15, s15
 8013ac2:	e760      	b.n	8013986 <atanf+0x1e>
 8013ac4:	3fc90fdb 	.word	0x3fc90fdb
 8013ac8:	bfc90fdb 	.word	0xbfc90fdb
 8013acc:	3edfffff 	.word	0x3edfffff
 8013ad0:	7149f2ca 	.word	0x7149f2ca
 8013ad4:	3f97ffff 	.word	0x3f97ffff
 8013ad8:	3c8569d7 	.word	0x3c8569d7
 8013adc:	3d4bda59 	.word	0x3d4bda59
 8013ae0:	bd6ef16b 	.word	0xbd6ef16b
 8013ae4:	3d886b35 	.word	0x3d886b35
 8013ae8:	3dba2e6e 	.word	0x3dba2e6e
 8013aec:	3e124925 	.word	0x3e124925
 8013af0:	3eaaaaab 	.word	0x3eaaaaab
 8013af4:	bd15a221 	.word	0xbd15a221
 8013af8:	bd9d8795 	.word	0xbd9d8795
 8013afc:	bde38e38 	.word	0xbde38e38
 8013b00:	be4ccccd 	.word	0xbe4ccccd
 8013b04:	401bffff 	.word	0x401bffff
 8013b08:	08014d74 	.word	0x08014d74
 8013b0c:	08014d84 	.word	0x08014d84

08013b10 <scalbnf>:
 8013b10:	ee10 3a10 	vmov	r3, s0
 8013b14:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8013b18:	d02b      	beq.n	8013b72 <scalbnf+0x62>
 8013b1a:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8013b1e:	d302      	bcc.n	8013b26 <scalbnf+0x16>
 8013b20:	ee30 0a00 	vadd.f32	s0, s0, s0
 8013b24:	4770      	bx	lr
 8013b26:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8013b2a:	d123      	bne.n	8013b74 <scalbnf+0x64>
 8013b2c:	4b24      	ldr	r3, [pc, #144]	; (8013bc0 <scalbnf+0xb0>)
 8013b2e:	eddf 7a25 	vldr	s15, [pc, #148]	; 8013bc4 <scalbnf+0xb4>
 8013b32:	4298      	cmp	r0, r3
 8013b34:	ee20 0a27 	vmul.f32	s0, s0, s15
 8013b38:	db17      	blt.n	8013b6a <scalbnf+0x5a>
 8013b3a:	ee10 3a10 	vmov	r3, s0
 8013b3e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8013b42:	3a19      	subs	r2, #25
 8013b44:	f24c 3150 	movw	r1, #50000	; 0xc350
 8013b48:	4288      	cmp	r0, r1
 8013b4a:	dd15      	ble.n	8013b78 <scalbnf+0x68>
 8013b4c:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8013bc8 <scalbnf+0xb8>
 8013b50:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8013bcc <scalbnf+0xbc>
 8013b54:	ee10 3a10 	vmov	r3, s0
 8013b58:	eeb0 7a67 	vmov.f32	s14, s15
 8013b5c:	2b00      	cmp	r3, #0
 8013b5e:	bfb8      	it	lt
 8013b60:	eef0 7a66 	vmovlt.f32	s15, s13
 8013b64:	ee27 0a87 	vmul.f32	s0, s15, s14
 8013b68:	4770      	bx	lr
 8013b6a:	eddf 7a19 	vldr	s15, [pc, #100]	; 8013bd0 <scalbnf+0xc0>
 8013b6e:	ee27 0a80 	vmul.f32	s0, s15, s0
 8013b72:	4770      	bx	lr
 8013b74:	0dd2      	lsrs	r2, r2, #23
 8013b76:	e7e5      	b.n	8013b44 <scalbnf+0x34>
 8013b78:	4410      	add	r0, r2
 8013b7a:	28fe      	cmp	r0, #254	; 0xfe
 8013b7c:	dce6      	bgt.n	8013b4c <scalbnf+0x3c>
 8013b7e:	2800      	cmp	r0, #0
 8013b80:	dd06      	ble.n	8013b90 <scalbnf+0x80>
 8013b82:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8013b86:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8013b8a:	ee00 3a10 	vmov	s0, r3
 8013b8e:	4770      	bx	lr
 8013b90:	f110 0f16 	cmn.w	r0, #22
 8013b94:	da09      	bge.n	8013baa <scalbnf+0x9a>
 8013b96:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8013bd0 <scalbnf+0xc0>
 8013b9a:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8013bd4 <scalbnf+0xc4>
 8013b9e:	ee10 3a10 	vmov	r3, s0
 8013ba2:	eeb0 7a67 	vmov.f32	s14, s15
 8013ba6:	2b00      	cmp	r3, #0
 8013ba8:	e7d9      	b.n	8013b5e <scalbnf+0x4e>
 8013baa:	3019      	adds	r0, #25
 8013bac:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8013bb0:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8013bb4:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8013bd8 <scalbnf+0xc8>
 8013bb8:	ee07 3a90 	vmov	s15, r3
 8013bbc:	e7d7      	b.n	8013b6e <scalbnf+0x5e>
 8013bbe:	bf00      	nop
 8013bc0:	ffff3cb0 	.word	0xffff3cb0
 8013bc4:	4c000000 	.word	0x4c000000
 8013bc8:	7149f2ca 	.word	0x7149f2ca
 8013bcc:	f149f2ca 	.word	0xf149f2ca
 8013bd0:	0da24260 	.word	0x0da24260
 8013bd4:	8da24260 	.word	0x8da24260
 8013bd8:	33000000 	.word	0x33000000

08013bdc <with_errnof>:
 8013bdc:	b513      	push	{r0, r1, r4, lr}
 8013bde:	4604      	mov	r4, r0
 8013be0:	ed8d 0a01 	vstr	s0, [sp, #4]
 8013be4:	f7fc ff8c 	bl	8010b00 <__errno>
 8013be8:	ed9d 0a01 	vldr	s0, [sp, #4]
 8013bec:	6004      	str	r4, [r0, #0]
 8013bee:	b002      	add	sp, #8
 8013bf0:	bd10      	pop	{r4, pc}

08013bf2 <xflowf>:
 8013bf2:	b130      	cbz	r0, 8013c02 <xflowf+0x10>
 8013bf4:	eef1 7a40 	vneg.f32	s15, s0
 8013bf8:	ee27 0a80 	vmul.f32	s0, s15, s0
 8013bfc:	2022      	movs	r0, #34	; 0x22
 8013bfe:	f7ff bfed 	b.w	8013bdc <with_errnof>
 8013c02:	eef0 7a40 	vmov.f32	s15, s0
 8013c06:	e7f7      	b.n	8013bf8 <xflowf+0x6>

08013c08 <__math_uflowf>:
 8013c08:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8013c10 <__math_uflowf+0x8>
 8013c0c:	f7ff bff1 	b.w	8013bf2 <xflowf>
 8013c10:	10000000 	.word	0x10000000

08013c14 <__math_oflowf>:
 8013c14:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8013c1c <__math_oflowf+0x8>
 8013c18:	f7ff bfeb 	b.w	8013bf2 <xflowf>
 8013c1c:	70000000 	.word	0x70000000

08013c20 <__kernel_rem_pio2f>:
 8013c20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013c24:	ed2d 8b04 	vpush	{d8-d9}
 8013c28:	b0d9      	sub	sp, #356	; 0x164
 8013c2a:	4688      	mov	r8, r1
 8013c2c:	9002      	str	r0, [sp, #8]
 8013c2e:	49b8      	ldr	r1, [pc, #736]	; (8013f10 <__kernel_rem_pio2f+0x2f0>)
 8013c30:	9866      	ldr	r0, [sp, #408]	; 0x198
 8013c32:	9301      	str	r3, [sp, #4]
 8013c34:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 8013c38:	9901      	ldr	r1, [sp, #4]
 8013c3a:	9b67      	ldr	r3, [sp, #412]	; 0x19c
 8013c3c:	f101 3bff 	add.w	fp, r1, #4294967295
 8013c40:	1d11      	adds	r1, r2, #4
 8013c42:	db25      	blt.n	8013c90 <__kernel_rem_pio2f+0x70>
 8013c44:	1ed0      	subs	r0, r2, #3
 8013c46:	bf48      	it	mi
 8013c48:	1d10      	addmi	r0, r2, #4
 8013c4a:	10c0      	asrs	r0, r0, #3
 8013c4c:	1c45      	adds	r5, r0, #1
 8013c4e:	00e9      	lsls	r1, r5, #3
 8013c50:	eba0 070b 	sub.w	r7, r0, fp
 8013c54:	ed9f 7ab2 	vldr	s14, [pc, #712]	; 8013f20 <__kernel_rem_pio2f+0x300>
 8013c58:	9103      	str	r1, [sp, #12]
 8013c5a:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 8013c5e:	eb0a 0c0b 	add.w	ip, sl, fp
 8013c62:	ae1c      	add	r6, sp, #112	; 0x70
 8013c64:	eb03 0e87 	add.w	lr, r3, r7, lsl #2
 8013c68:	2400      	movs	r4, #0
 8013c6a:	4564      	cmp	r4, ip
 8013c6c:	dd12      	ble.n	8013c94 <__kernel_rem_pio2f+0x74>
 8013c6e:	9901      	ldr	r1, [sp, #4]
 8013c70:	ac1c      	add	r4, sp, #112	; 0x70
 8013c72:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8013c76:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 8013c7a:	f04f 0c00 	mov.w	ip, #0
 8013c7e:	45d4      	cmp	ip, sl
 8013c80:	dc27      	bgt.n	8013cd2 <__kernel_rem_pio2f+0xb2>
 8013c82:	f8dd e008 	ldr.w	lr, [sp, #8]
 8013c86:	eddf 7aa6 	vldr	s15, [pc, #664]	; 8013f20 <__kernel_rem_pio2f+0x300>
 8013c8a:	4627      	mov	r7, r4
 8013c8c:	2600      	movs	r6, #0
 8013c8e:	e016      	b.n	8013cbe <__kernel_rem_pio2f+0x9e>
 8013c90:	2000      	movs	r0, #0
 8013c92:	e7db      	b.n	8013c4c <__kernel_rem_pio2f+0x2c>
 8013c94:	42e7      	cmn	r7, r4
 8013c96:	bf5d      	ittte	pl
 8013c98:	f85e 1024 	ldrpl.w	r1, [lr, r4, lsl #2]
 8013c9c:	ee07 1a90 	vmovpl	s15, r1
 8013ca0:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8013ca4:	eef0 7a47 	vmovmi.f32	s15, s14
 8013ca8:	ece6 7a01 	vstmia	r6!, {s15}
 8013cac:	3401      	adds	r4, #1
 8013cae:	e7dc      	b.n	8013c6a <__kernel_rem_pio2f+0x4a>
 8013cb0:	ecfe 6a01 	vldmia	lr!, {s13}
 8013cb4:	ed97 7a00 	vldr	s14, [r7]
 8013cb8:	eee6 7a87 	vfma.f32	s15, s13, s14
 8013cbc:	3601      	adds	r6, #1
 8013cbe:	455e      	cmp	r6, fp
 8013cc0:	f1a7 0704 	sub.w	r7, r7, #4
 8013cc4:	ddf4      	ble.n	8013cb0 <__kernel_rem_pio2f+0x90>
 8013cc6:	ece9 7a01 	vstmia	r9!, {s15}
 8013cca:	f10c 0c01 	add.w	ip, ip, #1
 8013cce:	3404      	adds	r4, #4
 8013cd0:	e7d5      	b.n	8013c7e <__kernel_rem_pio2f+0x5e>
 8013cd2:	a908      	add	r1, sp, #32
 8013cd4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013cd8:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8013cdc:	eddf 8a8f 	vldr	s17, [pc, #572]	; 8013f1c <__kernel_rem_pio2f+0x2fc>
 8013ce0:	ed9f 9a8d 	vldr	s18, [pc, #564]	; 8013f18 <__kernel_rem_pio2f+0x2f8>
 8013ce4:	9105      	str	r1, [sp, #20]
 8013ce6:	9304      	str	r3, [sp, #16]
 8013ce8:	4656      	mov	r6, sl
 8013cea:	00b3      	lsls	r3, r6, #2
 8013cec:	9306      	str	r3, [sp, #24]
 8013cee:	ab58      	add	r3, sp, #352	; 0x160
 8013cf0:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8013cf4:	ac08      	add	r4, sp, #32
 8013cf6:	ab44      	add	r3, sp, #272	; 0x110
 8013cf8:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 8013cfc:	46a4      	mov	ip, r4
 8013cfe:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8013d02:	4637      	mov	r7, r6
 8013d04:	2f00      	cmp	r7, #0
 8013d06:	f1a0 0004 	sub.w	r0, r0, #4
 8013d0a:	dc4a      	bgt.n	8013da2 <__kernel_rem_pio2f+0x182>
 8013d0c:	4628      	mov	r0, r5
 8013d0e:	9207      	str	r2, [sp, #28]
 8013d10:	f7ff fefe 	bl	8013b10 <scalbnf>
 8013d14:	eeb0 8a40 	vmov.f32	s16, s0
 8013d18:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8013d1c:	ee28 0a00 	vmul.f32	s0, s16, s0
 8013d20:	f000 f9f0 	bl	8014104 <floorf>
 8013d24:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8013d28:	eea0 8a67 	vfms.f32	s16, s0, s15
 8013d2c:	2d00      	cmp	r5, #0
 8013d2e:	9a07      	ldr	r2, [sp, #28]
 8013d30:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8013d34:	ee17 9a90 	vmov	r9, s15
 8013d38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013d3c:	ee38 8a67 	vsub.f32	s16, s16, s15
 8013d40:	dd41      	ble.n	8013dc6 <__kernel_rem_pio2f+0x1a6>
 8013d42:	f106 3cff 	add.w	ip, r6, #4294967295
 8013d46:	ab08      	add	r3, sp, #32
 8013d48:	f1c5 0e08 	rsb	lr, r5, #8
 8013d4c:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 8013d50:	fa47 f00e 	asr.w	r0, r7, lr
 8013d54:	4481      	add	r9, r0
 8013d56:	fa00 f00e 	lsl.w	r0, r0, lr
 8013d5a:	1a3f      	subs	r7, r7, r0
 8013d5c:	f1c5 0007 	rsb	r0, r5, #7
 8013d60:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 8013d64:	4107      	asrs	r7, r0
 8013d66:	2f00      	cmp	r7, #0
 8013d68:	dd3c      	ble.n	8013de4 <__kernel_rem_pio2f+0x1c4>
 8013d6a:	f04f 0e00 	mov.w	lr, #0
 8013d6e:	f109 0901 	add.w	r9, r9, #1
 8013d72:	4671      	mov	r1, lr
 8013d74:	4576      	cmp	r6, lr
 8013d76:	dc67      	bgt.n	8013e48 <__kernel_rem_pio2f+0x228>
 8013d78:	2d00      	cmp	r5, #0
 8013d7a:	dd03      	ble.n	8013d84 <__kernel_rem_pio2f+0x164>
 8013d7c:	2d01      	cmp	r5, #1
 8013d7e:	d074      	beq.n	8013e6a <__kernel_rem_pio2f+0x24a>
 8013d80:	2d02      	cmp	r5, #2
 8013d82:	d07b      	beq.n	8013e7c <__kernel_rem_pio2f+0x25c>
 8013d84:	2f02      	cmp	r7, #2
 8013d86:	d12d      	bne.n	8013de4 <__kernel_rem_pio2f+0x1c4>
 8013d88:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8013d8c:	ee30 8a48 	vsub.f32	s16, s0, s16
 8013d90:	b341      	cbz	r1, 8013de4 <__kernel_rem_pio2f+0x1c4>
 8013d92:	4628      	mov	r0, r5
 8013d94:	9207      	str	r2, [sp, #28]
 8013d96:	f7ff febb 	bl	8013b10 <scalbnf>
 8013d9a:	9a07      	ldr	r2, [sp, #28]
 8013d9c:	ee38 8a40 	vsub.f32	s16, s16, s0
 8013da0:	e020      	b.n	8013de4 <__kernel_rem_pio2f+0x1c4>
 8013da2:	ee60 7a28 	vmul.f32	s15, s0, s17
 8013da6:	3f01      	subs	r7, #1
 8013da8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013dac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013db0:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8013db4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8013db8:	ecac 0a01 	vstmia	ip!, {s0}
 8013dbc:	ed90 0a00 	vldr	s0, [r0]
 8013dc0:	ee37 0a80 	vadd.f32	s0, s15, s0
 8013dc4:	e79e      	b.n	8013d04 <__kernel_rem_pio2f+0xe4>
 8013dc6:	d105      	bne.n	8013dd4 <__kernel_rem_pio2f+0x1b4>
 8013dc8:	1e70      	subs	r0, r6, #1
 8013dca:	ab08      	add	r3, sp, #32
 8013dcc:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 8013dd0:	11ff      	asrs	r7, r7, #7
 8013dd2:	e7c8      	b.n	8013d66 <__kernel_rem_pio2f+0x146>
 8013dd4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8013dd8:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8013ddc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013de0:	da30      	bge.n	8013e44 <__kernel_rem_pio2f+0x224>
 8013de2:	2700      	movs	r7, #0
 8013de4:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8013de8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013dec:	f040 809a 	bne.w	8013f24 <__kernel_rem_pio2f+0x304>
 8013df0:	1e74      	subs	r4, r6, #1
 8013df2:	46a4      	mov	ip, r4
 8013df4:	2100      	movs	r1, #0
 8013df6:	45d4      	cmp	ip, sl
 8013df8:	da47      	bge.n	8013e8a <__kernel_rem_pio2f+0x26a>
 8013dfa:	2900      	cmp	r1, #0
 8013dfc:	d063      	beq.n	8013ec6 <__kernel_rem_pio2f+0x2a6>
 8013dfe:	ab08      	add	r3, sp, #32
 8013e00:	3d08      	subs	r5, #8
 8013e02:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8013e06:	2b00      	cmp	r3, #0
 8013e08:	d07f      	beq.n	8013f0a <__kernel_rem_pio2f+0x2ea>
 8013e0a:	4628      	mov	r0, r5
 8013e0c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8013e10:	f7ff fe7e 	bl	8013b10 <scalbnf>
 8013e14:	1c63      	adds	r3, r4, #1
 8013e16:	aa44      	add	r2, sp, #272	; 0x110
 8013e18:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8013f1c <__kernel_rem_pio2f+0x2fc>
 8013e1c:	0099      	lsls	r1, r3, #2
 8013e1e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8013e22:	4623      	mov	r3, r4
 8013e24:	2b00      	cmp	r3, #0
 8013e26:	f280 80ad 	bge.w	8013f84 <__kernel_rem_pio2f+0x364>
 8013e2a:	4623      	mov	r3, r4
 8013e2c:	2b00      	cmp	r3, #0
 8013e2e:	f2c0 80cb 	blt.w	8013fc8 <__kernel_rem_pio2f+0x3a8>
 8013e32:	aa44      	add	r2, sp, #272	; 0x110
 8013e34:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8013e38:	4e36      	ldr	r6, [pc, #216]	; (8013f14 <__kernel_rem_pio2f+0x2f4>)
 8013e3a:	eddf 7a39 	vldr	s15, [pc, #228]	; 8013f20 <__kernel_rem_pio2f+0x300>
 8013e3e:	2000      	movs	r0, #0
 8013e40:	1ae2      	subs	r2, r4, r3
 8013e42:	e0b6      	b.n	8013fb2 <__kernel_rem_pio2f+0x392>
 8013e44:	2702      	movs	r7, #2
 8013e46:	e790      	b.n	8013d6a <__kernel_rem_pio2f+0x14a>
 8013e48:	6820      	ldr	r0, [r4, #0]
 8013e4a:	b949      	cbnz	r1, 8013e60 <__kernel_rem_pio2f+0x240>
 8013e4c:	b118      	cbz	r0, 8013e56 <__kernel_rem_pio2f+0x236>
 8013e4e:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8013e52:	6020      	str	r0, [r4, #0]
 8013e54:	2001      	movs	r0, #1
 8013e56:	f10e 0e01 	add.w	lr, lr, #1
 8013e5a:	3404      	adds	r4, #4
 8013e5c:	4601      	mov	r1, r0
 8013e5e:	e789      	b.n	8013d74 <__kernel_rem_pio2f+0x154>
 8013e60:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 8013e64:	6020      	str	r0, [r4, #0]
 8013e66:	4608      	mov	r0, r1
 8013e68:	e7f5      	b.n	8013e56 <__kernel_rem_pio2f+0x236>
 8013e6a:	1e74      	subs	r4, r6, #1
 8013e6c:	ab08      	add	r3, sp, #32
 8013e6e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8013e72:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8013e76:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8013e7a:	e783      	b.n	8013d84 <__kernel_rem_pio2f+0x164>
 8013e7c:	1e74      	subs	r4, r6, #1
 8013e7e:	ab08      	add	r3, sp, #32
 8013e80:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8013e84:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8013e88:	e7f5      	b.n	8013e76 <__kernel_rem_pio2f+0x256>
 8013e8a:	ab08      	add	r3, sp, #32
 8013e8c:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
 8013e90:	f10c 3cff 	add.w	ip, ip, #4294967295
 8013e94:	4301      	orrs	r1, r0
 8013e96:	e7ae      	b.n	8013df6 <__kernel_rem_pio2f+0x1d6>
 8013e98:	3001      	adds	r0, #1
 8013e9a:	f854 7d04 	ldr.w	r7, [r4, #-4]!
 8013e9e:	2f00      	cmp	r7, #0
 8013ea0:	d0fa      	beq.n	8013e98 <__kernel_rem_pio2f+0x278>
 8013ea2:	9b06      	ldr	r3, [sp, #24]
 8013ea4:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8013ea8:	eb0d 0403 	add.w	r4, sp, r3
 8013eac:	9b01      	ldr	r3, [sp, #4]
 8013eae:	18f7      	adds	r7, r6, r3
 8013eb0:	ab1c      	add	r3, sp, #112	; 0x70
 8013eb2:	f106 0c01 	add.w	ip, r6, #1
 8013eb6:	3c4c      	subs	r4, #76	; 0x4c
 8013eb8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8013ebc:	4430      	add	r0, r6
 8013ebe:	4560      	cmp	r0, ip
 8013ec0:	da04      	bge.n	8013ecc <__kernel_rem_pio2f+0x2ac>
 8013ec2:	4606      	mov	r6, r0
 8013ec4:	e711      	b.n	8013cea <__kernel_rem_pio2f+0xca>
 8013ec6:	9c05      	ldr	r4, [sp, #20]
 8013ec8:	2001      	movs	r0, #1
 8013eca:	e7e6      	b.n	8013e9a <__kernel_rem_pio2f+0x27a>
 8013ecc:	9b04      	ldr	r3, [sp, #16]
 8013ece:	f8dd e008 	ldr.w	lr, [sp, #8]
 8013ed2:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8013ed6:	9306      	str	r3, [sp, #24]
 8013ed8:	ee07 3a90 	vmov	s15, r3
 8013edc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013ee0:	2600      	movs	r6, #0
 8013ee2:	ece7 7a01 	vstmia	r7!, {s15}
 8013ee6:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8013f20 <__kernel_rem_pio2f+0x300>
 8013eea:	46b9      	mov	r9, r7
 8013eec:	455e      	cmp	r6, fp
 8013eee:	dd04      	ble.n	8013efa <__kernel_rem_pio2f+0x2da>
 8013ef0:	ece4 7a01 	vstmia	r4!, {s15}
 8013ef4:	f10c 0c01 	add.w	ip, ip, #1
 8013ef8:	e7e1      	b.n	8013ebe <__kernel_rem_pio2f+0x29e>
 8013efa:	ecfe 6a01 	vldmia	lr!, {s13}
 8013efe:	ed39 7a01 	vldmdb	r9!, {s14}
 8013f02:	3601      	adds	r6, #1
 8013f04:	eee6 7a87 	vfma.f32	s15, s13, s14
 8013f08:	e7f0      	b.n	8013eec <__kernel_rem_pio2f+0x2cc>
 8013f0a:	3c01      	subs	r4, #1
 8013f0c:	e777      	b.n	8013dfe <__kernel_rem_pio2f+0x1de>
 8013f0e:	bf00      	nop
 8013f10:	08014dc0 	.word	0x08014dc0
 8013f14:	08014d94 	.word	0x08014d94
 8013f18:	43800000 	.word	0x43800000
 8013f1c:	3b800000 	.word	0x3b800000
 8013f20:	00000000 	.word	0x00000000
 8013f24:	9b03      	ldr	r3, [sp, #12]
 8013f26:	eeb0 0a48 	vmov.f32	s0, s16
 8013f2a:	1a98      	subs	r0, r3, r2
 8013f2c:	f7ff fdf0 	bl	8013b10 <scalbnf>
 8013f30:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8013f18 <__kernel_rem_pio2f+0x2f8>
 8013f34:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8013f38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f3c:	db19      	blt.n	8013f72 <__kernel_rem_pio2f+0x352>
 8013f3e:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8013f1c <__kernel_rem_pio2f+0x2fc>
 8013f42:	ee60 7a27 	vmul.f32	s15, s0, s15
 8013f46:	aa08      	add	r2, sp, #32
 8013f48:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013f4c:	1c74      	adds	r4, r6, #1
 8013f4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013f52:	3508      	adds	r5, #8
 8013f54:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8013f58:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013f5c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8013f60:	ee10 3a10 	vmov	r3, s0
 8013f64:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8013f68:	ee17 3a90 	vmov	r3, s15
 8013f6c:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8013f70:	e74b      	b.n	8013e0a <__kernel_rem_pio2f+0x1ea>
 8013f72:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8013f76:	aa08      	add	r2, sp, #32
 8013f78:	ee10 3a10 	vmov	r3, s0
 8013f7c:	4634      	mov	r4, r6
 8013f7e:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8013f82:	e742      	b.n	8013e0a <__kernel_rem_pio2f+0x1ea>
 8013f84:	a808      	add	r0, sp, #32
 8013f86:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8013f8a:	9001      	str	r0, [sp, #4]
 8013f8c:	ee07 0a90 	vmov	s15, r0
 8013f90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013f94:	3b01      	subs	r3, #1
 8013f96:	ee67 7a80 	vmul.f32	s15, s15, s0
 8013f9a:	ee20 0a07 	vmul.f32	s0, s0, s14
 8013f9e:	ed62 7a01 	vstmdb	r2!, {s15}
 8013fa2:	e73f      	b.n	8013e24 <__kernel_rem_pio2f+0x204>
 8013fa4:	ecf6 6a01 	vldmia	r6!, {s13}
 8013fa8:	ecb5 7a01 	vldmia	r5!, {s14}
 8013fac:	eee6 7a87 	vfma.f32	s15, s13, s14
 8013fb0:	3001      	adds	r0, #1
 8013fb2:	4550      	cmp	r0, sl
 8013fb4:	dc01      	bgt.n	8013fba <__kernel_rem_pio2f+0x39a>
 8013fb6:	4290      	cmp	r0, r2
 8013fb8:	ddf4      	ble.n	8013fa4 <__kernel_rem_pio2f+0x384>
 8013fba:	a858      	add	r0, sp, #352	; 0x160
 8013fbc:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8013fc0:	ed42 7a28 	vstr	s15, [r2, #-160]	; 0xffffff60
 8013fc4:	3b01      	subs	r3, #1
 8013fc6:	e731      	b.n	8013e2c <__kernel_rem_pio2f+0x20c>
 8013fc8:	9b66      	ldr	r3, [sp, #408]	; 0x198
 8013fca:	2b02      	cmp	r3, #2
 8013fcc:	dc09      	bgt.n	8013fe2 <__kernel_rem_pio2f+0x3c2>
 8013fce:	2b00      	cmp	r3, #0
 8013fd0:	dc2b      	bgt.n	801402a <__kernel_rem_pio2f+0x40a>
 8013fd2:	d044      	beq.n	801405e <__kernel_rem_pio2f+0x43e>
 8013fd4:	f009 0007 	and.w	r0, r9, #7
 8013fd8:	b059      	add	sp, #356	; 0x164
 8013fda:	ecbd 8b04 	vpop	{d8-d9}
 8013fde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013fe2:	9b66      	ldr	r3, [sp, #408]	; 0x198
 8013fe4:	2b03      	cmp	r3, #3
 8013fe6:	d1f5      	bne.n	8013fd4 <__kernel_rem_pio2f+0x3b4>
 8013fe8:	aa30      	add	r2, sp, #192	; 0xc0
 8013fea:	1f0b      	subs	r3, r1, #4
 8013fec:	4413      	add	r3, r2
 8013fee:	461a      	mov	r2, r3
 8013ff0:	4620      	mov	r0, r4
 8013ff2:	2800      	cmp	r0, #0
 8013ff4:	f1a2 0204 	sub.w	r2, r2, #4
 8013ff8:	dc52      	bgt.n	80140a0 <__kernel_rem_pio2f+0x480>
 8013ffa:	4622      	mov	r2, r4
 8013ffc:	2a01      	cmp	r2, #1
 8013ffe:	f1a3 0304 	sub.w	r3, r3, #4
 8014002:	dc5d      	bgt.n	80140c0 <__kernel_rem_pio2f+0x4a0>
 8014004:	ab30      	add	r3, sp, #192	; 0xc0
 8014006:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 8013f20 <__kernel_rem_pio2f+0x300>
 801400a:	440b      	add	r3, r1
 801400c:	2c01      	cmp	r4, #1
 801400e:	dc67      	bgt.n	80140e0 <__kernel_rem_pio2f+0x4c0>
 8014010:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8014014:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 8014018:	2f00      	cmp	r7, #0
 801401a:	d167      	bne.n	80140ec <__kernel_rem_pio2f+0x4cc>
 801401c:	edc8 6a00 	vstr	s13, [r8]
 8014020:	ed88 7a01 	vstr	s14, [r8, #4]
 8014024:	edc8 7a02 	vstr	s15, [r8, #8]
 8014028:	e7d4      	b.n	8013fd4 <__kernel_rem_pio2f+0x3b4>
 801402a:	ab30      	add	r3, sp, #192	; 0xc0
 801402c:	ed1f 7a44 	vldr	s14, [pc, #-272]	; 8013f20 <__kernel_rem_pio2f+0x300>
 8014030:	440b      	add	r3, r1
 8014032:	4622      	mov	r2, r4
 8014034:	2a00      	cmp	r2, #0
 8014036:	da24      	bge.n	8014082 <__kernel_rem_pio2f+0x462>
 8014038:	b34f      	cbz	r7, 801408e <__kernel_rem_pio2f+0x46e>
 801403a:	eef1 7a47 	vneg.f32	s15, s14
 801403e:	edc8 7a00 	vstr	s15, [r8]
 8014042:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 8014046:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801404a:	aa31      	add	r2, sp, #196	; 0xc4
 801404c:	2301      	movs	r3, #1
 801404e:	429c      	cmp	r4, r3
 8014050:	da20      	bge.n	8014094 <__kernel_rem_pio2f+0x474>
 8014052:	b10f      	cbz	r7, 8014058 <__kernel_rem_pio2f+0x438>
 8014054:	eef1 7a67 	vneg.f32	s15, s15
 8014058:	edc8 7a01 	vstr	s15, [r8, #4]
 801405c:	e7ba      	b.n	8013fd4 <__kernel_rem_pio2f+0x3b4>
 801405e:	ab30      	add	r3, sp, #192	; 0xc0
 8014060:	ed5f 7a51 	vldr	s15, [pc, #-324]	; 8013f20 <__kernel_rem_pio2f+0x300>
 8014064:	440b      	add	r3, r1
 8014066:	2c00      	cmp	r4, #0
 8014068:	da05      	bge.n	8014076 <__kernel_rem_pio2f+0x456>
 801406a:	b10f      	cbz	r7, 8014070 <__kernel_rem_pio2f+0x450>
 801406c:	eef1 7a67 	vneg.f32	s15, s15
 8014070:	edc8 7a00 	vstr	s15, [r8]
 8014074:	e7ae      	b.n	8013fd4 <__kernel_rem_pio2f+0x3b4>
 8014076:	ed33 7a01 	vldmdb	r3!, {s14}
 801407a:	3c01      	subs	r4, #1
 801407c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014080:	e7f1      	b.n	8014066 <__kernel_rem_pio2f+0x446>
 8014082:	ed73 7a01 	vldmdb	r3!, {s15}
 8014086:	3a01      	subs	r2, #1
 8014088:	ee37 7a27 	vadd.f32	s14, s14, s15
 801408c:	e7d2      	b.n	8014034 <__kernel_rem_pio2f+0x414>
 801408e:	eef0 7a47 	vmov.f32	s15, s14
 8014092:	e7d4      	b.n	801403e <__kernel_rem_pio2f+0x41e>
 8014094:	ecb2 7a01 	vldmia	r2!, {s14}
 8014098:	3301      	adds	r3, #1
 801409a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801409e:	e7d6      	b.n	801404e <__kernel_rem_pio2f+0x42e>
 80140a0:	edd2 7a00 	vldr	s15, [r2]
 80140a4:	edd2 6a01 	vldr	s13, [r2, #4]
 80140a8:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80140ac:	3801      	subs	r0, #1
 80140ae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80140b2:	ed82 7a00 	vstr	s14, [r2]
 80140b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80140ba:	edc2 7a01 	vstr	s15, [r2, #4]
 80140be:	e798      	b.n	8013ff2 <__kernel_rem_pio2f+0x3d2>
 80140c0:	edd3 7a00 	vldr	s15, [r3]
 80140c4:	edd3 6a01 	vldr	s13, [r3, #4]
 80140c8:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80140cc:	3a01      	subs	r2, #1
 80140ce:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80140d2:	ed83 7a00 	vstr	s14, [r3]
 80140d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80140da:	edc3 7a01 	vstr	s15, [r3, #4]
 80140de:	e78d      	b.n	8013ffc <__kernel_rem_pio2f+0x3dc>
 80140e0:	ed33 7a01 	vldmdb	r3!, {s14}
 80140e4:	3c01      	subs	r4, #1
 80140e6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80140ea:	e78f      	b.n	801400c <__kernel_rem_pio2f+0x3ec>
 80140ec:	eef1 6a66 	vneg.f32	s13, s13
 80140f0:	eeb1 7a47 	vneg.f32	s14, s14
 80140f4:	edc8 6a00 	vstr	s13, [r8]
 80140f8:	ed88 7a01 	vstr	s14, [r8, #4]
 80140fc:	eef1 7a67 	vneg.f32	s15, s15
 8014100:	e790      	b.n	8014024 <__kernel_rem_pio2f+0x404>
 8014102:	bf00      	nop

08014104 <floorf>:
 8014104:	ee10 3a10 	vmov	r3, s0
 8014108:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801410c:	3a7f      	subs	r2, #127	; 0x7f
 801410e:	2a16      	cmp	r2, #22
 8014110:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8014114:	dc2a      	bgt.n	801416c <floorf+0x68>
 8014116:	2a00      	cmp	r2, #0
 8014118:	da11      	bge.n	801413e <floorf+0x3a>
 801411a:	eddf 7a18 	vldr	s15, [pc, #96]	; 801417c <floorf+0x78>
 801411e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8014122:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8014126:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801412a:	dd05      	ble.n	8014138 <floorf+0x34>
 801412c:	2b00      	cmp	r3, #0
 801412e:	da23      	bge.n	8014178 <floorf+0x74>
 8014130:	4a13      	ldr	r2, [pc, #76]	; (8014180 <floorf+0x7c>)
 8014132:	2900      	cmp	r1, #0
 8014134:	bf18      	it	ne
 8014136:	4613      	movne	r3, r2
 8014138:	ee00 3a10 	vmov	s0, r3
 801413c:	4770      	bx	lr
 801413e:	4911      	ldr	r1, [pc, #68]	; (8014184 <floorf+0x80>)
 8014140:	4111      	asrs	r1, r2
 8014142:	420b      	tst	r3, r1
 8014144:	d0fa      	beq.n	801413c <floorf+0x38>
 8014146:	eddf 7a0d 	vldr	s15, [pc, #52]	; 801417c <floorf+0x78>
 801414a:	ee30 0a27 	vadd.f32	s0, s0, s15
 801414e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8014152:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014156:	ddef      	ble.n	8014138 <floorf+0x34>
 8014158:	2b00      	cmp	r3, #0
 801415a:	bfbe      	ittt	lt
 801415c:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8014160:	fa40 f202 	asrlt.w	r2, r0, r2
 8014164:	189b      	addlt	r3, r3, r2
 8014166:	ea23 0301 	bic.w	r3, r3, r1
 801416a:	e7e5      	b.n	8014138 <floorf+0x34>
 801416c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8014170:	d3e4      	bcc.n	801413c <floorf+0x38>
 8014172:	ee30 0a00 	vadd.f32	s0, s0, s0
 8014176:	4770      	bx	lr
 8014178:	2300      	movs	r3, #0
 801417a:	e7dd      	b.n	8014138 <floorf+0x34>
 801417c:	7149f2ca 	.word	0x7149f2ca
 8014180:	bf800000 	.word	0xbf800000
 8014184:	007fffff 	.word	0x007fffff

08014188 <_init>:
 8014188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801418a:	bf00      	nop
 801418c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801418e:	bc08      	pop	{r3}
 8014190:	469e      	mov	lr, r3
 8014192:	4770      	bx	lr

08014194 <_fini>:
 8014194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014196:	bf00      	nop
 8014198:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801419a:	bc08      	pop	{r3}
 801419c:	469e      	mov	lr, r3
 801419e:	4770      	bx	lr
