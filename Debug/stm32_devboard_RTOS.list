
stm32_devboard_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011740  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000bbc  08011900  08011900  00021900  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080124bc  080124bc  000301f0  2**0
                  CONTENTS
  4 .ARM          00000008  080124bc  080124bc  000224bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080124c4  080124c4  000301f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080124c4  080124c4  000224c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080124c8  080124c8  000224c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  080124cc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000060bc  200001f0  080126bc  000301f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200062ac  080126bc  000362ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00026366  00000000  00000000  00030220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004daf  00000000  00000000  00056586  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f68  00000000  00000000  0005b338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001d70  00000000  00000000  0005d2a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002fdc3  00000000  00000000  0005f010  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00024e93  00000000  00000000  0008edd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011cd6c  00000000  00000000  000b3c66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001d09d2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009afc  00000000  00000000  001d0a24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001f0 	.word	0x200001f0
 80001dc:	00000000 	.word	0x00000000
 80001e0:	080118e8 	.word	0x080118e8

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001f4 	.word	0x200001f4
 80001fc:	080118e8 	.word	0x080118e8

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_uldivmod>:
 8000bd8:	b953      	cbnz	r3, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bda:	b94a      	cbnz	r2, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	bf08      	it	eq
 8000be0:	2800      	cmpeq	r0, #0
 8000be2:	bf1c      	itt	ne
 8000be4:	f04f 31ff 	movne.w	r1, #4294967295
 8000be8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bec:	f000 b974 	b.w	8000ed8 <__aeabi_idiv0>
 8000bf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf8:	f000 f806 	bl	8000c08 <__udivmoddi4>
 8000bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c04:	b004      	add	sp, #16
 8000c06:	4770      	bx	lr

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9d08      	ldr	r5, [sp, #32]
 8000c0e:	4604      	mov	r4, r0
 8000c10:	468e      	mov	lr, r1
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d14d      	bne.n	8000cb2 <__udivmoddi4+0xaa>
 8000c16:	428a      	cmp	r2, r1
 8000c18:	4694      	mov	ip, r2
 8000c1a:	d969      	bls.n	8000cf0 <__udivmoddi4+0xe8>
 8000c1c:	fab2 f282 	clz	r2, r2
 8000c20:	b152      	cbz	r2, 8000c38 <__udivmoddi4+0x30>
 8000c22:	fa01 f302 	lsl.w	r3, r1, r2
 8000c26:	f1c2 0120 	rsb	r1, r2, #32
 8000c2a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c2e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c32:	ea41 0e03 	orr.w	lr, r1, r3
 8000c36:	4094      	lsls	r4, r2
 8000c38:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c3c:	0c21      	lsrs	r1, r4, #16
 8000c3e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c42:	fa1f f78c 	uxth.w	r7, ip
 8000c46:	fb08 e316 	mls	r3, r8, r6, lr
 8000c4a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c4e:	fb06 f107 	mul.w	r1, r6, r7
 8000c52:	4299      	cmp	r1, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x64>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c5e:	f080 811f 	bcs.w	8000ea0 <__udivmoddi4+0x298>
 8000c62:	4299      	cmp	r1, r3
 8000c64:	f240 811c 	bls.w	8000ea0 <__udivmoddi4+0x298>
 8000c68:	3e02      	subs	r6, #2
 8000c6a:	4463      	add	r3, ip
 8000c6c:	1a5b      	subs	r3, r3, r1
 8000c6e:	b2a4      	uxth	r4, r4
 8000c70:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c74:	fb08 3310 	mls	r3, r8, r0, r3
 8000c78:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c7c:	fb00 f707 	mul.w	r7, r0, r7
 8000c80:	42a7      	cmp	r7, r4
 8000c82:	d90a      	bls.n	8000c9a <__udivmoddi4+0x92>
 8000c84:	eb1c 0404 	adds.w	r4, ip, r4
 8000c88:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c8c:	f080 810a 	bcs.w	8000ea4 <__udivmoddi4+0x29c>
 8000c90:	42a7      	cmp	r7, r4
 8000c92:	f240 8107 	bls.w	8000ea4 <__udivmoddi4+0x29c>
 8000c96:	4464      	add	r4, ip
 8000c98:	3802      	subs	r0, #2
 8000c9a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c9e:	1be4      	subs	r4, r4, r7
 8000ca0:	2600      	movs	r6, #0
 8000ca2:	b11d      	cbz	r5, 8000cac <__udivmoddi4+0xa4>
 8000ca4:	40d4      	lsrs	r4, r2
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cac:	4631      	mov	r1, r6
 8000cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d909      	bls.n	8000cca <__udivmoddi4+0xc2>
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	f000 80ef 	beq.w	8000e9a <__udivmoddi4+0x292>
 8000cbc:	2600      	movs	r6, #0
 8000cbe:	e9c5 0100 	strd	r0, r1, [r5]
 8000cc2:	4630      	mov	r0, r6
 8000cc4:	4631      	mov	r1, r6
 8000cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cca:	fab3 f683 	clz	r6, r3
 8000cce:	2e00      	cmp	r6, #0
 8000cd0:	d14a      	bne.n	8000d68 <__udivmoddi4+0x160>
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d302      	bcc.n	8000cdc <__udivmoddi4+0xd4>
 8000cd6:	4282      	cmp	r2, r0
 8000cd8:	f200 80f9 	bhi.w	8000ece <__udivmoddi4+0x2c6>
 8000cdc:	1a84      	subs	r4, r0, r2
 8000cde:	eb61 0303 	sbc.w	r3, r1, r3
 8000ce2:	2001      	movs	r0, #1
 8000ce4:	469e      	mov	lr, r3
 8000ce6:	2d00      	cmp	r5, #0
 8000ce8:	d0e0      	beq.n	8000cac <__udivmoddi4+0xa4>
 8000cea:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cee:	e7dd      	b.n	8000cac <__udivmoddi4+0xa4>
 8000cf0:	b902      	cbnz	r2, 8000cf4 <__udivmoddi4+0xec>
 8000cf2:	deff      	udf	#255	; 0xff
 8000cf4:	fab2 f282 	clz	r2, r2
 8000cf8:	2a00      	cmp	r2, #0
 8000cfa:	f040 8092 	bne.w	8000e22 <__udivmoddi4+0x21a>
 8000cfe:	eba1 010c 	sub.w	r1, r1, ip
 8000d02:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d06:	fa1f fe8c 	uxth.w	lr, ip
 8000d0a:	2601      	movs	r6, #1
 8000d0c:	0c20      	lsrs	r0, r4, #16
 8000d0e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d12:	fb07 1113 	mls	r1, r7, r3, r1
 8000d16:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d1a:	fb0e f003 	mul.w	r0, lr, r3
 8000d1e:	4288      	cmp	r0, r1
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x12c>
 8000d22:	eb1c 0101 	adds.w	r1, ip, r1
 8000d26:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x12a>
 8000d2c:	4288      	cmp	r0, r1
 8000d2e:	f200 80cb 	bhi.w	8000ec8 <__udivmoddi4+0x2c0>
 8000d32:	4643      	mov	r3, r8
 8000d34:	1a09      	subs	r1, r1, r0
 8000d36:	b2a4      	uxth	r4, r4
 8000d38:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d3c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d40:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d44:	fb0e fe00 	mul.w	lr, lr, r0
 8000d48:	45a6      	cmp	lr, r4
 8000d4a:	d908      	bls.n	8000d5e <__udivmoddi4+0x156>
 8000d4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d50:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d54:	d202      	bcs.n	8000d5c <__udivmoddi4+0x154>
 8000d56:	45a6      	cmp	lr, r4
 8000d58:	f200 80bb 	bhi.w	8000ed2 <__udivmoddi4+0x2ca>
 8000d5c:	4608      	mov	r0, r1
 8000d5e:	eba4 040e 	sub.w	r4, r4, lr
 8000d62:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d66:	e79c      	b.n	8000ca2 <__udivmoddi4+0x9a>
 8000d68:	f1c6 0720 	rsb	r7, r6, #32
 8000d6c:	40b3      	lsls	r3, r6
 8000d6e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d72:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d76:	fa20 f407 	lsr.w	r4, r0, r7
 8000d7a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d7e:	431c      	orrs	r4, r3
 8000d80:	40f9      	lsrs	r1, r7
 8000d82:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d86:	fa00 f306 	lsl.w	r3, r0, r6
 8000d8a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d8e:	0c20      	lsrs	r0, r4, #16
 8000d90:	fa1f fe8c 	uxth.w	lr, ip
 8000d94:	fb09 1118 	mls	r1, r9, r8, r1
 8000d98:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9c:	fb08 f00e 	mul.w	r0, r8, lr
 8000da0:	4288      	cmp	r0, r1
 8000da2:	fa02 f206 	lsl.w	r2, r2, r6
 8000da6:	d90b      	bls.n	8000dc0 <__udivmoddi4+0x1b8>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f108 3aff 	add.w	sl, r8, #4294967295
 8000db0:	f080 8088 	bcs.w	8000ec4 <__udivmoddi4+0x2bc>
 8000db4:	4288      	cmp	r0, r1
 8000db6:	f240 8085 	bls.w	8000ec4 <__udivmoddi4+0x2bc>
 8000dba:	f1a8 0802 	sub.w	r8, r8, #2
 8000dbe:	4461      	add	r1, ip
 8000dc0:	1a09      	subs	r1, r1, r0
 8000dc2:	b2a4      	uxth	r4, r4
 8000dc4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dc8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dcc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dd0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dd4:	458e      	cmp	lr, r1
 8000dd6:	d908      	bls.n	8000dea <__udivmoddi4+0x1e2>
 8000dd8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ddc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000de0:	d26c      	bcs.n	8000ebc <__udivmoddi4+0x2b4>
 8000de2:	458e      	cmp	lr, r1
 8000de4:	d96a      	bls.n	8000ebc <__udivmoddi4+0x2b4>
 8000de6:	3802      	subs	r0, #2
 8000de8:	4461      	add	r1, ip
 8000dea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dee:	fba0 9402 	umull	r9, r4, r0, r2
 8000df2:	eba1 010e 	sub.w	r1, r1, lr
 8000df6:	42a1      	cmp	r1, r4
 8000df8:	46c8      	mov	r8, r9
 8000dfa:	46a6      	mov	lr, r4
 8000dfc:	d356      	bcc.n	8000eac <__udivmoddi4+0x2a4>
 8000dfe:	d053      	beq.n	8000ea8 <__udivmoddi4+0x2a0>
 8000e00:	b15d      	cbz	r5, 8000e1a <__udivmoddi4+0x212>
 8000e02:	ebb3 0208 	subs.w	r2, r3, r8
 8000e06:	eb61 010e 	sbc.w	r1, r1, lr
 8000e0a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e0e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e12:	40f1      	lsrs	r1, r6
 8000e14:	431f      	orrs	r7, r3
 8000e16:	e9c5 7100 	strd	r7, r1, [r5]
 8000e1a:	2600      	movs	r6, #0
 8000e1c:	4631      	mov	r1, r6
 8000e1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e22:	f1c2 0320 	rsb	r3, r2, #32
 8000e26:	40d8      	lsrs	r0, r3
 8000e28:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e2c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e30:	4091      	lsls	r1, r2
 8000e32:	4301      	orrs	r1, r0
 8000e34:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e38:	fa1f fe8c 	uxth.w	lr, ip
 8000e3c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e40:	fb07 3610 	mls	r6, r7, r0, r3
 8000e44:	0c0b      	lsrs	r3, r1, #16
 8000e46:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e4a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e4e:	429e      	cmp	r6, r3
 8000e50:	fa04 f402 	lsl.w	r4, r4, r2
 8000e54:	d908      	bls.n	8000e68 <__udivmoddi4+0x260>
 8000e56:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e5e:	d22f      	bcs.n	8000ec0 <__udivmoddi4+0x2b8>
 8000e60:	429e      	cmp	r6, r3
 8000e62:	d92d      	bls.n	8000ec0 <__udivmoddi4+0x2b8>
 8000e64:	3802      	subs	r0, #2
 8000e66:	4463      	add	r3, ip
 8000e68:	1b9b      	subs	r3, r3, r6
 8000e6a:	b289      	uxth	r1, r1
 8000e6c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e70:	fb07 3316 	mls	r3, r7, r6, r3
 8000e74:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e78:	fb06 f30e 	mul.w	r3, r6, lr
 8000e7c:	428b      	cmp	r3, r1
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x28a>
 8000e80:	eb1c 0101 	adds.w	r1, ip, r1
 8000e84:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e88:	d216      	bcs.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e8a:	428b      	cmp	r3, r1
 8000e8c:	d914      	bls.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e8e:	3e02      	subs	r6, #2
 8000e90:	4461      	add	r1, ip
 8000e92:	1ac9      	subs	r1, r1, r3
 8000e94:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e98:	e738      	b.n	8000d0c <__udivmoddi4+0x104>
 8000e9a:	462e      	mov	r6, r5
 8000e9c:	4628      	mov	r0, r5
 8000e9e:	e705      	b.n	8000cac <__udivmoddi4+0xa4>
 8000ea0:	4606      	mov	r6, r0
 8000ea2:	e6e3      	b.n	8000c6c <__udivmoddi4+0x64>
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	e6f8      	b.n	8000c9a <__udivmoddi4+0x92>
 8000ea8:	454b      	cmp	r3, r9
 8000eaa:	d2a9      	bcs.n	8000e00 <__udivmoddi4+0x1f8>
 8000eac:	ebb9 0802 	subs.w	r8, r9, r2
 8000eb0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000eb4:	3801      	subs	r0, #1
 8000eb6:	e7a3      	b.n	8000e00 <__udivmoddi4+0x1f8>
 8000eb8:	4646      	mov	r6, r8
 8000eba:	e7ea      	b.n	8000e92 <__udivmoddi4+0x28a>
 8000ebc:	4620      	mov	r0, r4
 8000ebe:	e794      	b.n	8000dea <__udivmoddi4+0x1e2>
 8000ec0:	4640      	mov	r0, r8
 8000ec2:	e7d1      	b.n	8000e68 <__udivmoddi4+0x260>
 8000ec4:	46d0      	mov	r8, sl
 8000ec6:	e77b      	b.n	8000dc0 <__udivmoddi4+0x1b8>
 8000ec8:	3b02      	subs	r3, #2
 8000eca:	4461      	add	r1, ip
 8000ecc:	e732      	b.n	8000d34 <__udivmoddi4+0x12c>
 8000ece:	4630      	mov	r0, r6
 8000ed0:	e709      	b.n	8000ce6 <__udivmoddi4+0xde>
 8000ed2:	4464      	add	r4, ip
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	e742      	b.n	8000d5e <__udivmoddi4+0x156>

08000ed8 <__aeabi_idiv0>:
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop

08000edc <FusionRadiansToDegrees>:
/**
 * @brief Converts radians to degrees.
 * @param radians Radians.
 * @return Degrees.
 */
static inline float FusionRadiansToDegrees(const float radians) {
 8000edc:	b480      	push	{r7}
 8000ede:	b083      	sub	sp, #12
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	ed87 0a01 	vstr	s0, [r7, #4]
    return radians * (180.0f / (float) M_PI);
 8000ee6:	edd7 7a01 	vldr	s15, [r7, #4]
 8000eea:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8000f00 <FusionRadiansToDegrees+0x24>
 8000eee:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8000ef2:	eeb0 0a67 	vmov.f32	s0, s15
 8000ef6:	370c      	adds	r7, #12
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr
 8000f00:	42652ee0 	.word	0x42652ee0

08000f04 <FusionAsin>:
/**
 * @brief Returns the arc sine of the value.
 * @param value Value.
 * @return Arc sine of the value.
 */
static inline float FusionAsin(const float value) {
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	ed87 0a01 	vstr	s0, [r7, #4]
    if (value <= -1.0f) {
 8000f0e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f12:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8000f16:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f1e:	d802      	bhi.n	8000f26 <FusionAsin+0x22>
        return (float) M_PI / -2.0f;
 8000f20:	eddf 7a0c 	vldr	s15, [pc, #48]	; 8000f54 <FusionAsin+0x50>
 8000f24:	e011      	b.n	8000f4a <FusionAsin+0x46>
    }
    if (value >= 1.0f) {
 8000f26:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f2a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000f2e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f36:	db02      	blt.n	8000f3e <FusionAsin+0x3a>
        return (float) M_PI / 2.0f;
 8000f38:	eddf 7a07 	vldr	s15, [pc, #28]	; 8000f58 <FusionAsin+0x54>
 8000f3c:	e005      	b.n	8000f4a <FusionAsin+0x46>
    }
    return asinf(value);
 8000f3e:	ed97 0a01 	vldr	s0, [r7, #4]
 8000f42:	f00f f9d5 	bl	80102f0 <asinf>
 8000f46:	eef0 7a40 	vmov.f32	s15, s0
}
 8000f4a:	eeb0 0a67 	vmov.f32	s0, s15
 8000f4e:	3708      	adds	r7, #8
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	bfc90fdb 	.word	0xbfc90fdb
 8000f58:	3fc90fdb 	.word	0x3fc90fdb

08000f5c <FusionVectorSubtract>:
 * @brief Returns vector B subtracted from vector A.
 * @param vectorA Vector A.
 * @param vectorB Vector B.
 * @return Vector B subtracted from vector A.
 */
static inline FusionVector FusionVectorSubtract(const FusionVector vectorA, const FusionVector vectorB) {
 8000f5c:	b480      	push	{r7}
 8000f5e:	b091      	sub	sp, #68	; 0x44
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	eeb0 5a40 	vmov.f32	s10, s0
 8000f66:	eef0 5a60 	vmov.f32	s11, s1
 8000f6a:	eeb0 6a41 	vmov.f32	s12, s2
 8000f6e:	eef0 6a61 	vmov.f32	s13, s3
 8000f72:	eeb0 7a42 	vmov.f32	s14, s4
 8000f76:	eef0 7a62 	vmov.f32	s15, s5
 8000f7a:	ed87 5a07 	vstr	s10, [r7, #28]
 8000f7e:	edc7 5a08 	vstr	s11, [r7, #32]
 8000f82:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 8000f86:	edc7 6a04 	vstr	s13, [r7, #16]
 8000f8a:	ed87 7a05 	vstr	s14, [r7, #20]
 8000f8e:	edc7 7a06 	vstr	s15, [r7, #24]
    const FusionVector result = {.axis = {
            .x = vectorA.axis.x - vectorB.axis.x,
 8000f92:	ed97 7a07 	vldr	s14, [r7, #28]
 8000f96:	edd7 7a04 	vldr	s15, [r7, #16]
 8000f9a:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8000f9e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = vectorA.axis.y - vectorB.axis.y,
 8000fa2:	ed97 7a08 	vldr	s14, [r7, #32]
 8000fa6:	edd7 7a05 	vldr	s15, [r7, #20]
 8000faa:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8000fae:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = vectorA.axis.z - vectorB.axis.z,
 8000fb2:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8000fb6:	edd7 7a06 	vldr	s15, [r7, #24]
 8000fba:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8000fbe:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    }};
    return result;
 8000fc2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000fc6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000fca:	ca07      	ldmia	r2, {r0, r1, r2}
 8000fcc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8000fd0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000fd2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000fd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000fd6:	ee06 1a90 	vmov	s13, r1
 8000fda:	ee07 2a10 	vmov	s14, r2
 8000fde:	ee07 3a90 	vmov	s15, r3
}
 8000fe2:	eeb0 0a66 	vmov.f32	s0, s13
 8000fe6:	eef0 0a47 	vmov.f32	s1, s14
 8000fea:	eeb0 1a67 	vmov.f32	s2, s15
 8000fee:	3744      	adds	r7, #68	; 0x44
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr

08000ff8 <FusionVectorHadamardProduct>:
 * @brief Calculates the Hadamard product (element-wise multiplication).
 * @param vectorA Vector A.
 * @param vectorB Vector B.
 * @return Hadamard product.
 */
static inline FusionVector FusionVectorHadamardProduct(const FusionVector vectorA, const FusionVector vectorB) {
 8000ff8:	b480      	push	{r7}
 8000ffa:	b091      	sub	sp, #68	; 0x44
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	eeb0 5a40 	vmov.f32	s10, s0
 8001002:	eef0 5a60 	vmov.f32	s11, s1
 8001006:	eeb0 6a41 	vmov.f32	s12, s2
 800100a:	eef0 6a61 	vmov.f32	s13, s3
 800100e:	eeb0 7a42 	vmov.f32	s14, s4
 8001012:	eef0 7a62 	vmov.f32	s15, s5
 8001016:	ed87 5a07 	vstr	s10, [r7, #28]
 800101a:	edc7 5a08 	vstr	s11, [r7, #32]
 800101e:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 8001022:	edc7 6a04 	vstr	s13, [r7, #16]
 8001026:	ed87 7a05 	vstr	s14, [r7, #20]
 800102a:	edc7 7a06 	vstr	s15, [r7, #24]
    const FusionVector result = {.axis = {
            .x = vectorA.axis.x * vectorB.axis.x,
 800102e:	ed97 7a07 	vldr	s14, [r7, #28]
 8001032:	edd7 7a04 	vldr	s15, [r7, #16]
 8001036:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800103a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = vectorA.axis.y * vectorB.axis.y,
 800103e:	ed97 7a08 	vldr	s14, [r7, #32]
 8001042:	edd7 7a05 	vldr	s15, [r7, #20]
 8001046:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800104a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = vectorA.axis.z * vectorB.axis.z,
 800104e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001052:	edd7 7a06 	vldr	s15, [r7, #24]
 8001056:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800105a:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    }};
    return result;
 800105e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001062:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001066:	ca07      	ldmia	r2, {r0, r1, r2}
 8001068:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800106c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800106e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001070:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001072:	ee06 1a90 	vmov	s13, r1
 8001076:	ee07 2a10 	vmov	s14, r2
 800107a:	ee07 3a90 	vmov	s15, r3
}
 800107e:	eeb0 0a66 	vmov.f32	s0, s13
 8001082:	eef0 0a47 	vmov.f32	s1, s14
 8001086:	eeb0 1a67 	vmov.f32	s2, s15
 800108a:	3744      	adds	r7, #68	; 0x44
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr

08001094 <FusionMatrixMultiplyVector>:
 * @brief Returns the multiplication of a matrix with a vector.
 * @param matrix Matrix.
 * @param vector Vector.
 * @return Multiplication of a matrix with a vector.
 */
static inline FusionVector FusionMatrixMultiplyVector(const FusionMatrix matrix, const FusionVector vector) {
 8001094:	b084      	sub	sp, #16
 8001096:	b480      	push	{r7}
 8001098:	b08f      	sub	sp, #60	; 0x3c
 800109a:	af00      	add	r7, sp, #0
 800109c:	f107 0c40 	add.w	ip, r7, #64	; 0x40
 80010a0:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 80010a4:	eef0 6a40 	vmov.f32	s13, s0
 80010a8:	eeb0 7a60 	vmov.f32	s14, s1
 80010ac:	eef0 7a41 	vmov.f32	s15, s2
 80010b0:	edc7 6a05 	vstr	s13, [r7, #20]
 80010b4:	ed87 7a06 	vstr	s14, [r7, #24]
 80010b8:	edc7 7a07 	vstr	s15, [r7, #28]
#define R matrix.element
    const FusionVector result = {.axis = {
            .x = R.xx * vector.axis.x + R.xy * vector.axis.y + R.xz * vector.axis.z,
 80010bc:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80010c0:	edd7 7a05 	vldr	s15, [r7, #20]
 80010c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010c8:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 80010cc:	edd7 7a06 	vldr	s15, [r7, #24]
 80010d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80010d8:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 80010dc:	edd7 7a07 	vldr	s15, [r7, #28]
 80010e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010e4:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80010e8:	edc7 7a08 	vstr	s15, [r7, #32]
            .y = R.yx * vector.axis.x + R.yy * vector.axis.y + R.yz * vector.axis.z,
 80010ec:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80010f0:	edd7 7a05 	vldr	s15, [r7, #20]
 80010f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010f8:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 80010fc:	edd7 7a06 	vldr	s15, [r7, #24]
 8001100:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001104:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001108:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 800110c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001110:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001114:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8001118:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            .z = R.zx * vector.axis.x + R.zy * vector.axis.y + R.zz * vector.axis.z,
 800111c:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8001120:	edd7 7a05 	vldr	s15, [r7, #20]
 8001124:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001128:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 800112c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001130:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001134:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001138:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 800113c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001140:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001144:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8001148:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    }};
    return result;
 800114c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001150:	f107 0220 	add.w	r2, r7, #32
 8001154:	ca07      	ldmia	r2, {r0, r1, r2}
 8001156:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800115a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800115c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800115e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001160:	ee06 1a90 	vmov	s13, r1
 8001164:	ee07 2a10 	vmov	s14, r2
 8001168:	ee07 3a90 	vmov	s15, r3
#undef R
}
 800116c:	eeb0 0a66 	vmov.f32	s0, s13
 8001170:	eef0 0a47 	vmov.f32	s1, s14
 8001174:	eeb0 1a67 	vmov.f32	s2, s15
 8001178:	373c      	adds	r7, #60	; 0x3c
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	b004      	add	sp, #16
 8001182:	4770      	bx	lr

08001184 <FusionQuaternionToEuler>:
/**
 * @brief Converts a quaternion to ZYX Euler angles in degrees.
 * @param quaternion Quaternion.
 * @return Euler angles in degrees.
 */
static inline FusionEuler FusionQuaternionToEuler(const FusionQuaternion quaternion) {
 8001184:	b580      	push	{r7, lr}
 8001186:	b090      	sub	sp, #64	; 0x40
 8001188:	af00      	add	r7, sp, #0
 800118a:	eeb0 6a40 	vmov.f32	s12, s0
 800118e:	eef0 6a60 	vmov.f32	s13, s1
 8001192:	eeb0 7a41 	vmov.f32	s14, s2
 8001196:	eef0 7a61 	vmov.f32	s15, s3
 800119a:	ed87 6a04 	vstr	s12, [r7, #16]
 800119e:	edc7 6a05 	vstr	s13, [r7, #20]
 80011a2:	ed87 7a06 	vstr	s14, [r7, #24]
 80011a6:	edc7 7a07 	vstr	s15, [r7, #28]
#define Q quaternion.element
    const float halfMinusQySquared = 0.5f - Q.y * Q.y; // calculate common terms to avoid repeated operations
 80011aa:	ed97 7a06 	vldr	s14, [r7, #24]
 80011ae:	edd7 7a06 	vldr	s15, [r7, #24]
 80011b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011b6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80011ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011be:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    const FusionEuler euler = {.angle = {
            .roll = FusionRadiansToDegrees(atan2f(Q.w * Q.x + Q.y * Q.z, halfMinusQySquared - Q.x * Q.x)),
 80011c2:	ed97 7a04 	vldr	s14, [r7, #16]
 80011c6:	edd7 7a05 	vldr	s15, [r7, #20]
 80011ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011ce:	edd7 6a06 	vldr	s13, [r7, #24]
 80011d2:	edd7 7a07 	vldr	s15, [r7, #28]
 80011d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011da:	ee77 6a27 	vadd.f32	s13, s14, s15
 80011de:	ed97 7a05 	vldr	s14, [r7, #20]
 80011e2:	edd7 7a05 	vldr	s15, [r7, #20]
 80011e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011ea:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80011ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011f2:	eef0 0a67 	vmov.f32	s1, s15
 80011f6:	eeb0 0a66 	vmov.f32	s0, s13
 80011fa:	f00f f8a5 	bl	8010348 <atan2f>
 80011fe:	eef0 7a40 	vmov.f32	s15, s0
 8001202:	eeb0 0a67 	vmov.f32	s0, s15
 8001206:	f7ff fe69 	bl	8000edc <FusionRadiansToDegrees>
 800120a:	eef0 7a40 	vmov.f32	s15, s0
    const FusionEuler euler = {.angle = {
 800120e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            .pitch = FusionRadiansToDegrees(FusionAsin(2.0f * (Q.w * Q.y - Q.z * Q.x))),
 8001212:	ed97 7a04 	vldr	s14, [r7, #16]
 8001216:	edd7 7a06 	vldr	s15, [r7, #24]
 800121a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800121e:	edd7 6a07 	vldr	s13, [r7, #28]
 8001222:	edd7 7a05 	vldr	s15, [r7, #20]
 8001226:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800122a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800122e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001232:	eeb0 0a67 	vmov.f32	s0, s15
 8001236:	f7ff fe65 	bl	8000f04 <FusionAsin>
 800123a:	eef0 7a40 	vmov.f32	s15, s0
 800123e:	eeb0 0a67 	vmov.f32	s0, s15
 8001242:	f7ff fe4b 	bl	8000edc <FusionRadiansToDegrees>
 8001246:	eef0 7a40 	vmov.f32	s15, s0
    const FusionEuler euler = {.angle = {
 800124a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .yaw = FusionRadiansToDegrees(atan2f(Q.w * Q.z + Q.x * Q.y, halfMinusQySquared - Q.z * Q.z)),
 800124e:	ed97 7a04 	vldr	s14, [r7, #16]
 8001252:	edd7 7a07 	vldr	s15, [r7, #28]
 8001256:	ee27 7a27 	vmul.f32	s14, s14, s15
 800125a:	edd7 6a05 	vldr	s13, [r7, #20]
 800125e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001262:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001266:	ee77 6a27 	vadd.f32	s13, s14, s15
 800126a:	ed97 7a07 	vldr	s14, [r7, #28]
 800126e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001272:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001276:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800127a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800127e:	eef0 0a67 	vmov.f32	s1, s15
 8001282:	eeb0 0a66 	vmov.f32	s0, s13
 8001286:	f00f f85f 	bl	8010348 <atan2f>
 800128a:	eef0 7a40 	vmov.f32	s15, s0
 800128e:	eeb0 0a67 	vmov.f32	s0, s15
 8001292:	f7ff fe23 	bl	8000edc <FusionRadiansToDegrees>
 8001296:	eef0 7a40 	vmov.f32	s15, s0
    const FusionEuler euler = {.angle = {
 800129a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    }};
    return euler;
 800129e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80012a2:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80012a6:	ca07      	ldmia	r2, {r0, r1, r2}
 80012a8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80012ac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80012ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80012b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80012b2:	ee06 1a90 	vmov	s13, r1
 80012b6:	ee07 2a10 	vmov	s14, r2
 80012ba:	ee07 3a90 	vmov	s15, r3
#undef Q
}
 80012be:	eeb0 0a66 	vmov.f32	s0, s13
 80012c2:	eef0 0a47 	vmov.f32	s1, s14
 80012c6:	eeb0 1a67 	vmov.f32	s2, s15
 80012ca:	3740      	adds	r7, #64	; 0x40
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}

080012d0 <FusionCalibrationInertial>:
 * @param misalignment Misalignment matrix.
 * @param sensitivity Sensitivity.
 * @param offset Offset.
 * @return Calibrated measurement.
 */
static inline FusionVector FusionCalibrationInertial(const FusionVector uncalibrated, const FusionMatrix misalignment, const FusionVector sensitivity, const FusionVector offset) {
 80012d0:	b084      	sub	sp, #16
 80012d2:	b5b0      	push	{r4, r5, r7, lr}
 80012d4:	b09e      	sub	sp, #120	; 0x78
 80012d6:	af06      	add	r7, sp, #24
 80012d8:	eef0 4a41 	vmov.f32	s9, s2
 80012dc:	f107 0470 	add.w	r4, r7, #112	; 0x70
 80012e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80012e4:	eeb0 5a61 	vmov.f32	s10, s3
 80012e8:	eef0 5a42 	vmov.f32	s11, s4
 80012ec:	eeb0 6a62 	vmov.f32	s12, s5
 80012f0:	eef0 6a43 	vmov.f32	s13, s6
 80012f4:	eeb0 7a63 	vmov.f32	s14, s7
 80012f8:	eef0 7a44 	vmov.f32	s15, s8
 80012fc:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
 8001300:	edc7 0a0c 	vstr	s1, [r7, #48]	; 0x30
 8001304:	edc7 4a0d 	vstr	s9, [r7, #52]	; 0x34
 8001308:	ed87 5a08 	vstr	s10, [r7, #32]
 800130c:	edc7 5a09 	vstr	s11, [r7, #36]	; 0x24
 8001310:	ed87 6a0a 	vstr	s12, [r7, #40]	; 0x28
 8001314:	edc7 6a05 	vstr	s13, [r7, #20]
 8001318:	ed87 7a06 	vstr	s14, [r7, #24]
 800131c:	edc7 7a07 	vstr	s15, [r7, #28]
    return FusionMatrixMultiplyVector(misalignment, FusionVectorHadamardProduct(FusionVectorSubtract(uncalibrated, offset), sensitivity));
 8001320:	ed97 5a05 	vldr	s10, [r7, #20]
 8001324:	edd7 5a06 	vldr	s11, [r7, #24]
 8001328:	ed97 6a07 	vldr	s12, [r7, #28]
 800132c:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8001330:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8001334:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001338:	eef0 1a45 	vmov.f32	s3, s10
 800133c:	eeb0 2a65 	vmov.f32	s4, s11
 8001340:	eef0 2a46 	vmov.f32	s5, s12
 8001344:	eeb0 0a66 	vmov.f32	s0, s13
 8001348:	eef0 0a47 	vmov.f32	s1, s14
 800134c:	eeb0 1a67 	vmov.f32	s2, s15
 8001350:	f7ff fe04 	bl	8000f5c <FusionVectorSubtract>
 8001354:	eef0 6a40 	vmov.f32	s13, s0
 8001358:	eeb0 7a60 	vmov.f32	s14, s1
 800135c:	eef0 7a41 	vmov.f32	s15, s2
 8001360:	edc7 6a12 	vstr	s13, [r7, #72]	; 0x48
 8001364:	ed87 7a13 	vstr	s14, [r7, #76]	; 0x4c
 8001368:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
 800136c:	ed97 5a08 	vldr	s10, [r7, #32]
 8001370:	edd7 5a09 	vldr	s11, [r7, #36]	; 0x24
 8001374:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 8001378:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 800137c:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001380:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8001384:	eef0 1a45 	vmov.f32	s3, s10
 8001388:	eeb0 2a65 	vmov.f32	s4, s11
 800138c:	eef0 2a46 	vmov.f32	s5, s12
 8001390:	eeb0 0a66 	vmov.f32	s0, s13
 8001394:	eef0 0a47 	vmov.f32	s1, s14
 8001398:	eeb0 1a67 	vmov.f32	s2, s15
 800139c:	f7ff fe2c 	bl	8000ff8 <FusionVectorHadamardProduct>
 80013a0:	eef0 6a40 	vmov.f32	s13, s0
 80013a4:	eeb0 7a60 	vmov.f32	s14, s1
 80013a8:	eef0 7a41 	vmov.f32	s15, s2
 80013ac:	edc7 6a15 	vstr	s13, [r7, #84]	; 0x54
 80013b0:	ed87 7a16 	vstr	s14, [r7, #88]	; 0x58
 80013b4:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
 80013b8:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 80013bc:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80013c0:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80013c4:	466d      	mov	r5, sp
 80013c6:	f107 0480 	add.w	r4, r7, #128	; 0x80
 80013ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013ce:	6823      	ldr	r3, [r4, #0]
 80013d0:	602b      	str	r3, [r5, #0]
 80013d2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80013d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013d8:	eeb0 0a66 	vmov.f32	s0, s13
 80013dc:	eef0 0a47 	vmov.f32	s1, s14
 80013e0:	eeb0 1a67 	vmov.f32	s2, s15
 80013e4:	f7ff fe56 	bl	8001094 <FusionMatrixMultiplyVector>
 80013e8:	eef0 6a40 	vmov.f32	s13, s0
 80013ec:	eeb0 7a60 	vmov.f32	s14, s1
 80013f0:	eef0 7a41 	vmov.f32	s15, s2
 80013f4:	edc7 6a0f 	vstr	s13, [r7, #60]	; 0x3c
 80013f8:	ed87 7a10 	vstr	s14, [r7, #64]	; 0x40
 80013fc:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
 8001400:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001402:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001404:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001406:	ee06 1a90 	vmov	s13, r1
 800140a:	ee07 2a10 	vmov	s14, r2
 800140e:	ee07 3a90 	vmov	s15, r3
}
 8001412:	eeb0 0a66 	vmov.f32	s0, s13
 8001416:	eef0 0a47 	vmov.f32	s1, s14
 800141a:	eeb0 1a67 	vmov.f32	s2, s15
 800141e:	3760      	adds	r7, #96	; 0x60
 8001420:	46bd      	mov	sp, r7
 8001422:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001426:	b004      	add	sp, #16
 8001428:	4770      	bx	lr

0800142a <FusionCalibrationMagnetic>:
 * @param uncalibrated Uncalibrated measurement.
 * @param softIronMatrix Soft-iron matrix.
 * @param hardIronOffset Hard-iron offset.
 * @return Calibrated measurement.
 */
static inline FusionVector FusionCalibrationMagnetic(const FusionVector uncalibrated, const FusionMatrix softIronMatrix, const FusionVector hardIronOffset) {
 800142a:	b084      	sub	sp, #16
 800142c:	b5b0      	push	{r4, r5, r7, lr}
 800142e:	b096      	sub	sp, #88	; 0x58
 8001430:	af06      	add	r7, sp, #24
 8001432:	eeb0 5a40 	vmov.f32	s10, s0
 8001436:	eef0 5a60 	vmov.f32	s11, s1
 800143a:	eeb0 6a41 	vmov.f32	s12, s2
 800143e:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8001442:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001446:	eef0 6a61 	vmov.f32	s13, s3
 800144a:	eeb0 7a42 	vmov.f32	s14, s4
 800144e:	eef0 7a62 	vmov.f32	s15, s5
 8001452:	ed87 5a07 	vstr	s10, [r7, #28]
 8001456:	edc7 5a08 	vstr	s11, [r7, #32]
 800145a:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 800145e:	edc7 6a04 	vstr	s13, [r7, #16]
 8001462:	ed87 7a05 	vstr	s14, [r7, #20]
 8001466:	edc7 7a06 	vstr	s15, [r7, #24]
    return FusionVectorSubtract(FusionMatrixMultiplyVector(softIronMatrix, uncalibrated), hardIronOffset);
 800146a:	edd7 6a07 	vldr	s13, [r7, #28]
 800146e:	ed97 7a08 	vldr	s14, [r7, #32]
 8001472:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001476:	466d      	mov	r5, sp
 8001478:	f107 0460 	add.w	r4, r7, #96	; 0x60
 800147c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800147e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001480:	6823      	ldr	r3, [r4, #0]
 8001482:	602b      	str	r3, [r5, #0]
 8001484:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001488:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800148a:	eeb0 0a66 	vmov.f32	s0, s13
 800148e:	eef0 0a47 	vmov.f32	s1, s14
 8001492:	eeb0 1a67 	vmov.f32	s2, s15
 8001496:	f7ff fdfd 	bl	8001094 <FusionMatrixMultiplyVector>
 800149a:	eef0 6a40 	vmov.f32	s13, s0
 800149e:	eeb0 7a60 	vmov.f32	s14, s1
 80014a2:	eef0 7a41 	vmov.f32	s15, s2
 80014a6:	edc7 6a0d 	vstr	s13, [r7, #52]	; 0x34
 80014aa:	ed87 7a0e 	vstr	s14, [r7, #56]	; 0x38
 80014ae:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
 80014b2:	ed97 5a04 	vldr	s10, [r7, #16]
 80014b6:	edd7 5a05 	vldr	s11, [r7, #20]
 80014ba:	ed97 6a06 	vldr	s12, [r7, #24]
 80014be:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 80014c2:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80014c6:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80014ca:	eef0 1a45 	vmov.f32	s3, s10
 80014ce:	eeb0 2a65 	vmov.f32	s4, s11
 80014d2:	eef0 2a46 	vmov.f32	s5, s12
 80014d6:	eeb0 0a66 	vmov.f32	s0, s13
 80014da:	eef0 0a47 	vmov.f32	s1, s14
 80014de:	eeb0 1a67 	vmov.f32	s2, s15
 80014e2:	f7ff fd3b 	bl	8000f5c <FusionVectorSubtract>
 80014e6:	eef0 6a40 	vmov.f32	s13, s0
 80014ea:	eeb0 7a60 	vmov.f32	s14, s1
 80014ee:	eef0 7a41 	vmov.f32	s15, s2
 80014f2:	edc7 6a0a 	vstr	s13, [r7, #40]	; 0x28
 80014f6:	ed87 7a0b 	vstr	s14, [r7, #44]	; 0x2c
 80014fa:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 80014fe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001500:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001504:	ee06 1a90 	vmov	s13, r1
 8001508:	ee07 2a10 	vmov	s14, r2
 800150c:	ee07 3a90 	vmov	s15, r3
}
 8001510:	eeb0 0a66 	vmov.f32	s0, s13
 8001514:	eef0 0a47 	vmov.f32	s1, s14
 8001518:	eeb0 1a67 	vmov.f32	s2, s15
 800151c:	3740      	adds	r7, #64	; 0x40
 800151e:	46bd      	mov	sp, r7
 8001520:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001524:	b004      	add	sp, #16
 8001526:	4770      	bx	lr

08001528 <FusionInit>:

FusionAhrs ahrs;
FusionOffset offset;

/* Initialize Fusion algorithm. */
void FusionInit(void){
 8001528:	b5b0      	push	{r4, r5, r7, lr}
 800152a:	b086      	sub	sp, #24
 800152c:	af00      	add	r7, sp, #0
	FusionOffsetInitialise(&offset, SAMPLE_RATE);
 800152e:	2146      	movs	r1, #70	; 0x46
 8001530:	480a      	ldr	r0, [pc, #40]	; (800155c <FusionInit+0x34>)
 8001532:	f002 fa57 	bl	80039e4 <FusionOffsetInitialise>
	FusionAhrsInitialise(&ahrs);
 8001536:	480a      	ldr	r0, [pc, #40]	; (8001560 <FusionInit+0x38>)
 8001538:	f000 fe6c 	bl	8002214 <FusionAhrsInitialise>
	const FusionAhrsSettings settings = {
 800153c:	4b09      	ldr	r3, [pc, #36]	; (8001564 <FusionInit+0x3c>)
 800153e:	1d3c      	adds	r4, r7, #4
 8001540:	461d      	mov	r5, r3
 8001542:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001544:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001546:	682b      	ldr	r3, [r5, #0]
 8001548:	6023      	str	r3, [r4, #0]
			.gain = 0.5f,
			.accelerationRejection = 10.0f,
			.magneticRejection = 20.0f,
			.rejectionTimeout = 5 * SAMPLE_RATE, /* 5 seconds */
	};
	FusionAhrsSetSettings(&ahrs, &settings);
 800154a:	1d3b      	adds	r3, r7, #4
 800154c:	4619      	mov	r1, r3
 800154e:	4804      	ldr	r0, [pc, #16]	; (8001560 <FusionInit+0x38>)
 8001550:	f000 feda 	bl	8002308 <FusionAhrsSetSettings>

}
 8001554:	bf00      	nop
 8001556:	3718      	adds	r7, #24
 8001558:	46bd      	mov	sp, r7
 800155a:	bdb0      	pop	{r4, r5, r7, pc}
 800155c:	20000274 	.word	0x20000274
 8001560:	2000020c 	.word	0x2000020c
 8001564:	08011900 	.word	0x08011900

08001568 <FusionCalcHeading>:
	*output_angles = FusionQuaternionToEuler(FusionAhrsGetQuaternion(&ahrs));
	//	const FusionVect = FusionQuaternionToEuler(FusionAhrsGetQuaternion(&ahrs));
}

/* Calculate heading based on all three sensors.*/
void FusionCalcHeading(mems_data_t *memsData, FusionEuler *output_angles){
 8001568:	b5f0      	push	{r4, r5, r6, r7, lr}
 800156a:	b099      	sub	sp, #100	; 0x64
 800156c:	af06      	add	r7, sp, #24
 800156e:	6078      	str	r0, [r7, #4]
 8001570:	6039      	str	r1, [r7, #0]
	const clock_t timestamp = memsData->timestamp; // timestamp taken from LSM6DRX gyroscope.
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001576:	647b      	str	r3, [r7, #68]	; 0x44
	FusionVector gyroscope = {memsData->gyro_x, memsData->gyro_y, memsData->gyro_z};
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	627b      	str	r3, [r7, #36]	; 0x24
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	62bb      	str	r3, [r7, #40]	; 0x28
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	689b      	ldr	r3, [r3, #8]
 8001588:	62fb      	str	r3, [r7, #44]	; 0x2c
	FusionVector accelerometer = {memsData->acc_x, memsData->acc_y, memsData->acc_z};
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	68db      	ldr	r3, [r3, #12]
 800158e:	61bb      	str	r3, [r7, #24]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	691b      	ldr	r3, [r3, #16]
 8001594:	61fb      	str	r3, [r7, #28]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	695b      	ldr	r3, [r3, #20]
 800159a:	623b      	str	r3, [r7, #32]
	FusionVector magnetometer = {memsData->magn_x, memsData->magn_y, memsData->magn_z}; // replace this with actual magnetometer data in arbitrary units
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	699b      	ldr	r3, [r3, #24]
 80015a0:	60fb      	str	r3, [r7, #12]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	69db      	ldr	r3, [r3, #28]
 80015a6:	613b      	str	r3, [r7, #16]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6a1b      	ldr	r3, [r3, #32]
 80015ac:	617b      	str	r3, [r7, #20]

	// Apply calibration
	gyroscope = FusionCalibrationInertial(gyroscope, gyroscopeMisalignment, gyroscopeSensitivity, gyroscopeOffset);
 80015ae:	4bb4      	ldr	r3, [pc, #720]	; (8001880 <FusionCalcHeading+0x318>)
 80015b0:	edd3 3a00 	vldr	s7, [r3]
 80015b4:	ed93 4a01 	vldr	s8, [r3, #4]
 80015b8:	edd3 4a02 	vldr	s9, [r3, #8]
 80015bc:	4bb1      	ldr	r3, [pc, #708]	; (8001884 <FusionCalcHeading+0x31c>)
 80015be:	ed93 5a00 	vldr	s10, [r3]
 80015c2:	edd3 5a01 	vldr	s11, [r3, #4]
 80015c6:	ed93 6a02 	vldr	s12, [r3, #8]
 80015ca:	4eaf      	ldr	r6, [pc, #700]	; (8001888 <FusionCalcHeading+0x320>)
 80015cc:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80015d0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80015d4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80015d8:	466d      	mov	r5, sp
 80015da:	f106 0410 	add.w	r4, r6, #16
 80015de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015e2:	6823      	ldr	r3, [r4, #0]
 80015e4:	602b      	str	r3, [r5, #0]
 80015e6:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80015ea:	eeb0 3a63 	vmov.f32	s6, s7
 80015ee:	eef0 3a44 	vmov.f32	s7, s8
 80015f2:	eeb0 4a64 	vmov.f32	s8, s9
 80015f6:	eef0 1a45 	vmov.f32	s3, s10
 80015fa:	eeb0 2a65 	vmov.f32	s4, s11
 80015fe:	eef0 2a46 	vmov.f32	s5, s12
 8001602:	eeb0 0a66 	vmov.f32	s0, s13
 8001606:	eef0 0a47 	vmov.f32	s1, s14
 800160a:	eeb0 1a67 	vmov.f32	s2, s15
 800160e:	f7ff fe5f 	bl	80012d0 <FusionCalibrationInertial>
 8001612:	eef0 6a40 	vmov.f32	s13, s0
 8001616:	eeb0 7a60 	vmov.f32	s14, s1
 800161a:	eef0 7a41 	vmov.f32	s15, s2
 800161e:	edc7 6a09 	vstr	s13, [r7, #36]	; 0x24
 8001622:	ed87 7a0a 	vstr	s14, [r7, #40]	; 0x28
 8001626:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	accelerometer = FusionCalibrationInertial(accelerometer, accelerometerMisalignment, accelerometerSensitivity, accelerometerOffset);
 800162a:	4b98      	ldr	r3, [pc, #608]	; (800188c <FusionCalcHeading+0x324>)
 800162c:	edd3 3a00 	vldr	s7, [r3]
 8001630:	ed93 4a01 	vldr	s8, [r3, #4]
 8001634:	edd3 4a02 	vldr	s9, [r3, #8]
 8001638:	4b95      	ldr	r3, [pc, #596]	; (8001890 <FusionCalcHeading+0x328>)
 800163a:	ed93 5a00 	vldr	s10, [r3]
 800163e:	edd3 5a01 	vldr	s11, [r3, #4]
 8001642:	ed93 6a02 	vldr	s12, [r3, #8]
 8001646:	4e93      	ldr	r6, [pc, #588]	; (8001894 <FusionCalcHeading+0x32c>)
 8001648:	edd7 6a06 	vldr	s13, [r7, #24]
 800164c:	ed97 7a07 	vldr	s14, [r7, #28]
 8001650:	edd7 7a08 	vldr	s15, [r7, #32]
 8001654:	466d      	mov	r5, sp
 8001656:	f106 0410 	add.w	r4, r6, #16
 800165a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800165c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800165e:	6823      	ldr	r3, [r4, #0]
 8001660:	602b      	str	r3, [r5, #0]
 8001662:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001666:	eeb0 3a63 	vmov.f32	s6, s7
 800166a:	eef0 3a44 	vmov.f32	s7, s8
 800166e:	eeb0 4a64 	vmov.f32	s8, s9
 8001672:	eef0 1a45 	vmov.f32	s3, s10
 8001676:	eeb0 2a65 	vmov.f32	s4, s11
 800167a:	eef0 2a46 	vmov.f32	s5, s12
 800167e:	eeb0 0a66 	vmov.f32	s0, s13
 8001682:	eef0 0a47 	vmov.f32	s1, s14
 8001686:	eeb0 1a67 	vmov.f32	s2, s15
 800168a:	f7ff fe21 	bl	80012d0 <FusionCalibrationInertial>
 800168e:	eef0 6a40 	vmov.f32	s13, s0
 8001692:	eeb0 7a60 	vmov.f32	s14, s1
 8001696:	eef0 7a41 	vmov.f32	s15, s2
 800169a:	edc7 6a06 	vstr	s13, [r7, #24]
 800169e:	ed87 7a07 	vstr	s14, [r7, #28]
 80016a2:	edc7 7a08 	vstr	s15, [r7, #32]
	magnetometer = FusionCalibrationMagnetic(magnetometer, softIronMatrix, hardIronOffset);
 80016a6:	4b7c      	ldr	r3, [pc, #496]	; (8001898 <FusionCalcHeading+0x330>)
 80016a8:	ed93 5a00 	vldr	s10, [r3]
 80016ac:	edd3 5a01 	vldr	s11, [r3, #4]
 80016b0:	ed93 6a02 	vldr	s12, [r3, #8]
 80016b4:	4e79      	ldr	r6, [pc, #484]	; (800189c <FusionCalcHeading+0x334>)
 80016b6:	edd7 6a03 	vldr	s13, [r7, #12]
 80016ba:	ed97 7a04 	vldr	s14, [r7, #16]
 80016be:	edd7 7a05 	vldr	s15, [r7, #20]
 80016c2:	466d      	mov	r5, sp
 80016c4:	f106 0410 	add.w	r4, r6, #16
 80016c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016cc:	6823      	ldr	r3, [r4, #0]
 80016ce:	602b      	str	r3, [r5, #0]
 80016d0:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80016d4:	eef0 1a45 	vmov.f32	s3, s10
 80016d8:	eeb0 2a65 	vmov.f32	s4, s11
 80016dc:	eef0 2a46 	vmov.f32	s5, s12
 80016e0:	eeb0 0a66 	vmov.f32	s0, s13
 80016e4:	eef0 0a47 	vmov.f32	s1, s14
 80016e8:	eeb0 1a67 	vmov.f32	s2, s15
 80016ec:	f7ff fe9d 	bl	800142a <FusionCalibrationMagnetic>
 80016f0:	eef0 6a40 	vmov.f32	s13, s0
 80016f4:	eeb0 7a60 	vmov.f32	s14, s1
 80016f8:	eef0 7a41 	vmov.f32	s15, s2
 80016fc:	edc7 6a03 	vstr	s13, [r7, #12]
 8001700:	ed87 7a04 	vstr	s14, [r7, #16]
 8001704:	edc7 7a05 	vstr	s15, [r7, #20]

	// Update gyroscope offset correction algorithm
	gyroscope = FusionOffsetUpdate(&offset, gyroscope);
 8001708:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800170c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001710:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001714:	eeb0 0a66 	vmov.f32	s0, s13
 8001718:	eef0 0a47 	vmov.f32	s1, s14
 800171c:	eeb0 1a67 	vmov.f32	s2, s15
 8001720:	485f      	ldr	r0, [pc, #380]	; (80018a0 <FusionCalcHeading+0x338>)
 8001722:	f002 f991 	bl	8003a48 <FusionOffsetUpdate>
 8001726:	eef0 6a40 	vmov.f32	s13, s0
 800172a:	eeb0 7a60 	vmov.f32	s14, s1
 800172e:	eef0 7a41 	vmov.f32	s15, s2
 8001732:	edc7 6a09 	vstr	s13, [r7, #36]	; 0x24
 8001736:	ed87 7a0a 	vstr	s14, [r7, #40]	; 0x28
 800173a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

	// Calculate delta time (in seconds) to account for gyroscope sample clock error
	static clock_t previousTimestamp;
	const float deltaTime = (float) (timestamp - previousTimestamp) / (float) CLOCKS_PER_SEC;
 800173e:	4b59      	ldr	r3, [pc, #356]	; (80018a4 <FusionCalcHeading+0x33c>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001744:	1ad3      	subs	r3, r2, r3
 8001746:	ee07 3a90 	vmov	s15, r3
 800174a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800174e:	eddf 6a56 	vldr	s13, [pc, #344]	; 80018a8 <FusionCalcHeading+0x340>
 8001752:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001756:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
	previousTimestamp = timestamp;
 800175a:	4a52      	ldr	r2, [pc, #328]	; (80018a4 <FusionCalcHeading+0x33c>)
 800175c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800175e:	6013      	str	r3, [r2, #0]


	// Update gyroscope AHRS algorithm
	FusionAhrsUpdate(&ahrs, gyroscope, accelerometer, magnetometer, deltaTime);
 8001760:	ed97 3a03 	vldr	s6, [r7, #12]
 8001764:	edd7 3a04 	vldr	s7, [r7, #16]
 8001768:	ed97 4a05 	vldr	s8, [r7, #20]
 800176c:	ed97 5a06 	vldr	s10, [r7, #24]
 8001770:	edd7 5a07 	vldr	s11, [r7, #28]
 8001774:	ed97 6a08 	vldr	s12, [r7, #32]
 8001778:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800177c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001780:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001784:	edd7 4a10 	vldr	s9, [r7, #64]	; 0x40
 8001788:	eef0 1a45 	vmov.f32	s3, s10
 800178c:	eeb0 2a65 	vmov.f32	s4, s11
 8001790:	eef0 2a46 	vmov.f32	s5, s12
 8001794:	eeb0 0a66 	vmov.f32	s0, s13
 8001798:	eef0 0a47 	vmov.f32	s1, s14
 800179c:	eeb0 1a67 	vmov.f32	s2, s15
 80017a0:	4842      	ldr	r0, [pc, #264]	; (80018ac <FusionCalcHeading+0x344>)
 80017a2:	f000 fe3f 	bl	8002424 <FusionAhrsUpdate>

	// Print algorithm outputs
	*output_angles = FusionQuaternionToEuler(FusionAhrsGetQuaternion(&ahrs));
 80017a6:	4841      	ldr	r0, [pc, #260]	; (80018ac <FusionCalcHeading+0x344>)
 80017a8:	f001 fb64 	bl	8002e74 <FusionAhrsGetQuaternion>
 80017ac:	eeb0 6a40 	vmov.f32	s12, s0
 80017b0:	eef0 6a60 	vmov.f32	s13, s1
 80017b4:	eeb0 7a41 	vmov.f32	s14, s2
 80017b8:	eef0 7a61 	vmov.f32	s15, s3
 80017bc:	ed87 6a0c 	vstr	s12, [r7, #48]	; 0x30
 80017c0:	edc7 6a0d 	vstr	s13, [r7, #52]	; 0x34
 80017c4:	ed87 7a0e 	vstr	s14, [r7, #56]	; 0x38
 80017c8:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
 80017cc:	ed97 6a0c 	vldr	s12, [r7, #48]	; 0x30
 80017d0:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 80017d4:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80017d8:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80017dc:	eeb0 0a46 	vmov.f32	s0, s12
 80017e0:	eef0 0a66 	vmov.f32	s1, s13
 80017e4:	eeb0 1a47 	vmov.f32	s2, s14
 80017e8:	eef0 1a67 	vmov.f32	s3, s15
 80017ec:	f7ff fcca 	bl	8001184 <FusionQuaternionToEuler>
 80017f0:	eef0 6a40 	vmov.f32	s13, s0
 80017f4:	eeb0 7a60 	vmov.f32	s14, s1
 80017f8:	eef0 7a41 	vmov.f32	s15, s2
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	edc3 6a00 	vstr	s13, [r3]
 8001802:	ed83 7a01 	vstr	s14, [r3, #4]
 8001806:	edc3 7a02 	vstr	s15, [r3, #8]
	if (output_angles->angle.yaw < 0){
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001810:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001814:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001818:	d509      	bpl.n	800182e <FusionCalcHeading+0x2c6>
		output_angles->angle.yaw += 360;
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001820:	ed9f 7a23 	vldr	s14, [pc, #140]	; 80018b0 <FusionCalcHeading+0x348>
 8001824:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	edc3 7a02 	vstr	s15, [r3, #8]
	}
	if (output_angles->angle.roll < 0){
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	edd3 7a00 	vldr	s15, [r3]
 8001834:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001838:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800183c:	d509      	bpl.n	8001852 <FusionCalcHeading+0x2ea>
		output_angles->angle.roll += 360;
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	edd3 7a00 	vldr	s15, [r3]
 8001844:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80018b0 <FusionCalcHeading+0x348>
 8001848:	ee77 7a87 	vadd.f32	s15, s15, s14
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	edc3 7a00 	vstr	s15, [r3]
	}
	if (output_angles->angle.pitch < 0){
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	edd3 7a01 	vldr	s15, [r3, #4]
 8001858:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800185c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001860:	d400      	bmi.n	8001864 <FusionCalcHeading+0x2fc>
		output_angles->angle.pitch += 360;
	}
//	const FusionVector earth = FusionAhrsGetEarthAcceleration(&ahrs);
}
 8001862:	e009      	b.n	8001878 <FusionCalcHeading+0x310>
		output_angles->angle.pitch += 360;
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	edd3 7a01 	vldr	s15, [r3, #4]
 800186a:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80018b0 <FusionCalcHeading+0x348>
 800186e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8001878:	bf00      	nop
 800187a:	374c      	adds	r7, #76	; 0x4c
 800187c:	46bd      	mov	sp, r7
 800187e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001880:	08011ae4 	.word	0x08011ae4
 8001884:	08011ad8 	.word	0x08011ad8
 8001888:	08011ab4 	.word	0x08011ab4
 800188c:	08011b20 	.word	0x08011b20
 8001890:	08011b14 	.word	0x08011b14
 8001894:	08011af0 	.word	0x08011af0
 8001898:	08011b50 	.word	0x08011b50
 800189c:	08011b2c 	.word	0x08011b2c
 80018a0:	20000274 	.word	0x20000274
 80018a4:	2000028c 	.word	0x2000028c
 80018a8:	42c80000 	.word	0x42c80000
 80018ac:	2000020c 	.word	0x2000020c
 80018b0:	43b40000 	.word	0x43b40000

080018b4 <FusionDegreesToRadians>:
static inline float FusionDegreesToRadians(const float degrees) {
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	ed87 0a01 	vstr	s0, [r7, #4]
    return degrees * ((float) M_PI / 180.0f);
 80018be:	edd7 7a01 	vldr	s15, [r7, #4]
 80018c2:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80018d8 <FusionDegreesToRadians+0x24>
 80018c6:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80018ca:	eeb0 0a67 	vmov.f32	s0, s15
 80018ce:	370c      	adds	r7, #12
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr
 80018d8:	3c8efa35 	.word	0x3c8efa35

080018dc <FusionFastInverseSqrt>:
static inline float FusionFastInverseSqrt(const float x) {
 80018dc:	b480      	push	{r7}
 80018de:	b085      	sub	sp, #20
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	ed87 0a01 	vstr	s0, [r7, #4]
    Union32 union32 = {.f = x};
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	60fb      	str	r3, [r7, #12]
    union32.i = 0x5F1F1412 - (union32.i >> 1);
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	105a      	asrs	r2, r3, #1
 80018ee:	4b10      	ldr	r3, [pc, #64]	; (8001930 <FusionFastInverseSqrt+0x54>)
 80018f0:	1a9b      	subs	r3, r3, r2
 80018f2:	60fb      	str	r3, [r7, #12]
    return union32.f * (1.69000231f - 0.714158168f * x * union32.f * union32.f);
 80018f4:	ed97 7a03 	vldr	s14, [r7, #12]
 80018f8:	edd7 7a01 	vldr	s15, [r7, #4]
 80018fc:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8001934 <FusionFastInverseSqrt+0x58>
 8001900:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001904:	edd7 7a03 	vldr	s15, [r7, #12]
 8001908:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800190c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001910:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001914:	eddf 6a08 	vldr	s13, [pc, #32]	; 8001938 <FusionFastInverseSqrt+0x5c>
 8001918:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800191c:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8001920:	eeb0 0a67 	vmov.f32	s0, s15
 8001924:	3714      	adds	r7, #20
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr
 800192e:	bf00      	nop
 8001930:	5f1f1412 	.word	0x5f1f1412
 8001934:	3f36d312 	.word	0x3f36d312
 8001938:	3fd851ff 	.word	0x3fd851ff

0800193c <FusionVectorIsZero>:
static inline bool FusionVectorIsZero(const FusionVector vector) {
 800193c:	b480      	push	{r7}
 800193e:	b085      	sub	sp, #20
 8001940:	af00      	add	r7, sp, #0
 8001942:	eef0 6a40 	vmov.f32	s13, s0
 8001946:	eeb0 7a60 	vmov.f32	s14, s1
 800194a:	eef0 7a41 	vmov.f32	s15, s2
 800194e:	edc7 6a01 	vstr	s13, [r7, #4]
 8001952:	ed87 7a02 	vstr	s14, [r7, #8]
 8001956:	edc7 7a03 	vstr	s15, [r7, #12]
    return (vector.axis.x == 0.0f) && (vector.axis.y == 0.0f) && (vector.axis.z == 0.0f);
 800195a:	edd7 7a01 	vldr	s15, [r7, #4]
 800195e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001962:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001966:	d10f      	bne.n	8001988 <FusionVectorIsZero+0x4c>
 8001968:	edd7 7a02 	vldr	s15, [r7, #8]
 800196c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001970:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001974:	d108      	bne.n	8001988 <FusionVectorIsZero+0x4c>
 8001976:	edd7 7a03 	vldr	s15, [r7, #12]
 800197a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800197e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001982:	d101      	bne.n	8001988 <FusionVectorIsZero+0x4c>
 8001984:	2301      	movs	r3, #1
 8001986:	e000      	b.n	800198a <FusionVectorIsZero+0x4e>
 8001988:	2300      	movs	r3, #0
 800198a:	f003 0301 	and.w	r3, r3, #1
 800198e:	b2db      	uxtb	r3, r3
}
 8001990:	4618      	mov	r0, r3
 8001992:	3714      	adds	r7, #20
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr

0800199c <FusionVectorAdd>:
static inline FusionVector FusionVectorAdd(const FusionVector vectorA, const FusionVector vectorB) {
 800199c:	b480      	push	{r7}
 800199e:	b091      	sub	sp, #68	; 0x44
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	eeb0 5a40 	vmov.f32	s10, s0
 80019a6:	eef0 5a60 	vmov.f32	s11, s1
 80019aa:	eeb0 6a41 	vmov.f32	s12, s2
 80019ae:	eef0 6a61 	vmov.f32	s13, s3
 80019b2:	eeb0 7a42 	vmov.f32	s14, s4
 80019b6:	eef0 7a62 	vmov.f32	s15, s5
 80019ba:	ed87 5a07 	vstr	s10, [r7, #28]
 80019be:	edc7 5a08 	vstr	s11, [r7, #32]
 80019c2:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 80019c6:	edc7 6a04 	vstr	s13, [r7, #16]
 80019ca:	ed87 7a05 	vstr	s14, [r7, #20]
 80019ce:	edc7 7a06 	vstr	s15, [r7, #24]
            .x = vectorA.axis.x + vectorB.axis.x,
 80019d2:	ed97 7a07 	vldr	s14, [r7, #28]
 80019d6:	edd7 7a04 	vldr	s15, [r7, #16]
 80019da:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80019de:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = vectorA.axis.y + vectorB.axis.y,
 80019e2:	ed97 7a08 	vldr	s14, [r7, #32]
 80019e6:	edd7 7a05 	vldr	s15, [r7, #20]
 80019ea:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80019ee:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = vectorA.axis.z + vectorB.axis.z,
 80019f2:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80019f6:	edd7 7a06 	vldr	s15, [r7, #24]
 80019fa:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80019fe:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    return result;
 8001a02:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001a06:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001a0a:	ca07      	ldmia	r2, {r0, r1, r2}
 8001a0c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001a10:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001a12:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001a14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a16:	ee06 1a90 	vmov	s13, r1
 8001a1a:	ee07 2a10 	vmov	s14, r2
 8001a1e:	ee07 3a90 	vmov	s15, r3
}
 8001a22:	eeb0 0a66 	vmov.f32	s0, s13
 8001a26:	eef0 0a47 	vmov.f32	s1, s14
 8001a2a:	eeb0 1a67 	vmov.f32	s2, s15
 8001a2e:	3744      	adds	r7, #68	; 0x44
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr

08001a38 <FusionVectorSum>:
static inline float FusionVectorSum(const FusionVector vector) {
 8001a38:	b480      	push	{r7}
 8001a3a:	b085      	sub	sp, #20
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	eef0 6a40 	vmov.f32	s13, s0
 8001a42:	eeb0 7a60 	vmov.f32	s14, s1
 8001a46:	eef0 7a41 	vmov.f32	s15, s2
 8001a4a:	edc7 6a01 	vstr	s13, [r7, #4]
 8001a4e:	ed87 7a02 	vstr	s14, [r7, #8]
 8001a52:	edc7 7a03 	vstr	s15, [r7, #12]
    return vector.axis.x + vector.axis.y + vector.axis.z;
 8001a56:	ed97 7a01 	vldr	s14, [r7, #4]
 8001a5a:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a5e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a62:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a66:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8001a6a:	eeb0 0a67 	vmov.f32	s0, s15
 8001a6e:	3714      	adds	r7, #20
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr

08001a78 <FusionVectorMultiplyScalar>:
static inline FusionVector FusionVectorMultiplyScalar(const FusionVector vector, const float scalar) {
 8001a78:	b480      	push	{r7}
 8001a7a:	b08f      	sub	sp, #60	; 0x3c
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	eef0 6a40 	vmov.f32	s13, s0
 8001a82:	eeb0 7a60 	vmov.f32	s14, s1
 8001a86:	eef0 7a41 	vmov.f32	s15, s2
 8001a8a:	edc7 1a04 	vstr	s3, [r7, #16]
 8001a8e:	edc7 6a05 	vstr	s13, [r7, #20]
 8001a92:	ed87 7a06 	vstr	s14, [r7, #24]
 8001a96:	edc7 7a07 	vstr	s15, [r7, #28]
            .x = vector.axis.x * scalar,
 8001a9a:	ed97 7a05 	vldr	s14, [r7, #20]
 8001a9e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001aa2:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8001aa6:	edc7 7a08 	vstr	s15, [r7, #32]
            .y = vector.axis.y * scalar,
 8001aaa:	ed97 7a06 	vldr	s14, [r7, #24]
 8001aae:	edd7 7a04 	vldr	s15, [r7, #16]
 8001ab2:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8001ab6:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            .z = vector.axis.z * scalar,
 8001aba:	ed97 7a07 	vldr	s14, [r7, #28]
 8001abe:	edd7 7a04 	vldr	s15, [r7, #16]
 8001ac2:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8001ac6:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    return result;
 8001aca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ace:	f107 0220 	add.w	r2, r7, #32
 8001ad2:	ca07      	ldmia	r2, {r0, r1, r2}
 8001ad4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001ad8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001ada:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001adc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ade:	ee06 1a90 	vmov	s13, r1
 8001ae2:	ee07 2a10 	vmov	s14, r2
 8001ae6:	ee07 3a90 	vmov	s15, r3
}
 8001aea:	eeb0 0a66 	vmov.f32	s0, s13
 8001aee:	eef0 0a47 	vmov.f32	s1, s14
 8001af2:	eeb0 1a67 	vmov.f32	s2, s15
 8001af6:	373c      	adds	r7, #60	; 0x3c
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr

08001b00 <FusionVectorHadamardProduct>:
static inline FusionVector FusionVectorHadamardProduct(const FusionVector vectorA, const FusionVector vectorB) {
 8001b00:	b480      	push	{r7}
 8001b02:	b091      	sub	sp, #68	; 0x44
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	eeb0 5a40 	vmov.f32	s10, s0
 8001b0a:	eef0 5a60 	vmov.f32	s11, s1
 8001b0e:	eeb0 6a41 	vmov.f32	s12, s2
 8001b12:	eef0 6a61 	vmov.f32	s13, s3
 8001b16:	eeb0 7a42 	vmov.f32	s14, s4
 8001b1a:	eef0 7a62 	vmov.f32	s15, s5
 8001b1e:	ed87 5a07 	vstr	s10, [r7, #28]
 8001b22:	edc7 5a08 	vstr	s11, [r7, #32]
 8001b26:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 8001b2a:	edc7 6a04 	vstr	s13, [r7, #16]
 8001b2e:	ed87 7a05 	vstr	s14, [r7, #20]
 8001b32:	edc7 7a06 	vstr	s15, [r7, #24]
            .x = vectorA.axis.x * vectorB.axis.x,
 8001b36:	ed97 7a07 	vldr	s14, [r7, #28]
 8001b3a:	edd7 7a04 	vldr	s15, [r7, #16]
 8001b3e:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8001b42:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = vectorA.axis.y * vectorB.axis.y,
 8001b46:	ed97 7a08 	vldr	s14, [r7, #32]
 8001b4a:	edd7 7a05 	vldr	s15, [r7, #20]
 8001b4e:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8001b52:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = vectorA.axis.z * vectorB.axis.z,
 8001b56:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001b5a:	edd7 7a06 	vldr	s15, [r7, #24]
 8001b5e:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8001b62:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    return result;
 8001b66:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001b6a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001b6e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001b70:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001b74:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001b76:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001b78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b7a:	ee06 1a90 	vmov	s13, r1
 8001b7e:	ee07 2a10 	vmov	s14, r2
 8001b82:	ee07 3a90 	vmov	s15, r3
}
 8001b86:	eeb0 0a66 	vmov.f32	s0, s13
 8001b8a:	eef0 0a47 	vmov.f32	s1, s14
 8001b8e:	eeb0 1a67 	vmov.f32	s2, s15
 8001b92:	3744      	adds	r7, #68	; 0x44
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr

08001b9c <FusionVectorCrossProduct>:
static inline FusionVector FusionVectorCrossProduct(const FusionVector vectorA, const FusionVector vectorB) {
 8001b9c:	b480      	push	{r7}
 8001b9e:	b091      	sub	sp, #68	; 0x44
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	eeb0 5a40 	vmov.f32	s10, s0
 8001ba6:	eef0 5a60 	vmov.f32	s11, s1
 8001baa:	eeb0 6a41 	vmov.f32	s12, s2
 8001bae:	eef0 6a61 	vmov.f32	s13, s3
 8001bb2:	eeb0 7a42 	vmov.f32	s14, s4
 8001bb6:	eef0 7a62 	vmov.f32	s15, s5
 8001bba:	ed87 5a07 	vstr	s10, [r7, #28]
 8001bbe:	edc7 5a08 	vstr	s11, [r7, #32]
 8001bc2:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 8001bc6:	edc7 6a04 	vstr	s13, [r7, #16]
 8001bca:	ed87 7a05 	vstr	s14, [r7, #20]
 8001bce:	edc7 7a06 	vstr	s15, [r7, #24]
            .x = A.y * B.z - A.z * B.y,
 8001bd2:	ed97 7a08 	vldr	s14, [r7, #32]
 8001bd6:	edd7 7a06 	vldr	s15, [r7, #24]
 8001bda:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001bde:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8001be2:	edd7 7a05 	vldr	s15, [r7, #20]
 8001be6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bea:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8001bee:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = A.z * B.x - A.x * B.z,
 8001bf2:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001bf6:	edd7 7a04 	vldr	s15, [r7, #16]
 8001bfa:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001bfe:	edd7 6a07 	vldr	s13, [r7, #28]
 8001c02:	edd7 7a06 	vldr	s15, [r7, #24]
 8001c06:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c0a:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8001c0e:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = A.x * B.y - A.y * B.x,
 8001c12:	ed97 7a07 	vldr	s14, [r7, #28]
 8001c16:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c1a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c1e:	edd7 6a08 	vldr	s13, [r7, #32]
 8001c22:	edd7 7a04 	vldr	s15, [r7, #16]
 8001c26:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c2a:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8001c2e:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    return result;
 8001c32:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001c36:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001c3a:	ca07      	ldmia	r2, {r0, r1, r2}
 8001c3c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001c40:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001c42:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001c44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c46:	ee06 1a90 	vmov	s13, r1
 8001c4a:	ee07 2a10 	vmov	s14, r2
 8001c4e:	ee07 3a90 	vmov	s15, r3
}
 8001c52:	eeb0 0a66 	vmov.f32	s0, s13
 8001c56:	eef0 0a47 	vmov.f32	s1, s14
 8001c5a:	eeb0 1a67 	vmov.f32	s2, s15
 8001c5e:	3744      	adds	r7, #68	; 0x44
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr

08001c68 <FusionVectorMagnitudeSquared>:
static inline float FusionVectorMagnitudeSquared(const FusionVector vector) {
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b088      	sub	sp, #32
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	eef0 6a40 	vmov.f32	s13, s0
 8001c72:	eeb0 7a60 	vmov.f32	s14, s1
 8001c76:	eef0 7a41 	vmov.f32	s15, s2
 8001c7a:	edc7 6a01 	vstr	s13, [r7, #4]
 8001c7e:	ed87 7a02 	vstr	s14, [r7, #8]
 8001c82:	edc7 7a03 	vstr	s15, [r7, #12]
    return FusionVectorSum(FusionVectorHadamardProduct(vector, vector));
 8001c86:	ed97 5a01 	vldr	s10, [r7, #4]
 8001c8a:	edd7 5a02 	vldr	s11, [r7, #8]
 8001c8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8001c92:	edd7 6a01 	vldr	s13, [r7, #4]
 8001c96:	ed97 7a02 	vldr	s14, [r7, #8]
 8001c9a:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c9e:	eef0 1a45 	vmov.f32	s3, s10
 8001ca2:	eeb0 2a65 	vmov.f32	s4, s11
 8001ca6:	eef0 2a46 	vmov.f32	s5, s12
 8001caa:	eeb0 0a66 	vmov.f32	s0, s13
 8001cae:	eef0 0a47 	vmov.f32	s1, s14
 8001cb2:	eeb0 1a67 	vmov.f32	s2, s15
 8001cb6:	f7ff ff23 	bl	8001b00 <FusionVectorHadamardProduct>
 8001cba:	eef0 6a40 	vmov.f32	s13, s0
 8001cbe:	eeb0 7a60 	vmov.f32	s14, s1
 8001cc2:	eef0 7a41 	vmov.f32	s15, s2
 8001cc6:	edc7 6a05 	vstr	s13, [r7, #20]
 8001cca:	ed87 7a06 	vstr	s14, [r7, #24]
 8001cce:	edc7 7a07 	vstr	s15, [r7, #28]
 8001cd2:	edd7 6a05 	vldr	s13, [r7, #20]
 8001cd6:	ed97 7a06 	vldr	s14, [r7, #24]
 8001cda:	edd7 7a07 	vldr	s15, [r7, #28]
 8001cde:	eeb0 0a66 	vmov.f32	s0, s13
 8001ce2:	eef0 0a47 	vmov.f32	s1, s14
 8001ce6:	eeb0 1a67 	vmov.f32	s2, s15
 8001cea:	f7ff fea5 	bl	8001a38 <FusionVectorSum>
 8001cee:	eef0 7a40 	vmov.f32	s15, s0
}
 8001cf2:	eeb0 0a67 	vmov.f32	s0, s15
 8001cf6:	3720      	adds	r7, #32
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}

08001cfc <FusionVectorNormalise>:
static inline FusionVector FusionVectorNormalise(const FusionVector vector) {
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b08c      	sub	sp, #48	; 0x30
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	eef0 6a40 	vmov.f32	s13, s0
 8001d06:	eeb0 7a60 	vmov.f32	s14, s1
 8001d0a:	eef0 7a41 	vmov.f32	s15, s2
 8001d0e:	edc7 6a05 	vstr	s13, [r7, #20]
 8001d12:	ed87 7a06 	vstr	s14, [r7, #24]
 8001d16:	edc7 7a07 	vstr	s15, [r7, #28]
    const float magnitudeReciprocal = FusionFastInverseSqrt(FusionVectorMagnitudeSquared(vector));
 8001d1a:	edd7 6a05 	vldr	s13, [r7, #20]
 8001d1e:	ed97 7a06 	vldr	s14, [r7, #24]
 8001d22:	edd7 7a07 	vldr	s15, [r7, #28]
 8001d26:	eeb0 0a66 	vmov.f32	s0, s13
 8001d2a:	eef0 0a47 	vmov.f32	s1, s14
 8001d2e:	eeb0 1a67 	vmov.f32	s2, s15
 8001d32:	f7ff ff99 	bl	8001c68 <FusionVectorMagnitudeSquared>
 8001d36:	eef0 7a40 	vmov.f32	s15, s0
 8001d3a:	eeb0 0a67 	vmov.f32	s0, s15
 8001d3e:	f7ff fdcd 	bl	80018dc <FusionFastInverseSqrt>
 8001d42:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
    return FusionVectorMultiplyScalar(vector, magnitudeReciprocal);
 8001d46:	edd7 6a05 	vldr	s13, [r7, #20]
 8001d4a:	ed97 7a06 	vldr	s14, [r7, #24]
 8001d4e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001d52:	edd7 1a0b 	vldr	s3, [r7, #44]	; 0x2c
 8001d56:	eeb0 0a66 	vmov.f32	s0, s13
 8001d5a:	eef0 0a47 	vmov.f32	s1, s14
 8001d5e:	eeb0 1a67 	vmov.f32	s2, s15
 8001d62:	f7ff fe89 	bl	8001a78 <FusionVectorMultiplyScalar>
 8001d66:	eef0 6a40 	vmov.f32	s13, s0
 8001d6a:	eeb0 7a60 	vmov.f32	s14, s1
 8001d6e:	eef0 7a41 	vmov.f32	s15, s2
 8001d72:	edc7 6a08 	vstr	s13, [r7, #32]
 8001d76:	ed87 7a09 	vstr	s14, [r7, #36]	; 0x24
 8001d7a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 8001d7e:	6a39      	ldr	r1, [r7, #32]
 8001d80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d84:	ee06 1a90 	vmov	s13, r1
 8001d88:	ee07 2a10 	vmov	s14, r2
 8001d8c:	ee07 3a90 	vmov	s15, r3
}
 8001d90:	eeb0 0a66 	vmov.f32	s0, s13
 8001d94:	eef0 0a47 	vmov.f32	s1, s14
 8001d98:	eeb0 1a67 	vmov.f32	s2, s15
 8001d9c:	3730      	adds	r7, #48	; 0x30
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}

08001da2 <FusionQuaternionAdd>:
static inline FusionQuaternion FusionQuaternionAdd(const FusionQuaternion quaternionA, const FusionQuaternion quaternionB) {
 8001da2:	b490      	push	{r4, r7}
 8001da4:	b094      	sub	sp, #80	; 0x50
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	eeb0 4a40 	vmov.f32	s8, s0
 8001dac:	eef0 4a60 	vmov.f32	s9, s1
 8001db0:	eeb0 5a41 	vmov.f32	s10, s2
 8001db4:	eef0 5a61 	vmov.f32	s11, s3
 8001db8:	eeb0 6a42 	vmov.f32	s12, s4
 8001dbc:	eef0 6a62 	vmov.f32	s13, s5
 8001dc0:	eeb0 7a43 	vmov.f32	s14, s6
 8001dc4:	eef0 7a63 	vmov.f32	s15, s7
 8001dc8:	ed87 4a08 	vstr	s8, [r7, #32]
 8001dcc:	edc7 4a09 	vstr	s9, [r7, #36]	; 0x24
 8001dd0:	ed87 5a0a 	vstr	s10, [r7, #40]	; 0x28
 8001dd4:	edc7 5a0b 	vstr	s11, [r7, #44]	; 0x2c
 8001dd8:	ed87 6a04 	vstr	s12, [r7, #16]
 8001ddc:	edc7 6a05 	vstr	s13, [r7, #20]
 8001de0:	ed87 7a06 	vstr	s14, [r7, #24]
 8001de4:	edc7 7a07 	vstr	s15, [r7, #28]
            .w = quaternionA.element.w + quaternionB.element.w,
 8001de8:	ed97 7a08 	vldr	s14, [r7, #32]
 8001dec:	edd7 7a04 	vldr	s15, [r7, #16]
 8001df0:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8001df4:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
            .x = quaternionA.element.x + quaternionB.element.x,
 8001df8:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001dfc:	edd7 7a05 	vldr	s15, [r7, #20]
 8001e00:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8001e04:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
            .y = quaternionA.element.y + quaternionB.element.y,
 8001e08:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001e0c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001e10:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8001e14:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
            .z = quaternionA.element.z + quaternionB.element.z,
 8001e18:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8001e1c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001e20:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8001e24:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    return result;
 8001e28:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8001e2c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001e30:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e32:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001e36:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001e38:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001e3a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001e3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e3e:	ee06 0a10 	vmov	s12, r0
 8001e42:	ee06 1a90 	vmov	s13, r1
 8001e46:	ee07 2a10 	vmov	s14, r2
 8001e4a:	ee07 3a90 	vmov	s15, r3
}
 8001e4e:	eeb0 0a46 	vmov.f32	s0, s12
 8001e52:	eef0 0a66 	vmov.f32	s1, s13
 8001e56:	eeb0 1a47 	vmov.f32	s2, s14
 8001e5a:	eef0 1a67 	vmov.f32	s3, s15
 8001e5e:	3750      	adds	r7, #80	; 0x50
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bc90      	pop	{r4, r7}
 8001e64:	4770      	bx	lr

08001e66 <FusionQuaternionMultiply>:
static inline FusionQuaternion FusionQuaternionMultiply(const FusionQuaternion quaternionA, const FusionQuaternion quaternionB) {
 8001e66:	b490      	push	{r4, r7}
 8001e68:	b094      	sub	sp, #80	; 0x50
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	eeb0 4a40 	vmov.f32	s8, s0
 8001e70:	eef0 4a60 	vmov.f32	s9, s1
 8001e74:	eeb0 5a41 	vmov.f32	s10, s2
 8001e78:	eef0 5a61 	vmov.f32	s11, s3
 8001e7c:	eeb0 6a42 	vmov.f32	s12, s4
 8001e80:	eef0 6a62 	vmov.f32	s13, s5
 8001e84:	eeb0 7a43 	vmov.f32	s14, s6
 8001e88:	eef0 7a63 	vmov.f32	s15, s7
 8001e8c:	ed87 4a08 	vstr	s8, [r7, #32]
 8001e90:	edc7 4a09 	vstr	s9, [r7, #36]	; 0x24
 8001e94:	ed87 5a0a 	vstr	s10, [r7, #40]	; 0x28
 8001e98:	edc7 5a0b 	vstr	s11, [r7, #44]	; 0x2c
 8001e9c:	ed87 6a04 	vstr	s12, [r7, #16]
 8001ea0:	edc7 6a05 	vstr	s13, [r7, #20]
 8001ea4:	ed87 7a06 	vstr	s14, [r7, #24]
 8001ea8:	edc7 7a07 	vstr	s15, [r7, #28]
            .w = A.w * B.w - A.x * B.x - A.y * B.y - A.z * B.z,
 8001eac:	ed97 7a08 	vldr	s14, [r7, #32]
 8001eb0:	edd7 7a04 	vldr	s15, [r7, #16]
 8001eb4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001eb8:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8001ebc:	edd7 7a05 	vldr	s15, [r7, #20]
 8001ec0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ec4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001ec8:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8001ecc:	edd7 7a06 	vldr	s15, [r7, #24]
 8001ed0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ed4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001ed8:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8001edc:	edd7 7a07 	vldr	s15, [r7, #28]
 8001ee0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ee4:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8001ee8:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
            .x = A.w * B.x + A.x * B.w + A.y * B.z - A.z * B.y,
 8001eec:	ed97 7a08 	vldr	s14, [r7, #32]
 8001ef0:	edd7 7a05 	vldr	s15, [r7, #20]
 8001ef4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ef8:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8001efc:	edd7 7a04 	vldr	s15, [r7, #16]
 8001f00:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f04:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f08:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8001f0c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001f10:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f14:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f18:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8001f1c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001f20:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f24:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8001f28:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
            .y = A.w * B.y - A.x * B.z + A.y * B.w + A.z * B.x,
 8001f2c:	ed97 7a08 	vldr	s14, [r7, #32]
 8001f30:	edd7 7a06 	vldr	s15, [r7, #24]
 8001f34:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f38:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8001f3c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001f40:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f44:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001f48:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8001f4c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001f50:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f54:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f58:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8001f5c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001f60:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f64:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8001f68:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
            .z = A.w * B.z + A.x * B.y - A.y * B.x + A.z * B.w,
 8001f6c:	ed97 7a08 	vldr	s14, [r7, #32]
 8001f70:	edd7 7a07 	vldr	s15, [r7, #28]
 8001f74:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f78:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8001f7c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001f80:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f84:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f88:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8001f8c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001f90:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f94:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001f98:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8001f9c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001fa0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fa4:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8001fa8:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    return result;
 8001fac:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8001fb0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001fb4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001fb6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001fba:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001fbc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001fbe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001fc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001fc2:	ee06 0a10 	vmov	s12, r0
 8001fc6:	ee06 1a90 	vmov	s13, r1
 8001fca:	ee07 2a10 	vmov	s14, r2
 8001fce:	ee07 3a90 	vmov	s15, r3
}
 8001fd2:	eeb0 0a46 	vmov.f32	s0, s12
 8001fd6:	eef0 0a66 	vmov.f32	s1, s13
 8001fda:	eeb0 1a47 	vmov.f32	s2, s14
 8001fde:	eef0 1a67 	vmov.f32	s3, s15
 8001fe2:	3750      	adds	r7, #80	; 0x50
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bc90      	pop	{r4, r7}
 8001fe8:	4770      	bx	lr

08001fea <FusionQuaternionMultiplyVector>:
static inline FusionQuaternion FusionQuaternionMultiplyVector(const FusionQuaternion quaternion, const FusionVector vector) {
 8001fea:	b490      	push	{r4, r7}
 8001fec:	b094      	sub	sp, #80	; 0x50
 8001fee:	af00      	add	r7, sp, #0
 8001ff0:	eef0 4a40 	vmov.f32	s9, s0
 8001ff4:	eeb0 5a60 	vmov.f32	s10, s1
 8001ff8:	eef0 5a41 	vmov.f32	s11, s2
 8001ffc:	eeb0 6a61 	vmov.f32	s12, s3
 8002000:	eef0 6a42 	vmov.f32	s13, s4
 8002004:	eeb0 7a62 	vmov.f32	s14, s5
 8002008:	eef0 7a43 	vmov.f32	s15, s6
 800200c:	edc7 4a08 	vstr	s9, [r7, #32]
 8002010:	ed87 5a09 	vstr	s10, [r7, #36]	; 0x24
 8002014:	edc7 5a0a 	vstr	s11, [r7, #40]	; 0x28
 8002018:	ed87 6a0b 	vstr	s12, [r7, #44]	; 0x2c
 800201c:	edc7 6a05 	vstr	s13, [r7, #20]
 8002020:	ed87 7a06 	vstr	s14, [r7, #24]
 8002024:	edc7 7a07 	vstr	s15, [r7, #28]
            .w = -Q.x * V.x - Q.y * V.y - Q.z * V.z,
 8002028:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800202c:	eeb1 7a67 	vneg.f32	s14, s15
 8002030:	edd7 7a05 	vldr	s15, [r7, #20]
 8002034:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002038:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800203c:	edd7 7a06 	vldr	s15, [r7, #24]
 8002040:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002044:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002048:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800204c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002050:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002054:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8002058:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
            .x = Q.w * V.x + Q.y * V.z - Q.z * V.y,
 800205c:	ed97 7a08 	vldr	s14, [r7, #32]
 8002060:	edd7 7a05 	vldr	s15, [r7, #20]
 8002064:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002068:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800206c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002070:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002074:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002078:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800207c:	edd7 7a06 	vldr	s15, [r7, #24]
 8002080:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002084:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 8002088:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
            .y = Q.w * V.y - Q.x * V.z + Q.z * V.x,
 800208c:	ed97 7a08 	vldr	s14, [r7, #32]
 8002090:	edd7 7a06 	vldr	s15, [r7, #24]
 8002094:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002098:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800209c:	edd7 7a07 	vldr	s15, [r7, #28]
 80020a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020a4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80020a8:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 80020ac:	edd7 7a05 	vldr	s15, [r7, #20]
 80020b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020b4:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 80020b8:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
            .z = Q.w * V.z + Q.x * V.y - Q.y * V.x,
 80020bc:	ed97 7a08 	vldr	s14, [r7, #32]
 80020c0:	edd7 7a07 	vldr	s15, [r7, #28]
 80020c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020c8:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80020cc:	edd7 7a06 	vldr	s15, [r7, #24]
 80020d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80020d8:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 80020dc:	edd7 7a05 	vldr	s15, [r7, #20]
 80020e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020e4:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 80020e8:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    return result;
 80020ec:	f107 0440 	add.w	r4, r7, #64	; 0x40
 80020f0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80020f4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80020f6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80020fa:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80020fc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80020fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002100:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002102:	ee06 0a10 	vmov	s12, r0
 8002106:	ee06 1a90 	vmov	s13, r1
 800210a:	ee07 2a10 	vmov	s14, r2
 800210e:	ee07 3a90 	vmov	s15, r3
}
 8002112:	eeb0 0a46 	vmov.f32	s0, s12
 8002116:	eef0 0a66 	vmov.f32	s1, s13
 800211a:	eeb0 1a47 	vmov.f32	s2, s14
 800211e:	eef0 1a67 	vmov.f32	s3, s15
 8002122:	3750      	adds	r7, #80	; 0x50
 8002124:	46bd      	mov	sp, r7
 8002126:	bc90      	pop	{r4, r7}
 8002128:	4770      	bx	lr

0800212a <FusionQuaternionNormalise>:
static inline FusionQuaternion FusionQuaternionNormalise(const FusionQuaternion quaternion) {
 800212a:	b590      	push	{r4, r7, lr}
 800212c:	b093      	sub	sp, #76	; 0x4c
 800212e:	af00      	add	r7, sp, #0
 8002130:	eeb0 6a40 	vmov.f32	s12, s0
 8002134:	eef0 6a60 	vmov.f32	s13, s1
 8002138:	eeb0 7a41 	vmov.f32	s14, s2
 800213c:	eef0 7a61 	vmov.f32	s15, s3
 8002140:	ed87 6a04 	vstr	s12, [r7, #16]
 8002144:	edc7 6a05 	vstr	s13, [r7, #20]
 8002148:	ed87 7a06 	vstr	s14, [r7, #24]
 800214c:	edc7 7a07 	vstr	s15, [r7, #28]
    const float magnitudeReciprocal = FusionFastInverseSqrt(Q.w * Q.w + Q.x * Q.x + Q.y * Q.y + Q.z * Q.z);
 8002150:	ed97 7a04 	vldr	s14, [r7, #16]
 8002154:	edd7 7a04 	vldr	s15, [r7, #16]
 8002158:	ee27 7a27 	vmul.f32	s14, s14, s15
 800215c:	edd7 6a05 	vldr	s13, [r7, #20]
 8002160:	edd7 7a05 	vldr	s15, [r7, #20]
 8002164:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002168:	ee37 7a27 	vadd.f32	s14, s14, s15
 800216c:	edd7 6a06 	vldr	s13, [r7, #24]
 8002170:	edd7 7a06 	vldr	s15, [r7, #24]
 8002174:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002178:	ee37 7a27 	vadd.f32	s14, s14, s15
 800217c:	edd7 6a07 	vldr	s13, [r7, #28]
 8002180:	edd7 7a07 	vldr	s15, [r7, #28]
 8002184:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002188:	ee77 7a27 	vadd.f32	s15, s14, s15
 800218c:	eeb0 0a67 	vmov.f32	s0, s15
 8002190:	f7ff fba4 	bl	80018dc <FusionFastInverseSqrt>
 8002194:	ed87 0a11 	vstr	s0, [r7, #68]	; 0x44
            .w = Q.w * magnitudeReciprocal,
 8002198:	ed97 7a04 	vldr	s14, [r7, #16]
 800219c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80021a0:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 80021a4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            .x = Q.x * magnitudeReciprocal,
 80021a8:	ed97 7a05 	vldr	s14, [r7, #20]
 80021ac:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80021b0:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 80021b4:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = Q.y * magnitudeReciprocal,
 80021b8:	ed97 7a06 	vldr	s14, [r7, #24]
 80021bc:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80021c0:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 80021c4:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = Q.z * magnitudeReciprocal,
 80021c8:	ed97 7a07 	vldr	s14, [r7, #28]
 80021cc:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80021d0:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionQuaternion result = {.element = {
 80021d4:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    return result;
 80021d8:	f107 0434 	add.w	r4, r7, #52	; 0x34
 80021dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021e0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80021e2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80021e6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80021e8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80021ea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80021ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021ee:	ee06 0a10 	vmov	s12, r0
 80021f2:	ee06 1a90 	vmov	s13, r1
 80021f6:	ee07 2a10 	vmov	s14, r2
 80021fa:	ee07 3a90 	vmov	s15, r3
}
 80021fe:	eeb0 0a46 	vmov.f32	s0, s12
 8002202:	eef0 0a66 	vmov.f32	s1, s13
 8002206:	eeb0 1a47 	vmov.f32	s2, s14
 800220a:	eef0 1a67 	vmov.f32	s3, s15
 800220e:	374c      	adds	r7, #76	; 0x4c
 8002210:	46bd      	mov	sp, r7
 8002212:	bd90      	pop	{r4, r7, pc}

08002214 <FusionAhrsInitialise>:

/**
 * @brief Initialises the AHRS algorithm structure.
 * @param ahrs AHRS algorithm structure.
 */
void FusionAhrsInitialise(FusionAhrs *const ahrs) {
 8002214:	b5b0      	push	{r4, r5, r7, lr}
 8002216:	b088      	sub	sp, #32
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
    const FusionAhrsSettings settings = {
 800221c:	4b0a      	ldr	r3, [pc, #40]	; (8002248 <FusionAhrsInitialise+0x34>)
 800221e:	f107 040c 	add.w	r4, r7, #12
 8002222:	461d      	mov	r5, r3
 8002224:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002226:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002228:	682b      	ldr	r3, [r5, #0]
 800222a:	6023      	str	r3, [r4, #0]
            .gain = 0.5f,
            .accelerationRejection = 90.0f,
            .magneticRejection = 90.0f,
            .rejectionTimeout = 0,
    };
    FusionAhrsSetSettings(ahrs, &settings);
 800222c:	f107 030c 	add.w	r3, r7, #12
 8002230:	4619      	mov	r1, r3
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f000 f868 	bl	8002308 <FusionAhrsSetSettings>
    FusionAhrsReset(ahrs);
 8002238:	6878      	ldr	r0, [r7, #4]
 800223a:	f000 f807 	bl	800224c <FusionAhrsReset>
}
 800223e:	bf00      	nop
 8002240:	3720      	adds	r7, #32
 8002242:	46bd      	mov	sp, r7
 8002244:	bdb0      	pop	{r4, r5, r7, pc}
 8002246:	bf00      	nop
 8002248:	08011914 	.word	0x08011914

0800224c <FusionAhrsReset>:
/**
 * @brief Resets the AHRS algorithm.  This is equivalent to reinitialising the
 * algorithm while maintaining the current settings.
 * @param ahrs AHRS algorithm structure.
 */
void FusionAhrsReset(FusionAhrs *const ahrs) {
 800224c:	b480      	push	{r7}
 800224e:	b091      	sub	sp, #68	; 0x44
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
    ahrs->quaternion = FUSION_IDENTITY_QUATERNION;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800225a:	615a      	str	r2, [r3, #20]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	f04f 0200 	mov.w	r2, #0
 8002262:	619a      	str	r2, [r3, #24]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	f04f 0200 	mov.w	r2, #0
 800226a:	61da      	str	r2, [r3, #28]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	f04f 0200 	mov.w	r2, #0
 8002272:	621a      	str	r2, [r3, #32]
    ahrs->accelerometer = FUSION_VECTOR_ZERO;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	f04f 0200 	mov.w	r2, #0
 800227a:	625a      	str	r2, [r3, #36]	; 0x24
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	f04f 0200 	mov.w	r2, #0
 8002282:	629a      	str	r2, [r3, #40]	; 0x28
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	f04f 0200 	mov.w	r2, #0
 800228a:	62da      	str	r2, [r3, #44]	; 0x2c
    ahrs->initialising = true;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2201      	movs	r2, #1
 8002290:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    ahrs->rampedGain = INITIAL_GAIN;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	4a1b      	ldr	r2, [pc, #108]	; (8002304 <FusionAhrsReset+0xb8>)
 8002298:	635a      	str	r2, [r3, #52]	; 0x34
    ahrs->halfAccelerometerFeedback = FUSION_VECTOR_ZERO;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	f04f 0200 	mov.w	r2, #0
 80022a0:	63da      	str	r2, [r3, #60]	; 0x3c
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	f04f 0200 	mov.w	r2, #0
 80022a8:	641a      	str	r2, [r3, #64]	; 0x40
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	f04f 0200 	mov.w	r2, #0
 80022b0:	645a      	str	r2, [r3, #68]	; 0x44
    ahrs->halfMagnetometerFeedback = FUSION_VECTOR_ZERO;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	f04f 0200 	mov.w	r2, #0
 80022b8:	649a      	str	r2, [r3, #72]	; 0x48
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	f04f 0200 	mov.w	r2, #0
 80022c0:	64da      	str	r2, [r3, #76]	; 0x4c
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	f04f 0200 	mov.w	r2, #0
 80022c8:	651a      	str	r2, [r3, #80]	; 0x50
    ahrs->accelerometerIgnored = false;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2200      	movs	r2, #0
 80022ce:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
    ahrs->accelerationRejectionTimer = 0;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2200      	movs	r2, #0
 80022d6:	659a      	str	r2, [r3, #88]	; 0x58
    ahrs->accelerationRejectionTimeout = false;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2200      	movs	r2, #0
 80022dc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
    ahrs->magnetometerIgnored = false;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2200      	movs	r2, #0
 80022e4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    ahrs->magneticRejectionTimer = 0;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2200      	movs	r2, #0
 80022ec:	661a      	str	r2, [r3, #96]	; 0x60
    ahrs->magneticRejectionTimeout = false;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2200      	movs	r2, #0
 80022f2:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
}
 80022f6:	bf00      	nop
 80022f8:	3744      	adds	r7, #68	; 0x44
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr
 8002302:	bf00      	nop
 8002304:	41200000 	.word	0x41200000

08002308 <FusionAhrsSetSettings>:
/**
 * @brief Sets the AHRS algorithm settings.
 * @param ahrs AHRS algorithm structure.
 * @param settings Settings.
 */
void FusionAhrsSetSettings(FusionAhrs *const ahrs, const FusionAhrsSettings *const settings) {
 8002308:	b580      	push	{r7, lr}
 800230a:	b082      	sub	sp, #8
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
 8002310:	6039      	str	r1, [r7, #0]
    ahrs->settings.convention = settings->convention;
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	781a      	ldrb	r2, [r3, #0]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	701a      	strb	r2, [r3, #0]
    ahrs->settings.gain = settings->gain;
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	685a      	ldr	r2, [r3, #4]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	605a      	str	r2, [r3, #4]
    if ((settings->accelerationRejection == 0.0f) || (settings->rejectionTimeout == 0)) {
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	edd3 7a02 	vldr	s15, [r3, #8]
 8002328:	eef5 7a40 	vcmp.f32	s15, #0.0
 800232c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002330:	d003      	beq.n	800233a <FusionAhrsSetSettings+0x32>
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	691b      	ldr	r3, [r3, #16]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d103      	bne.n	8002342 <FusionAhrsSetSettings+0x3a>
        ahrs->settings.accelerationRejection = FLT_MAX;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	4a38      	ldr	r2, [pc, #224]	; (8002420 <FusionAhrsSetSettings+0x118>)
 800233e:	609a      	str	r2, [r3, #8]
 8002340:	e01d      	b.n	800237e <FusionAhrsSetSettings+0x76>
    } else {
        ahrs->settings.accelerationRejection = powf(0.5f * sinf(FusionDegreesToRadians(settings->accelerationRejection)), 2);
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	edd3 7a02 	vldr	s15, [r3, #8]
 8002348:	eeb0 0a67 	vmov.f32	s0, s15
 800234c:	f7ff fab2 	bl	80018b4 <FusionDegreesToRadians>
 8002350:	eef0 7a40 	vmov.f32	s15, s0
 8002354:	eeb0 0a67 	vmov.f32	s0, s15
 8002358:	f00d ff84 	bl	8010264 <sinf>
 800235c:	eef0 7a40 	vmov.f32	s15, s0
 8002360:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002364:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002368:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800236c:	eeb0 0a67 	vmov.f32	s0, s15
 8002370:	f00d ffec 	bl	801034c <powf>
 8002374:	eef0 7a40 	vmov.f32	s15, s0
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	edc3 7a02 	vstr	s15, [r3, #8]
    }
    if ((settings->magneticRejection == 0.0f) || (settings->rejectionTimeout == 0)) {
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	edd3 7a03 	vldr	s15, [r3, #12]
 8002384:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002388:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800238c:	d003      	beq.n	8002396 <FusionAhrsSetSettings+0x8e>
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	691b      	ldr	r3, [r3, #16]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d103      	bne.n	800239e <FusionAhrsSetSettings+0x96>
        ahrs->settings.magneticRejection = FLT_MAX;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	4a21      	ldr	r2, [pc, #132]	; (8002420 <FusionAhrsSetSettings+0x118>)
 800239a:	60da      	str	r2, [r3, #12]
 800239c:	e01d      	b.n	80023da <FusionAhrsSetSettings+0xd2>
    } else {
        ahrs->settings.magneticRejection = powf(0.5f * sinf(FusionDegreesToRadians(settings->magneticRejection)), 2);
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	edd3 7a03 	vldr	s15, [r3, #12]
 80023a4:	eeb0 0a67 	vmov.f32	s0, s15
 80023a8:	f7ff fa84 	bl	80018b4 <FusionDegreesToRadians>
 80023ac:	eef0 7a40 	vmov.f32	s15, s0
 80023b0:	eeb0 0a67 	vmov.f32	s0, s15
 80023b4:	f00d ff56 	bl	8010264 <sinf>
 80023b8:	eef0 7a40 	vmov.f32	s15, s0
 80023bc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80023c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023c4:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80023c8:	eeb0 0a67 	vmov.f32	s0, s15
 80023cc:	f00d ffbe 	bl	801034c <powf>
 80023d0:	eef0 7a40 	vmov.f32	s15, s0
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	edc3 7a03 	vstr	s15, [r3, #12]
    }
    ahrs->settings.rejectionTimeout = settings->rejectionTimeout;
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	691a      	ldr	r2, [r3, #16]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	611a      	str	r2, [r3, #16]
    if (ahrs->initialising == false) {
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80023e8:	f083 0301 	eor.w	r3, r3, #1
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d003      	beq.n	80023fa <FusionAhrsSetSettings+0xf2>
        ahrs->rampedGain = ahrs->settings.gain;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	685a      	ldr	r2, [r3, #4]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	635a      	str	r2, [r3, #52]	; 0x34
    }
    ahrs->rampedGainStep = (INITIAL_GAIN - ahrs->settings.gain) / INITIALISATION_PERIOD;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	edd3 7a01 	vldr	s15, [r3, #4]
 8002400:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002404:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002408:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800240c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
}
 8002416:	bf00      	nop
 8002418:	3708      	adds	r7, #8
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	7f7fffff 	.word	0x7f7fffff

08002424 <FusionAhrsUpdate>:
 * @param gyroscope Gyroscope measurement in degrees per second.
 * @param accelerometer Accelerometer measurement in g.
 * @param magnetometer Magnetometer measurement in arbitrary units.
 * @param deltaTime Delta time in seconds.
 */
void FusionAhrsUpdate(FusionAhrs *const ahrs, const FusionVector gyroscope, const FusionVector accelerometer, const FusionVector magnetometer, const float deltaTime) {
 8002424:	b590      	push	{r4, r7, lr}
 8002426:	b0bf      	sub	sp, #252	; 0xfc
 8002428:	af00      	add	r7, sp, #0
 800242a:	62f8      	str	r0, [r7, #44]	; 0x2c
 800242c:	eeb0 5a61 	vmov.f32	s10, s3
 8002430:	eef0 5a42 	vmov.f32	s11, s4
 8002434:	eeb0 6a62 	vmov.f32	s12, s5
 8002438:	eef0 6a43 	vmov.f32	s13, s6
 800243c:	eeb0 7a63 	vmov.f32	s14, s7
 8002440:	eef0 7a44 	vmov.f32	s15, s8
 8002444:	edc7 4a01 	vstr	s9, [r7, #4]
 8002448:	ed87 0a08 	vstr	s0, [r7, #32]
 800244c:	edc7 0a09 	vstr	s1, [r7, #36]	; 0x24
 8002450:	ed87 1a0a 	vstr	s2, [r7, #40]	; 0x28
 8002454:	ed87 5a05 	vstr	s10, [r7, #20]
 8002458:	edc7 5a06 	vstr	s11, [r7, #24]
 800245c:	ed87 6a07 	vstr	s12, [r7, #28]
 8002460:	edc7 6a02 	vstr	s13, [r7, #8]
 8002464:	ed87 7a03 	vstr	s14, [r7, #12]
 8002468:	edc7 7a04 	vstr	s15, [r7, #16]
#define Q ahrs->quaternion.element

    // Store accelerometer
    ahrs->accelerometer = accelerometer;
 800246c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800246e:	3324      	adds	r3, #36	; 0x24
 8002470:	f107 0214 	add.w	r2, r7, #20
 8002474:	ca07      	ldmia	r2, {r0, r1, r2}
 8002476:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    // Ramp down gain during initialisation
    if (ahrs->initialising == true) {
 800247a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800247c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002480:	2b00      	cmp	r3, #0
 8002482:	d025      	beq.n	80024d0 <FusionAhrsUpdate+0xac>
        ahrs->rampedGain -= ahrs->rampedGainStep * deltaTime;
 8002484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002486:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 800248a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800248c:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 8002490:	edd7 7a01 	vldr	s15, [r7, #4]
 8002494:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002498:	ee77 7a67 	vsub.f32	s15, s14, s15
 800249c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800249e:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
        if (ahrs->rampedGain < ahrs->settings.gain) {
 80024a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024a4:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 80024a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024aa:	edd3 7a01 	vldr	s15, [r3, #4]
 80024ae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80024b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024b6:	d50b      	bpl.n	80024d0 <FusionAhrsUpdate+0xac>
            ahrs->rampedGain = ahrs->settings.gain;
 80024b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024ba:	685a      	ldr	r2, [r3, #4]
 80024bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024be:	635a      	str	r2, [r3, #52]	; 0x34
            ahrs->initialising = false;
 80024c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024c2:	2200      	movs	r2, #0
 80024c4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
            ahrs->accelerationRejectionTimeout = false;
 80024c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024ca:	2200      	movs	r2, #0
 80024cc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
        }
    }

    // Calculate direction of gravity indicated by algorithm
    const FusionVector halfGravity = HalfGravity(ahrs);
 80024d0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80024d2:	f000 fb08 	bl	8002ae6 <HalfGravity>
 80024d6:	eef0 6a40 	vmov.f32	s13, s0
 80024da:	eeb0 7a60 	vmov.f32	s14, s1
 80024de:	eef0 7a41 	vmov.f32	s15, s2
 80024e2:	edc7 6a25 	vstr	s13, [r7, #148]	; 0x94
 80024e6:	ed87 7a26 	vstr	s14, [r7, #152]	; 0x98
 80024ea:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c

    // Calculate accelerometer feedback
    FusionVector halfAccelerometerFeedback = FUSION_VECTOR_ZERO;
 80024ee:	f04f 0300 	mov.w	r3, #0
 80024f2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80024f6:	f04f 0300 	mov.w	r3, #0
 80024fa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80024fe:	f04f 0300 	mov.w	r3, #0
 8002502:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    ahrs->accelerometerIgnored = true;
 8002506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002508:	2201      	movs	r2, #1
 800250a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
    if (FusionVectorIsZero(accelerometer) == false) {
 800250e:	edd7 6a05 	vldr	s13, [r7, #20]
 8002512:	ed97 7a06 	vldr	s14, [r7, #24]
 8002516:	edd7 7a07 	vldr	s15, [r7, #28]
 800251a:	eeb0 0a66 	vmov.f32	s0, s13
 800251e:	eef0 0a47 	vmov.f32	s1, s14
 8002522:	eeb0 1a67 	vmov.f32	s2, s15
 8002526:	f7ff fa09 	bl	800193c <FusionVectorIsZero>
 800252a:	4603      	mov	r3, r0
 800252c:	f083 0301 	eor.w	r3, r3, #1
 8002530:	b2db      	uxtb	r3, r3
 8002532:	2b00      	cmp	r3, #0
 8002534:	f000 809b 	beq.w	800266e <FusionAhrsUpdate+0x24a>

        // Enter acceleration recovery state if acceleration rejection times out
        if (ahrs->accelerationRejectionTimer > ahrs->settings.rejectionTimeout) {
 8002538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800253a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800253c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800253e:	691b      	ldr	r3, [r3, #16]
 8002540:	429a      	cmp	r2, r3
 8002542:	d918      	bls.n	8002576 <FusionAhrsUpdate+0x152>
            const FusionQuaternion quaternion = ahrs->quaternion;
 8002544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002546:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 800254a:	3314      	adds	r3, #20
 800254c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800254e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            FusionAhrsReset(ahrs);
 8002552:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002554:	f7ff fe7a 	bl	800224c <FusionAhrsReset>
            ahrs->quaternion = quaternion;
 8002558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800255a:	f103 0414 	add.w	r4, r3, #20
 800255e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002562:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002564:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            ahrs->accelerationRejectionTimer = 0;
 8002568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800256a:	2200      	movs	r2, #0
 800256c:	659a      	str	r2, [r3, #88]	; 0x58
            ahrs->accelerationRejectionTimeout = true;
 800256e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002570:	2201      	movs	r2, #1
 8002572:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
        }

        // Calculate accelerometer feedback scaled by 0.5
        ahrs->halfAccelerometerFeedback = FusionVectorCrossProduct(FusionVectorNormalise(accelerometer), halfGravity);
 8002576:	edd7 6a05 	vldr	s13, [r7, #20]
 800257a:	ed97 7a06 	vldr	s14, [r7, #24]
 800257e:	edd7 7a07 	vldr	s15, [r7, #28]
 8002582:	eeb0 0a66 	vmov.f32	s0, s13
 8002586:	eef0 0a47 	vmov.f32	s1, s14
 800258a:	eeb0 1a67 	vmov.f32	s2, s15
 800258e:	f7ff fbb5 	bl	8001cfc <FusionVectorNormalise>
 8002592:	eef0 6a40 	vmov.f32	s13, s0
 8002596:	eeb0 7a60 	vmov.f32	s14, s1
 800259a:	eef0 7a41 	vmov.f32	s15, s2
 800259e:	edc7 6a28 	vstr	s13, [r7, #160]	; 0xa0
 80025a2:	ed87 7a29 	vstr	s14, [r7, #164]	; 0xa4
 80025a6:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
 80025aa:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 80025ac:	ed97 5a25 	vldr	s10, [r7, #148]	; 0x94
 80025b0:	edd7 5a26 	vldr	s11, [r7, #152]	; 0x98
 80025b4:	ed97 6a27 	vldr	s12, [r7, #156]	; 0x9c
 80025b8:	edd7 6a28 	vldr	s13, [r7, #160]	; 0xa0
 80025bc:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 80025c0:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80025c4:	eef0 1a45 	vmov.f32	s3, s10
 80025c8:	eeb0 2a65 	vmov.f32	s4, s11
 80025cc:	eef0 2a46 	vmov.f32	s5, s12
 80025d0:	eeb0 0a66 	vmov.f32	s0, s13
 80025d4:	eef0 0a47 	vmov.f32	s1, s14
 80025d8:	eeb0 1a67 	vmov.f32	s2, s15
 80025dc:	f7ff fade 	bl	8001b9c <FusionVectorCrossProduct>
 80025e0:	eef0 6a40 	vmov.f32	s13, s0
 80025e4:	eeb0 7a60 	vmov.f32	s14, s1
 80025e8:	eef0 7a41 	vmov.f32	s15, s2
 80025ec:	edc4 6a0f 	vstr	s13, [r4, #60]	; 0x3c
 80025f0:	ed84 7a10 	vstr	s14, [r4, #64]	; 0x40
 80025f4:	edc4 7a11 	vstr	s15, [r4, #68]	; 0x44

        // Ignore accelerometer if acceleration distortion detected
        if ((ahrs->initialising == true) || (FusionVectorMagnitudeSquared(ahrs->halfAccelerometerFeedback) <= ahrs->settings.accelerationRejection)) {
 80025f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025fa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d118      	bne.n	8002634 <FusionAhrsUpdate+0x210>
 8002602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002604:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 8002608:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 800260c:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8002610:	eeb0 0a66 	vmov.f32	s0, s13
 8002614:	eef0 0a47 	vmov.f32	s1, s14
 8002618:	eeb0 1a67 	vmov.f32	s2, s15
 800261c:	f7ff fb24 	bl	8001c68 <FusionVectorMagnitudeSquared>
 8002620:	eeb0 7a40 	vmov.f32	s14, s0
 8002624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002626:	edd3 7a02 	vldr	s15, [r3, #8]
 800262a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800262e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002632:	d817      	bhi.n	8002664 <FusionAhrsUpdate+0x240>
            halfAccelerometerFeedback = ahrs->halfAccelerometerFeedback;
 8002634:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002636:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800263a:	323c      	adds	r2, #60	; 0x3c
 800263c:	ca07      	ldmia	r2, {r0, r1, r2}
 800263e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            ahrs->accelerometerIgnored = false;
 8002642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002644:	2200      	movs	r2, #0
 8002646:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
            ahrs->accelerationRejectionTimer -= ahrs->accelerationRejectionTimer >= 10 ? 10 : 0;
 800264a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800264c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800264e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002650:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002652:	2b09      	cmp	r3, #9
 8002654:	d901      	bls.n	800265a <FusionAhrsUpdate+0x236>
 8002656:	230a      	movs	r3, #10
 8002658:	e000      	b.n	800265c <FusionAhrsUpdate+0x238>
 800265a:	2300      	movs	r3, #0
 800265c:	1ad2      	subs	r2, r2, r3
 800265e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002660:	659a      	str	r2, [r3, #88]	; 0x58
 8002662:	e004      	b.n	800266e <FusionAhrsUpdate+0x24a>
        } else {
            ahrs->accelerationRejectionTimer++;
 8002664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002666:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002668:	1c5a      	adds	r2, r3, #1
 800266a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800266c:	659a      	str	r2, [r3, #88]	; 0x58
        }
    }

    // Calculate magnetometer feedback
    FusionVector halfMagnetometerFeedback = FUSION_VECTOR_ZERO;
 800266e:	f04f 0300 	mov.w	r3, #0
 8002672:	673b      	str	r3, [r7, #112]	; 0x70
 8002674:	f04f 0300 	mov.w	r3, #0
 8002678:	677b      	str	r3, [r7, #116]	; 0x74
 800267a:	f04f 0300 	mov.w	r3, #0
 800267e:	67bb      	str	r3, [r7, #120]	; 0x78
    ahrs->magnetometerIgnored = true;
 8002680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002682:	2201      	movs	r2, #1
 8002684:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    if (FusionVectorIsZero(magnetometer) == false) {
 8002688:	edd7 6a02 	vldr	s13, [r7, #8]
 800268c:	ed97 7a03 	vldr	s14, [r7, #12]
 8002690:	edd7 7a04 	vldr	s15, [r7, #16]
 8002694:	eeb0 0a66 	vmov.f32	s0, s13
 8002698:	eef0 0a47 	vmov.f32	s1, s14
 800269c:	eeb0 1a67 	vmov.f32	s2, s15
 80026a0:	f7ff f94c 	bl	800193c <FusionVectorIsZero>
 80026a4:	4603      	mov	r3, r0
 80026a6:	f083 0301 	eor.w	r3, r3, #1
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	f000 80e6 	beq.w	800287e <FusionAhrsUpdate+0x45a>

        // Set to compass heading if magnetic rejection times out
        ahrs->magneticRejectionTimeout = false;
 80026b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026b4:	2200      	movs	r2, #0
 80026b6:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
        if (ahrs->magneticRejectionTimer > ahrs->settings.rejectionTimeout) {
 80026ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026bc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80026be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026c0:	691b      	ldr	r3, [r3, #16]
 80026c2:	429a      	cmp	r2, r3
 80026c4:	d92a      	bls.n	800271c <FusionAhrsUpdate+0x2f8>
            FusionAhrsSetHeading(ahrs, FusionCompassCalculateHeading(ahrs->settings.convention, halfGravity, magnetometer));
 80026c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026c8:	781b      	ldrb	r3, [r3, #0]
 80026ca:	ed97 5a02 	vldr	s10, [r7, #8]
 80026ce:	edd7 5a03 	vldr	s11, [r7, #12]
 80026d2:	ed97 6a04 	vldr	s12, [r7, #16]
 80026d6:	edd7 6a25 	vldr	s13, [r7, #148]	; 0x94
 80026da:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 80026de:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80026e2:	eef0 1a45 	vmov.f32	s3, s10
 80026e6:	eeb0 2a65 	vmov.f32	s4, s11
 80026ea:	eef0 2a46 	vmov.f32	s5, s12
 80026ee:	eeb0 0a66 	vmov.f32	s0, s13
 80026f2:	eef0 0a47 	vmov.f32	s1, s14
 80026f6:	eeb0 1a67 	vmov.f32	s2, s15
 80026fa:	4618      	mov	r0, r3
 80026fc:	f000 fe6e 	bl	80033dc <FusionCompassCalculateHeading>
 8002700:	eef0 7a40 	vmov.f32	s15, s0
 8002704:	eeb0 0a67 	vmov.f32	s0, s15
 8002708:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800270a:	f000 fbd6 	bl	8002eba <FusionAhrsSetHeading>
            ahrs->magneticRejectionTimer = 0;
 800270e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002710:	2200      	movs	r2, #0
 8002712:	661a      	str	r2, [r3, #96]	; 0x60
            ahrs->magneticRejectionTimeout = true;
 8002714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002716:	2201      	movs	r2, #1
 8002718:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
        }

        // Calculate direction of magnetic field indicated by algorithm
        const FusionVector halfMagnetic = HalfMagnetic(ahrs);
 800271c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800271e:	f000 fa9f 	bl	8002c60 <HalfMagnetic>
 8002722:	eef0 6a40 	vmov.f32	s13, s0
 8002726:	eeb0 7a60 	vmov.f32	s14, s1
 800272a:	eef0 7a41 	vmov.f32	s15, s2
 800272e:	edc7 6a0c 	vstr	s13, [r7, #48]	; 0x30
 8002732:	ed87 7a0d 	vstr	s14, [r7, #52]	; 0x34
 8002736:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38

        // Calculate magnetometer feedback scaled by 0.5
        ahrs->halfMagnetometerFeedback = FusionVectorCrossProduct(FusionVectorNormalise(FusionVectorCrossProduct(halfGravity, magnetometer)), halfMagnetic);
 800273a:	ed97 5a02 	vldr	s10, [r7, #8]
 800273e:	edd7 5a03 	vldr	s11, [r7, #12]
 8002742:	ed97 6a04 	vldr	s12, [r7, #16]
 8002746:	edd7 6a25 	vldr	s13, [r7, #148]	; 0x94
 800274a:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800274e:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8002752:	eef0 1a45 	vmov.f32	s3, s10
 8002756:	eeb0 2a65 	vmov.f32	s4, s11
 800275a:	eef0 2a46 	vmov.f32	s5, s12
 800275e:	eeb0 0a66 	vmov.f32	s0, s13
 8002762:	eef0 0a47 	vmov.f32	s1, s14
 8002766:	eeb0 1a67 	vmov.f32	s2, s15
 800276a:	f7ff fa17 	bl	8001b9c <FusionVectorCrossProduct>
 800276e:	eef0 6a40 	vmov.f32	s13, s0
 8002772:	eeb0 7a60 	vmov.f32	s14, s1
 8002776:	eef0 7a41 	vmov.f32	s15, s2
 800277a:	edc7 6a2b 	vstr	s13, [r7, #172]	; 0xac
 800277e:	ed87 7a2c 	vstr	s14, [r7, #176]	; 0xb0
 8002782:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
 8002786:	edd7 6a2b 	vldr	s13, [r7, #172]	; 0xac
 800278a:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 800278e:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8002792:	eeb0 0a66 	vmov.f32	s0, s13
 8002796:	eef0 0a47 	vmov.f32	s1, s14
 800279a:	eeb0 1a67 	vmov.f32	s2, s15
 800279e:	f7ff faad 	bl	8001cfc <FusionVectorNormalise>
 80027a2:	eef0 6a40 	vmov.f32	s13, s0
 80027a6:	eeb0 7a60 	vmov.f32	s14, s1
 80027aa:	eef0 7a41 	vmov.f32	s15, s2
 80027ae:	edc7 6a2e 	vstr	s13, [r7, #184]	; 0xb8
 80027b2:	ed87 7a2f 	vstr	s14, [r7, #188]	; 0xbc
 80027b6:	edc7 7a30 	vstr	s15, [r7, #192]	; 0xc0
 80027ba:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 80027bc:	ed97 5a0c 	vldr	s10, [r7, #48]	; 0x30
 80027c0:	edd7 5a0d 	vldr	s11, [r7, #52]	; 0x34
 80027c4:	ed97 6a0e 	vldr	s12, [r7, #56]	; 0x38
 80027c8:	edd7 6a2e 	vldr	s13, [r7, #184]	; 0xb8
 80027cc:	ed97 7a2f 	vldr	s14, [r7, #188]	; 0xbc
 80027d0:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 80027d4:	eef0 1a45 	vmov.f32	s3, s10
 80027d8:	eeb0 2a65 	vmov.f32	s4, s11
 80027dc:	eef0 2a46 	vmov.f32	s5, s12
 80027e0:	eeb0 0a66 	vmov.f32	s0, s13
 80027e4:	eef0 0a47 	vmov.f32	s1, s14
 80027e8:	eeb0 1a67 	vmov.f32	s2, s15
 80027ec:	f7ff f9d6 	bl	8001b9c <FusionVectorCrossProduct>
 80027f0:	eef0 6a40 	vmov.f32	s13, s0
 80027f4:	eeb0 7a60 	vmov.f32	s14, s1
 80027f8:	eef0 7a41 	vmov.f32	s15, s2
 80027fc:	edc4 6a12 	vstr	s13, [r4, #72]	; 0x48
 8002800:	ed84 7a13 	vstr	s14, [r4, #76]	; 0x4c
 8002804:	edc4 7a14 	vstr	s15, [r4, #80]	; 0x50

        // Ignore magnetometer if magnetic distortion detected
        if ((ahrs->initialising == true) || (FusionVectorMagnitudeSquared(ahrs->halfMagnetometerFeedback) <= ahrs->settings.magneticRejection)) {
 8002808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800280a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800280e:	2b00      	cmp	r3, #0
 8002810:	d118      	bne.n	8002844 <FusionAhrsUpdate+0x420>
 8002812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002814:	edd3 6a12 	vldr	s13, [r3, #72]	; 0x48
 8002818:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 800281c:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8002820:	eeb0 0a66 	vmov.f32	s0, s13
 8002824:	eef0 0a47 	vmov.f32	s1, s14
 8002828:	eeb0 1a67 	vmov.f32	s2, s15
 800282c:	f7ff fa1c 	bl	8001c68 <FusionVectorMagnitudeSquared>
 8002830:	eeb0 7a40 	vmov.f32	s14, s0
 8002834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002836:	edd3 7a03 	vldr	s15, [r3, #12]
 800283a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800283e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002842:	d817      	bhi.n	8002874 <FusionAhrsUpdate+0x450>
            halfMagnetometerFeedback = ahrs->halfMagnetometerFeedback;
 8002844:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002846:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800284a:	3248      	adds	r2, #72	; 0x48
 800284c:	ca07      	ldmia	r2, {r0, r1, r2}
 800284e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            ahrs->magnetometerIgnored = false;
 8002852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002854:	2200      	movs	r2, #0
 8002856:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
            ahrs->magneticRejectionTimer -= ahrs->magneticRejectionTimer >= 10 ? 10 : 0;
 800285a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800285c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800285e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002860:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002862:	2b09      	cmp	r3, #9
 8002864:	d901      	bls.n	800286a <FusionAhrsUpdate+0x446>
 8002866:	230a      	movs	r3, #10
 8002868:	e000      	b.n	800286c <FusionAhrsUpdate+0x448>
 800286a:	2300      	movs	r3, #0
 800286c:	1ad2      	subs	r2, r2, r3
 800286e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002870:	661a      	str	r2, [r3, #96]	; 0x60
 8002872:	e004      	b.n	800287e <FusionAhrsUpdate+0x45a>
        } else {
            ahrs->magneticRejectionTimer++;
 8002874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002876:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002878:	1c5a      	adds	r2, r3, #1
 800287a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800287c:	661a      	str	r2, [r3, #96]	; 0x60
        }
    }

    // Convert gyroscope to radians per second scaled by 0.5
    const FusionVector halfGyroscope = FusionVectorMultiplyScalar(gyroscope, FusionDegreesToRadians(0.5f));
 800287e:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8002882:	f7ff f817 	bl	80018b4 <FusionDegreesToRadians>
 8002886:	eeb0 6a40 	vmov.f32	s12, s0
 800288a:	edd7 6a08 	vldr	s13, [r7, #32]
 800288e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002892:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002896:	eef0 1a46 	vmov.f32	s3, s12
 800289a:	eeb0 0a66 	vmov.f32	s0, s13
 800289e:	eef0 0a47 	vmov.f32	s1, s14
 80028a2:	eeb0 1a67 	vmov.f32	s2, s15
 80028a6:	f7ff f8e7 	bl	8001a78 <FusionVectorMultiplyScalar>
 80028aa:	eef0 6a40 	vmov.f32	s13, s0
 80028ae:	eeb0 7a60 	vmov.f32	s14, s1
 80028b2:	eef0 7a41 	vmov.f32	s15, s2
 80028b6:	edc7 6a16 	vstr	s13, [r7, #88]	; 0x58
 80028ba:	ed87 7a17 	vstr	s14, [r7, #92]	; 0x5c
 80028be:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60

    // Apply feedback to gyroscope
    const FusionVector adjustedHalfGyroscope = FusionVectorAdd(halfGyroscope, FusionVectorMultiplyScalar(FusionVectorAdd(halfAccelerometerFeedback, halfMagnetometerFeedback), ahrs->rampedGain));
 80028c2:	ed97 5a1c 	vldr	s10, [r7, #112]	; 0x70
 80028c6:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 80028ca:	ed97 6a1e 	vldr	s12, [r7, #120]	; 0x78
 80028ce:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 80028d2:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 80028d6:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 80028da:	eef0 1a45 	vmov.f32	s3, s10
 80028de:	eeb0 2a65 	vmov.f32	s4, s11
 80028e2:	eef0 2a46 	vmov.f32	s5, s12
 80028e6:	eeb0 0a66 	vmov.f32	s0, s13
 80028ea:	eef0 0a47 	vmov.f32	s1, s14
 80028ee:	eeb0 1a67 	vmov.f32	s2, s15
 80028f2:	f7ff f853 	bl	800199c <FusionVectorAdd>
 80028f6:	eef0 6a40 	vmov.f32	s13, s0
 80028fa:	eeb0 7a60 	vmov.f32	s14, s1
 80028fe:	eef0 7a41 	vmov.f32	s15, s2
 8002902:	edc7 6a31 	vstr	s13, [r7, #196]	; 0xc4
 8002906:	ed87 7a32 	vstr	s14, [r7, #200]	; 0xc8
 800290a:	edc7 7a33 	vstr	s15, [r7, #204]	; 0xcc
 800290e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002910:	ed93 6a0d 	vldr	s12, [r3, #52]	; 0x34
 8002914:	edd7 6a31 	vldr	s13, [r7, #196]	; 0xc4
 8002918:	ed97 7a32 	vldr	s14, [r7, #200]	; 0xc8
 800291c:	edd7 7a33 	vldr	s15, [r7, #204]	; 0xcc
 8002920:	eef0 1a46 	vmov.f32	s3, s12
 8002924:	eeb0 0a66 	vmov.f32	s0, s13
 8002928:	eef0 0a47 	vmov.f32	s1, s14
 800292c:	eeb0 1a67 	vmov.f32	s2, s15
 8002930:	f7ff f8a2 	bl	8001a78 <FusionVectorMultiplyScalar>
 8002934:	eef0 6a40 	vmov.f32	s13, s0
 8002938:	eeb0 7a60 	vmov.f32	s14, s1
 800293c:	eef0 7a41 	vmov.f32	s15, s2
 8002940:	edc7 6a34 	vstr	s13, [r7, #208]	; 0xd0
 8002944:	ed87 7a35 	vstr	s14, [r7, #212]	; 0xd4
 8002948:	edc7 7a36 	vstr	s15, [r7, #216]	; 0xd8
 800294c:	ed97 5a34 	vldr	s10, [r7, #208]	; 0xd0
 8002950:	edd7 5a35 	vldr	s11, [r7, #212]	; 0xd4
 8002954:	ed97 6a36 	vldr	s12, [r7, #216]	; 0xd8
 8002958:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 800295c:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8002960:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8002964:	eef0 1a45 	vmov.f32	s3, s10
 8002968:	eeb0 2a65 	vmov.f32	s4, s11
 800296c:	eef0 2a46 	vmov.f32	s5, s12
 8002970:	eeb0 0a66 	vmov.f32	s0, s13
 8002974:	eef0 0a47 	vmov.f32	s1, s14
 8002978:	eeb0 1a67 	vmov.f32	s2, s15
 800297c:	f7ff f80e 	bl	800199c <FusionVectorAdd>
 8002980:	eef0 6a40 	vmov.f32	s13, s0
 8002984:	eeb0 7a60 	vmov.f32	s14, s1
 8002988:	eef0 7a41 	vmov.f32	s15, s2
 800298c:	edc7 6a13 	vstr	s13, [r7, #76]	; 0x4c
 8002990:	ed87 7a14 	vstr	s14, [r7, #80]	; 0x50
 8002994:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    // Integrate rate of change of quaternion
    ahrs->quaternion = FusionQuaternionAdd(ahrs->quaternion, FusionQuaternionMultiplyVector(ahrs->quaternion, FusionVectorMultiplyScalar(adjustedHalfGyroscope, deltaTime)));
 8002998:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 800299c:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80029a0:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80029a4:	edd7 1a01 	vldr	s3, [r7, #4]
 80029a8:	eeb0 0a66 	vmov.f32	s0, s13
 80029ac:	eef0 0a47 	vmov.f32	s1, s14
 80029b0:	eeb0 1a67 	vmov.f32	s2, s15
 80029b4:	f7ff f860 	bl	8001a78 <FusionVectorMultiplyScalar>
 80029b8:	eef0 6a40 	vmov.f32	s13, s0
 80029bc:	eeb0 7a60 	vmov.f32	s14, s1
 80029c0:	eef0 7a41 	vmov.f32	s15, s2
 80029c4:	edc7 6a37 	vstr	s13, [r7, #220]	; 0xdc
 80029c8:	ed87 7a38 	vstr	s14, [r7, #224]	; 0xe0
 80029cc:	edc7 7a39 	vstr	s15, [r7, #228]	; 0xe4
 80029d0:	edd7 4a37 	vldr	s9, [r7, #220]	; 0xdc
 80029d4:	ed97 5a38 	vldr	s10, [r7, #224]	; 0xe0
 80029d8:	edd7 5a39 	vldr	s11, [r7, #228]	; 0xe4
 80029dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029de:	ed93 6a05 	vldr	s12, [r3, #20]
 80029e2:	edd3 6a06 	vldr	s13, [r3, #24]
 80029e6:	ed93 7a07 	vldr	s14, [r3, #28]
 80029ea:	edd3 7a08 	vldr	s15, [r3, #32]
 80029ee:	eeb0 2a64 	vmov.f32	s4, s9
 80029f2:	eef0 2a45 	vmov.f32	s5, s10
 80029f6:	eeb0 3a65 	vmov.f32	s6, s11
 80029fa:	eeb0 0a46 	vmov.f32	s0, s12
 80029fe:	eef0 0a66 	vmov.f32	s1, s13
 8002a02:	eeb0 1a47 	vmov.f32	s2, s14
 8002a06:	eef0 1a67 	vmov.f32	s3, s15
 8002a0a:	f7ff faee 	bl	8001fea <FusionQuaternionMultiplyVector>
 8002a0e:	eeb0 6a40 	vmov.f32	s12, s0
 8002a12:	eef0 6a60 	vmov.f32	s13, s1
 8002a16:	eeb0 7a41 	vmov.f32	s14, s2
 8002a1a:	eef0 7a61 	vmov.f32	s15, s3
 8002a1e:	ed87 6a3a 	vstr	s12, [r7, #232]	; 0xe8
 8002a22:	edc7 6a3b 	vstr	s13, [r7, #236]	; 0xec
 8002a26:	ed87 7a3c 	vstr	s14, [r7, #240]	; 0xf0
 8002a2a:	edc7 7a3d 	vstr	s15, [r7, #244]	; 0xf4
 8002a2e:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 8002a30:	ed97 4a3a 	vldr	s8, [r7, #232]	; 0xe8
 8002a34:	edd7 4a3b 	vldr	s9, [r7, #236]	; 0xec
 8002a38:	ed97 5a3c 	vldr	s10, [r7, #240]	; 0xf0
 8002a3c:	edd7 5a3d 	vldr	s11, [r7, #244]	; 0xf4
 8002a40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a42:	ed93 6a05 	vldr	s12, [r3, #20]
 8002a46:	edd3 6a06 	vldr	s13, [r3, #24]
 8002a4a:	ed93 7a07 	vldr	s14, [r3, #28]
 8002a4e:	edd3 7a08 	vldr	s15, [r3, #32]
 8002a52:	eeb0 2a44 	vmov.f32	s4, s8
 8002a56:	eef0 2a64 	vmov.f32	s5, s9
 8002a5a:	eeb0 3a45 	vmov.f32	s6, s10
 8002a5e:	eef0 3a65 	vmov.f32	s7, s11
 8002a62:	eeb0 0a46 	vmov.f32	s0, s12
 8002a66:	eef0 0a66 	vmov.f32	s1, s13
 8002a6a:	eeb0 1a47 	vmov.f32	s2, s14
 8002a6e:	eef0 1a67 	vmov.f32	s3, s15
 8002a72:	f7ff f996 	bl	8001da2 <FusionQuaternionAdd>
 8002a76:	eeb0 6a40 	vmov.f32	s12, s0
 8002a7a:	eef0 6a60 	vmov.f32	s13, s1
 8002a7e:	eeb0 7a41 	vmov.f32	s14, s2
 8002a82:	eef0 7a61 	vmov.f32	s15, s3
 8002a86:	ed84 6a05 	vstr	s12, [r4, #20]
 8002a8a:	edc4 6a06 	vstr	s13, [r4, #24]
 8002a8e:	ed84 7a07 	vstr	s14, [r4, #28]
 8002a92:	edc4 7a08 	vstr	s15, [r4, #32]

    // Normalise quaternion
    ahrs->quaternion = FusionQuaternionNormalise(ahrs->quaternion);
 8002a96:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 8002a98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a9a:	ed93 6a05 	vldr	s12, [r3, #20]
 8002a9e:	edd3 6a06 	vldr	s13, [r3, #24]
 8002aa2:	ed93 7a07 	vldr	s14, [r3, #28]
 8002aa6:	edd3 7a08 	vldr	s15, [r3, #32]
 8002aaa:	eeb0 0a46 	vmov.f32	s0, s12
 8002aae:	eef0 0a66 	vmov.f32	s1, s13
 8002ab2:	eeb0 1a47 	vmov.f32	s2, s14
 8002ab6:	eef0 1a67 	vmov.f32	s3, s15
 8002aba:	f7ff fb36 	bl	800212a <FusionQuaternionNormalise>
 8002abe:	eeb0 6a40 	vmov.f32	s12, s0
 8002ac2:	eef0 6a60 	vmov.f32	s13, s1
 8002ac6:	eeb0 7a41 	vmov.f32	s14, s2
 8002aca:	eef0 7a61 	vmov.f32	s15, s3
 8002ace:	ed84 6a05 	vstr	s12, [r4, #20]
 8002ad2:	edc4 6a06 	vstr	s13, [r4, #24]
 8002ad6:	ed84 7a07 	vstr	s14, [r4, #28]
 8002ada:	edc4 7a08 	vstr	s15, [r4, #32]
#undef Q
}
 8002ade:	bf00      	nop
 8002ae0:	37fc      	adds	r7, #252	; 0xfc
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd90      	pop	{r4, r7, pc}

08002ae6 <HalfGravity>:
/**
 * @brief Returns the direction of gravity scaled by 0.5.
 * @param ahrs AHRS algorithm structure.
 * @return Direction of gravity scaled by 0.5.
 */
static FusionVector HalfGravity(const FusionAhrs *const ahrs) {
 8002ae6:	b480      	push	{r7}
 8002ae8:	b093      	sub	sp, #76	; 0x4c
 8002aea:	af00      	add	r7, sp, #0
 8002aec:	6178      	str	r0, [r7, #20]
#define Q ahrs->quaternion.element
    switch (ahrs->settings.convention) {
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	781b      	ldrb	r3, [r3, #0]
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	dc02      	bgt.n	8002afc <HalfGravity+0x16>
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	da03      	bge.n	8002b02 <HalfGravity+0x1c>
 8002afa:	e094      	b.n	8002c26 <HalfGravity+0x140>
 8002afc:	2b02      	cmp	r3, #2
 8002afe:	d048      	beq.n	8002b92 <HalfGravity+0xac>
 8002b00:	e091      	b.n	8002c26 <HalfGravity+0x140>
        case FusionConventionNwu:
        case FusionConventionEnu: {
            const FusionVector halfGravity = {.axis = {
                    .x = Q.x * Q.z - Q.w * Q.y,
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	ed93 7a06 	vldr	s14, [r3, #24]
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	edd3 7a08 	vldr	s15, [r3, #32]
 8002b0e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	edd3 6a05 	vldr	s13, [r3, #20]
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	edd3 7a07 	vldr	s15, [r3, #28]
 8002b1e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b22:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfGravity = {.axis = {
 8002b26:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                    .y = Q.y * Q.z + Q.w * Q.x,
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	ed93 7a07 	vldr	s14, [r3, #28]
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	edd3 7a08 	vldr	s15, [r3, #32]
 8002b36:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	edd3 6a05 	vldr	s13, [r3, #20]
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	edd3 7a06 	vldr	s15, [r3, #24]
 8002b46:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b4a:	ee77 7a27 	vadd.f32	s15, s14, s15
            const FusionVector halfGravity = {.axis = {
 8002b4e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
                    .z = Q.w * Q.w - 0.5f + Q.z * Q.z,
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	ed93 7a05 	vldr	s14, [r3, #20]
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	edd3 7a05 	vldr	s15, [r3, #20]
 8002b5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b62:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002b66:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	edd3 6a08 	vldr	s13, [r3, #32]
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	edd3 7a08 	vldr	s15, [r3, #32]
 8002b76:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b7a:	ee77 7a27 	vadd.f32	s15, s14, s15
            const FusionVector halfGravity = {.axis = {
 8002b7e:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            }}; // third column of transposed rotation matrix scaled by 0.5
            return halfGravity;
 8002b82:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002b86:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8002b8a:	ca07      	ldmia	r2, {r0, r1, r2}
 8002b8c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002b90:	e052      	b.n	8002c38 <HalfGravity+0x152>
        }
        case FusionConventionNed: {
            const FusionVector halfGravity = {.axis = {
                    .x = Q.w * Q.y - Q.x * Q.z,
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	ed93 7a05 	vldr	s14, [r3, #20]
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	edd3 7a07 	vldr	s15, [r3, #28]
 8002b9e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	edd3 6a06 	vldr	s13, [r3, #24]
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	edd3 7a08 	vldr	s15, [r3, #32]
 8002bae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002bb2:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfGravity = {.axis = {
 8002bb6:	edc7 7a06 	vstr	s15, [r7, #24]
                    .y = -1.0f * (Q.y * Q.z + Q.w * Q.x),
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	ed93 7a07 	vldr	s14, [r3, #28]
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	edd3 7a08 	vldr	s15, [r3, #32]
 8002bc6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	edd3 6a05 	vldr	s13, [r3, #20]
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	edd3 7a06 	vldr	s15, [r3, #24]
 8002bd6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002bda:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bde:	eef1 7a67 	vneg.f32	s15, s15
            const FusionVector halfGravity = {.axis = {
 8002be2:	edc7 7a07 	vstr	s15, [r7, #28]
                    .z = 0.5f - Q.w * Q.w - Q.z * Q.z,
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	ed93 7a05 	vldr	s14, [r3, #20]
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	edd3 7a05 	vldr	s15, [r3, #20]
 8002bf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bf6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002bfa:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	edd3 6a08 	vldr	s13, [r3, #32]
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	edd3 7a08 	vldr	s15, [r3, #32]
 8002c0a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c0e:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfGravity = {.axis = {
 8002c12:	edc7 7a08 	vstr	s15, [r7, #32]
            }}; // third column of transposed rotation matrix scaled by -0.5
            return halfGravity;
 8002c16:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002c1a:	f107 0218 	add.w	r2, r7, #24
 8002c1e:	ca07      	ldmia	r2, {r0, r1, r2}
 8002c20:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002c24:	e008      	b.n	8002c38 <HalfGravity+0x152>
        }
    }
    return FUSION_VECTOR_ZERO; // avoid compiler warning
 8002c26:	f04f 0300 	mov.w	r3, #0
 8002c2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c2c:	f04f 0300 	mov.w	r3, #0
 8002c30:	643b      	str	r3, [r7, #64]	; 0x40
 8002c32:	f04f 0300 	mov.w	r3, #0
 8002c36:	647b      	str	r3, [r7, #68]	; 0x44
#undef Q
}
 8002c38:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002c3a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002c3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c3e:	ee06 1a90 	vmov	s13, r1
 8002c42:	ee07 2a10 	vmov	s14, r2
 8002c46:	ee07 3a90 	vmov	s15, r3
 8002c4a:	eeb0 0a66 	vmov.f32	s0, s13
 8002c4e:	eef0 0a47 	vmov.f32	s1, s14
 8002c52:	eeb0 1a67 	vmov.f32	s2, s15
 8002c56:	374c      	adds	r7, #76	; 0x4c
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr

08002c60 <HalfMagnetic>:
/**
 * @brief Returns the direction of the magnetic field scaled by 0.5.
 * @param ahrs AHRS algorithm structure.
 * @return Direction of the magnetic field scaled by 0.5.
 */
static FusionVector HalfMagnetic(const FusionAhrs *const ahrs) {
 8002c60:	b480      	push	{r7}
 8002c62:	b097      	sub	sp, #92	; 0x5c
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6178      	str	r0, [r7, #20]
#define Q ahrs->quaternion.element
    switch (ahrs->settings.convention) {
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	781b      	ldrb	r3, [r3, #0]
 8002c6c:	2b02      	cmp	r3, #2
 8002c6e:	f000 809a 	beq.w	8002da6 <HalfMagnetic+0x146>
 8002c72:	2b02      	cmp	r3, #2
 8002c74:	f300 80e1 	bgt.w	8002e3a <HalfMagnetic+0x1da>
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d002      	beq.n	8002c82 <HalfMagnetic+0x22>
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	d048      	beq.n	8002d12 <HalfMagnetic+0xb2>
 8002c80:	e0db      	b.n	8002e3a <HalfMagnetic+0x1da>
        case FusionConventionNwu: {
            const FusionVector halfMagnetic = {.axis = {
                    .x = Q.x * Q.y + Q.w * Q.z,
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	ed93 7a06 	vldr	s14, [r3, #24]
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	edd3 7a07 	vldr	s15, [r3, #28]
 8002c8e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	edd3 6a05 	vldr	s13, [r3, #20]
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	edd3 7a08 	vldr	s15, [r3, #32]
 8002c9e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ca2:	ee77 7a27 	vadd.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 8002ca6:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
                    .y = Q.w * Q.w - 0.5f + Q.y * Q.y,
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	ed93 7a05 	vldr	s14, [r3, #20]
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	edd3 7a05 	vldr	s15, [r3, #20]
 8002cb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cba:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002cbe:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	edd3 6a07 	vldr	s13, [r3, #28]
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	edd3 7a07 	vldr	s15, [r3, #28]
 8002cce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002cd2:	ee77 7a27 	vadd.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 8002cd6:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
                    .z = Q.y * Q.z - Q.w * Q.x,
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	ed93 7a07 	vldr	s14, [r3, #28]
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	edd3 7a08 	vldr	s15, [r3, #32]
 8002ce6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	edd3 6a05 	vldr	s13, [r3, #20]
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	edd3 7a06 	vldr	s15, [r3, #24]
 8002cf6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002cfa:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 8002cfe:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
            }}; // second column of transposed rotation matrix scaled by 0.5
            return halfMagnetic;
 8002d02:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002d06:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002d0a:	ca07      	ldmia	r2, {r0, r1, r2}
 8002d0c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002d10:	e09c      	b.n	8002e4c <HalfMagnetic+0x1ec>
        }
        case FusionConventionEnu: {
            const FusionVector halfMagnetic = {.axis = {
                    .x = 0.5f - Q.w * Q.w - Q.x * Q.x,
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	ed93 7a05 	vldr	s14, [r3, #20]
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	edd3 7a05 	vldr	s15, [r3, #20]
 8002d1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d22:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002d26:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	edd3 6a06 	vldr	s13, [r3, #24]
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	edd3 7a06 	vldr	s15, [r3, #24]
 8002d36:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d3a:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 8002d3e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
                    .y = Q.w * Q.z - Q.x * Q.y,
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	ed93 7a05 	vldr	s14, [r3, #20]
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	edd3 7a08 	vldr	s15, [r3, #32]
 8002d4e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	edd3 6a06 	vldr	s13, [r3, #24]
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	edd3 7a07 	vldr	s15, [r3, #28]
 8002d5e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d62:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 8002d66:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
                    .z = -1.0f * (Q.x * Q.z + Q.w * Q.y),
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	ed93 7a06 	vldr	s14, [r3, #24]
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	edd3 7a08 	vldr	s15, [r3, #32]
 8002d76:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	edd3 6a05 	vldr	s13, [r3, #20]
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	edd3 7a07 	vldr	s15, [r3, #28]
 8002d86:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d8e:	eef1 7a67 	vneg.f32	s15, s15
            const FusionVector halfMagnetic = {.axis = {
 8002d92:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
            }}; // first column of transposed rotation matrix scaled by -0.5
            return halfMagnetic;
 8002d96:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002d9a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002d9e:	ca07      	ldmia	r2, {r0, r1, r2}
 8002da0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002da4:	e052      	b.n	8002e4c <HalfMagnetic+0x1ec>
        }
        case FusionConventionNed: {
            const FusionVector halfMagnetic = {.axis = {
                    .x = -1.0f * (Q.x * Q.y + Q.w * Q.z),
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	ed93 7a06 	vldr	s14, [r3, #24]
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	edd3 7a07 	vldr	s15, [r3, #28]
 8002db2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	edd3 6a05 	vldr	s13, [r3, #20]
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	edd3 7a08 	vldr	s15, [r3, #32]
 8002dc2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002dc6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002dca:	eef1 7a67 	vneg.f32	s15, s15
            const FusionVector halfMagnetic = {.axis = {
 8002dce:	edc7 7a07 	vstr	s15, [r7, #28]
                    .y = 0.5f - Q.w * Q.w - Q.y * Q.y,
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	ed93 7a05 	vldr	s14, [r3, #20]
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	edd3 7a05 	vldr	s15, [r3, #20]
 8002dde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002de2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002de6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	edd3 6a07 	vldr	s13, [r3, #28]
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	edd3 7a07 	vldr	s15, [r3, #28]
 8002df6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002dfa:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 8002dfe:	edc7 7a08 	vstr	s15, [r7, #32]
                    .z = Q.w * Q.x - Q.y * Q.z,
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	ed93 7a05 	vldr	s14, [r3, #20]
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	edd3 7a06 	vldr	s15, [r3, #24]
 8002e0e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	edd3 6a07 	vldr	s13, [r3, #28]
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	edd3 7a08 	vldr	s15, [r3, #32]
 8002e1e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e22:	ee77 7a67 	vsub.f32	s15, s14, s15
            const FusionVector halfMagnetic = {.axis = {
 8002e26:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            }}; // second column of transposed rotation matrix scaled by -0.5
            return halfMagnetic;
 8002e2a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002e2e:	f107 021c 	add.w	r2, r7, #28
 8002e32:	ca07      	ldmia	r2, {r0, r1, r2}
 8002e34:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002e38:	e008      	b.n	8002e4c <HalfMagnetic+0x1ec>
        }
    }
    return FUSION_VECTOR_ZERO; // avoid compiler warning
 8002e3a:	f04f 0300 	mov.w	r3, #0
 8002e3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e40:	f04f 0300 	mov.w	r3, #0
 8002e44:	653b      	str	r3, [r7, #80]	; 0x50
 8002e46:	f04f 0300 	mov.w	r3, #0
 8002e4a:	657b      	str	r3, [r7, #84]	; 0x54
#undef Q
}
 8002e4c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002e4e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002e50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e52:	ee06 1a90 	vmov	s13, r1
 8002e56:	ee07 2a10 	vmov	s14, r2
 8002e5a:	ee07 3a90 	vmov	s15, r3
 8002e5e:	eeb0 0a66 	vmov.f32	s0, s13
 8002e62:	eef0 0a47 	vmov.f32	s1, s14
 8002e66:	eeb0 1a67 	vmov.f32	s2, s15
 8002e6a:	375c      	adds	r7, #92	; 0x5c
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e72:	4770      	bx	lr

08002e74 <FusionAhrsGetQuaternion>:
/**
 * @brief Returns the quaternion describing the sensor relative to the Earth.
 * @param ahrs AHRS algorithm structure.
 * @return Quaternion describing the sensor relative to the Earth.
 */
FusionQuaternion FusionAhrsGetQuaternion(const FusionAhrs *const ahrs) {
 8002e74:	b490      	push	{r4, r7}
 8002e76:	b08a      	sub	sp, #40	; 0x28
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6178      	str	r0, [r7, #20]
    return ahrs->quaternion;
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	f107 0418 	add.w	r4, r7, #24
 8002e82:	3314      	adds	r3, #20
 8002e84:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002e86:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002e8a:	69b8      	ldr	r0, [r7, #24]
 8002e8c:	69f9      	ldr	r1, [r7, #28]
 8002e8e:	6a3a      	ldr	r2, [r7, #32]
 8002e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e92:	ee06 0a10 	vmov	s12, r0
 8002e96:	ee06 1a90 	vmov	s13, r1
 8002e9a:	ee07 2a10 	vmov	s14, r2
 8002e9e:	ee07 3a90 	vmov	s15, r3
}
 8002ea2:	eeb0 0a46 	vmov.f32	s0, s12
 8002ea6:	eef0 0a66 	vmov.f32	s1, s13
 8002eaa:	eeb0 1a47 	vmov.f32	s2, s14
 8002eae:	eef0 1a67 	vmov.f32	s3, s15
 8002eb2:	3728      	adds	r7, #40	; 0x28
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bc90      	pop	{r4, r7}
 8002eb8:	4770      	bx	lr

08002eba <FusionAhrsSetHeading>:
 * algorithm.  This function can be used to reset drift in heading when the AHRS
 * algorithm is being used without a magnetometer.
 * @param ahrs AHRS algorithm structure.
 * @param heading Heading angle in degrees.
 */
void FusionAhrsSetHeading(FusionAhrs *const ahrs, const float heading) {
 8002eba:	b590      	push	{r4, r7, lr}
 8002ebc:	b089      	sub	sp, #36	; 0x24
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	6078      	str	r0, [r7, #4]
 8002ec2:	ed87 0a00 	vstr	s0, [r7]
#define Q ahrs->quaternion.element
    const float yaw = atan2f(Q.w * Q.z + Q.x * Q.y, 0.5f - Q.y * Q.y - Q.z * Q.z);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	ed93 7a05 	vldr	s14, [r3, #20]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	edd3 7a08 	vldr	s15, [r3, #32]
 8002ed2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	edd3 6a06 	vldr	s13, [r3, #24]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	edd3 7a07 	vldr	s15, [r3, #28]
 8002ee2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ee6:	ee37 6a27 	vadd.f32	s12, s14, s15
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	ed93 7a07 	vldr	s14, [r3, #28]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	edd3 7a07 	vldr	s15, [r3, #28]
 8002ef6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002efa:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002efe:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	edd3 6a08 	vldr	s13, [r3, #32]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	edd3 7a08 	vldr	s15, [r3, #32]
 8002f0e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f12:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f16:	eef0 0a67 	vmov.f32	s1, s15
 8002f1a:	eeb0 0a46 	vmov.f32	s0, s12
 8002f1e:	f00d fa13 	bl	8010348 <atan2f>
 8002f22:	ed87 0a07 	vstr	s0, [r7, #28]
    const float halfYawMinusHeading = 0.5f * (yaw - FusionDegreesToRadians(heading));
 8002f26:	ed97 0a00 	vldr	s0, [r7]
 8002f2a:	f7fe fcc3 	bl	80018b4 <FusionDegreesToRadians>
 8002f2e:	eeb0 7a40 	vmov.f32	s14, s0
 8002f32:	edd7 7a07 	vldr	s15, [r7, #28]
 8002f36:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002f3a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002f3e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f42:	edc7 7a06 	vstr	s15, [r7, #24]
    const FusionQuaternion rotation = {.element = {
            .w = cosf(halfYawMinusHeading),
 8002f46:	ed97 0a06 	vldr	s0, [r7, #24]
 8002f4a:	f00d f947 	bl	80101dc <cosf>
 8002f4e:	eef0 7a40 	vmov.f32	s15, s0
    const FusionQuaternion rotation = {.element = {
 8002f52:	edc7 7a02 	vstr	s15, [r7, #8]
 8002f56:	f04f 0300 	mov.w	r3, #0
 8002f5a:	60fb      	str	r3, [r7, #12]
 8002f5c:	f04f 0300 	mov.w	r3, #0
 8002f60:	613b      	str	r3, [r7, #16]
            .x = 0.0f,
            .y = 0.0f,
            .z = -1.0f * sinf(halfYawMinusHeading),
 8002f62:	ed97 0a06 	vldr	s0, [r7, #24]
 8002f66:	f00d f97d 	bl	8010264 <sinf>
 8002f6a:	eef0 7a40 	vmov.f32	s15, s0
 8002f6e:	eef1 7a67 	vneg.f32	s15, s15
    const FusionQuaternion rotation = {.element = {
 8002f72:	edc7 7a05 	vstr	s15, [r7, #20]
    }};
    ahrs->quaternion = FusionQuaternionMultiply(rotation, ahrs->quaternion);
 8002f76:	687c      	ldr	r4, [r7, #4]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	ed93 4a05 	vldr	s8, [r3, #20]
 8002f7e:	edd3 4a06 	vldr	s9, [r3, #24]
 8002f82:	ed93 5a07 	vldr	s10, [r3, #28]
 8002f86:	edd3 5a08 	vldr	s11, [r3, #32]
 8002f8a:	ed97 6a02 	vldr	s12, [r7, #8]
 8002f8e:	edd7 6a03 	vldr	s13, [r7, #12]
 8002f92:	ed97 7a04 	vldr	s14, [r7, #16]
 8002f96:	edd7 7a05 	vldr	s15, [r7, #20]
 8002f9a:	eeb0 2a44 	vmov.f32	s4, s8
 8002f9e:	eef0 2a64 	vmov.f32	s5, s9
 8002fa2:	eeb0 3a45 	vmov.f32	s6, s10
 8002fa6:	eef0 3a65 	vmov.f32	s7, s11
 8002faa:	eeb0 0a46 	vmov.f32	s0, s12
 8002fae:	eef0 0a66 	vmov.f32	s1, s13
 8002fb2:	eeb0 1a47 	vmov.f32	s2, s14
 8002fb6:	eef0 1a67 	vmov.f32	s3, s15
 8002fba:	f7fe ff54 	bl	8001e66 <FusionQuaternionMultiply>
 8002fbe:	eeb0 6a40 	vmov.f32	s12, s0
 8002fc2:	eef0 6a60 	vmov.f32	s13, s1
 8002fc6:	eeb0 7a41 	vmov.f32	s14, s2
 8002fca:	eef0 7a61 	vmov.f32	s15, s3
 8002fce:	ed84 6a05 	vstr	s12, [r4, #20]
 8002fd2:	edc4 6a06 	vstr	s13, [r4, #24]
 8002fd6:	ed84 7a07 	vstr	s14, [r4, #28]
 8002fda:	edc4 7a08 	vstr	s15, [r4, #32]
#undef Q
}
 8002fde:	bf00      	nop
 8002fe0:	3724      	adds	r7, #36	; 0x24
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd90      	pop	{r4, r7, pc}
	...

08002fe8 <FusionRadiansToDegrees>:
static inline float FusionRadiansToDegrees(const float radians) {
 8002fe8:	b480      	push	{r7}
 8002fea:	b083      	sub	sp, #12
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	ed87 0a01 	vstr	s0, [r7, #4]
    return radians * (180.0f / (float) M_PI);
 8002ff2:	edd7 7a01 	vldr	s15, [r7, #4]
 8002ff6:	ed9f 7a05 	vldr	s14, [pc, #20]	; 800300c <FusionRadiansToDegrees+0x24>
 8002ffa:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8002ffe:	eeb0 0a67 	vmov.f32	s0, s15
 8003002:	370c      	adds	r7, #12
 8003004:	46bd      	mov	sp, r7
 8003006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300a:	4770      	bx	lr
 800300c:	42652ee0 	.word	0x42652ee0

08003010 <FusionFastInverseSqrt>:
static inline float FusionFastInverseSqrt(const float x) {
 8003010:	b480      	push	{r7}
 8003012:	b085      	sub	sp, #20
 8003014:	af00      	add	r7, sp, #0
 8003016:	ed87 0a01 	vstr	s0, [r7, #4]
    Union32 union32 = {.f = x};
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	60fb      	str	r3, [r7, #12]
    union32.i = 0x5F1F1412 - (union32.i >> 1);
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	105a      	asrs	r2, r3, #1
 8003022:	4b10      	ldr	r3, [pc, #64]	; (8003064 <FusionFastInverseSqrt+0x54>)
 8003024:	1a9b      	subs	r3, r3, r2
 8003026:	60fb      	str	r3, [r7, #12]
    return union32.f * (1.69000231f - 0.714158168f * x * union32.f * union32.f);
 8003028:	ed97 7a03 	vldr	s14, [r7, #12]
 800302c:	edd7 7a01 	vldr	s15, [r7, #4]
 8003030:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8003068 <FusionFastInverseSqrt+0x58>
 8003034:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8003038:	edd7 7a03 	vldr	s15, [r7, #12]
 800303c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003040:	edd7 7a03 	vldr	s15, [r7, #12]
 8003044:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003048:	eddf 6a08 	vldr	s13, [pc, #32]	; 800306c <FusionFastInverseSqrt+0x5c>
 800304c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003050:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8003054:	eeb0 0a67 	vmov.f32	s0, s15
 8003058:	3714      	adds	r7, #20
 800305a:	46bd      	mov	sp, r7
 800305c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003060:	4770      	bx	lr
 8003062:	bf00      	nop
 8003064:	5f1f1412 	.word	0x5f1f1412
 8003068:	3f36d312 	.word	0x3f36d312
 800306c:	3fd851ff 	.word	0x3fd851ff

08003070 <FusionVectorSum>:
static inline float FusionVectorSum(const FusionVector vector) {
 8003070:	b480      	push	{r7}
 8003072:	b085      	sub	sp, #20
 8003074:	af00      	add	r7, sp, #0
 8003076:	eef0 6a40 	vmov.f32	s13, s0
 800307a:	eeb0 7a60 	vmov.f32	s14, s1
 800307e:	eef0 7a41 	vmov.f32	s15, s2
 8003082:	edc7 6a01 	vstr	s13, [r7, #4]
 8003086:	ed87 7a02 	vstr	s14, [r7, #8]
 800308a:	edc7 7a03 	vstr	s15, [r7, #12]
    return vector.axis.x + vector.axis.y + vector.axis.z;
 800308e:	ed97 7a01 	vldr	s14, [r7, #4]
 8003092:	edd7 7a02 	vldr	s15, [r7, #8]
 8003096:	ee37 7a27 	vadd.f32	s14, s14, s15
 800309a:	edd7 7a03 	vldr	s15, [r7, #12]
 800309e:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 80030a2:	eeb0 0a67 	vmov.f32	s0, s15
 80030a6:	3714      	adds	r7, #20
 80030a8:	46bd      	mov	sp, r7
 80030aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ae:	4770      	bx	lr

080030b0 <FusionVectorMultiplyScalar>:
static inline FusionVector FusionVectorMultiplyScalar(const FusionVector vector, const float scalar) {
 80030b0:	b480      	push	{r7}
 80030b2:	b08f      	sub	sp, #60	; 0x3c
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	eef0 6a40 	vmov.f32	s13, s0
 80030ba:	eeb0 7a60 	vmov.f32	s14, s1
 80030be:	eef0 7a41 	vmov.f32	s15, s2
 80030c2:	edc7 1a04 	vstr	s3, [r7, #16]
 80030c6:	edc7 6a05 	vstr	s13, [r7, #20]
 80030ca:	ed87 7a06 	vstr	s14, [r7, #24]
 80030ce:	edc7 7a07 	vstr	s15, [r7, #28]
            .x = vector.axis.x * scalar,
 80030d2:	ed97 7a05 	vldr	s14, [r7, #20]
 80030d6:	edd7 7a04 	vldr	s15, [r7, #16]
 80030da:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80030de:	edc7 7a08 	vstr	s15, [r7, #32]
            .y = vector.axis.y * scalar,
 80030e2:	ed97 7a06 	vldr	s14, [r7, #24]
 80030e6:	edd7 7a04 	vldr	s15, [r7, #16]
 80030ea:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80030ee:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            .z = vector.axis.z * scalar,
 80030f2:	ed97 7a07 	vldr	s14, [r7, #28]
 80030f6:	edd7 7a04 	vldr	s15, [r7, #16]
 80030fa:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80030fe:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    return result;
 8003102:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003106:	f107 0220 	add.w	r2, r7, #32
 800310a:	ca07      	ldmia	r2, {r0, r1, r2}
 800310c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003110:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003112:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003114:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003116:	ee06 1a90 	vmov	s13, r1
 800311a:	ee07 2a10 	vmov	s14, r2
 800311e:	ee07 3a90 	vmov	s15, r3
}
 8003122:	eeb0 0a66 	vmov.f32	s0, s13
 8003126:	eef0 0a47 	vmov.f32	s1, s14
 800312a:	eeb0 1a67 	vmov.f32	s2, s15
 800312e:	373c      	adds	r7, #60	; 0x3c
 8003130:	46bd      	mov	sp, r7
 8003132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003136:	4770      	bx	lr

08003138 <FusionVectorHadamardProduct>:
static inline FusionVector FusionVectorHadamardProduct(const FusionVector vectorA, const FusionVector vectorB) {
 8003138:	b480      	push	{r7}
 800313a:	b091      	sub	sp, #68	; 0x44
 800313c:	af00      	add	r7, sp, #0
 800313e:	eeb0 5a40 	vmov.f32	s10, s0
 8003142:	eef0 5a60 	vmov.f32	s11, s1
 8003146:	eeb0 6a41 	vmov.f32	s12, s2
 800314a:	eef0 6a61 	vmov.f32	s13, s3
 800314e:	eeb0 7a42 	vmov.f32	s14, s4
 8003152:	eef0 7a62 	vmov.f32	s15, s5
 8003156:	ed87 5a07 	vstr	s10, [r7, #28]
 800315a:	edc7 5a08 	vstr	s11, [r7, #32]
 800315e:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 8003162:	edc7 6a04 	vstr	s13, [r7, #16]
 8003166:	ed87 7a05 	vstr	s14, [r7, #20]
 800316a:	edc7 7a06 	vstr	s15, [r7, #24]
            .x = vectorA.axis.x * vectorB.axis.x,
 800316e:	ed97 7a07 	vldr	s14, [r7, #28]
 8003172:	edd7 7a04 	vldr	s15, [r7, #16]
 8003176:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800317a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = vectorA.axis.y * vectorB.axis.y,
 800317e:	ed97 7a08 	vldr	s14, [r7, #32]
 8003182:	edd7 7a05 	vldr	s15, [r7, #20]
 8003186:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800318a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = vectorA.axis.z * vectorB.axis.z,
 800318e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003192:	edd7 7a06 	vldr	s15, [r7, #24]
 8003196:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800319a:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    return result;
 800319e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80031a2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80031a6:	ca07      	ldmia	r2, {r0, r1, r2}
 80031a8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80031ac:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80031ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80031b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031b2:	ee06 1a90 	vmov	s13, r1
 80031b6:	ee07 2a10 	vmov	s14, r2
 80031ba:	ee07 3a90 	vmov	s15, r3
}
 80031be:	eeb0 0a66 	vmov.f32	s0, s13
 80031c2:	eef0 0a47 	vmov.f32	s1, s14
 80031c6:	eeb0 1a67 	vmov.f32	s2, s15
 80031ca:	3744      	adds	r7, #68	; 0x44
 80031cc:	46bd      	mov	sp, r7
 80031ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d2:	4770      	bx	lr

080031d4 <FusionVectorCrossProduct>:
static inline FusionVector FusionVectorCrossProduct(const FusionVector vectorA, const FusionVector vectorB) {
 80031d4:	b480      	push	{r7}
 80031d6:	b091      	sub	sp, #68	; 0x44
 80031d8:	af00      	add	r7, sp, #0
 80031da:	eeb0 5a40 	vmov.f32	s10, s0
 80031de:	eef0 5a60 	vmov.f32	s11, s1
 80031e2:	eeb0 6a41 	vmov.f32	s12, s2
 80031e6:	eef0 6a61 	vmov.f32	s13, s3
 80031ea:	eeb0 7a42 	vmov.f32	s14, s4
 80031ee:	eef0 7a62 	vmov.f32	s15, s5
 80031f2:	ed87 5a07 	vstr	s10, [r7, #28]
 80031f6:	edc7 5a08 	vstr	s11, [r7, #32]
 80031fa:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 80031fe:	edc7 6a04 	vstr	s13, [r7, #16]
 8003202:	ed87 7a05 	vstr	s14, [r7, #20]
 8003206:	edc7 7a06 	vstr	s15, [r7, #24]
            .x = A.y * B.z - A.z * B.y,
 800320a:	ed97 7a08 	vldr	s14, [r7, #32]
 800320e:	edd7 7a06 	vldr	s15, [r7, #24]
 8003212:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003216:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800321a:	edd7 7a05 	vldr	s15, [r7, #20]
 800321e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003222:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8003226:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = A.z * B.x - A.x * B.z,
 800322a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800322e:	edd7 7a04 	vldr	s15, [r7, #16]
 8003232:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003236:	edd7 6a07 	vldr	s13, [r7, #28]
 800323a:	edd7 7a06 	vldr	s15, [r7, #24]
 800323e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003242:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8003246:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = A.x * B.y - A.y * B.x,
 800324a:	ed97 7a07 	vldr	s14, [r7, #28]
 800324e:	edd7 7a05 	vldr	s15, [r7, #20]
 8003252:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003256:	edd7 6a08 	vldr	s13, [r7, #32]
 800325a:	edd7 7a04 	vldr	s15, [r7, #16]
 800325e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003262:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8003266:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    return result;
 800326a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800326e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003272:	ca07      	ldmia	r2, {r0, r1, r2}
 8003274:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003278:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800327a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800327c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800327e:	ee06 1a90 	vmov	s13, r1
 8003282:	ee07 2a10 	vmov	s14, r2
 8003286:	ee07 3a90 	vmov	s15, r3
}
 800328a:	eeb0 0a66 	vmov.f32	s0, s13
 800328e:	eef0 0a47 	vmov.f32	s1, s14
 8003292:	eeb0 1a67 	vmov.f32	s2, s15
 8003296:	3744      	adds	r7, #68	; 0x44
 8003298:	46bd      	mov	sp, r7
 800329a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329e:	4770      	bx	lr

080032a0 <FusionVectorMagnitudeSquared>:
static inline float FusionVectorMagnitudeSquared(const FusionVector vector) {
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b088      	sub	sp, #32
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	eef0 6a40 	vmov.f32	s13, s0
 80032aa:	eeb0 7a60 	vmov.f32	s14, s1
 80032ae:	eef0 7a41 	vmov.f32	s15, s2
 80032b2:	edc7 6a01 	vstr	s13, [r7, #4]
 80032b6:	ed87 7a02 	vstr	s14, [r7, #8]
 80032ba:	edc7 7a03 	vstr	s15, [r7, #12]
    return FusionVectorSum(FusionVectorHadamardProduct(vector, vector));
 80032be:	ed97 5a01 	vldr	s10, [r7, #4]
 80032c2:	edd7 5a02 	vldr	s11, [r7, #8]
 80032c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80032ca:	edd7 6a01 	vldr	s13, [r7, #4]
 80032ce:	ed97 7a02 	vldr	s14, [r7, #8]
 80032d2:	edd7 7a03 	vldr	s15, [r7, #12]
 80032d6:	eef0 1a45 	vmov.f32	s3, s10
 80032da:	eeb0 2a65 	vmov.f32	s4, s11
 80032de:	eef0 2a46 	vmov.f32	s5, s12
 80032e2:	eeb0 0a66 	vmov.f32	s0, s13
 80032e6:	eef0 0a47 	vmov.f32	s1, s14
 80032ea:	eeb0 1a67 	vmov.f32	s2, s15
 80032ee:	f7ff ff23 	bl	8003138 <FusionVectorHadamardProduct>
 80032f2:	eef0 6a40 	vmov.f32	s13, s0
 80032f6:	eeb0 7a60 	vmov.f32	s14, s1
 80032fa:	eef0 7a41 	vmov.f32	s15, s2
 80032fe:	edc7 6a05 	vstr	s13, [r7, #20]
 8003302:	ed87 7a06 	vstr	s14, [r7, #24]
 8003306:	edc7 7a07 	vstr	s15, [r7, #28]
 800330a:	edd7 6a05 	vldr	s13, [r7, #20]
 800330e:	ed97 7a06 	vldr	s14, [r7, #24]
 8003312:	edd7 7a07 	vldr	s15, [r7, #28]
 8003316:	eeb0 0a66 	vmov.f32	s0, s13
 800331a:	eef0 0a47 	vmov.f32	s1, s14
 800331e:	eeb0 1a67 	vmov.f32	s2, s15
 8003322:	f7ff fea5 	bl	8003070 <FusionVectorSum>
 8003326:	eef0 7a40 	vmov.f32	s15, s0
}
 800332a:	eeb0 0a67 	vmov.f32	s0, s15
 800332e:	3720      	adds	r7, #32
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}

08003334 <FusionVectorNormalise>:
static inline FusionVector FusionVectorNormalise(const FusionVector vector) {
 8003334:	b580      	push	{r7, lr}
 8003336:	b08c      	sub	sp, #48	; 0x30
 8003338:	af00      	add	r7, sp, #0
 800333a:	eef0 6a40 	vmov.f32	s13, s0
 800333e:	eeb0 7a60 	vmov.f32	s14, s1
 8003342:	eef0 7a41 	vmov.f32	s15, s2
 8003346:	edc7 6a05 	vstr	s13, [r7, #20]
 800334a:	ed87 7a06 	vstr	s14, [r7, #24]
 800334e:	edc7 7a07 	vstr	s15, [r7, #28]
    const float magnitudeReciprocal = FusionFastInverseSqrt(FusionVectorMagnitudeSquared(vector));
 8003352:	edd7 6a05 	vldr	s13, [r7, #20]
 8003356:	ed97 7a06 	vldr	s14, [r7, #24]
 800335a:	edd7 7a07 	vldr	s15, [r7, #28]
 800335e:	eeb0 0a66 	vmov.f32	s0, s13
 8003362:	eef0 0a47 	vmov.f32	s1, s14
 8003366:	eeb0 1a67 	vmov.f32	s2, s15
 800336a:	f7ff ff99 	bl	80032a0 <FusionVectorMagnitudeSquared>
 800336e:	eef0 7a40 	vmov.f32	s15, s0
 8003372:	eeb0 0a67 	vmov.f32	s0, s15
 8003376:	f7ff fe4b 	bl	8003010 <FusionFastInverseSqrt>
 800337a:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
    return FusionVectorMultiplyScalar(vector, magnitudeReciprocal);
 800337e:	edd7 6a05 	vldr	s13, [r7, #20]
 8003382:	ed97 7a06 	vldr	s14, [r7, #24]
 8003386:	edd7 7a07 	vldr	s15, [r7, #28]
 800338a:	edd7 1a0b 	vldr	s3, [r7, #44]	; 0x2c
 800338e:	eeb0 0a66 	vmov.f32	s0, s13
 8003392:	eef0 0a47 	vmov.f32	s1, s14
 8003396:	eeb0 1a67 	vmov.f32	s2, s15
 800339a:	f7ff fe89 	bl	80030b0 <FusionVectorMultiplyScalar>
 800339e:	eef0 6a40 	vmov.f32	s13, s0
 80033a2:	eeb0 7a60 	vmov.f32	s14, s1
 80033a6:	eef0 7a41 	vmov.f32	s15, s2
 80033aa:	edc7 6a08 	vstr	s13, [r7, #32]
 80033ae:	ed87 7a09 	vstr	s14, [r7, #36]	; 0x24
 80033b2:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 80033b6:	6a39      	ldr	r1, [r7, #32]
 80033b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033bc:	ee06 1a90 	vmov	s13, r1
 80033c0:	ee07 2a10 	vmov	s14, r2
 80033c4:	ee07 3a90 	vmov	s15, r3
}
 80033c8:	eeb0 0a66 	vmov.f32	s0, s13
 80033cc:	eef0 0a47 	vmov.f32	s1, s14
 80033d0:	eeb0 1a67 	vmov.f32	s2, s15
 80033d4:	3730      	adds	r7, #48	; 0x30
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}
	...

080033dc <FusionCompassCalculateHeading>:
 * @param convention Earth axes convention.
 * @param accelerometer Accelerometer measurement in any calibrated units.
 * @param magnetometer Magnetometer measurement in any calibrated units.
 * @return Heading angle in degrees.
 */
float FusionCompassCalculateHeading(const FusionConvention convention, const FusionVector accelerometer, const FusionVector magnetometer) {
 80033dc:	b580      	push	{r7, lr}
 80033de:	b0b2      	sub	sp, #200	; 0xc8
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	4603      	mov	r3, r0
 80033e4:	eeb0 5a40 	vmov.f32	s10, s0
 80033e8:	eef0 5a60 	vmov.f32	s11, s1
 80033ec:	eeb0 6a41 	vmov.f32	s12, s2
 80033f0:	eef0 6a61 	vmov.f32	s13, s3
 80033f4:	eeb0 7a42 	vmov.f32	s14, s4
 80033f8:	eef0 7a62 	vmov.f32	s15, s5
 80033fc:	77fb      	strb	r3, [r7, #31]
 80033fe:	ed87 5a04 	vstr	s10, [r7, #16]
 8003402:	edc7 5a05 	vstr	s11, [r7, #20]
 8003406:	ed87 6a06 	vstr	s12, [r7, #24]
 800340a:	edc7 6a01 	vstr	s13, [r7, #4]
 800340e:	ed87 7a02 	vstr	s14, [r7, #8]
 8003412:	edc7 7a03 	vstr	s15, [r7, #12]
    switch (convention) {
 8003416:	7ffb      	ldrb	r3, [r7, #31]
 8003418:	2b02      	cmp	r3, #2
 800341a:	f000 814b 	beq.w	80036b4 <FusionCompassCalculateHeading+0x2d8>
 800341e:	2b02      	cmp	r3, #2
 8003420:	f300 81f7 	bgt.w	8003812 <FusionCompassCalculateHeading+0x436>
 8003424:	2b00      	cmp	r3, #0
 8003426:	d003      	beq.n	8003430 <FusionCompassCalculateHeading+0x54>
 8003428:	2b01      	cmp	r3, #1
 800342a:	f000 8094 	beq.w	8003556 <FusionCompassCalculateHeading+0x17a>
 800342e:	e1f0      	b.n	8003812 <FusionCompassCalculateHeading+0x436>
        case FusionConventionNwu: {
            const FusionVector west = FusionVectorNormalise(FusionVectorCrossProduct(accelerometer, magnetometer));
 8003430:	ed97 5a01 	vldr	s10, [r7, #4]
 8003434:	edd7 5a02 	vldr	s11, [r7, #8]
 8003438:	ed97 6a03 	vldr	s12, [r7, #12]
 800343c:	edd7 6a04 	vldr	s13, [r7, #16]
 8003440:	ed97 7a05 	vldr	s14, [r7, #20]
 8003444:	edd7 7a06 	vldr	s15, [r7, #24]
 8003448:	eef0 1a45 	vmov.f32	s3, s10
 800344c:	eeb0 2a65 	vmov.f32	s4, s11
 8003450:	eef0 2a46 	vmov.f32	s5, s12
 8003454:	eeb0 0a66 	vmov.f32	s0, s13
 8003458:	eef0 0a47 	vmov.f32	s1, s14
 800345c:	eeb0 1a67 	vmov.f32	s2, s15
 8003460:	f7ff feb8 	bl	80031d4 <FusionVectorCrossProduct>
 8003464:	eef0 6a40 	vmov.f32	s13, s0
 8003468:	eeb0 7a60 	vmov.f32	s14, s1
 800346c:	eef0 7a41 	vmov.f32	s15, s2
 8003470:	edc7 6a20 	vstr	s13, [r7, #128]	; 0x80
 8003474:	ed87 7a21 	vstr	s14, [r7, #132]	; 0x84
 8003478:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
 800347c:	edd7 6a20 	vldr	s13, [r7, #128]	; 0x80
 8003480:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 8003484:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8003488:	eeb0 0a66 	vmov.f32	s0, s13
 800348c:	eef0 0a47 	vmov.f32	s1, s14
 8003490:	eeb0 1a67 	vmov.f32	s2, s15
 8003494:	f7ff ff4e 	bl	8003334 <FusionVectorNormalise>
 8003498:	eef0 6a40 	vmov.f32	s13, s0
 800349c:	eeb0 7a60 	vmov.f32	s14, s1
 80034a0:	eef0 7a41 	vmov.f32	s15, s2
 80034a4:	edc7 6a1d 	vstr	s13, [r7, #116]	; 0x74
 80034a8:	ed87 7a1e 	vstr	s14, [r7, #120]	; 0x78
 80034ac:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
            const FusionVector north = FusionVectorNormalise(FusionVectorCrossProduct(west, accelerometer));
 80034b0:	ed97 5a04 	vldr	s10, [r7, #16]
 80034b4:	edd7 5a05 	vldr	s11, [r7, #20]
 80034b8:	ed97 6a06 	vldr	s12, [r7, #24]
 80034bc:	edd7 6a1d 	vldr	s13, [r7, #116]	; 0x74
 80034c0:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 80034c4:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 80034c8:	eef0 1a45 	vmov.f32	s3, s10
 80034cc:	eeb0 2a65 	vmov.f32	s4, s11
 80034d0:	eef0 2a46 	vmov.f32	s5, s12
 80034d4:	eeb0 0a66 	vmov.f32	s0, s13
 80034d8:	eef0 0a47 	vmov.f32	s1, s14
 80034dc:	eeb0 1a67 	vmov.f32	s2, s15
 80034e0:	f7ff fe78 	bl	80031d4 <FusionVectorCrossProduct>
 80034e4:	eef0 6a40 	vmov.f32	s13, s0
 80034e8:	eeb0 7a60 	vmov.f32	s14, s1
 80034ec:	eef0 7a41 	vmov.f32	s15, s2
 80034f0:	edc7 6a23 	vstr	s13, [r7, #140]	; 0x8c
 80034f4:	ed87 7a24 	vstr	s14, [r7, #144]	; 0x90
 80034f8:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
 80034fc:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 8003500:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8003504:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8003508:	eeb0 0a66 	vmov.f32	s0, s13
 800350c:	eef0 0a47 	vmov.f32	s1, s14
 8003510:	eeb0 1a67 	vmov.f32	s2, s15
 8003514:	f7ff ff0e 	bl	8003334 <FusionVectorNormalise>
 8003518:	eef0 6a40 	vmov.f32	s13, s0
 800351c:	eeb0 7a60 	vmov.f32	s14, s1
 8003520:	eef0 7a41 	vmov.f32	s15, s2
 8003524:	edc7 6a1a 	vstr	s13, [r7, #104]	; 0x68
 8003528:	ed87 7a1b 	vstr	s14, [r7, #108]	; 0x6c
 800352c:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
            return FusionRadiansToDegrees(atan2f(west.axis.x, north.axis.x));
 8003530:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8003534:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 8003538:	eef0 0a47 	vmov.f32	s1, s14
 800353c:	eeb0 0a67 	vmov.f32	s0, s15
 8003540:	f00c ff02 	bl	8010348 <atan2f>
 8003544:	eef0 7a40 	vmov.f32	s15, s0
 8003548:	eeb0 0a67 	vmov.f32	s0, s15
 800354c:	f7ff fd4c 	bl	8002fe8 <FusionRadiansToDegrees>
 8003550:	eef0 7a40 	vmov.f32	s15, s0
 8003554:	e15f      	b.n	8003816 <FusionCompassCalculateHeading+0x43a>
        }
        case FusionConventionEnu: {
            const FusionVector west = FusionVectorNormalise(FusionVectorCrossProduct(accelerometer, magnetometer));
 8003556:	ed97 5a01 	vldr	s10, [r7, #4]
 800355a:	edd7 5a02 	vldr	s11, [r7, #8]
 800355e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003562:	edd7 6a04 	vldr	s13, [r7, #16]
 8003566:	ed97 7a05 	vldr	s14, [r7, #20]
 800356a:	edd7 7a06 	vldr	s15, [r7, #24]
 800356e:	eef0 1a45 	vmov.f32	s3, s10
 8003572:	eeb0 2a65 	vmov.f32	s4, s11
 8003576:	eef0 2a46 	vmov.f32	s5, s12
 800357a:	eeb0 0a66 	vmov.f32	s0, s13
 800357e:	eef0 0a47 	vmov.f32	s1, s14
 8003582:	eeb0 1a67 	vmov.f32	s2, s15
 8003586:	f7ff fe25 	bl	80031d4 <FusionVectorCrossProduct>
 800358a:	eef0 6a40 	vmov.f32	s13, s0
 800358e:	eeb0 7a60 	vmov.f32	s14, s1
 8003592:	eef0 7a41 	vmov.f32	s15, s2
 8003596:	edc7 6a26 	vstr	s13, [r7, #152]	; 0x98
 800359a:	ed87 7a27 	vstr	s14, [r7, #156]	; 0x9c
 800359e:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
 80035a2:	edd7 6a26 	vldr	s13, [r7, #152]	; 0x98
 80035a6:	ed97 7a27 	vldr	s14, [r7, #156]	; 0x9c
 80035aa:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80035ae:	eeb0 0a66 	vmov.f32	s0, s13
 80035b2:	eef0 0a47 	vmov.f32	s1, s14
 80035b6:	eeb0 1a67 	vmov.f32	s2, s15
 80035ba:	f7ff febb 	bl	8003334 <FusionVectorNormalise>
 80035be:	eef0 6a40 	vmov.f32	s13, s0
 80035c2:	eeb0 7a60 	vmov.f32	s14, s1
 80035c6:	eef0 7a41 	vmov.f32	s15, s2
 80035ca:	edc7 6a17 	vstr	s13, [r7, #92]	; 0x5c
 80035ce:	ed87 7a18 	vstr	s14, [r7, #96]	; 0x60
 80035d2:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
            const FusionVector north = FusionVectorNormalise(FusionVectorCrossProduct(west, accelerometer));
 80035d6:	ed97 5a04 	vldr	s10, [r7, #16]
 80035da:	edd7 5a05 	vldr	s11, [r7, #20]
 80035de:	ed97 6a06 	vldr	s12, [r7, #24]
 80035e2:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 80035e6:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80035ea:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80035ee:	eef0 1a45 	vmov.f32	s3, s10
 80035f2:	eeb0 2a65 	vmov.f32	s4, s11
 80035f6:	eef0 2a46 	vmov.f32	s5, s12
 80035fa:	eeb0 0a66 	vmov.f32	s0, s13
 80035fe:	eef0 0a47 	vmov.f32	s1, s14
 8003602:	eeb0 1a67 	vmov.f32	s2, s15
 8003606:	f7ff fde5 	bl	80031d4 <FusionVectorCrossProduct>
 800360a:	eef0 6a40 	vmov.f32	s13, s0
 800360e:	eeb0 7a60 	vmov.f32	s14, s1
 8003612:	eef0 7a41 	vmov.f32	s15, s2
 8003616:	edc7 6a29 	vstr	s13, [r7, #164]	; 0xa4
 800361a:	ed87 7a2a 	vstr	s14, [r7, #168]	; 0xa8
 800361e:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
 8003622:	edd7 6a29 	vldr	s13, [r7, #164]	; 0xa4
 8003626:	ed97 7a2a 	vldr	s14, [r7, #168]	; 0xa8
 800362a:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 800362e:	eeb0 0a66 	vmov.f32	s0, s13
 8003632:	eef0 0a47 	vmov.f32	s1, s14
 8003636:	eeb0 1a67 	vmov.f32	s2, s15
 800363a:	f7ff fe7b 	bl	8003334 <FusionVectorNormalise>
 800363e:	eef0 6a40 	vmov.f32	s13, s0
 8003642:	eeb0 7a60 	vmov.f32	s14, s1
 8003646:	eef0 7a41 	vmov.f32	s15, s2
 800364a:	edc7 6a14 	vstr	s13, [r7, #80]	; 0x50
 800364e:	ed87 7a15 	vstr	s14, [r7, #84]	; 0x54
 8003652:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
            const FusionVector east = FusionVectorMultiplyScalar(west, -1.0f);
 8003656:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 800365a:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800365e:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8003662:	eeff 1a00 	vmov.f32	s3, #240	; 0xbf800000 -1.0
 8003666:	eeb0 0a66 	vmov.f32	s0, s13
 800366a:	eef0 0a47 	vmov.f32	s1, s14
 800366e:	eeb0 1a67 	vmov.f32	s2, s15
 8003672:	f7ff fd1d 	bl	80030b0 <FusionVectorMultiplyScalar>
 8003676:	eef0 6a40 	vmov.f32	s13, s0
 800367a:	eeb0 7a60 	vmov.f32	s14, s1
 800367e:	eef0 7a41 	vmov.f32	s15, s2
 8003682:	edc7 6a11 	vstr	s13, [r7, #68]	; 0x44
 8003686:	ed87 7a12 	vstr	s14, [r7, #72]	; 0x48
 800368a:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
            return FusionRadiansToDegrees(atan2f(north.axis.x, east.axis.x));
 800368e:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8003692:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8003696:	eef0 0a47 	vmov.f32	s1, s14
 800369a:	eeb0 0a67 	vmov.f32	s0, s15
 800369e:	f00c fe53 	bl	8010348 <atan2f>
 80036a2:	eef0 7a40 	vmov.f32	s15, s0
 80036a6:	eeb0 0a67 	vmov.f32	s0, s15
 80036aa:	f7ff fc9d 	bl	8002fe8 <FusionRadiansToDegrees>
 80036ae:	eef0 7a40 	vmov.f32	s15, s0
 80036b2:	e0b0      	b.n	8003816 <FusionCompassCalculateHeading+0x43a>
        }
        case FusionConventionNed: {
            const FusionVector up = FusionVectorMultiplyScalar(accelerometer, -1.0f);
 80036b4:	edd7 6a04 	vldr	s13, [r7, #16]
 80036b8:	ed97 7a05 	vldr	s14, [r7, #20]
 80036bc:	edd7 7a06 	vldr	s15, [r7, #24]
 80036c0:	eeff 1a00 	vmov.f32	s3, #240	; 0xbf800000 -1.0
 80036c4:	eeb0 0a66 	vmov.f32	s0, s13
 80036c8:	eef0 0a47 	vmov.f32	s1, s14
 80036cc:	eeb0 1a67 	vmov.f32	s2, s15
 80036d0:	f7ff fcee 	bl	80030b0 <FusionVectorMultiplyScalar>
 80036d4:	eef0 6a40 	vmov.f32	s13, s0
 80036d8:	eeb0 7a60 	vmov.f32	s14, s1
 80036dc:	eef0 7a41 	vmov.f32	s15, s2
 80036e0:	edc7 6a0e 	vstr	s13, [r7, #56]	; 0x38
 80036e4:	ed87 7a0f 	vstr	s14, [r7, #60]	; 0x3c
 80036e8:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
            const FusionVector west = FusionVectorNormalise(FusionVectorCrossProduct(up, magnetometer));
 80036ec:	ed97 5a01 	vldr	s10, [r7, #4]
 80036f0:	edd7 5a02 	vldr	s11, [r7, #8]
 80036f4:	ed97 6a03 	vldr	s12, [r7, #12]
 80036f8:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 80036fc:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8003700:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8003704:	eef0 1a45 	vmov.f32	s3, s10
 8003708:	eeb0 2a65 	vmov.f32	s4, s11
 800370c:	eef0 2a46 	vmov.f32	s5, s12
 8003710:	eeb0 0a66 	vmov.f32	s0, s13
 8003714:	eef0 0a47 	vmov.f32	s1, s14
 8003718:	eeb0 1a67 	vmov.f32	s2, s15
 800371c:	f7ff fd5a 	bl	80031d4 <FusionVectorCrossProduct>
 8003720:	eef0 6a40 	vmov.f32	s13, s0
 8003724:	eeb0 7a60 	vmov.f32	s14, s1
 8003728:	eef0 7a41 	vmov.f32	s15, s2
 800372c:	edc7 6a2c 	vstr	s13, [r7, #176]	; 0xb0
 8003730:	ed87 7a2d 	vstr	s14, [r7, #180]	; 0xb4
 8003734:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
 8003738:	edd7 6a2c 	vldr	s13, [r7, #176]	; 0xb0
 800373c:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8003740:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8003744:	eeb0 0a66 	vmov.f32	s0, s13
 8003748:	eef0 0a47 	vmov.f32	s1, s14
 800374c:	eeb0 1a67 	vmov.f32	s2, s15
 8003750:	f7ff fdf0 	bl	8003334 <FusionVectorNormalise>
 8003754:	eef0 6a40 	vmov.f32	s13, s0
 8003758:	eeb0 7a60 	vmov.f32	s14, s1
 800375c:	eef0 7a41 	vmov.f32	s15, s2
 8003760:	edc7 6a0b 	vstr	s13, [r7, #44]	; 0x2c
 8003764:	ed87 7a0c 	vstr	s14, [r7, #48]	; 0x30
 8003768:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
            const FusionVector north = FusionVectorNormalise(FusionVectorCrossProduct(west, up));
 800376c:	ed97 5a0e 	vldr	s10, [r7, #56]	; 0x38
 8003770:	edd7 5a0f 	vldr	s11, [r7, #60]	; 0x3c
 8003774:	ed97 6a10 	vldr	s12, [r7, #64]	; 0x40
 8003778:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800377c:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8003780:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8003784:	eef0 1a45 	vmov.f32	s3, s10
 8003788:	eeb0 2a65 	vmov.f32	s4, s11
 800378c:	eef0 2a46 	vmov.f32	s5, s12
 8003790:	eeb0 0a66 	vmov.f32	s0, s13
 8003794:	eef0 0a47 	vmov.f32	s1, s14
 8003798:	eeb0 1a67 	vmov.f32	s2, s15
 800379c:	f7ff fd1a 	bl	80031d4 <FusionVectorCrossProduct>
 80037a0:	eef0 6a40 	vmov.f32	s13, s0
 80037a4:	eeb0 7a60 	vmov.f32	s14, s1
 80037a8:	eef0 7a41 	vmov.f32	s15, s2
 80037ac:	edc7 6a2f 	vstr	s13, [r7, #188]	; 0xbc
 80037b0:	ed87 7a30 	vstr	s14, [r7, #192]	; 0xc0
 80037b4:	edc7 7a31 	vstr	s15, [r7, #196]	; 0xc4
 80037b8:	edd7 6a2f 	vldr	s13, [r7, #188]	; 0xbc
 80037bc:	ed97 7a30 	vldr	s14, [r7, #192]	; 0xc0
 80037c0:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 80037c4:	eeb0 0a66 	vmov.f32	s0, s13
 80037c8:	eef0 0a47 	vmov.f32	s1, s14
 80037cc:	eeb0 1a67 	vmov.f32	s2, s15
 80037d0:	f7ff fdb0 	bl	8003334 <FusionVectorNormalise>
 80037d4:	eef0 6a40 	vmov.f32	s13, s0
 80037d8:	eeb0 7a60 	vmov.f32	s14, s1
 80037dc:	eef0 7a41 	vmov.f32	s15, s2
 80037e0:	edc7 6a08 	vstr	s13, [r7, #32]
 80037e4:	ed87 7a09 	vstr	s14, [r7, #36]	; 0x24
 80037e8:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            return FusionRadiansToDegrees(atan2f(west.axis.x, north.axis.x));
 80037ec:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80037f0:	ed97 7a08 	vldr	s14, [r7, #32]
 80037f4:	eef0 0a47 	vmov.f32	s1, s14
 80037f8:	eeb0 0a67 	vmov.f32	s0, s15
 80037fc:	f00c fda4 	bl	8010348 <atan2f>
 8003800:	eef0 7a40 	vmov.f32	s15, s0
 8003804:	eeb0 0a67 	vmov.f32	s0, s15
 8003808:	f7ff fbee 	bl	8002fe8 <FusionRadiansToDegrees>
 800380c:	eef0 7a40 	vmov.f32	s15, s0
 8003810:	e001      	b.n	8003816 <FusionCompassCalculateHeading+0x43a>
        }
    }
    return 0; // avoid compiler warning
 8003812:	eddf 7a03 	vldr	s15, [pc, #12]	; 8003820 <FusionCompassCalculateHeading+0x444>
}
 8003816:	eeb0 0a67 	vmov.f32	s0, s15
 800381a:	37c8      	adds	r7, #200	; 0xc8
 800381c:	46bd      	mov	sp, r7
 800381e:	bd80      	pop	{r7, pc}
 8003820:	00000000 	.word	0x00000000

08003824 <FusionVectorAdd>:
static inline FusionVector FusionVectorAdd(const FusionVector vectorA, const FusionVector vectorB) {
 8003824:	b480      	push	{r7}
 8003826:	b091      	sub	sp, #68	; 0x44
 8003828:	af00      	add	r7, sp, #0
 800382a:	eeb0 5a40 	vmov.f32	s10, s0
 800382e:	eef0 5a60 	vmov.f32	s11, s1
 8003832:	eeb0 6a41 	vmov.f32	s12, s2
 8003836:	eef0 6a61 	vmov.f32	s13, s3
 800383a:	eeb0 7a42 	vmov.f32	s14, s4
 800383e:	eef0 7a62 	vmov.f32	s15, s5
 8003842:	ed87 5a07 	vstr	s10, [r7, #28]
 8003846:	edc7 5a08 	vstr	s11, [r7, #32]
 800384a:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 800384e:	edc7 6a04 	vstr	s13, [r7, #16]
 8003852:	ed87 7a05 	vstr	s14, [r7, #20]
 8003856:	edc7 7a06 	vstr	s15, [r7, #24]
            .x = vectorA.axis.x + vectorB.axis.x,
 800385a:	ed97 7a07 	vldr	s14, [r7, #28]
 800385e:	edd7 7a04 	vldr	s15, [r7, #16]
 8003862:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8003866:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = vectorA.axis.y + vectorB.axis.y,
 800386a:	ed97 7a08 	vldr	s14, [r7, #32]
 800386e:	edd7 7a05 	vldr	s15, [r7, #20]
 8003872:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8003876:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = vectorA.axis.z + vectorB.axis.z,
 800387a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800387e:	edd7 7a06 	vldr	s15, [r7, #24]
 8003882:	ee77 7a27 	vadd.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8003886:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    return result;
 800388a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800388e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003892:	ca07      	ldmia	r2, {r0, r1, r2}
 8003894:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003898:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800389a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800389c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800389e:	ee06 1a90 	vmov	s13, r1
 80038a2:	ee07 2a10 	vmov	s14, r2
 80038a6:	ee07 3a90 	vmov	s15, r3
}
 80038aa:	eeb0 0a66 	vmov.f32	s0, s13
 80038ae:	eef0 0a47 	vmov.f32	s1, s14
 80038b2:	eeb0 1a67 	vmov.f32	s2, s15
 80038b6:	3744      	adds	r7, #68	; 0x44
 80038b8:	46bd      	mov	sp, r7
 80038ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038be:	4770      	bx	lr

080038c0 <FusionVectorSubtract>:
static inline FusionVector FusionVectorSubtract(const FusionVector vectorA, const FusionVector vectorB) {
 80038c0:	b480      	push	{r7}
 80038c2:	b091      	sub	sp, #68	; 0x44
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	eeb0 5a40 	vmov.f32	s10, s0
 80038ca:	eef0 5a60 	vmov.f32	s11, s1
 80038ce:	eeb0 6a41 	vmov.f32	s12, s2
 80038d2:	eef0 6a61 	vmov.f32	s13, s3
 80038d6:	eeb0 7a42 	vmov.f32	s14, s4
 80038da:	eef0 7a62 	vmov.f32	s15, s5
 80038de:	ed87 5a07 	vstr	s10, [r7, #28]
 80038e2:	edc7 5a08 	vstr	s11, [r7, #32]
 80038e6:	ed87 6a09 	vstr	s12, [r7, #36]	; 0x24
 80038ea:	edc7 6a04 	vstr	s13, [r7, #16]
 80038ee:	ed87 7a05 	vstr	s14, [r7, #20]
 80038f2:	edc7 7a06 	vstr	s15, [r7, #24]
            .x = vectorA.axis.x - vectorB.axis.x,
 80038f6:	ed97 7a07 	vldr	s14, [r7, #28]
 80038fa:	edd7 7a04 	vldr	s15, [r7, #16]
 80038fe:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8003902:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            .y = vectorA.axis.y - vectorB.axis.y,
 8003906:	ed97 7a08 	vldr	s14, [r7, #32]
 800390a:	edd7 7a05 	vldr	s15, [r7, #20]
 800390e:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8003912:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            .z = vectorA.axis.z - vectorB.axis.z,
 8003916:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800391a:	edd7 7a06 	vldr	s15, [r7, #24]
 800391e:	ee77 7a67 	vsub.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 8003922:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    return result;
 8003926:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800392a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800392e:	ca07      	ldmia	r2, {r0, r1, r2}
 8003930:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003934:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003936:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003938:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800393a:	ee06 1a90 	vmov	s13, r1
 800393e:	ee07 2a10 	vmov	s14, r2
 8003942:	ee07 3a90 	vmov	s15, r3
}
 8003946:	eeb0 0a66 	vmov.f32	s0, s13
 800394a:	eef0 0a47 	vmov.f32	s1, s14
 800394e:	eeb0 1a67 	vmov.f32	s2, s15
 8003952:	3744      	adds	r7, #68	; 0x44
 8003954:	46bd      	mov	sp, r7
 8003956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395a:	4770      	bx	lr

0800395c <FusionVectorMultiplyScalar>:
static inline FusionVector FusionVectorMultiplyScalar(const FusionVector vector, const float scalar) {
 800395c:	b480      	push	{r7}
 800395e:	b08f      	sub	sp, #60	; 0x3c
 8003960:	af00      	add	r7, sp, #0
 8003962:	eef0 6a40 	vmov.f32	s13, s0
 8003966:	eeb0 7a60 	vmov.f32	s14, s1
 800396a:	eef0 7a41 	vmov.f32	s15, s2
 800396e:	edc7 1a04 	vstr	s3, [r7, #16]
 8003972:	edc7 6a05 	vstr	s13, [r7, #20]
 8003976:	ed87 7a06 	vstr	s14, [r7, #24]
 800397a:	edc7 7a07 	vstr	s15, [r7, #28]
            .x = vector.axis.x * scalar,
 800397e:	ed97 7a05 	vldr	s14, [r7, #20]
 8003982:	edd7 7a04 	vldr	s15, [r7, #16]
 8003986:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800398a:	edc7 7a08 	vstr	s15, [r7, #32]
            .y = vector.axis.y * scalar,
 800398e:	ed97 7a06 	vldr	s14, [r7, #24]
 8003992:	edd7 7a04 	vldr	s15, [r7, #16]
 8003996:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 800399a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            .z = vector.axis.z * scalar,
 800399e:	ed97 7a07 	vldr	s14, [r7, #28]
 80039a2:	edd7 7a04 	vldr	s15, [r7, #16]
 80039a6:	ee67 7a27 	vmul.f32	s15, s14, s15
    const FusionVector result = {.axis = {
 80039aa:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    return result;
 80039ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80039b2:	f107 0220 	add.w	r2, r7, #32
 80039b6:	ca07      	ldmia	r2, {r0, r1, r2}
 80039b8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80039bc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80039be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039c2:	ee06 1a90 	vmov	s13, r1
 80039c6:	ee07 2a10 	vmov	s14, r2
 80039ca:	ee07 3a90 	vmov	s15, r3
}
 80039ce:	eeb0 0a66 	vmov.f32	s0, s13
 80039d2:	eef0 0a47 	vmov.f32	s1, s14
 80039d6:	eeb0 1a67 	vmov.f32	s2, s15
 80039da:	373c      	adds	r7, #60	; 0x3c
 80039dc:	46bd      	mov	sp, r7
 80039de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e2:	4770      	bx	lr

080039e4 <FusionOffsetInitialise>:
/**
 * @brief Initialises the gyroscope offset algorithm.
 * @param offset Gyroscope offset algorithm structure.
 * @param sampleRate Sample rate in Hz.
 */
void FusionOffsetInitialise(FusionOffset *const offset, const unsigned int sampleRate) {
 80039e4:	b480      	push	{r7}
 80039e6:	b087      	sub	sp, #28
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
 80039ec:	6039      	str	r1, [r7, #0]
    offset->filterCoefficient = 2.0f * (float) M_PI * CUTOFF_FREQUENCY * (1.0f / (float) sampleRate);
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	ee07 3a90 	vmov	s15, r3
 80039f4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80039f8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80039fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a00:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8003a44 <FusionOffsetInitialise+0x60>
 8003a04:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	edc3 7a00 	vstr	s15, [r3]
    offset->timeout = TIMEOUT * sampleRate;
 8003a0e:	683a      	ldr	r2, [r7, #0]
 8003a10:	4613      	mov	r3, r2
 8003a12:	009b      	lsls	r3, r3, #2
 8003a14:	441a      	add	r2, r3
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	605a      	str	r2, [r3, #4]
    offset->timer = 0;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	609a      	str	r2, [r3, #8]
    offset->gyroscopeOffset = FUSION_VECTOR_ZERO;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	f04f 0200 	mov.w	r2, #0
 8003a26:	60da      	str	r2, [r3, #12]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	f04f 0200 	mov.w	r2, #0
 8003a2e:	611a      	str	r2, [r3, #16]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	f04f 0200 	mov.w	r2, #0
 8003a36:	615a      	str	r2, [r3, #20]
}
 8003a38:	bf00      	nop
 8003a3a:	371c      	adds	r7, #28
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a42:	4770      	bx	lr
 8003a44:	3e00adfd 	.word	0x3e00adfd

08003a48 <FusionOffsetUpdate>:
 * gyroscope measurement.
 * @param offset Gyroscope offset algorithm structure.
 * @param gyroscope Gyroscope measurement in degrees per second.
 * @return Corrected gyroscope measurement in degrees per second.
 */
FusionVector FusionOffsetUpdate(FusionOffset *const offset, FusionVector gyroscope) {
 8003a48:	b590      	push	{r4, r7, lr}
 8003a4a:	b08f      	sub	sp, #60	; 0x3c
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	61f8      	str	r0, [r7, #28]
 8003a50:	eef0 6a40 	vmov.f32	s13, s0
 8003a54:	eeb0 7a60 	vmov.f32	s14, s1
 8003a58:	eef0 7a41 	vmov.f32	s15, s2
 8003a5c:	edc7 6a04 	vstr	s13, [r7, #16]
 8003a60:	ed87 7a05 	vstr	s14, [r7, #20]
 8003a64:	edc7 7a06 	vstr	s15, [r7, #24]

    // Subtract offset from gyroscope measurement
    gyroscope = FusionVectorSubtract(gyroscope, offset->gyroscopeOffset);
 8003a68:	69fb      	ldr	r3, [r7, #28]
 8003a6a:	ed93 5a03 	vldr	s10, [r3, #12]
 8003a6e:	edd3 5a04 	vldr	s11, [r3, #16]
 8003a72:	ed93 6a05 	vldr	s12, [r3, #20]
 8003a76:	edd7 6a04 	vldr	s13, [r7, #16]
 8003a7a:	ed97 7a05 	vldr	s14, [r7, #20]
 8003a7e:	edd7 7a06 	vldr	s15, [r7, #24]
 8003a82:	eef0 1a45 	vmov.f32	s3, s10
 8003a86:	eeb0 2a65 	vmov.f32	s4, s11
 8003a8a:	eef0 2a46 	vmov.f32	s5, s12
 8003a8e:	eeb0 0a66 	vmov.f32	s0, s13
 8003a92:	eef0 0a47 	vmov.f32	s1, s14
 8003a96:	eeb0 1a67 	vmov.f32	s2, s15
 8003a9a:	f7ff ff11 	bl	80038c0 <FusionVectorSubtract>
 8003a9e:	eef0 6a40 	vmov.f32	s13, s0
 8003aa2:	eeb0 7a60 	vmov.f32	s14, s1
 8003aa6:	eef0 7a41 	vmov.f32	s15, s2
 8003aaa:	edc7 6a04 	vstr	s13, [r7, #16]
 8003aae:	ed87 7a05 	vstr	s14, [r7, #20]
 8003ab2:	edc7 7a06 	vstr	s15, [r7, #24]

    // Reset timer if gyroscope not stationary
    if ((fabs(gyroscope.axis.x) > THRESHOLD) || (fabs(gyroscope.axis.y) > THRESHOLD) || (fabs(gyroscope.axis.z) > THRESHOLD)) {
 8003ab6:	edd7 7a04 	vldr	s15, [r7, #16]
 8003aba:	eef0 7ae7 	vabs.f32	s15, s15
 8003abe:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8003ac2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ac6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003aca:	dc15      	bgt.n	8003af8 <FusionOffsetUpdate+0xb0>
 8003acc:	edd7 7a05 	vldr	s15, [r7, #20]
 8003ad0:	eef0 7ae7 	vabs.f32	s15, s15
 8003ad4:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8003ad8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003adc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ae0:	dc0a      	bgt.n	8003af8 <FusionOffsetUpdate+0xb0>
 8003ae2:	edd7 7a06 	vldr	s15, [r7, #24]
 8003ae6:	eef0 7ae7 	vabs.f32	s15, s15
 8003aea:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8003aee:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003af2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003af6:	dd0a      	ble.n	8003b0e <FusionOffsetUpdate+0xc6>
        offset->timer = 0;
 8003af8:	69fb      	ldr	r3, [r7, #28]
 8003afa:	2200      	movs	r2, #0
 8003afc:	609a      	str	r2, [r3, #8]
        return gyroscope;
 8003afe:	f107 0320 	add.w	r3, r7, #32
 8003b02:	f107 0210 	add.w	r2, r7, #16
 8003b06:	ca07      	ldmia	r2, {r0, r1, r2}
 8003b08:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003b0c:	e060      	b.n	8003bd0 <FusionOffsetUpdate+0x188>
    }

    // Increment timer while gyroscope stationary
    if (offset->timer < offset->timeout) {
 8003b0e:	69fb      	ldr	r3, [r7, #28]
 8003b10:	689a      	ldr	r2, [r3, #8]
 8003b12:	69fb      	ldr	r3, [r7, #28]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	429a      	cmp	r2, r3
 8003b18:	d20c      	bcs.n	8003b34 <FusionOffsetUpdate+0xec>
        offset->timer++;
 8003b1a:	69fb      	ldr	r3, [r7, #28]
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	1c5a      	adds	r2, r3, #1
 8003b20:	69fb      	ldr	r3, [r7, #28]
 8003b22:	609a      	str	r2, [r3, #8]
        return gyroscope;
 8003b24:	f107 0320 	add.w	r3, r7, #32
 8003b28:	f107 0210 	add.w	r2, r7, #16
 8003b2c:	ca07      	ldmia	r2, {r0, r1, r2}
 8003b2e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003b32:	e04d      	b.n	8003bd0 <FusionOffsetUpdate+0x188>
    }

    // Adjust offset if timer has elapsed
    offset->gyroscopeOffset = FusionVectorAdd(offset->gyroscopeOffset, FusionVectorMultiplyScalar(gyroscope, offset->filterCoefficient));
 8003b34:	69fb      	ldr	r3, [r7, #28]
 8003b36:	ed93 6a00 	vldr	s12, [r3]
 8003b3a:	edd7 6a04 	vldr	s13, [r7, #16]
 8003b3e:	ed97 7a05 	vldr	s14, [r7, #20]
 8003b42:	edd7 7a06 	vldr	s15, [r7, #24]
 8003b46:	eef0 1a46 	vmov.f32	s3, s12
 8003b4a:	eeb0 0a66 	vmov.f32	s0, s13
 8003b4e:	eef0 0a47 	vmov.f32	s1, s14
 8003b52:	eeb0 1a67 	vmov.f32	s2, s15
 8003b56:	f7ff ff01 	bl	800395c <FusionVectorMultiplyScalar>
 8003b5a:	eef0 6a40 	vmov.f32	s13, s0
 8003b5e:	eeb0 7a60 	vmov.f32	s14, s1
 8003b62:	eef0 7a41 	vmov.f32	s15, s2
 8003b66:	edc7 6a0b 	vstr	s13, [r7, #44]	; 0x2c
 8003b6a:	ed87 7a0c 	vstr	s14, [r7, #48]	; 0x30
 8003b6e:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
 8003b72:	69fc      	ldr	r4, [r7, #28]
 8003b74:	ed97 5a0b 	vldr	s10, [r7, #44]	; 0x2c
 8003b78:	edd7 5a0c 	vldr	s11, [r7, #48]	; 0x30
 8003b7c:	ed97 6a0d 	vldr	s12, [r7, #52]	; 0x34
 8003b80:	69fb      	ldr	r3, [r7, #28]
 8003b82:	edd3 6a03 	vldr	s13, [r3, #12]
 8003b86:	ed93 7a04 	vldr	s14, [r3, #16]
 8003b8a:	edd3 7a05 	vldr	s15, [r3, #20]
 8003b8e:	eef0 1a45 	vmov.f32	s3, s10
 8003b92:	eeb0 2a65 	vmov.f32	s4, s11
 8003b96:	eef0 2a46 	vmov.f32	s5, s12
 8003b9a:	eeb0 0a66 	vmov.f32	s0, s13
 8003b9e:	eef0 0a47 	vmov.f32	s1, s14
 8003ba2:	eeb0 1a67 	vmov.f32	s2, s15
 8003ba6:	f7ff fe3d 	bl	8003824 <FusionVectorAdd>
 8003baa:	eef0 6a40 	vmov.f32	s13, s0
 8003bae:	eeb0 7a60 	vmov.f32	s14, s1
 8003bb2:	eef0 7a41 	vmov.f32	s15, s2
 8003bb6:	edc4 6a03 	vstr	s13, [r4, #12]
 8003bba:	ed84 7a04 	vstr	s14, [r4, #16]
 8003bbe:	edc4 7a05 	vstr	s15, [r4, #20]
    return gyroscope;
 8003bc2:	f107 0320 	add.w	r3, r7, #32
 8003bc6:	f107 0210 	add.w	r2, r7, #16
 8003bca:	ca07      	ldmia	r2, {r0, r1, r2}
 8003bcc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 8003bd0:	6a39      	ldr	r1, [r7, #32]
 8003bd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bd6:	ee06 1a90 	vmov	s13, r1
 8003bda:	ee07 2a10 	vmov	s14, r2
 8003bde:	ee07 3a90 	vmov	s15, r3
 8003be2:	eeb0 0a66 	vmov.f32	s0, s13
 8003be6:	eef0 0a47 	vmov.f32	s1, s14
 8003bea:	eeb0 1a67 	vmov.f32	s2, s15
 8003bee:	373c      	adds	r7, #60	; 0x3c
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bd90      	pop	{r4, r7, pc}

08003bf4 <ublox_i2c_bus_init>:
static uint8_t gps_loss_count = 0;

uint8_t gps_data_backup_flag = 0;   //Flag to enable gps data backup only on boot.


uint8_t ublox_i2c_bus_init(void){
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	af00      	add	r7, sp, #0
	hi2c1.Instance = I2C1;
 8003bf8:	4b1b      	ldr	r3, [pc, #108]	; (8003c68 <ublox_i2c_bus_init+0x74>)
 8003bfa:	4a1c      	ldr	r2, [pc, #112]	; (8003c6c <ublox_i2c_bus_init+0x78>)
 8003bfc:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x00B03FDB;
 8003bfe:	4b1a      	ldr	r3, [pc, #104]	; (8003c68 <ublox_i2c_bus_init+0x74>)
 8003c00:	4a1b      	ldr	r2, [pc, #108]	; (8003c70 <ublox_i2c_bus_init+0x7c>)
 8003c02:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 8003c04:	4b18      	ldr	r3, [pc, #96]	; (8003c68 <ublox_i2c_bus_init+0x74>)
 8003c06:	2200      	movs	r2, #0
 8003c08:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003c0a:	4b17      	ldr	r3, [pc, #92]	; (8003c68 <ublox_i2c_bus_init+0x74>)
 8003c0c:	2201      	movs	r2, #1
 8003c0e:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003c10:	4b15      	ldr	r3, [pc, #84]	; (8003c68 <ublox_i2c_bus_init+0x74>)
 8003c12:	2200      	movs	r2, #0
 8003c14:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 8003c16:	4b14      	ldr	r3, [pc, #80]	; (8003c68 <ublox_i2c_bus_init+0x74>)
 8003c18:	2200      	movs	r2, #0
 8003c1a:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003c1c:	4b12      	ldr	r3, [pc, #72]	; (8003c68 <ublox_i2c_bus_init+0x74>)
 8003c1e:	2200      	movs	r2, #0
 8003c20:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003c22:	4b11      	ldr	r3, [pc, #68]	; (8003c68 <ublox_i2c_bus_init+0x74>)
 8003c24:	2200      	movs	r2, #0
 8003c26:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003c28:	4b0f      	ldr	r3, [pc, #60]	; (8003c68 <ublox_i2c_bus_init+0x74>)
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003c2e:	480e      	ldr	r0, [pc, #56]	; (8003c68 <ublox_i2c_bus_init+0x74>)
 8003c30:	f002 facd 	bl	80061ce <HAL_I2C_Init>
 8003c34:	4603      	mov	r3, r0
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d001      	beq.n	8003c3e <ublox_i2c_bus_init+0x4a>
	{
	return 1;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e012      	b.n	8003c64 <ublox_i2c_bus_init+0x70>
	}

	/** Configure Analogue filter
	*/
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003c3e:	2100      	movs	r1, #0
 8003c40:	4809      	ldr	r0, [pc, #36]	; (8003c68 <ublox_i2c_bus_init+0x74>)
 8003c42:	f003 f935 	bl	8006eb0 <HAL_I2CEx_ConfigAnalogFilter>
 8003c46:	4603      	mov	r3, r0
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d001      	beq.n	8003c50 <ublox_i2c_bus_init+0x5c>
	{
	return 2;
 8003c4c:	2302      	movs	r3, #2
 8003c4e:	e009      	b.n	8003c64 <ublox_i2c_bus_init+0x70>
	}

	/** Configure Digital filter
	*/
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003c50:	2100      	movs	r1, #0
 8003c52:	4805      	ldr	r0, [pc, #20]	; (8003c68 <ublox_i2c_bus_init+0x74>)
 8003c54:	f003 f977 	bl	8006f46 <HAL_I2CEx_ConfigDigitalFilter>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d001      	beq.n	8003c62 <ublox_i2c_bus_init+0x6e>
	{
	return 3;
 8003c5e:	2303      	movs	r3, #3
 8003c60:	e000      	b.n	8003c64 <ublox_i2c_bus_init+0x70>
	}
	return 0;
 8003c62:	2300      	movs	r3, #0
}
 8003c64:	4618      	mov	r0, r3
 8003c66:	bd80      	pop	{r7, pc}
 8003c68:	20000290 	.word	0x20000290
 8003c6c:	40005400 	.word	0x40005400
 8003c70:	00b03fdb 	.word	0x00b03fdb

08003c74 <ublox_tick>:


void ublox_tick(void){
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b082      	sub	sp, #8
 8003c78:	af00      	add	r7, sp, #0
    uint8_t res = 0;
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	71fb      	strb	r3, [r7, #7]
    res = ubloxRead();
 8003c7e:	f000 f871 	bl	8003d64 <ubloxRead>
 8003c82:	4603      	mov	r3, r0
 8003c84:	71fb      	strb	r3, [r7, #7]
    if ((res == 8) || (res==10)){
 8003c86:	79fb      	ldrb	r3, [r7, #7]
 8003c88:	2b08      	cmp	r3, #8
 8003c8a:	d005      	beq.n	8003c98 <ublox_tick+0x24>
 8003c8c:	79fb      	ldrb	r3, [r7, #7]
 8003c8e:	2b0a      	cmp	r3, #10
 8003c90:	d002      	beq.n	8003c98 <ublox_tick+0x24>
        uart_write_debug("Failed to read\r\n",UART_NYX);
#endif
        return;
    }
    else{
        parseNMEA();
 8003c92:	f000 f8c5 	bl	8003e20 <parseNMEA>
 8003c96:	e000      	b.n	8003c9a <ublox_tick+0x26>
        return;
 8003c98:	bf00      	nop
    }
}
 8003c9a:	3708      	adds	r7, #8
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bd80      	pop	{r7, pc}

08003ca0 <ubloxInit>:
//    message[10] = (gps_data.altitude & 0x0000FF00) >> 8;
//    message[11] = (gps_data.altitude & 0x000000FF);
//    transmitMessage(message, 12, cmd, device);
//}

HAL_StatusTypeDef ubloxInit(void){
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b082      	sub	sp, #8
 8003ca4:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef ret=0x00;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	71fb      	strb	r3, [r7, #7]
    ret = setPortOutput(COM_PORT_I2C, COM_TYPE_NMEA);
 8003caa:	2102      	movs	r1, #2
 8003cac:	2000      	movs	r0, #0
 8003cae:	f000 fa95 	bl	80041dc <setPortOutput>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	71fb      	strb	r3, [r7, #7]
    if (ret != HAL_OK)return ret;
 8003cb6:	79fb      	ldrb	r3, [r7, #7]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d001      	beq.n	8003cc0 <ubloxInit+0x20>
 8003cbc:	79fb      	ldrb	r3, [r7, #7]
 8003cbe:	e04d      	b.n	8003d5c <ubloxInit+0xbc>
    ret = configureNMEA(UBX_CLASS_NMEA, UBX_NMEA_GLL, NMEA_GGL_RATE, COM_PORT_I2C);
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	2101      	movs	r1, #1
 8003cc6:	20f0      	movs	r0, #240	; 0xf0
 8003cc8:	f000 fab8 	bl	800423c <configureNMEA>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	71fb      	strb	r3, [r7, #7]
    if (ret != HAL_OK)return ret;
 8003cd0:	79fb      	ldrb	r3, [r7, #7]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d001      	beq.n	8003cda <ubloxInit+0x3a>
 8003cd6:	79fb      	ldrb	r3, [r7, #7]
 8003cd8:	e040      	b.n	8003d5c <ubloxInit+0xbc>
    ret = configureNMEA(UBX_CLASS_NMEA, UBX_NMEA_GSA, NMEA_GSA_RATE, COM_PORT_I2C);
 8003cda:	2300      	movs	r3, #0
 8003cdc:	2200      	movs	r2, #0
 8003cde:	2102      	movs	r1, #2
 8003ce0:	20f0      	movs	r0, #240	; 0xf0
 8003ce2:	f000 faab 	bl	800423c <configureNMEA>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	71fb      	strb	r3, [r7, #7]
    if (ret != HAL_OK)return ret;
 8003cea:	79fb      	ldrb	r3, [r7, #7]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d001      	beq.n	8003cf4 <ubloxInit+0x54>
 8003cf0:	79fb      	ldrb	r3, [r7, #7]
 8003cf2:	e033      	b.n	8003d5c <ubloxInit+0xbc>
    ret = configureNMEA(UBX_CLASS_NMEA, UBX_NMEA_GSV, NMEA_GSV_RATE, COM_PORT_I2C);
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	2103      	movs	r1, #3
 8003cfa:	20f0      	movs	r0, #240	; 0xf0
 8003cfc:	f000 fa9e 	bl	800423c <configureNMEA>
 8003d00:	4603      	mov	r3, r0
 8003d02:	71fb      	strb	r3, [r7, #7]
    if (ret != HAL_OK)return ret;
 8003d04:	79fb      	ldrb	r3, [r7, #7]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d001      	beq.n	8003d0e <ubloxInit+0x6e>
 8003d0a:	79fb      	ldrb	r3, [r7, #7]
 8003d0c:	e026      	b.n	8003d5c <ubloxInit+0xbc>
    ret = configureNMEA(UBX_CLASS_NMEA, UBX_NMEA_RMC, NMEA_RMC_RATE, COM_PORT_I2C);
 8003d0e:	2300      	movs	r3, #0
 8003d10:	2200      	movs	r2, #0
 8003d12:	2104      	movs	r1, #4
 8003d14:	20f0      	movs	r0, #240	; 0xf0
 8003d16:	f000 fa91 	bl	800423c <configureNMEA>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	71fb      	strb	r3, [r7, #7]
    if (ret != HAL_OK)return ret;
 8003d1e:	79fb      	ldrb	r3, [r7, #7]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d001      	beq.n	8003d28 <ubloxInit+0x88>
 8003d24:	79fb      	ldrb	r3, [r7, #7]
 8003d26:	e019      	b.n	8003d5c <ubloxInit+0xbc>
    ret = configureNMEA(UBX_CLASS_NMEA, UBX_NMEA_VTG, NMEA_VTG_RATE, COM_PORT_I2C);
 8003d28:	2300      	movs	r3, #0
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	2105      	movs	r1, #5
 8003d2e:	20f0      	movs	r0, #240	; 0xf0
 8003d30:	f000 fa84 	bl	800423c <configureNMEA>
 8003d34:	4603      	mov	r3, r0
 8003d36:	71fb      	strb	r3, [r7, #7]
    if (ret != HAL_OK)return ret;
 8003d38:	79fb      	ldrb	r3, [r7, #7]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d001      	beq.n	8003d42 <ubloxInit+0xa2>
 8003d3e:	79fb      	ldrb	r3, [r7, #7]
 8003d40:	e00c      	b.n	8003d5c <ubloxInit+0xbc>
    ret = configureNMEA(UBX_CLASS_NMEA, UBX_NMEA_GGA, NMEA_GGA_RATE, COM_PORT_I2C);
 8003d42:	2300      	movs	r3, #0
 8003d44:	2202      	movs	r2, #2
 8003d46:	2100      	movs	r1, #0
 8003d48:	20f0      	movs	r0, #240	; 0xf0
 8003d4a:	f000 fa77 	bl	800423c <configureNMEA>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	71fb      	strb	r3, [r7, #7]
    if (ret != HAL_OK)return ret;
 8003d52:	79fb      	ldrb	r3, [r7, #7]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d001      	beq.n	8003d5c <ubloxInit+0xbc>
 8003d58:	79fb      	ldrb	r3, [r7, #7]
 8003d5a:	e7ff      	b.n	8003d5c <ubloxInit+0xbc>
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	3708      	adds	r7, #8
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}

08003d64 <ubloxRead>:

HAL_StatusTypeDef ubloxNmeaGGA_set_refresh_rate(uint8_t seconds){
    return configureNMEA(UBX_CLASS_NMEA, UBX_NMEA_GGA, seconds, COM_PORT_I2C);
}

uint8_t ubloxRead(void){
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b086      	sub	sp, #24
 8003d68:	af04      	add	r7, sp, #16
    uint8_t res = 0;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	717b      	strb	r3, [r7, #5]

    uint16_t num = 0;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	80fb      	strh	r3, [r7, #6]
    uint8_t bytes[2] = {0};
 8003d72:	2300      	movs	r3, #0
 8003d74:	803b      	strh	r3, [r7, #0]

    res = HAL_I2C_Mem_Read(&hi2c1, UBLOX_M9N, 0xFD, I2C_MEMADD_SIZE_8BIT, bytes, 2, 20);
 8003d76:	2314      	movs	r3, #20
 8003d78:	9302      	str	r3, [sp, #8]
 8003d7a:	2302      	movs	r3, #2
 8003d7c:	9301      	str	r3, [sp, #4]
 8003d7e:	463b      	mov	r3, r7
 8003d80:	9300      	str	r3, [sp, #0]
 8003d82:	2301      	movs	r3, #1
 8003d84:	22fd      	movs	r2, #253	; 0xfd
 8003d86:	2184      	movs	r1, #132	; 0x84
 8003d88:	4822      	ldr	r0, [pc, #136]	; (8003e14 <ubloxRead+0xb0>)
 8003d8a:	f002 fcb7 	bl	80066fc <HAL_I2C_Mem_Read>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	717b      	strb	r3, [r7, #5]
    if (res!=HAL_OK)return res;
 8003d92:	797b      	ldrb	r3, [r7, #5]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d001      	beq.n	8003d9c <ubloxRead+0x38>
 8003d98:	797b      	ldrb	r3, [r7, #5]
 8003d9a:	e037      	b.n	8003e0c <ubloxRead+0xa8>
    num  = ((bytes[0] << 8) | bytes[1]);
 8003d9c:	783b      	ldrb	r3, [r7, #0]
 8003d9e:	021b      	lsls	r3, r3, #8
 8003da0:	b21a      	sxth	r2, r3
 8003da2:	787b      	ldrb	r3, [r7, #1]
 8003da4:	b21b      	sxth	r3, r3
 8003da6:	4313      	orrs	r3, r2
 8003da8:	b21b      	sxth	r3, r3
 8003daa:	80fb      	strh	r3, [r7, #6]
    memset(bytes, 0, 2);
 8003dac:	463b      	mov	r3, r7
 8003dae:	2202      	movs	r2, #2
 8003db0:	2100      	movs	r1, #0
 8003db2:	4618      	mov	r0, r3
 8003db4:	f009 fb12 	bl	800d3dc <memset>
    if (num > 0){
 8003db8:	88fb      	ldrh	r3, [r7, #6]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d025      	beq.n	8003e0a <ubloxRead+0xa6>
    	if (num>75)num=75;
 8003dbe:	88fb      	ldrh	r3, [r7, #6]
 8003dc0:	2b4b      	cmp	r3, #75	; 0x4b
 8003dc2:	d901      	bls.n	8003dc8 <ubloxRead+0x64>
 8003dc4:	234b      	movs	r3, #75	; 0x4b
 8003dc6:	80fb      	strh	r3, [r7, #6]
        res = HAL_I2C_Mem_Read(&hi2c1, UBLOX_M9N, 0xFF, I2C_MEMADD_SIZE_8BIT, gps_data.sentence, num, 100);
 8003dc8:	2364      	movs	r3, #100	; 0x64
 8003dca:	9302      	str	r3, [sp, #8]
 8003dcc:	88fb      	ldrh	r3, [r7, #6]
 8003dce:	9301      	str	r3, [sp, #4]
 8003dd0:	4b11      	ldr	r3, [pc, #68]	; (8003e18 <ubloxRead+0xb4>)
 8003dd2:	9300      	str	r3, [sp, #0]
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	22ff      	movs	r2, #255	; 0xff
 8003dd8:	2184      	movs	r1, #132	; 0x84
 8003dda:	480e      	ldr	r0, [pc, #56]	; (8003e14 <ubloxRead+0xb0>)
 8003ddc:	f002 fc8e 	bl	80066fc <HAL_I2C_Mem_Read>
 8003de0:	4603      	mov	r3, r0
 8003de2:	717b      	strb	r3, [r7, #5]
        if ((res != HAL_OK) || (gps_data.sentence[0] != '$')){
 8003de4:	797b      	ldrb	r3, [r7, #5]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d103      	bne.n	8003df2 <ubloxRead+0x8e>
 8003dea:	4b0b      	ldr	r3, [pc, #44]	; (8003e18 <ubloxRead+0xb4>)
 8003dec:	781b      	ldrb	r3, [r3, #0]
 8003dee:	2b24      	cmp	r3, #36	; 0x24
 8003df0:	d001      	beq.n	8003df6 <ubloxRead+0x92>
                return 10;
 8003df2:	230a      	movs	r3, #10
 8003df4:	e00a      	b.n	8003e0c <ubloxRead+0xa8>
        }
//#ifdef __DEBUG__
        uart_write_debug(gps_data.sentence, 50);
 8003df6:	2132      	movs	r1, #50	; 0x32
 8003df8:	4807      	ldr	r0, [pc, #28]	; (8003e18 <ubloxRead+0xb4>)
 8003dfa:	f001 fe81 	bl	8005b00 <uart_write_debug>
        uart_write_debug("\r\n", 10);
 8003dfe:	210a      	movs	r1, #10
 8003e00:	4806      	ldr	r0, [pc, #24]	; (8003e1c <ubloxRead+0xb8>)
 8003e02:	f001 fe7d 	bl	8005b00 <uart_write_debug>
//#endif
        return res;
 8003e06:	797b      	ldrb	r3, [r7, #5]
 8003e08:	e000      	b.n	8003e0c <ubloxRead+0xa8>
    }
    return 10;
 8003e0a:	230a      	movs	r3, #10
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	3708      	adds	r7, #8
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bd80      	pop	{r7, pc}
 8003e14:	20000290 	.word	0x20000290
 8003e18:	200002e4 	.word	0x200002e4
 8003e1c:	08011928 	.word	0x08011928

08003e20 <parseNMEA>:

uint8_t parseNMEA(void){
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b08c      	sub	sp, #48	; 0x30
 8003e24:	af00      	add	r7, sp, #0
    char lat[12] = {0};
 8003e26:	2300      	movs	r3, #0
 8003e28:	61fb      	str	r3, [r7, #28]
 8003e2a:	f107 0320 	add.w	r3, r7, #32
 8003e2e:	2200      	movs	r2, #0
 8003e30:	601a      	str	r2, [r3, #0]
 8003e32:	605a      	str	r2, [r3, #4]
    char lng[12] = {0};
 8003e34:	2300      	movs	r3, #0
 8003e36:	613b      	str	r3, [r7, #16]
 8003e38:	f107 0314 	add.w	r3, r7, #20
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	601a      	str	r2, [r3, #0]
 8003e40:	605a      	str	r2, [r3, #4]
    char alt[7] = {0};
 8003e42:	2300      	movs	r3, #0
 8003e44:	60bb      	str	r3, [r7, #8]
 8003e46:	f107 030c 	add.w	r3, r7, #12
 8003e4a:	2100      	movs	r1, #0
 8003e4c:	460a      	mov	r2, r1
 8003e4e:	801a      	strh	r2, [r3, #0]
 8003e50:	460a      	mov	r2, r1
 8003e52:	709a      	strb	r2, [r3, #2]
    const char NMEA_delimiter[2] = ",";
 8003e54:	232c      	movs	r3, #44	; 0x2c
 8003e56:	80bb      	strh	r3, [r7, #4]
    char * token = strtoke(gps_data.sentence, NMEA_delimiter);
 8003e58:	1d3b      	adds	r3, r7, #4
 8003e5a:	4619      	mov	r1, r3
 8003e5c:	4868      	ldr	r0, [pc, #416]	; (8004000 <parseNMEA+0x1e0>)
 8003e5e:	f000 fa5b 	bl	8004318 <strtoke>
 8003e62:	4603      	mov	r3, r0
 8003e64:	62fb      	str	r3, [r7, #44]	; 0x2c

    uint8_t i = 0;
 8003e66:	2300      	movs	r3, #0
 8003e68:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    for (i = 0; token != NULL; i++) {
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e72:	e063      	b.n	8003f3c <parseNMEA+0x11c>
        switch (i) {
 8003e74:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003e78:	2b0b      	cmp	r3, #11
 8003e7a:	d853      	bhi.n	8003f24 <parseNMEA+0x104>
 8003e7c:	a201      	add	r2, pc, #4	; (adr r2, 8003e84 <parseNMEA+0x64>)
 8003e7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e82:	bf00      	nop
 8003e84:	08003f25 	.word	0x08003f25
 8003e88:	08003eb5 	.word	0x08003eb5
 8003e8c:	08003ebf 	.word	0x08003ebf
 8003e90:	08003ecd 	.word	0x08003ecd
 8003e94:	08003ed7 	.word	0x08003ed7
 8003e98:	08003ee5 	.word	0x08003ee5
 8003e9c:	08003eef 	.word	0x08003eef
 8003ea0:	08003ef9 	.word	0x08003ef9
 8003ea4:	08003f03 	.word	0x08003f03
 8003ea8:	08003f0d 	.word	0x08003f0d
 8003eac:	08003f25 	.word	0x08003f25
 8003eb0:	08003f1b 	.word	0x08003f1b
        case 0:
            break;
        case 1:
            strcpy(gps_data.timestamp, token);
 8003eb4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003eb6:	4853      	ldr	r0, [pc, #332]	; (8004004 <parseNMEA+0x1e4>)
 8003eb8:	f009 ff22 	bl	800dd00 <strcpy>
            break;
 8003ebc:	e032      	b.n	8003f24 <parseNMEA+0x104>
        case 2:
            strcpy(lat, token);
 8003ebe:	f107 031c 	add.w	r3, r7, #28
 8003ec2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	f009 ff1b 	bl	800dd00 <strcpy>
            break;
 8003eca:	e02b      	b.n	8003f24 <parseNMEA+0x104>
        case 3:
            strcpy(gps_data.NS, token);
 8003ecc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003ece:	484e      	ldr	r0, [pc, #312]	; (8004008 <parseNMEA+0x1e8>)
 8003ed0:	f009 ff16 	bl	800dd00 <strcpy>
            break;
 8003ed4:	e026      	b.n	8003f24 <parseNMEA+0x104>
        case 4:
            strcpy(lng, token);
 8003ed6:	f107 0310 	add.w	r3, r7, #16
 8003eda:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003edc:	4618      	mov	r0, r3
 8003ede:	f009 ff0f 	bl	800dd00 <strcpy>
            break;
 8003ee2:	e01f      	b.n	8003f24 <parseNMEA+0x104>
        case 5:
            strcpy(gps_data.EW, token);
 8003ee4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003ee6:	4849      	ldr	r0, [pc, #292]	; (800400c <parseNMEA+0x1ec>)
 8003ee8:	f009 ff0a 	bl	800dd00 <strcpy>
            break;
 8003eec:	e01a      	b.n	8003f24 <parseNMEA+0x104>
        case 6:
            strcpy(gps_data.quality, token);
 8003eee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003ef0:	4847      	ldr	r0, [pc, #284]	; (8004010 <parseNMEA+0x1f0>)
 8003ef2:	f009 ff05 	bl	800dd00 <strcpy>
            break;
 8003ef6:	e015      	b.n	8003f24 <parseNMEA+0x104>
        case 7:
            strcpy(gps_data.satellites, token);
 8003ef8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003efa:	4846      	ldr	r0, [pc, #280]	; (8004014 <parseNMEA+0x1f4>)
 8003efc:	f009 ff00 	bl	800dd00 <strcpy>
            break;
 8003f00:	e010      	b.n	8003f24 <parseNMEA+0x104>
        case 8:
            strcpy(gps_data.HDOP, token);
 8003f02:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003f04:	4844      	ldr	r0, [pc, #272]	; (8004018 <parseNMEA+0x1f8>)
 8003f06:	f009 fefb 	bl	800dd00 <strcpy>
            break;
 8003f0a:	e00b      	b.n	8003f24 <parseNMEA+0x104>
        case 9:
            strcpy(alt, token);
 8003f0c:	f107 0308 	add.w	r3, r7, #8
 8003f10:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003f12:	4618      	mov	r0, r3
 8003f14:	f009 fef4 	bl	800dd00 <strcpy>
            break;
 8003f18:	e004      	b.n	8003f24 <parseNMEA+0x104>
        case 11:
            strcpy(gps_data.sep, token);
 8003f1a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003f1c:	483f      	ldr	r0, [pc, #252]	; (800401c <parseNMEA+0x1fc>)
 8003f1e:	f009 feef 	bl	800dd00 <strcpy>
            break;
 8003f22:	bf00      	nop
        }
        token = strtoke(NULL, NMEA_delimiter);
 8003f24:	1d3b      	adds	r3, r7, #4
 8003f26:	4619      	mov	r1, r3
 8003f28:	2000      	movs	r0, #0
 8003f2a:	f000 f9f5 	bl	8004318 <strtoke>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (i = 0; token != NULL; i++) {
 8003f32:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003f36:	3301      	adds	r3, #1
 8003f38:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d198      	bne.n	8003e74 <parseNMEA+0x54>
    }
    if (i<11){ //If the number of fields parsed is less than 11. Return error.
 8003f42:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003f46:	2b0a      	cmp	r3, #10
 8003f48:	d80d      	bhi.n	8003f66 <parseNMEA+0x146>
        gps_loss_count++;
 8003f4a:	4b35      	ldr	r3, [pc, #212]	; (8004020 <parseNMEA+0x200>)
 8003f4c:	781b      	ldrb	r3, [r3, #0]
 8003f4e:	3301      	adds	r3, #1
 8003f50:	b2da      	uxtb	r2, r3
 8003f52:	4b33      	ldr	r3, [pc, #204]	; (8004020 <parseNMEA+0x200>)
 8003f54:	701a      	strb	r2, [r3, #0]
        if (gps_loss_count > GPS_LOSS_COUNT_THR){
 8003f56:	4b32      	ldr	r3, [pc, #200]	; (8004020 <parseNMEA+0x200>)
 8003f58:	781b      	ldrb	r3, [r3, #0]
 8003f5a:	2b14      	cmp	r3, #20
 8003f5c:	d901      	bls.n	8003f62 <parseNMEA+0x142>
            init_gps_data();
 8003f5e:	f000 f99f 	bl	80042a0 <init_gps_data>
        }
        return 1;
 8003f62:	2301      	movs	r3, #1
 8003f64:	e048      	b.n	8003ff8 <parseNMEA+0x1d8>
    }
    if ((gps_data.quality[0] == '1') || (gps_data.quality[0] == '2') || (gps_data.quality[0] == '4') || (gps_data.quality[0] == '5')){
 8003f66:	4b26      	ldr	r3, [pc, #152]	; (8004000 <parseNMEA+0x1e0>)
 8003f68:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8003f6c:	2b31      	cmp	r3, #49	; 0x31
 8003f6e:	d00e      	beq.n	8003f8e <parseNMEA+0x16e>
 8003f70:	4b23      	ldr	r3, [pc, #140]	; (8004000 <parseNMEA+0x1e0>)
 8003f72:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8003f76:	2b32      	cmp	r3, #50	; 0x32
 8003f78:	d009      	beq.n	8003f8e <parseNMEA+0x16e>
 8003f7a:	4b21      	ldr	r3, [pc, #132]	; (8004000 <parseNMEA+0x1e0>)
 8003f7c:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8003f80:	2b34      	cmp	r3, #52	; 0x34
 8003f82:	d004      	beq.n	8003f8e <parseNMEA+0x16e>
 8003f84:	4b1e      	ldr	r3, [pc, #120]	; (8004000 <parseNMEA+0x1e0>)
 8003f86:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8003f8a:	2b35      	cmp	r3, #53	; 0x35
 8003f8c:	d11d      	bne.n	8003fca <parseNMEA+0x1aa>
        gps_data.latitude = coorsAtol(lat, gps_data.NS);
 8003f8e:	f107 031c 	add.w	r3, r7, #28
 8003f92:	491d      	ldr	r1, [pc, #116]	; (8004008 <parseNMEA+0x1e8>)
 8003f94:	4618      	mov	r0, r3
 8003f96:	f000 fa79 	bl	800448c <coorsAtol>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	4a18      	ldr	r2, [pc, #96]	; (8004000 <parseNMEA+0x1e0>)
 8003f9e:	6553      	str	r3, [r2, #84]	; 0x54
        gps_data.longtitude = coorsAtol(lng, gps_data.EW);
 8003fa0:	f107 0310 	add.w	r3, r7, #16
 8003fa4:	4919      	ldr	r1, [pc, #100]	; (800400c <parseNMEA+0x1ec>)
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	f000 fa70 	bl	800448c <coorsAtol>
 8003fac:	4603      	mov	r3, r0
 8003fae:	4a14      	ldr	r2, [pc, #80]	; (8004000 <parseNMEA+0x1e0>)
 8003fb0:	65d3      	str	r3, [r2, #92]	; 0x5c
        gps_data.altitude = altAtol(alt);
 8003fb2:	f107 0308 	add.w	r3, r7, #8
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f000 f9e0 	bl	800437c <altAtol>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	4a10      	ldr	r2, [pc, #64]	; (8004000 <parseNMEA+0x1e0>)
 8003fc0:	6653      	str	r3, [r2, #100]	; 0x64
        gps_loss_count = 0;
 8003fc2:	4b17      	ldr	r3, [pc, #92]	; (8004020 <parseNMEA+0x200>)
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	701a      	strb	r2, [r3, #0]
    if ((gps_data.quality[0] == '1') || (gps_data.quality[0] == '2') || (gps_data.quality[0] == '4') || (gps_data.quality[0] == '5')){
 8003fc8:	e010      	b.n	8003fec <parseNMEA+0x1cc>
    }
    else if (gps_data.quality[0] == '0'){
 8003fca:	4b0d      	ldr	r3, [pc, #52]	; (8004000 <parseNMEA+0x1e0>)
 8003fcc:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8003fd0:	2b30      	cmp	r3, #48	; 0x30
 8003fd2:	d10b      	bne.n	8003fec <parseNMEA+0x1cc>
        gps_loss_count++;
 8003fd4:	4b12      	ldr	r3, [pc, #72]	; (8004020 <parseNMEA+0x200>)
 8003fd6:	781b      	ldrb	r3, [r3, #0]
 8003fd8:	3301      	adds	r3, #1
 8003fda:	b2da      	uxtb	r2, r3
 8003fdc:	4b10      	ldr	r3, [pc, #64]	; (8004020 <parseNMEA+0x200>)
 8003fde:	701a      	strb	r2, [r3, #0]
        if (gps_loss_count > GPS_LOSS_COUNT_THR){
 8003fe0:	4b0f      	ldr	r3, [pc, #60]	; (8004020 <parseNMEA+0x200>)
 8003fe2:	781b      	ldrb	r3, [r3, #0]
 8003fe4:	2b14      	cmp	r3, #20
 8003fe6:	d901      	bls.n	8003fec <parseNMEA+0x1cc>
            init_gps_data();
 8003fe8:	f000 f95a 	bl	80042a0 <init_gps_data>
        }
    }
    memset(gps_data.sentence, 0, 75);
 8003fec:	224b      	movs	r2, #75	; 0x4b
 8003fee:	2100      	movs	r1, #0
 8003ff0:	4803      	ldr	r0, [pc, #12]	; (8004000 <parseNMEA+0x1e0>)
 8003ff2:	f009 f9f3 	bl	800d3dc <memset>
    return 0;
 8003ff6:	2300      	movs	r3, #0
}
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	3730      	adds	r7, #48	; 0x30
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bd80      	pop	{r7, pc}
 8004000:	200002e4 	.word	0x200002e4
 8004004:	2000032f 	.word	0x2000032f
 8004008:	2000033c 	.word	0x2000033c
 800400c:	20000344 	.word	0x20000344
 8004010:	20000345 	.word	0x20000345
 8004014:	2000034c 	.word	0x2000034c
 8004018:	2000034e 	.word	0x2000034e
 800401c:	20000353 	.word	0x20000353
 8004020:	2000035c 	.word	0x2000035c

08004024 <calcChecksum>:


static void calcChecksum(messageCFG_t *msg){
 8004024:	b480      	push	{r7}
 8004026:	b085      	sub	sp, #20
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
    msg->checksumA = 0;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2200      	movs	r2, #0
 8004030:	731a      	strb	r2, [r3, #12]
    msg->checksumB = 0;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2200      	movs	r2, #0
 8004036:	735a      	strb	r2, [r3, #13]

    msg->checksumA += msg->cls;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	7b1a      	ldrb	r2, [r3, #12]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	781b      	ldrb	r3, [r3, #0]
 8004040:	4413      	add	r3, r2
 8004042:	b2da      	uxtb	r2, r3
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	731a      	strb	r2, [r3, #12]
    msg->checksumB += msg->checksumA;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	7b5a      	ldrb	r2, [r3, #13]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	7b1b      	ldrb	r3, [r3, #12]
 8004050:	4413      	add	r3, r2
 8004052:	b2da      	uxtb	r2, r3
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	735a      	strb	r2, [r3, #13]

    msg->checksumA += msg->id;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	7b1a      	ldrb	r2, [r3, #12]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	785b      	ldrb	r3, [r3, #1]
 8004060:	4413      	add	r3, r2
 8004062:	b2da      	uxtb	r2, r3
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	731a      	strb	r2, [r3, #12]
    msg->checksumB += msg->checksumA;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	7b5a      	ldrb	r2, [r3, #13]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	7b1b      	ldrb	r3, [r3, #12]
 8004070:	4413      	add	r3, r2
 8004072:	b2da      	uxtb	r2, r3
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	735a      	strb	r2, [r3, #13]

    msg->checksumA += (msg->len & 0xFF);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	7b1a      	ldrb	r2, [r3, #12]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	885b      	ldrh	r3, [r3, #2]
 8004080:	b2db      	uxtb	r3, r3
 8004082:	4413      	add	r3, r2
 8004084:	b2da      	uxtb	r2, r3
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	731a      	strb	r2, [r3, #12]
    msg->checksumB += msg->checksumA;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	7b5a      	ldrb	r2, [r3, #13]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	7b1b      	ldrb	r3, [r3, #12]
 8004092:	4413      	add	r3, r2
 8004094:	b2da      	uxtb	r2, r3
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	735a      	strb	r2, [r3, #13]

    msg->checksumA += (msg->len >> 8);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	7b1a      	ldrb	r2, [r3, #12]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	885b      	ldrh	r3, [r3, #2]
 80040a2:	0a1b      	lsrs	r3, r3, #8
 80040a4:	b29b      	uxth	r3, r3
 80040a6:	b2db      	uxtb	r3, r3
 80040a8:	4413      	add	r3, r2
 80040aa:	b2da      	uxtb	r2, r3
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	731a      	strb	r2, [r3, #12]
    msg->checksumB += msg->checksumA;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	7b5a      	ldrb	r2, [r3, #13]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	7b1b      	ldrb	r3, [r3, #12]
 80040b8:	4413      	add	r3, r2
 80040ba:	b2da      	uxtb	r2, r3
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	735a      	strb	r2, [r3, #13]

    uint8_t i;
    for (i=0; i < msg->len; i++)
 80040c0:	2300      	movs	r3, #0
 80040c2:	73fb      	strb	r3, [r7, #15]
 80040c4:	e015      	b.n	80040f2 <calcChecksum+0xce>
    {
        msg->checksumA += msg->payload[i];
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	7b1a      	ldrb	r2, [r3, #12]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6899      	ldr	r1, [r3, #8]
 80040ce:	7bfb      	ldrb	r3, [r7, #15]
 80040d0:	440b      	add	r3, r1
 80040d2:	781b      	ldrb	r3, [r3, #0]
 80040d4:	4413      	add	r3, r2
 80040d6:	b2da      	uxtb	r2, r3
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	731a      	strb	r2, [r3, #12]
        msg->checksumB += msg->checksumA;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	7b5a      	ldrb	r2, [r3, #13]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	7b1b      	ldrb	r3, [r3, #12]
 80040e4:	4413      	add	r3, r2
 80040e6:	b2da      	uxtb	r2, r3
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	735a      	strb	r2, [r3, #13]
    for (i=0; i < msg->len; i++)
 80040ec:	7bfb      	ldrb	r3, [r7, #15]
 80040ee:	3301      	adds	r3, #1
 80040f0:	73fb      	strb	r3, [r7, #15]
 80040f2:	7bfb      	ldrb	r3, [r7, #15]
 80040f4:	b29a      	uxth	r2, r3
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	885b      	ldrh	r3, [r3, #2]
 80040fa:	429a      	cmp	r2, r3
 80040fc:	d3e3      	bcc.n	80040c6 <calcChecksum+0xa2>
    }
}
 80040fe:	bf00      	nop
 8004100:	bf00      	nop
 8004102:	3714      	adds	r7, #20
 8004104:	46bd      	mov	sp, r7
 8004106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410a:	4770      	bx	lr

0800410c <sendI2Cmessage>:

HAL_StatusTypeDef sendI2Cmessage(void){
 800410c:	b580      	push	{r7, lr}
 800410e:	b08e      	sub	sp, #56	; 0x38
 8004110:	af02      	add	r7, sp, #8
    uint8_t message[40] = {0};
 8004112:	2300      	movs	r3, #0
 8004114:	607b      	str	r3, [r7, #4]
 8004116:	f107 0308 	add.w	r3, r7, #8
 800411a:	2224      	movs	r2, #36	; 0x24
 800411c:	2100      	movs	r1, #0
 800411e:	4618      	mov	r0, r3
 8004120:	f009 f95c 	bl	800d3dc <memset>
    uint8_t len = config_message.len + 8;
 8004124:	4b2b      	ldr	r3, [pc, #172]	; (80041d4 <sendI2Cmessage+0xc8>)
 8004126:	885b      	ldrh	r3, [r3, #2]
 8004128:	b2db      	uxtb	r3, r3
 800412a:	3308      	adds	r3, #8
 800412c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    message[0] = UBX_SYNCH_1;
 8004130:	23b5      	movs	r3, #181	; 0xb5
 8004132:	713b      	strb	r3, [r7, #4]
    message[1] = UBX_SYNCH_2;
 8004134:	2362      	movs	r3, #98	; 0x62
 8004136:	717b      	strb	r3, [r7, #5]
    message[2] = config_message.cls;
 8004138:	4b26      	ldr	r3, [pc, #152]	; (80041d4 <sendI2Cmessage+0xc8>)
 800413a:	781b      	ldrb	r3, [r3, #0]
 800413c:	71bb      	strb	r3, [r7, #6]
    message[3] = config_message.id;
 800413e:	4b25      	ldr	r3, [pc, #148]	; (80041d4 <sendI2Cmessage+0xc8>)
 8004140:	785b      	ldrb	r3, [r3, #1]
 8004142:	71fb      	strb	r3, [r7, #7]
    message[4] = (config_message.len & 0xFF);
 8004144:	4b23      	ldr	r3, [pc, #140]	; (80041d4 <sendI2Cmessage+0xc8>)
 8004146:	885b      	ldrh	r3, [r3, #2]
 8004148:	b2db      	uxtb	r3, r3
 800414a:	723b      	strb	r3, [r7, #8]
    message[5] = (config_message.len >> 8);
 800414c:	4b21      	ldr	r3, [pc, #132]	; (80041d4 <sendI2Cmessage+0xc8>)
 800414e:	885b      	ldrh	r3, [r3, #2]
 8004150:	0a1b      	lsrs	r3, r3, #8
 8004152:	b29b      	uxth	r3, r3
 8004154:	b2db      	uxtb	r3, r3
 8004156:	727b      	strb	r3, [r7, #9]
    uint8_t i;
    for ( i=0 ; i < config_message.len ; i++){
 8004158:	2300      	movs	r3, #0
 800415a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800415e:	e011      	b.n	8004184 <sendI2Cmessage+0x78>
        message[6+i] = config_message.payload[i];
 8004160:	4b1c      	ldr	r3, [pc, #112]	; (80041d4 <sendI2Cmessage+0xc8>)
 8004162:	689a      	ldr	r2, [r3, #8]
 8004164:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004168:	441a      	add	r2, r3
 800416a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800416e:	3306      	adds	r3, #6
 8004170:	7812      	ldrb	r2, [r2, #0]
 8004172:	3330      	adds	r3, #48	; 0x30
 8004174:	443b      	add	r3, r7
 8004176:	f803 2c2c 	strb.w	r2, [r3, #-44]
    for ( i=0 ; i < config_message.len ; i++){
 800417a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800417e:	3301      	adds	r3, #1
 8004180:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8004184:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004188:	b29a      	uxth	r2, r3
 800418a:	4b12      	ldr	r3, [pc, #72]	; (80041d4 <sendI2Cmessage+0xc8>)
 800418c:	885b      	ldrh	r3, [r3, #2]
 800418e:	429a      	cmp	r2, r3
 8004190:	d3e6      	bcc.n	8004160 <sendI2Cmessage+0x54>
    }
    message[6+i] = config_message.checksumA;
 8004192:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004196:	3306      	adds	r3, #6
 8004198:	4a0e      	ldr	r2, [pc, #56]	; (80041d4 <sendI2Cmessage+0xc8>)
 800419a:	7b12      	ldrb	r2, [r2, #12]
 800419c:	3330      	adds	r3, #48	; 0x30
 800419e:	443b      	add	r3, r7
 80041a0:	f803 2c2c 	strb.w	r2, [r3, #-44]
    message[7+i] = config_message.checksumB;
 80041a4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80041a8:	3307      	adds	r3, #7
 80041aa:	4a0a      	ldr	r2, [pc, #40]	; (80041d4 <sendI2Cmessage+0xc8>)
 80041ac:	7b52      	ldrb	r2, [r2, #13]
 80041ae:	3330      	adds	r3, #48	; 0x30
 80041b0:	443b      	add	r3, r7
 80041b2:	f803 2c2c 	strb.w	r2, [r3, #-44]
    return HAL_I2C_Master_Transmit(&hi2c1, UBLOX_M9N, message, len, 50);
 80041b6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80041ba:	b29b      	uxth	r3, r3
 80041bc:	1d3a      	adds	r2, r7, #4
 80041be:	2132      	movs	r1, #50	; 0x32
 80041c0:	9100      	str	r1, [sp, #0]
 80041c2:	2184      	movs	r1, #132	; 0x84
 80041c4:	4804      	ldr	r0, [pc, #16]	; (80041d8 <sendI2Cmessage+0xcc>)
 80041c6:	f002 f891 	bl	80062ec <HAL_I2C_Master_Transmit>
 80041ca:	4603      	mov	r3, r0
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	3730      	adds	r7, #48	; 0x30
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bd80      	pop	{r7, pc}
 80041d4:	20000000 	.word	0x20000000
 80041d8:	20000290 	.word	0x20000290

080041dc <setPortOutput>:

HAL_StatusTypeDef setPortOutput(uint8_t portSelect, uint8_t streamSettings){
 80041dc:	b580      	push	{r7, lr}
 80041de:	b088      	sub	sp, #32
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	4603      	mov	r3, r0
 80041e4:	460a      	mov	r2, r1
 80041e6:	71fb      	strb	r3, [r7, #7]
 80041e8:	4613      	mov	r3, r2
 80041ea:	71bb      	strb	r3, [r7, #6]
    config_message.cls = UBX_CLASS_CFG;
 80041ec:	4b12      	ldr	r3, [pc, #72]	; (8004238 <setPortOutput+0x5c>)
 80041ee:	2206      	movs	r2, #6
 80041f0:	701a      	strb	r2, [r3, #0]
    config_message.id =  UBX_CFG_PRT;
 80041f2:	4b11      	ldr	r3, [pc, #68]	; (8004238 <setPortOutput+0x5c>)
 80041f4:	2200      	movs	r2, #0
 80041f6:	705a      	strb	r2, [r3, #1]
    config_message.len = 20;
 80041f8:	4b0f      	ldr	r3, [pc, #60]	; (8004238 <setPortOutput+0x5c>)
 80041fa:	2214      	movs	r2, #20
 80041fc:	805a      	strh	r2, [r3, #2]
    uint8_t payloadCfg[20] = {0};
 80041fe:	2300      	movs	r3, #0
 8004200:	60fb      	str	r3, [r7, #12]
 8004202:	f107 0310 	add.w	r3, r7, #16
 8004206:	2200      	movs	r2, #0
 8004208:	601a      	str	r2, [r3, #0]
 800420a:	605a      	str	r2, [r3, #4]
 800420c:	609a      	str	r2, [r3, #8]
 800420e:	60da      	str	r2, [r3, #12]
    payloadCfg[4] = 0x84;
 8004210:	2384      	movs	r3, #132	; 0x84
 8004212:	743b      	strb	r3, [r7, #16]
    payloadCfg[12] = 0x23;
 8004214:	2323      	movs	r3, #35	; 0x23
 8004216:	763b      	strb	r3, [r7, #24]
    payloadCfg[14] = streamSettings;
 8004218:	79bb      	ldrb	r3, [r7, #6]
 800421a:	76bb      	strb	r3, [r7, #26]
    config_message.payload = payloadCfg;
 800421c:	4a06      	ldr	r2, [pc, #24]	; (8004238 <setPortOutput+0x5c>)
 800421e:	f107 030c 	add.w	r3, r7, #12
 8004222:	6093      	str	r3, [r2, #8]
    calcChecksum(&config_message);
 8004224:	4804      	ldr	r0, [pc, #16]	; (8004238 <setPortOutput+0x5c>)
 8004226:	f7ff fefd 	bl	8004024 <calcChecksum>
    return sendI2Cmessage();
 800422a:	f7ff ff6f 	bl	800410c <sendI2Cmessage>
 800422e:	4603      	mov	r3, r0
}
 8004230:	4618      	mov	r0, r3
 8004232:	3720      	adds	r7, #32
 8004234:	46bd      	mov	sp, r7
 8004236:	bd80      	pop	{r7, pc}
 8004238:	20000000 	.word	0x20000000

0800423c <configureNMEA>:
    message[8] = config_message.checksumA;
    message[9] = config_message.checksumB;
    return UbloxI2CWriteReadPolling(UBLOX_M9N, message, 10, rx_mes, 11, 100);
}

HAL_StatusTypeDef configureNMEA(uint8_t msgClass, uint8_t msgID, uint8_t rate, uint8_t portID){
 800423c:	b590      	push	{r4, r7, lr}
 800423e:	b085      	sub	sp, #20
 8004240:	af00      	add	r7, sp, #0
 8004242:	4604      	mov	r4, r0
 8004244:	4608      	mov	r0, r1
 8004246:	4611      	mov	r1, r2
 8004248:	461a      	mov	r2, r3
 800424a:	4623      	mov	r3, r4
 800424c:	71fb      	strb	r3, [r7, #7]
 800424e:	4603      	mov	r3, r0
 8004250:	71bb      	strb	r3, [r7, #6]
 8004252:	460b      	mov	r3, r1
 8004254:	717b      	strb	r3, [r7, #5]
 8004256:	4613      	mov	r3, r2
 8004258:	713b      	strb	r3, [r7, #4]
    config_message.cls = UBX_CLASS_CFG;
 800425a:	4b10      	ldr	r3, [pc, #64]	; (800429c <configureNMEA+0x60>)
 800425c:	2206      	movs	r2, #6
 800425e:	701a      	strb	r2, [r3, #0]
    config_message.id = UBX_CFG_MSG;
 8004260:	4b0e      	ldr	r3, [pc, #56]	; (800429c <configureNMEA+0x60>)
 8004262:	2201      	movs	r2, #1
 8004264:	705a      	strb	r2, [r3, #1]
    config_message.len = 8;
 8004266:	4b0d      	ldr	r3, [pc, #52]	; (800429c <configureNMEA+0x60>)
 8004268:	2208      	movs	r2, #8
 800426a:	805a      	strh	r2, [r3, #2]
    uint8_t payloadCfg[8] = {0};
 800426c:	2300      	movs	r3, #0
 800426e:	60bb      	str	r3, [r7, #8]
 8004270:	2300      	movs	r3, #0
 8004272:	60fb      	str	r3, [r7, #12]
    payloadCfg[0] = msgClass;
 8004274:	79fb      	ldrb	r3, [r7, #7]
 8004276:	723b      	strb	r3, [r7, #8]
    payloadCfg[1] = msgID;
 8004278:	79bb      	ldrb	r3, [r7, #6]
 800427a:	727b      	strb	r3, [r7, #9]
    payloadCfg[2] = rate;
 800427c:	797b      	ldrb	r3, [r7, #5]
 800427e:	72bb      	strb	r3, [r7, #10]
    config_message.payload = payloadCfg;
 8004280:	4a06      	ldr	r2, [pc, #24]	; (800429c <configureNMEA+0x60>)
 8004282:	f107 0308 	add.w	r3, r7, #8
 8004286:	6093      	str	r3, [r2, #8]
    calcChecksum(&config_message);
 8004288:	4804      	ldr	r0, [pc, #16]	; (800429c <configureNMEA+0x60>)
 800428a:	f7ff fecb 	bl	8004024 <calcChecksum>
    return sendI2Cmessage();
 800428e:	f7ff ff3d 	bl	800410c <sendI2Cmessage>
 8004292:	4603      	mov	r3, r0
}
 8004294:	4618      	mov	r0, r3
 8004296:	3714      	adds	r7, #20
 8004298:	46bd      	mov	sp, r7
 800429a:	bd90      	pop	{r4, r7, pc}
 800429c:	20000000 	.word	0x20000000

080042a0 <init_gps_data>:
    config_message.payload = payloadCfg;
    calcChecksum(&config_message);
    return sendI2Cmessage();
}

void init_gps_data(void){
 80042a0:	b580      	push	{r7, lr}
 80042a2:	af00      	add	r7, sp, #0
 80042a4:	4b17      	ldr	r3, [pc, #92]	; (8004304 <init_gps_data+0x64>)
 80042a6:	2200      	movs	r2, #0
 80042a8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    memset(gps_data.EW, 0, 1);
    memset(gps_data.HDOP, 0, 5);
 80042ac:	2205      	movs	r2, #5
 80042ae:	2100      	movs	r1, #0
 80042b0:	4815      	ldr	r0, [pc, #84]	; (8004308 <init_gps_data+0x68>)
 80042b2:	f009 f893 	bl	800d3dc <memset>
 80042b6:	4b13      	ldr	r3, [pc, #76]	; (8004304 <init_gps_data+0x64>)
 80042b8:	2200      	movs	r2, #0
 80042ba:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
    memset(gps_data.NS, 0, 1);
    gps_data.altitude = 0;
 80042be:	4b11      	ldr	r3, [pc, #68]	; (8004304 <init_gps_data+0x64>)
 80042c0:	2200      	movs	r2, #0
 80042c2:	665a      	str	r2, [r3, #100]	; 0x64
    gps_data.latitude = 0;
 80042c4:	4b0f      	ldr	r3, [pc, #60]	; (8004304 <init_gps_data+0x64>)
 80042c6:	2200      	movs	r2, #0
 80042c8:	655a      	str	r2, [r3, #84]	; 0x54
    gps_data.longtitude = 0;
 80042ca:	4b0e      	ldr	r3, [pc, #56]	; (8004304 <init_gps_data+0x64>)
 80042cc:	2200      	movs	r2, #0
 80042ce:	65da      	str	r2, [r3, #92]	; 0x5c
 80042d0:	4b0c      	ldr	r3, [pc, #48]	; (8004304 <init_gps_data+0x64>)
 80042d2:	2200      	movs	r2, #0
 80042d4:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    memset(gps_data.quality, 0, 1);
    memset(gps_data.satellites, 0, 2);
 80042d8:	2202      	movs	r2, #2
 80042da:	2100      	movs	r1, #0
 80042dc:	480b      	ldr	r0, [pc, #44]	; (800430c <init_gps_data+0x6c>)
 80042de:	f009 f87d 	bl	800d3dc <memset>
    memset(gps_data.sentence, 0, 75);
 80042e2:	224b      	movs	r2, #75	; 0x4b
 80042e4:	2100      	movs	r1, #0
 80042e6:	4807      	ldr	r0, [pc, #28]	; (8004304 <init_gps_data+0x64>)
 80042e8:	f009 f878 	bl	800d3dc <memset>
    memset(gps_data.sep, 0, 6);
 80042ec:	2206      	movs	r2, #6
 80042ee:	2100      	movs	r1, #0
 80042f0:	4807      	ldr	r0, [pc, #28]	; (8004310 <init_gps_data+0x70>)
 80042f2:	f009 f873 	bl	800d3dc <memset>
    memset(gps_data.timestamp, 0, 9);
 80042f6:	2209      	movs	r2, #9
 80042f8:	2100      	movs	r1, #0
 80042fa:	4806      	ldr	r0, [pc, #24]	; (8004314 <init_gps_data+0x74>)
 80042fc:	f009 f86e 	bl	800d3dc <memset>
}
 8004300:	bf00      	nop
 8004302:	bd80      	pop	{r7, pc}
 8004304:	200002e4 	.word	0x200002e4
 8004308:	2000034e 	.word	0x2000034e
 800430c:	2000034c 	.word	0x2000034c
 8004310:	20000353 	.word	0x20000353
 8004314:	2000032f 	.word	0x2000032f

08004318 <strtoke>:

    return len;
}

char* strtoke(char *str, const char *delim)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b084      	sub	sp, #16
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
 8004320:	6039      	str	r1, [r7, #0]
  static char *start = NULL; /* stores string str for consecutive calls */
  char *token = NULL; /* found token */
 8004322:	2300      	movs	r3, #0
 8004324:	60fb      	str	r3, [r7, #12]
  /* assign new start in case */
  if (str) start = str;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d002      	beq.n	8004332 <strtoke+0x1a>
 800432c:	4a12      	ldr	r2, [pc, #72]	; (8004378 <strtoke+0x60>)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6013      	str	r3, [r2, #0]
  /* check whether text to parse left */
  if (!start) return NULL;
 8004332:	4b11      	ldr	r3, [pc, #68]	; (8004378 <strtoke+0x60>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d101      	bne.n	800433e <strtoke+0x26>
 800433a:	2300      	movs	r3, #0
 800433c:	e017      	b.n	800436e <strtoke+0x56>
  /* remember current start as found token */
  token = start;
 800433e:	4b0e      	ldr	r3, [pc, #56]	; (8004378 <strtoke+0x60>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	60fb      	str	r3, [r7, #12]
  /* find next occurrence of delim */
  start = strpbrk(start, delim);
 8004344:	4b0c      	ldr	r3, [pc, #48]	; (8004378 <strtoke+0x60>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	6839      	ldr	r1, [r7, #0]
 800434a:	4618      	mov	r0, r3
 800434c:	f009 fce0 	bl	800dd10 <strpbrk>
 8004350:	4603      	mov	r3, r0
 8004352:	4a09      	ldr	r2, [pc, #36]	; (8004378 <strtoke+0x60>)
 8004354:	6013      	str	r3, [r2, #0]
  /* replace delim with terminator and move start to follower */
  if (start) *start++ = '\0';
 8004356:	4b08      	ldr	r3, [pc, #32]	; (8004378 <strtoke+0x60>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d006      	beq.n	800436c <strtoke+0x54>
 800435e:	4b06      	ldr	r3, [pc, #24]	; (8004378 <strtoke+0x60>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	1c5a      	adds	r2, r3, #1
 8004364:	4904      	ldr	r1, [pc, #16]	; (8004378 <strtoke+0x60>)
 8004366:	600a      	str	r2, [r1, #0]
 8004368:	2200      	movs	r2, #0
 800436a:	701a      	strb	r2, [r3, #0]
  /* done */
  return token;
 800436c:	68fb      	ldr	r3, [r7, #12]
}
 800436e:	4618      	mov	r0, r3
 8004370:	3710      	adds	r7, #16
 8004372:	46bd      	mov	sp, r7
 8004374:	bd80      	pop	{r7, pc}
 8004376:	bf00      	nop
 8004378:	20000360 	.word	0x20000360

0800437c <altAtol>:
  }

  return sign * result;
}

long altAtol(char *str) {
 800437c:	b480      	push	{r7}
 800437e:	b087      	sub	sp, #28
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  float result = 0;
 8004384:	f04f 0300 	mov.w	r3, #0
 8004388:	617b      	str	r3, [r7, #20]
  long ret = 0;
 800438a:	2300      	movs	r3, #0
 800438c:	60fb      	str	r3, [r7, #12]
  float divisor = 10;
 800438e:	4b3d      	ldr	r3, [pc, #244]	; (8004484 <altAtol+0x108>)
 8004390:	613b      	str	r3, [r7, #16]
  int sign = 1;
 8004392:	2301      	movs	r3, #1
 8004394:	60bb      	str	r3, [r7, #8]

  // Skip whitespace
  while (*str == ' ') {
 8004396:	e002      	b.n	800439e <altAtol+0x22>
    str++;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	3301      	adds	r3, #1
 800439c:	607b      	str	r3, [r7, #4]
  while (*str == ' ') {
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	781b      	ldrb	r3, [r3, #0]
 80043a2:	2b20      	cmp	r3, #32
 80043a4:	d0f8      	beq.n	8004398 <altAtol+0x1c>
  }

  // Handle optional sign
  if (*str == '-') {
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	781b      	ldrb	r3, [r3, #0]
 80043aa:	2b2d      	cmp	r3, #45	; 0x2d
 80043ac:	d106      	bne.n	80043bc <altAtol+0x40>
    sign = -1;
 80043ae:	f04f 33ff 	mov.w	r3, #4294967295
 80043b2:	60bb      	str	r3, [r7, #8]
    str++;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	3301      	adds	r3, #1
 80043b8:	607b      	str	r3, [r7, #4]
 80043ba:	e01d      	b.n	80043f8 <altAtol+0x7c>
  } else if (*str == '+') {
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	781b      	ldrb	r3, [r3, #0]
 80043c0:	2b2b      	cmp	r3, #43	; 0x2b
 80043c2:	d119      	bne.n	80043f8 <altAtol+0x7c>
    sign = 1;
 80043c4:	2301      	movs	r3, #1
 80043c6:	60bb      	str	r3, [r7, #8]
    str++;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	3301      	adds	r3, #1
 80043cc:	607b      	str	r3, [r7, #4]
  }

  // Parse integer part
  while (*str >= '0' && *str <= '9') {
 80043ce:	e013      	b.n	80043f8 <altAtol+0x7c>
    result = (result * 10) + (*str - '0');
 80043d0:	edd7 7a05 	vldr	s15, [r7, #20]
 80043d4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80043d8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	781b      	ldrb	r3, [r3, #0]
 80043e0:	3b30      	subs	r3, #48	; 0x30
 80043e2:	ee07 3a90 	vmov	s15, r3
 80043e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80043ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80043ee:	edc7 7a05 	vstr	s15, [r7, #20]
    str++;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	3301      	adds	r3, #1
 80043f6:	607b      	str	r3, [r7, #4]
  while (*str >= '0' && *str <= '9') {
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	781b      	ldrb	r3, [r3, #0]
 80043fc:	2b2f      	cmp	r3, #47	; 0x2f
 80043fe:	d903      	bls.n	8004408 <altAtol+0x8c>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	781b      	ldrb	r3, [r3, #0]
 8004404:	2b39      	cmp	r3, #57	; 0x39
 8004406:	d9e3      	bls.n	80043d0 <altAtol+0x54>
  }

  // Parse decimal part
  if (*str == '.') {
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	781b      	ldrb	r3, [r3, #0]
 800440c:	2b2e      	cmp	r3, #46	; 0x2e
 800440e:	d127      	bne.n	8004460 <altAtol+0xe4>
    str++;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	3301      	adds	r3, #1
 8004414:	607b      	str	r3, [r7, #4]

    while (*str >= '0' && *str <= '9') {
 8004416:	e01b      	b.n	8004450 <altAtol+0xd4>
      result += (*str - '0') / divisor;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	781b      	ldrb	r3, [r3, #0]
 800441c:	3b30      	subs	r3, #48	; 0x30
 800441e:	ee07 3a90 	vmov	s15, r3
 8004422:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004426:	ed97 7a04 	vldr	s14, [r7, #16]
 800442a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800442e:	ed97 7a05 	vldr	s14, [r7, #20]
 8004432:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004436:	edc7 7a05 	vstr	s15, [r7, #20]
      divisor *= 10;
 800443a:	edd7 7a04 	vldr	s15, [r7, #16]
 800443e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004442:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004446:	edc7 7a04 	vstr	s15, [r7, #16]
      str++;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	3301      	adds	r3, #1
 800444e:	607b      	str	r3, [r7, #4]
    while (*str >= '0' && *str <= '9') {
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	781b      	ldrb	r3, [r3, #0]
 8004454:	2b2f      	cmp	r3, #47	; 0x2f
 8004456:	d903      	bls.n	8004460 <altAtol+0xe4>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	781b      	ldrb	r3, [r3, #0]
 800445c:	2b39      	cmp	r3, #57	; 0x39
 800445e:	d9db      	bls.n	8004418 <altAtol+0x9c>
    }
  }
  ret = (long)(result * 200000);
 8004460:	edd7 7a05 	vldr	s15, [r7, #20]
 8004464:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8004488 <altAtol+0x10c>
 8004468:	ee67 7a87 	vmul.f32	s15, s15, s14
 800446c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004470:	ee17 3a90 	vmov	r3, s15
 8004474:	60fb      	str	r3, [r7, #12]

  return ret;
 8004476:	68fb      	ldr	r3, [r7, #12]
}
 8004478:	4618      	mov	r0, r3
 800447a:	371c      	adds	r7, #28
 800447c:	46bd      	mov	sp, r7
 800447e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004482:	4770      	bx	lr
 8004484:	41200000 	.word	0x41200000
 8004488:	48435000 	.word	0x48435000

0800448c <coorsAtol>:

long coorsAtol(char *coors, char sign){
 800448c:	b480      	push	{r7}
 800448e:	b08d      	sub	sp, #52	; 0x34
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
 8004494:	460b      	mov	r3, r1
 8004496:	70fb      	strb	r3, [r7, #3]
    uint8_t i = 0;
 8004498:	2300      	movs	r3, #0
 800449a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    uint8_t dotIndex=0;
 800449e:	2300      	movs	r3, #0
 80044a0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    char tempBuffer[12]={0};
 80044a4:	2300      	movs	r3, #0
 80044a6:	60fb      	str	r3, [r7, #12]
 80044a8:	f107 0310 	add.w	r3, r7, #16
 80044ac:	2200      	movs	r2, #0
 80044ae:	601a      	str	r2, [r3, #0]
 80044b0:	605a      	str	r2, [r3, #4]
    int deg = 0;
 80044b2:	2300      	movs	r3, #0
 80044b4:	62bb      	str	r3, [r7, #40]	; 0x28
    float min = 0;
 80044b6:	f04f 0300 	mov.w	r3, #0
 80044ba:	627b      	str	r3, [r7, #36]	; 0x24
    float divisor = 10;
 80044bc:	4b68      	ldr	r3, [pc, #416]	; (8004660 <coorsAtol+0x1d4>)
 80044be:	623b      	str	r3, [r7, #32]
    int s = 1;
 80044c0:	2301      	movs	r3, #1
 80044c2:	61fb      	str	r3, [r7, #28]
    long result =0;
 80044c4:	2300      	movs	r3, #0
 80044c6:	61bb      	str	r3, [r7, #24]


    // Skip whitespace
    while (*coors == ' ') {
 80044c8:	e002      	b.n	80044d0 <coorsAtol+0x44>
      coors++;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	3301      	adds	r3, #1
 80044ce:	607b      	str	r3, [r7, #4]
    while (*coors == ' ') {
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	781b      	ldrb	r3, [r3, #0]
 80044d4:	2b20      	cmp	r3, #32
 80044d6:	d0f8      	beq.n	80044ca <coorsAtol+0x3e>
    }
    while ((*coors >= '0' && *coors <= '9') || (*coors == '.')){
 80044d8:	e017      	b.n	800450a <coorsAtol+0x7e>
        tempBuffer[i] = *coors;
 80044da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80044de:	687a      	ldr	r2, [r7, #4]
 80044e0:	7812      	ldrb	r2, [r2, #0]
 80044e2:	3330      	adds	r3, #48	; 0x30
 80044e4:	443b      	add	r3, r7
 80044e6:	f803 2c24 	strb.w	r2, [r3, #-36]
        if (*coors == '.'){
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	781b      	ldrb	r3, [r3, #0]
 80044ee:	2b2e      	cmp	r3, #46	; 0x2e
 80044f0:	d103      	bne.n	80044fa <coorsAtol+0x6e>
            dotIndex = i;
 80044f2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80044f6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        }
        i++;
 80044fa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80044fe:	3301      	adds	r3, #1
 8004500:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        coors++;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	3301      	adds	r3, #1
 8004508:	607b      	str	r3, [r7, #4]
    while ((*coors >= '0' && *coors <= '9') || (*coors == '.')){
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	781b      	ldrb	r3, [r3, #0]
 800450e:	2b2f      	cmp	r3, #47	; 0x2f
 8004510:	d903      	bls.n	800451a <coorsAtol+0x8e>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	781b      	ldrb	r3, [r3, #0]
 8004516:	2b39      	cmp	r3, #57	; 0x39
 8004518:	d9df      	bls.n	80044da <coorsAtol+0x4e>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	781b      	ldrb	r3, [r3, #0]
 800451e:	2b2e      	cmp	r3, #46	; 0x2e
 8004520:	d0db      	beq.n	80044da <coorsAtol+0x4e>
    }

    for (i=0; i<(dotIndex-2); i++){
 8004522:	2300      	movs	r3, #0
 8004524:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8004528:	e013      	b.n	8004552 <coorsAtol+0xc6>
        deg = (deg * 10) + (tempBuffer[i] - '0');
 800452a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800452c:	4613      	mov	r3, r2
 800452e:	009b      	lsls	r3, r3, #2
 8004530:	4413      	add	r3, r2
 8004532:	005b      	lsls	r3, r3, #1
 8004534:	461a      	mov	r2, r3
 8004536:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800453a:	3330      	adds	r3, #48	; 0x30
 800453c:	443b      	add	r3, r7
 800453e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004542:	3b30      	subs	r3, #48	; 0x30
 8004544:	4413      	add	r3, r2
 8004546:	62bb      	str	r3, [r7, #40]	; 0x28
    for (i=0; i<(dotIndex-2); i++){
 8004548:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800454c:	3301      	adds	r3, #1
 800454e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8004552:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8004556:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800455a:	3b02      	subs	r3, #2
 800455c:	429a      	cmp	r2, r3
 800455e:	dbe4      	blt.n	800452a <coorsAtol+0x9e>
    }
//    deg = deg * 60;

    for (i=dotIndex-2; i<dotIndex;i++){
 8004560:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004564:	3b02      	subs	r3, #2
 8004566:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800456a:	e019      	b.n	80045a0 <coorsAtol+0x114>
            min = (min * 10) + (tempBuffer[i] - '0');
 800456c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8004570:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004574:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004578:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800457c:	3330      	adds	r3, #48	; 0x30
 800457e:	443b      	add	r3, r7
 8004580:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004584:	3b30      	subs	r3, #48	; 0x30
 8004586:	ee07 3a90 	vmov	s15, r3
 800458a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800458e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004592:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    for (i=dotIndex-2; i<dotIndex;i++){
 8004596:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800459a:	3301      	adds	r3, #1
 800459c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80045a0:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80045a4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80045a8:	429a      	cmp	r2, r3
 80045aa:	d3df      	bcc.n	800456c <coorsAtol+0xe0>
    }
    for (i=dotIndex+1;i<12;i++){
 80045ac:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80045b0:	3301      	adds	r3, #1
 80045b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80045b6:	e021      	b.n	80045fc <coorsAtol+0x170>
      min += (tempBuffer[i] - '0') / divisor;
 80045b8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80045bc:	3330      	adds	r3, #48	; 0x30
 80045be:	443b      	add	r3, r7
 80045c0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80045c4:	3b30      	subs	r3, #48	; 0x30
 80045c6:	ee07 3a90 	vmov	s15, r3
 80045ca:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80045ce:	ed97 7a08 	vldr	s14, [r7, #32]
 80045d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80045d6:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80045da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80045de:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
      divisor *= 10;
 80045e2:	edd7 7a08 	vldr	s15, [r7, #32]
 80045e6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80045ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80045ee:	edc7 7a08 	vstr	s15, [r7, #32]
    for (i=dotIndex+1;i<12;i++){
 80045f2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80045f6:	3301      	adds	r3, #1
 80045f8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80045fc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004600:	2b0b      	cmp	r3, #11
 8004602:	d9d9      	bls.n	80045b8 <coorsAtol+0x12c>
    }
    min = min /60;
 8004604:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8004608:	eddf 6a16 	vldr	s13, [pc, #88]	; 8004664 <coorsAtol+0x1d8>
 800460c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004610:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

    result = (long)((deg+min) * 200000);
 8004614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004616:	ee07 3a90 	vmov	s15, r3
 800461a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800461e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8004622:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004626:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8004668 <coorsAtol+0x1dc>
 800462a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800462e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004632:	ee17 3a90 	vmov	r3, s15
 8004636:	61bb      	str	r3, [r7, #24]

    if ((sign == 'W')  || (sign == 'S')){
 8004638:	78fb      	ldrb	r3, [r7, #3]
 800463a:	2b57      	cmp	r3, #87	; 0x57
 800463c:	d002      	beq.n	8004644 <coorsAtol+0x1b8>
 800463e:	78fb      	ldrb	r3, [r7, #3]
 8004640:	2b53      	cmp	r3, #83	; 0x53
 8004642:	d102      	bne.n	800464a <coorsAtol+0x1be>
        s = -1;
 8004644:	f04f 33ff 	mov.w	r3, #4294967295
 8004648:	61fb      	str	r3, [r7, #28]
    }
    return s * result;
 800464a:	69fb      	ldr	r3, [r7, #28]
 800464c:	69ba      	ldr	r2, [r7, #24]
 800464e:	fb02 f303 	mul.w	r3, r2, r3
}
 8004652:	4618      	mov	r0, r3
 8004654:	3734      	adds	r7, #52	; 0x34
 8004656:	46bd      	mov	sp, r7
 8004658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465c:	4770      	bx	lr
 800465e:	bf00      	nop
 8004660:	41200000 	.word	0x41200000
 8004664:	42700000 	.word	0x42700000
 8004668:	48435000 	.word	0x48435000

0800466c <tick_gyro>:
I2C_HandleTypeDef hi2c2;

static void debugPrintMEMS(mems_data_t *mems_data);


void tick_gyro(mems_data_t * mems_data){
 800466c:	b580      	push	{r7, lr}
 800466e:	b082      	sub	sp, #8
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
    gyro_read(mems_data);
 8004674:	6878      	ldr	r0, [r7, #4]
 8004676:	f000 f8f3 	bl	8004860 <gyro_read>
    lsm6_acc_read(mems_data);
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	f000 f968 	bl	8004950 <lsm6_acc_read>
    lis3_magn_read(mems_data);
 8004680:	6878      	ldr	r0, [r7, #4]
 8004682:	f000 f9c1 	bl	8004a08 <lis3_magn_read>
//    osDelay(5);
//    debugPrintMEMS(mems_data);
}
 8004686:	bf00      	nop
 8004688:	3708      	adds	r7, #8
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}
	...

08004690 <lsm6_bus_init>:


uint8_t lsm6_bus_init(void)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 8004694:	4b1b      	ldr	r3, [pc, #108]	; (8004704 <lsm6_bus_init+0x74>)
 8004696:	4a1c      	ldr	r2, [pc, #112]	; (8004708 <lsm6_bus_init+0x78>)
 8004698:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00B03FDB;
 800469a:	4b1a      	ldr	r3, [pc, #104]	; (8004704 <lsm6_bus_init+0x74>)
 800469c:	4a1b      	ldr	r2, [pc, #108]	; (800470c <lsm6_bus_init+0x7c>)
 800469e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80046a0:	4b18      	ldr	r3, [pc, #96]	; (8004704 <lsm6_bus_init+0x74>)
 80046a2:	2200      	movs	r2, #0
 80046a4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80046a6:	4b17      	ldr	r3, [pc, #92]	; (8004704 <lsm6_bus_init+0x74>)
 80046a8:	2201      	movs	r2, #1
 80046aa:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80046ac:	4b15      	ldr	r3, [pc, #84]	; (8004704 <lsm6_bus_init+0x74>)
 80046ae:	2200      	movs	r2, #0
 80046b0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80046b2:	4b14      	ldr	r3, [pc, #80]	; (8004704 <lsm6_bus_init+0x74>)
 80046b4:	2200      	movs	r2, #0
 80046b6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80046b8:	4b12      	ldr	r3, [pc, #72]	; (8004704 <lsm6_bus_init+0x74>)
 80046ba:	2200      	movs	r2, #0
 80046bc:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80046be:	4b11      	ldr	r3, [pc, #68]	; (8004704 <lsm6_bus_init+0x74>)
 80046c0:	2200      	movs	r2, #0
 80046c2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80046c4:	4b0f      	ldr	r3, [pc, #60]	; (8004704 <lsm6_bus_init+0x74>)
 80046c6:	2200      	movs	r2, #0
 80046c8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80046ca:	480e      	ldr	r0, [pc, #56]	; (8004704 <lsm6_bus_init+0x74>)
 80046cc:	f001 fd7f 	bl	80061ce <HAL_I2C_Init>
 80046d0:	4603      	mov	r3, r0
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d001      	beq.n	80046da <lsm6_bus_init+0x4a>
  {
    return 1;
 80046d6:	2301      	movs	r3, #1
 80046d8:	e012      	b.n	8004700 <lsm6_bus_init+0x70>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80046da:	2100      	movs	r1, #0
 80046dc:	4809      	ldr	r0, [pc, #36]	; (8004704 <lsm6_bus_init+0x74>)
 80046de:	f002 fbe7 	bl	8006eb0 <HAL_I2CEx_ConfigAnalogFilter>
 80046e2:	4603      	mov	r3, r0
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d001      	beq.n	80046ec <lsm6_bus_init+0x5c>
  {
    return 2;
 80046e8:	2302      	movs	r3, #2
 80046ea:	e009      	b.n	8004700 <lsm6_bus_init+0x70>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80046ec:	2100      	movs	r1, #0
 80046ee:	4805      	ldr	r0, [pc, #20]	; (8004704 <lsm6_bus_init+0x74>)
 80046f0:	f002 fc29 	bl	8006f46 <HAL_I2CEx_ConfigDigitalFilter>
 80046f4:	4603      	mov	r3, r0
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d001      	beq.n	80046fe <lsm6_bus_init+0x6e>
  {
    return 3;
 80046fa:	2303      	movs	r3, #3
 80046fc:	e000      	b.n	8004700 <lsm6_bus_init+0x70>
  }
  return 0;
 80046fe:	2300      	movs	r3, #0

}
 8004700:	4618      	mov	r0, r3
 8004702:	bd80      	pop	{r7, pc}
 8004704:	20000364 	.word	0x20000364
 8004708:	40005800 	.word	0x40005800
 800470c:	00b03fdb 	.word	0x00b03fdb

08004710 <gyro_init>:
		return res;
	}
	return addr;
}

HAL_StatusTypeDef gyro_init(void){
 8004710:	b580      	push	{r7, lr}
 8004712:	b086      	sub	sp, #24
 8004714:	af04      	add	r7, sp, #16
    uint8_t ctrl2_val = 0x50;   //gyro 208Hz-250dps
 8004716:	2350      	movs	r3, #80	; 0x50
 8004718:	71fb      	strb	r3, [r7, #7]
    uint8_t ctrl3_val = 0x44;   // block data update - reg addr auto incr
 800471a:	2344      	movs	r3, #68	; 0x44
 800471c:	71bb      	strb	r3, [r7, #6]
    HAL_I2C_Mem_Write(&hi2c2, LSM6, CTRL2_G, I2C_MEMADD_SIZE_8BIT, &ctrl2_val, 1, 20);
 800471e:	2314      	movs	r3, #20
 8004720:	9302      	str	r3, [sp, #8]
 8004722:	2301      	movs	r3, #1
 8004724:	9301      	str	r3, [sp, #4]
 8004726:	1dfb      	adds	r3, r7, #7
 8004728:	9300      	str	r3, [sp, #0]
 800472a:	2301      	movs	r3, #1
 800472c:	2211      	movs	r2, #17
 800472e:	21d4      	movs	r1, #212	; 0xd4
 8004730:	4809      	ldr	r0, [pc, #36]	; (8004758 <gyro_init+0x48>)
 8004732:	f001 fecf 	bl	80064d4 <HAL_I2C_Mem_Write>
    return HAL_I2C_Mem_Write(&hi2c2, LSM6, CTRL3_C, I2C_MEMADD_SIZE_8BIT, &ctrl3_val, 1, 20);
 8004736:	2314      	movs	r3, #20
 8004738:	9302      	str	r3, [sp, #8]
 800473a:	2301      	movs	r3, #1
 800473c:	9301      	str	r3, [sp, #4]
 800473e:	1dbb      	adds	r3, r7, #6
 8004740:	9300      	str	r3, [sp, #0]
 8004742:	2301      	movs	r3, #1
 8004744:	2212      	movs	r2, #18
 8004746:	21d4      	movs	r1, #212	; 0xd4
 8004748:	4803      	ldr	r0, [pc, #12]	; (8004758 <gyro_init+0x48>)
 800474a:	f001 fec3 	bl	80064d4 <HAL_I2C_Mem_Write>
 800474e:	4603      	mov	r3, r0
}
 8004750:	4618      	mov	r0, r3
 8004752:	3708      	adds	r7, #8
 8004754:	46bd      	mov	sp, r7
 8004756:	bd80      	pop	{r7, pc}
 8004758:	20000364 	.word	0x20000364

0800475c <lsm6_acc_init>:

HAL_StatusTypeDef lsm6_acc_init(void){
 800475c:	b580      	push	{r7, lr}
 800475e:	b086      	sub	sp, #24
 8004760:	af04      	add	r7, sp, #16
    uint8_t ctrl1_val = 0x50;   //acc off
 8004762:	2350      	movs	r3, #80	; 0x50
 8004764:	71fb      	strb	r3, [r7, #7]
    uint8_t ctrl10_val = 0x20; //Enable timestamp
 8004766:	2320      	movs	r3, #32
 8004768:	71bb      	strb	r3, [r7, #6]
    HAL_I2C_Mem_Write(&hi2c2, LSM6, CTRL1_XL, I2C_MEMADD_SIZE_8BIT, &ctrl1_val, 1, 20);
 800476a:	2314      	movs	r3, #20
 800476c:	9302      	str	r3, [sp, #8]
 800476e:	2301      	movs	r3, #1
 8004770:	9301      	str	r3, [sp, #4]
 8004772:	1dfb      	adds	r3, r7, #7
 8004774:	9300      	str	r3, [sp, #0]
 8004776:	2301      	movs	r3, #1
 8004778:	2210      	movs	r2, #16
 800477a:	21d4      	movs	r1, #212	; 0xd4
 800477c:	4809      	ldr	r0, [pc, #36]	; (80047a4 <lsm6_acc_init+0x48>)
 800477e:	f001 fea9 	bl	80064d4 <HAL_I2C_Mem_Write>
    return HAL_I2C_Mem_Write(&hi2c2, LSM6, CTRL10_C, I2C_MEMADD_SIZE_8BIT, &ctrl10_val, 1, 20);
 8004782:	2314      	movs	r3, #20
 8004784:	9302      	str	r3, [sp, #8]
 8004786:	2301      	movs	r3, #1
 8004788:	9301      	str	r3, [sp, #4]
 800478a:	1dbb      	adds	r3, r7, #6
 800478c:	9300      	str	r3, [sp, #0]
 800478e:	2301      	movs	r3, #1
 8004790:	2219      	movs	r2, #25
 8004792:	21d4      	movs	r1, #212	; 0xd4
 8004794:	4803      	ldr	r0, [pc, #12]	; (80047a4 <lsm6_acc_init+0x48>)
 8004796:	f001 fe9d 	bl	80064d4 <HAL_I2C_Mem_Write>
 800479a:	4603      	mov	r3, r0
}
 800479c:	4618      	mov	r0, r3
 800479e:	3708      	adds	r7, #8
 80047a0:	46bd      	mov	sp, r7
 80047a2:	bd80      	pop	{r7, pc}
 80047a4:	20000364 	.word	0x20000364

080047a8 <magn_init>:

HAL_StatusTypeDef magn_init(void){
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b086      	sub	sp, #24
 80047ac:	af04      	add	r7, sp, #16
	HAL_StatusTypeDef res = HAL_OK;
 80047ae:	2300      	movs	r3, #0
 80047b0:	71fb      	strb	r3, [r7, #7]
	uint8_t ctrl1_val = 0x42;
 80047b2:	2342      	movs	r3, #66	; 0x42
 80047b4:	71bb      	strb	r3, [r7, #6]
    uint8_t ctrl3_val = 0x00;
 80047b6:	2300      	movs	r3, #0
 80047b8:	717b      	strb	r3, [r7, #5]
    uint8_t ctrl4_val = 0x08;
 80047ba:	2308      	movs	r3, #8
 80047bc:	713b      	strb	r3, [r7, #4]
    uint8_t ctrl5_val = 0x40;
 80047be:	2340      	movs	r3, #64	; 0x40
 80047c0:	70fb      	strb	r3, [r7, #3]
    res = HAL_I2C_Mem_Write(&hi2c2, LIS3_MAGN, CTRL_REG1_MG, I2C_MEMADD_SIZE_8BIT, &ctrl1_val, 1, 20);
 80047c2:	2314      	movs	r3, #20
 80047c4:	9302      	str	r3, [sp, #8]
 80047c6:	2301      	movs	r3, #1
 80047c8:	9301      	str	r3, [sp, #4]
 80047ca:	1dbb      	adds	r3, r7, #6
 80047cc:	9300      	str	r3, [sp, #0]
 80047ce:	2301      	movs	r3, #1
 80047d0:	2220      	movs	r2, #32
 80047d2:	213c      	movs	r1, #60	; 0x3c
 80047d4:	4821      	ldr	r0, [pc, #132]	; (800485c <magn_init+0xb4>)
 80047d6:	f001 fe7d 	bl	80064d4 <HAL_I2C_Mem_Write>
 80047da:	4603      	mov	r3, r0
 80047dc:	71fb      	strb	r3, [r7, #7]
    if (res != HAL_OK)return res;
 80047de:	79fb      	ldrb	r3, [r7, #7]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d001      	beq.n	80047e8 <magn_init+0x40>
 80047e4:	79fb      	ldrb	r3, [r7, #7]
 80047e6:	e034      	b.n	8004852 <magn_init+0xaa>
    res = HAL_I2C_Mem_Write(&hi2c2, LIS3_MAGN, CTRL_REG3_MG, I2C_MEMADD_SIZE_8BIT, &ctrl3_val, 1, 20);
 80047e8:	2314      	movs	r3, #20
 80047ea:	9302      	str	r3, [sp, #8]
 80047ec:	2301      	movs	r3, #1
 80047ee:	9301      	str	r3, [sp, #4]
 80047f0:	1d7b      	adds	r3, r7, #5
 80047f2:	9300      	str	r3, [sp, #0]
 80047f4:	2301      	movs	r3, #1
 80047f6:	2222      	movs	r2, #34	; 0x22
 80047f8:	213c      	movs	r1, #60	; 0x3c
 80047fa:	4818      	ldr	r0, [pc, #96]	; (800485c <magn_init+0xb4>)
 80047fc:	f001 fe6a 	bl	80064d4 <HAL_I2C_Mem_Write>
 8004800:	4603      	mov	r3, r0
 8004802:	71fb      	strb	r3, [r7, #7]
    if (res != HAL_OK)return res;
 8004804:	79fb      	ldrb	r3, [r7, #7]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d001      	beq.n	800480e <magn_init+0x66>
 800480a:	79fb      	ldrb	r3, [r7, #7]
 800480c:	e021      	b.n	8004852 <magn_init+0xaa>
    res = HAL_I2C_Mem_Write(&hi2c2, LIS3_MAGN, CTRL_REG4_MG, I2C_MEMADD_SIZE_8BIT, &ctrl4_val, 1, 20);
 800480e:	2314      	movs	r3, #20
 8004810:	9302      	str	r3, [sp, #8]
 8004812:	2301      	movs	r3, #1
 8004814:	9301      	str	r3, [sp, #4]
 8004816:	1d3b      	adds	r3, r7, #4
 8004818:	9300      	str	r3, [sp, #0]
 800481a:	2301      	movs	r3, #1
 800481c:	2223      	movs	r2, #35	; 0x23
 800481e:	213c      	movs	r1, #60	; 0x3c
 8004820:	480e      	ldr	r0, [pc, #56]	; (800485c <magn_init+0xb4>)
 8004822:	f001 fe57 	bl	80064d4 <HAL_I2C_Mem_Write>
 8004826:	4603      	mov	r3, r0
 8004828:	71fb      	strb	r3, [r7, #7]
    if (res != HAL_OK)return res;
 800482a:	79fb      	ldrb	r3, [r7, #7]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d001      	beq.n	8004834 <magn_init+0x8c>
 8004830:	79fb      	ldrb	r3, [r7, #7]
 8004832:	e00e      	b.n	8004852 <magn_init+0xaa>
    res = HAL_I2C_Mem_Write(&hi2c2, LIS3_MAGN, CTRL_REG5_MG, I2C_MEMADD_SIZE_8BIT, &ctrl5_val, 1, 20);
 8004834:	2314      	movs	r3, #20
 8004836:	9302      	str	r3, [sp, #8]
 8004838:	2301      	movs	r3, #1
 800483a:	9301      	str	r3, [sp, #4]
 800483c:	1cfb      	adds	r3, r7, #3
 800483e:	9300      	str	r3, [sp, #0]
 8004840:	2301      	movs	r3, #1
 8004842:	2224      	movs	r2, #36	; 0x24
 8004844:	213c      	movs	r1, #60	; 0x3c
 8004846:	4805      	ldr	r0, [pc, #20]	; (800485c <magn_init+0xb4>)
 8004848:	f001 fe44 	bl	80064d4 <HAL_I2C_Mem_Write>
 800484c:	4603      	mov	r3, r0
 800484e:	71fb      	strb	r3, [r7, #7]
    return res;
 8004850:	79fb      	ldrb	r3, [r7, #7]
}
 8004852:	4618      	mov	r0, r3
 8004854:	3708      	adds	r7, #8
 8004856:	46bd      	mov	sp, r7
 8004858:	bd80      	pop	{r7, pc}
 800485a:	bf00      	nop
 800485c:	20000364 	.word	0x20000364

08004860 <gyro_read>:

HAL_StatusTypeDef gyro_read(mems_data_t *mems_data){
 8004860:	b580      	push	{r7, lr}
 8004862:	b08c      	sub	sp, #48	; 0x30
 8004864:	af04      	add	r7, sp, #16
 8004866:	6078      	str	r0, [r7, #4]
	uint8_t data[6]={0};
 8004868:	2300      	movs	r3, #0
 800486a:	613b      	str	r3, [r7, #16]
 800486c:	2300      	movs	r3, #0
 800486e:	82bb      	strh	r3, [r7, #20]
	uint8_t ts_data[4]={0};
 8004870:	2300      	movs	r3, #0
 8004872:	60fb      	str	r3, [r7, #12]
	int16_t gyro_x, gyro_y, gyro_z;
	HAL_StatusTypeDef res = HAL_OK;
 8004874:	2300      	movs	r3, #0
 8004876:	77fb      	strb	r3, [r7, #31]
    HAL_I2C_Mem_Read(&hi2c2, LSM6, OUTX_L_G, I2C_MEMADD_SIZE_8BIT, data, 6, 50);
 8004878:	2332      	movs	r3, #50	; 0x32
 800487a:	9302      	str	r3, [sp, #8]
 800487c:	2306      	movs	r3, #6
 800487e:	9301      	str	r3, [sp, #4]
 8004880:	f107 0310 	add.w	r3, r7, #16
 8004884:	9300      	str	r3, [sp, #0]
 8004886:	2301      	movs	r3, #1
 8004888:	2222      	movs	r2, #34	; 0x22
 800488a:	21d4      	movs	r1, #212	; 0xd4
 800488c:	482e      	ldr	r0, [pc, #184]	; (8004948 <gyro_read+0xe8>)
 800488e:	f001 ff35 	bl	80066fc <HAL_I2C_Mem_Read>
    /*Timestamp Read*/
    HAL_I2C_Mem_Read(&hi2c2, LSM6, TIMESTAMP0, I2C_MEMADD_SIZE_8BIT, ts_data, 4, 50);
 8004892:	2332      	movs	r3, #50	; 0x32
 8004894:	9302      	str	r3, [sp, #8]
 8004896:	2304      	movs	r3, #4
 8004898:	9301      	str	r3, [sp, #4]
 800489a:	f107 030c 	add.w	r3, r7, #12
 800489e:	9300      	str	r3, [sp, #0]
 80048a0:	2301      	movs	r3, #1
 80048a2:	2240      	movs	r2, #64	; 0x40
 80048a4:	21d4      	movs	r1, #212	; 0xd4
 80048a6:	4828      	ldr	r0, [pc, #160]	; (8004948 <gyro_read+0xe8>)
 80048a8:	f001 ff28 	bl	80066fc <HAL_I2C_Mem_Read>

    gyro_x = ((int16_t)((data[1] << 8) | data[0]));
 80048ac:	7c7b      	ldrb	r3, [r7, #17]
 80048ae:	021b      	lsls	r3, r3, #8
 80048b0:	b21a      	sxth	r2, r3
 80048b2:	7c3b      	ldrb	r3, [r7, #16]
 80048b4:	b21b      	sxth	r3, r3
 80048b6:	4313      	orrs	r3, r2
 80048b8:	83bb      	strh	r3, [r7, #28]
    gyro_y = ((int16_t)((data[3] << 8) | data[2]));
 80048ba:	7cfb      	ldrb	r3, [r7, #19]
 80048bc:	021b      	lsls	r3, r3, #8
 80048be:	b21a      	sxth	r2, r3
 80048c0:	7cbb      	ldrb	r3, [r7, #18]
 80048c2:	b21b      	sxth	r3, r3
 80048c4:	4313      	orrs	r3, r2
 80048c6:	837b      	strh	r3, [r7, #26]
    gyro_z = ((int16_t)((data[5] << 8) | data[4]));
 80048c8:	7d7b      	ldrb	r3, [r7, #21]
 80048ca:	021b      	lsls	r3, r3, #8
 80048cc:	b21a      	sxth	r2, r3
 80048ce:	7d3b      	ldrb	r3, [r7, #20]
 80048d0:	b21b      	sxth	r3, r3
 80048d2:	4313      	orrs	r3, r2
 80048d4:	833b      	strh	r3, [r7, #24]
    mems_data->gyro_x = (gyro_x / 131.1f);// * -1.0f;
 80048d6:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80048da:	ee07 3a90 	vmov	s15, r3
 80048de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80048e2:	eddf 6a1a 	vldr	s13, [pc, #104]	; 800494c <gyro_read+0xec>
 80048e6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	edc3 7a00 	vstr	s15, [r3]
    mems_data->gyro_y = (gyro_y / 131.1f);// * -1.0f;
 80048f0:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80048f4:	ee07 3a90 	vmov	s15, r3
 80048f8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80048fc:	eddf 6a13 	vldr	s13, [pc, #76]	; 800494c <gyro_read+0xec>
 8004900:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	edc3 7a01 	vstr	s15, [r3, #4]
    mems_data->gyro_z = (gyro_z / 131.1f);// * -1.0f;
 800490a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800490e:	ee07 3a90 	vmov	s15, r3
 8004912:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004916:	eddf 6a0d 	vldr	s13, [pc, #52]	; 800494c <gyro_read+0xec>
 800491a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	edc3 7a02 	vstr	s15, [r3, #8]
    mems_data->timestamp = ((int)((ts_data[3]<<24)|(ts_data[2]<<16)|(ts_data[1]<<8)|(ts_data[0])));
 8004924:	7bfb      	ldrb	r3, [r7, #15]
 8004926:	061a      	lsls	r2, r3, #24
 8004928:	7bbb      	ldrb	r3, [r7, #14]
 800492a:	041b      	lsls	r3, r3, #16
 800492c:	431a      	orrs	r2, r3
 800492e:	7b7b      	ldrb	r3, [r7, #13]
 8004930:	021b      	lsls	r3, r3, #8
 8004932:	4313      	orrs	r3, r2
 8004934:	7b3a      	ldrb	r2, [r7, #12]
 8004936:	431a      	orrs	r2, r3
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	625a      	str	r2, [r3, #36]	; 0x24
    return res;
 800493c:	7ffb      	ldrb	r3, [r7, #31]
}
 800493e:	4618      	mov	r0, r3
 8004940:	3720      	adds	r7, #32
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}
 8004946:	bf00      	nop
 8004948:	20000364 	.word	0x20000364
 800494c:	4303199a 	.word	0x4303199a

08004950 <lsm6_acc_read>:

HAL_StatusTypeDef lsm6_acc_read(mems_data_t *mems_data){
 8004950:	b580      	push	{r7, lr}
 8004952:	b08a      	sub	sp, #40	; 0x28
 8004954:	af04      	add	r7, sp, #16
 8004956:	6078      	str	r0, [r7, #4]
	uint8_t data[6] = {0};
 8004958:	2300      	movs	r3, #0
 800495a:	60bb      	str	r3, [r7, #8]
 800495c:	2300      	movs	r3, #0
 800495e:	81bb      	strh	r3, [r7, #12]
	int16_t acc_x, acc_y, acc_z;
	HAL_StatusTypeDef res = HAL_OK;
 8004960:	2300      	movs	r3, #0
 8004962:	75fb      	strb	r3, [r7, #23]
	HAL_I2C_Mem_Read(&hi2c2, LSM6, OUTX_L_A, I2C_MEMADD_SIZE_8BIT, data, 6, 50);
 8004964:	2332      	movs	r3, #50	; 0x32
 8004966:	9302      	str	r3, [sp, #8]
 8004968:	2306      	movs	r3, #6
 800496a:	9301      	str	r3, [sp, #4]
 800496c:	f107 0308 	add.w	r3, r7, #8
 8004970:	9300      	str	r3, [sp, #0]
 8004972:	2301      	movs	r3, #1
 8004974:	2228      	movs	r2, #40	; 0x28
 8004976:	21d4      	movs	r1, #212	; 0xd4
 8004978:	4821      	ldr	r0, [pc, #132]	; (8004a00 <lsm6_acc_read+0xb0>)
 800497a:	f001 febf 	bl	80066fc <HAL_I2C_Mem_Read>
    acc_x = ((int16_t)((data[1] << 8) | data[0]));
 800497e:	7a7b      	ldrb	r3, [r7, #9]
 8004980:	021b      	lsls	r3, r3, #8
 8004982:	b21a      	sxth	r2, r3
 8004984:	7a3b      	ldrb	r3, [r7, #8]
 8004986:	b21b      	sxth	r3, r3
 8004988:	4313      	orrs	r3, r2
 800498a:	82bb      	strh	r3, [r7, #20]
    acc_y = ((int16_t)((data[3] << 8) | data[2]));
 800498c:	7afb      	ldrb	r3, [r7, #11]
 800498e:	021b      	lsls	r3, r3, #8
 8004990:	b21a      	sxth	r2, r3
 8004992:	7abb      	ldrb	r3, [r7, #10]
 8004994:	b21b      	sxth	r3, r3
 8004996:	4313      	orrs	r3, r2
 8004998:	827b      	strh	r3, [r7, #18]
    acc_z = ((int16_t)((data[5] << 8) | data[4]));
 800499a:	7b7b      	ldrb	r3, [r7, #13]
 800499c:	021b      	lsls	r3, r3, #8
 800499e:	b21a      	sxth	r2, r3
 80049a0:	7b3b      	ldrb	r3, [r7, #12]
 80049a2:	b21b      	sxth	r3, r3
 80049a4:	4313      	orrs	r3, r2
 80049a6:	823b      	strh	r3, [r7, #16]
    mems_data->acc_x = (acc_x / 16384.0f);//  * -1.0f;
 80049a8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80049ac:	ee07 3a90 	vmov	s15, r3
 80049b0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80049b4:	eddf 6a13 	vldr	s13, [pc, #76]	; 8004a04 <lsm6_acc_read+0xb4>
 80049b8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	edc3 7a03 	vstr	s15, [r3, #12]
    mems_data->acc_y = (acc_y / 16384.0f);// * -1.0f;
 80049c2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80049c6:	ee07 3a90 	vmov	s15, r3
 80049ca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80049ce:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8004a04 <lsm6_acc_read+0xb4>
 80049d2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	edc3 7a04 	vstr	s15, [r3, #16]
    mems_data->acc_z = (acc_z / 16384.0f);// * -1.0f;
 80049dc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80049e0:	ee07 3a90 	vmov	s15, r3
 80049e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80049e8:	eddf 6a06 	vldr	s13, [pc, #24]	; 8004a04 <lsm6_acc_read+0xb4>
 80049ec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	edc3 7a05 	vstr	s15, [r3, #20]
    return res;
 80049f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80049f8:	4618      	mov	r0, r3
 80049fa:	3718      	adds	r7, #24
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bd80      	pop	{r7, pc}
 8004a00:	20000364 	.word	0x20000364
 8004a04:	46800000 	.word	0x46800000

08004a08 <lis3_magn_read>:

HAL_StatusTypeDef lis3_magn_read(mems_data_t *mems_data){
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b08a      	sub	sp, #40	; 0x28
 8004a0c:	af04      	add	r7, sp, #16
 8004a0e:	6078      	str	r0, [r7, #4]
	uint8_t data[6] = {0};
 8004a10:	2300      	movs	r3, #0
 8004a12:	60bb      	str	r3, [r7, #8]
 8004a14:	2300      	movs	r3, #0
 8004a16:	81bb      	strh	r3, [r7, #12]
    int16_t magn_x, magn_y, magn_z;
    HAL_StatusTypeDef res = HAL_OK;
 8004a18:	2300      	movs	r3, #0
 8004a1a:	75fb      	strb	r3, [r7, #23]

    HAL_I2C_Mem_Read(&hi2c2, LIS3_MAGN, OUT_X_L_MG, I2C_MEMADD_SIZE_8BIT, data, 6, 50);
 8004a1c:	2332      	movs	r3, #50	; 0x32
 8004a1e:	9302      	str	r3, [sp, #8]
 8004a20:	2306      	movs	r3, #6
 8004a22:	9301      	str	r3, [sp, #4]
 8004a24:	f107 0308 	add.w	r3, r7, #8
 8004a28:	9300      	str	r3, [sp, #0]
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	2228      	movs	r2, #40	; 0x28
 8004a2e:	213c      	movs	r1, #60	; 0x3c
 8004a30:	4821      	ldr	r0, [pc, #132]	; (8004ab8 <lis3_magn_read+0xb0>)
 8004a32:	f001 fe63 	bl	80066fc <HAL_I2C_Mem_Read>
    magn_x = ((int16_t)((data[1] << 8) | data[0]));
 8004a36:	7a7b      	ldrb	r3, [r7, #9]
 8004a38:	021b      	lsls	r3, r3, #8
 8004a3a:	b21a      	sxth	r2, r3
 8004a3c:	7a3b      	ldrb	r3, [r7, #8]
 8004a3e:	b21b      	sxth	r3, r3
 8004a40:	4313      	orrs	r3, r2
 8004a42:	82bb      	strh	r3, [r7, #20]
    magn_y = ((int16_t)((data[3] << 8) | data[2]));
 8004a44:	7afb      	ldrb	r3, [r7, #11]
 8004a46:	021b      	lsls	r3, r3, #8
 8004a48:	b21a      	sxth	r2, r3
 8004a4a:	7abb      	ldrb	r3, [r7, #10]
 8004a4c:	b21b      	sxth	r3, r3
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	827b      	strh	r3, [r7, #18]
    magn_z = ((int16_t)((data[5] << 8) | data[4]));
 8004a52:	7b7b      	ldrb	r3, [r7, #13]
 8004a54:	021b      	lsls	r3, r3, #8
 8004a56:	b21a      	sxth	r2, r3
 8004a58:	7b3b      	ldrb	r3, [r7, #12]
 8004a5a:	b21b      	sxth	r3, r3
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	823b      	strh	r3, [r7, #16]
    mems_data->magn_x = magn_x / 10.0f;
 8004a60:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004a64:	ee07 3a90 	vmov	s15, r3
 8004a68:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004a6c:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8004a70:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	edc3 7a06 	vstr	s15, [r3, #24]
    mems_data->magn_y = magn_y / 10.0f;
 8004a7a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004a7e:	ee07 3a90 	vmov	s15, r3
 8004a82:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004a86:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8004a8a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	edc3 7a07 	vstr	s15, [r3, #28]
    mems_data->magn_z = magn_z / 10.0f;
 8004a94:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004a98:	ee07 3a90 	vmov	s15, r3
 8004a9c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004aa0:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8004aa4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	edc3 7a08 	vstr	s15, [r3, #32]
    return res;
 8004aae:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	3718      	adds	r7, #24
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	bd80      	pop	{r7, pc}
 8004ab8:	20000364 	.word	0x20000364

08004abc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004abc:	b5b0      	push	{r4, r5, r7, lr}
 8004abe:	b09c      	sub	sp, #112	; 0x70
 8004ac0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004ac2:	f001 f85e 	bl	8005b82 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004ac6:	f000 f9a9 	bl	8004e1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004aca:	f000 f9f9 	bl	8004ec0 <MX_GPIO_Init>

  MX_USART1_UART_Init();
 8004ace:	f000 ff6f 	bl	80059b0 <MX_USART1_UART_Init>

  MX_UART4_Init();
 8004ad2:	f000 ffb9 	bl	8005a48 <MX_UART4_Init>


  if (lsm6_bus_init() != 0){
 8004ad6:	f7ff fddb 	bl	8004690 <lsm6_bus_init>
 8004ada:	4603      	mov	r3, r0
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d010      	beq.n	8004b02 <main+0x46>
	  uint8_t Test[] = "Failed to init I2C bus\r\n";
 8004ae0:	4b59      	ldr	r3, [pc, #356]	; (8004c48 <main+0x18c>)
 8004ae2:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8004ae6:	461d      	mov	r5, r3
 8004ae8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004aea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004aec:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004af0:	c403      	stmia	r4!, {r0, r1}
 8004af2:	7022      	strb	r2, [r4, #0]
	  uart_write_debug(Test, 10);
 8004af4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004af8:	210a      	movs	r1, #10
 8004afa:	4618      	mov	r0, r3
 8004afc:	f001 f800 	bl	8005b00 <uart_write_debug>
 8004b00:	e042      	b.n	8004b88 <main+0xcc>
  }
  else{
		  if (lsm6_acc_init() != HAL_OK){
 8004b02:	f7ff fe2b 	bl	800475c <lsm6_acc_init>
 8004b06:	4603      	mov	r3, r0
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d00f      	beq.n	8004b2c <main+0x70>
			  uint8_t Test[] = "Failed to init LSM6 acc\r\n";
 8004b0c:	4b4f      	ldr	r3, [pc, #316]	; (8004c4c <main+0x190>)
 8004b0e:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8004b12:	461d      	mov	r5, r3
 8004b14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004b16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004b18:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004b1c:	c403      	stmia	r4!, {r0, r1}
 8004b1e:	8022      	strh	r2, [r4, #0]
			  uart_write_debug(Test, 10);
 8004b20:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004b24:	210a      	movs	r1, #10
 8004b26:	4618      	mov	r0, r3
 8004b28:	f000 ffea 	bl	8005b00 <uart_write_debug>
		  }
		  if (gyro_init() != HAL_OK){
 8004b2c:	f7ff fdf0 	bl	8004710 <gyro_init>
 8004b30:	4603      	mov	r3, r0
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d012      	beq.n	8004b5c <main+0xa0>
			  uint8_t Test[] = "Failed to init LSM6 gyro\r\n";
 8004b36:	4b46      	ldr	r3, [pc, #280]	; (8004c50 <main+0x194>)
 8004b38:	f107 041c 	add.w	r4, r7, #28
 8004b3c:	461d      	mov	r5, r3
 8004b3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004b40:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004b42:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004b46:	c403      	stmia	r4!, {r0, r1}
 8004b48:	8022      	strh	r2, [r4, #0]
 8004b4a:	3402      	adds	r4, #2
 8004b4c:	0c13      	lsrs	r3, r2, #16
 8004b4e:	7023      	strb	r3, [r4, #0]
			  uart_write_debug(Test, 10);
 8004b50:	f107 031c 	add.w	r3, r7, #28
 8004b54:	210a      	movs	r1, #10
 8004b56:	4618      	mov	r0, r3
 8004b58:	f000 ffd2 	bl	8005b00 <uart_write_debug>
		  }
		  if (magn_init() != HAL_OK){
 8004b5c:	f7ff fe24 	bl	80047a8 <magn_init>
 8004b60:	4603      	mov	r3, r0
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d010      	beq.n	8004b88 <main+0xcc>
			  uint8_t Test[] = "Failed to init LIS3 magn\r\n";
 8004b66:	4b3b      	ldr	r3, [pc, #236]	; (8004c54 <main+0x198>)
 8004b68:	463c      	mov	r4, r7
 8004b6a:	461d      	mov	r5, r3
 8004b6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004b6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004b70:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004b74:	c403      	stmia	r4!, {r0, r1}
 8004b76:	8022      	strh	r2, [r4, #0]
 8004b78:	3402      	adds	r4, #2
 8004b7a:	0c13      	lsrs	r3, r2, #16
 8004b7c:	7023      	strb	r3, [r4, #0]
			  uart_write_debug(Test, 10);
 8004b7e:	463b      	mov	r3, r7
 8004b80:	210a      	movs	r1, #10
 8004b82:	4618      	mov	r0, r3
 8004b84:	f000 ffbc 	bl	8005b00 <uart_write_debug>
		  }
  }
  if (ublox_i2c_bus_init() != HAL_OK){
 8004b88:	f7ff f834 	bl	8003bf4 <ublox_i2c_bus_init>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d004      	beq.n	8004b9c <main+0xe0>
	  uart_write_debug("Failed to Initialize ublox bus\r\n", 10);
 8004b92:	210a      	movs	r1, #10
 8004b94:	4830      	ldr	r0, [pc, #192]	; (8004c58 <main+0x19c>)
 8004b96:	f000 ffb3 	bl	8005b00 <uart_write_debug>
 8004b9a:	e011      	b.n	8004bc0 <main+0x104>
  }
  else{
	  HAL_StatusTypeDef res;
	  res = ubloxInit();
 8004b9c:	f7ff f880 	bl	8003ca0 <ubloxInit>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	  if (res != HAL_OK){
 8004ba6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d004      	beq.n	8004bb8 <main+0xfc>
		  uart_write_debug("Failed to Initialize UBLOX\r\n", 10);
 8004bae:	210a      	movs	r1, #10
 8004bb0:	482a      	ldr	r0, [pc, #168]	; (8004c5c <main+0x1a0>)
 8004bb2:	f000 ffa5 	bl	8005b00 <uart_write_debug>
 8004bb6:	e003      	b.n	8004bc0 <main+0x104>
	  }
	  else{
		  uart_write_debug("Ublox Initialized!\r\n", 10);
 8004bb8:	210a      	movs	r1, #10
 8004bba:	4829      	ldr	r0, [pc, #164]	; (8004c60 <main+0x1a4>)
 8004bbc:	f000 ffa0 	bl	8005b00 <uart_write_debug>
	  }
  }

  /* Init scheduler */
  osKernelInitialize();
 8004bc0:	f005 f8a6 	bl	8009d10 <osKernelInitialize>

  /* USER CODE BEGIN RTOS_MUTEX */
  debugUartMutex = osMutexNew(&uartMutex_attributes);
 8004bc4:	4827      	ldr	r0, [pc, #156]	; (8004c64 <main+0x1a8>)
 8004bc6:	f005 f99a 	bl	8009efe <osMutexNew>
 8004bca:	4603      	mov	r3, r0
 8004bcc:	4a26      	ldr	r2, [pc, #152]	; (8004c68 <main+0x1ac>)
 8004bce:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_MUTEX */

  memsQueueHandle = osMessageQueueNew (4, sizeof(mems_data_t), &memsQueue_attributes);
 8004bd0:	4a26      	ldr	r2, [pc, #152]	; (8004c6c <main+0x1b0>)
 8004bd2:	2128      	movs	r1, #40	; 0x28
 8004bd4:	2004      	movs	r0, #4
 8004bd6:	f005 faa0 	bl	800a11a <osMessageQueueNew>
 8004bda:	4603      	mov	r3, r0
 8004bdc:	4a24      	ldr	r2, [pc, #144]	; (8004c70 <main+0x1b4>)
 8004bde:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_QUEUES */
  outputQueueHandle = osMessageQueueNew (4, sizeof(FusionEuler), &outputQueue_attributes);
 8004be0:	4a24      	ldr	r2, [pc, #144]	; (8004c74 <main+0x1b8>)
 8004be2:	210c      	movs	r1, #12
 8004be4:	2004      	movs	r0, #4
 8004be6:	f005 fa98 	bl	800a11a <osMessageQueueNew>
 8004bea:	4603      	mov	r3, r0
 8004bec:	4a22      	ldr	r2, [pc, #136]	; (8004c78 <main+0x1bc>)
 8004bee:	6013      	str	r3, [r2, #0]
  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8004bf0:	4a22      	ldr	r2, [pc, #136]	; (8004c7c <main+0x1c0>)
 8004bf2:	2100      	movs	r1, #0
 8004bf4:	4822      	ldr	r0, [pc, #136]	; (8004c80 <main+0x1c4>)
 8004bf6:	f005 f8d5 	bl	8009da4 <osThreadNew>
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	4a21      	ldr	r2, [pc, #132]	; (8004c84 <main+0x1c8>)
 8004bfe:	6013      	str	r3, [r2, #0]

  readMemsTaskHandle = osThreadNew(readMemsTask, NULL, &readMemsTask_attributes);
 8004c00:	4a21      	ldr	r2, [pc, #132]	; (8004c88 <main+0x1cc>)
 8004c02:	2100      	movs	r1, #0
 8004c04:	4821      	ldr	r0, [pc, #132]	; (8004c8c <main+0x1d0>)
 8004c06:	f005 f8cd 	bl	8009da4 <osThreadNew>
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	4a20      	ldr	r2, [pc, #128]	; (8004c90 <main+0x1d4>)
 8004c0e:	6013      	str	r3, [r2, #0]

  calcHeadingTaskHandle = osThreadNew(calcHeadingTask, NULL, &calcHeadingTask_attributes);
 8004c10:	4a20      	ldr	r2, [pc, #128]	; (8004c94 <main+0x1d8>)
 8004c12:	2100      	movs	r1, #0
 8004c14:	4820      	ldr	r0, [pc, #128]	; (8004c98 <main+0x1dc>)
 8004c16:	f005 f8c5 	bl	8009da4 <osThreadNew>
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	4a1f      	ldr	r2, [pc, #124]	; (8004c9c <main+0x1e0>)
 8004c1e:	6013      	str	r3, [r2, #0]

  printOutTaskHandle = osThreadNew(printOutTask, NULL, &printOutTask_attributes);
 8004c20:	4a1f      	ldr	r2, [pc, #124]	; (8004ca0 <main+0x1e4>)
 8004c22:	2100      	movs	r1, #0
 8004c24:	481f      	ldr	r0, [pc, #124]	; (8004ca4 <main+0x1e8>)
 8004c26:	f005 f8bd 	bl	8009da4 <osThreadNew>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	4a1e      	ldr	r2, [pc, #120]	; (8004ca8 <main+0x1ec>)
 8004c2e:	6013      	str	r3, [r2, #0]

  getCoorsTaskHandle = osThreadNew(getCoorsTask, NULL, &getCoorsTask_attributes);
 8004c30:	4a1e      	ldr	r2, [pc, #120]	; (8004cac <main+0x1f0>)
 8004c32:	2100      	movs	r1, #0
 8004c34:	481e      	ldr	r0, [pc, #120]	; (8004cb0 <main+0x1f4>)
 8004c36:	f005 f8b5 	bl	8009da4 <osThreadNew>
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	4a1d      	ldr	r2, [pc, #116]	; (8004cb4 <main+0x1f8>)
 8004c3e:	6013      	str	r3, [r2, #0]

  /* Start scheduler */
  osKernelStart();
 8004c40:	f005 f88a 	bl	8009d58 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8004c44:	e7fe      	b.n	8004c44 <main+0x188>
 8004c46:	bf00      	nop
 8004c48:	080119f8 	.word	0x080119f8
 8004c4c:	08011a14 	.word	0x08011a14
 8004c50:	08011a30 	.word	0x08011a30
 8004c54:	08011a4c 	.word	0x08011a4c
 8004c58:	0801199c 	.word	0x0801199c
 8004c5c:	080119c0 	.word	0x080119c0
 8004c60:	080119e0 	.word	0x080119e0
 8004c64:	08011c10 	.word	0x08011c10
 8004c68:	200003cc 	.word	0x200003cc
 8004c6c:	08011c20 	.word	0x08011c20
 8004c70:	200003d0 	.word	0x200003d0
 8004c74:	08011c38 	.word	0x08011c38
 8004c78:	200003d4 	.word	0x200003d4
 8004c7c:	08011b5c 	.word	0x08011b5c
 8004c80:	08004cb9 	.word	0x08004cb9
 8004c84:	200003b8 	.word	0x200003b8
 8004c88:	08011bc8 	.word	0x08011bc8
 8004c8c:	08004d2d 	.word	0x08004d2d
 8004c90:	200003c0 	.word	0x200003c0
 8004c94:	08011ba4 	.word	0x08011ba4
 8004c98:	08004cd9 	.word	0x08004cd9
 8004c9c:	200003bc 	.word	0x200003bc
 8004ca0:	08011b80 	.word	0x08011b80
 8004ca4:	08004d5d 	.word	0x08004d5d
 8004ca8:	200003c4 	.word	0x200003c4
 8004cac:	08011bec 	.word	0x08011bec
 8004cb0:	08004de9 	.word	0x08004de9
 8004cb4:	200003c8 	.word	0x200003c8

08004cb8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b082      	sub	sp, #8
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOB,LED2_Pin);
 8004cc0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004cc4:	4803      	ldr	r0, [pc, #12]	; (8004cd4 <StartDefaultTask+0x1c>)
 8004cc6:	f001 fa45 	bl	8006154 <HAL_GPIO_TogglePin>
    osDelay(500);
 8004cca:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004cce:	f005 f8fb 	bl	8009ec8 <osDelay>
	HAL_GPIO_TogglePin(GPIOB,LED2_Pin);
 8004cd2:	e7f5      	b.n	8004cc0 <StartDefaultTask+0x8>
 8004cd4:	48000400 	.word	0x48000400

08004cd8 <calcHeadingTask>:
  /* USER CODE END 5 */
}


void calcHeadingTask(void *argument)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b090      	sub	sp, #64	; 0x40
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
	mems_data_t mems_data;
	FusionEuler euler;
	osStatus_t status;
	FusionInit();
 8004ce0:	f7fc fc22 	bl	8001528 <FusionInit>

	for(;;)
	{
		status = osMessageQueueGet(memsQueueHandle, &mems_data, NULL, 0U);   // wait for message
 8004ce4:	4b0f      	ldr	r3, [pc, #60]	; (8004d24 <calcHeadingTask+0x4c>)
 8004ce6:	6818      	ldr	r0, [r3, #0]
 8004ce8:	f107 0114 	add.w	r1, r7, #20
 8004cec:	2300      	movs	r3, #0
 8004cee:	2200      	movs	r2, #0
 8004cf0:	f005 fae6 	bl	800a2c0 <osMessageQueueGet>
 8004cf4:	63f8      	str	r0, [r7, #60]	; 0x3c
	    if (status == osOK) {
 8004cf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d10f      	bne.n	8004d1c <calcHeadingTask+0x44>
	    	FusionCalcHeading(&mems_data, &euler);
 8004cfc:	f107 0208 	add.w	r2, r7, #8
 8004d00:	f107 0314 	add.w	r3, r7, #20
 8004d04:	4611      	mov	r1, r2
 8004d06:	4618      	mov	r0, r3
 8004d08:	f7fc fc2e 	bl	8001568 <FusionCalcHeading>
	    	osMessageQueuePut(outputQueueHandle, &euler, 0U, 0U);
 8004d0c:	4b06      	ldr	r3, [pc, #24]	; (8004d28 <calcHeadingTask+0x50>)
 8004d0e:	6818      	ldr	r0, [r3, #0]
 8004d10:	f107 0108 	add.w	r1, r7, #8
 8004d14:	2300      	movs	r3, #0
 8004d16:	2200      	movs	r2, #0
 8004d18:	f005 fa72 	bl	800a200 <osMessageQueuePut>
	    }
		osDelay(10);
 8004d1c:	200a      	movs	r0, #10
 8004d1e:	f005 f8d3 	bl	8009ec8 <osDelay>
		status = osMessageQueueGet(memsQueueHandle, &mems_data, NULL, 0U);   // wait for message
 8004d22:	e7df      	b.n	8004ce4 <calcHeadingTask+0xc>
 8004d24:	200003d0 	.word	0x200003d0
 8004d28:	200003d4 	.word	0x200003d4

08004d2c <readMemsTask>:
	}
}

void readMemsTask(void *argument)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b08c      	sub	sp, #48	; 0x30
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
	mems_data_t mems_data;
	for(;;)
	{
		tick_gyro(&mems_data);
 8004d34:	f107 0308 	add.w	r3, r7, #8
 8004d38:	4618      	mov	r0, r3
 8004d3a:	f7ff fc97 	bl	800466c <tick_gyro>
		osMessageQueuePut(memsQueueHandle, &mems_data, 0U, 0U);
 8004d3e:	4b06      	ldr	r3, [pc, #24]	; (8004d58 <readMemsTask+0x2c>)
 8004d40:	6818      	ldr	r0, [r3, #0]
 8004d42:	f107 0108 	add.w	r1, r7, #8
 8004d46:	2300      	movs	r3, #0
 8004d48:	2200      	movs	r2, #0
 8004d4a:	f005 fa59 	bl	800a200 <osMessageQueuePut>
		osDelay(50);
 8004d4e:	2032      	movs	r0, #50	; 0x32
 8004d50:	f005 f8ba 	bl	8009ec8 <osDelay>
		tick_gyro(&mems_data);
 8004d54:	e7ee      	b.n	8004d34 <readMemsTask+0x8>
 8004d56:	bf00      	nop
 8004d58:	200003d0 	.word	0x200003d0

08004d5c <printOutTask>:
	}
}


void printOutTask(void *argument)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b094      	sub	sp, #80	; 0x50
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
	mems_data_t mems_data;
	FusionEuler euler;
	uint8_t text[10] = "";
 8004d64:	2300      	movs	r3, #0
 8004d66:	60fb      	str	r3, [r7, #12]
 8004d68:	f107 0310 	add.w	r3, r7, #16
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	601a      	str	r2, [r3, #0]
 8004d70:	809a      	strh	r2, [r3, #4]
	osStatus_t status;

	for(;;)
	{
		status = osMessageQueueGet(outputQueueHandle, &euler, NULL, 0U);   // wait for message
 8004d72:	4b1a      	ldr	r3, [pc, #104]	; (8004ddc <printOutTask+0x80>)
 8004d74:	6818      	ldr	r0, [r3, #0]
 8004d76:	f107 0118 	add.w	r1, r7, #24
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	f005 fa9f 	bl	800a2c0 <osMessageQueueGet>
 8004d82:	64f8      	str	r0, [r7, #76]	; 0x4c
		if (status == osOK) {
 8004d84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d123      	bne.n	8004dd2 <printOutTask+0x76>
			sprintf(text, "\n%f\r", euler.angle.yaw);
 8004d8a:	6a3b      	ldr	r3, [r7, #32]
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	f7fb fbf3 	bl	8000578 <__aeabi_f2d>
 8004d92:	4602      	mov	r2, r0
 8004d94:	460b      	mov	r3, r1
 8004d96:	f107 000c 	add.w	r0, r7, #12
 8004d9a:	4911      	ldr	r1, [pc, #68]	; (8004de0 <printOutTask+0x84>)
 8004d9c:	f008 ff90 	bl	800dcc0 <siprintf>
			osMutexAcquire(debugUartMutex, osWaitForever);
 8004da0:	4b10      	ldr	r3, [pc, #64]	; (8004de4 <printOutTask+0x88>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f04f 31ff 	mov.w	r1, #4294967295
 8004da8:	4618      	mov	r0, r3
 8004daa:	f005 f92e 	bl	800a00a <osMutexAcquire>
			uart_write_debug(text,50);
 8004dae:	f107 030c 	add.w	r3, r7, #12
 8004db2:	2132      	movs	r1, #50	; 0x32
 8004db4:	4618      	mov	r0, r3
 8004db6:	f000 fea3 	bl	8005b00 <uart_write_debug>
			osMutexRelease(debugUartMutex);
 8004dba:	4b0a      	ldr	r3, [pc, #40]	; (8004de4 <printOutTask+0x88>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	f005 f96e 	bl	800a0a0 <osMutexRelease>
			memset(text,0,sizeof(text));
 8004dc4:	f107 030c 	add.w	r3, r7, #12
 8004dc8:	220a      	movs	r2, #10
 8004dca:	2100      	movs	r1, #0
 8004dcc:	4618      	mov	r0, r3
 8004dce:	f008 fb05 	bl	800d3dc <memset>
		}
		osDelay(100);
 8004dd2:	2064      	movs	r0, #100	; 0x64
 8004dd4:	f005 f878 	bl	8009ec8 <osDelay>
		status = osMessageQueueGet(outputQueueHandle, &euler, NULL, 0U);   // wait for message
 8004dd8:	e7cb      	b.n	8004d72 <printOutTask+0x16>
 8004dda:	bf00      	nop
 8004ddc:	200003d4 	.word	0x200003d4
 8004de0:	08011a68 	.word	0x08011a68
 8004de4:	200003cc 	.word	0x200003cc

08004de8 <getCoorsTask>:
	}
}


void getCoorsTask(void *argument){
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b082      	sub	sp, #8
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]

	for(;;)
	{
		osMutexAcquire(debugUartMutex, osWaitForever);
 8004df0:	4b09      	ldr	r3, [pc, #36]	; (8004e18 <getCoorsTask+0x30>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f04f 31ff 	mov.w	r1, #4294967295
 8004df8:	4618      	mov	r0, r3
 8004dfa:	f005 f906 	bl	800a00a <osMutexAcquire>
		ublox_tick();
 8004dfe:	f7fe ff39 	bl	8003c74 <ublox_tick>
		osMutexRelease(debugUartMutex);
 8004e02:	4b05      	ldr	r3, [pc, #20]	; (8004e18 <getCoorsTask+0x30>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4618      	mov	r0, r3
 8004e08:	f005 f94a 	bl	800a0a0 <osMutexRelease>
		osDelay(1700);
 8004e0c:	f240 60a4 	movw	r0, #1700	; 0x6a4
 8004e10:	f005 f85a 	bl	8009ec8 <osDelay>
		osMutexAcquire(debugUartMutex, osWaitForever);
 8004e14:	e7ec      	b.n	8004df0 <getCoorsTask+0x8>
 8004e16:	bf00      	nop
 8004e18:	200003cc 	.word	0x200003cc

08004e1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b096      	sub	sp, #88	; 0x58
 8004e20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004e22:	f107 0314 	add.w	r3, r7, #20
 8004e26:	2244      	movs	r2, #68	; 0x44
 8004e28:	2100      	movs	r1, #0
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	f008 fad6 	bl	800d3dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004e30:	463b      	mov	r3, r7
 8004e32:	2200      	movs	r2, #0
 8004e34:	601a      	str	r2, [r3, #0]
 8004e36:	605a      	str	r2, [r3, #4]
 8004e38:	609a      	str	r2, [r3, #8]
 8004e3a:	60da      	str	r2, [r3, #12]
 8004e3c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8004e3e:	2000      	movs	r0, #0
 8004e40:	f002 f8ee 	bl	8007020 <HAL_PWREx_ControlVoltageScaling>
 8004e44:	4603      	mov	r3, r0
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d001      	beq.n	8004e4e <SystemClock_Config+0x32>
  {
    Error_Handler();
 8004e4a:	f000 f9f5 	bl	8005238 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8004e4e:	2310      	movs	r3, #16
 8004e50:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8004e52:	2301      	movs	r3, #1
 8004e54:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8004e56:	2300      	movs	r3, #0
 8004e58:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8004e5a:	2360      	movs	r3, #96	; 0x60
 8004e5c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004e5e:	2302      	movs	r3, #2
 8004e60:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8004e62:	2301      	movs	r3, #1
 8004e64:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8004e66:	2301      	movs	r3, #1
 8004e68:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 8004e6a:	233c      	movs	r3, #60	; 0x3c
 8004e6c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004e6e:	2302      	movs	r3, #2
 8004e70:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8004e72:	2302      	movs	r3, #2
 8004e74:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8004e76:	2302      	movs	r3, #2
 8004e78:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004e7a:	f107 0314 	add.w	r3, r7, #20
 8004e7e:	4618      	mov	r0, r3
 8004e80:	f002 f972 	bl	8007168 <HAL_RCC_OscConfig>
 8004e84:	4603      	mov	r3, r0
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d001      	beq.n	8004e8e <SystemClock_Config+0x72>
  {
    Error_Handler();
 8004e8a:	f000 f9d5 	bl	8005238 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004e8e:	230f      	movs	r3, #15
 8004e90:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004e92:	2303      	movs	r3, #3
 8004e94:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004e96:	2300      	movs	r3, #0
 8004e98:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8004ea2:	463b      	mov	r3, r7
 8004ea4:	2105      	movs	r1, #5
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	f002 fd78 	bl	800799c <HAL_RCC_ClockConfig>
 8004eac:	4603      	mov	r3, r0
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d001      	beq.n	8004eb6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8004eb2:	f000 f9c1 	bl	8005238 <Error_Handler>
  }
}
 8004eb6:	bf00      	nop
 8004eb8:	3758      	adds	r7, #88	; 0x58
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}
	...

08004ec0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b08a      	sub	sp, #40	; 0x28
 8004ec4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ec6:	f107 0314 	add.w	r3, r7, #20
 8004eca:	2200      	movs	r2, #0
 8004ecc:	601a      	str	r2, [r3, #0]
 8004ece:	605a      	str	r2, [r3, #4]
 8004ed0:	609a      	str	r2, [r3, #8]
 8004ed2:	60da      	str	r2, [r3, #12]
 8004ed4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004ed6:	4bbb      	ldr	r3, [pc, #748]	; (80051c4 <MX_GPIO_Init+0x304>)
 8004ed8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004eda:	4aba      	ldr	r2, [pc, #744]	; (80051c4 <MX_GPIO_Init+0x304>)
 8004edc:	f043 0310 	orr.w	r3, r3, #16
 8004ee0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004ee2:	4bb8      	ldr	r3, [pc, #736]	; (80051c4 <MX_GPIO_Init+0x304>)
 8004ee4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ee6:	f003 0310 	and.w	r3, r3, #16
 8004eea:	613b      	str	r3, [r7, #16]
 8004eec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004eee:	4bb5      	ldr	r3, [pc, #724]	; (80051c4 <MX_GPIO_Init+0x304>)
 8004ef0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ef2:	4ab4      	ldr	r2, [pc, #720]	; (80051c4 <MX_GPIO_Init+0x304>)
 8004ef4:	f043 0304 	orr.w	r3, r3, #4
 8004ef8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004efa:	4bb2      	ldr	r3, [pc, #712]	; (80051c4 <MX_GPIO_Init+0x304>)
 8004efc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004efe:	f003 0304 	and.w	r3, r3, #4
 8004f02:	60fb      	str	r3, [r7, #12]
 8004f04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004f06:	4baf      	ldr	r3, [pc, #700]	; (80051c4 <MX_GPIO_Init+0x304>)
 8004f08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f0a:	4aae      	ldr	r2, [pc, #696]	; (80051c4 <MX_GPIO_Init+0x304>)
 8004f0c:	f043 0301 	orr.w	r3, r3, #1
 8004f10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004f12:	4bac      	ldr	r3, [pc, #688]	; (80051c4 <MX_GPIO_Init+0x304>)
 8004f14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f16:	f003 0301 	and.w	r3, r3, #1
 8004f1a:	60bb      	str	r3, [r7, #8]
 8004f1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f1e:	4ba9      	ldr	r3, [pc, #676]	; (80051c4 <MX_GPIO_Init+0x304>)
 8004f20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f22:	4aa8      	ldr	r2, [pc, #672]	; (80051c4 <MX_GPIO_Init+0x304>)
 8004f24:	f043 0302 	orr.w	r3, r3, #2
 8004f28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004f2a:	4ba6      	ldr	r3, [pc, #664]	; (80051c4 <MX_GPIO_Init+0x304>)
 8004f2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f2e:	f003 0302 	and.w	r3, r3, #2
 8004f32:	607b      	str	r3, [r7, #4]
 8004f34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004f36:	4ba3      	ldr	r3, [pc, #652]	; (80051c4 <MX_GPIO_Init+0x304>)
 8004f38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f3a:	4aa2      	ldr	r2, [pc, #648]	; (80051c4 <MX_GPIO_Init+0x304>)
 8004f3c:	f043 0308 	orr.w	r3, r3, #8
 8004f40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004f42:	4ba0      	ldr	r3, [pc, #640]	; (80051c4 <MX_GPIO_Init+0x304>)
 8004f44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f46:	f003 0308 	and.w	r3, r3, #8
 8004f4a:	603b      	str	r3, [r7, #0]
 8004f4c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ST25DV04K_RF_DISABLE_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin, GPIO_PIN_RESET);
 8004f4e:	2200      	movs	r2, #0
 8004f50:	f240 1105 	movw	r1, #261	; 0x105
 8004f54:	489c      	ldr	r0, [pc, #624]	; (80051c8 <MX_GPIO_Init+0x308>)
 8004f56:	f001 f8e5 	bl	8006124 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|ARD_D4_Pin|ARD_D7_Pin|SPBTLE_RF_RST_Pin
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	f248 111c 	movw	r1, #33052	; 0x811c
 8004f60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004f64:	f001 f8de 	bl	8006124 <HAL_GPIO_WritePin>
                          |ARD_D9_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8004f68:	2200      	movs	r2, #0
 8004f6a:	f24f 0134 	movw	r1, #61492	; 0xf034
 8004f6e:	4897      	ldr	r0, [pc, #604]	; (80051cc <MX_GPIO_Init+0x30c>)
 8004f70:	f001 f8d8 	bl	8006124 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|PMOD_SPI2_SCK_Pin|STSAFE_A110_RESET_Pin, GPIO_PIN_RESET);
 8004f74:	2200      	movs	r2, #0
 8004f76:	f242 0183 	movw	r1, #8323	; 0x2083
 8004f7a:	4895      	ldr	r0, [pc, #596]	; (80051d0 <MX_GPIO_Init+0x310>)
 8004f7c:	f001 f8d2 	bl	8006124 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8004f80:	2200      	movs	r2, #0
 8004f82:	f44f 7110 	mov.w	r1, #576	; 0x240
 8004f86:	4893      	ldr	r0, [pc, #588]	; (80051d4 <MX_GPIO_Init+0x314>)
 8004f88:	f001 f8cc 	bl	8006124 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ST25DV04K_RF_DISABLE_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ST25DV04K_RF_DISABLE_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8004f8c:	f240 1305 	movw	r3, #261	; 0x105
 8004f90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004f92:	2301      	movs	r3, #1
 8004f94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f96:	2300      	movs	r3, #0
 8004f98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004f9e:	f107 0314 	add.w	r3, r7, #20
 8004fa2:	4619      	mov	r1, r3
 8004fa4:	4888      	ldr	r0, [pc, #544]	; (80051c8 <MX_GPIO_Init+0x308>)
 8004fa6:	f000 ff2b 	bl	8005e00 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin ST25DV04K_GPO_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin
                           ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|ST25DV04K_GPO_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin
 8004faa:	237a      	movs	r3, #122	; 0x7a
 8004fac:	617b      	str	r3, [r7, #20]
                          |ISM43362_DRDY_EXTI1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004fae:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8004fb2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004fb8:	f107 0314 	add.w	r3, r7, #20
 8004fbc:	4619      	mov	r1, r3
 8004fbe:	4882      	ldr	r0, [pc, #520]	; (80051c8 <MX_GPIO_Init+0x308>)
 8004fc0:	f000 ff1e 	bl	8005e00 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_EXTI13_Pin VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin|VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8004fc4:	f44f 5306 	mov.w	r3, #8576	; 0x2180
 8004fc8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004fca:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8004fce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004fd4:	f107 0314 	add.w	r3, r7, #20
 8004fd8:	4619      	mov	r1, r3
 8004fda:	487e      	ldr	r0, [pc, #504]	; (80051d4 <MX_GPIO_Init+0x314>)
 8004fdc:	f000 ff10 	bl	8005e00 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8004fe0:	233f      	movs	r3, #63	; 0x3f
 8004fe2:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8004fe4:	230b      	movs	r3, #11
 8004fe6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fe8:	2300      	movs	r3, #0
 8004fea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004fec:	f107 0314 	add.w	r3, r7, #20
 8004ff0:	4619      	mov	r1, r3
 8004ff2:	4878      	ldr	r0, [pc, #480]	; (80051d4 <MX_GPIO_Init+0x314>)
 8004ff4:	f000 ff04 	bl	8005e00 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8004ff8:	2303      	movs	r3, #3
 8004ffa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ffc:	2302      	movs	r3, #2
 8004ffe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005000:	2300      	movs	r3, #0
 8005002:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005004:	2303      	movs	r3, #3
 8005006:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8005008:	2308      	movs	r3, #8
 800500a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800500c:	f107 0314 	add.w	r3, r7, #20
 8005010:	4619      	mov	r1, r3
 8005012:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005016:	f000 fef3 	bl	8005e00 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin ARD_D4_Pin ARD_D7_Pin SPBTLE_RF_RST_Pin
                           ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|ARD_D4_Pin|ARD_D7_Pin|SPBTLE_RF_RST_Pin
 800501a:	f248 131c 	movw	r3, #33052	; 0x811c
 800501e:	617b      	str	r3, [r7, #20]
                          |ARD_D9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005020:	2301      	movs	r3, #1
 8005022:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005024:	2300      	movs	r3, #0
 8005026:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005028:	2300      	movs	r3, #0
 800502a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800502c:	f107 0314 	add.w	r3, r7, #20
 8005030:	4619      	mov	r1, r3
 8005032:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005036:	f000 fee3 	bl	8005e00 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 800503a:	23e0      	movs	r3, #224	; 0xe0
 800503c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800503e:	2302      	movs	r3, #2
 8005040:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005042:	2300      	movs	r3, #0
 8005044:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005046:	2303      	movs	r3, #3
 8005048:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800504a:	2305      	movs	r3, #5
 800504c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800504e:	f107 0314 	add.w	r3, r7, #20
 8005052:	4619      	mov	r1, r3
 8005054:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005058:	f000 fed2 	bl	8005e00 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 800505c:	2301      	movs	r3, #1
 800505e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005060:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8005064:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005066:	2300      	movs	r3, #0
 8005068:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 800506a:	f107 0314 	add.w	r3, r7, #20
 800506e:	4619      	mov	r1, r3
 8005070:	4856      	ldr	r0, [pc, #344]	; (80051cc <MX_GPIO_Init+0x30c>)
 8005072:	f000 fec5 	bl	8005e00 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8005076:	2302      	movs	r3, #2
 8005078:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800507a:	2302      	movs	r3, #2
 800507c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800507e:	2300      	movs	r3, #0
 8005080:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005082:	2300      	movs	r3, #0
 8005084:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005086:	2302      	movs	r3, #2
 8005088:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 800508a:	f107 0314 	add.w	r3, r7, #20
 800508e:	4619      	mov	r1, r3
 8005090:	484e      	ldr	r0, [pc, #312]	; (80051cc <MX_GPIO_Init+0x30c>)
 8005092:	f000 feb5 	bl	8005e00 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8005096:	f24f 0334 	movw	r3, #61492	; 0xf034
 800509a:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800509c:	2301      	movs	r3, #1
 800509e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050a0:	2300      	movs	r3, #0
 80050a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80050a4:	2300      	movs	r3, #0
 80050a6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80050a8:	f107 0314 	add.w	r3, r7, #20
 80050ac:	4619      	mov	r1, r3
 80050ae:	4847      	ldr	r0, [pc, #284]	; (80051cc <MX_GPIO_Init+0x30c>)
 80050b0:	f000 fea6 	bl	8005e00 <HAL_GPIO_Init>

  /*Configure GPIO pins : DFSDM1_DATIN2_Pin DFSDM1_CKOUT_Pin */
  GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 80050b4:	f44f 7320 	mov.w	r3, #640	; 0x280
 80050b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050ba:	2302      	movs	r3, #2
 80050bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050be:	2300      	movs	r3, #0
 80050c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80050c2:	2300      	movs	r3, #0
 80050c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80050c6:	2306      	movs	r3, #6
 80050c8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80050ca:	f107 0314 	add.w	r3, r7, #20
 80050ce:	4619      	mov	r1, r3
 80050d0:	483d      	ldr	r0, [pc, #244]	; (80051c8 <MX_GPIO_Init+0x308>)
 80050d2:	f000 fe95 	bl	8005e00 <HAL_GPIO_Init>

  /*Configure GPIO pins : QUADSPI_CLK_Pin QUADSPI_NCS_Pin OQUADSPI_BK1_IO0_Pin QUADSPI_BK1_IO1_Pin
                           QUAD_SPI_BK1_IO2_Pin QUAD_SPI_BK1_IO3_Pin */
  GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 80050d6:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 80050da:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050dc:	2302      	movs	r3, #2
 80050de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050e0:	2300      	movs	r3, #0
 80050e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80050e4:	2303      	movs	r3, #3
 80050e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 80050e8:	230a      	movs	r3, #10
 80050ea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80050ec:	f107 0314 	add.w	r3, r7, #20
 80050f0:	4619      	mov	r1, r3
 80050f2:	4835      	ldr	r0, [pc, #212]	; (80051c8 <MX_GPIO_Init+0x308>)
 80050f4:	f000 fe84 	bl	8005e00 <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_UART3_TX_Pin INTERNAL_UART3_RX_Pin */
  GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 80050f8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80050fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050fe:	2302      	movs	r3, #2
 8005100:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005102:	2300      	movs	r3, #0
 8005104:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005106:	2303      	movs	r3, #3
 8005108:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800510a:	2307      	movs	r3, #7
 800510c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800510e:	f107 0314 	add.w	r3, r7, #20
 8005112:	4619      	mov	r1, r3
 8005114:	482e      	ldr	r0, [pc, #184]	; (80051d0 <MX_GPIO_Init+0x310>)
 8005116:	f000 fe73 	bl	8005e00 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI10_Pin LSM6DSL_INT1_EXTI11_Pin USB_OTG_FS_PWR_EN_Pin ARD_D2_Pin
                           HTS221_DRDY_EXTI15_Pin PMOD_IRQ_EXTI2_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI10_Pin|LSM6DSL_INT1_EXTI11_Pin|USB_OTG_FS_PWR_EN_Pin|ARD_D2_Pin
 800511a:	f64d 4304 	movw	r3, #56324	; 0xdc04
 800511e:	617b      	str	r3, [r7, #20]
                          |HTS221_DRDY_EXTI15_Pin|PMOD_IRQ_EXTI2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005120:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8005124:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005126:	2300      	movs	r3, #0
 8005128:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800512a:	f107 0314 	add.w	r3, r7, #20
 800512e:	4619      	mov	r1, r3
 8005130:	4827      	ldr	r0, [pc, #156]	; (80051d0 <MX_GPIO_Init+0x310>)
 8005132:	f000 fe65 	bl	8005e00 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin PMOD_SPI2_SCK_Pin STSAFE_A110_RESET_Pin */
  GPIO_InitStruct.Pin = SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|PMOD_SPI2_SCK_Pin|STSAFE_A110_RESET_Pin;
 8005136:	f242 0383 	movw	r3, #8323	; 0x2083
 800513a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800513c:	2301      	movs	r3, #1
 800513e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005140:	2300      	movs	r3, #0
 8005142:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005144:	2300      	movs	r3, #0
 8005146:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005148:	f107 0314 	add.w	r3, r7, #20
 800514c:	4619      	mov	r1, r3
 800514e:	4820      	ldr	r0, [pc, #128]	; (80051d0 <MX_GPIO_Init+0x310>)
 8005150:	f000 fe56 	bl	8005e00 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8005154:	f44f 7310 	mov.w	r3, #576	; 0x240
 8005158:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800515a:	2301      	movs	r3, #1
 800515c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800515e:	2300      	movs	r3, #0
 8005160:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005162:	2300      	movs	r3, #0
 8005164:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005166:	f107 0314 	add.w	r3, r7, #20
 800516a:	4619      	mov	r1, r3
 800516c:	4819      	ldr	r0, [pc, #100]	; (80051d4 <MX_GPIO_Init+0x314>)
 800516e:	f000 fe47 	bl	8005e00 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8005172:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005176:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005178:	2300      	movs	r3, #0
 800517a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800517c:	2300      	movs	r3, #0
 800517e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8005180:	f107 0314 	add.w	r3, r7, #20
 8005184:	4619      	mov	r1, r3
 8005186:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800518a:	f000 fe39 	bl	8005e00 <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_SPI3_SCK_Pin INTERNAL_SPI3_MISO_Pin INTERNAL_SPI3_MOSI_Pin */
  GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 800518e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8005192:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005194:	2302      	movs	r3, #2
 8005196:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005198:	2300      	movs	r3, #0
 800519a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800519c:	2303      	movs	r3, #3
 800519e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80051a0:	2306      	movs	r3, #6
 80051a2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80051a4:	f107 0314 	add.w	r3, r7, #20
 80051a8:	4619      	mov	r1, r3
 80051aa:	480a      	ldr	r0, [pc, #40]	; (80051d4 <MX_GPIO_Init+0x314>)
 80051ac:	f000 fe28 	bl	8005e00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 80051b0:	2378      	movs	r3, #120	; 0x78
 80051b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051b4:	2302      	movs	r3, #2
 80051b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051b8:	2300      	movs	r3, #0
 80051ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80051bc:	2303      	movs	r3, #3
 80051be:	623b      	str	r3, [r7, #32]
 80051c0:	e00a      	b.n	80051d8 <MX_GPIO_Init+0x318>
 80051c2:	bf00      	nop
 80051c4:	40021000 	.word	0x40021000
 80051c8:	48001000 	.word	0x48001000
 80051cc:	48000400 	.word	0x48000400
 80051d0:	48000c00 	.word	0x48000c00
 80051d4:	48000800 	.word	0x48000800
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80051d8:	2307      	movs	r3, #7
 80051da:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80051dc:	f107 0314 	add.w	r3, r7, #20
 80051e0:	4619      	mov	r1, r3
 80051e2:	480b      	ldr	r0, [pc, #44]	; (8005210 <MX_GPIO_Init+0x350>)
 80051e4:	f000 fe0c 	bl	8005e00 <HAL_GPIO_Init>
//  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
//  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
//  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 80051e8:	2200      	movs	r2, #0
 80051ea:	2105      	movs	r1, #5
 80051ec:	2017      	movs	r0, #23
 80051ee:	f000 fddd 	bl	8005dac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80051f2:	2017      	movs	r0, #23
 80051f4:	f000 fdf6 	bl	8005de4 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80051f8:	2200      	movs	r2, #0
 80051fa:	2105      	movs	r1, #5
 80051fc:	2028      	movs	r0, #40	; 0x28
 80051fe:	f000 fdd5 	bl	8005dac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8005202:	2028      	movs	r0, #40	; 0x28
 8005204:	f000 fdee 	bl	8005de4 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8005208:	bf00      	nop
 800520a:	3728      	adds	r7, #40	; 0x28
 800520c:	46bd      	mov	sp, r7
 800520e:	bd80      	pop	{r7, pc}
 8005210:	48000c00 	.word	0x48000c00

08005214 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b082      	sub	sp, #8
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a04      	ldr	r2, [pc, #16]	; (8005234 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d101      	bne.n	800522a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8005226:	f000 fcc5 	bl	8005bb4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800522a:	bf00      	nop
 800522c:	3708      	adds	r7, #8
 800522e:	46bd      	mov	sp, r7
 8005230:	bd80      	pop	{r7, pc}
 8005232:	bf00      	nop
 8005234:	40012c00 	.word	0x40012c00

08005238 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800523c:	b672      	cpsid	i
}
 800523e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOB,LED2_Pin);
 8005240:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005244:	4803      	ldr	r0, [pc, #12]	; (8005254 <Error_Handler+0x1c>)
 8005246:	f000 ff85 	bl	8006154 <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 800524a:	2064      	movs	r0, #100	; 0x64
 800524c:	f000 fcd2 	bl	8005bf4 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOB,LED2_Pin);
 8005250:	e7f6      	b.n	8005240 <Error_Handler+0x8>
 8005252:	bf00      	nop
 8005254:	48000400 	.word	0x48000400

08005258 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b082      	sub	sp, #8
 800525c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800525e:	4b11      	ldr	r3, [pc, #68]	; (80052a4 <HAL_MspInit+0x4c>)
 8005260:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005262:	4a10      	ldr	r2, [pc, #64]	; (80052a4 <HAL_MspInit+0x4c>)
 8005264:	f043 0301 	orr.w	r3, r3, #1
 8005268:	6613      	str	r3, [r2, #96]	; 0x60
 800526a:	4b0e      	ldr	r3, [pc, #56]	; (80052a4 <HAL_MspInit+0x4c>)
 800526c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800526e:	f003 0301 	and.w	r3, r3, #1
 8005272:	607b      	str	r3, [r7, #4]
 8005274:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005276:	4b0b      	ldr	r3, [pc, #44]	; (80052a4 <HAL_MspInit+0x4c>)
 8005278:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800527a:	4a0a      	ldr	r2, [pc, #40]	; (80052a4 <HAL_MspInit+0x4c>)
 800527c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005280:	6593      	str	r3, [r2, #88]	; 0x58
 8005282:	4b08      	ldr	r3, [pc, #32]	; (80052a4 <HAL_MspInit+0x4c>)
 8005284:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005286:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800528a:	603b      	str	r3, [r7, #0]
 800528c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800528e:	2200      	movs	r2, #0
 8005290:	210f      	movs	r1, #15
 8005292:	f06f 0001 	mvn.w	r0, #1
 8005296:	f000 fd89 	bl	8005dac <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800529a:	bf00      	nop
 800529c:	3708      	adds	r7, #8
 800529e:	46bd      	mov	sp, r7
 80052a0:	bd80      	pop	{r7, pc}
 80052a2:	bf00      	nop
 80052a4:	40021000 	.word	0x40021000

080052a8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b0b0      	sub	sp, #192	; 0xc0
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80052b0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80052b4:	2200      	movs	r2, #0
 80052b6:	601a      	str	r2, [r3, #0]
 80052b8:	605a      	str	r2, [r3, #4]
 80052ba:	609a      	str	r2, [r3, #8]
 80052bc:	60da      	str	r2, [r3, #12]
 80052be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80052c0:	f107 0318 	add.w	r3, r7, #24
 80052c4:	2294      	movs	r2, #148	; 0x94
 80052c6:	2100      	movs	r1, #0
 80052c8:	4618      	mov	r0, r3
 80052ca:	f008 f887 	bl	800d3dc <memset>
  if(hi2c->Instance==I2C2)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4a4a      	ldr	r2, [pc, #296]	; (80053fc <HAL_I2C_MspInit+0x154>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d144      	bne.n	8005362 <HAL_I2C_MspInit+0xba>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80052d8:	2380      	movs	r3, #128	; 0x80
 80052da:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80052dc:	2300      	movs	r3, #0
 80052de:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80052e0:	f107 0318 	add.w	r3, r7, #24
 80052e4:	4618      	mov	r0, r3
 80052e6:	f002 fe49 	bl	8007f7c <HAL_RCCEx_PeriphCLKConfig>
 80052ea:	4603      	mov	r3, r0
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d001      	beq.n	80052f4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80052f0:	f7ff ffa2 	bl	8005238 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80052f4:	4b42      	ldr	r3, [pc, #264]	; (8005400 <HAL_I2C_MspInit+0x158>)
 80052f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052f8:	4a41      	ldr	r2, [pc, #260]	; (8005400 <HAL_I2C_MspInit+0x158>)
 80052fa:	f043 0302 	orr.w	r3, r3, #2
 80052fe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005300:	4b3f      	ldr	r3, [pc, #252]	; (8005400 <HAL_I2C_MspInit+0x158>)
 8005302:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005304:	f003 0302 	and.w	r3, r3, #2
 8005308:	617b      	str	r3, [r7, #20]
 800530a:	697b      	ldr	r3, [r7, #20]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 800530c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005310:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005314:	2312      	movs	r3, #18
 8005316:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800531a:	2300      	movs	r3, #0
 800531c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005320:	2303      	movs	r3, #3
 8005322:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8005326:	2304      	movs	r3, #4
 8005328:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800532c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8005330:	4619      	mov	r1, r3
 8005332:	4834      	ldr	r0, [pc, #208]	; (8005404 <HAL_I2C_MspInit+0x15c>)
 8005334:	f000 fd64 	bl	8005e00 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8005338:	4b31      	ldr	r3, [pc, #196]	; (8005400 <HAL_I2C_MspInit+0x158>)
 800533a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800533c:	4a30      	ldr	r2, [pc, #192]	; (8005400 <HAL_I2C_MspInit+0x158>)
 800533e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005342:	6593      	str	r3, [r2, #88]	; 0x58
 8005344:	4b2e      	ldr	r3, [pc, #184]	; (8005400 <HAL_I2C_MspInit+0x158>)
 8005346:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005348:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800534c:	613b      	str	r3, [r7, #16]
 800534e:	693b      	ldr	r3, [r7, #16]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 5, 0);
 8005350:	2200      	movs	r2, #0
 8005352:	2105      	movs	r1, #5
 8005354:	2021      	movs	r0, #33	; 0x21
 8005356:	f000 fd29 	bl	8005dac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 800535a:	2021      	movs	r0, #33	; 0x21
 800535c:	f000 fd42 	bl	8005de4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8005360:	e048      	b.n	80053f4 <HAL_I2C_MspInit+0x14c>
  else if(hi2c->Instance==I2C1)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4a28      	ldr	r2, [pc, #160]	; (8005408 <HAL_I2C_MspInit+0x160>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d143      	bne.n	80053f4 <HAL_I2C_MspInit+0x14c>
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800536c:	2340      	movs	r3, #64	; 0x40
 800536e:	61bb      	str	r3, [r7, #24]
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8005370:	2300      	movs	r3, #0
 8005372:	66fb      	str	r3, [r7, #108]	; 0x6c
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005374:	f107 0318 	add.w	r3, r7, #24
 8005378:	4618      	mov	r0, r3
 800537a:	f002 fdff 	bl	8007f7c <HAL_RCCEx_PeriphCLKConfig>
 800537e:	4603      	mov	r3, r0
 8005380:	2b00      	cmp	r3, #0
 8005382:	d001      	beq.n	8005388 <HAL_I2C_MspInit+0xe0>
	  Error_Handler();
 8005384:	f7ff ff58 	bl	8005238 <Error_Handler>
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8005388:	4b1d      	ldr	r3, [pc, #116]	; (8005400 <HAL_I2C_MspInit+0x158>)
 800538a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800538c:	4a1c      	ldr	r2, [pc, #112]	; (8005400 <HAL_I2C_MspInit+0x158>)
 800538e:	f043 0302 	orr.w	r3, r3, #2
 8005392:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005394:	4b1a      	ldr	r3, [pc, #104]	; (8005400 <HAL_I2C_MspInit+0x158>)
 8005396:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005398:	f003 0302 	and.w	r3, r3, #2
 800539c:	60fb      	str	r3, [r7, #12]
 800539e:	68fb      	ldr	r3, [r7, #12]
	GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 80053a0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80053a4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80053a8:	2312      	movs	r3, #18
 80053aa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80053ae:	2301      	movs	r3, #1
 80053b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80053b4:	2303      	movs	r3, #3
 80053b6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80053ba:	2304      	movs	r3, #4
 80053bc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80053c0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80053c4:	4619      	mov	r1, r3
 80053c6:	480f      	ldr	r0, [pc, #60]	; (8005404 <HAL_I2C_MspInit+0x15c>)
 80053c8:	f000 fd1a 	bl	8005e00 <HAL_GPIO_Init>
	__HAL_RCC_I2C1_CLK_ENABLE();
 80053cc:	4b0c      	ldr	r3, [pc, #48]	; (8005400 <HAL_I2C_MspInit+0x158>)
 80053ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053d0:	4a0b      	ldr	r2, [pc, #44]	; (8005400 <HAL_I2C_MspInit+0x158>)
 80053d2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80053d6:	6593      	str	r3, [r2, #88]	; 0x58
 80053d8:	4b09      	ldr	r3, [pc, #36]	; (8005400 <HAL_I2C_MspInit+0x158>)
 80053da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80053e0:	60bb      	str	r3, [r7, #8]
 80053e2:	68bb      	ldr	r3, [r7, #8]
	HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 80053e4:	2200      	movs	r2, #0
 80053e6:	2105      	movs	r1, #5
 80053e8:	201f      	movs	r0, #31
 80053ea:	f000 fcdf 	bl	8005dac <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80053ee:	201f      	movs	r0, #31
 80053f0:	f000 fcf8 	bl	8005de4 <HAL_NVIC_EnableIRQ>
}
 80053f4:	bf00      	nop
 80053f6:	37c0      	adds	r7, #192	; 0xc0
 80053f8:	46bd      	mov	sp, r7
 80053fa:	bd80      	pop	{r7, pc}
 80053fc:	40005800 	.word	0x40005800
 8005400:	40021000 	.word	0x40021000
 8005404:	48000400 	.word	0x48000400
 8005408:	40005400 	.word	0x40005400

0800540c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b0b4      	sub	sp, #208	; 0xd0
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005414:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8005418:	2200      	movs	r2, #0
 800541a:	601a      	str	r2, [r3, #0]
 800541c:	605a      	str	r2, [r3, #4]
 800541e:	609a      	str	r2, [r3, #8]
 8005420:	60da      	str	r2, [r3, #12]
 8005422:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005424:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005428:	2294      	movs	r2, #148	; 0x94
 800542a:	2100      	movs	r1, #0
 800542c:	4618      	mov	r0, r3
 800542e:	f007 ffd5 	bl	800d3dc <memset>
  if(huart->Instance==UART4)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a83      	ldr	r2, [pc, #524]	; (8005644 <HAL_UART_MspInit+0x238>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d13c      	bne.n	80054b6 <HAL_UART_MspInit+0xaa>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800543c:	2308      	movs	r3, #8
 800543e:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8005440:	2300      	movs	r3, #0
 8005442:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005444:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005448:	4618      	mov	r0, r3
 800544a:	f002 fd97 	bl	8007f7c <HAL_RCCEx_PeriphCLKConfig>
 800544e:	4603      	mov	r3, r0
 8005450:	2b00      	cmp	r3, #0
 8005452:	d001      	beq.n	8005458 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8005454:	f7ff fef0 	bl	8005238 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8005458:	4b7b      	ldr	r3, [pc, #492]	; (8005648 <HAL_UART_MspInit+0x23c>)
 800545a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800545c:	4a7a      	ldr	r2, [pc, #488]	; (8005648 <HAL_UART_MspInit+0x23c>)
 800545e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005462:	6593      	str	r3, [r2, #88]	; 0x58
 8005464:	4b78      	ldr	r3, [pc, #480]	; (8005648 <HAL_UART_MspInit+0x23c>)
 8005466:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005468:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800546c:	627b      	str	r3, [r7, #36]	; 0x24
 800546e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005470:	4b75      	ldr	r3, [pc, #468]	; (8005648 <HAL_UART_MspInit+0x23c>)
 8005472:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005474:	4a74      	ldr	r2, [pc, #464]	; (8005648 <HAL_UART_MspInit+0x23c>)
 8005476:	f043 0301 	orr.w	r3, r3, #1
 800547a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800547c:	4b72      	ldr	r3, [pc, #456]	; (8005648 <HAL_UART_MspInit+0x23c>)
 800547e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005480:	f003 0301 	and.w	r3, r3, #1
 8005484:	623b      	str	r3, [r7, #32]
 8005486:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8005488:	2303      	movs	r3, #3
 800548a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800548e:	2302      	movs	r3, #2
 8005490:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005494:	2300      	movs	r3, #0
 8005496:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800549a:	2303      	movs	r3, #3
 800549c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80054a0:	2308      	movs	r3, #8
 80054a2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80054a6:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80054aa:	4619      	mov	r1, r3
 80054ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80054b0:	f000 fca6 	bl	8005e00 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80054b4:	e0c2      	b.n	800563c <HAL_UART_MspInit+0x230>
  else if(huart->Instance==USART1)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4a64      	ldr	r2, [pc, #400]	; (800564c <HAL_UART_MspInit+0x240>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d13b      	bne.n	8005538 <HAL_UART_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80054c0:	2301      	movs	r3, #1
 80054c2:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80054c4:	2300      	movs	r3, #0
 80054c6:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80054c8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80054cc:	4618      	mov	r0, r3
 80054ce:	f002 fd55 	bl	8007f7c <HAL_RCCEx_PeriphCLKConfig>
 80054d2:	4603      	mov	r3, r0
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d001      	beq.n	80054dc <HAL_UART_MspInit+0xd0>
      Error_Handler();
 80054d8:	f7ff feae 	bl	8005238 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80054dc:	4b5a      	ldr	r3, [pc, #360]	; (8005648 <HAL_UART_MspInit+0x23c>)
 80054de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054e0:	4a59      	ldr	r2, [pc, #356]	; (8005648 <HAL_UART_MspInit+0x23c>)
 80054e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80054e6:	6613      	str	r3, [r2, #96]	; 0x60
 80054e8:	4b57      	ldr	r3, [pc, #348]	; (8005648 <HAL_UART_MspInit+0x23c>)
 80054ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80054f0:	61fb      	str	r3, [r7, #28]
 80054f2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80054f4:	4b54      	ldr	r3, [pc, #336]	; (8005648 <HAL_UART_MspInit+0x23c>)
 80054f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054f8:	4a53      	ldr	r2, [pc, #332]	; (8005648 <HAL_UART_MspInit+0x23c>)
 80054fa:	f043 0302 	orr.w	r3, r3, #2
 80054fe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005500:	4b51      	ldr	r3, [pc, #324]	; (8005648 <HAL_UART_MspInit+0x23c>)
 8005502:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005504:	f003 0302 	and.w	r3, r3, #2
 8005508:	61bb      	str	r3, [r7, #24]
 800550a:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 800550c:	23c0      	movs	r3, #192	; 0xc0
 800550e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005512:	2302      	movs	r3, #2
 8005514:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005518:	2300      	movs	r3, #0
 800551a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800551e:	2303      	movs	r3, #3
 8005520:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005524:	2307      	movs	r3, #7
 8005526:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800552a:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800552e:	4619      	mov	r1, r3
 8005530:	4847      	ldr	r0, [pc, #284]	; (8005650 <HAL_UART_MspInit+0x244>)
 8005532:	f000 fc65 	bl	8005e00 <HAL_GPIO_Init>
}
 8005536:	e081      	b.n	800563c <HAL_UART_MspInit+0x230>
  else if(huart->Instance==USART2)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a45      	ldr	r2, [pc, #276]	; (8005654 <HAL_UART_MspInit+0x248>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d13b      	bne.n	80055ba <HAL_UART_MspInit+0x1ae>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8005542:	2302      	movs	r3, #2
 8005544:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8005546:	2300      	movs	r3, #0
 8005548:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800554a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800554e:	4618      	mov	r0, r3
 8005550:	f002 fd14 	bl	8007f7c <HAL_RCCEx_PeriphCLKConfig>
 8005554:	4603      	mov	r3, r0
 8005556:	2b00      	cmp	r3, #0
 8005558:	d001      	beq.n	800555e <HAL_UART_MspInit+0x152>
      Error_Handler();
 800555a:	f7ff fe6d 	bl	8005238 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800555e:	4b3a      	ldr	r3, [pc, #232]	; (8005648 <HAL_UART_MspInit+0x23c>)
 8005560:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005562:	4a39      	ldr	r2, [pc, #228]	; (8005648 <HAL_UART_MspInit+0x23c>)
 8005564:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005568:	6593      	str	r3, [r2, #88]	; 0x58
 800556a:	4b37      	ldr	r3, [pc, #220]	; (8005648 <HAL_UART_MspInit+0x23c>)
 800556c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800556e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005572:	617b      	str	r3, [r7, #20]
 8005574:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005576:	4b34      	ldr	r3, [pc, #208]	; (8005648 <HAL_UART_MspInit+0x23c>)
 8005578:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800557a:	4a33      	ldr	r2, [pc, #204]	; (8005648 <HAL_UART_MspInit+0x23c>)
 800557c:	f043 0308 	orr.w	r3, r3, #8
 8005580:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005582:	4b31      	ldr	r3, [pc, #196]	; (8005648 <HAL_UART_MspInit+0x23c>)
 8005584:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005586:	f003 0308 	and.w	r3, r3, #8
 800558a:	613b      	str	r3, [r7, #16]
 800558c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 800558e:	2378      	movs	r3, #120	; 0x78
 8005590:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005594:	2302      	movs	r3, #2
 8005596:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800559a:	2300      	movs	r3, #0
 800559c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80055a0:	2303      	movs	r3, #3
 80055a2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80055a6:	2307      	movs	r3, #7
 80055a8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80055ac:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80055b0:	4619      	mov	r1, r3
 80055b2:	4829      	ldr	r0, [pc, #164]	; (8005658 <HAL_UART_MspInit+0x24c>)
 80055b4:	f000 fc24 	bl	8005e00 <HAL_GPIO_Init>
}
 80055b8:	e040      	b.n	800563c <HAL_UART_MspInit+0x230>
  else if(huart->Instance==USART3)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4a27      	ldr	r2, [pc, #156]	; (800565c <HAL_UART_MspInit+0x250>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d13b      	bne.n	800563c <HAL_UART_MspInit+0x230>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80055c4:	2304      	movs	r3, #4
 80055c6:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80055c8:	2300      	movs	r3, #0
 80055ca:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80055cc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80055d0:	4618      	mov	r0, r3
 80055d2:	f002 fcd3 	bl	8007f7c <HAL_RCCEx_PeriphCLKConfig>
 80055d6:	4603      	mov	r3, r0
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d001      	beq.n	80055e0 <HAL_UART_MspInit+0x1d4>
      Error_Handler();
 80055dc:	f7ff fe2c 	bl	8005238 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80055e0:	4b19      	ldr	r3, [pc, #100]	; (8005648 <HAL_UART_MspInit+0x23c>)
 80055e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055e4:	4a18      	ldr	r2, [pc, #96]	; (8005648 <HAL_UART_MspInit+0x23c>)
 80055e6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80055ea:	6593      	str	r3, [r2, #88]	; 0x58
 80055ec:	4b16      	ldr	r3, [pc, #88]	; (8005648 <HAL_UART_MspInit+0x23c>)
 80055ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80055f4:	60fb      	str	r3, [r7, #12]
 80055f6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80055f8:	4b13      	ldr	r3, [pc, #76]	; (8005648 <HAL_UART_MspInit+0x23c>)
 80055fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055fc:	4a12      	ldr	r2, [pc, #72]	; (8005648 <HAL_UART_MspInit+0x23c>)
 80055fe:	f043 0308 	orr.w	r3, r3, #8
 8005602:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005604:	4b10      	ldr	r3, [pc, #64]	; (8005648 <HAL_UART_MspInit+0x23c>)
 8005606:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005608:	f003 0308 	and.w	r3, r3, #8
 800560c:	60bb      	str	r3, [r7, #8]
 800560e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8005610:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005614:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005618:	2302      	movs	r3, #2
 800561a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800561e:	2300      	movs	r3, #0
 8005620:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005624:	2303      	movs	r3, #3
 8005626:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800562a:	2307      	movs	r3, #7
 800562c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005630:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8005634:	4619      	mov	r1, r3
 8005636:	4808      	ldr	r0, [pc, #32]	; (8005658 <HAL_UART_MspInit+0x24c>)
 8005638:	f000 fbe2 	bl	8005e00 <HAL_GPIO_Init>
}
 800563c:	bf00      	nop
 800563e:	37d0      	adds	r7, #208	; 0xd0
 8005640:	46bd      	mov	sp, r7
 8005642:	bd80      	pop	{r7, pc}
 8005644:	40004c00 	.word	0x40004c00
 8005648:	40021000 	.word	0x40021000
 800564c:	40013800 	.word	0x40013800
 8005650:	48000400 	.word	0x48000400
 8005654:	40004400 	.word	0x40004400
 8005658:	48000c00 	.word	0x48000c00
 800565c:	40004800 	.word	0x40004800

08005660 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b08c      	sub	sp, #48	; 0x30
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8005668:	2300      	movs	r3, #0
 800566a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800566e:	4b2e      	ldr	r3, [pc, #184]	; (8005728 <HAL_InitTick+0xc8>)
 8005670:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005672:	4a2d      	ldr	r2, [pc, #180]	; (8005728 <HAL_InitTick+0xc8>)
 8005674:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005678:	6613      	str	r3, [r2, #96]	; 0x60
 800567a:	4b2b      	ldr	r3, [pc, #172]	; (8005728 <HAL_InitTick+0xc8>)
 800567c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800567e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005682:	60bb      	str	r3, [r7, #8]
 8005684:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005686:	f107 020c 	add.w	r2, r7, #12
 800568a:	f107 0310 	add.w	r3, r7, #16
 800568e:	4611      	mov	r1, r2
 8005690:	4618      	mov	r0, r3
 8005692:	f002 fb81 	bl	8007d98 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8005696:	f002 fb69 	bl	8007d6c <HAL_RCC_GetPCLK2Freq>
 800569a:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800569c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800569e:	4a23      	ldr	r2, [pc, #140]	; (800572c <HAL_InitTick+0xcc>)
 80056a0:	fba2 2303 	umull	r2, r3, r2, r3
 80056a4:	0c9b      	lsrs	r3, r3, #18
 80056a6:	3b01      	subs	r3, #1
 80056a8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80056aa:	4b21      	ldr	r3, [pc, #132]	; (8005730 <HAL_InitTick+0xd0>)
 80056ac:	4a21      	ldr	r2, [pc, #132]	; (8005734 <HAL_InitTick+0xd4>)
 80056ae:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80056b0:	4b1f      	ldr	r3, [pc, #124]	; (8005730 <HAL_InitTick+0xd0>)
 80056b2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80056b6:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80056b8:	4a1d      	ldr	r2, [pc, #116]	; (8005730 <HAL_InitTick+0xd0>)
 80056ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056bc:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80056be:	4b1c      	ldr	r3, [pc, #112]	; (8005730 <HAL_InitTick+0xd0>)
 80056c0:	2200      	movs	r2, #0
 80056c2:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80056c4:	4b1a      	ldr	r3, [pc, #104]	; (8005730 <HAL_InitTick+0xd0>)
 80056c6:	2200      	movs	r2, #0
 80056c8:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80056ca:	4b19      	ldr	r3, [pc, #100]	; (8005730 <HAL_InitTick+0xd0>)
 80056cc:	2200      	movs	r2, #0
 80056ce:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80056d0:	4817      	ldr	r0, [pc, #92]	; (8005730 <HAL_InitTick+0xd0>)
 80056d2:	f003 f96b 	bl	80089ac <HAL_TIM_Base_Init>
 80056d6:	4603      	mov	r3, r0
 80056d8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80056dc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d11b      	bne.n	800571c <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80056e4:	4812      	ldr	r0, [pc, #72]	; (8005730 <HAL_InitTick+0xd0>)
 80056e6:	f003 f9c3 	bl	8008a70 <HAL_TIM_Base_Start_IT>
 80056ea:	4603      	mov	r3, r0
 80056ec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80056f0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d111      	bne.n	800571c <HAL_InitTick+0xbc>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80056f8:	2019      	movs	r0, #25
 80056fa:	f000 fb73 	bl	8005de4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2b0f      	cmp	r3, #15
 8005702:	d808      	bhi.n	8005716 <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8005704:	2200      	movs	r2, #0
 8005706:	6879      	ldr	r1, [r7, #4]
 8005708:	2019      	movs	r0, #25
 800570a:	f000 fb4f 	bl	8005dac <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800570e:	4a0a      	ldr	r2, [pc, #40]	; (8005738 <HAL_InitTick+0xd8>)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6013      	str	r3, [r2, #0]
 8005714:	e002      	b.n	800571c <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 8005716:	2301      	movs	r3, #1
 8005718:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800571c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8005720:	4618      	mov	r0, r3
 8005722:	3730      	adds	r7, #48	; 0x30
 8005724:	46bd      	mov	sp, r7
 8005726:	bd80      	pop	{r7, pc}
 8005728:	40021000 	.word	0x40021000
 800572c:	431bde83 	.word	0x431bde83
 8005730:	200003d8 	.word	0x200003d8
 8005734:	40012c00 	.word	0x40012c00
 8005738:	20000014 	.word	0x20000014

0800573c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800573c:	b480      	push	{r7}
 800573e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005740:	e7fe      	b.n	8005740 <NMI_Handler+0x4>

08005742 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005742:	b480      	push	{r7}
 8005744:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005746:	e7fe      	b.n	8005746 <HardFault_Handler+0x4>

08005748 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005748:	b480      	push	{r7}
 800574a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800574c:	e7fe      	b.n	800574c <MemManage_Handler+0x4>

0800574e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800574e:	b480      	push	{r7}
 8005750:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005752:	e7fe      	b.n	8005752 <BusFault_Handler+0x4>

08005754 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005754:	b480      	push	{r7}
 8005756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005758:	e7fe      	b.n	8005758 <UsageFault_Handler+0x4>

0800575a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800575a:	b480      	push	{r7}
 800575c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800575e:	bf00      	nop
 8005760:	46bd      	mov	sp, r7
 8005762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005766:	4770      	bx	lr

08005768 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 800576c:	2020      	movs	r0, #32
 800576e:	f000 fd0b 	bl	8006188 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 8005772:	2040      	movs	r0, #64	; 0x40
 8005774:	f000 fd08 	bl	8006188 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8005778:	2080      	movs	r0, #128	; 0x80
 800577a:	f000 fd05 	bl	8006188 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 800577e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8005782:	f000 fd01 	bl	8006188 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8005786:	bf00      	nop
 8005788:	bd80      	pop	{r7, pc}
	...

0800578c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005790:	4802      	ldr	r0, [pc, #8]	; (800579c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8005792:	f003 f9dd 	bl	8008b50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8005796:	bf00      	nop
 8005798:	bd80      	pop	{r7, pc}
 800579a:	bf00      	nop
 800579c:	200003d8 	.word	0x200003d8

080057a0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80057a4:	4802      	ldr	r0, [pc, #8]	; (80057b0 <I2C1_EV_IRQHandler+0x10>)
 80057a6:	f001 f8c3 	bl	8006930 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80057aa:	bf00      	nop
 80057ac:	bd80      	pop	{r7, pc}
 80057ae:	bf00      	nop
 80057b0:	20000290 	.word	0x20000290

080057b4 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 80057b8:	4802      	ldr	r0, [pc, #8]	; (80057c4 <I2C2_EV_IRQHandler+0x10>)
 80057ba:	f001 f8b9 	bl	8006930 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 80057be:	bf00      	nop
 80057c0:	bd80      	pop	{r7, pc}
 80057c2:	bf00      	nop
 80057c4:	20000364 	.word	0x20000364

080057c8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI10_Pin);
 80057cc:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80057d0:	f000 fcda 	bl	8006188 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 80057d4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80057d8:	f000 fcd6 	bl	8006188 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(USB_OTG_FS_PWR_EN_Pin);
 80057dc:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80057e0:	f000 fcd2 	bl	8006188 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 80057e4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80057e8:	f000 fcce 	bl	8006188 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 80057ec:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80057f0:	f000 fcca 	bl	8006188 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 80057f4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80057f8:	f000 fcc6 	bl	8006188 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80057fc:	bf00      	nop
 80057fe:	bd80      	pop	{r7, pc}

08005800 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005800:	b480      	push	{r7}
 8005802:	af00      	add	r7, sp, #0
  return 1;
 8005804:	2301      	movs	r3, #1
}
 8005806:	4618      	mov	r0, r3
 8005808:	46bd      	mov	sp, r7
 800580a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580e:	4770      	bx	lr

08005810 <_kill>:

int _kill(int pid, int sig)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b082      	sub	sp, #8
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
 8005818:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800581a:	f007 fda7 	bl	800d36c <__errno>
 800581e:	4603      	mov	r3, r0
 8005820:	2216      	movs	r2, #22
 8005822:	601a      	str	r2, [r3, #0]
  return -1;
 8005824:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005828:	4618      	mov	r0, r3
 800582a:	3708      	adds	r7, #8
 800582c:	46bd      	mov	sp, r7
 800582e:	bd80      	pop	{r7, pc}

08005830 <_exit>:

void _exit (int status)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b082      	sub	sp, #8
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8005838:	f04f 31ff 	mov.w	r1, #4294967295
 800583c:	6878      	ldr	r0, [r7, #4]
 800583e:	f7ff ffe7 	bl	8005810 <_kill>
  while (1) {}    /* Make sure we hang here */
 8005842:	e7fe      	b.n	8005842 <_exit+0x12>

08005844 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b086      	sub	sp, #24
 8005848:	af00      	add	r7, sp, #0
 800584a:	60f8      	str	r0, [r7, #12]
 800584c:	60b9      	str	r1, [r7, #8]
 800584e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005850:	2300      	movs	r3, #0
 8005852:	617b      	str	r3, [r7, #20]
 8005854:	e00a      	b.n	800586c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8005856:	f3af 8000 	nop.w
 800585a:	4601      	mov	r1, r0
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	1c5a      	adds	r2, r3, #1
 8005860:	60ba      	str	r2, [r7, #8]
 8005862:	b2ca      	uxtb	r2, r1
 8005864:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	3301      	adds	r3, #1
 800586a:	617b      	str	r3, [r7, #20]
 800586c:	697a      	ldr	r2, [r7, #20]
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	429a      	cmp	r2, r3
 8005872:	dbf0      	blt.n	8005856 <_read+0x12>
  }

  return len;
 8005874:	687b      	ldr	r3, [r7, #4]
}
 8005876:	4618      	mov	r0, r3
 8005878:	3718      	adds	r7, #24
 800587a:	46bd      	mov	sp, r7
 800587c:	bd80      	pop	{r7, pc}

0800587e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800587e:	b580      	push	{r7, lr}
 8005880:	b086      	sub	sp, #24
 8005882:	af00      	add	r7, sp, #0
 8005884:	60f8      	str	r0, [r7, #12]
 8005886:	60b9      	str	r1, [r7, #8]
 8005888:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800588a:	2300      	movs	r3, #0
 800588c:	617b      	str	r3, [r7, #20]
 800588e:	e009      	b.n	80058a4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	1c5a      	adds	r2, r3, #1
 8005894:	60ba      	str	r2, [r7, #8]
 8005896:	781b      	ldrb	r3, [r3, #0]
 8005898:	4618      	mov	r0, r3
 800589a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800589e:	697b      	ldr	r3, [r7, #20]
 80058a0:	3301      	adds	r3, #1
 80058a2:	617b      	str	r3, [r7, #20]
 80058a4:	697a      	ldr	r2, [r7, #20]
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	429a      	cmp	r2, r3
 80058aa:	dbf1      	blt.n	8005890 <_write+0x12>
  }
  return len;
 80058ac:	687b      	ldr	r3, [r7, #4]
}
 80058ae:	4618      	mov	r0, r3
 80058b0:	3718      	adds	r7, #24
 80058b2:	46bd      	mov	sp, r7
 80058b4:	bd80      	pop	{r7, pc}

080058b6 <_close>:

int _close(int file)
{
 80058b6:	b480      	push	{r7}
 80058b8:	b083      	sub	sp, #12
 80058ba:	af00      	add	r7, sp, #0
 80058bc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80058be:	f04f 33ff 	mov.w	r3, #4294967295
}
 80058c2:	4618      	mov	r0, r3
 80058c4:	370c      	adds	r7, #12
 80058c6:	46bd      	mov	sp, r7
 80058c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058cc:	4770      	bx	lr

080058ce <_fstat>:


int _fstat(int file, struct stat *st)
{
 80058ce:	b480      	push	{r7}
 80058d0:	b083      	sub	sp, #12
 80058d2:	af00      	add	r7, sp, #0
 80058d4:	6078      	str	r0, [r7, #4]
 80058d6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80058de:	605a      	str	r2, [r3, #4]
  return 0;
 80058e0:	2300      	movs	r3, #0
}
 80058e2:	4618      	mov	r0, r3
 80058e4:	370c      	adds	r7, #12
 80058e6:	46bd      	mov	sp, r7
 80058e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ec:	4770      	bx	lr

080058ee <_isatty>:

int _isatty(int file)
{
 80058ee:	b480      	push	{r7}
 80058f0:	b083      	sub	sp, #12
 80058f2:	af00      	add	r7, sp, #0
 80058f4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80058f6:	2301      	movs	r3, #1
}
 80058f8:	4618      	mov	r0, r3
 80058fa:	370c      	adds	r7, #12
 80058fc:	46bd      	mov	sp, r7
 80058fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005902:	4770      	bx	lr

08005904 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005904:	b480      	push	{r7}
 8005906:	b085      	sub	sp, #20
 8005908:	af00      	add	r7, sp, #0
 800590a:	60f8      	str	r0, [r7, #12]
 800590c:	60b9      	str	r1, [r7, #8]
 800590e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8005910:	2300      	movs	r3, #0
}
 8005912:	4618      	mov	r0, r3
 8005914:	3714      	adds	r7, #20
 8005916:	46bd      	mov	sp, r7
 8005918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591c:	4770      	bx	lr
	...

08005920 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b086      	sub	sp, #24
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005928:	4a14      	ldr	r2, [pc, #80]	; (800597c <_sbrk+0x5c>)
 800592a:	4b15      	ldr	r3, [pc, #84]	; (8005980 <_sbrk+0x60>)
 800592c:	1ad3      	subs	r3, r2, r3
 800592e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005930:	697b      	ldr	r3, [r7, #20]
 8005932:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005934:	4b13      	ldr	r3, [pc, #76]	; (8005984 <_sbrk+0x64>)
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d102      	bne.n	8005942 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800593c:	4b11      	ldr	r3, [pc, #68]	; (8005984 <_sbrk+0x64>)
 800593e:	4a12      	ldr	r2, [pc, #72]	; (8005988 <_sbrk+0x68>)
 8005940:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005942:	4b10      	ldr	r3, [pc, #64]	; (8005984 <_sbrk+0x64>)
 8005944:	681a      	ldr	r2, [r3, #0]
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	4413      	add	r3, r2
 800594a:	693a      	ldr	r2, [r7, #16]
 800594c:	429a      	cmp	r2, r3
 800594e:	d207      	bcs.n	8005960 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005950:	f007 fd0c 	bl	800d36c <__errno>
 8005954:	4603      	mov	r3, r0
 8005956:	220c      	movs	r2, #12
 8005958:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800595a:	f04f 33ff 	mov.w	r3, #4294967295
 800595e:	e009      	b.n	8005974 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005960:	4b08      	ldr	r3, [pc, #32]	; (8005984 <_sbrk+0x64>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005966:	4b07      	ldr	r3, [pc, #28]	; (8005984 <_sbrk+0x64>)
 8005968:	681a      	ldr	r2, [r3, #0]
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	4413      	add	r3, r2
 800596e:	4a05      	ldr	r2, [pc, #20]	; (8005984 <_sbrk+0x64>)
 8005970:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005972:	68fb      	ldr	r3, [r7, #12]
}
 8005974:	4618      	mov	r0, r3
 8005976:	3718      	adds	r7, #24
 8005978:	46bd      	mov	sp, r7
 800597a:	bd80      	pop	{r7, pc}
 800597c:	200a0000 	.word	0x200a0000
 8005980:	00000400 	.word	0x00000400
 8005984:	20000424 	.word	0x20000424
 8005988:	200062b0 	.word	0x200062b0

0800598c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800598c:	b480      	push	{r7}
 800598e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8005990:	4b06      	ldr	r3, [pc, #24]	; (80059ac <SystemInit+0x20>)
 8005992:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005996:	4a05      	ldr	r2, [pc, #20]	; (80059ac <SystemInit+0x20>)
 8005998:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800599c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80059a0:	bf00      	nop
 80059a2:	46bd      	mov	sp, r7
 80059a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a8:	4770      	bx	lr
 80059aa:	bf00      	nop
 80059ac:	e000ed00 	.word	0xe000ed00

080059b0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	af00      	add	r7, sp, #0
  huart1.Instance = USART1;
 80059b4:	4b22      	ldr	r3, [pc, #136]	; (8005a40 <MX_USART1_UART_Init+0x90>)
 80059b6:	4a23      	ldr	r2, [pc, #140]	; (8005a44 <MX_USART1_UART_Init+0x94>)
 80059b8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 921600;
 80059ba:	4b21      	ldr	r3, [pc, #132]	; (8005a40 <MX_USART1_UART_Init+0x90>)
 80059bc:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 80059c0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80059c2:	4b1f      	ldr	r3, [pc, #124]	; (8005a40 <MX_USART1_UART_Init+0x90>)
 80059c4:	2200      	movs	r2, #0
 80059c6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80059c8:	4b1d      	ldr	r3, [pc, #116]	; (8005a40 <MX_USART1_UART_Init+0x90>)
 80059ca:	2200      	movs	r2, #0
 80059cc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80059ce:	4b1c      	ldr	r3, [pc, #112]	; (8005a40 <MX_USART1_UART_Init+0x90>)
 80059d0:	2200      	movs	r2, #0
 80059d2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80059d4:	4b1a      	ldr	r3, [pc, #104]	; (8005a40 <MX_USART1_UART_Init+0x90>)
 80059d6:	220c      	movs	r2, #12
 80059d8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80059da:	4b19      	ldr	r3, [pc, #100]	; (8005a40 <MX_USART1_UART_Init+0x90>)
 80059dc:	2200      	movs	r2, #0
 80059de:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80059e0:	4b17      	ldr	r3, [pc, #92]	; (8005a40 <MX_USART1_UART_Init+0x90>)
 80059e2:	2200      	movs	r2, #0
 80059e4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80059e6:	4b16      	ldr	r3, [pc, #88]	; (8005a40 <MX_USART1_UART_Init+0x90>)
 80059e8:	2200      	movs	r2, #0
 80059ea:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80059ec:	4b14      	ldr	r3, [pc, #80]	; (8005a40 <MX_USART1_UART_Init+0x90>)
 80059ee:	2200      	movs	r2, #0
 80059f0:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80059f2:	4b13      	ldr	r3, [pc, #76]	; (8005a40 <MX_USART1_UART_Init+0x90>)
 80059f4:	2200      	movs	r2, #0
 80059f6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80059f8:	4811      	ldr	r0, [pc, #68]	; (8005a40 <MX_USART1_UART_Init+0x90>)
 80059fa:	f003 faa9 	bl	8008f50 <HAL_UART_Init>
 80059fe:	4603      	mov	r3, r0
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d001      	beq.n	8005a08 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8005a04:	f000 f872 	bl	8005aec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005a08:	2100      	movs	r1, #0
 8005a0a:	480d      	ldr	r0, [pc, #52]	; (8005a40 <MX_USART1_UART_Init+0x90>)
 8005a0c:	f004 f872 	bl	8009af4 <HAL_UARTEx_SetTxFifoThreshold>
 8005a10:	4603      	mov	r3, r0
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d001      	beq.n	8005a1a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8005a16:	f000 f869 	bl	8005aec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005a1a:	2100      	movs	r1, #0
 8005a1c:	4808      	ldr	r0, [pc, #32]	; (8005a40 <MX_USART1_UART_Init+0x90>)
 8005a1e:	f004 f8a7 	bl	8009b70 <HAL_UARTEx_SetRxFifoThreshold>
 8005a22:	4603      	mov	r3, r0
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d001      	beq.n	8005a2c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8005a28:	f000 f860 	bl	8005aec <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8005a2c:	4804      	ldr	r0, [pc, #16]	; (8005a40 <MX_USART1_UART_Init+0x90>)
 8005a2e:	f004 f828 	bl	8009a82 <HAL_UARTEx_DisableFifoMode>
 8005a32:	4603      	mov	r3, r0
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d001      	beq.n	8005a3c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8005a38:	f000 f858 	bl	8005aec <Error_Handler>
  }

}
 8005a3c:	bf00      	nop
 8005a3e:	bd80      	pop	{r7, pc}
 8005a40:	20000428 	.word	0x20000428
 8005a44:	40013800 	.word	0x40013800

08005a48 <MX_UART4_Init>:

void MX_UART4_Init(void)
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	af00      	add	r7, sp, #0

  huart4.Instance = UART4;
 8005a4c:	4b24      	ldr	r3, [pc, #144]	; (8005ae0 <MX_UART4_Init+0x98>)
 8005a4e:	4a25      	ldr	r2, [pc, #148]	; (8005ae4 <MX_UART4_Init+0x9c>)
 8005a50:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 921600;
 8005a52:	4b23      	ldr	r3, [pc, #140]	; (8005ae0 <MX_UART4_Init+0x98>)
 8005a54:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8005a58:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8005a5a:	4b21      	ldr	r3, [pc, #132]	; (8005ae0 <MX_UART4_Init+0x98>)
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8005a60:	4b1f      	ldr	r3, [pc, #124]	; (8005ae0 <MX_UART4_Init+0x98>)
 8005a62:	2200      	movs	r2, #0
 8005a64:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8005a66:	4b1e      	ldr	r3, [pc, #120]	; (8005ae0 <MX_UART4_Init+0x98>)
 8005a68:	2200      	movs	r2, #0
 8005a6a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8005a6c:	4b1c      	ldr	r3, [pc, #112]	; (8005ae0 <MX_UART4_Init+0x98>)
 8005a6e:	220c      	movs	r2, #12
 8005a70:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005a72:	4b1b      	ldr	r3, [pc, #108]	; (8005ae0 <MX_UART4_Init+0x98>)
 8005a74:	2200      	movs	r2, #0
 8005a76:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8005a78:	4b19      	ldr	r3, [pc, #100]	; (8005ae0 <MX_UART4_Init+0x98>)
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005a7e:	4b18      	ldr	r3, [pc, #96]	; (8005ae0 <MX_UART4_Init+0x98>)
 8005a80:	2200      	movs	r2, #0
 8005a82:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005a84:	4b16      	ldr	r3, [pc, #88]	; (8005ae0 <MX_UART4_Init+0x98>)
 8005a86:	2200      	movs	r2, #0
 8005a88:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005a8a:	4b15      	ldr	r3, [pc, #84]	; (8005ae0 <MX_UART4_Init+0x98>)
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8005a90:	4813      	ldr	r0, [pc, #76]	; (8005ae0 <MX_UART4_Init+0x98>)
 8005a92:	f003 fa5d 	bl	8008f50 <HAL_UART_Init>
 8005a96:	4603      	mov	r3, r0
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d001      	beq.n	8005aa0 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8005a9c:	f000 f826 	bl	8005aec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005aa0:	2100      	movs	r1, #0
 8005aa2:	480f      	ldr	r0, [pc, #60]	; (8005ae0 <MX_UART4_Init+0x98>)
 8005aa4:	f004 f826 	bl	8009af4 <HAL_UARTEx_SetTxFifoThreshold>
 8005aa8:	4603      	mov	r3, r0
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d001      	beq.n	8005ab2 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8005aae:	f000 f81d 	bl	8005aec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005ab2:	2100      	movs	r1, #0
 8005ab4:	480a      	ldr	r0, [pc, #40]	; (8005ae0 <MX_UART4_Init+0x98>)
 8005ab6:	f004 f85b 	bl	8009b70 <HAL_UARTEx_SetRxFifoThreshold>
 8005aba:	4603      	mov	r3, r0
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d001      	beq.n	8005ac4 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8005ac0:	f000 f814 	bl	8005aec <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8005ac4:	4806      	ldr	r0, [pc, #24]	; (8005ae0 <MX_UART4_Init+0x98>)
 8005ac6:	f003 ffdc 	bl	8009a82 <HAL_UARTEx_DisableFifoMode>
 8005aca:	4603      	mov	r3, r0
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d001      	beq.n	8005ad4 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8005ad0:	f000 f80c 	bl	8005aec <Error_Handler>
  }
  uart_write_debug("UART4 initialized\r\n", 10);
 8005ad4:	210a      	movs	r1, #10
 8005ad6:	4804      	ldr	r0, [pc, #16]	; (8005ae8 <MX_UART4_Init+0xa0>)
 8005ad8:	f000 f812 	bl	8005b00 <uart_write_debug>

}
 8005adc:	bf00      	nop
 8005ade:	bd80      	pop	{r7, pc}
 8005ae0:	200004b8 	.word	0x200004b8
 8005ae4:	40004c00 	.word	0x40004c00
 8005ae8:	08011a70 	.word	0x08011a70

08005aec <Error_Handler>:

void Error_Handler(void){
 8005aec:	b580      	push	{r7, lr}
 8005aee:	af00      	add	r7, sp, #0
	uart_write_debug("Failed to Init UART4\r\n", 10);
 8005af0:	210a      	movs	r1, #10
 8005af2:	4802      	ldr	r0, [pc, #8]	; (8005afc <Error_Handler+0x10>)
 8005af4:	f000 f804 	bl	8005b00 <uart_write_debug>
}
 8005af8:	bf00      	nop
 8005afa:	bd80      	pop	{r7, pc}
 8005afc:	08011a84 	.word	0x08011a84

08005b00 <uart_write_debug>:





HAL_StatusTypeDef uart_write_debug(uint8_t *pData, uint32_t Timeout){
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b084      	sub	sp, #16
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
 8005b08:	6039      	str	r1, [r7, #0]
	uint8_t i=0;
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	73fb      	strb	r3, [r7, #15]
	uint8_t *temp;
	return HAL_UART_Transmit(&huart1,pData,strlen(pData),Timeout);// Sending in normal mode
 8005b0e:	6878      	ldr	r0, [r7, #4]
 8005b10:	f7fa fb76 	bl	8000200 <strlen>
 8005b14:	4603      	mov	r3, r0
 8005b16:	b29a      	uxth	r2, r3
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	6879      	ldr	r1, [r7, #4]
 8005b1c:	4803      	ldr	r0, [pc, #12]	; (8005b2c <uart_write_debug+0x2c>)
 8005b1e:	f003 fa67 	bl	8008ff0 <HAL_UART_Transmit>
 8005b22:	4603      	mov	r3, r0
}
 8005b24:	4618      	mov	r0, r3
 8005b26:	3710      	adds	r7, #16
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	bd80      	pop	{r7, pc}
 8005b2c:	20000428 	.word	0x20000428

08005b30 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8005b30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005b68 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8005b34:	f7ff ff2a 	bl	800598c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005b38:	480c      	ldr	r0, [pc, #48]	; (8005b6c <LoopForever+0x6>)
  ldr r1, =_edata
 8005b3a:	490d      	ldr	r1, [pc, #52]	; (8005b70 <LoopForever+0xa>)
  ldr r2, =_sidata
 8005b3c:	4a0d      	ldr	r2, [pc, #52]	; (8005b74 <LoopForever+0xe>)
  movs r3, #0
 8005b3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005b40:	e002      	b.n	8005b48 <LoopCopyDataInit>

08005b42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005b42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005b44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005b46:	3304      	adds	r3, #4

08005b48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005b48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005b4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005b4c:	d3f9      	bcc.n	8005b42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005b4e:	4a0a      	ldr	r2, [pc, #40]	; (8005b78 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005b50:	4c0a      	ldr	r4, [pc, #40]	; (8005b7c <LoopForever+0x16>)
  movs r3, #0
 8005b52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005b54:	e001      	b.n	8005b5a <LoopFillZerobss>

08005b56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005b56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005b58:	3204      	adds	r2, #4

08005b5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005b5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005b5c:	d3fb      	bcc.n	8005b56 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005b5e:	f007 fc0b 	bl	800d378 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005b62:	f7fe ffab 	bl	8004abc <main>

08005b66 <LoopForever>:

LoopForever:
    b LoopForever
 8005b66:	e7fe      	b.n	8005b66 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8005b68:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8005b6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005b70:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8005b74:	080124cc 	.word	0x080124cc
  ldr r2, =_sbss
 8005b78:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8005b7c:	200062ac 	.word	0x200062ac

08005b80 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005b80:	e7fe      	b.n	8005b80 <ADC1_IRQHandler>

08005b82 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005b82:	b580      	push	{r7, lr}
 8005b84:	b082      	sub	sp, #8
 8005b86:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005b88:	2300      	movs	r3, #0
 8005b8a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005b8c:	2003      	movs	r0, #3
 8005b8e:	f000 f902 	bl	8005d96 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005b92:	200f      	movs	r0, #15
 8005b94:	f7ff fd64 	bl	8005660 <HAL_InitTick>
 8005b98:	4603      	mov	r3, r0
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d002      	beq.n	8005ba4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8005b9e:	2301      	movs	r3, #1
 8005ba0:	71fb      	strb	r3, [r7, #7]
 8005ba2:	e001      	b.n	8005ba8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005ba4:	f7ff fb58 	bl	8005258 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005ba8:	79fb      	ldrb	r3, [r7, #7]
}
 8005baa:	4618      	mov	r0, r3
 8005bac:	3708      	adds	r7, #8
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	bd80      	pop	{r7, pc}
	...

08005bb4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005bb4:	b480      	push	{r7}
 8005bb6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005bb8:	4b06      	ldr	r3, [pc, #24]	; (8005bd4 <HAL_IncTick+0x20>)
 8005bba:	781b      	ldrb	r3, [r3, #0]
 8005bbc:	461a      	mov	r2, r3
 8005bbe:	4b06      	ldr	r3, [pc, #24]	; (8005bd8 <HAL_IncTick+0x24>)
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	4413      	add	r3, r2
 8005bc4:	4a04      	ldr	r2, [pc, #16]	; (8005bd8 <HAL_IncTick+0x24>)
 8005bc6:	6013      	str	r3, [r2, #0]
}
 8005bc8:	bf00      	nop
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd0:	4770      	bx	lr
 8005bd2:	bf00      	nop
 8005bd4:	20000018 	.word	0x20000018
 8005bd8:	20000548 	.word	0x20000548

08005bdc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005bdc:	b480      	push	{r7}
 8005bde:	af00      	add	r7, sp, #0
  return uwTick;
 8005be0:	4b03      	ldr	r3, [pc, #12]	; (8005bf0 <HAL_GetTick+0x14>)
 8005be2:	681b      	ldr	r3, [r3, #0]
}
 8005be4:	4618      	mov	r0, r3
 8005be6:	46bd      	mov	sp, r7
 8005be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bec:	4770      	bx	lr
 8005bee:	bf00      	nop
 8005bf0:	20000548 	.word	0x20000548

08005bf4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b084      	sub	sp, #16
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005bfc:	f7ff ffee 	bl	8005bdc <HAL_GetTick>
 8005c00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c0c:	d005      	beq.n	8005c1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8005c0e:	4b0a      	ldr	r3, [pc, #40]	; (8005c38 <HAL_Delay+0x44>)
 8005c10:	781b      	ldrb	r3, [r3, #0]
 8005c12:	461a      	mov	r2, r3
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	4413      	add	r3, r2
 8005c18:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005c1a:	bf00      	nop
 8005c1c:	f7ff ffde 	bl	8005bdc <HAL_GetTick>
 8005c20:	4602      	mov	r2, r0
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	1ad3      	subs	r3, r2, r3
 8005c26:	68fa      	ldr	r2, [r7, #12]
 8005c28:	429a      	cmp	r2, r3
 8005c2a:	d8f7      	bhi.n	8005c1c <HAL_Delay+0x28>
  {
  }
}
 8005c2c:	bf00      	nop
 8005c2e:	bf00      	nop
 8005c30:	3710      	adds	r7, #16
 8005c32:	46bd      	mov	sp, r7
 8005c34:	bd80      	pop	{r7, pc}
 8005c36:	bf00      	nop
 8005c38:	20000018 	.word	0x20000018

08005c3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	b085      	sub	sp, #20
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	f003 0307 	and.w	r3, r3, #7
 8005c4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005c4c:	4b0c      	ldr	r3, [pc, #48]	; (8005c80 <__NVIC_SetPriorityGrouping+0x44>)
 8005c4e:	68db      	ldr	r3, [r3, #12]
 8005c50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005c52:	68ba      	ldr	r2, [r7, #8]
 8005c54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005c58:	4013      	ands	r3, r2
 8005c5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005c64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005c68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005c6e:	4a04      	ldr	r2, [pc, #16]	; (8005c80 <__NVIC_SetPriorityGrouping+0x44>)
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	60d3      	str	r3, [r2, #12]
}
 8005c74:	bf00      	nop
 8005c76:	3714      	adds	r7, #20
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7e:	4770      	bx	lr
 8005c80:	e000ed00 	.word	0xe000ed00

08005c84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005c84:	b480      	push	{r7}
 8005c86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005c88:	4b04      	ldr	r3, [pc, #16]	; (8005c9c <__NVIC_GetPriorityGrouping+0x18>)
 8005c8a:	68db      	ldr	r3, [r3, #12]
 8005c8c:	0a1b      	lsrs	r3, r3, #8
 8005c8e:	f003 0307 	and.w	r3, r3, #7
}
 8005c92:	4618      	mov	r0, r3
 8005c94:	46bd      	mov	sp, r7
 8005c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9a:	4770      	bx	lr
 8005c9c:	e000ed00 	.word	0xe000ed00

08005ca0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005ca0:	b480      	push	{r7}
 8005ca2:	b083      	sub	sp, #12
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	4603      	mov	r3, r0
 8005ca8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	db0b      	blt.n	8005cca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005cb2:	79fb      	ldrb	r3, [r7, #7]
 8005cb4:	f003 021f 	and.w	r2, r3, #31
 8005cb8:	4907      	ldr	r1, [pc, #28]	; (8005cd8 <__NVIC_EnableIRQ+0x38>)
 8005cba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005cbe:	095b      	lsrs	r3, r3, #5
 8005cc0:	2001      	movs	r0, #1
 8005cc2:	fa00 f202 	lsl.w	r2, r0, r2
 8005cc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005cca:	bf00      	nop
 8005ccc:	370c      	adds	r7, #12
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd4:	4770      	bx	lr
 8005cd6:	bf00      	nop
 8005cd8:	e000e100 	.word	0xe000e100

08005cdc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005cdc:	b480      	push	{r7}
 8005cde:	b083      	sub	sp, #12
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	4603      	mov	r3, r0
 8005ce4:	6039      	str	r1, [r7, #0]
 8005ce6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005ce8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	db0a      	blt.n	8005d06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	b2da      	uxtb	r2, r3
 8005cf4:	490c      	ldr	r1, [pc, #48]	; (8005d28 <__NVIC_SetPriority+0x4c>)
 8005cf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005cfa:	0112      	lsls	r2, r2, #4
 8005cfc:	b2d2      	uxtb	r2, r2
 8005cfe:	440b      	add	r3, r1
 8005d00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005d04:	e00a      	b.n	8005d1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	b2da      	uxtb	r2, r3
 8005d0a:	4908      	ldr	r1, [pc, #32]	; (8005d2c <__NVIC_SetPriority+0x50>)
 8005d0c:	79fb      	ldrb	r3, [r7, #7]
 8005d0e:	f003 030f 	and.w	r3, r3, #15
 8005d12:	3b04      	subs	r3, #4
 8005d14:	0112      	lsls	r2, r2, #4
 8005d16:	b2d2      	uxtb	r2, r2
 8005d18:	440b      	add	r3, r1
 8005d1a:	761a      	strb	r2, [r3, #24]
}
 8005d1c:	bf00      	nop
 8005d1e:	370c      	adds	r7, #12
 8005d20:	46bd      	mov	sp, r7
 8005d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d26:	4770      	bx	lr
 8005d28:	e000e100 	.word	0xe000e100
 8005d2c:	e000ed00 	.word	0xe000ed00

08005d30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005d30:	b480      	push	{r7}
 8005d32:	b089      	sub	sp, #36	; 0x24
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	60f8      	str	r0, [r7, #12]
 8005d38:	60b9      	str	r1, [r7, #8]
 8005d3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	f003 0307 	and.w	r3, r3, #7
 8005d42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005d44:	69fb      	ldr	r3, [r7, #28]
 8005d46:	f1c3 0307 	rsb	r3, r3, #7
 8005d4a:	2b04      	cmp	r3, #4
 8005d4c:	bf28      	it	cs
 8005d4e:	2304      	movcs	r3, #4
 8005d50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005d52:	69fb      	ldr	r3, [r7, #28]
 8005d54:	3304      	adds	r3, #4
 8005d56:	2b06      	cmp	r3, #6
 8005d58:	d902      	bls.n	8005d60 <NVIC_EncodePriority+0x30>
 8005d5a:	69fb      	ldr	r3, [r7, #28]
 8005d5c:	3b03      	subs	r3, #3
 8005d5e:	e000      	b.n	8005d62 <NVIC_EncodePriority+0x32>
 8005d60:	2300      	movs	r3, #0
 8005d62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005d64:	f04f 32ff 	mov.w	r2, #4294967295
 8005d68:	69bb      	ldr	r3, [r7, #24]
 8005d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d6e:	43da      	mvns	r2, r3
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	401a      	ands	r2, r3
 8005d74:	697b      	ldr	r3, [r7, #20]
 8005d76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005d78:	f04f 31ff 	mov.w	r1, #4294967295
 8005d7c:	697b      	ldr	r3, [r7, #20]
 8005d7e:	fa01 f303 	lsl.w	r3, r1, r3
 8005d82:	43d9      	mvns	r1, r3
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005d88:	4313      	orrs	r3, r2
         );
}
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	3724      	adds	r7, #36	; 0x24
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d94:	4770      	bx	lr

08005d96 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005d96:	b580      	push	{r7, lr}
 8005d98:	b082      	sub	sp, #8
 8005d9a:	af00      	add	r7, sp, #0
 8005d9c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	f7ff ff4c 	bl	8005c3c <__NVIC_SetPriorityGrouping>
}
 8005da4:	bf00      	nop
 8005da6:	3708      	adds	r7, #8
 8005da8:	46bd      	mov	sp, r7
 8005daa:	bd80      	pop	{r7, pc}

08005dac <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b086      	sub	sp, #24
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	4603      	mov	r3, r0
 8005db4:	60b9      	str	r1, [r7, #8]
 8005db6:	607a      	str	r2, [r7, #4]
 8005db8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005dba:	2300      	movs	r3, #0
 8005dbc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005dbe:	f7ff ff61 	bl	8005c84 <__NVIC_GetPriorityGrouping>
 8005dc2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005dc4:	687a      	ldr	r2, [r7, #4]
 8005dc6:	68b9      	ldr	r1, [r7, #8]
 8005dc8:	6978      	ldr	r0, [r7, #20]
 8005dca:	f7ff ffb1 	bl	8005d30 <NVIC_EncodePriority>
 8005dce:	4602      	mov	r2, r0
 8005dd0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005dd4:	4611      	mov	r1, r2
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	f7ff ff80 	bl	8005cdc <__NVIC_SetPriority>
}
 8005ddc:	bf00      	nop
 8005dde:	3718      	adds	r7, #24
 8005de0:	46bd      	mov	sp, r7
 8005de2:	bd80      	pop	{r7, pc}

08005de4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b082      	sub	sp, #8
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	4603      	mov	r3, r0
 8005dec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005dee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005df2:	4618      	mov	r0, r3
 8005df4:	f7ff ff54 	bl	8005ca0 <__NVIC_EnableIRQ>
}
 8005df8:	bf00      	nop
 8005dfa:	3708      	adds	r7, #8
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	bd80      	pop	{r7, pc}

08005e00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005e00:	b480      	push	{r7}
 8005e02:	b087      	sub	sp, #28
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
 8005e08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005e0e:	e166      	b.n	80060de <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	681a      	ldr	r2, [r3, #0]
 8005e14:	2101      	movs	r1, #1
 8005e16:	697b      	ldr	r3, [r7, #20]
 8005e18:	fa01 f303 	lsl.w	r3, r1, r3
 8005e1c:	4013      	ands	r3, r2
 8005e1e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	f000 8158 	beq.w	80060d8 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	685b      	ldr	r3, [r3, #4]
 8005e2c:	f003 0303 	and.w	r3, r3, #3
 8005e30:	2b01      	cmp	r3, #1
 8005e32:	d005      	beq.n	8005e40 <HAL_GPIO_Init+0x40>
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	685b      	ldr	r3, [r3, #4]
 8005e38:	f003 0303 	and.w	r3, r3, #3
 8005e3c:	2b02      	cmp	r3, #2
 8005e3e:	d130      	bne.n	8005ea2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	689b      	ldr	r3, [r3, #8]
 8005e44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005e46:	697b      	ldr	r3, [r7, #20]
 8005e48:	005b      	lsls	r3, r3, #1
 8005e4a:	2203      	movs	r2, #3
 8005e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e50:	43db      	mvns	r3, r3
 8005e52:	693a      	ldr	r2, [r7, #16]
 8005e54:	4013      	ands	r3, r2
 8005e56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	68da      	ldr	r2, [r3, #12]
 8005e5c:	697b      	ldr	r3, [r7, #20]
 8005e5e:	005b      	lsls	r3, r3, #1
 8005e60:	fa02 f303 	lsl.w	r3, r2, r3
 8005e64:	693a      	ldr	r2, [r7, #16]
 8005e66:	4313      	orrs	r3, r2
 8005e68:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	693a      	ldr	r2, [r7, #16]
 8005e6e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	685b      	ldr	r3, [r3, #4]
 8005e74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005e76:	2201      	movs	r2, #1
 8005e78:	697b      	ldr	r3, [r7, #20]
 8005e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e7e:	43db      	mvns	r3, r3
 8005e80:	693a      	ldr	r2, [r7, #16]
 8005e82:	4013      	ands	r3, r2
 8005e84:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	685b      	ldr	r3, [r3, #4]
 8005e8a:	091b      	lsrs	r3, r3, #4
 8005e8c:	f003 0201 	and.w	r2, r3, #1
 8005e90:	697b      	ldr	r3, [r7, #20]
 8005e92:	fa02 f303 	lsl.w	r3, r2, r3
 8005e96:	693a      	ldr	r2, [r7, #16]
 8005e98:	4313      	orrs	r3, r2
 8005e9a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	693a      	ldr	r2, [r7, #16]
 8005ea0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	685b      	ldr	r3, [r3, #4]
 8005ea6:	f003 0303 	and.w	r3, r3, #3
 8005eaa:	2b03      	cmp	r3, #3
 8005eac:	d017      	beq.n	8005ede <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	68db      	ldr	r3, [r3, #12]
 8005eb2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005eb4:	697b      	ldr	r3, [r7, #20]
 8005eb6:	005b      	lsls	r3, r3, #1
 8005eb8:	2203      	movs	r2, #3
 8005eba:	fa02 f303 	lsl.w	r3, r2, r3
 8005ebe:	43db      	mvns	r3, r3
 8005ec0:	693a      	ldr	r2, [r7, #16]
 8005ec2:	4013      	ands	r3, r2
 8005ec4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	689a      	ldr	r2, [r3, #8]
 8005eca:	697b      	ldr	r3, [r7, #20]
 8005ecc:	005b      	lsls	r3, r3, #1
 8005ece:	fa02 f303 	lsl.w	r3, r2, r3
 8005ed2:	693a      	ldr	r2, [r7, #16]
 8005ed4:	4313      	orrs	r3, r2
 8005ed6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	693a      	ldr	r2, [r7, #16]
 8005edc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	685b      	ldr	r3, [r3, #4]
 8005ee2:	f003 0303 	and.w	r3, r3, #3
 8005ee6:	2b02      	cmp	r3, #2
 8005ee8:	d123      	bne.n	8005f32 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005eea:	697b      	ldr	r3, [r7, #20]
 8005eec:	08da      	lsrs	r2, r3, #3
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	3208      	adds	r2, #8
 8005ef2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ef6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005ef8:	697b      	ldr	r3, [r7, #20]
 8005efa:	f003 0307 	and.w	r3, r3, #7
 8005efe:	009b      	lsls	r3, r3, #2
 8005f00:	220f      	movs	r2, #15
 8005f02:	fa02 f303 	lsl.w	r3, r2, r3
 8005f06:	43db      	mvns	r3, r3
 8005f08:	693a      	ldr	r2, [r7, #16]
 8005f0a:	4013      	ands	r3, r2
 8005f0c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	691a      	ldr	r2, [r3, #16]
 8005f12:	697b      	ldr	r3, [r7, #20]
 8005f14:	f003 0307 	and.w	r3, r3, #7
 8005f18:	009b      	lsls	r3, r3, #2
 8005f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8005f1e:	693a      	ldr	r2, [r7, #16]
 8005f20:	4313      	orrs	r3, r2
 8005f22:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005f24:	697b      	ldr	r3, [r7, #20]
 8005f26:	08da      	lsrs	r2, r3, #3
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	3208      	adds	r2, #8
 8005f2c:	6939      	ldr	r1, [r7, #16]
 8005f2e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005f38:	697b      	ldr	r3, [r7, #20]
 8005f3a:	005b      	lsls	r3, r3, #1
 8005f3c:	2203      	movs	r2, #3
 8005f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8005f42:	43db      	mvns	r3, r3
 8005f44:	693a      	ldr	r2, [r7, #16]
 8005f46:	4013      	ands	r3, r2
 8005f48:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	685b      	ldr	r3, [r3, #4]
 8005f4e:	f003 0203 	and.w	r2, r3, #3
 8005f52:	697b      	ldr	r3, [r7, #20]
 8005f54:	005b      	lsls	r3, r3, #1
 8005f56:	fa02 f303 	lsl.w	r3, r2, r3
 8005f5a:	693a      	ldr	r2, [r7, #16]
 8005f5c:	4313      	orrs	r3, r2
 8005f5e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	693a      	ldr	r2, [r7, #16]
 8005f64:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	685b      	ldr	r3, [r3, #4]
 8005f6a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	f000 80b2 	beq.w	80060d8 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005f74:	4b61      	ldr	r3, [pc, #388]	; (80060fc <HAL_GPIO_Init+0x2fc>)
 8005f76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f78:	4a60      	ldr	r2, [pc, #384]	; (80060fc <HAL_GPIO_Init+0x2fc>)
 8005f7a:	f043 0301 	orr.w	r3, r3, #1
 8005f7e:	6613      	str	r3, [r2, #96]	; 0x60
 8005f80:	4b5e      	ldr	r3, [pc, #376]	; (80060fc <HAL_GPIO_Init+0x2fc>)
 8005f82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f84:	f003 0301 	and.w	r3, r3, #1
 8005f88:	60bb      	str	r3, [r7, #8]
 8005f8a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005f8c:	4a5c      	ldr	r2, [pc, #368]	; (8006100 <HAL_GPIO_Init+0x300>)
 8005f8e:	697b      	ldr	r3, [r7, #20]
 8005f90:	089b      	lsrs	r3, r3, #2
 8005f92:	3302      	adds	r3, #2
 8005f94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f98:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005f9a:	697b      	ldr	r3, [r7, #20]
 8005f9c:	f003 0303 	and.w	r3, r3, #3
 8005fa0:	009b      	lsls	r3, r3, #2
 8005fa2:	220f      	movs	r2, #15
 8005fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8005fa8:	43db      	mvns	r3, r3
 8005faa:	693a      	ldr	r2, [r7, #16]
 8005fac:	4013      	ands	r3, r2
 8005fae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005fb6:	d02b      	beq.n	8006010 <HAL_GPIO_Init+0x210>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	4a52      	ldr	r2, [pc, #328]	; (8006104 <HAL_GPIO_Init+0x304>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d025      	beq.n	800600c <HAL_GPIO_Init+0x20c>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	4a51      	ldr	r2, [pc, #324]	; (8006108 <HAL_GPIO_Init+0x308>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d01f      	beq.n	8006008 <HAL_GPIO_Init+0x208>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	4a50      	ldr	r2, [pc, #320]	; (800610c <HAL_GPIO_Init+0x30c>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d019      	beq.n	8006004 <HAL_GPIO_Init+0x204>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	4a4f      	ldr	r2, [pc, #316]	; (8006110 <HAL_GPIO_Init+0x310>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d013      	beq.n	8006000 <HAL_GPIO_Init+0x200>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	4a4e      	ldr	r2, [pc, #312]	; (8006114 <HAL_GPIO_Init+0x314>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d00d      	beq.n	8005ffc <HAL_GPIO_Init+0x1fc>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	4a4d      	ldr	r2, [pc, #308]	; (8006118 <HAL_GPIO_Init+0x318>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d007      	beq.n	8005ff8 <HAL_GPIO_Init+0x1f8>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	4a4c      	ldr	r2, [pc, #304]	; (800611c <HAL_GPIO_Init+0x31c>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d101      	bne.n	8005ff4 <HAL_GPIO_Init+0x1f4>
 8005ff0:	2307      	movs	r3, #7
 8005ff2:	e00e      	b.n	8006012 <HAL_GPIO_Init+0x212>
 8005ff4:	2308      	movs	r3, #8
 8005ff6:	e00c      	b.n	8006012 <HAL_GPIO_Init+0x212>
 8005ff8:	2306      	movs	r3, #6
 8005ffa:	e00a      	b.n	8006012 <HAL_GPIO_Init+0x212>
 8005ffc:	2305      	movs	r3, #5
 8005ffe:	e008      	b.n	8006012 <HAL_GPIO_Init+0x212>
 8006000:	2304      	movs	r3, #4
 8006002:	e006      	b.n	8006012 <HAL_GPIO_Init+0x212>
 8006004:	2303      	movs	r3, #3
 8006006:	e004      	b.n	8006012 <HAL_GPIO_Init+0x212>
 8006008:	2302      	movs	r3, #2
 800600a:	e002      	b.n	8006012 <HAL_GPIO_Init+0x212>
 800600c:	2301      	movs	r3, #1
 800600e:	e000      	b.n	8006012 <HAL_GPIO_Init+0x212>
 8006010:	2300      	movs	r3, #0
 8006012:	697a      	ldr	r2, [r7, #20]
 8006014:	f002 0203 	and.w	r2, r2, #3
 8006018:	0092      	lsls	r2, r2, #2
 800601a:	4093      	lsls	r3, r2
 800601c:	693a      	ldr	r2, [r7, #16]
 800601e:	4313      	orrs	r3, r2
 8006020:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8006022:	4937      	ldr	r1, [pc, #220]	; (8006100 <HAL_GPIO_Init+0x300>)
 8006024:	697b      	ldr	r3, [r7, #20]
 8006026:	089b      	lsrs	r3, r3, #2
 8006028:	3302      	adds	r3, #2
 800602a:	693a      	ldr	r2, [r7, #16]
 800602c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006030:	4b3b      	ldr	r3, [pc, #236]	; (8006120 <HAL_GPIO_Init+0x320>)
 8006032:	689b      	ldr	r3, [r3, #8]
 8006034:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	43db      	mvns	r3, r3
 800603a:	693a      	ldr	r2, [r7, #16]
 800603c:	4013      	ands	r3, r2
 800603e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	685b      	ldr	r3, [r3, #4]
 8006044:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006048:	2b00      	cmp	r3, #0
 800604a:	d003      	beq.n	8006054 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 800604c:	693a      	ldr	r2, [r7, #16]
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	4313      	orrs	r3, r2
 8006052:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006054:	4a32      	ldr	r2, [pc, #200]	; (8006120 <HAL_GPIO_Init+0x320>)
 8006056:	693b      	ldr	r3, [r7, #16]
 8006058:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800605a:	4b31      	ldr	r3, [pc, #196]	; (8006120 <HAL_GPIO_Init+0x320>)
 800605c:	68db      	ldr	r3, [r3, #12]
 800605e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	43db      	mvns	r3, r3
 8006064:	693a      	ldr	r2, [r7, #16]
 8006066:	4013      	ands	r3, r2
 8006068:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	685b      	ldr	r3, [r3, #4]
 800606e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006072:	2b00      	cmp	r3, #0
 8006074:	d003      	beq.n	800607e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8006076:	693a      	ldr	r2, [r7, #16]
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	4313      	orrs	r3, r2
 800607c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800607e:	4a28      	ldr	r2, [pc, #160]	; (8006120 <HAL_GPIO_Init+0x320>)
 8006080:	693b      	ldr	r3, [r7, #16]
 8006082:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8006084:	4b26      	ldr	r3, [pc, #152]	; (8006120 <HAL_GPIO_Init+0x320>)
 8006086:	685b      	ldr	r3, [r3, #4]
 8006088:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	43db      	mvns	r3, r3
 800608e:	693a      	ldr	r2, [r7, #16]
 8006090:	4013      	ands	r3, r2
 8006092:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	685b      	ldr	r3, [r3, #4]
 8006098:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800609c:	2b00      	cmp	r3, #0
 800609e:	d003      	beq.n	80060a8 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80060a0:	693a      	ldr	r2, [r7, #16]
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	4313      	orrs	r3, r2
 80060a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80060a8:	4a1d      	ldr	r2, [pc, #116]	; (8006120 <HAL_GPIO_Init+0x320>)
 80060aa:	693b      	ldr	r3, [r7, #16]
 80060ac:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80060ae:	4b1c      	ldr	r3, [pc, #112]	; (8006120 <HAL_GPIO_Init+0x320>)
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	43db      	mvns	r3, r3
 80060b8:	693a      	ldr	r2, [r7, #16]
 80060ba:	4013      	ands	r3, r2
 80060bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	685b      	ldr	r3, [r3, #4]
 80060c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d003      	beq.n	80060d2 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80060ca:	693a      	ldr	r2, [r7, #16]
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	4313      	orrs	r3, r2
 80060d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80060d2:	4a13      	ldr	r2, [pc, #76]	; (8006120 <HAL_GPIO_Init+0x320>)
 80060d4:	693b      	ldr	r3, [r7, #16]
 80060d6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80060d8:	697b      	ldr	r3, [r7, #20]
 80060da:	3301      	adds	r3, #1
 80060dc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	681a      	ldr	r2, [r3, #0]
 80060e2:	697b      	ldr	r3, [r7, #20]
 80060e4:	fa22 f303 	lsr.w	r3, r2, r3
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	f47f ae91 	bne.w	8005e10 <HAL_GPIO_Init+0x10>
  }
}
 80060ee:	bf00      	nop
 80060f0:	bf00      	nop
 80060f2:	371c      	adds	r7, #28
 80060f4:	46bd      	mov	sp, r7
 80060f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fa:	4770      	bx	lr
 80060fc:	40021000 	.word	0x40021000
 8006100:	40010000 	.word	0x40010000
 8006104:	48000400 	.word	0x48000400
 8006108:	48000800 	.word	0x48000800
 800610c:	48000c00 	.word	0x48000c00
 8006110:	48001000 	.word	0x48001000
 8006114:	48001400 	.word	0x48001400
 8006118:	48001800 	.word	0x48001800
 800611c:	48001c00 	.word	0x48001c00
 8006120:	40010400 	.word	0x40010400

08006124 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006124:	b480      	push	{r7}
 8006126:	b083      	sub	sp, #12
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
 800612c:	460b      	mov	r3, r1
 800612e:	807b      	strh	r3, [r7, #2]
 8006130:	4613      	mov	r3, r2
 8006132:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006134:	787b      	ldrb	r3, [r7, #1]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d003      	beq.n	8006142 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800613a:	887a      	ldrh	r2, [r7, #2]
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006140:	e002      	b.n	8006148 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006142:	887a      	ldrh	r2, [r7, #2]
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006148:	bf00      	nop
 800614a:	370c      	adds	r7, #12
 800614c:	46bd      	mov	sp, r7
 800614e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006152:	4770      	bx	lr

08006154 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006154:	b480      	push	{r7}
 8006156:	b085      	sub	sp, #20
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
 800615c:	460b      	mov	r3, r1
 800615e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	695b      	ldr	r3, [r3, #20]
 8006164:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006166:	887a      	ldrh	r2, [r7, #2]
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	4013      	ands	r3, r2
 800616c:	041a      	lsls	r2, r3, #16
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	43d9      	mvns	r1, r3
 8006172:	887b      	ldrh	r3, [r7, #2]
 8006174:	400b      	ands	r3, r1
 8006176:	431a      	orrs	r2, r3
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	619a      	str	r2, [r3, #24]
}
 800617c:	bf00      	nop
 800617e:	3714      	adds	r7, #20
 8006180:	46bd      	mov	sp, r7
 8006182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006186:	4770      	bx	lr

08006188 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b082      	sub	sp, #8
 800618c:	af00      	add	r7, sp, #0
 800618e:	4603      	mov	r3, r0
 8006190:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8006192:	4b08      	ldr	r3, [pc, #32]	; (80061b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006194:	695a      	ldr	r2, [r3, #20]
 8006196:	88fb      	ldrh	r3, [r7, #6]
 8006198:	4013      	ands	r3, r2
 800619a:	2b00      	cmp	r3, #0
 800619c:	d006      	beq.n	80061ac <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800619e:	4a05      	ldr	r2, [pc, #20]	; (80061b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80061a0:	88fb      	ldrh	r3, [r7, #6]
 80061a2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80061a4:	88fb      	ldrh	r3, [r7, #6]
 80061a6:	4618      	mov	r0, r3
 80061a8:	f000 f806 	bl	80061b8 <HAL_GPIO_EXTI_Callback>
  }
}
 80061ac:	bf00      	nop
 80061ae:	3708      	adds	r7, #8
 80061b0:	46bd      	mov	sp, r7
 80061b2:	bd80      	pop	{r7, pc}
 80061b4:	40010400 	.word	0x40010400

080061b8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80061b8:	b480      	push	{r7}
 80061ba:	b083      	sub	sp, #12
 80061bc:	af00      	add	r7, sp, #0
 80061be:	4603      	mov	r3, r0
 80061c0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80061c2:	bf00      	nop
 80061c4:	370c      	adds	r7, #12
 80061c6:	46bd      	mov	sp, r7
 80061c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061cc:	4770      	bx	lr

080061ce <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80061ce:	b580      	push	{r7, lr}
 80061d0:	b082      	sub	sp, #8
 80061d2:	af00      	add	r7, sp, #0
 80061d4:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d101      	bne.n	80061e0 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80061dc:	2301      	movs	r3, #1
 80061de:	e081      	b.n	80062e4 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80061e6:	b2db      	uxtb	r3, r3
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d106      	bne.n	80061fa <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2200      	movs	r2, #0
 80061f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80061f4:	6878      	ldr	r0, [r7, #4]
 80061f6:	f7ff f857 	bl	80052a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2224      	movs	r2, #36	; 0x24
 80061fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	681a      	ldr	r2, [r3, #0]
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f022 0201 	bic.w	r2, r2, #1
 8006210:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	685a      	ldr	r2, [r3, #4]
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800621e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	689a      	ldr	r2, [r3, #8]
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800622e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	68db      	ldr	r3, [r3, #12]
 8006234:	2b01      	cmp	r3, #1
 8006236:	d107      	bne.n	8006248 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	689a      	ldr	r2, [r3, #8]
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006244:	609a      	str	r2, [r3, #8]
 8006246:	e006      	b.n	8006256 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	689a      	ldr	r2, [r3, #8]
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8006254:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	68db      	ldr	r3, [r3, #12]
 800625a:	2b02      	cmp	r3, #2
 800625c:	d104      	bne.n	8006268 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006266:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	685b      	ldr	r3, [r3, #4]
 800626e:	687a      	ldr	r2, [r7, #4]
 8006270:	6812      	ldr	r2, [r2, #0]
 8006272:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006276:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800627a:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	68da      	ldr	r2, [r3, #12]
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800628a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	691a      	ldr	r2, [r3, #16]
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	695b      	ldr	r3, [r3, #20]
 8006294:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	699b      	ldr	r3, [r3, #24]
 800629c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	430a      	orrs	r2, r1
 80062a4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	69d9      	ldr	r1, [r3, #28]
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6a1a      	ldr	r2, [r3, #32]
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	430a      	orrs	r2, r1
 80062b4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	681a      	ldr	r2, [r3, #0]
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f042 0201 	orr.w	r2, r2, #1
 80062c4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2200      	movs	r2, #0
 80062ca:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2220      	movs	r2, #32
 80062d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2200      	movs	r2, #0
 80062d8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2200      	movs	r2, #0
 80062de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80062e2:	2300      	movs	r3, #0
}
 80062e4:	4618      	mov	r0, r3
 80062e6:	3708      	adds	r7, #8
 80062e8:	46bd      	mov	sp, r7
 80062ea:	bd80      	pop	{r7, pc}

080062ec <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b088      	sub	sp, #32
 80062f0:	af02      	add	r7, sp, #8
 80062f2:	60f8      	str	r0, [r7, #12]
 80062f4:	607a      	str	r2, [r7, #4]
 80062f6:	461a      	mov	r2, r3
 80062f8:	460b      	mov	r3, r1
 80062fa:	817b      	strh	r3, [r7, #10]
 80062fc:	4613      	mov	r3, r2
 80062fe:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006306:	b2db      	uxtb	r3, r3
 8006308:	2b20      	cmp	r3, #32
 800630a:	f040 80da 	bne.w	80064c2 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006314:	2b01      	cmp	r3, #1
 8006316:	d101      	bne.n	800631c <HAL_I2C_Master_Transmit+0x30>
 8006318:	2302      	movs	r3, #2
 800631a:	e0d3      	b.n	80064c4 <HAL_I2C_Master_Transmit+0x1d8>
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	2201      	movs	r2, #1
 8006320:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006324:	f7ff fc5a 	bl	8005bdc <HAL_GetTick>
 8006328:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800632a:	697b      	ldr	r3, [r7, #20]
 800632c:	9300      	str	r3, [sp, #0]
 800632e:	2319      	movs	r3, #25
 8006330:	2201      	movs	r2, #1
 8006332:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006336:	68f8      	ldr	r0, [r7, #12]
 8006338:	f000 fbe0 	bl	8006afc <I2C_WaitOnFlagUntilTimeout>
 800633c:	4603      	mov	r3, r0
 800633e:	2b00      	cmp	r3, #0
 8006340:	d001      	beq.n	8006346 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8006342:	2301      	movs	r3, #1
 8006344:	e0be      	b.n	80064c4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	2221      	movs	r2, #33	; 0x21
 800634a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	2210      	movs	r2, #16
 8006352:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	2200      	movs	r2, #0
 800635a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	687a      	ldr	r2, [r7, #4]
 8006360:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	893a      	ldrh	r2, [r7, #8]
 8006366:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	2200      	movs	r2, #0
 800636c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006372:	b29b      	uxth	r3, r3
 8006374:	2bff      	cmp	r3, #255	; 0xff
 8006376:	d90e      	bls.n	8006396 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	22ff      	movs	r2, #255	; 0xff
 800637c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006382:	b2da      	uxtb	r2, r3
 8006384:	8979      	ldrh	r1, [r7, #10]
 8006386:	4b51      	ldr	r3, [pc, #324]	; (80064cc <HAL_I2C_Master_Transmit+0x1e0>)
 8006388:	9300      	str	r3, [sp, #0]
 800638a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800638e:	68f8      	ldr	r0, [r7, #12]
 8006390:	f000 fd5c 	bl	8006e4c <I2C_TransferConfig>
 8006394:	e06c      	b.n	8006470 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800639a:	b29a      	uxth	r2, r3
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063a4:	b2da      	uxtb	r2, r3
 80063a6:	8979      	ldrh	r1, [r7, #10]
 80063a8:	4b48      	ldr	r3, [pc, #288]	; (80064cc <HAL_I2C_Master_Transmit+0x1e0>)
 80063aa:	9300      	str	r3, [sp, #0]
 80063ac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80063b0:	68f8      	ldr	r0, [r7, #12]
 80063b2:	f000 fd4b 	bl	8006e4c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80063b6:	e05b      	b.n	8006470 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80063b8:	697a      	ldr	r2, [r7, #20]
 80063ba:	6a39      	ldr	r1, [r7, #32]
 80063bc:	68f8      	ldr	r0, [r7, #12]
 80063be:	f000 fbdd 	bl	8006b7c <I2C_WaitOnTXISFlagUntilTimeout>
 80063c2:	4603      	mov	r3, r0
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d001      	beq.n	80063cc <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80063c8:	2301      	movs	r3, #1
 80063ca:	e07b      	b.n	80064c4 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063d0:	781a      	ldrb	r2, [r3, #0]
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063dc:	1c5a      	adds	r2, r3, #1
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063e6:	b29b      	uxth	r3, r3
 80063e8:	3b01      	subs	r3, #1
 80063ea:	b29a      	uxth	r2, r3
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063f4:	3b01      	subs	r3, #1
 80063f6:	b29a      	uxth	r2, r3
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006400:	b29b      	uxth	r3, r3
 8006402:	2b00      	cmp	r3, #0
 8006404:	d034      	beq.n	8006470 <HAL_I2C_Master_Transmit+0x184>
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800640a:	2b00      	cmp	r3, #0
 800640c:	d130      	bne.n	8006470 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800640e:	697b      	ldr	r3, [r7, #20]
 8006410:	9300      	str	r3, [sp, #0]
 8006412:	6a3b      	ldr	r3, [r7, #32]
 8006414:	2200      	movs	r2, #0
 8006416:	2180      	movs	r1, #128	; 0x80
 8006418:	68f8      	ldr	r0, [r7, #12]
 800641a:	f000 fb6f 	bl	8006afc <I2C_WaitOnFlagUntilTimeout>
 800641e:	4603      	mov	r3, r0
 8006420:	2b00      	cmp	r3, #0
 8006422:	d001      	beq.n	8006428 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8006424:	2301      	movs	r3, #1
 8006426:	e04d      	b.n	80064c4 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800642c:	b29b      	uxth	r3, r3
 800642e:	2bff      	cmp	r3, #255	; 0xff
 8006430:	d90e      	bls.n	8006450 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	22ff      	movs	r2, #255	; 0xff
 8006436:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800643c:	b2da      	uxtb	r2, r3
 800643e:	8979      	ldrh	r1, [r7, #10]
 8006440:	2300      	movs	r3, #0
 8006442:	9300      	str	r3, [sp, #0]
 8006444:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006448:	68f8      	ldr	r0, [r7, #12]
 800644a:	f000 fcff 	bl	8006e4c <I2C_TransferConfig>
 800644e:	e00f      	b.n	8006470 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006454:	b29a      	uxth	r2, r3
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800645e:	b2da      	uxtb	r2, r3
 8006460:	8979      	ldrh	r1, [r7, #10]
 8006462:	2300      	movs	r3, #0
 8006464:	9300      	str	r3, [sp, #0]
 8006466:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800646a:	68f8      	ldr	r0, [r7, #12]
 800646c:	f000 fcee 	bl	8006e4c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006474:	b29b      	uxth	r3, r3
 8006476:	2b00      	cmp	r3, #0
 8006478:	d19e      	bne.n	80063b8 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800647a:	697a      	ldr	r2, [r7, #20]
 800647c:	6a39      	ldr	r1, [r7, #32]
 800647e:	68f8      	ldr	r0, [r7, #12]
 8006480:	f000 fbbc 	bl	8006bfc <I2C_WaitOnSTOPFlagUntilTimeout>
 8006484:	4603      	mov	r3, r0
 8006486:	2b00      	cmp	r3, #0
 8006488:	d001      	beq.n	800648e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800648a:	2301      	movs	r3, #1
 800648c:	e01a      	b.n	80064c4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	2220      	movs	r2, #32
 8006494:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	6859      	ldr	r1, [r3, #4]
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681a      	ldr	r2, [r3, #0]
 80064a0:	4b0b      	ldr	r3, [pc, #44]	; (80064d0 <HAL_I2C_Master_Transmit+0x1e4>)
 80064a2:	400b      	ands	r3, r1
 80064a4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	2220      	movs	r2, #32
 80064aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	2200      	movs	r2, #0
 80064b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	2200      	movs	r2, #0
 80064ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80064be:	2300      	movs	r3, #0
 80064c0:	e000      	b.n	80064c4 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80064c2:	2302      	movs	r3, #2
  }
}
 80064c4:	4618      	mov	r0, r3
 80064c6:	3718      	adds	r7, #24
 80064c8:	46bd      	mov	sp, r7
 80064ca:	bd80      	pop	{r7, pc}
 80064cc:	80002000 	.word	0x80002000
 80064d0:	fe00e800 	.word	0xfe00e800

080064d4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b088      	sub	sp, #32
 80064d8:	af02      	add	r7, sp, #8
 80064da:	60f8      	str	r0, [r7, #12]
 80064dc:	4608      	mov	r0, r1
 80064de:	4611      	mov	r1, r2
 80064e0:	461a      	mov	r2, r3
 80064e2:	4603      	mov	r3, r0
 80064e4:	817b      	strh	r3, [r7, #10]
 80064e6:	460b      	mov	r3, r1
 80064e8:	813b      	strh	r3, [r7, #8]
 80064ea:	4613      	mov	r3, r2
 80064ec:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80064f4:	b2db      	uxtb	r3, r3
 80064f6:	2b20      	cmp	r3, #32
 80064f8:	f040 80f9 	bne.w	80066ee <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80064fc:	6a3b      	ldr	r3, [r7, #32]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d002      	beq.n	8006508 <HAL_I2C_Mem_Write+0x34>
 8006502:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006504:	2b00      	cmp	r3, #0
 8006506:	d105      	bne.n	8006514 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800650e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006510:	2301      	movs	r3, #1
 8006512:	e0ed      	b.n	80066f0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800651a:	2b01      	cmp	r3, #1
 800651c:	d101      	bne.n	8006522 <HAL_I2C_Mem_Write+0x4e>
 800651e:	2302      	movs	r3, #2
 8006520:	e0e6      	b.n	80066f0 <HAL_I2C_Mem_Write+0x21c>
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	2201      	movs	r2, #1
 8006526:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800652a:	f7ff fb57 	bl	8005bdc <HAL_GetTick>
 800652e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006530:	697b      	ldr	r3, [r7, #20]
 8006532:	9300      	str	r3, [sp, #0]
 8006534:	2319      	movs	r3, #25
 8006536:	2201      	movs	r2, #1
 8006538:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800653c:	68f8      	ldr	r0, [r7, #12]
 800653e:	f000 fadd 	bl	8006afc <I2C_WaitOnFlagUntilTimeout>
 8006542:	4603      	mov	r3, r0
 8006544:	2b00      	cmp	r3, #0
 8006546:	d001      	beq.n	800654c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8006548:	2301      	movs	r3, #1
 800654a:	e0d1      	b.n	80066f0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	2221      	movs	r2, #33	; 0x21
 8006550:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	2240      	movs	r2, #64	; 0x40
 8006558:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	2200      	movs	r2, #0
 8006560:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	6a3a      	ldr	r2, [r7, #32]
 8006566:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800656c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	2200      	movs	r2, #0
 8006572:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006574:	88f8      	ldrh	r0, [r7, #6]
 8006576:	893a      	ldrh	r2, [r7, #8]
 8006578:	8979      	ldrh	r1, [r7, #10]
 800657a:	697b      	ldr	r3, [r7, #20]
 800657c:	9301      	str	r3, [sp, #4]
 800657e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006580:	9300      	str	r3, [sp, #0]
 8006582:	4603      	mov	r3, r0
 8006584:	68f8      	ldr	r0, [r7, #12]
 8006586:	f000 f9ed 	bl	8006964 <I2C_RequestMemoryWrite>
 800658a:	4603      	mov	r3, r0
 800658c:	2b00      	cmp	r3, #0
 800658e:	d005      	beq.n	800659c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	2200      	movs	r2, #0
 8006594:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006598:	2301      	movs	r3, #1
 800659a:	e0a9      	b.n	80066f0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065a0:	b29b      	uxth	r3, r3
 80065a2:	2bff      	cmp	r3, #255	; 0xff
 80065a4:	d90e      	bls.n	80065c4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	22ff      	movs	r2, #255	; 0xff
 80065aa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065b0:	b2da      	uxtb	r2, r3
 80065b2:	8979      	ldrh	r1, [r7, #10]
 80065b4:	2300      	movs	r3, #0
 80065b6:	9300      	str	r3, [sp, #0]
 80065b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80065bc:	68f8      	ldr	r0, [r7, #12]
 80065be:	f000 fc45 	bl	8006e4c <I2C_TransferConfig>
 80065c2:	e00f      	b.n	80065e4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065c8:	b29a      	uxth	r2, r3
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065d2:	b2da      	uxtb	r2, r3
 80065d4:	8979      	ldrh	r1, [r7, #10]
 80065d6:	2300      	movs	r3, #0
 80065d8:	9300      	str	r3, [sp, #0]
 80065da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80065de:	68f8      	ldr	r0, [r7, #12]
 80065e0:	f000 fc34 	bl	8006e4c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80065e4:	697a      	ldr	r2, [r7, #20]
 80065e6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80065e8:	68f8      	ldr	r0, [r7, #12]
 80065ea:	f000 fac7 	bl	8006b7c <I2C_WaitOnTXISFlagUntilTimeout>
 80065ee:	4603      	mov	r3, r0
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d001      	beq.n	80065f8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80065f4:	2301      	movs	r3, #1
 80065f6:	e07b      	b.n	80066f0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065fc:	781a      	ldrb	r2, [r3, #0]
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006608:	1c5a      	adds	r2, r3, #1
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006612:	b29b      	uxth	r3, r3
 8006614:	3b01      	subs	r3, #1
 8006616:	b29a      	uxth	r2, r3
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006620:	3b01      	subs	r3, #1
 8006622:	b29a      	uxth	r2, r3
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800662c:	b29b      	uxth	r3, r3
 800662e:	2b00      	cmp	r3, #0
 8006630:	d034      	beq.n	800669c <HAL_I2C_Mem_Write+0x1c8>
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006636:	2b00      	cmp	r3, #0
 8006638:	d130      	bne.n	800669c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800663a:	697b      	ldr	r3, [r7, #20]
 800663c:	9300      	str	r3, [sp, #0]
 800663e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006640:	2200      	movs	r2, #0
 8006642:	2180      	movs	r1, #128	; 0x80
 8006644:	68f8      	ldr	r0, [r7, #12]
 8006646:	f000 fa59 	bl	8006afc <I2C_WaitOnFlagUntilTimeout>
 800664a:	4603      	mov	r3, r0
 800664c:	2b00      	cmp	r3, #0
 800664e:	d001      	beq.n	8006654 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8006650:	2301      	movs	r3, #1
 8006652:	e04d      	b.n	80066f0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006658:	b29b      	uxth	r3, r3
 800665a:	2bff      	cmp	r3, #255	; 0xff
 800665c:	d90e      	bls.n	800667c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	22ff      	movs	r2, #255	; 0xff
 8006662:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006668:	b2da      	uxtb	r2, r3
 800666a:	8979      	ldrh	r1, [r7, #10]
 800666c:	2300      	movs	r3, #0
 800666e:	9300      	str	r3, [sp, #0]
 8006670:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006674:	68f8      	ldr	r0, [r7, #12]
 8006676:	f000 fbe9 	bl	8006e4c <I2C_TransferConfig>
 800667a:	e00f      	b.n	800669c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006680:	b29a      	uxth	r2, r3
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800668a:	b2da      	uxtb	r2, r3
 800668c:	8979      	ldrh	r1, [r7, #10]
 800668e:	2300      	movs	r3, #0
 8006690:	9300      	str	r3, [sp, #0]
 8006692:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006696:	68f8      	ldr	r0, [r7, #12]
 8006698:	f000 fbd8 	bl	8006e4c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066a0:	b29b      	uxth	r3, r3
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d19e      	bne.n	80065e4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80066a6:	697a      	ldr	r2, [r7, #20]
 80066a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80066aa:	68f8      	ldr	r0, [r7, #12]
 80066ac:	f000 faa6 	bl	8006bfc <I2C_WaitOnSTOPFlagUntilTimeout>
 80066b0:	4603      	mov	r3, r0
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d001      	beq.n	80066ba <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80066b6:	2301      	movs	r3, #1
 80066b8:	e01a      	b.n	80066f0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	2220      	movs	r2, #32
 80066c0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	6859      	ldr	r1, [r3, #4]
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	681a      	ldr	r2, [r3, #0]
 80066cc:	4b0a      	ldr	r3, [pc, #40]	; (80066f8 <HAL_I2C_Mem_Write+0x224>)
 80066ce:	400b      	ands	r3, r1
 80066d0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	2220      	movs	r2, #32
 80066d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	2200      	movs	r2, #0
 80066de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	2200      	movs	r2, #0
 80066e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80066ea:	2300      	movs	r3, #0
 80066ec:	e000      	b.n	80066f0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80066ee:	2302      	movs	r3, #2
  }
}
 80066f0:	4618      	mov	r0, r3
 80066f2:	3718      	adds	r7, #24
 80066f4:	46bd      	mov	sp, r7
 80066f6:	bd80      	pop	{r7, pc}
 80066f8:	fe00e800 	.word	0xfe00e800

080066fc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b088      	sub	sp, #32
 8006700:	af02      	add	r7, sp, #8
 8006702:	60f8      	str	r0, [r7, #12]
 8006704:	4608      	mov	r0, r1
 8006706:	4611      	mov	r1, r2
 8006708:	461a      	mov	r2, r3
 800670a:	4603      	mov	r3, r0
 800670c:	817b      	strh	r3, [r7, #10]
 800670e:	460b      	mov	r3, r1
 8006710:	813b      	strh	r3, [r7, #8]
 8006712:	4613      	mov	r3, r2
 8006714:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800671c:	b2db      	uxtb	r3, r3
 800671e:	2b20      	cmp	r3, #32
 8006720:	f040 80fd 	bne.w	800691e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8006724:	6a3b      	ldr	r3, [r7, #32]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d002      	beq.n	8006730 <HAL_I2C_Mem_Read+0x34>
 800672a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800672c:	2b00      	cmp	r3, #0
 800672e:	d105      	bne.n	800673c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006736:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006738:	2301      	movs	r3, #1
 800673a:	e0f1      	b.n	8006920 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006742:	2b01      	cmp	r3, #1
 8006744:	d101      	bne.n	800674a <HAL_I2C_Mem_Read+0x4e>
 8006746:	2302      	movs	r3, #2
 8006748:	e0ea      	b.n	8006920 <HAL_I2C_Mem_Read+0x224>
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	2201      	movs	r2, #1
 800674e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006752:	f7ff fa43 	bl	8005bdc <HAL_GetTick>
 8006756:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006758:	697b      	ldr	r3, [r7, #20]
 800675a:	9300      	str	r3, [sp, #0]
 800675c:	2319      	movs	r3, #25
 800675e:	2201      	movs	r2, #1
 8006760:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006764:	68f8      	ldr	r0, [r7, #12]
 8006766:	f000 f9c9 	bl	8006afc <I2C_WaitOnFlagUntilTimeout>
 800676a:	4603      	mov	r3, r0
 800676c:	2b00      	cmp	r3, #0
 800676e:	d001      	beq.n	8006774 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8006770:	2301      	movs	r3, #1
 8006772:	e0d5      	b.n	8006920 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	2222      	movs	r2, #34	; 0x22
 8006778:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	2240      	movs	r2, #64	; 0x40
 8006780:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	2200      	movs	r2, #0
 8006788:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	6a3a      	ldr	r2, [r7, #32]
 800678e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006794:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	2200      	movs	r2, #0
 800679a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800679c:	88f8      	ldrh	r0, [r7, #6]
 800679e:	893a      	ldrh	r2, [r7, #8]
 80067a0:	8979      	ldrh	r1, [r7, #10]
 80067a2:	697b      	ldr	r3, [r7, #20]
 80067a4:	9301      	str	r3, [sp, #4]
 80067a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067a8:	9300      	str	r3, [sp, #0]
 80067aa:	4603      	mov	r3, r0
 80067ac:	68f8      	ldr	r0, [r7, #12]
 80067ae:	f000 f92d 	bl	8006a0c <I2C_RequestMemoryRead>
 80067b2:	4603      	mov	r3, r0
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d005      	beq.n	80067c4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	2200      	movs	r2, #0
 80067bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80067c0:	2301      	movs	r3, #1
 80067c2:	e0ad      	b.n	8006920 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067c8:	b29b      	uxth	r3, r3
 80067ca:	2bff      	cmp	r3, #255	; 0xff
 80067cc:	d90e      	bls.n	80067ec <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	22ff      	movs	r2, #255	; 0xff
 80067d2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067d8:	b2da      	uxtb	r2, r3
 80067da:	8979      	ldrh	r1, [r7, #10]
 80067dc:	4b52      	ldr	r3, [pc, #328]	; (8006928 <HAL_I2C_Mem_Read+0x22c>)
 80067de:	9300      	str	r3, [sp, #0]
 80067e0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80067e4:	68f8      	ldr	r0, [r7, #12]
 80067e6:	f000 fb31 	bl	8006e4c <I2C_TransferConfig>
 80067ea:	e00f      	b.n	800680c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067f0:	b29a      	uxth	r2, r3
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067fa:	b2da      	uxtb	r2, r3
 80067fc:	8979      	ldrh	r1, [r7, #10]
 80067fe:	4b4a      	ldr	r3, [pc, #296]	; (8006928 <HAL_I2C_Mem_Read+0x22c>)
 8006800:	9300      	str	r3, [sp, #0]
 8006802:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006806:	68f8      	ldr	r0, [r7, #12]
 8006808:	f000 fb20 	bl	8006e4c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800680c:	697b      	ldr	r3, [r7, #20]
 800680e:	9300      	str	r3, [sp, #0]
 8006810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006812:	2200      	movs	r2, #0
 8006814:	2104      	movs	r1, #4
 8006816:	68f8      	ldr	r0, [r7, #12]
 8006818:	f000 f970 	bl	8006afc <I2C_WaitOnFlagUntilTimeout>
 800681c:	4603      	mov	r3, r0
 800681e:	2b00      	cmp	r3, #0
 8006820:	d001      	beq.n	8006826 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8006822:	2301      	movs	r3, #1
 8006824:	e07c      	b.n	8006920 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006830:	b2d2      	uxtb	r2, r2
 8006832:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006838:	1c5a      	adds	r2, r3, #1
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006842:	3b01      	subs	r3, #1
 8006844:	b29a      	uxth	r2, r3
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800684e:	b29b      	uxth	r3, r3
 8006850:	3b01      	subs	r3, #1
 8006852:	b29a      	uxth	r2, r3
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800685c:	b29b      	uxth	r3, r3
 800685e:	2b00      	cmp	r3, #0
 8006860:	d034      	beq.n	80068cc <HAL_I2C_Mem_Read+0x1d0>
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006866:	2b00      	cmp	r3, #0
 8006868:	d130      	bne.n	80068cc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800686a:	697b      	ldr	r3, [r7, #20]
 800686c:	9300      	str	r3, [sp, #0]
 800686e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006870:	2200      	movs	r2, #0
 8006872:	2180      	movs	r1, #128	; 0x80
 8006874:	68f8      	ldr	r0, [r7, #12]
 8006876:	f000 f941 	bl	8006afc <I2C_WaitOnFlagUntilTimeout>
 800687a:	4603      	mov	r3, r0
 800687c:	2b00      	cmp	r3, #0
 800687e:	d001      	beq.n	8006884 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8006880:	2301      	movs	r3, #1
 8006882:	e04d      	b.n	8006920 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006888:	b29b      	uxth	r3, r3
 800688a:	2bff      	cmp	r3, #255	; 0xff
 800688c:	d90e      	bls.n	80068ac <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	22ff      	movs	r2, #255	; 0xff
 8006892:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006898:	b2da      	uxtb	r2, r3
 800689a:	8979      	ldrh	r1, [r7, #10]
 800689c:	2300      	movs	r3, #0
 800689e:	9300      	str	r3, [sp, #0]
 80068a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80068a4:	68f8      	ldr	r0, [r7, #12]
 80068a6:	f000 fad1 	bl	8006e4c <I2C_TransferConfig>
 80068aa:	e00f      	b.n	80068cc <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068b0:	b29a      	uxth	r2, r3
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068ba:	b2da      	uxtb	r2, r3
 80068bc:	8979      	ldrh	r1, [r7, #10]
 80068be:	2300      	movs	r3, #0
 80068c0:	9300      	str	r3, [sp, #0]
 80068c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80068c6:	68f8      	ldr	r0, [r7, #12]
 80068c8:	f000 fac0 	bl	8006e4c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068d0:	b29b      	uxth	r3, r3
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d19a      	bne.n	800680c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80068d6:	697a      	ldr	r2, [r7, #20]
 80068d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80068da:	68f8      	ldr	r0, [r7, #12]
 80068dc:	f000 f98e 	bl	8006bfc <I2C_WaitOnSTOPFlagUntilTimeout>
 80068e0:	4603      	mov	r3, r0
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d001      	beq.n	80068ea <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80068e6:	2301      	movs	r3, #1
 80068e8:	e01a      	b.n	8006920 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	2220      	movs	r2, #32
 80068f0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	6859      	ldr	r1, [r3, #4]
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681a      	ldr	r2, [r3, #0]
 80068fc:	4b0b      	ldr	r3, [pc, #44]	; (800692c <HAL_I2C_Mem_Read+0x230>)
 80068fe:	400b      	ands	r3, r1
 8006900:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	2220      	movs	r2, #32
 8006906:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	2200      	movs	r2, #0
 800690e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	2200      	movs	r2, #0
 8006916:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800691a:	2300      	movs	r3, #0
 800691c:	e000      	b.n	8006920 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800691e:	2302      	movs	r3, #2
  }
}
 8006920:	4618      	mov	r0, r3
 8006922:	3718      	adds	r7, #24
 8006924:	46bd      	mov	sp, r7
 8006926:	bd80      	pop	{r7, pc}
 8006928:	80002400 	.word	0x80002400
 800692c:	fe00e800 	.word	0xfe00e800

08006930 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b084      	sub	sp, #16
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	699b      	ldr	r3, [r3, #24]
 800693e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800694c:	2b00      	cmp	r3, #0
 800694e:	d005      	beq.n	800695c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006954:	68ba      	ldr	r2, [r7, #8]
 8006956:	68f9      	ldr	r1, [r7, #12]
 8006958:	6878      	ldr	r0, [r7, #4]
 800695a:	4798      	blx	r3
  }
}
 800695c:	bf00      	nop
 800695e:	3710      	adds	r7, #16
 8006960:	46bd      	mov	sp, r7
 8006962:	bd80      	pop	{r7, pc}

08006964 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8006964:	b580      	push	{r7, lr}
 8006966:	b086      	sub	sp, #24
 8006968:	af02      	add	r7, sp, #8
 800696a:	60f8      	str	r0, [r7, #12]
 800696c:	4608      	mov	r0, r1
 800696e:	4611      	mov	r1, r2
 8006970:	461a      	mov	r2, r3
 8006972:	4603      	mov	r3, r0
 8006974:	817b      	strh	r3, [r7, #10]
 8006976:	460b      	mov	r3, r1
 8006978:	813b      	strh	r3, [r7, #8]
 800697a:	4613      	mov	r3, r2
 800697c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800697e:	88fb      	ldrh	r3, [r7, #6]
 8006980:	b2da      	uxtb	r2, r3
 8006982:	8979      	ldrh	r1, [r7, #10]
 8006984:	4b20      	ldr	r3, [pc, #128]	; (8006a08 <I2C_RequestMemoryWrite+0xa4>)
 8006986:	9300      	str	r3, [sp, #0]
 8006988:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800698c:	68f8      	ldr	r0, [r7, #12]
 800698e:	f000 fa5d 	bl	8006e4c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006992:	69fa      	ldr	r2, [r7, #28]
 8006994:	69b9      	ldr	r1, [r7, #24]
 8006996:	68f8      	ldr	r0, [r7, #12]
 8006998:	f000 f8f0 	bl	8006b7c <I2C_WaitOnTXISFlagUntilTimeout>
 800699c:	4603      	mov	r3, r0
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d001      	beq.n	80069a6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80069a2:	2301      	movs	r3, #1
 80069a4:	e02c      	b.n	8006a00 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80069a6:	88fb      	ldrh	r3, [r7, #6]
 80069a8:	2b01      	cmp	r3, #1
 80069aa:	d105      	bne.n	80069b8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80069ac:	893b      	ldrh	r3, [r7, #8]
 80069ae:	b2da      	uxtb	r2, r3
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	629a      	str	r2, [r3, #40]	; 0x28
 80069b6:	e015      	b.n	80069e4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80069b8:	893b      	ldrh	r3, [r7, #8]
 80069ba:	0a1b      	lsrs	r3, r3, #8
 80069bc:	b29b      	uxth	r3, r3
 80069be:	b2da      	uxtb	r2, r3
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80069c6:	69fa      	ldr	r2, [r7, #28]
 80069c8:	69b9      	ldr	r1, [r7, #24]
 80069ca:	68f8      	ldr	r0, [r7, #12]
 80069cc:	f000 f8d6 	bl	8006b7c <I2C_WaitOnTXISFlagUntilTimeout>
 80069d0:	4603      	mov	r3, r0
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d001      	beq.n	80069da <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80069d6:	2301      	movs	r3, #1
 80069d8:	e012      	b.n	8006a00 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80069da:	893b      	ldrh	r3, [r7, #8]
 80069dc:	b2da      	uxtb	r2, r3
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80069e4:	69fb      	ldr	r3, [r7, #28]
 80069e6:	9300      	str	r3, [sp, #0]
 80069e8:	69bb      	ldr	r3, [r7, #24]
 80069ea:	2200      	movs	r2, #0
 80069ec:	2180      	movs	r1, #128	; 0x80
 80069ee:	68f8      	ldr	r0, [r7, #12]
 80069f0:	f000 f884 	bl	8006afc <I2C_WaitOnFlagUntilTimeout>
 80069f4:	4603      	mov	r3, r0
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d001      	beq.n	80069fe <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80069fa:	2301      	movs	r3, #1
 80069fc:	e000      	b.n	8006a00 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80069fe:	2300      	movs	r3, #0
}
 8006a00:	4618      	mov	r0, r3
 8006a02:	3710      	adds	r7, #16
 8006a04:	46bd      	mov	sp, r7
 8006a06:	bd80      	pop	{r7, pc}
 8006a08:	80002000 	.word	0x80002000

08006a0c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b086      	sub	sp, #24
 8006a10:	af02      	add	r7, sp, #8
 8006a12:	60f8      	str	r0, [r7, #12]
 8006a14:	4608      	mov	r0, r1
 8006a16:	4611      	mov	r1, r2
 8006a18:	461a      	mov	r2, r3
 8006a1a:	4603      	mov	r3, r0
 8006a1c:	817b      	strh	r3, [r7, #10]
 8006a1e:	460b      	mov	r3, r1
 8006a20:	813b      	strh	r3, [r7, #8]
 8006a22:	4613      	mov	r3, r2
 8006a24:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006a26:	88fb      	ldrh	r3, [r7, #6]
 8006a28:	b2da      	uxtb	r2, r3
 8006a2a:	8979      	ldrh	r1, [r7, #10]
 8006a2c:	4b20      	ldr	r3, [pc, #128]	; (8006ab0 <I2C_RequestMemoryRead+0xa4>)
 8006a2e:	9300      	str	r3, [sp, #0]
 8006a30:	2300      	movs	r3, #0
 8006a32:	68f8      	ldr	r0, [r7, #12]
 8006a34:	f000 fa0a 	bl	8006e4c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006a38:	69fa      	ldr	r2, [r7, #28]
 8006a3a:	69b9      	ldr	r1, [r7, #24]
 8006a3c:	68f8      	ldr	r0, [r7, #12]
 8006a3e:	f000 f89d 	bl	8006b7c <I2C_WaitOnTXISFlagUntilTimeout>
 8006a42:	4603      	mov	r3, r0
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d001      	beq.n	8006a4c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8006a48:	2301      	movs	r3, #1
 8006a4a:	e02c      	b.n	8006aa6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006a4c:	88fb      	ldrh	r3, [r7, #6]
 8006a4e:	2b01      	cmp	r3, #1
 8006a50:	d105      	bne.n	8006a5e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006a52:	893b      	ldrh	r3, [r7, #8]
 8006a54:	b2da      	uxtb	r2, r3
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	629a      	str	r2, [r3, #40]	; 0x28
 8006a5c:	e015      	b.n	8006a8a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006a5e:	893b      	ldrh	r3, [r7, #8]
 8006a60:	0a1b      	lsrs	r3, r3, #8
 8006a62:	b29b      	uxth	r3, r3
 8006a64:	b2da      	uxtb	r2, r3
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006a6c:	69fa      	ldr	r2, [r7, #28]
 8006a6e:	69b9      	ldr	r1, [r7, #24]
 8006a70:	68f8      	ldr	r0, [r7, #12]
 8006a72:	f000 f883 	bl	8006b7c <I2C_WaitOnTXISFlagUntilTimeout>
 8006a76:	4603      	mov	r3, r0
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d001      	beq.n	8006a80 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8006a7c:	2301      	movs	r3, #1
 8006a7e:	e012      	b.n	8006aa6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006a80:	893b      	ldrh	r3, [r7, #8]
 8006a82:	b2da      	uxtb	r2, r3
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006a8a:	69fb      	ldr	r3, [r7, #28]
 8006a8c:	9300      	str	r3, [sp, #0]
 8006a8e:	69bb      	ldr	r3, [r7, #24]
 8006a90:	2200      	movs	r2, #0
 8006a92:	2140      	movs	r1, #64	; 0x40
 8006a94:	68f8      	ldr	r0, [r7, #12]
 8006a96:	f000 f831 	bl	8006afc <I2C_WaitOnFlagUntilTimeout>
 8006a9a:	4603      	mov	r3, r0
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d001      	beq.n	8006aa4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8006aa0:	2301      	movs	r3, #1
 8006aa2:	e000      	b.n	8006aa6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8006aa4:	2300      	movs	r3, #0
}
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	3710      	adds	r7, #16
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	bd80      	pop	{r7, pc}
 8006aae:	bf00      	nop
 8006ab0:	80002000 	.word	0x80002000

08006ab4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006ab4:	b480      	push	{r7}
 8006ab6:	b083      	sub	sp, #12
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	699b      	ldr	r3, [r3, #24]
 8006ac2:	f003 0302 	and.w	r3, r3, #2
 8006ac6:	2b02      	cmp	r3, #2
 8006ac8:	d103      	bne.n	8006ad2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	2200      	movs	r2, #0
 8006ad0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	699b      	ldr	r3, [r3, #24]
 8006ad8:	f003 0301 	and.w	r3, r3, #1
 8006adc:	2b01      	cmp	r3, #1
 8006ade:	d007      	beq.n	8006af0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	699a      	ldr	r2, [r3, #24]
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f042 0201 	orr.w	r2, r2, #1
 8006aee:	619a      	str	r2, [r3, #24]
  }
}
 8006af0:	bf00      	nop
 8006af2:	370c      	adds	r7, #12
 8006af4:	46bd      	mov	sp, r7
 8006af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afa:	4770      	bx	lr

08006afc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b084      	sub	sp, #16
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	60f8      	str	r0, [r7, #12]
 8006b04:	60b9      	str	r1, [r7, #8]
 8006b06:	603b      	str	r3, [r7, #0]
 8006b08:	4613      	mov	r3, r2
 8006b0a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006b0c:	e022      	b.n	8006b54 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b14:	d01e      	beq.n	8006b54 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b16:	f7ff f861 	bl	8005bdc <HAL_GetTick>
 8006b1a:	4602      	mov	r2, r0
 8006b1c:	69bb      	ldr	r3, [r7, #24]
 8006b1e:	1ad3      	subs	r3, r2, r3
 8006b20:	683a      	ldr	r2, [r7, #0]
 8006b22:	429a      	cmp	r2, r3
 8006b24:	d302      	bcc.n	8006b2c <I2C_WaitOnFlagUntilTimeout+0x30>
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d113      	bne.n	8006b54 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b30:	f043 0220 	orr.w	r2, r3, #32
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	2220      	movs	r2, #32
 8006b3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	2200      	movs	r2, #0
 8006b44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8006b50:	2301      	movs	r3, #1
 8006b52:	e00f      	b.n	8006b74 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	699a      	ldr	r2, [r3, #24]
 8006b5a:	68bb      	ldr	r3, [r7, #8]
 8006b5c:	4013      	ands	r3, r2
 8006b5e:	68ba      	ldr	r2, [r7, #8]
 8006b60:	429a      	cmp	r2, r3
 8006b62:	bf0c      	ite	eq
 8006b64:	2301      	moveq	r3, #1
 8006b66:	2300      	movne	r3, #0
 8006b68:	b2db      	uxtb	r3, r3
 8006b6a:	461a      	mov	r2, r3
 8006b6c:	79fb      	ldrb	r3, [r7, #7]
 8006b6e:	429a      	cmp	r2, r3
 8006b70:	d0cd      	beq.n	8006b0e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006b72:	2300      	movs	r3, #0
}
 8006b74:	4618      	mov	r0, r3
 8006b76:	3710      	adds	r7, #16
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	bd80      	pop	{r7, pc}

08006b7c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b084      	sub	sp, #16
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	60f8      	str	r0, [r7, #12]
 8006b84:	60b9      	str	r1, [r7, #8]
 8006b86:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006b88:	e02c      	b.n	8006be4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006b8a:	687a      	ldr	r2, [r7, #4]
 8006b8c:	68b9      	ldr	r1, [r7, #8]
 8006b8e:	68f8      	ldr	r0, [r7, #12]
 8006b90:	f000 f870 	bl	8006c74 <I2C_IsErrorOccurred>
 8006b94:	4603      	mov	r3, r0
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d001      	beq.n	8006b9e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006b9a:	2301      	movs	r3, #1
 8006b9c:	e02a      	b.n	8006bf4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b9e:	68bb      	ldr	r3, [r7, #8]
 8006ba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ba4:	d01e      	beq.n	8006be4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ba6:	f7ff f819 	bl	8005bdc <HAL_GetTick>
 8006baa:	4602      	mov	r2, r0
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	1ad3      	subs	r3, r2, r3
 8006bb0:	68ba      	ldr	r2, [r7, #8]
 8006bb2:	429a      	cmp	r2, r3
 8006bb4:	d302      	bcc.n	8006bbc <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006bb6:	68bb      	ldr	r3, [r7, #8]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d113      	bne.n	8006be4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bc0:	f043 0220 	orr.w	r2, r3, #32
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	2220      	movs	r2, #32
 8006bcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	2200      	movs	r2, #0
 8006bdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006be0:	2301      	movs	r3, #1
 8006be2:	e007      	b.n	8006bf4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	699b      	ldr	r3, [r3, #24]
 8006bea:	f003 0302 	and.w	r3, r3, #2
 8006bee:	2b02      	cmp	r3, #2
 8006bf0:	d1cb      	bne.n	8006b8a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006bf2:	2300      	movs	r3, #0
}
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	3710      	adds	r7, #16
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	bd80      	pop	{r7, pc}

08006bfc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b084      	sub	sp, #16
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	60f8      	str	r0, [r7, #12]
 8006c04:	60b9      	str	r1, [r7, #8]
 8006c06:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006c08:	e028      	b.n	8006c5c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c0a:	687a      	ldr	r2, [r7, #4]
 8006c0c:	68b9      	ldr	r1, [r7, #8]
 8006c0e:	68f8      	ldr	r0, [r7, #12]
 8006c10:	f000 f830 	bl	8006c74 <I2C_IsErrorOccurred>
 8006c14:	4603      	mov	r3, r0
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d001      	beq.n	8006c1e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006c1a:	2301      	movs	r3, #1
 8006c1c:	e026      	b.n	8006c6c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c1e:	f7fe ffdd 	bl	8005bdc <HAL_GetTick>
 8006c22:	4602      	mov	r2, r0
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	1ad3      	subs	r3, r2, r3
 8006c28:	68ba      	ldr	r2, [r7, #8]
 8006c2a:	429a      	cmp	r2, r3
 8006c2c:	d302      	bcc.n	8006c34 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006c2e:	68bb      	ldr	r3, [r7, #8]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d113      	bne.n	8006c5c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c38:	f043 0220 	orr.w	r2, r3, #32
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	2220      	movs	r2, #32
 8006c44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	2200      	movs	r2, #0
 8006c54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006c58:	2301      	movs	r3, #1
 8006c5a:	e007      	b.n	8006c6c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	699b      	ldr	r3, [r3, #24]
 8006c62:	f003 0320 	and.w	r3, r3, #32
 8006c66:	2b20      	cmp	r3, #32
 8006c68:	d1cf      	bne.n	8006c0a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006c6a:	2300      	movs	r3, #0
}
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	3710      	adds	r7, #16
 8006c70:	46bd      	mov	sp, r7
 8006c72:	bd80      	pop	{r7, pc}

08006c74 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b08a      	sub	sp, #40	; 0x28
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	60f8      	str	r0, [r7, #12]
 8006c7c:	60b9      	str	r1, [r7, #8]
 8006c7e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006c80:	2300      	movs	r3, #0
 8006c82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	699b      	ldr	r3, [r3, #24]
 8006c8c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006c8e:	2300      	movs	r3, #0
 8006c90:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006c96:	69bb      	ldr	r3, [r7, #24]
 8006c98:	f003 0310 	and.w	r3, r3, #16
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d075      	beq.n	8006d8c <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	2210      	movs	r2, #16
 8006ca6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006ca8:	e056      	b.n	8006d58 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006caa:	68bb      	ldr	r3, [r7, #8]
 8006cac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cb0:	d052      	beq.n	8006d58 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006cb2:	f7fe ff93 	bl	8005bdc <HAL_GetTick>
 8006cb6:	4602      	mov	r2, r0
 8006cb8:	69fb      	ldr	r3, [r7, #28]
 8006cba:	1ad3      	subs	r3, r2, r3
 8006cbc:	68ba      	ldr	r2, [r7, #8]
 8006cbe:	429a      	cmp	r2, r3
 8006cc0:	d302      	bcc.n	8006cc8 <I2C_IsErrorOccurred+0x54>
 8006cc2:	68bb      	ldr	r3, [r7, #8]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d147      	bne.n	8006d58 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	685b      	ldr	r3, [r3, #4]
 8006cce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006cd2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006cda:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	699b      	ldr	r3, [r3, #24]
 8006ce2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006ce6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006cea:	d12e      	bne.n	8006d4a <I2C_IsErrorOccurred+0xd6>
 8006cec:	697b      	ldr	r3, [r7, #20]
 8006cee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006cf2:	d02a      	beq.n	8006d4a <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8006cf4:	7cfb      	ldrb	r3, [r7, #19]
 8006cf6:	2b20      	cmp	r3, #32
 8006cf8:	d027      	beq.n	8006d4a <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	685a      	ldr	r2, [r3, #4]
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006d08:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006d0a:	f7fe ff67 	bl	8005bdc <HAL_GetTick>
 8006d0e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006d10:	e01b      	b.n	8006d4a <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006d12:	f7fe ff63 	bl	8005bdc <HAL_GetTick>
 8006d16:	4602      	mov	r2, r0
 8006d18:	69fb      	ldr	r3, [r7, #28]
 8006d1a:	1ad3      	subs	r3, r2, r3
 8006d1c:	2b19      	cmp	r3, #25
 8006d1e:	d914      	bls.n	8006d4a <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d24:	f043 0220 	orr.w	r2, r3, #32
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	2220      	movs	r2, #32
 8006d30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	2200      	movs	r2, #0
 8006d38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	2200      	movs	r2, #0
 8006d40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8006d44:	2301      	movs	r3, #1
 8006d46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	699b      	ldr	r3, [r3, #24]
 8006d50:	f003 0320 	and.w	r3, r3, #32
 8006d54:	2b20      	cmp	r3, #32
 8006d56:	d1dc      	bne.n	8006d12 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	699b      	ldr	r3, [r3, #24]
 8006d5e:	f003 0320 	and.w	r3, r3, #32
 8006d62:	2b20      	cmp	r3, #32
 8006d64:	d003      	beq.n	8006d6e <I2C_IsErrorOccurred+0xfa>
 8006d66:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d09d      	beq.n	8006caa <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006d6e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d103      	bne.n	8006d7e <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	2220      	movs	r2, #32
 8006d7c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006d7e:	6a3b      	ldr	r3, [r7, #32]
 8006d80:	f043 0304 	orr.w	r3, r3, #4
 8006d84:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006d86:	2301      	movs	r3, #1
 8006d88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	699b      	ldr	r3, [r3, #24]
 8006d92:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006d94:	69bb      	ldr	r3, [r7, #24]
 8006d96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d00b      	beq.n	8006db6 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006d9e:	6a3b      	ldr	r3, [r7, #32]
 8006da0:	f043 0301 	orr.w	r3, r3, #1
 8006da4:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006dae:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006db0:	2301      	movs	r3, #1
 8006db2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006db6:	69bb      	ldr	r3, [r7, #24]
 8006db8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d00b      	beq.n	8006dd8 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006dc0:	6a3b      	ldr	r3, [r7, #32]
 8006dc2:	f043 0308 	orr.w	r3, r3, #8
 8006dc6:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006dd0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006dd2:	2301      	movs	r3, #1
 8006dd4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006dd8:	69bb      	ldr	r3, [r7, #24]
 8006dda:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d00b      	beq.n	8006dfa <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006de2:	6a3b      	ldr	r3, [r7, #32]
 8006de4:	f043 0302 	orr.w	r3, r3, #2
 8006de8:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006df2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006df4:	2301      	movs	r3, #1
 8006df6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8006dfa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d01c      	beq.n	8006e3c <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006e02:	68f8      	ldr	r0, [r7, #12]
 8006e04:	f7ff fe56 	bl	8006ab4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	6859      	ldr	r1, [r3, #4]
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	681a      	ldr	r2, [r3, #0]
 8006e12:	4b0d      	ldr	r3, [pc, #52]	; (8006e48 <I2C_IsErrorOccurred+0x1d4>)
 8006e14:	400b      	ands	r3, r1
 8006e16:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006e1c:	6a3b      	ldr	r3, [r7, #32]
 8006e1e:	431a      	orrs	r2, r3
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	2220      	movs	r2, #32
 8006e28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	2200      	movs	r2, #0
 8006e30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	2200      	movs	r2, #0
 8006e38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8006e3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006e40:	4618      	mov	r0, r3
 8006e42:	3728      	adds	r7, #40	; 0x28
 8006e44:	46bd      	mov	sp, r7
 8006e46:	bd80      	pop	{r7, pc}
 8006e48:	fe00e800 	.word	0xfe00e800

08006e4c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006e4c:	b480      	push	{r7}
 8006e4e:	b087      	sub	sp, #28
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	60f8      	str	r0, [r7, #12]
 8006e54:	607b      	str	r3, [r7, #4]
 8006e56:	460b      	mov	r3, r1
 8006e58:	817b      	strh	r3, [r7, #10]
 8006e5a:	4613      	mov	r3, r2
 8006e5c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006e5e:	897b      	ldrh	r3, [r7, #10]
 8006e60:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006e64:	7a7b      	ldrb	r3, [r7, #9]
 8006e66:	041b      	lsls	r3, r3, #16
 8006e68:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006e6c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006e72:	6a3b      	ldr	r3, [r7, #32]
 8006e74:	4313      	orrs	r3, r2
 8006e76:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006e7a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	685a      	ldr	r2, [r3, #4]
 8006e82:	6a3b      	ldr	r3, [r7, #32]
 8006e84:	0d5b      	lsrs	r3, r3, #21
 8006e86:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006e8a:	4b08      	ldr	r3, [pc, #32]	; (8006eac <I2C_TransferConfig+0x60>)
 8006e8c:	430b      	orrs	r3, r1
 8006e8e:	43db      	mvns	r3, r3
 8006e90:	ea02 0103 	and.w	r1, r2, r3
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	697a      	ldr	r2, [r7, #20]
 8006e9a:	430a      	orrs	r2, r1
 8006e9c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006e9e:	bf00      	nop
 8006ea0:	371c      	adds	r7, #28
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea8:	4770      	bx	lr
 8006eaa:	bf00      	nop
 8006eac:	03ff63ff 	.word	0x03ff63ff

08006eb0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006eb0:	b480      	push	{r7}
 8006eb2:	b083      	sub	sp, #12
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
 8006eb8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006ec0:	b2db      	uxtb	r3, r3
 8006ec2:	2b20      	cmp	r3, #32
 8006ec4:	d138      	bne.n	8006f38 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006ecc:	2b01      	cmp	r3, #1
 8006ece:	d101      	bne.n	8006ed4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006ed0:	2302      	movs	r3, #2
 8006ed2:	e032      	b.n	8006f3a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2201      	movs	r2, #1
 8006ed8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2224      	movs	r2, #36	; 0x24
 8006ee0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	681a      	ldr	r2, [r3, #0]
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f022 0201 	bic.w	r2, r2, #1
 8006ef2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	681a      	ldr	r2, [r3, #0]
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006f02:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	6819      	ldr	r1, [r3, #0]
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	683a      	ldr	r2, [r7, #0]
 8006f10:	430a      	orrs	r2, r1
 8006f12:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	681a      	ldr	r2, [r3, #0]
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	f042 0201 	orr.w	r2, r2, #1
 8006f22:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2220      	movs	r2, #32
 8006f28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2200      	movs	r2, #0
 8006f30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006f34:	2300      	movs	r3, #0
 8006f36:	e000      	b.n	8006f3a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006f38:	2302      	movs	r3, #2
  }
}
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	370c      	adds	r7, #12
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f44:	4770      	bx	lr

08006f46 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006f46:	b480      	push	{r7}
 8006f48:	b085      	sub	sp, #20
 8006f4a:	af00      	add	r7, sp, #0
 8006f4c:	6078      	str	r0, [r7, #4]
 8006f4e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006f56:	b2db      	uxtb	r3, r3
 8006f58:	2b20      	cmp	r3, #32
 8006f5a:	d139      	bne.n	8006fd0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006f62:	2b01      	cmp	r3, #1
 8006f64:	d101      	bne.n	8006f6a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006f66:	2302      	movs	r3, #2
 8006f68:	e033      	b.n	8006fd2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2201      	movs	r2, #1
 8006f6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2224      	movs	r2, #36	; 0x24
 8006f76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	681a      	ldr	r2, [r3, #0]
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f022 0201 	bic.w	r2, r2, #1
 8006f88:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006f98:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	021b      	lsls	r3, r3, #8
 8006f9e:	68fa      	ldr	r2, [r7, #12]
 8006fa0:	4313      	orrs	r3, r2
 8006fa2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	68fa      	ldr	r2, [r7, #12]
 8006faa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	681a      	ldr	r2, [r3, #0]
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f042 0201 	orr.w	r2, r2, #1
 8006fba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2220      	movs	r2, #32
 8006fc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006fcc:	2300      	movs	r3, #0
 8006fce:	e000      	b.n	8006fd2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006fd0:	2302      	movs	r3, #2
  }
}
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	3714      	adds	r7, #20
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fdc:	4770      	bx	lr
	...

08006fe0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006fe0:	b480      	push	{r7}
 8006fe2:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006fe4:	4b0d      	ldr	r3, [pc, #52]	; (800701c <HAL_PWREx_GetVoltageRange+0x3c>)
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006fec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ff0:	d102      	bne.n	8006ff8 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8006ff2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006ff6:	e00b      	b.n	8007010 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8006ff8:	4b08      	ldr	r3, [pc, #32]	; (800701c <HAL_PWREx_GetVoltageRange+0x3c>)
 8006ffa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ffe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007002:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007006:	d102      	bne.n	800700e <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8007008:	f44f 7300 	mov.w	r3, #512	; 0x200
 800700c:	e000      	b.n	8007010 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800700e:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8007010:	4618      	mov	r0, r3
 8007012:	46bd      	mov	sp, r7
 8007014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007018:	4770      	bx	lr
 800701a:	bf00      	nop
 800701c:	40007000 	.word	0x40007000

08007020 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007020:	b480      	push	{r7}
 8007022:	b085      	sub	sp, #20
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d141      	bne.n	80070b2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800702e:	4b4b      	ldr	r3, [pc, #300]	; (800715c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007036:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800703a:	d131      	bne.n	80070a0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800703c:	4b47      	ldr	r3, [pc, #284]	; (800715c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800703e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007042:	4a46      	ldr	r2, [pc, #280]	; (800715c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007044:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007048:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800704c:	4b43      	ldr	r3, [pc, #268]	; (800715c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007054:	4a41      	ldr	r2, [pc, #260]	; (800715c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007056:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800705a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800705c:	4b40      	ldr	r3, [pc, #256]	; (8007160 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	2232      	movs	r2, #50	; 0x32
 8007062:	fb02 f303 	mul.w	r3, r2, r3
 8007066:	4a3f      	ldr	r2, [pc, #252]	; (8007164 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007068:	fba2 2303 	umull	r2, r3, r2, r3
 800706c:	0c9b      	lsrs	r3, r3, #18
 800706e:	3301      	adds	r3, #1
 8007070:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007072:	e002      	b.n	800707a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	3b01      	subs	r3, #1
 8007078:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800707a:	4b38      	ldr	r3, [pc, #224]	; (800715c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800707c:	695b      	ldr	r3, [r3, #20]
 800707e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007082:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007086:	d102      	bne.n	800708e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d1f2      	bne.n	8007074 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800708e:	4b33      	ldr	r3, [pc, #204]	; (800715c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007090:	695b      	ldr	r3, [r3, #20]
 8007092:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007096:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800709a:	d158      	bne.n	800714e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800709c:	2303      	movs	r3, #3
 800709e:	e057      	b.n	8007150 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80070a0:	4b2e      	ldr	r3, [pc, #184]	; (800715c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80070a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80070a6:	4a2d      	ldr	r2, [pc, #180]	; (800715c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80070a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80070ac:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80070b0:	e04d      	b.n	800714e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80070b8:	d141      	bne.n	800713e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80070ba:	4b28      	ldr	r3, [pc, #160]	; (800715c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80070c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80070c6:	d131      	bne.n	800712c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80070c8:	4b24      	ldr	r3, [pc, #144]	; (800715c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80070ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80070ce:	4a23      	ldr	r2, [pc, #140]	; (800715c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80070d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80070d4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80070d8:	4b20      	ldr	r3, [pc, #128]	; (800715c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80070e0:	4a1e      	ldr	r2, [pc, #120]	; (800715c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80070e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80070e6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80070e8:	4b1d      	ldr	r3, [pc, #116]	; (8007160 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	2232      	movs	r2, #50	; 0x32
 80070ee:	fb02 f303 	mul.w	r3, r2, r3
 80070f2:	4a1c      	ldr	r2, [pc, #112]	; (8007164 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80070f4:	fba2 2303 	umull	r2, r3, r2, r3
 80070f8:	0c9b      	lsrs	r3, r3, #18
 80070fa:	3301      	adds	r3, #1
 80070fc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80070fe:	e002      	b.n	8007106 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	3b01      	subs	r3, #1
 8007104:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007106:	4b15      	ldr	r3, [pc, #84]	; (800715c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007108:	695b      	ldr	r3, [r3, #20]
 800710a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800710e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007112:	d102      	bne.n	800711a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d1f2      	bne.n	8007100 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800711a:	4b10      	ldr	r3, [pc, #64]	; (800715c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800711c:	695b      	ldr	r3, [r3, #20]
 800711e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007122:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007126:	d112      	bne.n	800714e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007128:	2303      	movs	r3, #3
 800712a:	e011      	b.n	8007150 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800712c:	4b0b      	ldr	r3, [pc, #44]	; (800715c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800712e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007132:	4a0a      	ldr	r2, [pc, #40]	; (800715c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007134:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007138:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800713c:	e007      	b.n	800714e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800713e:	4b07      	ldr	r3, [pc, #28]	; (800715c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007146:	4a05      	ldr	r2, [pc, #20]	; (800715c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007148:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800714c:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800714e:	2300      	movs	r3, #0
}
 8007150:	4618      	mov	r0, r3
 8007152:	3714      	adds	r7, #20
 8007154:	46bd      	mov	sp, r7
 8007156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715a:	4770      	bx	lr
 800715c:	40007000 	.word	0x40007000
 8007160:	20000010 	.word	0x20000010
 8007164:	431bde83 	.word	0x431bde83

08007168 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b088      	sub	sp, #32
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d102      	bne.n	800717c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8007176:	2301      	movs	r3, #1
 8007178:	f000 bc08 	b.w	800798c <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800717c:	4b96      	ldr	r3, [pc, #600]	; (80073d8 <HAL_RCC_OscConfig+0x270>)
 800717e:	689b      	ldr	r3, [r3, #8]
 8007180:	f003 030c 	and.w	r3, r3, #12
 8007184:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007186:	4b94      	ldr	r3, [pc, #592]	; (80073d8 <HAL_RCC_OscConfig+0x270>)
 8007188:	68db      	ldr	r3, [r3, #12]
 800718a:	f003 0303 	and.w	r3, r3, #3
 800718e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f003 0310 	and.w	r3, r3, #16
 8007198:	2b00      	cmp	r3, #0
 800719a:	f000 80e4 	beq.w	8007366 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800719e:	69bb      	ldr	r3, [r7, #24]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d007      	beq.n	80071b4 <HAL_RCC_OscConfig+0x4c>
 80071a4:	69bb      	ldr	r3, [r7, #24]
 80071a6:	2b0c      	cmp	r3, #12
 80071a8:	f040 808b 	bne.w	80072c2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80071ac:	697b      	ldr	r3, [r7, #20]
 80071ae:	2b01      	cmp	r3, #1
 80071b0:	f040 8087 	bne.w	80072c2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80071b4:	4b88      	ldr	r3, [pc, #544]	; (80073d8 <HAL_RCC_OscConfig+0x270>)
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f003 0302 	and.w	r3, r3, #2
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d005      	beq.n	80071cc <HAL_RCC_OscConfig+0x64>
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	699b      	ldr	r3, [r3, #24]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d101      	bne.n	80071cc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80071c8:	2301      	movs	r3, #1
 80071ca:	e3df      	b.n	800798c <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	6a1a      	ldr	r2, [r3, #32]
 80071d0:	4b81      	ldr	r3, [pc, #516]	; (80073d8 <HAL_RCC_OscConfig+0x270>)
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f003 0308 	and.w	r3, r3, #8
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d004      	beq.n	80071e6 <HAL_RCC_OscConfig+0x7e>
 80071dc:	4b7e      	ldr	r3, [pc, #504]	; (80073d8 <HAL_RCC_OscConfig+0x270>)
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80071e4:	e005      	b.n	80071f2 <HAL_RCC_OscConfig+0x8a>
 80071e6:	4b7c      	ldr	r3, [pc, #496]	; (80073d8 <HAL_RCC_OscConfig+0x270>)
 80071e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80071ec:	091b      	lsrs	r3, r3, #4
 80071ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d223      	bcs.n	800723e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6a1b      	ldr	r3, [r3, #32]
 80071fa:	4618      	mov	r0, r3
 80071fc:	f000 fdfe 	bl	8007dfc <RCC_SetFlashLatencyFromMSIRange>
 8007200:	4603      	mov	r3, r0
 8007202:	2b00      	cmp	r3, #0
 8007204:	d001      	beq.n	800720a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8007206:	2301      	movs	r3, #1
 8007208:	e3c0      	b.n	800798c <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800720a:	4b73      	ldr	r3, [pc, #460]	; (80073d8 <HAL_RCC_OscConfig+0x270>)
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	4a72      	ldr	r2, [pc, #456]	; (80073d8 <HAL_RCC_OscConfig+0x270>)
 8007210:	f043 0308 	orr.w	r3, r3, #8
 8007214:	6013      	str	r3, [r2, #0]
 8007216:	4b70      	ldr	r3, [pc, #448]	; (80073d8 <HAL_RCC_OscConfig+0x270>)
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6a1b      	ldr	r3, [r3, #32]
 8007222:	496d      	ldr	r1, [pc, #436]	; (80073d8 <HAL_RCC_OscConfig+0x270>)
 8007224:	4313      	orrs	r3, r2
 8007226:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007228:	4b6b      	ldr	r3, [pc, #428]	; (80073d8 <HAL_RCC_OscConfig+0x270>)
 800722a:	685b      	ldr	r3, [r3, #4]
 800722c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	69db      	ldr	r3, [r3, #28]
 8007234:	021b      	lsls	r3, r3, #8
 8007236:	4968      	ldr	r1, [pc, #416]	; (80073d8 <HAL_RCC_OscConfig+0x270>)
 8007238:	4313      	orrs	r3, r2
 800723a:	604b      	str	r3, [r1, #4]
 800723c:	e025      	b.n	800728a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800723e:	4b66      	ldr	r3, [pc, #408]	; (80073d8 <HAL_RCC_OscConfig+0x270>)
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	4a65      	ldr	r2, [pc, #404]	; (80073d8 <HAL_RCC_OscConfig+0x270>)
 8007244:	f043 0308 	orr.w	r3, r3, #8
 8007248:	6013      	str	r3, [r2, #0]
 800724a:	4b63      	ldr	r3, [pc, #396]	; (80073d8 <HAL_RCC_OscConfig+0x270>)
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	6a1b      	ldr	r3, [r3, #32]
 8007256:	4960      	ldr	r1, [pc, #384]	; (80073d8 <HAL_RCC_OscConfig+0x270>)
 8007258:	4313      	orrs	r3, r2
 800725a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800725c:	4b5e      	ldr	r3, [pc, #376]	; (80073d8 <HAL_RCC_OscConfig+0x270>)
 800725e:	685b      	ldr	r3, [r3, #4]
 8007260:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	69db      	ldr	r3, [r3, #28]
 8007268:	021b      	lsls	r3, r3, #8
 800726a:	495b      	ldr	r1, [pc, #364]	; (80073d8 <HAL_RCC_OscConfig+0x270>)
 800726c:	4313      	orrs	r3, r2
 800726e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007270:	69bb      	ldr	r3, [r7, #24]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d109      	bne.n	800728a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6a1b      	ldr	r3, [r3, #32]
 800727a:	4618      	mov	r0, r3
 800727c:	f000 fdbe 	bl	8007dfc <RCC_SetFlashLatencyFromMSIRange>
 8007280:	4603      	mov	r3, r0
 8007282:	2b00      	cmp	r3, #0
 8007284:	d001      	beq.n	800728a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8007286:	2301      	movs	r3, #1
 8007288:	e380      	b.n	800798c <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800728a:	f000 fcc1 	bl	8007c10 <HAL_RCC_GetSysClockFreq>
 800728e:	4602      	mov	r2, r0
 8007290:	4b51      	ldr	r3, [pc, #324]	; (80073d8 <HAL_RCC_OscConfig+0x270>)
 8007292:	689b      	ldr	r3, [r3, #8]
 8007294:	091b      	lsrs	r3, r3, #4
 8007296:	f003 030f 	and.w	r3, r3, #15
 800729a:	4950      	ldr	r1, [pc, #320]	; (80073dc <HAL_RCC_OscConfig+0x274>)
 800729c:	5ccb      	ldrb	r3, [r1, r3]
 800729e:	f003 031f 	and.w	r3, r3, #31
 80072a2:	fa22 f303 	lsr.w	r3, r2, r3
 80072a6:	4a4e      	ldr	r2, [pc, #312]	; (80073e0 <HAL_RCC_OscConfig+0x278>)
 80072a8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80072aa:	4b4e      	ldr	r3, [pc, #312]	; (80073e4 <HAL_RCC_OscConfig+0x27c>)
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	4618      	mov	r0, r3
 80072b0:	f7fe f9d6 	bl	8005660 <HAL_InitTick>
 80072b4:	4603      	mov	r3, r0
 80072b6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80072b8:	7bfb      	ldrb	r3, [r7, #15]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d052      	beq.n	8007364 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80072be:	7bfb      	ldrb	r3, [r7, #15]
 80072c0:	e364      	b.n	800798c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	699b      	ldr	r3, [r3, #24]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d032      	beq.n	8007330 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80072ca:	4b43      	ldr	r3, [pc, #268]	; (80073d8 <HAL_RCC_OscConfig+0x270>)
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	4a42      	ldr	r2, [pc, #264]	; (80073d8 <HAL_RCC_OscConfig+0x270>)
 80072d0:	f043 0301 	orr.w	r3, r3, #1
 80072d4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80072d6:	f7fe fc81 	bl	8005bdc <HAL_GetTick>
 80072da:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80072dc:	e008      	b.n	80072f0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80072de:	f7fe fc7d 	bl	8005bdc <HAL_GetTick>
 80072e2:	4602      	mov	r2, r0
 80072e4:	693b      	ldr	r3, [r7, #16]
 80072e6:	1ad3      	subs	r3, r2, r3
 80072e8:	2b02      	cmp	r3, #2
 80072ea:	d901      	bls.n	80072f0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80072ec:	2303      	movs	r3, #3
 80072ee:	e34d      	b.n	800798c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80072f0:	4b39      	ldr	r3, [pc, #228]	; (80073d8 <HAL_RCC_OscConfig+0x270>)
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f003 0302 	and.w	r3, r3, #2
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d0f0      	beq.n	80072de <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80072fc:	4b36      	ldr	r3, [pc, #216]	; (80073d8 <HAL_RCC_OscConfig+0x270>)
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	4a35      	ldr	r2, [pc, #212]	; (80073d8 <HAL_RCC_OscConfig+0x270>)
 8007302:	f043 0308 	orr.w	r3, r3, #8
 8007306:	6013      	str	r3, [r2, #0]
 8007308:	4b33      	ldr	r3, [pc, #204]	; (80073d8 <HAL_RCC_OscConfig+0x270>)
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	6a1b      	ldr	r3, [r3, #32]
 8007314:	4930      	ldr	r1, [pc, #192]	; (80073d8 <HAL_RCC_OscConfig+0x270>)
 8007316:	4313      	orrs	r3, r2
 8007318:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800731a:	4b2f      	ldr	r3, [pc, #188]	; (80073d8 <HAL_RCC_OscConfig+0x270>)
 800731c:	685b      	ldr	r3, [r3, #4]
 800731e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	69db      	ldr	r3, [r3, #28]
 8007326:	021b      	lsls	r3, r3, #8
 8007328:	492b      	ldr	r1, [pc, #172]	; (80073d8 <HAL_RCC_OscConfig+0x270>)
 800732a:	4313      	orrs	r3, r2
 800732c:	604b      	str	r3, [r1, #4]
 800732e:	e01a      	b.n	8007366 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8007330:	4b29      	ldr	r3, [pc, #164]	; (80073d8 <HAL_RCC_OscConfig+0x270>)
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	4a28      	ldr	r2, [pc, #160]	; (80073d8 <HAL_RCC_OscConfig+0x270>)
 8007336:	f023 0301 	bic.w	r3, r3, #1
 800733a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800733c:	f7fe fc4e 	bl	8005bdc <HAL_GetTick>
 8007340:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8007342:	e008      	b.n	8007356 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007344:	f7fe fc4a 	bl	8005bdc <HAL_GetTick>
 8007348:	4602      	mov	r2, r0
 800734a:	693b      	ldr	r3, [r7, #16]
 800734c:	1ad3      	subs	r3, r2, r3
 800734e:	2b02      	cmp	r3, #2
 8007350:	d901      	bls.n	8007356 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8007352:	2303      	movs	r3, #3
 8007354:	e31a      	b.n	800798c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8007356:	4b20      	ldr	r3, [pc, #128]	; (80073d8 <HAL_RCC_OscConfig+0x270>)
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f003 0302 	and.w	r3, r3, #2
 800735e:	2b00      	cmp	r3, #0
 8007360:	d1f0      	bne.n	8007344 <HAL_RCC_OscConfig+0x1dc>
 8007362:	e000      	b.n	8007366 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007364:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	f003 0301 	and.w	r3, r3, #1
 800736e:	2b00      	cmp	r3, #0
 8007370:	d073      	beq.n	800745a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8007372:	69bb      	ldr	r3, [r7, #24]
 8007374:	2b08      	cmp	r3, #8
 8007376:	d005      	beq.n	8007384 <HAL_RCC_OscConfig+0x21c>
 8007378:	69bb      	ldr	r3, [r7, #24]
 800737a:	2b0c      	cmp	r3, #12
 800737c:	d10e      	bne.n	800739c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800737e:	697b      	ldr	r3, [r7, #20]
 8007380:	2b03      	cmp	r3, #3
 8007382:	d10b      	bne.n	800739c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007384:	4b14      	ldr	r3, [pc, #80]	; (80073d8 <HAL_RCC_OscConfig+0x270>)
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800738c:	2b00      	cmp	r3, #0
 800738e:	d063      	beq.n	8007458 <HAL_RCC_OscConfig+0x2f0>
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	685b      	ldr	r3, [r3, #4]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d15f      	bne.n	8007458 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8007398:	2301      	movs	r3, #1
 800739a:	e2f7      	b.n	800798c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	685b      	ldr	r3, [r3, #4]
 80073a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80073a4:	d106      	bne.n	80073b4 <HAL_RCC_OscConfig+0x24c>
 80073a6:	4b0c      	ldr	r3, [pc, #48]	; (80073d8 <HAL_RCC_OscConfig+0x270>)
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	4a0b      	ldr	r2, [pc, #44]	; (80073d8 <HAL_RCC_OscConfig+0x270>)
 80073ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80073b0:	6013      	str	r3, [r2, #0]
 80073b2:	e025      	b.n	8007400 <HAL_RCC_OscConfig+0x298>
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	685b      	ldr	r3, [r3, #4]
 80073b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80073bc:	d114      	bne.n	80073e8 <HAL_RCC_OscConfig+0x280>
 80073be:	4b06      	ldr	r3, [pc, #24]	; (80073d8 <HAL_RCC_OscConfig+0x270>)
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	4a05      	ldr	r2, [pc, #20]	; (80073d8 <HAL_RCC_OscConfig+0x270>)
 80073c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80073c8:	6013      	str	r3, [r2, #0]
 80073ca:	4b03      	ldr	r3, [pc, #12]	; (80073d8 <HAL_RCC_OscConfig+0x270>)
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	4a02      	ldr	r2, [pc, #8]	; (80073d8 <HAL_RCC_OscConfig+0x270>)
 80073d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80073d4:	6013      	str	r3, [r2, #0]
 80073d6:	e013      	b.n	8007400 <HAL_RCC_OscConfig+0x298>
 80073d8:	40021000 	.word	0x40021000
 80073dc:	08011c50 	.word	0x08011c50
 80073e0:	20000010 	.word	0x20000010
 80073e4:	20000014 	.word	0x20000014
 80073e8:	4ba0      	ldr	r3, [pc, #640]	; (800766c <HAL_RCC_OscConfig+0x504>)
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	4a9f      	ldr	r2, [pc, #636]	; (800766c <HAL_RCC_OscConfig+0x504>)
 80073ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80073f2:	6013      	str	r3, [r2, #0]
 80073f4:	4b9d      	ldr	r3, [pc, #628]	; (800766c <HAL_RCC_OscConfig+0x504>)
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	4a9c      	ldr	r2, [pc, #624]	; (800766c <HAL_RCC_OscConfig+0x504>)
 80073fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80073fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	685b      	ldr	r3, [r3, #4]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d013      	beq.n	8007430 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007408:	f7fe fbe8 	bl	8005bdc <HAL_GetTick>
 800740c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800740e:	e008      	b.n	8007422 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007410:	f7fe fbe4 	bl	8005bdc <HAL_GetTick>
 8007414:	4602      	mov	r2, r0
 8007416:	693b      	ldr	r3, [r7, #16]
 8007418:	1ad3      	subs	r3, r2, r3
 800741a:	2b64      	cmp	r3, #100	; 0x64
 800741c:	d901      	bls.n	8007422 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800741e:	2303      	movs	r3, #3
 8007420:	e2b4      	b.n	800798c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007422:	4b92      	ldr	r3, [pc, #584]	; (800766c <HAL_RCC_OscConfig+0x504>)
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800742a:	2b00      	cmp	r3, #0
 800742c:	d0f0      	beq.n	8007410 <HAL_RCC_OscConfig+0x2a8>
 800742e:	e014      	b.n	800745a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007430:	f7fe fbd4 	bl	8005bdc <HAL_GetTick>
 8007434:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007436:	e008      	b.n	800744a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007438:	f7fe fbd0 	bl	8005bdc <HAL_GetTick>
 800743c:	4602      	mov	r2, r0
 800743e:	693b      	ldr	r3, [r7, #16]
 8007440:	1ad3      	subs	r3, r2, r3
 8007442:	2b64      	cmp	r3, #100	; 0x64
 8007444:	d901      	bls.n	800744a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8007446:	2303      	movs	r3, #3
 8007448:	e2a0      	b.n	800798c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800744a:	4b88      	ldr	r3, [pc, #544]	; (800766c <HAL_RCC_OscConfig+0x504>)
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007452:	2b00      	cmp	r3, #0
 8007454:	d1f0      	bne.n	8007438 <HAL_RCC_OscConfig+0x2d0>
 8007456:	e000      	b.n	800745a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007458:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f003 0302 	and.w	r3, r3, #2
 8007462:	2b00      	cmp	r3, #0
 8007464:	d060      	beq.n	8007528 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8007466:	69bb      	ldr	r3, [r7, #24]
 8007468:	2b04      	cmp	r3, #4
 800746a:	d005      	beq.n	8007478 <HAL_RCC_OscConfig+0x310>
 800746c:	69bb      	ldr	r3, [r7, #24]
 800746e:	2b0c      	cmp	r3, #12
 8007470:	d119      	bne.n	80074a6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8007472:	697b      	ldr	r3, [r7, #20]
 8007474:	2b02      	cmp	r3, #2
 8007476:	d116      	bne.n	80074a6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007478:	4b7c      	ldr	r3, [pc, #496]	; (800766c <HAL_RCC_OscConfig+0x504>)
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007480:	2b00      	cmp	r3, #0
 8007482:	d005      	beq.n	8007490 <HAL_RCC_OscConfig+0x328>
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	68db      	ldr	r3, [r3, #12]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d101      	bne.n	8007490 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800748c:	2301      	movs	r3, #1
 800748e:	e27d      	b.n	800798c <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007490:	4b76      	ldr	r3, [pc, #472]	; (800766c <HAL_RCC_OscConfig+0x504>)
 8007492:	685b      	ldr	r3, [r3, #4]
 8007494:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	691b      	ldr	r3, [r3, #16]
 800749c:	061b      	lsls	r3, r3, #24
 800749e:	4973      	ldr	r1, [pc, #460]	; (800766c <HAL_RCC_OscConfig+0x504>)
 80074a0:	4313      	orrs	r3, r2
 80074a2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80074a4:	e040      	b.n	8007528 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	68db      	ldr	r3, [r3, #12]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d023      	beq.n	80074f6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80074ae:	4b6f      	ldr	r3, [pc, #444]	; (800766c <HAL_RCC_OscConfig+0x504>)
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	4a6e      	ldr	r2, [pc, #440]	; (800766c <HAL_RCC_OscConfig+0x504>)
 80074b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80074b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074ba:	f7fe fb8f 	bl	8005bdc <HAL_GetTick>
 80074be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80074c0:	e008      	b.n	80074d4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80074c2:	f7fe fb8b 	bl	8005bdc <HAL_GetTick>
 80074c6:	4602      	mov	r2, r0
 80074c8:	693b      	ldr	r3, [r7, #16]
 80074ca:	1ad3      	subs	r3, r2, r3
 80074cc:	2b02      	cmp	r3, #2
 80074ce:	d901      	bls.n	80074d4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80074d0:	2303      	movs	r3, #3
 80074d2:	e25b      	b.n	800798c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80074d4:	4b65      	ldr	r3, [pc, #404]	; (800766c <HAL_RCC_OscConfig+0x504>)
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d0f0      	beq.n	80074c2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80074e0:	4b62      	ldr	r3, [pc, #392]	; (800766c <HAL_RCC_OscConfig+0x504>)
 80074e2:	685b      	ldr	r3, [r3, #4]
 80074e4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	691b      	ldr	r3, [r3, #16]
 80074ec:	061b      	lsls	r3, r3, #24
 80074ee:	495f      	ldr	r1, [pc, #380]	; (800766c <HAL_RCC_OscConfig+0x504>)
 80074f0:	4313      	orrs	r3, r2
 80074f2:	604b      	str	r3, [r1, #4]
 80074f4:	e018      	b.n	8007528 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80074f6:	4b5d      	ldr	r3, [pc, #372]	; (800766c <HAL_RCC_OscConfig+0x504>)
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	4a5c      	ldr	r2, [pc, #368]	; (800766c <HAL_RCC_OscConfig+0x504>)
 80074fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007500:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007502:	f7fe fb6b 	bl	8005bdc <HAL_GetTick>
 8007506:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007508:	e008      	b.n	800751c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800750a:	f7fe fb67 	bl	8005bdc <HAL_GetTick>
 800750e:	4602      	mov	r2, r0
 8007510:	693b      	ldr	r3, [r7, #16]
 8007512:	1ad3      	subs	r3, r2, r3
 8007514:	2b02      	cmp	r3, #2
 8007516:	d901      	bls.n	800751c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8007518:	2303      	movs	r3, #3
 800751a:	e237      	b.n	800798c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800751c:	4b53      	ldr	r3, [pc, #332]	; (800766c <HAL_RCC_OscConfig+0x504>)
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007524:	2b00      	cmp	r3, #0
 8007526:	d1f0      	bne.n	800750a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f003 0308 	and.w	r3, r3, #8
 8007530:	2b00      	cmp	r3, #0
 8007532:	d03c      	beq.n	80075ae <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	695b      	ldr	r3, [r3, #20]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d01c      	beq.n	8007576 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800753c:	4b4b      	ldr	r3, [pc, #300]	; (800766c <HAL_RCC_OscConfig+0x504>)
 800753e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007542:	4a4a      	ldr	r2, [pc, #296]	; (800766c <HAL_RCC_OscConfig+0x504>)
 8007544:	f043 0301 	orr.w	r3, r3, #1
 8007548:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800754c:	f7fe fb46 	bl	8005bdc <HAL_GetTick>
 8007550:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007552:	e008      	b.n	8007566 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007554:	f7fe fb42 	bl	8005bdc <HAL_GetTick>
 8007558:	4602      	mov	r2, r0
 800755a:	693b      	ldr	r3, [r7, #16]
 800755c:	1ad3      	subs	r3, r2, r3
 800755e:	2b02      	cmp	r3, #2
 8007560:	d901      	bls.n	8007566 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8007562:	2303      	movs	r3, #3
 8007564:	e212      	b.n	800798c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007566:	4b41      	ldr	r3, [pc, #260]	; (800766c <HAL_RCC_OscConfig+0x504>)
 8007568:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800756c:	f003 0302 	and.w	r3, r3, #2
 8007570:	2b00      	cmp	r3, #0
 8007572:	d0ef      	beq.n	8007554 <HAL_RCC_OscConfig+0x3ec>
 8007574:	e01b      	b.n	80075ae <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007576:	4b3d      	ldr	r3, [pc, #244]	; (800766c <HAL_RCC_OscConfig+0x504>)
 8007578:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800757c:	4a3b      	ldr	r2, [pc, #236]	; (800766c <HAL_RCC_OscConfig+0x504>)
 800757e:	f023 0301 	bic.w	r3, r3, #1
 8007582:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007586:	f7fe fb29 	bl	8005bdc <HAL_GetTick>
 800758a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800758c:	e008      	b.n	80075a0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800758e:	f7fe fb25 	bl	8005bdc <HAL_GetTick>
 8007592:	4602      	mov	r2, r0
 8007594:	693b      	ldr	r3, [r7, #16]
 8007596:	1ad3      	subs	r3, r2, r3
 8007598:	2b02      	cmp	r3, #2
 800759a:	d901      	bls.n	80075a0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800759c:	2303      	movs	r3, #3
 800759e:	e1f5      	b.n	800798c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80075a0:	4b32      	ldr	r3, [pc, #200]	; (800766c <HAL_RCC_OscConfig+0x504>)
 80075a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80075a6:	f003 0302 	and.w	r3, r3, #2
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d1ef      	bne.n	800758e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f003 0304 	and.w	r3, r3, #4
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	f000 80a6 	beq.w	8007708 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80075bc:	2300      	movs	r3, #0
 80075be:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80075c0:	4b2a      	ldr	r3, [pc, #168]	; (800766c <HAL_RCC_OscConfig+0x504>)
 80075c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d10d      	bne.n	80075e8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80075cc:	4b27      	ldr	r3, [pc, #156]	; (800766c <HAL_RCC_OscConfig+0x504>)
 80075ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075d0:	4a26      	ldr	r2, [pc, #152]	; (800766c <HAL_RCC_OscConfig+0x504>)
 80075d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80075d6:	6593      	str	r3, [r2, #88]	; 0x58
 80075d8:	4b24      	ldr	r3, [pc, #144]	; (800766c <HAL_RCC_OscConfig+0x504>)
 80075da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80075e0:	60bb      	str	r3, [r7, #8]
 80075e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80075e4:	2301      	movs	r3, #1
 80075e6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80075e8:	4b21      	ldr	r3, [pc, #132]	; (8007670 <HAL_RCC_OscConfig+0x508>)
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d118      	bne.n	8007626 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80075f4:	4b1e      	ldr	r3, [pc, #120]	; (8007670 <HAL_RCC_OscConfig+0x508>)
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	4a1d      	ldr	r2, [pc, #116]	; (8007670 <HAL_RCC_OscConfig+0x508>)
 80075fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80075fe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007600:	f7fe faec 	bl	8005bdc <HAL_GetTick>
 8007604:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007606:	e008      	b.n	800761a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007608:	f7fe fae8 	bl	8005bdc <HAL_GetTick>
 800760c:	4602      	mov	r2, r0
 800760e:	693b      	ldr	r3, [r7, #16]
 8007610:	1ad3      	subs	r3, r2, r3
 8007612:	2b02      	cmp	r3, #2
 8007614:	d901      	bls.n	800761a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8007616:	2303      	movs	r3, #3
 8007618:	e1b8      	b.n	800798c <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800761a:	4b15      	ldr	r3, [pc, #84]	; (8007670 <HAL_RCC_OscConfig+0x508>)
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007622:	2b00      	cmp	r3, #0
 8007624:	d0f0      	beq.n	8007608 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	689b      	ldr	r3, [r3, #8]
 800762a:	2b01      	cmp	r3, #1
 800762c:	d108      	bne.n	8007640 <HAL_RCC_OscConfig+0x4d8>
 800762e:	4b0f      	ldr	r3, [pc, #60]	; (800766c <HAL_RCC_OscConfig+0x504>)
 8007630:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007634:	4a0d      	ldr	r2, [pc, #52]	; (800766c <HAL_RCC_OscConfig+0x504>)
 8007636:	f043 0301 	orr.w	r3, r3, #1
 800763a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800763e:	e029      	b.n	8007694 <HAL_RCC_OscConfig+0x52c>
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	689b      	ldr	r3, [r3, #8]
 8007644:	2b05      	cmp	r3, #5
 8007646:	d115      	bne.n	8007674 <HAL_RCC_OscConfig+0x50c>
 8007648:	4b08      	ldr	r3, [pc, #32]	; (800766c <HAL_RCC_OscConfig+0x504>)
 800764a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800764e:	4a07      	ldr	r2, [pc, #28]	; (800766c <HAL_RCC_OscConfig+0x504>)
 8007650:	f043 0304 	orr.w	r3, r3, #4
 8007654:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007658:	4b04      	ldr	r3, [pc, #16]	; (800766c <HAL_RCC_OscConfig+0x504>)
 800765a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800765e:	4a03      	ldr	r2, [pc, #12]	; (800766c <HAL_RCC_OscConfig+0x504>)
 8007660:	f043 0301 	orr.w	r3, r3, #1
 8007664:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007668:	e014      	b.n	8007694 <HAL_RCC_OscConfig+0x52c>
 800766a:	bf00      	nop
 800766c:	40021000 	.word	0x40021000
 8007670:	40007000 	.word	0x40007000
 8007674:	4b9d      	ldr	r3, [pc, #628]	; (80078ec <HAL_RCC_OscConfig+0x784>)
 8007676:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800767a:	4a9c      	ldr	r2, [pc, #624]	; (80078ec <HAL_RCC_OscConfig+0x784>)
 800767c:	f023 0301 	bic.w	r3, r3, #1
 8007680:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007684:	4b99      	ldr	r3, [pc, #612]	; (80078ec <HAL_RCC_OscConfig+0x784>)
 8007686:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800768a:	4a98      	ldr	r2, [pc, #608]	; (80078ec <HAL_RCC_OscConfig+0x784>)
 800768c:	f023 0304 	bic.w	r3, r3, #4
 8007690:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	689b      	ldr	r3, [r3, #8]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d016      	beq.n	80076ca <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800769c:	f7fe fa9e 	bl	8005bdc <HAL_GetTick>
 80076a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80076a2:	e00a      	b.n	80076ba <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80076a4:	f7fe fa9a 	bl	8005bdc <HAL_GetTick>
 80076a8:	4602      	mov	r2, r0
 80076aa:	693b      	ldr	r3, [r7, #16]
 80076ac:	1ad3      	subs	r3, r2, r3
 80076ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80076b2:	4293      	cmp	r3, r2
 80076b4:	d901      	bls.n	80076ba <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80076b6:	2303      	movs	r3, #3
 80076b8:	e168      	b.n	800798c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80076ba:	4b8c      	ldr	r3, [pc, #560]	; (80078ec <HAL_RCC_OscConfig+0x784>)
 80076bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076c0:	f003 0302 	and.w	r3, r3, #2
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d0ed      	beq.n	80076a4 <HAL_RCC_OscConfig+0x53c>
 80076c8:	e015      	b.n	80076f6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80076ca:	f7fe fa87 	bl	8005bdc <HAL_GetTick>
 80076ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80076d0:	e00a      	b.n	80076e8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80076d2:	f7fe fa83 	bl	8005bdc <HAL_GetTick>
 80076d6:	4602      	mov	r2, r0
 80076d8:	693b      	ldr	r3, [r7, #16]
 80076da:	1ad3      	subs	r3, r2, r3
 80076dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80076e0:	4293      	cmp	r3, r2
 80076e2:	d901      	bls.n	80076e8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80076e4:	2303      	movs	r3, #3
 80076e6:	e151      	b.n	800798c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80076e8:	4b80      	ldr	r3, [pc, #512]	; (80078ec <HAL_RCC_OscConfig+0x784>)
 80076ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076ee:	f003 0302 	and.w	r3, r3, #2
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d1ed      	bne.n	80076d2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80076f6:	7ffb      	ldrb	r3, [r7, #31]
 80076f8:	2b01      	cmp	r3, #1
 80076fa:	d105      	bne.n	8007708 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80076fc:	4b7b      	ldr	r3, [pc, #492]	; (80078ec <HAL_RCC_OscConfig+0x784>)
 80076fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007700:	4a7a      	ldr	r2, [pc, #488]	; (80078ec <HAL_RCC_OscConfig+0x784>)
 8007702:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007706:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	f003 0320 	and.w	r3, r3, #32
 8007710:	2b00      	cmp	r3, #0
 8007712:	d03c      	beq.n	800778e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007718:	2b00      	cmp	r3, #0
 800771a:	d01c      	beq.n	8007756 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800771c:	4b73      	ldr	r3, [pc, #460]	; (80078ec <HAL_RCC_OscConfig+0x784>)
 800771e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007722:	4a72      	ldr	r2, [pc, #456]	; (80078ec <HAL_RCC_OscConfig+0x784>)
 8007724:	f043 0301 	orr.w	r3, r3, #1
 8007728:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800772c:	f7fe fa56 	bl	8005bdc <HAL_GetTick>
 8007730:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007732:	e008      	b.n	8007746 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007734:	f7fe fa52 	bl	8005bdc <HAL_GetTick>
 8007738:	4602      	mov	r2, r0
 800773a:	693b      	ldr	r3, [r7, #16]
 800773c:	1ad3      	subs	r3, r2, r3
 800773e:	2b02      	cmp	r3, #2
 8007740:	d901      	bls.n	8007746 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8007742:	2303      	movs	r3, #3
 8007744:	e122      	b.n	800798c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007746:	4b69      	ldr	r3, [pc, #420]	; (80078ec <HAL_RCC_OscConfig+0x784>)
 8007748:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800774c:	f003 0302 	and.w	r3, r3, #2
 8007750:	2b00      	cmp	r3, #0
 8007752:	d0ef      	beq.n	8007734 <HAL_RCC_OscConfig+0x5cc>
 8007754:	e01b      	b.n	800778e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007756:	4b65      	ldr	r3, [pc, #404]	; (80078ec <HAL_RCC_OscConfig+0x784>)
 8007758:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800775c:	4a63      	ldr	r2, [pc, #396]	; (80078ec <HAL_RCC_OscConfig+0x784>)
 800775e:	f023 0301 	bic.w	r3, r3, #1
 8007762:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007766:	f7fe fa39 	bl	8005bdc <HAL_GetTick>
 800776a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800776c:	e008      	b.n	8007780 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800776e:	f7fe fa35 	bl	8005bdc <HAL_GetTick>
 8007772:	4602      	mov	r2, r0
 8007774:	693b      	ldr	r3, [r7, #16]
 8007776:	1ad3      	subs	r3, r2, r3
 8007778:	2b02      	cmp	r3, #2
 800777a:	d901      	bls.n	8007780 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800777c:	2303      	movs	r3, #3
 800777e:	e105      	b.n	800798c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007780:	4b5a      	ldr	r3, [pc, #360]	; (80078ec <HAL_RCC_OscConfig+0x784>)
 8007782:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007786:	f003 0302 	and.w	r3, r3, #2
 800778a:	2b00      	cmp	r3, #0
 800778c:	d1ef      	bne.n	800776e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007792:	2b00      	cmp	r3, #0
 8007794:	f000 80f9 	beq.w	800798a <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800779c:	2b02      	cmp	r3, #2
 800779e:	f040 80cf 	bne.w	8007940 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80077a2:	4b52      	ldr	r3, [pc, #328]	; (80078ec <HAL_RCC_OscConfig+0x784>)
 80077a4:	68db      	ldr	r3, [r3, #12]
 80077a6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80077a8:	697b      	ldr	r3, [r7, #20]
 80077aa:	f003 0203 	and.w	r2, r3, #3
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077b2:	429a      	cmp	r2, r3
 80077b4:	d12c      	bne.n	8007810 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80077b6:	697b      	ldr	r3, [r7, #20]
 80077b8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077c0:	3b01      	subs	r3, #1
 80077c2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80077c4:	429a      	cmp	r2, r3
 80077c6:	d123      	bne.n	8007810 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80077c8:	697b      	ldr	r3, [r7, #20]
 80077ca:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077d2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80077d4:	429a      	cmp	r2, r3
 80077d6:	d11b      	bne.n	8007810 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80077d8:	697b      	ldr	r3, [r7, #20]
 80077da:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077e2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80077e4:	429a      	cmp	r2, r3
 80077e6:	d113      	bne.n	8007810 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80077e8:	697b      	ldr	r3, [r7, #20]
 80077ea:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077f2:	085b      	lsrs	r3, r3, #1
 80077f4:	3b01      	subs	r3, #1
 80077f6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80077f8:	429a      	cmp	r2, r3
 80077fa:	d109      	bne.n	8007810 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80077fc:	697b      	ldr	r3, [r7, #20]
 80077fe:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007806:	085b      	lsrs	r3, r3, #1
 8007808:	3b01      	subs	r3, #1
 800780a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800780c:	429a      	cmp	r2, r3
 800780e:	d071      	beq.n	80078f4 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007810:	69bb      	ldr	r3, [r7, #24]
 8007812:	2b0c      	cmp	r3, #12
 8007814:	d068      	beq.n	80078e8 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8007816:	4b35      	ldr	r3, [pc, #212]	; (80078ec <HAL_RCC_OscConfig+0x784>)
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800781e:	2b00      	cmp	r3, #0
 8007820:	d105      	bne.n	800782e <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8007822:	4b32      	ldr	r3, [pc, #200]	; (80078ec <HAL_RCC_OscConfig+0x784>)
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800782a:	2b00      	cmp	r3, #0
 800782c:	d001      	beq.n	8007832 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800782e:	2301      	movs	r3, #1
 8007830:	e0ac      	b.n	800798c <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8007832:	4b2e      	ldr	r3, [pc, #184]	; (80078ec <HAL_RCC_OscConfig+0x784>)
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	4a2d      	ldr	r2, [pc, #180]	; (80078ec <HAL_RCC_OscConfig+0x784>)
 8007838:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800783c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800783e:	f7fe f9cd 	bl	8005bdc <HAL_GetTick>
 8007842:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007844:	e008      	b.n	8007858 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007846:	f7fe f9c9 	bl	8005bdc <HAL_GetTick>
 800784a:	4602      	mov	r2, r0
 800784c:	693b      	ldr	r3, [r7, #16]
 800784e:	1ad3      	subs	r3, r2, r3
 8007850:	2b02      	cmp	r3, #2
 8007852:	d901      	bls.n	8007858 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8007854:	2303      	movs	r3, #3
 8007856:	e099      	b.n	800798c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007858:	4b24      	ldr	r3, [pc, #144]	; (80078ec <HAL_RCC_OscConfig+0x784>)
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007860:	2b00      	cmp	r3, #0
 8007862:	d1f0      	bne.n	8007846 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007864:	4b21      	ldr	r3, [pc, #132]	; (80078ec <HAL_RCC_OscConfig+0x784>)
 8007866:	68da      	ldr	r2, [r3, #12]
 8007868:	4b21      	ldr	r3, [pc, #132]	; (80078f0 <HAL_RCC_OscConfig+0x788>)
 800786a:	4013      	ands	r3, r2
 800786c:	687a      	ldr	r2, [r7, #4]
 800786e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8007870:	687a      	ldr	r2, [r7, #4]
 8007872:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007874:	3a01      	subs	r2, #1
 8007876:	0112      	lsls	r2, r2, #4
 8007878:	4311      	orrs	r1, r2
 800787a:	687a      	ldr	r2, [r7, #4]
 800787c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800787e:	0212      	lsls	r2, r2, #8
 8007880:	4311      	orrs	r1, r2
 8007882:	687a      	ldr	r2, [r7, #4]
 8007884:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007886:	0852      	lsrs	r2, r2, #1
 8007888:	3a01      	subs	r2, #1
 800788a:	0552      	lsls	r2, r2, #21
 800788c:	4311      	orrs	r1, r2
 800788e:	687a      	ldr	r2, [r7, #4]
 8007890:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8007892:	0852      	lsrs	r2, r2, #1
 8007894:	3a01      	subs	r2, #1
 8007896:	0652      	lsls	r2, r2, #25
 8007898:	4311      	orrs	r1, r2
 800789a:	687a      	ldr	r2, [r7, #4]
 800789c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800789e:	06d2      	lsls	r2, r2, #27
 80078a0:	430a      	orrs	r2, r1
 80078a2:	4912      	ldr	r1, [pc, #72]	; (80078ec <HAL_RCC_OscConfig+0x784>)
 80078a4:	4313      	orrs	r3, r2
 80078a6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80078a8:	4b10      	ldr	r3, [pc, #64]	; (80078ec <HAL_RCC_OscConfig+0x784>)
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	4a0f      	ldr	r2, [pc, #60]	; (80078ec <HAL_RCC_OscConfig+0x784>)
 80078ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80078b2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80078b4:	4b0d      	ldr	r3, [pc, #52]	; (80078ec <HAL_RCC_OscConfig+0x784>)
 80078b6:	68db      	ldr	r3, [r3, #12]
 80078b8:	4a0c      	ldr	r2, [pc, #48]	; (80078ec <HAL_RCC_OscConfig+0x784>)
 80078ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80078be:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80078c0:	f7fe f98c 	bl	8005bdc <HAL_GetTick>
 80078c4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80078c6:	e008      	b.n	80078da <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80078c8:	f7fe f988 	bl	8005bdc <HAL_GetTick>
 80078cc:	4602      	mov	r2, r0
 80078ce:	693b      	ldr	r3, [r7, #16]
 80078d0:	1ad3      	subs	r3, r2, r3
 80078d2:	2b02      	cmp	r3, #2
 80078d4:	d901      	bls.n	80078da <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80078d6:	2303      	movs	r3, #3
 80078d8:	e058      	b.n	800798c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80078da:	4b04      	ldr	r3, [pc, #16]	; (80078ec <HAL_RCC_OscConfig+0x784>)
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d0f0      	beq.n	80078c8 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80078e6:	e050      	b.n	800798a <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80078e8:	2301      	movs	r3, #1
 80078ea:	e04f      	b.n	800798c <HAL_RCC_OscConfig+0x824>
 80078ec:	40021000 	.word	0x40021000
 80078f0:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80078f4:	4b27      	ldr	r3, [pc, #156]	; (8007994 <HAL_RCC_OscConfig+0x82c>)
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d144      	bne.n	800798a <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8007900:	4b24      	ldr	r3, [pc, #144]	; (8007994 <HAL_RCC_OscConfig+0x82c>)
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	4a23      	ldr	r2, [pc, #140]	; (8007994 <HAL_RCC_OscConfig+0x82c>)
 8007906:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800790a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800790c:	4b21      	ldr	r3, [pc, #132]	; (8007994 <HAL_RCC_OscConfig+0x82c>)
 800790e:	68db      	ldr	r3, [r3, #12]
 8007910:	4a20      	ldr	r2, [pc, #128]	; (8007994 <HAL_RCC_OscConfig+0x82c>)
 8007912:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007916:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007918:	f7fe f960 	bl	8005bdc <HAL_GetTick>
 800791c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800791e:	e008      	b.n	8007932 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007920:	f7fe f95c 	bl	8005bdc <HAL_GetTick>
 8007924:	4602      	mov	r2, r0
 8007926:	693b      	ldr	r3, [r7, #16]
 8007928:	1ad3      	subs	r3, r2, r3
 800792a:	2b02      	cmp	r3, #2
 800792c:	d901      	bls.n	8007932 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 800792e:	2303      	movs	r3, #3
 8007930:	e02c      	b.n	800798c <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007932:	4b18      	ldr	r3, [pc, #96]	; (8007994 <HAL_RCC_OscConfig+0x82c>)
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800793a:	2b00      	cmp	r3, #0
 800793c:	d0f0      	beq.n	8007920 <HAL_RCC_OscConfig+0x7b8>
 800793e:	e024      	b.n	800798a <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007940:	69bb      	ldr	r3, [r7, #24]
 8007942:	2b0c      	cmp	r3, #12
 8007944:	d01f      	beq.n	8007986 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007946:	4b13      	ldr	r3, [pc, #76]	; (8007994 <HAL_RCC_OscConfig+0x82c>)
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	4a12      	ldr	r2, [pc, #72]	; (8007994 <HAL_RCC_OscConfig+0x82c>)
 800794c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007950:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007952:	f7fe f943 	bl	8005bdc <HAL_GetTick>
 8007956:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007958:	e008      	b.n	800796c <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800795a:	f7fe f93f 	bl	8005bdc <HAL_GetTick>
 800795e:	4602      	mov	r2, r0
 8007960:	693b      	ldr	r3, [r7, #16]
 8007962:	1ad3      	subs	r3, r2, r3
 8007964:	2b02      	cmp	r3, #2
 8007966:	d901      	bls.n	800796c <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8007968:	2303      	movs	r3, #3
 800796a:	e00f      	b.n	800798c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800796c:	4b09      	ldr	r3, [pc, #36]	; (8007994 <HAL_RCC_OscConfig+0x82c>)
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007974:	2b00      	cmp	r3, #0
 8007976:	d1f0      	bne.n	800795a <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8007978:	4b06      	ldr	r3, [pc, #24]	; (8007994 <HAL_RCC_OscConfig+0x82c>)
 800797a:	68da      	ldr	r2, [r3, #12]
 800797c:	4905      	ldr	r1, [pc, #20]	; (8007994 <HAL_RCC_OscConfig+0x82c>)
 800797e:	4b06      	ldr	r3, [pc, #24]	; (8007998 <HAL_RCC_OscConfig+0x830>)
 8007980:	4013      	ands	r3, r2
 8007982:	60cb      	str	r3, [r1, #12]
 8007984:	e001      	b.n	800798a <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8007986:	2301      	movs	r3, #1
 8007988:	e000      	b.n	800798c <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800798a:	2300      	movs	r3, #0
}
 800798c:	4618      	mov	r0, r3
 800798e:	3720      	adds	r7, #32
 8007990:	46bd      	mov	sp, r7
 8007992:	bd80      	pop	{r7, pc}
 8007994:	40021000 	.word	0x40021000
 8007998:	feeefffc 	.word	0xfeeefffc

0800799c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800799c:	b580      	push	{r7, lr}
 800799e:	b086      	sub	sp, #24
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
 80079a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80079a6:	2300      	movs	r3, #0
 80079a8:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d101      	bne.n	80079b4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80079b0:	2301      	movs	r3, #1
 80079b2:	e11d      	b.n	8007bf0 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80079b4:	4b90      	ldr	r3, [pc, #576]	; (8007bf8 <HAL_RCC_ClockConfig+0x25c>)
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	f003 030f 	and.w	r3, r3, #15
 80079bc:	683a      	ldr	r2, [r7, #0]
 80079be:	429a      	cmp	r2, r3
 80079c0:	d910      	bls.n	80079e4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80079c2:	4b8d      	ldr	r3, [pc, #564]	; (8007bf8 <HAL_RCC_ClockConfig+0x25c>)
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	f023 020f 	bic.w	r2, r3, #15
 80079ca:	498b      	ldr	r1, [pc, #556]	; (8007bf8 <HAL_RCC_ClockConfig+0x25c>)
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	4313      	orrs	r3, r2
 80079d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80079d2:	4b89      	ldr	r3, [pc, #548]	; (8007bf8 <HAL_RCC_ClockConfig+0x25c>)
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f003 030f 	and.w	r3, r3, #15
 80079da:	683a      	ldr	r2, [r7, #0]
 80079dc:	429a      	cmp	r2, r3
 80079de:	d001      	beq.n	80079e4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80079e0:	2301      	movs	r3, #1
 80079e2:	e105      	b.n	8007bf0 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	f003 0302 	and.w	r3, r3, #2
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d010      	beq.n	8007a12 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	689a      	ldr	r2, [r3, #8]
 80079f4:	4b81      	ldr	r3, [pc, #516]	; (8007bfc <HAL_RCC_ClockConfig+0x260>)
 80079f6:	689b      	ldr	r3, [r3, #8]
 80079f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80079fc:	429a      	cmp	r2, r3
 80079fe:	d908      	bls.n	8007a12 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007a00:	4b7e      	ldr	r3, [pc, #504]	; (8007bfc <HAL_RCC_ClockConfig+0x260>)
 8007a02:	689b      	ldr	r3, [r3, #8]
 8007a04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	689b      	ldr	r3, [r3, #8]
 8007a0c:	497b      	ldr	r1, [pc, #492]	; (8007bfc <HAL_RCC_ClockConfig+0x260>)
 8007a0e:	4313      	orrs	r3, r2
 8007a10:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	f003 0301 	and.w	r3, r3, #1
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d079      	beq.n	8007b12 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	685b      	ldr	r3, [r3, #4]
 8007a22:	2b03      	cmp	r3, #3
 8007a24:	d11e      	bne.n	8007a64 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007a26:	4b75      	ldr	r3, [pc, #468]	; (8007bfc <HAL_RCC_ClockConfig+0x260>)
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d101      	bne.n	8007a36 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8007a32:	2301      	movs	r3, #1
 8007a34:	e0dc      	b.n	8007bf0 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8007a36:	f000 fa3b 	bl	8007eb0 <RCC_GetSysClockFreqFromPLLSource>
 8007a3a:	4603      	mov	r3, r0
 8007a3c:	4a70      	ldr	r2, [pc, #448]	; (8007c00 <HAL_RCC_ClockConfig+0x264>)
 8007a3e:	4293      	cmp	r3, r2
 8007a40:	d946      	bls.n	8007ad0 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8007a42:	4b6e      	ldr	r3, [pc, #440]	; (8007bfc <HAL_RCC_ClockConfig+0x260>)
 8007a44:	689b      	ldr	r3, [r3, #8]
 8007a46:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d140      	bne.n	8007ad0 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007a4e:	4b6b      	ldr	r3, [pc, #428]	; (8007bfc <HAL_RCC_ClockConfig+0x260>)
 8007a50:	689b      	ldr	r3, [r3, #8]
 8007a52:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007a56:	4a69      	ldr	r2, [pc, #420]	; (8007bfc <HAL_RCC_ClockConfig+0x260>)
 8007a58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a5c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8007a5e:	2380      	movs	r3, #128	; 0x80
 8007a60:	617b      	str	r3, [r7, #20]
 8007a62:	e035      	b.n	8007ad0 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	685b      	ldr	r3, [r3, #4]
 8007a68:	2b02      	cmp	r3, #2
 8007a6a:	d107      	bne.n	8007a7c <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007a6c:	4b63      	ldr	r3, [pc, #396]	; (8007bfc <HAL_RCC_ClockConfig+0x260>)
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d115      	bne.n	8007aa4 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8007a78:	2301      	movs	r3, #1
 8007a7a:	e0b9      	b.n	8007bf0 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	685b      	ldr	r3, [r3, #4]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d107      	bne.n	8007a94 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007a84:	4b5d      	ldr	r3, [pc, #372]	; (8007bfc <HAL_RCC_ClockConfig+0x260>)
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	f003 0302 	and.w	r3, r3, #2
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d109      	bne.n	8007aa4 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8007a90:	2301      	movs	r3, #1
 8007a92:	e0ad      	b.n	8007bf0 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007a94:	4b59      	ldr	r3, [pc, #356]	; (8007bfc <HAL_RCC_ClockConfig+0x260>)
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d101      	bne.n	8007aa4 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8007aa0:	2301      	movs	r3, #1
 8007aa2:	e0a5      	b.n	8007bf0 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8007aa4:	f000 f8b4 	bl	8007c10 <HAL_RCC_GetSysClockFreq>
 8007aa8:	4603      	mov	r3, r0
 8007aaa:	4a55      	ldr	r2, [pc, #340]	; (8007c00 <HAL_RCC_ClockConfig+0x264>)
 8007aac:	4293      	cmp	r3, r2
 8007aae:	d90f      	bls.n	8007ad0 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8007ab0:	4b52      	ldr	r3, [pc, #328]	; (8007bfc <HAL_RCC_ClockConfig+0x260>)
 8007ab2:	689b      	ldr	r3, [r3, #8]
 8007ab4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d109      	bne.n	8007ad0 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007abc:	4b4f      	ldr	r3, [pc, #316]	; (8007bfc <HAL_RCC_ClockConfig+0x260>)
 8007abe:	689b      	ldr	r3, [r3, #8]
 8007ac0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007ac4:	4a4d      	ldr	r2, [pc, #308]	; (8007bfc <HAL_RCC_ClockConfig+0x260>)
 8007ac6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007aca:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8007acc:	2380      	movs	r3, #128	; 0x80
 8007ace:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007ad0:	4b4a      	ldr	r3, [pc, #296]	; (8007bfc <HAL_RCC_ClockConfig+0x260>)
 8007ad2:	689b      	ldr	r3, [r3, #8]
 8007ad4:	f023 0203 	bic.w	r2, r3, #3
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	685b      	ldr	r3, [r3, #4]
 8007adc:	4947      	ldr	r1, [pc, #284]	; (8007bfc <HAL_RCC_ClockConfig+0x260>)
 8007ade:	4313      	orrs	r3, r2
 8007ae0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007ae2:	f7fe f87b 	bl	8005bdc <HAL_GetTick>
 8007ae6:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007ae8:	e00a      	b.n	8007b00 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007aea:	f7fe f877 	bl	8005bdc <HAL_GetTick>
 8007aee:	4602      	mov	r2, r0
 8007af0:	693b      	ldr	r3, [r7, #16]
 8007af2:	1ad3      	subs	r3, r2, r3
 8007af4:	f241 3288 	movw	r2, #5000	; 0x1388
 8007af8:	4293      	cmp	r3, r2
 8007afa:	d901      	bls.n	8007b00 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8007afc:	2303      	movs	r3, #3
 8007afe:	e077      	b.n	8007bf0 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007b00:	4b3e      	ldr	r3, [pc, #248]	; (8007bfc <HAL_RCC_ClockConfig+0x260>)
 8007b02:	689b      	ldr	r3, [r3, #8]
 8007b04:	f003 020c 	and.w	r2, r3, #12
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	685b      	ldr	r3, [r3, #4]
 8007b0c:	009b      	lsls	r3, r3, #2
 8007b0e:	429a      	cmp	r2, r3
 8007b10:	d1eb      	bne.n	8007aea <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8007b12:	697b      	ldr	r3, [r7, #20]
 8007b14:	2b80      	cmp	r3, #128	; 0x80
 8007b16:	d105      	bne.n	8007b24 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8007b18:	4b38      	ldr	r3, [pc, #224]	; (8007bfc <HAL_RCC_ClockConfig+0x260>)
 8007b1a:	689b      	ldr	r3, [r3, #8]
 8007b1c:	4a37      	ldr	r2, [pc, #220]	; (8007bfc <HAL_RCC_ClockConfig+0x260>)
 8007b1e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007b22:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	f003 0302 	and.w	r3, r3, #2
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d010      	beq.n	8007b52 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	689a      	ldr	r2, [r3, #8]
 8007b34:	4b31      	ldr	r3, [pc, #196]	; (8007bfc <HAL_RCC_ClockConfig+0x260>)
 8007b36:	689b      	ldr	r3, [r3, #8]
 8007b38:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007b3c:	429a      	cmp	r2, r3
 8007b3e:	d208      	bcs.n	8007b52 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007b40:	4b2e      	ldr	r3, [pc, #184]	; (8007bfc <HAL_RCC_ClockConfig+0x260>)
 8007b42:	689b      	ldr	r3, [r3, #8]
 8007b44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	689b      	ldr	r3, [r3, #8]
 8007b4c:	492b      	ldr	r1, [pc, #172]	; (8007bfc <HAL_RCC_ClockConfig+0x260>)
 8007b4e:	4313      	orrs	r3, r2
 8007b50:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007b52:	4b29      	ldr	r3, [pc, #164]	; (8007bf8 <HAL_RCC_ClockConfig+0x25c>)
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	f003 030f 	and.w	r3, r3, #15
 8007b5a:	683a      	ldr	r2, [r7, #0]
 8007b5c:	429a      	cmp	r2, r3
 8007b5e:	d210      	bcs.n	8007b82 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007b60:	4b25      	ldr	r3, [pc, #148]	; (8007bf8 <HAL_RCC_ClockConfig+0x25c>)
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	f023 020f 	bic.w	r2, r3, #15
 8007b68:	4923      	ldr	r1, [pc, #140]	; (8007bf8 <HAL_RCC_ClockConfig+0x25c>)
 8007b6a:	683b      	ldr	r3, [r7, #0]
 8007b6c:	4313      	orrs	r3, r2
 8007b6e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007b70:	4b21      	ldr	r3, [pc, #132]	; (8007bf8 <HAL_RCC_ClockConfig+0x25c>)
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	f003 030f 	and.w	r3, r3, #15
 8007b78:	683a      	ldr	r2, [r7, #0]
 8007b7a:	429a      	cmp	r2, r3
 8007b7c:	d001      	beq.n	8007b82 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8007b7e:	2301      	movs	r3, #1
 8007b80:	e036      	b.n	8007bf0 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	f003 0304 	and.w	r3, r3, #4
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d008      	beq.n	8007ba0 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007b8e:	4b1b      	ldr	r3, [pc, #108]	; (8007bfc <HAL_RCC_ClockConfig+0x260>)
 8007b90:	689b      	ldr	r3, [r3, #8]
 8007b92:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	68db      	ldr	r3, [r3, #12]
 8007b9a:	4918      	ldr	r1, [pc, #96]	; (8007bfc <HAL_RCC_ClockConfig+0x260>)
 8007b9c:	4313      	orrs	r3, r2
 8007b9e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	f003 0308 	and.w	r3, r3, #8
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d009      	beq.n	8007bc0 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007bac:	4b13      	ldr	r3, [pc, #76]	; (8007bfc <HAL_RCC_ClockConfig+0x260>)
 8007bae:	689b      	ldr	r3, [r3, #8]
 8007bb0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	691b      	ldr	r3, [r3, #16]
 8007bb8:	00db      	lsls	r3, r3, #3
 8007bba:	4910      	ldr	r1, [pc, #64]	; (8007bfc <HAL_RCC_ClockConfig+0x260>)
 8007bbc:	4313      	orrs	r3, r2
 8007bbe:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007bc0:	f000 f826 	bl	8007c10 <HAL_RCC_GetSysClockFreq>
 8007bc4:	4602      	mov	r2, r0
 8007bc6:	4b0d      	ldr	r3, [pc, #52]	; (8007bfc <HAL_RCC_ClockConfig+0x260>)
 8007bc8:	689b      	ldr	r3, [r3, #8]
 8007bca:	091b      	lsrs	r3, r3, #4
 8007bcc:	f003 030f 	and.w	r3, r3, #15
 8007bd0:	490c      	ldr	r1, [pc, #48]	; (8007c04 <HAL_RCC_ClockConfig+0x268>)
 8007bd2:	5ccb      	ldrb	r3, [r1, r3]
 8007bd4:	f003 031f 	and.w	r3, r3, #31
 8007bd8:	fa22 f303 	lsr.w	r3, r2, r3
 8007bdc:	4a0a      	ldr	r2, [pc, #40]	; (8007c08 <HAL_RCC_ClockConfig+0x26c>)
 8007bde:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8007be0:	4b0a      	ldr	r3, [pc, #40]	; (8007c0c <HAL_RCC_ClockConfig+0x270>)
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	4618      	mov	r0, r3
 8007be6:	f7fd fd3b 	bl	8005660 <HAL_InitTick>
 8007bea:	4603      	mov	r3, r0
 8007bec:	73fb      	strb	r3, [r7, #15]

  return status;
 8007bee:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	3718      	adds	r7, #24
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	bd80      	pop	{r7, pc}
 8007bf8:	40022000 	.word	0x40022000
 8007bfc:	40021000 	.word	0x40021000
 8007c00:	04c4b400 	.word	0x04c4b400
 8007c04:	08011c50 	.word	0x08011c50
 8007c08:	20000010 	.word	0x20000010
 8007c0c:	20000014 	.word	0x20000014

08007c10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007c10:	b480      	push	{r7}
 8007c12:	b089      	sub	sp, #36	; 0x24
 8007c14:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8007c16:	2300      	movs	r3, #0
 8007c18:	61fb      	str	r3, [r7, #28]
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007c1e:	4b3e      	ldr	r3, [pc, #248]	; (8007d18 <HAL_RCC_GetSysClockFreq+0x108>)
 8007c20:	689b      	ldr	r3, [r3, #8]
 8007c22:	f003 030c 	and.w	r3, r3, #12
 8007c26:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007c28:	4b3b      	ldr	r3, [pc, #236]	; (8007d18 <HAL_RCC_GetSysClockFreq+0x108>)
 8007c2a:	68db      	ldr	r3, [r3, #12]
 8007c2c:	f003 0303 	and.w	r3, r3, #3
 8007c30:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8007c32:	693b      	ldr	r3, [r7, #16]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d005      	beq.n	8007c44 <HAL_RCC_GetSysClockFreq+0x34>
 8007c38:	693b      	ldr	r3, [r7, #16]
 8007c3a:	2b0c      	cmp	r3, #12
 8007c3c:	d121      	bne.n	8007c82 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	2b01      	cmp	r3, #1
 8007c42:	d11e      	bne.n	8007c82 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8007c44:	4b34      	ldr	r3, [pc, #208]	; (8007d18 <HAL_RCC_GetSysClockFreq+0x108>)
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	f003 0308 	and.w	r3, r3, #8
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d107      	bne.n	8007c60 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8007c50:	4b31      	ldr	r3, [pc, #196]	; (8007d18 <HAL_RCC_GetSysClockFreq+0x108>)
 8007c52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007c56:	0a1b      	lsrs	r3, r3, #8
 8007c58:	f003 030f 	and.w	r3, r3, #15
 8007c5c:	61fb      	str	r3, [r7, #28]
 8007c5e:	e005      	b.n	8007c6c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8007c60:	4b2d      	ldr	r3, [pc, #180]	; (8007d18 <HAL_RCC_GetSysClockFreq+0x108>)
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	091b      	lsrs	r3, r3, #4
 8007c66:	f003 030f 	and.w	r3, r3, #15
 8007c6a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8007c6c:	4a2b      	ldr	r2, [pc, #172]	; (8007d1c <HAL_RCC_GetSysClockFreq+0x10c>)
 8007c6e:	69fb      	ldr	r3, [r7, #28]
 8007c70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c74:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007c76:	693b      	ldr	r3, [r7, #16]
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d10d      	bne.n	8007c98 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8007c7c:	69fb      	ldr	r3, [r7, #28]
 8007c7e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007c80:	e00a      	b.n	8007c98 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8007c82:	693b      	ldr	r3, [r7, #16]
 8007c84:	2b04      	cmp	r3, #4
 8007c86:	d102      	bne.n	8007c8e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007c88:	4b25      	ldr	r3, [pc, #148]	; (8007d20 <HAL_RCC_GetSysClockFreq+0x110>)
 8007c8a:	61bb      	str	r3, [r7, #24]
 8007c8c:	e004      	b.n	8007c98 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8007c8e:	693b      	ldr	r3, [r7, #16]
 8007c90:	2b08      	cmp	r3, #8
 8007c92:	d101      	bne.n	8007c98 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007c94:	4b23      	ldr	r3, [pc, #140]	; (8007d24 <HAL_RCC_GetSysClockFreq+0x114>)
 8007c96:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8007c98:	693b      	ldr	r3, [r7, #16]
 8007c9a:	2b0c      	cmp	r3, #12
 8007c9c:	d134      	bne.n	8007d08 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007c9e:	4b1e      	ldr	r3, [pc, #120]	; (8007d18 <HAL_RCC_GetSysClockFreq+0x108>)
 8007ca0:	68db      	ldr	r3, [r3, #12]
 8007ca2:	f003 0303 	and.w	r3, r3, #3
 8007ca6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007ca8:	68bb      	ldr	r3, [r7, #8]
 8007caa:	2b02      	cmp	r3, #2
 8007cac:	d003      	beq.n	8007cb6 <HAL_RCC_GetSysClockFreq+0xa6>
 8007cae:	68bb      	ldr	r3, [r7, #8]
 8007cb0:	2b03      	cmp	r3, #3
 8007cb2:	d003      	beq.n	8007cbc <HAL_RCC_GetSysClockFreq+0xac>
 8007cb4:	e005      	b.n	8007cc2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8007cb6:	4b1a      	ldr	r3, [pc, #104]	; (8007d20 <HAL_RCC_GetSysClockFreq+0x110>)
 8007cb8:	617b      	str	r3, [r7, #20]
      break;
 8007cba:	e005      	b.n	8007cc8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8007cbc:	4b19      	ldr	r3, [pc, #100]	; (8007d24 <HAL_RCC_GetSysClockFreq+0x114>)
 8007cbe:	617b      	str	r3, [r7, #20]
      break;
 8007cc0:	e002      	b.n	8007cc8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8007cc2:	69fb      	ldr	r3, [r7, #28]
 8007cc4:	617b      	str	r3, [r7, #20]
      break;
 8007cc6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007cc8:	4b13      	ldr	r3, [pc, #76]	; (8007d18 <HAL_RCC_GetSysClockFreq+0x108>)
 8007cca:	68db      	ldr	r3, [r3, #12]
 8007ccc:	091b      	lsrs	r3, r3, #4
 8007cce:	f003 030f 	and.w	r3, r3, #15
 8007cd2:	3301      	adds	r3, #1
 8007cd4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8007cd6:	4b10      	ldr	r3, [pc, #64]	; (8007d18 <HAL_RCC_GetSysClockFreq+0x108>)
 8007cd8:	68db      	ldr	r3, [r3, #12]
 8007cda:	0a1b      	lsrs	r3, r3, #8
 8007cdc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ce0:	697a      	ldr	r2, [r7, #20]
 8007ce2:	fb03 f202 	mul.w	r2, r3, r2
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cec:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007cee:	4b0a      	ldr	r3, [pc, #40]	; (8007d18 <HAL_RCC_GetSysClockFreq+0x108>)
 8007cf0:	68db      	ldr	r3, [r3, #12]
 8007cf2:	0e5b      	lsrs	r3, r3, #25
 8007cf4:	f003 0303 	and.w	r3, r3, #3
 8007cf8:	3301      	adds	r3, #1
 8007cfa:	005b      	lsls	r3, r3, #1
 8007cfc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8007cfe:	697a      	ldr	r2, [r7, #20]
 8007d00:	683b      	ldr	r3, [r7, #0]
 8007d02:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d06:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8007d08:	69bb      	ldr	r3, [r7, #24]
}
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	3724      	adds	r7, #36	; 0x24
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d14:	4770      	bx	lr
 8007d16:	bf00      	nop
 8007d18:	40021000 	.word	0x40021000
 8007d1c:	08011c68 	.word	0x08011c68
 8007d20:	00f42400 	.word	0x00f42400
 8007d24:	007a1200 	.word	0x007a1200

08007d28 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007d28:	b480      	push	{r7}
 8007d2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007d2c:	4b03      	ldr	r3, [pc, #12]	; (8007d3c <HAL_RCC_GetHCLKFreq+0x14>)
 8007d2e:	681b      	ldr	r3, [r3, #0]
}
 8007d30:	4618      	mov	r0, r3
 8007d32:	46bd      	mov	sp, r7
 8007d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d38:	4770      	bx	lr
 8007d3a:	bf00      	nop
 8007d3c:	20000010 	.word	0x20000010

08007d40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007d40:	b580      	push	{r7, lr}
 8007d42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007d44:	f7ff fff0 	bl	8007d28 <HAL_RCC_GetHCLKFreq>
 8007d48:	4602      	mov	r2, r0
 8007d4a:	4b06      	ldr	r3, [pc, #24]	; (8007d64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007d4c:	689b      	ldr	r3, [r3, #8]
 8007d4e:	0a1b      	lsrs	r3, r3, #8
 8007d50:	f003 0307 	and.w	r3, r3, #7
 8007d54:	4904      	ldr	r1, [pc, #16]	; (8007d68 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007d56:	5ccb      	ldrb	r3, [r1, r3]
 8007d58:	f003 031f 	and.w	r3, r3, #31
 8007d5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007d60:	4618      	mov	r0, r3
 8007d62:	bd80      	pop	{r7, pc}
 8007d64:	40021000 	.word	0x40021000
 8007d68:	08011c60 	.word	0x08011c60

08007d6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007d70:	f7ff ffda 	bl	8007d28 <HAL_RCC_GetHCLKFreq>
 8007d74:	4602      	mov	r2, r0
 8007d76:	4b06      	ldr	r3, [pc, #24]	; (8007d90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007d78:	689b      	ldr	r3, [r3, #8]
 8007d7a:	0adb      	lsrs	r3, r3, #11
 8007d7c:	f003 0307 	and.w	r3, r3, #7
 8007d80:	4904      	ldr	r1, [pc, #16]	; (8007d94 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007d82:	5ccb      	ldrb	r3, [r1, r3]
 8007d84:	f003 031f 	and.w	r3, r3, #31
 8007d88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	bd80      	pop	{r7, pc}
 8007d90:	40021000 	.word	0x40021000
 8007d94:	08011c60 	.word	0x08011c60

08007d98 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007d98:	b480      	push	{r7}
 8007d9a:	b083      	sub	sp, #12
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
 8007da0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	220f      	movs	r2, #15
 8007da6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8007da8:	4b12      	ldr	r3, [pc, #72]	; (8007df4 <HAL_RCC_GetClockConfig+0x5c>)
 8007daa:	689b      	ldr	r3, [r3, #8]
 8007dac:	f003 0203 	and.w	r2, r3, #3
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8007db4:	4b0f      	ldr	r3, [pc, #60]	; (8007df4 <HAL_RCC_GetClockConfig+0x5c>)
 8007db6:	689b      	ldr	r3, [r3, #8]
 8007db8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8007dc0:	4b0c      	ldr	r3, [pc, #48]	; (8007df4 <HAL_RCC_GetClockConfig+0x5c>)
 8007dc2:	689b      	ldr	r3, [r3, #8]
 8007dc4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8007dcc:	4b09      	ldr	r3, [pc, #36]	; (8007df4 <HAL_RCC_GetClockConfig+0x5c>)
 8007dce:	689b      	ldr	r3, [r3, #8]
 8007dd0:	08db      	lsrs	r3, r3, #3
 8007dd2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8007dda:	4b07      	ldr	r3, [pc, #28]	; (8007df8 <HAL_RCC_GetClockConfig+0x60>)
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	f003 020f 	and.w	r2, r3, #15
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	601a      	str	r2, [r3, #0]
}
 8007de6:	bf00      	nop
 8007de8:	370c      	adds	r7, #12
 8007dea:	46bd      	mov	sp, r7
 8007dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df0:	4770      	bx	lr
 8007df2:	bf00      	nop
 8007df4:	40021000 	.word	0x40021000
 8007df8:	40022000 	.word	0x40022000

08007dfc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b086      	sub	sp, #24
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8007e04:	2300      	movs	r3, #0
 8007e06:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8007e08:	4b27      	ldr	r3, [pc, #156]	; (8007ea8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8007e0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d003      	beq.n	8007e1c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8007e14:	f7ff f8e4 	bl	8006fe0 <HAL_PWREx_GetVoltageRange>
 8007e18:	6178      	str	r0, [r7, #20]
 8007e1a:	e014      	b.n	8007e46 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8007e1c:	4b22      	ldr	r3, [pc, #136]	; (8007ea8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8007e1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e20:	4a21      	ldr	r2, [pc, #132]	; (8007ea8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8007e22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007e26:	6593      	str	r3, [r2, #88]	; 0x58
 8007e28:	4b1f      	ldr	r3, [pc, #124]	; (8007ea8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8007e2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e30:	60fb      	str	r3, [r7, #12]
 8007e32:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8007e34:	f7ff f8d4 	bl	8006fe0 <HAL_PWREx_GetVoltageRange>
 8007e38:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8007e3a:	4b1b      	ldr	r3, [pc, #108]	; (8007ea8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8007e3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e3e:	4a1a      	ldr	r2, [pc, #104]	; (8007ea8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8007e40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007e44:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007e46:	697b      	ldr	r3, [r7, #20]
 8007e48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e4c:	d10b      	bne.n	8007e66 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	2b80      	cmp	r3, #128	; 0x80
 8007e52:	d913      	bls.n	8007e7c <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2ba0      	cmp	r3, #160	; 0xa0
 8007e58:	d902      	bls.n	8007e60 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007e5a:	2302      	movs	r3, #2
 8007e5c:	613b      	str	r3, [r7, #16]
 8007e5e:	e00d      	b.n	8007e7c <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007e60:	2301      	movs	r3, #1
 8007e62:	613b      	str	r3, [r7, #16]
 8007e64:	e00a      	b.n	8007e7c <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	2b7f      	cmp	r3, #127	; 0x7f
 8007e6a:	d902      	bls.n	8007e72 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8007e6c:	2302      	movs	r3, #2
 8007e6e:	613b      	str	r3, [r7, #16]
 8007e70:	e004      	b.n	8007e7c <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	2b70      	cmp	r3, #112	; 0x70
 8007e76:	d101      	bne.n	8007e7c <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007e78:	2301      	movs	r3, #1
 8007e7a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007e7c:	4b0b      	ldr	r3, [pc, #44]	; (8007eac <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	f023 020f 	bic.w	r2, r3, #15
 8007e84:	4909      	ldr	r1, [pc, #36]	; (8007eac <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8007e86:	693b      	ldr	r3, [r7, #16]
 8007e88:	4313      	orrs	r3, r2
 8007e8a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8007e8c:	4b07      	ldr	r3, [pc, #28]	; (8007eac <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	f003 030f 	and.w	r3, r3, #15
 8007e94:	693a      	ldr	r2, [r7, #16]
 8007e96:	429a      	cmp	r2, r3
 8007e98:	d001      	beq.n	8007e9e <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8007e9a:	2301      	movs	r3, #1
 8007e9c:	e000      	b.n	8007ea0 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8007e9e:	2300      	movs	r3, #0
}
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	3718      	adds	r7, #24
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	bd80      	pop	{r7, pc}
 8007ea8:	40021000 	.word	0x40021000
 8007eac:	40022000 	.word	0x40022000

08007eb0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8007eb0:	b480      	push	{r7}
 8007eb2:	b087      	sub	sp, #28
 8007eb4:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007eb6:	4b2d      	ldr	r3, [pc, #180]	; (8007f6c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8007eb8:	68db      	ldr	r3, [r3, #12]
 8007eba:	f003 0303 	and.w	r3, r3, #3
 8007ebe:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	2b03      	cmp	r3, #3
 8007ec4:	d00b      	beq.n	8007ede <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	2b03      	cmp	r3, #3
 8007eca:	d825      	bhi.n	8007f18 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	2b01      	cmp	r3, #1
 8007ed0:	d008      	beq.n	8007ee4 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	2b02      	cmp	r3, #2
 8007ed6:	d11f      	bne.n	8007f18 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8007ed8:	4b25      	ldr	r3, [pc, #148]	; (8007f70 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8007eda:	613b      	str	r3, [r7, #16]
    break;
 8007edc:	e01f      	b.n	8007f1e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8007ede:	4b25      	ldr	r3, [pc, #148]	; (8007f74 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8007ee0:	613b      	str	r3, [r7, #16]
    break;
 8007ee2:	e01c      	b.n	8007f1e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8007ee4:	4b21      	ldr	r3, [pc, #132]	; (8007f6c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	f003 0308 	and.w	r3, r3, #8
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d107      	bne.n	8007f00 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8007ef0:	4b1e      	ldr	r3, [pc, #120]	; (8007f6c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8007ef2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007ef6:	0a1b      	lsrs	r3, r3, #8
 8007ef8:	f003 030f 	and.w	r3, r3, #15
 8007efc:	617b      	str	r3, [r7, #20]
 8007efe:	e005      	b.n	8007f0c <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8007f00:	4b1a      	ldr	r3, [pc, #104]	; (8007f6c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	091b      	lsrs	r3, r3, #4
 8007f06:	f003 030f 	and.w	r3, r3, #15
 8007f0a:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8007f0c:	4a1a      	ldr	r2, [pc, #104]	; (8007f78 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8007f0e:	697b      	ldr	r3, [r7, #20]
 8007f10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f14:	613b      	str	r3, [r7, #16]
    break;
 8007f16:	e002      	b.n	8007f1e <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8007f18:	2300      	movs	r3, #0
 8007f1a:	613b      	str	r3, [r7, #16]
    break;
 8007f1c:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007f1e:	4b13      	ldr	r3, [pc, #76]	; (8007f6c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8007f20:	68db      	ldr	r3, [r3, #12]
 8007f22:	091b      	lsrs	r3, r3, #4
 8007f24:	f003 030f 	and.w	r3, r3, #15
 8007f28:	3301      	adds	r3, #1
 8007f2a:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8007f2c:	4b0f      	ldr	r3, [pc, #60]	; (8007f6c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8007f2e:	68db      	ldr	r3, [r3, #12]
 8007f30:	0a1b      	lsrs	r3, r3, #8
 8007f32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f36:	693a      	ldr	r2, [r7, #16]
 8007f38:	fb03 f202 	mul.w	r2, r3, r2
 8007f3c:	68bb      	ldr	r3, [r7, #8]
 8007f3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f42:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007f44:	4b09      	ldr	r3, [pc, #36]	; (8007f6c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8007f46:	68db      	ldr	r3, [r3, #12]
 8007f48:	0e5b      	lsrs	r3, r3, #25
 8007f4a:	f003 0303 	and.w	r3, r3, #3
 8007f4e:	3301      	adds	r3, #1
 8007f50:	005b      	lsls	r3, r3, #1
 8007f52:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8007f54:	693a      	ldr	r2, [r7, #16]
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f5c:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8007f5e:	683b      	ldr	r3, [r7, #0]
}
 8007f60:	4618      	mov	r0, r3
 8007f62:	371c      	adds	r7, #28
 8007f64:	46bd      	mov	sp, r7
 8007f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6a:	4770      	bx	lr
 8007f6c:	40021000 	.word	0x40021000
 8007f70:	00f42400 	.word	0x00f42400
 8007f74:	007a1200 	.word	0x007a1200
 8007f78:	08011c68 	.word	0x08011c68

08007f7c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b086      	sub	sp, #24
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007f84:	2300      	movs	r3, #0
 8007f86:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007f88:	2300      	movs	r3, #0
 8007f8a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d040      	beq.n	800801a <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f9c:	2b80      	cmp	r3, #128	; 0x80
 8007f9e:	d02a      	beq.n	8007ff6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007fa0:	2b80      	cmp	r3, #128	; 0x80
 8007fa2:	d825      	bhi.n	8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8007fa4:	2b60      	cmp	r3, #96	; 0x60
 8007fa6:	d026      	beq.n	8007ff6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007fa8:	2b60      	cmp	r3, #96	; 0x60
 8007faa:	d821      	bhi.n	8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8007fac:	2b40      	cmp	r3, #64	; 0x40
 8007fae:	d006      	beq.n	8007fbe <HAL_RCCEx_PeriphCLKConfig+0x42>
 8007fb0:	2b40      	cmp	r3, #64	; 0x40
 8007fb2:	d81d      	bhi.n	8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d009      	beq.n	8007fcc <HAL_RCCEx_PeriphCLKConfig+0x50>
 8007fb8:	2b20      	cmp	r3, #32
 8007fba:	d010      	beq.n	8007fde <HAL_RCCEx_PeriphCLKConfig+0x62>
 8007fbc:	e018      	b.n	8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8007fbe:	4b89      	ldr	r3, [pc, #548]	; (80081e4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007fc0:	68db      	ldr	r3, [r3, #12]
 8007fc2:	4a88      	ldr	r2, [pc, #544]	; (80081e4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007fc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007fc8:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007fca:	e015      	b.n	8007ff8 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	3304      	adds	r3, #4
 8007fd0:	2100      	movs	r1, #0
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	f000 fb02 	bl	80085dc <RCCEx_PLLSAI1_Config>
 8007fd8:	4603      	mov	r3, r0
 8007fda:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007fdc:	e00c      	b.n	8007ff8 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	3320      	adds	r3, #32
 8007fe2:	2100      	movs	r1, #0
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	f000 fbed 	bl	80087c4 <RCCEx_PLLSAI2_Config>
 8007fea:	4603      	mov	r3, r0
 8007fec:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007fee:	e003      	b.n	8007ff8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007ff0:	2301      	movs	r3, #1
 8007ff2:	74fb      	strb	r3, [r7, #19]
      break;
 8007ff4:	e000      	b.n	8007ff8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8007ff6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007ff8:	7cfb      	ldrb	r3, [r7, #19]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d10b      	bne.n	8008016 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007ffe:	4b79      	ldr	r3, [pc, #484]	; (80081e4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008000:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008004:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800800c:	4975      	ldr	r1, [pc, #468]	; (80081e4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800800e:	4313      	orrs	r3, r2
 8008010:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8008014:	e001      	b.n	800801a <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008016:	7cfb      	ldrb	r3, [r7, #19]
 8008018:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008022:	2b00      	cmp	r3, #0
 8008024:	d047      	beq.n	80080b6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800802a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800802e:	d030      	beq.n	8008092 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8008030:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008034:	d82a      	bhi.n	800808c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8008036:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800803a:	d02a      	beq.n	8008092 <HAL_RCCEx_PeriphCLKConfig+0x116>
 800803c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008040:	d824      	bhi.n	800808c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8008042:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008046:	d008      	beq.n	800805a <HAL_RCCEx_PeriphCLKConfig+0xde>
 8008048:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800804c:	d81e      	bhi.n	800808c <HAL_RCCEx_PeriphCLKConfig+0x110>
 800804e:	2b00      	cmp	r3, #0
 8008050:	d00a      	beq.n	8008068 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8008052:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008056:	d010      	beq.n	800807a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8008058:	e018      	b.n	800808c <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800805a:	4b62      	ldr	r3, [pc, #392]	; (80081e4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800805c:	68db      	ldr	r3, [r3, #12]
 800805e:	4a61      	ldr	r2, [pc, #388]	; (80081e4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008060:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008064:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8008066:	e015      	b.n	8008094 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	3304      	adds	r3, #4
 800806c:	2100      	movs	r1, #0
 800806e:	4618      	mov	r0, r3
 8008070:	f000 fab4 	bl	80085dc <RCCEx_PLLSAI1_Config>
 8008074:	4603      	mov	r3, r0
 8008076:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8008078:	e00c      	b.n	8008094 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	3320      	adds	r3, #32
 800807e:	2100      	movs	r1, #0
 8008080:	4618      	mov	r0, r3
 8008082:	f000 fb9f 	bl	80087c4 <RCCEx_PLLSAI2_Config>
 8008086:	4603      	mov	r3, r0
 8008088:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800808a:	e003      	b.n	8008094 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800808c:	2301      	movs	r3, #1
 800808e:	74fb      	strb	r3, [r7, #19]
      break;
 8008090:	e000      	b.n	8008094 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8008092:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008094:	7cfb      	ldrb	r3, [r7, #19]
 8008096:	2b00      	cmp	r3, #0
 8008098:	d10b      	bne.n	80080b2 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800809a:	4b52      	ldr	r3, [pc, #328]	; (80081e4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800809c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80080a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080a8:	494e      	ldr	r1, [pc, #312]	; (80081e4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80080aa:	4313      	orrs	r3, r2
 80080ac:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80080b0:	e001      	b.n	80080b6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080b2:	7cfb      	ldrb	r3, [r7, #19]
 80080b4:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80080be:	2b00      	cmp	r3, #0
 80080c0:	f000 809f 	beq.w	8008202 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 80080c4:	2300      	movs	r3, #0
 80080c6:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80080c8:	4b46      	ldr	r3, [pc, #280]	; (80081e4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80080ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d101      	bne.n	80080d8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80080d4:	2301      	movs	r3, #1
 80080d6:	e000      	b.n	80080da <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80080d8:	2300      	movs	r3, #0
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d00d      	beq.n	80080fa <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80080de:	4b41      	ldr	r3, [pc, #260]	; (80081e4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80080e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080e2:	4a40      	ldr	r2, [pc, #256]	; (80081e4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80080e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80080e8:	6593      	str	r3, [r2, #88]	; 0x58
 80080ea:	4b3e      	ldr	r3, [pc, #248]	; (80081e4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80080ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80080f2:	60bb      	str	r3, [r7, #8]
 80080f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80080f6:	2301      	movs	r3, #1
 80080f8:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80080fa:	4b3b      	ldr	r3, [pc, #236]	; (80081e8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	4a3a      	ldr	r2, [pc, #232]	; (80081e8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8008100:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008104:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008106:	f7fd fd69 	bl	8005bdc <HAL_GetTick>
 800810a:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800810c:	e009      	b.n	8008122 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800810e:	f7fd fd65 	bl	8005bdc <HAL_GetTick>
 8008112:	4602      	mov	r2, r0
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	1ad3      	subs	r3, r2, r3
 8008118:	2b02      	cmp	r3, #2
 800811a:	d902      	bls.n	8008122 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 800811c:	2303      	movs	r3, #3
 800811e:	74fb      	strb	r3, [r7, #19]
        break;
 8008120:	e005      	b.n	800812e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8008122:	4b31      	ldr	r3, [pc, #196]	; (80081e8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800812a:	2b00      	cmp	r3, #0
 800812c:	d0ef      	beq.n	800810e <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 800812e:	7cfb      	ldrb	r3, [r7, #19]
 8008130:	2b00      	cmp	r3, #0
 8008132:	d15b      	bne.n	80081ec <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008134:	4b2b      	ldr	r3, [pc, #172]	; (80081e4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008136:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800813a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800813e:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008140:	697b      	ldr	r3, [r7, #20]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d01f      	beq.n	8008186 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800814c:	697a      	ldr	r2, [r7, #20]
 800814e:	429a      	cmp	r2, r3
 8008150:	d019      	beq.n	8008186 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008152:	4b24      	ldr	r3, [pc, #144]	; (80081e4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008154:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008158:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800815c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800815e:	4b21      	ldr	r3, [pc, #132]	; (80081e4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008160:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008164:	4a1f      	ldr	r2, [pc, #124]	; (80081e4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008166:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800816a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800816e:	4b1d      	ldr	r3, [pc, #116]	; (80081e4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008170:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008174:	4a1b      	ldr	r2, [pc, #108]	; (80081e4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008176:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800817a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800817e:	4a19      	ldr	r2, [pc, #100]	; (80081e4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008180:	697b      	ldr	r3, [r7, #20]
 8008182:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008186:	697b      	ldr	r3, [r7, #20]
 8008188:	f003 0301 	and.w	r3, r3, #1
 800818c:	2b00      	cmp	r3, #0
 800818e:	d016      	beq.n	80081be <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008190:	f7fd fd24 	bl	8005bdc <HAL_GetTick>
 8008194:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008196:	e00b      	b.n	80081b0 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008198:	f7fd fd20 	bl	8005bdc <HAL_GetTick>
 800819c:	4602      	mov	r2, r0
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	1ad3      	subs	r3, r2, r3
 80081a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80081a6:	4293      	cmp	r3, r2
 80081a8:	d902      	bls.n	80081b0 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 80081aa:	2303      	movs	r3, #3
 80081ac:	74fb      	strb	r3, [r7, #19]
            break;
 80081ae:	e006      	b.n	80081be <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80081b0:	4b0c      	ldr	r3, [pc, #48]	; (80081e4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80081b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081b6:	f003 0302 	and.w	r3, r3, #2
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d0ec      	beq.n	8008198 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 80081be:	7cfb      	ldrb	r3, [r7, #19]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d10c      	bne.n	80081de <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80081c4:	4b07      	ldr	r3, [pc, #28]	; (80081e4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80081c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081ca:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081d4:	4903      	ldr	r1, [pc, #12]	; (80081e4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80081d6:	4313      	orrs	r3, r2
 80081d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80081dc:	e008      	b.n	80081f0 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80081de:	7cfb      	ldrb	r3, [r7, #19]
 80081e0:	74bb      	strb	r3, [r7, #18]
 80081e2:	e005      	b.n	80081f0 <HAL_RCCEx_PeriphCLKConfig+0x274>
 80081e4:	40021000 	.word	0x40021000
 80081e8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081ec:	7cfb      	ldrb	r3, [r7, #19]
 80081ee:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80081f0:	7c7b      	ldrb	r3, [r7, #17]
 80081f2:	2b01      	cmp	r3, #1
 80081f4:	d105      	bne.n	8008202 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80081f6:	4ba0      	ldr	r3, [pc, #640]	; (8008478 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80081f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081fa:	4a9f      	ldr	r2, [pc, #636]	; (8008478 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80081fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008200:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	f003 0301 	and.w	r3, r3, #1
 800820a:	2b00      	cmp	r3, #0
 800820c:	d00a      	beq.n	8008224 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800820e:	4b9a      	ldr	r3, [pc, #616]	; (8008478 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008210:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008214:	f023 0203 	bic.w	r2, r3, #3
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800821c:	4996      	ldr	r1, [pc, #600]	; (8008478 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800821e:	4313      	orrs	r3, r2
 8008220:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	f003 0302 	and.w	r3, r3, #2
 800822c:	2b00      	cmp	r3, #0
 800822e:	d00a      	beq.n	8008246 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008230:	4b91      	ldr	r3, [pc, #580]	; (8008478 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008232:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008236:	f023 020c 	bic.w	r2, r3, #12
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800823e:	498e      	ldr	r1, [pc, #568]	; (8008478 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008240:	4313      	orrs	r3, r2
 8008242:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	f003 0304 	and.w	r3, r3, #4
 800824e:	2b00      	cmp	r3, #0
 8008250:	d00a      	beq.n	8008268 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008252:	4b89      	ldr	r3, [pc, #548]	; (8008478 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008254:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008258:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008260:	4985      	ldr	r1, [pc, #532]	; (8008478 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008262:	4313      	orrs	r3, r2
 8008264:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	f003 0308 	and.w	r3, r3, #8
 8008270:	2b00      	cmp	r3, #0
 8008272:	d00a      	beq.n	800828a <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008274:	4b80      	ldr	r3, [pc, #512]	; (8008478 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008276:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800827a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008282:	497d      	ldr	r1, [pc, #500]	; (8008478 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008284:	4313      	orrs	r3, r2
 8008286:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	f003 0310 	and.w	r3, r3, #16
 8008292:	2b00      	cmp	r3, #0
 8008294:	d00a      	beq.n	80082ac <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008296:	4b78      	ldr	r3, [pc, #480]	; (8008478 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008298:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800829c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80082a4:	4974      	ldr	r1, [pc, #464]	; (8008478 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80082a6:	4313      	orrs	r3, r2
 80082a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	f003 0320 	and.w	r3, r3, #32
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d00a      	beq.n	80082ce <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80082b8:	4b6f      	ldr	r3, [pc, #444]	; (8008478 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80082ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082be:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082c6:	496c      	ldr	r1, [pc, #432]	; (8008478 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80082c8:	4313      	orrs	r3, r2
 80082ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d00a      	beq.n	80082f0 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80082da:	4b67      	ldr	r3, [pc, #412]	; (8008478 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80082dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082e0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80082e8:	4963      	ldr	r1, [pc, #396]	; (8008478 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80082ea:	4313      	orrs	r3, r2
 80082ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d00a      	beq.n	8008312 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80082fc:	4b5e      	ldr	r3, [pc, #376]	; (8008478 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80082fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008302:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800830a:	495b      	ldr	r1, [pc, #364]	; (8008478 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800830c:	4313      	orrs	r3, r2
 800830e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800831a:	2b00      	cmp	r3, #0
 800831c:	d00a      	beq.n	8008334 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800831e:	4b56      	ldr	r3, [pc, #344]	; (8008478 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008320:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008324:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800832c:	4952      	ldr	r1, [pc, #328]	; (8008478 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800832e:	4313      	orrs	r3, r2
 8008330:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800833c:	2b00      	cmp	r3, #0
 800833e:	d00a      	beq.n	8008356 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008340:	4b4d      	ldr	r3, [pc, #308]	; (8008478 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008342:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008346:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800834e:	494a      	ldr	r1, [pc, #296]	; (8008478 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008350:	4313      	orrs	r3, r2
 8008352:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800835e:	2b00      	cmp	r3, #0
 8008360:	d00a      	beq.n	8008378 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008362:	4b45      	ldr	r3, [pc, #276]	; (8008478 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008364:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008368:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008370:	4941      	ldr	r1, [pc, #260]	; (8008478 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008372:	4313      	orrs	r3, r2
 8008374:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008380:	2b00      	cmp	r3, #0
 8008382:	d00a      	beq.n	800839a <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008384:	4b3c      	ldr	r3, [pc, #240]	; (8008478 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008386:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800838a:	f023 0203 	bic.w	r2, r3, #3
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008392:	4939      	ldr	r1, [pc, #228]	; (8008478 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008394:	4313      	orrs	r3, r2
 8008396:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d028      	beq.n	80083f8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80083a6:	4b34      	ldr	r3, [pc, #208]	; (8008478 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80083a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083ac:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80083b4:	4930      	ldr	r1, [pc, #192]	; (8008478 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80083b6:	4313      	orrs	r3, r2
 80083b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80083c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80083c4:	d106      	bne.n	80083d4 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80083c6:	4b2c      	ldr	r3, [pc, #176]	; (8008478 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80083c8:	68db      	ldr	r3, [r3, #12]
 80083ca:	4a2b      	ldr	r2, [pc, #172]	; (8008478 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80083cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80083d0:	60d3      	str	r3, [r2, #12]
 80083d2:	e011      	b.n	80083f8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80083d8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80083dc:	d10c      	bne.n	80083f8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	3304      	adds	r3, #4
 80083e2:	2101      	movs	r1, #1
 80083e4:	4618      	mov	r0, r3
 80083e6:	f000 f8f9 	bl	80085dc <RCCEx_PLLSAI1_Config>
 80083ea:	4603      	mov	r3, r0
 80083ec:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80083ee:	7cfb      	ldrb	r3, [r7, #19]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d001      	beq.n	80083f8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 80083f4:	7cfb      	ldrb	r3, [r7, #19]
 80083f6:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008400:	2b00      	cmp	r3, #0
 8008402:	d04d      	beq.n	80084a0 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008408:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800840c:	d108      	bne.n	8008420 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800840e:	4b1a      	ldr	r3, [pc, #104]	; (8008478 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008410:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008414:	4a18      	ldr	r2, [pc, #96]	; (8008478 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008416:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800841a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800841e:	e012      	b.n	8008446 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8008420:	4b15      	ldr	r3, [pc, #84]	; (8008478 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008422:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008426:	4a14      	ldr	r2, [pc, #80]	; (8008478 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008428:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800842c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8008430:	4b11      	ldr	r3, [pc, #68]	; (8008478 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008432:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008436:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800843e:	490e      	ldr	r1, [pc, #56]	; (8008478 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008440:	4313      	orrs	r3, r2
 8008442:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800844a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800844e:	d106      	bne.n	800845e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008450:	4b09      	ldr	r3, [pc, #36]	; (8008478 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008452:	68db      	ldr	r3, [r3, #12]
 8008454:	4a08      	ldr	r2, [pc, #32]	; (8008478 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008456:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800845a:	60d3      	str	r3, [r2, #12]
 800845c:	e020      	b.n	80084a0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008462:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008466:	d109      	bne.n	800847c <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8008468:	4b03      	ldr	r3, [pc, #12]	; (8008478 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800846a:	68db      	ldr	r3, [r3, #12]
 800846c:	4a02      	ldr	r2, [pc, #8]	; (8008478 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800846e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008472:	60d3      	str	r3, [r2, #12]
 8008474:	e014      	b.n	80084a0 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8008476:	bf00      	nop
 8008478:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008480:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008484:	d10c      	bne.n	80084a0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	3304      	adds	r3, #4
 800848a:	2101      	movs	r1, #1
 800848c:	4618      	mov	r0, r3
 800848e:	f000 f8a5 	bl	80085dc <RCCEx_PLLSAI1_Config>
 8008492:	4603      	mov	r3, r0
 8008494:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008496:	7cfb      	ldrb	r3, [r7, #19]
 8008498:	2b00      	cmp	r3, #0
 800849a:	d001      	beq.n	80084a0 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 800849c:	7cfb      	ldrb	r3, [r7, #19]
 800849e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d028      	beq.n	80084fe <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80084ac:	4b4a      	ldr	r3, [pc, #296]	; (80085d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80084ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084b2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80084ba:	4947      	ldr	r1, [pc, #284]	; (80085d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80084bc:	4313      	orrs	r3, r2
 80084be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80084c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80084ca:	d106      	bne.n	80084da <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80084cc:	4b42      	ldr	r3, [pc, #264]	; (80085d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80084ce:	68db      	ldr	r3, [r3, #12]
 80084d0:	4a41      	ldr	r2, [pc, #260]	; (80085d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80084d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80084d6:	60d3      	str	r3, [r2, #12]
 80084d8:	e011      	b.n	80084fe <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80084de:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80084e2:	d10c      	bne.n	80084fe <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	3304      	adds	r3, #4
 80084e8:	2101      	movs	r1, #1
 80084ea:	4618      	mov	r0, r3
 80084ec:	f000 f876 	bl	80085dc <RCCEx_PLLSAI1_Config>
 80084f0:	4603      	mov	r3, r0
 80084f2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80084f4:	7cfb      	ldrb	r3, [r7, #19]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d001      	beq.n	80084fe <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 80084fa:	7cfb      	ldrb	r3, [r7, #19]
 80084fc:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008506:	2b00      	cmp	r3, #0
 8008508:	d01e      	beq.n	8008548 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800850a:	4b33      	ldr	r3, [pc, #204]	; (80085d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800850c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008510:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800851a:	492f      	ldr	r1, [pc, #188]	; (80085d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800851c:	4313      	orrs	r3, r2
 800851e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008528:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800852c:	d10c      	bne.n	8008548 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	3304      	adds	r3, #4
 8008532:	2102      	movs	r1, #2
 8008534:	4618      	mov	r0, r3
 8008536:	f000 f851 	bl	80085dc <RCCEx_PLLSAI1_Config>
 800853a:	4603      	mov	r3, r0
 800853c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800853e:	7cfb      	ldrb	r3, [r7, #19]
 8008540:	2b00      	cmp	r3, #0
 8008542:	d001      	beq.n	8008548 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8008544:	7cfb      	ldrb	r3, [r7, #19]
 8008546:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008550:	2b00      	cmp	r3, #0
 8008552:	d00b      	beq.n	800856c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008554:	4b20      	ldr	r3, [pc, #128]	; (80085d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008556:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800855a:	f023 0204 	bic.w	r2, r3, #4
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008564:	491c      	ldr	r1, [pc, #112]	; (80085d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008566:	4313      	orrs	r3, r2
 8008568:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008574:	2b00      	cmp	r3, #0
 8008576:	d00b      	beq.n	8008590 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8008578:	4b17      	ldr	r3, [pc, #92]	; (80085d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800857a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800857e:	f023 0218 	bic.w	r2, r3, #24
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008588:	4913      	ldr	r1, [pc, #76]	; (80085d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800858a:	4313      	orrs	r3, r2
 800858c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008598:	2b00      	cmp	r3, #0
 800859a:	d017      	beq.n	80085cc <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800859c:	4b0e      	ldr	r3, [pc, #56]	; (80085d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800859e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80085a2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80085ac:	490a      	ldr	r1, [pc, #40]	; (80085d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80085ae:	4313      	orrs	r3, r2
 80085b0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80085ba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80085be:	d105      	bne.n	80085cc <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80085c0:	4b05      	ldr	r3, [pc, #20]	; (80085d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80085c2:	68db      	ldr	r3, [r3, #12]
 80085c4:	4a04      	ldr	r2, [pc, #16]	; (80085d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80085c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80085ca:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80085cc:	7cbb      	ldrb	r3, [r7, #18]
}
 80085ce:	4618      	mov	r0, r3
 80085d0:	3718      	adds	r7, #24
 80085d2:	46bd      	mov	sp, r7
 80085d4:	bd80      	pop	{r7, pc}
 80085d6:	bf00      	nop
 80085d8:	40021000 	.word	0x40021000

080085dc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80085dc:	b580      	push	{r7, lr}
 80085de:	b084      	sub	sp, #16
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
 80085e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80085e6:	2300      	movs	r3, #0
 80085e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80085ea:	4b72      	ldr	r3, [pc, #456]	; (80087b4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80085ec:	68db      	ldr	r3, [r3, #12]
 80085ee:	f003 0303 	and.w	r3, r3, #3
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d00e      	beq.n	8008614 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80085f6:	4b6f      	ldr	r3, [pc, #444]	; (80087b4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80085f8:	68db      	ldr	r3, [r3, #12]
 80085fa:	f003 0203 	and.w	r2, r3, #3
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	429a      	cmp	r2, r3
 8008604:	d103      	bne.n	800860e <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
       ||
 800860a:	2b00      	cmp	r3, #0
 800860c:	d142      	bne.n	8008694 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800860e:	2301      	movs	r3, #1
 8008610:	73fb      	strb	r3, [r7, #15]
 8008612:	e03f      	b.n	8008694 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	2b03      	cmp	r3, #3
 800861a:	d018      	beq.n	800864e <RCCEx_PLLSAI1_Config+0x72>
 800861c:	2b03      	cmp	r3, #3
 800861e:	d825      	bhi.n	800866c <RCCEx_PLLSAI1_Config+0x90>
 8008620:	2b01      	cmp	r3, #1
 8008622:	d002      	beq.n	800862a <RCCEx_PLLSAI1_Config+0x4e>
 8008624:	2b02      	cmp	r3, #2
 8008626:	d009      	beq.n	800863c <RCCEx_PLLSAI1_Config+0x60>
 8008628:	e020      	b.n	800866c <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800862a:	4b62      	ldr	r3, [pc, #392]	; (80087b4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	f003 0302 	and.w	r3, r3, #2
 8008632:	2b00      	cmp	r3, #0
 8008634:	d11d      	bne.n	8008672 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8008636:	2301      	movs	r3, #1
 8008638:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800863a:	e01a      	b.n	8008672 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800863c:	4b5d      	ldr	r3, [pc, #372]	; (80087b4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008644:	2b00      	cmp	r3, #0
 8008646:	d116      	bne.n	8008676 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8008648:	2301      	movs	r3, #1
 800864a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800864c:	e013      	b.n	8008676 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800864e:	4b59      	ldr	r3, [pc, #356]	; (80087b4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008656:	2b00      	cmp	r3, #0
 8008658:	d10f      	bne.n	800867a <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800865a:	4b56      	ldr	r3, [pc, #344]	; (80087b4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008662:	2b00      	cmp	r3, #0
 8008664:	d109      	bne.n	800867a <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8008666:	2301      	movs	r3, #1
 8008668:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800866a:	e006      	b.n	800867a <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 800866c:	2301      	movs	r3, #1
 800866e:	73fb      	strb	r3, [r7, #15]
      break;
 8008670:	e004      	b.n	800867c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8008672:	bf00      	nop
 8008674:	e002      	b.n	800867c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8008676:	bf00      	nop
 8008678:	e000      	b.n	800867c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800867a:	bf00      	nop
    }

    if(status == HAL_OK)
 800867c:	7bfb      	ldrb	r3, [r7, #15]
 800867e:	2b00      	cmp	r3, #0
 8008680:	d108      	bne.n	8008694 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8008682:	4b4c      	ldr	r3, [pc, #304]	; (80087b4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008684:	68db      	ldr	r3, [r3, #12]
 8008686:	f023 0203 	bic.w	r2, r3, #3
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	4949      	ldr	r1, [pc, #292]	; (80087b4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008690:	4313      	orrs	r3, r2
 8008692:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8008694:	7bfb      	ldrb	r3, [r7, #15]
 8008696:	2b00      	cmp	r3, #0
 8008698:	f040 8086 	bne.w	80087a8 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800869c:	4b45      	ldr	r3, [pc, #276]	; (80087b4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	4a44      	ldr	r2, [pc, #272]	; (80087b4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80086a2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80086a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80086a8:	f7fd fa98 	bl	8005bdc <HAL_GetTick>
 80086ac:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80086ae:	e009      	b.n	80086c4 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80086b0:	f7fd fa94 	bl	8005bdc <HAL_GetTick>
 80086b4:	4602      	mov	r2, r0
 80086b6:	68bb      	ldr	r3, [r7, #8]
 80086b8:	1ad3      	subs	r3, r2, r3
 80086ba:	2b02      	cmp	r3, #2
 80086bc:	d902      	bls.n	80086c4 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80086be:	2303      	movs	r3, #3
 80086c0:	73fb      	strb	r3, [r7, #15]
        break;
 80086c2:	e005      	b.n	80086d0 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80086c4:	4b3b      	ldr	r3, [pc, #236]	; (80087b4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d1ef      	bne.n	80086b0 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80086d0:	7bfb      	ldrb	r3, [r7, #15]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d168      	bne.n	80087a8 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80086d6:	683b      	ldr	r3, [r7, #0]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d113      	bne.n	8008704 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80086dc:	4b35      	ldr	r3, [pc, #212]	; (80087b4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80086de:	691a      	ldr	r2, [r3, #16]
 80086e0:	4b35      	ldr	r3, [pc, #212]	; (80087b8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80086e2:	4013      	ands	r3, r2
 80086e4:	687a      	ldr	r2, [r7, #4]
 80086e6:	6892      	ldr	r2, [r2, #8]
 80086e8:	0211      	lsls	r1, r2, #8
 80086ea:	687a      	ldr	r2, [r7, #4]
 80086ec:	68d2      	ldr	r2, [r2, #12]
 80086ee:	06d2      	lsls	r2, r2, #27
 80086f0:	4311      	orrs	r1, r2
 80086f2:	687a      	ldr	r2, [r7, #4]
 80086f4:	6852      	ldr	r2, [r2, #4]
 80086f6:	3a01      	subs	r2, #1
 80086f8:	0112      	lsls	r2, r2, #4
 80086fa:	430a      	orrs	r2, r1
 80086fc:	492d      	ldr	r1, [pc, #180]	; (80087b4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80086fe:	4313      	orrs	r3, r2
 8008700:	610b      	str	r3, [r1, #16]
 8008702:	e02d      	b.n	8008760 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8008704:	683b      	ldr	r3, [r7, #0]
 8008706:	2b01      	cmp	r3, #1
 8008708:	d115      	bne.n	8008736 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800870a:	4b2a      	ldr	r3, [pc, #168]	; (80087b4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800870c:	691a      	ldr	r2, [r3, #16]
 800870e:	4b2b      	ldr	r3, [pc, #172]	; (80087bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8008710:	4013      	ands	r3, r2
 8008712:	687a      	ldr	r2, [r7, #4]
 8008714:	6892      	ldr	r2, [r2, #8]
 8008716:	0211      	lsls	r1, r2, #8
 8008718:	687a      	ldr	r2, [r7, #4]
 800871a:	6912      	ldr	r2, [r2, #16]
 800871c:	0852      	lsrs	r2, r2, #1
 800871e:	3a01      	subs	r2, #1
 8008720:	0552      	lsls	r2, r2, #21
 8008722:	4311      	orrs	r1, r2
 8008724:	687a      	ldr	r2, [r7, #4]
 8008726:	6852      	ldr	r2, [r2, #4]
 8008728:	3a01      	subs	r2, #1
 800872a:	0112      	lsls	r2, r2, #4
 800872c:	430a      	orrs	r2, r1
 800872e:	4921      	ldr	r1, [pc, #132]	; (80087b4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008730:	4313      	orrs	r3, r2
 8008732:	610b      	str	r3, [r1, #16]
 8008734:	e014      	b.n	8008760 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008736:	4b1f      	ldr	r3, [pc, #124]	; (80087b4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008738:	691a      	ldr	r2, [r3, #16]
 800873a:	4b21      	ldr	r3, [pc, #132]	; (80087c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800873c:	4013      	ands	r3, r2
 800873e:	687a      	ldr	r2, [r7, #4]
 8008740:	6892      	ldr	r2, [r2, #8]
 8008742:	0211      	lsls	r1, r2, #8
 8008744:	687a      	ldr	r2, [r7, #4]
 8008746:	6952      	ldr	r2, [r2, #20]
 8008748:	0852      	lsrs	r2, r2, #1
 800874a:	3a01      	subs	r2, #1
 800874c:	0652      	lsls	r2, r2, #25
 800874e:	4311      	orrs	r1, r2
 8008750:	687a      	ldr	r2, [r7, #4]
 8008752:	6852      	ldr	r2, [r2, #4]
 8008754:	3a01      	subs	r2, #1
 8008756:	0112      	lsls	r2, r2, #4
 8008758:	430a      	orrs	r2, r1
 800875a:	4916      	ldr	r1, [pc, #88]	; (80087b4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800875c:	4313      	orrs	r3, r2
 800875e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8008760:	4b14      	ldr	r3, [pc, #80]	; (80087b4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	4a13      	ldr	r2, [pc, #76]	; (80087b4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008766:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800876a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800876c:	f7fd fa36 	bl	8005bdc <HAL_GetTick>
 8008770:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8008772:	e009      	b.n	8008788 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008774:	f7fd fa32 	bl	8005bdc <HAL_GetTick>
 8008778:	4602      	mov	r2, r0
 800877a:	68bb      	ldr	r3, [r7, #8]
 800877c:	1ad3      	subs	r3, r2, r3
 800877e:	2b02      	cmp	r3, #2
 8008780:	d902      	bls.n	8008788 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8008782:	2303      	movs	r3, #3
 8008784:	73fb      	strb	r3, [r7, #15]
          break;
 8008786:	e005      	b.n	8008794 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8008788:	4b0a      	ldr	r3, [pc, #40]	; (80087b4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008790:	2b00      	cmp	r3, #0
 8008792:	d0ef      	beq.n	8008774 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8008794:	7bfb      	ldrb	r3, [r7, #15]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d106      	bne.n	80087a8 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800879a:	4b06      	ldr	r3, [pc, #24]	; (80087b4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800879c:	691a      	ldr	r2, [r3, #16]
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	699b      	ldr	r3, [r3, #24]
 80087a2:	4904      	ldr	r1, [pc, #16]	; (80087b4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80087a4:	4313      	orrs	r3, r2
 80087a6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80087a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80087aa:	4618      	mov	r0, r3
 80087ac:	3710      	adds	r7, #16
 80087ae:	46bd      	mov	sp, r7
 80087b0:	bd80      	pop	{r7, pc}
 80087b2:	bf00      	nop
 80087b4:	40021000 	.word	0x40021000
 80087b8:	07ff800f 	.word	0x07ff800f
 80087bc:	ff9f800f 	.word	0xff9f800f
 80087c0:	f9ff800f 	.word	0xf9ff800f

080087c4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80087c4:	b580      	push	{r7, lr}
 80087c6:	b084      	sub	sp, #16
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]
 80087cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80087ce:	2300      	movs	r3, #0
 80087d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80087d2:	4b72      	ldr	r3, [pc, #456]	; (800899c <RCCEx_PLLSAI2_Config+0x1d8>)
 80087d4:	68db      	ldr	r3, [r3, #12]
 80087d6:	f003 0303 	and.w	r3, r3, #3
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d00e      	beq.n	80087fc <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80087de:	4b6f      	ldr	r3, [pc, #444]	; (800899c <RCCEx_PLLSAI2_Config+0x1d8>)
 80087e0:	68db      	ldr	r3, [r3, #12]
 80087e2:	f003 0203 	and.w	r2, r3, #3
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	429a      	cmp	r2, r3
 80087ec:	d103      	bne.n	80087f6 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
       ||
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d142      	bne.n	800887c <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80087f6:	2301      	movs	r3, #1
 80087f8:	73fb      	strb	r3, [r7, #15]
 80087fa:	e03f      	b.n	800887c <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	2b03      	cmp	r3, #3
 8008802:	d018      	beq.n	8008836 <RCCEx_PLLSAI2_Config+0x72>
 8008804:	2b03      	cmp	r3, #3
 8008806:	d825      	bhi.n	8008854 <RCCEx_PLLSAI2_Config+0x90>
 8008808:	2b01      	cmp	r3, #1
 800880a:	d002      	beq.n	8008812 <RCCEx_PLLSAI2_Config+0x4e>
 800880c:	2b02      	cmp	r3, #2
 800880e:	d009      	beq.n	8008824 <RCCEx_PLLSAI2_Config+0x60>
 8008810:	e020      	b.n	8008854 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8008812:	4b62      	ldr	r3, [pc, #392]	; (800899c <RCCEx_PLLSAI2_Config+0x1d8>)
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	f003 0302 	and.w	r3, r3, #2
 800881a:	2b00      	cmp	r3, #0
 800881c:	d11d      	bne.n	800885a <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 800881e:	2301      	movs	r3, #1
 8008820:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008822:	e01a      	b.n	800885a <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8008824:	4b5d      	ldr	r3, [pc, #372]	; (800899c <RCCEx_PLLSAI2_Config+0x1d8>)
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800882c:	2b00      	cmp	r3, #0
 800882e:	d116      	bne.n	800885e <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8008830:	2301      	movs	r3, #1
 8008832:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008834:	e013      	b.n	800885e <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8008836:	4b59      	ldr	r3, [pc, #356]	; (800899c <RCCEx_PLLSAI2_Config+0x1d8>)
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800883e:	2b00      	cmp	r3, #0
 8008840:	d10f      	bne.n	8008862 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8008842:	4b56      	ldr	r3, [pc, #344]	; (800899c <RCCEx_PLLSAI2_Config+0x1d8>)
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800884a:	2b00      	cmp	r3, #0
 800884c:	d109      	bne.n	8008862 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 800884e:	2301      	movs	r3, #1
 8008850:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008852:	e006      	b.n	8008862 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8008854:	2301      	movs	r3, #1
 8008856:	73fb      	strb	r3, [r7, #15]
      break;
 8008858:	e004      	b.n	8008864 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800885a:	bf00      	nop
 800885c:	e002      	b.n	8008864 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800885e:	bf00      	nop
 8008860:	e000      	b.n	8008864 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8008862:	bf00      	nop
    }

    if(status == HAL_OK)
 8008864:	7bfb      	ldrb	r3, [r7, #15]
 8008866:	2b00      	cmp	r3, #0
 8008868:	d108      	bne.n	800887c <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800886a:	4b4c      	ldr	r3, [pc, #304]	; (800899c <RCCEx_PLLSAI2_Config+0x1d8>)
 800886c:	68db      	ldr	r3, [r3, #12]
 800886e:	f023 0203 	bic.w	r2, r3, #3
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	4949      	ldr	r1, [pc, #292]	; (800899c <RCCEx_PLLSAI2_Config+0x1d8>)
 8008878:	4313      	orrs	r3, r2
 800887a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800887c:	7bfb      	ldrb	r3, [r7, #15]
 800887e:	2b00      	cmp	r3, #0
 8008880:	f040 8086 	bne.w	8008990 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8008884:	4b45      	ldr	r3, [pc, #276]	; (800899c <RCCEx_PLLSAI2_Config+0x1d8>)
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	4a44      	ldr	r2, [pc, #272]	; (800899c <RCCEx_PLLSAI2_Config+0x1d8>)
 800888a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800888e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008890:	f7fd f9a4 	bl	8005bdc <HAL_GetTick>
 8008894:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8008896:	e009      	b.n	80088ac <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8008898:	f7fd f9a0 	bl	8005bdc <HAL_GetTick>
 800889c:	4602      	mov	r2, r0
 800889e:	68bb      	ldr	r3, [r7, #8]
 80088a0:	1ad3      	subs	r3, r2, r3
 80088a2:	2b02      	cmp	r3, #2
 80088a4:	d902      	bls.n	80088ac <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80088a6:	2303      	movs	r3, #3
 80088a8:	73fb      	strb	r3, [r7, #15]
        break;
 80088aa:	e005      	b.n	80088b8 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80088ac:	4b3b      	ldr	r3, [pc, #236]	; (800899c <RCCEx_PLLSAI2_Config+0x1d8>)
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d1ef      	bne.n	8008898 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80088b8:	7bfb      	ldrb	r3, [r7, #15]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d168      	bne.n	8008990 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80088be:	683b      	ldr	r3, [r7, #0]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d113      	bne.n	80088ec <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80088c4:	4b35      	ldr	r3, [pc, #212]	; (800899c <RCCEx_PLLSAI2_Config+0x1d8>)
 80088c6:	695a      	ldr	r2, [r3, #20]
 80088c8:	4b35      	ldr	r3, [pc, #212]	; (80089a0 <RCCEx_PLLSAI2_Config+0x1dc>)
 80088ca:	4013      	ands	r3, r2
 80088cc:	687a      	ldr	r2, [r7, #4]
 80088ce:	6892      	ldr	r2, [r2, #8]
 80088d0:	0211      	lsls	r1, r2, #8
 80088d2:	687a      	ldr	r2, [r7, #4]
 80088d4:	68d2      	ldr	r2, [r2, #12]
 80088d6:	06d2      	lsls	r2, r2, #27
 80088d8:	4311      	orrs	r1, r2
 80088da:	687a      	ldr	r2, [r7, #4]
 80088dc:	6852      	ldr	r2, [r2, #4]
 80088de:	3a01      	subs	r2, #1
 80088e0:	0112      	lsls	r2, r2, #4
 80088e2:	430a      	orrs	r2, r1
 80088e4:	492d      	ldr	r1, [pc, #180]	; (800899c <RCCEx_PLLSAI2_Config+0x1d8>)
 80088e6:	4313      	orrs	r3, r2
 80088e8:	614b      	str	r3, [r1, #20]
 80088ea:	e02d      	b.n	8008948 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80088ec:	683b      	ldr	r3, [r7, #0]
 80088ee:	2b01      	cmp	r3, #1
 80088f0:	d115      	bne.n	800891e <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80088f2:	4b2a      	ldr	r3, [pc, #168]	; (800899c <RCCEx_PLLSAI2_Config+0x1d8>)
 80088f4:	695a      	ldr	r2, [r3, #20]
 80088f6:	4b2b      	ldr	r3, [pc, #172]	; (80089a4 <RCCEx_PLLSAI2_Config+0x1e0>)
 80088f8:	4013      	ands	r3, r2
 80088fa:	687a      	ldr	r2, [r7, #4]
 80088fc:	6892      	ldr	r2, [r2, #8]
 80088fe:	0211      	lsls	r1, r2, #8
 8008900:	687a      	ldr	r2, [r7, #4]
 8008902:	6912      	ldr	r2, [r2, #16]
 8008904:	0852      	lsrs	r2, r2, #1
 8008906:	3a01      	subs	r2, #1
 8008908:	0552      	lsls	r2, r2, #21
 800890a:	4311      	orrs	r1, r2
 800890c:	687a      	ldr	r2, [r7, #4]
 800890e:	6852      	ldr	r2, [r2, #4]
 8008910:	3a01      	subs	r2, #1
 8008912:	0112      	lsls	r2, r2, #4
 8008914:	430a      	orrs	r2, r1
 8008916:	4921      	ldr	r1, [pc, #132]	; (800899c <RCCEx_PLLSAI2_Config+0x1d8>)
 8008918:	4313      	orrs	r3, r2
 800891a:	614b      	str	r3, [r1, #20]
 800891c:	e014      	b.n	8008948 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800891e:	4b1f      	ldr	r3, [pc, #124]	; (800899c <RCCEx_PLLSAI2_Config+0x1d8>)
 8008920:	695a      	ldr	r2, [r3, #20]
 8008922:	4b21      	ldr	r3, [pc, #132]	; (80089a8 <RCCEx_PLLSAI2_Config+0x1e4>)
 8008924:	4013      	ands	r3, r2
 8008926:	687a      	ldr	r2, [r7, #4]
 8008928:	6892      	ldr	r2, [r2, #8]
 800892a:	0211      	lsls	r1, r2, #8
 800892c:	687a      	ldr	r2, [r7, #4]
 800892e:	6952      	ldr	r2, [r2, #20]
 8008930:	0852      	lsrs	r2, r2, #1
 8008932:	3a01      	subs	r2, #1
 8008934:	0652      	lsls	r2, r2, #25
 8008936:	4311      	orrs	r1, r2
 8008938:	687a      	ldr	r2, [r7, #4]
 800893a:	6852      	ldr	r2, [r2, #4]
 800893c:	3a01      	subs	r2, #1
 800893e:	0112      	lsls	r2, r2, #4
 8008940:	430a      	orrs	r2, r1
 8008942:	4916      	ldr	r1, [pc, #88]	; (800899c <RCCEx_PLLSAI2_Config+0x1d8>)
 8008944:	4313      	orrs	r3, r2
 8008946:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8008948:	4b14      	ldr	r3, [pc, #80]	; (800899c <RCCEx_PLLSAI2_Config+0x1d8>)
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	4a13      	ldr	r2, [pc, #76]	; (800899c <RCCEx_PLLSAI2_Config+0x1d8>)
 800894e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008952:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008954:	f7fd f942 	bl	8005bdc <HAL_GetTick>
 8008958:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800895a:	e009      	b.n	8008970 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800895c:	f7fd f93e 	bl	8005bdc <HAL_GetTick>
 8008960:	4602      	mov	r2, r0
 8008962:	68bb      	ldr	r3, [r7, #8]
 8008964:	1ad3      	subs	r3, r2, r3
 8008966:	2b02      	cmp	r3, #2
 8008968:	d902      	bls.n	8008970 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800896a:	2303      	movs	r3, #3
 800896c:	73fb      	strb	r3, [r7, #15]
          break;
 800896e:	e005      	b.n	800897c <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8008970:	4b0a      	ldr	r3, [pc, #40]	; (800899c <RCCEx_PLLSAI2_Config+0x1d8>)
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008978:	2b00      	cmp	r3, #0
 800897a:	d0ef      	beq.n	800895c <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800897c:	7bfb      	ldrb	r3, [r7, #15]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d106      	bne.n	8008990 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8008982:	4b06      	ldr	r3, [pc, #24]	; (800899c <RCCEx_PLLSAI2_Config+0x1d8>)
 8008984:	695a      	ldr	r2, [r3, #20]
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	699b      	ldr	r3, [r3, #24]
 800898a:	4904      	ldr	r1, [pc, #16]	; (800899c <RCCEx_PLLSAI2_Config+0x1d8>)
 800898c:	4313      	orrs	r3, r2
 800898e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8008990:	7bfb      	ldrb	r3, [r7, #15]
}
 8008992:	4618      	mov	r0, r3
 8008994:	3710      	adds	r7, #16
 8008996:	46bd      	mov	sp, r7
 8008998:	bd80      	pop	{r7, pc}
 800899a:	bf00      	nop
 800899c:	40021000 	.word	0x40021000
 80089a0:	07ff800f 	.word	0x07ff800f
 80089a4:	ff9f800f 	.word	0xff9f800f
 80089a8:	f9ff800f 	.word	0xf9ff800f

080089ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80089ac:	b580      	push	{r7, lr}
 80089ae:	b082      	sub	sp, #8
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d101      	bne.n	80089be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80089ba:	2301      	movs	r3, #1
 80089bc:	e049      	b.n	8008a52 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80089c4:	b2db      	uxtb	r3, r3
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d106      	bne.n	80089d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	2200      	movs	r2, #0
 80089ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80089d2:	6878      	ldr	r0, [r7, #4]
 80089d4:	f000 f841 	bl	8008a5a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	2202      	movs	r2, #2
 80089dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681a      	ldr	r2, [r3, #0]
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	3304      	adds	r3, #4
 80089e8:	4619      	mov	r1, r3
 80089ea:	4610      	mov	r0, r2
 80089ec:	f000 f9f8 	bl	8008de0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	2201      	movs	r2, #1
 80089f4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	2201      	movs	r2, #1
 80089fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	2201      	movs	r2, #1
 8008a04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	2201      	movs	r2, #1
 8008a0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	2201      	movs	r2, #1
 8008a14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	2201      	movs	r2, #1
 8008a1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	2201      	movs	r2, #1
 8008a24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	2201      	movs	r2, #1
 8008a2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	2201      	movs	r2, #1
 8008a34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	2201      	movs	r2, #1
 8008a3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	2201      	movs	r2, #1
 8008a44:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	2201      	movs	r2, #1
 8008a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008a50:	2300      	movs	r3, #0
}
 8008a52:	4618      	mov	r0, r3
 8008a54:	3708      	adds	r7, #8
 8008a56:	46bd      	mov	sp, r7
 8008a58:	bd80      	pop	{r7, pc}

08008a5a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8008a5a:	b480      	push	{r7}
 8008a5c:	b083      	sub	sp, #12
 8008a5e:	af00      	add	r7, sp, #0
 8008a60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8008a62:	bf00      	nop
 8008a64:	370c      	adds	r7, #12
 8008a66:	46bd      	mov	sp, r7
 8008a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6c:	4770      	bx	lr
	...

08008a70 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008a70:	b480      	push	{r7}
 8008a72:	b085      	sub	sp, #20
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a7e:	b2db      	uxtb	r3, r3
 8008a80:	2b01      	cmp	r3, #1
 8008a82:	d001      	beq.n	8008a88 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008a84:	2301      	movs	r3, #1
 8008a86:	e04f      	b.n	8008b28 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	2202      	movs	r2, #2
 8008a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	68da      	ldr	r2, [r3, #12]
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	f042 0201 	orr.w	r2, r2, #1
 8008a9e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	4a23      	ldr	r2, [pc, #140]	; (8008b34 <HAL_TIM_Base_Start_IT+0xc4>)
 8008aa6:	4293      	cmp	r3, r2
 8008aa8:	d01d      	beq.n	8008ae6 <HAL_TIM_Base_Start_IT+0x76>
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ab2:	d018      	beq.n	8008ae6 <HAL_TIM_Base_Start_IT+0x76>
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	4a1f      	ldr	r2, [pc, #124]	; (8008b38 <HAL_TIM_Base_Start_IT+0xc8>)
 8008aba:	4293      	cmp	r3, r2
 8008abc:	d013      	beq.n	8008ae6 <HAL_TIM_Base_Start_IT+0x76>
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	4a1e      	ldr	r2, [pc, #120]	; (8008b3c <HAL_TIM_Base_Start_IT+0xcc>)
 8008ac4:	4293      	cmp	r3, r2
 8008ac6:	d00e      	beq.n	8008ae6 <HAL_TIM_Base_Start_IT+0x76>
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	4a1c      	ldr	r2, [pc, #112]	; (8008b40 <HAL_TIM_Base_Start_IT+0xd0>)
 8008ace:	4293      	cmp	r3, r2
 8008ad0:	d009      	beq.n	8008ae6 <HAL_TIM_Base_Start_IT+0x76>
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	4a1b      	ldr	r2, [pc, #108]	; (8008b44 <HAL_TIM_Base_Start_IT+0xd4>)
 8008ad8:	4293      	cmp	r3, r2
 8008ada:	d004      	beq.n	8008ae6 <HAL_TIM_Base_Start_IT+0x76>
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	4a19      	ldr	r2, [pc, #100]	; (8008b48 <HAL_TIM_Base_Start_IT+0xd8>)
 8008ae2:	4293      	cmp	r3, r2
 8008ae4:	d115      	bne.n	8008b12 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	689a      	ldr	r2, [r3, #8]
 8008aec:	4b17      	ldr	r3, [pc, #92]	; (8008b4c <HAL_TIM_Base_Start_IT+0xdc>)
 8008aee:	4013      	ands	r3, r2
 8008af0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	2b06      	cmp	r3, #6
 8008af6:	d015      	beq.n	8008b24 <HAL_TIM_Base_Start_IT+0xb4>
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008afe:	d011      	beq.n	8008b24 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	681a      	ldr	r2, [r3, #0]
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	f042 0201 	orr.w	r2, r2, #1
 8008b0e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b10:	e008      	b.n	8008b24 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	681a      	ldr	r2, [r3, #0]
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	f042 0201 	orr.w	r2, r2, #1
 8008b20:	601a      	str	r2, [r3, #0]
 8008b22:	e000      	b.n	8008b26 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b24:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008b26:	2300      	movs	r3, #0
}
 8008b28:	4618      	mov	r0, r3
 8008b2a:	3714      	adds	r7, #20
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b32:	4770      	bx	lr
 8008b34:	40012c00 	.word	0x40012c00
 8008b38:	40000400 	.word	0x40000400
 8008b3c:	40000800 	.word	0x40000800
 8008b40:	40000c00 	.word	0x40000c00
 8008b44:	40013400 	.word	0x40013400
 8008b48:	40014000 	.word	0x40014000
 8008b4c:	00010007 	.word	0x00010007

08008b50 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008b50:	b580      	push	{r7, lr}
 8008b52:	b082      	sub	sp, #8
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	691b      	ldr	r3, [r3, #16]
 8008b5e:	f003 0302 	and.w	r3, r3, #2
 8008b62:	2b02      	cmp	r3, #2
 8008b64:	d122      	bne.n	8008bac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	68db      	ldr	r3, [r3, #12]
 8008b6c:	f003 0302 	and.w	r3, r3, #2
 8008b70:	2b02      	cmp	r3, #2
 8008b72:	d11b      	bne.n	8008bac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	f06f 0202 	mvn.w	r2, #2
 8008b7c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	2201      	movs	r2, #1
 8008b82:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	699b      	ldr	r3, [r3, #24]
 8008b8a:	f003 0303 	and.w	r3, r3, #3
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d003      	beq.n	8008b9a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008b92:	6878      	ldr	r0, [r7, #4]
 8008b94:	f000 f905 	bl	8008da2 <HAL_TIM_IC_CaptureCallback>
 8008b98:	e005      	b.n	8008ba6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b9a:	6878      	ldr	r0, [r7, #4]
 8008b9c:	f000 f8f7 	bl	8008d8e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ba0:	6878      	ldr	r0, [r7, #4]
 8008ba2:	f000 f908 	bl	8008db6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	2200      	movs	r2, #0
 8008baa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	691b      	ldr	r3, [r3, #16]
 8008bb2:	f003 0304 	and.w	r3, r3, #4
 8008bb6:	2b04      	cmp	r3, #4
 8008bb8:	d122      	bne.n	8008c00 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	68db      	ldr	r3, [r3, #12]
 8008bc0:	f003 0304 	and.w	r3, r3, #4
 8008bc4:	2b04      	cmp	r3, #4
 8008bc6:	d11b      	bne.n	8008c00 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	f06f 0204 	mvn.w	r2, #4
 8008bd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	2202      	movs	r2, #2
 8008bd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	699b      	ldr	r3, [r3, #24]
 8008bde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d003      	beq.n	8008bee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008be6:	6878      	ldr	r0, [r7, #4]
 8008be8:	f000 f8db 	bl	8008da2 <HAL_TIM_IC_CaptureCallback>
 8008bec:	e005      	b.n	8008bfa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008bee:	6878      	ldr	r0, [r7, #4]
 8008bf0:	f000 f8cd 	bl	8008d8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008bf4:	6878      	ldr	r0, [r7, #4]
 8008bf6:	f000 f8de 	bl	8008db6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	2200      	movs	r2, #0
 8008bfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	691b      	ldr	r3, [r3, #16]
 8008c06:	f003 0308 	and.w	r3, r3, #8
 8008c0a:	2b08      	cmp	r3, #8
 8008c0c:	d122      	bne.n	8008c54 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	68db      	ldr	r3, [r3, #12]
 8008c14:	f003 0308 	and.w	r3, r3, #8
 8008c18:	2b08      	cmp	r3, #8
 8008c1a:	d11b      	bne.n	8008c54 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	f06f 0208 	mvn.w	r2, #8
 8008c24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	2204      	movs	r2, #4
 8008c2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	69db      	ldr	r3, [r3, #28]
 8008c32:	f003 0303 	and.w	r3, r3, #3
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d003      	beq.n	8008c42 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008c3a:	6878      	ldr	r0, [r7, #4]
 8008c3c:	f000 f8b1 	bl	8008da2 <HAL_TIM_IC_CaptureCallback>
 8008c40:	e005      	b.n	8008c4e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c42:	6878      	ldr	r0, [r7, #4]
 8008c44:	f000 f8a3 	bl	8008d8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c48:	6878      	ldr	r0, [r7, #4]
 8008c4a:	f000 f8b4 	bl	8008db6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	2200      	movs	r2, #0
 8008c52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	691b      	ldr	r3, [r3, #16]
 8008c5a:	f003 0310 	and.w	r3, r3, #16
 8008c5e:	2b10      	cmp	r3, #16
 8008c60:	d122      	bne.n	8008ca8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	68db      	ldr	r3, [r3, #12]
 8008c68:	f003 0310 	and.w	r3, r3, #16
 8008c6c:	2b10      	cmp	r3, #16
 8008c6e:	d11b      	bne.n	8008ca8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	f06f 0210 	mvn.w	r2, #16
 8008c78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	2208      	movs	r2, #8
 8008c7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	69db      	ldr	r3, [r3, #28]
 8008c86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d003      	beq.n	8008c96 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008c8e:	6878      	ldr	r0, [r7, #4]
 8008c90:	f000 f887 	bl	8008da2 <HAL_TIM_IC_CaptureCallback>
 8008c94:	e005      	b.n	8008ca2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c96:	6878      	ldr	r0, [r7, #4]
 8008c98:	f000 f879 	bl	8008d8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c9c:	6878      	ldr	r0, [r7, #4]
 8008c9e:	f000 f88a 	bl	8008db6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	2200      	movs	r2, #0
 8008ca6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	691b      	ldr	r3, [r3, #16]
 8008cae:	f003 0301 	and.w	r3, r3, #1
 8008cb2:	2b01      	cmp	r3, #1
 8008cb4:	d10e      	bne.n	8008cd4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	68db      	ldr	r3, [r3, #12]
 8008cbc:	f003 0301 	and.w	r3, r3, #1
 8008cc0:	2b01      	cmp	r3, #1
 8008cc2:	d107      	bne.n	8008cd4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	f06f 0201 	mvn.w	r2, #1
 8008ccc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008cce:	6878      	ldr	r0, [r7, #4]
 8008cd0:	f7fc faa0 	bl	8005214 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	691b      	ldr	r3, [r3, #16]
 8008cda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008cde:	2b80      	cmp	r3, #128	; 0x80
 8008ce0:	d10e      	bne.n	8008d00 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	68db      	ldr	r3, [r3, #12]
 8008ce8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008cec:	2b80      	cmp	r3, #128	; 0x80
 8008cee:	d107      	bne.n	8008d00 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008cf8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008cfa:	6878      	ldr	r0, [r7, #4]
 8008cfc:	f000 f914 	bl	8008f28 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	691b      	ldr	r3, [r3, #16]
 8008d06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d0e:	d10e      	bne.n	8008d2e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	68db      	ldr	r3, [r3, #12]
 8008d16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d1a:	2b80      	cmp	r3, #128	; 0x80
 8008d1c:	d107      	bne.n	8008d2e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008d26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008d28:	6878      	ldr	r0, [r7, #4]
 8008d2a:	f000 f907 	bl	8008f3c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	691b      	ldr	r3, [r3, #16]
 8008d34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d38:	2b40      	cmp	r3, #64	; 0x40
 8008d3a:	d10e      	bne.n	8008d5a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	68db      	ldr	r3, [r3, #12]
 8008d42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d46:	2b40      	cmp	r3, #64	; 0x40
 8008d48:	d107      	bne.n	8008d5a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008d52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008d54:	6878      	ldr	r0, [r7, #4]
 8008d56:	f000 f838 	bl	8008dca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	691b      	ldr	r3, [r3, #16]
 8008d60:	f003 0320 	and.w	r3, r3, #32
 8008d64:	2b20      	cmp	r3, #32
 8008d66:	d10e      	bne.n	8008d86 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	68db      	ldr	r3, [r3, #12]
 8008d6e:	f003 0320 	and.w	r3, r3, #32
 8008d72:	2b20      	cmp	r3, #32
 8008d74:	d107      	bne.n	8008d86 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	f06f 0220 	mvn.w	r2, #32
 8008d7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008d80:	6878      	ldr	r0, [r7, #4]
 8008d82:	f000 f8c7 	bl	8008f14 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008d86:	bf00      	nop
 8008d88:	3708      	adds	r7, #8
 8008d8a:	46bd      	mov	sp, r7
 8008d8c:	bd80      	pop	{r7, pc}

08008d8e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008d8e:	b480      	push	{r7}
 8008d90:	b083      	sub	sp, #12
 8008d92:	af00      	add	r7, sp, #0
 8008d94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008d96:	bf00      	nop
 8008d98:	370c      	adds	r7, #12
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da0:	4770      	bx	lr

08008da2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008da2:	b480      	push	{r7}
 8008da4:	b083      	sub	sp, #12
 8008da6:	af00      	add	r7, sp, #0
 8008da8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008daa:	bf00      	nop
 8008dac:	370c      	adds	r7, #12
 8008dae:	46bd      	mov	sp, r7
 8008db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db4:	4770      	bx	lr

08008db6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008db6:	b480      	push	{r7}
 8008db8:	b083      	sub	sp, #12
 8008dba:	af00      	add	r7, sp, #0
 8008dbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008dbe:	bf00      	nop
 8008dc0:	370c      	adds	r7, #12
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc8:	4770      	bx	lr

08008dca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008dca:	b480      	push	{r7}
 8008dcc:	b083      	sub	sp, #12
 8008dce:	af00      	add	r7, sp, #0
 8008dd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008dd2:	bf00      	nop
 8008dd4:	370c      	adds	r7, #12
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ddc:	4770      	bx	lr
	...

08008de0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008de0:	b480      	push	{r7}
 8008de2:	b085      	sub	sp, #20
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	6078      	str	r0, [r7, #4]
 8008de8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	4a40      	ldr	r2, [pc, #256]	; (8008ef4 <TIM_Base_SetConfig+0x114>)
 8008df4:	4293      	cmp	r3, r2
 8008df6:	d013      	beq.n	8008e20 <TIM_Base_SetConfig+0x40>
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008dfe:	d00f      	beq.n	8008e20 <TIM_Base_SetConfig+0x40>
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	4a3d      	ldr	r2, [pc, #244]	; (8008ef8 <TIM_Base_SetConfig+0x118>)
 8008e04:	4293      	cmp	r3, r2
 8008e06:	d00b      	beq.n	8008e20 <TIM_Base_SetConfig+0x40>
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	4a3c      	ldr	r2, [pc, #240]	; (8008efc <TIM_Base_SetConfig+0x11c>)
 8008e0c:	4293      	cmp	r3, r2
 8008e0e:	d007      	beq.n	8008e20 <TIM_Base_SetConfig+0x40>
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	4a3b      	ldr	r2, [pc, #236]	; (8008f00 <TIM_Base_SetConfig+0x120>)
 8008e14:	4293      	cmp	r3, r2
 8008e16:	d003      	beq.n	8008e20 <TIM_Base_SetConfig+0x40>
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	4a3a      	ldr	r2, [pc, #232]	; (8008f04 <TIM_Base_SetConfig+0x124>)
 8008e1c:	4293      	cmp	r3, r2
 8008e1e:	d108      	bne.n	8008e32 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008e28:	683b      	ldr	r3, [r7, #0]
 8008e2a:	685b      	ldr	r3, [r3, #4]
 8008e2c:	68fa      	ldr	r2, [r7, #12]
 8008e2e:	4313      	orrs	r3, r2
 8008e30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	4a2f      	ldr	r2, [pc, #188]	; (8008ef4 <TIM_Base_SetConfig+0x114>)
 8008e36:	4293      	cmp	r3, r2
 8008e38:	d01f      	beq.n	8008e7a <TIM_Base_SetConfig+0x9a>
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e40:	d01b      	beq.n	8008e7a <TIM_Base_SetConfig+0x9a>
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	4a2c      	ldr	r2, [pc, #176]	; (8008ef8 <TIM_Base_SetConfig+0x118>)
 8008e46:	4293      	cmp	r3, r2
 8008e48:	d017      	beq.n	8008e7a <TIM_Base_SetConfig+0x9a>
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	4a2b      	ldr	r2, [pc, #172]	; (8008efc <TIM_Base_SetConfig+0x11c>)
 8008e4e:	4293      	cmp	r3, r2
 8008e50:	d013      	beq.n	8008e7a <TIM_Base_SetConfig+0x9a>
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	4a2a      	ldr	r2, [pc, #168]	; (8008f00 <TIM_Base_SetConfig+0x120>)
 8008e56:	4293      	cmp	r3, r2
 8008e58:	d00f      	beq.n	8008e7a <TIM_Base_SetConfig+0x9a>
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	4a29      	ldr	r2, [pc, #164]	; (8008f04 <TIM_Base_SetConfig+0x124>)
 8008e5e:	4293      	cmp	r3, r2
 8008e60:	d00b      	beq.n	8008e7a <TIM_Base_SetConfig+0x9a>
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	4a28      	ldr	r2, [pc, #160]	; (8008f08 <TIM_Base_SetConfig+0x128>)
 8008e66:	4293      	cmp	r3, r2
 8008e68:	d007      	beq.n	8008e7a <TIM_Base_SetConfig+0x9a>
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	4a27      	ldr	r2, [pc, #156]	; (8008f0c <TIM_Base_SetConfig+0x12c>)
 8008e6e:	4293      	cmp	r3, r2
 8008e70:	d003      	beq.n	8008e7a <TIM_Base_SetConfig+0x9a>
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	4a26      	ldr	r2, [pc, #152]	; (8008f10 <TIM_Base_SetConfig+0x130>)
 8008e76:	4293      	cmp	r3, r2
 8008e78:	d108      	bne.n	8008e8c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008e80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008e82:	683b      	ldr	r3, [r7, #0]
 8008e84:	68db      	ldr	r3, [r3, #12]
 8008e86:	68fa      	ldr	r2, [r7, #12]
 8008e88:	4313      	orrs	r3, r2
 8008e8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008e92:	683b      	ldr	r3, [r7, #0]
 8008e94:	695b      	ldr	r3, [r3, #20]
 8008e96:	4313      	orrs	r3, r2
 8008e98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	68fa      	ldr	r2, [r7, #12]
 8008e9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008ea0:	683b      	ldr	r3, [r7, #0]
 8008ea2:	689a      	ldr	r2, [r3, #8]
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008ea8:	683b      	ldr	r3, [r7, #0]
 8008eaa:	681a      	ldr	r2, [r3, #0]
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	4a10      	ldr	r2, [pc, #64]	; (8008ef4 <TIM_Base_SetConfig+0x114>)
 8008eb4:	4293      	cmp	r3, r2
 8008eb6:	d00f      	beq.n	8008ed8 <TIM_Base_SetConfig+0xf8>
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	4a12      	ldr	r2, [pc, #72]	; (8008f04 <TIM_Base_SetConfig+0x124>)
 8008ebc:	4293      	cmp	r3, r2
 8008ebe:	d00b      	beq.n	8008ed8 <TIM_Base_SetConfig+0xf8>
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	4a11      	ldr	r2, [pc, #68]	; (8008f08 <TIM_Base_SetConfig+0x128>)
 8008ec4:	4293      	cmp	r3, r2
 8008ec6:	d007      	beq.n	8008ed8 <TIM_Base_SetConfig+0xf8>
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	4a10      	ldr	r2, [pc, #64]	; (8008f0c <TIM_Base_SetConfig+0x12c>)
 8008ecc:	4293      	cmp	r3, r2
 8008ece:	d003      	beq.n	8008ed8 <TIM_Base_SetConfig+0xf8>
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	4a0f      	ldr	r2, [pc, #60]	; (8008f10 <TIM_Base_SetConfig+0x130>)
 8008ed4:	4293      	cmp	r3, r2
 8008ed6:	d103      	bne.n	8008ee0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008ed8:	683b      	ldr	r3, [r7, #0]
 8008eda:	691a      	ldr	r2, [r3, #16]
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	2201      	movs	r2, #1
 8008ee4:	615a      	str	r2, [r3, #20]
}
 8008ee6:	bf00      	nop
 8008ee8:	3714      	adds	r7, #20
 8008eea:	46bd      	mov	sp, r7
 8008eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef0:	4770      	bx	lr
 8008ef2:	bf00      	nop
 8008ef4:	40012c00 	.word	0x40012c00
 8008ef8:	40000400 	.word	0x40000400
 8008efc:	40000800 	.word	0x40000800
 8008f00:	40000c00 	.word	0x40000c00
 8008f04:	40013400 	.word	0x40013400
 8008f08:	40014000 	.word	0x40014000
 8008f0c:	40014400 	.word	0x40014400
 8008f10:	40014800 	.word	0x40014800

08008f14 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008f14:	b480      	push	{r7}
 8008f16:	b083      	sub	sp, #12
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008f1c:	bf00      	nop
 8008f1e:	370c      	adds	r7, #12
 8008f20:	46bd      	mov	sp, r7
 8008f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f26:	4770      	bx	lr

08008f28 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008f28:	b480      	push	{r7}
 8008f2a:	b083      	sub	sp, #12
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008f30:	bf00      	nop
 8008f32:	370c      	adds	r7, #12
 8008f34:	46bd      	mov	sp, r7
 8008f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3a:	4770      	bx	lr

08008f3c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008f3c:	b480      	push	{r7}
 8008f3e:	b083      	sub	sp, #12
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008f44:	bf00      	nop
 8008f46:	370c      	adds	r7, #12
 8008f48:	46bd      	mov	sp, r7
 8008f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4e:	4770      	bx	lr

08008f50 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008f50:	b580      	push	{r7, lr}
 8008f52:	b082      	sub	sp, #8
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d101      	bne.n	8008f62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008f5e:	2301      	movs	r3, #1
 8008f60:	e042      	b.n	8008fe8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d106      	bne.n	8008f7a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	2200      	movs	r2, #0
 8008f70:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008f74:	6878      	ldr	r0, [r7, #4]
 8008f76:	f7fc fa49 	bl	800540c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	2224      	movs	r2, #36	; 0x24
 8008f7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	681a      	ldr	r2, [r3, #0]
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	f022 0201 	bic.w	r2, r2, #1
 8008f90:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008f92:	6878      	ldr	r0, [r7, #4]
 8008f94:	f000 f8c4 	bl	8009120 <UART_SetConfig>
 8008f98:	4603      	mov	r3, r0
 8008f9a:	2b01      	cmp	r3, #1
 8008f9c:	d101      	bne.n	8008fa2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008f9e:	2301      	movs	r3, #1
 8008fa0:	e022      	b.n	8008fe8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d002      	beq.n	8008fb0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8008faa:	6878      	ldr	r0, [r7, #4]
 8008fac:	f000 fbb4 	bl	8009718 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	685a      	ldr	r2, [r3, #4]
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008fbe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	689a      	ldr	r2, [r3, #8]
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008fce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	681a      	ldr	r2, [r3, #0]
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	f042 0201 	orr.w	r2, r2, #1
 8008fde:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008fe0:	6878      	ldr	r0, [r7, #4]
 8008fe2:	f000 fc3b 	bl	800985c <UART_CheckIdleState>
 8008fe6:	4603      	mov	r3, r0
}
 8008fe8:	4618      	mov	r0, r3
 8008fea:	3708      	adds	r7, #8
 8008fec:	46bd      	mov	sp, r7
 8008fee:	bd80      	pop	{r7, pc}

08008ff0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008ff0:	b580      	push	{r7, lr}
 8008ff2:	b08a      	sub	sp, #40	; 0x28
 8008ff4:	af02      	add	r7, sp, #8
 8008ff6:	60f8      	str	r0, [r7, #12]
 8008ff8:	60b9      	str	r1, [r7, #8]
 8008ffa:	603b      	str	r3, [r7, #0]
 8008ffc:	4613      	mov	r3, r2
 8008ffe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009006:	2b20      	cmp	r3, #32
 8009008:	f040 8084 	bne.w	8009114 <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 800900c:	68bb      	ldr	r3, [r7, #8]
 800900e:	2b00      	cmp	r3, #0
 8009010:	d002      	beq.n	8009018 <HAL_UART_Transmit+0x28>
 8009012:	88fb      	ldrh	r3, [r7, #6]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d101      	bne.n	800901c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8009018:	2301      	movs	r3, #1
 800901a:	e07c      	b.n	8009116 <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009022:	2b01      	cmp	r3, #1
 8009024:	d101      	bne.n	800902a <HAL_UART_Transmit+0x3a>
 8009026:	2302      	movs	r3, #2
 8009028:	e075      	b.n	8009116 <HAL_UART_Transmit+0x126>
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	2201      	movs	r2, #1
 800902e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	2200      	movs	r2, #0
 8009036:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	2221      	movs	r2, #33	; 0x21
 800903e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009042:	f7fc fdcb 	bl	8005bdc <HAL_GetTick>
 8009046:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	88fa      	ldrh	r2, [r7, #6]
 800904c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	88fa      	ldrh	r2, [r7, #6]
 8009054:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	689b      	ldr	r3, [r3, #8]
 800905c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009060:	d108      	bne.n	8009074 <HAL_UART_Transmit+0x84>
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	691b      	ldr	r3, [r3, #16]
 8009066:	2b00      	cmp	r3, #0
 8009068:	d104      	bne.n	8009074 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800906a:	2300      	movs	r3, #0
 800906c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800906e:	68bb      	ldr	r3, [r7, #8]
 8009070:	61bb      	str	r3, [r7, #24]
 8009072:	e003      	b.n	800907c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8009074:	68bb      	ldr	r3, [r7, #8]
 8009076:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009078:	2300      	movs	r3, #0
 800907a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	2200      	movs	r2, #0
 8009080:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8009084:	e02d      	b.n	80090e2 <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009086:	683b      	ldr	r3, [r7, #0]
 8009088:	9300      	str	r3, [sp, #0]
 800908a:	697b      	ldr	r3, [r7, #20]
 800908c:	2200      	movs	r2, #0
 800908e:	2180      	movs	r1, #128	; 0x80
 8009090:	68f8      	ldr	r0, [r7, #12]
 8009092:	f000 fc2e 	bl	80098f2 <UART_WaitOnFlagUntilTimeout>
 8009096:	4603      	mov	r3, r0
 8009098:	2b00      	cmp	r3, #0
 800909a:	d001      	beq.n	80090a0 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800909c:	2303      	movs	r3, #3
 800909e:	e03a      	b.n	8009116 <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 80090a0:	69fb      	ldr	r3, [r7, #28]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d10b      	bne.n	80090be <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80090a6:	69bb      	ldr	r3, [r7, #24]
 80090a8:	881a      	ldrh	r2, [r3, #0]
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80090b2:	b292      	uxth	r2, r2
 80090b4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80090b6:	69bb      	ldr	r3, [r7, #24]
 80090b8:	3302      	adds	r3, #2
 80090ba:	61bb      	str	r3, [r7, #24]
 80090bc:	e008      	b.n	80090d0 <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80090be:	69fb      	ldr	r3, [r7, #28]
 80090c0:	781a      	ldrb	r2, [r3, #0]
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	b292      	uxth	r2, r2
 80090c8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80090ca:	69fb      	ldr	r3, [r7, #28]
 80090cc:	3301      	adds	r3, #1
 80090ce:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80090d6:	b29b      	uxth	r3, r3
 80090d8:	3b01      	subs	r3, #1
 80090da:	b29a      	uxth	r2, r3
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80090e8:	b29b      	uxth	r3, r3
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d1cb      	bne.n	8009086 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80090ee:	683b      	ldr	r3, [r7, #0]
 80090f0:	9300      	str	r3, [sp, #0]
 80090f2:	697b      	ldr	r3, [r7, #20]
 80090f4:	2200      	movs	r2, #0
 80090f6:	2140      	movs	r1, #64	; 0x40
 80090f8:	68f8      	ldr	r0, [r7, #12]
 80090fa:	f000 fbfa 	bl	80098f2 <UART_WaitOnFlagUntilTimeout>
 80090fe:	4603      	mov	r3, r0
 8009100:	2b00      	cmp	r3, #0
 8009102:	d001      	beq.n	8009108 <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 8009104:	2303      	movs	r3, #3
 8009106:	e006      	b.n	8009116 <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	2220      	movs	r2, #32
 800910c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8009110:	2300      	movs	r3, #0
 8009112:	e000      	b.n	8009116 <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 8009114:	2302      	movs	r3, #2
  }
}
 8009116:	4618      	mov	r0, r3
 8009118:	3720      	adds	r7, #32
 800911a:	46bd      	mov	sp, r7
 800911c:	bd80      	pop	{r7, pc}
	...

08009120 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009120:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009124:	b08c      	sub	sp, #48	; 0x30
 8009126:	af00      	add	r7, sp, #0
 8009128:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800912a:	2300      	movs	r3, #0
 800912c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009130:	697b      	ldr	r3, [r7, #20]
 8009132:	689a      	ldr	r2, [r3, #8]
 8009134:	697b      	ldr	r3, [r7, #20]
 8009136:	691b      	ldr	r3, [r3, #16]
 8009138:	431a      	orrs	r2, r3
 800913a:	697b      	ldr	r3, [r7, #20]
 800913c:	695b      	ldr	r3, [r3, #20]
 800913e:	431a      	orrs	r2, r3
 8009140:	697b      	ldr	r3, [r7, #20]
 8009142:	69db      	ldr	r3, [r3, #28]
 8009144:	4313      	orrs	r3, r2
 8009146:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009148:	697b      	ldr	r3, [r7, #20]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	681a      	ldr	r2, [r3, #0]
 800914e:	4baa      	ldr	r3, [pc, #680]	; (80093f8 <UART_SetConfig+0x2d8>)
 8009150:	4013      	ands	r3, r2
 8009152:	697a      	ldr	r2, [r7, #20]
 8009154:	6812      	ldr	r2, [r2, #0]
 8009156:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009158:	430b      	orrs	r3, r1
 800915a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800915c:	697b      	ldr	r3, [r7, #20]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	685b      	ldr	r3, [r3, #4]
 8009162:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009166:	697b      	ldr	r3, [r7, #20]
 8009168:	68da      	ldr	r2, [r3, #12]
 800916a:	697b      	ldr	r3, [r7, #20]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	430a      	orrs	r2, r1
 8009170:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009172:	697b      	ldr	r3, [r7, #20]
 8009174:	699b      	ldr	r3, [r3, #24]
 8009176:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009178:	697b      	ldr	r3, [r7, #20]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	4a9f      	ldr	r2, [pc, #636]	; (80093fc <UART_SetConfig+0x2dc>)
 800917e:	4293      	cmp	r3, r2
 8009180:	d004      	beq.n	800918c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009182:	697b      	ldr	r3, [r7, #20]
 8009184:	6a1b      	ldr	r3, [r3, #32]
 8009186:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009188:	4313      	orrs	r3, r2
 800918a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800918c:	697b      	ldr	r3, [r7, #20]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	689b      	ldr	r3, [r3, #8]
 8009192:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8009196:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800919a:	697a      	ldr	r2, [r7, #20]
 800919c:	6812      	ldr	r2, [r2, #0]
 800919e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80091a0:	430b      	orrs	r3, r1
 80091a2:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80091a4:	697b      	ldr	r3, [r7, #20]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091aa:	f023 010f 	bic.w	r1, r3, #15
 80091ae:	697b      	ldr	r3, [r7, #20]
 80091b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80091b2:	697b      	ldr	r3, [r7, #20]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	430a      	orrs	r2, r1
 80091b8:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80091ba:	697b      	ldr	r3, [r7, #20]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	4a90      	ldr	r2, [pc, #576]	; (8009400 <UART_SetConfig+0x2e0>)
 80091c0:	4293      	cmp	r3, r2
 80091c2:	d125      	bne.n	8009210 <UART_SetConfig+0xf0>
 80091c4:	4b8f      	ldr	r3, [pc, #572]	; (8009404 <UART_SetConfig+0x2e4>)
 80091c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80091ca:	f003 0303 	and.w	r3, r3, #3
 80091ce:	2b03      	cmp	r3, #3
 80091d0:	d81a      	bhi.n	8009208 <UART_SetConfig+0xe8>
 80091d2:	a201      	add	r2, pc, #4	; (adr r2, 80091d8 <UART_SetConfig+0xb8>)
 80091d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091d8:	080091e9 	.word	0x080091e9
 80091dc:	080091f9 	.word	0x080091f9
 80091e0:	080091f1 	.word	0x080091f1
 80091e4:	08009201 	.word	0x08009201
 80091e8:	2301      	movs	r3, #1
 80091ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80091ee:	e116      	b.n	800941e <UART_SetConfig+0x2fe>
 80091f0:	2302      	movs	r3, #2
 80091f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80091f6:	e112      	b.n	800941e <UART_SetConfig+0x2fe>
 80091f8:	2304      	movs	r3, #4
 80091fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80091fe:	e10e      	b.n	800941e <UART_SetConfig+0x2fe>
 8009200:	2308      	movs	r3, #8
 8009202:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009206:	e10a      	b.n	800941e <UART_SetConfig+0x2fe>
 8009208:	2310      	movs	r3, #16
 800920a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800920e:	e106      	b.n	800941e <UART_SetConfig+0x2fe>
 8009210:	697b      	ldr	r3, [r7, #20]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	4a7c      	ldr	r2, [pc, #496]	; (8009408 <UART_SetConfig+0x2e8>)
 8009216:	4293      	cmp	r3, r2
 8009218:	d138      	bne.n	800928c <UART_SetConfig+0x16c>
 800921a:	4b7a      	ldr	r3, [pc, #488]	; (8009404 <UART_SetConfig+0x2e4>)
 800921c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009220:	f003 030c 	and.w	r3, r3, #12
 8009224:	2b0c      	cmp	r3, #12
 8009226:	d82d      	bhi.n	8009284 <UART_SetConfig+0x164>
 8009228:	a201      	add	r2, pc, #4	; (adr r2, 8009230 <UART_SetConfig+0x110>)
 800922a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800922e:	bf00      	nop
 8009230:	08009265 	.word	0x08009265
 8009234:	08009285 	.word	0x08009285
 8009238:	08009285 	.word	0x08009285
 800923c:	08009285 	.word	0x08009285
 8009240:	08009275 	.word	0x08009275
 8009244:	08009285 	.word	0x08009285
 8009248:	08009285 	.word	0x08009285
 800924c:	08009285 	.word	0x08009285
 8009250:	0800926d 	.word	0x0800926d
 8009254:	08009285 	.word	0x08009285
 8009258:	08009285 	.word	0x08009285
 800925c:	08009285 	.word	0x08009285
 8009260:	0800927d 	.word	0x0800927d
 8009264:	2300      	movs	r3, #0
 8009266:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800926a:	e0d8      	b.n	800941e <UART_SetConfig+0x2fe>
 800926c:	2302      	movs	r3, #2
 800926e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009272:	e0d4      	b.n	800941e <UART_SetConfig+0x2fe>
 8009274:	2304      	movs	r3, #4
 8009276:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800927a:	e0d0      	b.n	800941e <UART_SetConfig+0x2fe>
 800927c:	2308      	movs	r3, #8
 800927e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009282:	e0cc      	b.n	800941e <UART_SetConfig+0x2fe>
 8009284:	2310      	movs	r3, #16
 8009286:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800928a:	e0c8      	b.n	800941e <UART_SetConfig+0x2fe>
 800928c:	697b      	ldr	r3, [r7, #20]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	4a5e      	ldr	r2, [pc, #376]	; (800940c <UART_SetConfig+0x2ec>)
 8009292:	4293      	cmp	r3, r2
 8009294:	d125      	bne.n	80092e2 <UART_SetConfig+0x1c2>
 8009296:	4b5b      	ldr	r3, [pc, #364]	; (8009404 <UART_SetConfig+0x2e4>)
 8009298:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800929c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80092a0:	2b30      	cmp	r3, #48	; 0x30
 80092a2:	d016      	beq.n	80092d2 <UART_SetConfig+0x1b2>
 80092a4:	2b30      	cmp	r3, #48	; 0x30
 80092a6:	d818      	bhi.n	80092da <UART_SetConfig+0x1ba>
 80092a8:	2b20      	cmp	r3, #32
 80092aa:	d00a      	beq.n	80092c2 <UART_SetConfig+0x1a2>
 80092ac:	2b20      	cmp	r3, #32
 80092ae:	d814      	bhi.n	80092da <UART_SetConfig+0x1ba>
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d002      	beq.n	80092ba <UART_SetConfig+0x19a>
 80092b4:	2b10      	cmp	r3, #16
 80092b6:	d008      	beq.n	80092ca <UART_SetConfig+0x1aa>
 80092b8:	e00f      	b.n	80092da <UART_SetConfig+0x1ba>
 80092ba:	2300      	movs	r3, #0
 80092bc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80092c0:	e0ad      	b.n	800941e <UART_SetConfig+0x2fe>
 80092c2:	2302      	movs	r3, #2
 80092c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80092c8:	e0a9      	b.n	800941e <UART_SetConfig+0x2fe>
 80092ca:	2304      	movs	r3, #4
 80092cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80092d0:	e0a5      	b.n	800941e <UART_SetConfig+0x2fe>
 80092d2:	2308      	movs	r3, #8
 80092d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80092d8:	e0a1      	b.n	800941e <UART_SetConfig+0x2fe>
 80092da:	2310      	movs	r3, #16
 80092dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80092e0:	e09d      	b.n	800941e <UART_SetConfig+0x2fe>
 80092e2:	697b      	ldr	r3, [r7, #20]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	4a4a      	ldr	r2, [pc, #296]	; (8009410 <UART_SetConfig+0x2f0>)
 80092e8:	4293      	cmp	r3, r2
 80092ea:	d125      	bne.n	8009338 <UART_SetConfig+0x218>
 80092ec:	4b45      	ldr	r3, [pc, #276]	; (8009404 <UART_SetConfig+0x2e4>)
 80092ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80092f2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80092f6:	2bc0      	cmp	r3, #192	; 0xc0
 80092f8:	d016      	beq.n	8009328 <UART_SetConfig+0x208>
 80092fa:	2bc0      	cmp	r3, #192	; 0xc0
 80092fc:	d818      	bhi.n	8009330 <UART_SetConfig+0x210>
 80092fe:	2b80      	cmp	r3, #128	; 0x80
 8009300:	d00a      	beq.n	8009318 <UART_SetConfig+0x1f8>
 8009302:	2b80      	cmp	r3, #128	; 0x80
 8009304:	d814      	bhi.n	8009330 <UART_SetConfig+0x210>
 8009306:	2b00      	cmp	r3, #0
 8009308:	d002      	beq.n	8009310 <UART_SetConfig+0x1f0>
 800930a:	2b40      	cmp	r3, #64	; 0x40
 800930c:	d008      	beq.n	8009320 <UART_SetConfig+0x200>
 800930e:	e00f      	b.n	8009330 <UART_SetConfig+0x210>
 8009310:	2300      	movs	r3, #0
 8009312:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009316:	e082      	b.n	800941e <UART_SetConfig+0x2fe>
 8009318:	2302      	movs	r3, #2
 800931a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800931e:	e07e      	b.n	800941e <UART_SetConfig+0x2fe>
 8009320:	2304      	movs	r3, #4
 8009322:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009326:	e07a      	b.n	800941e <UART_SetConfig+0x2fe>
 8009328:	2308      	movs	r3, #8
 800932a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800932e:	e076      	b.n	800941e <UART_SetConfig+0x2fe>
 8009330:	2310      	movs	r3, #16
 8009332:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009336:	e072      	b.n	800941e <UART_SetConfig+0x2fe>
 8009338:	697b      	ldr	r3, [r7, #20]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	4a35      	ldr	r2, [pc, #212]	; (8009414 <UART_SetConfig+0x2f4>)
 800933e:	4293      	cmp	r3, r2
 8009340:	d12a      	bne.n	8009398 <UART_SetConfig+0x278>
 8009342:	4b30      	ldr	r3, [pc, #192]	; (8009404 <UART_SetConfig+0x2e4>)
 8009344:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009348:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800934c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009350:	d01a      	beq.n	8009388 <UART_SetConfig+0x268>
 8009352:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009356:	d81b      	bhi.n	8009390 <UART_SetConfig+0x270>
 8009358:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800935c:	d00c      	beq.n	8009378 <UART_SetConfig+0x258>
 800935e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009362:	d815      	bhi.n	8009390 <UART_SetConfig+0x270>
 8009364:	2b00      	cmp	r3, #0
 8009366:	d003      	beq.n	8009370 <UART_SetConfig+0x250>
 8009368:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800936c:	d008      	beq.n	8009380 <UART_SetConfig+0x260>
 800936e:	e00f      	b.n	8009390 <UART_SetConfig+0x270>
 8009370:	2300      	movs	r3, #0
 8009372:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009376:	e052      	b.n	800941e <UART_SetConfig+0x2fe>
 8009378:	2302      	movs	r3, #2
 800937a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800937e:	e04e      	b.n	800941e <UART_SetConfig+0x2fe>
 8009380:	2304      	movs	r3, #4
 8009382:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009386:	e04a      	b.n	800941e <UART_SetConfig+0x2fe>
 8009388:	2308      	movs	r3, #8
 800938a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800938e:	e046      	b.n	800941e <UART_SetConfig+0x2fe>
 8009390:	2310      	movs	r3, #16
 8009392:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009396:	e042      	b.n	800941e <UART_SetConfig+0x2fe>
 8009398:	697b      	ldr	r3, [r7, #20]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	4a17      	ldr	r2, [pc, #92]	; (80093fc <UART_SetConfig+0x2dc>)
 800939e:	4293      	cmp	r3, r2
 80093a0:	d13a      	bne.n	8009418 <UART_SetConfig+0x2f8>
 80093a2:	4b18      	ldr	r3, [pc, #96]	; (8009404 <UART_SetConfig+0x2e4>)
 80093a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80093a8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80093ac:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80093b0:	d01a      	beq.n	80093e8 <UART_SetConfig+0x2c8>
 80093b2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80093b6:	d81b      	bhi.n	80093f0 <UART_SetConfig+0x2d0>
 80093b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80093bc:	d00c      	beq.n	80093d8 <UART_SetConfig+0x2b8>
 80093be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80093c2:	d815      	bhi.n	80093f0 <UART_SetConfig+0x2d0>
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d003      	beq.n	80093d0 <UART_SetConfig+0x2b0>
 80093c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80093cc:	d008      	beq.n	80093e0 <UART_SetConfig+0x2c0>
 80093ce:	e00f      	b.n	80093f0 <UART_SetConfig+0x2d0>
 80093d0:	2300      	movs	r3, #0
 80093d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80093d6:	e022      	b.n	800941e <UART_SetConfig+0x2fe>
 80093d8:	2302      	movs	r3, #2
 80093da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80093de:	e01e      	b.n	800941e <UART_SetConfig+0x2fe>
 80093e0:	2304      	movs	r3, #4
 80093e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80093e6:	e01a      	b.n	800941e <UART_SetConfig+0x2fe>
 80093e8:	2308      	movs	r3, #8
 80093ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80093ee:	e016      	b.n	800941e <UART_SetConfig+0x2fe>
 80093f0:	2310      	movs	r3, #16
 80093f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80093f6:	e012      	b.n	800941e <UART_SetConfig+0x2fe>
 80093f8:	cfff69f3 	.word	0xcfff69f3
 80093fc:	40008000 	.word	0x40008000
 8009400:	40013800 	.word	0x40013800
 8009404:	40021000 	.word	0x40021000
 8009408:	40004400 	.word	0x40004400
 800940c:	40004800 	.word	0x40004800
 8009410:	40004c00 	.word	0x40004c00
 8009414:	40005000 	.word	0x40005000
 8009418:	2310      	movs	r3, #16
 800941a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800941e:	697b      	ldr	r3, [r7, #20]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	4aae      	ldr	r2, [pc, #696]	; (80096dc <UART_SetConfig+0x5bc>)
 8009424:	4293      	cmp	r3, r2
 8009426:	f040 8097 	bne.w	8009558 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800942a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800942e:	2b08      	cmp	r3, #8
 8009430:	d823      	bhi.n	800947a <UART_SetConfig+0x35a>
 8009432:	a201      	add	r2, pc, #4	; (adr r2, 8009438 <UART_SetConfig+0x318>)
 8009434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009438:	0800945d 	.word	0x0800945d
 800943c:	0800947b 	.word	0x0800947b
 8009440:	08009465 	.word	0x08009465
 8009444:	0800947b 	.word	0x0800947b
 8009448:	0800946b 	.word	0x0800946b
 800944c:	0800947b 	.word	0x0800947b
 8009450:	0800947b 	.word	0x0800947b
 8009454:	0800947b 	.word	0x0800947b
 8009458:	08009473 	.word	0x08009473
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800945c:	f7fe fc70 	bl	8007d40 <HAL_RCC_GetPCLK1Freq>
 8009460:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009462:	e010      	b.n	8009486 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009464:	4b9e      	ldr	r3, [pc, #632]	; (80096e0 <UART_SetConfig+0x5c0>)
 8009466:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009468:	e00d      	b.n	8009486 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800946a:	f7fe fbd1 	bl	8007c10 <HAL_RCC_GetSysClockFreq>
 800946e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009470:	e009      	b.n	8009486 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009472:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009476:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009478:	e005      	b.n	8009486 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800947a:	2300      	movs	r3, #0
 800947c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800947e:	2301      	movs	r3, #1
 8009480:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8009484:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009488:	2b00      	cmp	r3, #0
 800948a:	f000 8130 	beq.w	80096ee <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800948e:	697b      	ldr	r3, [r7, #20]
 8009490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009492:	4a94      	ldr	r2, [pc, #592]	; (80096e4 <UART_SetConfig+0x5c4>)
 8009494:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009498:	461a      	mov	r2, r3
 800949a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800949c:	fbb3 f3f2 	udiv	r3, r3, r2
 80094a0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80094a2:	697b      	ldr	r3, [r7, #20]
 80094a4:	685a      	ldr	r2, [r3, #4]
 80094a6:	4613      	mov	r3, r2
 80094a8:	005b      	lsls	r3, r3, #1
 80094aa:	4413      	add	r3, r2
 80094ac:	69ba      	ldr	r2, [r7, #24]
 80094ae:	429a      	cmp	r2, r3
 80094b0:	d305      	bcc.n	80094be <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80094b2:	697b      	ldr	r3, [r7, #20]
 80094b4:	685b      	ldr	r3, [r3, #4]
 80094b6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80094b8:	69ba      	ldr	r2, [r7, #24]
 80094ba:	429a      	cmp	r2, r3
 80094bc:	d903      	bls.n	80094c6 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80094be:	2301      	movs	r3, #1
 80094c0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80094c4:	e113      	b.n	80096ee <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80094c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094c8:	2200      	movs	r2, #0
 80094ca:	60bb      	str	r3, [r7, #8]
 80094cc:	60fa      	str	r2, [r7, #12]
 80094ce:	697b      	ldr	r3, [r7, #20]
 80094d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094d2:	4a84      	ldr	r2, [pc, #528]	; (80096e4 <UART_SetConfig+0x5c4>)
 80094d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80094d8:	b29b      	uxth	r3, r3
 80094da:	2200      	movs	r2, #0
 80094dc:	603b      	str	r3, [r7, #0]
 80094de:	607a      	str	r2, [r7, #4]
 80094e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80094e4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80094e8:	f7f7 fb76 	bl	8000bd8 <__aeabi_uldivmod>
 80094ec:	4602      	mov	r2, r0
 80094ee:	460b      	mov	r3, r1
 80094f0:	4610      	mov	r0, r2
 80094f2:	4619      	mov	r1, r3
 80094f4:	f04f 0200 	mov.w	r2, #0
 80094f8:	f04f 0300 	mov.w	r3, #0
 80094fc:	020b      	lsls	r3, r1, #8
 80094fe:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009502:	0202      	lsls	r2, r0, #8
 8009504:	6979      	ldr	r1, [r7, #20]
 8009506:	6849      	ldr	r1, [r1, #4]
 8009508:	0849      	lsrs	r1, r1, #1
 800950a:	2000      	movs	r0, #0
 800950c:	460c      	mov	r4, r1
 800950e:	4605      	mov	r5, r0
 8009510:	eb12 0804 	adds.w	r8, r2, r4
 8009514:	eb43 0905 	adc.w	r9, r3, r5
 8009518:	697b      	ldr	r3, [r7, #20]
 800951a:	685b      	ldr	r3, [r3, #4]
 800951c:	2200      	movs	r2, #0
 800951e:	469a      	mov	sl, r3
 8009520:	4693      	mov	fp, r2
 8009522:	4652      	mov	r2, sl
 8009524:	465b      	mov	r3, fp
 8009526:	4640      	mov	r0, r8
 8009528:	4649      	mov	r1, r9
 800952a:	f7f7 fb55 	bl	8000bd8 <__aeabi_uldivmod>
 800952e:	4602      	mov	r2, r0
 8009530:	460b      	mov	r3, r1
 8009532:	4613      	mov	r3, r2
 8009534:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009536:	6a3b      	ldr	r3, [r7, #32]
 8009538:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800953c:	d308      	bcc.n	8009550 <UART_SetConfig+0x430>
 800953e:	6a3b      	ldr	r3, [r7, #32]
 8009540:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009544:	d204      	bcs.n	8009550 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8009546:	697b      	ldr	r3, [r7, #20]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	6a3a      	ldr	r2, [r7, #32]
 800954c:	60da      	str	r2, [r3, #12]
 800954e:	e0ce      	b.n	80096ee <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8009550:	2301      	movs	r3, #1
 8009552:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8009556:	e0ca      	b.n	80096ee <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009558:	697b      	ldr	r3, [r7, #20]
 800955a:	69db      	ldr	r3, [r3, #28]
 800955c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009560:	d166      	bne.n	8009630 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8009562:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009566:	2b08      	cmp	r3, #8
 8009568:	d827      	bhi.n	80095ba <UART_SetConfig+0x49a>
 800956a:	a201      	add	r2, pc, #4	; (adr r2, 8009570 <UART_SetConfig+0x450>)
 800956c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009570:	08009595 	.word	0x08009595
 8009574:	0800959d 	.word	0x0800959d
 8009578:	080095a5 	.word	0x080095a5
 800957c:	080095bb 	.word	0x080095bb
 8009580:	080095ab 	.word	0x080095ab
 8009584:	080095bb 	.word	0x080095bb
 8009588:	080095bb 	.word	0x080095bb
 800958c:	080095bb 	.word	0x080095bb
 8009590:	080095b3 	.word	0x080095b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009594:	f7fe fbd4 	bl	8007d40 <HAL_RCC_GetPCLK1Freq>
 8009598:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800959a:	e014      	b.n	80095c6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800959c:	f7fe fbe6 	bl	8007d6c <HAL_RCC_GetPCLK2Freq>
 80095a0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80095a2:	e010      	b.n	80095c6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80095a4:	4b4e      	ldr	r3, [pc, #312]	; (80096e0 <UART_SetConfig+0x5c0>)
 80095a6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80095a8:	e00d      	b.n	80095c6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80095aa:	f7fe fb31 	bl	8007c10 <HAL_RCC_GetSysClockFreq>
 80095ae:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80095b0:	e009      	b.n	80095c6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80095b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80095b6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80095b8:	e005      	b.n	80095c6 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80095ba:	2300      	movs	r3, #0
 80095bc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80095be:	2301      	movs	r3, #1
 80095c0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80095c4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80095c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	f000 8090 	beq.w	80096ee <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80095ce:	697b      	ldr	r3, [r7, #20]
 80095d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095d2:	4a44      	ldr	r2, [pc, #272]	; (80096e4 <UART_SetConfig+0x5c4>)
 80095d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80095d8:	461a      	mov	r2, r3
 80095da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095dc:	fbb3 f3f2 	udiv	r3, r3, r2
 80095e0:	005a      	lsls	r2, r3, #1
 80095e2:	697b      	ldr	r3, [r7, #20]
 80095e4:	685b      	ldr	r3, [r3, #4]
 80095e6:	085b      	lsrs	r3, r3, #1
 80095e8:	441a      	add	r2, r3
 80095ea:	697b      	ldr	r3, [r7, #20]
 80095ec:	685b      	ldr	r3, [r3, #4]
 80095ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80095f2:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80095f4:	6a3b      	ldr	r3, [r7, #32]
 80095f6:	2b0f      	cmp	r3, #15
 80095f8:	d916      	bls.n	8009628 <UART_SetConfig+0x508>
 80095fa:	6a3b      	ldr	r3, [r7, #32]
 80095fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009600:	d212      	bcs.n	8009628 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009602:	6a3b      	ldr	r3, [r7, #32]
 8009604:	b29b      	uxth	r3, r3
 8009606:	f023 030f 	bic.w	r3, r3, #15
 800960a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800960c:	6a3b      	ldr	r3, [r7, #32]
 800960e:	085b      	lsrs	r3, r3, #1
 8009610:	b29b      	uxth	r3, r3
 8009612:	f003 0307 	and.w	r3, r3, #7
 8009616:	b29a      	uxth	r2, r3
 8009618:	8bfb      	ldrh	r3, [r7, #30]
 800961a:	4313      	orrs	r3, r2
 800961c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800961e:	697b      	ldr	r3, [r7, #20]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	8bfa      	ldrh	r2, [r7, #30]
 8009624:	60da      	str	r2, [r3, #12]
 8009626:	e062      	b.n	80096ee <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8009628:	2301      	movs	r3, #1
 800962a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800962e:	e05e      	b.n	80096ee <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009630:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009634:	2b08      	cmp	r3, #8
 8009636:	d828      	bhi.n	800968a <UART_SetConfig+0x56a>
 8009638:	a201      	add	r2, pc, #4	; (adr r2, 8009640 <UART_SetConfig+0x520>)
 800963a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800963e:	bf00      	nop
 8009640:	08009665 	.word	0x08009665
 8009644:	0800966d 	.word	0x0800966d
 8009648:	08009675 	.word	0x08009675
 800964c:	0800968b 	.word	0x0800968b
 8009650:	0800967b 	.word	0x0800967b
 8009654:	0800968b 	.word	0x0800968b
 8009658:	0800968b 	.word	0x0800968b
 800965c:	0800968b 	.word	0x0800968b
 8009660:	08009683 	.word	0x08009683
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009664:	f7fe fb6c 	bl	8007d40 <HAL_RCC_GetPCLK1Freq>
 8009668:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800966a:	e014      	b.n	8009696 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800966c:	f7fe fb7e 	bl	8007d6c <HAL_RCC_GetPCLK2Freq>
 8009670:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009672:	e010      	b.n	8009696 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009674:	4b1a      	ldr	r3, [pc, #104]	; (80096e0 <UART_SetConfig+0x5c0>)
 8009676:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009678:	e00d      	b.n	8009696 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800967a:	f7fe fac9 	bl	8007c10 <HAL_RCC_GetSysClockFreq>
 800967e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009680:	e009      	b.n	8009696 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009682:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009686:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009688:	e005      	b.n	8009696 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800968a:	2300      	movs	r3, #0
 800968c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800968e:	2301      	movs	r3, #1
 8009690:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8009694:	bf00      	nop
    }

    if (pclk != 0U)
 8009696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009698:	2b00      	cmp	r3, #0
 800969a:	d028      	beq.n	80096ee <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800969c:	697b      	ldr	r3, [r7, #20]
 800969e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096a0:	4a10      	ldr	r2, [pc, #64]	; (80096e4 <UART_SetConfig+0x5c4>)
 80096a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80096a6:	461a      	mov	r2, r3
 80096a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096aa:	fbb3 f2f2 	udiv	r2, r3, r2
 80096ae:	697b      	ldr	r3, [r7, #20]
 80096b0:	685b      	ldr	r3, [r3, #4]
 80096b2:	085b      	lsrs	r3, r3, #1
 80096b4:	441a      	add	r2, r3
 80096b6:	697b      	ldr	r3, [r7, #20]
 80096b8:	685b      	ldr	r3, [r3, #4]
 80096ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80096be:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80096c0:	6a3b      	ldr	r3, [r7, #32]
 80096c2:	2b0f      	cmp	r3, #15
 80096c4:	d910      	bls.n	80096e8 <UART_SetConfig+0x5c8>
 80096c6:	6a3b      	ldr	r3, [r7, #32]
 80096c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80096cc:	d20c      	bcs.n	80096e8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80096ce:	6a3b      	ldr	r3, [r7, #32]
 80096d0:	b29a      	uxth	r2, r3
 80096d2:	697b      	ldr	r3, [r7, #20]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	60da      	str	r2, [r3, #12]
 80096d8:	e009      	b.n	80096ee <UART_SetConfig+0x5ce>
 80096da:	bf00      	nop
 80096dc:	40008000 	.word	0x40008000
 80096e0:	00f42400 	.word	0x00f42400
 80096e4:	08011c98 	.word	0x08011c98
      }
      else
      {
        ret = HAL_ERROR;
 80096e8:	2301      	movs	r3, #1
 80096ea:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80096ee:	697b      	ldr	r3, [r7, #20]
 80096f0:	2201      	movs	r2, #1
 80096f2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80096f6:	697b      	ldr	r3, [r7, #20]
 80096f8:	2201      	movs	r2, #1
 80096fa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80096fe:	697b      	ldr	r3, [r7, #20]
 8009700:	2200      	movs	r2, #0
 8009702:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8009704:	697b      	ldr	r3, [r7, #20]
 8009706:	2200      	movs	r2, #0
 8009708:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800970a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800970e:	4618      	mov	r0, r3
 8009710:	3730      	adds	r7, #48	; 0x30
 8009712:	46bd      	mov	sp, r7
 8009714:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08009718 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009718:	b480      	push	{r7}
 800971a:	b083      	sub	sp, #12
 800971c:	af00      	add	r7, sp, #0
 800971e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009724:	f003 0301 	and.w	r3, r3, #1
 8009728:	2b00      	cmp	r3, #0
 800972a:	d00a      	beq.n	8009742 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	685b      	ldr	r3, [r3, #4]
 8009732:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	430a      	orrs	r2, r1
 8009740:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009746:	f003 0302 	and.w	r3, r3, #2
 800974a:	2b00      	cmp	r3, #0
 800974c:	d00a      	beq.n	8009764 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	685b      	ldr	r3, [r3, #4]
 8009754:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	430a      	orrs	r2, r1
 8009762:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009768:	f003 0304 	and.w	r3, r3, #4
 800976c:	2b00      	cmp	r3, #0
 800976e:	d00a      	beq.n	8009786 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	685b      	ldr	r3, [r3, #4]
 8009776:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	430a      	orrs	r2, r1
 8009784:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800978a:	f003 0308 	and.w	r3, r3, #8
 800978e:	2b00      	cmp	r3, #0
 8009790:	d00a      	beq.n	80097a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	685b      	ldr	r3, [r3, #4]
 8009798:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	430a      	orrs	r2, r1
 80097a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097ac:	f003 0310 	and.w	r3, r3, #16
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d00a      	beq.n	80097ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	689b      	ldr	r3, [r3, #8]
 80097ba:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	430a      	orrs	r2, r1
 80097c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097ce:	f003 0320 	and.w	r3, r3, #32
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d00a      	beq.n	80097ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	689b      	ldr	r3, [r3, #8]
 80097dc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	430a      	orrs	r2, r1
 80097ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d01a      	beq.n	800982e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	685b      	ldr	r3, [r3, #4]
 80097fe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	430a      	orrs	r2, r1
 800980c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009812:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009816:	d10a      	bne.n	800982e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	685b      	ldr	r3, [r3, #4]
 800981e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	430a      	orrs	r2, r1
 800982c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009832:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009836:	2b00      	cmp	r3, #0
 8009838:	d00a      	beq.n	8009850 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	685b      	ldr	r3, [r3, #4]
 8009840:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	430a      	orrs	r2, r1
 800984e:	605a      	str	r2, [r3, #4]
  }
}
 8009850:	bf00      	nop
 8009852:	370c      	adds	r7, #12
 8009854:	46bd      	mov	sp, r7
 8009856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800985a:	4770      	bx	lr

0800985c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800985c:	b580      	push	{r7, lr}
 800985e:	b086      	sub	sp, #24
 8009860:	af02      	add	r7, sp, #8
 8009862:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	2200      	movs	r2, #0
 8009868:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800986c:	f7fc f9b6 	bl	8005bdc <HAL_GetTick>
 8009870:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	f003 0308 	and.w	r3, r3, #8
 800987c:	2b08      	cmp	r3, #8
 800987e:	d10e      	bne.n	800989e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009880:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009884:	9300      	str	r3, [sp, #0]
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	2200      	movs	r2, #0
 800988a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800988e:	6878      	ldr	r0, [r7, #4]
 8009890:	f000 f82f 	bl	80098f2 <UART_WaitOnFlagUntilTimeout>
 8009894:	4603      	mov	r3, r0
 8009896:	2b00      	cmp	r3, #0
 8009898:	d001      	beq.n	800989e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800989a:	2303      	movs	r3, #3
 800989c:	e025      	b.n	80098ea <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	f003 0304 	and.w	r3, r3, #4
 80098a8:	2b04      	cmp	r3, #4
 80098aa:	d10e      	bne.n	80098ca <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80098ac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80098b0:	9300      	str	r3, [sp, #0]
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	2200      	movs	r2, #0
 80098b6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80098ba:	6878      	ldr	r0, [r7, #4]
 80098bc:	f000 f819 	bl	80098f2 <UART_WaitOnFlagUntilTimeout>
 80098c0:	4603      	mov	r3, r0
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d001      	beq.n	80098ca <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80098c6:	2303      	movs	r3, #3
 80098c8:	e00f      	b.n	80098ea <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	2220      	movs	r2, #32
 80098ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	2220      	movs	r2, #32
 80098d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	2200      	movs	r2, #0
 80098de:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	2200      	movs	r2, #0
 80098e4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80098e8:	2300      	movs	r3, #0
}
 80098ea:	4618      	mov	r0, r3
 80098ec:	3710      	adds	r7, #16
 80098ee:	46bd      	mov	sp, r7
 80098f0:	bd80      	pop	{r7, pc}

080098f2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80098f2:	b580      	push	{r7, lr}
 80098f4:	b09c      	sub	sp, #112	; 0x70
 80098f6:	af00      	add	r7, sp, #0
 80098f8:	60f8      	str	r0, [r7, #12]
 80098fa:	60b9      	str	r1, [r7, #8]
 80098fc:	603b      	str	r3, [r7, #0]
 80098fe:	4613      	mov	r3, r2
 8009900:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009902:	e0a9      	b.n	8009a58 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009904:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009906:	f1b3 3fff 	cmp.w	r3, #4294967295
 800990a:	f000 80a5 	beq.w	8009a58 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800990e:	f7fc f965 	bl	8005bdc <HAL_GetTick>
 8009912:	4602      	mov	r2, r0
 8009914:	683b      	ldr	r3, [r7, #0]
 8009916:	1ad3      	subs	r3, r2, r3
 8009918:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800991a:	429a      	cmp	r2, r3
 800991c:	d302      	bcc.n	8009924 <UART_WaitOnFlagUntilTimeout+0x32>
 800991e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009920:	2b00      	cmp	r3, #0
 8009922:	d140      	bne.n	80099a6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800992a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800992c:	e853 3f00 	ldrex	r3, [r3]
 8009930:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009932:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009934:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009938:	667b      	str	r3, [r7, #100]	; 0x64
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	461a      	mov	r2, r3
 8009940:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009942:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009944:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009946:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009948:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800994a:	e841 2300 	strex	r3, r2, [r1]
 800994e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009950:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009952:	2b00      	cmp	r3, #0
 8009954:	d1e6      	bne.n	8009924 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	3308      	adds	r3, #8
 800995c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800995e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009960:	e853 3f00 	ldrex	r3, [r3]
 8009964:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009966:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009968:	f023 0301 	bic.w	r3, r3, #1
 800996c:	663b      	str	r3, [r7, #96]	; 0x60
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	3308      	adds	r3, #8
 8009974:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009976:	64ba      	str	r2, [r7, #72]	; 0x48
 8009978:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800997a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800997c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800997e:	e841 2300 	strex	r3, r2, [r1]
 8009982:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009984:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009986:	2b00      	cmp	r3, #0
 8009988:	d1e5      	bne.n	8009956 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	2220      	movs	r2, #32
 800998e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	2220      	movs	r2, #32
 8009996:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	2200      	movs	r2, #0
 800999e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80099a2:	2303      	movs	r3, #3
 80099a4:	e069      	b.n	8009a7a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	f003 0304 	and.w	r3, r3, #4
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d051      	beq.n	8009a58 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	69db      	ldr	r3, [r3, #28]
 80099ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80099be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80099c2:	d149      	bne.n	8009a58 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80099cc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099d6:	e853 3f00 	ldrex	r3, [r3]
 80099da:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80099dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099de:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80099e2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	461a      	mov	r2, r3
 80099ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80099ec:	637b      	str	r3, [r7, #52]	; 0x34
 80099ee:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099f0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80099f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80099f4:	e841 2300 	strex	r3, r2, [r1]
 80099f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80099fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d1e6      	bne.n	80099ce <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	3308      	adds	r3, #8
 8009a06:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a08:	697b      	ldr	r3, [r7, #20]
 8009a0a:	e853 3f00 	ldrex	r3, [r3]
 8009a0e:	613b      	str	r3, [r7, #16]
   return(result);
 8009a10:	693b      	ldr	r3, [r7, #16]
 8009a12:	f023 0301 	bic.w	r3, r3, #1
 8009a16:	66bb      	str	r3, [r7, #104]	; 0x68
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	3308      	adds	r3, #8
 8009a1e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009a20:	623a      	str	r2, [r7, #32]
 8009a22:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a24:	69f9      	ldr	r1, [r7, #28]
 8009a26:	6a3a      	ldr	r2, [r7, #32]
 8009a28:	e841 2300 	strex	r3, r2, [r1]
 8009a2c:	61bb      	str	r3, [r7, #24]
   return(result);
 8009a2e:	69bb      	ldr	r3, [r7, #24]
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d1e5      	bne.n	8009a00 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	2220      	movs	r2, #32
 8009a38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	2220      	movs	r2, #32
 8009a40:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	2220      	movs	r2, #32
 8009a48:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	2200      	movs	r2, #0
 8009a50:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8009a54:	2303      	movs	r3, #3
 8009a56:	e010      	b.n	8009a7a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	69da      	ldr	r2, [r3, #28]
 8009a5e:	68bb      	ldr	r3, [r7, #8]
 8009a60:	4013      	ands	r3, r2
 8009a62:	68ba      	ldr	r2, [r7, #8]
 8009a64:	429a      	cmp	r2, r3
 8009a66:	bf0c      	ite	eq
 8009a68:	2301      	moveq	r3, #1
 8009a6a:	2300      	movne	r3, #0
 8009a6c:	b2db      	uxtb	r3, r3
 8009a6e:	461a      	mov	r2, r3
 8009a70:	79fb      	ldrb	r3, [r7, #7]
 8009a72:	429a      	cmp	r2, r3
 8009a74:	f43f af46 	beq.w	8009904 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009a78:	2300      	movs	r3, #0
}
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	3770      	adds	r7, #112	; 0x70
 8009a7e:	46bd      	mov	sp, r7
 8009a80:	bd80      	pop	{r7, pc}

08009a82 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009a82:	b480      	push	{r7}
 8009a84:	b085      	sub	sp, #20
 8009a86:	af00      	add	r7, sp, #0
 8009a88:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009a90:	2b01      	cmp	r3, #1
 8009a92:	d101      	bne.n	8009a98 <HAL_UARTEx_DisableFifoMode+0x16>
 8009a94:	2302      	movs	r3, #2
 8009a96:	e027      	b.n	8009ae8 <HAL_UARTEx_DisableFifoMode+0x66>
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	2201      	movs	r2, #1
 8009a9c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	2224      	movs	r2, #36	; 0x24
 8009aa4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	681a      	ldr	r2, [r3, #0]
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	f022 0201 	bic.w	r2, r2, #1
 8009abe:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009ac6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	2200      	movs	r2, #0
 8009acc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	68fa      	ldr	r2, [r7, #12]
 8009ad4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	2220      	movs	r2, #32
 8009ada:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	2200      	movs	r2, #0
 8009ae2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009ae6:	2300      	movs	r3, #0
}
 8009ae8:	4618      	mov	r0, r3
 8009aea:	3714      	adds	r7, #20
 8009aec:	46bd      	mov	sp, r7
 8009aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af2:	4770      	bx	lr

08009af4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009af4:	b580      	push	{r7, lr}
 8009af6:	b084      	sub	sp, #16
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	6078      	str	r0, [r7, #4]
 8009afc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009b04:	2b01      	cmp	r3, #1
 8009b06:	d101      	bne.n	8009b0c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009b08:	2302      	movs	r3, #2
 8009b0a:	e02d      	b.n	8009b68 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	2201      	movs	r2, #1
 8009b10:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	2224      	movs	r2, #36	; 0x24
 8009b18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	681a      	ldr	r2, [r3, #0]
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	f022 0201 	bic.w	r2, r2, #1
 8009b32:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	689b      	ldr	r3, [r3, #8]
 8009b3a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	683a      	ldr	r2, [r7, #0]
 8009b44:	430a      	orrs	r2, r1
 8009b46:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009b48:	6878      	ldr	r0, [r7, #4]
 8009b4a:	f000 f84f 	bl	8009bec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	68fa      	ldr	r2, [r7, #12]
 8009b54:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	2220      	movs	r2, #32
 8009b5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	2200      	movs	r2, #0
 8009b62:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009b66:	2300      	movs	r3, #0
}
 8009b68:	4618      	mov	r0, r3
 8009b6a:	3710      	adds	r7, #16
 8009b6c:	46bd      	mov	sp, r7
 8009b6e:	bd80      	pop	{r7, pc}

08009b70 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009b70:	b580      	push	{r7, lr}
 8009b72:	b084      	sub	sp, #16
 8009b74:	af00      	add	r7, sp, #0
 8009b76:	6078      	str	r0, [r7, #4]
 8009b78:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009b80:	2b01      	cmp	r3, #1
 8009b82:	d101      	bne.n	8009b88 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009b84:	2302      	movs	r3, #2
 8009b86:	e02d      	b.n	8009be4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	2201      	movs	r2, #1
 8009b8c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	2224      	movs	r2, #36	; 0x24
 8009b94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	681a      	ldr	r2, [r3, #0]
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	f022 0201 	bic.w	r2, r2, #1
 8009bae:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	689b      	ldr	r3, [r3, #8]
 8009bb6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	683a      	ldr	r2, [r7, #0]
 8009bc0:	430a      	orrs	r2, r1
 8009bc2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009bc4:	6878      	ldr	r0, [r7, #4]
 8009bc6:	f000 f811 	bl	8009bec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	68fa      	ldr	r2, [r7, #12]
 8009bd0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	2220      	movs	r2, #32
 8009bd6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	2200      	movs	r2, #0
 8009bde:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009be2:	2300      	movs	r3, #0
}
 8009be4:	4618      	mov	r0, r3
 8009be6:	3710      	adds	r7, #16
 8009be8:	46bd      	mov	sp, r7
 8009bea:	bd80      	pop	{r7, pc}

08009bec <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009bec:	b480      	push	{r7}
 8009bee:	b085      	sub	sp, #20
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d108      	bne.n	8009c0e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	2201      	movs	r2, #1
 8009c00:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	2201      	movs	r2, #1
 8009c08:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009c0c:	e031      	b.n	8009c72 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009c0e:	2308      	movs	r3, #8
 8009c10:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009c12:	2308      	movs	r3, #8
 8009c14:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	689b      	ldr	r3, [r3, #8]
 8009c1c:	0e5b      	lsrs	r3, r3, #25
 8009c1e:	b2db      	uxtb	r3, r3
 8009c20:	f003 0307 	and.w	r3, r3, #7
 8009c24:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	689b      	ldr	r3, [r3, #8]
 8009c2c:	0f5b      	lsrs	r3, r3, #29
 8009c2e:	b2db      	uxtb	r3, r3
 8009c30:	f003 0307 	and.w	r3, r3, #7
 8009c34:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009c36:	7bbb      	ldrb	r3, [r7, #14]
 8009c38:	7b3a      	ldrb	r2, [r7, #12]
 8009c3a:	4911      	ldr	r1, [pc, #68]	; (8009c80 <UARTEx_SetNbDataToProcess+0x94>)
 8009c3c:	5c8a      	ldrb	r2, [r1, r2]
 8009c3e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009c42:	7b3a      	ldrb	r2, [r7, #12]
 8009c44:	490f      	ldr	r1, [pc, #60]	; (8009c84 <UARTEx_SetNbDataToProcess+0x98>)
 8009c46:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009c48:	fb93 f3f2 	sdiv	r3, r3, r2
 8009c4c:	b29a      	uxth	r2, r3
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009c54:	7bfb      	ldrb	r3, [r7, #15]
 8009c56:	7b7a      	ldrb	r2, [r7, #13]
 8009c58:	4909      	ldr	r1, [pc, #36]	; (8009c80 <UARTEx_SetNbDataToProcess+0x94>)
 8009c5a:	5c8a      	ldrb	r2, [r1, r2]
 8009c5c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009c60:	7b7a      	ldrb	r2, [r7, #13]
 8009c62:	4908      	ldr	r1, [pc, #32]	; (8009c84 <UARTEx_SetNbDataToProcess+0x98>)
 8009c64:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009c66:	fb93 f3f2 	sdiv	r3, r3, r2
 8009c6a:	b29a      	uxth	r2, r3
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009c72:	bf00      	nop
 8009c74:	3714      	adds	r7, #20
 8009c76:	46bd      	mov	sp, r7
 8009c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c7c:	4770      	bx	lr
 8009c7e:	bf00      	nop
 8009c80:	08011cb0 	.word	0x08011cb0
 8009c84:	08011cb8 	.word	0x08011cb8

08009c88 <__NVIC_SetPriority>:
{
 8009c88:	b480      	push	{r7}
 8009c8a:	b083      	sub	sp, #12
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	4603      	mov	r3, r0
 8009c90:	6039      	str	r1, [r7, #0]
 8009c92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009c94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	db0a      	blt.n	8009cb2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009c9c:	683b      	ldr	r3, [r7, #0]
 8009c9e:	b2da      	uxtb	r2, r3
 8009ca0:	490c      	ldr	r1, [pc, #48]	; (8009cd4 <__NVIC_SetPriority+0x4c>)
 8009ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009ca6:	0112      	lsls	r2, r2, #4
 8009ca8:	b2d2      	uxtb	r2, r2
 8009caa:	440b      	add	r3, r1
 8009cac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8009cb0:	e00a      	b.n	8009cc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009cb2:	683b      	ldr	r3, [r7, #0]
 8009cb4:	b2da      	uxtb	r2, r3
 8009cb6:	4908      	ldr	r1, [pc, #32]	; (8009cd8 <__NVIC_SetPriority+0x50>)
 8009cb8:	79fb      	ldrb	r3, [r7, #7]
 8009cba:	f003 030f 	and.w	r3, r3, #15
 8009cbe:	3b04      	subs	r3, #4
 8009cc0:	0112      	lsls	r2, r2, #4
 8009cc2:	b2d2      	uxtb	r2, r2
 8009cc4:	440b      	add	r3, r1
 8009cc6:	761a      	strb	r2, [r3, #24]
}
 8009cc8:	bf00      	nop
 8009cca:	370c      	adds	r7, #12
 8009ccc:	46bd      	mov	sp, r7
 8009cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd2:	4770      	bx	lr
 8009cd4:	e000e100 	.word	0xe000e100
 8009cd8:	e000ed00 	.word	0xe000ed00

08009cdc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8009cdc:	b580      	push	{r7, lr}
 8009cde:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8009ce0:	4b05      	ldr	r3, [pc, #20]	; (8009cf8 <SysTick_Handler+0x1c>)
 8009ce2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8009ce4:	f002 f9e0 	bl	800c0a8 <xTaskGetSchedulerState>
 8009ce8:	4603      	mov	r3, r0
 8009cea:	2b01      	cmp	r3, #1
 8009cec:	d001      	beq.n	8009cf2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8009cee:	f003 f8c3 	bl	800ce78 <xPortSysTickHandler>
  }
}
 8009cf2:	bf00      	nop
 8009cf4:	bd80      	pop	{r7, pc}
 8009cf6:	bf00      	nop
 8009cf8:	e000e010 	.word	0xe000e010

08009cfc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009cfc:	b580      	push	{r7, lr}
 8009cfe:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8009d00:	2100      	movs	r1, #0
 8009d02:	f06f 0004 	mvn.w	r0, #4
 8009d06:	f7ff ffbf 	bl	8009c88 <__NVIC_SetPriority>
#endif
}
 8009d0a:	bf00      	nop
 8009d0c:	bd80      	pop	{r7, pc}
	...

08009d10 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009d10:	b480      	push	{r7}
 8009d12:	b083      	sub	sp, #12
 8009d14:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009d16:	f3ef 8305 	mrs	r3, IPSR
 8009d1a:	603b      	str	r3, [r7, #0]
  return(result);
 8009d1c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d003      	beq.n	8009d2a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8009d22:	f06f 0305 	mvn.w	r3, #5
 8009d26:	607b      	str	r3, [r7, #4]
 8009d28:	e00c      	b.n	8009d44 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009d2a:	4b0a      	ldr	r3, [pc, #40]	; (8009d54 <osKernelInitialize+0x44>)
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d105      	bne.n	8009d3e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009d32:	4b08      	ldr	r3, [pc, #32]	; (8009d54 <osKernelInitialize+0x44>)
 8009d34:	2201      	movs	r2, #1
 8009d36:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009d38:	2300      	movs	r3, #0
 8009d3a:	607b      	str	r3, [r7, #4]
 8009d3c:	e002      	b.n	8009d44 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8009d3e:	f04f 33ff 	mov.w	r3, #4294967295
 8009d42:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009d44:	687b      	ldr	r3, [r7, #4]
}
 8009d46:	4618      	mov	r0, r3
 8009d48:	370c      	adds	r7, #12
 8009d4a:	46bd      	mov	sp, r7
 8009d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d50:	4770      	bx	lr
 8009d52:	bf00      	nop
 8009d54:	2000054c 	.word	0x2000054c

08009d58 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009d58:	b580      	push	{r7, lr}
 8009d5a:	b082      	sub	sp, #8
 8009d5c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009d5e:	f3ef 8305 	mrs	r3, IPSR
 8009d62:	603b      	str	r3, [r7, #0]
  return(result);
 8009d64:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d003      	beq.n	8009d72 <osKernelStart+0x1a>
    stat = osErrorISR;
 8009d6a:	f06f 0305 	mvn.w	r3, #5
 8009d6e:	607b      	str	r3, [r7, #4]
 8009d70:	e010      	b.n	8009d94 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009d72:	4b0b      	ldr	r3, [pc, #44]	; (8009da0 <osKernelStart+0x48>)
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	2b01      	cmp	r3, #1
 8009d78:	d109      	bne.n	8009d8e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009d7a:	f7ff ffbf 	bl	8009cfc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009d7e:	4b08      	ldr	r3, [pc, #32]	; (8009da0 <osKernelStart+0x48>)
 8009d80:	2202      	movs	r2, #2
 8009d82:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009d84:	f001 fd38 	bl	800b7f8 <vTaskStartScheduler>
      stat = osOK;
 8009d88:	2300      	movs	r3, #0
 8009d8a:	607b      	str	r3, [r7, #4]
 8009d8c:	e002      	b.n	8009d94 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8009d8e:	f04f 33ff 	mov.w	r3, #4294967295
 8009d92:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009d94:	687b      	ldr	r3, [r7, #4]
}
 8009d96:	4618      	mov	r0, r3
 8009d98:	3708      	adds	r7, #8
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	bd80      	pop	{r7, pc}
 8009d9e:	bf00      	nop
 8009da0:	2000054c 	.word	0x2000054c

08009da4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009da4:	b580      	push	{r7, lr}
 8009da6:	b08e      	sub	sp, #56	; 0x38
 8009da8:	af04      	add	r7, sp, #16
 8009daa:	60f8      	str	r0, [r7, #12]
 8009dac:	60b9      	str	r1, [r7, #8]
 8009dae:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009db0:	2300      	movs	r3, #0
 8009db2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009db4:	f3ef 8305 	mrs	r3, IPSR
 8009db8:	617b      	str	r3, [r7, #20]
  return(result);
 8009dba:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d17e      	bne.n	8009ebe <osThreadNew+0x11a>
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d07b      	beq.n	8009ebe <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8009dc6:	2380      	movs	r3, #128	; 0x80
 8009dc8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8009dca:	2318      	movs	r3, #24
 8009dcc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8009dce:	2300      	movs	r3, #0
 8009dd0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8009dd2:	f04f 33ff 	mov.w	r3, #4294967295
 8009dd6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d045      	beq.n	8009e6a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d002      	beq.n	8009dec <osThreadNew+0x48>
        name = attr->name;
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	699b      	ldr	r3, [r3, #24]
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d002      	beq.n	8009dfa <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	699b      	ldr	r3, [r3, #24]
 8009df8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009dfa:	69fb      	ldr	r3, [r7, #28]
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d008      	beq.n	8009e12 <osThreadNew+0x6e>
 8009e00:	69fb      	ldr	r3, [r7, #28]
 8009e02:	2b38      	cmp	r3, #56	; 0x38
 8009e04:	d805      	bhi.n	8009e12 <osThreadNew+0x6e>
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	685b      	ldr	r3, [r3, #4]
 8009e0a:	f003 0301 	and.w	r3, r3, #1
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d001      	beq.n	8009e16 <osThreadNew+0x72>
        return (NULL);
 8009e12:	2300      	movs	r3, #0
 8009e14:	e054      	b.n	8009ec0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	695b      	ldr	r3, [r3, #20]
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d003      	beq.n	8009e26 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	695b      	ldr	r3, [r3, #20]
 8009e22:	089b      	lsrs	r3, r3, #2
 8009e24:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	689b      	ldr	r3, [r3, #8]
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d00e      	beq.n	8009e4c <osThreadNew+0xa8>
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	68db      	ldr	r3, [r3, #12]
 8009e32:	2b5b      	cmp	r3, #91	; 0x5b
 8009e34:	d90a      	bls.n	8009e4c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d006      	beq.n	8009e4c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	695b      	ldr	r3, [r3, #20]
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d002      	beq.n	8009e4c <osThreadNew+0xa8>
        mem = 1;
 8009e46:	2301      	movs	r3, #1
 8009e48:	61bb      	str	r3, [r7, #24]
 8009e4a:	e010      	b.n	8009e6e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	689b      	ldr	r3, [r3, #8]
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d10c      	bne.n	8009e6e <osThreadNew+0xca>
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	68db      	ldr	r3, [r3, #12]
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d108      	bne.n	8009e6e <osThreadNew+0xca>
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	691b      	ldr	r3, [r3, #16]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d104      	bne.n	8009e6e <osThreadNew+0xca>
          mem = 0;
 8009e64:	2300      	movs	r3, #0
 8009e66:	61bb      	str	r3, [r7, #24]
 8009e68:	e001      	b.n	8009e6e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8009e6a:	2300      	movs	r3, #0
 8009e6c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009e6e:	69bb      	ldr	r3, [r7, #24]
 8009e70:	2b01      	cmp	r3, #1
 8009e72:	d110      	bne.n	8009e96 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009e78:	687a      	ldr	r2, [r7, #4]
 8009e7a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009e7c:	9202      	str	r2, [sp, #8]
 8009e7e:	9301      	str	r3, [sp, #4]
 8009e80:	69fb      	ldr	r3, [r7, #28]
 8009e82:	9300      	str	r3, [sp, #0]
 8009e84:	68bb      	ldr	r3, [r7, #8]
 8009e86:	6a3a      	ldr	r2, [r7, #32]
 8009e88:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009e8a:	68f8      	ldr	r0, [r7, #12]
 8009e8c:	f001 fade 	bl	800b44c <xTaskCreateStatic>
 8009e90:	4603      	mov	r3, r0
 8009e92:	613b      	str	r3, [r7, #16]
 8009e94:	e013      	b.n	8009ebe <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8009e96:	69bb      	ldr	r3, [r7, #24]
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d110      	bne.n	8009ebe <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009e9c:	6a3b      	ldr	r3, [r7, #32]
 8009e9e:	b29a      	uxth	r2, r3
 8009ea0:	f107 0310 	add.w	r3, r7, #16
 8009ea4:	9301      	str	r3, [sp, #4]
 8009ea6:	69fb      	ldr	r3, [r7, #28]
 8009ea8:	9300      	str	r3, [sp, #0]
 8009eaa:	68bb      	ldr	r3, [r7, #8]
 8009eac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009eae:	68f8      	ldr	r0, [r7, #12]
 8009eb0:	f001 fb29 	bl	800b506 <xTaskCreate>
 8009eb4:	4603      	mov	r3, r0
 8009eb6:	2b01      	cmp	r3, #1
 8009eb8:	d001      	beq.n	8009ebe <osThreadNew+0x11a>
            hTask = NULL;
 8009eba:	2300      	movs	r3, #0
 8009ebc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009ebe:	693b      	ldr	r3, [r7, #16]
}
 8009ec0:	4618      	mov	r0, r3
 8009ec2:	3728      	adds	r7, #40	; 0x28
 8009ec4:	46bd      	mov	sp, r7
 8009ec6:	bd80      	pop	{r7, pc}

08009ec8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8009ec8:	b580      	push	{r7, lr}
 8009eca:	b084      	sub	sp, #16
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009ed0:	f3ef 8305 	mrs	r3, IPSR
 8009ed4:	60bb      	str	r3, [r7, #8]
  return(result);
 8009ed6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d003      	beq.n	8009ee4 <osDelay+0x1c>
    stat = osErrorISR;
 8009edc:	f06f 0305 	mvn.w	r3, #5
 8009ee0:	60fb      	str	r3, [r7, #12]
 8009ee2:	e007      	b.n	8009ef4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8009ee4:	2300      	movs	r3, #0
 8009ee6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d002      	beq.n	8009ef4 <osDelay+0x2c>
      vTaskDelay(ticks);
 8009eee:	6878      	ldr	r0, [r7, #4]
 8009ef0:	f001 fc4e 	bl	800b790 <vTaskDelay>
    }
  }

  return (stat);
 8009ef4:	68fb      	ldr	r3, [r7, #12]
}
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	3710      	adds	r7, #16
 8009efa:	46bd      	mov	sp, r7
 8009efc:	bd80      	pop	{r7, pc}

08009efe <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8009efe:	b580      	push	{r7, lr}
 8009f00:	b088      	sub	sp, #32
 8009f02:	af00      	add	r7, sp, #0
 8009f04:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8009f06:	2300      	movs	r3, #0
 8009f08:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009f0a:	f3ef 8305 	mrs	r3, IPSR
 8009f0e:	60bb      	str	r3, [r7, #8]
  return(result);
 8009f10:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d174      	bne.n	800a000 <osMutexNew+0x102>
    if (attr != NULL) {
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d003      	beq.n	8009f24 <osMutexNew+0x26>
      type = attr->attr_bits;
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	685b      	ldr	r3, [r3, #4]
 8009f20:	61bb      	str	r3, [r7, #24]
 8009f22:	e001      	b.n	8009f28 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8009f24:	2300      	movs	r3, #0
 8009f26:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8009f28:	69bb      	ldr	r3, [r7, #24]
 8009f2a:	f003 0301 	and.w	r3, r3, #1
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d002      	beq.n	8009f38 <osMutexNew+0x3a>
      rmtx = 1U;
 8009f32:	2301      	movs	r3, #1
 8009f34:	617b      	str	r3, [r7, #20]
 8009f36:	e001      	b.n	8009f3c <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8009f38:	2300      	movs	r3, #0
 8009f3a:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8009f3c:	69bb      	ldr	r3, [r7, #24]
 8009f3e:	f003 0308 	and.w	r3, r3, #8
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d15c      	bne.n	800a000 <osMutexNew+0x102>
      mem = -1;
 8009f46:	f04f 33ff 	mov.w	r3, #4294967295
 8009f4a:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d015      	beq.n	8009f7e <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	689b      	ldr	r3, [r3, #8]
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d006      	beq.n	8009f68 <osMutexNew+0x6a>
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	68db      	ldr	r3, [r3, #12]
 8009f5e:	2b4f      	cmp	r3, #79	; 0x4f
 8009f60:	d902      	bls.n	8009f68 <osMutexNew+0x6a>
          mem = 1;
 8009f62:	2301      	movs	r3, #1
 8009f64:	613b      	str	r3, [r7, #16]
 8009f66:	e00c      	b.n	8009f82 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	689b      	ldr	r3, [r3, #8]
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d108      	bne.n	8009f82 <osMutexNew+0x84>
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	68db      	ldr	r3, [r3, #12]
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d104      	bne.n	8009f82 <osMutexNew+0x84>
            mem = 0;
 8009f78:	2300      	movs	r3, #0
 8009f7a:	613b      	str	r3, [r7, #16]
 8009f7c:	e001      	b.n	8009f82 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8009f7e:	2300      	movs	r3, #0
 8009f80:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8009f82:	693b      	ldr	r3, [r7, #16]
 8009f84:	2b01      	cmp	r3, #1
 8009f86:	d112      	bne.n	8009fae <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8009f88:	697b      	ldr	r3, [r7, #20]
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d007      	beq.n	8009f9e <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	689b      	ldr	r3, [r3, #8]
 8009f92:	4619      	mov	r1, r3
 8009f94:	2004      	movs	r0, #4
 8009f96:	f000 fc48 	bl	800a82a <xQueueCreateMutexStatic>
 8009f9a:	61f8      	str	r0, [r7, #28]
 8009f9c:	e016      	b.n	8009fcc <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	689b      	ldr	r3, [r3, #8]
 8009fa2:	4619      	mov	r1, r3
 8009fa4:	2001      	movs	r0, #1
 8009fa6:	f000 fc40 	bl	800a82a <xQueueCreateMutexStatic>
 8009faa:	61f8      	str	r0, [r7, #28]
 8009fac:	e00e      	b.n	8009fcc <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8009fae:	693b      	ldr	r3, [r7, #16]
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d10b      	bne.n	8009fcc <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8009fb4:	697b      	ldr	r3, [r7, #20]
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d004      	beq.n	8009fc4 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8009fba:	2004      	movs	r0, #4
 8009fbc:	f000 fc1d 	bl	800a7fa <xQueueCreateMutex>
 8009fc0:	61f8      	str	r0, [r7, #28]
 8009fc2:	e003      	b.n	8009fcc <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8009fc4:	2001      	movs	r0, #1
 8009fc6:	f000 fc18 	bl	800a7fa <xQueueCreateMutex>
 8009fca:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8009fcc:	69fb      	ldr	r3, [r7, #28]
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d00c      	beq.n	8009fec <osMutexNew+0xee>
        if (attr != NULL) {
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d003      	beq.n	8009fe0 <osMutexNew+0xe2>
          name = attr->name;
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	60fb      	str	r3, [r7, #12]
 8009fde:	e001      	b.n	8009fe4 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8009fe0:	2300      	movs	r3, #0
 8009fe2:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8009fe4:	68f9      	ldr	r1, [r7, #12]
 8009fe6:	69f8      	ldr	r0, [r7, #28]
 8009fe8:	f001 f9d2 	bl	800b390 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8009fec:	69fb      	ldr	r3, [r7, #28]
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d006      	beq.n	800a000 <osMutexNew+0x102>
 8009ff2:	697b      	ldr	r3, [r7, #20]
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d003      	beq.n	800a000 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8009ff8:	69fb      	ldr	r3, [r7, #28]
 8009ffa:	f043 0301 	orr.w	r3, r3, #1
 8009ffe:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800a000:	69fb      	ldr	r3, [r7, #28]
}
 800a002:	4618      	mov	r0, r3
 800a004:	3720      	adds	r7, #32
 800a006:	46bd      	mov	sp, r7
 800a008:	bd80      	pop	{r7, pc}

0800a00a <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800a00a:	b580      	push	{r7, lr}
 800a00c:	b086      	sub	sp, #24
 800a00e:	af00      	add	r7, sp, #0
 800a010:	6078      	str	r0, [r7, #4]
 800a012:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	f023 0301 	bic.w	r3, r3, #1
 800a01a:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	f003 0301 	and.w	r3, r3, #1
 800a022:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800a024:	2300      	movs	r3, #0
 800a026:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a028:	f3ef 8305 	mrs	r3, IPSR
 800a02c:	60bb      	str	r3, [r7, #8]
  return(result);
 800a02e:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800a030:	2b00      	cmp	r3, #0
 800a032:	d003      	beq.n	800a03c <osMutexAcquire+0x32>
    stat = osErrorISR;
 800a034:	f06f 0305 	mvn.w	r3, #5
 800a038:	617b      	str	r3, [r7, #20]
 800a03a:	e02c      	b.n	800a096 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800a03c:	693b      	ldr	r3, [r7, #16]
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d103      	bne.n	800a04a <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800a042:	f06f 0303 	mvn.w	r3, #3
 800a046:	617b      	str	r3, [r7, #20]
 800a048:	e025      	b.n	800a096 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d011      	beq.n	800a074 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800a050:	6839      	ldr	r1, [r7, #0]
 800a052:	6938      	ldr	r0, [r7, #16]
 800a054:	f000 fc38 	bl	800a8c8 <xQueueTakeMutexRecursive>
 800a058:	4603      	mov	r3, r0
 800a05a:	2b01      	cmp	r3, #1
 800a05c:	d01b      	beq.n	800a096 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800a05e:	683b      	ldr	r3, [r7, #0]
 800a060:	2b00      	cmp	r3, #0
 800a062:	d003      	beq.n	800a06c <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800a064:	f06f 0301 	mvn.w	r3, #1
 800a068:	617b      	str	r3, [r7, #20]
 800a06a:	e014      	b.n	800a096 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800a06c:	f06f 0302 	mvn.w	r3, #2
 800a070:	617b      	str	r3, [r7, #20]
 800a072:	e010      	b.n	800a096 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800a074:	6839      	ldr	r1, [r7, #0]
 800a076:	6938      	ldr	r0, [r7, #16]
 800a078:	f000 fed6 	bl	800ae28 <xQueueSemaphoreTake>
 800a07c:	4603      	mov	r3, r0
 800a07e:	2b01      	cmp	r3, #1
 800a080:	d009      	beq.n	800a096 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800a082:	683b      	ldr	r3, [r7, #0]
 800a084:	2b00      	cmp	r3, #0
 800a086:	d003      	beq.n	800a090 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800a088:	f06f 0301 	mvn.w	r3, #1
 800a08c:	617b      	str	r3, [r7, #20]
 800a08e:	e002      	b.n	800a096 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800a090:	f06f 0302 	mvn.w	r3, #2
 800a094:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800a096:	697b      	ldr	r3, [r7, #20]
}
 800a098:	4618      	mov	r0, r3
 800a09a:	3718      	adds	r7, #24
 800a09c:	46bd      	mov	sp, r7
 800a09e:	bd80      	pop	{r7, pc}

0800a0a0 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800a0a0:	b580      	push	{r7, lr}
 800a0a2:	b086      	sub	sp, #24
 800a0a4:	af00      	add	r7, sp, #0
 800a0a6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	f023 0301 	bic.w	r3, r3, #1
 800a0ae:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	f003 0301 	and.w	r3, r3, #1
 800a0b6:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800a0b8:	2300      	movs	r3, #0
 800a0ba:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a0bc:	f3ef 8305 	mrs	r3, IPSR
 800a0c0:	60bb      	str	r3, [r7, #8]
  return(result);
 800a0c2:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d003      	beq.n	800a0d0 <osMutexRelease+0x30>
    stat = osErrorISR;
 800a0c8:	f06f 0305 	mvn.w	r3, #5
 800a0cc:	617b      	str	r3, [r7, #20]
 800a0ce:	e01f      	b.n	800a110 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800a0d0:	693b      	ldr	r3, [r7, #16]
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d103      	bne.n	800a0de <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800a0d6:	f06f 0303 	mvn.w	r3, #3
 800a0da:	617b      	str	r3, [r7, #20]
 800a0dc:	e018      	b.n	800a110 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d009      	beq.n	800a0f8 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800a0e4:	6938      	ldr	r0, [r7, #16]
 800a0e6:	f000 fbbb 	bl	800a860 <xQueueGiveMutexRecursive>
 800a0ea:	4603      	mov	r3, r0
 800a0ec:	2b01      	cmp	r3, #1
 800a0ee:	d00f      	beq.n	800a110 <osMutexRelease+0x70>
        stat = osErrorResource;
 800a0f0:	f06f 0302 	mvn.w	r3, #2
 800a0f4:	617b      	str	r3, [r7, #20]
 800a0f6:	e00b      	b.n	800a110 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800a0f8:	2300      	movs	r3, #0
 800a0fa:	2200      	movs	r2, #0
 800a0fc:	2100      	movs	r1, #0
 800a0fe:	6938      	ldr	r0, [r7, #16]
 800a100:	f000 fc18 	bl	800a934 <xQueueGenericSend>
 800a104:	4603      	mov	r3, r0
 800a106:	2b01      	cmp	r3, #1
 800a108:	d002      	beq.n	800a110 <osMutexRelease+0x70>
        stat = osErrorResource;
 800a10a:	f06f 0302 	mvn.w	r3, #2
 800a10e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800a110:	697b      	ldr	r3, [r7, #20]
}
 800a112:	4618      	mov	r0, r3
 800a114:	3718      	adds	r7, #24
 800a116:	46bd      	mov	sp, r7
 800a118:	bd80      	pop	{r7, pc}

0800a11a <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800a11a:	b580      	push	{r7, lr}
 800a11c:	b08a      	sub	sp, #40	; 0x28
 800a11e:	af02      	add	r7, sp, #8
 800a120:	60f8      	str	r0, [r7, #12]
 800a122:	60b9      	str	r1, [r7, #8]
 800a124:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800a126:	2300      	movs	r3, #0
 800a128:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a12a:	f3ef 8305 	mrs	r3, IPSR
 800a12e:	613b      	str	r3, [r7, #16]
  return(result);
 800a130:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800a132:	2b00      	cmp	r3, #0
 800a134:	d15f      	bne.n	800a1f6 <osMessageQueueNew+0xdc>
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d05c      	beq.n	800a1f6 <osMessageQueueNew+0xdc>
 800a13c:	68bb      	ldr	r3, [r7, #8]
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d059      	beq.n	800a1f6 <osMessageQueueNew+0xdc>
    mem = -1;
 800a142:	f04f 33ff 	mov.w	r3, #4294967295
 800a146:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d029      	beq.n	800a1a2 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	689b      	ldr	r3, [r3, #8]
 800a152:	2b00      	cmp	r3, #0
 800a154:	d012      	beq.n	800a17c <osMessageQueueNew+0x62>
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	68db      	ldr	r3, [r3, #12]
 800a15a:	2b4f      	cmp	r3, #79	; 0x4f
 800a15c:	d90e      	bls.n	800a17c <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a162:	2b00      	cmp	r3, #0
 800a164:	d00a      	beq.n	800a17c <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	695a      	ldr	r2, [r3, #20]
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	68b9      	ldr	r1, [r7, #8]
 800a16e:	fb01 f303 	mul.w	r3, r1, r3
 800a172:	429a      	cmp	r2, r3
 800a174:	d302      	bcc.n	800a17c <osMessageQueueNew+0x62>
        mem = 1;
 800a176:	2301      	movs	r3, #1
 800a178:	61bb      	str	r3, [r7, #24]
 800a17a:	e014      	b.n	800a1a6 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	689b      	ldr	r3, [r3, #8]
 800a180:	2b00      	cmp	r3, #0
 800a182:	d110      	bne.n	800a1a6 <osMessageQueueNew+0x8c>
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	68db      	ldr	r3, [r3, #12]
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d10c      	bne.n	800a1a6 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a190:	2b00      	cmp	r3, #0
 800a192:	d108      	bne.n	800a1a6 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	695b      	ldr	r3, [r3, #20]
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d104      	bne.n	800a1a6 <osMessageQueueNew+0x8c>
          mem = 0;
 800a19c:	2300      	movs	r3, #0
 800a19e:	61bb      	str	r3, [r7, #24]
 800a1a0:	e001      	b.n	800a1a6 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800a1a2:	2300      	movs	r3, #0
 800a1a4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a1a6:	69bb      	ldr	r3, [r7, #24]
 800a1a8:	2b01      	cmp	r3, #1
 800a1aa:	d10b      	bne.n	800a1c4 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	691a      	ldr	r2, [r3, #16]
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	689b      	ldr	r3, [r3, #8]
 800a1b4:	2100      	movs	r1, #0
 800a1b6:	9100      	str	r1, [sp, #0]
 800a1b8:	68b9      	ldr	r1, [r7, #8]
 800a1ba:	68f8      	ldr	r0, [r7, #12]
 800a1bc:	f000 fa2e 	bl	800a61c <xQueueGenericCreateStatic>
 800a1c0:	61f8      	str	r0, [r7, #28]
 800a1c2:	e008      	b.n	800a1d6 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800a1c4:	69bb      	ldr	r3, [r7, #24]
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d105      	bne.n	800a1d6 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800a1ca:	2200      	movs	r2, #0
 800a1cc:	68b9      	ldr	r1, [r7, #8]
 800a1ce:	68f8      	ldr	r0, [r7, #12]
 800a1d0:	f000 fa9c 	bl	800a70c <xQueueGenericCreate>
 800a1d4:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800a1d6:	69fb      	ldr	r3, [r7, #28]
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d00c      	beq.n	800a1f6 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d003      	beq.n	800a1ea <osMessageQueueNew+0xd0>
        name = attr->name;
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	617b      	str	r3, [r7, #20]
 800a1e8:	e001      	b.n	800a1ee <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800a1ea:	2300      	movs	r3, #0
 800a1ec:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800a1ee:	6979      	ldr	r1, [r7, #20]
 800a1f0:	69f8      	ldr	r0, [r7, #28]
 800a1f2:	f001 f8cd 	bl	800b390 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800a1f6:	69fb      	ldr	r3, [r7, #28]
}
 800a1f8:	4618      	mov	r0, r3
 800a1fa:	3720      	adds	r7, #32
 800a1fc:	46bd      	mov	sp, r7
 800a1fe:	bd80      	pop	{r7, pc}

0800a200 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800a200:	b580      	push	{r7, lr}
 800a202:	b088      	sub	sp, #32
 800a204:	af00      	add	r7, sp, #0
 800a206:	60f8      	str	r0, [r7, #12]
 800a208:	60b9      	str	r1, [r7, #8]
 800a20a:	603b      	str	r3, [r7, #0]
 800a20c:	4613      	mov	r3, r2
 800a20e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800a214:	2300      	movs	r3, #0
 800a216:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a218:	f3ef 8305 	mrs	r3, IPSR
 800a21c:	617b      	str	r3, [r7, #20]
  return(result);
 800a21e:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800a220:	2b00      	cmp	r3, #0
 800a222:	d028      	beq.n	800a276 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a224:	69bb      	ldr	r3, [r7, #24]
 800a226:	2b00      	cmp	r3, #0
 800a228:	d005      	beq.n	800a236 <osMessageQueuePut+0x36>
 800a22a:	68bb      	ldr	r3, [r7, #8]
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d002      	beq.n	800a236 <osMessageQueuePut+0x36>
 800a230:	683b      	ldr	r3, [r7, #0]
 800a232:	2b00      	cmp	r3, #0
 800a234:	d003      	beq.n	800a23e <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800a236:	f06f 0303 	mvn.w	r3, #3
 800a23a:	61fb      	str	r3, [r7, #28]
 800a23c:	e038      	b.n	800a2b0 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800a23e:	2300      	movs	r3, #0
 800a240:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800a242:	f107 0210 	add.w	r2, r7, #16
 800a246:	2300      	movs	r3, #0
 800a248:	68b9      	ldr	r1, [r7, #8]
 800a24a:	69b8      	ldr	r0, [r7, #24]
 800a24c:	f000 fc70 	bl	800ab30 <xQueueGenericSendFromISR>
 800a250:	4603      	mov	r3, r0
 800a252:	2b01      	cmp	r3, #1
 800a254:	d003      	beq.n	800a25e <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800a256:	f06f 0302 	mvn.w	r3, #2
 800a25a:	61fb      	str	r3, [r7, #28]
 800a25c:	e028      	b.n	800a2b0 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800a25e:	693b      	ldr	r3, [r7, #16]
 800a260:	2b00      	cmp	r3, #0
 800a262:	d025      	beq.n	800a2b0 <osMessageQueuePut+0xb0>
 800a264:	4b15      	ldr	r3, [pc, #84]	; (800a2bc <osMessageQueuePut+0xbc>)
 800a266:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a26a:	601a      	str	r2, [r3, #0]
 800a26c:	f3bf 8f4f 	dsb	sy
 800a270:	f3bf 8f6f 	isb	sy
 800a274:	e01c      	b.n	800a2b0 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800a276:	69bb      	ldr	r3, [r7, #24]
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d002      	beq.n	800a282 <osMessageQueuePut+0x82>
 800a27c:	68bb      	ldr	r3, [r7, #8]
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d103      	bne.n	800a28a <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800a282:	f06f 0303 	mvn.w	r3, #3
 800a286:	61fb      	str	r3, [r7, #28]
 800a288:	e012      	b.n	800a2b0 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800a28a:	2300      	movs	r3, #0
 800a28c:	683a      	ldr	r2, [r7, #0]
 800a28e:	68b9      	ldr	r1, [r7, #8]
 800a290:	69b8      	ldr	r0, [r7, #24]
 800a292:	f000 fb4f 	bl	800a934 <xQueueGenericSend>
 800a296:	4603      	mov	r3, r0
 800a298:	2b01      	cmp	r3, #1
 800a29a:	d009      	beq.n	800a2b0 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800a29c:	683b      	ldr	r3, [r7, #0]
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d003      	beq.n	800a2aa <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800a2a2:	f06f 0301 	mvn.w	r3, #1
 800a2a6:	61fb      	str	r3, [r7, #28]
 800a2a8:	e002      	b.n	800a2b0 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800a2aa:	f06f 0302 	mvn.w	r3, #2
 800a2ae:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800a2b0:	69fb      	ldr	r3, [r7, #28]
}
 800a2b2:	4618      	mov	r0, r3
 800a2b4:	3720      	adds	r7, #32
 800a2b6:	46bd      	mov	sp, r7
 800a2b8:	bd80      	pop	{r7, pc}
 800a2ba:	bf00      	nop
 800a2bc:	e000ed04 	.word	0xe000ed04

0800a2c0 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800a2c0:	b580      	push	{r7, lr}
 800a2c2:	b088      	sub	sp, #32
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	60f8      	str	r0, [r7, #12]
 800a2c8:	60b9      	str	r1, [r7, #8]
 800a2ca:	607a      	str	r2, [r7, #4]
 800a2cc:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800a2d2:	2300      	movs	r3, #0
 800a2d4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a2d6:	f3ef 8305 	mrs	r3, IPSR
 800a2da:	617b      	str	r3, [r7, #20]
  return(result);
 800a2dc:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d028      	beq.n	800a334 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a2e2:	69bb      	ldr	r3, [r7, #24]
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d005      	beq.n	800a2f4 <osMessageQueueGet+0x34>
 800a2e8:	68bb      	ldr	r3, [r7, #8]
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d002      	beq.n	800a2f4 <osMessageQueueGet+0x34>
 800a2ee:	683b      	ldr	r3, [r7, #0]
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d003      	beq.n	800a2fc <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800a2f4:	f06f 0303 	mvn.w	r3, #3
 800a2f8:	61fb      	str	r3, [r7, #28]
 800a2fa:	e037      	b.n	800a36c <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800a2fc:	2300      	movs	r3, #0
 800a2fe:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800a300:	f107 0310 	add.w	r3, r7, #16
 800a304:	461a      	mov	r2, r3
 800a306:	68b9      	ldr	r1, [r7, #8]
 800a308:	69b8      	ldr	r0, [r7, #24]
 800a30a:	f000 fe99 	bl	800b040 <xQueueReceiveFromISR>
 800a30e:	4603      	mov	r3, r0
 800a310:	2b01      	cmp	r3, #1
 800a312:	d003      	beq.n	800a31c <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800a314:	f06f 0302 	mvn.w	r3, #2
 800a318:	61fb      	str	r3, [r7, #28]
 800a31a:	e027      	b.n	800a36c <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800a31c:	693b      	ldr	r3, [r7, #16]
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d024      	beq.n	800a36c <osMessageQueueGet+0xac>
 800a322:	4b15      	ldr	r3, [pc, #84]	; (800a378 <osMessageQueueGet+0xb8>)
 800a324:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a328:	601a      	str	r2, [r3, #0]
 800a32a:	f3bf 8f4f 	dsb	sy
 800a32e:	f3bf 8f6f 	isb	sy
 800a332:	e01b      	b.n	800a36c <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800a334:	69bb      	ldr	r3, [r7, #24]
 800a336:	2b00      	cmp	r3, #0
 800a338:	d002      	beq.n	800a340 <osMessageQueueGet+0x80>
 800a33a:	68bb      	ldr	r3, [r7, #8]
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d103      	bne.n	800a348 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800a340:	f06f 0303 	mvn.w	r3, #3
 800a344:	61fb      	str	r3, [r7, #28]
 800a346:	e011      	b.n	800a36c <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800a348:	683a      	ldr	r2, [r7, #0]
 800a34a:	68b9      	ldr	r1, [r7, #8]
 800a34c:	69b8      	ldr	r0, [r7, #24]
 800a34e:	f000 fc8b 	bl	800ac68 <xQueueReceive>
 800a352:	4603      	mov	r3, r0
 800a354:	2b01      	cmp	r3, #1
 800a356:	d009      	beq.n	800a36c <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800a358:	683b      	ldr	r3, [r7, #0]
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d003      	beq.n	800a366 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800a35e:	f06f 0301 	mvn.w	r3, #1
 800a362:	61fb      	str	r3, [r7, #28]
 800a364:	e002      	b.n	800a36c <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800a366:	f06f 0302 	mvn.w	r3, #2
 800a36a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800a36c:	69fb      	ldr	r3, [r7, #28]
}
 800a36e:	4618      	mov	r0, r3
 800a370:	3720      	adds	r7, #32
 800a372:	46bd      	mov	sp, r7
 800a374:	bd80      	pop	{r7, pc}
 800a376:	bf00      	nop
 800a378:	e000ed04 	.word	0xe000ed04

0800a37c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a37c:	b480      	push	{r7}
 800a37e:	b085      	sub	sp, #20
 800a380:	af00      	add	r7, sp, #0
 800a382:	60f8      	str	r0, [r7, #12]
 800a384:	60b9      	str	r1, [r7, #8]
 800a386:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	4a07      	ldr	r2, [pc, #28]	; (800a3a8 <vApplicationGetIdleTaskMemory+0x2c>)
 800a38c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a38e:	68bb      	ldr	r3, [r7, #8]
 800a390:	4a06      	ldr	r2, [pc, #24]	; (800a3ac <vApplicationGetIdleTaskMemory+0x30>)
 800a392:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	2280      	movs	r2, #128	; 0x80
 800a398:	601a      	str	r2, [r3, #0]
}
 800a39a:	bf00      	nop
 800a39c:	3714      	adds	r7, #20
 800a39e:	46bd      	mov	sp, r7
 800a3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a4:	4770      	bx	lr
 800a3a6:	bf00      	nop
 800a3a8:	20000550 	.word	0x20000550
 800a3ac:	200005ac 	.word	0x200005ac

0800a3b0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a3b0:	b480      	push	{r7}
 800a3b2:	b085      	sub	sp, #20
 800a3b4:	af00      	add	r7, sp, #0
 800a3b6:	60f8      	str	r0, [r7, #12]
 800a3b8:	60b9      	str	r1, [r7, #8]
 800a3ba:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	4a07      	ldr	r2, [pc, #28]	; (800a3dc <vApplicationGetTimerTaskMemory+0x2c>)
 800a3c0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a3c2:	68bb      	ldr	r3, [r7, #8]
 800a3c4:	4a06      	ldr	r2, [pc, #24]	; (800a3e0 <vApplicationGetTimerTaskMemory+0x30>)
 800a3c6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a3ce:	601a      	str	r2, [r3, #0]
}
 800a3d0:	bf00      	nop
 800a3d2:	3714      	adds	r7, #20
 800a3d4:	46bd      	mov	sp, r7
 800a3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3da:	4770      	bx	lr
 800a3dc:	200007ac 	.word	0x200007ac
 800a3e0:	20000808 	.word	0x20000808

0800a3e4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a3e4:	b480      	push	{r7}
 800a3e6:	b083      	sub	sp, #12
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	f103 0208 	add.w	r2, r3, #8
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	f04f 32ff 	mov.w	r2, #4294967295
 800a3fc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	f103 0208 	add.w	r2, r3, #8
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	f103 0208 	add.w	r2, r3, #8
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	2200      	movs	r2, #0
 800a416:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a418:	bf00      	nop
 800a41a:	370c      	adds	r7, #12
 800a41c:	46bd      	mov	sp, r7
 800a41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a422:	4770      	bx	lr

0800a424 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a424:	b480      	push	{r7}
 800a426:	b083      	sub	sp, #12
 800a428:	af00      	add	r7, sp, #0
 800a42a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	2200      	movs	r2, #0
 800a430:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a432:	bf00      	nop
 800a434:	370c      	adds	r7, #12
 800a436:	46bd      	mov	sp, r7
 800a438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a43c:	4770      	bx	lr

0800a43e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a43e:	b480      	push	{r7}
 800a440:	b085      	sub	sp, #20
 800a442:	af00      	add	r7, sp, #0
 800a444:	6078      	str	r0, [r7, #4]
 800a446:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	685b      	ldr	r3, [r3, #4]
 800a44c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a44e:	683b      	ldr	r3, [r7, #0]
 800a450:	68fa      	ldr	r2, [r7, #12]
 800a452:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	689a      	ldr	r2, [r3, #8]
 800a458:	683b      	ldr	r3, [r7, #0]
 800a45a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	689b      	ldr	r3, [r3, #8]
 800a460:	683a      	ldr	r2, [r7, #0]
 800a462:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	683a      	ldr	r2, [r7, #0]
 800a468:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a46a:	683b      	ldr	r3, [r7, #0]
 800a46c:	687a      	ldr	r2, [r7, #4]
 800a46e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	1c5a      	adds	r2, r3, #1
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	601a      	str	r2, [r3, #0]
}
 800a47a:	bf00      	nop
 800a47c:	3714      	adds	r7, #20
 800a47e:	46bd      	mov	sp, r7
 800a480:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a484:	4770      	bx	lr

0800a486 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a486:	b480      	push	{r7}
 800a488:	b085      	sub	sp, #20
 800a48a:	af00      	add	r7, sp, #0
 800a48c:	6078      	str	r0, [r7, #4]
 800a48e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a490:	683b      	ldr	r3, [r7, #0]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a496:	68bb      	ldr	r3, [r7, #8]
 800a498:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a49c:	d103      	bne.n	800a4a6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	691b      	ldr	r3, [r3, #16]
 800a4a2:	60fb      	str	r3, [r7, #12]
 800a4a4:	e00c      	b.n	800a4c0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	3308      	adds	r3, #8
 800a4aa:	60fb      	str	r3, [r7, #12]
 800a4ac:	e002      	b.n	800a4b4 <vListInsert+0x2e>
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	685b      	ldr	r3, [r3, #4]
 800a4b2:	60fb      	str	r3, [r7, #12]
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	685b      	ldr	r3, [r3, #4]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	68ba      	ldr	r2, [r7, #8]
 800a4bc:	429a      	cmp	r2, r3
 800a4be:	d2f6      	bcs.n	800a4ae <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	685a      	ldr	r2, [r3, #4]
 800a4c4:	683b      	ldr	r3, [r7, #0]
 800a4c6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a4c8:	683b      	ldr	r3, [r7, #0]
 800a4ca:	685b      	ldr	r3, [r3, #4]
 800a4cc:	683a      	ldr	r2, [r7, #0]
 800a4ce:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a4d0:	683b      	ldr	r3, [r7, #0]
 800a4d2:	68fa      	ldr	r2, [r7, #12]
 800a4d4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	683a      	ldr	r2, [r7, #0]
 800a4da:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a4dc:	683b      	ldr	r3, [r7, #0]
 800a4de:	687a      	ldr	r2, [r7, #4]
 800a4e0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	1c5a      	adds	r2, r3, #1
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	601a      	str	r2, [r3, #0]
}
 800a4ec:	bf00      	nop
 800a4ee:	3714      	adds	r7, #20
 800a4f0:	46bd      	mov	sp, r7
 800a4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f6:	4770      	bx	lr

0800a4f8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a4f8:	b480      	push	{r7}
 800a4fa:	b085      	sub	sp, #20
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	691b      	ldr	r3, [r3, #16]
 800a504:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	685b      	ldr	r3, [r3, #4]
 800a50a:	687a      	ldr	r2, [r7, #4]
 800a50c:	6892      	ldr	r2, [r2, #8]
 800a50e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	689b      	ldr	r3, [r3, #8]
 800a514:	687a      	ldr	r2, [r7, #4]
 800a516:	6852      	ldr	r2, [r2, #4]
 800a518:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	685b      	ldr	r3, [r3, #4]
 800a51e:	687a      	ldr	r2, [r7, #4]
 800a520:	429a      	cmp	r2, r3
 800a522:	d103      	bne.n	800a52c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	689a      	ldr	r2, [r3, #8]
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	2200      	movs	r2, #0
 800a530:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	1e5a      	subs	r2, r3, #1
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	681b      	ldr	r3, [r3, #0]
}
 800a540:	4618      	mov	r0, r3
 800a542:	3714      	adds	r7, #20
 800a544:	46bd      	mov	sp, r7
 800a546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a54a:	4770      	bx	lr

0800a54c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a54c:	b580      	push	{r7, lr}
 800a54e:	b084      	sub	sp, #16
 800a550:	af00      	add	r7, sp, #0
 800a552:	6078      	str	r0, [r7, #4]
 800a554:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d10a      	bne.n	800a576 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a560:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a564:	f383 8811 	msr	BASEPRI, r3
 800a568:	f3bf 8f6f 	isb	sy
 800a56c:	f3bf 8f4f 	dsb	sy
 800a570:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a572:	bf00      	nop
 800a574:	e7fe      	b.n	800a574 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a576:	f002 fbed 	bl	800cd54 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	681a      	ldr	r2, [r3, #0]
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a582:	68f9      	ldr	r1, [r7, #12]
 800a584:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a586:	fb01 f303 	mul.w	r3, r1, r3
 800a58a:	441a      	add	r2, r3
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	2200      	movs	r2, #0
 800a594:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	681a      	ldr	r2, [r3, #0]
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	681a      	ldr	r2, [r3, #0]
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5a6:	3b01      	subs	r3, #1
 800a5a8:	68f9      	ldr	r1, [r7, #12]
 800a5aa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a5ac:	fb01 f303 	mul.w	r3, r1, r3
 800a5b0:	441a      	add	r2, r3
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	22ff      	movs	r2, #255	; 0xff
 800a5ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	22ff      	movs	r2, #255	; 0xff
 800a5c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a5c6:	683b      	ldr	r3, [r7, #0]
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d114      	bne.n	800a5f6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	691b      	ldr	r3, [r3, #16]
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d01a      	beq.n	800a60a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	3310      	adds	r3, #16
 800a5d8:	4618      	mov	r0, r3
 800a5da:	f001 fb97 	bl	800bd0c <xTaskRemoveFromEventList>
 800a5de:	4603      	mov	r3, r0
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d012      	beq.n	800a60a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a5e4:	4b0c      	ldr	r3, [pc, #48]	; (800a618 <xQueueGenericReset+0xcc>)
 800a5e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a5ea:	601a      	str	r2, [r3, #0]
 800a5ec:	f3bf 8f4f 	dsb	sy
 800a5f0:	f3bf 8f6f 	isb	sy
 800a5f4:	e009      	b.n	800a60a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	3310      	adds	r3, #16
 800a5fa:	4618      	mov	r0, r3
 800a5fc:	f7ff fef2 	bl	800a3e4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	3324      	adds	r3, #36	; 0x24
 800a604:	4618      	mov	r0, r3
 800a606:	f7ff feed 	bl	800a3e4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a60a:	f002 fbd3 	bl	800cdb4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a60e:	2301      	movs	r3, #1
}
 800a610:	4618      	mov	r0, r3
 800a612:	3710      	adds	r7, #16
 800a614:	46bd      	mov	sp, r7
 800a616:	bd80      	pop	{r7, pc}
 800a618:	e000ed04 	.word	0xe000ed04

0800a61c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a61c:	b580      	push	{r7, lr}
 800a61e:	b08e      	sub	sp, #56	; 0x38
 800a620:	af02      	add	r7, sp, #8
 800a622:	60f8      	str	r0, [r7, #12]
 800a624:	60b9      	str	r1, [r7, #8]
 800a626:	607a      	str	r2, [r7, #4]
 800a628:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d10a      	bne.n	800a646 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800a630:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a634:	f383 8811 	msr	BASEPRI, r3
 800a638:	f3bf 8f6f 	isb	sy
 800a63c:	f3bf 8f4f 	dsb	sy
 800a640:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a642:	bf00      	nop
 800a644:	e7fe      	b.n	800a644 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a646:	683b      	ldr	r3, [r7, #0]
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d10a      	bne.n	800a662 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800a64c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a650:	f383 8811 	msr	BASEPRI, r3
 800a654:	f3bf 8f6f 	isb	sy
 800a658:	f3bf 8f4f 	dsb	sy
 800a65c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a65e:	bf00      	nop
 800a660:	e7fe      	b.n	800a660 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	2b00      	cmp	r3, #0
 800a666:	d002      	beq.n	800a66e <xQueueGenericCreateStatic+0x52>
 800a668:	68bb      	ldr	r3, [r7, #8]
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d001      	beq.n	800a672 <xQueueGenericCreateStatic+0x56>
 800a66e:	2301      	movs	r3, #1
 800a670:	e000      	b.n	800a674 <xQueueGenericCreateStatic+0x58>
 800a672:	2300      	movs	r3, #0
 800a674:	2b00      	cmp	r3, #0
 800a676:	d10a      	bne.n	800a68e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800a678:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a67c:	f383 8811 	msr	BASEPRI, r3
 800a680:	f3bf 8f6f 	isb	sy
 800a684:	f3bf 8f4f 	dsb	sy
 800a688:	623b      	str	r3, [r7, #32]
}
 800a68a:	bf00      	nop
 800a68c:	e7fe      	b.n	800a68c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	2b00      	cmp	r3, #0
 800a692:	d102      	bne.n	800a69a <xQueueGenericCreateStatic+0x7e>
 800a694:	68bb      	ldr	r3, [r7, #8]
 800a696:	2b00      	cmp	r3, #0
 800a698:	d101      	bne.n	800a69e <xQueueGenericCreateStatic+0x82>
 800a69a:	2301      	movs	r3, #1
 800a69c:	e000      	b.n	800a6a0 <xQueueGenericCreateStatic+0x84>
 800a69e:	2300      	movs	r3, #0
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d10a      	bne.n	800a6ba <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800a6a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6a8:	f383 8811 	msr	BASEPRI, r3
 800a6ac:	f3bf 8f6f 	isb	sy
 800a6b0:	f3bf 8f4f 	dsb	sy
 800a6b4:	61fb      	str	r3, [r7, #28]
}
 800a6b6:	bf00      	nop
 800a6b8:	e7fe      	b.n	800a6b8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a6ba:	2350      	movs	r3, #80	; 0x50
 800a6bc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a6be:	697b      	ldr	r3, [r7, #20]
 800a6c0:	2b50      	cmp	r3, #80	; 0x50
 800a6c2:	d00a      	beq.n	800a6da <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800a6c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6c8:	f383 8811 	msr	BASEPRI, r3
 800a6cc:	f3bf 8f6f 	isb	sy
 800a6d0:	f3bf 8f4f 	dsb	sy
 800a6d4:	61bb      	str	r3, [r7, #24]
}
 800a6d6:	bf00      	nop
 800a6d8:	e7fe      	b.n	800a6d8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a6da:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a6dc:	683b      	ldr	r3, [r7, #0]
 800a6de:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a6e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d00d      	beq.n	800a702 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a6e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6e8:	2201      	movs	r2, #1
 800a6ea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a6ee:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a6f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6f4:	9300      	str	r3, [sp, #0]
 800a6f6:	4613      	mov	r3, r2
 800a6f8:	687a      	ldr	r2, [r7, #4]
 800a6fa:	68b9      	ldr	r1, [r7, #8]
 800a6fc:	68f8      	ldr	r0, [r7, #12]
 800a6fe:	f000 f83f 	bl	800a780 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a704:	4618      	mov	r0, r3
 800a706:	3730      	adds	r7, #48	; 0x30
 800a708:	46bd      	mov	sp, r7
 800a70a:	bd80      	pop	{r7, pc}

0800a70c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a70c:	b580      	push	{r7, lr}
 800a70e:	b08a      	sub	sp, #40	; 0x28
 800a710:	af02      	add	r7, sp, #8
 800a712:	60f8      	str	r0, [r7, #12]
 800a714:	60b9      	str	r1, [r7, #8]
 800a716:	4613      	mov	r3, r2
 800a718:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d10a      	bne.n	800a736 <xQueueGenericCreate+0x2a>
	__asm volatile
 800a720:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a724:	f383 8811 	msr	BASEPRI, r3
 800a728:	f3bf 8f6f 	isb	sy
 800a72c:	f3bf 8f4f 	dsb	sy
 800a730:	613b      	str	r3, [r7, #16]
}
 800a732:	bf00      	nop
 800a734:	e7fe      	b.n	800a734 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	68ba      	ldr	r2, [r7, #8]
 800a73a:	fb02 f303 	mul.w	r3, r2, r3
 800a73e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a740:	69fb      	ldr	r3, [r7, #28]
 800a742:	3350      	adds	r3, #80	; 0x50
 800a744:	4618      	mov	r0, r3
 800a746:	f002 fc27 	bl	800cf98 <pvPortMalloc>
 800a74a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a74c:	69bb      	ldr	r3, [r7, #24]
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d011      	beq.n	800a776 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a752:	69bb      	ldr	r3, [r7, #24]
 800a754:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a756:	697b      	ldr	r3, [r7, #20]
 800a758:	3350      	adds	r3, #80	; 0x50
 800a75a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a75c:	69bb      	ldr	r3, [r7, #24]
 800a75e:	2200      	movs	r2, #0
 800a760:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a764:	79fa      	ldrb	r2, [r7, #7]
 800a766:	69bb      	ldr	r3, [r7, #24]
 800a768:	9300      	str	r3, [sp, #0]
 800a76a:	4613      	mov	r3, r2
 800a76c:	697a      	ldr	r2, [r7, #20]
 800a76e:	68b9      	ldr	r1, [r7, #8]
 800a770:	68f8      	ldr	r0, [r7, #12]
 800a772:	f000 f805 	bl	800a780 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a776:	69bb      	ldr	r3, [r7, #24]
	}
 800a778:	4618      	mov	r0, r3
 800a77a:	3720      	adds	r7, #32
 800a77c:	46bd      	mov	sp, r7
 800a77e:	bd80      	pop	{r7, pc}

0800a780 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a780:	b580      	push	{r7, lr}
 800a782:	b084      	sub	sp, #16
 800a784:	af00      	add	r7, sp, #0
 800a786:	60f8      	str	r0, [r7, #12]
 800a788:	60b9      	str	r1, [r7, #8]
 800a78a:	607a      	str	r2, [r7, #4]
 800a78c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a78e:	68bb      	ldr	r3, [r7, #8]
 800a790:	2b00      	cmp	r3, #0
 800a792:	d103      	bne.n	800a79c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a794:	69bb      	ldr	r3, [r7, #24]
 800a796:	69ba      	ldr	r2, [r7, #24]
 800a798:	601a      	str	r2, [r3, #0]
 800a79a:	e002      	b.n	800a7a2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a79c:	69bb      	ldr	r3, [r7, #24]
 800a79e:	687a      	ldr	r2, [r7, #4]
 800a7a0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a7a2:	69bb      	ldr	r3, [r7, #24]
 800a7a4:	68fa      	ldr	r2, [r7, #12]
 800a7a6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a7a8:	69bb      	ldr	r3, [r7, #24]
 800a7aa:	68ba      	ldr	r2, [r7, #8]
 800a7ac:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a7ae:	2101      	movs	r1, #1
 800a7b0:	69b8      	ldr	r0, [r7, #24]
 800a7b2:	f7ff fecb 	bl	800a54c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a7b6:	69bb      	ldr	r3, [r7, #24]
 800a7b8:	78fa      	ldrb	r2, [r7, #3]
 800a7ba:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a7be:	bf00      	nop
 800a7c0:	3710      	adds	r7, #16
 800a7c2:	46bd      	mov	sp, r7
 800a7c4:	bd80      	pop	{r7, pc}

0800a7c6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800a7c6:	b580      	push	{r7, lr}
 800a7c8:	b082      	sub	sp, #8
 800a7ca:	af00      	add	r7, sp, #0
 800a7cc:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d00e      	beq.n	800a7f2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	2200      	movs	r2, #0
 800a7d8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	2200      	movs	r2, #0
 800a7de:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	2200      	movs	r2, #0
 800a7e4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800a7e6:	2300      	movs	r3, #0
 800a7e8:	2200      	movs	r2, #0
 800a7ea:	2100      	movs	r1, #0
 800a7ec:	6878      	ldr	r0, [r7, #4]
 800a7ee:	f000 f8a1 	bl	800a934 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800a7f2:	bf00      	nop
 800a7f4:	3708      	adds	r7, #8
 800a7f6:	46bd      	mov	sp, r7
 800a7f8:	bd80      	pop	{r7, pc}

0800a7fa <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800a7fa:	b580      	push	{r7, lr}
 800a7fc:	b086      	sub	sp, #24
 800a7fe:	af00      	add	r7, sp, #0
 800a800:	4603      	mov	r3, r0
 800a802:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800a804:	2301      	movs	r3, #1
 800a806:	617b      	str	r3, [r7, #20]
 800a808:	2300      	movs	r3, #0
 800a80a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800a80c:	79fb      	ldrb	r3, [r7, #7]
 800a80e:	461a      	mov	r2, r3
 800a810:	6939      	ldr	r1, [r7, #16]
 800a812:	6978      	ldr	r0, [r7, #20]
 800a814:	f7ff ff7a 	bl	800a70c <xQueueGenericCreate>
 800a818:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800a81a:	68f8      	ldr	r0, [r7, #12]
 800a81c:	f7ff ffd3 	bl	800a7c6 <prvInitialiseMutex>

		return xNewQueue;
 800a820:	68fb      	ldr	r3, [r7, #12]
	}
 800a822:	4618      	mov	r0, r3
 800a824:	3718      	adds	r7, #24
 800a826:	46bd      	mov	sp, r7
 800a828:	bd80      	pop	{r7, pc}

0800a82a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800a82a:	b580      	push	{r7, lr}
 800a82c:	b088      	sub	sp, #32
 800a82e:	af02      	add	r7, sp, #8
 800a830:	4603      	mov	r3, r0
 800a832:	6039      	str	r1, [r7, #0]
 800a834:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800a836:	2301      	movs	r3, #1
 800a838:	617b      	str	r3, [r7, #20]
 800a83a:	2300      	movs	r3, #0
 800a83c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800a83e:	79fb      	ldrb	r3, [r7, #7]
 800a840:	9300      	str	r3, [sp, #0]
 800a842:	683b      	ldr	r3, [r7, #0]
 800a844:	2200      	movs	r2, #0
 800a846:	6939      	ldr	r1, [r7, #16]
 800a848:	6978      	ldr	r0, [r7, #20]
 800a84a:	f7ff fee7 	bl	800a61c <xQueueGenericCreateStatic>
 800a84e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800a850:	68f8      	ldr	r0, [r7, #12]
 800a852:	f7ff ffb8 	bl	800a7c6 <prvInitialiseMutex>

		return xNewQueue;
 800a856:	68fb      	ldr	r3, [r7, #12]
	}
 800a858:	4618      	mov	r0, r3
 800a85a:	3718      	adds	r7, #24
 800a85c:	46bd      	mov	sp, r7
 800a85e:	bd80      	pop	{r7, pc}

0800a860 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800a860:	b590      	push	{r4, r7, lr}
 800a862:	b087      	sub	sp, #28
 800a864:	af00      	add	r7, sp, #0
 800a866:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800a86c:	693b      	ldr	r3, [r7, #16]
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d10a      	bne.n	800a888 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 800a872:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a876:	f383 8811 	msr	BASEPRI, r3
 800a87a:	f3bf 8f6f 	isb	sy
 800a87e:	f3bf 8f4f 	dsb	sy
 800a882:	60fb      	str	r3, [r7, #12]
}
 800a884:	bf00      	nop
 800a886:	e7fe      	b.n	800a886 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800a888:	693b      	ldr	r3, [r7, #16]
 800a88a:	689c      	ldr	r4, [r3, #8]
 800a88c:	f001 fbfc 	bl	800c088 <xTaskGetCurrentTaskHandle>
 800a890:	4603      	mov	r3, r0
 800a892:	429c      	cmp	r4, r3
 800a894:	d111      	bne.n	800a8ba <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800a896:	693b      	ldr	r3, [r7, #16]
 800a898:	68db      	ldr	r3, [r3, #12]
 800a89a:	1e5a      	subs	r2, r3, #1
 800a89c:	693b      	ldr	r3, [r7, #16]
 800a89e:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800a8a0:	693b      	ldr	r3, [r7, #16]
 800a8a2:	68db      	ldr	r3, [r3, #12]
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d105      	bne.n	800a8b4 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800a8a8:	2300      	movs	r3, #0
 800a8aa:	2200      	movs	r2, #0
 800a8ac:	2100      	movs	r1, #0
 800a8ae:	6938      	ldr	r0, [r7, #16]
 800a8b0:	f000 f840 	bl	800a934 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800a8b4:	2301      	movs	r3, #1
 800a8b6:	617b      	str	r3, [r7, #20]
 800a8b8:	e001      	b.n	800a8be <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800a8ba:	2300      	movs	r3, #0
 800a8bc:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800a8be:	697b      	ldr	r3, [r7, #20]
	}
 800a8c0:	4618      	mov	r0, r3
 800a8c2:	371c      	adds	r7, #28
 800a8c4:	46bd      	mov	sp, r7
 800a8c6:	bd90      	pop	{r4, r7, pc}

0800a8c8 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800a8c8:	b590      	push	{r4, r7, lr}
 800a8ca:	b087      	sub	sp, #28
 800a8cc:	af00      	add	r7, sp, #0
 800a8ce:	6078      	str	r0, [r7, #4]
 800a8d0:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800a8d6:	693b      	ldr	r3, [r7, #16]
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d10a      	bne.n	800a8f2 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 800a8dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8e0:	f383 8811 	msr	BASEPRI, r3
 800a8e4:	f3bf 8f6f 	isb	sy
 800a8e8:	f3bf 8f4f 	dsb	sy
 800a8ec:	60fb      	str	r3, [r7, #12]
}
 800a8ee:	bf00      	nop
 800a8f0:	e7fe      	b.n	800a8f0 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800a8f2:	693b      	ldr	r3, [r7, #16]
 800a8f4:	689c      	ldr	r4, [r3, #8]
 800a8f6:	f001 fbc7 	bl	800c088 <xTaskGetCurrentTaskHandle>
 800a8fa:	4603      	mov	r3, r0
 800a8fc:	429c      	cmp	r4, r3
 800a8fe:	d107      	bne.n	800a910 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800a900:	693b      	ldr	r3, [r7, #16]
 800a902:	68db      	ldr	r3, [r3, #12]
 800a904:	1c5a      	adds	r2, r3, #1
 800a906:	693b      	ldr	r3, [r7, #16]
 800a908:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800a90a:	2301      	movs	r3, #1
 800a90c:	617b      	str	r3, [r7, #20]
 800a90e:	e00c      	b.n	800a92a <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800a910:	6839      	ldr	r1, [r7, #0]
 800a912:	6938      	ldr	r0, [r7, #16]
 800a914:	f000 fa88 	bl	800ae28 <xQueueSemaphoreTake>
 800a918:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800a91a:	697b      	ldr	r3, [r7, #20]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d004      	beq.n	800a92a <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800a920:	693b      	ldr	r3, [r7, #16]
 800a922:	68db      	ldr	r3, [r3, #12]
 800a924:	1c5a      	adds	r2, r3, #1
 800a926:	693b      	ldr	r3, [r7, #16]
 800a928:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800a92a:	697b      	ldr	r3, [r7, #20]
	}
 800a92c:	4618      	mov	r0, r3
 800a92e:	371c      	adds	r7, #28
 800a930:	46bd      	mov	sp, r7
 800a932:	bd90      	pop	{r4, r7, pc}

0800a934 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a934:	b580      	push	{r7, lr}
 800a936:	b08e      	sub	sp, #56	; 0x38
 800a938:	af00      	add	r7, sp, #0
 800a93a:	60f8      	str	r0, [r7, #12]
 800a93c:	60b9      	str	r1, [r7, #8]
 800a93e:	607a      	str	r2, [r7, #4]
 800a940:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a942:	2300      	movs	r3, #0
 800a944:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a94a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d10a      	bne.n	800a966 <xQueueGenericSend+0x32>
	__asm volatile
 800a950:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a954:	f383 8811 	msr	BASEPRI, r3
 800a958:	f3bf 8f6f 	isb	sy
 800a95c:	f3bf 8f4f 	dsb	sy
 800a960:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a962:	bf00      	nop
 800a964:	e7fe      	b.n	800a964 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a966:	68bb      	ldr	r3, [r7, #8]
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d103      	bne.n	800a974 <xQueueGenericSend+0x40>
 800a96c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a96e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a970:	2b00      	cmp	r3, #0
 800a972:	d101      	bne.n	800a978 <xQueueGenericSend+0x44>
 800a974:	2301      	movs	r3, #1
 800a976:	e000      	b.n	800a97a <xQueueGenericSend+0x46>
 800a978:	2300      	movs	r3, #0
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d10a      	bne.n	800a994 <xQueueGenericSend+0x60>
	__asm volatile
 800a97e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a982:	f383 8811 	msr	BASEPRI, r3
 800a986:	f3bf 8f6f 	isb	sy
 800a98a:	f3bf 8f4f 	dsb	sy
 800a98e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a990:	bf00      	nop
 800a992:	e7fe      	b.n	800a992 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a994:	683b      	ldr	r3, [r7, #0]
 800a996:	2b02      	cmp	r3, #2
 800a998:	d103      	bne.n	800a9a2 <xQueueGenericSend+0x6e>
 800a99a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a99c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a99e:	2b01      	cmp	r3, #1
 800a9a0:	d101      	bne.n	800a9a6 <xQueueGenericSend+0x72>
 800a9a2:	2301      	movs	r3, #1
 800a9a4:	e000      	b.n	800a9a8 <xQueueGenericSend+0x74>
 800a9a6:	2300      	movs	r3, #0
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d10a      	bne.n	800a9c2 <xQueueGenericSend+0x8e>
	__asm volatile
 800a9ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9b0:	f383 8811 	msr	BASEPRI, r3
 800a9b4:	f3bf 8f6f 	isb	sy
 800a9b8:	f3bf 8f4f 	dsb	sy
 800a9bc:	623b      	str	r3, [r7, #32]
}
 800a9be:	bf00      	nop
 800a9c0:	e7fe      	b.n	800a9c0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a9c2:	f001 fb71 	bl	800c0a8 <xTaskGetSchedulerState>
 800a9c6:	4603      	mov	r3, r0
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d102      	bne.n	800a9d2 <xQueueGenericSend+0x9e>
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d101      	bne.n	800a9d6 <xQueueGenericSend+0xa2>
 800a9d2:	2301      	movs	r3, #1
 800a9d4:	e000      	b.n	800a9d8 <xQueueGenericSend+0xa4>
 800a9d6:	2300      	movs	r3, #0
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d10a      	bne.n	800a9f2 <xQueueGenericSend+0xbe>
	__asm volatile
 800a9dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9e0:	f383 8811 	msr	BASEPRI, r3
 800a9e4:	f3bf 8f6f 	isb	sy
 800a9e8:	f3bf 8f4f 	dsb	sy
 800a9ec:	61fb      	str	r3, [r7, #28]
}
 800a9ee:	bf00      	nop
 800a9f0:	e7fe      	b.n	800a9f0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a9f2:	f002 f9af 	bl	800cd54 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a9f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a9fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a9fe:	429a      	cmp	r2, r3
 800aa00:	d302      	bcc.n	800aa08 <xQueueGenericSend+0xd4>
 800aa02:	683b      	ldr	r3, [r7, #0]
 800aa04:	2b02      	cmp	r3, #2
 800aa06:	d129      	bne.n	800aa5c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800aa08:	683a      	ldr	r2, [r7, #0]
 800aa0a:	68b9      	ldr	r1, [r7, #8]
 800aa0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aa0e:	f000 fbaf 	bl	800b170 <prvCopyDataToQueue>
 800aa12:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800aa14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d010      	beq.n	800aa3e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800aa1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa1e:	3324      	adds	r3, #36	; 0x24
 800aa20:	4618      	mov	r0, r3
 800aa22:	f001 f973 	bl	800bd0c <xTaskRemoveFromEventList>
 800aa26:	4603      	mov	r3, r0
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d013      	beq.n	800aa54 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800aa2c:	4b3f      	ldr	r3, [pc, #252]	; (800ab2c <xQueueGenericSend+0x1f8>)
 800aa2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa32:	601a      	str	r2, [r3, #0]
 800aa34:	f3bf 8f4f 	dsb	sy
 800aa38:	f3bf 8f6f 	isb	sy
 800aa3c:	e00a      	b.n	800aa54 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800aa3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d007      	beq.n	800aa54 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800aa44:	4b39      	ldr	r3, [pc, #228]	; (800ab2c <xQueueGenericSend+0x1f8>)
 800aa46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa4a:	601a      	str	r2, [r3, #0]
 800aa4c:	f3bf 8f4f 	dsb	sy
 800aa50:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800aa54:	f002 f9ae 	bl	800cdb4 <vPortExitCritical>
				return pdPASS;
 800aa58:	2301      	movs	r3, #1
 800aa5a:	e063      	b.n	800ab24 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d103      	bne.n	800aa6a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800aa62:	f002 f9a7 	bl	800cdb4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800aa66:	2300      	movs	r3, #0
 800aa68:	e05c      	b.n	800ab24 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800aa6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d106      	bne.n	800aa7e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800aa70:	f107 0314 	add.w	r3, r7, #20
 800aa74:	4618      	mov	r0, r3
 800aa76:	f001 f9ad 	bl	800bdd4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800aa7a:	2301      	movs	r3, #1
 800aa7c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800aa7e:	f002 f999 	bl	800cdb4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800aa82:	f000 ff1f 	bl	800b8c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800aa86:	f002 f965 	bl	800cd54 <vPortEnterCritical>
 800aa8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa8c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aa90:	b25b      	sxtb	r3, r3
 800aa92:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa96:	d103      	bne.n	800aaa0 <xQueueGenericSend+0x16c>
 800aa98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa9a:	2200      	movs	r2, #0
 800aa9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aaa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaa2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aaa6:	b25b      	sxtb	r3, r3
 800aaa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aaac:	d103      	bne.n	800aab6 <xQueueGenericSend+0x182>
 800aaae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aab0:	2200      	movs	r2, #0
 800aab2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aab6:	f002 f97d 	bl	800cdb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800aaba:	1d3a      	adds	r2, r7, #4
 800aabc:	f107 0314 	add.w	r3, r7, #20
 800aac0:	4611      	mov	r1, r2
 800aac2:	4618      	mov	r0, r3
 800aac4:	f001 f99c 	bl	800be00 <xTaskCheckForTimeOut>
 800aac8:	4603      	mov	r3, r0
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d124      	bne.n	800ab18 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800aace:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aad0:	f000 fc46 	bl	800b360 <prvIsQueueFull>
 800aad4:	4603      	mov	r3, r0
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d018      	beq.n	800ab0c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800aada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aadc:	3310      	adds	r3, #16
 800aade:	687a      	ldr	r2, [r7, #4]
 800aae0:	4611      	mov	r1, r2
 800aae2:	4618      	mov	r0, r3
 800aae4:	f001 f8c2 	bl	800bc6c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800aae8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aaea:	f000 fbd1 	bl	800b290 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800aaee:	f000 fef7 	bl	800b8e0 <xTaskResumeAll>
 800aaf2:	4603      	mov	r3, r0
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	f47f af7c 	bne.w	800a9f2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800aafa:	4b0c      	ldr	r3, [pc, #48]	; (800ab2c <xQueueGenericSend+0x1f8>)
 800aafc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab00:	601a      	str	r2, [r3, #0]
 800ab02:	f3bf 8f4f 	dsb	sy
 800ab06:	f3bf 8f6f 	isb	sy
 800ab0a:	e772      	b.n	800a9f2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800ab0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ab0e:	f000 fbbf 	bl	800b290 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ab12:	f000 fee5 	bl	800b8e0 <xTaskResumeAll>
 800ab16:	e76c      	b.n	800a9f2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800ab18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ab1a:	f000 fbb9 	bl	800b290 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ab1e:	f000 fedf 	bl	800b8e0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800ab22:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800ab24:	4618      	mov	r0, r3
 800ab26:	3738      	adds	r7, #56	; 0x38
 800ab28:	46bd      	mov	sp, r7
 800ab2a:	bd80      	pop	{r7, pc}
 800ab2c:	e000ed04 	.word	0xe000ed04

0800ab30 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800ab30:	b580      	push	{r7, lr}
 800ab32:	b090      	sub	sp, #64	; 0x40
 800ab34:	af00      	add	r7, sp, #0
 800ab36:	60f8      	str	r0, [r7, #12]
 800ab38:	60b9      	str	r1, [r7, #8]
 800ab3a:	607a      	str	r2, [r7, #4]
 800ab3c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800ab42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d10a      	bne.n	800ab5e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800ab48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab4c:	f383 8811 	msr	BASEPRI, r3
 800ab50:	f3bf 8f6f 	isb	sy
 800ab54:	f3bf 8f4f 	dsb	sy
 800ab58:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ab5a:	bf00      	nop
 800ab5c:	e7fe      	b.n	800ab5c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ab5e:	68bb      	ldr	r3, [r7, #8]
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d103      	bne.n	800ab6c <xQueueGenericSendFromISR+0x3c>
 800ab64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d101      	bne.n	800ab70 <xQueueGenericSendFromISR+0x40>
 800ab6c:	2301      	movs	r3, #1
 800ab6e:	e000      	b.n	800ab72 <xQueueGenericSendFromISR+0x42>
 800ab70:	2300      	movs	r3, #0
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d10a      	bne.n	800ab8c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800ab76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab7a:	f383 8811 	msr	BASEPRI, r3
 800ab7e:	f3bf 8f6f 	isb	sy
 800ab82:	f3bf 8f4f 	dsb	sy
 800ab86:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ab88:	bf00      	nop
 800ab8a:	e7fe      	b.n	800ab8a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ab8c:	683b      	ldr	r3, [r7, #0]
 800ab8e:	2b02      	cmp	r3, #2
 800ab90:	d103      	bne.n	800ab9a <xQueueGenericSendFromISR+0x6a>
 800ab92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab96:	2b01      	cmp	r3, #1
 800ab98:	d101      	bne.n	800ab9e <xQueueGenericSendFromISR+0x6e>
 800ab9a:	2301      	movs	r3, #1
 800ab9c:	e000      	b.n	800aba0 <xQueueGenericSendFromISR+0x70>
 800ab9e:	2300      	movs	r3, #0
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d10a      	bne.n	800abba <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800aba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aba8:	f383 8811 	msr	BASEPRI, r3
 800abac:	f3bf 8f6f 	isb	sy
 800abb0:	f3bf 8f4f 	dsb	sy
 800abb4:	623b      	str	r3, [r7, #32]
}
 800abb6:	bf00      	nop
 800abb8:	e7fe      	b.n	800abb8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800abba:	f002 f9ad 	bl	800cf18 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800abbe:	f3ef 8211 	mrs	r2, BASEPRI
 800abc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abc6:	f383 8811 	msr	BASEPRI, r3
 800abca:	f3bf 8f6f 	isb	sy
 800abce:	f3bf 8f4f 	dsb	sy
 800abd2:	61fa      	str	r2, [r7, #28]
 800abd4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800abd6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800abd8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800abda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abdc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800abde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abe0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800abe2:	429a      	cmp	r2, r3
 800abe4:	d302      	bcc.n	800abec <xQueueGenericSendFromISR+0xbc>
 800abe6:	683b      	ldr	r3, [r7, #0]
 800abe8:	2b02      	cmp	r3, #2
 800abea:	d12f      	bne.n	800ac4c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800abec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800abf2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800abf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abfa:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800abfc:	683a      	ldr	r2, [r7, #0]
 800abfe:	68b9      	ldr	r1, [r7, #8]
 800ac00:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ac02:	f000 fab5 	bl	800b170 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ac06:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800ac0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac0e:	d112      	bne.n	800ac36 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ac10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d016      	beq.n	800ac46 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ac18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac1a:	3324      	adds	r3, #36	; 0x24
 800ac1c:	4618      	mov	r0, r3
 800ac1e:	f001 f875 	bl	800bd0c <xTaskRemoveFromEventList>
 800ac22:	4603      	mov	r3, r0
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d00e      	beq.n	800ac46 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d00b      	beq.n	800ac46 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	2201      	movs	r2, #1
 800ac32:	601a      	str	r2, [r3, #0]
 800ac34:	e007      	b.n	800ac46 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ac36:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ac3a:	3301      	adds	r3, #1
 800ac3c:	b2db      	uxtb	r3, r3
 800ac3e:	b25a      	sxtb	r2, r3
 800ac40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800ac46:	2301      	movs	r3, #1
 800ac48:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800ac4a:	e001      	b.n	800ac50 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ac4c:	2300      	movs	r3, #0
 800ac4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ac50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac52:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ac54:	697b      	ldr	r3, [r7, #20]
 800ac56:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800ac5a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ac5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800ac5e:	4618      	mov	r0, r3
 800ac60:	3740      	adds	r7, #64	; 0x40
 800ac62:	46bd      	mov	sp, r7
 800ac64:	bd80      	pop	{r7, pc}
	...

0800ac68 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800ac68:	b580      	push	{r7, lr}
 800ac6a:	b08c      	sub	sp, #48	; 0x30
 800ac6c:	af00      	add	r7, sp, #0
 800ac6e:	60f8      	str	r0, [r7, #12]
 800ac70:	60b9      	str	r1, [r7, #8]
 800ac72:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800ac74:	2300      	movs	r3, #0
 800ac76:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ac7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d10a      	bne.n	800ac98 <xQueueReceive+0x30>
	__asm volatile
 800ac82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac86:	f383 8811 	msr	BASEPRI, r3
 800ac8a:	f3bf 8f6f 	isb	sy
 800ac8e:	f3bf 8f4f 	dsb	sy
 800ac92:	623b      	str	r3, [r7, #32]
}
 800ac94:	bf00      	nop
 800ac96:	e7fe      	b.n	800ac96 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ac98:	68bb      	ldr	r3, [r7, #8]
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d103      	bne.n	800aca6 <xQueueReceive+0x3e>
 800ac9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d101      	bne.n	800acaa <xQueueReceive+0x42>
 800aca6:	2301      	movs	r3, #1
 800aca8:	e000      	b.n	800acac <xQueueReceive+0x44>
 800acaa:	2300      	movs	r3, #0
 800acac:	2b00      	cmp	r3, #0
 800acae:	d10a      	bne.n	800acc6 <xQueueReceive+0x5e>
	__asm volatile
 800acb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acb4:	f383 8811 	msr	BASEPRI, r3
 800acb8:	f3bf 8f6f 	isb	sy
 800acbc:	f3bf 8f4f 	dsb	sy
 800acc0:	61fb      	str	r3, [r7, #28]
}
 800acc2:	bf00      	nop
 800acc4:	e7fe      	b.n	800acc4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800acc6:	f001 f9ef 	bl	800c0a8 <xTaskGetSchedulerState>
 800acca:	4603      	mov	r3, r0
 800accc:	2b00      	cmp	r3, #0
 800acce:	d102      	bne.n	800acd6 <xQueueReceive+0x6e>
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d101      	bne.n	800acda <xQueueReceive+0x72>
 800acd6:	2301      	movs	r3, #1
 800acd8:	e000      	b.n	800acdc <xQueueReceive+0x74>
 800acda:	2300      	movs	r3, #0
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d10a      	bne.n	800acf6 <xQueueReceive+0x8e>
	__asm volatile
 800ace0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ace4:	f383 8811 	msr	BASEPRI, r3
 800ace8:	f3bf 8f6f 	isb	sy
 800acec:	f3bf 8f4f 	dsb	sy
 800acf0:	61bb      	str	r3, [r7, #24]
}
 800acf2:	bf00      	nop
 800acf4:	e7fe      	b.n	800acf4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800acf6:	f002 f82d 	bl	800cd54 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800acfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acfe:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ad00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d01f      	beq.n	800ad46 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ad06:	68b9      	ldr	r1, [r7, #8]
 800ad08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ad0a:	f000 fa9b 	bl	800b244 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ad0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad10:	1e5a      	subs	r2, r3, #1
 800ad12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad14:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ad16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad18:	691b      	ldr	r3, [r3, #16]
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d00f      	beq.n	800ad3e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ad1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad20:	3310      	adds	r3, #16
 800ad22:	4618      	mov	r0, r3
 800ad24:	f000 fff2 	bl	800bd0c <xTaskRemoveFromEventList>
 800ad28:	4603      	mov	r3, r0
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d007      	beq.n	800ad3e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ad2e:	4b3d      	ldr	r3, [pc, #244]	; (800ae24 <xQueueReceive+0x1bc>)
 800ad30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad34:	601a      	str	r2, [r3, #0]
 800ad36:	f3bf 8f4f 	dsb	sy
 800ad3a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ad3e:	f002 f839 	bl	800cdb4 <vPortExitCritical>
				return pdPASS;
 800ad42:	2301      	movs	r3, #1
 800ad44:	e069      	b.n	800ae1a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d103      	bne.n	800ad54 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ad4c:	f002 f832 	bl	800cdb4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ad50:	2300      	movs	r3, #0
 800ad52:	e062      	b.n	800ae1a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ad54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d106      	bne.n	800ad68 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ad5a:	f107 0310 	add.w	r3, r7, #16
 800ad5e:	4618      	mov	r0, r3
 800ad60:	f001 f838 	bl	800bdd4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ad64:	2301      	movs	r3, #1
 800ad66:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ad68:	f002 f824 	bl	800cdb4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ad6c:	f000 fdaa 	bl	800b8c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ad70:	f001 fff0 	bl	800cd54 <vPortEnterCritical>
 800ad74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad76:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ad7a:	b25b      	sxtb	r3, r3
 800ad7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad80:	d103      	bne.n	800ad8a <xQueueReceive+0x122>
 800ad82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad84:	2200      	movs	r2, #0
 800ad86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ad8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad8c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ad90:	b25b      	sxtb	r3, r3
 800ad92:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad96:	d103      	bne.n	800ada0 <xQueueReceive+0x138>
 800ad98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad9a:	2200      	movs	r2, #0
 800ad9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ada0:	f002 f808 	bl	800cdb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ada4:	1d3a      	adds	r2, r7, #4
 800ada6:	f107 0310 	add.w	r3, r7, #16
 800adaa:	4611      	mov	r1, r2
 800adac:	4618      	mov	r0, r3
 800adae:	f001 f827 	bl	800be00 <xTaskCheckForTimeOut>
 800adb2:	4603      	mov	r3, r0
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d123      	bne.n	800ae00 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800adb8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800adba:	f000 fabb 	bl	800b334 <prvIsQueueEmpty>
 800adbe:	4603      	mov	r3, r0
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d017      	beq.n	800adf4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800adc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adc6:	3324      	adds	r3, #36	; 0x24
 800adc8:	687a      	ldr	r2, [r7, #4]
 800adca:	4611      	mov	r1, r2
 800adcc:	4618      	mov	r0, r3
 800adce:	f000 ff4d 	bl	800bc6c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800add2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800add4:	f000 fa5c 	bl	800b290 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800add8:	f000 fd82 	bl	800b8e0 <xTaskResumeAll>
 800addc:	4603      	mov	r3, r0
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d189      	bne.n	800acf6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800ade2:	4b10      	ldr	r3, [pc, #64]	; (800ae24 <xQueueReceive+0x1bc>)
 800ade4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ade8:	601a      	str	r2, [r3, #0]
 800adea:	f3bf 8f4f 	dsb	sy
 800adee:	f3bf 8f6f 	isb	sy
 800adf2:	e780      	b.n	800acf6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800adf4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800adf6:	f000 fa4b 	bl	800b290 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800adfa:	f000 fd71 	bl	800b8e0 <xTaskResumeAll>
 800adfe:	e77a      	b.n	800acf6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ae00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ae02:	f000 fa45 	bl	800b290 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ae06:	f000 fd6b 	bl	800b8e0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ae0a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ae0c:	f000 fa92 	bl	800b334 <prvIsQueueEmpty>
 800ae10:	4603      	mov	r3, r0
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	f43f af6f 	beq.w	800acf6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ae18:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ae1a:	4618      	mov	r0, r3
 800ae1c:	3730      	adds	r7, #48	; 0x30
 800ae1e:	46bd      	mov	sp, r7
 800ae20:	bd80      	pop	{r7, pc}
 800ae22:	bf00      	nop
 800ae24:	e000ed04 	.word	0xe000ed04

0800ae28 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800ae28:	b580      	push	{r7, lr}
 800ae2a:	b08e      	sub	sp, #56	; 0x38
 800ae2c:	af00      	add	r7, sp, #0
 800ae2e:	6078      	str	r0, [r7, #4]
 800ae30:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800ae32:	2300      	movs	r3, #0
 800ae34:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800ae3a:	2300      	movs	r3, #0
 800ae3c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ae3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d10a      	bne.n	800ae5a <xQueueSemaphoreTake+0x32>
	__asm volatile
 800ae44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae48:	f383 8811 	msr	BASEPRI, r3
 800ae4c:	f3bf 8f6f 	isb	sy
 800ae50:	f3bf 8f4f 	dsb	sy
 800ae54:	623b      	str	r3, [r7, #32]
}
 800ae56:	bf00      	nop
 800ae58:	e7fe      	b.n	800ae58 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800ae5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d00a      	beq.n	800ae78 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800ae62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae66:	f383 8811 	msr	BASEPRI, r3
 800ae6a:	f3bf 8f6f 	isb	sy
 800ae6e:	f3bf 8f4f 	dsb	sy
 800ae72:	61fb      	str	r3, [r7, #28]
}
 800ae74:	bf00      	nop
 800ae76:	e7fe      	b.n	800ae76 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ae78:	f001 f916 	bl	800c0a8 <xTaskGetSchedulerState>
 800ae7c:	4603      	mov	r3, r0
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d102      	bne.n	800ae88 <xQueueSemaphoreTake+0x60>
 800ae82:	683b      	ldr	r3, [r7, #0]
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d101      	bne.n	800ae8c <xQueueSemaphoreTake+0x64>
 800ae88:	2301      	movs	r3, #1
 800ae8a:	e000      	b.n	800ae8e <xQueueSemaphoreTake+0x66>
 800ae8c:	2300      	movs	r3, #0
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d10a      	bne.n	800aea8 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800ae92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae96:	f383 8811 	msr	BASEPRI, r3
 800ae9a:	f3bf 8f6f 	isb	sy
 800ae9e:	f3bf 8f4f 	dsb	sy
 800aea2:	61bb      	str	r3, [r7, #24]
}
 800aea4:	bf00      	nop
 800aea6:	e7fe      	b.n	800aea6 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800aea8:	f001 ff54 	bl	800cd54 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800aeac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aeae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aeb0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800aeb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d024      	beq.n	800af02 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800aeb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aeba:	1e5a      	subs	r2, r3, #1
 800aebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aebe:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800aec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d104      	bne.n	800aed2 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800aec8:	f001 fa64 	bl	800c394 <pvTaskIncrementMutexHeldCount>
 800aecc:	4602      	mov	r2, r0
 800aece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aed0:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800aed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aed4:	691b      	ldr	r3, [r3, #16]
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d00f      	beq.n	800aefa <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800aeda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aedc:	3310      	adds	r3, #16
 800aede:	4618      	mov	r0, r3
 800aee0:	f000 ff14 	bl	800bd0c <xTaskRemoveFromEventList>
 800aee4:	4603      	mov	r3, r0
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d007      	beq.n	800aefa <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800aeea:	4b54      	ldr	r3, [pc, #336]	; (800b03c <xQueueSemaphoreTake+0x214>)
 800aeec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aef0:	601a      	str	r2, [r3, #0]
 800aef2:	f3bf 8f4f 	dsb	sy
 800aef6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800aefa:	f001 ff5b 	bl	800cdb4 <vPortExitCritical>
				return pdPASS;
 800aefe:	2301      	movs	r3, #1
 800af00:	e097      	b.n	800b032 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800af02:	683b      	ldr	r3, [r7, #0]
 800af04:	2b00      	cmp	r3, #0
 800af06:	d111      	bne.n	800af2c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800af08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d00a      	beq.n	800af24 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800af0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af12:	f383 8811 	msr	BASEPRI, r3
 800af16:	f3bf 8f6f 	isb	sy
 800af1a:	f3bf 8f4f 	dsb	sy
 800af1e:	617b      	str	r3, [r7, #20]
}
 800af20:	bf00      	nop
 800af22:	e7fe      	b.n	800af22 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800af24:	f001 ff46 	bl	800cdb4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800af28:	2300      	movs	r3, #0
 800af2a:	e082      	b.n	800b032 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800af2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d106      	bne.n	800af40 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800af32:	f107 030c 	add.w	r3, r7, #12
 800af36:	4618      	mov	r0, r3
 800af38:	f000 ff4c 	bl	800bdd4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800af3c:	2301      	movs	r3, #1
 800af3e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800af40:	f001 ff38 	bl	800cdb4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800af44:	f000 fcbe 	bl	800b8c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800af48:	f001 ff04 	bl	800cd54 <vPortEnterCritical>
 800af4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af4e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800af52:	b25b      	sxtb	r3, r3
 800af54:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af58:	d103      	bne.n	800af62 <xQueueSemaphoreTake+0x13a>
 800af5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af5c:	2200      	movs	r2, #0
 800af5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800af62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af64:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800af68:	b25b      	sxtb	r3, r3
 800af6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af6e:	d103      	bne.n	800af78 <xQueueSemaphoreTake+0x150>
 800af70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af72:	2200      	movs	r2, #0
 800af74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800af78:	f001 ff1c 	bl	800cdb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800af7c:	463a      	mov	r2, r7
 800af7e:	f107 030c 	add.w	r3, r7, #12
 800af82:	4611      	mov	r1, r2
 800af84:	4618      	mov	r0, r3
 800af86:	f000 ff3b 	bl	800be00 <xTaskCheckForTimeOut>
 800af8a:	4603      	mov	r3, r0
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d132      	bne.n	800aff6 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800af90:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800af92:	f000 f9cf 	bl	800b334 <prvIsQueueEmpty>
 800af96:	4603      	mov	r3, r0
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d026      	beq.n	800afea <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800af9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d109      	bne.n	800afb8 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800afa4:	f001 fed6 	bl	800cd54 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800afa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afaa:	689b      	ldr	r3, [r3, #8]
 800afac:	4618      	mov	r0, r3
 800afae:	f001 f899 	bl	800c0e4 <xTaskPriorityInherit>
 800afb2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800afb4:	f001 fefe 	bl	800cdb4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800afb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afba:	3324      	adds	r3, #36	; 0x24
 800afbc:	683a      	ldr	r2, [r7, #0]
 800afbe:	4611      	mov	r1, r2
 800afc0:	4618      	mov	r0, r3
 800afc2:	f000 fe53 	bl	800bc6c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800afc6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800afc8:	f000 f962 	bl	800b290 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800afcc:	f000 fc88 	bl	800b8e0 <xTaskResumeAll>
 800afd0:	4603      	mov	r3, r0
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	f47f af68 	bne.w	800aea8 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800afd8:	4b18      	ldr	r3, [pc, #96]	; (800b03c <xQueueSemaphoreTake+0x214>)
 800afda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800afde:	601a      	str	r2, [r3, #0]
 800afe0:	f3bf 8f4f 	dsb	sy
 800afe4:	f3bf 8f6f 	isb	sy
 800afe8:	e75e      	b.n	800aea8 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800afea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800afec:	f000 f950 	bl	800b290 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800aff0:	f000 fc76 	bl	800b8e0 <xTaskResumeAll>
 800aff4:	e758      	b.n	800aea8 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800aff6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800aff8:	f000 f94a 	bl	800b290 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800affc:	f000 fc70 	bl	800b8e0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b000:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b002:	f000 f997 	bl	800b334 <prvIsQueueEmpty>
 800b006:	4603      	mov	r3, r0
 800b008:	2b00      	cmp	r3, #0
 800b00a:	f43f af4d 	beq.w	800aea8 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800b00e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b010:	2b00      	cmp	r3, #0
 800b012:	d00d      	beq.n	800b030 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800b014:	f001 fe9e 	bl	800cd54 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800b018:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b01a:	f000 f891 	bl	800b140 <prvGetDisinheritPriorityAfterTimeout>
 800b01e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800b020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b022:	689b      	ldr	r3, [r3, #8]
 800b024:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b026:	4618      	mov	r0, r3
 800b028:	f001 f932 	bl	800c290 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800b02c:	f001 fec2 	bl	800cdb4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b030:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b032:	4618      	mov	r0, r3
 800b034:	3738      	adds	r7, #56	; 0x38
 800b036:	46bd      	mov	sp, r7
 800b038:	bd80      	pop	{r7, pc}
 800b03a:	bf00      	nop
 800b03c:	e000ed04 	.word	0xe000ed04

0800b040 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b040:	b580      	push	{r7, lr}
 800b042:	b08e      	sub	sp, #56	; 0x38
 800b044:	af00      	add	r7, sp, #0
 800b046:	60f8      	str	r0, [r7, #12]
 800b048:	60b9      	str	r1, [r7, #8]
 800b04a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b052:	2b00      	cmp	r3, #0
 800b054:	d10a      	bne.n	800b06c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800b056:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b05a:	f383 8811 	msr	BASEPRI, r3
 800b05e:	f3bf 8f6f 	isb	sy
 800b062:	f3bf 8f4f 	dsb	sy
 800b066:	623b      	str	r3, [r7, #32]
}
 800b068:	bf00      	nop
 800b06a:	e7fe      	b.n	800b06a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b06c:	68bb      	ldr	r3, [r7, #8]
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d103      	bne.n	800b07a <xQueueReceiveFromISR+0x3a>
 800b072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b076:	2b00      	cmp	r3, #0
 800b078:	d101      	bne.n	800b07e <xQueueReceiveFromISR+0x3e>
 800b07a:	2301      	movs	r3, #1
 800b07c:	e000      	b.n	800b080 <xQueueReceiveFromISR+0x40>
 800b07e:	2300      	movs	r3, #0
 800b080:	2b00      	cmp	r3, #0
 800b082:	d10a      	bne.n	800b09a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800b084:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b088:	f383 8811 	msr	BASEPRI, r3
 800b08c:	f3bf 8f6f 	isb	sy
 800b090:	f3bf 8f4f 	dsb	sy
 800b094:	61fb      	str	r3, [r7, #28]
}
 800b096:	bf00      	nop
 800b098:	e7fe      	b.n	800b098 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b09a:	f001 ff3d 	bl	800cf18 <vPortValidateInterruptPriority>
	__asm volatile
 800b09e:	f3ef 8211 	mrs	r2, BASEPRI
 800b0a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0a6:	f383 8811 	msr	BASEPRI, r3
 800b0aa:	f3bf 8f6f 	isb	sy
 800b0ae:	f3bf 8f4f 	dsb	sy
 800b0b2:	61ba      	str	r2, [r7, #24]
 800b0b4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800b0b6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b0b8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b0ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0be:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b0c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d02f      	beq.n	800b126 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800b0c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b0cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b0d0:	68b9      	ldr	r1, [r7, #8]
 800b0d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b0d4:	f000 f8b6 	bl	800b244 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b0d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0da:	1e5a      	subs	r2, r3, #1
 800b0dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0de:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800b0e0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b0e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0e8:	d112      	bne.n	800b110 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b0ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0ec:	691b      	ldr	r3, [r3, #16]
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d016      	beq.n	800b120 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b0f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0f4:	3310      	adds	r3, #16
 800b0f6:	4618      	mov	r0, r3
 800b0f8:	f000 fe08 	bl	800bd0c <xTaskRemoveFromEventList>
 800b0fc:	4603      	mov	r3, r0
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d00e      	beq.n	800b120 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	2b00      	cmp	r3, #0
 800b106:	d00b      	beq.n	800b120 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	2201      	movs	r2, #1
 800b10c:	601a      	str	r2, [r3, #0]
 800b10e:	e007      	b.n	800b120 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800b110:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b114:	3301      	adds	r3, #1
 800b116:	b2db      	uxtb	r3, r3
 800b118:	b25a      	sxtb	r2, r3
 800b11a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b11c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800b120:	2301      	movs	r3, #1
 800b122:	637b      	str	r3, [r7, #52]	; 0x34
 800b124:	e001      	b.n	800b12a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800b126:	2300      	movs	r3, #0
 800b128:	637b      	str	r3, [r7, #52]	; 0x34
 800b12a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b12c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800b12e:	693b      	ldr	r3, [r7, #16]
 800b130:	f383 8811 	msr	BASEPRI, r3
}
 800b134:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b136:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b138:	4618      	mov	r0, r3
 800b13a:	3738      	adds	r7, #56	; 0x38
 800b13c:	46bd      	mov	sp, r7
 800b13e:	bd80      	pop	{r7, pc}

0800b140 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800b140:	b480      	push	{r7}
 800b142:	b085      	sub	sp, #20
 800b144:	af00      	add	r7, sp, #0
 800b146:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d006      	beq.n	800b15e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800b15a:	60fb      	str	r3, [r7, #12]
 800b15c:	e001      	b.n	800b162 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800b15e:	2300      	movs	r3, #0
 800b160:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800b162:	68fb      	ldr	r3, [r7, #12]
	}
 800b164:	4618      	mov	r0, r3
 800b166:	3714      	adds	r7, #20
 800b168:	46bd      	mov	sp, r7
 800b16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b16e:	4770      	bx	lr

0800b170 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b170:	b580      	push	{r7, lr}
 800b172:	b086      	sub	sp, #24
 800b174:	af00      	add	r7, sp, #0
 800b176:	60f8      	str	r0, [r7, #12]
 800b178:	60b9      	str	r1, [r7, #8]
 800b17a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b17c:	2300      	movs	r3, #0
 800b17e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b184:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d10d      	bne.n	800b1aa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	2b00      	cmp	r3, #0
 800b194:	d14d      	bne.n	800b232 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	689b      	ldr	r3, [r3, #8]
 800b19a:	4618      	mov	r0, r3
 800b19c:	f001 f80a 	bl	800c1b4 <xTaskPriorityDisinherit>
 800b1a0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	2200      	movs	r2, #0
 800b1a6:	609a      	str	r2, [r3, #8]
 800b1a8:	e043      	b.n	800b232 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d119      	bne.n	800b1e4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	6858      	ldr	r0, [r3, #4]
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1b8:	461a      	mov	r2, r3
 800b1ba:	68b9      	ldr	r1, [r7, #8]
 800b1bc:	f002 f900 	bl	800d3c0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	685a      	ldr	r2, [r3, #4]
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1c8:	441a      	add	r2, r3
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	685a      	ldr	r2, [r3, #4]
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	689b      	ldr	r3, [r3, #8]
 800b1d6:	429a      	cmp	r2, r3
 800b1d8:	d32b      	bcc.n	800b232 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	681a      	ldr	r2, [r3, #0]
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	605a      	str	r2, [r3, #4]
 800b1e2:	e026      	b.n	800b232 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	68d8      	ldr	r0, [r3, #12]
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1ec:	461a      	mov	r2, r3
 800b1ee:	68b9      	ldr	r1, [r7, #8]
 800b1f0:	f002 f8e6 	bl	800d3c0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	68da      	ldr	r2, [r3, #12]
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1fc:	425b      	negs	r3, r3
 800b1fe:	441a      	add	r2, r3
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	68da      	ldr	r2, [r3, #12]
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	429a      	cmp	r2, r3
 800b20e:	d207      	bcs.n	800b220 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	689a      	ldr	r2, [r3, #8]
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b218:	425b      	negs	r3, r3
 800b21a:	441a      	add	r2, r3
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	2b02      	cmp	r3, #2
 800b224:	d105      	bne.n	800b232 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b226:	693b      	ldr	r3, [r7, #16]
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d002      	beq.n	800b232 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b22c:	693b      	ldr	r3, [r7, #16]
 800b22e:	3b01      	subs	r3, #1
 800b230:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b232:	693b      	ldr	r3, [r7, #16]
 800b234:	1c5a      	adds	r2, r3, #1
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b23a:	697b      	ldr	r3, [r7, #20]
}
 800b23c:	4618      	mov	r0, r3
 800b23e:	3718      	adds	r7, #24
 800b240:	46bd      	mov	sp, r7
 800b242:	bd80      	pop	{r7, pc}

0800b244 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b244:	b580      	push	{r7, lr}
 800b246:	b082      	sub	sp, #8
 800b248:	af00      	add	r7, sp, #0
 800b24a:	6078      	str	r0, [r7, #4]
 800b24c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b252:	2b00      	cmp	r3, #0
 800b254:	d018      	beq.n	800b288 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	68da      	ldr	r2, [r3, #12]
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b25e:	441a      	add	r2, r3
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	68da      	ldr	r2, [r3, #12]
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	689b      	ldr	r3, [r3, #8]
 800b26c:	429a      	cmp	r2, r3
 800b26e:	d303      	bcc.n	800b278 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	681a      	ldr	r2, [r3, #0]
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	68d9      	ldr	r1, [r3, #12]
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b280:	461a      	mov	r2, r3
 800b282:	6838      	ldr	r0, [r7, #0]
 800b284:	f002 f89c 	bl	800d3c0 <memcpy>
	}
}
 800b288:	bf00      	nop
 800b28a:	3708      	adds	r7, #8
 800b28c:	46bd      	mov	sp, r7
 800b28e:	bd80      	pop	{r7, pc}

0800b290 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b290:	b580      	push	{r7, lr}
 800b292:	b084      	sub	sp, #16
 800b294:	af00      	add	r7, sp, #0
 800b296:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b298:	f001 fd5c 	bl	800cd54 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b2a2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b2a4:	e011      	b.n	800b2ca <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d012      	beq.n	800b2d4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	3324      	adds	r3, #36	; 0x24
 800b2b2:	4618      	mov	r0, r3
 800b2b4:	f000 fd2a 	bl	800bd0c <xTaskRemoveFromEventList>
 800b2b8:	4603      	mov	r3, r0
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d001      	beq.n	800b2c2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b2be:	f000 fe01 	bl	800bec4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b2c2:	7bfb      	ldrb	r3, [r7, #15]
 800b2c4:	3b01      	subs	r3, #1
 800b2c6:	b2db      	uxtb	r3, r3
 800b2c8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b2ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	dce9      	bgt.n	800b2a6 <prvUnlockQueue+0x16>
 800b2d2:	e000      	b.n	800b2d6 <prvUnlockQueue+0x46>
					break;
 800b2d4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	22ff      	movs	r2, #255	; 0xff
 800b2da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b2de:	f001 fd69 	bl	800cdb4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b2e2:	f001 fd37 	bl	800cd54 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b2ec:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b2ee:	e011      	b.n	800b314 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	691b      	ldr	r3, [r3, #16]
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d012      	beq.n	800b31e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	3310      	adds	r3, #16
 800b2fc:	4618      	mov	r0, r3
 800b2fe:	f000 fd05 	bl	800bd0c <xTaskRemoveFromEventList>
 800b302:	4603      	mov	r3, r0
 800b304:	2b00      	cmp	r3, #0
 800b306:	d001      	beq.n	800b30c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b308:	f000 fddc 	bl	800bec4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b30c:	7bbb      	ldrb	r3, [r7, #14]
 800b30e:	3b01      	subs	r3, #1
 800b310:	b2db      	uxtb	r3, r3
 800b312:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b314:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b318:	2b00      	cmp	r3, #0
 800b31a:	dce9      	bgt.n	800b2f0 <prvUnlockQueue+0x60>
 800b31c:	e000      	b.n	800b320 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b31e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	22ff      	movs	r2, #255	; 0xff
 800b324:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b328:	f001 fd44 	bl	800cdb4 <vPortExitCritical>
}
 800b32c:	bf00      	nop
 800b32e:	3710      	adds	r7, #16
 800b330:	46bd      	mov	sp, r7
 800b332:	bd80      	pop	{r7, pc}

0800b334 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b334:	b580      	push	{r7, lr}
 800b336:	b084      	sub	sp, #16
 800b338:	af00      	add	r7, sp, #0
 800b33a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b33c:	f001 fd0a 	bl	800cd54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b344:	2b00      	cmp	r3, #0
 800b346:	d102      	bne.n	800b34e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b348:	2301      	movs	r3, #1
 800b34a:	60fb      	str	r3, [r7, #12]
 800b34c:	e001      	b.n	800b352 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b34e:	2300      	movs	r3, #0
 800b350:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b352:	f001 fd2f 	bl	800cdb4 <vPortExitCritical>

	return xReturn;
 800b356:	68fb      	ldr	r3, [r7, #12]
}
 800b358:	4618      	mov	r0, r3
 800b35a:	3710      	adds	r7, #16
 800b35c:	46bd      	mov	sp, r7
 800b35e:	bd80      	pop	{r7, pc}

0800b360 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b360:	b580      	push	{r7, lr}
 800b362:	b084      	sub	sp, #16
 800b364:	af00      	add	r7, sp, #0
 800b366:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b368:	f001 fcf4 	bl	800cd54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b374:	429a      	cmp	r2, r3
 800b376:	d102      	bne.n	800b37e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b378:	2301      	movs	r3, #1
 800b37a:	60fb      	str	r3, [r7, #12]
 800b37c:	e001      	b.n	800b382 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b37e:	2300      	movs	r3, #0
 800b380:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b382:	f001 fd17 	bl	800cdb4 <vPortExitCritical>

	return xReturn;
 800b386:	68fb      	ldr	r3, [r7, #12]
}
 800b388:	4618      	mov	r0, r3
 800b38a:	3710      	adds	r7, #16
 800b38c:	46bd      	mov	sp, r7
 800b38e:	bd80      	pop	{r7, pc}

0800b390 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b390:	b480      	push	{r7}
 800b392:	b085      	sub	sp, #20
 800b394:	af00      	add	r7, sp, #0
 800b396:	6078      	str	r0, [r7, #4]
 800b398:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b39a:	2300      	movs	r3, #0
 800b39c:	60fb      	str	r3, [r7, #12]
 800b39e:	e014      	b.n	800b3ca <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b3a0:	4a0f      	ldr	r2, [pc, #60]	; (800b3e0 <vQueueAddToRegistry+0x50>)
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d10b      	bne.n	800b3c4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b3ac:	490c      	ldr	r1, [pc, #48]	; (800b3e0 <vQueueAddToRegistry+0x50>)
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	683a      	ldr	r2, [r7, #0]
 800b3b2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b3b6:	4a0a      	ldr	r2, [pc, #40]	; (800b3e0 <vQueueAddToRegistry+0x50>)
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	00db      	lsls	r3, r3, #3
 800b3bc:	4413      	add	r3, r2
 800b3be:	687a      	ldr	r2, [r7, #4]
 800b3c0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b3c2:	e006      	b.n	800b3d2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	3301      	adds	r3, #1
 800b3c8:	60fb      	str	r3, [r7, #12]
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	2b07      	cmp	r3, #7
 800b3ce:	d9e7      	bls.n	800b3a0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b3d0:	bf00      	nop
 800b3d2:	bf00      	nop
 800b3d4:	3714      	adds	r7, #20
 800b3d6:	46bd      	mov	sp, r7
 800b3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3dc:	4770      	bx	lr
 800b3de:	bf00      	nop
 800b3e0:	20000c08 	.word	0x20000c08

0800b3e4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b3e4:	b580      	push	{r7, lr}
 800b3e6:	b086      	sub	sp, #24
 800b3e8:	af00      	add	r7, sp, #0
 800b3ea:	60f8      	str	r0, [r7, #12]
 800b3ec:	60b9      	str	r1, [r7, #8]
 800b3ee:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b3f4:	f001 fcae 	bl	800cd54 <vPortEnterCritical>
 800b3f8:	697b      	ldr	r3, [r7, #20]
 800b3fa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b3fe:	b25b      	sxtb	r3, r3
 800b400:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b404:	d103      	bne.n	800b40e <vQueueWaitForMessageRestricted+0x2a>
 800b406:	697b      	ldr	r3, [r7, #20]
 800b408:	2200      	movs	r2, #0
 800b40a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b40e:	697b      	ldr	r3, [r7, #20]
 800b410:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b414:	b25b      	sxtb	r3, r3
 800b416:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b41a:	d103      	bne.n	800b424 <vQueueWaitForMessageRestricted+0x40>
 800b41c:	697b      	ldr	r3, [r7, #20]
 800b41e:	2200      	movs	r2, #0
 800b420:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b424:	f001 fcc6 	bl	800cdb4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b428:	697b      	ldr	r3, [r7, #20]
 800b42a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d106      	bne.n	800b43e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b430:	697b      	ldr	r3, [r7, #20]
 800b432:	3324      	adds	r3, #36	; 0x24
 800b434:	687a      	ldr	r2, [r7, #4]
 800b436:	68b9      	ldr	r1, [r7, #8]
 800b438:	4618      	mov	r0, r3
 800b43a:	f000 fc3b 	bl	800bcb4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b43e:	6978      	ldr	r0, [r7, #20]
 800b440:	f7ff ff26 	bl	800b290 <prvUnlockQueue>
	}
 800b444:	bf00      	nop
 800b446:	3718      	adds	r7, #24
 800b448:	46bd      	mov	sp, r7
 800b44a:	bd80      	pop	{r7, pc}

0800b44c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b44c:	b580      	push	{r7, lr}
 800b44e:	b08e      	sub	sp, #56	; 0x38
 800b450:	af04      	add	r7, sp, #16
 800b452:	60f8      	str	r0, [r7, #12]
 800b454:	60b9      	str	r1, [r7, #8]
 800b456:	607a      	str	r2, [r7, #4]
 800b458:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b45a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d10a      	bne.n	800b476 <xTaskCreateStatic+0x2a>
	__asm volatile
 800b460:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b464:	f383 8811 	msr	BASEPRI, r3
 800b468:	f3bf 8f6f 	isb	sy
 800b46c:	f3bf 8f4f 	dsb	sy
 800b470:	623b      	str	r3, [r7, #32]
}
 800b472:	bf00      	nop
 800b474:	e7fe      	b.n	800b474 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d10a      	bne.n	800b492 <xTaskCreateStatic+0x46>
	__asm volatile
 800b47c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b480:	f383 8811 	msr	BASEPRI, r3
 800b484:	f3bf 8f6f 	isb	sy
 800b488:	f3bf 8f4f 	dsb	sy
 800b48c:	61fb      	str	r3, [r7, #28]
}
 800b48e:	bf00      	nop
 800b490:	e7fe      	b.n	800b490 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b492:	235c      	movs	r3, #92	; 0x5c
 800b494:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b496:	693b      	ldr	r3, [r7, #16]
 800b498:	2b5c      	cmp	r3, #92	; 0x5c
 800b49a:	d00a      	beq.n	800b4b2 <xTaskCreateStatic+0x66>
	__asm volatile
 800b49c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4a0:	f383 8811 	msr	BASEPRI, r3
 800b4a4:	f3bf 8f6f 	isb	sy
 800b4a8:	f3bf 8f4f 	dsb	sy
 800b4ac:	61bb      	str	r3, [r7, #24]
}
 800b4ae:	bf00      	nop
 800b4b0:	e7fe      	b.n	800b4b0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b4b2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b4b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d01e      	beq.n	800b4f8 <xTaskCreateStatic+0xac>
 800b4ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d01b      	beq.n	800b4f8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b4c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4c2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b4c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b4c8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b4ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4cc:	2202      	movs	r2, #2
 800b4ce:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b4d2:	2300      	movs	r3, #0
 800b4d4:	9303      	str	r3, [sp, #12]
 800b4d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4d8:	9302      	str	r3, [sp, #8]
 800b4da:	f107 0314 	add.w	r3, r7, #20
 800b4de:	9301      	str	r3, [sp, #4]
 800b4e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4e2:	9300      	str	r3, [sp, #0]
 800b4e4:	683b      	ldr	r3, [r7, #0]
 800b4e6:	687a      	ldr	r2, [r7, #4]
 800b4e8:	68b9      	ldr	r1, [r7, #8]
 800b4ea:	68f8      	ldr	r0, [r7, #12]
 800b4ec:	f000 f850 	bl	800b590 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b4f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b4f2:	f000 f8dd 	bl	800b6b0 <prvAddNewTaskToReadyList>
 800b4f6:	e001      	b.n	800b4fc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800b4f8:	2300      	movs	r3, #0
 800b4fa:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b4fc:	697b      	ldr	r3, [r7, #20]
	}
 800b4fe:	4618      	mov	r0, r3
 800b500:	3728      	adds	r7, #40	; 0x28
 800b502:	46bd      	mov	sp, r7
 800b504:	bd80      	pop	{r7, pc}

0800b506 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b506:	b580      	push	{r7, lr}
 800b508:	b08c      	sub	sp, #48	; 0x30
 800b50a:	af04      	add	r7, sp, #16
 800b50c:	60f8      	str	r0, [r7, #12]
 800b50e:	60b9      	str	r1, [r7, #8]
 800b510:	603b      	str	r3, [r7, #0]
 800b512:	4613      	mov	r3, r2
 800b514:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b516:	88fb      	ldrh	r3, [r7, #6]
 800b518:	009b      	lsls	r3, r3, #2
 800b51a:	4618      	mov	r0, r3
 800b51c:	f001 fd3c 	bl	800cf98 <pvPortMalloc>
 800b520:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b522:	697b      	ldr	r3, [r7, #20]
 800b524:	2b00      	cmp	r3, #0
 800b526:	d00e      	beq.n	800b546 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b528:	205c      	movs	r0, #92	; 0x5c
 800b52a:	f001 fd35 	bl	800cf98 <pvPortMalloc>
 800b52e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b530:	69fb      	ldr	r3, [r7, #28]
 800b532:	2b00      	cmp	r3, #0
 800b534:	d003      	beq.n	800b53e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b536:	69fb      	ldr	r3, [r7, #28]
 800b538:	697a      	ldr	r2, [r7, #20]
 800b53a:	631a      	str	r2, [r3, #48]	; 0x30
 800b53c:	e005      	b.n	800b54a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b53e:	6978      	ldr	r0, [r7, #20]
 800b540:	f001 fdf6 	bl	800d130 <vPortFree>
 800b544:	e001      	b.n	800b54a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b546:	2300      	movs	r3, #0
 800b548:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b54a:	69fb      	ldr	r3, [r7, #28]
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d017      	beq.n	800b580 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b550:	69fb      	ldr	r3, [r7, #28]
 800b552:	2200      	movs	r2, #0
 800b554:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b558:	88fa      	ldrh	r2, [r7, #6]
 800b55a:	2300      	movs	r3, #0
 800b55c:	9303      	str	r3, [sp, #12]
 800b55e:	69fb      	ldr	r3, [r7, #28]
 800b560:	9302      	str	r3, [sp, #8]
 800b562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b564:	9301      	str	r3, [sp, #4]
 800b566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b568:	9300      	str	r3, [sp, #0]
 800b56a:	683b      	ldr	r3, [r7, #0]
 800b56c:	68b9      	ldr	r1, [r7, #8]
 800b56e:	68f8      	ldr	r0, [r7, #12]
 800b570:	f000 f80e 	bl	800b590 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b574:	69f8      	ldr	r0, [r7, #28]
 800b576:	f000 f89b 	bl	800b6b0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b57a:	2301      	movs	r3, #1
 800b57c:	61bb      	str	r3, [r7, #24]
 800b57e:	e002      	b.n	800b586 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b580:	f04f 33ff 	mov.w	r3, #4294967295
 800b584:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b586:	69bb      	ldr	r3, [r7, #24]
	}
 800b588:	4618      	mov	r0, r3
 800b58a:	3720      	adds	r7, #32
 800b58c:	46bd      	mov	sp, r7
 800b58e:	bd80      	pop	{r7, pc}

0800b590 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b590:	b580      	push	{r7, lr}
 800b592:	b088      	sub	sp, #32
 800b594:	af00      	add	r7, sp, #0
 800b596:	60f8      	str	r0, [r7, #12]
 800b598:	60b9      	str	r1, [r7, #8]
 800b59a:	607a      	str	r2, [r7, #4]
 800b59c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b59e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5a0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	009b      	lsls	r3, r3, #2
 800b5a6:	461a      	mov	r2, r3
 800b5a8:	21a5      	movs	r1, #165	; 0xa5
 800b5aa:	f001 ff17 	bl	800d3dc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b5ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b5b8:	3b01      	subs	r3, #1
 800b5ba:	009b      	lsls	r3, r3, #2
 800b5bc:	4413      	add	r3, r2
 800b5be:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b5c0:	69bb      	ldr	r3, [r7, #24]
 800b5c2:	f023 0307 	bic.w	r3, r3, #7
 800b5c6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b5c8:	69bb      	ldr	r3, [r7, #24]
 800b5ca:	f003 0307 	and.w	r3, r3, #7
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d00a      	beq.n	800b5e8 <prvInitialiseNewTask+0x58>
	__asm volatile
 800b5d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5d6:	f383 8811 	msr	BASEPRI, r3
 800b5da:	f3bf 8f6f 	isb	sy
 800b5de:	f3bf 8f4f 	dsb	sy
 800b5e2:	617b      	str	r3, [r7, #20]
}
 800b5e4:	bf00      	nop
 800b5e6:	e7fe      	b.n	800b5e6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b5e8:	68bb      	ldr	r3, [r7, #8]
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d01f      	beq.n	800b62e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b5ee:	2300      	movs	r3, #0
 800b5f0:	61fb      	str	r3, [r7, #28]
 800b5f2:	e012      	b.n	800b61a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b5f4:	68ba      	ldr	r2, [r7, #8]
 800b5f6:	69fb      	ldr	r3, [r7, #28]
 800b5f8:	4413      	add	r3, r2
 800b5fa:	7819      	ldrb	r1, [r3, #0]
 800b5fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b5fe:	69fb      	ldr	r3, [r7, #28]
 800b600:	4413      	add	r3, r2
 800b602:	3334      	adds	r3, #52	; 0x34
 800b604:	460a      	mov	r2, r1
 800b606:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b608:	68ba      	ldr	r2, [r7, #8]
 800b60a:	69fb      	ldr	r3, [r7, #28]
 800b60c:	4413      	add	r3, r2
 800b60e:	781b      	ldrb	r3, [r3, #0]
 800b610:	2b00      	cmp	r3, #0
 800b612:	d006      	beq.n	800b622 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b614:	69fb      	ldr	r3, [r7, #28]
 800b616:	3301      	adds	r3, #1
 800b618:	61fb      	str	r3, [r7, #28]
 800b61a:	69fb      	ldr	r3, [r7, #28]
 800b61c:	2b0f      	cmp	r3, #15
 800b61e:	d9e9      	bls.n	800b5f4 <prvInitialiseNewTask+0x64>
 800b620:	e000      	b.n	800b624 <prvInitialiseNewTask+0x94>
			{
				break;
 800b622:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b626:	2200      	movs	r2, #0
 800b628:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b62c:	e003      	b.n	800b636 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b62e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b630:	2200      	movs	r2, #0
 800b632:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b638:	2b37      	cmp	r3, #55	; 0x37
 800b63a:	d901      	bls.n	800b640 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b63c:	2337      	movs	r3, #55	; 0x37
 800b63e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b642:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b644:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b648:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b64a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b64c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b64e:	2200      	movs	r2, #0
 800b650:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b654:	3304      	adds	r3, #4
 800b656:	4618      	mov	r0, r3
 800b658:	f7fe fee4 	bl	800a424 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b65c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b65e:	3318      	adds	r3, #24
 800b660:	4618      	mov	r0, r3
 800b662:	f7fe fedf 	bl	800a424 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b668:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b66a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b66c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b66e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b674:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b678:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b67a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b67c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b67e:	2200      	movs	r2, #0
 800b680:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b684:	2200      	movs	r2, #0
 800b686:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b68a:	683a      	ldr	r2, [r7, #0]
 800b68c:	68f9      	ldr	r1, [r7, #12]
 800b68e:	69b8      	ldr	r0, [r7, #24]
 800b690:	f001 fa36 	bl	800cb00 <pxPortInitialiseStack>
 800b694:	4602      	mov	r2, r0
 800b696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b698:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b69a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d002      	beq.n	800b6a6 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b6a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b6a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b6a6:	bf00      	nop
 800b6a8:	3720      	adds	r7, #32
 800b6aa:	46bd      	mov	sp, r7
 800b6ac:	bd80      	pop	{r7, pc}
	...

0800b6b0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b6b0:	b580      	push	{r7, lr}
 800b6b2:	b082      	sub	sp, #8
 800b6b4:	af00      	add	r7, sp, #0
 800b6b6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b6b8:	f001 fb4c 	bl	800cd54 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b6bc:	4b2d      	ldr	r3, [pc, #180]	; (800b774 <prvAddNewTaskToReadyList+0xc4>)
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	3301      	adds	r3, #1
 800b6c2:	4a2c      	ldr	r2, [pc, #176]	; (800b774 <prvAddNewTaskToReadyList+0xc4>)
 800b6c4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b6c6:	4b2c      	ldr	r3, [pc, #176]	; (800b778 <prvAddNewTaskToReadyList+0xc8>)
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d109      	bne.n	800b6e2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b6ce:	4a2a      	ldr	r2, [pc, #168]	; (800b778 <prvAddNewTaskToReadyList+0xc8>)
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b6d4:	4b27      	ldr	r3, [pc, #156]	; (800b774 <prvAddNewTaskToReadyList+0xc4>)
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	2b01      	cmp	r3, #1
 800b6da:	d110      	bne.n	800b6fe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b6dc:	f000 fc16 	bl	800bf0c <prvInitialiseTaskLists>
 800b6e0:	e00d      	b.n	800b6fe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b6e2:	4b26      	ldr	r3, [pc, #152]	; (800b77c <prvAddNewTaskToReadyList+0xcc>)
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d109      	bne.n	800b6fe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b6ea:	4b23      	ldr	r3, [pc, #140]	; (800b778 <prvAddNewTaskToReadyList+0xc8>)
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6f4:	429a      	cmp	r2, r3
 800b6f6:	d802      	bhi.n	800b6fe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b6f8:	4a1f      	ldr	r2, [pc, #124]	; (800b778 <prvAddNewTaskToReadyList+0xc8>)
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b6fe:	4b20      	ldr	r3, [pc, #128]	; (800b780 <prvAddNewTaskToReadyList+0xd0>)
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	3301      	adds	r3, #1
 800b704:	4a1e      	ldr	r2, [pc, #120]	; (800b780 <prvAddNewTaskToReadyList+0xd0>)
 800b706:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b708:	4b1d      	ldr	r3, [pc, #116]	; (800b780 <prvAddNewTaskToReadyList+0xd0>)
 800b70a:	681a      	ldr	r2, [r3, #0]
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b714:	4b1b      	ldr	r3, [pc, #108]	; (800b784 <prvAddNewTaskToReadyList+0xd4>)
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	429a      	cmp	r2, r3
 800b71a:	d903      	bls.n	800b724 <prvAddNewTaskToReadyList+0x74>
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b720:	4a18      	ldr	r2, [pc, #96]	; (800b784 <prvAddNewTaskToReadyList+0xd4>)
 800b722:	6013      	str	r3, [r2, #0]
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b728:	4613      	mov	r3, r2
 800b72a:	009b      	lsls	r3, r3, #2
 800b72c:	4413      	add	r3, r2
 800b72e:	009b      	lsls	r3, r3, #2
 800b730:	4a15      	ldr	r2, [pc, #84]	; (800b788 <prvAddNewTaskToReadyList+0xd8>)
 800b732:	441a      	add	r2, r3
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	3304      	adds	r3, #4
 800b738:	4619      	mov	r1, r3
 800b73a:	4610      	mov	r0, r2
 800b73c:	f7fe fe7f 	bl	800a43e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b740:	f001 fb38 	bl	800cdb4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b744:	4b0d      	ldr	r3, [pc, #52]	; (800b77c <prvAddNewTaskToReadyList+0xcc>)
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d00e      	beq.n	800b76a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b74c:	4b0a      	ldr	r3, [pc, #40]	; (800b778 <prvAddNewTaskToReadyList+0xc8>)
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b756:	429a      	cmp	r2, r3
 800b758:	d207      	bcs.n	800b76a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b75a:	4b0c      	ldr	r3, [pc, #48]	; (800b78c <prvAddNewTaskToReadyList+0xdc>)
 800b75c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b760:	601a      	str	r2, [r3, #0]
 800b762:	f3bf 8f4f 	dsb	sy
 800b766:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b76a:	bf00      	nop
 800b76c:	3708      	adds	r7, #8
 800b76e:	46bd      	mov	sp, r7
 800b770:	bd80      	pop	{r7, pc}
 800b772:	bf00      	nop
 800b774:	2000111c 	.word	0x2000111c
 800b778:	20000c48 	.word	0x20000c48
 800b77c:	20001128 	.word	0x20001128
 800b780:	20001138 	.word	0x20001138
 800b784:	20001124 	.word	0x20001124
 800b788:	20000c4c 	.word	0x20000c4c
 800b78c:	e000ed04 	.word	0xe000ed04

0800b790 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b790:	b580      	push	{r7, lr}
 800b792:	b084      	sub	sp, #16
 800b794:	af00      	add	r7, sp, #0
 800b796:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b798:	2300      	movs	r3, #0
 800b79a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d017      	beq.n	800b7d2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b7a2:	4b13      	ldr	r3, [pc, #76]	; (800b7f0 <vTaskDelay+0x60>)
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d00a      	beq.n	800b7c0 <vTaskDelay+0x30>
	__asm volatile
 800b7aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7ae:	f383 8811 	msr	BASEPRI, r3
 800b7b2:	f3bf 8f6f 	isb	sy
 800b7b6:	f3bf 8f4f 	dsb	sy
 800b7ba:	60bb      	str	r3, [r7, #8]
}
 800b7bc:	bf00      	nop
 800b7be:	e7fe      	b.n	800b7be <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b7c0:	f000 f880 	bl	800b8c4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b7c4:	2100      	movs	r1, #0
 800b7c6:	6878      	ldr	r0, [r7, #4]
 800b7c8:	f000 fdf8 	bl	800c3bc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b7cc:	f000 f888 	bl	800b8e0 <xTaskResumeAll>
 800b7d0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d107      	bne.n	800b7e8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800b7d8:	4b06      	ldr	r3, [pc, #24]	; (800b7f4 <vTaskDelay+0x64>)
 800b7da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b7de:	601a      	str	r2, [r3, #0]
 800b7e0:	f3bf 8f4f 	dsb	sy
 800b7e4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b7e8:	bf00      	nop
 800b7ea:	3710      	adds	r7, #16
 800b7ec:	46bd      	mov	sp, r7
 800b7ee:	bd80      	pop	{r7, pc}
 800b7f0:	20001144 	.word	0x20001144
 800b7f4:	e000ed04 	.word	0xe000ed04

0800b7f8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b7f8:	b580      	push	{r7, lr}
 800b7fa:	b08a      	sub	sp, #40	; 0x28
 800b7fc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b7fe:	2300      	movs	r3, #0
 800b800:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b802:	2300      	movs	r3, #0
 800b804:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b806:	463a      	mov	r2, r7
 800b808:	1d39      	adds	r1, r7, #4
 800b80a:	f107 0308 	add.w	r3, r7, #8
 800b80e:	4618      	mov	r0, r3
 800b810:	f7fe fdb4 	bl	800a37c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b814:	6839      	ldr	r1, [r7, #0]
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	68ba      	ldr	r2, [r7, #8]
 800b81a:	9202      	str	r2, [sp, #8]
 800b81c:	9301      	str	r3, [sp, #4]
 800b81e:	2300      	movs	r3, #0
 800b820:	9300      	str	r3, [sp, #0]
 800b822:	2300      	movs	r3, #0
 800b824:	460a      	mov	r2, r1
 800b826:	4921      	ldr	r1, [pc, #132]	; (800b8ac <vTaskStartScheduler+0xb4>)
 800b828:	4821      	ldr	r0, [pc, #132]	; (800b8b0 <vTaskStartScheduler+0xb8>)
 800b82a:	f7ff fe0f 	bl	800b44c <xTaskCreateStatic>
 800b82e:	4603      	mov	r3, r0
 800b830:	4a20      	ldr	r2, [pc, #128]	; (800b8b4 <vTaskStartScheduler+0xbc>)
 800b832:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b834:	4b1f      	ldr	r3, [pc, #124]	; (800b8b4 <vTaskStartScheduler+0xbc>)
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d002      	beq.n	800b842 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b83c:	2301      	movs	r3, #1
 800b83e:	617b      	str	r3, [r7, #20]
 800b840:	e001      	b.n	800b846 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b842:	2300      	movs	r3, #0
 800b844:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b846:	697b      	ldr	r3, [r7, #20]
 800b848:	2b01      	cmp	r3, #1
 800b84a:	d102      	bne.n	800b852 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b84c:	f000 fe0a 	bl	800c464 <xTimerCreateTimerTask>
 800b850:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b852:	697b      	ldr	r3, [r7, #20]
 800b854:	2b01      	cmp	r3, #1
 800b856:	d116      	bne.n	800b886 <vTaskStartScheduler+0x8e>
	__asm volatile
 800b858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b85c:	f383 8811 	msr	BASEPRI, r3
 800b860:	f3bf 8f6f 	isb	sy
 800b864:	f3bf 8f4f 	dsb	sy
 800b868:	613b      	str	r3, [r7, #16]
}
 800b86a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b86c:	4b12      	ldr	r3, [pc, #72]	; (800b8b8 <vTaskStartScheduler+0xc0>)
 800b86e:	f04f 32ff 	mov.w	r2, #4294967295
 800b872:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b874:	4b11      	ldr	r3, [pc, #68]	; (800b8bc <vTaskStartScheduler+0xc4>)
 800b876:	2201      	movs	r2, #1
 800b878:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b87a:	4b11      	ldr	r3, [pc, #68]	; (800b8c0 <vTaskStartScheduler+0xc8>)
 800b87c:	2200      	movs	r2, #0
 800b87e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b880:	f001 f9c6 	bl	800cc10 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b884:	e00e      	b.n	800b8a4 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b886:	697b      	ldr	r3, [r7, #20]
 800b888:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b88c:	d10a      	bne.n	800b8a4 <vTaskStartScheduler+0xac>
	__asm volatile
 800b88e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b892:	f383 8811 	msr	BASEPRI, r3
 800b896:	f3bf 8f6f 	isb	sy
 800b89a:	f3bf 8f4f 	dsb	sy
 800b89e:	60fb      	str	r3, [r7, #12]
}
 800b8a0:	bf00      	nop
 800b8a2:	e7fe      	b.n	800b8a2 <vTaskStartScheduler+0xaa>
}
 800b8a4:	bf00      	nop
 800b8a6:	3718      	adds	r7, #24
 800b8a8:	46bd      	mov	sp, r7
 800b8aa:	bd80      	pop	{r7, pc}
 800b8ac:	08011a9c 	.word	0x08011a9c
 800b8b0:	0800bedd 	.word	0x0800bedd
 800b8b4:	20001140 	.word	0x20001140
 800b8b8:	2000113c 	.word	0x2000113c
 800b8bc:	20001128 	.word	0x20001128
 800b8c0:	20001120 	.word	0x20001120

0800b8c4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b8c4:	b480      	push	{r7}
 800b8c6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b8c8:	4b04      	ldr	r3, [pc, #16]	; (800b8dc <vTaskSuspendAll+0x18>)
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	3301      	adds	r3, #1
 800b8ce:	4a03      	ldr	r2, [pc, #12]	; (800b8dc <vTaskSuspendAll+0x18>)
 800b8d0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b8d2:	bf00      	nop
 800b8d4:	46bd      	mov	sp, r7
 800b8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8da:	4770      	bx	lr
 800b8dc:	20001144 	.word	0x20001144

0800b8e0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b8e0:	b580      	push	{r7, lr}
 800b8e2:	b084      	sub	sp, #16
 800b8e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b8e6:	2300      	movs	r3, #0
 800b8e8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b8ea:	2300      	movs	r3, #0
 800b8ec:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b8ee:	4b42      	ldr	r3, [pc, #264]	; (800b9f8 <xTaskResumeAll+0x118>)
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d10a      	bne.n	800b90c <xTaskResumeAll+0x2c>
	__asm volatile
 800b8f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8fa:	f383 8811 	msr	BASEPRI, r3
 800b8fe:	f3bf 8f6f 	isb	sy
 800b902:	f3bf 8f4f 	dsb	sy
 800b906:	603b      	str	r3, [r7, #0]
}
 800b908:	bf00      	nop
 800b90a:	e7fe      	b.n	800b90a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b90c:	f001 fa22 	bl	800cd54 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b910:	4b39      	ldr	r3, [pc, #228]	; (800b9f8 <xTaskResumeAll+0x118>)
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	3b01      	subs	r3, #1
 800b916:	4a38      	ldr	r2, [pc, #224]	; (800b9f8 <xTaskResumeAll+0x118>)
 800b918:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b91a:	4b37      	ldr	r3, [pc, #220]	; (800b9f8 <xTaskResumeAll+0x118>)
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d162      	bne.n	800b9e8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b922:	4b36      	ldr	r3, [pc, #216]	; (800b9fc <xTaskResumeAll+0x11c>)
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	2b00      	cmp	r3, #0
 800b928:	d05e      	beq.n	800b9e8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b92a:	e02f      	b.n	800b98c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b92c:	4b34      	ldr	r3, [pc, #208]	; (800ba00 <xTaskResumeAll+0x120>)
 800b92e:	68db      	ldr	r3, [r3, #12]
 800b930:	68db      	ldr	r3, [r3, #12]
 800b932:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	3318      	adds	r3, #24
 800b938:	4618      	mov	r0, r3
 800b93a:	f7fe fddd 	bl	800a4f8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	3304      	adds	r3, #4
 800b942:	4618      	mov	r0, r3
 800b944:	f7fe fdd8 	bl	800a4f8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b94c:	4b2d      	ldr	r3, [pc, #180]	; (800ba04 <xTaskResumeAll+0x124>)
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	429a      	cmp	r2, r3
 800b952:	d903      	bls.n	800b95c <xTaskResumeAll+0x7c>
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b958:	4a2a      	ldr	r2, [pc, #168]	; (800ba04 <xTaskResumeAll+0x124>)
 800b95a:	6013      	str	r3, [r2, #0]
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b960:	4613      	mov	r3, r2
 800b962:	009b      	lsls	r3, r3, #2
 800b964:	4413      	add	r3, r2
 800b966:	009b      	lsls	r3, r3, #2
 800b968:	4a27      	ldr	r2, [pc, #156]	; (800ba08 <xTaskResumeAll+0x128>)
 800b96a:	441a      	add	r2, r3
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	3304      	adds	r3, #4
 800b970:	4619      	mov	r1, r3
 800b972:	4610      	mov	r0, r2
 800b974:	f7fe fd63 	bl	800a43e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b97c:	4b23      	ldr	r3, [pc, #140]	; (800ba0c <xTaskResumeAll+0x12c>)
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b982:	429a      	cmp	r2, r3
 800b984:	d302      	bcc.n	800b98c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800b986:	4b22      	ldr	r3, [pc, #136]	; (800ba10 <xTaskResumeAll+0x130>)
 800b988:	2201      	movs	r2, #1
 800b98a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b98c:	4b1c      	ldr	r3, [pc, #112]	; (800ba00 <xTaskResumeAll+0x120>)
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	2b00      	cmp	r3, #0
 800b992:	d1cb      	bne.n	800b92c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	2b00      	cmp	r3, #0
 800b998:	d001      	beq.n	800b99e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b99a:	f000 fb55 	bl	800c048 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b99e:	4b1d      	ldr	r3, [pc, #116]	; (800ba14 <xTaskResumeAll+0x134>)
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d010      	beq.n	800b9cc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b9aa:	f000 f847 	bl	800ba3c <xTaskIncrementTick>
 800b9ae:	4603      	mov	r3, r0
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d002      	beq.n	800b9ba <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800b9b4:	4b16      	ldr	r3, [pc, #88]	; (800ba10 <xTaskResumeAll+0x130>)
 800b9b6:	2201      	movs	r2, #1
 800b9b8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	3b01      	subs	r3, #1
 800b9be:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d1f1      	bne.n	800b9aa <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800b9c6:	4b13      	ldr	r3, [pc, #76]	; (800ba14 <xTaskResumeAll+0x134>)
 800b9c8:	2200      	movs	r2, #0
 800b9ca:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b9cc:	4b10      	ldr	r3, [pc, #64]	; (800ba10 <xTaskResumeAll+0x130>)
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d009      	beq.n	800b9e8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b9d4:	2301      	movs	r3, #1
 800b9d6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b9d8:	4b0f      	ldr	r3, [pc, #60]	; (800ba18 <xTaskResumeAll+0x138>)
 800b9da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b9de:	601a      	str	r2, [r3, #0]
 800b9e0:	f3bf 8f4f 	dsb	sy
 800b9e4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b9e8:	f001 f9e4 	bl	800cdb4 <vPortExitCritical>

	return xAlreadyYielded;
 800b9ec:	68bb      	ldr	r3, [r7, #8]
}
 800b9ee:	4618      	mov	r0, r3
 800b9f0:	3710      	adds	r7, #16
 800b9f2:	46bd      	mov	sp, r7
 800b9f4:	bd80      	pop	{r7, pc}
 800b9f6:	bf00      	nop
 800b9f8:	20001144 	.word	0x20001144
 800b9fc:	2000111c 	.word	0x2000111c
 800ba00:	200010dc 	.word	0x200010dc
 800ba04:	20001124 	.word	0x20001124
 800ba08:	20000c4c 	.word	0x20000c4c
 800ba0c:	20000c48 	.word	0x20000c48
 800ba10:	20001130 	.word	0x20001130
 800ba14:	2000112c 	.word	0x2000112c
 800ba18:	e000ed04 	.word	0xe000ed04

0800ba1c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800ba1c:	b480      	push	{r7}
 800ba1e:	b083      	sub	sp, #12
 800ba20:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800ba22:	4b05      	ldr	r3, [pc, #20]	; (800ba38 <xTaskGetTickCount+0x1c>)
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800ba28:	687b      	ldr	r3, [r7, #4]
}
 800ba2a:	4618      	mov	r0, r3
 800ba2c:	370c      	adds	r7, #12
 800ba2e:	46bd      	mov	sp, r7
 800ba30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba34:	4770      	bx	lr
 800ba36:	bf00      	nop
 800ba38:	20001120 	.word	0x20001120

0800ba3c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ba3c:	b580      	push	{r7, lr}
 800ba3e:	b086      	sub	sp, #24
 800ba40:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ba42:	2300      	movs	r3, #0
 800ba44:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ba46:	4b4f      	ldr	r3, [pc, #316]	; (800bb84 <xTaskIncrementTick+0x148>)
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	f040 808f 	bne.w	800bb6e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ba50:	4b4d      	ldr	r3, [pc, #308]	; (800bb88 <xTaskIncrementTick+0x14c>)
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	3301      	adds	r3, #1
 800ba56:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ba58:	4a4b      	ldr	r2, [pc, #300]	; (800bb88 <xTaskIncrementTick+0x14c>)
 800ba5a:	693b      	ldr	r3, [r7, #16]
 800ba5c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ba5e:	693b      	ldr	r3, [r7, #16]
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d120      	bne.n	800baa6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800ba64:	4b49      	ldr	r3, [pc, #292]	; (800bb8c <xTaskIncrementTick+0x150>)
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d00a      	beq.n	800ba84 <xTaskIncrementTick+0x48>
	__asm volatile
 800ba6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba72:	f383 8811 	msr	BASEPRI, r3
 800ba76:	f3bf 8f6f 	isb	sy
 800ba7a:	f3bf 8f4f 	dsb	sy
 800ba7e:	603b      	str	r3, [r7, #0]
}
 800ba80:	bf00      	nop
 800ba82:	e7fe      	b.n	800ba82 <xTaskIncrementTick+0x46>
 800ba84:	4b41      	ldr	r3, [pc, #260]	; (800bb8c <xTaskIncrementTick+0x150>)
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	60fb      	str	r3, [r7, #12]
 800ba8a:	4b41      	ldr	r3, [pc, #260]	; (800bb90 <xTaskIncrementTick+0x154>)
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	4a3f      	ldr	r2, [pc, #252]	; (800bb8c <xTaskIncrementTick+0x150>)
 800ba90:	6013      	str	r3, [r2, #0]
 800ba92:	4a3f      	ldr	r2, [pc, #252]	; (800bb90 <xTaskIncrementTick+0x154>)
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	6013      	str	r3, [r2, #0]
 800ba98:	4b3e      	ldr	r3, [pc, #248]	; (800bb94 <xTaskIncrementTick+0x158>)
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	3301      	adds	r3, #1
 800ba9e:	4a3d      	ldr	r2, [pc, #244]	; (800bb94 <xTaskIncrementTick+0x158>)
 800baa0:	6013      	str	r3, [r2, #0]
 800baa2:	f000 fad1 	bl	800c048 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800baa6:	4b3c      	ldr	r3, [pc, #240]	; (800bb98 <xTaskIncrementTick+0x15c>)
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	693a      	ldr	r2, [r7, #16]
 800baac:	429a      	cmp	r2, r3
 800baae:	d349      	bcc.n	800bb44 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bab0:	4b36      	ldr	r3, [pc, #216]	; (800bb8c <xTaskIncrementTick+0x150>)
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d104      	bne.n	800bac4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800baba:	4b37      	ldr	r3, [pc, #220]	; (800bb98 <xTaskIncrementTick+0x15c>)
 800babc:	f04f 32ff 	mov.w	r2, #4294967295
 800bac0:	601a      	str	r2, [r3, #0]
					break;
 800bac2:	e03f      	b.n	800bb44 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bac4:	4b31      	ldr	r3, [pc, #196]	; (800bb8c <xTaskIncrementTick+0x150>)
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	68db      	ldr	r3, [r3, #12]
 800baca:	68db      	ldr	r3, [r3, #12]
 800bacc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800bace:	68bb      	ldr	r3, [r7, #8]
 800bad0:	685b      	ldr	r3, [r3, #4]
 800bad2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800bad4:	693a      	ldr	r2, [r7, #16]
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	429a      	cmp	r2, r3
 800bada:	d203      	bcs.n	800bae4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800badc:	4a2e      	ldr	r2, [pc, #184]	; (800bb98 <xTaskIncrementTick+0x15c>)
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800bae2:	e02f      	b.n	800bb44 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bae4:	68bb      	ldr	r3, [r7, #8]
 800bae6:	3304      	adds	r3, #4
 800bae8:	4618      	mov	r0, r3
 800baea:	f7fe fd05 	bl	800a4f8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800baee:	68bb      	ldr	r3, [r7, #8]
 800baf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d004      	beq.n	800bb00 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800baf6:	68bb      	ldr	r3, [r7, #8]
 800baf8:	3318      	adds	r3, #24
 800bafa:	4618      	mov	r0, r3
 800bafc:	f7fe fcfc 	bl	800a4f8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800bb00:	68bb      	ldr	r3, [r7, #8]
 800bb02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb04:	4b25      	ldr	r3, [pc, #148]	; (800bb9c <xTaskIncrementTick+0x160>)
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	429a      	cmp	r2, r3
 800bb0a:	d903      	bls.n	800bb14 <xTaskIncrementTick+0xd8>
 800bb0c:	68bb      	ldr	r3, [r7, #8]
 800bb0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb10:	4a22      	ldr	r2, [pc, #136]	; (800bb9c <xTaskIncrementTick+0x160>)
 800bb12:	6013      	str	r3, [r2, #0]
 800bb14:	68bb      	ldr	r3, [r7, #8]
 800bb16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb18:	4613      	mov	r3, r2
 800bb1a:	009b      	lsls	r3, r3, #2
 800bb1c:	4413      	add	r3, r2
 800bb1e:	009b      	lsls	r3, r3, #2
 800bb20:	4a1f      	ldr	r2, [pc, #124]	; (800bba0 <xTaskIncrementTick+0x164>)
 800bb22:	441a      	add	r2, r3
 800bb24:	68bb      	ldr	r3, [r7, #8]
 800bb26:	3304      	adds	r3, #4
 800bb28:	4619      	mov	r1, r3
 800bb2a:	4610      	mov	r0, r2
 800bb2c:	f7fe fc87 	bl	800a43e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bb30:	68bb      	ldr	r3, [r7, #8]
 800bb32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb34:	4b1b      	ldr	r3, [pc, #108]	; (800bba4 <xTaskIncrementTick+0x168>)
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb3a:	429a      	cmp	r2, r3
 800bb3c:	d3b8      	bcc.n	800bab0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800bb3e:	2301      	movs	r3, #1
 800bb40:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bb42:	e7b5      	b.n	800bab0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800bb44:	4b17      	ldr	r3, [pc, #92]	; (800bba4 <xTaskIncrementTick+0x168>)
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb4a:	4915      	ldr	r1, [pc, #84]	; (800bba0 <xTaskIncrementTick+0x164>)
 800bb4c:	4613      	mov	r3, r2
 800bb4e:	009b      	lsls	r3, r3, #2
 800bb50:	4413      	add	r3, r2
 800bb52:	009b      	lsls	r3, r3, #2
 800bb54:	440b      	add	r3, r1
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	2b01      	cmp	r3, #1
 800bb5a:	d901      	bls.n	800bb60 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800bb5c:	2301      	movs	r3, #1
 800bb5e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800bb60:	4b11      	ldr	r3, [pc, #68]	; (800bba8 <xTaskIncrementTick+0x16c>)
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d007      	beq.n	800bb78 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800bb68:	2301      	movs	r3, #1
 800bb6a:	617b      	str	r3, [r7, #20]
 800bb6c:	e004      	b.n	800bb78 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800bb6e:	4b0f      	ldr	r3, [pc, #60]	; (800bbac <xTaskIncrementTick+0x170>)
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	3301      	adds	r3, #1
 800bb74:	4a0d      	ldr	r2, [pc, #52]	; (800bbac <xTaskIncrementTick+0x170>)
 800bb76:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800bb78:	697b      	ldr	r3, [r7, #20]
}
 800bb7a:	4618      	mov	r0, r3
 800bb7c:	3718      	adds	r7, #24
 800bb7e:	46bd      	mov	sp, r7
 800bb80:	bd80      	pop	{r7, pc}
 800bb82:	bf00      	nop
 800bb84:	20001144 	.word	0x20001144
 800bb88:	20001120 	.word	0x20001120
 800bb8c:	200010d4 	.word	0x200010d4
 800bb90:	200010d8 	.word	0x200010d8
 800bb94:	20001134 	.word	0x20001134
 800bb98:	2000113c 	.word	0x2000113c
 800bb9c:	20001124 	.word	0x20001124
 800bba0:	20000c4c 	.word	0x20000c4c
 800bba4:	20000c48 	.word	0x20000c48
 800bba8:	20001130 	.word	0x20001130
 800bbac:	2000112c 	.word	0x2000112c

0800bbb0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800bbb0:	b480      	push	{r7}
 800bbb2:	b085      	sub	sp, #20
 800bbb4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800bbb6:	4b28      	ldr	r3, [pc, #160]	; (800bc58 <vTaskSwitchContext+0xa8>)
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d003      	beq.n	800bbc6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800bbbe:	4b27      	ldr	r3, [pc, #156]	; (800bc5c <vTaskSwitchContext+0xac>)
 800bbc0:	2201      	movs	r2, #1
 800bbc2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800bbc4:	e041      	b.n	800bc4a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800bbc6:	4b25      	ldr	r3, [pc, #148]	; (800bc5c <vTaskSwitchContext+0xac>)
 800bbc8:	2200      	movs	r2, #0
 800bbca:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bbcc:	4b24      	ldr	r3, [pc, #144]	; (800bc60 <vTaskSwitchContext+0xb0>)
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	60fb      	str	r3, [r7, #12]
 800bbd2:	e010      	b.n	800bbf6 <vTaskSwitchContext+0x46>
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d10a      	bne.n	800bbf0 <vTaskSwitchContext+0x40>
	__asm volatile
 800bbda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbde:	f383 8811 	msr	BASEPRI, r3
 800bbe2:	f3bf 8f6f 	isb	sy
 800bbe6:	f3bf 8f4f 	dsb	sy
 800bbea:	607b      	str	r3, [r7, #4]
}
 800bbec:	bf00      	nop
 800bbee:	e7fe      	b.n	800bbee <vTaskSwitchContext+0x3e>
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	3b01      	subs	r3, #1
 800bbf4:	60fb      	str	r3, [r7, #12]
 800bbf6:	491b      	ldr	r1, [pc, #108]	; (800bc64 <vTaskSwitchContext+0xb4>)
 800bbf8:	68fa      	ldr	r2, [r7, #12]
 800bbfa:	4613      	mov	r3, r2
 800bbfc:	009b      	lsls	r3, r3, #2
 800bbfe:	4413      	add	r3, r2
 800bc00:	009b      	lsls	r3, r3, #2
 800bc02:	440b      	add	r3, r1
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d0e4      	beq.n	800bbd4 <vTaskSwitchContext+0x24>
 800bc0a:	68fa      	ldr	r2, [r7, #12]
 800bc0c:	4613      	mov	r3, r2
 800bc0e:	009b      	lsls	r3, r3, #2
 800bc10:	4413      	add	r3, r2
 800bc12:	009b      	lsls	r3, r3, #2
 800bc14:	4a13      	ldr	r2, [pc, #76]	; (800bc64 <vTaskSwitchContext+0xb4>)
 800bc16:	4413      	add	r3, r2
 800bc18:	60bb      	str	r3, [r7, #8]
 800bc1a:	68bb      	ldr	r3, [r7, #8]
 800bc1c:	685b      	ldr	r3, [r3, #4]
 800bc1e:	685a      	ldr	r2, [r3, #4]
 800bc20:	68bb      	ldr	r3, [r7, #8]
 800bc22:	605a      	str	r2, [r3, #4]
 800bc24:	68bb      	ldr	r3, [r7, #8]
 800bc26:	685a      	ldr	r2, [r3, #4]
 800bc28:	68bb      	ldr	r3, [r7, #8]
 800bc2a:	3308      	adds	r3, #8
 800bc2c:	429a      	cmp	r2, r3
 800bc2e:	d104      	bne.n	800bc3a <vTaskSwitchContext+0x8a>
 800bc30:	68bb      	ldr	r3, [r7, #8]
 800bc32:	685b      	ldr	r3, [r3, #4]
 800bc34:	685a      	ldr	r2, [r3, #4]
 800bc36:	68bb      	ldr	r3, [r7, #8]
 800bc38:	605a      	str	r2, [r3, #4]
 800bc3a:	68bb      	ldr	r3, [r7, #8]
 800bc3c:	685b      	ldr	r3, [r3, #4]
 800bc3e:	68db      	ldr	r3, [r3, #12]
 800bc40:	4a09      	ldr	r2, [pc, #36]	; (800bc68 <vTaskSwitchContext+0xb8>)
 800bc42:	6013      	str	r3, [r2, #0]
 800bc44:	4a06      	ldr	r2, [pc, #24]	; (800bc60 <vTaskSwitchContext+0xb0>)
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	6013      	str	r3, [r2, #0]
}
 800bc4a:	bf00      	nop
 800bc4c:	3714      	adds	r7, #20
 800bc4e:	46bd      	mov	sp, r7
 800bc50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc54:	4770      	bx	lr
 800bc56:	bf00      	nop
 800bc58:	20001144 	.word	0x20001144
 800bc5c:	20001130 	.word	0x20001130
 800bc60:	20001124 	.word	0x20001124
 800bc64:	20000c4c 	.word	0x20000c4c
 800bc68:	20000c48 	.word	0x20000c48

0800bc6c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800bc6c:	b580      	push	{r7, lr}
 800bc6e:	b084      	sub	sp, #16
 800bc70:	af00      	add	r7, sp, #0
 800bc72:	6078      	str	r0, [r7, #4]
 800bc74:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d10a      	bne.n	800bc92 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800bc7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc80:	f383 8811 	msr	BASEPRI, r3
 800bc84:	f3bf 8f6f 	isb	sy
 800bc88:	f3bf 8f4f 	dsb	sy
 800bc8c:	60fb      	str	r3, [r7, #12]
}
 800bc8e:	bf00      	nop
 800bc90:	e7fe      	b.n	800bc90 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bc92:	4b07      	ldr	r3, [pc, #28]	; (800bcb0 <vTaskPlaceOnEventList+0x44>)
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	3318      	adds	r3, #24
 800bc98:	4619      	mov	r1, r3
 800bc9a:	6878      	ldr	r0, [r7, #4]
 800bc9c:	f7fe fbf3 	bl	800a486 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800bca0:	2101      	movs	r1, #1
 800bca2:	6838      	ldr	r0, [r7, #0]
 800bca4:	f000 fb8a 	bl	800c3bc <prvAddCurrentTaskToDelayedList>
}
 800bca8:	bf00      	nop
 800bcaa:	3710      	adds	r7, #16
 800bcac:	46bd      	mov	sp, r7
 800bcae:	bd80      	pop	{r7, pc}
 800bcb0:	20000c48 	.word	0x20000c48

0800bcb4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800bcb4:	b580      	push	{r7, lr}
 800bcb6:	b086      	sub	sp, #24
 800bcb8:	af00      	add	r7, sp, #0
 800bcba:	60f8      	str	r0, [r7, #12]
 800bcbc:	60b9      	str	r1, [r7, #8]
 800bcbe:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d10a      	bne.n	800bcdc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800bcc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcca:	f383 8811 	msr	BASEPRI, r3
 800bcce:	f3bf 8f6f 	isb	sy
 800bcd2:	f3bf 8f4f 	dsb	sy
 800bcd6:	617b      	str	r3, [r7, #20]
}
 800bcd8:	bf00      	nop
 800bcda:	e7fe      	b.n	800bcda <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bcdc:	4b0a      	ldr	r3, [pc, #40]	; (800bd08 <vTaskPlaceOnEventListRestricted+0x54>)
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	3318      	adds	r3, #24
 800bce2:	4619      	mov	r1, r3
 800bce4:	68f8      	ldr	r0, [r7, #12]
 800bce6:	f7fe fbaa 	bl	800a43e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d002      	beq.n	800bcf6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800bcf0:	f04f 33ff 	mov.w	r3, #4294967295
 800bcf4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800bcf6:	6879      	ldr	r1, [r7, #4]
 800bcf8:	68b8      	ldr	r0, [r7, #8]
 800bcfa:	f000 fb5f 	bl	800c3bc <prvAddCurrentTaskToDelayedList>
	}
 800bcfe:	bf00      	nop
 800bd00:	3718      	adds	r7, #24
 800bd02:	46bd      	mov	sp, r7
 800bd04:	bd80      	pop	{r7, pc}
 800bd06:	bf00      	nop
 800bd08:	20000c48 	.word	0x20000c48

0800bd0c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800bd0c:	b580      	push	{r7, lr}
 800bd0e:	b086      	sub	sp, #24
 800bd10:	af00      	add	r7, sp, #0
 800bd12:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	68db      	ldr	r3, [r3, #12]
 800bd18:	68db      	ldr	r3, [r3, #12]
 800bd1a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800bd1c:	693b      	ldr	r3, [r7, #16]
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d10a      	bne.n	800bd38 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800bd22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd26:	f383 8811 	msr	BASEPRI, r3
 800bd2a:	f3bf 8f6f 	isb	sy
 800bd2e:	f3bf 8f4f 	dsb	sy
 800bd32:	60fb      	str	r3, [r7, #12]
}
 800bd34:	bf00      	nop
 800bd36:	e7fe      	b.n	800bd36 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800bd38:	693b      	ldr	r3, [r7, #16]
 800bd3a:	3318      	adds	r3, #24
 800bd3c:	4618      	mov	r0, r3
 800bd3e:	f7fe fbdb 	bl	800a4f8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bd42:	4b1e      	ldr	r3, [pc, #120]	; (800bdbc <xTaskRemoveFromEventList+0xb0>)
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d11d      	bne.n	800bd86 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800bd4a:	693b      	ldr	r3, [r7, #16]
 800bd4c:	3304      	adds	r3, #4
 800bd4e:	4618      	mov	r0, r3
 800bd50:	f7fe fbd2 	bl	800a4f8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800bd54:	693b      	ldr	r3, [r7, #16]
 800bd56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd58:	4b19      	ldr	r3, [pc, #100]	; (800bdc0 <xTaskRemoveFromEventList+0xb4>)
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	429a      	cmp	r2, r3
 800bd5e:	d903      	bls.n	800bd68 <xTaskRemoveFromEventList+0x5c>
 800bd60:	693b      	ldr	r3, [r7, #16]
 800bd62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd64:	4a16      	ldr	r2, [pc, #88]	; (800bdc0 <xTaskRemoveFromEventList+0xb4>)
 800bd66:	6013      	str	r3, [r2, #0]
 800bd68:	693b      	ldr	r3, [r7, #16]
 800bd6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd6c:	4613      	mov	r3, r2
 800bd6e:	009b      	lsls	r3, r3, #2
 800bd70:	4413      	add	r3, r2
 800bd72:	009b      	lsls	r3, r3, #2
 800bd74:	4a13      	ldr	r2, [pc, #76]	; (800bdc4 <xTaskRemoveFromEventList+0xb8>)
 800bd76:	441a      	add	r2, r3
 800bd78:	693b      	ldr	r3, [r7, #16]
 800bd7a:	3304      	adds	r3, #4
 800bd7c:	4619      	mov	r1, r3
 800bd7e:	4610      	mov	r0, r2
 800bd80:	f7fe fb5d 	bl	800a43e <vListInsertEnd>
 800bd84:	e005      	b.n	800bd92 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800bd86:	693b      	ldr	r3, [r7, #16]
 800bd88:	3318      	adds	r3, #24
 800bd8a:	4619      	mov	r1, r3
 800bd8c:	480e      	ldr	r0, [pc, #56]	; (800bdc8 <xTaskRemoveFromEventList+0xbc>)
 800bd8e:	f7fe fb56 	bl	800a43e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bd92:	693b      	ldr	r3, [r7, #16]
 800bd94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd96:	4b0d      	ldr	r3, [pc, #52]	; (800bdcc <xTaskRemoveFromEventList+0xc0>)
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd9c:	429a      	cmp	r2, r3
 800bd9e:	d905      	bls.n	800bdac <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800bda0:	2301      	movs	r3, #1
 800bda2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800bda4:	4b0a      	ldr	r3, [pc, #40]	; (800bdd0 <xTaskRemoveFromEventList+0xc4>)
 800bda6:	2201      	movs	r2, #1
 800bda8:	601a      	str	r2, [r3, #0]
 800bdaa:	e001      	b.n	800bdb0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800bdac:	2300      	movs	r3, #0
 800bdae:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800bdb0:	697b      	ldr	r3, [r7, #20]
}
 800bdb2:	4618      	mov	r0, r3
 800bdb4:	3718      	adds	r7, #24
 800bdb6:	46bd      	mov	sp, r7
 800bdb8:	bd80      	pop	{r7, pc}
 800bdba:	bf00      	nop
 800bdbc:	20001144 	.word	0x20001144
 800bdc0:	20001124 	.word	0x20001124
 800bdc4:	20000c4c 	.word	0x20000c4c
 800bdc8:	200010dc 	.word	0x200010dc
 800bdcc:	20000c48 	.word	0x20000c48
 800bdd0:	20001130 	.word	0x20001130

0800bdd4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800bdd4:	b480      	push	{r7}
 800bdd6:	b083      	sub	sp, #12
 800bdd8:	af00      	add	r7, sp, #0
 800bdda:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800bddc:	4b06      	ldr	r3, [pc, #24]	; (800bdf8 <vTaskInternalSetTimeOutState+0x24>)
 800bdde:	681a      	ldr	r2, [r3, #0]
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800bde4:	4b05      	ldr	r3, [pc, #20]	; (800bdfc <vTaskInternalSetTimeOutState+0x28>)
 800bde6:	681a      	ldr	r2, [r3, #0]
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	605a      	str	r2, [r3, #4]
}
 800bdec:	bf00      	nop
 800bdee:	370c      	adds	r7, #12
 800bdf0:	46bd      	mov	sp, r7
 800bdf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf6:	4770      	bx	lr
 800bdf8:	20001134 	.word	0x20001134
 800bdfc:	20001120 	.word	0x20001120

0800be00 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800be00:	b580      	push	{r7, lr}
 800be02:	b088      	sub	sp, #32
 800be04:	af00      	add	r7, sp, #0
 800be06:	6078      	str	r0, [r7, #4]
 800be08:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d10a      	bne.n	800be26 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800be10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be14:	f383 8811 	msr	BASEPRI, r3
 800be18:	f3bf 8f6f 	isb	sy
 800be1c:	f3bf 8f4f 	dsb	sy
 800be20:	613b      	str	r3, [r7, #16]
}
 800be22:	bf00      	nop
 800be24:	e7fe      	b.n	800be24 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800be26:	683b      	ldr	r3, [r7, #0]
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d10a      	bne.n	800be42 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800be2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be30:	f383 8811 	msr	BASEPRI, r3
 800be34:	f3bf 8f6f 	isb	sy
 800be38:	f3bf 8f4f 	dsb	sy
 800be3c:	60fb      	str	r3, [r7, #12]
}
 800be3e:	bf00      	nop
 800be40:	e7fe      	b.n	800be40 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800be42:	f000 ff87 	bl	800cd54 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800be46:	4b1d      	ldr	r3, [pc, #116]	; (800bebc <xTaskCheckForTimeOut+0xbc>)
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	685b      	ldr	r3, [r3, #4]
 800be50:	69ba      	ldr	r2, [r7, #24]
 800be52:	1ad3      	subs	r3, r2, r3
 800be54:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800be56:	683b      	ldr	r3, [r7, #0]
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be5e:	d102      	bne.n	800be66 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800be60:	2300      	movs	r3, #0
 800be62:	61fb      	str	r3, [r7, #28]
 800be64:	e023      	b.n	800beae <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	681a      	ldr	r2, [r3, #0]
 800be6a:	4b15      	ldr	r3, [pc, #84]	; (800bec0 <xTaskCheckForTimeOut+0xc0>)
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	429a      	cmp	r2, r3
 800be70:	d007      	beq.n	800be82 <xTaskCheckForTimeOut+0x82>
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	685b      	ldr	r3, [r3, #4]
 800be76:	69ba      	ldr	r2, [r7, #24]
 800be78:	429a      	cmp	r2, r3
 800be7a:	d302      	bcc.n	800be82 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800be7c:	2301      	movs	r3, #1
 800be7e:	61fb      	str	r3, [r7, #28]
 800be80:	e015      	b.n	800beae <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800be82:	683b      	ldr	r3, [r7, #0]
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	697a      	ldr	r2, [r7, #20]
 800be88:	429a      	cmp	r2, r3
 800be8a:	d20b      	bcs.n	800bea4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800be8c:	683b      	ldr	r3, [r7, #0]
 800be8e:	681a      	ldr	r2, [r3, #0]
 800be90:	697b      	ldr	r3, [r7, #20]
 800be92:	1ad2      	subs	r2, r2, r3
 800be94:	683b      	ldr	r3, [r7, #0]
 800be96:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800be98:	6878      	ldr	r0, [r7, #4]
 800be9a:	f7ff ff9b 	bl	800bdd4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800be9e:	2300      	movs	r3, #0
 800bea0:	61fb      	str	r3, [r7, #28]
 800bea2:	e004      	b.n	800beae <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800bea4:	683b      	ldr	r3, [r7, #0]
 800bea6:	2200      	movs	r2, #0
 800bea8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800beaa:	2301      	movs	r3, #1
 800beac:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800beae:	f000 ff81 	bl	800cdb4 <vPortExitCritical>

	return xReturn;
 800beb2:	69fb      	ldr	r3, [r7, #28]
}
 800beb4:	4618      	mov	r0, r3
 800beb6:	3720      	adds	r7, #32
 800beb8:	46bd      	mov	sp, r7
 800beba:	bd80      	pop	{r7, pc}
 800bebc:	20001120 	.word	0x20001120
 800bec0:	20001134 	.word	0x20001134

0800bec4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800bec4:	b480      	push	{r7}
 800bec6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800bec8:	4b03      	ldr	r3, [pc, #12]	; (800bed8 <vTaskMissedYield+0x14>)
 800beca:	2201      	movs	r2, #1
 800becc:	601a      	str	r2, [r3, #0]
}
 800bece:	bf00      	nop
 800bed0:	46bd      	mov	sp, r7
 800bed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bed6:	4770      	bx	lr
 800bed8:	20001130 	.word	0x20001130

0800bedc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800bedc:	b580      	push	{r7, lr}
 800bede:	b082      	sub	sp, #8
 800bee0:	af00      	add	r7, sp, #0
 800bee2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800bee4:	f000 f852 	bl	800bf8c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800bee8:	4b06      	ldr	r3, [pc, #24]	; (800bf04 <prvIdleTask+0x28>)
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	2b01      	cmp	r3, #1
 800beee:	d9f9      	bls.n	800bee4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800bef0:	4b05      	ldr	r3, [pc, #20]	; (800bf08 <prvIdleTask+0x2c>)
 800bef2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bef6:	601a      	str	r2, [r3, #0]
 800bef8:	f3bf 8f4f 	dsb	sy
 800befc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800bf00:	e7f0      	b.n	800bee4 <prvIdleTask+0x8>
 800bf02:	bf00      	nop
 800bf04:	20000c4c 	.word	0x20000c4c
 800bf08:	e000ed04 	.word	0xe000ed04

0800bf0c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800bf0c:	b580      	push	{r7, lr}
 800bf0e:	b082      	sub	sp, #8
 800bf10:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bf12:	2300      	movs	r3, #0
 800bf14:	607b      	str	r3, [r7, #4]
 800bf16:	e00c      	b.n	800bf32 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800bf18:	687a      	ldr	r2, [r7, #4]
 800bf1a:	4613      	mov	r3, r2
 800bf1c:	009b      	lsls	r3, r3, #2
 800bf1e:	4413      	add	r3, r2
 800bf20:	009b      	lsls	r3, r3, #2
 800bf22:	4a12      	ldr	r2, [pc, #72]	; (800bf6c <prvInitialiseTaskLists+0x60>)
 800bf24:	4413      	add	r3, r2
 800bf26:	4618      	mov	r0, r3
 800bf28:	f7fe fa5c 	bl	800a3e4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	3301      	adds	r3, #1
 800bf30:	607b      	str	r3, [r7, #4]
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	2b37      	cmp	r3, #55	; 0x37
 800bf36:	d9ef      	bls.n	800bf18 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800bf38:	480d      	ldr	r0, [pc, #52]	; (800bf70 <prvInitialiseTaskLists+0x64>)
 800bf3a:	f7fe fa53 	bl	800a3e4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800bf3e:	480d      	ldr	r0, [pc, #52]	; (800bf74 <prvInitialiseTaskLists+0x68>)
 800bf40:	f7fe fa50 	bl	800a3e4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800bf44:	480c      	ldr	r0, [pc, #48]	; (800bf78 <prvInitialiseTaskLists+0x6c>)
 800bf46:	f7fe fa4d 	bl	800a3e4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800bf4a:	480c      	ldr	r0, [pc, #48]	; (800bf7c <prvInitialiseTaskLists+0x70>)
 800bf4c:	f7fe fa4a 	bl	800a3e4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800bf50:	480b      	ldr	r0, [pc, #44]	; (800bf80 <prvInitialiseTaskLists+0x74>)
 800bf52:	f7fe fa47 	bl	800a3e4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800bf56:	4b0b      	ldr	r3, [pc, #44]	; (800bf84 <prvInitialiseTaskLists+0x78>)
 800bf58:	4a05      	ldr	r2, [pc, #20]	; (800bf70 <prvInitialiseTaskLists+0x64>)
 800bf5a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800bf5c:	4b0a      	ldr	r3, [pc, #40]	; (800bf88 <prvInitialiseTaskLists+0x7c>)
 800bf5e:	4a05      	ldr	r2, [pc, #20]	; (800bf74 <prvInitialiseTaskLists+0x68>)
 800bf60:	601a      	str	r2, [r3, #0]
}
 800bf62:	bf00      	nop
 800bf64:	3708      	adds	r7, #8
 800bf66:	46bd      	mov	sp, r7
 800bf68:	bd80      	pop	{r7, pc}
 800bf6a:	bf00      	nop
 800bf6c:	20000c4c 	.word	0x20000c4c
 800bf70:	200010ac 	.word	0x200010ac
 800bf74:	200010c0 	.word	0x200010c0
 800bf78:	200010dc 	.word	0x200010dc
 800bf7c:	200010f0 	.word	0x200010f0
 800bf80:	20001108 	.word	0x20001108
 800bf84:	200010d4 	.word	0x200010d4
 800bf88:	200010d8 	.word	0x200010d8

0800bf8c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800bf8c:	b580      	push	{r7, lr}
 800bf8e:	b082      	sub	sp, #8
 800bf90:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bf92:	e019      	b.n	800bfc8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800bf94:	f000 fede 	bl	800cd54 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bf98:	4b10      	ldr	r3, [pc, #64]	; (800bfdc <prvCheckTasksWaitingTermination+0x50>)
 800bf9a:	68db      	ldr	r3, [r3, #12]
 800bf9c:	68db      	ldr	r3, [r3, #12]
 800bf9e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	3304      	adds	r3, #4
 800bfa4:	4618      	mov	r0, r3
 800bfa6:	f7fe faa7 	bl	800a4f8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800bfaa:	4b0d      	ldr	r3, [pc, #52]	; (800bfe0 <prvCheckTasksWaitingTermination+0x54>)
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	3b01      	subs	r3, #1
 800bfb0:	4a0b      	ldr	r2, [pc, #44]	; (800bfe0 <prvCheckTasksWaitingTermination+0x54>)
 800bfb2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800bfb4:	4b0b      	ldr	r3, [pc, #44]	; (800bfe4 <prvCheckTasksWaitingTermination+0x58>)
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	3b01      	subs	r3, #1
 800bfba:	4a0a      	ldr	r2, [pc, #40]	; (800bfe4 <prvCheckTasksWaitingTermination+0x58>)
 800bfbc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800bfbe:	f000 fef9 	bl	800cdb4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800bfc2:	6878      	ldr	r0, [r7, #4]
 800bfc4:	f000 f810 	bl	800bfe8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bfc8:	4b06      	ldr	r3, [pc, #24]	; (800bfe4 <prvCheckTasksWaitingTermination+0x58>)
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d1e1      	bne.n	800bf94 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800bfd0:	bf00      	nop
 800bfd2:	bf00      	nop
 800bfd4:	3708      	adds	r7, #8
 800bfd6:	46bd      	mov	sp, r7
 800bfd8:	bd80      	pop	{r7, pc}
 800bfda:	bf00      	nop
 800bfdc:	200010f0 	.word	0x200010f0
 800bfe0:	2000111c 	.word	0x2000111c
 800bfe4:	20001104 	.word	0x20001104

0800bfe8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800bfe8:	b580      	push	{r7, lr}
 800bfea:	b084      	sub	sp, #16
 800bfec:	af00      	add	r7, sp, #0
 800bfee:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d108      	bne.n	800c00c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bffe:	4618      	mov	r0, r3
 800c000:	f001 f896 	bl	800d130 <vPortFree>
				vPortFree( pxTCB );
 800c004:	6878      	ldr	r0, [r7, #4]
 800c006:	f001 f893 	bl	800d130 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c00a:	e018      	b.n	800c03e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800c012:	2b01      	cmp	r3, #1
 800c014:	d103      	bne.n	800c01e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800c016:	6878      	ldr	r0, [r7, #4]
 800c018:	f001 f88a 	bl	800d130 <vPortFree>
	}
 800c01c:	e00f      	b.n	800c03e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800c024:	2b02      	cmp	r3, #2
 800c026:	d00a      	beq.n	800c03e <prvDeleteTCB+0x56>
	__asm volatile
 800c028:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c02c:	f383 8811 	msr	BASEPRI, r3
 800c030:	f3bf 8f6f 	isb	sy
 800c034:	f3bf 8f4f 	dsb	sy
 800c038:	60fb      	str	r3, [r7, #12]
}
 800c03a:	bf00      	nop
 800c03c:	e7fe      	b.n	800c03c <prvDeleteTCB+0x54>
	}
 800c03e:	bf00      	nop
 800c040:	3710      	adds	r7, #16
 800c042:	46bd      	mov	sp, r7
 800c044:	bd80      	pop	{r7, pc}
	...

0800c048 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c048:	b480      	push	{r7}
 800c04a:	b083      	sub	sp, #12
 800c04c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c04e:	4b0c      	ldr	r3, [pc, #48]	; (800c080 <prvResetNextTaskUnblockTime+0x38>)
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	2b00      	cmp	r3, #0
 800c056:	d104      	bne.n	800c062 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c058:	4b0a      	ldr	r3, [pc, #40]	; (800c084 <prvResetNextTaskUnblockTime+0x3c>)
 800c05a:	f04f 32ff 	mov.w	r2, #4294967295
 800c05e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c060:	e008      	b.n	800c074 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c062:	4b07      	ldr	r3, [pc, #28]	; (800c080 <prvResetNextTaskUnblockTime+0x38>)
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	68db      	ldr	r3, [r3, #12]
 800c068:	68db      	ldr	r3, [r3, #12]
 800c06a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	685b      	ldr	r3, [r3, #4]
 800c070:	4a04      	ldr	r2, [pc, #16]	; (800c084 <prvResetNextTaskUnblockTime+0x3c>)
 800c072:	6013      	str	r3, [r2, #0]
}
 800c074:	bf00      	nop
 800c076:	370c      	adds	r7, #12
 800c078:	46bd      	mov	sp, r7
 800c07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c07e:	4770      	bx	lr
 800c080:	200010d4 	.word	0x200010d4
 800c084:	2000113c 	.word	0x2000113c

0800c088 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800c088:	b480      	push	{r7}
 800c08a:	b083      	sub	sp, #12
 800c08c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800c08e:	4b05      	ldr	r3, [pc, #20]	; (800c0a4 <xTaskGetCurrentTaskHandle+0x1c>)
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	607b      	str	r3, [r7, #4]

		return xReturn;
 800c094:	687b      	ldr	r3, [r7, #4]
	}
 800c096:	4618      	mov	r0, r3
 800c098:	370c      	adds	r7, #12
 800c09a:	46bd      	mov	sp, r7
 800c09c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0a0:	4770      	bx	lr
 800c0a2:	bf00      	nop
 800c0a4:	20000c48 	.word	0x20000c48

0800c0a8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c0a8:	b480      	push	{r7}
 800c0aa:	b083      	sub	sp, #12
 800c0ac:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c0ae:	4b0b      	ldr	r3, [pc, #44]	; (800c0dc <xTaskGetSchedulerState+0x34>)
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d102      	bne.n	800c0bc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c0b6:	2301      	movs	r3, #1
 800c0b8:	607b      	str	r3, [r7, #4]
 800c0ba:	e008      	b.n	800c0ce <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c0bc:	4b08      	ldr	r3, [pc, #32]	; (800c0e0 <xTaskGetSchedulerState+0x38>)
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d102      	bne.n	800c0ca <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c0c4:	2302      	movs	r3, #2
 800c0c6:	607b      	str	r3, [r7, #4]
 800c0c8:	e001      	b.n	800c0ce <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c0ca:	2300      	movs	r3, #0
 800c0cc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c0ce:	687b      	ldr	r3, [r7, #4]
	}
 800c0d0:	4618      	mov	r0, r3
 800c0d2:	370c      	adds	r7, #12
 800c0d4:	46bd      	mov	sp, r7
 800c0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0da:	4770      	bx	lr
 800c0dc:	20001128 	.word	0x20001128
 800c0e0:	20001144 	.word	0x20001144

0800c0e4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800c0e4:	b580      	push	{r7, lr}
 800c0e6:	b084      	sub	sp, #16
 800c0e8:	af00      	add	r7, sp, #0
 800c0ea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800c0f0:	2300      	movs	r3, #0
 800c0f2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d051      	beq.n	800c19e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800c0fa:	68bb      	ldr	r3, [r7, #8]
 800c0fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0fe:	4b2a      	ldr	r3, [pc, #168]	; (800c1a8 <xTaskPriorityInherit+0xc4>)
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c104:	429a      	cmp	r2, r3
 800c106:	d241      	bcs.n	800c18c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c108:	68bb      	ldr	r3, [r7, #8]
 800c10a:	699b      	ldr	r3, [r3, #24]
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	db06      	blt.n	800c11e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c110:	4b25      	ldr	r3, [pc, #148]	; (800c1a8 <xTaskPriorityInherit+0xc4>)
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c116:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c11a:	68bb      	ldr	r3, [r7, #8]
 800c11c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800c11e:	68bb      	ldr	r3, [r7, #8]
 800c120:	6959      	ldr	r1, [r3, #20]
 800c122:	68bb      	ldr	r3, [r7, #8]
 800c124:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c126:	4613      	mov	r3, r2
 800c128:	009b      	lsls	r3, r3, #2
 800c12a:	4413      	add	r3, r2
 800c12c:	009b      	lsls	r3, r3, #2
 800c12e:	4a1f      	ldr	r2, [pc, #124]	; (800c1ac <xTaskPriorityInherit+0xc8>)
 800c130:	4413      	add	r3, r2
 800c132:	4299      	cmp	r1, r3
 800c134:	d122      	bne.n	800c17c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c136:	68bb      	ldr	r3, [r7, #8]
 800c138:	3304      	adds	r3, #4
 800c13a:	4618      	mov	r0, r3
 800c13c:	f7fe f9dc 	bl	800a4f8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c140:	4b19      	ldr	r3, [pc, #100]	; (800c1a8 <xTaskPriorityInherit+0xc4>)
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c146:	68bb      	ldr	r3, [r7, #8]
 800c148:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800c14a:	68bb      	ldr	r3, [r7, #8]
 800c14c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c14e:	4b18      	ldr	r3, [pc, #96]	; (800c1b0 <xTaskPriorityInherit+0xcc>)
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	429a      	cmp	r2, r3
 800c154:	d903      	bls.n	800c15e <xTaskPriorityInherit+0x7a>
 800c156:	68bb      	ldr	r3, [r7, #8]
 800c158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c15a:	4a15      	ldr	r2, [pc, #84]	; (800c1b0 <xTaskPriorityInherit+0xcc>)
 800c15c:	6013      	str	r3, [r2, #0]
 800c15e:	68bb      	ldr	r3, [r7, #8]
 800c160:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c162:	4613      	mov	r3, r2
 800c164:	009b      	lsls	r3, r3, #2
 800c166:	4413      	add	r3, r2
 800c168:	009b      	lsls	r3, r3, #2
 800c16a:	4a10      	ldr	r2, [pc, #64]	; (800c1ac <xTaskPriorityInherit+0xc8>)
 800c16c:	441a      	add	r2, r3
 800c16e:	68bb      	ldr	r3, [r7, #8]
 800c170:	3304      	adds	r3, #4
 800c172:	4619      	mov	r1, r3
 800c174:	4610      	mov	r0, r2
 800c176:	f7fe f962 	bl	800a43e <vListInsertEnd>
 800c17a:	e004      	b.n	800c186 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c17c:	4b0a      	ldr	r3, [pc, #40]	; (800c1a8 <xTaskPriorityInherit+0xc4>)
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c182:	68bb      	ldr	r3, [r7, #8]
 800c184:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800c186:	2301      	movs	r3, #1
 800c188:	60fb      	str	r3, [r7, #12]
 800c18a:	e008      	b.n	800c19e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800c18c:	68bb      	ldr	r3, [r7, #8]
 800c18e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c190:	4b05      	ldr	r3, [pc, #20]	; (800c1a8 <xTaskPriorityInherit+0xc4>)
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c196:	429a      	cmp	r2, r3
 800c198:	d201      	bcs.n	800c19e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800c19a:	2301      	movs	r3, #1
 800c19c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c19e:	68fb      	ldr	r3, [r7, #12]
	}
 800c1a0:	4618      	mov	r0, r3
 800c1a2:	3710      	adds	r7, #16
 800c1a4:	46bd      	mov	sp, r7
 800c1a6:	bd80      	pop	{r7, pc}
 800c1a8:	20000c48 	.word	0x20000c48
 800c1ac:	20000c4c 	.word	0x20000c4c
 800c1b0:	20001124 	.word	0x20001124

0800c1b4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c1b4:	b580      	push	{r7, lr}
 800c1b6:	b086      	sub	sp, #24
 800c1b8:	af00      	add	r7, sp, #0
 800c1ba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c1c0:	2300      	movs	r3, #0
 800c1c2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d056      	beq.n	800c278 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c1ca:	4b2e      	ldr	r3, [pc, #184]	; (800c284 <xTaskPriorityDisinherit+0xd0>)
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	693a      	ldr	r2, [r7, #16]
 800c1d0:	429a      	cmp	r2, r3
 800c1d2:	d00a      	beq.n	800c1ea <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800c1d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1d8:	f383 8811 	msr	BASEPRI, r3
 800c1dc:	f3bf 8f6f 	isb	sy
 800c1e0:	f3bf 8f4f 	dsb	sy
 800c1e4:	60fb      	str	r3, [r7, #12]
}
 800c1e6:	bf00      	nop
 800c1e8:	e7fe      	b.n	800c1e8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c1ea:	693b      	ldr	r3, [r7, #16]
 800c1ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d10a      	bne.n	800c208 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800c1f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1f6:	f383 8811 	msr	BASEPRI, r3
 800c1fa:	f3bf 8f6f 	isb	sy
 800c1fe:	f3bf 8f4f 	dsb	sy
 800c202:	60bb      	str	r3, [r7, #8]
}
 800c204:	bf00      	nop
 800c206:	e7fe      	b.n	800c206 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800c208:	693b      	ldr	r3, [r7, #16]
 800c20a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c20c:	1e5a      	subs	r2, r3, #1
 800c20e:	693b      	ldr	r3, [r7, #16]
 800c210:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c212:	693b      	ldr	r3, [r7, #16]
 800c214:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c216:	693b      	ldr	r3, [r7, #16]
 800c218:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c21a:	429a      	cmp	r2, r3
 800c21c:	d02c      	beq.n	800c278 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c21e:	693b      	ldr	r3, [r7, #16]
 800c220:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c222:	2b00      	cmp	r3, #0
 800c224:	d128      	bne.n	800c278 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c226:	693b      	ldr	r3, [r7, #16]
 800c228:	3304      	adds	r3, #4
 800c22a:	4618      	mov	r0, r3
 800c22c:	f7fe f964 	bl	800a4f8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c230:	693b      	ldr	r3, [r7, #16]
 800c232:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c234:	693b      	ldr	r3, [r7, #16]
 800c236:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c238:	693b      	ldr	r3, [r7, #16]
 800c23a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c23c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c240:	693b      	ldr	r3, [r7, #16]
 800c242:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c244:	693b      	ldr	r3, [r7, #16]
 800c246:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c248:	4b0f      	ldr	r3, [pc, #60]	; (800c288 <xTaskPriorityDisinherit+0xd4>)
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	429a      	cmp	r2, r3
 800c24e:	d903      	bls.n	800c258 <xTaskPriorityDisinherit+0xa4>
 800c250:	693b      	ldr	r3, [r7, #16]
 800c252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c254:	4a0c      	ldr	r2, [pc, #48]	; (800c288 <xTaskPriorityDisinherit+0xd4>)
 800c256:	6013      	str	r3, [r2, #0]
 800c258:	693b      	ldr	r3, [r7, #16]
 800c25a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c25c:	4613      	mov	r3, r2
 800c25e:	009b      	lsls	r3, r3, #2
 800c260:	4413      	add	r3, r2
 800c262:	009b      	lsls	r3, r3, #2
 800c264:	4a09      	ldr	r2, [pc, #36]	; (800c28c <xTaskPriorityDisinherit+0xd8>)
 800c266:	441a      	add	r2, r3
 800c268:	693b      	ldr	r3, [r7, #16]
 800c26a:	3304      	adds	r3, #4
 800c26c:	4619      	mov	r1, r3
 800c26e:	4610      	mov	r0, r2
 800c270:	f7fe f8e5 	bl	800a43e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c274:	2301      	movs	r3, #1
 800c276:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c278:	697b      	ldr	r3, [r7, #20]
	}
 800c27a:	4618      	mov	r0, r3
 800c27c:	3718      	adds	r7, #24
 800c27e:	46bd      	mov	sp, r7
 800c280:	bd80      	pop	{r7, pc}
 800c282:	bf00      	nop
 800c284:	20000c48 	.word	0x20000c48
 800c288:	20001124 	.word	0x20001124
 800c28c:	20000c4c 	.word	0x20000c4c

0800c290 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800c290:	b580      	push	{r7, lr}
 800c292:	b088      	sub	sp, #32
 800c294:	af00      	add	r7, sp, #0
 800c296:	6078      	str	r0, [r7, #4]
 800c298:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800c29e:	2301      	movs	r3, #1
 800c2a0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d06a      	beq.n	800c37e <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800c2a8:	69bb      	ldr	r3, [r7, #24]
 800c2aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d10a      	bne.n	800c2c6 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800c2b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2b4:	f383 8811 	msr	BASEPRI, r3
 800c2b8:	f3bf 8f6f 	isb	sy
 800c2bc:	f3bf 8f4f 	dsb	sy
 800c2c0:	60fb      	str	r3, [r7, #12]
}
 800c2c2:	bf00      	nop
 800c2c4:	e7fe      	b.n	800c2c4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800c2c6:	69bb      	ldr	r3, [r7, #24]
 800c2c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c2ca:	683a      	ldr	r2, [r7, #0]
 800c2cc:	429a      	cmp	r2, r3
 800c2ce:	d902      	bls.n	800c2d6 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800c2d0:	683b      	ldr	r3, [r7, #0]
 800c2d2:	61fb      	str	r3, [r7, #28]
 800c2d4:	e002      	b.n	800c2dc <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800c2d6:	69bb      	ldr	r3, [r7, #24]
 800c2d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c2da:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800c2dc:	69bb      	ldr	r3, [r7, #24]
 800c2de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2e0:	69fa      	ldr	r2, [r7, #28]
 800c2e2:	429a      	cmp	r2, r3
 800c2e4:	d04b      	beq.n	800c37e <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800c2e6:	69bb      	ldr	r3, [r7, #24]
 800c2e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c2ea:	697a      	ldr	r2, [r7, #20]
 800c2ec:	429a      	cmp	r2, r3
 800c2ee:	d146      	bne.n	800c37e <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800c2f0:	4b25      	ldr	r3, [pc, #148]	; (800c388 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	69ba      	ldr	r2, [r7, #24]
 800c2f6:	429a      	cmp	r2, r3
 800c2f8:	d10a      	bne.n	800c310 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800c2fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2fe:	f383 8811 	msr	BASEPRI, r3
 800c302:	f3bf 8f6f 	isb	sy
 800c306:	f3bf 8f4f 	dsb	sy
 800c30a:	60bb      	str	r3, [r7, #8]
}
 800c30c:	bf00      	nop
 800c30e:	e7fe      	b.n	800c30e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800c310:	69bb      	ldr	r3, [r7, #24]
 800c312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c314:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800c316:	69bb      	ldr	r3, [r7, #24]
 800c318:	69fa      	ldr	r2, [r7, #28]
 800c31a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c31c:	69bb      	ldr	r3, [r7, #24]
 800c31e:	699b      	ldr	r3, [r3, #24]
 800c320:	2b00      	cmp	r3, #0
 800c322:	db04      	blt.n	800c32e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c324:	69fb      	ldr	r3, [r7, #28]
 800c326:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c32a:	69bb      	ldr	r3, [r7, #24]
 800c32c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c32e:	69bb      	ldr	r3, [r7, #24]
 800c330:	6959      	ldr	r1, [r3, #20]
 800c332:	693a      	ldr	r2, [r7, #16]
 800c334:	4613      	mov	r3, r2
 800c336:	009b      	lsls	r3, r3, #2
 800c338:	4413      	add	r3, r2
 800c33a:	009b      	lsls	r3, r3, #2
 800c33c:	4a13      	ldr	r2, [pc, #76]	; (800c38c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800c33e:	4413      	add	r3, r2
 800c340:	4299      	cmp	r1, r3
 800c342:	d11c      	bne.n	800c37e <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c344:	69bb      	ldr	r3, [r7, #24]
 800c346:	3304      	adds	r3, #4
 800c348:	4618      	mov	r0, r3
 800c34a:	f7fe f8d5 	bl	800a4f8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800c34e:	69bb      	ldr	r3, [r7, #24]
 800c350:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c352:	4b0f      	ldr	r3, [pc, #60]	; (800c390 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	429a      	cmp	r2, r3
 800c358:	d903      	bls.n	800c362 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800c35a:	69bb      	ldr	r3, [r7, #24]
 800c35c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c35e:	4a0c      	ldr	r2, [pc, #48]	; (800c390 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800c360:	6013      	str	r3, [r2, #0]
 800c362:	69bb      	ldr	r3, [r7, #24]
 800c364:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c366:	4613      	mov	r3, r2
 800c368:	009b      	lsls	r3, r3, #2
 800c36a:	4413      	add	r3, r2
 800c36c:	009b      	lsls	r3, r3, #2
 800c36e:	4a07      	ldr	r2, [pc, #28]	; (800c38c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800c370:	441a      	add	r2, r3
 800c372:	69bb      	ldr	r3, [r7, #24]
 800c374:	3304      	adds	r3, #4
 800c376:	4619      	mov	r1, r3
 800c378:	4610      	mov	r0, r2
 800c37a:	f7fe f860 	bl	800a43e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c37e:	bf00      	nop
 800c380:	3720      	adds	r7, #32
 800c382:	46bd      	mov	sp, r7
 800c384:	bd80      	pop	{r7, pc}
 800c386:	bf00      	nop
 800c388:	20000c48 	.word	0x20000c48
 800c38c:	20000c4c 	.word	0x20000c4c
 800c390:	20001124 	.word	0x20001124

0800c394 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800c394:	b480      	push	{r7}
 800c396:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800c398:	4b07      	ldr	r3, [pc, #28]	; (800c3b8 <pvTaskIncrementMutexHeldCount+0x24>)
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d004      	beq.n	800c3aa <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800c3a0:	4b05      	ldr	r3, [pc, #20]	; (800c3b8 <pvTaskIncrementMutexHeldCount+0x24>)
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c3a6:	3201      	adds	r2, #1
 800c3a8:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800c3aa:	4b03      	ldr	r3, [pc, #12]	; (800c3b8 <pvTaskIncrementMutexHeldCount+0x24>)
 800c3ac:	681b      	ldr	r3, [r3, #0]
	}
 800c3ae:	4618      	mov	r0, r3
 800c3b0:	46bd      	mov	sp, r7
 800c3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3b6:	4770      	bx	lr
 800c3b8:	20000c48 	.word	0x20000c48

0800c3bc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c3bc:	b580      	push	{r7, lr}
 800c3be:	b084      	sub	sp, #16
 800c3c0:	af00      	add	r7, sp, #0
 800c3c2:	6078      	str	r0, [r7, #4]
 800c3c4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c3c6:	4b21      	ldr	r3, [pc, #132]	; (800c44c <prvAddCurrentTaskToDelayedList+0x90>)
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c3cc:	4b20      	ldr	r3, [pc, #128]	; (800c450 <prvAddCurrentTaskToDelayedList+0x94>)
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	3304      	adds	r3, #4
 800c3d2:	4618      	mov	r0, r3
 800c3d4:	f7fe f890 	bl	800a4f8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c3de:	d10a      	bne.n	800c3f6 <prvAddCurrentTaskToDelayedList+0x3a>
 800c3e0:	683b      	ldr	r3, [r7, #0]
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d007      	beq.n	800c3f6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c3e6:	4b1a      	ldr	r3, [pc, #104]	; (800c450 <prvAddCurrentTaskToDelayedList+0x94>)
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	3304      	adds	r3, #4
 800c3ec:	4619      	mov	r1, r3
 800c3ee:	4819      	ldr	r0, [pc, #100]	; (800c454 <prvAddCurrentTaskToDelayedList+0x98>)
 800c3f0:	f7fe f825 	bl	800a43e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c3f4:	e026      	b.n	800c444 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c3f6:	68fa      	ldr	r2, [r7, #12]
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	4413      	add	r3, r2
 800c3fc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c3fe:	4b14      	ldr	r3, [pc, #80]	; (800c450 <prvAddCurrentTaskToDelayedList+0x94>)
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	68ba      	ldr	r2, [r7, #8]
 800c404:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c406:	68ba      	ldr	r2, [r7, #8]
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	429a      	cmp	r2, r3
 800c40c:	d209      	bcs.n	800c422 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c40e:	4b12      	ldr	r3, [pc, #72]	; (800c458 <prvAddCurrentTaskToDelayedList+0x9c>)
 800c410:	681a      	ldr	r2, [r3, #0]
 800c412:	4b0f      	ldr	r3, [pc, #60]	; (800c450 <prvAddCurrentTaskToDelayedList+0x94>)
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	3304      	adds	r3, #4
 800c418:	4619      	mov	r1, r3
 800c41a:	4610      	mov	r0, r2
 800c41c:	f7fe f833 	bl	800a486 <vListInsert>
}
 800c420:	e010      	b.n	800c444 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c422:	4b0e      	ldr	r3, [pc, #56]	; (800c45c <prvAddCurrentTaskToDelayedList+0xa0>)
 800c424:	681a      	ldr	r2, [r3, #0]
 800c426:	4b0a      	ldr	r3, [pc, #40]	; (800c450 <prvAddCurrentTaskToDelayedList+0x94>)
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	3304      	adds	r3, #4
 800c42c:	4619      	mov	r1, r3
 800c42e:	4610      	mov	r0, r2
 800c430:	f7fe f829 	bl	800a486 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c434:	4b0a      	ldr	r3, [pc, #40]	; (800c460 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	68ba      	ldr	r2, [r7, #8]
 800c43a:	429a      	cmp	r2, r3
 800c43c:	d202      	bcs.n	800c444 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c43e:	4a08      	ldr	r2, [pc, #32]	; (800c460 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c440:	68bb      	ldr	r3, [r7, #8]
 800c442:	6013      	str	r3, [r2, #0]
}
 800c444:	bf00      	nop
 800c446:	3710      	adds	r7, #16
 800c448:	46bd      	mov	sp, r7
 800c44a:	bd80      	pop	{r7, pc}
 800c44c:	20001120 	.word	0x20001120
 800c450:	20000c48 	.word	0x20000c48
 800c454:	20001108 	.word	0x20001108
 800c458:	200010d8 	.word	0x200010d8
 800c45c:	200010d4 	.word	0x200010d4
 800c460:	2000113c 	.word	0x2000113c

0800c464 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c464:	b580      	push	{r7, lr}
 800c466:	b08a      	sub	sp, #40	; 0x28
 800c468:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c46a:	2300      	movs	r3, #0
 800c46c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c46e:	f000 fb07 	bl	800ca80 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c472:	4b1c      	ldr	r3, [pc, #112]	; (800c4e4 <xTimerCreateTimerTask+0x80>)
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	2b00      	cmp	r3, #0
 800c478:	d021      	beq.n	800c4be <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c47a:	2300      	movs	r3, #0
 800c47c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c47e:	2300      	movs	r3, #0
 800c480:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c482:	1d3a      	adds	r2, r7, #4
 800c484:	f107 0108 	add.w	r1, r7, #8
 800c488:	f107 030c 	add.w	r3, r7, #12
 800c48c:	4618      	mov	r0, r3
 800c48e:	f7fd ff8f 	bl	800a3b0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c492:	6879      	ldr	r1, [r7, #4]
 800c494:	68bb      	ldr	r3, [r7, #8]
 800c496:	68fa      	ldr	r2, [r7, #12]
 800c498:	9202      	str	r2, [sp, #8]
 800c49a:	9301      	str	r3, [sp, #4]
 800c49c:	2302      	movs	r3, #2
 800c49e:	9300      	str	r3, [sp, #0]
 800c4a0:	2300      	movs	r3, #0
 800c4a2:	460a      	mov	r2, r1
 800c4a4:	4910      	ldr	r1, [pc, #64]	; (800c4e8 <xTimerCreateTimerTask+0x84>)
 800c4a6:	4811      	ldr	r0, [pc, #68]	; (800c4ec <xTimerCreateTimerTask+0x88>)
 800c4a8:	f7fe ffd0 	bl	800b44c <xTaskCreateStatic>
 800c4ac:	4603      	mov	r3, r0
 800c4ae:	4a10      	ldr	r2, [pc, #64]	; (800c4f0 <xTimerCreateTimerTask+0x8c>)
 800c4b0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c4b2:	4b0f      	ldr	r3, [pc, #60]	; (800c4f0 <xTimerCreateTimerTask+0x8c>)
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d001      	beq.n	800c4be <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c4ba:	2301      	movs	r3, #1
 800c4bc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c4be:	697b      	ldr	r3, [r7, #20]
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d10a      	bne.n	800c4da <xTimerCreateTimerTask+0x76>
	__asm volatile
 800c4c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4c8:	f383 8811 	msr	BASEPRI, r3
 800c4cc:	f3bf 8f6f 	isb	sy
 800c4d0:	f3bf 8f4f 	dsb	sy
 800c4d4:	613b      	str	r3, [r7, #16]
}
 800c4d6:	bf00      	nop
 800c4d8:	e7fe      	b.n	800c4d8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800c4da:	697b      	ldr	r3, [r7, #20]
}
 800c4dc:	4618      	mov	r0, r3
 800c4de:	3718      	adds	r7, #24
 800c4e0:	46bd      	mov	sp, r7
 800c4e2:	bd80      	pop	{r7, pc}
 800c4e4:	20001178 	.word	0x20001178
 800c4e8:	08011aa4 	.word	0x08011aa4
 800c4ec:	0800c629 	.word	0x0800c629
 800c4f0:	2000117c 	.word	0x2000117c

0800c4f4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c4f4:	b580      	push	{r7, lr}
 800c4f6:	b08a      	sub	sp, #40	; 0x28
 800c4f8:	af00      	add	r7, sp, #0
 800c4fa:	60f8      	str	r0, [r7, #12]
 800c4fc:	60b9      	str	r1, [r7, #8]
 800c4fe:	607a      	str	r2, [r7, #4]
 800c500:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c502:	2300      	movs	r3, #0
 800c504:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d10a      	bne.n	800c522 <xTimerGenericCommand+0x2e>
	__asm volatile
 800c50c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c510:	f383 8811 	msr	BASEPRI, r3
 800c514:	f3bf 8f6f 	isb	sy
 800c518:	f3bf 8f4f 	dsb	sy
 800c51c:	623b      	str	r3, [r7, #32]
}
 800c51e:	bf00      	nop
 800c520:	e7fe      	b.n	800c520 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c522:	4b1a      	ldr	r3, [pc, #104]	; (800c58c <xTimerGenericCommand+0x98>)
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	2b00      	cmp	r3, #0
 800c528:	d02a      	beq.n	800c580 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c52a:	68bb      	ldr	r3, [r7, #8]
 800c52c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c532:	68fb      	ldr	r3, [r7, #12]
 800c534:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c536:	68bb      	ldr	r3, [r7, #8]
 800c538:	2b05      	cmp	r3, #5
 800c53a:	dc18      	bgt.n	800c56e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c53c:	f7ff fdb4 	bl	800c0a8 <xTaskGetSchedulerState>
 800c540:	4603      	mov	r3, r0
 800c542:	2b02      	cmp	r3, #2
 800c544:	d109      	bne.n	800c55a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c546:	4b11      	ldr	r3, [pc, #68]	; (800c58c <xTimerGenericCommand+0x98>)
 800c548:	6818      	ldr	r0, [r3, #0]
 800c54a:	f107 0110 	add.w	r1, r7, #16
 800c54e:	2300      	movs	r3, #0
 800c550:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c552:	f7fe f9ef 	bl	800a934 <xQueueGenericSend>
 800c556:	6278      	str	r0, [r7, #36]	; 0x24
 800c558:	e012      	b.n	800c580 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c55a:	4b0c      	ldr	r3, [pc, #48]	; (800c58c <xTimerGenericCommand+0x98>)
 800c55c:	6818      	ldr	r0, [r3, #0]
 800c55e:	f107 0110 	add.w	r1, r7, #16
 800c562:	2300      	movs	r3, #0
 800c564:	2200      	movs	r2, #0
 800c566:	f7fe f9e5 	bl	800a934 <xQueueGenericSend>
 800c56a:	6278      	str	r0, [r7, #36]	; 0x24
 800c56c:	e008      	b.n	800c580 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c56e:	4b07      	ldr	r3, [pc, #28]	; (800c58c <xTimerGenericCommand+0x98>)
 800c570:	6818      	ldr	r0, [r3, #0]
 800c572:	f107 0110 	add.w	r1, r7, #16
 800c576:	2300      	movs	r3, #0
 800c578:	683a      	ldr	r2, [r7, #0]
 800c57a:	f7fe fad9 	bl	800ab30 <xQueueGenericSendFromISR>
 800c57e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c582:	4618      	mov	r0, r3
 800c584:	3728      	adds	r7, #40	; 0x28
 800c586:	46bd      	mov	sp, r7
 800c588:	bd80      	pop	{r7, pc}
 800c58a:	bf00      	nop
 800c58c:	20001178 	.word	0x20001178

0800c590 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c590:	b580      	push	{r7, lr}
 800c592:	b088      	sub	sp, #32
 800c594:	af02      	add	r7, sp, #8
 800c596:	6078      	str	r0, [r7, #4]
 800c598:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c59a:	4b22      	ldr	r3, [pc, #136]	; (800c624 <prvProcessExpiredTimer+0x94>)
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	68db      	ldr	r3, [r3, #12]
 800c5a0:	68db      	ldr	r3, [r3, #12]
 800c5a2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c5a4:	697b      	ldr	r3, [r7, #20]
 800c5a6:	3304      	adds	r3, #4
 800c5a8:	4618      	mov	r0, r3
 800c5aa:	f7fd ffa5 	bl	800a4f8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c5ae:	697b      	ldr	r3, [r7, #20]
 800c5b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c5b4:	f003 0304 	and.w	r3, r3, #4
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d022      	beq.n	800c602 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c5bc:	697b      	ldr	r3, [r7, #20]
 800c5be:	699a      	ldr	r2, [r3, #24]
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	18d1      	adds	r1, r2, r3
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	683a      	ldr	r2, [r7, #0]
 800c5c8:	6978      	ldr	r0, [r7, #20]
 800c5ca:	f000 f8d1 	bl	800c770 <prvInsertTimerInActiveList>
 800c5ce:	4603      	mov	r3, r0
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d01f      	beq.n	800c614 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c5d4:	2300      	movs	r3, #0
 800c5d6:	9300      	str	r3, [sp, #0]
 800c5d8:	2300      	movs	r3, #0
 800c5da:	687a      	ldr	r2, [r7, #4]
 800c5dc:	2100      	movs	r1, #0
 800c5de:	6978      	ldr	r0, [r7, #20]
 800c5e0:	f7ff ff88 	bl	800c4f4 <xTimerGenericCommand>
 800c5e4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c5e6:	693b      	ldr	r3, [r7, #16]
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d113      	bne.n	800c614 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800c5ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5f0:	f383 8811 	msr	BASEPRI, r3
 800c5f4:	f3bf 8f6f 	isb	sy
 800c5f8:	f3bf 8f4f 	dsb	sy
 800c5fc:	60fb      	str	r3, [r7, #12]
}
 800c5fe:	bf00      	nop
 800c600:	e7fe      	b.n	800c600 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c602:	697b      	ldr	r3, [r7, #20]
 800c604:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c608:	f023 0301 	bic.w	r3, r3, #1
 800c60c:	b2da      	uxtb	r2, r3
 800c60e:	697b      	ldr	r3, [r7, #20]
 800c610:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c614:	697b      	ldr	r3, [r7, #20]
 800c616:	6a1b      	ldr	r3, [r3, #32]
 800c618:	6978      	ldr	r0, [r7, #20]
 800c61a:	4798      	blx	r3
}
 800c61c:	bf00      	nop
 800c61e:	3718      	adds	r7, #24
 800c620:	46bd      	mov	sp, r7
 800c622:	bd80      	pop	{r7, pc}
 800c624:	20001170 	.word	0x20001170

0800c628 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c628:	b580      	push	{r7, lr}
 800c62a:	b084      	sub	sp, #16
 800c62c:	af00      	add	r7, sp, #0
 800c62e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c630:	f107 0308 	add.w	r3, r7, #8
 800c634:	4618      	mov	r0, r3
 800c636:	f000 f857 	bl	800c6e8 <prvGetNextExpireTime>
 800c63a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c63c:	68bb      	ldr	r3, [r7, #8]
 800c63e:	4619      	mov	r1, r3
 800c640:	68f8      	ldr	r0, [r7, #12]
 800c642:	f000 f803 	bl	800c64c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c646:	f000 f8d5 	bl	800c7f4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c64a:	e7f1      	b.n	800c630 <prvTimerTask+0x8>

0800c64c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c64c:	b580      	push	{r7, lr}
 800c64e:	b084      	sub	sp, #16
 800c650:	af00      	add	r7, sp, #0
 800c652:	6078      	str	r0, [r7, #4]
 800c654:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c656:	f7ff f935 	bl	800b8c4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c65a:	f107 0308 	add.w	r3, r7, #8
 800c65e:	4618      	mov	r0, r3
 800c660:	f000 f866 	bl	800c730 <prvSampleTimeNow>
 800c664:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c666:	68bb      	ldr	r3, [r7, #8]
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d130      	bne.n	800c6ce <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c66c:	683b      	ldr	r3, [r7, #0]
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d10a      	bne.n	800c688 <prvProcessTimerOrBlockTask+0x3c>
 800c672:	687a      	ldr	r2, [r7, #4]
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	429a      	cmp	r2, r3
 800c678:	d806      	bhi.n	800c688 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c67a:	f7ff f931 	bl	800b8e0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c67e:	68f9      	ldr	r1, [r7, #12]
 800c680:	6878      	ldr	r0, [r7, #4]
 800c682:	f7ff ff85 	bl	800c590 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c686:	e024      	b.n	800c6d2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c688:	683b      	ldr	r3, [r7, #0]
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d008      	beq.n	800c6a0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c68e:	4b13      	ldr	r3, [pc, #76]	; (800c6dc <prvProcessTimerOrBlockTask+0x90>)
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	2b00      	cmp	r3, #0
 800c696:	d101      	bne.n	800c69c <prvProcessTimerOrBlockTask+0x50>
 800c698:	2301      	movs	r3, #1
 800c69a:	e000      	b.n	800c69e <prvProcessTimerOrBlockTask+0x52>
 800c69c:	2300      	movs	r3, #0
 800c69e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c6a0:	4b0f      	ldr	r3, [pc, #60]	; (800c6e0 <prvProcessTimerOrBlockTask+0x94>)
 800c6a2:	6818      	ldr	r0, [r3, #0]
 800c6a4:	687a      	ldr	r2, [r7, #4]
 800c6a6:	68fb      	ldr	r3, [r7, #12]
 800c6a8:	1ad3      	subs	r3, r2, r3
 800c6aa:	683a      	ldr	r2, [r7, #0]
 800c6ac:	4619      	mov	r1, r3
 800c6ae:	f7fe fe99 	bl	800b3e4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c6b2:	f7ff f915 	bl	800b8e0 <xTaskResumeAll>
 800c6b6:	4603      	mov	r3, r0
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d10a      	bne.n	800c6d2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c6bc:	4b09      	ldr	r3, [pc, #36]	; (800c6e4 <prvProcessTimerOrBlockTask+0x98>)
 800c6be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c6c2:	601a      	str	r2, [r3, #0]
 800c6c4:	f3bf 8f4f 	dsb	sy
 800c6c8:	f3bf 8f6f 	isb	sy
}
 800c6cc:	e001      	b.n	800c6d2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c6ce:	f7ff f907 	bl	800b8e0 <xTaskResumeAll>
}
 800c6d2:	bf00      	nop
 800c6d4:	3710      	adds	r7, #16
 800c6d6:	46bd      	mov	sp, r7
 800c6d8:	bd80      	pop	{r7, pc}
 800c6da:	bf00      	nop
 800c6dc:	20001174 	.word	0x20001174
 800c6e0:	20001178 	.word	0x20001178
 800c6e4:	e000ed04 	.word	0xe000ed04

0800c6e8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c6e8:	b480      	push	{r7}
 800c6ea:	b085      	sub	sp, #20
 800c6ec:	af00      	add	r7, sp, #0
 800c6ee:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c6f0:	4b0e      	ldr	r3, [pc, #56]	; (800c72c <prvGetNextExpireTime+0x44>)
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d101      	bne.n	800c6fe <prvGetNextExpireTime+0x16>
 800c6fa:	2201      	movs	r2, #1
 800c6fc:	e000      	b.n	800c700 <prvGetNextExpireTime+0x18>
 800c6fe:	2200      	movs	r2, #0
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d105      	bne.n	800c718 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c70c:	4b07      	ldr	r3, [pc, #28]	; (800c72c <prvGetNextExpireTime+0x44>)
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	68db      	ldr	r3, [r3, #12]
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	60fb      	str	r3, [r7, #12]
 800c716:	e001      	b.n	800c71c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c718:	2300      	movs	r3, #0
 800c71a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c71c:	68fb      	ldr	r3, [r7, #12]
}
 800c71e:	4618      	mov	r0, r3
 800c720:	3714      	adds	r7, #20
 800c722:	46bd      	mov	sp, r7
 800c724:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c728:	4770      	bx	lr
 800c72a:	bf00      	nop
 800c72c:	20001170 	.word	0x20001170

0800c730 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c730:	b580      	push	{r7, lr}
 800c732:	b084      	sub	sp, #16
 800c734:	af00      	add	r7, sp, #0
 800c736:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c738:	f7ff f970 	bl	800ba1c <xTaskGetTickCount>
 800c73c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c73e:	4b0b      	ldr	r3, [pc, #44]	; (800c76c <prvSampleTimeNow+0x3c>)
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	68fa      	ldr	r2, [r7, #12]
 800c744:	429a      	cmp	r2, r3
 800c746:	d205      	bcs.n	800c754 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c748:	f000 f936 	bl	800c9b8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	2201      	movs	r2, #1
 800c750:	601a      	str	r2, [r3, #0]
 800c752:	e002      	b.n	800c75a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	2200      	movs	r2, #0
 800c758:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c75a:	4a04      	ldr	r2, [pc, #16]	; (800c76c <prvSampleTimeNow+0x3c>)
 800c75c:	68fb      	ldr	r3, [r7, #12]
 800c75e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c760:	68fb      	ldr	r3, [r7, #12]
}
 800c762:	4618      	mov	r0, r3
 800c764:	3710      	adds	r7, #16
 800c766:	46bd      	mov	sp, r7
 800c768:	bd80      	pop	{r7, pc}
 800c76a:	bf00      	nop
 800c76c:	20001180 	.word	0x20001180

0800c770 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c770:	b580      	push	{r7, lr}
 800c772:	b086      	sub	sp, #24
 800c774:	af00      	add	r7, sp, #0
 800c776:	60f8      	str	r0, [r7, #12]
 800c778:	60b9      	str	r1, [r7, #8]
 800c77a:	607a      	str	r2, [r7, #4]
 800c77c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c77e:	2300      	movs	r3, #0
 800c780:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	68ba      	ldr	r2, [r7, #8]
 800c786:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	68fa      	ldr	r2, [r7, #12]
 800c78c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c78e:	68ba      	ldr	r2, [r7, #8]
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	429a      	cmp	r2, r3
 800c794:	d812      	bhi.n	800c7bc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c796:	687a      	ldr	r2, [r7, #4]
 800c798:	683b      	ldr	r3, [r7, #0]
 800c79a:	1ad2      	subs	r2, r2, r3
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	699b      	ldr	r3, [r3, #24]
 800c7a0:	429a      	cmp	r2, r3
 800c7a2:	d302      	bcc.n	800c7aa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c7a4:	2301      	movs	r3, #1
 800c7a6:	617b      	str	r3, [r7, #20]
 800c7a8:	e01b      	b.n	800c7e2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c7aa:	4b10      	ldr	r3, [pc, #64]	; (800c7ec <prvInsertTimerInActiveList+0x7c>)
 800c7ac:	681a      	ldr	r2, [r3, #0]
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	3304      	adds	r3, #4
 800c7b2:	4619      	mov	r1, r3
 800c7b4:	4610      	mov	r0, r2
 800c7b6:	f7fd fe66 	bl	800a486 <vListInsert>
 800c7ba:	e012      	b.n	800c7e2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c7bc:	687a      	ldr	r2, [r7, #4]
 800c7be:	683b      	ldr	r3, [r7, #0]
 800c7c0:	429a      	cmp	r2, r3
 800c7c2:	d206      	bcs.n	800c7d2 <prvInsertTimerInActiveList+0x62>
 800c7c4:	68ba      	ldr	r2, [r7, #8]
 800c7c6:	683b      	ldr	r3, [r7, #0]
 800c7c8:	429a      	cmp	r2, r3
 800c7ca:	d302      	bcc.n	800c7d2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c7cc:	2301      	movs	r3, #1
 800c7ce:	617b      	str	r3, [r7, #20]
 800c7d0:	e007      	b.n	800c7e2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c7d2:	4b07      	ldr	r3, [pc, #28]	; (800c7f0 <prvInsertTimerInActiveList+0x80>)
 800c7d4:	681a      	ldr	r2, [r3, #0]
 800c7d6:	68fb      	ldr	r3, [r7, #12]
 800c7d8:	3304      	adds	r3, #4
 800c7da:	4619      	mov	r1, r3
 800c7dc:	4610      	mov	r0, r2
 800c7de:	f7fd fe52 	bl	800a486 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c7e2:	697b      	ldr	r3, [r7, #20]
}
 800c7e4:	4618      	mov	r0, r3
 800c7e6:	3718      	adds	r7, #24
 800c7e8:	46bd      	mov	sp, r7
 800c7ea:	bd80      	pop	{r7, pc}
 800c7ec:	20001174 	.word	0x20001174
 800c7f0:	20001170 	.word	0x20001170

0800c7f4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c7f4:	b580      	push	{r7, lr}
 800c7f6:	b08e      	sub	sp, #56	; 0x38
 800c7f8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c7fa:	e0ca      	b.n	800c992 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	da18      	bge.n	800c834 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c802:	1d3b      	adds	r3, r7, #4
 800c804:	3304      	adds	r3, #4
 800c806:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d10a      	bne.n	800c824 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800c80e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c812:	f383 8811 	msr	BASEPRI, r3
 800c816:	f3bf 8f6f 	isb	sy
 800c81a:	f3bf 8f4f 	dsb	sy
 800c81e:	61fb      	str	r3, [r7, #28]
}
 800c820:	bf00      	nop
 800c822:	e7fe      	b.n	800c822 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c82a:	6850      	ldr	r0, [r2, #4]
 800c82c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c82e:	6892      	ldr	r2, [r2, #8]
 800c830:	4611      	mov	r1, r2
 800c832:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	2b00      	cmp	r3, #0
 800c838:	f2c0 80aa 	blt.w	800c990 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c83c:	68fb      	ldr	r3, [r7, #12]
 800c83e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c842:	695b      	ldr	r3, [r3, #20]
 800c844:	2b00      	cmp	r3, #0
 800c846:	d004      	beq.n	800c852 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c84a:	3304      	adds	r3, #4
 800c84c:	4618      	mov	r0, r3
 800c84e:	f7fd fe53 	bl	800a4f8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c852:	463b      	mov	r3, r7
 800c854:	4618      	mov	r0, r3
 800c856:	f7ff ff6b 	bl	800c730 <prvSampleTimeNow>
 800c85a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	2b09      	cmp	r3, #9
 800c860:	f200 8097 	bhi.w	800c992 <prvProcessReceivedCommands+0x19e>
 800c864:	a201      	add	r2, pc, #4	; (adr r2, 800c86c <prvProcessReceivedCommands+0x78>)
 800c866:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c86a:	bf00      	nop
 800c86c:	0800c895 	.word	0x0800c895
 800c870:	0800c895 	.word	0x0800c895
 800c874:	0800c895 	.word	0x0800c895
 800c878:	0800c909 	.word	0x0800c909
 800c87c:	0800c91d 	.word	0x0800c91d
 800c880:	0800c967 	.word	0x0800c967
 800c884:	0800c895 	.word	0x0800c895
 800c888:	0800c895 	.word	0x0800c895
 800c88c:	0800c909 	.word	0x0800c909
 800c890:	0800c91d 	.word	0x0800c91d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c896:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c89a:	f043 0301 	orr.w	r3, r3, #1
 800c89e:	b2da      	uxtb	r2, r3
 800c8a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c8a6:	68ba      	ldr	r2, [r7, #8]
 800c8a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8aa:	699b      	ldr	r3, [r3, #24]
 800c8ac:	18d1      	adds	r1, r2, r3
 800c8ae:	68bb      	ldr	r3, [r7, #8]
 800c8b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c8b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c8b4:	f7ff ff5c 	bl	800c770 <prvInsertTimerInActiveList>
 800c8b8:	4603      	mov	r3, r0
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d069      	beq.n	800c992 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c8be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8c0:	6a1b      	ldr	r3, [r3, #32]
 800c8c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c8c4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c8c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c8cc:	f003 0304 	and.w	r3, r3, #4
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d05e      	beq.n	800c992 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c8d4:	68ba      	ldr	r2, [r7, #8]
 800c8d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8d8:	699b      	ldr	r3, [r3, #24]
 800c8da:	441a      	add	r2, r3
 800c8dc:	2300      	movs	r3, #0
 800c8de:	9300      	str	r3, [sp, #0]
 800c8e0:	2300      	movs	r3, #0
 800c8e2:	2100      	movs	r1, #0
 800c8e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c8e6:	f7ff fe05 	bl	800c4f4 <xTimerGenericCommand>
 800c8ea:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c8ec:	6a3b      	ldr	r3, [r7, #32]
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d14f      	bne.n	800c992 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800c8f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8f6:	f383 8811 	msr	BASEPRI, r3
 800c8fa:	f3bf 8f6f 	isb	sy
 800c8fe:	f3bf 8f4f 	dsb	sy
 800c902:	61bb      	str	r3, [r7, #24]
}
 800c904:	bf00      	nop
 800c906:	e7fe      	b.n	800c906 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c90a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c90e:	f023 0301 	bic.w	r3, r3, #1
 800c912:	b2da      	uxtb	r2, r3
 800c914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c916:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800c91a:	e03a      	b.n	800c992 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c91c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c91e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c922:	f043 0301 	orr.w	r3, r3, #1
 800c926:	b2da      	uxtb	r2, r3
 800c928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c92a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c92e:	68ba      	ldr	r2, [r7, #8]
 800c930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c932:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c936:	699b      	ldr	r3, [r3, #24]
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d10a      	bne.n	800c952 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800c93c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c940:	f383 8811 	msr	BASEPRI, r3
 800c944:	f3bf 8f6f 	isb	sy
 800c948:	f3bf 8f4f 	dsb	sy
 800c94c:	617b      	str	r3, [r7, #20]
}
 800c94e:	bf00      	nop
 800c950:	e7fe      	b.n	800c950 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c954:	699a      	ldr	r2, [r3, #24]
 800c956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c958:	18d1      	adds	r1, r2, r3
 800c95a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c95c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c95e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c960:	f7ff ff06 	bl	800c770 <prvInsertTimerInActiveList>
					break;
 800c964:	e015      	b.n	800c992 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c968:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c96c:	f003 0302 	and.w	r3, r3, #2
 800c970:	2b00      	cmp	r3, #0
 800c972:	d103      	bne.n	800c97c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800c974:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c976:	f000 fbdb 	bl	800d130 <vPortFree>
 800c97a:	e00a      	b.n	800c992 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c97c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c97e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c982:	f023 0301 	bic.w	r3, r3, #1
 800c986:	b2da      	uxtb	r2, r3
 800c988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c98a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c98e:	e000      	b.n	800c992 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800c990:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c992:	4b08      	ldr	r3, [pc, #32]	; (800c9b4 <prvProcessReceivedCommands+0x1c0>)
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	1d39      	adds	r1, r7, #4
 800c998:	2200      	movs	r2, #0
 800c99a:	4618      	mov	r0, r3
 800c99c:	f7fe f964 	bl	800ac68 <xQueueReceive>
 800c9a0:	4603      	mov	r3, r0
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	f47f af2a 	bne.w	800c7fc <prvProcessReceivedCommands+0x8>
	}
}
 800c9a8:	bf00      	nop
 800c9aa:	bf00      	nop
 800c9ac:	3730      	adds	r7, #48	; 0x30
 800c9ae:	46bd      	mov	sp, r7
 800c9b0:	bd80      	pop	{r7, pc}
 800c9b2:	bf00      	nop
 800c9b4:	20001178 	.word	0x20001178

0800c9b8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c9b8:	b580      	push	{r7, lr}
 800c9ba:	b088      	sub	sp, #32
 800c9bc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c9be:	e048      	b.n	800ca52 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c9c0:	4b2d      	ldr	r3, [pc, #180]	; (800ca78 <prvSwitchTimerLists+0xc0>)
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	68db      	ldr	r3, [r3, #12]
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c9ca:	4b2b      	ldr	r3, [pc, #172]	; (800ca78 <prvSwitchTimerLists+0xc0>)
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	68db      	ldr	r3, [r3, #12]
 800c9d0:	68db      	ldr	r3, [r3, #12]
 800c9d2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	3304      	adds	r3, #4
 800c9d8:	4618      	mov	r0, r3
 800c9da:	f7fd fd8d 	bl	800a4f8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	6a1b      	ldr	r3, [r3, #32]
 800c9e2:	68f8      	ldr	r0, [r7, #12]
 800c9e4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c9ec:	f003 0304 	and.w	r3, r3, #4
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d02e      	beq.n	800ca52 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	699b      	ldr	r3, [r3, #24]
 800c9f8:	693a      	ldr	r2, [r7, #16]
 800c9fa:	4413      	add	r3, r2
 800c9fc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c9fe:	68ba      	ldr	r2, [r7, #8]
 800ca00:	693b      	ldr	r3, [r7, #16]
 800ca02:	429a      	cmp	r2, r3
 800ca04:	d90e      	bls.n	800ca24 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	68ba      	ldr	r2, [r7, #8]
 800ca0a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	68fa      	ldr	r2, [r7, #12]
 800ca10:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ca12:	4b19      	ldr	r3, [pc, #100]	; (800ca78 <prvSwitchTimerLists+0xc0>)
 800ca14:	681a      	ldr	r2, [r3, #0]
 800ca16:	68fb      	ldr	r3, [r7, #12]
 800ca18:	3304      	adds	r3, #4
 800ca1a:	4619      	mov	r1, r3
 800ca1c:	4610      	mov	r0, r2
 800ca1e:	f7fd fd32 	bl	800a486 <vListInsert>
 800ca22:	e016      	b.n	800ca52 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ca24:	2300      	movs	r3, #0
 800ca26:	9300      	str	r3, [sp, #0]
 800ca28:	2300      	movs	r3, #0
 800ca2a:	693a      	ldr	r2, [r7, #16]
 800ca2c:	2100      	movs	r1, #0
 800ca2e:	68f8      	ldr	r0, [r7, #12]
 800ca30:	f7ff fd60 	bl	800c4f4 <xTimerGenericCommand>
 800ca34:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d10a      	bne.n	800ca52 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800ca3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca40:	f383 8811 	msr	BASEPRI, r3
 800ca44:	f3bf 8f6f 	isb	sy
 800ca48:	f3bf 8f4f 	dsb	sy
 800ca4c:	603b      	str	r3, [r7, #0]
}
 800ca4e:	bf00      	nop
 800ca50:	e7fe      	b.n	800ca50 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ca52:	4b09      	ldr	r3, [pc, #36]	; (800ca78 <prvSwitchTimerLists+0xc0>)
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d1b1      	bne.n	800c9c0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ca5c:	4b06      	ldr	r3, [pc, #24]	; (800ca78 <prvSwitchTimerLists+0xc0>)
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ca62:	4b06      	ldr	r3, [pc, #24]	; (800ca7c <prvSwitchTimerLists+0xc4>)
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	4a04      	ldr	r2, [pc, #16]	; (800ca78 <prvSwitchTimerLists+0xc0>)
 800ca68:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ca6a:	4a04      	ldr	r2, [pc, #16]	; (800ca7c <prvSwitchTimerLists+0xc4>)
 800ca6c:	697b      	ldr	r3, [r7, #20]
 800ca6e:	6013      	str	r3, [r2, #0]
}
 800ca70:	bf00      	nop
 800ca72:	3718      	adds	r7, #24
 800ca74:	46bd      	mov	sp, r7
 800ca76:	bd80      	pop	{r7, pc}
 800ca78:	20001170 	.word	0x20001170
 800ca7c:	20001174 	.word	0x20001174

0800ca80 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ca80:	b580      	push	{r7, lr}
 800ca82:	b082      	sub	sp, #8
 800ca84:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ca86:	f000 f965 	bl	800cd54 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ca8a:	4b15      	ldr	r3, [pc, #84]	; (800cae0 <prvCheckForValidListAndQueue+0x60>)
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d120      	bne.n	800cad4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800ca92:	4814      	ldr	r0, [pc, #80]	; (800cae4 <prvCheckForValidListAndQueue+0x64>)
 800ca94:	f7fd fca6 	bl	800a3e4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ca98:	4813      	ldr	r0, [pc, #76]	; (800cae8 <prvCheckForValidListAndQueue+0x68>)
 800ca9a:	f7fd fca3 	bl	800a3e4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ca9e:	4b13      	ldr	r3, [pc, #76]	; (800caec <prvCheckForValidListAndQueue+0x6c>)
 800caa0:	4a10      	ldr	r2, [pc, #64]	; (800cae4 <prvCheckForValidListAndQueue+0x64>)
 800caa2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800caa4:	4b12      	ldr	r3, [pc, #72]	; (800caf0 <prvCheckForValidListAndQueue+0x70>)
 800caa6:	4a10      	ldr	r2, [pc, #64]	; (800cae8 <prvCheckForValidListAndQueue+0x68>)
 800caa8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800caaa:	2300      	movs	r3, #0
 800caac:	9300      	str	r3, [sp, #0]
 800caae:	4b11      	ldr	r3, [pc, #68]	; (800caf4 <prvCheckForValidListAndQueue+0x74>)
 800cab0:	4a11      	ldr	r2, [pc, #68]	; (800caf8 <prvCheckForValidListAndQueue+0x78>)
 800cab2:	2110      	movs	r1, #16
 800cab4:	200a      	movs	r0, #10
 800cab6:	f7fd fdb1 	bl	800a61c <xQueueGenericCreateStatic>
 800caba:	4603      	mov	r3, r0
 800cabc:	4a08      	ldr	r2, [pc, #32]	; (800cae0 <prvCheckForValidListAndQueue+0x60>)
 800cabe:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800cac0:	4b07      	ldr	r3, [pc, #28]	; (800cae0 <prvCheckForValidListAndQueue+0x60>)
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d005      	beq.n	800cad4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800cac8:	4b05      	ldr	r3, [pc, #20]	; (800cae0 <prvCheckForValidListAndQueue+0x60>)
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	490b      	ldr	r1, [pc, #44]	; (800cafc <prvCheckForValidListAndQueue+0x7c>)
 800cace:	4618      	mov	r0, r3
 800cad0:	f7fe fc5e 	bl	800b390 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cad4:	f000 f96e 	bl	800cdb4 <vPortExitCritical>
}
 800cad8:	bf00      	nop
 800cada:	46bd      	mov	sp, r7
 800cadc:	bd80      	pop	{r7, pc}
 800cade:	bf00      	nop
 800cae0:	20001178 	.word	0x20001178
 800cae4:	20001148 	.word	0x20001148
 800cae8:	2000115c 	.word	0x2000115c
 800caec:	20001170 	.word	0x20001170
 800caf0:	20001174 	.word	0x20001174
 800caf4:	20001224 	.word	0x20001224
 800caf8:	20001184 	.word	0x20001184
 800cafc:	08011aac 	.word	0x08011aac

0800cb00 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800cb00:	b480      	push	{r7}
 800cb02:	b085      	sub	sp, #20
 800cb04:	af00      	add	r7, sp, #0
 800cb06:	60f8      	str	r0, [r7, #12]
 800cb08:	60b9      	str	r1, [r7, #8]
 800cb0a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	3b04      	subs	r3, #4
 800cb10:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800cb12:	68fb      	ldr	r3, [r7, #12]
 800cb14:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800cb18:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cb1a:	68fb      	ldr	r3, [r7, #12]
 800cb1c:	3b04      	subs	r3, #4
 800cb1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800cb20:	68bb      	ldr	r3, [r7, #8]
 800cb22:	f023 0201 	bic.w	r2, r3, #1
 800cb26:	68fb      	ldr	r3, [r7, #12]
 800cb28:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	3b04      	subs	r3, #4
 800cb2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800cb30:	4a0c      	ldr	r2, [pc, #48]	; (800cb64 <pxPortInitialiseStack+0x64>)
 800cb32:	68fb      	ldr	r3, [r7, #12]
 800cb34:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800cb36:	68fb      	ldr	r3, [r7, #12]
 800cb38:	3b14      	subs	r3, #20
 800cb3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800cb3c:	687a      	ldr	r2, [r7, #4]
 800cb3e:	68fb      	ldr	r3, [r7, #12]
 800cb40:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800cb42:	68fb      	ldr	r3, [r7, #12]
 800cb44:	3b04      	subs	r3, #4
 800cb46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	f06f 0202 	mvn.w	r2, #2
 800cb4e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800cb50:	68fb      	ldr	r3, [r7, #12]
 800cb52:	3b20      	subs	r3, #32
 800cb54:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800cb56:	68fb      	ldr	r3, [r7, #12]
}
 800cb58:	4618      	mov	r0, r3
 800cb5a:	3714      	adds	r7, #20
 800cb5c:	46bd      	mov	sp, r7
 800cb5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb62:	4770      	bx	lr
 800cb64:	0800cb69 	.word	0x0800cb69

0800cb68 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800cb68:	b480      	push	{r7}
 800cb6a:	b085      	sub	sp, #20
 800cb6c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800cb6e:	2300      	movs	r3, #0
 800cb70:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800cb72:	4b12      	ldr	r3, [pc, #72]	; (800cbbc <prvTaskExitError+0x54>)
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb7a:	d00a      	beq.n	800cb92 <prvTaskExitError+0x2a>
	__asm volatile
 800cb7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb80:	f383 8811 	msr	BASEPRI, r3
 800cb84:	f3bf 8f6f 	isb	sy
 800cb88:	f3bf 8f4f 	dsb	sy
 800cb8c:	60fb      	str	r3, [r7, #12]
}
 800cb8e:	bf00      	nop
 800cb90:	e7fe      	b.n	800cb90 <prvTaskExitError+0x28>
	__asm volatile
 800cb92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb96:	f383 8811 	msr	BASEPRI, r3
 800cb9a:	f3bf 8f6f 	isb	sy
 800cb9e:	f3bf 8f4f 	dsb	sy
 800cba2:	60bb      	str	r3, [r7, #8]
}
 800cba4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800cba6:	bf00      	nop
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d0fc      	beq.n	800cba8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800cbae:	bf00      	nop
 800cbb0:	bf00      	nop
 800cbb2:	3714      	adds	r7, #20
 800cbb4:	46bd      	mov	sp, r7
 800cbb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbba:	4770      	bx	lr
 800cbbc:	2000001c 	.word	0x2000001c

0800cbc0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800cbc0:	4b07      	ldr	r3, [pc, #28]	; (800cbe0 <pxCurrentTCBConst2>)
 800cbc2:	6819      	ldr	r1, [r3, #0]
 800cbc4:	6808      	ldr	r0, [r1, #0]
 800cbc6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbca:	f380 8809 	msr	PSP, r0
 800cbce:	f3bf 8f6f 	isb	sy
 800cbd2:	f04f 0000 	mov.w	r0, #0
 800cbd6:	f380 8811 	msr	BASEPRI, r0
 800cbda:	4770      	bx	lr
 800cbdc:	f3af 8000 	nop.w

0800cbe0 <pxCurrentTCBConst2>:
 800cbe0:	20000c48 	.word	0x20000c48
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800cbe4:	bf00      	nop
 800cbe6:	bf00      	nop

0800cbe8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800cbe8:	4808      	ldr	r0, [pc, #32]	; (800cc0c <prvPortStartFirstTask+0x24>)
 800cbea:	6800      	ldr	r0, [r0, #0]
 800cbec:	6800      	ldr	r0, [r0, #0]
 800cbee:	f380 8808 	msr	MSP, r0
 800cbf2:	f04f 0000 	mov.w	r0, #0
 800cbf6:	f380 8814 	msr	CONTROL, r0
 800cbfa:	b662      	cpsie	i
 800cbfc:	b661      	cpsie	f
 800cbfe:	f3bf 8f4f 	dsb	sy
 800cc02:	f3bf 8f6f 	isb	sy
 800cc06:	df00      	svc	0
 800cc08:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800cc0a:	bf00      	nop
 800cc0c:	e000ed08 	.word	0xe000ed08

0800cc10 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800cc10:	b580      	push	{r7, lr}
 800cc12:	b086      	sub	sp, #24
 800cc14:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800cc16:	4b46      	ldr	r3, [pc, #280]	; (800cd30 <xPortStartScheduler+0x120>)
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	4a46      	ldr	r2, [pc, #280]	; (800cd34 <xPortStartScheduler+0x124>)
 800cc1c:	4293      	cmp	r3, r2
 800cc1e:	d10a      	bne.n	800cc36 <xPortStartScheduler+0x26>
	__asm volatile
 800cc20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc24:	f383 8811 	msr	BASEPRI, r3
 800cc28:	f3bf 8f6f 	isb	sy
 800cc2c:	f3bf 8f4f 	dsb	sy
 800cc30:	613b      	str	r3, [r7, #16]
}
 800cc32:	bf00      	nop
 800cc34:	e7fe      	b.n	800cc34 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800cc36:	4b3e      	ldr	r3, [pc, #248]	; (800cd30 <xPortStartScheduler+0x120>)
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	4a3f      	ldr	r2, [pc, #252]	; (800cd38 <xPortStartScheduler+0x128>)
 800cc3c:	4293      	cmp	r3, r2
 800cc3e:	d10a      	bne.n	800cc56 <xPortStartScheduler+0x46>
	__asm volatile
 800cc40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc44:	f383 8811 	msr	BASEPRI, r3
 800cc48:	f3bf 8f6f 	isb	sy
 800cc4c:	f3bf 8f4f 	dsb	sy
 800cc50:	60fb      	str	r3, [r7, #12]
}
 800cc52:	bf00      	nop
 800cc54:	e7fe      	b.n	800cc54 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800cc56:	4b39      	ldr	r3, [pc, #228]	; (800cd3c <xPortStartScheduler+0x12c>)
 800cc58:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800cc5a:	697b      	ldr	r3, [r7, #20]
 800cc5c:	781b      	ldrb	r3, [r3, #0]
 800cc5e:	b2db      	uxtb	r3, r3
 800cc60:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800cc62:	697b      	ldr	r3, [r7, #20]
 800cc64:	22ff      	movs	r2, #255	; 0xff
 800cc66:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800cc68:	697b      	ldr	r3, [r7, #20]
 800cc6a:	781b      	ldrb	r3, [r3, #0]
 800cc6c:	b2db      	uxtb	r3, r3
 800cc6e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800cc70:	78fb      	ldrb	r3, [r7, #3]
 800cc72:	b2db      	uxtb	r3, r3
 800cc74:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800cc78:	b2da      	uxtb	r2, r3
 800cc7a:	4b31      	ldr	r3, [pc, #196]	; (800cd40 <xPortStartScheduler+0x130>)
 800cc7c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800cc7e:	4b31      	ldr	r3, [pc, #196]	; (800cd44 <xPortStartScheduler+0x134>)
 800cc80:	2207      	movs	r2, #7
 800cc82:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cc84:	e009      	b.n	800cc9a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800cc86:	4b2f      	ldr	r3, [pc, #188]	; (800cd44 <xPortStartScheduler+0x134>)
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	3b01      	subs	r3, #1
 800cc8c:	4a2d      	ldr	r2, [pc, #180]	; (800cd44 <xPortStartScheduler+0x134>)
 800cc8e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800cc90:	78fb      	ldrb	r3, [r7, #3]
 800cc92:	b2db      	uxtb	r3, r3
 800cc94:	005b      	lsls	r3, r3, #1
 800cc96:	b2db      	uxtb	r3, r3
 800cc98:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cc9a:	78fb      	ldrb	r3, [r7, #3]
 800cc9c:	b2db      	uxtb	r3, r3
 800cc9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cca2:	2b80      	cmp	r3, #128	; 0x80
 800cca4:	d0ef      	beq.n	800cc86 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800cca6:	4b27      	ldr	r3, [pc, #156]	; (800cd44 <xPortStartScheduler+0x134>)
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	f1c3 0307 	rsb	r3, r3, #7
 800ccae:	2b04      	cmp	r3, #4
 800ccb0:	d00a      	beq.n	800ccc8 <xPortStartScheduler+0xb8>
	__asm volatile
 800ccb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccb6:	f383 8811 	msr	BASEPRI, r3
 800ccba:	f3bf 8f6f 	isb	sy
 800ccbe:	f3bf 8f4f 	dsb	sy
 800ccc2:	60bb      	str	r3, [r7, #8]
}
 800ccc4:	bf00      	nop
 800ccc6:	e7fe      	b.n	800ccc6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ccc8:	4b1e      	ldr	r3, [pc, #120]	; (800cd44 <xPortStartScheduler+0x134>)
 800ccca:	681b      	ldr	r3, [r3, #0]
 800cccc:	021b      	lsls	r3, r3, #8
 800ccce:	4a1d      	ldr	r2, [pc, #116]	; (800cd44 <xPortStartScheduler+0x134>)
 800ccd0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ccd2:	4b1c      	ldr	r3, [pc, #112]	; (800cd44 <xPortStartScheduler+0x134>)
 800ccd4:	681b      	ldr	r3, [r3, #0]
 800ccd6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ccda:	4a1a      	ldr	r2, [pc, #104]	; (800cd44 <xPortStartScheduler+0x134>)
 800ccdc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	b2da      	uxtb	r2, r3
 800cce2:	697b      	ldr	r3, [r7, #20]
 800cce4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800cce6:	4b18      	ldr	r3, [pc, #96]	; (800cd48 <xPortStartScheduler+0x138>)
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	4a17      	ldr	r2, [pc, #92]	; (800cd48 <xPortStartScheduler+0x138>)
 800ccec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ccf0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ccf2:	4b15      	ldr	r3, [pc, #84]	; (800cd48 <xPortStartScheduler+0x138>)
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	4a14      	ldr	r2, [pc, #80]	; (800cd48 <xPortStartScheduler+0x138>)
 800ccf8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ccfc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ccfe:	f000 f8dd 	bl	800cebc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800cd02:	4b12      	ldr	r3, [pc, #72]	; (800cd4c <xPortStartScheduler+0x13c>)
 800cd04:	2200      	movs	r2, #0
 800cd06:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800cd08:	f000 f8fc 	bl	800cf04 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800cd0c:	4b10      	ldr	r3, [pc, #64]	; (800cd50 <xPortStartScheduler+0x140>)
 800cd0e:	681b      	ldr	r3, [r3, #0]
 800cd10:	4a0f      	ldr	r2, [pc, #60]	; (800cd50 <xPortStartScheduler+0x140>)
 800cd12:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800cd16:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800cd18:	f7ff ff66 	bl	800cbe8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800cd1c:	f7fe ff48 	bl	800bbb0 <vTaskSwitchContext>
	prvTaskExitError();
 800cd20:	f7ff ff22 	bl	800cb68 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800cd24:	2300      	movs	r3, #0
}
 800cd26:	4618      	mov	r0, r3
 800cd28:	3718      	adds	r7, #24
 800cd2a:	46bd      	mov	sp, r7
 800cd2c:	bd80      	pop	{r7, pc}
 800cd2e:	bf00      	nop
 800cd30:	e000ed00 	.word	0xe000ed00
 800cd34:	410fc271 	.word	0x410fc271
 800cd38:	410fc270 	.word	0x410fc270
 800cd3c:	e000e400 	.word	0xe000e400
 800cd40:	20001274 	.word	0x20001274
 800cd44:	20001278 	.word	0x20001278
 800cd48:	e000ed20 	.word	0xe000ed20
 800cd4c:	2000001c 	.word	0x2000001c
 800cd50:	e000ef34 	.word	0xe000ef34

0800cd54 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800cd54:	b480      	push	{r7}
 800cd56:	b083      	sub	sp, #12
 800cd58:	af00      	add	r7, sp, #0
	__asm volatile
 800cd5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd5e:	f383 8811 	msr	BASEPRI, r3
 800cd62:	f3bf 8f6f 	isb	sy
 800cd66:	f3bf 8f4f 	dsb	sy
 800cd6a:	607b      	str	r3, [r7, #4]
}
 800cd6c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800cd6e:	4b0f      	ldr	r3, [pc, #60]	; (800cdac <vPortEnterCritical+0x58>)
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	3301      	adds	r3, #1
 800cd74:	4a0d      	ldr	r2, [pc, #52]	; (800cdac <vPortEnterCritical+0x58>)
 800cd76:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800cd78:	4b0c      	ldr	r3, [pc, #48]	; (800cdac <vPortEnterCritical+0x58>)
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	2b01      	cmp	r3, #1
 800cd7e:	d10f      	bne.n	800cda0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800cd80:	4b0b      	ldr	r3, [pc, #44]	; (800cdb0 <vPortEnterCritical+0x5c>)
 800cd82:	681b      	ldr	r3, [r3, #0]
 800cd84:	b2db      	uxtb	r3, r3
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d00a      	beq.n	800cda0 <vPortEnterCritical+0x4c>
	__asm volatile
 800cd8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd8e:	f383 8811 	msr	BASEPRI, r3
 800cd92:	f3bf 8f6f 	isb	sy
 800cd96:	f3bf 8f4f 	dsb	sy
 800cd9a:	603b      	str	r3, [r7, #0]
}
 800cd9c:	bf00      	nop
 800cd9e:	e7fe      	b.n	800cd9e <vPortEnterCritical+0x4a>
	}
}
 800cda0:	bf00      	nop
 800cda2:	370c      	adds	r7, #12
 800cda4:	46bd      	mov	sp, r7
 800cda6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdaa:	4770      	bx	lr
 800cdac:	2000001c 	.word	0x2000001c
 800cdb0:	e000ed04 	.word	0xe000ed04

0800cdb4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800cdb4:	b480      	push	{r7}
 800cdb6:	b083      	sub	sp, #12
 800cdb8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800cdba:	4b12      	ldr	r3, [pc, #72]	; (800ce04 <vPortExitCritical+0x50>)
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d10a      	bne.n	800cdd8 <vPortExitCritical+0x24>
	__asm volatile
 800cdc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdc6:	f383 8811 	msr	BASEPRI, r3
 800cdca:	f3bf 8f6f 	isb	sy
 800cdce:	f3bf 8f4f 	dsb	sy
 800cdd2:	607b      	str	r3, [r7, #4]
}
 800cdd4:	bf00      	nop
 800cdd6:	e7fe      	b.n	800cdd6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800cdd8:	4b0a      	ldr	r3, [pc, #40]	; (800ce04 <vPortExitCritical+0x50>)
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	3b01      	subs	r3, #1
 800cdde:	4a09      	ldr	r2, [pc, #36]	; (800ce04 <vPortExitCritical+0x50>)
 800cde0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800cde2:	4b08      	ldr	r3, [pc, #32]	; (800ce04 <vPortExitCritical+0x50>)
 800cde4:	681b      	ldr	r3, [r3, #0]
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d105      	bne.n	800cdf6 <vPortExitCritical+0x42>
 800cdea:	2300      	movs	r3, #0
 800cdec:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cdee:	683b      	ldr	r3, [r7, #0]
 800cdf0:	f383 8811 	msr	BASEPRI, r3
}
 800cdf4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800cdf6:	bf00      	nop
 800cdf8:	370c      	adds	r7, #12
 800cdfa:	46bd      	mov	sp, r7
 800cdfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce00:	4770      	bx	lr
 800ce02:	bf00      	nop
 800ce04:	2000001c 	.word	0x2000001c
	...

0800ce10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ce10:	f3ef 8009 	mrs	r0, PSP
 800ce14:	f3bf 8f6f 	isb	sy
 800ce18:	4b15      	ldr	r3, [pc, #84]	; (800ce70 <pxCurrentTCBConst>)
 800ce1a:	681a      	ldr	r2, [r3, #0]
 800ce1c:	f01e 0f10 	tst.w	lr, #16
 800ce20:	bf08      	it	eq
 800ce22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ce26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce2a:	6010      	str	r0, [r2, #0]
 800ce2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ce30:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ce34:	f380 8811 	msr	BASEPRI, r0
 800ce38:	f3bf 8f4f 	dsb	sy
 800ce3c:	f3bf 8f6f 	isb	sy
 800ce40:	f7fe feb6 	bl	800bbb0 <vTaskSwitchContext>
 800ce44:	f04f 0000 	mov.w	r0, #0
 800ce48:	f380 8811 	msr	BASEPRI, r0
 800ce4c:	bc09      	pop	{r0, r3}
 800ce4e:	6819      	ldr	r1, [r3, #0]
 800ce50:	6808      	ldr	r0, [r1, #0]
 800ce52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce56:	f01e 0f10 	tst.w	lr, #16
 800ce5a:	bf08      	it	eq
 800ce5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ce60:	f380 8809 	msr	PSP, r0
 800ce64:	f3bf 8f6f 	isb	sy
 800ce68:	4770      	bx	lr
 800ce6a:	bf00      	nop
 800ce6c:	f3af 8000 	nop.w

0800ce70 <pxCurrentTCBConst>:
 800ce70:	20000c48 	.word	0x20000c48
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ce74:	bf00      	nop
 800ce76:	bf00      	nop

0800ce78 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ce78:	b580      	push	{r7, lr}
 800ce7a:	b082      	sub	sp, #8
 800ce7c:	af00      	add	r7, sp, #0
	__asm volatile
 800ce7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce82:	f383 8811 	msr	BASEPRI, r3
 800ce86:	f3bf 8f6f 	isb	sy
 800ce8a:	f3bf 8f4f 	dsb	sy
 800ce8e:	607b      	str	r3, [r7, #4]
}
 800ce90:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ce92:	f7fe fdd3 	bl	800ba3c <xTaskIncrementTick>
 800ce96:	4603      	mov	r3, r0
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d003      	beq.n	800cea4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ce9c:	4b06      	ldr	r3, [pc, #24]	; (800ceb8 <xPortSysTickHandler+0x40>)
 800ce9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cea2:	601a      	str	r2, [r3, #0]
 800cea4:	2300      	movs	r3, #0
 800cea6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cea8:	683b      	ldr	r3, [r7, #0]
 800ceaa:	f383 8811 	msr	BASEPRI, r3
}
 800ceae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ceb0:	bf00      	nop
 800ceb2:	3708      	adds	r7, #8
 800ceb4:	46bd      	mov	sp, r7
 800ceb6:	bd80      	pop	{r7, pc}
 800ceb8:	e000ed04 	.word	0xe000ed04

0800cebc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800cebc:	b480      	push	{r7}
 800cebe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800cec0:	4b0b      	ldr	r3, [pc, #44]	; (800cef0 <vPortSetupTimerInterrupt+0x34>)
 800cec2:	2200      	movs	r2, #0
 800cec4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800cec6:	4b0b      	ldr	r3, [pc, #44]	; (800cef4 <vPortSetupTimerInterrupt+0x38>)
 800cec8:	2200      	movs	r2, #0
 800ceca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800cecc:	4b0a      	ldr	r3, [pc, #40]	; (800cef8 <vPortSetupTimerInterrupt+0x3c>)
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	4a0a      	ldr	r2, [pc, #40]	; (800cefc <vPortSetupTimerInterrupt+0x40>)
 800ced2:	fba2 2303 	umull	r2, r3, r2, r3
 800ced6:	099b      	lsrs	r3, r3, #6
 800ced8:	4a09      	ldr	r2, [pc, #36]	; (800cf00 <vPortSetupTimerInterrupt+0x44>)
 800ceda:	3b01      	subs	r3, #1
 800cedc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800cede:	4b04      	ldr	r3, [pc, #16]	; (800cef0 <vPortSetupTimerInterrupt+0x34>)
 800cee0:	2207      	movs	r2, #7
 800cee2:	601a      	str	r2, [r3, #0]
}
 800cee4:	bf00      	nop
 800cee6:	46bd      	mov	sp, r7
 800cee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceec:	4770      	bx	lr
 800ceee:	bf00      	nop
 800cef0:	e000e010 	.word	0xe000e010
 800cef4:	e000e018 	.word	0xe000e018
 800cef8:	20000010 	.word	0x20000010
 800cefc:	10624dd3 	.word	0x10624dd3
 800cf00:	e000e014 	.word	0xe000e014

0800cf04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800cf04:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800cf14 <vPortEnableVFP+0x10>
 800cf08:	6801      	ldr	r1, [r0, #0]
 800cf0a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800cf0e:	6001      	str	r1, [r0, #0]
 800cf10:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800cf12:	bf00      	nop
 800cf14:	e000ed88 	.word	0xe000ed88

0800cf18 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800cf18:	b480      	push	{r7}
 800cf1a:	b085      	sub	sp, #20
 800cf1c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800cf1e:	f3ef 8305 	mrs	r3, IPSR
 800cf22:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800cf24:	68fb      	ldr	r3, [r7, #12]
 800cf26:	2b0f      	cmp	r3, #15
 800cf28:	d914      	bls.n	800cf54 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800cf2a:	4a17      	ldr	r2, [pc, #92]	; (800cf88 <vPortValidateInterruptPriority+0x70>)
 800cf2c:	68fb      	ldr	r3, [r7, #12]
 800cf2e:	4413      	add	r3, r2
 800cf30:	781b      	ldrb	r3, [r3, #0]
 800cf32:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800cf34:	4b15      	ldr	r3, [pc, #84]	; (800cf8c <vPortValidateInterruptPriority+0x74>)
 800cf36:	781b      	ldrb	r3, [r3, #0]
 800cf38:	7afa      	ldrb	r2, [r7, #11]
 800cf3a:	429a      	cmp	r2, r3
 800cf3c:	d20a      	bcs.n	800cf54 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800cf3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf42:	f383 8811 	msr	BASEPRI, r3
 800cf46:	f3bf 8f6f 	isb	sy
 800cf4a:	f3bf 8f4f 	dsb	sy
 800cf4e:	607b      	str	r3, [r7, #4]
}
 800cf50:	bf00      	nop
 800cf52:	e7fe      	b.n	800cf52 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800cf54:	4b0e      	ldr	r3, [pc, #56]	; (800cf90 <vPortValidateInterruptPriority+0x78>)
 800cf56:	681b      	ldr	r3, [r3, #0]
 800cf58:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800cf5c:	4b0d      	ldr	r3, [pc, #52]	; (800cf94 <vPortValidateInterruptPriority+0x7c>)
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	429a      	cmp	r2, r3
 800cf62:	d90a      	bls.n	800cf7a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800cf64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf68:	f383 8811 	msr	BASEPRI, r3
 800cf6c:	f3bf 8f6f 	isb	sy
 800cf70:	f3bf 8f4f 	dsb	sy
 800cf74:	603b      	str	r3, [r7, #0]
}
 800cf76:	bf00      	nop
 800cf78:	e7fe      	b.n	800cf78 <vPortValidateInterruptPriority+0x60>
	}
 800cf7a:	bf00      	nop
 800cf7c:	3714      	adds	r7, #20
 800cf7e:	46bd      	mov	sp, r7
 800cf80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf84:	4770      	bx	lr
 800cf86:	bf00      	nop
 800cf88:	e000e3f0 	.word	0xe000e3f0
 800cf8c:	20001274 	.word	0x20001274
 800cf90:	e000ed0c 	.word	0xe000ed0c
 800cf94:	20001278 	.word	0x20001278

0800cf98 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800cf98:	b580      	push	{r7, lr}
 800cf9a:	b08a      	sub	sp, #40	; 0x28
 800cf9c:	af00      	add	r7, sp, #0
 800cf9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800cfa0:	2300      	movs	r3, #0
 800cfa2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800cfa4:	f7fe fc8e 	bl	800b8c4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800cfa8:	4b5b      	ldr	r3, [pc, #364]	; (800d118 <pvPortMalloc+0x180>)
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d101      	bne.n	800cfb4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800cfb0:	f000 f920 	bl	800d1f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800cfb4:	4b59      	ldr	r3, [pc, #356]	; (800d11c <pvPortMalloc+0x184>)
 800cfb6:	681a      	ldr	r2, [r3, #0]
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	4013      	ands	r3, r2
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	f040 8093 	bne.w	800d0e8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d01d      	beq.n	800d004 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800cfc8:	2208      	movs	r2, #8
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	4413      	add	r3, r2
 800cfce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	f003 0307 	and.w	r3, r3, #7
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d014      	beq.n	800d004 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	f023 0307 	bic.w	r3, r3, #7
 800cfe0:	3308      	adds	r3, #8
 800cfe2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	f003 0307 	and.w	r3, r3, #7
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d00a      	beq.n	800d004 <pvPortMalloc+0x6c>
	__asm volatile
 800cfee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cff2:	f383 8811 	msr	BASEPRI, r3
 800cff6:	f3bf 8f6f 	isb	sy
 800cffa:	f3bf 8f4f 	dsb	sy
 800cffe:	617b      	str	r3, [r7, #20]
}
 800d000:	bf00      	nop
 800d002:	e7fe      	b.n	800d002 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	2b00      	cmp	r3, #0
 800d008:	d06e      	beq.n	800d0e8 <pvPortMalloc+0x150>
 800d00a:	4b45      	ldr	r3, [pc, #276]	; (800d120 <pvPortMalloc+0x188>)
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	687a      	ldr	r2, [r7, #4]
 800d010:	429a      	cmp	r2, r3
 800d012:	d869      	bhi.n	800d0e8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d014:	4b43      	ldr	r3, [pc, #268]	; (800d124 <pvPortMalloc+0x18c>)
 800d016:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d018:	4b42      	ldr	r3, [pc, #264]	; (800d124 <pvPortMalloc+0x18c>)
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d01e:	e004      	b.n	800d02a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800d020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d022:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d026:	681b      	ldr	r3, [r3, #0]
 800d028:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d02a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d02c:	685b      	ldr	r3, [r3, #4]
 800d02e:	687a      	ldr	r2, [r7, #4]
 800d030:	429a      	cmp	r2, r3
 800d032:	d903      	bls.n	800d03c <pvPortMalloc+0xa4>
 800d034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d036:	681b      	ldr	r3, [r3, #0]
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d1f1      	bne.n	800d020 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d03c:	4b36      	ldr	r3, [pc, #216]	; (800d118 <pvPortMalloc+0x180>)
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d042:	429a      	cmp	r2, r3
 800d044:	d050      	beq.n	800d0e8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d046:	6a3b      	ldr	r3, [r7, #32]
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	2208      	movs	r2, #8
 800d04c:	4413      	add	r3, r2
 800d04e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d052:	681a      	ldr	r2, [r3, #0]
 800d054:	6a3b      	ldr	r3, [r7, #32]
 800d056:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d05a:	685a      	ldr	r2, [r3, #4]
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	1ad2      	subs	r2, r2, r3
 800d060:	2308      	movs	r3, #8
 800d062:	005b      	lsls	r3, r3, #1
 800d064:	429a      	cmp	r2, r3
 800d066:	d91f      	bls.n	800d0a8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d068:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	4413      	add	r3, r2
 800d06e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d070:	69bb      	ldr	r3, [r7, #24]
 800d072:	f003 0307 	and.w	r3, r3, #7
 800d076:	2b00      	cmp	r3, #0
 800d078:	d00a      	beq.n	800d090 <pvPortMalloc+0xf8>
	__asm volatile
 800d07a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d07e:	f383 8811 	msr	BASEPRI, r3
 800d082:	f3bf 8f6f 	isb	sy
 800d086:	f3bf 8f4f 	dsb	sy
 800d08a:	613b      	str	r3, [r7, #16]
}
 800d08c:	bf00      	nop
 800d08e:	e7fe      	b.n	800d08e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d092:	685a      	ldr	r2, [r3, #4]
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	1ad2      	subs	r2, r2, r3
 800d098:	69bb      	ldr	r3, [r7, #24]
 800d09a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d09c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d09e:	687a      	ldr	r2, [r7, #4]
 800d0a0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d0a2:	69b8      	ldr	r0, [r7, #24]
 800d0a4:	f000 f908 	bl	800d2b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d0a8:	4b1d      	ldr	r3, [pc, #116]	; (800d120 <pvPortMalloc+0x188>)
 800d0aa:	681a      	ldr	r2, [r3, #0]
 800d0ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0ae:	685b      	ldr	r3, [r3, #4]
 800d0b0:	1ad3      	subs	r3, r2, r3
 800d0b2:	4a1b      	ldr	r2, [pc, #108]	; (800d120 <pvPortMalloc+0x188>)
 800d0b4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d0b6:	4b1a      	ldr	r3, [pc, #104]	; (800d120 <pvPortMalloc+0x188>)
 800d0b8:	681a      	ldr	r2, [r3, #0]
 800d0ba:	4b1b      	ldr	r3, [pc, #108]	; (800d128 <pvPortMalloc+0x190>)
 800d0bc:	681b      	ldr	r3, [r3, #0]
 800d0be:	429a      	cmp	r2, r3
 800d0c0:	d203      	bcs.n	800d0ca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d0c2:	4b17      	ldr	r3, [pc, #92]	; (800d120 <pvPortMalloc+0x188>)
 800d0c4:	681b      	ldr	r3, [r3, #0]
 800d0c6:	4a18      	ldr	r2, [pc, #96]	; (800d128 <pvPortMalloc+0x190>)
 800d0c8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d0ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0cc:	685a      	ldr	r2, [r3, #4]
 800d0ce:	4b13      	ldr	r3, [pc, #76]	; (800d11c <pvPortMalloc+0x184>)
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	431a      	orrs	r2, r3
 800d0d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0d6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d0d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0da:	2200      	movs	r2, #0
 800d0dc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d0de:	4b13      	ldr	r3, [pc, #76]	; (800d12c <pvPortMalloc+0x194>)
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	3301      	adds	r3, #1
 800d0e4:	4a11      	ldr	r2, [pc, #68]	; (800d12c <pvPortMalloc+0x194>)
 800d0e6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d0e8:	f7fe fbfa 	bl	800b8e0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d0ec:	69fb      	ldr	r3, [r7, #28]
 800d0ee:	f003 0307 	and.w	r3, r3, #7
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	d00a      	beq.n	800d10c <pvPortMalloc+0x174>
	__asm volatile
 800d0f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0fa:	f383 8811 	msr	BASEPRI, r3
 800d0fe:	f3bf 8f6f 	isb	sy
 800d102:	f3bf 8f4f 	dsb	sy
 800d106:	60fb      	str	r3, [r7, #12]
}
 800d108:	bf00      	nop
 800d10a:	e7fe      	b.n	800d10a <pvPortMalloc+0x172>
	return pvReturn;
 800d10c:	69fb      	ldr	r3, [r7, #28]
}
 800d10e:	4618      	mov	r0, r3
 800d110:	3728      	adds	r7, #40	; 0x28
 800d112:	46bd      	mov	sp, r7
 800d114:	bd80      	pop	{r7, pc}
 800d116:	bf00      	nop
 800d118:	20006284 	.word	0x20006284
 800d11c:	20006298 	.word	0x20006298
 800d120:	20006288 	.word	0x20006288
 800d124:	2000627c 	.word	0x2000627c
 800d128:	2000628c 	.word	0x2000628c
 800d12c:	20006290 	.word	0x20006290

0800d130 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d130:	b580      	push	{r7, lr}
 800d132:	b086      	sub	sp, #24
 800d134:	af00      	add	r7, sp, #0
 800d136:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d04d      	beq.n	800d1de <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d142:	2308      	movs	r3, #8
 800d144:	425b      	negs	r3, r3
 800d146:	697a      	ldr	r2, [r7, #20]
 800d148:	4413      	add	r3, r2
 800d14a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d14c:	697b      	ldr	r3, [r7, #20]
 800d14e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d150:	693b      	ldr	r3, [r7, #16]
 800d152:	685a      	ldr	r2, [r3, #4]
 800d154:	4b24      	ldr	r3, [pc, #144]	; (800d1e8 <vPortFree+0xb8>)
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	4013      	ands	r3, r2
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	d10a      	bne.n	800d174 <vPortFree+0x44>
	__asm volatile
 800d15e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d162:	f383 8811 	msr	BASEPRI, r3
 800d166:	f3bf 8f6f 	isb	sy
 800d16a:	f3bf 8f4f 	dsb	sy
 800d16e:	60fb      	str	r3, [r7, #12]
}
 800d170:	bf00      	nop
 800d172:	e7fe      	b.n	800d172 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d174:	693b      	ldr	r3, [r7, #16]
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d00a      	beq.n	800d192 <vPortFree+0x62>
	__asm volatile
 800d17c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d180:	f383 8811 	msr	BASEPRI, r3
 800d184:	f3bf 8f6f 	isb	sy
 800d188:	f3bf 8f4f 	dsb	sy
 800d18c:	60bb      	str	r3, [r7, #8]
}
 800d18e:	bf00      	nop
 800d190:	e7fe      	b.n	800d190 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d192:	693b      	ldr	r3, [r7, #16]
 800d194:	685a      	ldr	r2, [r3, #4]
 800d196:	4b14      	ldr	r3, [pc, #80]	; (800d1e8 <vPortFree+0xb8>)
 800d198:	681b      	ldr	r3, [r3, #0]
 800d19a:	4013      	ands	r3, r2
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d01e      	beq.n	800d1de <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d1a0:	693b      	ldr	r3, [r7, #16]
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d11a      	bne.n	800d1de <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d1a8:	693b      	ldr	r3, [r7, #16]
 800d1aa:	685a      	ldr	r2, [r3, #4]
 800d1ac:	4b0e      	ldr	r3, [pc, #56]	; (800d1e8 <vPortFree+0xb8>)
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	43db      	mvns	r3, r3
 800d1b2:	401a      	ands	r2, r3
 800d1b4:	693b      	ldr	r3, [r7, #16]
 800d1b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d1b8:	f7fe fb84 	bl	800b8c4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d1bc:	693b      	ldr	r3, [r7, #16]
 800d1be:	685a      	ldr	r2, [r3, #4]
 800d1c0:	4b0a      	ldr	r3, [pc, #40]	; (800d1ec <vPortFree+0xbc>)
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	4413      	add	r3, r2
 800d1c6:	4a09      	ldr	r2, [pc, #36]	; (800d1ec <vPortFree+0xbc>)
 800d1c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d1ca:	6938      	ldr	r0, [r7, #16]
 800d1cc:	f000 f874 	bl	800d2b8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d1d0:	4b07      	ldr	r3, [pc, #28]	; (800d1f0 <vPortFree+0xc0>)
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	3301      	adds	r3, #1
 800d1d6:	4a06      	ldr	r2, [pc, #24]	; (800d1f0 <vPortFree+0xc0>)
 800d1d8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d1da:	f7fe fb81 	bl	800b8e0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d1de:	bf00      	nop
 800d1e0:	3718      	adds	r7, #24
 800d1e2:	46bd      	mov	sp, r7
 800d1e4:	bd80      	pop	{r7, pc}
 800d1e6:	bf00      	nop
 800d1e8:	20006298 	.word	0x20006298
 800d1ec:	20006288 	.word	0x20006288
 800d1f0:	20006294 	.word	0x20006294

0800d1f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d1f4:	b480      	push	{r7}
 800d1f6:	b085      	sub	sp, #20
 800d1f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d1fa:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 800d1fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d200:	4b27      	ldr	r3, [pc, #156]	; (800d2a0 <prvHeapInit+0xac>)
 800d202:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d204:	68fb      	ldr	r3, [r7, #12]
 800d206:	f003 0307 	and.w	r3, r3, #7
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	d00c      	beq.n	800d228 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	3307      	adds	r3, #7
 800d212:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	f023 0307 	bic.w	r3, r3, #7
 800d21a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d21c:	68ba      	ldr	r2, [r7, #8]
 800d21e:	68fb      	ldr	r3, [r7, #12]
 800d220:	1ad3      	subs	r3, r2, r3
 800d222:	4a1f      	ldr	r2, [pc, #124]	; (800d2a0 <prvHeapInit+0xac>)
 800d224:	4413      	add	r3, r2
 800d226:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d228:	68fb      	ldr	r3, [r7, #12]
 800d22a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d22c:	4a1d      	ldr	r2, [pc, #116]	; (800d2a4 <prvHeapInit+0xb0>)
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d232:	4b1c      	ldr	r3, [pc, #112]	; (800d2a4 <prvHeapInit+0xb0>)
 800d234:	2200      	movs	r2, #0
 800d236:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	68ba      	ldr	r2, [r7, #8]
 800d23c:	4413      	add	r3, r2
 800d23e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d240:	2208      	movs	r2, #8
 800d242:	68fb      	ldr	r3, [r7, #12]
 800d244:	1a9b      	subs	r3, r3, r2
 800d246:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d248:	68fb      	ldr	r3, [r7, #12]
 800d24a:	f023 0307 	bic.w	r3, r3, #7
 800d24e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d250:	68fb      	ldr	r3, [r7, #12]
 800d252:	4a15      	ldr	r2, [pc, #84]	; (800d2a8 <prvHeapInit+0xb4>)
 800d254:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d256:	4b14      	ldr	r3, [pc, #80]	; (800d2a8 <prvHeapInit+0xb4>)
 800d258:	681b      	ldr	r3, [r3, #0]
 800d25a:	2200      	movs	r2, #0
 800d25c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d25e:	4b12      	ldr	r3, [pc, #72]	; (800d2a8 <prvHeapInit+0xb4>)
 800d260:	681b      	ldr	r3, [r3, #0]
 800d262:	2200      	movs	r2, #0
 800d264:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d26a:	683b      	ldr	r3, [r7, #0]
 800d26c:	68fa      	ldr	r2, [r7, #12]
 800d26e:	1ad2      	subs	r2, r2, r3
 800d270:	683b      	ldr	r3, [r7, #0]
 800d272:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d274:	4b0c      	ldr	r3, [pc, #48]	; (800d2a8 <prvHeapInit+0xb4>)
 800d276:	681a      	ldr	r2, [r3, #0]
 800d278:	683b      	ldr	r3, [r7, #0]
 800d27a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d27c:	683b      	ldr	r3, [r7, #0]
 800d27e:	685b      	ldr	r3, [r3, #4]
 800d280:	4a0a      	ldr	r2, [pc, #40]	; (800d2ac <prvHeapInit+0xb8>)
 800d282:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d284:	683b      	ldr	r3, [r7, #0]
 800d286:	685b      	ldr	r3, [r3, #4]
 800d288:	4a09      	ldr	r2, [pc, #36]	; (800d2b0 <prvHeapInit+0xbc>)
 800d28a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d28c:	4b09      	ldr	r3, [pc, #36]	; (800d2b4 <prvHeapInit+0xc0>)
 800d28e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d292:	601a      	str	r2, [r3, #0]
}
 800d294:	bf00      	nop
 800d296:	3714      	adds	r7, #20
 800d298:	46bd      	mov	sp, r7
 800d29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d29e:	4770      	bx	lr
 800d2a0:	2000127c 	.word	0x2000127c
 800d2a4:	2000627c 	.word	0x2000627c
 800d2a8:	20006284 	.word	0x20006284
 800d2ac:	2000628c 	.word	0x2000628c
 800d2b0:	20006288 	.word	0x20006288
 800d2b4:	20006298 	.word	0x20006298

0800d2b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d2b8:	b480      	push	{r7}
 800d2ba:	b085      	sub	sp, #20
 800d2bc:	af00      	add	r7, sp, #0
 800d2be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d2c0:	4b28      	ldr	r3, [pc, #160]	; (800d364 <prvInsertBlockIntoFreeList+0xac>)
 800d2c2:	60fb      	str	r3, [r7, #12]
 800d2c4:	e002      	b.n	800d2cc <prvInsertBlockIntoFreeList+0x14>
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	681b      	ldr	r3, [r3, #0]
 800d2ca:	60fb      	str	r3, [r7, #12]
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	687a      	ldr	r2, [r7, #4]
 800d2d2:	429a      	cmp	r2, r3
 800d2d4:	d8f7      	bhi.n	800d2c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d2d6:	68fb      	ldr	r3, [r7, #12]
 800d2d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d2da:	68fb      	ldr	r3, [r7, #12]
 800d2dc:	685b      	ldr	r3, [r3, #4]
 800d2de:	68ba      	ldr	r2, [r7, #8]
 800d2e0:	4413      	add	r3, r2
 800d2e2:	687a      	ldr	r2, [r7, #4]
 800d2e4:	429a      	cmp	r2, r3
 800d2e6:	d108      	bne.n	800d2fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d2e8:	68fb      	ldr	r3, [r7, #12]
 800d2ea:	685a      	ldr	r2, [r3, #4]
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	685b      	ldr	r3, [r3, #4]
 800d2f0:	441a      	add	r2, r3
 800d2f2:	68fb      	ldr	r3, [r7, #12]
 800d2f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d2f6:	68fb      	ldr	r3, [r7, #12]
 800d2f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	685b      	ldr	r3, [r3, #4]
 800d302:	68ba      	ldr	r2, [r7, #8]
 800d304:	441a      	add	r2, r3
 800d306:	68fb      	ldr	r3, [r7, #12]
 800d308:	681b      	ldr	r3, [r3, #0]
 800d30a:	429a      	cmp	r2, r3
 800d30c:	d118      	bne.n	800d340 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d30e:	68fb      	ldr	r3, [r7, #12]
 800d310:	681a      	ldr	r2, [r3, #0]
 800d312:	4b15      	ldr	r3, [pc, #84]	; (800d368 <prvInsertBlockIntoFreeList+0xb0>)
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	429a      	cmp	r2, r3
 800d318:	d00d      	beq.n	800d336 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	685a      	ldr	r2, [r3, #4]
 800d31e:	68fb      	ldr	r3, [r7, #12]
 800d320:	681b      	ldr	r3, [r3, #0]
 800d322:	685b      	ldr	r3, [r3, #4]
 800d324:	441a      	add	r2, r3
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d32a:	68fb      	ldr	r3, [r7, #12]
 800d32c:	681b      	ldr	r3, [r3, #0]
 800d32e:	681a      	ldr	r2, [r3, #0]
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	601a      	str	r2, [r3, #0]
 800d334:	e008      	b.n	800d348 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d336:	4b0c      	ldr	r3, [pc, #48]	; (800d368 <prvInsertBlockIntoFreeList+0xb0>)
 800d338:	681a      	ldr	r2, [r3, #0]
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	601a      	str	r2, [r3, #0]
 800d33e:	e003      	b.n	800d348 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d340:	68fb      	ldr	r3, [r7, #12]
 800d342:	681a      	ldr	r2, [r3, #0]
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d348:	68fa      	ldr	r2, [r7, #12]
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	429a      	cmp	r2, r3
 800d34e:	d002      	beq.n	800d356 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d350:	68fb      	ldr	r3, [r7, #12]
 800d352:	687a      	ldr	r2, [r7, #4]
 800d354:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d356:	bf00      	nop
 800d358:	3714      	adds	r7, #20
 800d35a:	46bd      	mov	sp, r7
 800d35c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d360:	4770      	bx	lr
 800d362:	bf00      	nop
 800d364:	2000627c 	.word	0x2000627c
 800d368:	20006284 	.word	0x20006284

0800d36c <__errno>:
 800d36c:	4b01      	ldr	r3, [pc, #4]	; (800d374 <__errno+0x8>)
 800d36e:	6818      	ldr	r0, [r3, #0]
 800d370:	4770      	bx	lr
 800d372:	bf00      	nop
 800d374:	20000020 	.word	0x20000020

0800d378 <__libc_init_array>:
 800d378:	b570      	push	{r4, r5, r6, lr}
 800d37a:	4d0d      	ldr	r5, [pc, #52]	; (800d3b0 <__libc_init_array+0x38>)
 800d37c:	4c0d      	ldr	r4, [pc, #52]	; (800d3b4 <__libc_init_array+0x3c>)
 800d37e:	1b64      	subs	r4, r4, r5
 800d380:	10a4      	asrs	r4, r4, #2
 800d382:	2600      	movs	r6, #0
 800d384:	42a6      	cmp	r6, r4
 800d386:	d109      	bne.n	800d39c <__libc_init_array+0x24>
 800d388:	4d0b      	ldr	r5, [pc, #44]	; (800d3b8 <__libc_init_array+0x40>)
 800d38a:	4c0c      	ldr	r4, [pc, #48]	; (800d3bc <__libc_init_array+0x44>)
 800d38c:	f004 faac 	bl	80118e8 <_init>
 800d390:	1b64      	subs	r4, r4, r5
 800d392:	10a4      	asrs	r4, r4, #2
 800d394:	2600      	movs	r6, #0
 800d396:	42a6      	cmp	r6, r4
 800d398:	d105      	bne.n	800d3a6 <__libc_init_array+0x2e>
 800d39a:	bd70      	pop	{r4, r5, r6, pc}
 800d39c:	f855 3b04 	ldr.w	r3, [r5], #4
 800d3a0:	4798      	blx	r3
 800d3a2:	3601      	adds	r6, #1
 800d3a4:	e7ee      	b.n	800d384 <__libc_init_array+0xc>
 800d3a6:	f855 3b04 	ldr.w	r3, [r5], #4
 800d3aa:	4798      	blx	r3
 800d3ac:	3601      	adds	r6, #1
 800d3ae:	e7f2      	b.n	800d396 <__libc_init_array+0x1e>
 800d3b0:	080124c4 	.word	0x080124c4
 800d3b4:	080124c4 	.word	0x080124c4
 800d3b8:	080124c4 	.word	0x080124c4
 800d3bc:	080124c8 	.word	0x080124c8

0800d3c0 <memcpy>:
 800d3c0:	440a      	add	r2, r1
 800d3c2:	4291      	cmp	r1, r2
 800d3c4:	f100 33ff 	add.w	r3, r0, #4294967295
 800d3c8:	d100      	bne.n	800d3cc <memcpy+0xc>
 800d3ca:	4770      	bx	lr
 800d3cc:	b510      	push	{r4, lr}
 800d3ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d3d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d3d6:	4291      	cmp	r1, r2
 800d3d8:	d1f9      	bne.n	800d3ce <memcpy+0xe>
 800d3da:	bd10      	pop	{r4, pc}

0800d3dc <memset>:
 800d3dc:	4402      	add	r2, r0
 800d3de:	4603      	mov	r3, r0
 800d3e0:	4293      	cmp	r3, r2
 800d3e2:	d100      	bne.n	800d3e6 <memset+0xa>
 800d3e4:	4770      	bx	lr
 800d3e6:	f803 1b01 	strb.w	r1, [r3], #1
 800d3ea:	e7f9      	b.n	800d3e0 <memset+0x4>

0800d3ec <__cvt>:
 800d3ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d3f0:	ec55 4b10 	vmov	r4, r5, d0
 800d3f4:	2d00      	cmp	r5, #0
 800d3f6:	460e      	mov	r6, r1
 800d3f8:	4619      	mov	r1, r3
 800d3fa:	462b      	mov	r3, r5
 800d3fc:	bfbb      	ittet	lt
 800d3fe:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800d402:	461d      	movlt	r5, r3
 800d404:	2300      	movge	r3, #0
 800d406:	232d      	movlt	r3, #45	; 0x2d
 800d408:	700b      	strb	r3, [r1, #0]
 800d40a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d40c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800d410:	4691      	mov	r9, r2
 800d412:	f023 0820 	bic.w	r8, r3, #32
 800d416:	bfbc      	itt	lt
 800d418:	4622      	movlt	r2, r4
 800d41a:	4614      	movlt	r4, r2
 800d41c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d420:	d005      	beq.n	800d42e <__cvt+0x42>
 800d422:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800d426:	d100      	bne.n	800d42a <__cvt+0x3e>
 800d428:	3601      	adds	r6, #1
 800d42a:	2102      	movs	r1, #2
 800d42c:	e000      	b.n	800d430 <__cvt+0x44>
 800d42e:	2103      	movs	r1, #3
 800d430:	ab03      	add	r3, sp, #12
 800d432:	9301      	str	r3, [sp, #4]
 800d434:	ab02      	add	r3, sp, #8
 800d436:	9300      	str	r3, [sp, #0]
 800d438:	ec45 4b10 	vmov	d0, r4, r5
 800d43c:	4653      	mov	r3, sl
 800d43e:	4632      	mov	r2, r6
 800d440:	f000 fd0e 	bl	800de60 <_dtoa_r>
 800d444:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800d448:	4607      	mov	r7, r0
 800d44a:	d102      	bne.n	800d452 <__cvt+0x66>
 800d44c:	f019 0f01 	tst.w	r9, #1
 800d450:	d022      	beq.n	800d498 <__cvt+0xac>
 800d452:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d456:	eb07 0906 	add.w	r9, r7, r6
 800d45a:	d110      	bne.n	800d47e <__cvt+0x92>
 800d45c:	783b      	ldrb	r3, [r7, #0]
 800d45e:	2b30      	cmp	r3, #48	; 0x30
 800d460:	d10a      	bne.n	800d478 <__cvt+0x8c>
 800d462:	2200      	movs	r2, #0
 800d464:	2300      	movs	r3, #0
 800d466:	4620      	mov	r0, r4
 800d468:	4629      	mov	r1, r5
 800d46a:	f7f3 fb45 	bl	8000af8 <__aeabi_dcmpeq>
 800d46e:	b918      	cbnz	r0, 800d478 <__cvt+0x8c>
 800d470:	f1c6 0601 	rsb	r6, r6, #1
 800d474:	f8ca 6000 	str.w	r6, [sl]
 800d478:	f8da 3000 	ldr.w	r3, [sl]
 800d47c:	4499      	add	r9, r3
 800d47e:	2200      	movs	r2, #0
 800d480:	2300      	movs	r3, #0
 800d482:	4620      	mov	r0, r4
 800d484:	4629      	mov	r1, r5
 800d486:	f7f3 fb37 	bl	8000af8 <__aeabi_dcmpeq>
 800d48a:	b108      	cbz	r0, 800d490 <__cvt+0xa4>
 800d48c:	f8cd 900c 	str.w	r9, [sp, #12]
 800d490:	2230      	movs	r2, #48	; 0x30
 800d492:	9b03      	ldr	r3, [sp, #12]
 800d494:	454b      	cmp	r3, r9
 800d496:	d307      	bcc.n	800d4a8 <__cvt+0xbc>
 800d498:	9b03      	ldr	r3, [sp, #12]
 800d49a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d49c:	1bdb      	subs	r3, r3, r7
 800d49e:	4638      	mov	r0, r7
 800d4a0:	6013      	str	r3, [r2, #0]
 800d4a2:	b004      	add	sp, #16
 800d4a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d4a8:	1c59      	adds	r1, r3, #1
 800d4aa:	9103      	str	r1, [sp, #12]
 800d4ac:	701a      	strb	r2, [r3, #0]
 800d4ae:	e7f0      	b.n	800d492 <__cvt+0xa6>

0800d4b0 <__exponent>:
 800d4b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d4b2:	4603      	mov	r3, r0
 800d4b4:	2900      	cmp	r1, #0
 800d4b6:	bfb8      	it	lt
 800d4b8:	4249      	neglt	r1, r1
 800d4ba:	f803 2b02 	strb.w	r2, [r3], #2
 800d4be:	bfb4      	ite	lt
 800d4c0:	222d      	movlt	r2, #45	; 0x2d
 800d4c2:	222b      	movge	r2, #43	; 0x2b
 800d4c4:	2909      	cmp	r1, #9
 800d4c6:	7042      	strb	r2, [r0, #1]
 800d4c8:	dd2a      	ble.n	800d520 <__exponent+0x70>
 800d4ca:	f10d 0407 	add.w	r4, sp, #7
 800d4ce:	46a4      	mov	ip, r4
 800d4d0:	270a      	movs	r7, #10
 800d4d2:	46a6      	mov	lr, r4
 800d4d4:	460a      	mov	r2, r1
 800d4d6:	fb91 f6f7 	sdiv	r6, r1, r7
 800d4da:	fb07 1516 	mls	r5, r7, r6, r1
 800d4de:	3530      	adds	r5, #48	; 0x30
 800d4e0:	2a63      	cmp	r2, #99	; 0x63
 800d4e2:	f104 34ff 	add.w	r4, r4, #4294967295
 800d4e6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800d4ea:	4631      	mov	r1, r6
 800d4ec:	dcf1      	bgt.n	800d4d2 <__exponent+0x22>
 800d4ee:	3130      	adds	r1, #48	; 0x30
 800d4f0:	f1ae 0502 	sub.w	r5, lr, #2
 800d4f4:	f804 1c01 	strb.w	r1, [r4, #-1]
 800d4f8:	1c44      	adds	r4, r0, #1
 800d4fa:	4629      	mov	r1, r5
 800d4fc:	4561      	cmp	r1, ip
 800d4fe:	d30a      	bcc.n	800d516 <__exponent+0x66>
 800d500:	f10d 0209 	add.w	r2, sp, #9
 800d504:	eba2 020e 	sub.w	r2, r2, lr
 800d508:	4565      	cmp	r5, ip
 800d50a:	bf88      	it	hi
 800d50c:	2200      	movhi	r2, #0
 800d50e:	4413      	add	r3, r2
 800d510:	1a18      	subs	r0, r3, r0
 800d512:	b003      	add	sp, #12
 800d514:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d516:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d51a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800d51e:	e7ed      	b.n	800d4fc <__exponent+0x4c>
 800d520:	2330      	movs	r3, #48	; 0x30
 800d522:	3130      	adds	r1, #48	; 0x30
 800d524:	7083      	strb	r3, [r0, #2]
 800d526:	70c1      	strb	r1, [r0, #3]
 800d528:	1d03      	adds	r3, r0, #4
 800d52a:	e7f1      	b.n	800d510 <__exponent+0x60>

0800d52c <_printf_float>:
 800d52c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d530:	ed2d 8b02 	vpush	{d8}
 800d534:	b08d      	sub	sp, #52	; 0x34
 800d536:	460c      	mov	r4, r1
 800d538:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800d53c:	4616      	mov	r6, r2
 800d53e:	461f      	mov	r7, r3
 800d540:	4605      	mov	r5, r0
 800d542:	f001 fa7b 	bl	800ea3c <_localeconv_r>
 800d546:	f8d0 a000 	ldr.w	sl, [r0]
 800d54a:	4650      	mov	r0, sl
 800d54c:	f7f2 fe58 	bl	8000200 <strlen>
 800d550:	2300      	movs	r3, #0
 800d552:	930a      	str	r3, [sp, #40]	; 0x28
 800d554:	6823      	ldr	r3, [r4, #0]
 800d556:	9305      	str	r3, [sp, #20]
 800d558:	f8d8 3000 	ldr.w	r3, [r8]
 800d55c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800d560:	3307      	adds	r3, #7
 800d562:	f023 0307 	bic.w	r3, r3, #7
 800d566:	f103 0208 	add.w	r2, r3, #8
 800d56a:	f8c8 2000 	str.w	r2, [r8]
 800d56e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d572:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800d576:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800d57a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d57e:	9307      	str	r3, [sp, #28]
 800d580:	f8cd 8018 	str.w	r8, [sp, #24]
 800d584:	ee08 0a10 	vmov	s16, r0
 800d588:	4b9f      	ldr	r3, [pc, #636]	; (800d808 <_printf_float+0x2dc>)
 800d58a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d58e:	f04f 32ff 	mov.w	r2, #4294967295
 800d592:	f7f3 fae3 	bl	8000b5c <__aeabi_dcmpun>
 800d596:	bb88      	cbnz	r0, 800d5fc <_printf_float+0xd0>
 800d598:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d59c:	4b9a      	ldr	r3, [pc, #616]	; (800d808 <_printf_float+0x2dc>)
 800d59e:	f04f 32ff 	mov.w	r2, #4294967295
 800d5a2:	f7f3 fabd 	bl	8000b20 <__aeabi_dcmple>
 800d5a6:	bb48      	cbnz	r0, 800d5fc <_printf_float+0xd0>
 800d5a8:	2200      	movs	r2, #0
 800d5aa:	2300      	movs	r3, #0
 800d5ac:	4640      	mov	r0, r8
 800d5ae:	4649      	mov	r1, r9
 800d5b0:	f7f3 faac 	bl	8000b0c <__aeabi_dcmplt>
 800d5b4:	b110      	cbz	r0, 800d5bc <_printf_float+0x90>
 800d5b6:	232d      	movs	r3, #45	; 0x2d
 800d5b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d5bc:	4b93      	ldr	r3, [pc, #588]	; (800d80c <_printf_float+0x2e0>)
 800d5be:	4894      	ldr	r0, [pc, #592]	; (800d810 <_printf_float+0x2e4>)
 800d5c0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800d5c4:	bf94      	ite	ls
 800d5c6:	4698      	movls	r8, r3
 800d5c8:	4680      	movhi	r8, r0
 800d5ca:	2303      	movs	r3, #3
 800d5cc:	6123      	str	r3, [r4, #16]
 800d5ce:	9b05      	ldr	r3, [sp, #20]
 800d5d0:	f023 0204 	bic.w	r2, r3, #4
 800d5d4:	6022      	str	r2, [r4, #0]
 800d5d6:	f04f 0900 	mov.w	r9, #0
 800d5da:	9700      	str	r7, [sp, #0]
 800d5dc:	4633      	mov	r3, r6
 800d5de:	aa0b      	add	r2, sp, #44	; 0x2c
 800d5e0:	4621      	mov	r1, r4
 800d5e2:	4628      	mov	r0, r5
 800d5e4:	f000 f9d8 	bl	800d998 <_printf_common>
 800d5e8:	3001      	adds	r0, #1
 800d5ea:	f040 8090 	bne.w	800d70e <_printf_float+0x1e2>
 800d5ee:	f04f 30ff 	mov.w	r0, #4294967295
 800d5f2:	b00d      	add	sp, #52	; 0x34
 800d5f4:	ecbd 8b02 	vpop	{d8}
 800d5f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5fc:	4642      	mov	r2, r8
 800d5fe:	464b      	mov	r3, r9
 800d600:	4640      	mov	r0, r8
 800d602:	4649      	mov	r1, r9
 800d604:	f7f3 faaa 	bl	8000b5c <__aeabi_dcmpun>
 800d608:	b140      	cbz	r0, 800d61c <_printf_float+0xf0>
 800d60a:	464b      	mov	r3, r9
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	bfbc      	itt	lt
 800d610:	232d      	movlt	r3, #45	; 0x2d
 800d612:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800d616:	487f      	ldr	r0, [pc, #508]	; (800d814 <_printf_float+0x2e8>)
 800d618:	4b7f      	ldr	r3, [pc, #508]	; (800d818 <_printf_float+0x2ec>)
 800d61a:	e7d1      	b.n	800d5c0 <_printf_float+0x94>
 800d61c:	6863      	ldr	r3, [r4, #4]
 800d61e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800d622:	9206      	str	r2, [sp, #24]
 800d624:	1c5a      	adds	r2, r3, #1
 800d626:	d13f      	bne.n	800d6a8 <_printf_float+0x17c>
 800d628:	2306      	movs	r3, #6
 800d62a:	6063      	str	r3, [r4, #4]
 800d62c:	9b05      	ldr	r3, [sp, #20]
 800d62e:	6861      	ldr	r1, [r4, #4]
 800d630:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800d634:	2300      	movs	r3, #0
 800d636:	9303      	str	r3, [sp, #12]
 800d638:	ab0a      	add	r3, sp, #40	; 0x28
 800d63a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800d63e:	ab09      	add	r3, sp, #36	; 0x24
 800d640:	ec49 8b10 	vmov	d0, r8, r9
 800d644:	9300      	str	r3, [sp, #0]
 800d646:	6022      	str	r2, [r4, #0]
 800d648:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800d64c:	4628      	mov	r0, r5
 800d64e:	f7ff fecd 	bl	800d3ec <__cvt>
 800d652:	9b06      	ldr	r3, [sp, #24]
 800d654:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d656:	2b47      	cmp	r3, #71	; 0x47
 800d658:	4680      	mov	r8, r0
 800d65a:	d108      	bne.n	800d66e <_printf_float+0x142>
 800d65c:	1cc8      	adds	r0, r1, #3
 800d65e:	db02      	blt.n	800d666 <_printf_float+0x13a>
 800d660:	6863      	ldr	r3, [r4, #4]
 800d662:	4299      	cmp	r1, r3
 800d664:	dd41      	ble.n	800d6ea <_printf_float+0x1be>
 800d666:	f1ab 0b02 	sub.w	fp, fp, #2
 800d66a:	fa5f fb8b 	uxtb.w	fp, fp
 800d66e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d672:	d820      	bhi.n	800d6b6 <_printf_float+0x18a>
 800d674:	3901      	subs	r1, #1
 800d676:	465a      	mov	r2, fp
 800d678:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800d67c:	9109      	str	r1, [sp, #36]	; 0x24
 800d67e:	f7ff ff17 	bl	800d4b0 <__exponent>
 800d682:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d684:	1813      	adds	r3, r2, r0
 800d686:	2a01      	cmp	r2, #1
 800d688:	4681      	mov	r9, r0
 800d68a:	6123      	str	r3, [r4, #16]
 800d68c:	dc02      	bgt.n	800d694 <_printf_float+0x168>
 800d68e:	6822      	ldr	r2, [r4, #0]
 800d690:	07d2      	lsls	r2, r2, #31
 800d692:	d501      	bpl.n	800d698 <_printf_float+0x16c>
 800d694:	3301      	adds	r3, #1
 800d696:	6123      	str	r3, [r4, #16]
 800d698:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d09c      	beq.n	800d5da <_printf_float+0xae>
 800d6a0:	232d      	movs	r3, #45	; 0x2d
 800d6a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d6a6:	e798      	b.n	800d5da <_printf_float+0xae>
 800d6a8:	9a06      	ldr	r2, [sp, #24]
 800d6aa:	2a47      	cmp	r2, #71	; 0x47
 800d6ac:	d1be      	bne.n	800d62c <_printf_float+0x100>
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d1bc      	bne.n	800d62c <_printf_float+0x100>
 800d6b2:	2301      	movs	r3, #1
 800d6b4:	e7b9      	b.n	800d62a <_printf_float+0xfe>
 800d6b6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800d6ba:	d118      	bne.n	800d6ee <_printf_float+0x1c2>
 800d6bc:	2900      	cmp	r1, #0
 800d6be:	6863      	ldr	r3, [r4, #4]
 800d6c0:	dd0b      	ble.n	800d6da <_printf_float+0x1ae>
 800d6c2:	6121      	str	r1, [r4, #16]
 800d6c4:	b913      	cbnz	r3, 800d6cc <_printf_float+0x1a0>
 800d6c6:	6822      	ldr	r2, [r4, #0]
 800d6c8:	07d0      	lsls	r0, r2, #31
 800d6ca:	d502      	bpl.n	800d6d2 <_printf_float+0x1a6>
 800d6cc:	3301      	adds	r3, #1
 800d6ce:	440b      	add	r3, r1
 800d6d0:	6123      	str	r3, [r4, #16]
 800d6d2:	65a1      	str	r1, [r4, #88]	; 0x58
 800d6d4:	f04f 0900 	mov.w	r9, #0
 800d6d8:	e7de      	b.n	800d698 <_printf_float+0x16c>
 800d6da:	b913      	cbnz	r3, 800d6e2 <_printf_float+0x1b6>
 800d6dc:	6822      	ldr	r2, [r4, #0]
 800d6de:	07d2      	lsls	r2, r2, #31
 800d6e0:	d501      	bpl.n	800d6e6 <_printf_float+0x1ba>
 800d6e2:	3302      	adds	r3, #2
 800d6e4:	e7f4      	b.n	800d6d0 <_printf_float+0x1a4>
 800d6e6:	2301      	movs	r3, #1
 800d6e8:	e7f2      	b.n	800d6d0 <_printf_float+0x1a4>
 800d6ea:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800d6ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d6f0:	4299      	cmp	r1, r3
 800d6f2:	db05      	blt.n	800d700 <_printf_float+0x1d4>
 800d6f4:	6823      	ldr	r3, [r4, #0]
 800d6f6:	6121      	str	r1, [r4, #16]
 800d6f8:	07d8      	lsls	r0, r3, #31
 800d6fa:	d5ea      	bpl.n	800d6d2 <_printf_float+0x1a6>
 800d6fc:	1c4b      	adds	r3, r1, #1
 800d6fe:	e7e7      	b.n	800d6d0 <_printf_float+0x1a4>
 800d700:	2900      	cmp	r1, #0
 800d702:	bfd4      	ite	le
 800d704:	f1c1 0202 	rsble	r2, r1, #2
 800d708:	2201      	movgt	r2, #1
 800d70a:	4413      	add	r3, r2
 800d70c:	e7e0      	b.n	800d6d0 <_printf_float+0x1a4>
 800d70e:	6823      	ldr	r3, [r4, #0]
 800d710:	055a      	lsls	r2, r3, #21
 800d712:	d407      	bmi.n	800d724 <_printf_float+0x1f8>
 800d714:	6923      	ldr	r3, [r4, #16]
 800d716:	4642      	mov	r2, r8
 800d718:	4631      	mov	r1, r6
 800d71a:	4628      	mov	r0, r5
 800d71c:	47b8      	blx	r7
 800d71e:	3001      	adds	r0, #1
 800d720:	d12c      	bne.n	800d77c <_printf_float+0x250>
 800d722:	e764      	b.n	800d5ee <_printf_float+0xc2>
 800d724:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d728:	f240 80e0 	bls.w	800d8ec <_printf_float+0x3c0>
 800d72c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d730:	2200      	movs	r2, #0
 800d732:	2300      	movs	r3, #0
 800d734:	f7f3 f9e0 	bl	8000af8 <__aeabi_dcmpeq>
 800d738:	2800      	cmp	r0, #0
 800d73a:	d034      	beq.n	800d7a6 <_printf_float+0x27a>
 800d73c:	4a37      	ldr	r2, [pc, #220]	; (800d81c <_printf_float+0x2f0>)
 800d73e:	2301      	movs	r3, #1
 800d740:	4631      	mov	r1, r6
 800d742:	4628      	mov	r0, r5
 800d744:	47b8      	blx	r7
 800d746:	3001      	adds	r0, #1
 800d748:	f43f af51 	beq.w	800d5ee <_printf_float+0xc2>
 800d74c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d750:	429a      	cmp	r2, r3
 800d752:	db02      	blt.n	800d75a <_printf_float+0x22e>
 800d754:	6823      	ldr	r3, [r4, #0]
 800d756:	07d8      	lsls	r0, r3, #31
 800d758:	d510      	bpl.n	800d77c <_printf_float+0x250>
 800d75a:	ee18 3a10 	vmov	r3, s16
 800d75e:	4652      	mov	r2, sl
 800d760:	4631      	mov	r1, r6
 800d762:	4628      	mov	r0, r5
 800d764:	47b8      	blx	r7
 800d766:	3001      	adds	r0, #1
 800d768:	f43f af41 	beq.w	800d5ee <_printf_float+0xc2>
 800d76c:	f04f 0800 	mov.w	r8, #0
 800d770:	f104 091a 	add.w	r9, r4, #26
 800d774:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d776:	3b01      	subs	r3, #1
 800d778:	4543      	cmp	r3, r8
 800d77a:	dc09      	bgt.n	800d790 <_printf_float+0x264>
 800d77c:	6823      	ldr	r3, [r4, #0]
 800d77e:	079b      	lsls	r3, r3, #30
 800d780:	f100 8105 	bmi.w	800d98e <_printf_float+0x462>
 800d784:	68e0      	ldr	r0, [r4, #12]
 800d786:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d788:	4298      	cmp	r0, r3
 800d78a:	bfb8      	it	lt
 800d78c:	4618      	movlt	r0, r3
 800d78e:	e730      	b.n	800d5f2 <_printf_float+0xc6>
 800d790:	2301      	movs	r3, #1
 800d792:	464a      	mov	r2, r9
 800d794:	4631      	mov	r1, r6
 800d796:	4628      	mov	r0, r5
 800d798:	47b8      	blx	r7
 800d79a:	3001      	adds	r0, #1
 800d79c:	f43f af27 	beq.w	800d5ee <_printf_float+0xc2>
 800d7a0:	f108 0801 	add.w	r8, r8, #1
 800d7a4:	e7e6      	b.n	800d774 <_printf_float+0x248>
 800d7a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	dc39      	bgt.n	800d820 <_printf_float+0x2f4>
 800d7ac:	4a1b      	ldr	r2, [pc, #108]	; (800d81c <_printf_float+0x2f0>)
 800d7ae:	2301      	movs	r3, #1
 800d7b0:	4631      	mov	r1, r6
 800d7b2:	4628      	mov	r0, r5
 800d7b4:	47b8      	blx	r7
 800d7b6:	3001      	adds	r0, #1
 800d7b8:	f43f af19 	beq.w	800d5ee <_printf_float+0xc2>
 800d7bc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d7c0:	4313      	orrs	r3, r2
 800d7c2:	d102      	bne.n	800d7ca <_printf_float+0x29e>
 800d7c4:	6823      	ldr	r3, [r4, #0]
 800d7c6:	07d9      	lsls	r1, r3, #31
 800d7c8:	d5d8      	bpl.n	800d77c <_printf_float+0x250>
 800d7ca:	ee18 3a10 	vmov	r3, s16
 800d7ce:	4652      	mov	r2, sl
 800d7d0:	4631      	mov	r1, r6
 800d7d2:	4628      	mov	r0, r5
 800d7d4:	47b8      	blx	r7
 800d7d6:	3001      	adds	r0, #1
 800d7d8:	f43f af09 	beq.w	800d5ee <_printf_float+0xc2>
 800d7dc:	f04f 0900 	mov.w	r9, #0
 800d7e0:	f104 0a1a 	add.w	sl, r4, #26
 800d7e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d7e6:	425b      	negs	r3, r3
 800d7e8:	454b      	cmp	r3, r9
 800d7ea:	dc01      	bgt.n	800d7f0 <_printf_float+0x2c4>
 800d7ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d7ee:	e792      	b.n	800d716 <_printf_float+0x1ea>
 800d7f0:	2301      	movs	r3, #1
 800d7f2:	4652      	mov	r2, sl
 800d7f4:	4631      	mov	r1, r6
 800d7f6:	4628      	mov	r0, r5
 800d7f8:	47b8      	blx	r7
 800d7fa:	3001      	adds	r0, #1
 800d7fc:	f43f aef7 	beq.w	800d5ee <_printf_float+0xc2>
 800d800:	f109 0901 	add.w	r9, r9, #1
 800d804:	e7ee      	b.n	800d7e4 <_printf_float+0x2b8>
 800d806:	bf00      	nop
 800d808:	7fefffff 	.word	0x7fefffff
 800d80c:	08011cc4 	.word	0x08011cc4
 800d810:	08011cc8 	.word	0x08011cc8
 800d814:	08011cd0 	.word	0x08011cd0
 800d818:	08011ccc 	.word	0x08011ccc
 800d81c:	08011cd4 	.word	0x08011cd4
 800d820:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d822:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d824:	429a      	cmp	r2, r3
 800d826:	bfa8      	it	ge
 800d828:	461a      	movge	r2, r3
 800d82a:	2a00      	cmp	r2, #0
 800d82c:	4691      	mov	r9, r2
 800d82e:	dc37      	bgt.n	800d8a0 <_printf_float+0x374>
 800d830:	f04f 0b00 	mov.w	fp, #0
 800d834:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d838:	f104 021a 	add.w	r2, r4, #26
 800d83c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d83e:	9305      	str	r3, [sp, #20]
 800d840:	eba3 0309 	sub.w	r3, r3, r9
 800d844:	455b      	cmp	r3, fp
 800d846:	dc33      	bgt.n	800d8b0 <_printf_float+0x384>
 800d848:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d84c:	429a      	cmp	r2, r3
 800d84e:	db3b      	blt.n	800d8c8 <_printf_float+0x39c>
 800d850:	6823      	ldr	r3, [r4, #0]
 800d852:	07da      	lsls	r2, r3, #31
 800d854:	d438      	bmi.n	800d8c8 <_printf_float+0x39c>
 800d856:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d858:	9a05      	ldr	r2, [sp, #20]
 800d85a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d85c:	1a9a      	subs	r2, r3, r2
 800d85e:	eba3 0901 	sub.w	r9, r3, r1
 800d862:	4591      	cmp	r9, r2
 800d864:	bfa8      	it	ge
 800d866:	4691      	movge	r9, r2
 800d868:	f1b9 0f00 	cmp.w	r9, #0
 800d86c:	dc35      	bgt.n	800d8da <_printf_float+0x3ae>
 800d86e:	f04f 0800 	mov.w	r8, #0
 800d872:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d876:	f104 0a1a 	add.w	sl, r4, #26
 800d87a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d87e:	1a9b      	subs	r3, r3, r2
 800d880:	eba3 0309 	sub.w	r3, r3, r9
 800d884:	4543      	cmp	r3, r8
 800d886:	f77f af79 	ble.w	800d77c <_printf_float+0x250>
 800d88a:	2301      	movs	r3, #1
 800d88c:	4652      	mov	r2, sl
 800d88e:	4631      	mov	r1, r6
 800d890:	4628      	mov	r0, r5
 800d892:	47b8      	blx	r7
 800d894:	3001      	adds	r0, #1
 800d896:	f43f aeaa 	beq.w	800d5ee <_printf_float+0xc2>
 800d89a:	f108 0801 	add.w	r8, r8, #1
 800d89e:	e7ec      	b.n	800d87a <_printf_float+0x34e>
 800d8a0:	4613      	mov	r3, r2
 800d8a2:	4631      	mov	r1, r6
 800d8a4:	4642      	mov	r2, r8
 800d8a6:	4628      	mov	r0, r5
 800d8a8:	47b8      	blx	r7
 800d8aa:	3001      	adds	r0, #1
 800d8ac:	d1c0      	bne.n	800d830 <_printf_float+0x304>
 800d8ae:	e69e      	b.n	800d5ee <_printf_float+0xc2>
 800d8b0:	2301      	movs	r3, #1
 800d8b2:	4631      	mov	r1, r6
 800d8b4:	4628      	mov	r0, r5
 800d8b6:	9205      	str	r2, [sp, #20]
 800d8b8:	47b8      	blx	r7
 800d8ba:	3001      	adds	r0, #1
 800d8bc:	f43f ae97 	beq.w	800d5ee <_printf_float+0xc2>
 800d8c0:	9a05      	ldr	r2, [sp, #20]
 800d8c2:	f10b 0b01 	add.w	fp, fp, #1
 800d8c6:	e7b9      	b.n	800d83c <_printf_float+0x310>
 800d8c8:	ee18 3a10 	vmov	r3, s16
 800d8cc:	4652      	mov	r2, sl
 800d8ce:	4631      	mov	r1, r6
 800d8d0:	4628      	mov	r0, r5
 800d8d2:	47b8      	blx	r7
 800d8d4:	3001      	adds	r0, #1
 800d8d6:	d1be      	bne.n	800d856 <_printf_float+0x32a>
 800d8d8:	e689      	b.n	800d5ee <_printf_float+0xc2>
 800d8da:	9a05      	ldr	r2, [sp, #20]
 800d8dc:	464b      	mov	r3, r9
 800d8de:	4442      	add	r2, r8
 800d8e0:	4631      	mov	r1, r6
 800d8e2:	4628      	mov	r0, r5
 800d8e4:	47b8      	blx	r7
 800d8e6:	3001      	adds	r0, #1
 800d8e8:	d1c1      	bne.n	800d86e <_printf_float+0x342>
 800d8ea:	e680      	b.n	800d5ee <_printf_float+0xc2>
 800d8ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d8ee:	2a01      	cmp	r2, #1
 800d8f0:	dc01      	bgt.n	800d8f6 <_printf_float+0x3ca>
 800d8f2:	07db      	lsls	r3, r3, #31
 800d8f4:	d538      	bpl.n	800d968 <_printf_float+0x43c>
 800d8f6:	2301      	movs	r3, #1
 800d8f8:	4642      	mov	r2, r8
 800d8fa:	4631      	mov	r1, r6
 800d8fc:	4628      	mov	r0, r5
 800d8fe:	47b8      	blx	r7
 800d900:	3001      	adds	r0, #1
 800d902:	f43f ae74 	beq.w	800d5ee <_printf_float+0xc2>
 800d906:	ee18 3a10 	vmov	r3, s16
 800d90a:	4652      	mov	r2, sl
 800d90c:	4631      	mov	r1, r6
 800d90e:	4628      	mov	r0, r5
 800d910:	47b8      	blx	r7
 800d912:	3001      	adds	r0, #1
 800d914:	f43f ae6b 	beq.w	800d5ee <_printf_float+0xc2>
 800d918:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d91c:	2200      	movs	r2, #0
 800d91e:	2300      	movs	r3, #0
 800d920:	f7f3 f8ea 	bl	8000af8 <__aeabi_dcmpeq>
 800d924:	b9d8      	cbnz	r0, 800d95e <_printf_float+0x432>
 800d926:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d928:	f108 0201 	add.w	r2, r8, #1
 800d92c:	3b01      	subs	r3, #1
 800d92e:	4631      	mov	r1, r6
 800d930:	4628      	mov	r0, r5
 800d932:	47b8      	blx	r7
 800d934:	3001      	adds	r0, #1
 800d936:	d10e      	bne.n	800d956 <_printf_float+0x42a>
 800d938:	e659      	b.n	800d5ee <_printf_float+0xc2>
 800d93a:	2301      	movs	r3, #1
 800d93c:	4652      	mov	r2, sl
 800d93e:	4631      	mov	r1, r6
 800d940:	4628      	mov	r0, r5
 800d942:	47b8      	blx	r7
 800d944:	3001      	adds	r0, #1
 800d946:	f43f ae52 	beq.w	800d5ee <_printf_float+0xc2>
 800d94a:	f108 0801 	add.w	r8, r8, #1
 800d94e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d950:	3b01      	subs	r3, #1
 800d952:	4543      	cmp	r3, r8
 800d954:	dcf1      	bgt.n	800d93a <_printf_float+0x40e>
 800d956:	464b      	mov	r3, r9
 800d958:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800d95c:	e6dc      	b.n	800d718 <_printf_float+0x1ec>
 800d95e:	f04f 0800 	mov.w	r8, #0
 800d962:	f104 0a1a 	add.w	sl, r4, #26
 800d966:	e7f2      	b.n	800d94e <_printf_float+0x422>
 800d968:	2301      	movs	r3, #1
 800d96a:	4642      	mov	r2, r8
 800d96c:	e7df      	b.n	800d92e <_printf_float+0x402>
 800d96e:	2301      	movs	r3, #1
 800d970:	464a      	mov	r2, r9
 800d972:	4631      	mov	r1, r6
 800d974:	4628      	mov	r0, r5
 800d976:	47b8      	blx	r7
 800d978:	3001      	adds	r0, #1
 800d97a:	f43f ae38 	beq.w	800d5ee <_printf_float+0xc2>
 800d97e:	f108 0801 	add.w	r8, r8, #1
 800d982:	68e3      	ldr	r3, [r4, #12]
 800d984:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d986:	1a5b      	subs	r3, r3, r1
 800d988:	4543      	cmp	r3, r8
 800d98a:	dcf0      	bgt.n	800d96e <_printf_float+0x442>
 800d98c:	e6fa      	b.n	800d784 <_printf_float+0x258>
 800d98e:	f04f 0800 	mov.w	r8, #0
 800d992:	f104 0919 	add.w	r9, r4, #25
 800d996:	e7f4      	b.n	800d982 <_printf_float+0x456>

0800d998 <_printf_common>:
 800d998:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d99c:	4616      	mov	r6, r2
 800d99e:	4699      	mov	r9, r3
 800d9a0:	688a      	ldr	r2, [r1, #8]
 800d9a2:	690b      	ldr	r3, [r1, #16]
 800d9a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d9a8:	4293      	cmp	r3, r2
 800d9aa:	bfb8      	it	lt
 800d9ac:	4613      	movlt	r3, r2
 800d9ae:	6033      	str	r3, [r6, #0]
 800d9b0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d9b4:	4607      	mov	r7, r0
 800d9b6:	460c      	mov	r4, r1
 800d9b8:	b10a      	cbz	r2, 800d9be <_printf_common+0x26>
 800d9ba:	3301      	adds	r3, #1
 800d9bc:	6033      	str	r3, [r6, #0]
 800d9be:	6823      	ldr	r3, [r4, #0]
 800d9c0:	0699      	lsls	r1, r3, #26
 800d9c2:	bf42      	ittt	mi
 800d9c4:	6833      	ldrmi	r3, [r6, #0]
 800d9c6:	3302      	addmi	r3, #2
 800d9c8:	6033      	strmi	r3, [r6, #0]
 800d9ca:	6825      	ldr	r5, [r4, #0]
 800d9cc:	f015 0506 	ands.w	r5, r5, #6
 800d9d0:	d106      	bne.n	800d9e0 <_printf_common+0x48>
 800d9d2:	f104 0a19 	add.w	sl, r4, #25
 800d9d6:	68e3      	ldr	r3, [r4, #12]
 800d9d8:	6832      	ldr	r2, [r6, #0]
 800d9da:	1a9b      	subs	r3, r3, r2
 800d9dc:	42ab      	cmp	r3, r5
 800d9de:	dc26      	bgt.n	800da2e <_printf_common+0x96>
 800d9e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d9e4:	1e13      	subs	r3, r2, #0
 800d9e6:	6822      	ldr	r2, [r4, #0]
 800d9e8:	bf18      	it	ne
 800d9ea:	2301      	movne	r3, #1
 800d9ec:	0692      	lsls	r2, r2, #26
 800d9ee:	d42b      	bmi.n	800da48 <_printf_common+0xb0>
 800d9f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d9f4:	4649      	mov	r1, r9
 800d9f6:	4638      	mov	r0, r7
 800d9f8:	47c0      	blx	r8
 800d9fa:	3001      	adds	r0, #1
 800d9fc:	d01e      	beq.n	800da3c <_printf_common+0xa4>
 800d9fe:	6823      	ldr	r3, [r4, #0]
 800da00:	68e5      	ldr	r5, [r4, #12]
 800da02:	6832      	ldr	r2, [r6, #0]
 800da04:	f003 0306 	and.w	r3, r3, #6
 800da08:	2b04      	cmp	r3, #4
 800da0a:	bf08      	it	eq
 800da0c:	1aad      	subeq	r5, r5, r2
 800da0e:	68a3      	ldr	r3, [r4, #8]
 800da10:	6922      	ldr	r2, [r4, #16]
 800da12:	bf0c      	ite	eq
 800da14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800da18:	2500      	movne	r5, #0
 800da1a:	4293      	cmp	r3, r2
 800da1c:	bfc4      	itt	gt
 800da1e:	1a9b      	subgt	r3, r3, r2
 800da20:	18ed      	addgt	r5, r5, r3
 800da22:	2600      	movs	r6, #0
 800da24:	341a      	adds	r4, #26
 800da26:	42b5      	cmp	r5, r6
 800da28:	d11a      	bne.n	800da60 <_printf_common+0xc8>
 800da2a:	2000      	movs	r0, #0
 800da2c:	e008      	b.n	800da40 <_printf_common+0xa8>
 800da2e:	2301      	movs	r3, #1
 800da30:	4652      	mov	r2, sl
 800da32:	4649      	mov	r1, r9
 800da34:	4638      	mov	r0, r7
 800da36:	47c0      	blx	r8
 800da38:	3001      	adds	r0, #1
 800da3a:	d103      	bne.n	800da44 <_printf_common+0xac>
 800da3c:	f04f 30ff 	mov.w	r0, #4294967295
 800da40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da44:	3501      	adds	r5, #1
 800da46:	e7c6      	b.n	800d9d6 <_printf_common+0x3e>
 800da48:	18e1      	adds	r1, r4, r3
 800da4a:	1c5a      	adds	r2, r3, #1
 800da4c:	2030      	movs	r0, #48	; 0x30
 800da4e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800da52:	4422      	add	r2, r4
 800da54:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800da58:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800da5c:	3302      	adds	r3, #2
 800da5e:	e7c7      	b.n	800d9f0 <_printf_common+0x58>
 800da60:	2301      	movs	r3, #1
 800da62:	4622      	mov	r2, r4
 800da64:	4649      	mov	r1, r9
 800da66:	4638      	mov	r0, r7
 800da68:	47c0      	blx	r8
 800da6a:	3001      	adds	r0, #1
 800da6c:	d0e6      	beq.n	800da3c <_printf_common+0xa4>
 800da6e:	3601      	adds	r6, #1
 800da70:	e7d9      	b.n	800da26 <_printf_common+0x8e>
	...

0800da74 <_printf_i>:
 800da74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800da78:	7e0f      	ldrb	r7, [r1, #24]
 800da7a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800da7c:	2f78      	cmp	r7, #120	; 0x78
 800da7e:	4691      	mov	r9, r2
 800da80:	4680      	mov	r8, r0
 800da82:	460c      	mov	r4, r1
 800da84:	469a      	mov	sl, r3
 800da86:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800da8a:	d807      	bhi.n	800da9c <_printf_i+0x28>
 800da8c:	2f62      	cmp	r7, #98	; 0x62
 800da8e:	d80a      	bhi.n	800daa6 <_printf_i+0x32>
 800da90:	2f00      	cmp	r7, #0
 800da92:	f000 80d8 	beq.w	800dc46 <_printf_i+0x1d2>
 800da96:	2f58      	cmp	r7, #88	; 0x58
 800da98:	f000 80a3 	beq.w	800dbe2 <_printf_i+0x16e>
 800da9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800daa0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800daa4:	e03a      	b.n	800db1c <_printf_i+0xa8>
 800daa6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800daaa:	2b15      	cmp	r3, #21
 800daac:	d8f6      	bhi.n	800da9c <_printf_i+0x28>
 800daae:	a101      	add	r1, pc, #4	; (adr r1, 800dab4 <_printf_i+0x40>)
 800dab0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800dab4:	0800db0d 	.word	0x0800db0d
 800dab8:	0800db21 	.word	0x0800db21
 800dabc:	0800da9d 	.word	0x0800da9d
 800dac0:	0800da9d 	.word	0x0800da9d
 800dac4:	0800da9d 	.word	0x0800da9d
 800dac8:	0800da9d 	.word	0x0800da9d
 800dacc:	0800db21 	.word	0x0800db21
 800dad0:	0800da9d 	.word	0x0800da9d
 800dad4:	0800da9d 	.word	0x0800da9d
 800dad8:	0800da9d 	.word	0x0800da9d
 800dadc:	0800da9d 	.word	0x0800da9d
 800dae0:	0800dc2d 	.word	0x0800dc2d
 800dae4:	0800db51 	.word	0x0800db51
 800dae8:	0800dc0f 	.word	0x0800dc0f
 800daec:	0800da9d 	.word	0x0800da9d
 800daf0:	0800da9d 	.word	0x0800da9d
 800daf4:	0800dc4f 	.word	0x0800dc4f
 800daf8:	0800da9d 	.word	0x0800da9d
 800dafc:	0800db51 	.word	0x0800db51
 800db00:	0800da9d 	.word	0x0800da9d
 800db04:	0800da9d 	.word	0x0800da9d
 800db08:	0800dc17 	.word	0x0800dc17
 800db0c:	682b      	ldr	r3, [r5, #0]
 800db0e:	1d1a      	adds	r2, r3, #4
 800db10:	681b      	ldr	r3, [r3, #0]
 800db12:	602a      	str	r2, [r5, #0]
 800db14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800db18:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800db1c:	2301      	movs	r3, #1
 800db1e:	e0a3      	b.n	800dc68 <_printf_i+0x1f4>
 800db20:	6820      	ldr	r0, [r4, #0]
 800db22:	6829      	ldr	r1, [r5, #0]
 800db24:	0606      	lsls	r6, r0, #24
 800db26:	f101 0304 	add.w	r3, r1, #4
 800db2a:	d50a      	bpl.n	800db42 <_printf_i+0xce>
 800db2c:	680e      	ldr	r6, [r1, #0]
 800db2e:	602b      	str	r3, [r5, #0]
 800db30:	2e00      	cmp	r6, #0
 800db32:	da03      	bge.n	800db3c <_printf_i+0xc8>
 800db34:	232d      	movs	r3, #45	; 0x2d
 800db36:	4276      	negs	r6, r6
 800db38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800db3c:	485e      	ldr	r0, [pc, #376]	; (800dcb8 <_printf_i+0x244>)
 800db3e:	230a      	movs	r3, #10
 800db40:	e019      	b.n	800db76 <_printf_i+0x102>
 800db42:	680e      	ldr	r6, [r1, #0]
 800db44:	602b      	str	r3, [r5, #0]
 800db46:	f010 0f40 	tst.w	r0, #64	; 0x40
 800db4a:	bf18      	it	ne
 800db4c:	b236      	sxthne	r6, r6
 800db4e:	e7ef      	b.n	800db30 <_printf_i+0xbc>
 800db50:	682b      	ldr	r3, [r5, #0]
 800db52:	6820      	ldr	r0, [r4, #0]
 800db54:	1d19      	adds	r1, r3, #4
 800db56:	6029      	str	r1, [r5, #0]
 800db58:	0601      	lsls	r1, r0, #24
 800db5a:	d501      	bpl.n	800db60 <_printf_i+0xec>
 800db5c:	681e      	ldr	r6, [r3, #0]
 800db5e:	e002      	b.n	800db66 <_printf_i+0xf2>
 800db60:	0646      	lsls	r6, r0, #25
 800db62:	d5fb      	bpl.n	800db5c <_printf_i+0xe8>
 800db64:	881e      	ldrh	r6, [r3, #0]
 800db66:	4854      	ldr	r0, [pc, #336]	; (800dcb8 <_printf_i+0x244>)
 800db68:	2f6f      	cmp	r7, #111	; 0x6f
 800db6a:	bf0c      	ite	eq
 800db6c:	2308      	moveq	r3, #8
 800db6e:	230a      	movne	r3, #10
 800db70:	2100      	movs	r1, #0
 800db72:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800db76:	6865      	ldr	r5, [r4, #4]
 800db78:	60a5      	str	r5, [r4, #8]
 800db7a:	2d00      	cmp	r5, #0
 800db7c:	bfa2      	ittt	ge
 800db7e:	6821      	ldrge	r1, [r4, #0]
 800db80:	f021 0104 	bicge.w	r1, r1, #4
 800db84:	6021      	strge	r1, [r4, #0]
 800db86:	b90e      	cbnz	r6, 800db8c <_printf_i+0x118>
 800db88:	2d00      	cmp	r5, #0
 800db8a:	d04d      	beq.n	800dc28 <_printf_i+0x1b4>
 800db8c:	4615      	mov	r5, r2
 800db8e:	fbb6 f1f3 	udiv	r1, r6, r3
 800db92:	fb03 6711 	mls	r7, r3, r1, r6
 800db96:	5dc7      	ldrb	r7, [r0, r7]
 800db98:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800db9c:	4637      	mov	r7, r6
 800db9e:	42bb      	cmp	r3, r7
 800dba0:	460e      	mov	r6, r1
 800dba2:	d9f4      	bls.n	800db8e <_printf_i+0x11a>
 800dba4:	2b08      	cmp	r3, #8
 800dba6:	d10b      	bne.n	800dbc0 <_printf_i+0x14c>
 800dba8:	6823      	ldr	r3, [r4, #0]
 800dbaa:	07de      	lsls	r6, r3, #31
 800dbac:	d508      	bpl.n	800dbc0 <_printf_i+0x14c>
 800dbae:	6923      	ldr	r3, [r4, #16]
 800dbb0:	6861      	ldr	r1, [r4, #4]
 800dbb2:	4299      	cmp	r1, r3
 800dbb4:	bfde      	ittt	le
 800dbb6:	2330      	movle	r3, #48	; 0x30
 800dbb8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800dbbc:	f105 35ff 	addle.w	r5, r5, #4294967295
 800dbc0:	1b52      	subs	r2, r2, r5
 800dbc2:	6122      	str	r2, [r4, #16]
 800dbc4:	f8cd a000 	str.w	sl, [sp]
 800dbc8:	464b      	mov	r3, r9
 800dbca:	aa03      	add	r2, sp, #12
 800dbcc:	4621      	mov	r1, r4
 800dbce:	4640      	mov	r0, r8
 800dbd0:	f7ff fee2 	bl	800d998 <_printf_common>
 800dbd4:	3001      	adds	r0, #1
 800dbd6:	d14c      	bne.n	800dc72 <_printf_i+0x1fe>
 800dbd8:	f04f 30ff 	mov.w	r0, #4294967295
 800dbdc:	b004      	add	sp, #16
 800dbde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dbe2:	4835      	ldr	r0, [pc, #212]	; (800dcb8 <_printf_i+0x244>)
 800dbe4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800dbe8:	6829      	ldr	r1, [r5, #0]
 800dbea:	6823      	ldr	r3, [r4, #0]
 800dbec:	f851 6b04 	ldr.w	r6, [r1], #4
 800dbf0:	6029      	str	r1, [r5, #0]
 800dbf2:	061d      	lsls	r5, r3, #24
 800dbf4:	d514      	bpl.n	800dc20 <_printf_i+0x1ac>
 800dbf6:	07df      	lsls	r7, r3, #31
 800dbf8:	bf44      	itt	mi
 800dbfa:	f043 0320 	orrmi.w	r3, r3, #32
 800dbfe:	6023      	strmi	r3, [r4, #0]
 800dc00:	b91e      	cbnz	r6, 800dc0a <_printf_i+0x196>
 800dc02:	6823      	ldr	r3, [r4, #0]
 800dc04:	f023 0320 	bic.w	r3, r3, #32
 800dc08:	6023      	str	r3, [r4, #0]
 800dc0a:	2310      	movs	r3, #16
 800dc0c:	e7b0      	b.n	800db70 <_printf_i+0xfc>
 800dc0e:	6823      	ldr	r3, [r4, #0]
 800dc10:	f043 0320 	orr.w	r3, r3, #32
 800dc14:	6023      	str	r3, [r4, #0]
 800dc16:	2378      	movs	r3, #120	; 0x78
 800dc18:	4828      	ldr	r0, [pc, #160]	; (800dcbc <_printf_i+0x248>)
 800dc1a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800dc1e:	e7e3      	b.n	800dbe8 <_printf_i+0x174>
 800dc20:	0659      	lsls	r1, r3, #25
 800dc22:	bf48      	it	mi
 800dc24:	b2b6      	uxthmi	r6, r6
 800dc26:	e7e6      	b.n	800dbf6 <_printf_i+0x182>
 800dc28:	4615      	mov	r5, r2
 800dc2a:	e7bb      	b.n	800dba4 <_printf_i+0x130>
 800dc2c:	682b      	ldr	r3, [r5, #0]
 800dc2e:	6826      	ldr	r6, [r4, #0]
 800dc30:	6961      	ldr	r1, [r4, #20]
 800dc32:	1d18      	adds	r0, r3, #4
 800dc34:	6028      	str	r0, [r5, #0]
 800dc36:	0635      	lsls	r5, r6, #24
 800dc38:	681b      	ldr	r3, [r3, #0]
 800dc3a:	d501      	bpl.n	800dc40 <_printf_i+0x1cc>
 800dc3c:	6019      	str	r1, [r3, #0]
 800dc3e:	e002      	b.n	800dc46 <_printf_i+0x1d2>
 800dc40:	0670      	lsls	r0, r6, #25
 800dc42:	d5fb      	bpl.n	800dc3c <_printf_i+0x1c8>
 800dc44:	8019      	strh	r1, [r3, #0]
 800dc46:	2300      	movs	r3, #0
 800dc48:	6123      	str	r3, [r4, #16]
 800dc4a:	4615      	mov	r5, r2
 800dc4c:	e7ba      	b.n	800dbc4 <_printf_i+0x150>
 800dc4e:	682b      	ldr	r3, [r5, #0]
 800dc50:	1d1a      	adds	r2, r3, #4
 800dc52:	602a      	str	r2, [r5, #0]
 800dc54:	681d      	ldr	r5, [r3, #0]
 800dc56:	6862      	ldr	r2, [r4, #4]
 800dc58:	2100      	movs	r1, #0
 800dc5a:	4628      	mov	r0, r5
 800dc5c:	f7f2 fad8 	bl	8000210 <memchr>
 800dc60:	b108      	cbz	r0, 800dc66 <_printf_i+0x1f2>
 800dc62:	1b40      	subs	r0, r0, r5
 800dc64:	6060      	str	r0, [r4, #4]
 800dc66:	6863      	ldr	r3, [r4, #4]
 800dc68:	6123      	str	r3, [r4, #16]
 800dc6a:	2300      	movs	r3, #0
 800dc6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dc70:	e7a8      	b.n	800dbc4 <_printf_i+0x150>
 800dc72:	6923      	ldr	r3, [r4, #16]
 800dc74:	462a      	mov	r2, r5
 800dc76:	4649      	mov	r1, r9
 800dc78:	4640      	mov	r0, r8
 800dc7a:	47d0      	blx	sl
 800dc7c:	3001      	adds	r0, #1
 800dc7e:	d0ab      	beq.n	800dbd8 <_printf_i+0x164>
 800dc80:	6823      	ldr	r3, [r4, #0]
 800dc82:	079b      	lsls	r3, r3, #30
 800dc84:	d413      	bmi.n	800dcae <_printf_i+0x23a>
 800dc86:	68e0      	ldr	r0, [r4, #12]
 800dc88:	9b03      	ldr	r3, [sp, #12]
 800dc8a:	4298      	cmp	r0, r3
 800dc8c:	bfb8      	it	lt
 800dc8e:	4618      	movlt	r0, r3
 800dc90:	e7a4      	b.n	800dbdc <_printf_i+0x168>
 800dc92:	2301      	movs	r3, #1
 800dc94:	4632      	mov	r2, r6
 800dc96:	4649      	mov	r1, r9
 800dc98:	4640      	mov	r0, r8
 800dc9a:	47d0      	blx	sl
 800dc9c:	3001      	adds	r0, #1
 800dc9e:	d09b      	beq.n	800dbd8 <_printf_i+0x164>
 800dca0:	3501      	adds	r5, #1
 800dca2:	68e3      	ldr	r3, [r4, #12]
 800dca4:	9903      	ldr	r1, [sp, #12]
 800dca6:	1a5b      	subs	r3, r3, r1
 800dca8:	42ab      	cmp	r3, r5
 800dcaa:	dcf2      	bgt.n	800dc92 <_printf_i+0x21e>
 800dcac:	e7eb      	b.n	800dc86 <_printf_i+0x212>
 800dcae:	2500      	movs	r5, #0
 800dcb0:	f104 0619 	add.w	r6, r4, #25
 800dcb4:	e7f5      	b.n	800dca2 <_printf_i+0x22e>
 800dcb6:	bf00      	nop
 800dcb8:	08011cd6 	.word	0x08011cd6
 800dcbc:	08011ce7 	.word	0x08011ce7

0800dcc0 <siprintf>:
 800dcc0:	b40e      	push	{r1, r2, r3}
 800dcc2:	b500      	push	{lr}
 800dcc4:	b09c      	sub	sp, #112	; 0x70
 800dcc6:	ab1d      	add	r3, sp, #116	; 0x74
 800dcc8:	9002      	str	r0, [sp, #8]
 800dcca:	9006      	str	r0, [sp, #24]
 800dccc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800dcd0:	4809      	ldr	r0, [pc, #36]	; (800dcf8 <siprintf+0x38>)
 800dcd2:	9107      	str	r1, [sp, #28]
 800dcd4:	9104      	str	r1, [sp, #16]
 800dcd6:	4909      	ldr	r1, [pc, #36]	; (800dcfc <siprintf+0x3c>)
 800dcd8:	f853 2b04 	ldr.w	r2, [r3], #4
 800dcdc:	9105      	str	r1, [sp, #20]
 800dcde:	6800      	ldr	r0, [r0, #0]
 800dce0:	9301      	str	r3, [sp, #4]
 800dce2:	a902      	add	r1, sp, #8
 800dce4:	f001 fb8c 	bl	800f400 <_svfiprintf_r>
 800dce8:	9b02      	ldr	r3, [sp, #8]
 800dcea:	2200      	movs	r2, #0
 800dcec:	701a      	strb	r2, [r3, #0]
 800dcee:	b01c      	add	sp, #112	; 0x70
 800dcf0:	f85d eb04 	ldr.w	lr, [sp], #4
 800dcf4:	b003      	add	sp, #12
 800dcf6:	4770      	bx	lr
 800dcf8:	20000020 	.word	0x20000020
 800dcfc:	ffff0208 	.word	0xffff0208

0800dd00 <strcpy>:
 800dd00:	4603      	mov	r3, r0
 800dd02:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dd06:	f803 2b01 	strb.w	r2, [r3], #1
 800dd0a:	2a00      	cmp	r2, #0
 800dd0c:	d1f9      	bne.n	800dd02 <strcpy+0x2>
 800dd0e:	4770      	bx	lr

0800dd10 <strpbrk>:
 800dd10:	b570      	push	{r4, r5, r6, lr}
 800dd12:	7803      	ldrb	r3, [r0, #0]
 800dd14:	b1a3      	cbz	r3, 800dd40 <strpbrk+0x30>
 800dd16:	4603      	mov	r3, r0
 800dd18:	460c      	mov	r4, r1
 800dd1a:	4618      	mov	r0, r3
 800dd1c:	f813 5b01 	ldrb.w	r5, [r3], #1
 800dd20:	b14d      	cbz	r5, 800dd36 <strpbrk+0x26>
 800dd22:	460a      	mov	r2, r1
 800dd24:	e001      	b.n	800dd2a <strpbrk+0x1a>
 800dd26:	42ae      	cmp	r6, r5
 800dd28:	d009      	beq.n	800dd3e <strpbrk+0x2e>
 800dd2a:	4614      	mov	r4, r2
 800dd2c:	f812 6b01 	ldrb.w	r6, [r2], #1
 800dd30:	2e00      	cmp	r6, #0
 800dd32:	d1f8      	bne.n	800dd26 <strpbrk+0x16>
 800dd34:	e7f1      	b.n	800dd1a <strpbrk+0xa>
 800dd36:	7823      	ldrb	r3, [r4, #0]
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	bf08      	it	eq
 800dd3c:	2000      	moveq	r0, #0
 800dd3e:	bd70      	pop	{r4, r5, r6, pc}
 800dd40:	4618      	mov	r0, r3
 800dd42:	e7fc      	b.n	800dd3e <strpbrk+0x2e>

0800dd44 <quorem>:
 800dd44:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd48:	6903      	ldr	r3, [r0, #16]
 800dd4a:	690c      	ldr	r4, [r1, #16]
 800dd4c:	42a3      	cmp	r3, r4
 800dd4e:	4607      	mov	r7, r0
 800dd50:	f2c0 8081 	blt.w	800de56 <quorem+0x112>
 800dd54:	3c01      	subs	r4, #1
 800dd56:	f101 0814 	add.w	r8, r1, #20
 800dd5a:	f100 0514 	add.w	r5, r0, #20
 800dd5e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800dd62:	9301      	str	r3, [sp, #4]
 800dd64:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800dd68:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800dd6c:	3301      	adds	r3, #1
 800dd6e:	429a      	cmp	r2, r3
 800dd70:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800dd74:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800dd78:	fbb2 f6f3 	udiv	r6, r2, r3
 800dd7c:	d331      	bcc.n	800dde2 <quorem+0x9e>
 800dd7e:	f04f 0e00 	mov.w	lr, #0
 800dd82:	4640      	mov	r0, r8
 800dd84:	46ac      	mov	ip, r5
 800dd86:	46f2      	mov	sl, lr
 800dd88:	f850 2b04 	ldr.w	r2, [r0], #4
 800dd8c:	b293      	uxth	r3, r2
 800dd8e:	fb06 e303 	mla	r3, r6, r3, lr
 800dd92:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800dd96:	b29b      	uxth	r3, r3
 800dd98:	ebaa 0303 	sub.w	r3, sl, r3
 800dd9c:	f8dc a000 	ldr.w	sl, [ip]
 800dda0:	0c12      	lsrs	r2, r2, #16
 800dda2:	fa13 f38a 	uxtah	r3, r3, sl
 800dda6:	fb06 e202 	mla	r2, r6, r2, lr
 800ddaa:	9300      	str	r3, [sp, #0]
 800ddac:	9b00      	ldr	r3, [sp, #0]
 800ddae:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ddb2:	b292      	uxth	r2, r2
 800ddb4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800ddb8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ddbc:	f8bd 3000 	ldrh.w	r3, [sp]
 800ddc0:	4581      	cmp	r9, r0
 800ddc2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ddc6:	f84c 3b04 	str.w	r3, [ip], #4
 800ddca:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800ddce:	d2db      	bcs.n	800dd88 <quorem+0x44>
 800ddd0:	f855 300b 	ldr.w	r3, [r5, fp]
 800ddd4:	b92b      	cbnz	r3, 800dde2 <quorem+0x9e>
 800ddd6:	9b01      	ldr	r3, [sp, #4]
 800ddd8:	3b04      	subs	r3, #4
 800ddda:	429d      	cmp	r5, r3
 800dddc:	461a      	mov	r2, r3
 800ddde:	d32e      	bcc.n	800de3e <quorem+0xfa>
 800dde0:	613c      	str	r4, [r7, #16]
 800dde2:	4638      	mov	r0, r7
 800dde4:	f001 f8b8 	bl	800ef58 <__mcmp>
 800dde8:	2800      	cmp	r0, #0
 800ddea:	db24      	blt.n	800de36 <quorem+0xf2>
 800ddec:	3601      	adds	r6, #1
 800ddee:	4628      	mov	r0, r5
 800ddf0:	f04f 0c00 	mov.w	ip, #0
 800ddf4:	f858 2b04 	ldr.w	r2, [r8], #4
 800ddf8:	f8d0 e000 	ldr.w	lr, [r0]
 800ddfc:	b293      	uxth	r3, r2
 800ddfe:	ebac 0303 	sub.w	r3, ip, r3
 800de02:	0c12      	lsrs	r2, r2, #16
 800de04:	fa13 f38e 	uxtah	r3, r3, lr
 800de08:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800de0c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800de10:	b29b      	uxth	r3, r3
 800de12:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800de16:	45c1      	cmp	r9, r8
 800de18:	f840 3b04 	str.w	r3, [r0], #4
 800de1c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800de20:	d2e8      	bcs.n	800ddf4 <quorem+0xb0>
 800de22:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800de26:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800de2a:	b922      	cbnz	r2, 800de36 <quorem+0xf2>
 800de2c:	3b04      	subs	r3, #4
 800de2e:	429d      	cmp	r5, r3
 800de30:	461a      	mov	r2, r3
 800de32:	d30a      	bcc.n	800de4a <quorem+0x106>
 800de34:	613c      	str	r4, [r7, #16]
 800de36:	4630      	mov	r0, r6
 800de38:	b003      	add	sp, #12
 800de3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de3e:	6812      	ldr	r2, [r2, #0]
 800de40:	3b04      	subs	r3, #4
 800de42:	2a00      	cmp	r2, #0
 800de44:	d1cc      	bne.n	800dde0 <quorem+0x9c>
 800de46:	3c01      	subs	r4, #1
 800de48:	e7c7      	b.n	800ddda <quorem+0x96>
 800de4a:	6812      	ldr	r2, [r2, #0]
 800de4c:	3b04      	subs	r3, #4
 800de4e:	2a00      	cmp	r2, #0
 800de50:	d1f0      	bne.n	800de34 <quorem+0xf0>
 800de52:	3c01      	subs	r4, #1
 800de54:	e7eb      	b.n	800de2e <quorem+0xea>
 800de56:	2000      	movs	r0, #0
 800de58:	e7ee      	b.n	800de38 <quorem+0xf4>
 800de5a:	0000      	movs	r0, r0
 800de5c:	0000      	movs	r0, r0
	...

0800de60 <_dtoa_r>:
 800de60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de64:	ed2d 8b04 	vpush	{d8-d9}
 800de68:	ec57 6b10 	vmov	r6, r7, d0
 800de6c:	b093      	sub	sp, #76	; 0x4c
 800de6e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800de70:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800de74:	9106      	str	r1, [sp, #24]
 800de76:	ee10 aa10 	vmov	sl, s0
 800de7a:	4604      	mov	r4, r0
 800de7c:	9209      	str	r2, [sp, #36]	; 0x24
 800de7e:	930c      	str	r3, [sp, #48]	; 0x30
 800de80:	46bb      	mov	fp, r7
 800de82:	b975      	cbnz	r5, 800dea2 <_dtoa_r+0x42>
 800de84:	2010      	movs	r0, #16
 800de86:	f000 fddd 	bl	800ea44 <malloc>
 800de8a:	4602      	mov	r2, r0
 800de8c:	6260      	str	r0, [r4, #36]	; 0x24
 800de8e:	b920      	cbnz	r0, 800de9a <_dtoa_r+0x3a>
 800de90:	4ba7      	ldr	r3, [pc, #668]	; (800e130 <_dtoa_r+0x2d0>)
 800de92:	21ea      	movs	r1, #234	; 0xea
 800de94:	48a7      	ldr	r0, [pc, #668]	; (800e134 <_dtoa_r+0x2d4>)
 800de96:	f001 fbc3 	bl	800f620 <__assert_func>
 800de9a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800de9e:	6005      	str	r5, [r0, #0]
 800dea0:	60c5      	str	r5, [r0, #12]
 800dea2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dea4:	6819      	ldr	r1, [r3, #0]
 800dea6:	b151      	cbz	r1, 800debe <_dtoa_r+0x5e>
 800dea8:	685a      	ldr	r2, [r3, #4]
 800deaa:	604a      	str	r2, [r1, #4]
 800deac:	2301      	movs	r3, #1
 800deae:	4093      	lsls	r3, r2
 800deb0:	608b      	str	r3, [r1, #8]
 800deb2:	4620      	mov	r0, r4
 800deb4:	f000 fe0e 	bl	800ead4 <_Bfree>
 800deb8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800deba:	2200      	movs	r2, #0
 800debc:	601a      	str	r2, [r3, #0]
 800debe:	1e3b      	subs	r3, r7, #0
 800dec0:	bfaa      	itet	ge
 800dec2:	2300      	movge	r3, #0
 800dec4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800dec8:	f8c8 3000 	strge.w	r3, [r8]
 800decc:	4b9a      	ldr	r3, [pc, #616]	; (800e138 <_dtoa_r+0x2d8>)
 800dece:	bfbc      	itt	lt
 800ded0:	2201      	movlt	r2, #1
 800ded2:	f8c8 2000 	strlt.w	r2, [r8]
 800ded6:	ea33 030b 	bics.w	r3, r3, fp
 800deda:	d11b      	bne.n	800df14 <_dtoa_r+0xb4>
 800dedc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800dede:	f242 730f 	movw	r3, #9999	; 0x270f
 800dee2:	6013      	str	r3, [r2, #0]
 800dee4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800dee8:	4333      	orrs	r3, r6
 800deea:	f000 8592 	beq.w	800ea12 <_dtoa_r+0xbb2>
 800deee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800def0:	b963      	cbnz	r3, 800df0c <_dtoa_r+0xac>
 800def2:	4b92      	ldr	r3, [pc, #584]	; (800e13c <_dtoa_r+0x2dc>)
 800def4:	e022      	b.n	800df3c <_dtoa_r+0xdc>
 800def6:	4b92      	ldr	r3, [pc, #584]	; (800e140 <_dtoa_r+0x2e0>)
 800def8:	9301      	str	r3, [sp, #4]
 800defa:	3308      	adds	r3, #8
 800defc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800defe:	6013      	str	r3, [r2, #0]
 800df00:	9801      	ldr	r0, [sp, #4]
 800df02:	b013      	add	sp, #76	; 0x4c
 800df04:	ecbd 8b04 	vpop	{d8-d9}
 800df08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df0c:	4b8b      	ldr	r3, [pc, #556]	; (800e13c <_dtoa_r+0x2dc>)
 800df0e:	9301      	str	r3, [sp, #4]
 800df10:	3303      	adds	r3, #3
 800df12:	e7f3      	b.n	800defc <_dtoa_r+0x9c>
 800df14:	2200      	movs	r2, #0
 800df16:	2300      	movs	r3, #0
 800df18:	4650      	mov	r0, sl
 800df1a:	4659      	mov	r1, fp
 800df1c:	f7f2 fdec 	bl	8000af8 <__aeabi_dcmpeq>
 800df20:	ec4b ab19 	vmov	d9, sl, fp
 800df24:	4680      	mov	r8, r0
 800df26:	b158      	cbz	r0, 800df40 <_dtoa_r+0xe0>
 800df28:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800df2a:	2301      	movs	r3, #1
 800df2c:	6013      	str	r3, [r2, #0]
 800df2e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800df30:	2b00      	cmp	r3, #0
 800df32:	f000 856b 	beq.w	800ea0c <_dtoa_r+0xbac>
 800df36:	4883      	ldr	r0, [pc, #524]	; (800e144 <_dtoa_r+0x2e4>)
 800df38:	6018      	str	r0, [r3, #0]
 800df3a:	1e43      	subs	r3, r0, #1
 800df3c:	9301      	str	r3, [sp, #4]
 800df3e:	e7df      	b.n	800df00 <_dtoa_r+0xa0>
 800df40:	ec4b ab10 	vmov	d0, sl, fp
 800df44:	aa10      	add	r2, sp, #64	; 0x40
 800df46:	a911      	add	r1, sp, #68	; 0x44
 800df48:	4620      	mov	r0, r4
 800df4a:	f001 f8ab 	bl	800f0a4 <__d2b>
 800df4e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800df52:	ee08 0a10 	vmov	s16, r0
 800df56:	2d00      	cmp	r5, #0
 800df58:	f000 8084 	beq.w	800e064 <_dtoa_r+0x204>
 800df5c:	ee19 3a90 	vmov	r3, s19
 800df60:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800df64:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800df68:	4656      	mov	r6, sl
 800df6a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800df6e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800df72:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800df76:	4b74      	ldr	r3, [pc, #464]	; (800e148 <_dtoa_r+0x2e8>)
 800df78:	2200      	movs	r2, #0
 800df7a:	4630      	mov	r0, r6
 800df7c:	4639      	mov	r1, r7
 800df7e:	f7f2 f99b 	bl	80002b8 <__aeabi_dsub>
 800df82:	a365      	add	r3, pc, #404	; (adr r3, 800e118 <_dtoa_r+0x2b8>)
 800df84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df88:	f7f2 fb4e 	bl	8000628 <__aeabi_dmul>
 800df8c:	a364      	add	r3, pc, #400	; (adr r3, 800e120 <_dtoa_r+0x2c0>)
 800df8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df92:	f7f2 f993 	bl	80002bc <__adddf3>
 800df96:	4606      	mov	r6, r0
 800df98:	4628      	mov	r0, r5
 800df9a:	460f      	mov	r7, r1
 800df9c:	f7f2 fada 	bl	8000554 <__aeabi_i2d>
 800dfa0:	a361      	add	r3, pc, #388	; (adr r3, 800e128 <_dtoa_r+0x2c8>)
 800dfa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfa6:	f7f2 fb3f 	bl	8000628 <__aeabi_dmul>
 800dfaa:	4602      	mov	r2, r0
 800dfac:	460b      	mov	r3, r1
 800dfae:	4630      	mov	r0, r6
 800dfb0:	4639      	mov	r1, r7
 800dfb2:	f7f2 f983 	bl	80002bc <__adddf3>
 800dfb6:	4606      	mov	r6, r0
 800dfb8:	460f      	mov	r7, r1
 800dfba:	f7f2 fde5 	bl	8000b88 <__aeabi_d2iz>
 800dfbe:	2200      	movs	r2, #0
 800dfc0:	9000      	str	r0, [sp, #0]
 800dfc2:	2300      	movs	r3, #0
 800dfc4:	4630      	mov	r0, r6
 800dfc6:	4639      	mov	r1, r7
 800dfc8:	f7f2 fda0 	bl	8000b0c <__aeabi_dcmplt>
 800dfcc:	b150      	cbz	r0, 800dfe4 <_dtoa_r+0x184>
 800dfce:	9800      	ldr	r0, [sp, #0]
 800dfd0:	f7f2 fac0 	bl	8000554 <__aeabi_i2d>
 800dfd4:	4632      	mov	r2, r6
 800dfd6:	463b      	mov	r3, r7
 800dfd8:	f7f2 fd8e 	bl	8000af8 <__aeabi_dcmpeq>
 800dfdc:	b910      	cbnz	r0, 800dfe4 <_dtoa_r+0x184>
 800dfde:	9b00      	ldr	r3, [sp, #0]
 800dfe0:	3b01      	subs	r3, #1
 800dfe2:	9300      	str	r3, [sp, #0]
 800dfe4:	9b00      	ldr	r3, [sp, #0]
 800dfe6:	2b16      	cmp	r3, #22
 800dfe8:	d85a      	bhi.n	800e0a0 <_dtoa_r+0x240>
 800dfea:	9a00      	ldr	r2, [sp, #0]
 800dfec:	4b57      	ldr	r3, [pc, #348]	; (800e14c <_dtoa_r+0x2ec>)
 800dfee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dff6:	ec51 0b19 	vmov	r0, r1, d9
 800dffa:	f7f2 fd87 	bl	8000b0c <__aeabi_dcmplt>
 800dffe:	2800      	cmp	r0, #0
 800e000:	d050      	beq.n	800e0a4 <_dtoa_r+0x244>
 800e002:	9b00      	ldr	r3, [sp, #0]
 800e004:	3b01      	subs	r3, #1
 800e006:	9300      	str	r3, [sp, #0]
 800e008:	2300      	movs	r3, #0
 800e00a:	930b      	str	r3, [sp, #44]	; 0x2c
 800e00c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e00e:	1b5d      	subs	r5, r3, r5
 800e010:	1e6b      	subs	r3, r5, #1
 800e012:	9305      	str	r3, [sp, #20]
 800e014:	bf45      	ittet	mi
 800e016:	f1c5 0301 	rsbmi	r3, r5, #1
 800e01a:	9304      	strmi	r3, [sp, #16]
 800e01c:	2300      	movpl	r3, #0
 800e01e:	2300      	movmi	r3, #0
 800e020:	bf4c      	ite	mi
 800e022:	9305      	strmi	r3, [sp, #20]
 800e024:	9304      	strpl	r3, [sp, #16]
 800e026:	9b00      	ldr	r3, [sp, #0]
 800e028:	2b00      	cmp	r3, #0
 800e02a:	db3d      	blt.n	800e0a8 <_dtoa_r+0x248>
 800e02c:	9b05      	ldr	r3, [sp, #20]
 800e02e:	9a00      	ldr	r2, [sp, #0]
 800e030:	920a      	str	r2, [sp, #40]	; 0x28
 800e032:	4413      	add	r3, r2
 800e034:	9305      	str	r3, [sp, #20]
 800e036:	2300      	movs	r3, #0
 800e038:	9307      	str	r3, [sp, #28]
 800e03a:	9b06      	ldr	r3, [sp, #24]
 800e03c:	2b09      	cmp	r3, #9
 800e03e:	f200 8089 	bhi.w	800e154 <_dtoa_r+0x2f4>
 800e042:	2b05      	cmp	r3, #5
 800e044:	bfc4      	itt	gt
 800e046:	3b04      	subgt	r3, #4
 800e048:	9306      	strgt	r3, [sp, #24]
 800e04a:	9b06      	ldr	r3, [sp, #24]
 800e04c:	f1a3 0302 	sub.w	r3, r3, #2
 800e050:	bfcc      	ite	gt
 800e052:	2500      	movgt	r5, #0
 800e054:	2501      	movle	r5, #1
 800e056:	2b03      	cmp	r3, #3
 800e058:	f200 8087 	bhi.w	800e16a <_dtoa_r+0x30a>
 800e05c:	e8df f003 	tbb	[pc, r3]
 800e060:	59383a2d 	.word	0x59383a2d
 800e064:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800e068:	441d      	add	r5, r3
 800e06a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800e06e:	2b20      	cmp	r3, #32
 800e070:	bfc1      	itttt	gt
 800e072:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800e076:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800e07a:	fa0b f303 	lslgt.w	r3, fp, r3
 800e07e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800e082:	bfda      	itte	le
 800e084:	f1c3 0320 	rsble	r3, r3, #32
 800e088:	fa06 f003 	lslle.w	r0, r6, r3
 800e08c:	4318      	orrgt	r0, r3
 800e08e:	f7f2 fa51 	bl	8000534 <__aeabi_ui2d>
 800e092:	2301      	movs	r3, #1
 800e094:	4606      	mov	r6, r0
 800e096:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800e09a:	3d01      	subs	r5, #1
 800e09c:	930e      	str	r3, [sp, #56]	; 0x38
 800e09e:	e76a      	b.n	800df76 <_dtoa_r+0x116>
 800e0a0:	2301      	movs	r3, #1
 800e0a2:	e7b2      	b.n	800e00a <_dtoa_r+0x1aa>
 800e0a4:	900b      	str	r0, [sp, #44]	; 0x2c
 800e0a6:	e7b1      	b.n	800e00c <_dtoa_r+0x1ac>
 800e0a8:	9b04      	ldr	r3, [sp, #16]
 800e0aa:	9a00      	ldr	r2, [sp, #0]
 800e0ac:	1a9b      	subs	r3, r3, r2
 800e0ae:	9304      	str	r3, [sp, #16]
 800e0b0:	4253      	negs	r3, r2
 800e0b2:	9307      	str	r3, [sp, #28]
 800e0b4:	2300      	movs	r3, #0
 800e0b6:	930a      	str	r3, [sp, #40]	; 0x28
 800e0b8:	e7bf      	b.n	800e03a <_dtoa_r+0x1da>
 800e0ba:	2300      	movs	r3, #0
 800e0bc:	9308      	str	r3, [sp, #32]
 800e0be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	dc55      	bgt.n	800e170 <_dtoa_r+0x310>
 800e0c4:	2301      	movs	r3, #1
 800e0c6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e0ca:	461a      	mov	r2, r3
 800e0cc:	9209      	str	r2, [sp, #36]	; 0x24
 800e0ce:	e00c      	b.n	800e0ea <_dtoa_r+0x28a>
 800e0d0:	2301      	movs	r3, #1
 800e0d2:	e7f3      	b.n	800e0bc <_dtoa_r+0x25c>
 800e0d4:	2300      	movs	r3, #0
 800e0d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e0d8:	9308      	str	r3, [sp, #32]
 800e0da:	9b00      	ldr	r3, [sp, #0]
 800e0dc:	4413      	add	r3, r2
 800e0de:	9302      	str	r3, [sp, #8]
 800e0e0:	3301      	adds	r3, #1
 800e0e2:	2b01      	cmp	r3, #1
 800e0e4:	9303      	str	r3, [sp, #12]
 800e0e6:	bfb8      	it	lt
 800e0e8:	2301      	movlt	r3, #1
 800e0ea:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800e0ec:	2200      	movs	r2, #0
 800e0ee:	6042      	str	r2, [r0, #4]
 800e0f0:	2204      	movs	r2, #4
 800e0f2:	f102 0614 	add.w	r6, r2, #20
 800e0f6:	429e      	cmp	r6, r3
 800e0f8:	6841      	ldr	r1, [r0, #4]
 800e0fa:	d93d      	bls.n	800e178 <_dtoa_r+0x318>
 800e0fc:	4620      	mov	r0, r4
 800e0fe:	f000 fca9 	bl	800ea54 <_Balloc>
 800e102:	9001      	str	r0, [sp, #4]
 800e104:	2800      	cmp	r0, #0
 800e106:	d13b      	bne.n	800e180 <_dtoa_r+0x320>
 800e108:	4b11      	ldr	r3, [pc, #68]	; (800e150 <_dtoa_r+0x2f0>)
 800e10a:	4602      	mov	r2, r0
 800e10c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800e110:	e6c0      	b.n	800de94 <_dtoa_r+0x34>
 800e112:	2301      	movs	r3, #1
 800e114:	e7df      	b.n	800e0d6 <_dtoa_r+0x276>
 800e116:	bf00      	nop
 800e118:	636f4361 	.word	0x636f4361
 800e11c:	3fd287a7 	.word	0x3fd287a7
 800e120:	8b60c8b3 	.word	0x8b60c8b3
 800e124:	3fc68a28 	.word	0x3fc68a28
 800e128:	509f79fb 	.word	0x509f79fb
 800e12c:	3fd34413 	.word	0x3fd34413
 800e130:	08011d05 	.word	0x08011d05
 800e134:	08011d1c 	.word	0x08011d1c
 800e138:	7ff00000 	.word	0x7ff00000
 800e13c:	08011d01 	.word	0x08011d01
 800e140:	08011cf8 	.word	0x08011cf8
 800e144:	08011cd5 	.word	0x08011cd5
 800e148:	3ff80000 	.word	0x3ff80000
 800e14c:	08011e10 	.word	0x08011e10
 800e150:	08011d77 	.word	0x08011d77
 800e154:	2501      	movs	r5, #1
 800e156:	2300      	movs	r3, #0
 800e158:	9306      	str	r3, [sp, #24]
 800e15a:	9508      	str	r5, [sp, #32]
 800e15c:	f04f 33ff 	mov.w	r3, #4294967295
 800e160:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e164:	2200      	movs	r2, #0
 800e166:	2312      	movs	r3, #18
 800e168:	e7b0      	b.n	800e0cc <_dtoa_r+0x26c>
 800e16a:	2301      	movs	r3, #1
 800e16c:	9308      	str	r3, [sp, #32]
 800e16e:	e7f5      	b.n	800e15c <_dtoa_r+0x2fc>
 800e170:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e172:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e176:	e7b8      	b.n	800e0ea <_dtoa_r+0x28a>
 800e178:	3101      	adds	r1, #1
 800e17a:	6041      	str	r1, [r0, #4]
 800e17c:	0052      	lsls	r2, r2, #1
 800e17e:	e7b8      	b.n	800e0f2 <_dtoa_r+0x292>
 800e180:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e182:	9a01      	ldr	r2, [sp, #4]
 800e184:	601a      	str	r2, [r3, #0]
 800e186:	9b03      	ldr	r3, [sp, #12]
 800e188:	2b0e      	cmp	r3, #14
 800e18a:	f200 809d 	bhi.w	800e2c8 <_dtoa_r+0x468>
 800e18e:	2d00      	cmp	r5, #0
 800e190:	f000 809a 	beq.w	800e2c8 <_dtoa_r+0x468>
 800e194:	9b00      	ldr	r3, [sp, #0]
 800e196:	2b00      	cmp	r3, #0
 800e198:	dd32      	ble.n	800e200 <_dtoa_r+0x3a0>
 800e19a:	4ab7      	ldr	r2, [pc, #732]	; (800e478 <_dtoa_r+0x618>)
 800e19c:	f003 030f 	and.w	r3, r3, #15
 800e1a0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800e1a4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e1a8:	9b00      	ldr	r3, [sp, #0]
 800e1aa:	05d8      	lsls	r0, r3, #23
 800e1ac:	ea4f 1723 	mov.w	r7, r3, asr #4
 800e1b0:	d516      	bpl.n	800e1e0 <_dtoa_r+0x380>
 800e1b2:	4bb2      	ldr	r3, [pc, #712]	; (800e47c <_dtoa_r+0x61c>)
 800e1b4:	ec51 0b19 	vmov	r0, r1, d9
 800e1b8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e1bc:	f7f2 fb5e 	bl	800087c <__aeabi_ddiv>
 800e1c0:	f007 070f 	and.w	r7, r7, #15
 800e1c4:	4682      	mov	sl, r0
 800e1c6:	468b      	mov	fp, r1
 800e1c8:	2503      	movs	r5, #3
 800e1ca:	4eac      	ldr	r6, [pc, #688]	; (800e47c <_dtoa_r+0x61c>)
 800e1cc:	b957      	cbnz	r7, 800e1e4 <_dtoa_r+0x384>
 800e1ce:	4642      	mov	r2, r8
 800e1d0:	464b      	mov	r3, r9
 800e1d2:	4650      	mov	r0, sl
 800e1d4:	4659      	mov	r1, fp
 800e1d6:	f7f2 fb51 	bl	800087c <__aeabi_ddiv>
 800e1da:	4682      	mov	sl, r0
 800e1dc:	468b      	mov	fp, r1
 800e1de:	e028      	b.n	800e232 <_dtoa_r+0x3d2>
 800e1e0:	2502      	movs	r5, #2
 800e1e2:	e7f2      	b.n	800e1ca <_dtoa_r+0x36a>
 800e1e4:	07f9      	lsls	r1, r7, #31
 800e1e6:	d508      	bpl.n	800e1fa <_dtoa_r+0x39a>
 800e1e8:	4640      	mov	r0, r8
 800e1ea:	4649      	mov	r1, r9
 800e1ec:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e1f0:	f7f2 fa1a 	bl	8000628 <__aeabi_dmul>
 800e1f4:	3501      	adds	r5, #1
 800e1f6:	4680      	mov	r8, r0
 800e1f8:	4689      	mov	r9, r1
 800e1fa:	107f      	asrs	r7, r7, #1
 800e1fc:	3608      	adds	r6, #8
 800e1fe:	e7e5      	b.n	800e1cc <_dtoa_r+0x36c>
 800e200:	f000 809b 	beq.w	800e33a <_dtoa_r+0x4da>
 800e204:	9b00      	ldr	r3, [sp, #0]
 800e206:	4f9d      	ldr	r7, [pc, #628]	; (800e47c <_dtoa_r+0x61c>)
 800e208:	425e      	negs	r6, r3
 800e20a:	4b9b      	ldr	r3, [pc, #620]	; (800e478 <_dtoa_r+0x618>)
 800e20c:	f006 020f 	and.w	r2, r6, #15
 800e210:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e214:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e218:	ec51 0b19 	vmov	r0, r1, d9
 800e21c:	f7f2 fa04 	bl	8000628 <__aeabi_dmul>
 800e220:	1136      	asrs	r6, r6, #4
 800e222:	4682      	mov	sl, r0
 800e224:	468b      	mov	fp, r1
 800e226:	2300      	movs	r3, #0
 800e228:	2502      	movs	r5, #2
 800e22a:	2e00      	cmp	r6, #0
 800e22c:	d17a      	bne.n	800e324 <_dtoa_r+0x4c4>
 800e22e:	2b00      	cmp	r3, #0
 800e230:	d1d3      	bne.n	800e1da <_dtoa_r+0x37a>
 800e232:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e234:	2b00      	cmp	r3, #0
 800e236:	f000 8082 	beq.w	800e33e <_dtoa_r+0x4de>
 800e23a:	4b91      	ldr	r3, [pc, #580]	; (800e480 <_dtoa_r+0x620>)
 800e23c:	2200      	movs	r2, #0
 800e23e:	4650      	mov	r0, sl
 800e240:	4659      	mov	r1, fp
 800e242:	f7f2 fc63 	bl	8000b0c <__aeabi_dcmplt>
 800e246:	2800      	cmp	r0, #0
 800e248:	d079      	beq.n	800e33e <_dtoa_r+0x4de>
 800e24a:	9b03      	ldr	r3, [sp, #12]
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	d076      	beq.n	800e33e <_dtoa_r+0x4de>
 800e250:	9b02      	ldr	r3, [sp, #8]
 800e252:	2b00      	cmp	r3, #0
 800e254:	dd36      	ble.n	800e2c4 <_dtoa_r+0x464>
 800e256:	9b00      	ldr	r3, [sp, #0]
 800e258:	4650      	mov	r0, sl
 800e25a:	4659      	mov	r1, fp
 800e25c:	1e5f      	subs	r7, r3, #1
 800e25e:	2200      	movs	r2, #0
 800e260:	4b88      	ldr	r3, [pc, #544]	; (800e484 <_dtoa_r+0x624>)
 800e262:	f7f2 f9e1 	bl	8000628 <__aeabi_dmul>
 800e266:	9e02      	ldr	r6, [sp, #8]
 800e268:	4682      	mov	sl, r0
 800e26a:	468b      	mov	fp, r1
 800e26c:	3501      	adds	r5, #1
 800e26e:	4628      	mov	r0, r5
 800e270:	f7f2 f970 	bl	8000554 <__aeabi_i2d>
 800e274:	4652      	mov	r2, sl
 800e276:	465b      	mov	r3, fp
 800e278:	f7f2 f9d6 	bl	8000628 <__aeabi_dmul>
 800e27c:	4b82      	ldr	r3, [pc, #520]	; (800e488 <_dtoa_r+0x628>)
 800e27e:	2200      	movs	r2, #0
 800e280:	f7f2 f81c 	bl	80002bc <__adddf3>
 800e284:	46d0      	mov	r8, sl
 800e286:	46d9      	mov	r9, fp
 800e288:	4682      	mov	sl, r0
 800e28a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800e28e:	2e00      	cmp	r6, #0
 800e290:	d158      	bne.n	800e344 <_dtoa_r+0x4e4>
 800e292:	4b7e      	ldr	r3, [pc, #504]	; (800e48c <_dtoa_r+0x62c>)
 800e294:	2200      	movs	r2, #0
 800e296:	4640      	mov	r0, r8
 800e298:	4649      	mov	r1, r9
 800e29a:	f7f2 f80d 	bl	80002b8 <__aeabi_dsub>
 800e29e:	4652      	mov	r2, sl
 800e2a0:	465b      	mov	r3, fp
 800e2a2:	4680      	mov	r8, r0
 800e2a4:	4689      	mov	r9, r1
 800e2a6:	f7f2 fc4f 	bl	8000b48 <__aeabi_dcmpgt>
 800e2aa:	2800      	cmp	r0, #0
 800e2ac:	f040 8295 	bne.w	800e7da <_dtoa_r+0x97a>
 800e2b0:	4652      	mov	r2, sl
 800e2b2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800e2b6:	4640      	mov	r0, r8
 800e2b8:	4649      	mov	r1, r9
 800e2ba:	f7f2 fc27 	bl	8000b0c <__aeabi_dcmplt>
 800e2be:	2800      	cmp	r0, #0
 800e2c0:	f040 8289 	bne.w	800e7d6 <_dtoa_r+0x976>
 800e2c4:	ec5b ab19 	vmov	sl, fp, d9
 800e2c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	f2c0 8148 	blt.w	800e560 <_dtoa_r+0x700>
 800e2d0:	9a00      	ldr	r2, [sp, #0]
 800e2d2:	2a0e      	cmp	r2, #14
 800e2d4:	f300 8144 	bgt.w	800e560 <_dtoa_r+0x700>
 800e2d8:	4b67      	ldr	r3, [pc, #412]	; (800e478 <_dtoa_r+0x618>)
 800e2da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e2de:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e2e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	f280 80d5 	bge.w	800e494 <_dtoa_r+0x634>
 800e2ea:	9b03      	ldr	r3, [sp, #12]
 800e2ec:	2b00      	cmp	r3, #0
 800e2ee:	f300 80d1 	bgt.w	800e494 <_dtoa_r+0x634>
 800e2f2:	f040 826f 	bne.w	800e7d4 <_dtoa_r+0x974>
 800e2f6:	4b65      	ldr	r3, [pc, #404]	; (800e48c <_dtoa_r+0x62c>)
 800e2f8:	2200      	movs	r2, #0
 800e2fa:	4640      	mov	r0, r8
 800e2fc:	4649      	mov	r1, r9
 800e2fe:	f7f2 f993 	bl	8000628 <__aeabi_dmul>
 800e302:	4652      	mov	r2, sl
 800e304:	465b      	mov	r3, fp
 800e306:	f7f2 fc15 	bl	8000b34 <__aeabi_dcmpge>
 800e30a:	9e03      	ldr	r6, [sp, #12]
 800e30c:	4637      	mov	r7, r6
 800e30e:	2800      	cmp	r0, #0
 800e310:	f040 8245 	bne.w	800e79e <_dtoa_r+0x93e>
 800e314:	9d01      	ldr	r5, [sp, #4]
 800e316:	2331      	movs	r3, #49	; 0x31
 800e318:	f805 3b01 	strb.w	r3, [r5], #1
 800e31c:	9b00      	ldr	r3, [sp, #0]
 800e31e:	3301      	adds	r3, #1
 800e320:	9300      	str	r3, [sp, #0]
 800e322:	e240      	b.n	800e7a6 <_dtoa_r+0x946>
 800e324:	07f2      	lsls	r2, r6, #31
 800e326:	d505      	bpl.n	800e334 <_dtoa_r+0x4d4>
 800e328:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e32c:	f7f2 f97c 	bl	8000628 <__aeabi_dmul>
 800e330:	3501      	adds	r5, #1
 800e332:	2301      	movs	r3, #1
 800e334:	1076      	asrs	r6, r6, #1
 800e336:	3708      	adds	r7, #8
 800e338:	e777      	b.n	800e22a <_dtoa_r+0x3ca>
 800e33a:	2502      	movs	r5, #2
 800e33c:	e779      	b.n	800e232 <_dtoa_r+0x3d2>
 800e33e:	9f00      	ldr	r7, [sp, #0]
 800e340:	9e03      	ldr	r6, [sp, #12]
 800e342:	e794      	b.n	800e26e <_dtoa_r+0x40e>
 800e344:	9901      	ldr	r1, [sp, #4]
 800e346:	4b4c      	ldr	r3, [pc, #304]	; (800e478 <_dtoa_r+0x618>)
 800e348:	4431      	add	r1, r6
 800e34a:	910d      	str	r1, [sp, #52]	; 0x34
 800e34c:	9908      	ldr	r1, [sp, #32]
 800e34e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800e352:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e356:	2900      	cmp	r1, #0
 800e358:	d043      	beq.n	800e3e2 <_dtoa_r+0x582>
 800e35a:	494d      	ldr	r1, [pc, #308]	; (800e490 <_dtoa_r+0x630>)
 800e35c:	2000      	movs	r0, #0
 800e35e:	f7f2 fa8d 	bl	800087c <__aeabi_ddiv>
 800e362:	4652      	mov	r2, sl
 800e364:	465b      	mov	r3, fp
 800e366:	f7f1 ffa7 	bl	80002b8 <__aeabi_dsub>
 800e36a:	9d01      	ldr	r5, [sp, #4]
 800e36c:	4682      	mov	sl, r0
 800e36e:	468b      	mov	fp, r1
 800e370:	4649      	mov	r1, r9
 800e372:	4640      	mov	r0, r8
 800e374:	f7f2 fc08 	bl	8000b88 <__aeabi_d2iz>
 800e378:	4606      	mov	r6, r0
 800e37a:	f7f2 f8eb 	bl	8000554 <__aeabi_i2d>
 800e37e:	4602      	mov	r2, r0
 800e380:	460b      	mov	r3, r1
 800e382:	4640      	mov	r0, r8
 800e384:	4649      	mov	r1, r9
 800e386:	f7f1 ff97 	bl	80002b8 <__aeabi_dsub>
 800e38a:	3630      	adds	r6, #48	; 0x30
 800e38c:	f805 6b01 	strb.w	r6, [r5], #1
 800e390:	4652      	mov	r2, sl
 800e392:	465b      	mov	r3, fp
 800e394:	4680      	mov	r8, r0
 800e396:	4689      	mov	r9, r1
 800e398:	f7f2 fbb8 	bl	8000b0c <__aeabi_dcmplt>
 800e39c:	2800      	cmp	r0, #0
 800e39e:	d163      	bne.n	800e468 <_dtoa_r+0x608>
 800e3a0:	4642      	mov	r2, r8
 800e3a2:	464b      	mov	r3, r9
 800e3a4:	4936      	ldr	r1, [pc, #216]	; (800e480 <_dtoa_r+0x620>)
 800e3a6:	2000      	movs	r0, #0
 800e3a8:	f7f1 ff86 	bl	80002b8 <__aeabi_dsub>
 800e3ac:	4652      	mov	r2, sl
 800e3ae:	465b      	mov	r3, fp
 800e3b0:	f7f2 fbac 	bl	8000b0c <__aeabi_dcmplt>
 800e3b4:	2800      	cmp	r0, #0
 800e3b6:	f040 80b5 	bne.w	800e524 <_dtoa_r+0x6c4>
 800e3ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e3bc:	429d      	cmp	r5, r3
 800e3be:	d081      	beq.n	800e2c4 <_dtoa_r+0x464>
 800e3c0:	4b30      	ldr	r3, [pc, #192]	; (800e484 <_dtoa_r+0x624>)
 800e3c2:	2200      	movs	r2, #0
 800e3c4:	4650      	mov	r0, sl
 800e3c6:	4659      	mov	r1, fp
 800e3c8:	f7f2 f92e 	bl	8000628 <__aeabi_dmul>
 800e3cc:	4b2d      	ldr	r3, [pc, #180]	; (800e484 <_dtoa_r+0x624>)
 800e3ce:	4682      	mov	sl, r0
 800e3d0:	468b      	mov	fp, r1
 800e3d2:	4640      	mov	r0, r8
 800e3d4:	4649      	mov	r1, r9
 800e3d6:	2200      	movs	r2, #0
 800e3d8:	f7f2 f926 	bl	8000628 <__aeabi_dmul>
 800e3dc:	4680      	mov	r8, r0
 800e3de:	4689      	mov	r9, r1
 800e3e0:	e7c6      	b.n	800e370 <_dtoa_r+0x510>
 800e3e2:	4650      	mov	r0, sl
 800e3e4:	4659      	mov	r1, fp
 800e3e6:	f7f2 f91f 	bl	8000628 <__aeabi_dmul>
 800e3ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e3ec:	9d01      	ldr	r5, [sp, #4]
 800e3ee:	930f      	str	r3, [sp, #60]	; 0x3c
 800e3f0:	4682      	mov	sl, r0
 800e3f2:	468b      	mov	fp, r1
 800e3f4:	4649      	mov	r1, r9
 800e3f6:	4640      	mov	r0, r8
 800e3f8:	f7f2 fbc6 	bl	8000b88 <__aeabi_d2iz>
 800e3fc:	4606      	mov	r6, r0
 800e3fe:	f7f2 f8a9 	bl	8000554 <__aeabi_i2d>
 800e402:	3630      	adds	r6, #48	; 0x30
 800e404:	4602      	mov	r2, r0
 800e406:	460b      	mov	r3, r1
 800e408:	4640      	mov	r0, r8
 800e40a:	4649      	mov	r1, r9
 800e40c:	f7f1 ff54 	bl	80002b8 <__aeabi_dsub>
 800e410:	f805 6b01 	strb.w	r6, [r5], #1
 800e414:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e416:	429d      	cmp	r5, r3
 800e418:	4680      	mov	r8, r0
 800e41a:	4689      	mov	r9, r1
 800e41c:	f04f 0200 	mov.w	r2, #0
 800e420:	d124      	bne.n	800e46c <_dtoa_r+0x60c>
 800e422:	4b1b      	ldr	r3, [pc, #108]	; (800e490 <_dtoa_r+0x630>)
 800e424:	4650      	mov	r0, sl
 800e426:	4659      	mov	r1, fp
 800e428:	f7f1 ff48 	bl	80002bc <__adddf3>
 800e42c:	4602      	mov	r2, r0
 800e42e:	460b      	mov	r3, r1
 800e430:	4640      	mov	r0, r8
 800e432:	4649      	mov	r1, r9
 800e434:	f7f2 fb88 	bl	8000b48 <__aeabi_dcmpgt>
 800e438:	2800      	cmp	r0, #0
 800e43a:	d173      	bne.n	800e524 <_dtoa_r+0x6c4>
 800e43c:	4652      	mov	r2, sl
 800e43e:	465b      	mov	r3, fp
 800e440:	4913      	ldr	r1, [pc, #76]	; (800e490 <_dtoa_r+0x630>)
 800e442:	2000      	movs	r0, #0
 800e444:	f7f1 ff38 	bl	80002b8 <__aeabi_dsub>
 800e448:	4602      	mov	r2, r0
 800e44a:	460b      	mov	r3, r1
 800e44c:	4640      	mov	r0, r8
 800e44e:	4649      	mov	r1, r9
 800e450:	f7f2 fb5c 	bl	8000b0c <__aeabi_dcmplt>
 800e454:	2800      	cmp	r0, #0
 800e456:	f43f af35 	beq.w	800e2c4 <_dtoa_r+0x464>
 800e45a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800e45c:	1e6b      	subs	r3, r5, #1
 800e45e:	930f      	str	r3, [sp, #60]	; 0x3c
 800e460:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800e464:	2b30      	cmp	r3, #48	; 0x30
 800e466:	d0f8      	beq.n	800e45a <_dtoa_r+0x5fa>
 800e468:	9700      	str	r7, [sp, #0]
 800e46a:	e049      	b.n	800e500 <_dtoa_r+0x6a0>
 800e46c:	4b05      	ldr	r3, [pc, #20]	; (800e484 <_dtoa_r+0x624>)
 800e46e:	f7f2 f8db 	bl	8000628 <__aeabi_dmul>
 800e472:	4680      	mov	r8, r0
 800e474:	4689      	mov	r9, r1
 800e476:	e7bd      	b.n	800e3f4 <_dtoa_r+0x594>
 800e478:	08011e10 	.word	0x08011e10
 800e47c:	08011de8 	.word	0x08011de8
 800e480:	3ff00000 	.word	0x3ff00000
 800e484:	40240000 	.word	0x40240000
 800e488:	401c0000 	.word	0x401c0000
 800e48c:	40140000 	.word	0x40140000
 800e490:	3fe00000 	.word	0x3fe00000
 800e494:	9d01      	ldr	r5, [sp, #4]
 800e496:	4656      	mov	r6, sl
 800e498:	465f      	mov	r7, fp
 800e49a:	4642      	mov	r2, r8
 800e49c:	464b      	mov	r3, r9
 800e49e:	4630      	mov	r0, r6
 800e4a0:	4639      	mov	r1, r7
 800e4a2:	f7f2 f9eb 	bl	800087c <__aeabi_ddiv>
 800e4a6:	f7f2 fb6f 	bl	8000b88 <__aeabi_d2iz>
 800e4aa:	4682      	mov	sl, r0
 800e4ac:	f7f2 f852 	bl	8000554 <__aeabi_i2d>
 800e4b0:	4642      	mov	r2, r8
 800e4b2:	464b      	mov	r3, r9
 800e4b4:	f7f2 f8b8 	bl	8000628 <__aeabi_dmul>
 800e4b8:	4602      	mov	r2, r0
 800e4ba:	460b      	mov	r3, r1
 800e4bc:	4630      	mov	r0, r6
 800e4be:	4639      	mov	r1, r7
 800e4c0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800e4c4:	f7f1 fef8 	bl	80002b8 <__aeabi_dsub>
 800e4c8:	f805 6b01 	strb.w	r6, [r5], #1
 800e4cc:	9e01      	ldr	r6, [sp, #4]
 800e4ce:	9f03      	ldr	r7, [sp, #12]
 800e4d0:	1bae      	subs	r6, r5, r6
 800e4d2:	42b7      	cmp	r7, r6
 800e4d4:	4602      	mov	r2, r0
 800e4d6:	460b      	mov	r3, r1
 800e4d8:	d135      	bne.n	800e546 <_dtoa_r+0x6e6>
 800e4da:	f7f1 feef 	bl	80002bc <__adddf3>
 800e4de:	4642      	mov	r2, r8
 800e4e0:	464b      	mov	r3, r9
 800e4e2:	4606      	mov	r6, r0
 800e4e4:	460f      	mov	r7, r1
 800e4e6:	f7f2 fb2f 	bl	8000b48 <__aeabi_dcmpgt>
 800e4ea:	b9d0      	cbnz	r0, 800e522 <_dtoa_r+0x6c2>
 800e4ec:	4642      	mov	r2, r8
 800e4ee:	464b      	mov	r3, r9
 800e4f0:	4630      	mov	r0, r6
 800e4f2:	4639      	mov	r1, r7
 800e4f4:	f7f2 fb00 	bl	8000af8 <__aeabi_dcmpeq>
 800e4f8:	b110      	cbz	r0, 800e500 <_dtoa_r+0x6a0>
 800e4fa:	f01a 0f01 	tst.w	sl, #1
 800e4fe:	d110      	bne.n	800e522 <_dtoa_r+0x6c2>
 800e500:	4620      	mov	r0, r4
 800e502:	ee18 1a10 	vmov	r1, s16
 800e506:	f000 fae5 	bl	800ead4 <_Bfree>
 800e50a:	2300      	movs	r3, #0
 800e50c:	9800      	ldr	r0, [sp, #0]
 800e50e:	702b      	strb	r3, [r5, #0]
 800e510:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e512:	3001      	adds	r0, #1
 800e514:	6018      	str	r0, [r3, #0]
 800e516:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e518:	2b00      	cmp	r3, #0
 800e51a:	f43f acf1 	beq.w	800df00 <_dtoa_r+0xa0>
 800e51e:	601d      	str	r5, [r3, #0]
 800e520:	e4ee      	b.n	800df00 <_dtoa_r+0xa0>
 800e522:	9f00      	ldr	r7, [sp, #0]
 800e524:	462b      	mov	r3, r5
 800e526:	461d      	mov	r5, r3
 800e528:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e52c:	2a39      	cmp	r2, #57	; 0x39
 800e52e:	d106      	bne.n	800e53e <_dtoa_r+0x6de>
 800e530:	9a01      	ldr	r2, [sp, #4]
 800e532:	429a      	cmp	r2, r3
 800e534:	d1f7      	bne.n	800e526 <_dtoa_r+0x6c6>
 800e536:	9901      	ldr	r1, [sp, #4]
 800e538:	2230      	movs	r2, #48	; 0x30
 800e53a:	3701      	adds	r7, #1
 800e53c:	700a      	strb	r2, [r1, #0]
 800e53e:	781a      	ldrb	r2, [r3, #0]
 800e540:	3201      	adds	r2, #1
 800e542:	701a      	strb	r2, [r3, #0]
 800e544:	e790      	b.n	800e468 <_dtoa_r+0x608>
 800e546:	4ba6      	ldr	r3, [pc, #664]	; (800e7e0 <_dtoa_r+0x980>)
 800e548:	2200      	movs	r2, #0
 800e54a:	f7f2 f86d 	bl	8000628 <__aeabi_dmul>
 800e54e:	2200      	movs	r2, #0
 800e550:	2300      	movs	r3, #0
 800e552:	4606      	mov	r6, r0
 800e554:	460f      	mov	r7, r1
 800e556:	f7f2 facf 	bl	8000af8 <__aeabi_dcmpeq>
 800e55a:	2800      	cmp	r0, #0
 800e55c:	d09d      	beq.n	800e49a <_dtoa_r+0x63a>
 800e55e:	e7cf      	b.n	800e500 <_dtoa_r+0x6a0>
 800e560:	9a08      	ldr	r2, [sp, #32]
 800e562:	2a00      	cmp	r2, #0
 800e564:	f000 80d7 	beq.w	800e716 <_dtoa_r+0x8b6>
 800e568:	9a06      	ldr	r2, [sp, #24]
 800e56a:	2a01      	cmp	r2, #1
 800e56c:	f300 80ba 	bgt.w	800e6e4 <_dtoa_r+0x884>
 800e570:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e572:	2a00      	cmp	r2, #0
 800e574:	f000 80b2 	beq.w	800e6dc <_dtoa_r+0x87c>
 800e578:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800e57c:	9e07      	ldr	r6, [sp, #28]
 800e57e:	9d04      	ldr	r5, [sp, #16]
 800e580:	9a04      	ldr	r2, [sp, #16]
 800e582:	441a      	add	r2, r3
 800e584:	9204      	str	r2, [sp, #16]
 800e586:	9a05      	ldr	r2, [sp, #20]
 800e588:	2101      	movs	r1, #1
 800e58a:	441a      	add	r2, r3
 800e58c:	4620      	mov	r0, r4
 800e58e:	9205      	str	r2, [sp, #20]
 800e590:	f000 fb58 	bl	800ec44 <__i2b>
 800e594:	4607      	mov	r7, r0
 800e596:	2d00      	cmp	r5, #0
 800e598:	dd0c      	ble.n	800e5b4 <_dtoa_r+0x754>
 800e59a:	9b05      	ldr	r3, [sp, #20]
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	dd09      	ble.n	800e5b4 <_dtoa_r+0x754>
 800e5a0:	42ab      	cmp	r3, r5
 800e5a2:	9a04      	ldr	r2, [sp, #16]
 800e5a4:	bfa8      	it	ge
 800e5a6:	462b      	movge	r3, r5
 800e5a8:	1ad2      	subs	r2, r2, r3
 800e5aa:	9204      	str	r2, [sp, #16]
 800e5ac:	9a05      	ldr	r2, [sp, #20]
 800e5ae:	1aed      	subs	r5, r5, r3
 800e5b0:	1ad3      	subs	r3, r2, r3
 800e5b2:	9305      	str	r3, [sp, #20]
 800e5b4:	9b07      	ldr	r3, [sp, #28]
 800e5b6:	b31b      	cbz	r3, 800e600 <_dtoa_r+0x7a0>
 800e5b8:	9b08      	ldr	r3, [sp, #32]
 800e5ba:	2b00      	cmp	r3, #0
 800e5bc:	f000 80af 	beq.w	800e71e <_dtoa_r+0x8be>
 800e5c0:	2e00      	cmp	r6, #0
 800e5c2:	dd13      	ble.n	800e5ec <_dtoa_r+0x78c>
 800e5c4:	4639      	mov	r1, r7
 800e5c6:	4632      	mov	r2, r6
 800e5c8:	4620      	mov	r0, r4
 800e5ca:	f000 fbfb 	bl	800edc4 <__pow5mult>
 800e5ce:	ee18 2a10 	vmov	r2, s16
 800e5d2:	4601      	mov	r1, r0
 800e5d4:	4607      	mov	r7, r0
 800e5d6:	4620      	mov	r0, r4
 800e5d8:	f000 fb4a 	bl	800ec70 <__multiply>
 800e5dc:	ee18 1a10 	vmov	r1, s16
 800e5e0:	4680      	mov	r8, r0
 800e5e2:	4620      	mov	r0, r4
 800e5e4:	f000 fa76 	bl	800ead4 <_Bfree>
 800e5e8:	ee08 8a10 	vmov	s16, r8
 800e5ec:	9b07      	ldr	r3, [sp, #28]
 800e5ee:	1b9a      	subs	r2, r3, r6
 800e5f0:	d006      	beq.n	800e600 <_dtoa_r+0x7a0>
 800e5f2:	ee18 1a10 	vmov	r1, s16
 800e5f6:	4620      	mov	r0, r4
 800e5f8:	f000 fbe4 	bl	800edc4 <__pow5mult>
 800e5fc:	ee08 0a10 	vmov	s16, r0
 800e600:	2101      	movs	r1, #1
 800e602:	4620      	mov	r0, r4
 800e604:	f000 fb1e 	bl	800ec44 <__i2b>
 800e608:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e60a:	2b00      	cmp	r3, #0
 800e60c:	4606      	mov	r6, r0
 800e60e:	f340 8088 	ble.w	800e722 <_dtoa_r+0x8c2>
 800e612:	461a      	mov	r2, r3
 800e614:	4601      	mov	r1, r0
 800e616:	4620      	mov	r0, r4
 800e618:	f000 fbd4 	bl	800edc4 <__pow5mult>
 800e61c:	9b06      	ldr	r3, [sp, #24]
 800e61e:	2b01      	cmp	r3, #1
 800e620:	4606      	mov	r6, r0
 800e622:	f340 8081 	ble.w	800e728 <_dtoa_r+0x8c8>
 800e626:	f04f 0800 	mov.w	r8, #0
 800e62a:	6933      	ldr	r3, [r6, #16]
 800e62c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800e630:	6918      	ldr	r0, [r3, #16]
 800e632:	f000 fab7 	bl	800eba4 <__hi0bits>
 800e636:	f1c0 0020 	rsb	r0, r0, #32
 800e63a:	9b05      	ldr	r3, [sp, #20]
 800e63c:	4418      	add	r0, r3
 800e63e:	f010 001f 	ands.w	r0, r0, #31
 800e642:	f000 8092 	beq.w	800e76a <_dtoa_r+0x90a>
 800e646:	f1c0 0320 	rsb	r3, r0, #32
 800e64a:	2b04      	cmp	r3, #4
 800e64c:	f340 808a 	ble.w	800e764 <_dtoa_r+0x904>
 800e650:	f1c0 001c 	rsb	r0, r0, #28
 800e654:	9b04      	ldr	r3, [sp, #16]
 800e656:	4403      	add	r3, r0
 800e658:	9304      	str	r3, [sp, #16]
 800e65a:	9b05      	ldr	r3, [sp, #20]
 800e65c:	4403      	add	r3, r0
 800e65e:	4405      	add	r5, r0
 800e660:	9305      	str	r3, [sp, #20]
 800e662:	9b04      	ldr	r3, [sp, #16]
 800e664:	2b00      	cmp	r3, #0
 800e666:	dd07      	ble.n	800e678 <_dtoa_r+0x818>
 800e668:	ee18 1a10 	vmov	r1, s16
 800e66c:	461a      	mov	r2, r3
 800e66e:	4620      	mov	r0, r4
 800e670:	f000 fc02 	bl	800ee78 <__lshift>
 800e674:	ee08 0a10 	vmov	s16, r0
 800e678:	9b05      	ldr	r3, [sp, #20]
 800e67a:	2b00      	cmp	r3, #0
 800e67c:	dd05      	ble.n	800e68a <_dtoa_r+0x82a>
 800e67e:	4631      	mov	r1, r6
 800e680:	461a      	mov	r2, r3
 800e682:	4620      	mov	r0, r4
 800e684:	f000 fbf8 	bl	800ee78 <__lshift>
 800e688:	4606      	mov	r6, r0
 800e68a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e68c:	2b00      	cmp	r3, #0
 800e68e:	d06e      	beq.n	800e76e <_dtoa_r+0x90e>
 800e690:	ee18 0a10 	vmov	r0, s16
 800e694:	4631      	mov	r1, r6
 800e696:	f000 fc5f 	bl	800ef58 <__mcmp>
 800e69a:	2800      	cmp	r0, #0
 800e69c:	da67      	bge.n	800e76e <_dtoa_r+0x90e>
 800e69e:	9b00      	ldr	r3, [sp, #0]
 800e6a0:	3b01      	subs	r3, #1
 800e6a2:	ee18 1a10 	vmov	r1, s16
 800e6a6:	9300      	str	r3, [sp, #0]
 800e6a8:	220a      	movs	r2, #10
 800e6aa:	2300      	movs	r3, #0
 800e6ac:	4620      	mov	r0, r4
 800e6ae:	f000 fa33 	bl	800eb18 <__multadd>
 800e6b2:	9b08      	ldr	r3, [sp, #32]
 800e6b4:	ee08 0a10 	vmov	s16, r0
 800e6b8:	2b00      	cmp	r3, #0
 800e6ba:	f000 81b1 	beq.w	800ea20 <_dtoa_r+0xbc0>
 800e6be:	2300      	movs	r3, #0
 800e6c0:	4639      	mov	r1, r7
 800e6c2:	220a      	movs	r2, #10
 800e6c4:	4620      	mov	r0, r4
 800e6c6:	f000 fa27 	bl	800eb18 <__multadd>
 800e6ca:	9b02      	ldr	r3, [sp, #8]
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	4607      	mov	r7, r0
 800e6d0:	f300 808e 	bgt.w	800e7f0 <_dtoa_r+0x990>
 800e6d4:	9b06      	ldr	r3, [sp, #24]
 800e6d6:	2b02      	cmp	r3, #2
 800e6d8:	dc51      	bgt.n	800e77e <_dtoa_r+0x91e>
 800e6da:	e089      	b.n	800e7f0 <_dtoa_r+0x990>
 800e6dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e6de:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800e6e2:	e74b      	b.n	800e57c <_dtoa_r+0x71c>
 800e6e4:	9b03      	ldr	r3, [sp, #12]
 800e6e6:	1e5e      	subs	r6, r3, #1
 800e6e8:	9b07      	ldr	r3, [sp, #28]
 800e6ea:	42b3      	cmp	r3, r6
 800e6ec:	bfbf      	itttt	lt
 800e6ee:	9b07      	ldrlt	r3, [sp, #28]
 800e6f0:	9607      	strlt	r6, [sp, #28]
 800e6f2:	1af2      	sublt	r2, r6, r3
 800e6f4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800e6f6:	bfb6      	itet	lt
 800e6f8:	189b      	addlt	r3, r3, r2
 800e6fa:	1b9e      	subge	r6, r3, r6
 800e6fc:	930a      	strlt	r3, [sp, #40]	; 0x28
 800e6fe:	9b03      	ldr	r3, [sp, #12]
 800e700:	bfb8      	it	lt
 800e702:	2600      	movlt	r6, #0
 800e704:	2b00      	cmp	r3, #0
 800e706:	bfb7      	itett	lt
 800e708:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800e70c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800e710:	1a9d      	sublt	r5, r3, r2
 800e712:	2300      	movlt	r3, #0
 800e714:	e734      	b.n	800e580 <_dtoa_r+0x720>
 800e716:	9e07      	ldr	r6, [sp, #28]
 800e718:	9d04      	ldr	r5, [sp, #16]
 800e71a:	9f08      	ldr	r7, [sp, #32]
 800e71c:	e73b      	b.n	800e596 <_dtoa_r+0x736>
 800e71e:	9a07      	ldr	r2, [sp, #28]
 800e720:	e767      	b.n	800e5f2 <_dtoa_r+0x792>
 800e722:	9b06      	ldr	r3, [sp, #24]
 800e724:	2b01      	cmp	r3, #1
 800e726:	dc18      	bgt.n	800e75a <_dtoa_r+0x8fa>
 800e728:	f1ba 0f00 	cmp.w	sl, #0
 800e72c:	d115      	bne.n	800e75a <_dtoa_r+0x8fa>
 800e72e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e732:	b993      	cbnz	r3, 800e75a <_dtoa_r+0x8fa>
 800e734:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800e738:	0d1b      	lsrs	r3, r3, #20
 800e73a:	051b      	lsls	r3, r3, #20
 800e73c:	b183      	cbz	r3, 800e760 <_dtoa_r+0x900>
 800e73e:	9b04      	ldr	r3, [sp, #16]
 800e740:	3301      	adds	r3, #1
 800e742:	9304      	str	r3, [sp, #16]
 800e744:	9b05      	ldr	r3, [sp, #20]
 800e746:	3301      	adds	r3, #1
 800e748:	9305      	str	r3, [sp, #20]
 800e74a:	f04f 0801 	mov.w	r8, #1
 800e74e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e750:	2b00      	cmp	r3, #0
 800e752:	f47f af6a 	bne.w	800e62a <_dtoa_r+0x7ca>
 800e756:	2001      	movs	r0, #1
 800e758:	e76f      	b.n	800e63a <_dtoa_r+0x7da>
 800e75a:	f04f 0800 	mov.w	r8, #0
 800e75e:	e7f6      	b.n	800e74e <_dtoa_r+0x8ee>
 800e760:	4698      	mov	r8, r3
 800e762:	e7f4      	b.n	800e74e <_dtoa_r+0x8ee>
 800e764:	f43f af7d 	beq.w	800e662 <_dtoa_r+0x802>
 800e768:	4618      	mov	r0, r3
 800e76a:	301c      	adds	r0, #28
 800e76c:	e772      	b.n	800e654 <_dtoa_r+0x7f4>
 800e76e:	9b03      	ldr	r3, [sp, #12]
 800e770:	2b00      	cmp	r3, #0
 800e772:	dc37      	bgt.n	800e7e4 <_dtoa_r+0x984>
 800e774:	9b06      	ldr	r3, [sp, #24]
 800e776:	2b02      	cmp	r3, #2
 800e778:	dd34      	ble.n	800e7e4 <_dtoa_r+0x984>
 800e77a:	9b03      	ldr	r3, [sp, #12]
 800e77c:	9302      	str	r3, [sp, #8]
 800e77e:	9b02      	ldr	r3, [sp, #8]
 800e780:	b96b      	cbnz	r3, 800e79e <_dtoa_r+0x93e>
 800e782:	4631      	mov	r1, r6
 800e784:	2205      	movs	r2, #5
 800e786:	4620      	mov	r0, r4
 800e788:	f000 f9c6 	bl	800eb18 <__multadd>
 800e78c:	4601      	mov	r1, r0
 800e78e:	4606      	mov	r6, r0
 800e790:	ee18 0a10 	vmov	r0, s16
 800e794:	f000 fbe0 	bl	800ef58 <__mcmp>
 800e798:	2800      	cmp	r0, #0
 800e79a:	f73f adbb 	bgt.w	800e314 <_dtoa_r+0x4b4>
 800e79e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e7a0:	9d01      	ldr	r5, [sp, #4]
 800e7a2:	43db      	mvns	r3, r3
 800e7a4:	9300      	str	r3, [sp, #0]
 800e7a6:	f04f 0800 	mov.w	r8, #0
 800e7aa:	4631      	mov	r1, r6
 800e7ac:	4620      	mov	r0, r4
 800e7ae:	f000 f991 	bl	800ead4 <_Bfree>
 800e7b2:	2f00      	cmp	r7, #0
 800e7b4:	f43f aea4 	beq.w	800e500 <_dtoa_r+0x6a0>
 800e7b8:	f1b8 0f00 	cmp.w	r8, #0
 800e7bc:	d005      	beq.n	800e7ca <_dtoa_r+0x96a>
 800e7be:	45b8      	cmp	r8, r7
 800e7c0:	d003      	beq.n	800e7ca <_dtoa_r+0x96a>
 800e7c2:	4641      	mov	r1, r8
 800e7c4:	4620      	mov	r0, r4
 800e7c6:	f000 f985 	bl	800ead4 <_Bfree>
 800e7ca:	4639      	mov	r1, r7
 800e7cc:	4620      	mov	r0, r4
 800e7ce:	f000 f981 	bl	800ead4 <_Bfree>
 800e7d2:	e695      	b.n	800e500 <_dtoa_r+0x6a0>
 800e7d4:	2600      	movs	r6, #0
 800e7d6:	4637      	mov	r7, r6
 800e7d8:	e7e1      	b.n	800e79e <_dtoa_r+0x93e>
 800e7da:	9700      	str	r7, [sp, #0]
 800e7dc:	4637      	mov	r7, r6
 800e7de:	e599      	b.n	800e314 <_dtoa_r+0x4b4>
 800e7e0:	40240000 	.word	0x40240000
 800e7e4:	9b08      	ldr	r3, [sp, #32]
 800e7e6:	2b00      	cmp	r3, #0
 800e7e8:	f000 80ca 	beq.w	800e980 <_dtoa_r+0xb20>
 800e7ec:	9b03      	ldr	r3, [sp, #12]
 800e7ee:	9302      	str	r3, [sp, #8]
 800e7f0:	2d00      	cmp	r5, #0
 800e7f2:	dd05      	ble.n	800e800 <_dtoa_r+0x9a0>
 800e7f4:	4639      	mov	r1, r7
 800e7f6:	462a      	mov	r2, r5
 800e7f8:	4620      	mov	r0, r4
 800e7fa:	f000 fb3d 	bl	800ee78 <__lshift>
 800e7fe:	4607      	mov	r7, r0
 800e800:	f1b8 0f00 	cmp.w	r8, #0
 800e804:	d05b      	beq.n	800e8be <_dtoa_r+0xa5e>
 800e806:	6879      	ldr	r1, [r7, #4]
 800e808:	4620      	mov	r0, r4
 800e80a:	f000 f923 	bl	800ea54 <_Balloc>
 800e80e:	4605      	mov	r5, r0
 800e810:	b928      	cbnz	r0, 800e81e <_dtoa_r+0x9be>
 800e812:	4b87      	ldr	r3, [pc, #540]	; (800ea30 <_dtoa_r+0xbd0>)
 800e814:	4602      	mov	r2, r0
 800e816:	f240 21ea 	movw	r1, #746	; 0x2ea
 800e81a:	f7ff bb3b 	b.w	800de94 <_dtoa_r+0x34>
 800e81e:	693a      	ldr	r2, [r7, #16]
 800e820:	3202      	adds	r2, #2
 800e822:	0092      	lsls	r2, r2, #2
 800e824:	f107 010c 	add.w	r1, r7, #12
 800e828:	300c      	adds	r0, #12
 800e82a:	f7fe fdc9 	bl	800d3c0 <memcpy>
 800e82e:	2201      	movs	r2, #1
 800e830:	4629      	mov	r1, r5
 800e832:	4620      	mov	r0, r4
 800e834:	f000 fb20 	bl	800ee78 <__lshift>
 800e838:	9b01      	ldr	r3, [sp, #4]
 800e83a:	f103 0901 	add.w	r9, r3, #1
 800e83e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800e842:	4413      	add	r3, r2
 800e844:	9305      	str	r3, [sp, #20]
 800e846:	f00a 0301 	and.w	r3, sl, #1
 800e84a:	46b8      	mov	r8, r7
 800e84c:	9304      	str	r3, [sp, #16]
 800e84e:	4607      	mov	r7, r0
 800e850:	4631      	mov	r1, r6
 800e852:	ee18 0a10 	vmov	r0, s16
 800e856:	f7ff fa75 	bl	800dd44 <quorem>
 800e85a:	4641      	mov	r1, r8
 800e85c:	9002      	str	r0, [sp, #8]
 800e85e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800e862:	ee18 0a10 	vmov	r0, s16
 800e866:	f000 fb77 	bl	800ef58 <__mcmp>
 800e86a:	463a      	mov	r2, r7
 800e86c:	9003      	str	r0, [sp, #12]
 800e86e:	4631      	mov	r1, r6
 800e870:	4620      	mov	r0, r4
 800e872:	f000 fb8d 	bl	800ef90 <__mdiff>
 800e876:	68c2      	ldr	r2, [r0, #12]
 800e878:	f109 3bff 	add.w	fp, r9, #4294967295
 800e87c:	4605      	mov	r5, r0
 800e87e:	bb02      	cbnz	r2, 800e8c2 <_dtoa_r+0xa62>
 800e880:	4601      	mov	r1, r0
 800e882:	ee18 0a10 	vmov	r0, s16
 800e886:	f000 fb67 	bl	800ef58 <__mcmp>
 800e88a:	4602      	mov	r2, r0
 800e88c:	4629      	mov	r1, r5
 800e88e:	4620      	mov	r0, r4
 800e890:	9207      	str	r2, [sp, #28]
 800e892:	f000 f91f 	bl	800ead4 <_Bfree>
 800e896:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800e89a:	ea43 0102 	orr.w	r1, r3, r2
 800e89e:	9b04      	ldr	r3, [sp, #16]
 800e8a0:	430b      	orrs	r3, r1
 800e8a2:	464d      	mov	r5, r9
 800e8a4:	d10f      	bne.n	800e8c6 <_dtoa_r+0xa66>
 800e8a6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800e8aa:	d02a      	beq.n	800e902 <_dtoa_r+0xaa2>
 800e8ac:	9b03      	ldr	r3, [sp, #12]
 800e8ae:	2b00      	cmp	r3, #0
 800e8b0:	dd02      	ble.n	800e8b8 <_dtoa_r+0xa58>
 800e8b2:	9b02      	ldr	r3, [sp, #8]
 800e8b4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800e8b8:	f88b a000 	strb.w	sl, [fp]
 800e8bc:	e775      	b.n	800e7aa <_dtoa_r+0x94a>
 800e8be:	4638      	mov	r0, r7
 800e8c0:	e7ba      	b.n	800e838 <_dtoa_r+0x9d8>
 800e8c2:	2201      	movs	r2, #1
 800e8c4:	e7e2      	b.n	800e88c <_dtoa_r+0xa2c>
 800e8c6:	9b03      	ldr	r3, [sp, #12]
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	db04      	blt.n	800e8d6 <_dtoa_r+0xa76>
 800e8cc:	9906      	ldr	r1, [sp, #24]
 800e8ce:	430b      	orrs	r3, r1
 800e8d0:	9904      	ldr	r1, [sp, #16]
 800e8d2:	430b      	orrs	r3, r1
 800e8d4:	d122      	bne.n	800e91c <_dtoa_r+0xabc>
 800e8d6:	2a00      	cmp	r2, #0
 800e8d8:	ddee      	ble.n	800e8b8 <_dtoa_r+0xa58>
 800e8da:	ee18 1a10 	vmov	r1, s16
 800e8de:	2201      	movs	r2, #1
 800e8e0:	4620      	mov	r0, r4
 800e8e2:	f000 fac9 	bl	800ee78 <__lshift>
 800e8e6:	4631      	mov	r1, r6
 800e8e8:	ee08 0a10 	vmov	s16, r0
 800e8ec:	f000 fb34 	bl	800ef58 <__mcmp>
 800e8f0:	2800      	cmp	r0, #0
 800e8f2:	dc03      	bgt.n	800e8fc <_dtoa_r+0xa9c>
 800e8f4:	d1e0      	bne.n	800e8b8 <_dtoa_r+0xa58>
 800e8f6:	f01a 0f01 	tst.w	sl, #1
 800e8fa:	d0dd      	beq.n	800e8b8 <_dtoa_r+0xa58>
 800e8fc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800e900:	d1d7      	bne.n	800e8b2 <_dtoa_r+0xa52>
 800e902:	2339      	movs	r3, #57	; 0x39
 800e904:	f88b 3000 	strb.w	r3, [fp]
 800e908:	462b      	mov	r3, r5
 800e90a:	461d      	mov	r5, r3
 800e90c:	3b01      	subs	r3, #1
 800e90e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800e912:	2a39      	cmp	r2, #57	; 0x39
 800e914:	d071      	beq.n	800e9fa <_dtoa_r+0xb9a>
 800e916:	3201      	adds	r2, #1
 800e918:	701a      	strb	r2, [r3, #0]
 800e91a:	e746      	b.n	800e7aa <_dtoa_r+0x94a>
 800e91c:	2a00      	cmp	r2, #0
 800e91e:	dd07      	ble.n	800e930 <_dtoa_r+0xad0>
 800e920:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800e924:	d0ed      	beq.n	800e902 <_dtoa_r+0xaa2>
 800e926:	f10a 0301 	add.w	r3, sl, #1
 800e92a:	f88b 3000 	strb.w	r3, [fp]
 800e92e:	e73c      	b.n	800e7aa <_dtoa_r+0x94a>
 800e930:	9b05      	ldr	r3, [sp, #20]
 800e932:	f809 ac01 	strb.w	sl, [r9, #-1]
 800e936:	4599      	cmp	r9, r3
 800e938:	d047      	beq.n	800e9ca <_dtoa_r+0xb6a>
 800e93a:	ee18 1a10 	vmov	r1, s16
 800e93e:	2300      	movs	r3, #0
 800e940:	220a      	movs	r2, #10
 800e942:	4620      	mov	r0, r4
 800e944:	f000 f8e8 	bl	800eb18 <__multadd>
 800e948:	45b8      	cmp	r8, r7
 800e94a:	ee08 0a10 	vmov	s16, r0
 800e94e:	f04f 0300 	mov.w	r3, #0
 800e952:	f04f 020a 	mov.w	r2, #10
 800e956:	4641      	mov	r1, r8
 800e958:	4620      	mov	r0, r4
 800e95a:	d106      	bne.n	800e96a <_dtoa_r+0xb0a>
 800e95c:	f000 f8dc 	bl	800eb18 <__multadd>
 800e960:	4680      	mov	r8, r0
 800e962:	4607      	mov	r7, r0
 800e964:	f109 0901 	add.w	r9, r9, #1
 800e968:	e772      	b.n	800e850 <_dtoa_r+0x9f0>
 800e96a:	f000 f8d5 	bl	800eb18 <__multadd>
 800e96e:	4639      	mov	r1, r7
 800e970:	4680      	mov	r8, r0
 800e972:	2300      	movs	r3, #0
 800e974:	220a      	movs	r2, #10
 800e976:	4620      	mov	r0, r4
 800e978:	f000 f8ce 	bl	800eb18 <__multadd>
 800e97c:	4607      	mov	r7, r0
 800e97e:	e7f1      	b.n	800e964 <_dtoa_r+0xb04>
 800e980:	9b03      	ldr	r3, [sp, #12]
 800e982:	9302      	str	r3, [sp, #8]
 800e984:	9d01      	ldr	r5, [sp, #4]
 800e986:	ee18 0a10 	vmov	r0, s16
 800e98a:	4631      	mov	r1, r6
 800e98c:	f7ff f9da 	bl	800dd44 <quorem>
 800e990:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800e994:	9b01      	ldr	r3, [sp, #4]
 800e996:	f805 ab01 	strb.w	sl, [r5], #1
 800e99a:	1aea      	subs	r2, r5, r3
 800e99c:	9b02      	ldr	r3, [sp, #8]
 800e99e:	4293      	cmp	r3, r2
 800e9a0:	dd09      	ble.n	800e9b6 <_dtoa_r+0xb56>
 800e9a2:	ee18 1a10 	vmov	r1, s16
 800e9a6:	2300      	movs	r3, #0
 800e9a8:	220a      	movs	r2, #10
 800e9aa:	4620      	mov	r0, r4
 800e9ac:	f000 f8b4 	bl	800eb18 <__multadd>
 800e9b0:	ee08 0a10 	vmov	s16, r0
 800e9b4:	e7e7      	b.n	800e986 <_dtoa_r+0xb26>
 800e9b6:	9b02      	ldr	r3, [sp, #8]
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	bfc8      	it	gt
 800e9bc:	461d      	movgt	r5, r3
 800e9be:	9b01      	ldr	r3, [sp, #4]
 800e9c0:	bfd8      	it	le
 800e9c2:	2501      	movle	r5, #1
 800e9c4:	441d      	add	r5, r3
 800e9c6:	f04f 0800 	mov.w	r8, #0
 800e9ca:	ee18 1a10 	vmov	r1, s16
 800e9ce:	2201      	movs	r2, #1
 800e9d0:	4620      	mov	r0, r4
 800e9d2:	f000 fa51 	bl	800ee78 <__lshift>
 800e9d6:	4631      	mov	r1, r6
 800e9d8:	ee08 0a10 	vmov	s16, r0
 800e9dc:	f000 fabc 	bl	800ef58 <__mcmp>
 800e9e0:	2800      	cmp	r0, #0
 800e9e2:	dc91      	bgt.n	800e908 <_dtoa_r+0xaa8>
 800e9e4:	d102      	bne.n	800e9ec <_dtoa_r+0xb8c>
 800e9e6:	f01a 0f01 	tst.w	sl, #1
 800e9ea:	d18d      	bne.n	800e908 <_dtoa_r+0xaa8>
 800e9ec:	462b      	mov	r3, r5
 800e9ee:	461d      	mov	r5, r3
 800e9f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e9f4:	2a30      	cmp	r2, #48	; 0x30
 800e9f6:	d0fa      	beq.n	800e9ee <_dtoa_r+0xb8e>
 800e9f8:	e6d7      	b.n	800e7aa <_dtoa_r+0x94a>
 800e9fa:	9a01      	ldr	r2, [sp, #4]
 800e9fc:	429a      	cmp	r2, r3
 800e9fe:	d184      	bne.n	800e90a <_dtoa_r+0xaaa>
 800ea00:	9b00      	ldr	r3, [sp, #0]
 800ea02:	3301      	adds	r3, #1
 800ea04:	9300      	str	r3, [sp, #0]
 800ea06:	2331      	movs	r3, #49	; 0x31
 800ea08:	7013      	strb	r3, [r2, #0]
 800ea0a:	e6ce      	b.n	800e7aa <_dtoa_r+0x94a>
 800ea0c:	4b09      	ldr	r3, [pc, #36]	; (800ea34 <_dtoa_r+0xbd4>)
 800ea0e:	f7ff ba95 	b.w	800df3c <_dtoa_r+0xdc>
 800ea12:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	f47f aa6e 	bne.w	800def6 <_dtoa_r+0x96>
 800ea1a:	4b07      	ldr	r3, [pc, #28]	; (800ea38 <_dtoa_r+0xbd8>)
 800ea1c:	f7ff ba8e 	b.w	800df3c <_dtoa_r+0xdc>
 800ea20:	9b02      	ldr	r3, [sp, #8]
 800ea22:	2b00      	cmp	r3, #0
 800ea24:	dcae      	bgt.n	800e984 <_dtoa_r+0xb24>
 800ea26:	9b06      	ldr	r3, [sp, #24]
 800ea28:	2b02      	cmp	r3, #2
 800ea2a:	f73f aea8 	bgt.w	800e77e <_dtoa_r+0x91e>
 800ea2e:	e7a9      	b.n	800e984 <_dtoa_r+0xb24>
 800ea30:	08011d77 	.word	0x08011d77
 800ea34:	08011cd4 	.word	0x08011cd4
 800ea38:	08011cf8 	.word	0x08011cf8

0800ea3c <_localeconv_r>:
 800ea3c:	4800      	ldr	r0, [pc, #0]	; (800ea40 <_localeconv_r+0x4>)
 800ea3e:	4770      	bx	lr
 800ea40:	20000174 	.word	0x20000174

0800ea44 <malloc>:
 800ea44:	4b02      	ldr	r3, [pc, #8]	; (800ea50 <malloc+0xc>)
 800ea46:	4601      	mov	r1, r0
 800ea48:	6818      	ldr	r0, [r3, #0]
 800ea4a:	f000 bc09 	b.w	800f260 <_malloc_r>
 800ea4e:	bf00      	nop
 800ea50:	20000020 	.word	0x20000020

0800ea54 <_Balloc>:
 800ea54:	b570      	push	{r4, r5, r6, lr}
 800ea56:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ea58:	4604      	mov	r4, r0
 800ea5a:	460d      	mov	r5, r1
 800ea5c:	b976      	cbnz	r6, 800ea7c <_Balloc+0x28>
 800ea5e:	2010      	movs	r0, #16
 800ea60:	f7ff fff0 	bl	800ea44 <malloc>
 800ea64:	4602      	mov	r2, r0
 800ea66:	6260      	str	r0, [r4, #36]	; 0x24
 800ea68:	b920      	cbnz	r0, 800ea74 <_Balloc+0x20>
 800ea6a:	4b18      	ldr	r3, [pc, #96]	; (800eacc <_Balloc+0x78>)
 800ea6c:	4818      	ldr	r0, [pc, #96]	; (800ead0 <_Balloc+0x7c>)
 800ea6e:	2166      	movs	r1, #102	; 0x66
 800ea70:	f000 fdd6 	bl	800f620 <__assert_func>
 800ea74:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ea78:	6006      	str	r6, [r0, #0]
 800ea7a:	60c6      	str	r6, [r0, #12]
 800ea7c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ea7e:	68f3      	ldr	r3, [r6, #12]
 800ea80:	b183      	cbz	r3, 800eaa4 <_Balloc+0x50>
 800ea82:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ea84:	68db      	ldr	r3, [r3, #12]
 800ea86:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ea8a:	b9b8      	cbnz	r0, 800eabc <_Balloc+0x68>
 800ea8c:	2101      	movs	r1, #1
 800ea8e:	fa01 f605 	lsl.w	r6, r1, r5
 800ea92:	1d72      	adds	r2, r6, #5
 800ea94:	0092      	lsls	r2, r2, #2
 800ea96:	4620      	mov	r0, r4
 800ea98:	f000 fb60 	bl	800f15c <_calloc_r>
 800ea9c:	b160      	cbz	r0, 800eab8 <_Balloc+0x64>
 800ea9e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800eaa2:	e00e      	b.n	800eac2 <_Balloc+0x6e>
 800eaa4:	2221      	movs	r2, #33	; 0x21
 800eaa6:	2104      	movs	r1, #4
 800eaa8:	4620      	mov	r0, r4
 800eaaa:	f000 fb57 	bl	800f15c <_calloc_r>
 800eaae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800eab0:	60f0      	str	r0, [r6, #12]
 800eab2:	68db      	ldr	r3, [r3, #12]
 800eab4:	2b00      	cmp	r3, #0
 800eab6:	d1e4      	bne.n	800ea82 <_Balloc+0x2e>
 800eab8:	2000      	movs	r0, #0
 800eaba:	bd70      	pop	{r4, r5, r6, pc}
 800eabc:	6802      	ldr	r2, [r0, #0]
 800eabe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800eac2:	2300      	movs	r3, #0
 800eac4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800eac8:	e7f7      	b.n	800eaba <_Balloc+0x66>
 800eaca:	bf00      	nop
 800eacc:	08011d05 	.word	0x08011d05
 800ead0:	08011d88 	.word	0x08011d88

0800ead4 <_Bfree>:
 800ead4:	b570      	push	{r4, r5, r6, lr}
 800ead6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ead8:	4605      	mov	r5, r0
 800eada:	460c      	mov	r4, r1
 800eadc:	b976      	cbnz	r6, 800eafc <_Bfree+0x28>
 800eade:	2010      	movs	r0, #16
 800eae0:	f7ff ffb0 	bl	800ea44 <malloc>
 800eae4:	4602      	mov	r2, r0
 800eae6:	6268      	str	r0, [r5, #36]	; 0x24
 800eae8:	b920      	cbnz	r0, 800eaf4 <_Bfree+0x20>
 800eaea:	4b09      	ldr	r3, [pc, #36]	; (800eb10 <_Bfree+0x3c>)
 800eaec:	4809      	ldr	r0, [pc, #36]	; (800eb14 <_Bfree+0x40>)
 800eaee:	218a      	movs	r1, #138	; 0x8a
 800eaf0:	f000 fd96 	bl	800f620 <__assert_func>
 800eaf4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800eaf8:	6006      	str	r6, [r0, #0]
 800eafa:	60c6      	str	r6, [r0, #12]
 800eafc:	b13c      	cbz	r4, 800eb0e <_Bfree+0x3a>
 800eafe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800eb00:	6862      	ldr	r2, [r4, #4]
 800eb02:	68db      	ldr	r3, [r3, #12]
 800eb04:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800eb08:	6021      	str	r1, [r4, #0]
 800eb0a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800eb0e:	bd70      	pop	{r4, r5, r6, pc}
 800eb10:	08011d05 	.word	0x08011d05
 800eb14:	08011d88 	.word	0x08011d88

0800eb18 <__multadd>:
 800eb18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb1c:	690d      	ldr	r5, [r1, #16]
 800eb1e:	4607      	mov	r7, r0
 800eb20:	460c      	mov	r4, r1
 800eb22:	461e      	mov	r6, r3
 800eb24:	f101 0c14 	add.w	ip, r1, #20
 800eb28:	2000      	movs	r0, #0
 800eb2a:	f8dc 3000 	ldr.w	r3, [ip]
 800eb2e:	b299      	uxth	r1, r3
 800eb30:	fb02 6101 	mla	r1, r2, r1, r6
 800eb34:	0c1e      	lsrs	r6, r3, #16
 800eb36:	0c0b      	lsrs	r3, r1, #16
 800eb38:	fb02 3306 	mla	r3, r2, r6, r3
 800eb3c:	b289      	uxth	r1, r1
 800eb3e:	3001      	adds	r0, #1
 800eb40:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800eb44:	4285      	cmp	r5, r0
 800eb46:	f84c 1b04 	str.w	r1, [ip], #4
 800eb4a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800eb4e:	dcec      	bgt.n	800eb2a <__multadd+0x12>
 800eb50:	b30e      	cbz	r6, 800eb96 <__multadd+0x7e>
 800eb52:	68a3      	ldr	r3, [r4, #8]
 800eb54:	42ab      	cmp	r3, r5
 800eb56:	dc19      	bgt.n	800eb8c <__multadd+0x74>
 800eb58:	6861      	ldr	r1, [r4, #4]
 800eb5a:	4638      	mov	r0, r7
 800eb5c:	3101      	adds	r1, #1
 800eb5e:	f7ff ff79 	bl	800ea54 <_Balloc>
 800eb62:	4680      	mov	r8, r0
 800eb64:	b928      	cbnz	r0, 800eb72 <__multadd+0x5a>
 800eb66:	4602      	mov	r2, r0
 800eb68:	4b0c      	ldr	r3, [pc, #48]	; (800eb9c <__multadd+0x84>)
 800eb6a:	480d      	ldr	r0, [pc, #52]	; (800eba0 <__multadd+0x88>)
 800eb6c:	21b5      	movs	r1, #181	; 0xb5
 800eb6e:	f000 fd57 	bl	800f620 <__assert_func>
 800eb72:	6922      	ldr	r2, [r4, #16]
 800eb74:	3202      	adds	r2, #2
 800eb76:	f104 010c 	add.w	r1, r4, #12
 800eb7a:	0092      	lsls	r2, r2, #2
 800eb7c:	300c      	adds	r0, #12
 800eb7e:	f7fe fc1f 	bl	800d3c0 <memcpy>
 800eb82:	4621      	mov	r1, r4
 800eb84:	4638      	mov	r0, r7
 800eb86:	f7ff ffa5 	bl	800ead4 <_Bfree>
 800eb8a:	4644      	mov	r4, r8
 800eb8c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800eb90:	3501      	adds	r5, #1
 800eb92:	615e      	str	r6, [r3, #20]
 800eb94:	6125      	str	r5, [r4, #16]
 800eb96:	4620      	mov	r0, r4
 800eb98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb9c:	08011d77 	.word	0x08011d77
 800eba0:	08011d88 	.word	0x08011d88

0800eba4 <__hi0bits>:
 800eba4:	0c03      	lsrs	r3, r0, #16
 800eba6:	041b      	lsls	r3, r3, #16
 800eba8:	b9d3      	cbnz	r3, 800ebe0 <__hi0bits+0x3c>
 800ebaa:	0400      	lsls	r0, r0, #16
 800ebac:	2310      	movs	r3, #16
 800ebae:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ebb2:	bf04      	itt	eq
 800ebb4:	0200      	lsleq	r0, r0, #8
 800ebb6:	3308      	addeq	r3, #8
 800ebb8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ebbc:	bf04      	itt	eq
 800ebbe:	0100      	lsleq	r0, r0, #4
 800ebc0:	3304      	addeq	r3, #4
 800ebc2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ebc6:	bf04      	itt	eq
 800ebc8:	0080      	lsleq	r0, r0, #2
 800ebca:	3302      	addeq	r3, #2
 800ebcc:	2800      	cmp	r0, #0
 800ebce:	db05      	blt.n	800ebdc <__hi0bits+0x38>
 800ebd0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ebd4:	f103 0301 	add.w	r3, r3, #1
 800ebd8:	bf08      	it	eq
 800ebda:	2320      	moveq	r3, #32
 800ebdc:	4618      	mov	r0, r3
 800ebde:	4770      	bx	lr
 800ebe0:	2300      	movs	r3, #0
 800ebe2:	e7e4      	b.n	800ebae <__hi0bits+0xa>

0800ebe4 <__lo0bits>:
 800ebe4:	6803      	ldr	r3, [r0, #0]
 800ebe6:	f013 0207 	ands.w	r2, r3, #7
 800ebea:	4601      	mov	r1, r0
 800ebec:	d00b      	beq.n	800ec06 <__lo0bits+0x22>
 800ebee:	07da      	lsls	r2, r3, #31
 800ebf0:	d423      	bmi.n	800ec3a <__lo0bits+0x56>
 800ebf2:	0798      	lsls	r0, r3, #30
 800ebf4:	bf49      	itett	mi
 800ebf6:	085b      	lsrmi	r3, r3, #1
 800ebf8:	089b      	lsrpl	r3, r3, #2
 800ebfa:	2001      	movmi	r0, #1
 800ebfc:	600b      	strmi	r3, [r1, #0]
 800ebfe:	bf5c      	itt	pl
 800ec00:	600b      	strpl	r3, [r1, #0]
 800ec02:	2002      	movpl	r0, #2
 800ec04:	4770      	bx	lr
 800ec06:	b298      	uxth	r0, r3
 800ec08:	b9a8      	cbnz	r0, 800ec36 <__lo0bits+0x52>
 800ec0a:	0c1b      	lsrs	r3, r3, #16
 800ec0c:	2010      	movs	r0, #16
 800ec0e:	b2da      	uxtb	r2, r3
 800ec10:	b90a      	cbnz	r2, 800ec16 <__lo0bits+0x32>
 800ec12:	3008      	adds	r0, #8
 800ec14:	0a1b      	lsrs	r3, r3, #8
 800ec16:	071a      	lsls	r2, r3, #28
 800ec18:	bf04      	itt	eq
 800ec1a:	091b      	lsreq	r3, r3, #4
 800ec1c:	3004      	addeq	r0, #4
 800ec1e:	079a      	lsls	r2, r3, #30
 800ec20:	bf04      	itt	eq
 800ec22:	089b      	lsreq	r3, r3, #2
 800ec24:	3002      	addeq	r0, #2
 800ec26:	07da      	lsls	r2, r3, #31
 800ec28:	d403      	bmi.n	800ec32 <__lo0bits+0x4e>
 800ec2a:	085b      	lsrs	r3, r3, #1
 800ec2c:	f100 0001 	add.w	r0, r0, #1
 800ec30:	d005      	beq.n	800ec3e <__lo0bits+0x5a>
 800ec32:	600b      	str	r3, [r1, #0]
 800ec34:	4770      	bx	lr
 800ec36:	4610      	mov	r0, r2
 800ec38:	e7e9      	b.n	800ec0e <__lo0bits+0x2a>
 800ec3a:	2000      	movs	r0, #0
 800ec3c:	4770      	bx	lr
 800ec3e:	2020      	movs	r0, #32
 800ec40:	4770      	bx	lr
	...

0800ec44 <__i2b>:
 800ec44:	b510      	push	{r4, lr}
 800ec46:	460c      	mov	r4, r1
 800ec48:	2101      	movs	r1, #1
 800ec4a:	f7ff ff03 	bl	800ea54 <_Balloc>
 800ec4e:	4602      	mov	r2, r0
 800ec50:	b928      	cbnz	r0, 800ec5e <__i2b+0x1a>
 800ec52:	4b05      	ldr	r3, [pc, #20]	; (800ec68 <__i2b+0x24>)
 800ec54:	4805      	ldr	r0, [pc, #20]	; (800ec6c <__i2b+0x28>)
 800ec56:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800ec5a:	f000 fce1 	bl	800f620 <__assert_func>
 800ec5e:	2301      	movs	r3, #1
 800ec60:	6144      	str	r4, [r0, #20]
 800ec62:	6103      	str	r3, [r0, #16]
 800ec64:	bd10      	pop	{r4, pc}
 800ec66:	bf00      	nop
 800ec68:	08011d77 	.word	0x08011d77
 800ec6c:	08011d88 	.word	0x08011d88

0800ec70 <__multiply>:
 800ec70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec74:	4691      	mov	r9, r2
 800ec76:	690a      	ldr	r2, [r1, #16]
 800ec78:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ec7c:	429a      	cmp	r2, r3
 800ec7e:	bfb8      	it	lt
 800ec80:	460b      	movlt	r3, r1
 800ec82:	460c      	mov	r4, r1
 800ec84:	bfbc      	itt	lt
 800ec86:	464c      	movlt	r4, r9
 800ec88:	4699      	movlt	r9, r3
 800ec8a:	6927      	ldr	r7, [r4, #16]
 800ec8c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ec90:	68a3      	ldr	r3, [r4, #8]
 800ec92:	6861      	ldr	r1, [r4, #4]
 800ec94:	eb07 060a 	add.w	r6, r7, sl
 800ec98:	42b3      	cmp	r3, r6
 800ec9a:	b085      	sub	sp, #20
 800ec9c:	bfb8      	it	lt
 800ec9e:	3101      	addlt	r1, #1
 800eca0:	f7ff fed8 	bl	800ea54 <_Balloc>
 800eca4:	b930      	cbnz	r0, 800ecb4 <__multiply+0x44>
 800eca6:	4602      	mov	r2, r0
 800eca8:	4b44      	ldr	r3, [pc, #272]	; (800edbc <__multiply+0x14c>)
 800ecaa:	4845      	ldr	r0, [pc, #276]	; (800edc0 <__multiply+0x150>)
 800ecac:	f240 115d 	movw	r1, #349	; 0x15d
 800ecb0:	f000 fcb6 	bl	800f620 <__assert_func>
 800ecb4:	f100 0514 	add.w	r5, r0, #20
 800ecb8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ecbc:	462b      	mov	r3, r5
 800ecbe:	2200      	movs	r2, #0
 800ecc0:	4543      	cmp	r3, r8
 800ecc2:	d321      	bcc.n	800ed08 <__multiply+0x98>
 800ecc4:	f104 0314 	add.w	r3, r4, #20
 800ecc8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800eccc:	f109 0314 	add.w	r3, r9, #20
 800ecd0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800ecd4:	9202      	str	r2, [sp, #8]
 800ecd6:	1b3a      	subs	r2, r7, r4
 800ecd8:	3a15      	subs	r2, #21
 800ecda:	f022 0203 	bic.w	r2, r2, #3
 800ecde:	3204      	adds	r2, #4
 800ece0:	f104 0115 	add.w	r1, r4, #21
 800ece4:	428f      	cmp	r7, r1
 800ece6:	bf38      	it	cc
 800ece8:	2204      	movcc	r2, #4
 800ecea:	9201      	str	r2, [sp, #4]
 800ecec:	9a02      	ldr	r2, [sp, #8]
 800ecee:	9303      	str	r3, [sp, #12]
 800ecf0:	429a      	cmp	r2, r3
 800ecf2:	d80c      	bhi.n	800ed0e <__multiply+0x9e>
 800ecf4:	2e00      	cmp	r6, #0
 800ecf6:	dd03      	ble.n	800ed00 <__multiply+0x90>
 800ecf8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ecfc:	2b00      	cmp	r3, #0
 800ecfe:	d05a      	beq.n	800edb6 <__multiply+0x146>
 800ed00:	6106      	str	r6, [r0, #16]
 800ed02:	b005      	add	sp, #20
 800ed04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed08:	f843 2b04 	str.w	r2, [r3], #4
 800ed0c:	e7d8      	b.n	800ecc0 <__multiply+0x50>
 800ed0e:	f8b3 a000 	ldrh.w	sl, [r3]
 800ed12:	f1ba 0f00 	cmp.w	sl, #0
 800ed16:	d024      	beq.n	800ed62 <__multiply+0xf2>
 800ed18:	f104 0e14 	add.w	lr, r4, #20
 800ed1c:	46a9      	mov	r9, r5
 800ed1e:	f04f 0c00 	mov.w	ip, #0
 800ed22:	f85e 2b04 	ldr.w	r2, [lr], #4
 800ed26:	f8d9 1000 	ldr.w	r1, [r9]
 800ed2a:	fa1f fb82 	uxth.w	fp, r2
 800ed2e:	b289      	uxth	r1, r1
 800ed30:	fb0a 110b 	mla	r1, sl, fp, r1
 800ed34:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800ed38:	f8d9 2000 	ldr.w	r2, [r9]
 800ed3c:	4461      	add	r1, ip
 800ed3e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ed42:	fb0a c20b 	mla	r2, sl, fp, ip
 800ed46:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ed4a:	b289      	uxth	r1, r1
 800ed4c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ed50:	4577      	cmp	r7, lr
 800ed52:	f849 1b04 	str.w	r1, [r9], #4
 800ed56:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ed5a:	d8e2      	bhi.n	800ed22 <__multiply+0xb2>
 800ed5c:	9a01      	ldr	r2, [sp, #4]
 800ed5e:	f845 c002 	str.w	ip, [r5, r2]
 800ed62:	9a03      	ldr	r2, [sp, #12]
 800ed64:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ed68:	3304      	adds	r3, #4
 800ed6a:	f1b9 0f00 	cmp.w	r9, #0
 800ed6e:	d020      	beq.n	800edb2 <__multiply+0x142>
 800ed70:	6829      	ldr	r1, [r5, #0]
 800ed72:	f104 0c14 	add.w	ip, r4, #20
 800ed76:	46ae      	mov	lr, r5
 800ed78:	f04f 0a00 	mov.w	sl, #0
 800ed7c:	f8bc b000 	ldrh.w	fp, [ip]
 800ed80:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800ed84:	fb09 220b 	mla	r2, r9, fp, r2
 800ed88:	4492      	add	sl, r2
 800ed8a:	b289      	uxth	r1, r1
 800ed8c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800ed90:	f84e 1b04 	str.w	r1, [lr], #4
 800ed94:	f85c 2b04 	ldr.w	r2, [ip], #4
 800ed98:	f8be 1000 	ldrh.w	r1, [lr]
 800ed9c:	0c12      	lsrs	r2, r2, #16
 800ed9e:	fb09 1102 	mla	r1, r9, r2, r1
 800eda2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800eda6:	4567      	cmp	r7, ip
 800eda8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800edac:	d8e6      	bhi.n	800ed7c <__multiply+0x10c>
 800edae:	9a01      	ldr	r2, [sp, #4]
 800edb0:	50a9      	str	r1, [r5, r2]
 800edb2:	3504      	adds	r5, #4
 800edb4:	e79a      	b.n	800ecec <__multiply+0x7c>
 800edb6:	3e01      	subs	r6, #1
 800edb8:	e79c      	b.n	800ecf4 <__multiply+0x84>
 800edba:	bf00      	nop
 800edbc:	08011d77 	.word	0x08011d77
 800edc0:	08011d88 	.word	0x08011d88

0800edc4 <__pow5mult>:
 800edc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800edc8:	4615      	mov	r5, r2
 800edca:	f012 0203 	ands.w	r2, r2, #3
 800edce:	4606      	mov	r6, r0
 800edd0:	460f      	mov	r7, r1
 800edd2:	d007      	beq.n	800ede4 <__pow5mult+0x20>
 800edd4:	4c25      	ldr	r4, [pc, #148]	; (800ee6c <__pow5mult+0xa8>)
 800edd6:	3a01      	subs	r2, #1
 800edd8:	2300      	movs	r3, #0
 800edda:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800edde:	f7ff fe9b 	bl	800eb18 <__multadd>
 800ede2:	4607      	mov	r7, r0
 800ede4:	10ad      	asrs	r5, r5, #2
 800ede6:	d03d      	beq.n	800ee64 <__pow5mult+0xa0>
 800ede8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800edea:	b97c      	cbnz	r4, 800ee0c <__pow5mult+0x48>
 800edec:	2010      	movs	r0, #16
 800edee:	f7ff fe29 	bl	800ea44 <malloc>
 800edf2:	4602      	mov	r2, r0
 800edf4:	6270      	str	r0, [r6, #36]	; 0x24
 800edf6:	b928      	cbnz	r0, 800ee04 <__pow5mult+0x40>
 800edf8:	4b1d      	ldr	r3, [pc, #116]	; (800ee70 <__pow5mult+0xac>)
 800edfa:	481e      	ldr	r0, [pc, #120]	; (800ee74 <__pow5mult+0xb0>)
 800edfc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800ee00:	f000 fc0e 	bl	800f620 <__assert_func>
 800ee04:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ee08:	6004      	str	r4, [r0, #0]
 800ee0a:	60c4      	str	r4, [r0, #12]
 800ee0c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ee10:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ee14:	b94c      	cbnz	r4, 800ee2a <__pow5mult+0x66>
 800ee16:	f240 2171 	movw	r1, #625	; 0x271
 800ee1a:	4630      	mov	r0, r6
 800ee1c:	f7ff ff12 	bl	800ec44 <__i2b>
 800ee20:	2300      	movs	r3, #0
 800ee22:	f8c8 0008 	str.w	r0, [r8, #8]
 800ee26:	4604      	mov	r4, r0
 800ee28:	6003      	str	r3, [r0, #0]
 800ee2a:	f04f 0900 	mov.w	r9, #0
 800ee2e:	07eb      	lsls	r3, r5, #31
 800ee30:	d50a      	bpl.n	800ee48 <__pow5mult+0x84>
 800ee32:	4639      	mov	r1, r7
 800ee34:	4622      	mov	r2, r4
 800ee36:	4630      	mov	r0, r6
 800ee38:	f7ff ff1a 	bl	800ec70 <__multiply>
 800ee3c:	4639      	mov	r1, r7
 800ee3e:	4680      	mov	r8, r0
 800ee40:	4630      	mov	r0, r6
 800ee42:	f7ff fe47 	bl	800ead4 <_Bfree>
 800ee46:	4647      	mov	r7, r8
 800ee48:	106d      	asrs	r5, r5, #1
 800ee4a:	d00b      	beq.n	800ee64 <__pow5mult+0xa0>
 800ee4c:	6820      	ldr	r0, [r4, #0]
 800ee4e:	b938      	cbnz	r0, 800ee60 <__pow5mult+0x9c>
 800ee50:	4622      	mov	r2, r4
 800ee52:	4621      	mov	r1, r4
 800ee54:	4630      	mov	r0, r6
 800ee56:	f7ff ff0b 	bl	800ec70 <__multiply>
 800ee5a:	6020      	str	r0, [r4, #0]
 800ee5c:	f8c0 9000 	str.w	r9, [r0]
 800ee60:	4604      	mov	r4, r0
 800ee62:	e7e4      	b.n	800ee2e <__pow5mult+0x6a>
 800ee64:	4638      	mov	r0, r7
 800ee66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ee6a:	bf00      	nop
 800ee6c:	08011ed8 	.word	0x08011ed8
 800ee70:	08011d05 	.word	0x08011d05
 800ee74:	08011d88 	.word	0x08011d88

0800ee78 <__lshift>:
 800ee78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ee7c:	460c      	mov	r4, r1
 800ee7e:	6849      	ldr	r1, [r1, #4]
 800ee80:	6923      	ldr	r3, [r4, #16]
 800ee82:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ee86:	68a3      	ldr	r3, [r4, #8]
 800ee88:	4607      	mov	r7, r0
 800ee8a:	4691      	mov	r9, r2
 800ee8c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ee90:	f108 0601 	add.w	r6, r8, #1
 800ee94:	42b3      	cmp	r3, r6
 800ee96:	db0b      	blt.n	800eeb0 <__lshift+0x38>
 800ee98:	4638      	mov	r0, r7
 800ee9a:	f7ff fddb 	bl	800ea54 <_Balloc>
 800ee9e:	4605      	mov	r5, r0
 800eea0:	b948      	cbnz	r0, 800eeb6 <__lshift+0x3e>
 800eea2:	4602      	mov	r2, r0
 800eea4:	4b2a      	ldr	r3, [pc, #168]	; (800ef50 <__lshift+0xd8>)
 800eea6:	482b      	ldr	r0, [pc, #172]	; (800ef54 <__lshift+0xdc>)
 800eea8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800eeac:	f000 fbb8 	bl	800f620 <__assert_func>
 800eeb0:	3101      	adds	r1, #1
 800eeb2:	005b      	lsls	r3, r3, #1
 800eeb4:	e7ee      	b.n	800ee94 <__lshift+0x1c>
 800eeb6:	2300      	movs	r3, #0
 800eeb8:	f100 0114 	add.w	r1, r0, #20
 800eebc:	f100 0210 	add.w	r2, r0, #16
 800eec0:	4618      	mov	r0, r3
 800eec2:	4553      	cmp	r3, sl
 800eec4:	db37      	blt.n	800ef36 <__lshift+0xbe>
 800eec6:	6920      	ldr	r0, [r4, #16]
 800eec8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800eecc:	f104 0314 	add.w	r3, r4, #20
 800eed0:	f019 091f 	ands.w	r9, r9, #31
 800eed4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800eed8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800eedc:	d02f      	beq.n	800ef3e <__lshift+0xc6>
 800eede:	f1c9 0e20 	rsb	lr, r9, #32
 800eee2:	468a      	mov	sl, r1
 800eee4:	f04f 0c00 	mov.w	ip, #0
 800eee8:	681a      	ldr	r2, [r3, #0]
 800eeea:	fa02 f209 	lsl.w	r2, r2, r9
 800eeee:	ea42 020c 	orr.w	r2, r2, ip
 800eef2:	f84a 2b04 	str.w	r2, [sl], #4
 800eef6:	f853 2b04 	ldr.w	r2, [r3], #4
 800eefa:	4298      	cmp	r0, r3
 800eefc:	fa22 fc0e 	lsr.w	ip, r2, lr
 800ef00:	d8f2      	bhi.n	800eee8 <__lshift+0x70>
 800ef02:	1b03      	subs	r3, r0, r4
 800ef04:	3b15      	subs	r3, #21
 800ef06:	f023 0303 	bic.w	r3, r3, #3
 800ef0a:	3304      	adds	r3, #4
 800ef0c:	f104 0215 	add.w	r2, r4, #21
 800ef10:	4290      	cmp	r0, r2
 800ef12:	bf38      	it	cc
 800ef14:	2304      	movcc	r3, #4
 800ef16:	f841 c003 	str.w	ip, [r1, r3]
 800ef1a:	f1bc 0f00 	cmp.w	ip, #0
 800ef1e:	d001      	beq.n	800ef24 <__lshift+0xac>
 800ef20:	f108 0602 	add.w	r6, r8, #2
 800ef24:	3e01      	subs	r6, #1
 800ef26:	4638      	mov	r0, r7
 800ef28:	612e      	str	r6, [r5, #16]
 800ef2a:	4621      	mov	r1, r4
 800ef2c:	f7ff fdd2 	bl	800ead4 <_Bfree>
 800ef30:	4628      	mov	r0, r5
 800ef32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ef36:	f842 0f04 	str.w	r0, [r2, #4]!
 800ef3a:	3301      	adds	r3, #1
 800ef3c:	e7c1      	b.n	800eec2 <__lshift+0x4a>
 800ef3e:	3904      	subs	r1, #4
 800ef40:	f853 2b04 	ldr.w	r2, [r3], #4
 800ef44:	f841 2f04 	str.w	r2, [r1, #4]!
 800ef48:	4298      	cmp	r0, r3
 800ef4a:	d8f9      	bhi.n	800ef40 <__lshift+0xc8>
 800ef4c:	e7ea      	b.n	800ef24 <__lshift+0xac>
 800ef4e:	bf00      	nop
 800ef50:	08011d77 	.word	0x08011d77
 800ef54:	08011d88 	.word	0x08011d88

0800ef58 <__mcmp>:
 800ef58:	b530      	push	{r4, r5, lr}
 800ef5a:	6902      	ldr	r2, [r0, #16]
 800ef5c:	690c      	ldr	r4, [r1, #16]
 800ef5e:	1b12      	subs	r2, r2, r4
 800ef60:	d10e      	bne.n	800ef80 <__mcmp+0x28>
 800ef62:	f100 0314 	add.w	r3, r0, #20
 800ef66:	3114      	adds	r1, #20
 800ef68:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ef6c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ef70:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ef74:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ef78:	42a5      	cmp	r5, r4
 800ef7a:	d003      	beq.n	800ef84 <__mcmp+0x2c>
 800ef7c:	d305      	bcc.n	800ef8a <__mcmp+0x32>
 800ef7e:	2201      	movs	r2, #1
 800ef80:	4610      	mov	r0, r2
 800ef82:	bd30      	pop	{r4, r5, pc}
 800ef84:	4283      	cmp	r3, r0
 800ef86:	d3f3      	bcc.n	800ef70 <__mcmp+0x18>
 800ef88:	e7fa      	b.n	800ef80 <__mcmp+0x28>
 800ef8a:	f04f 32ff 	mov.w	r2, #4294967295
 800ef8e:	e7f7      	b.n	800ef80 <__mcmp+0x28>

0800ef90 <__mdiff>:
 800ef90:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef94:	460c      	mov	r4, r1
 800ef96:	4606      	mov	r6, r0
 800ef98:	4611      	mov	r1, r2
 800ef9a:	4620      	mov	r0, r4
 800ef9c:	4690      	mov	r8, r2
 800ef9e:	f7ff ffdb 	bl	800ef58 <__mcmp>
 800efa2:	1e05      	subs	r5, r0, #0
 800efa4:	d110      	bne.n	800efc8 <__mdiff+0x38>
 800efa6:	4629      	mov	r1, r5
 800efa8:	4630      	mov	r0, r6
 800efaa:	f7ff fd53 	bl	800ea54 <_Balloc>
 800efae:	b930      	cbnz	r0, 800efbe <__mdiff+0x2e>
 800efb0:	4b3a      	ldr	r3, [pc, #232]	; (800f09c <__mdiff+0x10c>)
 800efb2:	4602      	mov	r2, r0
 800efb4:	f240 2132 	movw	r1, #562	; 0x232
 800efb8:	4839      	ldr	r0, [pc, #228]	; (800f0a0 <__mdiff+0x110>)
 800efba:	f000 fb31 	bl	800f620 <__assert_func>
 800efbe:	2301      	movs	r3, #1
 800efc0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800efc4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800efc8:	bfa4      	itt	ge
 800efca:	4643      	movge	r3, r8
 800efcc:	46a0      	movge	r8, r4
 800efce:	4630      	mov	r0, r6
 800efd0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800efd4:	bfa6      	itte	ge
 800efd6:	461c      	movge	r4, r3
 800efd8:	2500      	movge	r5, #0
 800efda:	2501      	movlt	r5, #1
 800efdc:	f7ff fd3a 	bl	800ea54 <_Balloc>
 800efe0:	b920      	cbnz	r0, 800efec <__mdiff+0x5c>
 800efe2:	4b2e      	ldr	r3, [pc, #184]	; (800f09c <__mdiff+0x10c>)
 800efe4:	4602      	mov	r2, r0
 800efe6:	f44f 7110 	mov.w	r1, #576	; 0x240
 800efea:	e7e5      	b.n	800efb8 <__mdiff+0x28>
 800efec:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800eff0:	6926      	ldr	r6, [r4, #16]
 800eff2:	60c5      	str	r5, [r0, #12]
 800eff4:	f104 0914 	add.w	r9, r4, #20
 800eff8:	f108 0514 	add.w	r5, r8, #20
 800effc:	f100 0e14 	add.w	lr, r0, #20
 800f000:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800f004:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800f008:	f108 0210 	add.w	r2, r8, #16
 800f00c:	46f2      	mov	sl, lr
 800f00e:	2100      	movs	r1, #0
 800f010:	f859 3b04 	ldr.w	r3, [r9], #4
 800f014:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800f018:	fa1f f883 	uxth.w	r8, r3
 800f01c:	fa11 f18b 	uxtah	r1, r1, fp
 800f020:	0c1b      	lsrs	r3, r3, #16
 800f022:	eba1 0808 	sub.w	r8, r1, r8
 800f026:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800f02a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800f02e:	fa1f f888 	uxth.w	r8, r8
 800f032:	1419      	asrs	r1, r3, #16
 800f034:	454e      	cmp	r6, r9
 800f036:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800f03a:	f84a 3b04 	str.w	r3, [sl], #4
 800f03e:	d8e7      	bhi.n	800f010 <__mdiff+0x80>
 800f040:	1b33      	subs	r3, r6, r4
 800f042:	3b15      	subs	r3, #21
 800f044:	f023 0303 	bic.w	r3, r3, #3
 800f048:	3304      	adds	r3, #4
 800f04a:	3415      	adds	r4, #21
 800f04c:	42a6      	cmp	r6, r4
 800f04e:	bf38      	it	cc
 800f050:	2304      	movcc	r3, #4
 800f052:	441d      	add	r5, r3
 800f054:	4473      	add	r3, lr
 800f056:	469e      	mov	lr, r3
 800f058:	462e      	mov	r6, r5
 800f05a:	4566      	cmp	r6, ip
 800f05c:	d30e      	bcc.n	800f07c <__mdiff+0xec>
 800f05e:	f10c 0203 	add.w	r2, ip, #3
 800f062:	1b52      	subs	r2, r2, r5
 800f064:	f022 0203 	bic.w	r2, r2, #3
 800f068:	3d03      	subs	r5, #3
 800f06a:	45ac      	cmp	ip, r5
 800f06c:	bf38      	it	cc
 800f06e:	2200      	movcc	r2, #0
 800f070:	441a      	add	r2, r3
 800f072:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800f076:	b17b      	cbz	r3, 800f098 <__mdiff+0x108>
 800f078:	6107      	str	r7, [r0, #16]
 800f07a:	e7a3      	b.n	800efc4 <__mdiff+0x34>
 800f07c:	f856 8b04 	ldr.w	r8, [r6], #4
 800f080:	fa11 f288 	uxtah	r2, r1, r8
 800f084:	1414      	asrs	r4, r2, #16
 800f086:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800f08a:	b292      	uxth	r2, r2
 800f08c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800f090:	f84e 2b04 	str.w	r2, [lr], #4
 800f094:	1421      	asrs	r1, r4, #16
 800f096:	e7e0      	b.n	800f05a <__mdiff+0xca>
 800f098:	3f01      	subs	r7, #1
 800f09a:	e7ea      	b.n	800f072 <__mdiff+0xe2>
 800f09c:	08011d77 	.word	0x08011d77
 800f0a0:	08011d88 	.word	0x08011d88

0800f0a4 <__d2b>:
 800f0a4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f0a8:	4689      	mov	r9, r1
 800f0aa:	2101      	movs	r1, #1
 800f0ac:	ec57 6b10 	vmov	r6, r7, d0
 800f0b0:	4690      	mov	r8, r2
 800f0b2:	f7ff fccf 	bl	800ea54 <_Balloc>
 800f0b6:	4604      	mov	r4, r0
 800f0b8:	b930      	cbnz	r0, 800f0c8 <__d2b+0x24>
 800f0ba:	4602      	mov	r2, r0
 800f0bc:	4b25      	ldr	r3, [pc, #148]	; (800f154 <__d2b+0xb0>)
 800f0be:	4826      	ldr	r0, [pc, #152]	; (800f158 <__d2b+0xb4>)
 800f0c0:	f240 310a 	movw	r1, #778	; 0x30a
 800f0c4:	f000 faac 	bl	800f620 <__assert_func>
 800f0c8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800f0cc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800f0d0:	bb35      	cbnz	r5, 800f120 <__d2b+0x7c>
 800f0d2:	2e00      	cmp	r6, #0
 800f0d4:	9301      	str	r3, [sp, #4]
 800f0d6:	d028      	beq.n	800f12a <__d2b+0x86>
 800f0d8:	4668      	mov	r0, sp
 800f0da:	9600      	str	r6, [sp, #0]
 800f0dc:	f7ff fd82 	bl	800ebe4 <__lo0bits>
 800f0e0:	9900      	ldr	r1, [sp, #0]
 800f0e2:	b300      	cbz	r0, 800f126 <__d2b+0x82>
 800f0e4:	9a01      	ldr	r2, [sp, #4]
 800f0e6:	f1c0 0320 	rsb	r3, r0, #32
 800f0ea:	fa02 f303 	lsl.w	r3, r2, r3
 800f0ee:	430b      	orrs	r3, r1
 800f0f0:	40c2      	lsrs	r2, r0
 800f0f2:	6163      	str	r3, [r4, #20]
 800f0f4:	9201      	str	r2, [sp, #4]
 800f0f6:	9b01      	ldr	r3, [sp, #4]
 800f0f8:	61a3      	str	r3, [r4, #24]
 800f0fa:	2b00      	cmp	r3, #0
 800f0fc:	bf14      	ite	ne
 800f0fe:	2202      	movne	r2, #2
 800f100:	2201      	moveq	r2, #1
 800f102:	6122      	str	r2, [r4, #16]
 800f104:	b1d5      	cbz	r5, 800f13c <__d2b+0x98>
 800f106:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800f10a:	4405      	add	r5, r0
 800f10c:	f8c9 5000 	str.w	r5, [r9]
 800f110:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800f114:	f8c8 0000 	str.w	r0, [r8]
 800f118:	4620      	mov	r0, r4
 800f11a:	b003      	add	sp, #12
 800f11c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f120:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f124:	e7d5      	b.n	800f0d2 <__d2b+0x2e>
 800f126:	6161      	str	r1, [r4, #20]
 800f128:	e7e5      	b.n	800f0f6 <__d2b+0x52>
 800f12a:	a801      	add	r0, sp, #4
 800f12c:	f7ff fd5a 	bl	800ebe4 <__lo0bits>
 800f130:	9b01      	ldr	r3, [sp, #4]
 800f132:	6163      	str	r3, [r4, #20]
 800f134:	2201      	movs	r2, #1
 800f136:	6122      	str	r2, [r4, #16]
 800f138:	3020      	adds	r0, #32
 800f13a:	e7e3      	b.n	800f104 <__d2b+0x60>
 800f13c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f140:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800f144:	f8c9 0000 	str.w	r0, [r9]
 800f148:	6918      	ldr	r0, [r3, #16]
 800f14a:	f7ff fd2b 	bl	800eba4 <__hi0bits>
 800f14e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f152:	e7df      	b.n	800f114 <__d2b+0x70>
 800f154:	08011d77 	.word	0x08011d77
 800f158:	08011d88 	.word	0x08011d88

0800f15c <_calloc_r>:
 800f15c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f15e:	fba1 2402 	umull	r2, r4, r1, r2
 800f162:	b94c      	cbnz	r4, 800f178 <_calloc_r+0x1c>
 800f164:	4611      	mov	r1, r2
 800f166:	9201      	str	r2, [sp, #4]
 800f168:	f000 f87a 	bl	800f260 <_malloc_r>
 800f16c:	9a01      	ldr	r2, [sp, #4]
 800f16e:	4605      	mov	r5, r0
 800f170:	b930      	cbnz	r0, 800f180 <_calloc_r+0x24>
 800f172:	4628      	mov	r0, r5
 800f174:	b003      	add	sp, #12
 800f176:	bd30      	pop	{r4, r5, pc}
 800f178:	220c      	movs	r2, #12
 800f17a:	6002      	str	r2, [r0, #0]
 800f17c:	2500      	movs	r5, #0
 800f17e:	e7f8      	b.n	800f172 <_calloc_r+0x16>
 800f180:	4621      	mov	r1, r4
 800f182:	f7fe f92b 	bl	800d3dc <memset>
 800f186:	e7f4      	b.n	800f172 <_calloc_r+0x16>

0800f188 <_free_r>:
 800f188:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f18a:	2900      	cmp	r1, #0
 800f18c:	d044      	beq.n	800f218 <_free_r+0x90>
 800f18e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f192:	9001      	str	r0, [sp, #4]
 800f194:	2b00      	cmp	r3, #0
 800f196:	f1a1 0404 	sub.w	r4, r1, #4
 800f19a:	bfb8      	it	lt
 800f19c:	18e4      	addlt	r4, r4, r3
 800f19e:	f000 fa9b 	bl	800f6d8 <__malloc_lock>
 800f1a2:	4a1e      	ldr	r2, [pc, #120]	; (800f21c <_free_r+0x94>)
 800f1a4:	9801      	ldr	r0, [sp, #4]
 800f1a6:	6813      	ldr	r3, [r2, #0]
 800f1a8:	b933      	cbnz	r3, 800f1b8 <_free_r+0x30>
 800f1aa:	6063      	str	r3, [r4, #4]
 800f1ac:	6014      	str	r4, [r2, #0]
 800f1ae:	b003      	add	sp, #12
 800f1b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f1b4:	f000 ba96 	b.w	800f6e4 <__malloc_unlock>
 800f1b8:	42a3      	cmp	r3, r4
 800f1ba:	d908      	bls.n	800f1ce <_free_r+0x46>
 800f1bc:	6825      	ldr	r5, [r4, #0]
 800f1be:	1961      	adds	r1, r4, r5
 800f1c0:	428b      	cmp	r3, r1
 800f1c2:	bf01      	itttt	eq
 800f1c4:	6819      	ldreq	r1, [r3, #0]
 800f1c6:	685b      	ldreq	r3, [r3, #4]
 800f1c8:	1949      	addeq	r1, r1, r5
 800f1ca:	6021      	streq	r1, [r4, #0]
 800f1cc:	e7ed      	b.n	800f1aa <_free_r+0x22>
 800f1ce:	461a      	mov	r2, r3
 800f1d0:	685b      	ldr	r3, [r3, #4]
 800f1d2:	b10b      	cbz	r3, 800f1d8 <_free_r+0x50>
 800f1d4:	42a3      	cmp	r3, r4
 800f1d6:	d9fa      	bls.n	800f1ce <_free_r+0x46>
 800f1d8:	6811      	ldr	r1, [r2, #0]
 800f1da:	1855      	adds	r5, r2, r1
 800f1dc:	42a5      	cmp	r5, r4
 800f1de:	d10b      	bne.n	800f1f8 <_free_r+0x70>
 800f1e0:	6824      	ldr	r4, [r4, #0]
 800f1e2:	4421      	add	r1, r4
 800f1e4:	1854      	adds	r4, r2, r1
 800f1e6:	42a3      	cmp	r3, r4
 800f1e8:	6011      	str	r1, [r2, #0]
 800f1ea:	d1e0      	bne.n	800f1ae <_free_r+0x26>
 800f1ec:	681c      	ldr	r4, [r3, #0]
 800f1ee:	685b      	ldr	r3, [r3, #4]
 800f1f0:	6053      	str	r3, [r2, #4]
 800f1f2:	4421      	add	r1, r4
 800f1f4:	6011      	str	r1, [r2, #0]
 800f1f6:	e7da      	b.n	800f1ae <_free_r+0x26>
 800f1f8:	d902      	bls.n	800f200 <_free_r+0x78>
 800f1fa:	230c      	movs	r3, #12
 800f1fc:	6003      	str	r3, [r0, #0]
 800f1fe:	e7d6      	b.n	800f1ae <_free_r+0x26>
 800f200:	6825      	ldr	r5, [r4, #0]
 800f202:	1961      	adds	r1, r4, r5
 800f204:	428b      	cmp	r3, r1
 800f206:	bf04      	itt	eq
 800f208:	6819      	ldreq	r1, [r3, #0]
 800f20a:	685b      	ldreq	r3, [r3, #4]
 800f20c:	6063      	str	r3, [r4, #4]
 800f20e:	bf04      	itt	eq
 800f210:	1949      	addeq	r1, r1, r5
 800f212:	6021      	streq	r1, [r4, #0]
 800f214:	6054      	str	r4, [r2, #4]
 800f216:	e7ca      	b.n	800f1ae <_free_r+0x26>
 800f218:	b003      	add	sp, #12
 800f21a:	bd30      	pop	{r4, r5, pc}
 800f21c:	2000629c 	.word	0x2000629c

0800f220 <sbrk_aligned>:
 800f220:	b570      	push	{r4, r5, r6, lr}
 800f222:	4e0e      	ldr	r6, [pc, #56]	; (800f25c <sbrk_aligned+0x3c>)
 800f224:	460c      	mov	r4, r1
 800f226:	6831      	ldr	r1, [r6, #0]
 800f228:	4605      	mov	r5, r0
 800f22a:	b911      	cbnz	r1, 800f232 <sbrk_aligned+0x12>
 800f22c:	f000 f9e8 	bl	800f600 <_sbrk_r>
 800f230:	6030      	str	r0, [r6, #0]
 800f232:	4621      	mov	r1, r4
 800f234:	4628      	mov	r0, r5
 800f236:	f000 f9e3 	bl	800f600 <_sbrk_r>
 800f23a:	1c43      	adds	r3, r0, #1
 800f23c:	d00a      	beq.n	800f254 <sbrk_aligned+0x34>
 800f23e:	1cc4      	adds	r4, r0, #3
 800f240:	f024 0403 	bic.w	r4, r4, #3
 800f244:	42a0      	cmp	r0, r4
 800f246:	d007      	beq.n	800f258 <sbrk_aligned+0x38>
 800f248:	1a21      	subs	r1, r4, r0
 800f24a:	4628      	mov	r0, r5
 800f24c:	f000 f9d8 	bl	800f600 <_sbrk_r>
 800f250:	3001      	adds	r0, #1
 800f252:	d101      	bne.n	800f258 <sbrk_aligned+0x38>
 800f254:	f04f 34ff 	mov.w	r4, #4294967295
 800f258:	4620      	mov	r0, r4
 800f25a:	bd70      	pop	{r4, r5, r6, pc}
 800f25c:	200062a0 	.word	0x200062a0

0800f260 <_malloc_r>:
 800f260:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f264:	1ccd      	adds	r5, r1, #3
 800f266:	f025 0503 	bic.w	r5, r5, #3
 800f26a:	3508      	adds	r5, #8
 800f26c:	2d0c      	cmp	r5, #12
 800f26e:	bf38      	it	cc
 800f270:	250c      	movcc	r5, #12
 800f272:	2d00      	cmp	r5, #0
 800f274:	4607      	mov	r7, r0
 800f276:	db01      	blt.n	800f27c <_malloc_r+0x1c>
 800f278:	42a9      	cmp	r1, r5
 800f27a:	d905      	bls.n	800f288 <_malloc_r+0x28>
 800f27c:	230c      	movs	r3, #12
 800f27e:	603b      	str	r3, [r7, #0]
 800f280:	2600      	movs	r6, #0
 800f282:	4630      	mov	r0, r6
 800f284:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f288:	4e2e      	ldr	r6, [pc, #184]	; (800f344 <_malloc_r+0xe4>)
 800f28a:	f000 fa25 	bl	800f6d8 <__malloc_lock>
 800f28e:	6833      	ldr	r3, [r6, #0]
 800f290:	461c      	mov	r4, r3
 800f292:	bb34      	cbnz	r4, 800f2e2 <_malloc_r+0x82>
 800f294:	4629      	mov	r1, r5
 800f296:	4638      	mov	r0, r7
 800f298:	f7ff ffc2 	bl	800f220 <sbrk_aligned>
 800f29c:	1c43      	adds	r3, r0, #1
 800f29e:	4604      	mov	r4, r0
 800f2a0:	d14d      	bne.n	800f33e <_malloc_r+0xde>
 800f2a2:	6834      	ldr	r4, [r6, #0]
 800f2a4:	4626      	mov	r6, r4
 800f2a6:	2e00      	cmp	r6, #0
 800f2a8:	d140      	bne.n	800f32c <_malloc_r+0xcc>
 800f2aa:	6823      	ldr	r3, [r4, #0]
 800f2ac:	4631      	mov	r1, r6
 800f2ae:	4638      	mov	r0, r7
 800f2b0:	eb04 0803 	add.w	r8, r4, r3
 800f2b4:	f000 f9a4 	bl	800f600 <_sbrk_r>
 800f2b8:	4580      	cmp	r8, r0
 800f2ba:	d13a      	bne.n	800f332 <_malloc_r+0xd2>
 800f2bc:	6821      	ldr	r1, [r4, #0]
 800f2be:	3503      	adds	r5, #3
 800f2c0:	1a6d      	subs	r5, r5, r1
 800f2c2:	f025 0503 	bic.w	r5, r5, #3
 800f2c6:	3508      	adds	r5, #8
 800f2c8:	2d0c      	cmp	r5, #12
 800f2ca:	bf38      	it	cc
 800f2cc:	250c      	movcc	r5, #12
 800f2ce:	4629      	mov	r1, r5
 800f2d0:	4638      	mov	r0, r7
 800f2d2:	f7ff ffa5 	bl	800f220 <sbrk_aligned>
 800f2d6:	3001      	adds	r0, #1
 800f2d8:	d02b      	beq.n	800f332 <_malloc_r+0xd2>
 800f2da:	6823      	ldr	r3, [r4, #0]
 800f2dc:	442b      	add	r3, r5
 800f2de:	6023      	str	r3, [r4, #0]
 800f2e0:	e00e      	b.n	800f300 <_malloc_r+0xa0>
 800f2e2:	6822      	ldr	r2, [r4, #0]
 800f2e4:	1b52      	subs	r2, r2, r5
 800f2e6:	d41e      	bmi.n	800f326 <_malloc_r+0xc6>
 800f2e8:	2a0b      	cmp	r2, #11
 800f2ea:	d916      	bls.n	800f31a <_malloc_r+0xba>
 800f2ec:	1961      	adds	r1, r4, r5
 800f2ee:	42a3      	cmp	r3, r4
 800f2f0:	6025      	str	r5, [r4, #0]
 800f2f2:	bf18      	it	ne
 800f2f4:	6059      	strne	r1, [r3, #4]
 800f2f6:	6863      	ldr	r3, [r4, #4]
 800f2f8:	bf08      	it	eq
 800f2fa:	6031      	streq	r1, [r6, #0]
 800f2fc:	5162      	str	r2, [r4, r5]
 800f2fe:	604b      	str	r3, [r1, #4]
 800f300:	4638      	mov	r0, r7
 800f302:	f104 060b 	add.w	r6, r4, #11
 800f306:	f000 f9ed 	bl	800f6e4 <__malloc_unlock>
 800f30a:	f026 0607 	bic.w	r6, r6, #7
 800f30e:	1d23      	adds	r3, r4, #4
 800f310:	1af2      	subs	r2, r6, r3
 800f312:	d0b6      	beq.n	800f282 <_malloc_r+0x22>
 800f314:	1b9b      	subs	r3, r3, r6
 800f316:	50a3      	str	r3, [r4, r2]
 800f318:	e7b3      	b.n	800f282 <_malloc_r+0x22>
 800f31a:	6862      	ldr	r2, [r4, #4]
 800f31c:	42a3      	cmp	r3, r4
 800f31e:	bf0c      	ite	eq
 800f320:	6032      	streq	r2, [r6, #0]
 800f322:	605a      	strne	r2, [r3, #4]
 800f324:	e7ec      	b.n	800f300 <_malloc_r+0xa0>
 800f326:	4623      	mov	r3, r4
 800f328:	6864      	ldr	r4, [r4, #4]
 800f32a:	e7b2      	b.n	800f292 <_malloc_r+0x32>
 800f32c:	4634      	mov	r4, r6
 800f32e:	6876      	ldr	r6, [r6, #4]
 800f330:	e7b9      	b.n	800f2a6 <_malloc_r+0x46>
 800f332:	230c      	movs	r3, #12
 800f334:	603b      	str	r3, [r7, #0]
 800f336:	4638      	mov	r0, r7
 800f338:	f000 f9d4 	bl	800f6e4 <__malloc_unlock>
 800f33c:	e7a1      	b.n	800f282 <_malloc_r+0x22>
 800f33e:	6025      	str	r5, [r4, #0]
 800f340:	e7de      	b.n	800f300 <_malloc_r+0xa0>
 800f342:	bf00      	nop
 800f344:	2000629c 	.word	0x2000629c

0800f348 <__ssputs_r>:
 800f348:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f34c:	688e      	ldr	r6, [r1, #8]
 800f34e:	429e      	cmp	r6, r3
 800f350:	4682      	mov	sl, r0
 800f352:	460c      	mov	r4, r1
 800f354:	4690      	mov	r8, r2
 800f356:	461f      	mov	r7, r3
 800f358:	d838      	bhi.n	800f3cc <__ssputs_r+0x84>
 800f35a:	898a      	ldrh	r2, [r1, #12]
 800f35c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f360:	d032      	beq.n	800f3c8 <__ssputs_r+0x80>
 800f362:	6825      	ldr	r5, [r4, #0]
 800f364:	6909      	ldr	r1, [r1, #16]
 800f366:	eba5 0901 	sub.w	r9, r5, r1
 800f36a:	6965      	ldr	r5, [r4, #20]
 800f36c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f370:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f374:	3301      	adds	r3, #1
 800f376:	444b      	add	r3, r9
 800f378:	106d      	asrs	r5, r5, #1
 800f37a:	429d      	cmp	r5, r3
 800f37c:	bf38      	it	cc
 800f37e:	461d      	movcc	r5, r3
 800f380:	0553      	lsls	r3, r2, #21
 800f382:	d531      	bpl.n	800f3e8 <__ssputs_r+0xa0>
 800f384:	4629      	mov	r1, r5
 800f386:	f7ff ff6b 	bl	800f260 <_malloc_r>
 800f38a:	4606      	mov	r6, r0
 800f38c:	b950      	cbnz	r0, 800f3a4 <__ssputs_r+0x5c>
 800f38e:	230c      	movs	r3, #12
 800f390:	f8ca 3000 	str.w	r3, [sl]
 800f394:	89a3      	ldrh	r3, [r4, #12]
 800f396:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f39a:	81a3      	strh	r3, [r4, #12]
 800f39c:	f04f 30ff 	mov.w	r0, #4294967295
 800f3a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f3a4:	6921      	ldr	r1, [r4, #16]
 800f3a6:	464a      	mov	r2, r9
 800f3a8:	f7fe f80a 	bl	800d3c0 <memcpy>
 800f3ac:	89a3      	ldrh	r3, [r4, #12]
 800f3ae:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f3b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f3b6:	81a3      	strh	r3, [r4, #12]
 800f3b8:	6126      	str	r6, [r4, #16]
 800f3ba:	6165      	str	r5, [r4, #20]
 800f3bc:	444e      	add	r6, r9
 800f3be:	eba5 0509 	sub.w	r5, r5, r9
 800f3c2:	6026      	str	r6, [r4, #0]
 800f3c4:	60a5      	str	r5, [r4, #8]
 800f3c6:	463e      	mov	r6, r7
 800f3c8:	42be      	cmp	r6, r7
 800f3ca:	d900      	bls.n	800f3ce <__ssputs_r+0x86>
 800f3cc:	463e      	mov	r6, r7
 800f3ce:	6820      	ldr	r0, [r4, #0]
 800f3d0:	4632      	mov	r2, r6
 800f3d2:	4641      	mov	r1, r8
 800f3d4:	f000 f966 	bl	800f6a4 <memmove>
 800f3d8:	68a3      	ldr	r3, [r4, #8]
 800f3da:	1b9b      	subs	r3, r3, r6
 800f3dc:	60a3      	str	r3, [r4, #8]
 800f3de:	6823      	ldr	r3, [r4, #0]
 800f3e0:	4433      	add	r3, r6
 800f3e2:	6023      	str	r3, [r4, #0]
 800f3e4:	2000      	movs	r0, #0
 800f3e6:	e7db      	b.n	800f3a0 <__ssputs_r+0x58>
 800f3e8:	462a      	mov	r2, r5
 800f3ea:	f000 f981 	bl	800f6f0 <_realloc_r>
 800f3ee:	4606      	mov	r6, r0
 800f3f0:	2800      	cmp	r0, #0
 800f3f2:	d1e1      	bne.n	800f3b8 <__ssputs_r+0x70>
 800f3f4:	6921      	ldr	r1, [r4, #16]
 800f3f6:	4650      	mov	r0, sl
 800f3f8:	f7ff fec6 	bl	800f188 <_free_r>
 800f3fc:	e7c7      	b.n	800f38e <__ssputs_r+0x46>
	...

0800f400 <_svfiprintf_r>:
 800f400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f404:	4698      	mov	r8, r3
 800f406:	898b      	ldrh	r3, [r1, #12]
 800f408:	061b      	lsls	r3, r3, #24
 800f40a:	b09d      	sub	sp, #116	; 0x74
 800f40c:	4607      	mov	r7, r0
 800f40e:	460d      	mov	r5, r1
 800f410:	4614      	mov	r4, r2
 800f412:	d50e      	bpl.n	800f432 <_svfiprintf_r+0x32>
 800f414:	690b      	ldr	r3, [r1, #16]
 800f416:	b963      	cbnz	r3, 800f432 <_svfiprintf_r+0x32>
 800f418:	2140      	movs	r1, #64	; 0x40
 800f41a:	f7ff ff21 	bl	800f260 <_malloc_r>
 800f41e:	6028      	str	r0, [r5, #0]
 800f420:	6128      	str	r0, [r5, #16]
 800f422:	b920      	cbnz	r0, 800f42e <_svfiprintf_r+0x2e>
 800f424:	230c      	movs	r3, #12
 800f426:	603b      	str	r3, [r7, #0]
 800f428:	f04f 30ff 	mov.w	r0, #4294967295
 800f42c:	e0d1      	b.n	800f5d2 <_svfiprintf_r+0x1d2>
 800f42e:	2340      	movs	r3, #64	; 0x40
 800f430:	616b      	str	r3, [r5, #20]
 800f432:	2300      	movs	r3, #0
 800f434:	9309      	str	r3, [sp, #36]	; 0x24
 800f436:	2320      	movs	r3, #32
 800f438:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f43c:	f8cd 800c 	str.w	r8, [sp, #12]
 800f440:	2330      	movs	r3, #48	; 0x30
 800f442:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800f5ec <_svfiprintf_r+0x1ec>
 800f446:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f44a:	f04f 0901 	mov.w	r9, #1
 800f44e:	4623      	mov	r3, r4
 800f450:	469a      	mov	sl, r3
 800f452:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f456:	b10a      	cbz	r2, 800f45c <_svfiprintf_r+0x5c>
 800f458:	2a25      	cmp	r2, #37	; 0x25
 800f45a:	d1f9      	bne.n	800f450 <_svfiprintf_r+0x50>
 800f45c:	ebba 0b04 	subs.w	fp, sl, r4
 800f460:	d00b      	beq.n	800f47a <_svfiprintf_r+0x7a>
 800f462:	465b      	mov	r3, fp
 800f464:	4622      	mov	r2, r4
 800f466:	4629      	mov	r1, r5
 800f468:	4638      	mov	r0, r7
 800f46a:	f7ff ff6d 	bl	800f348 <__ssputs_r>
 800f46e:	3001      	adds	r0, #1
 800f470:	f000 80aa 	beq.w	800f5c8 <_svfiprintf_r+0x1c8>
 800f474:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f476:	445a      	add	r2, fp
 800f478:	9209      	str	r2, [sp, #36]	; 0x24
 800f47a:	f89a 3000 	ldrb.w	r3, [sl]
 800f47e:	2b00      	cmp	r3, #0
 800f480:	f000 80a2 	beq.w	800f5c8 <_svfiprintf_r+0x1c8>
 800f484:	2300      	movs	r3, #0
 800f486:	f04f 32ff 	mov.w	r2, #4294967295
 800f48a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f48e:	f10a 0a01 	add.w	sl, sl, #1
 800f492:	9304      	str	r3, [sp, #16]
 800f494:	9307      	str	r3, [sp, #28]
 800f496:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f49a:	931a      	str	r3, [sp, #104]	; 0x68
 800f49c:	4654      	mov	r4, sl
 800f49e:	2205      	movs	r2, #5
 800f4a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f4a4:	4851      	ldr	r0, [pc, #324]	; (800f5ec <_svfiprintf_r+0x1ec>)
 800f4a6:	f7f0 feb3 	bl	8000210 <memchr>
 800f4aa:	9a04      	ldr	r2, [sp, #16]
 800f4ac:	b9d8      	cbnz	r0, 800f4e6 <_svfiprintf_r+0xe6>
 800f4ae:	06d0      	lsls	r0, r2, #27
 800f4b0:	bf44      	itt	mi
 800f4b2:	2320      	movmi	r3, #32
 800f4b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f4b8:	0711      	lsls	r1, r2, #28
 800f4ba:	bf44      	itt	mi
 800f4bc:	232b      	movmi	r3, #43	; 0x2b
 800f4be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f4c2:	f89a 3000 	ldrb.w	r3, [sl]
 800f4c6:	2b2a      	cmp	r3, #42	; 0x2a
 800f4c8:	d015      	beq.n	800f4f6 <_svfiprintf_r+0xf6>
 800f4ca:	9a07      	ldr	r2, [sp, #28]
 800f4cc:	4654      	mov	r4, sl
 800f4ce:	2000      	movs	r0, #0
 800f4d0:	f04f 0c0a 	mov.w	ip, #10
 800f4d4:	4621      	mov	r1, r4
 800f4d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f4da:	3b30      	subs	r3, #48	; 0x30
 800f4dc:	2b09      	cmp	r3, #9
 800f4de:	d94e      	bls.n	800f57e <_svfiprintf_r+0x17e>
 800f4e0:	b1b0      	cbz	r0, 800f510 <_svfiprintf_r+0x110>
 800f4e2:	9207      	str	r2, [sp, #28]
 800f4e4:	e014      	b.n	800f510 <_svfiprintf_r+0x110>
 800f4e6:	eba0 0308 	sub.w	r3, r0, r8
 800f4ea:	fa09 f303 	lsl.w	r3, r9, r3
 800f4ee:	4313      	orrs	r3, r2
 800f4f0:	9304      	str	r3, [sp, #16]
 800f4f2:	46a2      	mov	sl, r4
 800f4f4:	e7d2      	b.n	800f49c <_svfiprintf_r+0x9c>
 800f4f6:	9b03      	ldr	r3, [sp, #12]
 800f4f8:	1d19      	adds	r1, r3, #4
 800f4fa:	681b      	ldr	r3, [r3, #0]
 800f4fc:	9103      	str	r1, [sp, #12]
 800f4fe:	2b00      	cmp	r3, #0
 800f500:	bfbb      	ittet	lt
 800f502:	425b      	neglt	r3, r3
 800f504:	f042 0202 	orrlt.w	r2, r2, #2
 800f508:	9307      	strge	r3, [sp, #28]
 800f50a:	9307      	strlt	r3, [sp, #28]
 800f50c:	bfb8      	it	lt
 800f50e:	9204      	strlt	r2, [sp, #16]
 800f510:	7823      	ldrb	r3, [r4, #0]
 800f512:	2b2e      	cmp	r3, #46	; 0x2e
 800f514:	d10c      	bne.n	800f530 <_svfiprintf_r+0x130>
 800f516:	7863      	ldrb	r3, [r4, #1]
 800f518:	2b2a      	cmp	r3, #42	; 0x2a
 800f51a:	d135      	bne.n	800f588 <_svfiprintf_r+0x188>
 800f51c:	9b03      	ldr	r3, [sp, #12]
 800f51e:	1d1a      	adds	r2, r3, #4
 800f520:	681b      	ldr	r3, [r3, #0]
 800f522:	9203      	str	r2, [sp, #12]
 800f524:	2b00      	cmp	r3, #0
 800f526:	bfb8      	it	lt
 800f528:	f04f 33ff 	movlt.w	r3, #4294967295
 800f52c:	3402      	adds	r4, #2
 800f52e:	9305      	str	r3, [sp, #20]
 800f530:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800f5fc <_svfiprintf_r+0x1fc>
 800f534:	7821      	ldrb	r1, [r4, #0]
 800f536:	2203      	movs	r2, #3
 800f538:	4650      	mov	r0, sl
 800f53a:	f7f0 fe69 	bl	8000210 <memchr>
 800f53e:	b140      	cbz	r0, 800f552 <_svfiprintf_r+0x152>
 800f540:	2340      	movs	r3, #64	; 0x40
 800f542:	eba0 000a 	sub.w	r0, r0, sl
 800f546:	fa03 f000 	lsl.w	r0, r3, r0
 800f54a:	9b04      	ldr	r3, [sp, #16]
 800f54c:	4303      	orrs	r3, r0
 800f54e:	3401      	adds	r4, #1
 800f550:	9304      	str	r3, [sp, #16]
 800f552:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f556:	4826      	ldr	r0, [pc, #152]	; (800f5f0 <_svfiprintf_r+0x1f0>)
 800f558:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f55c:	2206      	movs	r2, #6
 800f55e:	f7f0 fe57 	bl	8000210 <memchr>
 800f562:	2800      	cmp	r0, #0
 800f564:	d038      	beq.n	800f5d8 <_svfiprintf_r+0x1d8>
 800f566:	4b23      	ldr	r3, [pc, #140]	; (800f5f4 <_svfiprintf_r+0x1f4>)
 800f568:	bb1b      	cbnz	r3, 800f5b2 <_svfiprintf_r+0x1b2>
 800f56a:	9b03      	ldr	r3, [sp, #12]
 800f56c:	3307      	adds	r3, #7
 800f56e:	f023 0307 	bic.w	r3, r3, #7
 800f572:	3308      	adds	r3, #8
 800f574:	9303      	str	r3, [sp, #12]
 800f576:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f578:	4433      	add	r3, r6
 800f57a:	9309      	str	r3, [sp, #36]	; 0x24
 800f57c:	e767      	b.n	800f44e <_svfiprintf_r+0x4e>
 800f57e:	fb0c 3202 	mla	r2, ip, r2, r3
 800f582:	460c      	mov	r4, r1
 800f584:	2001      	movs	r0, #1
 800f586:	e7a5      	b.n	800f4d4 <_svfiprintf_r+0xd4>
 800f588:	2300      	movs	r3, #0
 800f58a:	3401      	adds	r4, #1
 800f58c:	9305      	str	r3, [sp, #20]
 800f58e:	4619      	mov	r1, r3
 800f590:	f04f 0c0a 	mov.w	ip, #10
 800f594:	4620      	mov	r0, r4
 800f596:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f59a:	3a30      	subs	r2, #48	; 0x30
 800f59c:	2a09      	cmp	r2, #9
 800f59e:	d903      	bls.n	800f5a8 <_svfiprintf_r+0x1a8>
 800f5a0:	2b00      	cmp	r3, #0
 800f5a2:	d0c5      	beq.n	800f530 <_svfiprintf_r+0x130>
 800f5a4:	9105      	str	r1, [sp, #20]
 800f5a6:	e7c3      	b.n	800f530 <_svfiprintf_r+0x130>
 800f5a8:	fb0c 2101 	mla	r1, ip, r1, r2
 800f5ac:	4604      	mov	r4, r0
 800f5ae:	2301      	movs	r3, #1
 800f5b0:	e7f0      	b.n	800f594 <_svfiprintf_r+0x194>
 800f5b2:	ab03      	add	r3, sp, #12
 800f5b4:	9300      	str	r3, [sp, #0]
 800f5b6:	462a      	mov	r2, r5
 800f5b8:	4b0f      	ldr	r3, [pc, #60]	; (800f5f8 <_svfiprintf_r+0x1f8>)
 800f5ba:	a904      	add	r1, sp, #16
 800f5bc:	4638      	mov	r0, r7
 800f5be:	f7fd ffb5 	bl	800d52c <_printf_float>
 800f5c2:	1c42      	adds	r2, r0, #1
 800f5c4:	4606      	mov	r6, r0
 800f5c6:	d1d6      	bne.n	800f576 <_svfiprintf_r+0x176>
 800f5c8:	89ab      	ldrh	r3, [r5, #12]
 800f5ca:	065b      	lsls	r3, r3, #25
 800f5cc:	f53f af2c 	bmi.w	800f428 <_svfiprintf_r+0x28>
 800f5d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f5d2:	b01d      	add	sp, #116	; 0x74
 800f5d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f5d8:	ab03      	add	r3, sp, #12
 800f5da:	9300      	str	r3, [sp, #0]
 800f5dc:	462a      	mov	r2, r5
 800f5de:	4b06      	ldr	r3, [pc, #24]	; (800f5f8 <_svfiprintf_r+0x1f8>)
 800f5e0:	a904      	add	r1, sp, #16
 800f5e2:	4638      	mov	r0, r7
 800f5e4:	f7fe fa46 	bl	800da74 <_printf_i>
 800f5e8:	e7eb      	b.n	800f5c2 <_svfiprintf_r+0x1c2>
 800f5ea:	bf00      	nop
 800f5ec:	08011ee4 	.word	0x08011ee4
 800f5f0:	08011eee 	.word	0x08011eee
 800f5f4:	0800d52d 	.word	0x0800d52d
 800f5f8:	0800f349 	.word	0x0800f349
 800f5fc:	08011eea 	.word	0x08011eea

0800f600 <_sbrk_r>:
 800f600:	b538      	push	{r3, r4, r5, lr}
 800f602:	4d06      	ldr	r5, [pc, #24]	; (800f61c <_sbrk_r+0x1c>)
 800f604:	2300      	movs	r3, #0
 800f606:	4604      	mov	r4, r0
 800f608:	4608      	mov	r0, r1
 800f60a:	602b      	str	r3, [r5, #0]
 800f60c:	f7f6 f988 	bl	8005920 <_sbrk>
 800f610:	1c43      	adds	r3, r0, #1
 800f612:	d102      	bne.n	800f61a <_sbrk_r+0x1a>
 800f614:	682b      	ldr	r3, [r5, #0]
 800f616:	b103      	cbz	r3, 800f61a <_sbrk_r+0x1a>
 800f618:	6023      	str	r3, [r4, #0]
 800f61a:	bd38      	pop	{r3, r4, r5, pc}
 800f61c:	200062a4 	.word	0x200062a4

0800f620 <__assert_func>:
 800f620:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f622:	4614      	mov	r4, r2
 800f624:	461a      	mov	r2, r3
 800f626:	4b09      	ldr	r3, [pc, #36]	; (800f64c <__assert_func+0x2c>)
 800f628:	681b      	ldr	r3, [r3, #0]
 800f62a:	4605      	mov	r5, r0
 800f62c:	68d8      	ldr	r0, [r3, #12]
 800f62e:	b14c      	cbz	r4, 800f644 <__assert_func+0x24>
 800f630:	4b07      	ldr	r3, [pc, #28]	; (800f650 <__assert_func+0x30>)
 800f632:	9100      	str	r1, [sp, #0]
 800f634:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f638:	4906      	ldr	r1, [pc, #24]	; (800f654 <__assert_func+0x34>)
 800f63a:	462b      	mov	r3, r5
 800f63c:	f000 f80e 	bl	800f65c <fiprintf>
 800f640:	f000 faac 	bl	800fb9c <abort>
 800f644:	4b04      	ldr	r3, [pc, #16]	; (800f658 <__assert_func+0x38>)
 800f646:	461c      	mov	r4, r3
 800f648:	e7f3      	b.n	800f632 <__assert_func+0x12>
 800f64a:	bf00      	nop
 800f64c:	20000020 	.word	0x20000020
 800f650:	08011ef5 	.word	0x08011ef5
 800f654:	08011f02 	.word	0x08011f02
 800f658:	08011f30 	.word	0x08011f30

0800f65c <fiprintf>:
 800f65c:	b40e      	push	{r1, r2, r3}
 800f65e:	b503      	push	{r0, r1, lr}
 800f660:	4601      	mov	r1, r0
 800f662:	ab03      	add	r3, sp, #12
 800f664:	4805      	ldr	r0, [pc, #20]	; (800f67c <fiprintf+0x20>)
 800f666:	f853 2b04 	ldr.w	r2, [r3], #4
 800f66a:	6800      	ldr	r0, [r0, #0]
 800f66c:	9301      	str	r3, [sp, #4]
 800f66e:	f000 f897 	bl	800f7a0 <_vfiprintf_r>
 800f672:	b002      	add	sp, #8
 800f674:	f85d eb04 	ldr.w	lr, [sp], #4
 800f678:	b003      	add	sp, #12
 800f67a:	4770      	bx	lr
 800f67c:	20000020 	.word	0x20000020

0800f680 <__ascii_mbtowc>:
 800f680:	b082      	sub	sp, #8
 800f682:	b901      	cbnz	r1, 800f686 <__ascii_mbtowc+0x6>
 800f684:	a901      	add	r1, sp, #4
 800f686:	b142      	cbz	r2, 800f69a <__ascii_mbtowc+0x1a>
 800f688:	b14b      	cbz	r3, 800f69e <__ascii_mbtowc+0x1e>
 800f68a:	7813      	ldrb	r3, [r2, #0]
 800f68c:	600b      	str	r3, [r1, #0]
 800f68e:	7812      	ldrb	r2, [r2, #0]
 800f690:	1e10      	subs	r0, r2, #0
 800f692:	bf18      	it	ne
 800f694:	2001      	movne	r0, #1
 800f696:	b002      	add	sp, #8
 800f698:	4770      	bx	lr
 800f69a:	4610      	mov	r0, r2
 800f69c:	e7fb      	b.n	800f696 <__ascii_mbtowc+0x16>
 800f69e:	f06f 0001 	mvn.w	r0, #1
 800f6a2:	e7f8      	b.n	800f696 <__ascii_mbtowc+0x16>

0800f6a4 <memmove>:
 800f6a4:	4288      	cmp	r0, r1
 800f6a6:	b510      	push	{r4, lr}
 800f6a8:	eb01 0402 	add.w	r4, r1, r2
 800f6ac:	d902      	bls.n	800f6b4 <memmove+0x10>
 800f6ae:	4284      	cmp	r4, r0
 800f6b0:	4623      	mov	r3, r4
 800f6b2:	d807      	bhi.n	800f6c4 <memmove+0x20>
 800f6b4:	1e43      	subs	r3, r0, #1
 800f6b6:	42a1      	cmp	r1, r4
 800f6b8:	d008      	beq.n	800f6cc <memmove+0x28>
 800f6ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f6be:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f6c2:	e7f8      	b.n	800f6b6 <memmove+0x12>
 800f6c4:	4402      	add	r2, r0
 800f6c6:	4601      	mov	r1, r0
 800f6c8:	428a      	cmp	r2, r1
 800f6ca:	d100      	bne.n	800f6ce <memmove+0x2a>
 800f6cc:	bd10      	pop	{r4, pc}
 800f6ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f6d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f6d6:	e7f7      	b.n	800f6c8 <memmove+0x24>

0800f6d8 <__malloc_lock>:
 800f6d8:	4801      	ldr	r0, [pc, #4]	; (800f6e0 <__malloc_lock+0x8>)
 800f6da:	f000 bc1f 	b.w	800ff1c <__retarget_lock_acquire_recursive>
 800f6de:	bf00      	nop
 800f6e0:	200062a8 	.word	0x200062a8

0800f6e4 <__malloc_unlock>:
 800f6e4:	4801      	ldr	r0, [pc, #4]	; (800f6ec <__malloc_unlock+0x8>)
 800f6e6:	f000 bc1a 	b.w	800ff1e <__retarget_lock_release_recursive>
 800f6ea:	bf00      	nop
 800f6ec:	200062a8 	.word	0x200062a8

0800f6f0 <_realloc_r>:
 800f6f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f6f4:	4680      	mov	r8, r0
 800f6f6:	4614      	mov	r4, r2
 800f6f8:	460e      	mov	r6, r1
 800f6fa:	b921      	cbnz	r1, 800f706 <_realloc_r+0x16>
 800f6fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f700:	4611      	mov	r1, r2
 800f702:	f7ff bdad 	b.w	800f260 <_malloc_r>
 800f706:	b92a      	cbnz	r2, 800f714 <_realloc_r+0x24>
 800f708:	f7ff fd3e 	bl	800f188 <_free_r>
 800f70c:	4625      	mov	r5, r4
 800f70e:	4628      	mov	r0, r5
 800f710:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f714:	f000 fc6a 	bl	800ffec <_malloc_usable_size_r>
 800f718:	4284      	cmp	r4, r0
 800f71a:	4607      	mov	r7, r0
 800f71c:	d802      	bhi.n	800f724 <_realloc_r+0x34>
 800f71e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f722:	d812      	bhi.n	800f74a <_realloc_r+0x5a>
 800f724:	4621      	mov	r1, r4
 800f726:	4640      	mov	r0, r8
 800f728:	f7ff fd9a 	bl	800f260 <_malloc_r>
 800f72c:	4605      	mov	r5, r0
 800f72e:	2800      	cmp	r0, #0
 800f730:	d0ed      	beq.n	800f70e <_realloc_r+0x1e>
 800f732:	42bc      	cmp	r4, r7
 800f734:	4622      	mov	r2, r4
 800f736:	4631      	mov	r1, r6
 800f738:	bf28      	it	cs
 800f73a:	463a      	movcs	r2, r7
 800f73c:	f7fd fe40 	bl	800d3c0 <memcpy>
 800f740:	4631      	mov	r1, r6
 800f742:	4640      	mov	r0, r8
 800f744:	f7ff fd20 	bl	800f188 <_free_r>
 800f748:	e7e1      	b.n	800f70e <_realloc_r+0x1e>
 800f74a:	4635      	mov	r5, r6
 800f74c:	e7df      	b.n	800f70e <_realloc_r+0x1e>

0800f74e <__sfputc_r>:
 800f74e:	6893      	ldr	r3, [r2, #8]
 800f750:	3b01      	subs	r3, #1
 800f752:	2b00      	cmp	r3, #0
 800f754:	b410      	push	{r4}
 800f756:	6093      	str	r3, [r2, #8]
 800f758:	da08      	bge.n	800f76c <__sfputc_r+0x1e>
 800f75a:	6994      	ldr	r4, [r2, #24]
 800f75c:	42a3      	cmp	r3, r4
 800f75e:	db01      	blt.n	800f764 <__sfputc_r+0x16>
 800f760:	290a      	cmp	r1, #10
 800f762:	d103      	bne.n	800f76c <__sfputc_r+0x1e>
 800f764:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f768:	f000 b94a 	b.w	800fa00 <__swbuf_r>
 800f76c:	6813      	ldr	r3, [r2, #0]
 800f76e:	1c58      	adds	r0, r3, #1
 800f770:	6010      	str	r0, [r2, #0]
 800f772:	7019      	strb	r1, [r3, #0]
 800f774:	4608      	mov	r0, r1
 800f776:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f77a:	4770      	bx	lr

0800f77c <__sfputs_r>:
 800f77c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f77e:	4606      	mov	r6, r0
 800f780:	460f      	mov	r7, r1
 800f782:	4614      	mov	r4, r2
 800f784:	18d5      	adds	r5, r2, r3
 800f786:	42ac      	cmp	r4, r5
 800f788:	d101      	bne.n	800f78e <__sfputs_r+0x12>
 800f78a:	2000      	movs	r0, #0
 800f78c:	e007      	b.n	800f79e <__sfputs_r+0x22>
 800f78e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f792:	463a      	mov	r2, r7
 800f794:	4630      	mov	r0, r6
 800f796:	f7ff ffda 	bl	800f74e <__sfputc_r>
 800f79a:	1c43      	adds	r3, r0, #1
 800f79c:	d1f3      	bne.n	800f786 <__sfputs_r+0xa>
 800f79e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f7a0 <_vfiprintf_r>:
 800f7a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7a4:	460d      	mov	r5, r1
 800f7a6:	b09d      	sub	sp, #116	; 0x74
 800f7a8:	4614      	mov	r4, r2
 800f7aa:	4698      	mov	r8, r3
 800f7ac:	4606      	mov	r6, r0
 800f7ae:	b118      	cbz	r0, 800f7b8 <_vfiprintf_r+0x18>
 800f7b0:	6983      	ldr	r3, [r0, #24]
 800f7b2:	b90b      	cbnz	r3, 800f7b8 <_vfiprintf_r+0x18>
 800f7b4:	f000 fb14 	bl	800fde0 <__sinit>
 800f7b8:	4b89      	ldr	r3, [pc, #548]	; (800f9e0 <_vfiprintf_r+0x240>)
 800f7ba:	429d      	cmp	r5, r3
 800f7bc:	d11b      	bne.n	800f7f6 <_vfiprintf_r+0x56>
 800f7be:	6875      	ldr	r5, [r6, #4]
 800f7c0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f7c2:	07d9      	lsls	r1, r3, #31
 800f7c4:	d405      	bmi.n	800f7d2 <_vfiprintf_r+0x32>
 800f7c6:	89ab      	ldrh	r3, [r5, #12]
 800f7c8:	059a      	lsls	r2, r3, #22
 800f7ca:	d402      	bmi.n	800f7d2 <_vfiprintf_r+0x32>
 800f7cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f7ce:	f000 fba5 	bl	800ff1c <__retarget_lock_acquire_recursive>
 800f7d2:	89ab      	ldrh	r3, [r5, #12]
 800f7d4:	071b      	lsls	r3, r3, #28
 800f7d6:	d501      	bpl.n	800f7dc <_vfiprintf_r+0x3c>
 800f7d8:	692b      	ldr	r3, [r5, #16]
 800f7da:	b9eb      	cbnz	r3, 800f818 <_vfiprintf_r+0x78>
 800f7dc:	4629      	mov	r1, r5
 800f7de:	4630      	mov	r0, r6
 800f7e0:	f000 f96e 	bl	800fac0 <__swsetup_r>
 800f7e4:	b1c0      	cbz	r0, 800f818 <_vfiprintf_r+0x78>
 800f7e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f7e8:	07dc      	lsls	r4, r3, #31
 800f7ea:	d50e      	bpl.n	800f80a <_vfiprintf_r+0x6a>
 800f7ec:	f04f 30ff 	mov.w	r0, #4294967295
 800f7f0:	b01d      	add	sp, #116	; 0x74
 800f7f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f7f6:	4b7b      	ldr	r3, [pc, #492]	; (800f9e4 <_vfiprintf_r+0x244>)
 800f7f8:	429d      	cmp	r5, r3
 800f7fa:	d101      	bne.n	800f800 <_vfiprintf_r+0x60>
 800f7fc:	68b5      	ldr	r5, [r6, #8]
 800f7fe:	e7df      	b.n	800f7c0 <_vfiprintf_r+0x20>
 800f800:	4b79      	ldr	r3, [pc, #484]	; (800f9e8 <_vfiprintf_r+0x248>)
 800f802:	429d      	cmp	r5, r3
 800f804:	bf08      	it	eq
 800f806:	68f5      	ldreq	r5, [r6, #12]
 800f808:	e7da      	b.n	800f7c0 <_vfiprintf_r+0x20>
 800f80a:	89ab      	ldrh	r3, [r5, #12]
 800f80c:	0598      	lsls	r0, r3, #22
 800f80e:	d4ed      	bmi.n	800f7ec <_vfiprintf_r+0x4c>
 800f810:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f812:	f000 fb84 	bl	800ff1e <__retarget_lock_release_recursive>
 800f816:	e7e9      	b.n	800f7ec <_vfiprintf_r+0x4c>
 800f818:	2300      	movs	r3, #0
 800f81a:	9309      	str	r3, [sp, #36]	; 0x24
 800f81c:	2320      	movs	r3, #32
 800f81e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f822:	f8cd 800c 	str.w	r8, [sp, #12]
 800f826:	2330      	movs	r3, #48	; 0x30
 800f828:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800f9ec <_vfiprintf_r+0x24c>
 800f82c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f830:	f04f 0901 	mov.w	r9, #1
 800f834:	4623      	mov	r3, r4
 800f836:	469a      	mov	sl, r3
 800f838:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f83c:	b10a      	cbz	r2, 800f842 <_vfiprintf_r+0xa2>
 800f83e:	2a25      	cmp	r2, #37	; 0x25
 800f840:	d1f9      	bne.n	800f836 <_vfiprintf_r+0x96>
 800f842:	ebba 0b04 	subs.w	fp, sl, r4
 800f846:	d00b      	beq.n	800f860 <_vfiprintf_r+0xc0>
 800f848:	465b      	mov	r3, fp
 800f84a:	4622      	mov	r2, r4
 800f84c:	4629      	mov	r1, r5
 800f84e:	4630      	mov	r0, r6
 800f850:	f7ff ff94 	bl	800f77c <__sfputs_r>
 800f854:	3001      	adds	r0, #1
 800f856:	f000 80aa 	beq.w	800f9ae <_vfiprintf_r+0x20e>
 800f85a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f85c:	445a      	add	r2, fp
 800f85e:	9209      	str	r2, [sp, #36]	; 0x24
 800f860:	f89a 3000 	ldrb.w	r3, [sl]
 800f864:	2b00      	cmp	r3, #0
 800f866:	f000 80a2 	beq.w	800f9ae <_vfiprintf_r+0x20e>
 800f86a:	2300      	movs	r3, #0
 800f86c:	f04f 32ff 	mov.w	r2, #4294967295
 800f870:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f874:	f10a 0a01 	add.w	sl, sl, #1
 800f878:	9304      	str	r3, [sp, #16]
 800f87a:	9307      	str	r3, [sp, #28]
 800f87c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f880:	931a      	str	r3, [sp, #104]	; 0x68
 800f882:	4654      	mov	r4, sl
 800f884:	2205      	movs	r2, #5
 800f886:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f88a:	4858      	ldr	r0, [pc, #352]	; (800f9ec <_vfiprintf_r+0x24c>)
 800f88c:	f7f0 fcc0 	bl	8000210 <memchr>
 800f890:	9a04      	ldr	r2, [sp, #16]
 800f892:	b9d8      	cbnz	r0, 800f8cc <_vfiprintf_r+0x12c>
 800f894:	06d1      	lsls	r1, r2, #27
 800f896:	bf44      	itt	mi
 800f898:	2320      	movmi	r3, #32
 800f89a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f89e:	0713      	lsls	r3, r2, #28
 800f8a0:	bf44      	itt	mi
 800f8a2:	232b      	movmi	r3, #43	; 0x2b
 800f8a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f8a8:	f89a 3000 	ldrb.w	r3, [sl]
 800f8ac:	2b2a      	cmp	r3, #42	; 0x2a
 800f8ae:	d015      	beq.n	800f8dc <_vfiprintf_r+0x13c>
 800f8b0:	9a07      	ldr	r2, [sp, #28]
 800f8b2:	4654      	mov	r4, sl
 800f8b4:	2000      	movs	r0, #0
 800f8b6:	f04f 0c0a 	mov.w	ip, #10
 800f8ba:	4621      	mov	r1, r4
 800f8bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f8c0:	3b30      	subs	r3, #48	; 0x30
 800f8c2:	2b09      	cmp	r3, #9
 800f8c4:	d94e      	bls.n	800f964 <_vfiprintf_r+0x1c4>
 800f8c6:	b1b0      	cbz	r0, 800f8f6 <_vfiprintf_r+0x156>
 800f8c8:	9207      	str	r2, [sp, #28]
 800f8ca:	e014      	b.n	800f8f6 <_vfiprintf_r+0x156>
 800f8cc:	eba0 0308 	sub.w	r3, r0, r8
 800f8d0:	fa09 f303 	lsl.w	r3, r9, r3
 800f8d4:	4313      	orrs	r3, r2
 800f8d6:	9304      	str	r3, [sp, #16]
 800f8d8:	46a2      	mov	sl, r4
 800f8da:	e7d2      	b.n	800f882 <_vfiprintf_r+0xe2>
 800f8dc:	9b03      	ldr	r3, [sp, #12]
 800f8de:	1d19      	adds	r1, r3, #4
 800f8e0:	681b      	ldr	r3, [r3, #0]
 800f8e2:	9103      	str	r1, [sp, #12]
 800f8e4:	2b00      	cmp	r3, #0
 800f8e6:	bfbb      	ittet	lt
 800f8e8:	425b      	neglt	r3, r3
 800f8ea:	f042 0202 	orrlt.w	r2, r2, #2
 800f8ee:	9307      	strge	r3, [sp, #28]
 800f8f0:	9307      	strlt	r3, [sp, #28]
 800f8f2:	bfb8      	it	lt
 800f8f4:	9204      	strlt	r2, [sp, #16]
 800f8f6:	7823      	ldrb	r3, [r4, #0]
 800f8f8:	2b2e      	cmp	r3, #46	; 0x2e
 800f8fa:	d10c      	bne.n	800f916 <_vfiprintf_r+0x176>
 800f8fc:	7863      	ldrb	r3, [r4, #1]
 800f8fe:	2b2a      	cmp	r3, #42	; 0x2a
 800f900:	d135      	bne.n	800f96e <_vfiprintf_r+0x1ce>
 800f902:	9b03      	ldr	r3, [sp, #12]
 800f904:	1d1a      	adds	r2, r3, #4
 800f906:	681b      	ldr	r3, [r3, #0]
 800f908:	9203      	str	r2, [sp, #12]
 800f90a:	2b00      	cmp	r3, #0
 800f90c:	bfb8      	it	lt
 800f90e:	f04f 33ff 	movlt.w	r3, #4294967295
 800f912:	3402      	adds	r4, #2
 800f914:	9305      	str	r3, [sp, #20]
 800f916:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800f9fc <_vfiprintf_r+0x25c>
 800f91a:	7821      	ldrb	r1, [r4, #0]
 800f91c:	2203      	movs	r2, #3
 800f91e:	4650      	mov	r0, sl
 800f920:	f7f0 fc76 	bl	8000210 <memchr>
 800f924:	b140      	cbz	r0, 800f938 <_vfiprintf_r+0x198>
 800f926:	2340      	movs	r3, #64	; 0x40
 800f928:	eba0 000a 	sub.w	r0, r0, sl
 800f92c:	fa03 f000 	lsl.w	r0, r3, r0
 800f930:	9b04      	ldr	r3, [sp, #16]
 800f932:	4303      	orrs	r3, r0
 800f934:	3401      	adds	r4, #1
 800f936:	9304      	str	r3, [sp, #16]
 800f938:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f93c:	482c      	ldr	r0, [pc, #176]	; (800f9f0 <_vfiprintf_r+0x250>)
 800f93e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f942:	2206      	movs	r2, #6
 800f944:	f7f0 fc64 	bl	8000210 <memchr>
 800f948:	2800      	cmp	r0, #0
 800f94a:	d03f      	beq.n	800f9cc <_vfiprintf_r+0x22c>
 800f94c:	4b29      	ldr	r3, [pc, #164]	; (800f9f4 <_vfiprintf_r+0x254>)
 800f94e:	bb1b      	cbnz	r3, 800f998 <_vfiprintf_r+0x1f8>
 800f950:	9b03      	ldr	r3, [sp, #12]
 800f952:	3307      	adds	r3, #7
 800f954:	f023 0307 	bic.w	r3, r3, #7
 800f958:	3308      	adds	r3, #8
 800f95a:	9303      	str	r3, [sp, #12]
 800f95c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f95e:	443b      	add	r3, r7
 800f960:	9309      	str	r3, [sp, #36]	; 0x24
 800f962:	e767      	b.n	800f834 <_vfiprintf_r+0x94>
 800f964:	fb0c 3202 	mla	r2, ip, r2, r3
 800f968:	460c      	mov	r4, r1
 800f96a:	2001      	movs	r0, #1
 800f96c:	e7a5      	b.n	800f8ba <_vfiprintf_r+0x11a>
 800f96e:	2300      	movs	r3, #0
 800f970:	3401      	adds	r4, #1
 800f972:	9305      	str	r3, [sp, #20]
 800f974:	4619      	mov	r1, r3
 800f976:	f04f 0c0a 	mov.w	ip, #10
 800f97a:	4620      	mov	r0, r4
 800f97c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f980:	3a30      	subs	r2, #48	; 0x30
 800f982:	2a09      	cmp	r2, #9
 800f984:	d903      	bls.n	800f98e <_vfiprintf_r+0x1ee>
 800f986:	2b00      	cmp	r3, #0
 800f988:	d0c5      	beq.n	800f916 <_vfiprintf_r+0x176>
 800f98a:	9105      	str	r1, [sp, #20]
 800f98c:	e7c3      	b.n	800f916 <_vfiprintf_r+0x176>
 800f98e:	fb0c 2101 	mla	r1, ip, r1, r2
 800f992:	4604      	mov	r4, r0
 800f994:	2301      	movs	r3, #1
 800f996:	e7f0      	b.n	800f97a <_vfiprintf_r+0x1da>
 800f998:	ab03      	add	r3, sp, #12
 800f99a:	9300      	str	r3, [sp, #0]
 800f99c:	462a      	mov	r2, r5
 800f99e:	4b16      	ldr	r3, [pc, #88]	; (800f9f8 <_vfiprintf_r+0x258>)
 800f9a0:	a904      	add	r1, sp, #16
 800f9a2:	4630      	mov	r0, r6
 800f9a4:	f7fd fdc2 	bl	800d52c <_printf_float>
 800f9a8:	4607      	mov	r7, r0
 800f9aa:	1c78      	adds	r0, r7, #1
 800f9ac:	d1d6      	bne.n	800f95c <_vfiprintf_r+0x1bc>
 800f9ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f9b0:	07d9      	lsls	r1, r3, #31
 800f9b2:	d405      	bmi.n	800f9c0 <_vfiprintf_r+0x220>
 800f9b4:	89ab      	ldrh	r3, [r5, #12]
 800f9b6:	059a      	lsls	r2, r3, #22
 800f9b8:	d402      	bmi.n	800f9c0 <_vfiprintf_r+0x220>
 800f9ba:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f9bc:	f000 faaf 	bl	800ff1e <__retarget_lock_release_recursive>
 800f9c0:	89ab      	ldrh	r3, [r5, #12]
 800f9c2:	065b      	lsls	r3, r3, #25
 800f9c4:	f53f af12 	bmi.w	800f7ec <_vfiprintf_r+0x4c>
 800f9c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f9ca:	e711      	b.n	800f7f0 <_vfiprintf_r+0x50>
 800f9cc:	ab03      	add	r3, sp, #12
 800f9ce:	9300      	str	r3, [sp, #0]
 800f9d0:	462a      	mov	r2, r5
 800f9d2:	4b09      	ldr	r3, [pc, #36]	; (800f9f8 <_vfiprintf_r+0x258>)
 800f9d4:	a904      	add	r1, sp, #16
 800f9d6:	4630      	mov	r0, r6
 800f9d8:	f7fe f84c 	bl	800da74 <_printf_i>
 800f9dc:	e7e4      	b.n	800f9a8 <_vfiprintf_r+0x208>
 800f9de:	bf00      	nop
 800f9e0:	0801205c 	.word	0x0801205c
 800f9e4:	0801207c 	.word	0x0801207c
 800f9e8:	0801203c 	.word	0x0801203c
 800f9ec:	08011ee4 	.word	0x08011ee4
 800f9f0:	08011eee 	.word	0x08011eee
 800f9f4:	0800d52d 	.word	0x0800d52d
 800f9f8:	0800f77d 	.word	0x0800f77d
 800f9fc:	08011eea 	.word	0x08011eea

0800fa00 <__swbuf_r>:
 800fa00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa02:	460e      	mov	r6, r1
 800fa04:	4614      	mov	r4, r2
 800fa06:	4605      	mov	r5, r0
 800fa08:	b118      	cbz	r0, 800fa12 <__swbuf_r+0x12>
 800fa0a:	6983      	ldr	r3, [r0, #24]
 800fa0c:	b90b      	cbnz	r3, 800fa12 <__swbuf_r+0x12>
 800fa0e:	f000 f9e7 	bl	800fde0 <__sinit>
 800fa12:	4b21      	ldr	r3, [pc, #132]	; (800fa98 <__swbuf_r+0x98>)
 800fa14:	429c      	cmp	r4, r3
 800fa16:	d12b      	bne.n	800fa70 <__swbuf_r+0x70>
 800fa18:	686c      	ldr	r4, [r5, #4]
 800fa1a:	69a3      	ldr	r3, [r4, #24]
 800fa1c:	60a3      	str	r3, [r4, #8]
 800fa1e:	89a3      	ldrh	r3, [r4, #12]
 800fa20:	071a      	lsls	r2, r3, #28
 800fa22:	d52f      	bpl.n	800fa84 <__swbuf_r+0x84>
 800fa24:	6923      	ldr	r3, [r4, #16]
 800fa26:	b36b      	cbz	r3, 800fa84 <__swbuf_r+0x84>
 800fa28:	6923      	ldr	r3, [r4, #16]
 800fa2a:	6820      	ldr	r0, [r4, #0]
 800fa2c:	1ac0      	subs	r0, r0, r3
 800fa2e:	6963      	ldr	r3, [r4, #20]
 800fa30:	b2f6      	uxtb	r6, r6
 800fa32:	4283      	cmp	r3, r0
 800fa34:	4637      	mov	r7, r6
 800fa36:	dc04      	bgt.n	800fa42 <__swbuf_r+0x42>
 800fa38:	4621      	mov	r1, r4
 800fa3a:	4628      	mov	r0, r5
 800fa3c:	f000 f93c 	bl	800fcb8 <_fflush_r>
 800fa40:	bb30      	cbnz	r0, 800fa90 <__swbuf_r+0x90>
 800fa42:	68a3      	ldr	r3, [r4, #8]
 800fa44:	3b01      	subs	r3, #1
 800fa46:	60a3      	str	r3, [r4, #8]
 800fa48:	6823      	ldr	r3, [r4, #0]
 800fa4a:	1c5a      	adds	r2, r3, #1
 800fa4c:	6022      	str	r2, [r4, #0]
 800fa4e:	701e      	strb	r6, [r3, #0]
 800fa50:	6963      	ldr	r3, [r4, #20]
 800fa52:	3001      	adds	r0, #1
 800fa54:	4283      	cmp	r3, r0
 800fa56:	d004      	beq.n	800fa62 <__swbuf_r+0x62>
 800fa58:	89a3      	ldrh	r3, [r4, #12]
 800fa5a:	07db      	lsls	r3, r3, #31
 800fa5c:	d506      	bpl.n	800fa6c <__swbuf_r+0x6c>
 800fa5e:	2e0a      	cmp	r6, #10
 800fa60:	d104      	bne.n	800fa6c <__swbuf_r+0x6c>
 800fa62:	4621      	mov	r1, r4
 800fa64:	4628      	mov	r0, r5
 800fa66:	f000 f927 	bl	800fcb8 <_fflush_r>
 800fa6a:	b988      	cbnz	r0, 800fa90 <__swbuf_r+0x90>
 800fa6c:	4638      	mov	r0, r7
 800fa6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fa70:	4b0a      	ldr	r3, [pc, #40]	; (800fa9c <__swbuf_r+0x9c>)
 800fa72:	429c      	cmp	r4, r3
 800fa74:	d101      	bne.n	800fa7a <__swbuf_r+0x7a>
 800fa76:	68ac      	ldr	r4, [r5, #8]
 800fa78:	e7cf      	b.n	800fa1a <__swbuf_r+0x1a>
 800fa7a:	4b09      	ldr	r3, [pc, #36]	; (800faa0 <__swbuf_r+0xa0>)
 800fa7c:	429c      	cmp	r4, r3
 800fa7e:	bf08      	it	eq
 800fa80:	68ec      	ldreq	r4, [r5, #12]
 800fa82:	e7ca      	b.n	800fa1a <__swbuf_r+0x1a>
 800fa84:	4621      	mov	r1, r4
 800fa86:	4628      	mov	r0, r5
 800fa88:	f000 f81a 	bl	800fac0 <__swsetup_r>
 800fa8c:	2800      	cmp	r0, #0
 800fa8e:	d0cb      	beq.n	800fa28 <__swbuf_r+0x28>
 800fa90:	f04f 37ff 	mov.w	r7, #4294967295
 800fa94:	e7ea      	b.n	800fa6c <__swbuf_r+0x6c>
 800fa96:	bf00      	nop
 800fa98:	0801205c 	.word	0x0801205c
 800fa9c:	0801207c 	.word	0x0801207c
 800faa0:	0801203c 	.word	0x0801203c

0800faa4 <__ascii_wctomb>:
 800faa4:	b149      	cbz	r1, 800faba <__ascii_wctomb+0x16>
 800faa6:	2aff      	cmp	r2, #255	; 0xff
 800faa8:	bf85      	ittet	hi
 800faaa:	238a      	movhi	r3, #138	; 0x8a
 800faac:	6003      	strhi	r3, [r0, #0]
 800faae:	700a      	strbls	r2, [r1, #0]
 800fab0:	f04f 30ff 	movhi.w	r0, #4294967295
 800fab4:	bf98      	it	ls
 800fab6:	2001      	movls	r0, #1
 800fab8:	4770      	bx	lr
 800faba:	4608      	mov	r0, r1
 800fabc:	4770      	bx	lr
	...

0800fac0 <__swsetup_r>:
 800fac0:	4b32      	ldr	r3, [pc, #200]	; (800fb8c <__swsetup_r+0xcc>)
 800fac2:	b570      	push	{r4, r5, r6, lr}
 800fac4:	681d      	ldr	r5, [r3, #0]
 800fac6:	4606      	mov	r6, r0
 800fac8:	460c      	mov	r4, r1
 800faca:	b125      	cbz	r5, 800fad6 <__swsetup_r+0x16>
 800facc:	69ab      	ldr	r3, [r5, #24]
 800face:	b913      	cbnz	r3, 800fad6 <__swsetup_r+0x16>
 800fad0:	4628      	mov	r0, r5
 800fad2:	f000 f985 	bl	800fde0 <__sinit>
 800fad6:	4b2e      	ldr	r3, [pc, #184]	; (800fb90 <__swsetup_r+0xd0>)
 800fad8:	429c      	cmp	r4, r3
 800fada:	d10f      	bne.n	800fafc <__swsetup_r+0x3c>
 800fadc:	686c      	ldr	r4, [r5, #4]
 800fade:	89a3      	ldrh	r3, [r4, #12]
 800fae0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fae4:	0719      	lsls	r1, r3, #28
 800fae6:	d42c      	bmi.n	800fb42 <__swsetup_r+0x82>
 800fae8:	06dd      	lsls	r5, r3, #27
 800faea:	d411      	bmi.n	800fb10 <__swsetup_r+0x50>
 800faec:	2309      	movs	r3, #9
 800faee:	6033      	str	r3, [r6, #0]
 800faf0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800faf4:	81a3      	strh	r3, [r4, #12]
 800faf6:	f04f 30ff 	mov.w	r0, #4294967295
 800fafa:	e03e      	b.n	800fb7a <__swsetup_r+0xba>
 800fafc:	4b25      	ldr	r3, [pc, #148]	; (800fb94 <__swsetup_r+0xd4>)
 800fafe:	429c      	cmp	r4, r3
 800fb00:	d101      	bne.n	800fb06 <__swsetup_r+0x46>
 800fb02:	68ac      	ldr	r4, [r5, #8]
 800fb04:	e7eb      	b.n	800fade <__swsetup_r+0x1e>
 800fb06:	4b24      	ldr	r3, [pc, #144]	; (800fb98 <__swsetup_r+0xd8>)
 800fb08:	429c      	cmp	r4, r3
 800fb0a:	bf08      	it	eq
 800fb0c:	68ec      	ldreq	r4, [r5, #12]
 800fb0e:	e7e6      	b.n	800fade <__swsetup_r+0x1e>
 800fb10:	0758      	lsls	r0, r3, #29
 800fb12:	d512      	bpl.n	800fb3a <__swsetup_r+0x7a>
 800fb14:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fb16:	b141      	cbz	r1, 800fb2a <__swsetup_r+0x6a>
 800fb18:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fb1c:	4299      	cmp	r1, r3
 800fb1e:	d002      	beq.n	800fb26 <__swsetup_r+0x66>
 800fb20:	4630      	mov	r0, r6
 800fb22:	f7ff fb31 	bl	800f188 <_free_r>
 800fb26:	2300      	movs	r3, #0
 800fb28:	6363      	str	r3, [r4, #52]	; 0x34
 800fb2a:	89a3      	ldrh	r3, [r4, #12]
 800fb2c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800fb30:	81a3      	strh	r3, [r4, #12]
 800fb32:	2300      	movs	r3, #0
 800fb34:	6063      	str	r3, [r4, #4]
 800fb36:	6923      	ldr	r3, [r4, #16]
 800fb38:	6023      	str	r3, [r4, #0]
 800fb3a:	89a3      	ldrh	r3, [r4, #12]
 800fb3c:	f043 0308 	orr.w	r3, r3, #8
 800fb40:	81a3      	strh	r3, [r4, #12]
 800fb42:	6923      	ldr	r3, [r4, #16]
 800fb44:	b94b      	cbnz	r3, 800fb5a <__swsetup_r+0x9a>
 800fb46:	89a3      	ldrh	r3, [r4, #12]
 800fb48:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800fb4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fb50:	d003      	beq.n	800fb5a <__swsetup_r+0x9a>
 800fb52:	4621      	mov	r1, r4
 800fb54:	4630      	mov	r0, r6
 800fb56:	f000 fa09 	bl	800ff6c <__smakebuf_r>
 800fb5a:	89a0      	ldrh	r0, [r4, #12]
 800fb5c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fb60:	f010 0301 	ands.w	r3, r0, #1
 800fb64:	d00a      	beq.n	800fb7c <__swsetup_r+0xbc>
 800fb66:	2300      	movs	r3, #0
 800fb68:	60a3      	str	r3, [r4, #8]
 800fb6a:	6963      	ldr	r3, [r4, #20]
 800fb6c:	425b      	negs	r3, r3
 800fb6e:	61a3      	str	r3, [r4, #24]
 800fb70:	6923      	ldr	r3, [r4, #16]
 800fb72:	b943      	cbnz	r3, 800fb86 <__swsetup_r+0xc6>
 800fb74:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800fb78:	d1ba      	bne.n	800faf0 <__swsetup_r+0x30>
 800fb7a:	bd70      	pop	{r4, r5, r6, pc}
 800fb7c:	0781      	lsls	r1, r0, #30
 800fb7e:	bf58      	it	pl
 800fb80:	6963      	ldrpl	r3, [r4, #20]
 800fb82:	60a3      	str	r3, [r4, #8]
 800fb84:	e7f4      	b.n	800fb70 <__swsetup_r+0xb0>
 800fb86:	2000      	movs	r0, #0
 800fb88:	e7f7      	b.n	800fb7a <__swsetup_r+0xba>
 800fb8a:	bf00      	nop
 800fb8c:	20000020 	.word	0x20000020
 800fb90:	0801205c 	.word	0x0801205c
 800fb94:	0801207c 	.word	0x0801207c
 800fb98:	0801203c 	.word	0x0801203c

0800fb9c <abort>:
 800fb9c:	b508      	push	{r3, lr}
 800fb9e:	2006      	movs	r0, #6
 800fba0:	f000 fa54 	bl	801004c <raise>
 800fba4:	2001      	movs	r0, #1
 800fba6:	f7f5 fe43 	bl	8005830 <_exit>
	...

0800fbac <__sflush_r>:
 800fbac:	898a      	ldrh	r2, [r1, #12]
 800fbae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fbb2:	4605      	mov	r5, r0
 800fbb4:	0710      	lsls	r0, r2, #28
 800fbb6:	460c      	mov	r4, r1
 800fbb8:	d458      	bmi.n	800fc6c <__sflush_r+0xc0>
 800fbba:	684b      	ldr	r3, [r1, #4]
 800fbbc:	2b00      	cmp	r3, #0
 800fbbe:	dc05      	bgt.n	800fbcc <__sflush_r+0x20>
 800fbc0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800fbc2:	2b00      	cmp	r3, #0
 800fbc4:	dc02      	bgt.n	800fbcc <__sflush_r+0x20>
 800fbc6:	2000      	movs	r0, #0
 800fbc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fbcc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fbce:	2e00      	cmp	r6, #0
 800fbd0:	d0f9      	beq.n	800fbc6 <__sflush_r+0x1a>
 800fbd2:	2300      	movs	r3, #0
 800fbd4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800fbd8:	682f      	ldr	r7, [r5, #0]
 800fbda:	602b      	str	r3, [r5, #0]
 800fbdc:	d032      	beq.n	800fc44 <__sflush_r+0x98>
 800fbde:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800fbe0:	89a3      	ldrh	r3, [r4, #12]
 800fbe2:	075a      	lsls	r2, r3, #29
 800fbe4:	d505      	bpl.n	800fbf2 <__sflush_r+0x46>
 800fbe6:	6863      	ldr	r3, [r4, #4]
 800fbe8:	1ac0      	subs	r0, r0, r3
 800fbea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800fbec:	b10b      	cbz	r3, 800fbf2 <__sflush_r+0x46>
 800fbee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800fbf0:	1ac0      	subs	r0, r0, r3
 800fbf2:	2300      	movs	r3, #0
 800fbf4:	4602      	mov	r2, r0
 800fbf6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fbf8:	6a21      	ldr	r1, [r4, #32]
 800fbfa:	4628      	mov	r0, r5
 800fbfc:	47b0      	blx	r6
 800fbfe:	1c43      	adds	r3, r0, #1
 800fc00:	89a3      	ldrh	r3, [r4, #12]
 800fc02:	d106      	bne.n	800fc12 <__sflush_r+0x66>
 800fc04:	6829      	ldr	r1, [r5, #0]
 800fc06:	291d      	cmp	r1, #29
 800fc08:	d82c      	bhi.n	800fc64 <__sflush_r+0xb8>
 800fc0a:	4a2a      	ldr	r2, [pc, #168]	; (800fcb4 <__sflush_r+0x108>)
 800fc0c:	40ca      	lsrs	r2, r1
 800fc0e:	07d6      	lsls	r6, r2, #31
 800fc10:	d528      	bpl.n	800fc64 <__sflush_r+0xb8>
 800fc12:	2200      	movs	r2, #0
 800fc14:	6062      	str	r2, [r4, #4]
 800fc16:	04d9      	lsls	r1, r3, #19
 800fc18:	6922      	ldr	r2, [r4, #16]
 800fc1a:	6022      	str	r2, [r4, #0]
 800fc1c:	d504      	bpl.n	800fc28 <__sflush_r+0x7c>
 800fc1e:	1c42      	adds	r2, r0, #1
 800fc20:	d101      	bne.n	800fc26 <__sflush_r+0x7a>
 800fc22:	682b      	ldr	r3, [r5, #0]
 800fc24:	b903      	cbnz	r3, 800fc28 <__sflush_r+0x7c>
 800fc26:	6560      	str	r0, [r4, #84]	; 0x54
 800fc28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fc2a:	602f      	str	r7, [r5, #0]
 800fc2c:	2900      	cmp	r1, #0
 800fc2e:	d0ca      	beq.n	800fbc6 <__sflush_r+0x1a>
 800fc30:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fc34:	4299      	cmp	r1, r3
 800fc36:	d002      	beq.n	800fc3e <__sflush_r+0x92>
 800fc38:	4628      	mov	r0, r5
 800fc3a:	f7ff faa5 	bl	800f188 <_free_r>
 800fc3e:	2000      	movs	r0, #0
 800fc40:	6360      	str	r0, [r4, #52]	; 0x34
 800fc42:	e7c1      	b.n	800fbc8 <__sflush_r+0x1c>
 800fc44:	6a21      	ldr	r1, [r4, #32]
 800fc46:	2301      	movs	r3, #1
 800fc48:	4628      	mov	r0, r5
 800fc4a:	47b0      	blx	r6
 800fc4c:	1c41      	adds	r1, r0, #1
 800fc4e:	d1c7      	bne.n	800fbe0 <__sflush_r+0x34>
 800fc50:	682b      	ldr	r3, [r5, #0]
 800fc52:	2b00      	cmp	r3, #0
 800fc54:	d0c4      	beq.n	800fbe0 <__sflush_r+0x34>
 800fc56:	2b1d      	cmp	r3, #29
 800fc58:	d001      	beq.n	800fc5e <__sflush_r+0xb2>
 800fc5a:	2b16      	cmp	r3, #22
 800fc5c:	d101      	bne.n	800fc62 <__sflush_r+0xb6>
 800fc5e:	602f      	str	r7, [r5, #0]
 800fc60:	e7b1      	b.n	800fbc6 <__sflush_r+0x1a>
 800fc62:	89a3      	ldrh	r3, [r4, #12]
 800fc64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fc68:	81a3      	strh	r3, [r4, #12]
 800fc6a:	e7ad      	b.n	800fbc8 <__sflush_r+0x1c>
 800fc6c:	690f      	ldr	r7, [r1, #16]
 800fc6e:	2f00      	cmp	r7, #0
 800fc70:	d0a9      	beq.n	800fbc6 <__sflush_r+0x1a>
 800fc72:	0793      	lsls	r3, r2, #30
 800fc74:	680e      	ldr	r6, [r1, #0]
 800fc76:	bf08      	it	eq
 800fc78:	694b      	ldreq	r3, [r1, #20]
 800fc7a:	600f      	str	r7, [r1, #0]
 800fc7c:	bf18      	it	ne
 800fc7e:	2300      	movne	r3, #0
 800fc80:	eba6 0807 	sub.w	r8, r6, r7
 800fc84:	608b      	str	r3, [r1, #8]
 800fc86:	f1b8 0f00 	cmp.w	r8, #0
 800fc8a:	dd9c      	ble.n	800fbc6 <__sflush_r+0x1a>
 800fc8c:	6a21      	ldr	r1, [r4, #32]
 800fc8e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800fc90:	4643      	mov	r3, r8
 800fc92:	463a      	mov	r2, r7
 800fc94:	4628      	mov	r0, r5
 800fc96:	47b0      	blx	r6
 800fc98:	2800      	cmp	r0, #0
 800fc9a:	dc06      	bgt.n	800fcaa <__sflush_r+0xfe>
 800fc9c:	89a3      	ldrh	r3, [r4, #12]
 800fc9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fca2:	81a3      	strh	r3, [r4, #12]
 800fca4:	f04f 30ff 	mov.w	r0, #4294967295
 800fca8:	e78e      	b.n	800fbc8 <__sflush_r+0x1c>
 800fcaa:	4407      	add	r7, r0
 800fcac:	eba8 0800 	sub.w	r8, r8, r0
 800fcb0:	e7e9      	b.n	800fc86 <__sflush_r+0xda>
 800fcb2:	bf00      	nop
 800fcb4:	20400001 	.word	0x20400001

0800fcb8 <_fflush_r>:
 800fcb8:	b538      	push	{r3, r4, r5, lr}
 800fcba:	690b      	ldr	r3, [r1, #16]
 800fcbc:	4605      	mov	r5, r0
 800fcbe:	460c      	mov	r4, r1
 800fcc0:	b913      	cbnz	r3, 800fcc8 <_fflush_r+0x10>
 800fcc2:	2500      	movs	r5, #0
 800fcc4:	4628      	mov	r0, r5
 800fcc6:	bd38      	pop	{r3, r4, r5, pc}
 800fcc8:	b118      	cbz	r0, 800fcd2 <_fflush_r+0x1a>
 800fcca:	6983      	ldr	r3, [r0, #24]
 800fccc:	b90b      	cbnz	r3, 800fcd2 <_fflush_r+0x1a>
 800fcce:	f000 f887 	bl	800fde0 <__sinit>
 800fcd2:	4b14      	ldr	r3, [pc, #80]	; (800fd24 <_fflush_r+0x6c>)
 800fcd4:	429c      	cmp	r4, r3
 800fcd6:	d11b      	bne.n	800fd10 <_fflush_r+0x58>
 800fcd8:	686c      	ldr	r4, [r5, #4]
 800fcda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fcde:	2b00      	cmp	r3, #0
 800fce0:	d0ef      	beq.n	800fcc2 <_fflush_r+0xa>
 800fce2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800fce4:	07d0      	lsls	r0, r2, #31
 800fce6:	d404      	bmi.n	800fcf2 <_fflush_r+0x3a>
 800fce8:	0599      	lsls	r1, r3, #22
 800fcea:	d402      	bmi.n	800fcf2 <_fflush_r+0x3a>
 800fcec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fcee:	f000 f915 	bl	800ff1c <__retarget_lock_acquire_recursive>
 800fcf2:	4628      	mov	r0, r5
 800fcf4:	4621      	mov	r1, r4
 800fcf6:	f7ff ff59 	bl	800fbac <__sflush_r>
 800fcfa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fcfc:	07da      	lsls	r2, r3, #31
 800fcfe:	4605      	mov	r5, r0
 800fd00:	d4e0      	bmi.n	800fcc4 <_fflush_r+0xc>
 800fd02:	89a3      	ldrh	r3, [r4, #12]
 800fd04:	059b      	lsls	r3, r3, #22
 800fd06:	d4dd      	bmi.n	800fcc4 <_fflush_r+0xc>
 800fd08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fd0a:	f000 f908 	bl	800ff1e <__retarget_lock_release_recursive>
 800fd0e:	e7d9      	b.n	800fcc4 <_fflush_r+0xc>
 800fd10:	4b05      	ldr	r3, [pc, #20]	; (800fd28 <_fflush_r+0x70>)
 800fd12:	429c      	cmp	r4, r3
 800fd14:	d101      	bne.n	800fd1a <_fflush_r+0x62>
 800fd16:	68ac      	ldr	r4, [r5, #8]
 800fd18:	e7df      	b.n	800fcda <_fflush_r+0x22>
 800fd1a:	4b04      	ldr	r3, [pc, #16]	; (800fd2c <_fflush_r+0x74>)
 800fd1c:	429c      	cmp	r4, r3
 800fd1e:	bf08      	it	eq
 800fd20:	68ec      	ldreq	r4, [r5, #12]
 800fd22:	e7da      	b.n	800fcda <_fflush_r+0x22>
 800fd24:	0801205c 	.word	0x0801205c
 800fd28:	0801207c 	.word	0x0801207c
 800fd2c:	0801203c 	.word	0x0801203c

0800fd30 <std>:
 800fd30:	2300      	movs	r3, #0
 800fd32:	b510      	push	{r4, lr}
 800fd34:	4604      	mov	r4, r0
 800fd36:	e9c0 3300 	strd	r3, r3, [r0]
 800fd3a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800fd3e:	6083      	str	r3, [r0, #8]
 800fd40:	8181      	strh	r1, [r0, #12]
 800fd42:	6643      	str	r3, [r0, #100]	; 0x64
 800fd44:	81c2      	strh	r2, [r0, #14]
 800fd46:	6183      	str	r3, [r0, #24]
 800fd48:	4619      	mov	r1, r3
 800fd4a:	2208      	movs	r2, #8
 800fd4c:	305c      	adds	r0, #92	; 0x5c
 800fd4e:	f7fd fb45 	bl	800d3dc <memset>
 800fd52:	4b05      	ldr	r3, [pc, #20]	; (800fd68 <std+0x38>)
 800fd54:	6263      	str	r3, [r4, #36]	; 0x24
 800fd56:	4b05      	ldr	r3, [pc, #20]	; (800fd6c <std+0x3c>)
 800fd58:	62a3      	str	r3, [r4, #40]	; 0x28
 800fd5a:	4b05      	ldr	r3, [pc, #20]	; (800fd70 <std+0x40>)
 800fd5c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800fd5e:	4b05      	ldr	r3, [pc, #20]	; (800fd74 <std+0x44>)
 800fd60:	6224      	str	r4, [r4, #32]
 800fd62:	6323      	str	r3, [r4, #48]	; 0x30
 800fd64:	bd10      	pop	{r4, pc}
 800fd66:	bf00      	nop
 800fd68:	08010085 	.word	0x08010085
 800fd6c:	080100a7 	.word	0x080100a7
 800fd70:	080100df 	.word	0x080100df
 800fd74:	08010103 	.word	0x08010103

0800fd78 <_cleanup_r>:
 800fd78:	4901      	ldr	r1, [pc, #4]	; (800fd80 <_cleanup_r+0x8>)
 800fd7a:	f000 b8af 	b.w	800fedc <_fwalk_reent>
 800fd7e:	bf00      	nop
 800fd80:	0800fcb9 	.word	0x0800fcb9

0800fd84 <__sfmoreglue>:
 800fd84:	b570      	push	{r4, r5, r6, lr}
 800fd86:	2268      	movs	r2, #104	; 0x68
 800fd88:	1e4d      	subs	r5, r1, #1
 800fd8a:	4355      	muls	r5, r2
 800fd8c:	460e      	mov	r6, r1
 800fd8e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800fd92:	f7ff fa65 	bl	800f260 <_malloc_r>
 800fd96:	4604      	mov	r4, r0
 800fd98:	b140      	cbz	r0, 800fdac <__sfmoreglue+0x28>
 800fd9a:	2100      	movs	r1, #0
 800fd9c:	e9c0 1600 	strd	r1, r6, [r0]
 800fda0:	300c      	adds	r0, #12
 800fda2:	60a0      	str	r0, [r4, #8]
 800fda4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800fda8:	f7fd fb18 	bl	800d3dc <memset>
 800fdac:	4620      	mov	r0, r4
 800fdae:	bd70      	pop	{r4, r5, r6, pc}

0800fdb0 <__sfp_lock_acquire>:
 800fdb0:	4801      	ldr	r0, [pc, #4]	; (800fdb8 <__sfp_lock_acquire+0x8>)
 800fdb2:	f000 b8b3 	b.w	800ff1c <__retarget_lock_acquire_recursive>
 800fdb6:	bf00      	nop
 800fdb8:	200062a9 	.word	0x200062a9

0800fdbc <__sfp_lock_release>:
 800fdbc:	4801      	ldr	r0, [pc, #4]	; (800fdc4 <__sfp_lock_release+0x8>)
 800fdbe:	f000 b8ae 	b.w	800ff1e <__retarget_lock_release_recursive>
 800fdc2:	bf00      	nop
 800fdc4:	200062a9 	.word	0x200062a9

0800fdc8 <__sinit_lock_acquire>:
 800fdc8:	4801      	ldr	r0, [pc, #4]	; (800fdd0 <__sinit_lock_acquire+0x8>)
 800fdca:	f000 b8a7 	b.w	800ff1c <__retarget_lock_acquire_recursive>
 800fdce:	bf00      	nop
 800fdd0:	200062aa 	.word	0x200062aa

0800fdd4 <__sinit_lock_release>:
 800fdd4:	4801      	ldr	r0, [pc, #4]	; (800fddc <__sinit_lock_release+0x8>)
 800fdd6:	f000 b8a2 	b.w	800ff1e <__retarget_lock_release_recursive>
 800fdda:	bf00      	nop
 800fddc:	200062aa 	.word	0x200062aa

0800fde0 <__sinit>:
 800fde0:	b510      	push	{r4, lr}
 800fde2:	4604      	mov	r4, r0
 800fde4:	f7ff fff0 	bl	800fdc8 <__sinit_lock_acquire>
 800fde8:	69a3      	ldr	r3, [r4, #24]
 800fdea:	b11b      	cbz	r3, 800fdf4 <__sinit+0x14>
 800fdec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fdf0:	f7ff bff0 	b.w	800fdd4 <__sinit_lock_release>
 800fdf4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800fdf8:	6523      	str	r3, [r4, #80]	; 0x50
 800fdfa:	4b13      	ldr	r3, [pc, #76]	; (800fe48 <__sinit+0x68>)
 800fdfc:	4a13      	ldr	r2, [pc, #76]	; (800fe4c <__sinit+0x6c>)
 800fdfe:	681b      	ldr	r3, [r3, #0]
 800fe00:	62a2      	str	r2, [r4, #40]	; 0x28
 800fe02:	42a3      	cmp	r3, r4
 800fe04:	bf04      	itt	eq
 800fe06:	2301      	moveq	r3, #1
 800fe08:	61a3      	streq	r3, [r4, #24]
 800fe0a:	4620      	mov	r0, r4
 800fe0c:	f000 f820 	bl	800fe50 <__sfp>
 800fe10:	6060      	str	r0, [r4, #4]
 800fe12:	4620      	mov	r0, r4
 800fe14:	f000 f81c 	bl	800fe50 <__sfp>
 800fe18:	60a0      	str	r0, [r4, #8]
 800fe1a:	4620      	mov	r0, r4
 800fe1c:	f000 f818 	bl	800fe50 <__sfp>
 800fe20:	2200      	movs	r2, #0
 800fe22:	60e0      	str	r0, [r4, #12]
 800fe24:	2104      	movs	r1, #4
 800fe26:	6860      	ldr	r0, [r4, #4]
 800fe28:	f7ff ff82 	bl	800fd30 <std>
 800fe2c:	68a0      	ldr	r0, [r4, #8]
 800fe2e:	2201      	movs	r2, #1
 800fe30:	2109      	movs	r1, #9
 800fe32:	f7ff ff7d 	bl	800fd30 <std>
 800fe36:	68e0      	ldr	r0, [r4, #12]
 800fe38:	2202      	movs	r2, #2
 800fe3a:	2112      	movs	r1, #18
 800fe3c:	f7ff ff78 	bl	800fd30 <std>
 800fe40:	2301      	movs	r3, #1
 800fe42:	61a3      	str	r3, [r4, #24]
 800fe44:	e7d2      	b.n	800fdec <__sinit+0xc>
 800fe46:	bf00      	nop
 800fe48:	08011cc0 	.word	0x08011cc0
 800fe4c:	0800fd79 	.word	0x0800fd79

0800fe50 <__sfp>:
 800fe50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe52:	4607      	mov	r7, r0
 800fe54:	f7ff ffac 	bl	800fdb0 <__sfp_lock_acquire>
 800fe58:	4b1e      	ldr	r3, [pc, #120]	; (800fed4 <__sfp+0x84>)
 800fe5a:	681e      	ldr	r6, [r3, #0]
 800fe5c:	69b3      	ldr	r3, [r6, #24]
 800fe5e:	b913      	cbnz	r3, 800fe66 <__sfp+0x16>
 800fe60:	4630      	mov	r0, r6
 800fe62:	f7ff ffbd 	bl	800fde0 <__sinit>
 800fe66:	3648      	adds	r6, #72	; 0x48
 800fe68:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800fe6c:	3b01      	subs	r3, #1
 800fe6e:	d503      	bpl.n	800fe78 <__sfp+0x28>
 800fe70:	6833      	ldr	r3, [r6, #0]
 800fe72:	b30b      	cbz	r3, 800feb8 <__sfp+0x68>
 800fe74:	6836      	ldr	r6, [r6, #0]
 800fe76:	e7f7      	b.n	800fe68 <__sfp+0x18>
 800fe78:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800fe7c:	b9d5      	cbnz	r5, 800feb4 <__sfp+0x64>
 800fe7e:	4b16      	ldr	r3, [pc, #88]	; (800fed8 <__sfp+0x88>)
 800fe80:	60e3      	str	r3, [r4, #12]
 800fe82:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800fe86:	6665      	str	r5, [r4, #100]	; 0x64
 800fe88:	f000 f847 	bl	800ff1a <__retarget_lock_init_recursive>
 800fe8c:	f7ff ff96 	bl	800fdbc <__sfp_lock_release>
 800fe90:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800fe94:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800fe98:	6025      	str	r5, [r4, #0]
 800fe9a:	61a5      	str	r5, [r4, #24]
 800fe9c:	2208      	movs	r2, #8
 800fe9e:	4629      	mov	r1, r5
 800fea0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800fea4:	f7fd fa9a 	bl	800d3dc <memset>
 800fea8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800feac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800feb0:	4620      	mov	r0, r4
 800feb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800feb4:	3468      	adds	r4, #104	; 0x68
 800feb6:	e7d9      	b.n	800fe6c <__sfp+0x1c>
 800feb8:	2104      	movs	r1, #4
 800feba:	4638      	mov	r0, r7
 800febc:	f7ff ff62 	bl	800fd84 <__sfmoreglue>
 800fec0:	4604      	mov	r4, r0
 800fec2:	6030      	str	r0, [r6, #0]
 800fec4:	2800      	cmp	r0, #0
 800fec6:	d1d5      	bne.n	800fe74 <__sfp+0x24>
 800fec8:	f7ff ff78 	bl	800fdbc <__sfp_lock_release>
 800fecc:	230c      	movs	r3, #12
 800fece:	603b      	str	r3, [r7, #0]
 800fed0:	e7ee      	b.n	800feb0 <__sfp+0x60>
 800fed2:	bf00      	nop
 800fed4:	08011cc0 	.word	0x08011cc0
 800fed8:	ffff0001 	.word	0xffff0001

0800fedc <_fwalk_reent>:
 800fedc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fee0:	4606      	mov	r6, r0
 800fee2:	4688      	mov	r8, r1
 800fee4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800fee8:	2700      	movs	r7, #0
 800feea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800feee:	f1b9 0901 	subs.w	r9, r9, #1
 800fef2:	d505      	bpl.n	800ff00 <_fwalk_reent+0x24>
 800fef4:	6824      	ldr	r4, [r4, #0]
 800fef6:	2c00      	cmp	r4, #0
 800fef8:	d1f7      	bne.n	800feea <_fwalk_reent+0xe>
 800fefa:	4638      	mov	r0, r7
 800fefc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ff00:	89ab      	ldrh	r3, [r5, #12]
 800ff02:	2b01      	cmp	r3, #1
 800ff04:	d907      	bls.n	800ff16 <_fwalk_reent+0x3a>
 800ff06:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ff0a:	3301      	adds	r3, #1
 800ff0c:	d003      	beq.n	800ff16 <_fwalk_reent+0x3a>
 800ff0e:	4629      	mov	r1, r5
 800ff10:	4630      	mov	r0, r6
 800ff12:	47c0      	blx	r8
 800ff14:	4307      	orrs	r7, r0
 800ff16:	3568      	adds	r5, #104	; 0x68
 800ff18:	e7e9      	b.n	800feee <_fwalk_reent+0x12>

0800ff1a <__retarget_lock_init_recursive>:
 800ff1a:	4770      	bx	lr

0800ff1c <__retarget_lock_acquire_recursive>:
 800ff1c:	4770      	bx	lr

0800ff1e <__retarget_lock_release_recursive>:
 800ff1e:	4770      	bx	lr

0800ff20 <__swhatbuf_r>:
 800ff20:	b570      	push	{r4, r5, r6, lr}
 800ff22:	460e      	mov	r6, r1
 800ff24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ff28:	2900      	cmp	r1, #0
 800ff2a:	b096      	sub	sp, #88	; 0x58
 800ff2c:	4614      	mov	r4, r2
 800ff2e:	461d      	mov	r5, r3
 800ff30:	da08      	bge.n	800ff44 <__swhatbuf_r+0x24>
 800ff32:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ff36:	2200      	movs	r2, #0
 800ff38:	602a      	str	r2, [r5, #0]
 800ff3a:	061a      	lsls	r2, r3, #24
 800ff3c:	d410      	bmi.n	800ff60 <__swhatbuf_r+0x40>
 800ff3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ff42:	e00e      	b.n	800ff62 <__swhatbuf_r+0x42>
 800ff44:	466a      	mov	r2, sp
 800ff46:	f000 f903 	bl	8010150 <_fstat_r>
 800ff4a:	2800      	cmp	r0, #0
 800ff4c:	dbf1      	blt.n	800ff32 <__swhatbuf_r+0x12>
 800ff4e:	9a01      	ldr	r2, [sp, #4]
 800ff50:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ff54:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ff58:	425a      	negs	r2, r3
 800ff5a:	415a      	adcs	r2, r3
 800ff5c:	602a      	str	r2, [r5, #0]
 800ff5e:	e7ee      	b.n	800ff3e <__swhatbuf_r+0x1e>
 800ff60:	2340      	movs	r3, #64	; 0x40
 800ff62:	2000      	movs	r0, #0
 800ff64:	6023      	str	r3, [r4, #0]
 800ff66:	b016      	add	sp, #88	; 0x58
 800ff68:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ff6c <__smakebuf_r>:
 800ff6c:	898b      	ldrh	r3, [r1, #12]
 800ff6e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ff70:	079d      	lsls	r5, r3, #30
 800ff72:	4606      	mov	r6, r0
 800ff74:	460c      	mov	r4, r1
 800ff76:	d507      	bpl.n	800ff88 <__smakebuf_r+0x1c>
 800ff78:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ff7c:	6023      	str	r3, [r4, #0]
 800ff7e:	6123      	str	r3, [r4, #16]
 800ff80:	2301      	movs	r3, #1
 800ff82:	6163      	str	r3, [r4, #20]
 800ff84:	b002      	add	sp, #8
 800ff86:	bd70      	pop	{r4, r5, r6, pc}
 800ff88:	ab01      	add	r3, sp, #4
 800ff8a:	466a      	mov	r2, sp
 800ff8c:	f7ff ffc8 	bl	800ff20 <__swhatbuf_r>
 800ff90:	9900      	ldr	r1, [sp, #0]
 800ff92:	4605      	mov	r5, r0
 800ff94:	4630      	mov	r0, r6
 800ff96:	f7ff f963 	bl	800f260 <_malloc_r>
 800ff9a:	b948      	cbnz	r0, 800ffb0 <__smakebuf_r+0x44>
 800ff9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ffa0:	059a      	lsls	r2, r3, #22
 800ffa2:	d4ef      	bmi.n	800ff84 <__smakebuf_r+0x18>
 800ffa4:	f023 0303 	bic.w	r3, r3, #3
 800ffa8:	f043 0302 	orr.w	r3, r3, #2
 800ffac:	81a3      	strh	r3, [r4, #12]
 800ffae:	e7e3      	b.n	800ff78 <__smakebuf_r+0xc>
 800ffb0:	4b0d      	ldr	r3, [pc, #52]	; (800ffe8 <__smakebuf_r+0x7c>)
 800ffb2:	62b3      	str	r3, [r6, #40]	; 0x28
 800ffb4:	89a3      	ldrh	r3, [r4, #12]
 800ffb6:	6020      	str	r0, [r4, #0]
 800ffb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ffbc:	81a3      	strh	r3, [r4, #12]
 800ffbe:	9b00      	ldr	r3, [sp, #0]
 800ffc0:	6163      	str	r3, [r4, #20]
 800ffc2:	9b01      	ldr	r3, [sp, #4]
 800ffc4:	6120      	str	r0, [r4, #16]
 800ffc6:	b15b      	cbz	r3, 800ffe0 <__smakebuf_r+0x74>
 800ffc8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ffcc:	4630      	mov	r0, r6
 800ffce:	f000 f8d1 	bl	8010174 <_isatty_r>
 800ffd2:	b128      	cbz	r0, 800ffe0 <__smakebuf_r+0x74>
 800ffd4:	89a3      	ldrh	r3, [r4, #12]
 800ffd6:	f023 0303 	bic.w	r3, r3, #3
 800ffda:	f043 0301 	orr.w	r3, r3, #1
 800ffde:	81a3      	strh	r3, [r4, #12]
 800ffe0:	89a0      	ldrh	r0, [r4, #12]
 800ffe2:	4305      	orrs	r5, r0
 800ffe4:	81a5      	strh	r5, [r4, #12]
 800ffe6:	e7cd      	b.n	800ff84 <__smakebuf_r+0x18>
 800ffe8:	0800fd79 	.word	0x0800fd79

0800ffec <_malloc_usable_size_r>:
 800ffec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fff0:	1f18      	subs	r0, r3, #4
 800fff2:	2b00      	cmp	r3, #0
 800fff4:	bfbc      	itt	lt
 800fff6:	580b      	ldrlt	r3, [r1, r0]
 800fff8:	18c0      	addlt	r0, r0, r3
 800fffa:	4770      	bx	lr

0800fffc <_raise_r>:
 800fffc:	291f      	cmp	r1, #31
 800fffe:	b538      	push	{r3, r4, r5, lr}
 8010000:	4604      	mov	r4, r0
 8010002:	460d      	mov	r5, r1
 8010004:	d904      	bls.n	8010010 <_raise_r+0x14>
 8010006:	2316      	movs	r3, #22
 8010008:	6003      	str	r3, [r0, #0]
 801000a:	f04f 30ff 	mov.w	r0, #4294967295
 801000e:	bd38      	pop	{r3, r4, r5, pc}
 8010010:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8010012:	b112      	cbz	r2, 801001a <_raise_r+0x1e>
 8010014:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010018:	b94b      	cbnz	r3, 801002e <_raise_r+0x32>
 801001a:	4620      	mov	r0, r4
 801001c:	f000 f830 	bl	8010080 <_getpid_r>
 8010020:	462a      	mov	r2, r5
 8010022:	4601      	mov	r1, r0
 8010024:	4620      	mov	r0, r4
 8010026:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801002a:	f000 b817 	b.w	801005c <_kill_r>
 801002e:	2b01      	cmp	r3, #1
 8010030:	d00a      	beq.n	8010048 <_raise_r+0x4c>
 8010032:	1c59      	adds	r1, r3, #1
 8010034:	d103      	bne.n	801003e <_raise_r+0x42>
 8010036:	2316      	movs	r3, #22
 8010038:	6003      	str	r3, [r0, #0]
 801003a:	2001      	movs	r0, #1
 801003c:	e7e7      	b.n	801000e <_raise_r+0x12>
 801003e:	2400      	movs	r4, #0
 8010040:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010044:	4628      	mov	r0, r5
 8010046:	4798      	blx	r3
 8010048:	2000      	movs	r0, #0
 801004a:	e7e0      	b.n	801000e <_raise_r+0x12>

0801004c <raise>:
 801004c:	4b02      	ldr	r3, [pc, #8]	; (8010058 <raise+0xc>)
 801004e:	4601      	mov	r1, r0
 8010050:	6818      	ldr	r0, [r3, #0]
 8010052:	f7ff bfd3 	b.w	800fffc <_raise_r>
 8010056:	bf00      	nop
 8010058:	20000020 	.word	0x20000020

0801005c <_kill_r>:
 801005c:	b538      	push	{r3, r4, r5, lr}
 801005e:	4d07      	ldr	r5, [pc, #28]	; (801007c <_kill_r+0x20>)
 8010060:	2300      	movs	r3, #0
 8010062:	4604      	mov	r4, r0
 8010064:	4608      	mov	r0, r1
 8010066:	4611      	mov	r1, r2
 8010068:	602b      	str	r3, [r5, #0]
 801006a:	f7f5 fbd1 	bl	8005810 <_kill>
 801006e:	1c43      	adds	r3, r0, #1
 8010070:	d102      	bne.n	8010078 <_kill_r+0x1c>
 8010072:	682b      	ldr	r3, [r5, #0]
 8010074:	b103      	cbz	r3, 8010078 <_kill_r+0x1c>
 8010076:	6023      	str	r3, [r4, #0]
 8010078:	bd38      	pop	{r3, r4, r5, pc}
 801007a:	bf00      	nop
 801007c:	200062a4 	.word	0x200062a4

08010080 <_getpid_r>:
 8010080:	f7f5 bbbe 	b.w	8005800 <_getpid>

08010084 <__sread>:
 8010084:	b510      	push	{r4, lr}
 8010086:	460c      	mov	r4, r1
 8010088:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801008c:	f000 f894 	bl	80101b8 <_read_r>
 8010090:	2800      	cmp	r0, #0
 8010092:	bfab      	itete	ge
 8010094:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010096:	89a3      	ldrhlt	r3, [r4, #12]
 8010098:	181b      	addge	r3, r3, r0
 801009a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801009e:	bfac      	ite	ge
 80100a0:	6563      	strge	r3, [r4, #84]	; 0x54
 80100a2:	81a3      	strhlt	r3, [r4, #12]
 80100a4:	bd10      	pop	{r4, pc}

080100a6 <__swrite>:
 80100a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80100aa:	461f      	mov	r7, r3
 80100ac:	898b      	ldrh	r3, [r1, #12]
 80100ae:	05db      	lsls	r3, r3, #23
 80100b0:	4605      	mov	r5, r0
 80100b2:	460c      	mov	r4, r1
 80100b4:	4616      	mov	r6, r2
 80100b6:	d505      	bpl.n	80100c4 <__swrite+0x1e>
 80100b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80100bc:	2302      	movs	r3, #2
 80100be:	2200      	movs	r2, #0
 80100c0:	f000 f868 	bl	8010194 <_lseek_r>
 80100c4:	89a3      	ldrh	r3, [r4, #12]
 80100c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80100ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80100ce:	81a3      	strh	r3, [r4, #12]
 80100d0:	4632      	mov	r2, r6
 80100d2:	463b      	mov	r3, r7
 80100d4:	4628      	mov	r0, r5
 80100d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80100da:	f000 b817 	b.w	801010c <_write_r>

080100de <__sseek>:
 80100de:	b510      	push	{r4, lr}
 80100e0:	460c      	mov	r4, r1
 80100e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80100e6:	f000 f855 	bl	8010194 <_lseek_r>
 80100ea:	1c43      	adds	r3, r0, #1
 80100ec:	89a3      	ldrh	r3, [r4, #12]
 80100ee:	bf15      	itete	ne
 80100f0:	6560      	strne	r0, [r4, #84]	; 0x54
 80100f2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80100f6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80100fa:	81a3      	strheq	r3, [r4, #12]
 80100fc:	bf18      	it	ne
 80100fe:	81a3      	strhne	r3, [r4, #12]
 8010100:	bd10      	pop	{r4, pc}

08010102 <__sclose>:
 8010102:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010106:	f000 b813 	b.w	8010130 <_close_r>
	...

0801010c <_write_r>:
 801010c:	b538      	push	{r3, r4, r5, lr}
 801010e:	4d07      	ldr	r5, [pc, #28]	; (801012c <_write_r+0x20>)
 8010110:	4604      	mov	r4, r0
 8010112:	4608      	mov	r0, r1
 8010114:	4611      	mov	r1, r2
 8010116:	2200      	movs	r2, #0
 8010118:	602a      	str	r2, [r5, #0]
 801011a:	461a      	mov	r2, r3
 801011c:	f7f5 fbaf 	bl	800587e <_write>
 8010120:	1c43      	adds	r3, r0, #1
 8010122:	d102      	bne.n	801012a <_write_r+0x1e>
 8010124:	682b      	ldr	r3, [r5, #0]
 8010126:	b103      	cbz	r3, 801012a <_write_r+0x1e>
 8010128:	6023      	str	r3, [r4, #0]
 801012a:	bd38      	pop	{r3, r4, r5, pc}
 801012c:	200062a4 	.word	0x200062a4

08010130 <_close_r>:
 8010130:	b538      	push	{r3, r4, r5, lr}
 8010132:	4d06      	ldr	r5, [pc, #24]	; (801014c <_close_r+0x1c>)
 8010134:	2300      	movs	r3, #0
 8010136:	4604      	mov	r4, r0
 8010138:	4608      	mov	r0, r1
 801013a:	602b      	str	r3, [r5, #0]
 801013c:	f7f5 fbbb 	bl	80058b6 <_close>
 8010140:	1c43      	adds	r3, r0, #1
 8010142:	d102      	bne.n	801014a <_close_r+0x1a>
 8010144:	682b      	ldr	r3, [r5, #0]
 8010146:	b103      	cbz	r3, 801014a <_close_r+0x1a>
 8010148:	6023      	str	r3, [r4, #0]
 801014a:	bd38      	pop	{r3, r4, r5, pc}
 801014c:	200062a4 	.word	0x200062a4

08010150 <_fstat_r>:
 8010150:	b538      	push	{r3, r4, r5, lr}
 8010152:	4d07      	ldr	r5, [pc, #28]	; (8010170 <_fstat_r+0x20>)
 8010154:	2300      	movs	r3, #0
 8010156:	4604      	mov	r4, r0
 8010158:	4608      	mov	r0, r1
 801015a:	4611      	mov	r1, r2
 801015c:	602b      	str	r3, [r5, #0]
 801015e:	f7f5 fbb6 	bl	80058ce <_fstat>
 8010162:	1c43      	adds	r3, r0, #1
 8010164:	d102      	bne.n	801016c <_fstat_r+0x1c>
 8010166:	682b      	ldr	r3, [r5, #0]
 8010168:	b103      	cbz	r3, 801016c <_fstat_r+0x1c>
 801016a:	6023      	str	r3, [r4, #0]
 801016c:	bd38      	pop	{r3, r4, r5, pc}
 801016e:	bf00      	nop
 8010170:	200062a4 	.word	0x200062a4

08010174 <_isatty_r>:
 8010174:	b538      	push	{r3, r4, r5, lr}
 8010176:	4d06      	ldr	r5, [pc, #24]	; (8010190 <_isatty_r+0x1c>)
 8010178:	2300      	movs	r3, #0
 801017a:	4604      	mov	r4, r0
 801017c:	4608      	mov	r0, r1
 801017e:	602b      	str	r3, [r5, #0]
 8010180:	f7f5 fbb5 	bl	80058ee <_isatty>
 8010184:	1c43      	adds	r3, r0, #1
 8010186:	d102      	bne.n	801018e <_isatty_r+0x1a>
 8010188:	682b      	ldr	r3, [r5, #0]
 801018a:	b103      	cbz	r3, 801018e <_isatty_r+0x1a>
 801018c:	6023      	str	r3, [r4, #0]
 801018e:	bd38      	pop	{r3, r4, r5, pc}
 8010190:	200062a4 	.word	0x200062a4

08010194 <_lseek_r>:
 8010194:	b538      	push	{r3, r4, r5, lr}
 8010196:	4d07      	ldr	r5, [pc, #28]	; (80101b4 <_lseek_r+0x20>)
 8010198:	4604      	mov	r4, r0
 801019a:	4608      	mov	r0, r1
 801019c:	4611      	mov	r1, r2
 801019e:	2200      	movs	r2, #0
 80101a0:	602a      	str	r2, [r5, #0]
 80101a2:	461a      	mov	r2, r3
 80101a4:	f7f5 fbae 	bl	8005904 <_lseek>
 80101a8:	1c43      	adds	r3, r0, #1
 80101aa:	d102      	bne.n	80101b2 <_lseek_r+0x1e>
 80101ac:	682b      	ldr	r3, [r5, #0]
 80101ae:	b103      	cbz	r3, 80101b2 <_lseek_r+0x1e>
 80101b0:	6023      	str	r3, [r4, #0]
 80101b2:	bd38      	pop	{r3, r4, r5, pc}
 80101b4:	200062a4 	.word	0x200062a4

080101b8 <_read_r>:
 80101b8:	b538      	push	{r3, r4, r5, lr}
 80101ba:	4d07      	ldr	r5, [pc, #28]	; (80101d8 <_read_r+0x20>)
 80101bc:	4604      	mov	r4, r0
 80101be:	4608      	mov	r0, r1
 80101c0:	4611      	mov	r1, r2
 80101c2:	2200      	movs	r2, #0
 80101c4:	602a      	str	r2, [r5, #0]
 80101c6:	461a      	mov	r2, r3
 80101c8:	f7f5 fb3c 	bl	8005844 <_read>
 80101cc:	1c43      	adds	r3, r0, #1
 80101ce:	d102      	bne.n	80101d6 <_read_r+0x1e>
 80101d0:	682b      	ldr	r3, [r5, #0]
 80101d2:	b103      	cbz	r3, 80101d6 <_read_r+0x1e>
 80101d4:	6023      	str	r3, [r4, #0]
 80101d6:	bd38      	pop	{r3, r4, r5, pc}
 80101d8:	200062a4 	.word	0x200062a4

080101dc <cosf>:
 80101dc:	ee10 3a10 	vmov	r3, s0
 80101e0:	b507      	push	{r0, r1, r2, lr}
 80101e2:	4a1e      	ldr	r2, [pc, #120]	; (801025c <cosf+0x80>)
 80101e4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80101e8:	4293      	cmp	r3, r2
 80101ea:	dc06      	bgt.n	80101fa <cosf+0x1e>
 80101ec:	eddf 0a1c 	vldr	s1, [pc, #112]	; 8010260 <cosf+0x84>
 80101f0:	b003      	add	sp, #12
 80101f2:	f85d eb04 	ldr.w	lr, [sp], #4
 80101f6:	f000 be95 	b.w	8010f24 <__kernel_cosf>
 80101fa:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80101fe:	db04      	blt.n	801020a <cosf+0x2e>
 8010200:	ee30 0a40 	vsub.f32	s0, s0, s0
 8010204:	b003      	add	sp, #12
 8010206:	f85d fb04 	ldr.w	pc, [sp], #4
 801020a:	4668      	mov	r0, sp
 801020c:	f000 fd4a 	bl	8010ca4 <__ieee754_rem_pio2f>
 8010210:	f000 0003 	and.w	r0, r0, #3
 8010214:	2801      	cmp	r0, #1
 8010216:	d009      	beq.n	801022c <cosf+0x50>
 8010218:	2802      	cmp	r0, #2
 801021a:	d010      	beq.n	801023e <cosf+0x62>
 801021c:	b9b0      	cbnz	r0, 801024c <cosf+0x70>
 801021e:	eddd 0a01 	vldr	s1, [sp, #4]
 8010222:	ed9d 0a00 	vldr	s0, [sp]
 8010226:	f000 fe7d 	bl	8010f24 <__kernel_cosf>
 801022a:	e7eb      	b.n	8010204 <cosf+0x28>
 801022c:	eddd 0a01 	vldr	s1, [sp, #4]
 8010230:	ed9d 0a00 	vldr	s0, [sp]
 8010234:	f001 f94c 	bl	80114d0 <__kernel_sinf>
 8010238:	eeb1 0a40 	vneg.f32	s0, s0
 801023c:	e7e2      	b.n	8010204 <cosf+0x28>
 801023e:	eddd 0a01 	vldr	s1, [sp, #4]
 8010242:	ed9d 0a00 	vldr	s0, [sp]
 8010246:	f000 fe6d 	bl	8010f24 <__kernel_cosf>
 801024a:	e7f5      	b.n	8010238 <cosf+0x5c>
 801024c:	eddd 0a01 	vldr	s1, [sp, #4]
 8010250:	ed9d 0a00 	vldr	s0, [sp]
 8010254:	2001      	movs	r0, #1
 8010256:	f001 f93b 	bl	80114d0 <__kernel_sinf>
 801025a:	e7d3      	b.n	8010204 <cosf+0x28>
 801025c:	3f490fd8 	.word	0x3f490fd8
 8010260:	00000000 	.word	0x00000000

08010264 <sinf>:
 8010264:	ee10 3a10 	vmov	r3, s0
 8010268:	b507      	push	{r0, r1, r2, lr}
 801026a:	4a1f      	ldr	r2, [pc, #124]	; (80102e8 <sinf+0x84>)
 801026c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010270:	4293      	cmp	r3, r2
 8010272:	dc07      	bgt.n	8010284 <sinf+0x20>
 8010274:	eddf 0a1d 	vldr	s1, [pc, #116]	; 80102ec <sinf+0x88>
 8010278:	2000      	movs	r0, #0
 801027a:	b003      	add	sp, #12
 801027c:	f85d eb04 	ldr.w	lr, [sp], #4
 8010280:	f001 b926 	b.w	80114d0 <__kernel_sinf>
 8010284:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8010288:	db04      	blt.n	8010294 <sinf+0x30>
 801028a:	ee30 0a40 	vsub.f32	s0, s0, s0
 801028e:	b003      	add	sp, #12
 8010290:	f85d fb04 	ldr.w	pc, [sp], #4
 8010294:	4668      	mov	r0, sp
 8010296:	f000 fd05 	bl	8010ca4 <__ieee754_rem_pio2f>
 801029a:	f000 0003 	and.w	r0, r0, #3
 801029e:	2801      	cmp	r0, #1
 80102a0:	d00a      	beq.n	80102b8 <sinf+0x54>
 80102a2:	2802      	cmp	r0, #2
 80102a4:	d00f      	beq.n	80102c6 <sinf+0x62>
 80102a6:	b9c0      	cbnz	r0, 80102da <sinf+0x76>
 80102a8:	eddd 0a01 	vldr	s1, [sp, #4]
 80102ac:	ed9d 0a00 	vldr	s0, [sp]
 80102b0:	2001      	movs	r0, #1
 80102b2:	f001 f90d 	bl	80114d0 <__kernel_sinf>
 80102b6:	e7ea      	b.n	801028e <sinf+0x2a>
 80102b8:	eddd 0a01 	vldr	s1, [sp, #4]
 80102bc:	ed9d 0a00 	vldr	s0, [sp]
 80102c0:	f000 fe30 	bl	8010f24 <__kernel_cosf>
 80102c4:	e7e3      	b.n	801028e <sinf+0x2a>
 80102c6:	eddd 0a01 	vldr	s1, [sp, #4]
 80102ca:	ed9d 0a00 	vldr	s0, [sp]
 80102ce:	2001      	movs	r0, #1
 80102d0:	f001 f8fe 	bl	80114d0 <__kernel_sinf>
 80102d4:	eeb1 0a40 	vneg.f32	s0, s0
 80102d8:	e7d9      	b.n	801028e <sinf+0x2a>
 80102da:	eddd 0a01 	vldr	s1, [sp, #4]
 80102de:	ed9d 0a00 	vldr	s0, [sp]
 80102e2:	f000 fe1f 	bl	8010f24 <__kernel_cosf>
 80102e6:	e7f5      	b.n	80102d4 <sinf+0x70>
 80102e8:	3f490fd8 	.word	0x3f490fd8
 80102ec:	00000000 	.word	0x00000000

080102f0 <asinf>:
 80102f0:	b508      	push	{r3, lr}
 80102f2:	ed2d 8b02 	vpush	{d8}
 80102f6:	eeb0 8a40 	vmov.f32	s16, s0
 80102fa:	f000 f87f 	bl	80103fc <__ieee754_asinf>
 80102fe:	eeb4 8a48 	vcmp.f32	s16, s16
 8010302:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010306:	eef0 8a40 	vmov.f32	s17, s0
 801030a:	d615      	bvs.n	8010338 <asinf+0x48>
 801030c:	eeb0 0a48 	vmov.f32	s0, s16
 8010310:	f001 fa1c 	bl	801174c <fabsf>
 8010314:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8010318:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801031c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010320:	dd0a      	ble.n	8010338 <asinf+0x48>
 8010322:	f7fd f823 	bl	800d36c <__errno>
 8010326:	ecbd 8b02 	vpop	{d8}
 801032a:	2321      	movs	r3, #33	; 0x21
 801032c:	6003      	str	r3, [r0, #0]
 801032e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8010332:	4804      	ldr	r0, [pc, #16]	; (8010344 <asinf+0x54>)
 8010334:	f001 ba60 	b.w	80117f8 <nanf>
 8010338:	eeb0 0a68 	vmov.f32	s0, s17
 801033c:	ecbd 8b02 	vpop	{d8}
 8010340:	bd08      	pop	{r3, pc}
 8010342:	bf00      	nop
 8010344:	08011f30 	.word	0x08011f30

08010348 <atan2f>:
 8010348:	f000 b93e 	b.w	80105c8 <__ieee754_atan2f>

0801034c <powf>:
 801034c:	b508      	push	{r3, lr}
 801034e:	ed2d 8b04 	vpush	{d8-d9}
 8010352:	eeb0 8a60 	vmov.f32	s16, s1
 8010356:	eeb0 9a40 	vmov.f32	s18, s0
 801035a:	f000 f9d5 	bl	8010708 <__ieee754_powf>
 801035e:	eeb4 8a48 	vcmp.f32	s16, s16
 8010362:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010366:	eef0 8a40 	vmov.f32	s17, s0
 801036a:	d63e      	bvs.n	80103ea <powf+0x9e>
 801036c:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8010370:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010374:	d112      	bne.n	801039c <powf+0x50>
 8010376:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801037a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801037e:	d039      	beq.n	80103f4 <powf+0xa8>
 8010380:	eeb0 0a48 	vmov.f32	s0, s16
 8010384:	f001 f9e9 	bl	801175a <finitef>
 8010388:	b378      	cbz	r0, 80103ea <powf+0x9e>
 801038a:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801038e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010392:	d52a      	bpl.n	80103ea <powf+0x9e>
 8010394:	f7fc ffea 	bl	800d36c <__errno>
 8010398:	2322      	movs	r3, #34	; 0x22
 801039a:	e014      	b.n	80103c6 <powf+0x7a>
 801039c:	f001 f9dd 	bl	801175a <finitef>
 80103a0:	b998      	cbnz	r0, 80103ca <powf+0x7e>
 80103a2:	eeb0 0a49 	vmov.f32	s0, s18
 80103a6:	f001 f9d8 	bl	801175a <finitef>
 80103aa:	b170      	cbz	r0, 80103ca <powf+0x7e>
 80103ac:	eeb0 0a48 	vmov.f32	s0, s16
 80103b0:	f001 f9d3 	bl	801175a <finitef>
 80103b4:	b148      	cbz	r0, 80103ca <powf+0x7e>
 80103b6:	eef4 8a68 	vcmp.f32	s17, s17
 80103ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80103be:	d7e9      	bvc.n	8010394 <powf+0x48>
 80103c0:	f7fc ffd4 	bl	800d36c <__errno>
 80103c4:	2321      	movs	r3, #33	; 0x21
 80103c6:	6003      	str	r3, [r0, #0]
 80103c8:	e00f      	b.n	80103ea <powf+0x9e>
 80103ca:	eef5 8a40 	vcmp.f32	s17, #0.0
 80103ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80103d2:	d10a      	bne.n	80103ea <powf+0x9e>
 80103d4:	eeb0 0a49 	vmov.f32	s0, s18
 80103d8:	f001 f9bf 	bl	801175a <finitef>
 80103dc:	b128      	cbz	r0, 80103ea <powf+0x9e>
 80103de:	eeb0 0a48 	vmov.f32	s0, s16
 80103e2:	f001 f9ba 	bl	801175a <finitef>
 80103e6:	2800      	cmp	r0, #0
 80103e8:	d1d4      	bne.n	8010394 <powf+0x48>
 80103ea:	eeb0 0a68 	vmov.f32	s0, s17
 80103ee:	ecbd 8b04 	vpop	{d8-d9}
 80103f2:	bd08      	pop	{r3, pc}
 80103f4:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 80103f8:	e7f7      	b.n	80103ea <powf+0x9e>
	...

080103fc <__ieee754_asinf>:
 80103fc:	b538      	push	{r3, r4, r5, lr}
 80103fe:	ee10 5a10 	vmov	r5, s0
 8010402:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8010406:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 801040a:	ed2d 8b04 	vpush	{d8-d9}
 801040e:	d10c      	bne.n	801042a <__ieee754_asinf+0x2e>
 8010410:	eddf 7a5d 	vldr	s15, [pc, #372]	; 8010588 <__ieee754_asinf+0x18c>
 8010414:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 801058c <__ieee754_asinf+0x190>
 8010418:	ee60 7a27 	vmul.f32	s15, s0, s15
 801041c:	eee0 7a07 	vfma.f32	s15, s0, s14
 8010420:	eeb0 0a67 	vmov.f32	s0, s15
 8010424:	ecbd 8b04 	vpop	{d8-d9}
 8010428:	bd38      	pop	{r3, r4, r5, pc}
 801042a:	dd04      	ble.n	8010436 <__ieee754_asinf+0x3a>
 801042c:	ee70 7a40 	vsub.f32	s15, s0, s0
 8010430:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8010434:	e7f6      	b.n	8010424 <__ieee754_asinf+0x28>
 8010436:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 801043a:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 801043e:	da0b      	bge.n	8010458 <__ieee754_asinf+0x5c>
 8010440:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 8010444:	da52      	bge.n	80104ec <__ieee754_asinf+0xf0>
 8010446:	eddf 7a52 	vldr	s15, [pc, #328]	; 8010590 <__ieee754_asinf+0x194>
 801044a:	ee70 7a27 	vadd.f32	s15, s0, s15
 801044e:	eef4 7ae8 	vcmpe.f32	s15, s17
 8010452:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010456:	dce5      	bgt.n	8010424 <__ieee754_asinf+0x28>
 8010458:	f001 f978 	bl	801174c <fabsf>
 801045c:	ee38 0ac0 	vsub.f32	s0, s17, s0
 8010460:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 8010464:	ee20 8a08 	vmul.f32	s16, s0, s16
 8010468:	eddf 7a4a 	vldr	s15, [pc, #296]	; 8010594 <__ieee754_asinf+0x198>
 801046c:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8010598 <__ieee754_asinf+0x19c>
 8010470:	ed9f 9a4a 	vldr	s18, [pc, #296]	; 801059c <__ieee754_asinf+0x1a0>
 8010474:	eea8 7a27 	vfma.f32	s14, s16, s15
 8010478:	eddf 7a49 	vldr	s15, [pc, #292]	; 80105a0 <__ieee754_asinf+0x1a4>
 801047c:	eee7 7a08 	vfma.f32	s15, s14, s16
 8010480:	ed9f 7a48 	vldr	s14, [pc, #288]	; 80105a4 <__ieee754_asinf+0x1a8>
 8010484:	eea7 7a88 	vfma.f32	s14, s15, s16
 8010488:	eddf 7a47 	vldr	s15, [pc, #284]	; 80105a8 <__ieee754_asinf+0x1ac>
 801048c:	eee7 7a08 	vfma.f32	s15, s14, s16
 8010490:	ed9f 7a46 	vldr	s14, [pc, #280]	; 80105ac <__ieee754_asinf+0x1b0>
 8010494:	eea7 9a88 	vfma.f32	s18, s15, s16
 8010498:	eddf 7a45 	vldr	s15, [pc, #276]	; 80105b0 <__ieee754_asinf+0x1b4>
 801049c:	eee8 7a07 	vfma.f32	s15, s16, s14
 80104a0:	ed9f 7a44 	vldr	s14, [pc, #272]	; 80105b4 <__ieee754_asinf+0x1b8>
 80104a4:	eea7 7a88 	vfma.f32	s14, s15, s16
 80104a8:	eddf 7a43 	vldr	s15, [pc, #268]	; 80105b8 <__ieee754_asinf+0x1bc>
 80104ac:	eee7 7a08 	vfma.f32	s15, s14, s16
 80104b0:	eeb0 0a48 	vmov.f32	s0, s16
 80104b4:	eee7 8a88 	vfma.f32	s17, s15, s16
 80104b8:	f000 fd30 	bl	8010f1c <__ieee754_sqrtf>
 80104bc:	4b3f      	ldr	r3, [pc, #252]	; (80105bc <__ieee754_asinf+0x1c0>)
 80104be:	ee29 9a08 	vmul.f32	s18, s18, s16
 80104c2:	429c      	cmp	r4, r3
 80104c4:	ee89 6a28 	vdiv.f32	s12, s18, s17
 80104c8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80104cc:	dd3d      	ble.n	801054a <__ieee754_asinf+0x14e>
 80104ce:	eea0 0a06 	vfma.f32	s0, s0, s12
 80104d2:	eddf 7a3b 	vldr	s15, [pc, #236]	; 80105c0 <__ieee754_asinf+0x1c4>
 80104d6:	eee0 7a26 	vfma.f32	s15, s0, s13
 80104da:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 801058c <__ieee754_asinf+0x190>
 80104de:	ee30 0a67 	vsub.f32	s0, s0, s15
 80104e2:	2d00      	cmp	r5, #0
 80104e4:	bfd8      	it	le
 80104e6:	eeb1 0a40 	vnegle.f32	s0, s0
 80104ea:	e79b      	b.n	8010424 <__ieee754_asinf+0x28>
 80104ec:	ee60 7a00 	vmul.f32	s15, s0, s0
 80104f0:	eddf 6a28 	vldr	s13, [pc, #160]	; 8010594 <__ieee754_asinf+0x198>
 80104f4:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8010598 <__ieee754_asinf+0x19c>
 80104f8:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 80105ac <__ieee754_asinf+0x1b0>
 80104fc:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8010500:	eddf 6a27 	vldr	s13, [pc, #156]	; 80105a0 <__ieee754_asinf+0x1a4>
 8010504:	eee7 6a27 	vfma.f32	s13, s14, s15
 8010508:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80105a4 <__ieee754_asinf+0x1a8>
 801050c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010510:	eddf 6a25 	vldr	s13, [pc, #148]	; 80105a8 <__ieee754_asinf+0x1ac>
 8010514:	eee7 6a27 	vfma.f32	s13, s14, s15
 8010518:	ed9f 7a20 	vldr	s14, [pc, #128]	; 801059c <__ieee754_asinf+0x1a0>
 801051c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010520:	eddf 6a23 	vldr	s13, [pc, #140]	; 80105b0 <__ieee754_asinf+0x1b4>
 8010524:	eee7 6a86 	vfma.f32	s13, s15, s12
 8010528:	ed9f 6a22 	vldr	s12, [pc, #136]	; 80105b4 <__ieee754_asinf+0x1b8>
 801052c:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8010530:	eddf 6a21 	vldr	s13, [pc, #132]	; 80105b8 <__ieee754_asinf+0x1bc>
 8010534:	eee6 6a27 	vfma.f32	s13, s12, s15
 8010538:	ee27 7a27 	vmul.f32	s14, s14, s15
 801053c:	eee6 8aa7 	vfma.f32	s17, s13, s15
 8010540:	eec7 7a28 	vdiv.f32	s15, s14, s17
 8010544:	eea0 0a27 	vfma.f32	s0, s0, s15
 8010548:	e76c      	b.n	8010424 <__ieee754_asinf+0x28>
 801054a:	ee10 3a10 	vmov	r3, s0
 801054e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8010552:	f023 030f 	bic.w	r3, r3, #15
 8010556:	ee07 3a10 	vmov	s14, r3
 801055a:	eea7 8a47 	vfms.f32	s16, s14, s14
 801055e:	ee70 7a07 	vadd.f32	s15, s0, s14
 8010562:	ee30 0a00 	vadd.f32	s0, s0, s0
 8010566:	eec8 5a27 	vdiv.f32	s11, s16, s15
 801056a:	eddf 7a07 	vldr	s15, [pc, #28]	; 8010588 <__ieee754_asinf+0x18c>
 801056e:	eee5 7ae6 	vfms.f32	s15, s11, s13
 8010572:	eed0 7a06 	vfnms.f32	s15, s0, s12
 8010576:	ed9f 0a13 	vldr	s0, [pc, #76]	; 80105c4 <__ieee754_asinf+0x1c8>
 801057a:	eeb0 6a40 	vmov.f32	s12, s0
 801057e:	eea7 6a66 	vfms.f32	s12, s14, s13
 8010582:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8010586:	e7aa      	b.n	80104de <__ieee754_asinf+0xe2>
 8010588:	b33bbd2e 	.word	0xb33bbd2e
 801058c:	3fc90fdb 	.word	0x3fc90fdb
 8010590:	7149f2ca 	.word	0x7149f2ca
 8010594:	3811ef08 	.word	0x3811ef08
 8010598:	3a4f7f04 	.word	0x3a4f7f04
 801059c:	3e2aaaab 	.word	0x3e2aaaab
 80105a0:	bd241146 	.word	0xbd241146
 80105a4:	3e4e0aa8 	.word	0x3e4e0aa8
 80105a8:	bea6b090 	.word	0xbea6b090
 80105ac:	3d9dc62e 	.word	0x3d9dc62e
 80105b0:	bf303361 	.word	0xbf303361
 80105b4:	4001572d 	.word	0x4001572d
 80105b8:	c019d139 	.word	0xc019d139
 80105bc:	3f799999 	.word	0x3f799999
 80105c0:	333bbd2e 	.word	0x333bbd2e
 80105c4:	3f490fdb 	.word	0x3f490fdb

080105c8 <__ieee754_atan2f>:
 80105c8:	ee10 2a90 	vmov	r2, s1
 80105cc:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 80105d0:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80105d4:	b510      	push	{r4, lr}
 80105d6:	eef0 7a40 	vmov.f32	s15, s0
 80105da:	dc06      	bgt.n	80105ea <__ieee754_atan2f+0x22>
 80105dc:	ee10 0a10 	vmov	r0, s0
 80105e0:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 80105e4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80105e8:	dd04      	ble.n	80105f4 <__ieee754_atan2f+0x2c>
 80105ea:	ee77 7aa0 	vadd.f32	s15, s15, s1
 80105ee:	eeb0 0a67 	vmov.f32	s0, s15
 80105f2:	bd10      	pop	{r4, pc}
 80105f4:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 80105f8:	d103      	bne.n	8010602 <__ieee754_atan2f+0x3a>
 80105fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80105fe:	f000 bfd1 	b.w	80115a4 <atanf>
 8010602:	1794      	asrs	r4, r2, #30
 8010604:	f004 0402 	and.w	r4, r4, #2
 8010608:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 801060c:	b943      	cbnz	r3, 8010620 <__ieee754_atan2f+0x58>
 801060e:	2c02      	cmp	r4, #2
 8010610:	d05e      	beq.n	80106d0 <__ieee754_atan2f+0x108>
 8010612:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80106e4 <__ieee754_atan2f+0x11c>
 8010616:	2c03      	cmp	r4, #3
 8010618:	bf08      	it	eq
 801061a:	eef0 7a47 	vmoveq.f32	s15, s14
 801061e:	e7e6      	b.n	80105ee <__ieee754_atan2f+0x26>
 8010620:	b941      	cbnz	r1, 8010634 <__ieee754_atan2f+0x6c>
 8010622:	eddf 7a31 	vldr	s15, [pc, #196]	; 80106e8 <__ieee754_atan2f+0x120>
 8010626:	ed9f 0a31 	vldr	s0, [pc, #196]	; 80106ec <__ieee754_atan2f+0x124>
 801062a:	2800      	cmp	r0, #0
 801062c:	bfb8      	it	lt
 801062e:	eef0 7a40 	vmovlt.f32	s15, s0
 8010632:	e7dc      	b.n	80105ee <__ieee754_atan2f+0x26>
 8010634:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8010638:	d110      	bne.n	801065c <__ieee754_atan2f+0x94>
 801063a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801063e:	f104 34ff 	add.w	r4, r4, #4294967295
 8010642:	d107      	bne.n	8010654 <__ieee754_atan2f+0x8c>
 8010644:	2c02      	cmp	r4, #2
 8010646:	d846      	bhi.n	80106d6 <__ieee754_atan2f+0x10e>
 8010648:	4b29      	ldr	r3, [pc, #164]	; (80106f0 <__ieee754_atan2f+0x128>)
 801064a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801064e:	edd4 7a00 	vldr	s15, [r4]
 8010652:	e7cc      	b.n	80105ee <__ieee754_atan2f+0x26>
 8010654:	2c02      	cmp	r4, #2
 8010656:	d841      	bhi.n	80106dc <__ieee754_atan2f+0x114>
 8010658:	4b26      	ldr	r3, [pc, #152]	; (80106f4 <__ieee754_atan2f+0x12c>)
 801065a:	e7f6      	b.n	801064a <__ieee754_atan2f+0x82>
 801065c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8010660:	d0df      	beq.n	8010622 <__ieee754_atan2f+0x5a>
 8010662:	1a5b      	subs	r3, r3, r1
 8010664:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 8010668:	ea4f 51e3 	mov.w	r1, r3, asr #23
 801066c:	da1a      	bge.n	80106a4 <__ieee754_atan2f+0xdc>
 801066e:	2a00      	cmp	r2, #0
 8010670:	da01      	bge.n	8010676 <__ieee754_atan2f+0xae>
 8010672:	313c      	adds	r1, #60	; 0x3c
 8010674:	db19      	blt.n	80106aa <__ieee754_atan2f+0xe2>
 8010676:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 801067a:	f001 f867 	bl	801174c <fabsf>
 801067e:	f000 ff91 	bl	80115a4 <atanf>
 8010682:	eef0 7a40 	vmov.f32	s15, s0
 8010686:	2c01      	cmp	r4, #1
 8010688:	d012      	beq.n	80106b0 <__ieee754_atan2f+0xe8>
 801068a:	2c02      	cmp	r4, #2
 801068c:	d017      	beq.n	80106be <__ieee754_atan2f+0xf6>
 801068e:	2c00      	cmp	r4, #0
 8010690:	d0ad      	beq.n	80105ee <__ieee754_atan2f+0x26>
 8010692:	ed9f 0a19 	vldr	s0, [pc, #100]	; 80106f8 <__ieee754_atan2f+0x130>
 8010696:	ee77 7a80 	vadd.f32	s15, s15, s0
 801069a:	ed9f 0a18 	vldr	s0, [pc, #96]	; 80106fc <__ieee754_atan2f+0x134>
 801069e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80106a2:	e7a4      	b.n	80105ee <__ieee754_atan2f+0x26>
 80106a4:	eddf 7a10 	vldr	s15, [pc, #64]	; 80106e8 <__ieee754_atan2f+0x120>
 80106a8:	e7ed      	b.n	8010686 <__ieee754_atan2f+0xbe>
 80106aa:	eddf 7a15 	vldr	s15, [pc, #84]	; 8010700 <__ieee754_atan2f+0x138>
 80106ae:	e7ea      	b.n	8010686 <__ieee754_atan2f+0xbe>
 80106b0:	ee17 3a90 	vmov	r3, s15
 80106b4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80106b8:	ee07 3a90 	vmov	s15, r3
 80106bc:	e797      	b.n	80105ee <__ieee754_atan2f+0x26>
 80106be:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 80106f8 <__ieee754_atan2f+0x130>
 80106c2:	ee77 7a80 	vadd.f32	s15, s15, s0
 80106c6:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 80106fc <__ieee754_atan2f+0x134>
 80106ca:	ee70 7a67 	vsub.f32	s15, s0, s15
 80106ce:	e78e      	b.n	80105ee <__ieee754_atan2f+0x26>
 80106d0:	eddf 7a0a 	vldr	s15, [pc, #40]	; 80106fc <__ieee754_atan2f+0x134>
 80106d4:	e78b      	b.n	80105ee <__ieee754_atan2f+0x26>
 80106d6:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8010704 <__ieee754_atan2f+0x13c>
 80106da:	e788      	b.n	80105ee <__ieee754_atan2f+0x26>
 80106dc:	eddf 7a08 	vldr	s15, [pc, #32]	; 8010700 <__ieee754_atan2f+0x138>
 80106e0:	e785      	b.n	80105ee <__ieee754_atan2f+0x26>
 80106e2:	bf00      	nop
 80106e4:	c0490fdb 	.word	0xc0490fdb
 80106e8:	3fc90fdb 	.word	0x3fc90fdb
 80106ec:	bfc90fdb 	.word	0xbfc90fdb
 80106f0:	0801209c 	.word	0x0801209c
 80106f4:	080120a8 	.word	0x080120a8
 80106f8:	33bbbd2e 	.word	0x33bbbd2e
 80106fc:	40490fdb 	.word	0x40490fdb
 8010700:	00000000 	.word	0x00000000
 8010704:	3f490fdb 	.word	0x3f490fdb

08010708 <__ieee754_powf>:
 8010708:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801070c:	ee10 4a90 	vmov	r4, s1
 8010710:	f034 4800 	bics.w	r8, r4, #2147483648	; 0x80000000
 8010714:	ed2d 8b02 	vpush	{d8}
 8010718:	ee10 6a10 	vmov	r6, s0
 801071c:	eeb0 8a40 	vmov.f32	s16, s0
 8010720:	eef0 8a60 	vmov.f32	s17, s1
 8010724:	d10c      	bne.n	8010740 <__ieee754_powf+0x38>
 8010726:	f486 0680 	eor.w	r6, r6, #4194304	; 0x400000
 801072a:	0076      	lsls	r6, r6, #1
 801072c:	f516 0f00 	cmn.w	r6, #8388608	; 0x800000
 8010730:	f240 8296 	bls.w	8010c60 <__ieee754_powf+0x558>
 8010734:	ee38 0a28 	vadd.f32	s0, s16, s17
 8010738:	ecbd 8b02 	vpop	{d8}
 801073c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010740:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8010744:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8010748:	dcf4      	bgt.n	8010734 <__ieee754_powf+0x2c>
 801074a:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 801074e:	dd08      	ble.n	8010762 <__ieee754_powf+0x5a>
 8010750:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
 8010754:	d1ee      	bne.n	8010734 <__ieee754_powf+0x2c>
 8010756:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 801075a:	0064      	lsls	r4, r4, #1
 801075c:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 8010760:	e7e6      	b.n	8010730 <__ieee754_powf+0x28>
 8010762:	2e00      	cmp	r6, #0
 8010764:	da20      	bge.n	80107a8 <__ieee754_powf+0xa0>
 8010766:	f1b8 4f97 	cmp.w	r8, #1266679808	; 0x4b800000
 801076a:	da2d      	bge.n	80107c8 <__ieee754_powf+0xc0>
 801076c:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 8010770:	f2c0 827f 	blt.w	8010c72 <__ieee754_powf+0x56a>
 8010774:	ea4f 53e8 	mov.w	r3, r8, asr #23
 8010778:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 801077c:	fa48 f703 	asr.w	r7, r8, r3
 8010780:	fa07 f303 	lsl.w	r3, r7, r3
 8010784:	4543      	cmp	r3, r8
 8010786:	f040 8274 	bne.w	8010c72 <__ieee754_powf+0x56a>
 801078a:	f007 0701 	and.w	r7, r7, #1
 801078e:	f1c7 0702 	rsb	r7, r7, #2
 8010792:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 8010796:	d11f      	bne.n	80107d8 <__ieee754_powf+0xd0>
 8010798:	2c00      	cmp	r4, #0
 801079a:	f280 8267 	bge.w	8010c6c <__ieee754_powf+0x564>
 801079e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80107a2:	ee87 0a88 	vdiv.f32	s0, s15, s16
 80107a6:	e7c7      	b.n	8010738 <__ieee754_powf+0x30>
 80107a8:	2700      	movs	r7, #0
 80107aa:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 80107ae:	d1f0      	bne.n	8010792 <__ieee754_powf+0x8a>
 80107b0:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 80107b4:	f000 8254 	beq.w	8010c60 <__ieee754_powf+0x558>
 80107b8:	dd08      	ble.n	80107cc <__ieee754_powf+0xc4>
 80107ba:	ed9f 0ac2 	vldr	s0, [pc, #776]	; 8010ac4 <__ieee754_powf+0x3bc>
 80107be:	2c00      	cmp	r4, #0
 80107c0:	bfa8      	it	ge
 80107c2:	eeb0 0a68 	vmovge.f32	s0, s17
 80107c6:	e7b7      	b.n	8010738 <__ieee754_powf+0x30>
 80107c8:	2702      	movs	r7, #2
 80107ca:	e7ee      	b.n	80107aa <__ieee754_powf+0xa2>
 80107cc:	2c00      	cmp	r4, #0
 80107ce:	f280 824a 	bge.w	8010c66 <__ieee754_powf+0x55e>
 80107d2:	eeb1 0a68 	vneg.f32	s0, s17
 80107d6:	e7af      	b.n	8010738 <__ieee754_powf+0x30>
 80107d8:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 80107dc:	d102      	bne.n	80107e4 <__ieee754_powf+0xdc>
 80107de:	ee28 0a08 	vmul.f32	s0, s16, s16
 80107e2:	e7a9      	b.n	8010738 <__ieee754_powf+0x30>
 80107e4:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 80107e8:	eeb0 0a48 	vmov.f32	s0, s16
 80107ec:	d107      	bne.n	80107fe <__ieee754_powf+0xf6>
 80107ee:	2e00      	cmp	r6, #0
 80107f0:	db05      	blt.n	80107fe <__ieee754_powf+0xf6>
 80107f2:	ecbd 8b02 	vpop	{d8}
 80107f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80107fa:	f000 bb8f 	b.w	8010f1c <__ieee754_sqrtf>
 80107fe:	f000 ffa5 	bl	801174c <fabsf>
 8010802:	b125      	cbz	r5, 801080e <__ieee754_powf+0x106>
 8010804:	f026 4340 	bic.w	r3, r6, #3221225472	; 0xc0000000
 8010808:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 801080c:	d116      	bne.n	801083c <__ieee754_powf+0x134>
 801080e:	2c00      	cmp	r4, #0
 8010810:	bfbc      	itt	lt
 8010812:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 8010816:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 801081a:	2e00      	cmp	r6, #0
 801081c:	da8c      	bge.n	8010738 <__ieee754_powf+0x30>
 801081e:	f1a5 557e 	sub.w	r5, r5, #1065353216	; 0x3f800000
 8010822:	ea55 0307 	orrs.w	r3, r5, r7
 8010826:	d104      	bne.n	8010832 <__ieee754_powf+0x12a>
 8010828:	ee70 7a40 	vsub.f32	s15, s0, s0
 801082c:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8010830:	e782      	b.n	8010738 <__ieee754_powf+0x30>
 8010832:	2f01      	cmp	r7, #1
 8010834:	d180      	bne.n	8010738 <__ieee754_powf+0x30>
 8010836:	eeb1 0a40 	vneg.f32	s0, s0
 801083a:	e77d      	b.n	8010738 <__ieee754_powf+0x30>
 801083c:	0ff0      	lsrs	r0, r6, #31
 801083e:	3801      	subs	r0, #1
 8010840:	ea57 0300 	orrs.w	r3, r7, r0
 8010844:	d104      	bne.n	8010850 <__ieee754_powf+0x148>
 8010846:	ee38 8a48 	vsub.f32	s16, s16, s16
 801084a:	ee88 0a08 	vdiv.f32	s0, s16, s16
 801084e:	e773      	b.n	8010738 <__ieee754_powf+0x30>
 8010850:	f1b8 4f9a 	cmp.w	r8, #1291845632	; 0x4d000000
 8010854:	dd74      	ble.n	8010940 <__ieee754_powf+0x238>
 8010856:	4b9c      	ldr	r3, [pc, #624]	; (8010ac8 <__ieee754_powf+0x3c0>)
 8010858:	429d      	cmp	r5, r3
 801085a:	dc08      	bgt.n	801086e <__ieee754_powf+0x166>
 801085c:	2c00      	cmp	r4, #0
 801085e:	da0b      	bge.n	8010878 <__ieee754_powf+0x170>
 8010860:	2000      	movs	r0, #0
 8010862:	ecbd 8b02 	vpop	{d8}
 8010866:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801086a:	f000 be95 	b.w	8011598 <__math_oflowf>
 801086e:	4b97      	ldr	r3, [pc, #604]	; (8010acc <__ieee754_powf+0x3c4>)
 8010870:	429d      	cmp	r5, r3
 8010872:	dd08      	ble.n	8010886 <__ieee754_powf+0x17e>
 8010874:	2c00      	cmp	r4, #0
 8010876:	dcf3      	bgt.n	8010860 <__ieee754_powf+0x158>
 8010878:	2000      	movs	r0, #0
 801087a:	ecbd 8b02 	vpop	{d8}
 801087e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010882:	f000 be83 	b.w	801158c <__math_uflowf>
 8010886:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801088a:	ee30 0a67 	vsub.f32	s0, s0, s15
 801088e:	eddf 6a90 	vldr	s13, [pc, #576]	; 8010ad0 <__ieee754_powf+0x3c8>
 8010892:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8010896:	eee0 6a67 	vfms.f32	s13, s0, s15
 801089a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801089e:	eee6 7ac0 	vfms.f32	s15, s13, s0
 80108a2:	ee20 7a00 	vmul.f32	s14, s0, s0
 80108a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80108aa:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8010ad4 <__ieee754_powf+0x3cc>
 80108ae:	ee67 7a67 	vnmul.f32	s15, s14, s15
 80108b2:	ed9f 7a89 	vldr	s14, [pc, #548]	; 8010ad8 <__ieee754_powf+0x3d0>
 80108b6:	eee0 7a07 	vfma.f32	s15, s0, s14
 80108ba:	ed9f 7a88 	vldr	s14, [pc, #544]	; 8010adc <__ieee754_powf+0x3d4>
 80108be:	eef0 6a67 	vmov.f32	s13, s15
 80108c2:	eee0 6a07 	vfma.f32	s13, s0, s14
 80108c6:	ee16 3a90 	vmov	r3, s13
 80108ca:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80108ce:	f023 030f 	bic.w	r3, r3, #15
 80108d2:	ee00 3a90 	vmov	s1, r3
 80108d6:	eee0 0a47 	vfms.f32	s1, s0, s14
 80108da:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80108de:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 80108e2:	f024 040f 	bic.w	r4, r4, #15
 80108e6:	ee07 4a10 	vmov	s14, r4
 80108ea:	ee67 0aa8 	vmul.f32	s1, s15, s17
 80108ee:	ee38 7ac7 	vsub.f32	s14, s17, s14
 80108f2:	ee07 3a90 	vmov	s15, r3
 80108f6:	eee7 0a27 	vfma.f32	s1, s14, s15
 80108fa:	3f01      	subs	r7, #1
 80108fc:	ea57 0200 	orrs.w	r2, r7, r0
 8010900:	ee07 4a10 	vmov	s14, r4
 8010904:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010908:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 801090c:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8010910:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8010914:	ee17 4a10 	vmov	r4, s14
 8010918:	bf08      	it	eq
 801091a:	eeb0 8a40 	vmoveq.f32	s16, s0
 801091e:	2c00      	cmp	r4, #0
 8010920:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8010924:	f340 817e 	ble.w	8010c24 <__ieee754_powf+0x51c>
 8010928:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 801092c:	f340 80f8 	ble.w	8010b20 <__ieee754_powf+0x418>
 8010930:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8010934:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010938:	bf4c      	ite	mi
 801093a:	2001      	movmi	r0, #1
 801093c:	2000      	movpl	r0, #0
 801093e:	e790      	b.n	8010862 <__ieee754_powf+0x15a>
 8010940:	f016 4fff 	tst.w	r6, #2139095040	; 0x7f800000
 8010944:	bf01      	itttt	eq
 8010946:	eddf 7a66 	vldreq	s15, [pc, #408]	; 8010ae0 <__ieee754_powf+0x3d8>
 801094a:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 801094e:	f06f 0217 	mvneq.w	r2, #23
 8010952:	ee17 5a90 	vmoveq	r5, s15
 8010956:	ea4f 53e5 	mov.w	r3, r5, asr #23
 801095a:	bf18      	it	ne
 801095c:	2200      	movne	r2, #0
 801095e:	3b7f      	subs	r3, #127	; 0x7f
 8010960:	4413      	add	r3, r2
 8010962:	4a60      	ldr	r2, [pc, #384]	; (8010ae4 <__ieee754_powf+0x3dc>)
 8010964:	f3c5 0516 	ubfx	r5, r5, #0, #23
 8010968:	4295      	cmp	r5, r2
 801096a:	f045 517e 	orr.w	r1, r5, #1065353216	; 0x3f800000
 801096e:	dd06      	ble.n	801097e <__ieee754_powf+0x276>
 8010970:	4a5d      	ldr	r2, [pc, #372]	; (8010ae8 <__ieee754_powf+0x3e0>)
 8010972:	4295      	cmp	r5, r2
 8010974:	f340 80a4 	ble.w	8010ac0 <__ieee754_powf+0x3b8>
 8010978:	3301      	adds	r3, #1
 801097a:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 801097e:	2500      	movs	r5, #0
 8010980:	4a5a      	ldr	r2, [pc, #360]	; (8010aec <__ieee754_powf+0x3e4>)
 8010982:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 8010986:	ee07 1a90 	vmov	s15, r1
 801098a:	ed92 7a00 	vldr	s14, [r2]
 801098e:	4a58      	ldr	r2, [pc, #352]	; (8010af0 <__ieee754_powf+0x3e8>)
 8010990:	ee37 6a27 	vadd.f32	s12, s14, s15
 8010994:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8010998:	eec5 6a86 	vdiv.f32	s13, s11, s12
 801099c:	1049      	asrs	r1, r1, #1
 801099e:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 80109a2:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 80109a6:	eb01 5145 	add.w	r1, r1, r5, lsl #21
 80109aa:	ee37 5ac7 	vsub.f32	s10, s15, s14
 80109ae:	ee06 1a10 	vmov	s12, r1
 80109b2:	ee65 4a26 	vmul.f32	s9, s10, s13
 80109b6:	ee36 7a47 	vsub.f32	s14, s12, s14
 80109ba:	ee14 6a90 	vmov	r6, s9
 80109be:	4016      	ands	r6, r2
 80109c0:	ee05 6a90 	vmov	s11, r6
 80109c4:	eea5 5ac6 	vfms.f32	s10, s11, s12
 80109c8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80109cc:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8010af4 <__ieee754_powf+0x3ec>
 80109d0:	eea5 5ae7 	vfms.f32	s10, s11, s15
 80109d4:	ee64 7aa4 	vmul.f32	s15, s9, s9
 80109d8:	ee25 6a26 	vmul.f32	s12, s10, s13
 80109dc:	eddf 6a46 	vldr	s13, [pc, #280]	; 8010af8 <__ieee754_powf+0x3f0>
 80109e0:	eea7 7aa6 	vfma.f32	s14, s15, s13
 80109e4:	eddf 6a45 	vldr	s13, [pc, #276]	; 8010afc <__ieee754_powf+0x3f4>
 80109e8:	eee7 6a27 	vfma.f32	s13, s14, s15
 80109ec:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8010ad0 <__ieee754_powf+0x3c8>
 80109f0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80109f4:	eddf 6a42 	vldr	s13, [pc, #264]	; 8010b00 <__ieee754_powf+0x3f8>
 80109f8:	eee7 6a27 	vfma.f32	s13, s14, s15
 80109fc:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8010b04 <__ieee754_powf+0x3fc>
 8010a00:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010a04:	ee74 6aa5 	vadd.f32	s13, s9, s11
 8010a08:	ee27 5aa7 	vmul.f32	s10, s15, s15
 8010a0c:	ee66 6a86 	vmul.f32	s13, s13, s12
 8010a10:	eee5 6a07 	vfma.f32	s13, s10, s14
 8010a14:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 8010a18:	eef0 7a45 	vmov.f32	s15, s10
 8010a1c:	eee5 7aa5 	vfma.f32	s15, s11, s11
 8010a20:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010a24:	ee17 1a90 	vmov	r1, s15
 8010a28:	4011      	ands	r1, r2
 8010a2a:	ee07 1a90 	vmov	s15, r1
 8010a2e:	ee37 7ac5 	vsub.f32	s14, s15, s10
 8010a32:	eea5 7ae5 	vfms.f32	s14, s11, s11
 8010a36:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8010a3a:	ee27 7a24 	vmul.f32	s14, s14, s9
 8010a3e:	eea6 7a27 	vfma.f32	s14, s12, s15
 8010a42:	eeb0 6a47 	vmov.f32	s12, s14
 8010a46:	eea5 6aa7 	vfma.f32	s12, s11, s15
 8010a4a:	ee16 1a10 	vmov	r1, s12
 8010a4e:	4011      	ands	r1, r2
 8010a50:	ee06 1a90 	vmov	s13, r1
 8010a54:	eee5 6ae7 	vfms.f32	s13, s11, s15
 8010a58:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8010b08 <__ieee754_powf+0x400>
 8010a5c:	eddf 5a2b 	vldr	s11, [pc, #172]	; 8010b0c <__ieee754_powf+0x404>
 8010a60:	ee37 7a66 	vsub.f32	s14, s14, s13
 8010a64:	ee06 1a10 	vmov	s12, r1
 8010a68:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010a6c:	eddf 7a28 	vldr	s15, [pc, #160]	; 8010b10 <__ieee754_powf+0x408>
 8010a70:	4928      	ldr	r1, [pc, #160]	; (8010b14 <__ieee754_powf+0x40c>)
 8010a72:	eea6 7a27 	vfma.f32	s14, s12, s15
 8010a76:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 8010a7a:	edd1 7a00 	vldr	s15, [r1]
 8010a7e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010a82:	ee07 3a90 	vmov	s15, r3
 8010a86:	4b24      	ldr	r3, [pc, #144]	; (8010b18 <__ieee754_powf+0x410>)
 8010a88:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8010a8c:	eef0 7a47 	vmov.f32	s15, s14
 8010a90:	eee6 7a25 	vfma.f32	s15, s12, s11
 8010a94:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8010a98:	edd5 0a00 	vldr	s1, [r5]
 8010a9c:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8010aa0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010aa4:	ee17 3a90 	vmov	r3, s15
 8010aa8:	4013      	ands	r3, r2
 8010aaa:	ee07 3a90 	vmov	s15, r3
 8010aae:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8010ab2:	ee76 6ae0 	vsub.f32	s13, s13, s1
 8010ab6:	eee6 6a65 	vfms.f32	s13, s12, s11
 8010aba:	ee77 7a66 	vsub.f32	s15, s14, s13
 8010abe:	e70e      	b.n	80108de <__ieee754_powf+0x1d6>
 8010ac0:	2501      	movs	r5, #1
 8010ac2:	e75d      	b.n	8010980 <__ieee754_powf+0x278>
 8010ac4:	00000000 	.word	0x00000000
 8010ac8:	3f7ffff3 	.word	0x3f7ffff3
 8010acc:	3f800007 	.word	0x3f800007
 8010ad0:	3eaaaaab 	.word	0x3eaaaaab
 8010ad4:	3fb8aa3b 	.word	0x3fb8aa3b
 8010ad8:	36eca570 	.word	0x36eca570
 8010adc:	3fb8aa00 	.word	0x3fb8aa00
 8010ae0:	4b800000 	.word	0x4b800000
 8010ae4:	001cc471 	.word	0x001cc471
 8010ae8:	005db3d6 	.word	0x005db3d6
 8010aec:	080120b4 	.word	0x080120b4
 8010af0:	fffff000 	.word	0xfffff000
 8010af4:	3e6c3255 	.word	0x3e6c3255
 8010af8:	3e53f142 	.word	0x3e53f142
 8010afc:	3e8ba305 	.word	0x3e8ba305
 8010b00:	3edb6db7 	.word	0x3edb6db7
 8010b04:	3f19999a 	.word	0x3f19999a
 8010b08:	3f76384f 	.word	0x3f76384f
 8010b0c:	3f763800 	.word	0x3f763800
 8010b10:	369dc3a0 	.word	0x369dc3a0
 8010b14:	080120c4 	.word	0x080120c4
 8010b18:	080120bc 	.word	0x080120bc
 8010b1c:	3338aa3c 	.word	0x3338aa3c
 8010b20:	f040 8095 	bne.w	8010c4e <__ieee754_powf+0x546>
 8010b24:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 8010b1c <__ieee754_powf+0x414>
 8010b28:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010b2c:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8010b30:	eef4 6ac7 	vcmpe.f32	s13, s14
 8010b34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b38:	f73f aefa 	bgt.w	8010930 <__ieee754_powf+0x228>
 8010b3c:	15db      	asrs	r3, r3, #23
 8010b3e:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 8010b42:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8010b46:	4103      	asrs	r3, r0
 8010b48:	4423      	add	r3, r4
 8010b4a:	494b      	ldr	r1, [pc, #300]	; (8010c78 <__ieee754_powf+0x570>)
 8010b4c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8010b50:	3a7f      	subs	r2, #127	; 0x7f
 8010b52:	4111      	asrs	r1, r2
 8010b54:	ea23 0101 	bic.w	r1, r3, r1
 8010b58:	ee07 1a10 	vmov	s14, r1
 8010b5c:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8010b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8010b64:	f1c2 0217 	rsb	r2, r2, #23
 8010b68:	4110      	asrs	r0, r2
 8010b6a:	2c00      	cmp	r4, #0
 8010b6c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010b70:	bfb8      	it	lt
 8010b72:	4240      	neglt	r0, r0
 8010b74:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8010b78:	ed9f 0a40 	vldr	s0, [pc, #256]	; 8010c7c <__ieee754_powf+0x574>
 8010b7c:	eddf 6a40 	vldr	s13, [pc, #256]	; 8010c80 <__ieee754_powf+0x578>
 8010b80:	ee17 3a10 	vmov	r3, s14
 8010b84:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8010b88:	f023 030f 	bic.w	r3, r3, #15
 8010b8c:	ee07 3a10 	vmov	s14, r3
 8010b90:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010b94:	ee27 0a00 	vmul.f32	s0, s14, s0
 8010b98:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8010b9c:	eddf 7a39 	vldr	s15, [pc, #228]	; 8010c84 <__ieee754_powf+0x57c>
 8010ba0:	eea0 0aa7 	vfma.f32	s0, s1, s15
 8010ba4:	eef0 7a40 	vmov.f32	s15, s0
 8010ba8:	eee7 7a26 	vfma.f32	s15, s14, s13
 8010bac:	eeb0 6a67 	vmov.f32	s12, s15
 8010bb0:	eea7 6a66 	vfms.f32	s12, s14, s13
 8010bb4:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8010bb8:	ee30 0a46 	vsub.f32	s0, s0, s12
 8010bbc:	eddf 6a32 	vldr	s13, [pc, #200]	; 8010c88 <__ieee754_powf+0x580>
 8010bc0:	ed9f 6a32 	vldr	s12, [pc, #200]	; 8010c8c <__ieee754_powf+0x584>
 8010bc4:	eee7 6a06 	vfma.f32	s13, s14, s12
 8010bc8:	ed9f 6a31 	vldr	s12, [pc, #196]	; 8010c90 <__ieee754_powf+0x588>
 8010bcc:	eea6 6a87 	vfma.f32	s12, s13, s14
 8010bd0:	eddf 6a30 	vldr	s13, [pc, #192]	; 8010c94 <__ieee754_powf+0x58c>
 8010bd4:	eee6 6a07 	vfma.f32	s13, s12, s14
 8010bd8:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 8010c98 <__ieee754_powf+0x590>
 8010bdc:	eea6 6a87 	vfma.f32	s12, s13, s14
 8010be0:	eef0 6a67 	vmov.f32	s13, s15
 8010be4:	eee6 6a47 	vfms.f32	s13, s12, s14
 8010be8:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8010bec:	ee27 6aa6 	vmul.f32	s12, s15, s13
 8010bf0:	ee76 6ac7 	vsub.f32	s13, s13, s14
 8010bf4:	eea7 0a80 	vfma.f32	s0, s15, s0
 8010bf8:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8010bfc:	ee37 0a40 	vsub.f32	s0, s14, s0
 8010c00:	ee70 7a67 	vsub.f32	s15, s0, s15
 8010c04:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8010c08:	ee30 0a67 	vsub.f32	s0, s0, s15
 8010c0c:	ee10 3a10 	vmov	r3, s0
 8010c10:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8010c14:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8010c18:	da1f      	bge.n	8010c5a <__ieee754_powf+0x552>
 8010c1a:	f000 fdf3 	bl	8011804 <scalbnf>
 8010c1e:	ee20 0a08 	vmul.f32	s0, s0, s16
 8010c22:	e589      	b.n	8010738 <__ieee754_powf+0x30>
 8010c24:	4a1d      	ldr	r2, [pc, #116]	; (8010c9c <__ieee754_powf+0x594>)
 8010c26:	4293      	cmp	r3, r2
 8010c28:	dd07      	ble.n	8010c3a <__ieee754_powf+0x532>
 8010c2a:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8010c2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c32:	bf4c      	ite	mi
 8010c34:	2001      	movmi	r0, #1
 8010c36:	2000      	movpl	r0, #0
 8010c38:	e61f      	b.n	801087a <__ieee754_powf+0x172>
 8010c3a:	d108      	bne.n	8010c4e <__ieee754_powf+0x546>
 8010c3c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010c40:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8010c44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c48:	f6ff af78 	blt.w	8010b3c <__ieee754_powf+0x434>
 8010c4c:	e7ed      	b.n	8010c2a <__ieee754_powf+0x522>
 8010c4e:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 8010c52:	f73f af73 	bgt.w	8010b3c <__ieee754_powf+0x434>
 8010c56:	2000      	movs	r0, #0
 8010c58:	e78c      	b.n	8010b74 <__ieee754_powf+0x46c>
 8010c5a:	ee00 3a10 	vmov	s0, r3
 8010c5e:	e7de      	b.n	8010c1e <__ieee754_powf+0x516>
 8010c60:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8010c64:	e568      	b.n	8010738 <__ieee754_powf+0x30>
 8010c66:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8010ca0 <__ieee754_powf+0x598>
 8010c6a:	e565      	b.n	8010738 <__ieee754_powf+0x30>
 8010c6c:	eeb0 0a48 	vmov.f32	s0, s16
 8010c70:	e562      	b.n	8010738 <__ieee754_powf+0x30>
 8010c72:	2700      	movs	r7, #0
 8010c74:	e58d      	b.n	8010792 <__ieee754_powf+0x8a>
 8010c76:	bf00      	nop
 8010c78:	007fffff 	.word	0x007fffff
 8010c7c:	35bfbe8c 	.word	0x35bfbe8c
 8010c80:	3f317200 	.word	0x3f317200
 8010c84:	3f317218 	.word	0x3f317218
 8010c88:	b5ddea0e 	.word	0xb5ddea0e
 8010c8c:	3331bb4c 	.word	0x3331bb4c
 8010c90:	388ab355 	.word	0x388ab355
 8010c94:	bb360b61 	.word	0xbb360b61
 8010c98:	3e2aaaab 	.word	0x3e2aaaab
 8010c9c:	43160000 	.word	0x43160000
 8010ca0:	00000000 	.word	0x00000000

08010ca4 <__ieee754_rem_pio2f>:
 8010ca4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010ca6:	ee10 6a10 	vmov	r6, s0
 8010caa:	4b8e      	ldr	r3, [pc, #568]	; (8010ee4 <__ieee754_rem_pio2f+0x240>)
 8010cac:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8010cb0:	429d      	cmp	r5, r3
 8010cb2:	b087      	sub	sp, #28
 8010cb4:	eef0 7a40 	vmov.f32	s15, s0
 8010cb8:	4604      	mov	r4, r0
 8010cba:	dc05      	bgt.n	8010cc8 <__ieee754_rem_pio2f+0x24>
 8010cbc:	2300      	movs	r3, #0
 8010cbe:	ed80 0a00 	vstr	s0, [r0]
 8010cc2:	6043      	str	r3, [r0, #4]
 8010cc4:	2000      	movs	r0, #0
 8010cc6:	e01a      	b.n	8010cfe <__ieee754_rem_pio2f+0x5a>
 8010cc8:	4b87      	ldr	r3, [pc, #540]	; (8010ee8 <__ieee754_rem_pio2f+0x244>)
 8010cca:	429d      	cmp	r5, r3
 8010ccc:	dc46      	bgt.n	8010d5c <__ieee754_rem_pio2f+0xb8>
 8010cce:	2e00      	cmp	r6, #0
 8010cd0:	ed9f 0a86 	vldr	s0, [pc, #536]	; 8010eec <__ieee754_rem_pio2f+0x248>
 8010cd4:	4b86      	ldr	r3, [pc, #536]	; (8010ef0 <__ieee754_rem_pio2f+0x24c>)
 8010cd6:	f025 050f 	bic.w	r5, r5, #15
 8010cda:	dd1f      	ble.n	8010d1c <__ieee754_rem_pio2f+0x78>
 8010cdc:	429d      	cmp	r5, r3
 8010cde:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8010ce2:	d00e      	beq.n	8010d02 <__ieee754_rem_pio2f+0x5e>
 8010ce4:	ed9f 7a83 	vldr	s14, [pc, #524]	; 8010ef4 <__ieee754_rem_pio2f+0x250>
 8010ce8:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8010cec:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8010cf0:	ed80 0a00 	vstr	s0, [r0]
 8010cf4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010cf8:	2001      	movs	r0, #1
 8010cfa:	edc4 7a01 	vstr	s15, [r4, #4]
 8010cfe:	b007      	add	sp, #28
 8010d00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010d02:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 8010ef8 <__ieee754_rem_pio2f+0x254>
 8010d06:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8010efc <__ieee754_rem_pio2f+0x258>
 8010d0a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8010d0e:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8010d12:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8010d16:	edc0 6a00 	vstr	s13, [r0]
 8010d1a:	e7eb      	b.n	8010cf4 <__ieee754_rem_pio2f+0x50>
 8010d1c:	429d      	cmp	r5, r3
 8010d1e:	ee77 7a80 	vadd.f32	s15, s15, s0
 8010d22:	d00e      	beq.n	8010d42 <__ieee754_rem_pio2f+0x9e>
 8010d24:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8010ef4 <__ieee754_rem_pio2f+0x250>
 8010d28:	ee37 0a87 	vadd.f32	s0, s15, s14
 8010d2c:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8010d30:	ed80 0a00 	vstr	s0, [r0]
 8010d34:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010d38:	f04f 30ff 	mov.w	r0, #4294967295
 8010d3c:	edc4 7a01 	vstr	s15, [r4, #4]
 8010d40:	e7dd      	b.n	8010cfe <__ieee754_rem_pio2f+0x5a>
 8010d42:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 8010ef8 <__ieee754_rem_pio2f+0x254>
 8010d46:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8010efc <__ieee754_rem_pio2f+0x258>
 8010d4a:	ee77 7a80 	vadd.f32	s15, s15, s0
 8010d4e:	ee77 6a87 	vadd.f32	s13, s15, s14
 8010d52:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8010d56:	edc0 6a00 	vstr	s13, [r0]
 8010d5a:	e7eb      	b.n	8010d34 <__ieee754_rem_pio2f+0x90>
 8010d5c:	4b68      	ldr	r3, [pc, #416]	; (8010f00 <__ieee754_rem_pio2f+0x25c>)
 8010d5e:	429d      	cmp	r5, r3
 8010d60:	dc72      	bgt.n	8010e48 <__ieee754_rem_pio2f+0x1a4>
 8010d62:	f000 fcf3 	bl	801174c <fabsf>
 8010d66:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8010f04 <__ieee754_rem_pio2f+0x260>
 8010d6a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8010d6e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8010d72:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010d76:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8010d7a:	ee17 0a90 	vmov	r0, s15
 8010d7e:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8010eec <__ieee754_rem_pio2f+0x248>
 8010d82:	eea7 0a67 	vfms.f32	s0, s14, s15
 8010d86:	281f      	cmp	r0, #31
 8010d88:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8010ef4 <__ieee754_rem_pio2f+0x250>
 8010d8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010d90:	eeb1 6a47 	vneg.f32	s12, s14
 8010d94:	ee70 6a67 	vsub.f32	s13, s0, s15
 8010d98:	ee16 2a90 	vmov	r2, s13
 8010d9c:	dc1c      	bgt.n	8010dd8 <__ieee754_rem_pio2f+0x134>
 8010d9e:	495a      	ldr	r1, [pc, #360]	; (8010f08 <__ieee754_rem_pio2f+0x264>)
 8010da0:	1e47      	subs	r7, r0, #1
 8010da2:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 8010da6:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8010daa:	428b      	cmp	r3, r1
 8010dac:	d014      	beq.n	8010dd8 <__ieee754_rem_pio2f+0x134>
 8010dae:	6022      	str	r2, [r4, #0]
 8010db0:	ed94 7a00 	vldr	s14, [r4]
 8010db4:	ee30 0a47 	vsub.f32	s0, s0, s14
 8010db8:	2e00      	cmp	r6, #0
 8010dba:	ee30 0a67 	vsub.f32	s0, s0, s15
 8010dbe:	ed84 0a01 	vstr	s0, [r4, #4]
 8010dc2:	da9c      	bge.n	8010cfe <__ieee754_rem_pio2f+0x5a>
 8010dc4:	eeb1 7a47 	vneg.f32	s14, s14
 8010dc8:	eeb1 0a40 	vneg.f32	s0, s0
 8010dcc:	ed84 7a00 	vstr	s14, [r4]
 8010dd0:	ed84 0a01 	vstr	s0, [r4, #4]
 8010dd4:	4240      	negs	r0, r0
 8010dd6:	e792      	b.n	8010cfe <__ieee754_rem_pio2f+0x5a>
 8010dd8:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8010ddc:	15eb      	asrs	r3, r5, #23
 8010dde:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 8010de2:	2d08      	cmp	r5, #8
 8010de4:	dde3      	ble.n	8010dae <__ieee754_rem_pio2f+0x10a>
 8010de6:	eddf 7a44 	vldr	s15, [pc, #272]	; 8010ef8 <__ieee754_rem_pio2f+0x254>
 8010dea:	eddf 5a44 	vldr	s11, [pc, #272]	; 8010efc <__ieee754_rem_pio2f+0x258>
 8010dee:	eef0 6a40 	vmov.f32	s13, s0
 8010df2:	eee6 6a27 	vfma.f32	s13, s12, s15
 8010df6:	ee30 0a66 	vsub.f32	s0, s0, s13
 8010dfa:	eea6 0a27 	vfma.f32	s0, s12, s15
 8010dfe:	eef0 7a40 	vmov.f32	s15, s0
 8010e02:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8010e06:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8010e0a:	ee15 2a90 	vmov	r2, s11
 8010e0e:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8010e12:	1a5b      	subs	r3, r3, r1
 8010e14:	2b19      	cmp	r3, #25
 8010e16:	dc04      	bgt.n	8010e22 <__ieee754_rem_pio2f+0x17e>
 8010e18:	edc4 5a00 	vstr	s11, [r4]
 8010e1c:	eeb0 0a66 	vmov.f32	s0, s13
 8010e20:	e7c6      	b.n	8010db0 <__ieee754_rem_pio2f+0x10c>
 8010e22:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8010f0c <__ieee754_rem_pio2f+0x268>
 8010e26:	eeb0 0a66 	vmov.f32	s0, s13
 8010e2a:	eea6 0a25 	vfma.f32	s0, s12, s11
 8010e2e:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8010e32:	eddf 6a37 	vldr	s13, [pc, #220]	; 8010f10 <__ieee754_rem_pio2f+0x26c>
 8010e36:	eee6 7a25 	vfma.f32	s15, s12, s11
 8010e3a:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8010e3e:	ee30 7a67 	vsub.f32	s14, s0, s15
 8010e42:	ed84 7a00 	vstr	s14, [r4]
 8010e46:	e7b3      	b.n	8010db0 <__ieee754_rem_pio2f+0x10c>
 8010e48:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8010e4c:	db06      	blt.n	8010e5c <__ieee754_rem_pio2f+0x1b8>
 8010e4e:	ee70 7a40 	vsub.f32	s15, s0, s0
 8010e52:	edc0 7a01 	vstr	s15, [r0, #4]
 8010e56:	edc0 7a00 	vstr	s15, [r0]
 8010e5a:	e733      	b.n	8010cc4 <__ieee754_rem_pio2f+0x20>
 8010e5c:	15ea      	asrs	r2, r5, #23
 8010e5e:	3a86      	subs	r2, #134	; 0x86
 8010e60:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8010e64:	ee07 3a90 	vmov	s15, r3
 8010e68:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8010e6c:	eddf 6a29 	vldr	s13, [pc, #164]	; 8010f14 <__ieee754_rem_pio2f+0x270>
 8010e70:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8010e74:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010e78:	ed8d 7a03 	vstr	s14, [sp, #12]
 8010e7c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8010e80:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8010e84:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8010e88:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010e8c:	ed8d 7a04 	vstr	s14, [sp, #16]
 8010e90:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8010e94:	eef5 7a40 	vcmp.f32	s15, #0.0
 8010e98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e9c:	edcd 7a05 	vstr	s15, [sp, #20]
 8010ea0:	d11e      	bne.n	8010ee0 <__ieee754_rem_pio2f+0x23c>
 8010ea2:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8010ea6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010eaa:	bf14      	ite	ne
 8010eac:	2302      	movne	r3, #2
 8010eae:	2301      	moveq	r3, #1
 8010eb0:	4919      	ldr	r1, [pc, #100]	; (8010f18 <__ieee754_rem_pio2f+0x274>)
 8010eb2:	9101      	str	r1, [sp, #4]
 8010eb4:	2102      	movs	r1, #2
 8010eb6:	9100      	str	r1, [sp, #0]
 8010eb8:	a803      	add	r0, sp, #12
 8010eba:	4621      	mov	r1, r4
 8010ebc:	f000 f892 	bl	8010fe4 <__kernel_rem_pio2f>
 8010ec0:	2e00      	cmp	r6, #0
 8010ec2:	f6bf af1c 	bge.w	8010cfe <__ieee754_rem_pio2f+0x5a>
 8010ec6:	edd4 7a00 	vldr	s15, [r4]
 8010eca:	eef1 7a67 	vneg.f32	s15, s15
 8010ece:	edc4 7a00 	vstr	s15, [r4]
 8010ed2:	edd4 7a01 	vldr	s15, [r4, #4]
 8010ed6:	eef1 7a67 	vneg.f32	s15, s15
 8010eda:	edc4 7a01 	vstr	s15, [r4, #4]
 8010ede:	e779      	b.n	8010dd4 <__ieee754_rem_pio2f+0x130>
 8010ee0:	2303      	movs	r3, #3
 8010ee2:	e7e5      	b.n	8010eb0 <__ieee754_rem_pio2f+0x20c>
 8010ee4:	3f490fd8 	.word	0x3f490fd8
 8010ee8:	4016cbe3 	.word	0x4016cbe3
 8010eec:	3fc90f80 	.word	0x3fc90f80
 8010ef0:	3fc90fd0 	.word	0x3fc90fd0
 8010ef4:	37354443 	.word	0x37354443
 8010ef8:	37354400 	.word	0x37354400
 8010efc:	2e85a308 	.word	0x2e85a308
 8010f00:	43490f80 	.word	0x43490f80
 8010f04:	3f22f984 	.word	0x3f22f984
 8010f08:	080120cc 	.word	0x080120cc
 8010f0c:	2e85a300 	.word	0x2e85a300
 8010f10:	248d3132 	.word	0x248d3132
 8010f14:	43800000 	.word	0x43800000
 8010f18:	0801214c 	.word	0x0801214c

08010f1c <__ieee754_sqrtf>:
 8010f1c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8010f20:	4770      	bx	lr
	...

08010f24 <__kernel_cosf>:
 8010f24:	ee10 3a10 	vmov	r3, s0
 8010f28:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010f2c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8010f30:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8010f34:	da05      	bge.n	8010f42 <__kernel_cosf+0x1e>
 8010f36:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8010f3a:	ee17 2a90 	vmov	r2, s15
 8010f3e:	2a00      	cmp	r2, #0
 8010f40:	d03d      	beq.n	8010fbe <__kernel_cosf+0x9a>
 8010f42:	ee60 5a00 	vmul.f32	s11, s0, s0
 8010f46:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8010fc4 <__kernel_cosf+0xa0>
 8010f4a:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8010fc8 <__kernel_cosf+0xa4>
 8010f4e:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8010fcc <__kernel_cosf+0xa8>
 8010f52:	4a1f      	ldr	r2, [pc, #124]	; (8010fd0 <__kernel_cosf+0xac>)
 8010f54:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8010f58:	4293      	cmp	r3, r2
 8010f5a:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8010fd4 <__kernel_cosf+0xb0>
 8010f5e:	eee7 7a25 	vfma.f32	s15, s14, s11
 8010f62:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8010fd8 <__kernel_cosf+0xb4>
 8010f66:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8010f6a:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8010fdc <__kernel_cosf+0xb8>
 8010f6e:	eee7 7a25 	vfma.f32	s15, s14, s11
 8010f72:	eeb0 7a66 	vmov.f32	s14, s13
 8010f76:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8010f7a:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8010f7e:	ee65 7aa6 	vmul.f32	s15, s11, s13
 8010f82:	ee67 6a25 	vmul.f32	s13, s14, s11
 8010f86:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 8010f8a:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8010f8e:	dc04      	bgt.n	8010f9a <__kernel_cosf+0x76>
 8010f90:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8010f94:	ee36 0a47 	vsub.f32	s0, s12, s14
 8010f98:	4770      	bx	lr
 8010f9a:	4a11      	ldr	r2, [pc, #68]	; (8010fe0 <__kernel_cosf+0xbc>)
 8010f9c:	4293      	cmp	r3, r2
 8010f9e:	bfda      	itte	le
 8010fa0:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8010fa4:	ee06 3a90 	vmovle	s13, r3
 8010fa8:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 8010fac:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8010fb0:	ee36 0a66 	vsub.f32	s0, s12, s13
 8010fb4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010fb8:	ee30 0a67 	vsub.f32	s0, s0, s15
 8010fbc:	4770      	bx	lr
 8010fbe:	eeb0 0a46 	vmov.f32	s0, s12
 8010fc2:	4770      	bx	lr
 8010fc4:	ad47d74e 	.word	0xad47d74e
 8010fc8:	310f74f6 	.word	0x310f74f6
 8010fcc:	3d2aaaab 	.word	0x3d2aaaab
 8010fd0:	3e999999 	.word	0x3e999999
 8010fd4:	b493f27c 	.word	0xb493f27c
 8010fd8:	37d00d01 	.word	0x37d00d01
 8010fdc:	bab60b61 	.word	0xbab60b61
 8010fe0:	3f480000 	.word	0x3f480000

08010fe4 <__kernel_rem_pio2f>:
 8010fe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010fe8:	ed2d 8b04 	vpush	{d8-d9}
 8010fec:	b0d9      	sub	sp, #356	; 0x164
 8010fee:	4688      	mov	r8, r1
 8010ff0:	9002      	str	r0, [sp, #8]
 8010ff2:	49bb      	ldr	r1, [pc, #748]	; (80112e0 <__kernel_rem_pio2f+0x2fc>)
 8010ff4:	9866      	ldr	r0, [sp, #408]	; 0x198
 8010ff6:	9301      	str	r3, [sp, #4]
 8010ff8:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 8010ffc:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 8011000:	1e59      	subs	r1, r3, #1
 8011002:	1d13      	adds	r3, r2, #4
 8011004:	db27      	blt.n	8011056 <__kernel_rem_pio2f+0x72>
 8011006:	f1b2 0b03 	subs.w	fp, r2, #3
 801100a:	bf48      	it	mi
 801100c:	f102 0b04 	addmi.w	fp, r2, #4
 8011010:	ea4f 00eb 	mov.w	r0, fp, asr #3
 8011014:	1c45      	adds	r5, r0, #1
 8011016:	00ec      	lsls	r4, r5, #3
 8011018:	1a47      	subs	r7, r0, r1
 801101a:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 80112f0 <__kernel_rem_pio2f+0x30c>
 801101e:	9403      	str	r4, [sp, #12]
 8011020:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 8011024:	eb0a 0c01 	add.w	ip, sl, r1
 8011028:	ae1c      	add	r6, sp, #112	; 0x70
 801102a:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 801102e:	2400      	movs	r4, #0
 8011030:	4564      	cmp	r4, ip
 8011032:	dd12      	ble.n	801105a <__kernel_rem_pio2f+0x76>
 8011034:	9b01      	ldr	r3, [sp, #4]
 8011036:	ac1c      	add	r4, sp, #112	; 0x70
 8011038:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 801103c:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 8011040:	f04f 0c00 	mov.w	ip, #0
 8011044:	45d4      	cmp	ip, sl
 8011046:	dc27      	bgt.n	8011098 <__kernel_rem_pio2f+0xb4>
 8011048:	f8dd 9008 	ldr.w	r9, [sp, #8]
 801104c:	eddf 7aa8 	vldr	s15, [pc, #672]	; 80112f0 <__kernel_rem_pio2f+0x30c>
 8011050:	4627      	mov	r7, r4
 8011052:	2600      	movs	r6, #0
 8011054:	e016      	b.n	8011084 <__kernel_rem_pio2f+0xa0>
 8011056:	2000      	movs	r0, #0
 8011058:	e7dc      	b.n	8011014 <__kernel_rem_pio2f+0x30>
 801105a:	42e7      	cmn	r7, r4
 801105c:	bf5d      	ittte	pl
 801105e:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 8011062:	ee07 3a90 	vmovpl	s15, r3
 8011066:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 801106a:	eef0 7a47 	vmovmi.f32	s15, s14
 801106e:	ece6 7a01 	vstmia	r6!, {s15}
 8011072:	3401      	adds	r4, #1
 8011074:	e7dc      	b.n	8011030 <__kernel_rem_pio2f+0x4c>
 8011076:	ecf9 6a01 	vldmia	r9!, {s13}
 801107a:	ed97 7a00 	vldr	s14, [r7]
 801107e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8011082:	3601      	adds	r6, #1
 8011084:	428e      	cmp	r6, r1
 8011086:	f1a7 0704 	sub.w	r7, r7, #4
 801108a:	ddf4      	ble.n	8011076 <__kernel_rem_pio2f+0x92>
 801108c:	eceb 7a01 	vstmia	fp!, {s15}
 8011090:	f10c 0c01 	add.w	ip, ip, #1
 8011094:	3404      	adds	r4, #4
 8011096:	e7d5      	b.n	8011044 <__kernel_rem_pio2f+0x60>
 8011098:	ab08      	add	r3, sp, #32
 801109a:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 801109e:	eddf 8a93 	vldr	s17, [pc, #588]	; 80112ec <__kernel_rem_pio2f+0x308>
 80110a2:	ed9f 9a91 	vldr	s18, [pc, #580]	; 80112e8 <__kernel_rem_pio2f+0x304>
 80110a6:	9304      	str	r3, [sp, #16]
 80110a8:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 80110ac:	4656      	mov	r6, sl
 80110ae:	00b3      	lsls	r3, r6, #2
 80110b0:	9305      	str	r3, [sp, #20]
 80110b2:	ab58      	add	r3, sp, #352	; 0x160
 80110b4:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 80110b8:	ac08      	add	r4, sp, #32
 80110ba:	ab44      	add	r3, sp, #272	; 0x110
 80110bc:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 80110c0:	46a4      	mov	ip, r4
 80110c2:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 80110c6:	4637      	mov	r7, r6
 80110c8:	2f00      	cmp	r7, #0
 80110ca:	f1a0 0004 	sub.w	r0, r0, #4
 80110ce:	dc4f      	bgt.n	8011170 <__kernel_rem_pio2f+0x18c>
 80110d0:	4628      	mov	r0, r5
 80110d2:	e9cd 1206 	strd	r1, r2, [sp, #24]
 80110d6:	f000 fb95 	bl	8011804 <scalbnf>
 80110da:	eeb0 8a40 	vmov.f32	s16, s0
 80110de:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 80110e2:	ee28 0a00 	vmul.f32	s0, s16, s0
 80110e6:	f000 fb45 	bl	8011774 <floorf>
 80110ea:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 80110ee:	eea0 8a67 	vfms.f32	s16, s0, s15
 80110f2:	2d00      	cmp	r5, #0
 80110f4:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 80110f8:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 80110fc:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8011100:	ee17 9a90 	vmov	r9, s15
 8011104:	ee38 8a40 	vsub.f32	s16, s16, s0
 8011108:	dd44      	ble.n	8011194 <__kernel_rem_pio2f+0x1b0>
 801110a:	f106 3cff 	add.w	ip, r6, #4294967295
 801110e:	ab08      	add	r3, sp, #32
 8011110:	f1c5 0e08 	rsb	lr, r5, #8
 8011114:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 8011118:	fa47 f00e 	asr.w	r0, r7, lr
 801111c:	4481      	add	r9, r0
 801111e:	fa00 f00e 	lsl.w	r0, r0, lr
 8011122:	1a3f      	subs	r7, r7, r0
 8011124:	f1c5 0007 	rsb	r0, r5, #7
 8011128:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 801112c:	4107      	asrs	r7, r0
 801112e:	2f00      	cmp	r7, #0
 8011130:	dd3f      	ble.n	80111b2 <__kernel_rem_pio2f+0x1ce>
 8011132:	f04f 0e00 	mov.w	lr, #0
 8011136:	f109 0901 	add.w	r9, r9, #1
 801113a:	4673      	mov	r3, lr
 801113c:	4576      	cmp	r6, lr
 801113e:	dc6b      	bgt.n	8011218 <__kernel_rem_pio2f+0x234>
 8011140:	2d00      	cmp	r5, #0
 8011142:	dd04      	ble.n	801114e <__kernel_rem_pio2f+0x16a>
 8011144:	2d01      	cmp	r5, #1
 8011146:	d078      	beq.n	801123a <__kernel_rem_pio2f+0x256>
 8011148:	2d02      	cmp	r5, #2
 801114a:	f000 8081 	beq.w	8011250 <__kernel_rem_pio2f+0x26c>
 801114e:	2f02      	cmp	r7, #2
 8011150:	d12f      	bne.n	80111b2 <__kernel_rem_pio2f+0x1ce>
 8011152:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8011156:	ee30 8a48 	vsub.f32	s16, s0, s16
 801115a:	b353      	cbz	r3, 80111b2 <__kernel_rem_pio2f+0x1ce>
 801115c:	4628      	mov	r0, r5
 801115e:	e9cd 1206 	strd	r1, r2, [sp, #24]
 8011162:	f000 fb4f 	bl	8011804 <scalbnf>
 8011166:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 801116a:	ee38 8a40 	vsub.f32	s16, s16, s0
 801116e:	e020      	b.n	80111b2 <__kernel_rem_pio2f+0x1ce>
 8011170:	ee60 7a28 	vmul.f32	s15, s0, s17
 8011174:	3f01      	subs	r7, #1
 8011176:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801117a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801117e:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8011182:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8011186:	ecac 0a01 	vstmia	ip!, {s0}
 801118a:	ed90 0a00 	vldr	s0, [r0]
 801118e:	ee37 0a80 	vadd.f32	s0, s15, s0
 8011192:	e799      	b.n	80110c8 <__kernel_rem_pio2f+0xe4>
 8011194:	d105      	bne.n	80111a2 <__kernel_rem_pio2f+0x1be>
 8011196:	1e70      	subs	r0, r6, #1
 8011198:	ab08      	add	r3, sp, #32
 801119a:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 801119e:	11ff      	asrs	r7, r7, #7
 80111a0:	e7c5      	b.n	801112e <__kernel_rem_pio2f+0x14a>
 80111a2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80111a6:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80111aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80111ae:	da31      	bge.n	8011214 <__kernel_rem_pio2f+0x230>
 80111b0:	2700      	movs	r7, #0
 80111b2:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80111b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80111ba:	f040 809b 	bne.w	80112f4 <__kernel_rem_pio2f+0x310>
 80111be:	1e74      	subs	r4, r6, #1
 80111c0:	46a4      	mov	ip, r4
 80111c2:	2000      	movs	r0, #0
 80111c4:	45d4      	cmp	ip, sl
 80111c6:	da4a      	bge.n	801125e <__kernel_rem_pio2f+0x27a>
 80111c8:	2800      	cmp	r0, #0
 80111ca:	d07a      	beq.n	80112c2 <__kernel_rem_pio2f+0x2de>
 80111cc:	ab08      	add	r3, sp, #32
 80111ce:	3d08      	subs	r5, #8
 80111d0:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80111d4:	2b00      	cmp	r3, #0
 80111d6:	f000 8081 	beq.w	80112dc <__kernel_rem_pio2f+0x2f8>
 80111da:	4628      	mov	r0, r5
 80111dc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80111e0:	00a5      	lsls	r5, r4, #2
 80111e2:	f000 fb0f 	bl	8011804 <scalbnf>
 80111e6:	aa44      	add	r2, sp, #272	; 0x110
 80111e8:	1d2b      	adds	r3, r5, #4
 80111ea:	ed9f 7a40 	vldr	s14, [pc, #256]	; 80112ec <__kernel_rem_pio2f+0x308>
 80111ee:	18d1      	adds	r1, r2, r3
 80111f0:	4622      	mov	r2, r4
 80111f2:	2a00      	cmp	r2, #0
 80111f4:	f280 80ae 	bge.w	8011354 <__kernel_rem_pio2f+0x370>
 80111f8:	4622      	mov	r2, r4
 80111fa:	2a00      	cmp	r2, #0
 80111fc:	f2c0 80cc 	blt.w	8011398 <__kernel_rem_pio2f+0x3b4>
 8011200:	a944      	add	r1, sp, #272	; 0x110
 8011202:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 8011206:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 80112e4 <__kernel_rem_pio2f+0x300>
 801120a:	eddf 7a39 	vldr	s15, [pc, #228]	; 80112f0 <__kernel_rem_pio2f+0x30c>
 801120e:	2000      	movs	r0, #0
 8011210:	1aa1      	subs	r1, r4, r2
 8011212:	e0b6      	b.n	8011382 <__kernel_rem_pio2f+0x39e>
 8011214:	2702      	movs	r7, #2
 8011216:	e78c      	b.n	8011132 <__kernel_rem_pio2f+0x14e>
 8011218:	6820      	ldr	r0, [r4, #0]
 801121a:	b94b      	cbnz	r3, 8011230 <__kernel_rem_pio2f+0x24c>
 801121c:	b118      	cbz	r0, 8011226 <__kernel_rem_pio2f+0x242>
 801121e:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8011222:	6020      	str	r0, [r4, #0]
 8011224:	2001      	movs	r0, #1
 8011226:	f10e 0e01 	add.w	lr, lr, #1
 801122a:	3404      	adds	r4, #4
 801122c:	4603      	mov	r3, r0
 801122e:	e785      	b.n	801113c <__kernel_rem_pio2f+0x158>
 8011230:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 8011234:	6020      	str	r0, [r4, #0]
 8011236:	4618      	mov	r0, r3
 8011238:	e7f5      	b.n	8011226 <__kernel_rem_pio2f+0x242>
 801123a:	1e74      	subs	r4, r6, #1
 801123c:	a808      	add	r0, sp, #32
 801123e:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8011242:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8011246:	f10d 0c20 	add.w	ip, sp, #32
 801124a:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 801124e:	e77e      	b.n	801114e <__kernel_rem_pio2f+0x16a>
 8011250:	1e74      	subs	r4, r6, #1
 8011252:	a808      	add	r0, sp, #32
 8011254:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8011258:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 801125c:	e7f3      	b.n	8011246 <__kernel_rem_pio2f+0x262>
 801125e:	ab08      	add	r3, sp, #32
 8011260:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8011264:	f10c 3cff 	add.w	ip, ip, #4294967295
 8011268:	4318      	orrs	r0, r3
 801126a:	e7ab      	b.n	80111c4 <__kernel_rem_pio2f+0x1e0>
 801126c:	f10c 0c01 	add.w	ip, ip, #1
 8011270:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 8011274:	2c00      	cmp	r4, #0
 8011276:	d0f9      	beq.n	801126c <__kernel_rem_pio2f+0x288>
 8011278:	9b05      	ldr	r3, [sp, #20]
 801127a:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 801127e:	eb0d 0003 	add.w	r0, sp, r3
 8011282:	9b01      	ldr	r3, [sp, #4]
 8011284:	18f4      	adds	r4, r6, r3
 8011286:	ab1c      	add	r3, sp, #112	; 0x70
 8011288:	1c77      	adds	r7, r6, #1
 801128a:	384c      	subs	r0, #76	; 0x4c
 801128c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8011290:	4466      	add	r6, ip
 8011292:	42be      	cmp	r6, r7
 8011294:	f6ff af0b 	blt.w	80110ae <__kernel_rem_pio2f+0xca>
 8011298:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 801129c:	f8dd e008 	ldr.w	lr, [sp, #8]
 80112a0:	ee07 3a90 	vmov	s15, r3
 80112a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80112a8:	f04f 0c00 	mov.w	ip, #0
 80112ac:	ece4 7a01 	vstmia	r4!, {s15}
 80112b0:	eddf 7a0f 	vldr	s15, [pc, #60]	; 80112f0 <__kernel_rem_pio2f+0x30c>
 80112b4:	46a1      	mov	r9, r4
 80112b6:	458c      	cmp	ip, r1
 80112b8:	dd07      	ble.n	80112ca <__kernel_rem_pio2f+0x2e6>
 80112ba:	ece0 7a01 	vstmia	r0!, {s15}
 80112be:	3701      	adds	r7, #1
 80112c0:	e7e7      	b.n	8011292 <__kernel_rem_pio2f+0x2ae>
 80112c2:	9804      	ldr	r0, [sp, #16]
 80112c4:	f04f 0c01 	mov.w	ip, #1
 80112c8:	e7d2      	b.n	8011270 <__kernel_rem_pio2f+0x28c>
 80112ca:	ecfe 6a01 	vldmia	lr!, {s13}
 80112ce:	ed39 7a01 	vldmdb	r9!, {s14}
 80112d2:	f10c 0c01 	add.w	ip, ip, #1
 80112d6:	eee6 7a87 	vfma.f32	s15, s13, s14
 80112da:	e7ec      	b.n	80112b6 <__kernel_rem_pio2f+0x2d2>
 80112dc:	3c01      	subs	r4, #1
 80112de:	e775      	b.n	80111cc <__kernel_rem_pio2f+0x1e8>
 80112e0:	08012490 	.word	0x08012490
 80112e4:	08012464 	.word	0x08012464
 80112e8:	43800000 	.word	0x43800000
 80112ec:	3b800000 	.word	0x3b800000
 80112f0:	00000000 	.word	0x00000000
 80112f4:	9b03      	ldr	r3, [sp, #12]
 80112f6:	eeb0 0a48 	vmov.f32	s0, s16
 80112fa:	1a98      	subs	r0, r3, r2
 80112fc:	f000 fa82 	bl	8011804 <scalbnf>
 8011300:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 80112e8 <__kernel_rem_pio2f+0x304>
 8011304:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8011308:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801130c:	db19      	blt.n	8011342 <__kernel_rem_pio2f+0x35e>
 801130e:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 80112ec <__kernel_rem_pio2f+0x308>
 8011312:	ee60 7a27 	vmul.f32	s15, s0, s15
 8011316:	aa08      	add	r2, sp, #32
 8011318:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801131c:	1c74      	adds	r4, r6, #1
 801131e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011322:	3508      	adds	r5, #8
 8011324:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8011328:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801132c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8011330:	ee10 3a10 	vmov	r3, s0
 8011334:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8011338:	ee17 3a90 	vmov	r3, s15
 801133c:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8011340:	e74b      	b.n	80111da <__kernel_rem_pio2f+0x1f6>
 8011342:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8011346:	aa08      	add	r2, sp, #32
 8011348:	ee10 3a10 	vmov	r3, s0
 801134c:	4634      	mov	r4, r6
 801134e:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8011352:	e742      	b.n	80111da <__kernel_rem_pio2f+0x1f6>
 8011354:	a808      	add	r0, sp, #32
 8011356:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 801135a:	9001      	str	r0, [sp, #4]
 801135c:	ee07 0a90 	vmov	s15, r0
 8011360:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011364:	3a01      	subs	r2, #1
 8011366:	ee67 7a80 	vmul.f32	s15, s15, s0
 801136a:	ee20 0a07 	vmul.f32	s0, s0, s14
 801136e:	ed61 7a01 	vstmdb	r1!, {s15}
 8011372:	e73e      	b.n	80111f2 <__kernel_rem_pio2f+0x20e>
 8011374:	ecfc 6a01 	vldmia	ip!, {s13}
 8011378:	ecb6 7a01 	vldmia	r6!, {s14}
 801137c:	eee6 7a87 	vfma.f32	s15, s13, s14
 8011380:	3001      	adds	r0, #1
 8011382:	4550      	cmp	r0, sl
 8011384:	dc01      	bgt.n	801138a <__kernel_rem_pio2f+0x3a6>
 8011386:	4288      	cmp	r0, r1
 8011388:	ddf4      	ble.n	8011374 <__kernel_rem_pio2f+0x390>
 801138a:	a858      	add	r0, sp, #352	; 0x160
 801138c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8011390:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 8011394:	3a01      	subs	r2, #1
 8011396:	e730      	b.n	80111fa <__kernel_rem_pio2f+0x216>
 8011398:	9a66      	ldr	r2, [sp, #408]	; 0x198
 801139a:	2a02      	cmp	r2, #2
 801139c:	dc09      	bgt.n	80113b2 <__kernel_rem_pio2f+0x3ce>
 801139e:	2a00      	cmp	r2, #0
 80113a0:	dc2a      	bgt.n	80113f8 <__kernel_rem_pio2f+0x414>
 80113a2:	d043      	beq.n	801142c <__kernel_rem_pio2f+0x448>
 80113a4:	f009 0007 	and.w	r0, r9, #7
 80113a8:	b059      	add	sp, #356	; 0x164
 80113aa:	ecbd 8b04 	vpop	{d8-d9}
 80113ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80113b2:	9b66      	ldr	r3, [sp, #408]	; 0x198
 80113b4:	2b03      	cmp	r3, #3
 80113b6:	d1f5      	bne.n	80113a4 <__kernel_rem_pio2f+0x3c0>
 80113b8:	ab30      	add	r3, sp, #192	; 0xc0
 80113ba:	442b      	add	r3, r5
 80113bc:	461a      	mov	r2, r3
 80113be:	4619      	mov	r1, r3
 80113c0:	4620      	mov	r0, r4
 80113c2:	2800      	cmp	r0, #0
 80113c4:	f1a1 0104 	sub.w	r1, r1, #4
 80113c8:	dc51      	bgt.n	801146e <__kernel_rem_pio2f+0x48a>
 80113ca:	4621      	mov	r1, r4
 80113cc:	2901      	cmp	r1, #1
 80113ce:	f1a2 0204 	sub.w	r2, r2, #4
 80113d2:	dc5c      	bgt.n	801148e <__kernel_rem_pio2f+0x4aa>
 80113d4:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 80112f0 <__kernel_rem_pio2f+0x30c>
 80113d8:	3304      	adds	r3, #4
 80113da:	2c01      	cmp	r4, #1
 80113dc:	dc67      	bgt.n	80114ae <__kernel_rem_pio2f+0x4ca>
 80113de:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 80113e2:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 80113e6:	2f00      	cmp	r7, #0
 80113e8:	d167      	bne.n	80114ba <__kernel_rem_pio2f+0x4d6>
 80113ea:	edc8 6a00 	vstr	s13, [r8]
 80113ee:	ed88 7a01 	vstr	s14, [r8, #4]
 80113f2:	edc8 7a02 	vstr	s15, [r8, #8]
 80113f6:	e7d5      	b.n	80113a4 <__kernel_rem_pio2f+0x3c0>
 80113f8:	aa30      	add	r2, sp, #192	; 0xc0
 80113fa:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 80112f0 <__kernel_rem_pio2f+0x30c>
 80113fe:	4413      	add	r3, r2
 8011400:	4622      	mov	r2, r4
 8011402:	2a00      	cmp	r2, #0
 8011404:	da24      	bge.n	8011450 <__kernel_rem_pio2f+0x46c>
 8011406:	b34f      	cbz	r7, 801145c <__kernel_rem_pio2f+0x478>
 8011408:	eef1 7a47 	vneg.f32	s15, s14
 801140c:	edc8 7a00 	vstr	s15, [r8]
 8011410:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 8011414:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011418:	aa31      	add	r2, sp, #196	; 0xc4
 801141a:	2301      	movs	r3, #1
 801141c:	429c      	cmp	r4, r3
 801141e:	da20      	bge.n	8011462 <__kernel_rem_pio2f+0x47e>
 8011420:	b10f      	cbz	r7, 8011426 <__kernel_rem_pio2f+0x442>
 8011422:	eef1 7a67 	vneg.f32	s15, s15
 8011426:	edc8 7a01 	vstr	s15, [r8, #4]
 801142a:	e7bb      	b.n	80113a4 <__kernel_rem_pio2f+0x3c0>
 801142c:	aa30      	add	r2, sp, #192	; 0xc0
 801142e:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 80112f0 <__kernel_rem_pio2f+0x30c>
 8011432:	4413      	add	r3, r2
 8011434:	2c00      	cmp	r4, #0
 8011436:	da05      	bge.n	8011444 <__kernel_rem_pio2f+0x460>
 8011438:	b10f      	cbz	r7, 801143e <__kernel_rem_pio2f+0x45a>
 801143a:	eef1 7a67 	vneg.f32	s15, s15
 801143e:	edc8 7a00 	vstr	s15, [r8]
 8011442:	e7af      	b.n	80113a4 <__kernel_rem_pio2f+0x3c0>
 8011444:	ed33 7a01 	vldmdb	r3!, {s14}
 8011448:	3c01      	subs	r4, #1
 801144a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801144e:	e7f1      	b.n	8011434 <__kernel_rem_pio2f+0x450>
 8011450:	ed73 7a01 	vldmdb	r3!, {s15}
 8011454:	3a01      	subs	r2, #1
 8011456:	ee37 7a27 	vadd.f32	s14, s14, s15
 801145a:	e7d2      	b.n	8011402 <__kernel_rem_pio2f+0x41e>
 801145c:	eef0 7a47 	vmov.f32	s15, s14
 8011460:	e7d4      	b.n	801140c <__kernel_rem_pio2f+0x428>
 8011462:	ecb2 7a01 	vldmia	r2!, {s14}
 8011466:	3301      	adds	r3, #1
 8011468:	ee77 7a87 	vadd.f32	s15, s15, s14
 801146c:	e7d6      	b.n	801141c <__kernel_rem_pio2f+0x438>
 801146e:	edd1 7a00 	vldr	s15, [r1]
 8011472:	edd1 6a01 	vldr	s13, [r1, #4]
 8011476:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801147a:	3801      	subs	r0, #1
 801147c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011480:	ed81 7a00 	vstr	s14, [r1]
 8011484:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011488:	edc1 7a01 	vstr	s15, [r1, #4]
 801148c:	e799      	b.n	80113c2 <__kernel_rem_pio2f+0x3de>
 801148e:	edd2 7a00 	vldr	s15, [r2]
 8011492:	edd2 6a01 	vldr	s13, [r2, #4]
 8011496:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801149a:	3901      	subs	r1, #1
 801149c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80114a0:	ed82 7a00 	vstr	s14, [r2]
 80114a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80114a8:	edc2 7a01 	vstr	s15, [r2, #4]
 80114ac:	e78e      	b.n	80113cc <__kernel_rem_pio2f+0x3e8>
 80114ae:	ed33 7a01 	vldmdb	r3!, {s14}
 80114b2:	3c01      	subs	r4, #1
 80114b4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80114b8:	e78f      	b.n	80113da <__kernel_rem_pio2f+0x3f6>
 80114ba:	eef1 6a66 	vneg.f32	s13, s13
 80114be:	eeb1 7a47 	vneg.f32	s14, s14
 80114c2:	edc8 6a00 	vstr	s13, [r8]
 80114c6:	ed88 7a01 	vstr	s14, [r8, #4]
 80114ca:	eef1 7a67 	vneg.f32	s15, s15
 80114ce:	e790      	b.n	80113f2 <__kernel_rem_pio2f+0x40e>

080114d0 <__kernel_sinf>:
 80114d0:	ee10 3a10 	vmov	r3, s0
 80114d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80114d8:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80114dc:	da04      	bge.n	80114e8 <__kernel_sinf+0x18>
 80114de:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80114e2:	ee17 3a90 	vmov	r3, s15
 80114e6:	b35b      	cbz	r3, 8011540 <__kernel_sinf+0x70>
 80114e8:	ee20 7a00 	vmul.f32	s14, s0, s0
 80114ec:	eddf 7a15 	vldr	s15, [pc, #84]	; 8011544 <__kernel_sinf+0x74>
 80114f0:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8011548 <__kernel_sinf+0x78>
 80114f4:	eea7 6a27 	vfma.f32	s12, s14, s15
 80114f8:	eddf 7a14 	vldr	s15, [pc, #80]	; 801154c <__kernel_sinf+0x7c>
 80114fc:	eee6 7a07 	vfma.f32	s15, s12, s14
 8011500:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8011550 <__kernel_sinf+0x80>
 8011504:	eea7 6a87 	vfma.f32	s12, s15, s14
 8011508:	eddf 7a12 	vldr	s15, [pc, #72]	; 8011554 <__kernel_sinf+0x84>
 801150c:	ee60 6a07 	vmul.f32	s13, s0, s14
 8011510:	eee6 7a07 	vfma.f32	s15, s12, s14
 8011514:	b930      	cbnz	r0, 8011524 <__kernel_sinf+0x54>
 8011516:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8011558 <__kernel_sinf+0x88>
 801151a:	eea7 6a27 	vfma.f32	s12, s14, s15
 801151e:	eea6 0a26 	vfma.f32	s0, s12, s13
 8011522:	4770      	bx	lr
 8011524:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8011528:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 801152c:	eee0 7a86 	vfma.f32	s15, s1, s12
 8011530:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8011534:	eddf 7a09 	vldr	s15, [pc, #36]	; 801155c <__kernel_sinf+0x8c>
 8011538:	eee6 0aa7 	vfma.f32	s1, s13, s15
 801153c:	ee30 0a60 	vsub.f32	s0, s0, s1
 8011540:	4770      	bx	lr
 8011542:	bf00      	nop
 8011544:	2f2ec9d3 	.word	0x2f2ec9d3
 8011548:	b2d72f34 	.word	0xb2d72f34
 801154c:	3638ef1b 	.word	0x3638ef1b
 8011550:	b9500d01 	.word	0xb9500d01
 8011554:	3c088889 	.word	0x3c088889
 8011558:	be2aaaab 	.word	0xbe2aaaab
 801155c:	3e2aaaab 	.word	0x3e2aaaab

08011560 <with_errnof>:
 8011560:	b513      	push	{r0, r1, r4, lr}
 8011562:	4604      	mov	r4, r0
 8011564:	ed8d 0a01 	vstr	s0, [sp, #4]
 8011568:	f7fb ff00 	bl	800d36c <__errno>
 801156c:	ed9d 0a01 	vldr	s0, [sp, #4]
 8011570:	6004      	str	r4, [r0, #0]
 8011572:	b002      	add	sp, #8
 8011574:	bd10      	pop	{r4, pc}

08011576 <xflowf>:
 8011576:	b130      	cbz	r0, 8011586 <xflowf+0x10>
 8011578:	eef1 7a40 	vneg.f32	s15, s0
 801157c:	ee27 0a80 	vmul.f32	s0, s15, s0
 8011580:	2022      	movs	r0, #34	; 0x22
 8011582:	f7ff bfed 	b.w	8011560 <with_errnof>
 8011586:	eef0 7a40 	vmov.f32	s15, s0
 801158a:	e7f7      	b.n	801157c <xflowf+0x6>

0801158c <__math_uflowf>:
 801158c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8011594 <__math_uflowf+0x8>
 8011590:	f7ff bff1 	b.w	8011576 <xflowf>
 8011594:	10000000 	.word	0x10000000

08011598 <__math_oflowf>:
 8011598:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80115a0 <__math_oflowf+0x8>
 801159c:	f7ff bfeb 	b.w	8011576 <xflowf>
 80115a0:	70000000 	.word	0x70000000

080115a4 <atanf>:
 80115a4:	b538      	push	{r3, r4, r5, lr}
 80115a6:	ee10 5a10 	vmov	r5, s0
 80115aa:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 80115ae:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 80115b2:	eef0 7a40 	vmov.f32	s15, s0
 80115b6:	db10      	blt.n	80115da <atanf+0x36>
 80115b8:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 80115bc:	dd04      	ble.n	80115c8 <atanf+0x24>
 80115be:	ee70 7a00 	vadd.f32	s15, s0, s0
 80115c2:	eeb0 0a67 	vmov.f32	s0, s15
 80115c6:	bd38      	pop	{r3, r4, r5, pc}
 80115c8:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8011700 <atanf+0x15c>
 80115cc:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 8011704 <atanf+0x160>
 80115d0:	2d00      	cmp	r5, #0
 80115d2:	bfd8      	it	le
 80115d4:	eef0 7a40 	vmovle.f32	s15, s0
 80115d8:	e7f3      	b.n	80115c2 <atanf+0x1e>
 80115da:	4b4b      	ldr	r3, [pc, #300]	; (8011708 <atanf+0x164>)
 80115dc:	429c      	cmp	r4, r3
 80115de:	dc10      	bgt.n	8011602 <atanf+0x5e>
 80115e0:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 80115e4:	da0a      	bge.n	80115fc <atanf+0x58>
 80115e6:	ed9f 7a49 	vldr	s14, [pc, #292]	; 801170c <atanf+0x168>
 80115ea:	ee30 7a07 	vadd.f32	s14, s0, s14
 80115ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80115f2:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80115f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80115fa:	dce2      	bgt.n	80115c2 <atanf+0x1e>
 80115fc:	f04f 33ff 	mov.w	r3, #4294967295
 8011600:	e013      	b.n	801162a <atanf+0x86>
 8011602:	f000 f8a3 	bl	801174c <fabsf>
 8011606:	4b42      	ldr	r3, [pc, #264]	; (8011710 <atanf+0x16c>)
 8011608:	429c      	cmp	r4, r3
 801160a:	dc4f      	bgt.n	80116ac <atanf+0x108>
 801160c:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8011610:	429c      	cmp	r4, r3
 8011612:	dc41      	bgt.n	8011698 <atanf+0xf4>
 8011614:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8011618:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801161c:	eea0 7a27 	vfma.f32	s14, s0, s15
 8011620:	2300      	movs	r3, #0
 8011622:	ee30 0a27 	vadd.f32	s0, s0, s15
 8011626:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801162a:	1c5a      	adds	r2, r3, #1
 801162c:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8011630:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8011714 <atanf+0x170>
 8011634:	eddf 5a38 	vldr	s11, [pc, #224]	; 8011718 <atanf+0x174>
 8011638:	ed9f 5a38 	vldr	s10, [pc, #224]	; 801171c <atanf+0x178>
 801163c:	ee66 6a06 	vmul.f32	s13, s12, s12
 8011640:	eee6 5a87 	vfma.f32	s11, s13, s14
 8011644:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8011720 <atanf+0x17c>
 8011648:	eea5 7aa6 	vfma.f32	s14, s11, s13
 801164c:	eddf 5a35 	vldr	s11, [pc, #212]	; 8011724 <atanf+0x180>
 8011650:	eee7 5a26 	vfma.f32	s11, s14, s13
 8011654:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8011728 <atanf+0x184>
 8011658:	eea5 7aa6 	vfma.f32	s14, s11, s13
 801165c:	eddf 5a33 	vldr	s11, [pc, #204]	; 801172c <atanf+0x188>
 8011660:	eee7 5a26 	vfma.f32	s11, s14, s13
 8011664:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8011730 <atanf+0x18c>
 8011668:	eea6 5a87 	vfma.f32	s10, s13, s14
 801166c:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8011734 <atanf+0x190>
 8011670:	eea5 7a26 	vfma.f32	s14, s10, s13
 8011674:	ed9f 5a30 	vldr	s10, [pc, #192]	; 8011738 <atanf+0x194>
 8011678:	eea7 5a26 	vfma.f32	s10, s14, s13
 801167c:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 801173c <atanf+0x198>
 8011680:	eea5 7a26 	vfma.f32	s14, s10, s13
 8011684:	ee27 7a26 	vmul.f32	s14, s14, s13
 8011688:	eea5 7a86 	vfma.f32	s14, s11, s12
 801168c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8011690:	d121      	bne.n	80116d6 <atanf+0x132>
 8011692:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011696:	e794      	b.n	80115c2 <atanf+0x1e>
 8011698:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801169c:	ee30 7a67 	vsub.f32	s14, s0, s15
 80116a0:	ee30 0a27 	vadd.f32	s0, s0, s15
 80116a4:	2301      	movs	r3, #1
 80116a6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80116aa:	e7be      	b.n	801162a <atanf+0x86>
 80116ac:	4b24      	ldr	r3, [pc, #144]	; (8011740 <atanf+0x19c>)
 80116ae:	429c      	cmp	r4, r3
 80116b0:	dc0b      	bgt.n	80116ca <atanf+0x126>
 80116b2:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 80116b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80116ba:	eea0 7a27 	vfma.f32	s14, s0, s15
 80116be:	2302      	movs	r3, #2
 80116c0:	ee70 6a67 	vsub.f32	s13, s0, s15
 80116c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80116c8:	e7af      	b.n	801162a <atanf+0x86>
 80116ca:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80116ce:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80116d2:	2303      	movs	r3, #3
 80116d4:	e7a9      	b.n	801162a <atanf+0x86>
 80116d6:	4a1b      	ldr	r2, [pc, #108]	; (8011744 <atanf+0x1a0>)
 80116d8:	491b      	ldr	r1, [pc, #108]	; (8011748 <atanf+0x1a4>)
 80116da:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80116de:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80116e2:	ed93 0a00 	vldr	s0, [r3]
 80116e6:	ee37 7a40 	vsub.f32	s14, s14, s0
 80116ea:	ed92 0a00 	vldr	s0, [r2]
 80116ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80116f2:	2d00      	cmp	r5, #0
 80116f4:	ee70 7a67 	vsub.f32	s15, s0, s15
 80116f8:	bfb8      	it	lt
 80116fa:	eef1 7a67 	vneglt.f32	s15, s15
 80116fe:	e760      	b.n	80115c2 <atanf+0x1e>
 8011700:	3fc90fdb 	.word	0x3fc90fdb
 8011704:	bfc90fdb 	.word	0xbfc90fdb
 8011708:	3edfffff 	.word	0x3edfffff
 801170c:	7149f2ca 	.word	0x7149f2ca
 8011710:	3f97ffff 	.word	0x3f97ffff
 8011714:	3c8569d7 	.word	0x3c8569d7
 8011718:	3d4bda59 	.word	0x3d4bda59
 801171c:	bd6ef16b 	.word	0xbd6ef16b
 8011720:	3d886b35 	.word	0x3d886b35
 8011724:	3dba2e6e 	.word	0x3dba2e6e
 8011728:	3e124925 	.word	0x3e124925
 801172c:	3eaaaaab 	.word	0x3eaaaaab
 8011730:	bd15a221 	.word	0xbd15a221
 8011734:	bd9d8795 	.word	0xbd9d8795
 8011738:	bde38e38 	.word	0xbde38e38
 801173c:	be4ccccd 	.word	0xbe4ccccd
 8011740:	401bffff 	.word	0x401bffff
 8011744:	0801249c 	.word	0x0801249c
 8011748:	080124ac 	.word	0x080124ac

0801174c <fabsf>:
 801174c:	ee10 3a10 	vmov	r3, s0
 8011750:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011754:	ee00 3a10 	vmov	s0, r3
 8011758:	4770      	bx	lr

0801175a <finitef>:
 801175a:	b082      	sub	sp, #8
 801175c:	ed8d 0a01 	vstr	s0, [sp, #4]
 8011760:	9801      	ldr	r0, [sp, #4]
 8011762:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8011766:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 801176a:	bfac      	ite	ge
 801176c:	2000      	movge	r0, #0
 801176e:	2001      	movlt	r0, #1
 8011770:	b002      	add	sp, #8
 8011772:	4770      	bx	lr

08011774 <floorf>:
 8011774:	ee10 3a10 	vmov	r3, s0
 8011778:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801177c:	3a7f      	subs	r2, #127	; 0x7f
 801177e:	2a16      	cmp	r2, #22
 8011780:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8011784:	dc2a      	bgt.n	80117dc <floorf+0x68>
 8011786:	2a00      	cmp	r2, #0
 8011788:	da11      	bge.n	80117ae <floorf+0x3a>
 801178a:	eddf 7a18 	vldr	s15, [pc, #96]	; 80117ec <floorf+0x78>
 801178e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8011792:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8011796:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801179a:	dd05      	ble.n	80117a8 <floorf+0x34>
 801179c:	2b00      	cmp	r3, #0
 801179e:	da23      	bge.n	80117e8 <floorf+0x74>
 80117a0:	4a13      	ldr	r2, [pc, #76]	; (80117f0 <floorf+0x7c>)
 80117a2:	2900      	cmp	r1, #0
 80117a4:	bf18      	it	ne
 80117a6:	4613      	movne	r3, r2
 80117a8:	ee00 3a10 	vmov	s0, r3
 80117ac:	4770      	bx	lr
 80117ae:	4911      	ldr	r1, [pc, #68]	; (80117f4 <floorf+0x80>)
 80117b0:	4111      	asrs	r1, r2
 80117b2:	420b      	tst	r3, r1
 80117b4:	d0fa      	beq.n	80117ac <floorf+0x38>
 80117b6:	eddf 7a0d 	vldr	s15, [pc, #52]	; 80117ec <floorf+0x78>
 80117ba:	ee30 0a27 	vadd.f32	s0, s0, s15
 80117be:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80117c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80117c6:	ddef      	ble.n	80117a8 <floorf+0x34>
 80117c8:	2b00      	cmp	r3, #0
 80117ca:	bfbe      	ittt	lt
 80117cc:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 80117d0:	fa40 f202 	asrlt.w	r2, r0, r2
 80117d4:	189b      	addlt	r3, r3, r2
 80117d6:	ea23 0301 	bic.w	r3, r3, r1
 80117da:	e7e5      	b.n	80117a8 <floorf+0x34>
 80117dc:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80117e0:	d3e4      	bcc.n	80117ac <floorf+0x38>
 80117e2:	ee30 0a00 	vadd.f32	s0, s0, s0
 80117e6:	4770      	bx	lr
 80117e8:	2300      	movs	r3, #0
 80117ea:	e7dd      	b.n	80117a8 <floorf+0x34>
 80117ec:	7149f2ca 	.word	0x7149f2ca
 80117f0:	bf800000 	.word	0xbf800000
 80117f4:	007fffff 	.word	0x007fffff

080117f8 <nanf>:
 80117f8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8011800 <nanf+0x8>
 80117fc:	4770      	bx	lr
 80117fe:	bf00      	nop
 8011800:	7fc00000 	.word	0x7fc00000

08011804 <scalbnf>:
 8011804:	ee10 3a10 	vmov	r3, s0
 8011808:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 801180c:	d025      	beq.n	801185a <scalbnf+0x56>
 801180e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8011812:	d302      	bcc.n	801181a <scalbnf+0x16>
 8011814:	ee30 0a00 	vadd.f32	s0, s0, s0
 8011818:	4770      	bx	lr
 801181a:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 801181e:	d122      	bne.n	8011866 <scalbnf+0x62>
 8011820:	4b2a      	ldr	r3, [pc, #168]	; (80118cc <scalbnf+0xc8>)
 8011822:	eddf 7a2b 	vldr	s15, [pc, #172]	; 80118d0 <scalbnf+0xcc>
 8011826:	4298      	cmp	r0, r3
 8011828:	ee20 0a27 	vmul.f32	s0, s0, s15
 801182c:	db16      	blt.n	801185c <scalbnf+0x58>
 801182e:	ee10 3a10 	vmov	r3, s0
 8011832:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8011836:	3a19      	subs	r2, #25
 8011838:	4402      	add	r2, r0
 801183a:	2afe      	cmp	r2, #254	; 0xfe
 801183c:	dd15      	ble.n	801186a <scalbnf+0x66>
 801183e:	ee10 3a10 	vmov	r3, s0
 8011842:	eddf 7a24 	vldr	s15, [pc, #144]	; 80118d4 <scalbnf+0xd0>
 8011846:	eddf 6a24 	vldr	s13, [pc, #144]	; 80118d8 <scalbnf+0xd4>
 801184a:	2b00      	cmp	r3, #0
 801184c:	eeb0 7a67 	vmov.f32	s14, s15
 8011850:	bfb8      	it	lt
 8011852:	eef0 7a66 	vmovlt.f32	s15, s13
 8011856:	ee27 0a27 	vmul.f32	s0, s14, s15
 801185a:	4770      	bx	lr
 801185c:	eddf 7a1f 	vldr	s15, [pc, #124]	; 80118dc <scalbnf+0xd8>
 8011860:	ee20 0a27 	vmul.f32	s0, s0, s15
 8011864:	4770      	bx	lr
 8011866:	0dd2      	lsrs	r2, r2, #23
 8011868:	e7e6      	b.n	8011838 <scalbnf+0x34>
 801186a:	2a00      	cmp	r2, #0
 801186c:	dd06      	ble.n	801187c <scalbnf+0x78>
 801186e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8011872:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8011876:	ee00 3a10 	vmov	s0, r3
 801187a:	4770      	bx	lr
 801187c:	f112 0f16 	cmn.w	r2, #22
 8011880:	da1a      	bge.n	80118b8 <scalbnf+0xb4>
 8011882:	f24c 3350 	movw	r3, #50000	; 0xc350
 8011886:	4298      	cmp	r0, r3
 8011888:	ee10 3a10 	vmov	r3, s0
 801188c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8011890:	dd0a      	ble.n	80118a8 <scalbnf+0xa4>
 8011892:	ed9f 0a10 	vldr	s0, [pc, #64]	; 80118d4 <scalbnf+0xd0>
 8011896:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80118d8 <scalbnf+0xd4>
 801189a:	eef0 7a40 	vmov.f32	s15, s0
 801189e:	2b00      	cmp	r3, #0
 80118a0:	bf18      	it	ne
 80118a2:	eeb0 0a47 	vmovne.f32	s0, s14
 80118a6:	e7db      	b.n	8011860 <scalbnf+0x5c>
 80118a8:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 80118dc <scalbnf+0xd8>
 80118ac:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80118e0 <scalbnf+0xdc>
 80118b0:	eef0 7a40 	vmov.f32	s15, s0
 80118b4:	2b00      	cmp	r3, #0
 80118b6:	e7f3      	b.n	80118a0 <scalbnf+0x9c>
 80118b8:	3219      	adds	r2, #25
 80118ba:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80118be:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 80118c2:	eddf 7a08 	vldr	s15, [pc, #32]	; 80118e4 <scalbnf+0xe0>
 80118c6:	ee07 3a10 	vmov	s14, r3
 80118ca:	e7c4      	b.n	8011856 <scalbnf+0x52>
 80118cc:	ffff3cb0 	.word	0xffff3cb0
 80118d0:	4c000000 	.word	0x4c000000
 80118d4:	7149f2ca 	.word	0x7149f2ca
 80118d8:	f149f2ca 	.word	0xf149f2ca
 80118dc:	0da24260 	.word	0x0da24260
 80118e0:	8da24260 	.word	0x8da24260
 80118e4:	33000000 	.word	0x33000000

080118e8 <_init>:
 80118e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80118ea:	bf00      	nop
 80118ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80118ee:	bc08      	pop	{r3}
 80118f0:	469e      	mov	lr, r3
 80118f2:	4770      	bx	lr

080118f4 <_fini>:
 80118f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80118f6:	bf00      	nop
 80118f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80118fa:	bc08      	pop	{r3}
 80118fc:	469e      	mov	lr, r3
 80118fe:	4770      	bx	lr
